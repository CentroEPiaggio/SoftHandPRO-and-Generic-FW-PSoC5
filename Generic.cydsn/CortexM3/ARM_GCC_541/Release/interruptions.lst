ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10446
 458 01dc 04000000 		.word	rx_queue.10450
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10448
 461 01e8 08000000 		.word	data_packet_index.10447
 462 01ec 0C000000 		.word	data_packet_buffer.10449
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 814B     		ldr	r3, .L80
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0054 7F4B     		ldr	r3, .L80+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 005c 7D4B     		ldr	r3, .L80+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0066 7C4B     		ldr	r3, .L80+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F24C82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 91010000 		.word	.L38+1
 552 0080 EF030000 		.word	.L39+1
 553 0084 EF030000 		.word	.L39+1
 554 0088 91010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 7049     		ldr	r1, .L80+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa 6C4B     		ldr	r3, .L80+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 299 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc 6649     		ldr	r1, .L80+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 301 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de 5E49     		ldr	r1, .L80+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 305 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 17


 604 00f8 564B     		ldr	r3, .L80+4
 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 306 0
 609 0100 544B     		ldr	r3, .L80+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 307 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 615              		.loc 1 312 0
 616 010a 07F58843 		add	r3, r7, #17408
 617 010e 03F15E03 		add	r3, r3, #94
 618 0112 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 619 0114 5049     		ldr	r1, .L80+8
 620 0116 1346     		mov	r3, r2
 621 0118 DB00     		lsls	r3, r3, #3
 622 011a 9B1A     		subs	r3, r3, r2
 623 011c 1B01     		lsls	r3, r3, #4
 624 011e 0B44     		add	r3, r3, r1
 625 0120 03F58873 		add	r3, r3, #272
 626 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627 0126 1A46     		mov	r2, r3
 628 0128 4D4B     		ldr	r3, .L80+16
 629 012a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 630 012c 002B     		cmp	r3, #0
 631 012e 24D0     		beq	.L41
 313:..\src/interruptions.c ****                 motor_control_SH();
 632              		.loc 1 313 0
 633 0130 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****                 
 315:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 316:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 634              		.loc 1 316 0
 635 0134 07F58843 		add	r3, r7, #17408
 636 0138 03F15E03 		add	r3, r3, #94
 637 013c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 638 013e 4649     		ldr	r1, .L80+8
 639 0140 1346     		mov	r3, r2
 640 0142 DB00     		lsls	r3, r3, #3
 641 0144 9B1A     		subs	r3, r3, r2
 642 0146 1B01     		lsls	r3, r3, #4
 643 0148 0B44     		add	r3, r3, r1
 644 014a 03F58973 		add	r3, r3, #274
 645 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646 0150 012B     		cmp	r3, #1
 647 0152 12D1     		bne	.L41
 317:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 648              		.loc 1 317 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 18


 649 0154 07F58843 		add	r3, r7, #17408
 650 0158 03F15E03 		add	r3, r3, #94
 651 015c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 652 015e 3E49     		ldr	r1, .L80+8
 653 0160 1346     		mov	r3, r2
 654 0162 DB00     		lsls	r3, r3, #3
 655 0164 9B1A     		subs	r3, r3, r2
 656 0166 1B01     		lsls	r3, r3, #4
 657 0168 0B44     		add	r3, r3, r1
 658 016a 03F58773 		add	r3, r3, #270
 659 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 0170 002B     		cmp	r3, #0
 661 0172 02D1     		bne	.L41
 318:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 662              		.loc 1 318 0
 663 0174 3B4B     		ldr	r3, .L80+20
 664 0176 0022     		movs	r2, #0
 665 0178 1A70     		strb	r2, [r3]
 666              	.L41:
 319:..\src/interruptions.c ****                     }   
 320:..\src/interruptions.c ****                 }
 321:..\src/interruptions.c ****             }
 322:..\src/interruptions.c **** 
 323:..\src/interruptions.c ****             // Check Interrupt 
 324:..\src/interruptions.c **** 
 325:..\src/interruptions.c ****             if (interrupt_flag){
 667              		.loc 1 325 0
 668 017a 364B     		ldr	r3, .L80+4
 669 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 017e 002B     		cmp	r3, #0
 671 0180 00F0AF81 		beq	.L77
 326:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 672              		.loc 1 326 0
 673 0184 334B     		ldr	r3, .L80+4
 674 0186 0022     		movs	r2, #0
 675 0188 1A70     		strb	r2, [r3]
 327:..\src/interruptions.c ****                 interrupt_manager();
 676              		.loc 1 327 0
 677 018a FFF7FEFF 		bl	interrupt_manager
 328:..\src/interruptions.c ****             }
 329:..\src/interruptions.c ****             break;
 678              		.loc 1 329 0
 679 018e A8E1     		b	.L77
 680              	.L38:
 681              	.LBB2:
 330:..\src/interruptions.c ****             
 331:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 332:..\src/interruptions.c ****             
 333:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 334:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 682              		.loc 1 334 0
 683 0190 0023     		movs	r3, #0
 684 0192 07F58842 		add	r2, r7, #17408
 685 0196 02F15F02 		add	r2, r2, #95
 686 019a 1370     		strb	r3, [r2]
 687 019c 89E0     		b	.L43
 688              	.L48:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 19


 335:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 689              		.loc 1 335 0
 690 019e 07F58843 		add	r3, r7, #17408
 691 01a2 03F15F03 		add	r3, r3, #95
 692 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 01a8 2C4A     		ldr	r2, .L80+12
 694 01aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 695 01ac 002B     		cmp	r3, #0
 696 01ae 75D0     		beq	.L44
 336:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 337:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 697              		.loc 1 337 0
 698 01b0 07F58843 		add	r3, r7, #17408
 699 01b4 03F15F03 		add	r3, r3, #95
 700 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 01ba 1846     		mov	r0, r3
 702 01bc FFF7FEFF 		bl	Change_CS_EncoderLine
 338:..\src/interruptions.c ****                               
 339:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 703              		.loc 1 339 0
 704 01c0 07F58843 		add	r3, r7, #17408
 705 01c4 03F15E03 		add	r3, r3, #94
 706 01c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ca 2349     		ldr	r1, .L80+8
 708 01cc 1346     		mov	r3, r2
 709 01ce DB00     		lsls	r3, r3, #3
 710 01d0 9B1A     		subs	r3, r3, r2
 711 01d2 1B01     		lsls	r3, r3, #4
 712 01d4 0B44     		add	r3, r3, r1
 713 01d6 03F58873 		add	r3, r3, #272
 714 01da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 715 01dc 07F58842 		add	r2, r7, #17408
 716 01e0 02F15F02 		add	r2, r2, #95
 717 01e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 718 01e6 9A42     		cmp	r2, r3
 719 01e8 0ED1     		bne	.L45
 340:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 341:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 720              		.loc 1 341 0
 721 01ea 07F58843 		add	r3, r7, #17408
 722 01ee 03F15E03 		add	r3, r3, #94
 723 01f2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 724 01f4 07F58843 		add	r3, r7, #17408
 725 01f8 03F15F03 		add	r3, r3, #95
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 1146     		mov	r1, r2
 728 0200 1846     		mov	r0, r3
 729 0202 FFF7FEFF 		bl	encoder_reading_SPI
 730 0206 40E0     		b	.L46
 731              	.L45:
 342:..\src/interruptions.c ****                     }
 343:..\src/interruptions.c ****                     else {
 344:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 732              		.loc 1 344 0
 733 0208 07F58843 		add	r3, r7, #17408
 734 020c 03F15D03 		add	r3, r3, #93
 735 0210 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 20


 736 0212 1149     		ldr	r1, .L80+8
 737 0214 1346     		mov	r3, r2
 738 0216 DB00     		lsls	r3, r3, #3
 739 0218 9B1A     		subs	r3, r3, r2
 740 021a 1B01     		lsls	r3, r3, #4
 741 021c 0B44     		add	r3, r3, r1
 742 021e 03F58873 		add	r3, r3, #272
 743 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 0224 07F58842 		add	r2, r7, #17408
 745 0228 02F15F02 		add	r2, r2, #95
 746 022c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 747 022e 9A42     		cmp	r2, r3
 748 0230 1AD1     		bne	.L47
 345:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 346:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 749              		.loc 1 346 0
 750 0232 07F58843 		add	r3, r7, #17408
 751 0236 03F15D03 		add	r3, r3, #93
 752 023a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 753 023c 07F58843 		add	r3, r7, #17408
 754 0240 03F15F03 		add	r3, r3, #95
 755 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 756 0246 1146     		mov	r1, r2
 757 0248 1846     		mov	r0, r3
 758 024a FFF7FEFF 		bl	encoder_reading_SPI
 759 024e 1CE0     		b	.L46
 760              	.L81:
 761              		.align	2
 762              	.L80:
 763 0250 00000000 		.word	timer_value0
 764 0254 00000000 		.word	interrupt_flag
 765 0258 00000000 		.word	c_mem
 766 025c 00000000 		.word	N_Encoder_Line_Connected
 767 0260 00000000 		.word	pos_reconstruct
 768 0264 00000000 		.word	change_ext_ref_flag
 769              	.L47:
 347:..\src/interruptions.c ****                         }
 348:..\src/interruptions.c ****                         else {
 349:..\src/interruptions.c ****                             // Get only raw encoder value
 350:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 770              		.loc 1 350 0
 771 0268 07F58843 		add	r3, r7, #17408
 772 026c 03F15F03 		add	r3, r3, #95
 773 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0272 9E4A     		ldr	r2, .L82
 775 0274 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 776 0276 1A46     		mov	r2, r3
 777 0278 07F58843 		add	r3, r7, #17408
 778 027c 03F15F03 		add	r3, r3, #95
 779 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 780 0282 1946     		mov	r1, r3
 781 0284 1046     		mov	r0, r2
 782 0286 FFF7FEFF 		bl	ReadEncoderLine
 783              	.L46:
 351:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 352:..\src/interruptions.c ****                         }
 353:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 21


 354:..\src/interruptions.c **** 
 355:..\src/interruptions.c ****                     // Check Interrupt     
 356:..\src/interruptions.c ****                     
 357:..\src/interruptions.c ****                     if (interrupt_flag){
 784              		.loc 1 357 0
 785 028a 994B     		ldr	r3, .L82+4
 786 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 028e 002B     		cmp	r3, #0
 788 0290 04D0     		beq	.L44
 358:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 789              		.loc 1 358 0
 790 0292 974B     		ldr	r3, .L82+4
 791 0294 0022     		movs	r2, #0
 792 0296 1A70     		strb	r2, [r3]
 359:..\src/interruptions.c ****                         interrupt_manager();
 793              		.loc 1 359 0
 794 0298 FFF7FEFF 		bl	interrupt_manager
 795              	.L44:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 796              		.loc 1 334 0 discriminator 2
 797 029c 07F58843 		add	r3, r7, #17408
 798 02a0 03F15F03 		add	r3, r3, #95
 799 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 02a6 0133     		adds	r3, r3, #1
 801 02a8 07F58842 		add	r2, r7, #17408
 802 02ac 02F15F02 		add	r2, r2, #95
 803 02b0 1370     		strb	r3, [r2]
 804              	.L43:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 805              		.loc 1 334 0 is_stmt 0 discriminator 1
 806 02b2 07F58843 		add	r3, r7, #17408
 807 02b6 03F15F03 		add	r3, r3, #95
 808 02ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02bc 012B     		cmp	r3, #1
 810 02be 7FF66EAF 		bls	.L48
 811              	.LBE2:
 360:..\src/interruptions.c ****                     }
 361:..\src/interruptions.c ****                 }
 362:..\src/interruptions.c ****             } 
 363:..\src/interruptions.c ****             
 364:..\src/interruptions.c ****             //---------------------------------- Control Motor
 365:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 812              		.loc 1 365 0 is_stmt 1
 813 02c2 07F58843 		add	r3, r7, #17408
 814 02c6 03F15E03 		add	r3, r3, #94
 815 02ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 816 02cc 8949     		ldr	r1, .L82+8
 817 02ce 1346     		mov	r3, r2
 818 02d0 DB00     		lsls	r3, r3, #3
 819 02d2 9B1A     		subs	r3, r3, r2
 820 02d4 1B01     		lsls	r3, r3, #4
 821 02d6 0B44     		add	r3, r3, r1
 822 02d8 03F58873 		add	r3, r3, #272
 823 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 02de 1A46     		mov	r2, r3
 825 02e0 854B     		ldr	r3, .L82+12
 826 02e2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 22


 827 02e4 002B     		cmp	r3, #0
 828 02e6 2AD0     		beq	.L49
 366:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 367:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 829              		.loc 1 367 0
 830 02e8 07F58843 		add	r3, r7, #17408
 831 02ec 03F15E03 		add	r3, r3, #94
 832 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 02f2 1846     		mov	r0, r3
 834 02f4 FFF7FEFF 		bl	motor_control_generic
 368:..\src/interruptions.c ****                 
 369:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 835              		.loc 1 370 0
 836 02f8 07F58843 		add	r3, r7, #17408
 837 02fc 03F15E03 		add	r3, r3, #94
 838 0300 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 839 0302 7C49     		ldr	r1, .L82+8
 840 0304 1346     		mov	r3, r2
 841 0306 DB00     		lsls	r3, r3, #3
 842 0308 9B1A     		subs	r3, r3, r2
 843 030a 1B01     		lsls	r3, r3, #4
 844 030c 0B44     		add	r3, r3, r1
 845 030e 03F58973 		add	r3, r3, #274
 846 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847 0314 012B     		cmp	r3, #1
 848 0316 12D1     		bne	.L49
 371:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 849              		.loc 1 371 0
 850 0318 07F58843 		add	r3, r7, #17408
 851 031c 03F15E03 		add	r3, r3, #94
 852 0320 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 853 0322 7449     		ldr	r1, .L82+8
 854 0324 1346     		mov	r3, r2
 855 0326 DB00     		lsls	r3, r3, #3
 856 0328 9B1A     		subs	r3, r3, r2
 857 032a 1B01     		lsls	r3, r3, #4
 858 032c 0B44     		add	r3, r3, r1
 859 032e 03F58773 		add	r3, r3, #270
 860 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 861 0334 002B     		cmp	r3, #0
 862 0336 02D1     		bne	.L49
 372:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 863              		.loc 1 372 0
 864 0338 704B     		ldr	r3, .L82+16
 865 033a 0022     		movs	r2, #0
 866 033c 1A70     		strb	r2, [r3]
 867              	.L49:
 373:..\src/interruptions.c ****                     }   
 374:..\src/interruptions.c ****                 }
 375:..\src/interruptions.c ****             }
 376:..\src/interruptions.c ****             
 377:..\src/interruptions.c ****             // Check Interrupt 
 378:..\src/interruptions.c **** 
 379:..\src/interruptions.c ****             if (interrupt_flag){
 868              		.loc 1 379 0
 869 033e 6C4B     		ldr	r3, .L82+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 23


 870 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 871 0342 002B     		cmp	r3, #0
 872 0344 04D0     		beq	.L50
 380:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 873              		.loc 1 380 0
 874 0346 6A4B     		ldr	r3, .L82+4
 875 0348 0022     		movs	r2, #0
 876 034a 1A70     		strb	r2, [r3]
 381:..\src/interruptions.c ****                 interrupt_manager();
 877              		.loc 1 381 0
 878 034c FFF7FEFF 		bl	interrupt_manager
 879              	.L50:
 382:..\src/interruptions.c ****             }
 383:..\src/interruptions.c ****             
 384:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 385:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 880              		.loc 1 385 0
 881 0350 684B     		ldr	r3, .L82+8
 882 0352 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 883 0356 012B     		cmp	r3, #1
 884 0358 40F0C580 		bne	.L78
 386:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 885              		.loc 1 386 0
 886 035c 07F58843 		add	r3, r7, #17408
 887 0360 03F15D03 		add	r3, r3, #93
 888 0364 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 889 0366 6349     		ldr	r1, .L82+8
 890 0368 1346     		mov	r3, r2
 891 036a DB00     		lsls	r3, r3, #3
 892 036c 9B1A     		subs	r3, r3, r2
 893 036e 1B01     		lsls	r3, r3, #4
 894 0370 0B44     		add	r3, r3, r1
 895 0372 03F58873 		add	r3, r3, #272
 896 0376 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0378 1A46     		mov	r2, r3
 898 037a 5F4B     		ldr	r3, .L82+12
 899 037c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 900 037e 002B     		cmp	r3, #0
 901 0380 2AD0     		beq	.L52
 387:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 902              		.loc 1 387 0
 903 0382 07F58843 		add	r3, r7, #17408
 904 0386 03F15D03 		add	r3, r3, #93
 905 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 038c 1846     		mov	r0, r3
 907 038e FFF7FEFF 		bl	motor_control_generic
 388:..\src/interruptions.c ****                     
 389:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 390:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 908              		.loc 1 390 0
 909 0392 07F58843 		add	r3, r7, #17408
 910 0396 03F15D03 		add	r3, r3, #93
 911 039a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 912 039c 5549     		ldr	r1, .L82+8
 913 039e 1346     		mov	r3, r2
 914 03a0 DB00     		lsls	r3, r3, #3
 915 03a2 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 24


 916 03a4 1B01     		lsls	r3, r3, #4
 917 03a6 0B44     		add	r3, r3, r1
 918 03a8 03F58973 		add	r3, r3, #274
 919 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 920 03ae 012B     		cmp	r3, #1
 921 03b0 12D1     		bne	.L52
 391:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 922              		.loc 1 391 0
 923 03b2 07F58843 		add	r3, r7, #17408
 924 03b6 03F15D03 		add	r3, r3, #93
 925 03ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 926 03bc 4D49     		ldr	r1, .L82+8
 927 03be 1346     		mov	r3, r2
 928 03c0 DB00     		lsls	r3, r3, #3
 929 03c2 9B1A     		subs	r3, r3, r2
 930 03c4 1B01     		lsls	r3, r3, #4
 931 03c6 0B44     		add	r3, r3, r1
 932 03c8 03F58773 		add	r3, r3, #270
 933 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934 03ce 002B     		cmp	r3, #0
 935 03d0 02D1     		bne	.L52
 392:..\src/interruptions.c ****                             change_ext_ref_flag = FALSE;
 936              		.loc 1 392 0
 937 03d2 4A4B     		ldr	r3, .L82+16
 938 03d4 0022     		movs	r2, #0
 939 03d6 1A70     		strb	r2, [r3]
 940              	.L52:
 393:..\src/interruptions.c ****                         }   
 394:..\src/interruptions.c ****                     }
 395:..\src/interruptions.c ****                 }
 396:..\src/interruptions.c ****                 // Check Interrupt 
 397:..\src/interruptions.c **** 
 398:..\src/interruptions.c ****                 if (interrupt_flag){
 941              		.loc 1 398 0
 942 03d8 454B     		ldr	r3, .L82+4
 943 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 03dc 002B     		cmp	r3, #0
 945 03de 00F08280 		beq	.L78
 399:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 946              		.loc 1 399 0
 947 03e2 434B     		ldr	r3, .L82+4
 948 03e4 0022     		movs	r2, #0
 949 03e6 1A70     		strb	r2, [r3]
 400:..\src/interruptions.c ****                     interrupt_manager();
 950              		.loc 1 400 0
 951 03e8 FFF7FEFF 		bl	interrupt_manager
 401:..\src/interruptions.c ****                 }
 402:..\src/interruptions.c ****             }  
 403:..\src/interruptions.c ****             break;
 952              		.loc 1 403 0
 953 03ec 7BE0     		b	.L78
 954              	.L39:
 404:..\src/interruptions.c ****             
 405:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 406:..\src/interruptions.c ****             
 407:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 408:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 25


 955              		.loc 1 408 0
 956 03ee 444B     		ldr	r3, .L82+20
 957 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 958 03f2 002B     		cmp	r3, #0
 959 03f4 38D0     		beq	.L53
 960              		.loc 1 408 0 is_stmt 0 discriminator 1
 961 03f6 3F4B     		ldr	r3, .L82+8
 962 03f8 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 963 03fc 002B     		cmp	r3, #0
 964 03fe 33D0     		beq	.L53
 409:..\src/interruptions.c ****                 
 410:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 965              		.loc 1 410 0 is_stmt 1
 966 0400 3C4B     		ldr	r3, .L82+8
 967 0402 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 968 0406 022B     		cmp	r3, #2
 969 0408 08D1     		bne	.L54
 411:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 970              		.loc 1 411 0
 971 040a 07F58843 		add	r3, r7, #17408
 972 040e 03F15D03 		add	r3, r3, #93
 973 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 0414 1846     		mov	r0, r3
 975 0416 FFF7FEFF 		bl	air_chambers_control
 976 041a 07E0     		b	.L55
 977              	.L54:
 412:..\src/interruptions.c ****                 }
 413:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 414:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 978              		.loc 1 414 0
 979 041c 07F58843 		add	r3, r7, #17408
 980 0420 03F15D03 		add	r3, r3, #93
 981 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 0426 1846     		mov	r0, r3
 983 0428 FFF7FEFF 		bl	otbk_act_wrist_control
 984              	.L55:
 415:..\src/interruptions.c ****                 }
 416:..\src/interruptions.c **** 
 417:..\src/interruptions.c ****                 // Check Interrupt 
 418:..\src/interruptions.c **** 
 419:..\src/interruptions.c ****                 if (interrupt_flag){
 985              		.loc 1 419 0
 986 042c 304B     		ldr	r3, .L82+4
 987 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0430 002B     		cmp	r3, #0
 989 0432 04D0     		beq	.L56
 420:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 990              		.loc 1 420 0
 991 0434 2E4B     		ldr	r3, .L82+4
 992 0436 0022     		movs	r2, #0
 993 0438 1A70     		strb	r2, [r3]
 421:..\src/interruptions.c ****                     interrupt_manager();
 994              		.loc 1 421 0
 995 043a FFF7FEFF 		bl	interrupt_manager
 996              	.L56:
 422:..\src/interruptions.c ****                 }
 423:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 26


 424:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 997              		.loc 1 424 0
 998 043e 2D4B     		ldr	r3, .L82+8
 999 0440 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 1000 0444 07F58843 		add	r3, r7, #17408
 1001 0448 03F15D03 		add	r3, r3, #93
 1002 044c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 044e 1146     		mov	r1, r2
 1004 0450 1846     		mov	r0, r3
 1005 0452 FFF7FEFF 		bl	drive_slave
 425:..\src/interruptions.c ****             
 426:..\src/interruptions.c ****                 // Check Interrupt 
 427:..\src/interruptions.c **** 
 428:..\src/interruptions.c ****                 if (interrupt_flag){
 1006              		.loc 1 428 0
 1007 0456 264B     		ldr	r3, .L82+4
 1008 0458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 045a 002B     		cmp	r3, #0
 1010 045c 04D0     		beq	.L53
 429:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1011              		.loc 1 429 0
 1012 045e 244B     		ldr	r3, .L82+4
 1013 0460 0022     		movs	r2, #0
 1014 0462 1A70     		strb	r2, [r3]
 430:..\src/interruptions.c ****                     interrupt_manager();
 1015              		.loc 1 430 0
 1016 0464 FFF7FEFF 		bl	interrupt_manager
 1017              	.L53:
 431:..\src/interruptions.c ****                 }
 432:..\src/interruptions.c ****             }
 433:..\src/interruptions.c ****             if (!master_mode){
 1018              		.loc 1 433 0
 1019 0468 254B     		ldr	r3, .L82+20
 1020 046a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 046c 002B     		cmp	r3, #0
 1022 046e 11D1     		bne	.L57
 434:..\src/interruptions.c ****                 
 435:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 1023              		.loc 1 435 0
 1024 0470 204B     		ldr	r3, .L82+8
 1025 0472 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 1026 0476 002B     		cmp	r3, #0
 1027 0478 01D0     		beq	.L58
 436:..\src/interruptions.c ****                     // Stop feedback motors
 437:..\src/interruptions.c ****                     stop_master_device();
 1028              		.loc 1 437 0
 1029 047a FFF7FEFF 		bl	stop_master_device
 1030              	.L58:
 438:..\src/interruptions.c ****                 }
 439:..\src/interruptions.c ****                 // Disable slave or motors
 440:..\src/interruptions.c ****                 deactivate_slaves();
 1031              		.loc 1 440 0
 1032 047e FFF7FEFF 		bl	deactivate_slaves
 441:..\src/interruptions.c ****                         
 442:..\src/interruptions.c ****                 // Check Interrupt 
 443:..\src/interruptions.c ****                 if (interrupt_flag){
 1033              		.loc 1 443 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 27


 1034 0482 1B4B     		ldr	r3, .L82+4
 1035 0484 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0486 002B     		cmp	r3, #0
 1037 0488 04D0     		beq	.L57
 444:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1038              		.loc 1 444 0
 1039 048a 194B     		ldr	r3, .L82+4
 1040 048c 0022     		movs	r2, #0
 1041 048e 1A70     		strb	r2, [r3]
 445:..\src/interruptions.c ****                     interrupt_manager();
 1042              		.loc 1 445 0
 1043 0490 FFF7FEFF 		bl	interrupt_manager
 1044              	.L57:
 446:..\src/interruptions.c ****                 } 
 447:..\src/interruptions.c ****             }
 448:..\src/interruptions.c ****     
 449:..\src/interruptions.c ****             // Control Master device main motor 
 450:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 451:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1045              		.loc 1 451 0
 1046 0494 07F58843 		add	r3, r7, #17408
 1047 0498 03F15E03 		add	r3, r3, #94
 1048 049c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049 049e 1846     		mov	r0, r3
 1050 04a0 FFF7FEFF 		bl	motor_control_generic
 452:..\src/interruptions.c ****                         
 453:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 454:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1051              		.loc 1 454 0
 1052 04a4 134B     		ldr	r3, .L82+8
 1053 04a6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1054 04aa 032B     		cmp	r3, #3
 1055 04ac 0FD1     		bne	.L59
 455:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1056              		.loc 1 455 0
 1057 04ae 154B     		ldr	r3, .L82+24
 1058 04b0 9B68     		ldr	r3, [r3, #8]
 1059 04b2 432B     		cmp	r3, #67
 1060 04b4 02DD     		ble	.L60
 456:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1061              		.loc 1 456 0
 1062 04b6 134B     		ldr	r3, .L82+24
 1063 04b8 4322     		movs	r2, #67
 1064 04ba 9A60     		str	r2, [r3, #8]
 1065              	.L60:
 457:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1066              		.loc 1 457 0
 1067 04bc 114B     		ldr	r3, .L82+24
 1068 04be 9B68     		ldr	r3, [r3, #8]
 1069 04c0 13F1430F 		cmn	r3, #67
 1070 04c4 03DA     		bge	.L59
 458:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1071              		.loc 1 458 0
 1072 04c6 0F4B     		ldr	r3, .L82+24
 1073 04c8 6FF04202 		mvn	r2, #66
 1074 04cc 9A60     		str	r2, [r3, #8]
 1075              	.L59:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 28


 459:..\src/interruptions.c ****             }
 460:..\src/interruptions.c ****             
 461:..\src/interruptions.c ****             // Check Interrupt 
 462:..\src/interruptions.c **** 
 463:..\src/interruptions.c ****             if (interrupt_flag){
 1076              		.loc 1 463 0
 1077 04ce 084B     		ldr	r3, .L82+4
 1078 04d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 04d2 002B     		cmp	r3, #0
 1080 04d4 18D0     		beq	.L79
 464:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1081              		.loc 1 464 0
 1082 04d6 064B     		ldr	r3, .L82+4
 1083 04d8 0022     		movs	r2, #0
 1084 04da 1A70     		strb	r2, [r3]
 465:..\src/interruptions.c ****                 interrupt_manager();
 1085              		.loc 1 465 0
 1086 04dc FFF7FEFF 		bl	interrupt_manager
 466:..\src/interruptions.c ****             }
 467:..\src/interruptions.c ****             
 468:..\src/interruptions.c ****             break;
 1087              		.loc 1 468 0
 1088 04e0 12E0     		b	.L79
 1089              	.L77:
 329:..\src/interruptions.c ****             
 1090              		.loc 1 329 0
 1091 04e2 00BF     		nop
 1092 04e4 11E0     		b	.L35
 1093              	.L78:
 403:..\src/interruptions.c ****             
 1094              		.loc 1 403 0
 1095 04e6 00BF     		nop
 1096 04e8 0FE0     		b	.L35
 1097              	.L83:
 1098 04ea 00BF     		.align	2
 1099              	.L82:
 1100 04ec 00000000 		.word	N_Encoder_Line_Connected
 1101 04f0 00000000 		.word	interrupt_flag
 1102 04f4 00000000 		.word	c_mem
 1103 04f8 00000000 		.word	pos_reconstruct
 1104 04fc 00000000 		.word	change_ext_ref_flag
 1105 0500 00000000 		.word	master_mode
 1106 0504 00000000 		.word	g_refNew
 1107              	.L79:
 1108              		.loc 1 468 0
 1109 0508 00BF     		nop
 1110              	.L35:
 469:..\src/interruptions.c ****     }
 470:..\src/interruptions.c **** 
 471:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 472:..\src/interruptions.c **** 
 473:..\src/interruptions.c ****     analog_read_end();
 1111              		.loc 1 473 0
 1112 050a FFF7FEFF 		bl	analog_read_end
 474:..\src/interruptions.c **** 
 475:..\src/interruptions.c ****     if (interrupt_flag){
 1113              		.loc 1 475 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 29


 1114 050e AB4B     		ldr	r3, .L84
 1115 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1116 0512 002B     		cmp	r3, #0
 1117 0514 04D0     		beq	.L62
 476:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1118              		.loc 1 476 0
 1119 0516 A94B     		ldr	r3, .L84
 1120 0518 0022     		movs	r2, #0
 1121 051a 1A70     		strb	r2, [r3]
 477:..\src/interruptions.c ****         interrupt_manager();
 1122              		.loc 1 477 0
 1123 051c FFF7FEFF 		bl	interrupt_manager
 1124              	.L62:
 478:..\src/interruptions.c ****     }
 479:..\src/interruptions.c **** 
 480:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 481:..\src/interruptions.c **** 
 482:..\src/interruptions.c ****     overcurrent_control();
 1125              		.loc 1 482 0
 1126 0520 FFF7FEFF 		bl	overcurrent_control
 483:..\src/interruptions.c ****     
 484:..\src/interruptions.c ****     // Check Interrupt 
 485:..\src/interruptions.c ****     
 486:..\src/interruptions.c ****     if (interrupt_flag){
 1127              		.loc 1 486 0
 1128 0524 A54B     		ldr	r3, .L84
 1129 0526 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0528 002B     		cmp	r3, #0
 1131 052a 04D0     		beq	.L63
 487:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1132              		.loc 1 487 0
 1133 052c A34B     		ldr	r3, .L84
 1134 052e 0022     		movs	r2, #0
 1135 0530 1A70     		strb	r2, [r3]
 488:..\src/interruptions.c ****         interrupt_manager();
 1136              		.loc 1 488 0
 1137 0532 FFF7FEFF 		bl	interrupt_manager
 1138              	.L63:
 489:..\src/interruptions.c ****     }
 490:..\src/interruptions.c **** 
 491:..\src/interruptions.c ****     //---------------------------------- Calibration 
 492:..\src/interruptions.c **** 
 493:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 494:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1139              		.loc 1 494 0
 1140 0536 A24B     		ldr	r3, .L84+4
 1141 0538 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 053a 012B     		cmp	r3, #1
 1143 053c 0ED1     		bne	.L64
 495:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1144              		.loc 1 495 0
 1145 053e A14B     		ldr	r3, .L84+8
 1146 0540 1B88     		ldrh	r3, [r3]
 1147 0542 0A2B     		cmp	r3, #10
 1148 0544 04D1     		bne	.L65
 496:..\src/interruptions.c ****             calibration();
 1149              		.loc 1 496 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 30


 1150 0546 FFF7FEFF 		bl	calibration
 497:..\src/interruptions.c ****             counter_calibration = 0;
 1151              		.loc 1 497 0
 1152 054a 9E4B     		ldr	r3, .L84+8
 1153 054c 0022     		movs	r2, #0
 1154 054e 1A80     		strh	r2, [r3]	@ movhi
 1155              	.L65:
 498:..\src/interruptions.c ****         }
 499:..\src/interruptions.c ****         counter_calibration++;
 1156              		.loc 1 499 0
 1157 0550 9C4B     		ldr	r3, .L84+8
 1158 0552 1B88     		ldrh	r3, [r3]
 1159 0554 0133     		adds	r3, r3, #1
 1160 0556 9AB2     		uxth	r2, r3
 1161 0558 9A4B     		ldr	r3, .L84+8
 1162 055a 1A80     		strh	r2, [r3]	@ movhi
 1163              	.L64:
 500:..\src/interruptions.c ****     }
 501:..\src/interruptions.c **** 
 502:..\src/interruptions.c ****     // Check Interrupt 
 503:..\src/interruptions.c ****     
 504:..\src/interruptions.c ****     if (interrupt_flag){
 1164              		.loc 1 504 0
 1165 055c 974B     		ldr	r3, .L84
 1166 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 0560 002B     		cmp	r3, #0
 1168 0562 04D0     		beq	.L66
 505:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1169              		.loc 1 505 0
 1170 0564 954B     		ldr	r3, .L84
 1171 0566 0022     		movs	r2, #0
 1172 0568 1A70     		strb	r2, [r3]
 506:..\src/interruptions.c ****         interrupt_manager();
 1173              		.loc 1 506 0
 1174 056a FFF7FEFF 		bl	interrupt_manager
 1175              	.L66:
 507:..\src/interruptions.c ****     }
 508:..\src/interruptions.c ****     
 509:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1176              		.loc 1 509 0
 1177 056e 964B     		ldr	r3, .L84+12
 1178 0570 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1179 0574 002B     		cmp	r3, #0
 1180 0576 1CD1     		bne	.L67
 510:..\src/interruptions.c ****     
 511:..\src/interruptions.c ****         //---------------------------------- Rest position check
 512:..\src/interruptions.c **** 
 513:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 514:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1181              		.loc 1 514 0
 1182 0578 934B     		ldr	r3, .L84+12
 1183 057a 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1184 057e 012B     		cmp	r3, #1
 1185 0580 17D1     		bne	.L67
 515:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1186              		.loc 1 515 0
 1187 0582 904B     		ldr	r3, .L84+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 31


 1188 0584 1B88     		ldrh	r3, [r3]
 1189 0586 0A2B     		cmp	r3, #10
 1190 0588 04D1     		bne	.L68
 516:..\src/interruptions.c ****                     check_rest_position();
 1191              		.loc 1 516 0
 1192 058a FFF7FEFF 		bl	check_rest_position
 517:..\src/interruptions.c ****                     counter_calibration = 0;
 1193              		.loc 1 517 0
 1194 058e 8D4B     		ldr	r3, .L84+8
 1195 0590 0022     		movs	r2, #0
 1196 0592 1A80     		strh	r2, [r3]	@ movhi
 1197              	.L68:
 518:..\src/interruptions.c ****             }
 519:..\src/interruptions.c ****             counter_calibration++;
 1198              		.loc 1 519 0
 1199 0594 8B4B     		ldr	r3, .L84+8
 1200 0596 1B88     		ldrh	r3, [r3]
 1201 0598 0133     		adds	r3, r3, #1
 1202 059a 9AB2     		uxth	r2, r3
 1203 059c 894B     		ldr	r3, .L84+8
 1204 059e 1A80     		strh	r2, [r3]	@ movhi
 520:..\src/interruptions.c **** 
 521:..\src/interruptions.c ****             // Check Interrupt     
 522:..\src/interruptions.c ****             if (interrupt_flag){
 1205              		.loc 1 522 0
 1206 05a0 864B     		ldr	r3, .L84
 1207 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 05a4 002B     		cmp	r3, #0
 1209 05a6 04D0     		beq	.L67
 523:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1210              		.loc 1 523 0
 1211 05a8 844B     		ldr	r3, .L84
 1212 05aa 0022     		movs	r2, #0
 1213 05ac 1A70     		strb	r2, [r3]
 524:..\src/interruptions.c ****                 interrupt_manager();
 1214              		.loc 1 524 0
 1215 05ae FFF7FEFF 		bl	interrupt_manager
 1216              	.L67:
 525:..\src/interruptions.c ****             }
 526:..\src/interruptions.c ****         }
 527:..\src/interruptions.c ****         
 528:..\src/interruptions.c ****     }
 529:..\src/interruptions.c ****     
 530:..\src/interruptions.c ****      
 531:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 532:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1217              		.loc 1 532 0
 1218 05b2 854B     		ldr	r3, .L84+12
 1219 05b4 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1220 05b8 002B     		cmp	r3, #0
 1221 05ba 0AD0     		beq	.L69
 533:..\src/interruptions.c ****         
 534:..\src/interruptions.c ****         update_EMG_history();
 1222              		.loc 1 534 0
 1223 05bc FFF7FEFF 		bl	update_EMG_history
 535:..\src/interruptions.c **** 
 536:..\src/interruptions.c ****         // Check Interrupt 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 32


 537:..\src/interruptions.c **** 
 538:..\src/interruptions.c ****         if (interrupt_flag){
 1224              		.loc 1 538 0
 1225 05c0 7E4B     		ldr	r3, .L84
 1226 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1227 05c4 002B     		cmp	r3, #0
 1228 05c6 04D0     		beq	.L69
 539:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1229              		.loc 1 539 0
 1230 05c8 7C4B     		ldr	r3, .L84
 1231 05ca 0022     		movs	r2, #0
 1232 05cc 1A70     		strb	r2, [r3]
 540:..\src/interruptions.c ****             interrupt_manager();
 1233              		.loc 1 540 0
 1234 05ce FFF7FEFF 		bl	interrupt_manager
 1235              	.L69:
 541:..\src/interruptions.c ****         }
 542:..\src/interruptions.c ****     }
 543:..\src/interruptions.c **** 
 544:..\src/interruptions.c ****     
 545:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 546:..\src/interruptions.c **** 
 547:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1236              		.loc 1 547 0
 1237 05d2 7D4B     		ldr	r3, .L84+12
 1238 05d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1239 05d8 1A46     		mov	r2, r3
 1240 05da 7C4B     		ldr	r3, .L84+16
 1241 05dc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1242 05de 002B     		cmp	r3, #0
 1243 05e0 01D0     		beq	.L70
 548:..\src/interruptions.c ****         cycles_counter_update();
 1244              		.loc 1 548 0
 1245 05e2 FFF7FEFF 		bl	cycles_counter_update
 1246              	.L70:
 549:..\src/interruptions.c ****     }
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****     // Check Cycles Interrupt 
 552:..\src/interruptions.c ****     
 553:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1247              		.loc 1 553 0
 1248 05e6 7A4B     		ldr	r3, .L84+20
 1249 05e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 05ea 002B     		cmp	r3, #0
 1251 05ec 5BD0     		beq	.L71
 554:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1252              		.loc 1 554 0
 1253 05ee 784B     		ldr	r3, .L84+20
 1254 05f0 0022     		movs	r2, #0
 1255 05f2 1A70     		strb	r2, [r3]
 555:..\src/interruptions.c **** 
 556:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 557:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 558:..\src/interruptions.c ****         if(can_write) {
 1256              		.loc 1 558 0
 1257 05f4 774B     		ldr	r3, .L84+24
 1258 05f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 33


 1259 05f8 002B     		cmp	r3, #0
 1260 05fa 54D0     		beq	.L71
 559:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1261              		.loc 1 559 0
 1262 05fc 764B     		ldr	r3, .L84+28
 1263 05fe 0022     		movs	r2, #0
 1264 0600 1A70     		strb	r2, [r3]
 560:..\src/interruptions.c ****             
 561:..\src/interruptions.c ****             //Update time variable
 562:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1265              		.loc 1 562 0
 1266 0602 764B     		ldr	r3, .L84+32
 1267 0604 9B6D     		ldr	r3, [r3, #88]
 1268 0606 7833     		adds	r3, r3, #120
 1269 0608 744A     		ldr	r2, .L84+32
 1270 060a 9365     		str	r3, [r2, #88]
 563:..\src/interruptions.c ****             
 564:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1271              		.loc 1 564 0
 1272 060c 6E4B     		ldr	r3, .L84+12
 1273 060e 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1274 0612 012B     		cmp	r3, #1
 1275 0614 47D1     		bne	.L71
 565:..\src/interruptions.c ****                 
 566:..\src/interruptions.c ****                 store_RTC_current_time();
 1276              		.loc 1 566 0
 1277 0616 FFF7FEFF 		bl	store_RTC_current_time
 567:..\src/interruptions.c ****                 
 568:..\src/interruptions.c ****                 //Write in SD card
 569:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1278              		.loc 1 569 0
 1279 061a 07F56A53 		add	r3, r7, #14976
 1280 061e 03F11803 		add	r3, r3, #24
 1281 0622 1846     		mov	r0, r3
 1282 0624 FFF7FEFF 		bl	prepare_SD_info
 570:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1283              		.loc 1 570 0
 1284 0628 6D4B     		ldr	r3, .L84+36
 1285 062a 1C68     		ldr	r4, [r3]
 1286 062c 07F56A53 		add	r3, r7, #14976
 1287 0630 03F11803 		add	r3, r3, #24
 1288 0634 1846     		mov	r0, r3
 1289 0636 FFF7FEFF 		bl	strlen
 1290 063a 0246     		mov	r2, r0
 1291 063c 07F56A53 		add	r3, r7, #14976
 1292 0640 03F11803 		add	r3, r3, #24
 1293 0644 1946     		mov	r1, r3
 1294 0646 2046     		mov	r0, r4
 1295 0648 FFF7FEFF 		bl	FS_Write
 571:..\src/interruptions.c ****                 
 572:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1296              		.loc 1 572 0
 1297 064c 5E4B     		ldr	r3, .L84+12
 1298 064e 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1299 0652 002B     		cmp	r3, #0
 1300 0654 27D0     		beq	.L71
 1301              	.LBB3:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 34


 573:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1302              		.loc 1 573 0
 1303 0656 07F16003 		add	r3, r7, #96
 1304 065a 603B     		subs	r3, r3, #96
 1305 065c 0022     		movs	r2, #0
 1306 065e 1A60     		str	r2, [r3]
 1307 0660 0433     		adds	r3, r3, #4
 1308 0662 43F69422 		movw	r2, #14996
 1309 0666 0021     		movs	r1, #0
 1310 0668 1846     		mov	r0, r3
 1311 066a FFF7FEFF 		bl	memset
 574:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1312              		.loc 1 574 0
 1313 066e 5D4B     		ldr	r3, .L84+40
 1314 0670 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1315 0672 07F16003 		add	r3, r7, #96
 1316 0676 603B     		subs	r3, r3, #96
 1317 0678 1A70     		strb	r2, [r3]
 575:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1318              		.loc 1 575 0
 1319 067a 07F16003 		add	r3, r7, #96
 1320 067e 603B     		subs	r3, r3, #96
 1321 0680 1846     		mov	r0, r3
 1322 0682 FFF7FEFF 		bl	prepare_SD_EMG_history
 576:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1323              		.loc 1 576 0
 1324 0686 584B     		ldr	r3, .L84+44
 1325 0688 1C68     		ldr	r4, [r3]
 1326 068a 07F16003 		add	r3, r7, #96
 1327 068e 603B     		subs	r3, r3, #96
 1328 0690 1846     		mov	r0, r3
 1329 0692 FFF7FEFF 		bl	strlen
 1330 0696 0246     		mov	r2, r0
 1331 0698 07F16003 		add	r3, r7, #96
 1332 069c 603B     		subs	r3, r3, #96
 1333 069e 1946     		mov	r1, r3
 1334 06a0 2046     		mov	r0, r4
 1335 06a2 FFF7FEFF 		bl	FS_Write
 1336              	.L71:
 1337              	.LBE3:
 577:..\src/interruptions.c ****                 }
 578:..\src/interruptions.c ****             }
 579:..\src/interruptions.c ****         }
 580:..\src/interruptions.c ****     }
 581:..\src/interruptions.c ****     
 582:..\src/interruptions.c ****     // Check Interrupt 
 583:..\src/interruptions.c ****     
 584:..\src/interruptions.c ****     if (interrupt_flag){
 1338              		.loc 1 584 0
 1339 06a6 454B     		ldr	r3, .L84
 1340 06a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1341 06aa 002B     		cmp	r3, #0
 1342 06ac 04D0     		beq	.L72
 585:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1343              		.loc 1 585 0
 1344 06ae 434B     		ldr	r3, .L84
 1345 06b0 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 35


 1346 06b2 1A70     		strb	r2, [r3]
 586:..\src/interruptions.c ****         interrupt_manager();
 1347              		.loc 1 586 0
 1348 06b4 FFF7FEFF 		bl	interrupt_manager
 1349              	.L72:
 587:..\src/interruptions.c ****     }
 588:..\src/interruptions.c ****     
 589:..\src/interruptions.c ****     
 590:..\src/interruptions.c ****     //---------------------------------- Check battery
 591:..\src/interruptions.c **** 
 592:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 593:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1350              		.loc 1 593 0
 1351 06b8 4C4B     		ldr	r3, .L84+48
 1352 06ba 1B88     		ldrh	r3, [r3]
 1353 06bc 0A2B     		cmp	r3, #10
 1354 06be 04D1     		bne	.L73
 594:..\src/interruptions.c ****         battery_management();   
 1355              		.loc 1 594 0
 1356 06c0 FFF7FEFF 		bl	battery_management
 595:..\src/interruptions.c ****         counter_tension_func = 0;
 1357              		.loc 1 595 0
 1358 06c4 494B     		ldr	r3, .L84+48
 1359 06c6 0022     		movs	r2, #0
 1360 06c8 1A80     		strh	r2, [r3]	@ movhi
 1361              	.L73:
 596:..\src/interruptions.c ****     }
 597:..\src/interruptions.c ****     counter_tension_func++;
 1362              		.loc 1 597 0
 1363 06ca 484B     		ldr	r3, .L84+48
 1364 06cc 1B88     		ldrh	r3, [r3]
 1365 06ce 0133     		adds	r3, r3, #1
 1366 06d0 9AB2     		uxth	r2, r3
 1367 06d2 464B     		ldr	r3, .L84+48
 1368 06d4 1A80     		strh	r2, [r3]	@ movhi
 598:..\src/interruptions.c **** 
 599:..\src/interruptions.c ****     // Check Interrupt 
 600:..\src/interruptions.c ****     
 601:..\src/interruptions.c ****     if (interrupt_flag){
 1369              		.loc 1 601 0
 1370 06d6 394B     		ldr	r3, .L84
 1371 06d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 06da 002B     		cmp	r3, #0
 1373 06dc 04D0     		beq	.L74
 602:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1374              		.loc 1 602 0
 1375 06de 374B     		ldr	r3, .L84
 1376 06e0 0022     		movs	r2, #0
 1377 06e2 1A70     		strb	r2, [r3]
 603:..\src/interruptions.c ****         interrupt_manager();
 1378              		.loc 1 603 0
 1379 06e4 FFF7FEFF 		bl	interrupt_manager
 1380              	.L74:
 604:..\src/interruptions.c ****     }
 605:..\src/interruptions.c ****    
 606:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 607:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 36


 1381              		.loc 1 607 0
 1382 06e8 374B     		ldr	r3, .L84+12
 1383 06ea 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1384 06ee 002B     		cmp	r3, #0
 1385 06f0 0AD0     		beq	.L75
 608:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1386              		.loc 1 608 0
 1387 06f2 FFF7FEFF 		bl	ReadAllIMUs
 609:..\src/interruptions.c ****         
 610:..\src/interruptions.c ****         if (interrupt_flag){
 1388              		.loc 1 610 0
 1389 06f6 314B     		ldr	r3, .L84
 1390 06f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1391 06fa 002B     		cmp	r3, #0
 1392 06fc 04D0     		beq	.L75
 611:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1393              		.loc 1 611 0
 1394 06fe 2F4B     		ldr	r3, .L84
 1395 0700 0022     		movs	r2, #0
 1396 0702 1A70     		strb	r2, [r3]
 612:..\src/interruptions.c ****             interrupt_manager();
 1397              		.loc 1 612 0
 1398 0704 FFF7FEFF 		bl	interrupt_manager
 1399              	.L75:
 613:..\src/interruptions.c ****         }
 614:..\src/interruptions.c ****     }
 615:..\src/interruptions.c ****    
 616:..\src/interruptions.c ****     //---------------------------------- Update States
 617:..\src/interruptions.c ****     
 618:..\src/interruptions.c ****     // Load k-1 state
 619:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1400              		.loc 1 619 0
 1401 0708 394A     		ldr	r2, .L84+52
 1402 070a 3A4B     		ldr	r3, .L84+56
 1403 070c 1446     		mov	r4, r2
 1404 070e 1D46     		mov	r5, r3
 1405 0710 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1406 0712 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1407 0714 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1408 0716 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1409 0718 95E80300 		ldmia	r5, {r0, r1}
 1410 071c 84E80300 		stmia	r4, {r0, r1}
 620:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1411              		.loc 1 620 0
 1412 0720 354A     		ldr	r2, .L84+60
 1413 0722 364B     		ldr	r3, .L84+64
 1414 0724 1046     		mov	r0, r2
 1415 0726 1946     		mov	r1, r3
 1416 0728 6823     		movs	r3, #104
 1417 072a 1A46     		mov	r2, r3
 1418 072c FFF7FEFF 		bl	memcpy
 621:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1419              		.loc 1 621 0
 1420 0730 334A     		ldr	r2, .L84+68
 1421 0732 344B     		ldr	r3, .L84+72
 1422 0734 1446     		mov	r4, r2
 1423 0736 1D46     		mov	r5, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 37


 1424 0738 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1425 073a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1426 073c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1427 0740 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 622:..\src/interruptions.c **** 
 623:..\src/interruptions.c ****     // Load k+1 state        
 624:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1428              		.loc 1 624 0
 1429 0744 2F4A     		ldr	r2, .L84+72
 1430 0746 304B     		ldr	r3, .L84+76
 1431 0748 1446     		mov	r4, r2
 1432 074a 1D46     		mov	r5, r3
 1433 074c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1434 074e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1435 0750 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1436 0754 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 625:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1437              		.loc 1 625 0
 1438 0758 2C4A     		ldr	r2, .L84+80
 1439 075a 2D4B     		ldr	r3, .L84+84
 1440 075c 1046     		mov	r0, r2
 1441 075e 1946     		mov	r1, r3
 1442 0760 C823     		movs	r3, #200
 1443 0762 1A46     		mov	r2, r3
 1444 0764 FFF7FEFF 		bl	memcpy
 626:..\src/interruptions.c ****                 
 627:..\src/interruptions.c ****     if (interrupt_flag){
 1445              		.loc 1 627 0
 1446 0768 144B     		ldr	r3, .L84
 1447 076a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 076c 002B     		cmp	r3, #0
 1449 076e 04D0     		beq	.L76
 628:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1450              		.loc 1 628 0
 1451 0770 124B     		ldr	r3, .L84
 1452 0772 0022     		movs	r2, #0
 1453 0774 1A70     		strb	r2, [r3]
 629:..\src/interruptions.c ****         interrupt_manager();
 1454              		.loc 1 629 0
 1455 0776 FFF7FEFF 		bl	interrupt_manager
 1456              	.L76:
 630:..\src/interruptions.c ****     }
 631:..\src/interruptions.c **** 
 632:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1457              		.loc 1 632 0
 1458 077a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1459 077e 0346     		mov	r3, r0
 1460 0780 1A46     		mov	r2, r3
 1461 0782 244B     		ldr	r3, .L84+88
 1462 0784 1A80     		strh	r2, [r3]	@ movhi
 633:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1463              		.loc 1 633 0
 1464 0786 244B     		ldr	r3, .L84+92
 1465 0788 1B88     		ldrh	r3, [r3]
 1466 078a 1A46     		mov	r2, r3
 1467 078c 214B     		ldr	r3, .L84+88
 1468 078e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 38


 1469 0790 D31A     		subs	r3, r2, r3
 1470 0792 1846     		mov	r0, r3
 1471 0794 FFF7FEFF 		bl	__aeabi_i2f
 1472 0798 0346     		mov	r3, r0
 1473 079a 2049     		ldr	r1, .L84+96
 1474 079c 1846     		mov	r0, r3
 1475 079e FFF7FEFF 		bl	__aeabi_fdiv
 1476 07a2 0346     		mov	r3, r0
 1477 07a4 1A46     		mov	r2, r3
 1478 07a6 1E4B     		ldr	r3, .L84+100
 1479 07a8 1A60     		str	r2, [r3]	@ float
 634:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1480              		.loc 1 634 0
 1481 07aa 0120     		movs	r0, #1
 1482 07ac FFF7FEFF 		bl	MY_TIMER_REG_Write
 635:..\src/interruptions.c **** 
 636:..\src/interruptions.c **** }
 1483              		.loc 1 636 0
 1484 07b0 00BF     		nop
 1485 07b2 07F58847 		add	r7, r7, #17408
 1486 07b6 6037     		adds	r7, r7, #96
 1487              		.cfi_def_cfa_offset 16
 1488 07b8 BD46     		mov	sp, r7
 1489              		.cfi_def_cfa_register 13
 1490              		@ sp needed
 1491 07ba B0BD     		pop	{r4, r5, r7, pc}
 1492              	.L85:
 1493              		.align	2
 1494              	.L84:
 1495 07bc 00000000 		.word	interrupt_flag
 1496 07c0 00000000 		.word	calib
 1497 07c4 00000000 		.word	counter_calibration.10466
 1498 07c8 00000000 		.word	c_mem
 1499 07cc 00000000 		.word	pos_reconstruct
 1500 07d0 00000000 		.word	cycles_interrupt_flag
 1501 07d4 00000000 		.word	can_write
 1502 07d8 00000000 		.word	cycles_status
 1503 07dc 00000000 		.word	g_mem
 1504 07e0 00000000 		.word	pFile
 1505 07e4 20000000 		.word	.LC0
 1506 07e8 00000000 		.word	pEMGHFile
 1507 07ec 02000000 		.word	counter_tension_func.10467
 1508 07f0 00000000 		.word	g_adc_measOld
 1509 07f4 00000000 		.word	g_adc_meas
 1510 07f8 00000000 		.word	g_measOld
 1511 07fc 00000000 		.word	g_meas
 1512 0800 00000000 		.word	g_refOld
 1513 0804 00000000 		.word	g_ref
 1514 0808 00000000 		.word	g_refNew
 1515 080c 00000000 		.word	g_imu
 1516 0810 00000000 		.word	g_imuNew
 1517 0814 00000000 		.word	timer_value
 1518 0818 00000000 		.word	timer_value0
 1519 081c 00247449 		.word	1232348160
 1520 0820 00000000 		.word	cycle_time
 1521              		.cfi_endproc
 1522              	.LFE67:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 39


 1523              		.size	function_scheduler, .-function_scheduler
 1524              		.section	.text.compute_reference,"ax",%progbits
 1525              		.align	2
 1526              		.global	compute_reference
 1527              		.thumb
 1528              		.thumb_func
 1529              		.type	compute_reference, %function
 1530              	compute_reference:
 1531              	.LFB68:
 637:..\src/interruptions.c **** 
 638:..\src/interruptions.c **** //==============================================================================
 639:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 640:..\src/interruptions.c **** //==============================================================================
 641:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1532              		.loc 1 641 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 40
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536 0000 80B5     		push	{r7, lr}
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 8CB0     		sub	sp, sp, #48
 1541              		.cfi_def_cfa_offset 56
 1542 0004 02AF     		add	r7, sp, #8
 1543              		.cfi_def_cfa 7, 48
 1544 0006 0346     		mov	r3, r0
 1545 0008 B960     		str	r1, [r7, #8]
 1546 000a 7A60     		str	r2, [r7, #4]
 1547 000c FB73     		strb	r3, [r7, #15]
 642:..\src/interruptions.c ****     
 643:..\src/interruptions.c ****     int32 CYDATA handle_value;
 644:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 645:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1548              		.loc 1 645 0
 1549 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1550 0010 1346     		mov	r3, r2
 1551 0012 DB00     		lsls	r3, r3, #3
 1552 0014 9B1A     		subs	r3, r3, r2
 1553 0016 1B01     		lsls	r3, r3, #4
 1554 0018 B033     		adds	r3, r3, #176
 1555 001a A74A     		ldr	r2, .L150
 1556 001c 1344     		add	r3, r3, r2
 1557 001e 3B62     		str	r3, [r7, #32]
 646:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1558              		.loc 1 646 0
 1559 0020 3B6A     		ldr	r3, [r7, #32]
 1560 0022 93F86030 		ldrb	r3, [r3, #96]
 1561 0026 FB77     		strb	r3, [r7, #31]
 647:..\src/interruptions.c ****     
 648:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 649:..\src/interruptions.c ****                                                         // 1 EMG 1
 650:..\src/interruptions.c ****                                                         // 2 EMG 2
 651:..\src/interruptions.c ****                                                         // wait for both to get down
 652:..\src/interruptions.c ****     
 653:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1562              		.loc 1 653 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 40


 1563 0028 A44B     		ldr	r3, .L150+4
 1564 002a 1B68     		ldr	r3, [r3]
 1565 002c A24A     		ldr	r2, .L150
 1566 002e B2F8F021 		ldrh	r2, [r2, #496]
 1567 0032 9B1A     		subs	r3, r3, r2
 1568 0034 BB61     		str	r3, [r7, #24]
 654:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1569              		.loc 1 654 0
 1570 0036 A14B     		ldr	r3, .L150+4
 1571 0038 5B68     		ldr	r3, [r3, #4]
 1572 003a 9F4A     		ldr	r2, .L150
 1573 003c B2F8F221 		ldrh	r2, [r2, #498]
 1574 0040 9B1A     		subs	r3, r3, r2
 1575 0042 7B61     		str	r3, [r7, #20]
 655:..\src/interruptions.c ****     
 656:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 657:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1576              		.loc 1 657 0
 1577 0044 3B6A     		ldr	r3, [r7, #32]
 1578 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1579 004a 013B     		subs	r3, r3, #1
 1580 004c 062B     		cmp	r3, #6
 1581 004e 00F25182 		bhi	.L142
 1582 0052 01A2     		adr	r2, .L89
 1583 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1584              		.p2align 2
 1585              	.L89:
 1586 0058 75000000 		.word	.L88+1
 1587 005c 21020000 		.word	.L90+1
 1588 0060 C9020000 		.word	.L91+1
 1589 0064 31030000 		.word	.L92+1
 1590 0068 11040000 		.word	.L93+1
 1591 006c 4D010000 		.word	.L94+1
 1592 0070 5B020000 		.word	.L95+1
 1593              		.p2align 1
 1594              	.L88:
 658:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 659:..\src/interruptions.c **** 
 660:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 661:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 662:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1595              		.loc 1 662 0
 1596 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1597 0076 9049     		ldr	r1, .L150
 1598 0078 1346     		mov	r3, r2
 1599 007a 5B00     		lsls	r3, r3, #1
 1600 007c 1344     		add	r3, r3, r2
 1601 007e 1B01     		lsls	r3, r3, #4
 1602 0080 0B44     		add	r3, r3, r1
 1603 0082 03F5D873 		add	r3, r3, #432
 1604 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1605 0088 002B     		cmp	r3, #0
 1606 008a 19D0     		beq	.L96
 663:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1607              		.loc 1 663 0
 1608 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1609 008e 8C4A     		ldr	r2, .L150+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 41


 1610 0090 3421     		movs	r1, #52
 1611 0092 01FB03F3 		mul	r3, r1, r3
 1612 0096 1344     		add	r3, r3, r2
 1613 0098 0833     		adds	r3, r3, #8
 1614 009a 1968     		ldr	r1, [r3]
 1615 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1616 009e 8648     		ldr	r0, .L150
 1617 00a0 1346     		mov	r3, r2
 1618 00a2 5B00     		lsls	r3, r3, #1
 1619 00a4 1344     		add	r3, r3, r2
 1620 00a6 1B01     		lsls	r3, r3, #4
 1621 00a8 0344     		add	r3, r3, r0
 1622 00aa 03F5DA73 		add	r3, r3, #436
 1623 00ae 93F90030 		ldrsb	r3, [r3]
 1624 00b2 03FB01F2 		mul	r2, r3, r1
 1625 00b6 3B6A     		ldr	r3, [r7, #32]
 1626 00b8 5B6B     		ldr	r3, [r3, #52]
 1627 00ba 1344     		add	r3, r3, r2
 1628 00bc 7B62     		str	r3, [r7, #36]
 1629 00be 18E0     		b	.L97
 1630              	.L96:
 664:..\src/interruptions.c ****             else
 665:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1631              		.loc 1 665 0
 1632 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1633 00c2 7F4A     		ldr	r2, .L150+8
 1634 00c4 3421     		movs	r1, #52
 1635 00c6 01FB03F3 		mul	r3, r1, r3
 1636 00ca 1344     		add	r3, r3, r2
 1637 00cc 0433     		adds	r3, r3, #4
 1638 00ce 1968     		ldr	r1, [r3]
 1639 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1640 00d2 7948     		ldr	r0, .L150
 1641 00d4 1346     		mov	r3, r2
 1642 00d6 5B00     		lsls	r3, r3, #1
 1643 00d8 1344     		add	r3, r3, r2
 1644 00da 1B01     		lsls	r3, r3, #4
 1645 00dc 0344     		add	r3, r3, r0
 1646 00de 03F5DA73 		add	r3, r3, #436
 1647 00e2 93F90030 		ldrsb	r3, [r3]
 1648 00e6 03FB01F2 		mul	r2, r3, r1
 1649 00ea 3B6A     		ldr	r3, [r7, #32]
 1650 00ec 5B6B     		ldr	r3, [r3, #52]
 1651 00ee 1344     		add	r3, r3, r2
 1652 00f0 7B62     		str	r3, [r7, #36]
 1653              	.L97:
 666:..\src/interruptions.c ****             
 667:..\src/interruptions.c **** 
 668:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 669:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1654              		.loc 1 669 0
 1655 00f2 7B68     		ldr	r3, [r7, #4]
 1656 00f4 1B68     		ldr	r3, [r3]
 1657 00f6 7A6A     		ldr	r2, [r7, #36]
 1658 00f8 D21A     		subs	r2, r2, r3
 1659 00fa 3B6A     		ldr	r3, [r7, #32]
 1660 00fc 1B6C     		ldr	r3, [r3, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 42


 1661 00fe 9A42     		cmp	r2, r3
 1662 0100 0BDD     		ble	.L98
 1663              		.loc 1 669 0 is_stmt 0 discriminator 1
 1664 0102 3B6A     		ldr	r3, [r7, #32]
 1665 0104 1B6C     		ldr	r3, [r3, #64]
 1666 0106 002B     		cmp	r3, #0
 1667 0108 07D0     		beq	.L98
 670:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1668              		.loc 1 670 0 is_stmt 1
 1669 010a BB68     		ldr	r3, [r7, #8]
 1670 010c 1A68     		ldr	r2, [r3]
 1671 010e 3B6A     		ldr	r3, [r7, #32]
 1672 0110 1B6C     		ldr	r3, [r3, #64]
 1673 0112 1A44     		add	r2, r2, r3
 1674 0114 BB68     		ldr	r3, [r7, #8]
 1675 0116 1A60     		str	r2, [r3]
 1676 0118 17E0     		b	.L99
 1677              	.L98:
 671:..\src/interruptions.c ****             else {
 672:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1678              		.loc 1 672 0
 1679 011a 7B68     		ldr	r3, [r7, #4]
 1680 011c 1B68     		ldr	r3, [r3]
 1681 011e 7A6A     		ldr	r2, [r7, #36]
 1682 0120 D21A     		subs	r2, r2, r3
 1683 0122 3B6A     		ldr	r3, [r7, #32]
 1684 0124 DB6B     		ldr	r3, [r3, #60]
 1685 0126 9A42     		cmp	r2, r3
 1686 0128 0BDA     		bge	.L100
 1687              		.loc 1 672 0 is_stmt 0 discriminator 1
 1688 012a 3B6A     		ldr	r3, [r7, #32]
 1689 012c DB6B     		ldr	r3, [r3, #60]
 1690 012e 002B     		cmp	r3, #0
 1691 0130 07D0     		beq	.L100
 673:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1692              		.loc 1 673 0 is_stmt 1
 1693 0132 BB68     		ldr	r3, [r7, #8]
 1694 0134 1A68     		ldr	r2, [r3]
 1695 0136 3B6A     		ldr	r3, [r7, #32]
 1696 0138 DB6B     		ldr	r3, [r3, #60]
 1697 013a 1A44     		add	r2, r2, r3
 1698 013c BB68     		ldr	r3, [r7, #8]
 1699 013e 1A60     		str	r2, [r3]
 1700 0140 03E0     		b	.L99
 1701              	.L100:
 674:..\src/interruptions.c ****                 else
 675:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1702              		.loc 1 675 0
 1703 0142 BB68     		ldr	r3, [r7, #8]
 1704 0144 7A6A     		ldr	r2, [r7, #36]
 1705 0146 1A60     		str	r2, [r3]
 676:..\src/interruptions.c ****             }
 677:..\src/interruptions.c ****             break;
 1706              		.loc 1 677 0
 1707 0148 DFE1     		b	.L101
 1708              	.L99:
 1709 014a DEE1     		b	.L101
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 43


 1710              	.L94:
 678:..\src/interruptions.c ****         
 679:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 680:..\src/interruptions.c ****             
 681:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1711              		.loc 1 681 0
 1712 014c 5A4B     		ldr	r3, .L150
 1713 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1714 0152 002B     		cmp	r3, #0
 1715 0154 57D1     		bne	.L102
 682:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 683:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1716              		.loc 1 683 0
 1717 0156 7B68     		ldr	r3, [r7, #4]
 1718 0158 1A68     		ldr	r2, [r3]
 1719 015a BB68     		ldr	r3, [r7, #8]
 1720 015c 1A60     		str	r2, [r3]
 684:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1721              		.loc 1 684 0
 1722 015e 574B     		ldr	r3, .L150+4
 1723 0160 1B6A     		ldr	r3, [r3, #32]
 1724 0162 B3F52F7F 		cmp	r3, #700
 1725 0166 45DC     		bgt	.L103
 1726              	.LBB4:
 685:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1727              		.loc 1 685 0
 1728 0168 544B     		ldr	r3, .L150+4
 1729 016a 1B6A     		ldr	r3, [r3, #32]
 1730 016c 524A     		ldr	r2, .L150
 1731 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1732 0172 9B1A     		subs	r3, r3, r2
 1733 0174 3B61     		str	r3, [r7, #16]
 686:..\src/interruptions.c **** 
 687:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1734              		.loc 1 687 0
 1735 0176 514B     		ldr	r3, .L150+4
 1736 0178 1B6A     		ldr	r3, [r3, #32]
 1737 017a 4F4A     		ldr	r2, .L150
 1738 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1739 0180 9342     		cmp	r3, r2
 1740 0182 13DD     		ble	.L104
 688:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1741              		.loc 1 688 0
 1742 0184 BB68     		ldr	r3, [r7, #8]
 1743 0186 1A68     		ldr	r2, [r3]
 1744 0188 4B4B     		ldr	r3, .L150
 1745 018a B3F8B032 		ldrh	r3, [r3, #688]
 1746 018e 1946     		mov	r1, r3
 1747 0190 3B69     		ldr	r3, [r7, #16]
 1748 0192 03FB01F1 		mul	r1, r3, r1
 1749 0196 484B     		ldr	r3, .L150
 1750 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1751 019c C3F58063 		rsb	r3, r3, #1024
 1752 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1753 01a4 1A44     		add	r2, r2, r3
 1754 01a6 BB68     		ldr	r3, [r7, #8]
 1755 01a8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 44


 1756              	.LBE4:
 689:..\src/interruptions.c ****                     }
 690:..\src/interruptions.c ****                     else {
 691:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 692:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 693:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 694:..\src/interruptions.c ****                         }
 695:..\src/interruptions.c ****                     }
 696:..\src/interruptions.c ****                 }
 697:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 698:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 699:..\src/interruptions.c ****                 }
 700:..\src/interruptions.c ****             }
 701:..\src/interruptions.c ****             else {
 702:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 703:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 704:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 705:..\src/interruptions.c ****                 }
 706:..\src/interruptions.c ****             }
 707:..\src/interruptions.c ****             break;
 1757              		.loc 1 707 0
 1758 01aa A5E1     		b	.L143
 1759              	.L104:
 1760              	.LBB5:
 691:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1761              		.loc 1 691 0
 1762 01ac 434B     		ldr	r3, .L150+4
 1763 01ae 1B6A     		ldr	r3, [r3, #32]
 1764 01b0 414A     		ldr	r2, .L150
 1765 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1766 01b6 1344     		add	r3, r3, r2
 1767 01b8 3B61     		str	r3, [r7, #16]
 692:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1768              		.loc 1 692 0
 1769 01ba 404B     		ldr	r3, .L150+4
 1770 01bc 1A6A     		ldr	r2, [r3, #32]
 1771 01be 3E4B     		ldr	r3, .L150
 1772 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1773 01c4 5B42     		negs	r3, r3
 1774 01c6 9A42     		cmp	r2, r3
 1775 01c8 80F29681 		bge	.L143
 693:..\src/interruptions.c ****                         }
 1776              		.loc 1 693 0
 1777 01cc BB68     		ldr	r3, [r7, #8]
 1778 01ce 1A68     		ldr	r2, [r3]
 1779 01d0 394B     		ldr	r3, .L150
 1780 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1781 01d6 1946     		mov	r1, r3
 1782 01d8 3B69     		ldr	r3, [r7, #16]
 1783 01da 03FB01F1 		mul	r1, r3, r1
 1784 01de 364B     		ldr	r3, .L150
 1785 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1786 01e4 C3F58063 		rsb	r3, r3, #1024
 1787 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1788 01ec 1A44     		add	r2, r2, r3
 1789 01ee BB68     		ldr	r3, [r7, #8]
 1790 01f0 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 45


 1791              	.LBE5:
 1792              		.loc 1 707 0
 1793 01f2 81E1     		b	.L143
 1794              	.L103:
 698:..\src/interruptions.c ****                 }
 1795              		.loc 1 698 0
 1796 01f4 BB68     		ldr	r3, [r7, #8]
 1797 01f6 1B68     		ldr	r3, [r3]
 1798 01f8 324A     		ldr	r2, .L150+12
 1799 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1800 01fe 9A1A     		subs	r2, r3, r2
 1801 0200 BB68     		ldr	r3, [r7, #8]
 1802 0202 1A60     		str	r2, [r3]
 1803              		.loc 1 707 0
 1804 0204 78E1     		b	.L143
 1805              	.L102:
 703:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1806              		.loc 1 703 0
 1807 0206 2C4B     		ldr	r3, .L150
 1808 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1809 020c 042B     		cmp	r3, #4
 1810 020e 40F07381 		bne	.L143
 704:..\src/interruptions.c ****                 }
 1811              		.loc 1 704 0
 1812 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1813 0214 7A68     		ldr	r2, [r7, #4]
 1814 0216 B968     		ldr	r1, [r7, #8]
 1815 0218 1846     		mov	r0, r3
 1816 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1817              		.loc 1 707 0
 1818 021e 6BE1     		b	.L143
 1819              	.L90:
 708:..\src/interruptions.c ****             
 709:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 710:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1820              		.loc 1 710 0
 1821 0220 BB69     		ldr	r3, [r7, #24]
 1822 0222 002B     		cmp	r3, #0
 1823 0224 15DD     		ble	.L108
 711:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1824              		.loc 1 711 0
 1825 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1826 0228 2649     		ldr	r1, .L150+12
 1827 022a 1346     		mov	r3, r2
 1828 022c DB00     		lsls	r3, r3, #3
 1829 022e 9B1A     		subs	r3, r3, r2
 1830 0230 1B01     		lsls	r3, r3, #4
 1831 0232 0B44     		add	r3, r3, r1
 1832 0234 E833     		adds	r3, r3, #232
 1833 0236 1B68     		ldr	r3, [r3]
 1834 0238 BA69     		ldr	r2, [r7, #24]
 1835 023a 02FB03F2 		mul	r2, r2, r3
 1836 023e 1E4B     		ldr	r3, .L150
 1837 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1838 0244 C3F58063 		rsb	r3, r3, #1024
 1839 0248 92FBF3F2 		sdiv	r2, r2, r3
 1840 024c BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 46


 1841 024e 1A60     		str	r2, [r3]
 712:..\src/interruptions.c ****             else
 713:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 714:..\src/interruptions.c ****             break;
 1842              		.loc 1 714 0
 1843 0250 5BE1     		b	.L101
 1844              	.L108:
 713:..\src/interruptions.c ****             break;
 1845              		.loc 1 713 0
 1846 0252 BB68     		ldr	r3, [r7, #8]
 1847 0254 0022     		movs	r2, #0
 1848 0256 1A60     		str	r2, [r3]
 1849              		.loc 1 714 0
 1850 0258 57E1     		b	.L101
 1851              	.L95:
 715:..\src/interruptions.c ****         
 716:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 717:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1852              		.loc 1 717 0
 1853 025a BB69     		ldr	r3, [r7, #24]
 1854 025c 002B     		cmp	r3, #0
 1855 025e 1FDD     		ble	.L110
 718:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1856              		.loc 1 718 0
 1857 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1858 0262 1849     		ldr	r1, .L150+12
 1859 0264 1346     		mov	r3, r2
 1860 0266 DB00     		lsls	r3, r3, #3
 1861 0268 9B1A     		subs	r3, r3, r2
 1862 026a 1B01     		lsls	r3, r3, #4
 1863 026c 0B44     		add	r3, r3, r1
 1864 026e E833     		adds	r3, r3, #232
 1865 0270 1968     		ldr	r1, [r3]
 1866 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1867 0274 1348     		ldr	r0, .L150+12
 1868 0276 1346     		mov	r3, r2
 1869 0278 DB00     		lsls	r3, r3, #3
 1870 027a 9B1A     		subs	r3, r3, r2
 1871 027c 1B01     		lsls	r3, r3, #4
 1872 027e 0344     		add	r3, r3, r0
 1873 0280 E833     		adds	r3, r3, #232
 1874 0282 1B68     		ldr	r3, [r3]
 1875 0284 BA69     		ldr	r2, [r7, #24]
 1876 0286 02FB03F2 		mul	r2, r2, r3
 1877 028a 0B4B     		ldr	r3, .L150
 1878 028c B3F8F031 		ldrh	r3, [r3, #496]
 1879 0290 C3F58063 		rsb	r3, r3, #1024
 1880 0294 92FBF3F3 		sdiv	r3, r2, r3
 1881 0298 CA1A     		subs	r2, r1, r3
 1882 029a BB68     		ldr	r3, [r7, #8]
 1883 029c 1A60     		str	r2, [r3]
 719:..\src/interruptions.c ****             else
 720:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 721:..\src/interruptions.c ****             break;
 1884              		.loc 1 721 0
 1885 029e 34E1     		b	.L101
 1886              	.L110:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 47


 720:..\src/interruptions.c ****             break;
 1887              		.loc 1 720 0
 1888 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1889 02a2 0849     		ldr	r1, .L150+12
 1890 02a4 1346     		mov	r3, r2
 1891 02a6 DB00     		lsls	r3, r3, #3
 1892 02a8 9B1A     		subs	r3, r3, r2
 1893 02aa 1B01     		lsls	r3, r3, #4
 1894 02ac 0B44     		add	r3, r3, r1
 1895 02ae E833     		adds	r3, r3, #232
 1896 02b0 1A68     		ldr	r2, [r3]
 1897 02b2 BB68     		ldr	r3, [r7, #8]
 1898 02b4 1A60     		str	r2, [r3]
 1899              		.loc 1 721 0
 1900 02b6 28E1     		b	.L101
 1901              	.L151:
 1902              		.align	2
 1903              	.L150:
 1904 02b8 00000000 		.word	c_mem
 1905 02bc 00000000 		.word	g_adc_meas
 1906 02c0 00000000 		.word	g_meas
 1907 02c4 00000000 		.word	g_mem
 1908              	.L91:
 722:..\src/interruptions.c **** 
 723:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 724:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1909              		.loc 1 724 0
 1910 02c8 7B68     		ldr	r3, [r7, #4]
 1911 02ca 1A68     		ldr	r2, [r3]
 1912 02cc BB68     		ldr	r3, [r7, #8]
 1913 02ce 1A60     		str	r2, [r3]
 725:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1914              		.loc 1 725 0
 1915 02d0 BB69     		ldr	r3, [r7, #24]
 1916 02d2 002B     		cmp	r3, #0
 1917 02d4 13DD     		ble	.L112
 726:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1918              		.loc 1 726 0
 1919 02d6 7B68     		ldr	r3, [r7, #4]
 1920 02d8 1A68     		ldr	r2, [r3]
 1921 02da 884B     		ldr	r3, .L152
 1922 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1923 02e0 1946     		mov	r1, r3
 1924 02e2 BB69     		ldr	r3, [r7, #24]
 1925 02e4 03FB01F3 		mul	r3, r3, r1
 1926 02e8 5900     		lsls	r1, r3, #1
 1927 02ea 854B     		ldr	r3, .L152+4
 1928 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1929 02f0 C3F58063 		rsb	r3, r3, #1024
 1930 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1931 02f8 1A44     		add	r2, r2, r3
 1932 02fa BB68     		ldr	r3, [r7, #8]
 1933 02fc 1A60     		str	r2, [r3]
 1934              	.L112:
 727:..\src/interruptions.c ****             }
 728:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1935              		.loc 1 728 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 48


 1936 02fe 7B69     		ldr	r3, [r7, #20]
 1937 0300 002B     		cmp	r3, #0
 1938 0302 40F30181 		ble	.L144
 729:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1939              		.loc 1 729 0
 1940 0306 7B68     		ldr	r3, [r7, #4]
 1941 0308 1A68     		ldr	r2, [r3]
 1942 030a 7C4B     		ldr	r3, .L152
 1943 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1944 0310 1946     		mov	r1, r3
 1945 0312 7B69     		ldr	r3, [r7, #20]
 1946 0314 03FB01F3 		mul	r3, r3, r1
 1947 0318 5900     		lsls	r1, r3, #1
 1948 031a 794B     		ldr	r3, .L152+4
 1949 031c B3F8F231 		ldrh	r3, [r3, #498]
 1950 0320 C3F58063 		rsb	r3, r3, #1024
 1951 0324 91FBF3F3 		sdiv	r3, r1, r3
 1952 0328 D21A     		subs	r2, r2, r3
 1953 032a BB68     		ldr	r3, [r7, #8]
 1954 032c 1A60     		str	r2, [r3]
 730:..\src/interruptions.c ****             }
 731:..\src/interruptions.c ****             break;
 1955              		.loc 1 731 0
 1956 032e EBE0     		b	.L144
 1957              	.L92:
 732:..\src/interruptions.c **** 
 733:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 734:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1958              		.loc 1 734 0
 1959 0330 7B68     		ldr	r3, [r7, #4]
 1960 0332 1A68     		ldr	r2, [r3]
 1961 0334 BB68     		ldr	r3, [r7, #8]
 1962 0336 1A60     		str	r2, [r3]
 735:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1963              		.loc 1 735 0
 1964 0338 714B     		ldr	r3, .L152+4
 1965 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1966 033e 042B     		cmp	r3, #4
 1967 0340 5BD0     		beq	.L114
 736:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1968              		.loc 1 736 0
 1969 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1970 0344 6F4A     		ldr	r2, .L152+8
 1971 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1972 0348 012B     		cmp	r3, #1
 1973 034a 1CD0     		beq	.L116
 1974 034c 022B     		cmp	r3, #2
 1975 034e 37D0     		beq	.L117
 1976 0350 002B     		cmp	r3, #0
 1977 0352 00D0     		beq	.L118
 737:..\src/interruptions.c ****                     case 0:
 738:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 739:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 740:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 741:..\src/interruptions.c ****                             break;
 742:..\src/interruptions.c ****                         }
 743:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 49


 744:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 745:..\src/interruptions.c ****                             break;
 746:..\src/interruptions.c ****                         }
 747:..\src/interruptions.c ****                         break;
 748:..\src/interruptions.c **** 
 749:..\src/interruptions.c ****                     case 1:
 750:..\src/interruptions.c ****                         // EMG 1 is first
 751:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 752:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 753:..\src/interruptions.c ****                             break;
 754:..\src/interruptions.c ****                         }
 755:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 756:..\src/interruptions.c ****                         break;
 757:..\src/interruptions.c **** 
 758:..\src/interruptions.c ****                     case 2:
 759:..\src/interruptions.c ****                         // EMG 2 is first
 760:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 761:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 762:..\src/interruptions.c ****                             break;
 763:..\src/interruptions.c ****                         }
 764:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 765:..\src/interruptions.c ****                         break;
 766:..\src/interruptions.c **** 
 767:..\src/interruptions.c ****                     default:
 768:..\src/interruptions.c ****                         break;
 1978              		.loc 1 768 0
 1979 0354 5BE0     		b	.L124
 1980              	.L118:
 739:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1981              		.loc 1 739 0
 1982 0356 BB69     		ldr	r3, [r7, #24]
 1983 0358 002B     		cmp	r3, #0
 1984 035a 08DD     		ble	.L119
 739:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1985              		.loc 1 739 0 is_stmt 0 discriminator 1
 1986 035c BA69     		ldr	r2, [r7, #24]
 1987 035e 7B69     		ldr	r3, [r7, #20]
 1988 0360 9A42     		cmp	r2, r3
 1989 0362 04DD     		ble	.L119
 740:..\src/interruptions.c ****                             break;
 1990              		.loc 1 740 0 is_stmt 1
 1991 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1992 0366 674A     		ldr	r2, .L152+8
 1993 0368 0121     		movs	r1, #1
 1994 036a D154     		strb	r1, [r2, r3]
 741:..\src/interruptions.c ****                         }
 1995              		.loc 1 741 0
 1996 036c 4FE0     		b	.L124
 1997              	.L119:
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1998              		.loc 1 743 0
 1999 036e 7B69     		ldr	r3, [r7, #20]
 2000 0370 002B     		cmp	r3, #0
 2001 0372 4BDD     		ble	.L145
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2002              		.loc 1 743 0 is_stmt 0 discriminator 1
 2003 0374 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 50


 2004 0376 BB69     		ldr	r3, [r7, #24]
 2005 0378 9A42     		cmp	r2, r3
 2006 037a 47DD     		ble	.L145
 744:..\src/interruptions.c ****                             break;
 2007              		.loc 1 744 0 is_stmt 1
 2008 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2009 037e 614A     		ldr	r2, .L152+8
 2010 0380 0221     		movs	r1, #2
 2011 0382 D154     		strb	r1, [r2, r3]
 745:..\src/interruptions.c ****                         }
 2012              		.loc 1 745 0
 2013 0384 43E0     		b	.L124
 2014              	.L116:
 751:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2015              		.loc 1 751 0
 2016 0386 BB69     		ldr	r3, [r7, #24]
 2017 0388 002B     		cmp	r3, #0
 2018 038a 04DA     		bge	.L122
 752:..\src/interruptions.c ****                             break;
 2019              		.loc 1 752 0
 2020 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2021 038e 5D4A     		ldr	r2, .L152+8
 2022 0390 0021     		movs	r1, #0
 2023 0392 D154     		strb	r1, [r2, r3]
 753:..\src/interruptions.c ****                         }
 2024              		.loc 1 753 0
 2025 0394 3BE0     		b	.L124
 2026              	.L122:
 755:..\src/interruptions.c ****                         break;
 2027              		.loc 1 755 0
 2028 0396 7B68     		ldr	r3, [r7, #4]
 2029 0398 1A68     		ldr	r2, [r3]
 2030 039a 584B     		ldr	r3, .L152
 2031 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2032 03a0 1946     		mov	r1, r3
 2033 03a2 BB69     		ldr	r3, [r7, #24]
 2034 03a4 03FB01F3 		mul	r3, r3, r1
 2035 03a8 9900     		lsls	r1, r3, #2
 2036 03aa 554B     		ldr	r3, .L152+4
 2037 03ac B3F8F031 		ldrh	r3, [r3, #496]
 2038 03b0 C3F58063 		rsb	r3, r3, #1024
 2039 03b4 91FBF3F3 		sdiv	r3, r1, r3
 2040 03b8 1A44     		add	r2, r2, r3
 2041 03ba BB68     		ldr	r3, [r7, #8]
 2042 03bc 1A60     		str	r2, [r3]
 756:..\src/interruptions.c **** 
 2043              		.loc 1 756 0
 2044 03be 26E0     		b	.L124
 2045              	.L117:
 760:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2046              		.loc 1 760 0
 2047 03c0 7B69     		ldr	r3, [r7, #20]
 2048 03c2 002B     		cmp	r3, #0
 2049 03c4 04DA     		bge	.L123
 761:..\src/interruptions.c ****                             break;
 2050              		.loc 1 761 0
 2051 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 51


 2052 03c8 4E4A     		ldr	r2, .L152+8
 2053 03ca 0021     		movs	r1, #0
 2054 03cc D154     		strb	r1, [r2, r3]
 762:..\src/interruptions.c ****                         }
 2055              		.loc 1 762 0
 2056 03ce 1EE0     		b	.L124
 2057              	.L123:
 764:..\src/interruptions.c ****                         break;
 2058              		.loc 1 764 0
 2059 03d0 7B68     		ldr	r3, [r7, #4]
 2060 03d2 1A68     		ldr	r2, [r3]
 2061 03d4 494B     		ldr	r3, .L152
 2062 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2063 03da 1946     		mov	r1, r3
 2064 03dc 7B69     		ldr	r3, [r7, #20]
 2065 03de 03FB01F3 		mul	r3, r3, r1
 2066 03e2 9900     		lsls	r1, r3, #2
 2067 03e4 464B     		ldr	r3, .L152+4
 2068 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2069 03ea C3F58063 		rsb	r3, r3, #1024
 2070 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2071 03f2 D21A     		subs	r2, r2, r3
 2072 03f4 BB68     		ldr	r3, [r7, #8]
 2073 03f6 1A60     		str	r2, [r3]
 765:..\src/interruptions.c **** 
 2074              		.loc 1 765 0
 2075 03f8 09E0     		b	.L124
 2076              	.L114:
 769:..\src/interruptions.c ****                 }
 770:..\src/interruptions.c ****             }
 771:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 772:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 773:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2077              		.loc 1 773 0
 2078 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2079 03fc 7B69     		ldr	r3, [r7, #20]
 2080 03fe 0093     		str	r3, [sp]
 2081 0400 BB69     		ldr	r3, [r7, #24]
 2082 0402 7A68     		ldr	r2, [r7, #4]
 2083 0404 B968     		ldr	r1, [r7, #8]
 2084 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 774:..\src/interruptions.c ****             }
 775:..\src/interruptions.c ****             break;
 2085              		.loc 1 775 0
 2086 040a 7EE0     		b	.L101
 2087              	.L145:
 747:..\src/interruptions.c **** 
 2088              		.loc 1 747 0
 2089 040c 00BF     		nop
 2090              	.L124:
 2091              		.loc 1 775 0 discriminator 5
 2092 040e 7CE0     		b	.L101
 2093              	.L93:
 776:..\src/interruptions.c **** 
 777:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 778:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2094              		.loc 1 778 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 52


 2095 0410 7B68     		ldr	r3, [r7, #4]
 2096 0412 1A68     		ldr	r2, [r3]
 2097 0414 BB68     		ldr	r3, [r7, #8]
 2098 0416 1A60     		str	r2, [r3]
 779:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2099              		.loc 1 779 0
 2100 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2101 041a 3A4A     		ldr	r2, .L152+8
 2102 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2103 041e 012B     		cmp	r3, #1
 2104 0420 1CD0     		beq	.L126
 2105 0422 022B     		cmp	r3, #2
 2106 0424 3DD0     		beq	.L127
 2107 0426 002B     		cmp	r3, #0
 2108 0428 00D0     		beq	.L128
 780:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 781:..\src/interruptions.c ****                 case 0:
 782:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 783:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 784:..\src/interruptions.c ****                         break;
 785:..\src/interruptions.c ****                     }
 786:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 787:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 788:..\src/interruptions.c ****                         break;
 789:..\src/interruptions.c ****                     }
 790:..\src/interruptions.c ****                     break;
 791:..\src/interruptions.c **** 
 792:..\src/interruptions.c ****                 // EMG 1 is first
 793:..\src/interruptions.c ****                 case 1:
 794:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 795:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 796:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 797:..\src/interruptions.c ****                         break;
 798:..\src/interruptions.c ****                     }
 799:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 800:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 801:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 802:..\src/interruptions.c ****                     
 803:..\src/interruptions.c ****                     break;
 804:..\src/interruptions.c **** 
 805:..\src/interruptions.c ****                 // EMG 2 is first
 806:..\src/interruptions.c ****                 case 2:
 807:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 808:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 809:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 810:..\src/interruptions.c ****                         break;
 811:..\src/interruptions.c ****                     }
 812:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 813:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 814:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 815:..\src/interruptions.c ****                     }
 816:..\src/interruptions.c ****                     break;
 817:..\src/interruptions.c **** 
 818:..\src/interruptions.c ****                 default:
 819:..\src/interruptions.c ****                     break;
 2109              		.loc 1 819 0
 2110 042a 62E0     		b	.L130
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 53


 2111              	.L128:
 782:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2112              		.loc 1 782 0
 2113 042c BB69     		ldr	r3, [r7, #24]
 2114 042e 002B     		cmp	r3, #0
 2115 0430 08DD     		ble	.L129
 782:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2116              		.loc 1 782 0 is_stmt 0 discriminator 1
 2117 0432 BA69     		ldr	r2, [r7, #24]
 2118 0434 7B69     		ldr	r3, [r7, #20]
 2119 0436 9A42     		cmp	r2, r3
 2120 0438 04DD     		ble	.L129
 783:..\src/interruptions.c ****                         break;
 2121              		.loc 1 783 0 is_stmt 1
 2122 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2123 043c 314A     		ldr	r2, .L152+8
 2124 043e 0121     		movs	r1, #1
 2125 0440 D154     		strb	r1, [r2, r3]
 784:..\src/interruptions.c ****                     }
 2126              		.loc 1 784 0
 2127 0442 56E0     		b	.L130
 2128              	.L129:
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2129              		.loc 1 786 0
 2130 0444 7B69     		ldr	r3, [r7, #20]
 2131 0446 002B     		cmp	r3, #0
 2132 0448 4EDD     		ble	.L146
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2133              		.loc 1 786 0 is_stmt 0 discriminator 1
 2134 044a 7A69     		ldr	r2, [r7, #20]
 2135 044c BB69     		ldr	r3, [r7, #24]
 2136 044e 9A42     		cmp	r2, r3
 2137 0450 4ADD     		ble	.L146
 787:..\src/interruptions.c ****                         break;
 2138              		.loc 1 787 0 is_stmt 1
 2139 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2140 0454 2B4A     		ldr	r2, .L152+8
 2141 0456 0221     		movs	r1, #2
 2142 0458 D154     		strb	r1, [r2, r3]
 788:..\src/interruptions.c ****                     }
 2143              		.loc 1 788 0
 2144 045a 4AE0     		b	.L130
 2145              	.L126:
 795:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2146              		.loc 1 795 0
 2147 045c BB69     		ldr	r3, [r7, #24]
 2148 045e 002B     		cmp	r3, #0
 2149 0460 07DA     		bge	.L132
 795:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2150              		.loc 1 795 0 is_stmt 0 discriminator 1
 2151 0462 7B69     		ldr	r3, [r7, #20]
 2152 0464 002B     		cmp	r3, #0
 2153 0466 04DA     		bge	.L132
 796:..\src/interruptions.c ****                         break;
 2154              		.loc 1 796 0 is_stmt 1
 2155 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2156 046a 264A     		ldr	r2, .L152+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 54


 2157 046c 0021     		movs	r1, #0
 2158 046e D154     		strb	r1, [r2, r3]
 797:..\src/interruptions.c ****                     }
 2159              		.loc 1 797 0
 2160 0470 3FE0     		b	.L130
 2161              	.L132:
 800:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2162              		.loc 1 800 0
 2163 0472 BB69     		ldr	r3, [r7, #24]
 2164 0474 002B     		cmp	r3, #0
 2165 0476 39DD     		ble	.L147
 801:..\src/interruptions.c ****                     
 2166              		.loc 1 801 0
 2167 0478 7B68     		ldr	r3, [r7, #4]
 2168 047a 1A68     		ldr	r2, [r3]
 2169 047c 1F4B     		ldr	r3, .L152
 2170 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2171 0482 1946     		mov	r1, r3
 2172 0484 BB69     		ldr	r3, [r7, #24]
 2173 0486 03FB01F3 		mul	r3, r3, r1
 2174 048a 9900     		lsls	r1, r3, #2
 2175 048c 1C4B     		ldr	r3, .L152+4
 2176 048e B3F8F031 		ldrh	r3, [r3, #496]
 2177 0492 C3F58063 		rsb	r3, r3, #1024
 2178 0496 91FBF3F3 		sdiv	r3, r1, r3
 2179 049a 1A44     		add	r2, r2, r3
 2180 049c BB68     		ldr	r3, [r7, #8]
 2181 049e 1A60     		str	r2, [r3]
 803:..\src/interruptions.c **** 
 2182              		.loc 1 803 0
 2183 04a0 24E0     		b	.L147
 2184              	.L127:
 808:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2185              		.loc 1 808 0
 2186 04a2 BB69     		ldr	r3, [r7, #24]
 2187 04a4 002B     		cmp	r3, #0
 2188 04a6 07DA     		bge	.L134
 808:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2189              		.loc 1 808 0 is_stmt 0 discriminator 1
 2190 04a8 7B69     		ldr	r3, [r7, #20]
 2191 04aa 002B     		cmp	r3, #0
 2192 04ac 04DA     		bge	.L134
 809:..\src/interruptions.c ****                         break;
 2193              		.loc 1 809 0 is_stmt 1
 2194 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2195 04b0 144A     		ldr	r2, .L152+8
 2196 04b2 0021     		movs	r1, #0
 2197 04b4 D154     		strb	r1, [r2, r3]
 810:..\src/interruptions.c ****                     }
 2198              		.loc 1 810 0
 2199 04b6 1CE0     		b	.L130
 2200              	.L134:
 813:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2201              		.loc 1 813 0
 2202 04b8 7B69     		ldr	r3, [r7, #20]
 2203 04ba 002B     		cmp	r3, #0
 2204 04bc 18DD     		ble	.L148
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 55


 814:..\src/interruptions.c ****                     }
 2205              		.loc 1 814 0
 2206 04be 7B68     		ldr	r3, [r7, #4]
 2207 04c0 1A68     		ldr	r2, [r3]
 2208 04c2 0F4B     		ldr	r3, .L152+4
 2209 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2210 04c8 1946     		mov	r1, r3
 2211 04ca 7B69     		ldr	r3, [r7, #20]
 2212 04cc 03FB01F3 		mul	r3, r3, r1
 2213 04d0 9900     		lsls	r1, r3, #2
 2214 04d2 0B4B     		ldr	r3, .L152+4
 2215 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2216 04d8 C3F58063 		rsb	r3, r3, #1024
 2217 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2218 04e0 D21A     		subs	r2, r2, r3
 2219 04e2 BB68     		ldr	r3, [r7, #8]
 2220 04e4 1A60     		str	r2, [r3]
 816:..\src/interruptions.c **** 
 2221              		.loc 1 816 0
 2222 04e6 03E0     		b	.L148
 2223              	.L146:
 790:..\src/interruptions.c **** 
 2224              		.loc 1 790 0
 2225 04e8 00BF     		nop
 2226 04ea 0EE0     		b	.L101
 2227              	.L147:
 803:..\src/interruptions.c **** 
 2228              		.loc 1 803 0
 2229 04ec 00BF     		nop
 2230 04ee 0CE0     		b	.L101
 2231              	.L148:
 816:..\src/interruptions.c **** 
 2232              		.loc 1 816 0
 2233 04f0 00BF     		nop
 2234              	.L130:
 820:..\src/interruptions.c ****             }
 821:..\src/interruptions.c ****             break;
 2235              		.loc 1 821 0 discriminator 6
 2236 04f2 0AE0     		b	.L101
 2237              	.L142:
 822:..\src/interruptions.c **** 
 823:..\src/interruptions.c ****         default:
 824:..\src/interruptions.c ****             break;
 2238              		.loc 1 824 0
 2239 04f4 00BF     		nop
 2240 04f6 08E0     		b	.L101
 2241              	.L143:
 707:..\src/interruptions.c ****             
 2242              		.loc 1 707 0
 2243 04f8 00BF     		nop
 2244 04fa 06E0     		b	.L101
 2245              	.L153:
 2246              		.align	2
 2247              	.L152:
 2248 04fc 00000000 		.word	g_mem
 2249 0500 00000000 		.word	c_mem
 2250 0504 8C000000 		.word	current_emg.10492
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 56


 2251              	.L144:
 731:..\src/interruptions.c **** 
 2252              		.loc 1 731 0
 2253 0508 00BF     		nop
 2254              	.L101:
 825:..\src/interruptions.c ****     }
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****     // Position limit saturation
 828:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2255              		.loc 1 828 0
 2256 050a 3B6A     		ldr	r3, [r7, #32]
 2257 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2258 0510 002B     		cmp	r3, #0
 2259 0512 13D0     		beq	.L136
 829:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2260              		.loc 1 829 0
 2261 0514 BB68     		ldr	r3, [r7, #8]
 2262 0516 1A68     		ldr	r2, [r3]
 2263 0518 3B6A     		ldr	r3, [r7, #32]
 2264 051a 5B6B     		ldr	r3, [r3, #52]
 2265 051c 9A42     		cmp	r2, r3
 2266 051e 03DA     		bge	.L137
 830:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2267              		.loc 1 830 0
 2268 0520 3B6A     		ldr	r3, [r7, #32]
 2269 0522 5A6B     		ldr	r2, [r3, #52]
 2270 0524 BB68     		ldr	r3, [r7, #8]
 2271 0526 1A60     		str	r2, [r3]
 2272              	.L137:
 831:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2273              		.loc 1 831 0
 2274 0528 BB68     		ldr	r3, [r7, #8]
 2275 052a 1A68     		ldr	r2, [r3]
 2276 052c 3B6A     		ldr	r3, [r7, #32]
 2277 052e 9B6B     		ldr	r3, [r3, #56]
 2278 0530 9A42     		cmp	r2, r3
 2279 0532 03DD     		ble	.L136
 832:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2280              		.loc 1 832 0
 2281 0534 3B6A     		ldr	r3, [r7, #32]
 2282 0536 9A6B     		ldr	r2, [r3, #56]
 2283 0538 BB68     		ldr	r3, [r7, #8]
 2284 053a 1A60     		str	r2, [r3]
 2285              	.L136:
 833:..\src/interruptions.c ****     }
 834:..\src/interruptions.c ****     
 835:..\src/interruptions.c ****     // SAFETY
 836:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2286              		.loc 1 836 0
 2287 053c 1D4B     		ldr	r3, .L154
 2288 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2289 0540 012B     		cmp	r3, #1
 2290 0542 02D1     		bne	.L138
 837:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 838:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2291              		.loc 1 838 0
 2292 0544 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 57


 2293 0546 0022     		movs	r2, #0
 2294 0548 1A60     		str	r2, [r3]
 2295              	.L138:
 839:..\src/interruptions.c ****     }      
 840:..\src/interruptions.c ****     
 841:..\src/interruptions.c ****        
 842:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2296              		.loc 1 842 0
 2297 054a 1B4B     		ldr	r3, .L154+4
 2298 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2299 0550 012B     		cmp	r3, #1
 2300 0552 2AD1     		bne	.L149
 843:..\src/interruptions.c ****         if (rest_enabled == 1){
 2301              		.loc 1 843 0
 2302 0554 194B     		ldr	r3, .L154+8
 2303 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304 0558 012B     		cmp	r3, #1
 2305 055a 03D1     		bne	.L140
 844:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 845:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2306              		.loc 1 845 0
 2307 055c 184B     		ldr	r3, .L154+12
 2308 055e 1A68     		ldr	r2, [r3]
 2309 0560 BB68     		ldr	r3, [r7, #8]
 2310 0562 1A60     		str	r2, [r3]
 2311              	.L140:
 846:..\src/interruptions.c ****         }
 847:..\src/interruptions.c ****         
 848:..\src/interruptions.c ****         if (forced_open == 1) {
 2312              		.loc 1 848 0
 2313 0564 174B     		ldr	r3, .L154+16
 2314 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2315 0568 012B     		cmp	r3, #1
 2316 056a 1ED1     		bne	.L149
 849:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 850:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2317              		.loc 1 850 0
 2318 056c 7B69     		ldr	r3, [r7, #20]
 2319 056e 002B     		cmp	r3, #0
 2320 0570 13DD     		ble	.L141
 851:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2321              		.loc 1 851 0
 2322 0572 154B     		ldr	r3, .L154+20
 2323 0574 D3F8A022 		ldr	r2, [r3, #672]
 2324 0578 134B     		ldr	r3, .L154+20
 2325 057a D3F8A032 		ldr	r3, [r3, #672]
 2326 057e 7969     		ldr	r1, [r7, #20]
 2327 0580 01FB03F1 		mul	r1, r1, r3
 2328 0584 0C4B     		ldr	r3, .L154+4
 2329 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2330 058a C3F58063 		rsb	r3, r3, #1024
 2331 058e 91FBF3F3 		sdiv	r3, r1, r3
 2332 0592 D21A     		subs	r2, r2, r3
 2333 0594 BB68     		ldr	r3, [r7, #8]
 2334 0596 1A60     		str	r2, [r3]
 852:..\src/interruptions.c ****             else {
 853:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 58


 854:..\src/interruptions.c ****                 forced_open = 0;
 855:..\src/interruptions.c ****             }
 856:..\src/interruptions.c ****         }
 857:..\src/interruptions.c ****     }
 858:..\src/interruptions.c **** }
 2335              		.loc 1 858 0
 2336 0598 07E0     		b	.L149
 2337              	.L141:
 853:..\src/interruptions.c ****                 forced_open = 0;
 2338              		.loc 1 853 0
 2339 059a 0B4B     		ldr	r3, .L154+20
 2340 059c D3F8A022 		ldr	r2, [r3, #672]
 2341 05a0 BB68     		ldr	r3, [r7, #8]
 2342 05a2 1A60     		str	r2, [r3]
 854:..\src/interruptions.c ****             }
 2343              		.loc 1 854 0
 2344 05a4 074B     		ldr	r3, .L154+16
 2345 05a6 0022     		movs	r2, #0
 2346 05a8 1A70     		strb	r2, [r3]
 2347              	.L149:
 2348              		.loc 1 858 0
 2349 05aa 00BF     		nop
 2350 05ac 2837     		adds	r7, r7, #40
 2351              		.cfi_def_cfa_offset 8
 2352 05ae BD46     		mov	sp, r7
 2353              		.cfi_def_cfa_register 13
 2354              		@ sp needed
 2355 05b0 80BD     		pop	{r7, pc}
 2356              	.L155:
 2357 05b2 00BF     		.align	2
 2358              	.L154:
 2359 05b4 00000000 		.word	battery_low_SoC
 2360 05b8 00000000 		.word	c_mem
 2361 05bc 00000000 		.word	rest_enabled
 2362 05c0 00000000 		.word	rest_pos_curr_ref
 2363 05c4 00000000 		.word	forced_open
 2364 05c8 00000000 		.word	g_mem
 2365              		.cfi_endproc
 2366              	.LFE68:
 2367              		.size	compute_reference, .-compute_reference
 2368              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2369              		.align	2
 2370              		.global	compute_SoftHand_2_motors_joystick_reference
 2371              		.thumb
 2372              		.thumb_func
 2373              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2374              	compute_SoftHand_2_motors_joystick_reference:
 2375              	.LFB69:
 859:..\src/interruptions.c **** 
 860:..\src/interruptions.c **** 
 861:..\src/interruptions.c **** //==============================================================================
 862:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 863:..\src/interruptions.c **** //==============================================================================
 864:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2376              		.loc 1 864 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 59


 2379              		@ frame_needed = 1, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 2381 0000 80B4     		push	{r7}
 2382              		.cfi_def_cfa_offset 4
 2383              		.cfi_offset 7, -4
 2384 0002 89B0     		sub	sp, sp, #36
 2385              		.cfi_def_cfa_offset 40
 2386 0004 00AF     		add	r7, sp, #0
 2387              		.cfi_def_cfa_register 7
 2388 0006 0346     		mov	r3, r0
 2389 0008 B960     		str	r1, [r7, #8]
 2390 000a 7A60     		str	r2, [r7, #4]
 2391 000c FB73     		strb	r3, [r7, #15]
 865:..\src/interruptions.c ****     
 866:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2392              		.loc 1 866 0
 2393 000e B04B     		ldr	r3, .L177
 2394 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2395 0014 062B     		cmp	r3, #6
 2396 0016 40F08581 		bne	.L175
 2397              		.loc 1 866 0 is_stmt 0 discriminator 1
 2398 001a AD4B     		ldr	r3, .L177
 2399 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2400 0020 062B     		cmp	r3, #6
 2401 0022 40F07F81 		bne	.L175
 867:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2402              		.loc 1 867 0 is_stmt 1
 2403 0026 7B68     		ldr	r3, [r7, #4]
 2404 0028 1A68     		ldr	r2, [r3]
 2405 002a BB68     		ldr	r3, [r7, #8]
 2406 002c 1A60     		str	r2, [r3]
 868:..\src/interruptions.c ****     
 869:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2407              		.loc 1 869 0
 2408 002e A94B     		ldr	r3, .L177+4
 2409 0030 1B6A     		ldr	r3, [r3, #32]
 2410 0032 B3F52F7F 		cmp	r3, #700
 2411 0036 00F3C280 		bgt	.L158
 2412              	.LBB6:
 870:..\src/interruptions.c ****              
 871:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2413              		.loc 1 871 0
 2414 003a 0023     		movs	r3, #0
 2415 003c FB61     		str	r3, [r7, #28]
 872:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2416              		.loc 1 872 0
 2417 003e 0023     		movs	r3, #0
 2418 0040 BB61     		str	r3, [r7, #24]
 873:..\src/interruptions.c ****         
 874:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2419              		.loc 1 874 0
 2420 0042 A44B     		ldr	r3, .L177+4
 2421 0044 1B6A     		ldr	r3, [r3, #32]
 2422 0046 A24A     		ldr	r2, .L177
 2423 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2424 004c 9342     		cmp	r3, r2
 2425 004e 1ADD     		ble	.L159
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 60


 875:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2426              		.loc 1 875 0
 2427 0050 A04B     		ldr	r3, .L177+4
 2428 0052 1B6A     		ldr	r3, [r3, #32]
 2429 0054 9E4A     		ldr	r2, .L177
 2430 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2431 005a 9B1A     		subs	r3, r3, r2
 2432 005c FB61     		str	r3, [r7, #28]
 876:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2433              		.loc 1 876 0
 2434 005e BB68     		ldr	r3, [r7, #8]
 2435 0060 1A68     		ldr	r2, [r3]
 2436 0062 9B4B     		ldr	r3, .L177
 2437 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2438 0068 1946     		mov	r1, r3
 2439 006a FB69     		ldr	r3, [r7, #28]
 2440 006c 03FB01F1 		mul	r1, r3, r1
 2441 0070 974B     		ldr	r3, .L177
 2442 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2443 0076 C3F58063 		rsb	r3, r3, #1024
 2444 007a 91FBF3F3 		sdiv	r3, r1, r3
 2445 007e 1A44     		add	r2, r2, r3
 2446 0080 BB68     		ldr	r3, [r7, #8]
 2447 0082 1A60     		str	r2, [r3]
 2448 0084 21E0     		b	.L160
 2449              	.L159:
 877:..\src/interruptions.c ****             }
 878:..\src/interruptions.c ****             else {
 879:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2450              		.loc 1 879 0
 2451 0086 934B     		ldr	r3, .L177+4
 2452 0088 1A6A     		ldr	r2, [r3, #32]
 2453 008a 914B     		ldr	r3, .L177
 2454 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2455 0090 5B42     		negs	r3, r3
 2456 0092 9A42     		cmp	r2, r3
 2457 0094 19DA     		bge	.L160
 880:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2458              		.loc 1 880 0
 2459 0096 8F4B     		ldr	r3, .L177+4
 2460 0098 1B6A     		ldr	r3, [r3, #32]
 2461 009a 8D4A     		ldr	r2, .L177
 2462 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2463 00a0 1344     		add	r3, r3, r2
 2464 00a2 FB61     		str	r3, [r7, #28]
 881:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2465              		.loc 1 881 0
 2466 00a4 BB68     		ldr	r3, [r7, #8]
 2467 00a6 1A68     		ldr	r2, [r3]
 2468 00a8 894B     		ldr	r3, .L177
 2469 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2470 00ae 1946     		mov	r1, r3
 2471 00b0 FB69     		ldr	r3, [r7, #28]
 2472 00b2 03FB01F1 		mul	r1, r3, r1
 2473 00b6 864B     		ldr	r3, .L177
 2474 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2475 00bc C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 61


 2476 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2477 00c4 1A44     		add	r2, r2, r3
 2478 00c6 BB68     		ldr	r3, [r7, #8]
 2479 00c8 1A60     		str	r2, [r3]
 2480              	.L160:
 882:..\src/interruptions.c ****                 }
 883:..\src/interruptions.c ****             }
 884:..\src/interruptions.c **** 
 885:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2481              		.loc 1 885 0
 2482 00ca 824B     		ldr	r3, .L177+4
 2483 00cc 5B6A     		ldr	r3, [r3, #36]
 2484 00ce 804A     		ldr	r2, .L177
 2485 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2486 00d4 9342     		cmp	r3, r2
 2487 00d6 34DD     		ble	.L161
 886:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2488              		.loc 1 886 0
 2489 00d8 7E4B     		ldr	r3, .L177+4
 2490 00da 5B6A     		ldr	r3, [r3, #36]
 2491 00dc 7C4A     		ldr	r2, .L177
 2492 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2493 00e2 9B1A     		subs	r3, r3, r2
 2494 00e4 BB61     		str	r3, [r7, #24]
 887:..\src/interruptions.c ****                 if (motor_idx == 0){
 2495              		.loc 1 887 0
 2496 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2497 00e8 002B     		cmp	r3, #0
 2498 00ea 12D1     		bne	.L162
 888:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2499              		.loc 1 888 0
 2500 00ec BB68     		ldr	r3, [r7, #8]
 2501 00ee 1A68     		ldr	r2, [r3]
 2502 00f0 774B     		ldr	r3, .L177
 2503 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2504 00f6 1946     		mov	r1, r3
 2505 00f8 BB69     		ldr	r3, [r7, #24]
 2506 00fa 03FB01F1 		mul	r1, r3, r1
 2507 00fe 744B     		ldr	r3, .L177
 2508 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2509 0104 C3F58063 		rsb	r3, r3, #1024
 2510 0108 91FBF3F3 		sdiv	r3, r1, r3
 2511 010c 1A44     		add	r2, r2, r3
 2512 010e BB68     		ldr	r3, [r7, #8]
 2513 0110 1A60     		str	r2, [r3]
 2514              	.L162:
 889:..\src/interruptions.c ****                 }
 890:..\src/interruptions.c ****                 if (motor_idx == 1){
 2515              		.loc 1 890 0
 2516 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2517 0114 012B     		cmp	r3, #1
 2518 0116 40F00581 		bne	.L175
 891:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2519              		.loc 1 891 0
 2520 011a BB68     		ldr	r3, [r7, #8]
 2521 011c 1A68     		ldr	r2, [r3]
 2522 011e 6C4B     		ldr	r3, .L177
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 62


 2523 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2524 0124 1946     		mov	r1, r3
 2525 0126 BB69     		ldr	r3, [r7, #24]
 2526 0128 03FB01F1 		mul	r1, r3, r1
 2527 012c 684B     		ldr	r3, .L177
 2528 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2529 0132 C3F58063 		rsb	r3, r3, #1024
 2530 0136 91FBF3F3 		sdiv	r3, r1, r3
 2531 013a D21A     		subs	r2, r2, r3
 2532 013c BB68     		ldr	r3, [r7, #8]
 2533 013e 1A60     		str	r2, [r3]
 2534              	.LBE6:
 892:..\src/interruptions.c ****                 }          
 893:..\src/interruptions.c ****             }
 894:..\src/interruptions.c ****             else {
 895:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 896:..\src/interruptions.c ****                     
 897:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 898:..\src/interruptions.c ****                     if (motor_idx == 0){
 899:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 900:..\src/interruptions.c ****                     }
 901:..\src/interruptions.c ****                     if (motor_idx == 1){
 902:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 903:..\src/interruptions.c ****                     }
 904:..\src/interruptions.c ****                 }
 905:..\src/interruptions.c ****             }
 906:..\src/interruptions.c ****         }
 907:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 908:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 909:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 910:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 911:..\src/interruptions.c **** 
 912:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 913:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 914:..\src/interruptions.c ****                     if (motor_idx == 1){
 915:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 916:..\src/interruptions.c ****                     }
 917:..\src/interruptions.c ****                     if (motor_idx == 0){
 918:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 919:..\src/interruptions.c ****                     }                    
 920:..\src/interruptions.c ****                 }
 921:..\src/interruptions.c ****                 else {
 922:..\src/interruptions.c ****                     if (motor_idx == 0){
 923:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 924:..\src/interruptions.c ****                     }
 925:..\src/interruptions.c ****                     if (motor_idx == 1){
 926:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 927:..\src/interruptions.c ****                     }
 928:..\src/interruptions.c ****                 }
 929:..\src/interruptions.c ****                 
 930:..\src/interruptions.c ****             }
 931:..\src/interruptions.c ****             else {
 932:..\src/interruptions.c ****                 if(pos_sum > 0) {
 933:..\src/interruptions.c ****                     if (motor_idx == 0){
 934:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 935:..\src/interruptions.c ****                     }
 936:..\src/interruptions.c ****                     if (motor_idx == 1){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 63


 937:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 938:..\src/interruptions.c ****                     }
 939:..\src/interruptions.c ****                     
 940:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 941:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 942:..\src/interruptions.c ****                     }
 943:..\src/interruptions.c ****                 }
 944:..\src/interruptions.c ****             }
 945:..\src/interruptions.c ****         }
 946:..\src/interruptions.c ****     }           
 947:..\src/interruptions.c **** }
 2535              		.loc 1 947 0
 2536 0140 F0E0     		b	.L175
 2537              	.L161:
 2538              	.LBB7:
 895:..\src/interruptions.c ****                     
 2539              		.loc 1 895 0
 2540 0142 644B     		ldr	r3, .L177+4
 2541 0144 5A6A     		ldr	r2, [r3, #36]
 2542 0146 624B     		ldr	r3, .L177
 2543 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2544 014c 5B42     		negs	r3, r3
 2545 014e 9A42     		cmp	r2, r3
 2546 0150 80F2E880 		bge	.L175
 897:..\src/interruptions.c ****                     if (motor_idx == 0){
 2547              		.loc 1 897 0
 2548 0154 5F4B     		ldr	r3, .L177+4
 2549 0156 5B6A     		ldr	r3, [r3, #36]
 2550 0158 5D4A     		ldr	r2, .L177
 2551 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2552 015e 1344     		add	r3, r3, r2
 2553 0160 BB61     		str	r3, [r7, #24]
 898:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2554              		.loc 1 898 0
 2555 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2556 0164 002B     		cmp	r3, #0
 2557 0166 12D1     		bne	.L165
 899:..\src/interruptions.c ****                     }
 2558              		.loc 1 899 0
 2559 0168 BB68     		ldr	r3, [r7, #8]
 2560 016a 1A68     		ldr	r2, [r3]
 2561 016c 584B     		ldr	r3, .L177
 2562 016e B3F8B032 		ldrh	r3, [r3, #688]
 2563 0172 1946     		mov	r1, r3
 2564 0174 BB69     		ldr	r3, [r7, #24]
 2565 0176 03FB01F1 		mul	r1, r3, r1
 2566 017a 554B     		ldr	r3, .L177
 2567 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2568 0180 C3F58063 		rsb	r3, r3, #1024
 2569 0184 91FBF3F3 		sdiv	r3, r1, r3
 2570 0188 1A44     		add	r2, r2, r3
 2571 018a BB68     		ldr	r3, [r7, #8]
 2572 018c 1A60     		str	r2, [r3]
 2573              	.L165:
 901:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2574              		.loc 1 901 0
 2575 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 64


 2576 0190 012B     		cmp	r3, #1
 2577 0192 40F0C780 		bne	.L175
 902:..\src/interruptions.c ****                     }
 2578              		.loc 1 902 0
 2579 0196 BB68     		ldr	r3, [r7, #8]
 2580 0198 1A68     		ldr	r2, [r3]
 2581 019a 4D4B     		ldr	r3, .L177
 2582 019c B3F8B032 		ldrh	r3, [r3, #688]
 2583 01a0 1946     		mov	r1, r3
 2584 01a2 BB69     		ldr	r3, [r7, #24]
 2585 01a4 03FB01F1 		mul	r1, r3, r1
 2586 01a8 494B     		ldr	r3, .L177
 2587 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2588 01ae C3F58063 		rsb	r3, r3, #1024
 2589 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2590 01b6 D21A     		subs	r2, r2, r3
 2591 01b8 BB68     		ldr	r3, [r7, #8]
 2592 01ba 1A60     		str	r2, [r3]
 2593              	.LBE7:
 2594              		.loc 1 947 0
 2595 01bc B2E0     		b	.L175
 2596              	.L158:
 2597              	.LBB8:
 909:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2598              		.loc 1 909 0
 2599 01be 444B     		ldr	r3, .L177
 2600 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2601 01c4 1946     		mov	r1, r3
 2602 01c6 444A     		ldr	r2, .L177+8
 2603 01c8 3423     		movs	r3, #52
 2604 01ca 03FB01F3 		mul	r3, r3, r1
 2605 01ce 1344     		add	r3, r3, r2
 2606 01d0 1A68     		ldr	r2, [r3]
 2607 01d2 3F4B     		ldr	r3, .L177
 2608 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2609 01d8 1846     		mov	r0, r3
 2610 01da 3F49     		ldr	r1, .L177+8
 2611 01dc 3423     		movs	r3, #52
 2612 01de 03FB00F3 		mul	r3, r3, r0
 2613 01e2 0B44     		add	r3, r3, r1
 2614 01e4 0433     		adds	r3, r3, #4
 2615 01e6 1B68     		ldr	r3, [r3]
 2616 01e8 D21A     		subs	r2, r2, r3
 2617 01ea 394B     		ldr	r3, .L177
 2618 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2619 01f0 1846     		mov	r0, r3
 2620 01f2 3749     		ldr	r1, .L177
 2621 01f4 0346     		mov	r3, r0
 2622 01f6 5B00     		lsls	r3, r3, #1
 2623 01f8 0344     		add	r3, r3, r0
 2624 01fa 1B01     		lsls	r3, r3, #4
 2625 01fc 0B44     		add	r3, r3, r1
 2626 01fe 03F29513 		addw	r3, r3, #405
 2627 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2628 0204 42FA03F3 		asr	r3, r2, r3
 2629 0208 7B61     		str	r3, [r7, #20]
 910:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 65


 2630              		.loc 1 910 0
 2631 020a 314B     		ldr	r3, .L177
 2632 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2633 0210 1946     		mov	r1, r3
 2634 0212 314A     		ldr	r2, .L177+8
 2635 0214 3423     		movs	r3, #52
 2636 0216 03FB01F3 		mul	r3, r3, r1
 2637 021a 1344     		add	r3, r3, r2
 2638 021c 1A68     		ldr	r2, [r3]
 2639 021e 2C4B     		ldr	r3, .L177
 2640 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2641 0224 1846     		mov	r0, r3
 2642 0226 2C49     		ldr	r1, .L177+8
 2643 0228 3423     		movs	r3, #52
 2644 022a 03FB00F3 		mul	r3, r3, r0
 2645 022e 0B44     		add	r3, r3, r1
 2646 0230 0433     		adds	r3, r3, #4
 2647 0232 1B68     		ldr	r3, [r3]
 2648 0234 1A44     		add	r2, r2, r3
 2649 0236 264B     		ldr	r3, .L177
 2650 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2651 023c 1846     		mov	r0, r3
 2652 023e 2449     		ldr	r1, .L177
 2653 0240 0346     		mov	r3, r0
 2654 0242 5B00     		lsls	r3, r3, #1
 2655 0244 0344     		add	r3, r3, r0
 2656 0246 1B01     		lsls	r3, r3, #4
 2657 0248 0B44     		add	r3, r3, r1
 2658 024a 03F29513 		addw	r3, r3, #405
 2659 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2660 0250 42FA03F3 		asr	r3, r2, r3
 2661 0254 3B61     		str	r3, [r7, #16]
 912:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2662              		.loc 1 912 0
 2663 0256 7B69     		ldr	r3, [r7, #20]
 2664 0258 B3F5FA7F 		cmp	r3, #500
 2665 025c 03DC     		bgt	.L166
 912:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2666              		.loc 1 912 0 is_stmt 0 discriminator 1
 2667 025e 7B69     		ldr	r3, [r7, #20]
 2668 0260 13F5FA7F 		cmn	r3, #500
 2669 0264 3ADA     		bge	.L167
 2670              	.L166:
 913:..\src/interruptions.c ****                     if (motor_idx == 1){
 2671              		.loc 1 913 0 is_stmt 1
 2672 0266 7B69     		ldr	r3, [r7, #20]
 2673 0268 002B     		cmp	r3, #0
 2674 026a 18DB     		blt	.L168
 914:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2675              		.loc 1 914 0
 2676 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2677 026e 012B     		cmp	r3, #1
 2678 0270 07D1     		bne	.L169
 915:..\src/interruptions.c ****                     }
 2679              		.loc 1 915 0
 2680 0272 BB68     		ldr	r3, [r7, #8]
 2681 0274 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 66


 2682 0276 164A     		ldr	r2, .L177
 2683 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2684 027c 1A44     		add	r2, r2, r3
 2685 027e BB68     		ldr	r3, [r7, #8]
 2686 0280 1A60     		str	r2, [r3]
 2687              	.L169:
 917:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2688              		.loc 1 917 0
 2689 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2690 0284 002B     		cmp	r3, #0
 2691 0286 4CD1     		bne	.L176
 918:..\src/interruptions.c ****                     }                    
 2692              		.loc 1 918 0
 2693 0288 BB68     		ldr	r3, [r7, #8]
 2694 028a 1B68     		ldr	r3, [r3]
 2695 028c 104A     		ldr	r2, .L177
 2696 028e B2F8B022 		ldrh	r2, [r2, #688]
 2697 0292 5208     		lsrs	r2, r2, #1
 2698 0294 92B2     		uxth	r2, r2
 2699 0296 9A1A     		subs	r2, r3, r2
 2700 0298 BB68     		ldr	r3, [r7, #8]
 2701 029a 1A60     		str	r2, [r3]
 913:..\src/interruptions.c ****                     if (motor_idx == 1){
 2702              		.loc 1 913 0
 2703 029c 41E0     		b	.L176
 2704              	.L168:
 922:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2705              		.loc 1 922 0
 2706 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2707 02a0 002B     		cmp	r3, #0
 2708 02a2 07D1     		bne	.L172
 923:..\src/interruptions.c ****                     }
 2709              		.loc 1 923 0
 2710 02a4 BB68     		ldr	r3, [r7, #8]
 2711 02a6 1B68     		ldr	r3, [r3]
 2712 02a8 094A     		ldr	r2, .L177
 2713 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2714 02ae 1A44     		add	r2, r2, r3
 2715 02b0 BB68     		ldr	r3, [r7, #8]
 2716 02b2 1A60     		str	r2, [r3]
 2717              	.L172:
 925:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2718              		.loc 1 925 0
 2719 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2720 02b6 012B     		cmp	r3, #1
 2721 02b8 33D1     		bne	.L176
 926:..\src/interruptions.c ****                     }
 2722              		.loc 1 926 0
 2723 02ba BB68     		ldr	r3, [r7, #8]
 2724 02bc 1B68     		ldr	r3, [r3]
 2725 02be 044A     		ldr	r2, .L177
 2726 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2727 02c4 5208     		lsrs	r2, r2, #1
 2728 02c6 92B2     		uxth	r2, r2
 2729 02c8 9A1A     		subs	r2, r3, r2
 2730 02ca BB68     		ldr	r3, [r7, #8]
 2731 02cc 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 67


 913:..\src/interruptions.c ****                     if (motor_idx == 1){
 2732              		.loc 1 913 0
 2733 02ce 28E0     		b	.L176
 2734              	.L178:
 2735              		.align	2
 2736              	.L177:
 2737 02d0 00000000 		.word	c_mem
 2738 02d4 00000000 		.word	g_adc_meas
 2739 02d8 00000000 		.word	g_meas
 2740              	.L167:
 932:..\src/interruptions.c ****                     if (motor_idx == 0){
 2741              		.loc 1 932 0
 2742 02dc 3B69     		ldr	r3, [r7, #16]
 2743 02de 002B     		cmp	r3, #0
 2744 02e0 20DD     		ble	.L175
 933:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2745              		.loc 1 933 0
 2746 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2747 02e4 002B     		cmp	r3, #0
 2748 02e6 08D1     		bne	.L173
 934:..\src/interruptions.c ****                     }
 2749              		.loc 1 934 0
 2750 02e8 BB68     		ldr	r3, [r7, #8]
 2751 02ea 1A68     		ldr	r2, [r3]
 2752 02ec 104B     		ldr	r3, .L179
 2753 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2754 02f2 5B00     		lsls	r3, r3, #1
 2755 02f4 D21A     		subs	r2, r2, r3
 2756 02f6 BB68     		ldr	r3, [r7, #8]
 2757 02f8 1A60     		str	r2, [r3]
 2758              	.L173:
 936:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2759              		.loc 1 936 0
 2760 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2761 02fc 012B     		cmp	r3, #1
 2762 02fe 08D1     		bne	.L174
 937:..\src/interruptions.c ****                     }
 2763              		.loc 1 937 0
 2764 0300 BB68     		ldr	r3, [r7, #8]
 2765 0302 1A68     		ldr	r2, [r3]
 2766 0304 0A4B     		ldr	r3, .L179
 2767 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2768 030a 5B00     		lsls	r3, r3, #1
 2769 030c D21A     		subs	r2, r2, r3
 2770 030e BB68     		ldr	r3, [r7, #8]
 2771 0310 1A60     		str	r2, [r3]
 2772              	.L174:
 940:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2773              		.loc 1 940 0
 2774 0312 BB68     		ldr	r3, [r7, #8]
 2775 0314 1B68     		ldr	r3, [r3]
 2776 0316 002B     		cmp	r3, #0
 2777 0318 04DA     		bge	.L175
 941:..\src/interruptions.c ****                     }
 2778              		.loc 1 941 0
 2779 031a BB68     		ldr	r3, [r7, #8]
 2780 031c 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 68


 2781 031e 1A60     		str	r2, [r3]
 2782              	.LBE8:
 2783              		.loc 1 947 0
 2784 0320 00E0     		b	.L175
 2785              	.L176:
 2786              	.LBB9:
 913:..\src/interruptions.c ****                     if (motor_idx == 1){
 2787              		.loc 1 913 0
 2788 0322 00BF     		nop
 2789              	.L175:
 2790              	.LBE9:
 2791              		.loc 1 947 0
 2792 0324 00BF     		nop
 2793 0326 2437     		adds	r7, r7, #36
 2794              		.cfi_def_cfa_offset 4
 2795 0328 BD46     		mov	sp, r7
 2796              		.cfi_def_cfa_register 13
 2797              		@ sp needed
 2798 032a 80BC     		pop	{r7}
 2799              		.cfi_restore 7
 2800              		.cfi_def_cfa_offset 0
 2801 032c 7047     		bx	lr
 2802              	.L180:
 2803 032e 00BF     		.align	2
 2804              	.L179:
 2805 0330 00000000 		.word	c_mem
 2806              		.cfi_endproc
 2807              	.LFE69:
 2808              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2809              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2810              		.align	2
 2811              		.global	compute_SoftHand_2_motors_emg_reference
 2812              		.thumb
 2813              		.thumb_func
 2814              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2815              	compute_SoftHand_2_motors_emg_reference:
 2816              	.LFB70:
 948:..\src/interruptions.c **** 
 949:..\src/interruptions.c **** 
 950:..\src/interruptions.c **** //==============================================================================
 951:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 952:..\src/interruptions.c **** //==============================================================================
 953:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 954:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2817              		.loc 1 954 0
 2818              		.cfi_startproc
 2819              		@ args = 4, pretend = 0, frame = 16
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 0000 80B5     		push	{r7, lr}
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 7, -8
 2824              		.cfi_offset 14, -4
 2825 0002 84B0     		sub	sp, sp, #16
 2826              		.cfi_def_cfa_offset 24
 2827 0004 00AF     		add	r7, sp, #0
 2828              		.cfi_def_cfa_register 7
 2829 0006 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 69


 2830 0008 7A60     		str	r2, [r7, #4]
 2831 000a 3B60     		str	r3, [r7]
 2832 000c 0346     		mov	r3, r0
 2833 000e FB73     		strb	r3, [r7, #15]
 955:..\src/interruptions.c ****     
 956:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 957:..\src/interruptions.c ****     static uint8 fsm_state;     
 958:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2834              		.loc 1 958 0
 2835 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2836 0012 002B     		cmp	r3, #0
 2837 0014 05D1     		bne	.L182
 959:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2838              		.loc 1 959 0
 2839 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2840 001a 0346     		mov	r3, r0
 2841 001c 1A46     		mov	r2, r3
 2842 001e 614B     		ldr	r3, .L197
 2843 0020 1A70     		strb	r2, [r3]
 2844              	.L182:
 960:..\src/interruptions.c ****     }
 961:..\src/interruptions.c ****        
 962:..\src/interruptions.c ****     switch (fsm_state){
 2845              		.loc 1 962 0
 2846 0022 604B     		ldr	r3, .L197
 2847 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2848 0026 032B     		cmp	r3, #3
 2849 0028 00F2B780 		bhi	.L194
 2850 002c 01A2     		adr	r2, .L185
 2851 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2852 0032 00BF     		.p2align 2
 2853              	.L185:
 2854 0034 45000000 		.word	.L184+1
 2855 0038 45000000 		.word	.L184+1
 2856 003c BF000000 		.word	.L186+1
 2857 0040 4F000000 		.word	.L187+1
 2858              		.p2align 1
 2859              	.L184:
 963:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 964:..\src/interruptions.c ****              
 965:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2860              		.loc 1 965 0
 2861 0044 7B68     		ldr	r3, [r7, #4]
 2862 0046 1A68     		ldr	r2, [r3]
 2863 0048 BB68     		ldr	r3, [r7, #8]
 2864 004a 1A60     		str	r2, [r3]
 966:..\src/interruptions.c ****     
 967:..\src/interruptions.c ****             break;
 2865              		.loc 1 967 0
 2866 004c A5E0     		b	.L183
 2867              	.L187:
 968:..\src/interruptions.c ****         
 969:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 970:..\src/interruptions.c **** 
 971:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2868              		.loc 1 971 0
 2869 004e 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 70


 2870 0050 002B     		cmp	r3, #0
 2871 0052 17DD     		ble	.L188
 2872              		.loc 1 971 0 is_stmt 0 discriminator 1
 2873 0054 3A68     		ldr	r2, [r7]
 2874 0056 BB69     		ldr	r3, [r7, #24]
 2875 0058 9A42     		cmp	r2, r3
 2876 005a 13DD     		ble	.L188
 972:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2877              		.loc 1 972 0 is_stmt 1
 2878 005c 7B68     		ldr	r3, [r7, #4]
 2879 005e 1A68     		ldr	r2, [r3]
 2880 0060 514B     		ldr	r3, .L197+4
 2881 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2882 0066 1946     		mov	r1, r3
 2883 0068 3B68     		ldr	r3, [r7]
 2884 006a 03FB01F3 		mul	r3, r3, r1
 2885 006e 9900     		lsls	r1, r3, #2
 2886 0070 4E4B     		ldr	r3, .L197+8
 2887 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2888 0076 C3F58063 		rsb	r3, r3, #1024
 2889 007a 91FBF3F3 		sdiv	r3, r1, r3
 2890 007e 1A44     		add	r2, r2, r3
 2891 0080 BB68     		ldr	r3, [r7, #8]
 2892 0082 1A60     		str	r2, [r3]
 2893              	.L188:
 973:..\src/interruptions.c ****             }
 974:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2894              		.loc 1 974 0
 2895 0084 BB69     		ldr	r3, [r7, #24]
 2896 0086 002B     		cmp	r3, #0
 2897 0088 40F38480 		ble	.L195
 2898              		.loc 1 974 0 is_stmt 0 discriminator 1
 2899 008c BA69     		ldr	r2, [r7, #24]
 2900 008e 3B68     		ldr	r3, [r7]
 2901 0090 9A42     		cmp	r2, r3
 2902 0092 7FDD     		ble	.L195
 975:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2903              		.loc 1 975 0 is_stmt 1
 2904 0094 7B68     		ldr	r3, [r7, #4]
 2905 0096 1A68     		ldr	r2, [r3]
 2906 0098 434B     		ldr	r3, .L197+4
 2907 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2908 009e 1946     		mov	r1, r3
 2909 00a0 BB69     		ldr	r3, [r7, #24]
 2910 00a2 03FB01F3 		mul	r3, r3, r1
 2911 00a6 9900     		lsls	r1, r3, #2
 2912 00a8 404B     		ldr	r3, .L197+8
 2913 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2914 00ae C3F58063 		rsb	r3, r3, #1024
 2915 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2916 00b6 D21A     		subs	r2, r2, r3
 2917 00b8 BB68     		ldr	r3, [r7, #8]
 2918 00ba 1A60     		str	r2, [r3]
 976:..\src/interruptions.c ****             }
 977:..\src/interruptions.c ****             
 978:..\src/interruptions.c ****             break;
 2919              		.loc 1 978 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 71


 2920 00bc 6AE0     		b	.L195
 2921              	.L186:
 979:..\src/interruptions.c ****             
 980:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 981:..\src/interruptions.c ****             
 982:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2922              		.loc 1 982 0
 2923 00be 3B68     		ldr	r3, [r7]
 2924 00c0 002B     		cmp	r3, #0
 2925 00c2 31DD     		ble	.L190
 2926              		.loc 1 982 0 is_stmt 0 discriminator 1
 2927 00c4 3A68     		ldr	r2, [r7]
 2928 00c6 BB69     		ldr	r3, [r7, #24]
 2929 00c8 9A42     		cmp	r2, r3
 2930 00ca 2DDD     		ble	.L190
 983:..\src/interruptions.c ****                 if (motor_idx == 0){
 2931              		.loc 1 983 0 is_stmt 1
 2932 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2933 00ce 002B     		cmp	r3, #0
 2934 00d0 13D1     		bne	.L191
 984:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2935              		.loc 1 984 0
 2936 00d2 7B68     		ldr	r3, [r7, #4]
 2937 00d4 1A68     		ldr	r2, [r3]
 2938 00d6 344B     		ldr	r3, .L197+4
 2939 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2940 00dc 1946     		mov	r1, r3
 2941 00de 3B68     		ldr	r3, [r7]
 2942 00e0 03FB01F3 		mul	r3, r3, r1
 2943 00e4 9900     		lsls	r1, r3, #2
 2944 00e6 314B     		ldr	r3, .L197+8
 2945 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2946 00ec C3F58063 		rsb	r3, r3, #1024
 2947 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2948 00f4 1A44     		add	r2, r2, r3
 2949 00f6 BB68     		ldr	r3, [r7, #8]
 2950 00f8 1A60     		str	r2, [r3]
 2951              	.L191:
 985:..\src/interruptions.c ****                 }
 986:..\src/interruptions.c ****                 if (motor_idx == 1){
 2952              		.loc 1 986 0
 2953 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2954 00fc 012B     		cmp	r3, #1
 2955 00fe 13D1     		bne	.L190
 987:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2956              		.loc 1 987 0
 2957 0100 7B68     		ldr	r3, [r7, #4]
 2958 0102 1A68     		ldr	r2, [r3]
 2959 0104 284B     		ldr	r3, .L197+4
 2960 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2961 010a 1946     		mov	r1, r3
 2962 010c 3B68     		ldr	r3, [r7]
 2963 010e 03FB01F3 		mul	r3, r3, r1
 2964 0112 9900     		lsls	r1, r3, #2
 2965 0114 254B     		ldr	r3, .L197+8
 2966 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2967 011a C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 72


 2968 011e 91FBF3F3 		sdiv	r3, r1, r3
 2969 0122 D21A     		subs	r2, r2, r3
 2970 0124 BB68     		ldr	r3, [r7, #8]
 2971 0126 1A60     		str	r2, [r3]
 2972              	.L190:
 988:..\src/interruptions.c ****                 }   
 989:..\src/interruptions.c ****             }
 990:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2973              		.loc 1 990 0
 2974 0128 BB69     		ldr	r3, [r7, #24]
 2975 012a 002B     		cmp	r3, #0
 2976 012c 34DD     		ble	.L196
 2977              		.loc 1 990 0 is_stmt 0 discriminator 1
 2978 012e BA69     		ldr	r2, [r7, #24]
 2979 0130 3B68     		ldr	r3, [r7]
 2980 0132 9A42     		cmp	r2, r3
 2981 0134 30DD     		ble	.L196
 991:..\src/interruptions.c ****                 if (motor_idx == 0){
 2982              		.loc 1 991 0 is_stmt 1
 2983 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2984 0138 002B     		cmp	r3, #0
 2985 013a 13D1     		bne	.L193
 992:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2986              		.loc 1 992 0
 2987 013c 7B68     		ldr	r3, [r7, #4]
 2988 013e 1A68     		ldr	r2, [r3]
 2989 0140 194B     		ldr	r3, .L197+4
 2990 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2991 0146 1946     		mov	r1, r3
 2992 0148 BB69     		ldr	r3, [r7, #24]
 2993 014a 03FB01F3 		mul	r3, r3, r1
 2994 014e 9900     		lsls	r1, r3, #2
 2995 0150 164B     		ldr	r3, .L197+8
 2996 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2997 0156 C3F58063 		rsb	r3, r3, #1024
 2998 015a 91FBF3F3 		sdiv	r3, r1, r3
 2999 015e D21A     		subs	r2, r2, r3
 3000 0160 BB68     		ldr	r3, [r7, #8]
 3001 0162 1A60     		str	r2, [r3]
 3002              	.L193:
 993:..\src/interruptions.c ****                 }
 994:..\src/interruptions.c ****                 if (motor_idx == 1){
 3003              		.loc 1 994 0
 3004 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3005 0166 012B     		cmp	r3, #1
 3006 0168 16D1     		bne	.L196
 995:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3007              		.loc 1 995 0
 3008 016a 7B68     		ldr	r3, [r7, #4]
 3009 016c 1A68     		ldr	r2, [r3]
 3010 016e 0E4B     		ldr	r3, .L197+4
 3011 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 3012 0174 1946     		mov	r1, r3
 3013 0176 BB69     		ldr	r3, [r7, #24]
 3014 0178 03FB01F3 		mul	r3, r3, r1
 3015 017c 9900     		lsls	r1, r3, #2
 3016 017e 0B4B     		ldr	r3, .L197+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 73


 3017 0180 B3F8F231 		ldrh	r3, [r3, #498]
 3018 0184 C3F58063 		rsb	r3, r3, #1024
 3019 0188 91FBF3F3 		sdiv	r3, r1, r3
 3020 018c 1A44     		add	r2, r2, r3
 3021 018e BB68     		ldr	r3, [r7, #8]
 3022 0190 1A60     		str	r2, [r3]
 996:..\src/interruptions.c ****                 }
 997:..\src/interruptions.c ****             }
 998:..\src/interruptions.c ****             
 999:..\src/interruptions.c ****             break;
 3023              		.loc 1 999 0
 3024 0192 01E0     		b	.L196
 3025              	.L195:
 978:..\src/interruptions.c ****             
 3026              		.loc 1 978 0
 3027 0194 00BF     		nop
 3028 0196 00E0     		b	.L194
 3029              	.L196:
 3030              		.loc 1 999 0
 3031 0198 00BF     		nop
 3032              	.L183:
 3033              	.L194:
1000:..\src/interruptions.c ****     }
1001:..\src/interruptions.c ****  
1002:..\src/interruptions.c **** }
 3034              		.loc 1 1002 0
 3035 019a 00BF     		nop
 3036 019c 1037     		adds	r7, r7, #16
 3037              		.cfi_def_cfa_offset 8
 3038 019e BD46     		mov	sp, r7
 3039              		.cfi_def_cfa_register 13
 3040              		@ sp needed
 3041 01a0 80BD     		pop	{r7, pc}
 3042              	.L198:
 3043 01a2 00BF     		.align	2
 3044              	.L197:
 3045 01a4 8E000000 		.word	fsm_state.10529
 3046 01a8 00000000 		.word	g_mem
 3047 01ac 00000000 		.word	c_mem
 3048              		.cfi_endproc
 3049              	.LFE70:
 3050              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3051              		.section	.text.motor_control_SH,"ax",%progbits
 3052              		.align	2
 3053              		.global	motor_control_SH
 3054              		.thumb
 3055              		.thumb_func
 3056              		.type	motor_control_SH, %function
 3057              	motor_control_SH:
 3058              	.LFB71:
1003:..\src/interruptions.c **** 
1004:..\src/interruptions.c **** //==============================================================================
1005:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1006:..\src/interruptions.c **** //==============================================================================
1007:..\src/interruptions.c **** void motor_control_SH() {
 3059              		.loc 1 1007 0
 3060              		.cfi_startproc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 74


 3061              		@ args = 0, pretend = 0, frame = 80
 3062              		@ frame_needed = 1, uses_anonymous_args = 0
 3063 0000 80B5     		push	{r7, lr}
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 7, -8
 3066              		.cfi_offset 14, -4
 3067 0002 94B0     		sub	sp, sp, #80
 3068              		.cfi_def_cfa_offset 88
 3069 0004 00AF     		add	r7, sp, #0
 3070              		.cfi_def_cfa_register 7
1008:..\src/interruptions.c **** 
1009:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3071              		.loc 1 1009 0
 3072 0006 0023     		movs	r3, #0
 3073 0008 FB64     		str	r3, [r7, #76]
1010:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1011:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1012:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1013:..\src/interruptions.c ****  
1014:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3074              		.loc 1 1014 0
 3075 000a 0023     		movs	r3, #0
 3076 000c 87F84730 		strb	r3, [r7, #71]
1015:..\src/interruptions.c ****     
1016:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3077              		.loc 1 1016 0
 3078 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3079 0014 1346     		mov	r3, r2
 3080 0016 DB00     		lsls	r3, r3, #3
 3081 0018 9B1A     		subs	r3, r3, r2
 3082 001a 1B01     		lsls	r3, r3, #4
 3083 001c B033     		adds	r3, r3, #176
 3084 001e 9D4A     		ldr	r2, .L260
 3085 0020 1344     		add	r3, r3, r2
 3086 0022 3B64     		str	r3, [r7, #64]
1017:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3087              		.loc 1 1017 0
 3088 0024 3B6C     		ldr	r3, [r7, #64]
 3089 0026 93F86030 		ldrb	r3, [r3, #96]
 3090 002a 87F83F30 		strb	r3, [r7, #63]
1018:..\src/interruptions.c ****     
1019:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3091              		.loc 1 1019 0
 3092 002e 3B6C     		ldr	r3, [r7, #64]
 3093 0030 1B68     		ldr	r3, [r3]
 3094 0032 BB63     		str	r3, [r7, #56]
1020:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3095              		.loc 1 1020 0
 3096 0034 3B6C     		ldr	r3, [r7, #64]
 3097 0036 5B68     		ldr	r3, [r3, #4]
 3098 0038 7B63     		str	r3, [r7, #52]
1021:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3099              		.loc 1 1021 0
 3100 003a 3B6C     		ldr	r3, [r7, #64]
 3101 003c 9B68     		ldr	r3, [r3, #8]
 3102 003e 3B63     		str	r3, [r7, #48]
1022:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 75


1023:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3103              		.loc 1 1023 0
 3104 0040 3B6C     		ldr	r3, [r7, #64]
 3105 0042 DB68     		ldr	r3, [r3, #12]
 3106 0044 FB62     		str	r3, [r7, #44]
1024:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3107              		.loc 1 1024 0
 3108 0046 3B6C     		ldr	r3, [r7, #64]
 3109 0048 1B69     		ldr	r3, [r3, #16]
 3110 004a BB62     		str	r3, [r7, #40]
1025:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3111              		.loc 1 1025 0
 3112 004c 3B6C     		ldr	r3, [r7, #64]
 3113 004e 5B69     		ldr	r3, [r3, #20]
 3114 0050 7B62     		str	r3, [r7, #36]
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3115              		.loc 1 1027 0
 3116 0052 3B6C     		ldr	r3, [r7, #64]
 3117 0054 9B69     		ldr	r3, [r3, #24]
 3118 0056 3B62     		str	r3, [r7, #32]
1028:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3119              		.loc 1 1028 0
 3120 0058 3B6C     		ldr	r3, [r7, #64]
 3121 005a DB69     		ldr	r3, [r3, #28]
 3122 005c FB61     		str	r3, [r7, #28]
1029:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3123              		.loc 1 1029 0
 3124 005e 3B6C     		ldr	r3, [r7, #64]
 3125 0060 1B6A     		ldr	r3, [r3, #32]
 3126 0062 BB61     		str	r3, [r7, #24]
1030:..\src/interruptions.c ****     
1031:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3127              		.loc 1 1031 0
 3128 0064 3B6C     		ldr	r3, [r7, #64]
 3129 0066 5B6A     		ldr	r3, [r3, #36]
 3130 0068 7B61     		str	r3, [r7, #20]
1032:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3131              		.loc 1 1032 0
 3132 006a 3B6C     		ldr	r3, [r7, #64]
 3133 006c 9B6A     		ldr	r3, [r3, #40]
 3134 006e 3B61     		str	r3, [r7, #16]
1033:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3135              		.loc 1 1033 0
 3136 0070 3B6C     		ldr	r3, [r7, #64]
 3137 0072 DB6A     		ldr	r3, [r3, #44]
 3138 0074 FB60     		str	r3, [r7, #12]
1034:..\src/interruptions.c **** 
1035:..\src/interruptions.c ****     // Static Variables
1036:..\src/interruptions.c **** 
1037:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1038:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1039:..\src/interruptions.c ****     
1040:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1041:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1042:..\src/interruptions.c ****     static int32 prev_pwm;
1043:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 76


1044:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1045:..\src/interruptions.c ****     static uint32 position_counter = 0;
1046:..\src/interruptions.c ****   
1047:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1048:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3139              		.loc 1 1048 0
 3140 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3141 007a 1B01     		lsls	r3, r3, #4
 3142 007c 864A     		ldr	r2, .L260+4
 3143 007e 9918     		adds	r1, r3, r2
 3144 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3145 0084 1B01     		lsls	r3, r3, #4
 3146 0086 854A     		ldr	r2, .L260+8
 3147 0088 1A44     		add	r2, r2, r3
 3148 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3149 008e 1846     		mov	r0, r3
 3150 0090 FFF7FEFF 		bl	compute_reference
1049:..\src/interruptions.c ****      
1050:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3151              		.loc 1 1050 0
 3152 0094 3B6C     		ldr	r3, [r7, #64]
 3153 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3154 009a 032B     		cmp	r3, #3
 3155 009c 00F2F781 		bhi	.L200
 3156 00a0 01A2     		adr	r2, .L202
 3157 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3158 00a6 00BF     		.p2align 2
 3159              	.L202:
 3160 00a8 55020000 		.word	.L201+1
 3161 00ac 49040000 		.word	.L203+1
 3162 00b0 3B030000 		.word	.L204+1
 3163 00b4 B9000000 		.word	.L205+1
 3164              		.p2align 1
 3165              	.L205:
1051:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1052:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1053:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3166              		.loc 1 1053 0
 3167 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3168 00bc 764A     		ldr	r2, .L260+4
 3169 00be 1B01     		lsls	r3, r3, #4
 3170 00c0 1344     		add	r3, r3, r2
 3171 00c2 1A68     		ldr	r2, [r3]
 3172 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3173 00c8 7549     		ldr	r1, .L260+12
 3174 00ca 3420     		movs	r0, #52
 3175 00cc 00FB03F3 		mul	r3, r0, r3
 3176 00d0 0B44     		add	r3, r3, r1
 3177 00d2 1B68     		ldr	r3, [r3]
 3178 00d4 D31A     		subs	r3, r2, r3
 3179 00d6 BB60     		str	r3, [r7, #8]
1054:..\src/interruptions.c **** 
1055:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3180              		.loc 1 1055 0
 3181 00d8 724B     		ldr	r3, .L260+16
 3182 00da 1A68     		ldr	r2, [r3]
 3183 00dc BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 77


 3184 00de 1344     		add	r3, r3, r2
 3185 00e0 704A     		ldr	r2, .L260+16
 3186 00e2 1360     		str	r3, [r2]
1056:..\src/interruptions.c **** 
1057:..\src/interruptions.c ****             // error_sum saturation
1058:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3187              		.loc 1 1058 0
 3188 00e4 6F4B     		ldr	r3, .L260+16
 3189 00e6 1B68     		ldr	r3, [r3]
 3190 00e8 6F4A     		ldr	r2, .L260+20
 3191 00ea 9342     		cmp	r3, r2
 3192 00ec 03DD     		ble	.L206
1059:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3193              		.loc 1 1059 0
 3194 00ee 6D4B     		ldr	r3, .L260+16
 3195 00f0 6D4A     		ldr	r2, .L260+20
 3196 00f2 1A60     		str	r2, [r3]
 3197 00f4 07E0     		b	.L207
 3198              	.L206:
1060:..\src/interruptions.c ****             else {
1061:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3199              		.loc 1 1061 0
 3200 00f6 6B4B     		ldr	r3, .L260+16
 3201 00f8 1B68     		ldr	r3, [r3]
 3202 00fa 6C4A     		ldr	r2, .L260+24
 3203 00fc 9342     		cmp	r3, r2
 3204 00fe 02DA     		bge	.L207
1062:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3205              		.loc 1 1062 0
 3206 0100 684B     		ldr	r3, .L260+16
 3207 0102 6A4A     		ldr	r2, .L260+24
 3208 0104 1A60     		str	r2, [r3]
 3209              	.L207:
1063:..\src/interruptions.c ****             }
1064:..\src/interruptions.c ****             
1065:..\src/interruptions.c ****             // ------ position PID control ------
1066:..\src/interruptions.c **** 
1067:..\src/interruptions.c ****             i_ref = 0;
 3210              		.loc 1 1067 0
 3211 0106 0023     		movs	r3, #0
 3212 0108 BB64     		str	r3, [r7, #72]
1068:..\src/interruptions.c ****             
1069:..\src/interruptions.c ****             // Proportional
1070:..\src/interruptions.c ****             if (k_p_dl != 0)
 3213              		.loc 1 1070 0
 3214 010a 3B6A     		ldr	r3, [r7, #32]
 3215 010c 002B     		cmp	r3, #0
 3216 010e 07D0     		beq	.L208
1071:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3217              		.loc 1 1071 0
 3218 0110 3B6A     		ldr	r3, [r7, #32]
 3219 0112 BA68     		ldr	r2, [r7, #8]
 3220 0114 02FB03F3 		mul	r3, r2, r3
 3221 0118 1B14     		asrs	r3, r3, #16
 3222 011a BA6C     		ldr	r2, [r7, #72]
 3223 011c 1344     		add	r3, r3, r2
 3224 011e BB64     		str	r3, [r7, #72]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 78


 3225              	.L208:
1072:..\src/interruptions.c **** 
1073:..\src/interruptions.c ****             // Integral
1074:..\src/interruptions.c ****             if (k_i_dl != 0)
 3226              		.loc 1 1074 0
 3227 0120 FB69     		ldr	r3, [r7, #28]
 3228 0122 002B     		cmp	r3, #0
 3229 0124 08D0     		beq	.L209
1075:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3230              		.loc 1 1075 0
 3231 0126 5F4B     		ldr	r3, .L260+16
 3232 0128 1B68     		ldr	r3, [r3]
 3233 012a FA69     		ldr	r2, [r7, #28]
 3234 012c 02FB03F3 		mul	r3, r2, r3
 3235 0130 1B14     		asrs	r3, r3, #16
 3236 0132 BA6C     		ldr	r2, [r7, #72]
 3237 0134 1344     		add	r3, r3, r2
 3238 0136 BB64     		str	r3, [r7, #72]
 3239              	.L209:
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****             // Derivative
1078:..\src/interruptions.c ****             if (k_d_dl != 0)
 3240              		.loc 1 1078 0
 3241 0138 BB69     		ldr	r3, [r7, #24]
 3242 013a 002B     		cmp	r3, #0
 3243 013c 0AD0     		beq	.L210
1079:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3244              		.loc 1 1079 0
 3245 013e 5C4B     		ldr	r3, .L260+28
 3246 0140 1B68     		ldr	r3, [r3]
 3247 0142 BA68     		ldr	r2, [r7, #8]
 3248 0144 D31A     		subs	r3, r2, r3
 3249 0146 BA69     		ldr	r2, [r7, #24]
 3250 0148 02FB03F3 		mul	r3, r2, r3
 3251 014c 1B14     		asrs	r3, r3, #16
 3252 014e BA6C     		ldr	r2, [r7, #72]
 3253 0150 1344     		add	r3, r3, r2
 3254 0152 BB64     		str	r3, [r7, #72]
 3255              	.L210:
1080:..\src/interruptions.c ****                         
1081:..\src/interruptions.c ****             // Update previous position
1082:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3256              		.loc 1 1082 0
 3257 0154 564A     		ldr	r2, .L260+28
 3258 0156 BB68     		ldr	r3, [r7, #8]
 3259 0158 1360     		str	r3, [r2]
1083:..\src/interruptions.c **** 
1084:..\src/interruptions.c ****             // motor direction depends on i_ref
1085:..\src/interruptions.c ****             if (i_ref >= 0)
 3260              		.loc 1 1085 0
 3261 015a BB6C     		ldr	r3, [r7, #72]
 3262 015c 002B     		cmp	r3, #0
 3263 015e 03DB     		blt	.L211
1086:..\src/interruptions.c ****                 motor_dir = TRUE;
 3264              		.loc 1 1086 0
 3265 0160 544B     		ldr	r3, .L260+32
 3266 0162 0122     		movs	r2, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 79


 3267 0164 1A70     		strb	r2, [r3]
 3268 0166 02E0     		b	.L212
 3269              	.L211:
1087:..\src/interruptions.c ****             else
1088:..\src/interruptions.c ****                 motor_dir = FALSE;
 3270              		.loc 1 1088 0
 3271 0168 524B     		ldr	r3, .L260+32
 3272 016a 0022     		movs	r2, #0
 3273 016c 1A70     		strb	r2, [r3]
 3274              	.L212:
1089:..\src/interruptions.c **** 
1090:..\src/interruptions.c ****             // saturate max current
1091:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3275              		.loc 1 1091 0
 3276 016e 3B6C     		ldr	r3, [r7, #64]
 3277 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3278 0174 1A46     		mov	r2, r3
 3279 0176 BB6C     		ldr	r3, [r7, #72]
 3280 0178 9A42     		cmp	r2, r3
 3281 017a 04DA     		bge	.L213
1092:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3282              		.loc 1 1092 0
 3283 017c 3B6C     		ldr	r3, [r7, #64]
 3284 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3285 0182 BB64     		str	r3, [r7, #72]
 3286 0184 0BE0     		b	.L214
 3287              	.L213:
1093:..\src/interruptions.c ****             else {
1094:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3288              		.loc 1 1094 0
 3289 0186 3B6C     		ldr	r3, [r7, #64]
 3290 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3291 018c 5A42     		negs	r2, r3
 3292 018e BB6C     		ldr	r3, [r7, #72]
 3293 0190 9A42     		cmp	r2, r3
 3294 0192 04DD     		ble	.L214
1095:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3295              		.loc 1 1095 0
 3296 0194 3B6C     		ldr	r3, [r7, #64]
 3297 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3298 019a 5B42     		negs	r3, r3
 3299 019c BB64     		str	r3, [r7, #72]
 3300              	.L214:
1096:..\src/interruptions.c ****         	}
1097:..\src/interruptions.c **** 
1098:..\src/interruptions.c ****             // current error and curr error sum
1099:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3301              		.loc 1 1099 0
 3302 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3303 01a2 3F4A     		ldr	r2, .L260+12
 3304 01a4 3421     		movs	r1, #52
 3305 01a6 01FB03F3 		mul	r3, r1, r3
 3306 01aa 1344     		add	r3, r3, r2
 3307 01ac 0C33     		adds	r3, r3, #12
 3308 01ae 1B68     		ldr	r3, [r3]
 3309 01b0 BA6C     		ldr	r2, [r7, #72]
 3310 01b2 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 80


 3311 01b4 7B60     		str	r3, [r7, #4]
1100:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3312              		.loc 1 1100 0
 3313 01b6 404B     		ldr	r3, .L260+36
 3314 01b8 1A68     		ldr	r2, [r3]
 3315 01ba 7B68     		ldr	r3, [r7, #4]
 3316 01bc 1344     		add	r3, r3, r2
 3317 01be 3E4A     		ldr	r2, .L260+36
 3318 01c0 1360     		str	r3, [r2]
1101:..\src/interruptions.c ****             
1102:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3319              		.loc 1 1102 0
 3320 01c2 3D4B     		ldr	r3, .L260+36
 3321 01c4 1B68     		ldr	r3, [r3]
 3322 01c6 3D4A     		ldr	r2, .L260+40
 3323 01c8 9342     		cmp	r3, r2
 3324 01ca 03DD     		ble	.L215
1103:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3325              		.loc 1 1103 0
 3326 01cc 3A4B     		ldr	r3, .L260+36
 3327 01ce 3B4A     		ldr	r2, .L260+40
 3328 01d0 1A60     		str	r2, [r3]
 3329 01d2 07E0     		b	.L216
 3330              	.L215:
1104:..\src/interruptions.c ****             else {
1105:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3331              		.loc 1 1105 0
 3332 01d4 384B     		ldr	r3, .L260+36
 3333 01d6 1B68     		ldr	r3, [r3]
 3334 01d8 394A     		ldr	r2, .L260+44
 3335 01da 9342     		cmp	r3, r2
 3336 01dc 02DA     		bge	.L216
1106:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3337              		.loc 1 1106 0
 3338 01de 364B     		ldr	r3, .L260+36
 3339 01e0 374A     		ldr	r2, .L260+44
 3340 01e2 1A60     		str	r2, [r3]
 3341              	.L216:
1107:..\src/interruptions.c ****             }
1108:..\src/interruptions.c **** 
1109:..\src/interruptions.c ****             // ----- current PID control -----
1110:..\src/interruptions.c **** 
1111:..\src/interruptions.c ****             pwm_input = 0;
 3342              		.loc 1 1111 0
 3343 01e4 0023     		movs	r3, #0
 3344 01e6 FB64     		str	r3, [r7, #76]
1112:..\src/interruptions.c **** 
1113:..\src/interruptions.c ****             // Proportional
1114:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3345              		.loc 1 1114 0
 3346 01e8 7B69     		ldr	r3, [r7, #20]
 3347 01ea 002B     		cmp	r3, #0
 3348 01ec 07D0     		beq	.L217
1115:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3349              		.loc 1 1115 0
 3350 01ee 7B69     		ldr	r3, [r7, #20]
 3351 01f0 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 81


 3352 01f2 02FB03F3 		mul	r3, r2, r3
 3353 01f6 1B14     		asrs	r3, r3, #16
 3354 01f8 FA6C     		ldr	r2, [r7, #76]
 3355 01fa 1344     		add	r3, r3, r2
 3356 01fc FB64     		str	r3, [r7, #76]
 3357              	.L217:
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****             // Integral
1118:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3358              		.loc 1 1118 0
 3359 01fe 3B69     		ldr	r3, [r7, #16]
 3360 0200 002B     		cmp	r3, #0
 3361 0202 08D0     		beq	.L218
1119:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3362              		.loc 1 1119 0
 3363 0204 2C4B     		ldr	r3, .L260+36
 3364 0206 1B68     		ldr	r3, [r3]
 3365 0208 3A69     		ldr	r2, [r7, #16]
 3366 020a 02FB03F3 		mul	r3, r2, r3
 3367 020e 1B14     		asrs	r3, r3, #16
 3368 0210 FA6C     		ldr	r2, [r7, #76]
 3369 0212 1344     		add	r3, r3, r2
 3370 0214 FB64     		str	r3, [r7, #76]
 3371              	.L218:
1120:..\src/interruptions.c **** 
1121:..\src/interruptions.c ****             // Derivative
1122:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3372              		.loc 1 1122 0
 3373 0216 FB68     		ldr	r3, [r7, #12]
 3374 0218 002B     		cmp	r3, #0
 3375 021a 0AD0     		beq	.L219
1123:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3376              		.loc 1 1123 0
 3377 021c 294B     		ldr	r3, .L260+48
 3378 021e 1B68     		ldr	r3, [r3]
 3379 0220 7A68     		ldr	r2, [r7, #4]
 3380 0222 D31A     		subs	r3, r2, r3
 3381 0224 FA68     		ldr	r2, [r7, #12]
 3382 0226 02FB03F3 		mul	r3, r2, r3
 3383 022a 1B14     		asrs	r3, r3, #16
 3384 022c FA6C     		ldr	r2, [r7, #76]
 3385 022e 1344     		add	r3, r3, r2
 3386 0230 FB64     		str	r3, [r7, #76]
 3387              	.L219:
1124:..\src/interruptions.c **** 
1125:..\src/interruptions.c ****             // pwm_input saturation
1126:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3388              		.loc 1 1126 0
 3389 0232 FB6C     		ldr	r3, [r7, #76]
 3390 0234 13F1640F 		cmn	r3, #100
 3391 0238 03DA     		bge	.L220
1127:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3392              		.loc 1 1127 0
 3393 023a 6FF06303 		mvn	r3, #99
 3394 023e FB64     		str	r3, [r7, #76]
 3395 0240 04E0     		b	.L221
 3396              	.L220:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 82


1128:..\src/interruptions.c ****             else {
1129:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3397              		.loc 1 1129 0
 3398 0242 FB6C     		ldr	r3, [r7, #76]
 3399 0244 642B     		cmp	r3, #100
 3400 0246 01DD     		ble	.L221
1130:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3401              		.loc 1 1130 0
 3402 0248 6423     		movs	r3, #100
 3403 024a FB64     		str	r3, [r7, #76]
 3404              	.L221:
1131:..\src/interruptions.c ****             }
1132:..\src/interruptions.c **** 
1133:..\src/interruptions.c ****             // Update previous current
1134:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3405              		.loc 1 1134 0
 3406 024c 1D4A     		ldr	r2, .L260+48
 3407 024e 7B68     		ldr	r3, [r7, #4]
 3408 0250 1360     		str	r3, [r2]
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****         break;
 3409              		.loc 1 1136 0
 3410 0252 1CE1     		b	.L200
 3411              	.L201:
1137:..\src/interruptions.c **** 
1138:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1139:..\src/interruptions.c ****         case CONTROL_ANGLE:
1140:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3412              		.loc 1 1140 0
 3413 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3414 0258 0F4A     		ldr	r2, .L260+4
 3415 025a 1B01     		lsls	r3, r3, #4
 3416 025c 1344     		add	r3, r3, r2
 3417 025e 1A68     		ldr	r2, [r3]
 3418 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3419 0264 0E49     		ldr	r1, .L260+12
 3420 0266 3420     		movs	r0, #52
 3421 0268 00FB03F3 		mul	r3, r0, r3
 3422 026c 0B44     		add	r3, r3, r1
 3423 026e 1B68     		ldr	r3, [r3]
 3424 0270 D31A     		subs	r3, r2, r3
 3425 0272 BB60     		str	r3, [r7, #8]
1141:..\src/interruptions.c **** 
1142:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3426              		.loc 1 1142 0
 3427 0274 0B4B     		ldr	r3, .L260+16
 3428 0276 1A68     		ldr	r2, [r3]
 3429 0278 BB68     		ldr	r3, [r7, #8]
 3430 027a 1344     		add	r3, r3, r2
 3431 027c 094A     		ldr	r2, .L260+16
 3432 027e 1360     		str	r3, [r2]
1143:..\src/interruptions.c **** 
1144:..\src/interruptions.c ****             // anti-windup (for integral control)
1145:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3433              		.loc 1 1145 0
 3434 0280 084B     		ldr	r3, .L260+16
 3435 0282 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 83


 3436 0284 B3F57A7F 		cmp	r3, #1000
 3437 0288 1EDD     		ble	.L222
1146:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3438              		.loc 1 1146 0
 3439 028a 064B     		ldr	r3, .L260+16
 3440 028c 4FF47A72 		mov	r2, #1000
 3441 0290 1A60     		str	r2, [r3]
 3442 0292 21E0     		b	.L223
 3443              	.L261:
 3444              		.align	2
 3445              	.L260:
 3446 0294 00000000 		.word	c_mem
 3447 0298 00000000 		.word	g_ref
 3448 029c 00000000 		.word	g_refOld
 3449 02a0 00000000 		.word	g_meas
 3450 02a4 90000000 		.word	pos_error_sum.10556
 3451 02a8 80F0FA02 		.word	50000000
 3452 02ac 800F05FD 		.word	-50000000
 3453 02b0 94000000 		.word	prev_pos_err.10558
 3454 02b4 98000000 		.word	motor_dir.10561
 3455 02b8 9C000000 		.word	curr_error_sum.10557
 3456 02bc A0860100 		.word	100000
 3457 02c0 6079FEFF 		.word	-100000
 3458 02c4 A0000000 		.word	prev_curr_err.10559
 3459              	.L222:
1147:..\src/interruptions.c ****             else {
1148:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3460              		.loc 1 1148 0
 3461 02c8 9D4B     		ldr	r3, .L262
 3462 02ca 1B68     		ldr	r3, [r3]
 3463 02cc 13F57A7F 		cmn	r3, #1000
 3464 02d0 02DA     		bge	.L223
1149:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3465              		.loc 1 1149 0
 3466 02d2 9B4B     		ldr	r3, .L262
 3467 02d4 9B4A     		ldr	r2, .L262+4
 3468 02d6 1A60     		str	r2, [r3]
 3469              	.L223:
1150:..\src/interruptions.c ****             }
1151:..\src/interruptions.c **** 
1152:..\src/interruptions.c ****             // Proportional
1153:..\src/interruptions.c ****             if (k_p != 0) 
 3470              		.loc 1 1153 0
 3471 02d8 BB6B     		ldr	r3, [r7, #56]
 3472 02da 002B     		cmp	r3, #0
 3473 02dc 05D0     		beq	.L224
1154:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3474              		.loc 1 1154 0
 3475 02de BB6B     		ldr	r3, [r7, #56]
 3476 02e0 BA68     		ldr	r2, [r7, #8]
 3477 02e2 02FB03F3 		mul	r3, r2, r3
 3478 02e6 1B14     		asrs	r3, r3, #16
 3479 02e8 FB64     		str	r3, [r7, #76]
 3480              	.L224:
1155:..\src/interruptions.c ****             
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****             // Integral
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 84


1158:..\src/interruptions.c ****             if (k_i != 0) 
 3481              		.loc 1 1158 0
 3482 02ea 7B6B     		ldr	r3, [r7, #52]
 3483 02ec 002B     		cmp	r3, #0
 3484 02ee 08D0     		beq	.L225
1159:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3485              		.loc 1 1159 0
 3486 02f0 934B     		ldr	r3, .L262
 3487 02f2 1B68     		ldr	r3, [r3]
 3488 02f4 7A6B     		ldr	r2, [r7, #52]
 3489 02f6 02FB03F3 		mul	r3, r2, r3
 3490 02fa 1B14     		asrs	r3, r3, #16
 3491 02fc FA6C     		ldr	r2, [r7, #76]
 3492 02fe 1344     		add	r3, r3, r2
 3493 0300 FB64     		str	r3, [r7, #76]
 3494              	.L225:
1160:..\src/interruptions.c ****             
1161:..\src/interruptions.c **** 
1162:..\src/interruptions.c ****             // Derivative
1163:..\src/interruptions.c ****             if (k_d != 0) 
 3495              		.loc 1 1163 0
 3496 0302 3B6B     		ldr	r3, [r7, #48]
 3497 0304 002B     		cmp	r3, #0
 3498 0306 0AD0     		beq	.L226
1164:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3499              		.loc 1 1164 0
 3500 0308 8F4B     		ldr	r3, .L262+8
 3501 030a 1B68     		ldr	r3, [r3]
 3502 030c BA68     		ldr	r2, [r7, #8]
 3503 030e D31A     		subs	r3, r2, r3
 3504 0310 3A6B     		ldr	r2, [r7, #48]
 3505 0312 02FB03F3 		mul	r3, r2, r3
 3506 0316 1B14     		asrs	r3, r3, #16
 3507 0318 FA6C     		ldr	r2, [r7, #76]
 3508 031a 1344     		add	r3, r3, r2
 3509 031c FB64     		str	r3, [r7, #76]
 3510              	.L226:
1165:..\src/interruptions.c ****             
1166:..\src/interruptions.c **** 
1167:..\src/interruptions.c ****             // Update measure
1168:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3511              		.loc 1 1168 0
 3512 031e 8A4A     		ldr	r2, .L262+8
 3513 0320 BB68     		ldr	r3, [r7, #8]
 3514 0322 1360     		str	r3, [r2]
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****             if (pwm_input > 0)
 3515              		.loc 1 1170 0
 3516 0324 FB6C     		ldr	r3, [r7, #76]
 3517 0326 002B     		cmp	r3, #0
 3518 0328 03DD     		ble	.L227
1171:..\src/interruptions.c ****                 motor_dir = TRUE;
 3519              		.loc 1 1171 0
 3520 032a 884B     		ldr	r3, .L262+12
 3521 032c 0122     		movs	r2, #1
 3522 032e 1A70     		strb	r2, [r3]
1172:..\src/interruptions.c ****             else
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 85


1173:..\src/interruptions.c ****                 motor_dir = FALSE;
1174:..\src/interruptions.c **** 
1175:..\src/interruptions.c ****         break;
 3523              		.loc 1 1175 0
 3524 0330 ADE0     		b	.L200
 3525              	.L227:
1173:..\src/interruptions.c **** 
 3526              		.loc 1 1173 0
 3527 0332 864B     		ldr	r3, .L262+12
 3528 0334 0022     		movs	r2, #0
 3529 0336 1A70     		strb	r2, [r3]
 3530              		.loc 1 1175 0
 3531 0338 A9E0     		b	.L200
 3532              	.L204:
1176:..\src/interruptions.c **** 
1177:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1178:..\src/interruptions.c ****         case CONTROL_CURRENT:
1179:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3533              		.loc 1 1179 0
 3534 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3535 033e 844A     		ldr	r2, .L262+16
 3536 0340 1B01     		lsls	r3, r3, #4
 3537 0342 1344     		add	r3, r3, r2
 3538 0344 0C33     		adds	r3, r3, #12
 3539 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3540 0348 002B     		cmp	r3, #0
 3541 034a 00F09D80 		beq	.L258
 3542              		.loc 1 1179 0 is_stmt 0 discriminator 1
 3543 034e 814B     		ldr	r3, .L262+20
 3544 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3545 0352 002B     		cmp	r3, #0
 3546 0354 00F09880 		beq	.L258
1180:..\src/interruptions.c ****                 
1181:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3547              		.loc 1 1181 0 is_stmt 1
 3548 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3549 035c 7C4A     		ldr	r2, .L262+16
 3550 035e 1B01     		lsls	r3, r3, #4
 3551 0360 1344     		add	r3, r3, r2
 3552 0362 0433     		adds	r3, r3, #4
 3553 0364 1B68     		ldr	r3, [r3]
 3554 0366 BB64     		str	r3, [r7, #72]
1182:..\src/interruptions.c **** 
1183:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3555              		.loc 1 1183 0
 3556 0368 3B6C     		ldr	r3, [r7, #64]
 3557 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3558 036e 1A46     		mov	r2, r3
 3559 0370 BB6C     		ldr	r3, [r7, #72]
 3560 0372 9A42     		cmp	r2, r3
 3561 0374 04DA     		bge	.L230
1184:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3562              		.loc 1 1184 0
 3563 0376 3B6C     		ldr	r3, [r7, #64]
 3564 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3565 037c BB64     		str	r3, [r7, #72]
 3566 037e 0BE0     		b	.L231
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 86


 3567              	.L230:
1185:..\src/interruptions.c ****                 else {
1186:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3568              		.loc 1 1186 0
 3569 0380 3B6C     		ldr	r3, [r7, #64]
 3570 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3571 0386 5A42     		negs	r2, r3
 3572 0388 BB6C     		ldr	r3, [r7, #72]
 3573 038a 9A42     		cmp	r2, r3
 3574 038c 04DD     		ble	.L231
1187:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3575              		.loc 1 1187 0
 3576 038e 3B6C     		ldr	r3, [r7, #64]
 3577 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3578 0394 5B42     		negs	r3, r3
 3579 0396 BB64     		str	r3, [r7, #72]
 3580              	.L231:
1188:..\src/interruptions.c ****                 }
1189:..\src/interruptions.c ****                 
1190:..\src/interruptions.c ****                 // current error
1191:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3581              		.loc 1 1191 0
 3582 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3583 039c 6E4A     		ldr	r2, .L262+24
 3584 039e 3421     		movs	r1, #52
 3585 03a0 01FB03F3 		mul	r3, r1, r3
 3586 03a4 1344     		add	r3, r3, r2
 3587 03a6 0C33     		adds	r3, r3, #12
 3588 03a8 1B68     		ldr	r3, [r3]
 3589 03aa BA6C     		ldr	r2, [r7, #72]
 3590 03ac D31A     		subs	r3, r2, r3
 3591 03ae 7B60     		str	r3, [r7, #4]
1192:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3592              		.loc 1 1192 0
 3593 03b0 6A4B     		ldr	r3, .L262+28
 3594 03b2 1A68     		ldr	r2, [r3]
 3595 03b4 7B68     		ldr	r3, [r7, #4]
 3596 03b6 1344     		add	r3, r3, r2
 3597 03b8 684A     		ldr	r2, .L262+28
 3598 03ba 1360     		str	r3, [r2]
1193:..\src/interruptions.c ****                 
1194:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3599              		.loc 1 1194 0
 3600 03bc 674B     		ldr	r3, .L262+28
 3601 03be 1B68     		ldr	r3, [r3]
 3602 03c0 674A     		ldr	r2, .L262+32
 3603 03c2 9342     		cmp	r3, r2
 3604 03c4 03DD     		ble	.L232
1195:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3605              		.loc 1 1195 0
 3606 03c6 654B     		ldr	r3, .L262+28
 3607 03c8 654A     		ldr	r2, .L262+32
 3608 03ca 1A60     		str	r2, [r3]
 3609 03cc 07E0     		b	.L233
 3610              	.L232:
1196:..\src/interruptions.c ****                 else {
1197:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 87


 3611              		.loc 1 1197 0
 3612 03ce 634B     		ldr	r3, .L262+28
 3613 03d0 1B68     		ldr	r3, [r3]
 3614 03d2 644A     		ldr	r2, .L262+36
 3615 03d4 9342     		cmp	r3, r2
 3616 03d6 02DA     		bge	.L233
1198:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3617              		.loc 1 1198 0
 3618 03d8 604B     		ldr	r3, .L262+28
 3619 03da 624A     		ldr	r2, .L262+36
 3620 03dc 1A60     		str	r2, [r3]
 3621              	.L233:
1199:..\src/interruptions.c ****                 }
1200:..\src/interruptions.c **** 
1201:..\src/interruptions.c ****                 pwm_input = 0;
 3622              		.loc 1 1201 0
 3623 03de 0023     		movs	r3, #0
 3624 03e0 FB64     		str	r3, [r7, #76]
1202:..\src/interruptions.c **** 
1203:..\src/interruptions.c ****                 // Proportional
1204:..\src/interruptions.c ****                 if (k_p_c != 0)
 3625              		.loc 1 1204 0
 3626 03e2 FB6A     		ldr	r3, [r7, #44]
 3627 03e4 002B     		cmp	r3, #0
 3628 03e6 07D0     		beq	.L234
1205:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3629              		.loc 1 1205 0
 3630 03e8 FB6A     		ldr	r3, [r7, #44]
 3631 03ea 7A68     		ldr	r2, [r7, #4]
 3632 03ec 02FB03F3 		mul	r3, r2, r3
 3633 03f0 1B14     		asrs	r3, r3, #16
 3634 03f2 FA6C     		ldr	r2, [r7, #76]
 3635 03f4 1344     		add	r3, r3, r2
 3636 03f6 FB64     		str	r3, [r7, #76]
 3637              	.L234:
1206:..\src/interruptions.c **** 
1207:..\src/interruptions.c ****                 // Integral
1208:..\src/interruptions.c ****                 if (k_i_c != 0)
 3638              		.loc 1 1208 0
 3639 03f8 BB6A     		ldr	r3, [r7, #40]
 3640 03fa 002B     		cmp	r3, #0
 3641 03fc 08D0     		beq	.L235
1209:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3642              		.loc 1 1209 0
 3643 03fe 574B     		ldr	r3, .L262+28
 3644 0400 1B68     		ldr	r3, [r3]
 3645 0402 BA6A     		ldr	r2, [r7, #40]
 3646 0404 02FB03F3 		mul	r3, r2, r3
 3647 0408 1B14     		asrs	r3, r3, #16
 3648 040a FA6C     		ldr	r2, [r7, #76]
 3649 040c 1344     		add	r3, r3, r2
 3650 040e FB64     		str	r3, [r7, #76]
 3651              	.L235:
1210:..\src/interruptions.c **** 
1211:..\src/interruptions.c ****                 // Derivative
1212:..\src/interruptions.c ****                 if (k_d_c != 0)
 3652              		.loc 1 1212 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 88


 3653 0410 7B6A     		ldr	r3, [r7, #36]
 3654 0412 002B     		cmp	r3, #0
 3655 0414 0AD0     		beq	.L236
1213:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3656              		.loc 1 1213 0
 3657 0416 544B     		ldr	r3, .L262+40
 3658 0418 1B68     		ldr	r3, [r3]
 3659 041a 7A68     		ldr	r2, [r7, #4]
 3660 041c D31A     		subs	r3, r2, r3
 3661 041e 7A6A     		ldr	r2, [r7, #36]
 3662 0420 02FB03F3 		mul	r3, r2, r3
 3663 0424 1B14     		asrs	r3, r3, #16
 3664 0426 FA6C     		ldr	r2, [r7, #76]
 3665 0428 1344     		add	r3, r3, r2
 3666 042a FB64     		str	r3, [r7, #76]
 3667              	.L236:
1214:..\src/interruptions.c ****                 
1215:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3668              		.loc 1 1215 0
 3669 042c 4E4A     		ldr	r2, .L262+40
 3670 042e 7B68     		ldr	r3, [r7, #4]
 3671 0430 1360     		str	r3, [r2]
1216:..\src/interruptions.c ****                 
1217:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3672              		.loc 1 1217 0
 3673 0432 FB6C     		ldr	r3, [r7, #76]
 3674 0434 002B     		cmp	r3, #0
 3675 0436 03DB     		blt	.L237
1218:..\src/interruptions.c ****                     motor_dir = TRUE;
 3676              		.loc 1 1218 0
 3677 0438 444B     		ldr	r3, .L262+12
 3678 043a 0122     		movs	r2, #1
 3679 043c 1A70     		strb	r2, [r3]
1219:..\src/interruptions.c ****                 else
1220:..\src/interruptions.c ****                     motor_dir = FALSE;
1221:..\src/interruptions.c ****             }
1222:..\src/interruptions.c ****         break;
 3680              		.loc 1 1222 0
 3681 043e 23E0     		b	.L258
 3682              	.L237:
1220:..\src/interruptions.c ****             }
 3683              		.loc 1 1220 0
 3684 0440 424B     		ldr	r3, .L262+12
 3685 0442 0022     		movs	r2, #0
 3686 0444 1A70     		strb	r2, [r3]
 3687              		.loc 1 1222 0
 3688 0446 1FE0     		b	.L258
 3689              	.L203:
1223:..\src/interruptions.c ****         
1224:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1225:..\src/interruptions.c ****         case CONTROL_PWM:
1226:..\src/interruptions.c **** 
1227:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3690              		.loc 1 1227 0
 3691 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3692 044c 404A     		ldr	r2, .L262+16
 3693 044e 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 89


 3694 0450 1344     		add	r3, r3, r2
 3695 0452 0833     		adds	r3, r3, #8
 3696 0454 1B68     		ldr	r3, [r3]
 3697 0456 FB64     		str	r3, [r7, #76]
1228:..\src/interruptions.c **** 
1229:..\src/interruptions.c ****             if (pwm_input > 0) 
 3698              		.loc 1 1229 0
 3699 0458 FB6C     		ldr	r3, [r7, #76]
 3700 045a 002B     		cmp	r3, #0
 3701 045c 03DD     		ble	.L238
1230:..\src/interruptions.c ****                 motor_dir = TRUE;
 3702              		.loc 1 1230 0
 3703 045e 3B4B     		ldr	r3, .L262+12
 3704 0460 0122     		movs	r2, #1
 3705 0462 1A70     		strb	r2, [r3]
 3706 0464 02E0     		b	.L239
 3707              	.L238:
1231:..\src/interruptions.c ****             else 
1232:..\src/interruptions.c ****                 motor_dir = FALSE;
 3708              		.loc 1 1232 0
 3709 0466 394B     		ldr	r3, .L262+12
 3710 0468 0022     		movs	r2, #0
 3711 046a 1A70     		strb	r2, [r3]
 3712              	.L239:
1233:..\src/interruptions.c ****             
1234:..\src/interruptions.c **** 
1235:..\src/interruptions.c ****             // pwm_input saturation
1236:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3713              		.loc 1 1236 0
 3714 046c FB6C     		ldr	r3, [r7, #76]
 3715 046e 13F1640F 		cmn	r3, #100
 3716 0472 03DA     		bge	.L240
1237:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3717              		.loc 1 1237 0
 3718 0474 6FF06303 		mvn	r3, #99
 3719 0478 FB64     		str	r3, [r7, #76]
1238:..\src/interruptions.c ****             else {
1239:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1240:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1241:..\src/interruptions.c ****         	}
1242:..\src/interruptions.c **** 
1243:..\src/interruptions.c ****         break;
 3720              		.loc 1 1243 0
 3721 047a 07E0     		b	.L259
 3722              	.L240:
1239:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 3723              		.loc 1 1239 0
 3724 047c FB6C     		ldr	r3, [r7, #76]
 3725 047e 642B     		cmp	r3, #100
 3726 0480 04DD     		ble	.L259
1240:..\src/interruptions.c ****         	}
 3727              		.loc 1 1240 0
 3728 0482 6423     		movs	r3, #100
 3729 0484 FB64     		str	r3, [r7, #76]
 3730              		.loc 1 1243 0
 3731 0486 01E0     		b	.L259
 3732              	.L258:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 90


1222:..\src/interruptions.c ****         
 3733              		.loc 1 1222 0
 3734 0488 00BF     		nop
 3735 048a 00E0     		b	.L200
 3736              	.L259:
 3737              		.loc 1 1243 0
 3738 048c 00BF     		nop
 3739              	.L200:
1244:..\src/interruptions.c ****             
1245:..\src/interruptions.c ****     }
1246:..\src/interruptions.c **** 
1247:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1248:..\src/interruptions.c **** 
1249:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3740              		.loc 1 1249 0
 3741 048e FB6C     		ldr	r3, [r7, #76]
 3742 0490 642B     		cmp	r3, #100
 3743 0492 01DD     		ble	.L242
1250:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3744              		.loc 1 1250 0
 3745 0494 6423     		movs	r3, #100
 3746 0496 FB64     		str	r3, [r7, #76]
 3747              	.L242:
1251:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3748              		.loc 1 1251 0
 3749 0498 FB6C     		ldr	r3, [r7, #76]
 3750 049a 13F1640F 		cmn	r3, #100
 3751 049e 02DA     		bge	.L243
1252:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3752              		.loc 1 1252 0
 3753 04a0 6FF06303 		mvn	r3, #99
 3754 04a4 FB64     		str	r3, [r7, #76]
 3755              	.L243:
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3756              		.loc 1 1254 0
 3757 04a6 3B6C     		ldr	r3, [r7, #64]
 3758 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3759 04ac 012B     		cmp	r3, #1
 3760 04ae 0DD0     		beq	.L244
1255:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 3761              		.loc 1 1255 0
 3762 04b0 FB6C     		ldr	r3, [r7, #76]
 3763 04b2 9B02     		lsls	r3, r3, #10
 3764 04b4 2D4A     		ldr	r2, .L262+44
 3765 04b6 82FB0312 		smull	r1, r2, r2, r3
 3766 04ba 5211     		asrs	r2, r2, #5
 3767 04bc DB17     		asrs	r3, r3, #31
 3768 04be D31A     		subs	r3, r2, r3
 3769 04c0 2B4A     		ldr	r2, .L262+48
 3770 04c2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3771 04c4 02FB03F3 		mul	r3, r2, r3
 3772 04c8 9B12     		asrs	r3, r3, #10
 3773 04ca FB64     		str	r3, [r7, #76]
 3774              	.L244:
1256:..\src/interruptions.c ****  
1257:..\src/interruptions.c ****     //// RATE LIMITER ////
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 91


1258:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3775              		.loc 1 1258 0
 3776 04cc 294B     		ldr	r3, .L262+52
 3777 04ce 1B68     		ldr	r3, [r3]
 3778 04d0 FA6C     		ldr	r2, [r7, #76]
 3779 04d2 D31A     		subs	r3, r2, r3
 3780 04d4 3A6C     		ldr	r2, [r7, #64]
 3781 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3782 04da 9342     		cmp	r3, r2
 3783 04dc 08DD     		ble	.L245
1259:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3784              		.loc 1 1259 0
 3785 04de 3B6C     		ldr	r3, [r7, #64]
 3786 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3787 04e4 1A46     		mov	r2, r3
 3788 04e6 234B     		ldr	r3, .L262+52
 3789 04e8 1B68     		ldr	r3, [r3]
 3790 04ea 1344     		add	r3, r3, r2
 3791 04ec FB64     		str	r3, [r7, #76]
 3792 04ee 10E0     		b	.L246
 3793              	.L245:
1260:..\src/interruptions.c ****     }
1261:..\src/interruptions.c ****     else {
1262:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3794              		.loc 1 1262 0
 3795 04f0 204B     		ldr	r3, .L262+52
 3796 04f2 1B68     		ldr	r3, [r3]
 3797 04f4 FA6C     		ldr	r2, [r7, #76]
 3798 04f6 D21A     		subs	r2, r2, r3
 3799 04f8 3B6C     		ldr	r3, [r7, #64]
 3800 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3801 04fe 5B42     		negs	r3, r3
 3802 0500 9A42     		cmp	r2, r3
 3803 0502 06DA     		bge	.L246
1263:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3804              		.loc 1 1263 0
 3805 0504 1B4B     		ldr	r3, .L262+52
 3806 0506 1B68     		ldr	r3, [r3]
 3807 0508 3A6C     		ldr	r2, [r7, #64]
 3808 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3809 050e 9B1A     		subs	r3, r3, r2
 3810 0510 FB64     		str	r3, [r7, #76]
 3811              	.L246:
1264:..\src/interruptions.c ****     }
1265:..\src/interruptions.c ****     
1266:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3812              		.loc 1 1266 0
 3813 0512 FB6C     		ldr	r3, [r7, #76]
 3814 0514 642B     		cmp	r3, #100
 3815 0516 01DD     		ble	.L247
1267:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3816              		.loc 1 1267 0
 3817 0518 6423     		movs	r3, #100
 3818 051a FB64     		str	r3, [r7, #76]
 3819              	.L247:
1268:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3820              		.loc 1 1268 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 92


 3821 051c FB6C     		ldr	r3, [r7, #76]
 3822 051e 13F1640F 		cmn	r3, #100
 3823 0522 02DA     		bge	.L248
1269:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3824              		.loc 1 1269 0
 3825 0524 6FF06303 		mvn	r3, #99
 3826 0528 FB64     		str	r3, [r7, #76]
 3827              	.L248:
1270:..\src/interruptions.c ****     
1271:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3828              		.loc 1 1271 0
 3829 052a 124A     		ldr	r2, .L262+52
 3830 052c FB6C     		ldr	r3, [r7, #76]
 3831 052e 1360     		str	r3, [r2]
1272:..\src/interruptions.c **** 	
1273:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3832              		.loc 1 1273 0
 3833 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3834 0534 FA6C     		ldr	r2, [r7, #76]
 3835 0536 002A     		cmp	r2, #0
 3836 0538 1EDB     		blt	.L249
 3837              		.loc 1 1273 0 is_stmt 0 discriminator 1
 3838 053a 0121     		movs	r1, #1
 3839 053c 1EE0     		b	.L250
 3840              	.L263:
 3841 053e 00BF     		.align	2
 3842              	.L262:
 3843 0540 90000000 		.word	pos_error_sum.10556
 3844 0544 18FCFFFF 		.word	-1000
 3845 0548 94000000 		.word	prev_pos_err.10558
 3846 054c 98000000 		.word	motor_dir.10561
 3847 0550 00000000 		.word	g_ref
 3848 0554 00000000 		.word	tension_valid
 3849 0558 00000000 		.word	g_meas
 3850 055c 9C000000 		.word	curr_error_sum.10557
 3851 0560 A0860100 		.word	100000
 3852 0564 6079FEFF 		.word	-100000
 3853 0568 A0000000 		.word	prev_curr_err.10559
 3854 056c 1F85EB51 		.word	1374389535
 3855 0570 00000000 		.word	dev_pwm_limit
 3856 0574 A4000000 		.word	prev_pwm.10560
 3857              	.L249:
 3858              		.loc 1 1273 0 discriminator 2
 3859 0578 4FF0FF31 		mov	r1, #-1
 3860              	.L250:
 3861              		.loc 1 1273 0 discriminator 4
 3862 057c 5A4A     		ldr	r2, .L264
 3863 057e D154     		strb	r1, [r2, r3]
1274:..\src/interruptions.c ****     
1275:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3864              		.loc 1 1275 0 is_stmt 1 discriminator 4
 3865 0580 3B6C     		ldr	r3, [r7, #64]
 3866 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3867 0586 012B     		cmp	r3, #1
 3868 0588 40F09680 		bne	.L251
1276:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1277:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 93


 3869              		.loc 1 1277 0
 3870 058c 3B6C     		ldr	r3, [r7, #64]
 3871 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3872 0592 012B     		cmp	r3, #1
 3873 0594 00F08D80 		beq	.L252
 3874              		.loc 1 1277 0 is_stmt 0 discriminator 1
 3875 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3876 059c 534A     		ldr	r2, .L264+4
 3877 059e 3421     		movs	r1, #52
 3878 05a0 01FB03F3 		mul	r3, r1, r3
 3879 05a4 1344     		add	r3, r3, r2
 3880 05a6 1A68     		ldr	r2, [r3]
 3881 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3882 05ac 5049     		ldr	r1, .L264+8
 3883 05ae 3420     		movs	r0, #52
 3884 05b0 00FB03F3 		mul	r3, r0, r3
 3885 05b4 0B44     		add	r3, r3, r1
 3886 05b6 1B68     		ldr	r3, [r3]
 3887 05b8 D31A     		subs	r3, r2, r3
 3888 05ba 312B     		cmp	r3, #49
 3889 05bc 79DC     		bgt	.L252
1278:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3890              		.loc 1 1278 0 is_stmt 1 discriminator 2
 3891 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3892 05c2 4A4A     		ldr	r2, .L264+4
 3893 05c4 3421     		movs	r1, #52
 3894 05c6 01FB03F3 		mul	r3, r1, r3
 3895 05ca 1344     		add	r3, r3, r2
 3896 05cc 1A68     		ldr	r2, [r3]
 3897 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3898 05d2 4749     		ldr	r1, .L264+8
 3899 05d4 3420     		movs	r0, #52
 3900 05d6 00FB03F3 		mul	r3, r0, r3
 3901 05da 0B44     		add	r3, r3, r1
 3902 05dc 1B68     		ldr	r3, [r3]
 3903 05de D31A     		subs	r3, r2, r3
1277:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3904              		.loc 1 1277 0 discriminator 2
 3905 05e0 13F1310F 		cmn	r3, #49
 3906 05e4 65DB     		blt	.L252
1279:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3907              		.loc 1 1279 0
 3908 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3909 05ea 424A     		ldr	r2, .L264+12
 3910 05ec 1B01     		lsls	r3, r3, #4
 3911 05ee 1344     		add	r3, r3, r2
 3912 05f0 1A68     		ldr	r2, [r3]
 3913 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3914 05f6 4049     		ldr	r1, .L264+16
 3915 05f8 1B01     		lsls	r3, r3, #4
 3916 05fa 0B44     		add	r3, r3, r1
 3917 05fc 1B68     		ldr	r3, [r3]
 3918 05fe D31A     		subs	r3, r2, r3
1278:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3919              		.loc 1 1278 0
 3920 0600 632B     		cmp	r3, #99
 3921 0602 56DC     		bgt	.L252
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 94


 3922              		.loc 1 1279 0
 3923 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3924 0608 3A4A     		ldr	r2, .L264+12
 3925 060a 1B01     		lsls	r3, r3, #4
 3926 060c 1344     		add	r3, r3, r2
 3927 060e 1A68     		ldr	r2, [r3]
 3928 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3929 0614 3849     		ldr	r1, .L264+16
 3930 0616 1B01     		lsls	r3, r3, #4
 3931 0618 0B44     		add	r3, r3, r1
 3932 061a 1B68     		ldr	r3, [r3]
 3933 061c D31A     		subs	r3, r2, r3
 3934 061e 13F1630F 		cmn	r3, #99
 3935 0622 46DB     		blt	.L252
1280:..\src/interruptions.c ****             position_counter++;
 3936              		.loc 1 1280 0
 3937 0624 354B     		ldr	r3, .L264+20
 3938 0626 1B68     		ldr	r3, [r3]
 3939 0628 0133     		adds	r3, r3, #1
 3940 062a 344A     		ldr	r2, .L264+20
 3941 062c 1360     		str	r3, [r2]
1281:..\src/interruptions.c ****             
1282:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3942              		.loc 1 1282 0
 3943 062e 334B     		ldr	r3, .L264+20
 3944 0630 1B68     		ldr	r3, [r3]
 3945 0632 F92B     		cmp	r3, #249
 3946 0634 40D9     		bls	.L251
1283:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3947              		.loc 1 1283 0
 3948 0636 3B6C     		ldr	r3, [r7, #64]
 3949 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3950 063c 002B     		cmp	r3, #0
 3951 063e 11D1     		bne	.L254
 3952              		.loc 1 1283 0 is_stmt 0 discriminator 1
 3953 0640 2F4B     		ldr	r3, .L264+24
 3954 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3955 0644 002B     		cmp	r3, #0
 3956 0646 0DD1     		bne	.L254
1284:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3957              		.loc 1 1284 0 is_stmt 1
 3958 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3959 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3960 0650 2749     		ldr	r1, .L264+8
 3961 0652 3420     		movs	r0, #52
 3962 0654 00FB02F2 		mul	r2, r0, r2
 3963 0658 0A44     		add	r2, r2, r1
 3964 065a 1268     		ldr	r2, [r2]
 3965 065c 2949     		ldr	r1, .L264+28
 3966 065e 1B01     		lsls	r3, r3, #4
 3967 0660 0B44     		add	r3, r3, r1
 3968 0662 1A60     		str	r2, [r3]
 3969              	.L254:
1285:..\src/interruptions.c ****                 }
1286:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3970              		.loc 1 1286 0
 3971 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 95


 3972 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3973 066c 2049     		ldr	r1, .L264+8
 3974 066e 3420     		movs	r0, #52
 3975 0670 00FB02F2 		mul	r2, r0, r2
 3976 0674 0A44     		add	r2, r2, r1
 3977 0676 1268     		ldr	r2, [r2]
 3978 0678 1F49     		ldr	r1, .L264+16
 3979 067a 1B01     		lsls	r3, r3, #4
 3980 067c 0B44     		add	r3, r3, r1
 3981 067e 1A60     		str	r2, [r3]
1287:..\src/interruptions.c ****                 
1288:..\src/interruptions.c ****                 if (position_counter == 250){
 3982              		.loc 1 1288 0
 3983 0680 1E4B     		ldr	r3, .L264+20
 3984 0682 1B68     		ldr	r3, [r3]
 3985 0684 FA2B     		cmp	r3, #250
 3986 0686 11D1     		bne	.L255
1289:..\src/interruptions.c ****                     // To do only once
1290:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3987              		.loc 1 1290 0
 3988 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3989 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3990 0690 1749     		ldr	r1, .L264+8
 3991 0692 3420     		movs	r0, #52
 3992 0694 00FB02F2 		mul	r2, r0, r2
 3993 0698 0A44     		add	r2, r2, r1
 3994 069a 0C32     		adds	r2, r2, #12
 3995 069c 1268     		ldr	r2, [r2]
 3996 069e 1449     		ldr	r1, .L264+8
 3997 06a0 3420     		movs	r0, #52
 3998 06a2 00FB03F3 		mul	r3, r0, r3
 3999 06a6 0B44     		add	r3, r3, r1
 4000 06a8 1433     		adds	r3, r3, #20
 4001 06aa 1A60     		str	r2, [r3]
 4002              	.L255:
1291:..\src/interruptions.c ****                 }
1292:..\src/interruptions.c ****                 pwm_input = 0;            
 4003              		.loc 1 1292 0
 4004 06ac 0023     		movs	r3, #0
 4005 06ae FB64     		str	r3, [r7, #76]
1282:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4006              		.loc 1 1282 0
 4007 06b0 02E0     		b	.L251
 4008              	.L252:
1293:..\src/interruptions.c ****             }
1294:..\src/interruptions.c ****         }
1295:..\src/interruptions.c ****         else {
1296:..\src/interruptions.c ****             position_counter = 0;
 4009              		.loc 1 1296 0
 4010 06b2 124B     		ldr	r3, .L264+20
 4011 06b4 0022     		movs	r2, #0
 4012 06b6 1A60     		str	r2, [r3]
 4013              	.L251:
1297:..\src/interruptions.c ****         }
1298:..\src/interruptions.c ****     }
1299:..\src/interruptions.c ****     
1300:..\src/interruptions.c ****     if (motor_dir)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 96


 4014              		.loc 1 1300 0
 4015 06b8 134B     		ldr	r3, .L264+32
 4016 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4017 06bc 002B     		cmp	r3, #0
 4018 06be 03D0     		beq	.L256
1301:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4019              		.loc 1 1301 0
 4020 06c0 0120     		movs	r0, #1
 4021 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4022 06c6 02E0     		b	.L257
 4023              	.L256:
1302:..\src/interruptions.c ****     else
1303:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4024              		.loc 1 1303 0
 4025 06c8 0020     		movs	r0, #0
 4026 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4027              	.L257:
1304:..\src/interruptions.c **** 
1305:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4028              		.loc 1 1305 0
 4029 06ce FB6C     		ldr	r3, [r7, #76]
 4030 06d0 002B     		cmp	r3, #0
 4031 06d2 B8BF     		it	lt
 4032 06d4 5B42     		rsblt	r3, r3, #0
 4033 06d6 DBB2     		uxtb	r3, r3
 4034 06d8 1846     		mov	r0, r3
 4035 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1306:..\src/interruptions.c **** }
 4036              		.loc 1 1306 0
 4037 06de 00BF     		nop
 4038 06e0 5037     		adds	r7, r7, #80
 4039              		.cfi_def_cfa_offset 8
 4040 06e2 BD46     		mov	sp, r7
 4041              		.cfi_def_cfa_register 13
 4042              		@ sp needed
 4043 06e4 80BD     		pop	{r7, pc}
 4044              	.L265:
 4045 06e6 00BF     		.align	2
 4046              	.L264:
 4047 06e8 00000000 		.word	pwm_sign
 4048 06ec 00000000 		.word	g_measOld
 4049 06f0 00000000 		.word	g_meas
 4050 06f4 00000000 		.word	g_refOld
 4051 06f8 00000000 		.word	g_ref
 4052 06fc A8000000 		.word	position_counter.10562
 4053 0700 00000000 		.word	change_ext_ref_flag
 4054 0704 00000000 		.word	g_refNew
 4055 0708 98000000 		.word	motor_dir.10561
 4056              		.cfi_endproc
 4057              	.LFE71:
 4058              		.size	motor_control_SH, .-motor_control_SH
 4059              		.section	.text.motor_control_generic,"ax",%progbits
 4060              		.align	2
 4061              		.global	motor_control_generic
 4062              		.thumb
 4063              		.thumb_func
 4064              		.type	motor_control_generic, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 97


 4065              	motor_control_generic:
 4066              	.LFB72:
1307:..\src/interruptions.c **** 
1308:..\src/interruptions.c **** //==============================================================================
1309:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1310:..\src/interruptions.c **** //==============================================================================
1311:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4067              		.loc 1 1311 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 80
 4070              		@ frame_needed = 1, uses_anonymous_args = 0
 4071 0000 90B5     		push	{r4, r7, lr}
 4072              		.cfi_def_cfa_offset 12
 4073              		.cfi_offset 4, -12
 4074              		.cfi_offset 7, -8
 4075              		.cfi_offset 14, -4
 4076 0002 95B0     		sub	sp, sp, #84
 4077              		.cfi_def_cfa_offset 96
 4078 0004 00AF     		add	r7, sp, #0
 4079              		.cfi_def_cfa_register 7
 4080 0006 0346     		mov	r3, r0
 4081 0008 FB71     		strb	r3, [r7, #7]
1312:..\src/interruptions.c ****     
1313:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4082              		.loc 1 1313 0
 4083 000a 0023     		movs	r3, #0
 4084 000c FB64     		str	r3, [r7, #76]
1314:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1315:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1316:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1317:..\src/interruptions.c **** 
1318:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4085              		.loc 1 1318 0
 4086 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4087 0010 1346     		mov	r3, r2
 4088 0012 DB00     		lsls	r3, r3, #3
 4089 0014 9B1A     		subs	r3, r3, r2
 4090 0016 1B01     		lsls	r3, r3, #4
 4091 0018 B033     		adds	r3, r3, #176
 4092 001a 9C4A     		ldr	r2, .L338
 4093 001c 1344     		add	r3, r3, r2
 4094 001e 7B64     		str	r3, [r7, #68]
1319:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4095              		.loc 1 1319 0
 4096 0020 7B6C     		ldr	r3, [r7, #68]
 4097 0022 93F86030 		ldrb	r3, [r3, #96]
 4098 0026 87F84330 		strb	r3, [r7, #67]
1320:..\src/interruptions.c ****     
1321:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4099              		.loc 1 1321 0
 4100 002a 7B6C     		ldr	r3, [r7, #68]
 4101 002c 1B68     		ldr	r3, [r3]
 4102 002e FB63     		str	r3, [r7, #60]
1322:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4103              		.loc 1 1322 0
 4104 0030 7B6C     		ldr	r3, [r7, #68]
 4105 0032 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 98


 4106 0034 BB63     		str	r3, [r7, #56]
1323:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4107              		.loc 1 1323 0
 4108 0036 7B6C     		ldr	r3, [r7, #68]
 4109 0038 9B68     		ldr	r3, [r3, #8]
 4110 003a 7B63     		str	r3, [r7, #52]
1324:..\src/interruptions.c **** 
1325:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4111              		.loc 1 1325 0
 4112 003c 7B6C     		ldr	r3, [r7, #68]
 4113 003e DB68     		ldr	r3, [r3, #12]
 4114 0040 3B63     		str	r3, [r7, #48]
1326:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4115              		.loc 1 1326 0
 4116 0042 7B6C     		ldr	r3, [r7, #68]
 4117 0044 1B69     		ldr	r3, [r3, #16]
 4118 0046 FB62     		str	r3, [r7, #44]
1327:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4119              		.loc 1 1327 0
 4120 0048 7B6C     		ldr	r3, [r7, #68]
 4121 004a 5B69     		ldr	r3, [r3, #20]
 4122 004c BB62     		str	r3, [r7, #40]
1328:..\src/interruptions.c **** 
1329:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4123              		.loc 1 1329 0
 4124 004e 7B6C     		ldr	r3, [r7, #68]
 4125 0050 9B69     		ldr	r3, [r3, #24]
 4126 0052 7B62     		str	r3, [r7, #36]
1330:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4127              		.loc 1 1330 0
 4128 0054 7B6C     		ldr	r3, [r7, #68]
 4129 0056 DB69     		ldr	r3, [r3, #28]
 4130 0058 3B62     		str	r3, [r7, #32]
1331:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4131              		.loc 1 1331 0
 4132 005a 7B6C     		ldr	r3, [r7, #68]
 4133 005c 1B6A     		ldr	r3, [r3, #32]
 4134 005e FB61     		str	r3, [r7, #28]
1332:..\src/interruptions.c ****     
1333:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4135              		.loc 1 1333 0
 4136 0060 7B6C     		ldr	r3, [r7, #68]
 4137 0062 5B6A     		ldr	r3, [r3, #36]
 4138 0064 BB61     		str	r3, [r7, #24]
1334:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4139              		.loc 1 1334 0
 4140 0066 7B6C     		ldr	r3, [r7, #68]
 4141 0068 9B6A     		ldr	r3, [r3, #40]
 4142 006a 7B61     		str	r3, [r7, #20]
1335:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4143              		.loc 1 1335 0
 4144 006c 7B6C     		ldr	r3, [r7, #68]
 4145 006e DB6A     		ldr	r3, [r3, #44]
 4146 0070 3B61     		str	r3, [r7, #16]
1336:..\src/interruptions.c **** 
1337:..\src/interruptions.c ****     // Static Variables
1338:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 99


1339:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1340:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1341:..\src/interruptions.c ****     
1342:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1343:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1344:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1345:..\src/interruptions.c **** 
1346:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1347:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1348:..\src/interruptions.c **** 
1349:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1350:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4147              		.loc 1 1350 0
 4148 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4149 0074 1B01     		lsls	r3, r3, #4
 4150 0076 864A     		ldr	r2, .L338+4
 4151 0078 9918     		adds	r1, r3, r2
 4152 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4153 007c 1B01     		lsls	r3, r3, #4
 4154 007e 854A     		ldr	r2, .L338+8
 4155 0080 1A44     		add	r2, r2, r3
 4156 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4157 0084 1846     		mov	r0, r3
 4158 0086 FFF7FEFF 		bl	compute_reference
1351:..\src/interruptions.c ****     
1352:..\src/interruptions.c ****    
1353:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4159              		.loc 1 1353 0
 4160 008a 7B6C     		ldr	r3, [r7, #68]
 4161 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4162 0090 032B     		cmp	r3, #3
 4163 0092 00F25482 		bhi	.L267
 4164 0096 01A2     		adr	r2, .L269
 4165 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4166              		.p2align 2
 4167              	.L269:
 4168 009c C1020000 		.word	.L268+1
 4169 00a0 CB040000 		.word	.L270+1
 4170 00a4 99030000 		.word	.L271+1
 4171 00a8 AD000000 		.word	.L272+1
 4172              		.p2align 1
 4173              	.L272:
1354:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1355:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1356:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4174              		.loc 1 1356 0
 4175 00ac 784B     		ldr	r3, .L338+4
 4176 00ae 1A68     		ldr	r2, [r3]
 4177 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4178 00b4 7849     		ldr	r1, .L338+12
 4179 00b6 3420     		movs	r0, #52
 4180 00b8 00FB03F3 		mul	r3, r0, r3
 4181 00bc 0B44     		add	r3, r3, r1
 4182 00be 1B68     		ldr	r3, [r3]
 4183 00c0 D31A     		subs	r3, r2, r3
 4184 00c2 FB60     		str	r3, [r7, #12]
1357:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 100


1358:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4185              		.loc 1 1358 0
 4186 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4187 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4188 00c8 7449     		ldr	r1, .L338+16
 4189 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4190 00ce FA68     		ldr	r2, [r7, #12]
 4191 00d0 0A44     		add	r2, r2, r1
 4192 00d2 7249     		ldr	r1, .L338+16
 4193 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1359:..\src/interruptions.c **** 
1360:..\src/interruptions.c ****             // error_sum saturation
1361:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4194              		.loc 1 1361 0
 4195 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4196 00da 704A     		ldr	r2, .L338+16
 4197 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4198 00e0 6F4A     		ldr	r2, .L338+20
 4199 00e2 9342     		cmp	r3, r2
 4200 00e4 05DD     		ble	.L273
1362:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4201              		.loc 1 1362 0
 4202 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4203 00e8 6C4A     		ldr	r2, .L338+16
 4204 00ea 6D49     		ldr	r1, .L338+20
 4205 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4206 00f0 0BE0     		b	.L274
 4207              	.L273:
1363:..\src/interruptions.c ****             else {
1364:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4208              		.loc 1 1364 0
 4209 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4210 00f4 694A     		ldr	r2, .L338+16
 4211 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4212 00fa 6A4A     		ldr	r2, .L338+24
 4213 00fc 9342     		cmp	r3, r2
 4214 00fe 04DA     		bge	.L274
1365:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4215              		.loc 1 1365 0
 4216 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4217 0102 664A     		ldr	r2, .L338+16
 4218 0104 6749     		ldr	r1, .L338+24
 4219 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4220              	.L274:
1366:..\src/interruptions.c ****             }
1367:..\src/interruptions.c ****             
1368:..\src/interruptions.c ****             // ------ position PID control ------
1369:..\src/interruptions.c **** 
1370:..\src/interruptions.c ****             i_ref = 0;
 4221              		.loc 1 1370 0
 4222 010a 0023     		movs	r3, #0
 4223 010c BB64     		str	r3, [r7, #72]
1371:..\src/interruptions.c ****             
1372:..\src/interruptions.c ****             // Proportional
1373:..\src/interruptions.c ****             if (k_p_dl != 0)
 4224              		.loc 1 1373 0
 4225 010e 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 101


 4226 0110 002B     		cmp	r3, #0
 4227 0112 07D0     		beq	.L275
1374:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4228              		.loc 1 1374 0
 4229 0114 7B6A     		ldr	r3, [r7, #36]
 4230 0116 FA68     		ldr	r2, [r7, #12]
 4231 0118 02FB03F3 		mul	r3, r2, r3
 4232 011c 1B14     		asrs	r3, r3, #16
 4233 011e BA6C     		ldr	r2, [r7, #72]
 4234 0120 1344     		add	r3, r3, r2
 4235 0122 BB64     		str	r3, [r7, #72]
 4236              	.L275:
1375:..\src/interruptions.c **** 
1376:..\src/interruptions.c ****             // Integral
1377:..\src/interruptions.c ****             if (k_i_dl != 0)
 4237              		.loc 1 1377 0
 4238 0124 3B6A     		ldr	r3, [r7, #32]
 4239 0126 002B     		cmp	r3, #0
 4240 0128 0AD0     		beq	.L276
1378:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4241              		.loc 1 1378 0
 4242 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4243 012c 5B4A     		ldr	r2, .L338+16
 4244 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4245 0132 3A6A     		ldr	r2, [r7, #32]
 4246 0134 02FB03F3 		mul	r3, r2, r3
 4247 0138 1B14     		asrs	r3, r3, #16
 4248 013a BA6C     		ldr	r2, [r7, #72]
 4249 013c 1344     		add	r3, r3, r2
 4250 013e BB64     		str	r3, [r7, #72]
 4251              	.L276:
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             // Derivative
1381:..\src/interruptions.c ****             if (k_d_dl != 0)
 4252              		.loc 1 1381 0
 4253 0140 FB69     		ldr	r3, [r7, #28]
 4254 0142 002B     		cmp	r3, #0
 4255 0144 0CD0     		beq	.L277
1382:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4256              		.loc 1 1382 0
 4257 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4258 0148 574A     		ldr	r2, .L338+28
 4259 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4260 014e FA68     		ldr	r2, [r7, #12]
 4261 0150 D31A     		subs	r3, r2, r3
 4262 0152 FA69     		ldr	r2, [r7, #28]
 4263 0154 02FB03F3 		mul	r3, r2, r3
 4264 0158 1B14     		asrs	r3, r3, #16
 4265 015a BA6C     		ldr	r2, [r7, #72]
 4266 015c 1344     		add	r3, r3, r2
 4267 015e BB64     		str	r3, [r7, #72]
 4268              	.L277:
1383:..\src/interruptions.c ****                         
1384:..\src/interruptions.c ****             // Update previous position
1385:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4269              		.loc 1 1385 0
 4270 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 102


 4271 0162 5149     		ldr	r1, .L338+28
 4272 0164 FA68     		ldr	r2, [r7, #12]
 4273 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1386:..\src/interruptions.c **** 
1387:..\src/interruptions.c ****             // motor direction depends on i_ref
1388:..\src/interruptions.c ****             if (i_ref >= 0)
 4274              		.loc 1 1388 0
 4275 016a BB6C     		ldr	r3, [r7, #72]
 4276 016c 002B     		cmp	r3, #0
 4277 016e 04DB     		blt	.L278
1389:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4278              		.loc 1 1389 0
 4279 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4280 0172 4E4A     		ldr	r2, .L338+32
 4281 0174 0121     		movs	r1, #1
 4282 0176 D154     		strb	r1, [r2, r3]
 4283 0178 03E0     		b	.L279
 4284              	.L278:
1390:..\src/interruptions.c ****             else
1391:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4285              		.loc 1 1391 0
 4286 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4287 017c 4B4A     		ldr	r2, .L338+32
 4288 017e 0021     		movs	r1, #0
 4289 0180 D154     		strb	r1, [r2, r3]
 4290              	.L279:
1392:..\src/interruptions.c **** 
1393:..\src/interruptions.c ****             // saturate max current
1394:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4291              		.loc 1 1394 0
 4292 0182 7B6C     		ldr	r3, [r7, #68]
 4293 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4294 0188 1A46     		mov	r2, r3
 4295 018a BB6C     		ldr	r3, [r7, #72]
 4296 018c 9A42     		cmp	r2, r3
 4297 018e 04DA     		bge	.L280
1395:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4298              		.loc 1 1395 0
 4299 0190 7B6C     		ldr	r3, [r7, #68]
 4300 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4301 0196 BB64     		str	r3, [r7, #72]
 4302 0198 0BE0     		b	.L281
 4303              	.L280:
1396:..\src/interruptions.c ****             else {
1397:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4304              		.loc 1 1397 0
 4305 019a 7B6C     		ldr	r3, [r7, #68]
 4306 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4307 01a0 5A42     		negs	r2, r3
 4308 01a2 BB6C     		ldr	r3, [r7, #72]
 4309 01a4 9A42     		cmp	r2, r3
 4310 01a6 04DD     		ble	.L281
1398:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4311              		.loc 1 1398 0
 4312 01a8 7B6C     		ldr	r3, [r7, #68]
 4313 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4314 01ae 5B42     		negs	r3, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 103


 4315 01b0 BB64     		str	r3, [r7, #72]
 4316              	.L281:
1399:..\src/interruptions.c ****         	}
1400:..\src/interruptions.c **** 
1401:..\src/interruptions.c ****             // current error and curr error sum
1402:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4317              		.loc 1 1402 0
 4318 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4319 01b6 384A     		ldr	r2, .L338+12
 4320 01b8 3421     		movs	r1, #52
 4321 01ba 01FB03F3 		mul	r3, r1, r3
 4322 01be 1344     		add	r3, r3, r2
 4323 01c0 0C33     		adds	r3, r3, #12
 4324 01c2 1B68     		ldr	r3, [r3]
 4325 01c4 BA6C     		ldr	r2, [r7, #72]
 4326 01c6 D31A     		subs	r3, r2, r3
 4327 01c8 BB60     		str	r3, [r7, #8]
1403:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4328              		.loc 1 1403 0
 4329 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4330 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4331 01ce 3849     		ldr	r1, .L338+36
 4332 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4333 01d4 BA68     		ldr	r2, [r7, #8]
 4334 01d6 0A44     		add	r2, r2, r1
 4335 01d8 3549     		ldr	r1, .L338+36
 4336 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1404:..\src/interruptions.c ****             
1405:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4337              		.loc 1 1405 0
 4338 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4339 01e0 334A     		ldr	r2, .L338+36
 4340 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4341 01e6 334A     		ldr	r2, .L338+40
 4342 01e8 9342     		cmp	r3, r2
 4343 01ea 05DD     		ble	.L282
1406:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4344              		.loc 1 1406 0
 4345 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4346 01ee 304A     		ldr	r2, .L338+36
 4347 01f0 3049     		ldr	r1, .L338+40
 4348 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4349 01f6 0BE0     		b	.L283
 4350              	.L282:
1407:..\src/interruptions.c ****             else {
1408:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4351              		.loc 1 1408 0
 4352 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4353 01fa 2D4A     		ldr	r2, .L338+36
 4354 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4355 0200 2D4A     		ldr	r2, .L338+44
 4356 0202 9342     		cmp	r3, r2
 4357 0204 04DA     		bge	.L283
1409:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4358              		.loc 1 1409 0
 4359 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4360 0208 294A     		ldr	r2, .L338+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 104


 4361 020a 2B49     		ldr	r1, .L338+44
 4362 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4363              	.L283:
1410:..\src/interruptions.c ****             }
1411:..\src/interruptions.c **** 
1412:..\src/interruptions.c ****             // ----- current PID control -----
1413:..\src/interruptions.c **** 
1414:..\src/interruptions.c ****             pwm_input = 0;
 4364              		.loc 1 1414 0
 4365 0210 0023     		movs	r3, #0
 4366 0212 FB64     		str	r3, [r7, #76]
1415:..\src/interruptions.c **** 
1416:..\src/interruptions.c ****             // Proportional
1417:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4367              		.loc 1 1417 0
 4368 0214 BB69     		ldr	r3, [r7, #24]
 4369 0216 002B     		cmp	r3, #0
 4370 0218 07D0     		beq	.L284
1418:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4371              		.loc 1 1418 0
 4372 021a BB69     		ldr	r3, [r7, #24]
 4373 021c BA68     		ldr	r2, [r7, #8]
 4374 021e 02FB03F3 		mul	r3, r2, r3
 4375 0222 1B14     		asrs	r3, r3, #16
 4376 0224 FA6C     		ldr	r2, [r7, #76]
 4377 0226 1344     		add	r3, r3, r2
 4378 0228 FB64     		str	r3, [r7, #76]
 4379              	.L284:
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****             // Integral
1421:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4380              		.loc 1 1421 0
 4381 022a 7B69     		ldr	r3, [r7, #20]
 4382 022c 002B     		cmp	r3, #0
 4383 022e 0AD0     		beq	.L285
1422:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4384              		.loc 1 1422 0
 4385 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4386 0232 1F4A     		ldr	r2, .L338+36
 4387 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4388 0238 7A69     		ldr	r2, [r7, #20]
 4389 023a 02FB03F3 		mul	r3, r2, r3
 4390 023e 1B14     		asrs	r3, r3, #16
 4391 0240 FA6C     		ldr	r2, [r7, #76]
 4392 0242 1344     		add	r3, r3, r2
 4393 0244 FB64     		str	r3, [r7, #76]
 4394              	.L285:
1423:..\src/interruptions.c **** 
1424:..\src/interruptions.c ****             // Derivative
1425:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4395              		.loc 1 1425 0
 4396 0246 3B69     		ldr	r3, [r7, #16]
 4397 0248 002B     		cmp	r3, #0
 4398 024a 0CD0     		beq	.L286
1426:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4399              		.loc 1 1426 0
 4400 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 105


 4401 024e 1B4A     		ldr	r2, .L338+48
 4402 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4403 0254 BA68     		ldr	r2, [r7, #8]
 4404 0256 D31A     		subs	r3, r2, r3
 4405 0258 3A69     		ldr	r2, [r7, #16]
 4406 025a 02FB03F3 		mul	r3, r2, r3
 4407 025e 1B14     		asrs	r3, r3, #16
 4408 0260 FA6C     		ldr	r2, [r7, #76]
 4409 0262 1344     		add	r3, r3, r2
 4410 0264 FB64     		str	r3, [r7, #76]
 4411              	.L286:
1427:..\src/interruptions.c **** 
1428:..\src/interruptions.c ****             // pwm_input saturation
1429:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4412              		.loc 1 1429 0
 4413 0266 FB6C     		ldr	r3, [r7, #76]
 4414 0268 13F1640F 		cmn	r3, #100
 4415 026c 03DA     		bge	.L287
1430:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4416              		.loc 1 1430 0
 4417 026e 6FF06303 		mvn	r3, #99
 4418 0272 FB64     		str	r3, [r7, #76]
 4419 0274 04E0     		b	.L288
 4420              	.L287:
1431:..\src/interruptions.c ****             else {
1432:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 4421              		.loc 1 1432 0
 4422 0276 FB6C     		ldr	r3, [r7, #76]
 4423 0278 642B     		cmp	r3, #100
 4424 027a 01DD     		ble	.L288
1433:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 4425              		.loc 1 1433 0
 4426 027c 6423     		movs	r3, #100
 4427 027e FB64     		str	r3, [r7, #76]
 4428              	.L288:
1434:..\src/interruptions.c ****             }
1435:..\src/interruptions.c **** 
1436:..\src/interruptions.c ****             // Update previous current
1437:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4429              		.loc 1 1437 0
 4430 0280 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4431 0282 0E49     		ldr	r1, .L338+48
 4432 0284 BA68     		ldr	r2, [r7, #8]
 4433 0286 41F82320 		str	r2, [r1, r3, lsl #2]
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****         break;
 4434              		.loc 1 1439 0
 4435 028a 58E1     		b	.L267
 4436              	.L339:
 4437              		.align	2
 4438              	.L338:
 4439 028c 00000000 		.word	c_mem
 4440 0290 00000000 		.word	g_ref
 4441 0294 00000000 		.word	g_refOld
 4442 0298 00000000 		.word	g_meas
 4443 029c AC000000 		.word	pos_error_sum.10589
 4444 02a0 80F0FA02 		.word	50000000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 106


 4445 02a4 800F05FD 		.word	-50000000
 4446 02a8 B4000000 		.word	prev_pos_err.10591
 4447 02ac BC000000 		.word	motor_dir.10594
 4448 02b0 C0000000 		.word	curr_error_sum.10590
 4449 02b4 A0860100 		.word	100000
 4450 02b8 6079FEFF 		.word	-100000
 4451 02bc C8000000 		.word	prev_curr_err.10592
 4452              	.L268:
1440:..\src/interruptions.c **** 
1441:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1442:..\src/interruptions.c ****         case CONTROL_ANGLE:
1443:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4453              		.loc 1 1443 0
 4454 02c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4455 02c2 934A     		ldr	r2, .L340
 4456 02c4 1B01     		lsls	r3, r3, #4
 4457 02c6 1344     		add	r3, r3, r2
 4458 02c8 1A68     		ldr	r2, [r3]
 4459 02ca 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4460 02ce 9149     		ldr	r1, .L340+4
 4461 02d0 3420     		movs	r0, #52
 4462 02d2 00FB03F3 		mul	r3, r0, r3
 4463 02d6 0B44     		add	r3, r3, r1
 4464 02d8 1B68     		ldr	r3, [r3]
 4465 02da D31A     		subs	r3, r2, r3
 4466 02dc FB60     		str	r3, [r7, #12]
1444:..\src/interruptions.c **** 
1445:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4467              		.loc 1 1445 0
 4468 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4469 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4470 02e2 8D49     		ldr	r1, .L340+8
 4471 02e4 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4472 02e8 FA68     		ldr	r2, [r7, #12]
 4473 02ea 0A44     		add	r2, r2, r1
 4474 02ec 8A49     		ldr	r1, .L340+8
 4475 02ee 41F82320 		str	r2, [r1, r3, lsl #2]
1446:..\src/interruptions.c **** 
1447:..\src/interruptions.c ****             // anti-windup (for integral control)
1448:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4476              		.loc 1 1448 0
 4477 02f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4478 02f4 884A     		ldr	r2, .L340+8
 4479 02f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4480 02fa B3F57A7F 		cmp	r3, #1000
 4481 02fe 06DD     		ble	.L289
1449:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4482              		.loc 1 1449 0
 4483 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4484 0302 854A     		ldr	r2, .L340+8
 4485 0304 4FF47A71 		mov	r1, #1000
 4486 0308 42F82310 		str	r1, [r2, r3, lsl #2]
 4487 030c 0BE0     		b	.L290
 4488              	.L289:
1450:..\src/interruptions.c ****             else {
1451:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4489              		.loc 1 1451 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 107


 4490 030e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4491 0310 814A     		ldr	r2, .L340+8
 4492 0312 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4493 0316 13F57A7F 		cmn	r3, #1000
 4494 031a 04DA     		bge	.L290
1452:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4495              		.loc 1 1452 0
 4496 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4497 031e 7E4A     		ldr	r2, .L340+8
 4498 0320 7E49     		ldr	r1, .L340+12
 4499 0322 42F82310 		str	r1, [r2, r3, lsl #2]
 4500              	.L290:
1453:..\src/interruptions.c ****             }
1454:..\src/interruptions.c **** 
1455:..\src/interruptions.c ****             // Proportional
1456:..\src/interruptions.c ****             if (k_p != 0) 
 4501              		.loc 1 1456 0
 4502 0326 FB6B     		ldr	r3, [r7, #60]
 4503 0328 002B     		cmp	r3, #0
 4504 032a 05D0     		beq	.L291
1457:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4505              		.loc 1 1457 0
 4506 032c FB6B     		ldr	r3, [r7, #60]
 4507 032e FA68     		ldr	r2, [r7, #12]
 4508 0330 02FB03F3 		mul	r3, r2, r3
 4509 0334 1B14     		asrs	r3, r3, #16
 4510 0336 FB64     		str	r3, [r7, #76]
 4511              	.L291:
1458:..\src/interruptions.c ****             
1459:..\src/interruptions.c **** 
1460:..\src/interruptions.c ****             // Integral
1461:..\src/interruptions.c ****             if (k_i != 0) 
 4512              		.loc 1 1461 0
 4513 0338 BB6B     		ldr	r3, [r7, #56]
 4514 033a 002B     		cmp	r3, #0
 4515 033c 0AD0     		beq	.L292
1462:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4516              		.loc 1 1462 0
 4517 033e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4518 0340 754A     		ldr	r2, .L340+8
 4519 0342 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4520 0346 BA6B     		ldr	r2, [r7, #56]
 4521 0348 02FB03F3 		mul	r3, r2, r3
 4522 034c 1B14     		asrs	r3, r3, #16
 4523 034e FA6C     		ldr	r2, [r7, #76]
 4524 0350 1344     		add	r3, r3, r2
 4525 0352 FB64     		str	r3, [r7, #76]
 4526              	.L292:
1463:..\src/interruptions.c ****             
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Derivative
1466:..\src/interruptions.c ****             if (k_d != 0) 
 4527              		.loc 1 1466 0
 4528 0354 7B6B     		ldr	r3, [r7, #52]
 4529 0356 002B     		cmp	r3, #0
 4530 0358 0CD0     		beq	.L293
1467:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 108


 4531              		.loc 1 1467 0
 4532 035a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4533 035c 704A     		ldr	r2, .L340+16
 4534 035e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4535 0362 FA68     		ldr	r2, [r7, #12]
 4536 0364 D31A     		subs	r3, r2, r3
 4537 0366 7A6B     		ldr	r2, [r7, #52]
 4538 0368 02FB03F3 		mul	r3, r2, r3
 4539 036c 1B14     		asrs	r3, r3, #16
 4540 036e FA6C     		ldr	r2, [r7, #76]
 4541 0370 1344     		add	r3, r3, r2
 4542 0372 FB64     		str	r3, [r7, #76]
 4543              	.L293:
1468:..\src/interruptions.c ****             
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****             // Update measure
1471:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4544              		.loc 1 1471 0
 4545 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4546 0376 6A49     		ldr	r1, .L340+16
 4547 0378 FA68     		ldr	r2, [r7, #12]
 4548 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1472:..\src/interruptions.c **** 
1473:..\src/interruptions.c ****             if (pwm_input > 0)
 4549              		.loc 1 1473 0
 4550 037e FB6C     		ldr	r3, [r7, #76]
 4551 0380 002B     		cmp	r3, #0
 4552 0382 04DD     		ble	.L294
1474:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4553              		.loc 1 1474 0
 4554 0384 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4555 0386 674A     		ldr	r2, .L340+20
 4556 0388 0121     		movs	r1, #1
 4557 038a D154     		strb	r1, [r2, r3]
1475:..\src/interruptions.c ****             else
1476:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1477:..\src/interruptions.c **** 
1478:..\src/interruptions.c ****         break;
 4558              		.loc 1 1478 0
 4559 038c D7E0     		b	.L267
 4560              	.L294:
1476:..\src/interruptions.c **** 
 4561              		.loc 1 1476 0
 4562 038e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4563 0390 644A     		ldr	r2, .L340+20
 4564 0392 0021     		movs	r1, #0
 4565 0394 D154     		strb	r1, [r2, r3]
 4566              		.loc 1 1478 0
 4567 0396 D2E0     		b	.L267
 4568              	.L271:
1479:..\src/interruptions.c **** 
1480:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1481:..\src/interruptions.c ****         case CONTROL_CURRENT:
1482:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4569              		.loc 1 1482 0
 4570 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4571 039a 5D4A     		ldr	r2, .L340
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 109


 4572 039c 1B01     		lsls	r3, r3, #4
 4573 039e 1344     		add	r3, r3, r2
 4574 03a0 0C33     		adds	r3, r3, #12
 4575 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4576 03a4 002B     		cmp	r3, #0
 4577 03a6 00F0B180 		beq	.L335
 4578              		.loc 1 1482 0 is_stmt 0 discriminator 1
 4579 03aa 5F4B     		ldr	r3, .L340+24
 4580 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4581 03ae 002B     		cmp	r3, #0
 4582 03b0 00F0AC80 		beq	.L335
1483:..\src/interruptions.c ****                 
1484:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4583              		.loc 1 1484 0 is_stmt 1
 4584 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4585 03b6 564A     		ldr	r2, .L340
 4586 03b8 1B01     		lsls	r3, r3, #4
 4587 03ba 1344     		add	r3, r3, r2
 4588 03bc 0433     		adds	r3, r3, #4
 4589 03be 1B68     		ldr	r3, [r3]
 4590 03c0 BB64     		str	r3, [r7, #72]
1485:..\src/interruptions.c **** 
1486:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4591              		.loc 1 1486 0
 4592 03c2 7B6C     		ldr	r3, [r7, #68]
 4593 03c4 B3F95C30 		ldrsh	r3, [r3, #92]
 4594 03c8 1A46     		mov	r2, r3
 4595 03ca BB6C     		ldr	r3, [r7, #72]
 4596 03cc 9A42     		cmp	r2, r3
 4597 03ce 04DA     		bge	.L297
1487:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4598              		.loc 1 1487 0
 4599 03d0 7B6C     		ldr	r3, [r7, #68]
 4600 03d2 B3F95C30 		ldrsh	r3, [r3, #92]
 4601 03d6 BB64     		str	r3, [r7, #72]
 4602 03d8 0BE0     		b	.L298
 4603              	.L297:
1488:..\src/interruptions.c ****                 else {
1489:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4604              		.loc 1 1489 0
 4605 03da 7B6C     		ldr	r3, [r7, #68]
 4606 03dc B3F95C30 		ldrsh	r3, [r3, #92]
 4607 03e0 5A42     		negs	r2, r3
 4608 03e2 BB6C     		ldr	r3, [r7, #72]
 4609 03e4 9A42     		cmp	r2, r3
 4610 03e6 04DD     		ble	.L298
1490:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4611              		.loc 1 1490 0
 4612 03e8 7B6C     		ldr	r3, [r7, #68]
 4613 03ea B3F95C30 		ldrsh	r3, [r3, #92]
 4614 03ee 5B42     		negs	r3, r3
 4615 03f0 BB64     		str	r3, [r7, #72]
 4616              	.L298:
1491:..\src/interruptions.c ****                 }
1492:..\src/interruptions.c ****                 
1493:..\src/interruptions.c ****                 // current error
1494:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 110


 4617              		.loc 1 1494 0
 4618 03f2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4619 03f6 474A     		ldr	r2, .L340+4
 4620 03f8 3421     		movs	r1, #52
 4621 03fa 01FB03F3 		mul	r3, r1, r3
 4622 03fe 1344     		add	r3, r3, r2
 4623 0400 0C33     		adds	r3, r3, #12
 4624 0402 1B68     		ldr	r3, [r3]
 4625 0404 BA6C     		ldr	r2, [r7, #72]
 4626 0406 D31A     		subs	r3, r2, r3
 4627 0408 BB60     		str	r3, [r7, #8]
1495:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4628              		.loc 1 1495 0
 4629 040a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4630 040c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4631 040e 4749     		ldr	r1, .L340+28
 4632 0410 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4633 0414 BA68     		ldr	r2, [r7, #8]
 4634 0416 0A44     		add	r2, r2, r1
 4635 0418 4449     		ldr	r1, .L340+28
 4636 041a 41F82320 		str	r2, [r1, r3, lsl #2]
1496:..\src/interruptions.c ****                 
1497:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4637              		.loc 1 1497 0
 4638 041e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4639 0420 424A     		ldr	r2, .L340+28
 4640 0422 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4641 0426 424A     		ldr	r2, .L340+32
 4642 0428 9342     		cmp	r3, r2
 4643 042a 05DD     		ble	.L299
1498:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4644              		.loc 1 1498 0
 4645 042c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4646 042e 3F4A     		ldr	r2, .L340+28
 4647 0430 3F49     		ldr	r1, .L340+32
 4648 0432 42F82310 		str	r1, [r2, r3, lsl #2]
 4649 0436 0BE0     		b	.L300
 4650              	.L299:
1499:..\src/interruptions.c ****                 else {
1500:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4651              		.loc 1 1500 0
 4652 0438 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4653 043a 3C4A     		ldr	r2, .L340+28
 4654 043c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4655 0440 3C4A     		ldr	r2, .L340+36
 4656 0442 9342     		cmp	r3, r2
 4657 0444 04DA     		bge	.L300
1501:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4658              		.loc 1 1501 0
 4659 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4660 0448 384A     		ldr	r2, .L340+28
 4661 044a 3A49     		ldr	r1, .L340+36
 4662 044c 42F82310 		str	r1, [r2, r3, lsl #2]
 4663              	.L300:
1502:..\src/interruptions.c ****                 }
1503:..\src/interruptions.c **** 
1504:..\src/interruptions.c ****                 pwm_input = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 111


 4664              		.loc 1 1504 0
 4665 0450 0023     		movs	r3, #0
 4666 0452 FB64     		str	r3, [r7, #76]
1505:..\src/interruptions.c **** 
1506:..\src/interruptions.c ****                 // Proportional
1507:..\src/interruptions.c ****                 if (k_p_c != 0)
 4667              		.loc 1 1507 0
 4668 0454 3B6B     		ldr	r3, [r7, #48]
 4669 0456 002B     		cmp	r3, #0
 4670 0458 07D0     		beq	.L301
1508:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4671              		.loc 1 1508 0
 4672 045a 3B6B     		ldr	r3, [r7, #48]
 4673 045c BA68     		ldr	r2, [r7, #8]
 4674 045e 02FB03F3 		mul	r3, r2, r3
 4675 0462 1B14     		asrs	r3, r3, #16
 4676 0464 FA6C     		ldr	r2, [r7, #76]
 4677 0466 1344     		add	r3, r3, r2
 4678 0468 FB64     		str	r3, [r7, #76]
 4679              	.L301:
1509:..\src/interruptions.c **** 
1510:..\src/interruptions.c ****                 // Integral
1511:..\src/interruptions.c ****                 if (k_i_c != 0)
 4680              		.loc 1 1511 0
 4681 046a FB6A     		ldr	r3, [r7, #44]
 4682 046c 002B     		cmp	r3, #0
 4683 046e 0AD0     		beq	.L302
1512:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4684              		.loc 1 1512 0
 4685 0470 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4686 0472 2E4A     		ldr	r2, .L340+28
 4687 0474 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4688 0478 FA6A     		ldr	r2, [r7, #44]
 4689 047a 02FB03F3 		mul	r3, r2, r3
 4690 047e 1B14     		asrs	r3, r3, #16
 4691 0480 FA6C     		ldr	r2, [r7, #76]
 4692 0482 1344     		add	r3, r3, r2
 4693 0484 FB64     		str	r3, [r7, #76]
 4694              	.L302:
1513:..\src/interruptions.c **** 
1514:..\src/interruptions.c ****                 // Derivative
1515:..\src/interruptions.c ****                 if (k_d_c != 0)
 4695              		.loc 1 1515 0
 4696 0486 BB6A     		ldr	r3, [r7, #40]
 4697 0488 002B     		cmp	r3, #0
 4698 048a 0CD0     		beq	.L303
1516:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4699              		.loc 1 1516 0
 4700 048c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4701 048e 2A4A     		ldr	r2, .L340+40
 4702 0490 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4703 0494 BA68     		ldr	r2, [r7, #8]
 4704 0496 D31A     		subs	r3, r2, r3
 4705 0498 BA6A     		ldr	r2, [r7, #40]
 4706 049a 02FB03F3 		mul	r3, r2, r3
 4707 049e 1B14     		asrs	r3, r3, #16
 4708 04a0 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 112


 4709 04a2 1344     		add	r3, r3, r2
 4710 04a4 FB64     		str	r3, [r7, #76]
 4711              	.L303:
1517:..\src/interruptions.c ****                 
1518:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4712              		.loc 1 1518 0
 4713 04a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4714 04a8 2349     		ldr	r1, .L340+40
 4715 04aa BA68     		ldr	r2, [r7, #8]
 4716 04ac 41F82320 		str	r2, [r1, r3, lsl #2]
1519:..\src/interruptions.c ****                 
1520:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4717              		.loc 1 1520 0
 4718 04b0 FB6C     		ldr	r3, [r7, #76]
 4719 04b2 002B     		cmp	r3, #0
 4720 04b4 04DB     		blt	.L304
1521:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4721              		.loc 1 1521 0
 4722 04b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4723 04b8 1A4A     		ldr	r2, .L340+20
 4724 04ba 0121     		movs	r1, #1
 4725 04bc D154     		strb	r1, [r2, r3]
1522:..\src/interruptions.c ****                 else
1523:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1524:..\src/interruptions.c ****             }
1525:..\src/interruptions.c ****         break;
 4726              		.loc 1 1525 0
 4727 04be 25E0     		b	.L335
 4728              	.L304:
1523:..\src/interruptions.c ****             }
 4729              		.loc 1 1523 0
 4730 04c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4731 04c2 184A     		ldr	r2, .L340+20
 4732 04c4 0021     		movs	r1, #0
 4733 04c6 D154     		strb	r1, [r2, r3]
 4734              		.loc 1 1525 0
 4735 04c8 20E0     		b	.L335
 4736              	.L270:
1526:..\src/interruptions.c ****         
1527:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1528:..\src/interruptions.c ****         case CONTROL_PWM:
1529:..\src/interruptions.c **** 
1530:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4737              		.loc 1 1530 0
 4738 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4739 04cc 104A     		ldr	r2, .L340
 4740 04ce 1B01     		lsls	r3, r3, #4
 4741 04d0 1344     		add	r3, r3, r2
 4742 04d2 0833     		adds	r3, r3, #8
 4743 04d4 1B68     		ldr	r3, [r3]
 4744 04d6 FB64     		str	r3, [r7, #76]
1531:..\src/interruptions.c **** 
1532:..\src/interruptions.c ****             if (pwm_input > 0) 
 4745              		.loc 1 1532 0
 4746 04d8 FB6C     		ldr	r3, [r7, #76]
 4747 04da 002B     		cmp	r3, #0
 4748 04dc 04DD     		ble	.L305
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 113


1533:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4749              		.loc 1 1533 0
 4750 04de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4751 04e0 104A     		ldr	r2, .L340+20
 4752 04e2 0121     		movs	r1, #1
 4753 04e4 D154     		strb	r1, [r2, r3]
 4754 04e6 03E0     		b	.L306
 4755              	.L305:
1534:..\src/interruptions.c ****             else 
1535:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4756              		.loc 1 1535 0
 4757 04e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4758 04ea 0E4A     		ldr	r2, .L340+20
 4759 04ec 0021     		movs	r1, #0
 4760 04ee D154     		strb	r1, [r2, r3]
 4761              	.L306:
1536:..\src/interruptions.c ****             
1537:..\src/interruptions.c **** 
1538:..\src/interruptions.c ****             // pwm_input saturation
1539:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4762              		.loc 1 1539 0
 4763 04f0 FB6C     		ldr	r3, [r7, #76]
 4764 04f2 13F1640F 		cmn	r3, #100
 4765 04f6 03DA     		bge	.L307
1540:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4766              		.loc 1 1540 0
 4767 04f8 6FF06303 		mvn	r3, #99
 4768 04fc FB64     		str	r3, [r7, #76]
1541:..\src/interruptions.c ****             else {
1542:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1543:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1544:..\src/interruptions.c ****         	}
1545:..\src/interruptions.c **** 
1546:..\src/interruptions.c ****         break;
 4769              		.loc 1 1546 0
 4770 04fe 1DE0     		b	.L336
 4771              	.L307:
1542:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4772              		.loc 1 1542 0
 4773 0500 FB6C     		ldr	r3, [r7, #76]
 4774 0502 642B     		cmp	r3, #100
 4775 0504 1ADD     		ble	.L336
1543:..\src/interruptions.c ****         	}
 4776              		.loc 1 1543 0
 4777 0506 6423     		movs	r3, #100
 4778 0508 FB64     		str	r3, [r7, #76]
 4779              		.loc 1 1546 0
 4780 050a 17E0     		b	.L336
 4781              	.L335:
1525:..\src/interruptions.c ****         
 4782              		.loc 1 1525 0
 4783 050c 00BF     		nop
 4784 050e 16E0     		b	.L267
 4785              	.L341:
 4786              		.align	2
 4787              	.L340:
 4788 0510 00000000 		.word	g_ref
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 114


 4789 0514 00000000 		.word	g_meas
 4790 0518 AC000000 		.word	pos_error_sum.10589
 4791 051c 18FCFFFF 		.word	-1000
 4792 0520 B4000000 		.word	prev_pos_err.10591
 4793 0524 BC000000 		.word	motor_dir.10594
 4794 0528 00000000 		.word	tension_valid
 4795 052c C0000000 		.word	curr_error_sum.10590
 4796 0530 A0860100 		.word	100000
 4797 0534 6079FEFF 		.word	-100000
 4798 0538 C8000000 		.word	prev_curr_err.10592
 4799              	.L336:
 4800              		.loc 1 1546 0
 4801 053c 00BF     		nop
 4802              	.L267:
1547:..\src/interruptions.c ****             
1548:..\src/interruptions.c ****     }
1549:..\src/interruptions.c **** 
1550:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1551:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1552:..\src/interruptions.c **** 
1553:..\src/interruptions.c **** 
1554:..\src/interruptions.c ****     if(pwm_input > PWM_MAX_VALUE) 
 4803              		.loc 1 1554 0
 4804 053e FB6C     		ldr	r3, [r7, #76]
 4805 0540 642B     		cmp	r3, #100
 4806 0542 01DD     		ble	.L309
1555:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4807              		.loc 1 1555 0
 4808 0544 6423     		movs	r3, #100
 4809 0546 FB64     		str	r3, [r7, #76]
 4810              	.L309:
1556:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4811              		.loc 1 1556 0
 4812 0548 FB6C     		ldr	r3, [r7, #76]
 4813 054a 13F1640F 		cmn	r3, #100
 4814 054e 02DA     		bge	.L310
1557:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4815              		.loc 1 1557 0
 4816 0550 6FF06303 		mvn	r3, #99
 4817 0554 FB64     		str	r3, [r7, #76]
 4818              	.L310:
1558:..\src/interruptions.c **** 
1559:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4819              		.loc 1 1559 0
 4820 0556 7B6C     		ldr	r3, [r7, #68]
 4821 0558 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4822 055c 012B     		cmp	r3, #1
 4823 055e 0ED0     		beq	.L311
1560:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[idx]) >> 10;
 4824              		.loc 1 1560 0
 4825 0560 FB6C     		ldr	r3, [r7, #76]
 4826 0562 9B02     		lsls	r3, r3, #10
 4827 0564 AB4A     		ldr	r2, .L342
 4828 0566 82FB0312 		smull	r1, r2, r2, r3
 4829 056a 5211     		asrs	r2, r2, #5
 4830 056c DB17     		asrs	r3, r3, #31
 4831 056e D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 115


 4832 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4833 0572 A949     		ldr	r1, .L342+4
 4834 0574 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 4835 0576 02FB03F3 		mul	r3, r2, r3
 4836 057a 9B12     		asrs	r3, r3, #10
 4837 057c FB64     		str	r3, [r7, #76]
 4838              	.L311:
1561:..\src/interruptions.c **** 
1562:..\src/interruptions.c ****     //// RATE LIMITER ////
1563:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4839              		.loc 1 1563 0
 4840 057e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4841 0580 A64A     		ldr	r2, .L342+8
 4842 0582 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4843 0586 FA6C     		ldr	r2, [r7, #76]
 4844 0588 D31A     		subs	r3, r2, r3
 4845 058a 7A6C     		ldr	r2, [r7, #68]
 4846 058c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4847 0590 9342     		cmp	r3, r2
 4848 0592 09DD     		ble	.L312
1564:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4849              		.loc 1 1564 0
 4850 0594 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4851 0596 A14A     		ldr	r2, .L342+8
 4852 0598 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4853 059c 7A6C     		ldr	r2, [r7, #68]
 4854 059e 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4855 05a2 1344     		add	r3, r3, r2
 4856 05a4 FB64     		str	r3, [r7, #76]
 4857 05a6 14E0     		b	.L313
 4858              	.L312:
1565:..\src/interruptions.c ****     }
1566:..\src/interruptions.c ****     else {
1567:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4859              		.loc 1 1567 0
 4860 05a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4861 05aa 9C4A     		ldr	r2, .L342+8
 4862 05ac 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4863 05b0 FA6C     		ldr	r2, [r7, #76]
 4864 05b2 D21A     		subs	r2, r2, r3
 4865 05b4 7B6C     		ldr	r3, [r7, #68]
 4866 05b6 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4867 05ba 5B42     		negs	r3, r3
 4868 05bc 9A42     		cmp	r2, r3
 4869 05be 08DA     		bge	.L313
1568:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4870              		.loc 1 1568 0
 4871 05c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4872 05c2 964A     		ldr	r2, .L342+8
 4873 05c4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4874 05c8 7A6C     		ldr	r2, [r7, #68]
 4875 05ca 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4876 05ce 9B1A     		subs	r3, r3, r2
 4877 05d0 FB64     		str	r3, [r7, #76]
 4878              	.L313:
1569:..\src/interruptions.c ****     }
1570:..\src/interruptions.c ****    
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 116


1571:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4879              		.loc 1 1571 0
 4880 05d2 FB6C     		ldr	r3, [r7, #76]
 4881 05d4 642B     		cmp	r3, #100
 4882 05d6 01DD     		ble	.L314
1572:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4883              		.loc 1 1572 0
 4884 05d8 6423     		movs	r3, #100
 4885 05da FB64     		str	r3, [r7, #76]
 4886              	.L314:
1573:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4887              		.loc 1 1573 0
 4888 05dc FB6C     		ldr	r3, [r7, #76]
 4889 05de 13F1640F 		cmn	r3, #100
 4890 05e2 02DA     		bge	.L315
1574:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4891              		.loc 1 1574 0
 4892 05e4 6FF06303 		mvn	r3, #99
 4893 05e8 FB64     		str	r3, [r7, #76]
 4894              	.L315:
1575:..\src/interruptions.c ****     
1576:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4895              		.loc 1 1576 0
 4896 05ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4897 05ec 8B49     		ldr	r1, .L342+8
 4898 05ee FA6C     		ldr	r2, [r7, #76]
 4899 05f0 41F82320 		str	r2, [r1, r3, lsl #2]
1577:..\src/interruptions.c ****            
1578:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 4900              		.loc 1 1578 0
 4901 05f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4902 05f6 FA6C     		ldr	r2, [r7, #76]
 4903 05f8 002A     		cmp	r2, #0
 4904 05fa 01DB     		blt	.L316
 4905              		.loc 1 1578 0 is_stmt 0 discriminator 1
 4906 05fc 0121     		movs	r1, #1
 4907 05fe 01E0     		b	.L317
 4908              	.L316:
 4909              		.loc 1 1578 0 discriminator 2
 4910 0600 4FF0FF31 		mov	r1, #-1
 4911              	.L317:
 4912              		.loc 1 1578 0 discriminator 4
 4913 0604 864A     		ldr	r2, .L342+12
 4914 0606 D154     		strb	r1, [r2, r3]
1579:..\src/interruptions.c ****     
1580:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4915              		.loc 1 1580 0 is_stmt 1 discriminator 4
 4916 0608 7B6C     		ldr	r3, [r7, #68]
 4917 060a 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4918 060e 012B     		cmp	r3, #1
 4919 0610 40F0AA80 		bne	.L318
1581:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1582:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4920              		.loc 1 1582 0
 4921 0614 7B6C     		ldr	r3, [r7, #68]
 4922 0616 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4923 061a 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 117


 4924 061c 00F09F80 		beq	.L319
 4925              		.loc 1 1582 0 is_stmt 0 discriminator 1
 4926 0620 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4927 0624 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4928 0626 7F48     		ldr	r0, .L342+16
 4929 0628 1346     		mov	r3, r2
 4930 062a 5B00     		lsls	r3, r3, #1
 4931 062c 1344     		add	r3, r3, r2
 4932 062e 9B00     		lsls	r3, r3, #2
 4933 0630 1344     		add	r3, r3, r2
 4934 0632 0B44     		add	r3, r3, r1
 4935 0634 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4936 0638 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4937 063c F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4938 063e 7A4C     		ldr	r4, .L342+20
 4939 0640 1346     		mov	r3, r2
 4940 0642 5B00     		lsls	r3, r3, #1
 4941 0644 1344     		add	r3, r3, r2
 4942 0646 9B00     		lsls	r3, r3, #2
 4943 0648 1344     		add	r3, r3, r2
 4944 064a 0344     		add	r3, r3, r0
 4945 064c 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4946 0650 CB1A     		subs	r3, r1, r3
 4947 0652 312B     		cmp	r3, #49
 4948 0654 00F38380 		bgt	.L319
1583:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4949              		.loc 1 1583 0 is_stmt 1 discriminator 2
 4950 0658 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4951 065c F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4952 065e 7148     		ldr	r0, .L342+16
 4953 0660 1346     		mov	r3, r2
 4954 0662 5B00     		lsls	r3, r3, #1
 4955 0664 1344     		add	r3, r3, r2
 4956 0666 9B00     		lsls	r3, r3, #2
 4957 0668 1344     		add	r3, r3, r2
 4958 066a 0B44     		add	r3, r3, r1
 4959 066c 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4960 0670 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4961 0674 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4962 0676 6C4C     		ldr	r4, .L342+20
 4963 0678 1346     		mov	r3, r2
 4964 067a 5B00     		lsls	r3, r3, #1
 4965 067c 1344     		add	r3, r3, r2
 4966 067e 9B00     		lsls	r3, r3, #2
 4967 0680 1344     		add	r3, r3, r2
 4968 0682 0344     		add	r3, r3, r0
 4969 0684 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4970 0688 CB1A     		subs	r3, r1, r3
1582:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4971              		.loc 1 1582 0 discriminator 2
 4972 068a 13F1310F 		cmn	r3, #49
 4973 068e 66DB     		blt	.L319
1584:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4974              		.loc 1 1584 0
 4975 0690 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4976 0692 664A     		ldr	r2, .L342+24
 4977 0694 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 118


 4978 0696 1344     		add	r3, r3, r2
 4979 0698 1A68     		ldr	r2, [r3]
 4980 069a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4981 069c 6449     		ldr	r1, .L342+28
 4982 069e 1B01     		lsls	r3, r3, #4
 4983 06a0 0B44     		add	r3, r3, r1
 4984 06a2 1B68     		ldr	r3, [r3]
 4985 06a4 D31A     		subs	r3, r2, r3
1583:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4986              		.loc 1 1583 0
 4987 06a6 632B     		cmp	r3, #99
 4988 06a8 59DC     		bgt	.L319
 4989              		.loc 1 1584 0
 4990 06aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4991 06ac 5F4A     		ldr	r2, .L342+24
 4992 06ae 1B01     		lsls	r3, r3, #4
 4993 06b0 1344     		add	r3, r3, r2
 4994 06b2 1A68     		ldr	r2, [r3]
 4995 06b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4996 06b6 5E49     		ldr	r1, .L342+28
 4997 06b8 1B01     		lsls	r3, r3, #4
 4998 06ba 0B44     		add	r3, r3, r1
 4999 06bc 1B68     		ldr	r3, [r3]
 5000 06be D31A     		subs	r3, r2, r3
 5001 06c0 13F1630F 		cmn	r3, #99
 5002 06c4 4BDB     		blt	.L319
1585:..\src/interruptions.c ****             position_counter[idx]++;
 5003              		.loc 1 1585 0
 5004 06c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5005 06c8 5A4A     		ldr	r2, .L342+32
 5006 06ca 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5007 06ce 0132     		adds	r2, r2, #1
 5008 06d0 5849     		ldr	r1, .L342+32
 5009 06d2 41F82320 		str	r2, [r1, r3, lsl #2]
1586:..\src/interruptions.c ****             
1587:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5010              		.loc 1 1587 0
 5011 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5012 06d8 564A     		ldr	r2, .L342+32
 5013 06da 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5014 06de F92B     		cmp	r3, #249
 5015 06e0 42D9     		bls	.L318
1588:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5016              		.loc 1 1588 0
 5017 06e2 7B6C     		ldr	r3, [r7, #68]
 5018 06e4 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5019 06e8 002B     		cmp	r3, #0
 5020 06ea 10D1     		bne	.L321
 5021              		.loc 1 1588 0 is_stmt 0 discriminator 1
 5022 06ec 524B     		ldr	r3, .L342+36
 5023 06ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5024 06f0 002B     		cmp	r3, #0
 5025 06f2 0CD1     		bne	.L321
1589:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5026              		.loc 1 1589 0 is_stmt 1
 5027 06f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5028 06f6 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 119


 5029 06fa 4B49     		ldr	r1, .L342+20
 5030 06fc 3420     		movs	r0, #52
 5031 06fe 00FB02F2 		mul	r2, r0, r2
 5032 0702 0A44     		add	r2, r2, r1
 5033 0704 1268     		ldr	r2, [r2]
 5034 0706 4D49     		ldr	r1, .L342+40
 5035 0708 1B01     		lsls	r3, r3, #4
 5036 070a 0B44     		add	r3, r3, r1
 5037 070c 1A60     		str	r2, [r3]
 5038              	.L321:
1590:..\src/interruptions.c ****                 }
1591:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5039              		.loc 1 1591 0
 5040 070e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5041 0710 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5042 0714 4449     		ldr	r1, .L342+20
 5043 0716 3420     		movs	r0, #52
 5044 0718 00FB02F2 		mul	r2, r0, r2
 5045 071c 0A44     		add	r2, r2, r1
 5046 071e 1268     		ldr	r2, [r2]
 5047 0720 4349     		ldr	r1, .L342+28
 5048 0722 1B01     		lsls	r3, r3, #4
 5049 0724 0B44     		add	r3, r3, r1
 5050 0726 1A60     		str	r2, [r3]
1592:..\src/interruptions.c ****                 
1593:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5051              		.loc 1 1593 0
 5052 0728 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5053 072a 424A     		ldr	r2, .L342+32
 5054 072c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5055 0730 FA2B     		cmp	r3, #250
 5056 0732 11D1     		bne	.L322
1594:..\src/interruptions.c ****                     // To do only once
1595:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5057              		.loc 1 1595 0
 5058 0734 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5059 0738 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5060 073c 3A49     		ldr	r1, .L342+20
 5061 073e 3420     		movs	r0, #52
 5062 0740 00FB02F2 		mul	r2, r0, r2
 5063 0744 0A44     		add	r2, r2, r1
 5064 0746 0C32     		adds	r2, r2, #12
 5065 0748 1268     		ldr	r2, [r2]
 5066 074a 3749     		ldr	r1, .L342+20
 5067 074c 3420     		movs	r0, #52
 5068 074e 00FB03F3 		mul	r3, r0, r3
 5069 0752 0B44     		add	r3, r3, r1
 5070 0754 1433     		adds	r3, r3, #20
 5071 0756 1A60     		str	r2, [r3]
 5072              	.L322:
1596:..\src/interruptions.c ****                 }
1597:..\src/interruptions.c ****                 pwm_input = 0;            
 5073              		.loc 1 1597 0
 5074 0758 0023     		movs	r3, #0
 5075 075a FB64     		str	r3, [r7, #76]
1587:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5076              		.loc 1 1587 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 120


 5077 075c 04E0     		b	.L318
 5078              	.L319:
1598:..\src/interruptions.c ****             }
1599:..\src/interruptions.c ****         }
1600:..\src/interruptions.c ****         else {
1601:..\src/interruptions.c ****             position_counter[idx] = 0;
 5079              		.loc 1 1601 0
 5080 075e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5081 0760 344A     		ldr	r2, .L342+32
 5082 0762 0021     		movs	r1, #0
 5083 0764 42F82310 		str	r1, [r2, r3, lsl #2]
 5084              	.L318:
1602:..\src/interruptions.c ****         }
1603:..\src/interruptions.c ****     }
1604:..\src/interruptions.c ****     
1605:..\src/interruptions.c ****     // Set motor direction and write pwm value
1606:..\src/interruptions.c ****     switch (idx) {
 5085              		.loc 1 1606 0
 5086 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5087 076a 002B     		cmp	r3, #0
 5088 076c 02D0     		beq	.L324
 5089 076e 012B     		cmp	r3, #1
 5090 0770 26D0     		beq	.L325
1607:..\src/interruptions.c ****         case 0:         // Motor 1
1608:..\src/interruptions.c ****             if (motor_dir[idx])
1609:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1610:..\src/interruptions.c ****             else
1611:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1612:..\src/interruptions.c ****             
1613:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1614:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1615:..\src/interruptions.c ****             }
1616:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1617:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1618:..\src/interruptions.c ****             }
1619:..\src/interruptions.c ****             
1620:..\src/interruptions.c ****             break;
1621:..\src/interruptions.c ****         case 1:         // Motor 2
1622:..\src/interruptions.c ****             
1623:..\src/interruptions.c ****             if (motor_dir[idx])
1624:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1625:..\src/interruptions.c ****             else
1626:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1627:..\src/interruptions.c ****             
1628:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1629:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1630:..\src/interruptions.c ****             }
1631:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1632:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1633:..\src/interruptions.c ****             }
1634:..\src/interruptions.c ****             
1635:..\src/interruptions.c ****             break;
1636:..\src/interruptions.c ****         default:
1637:..\src/interruptions.c ****             break;
 5091              		.loc 1 1637 0
 5092 0772 4BE0     		b	.L330
 5093              	.L324:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 121


1608:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5094              		.loc 1 1608 0
 5095 0774 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5096 0776 324A     		ldr	r2, .L342+44
 5097 0778 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5098 077a 002B     		cmp	r3, #0
 5099 077c 03D0     		beq	.L326
1609:..\src/interruptions.c ****             else
 5100              		.loc 1 1609 0
 5101 077e 0120     		movs	r0, #1
 5102 0780 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5103 0784 02E0     		b	.L327
 5104              	.L326:
1611:..\src/interruptions.c ****             
 5105              		.loc 1 1611 0
 5106 0786 0020     		movs	r0, #0
 5107 0788 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5108              	.L327:
1613:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 5109              		.loc 1 1613 0
 5110 078c 7B6C     		ldr	r3, [r7, #68]
 5111 078e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5112 0792 012B     		cmp	r3, #1
 5113 0794 0BD1     		bne	.L328
1614:..\src/interruptions.c ****             }
 5114              		.loc 1 1614 0
 5115 0796 FB6C     		ldr	r3, [r7, #76]
 5116 0798 002B     		cmp	r3, #0
 5117 079a B8BF     		it	lt
 5118 079c 5B42     		rsblt	r3, r3, #0
 5119 079e DBB2     		uxtb	r3, r3
 5120 07a0 C3F16403 		rsb	r3, r3, #100
 5121 07a4 DBB2     		uxtb	r3, r3
 5122 07a6 1846     		mov	r0, r3
 5123 07a8 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1620:..\src/interruptions.c ****         case 1:         // Motor 2
 5124              		.loc 1 1620 0
 5125 07ac 2EE0     		b	.L330
 5126              	.L328:
1617:..\src/interruptions.c ****             }
 5127              		.loc 1 1617 0
 5128 07ae FB6C     		ldr	r3, [r7, #76]
 5129 07b0 002B     		cmp	r3, #0
 5130 07b2 B8BF     		it	lt
 5131 07b4 5B42     		rsblt	r3, r3, #0
 5132 07b6 DBB2     		uxtb	r3, r3
 5133 07b8 1846     		mov	r0, r3
 5134 07ba FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1620:..\src/interruptions.c ****         case 1:         // Motor 2
 5135              		.loc 1 1620 0
 5136 07be 25E0     		b	.L330
 5137              	.L325:
1623:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5138              		.loc 1 1623 0
 5139 07c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5140 07c2 1F4A     		ldr	r2, .L342+44
 5141 07c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 122


 5142 07c6 002B     		cmp	r3, #0
 5143 07c8 03D0     		beq	.L331
1624:..\src/interruptions.c ****             else
 5144              		.loc 1 1624 0
 5145 07ca 0120     		movs	r0, #1
 5146 07cc FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5147 07d0 02E0     		b	.L332
 5148              	.L331:
1626:..\src/interruptions.c ****             
 5149              		.loc 1 1626 0
 5150 07d2 0020     		movs	r0, #0
 5151 07d4 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5152              	.L332:
1628:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 5153              		.loc 1 1628 0
 5154 07d8 7B6C     		ldr	r3, [r7, #68]
 5155 07da 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5156 07de 012B     		cmp	r3, #1
 5157 07e0 0BD1     		bne	.L333
1629:..\src/interruptions.c ****             }
 5158              		.loc 1 1629 0
 5159 07e2 FB6C     		ldr	r3, [r7, #76]
 5160 07e4 002B     		cmp	r3, #0
 5161 07e6 B8BF     		it	lt
 5162 07e8 5B42     		rsblt	r3, r3, #0
 5163 07ea DBB2     		uxtb	r3, r3
 5164 07ec C3F16403 		rsb	r3, r3, #100
 5165 07f0 DBB2     		uxtb	r3, r3
 5166 07f2 1846     		mov	r0, r3
 5167 07f4 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1635:..\src/interruptions.c ****         default:
 5168              		.loc 1 1635 0
 5169 07f8 07E0     		b	.L337
 5170              	.L333:
1632:..\src/interruptions.c ****             }
 5171              		.loc 1 1632 0
 5172 07fa FB6C     		ldr	r3, [r7, #76]
 5173 07fc 002B     		cmp	r3, #0
 5174 07fe B8BF     		it	lt
 5175 0800 5B42     		rsblt	r3, r3, #0
 5176 0802 DBB2     		uxtb	r3, r3
 5177 0804 1846     		mov	r0, r3
 5178 0806 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5179              	.L337:
1635:..\src/interruptions.c ****         default:
 5180              		.loc 1 1635 0
 5181 080a 00BF     		nop
 5182              	.L330:
1638:..\src/interruptions.c ****     }
1639:..\src/interruptions.c ****     
1640:..\src/interruptions.c **** }
 5183              		.loc 1 1640 0
 5184 080c 00BF     		nop
 5185 080e 5437     		adds	r7, r7, #84
 5186              		.cfi_def_cfa_offset 12
 5187 0810 BD46     		mov	sp, r7
 5188              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 123


 5189              		@ sp needed
 5190 0812 90BD     		pop	{r4, r7, pc}
 5191              	.L343:
 5192              		.align	2
 5193              	.L342:
 5194 0814 1F85EB51 		.word	1374389535
 5195 0818 00000000 		.word	dev_pwm_limit
 5196 081c D0000000 		.word	prev_pwm.10593
 5197 0820 00000000 		.word	pwm_sign
 5198 0824 00000000 		.word	g_measOld
 5199 0828 00000000 		.word	g_meas
 5200 082c 00000000 		.word	g_refOld
 5201 0830 00000000 		.word	g_ref
 5202 0834 D8000000 		.word	position_counter.10595
 5203 0838 00000000 		.word	change_ext_ref_flag
 5204 083c 00000000 		.word	g_refNew
 5205 0840 BC000000 		.word	motor_dir.10594
 5206              		.cfi_endproc
 5207              	.LFE72:
 5208              		.size	motor_control_generic, .-motor_control_generic
 5209              		.global	__aeabi_fcmpeq
 5210              		.global	__aeabi_fmul
 5211              		.global	__aeabi_f2iz
 5212              		.global	__aeabi_fcmplt
 5213              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5214              		.align	2
 5215              		.global	encoder_reading_SPI
 5216              		.thumb
 5217              		.thumb_func
 5218              		.type	encoder_reading_SPI, %function
 5219              	encoder_reading_SPI:
 5220              	.LFB73:
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c **** //==============================================================================
1643:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1644:..\src/interruptions.c **** //==============================================================================
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5221              		.loc 1 1646 0
 5222              		.cfi_startproc
 5223              		@ args = 0, pretend = 0, frame = 48
 5224              		@ frame_needed = 1, uses_anonymous_args = 0
 5225 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5226              		.cfi_def_cfa_offset 20
 5227              		.cfi_offset 4, -20
 5228              		.cfi_offset 5, -16
 5229              		.cfi_offset 6, -12
 5230              		.cfi_offset 7, -8
 5231              		.cfi_offset 14, -4
 5232 0002 8FB0     		sub	sp, sp, #60
 5233              		.cfi_def_cfa_offset 80
 5234 0004 02AF     		add	r7, sp, #8
 5235              		.cfi_def_cfa 7, 72
 5236 0006 0346     		mov	r3, r0
 5237 0008 0A46     		mov	r2, r1
 5238 000a FB71     		strb	r3, [r7, #7]
 5239 000c 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 124


 5240 000e BB71     		strb	r3, [r7, #6]
1647:..\src/interruptions.c **** 
1648:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5241              		.loc 1 1648 0
 5242 0010 0023     		movs	r3, #0
 5243 0012 87F82F30 		strb	r3, [r7, #47]
1649:..\src/interruptions.c ****     
1650:..\src/interruptions.c ****     // Encoder Variables  
1651:..\src/interruptions.c ****     uint8 jj;
1652:..\src/interruptions.c ****      
1653:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1654:..\src/interruptions.c ****     int16 tmp_value_encoder;
1655:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1656:..\src/interruptions.c ****     int32 value_encoder;
1657:..\src/interruptions.c ****     int32 speed_encoder;
1658:..\src/interruptions.c ****     int32 value_diff;
1659:..\src/interruptions.c **** 	int8 init_rot = 0;
 5244              		.loc 1 1659 0
 5245 0016 0023     		movs	r3, #0
 5246 0018 87F82730 		strb	r3, [r7, #39]
1660:..\src/interruptions.c **** 
1661:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1662:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1663:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1664:..\src/interruptions.c ****     
1665:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1666:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1667:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1668:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1669:..\src/interruptions.c **** 
1670:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1671:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1672:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1673:..\src/interruptions.c ****     
1674:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5247              		.loc 1 1674 0
 5248 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5249 001e 924A     		ldr	r2, .L381
 5250 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5251 0022 002B     		cmp	r3, #0
 5252 0024 19D0     		beq	.L345
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5253              		.loc 1 1675 0
 5254 0026 0323     		movs	r3, #3
 5255 0028 87F82E30 		strb	r3, [r7, #46]
 5256 002c 0AE0     		b	.L346
 5257              	.L347:
1676:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5258              		.loc 1 1676 0
 5259 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5260 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5261 0034 8D48     		ldr	r0, .L381+4
 5262 0036 1346     		mov	r3, r2
 5263 0038 5B00     		lsls	r3, r3, #1
 5264 003a 1344     		add	r3, r3, r2
 5265 003c 0B44     		add	r3, r3, r1
 5266 003e 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 125


 5267 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5268              	.L346:
1675:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5269              		.loc 1 1675 0 discriminator 1
 5270 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5271 0048 5A1E     		subs	r2, r3, #1
 5272 004a 87F82E20 		strb	r2, [r7, #46]
 5273 004e 002B     		cmp	r3, #0
 5274 0050 EDD1     		bne	.L347
1677:..\src/interruptions.c ****         
1678:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5275              		.loc 1 1678 0
 5276 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5277 0054 844A     		ldr	r2, .L381
 5278 0056 0021     		movs	r1, #0
 5279 0058 D154     		strb	r1, [r2, r3]
 5280              	.L345:
1679:..\src/interruptions.c ****     }
1680:..\src/interruptions.c **** 
1681:..\src/interruptions.c ****     //======================================================     reading sensors
1682:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5281              		.loc 1 1682 0
 5282 005a 0023     		movs	r3, #0
 5283 005c 87F82F30 		strb	r3, [r7, #47]
 5284 0060 0DE0     		b	.L348
 5285              	.L349:
1683:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5286              		.loc 1 1683 0 discriminator 3
 5287 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5288 0066 9B00     		lsls	r3, r3, #2
 5289 0068 07F13002 		add	r2, r7, #48
 5290 006c 1344     		add	r3, r3, r2
 5291 006e 0022     		movs	r2, #0
 5292 0070 43F8282C 		str	r2, [r3, #-40]
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5293              		.loc 1 1682 0 discriminator 3
 5294 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5295 0078 0133     		adds	r3, r3, #1
 5296 007a 87F82F30 		strb	r3, [r7, #47]
 5297              	.L348:
1682:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5298              		.loc 1 1682 0 is_stmt 0 discriminator 1
 5299 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5300 0082 022B     		cmp	r3, #2
 5301 0084 EDD9     		bls	.L349
1684:..\src/interruptions.c ****     }   
1685:..\src/interruptions.c ****     
1686:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5302              		.loc 1 1686 0 is_stmt 1
 5303 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5304 0088 794A     		ldr	r2, .L381+8
 5305 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5306 008c 1A46     		mov	r2, r3
 5307 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5308 0090 1946     		mov	r1, r3
 5309 0092 1046     		mov	r0, r2
 5310 0094 FFF7FEFF 		bl	ReadEncoderLine
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 126


 5311              	.LBB10:
1687:..\src/interruptions.c ****                                                                         //CS1 for left hand
1688:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5312              		.loc 1 1688 0
 5313 0098 0023     		movs	r3, #0
 5314 009a 3B62     		str	r3, [r7, #32]
 5315 009c 2EE0     		b	.L350
 5316              	.L352:
1689:..\src/interruptions.c ****         
1690:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1691:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5317              		.loc 1 1691 0
 5318 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5319 00a0 7449     		ldr	r1, .L381+12
 5320 00a2 1346     		mov	r3, r2
 5321 00a4 5B00     		lsls	r3, r3, #1
 5322 00a6 1344     		add	r3, r3, r2
 5323 00a8 1B01     		lsls	r3, r3, #4
 5324 00aa CA18     		adds	r2, r1, r3
 5325 00ac 3B6A     		ldr	r3, [r7, #32]
 5326 00ae 1344     		add	r3, r3, r2
 5327 00b0 03F2B113 		addw	r3, r3, #433
 5328 00b4 1B78     		ldrb	r3, [r3]
 5329 00b6 87F82F30 		strb	r3, [r7, #47]
1692:..\src/interruptions.c ****         
1693:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5330              		.loc 1 1693 0
 5331 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5332 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5333 00c0 6D48     		ldr	r0, .L381+16
 5334 00c2 1346     		mov	r3, r2
 5335 00c4 9B00     		lsls	r3, r3, #2
 5336 00c6 1344     		add	r3, r3, r2
 5337 00c8 0344     		add	r3, r3, r0
 5338 00ca 0B44     		add	r3, r3, r1
 5339 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5340 00ce 0F2B     		cmp	r3, #15
 5341 00d0 11D9     		bls	.L351
1694:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5342              		.loc 1 1694 0
 5343 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5344 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5345 00d8 6848     		ldr	r0, .L381+20
 5346 00da 1346     		mov	r3, r2
 5347 00dc 9B00     		lsls	r3, r3, #2
 5348 00de 1344     		add	r3, r3, r2
 5349 00e0 0B44     		add	r3, r3, r1
 5350 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5351 00e6 1A46     		mov	r2, r3
 5352 00e8 3B6A     		ldr	r3, [r7, #32]
 5353 00ea 9B00     		lsls	r3, r3, #2
 5354 00ec 07F13001 		add	r1, r7, #48
 5355 00f0 0B44     		add	r3, r3, r1
 5356 00f2 43F8282C 		str	r2, [r3, #-40]
 5357              	.L351:
1688:..\src/interruptions.c ****         
 5358              		.loc 1 1688 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 127


 5359 00f6 3B6A     		ldr	r3, [r7, #32]
 5360 00f8 0133     		adds	r3, r3, #1
 5361 00fa 3B62     		str	r3, [r7, #32]
 5362              	.L350:
1688:..\src/interruptions.c ****         
 5363              		.loc 1 1688 0 is_stmt 0 discriminator 1
 5364 00fc 3B6A     		ldr	r3, [r7, #32]
 5365 00fe 022B     		cmp	r3, #2
 5366 0100 CDDD     		ble	.L352
 5367              	.LBE10:
1695:..\src/interruptions.c ****         }
1696:..\src/interruptions.c ****     }
1697:..\src/interruptions.c ****     
1698:..\src/interruptions.c ****     // S = SIGN BIT
1699:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1700:..\src/interruptions.c ****     // 0 = 0 BIT
1701:..\src/interruptions.c ****     // C = CONTROL BIT
1702:..\src/interruptions.c ****     
1703:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5368              		.loc 1 1703 0 is_stmt 1
 5369 0102 0023     		movs	r3, #0
 5370 0104 87F82F30 		strb	r3, [r7, #47]
 5371 0108 35E3     		b	.L353
 5372              	.L374:
1704:..\src/interruptions.c ****         
1705:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5373              		.loc 1 1705 0
 5374 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5375 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5376 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5377 0114 9B00     		lsls	r3, r3, #2
 5378 0116 07F13001 		add	r1, r7, #48
 5379 011a 0B44     		add	r3, r3, r1
 5380 011c 53F8281C 		ldr	r1, [r3, #-40]
 5381 0120 574C     		ldr	r4, .L381+24
 5382 0122 1346     		mov	r3, r2
 5383 0124 9B00     		lsls	r3, r3, #2
 5384 0126 1344     		add	r3, r3, r2
 5385 0128 0344     		add	r3, r3, r0
 5386 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1706:..\src/interruptions.c ****         
1707:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5387              		.loc 1 1707 0
 5388 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5389 0132 9B00     		lsls	r3, r3, #2
 5390 0134 07F13002 		add	r2, r7, #48
 5391 0138 1344     		add	r3, r3, r2
 5392 013a 53F8283C 		ldr	r3, [r3, #-40]
 5393 013e 99B2     		uxth	r1, r3
 5394 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5395 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5396 0146 4F4C     		ldr	r4, .L381+28
 5397 0148 1346     		mov	r3, r2
 5398 014a 5B00     		lsls	r3, r3, #1
 5399 014c 1344     		add	r3, r3, r2
 5400 014e 9B00     		lsls	r3, r3, #2
 5401 0150 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 128


 5402 0152 6633     		adds	r3, r3, #102
 5403 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5404 0158 9BB2     		uxth	r3, r3
 5405 015a CB1A     		subs	r3, r1, r3
 5406 015c 9BB2     		uxth	r3, r3
 5407 015e BB85     		strh	r3, [r7, #44]	@ movhi
1708:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5408              		.loc 1 1708 0
 5409 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5410 0164 002B     		cmp	r3, #0
 5411 0166 04DA     		bge	.L354
1709:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5412              		.loc 1 1709 0
 5413 0168 BB8D     		ldrh	r3, [r7, #44]
 5414 016a 03F58053 		add	r3, r3, #4096
 5415 016e 9BB2     		uxth	r3, r3
 5416 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5417              	.L354:
1710:..\src/interruptions.c ****         }       // Range [0, 4096]
1711:..\src/interruptions.c **** 
1712:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5418              		.loc 1 1712 0
 5419 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5420 0176 B3F5006F 		cmp	r3, #2048
 5421 017a 04DB     		blt	.L355
1713:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5422              		.loc 1 1713 0
 5423 017c BB8D     		ldrh	r3, [r7, #44]
 5424 017e A3F58053 		sub	r3, r3, #4096
 5425 0182 9BB2     		uxth	r3, r3
 5426 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5427              	.L355:
1714:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1715:..\src/interruptions.c **** 
1716:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5428              		.loc 1 1716 0
 5429 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5430 018a 1B01     		lsls	r3, r3, #4
 5431 018c FB61     		str	r3, [r7, #28]
1717:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5432              		.loc 1 1717 0
 5433 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5434 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5435 0194 3C48     		ldr	r0, .L381+32
 5436 0196 1346     		mov	r3, r2
 5437 0198 5B00     		lsls	r3, r3, #1
 5438 019a 1344     		add	r3, r3, r2
 5439 019c 0B44     		add	r3, r3, r1
 5440 019e FA69     		ldr	r2, [r7, #28]
 5441 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1718:..\src/interruptions.c **** 
1719:..\src/interruptions.c ****         // Initialize last_value_encoder
1720:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5442              		.loc 1 1720 0
 5443 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5444 01a6 394A     		ldr	r2, .L381+36
 5445 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 129


 5446 01aa 002B     		cmp	r3, #0
 5447 01ac 12D0     		beq	.L356
1721:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5448              		.loc 1 1721 0
 5449 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5450 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5451 01b4 2D48     		ldr	r0, .L381+4
 5452 01b6 1346     		mov	r3, r2
 5453 01b8 5B00     		lsls	r3, r3, #1
 5454 01ba 1344     		add	r3, r3, r2
 5455 01bc 0B44     		add	r3, r3, r1
 5456 01be FA69     		ldr	r2, [r7, #28]
 5457 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1722:..\src/interruptions.c ****             if (index == 2)
 5458              		.loc 1 1722 0
 5459 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5460 01c8 022B     		cmp	r3, #2
 5461 01ca 03D1     		bne	.L356
1723:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5462              		.loc 1 1723 0
 5463 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5464 01ce 2F4A     		ldr	r2, .L381+36
 5465 01d0 0021     		movs	r1, #0
 5466 01d2 D154     		strb	r1, [r2, r3]
 5467              	.L356:
1724:..\src/interruptions.c ****         }
1725:..\src/interruptions.c **** 
1726:..\src/interruptions.c ****         // Take care of rotations
1727:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5468              		.loc 1 1727 0
 5469 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5470 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5471 01da 2448     		ldr	r0, .L381+4
 5472 01dc 1346     		mov	r3, r2
 5473 01de 5B00     		lsls	r3, r3, #1
 5474 01e0 1344     		add	r3, r3, r2
 5475 01e2 0B44     		add	r3, r3, r1
 5476 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5477 01e8 FA69     		ldr	r2, [r7, #28]
 5478 01ea D31A     		subs	r3, r2, r3
 5479 01ec BB61     		str	r3, [r7, #24]
1728:..\src/interruptions.c **** 
1729:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1730:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1731:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1732:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1733:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1734:..\src/interruptions.c ****         //                                               |           |
1735:..\src/interruptions.c ****         //                                           24575           -24576
1736:..\src/interruptions.c ****         //                                               |___________|
1737:..\src/interruptions.c ****         //                                                   49152
1738:..\src/interruptions.c **** 
1739:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1740:..\src/interruptions.c ****         // and update the variable only if the difference between
1741:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1742:..\src/interruptions.c **** 
1743:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 130


1744:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1745:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1746:..\src/interruptions.c **** 
1747:..\src/interruptions.c ****         if (value_diff > 49152)
 5480              		.loc 1 1747 0
 5481 01ee BB69     		ldr	r3, [r7, #24]
 5482 01f0 B3F5404F 		cmp	r3, #49152
 5483 01f4 19DD     		ble	.L357
1748:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5484              		.loc 1 1748 0
 5485 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5486 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5487 01fc 2448     		ldr	r0, .L381+40
 5488 01fe 3421     		movs	r1, #52
 5489 0200 01FB02F1 		mul	r1, r1, r2
 5490 0204 0144     		add	r1, r1, r0
 5491 0206 1944     		add	r1, r1, r3
 5492 0208 1831     		adds	r1, r1, #24
 5493 020a 91F90010 		ldrsb	r1, [r1]
 5494 020e C9B2     		uxtb	r1, r1
 5495 0210 0139     		subs	r1, r1, #1
 5496 0212 C9B2     		uxtb	r1, r1
 5497 0214 4CB2     		sxtb	r4, r1
 5498 0216 1E49     		ldr	r1, .L381+40
 5499 0218 3420     		movs	r0, #52
 5500 021a 00FB02F2 		mul	r2, r0, r2
 5501 021e 0A44     		add	r2, r2, r1
 5502 0220 1344     		add	r3, r3, r2
 5503 0222 1833     		adds	r3, r3, #24
 5504 0224 2246     		mov	r2, r4
 5505 0226 1A70     		strb	r2, [r3]
 5506 0228 5CE0     		b	.L358
 5507              	.L357:
1749:..\src/interruptions.c ****         else{ 
1750:..\src/interruptions.c ****             if (value_diff < -49152)
 5508              		.loc 1 1750 0
 5509 022a BB69     		ldr	r3, [r7, #24]
 5510 022c 13F5404F 		cmn	r3, #49152
 5511 0230 30DA     		bge	.L359
1751:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5512              		.loc 1 1751 0
 5513 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5514 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5515 0238 1548     		ldr	r0, .L381+40
 5516 023a 3421     		movs	r1, #52
 5517 023c 01FB02F1 		mul	r1, r1, r2
 5518 0240 0144     		add	r1, r1, r0
 5519 0242 1944     		add	r1, r1, r3
 5520 0244 1831     		adds	r1, r1, #24
 5521 0246 91F90010 		ldrsb	r1, [r1]
 5522 024a C9B2     		uxtb	r1, r1
 5523 024c 0131     		adds	r1, r1, #1
 5524 024e C9B2     		uxtb	r1, r1
 5525 0250 4CB2     		sxtb	r4, r1
 5526 0252 0F49     		ldr	r1, .L381+40
 5527 0254 3420     		movs	r0, #52
 5528 0256 00FB02F2 		mul	r2, r0, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 131


 5529 025a 0A44     		add	r2, r2, r1
 5530 025c 1344     		add	r3, r3, r2
 5531 025e 1833     		adds	r3, r3, #24
 5532 0260 2246     		mov	r2, r4
 5533 0262 1A70     		strb	r2, [r3]
 5534 0264 3EE0     		b	.L358
 5535              	.L382:
 5536 0266 00BF     		.align	2
 5537              	.L381:
 5538 0268 00000000 		.word	reset_last_value_flag
 5539 026c E0000000 		.word	last_value_encoder.10618
 5540 0270 00000000 		.word	N_Encoder_Line_Connected
 5541 0274 00000000 		.word	c_mem
 5542 0278 00000000 		.word	Encoder_Check
 5543 027c 00000000 		.word	Encoder_Value
 5544 0280 00000000 		.word	data_encoder_raw
 5545 0284 00000000 		.word	g_mem
 5546 0288 F8000000 		.word	comp_value_encoder.10619
 5547 028c 04000000 		.word	only_first_time.10621
 5548 0290 00000000 		.word	g_meas
 5549              	.L359:
1752:..\src/interruptions.c ****             else{
1753:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5550              		.loc 1 1753 0
 5551 0294 BB69     		ldr	r3, [r7, #24]
 5552 0296 002B     		cmp	r3, #0
 5553 0298 B8BF     		it	lt
 5554 029a 5B42     		rsblt	r3, r3, #0
 5555 029c B3F5804F 		cmp	r3, #16384
 5556 02a0 20DD     		ble	.L358
1754:..\src/interruptions.c ****                     error[n_line][index]++;
 5557              		.loc 1 1754 0
 5558 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5559 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5560 02a8 9B48     		ldr	r0, .L383
 5561 02aa 1346     		mov	r3, r2
 5562 02ac 5B00     		lsls	r3, r3, #1
 5563 02ae 1344     		add	r3, r3, r2
 5564 02b0 0344     		add	r3, r3, r0
 5565 02b2 0B44     		add	r3, r3, r1
 5566 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5567 02b6 0133     		adds	r3, r3, #1
 5568 02b8 DCB2     		uxtb	r4, r3
 5569 02ba 9748     		ldr	r0, .L383
 5570 02bc 1346     		mov	r3, r2
 5571 02be 5B00     		lsls	r3, r3, #1
 5572 02c0 1344     		add	r3, r3, r2
 5573 02c2 0344     		add	r3, r3, r0
 5574 02c4 0B44     		add	r3, r3, r1
 5575 02c6 2246     		mov	r2, r4
 5576 02c8 1A70     		strb	r2, [r3]
1755:..\src/interruptions.c ****                                 
1756:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5577              		.loc 1 1756 0
 5578 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5579 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5580 02d0 9148     		ldr	r0, .L383
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 132


 5581 02d2 1346     		mov	r3, r2
 5582 02d4 5B00     		lsls	r3, r3, #1
 5583 02d6 1344     		add	r3, r3, r2
 5584 02d8 0344     		add	r3, r3, r0
 5585 02da 0B44     		add	r3, r3, r1
 5586 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5587 02de 092B     		cmp	r3, #9
 5588 02e0 40F28882 		bls	.L380
 5589              	.L358:
1757:..\src/interruptions.c ****                         // Discard
1758:..\src/interruptions.c ****                         return;
1759:..\src/interruptions.c ****                 }
1760:..\src/interruptions.c ****             }
1761:..\src/interruptions.c ****         }
1762:..\src/interruptions.c **** 
1763:..\src/interruptions.c ****         error[n_line][index] = 0;
 5590              		.loc 1 1763 0
 5591 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5592 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5593 02ea 8B48     		ldr	r0, .L383
 5594 02ec 1346     		mov	r3, r2
 5595 02ee 5B00     		lsls	r3, r3, #1
 5596 02f0 1344     		add	r3, r3, r2
 5597 02f2 0344     		add	r3, r3, r0
 5598 02f4 0B44     		add	r3, r3, r1
 5599 02f6 0022     		movs	r2, #0
 5600 02f8 1A70     		strb	r2, [r3]
1764:..\src/interruptions.c ****         
1765:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5601              		.loc 1 1765 0
 5602 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5603 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5604 0300 8648     		ldr	r0, .L383+4
 5605 0302 1346     		mov	r3, r2
 5606 0304 5B00     		lsls	r3, r3, #1
 5607 0306 1344     		add	r3, r3, r2
 5608 0308 0B44     		add	r3, r3, r1
 5609 030a FA69     		ldr	r2, [r7, #28]
 5610 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1766:..\src/interruptions.c **** 
1767:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5611              		.loc 1 1767 0
 5612 0310 FB69     		ldr	r3, [r7, #28]
 5613 0312 BB62     		str	r3, [r7, #40]
1768:..\src/interruptions.c **** 
1769:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5614              		.loc 1 1769 0
 5615 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5616 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5617 031a 8149     		ldr	r1, .L383+8
 5618 031c 3420     		movs	r0, #52
 5619 031e 00FB02F2 		mul	r2, r0, r2
 5620 0322 0A44     		add	r2, r2, r1
 5621 0324 1344     		add	r3, r3, r2
 5622 0326 1833     		adds	r3, r3, #24
 5623 0328 93F90030 		ldrsb	r3, [r3]
 5624 032c 1B04     		lsls	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 133


 5625 032e BA6A     		ldr	r2, [r7, #40]
 5626 0330 1344     		add	r3, r3, r2
 5627 0332 BB62     		str	r3, [r7, #40]
1770:..\src/interruptions.c ****         
1771:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5628              		.loc 1 1771 0
 5629 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5630 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5631 033a 7A48     		ldr	r0, .L383+12
 5632 033c 1346     		mov	r3, r2
 5633 033e 5B00     		lsls	r3, r3, #1
 5634 0340 1344     		add	r3, r3, r2
 5635 0342 9B00     		lsls	r3, r3, #2
 5636 0344 0B44     		add	r3, r3, r1
 5637 0346 6833     		adds	r3, r3, #104
 5638 0348 9B00     		lsls	r3, r3, #2
 5639 034a 0344     		add	r3, r3, r0
 5640 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5641 034e 4FF07E51 		mov	r1, #1065353216
 5642 0352 1846     		mov	r0, r3
 5643 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5644 0358 0346     		mov	r3, r0
 5645 035a 002B     		cmp	r3, #0
 5646 035c 1AD1     		bne	.L361
1772:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5647              		.loc 1 1772 0
 5648 035e B86A     		ldr	r0, [r7, #40]
 5649 0360 FFF7FEFF 		bl	__aeabi_i2f
 5650 0364 0446     		mov	r4, r0
 5651 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5652 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5653 036c 6D48     		ldr	r0, .L383+12
 5654 036e 1346     		mov	r3, r2
 5655 0370 5B00     		lsls	r3, r3, #1
 5656 0372 1344     		add	r3, r3, r2
 5657 0374 9B00     		lsls	r3, r3, #2
 5658 0376 0B44     		add	r3, r3, r1
 5659 0378 6833     		adds	r3, r3, #104
 5660 037a 9B00     		lsls	r3, r3, #2
 5661 037c 0344     		add	r3, r3, r0
 5662 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5663 0380 1946     		mov	r1, r3
 5664 0382 2046     		mov	r0, r4
 5665 0384 FFF7FEFF 		bl	__aeabi_fmul
 5666 0388 0346     		mov	r3, r0
 5667 038a 1846     		mov	r0, r3
 5668 038c FFF7FEFF 		bl	__aeabi_f2iz
 5669 0390 0346     		mov	r3, r0
 5670 0392 BB62     		str	r3, [r7, #40]
 5671              	.L361:
1773:..\src/interruptions.c ****         }
1774:..\src/interruptions.c **** 
1775:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5672              		.loc 1 1775 0
 5673 0394 634B     		ldr	r3, .L383+12
 5674 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5675 039a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 134


 5676 039c 0BD1     		bne	.L363
1776:..\src/interruptions.c ****             // Right / Left hand turn
1777:..\src/interruptions.c ****             if (index == 0) {
 5677              		.loc 1 1777 0
 5678 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5679 03a2 002B     		cmp	r3, #0
 5680 03a4 07D1     		bne	.L363
1778:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5681              		.loc 1 1778 0
 5682 03a6 5F4B     		ldr	r3, .L383+12
 5683 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5684 03ac 002B     		cmp	r3, #0
 5685 03ae 02D1     		bne	.L363
1779:..\src/interruptions.c ****                     value_encoder *= -1;        
 5686              		.loc 1 1779 0
 5687 03b0 BB6A     		ldr	r3, [r7, #40]
 5688 03b2 5B42     		negs	r3, r3
 5689 03b4 BB62     		str	r3, [r7, #40]
 5690              	.L363:
1780:..\src/interruptions.c ****                 }
1781:..\src/interruptions.c ****             }
1782:..\src/interruptions.c ****         } 
1783:..\src/interruptions.c ****         
1784:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5691              		.loc 1 1784 0
 5692 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5693 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5694 03bc 5848     		ldr	r0, .L383+8
 5695 03be 1346     		mov	r3, r2
 5696 03c0 5B00     		lsls	r3, r3, #1
 5697 03c2 1344     		add	r3, r3, r2
 5698 03c4 9B00     		lsls	r3, r3, #2
 5699 03c6 1344     		add	r3, r3, r2
 5700 03c8 0B44     		add	r3, r3, r1
 5701 03ca BA6A     		ldr	r2, [r7, #40]
 5702 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1785:..\src/interruptions.c ****     
1786:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5703              		.loc 1 1786 0
 5704 03d0 BA6A     		ldr	r2, [r7, #40]
 5705 03d2 1346     		mov	r3, r2
 5706 03d4 9B00     		lsls	r3, r3, #2
 5707 03d6 1344     		add	r3, r3, r2
 5708 03d8 5B00     		lsls	r3, r3, #1
 5709 03da 9918     		adds	r1, r3, r2
 5710 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5711 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5712 03e2 514C     		ldr	r4, .L383+16
 5713 03e4 1346     		mov	r3, r2
 5714 03e6 5B00     		lsls	r3, r3, #1
 5715 03e8 1344     		add	r3, r3, r2
 5716 03ea 0344     		add	r3, r3, r0
 5717 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5718 03f0 6FF01102 		mvn	r2, #17
 5719 03f4 02FB03F3 		mul	r3, r2, r3
 5720 03f8 1944     		add	r1, r1, r3
 5721 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 135


 5722 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5723 0400 4A4C     		ldr	r4, .L383+20
 5724 0402 1346     		mov	r3, r2
 5725 0404 5B00     		lsls	r3, r3, #1
 5726 0406 1344     		add	r3, r3, r2
 5727 0408 0344     		add	r3, r3, r0
 5728 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5729 040e 1346     		mov	r3, r2
 5730 0410 DB00     		lsls	r3, r3, #3
 5731 0412 1344     		add	r3, r3, r2
 5732 0414 1944     		add	r1, r1, r3
 5733 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5734 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5735 041c 444C     		ldr	r4, .L383+24
 5736 041e 1346     		mov	r3, r2
 5737 0420 5B00     		lsls	r3, r3, #1
 5738 0422 1344     		add	r3, r3, r2
 5739 0424 0344     		add	r3, r3, r0
 5740 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5741 042a 5B00     		lsls	r3, r3, #1
 5742 042c C81A     		subs	r0, r1, r3
 5743 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5744 0432 DB00     		lsls	r3, r3, #3
 5745 0434 3F4A     		ldr	r2, .L383+28
 5746 0436 1344     		add	r3, r3, r2
 5747 0438 1946     		mov	r1, r3
 5748 043a FFF7FEFF 		bl	filter
 5749 043e 0346     		mov	r3, r0
 5750 0440 1BB2     		sxth	r3, r3
 5751 0442 7B61     		str	r3, [r7, #20]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         //Update current speed
1789:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5752              		.loc 1 1789 0
 5753 0444 7869     		ldr	r0, [r7, #20]
 5754 0446 FFF7FEFF 		bl	__aeabi_i2f
 5755 044a 0446     		mov	r4, r0
 5756 044c 3A4B     		ldr	r3, .L383+32
 5757 044e 1B68     		ldr	r3, [r3]	@ float
 5758 0450 3A49     		ldr	r1, .L383+36
 5759 0452 1846     		mov	r0, r3
 5760 0454 FFF7FEFF 		bl	__aeabi_fmul
 5761 0458 0346     		mov	r3, r0
 5762 045a 1946     		mov	r1, r3
 5763 045c 2046     		mov	r0, r4
 5764 045e FFF7FEFF 		bl	__aeabi_fdiv
 5765 0462 0346     		mov	r3, r0
 5766 0464 1846     		mov	r0, r3
 5767 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5768 046a 0346     		mov	r3, r0
 5769 046c 7B61     		str	r3, [r7, #20]
1790:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5770              		.loc 1 1790 0
 5771 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5772 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5773 0474 2A48     		ldr	r0, .L383+8
 5774 0476 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 136


 5775 0478 5B00     		lsls	r3, r3, #1
 5776 047a 1344     		add	r3, r3, r2
 5777 047c 9B00     		lsls	r3, r3, #2
 5778 047e 1344     		add	r3, r3, r2
 5779 0480 0B44     		add	r3, r3, r1
 5780 0482 0633     		adds	r3, r3, #6
 5781 0484 9B00     		lsls	r3, r3, #2
 5782 0486 0344     		add	r3, r3, r0
 5783 0488 7A69     		ldr	r2, [r7, #20]
 5784 048a 5A60     		str	r2, [r3, #4]
1791:..\src/interruptions.c **** 
1792:..\src/interruptions.c ****         // update old velocity and acceleration values
1793:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5785              		.loc 1 1793 0
 5786 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5787 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5788 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5789 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5790 0498 244D     		ldr	r5, .L383+20
 5791 049a 0B46     		mov	r3, r1
 5792 049c 5B00     		lsls	r3, r3, #1
 5793 049e 0B44     		add	r3, r3, r1
 5794 04a0 2344     		add	r3, r3, r4
 5795 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5796 04a6 224C     		ldr	r4, .L383+24
 5797 04a8 1346     		mov	r3, r2
 5798 04aa 5B00     		lsls	r3, r3, #1
 5799 04ac 1344     		add	r3, r3, r2
 5800 04ae 0344     		add	r3, r3, r0
 5801 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1794:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5802              		.loc 1 1794 0
 5803 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5804 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5805 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5806 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5807 04c0 194D     		ldr	r5, .L383+16
 5808 04c2 0B46     		mov	r3, r1
 5809 04c4 5B00     		lsls	r3, r3, #1
 5810 04c6 0B44     		add	r3, r3, r1
 5811 04c8 2344     		add	r3, r3, r4
 5812 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5813 04ce 174C     		ldr	r4, .L383+20
 5814 04d0 1346     		mov	r3, r2
 5815 04d2 5B00     		lsls	r3, r3, #1
 5816 04d4 1344     		add	r3, r3, r2
 5817 04d6 0344     		add	r3, r3, r0
 5818 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1795:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5819              		.loc 1 1795 0
 5820 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5821 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5822 04e2 1148     		ldr	r0, .L383+16
 5823 04e4 1346     		mov	r3, r2
 5824 04e6 5B00     		lsls	r3, r3, #1
 5825 04e8 1344     		add	r3, r3, r2
 5826 04ea 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 137


 5827 04ec BA6A     		ldr	r2, [r7, #40]
 5828 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1798:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5829              		.loc 1 1798 0
 5830 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5831 04f4 124A     		ldr	r2, .L383+40
 5832 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5833 04f8 002B     		cmp	r3, #0
 5834 04fa 40F03781 		bne	.L364
1799:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 5835              		.loc 1 1799 0
 5836 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5837 0500 104A     		ldr	r2, .L383+44
 5838 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5839 0504 352B     		cmp	r3, #53
 5840 0506 1FD8     		bhi	.L365
1800:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5841              		.loc 1 1800 0
 5842 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5843 050a 0E4A     		ldr	r2, .L383+44
 5844 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5845 050e 0132     		adds	r2, r2, #1
 5846 0510 D1B2     		uxtb	r1, r2
 5847 0512 0C4A     		ldr	r2, .L383+44
 5848 0514 D154     		strb	r1, [r2, r3]
 5849 0516 29E1     		b	.L364
 5850              	.L384:
 5851              		.align	2
 5852              	.L383:
 5853 0518 10010000 		.word	error.10620
 5854 051c E0000000 		.word	last_value_encoder.10618
 5855 0520 00000000 		.word	g_meas
 5856 0524 00000000 		.word	c_mem
 5857 0528 18010000 		.word	v_value.10625
 5858 052c 30010000 		.word	vv_value.10626
 5859 0530 48010000 		.word	vvv_value.10627
 5860 0534 00000000 		.word	filt_vel
 5861 0538 00000000 		.word	cycle_time
 5862 053c 0000C040 		.word	1086324736
 5863 0540 00000000 		.word	pos_reconstruct
 5864 0544 60010000 		.word	one_time_execute.10623
 5865              	.L365:
1801:..\src/interruptions.c ****             else {
1802:..\src/interruptions.c **** 
1803:..\src/interruptions.c ****                 //Double encoder translation
1804:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5866              		.loc 1 1804 0
 5867 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5868 054a AC49     		ldr	r1, .L385
 5869 054c 1346     		mov	r3, r2
 5870 054e 5B00     		lsls	r3, r3, #1
 5871 0550 1344     		add	r3, r3, r2
 5872 0552 1B01     		lsls	r3, r3, #4
 5873 0554 0B44     		add	r3, r3, r1
 5874 0556 03F5D873 		add	r3, r3, #432
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 138


 5875 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5876 055c 002B     		cmp	r3, #0
 5877 055e 5ED0     		beq	.L366
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5878              		.loc 1 1805 0
 5879 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5880 0562 A749     		ldr	r1, .L385+4
 5881 0564 1346     		mov	r3, r2
 5882 0566 5B00     		lsls	r3, r3, #1
 5883 0568 1344     		add	r3, r3, r2
 5884 056a 9B00     		lsls	r3, r3, #2
 5885 056c 0B44     		add	r3, r3, r1
 5886 056e 1868     		ldr	r0, [r3]
 5887 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5888 0572 A349     		ldr	r1, .L385+4
 5889 0574 1346     		mov	r3, r2
 5890 0576 5B00     		lsls	r3, r3, #1
 5891 0578 1344     		add	r3, r3, r2
 5892 057a 9B00     		lsls	r3, r3, #2
 5893 057c 0B44     		add	r3, r3, r1
 5894 057e 0433     		adds	r3, r3, #4
 5895 0580 1C68     		ldr	r4, [r3]
1806:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5896              		.loc 1 1806 0
 5897 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5898 0584 9D49     		ldr	r1, .L385
 5899 0586 1346     		mov	r3, r2
 5900 0588 5B00     		lsls	r3, r3, #1
 5901 058a 1344     		add	r3, r3, r2
 5902 058c 1B01     		lsls	r3, r3, #4
 5903 058e 0B44     		add	r3, r3, r1
 5904 0590 03F2B513 		addw	r3, r3, #437
 5905 0594 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5906              		.loc 1 1805 0
 5907 0598 1D46     		mov	r5, r3
 5908              		.loc 1 1806 0
 5909 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5910 059c 9749     		ldr	r1, .L385
 5911 059e 1346     		mov	r3, r2
 5912 05a0 5B00     		lsls	r3, r3, #1
 5913 05a2 1344     		add	r3, r3, r2
 5914 05a4 1B01     		lsls	r3, r3, #4
 5915 05a6 0B44     		add	r3, r3, r1
 5916 05a8 03F5DB73 		add	r3, r3, #438
 5917 05ac 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5918              		.loc 1 1805 0
 5919 05b0 1E46     		mov	r6, r3
 5920              		.loc 1 1806 0
 5921 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5922 05b4 9149     		ldr	r1, .L385
 5923 05b6 1346     		mov	r3, r2
 5924 05b8 5B00     		lsls	r3, r3, #1
 5925 05ba 1344     		add	r3, r3, r2
 5926 05bc 1B01     		lsls	r3, r3, #4
 5927 05be 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 139


 5928 05c0 03F2B713 		addw	r3, r3, #439
 5929 05c4 93F90030 		ldrsb	r3, [r3]
1805:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5930              		.loc 1 1805 0
 5931 05c8 0093     		str	r3, [sp]
 5932 05ca 3346     		mov	r3, r6
 5933 05cc 2A46     		mov	r2, r5
 5934 05ce 2146     		mov	r1, r4
 5935 05d0 FFF7FEFF 		bl	calc_turns_fcn
 5936 05d4 0346     		mov	r3, r0
 5937 05d6 87F82730 		strb	r3, [r7, #39]
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c **** 
1809:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5938              		.loc 1 1809 0
 5939 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5940 05dc 8749     		ldr	r1, .L385
 5941 05de 1346     		mov	r3, r2
 5942 05e0 5B00     		lsls	r3, r3, #1
 5943 05e2 1344     		add	r3, r3, r2
 5944 05e4 1B01     		lsls	r3, r3, #4
 5945 05e6 0B44     		add	r3, r3, r1
 5946 05e8 03F5D273 		add	r3, r3, #420
 5947 05ec 1B68     		ldr	r3, [r3]	@ float
 5948 05ee 4FF00001 		mov	r1, #0
 5949 05f2 1846     		mov	r0, r3
 5950 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 5951 05f8 0346     		mov	r3, r0
 5952 05fa 002B     		cmp	r3, #0
 5953 05fc 05D0     		beq	.L367
1810:..\src/interruptions.c ****                         init_rot = -init_rot;
 5954              		.loc 1 1810 0
 5955 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5956 0602 5B42     		negs	r3, r3
 5957 0604 DBB2     		uxtb	r3, r3
 5958 0606 87F82730 		strb	r3, [r7, #39]
 5959              	.L367:
1811:..\src/interruptions.c ****                     
1812:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5960              		.loc 1 1812 0
 5961 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5962 060c 7D4A     		ldr	r2, .L385+8
 5963 060e 3421     		movs	r1, #52
 5964 0610 01FB03F3 		mul	r3, r1, r3
 5965 0614 1344     		add	r3, r3, r2
 5966 0616 1833     		adds	r3, r3, #24
 5967 0618 97F82720 		ldrb	r2, [r7, #39]
 5968 061c 1A70     		strb	r2, [r3]
 5969              	.L366:
1813:..\src/interruptions.c ****                 }    
1814:..\src/interruptions.c **** 
1815:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5970              		.loc 1 1815 0
 5971 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5972 0620 7649     		ldr	r1, .L385
 5973 0622 1346     		mov	r3, r2
 5974 0624 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 140


 5975 0626 1344     		add	r3, r3, r2
 5976 0628 1B01     		lsls	r3, r3, #4
 5977 062a 0B44     		add	r3, r3, r1
 5978 062c 03F5D273 		add	r3, r3, #420
 5979 0630 1B68     		ldr	r3, [r3]	@ float
 5980 0632 4FF07E51 		mov	r1, #1065353216
 5981 0636 1846     		mov	r0, r3
 5982 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 5983 063c 0346     		mov	r3, r0
 5984 063e 002B     		cmp	r3, #0
 5985 0640 22D1     		bne	.L369
1816:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5986              		.loc 1 1816 0
 5987 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5988 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5989 0646 6F4A     		ldr	r2, .L385+8
 5990 0648 3421     		movs	r1, #52
 5991 064a 01FB03F3 		mul	r3, r1, r3
 5992 064e 1344     		add	r3, r3, r2
 5993 0650 1B68     		ldr	r3, [r3]
 5994 0652 1846     		mov	r0, r3
 5995 0654 FFF7FEFF 		bl	__aeabi_i2f
 5996 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5997 065a 6849     		ldr	r1, .L385
 5998 065c 1346     		mov	r3, r2
 5999 065e 5B00     		lsls	r3, r3, #1
 6000 0660 1344     		add	r3, r3, r2
 6001 0662 1B01     		lsls	r3, r3, #4
 6002 0664 0B44     		add	r3, r3, r1
 6003 0666 03F5D273 		add	r3, r3, #420
 6004 066a 1B68     		ldr	r3, [r3]	@ float
 6005 066c 1946     		mov	r1, r3
 6006 066e FFF7FEFF 		bl	__aeabi_fdiv
 6007 0672 0346     		mov	r3, r0
 6008 0674 1846     		mov	r0, r3
 6009 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6010 067a 0146     		mov	r1, r0
 6011 067c 614A     		ldr	r2, .L385+8
 6012 067e 3423     		movs	r3, #52
 6013 0680 03FB04F3 		mul	r3, r3, r4
 6014 0684 1344     		add	r3, r3, r2
 6015 0686 1960     		str	r1, [r3]
 6016              	.L369:
1817:..\src/interruptions.c ****                 
1818:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6017              		.loc 1 1818 0
 6018 0688 97F92730 		ldrsb	r3, [r7, #39]
 6019 068c 1B04     		lsls	r3, r3, #16
 6020 068e BA6A     		ldr	r2, [r7, #40]
 6021 0690 1344     		add	r3, r3, r2
 6022 0692 BB62     		str	r3, [r7, #40]
1819:..\src/interruptions.c ****        
1820:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6023              		.loc 1 1820 0
 6024 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6025 0696 5949     		ldr	r1, .L385
 6026 0698 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 141


 6027 069a 5B00     		lsls	r3, r3, #1
 6028 069c 1344     		add	r3, r3, r2
 6029 069e 1B01     		lsls	r3, r3, #4
 6030 06a0 0B44     		add	r3, r3, r1
 6031 06a2 03F5D273 		add	r3, r3, #420
 6032 06a6 1B68     		ldr	r3, [r3]	@ float
 6033 06a8 4FF07E51 		mov	r1, #1065353216
 6034 06ac 1846     		mov	r0, r3
 6035 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6036 06b2 0346     		mov	r3, r0
 6037 06b4 002B     		cmp	r3, #0
 6038 06b6 15D1     		bne	.L371
1821:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6039              		.loc 1 1821 0
 6040 06b8 B86A     		ldr	r0, [r7, #40]
 6041 06ba FFF7FEFF 		bl	__aeabi_i2f
 6042 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6043 06c0 4E49     		ldr	r1, .L385
 6044 06c2 1346     		mov	r3, r2
 6045 06c4 5B00     		lsls	r3, r3, #1
 6046 06c6 1344     		add	r3, r3, r2
 6047 06c8 1B01     		lsls	r3, r3, #4
 6048 06ca 0B44     		add	r3, r3, r1
 6049 06cc 03F5D273 		add	r3, r3, #420
 6050 06d0 1B68     		ldr	r3, [r3]	@ float
 6051 06d2 1946     		mov	r1, r3
 6052 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6053 06d8 0346     		mov	r3, r0
 6054 06da 1846     		mov	r0, r3
 6055 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6056 06e0 0346     		mov	r3, r0
 6057 06e2 BB62     		str	r3, [r7, #40]
 6058              	.L371:
1822:..\src/interruptions.c ****                 }
1823:..\src/interruptions.c **** 
1824:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6059              		.loc 1 1824 0
 6060 06e4 454B     		ldr	r3, .L385
 6061 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6062 06ea 002B     		cmp	r3, #0
 6063 06ec 07D1     		bne	.L373
1825:..\src/interruptions.c ****                     // Right / Left hand turn
1826:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6064              		.loc 1 1826 0
 6065 06ee 434B     		ldr	r3, .L385
 6066 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6067 06f4 002B     		cmp	r3, #0
 6068 06f6 02D1     		bne	.L373
1827:..\src/interruptions.c ****                         value_encoder *= -1;        
 6069              		.loc 1 1827 0
 6070 06f8 BB6A     		ldr	r3, [r7, #40]
 6071 06fa 5B42     		negs	r3, r3
 6072 06fc BB62     		str	r3, [r7, #40]
 6073              	.L373:
1828:..\src/interruptions.c ****                     }
1829:..\src/interruptions.c ****                 }
1830:..\src/interruptions.c ****          
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 142


1831:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6074              		.loc 1 1831 0
 6075 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6076 0700 404A     		ldr	r2, .L385+8
 6077 0702 3421     		movs	r1, #52
 6078 0704 01FB03F3 		mul	r3, r1, r3
 6079 0708 1344     		add	r3, r3, r2
 6080 070a BA6A     		ldr	r2, [r7, #40]
 6081 070c 1A60     		str	r2, [r3]
1832:..\src/interruptions.c ****                 
1833:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6082              		.loc 1 1833 0
 6083 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6084 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6085 0712 3C49     		ldr	r1, .L385+8
 6086 0714 3420     		movs	r0, #52
 6087 0716 00FB02F2 		mul	r2, r0, r2
 6088 071a 0A44     		add	r2, r2, r1
 6089 071c 1268     		ldr	r2, [r2]
 6090 071e 3A49     		ldr	r1, .L385+12
 6091 0720 1B01     		lsls	r3, r3, #4
 6092 0722 0B44     		add	r3, r3, r1
 6093 0724 1A60     		str	r2, [r3]
1834:..\src/interruptions.c **** 
1835:..\src/interruptions.c ****                 // If necessary activate motor
1836:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6094              		.loc 1 1836 0
 6095 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6096 0728 384A     		ldr	r2, .L385+16
 6097 072a 0121     		movs	r1, #1
 6098 072c D154     		strb	r1, [r2, r3]
1837:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1838:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6099              		.loc 1 1838 0
 6100 072e B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6101 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6102 0732 3248     		ldr	r0, .L385
 6103 0734 1346     		mov	r3, r2
 6104 0736 DB00     		lsls	r3, r3, #3
 6105 0738 9B1A     		subs	r3, r3, r2
 6106 073a 1B01     		lsls	r3, r3, #4
 6107 073c 0344     		add	r3, r3, r0
 6108 073e E033     		adds	r3, r3, #224
 6109 0740 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6110 0742 314A     		ldr	r2, .L385+12
 6111 0744 0B01     		lsls	r3, r1, #4
 6112 0746 1344     		add	r3, r3, r2
 6113 0748 0C33     		adds	r3, r3, #12
 6114 074a 0246     		mov	r2, r0
 6115 074c 1A70     		strb	r2, [r3]
1839:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6116              		.loc 1 1839 0
 6117 074e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6118 0750 2D4A     		ldr	r2, .L385+12
 6119 0752 1B01     		lsls	r3, r3, #4
 6120 0754 1344     		add	r3, r3, r2
 6121 0756 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 143


 6122 0758 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6123 075a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6124 075c 1146     		mov	r1, r2
 6125 075e 1846     		mov	r0, r3
 6126 0760 FFF7FEFF 		bl	enable_motor
1840:..\src/interruptions.c ****                 
1841:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6127              		.loc 1 1841 0
 6128 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6129 0766 2A4A     		ldr	r2, .L385+20
 6130 0768 0121     		movs	r1, #1
 6131 076a D154     		strb	r1, [r2, r3]
 6132              	.L364:
1703:..\src/interruptions.c ****         
 6133              		.loc 1 1703 0 discriminator 2
 6134 076c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6135 0770 0133     		adds	r3, r3, #1
 6136 0772 87F82F30 		strb	r3, [r7, #47]
 6137              	.L353:
1703:..\src/interruptions.c ****         
 6138              		.loc 1 1703 0 is_stmt 0 discriminator 1
 6139 0776 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6140 077a 022B     		cmp	r3, #2
 6141 077c 7FF6C5AC 		bls	.L374
1842:..\src/interruptions.c ****             }
1843:..\src/interruptions.c ****         }
1844:..\src/interruptions.c ****     } 
1845:..\src/interruptions.c **** 
1846:..\src/interruptions.c **** 	
1847:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1848:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6142              		.loc 1 1848 0 is_stmt 1
 6143 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6144 0782 224A     		ldr	r2, .L385+16
 6145 0784 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6146 0786 002B     		cmp	r3, #0
 6147 0788 35D0     		beq	.L344
1849:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6148              		.loc 1 1849 0
 6149 078a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6150 078c 214A     		ldr	r2, .L385+24
 6151 078e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6152 0792 0132     		adds	r2, r2, #1
 6153 0794 1F49     		ldr	r1, .L385+24
 6154 0796 41F82320 		str	r2, [r1, r3, lsl #2]
1850:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6155              		.loc 1 1850 0
 6156 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6157 079c 1D4A     		ldr	r2, .L385+24
 6158 079e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6159 07a2 B3F5FA5F 		cmp	r3, #8000
 6160 07a6 26D3     		bcc	.L344
1851:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6161              		.loc 1 1851 0
 6162 07a8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6163 07aa 174A     		ldr	r2, .L385+12
 6164 07ac 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 144


 6165 07ae 1344     		add	r3, r3, r2
 6166 07b0 0022     		movs	r2, #0
 6167 07b2 1A60     		str	r2, [r3]
1852:..\src/interruptions.c ****             
1853:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1854:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6168              		.loc 1 1854 0
 6169 07b4 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6170 07b6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6171 07b8 1048     		ldr	r0, .L385
 6172 07ba 1346     		mov	r3, r2
 6173 07bc DB00     		lsls	r3, r3, #3
 6174 07be 9B1A     		subs	r3, r3, r2
 6175 07c0 1B01     		lsls	r3, r3, #4
 6176 07c2 0344     		add	r3, r3, r0
 6177 07c4 E033     		adds	r3, r3, #224
 6178 07c6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6179 07c8 0F4A     		ldr	r2, .L385+12
 6180 07ca 0B01     		lsls	r3, r1, #4
 6181 07cc 1344     		add	r3, r3, r2
 6182 07ce 0C33     		adds	r3, r3, #12
 6183 07d0 0246     		mov	r2, r0
 6184 07d2 1A70     		strb	r2, [r3]
1855:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6185              		.loc 1 1855 0
 6186 07d4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6187 07d6 0C4A     		ldr	r2, .L385+12
 6188 07d8 1B01     		lsls	r3, r3, #4
 6189 07da 1344     		add	r3, r3, r2
 6190 07dc 0C33     		adds	r3, r3, #12
 6191 07de 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6192 07e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6193 07e2 1146     		mov	r1, r2
 6194 07e4 1846     		mov	r0, r3
 6195 07e6 FFF7FEFF 		bl	enable_motor
1856:..\src/interruptions.c ****                         
1857:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6196              		.loc 1 1857 0
 6197 07ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6198 07ec 074A     		ldr	r2, .L385+16
 6199 07ee 0021     		movs	r1, #0
 6200 07f0 D154     		strb	r1, [r2, r3]
 6201 07f2 00E0     		b	.L344
 6202              	.L380:
1758:..\src/interruptions.c ****                 }
 6203              		.loc 1 1758 0
 6204 07f4 00BF     		nop
 6205              	.L344:
1858:..\src/interruptions.c ****         }
1859:..\src/interruptions.c ****     }
1860:..\src/interruptions.c ****  
1861:..\src/interruptions.c **** }
 6206              		.loc 1 1861 0
 6207 07f6 3437     		adds	r7, r7, #52
 6208              		.cfi_def_cfa_offset 20
 6209 07f8 BD46     		mov	sp, r7
 6210              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 145


 6211              		@ sp needed
 6212 07fa F0BD     		pop	{r4, r5, r6, r7, pc}
 6213              	.L386:
 6214              		.align	2
 6215              	.L385:
 6216 07fc 00000000 		.word	c_mem
 6217 0800 F8000000 		.word	comp_value_encoder.10619
 6218 0804 00000000 		.word	g_meas
 6219 0808 00000000 		.word	g_refNew
 6220 080c 64010000 		.word	safe_startup_motor_activation.10622
 6221 0810 00000000 		.word	pos_reconstruct
 6222 0814 68010000 		.word	count_startup_motor.10624
 6223              		.cfi_endproc
 6224              	.LFE73:
 6225              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6226              		.section	.text.analog_read_end,"ax",%progbits
 6227              		.align	2
 6228              		.global	analog_read_end
 6229              		.thumb
 6230              		.thumb_func
 6231              		.type	analog_read_end, %function
 6232              	analog_read_end:
 6233              	.LFB74:
1862:..\src/interruptions.c **** 
1863:..\src/interruptions.c **** //==============================================================================
1864:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1865:..\src/interruptions.c **** //==============================================================================
1866:..\src/interruptions.c **** 
1867:..\src/interruptions.c **** void analog_read_end() {
 6234              		.loc 1 1867 0
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 8
 6237              		@ frame_needed = 1, uses_anonymous_args = 0
 6238 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6239              		.cfi_def_cfa_offset 20
 6240              		.cfi_offset 4, -20
 6241              		.cfi_offset 5, -16
 6242              		.cfi_offset 6, -12
 6243              		.cfi_offset 7, -8
 6244              		.cfi_offset 14, -4
 6245 0002 83B0     		sub	sp, sp, #12
 6246              		.cfi_def_cfa_offset 32
 6247 0004 00AF     		add	r7, sp, #0
 6248              		.cfi_def_cfa_register 7
1868:..\src/interruptions.c **** 
1869:..\src/interruptions.c ****     /* =========================================================================
1870:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1871:..\src/interruptions.c ****     /
1872:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1873:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1874:..\src/interruptions.c ****     /
1875:..\src/interruptions.c ****     /   Definition:
1876:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1877:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1878:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1879:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1880:..\src/interruptions.c ****     /
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 146


1881:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1882:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1883:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1884:..\src/interruptions.c ****     /  =========================================================================
1885:..\src/interruptions.c ****     */
1886:..\src/interruptions.c **** 
1887:..\src/interruptions.c ****     int32 CYDATA i_aux;
1888:..\src/interruptions.c **** 
1889:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1890:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1891:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1892:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1893:..\src/interruptions.c ****     static int32 UD_mean_value;
1894:..\src/interruptions.c ****     static int32 LR_mean_value;
1895:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1896:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1897:..\src/interruptions.c ****     static uint16 count = 0;
1898:..\src/interruptions.c ****     static uint32 v_count = 0;
1899:..\src/interruptions.c ****     static uint8 idx = 0;
1900:..\src/interruptions.c ****     
1901:..\src/interruptions.c ****     // Wait for conversion end
1902:..\src/interruptions.c ****     
1903:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6249              		.loc 1 1903 0
 6250 0006 08E0     		b	.L388
 6251              	.L389:
1904:..\src/interruptions.c ****         
1905:..\src/interruptions.c ****         if (interrupt_flag){
 6252              		.loc 1 1905 0
 6253 0008 A84B     		ldr	r3, .L542
 6254 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6255 000c 002B     		cmp	r3, #0
 6256 000e 04D0     		beq	.L388
1906:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6257              		.loc 1 1906 0
 6258 0010 A64B     		ldr	r3, .L542
 6259 0012 0022     		movs	r2, #0
 6260 0014 1A70     		strb	r2, [r3]
1907:..\src/interruptions.c ****             interrupt_manager();
 6261              		.loc 1 1907 0
 6262 0016 FFF7FEFF 		bl	interrupt_manager
 6263              	.L388:
1903:..\src/interruptions.c ****         
 6264              		.loc 1 1903 0
 6265 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6266 001e 0346     		mov	r3, r0
 6267 0020 002B     		cmp	r3, #0
 6268 0022 F1D0     		beq	.L389
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     }
1910:..\src/interruptions.c ****     
1911:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1912:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1913:..\src/interruptions.c ****         // Read pressure in any case
1914:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1915:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1916:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 147


1917:..\src/interruptions.c ****     }
1918:..\src/interruptions.c **** #endif
1919:..\src/interruptions.c ****  
1920:..\src/interruptions.c ****     // Convert tension read
1921:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6269              		.loc 1 1921 0
 6270 0024 A24B     		ldr	r3, .L542+4
 6271 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6272 002a 022B     		cmp	r3, #2
 6273 002c 04D1     		bne	.L390
1922:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6274              		.loc 1 1922 0
 6275 002e A14B     		ldr	r3, .L542+8
 6276 0030 41F28832 		movw	r2, #5000
 6277 0034 1A60     		str	r2, [r3]
 6278 0036 0BE0     		b	.L391
 6279              	.L390:
1923:..\src/interruptions.c ****     }
1924:..\src/interruptions.c ****     else {
1925:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6280              		.loc 1 1925 0
 6281 0038 9F4B     		ldr	r3, .L542+12
 6282 003a B3F90030 		ldrsh	r3, [r3]
 6283 003e A3F25563 		subw	r3, r3, #1621
 6284 0042 40F2C672 		movw	r2, #1990
 6285 0046 02FB03F3 		mul	r3, r2, r3
 6286 004a DB11     		asrs	r3, r3, #7
 6287 004c 994A     		ldr	r2, .L542+8
 6288 004e 1360     		str	r3, [r2]
 6289              	.L391:
1926:..\src/interruptions.c ****     }
1927:..\src/interruptions.c ****     
1928:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1929:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6290              		.loc 1 1929 0
 6291 0050 9A4B     		ldr	r3, .L542+16
 6292 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6293 0054 042B     		cmp	r3, #4
 6294 0056 0BD9     		bls	.L392
1930:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6295              		.loc 1 1930 0
 6296 0058 974B     		ldr	r3, .L542+12
 6297 005a B3F90830 		ldrsh	r3, [r3, #8]
 6298 005e A3F25563 		subw	r3, r3, #1621
 6299 0062 40F2C672 		movw	r2, #1990
 6300 0066 02FB03F3 		mul	r3, r2, r3
 6301 006a DB11     		asrs	r3, r3, #7
 6302 006c 914A     		ldr	r2, .L542+8
 6303 006e 5360     		str	r3, [r2, #4]
 6304              	.L392:
1931:..\src/interruptions.c ****     }
1932:..\src/interruptions.c ****     
1933:..\src/interruptions.c ****     if (interrupt_flag){
 6305              		.loc 1 1933 0
 6306 0070 8E4B     		ldr	r3, .L542
 6307 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6308 0074 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 148


 6309 0076 04D0     		beq	.L393
1934:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6310              		.loc 1 1934 0
 6311 0078 8C4B     		ldr	r3, .L542
 6312 007a 0022     		movs	r2, #0
 6313 007c 1A70     		strb	r2, [r3]
1935:..\src/interruptions.c ****         interrupt_manager();
 6314              		.loc 1 1935 0
 6315 007e FFF7FEFF 		bl	interrupt_manager
 6316              	.L393:
1936:..\src/interruptions.c ****     }
1937:..\src/interruptions.c ****     
1938:..\src/interruptions.c ****     // VOLTAGE READING
1939:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1940:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1941:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1942:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1943:..\src/interruptions.c ****     
1944:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6317              		.loc 1 1944 0
 6318 0082 8F4B     		ldr	r3, .L542+20
 6319 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6320 0086 002B     		cmp	r3, #0
 6321 0088 4DD0     		beq	.L394
 6322              		.loc 1 1944 0 is_stmt 0 discriminator 1
 6323 008a 8E4B     		ldr	r3, .L542+24
 6324 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6325 008e 002B     		cmp	r3, #0
 6326 0090 49D0     		beq	.L394
1945:..\src/interruptions.c ****         count = count + 1;
 6327              		.loc 1 1945 0 is_stmt 1
 6328 0092 8D4B     		ldr	r3, .L542+28
 6329 0094 1B88     		ldrh	r3, [r3]
 6330 0096 0133     		adds	r3, r3, #1
 6331 0098 9AB2     		uxth	r2, r3
 6332 009a 8B4B     		ldr	r3, .L542+28
 6333 009c 1A80     		strh	r2, [r3]	@ movhi
1946:..\src/interruptions.c ****         
1947:..\src/interruptions.c ****         if (count == 1000){
 6334              		.loc 1 1947 0
 6335 009e 8A4B     		ldr	r3, .L542+28
 6336 00a0 1B88     		ldrh	r3, [r3]
 6337 00a2 B3F57A7F 		cmp	r3, #1000
 6338 00a6 3ED1     		bne	.L394
1948:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6339              		.loc 1 1948 0
 6340 00a8 884B     		ldr	r3, .L542+32
 6341 00aa 0022     		movs	r2, #0
 6342 00ac 1A70     		strb	r2, [r3]
 6343 00ae 33E0     		b	.L395
 6344              	.L399:
1949:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6345              		.loc 1 1949 0
 6346 00b0 864B     		ldr	r3, .L542+32
 6347 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6348 00b4 1A46     		mov	r2, r3
 6349 00b6 7F4B     		ldr	r3, .L542+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 149


 6350 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6351 00bc 42F22732 		movw	r2, #8999
 6352 00c0 9342     		cmp	r3, r2
 6353 00c2 08DC     		bgt	.L396
1950:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6354              		.loc 1 1950 0
 6355 00c4 814B     		ldr	r3, .L542+32
 6356 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6357 00c8 1946     		mov	r1, r3
 6358 00ca 814B     		ldr	r3, .L542+36
 6359 00cc 4FF4FA52 		mov	r2, #8000
 6360 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 6361 00d4 1AE0     		b	.L397
 6362              	.L396:
1951:..\src/interruptions.c ****                 }
1952:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1953:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6363              		.loc 1 1953 0
 6364 00d6 7D4B     		ldr	r3, .L542+32
 6365 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6366 00da 1A46     		mov	r2, r3
 6367 00dc 754B     		ldr	r3, .L542+8
 6368 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6369 00e2 43F2C722 		movw	r2, #12999
 6370 00e6 9342     		cmp	r3, r2
 6371 00e8 08DC     		bgt	.L398
1954:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6372              		.loc 1 1954 0
 6373 00ea 784B     		ldr	r3, .L542+32
 6374 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6375 00ee 1946     		mov	r1, r3
 6376 00f0 774B     		ldr	r3, .L542+36
 6377 00f2 42F6E062 		movw	r2, #12000
 6378 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 6379 00fa 07E0     		b	.L397
 6380              	.L398:
1955:..\src/interruptions.c ****                     }
1956:..\src/interruptions.c ****                     else
1957:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6381              		.loc 1 1957 0
 6382 00fc 734B     		ldr	r3, .L542+32
 6383 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6384 0100 1946     		mov	r1, r3
 6385 0102 734B     		ldr	r3, .L542+36
 6386 0104 45F6C052 		movw	r2, #24000
 6387 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 6388              	.L397:
1948:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6389              		.loc 1 1948 0 discriminator 2
 6390 010c 6F4B     		ldr	r3, .L542+32
 6391 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6392 0110 0133     		adds	r3, r3, #1
 6393 0112 DAB2     		uxtb	r2, r3
 6394 0114 6D4B     		ldr	r3, .L542+32
 6395 0116 1A70     		strb	r2, [r3]
 6396              	.L395:
1948:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 150


 6397              		.loc 1 1948 0 is_stmt 0 discriminator 1
 6398 0118 6C4B     		ldr	r3, .L542+32
 6399 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6400 011c 012B     		cmp	r3, #1
 6401 011e C7D9     		bls	.L399
1958:..\src/interruptions.c ****                 }
1959:..\src/interruptions.c ****             }
1960:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6402              		.loc 1 1960 0 is_stmt 1
 6403 0120 674B     		ldr	r3, .L542+20
 6404 0122 0022     		movs	r2, #0
 6405 0124 1A70     		strb	r2, [r3]
 6406              	.L394:
1961:..\src/interruptions.c ****         }
1962:..\src/interruptions.c ****     }
1963:..\src/interruptions.c **** 
1964:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1965:..\src/interruptions.c **** 
1966:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 6407              		.loc 1 1966 0
 6408 0126 634B     		ldr	r3, .L542+8
 6409 0128 1B68     		ldr	r3, [r3]
 6410 012a 41F65732 		movw	r2, #6999
 6411 012e 9342     		cmp	r3, r2
 6412 0130 00F3F080 		bgt	.L400
 6413              		.loc 1 1966 0 is_stmt 0 discriminator 1
 6414 0134 614B     		ldr	r3, .L542+16
 6415 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6416 0138 042B     		cmp	r3, #4
 6417 013a 06D9     		bls	.L401
 6418              		.loc 1 1966 0 discriminator 2
 6419 013c 5D4B     		ldr	r3, .L542+8
 6420 013e 5B68     		ldr	r3, [r3, #4]
 6421 0140 41F65732 		movw	r2, #6999
 6422 0144 9342     		cmp	r3, r2
 6423 0146 00F3E580 		bgt	.L400
 6424              	.L401:
1967:..\src/interruptions.c ****         // PSoC is powered through uUSB
1968:..\src/interruptions.c ****         
1969:..\src/interruptions.c ****         tension_valid = FALSE;
 6425              		.loc 1 1969 0 is_stmt 1
 6426 014a 5E4B     		ldr	r3, .L542+24
 6427 014c 0022     		movs	r2, #0
 6428 014e 1A70     		strb	r2, [r3]
1970:..\src/interruptions.c ****             
1971:..\src/interruptions.c ****         if (interrupt_flag){
 6429              		.loc 1 1971 0
 6430 0150 564B     		ldr	r3, .L542
 6431 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6432 0154 002B     		cmp	r3, #0
 6433 0156 04D0     		beq	.L402
1972:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6434              		.loc 1 1972 0
 6435 0158 544B     		ldr	r3, .L542
 6436 015a 0022     		movs	r2, #0
 6437 015c 1A70     		strb	r2, [r3]
1973:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 151


 6438              		.loc 1 1973 0
 6439 015e FFF7FEFF 		bl	interrupt_manager
 6440              	.L402:
1974:..\src/interruptions.c ****         }
1975:..\src/interruptions.c ****         
1976:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6441              		.loc 1 1976 0
 6442 0162 5A4B     		ldr	r3, .L542+32
 6443 0164 0022     		movs	r2, #0
 6444 0166 1A70     		strb	r2, [r3]
 6445 0168 81E0     		b	.L403
 6446              	.L406:
1977:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6447              		.loc 1 1977 0
 6448 016a 5A4B     		ldr	r3, .L542+40
 6449 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6450 0170 002B     		cmp	r3, #0
 6451 0172 59D0     		beq	.L404
1978:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6452              		.loc 1 1978 0
 6453 0174 554B     		ldr	r3, .L542+32
 6454 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6455 0178 1946     		mov	r1, r3
 6456 017a 564A     		ldr	r2, .L542+40
 6457 017c 0B46     		mov	r3, r1
 6458 017e DB00     		lsls	r3, r3, #3
 6459 0180 5B1A     		subs	r3, r3, r1
 6460 0182 1B01     		lsls	r3, r3, #4
 6461 0184 1344     		add	r3, r3, r2
 6462 0186 03F58773 		add	r3, r3, #270
 6463 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6464 018c 022B     		cmp	r3, #2
 6465 018e 37D0     		beq	.L405
1979:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6466              		.loc 1 1979 0 discriminator 1
 6467 0190 4E4B     		ldr	r3, .L542+32
 6468 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6469 0194 1946     		mov	r1, r3
 6470 0196 4F4A     		ldr	r2, .L542+40
 6471 0198 0B46     		mov	r3, r1
 6472 019a DB00     		lsls	r3, r3, #3
 6473 019c 5B1A     		subs	r3, r3, r1
 6474 019e 1B01     		lsls	r3, r3, #4
 6475 01a0 1344     		add	r3, r3, r2
 6476 01a2 03F58773 		add	r3, r3, #270
 6477 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1978:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6478              		.loc 1 1978 0 discriminator 1
 6479 01a8 032B     		cmp	r3, #3
 6480 01aa 29D0     		beq	.L405
1980:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6481              		.loc 1 1980 0
 6482 01ac 474B     		ldr	r3, .L542+32
 6483 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6484 01b0 1946     		mov	r1, r3
 6485 01b2 484A     		ldr	r2, .L542+40
 6486 01b4 0B46     		mov	r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 152


 6487 01b6 DB00     		lsls	r3, r3, #3
 6488 01b8 5B1A     		subs	r3, r3, r1
 6489 01ba 1B01     		lsls	r3, r3, #4
 6490 01bc 1344     		add	r3, r3, r2
 6491 01be 03F58773 		add	r3, r3, #270
 6492 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1979:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6493              		.loc 1 1979 0
 6494 01c4 042B     		cmp	r3, #4
 6495 01c6 1BD0     		beq	.L405
1981:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6496              		.loc 1 1981 0
 6497 01c8 404B     		ldr	r3, .L542+32
 6498 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6499 01cc 1946     		mov	r1, r3
 6500 01ce 414A     		ldr	r2, .L542+40
 6501 01d0 0B46     		mov	r3, r1
 6502 01d2 DB00     		lsls	r3, r3, #3
 6503 01d4 5B1A     		subs	r3, r3, r1
 6504 01d6 1B01     		lsls	r3, r3, #4
 6505 01d8 1344     		add	r3, r3, r2
 6506 01da 03F58773 		add	r3, r3, #270
 6507 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1980:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6508              		.loc 1 1980 0
 6509 01e0 052B     		cmp	r3, #5
 6510 01e2 0DD0     		beq	.L405
1982:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6511              		.loc 1 1982 0
 6512 01e4 394B     		ldr	r3, .L542+32
 6513 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6514 01e8 1946     		mov	r1, r3
 6515 01ea 3A4A     		ldr	r2, .L542+40
 6516 01ec 0B46     		mov	r3, r1
 6517 01ee DB00     		lsls	r3, r3, #3
 6518 01f0 5B1A     		subs	r3, r3, r1
 6519 01f2 1B01     		lsls	r3, r3, #4
 6520 01f4 1344     		add	r3, r3, r2
 6521 01f6 03F58773 		add	r3, r3, #270
 6522 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1981:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6523              		.loc 1 1981 0
 6524 01fc 072B     		cmp	r3, #7
 6525 01fe 13D1     		bne	.L404
 6526              	.L405:
1983:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6527              		.loc 1 1983 0
 6528 0200 324B     		ldr	r3, .L542+32
 6529 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6530 0204 344A     		ldr	r2, .L542+44
 6531 0206 1B01     		lsls	r3, r3, #4
 6532 0208 1344     		add	r3, r3, r2
 6533 020a 0C33     		adds	r3, r3, #12
 6534 020c 0022     		movs	r2, #0
 6535 020e 1A70     		strb	r2, [r3]
1984:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6536              		.loc 1 1984 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 153


 6537 0210 2E4B     		ldr	r3, .L542+32
 6538 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6539 0214 2D4B     		ldr	r3, .L542+32
 6540 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6541 0218 2F4A     		ldr	r2, .L542+44
 6542 021a 1B01     		lsls	r3, r3, #4
 6543 021c 1344     		add	r3, r3, r2
 6544 021e 0C33     		adds	r3, r3, #12
 6545 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6546 0222 1946     		mov	r1, r3
 6547 0224 FFF7FEFF 		bl	enable_motor
 6548              	.L404:
1985:..\src/interruptions.c ****                     
1986:..\src/interruptions.c ****                 }
1987:..\src/interruptions.c ****             }
1988:..\src/interruptions.c **** 
1989:..\src/interruptions.c ****             // Assign dev_tension and reset current
1990:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6549              		.loc 1 1990 0 discriminator 2
 6550 0228 284B     		ldr	r3, .L542+32
 6551 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6552 022c 1946     		mov	r1, r3
 6553 022e 214B     		ldr	r3, .L542+8
 6554 0230 41F28832 		movw	r2, #5000
 6555 0234 43F82120 		str	r2, [r3, r1, lsl #2]
1991:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6556              		.loc 1 1991 0 discriminator 2
 6557 0238 244B     		ldr	r3, .L542+32
 6558 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6559 023c 1946     		mov	r1, r3
 6560 023e 1C4A     		ldr	r2, .L542+4
 6561 0240 0B46     		mov	r3, r1
 6562 0242 DB00     		lsls	r3, r3, #3
 6563 0244 5B1A     		subs	r3, r3, r1
 6564 0246 1B01     		lsls	r3, r3, #4
 6565 0248 1344     		add	r3, r3, r2
 6566 024a 03F58873 		add	r3, r3, #272
 6567 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6568 0250 1946     		mov	r1, r3
 6569 0252 224A     		ldr	r2, .L542+48
 6570 0254 3423     		movs	r3, #52
 6571 0256 03FB01F3 		mul	r3, r3, r1
 6572 025a 1344     		add	r3, r3, r2
 6573 025c 0C33     		adds	r3, r3, #12
 6574 025e 0022     		movs	r2, #0
 6575 0260 1A60     		str	r2, [r3]
1976:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6576              		.loc 1 1976 0 discriminator 2
 6577 0262 1A4B     		ldr	r3, .L542+32
 6578 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6579 0266 0133     		adds	r3, r3, #1
 6580 0268 DAB2     		uxtb	r2, r3
 6581 026a 184B     		ldr	r3, .L542+32
 6582 026c 1A70     		strb	r2, [r3]
 6583              	.L403:
1976:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6584              		.loc 1 1976 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 154


 6585 026e 174B     		ldr	r3, .L542+32
 6586 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6587 0272 012B     		cmp	r3, #1
 6588 0274 7FF679AF 		bls	.L406
1992:..\src/interruptions.c ****         }
1993:..\src/interruptions.c ****         
1994:..\src/interruptions.c ****         // Reset emg
1995:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6589              		.loc 1 1995 0 is_stmt 1
 6590 0278 144B     		ldr	r3, .L542+32
 6591 027a 0022     		movs	r2, #0
 6592 027c 1A70     		strb	r2, [r3]
 6593 027e 0CE0     		b	.L407
 6594              	.L408:
1996:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6595              		.loc 1 1996 0 discriminator 3
 6596 0280 124B     		ldr	r3, .L542+32
 6597 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6598 0284 1946     		mov	r1, r3
 6599 0286 164B     		ldr	r3, .L542+52
 6600 0288 0022     		movs	r2, #0
 6601 028a 43F82120 		str	r2, [r3, r1, lsl #2]
1995:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6602              		.loc 1 1995 0 discriminator 3
 6603 028e 0F4B     		ldr	r3, .L542+32
 6604 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6605 0292 0133     		adds	r3, r3, #1
 6606 0294 DAB2     		uxtb	r2, r3
 6607 0296 0D4B     		ldr	r3, .L542+32
 6608 0298 1A70     		strb	r2, [r3]
 6609              	.L407:
1995:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6610              		.loc 1 1995 0 is_stmt 0 discriminator 1
 6611 029a 0C4B     		ldr	r3, .L542+32
 6612 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6613 029e 012B     		cmp	r3, #1
 6614 02a0 EED9     		bls	.L408
1997:..\src/interruptions.c ****         }
1998:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6615              		.loc 1 1998 0 is_stmt 1
 6616 02a2 0A4B     		ldr	r3, .L542+32
 6617 02a4 0022     		movs	r2, #0
 6618 02a6 1A70     		strb	r2, [r3]
 6619 02a8 29E0     		b	.L409
 6620              	.L543:
 6621 02aa 00BF     		.align	2
 6622              	.L542:
 6623 02ac 00000000 		.word	interrupt_flag
 6624 02b0 00000000 		.word	g_mem
 6625 02b4 00000000 		.word	dev_tension
 6626 02b8 00000000 		.word	ADC_buf
 6627 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6628 02c0 06000000 		.word	first_tension_valid.10650
 6629 02c4 00000000 		.word	tension_valid
 6630 02c8 70010000 		.word	count.10651
 6631 02cc 72010000 		.word	idx.10653
 6632 02d0 00000000 		.word	pow_tension
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 155


 6633 02d4 00000000 		.word	c_mem
 6634 02d8 00000000 		.word	g_ref
 6635 02dc 00000000 		.word	g_meas
 6636 02e0 00000000 		.word	g_adc_meas
 6637              	.L411:
1999:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6638              		.loc 1 1999 0 discriminator 4
 6639 02e4 A74B     		ldr	r3, .L544
 6640 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6641 02e8 A74A     		ldr	r2, .L544+4
 6642 02ea 0233     		adds	r3, r3, #2
 6643 02ec 0021     		movs	r1, #0
 6644 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
1998:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6645              		.loc 1 1998 0 discriminator 4
 6646 02f2 A44B     		ldr	r3, .L544
 6647 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6648 02f6 0133     		adds	r3, r3, #1
 6649 02f8 DAB2     		uxtb	r2, r3
 6650 02fa A24B     		ldr	r3, .L544
 6651 02fc 1A70     		strb	r2, [r3]
 6652              	.L409:
1998:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6653              		.loc 1 1998 0 is_stmt 0 discriminator 1
 6654 02fe A34B     		ldr	r3, .L544+8
 6655 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6656 0304 002B     		cmp	r3, #0
 6657 0306 00F0EF81 		beq	.L524
1998:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6658              		.loc 1 1998 0 discriminator 3
 6659 030a 9E4B     		ldr	r3, .L544
 6660 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6661 030e 052B     		cmp	r3, #5
 6662 0310 E8D9     		bls	.L411
1966:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6663              		.loc 1 1966 0 is_stmt 1
 6664 0312 E9E1     		b	.L524
 6665              	.L400:
2000:..\src/interruptions.c ****         }
2001:..\src/interruptions.c ****         
2002:..\src/interruptions.c ****     }
2003:..\src/interruptions.c ****     else {
2004:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2005:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
2006:..\src/interruptions.c ****         
2007:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2008:..\src/interruptions.c ****         
2009:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6666              		.loc 1 2009 0
 6667 0314 9E4B     		ldr	r3, .L544+12
 6668 0316 1B68     		ldr	r3, [r3]
 6669 0318 B3F57A7F 		cmp	r3, #1000
 6670 031c 0DD1     		bne	.L413
 6671              		.loc 1 2009 0 is_stmt 0 discriminator 1
 6672 031e 9D4B     		ldr	r3, .L544+16
 6673 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6674 0322 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 156


 6675 0324 09D1     		bne	.L413
2010:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2011:..\src/interruptions.c ****             tension_valid = TRUE;   
 6676              		.loc 1 2011 0 is_stmt 1
 6677 0326 9B4B     		ldr	r3, .L544+16
 6678 0328 0122     		movs	r2, #1
 6679 032a 1A70     		strb	r2, [r3]
2012:..\src/interruptions.c ****             count = 0;
 6680              		.loc 1 2012 0
 6681 032c 9A4B     		ldr	r3, .L544+20
 6682 032e 0022     		movs	r2, #0
 6683 0330 1A80     		strh	r2, [r3]	@ movhi
2013:..\src/interruptions.c ****             v_count = 0;
 6684              		.loc 1 2013 0
 6685 0332 974B     		ldr	r3, .L544+12
 6686 0334 0022     		movs	r2, #0
 6687 0336 1A60     		str	r2, [r3]
 6688 0338 2CE0     		b	.L414
 6689              	.L413:
2014:..\src/interruptions.c ****         }
2015:..\src/interruptions.c ****         else {  
2016:..\src/interruptions.c ****             // wait for battery voltage stabilization
2017:..\src/interruptions.c ****             if (v_count < 1000) {
 6690              		.loc 1 2017 0
 6691 033a 954B     		ldr	r3, .L544+12
 6692 033c 1B68     		ldr	r3, [r3]
 6693 033e B3F57A7F 		cmp	r3, #1000
 6694 0342 04D2     		bcs	.L415
2018:..\src/interruptions.c ****                 v_count = v_count + 1;
 6695              		.loc 1 2018 0
 6696 0344 924B     		ldr	r3, .L544+12
 6697 0346 1B68     		ldr	r3, [r3]
 6698 0348 0133     		adds	r3, r3, #1
 6699 034a 914A     		ldr	r2, .L544+12
 6700 034c 1360     		str	r3, [r2]
 6701              	.L415:
2019:..\src/interruptions.c ****             }
2020:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6702              		.loc 1 2020 0
 6703 034e 8D4B     		ldr	r3, .L544
 6704 0350 0022     		movs	r2, #0
 6705 0352 1A70     		strb	r2, [r3]
 6706 0354 1AE0     		b	.L416
 6707              	.L417:
2021:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6708              		.loc 1 2021 0 discriminator 3
 6709 0356 8B4B     		ldr	r3, .L544
 6710 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6711 035a 1C46     		mov	r4, r3
 6712 035c 894B     		ldr	r3, .L544
 6713 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6714 0360 1A46     		mov	r2, r3
 6715 0362 8E4B     		ldr	r3, .L544+24
 6716 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6717 0368 864B     		ldr	r3, .L544
 6718 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6719 036c DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 157


 6720 036e 8C4A     		ldr	r2, .L544+28
 6721 0370 1344     		add	r3, r3, r2
 6722 0372 1946     		mov	r1, r3
 6723 0374 FFF7FEFF 		bl	filter
 6724 0378 0246     		mov	r2, r0
 6725 037a 8A4B     		ldr	r3, .L544+32
 6726 037c 43F82420 		str	r2, [r3, r4, lsl #2]
2020:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6727              		.loc 1 2020 0 discriminator 3
 6728 0380 804B     		ldr	r3, .L544
 6729 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6730 0384 0133     		adds	r3, r3, #1
 6731 0386 DAB2     		uxtb	r2, r3
 6732 0388 7E4B     		ldr	r3, .L544
 6733 038a 1A70     		strb	r2, [r3]
 6734              	.L416:
2020:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6735              		.loc 1 2020 0 is_stmt 0 discriminator 1
 6736 038c 7D4B     		ldr	r3, .L544
 6737 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6738 0390 012B     		cmp	r3, #1
 6739 0392 E0D9     		bls	.L417
 6740              	.L414:
2022:..\src/interruptions.c ****             }
2023:..\src/interruptions.c ****         }
2024:..\src/interruptions.c **** 
2025:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6741              		.loc 1 2025 0 is_stmt 1
 6742 0394 7B4B     		ldr	r3, .L544
 6743 0396 0022     		movs	r2, #0
 6744 0398 1A70     		strb	r2, [r3]
 6745 039a 17E0     		b	.L418
 6746              	.L420:
2026:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6747              		.loc 1 2026 0
 6748 039c 794B     		ldr	r3, .L544
 6749 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6750 03a0 1946     		mov	r1, r3
 6751 03a2 814A     		ldr	r2, .L544+36
 6752 03a4 0B46     		mov	r3, r1
 6753 03a6 DB00     		lsls	r3, r3, #3
 6754 03a8 5B1A     		subs	r3, r3, r1
 6755 03aa 1B01     		lsls	r3, r3, #4
 6756 03ac 1344     		add	r3, r3, r2
 6757 03ae E133     		adds	r3, r3, #225
 6758 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6759 03b2 002B     		cmp	r3, #0
 6760 03b4 04D0     		beq	.L419
2027:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6761              		.loc 1 2027 0
 6762 03b6 734B     		ldr	r3, .L544
 6763 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6764 03ba 1846     		mov	r0, r3
 6765 03bc FFF7FEFF 		bl	pwm_limit_search
 6766              	.L419:
2025:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6767              		.loc 1 2025 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 158


 6768 03c0 704B     		ldr	r3, .L544
 6769 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6770 03c4 0133     		adds	r3, r3, #1
 6771 03c6 DAB2     		uxtb	r2, r3
 6772 03c8 6E4B     		ldr	r3, .L544
 6773 03ca 1A70     		strb	r2, [r3]
 6774              	.L418:
2025:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6775              		.loc 1 2025 0 is_stmt 0 discriminator 1
 6776 03cc 6D4B     		ldr	r3, .L544
 6777 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6778 03d0 012B     		cmp	r3, #1
 6779 03d2 E3D9     		bls	.L420
2028:..\src/interruptions.c ****         }
2029:..\src/interruptions.c ****         
2030:..\src/interruptions.c ****         // Filter and Set currents
2031:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6780              		.loc 1 2031 0 is_stmt 1
 6781 03d4 744B     		ldr	r3, .L544+36
 6782 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6783 03da 002B     		cmp	r3, #0
 6784 03dc 21D1     		bne	.L421
2032:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6785              		.loc 1 2032 0
 6786 03de 724B     		ldr	r3, .L544+36
 6787 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6788 03e4 1C46     		mov	r4, r3
 6789 03e6 714B     		ldr	r3, .L544+40
 6790 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 6791 03ec A3F5CE63 		sub	r3, r3, #1648
 6792 03f0 45F66A02 		movw	r2, #22634
 6793 03f4 02FB03F3 		mul	r3, r2, r3
 6794 03f8 5B13     		asrs	r3, r3, #13
 6795 03fa 1BB2     		sxth	r3, r3
 6796 03fc 1A46     		mov	r2, r3
 6797 03fe 6C4B     		ldr	r3, .L544+44
 6798 0400 93F90030 		ldrsb	r3, [r3]
 6799 0404 03FB02F3 		mul	r3, r3, r2
 6800 0408 6A49     		ldr	r1, .L544+48
 6801 040a 1846     		mov	r0, r3
 6802 040c FFF7FEFF 		bl	filter
 6803 0410 0146     		mov	r1, r0
 6804 0412 694A     		ldr	r2, .L544+52
 6805 0414 3423     		movs	r3, #52
 6806 0416 03FB04F3 		mul	r3, r3, r4
 6807 041a 1344     		add	r3, r3, r2
 6808 041c 0C33     		adds	r3, r3, #12
 6809 041e 1960     		str	r1, [r3]
 6810 0420 1BE0     		b	.L422
 6811              	.L421:
2033:..\src/interruptions.c ****         } else { // [GS]
2034:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6812              		.loc 1 2034 0
 6813 0422 614B     		ldr	r3, .L544+36
 6814 0424 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6815 0428 1846     		mov	r0, r3
 6816 042a 604B     		ldr	r3, .L544+40
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 159


 6817 042c B3F90230 		ldrsh	r3, [r3, #2]
 6818 0430 A3F26362 		subw	r2, r3, #1635
 6819 0434 1346     		mov	r3, r2
 6820 0436 1B01     		lsls	r3, r3, #4
 6821 0438 9B1A     		subs	r3, r3, r2
 6822 043a 5B01     		lsls	r3, r3, #5
 6823 043c 1B11     		asrs	r3, r3, #4
 6824 043e 1BB2     		sxth	r3, r3
 6825 0440 1A46     		mov	r2, r3
 6826 0442 5B4B     		ldr	r3, .L544+44
 6827 0444 93F90030 		ldrsb	r3, [r3]
 6828 0448 03FB02F2 		mul	r2, r3, r2
 6829 044c 5A49     		ldr	r1, .L544+52
 6830 044e 3423     		movs	r3, #52
 6831 0450 03FB00F3 		mul	r3, r3, r0
 6832 0454 0B44     		add	r3, r3, r1
 6833 0456 0C33     		adds	r3, r3, #12
 6834 0458 1A60     		str	r2, [r3]
 6835              	.L422:
2035:..\src/interruptions.c ****         }
2036:..\src/interruptions.c **** 
2037:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2038:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6836              		.loc 1 2038 0
 6837 045a 534B     		ldr	r3, .L544+36
 6838 045c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6839 0460 1D46     		mov	r5, r3
 6840 0462 514B     		ldr	r3, .L544+36
 6841 0464 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6842 0468 1946     		mov	r1, r3
 6843 046a 534A     		ldr	r2, .L544+52
 6844 046c 3423     		movs	r3, #52
 6845 046e 03FB01F3 		mul	r3, r3, r1
 6846 0472 1344     		add	r3, r3, r2
 6847 0474 0C33     		adds	r3, r3, #12
 6848 0476 1C68     		ldr	r4, [r3]
 6849 0478 4B4B     		ldr	r3, .L544+36
 6850 047a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6851 047e 1946     		mov	r1, r3
 6852 0480 4D4A     		ldr	r2, .L544+52
 6853 0482 3423     		movs	r3, #52
 6854 0484 03FB01F3 		mul	r3, r3, r1
 6855 0488 1344     		add	r3, r3, r2
 6856 048a 1A68     		ldr	r2, [r3]
 6857 048c 464B     		ldr	r3, .L544+36
 6858 048e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6859 0492 1846     		mov	r0, r3
 6860 0494 4449     		ldr	r1, .L544+36
 6861 0496 0346     		mov	r3, r0
 6862 0498 5B00     		lsls	r3, r3, #1
 6863 049a 0344     		add	r3, r3, r0
 6864 049c 1B01     		lsls	r3, r3, #4
 6865 049e 0B44     		add	r3, r3, r1
 6866 04a0 03F29513 		addw	r3, r3, #405
 6867 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6868 04a6 42FA03F6 		asr	r6, r2, r3
 6869 04aa 3F4B     		ldr	r3, .L544+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 160


 6870 04ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6871 04b0 1946     		mov	r1, r3
 6872 04b2 414A     		ldr	r2, .L544+52
 6873 04b4 3423     		movs	r3, #52
 6874 04b6 03FB01F3 		mul	r3, r3, r1
 6875 04ba 1344     		add	r3, r3, r2
 6876 04bc 1C33     		adds	r3, r3, #28
 6877 04be 1A68     		ldr	r2, [r3]
 6878 04c0 394B     		ldr	r3, .L544+36
 6879 04c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6880 04c6 1846     		mov	r0, r3
 6881 04c8 3749     		ldr	r1, .L544+36
 6882 04ca 0346     		mov	r3, r0
 6883 04cc 5B00     		lsls	r3, r3, #1
 6884 04ce 0344     		add	r3, r3, r0
 6885 04d0 1B01     		lsls	r3, r3, #4
 6886 04d2 0B44     		add	r3, r3, r1
 6887 04d4 03F29513 		addw	r3, r3, #405
 6888 04d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6889 04da 42FA03FE 		asr	lr, r2, r3
 6890 04de 374B     		ldr	r3, .L544+56
 6891 04e0 1A68     		ldr	r2, [r3]
 6892 04e2 314B     		ldr	r3, .L544+36
 6893 04e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6894 04e8 1846     		mov	r0, r3
 6895 04ea 2F49     		ldr	r1, .L544+36
 6896 04ec 0346     		mov	r3, r0
 6897 04ee 5B00     		lsls	r3, r3, #1
 6898 04f0 0344     		add	r3, r3, r0
 6899 04f2 1B01     		lsls	r3, r3, #4
 6900 04f4 0B44     		add	r3, r3, r1
 6901 04f6 03F29513 		addw	r3, r3, #405
 6902 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6903 04fc 42FA03F3 		asr	r3, r2, r3
 6904 0500 7246     		mov	r2, lr
 6905 0502 3146     		mov	r1, r6
 6906 0504 0020     		movs	r0, #0
 6907 0506 FFF7FEFF 		bl	curr_estim
 6908 050a 0346     		mov	r3, r0
 6909 050c E31A     		subs	r3, r4, r3
 6910 050e 2C49     		ldr	r1, .L544+60
 6911 0510 1846     		mov	r0, r3
 6912 0512 FFF7FEFF 		bl	filter
 6913 0516 0346     		mov	r3, r0
 6914 0518 1BB2     		sxth	r3, r3
 6915 051a 1946     		mov	r1, r3
 6916 051c 264A     		ldr	r2, .L544+52
 6917 051e 3423     		movs	r3, #52
 6918 0520 03FB05F3 		mul	r3, r3, r5
 6919 0524 1344     		add	r3, r3, r2
 6920 0526 1033     		adds	r3, r3, #16
 6921 0528 1960     		str	r1, [r3]
2039:..\src/interruptions.c ****         
2040:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2041:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6922              		.loc 1 2041 0
 6923 052a 264B     		ldr	r3, .L544+64
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 161


 6924 052c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6925 052e 042B     		cmp	r3, #4
 6926 0530 40F2D080 		bls	.L423
2042:..\src/interruptions.c ****             // Filter and Set currents
2043:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6927              		.loc 1 2043 0
 6928 0534 1C4B     		ldr	r3, .L544+36
 6929 0536 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6930 053a 002B     		cmp	r3, #0
 6931 053c 46D1     		bne	.L424
2044:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6932              		.loc 1 2044 0
 6933 053e 1A4B     		ldr	r3, .L544+36
 6934 0540 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6935 0544 1C46     		mov	r4, r3
 6936 0546 194B     		ldr	r3, .L544+40
 6937 0548 B3F90A30 		ldrsh	r3, [r3, #10]
 6938 054c A3F5CE63 		sub	r3, r3, #1648
 6939 0550 45F66A02 		movw	r2, #22634
 6940 0554 02FB03F3 		mul	r3, r2, r3
 6941 0558 5B13     		asrs	r3, r3, #13
 6942 055a 1BB2     		sxth	r3, r3
 6943 055c 1A46     		mov	r2, r3
 6944 055e 144B     		ldr	r3, .L544+44
 6945 0560 93F90130 		ldrsb	r3, [r3, #1]
 6946 0564 03FB02F3 		mul	r3, r3, r2
 6947 0568 1749     		ldr	r1, .L544+68
 6948 056a 1846     		mov	r0, r3
 6949 056c FFF7FEFF 		bl	filter
 6950 0570 0146     		mov	r1, r0
 6951 0572 114A     		ldr	r2, .L544+52
 6952 0574 3423     		movs	r3, #52
 6953 0576 03FB04F3 		mul	r3, r3, r4
 6954 057a 1344     		add	r3, r3, r2
 6955 057c 0C33     		adds	r3, r3, #12
 6956 057e 1960     		str	r1, [r3]
 6957 0580 40E0     		b	.L425
 6958              	.L545:
 6959 0582 00BF     		.align	2
 6960              	.L544:
 6961 0584 72010000 		.word	idx.10653
 6962 0588 00000000 		.word	g_adc_meas
 6963 058c 00000000 		.word	c_mem
 6964 0590 74010000 		.word	v_count.10652
 6965 0594 00000000 		.word	tension_valid
 6966 0598 70010000 		.word	count.10651
 6967 059c 00000000 		.word	dev_tension
 6968 05a0 00000000 		.word	filt_v
 6969 05a4 00000000 		.word	dev_tension_f
 6970 05a8 00000000 		.word	g_mem
 6971 05ac 00000000 		.word	ADC_buf
 6972 05b0 00000000 		.word	pwm_sign
 6973 05b4 00000000 		.word	filt_i
 6974 05b8 00000000 		.word	g_meas
 6975 05bc 00000000 		.word	g_ref
 6976 05c0 00000000 		.word	filt_curr_diff
 6977 05c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 162


 6978 05c8 08000000 		.word	filt_i+8
 6979              	.L424:
2045:..\src/interruptions.c ****             } else { // [GS]
2046:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6980              		.loc 1 2046 0
 6981 05cc 954B     		ldr	r3, .L546
 6982 05ce 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6983 05d2 1846     		mov	r0, r3
 6984 05d4 944B     		ldr	r3, .L546+4
 6985 05d6 B3F90A30 		ldrsh	r3, [r3, #10]
 6986 05da A3F26362 		subw	r2, r3, #1635
 6987 05de 1346     		mov	r3, r2
 6988 05e0 1B01     		lsls	r3, r3, #4
 6989 05e2 9B1A     		subs	r3, r3, r2
 6990 05e4 5B01     		lsls	r3, r3, #5
 6991 05e6 1B11     		asrs	r3, r3, #4
 6992 05e8 1BB2     		sxth	r3, r3
 6993 05ea 1A46     		mov	r2, r3
 6994 05ec 8F4B     		ldr	r3, .L546+8
 6995 05ee 93F90130 		ldrsb	r3, [r3, #1]
 6996 05f2 03FB02F2 		mul	r2, r3, r2
 6997 05f6 8E49     		ldr	r1, .L546+12
 6998 05f8 3423     		movs	r3, #52
 6999 05fa 03FB00F3 		mul	r3, r3, r0
 7000 05fe 0B44     		add	r3, r3, r1
 7001 0600 0C33     		adds	r3, r3, #12
 7002 0602 1A60     		str	r2, [r3]
 7003              	.L425:
2047:..\src/interruptions.c ****             } 
2048:..\src/interruptions.c ****             
2049:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7004              		.loc 1 2049 0
 7005 0604 874B     		ldr	r3, .L546
 7006 0606 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7007 060a 1D46     		mov	r5, r3
 7008 060c 854B     		ldr	r3, .L546
 7009 060e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7010 0612 1946     		mov	r1, r3
 7011 0614 864A     		ldr	r2, .L546+12
 7012 0616 3423     		movs	r3, #52
 7013 0618 03FB01F3 		mul	r3, r3, r1
 7014 061c 1344     		add	r3, r3, r2
 7015 061e 0C33     		adds	r3, r3, #12
 7016 0620 1C68     		ldr	r4, [r3]
 7017 0622 804B     		ldr	r3, .L546
 7018 0624 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7019 0628 1946     		mov	r1, r3
 7020 062a 814A     		ldr	r2, .L546+12
 7021 062c 3423     		movs	r3, #52
 7022 062e 03FB01F3 		mul	r3, r3, r1
 7023 0632 1344     		add	r3, r3, r2
 7024 0634 1A68     		ldr	r2, [r3]
 7025 0636 7B4B     		ldr	r3, .L546
 7026 0638 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7027 063c 1846     		mov	r0, r3
 7028 063e 7949     		ldr	r1, .L546
 7029 0640 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 163


 7030 0642 5B00     		lsls	r3, r3, #1
 7031 0644 0344     		add	r3, r3, r0
 7032 0646 1B01     		lsls	r3, r3, #4
 7033 0648 0B44     		add	r3, r3, r1
 7034 064a 03F29513 		addw	r3, r3, #405
 7035 064e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7036 0650 42FA03F6 		asr	r6, r2, r3
 7037 0654 734B     		ldr	r3, .L546
 7038 0656 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7039 065a 1946     		mov	r1, r3
 7040 065c 744A     		ldr	r2, .L546+12
 7041 065e 3423     		movs	r3, #52
 7042 0660 03FB01F3 		mul	r3, r3, r1
 7043 0664 1344     		add	r3, r3, r2
 7044 0666 1C33     		adds	r3, r3, #28
 7045 0668 1A68     		ldr	r2, [r3]
 7046 066a 6E4B     		ldr	r3, .L546
 7047 066c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7048 0670 1846     		mov	r0, r3
 7049 0672 6C49     		ldr	r1, .L546
 7050 0674 0346     		mov	r3, r0
 7051 0676 5B00     		lsls	r3, r3, #1
 7052 0678 0344     		add	r3, r3, r0
 7053 067a 1B01     		lsls	r3, r3, #4
 7054 067c 0B44     		add	r3, r3, r1
 7055 067e 03F29513 		addw	r3, r3, #405
 7056 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7057 0684 42FA03FE 		asr	lr, r2, r3
 7058 0688 6A4B     		ldr	r3, .L546+16
 7059 068a 1A69     		ldr	r2, [r3, #16]
 7060 068c 654B     		ldr	r3, .L546
 7061 068e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7062 0692 1846     		mov	r0, r3
 7063 0694 6349     		ldr	r1, .L546
 7064 0696 0346     		mov	r3, r0
 7065 0698 5B00     		lsls	r3, r3, #1
 7066 069a 0344     		add	r3, r3, r0
 7067 069c 1B01     		lsls	r3, r3, #4
 7068 069e 0B44     		add	r3, r3, r1
 7069 06a0 03F29513 		addw	r3, r3, #405
 7070 06a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7071 06a6 42FA03F3 		asr	r3, r2, r3
 7072 06aa 7246     		mov	r2, lr
 7073 06ac 3146     		mov	r1, r6
 7074 06ae 0120     		movs	r0, #1
 7075 06b0 FFF7FEFF 		bl	curr_estim
 7076 06b4 0346     		mov	r3, r0
 7077 06b6 E31A     		subs	r3, r4, r3
 7078 06b8 5F49     		ldr	r1, .L546+20
 7079 06ba 1846     		mov	r0, r3
 7080 06bc FFF7FEFF 		bl	filter
 7081 06c0 0346     		mov	r3, r0
 7082 06c2 1BB2     		sxth	r3, r3
 7083 06c4 1946     		mov	r1, r3
 7084 06c6 5A4A     		ldr	r2, .L546+12
 7085 06c8 3423     		movs	r3, #52
 7086 06ca 03FB05F3 		mul	r3, r3, r5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 164


 7087 06ce 1344     		add	r3, r3, r2
 7088 06d0 1033     		adds	r3, r3, #16
 7089 06d2 1960     		str	r1, [r3]
 7090              	.L423:
2050:..\src/interruptions.c ****         }
2051:..\src/interruptions.c ****     
2052:..\src/interruptions.c ****         // Check Interrupt 
2053:..\src/interruptions.c ****     
2054:..\src/interruptions.c ****         if (interrupt_flag){
 7091              		.loc 1 2054 0
 7092 06d4 594B     		ldr	r3, .L546+24
 7093 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7094 06d8 002B     		cmp	r3, #0
 7095 06da 06D0     		beq	.L412
2055:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7096              		.loc 1 2055 0
 7097 06dc 574B     		ldr	r3, .L546+24
 7098 06de 0022     		movs	r2, #0
 7099 06e0 1A70     		strb	r2, [r3]
2056:..\src/interruptions.c ****             interrupt_manager();
 7100              		.loc 1 2056 0
 7101 06e2 FFF7FEFF 		bl	interrupt_manager
 7102 06e6 00E0     		b	.L412
 7103              	.L524:
1966:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7104              		.loc 1 1966 0
 7105 06e8 00BF     		nop
 7106              	.L412:
2057:..\src/interruptions.c ****         }
2058:..\src/interruptions.c **** 
2059:..\src/interruptions.c ****     }
2060:..\src/interruptions.c ****     
2061:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2062:..\src/interruptions.c ****         
2063:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2064:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7107              		.loc 1 2064 0
 7108 06ea 554B     		ldr	r3, .L546+28
 7109 06ec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7110 06f0 002B     		cmp	r3, #0
 7111 06f2 05D1     		bne	.L426
2065:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7112              		.loc 1 2065 0
 7113 06f4 534B     		ldr	r3, .L546+32
 7114 06f6 0022     		movs	r2, #0
 7115 06f8 1A70     		strb	r2, [r3]
2066:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7116              		.loc 1 2066 0
 7117 06fa 534B     		ldr	r3, .L546+36
 7118 06fc 0022     		movs	r2, #0
 7119 06fe 1A70     		strb	r2, [r3]
 7120              	.L426:
2067:..\src/interruptions.c ****     }
2068:..\src/interruptions.c **** 
2069:..\src/interruptions.c ****     // EMG 1 calibration state machine
2070:..\src/interruptions.c ****    
2071:..\src/interruptions.c ****     // Calibration state machine
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 165


2072:..\src/interruptions.c ****     switch(emg_1_status) {
 7121              		.loc 1 2072 0
 7122 0700 504B     		ldr	r3, .L546+32
 7123 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7124 0704 032B     		cmp	r3, #3
 7125 0706 00F2FC80 		bhi	.L525
 7126 070a 01A2     		adr	r2, .L429
 7127 070c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7128              		.p2align 2
 7129              	.L429:
 7130 0710 21070000 		.word	.L428+1
 7131 0714 D1070000 		.word	.L430+1
 7132 0718 E7070000 		.word	.L431+1
 7133 071c 59080000 		.word	.L432+1
 7134              		.p2align 1
 7135              	.L428:
2073:..\src/interruptions.c ****         case NORMAL: // normal execution
2074:..\src/interruptions.c ****             
2075:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7136              		.loc 1 2075 0
 7137 0720 404B     		ldr	r3, .L546
 7138 0722 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7139 0726 022B     		cmp	r3, #2
 7140 0728 13D0     		beq	.L433
 7141              		.loc 1 2075 0 is_stmt 0 discriminator 1
 7142 072a 3E4B     		ldr	r3, .L546
 7143 072c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7144 0730 032B     		cmp	r3, #3
 7145 0732 0ED0     		beq	.L433
2076:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7146              		.loc 1 2076 0 is_stmt 1
 7147 0734 424B     		ldr	r3, .L546+28
 7148 0736 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7149 073a 0233     		adds	r3, r3, #2
 7150 073c 3A4A     		ldr	r2, .L546+4
 7151 073e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7152 0742 A3F26763 		subw	r3, r3, #1639
 7153 0746 5722     		movs	r2, #87
 7154 0748 02FB03F3 		mul	r3, r2, r3
 7155 074c 5B11     		asrs	r3, r3, #5
 7156 074e 7B60     		str	r3, [r7, #4]
 7157 0750 07E0     		b	.L434
 7158              	.L433:
2077:..\src/interruptions.c ****             }
2078:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2079:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7159              		.loc 1 2079 0
 7160 0752 3B4B     		ldr	r3, .L546+28
 7161 0754 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7162 0758 0233     		adds	r3, r3, #2
 7163 075a 334A     		ldr	r2, .L546+4
 7164 075c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7165 0760 7B60     		str	r3, [r7, #4]
 7166              	.L434:
2080:..\src/interruptions.c ****             }
2081:..\src/interruptions.c ****             
2082:..\src/interruptions.c ****             if (i_aux < 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 166


 7167              		.loc 1 2082 0
 7168 0762 7B68     		ldr	r3, [r7, #4]
 7169 0764 002B     		cmp	r3, #0
 7170 0766 01DA     		bge	.L435
2083:..\src/interruptions.c ****                 i_aux = 0;
 7171              		.loc 1 2083 0
 7172 0768 0023     		movs	r3, #0
 7173 076a 7B60     		str	r3, [r7, #4]
 7174              	.L435:
2084:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7175              		.loc 1 2084 0
 7176 076c 3749     		ldr	r1, .L546+40
 7177 076e 7868     		ldr	r0, [r7, #4]
 7178 0770 FFF7FEFF 		bl	filter
 7179 0774 7860     		str	r0, [r7, #4]
2085:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7180              		.loc 1 2085 0
 7181 0776 7B68     		ldr	r3, [r7, #4]
 7182 0778 9B02     		lsls	r3, r3, #10
 7183 077a 1A46     		mov	r2, r3
 7184 077c 294B     		ldr	r3, .L546
 7185 077e D3F8F431 		ldr	r3, [r3, #500]
 7186 0782 B2FBF3F3 		udiv	r3, r2, r3
 7187 0786 7B60     		str	r3, [r7, #4]
2086:..\src/interruptions.c **** 
2087:..\src/interruptions.c ****             if (interrupt_flag){
 7188              		.loc 1 2087 0
 7189 0788 2C4B     		ldr	r3, .L546+24
 7190 078a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7191 078c 002B     		cmp	r3, #0
 7192 078e 04D0     		beq	.L436
2088:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7193              		.loc 1 2088 0
 7194 0790 2A4B     		ldr	r3, .L546+24
 7195 0792 0022     		movs	r2, #0
 7196 0794 1A70     		strb	r2, [r3]
2089:..\src/interruptions.c ****                 interrupt_manager();
 7197              		.loc 1 2089 0
 7198 0796 FFF7FEFF 		bl	interrupt_manager
 7199              	.L436:
2090:..\src/interruptions.c ****             }
2091:..\src/interruptions.c ****             //Saturation
2092:..\src/interruptions.c ****             if (i_aux < 0)
 7200              		.loc 1 2092 0
 7201 079a 7B68     		ldr	r3, [r7, #4]
 7202 079c 002B     		cmp	r3, #0
 7203 079e 02DA     		bge	.L437
2093:..\src/interruptions.c ****                 i_aux = 0;
 7204              		.loc 1 2093 0
 7205 07a0 0023     		movs	r3, #0
 7206 07a2 7B60     		str	r3, [r7, #4]
 7207 07a4 06E0     		b	.L438
 7208              	.L437:
2094:..\src/interruptions.c ****             else 
2095:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7209              		.loc 1 2095 0
 7210 07a6 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 167


 7211 07a8 B3F5806F 		cmp	r3, #1024
 7212 07ac 02DD     		ble	.L438
2096:..\src/interruptions.c ****                     i_aux = 1024;
 7213              		.loc 1 2096 0
 7214 07ae 4FF48063 		mov	r3, #1024
 7215 07b2 7B60     		str	r3, [r7, #4]
 7216              	.L438:
2097:..\src/interruptions.c ****             
2098:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7217              		.loc 1 2098 0
 7218 07b4 264A     		ldr	r2, .L546+44
 7219 07b6 7B68     		ldr	r3, [r7, #4]
 7220 07b8 1360     		str	r3, [r2]
2099:..\src/interruptions.c **** 
2100:..\src/interruptions.c ****             if (interrupt_flag){
 7221              		.loc 1 2100 0
 7222 07ba 204B     		ldr	r3, .L546+24
 7223 07bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7224 07be 002B     		cmp	r3, #0
 7225 07c0 00F0A180 		beq	.L526
2101:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7226              		.loc 1 2101 0
 7227 07c4 1D4B     		ldr	r3, .L546+24
 7228 07c6 0022     		movs	r2, #0
 7229 07c8 1A70     		strb	r2, [r3]
2102:..\src/interruptions.c ****                 interrupt_manager();
 7230              		.loc 1 2102 0
 7231 07ca FFF7FEFF 		bl	interrupt_manager
2103:..\src/interruptions.c ****             }
2104:..\src/interruptions.c ****             
2105:..\src/interruptions.c ****             break;
 7232              		.loc 1 2105 0
 7233 07ce 9AE0     		b	.L526
 7234              	.L430:
2106:..\src/interruptions.c **** 
2107:..\src/interruptions.c ****         case RESET: // reset variables
2108:..\src/interruptions.c ****             emg_counter_1 = 0;
 7235              		.loc 1 2108 0
 7236 07d0 204B     		ldr	r3, .L546+48
 7237 07d2 0022     		movs	r2, #0
 7238 07d4 1A80     		strh	r2, [r3]	@ movhi
2109:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7239              		.loc 1 2109 0
 7240 07d6 134B     		ldr	r3, .L546
 7241 07d8 0022     		movs	r2, #0
 7242 07da C3F8F421 		str	r2, [r3, #500]
2110:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7243              		.loc 1 2110 0
 7244 07de 194B     		ldr	r3, .L546+32
 7245 07e0 0222     		movs	r2, #2
 7246 07e2 1A70     		strb	r2, [r3]
2111:..\src/interruptions.c ****             break;
 7247              		.loc 1 2111 0
 7248 07e4 94E0     		b	.L440
 7249              	.L431:
2112:..\src/interruptions.c **** 
2113:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 168


2114:..\src/interruptions.c ****             emg_counter_1++;
 7250              		.loc 1 2114 0
 7251 07e6 1B4B     		ldr	r3, .L546+48
 7252 07e8 1B88     		ldrh	r3, [r3]
 7253 07ea 0133     		adds	r3, r3, #1
 7254 07ec 9AB2     		uxth	r2, r3
 7255 07ee 194B     		ldr	r3, .L546+48
 7256 07f0 1A80     		strh	r2, [r3]	@ movhi
2115:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7257              		.loc 1 2115 0
 7258 07f2 184B     		ldr	r3, .L546+48
 7259 07f4 1B88     		ldrh	r3, [r3]
 7260 07f6 B3F5FA7F 		cmp	r3, #500
 7261 07fa 40F08680 		bne	.L527
2116:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7262              		.loc 1 2116 0
 7263 07fe 154B     		ldr	r3, .L546+48
 7264 0800 0022     		movs	r2, #0
 7265 0802 1A80     		strh	r2, [r3]	@ movhi
2117:..\src/interruptions.c ****                 LED_control(1);
 7266              		.loc 1 2117 0
 7267 0804 0120     		movs	r0, #1
 7268 0806 FFF7FEFF 		bl	LED_control
2118:..\src/interruptions.c **** 				
2119:..\src/interruptions.c ****                 if (interrupt_flag){
 7269              		.loc 1 2119 0
 7270 080a 0C4B     		ldr	r3, .L546+24
 7271 080c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7272 080e 002B     		cmp	r3, #0
 7273 0810 04D0     		beq	.L442
2120:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7274              		.loc 1 2120 0
 7275 0812 0A4B     		ldr	r3, .L546+24
 7276 0814 0022     		movs	r2, #0
 7277 0816 1A70     		strb	r2, [r3]
2121:..\src/interruptions.c ****                     interrupt_manager();
 7278              		.loc 1 2121 0
 7279 0818 FFF7FEFF 		bl	interrupt_manager
 7280              	.L442:
2122:..\src/interruptions.c ****                 }
2123:..\src/interruptions.c ****                 
2124:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7281              		.loc 1 2124 0
 7282 081c 094B     		ldr	r3, .L546+32
 7283 081e 0322     		movs	r2, #3
 7284 0820 1A70     		strb	r2, [r3]
2125:..\src/interruptions.c ****             }
2126:..\src/interruptions.c ****             break;
 7285              		.loc 1 2126 0
 7286 0822 72E0     		b	.L527
 7287              	.L547:
 7288              		.align	2
 7289              	.L546:
 7290 0824 00000000 		.word	g_mem
 7291 0828 00000000 		.word	ADC_buf
 7292 082c 00000000 		.word	pwm_sign
 7293 0830 00000000 		.word	g_meas
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 169


 7294 0834 00000000 		.word	g_ref
 7295 0838 08000000 		.word	filt_curr_diff+8
 7296 083c 00000000 		.word	interrupt_flag
 7297 0840 00000000 		.word	c_mem
 7298 0844 00000000 		.word	emg_1_status
 7299 0848 00000000 		.word	emg_2_status
 7300 084c 00000000 		.word	filt_emg
 7301 0850 00000000 		.word	g_adc_meas
 7302 0854 78010000 		.word	emg_counter_1.10644
 7303              	.L432:
2127:..\src/interruptions.c **** 
2128:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2129:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2130:..\src/interruptions.c ****             emg_counter_1++;
 7304              		.loc 1 2130 0
 7305 0858 AF4B     		ldr	r3, .L548
 7306 085a 1B88     		ldrh	r3, [r3]
 7307 085c 0133     		adds	r3, r3, #1
 7308 085e 9AB2     		uxth	r2, r3
 7309 0860 AD4B     		ldr	r3, .L548
 7310 0862 1A80     		strh	r2, [r3]	@ movhi
2131:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7311              		.loc 1 2131 0
 7312 0864 AD4B     		ldr	r3, .L548+4
 7313 0866 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7314 086a 0233     		adds	r3, r3, #2
 7315 086c AC4A     		ldr	r2, .L548+8
 7316 086e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7317 0872 002B     		cmp	r3, #0
 7318 0874 07DA     		bge	.L443
2132:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7319              		.loc 1 2132 0
 7320 0876 A94B     		ldr	r3, .L548+4
 7321 0878 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7322 087c 0233     		adds	r3, r3, #2
 7323 087e A84A     		ldr	r2, .L548+8
 7324 0880 0021     		movs	r1, #0
 7325 0882 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7326              	.L443:
2133:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7327              		.loc 1 2133 0
 7328 0886 A54B     		ldr	r3, .L548+4
 7329 0888 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7330 088c 0233     		adds	r3, r3, #2
 7331 088e A44A     		ldr	r2, .L548+8
 7332 0890 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7333 0894 A349     		ldr	r1, .L548+12
 7334 0896 1846     		mov	r0, r3
 7335 0898 FFF7FEFF 		bl	filter
 7336 089c 0246     		mov	r2, r0
 7337 089e A24B     		ldr	r3, .L548+16
 7338 08a0 D3F8F431 		ldr	r3, [r3, #500]
 7339 08a4 1344     		add	r3, r3, r2
 7340 08a6 A04A     		ldr	r2, .L548+16
 7341 08a8 C2F8F431 		str	r3, [r2, #500]
2134:..\src/interruptions.c ****             
2135:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 170


 7342              		.loc 1 2135 0
 7343 08ac 9F4B     		ldr	r3, .L548+20
 7344 08ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7345 08b0 002B     		cmp	r3, #0
 7346 08b2 04D0     		beq	.L444
2136:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7347              		.loc 1 2136 0
 7348 08b4 9D4B     		ldr	r3, .L548+20
 7349 08b6 0022     		movs	r2, #0
 7350 08b8 1A70     		strb	r2, [r3]
2137:..\src/interruptions.c ****                 interrupt_manager();
 7351              		.loc 1 2137 0
 7352 08ba FFF7FEFF 		bl	interrupt_manager
 7353              	.L444:
2138:..\src/interruptions.c ****             }
2139:..\src/interruptions.c ****             
2140:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7354              		.loc 1 2140 0
 7355 08be 964B     		ldr	r3, .L548
 7356 08c0 1B88     		ldrh	r3, [r3]
 7357 08c2 B3F57A7F 		cmp	r3, #1000
 7358 08c6 22D1     		bne	.L528
2141:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7359              		.loc 1 2141 0
 7360 08c8 974B     		ldr	r3, .L548+16
 7361 08ca D3F8F431 		ldr	r3, [r3, #500]
 7362 08ce 984A     		ldr	r2, .L548+24
 7363 08d0 A2FB0323 		umull	r2, r3, r2, r3
 7364 08d4 9B09     		lsrs	r3, r3, #6
 7365 08d6 944A     		ldr	r2, .L548+16
 7366 08d8 C2F8F431 		str	r3, [r2, #500]
2142:..\src/interruptions.c **** 
2143:..\src/interruptions.c ****                 if (interrupt_flag){
 7367              		.loc 1 2143 0
 7368 08dc 934B     		ldr	r3, .L548+20
 7369 08de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7370 08e0 002B     		cmp	r3, #0
 7371 08e2 04D0     		beq	.L446
2144:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7372              		.loc 1 2144 0
 7373 08e4 914B     		ldr	r3, .L548+20
 7374 08e6 0022     		movs	r2, #0
 7375 08e8 1A70     		strb	r2, [r3]
2145:..\src/interruptions.c ****                     interrupt_manager();
 7376              		.loc 1 2145 0
 7377 08ea FFF7FEFF 		bl	interrupt_manager
 7378              	.L446:
2146:..\src/interruptions.c ****                 }                    
2147:..\src/interruptions.c ****                 
2148:..\src/interruptions.c ****                 LED_control(0);
 7379              		.loc 1 2148 0
 7380 08ee 0020     		movs	r0, #0
 7381 08f0 FFF7FEFF 		bl	LED_control
2149:..\src/interruptions.c **** 				
2150:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7382              		.loc 1 2150 0
 7383 08f4 884B     		ldr	r3, .L548
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 171


 7384 08f6 0022     		movs	r2, #0
 7385 08f8 1A80     		strh	r2, [r3]	@ movhi
2151:..\src/interruptions.c **** 
2152:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7386              		.loc 1 2152 0
 7387 08fa 8E4B     		ldr	r3, .L548+28
 7388 08fc 0022     		movs	r2, #0
 7389 08fe 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****             }
2154:..\src/interruptions.c ****             break;
 7390              		.loc 1 2154 0
 7391 0900 05E0     		b	.L528
 7392              	.L525:
2155:..\src/interruptions.c **** 
2156:..\src/interruptions.c ****         default:
2157:..\src/interruptions.c ****             break;
 7393              		.loc 1 2157 0
 7394 0902 00BF     		nop
 7395 0904 04E0     		b	.L440
 7396              	.L526:
2105:..\src/interruptions.c **** 
 7397              		.loc 1 2105 0
 7398 0906 00BF     		nop
 7399 0908 02E0     		b	.L440
 7400              	.L527:
2126:..\src/interruptions.c **** 
 7401              		.loc 1 2126 0
 7402 090a 00BF     		nop
 7403 090c 00E0     		b	.L440
 7404              	.L528:
2154:..\src/interruptions.c **** 
 7405              		.loc 1 2154 0
 7406 090e 00BF     		nop
 7407              	.L440:
2158:..\src/interruptions.c ****     }
2159:..\src/interruptions.c **** 
2160:..\src/interruptions.c ****     if (interrupt_flag){
 7408              		.loc 1 2160 0
 7409 0910 864B     		ldr	r3, .L548+20
 7410 0912 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7411 0914 002B     		cmp	r3, #0
 7412 0916 04D0     		beq	.L447
2161:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7413              		.loc 1 2161 0
 7414 0918 844B     		ldr	r3, .L548+20
 7415 091a 0022     		movs	r2, #0
 7416 091c 1A70     		strb	r2, [r3]
2162:..\src/interruptions.c ****         interrupt_manager();
 7417              		.loc 1 2162 0
 7418 091e FFF7FEFF 		bl	interrupt_manager
 7419              	.L447:
2163:..\src/interruptions.c ****     }
2164:..\src/interruptions.c ****     // EMG 2 calibration state machine
2165:..\src/interruptions.c ****     switch(emg_2_status) {
 7420              		.loc 1 2165 0
 7421 0922 854B     		ldr	r3, .L548+32
 7422 0924 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 172


 7423 0926 052B     		cmp	r3, #5
 7424 0928 00F2CA81 		bhi	.L529
 7425 092c 01A2     		adr	r2, .L450
 7426 092e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7427 0932 00BF     		.p2align 2
 7428              	.L450:
 7429 0934 4D090000 		.word	.L449+1
 7430 0938 ED090000 		.word	.L451+1
 7431 093c 150A0000 		.word	.L452+1
 7432 0940 530A0000 		.word	.L453+1
 7433 0944 050B0000 		.word	.L454+1
 7434 0948 490B0000 		.word	.L455+1
 7435              		.p2align 1
 7436              	.L449:
2166:..\src/interruptions.c ****         case NORMAL: // normal execution
2167:..\src/interruptions.c ****         
2168:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7437              		.loc 1 2168 0
 7438 094c 764B     		ldr	r3, .L548+16
 7439 094e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7440 0952 022B     		cmp	r3, #2
 7441 0954 14D0     		beq	.L456
 7442              		.loc 1 2168 0 is_stmt 0 discriminator 1
 7443 0956 744B     		ldr	r3, .L548+16
 7444 0958 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7445 095c 032B     		cmp	r3, #3
 7446 095e 0FD0     		beq	.L456
2169:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7447              		.loc 1 2169 0 is_stmt 1
 7448 0960 6E4B     		ldr	r3, .L548+4
 7449 0962 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7450 0966 C3F10303 		rsb	r3, r3, #3
 7451 096a 6D4A     		ldr	r2, .L548+8
 7452 096c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7453 0970 A3F26763 		subw	r3, r3, #1639
 7454 0974 5722     		movs	r2, #87
 7455 0976 02FB03F3 		mul	r3, r2, r3
 7456 097a 5B11     		asrs	r3, r3, #5
 7457 097c 7B60     		str	r3, [r7, #4]
 7458 097e 08E0     		b	.L457
 7459              	.L456:
2170:..\src/interruptions.c ****             }
2171:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2172:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7460              		.loc 1 2172 0
 7461 0980 664B     		ldr	r3, .L548+4
 7462 0982 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7463 0986 C3F10303 		rsb	r3, r3, #3
 7464 098a 654A     		ldr	r2, .L548+8
 7465 098c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7466 0990 7B60     		str	r3, [r7, #4]
 7467              	.L457:
2173:..\src/interruptions.c ****             }
2174:..\src/interruptions.c **** 
2175:..\src/interruptions.c ****             if (i_aux < 0)
 7468              		.loc 1 2175 0
 7469 0992 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 173


 7470 0994 002B     		cmp	r3, #0
 7471 0996 01DA     		bge	.L458
2176:..\src/interruptions.c ****                 i_aux = 0;
 7472              		.loc 1 2176 0
 7473 0998 0023     		movs	r3, #0
 7474 099a 7B60     		str	r3, [r7, #4]
 7475              	.L458:
2177:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7476              		.loc 1 2177 0
 7477 099c 6749     		ldr	r1, .L548+36
 7478 099e 7868     		ldr	r0, [r7, #4]
 7479 09a0 FFF7FEFF 		bl	filter
 7480 09a4 7860     		str	r0, [r7, #4]
2178:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7481              		.loc 1 2178 0
 7482 09a6 7B68     		ldr	r3, [r7, #4]
 7483 09a8 9B02     		lsls	r3, r3, #10
 7484 09aa 1A46     		mov	r2, r3
 7485 09ac 5E4B     		ldr	r3, .L548+16
 7486 09ae D3F8F831 		ldr	r3, [r3, #504]
 7487 09b2 B2FBF3F3 		udiv	r3, r2, r3
 7488 09b6 7B60     		str	r3, [r7, #4]
2179:..\src/interruptions.c **** 
2180:..\src/interruptions.c ****             if (interrupt_flag){
 7489              		.loc 1 2180 0
 7490 09b8 5C4B     		ldr	r3, .L548+20
 7491 09ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7492 09bc 002B     		cmp	r3, #0
 7493 09be 04D0     		beq	.L459
2181:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7494              		.loc 1 2181 0
 7495 09c0 5A4B     		ldr	r3, .L548+20
 7496 09c2 0022     		movs	r2, #0
 7497 09c4 1A70     		strb	r2, [r3]
2182:..\src/interruptions.c ****                 interrupt_manager();
 7498              		.loc 1 2182 0
 7499 09c6 FFF7FEFF 		bl	interrupt_manager
 7500              	.L459:
2183:..\src/interruptions.c ****             }
2184:..\src/interruptions.c ****             
2185:..\src/interruptions.c ****             if (i_aux < 0) 
 7501              		.loc 1 2185 0
 7502 09ca 7B68     		ldr	r3, [r7, #4]
 7503 09cc 002B     		cmp	r3, #0
 7504 09ce 02DA     		bge	.L460
2186:..\src/interruptions.c ****                 i_aux = 0;
 7505              		.loc 1 2186 0
 7506 09d0 0023     		movs	r3, #0
 7507 09d2 7B60     		str	r3, [r7, #4]
 7508 09d4 06E0     		b	.L461
 7509              	.L460:
2187:..\src/interruptions.c ****             else 
2188:..\src/interruptions.c ****                 if (i_aux > 1024)
 7510              		.loc 1 2188 0
 7511 09d6 7B68     		ldr	r3, [r7, #4]
 7512 09d8 B3F5806F 		cmp	r3, #1024
 7513 09dc 02DD     		ble	.L461
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 174


2189:..\src/interruptions.c ****                     i_aux = 1024;
 7514              		.loc 1 2189 0
 7515 09de 4FF48063 		mov	r3, #1024
 7516 09e2 7B60     		str	r3, [r7, #4]
 7517              	.L461:
2190:..\src/interruptions.c ****             
2191:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7518              		.loc 1 2191 0
 7519 09e4 564A     		ldr	r2, .L548+40
 7520 09e6 7B68     		ldr	r3, [r7, #4]
 7521 09e8 5360     		str	r3, [r2, #4]
2192:..\src/interruptions.c **** 
2193:..\src/interruptions.c ****             break;
 7522              		.loc 1 2193 0
 7523 09ea 72E1     		b	.L462
 7524              	.L451:
2194:..\src/interruptions.c **** 
2195:..\src/interruptions.c ****         case RESET: // reset variables
2196:..\src/interruptions.c ****             emg_counter_2 = 0;
 7525              		.loc 1 2196 0
 7526 09ec 554B     		ldr	r3, .L548+44
 7527 09ee 0022     		movs	r2, #0
 7528 09f0 1A80     		strh	r2, [r3]	@ movhi
2197:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7529              		.loc 1 2197 0
 7530 09f2 4D4B     		ldr	r3, .L548+16
 7531 09f4 0022     		movs	r2, #0
 7532 09f6 C3F8F821 		str	r2, [r3, #504]
2198:..\src/interruptions.c **** 
2199:..\src/interruptions.c ****             if (interrupt_flag){
 7533              		.loc 1 2199 0
 7534 09fa 4C4B     		ldr	r3, .L548+20
 7535 09fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7536 09fe 002B     		cmp	r3, #0
 7537 0a00 04D0     		beq	.L463
2200:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7538              		.loc 1 2200 0
 7539 0a02 4A4B     		ldr	r3, .L548+20
 7540 0a04 0022     		movs	r2, #0
 7541 0a06 1A70     		strb	r2, [r3]
2201:..\src/interruptions.c ****                 interrupt_manager();
 7542              		.loc 1 2201 0
 7543 0a08 FFF7FEFF 		bl	interrupt_manager
 7544              	.L463:
2202:..\src/interruptions.c ****             }
2203:..\src/interruptions.c ****             
2204:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7545              		.loc 1 2204 0
 7546 0a0c 4A4B     		ldr	r3, .L548+32
 7547 0a0e 0422     		movs	r2, #4
 7548 0a10 1A70     		strb	r2, [r3]
2205:..\src/interruptions.c ****             break;
 7549              		.loc 1 2205 0
 7550 0a12 5EE1     		b	.L462
 7551              	.L452:
2206:..\src/interruptions.c **** 
2207:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 175


2208:..\src/interruptions.c ****             emg_counter_2++;
 7552              		.loc 1 2208 0
 7553 0a14 4B4B     		ldr	r3, .L548+44
 7554 0a16 1B88     		ldrh	r3, [r3]
 7555 0a18 0133     		adds	r3, r3, #1
 7556 0a1a 9AB2     		uxth	r2, r3
 7557 0a1c 494B     		ldr	r3, .L548+44
 7558 0a1e 1A80     		strh	r2, [r3]	@ movhi
2209:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7559              		.loc 1 2209 0
 7560 0a20 484B     		ldr	r3, .L548+44
 7561 0a22 1B88     		ldrh	r3, [r3]
 7562 0a24 B3F5FA7F 		cmp	r3, #500
 7563 0a28 40F04C81 		bne	.L530
2210:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7564              		.loc 1 2210 0
 7565 0a2c 454B     		ldr	r3, .L548+44
 7566 0a2e 0022     		movs	r2, #0
 7567 0a30 1A80     		strh	r2, [r3]	@ movhi
2211:..\src/interruptions.c ****                 LED_control(1);
 7568              		.loc 1 2211 0
 7569 0a32 0120     		movs	r0, #1
 7570 0a34 FFF7FEFF 		bl	LED_control
2212:..\src/interruptions.c **** 
2213:..\src/interruptions.c ****                 if (interrupt_flag){
 7571              		.loc 1 2213 0
 7572 0a38 3C4B     		ldr	r3, .L548+20
 7573 0a3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7574 0a3c 002B     		cmp	r3, #0
 7575 0a3e 04D0     		beq	.L465
2214:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7576              		.loc 1 2214 0
 7577 0a40 3A4B     		ldr	r3, .L548+20
 7578 0a42 0022     		movs	r2, #0
 7579 0a44 1A70     		strb	r2, [r3]
2215:..\src/interruptions.c ****                     interrupt_manager();
 7580              		.loc 1 2215 0
 7581 0a46 FFF7FEFF 		bl	interrupt_manager
 7582              	.L465:
2216:..\src/interruptions.c ****                 }
2217:..\src/interruptions.c ****                 
2218:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7583              		.loc 1 2218 0
 7584 0a4a 3B4B     		ldr	r3, .L548+32
 7585 0a4c 0322     		movs	r2, #3
 7586 0a4e 1A70     		strb	r2, [r3]
2219:..\src/interruptions.c ****             }
2220:..\src/interruptions.c ****             break;
 7587              		.loc 1 2220 0
 7588 0a50 38E1     		b	.L530
 7589              	.L453:
2221:..\src/interruptions.c **** 
2222:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2223:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2224:..\src/interruptions.c ****             emg_counter_2++;
 7590              		.loc 1 2224 0
 7591 0a52 3C4B     		ldr	r3, .L548+44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 176


 7592 0a54 1B88     		ldrh	r3, [r3]
 7593 0a56 0133     		adds	r3, r3, #1
 7594 0a58 9AB2     		uxth	r2, r3
 7595 0a5a 3A4B     		ldr	r3, .L548+44
 7596 0a5c 1A80     		strh	r2, [r3]	@ movhi
2225:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7597              		.loc 1 2225 0
 7598 0a5e 2F4B     		ldr	r3, .L548+4
 7599 0a60 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7600 0a64 C3F10303 		rsb	r3, r3, #3
 7601 0a68 2D4A     		ldr	r2, .L548+8
 7602 0a6a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7603 0a6e 002B     		cmp	r3, #0
 7604 0a70 08DA     		bge	.L466
2226:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7605              		.loc 1 2226 0
 7606 0a72 2A4B     		ldr	r3, .L548+4
 7607 0a74 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7608 0a78 C3F10303 		rsb	r3, r3, #3
 7609 0a7c 284A     		ldr	r2, .L548+8
 7610 0a7e 0021     		movs	r1, #0
 7611 0a80 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7612              	.L466:
2227:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7613              		.loc 1 2227 0
 7614 0a84 254B     		ldr	r3, .L548+4
 7615 0a86 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7616 0a8a C3F10303 		rsb	r3, r3, #3
 7617 0a8e 244A     		ldr	r2, .L548+8
 7618 0a90 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7619 0a94 2949     		ldr	r1, .L548+36
 7620 0a96 1846     		mov	r0, r3
 7621 0a98 FFF7FEFF 		bl	filter
 7622 0a9c 0246     		mov	r2, r0
 7623 0a9e 224B     		ldr	r3, .L548+16
 7624 0aa0 D3F8F831 		ldr	r3, [r3, #504]
 7625 0aa4 1344     		add	r3, r3, r2
 7626 0aa6 204A     		ldr	r2, .L548+16
 7627 0aa8 C2F8F831 		str	r3, [r2, #504]
2228:..\src/interruptions.c **** 
2229:..\src/interruptions.c ****             if (interrupt_flag){
 7628              		.loc 1 2229 0
 7629 0aac 1F4B     		ldr	r3, .L548+20
 7630 0aae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7631 0ab0 002B     		cmp	r3, #0
 7632 0ab2 04D0     		beq	.L467
2230:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7633              		.loc 1 2230 0
 7634 0ab4 1D4B     		ldr	r3, .L548+20
 7635 0ab6 0022     		movs	r2, #0
 7636 0ab8 1A70     		strb	r2, [r3]
2231:..\src/interruptions.c ****                 interrupt_manager();
 7637              		.loc 1 2231 0
 7638 0aba FFF7FEFF 		bl	interrupt_manager
 7639              	.L467:
2232:..\src/interruptions.c ****             }
2233:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 177


2234:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7640              		.loc 1 2234 0
 7641 0abe 214B     		ldr	r3, .L548+44
 7642 0ac0 1B88     		ldrh	r3, [r3]
 7643 0ac2 B3F57A7F 		cmp	r3, #1000
 7644 0ac6 40F0FF80 		bne	.L531
2235:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7645              		.loc 1 2235 0
 7646 0aca 174B     		ldr	r3, .L548+16
 7647 0acc D3F8F831 		ldr	r3, [r3, #504]
 7648 0ad0 174A     		ldr	r2, .L548+24
 7649 0ad2 A2FB0323 		umull	r2, r3, r2, r3
 7650 0ad6 9B09     		lsrs	r3, r3, #6
 7651 0ad8 134A     		ldr	r2, .L548+16
 7652 0ada C2F8F831 		str	r3, [r2, #504]
2236:..\src/interruptions.c ****                 LED_control(0);
 7653              		.loc 1 2236 0
 7654 0ade 0020     		movs	r0, #0
 7655 0ae0 FFF7FEFF 		bl	LED_control
2237:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7656              		.loc 1 2237 0
 7657 0ae4 174B     		ldr	r3, .L548+44
 7658 0ae6 0022     		movs	r2, #0
 7659 0ae8 1A80     		strh	r2, [r3]	@ movhi
2238:..\src/interruptions.c ****             
2239:..\src/interruptions.c ****                 if (interrupt_flag){
 7660              		.loc 1 2239 0
 7661 0aea 104B     		ldr	r3, .L548+20
 7662 0aec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7663 0aee 002B     		cmp	r3, #0
 7664 0af0 04D0     		beq	.L469
2240:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7665              		.loc 1 2240 0
 7666 0af2 0E4B     		ldr	r3, .L548+20
 7667 0af4 0022     		movs	r2, #0
 7668 0af6 1A70     		strb	r2, [r3]
2241:..\src/interruptions.c ****                     interrupt_manager();
 7669              		.loc 1 2241 0
 7670 0af8 FFF7FEFF 		bl	interrupt_manager
 7671              	.L469:
2242:..\src/interruptions.c ****                 }
2243:..\src/interruptions.c ****                 
2244:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7672              		.loc 1 2244 0
 7673 0afc 0E4B     		ldr	r3, .L548+32
 7674 0afe 0522     		movs	r2, #5
 7675 0b00 1A70     		strb	r2, [r3]
2245:..\src/interruptions.c ****             }
2246:..\src/interruptions.c ****             break;
 7676              		.loc 1 2246 0
 7677 0b02 E1E0     		b	.L531
 7678              	.L454:
2247:..\src/interruptions.c **** 
2248:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2249:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7679              		.loc 1 2249 0
 7680 0b04 0B4B     		ldr	r3, .L548+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 178


 7681 0b06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7682 0b08 002B     		cmp	r3, #0
 7683 0b0a 40F0DF80 		bne	.L532
2250:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7684              		.loc 1 2250 0
 7685 0b0e 0A4B     		ldr	r3, .L548+32
 7686 0b10 0222     		movs	r2, #2
 7687 0b12 1A70     		strb	r2, [r3]
2251:..\src/interruptions.c ****             break;
 7688              		.loc 1 2251 0
 7689 0b14 DAE0     		b	.L532
 7690              	.L549:
 7691 0b16 00BF     		.align	2
 7692              	.L548:
 7693 0b18 78010000 		.word	emg_counter_1.10644
 7694 0b1c 00000000 		.word	c_mem
 7695 0b20 00000000 		.word	ADC_buf
 7696 0b24 00000000 		.word	filt_emg
 7697 0b28 00000000 		.word	g_mem
 7698 0b2c 00000000 		.word	interrupt_flag
 7699 0b30 D34D6210 		.word	274877907
 7700 0b34 00000000 		.word	emg_1_status
 7701 0b38 00000000 		.word	emg_2_status
 7702 0b3c 08000000 		.word	filt_emg+8
 7703 0b40 00000000 		.word	g_adc_meas
 7704 0b44 7A010000 		.word	emg_counter_2.10645
 7705              	.L455:
2252:..\src/interruptions.c **** 
2253:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2254:..\src/interruptions.c ****             emg_counter_2++;
 7706              		.loc 1 2254 0
 7707 0b48 B04B     		ldr	r3, .L550
 7708 0b4a 1B88     		ldrh	r3, [r3]
 7709 0b4c 0133     		adds	r3, r3, #1
 7710 0b4e 9AB2     		uxth	r2, r3
 7711 0b50 AE4B     		ldr	r3, .L550
 7712 0b52 1A80     		strh	r2, [r3]	@ movhi
2255:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7713              		.loc 1 2255 0
 7714 0b54 AD4B     		ldr	r3, .L550
 7715 0b56 1B88     		ldrh	r3, [r3]
 7716 0b58 B3F5FA7F 		cmp	r3, #500
 7717 0b5c 40F0B880 		bne	.L533
2256:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7718              		.loc 1 2256 0
 7719 0b60 AA4B     		ldr	r3, .L550
 7720 0b62 0022     		movs	r2, #0
 7721 0b64 1A80     		strh	r2, [r3]	@ movhi
2257:..\src/interruptions.c ****                 
2258:..\src/interruptions.c ****                 if (interrupt_flag){
 7722              		.loc 1 2258 0
 7723 0b66 AA4B     		ldr	r3, .L550+4
 7724 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7725 0b6a 002B     		cmp	r3, #0
 7726 0b6c 04D0     		beq	.L472
2259:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7727              		.loc 1 2259 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 179


 7728 0b6e A84B     		ldr	r3, .L550+4
 7729 0b70 0022     		movs	r2, #0
 7730 0b72 1A70     		strb	r2, [r3]
2260:..\src/interruptions.c ****                     interrupt_manager();
 7731              		.loc 1 2260 0
 7732 0b74 FFF7FEFF 		bl	interrupt_manager
 7733              	.L472:
2261:..\src/interruptions.c ****                 }
2262:..\src/interruptions.c ****                 
2263:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7734              		.loc 1 2263 0
 7735 0b78 A64B     		ldr	r3, .L550+8
 7736 0b7a 0022     		movs	r2, #0
 7737 0b7c 1A70     		strb	r2, [r3]
 7738 0b7e 93E0     		b	.L473
 7739              	.L477:
2264:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7740              		.loc 1 2264 0
 7741 0b80 A44B     		ldr	r3, .L550+8
 7742 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7743 0b84 1946     		mov	r1, r3
 7744 0b86 A44A     		ldr	r2, .L550+12
 7745 0b88 0B46     		mov	r3, r1
 7746 0b8a DB00     		lsls	r3, r3, #3
 7747 0b8c 5B1A     		subs	r3, r3, r1
 7748 0b8e 1B01     		lsls	r3, r3, #4
 7749 0b90 1344     		add	r3, r3, r2
 7750 0b92 03F58773 		add	r3, r3, #270
 7751 0b96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7752 0b98 022B     		cmp	r3, #2
 7753 0b9a 37D0     		beq	.L474
2265:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7754              		.loc 1 2265 0 discriminator 1
 7755 0b9c 9D4B     		ldr	r3, .L550+8
 7756 0b9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7757 0ba0 1946     		mov	r1, r3
 7758 0ba2 9D4A     		ldr	r2, .L550+12
 7759 0ba4 0B46     		mov	r3, r1
 7760 0ba6 DB00     		lsls	r3, r3, #3
 7761 0ba8 5B1A     		subs	r3, r3, r1
 7762 0baa 1B01     		lsls	r3, r3, #4
 7763 0bac 1344     		add	r3, r3, r2
 7764 0bae 03F58773 		add	r3, r3, #270
 7765 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2264:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7766              		.loc 1 2264 0 discriminator 1
 7767 0bb4 032B     		cmp	r3, #3
 7768 0bb6 29D0     		beq	.L474
2266:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7769              		.loc 1 2266 0
 7770 0bb8 964B     		ldr	r3, .L550+8
 7771 0bba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7772 0bbc 1946     		mov	r1, r3
 7773 0bbe 964A     		ldr	r2, .L550+12
 7774 0bc0 0B46     		mov	r3, r1
 7775 0bc2 DB00     		lsls	r3, r3, #3
 7776 0bc4 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 180


 7777 0bc6 1B01     		lsls	r3, r3, #4
 7778 0bc8 1344     		add	r3, r3, r2
 7779 0bca 03F58773 		add	r3, r3, #270
 7780 0bce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2265:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7781              		.loc 1 2265 0
 7782 0bd0 042B     		cmp	r3, #4
 7783 0bd2 1BD0     		beq	.L474
2267:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7784              		.loc 1 2267 0
 7785 0bd4 8F4B     		ldr	r3, .L550+8
 7786 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7787 0bd8 1946     		mov	r1, r3
 7788 0bda 8F4A     		ldr	r2, .L550+12
 7789 0bdc 0B46     		mov	r3, r1
 7790 0bde DB00     		lsls	r3, r3, #3
 7791 0be0 5B1A     		subs	r3, r3, r1
 7792 0be2 1B01     		lsls	r3, r3, #4
 7793 0be4 1344     		add	r3, r3, r2
 7794 0be6 03F58773 		add	r3, r3, #270
 7795 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2266:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7796              		.loc 1 2266 0
 7797 0bec 052B     		cmp	r3, #5
 7798 0bee 0DD0     		beq	.L474
2268:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7799              		.loc 1 2268 0
 7800 0bf0 884B     		ldr	r3, .L550+8
 7801 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7802 0bf4 1946     		mov	r1, r3
 7803 0bf6 884A     		ldr	r2, .L550+12
 7804 0bf8 0B46     		mov	r3, r1
 7805 0bfa DB00     		lsls	r3, r3, #3
 7806 0bfc 5B1A     		subs	r3, r3, r1
 7807 0bfe 1B01     		lsls	r3, r3, #4
 7808 0c00 1344     		add	r3, r3, r2
 7809 0c02 03F58773 		add	r3, r3, #270
 7810 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2267:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7811              		.loc 1 2267 0
 7812 0c08 072B     		cmp	r3, #7
 7813 0c0a 47D1     		bne	.L475
 7814              	.L474:
2269:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7815              		.loc 1 2269 0
 7816 0c0c 814B     		ldr	r3, .L550+8
 7817 0c0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7818 0c10 1946     		mov	r1, r3
 7819 0c12 814A     		ldr	r2, .L550+12
 7820 0c14 0B46     		mov	r3, r1
 7821 0c16 DB00     		lsls	r3, r3, #3
 7822 0c18 5B1A     		subs	r3, r3, r1
 7823 0c1a 1B01     		lsls	r3, r3, #4
 7824 0c1c 1344     		add	r3, r3, r2
 7825 0c1e 03F20F13 		addw	r3, r3, #271
 7826 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7827 0c24 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 181


 7828 0c26 19D1     		bne	.L476
2270:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7829              		.loc 1 2270 0
 7830 0c28 7A4B     		ldr	r3, .L550+8
 7831 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7832 0c2c 1846     		mov	r0, r3
 7833 0c2e 794B     		ldr	r3, .L550+8
 7834 0c30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7835 0c32 1946     		mov	r1, r3
 7836 0c34 794A     		ldr	r2, .L550+16
 7837 0c36 0B46     		mov	r3, r1
 7838 0c38 DB00     		lsls	r3, r3, #3
 7839 0c3a 5B1A     		subs	r3, r3, r1
 7840 0c3c 1B01     		lsls	r3, r3, #4
 7841 0c3e 1344     		add	r3, r3, r2
 7842 0c40 03F58873 		add	r3, r3, #272
 7843 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7844 0c46 1946     		mov	r1, r3
 7845 0c48 754A     		ldr	r2, .L550+20
 7846 0c4a 3423     		movs	r3, #52
 7847 0c4c 03FB01F3 		mul	r3, r3, r1
 7848 0c50 1344     		add	r3, r3, r2
 7849 0c52 1A68     		ldr	r2, [r3]
 7850 0c54 7349     		ldr	r1, .L550+24
 7851 0c56 0301     		lsls	r3, r0, #4
 7852 0c58 0B44     		add	r3, r3, r1
 7853 0c5a 1A60     		str	r2, [r3]
 7854              	.L476:
2271:..\src/interruptions.c ****                         }
2272:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7855              		.loc 1 2272 0
 7856 0c5c 6D4B     		ldr	r3, .L550+8
 7857 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7858 0c60 1846     		mov	r0, r3
 7859 0c62 6C4B     		ldr	r3, .L550+8
 7860 0c64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7861 0c66 1946     		mov	r1, r3
 7862 0c68 6B4A     		ldr	r2, .L550+12
 7863 0c6a 0B46     		mov	r3, r1
 7864 0c6c DB00     		lsls	r3, r3, #3
 7865 0c6e 5B1A     		subs	r3, r3, r1
 7866 0c70 1B01     		lsls	r3, r3, #4
 7867 0c72 1344     		add	r3, r3, r2
 7868 0c74 E033     		adds	r3, r3, #224
 7869 0c76 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7870 0c78 6A4A     		ldr	r2, .L550+24
 7871 0c7a 0301     		lsls	r3, r0, #4
 7872 0c7c 1344     		add	r3, r3, r2
 7873 0c7e 0C33     		adds	r3, r3, #12
 7874 0c80 0A46     		mov	r2, r1
 7875 0c82 1A70     		strb	r2, [r3]
2273:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7876              		.loc 1 2273 0
 7877 0c84 634B     		ldr	r3, .L550+8
 7878 0c86 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7879 0c88 624B     		ldr	r3, .L550+8
 7880 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 182


 7881 0c8c 654A     		ldr	r2, .L550+24
 7882 0c8e 1B01     		lsls	r3, r3, #4
 7883 0c90 1344     		add	r3, r3, r2
 7884 0c92 0C33     		adds	r3, r3, #12
 7885 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7886 0c96 1946     		mov	r1, r3
 7887 0c98 FFF7FEFF 		bl	enable_motor
 7888              	.L475:
2263:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7889              		.loc 1 2263 0 discriminator 2
 7890 0c9c 5D4B     		ldr	r3, .L550+8
 7891 0c9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7892 0ca0 0133     		adds	r3, r3, #1
 7893 0ca2 DAB2     		uxtb	r2, r3
 7894 0ca4 5B4B     		ldr	r3, .L550+8
 7895 0ca6 1A70     		strb	r2, [r3]
 7896              	.L473:
2263:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7897              		.loc 1 2263 0 is_stmt 0 discriminator 1
 7898 0ca8 5A4B     		ldr	r3, .L550+8
 7899 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7900 0cac 012B     		cmp	r3, #1
 7901 0cae 7FF667AF 		bls	.L477
2274:..\src/interruptions.c ****                     }
2275:..\src/interruptions.c ****                 }
2276:..\src/interruptions.c ****                     
2277:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7902              		.loc 1 2277 0 is_stmt 1
 7903 0cb2 0020     		movs	r0, #0
 7904 0cb4 FFF7FEFF 		bl	memStore
2278:..\src/interruptions.c ****                     
2279:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7905              		.loc 1 2279 0
 7906 0cb8 5B4B     		ldr	r3, .L550+28
 7907 0cba 0022     		movs	r2, #0
 7908 0cbc 1A70     		strb	r2, [r3]
2280:..\src/interruptions.c ****             }
2281:..\src/interruptions.c ****             break;
 7909              		.loc 1 2281 0
 7910 0cbe 07E0     		b	.L533
 7911              	.L529:
2282:..\src/interruptions.c ****         default:
2283:..\src/interruptions.c ****             break;
 7912              		.loc 1 2283 0
 7913 0cc0 00BF     		nop
 7914 0cc2 06E0     		b	.L462
 7915              	.L530:
2220:..\src/interruptions.c **** 
 7916              		.loc 1 2220 0
 7917 0cc4 00BF     		nop
 7918 0cc6 04E0     		b	.L462
 7919              	.L531:
2246:..\src/interruptions.c **** 
 7920              		.loc 1 2246 0
 7921 0cc8 00BF     		nop
 7922 0cca 02E0     		b	.L462
 7923              	.L532:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 183


2251:..\src/interruptions.c **** 
 7924              		.loc 1 2251 0
 7925 0ccc 00BF     		nop
 7926 0cce 00E0     		b	.L462
 7927              	.L533:
2281:..\src/interruptions.c ****         default:
 7928              		.loc 1 2281 0
 7929 0cd0 00BF     		nop
 7930              	.L462:
2284:..\src/interruptions.c ****     }
2285:..\src/interruptions.c ****         
2286:..\src/interruptions.c ****     if (interrupt_flag){
 7931              		.loc 1 2286 0
 7932 0cd2 4F4B     		ldr	r3, .L550+4
 7933 0cd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7934 0cd6 002B     		cmp	r3, #0
 7935 0cd8 04D0     		beq	.L478
2287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7936              		.loc 1 2287 0
 7937 0cda 4D4B     		ldr	r3, .L550+4
 7938 0cdc 0022     		movs	r2, #0
 7939 0cde 1A70     		strb	r2, [r3]
2288:..\src/interruptions.c ****         interrupt_manager();
 7940              		.loc 1 2288 0
 7941 0ce0 FFF7FEFF 		bl	interrupt_manager
 7942              	.L478:
2289:..\src/interruptions.c ****     }
2290:..\src/interruptions.c ****     
2291:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 7943              		.loc 1 2291 0
 7944 0ce4 4C4B     		ldr	r3, .L550+12
 7945 0ce6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7946 0cea 062B     		cmp	r3, #6
 7947 0cec 05D0     		beq	.L479
 7948              		.loc 1 2291 0 is_stmt 0 discriminator 1
 7949 0cee 4A4B     		ldr	r3, .L550+12
 7950 0cf0 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7951 0cf4 062B     		cmp	r3, #6
 7952 0cf6 40F0C881 		bne	.L480
 7953              	.L479:
2292:..\src/interruptions.c ****         // Read joystick
2293:..\src/interruptions.c ****         
2294:..\src/interruptions.c ****         switch (joy_UD_status) {
 7954              		.loc 1 2294 0 is_stmt 1
 7955 0cfa 4C4B     		ldr	r3, .L550+32
 7956 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7957 0cfe 052B     		cmp	r3, #5
 7958 0d00 00F2E980 		bhi	.L481
 7959 0d04 01A2     		adr	r2, .L483
 7960 0d06 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7961 0d0a 00BF     		.p2align 2
 7962              	.L483:
 7963 0d0c 250D0000 		.word	.L482+1
 7964 0d10 C30D0000 		.word	.L484+1
 7965 0d14 D70D0000 		.word	.L485+1
 7966 0d18 450E0000 		.word	.L486+1
 7967 0d1c B10E0000 		.word	.L487+1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 184


 7968 0d20 B10E0000 		.word	.L487+1
 7969              		.p2align 1
 7970              	.L482:
2295:..\src/interruptions.c ****             case NORMAL:
2296:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 7971              		.loc 1 2296 0
 7972 0d24 424B     		ldr	r3, .L550+36
 7973 0d26 B3F90430 		ldrsh	r3, [r3, #4]
 7974 0d2a 7B60     		str	r3, [r7, #4]
2297:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2298:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 7975              		.loc 1 2298 0
 7976 0d2c 414B     		ldr	r3, .L550+40
 7977 0d2e 1B68     		ldr	r3, [r3]
 7978 0d30 7A68     		ldr	r2, [r7, #4]
 7979 0d32 D31A     		subs	r3, r2, r3
 7980 0d34 1846     		mov	r0, r3
 7981 0d36 FFF7FEFF 		bl	__aeabi_i2f
 7982 0d3a 0446     		mov	r4, r0
 7983 0d3c 3D4B     		ldr	r3, .L550+40
 7984 0d3e 1B68     		ldr	r3, [r3]
 7985 0d40 1846     		mov	r0, r3
 7986 0d42 FFF7FEFF 		bl	__aeabi_i2f
 7987 0d46 0346     		mov	r3, r0
 7988 0d48 1946     		mov	r1, r3
 7989 0d4a 2046     		mov	r0, r4
 7990 0d4c FFF7FEFF 		bl	__aeabi_fdiv
 7991 0d50 0346     		mov	r3, r0
 7992 0d52 1C46     		mov	r4, r3
 7993 0d54 304B     		ldr	r3, .L550+12
 7994 0d56 B3F8B632 		ldrh	r3, [r3, #694]
 7995 0d5a 1846     		mov	r0, r3
 7996 0d5c FFF7FEFF 		bl	__aeabi_i2f
 7997 0d60 0346     		mov	r3, r0
 7998 0d62 1946     		mov	r1, r3
 7999 0d64 2046     		mov	r0, r4
 8000 0d66 FFF7FEFF 		bl	__aeabi_fmul
 8001 0d6a 0346     		mov	r3, r0
 8002 0d6c 1846     		mov	r0, r3
 8003 0d6e FFF7FEFF 		bl	__aeabi_f2iz
 8004 0d72 0346     		mov	r3, r0
 8005 0d74 7B60     		str	r3, [r7, #4]
2299:..\src/interruptions.c ****                 
2300:..\src/interruptions.c ****                 if (interrupt_flag){
 8006              		.loc 1 2300 0
 8007 0d76 264B     		ldr	r3, .L550+4
 8008 0d78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8009 0d7a 002B     		cmp	r3, #0
 8010 0d7c 04D0     		beq	.L488
2301:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8011              		.loc 1 2301 0
 8012 0d7e 244B     		ldr	r3, .L550+4
 8013 0d80 0022     		movs	r2, #0
 8014 0d82 1A70     		strb	r2, [r3]
2302:..\src/interruptions.c ****                     interrupt_manager();
 8015              		.loc 1 2302 0
 8016 0d84 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 185


 8017              	.L488:
2303:..\src/interruptions.c ****                 }
2304:..\src/interruptions.c **** 
2305:..\src/interruptions.c ****                 //Saturation
2306:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8018              		.loc 1 2306 0
 8019 0d88 7B68     		ldr	r3, [r7, #4]
 8020 0d8a 13F5806F 		cmn	r3, #1024
 8021 0d8e 01DA     		bge	.L489
2307:..\src/interruptions.c ****                     i_aux = -1024;
 8022              		.loc 1 2307 0
 8023 0d90 294B     		ldr	r3, .L550+44
 8024 0d92 7B60     		str	r3, [r7, #4]
 8025              	.L489:
2308:..\src/interruptions.c ****                 if (i_aux > 1024)
 8026              		.loc 1 2308 0
 8027 0d94 7B68     		ldr	r3, [r7, #4]
 8028 0d96 B3F5806F 		cmp	r3, #1024
 8029 0d9a 02DD     		ble	.L490
2309:..\src/interruptions.c ****                     i_aux = 1024;
 8030              		.loc 1 2309 0
 8031 0d9c 4FF48063 		mov	r3, #1024
 8032 0da0 7B60     		str	r3, [r7, #4]
 8033              	.L490:
2310:..\src/interruptions.c **** 
2311:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8034              		.loc 1 2311 0
 8035 0da2 7B68     		ldr	r3, [r7, #4]
 8036 0da4 1BB2     		sxth	r3, r3
 8037 0da6 1A46     		mov	r2, r3
 8038 0da8 244B     		ldr	r3, .L550+48
 8039 0daa 5A62     		str	r2, [r3, #36]
2312:..\src/interruptions.c **** 
2313:..\src/interruptions.c ****                 if (interrupt_flag){
 8040              		.loc 1 2313 0
 8041 0dac 184B     		ldr	r3, .L550+4
 8042 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8043 0db0 002B     		cmp	r3, #0
 8044 0db2 00F08980 		beq	.L534
2314:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8045              		.loc 1 2314 0
 8046 0db6 164B     		ldr	r3, .L550+4
 8047 0db8 0022     		movs	r2, #0
 8048 0dba 1A70     		strb	r2, [r3]
2315:..\src/interruptions.c ****                     interrupt_manager();
 8049              		.loc 1 2315 0
 8050 0dbc FFF7FEFF 		bl	interrupt_manager
2316:..\src/interruptions.c ****                 }
2317:..\src/interruptions.c **** 
2318:..\src/interruptions.c ****             break;
 8051              		.loc 1 2318 0
 8052 0dc0 82E0     		b	.L534
 8053              	.L484:
2319:..\src/interruptions.c **** 
2320:..\src/interruptions.c ****             case RESET: // reset variables
2321:..\src/interruptions.c ****                 UD_counter = 0;
 8054              		.loc 1 2321 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 186


 8055 0dc2 1F4B     		ldr	r3, .L550+52
 8056 0dc4 0022     		movs	r2, #0
 8057 0dc6 1A80     		strh	r2, [r3]	@ movhi
2322:..\src/interruptions.c ****                 UD_mean_value = 0;
 8058              		.loc 1 2322 0
 8059 0dc8 1A4B     		ldr	r3, .L550+40
 8060 0dca 0022     		movs	r2, #0
 8061 0dcc 1A60     		str	r2, [r3]
2323:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8062              		.loc 1 2323 0
 8063 0dce 174B     		ldr	r3, .L550+32
 8064 0dd0 0422     		movs	r2, #4
 8065 0dd2 1A70     		strb	r2, [r3]
2324:..\src/interruptions.c **** 
2325:..\src/interruptions.c ****             break;
 8066              		.loc 1 2325 0
 8067 0dd4 7FE0     		b	.L481
 8068              	.L485:
2326:..\src/interruptions.c **** 
2327:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2328:..\src/interruptions.c ****                 UD_counter++;
 8069              		.loc 1 2328 0
 8070 0dd6 1A4B     		ldr	r3, .L550+52
 8071 0dd8 1B88     		ldrh	r3, [r3]
 8072 0dda 0133     		adds	r3, r3, #1
 8073 0ddc 9AB2     		uxth	r2, r3
 8074 0dde 184B     		ldr	r3, .L550+52
 8075 0de0 1A80     		strh	r2, [r3]	@ movhi
2329:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8076              		.loc 1 2329 0
 8077 0de2 174B     		ldr	r3, .L550+52
 8078 0de4 1B88     		ldrh	r3, [r3]
 8079 0de6 642B     		cmp	r3, #100
 8080 0de8 70D1     		bne	.L535
2330:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8081              		.loc 1 2330 0
 8082 0dea 154B     		ldr	r3, .L550+52
 8083 0dec 0022     		movs	r2, #0
 8084 0dee 1A80     		strh	r2, [r3]	@ movhi
2331:..\src/interruptions.c **** 
2332:..\src/interruptions.c ****                     if (interrupt_flag){
 8085              		.loc 1 2332 0
 8086 0df0 074B     		ldr	r3, .L550+4
 8087 0df2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8088 0df4 002B     		cmp	r3, #0
 8089 0df6 04D0     		beq	.L493
2333:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8090              		.loc 1 2333 0
 8091 0df8 054B     		ldr	r3, .L550+4
 8092 0dfa 0022     		movs	r2, #0
 8093 0dfc 1A70     		strb	r2, [r3]
2334:..\src/interruptions.c ****                         interrupt_manager();
 8094              		.loc 1 2334 0
 8095 0dfe FFF7FEFF 		bl	interrupt_manager
 8096              	.L493:
2335:..\src/interruptions.c ****                     }
2336:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 187


2337:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8097              		.loc 1 2337 0
 8098 0e02 0A4B     		ldr	r3, .L550+32
 8099 0e04 0322     		movs	r2, #3
 8100 0e06 1A70     		strb	r2, [r3]
2338:..\src/interruptions.c ****                 }
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****             break;
 8101              		.loc 1 2340 0
 8102 0e08 60E0     		b	.L535
 8103              	.L551:
 8104 0e0a 00BF     		.align	2
 8105              	.L550:
 8106 0e0c 7A010000 		.word	emg_counter_2.10645
 8107 0e10 00000000 		.word	interrupt_flag
 8108 0e14 72010000 		.word	idx.10653
 8109 0e18 00000000 		.word	c_mem
 8110 0e1c 00000000 		.word	g_mem
 8111 0e20 00000000 		.word	g_meas
 8112 0e24 00000000 		.word	g_ref
 8113 0e28 00000000 		.word	emg_2_status
 8114 0e2c 00000000 		.word	joy_UD_status
 8115 0e30 00000000 		.word	ADC_buf
 8116 0e34 7C010000 		.word	UD_mean_value.10648
 8117 0e38 00FCFFFF 		.word	-1024
 8118 0e3c 00000000 		.word	g_adc_meas
 8119 0e40 80010000 		.word	UD_counter.10646
 8120              	.L486:
2341:..\src/interruptions.c **** 
2342:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2343:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2344:..\src/interruptions.c ****                 UD_counter++;
 8121              		.loc 1 2344 0
 8122 0e44 954B     		ldr	r3, .L552
 8123 0e46 1B88     		ldrh	r3, [r3]
 8124 0e48 0133     		adds	r3, r3, #1
 8125 0e4a 9AB2     		uxth	r2, r3
 8126 0e4c 934B     		ldr	r3, .L552
 8127 0e4e 1A80     		strh	r2, [r3]	@ movhi
2345:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8128              		.loc 1 2345 0
 8129 0e50 934B     		ldr	r3, .L552+4
 8130 0e52 B3F90430 		ldrsh	r3, [r3, #4]
 8131 0e56 1A46     		mov	r2, r3
 8132 0e58 924B     		ldr	r3, .L552+8
 8133 0e5a 1B68     		ldr	r3, [r3]
 8134 0e5c 1344     		add	r3, r3, r2
 8135 0e5e 914A     		ldr	r2, .L552+8
 8136 0e60 1360     		str	r3, [r2]
2346:..\src/interruptions.c **** 
2347:..\src/interruptions.c ****                 if (interrupt_flag){
 8137              		.loc 1 2347 0
 8138 0e62 914B     		ldr	r3, .L552+12
 8139 0e64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8140 0e66 002B     		cmp	r3, #0
 8141 0e68 04D0     		beq	.L494
2348:..\src/interruptions.c ****                     interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 188


 8142              		.loc 1 2348 0
 8143 0e6a 8F4B     		ldr	r3, .L552+12
 8144 0e6c 0022     		movs	r2, #0
 8145 0e6e 1A70     		strb	r2, [r3]
2349:..\src/interruptions.c ****                     interrupt_manager();
 8146              		.loc 1 2349 0
 8147 0e70 FFF7FEFF 		bl	interrupt_manager
 8148              	.L494:
2350:..\src/interruptions.c ****                 }
2351:..\src/interruptions.c **** 
2352:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8149              		.loc 1 2352 0
 8150 0e74 894B     		ldr	r3, .L552
 8151 0e76 1B88     		ldrh	r3, [r3]
 8152 0e78 C82B     		cmp	r3, #200
 8153 0e7a 29D1     		bne	.L536
2353:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8154              		.loc 1 2353 0
 8155 0e7c 894B     		ldr	r3, .L552+8
 8156 0e7e 1B68     		ldr	r3, [r3]
 8157 0e80 8A4A     		ldr	r2, .L552+16
 8158 0e82 82FB0312 		smull	r1, r2, r2, r3
 8159 0e86 9211     		asrs	r2, r2, #6
 8160 0e88 DB17     		asrs	r3, r3, #31
 8161 0e8a D31A     		subs	r3, r2, r3
 8162 0e8c 854A     		ldr	r2, .L552+8
 8163 0e8e 1360     		str	r3, [r2]
2354:..\src/interruptions.c **** 
2355:..\src/interruptions.c ****                     if (interrupt_flag){
 8164              		.loc 1 2355 0
 8165 0e90 854B     		ldr	r3, .L552+12
 8166 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8167 0e94 002B     		cmp	r3, #0
 8168 0e96 04D0     		beq	.L496
2356:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8169              		.loc 1 2356 0
 8170 0e98 834B     		ldr	r3, .L552+12
 8171 0e9a 0022     		movs	r2, #0
 8172 0e9c 1A70     		strb	r2, [r3]
2357:..\src/interruptions.c ****                         interrupt_manager();
 8173              		.loc 1 2357 0
 8174 0e9e FFF7FEFF 		bl	interrupt_manager
 8175              	.L496:
2358:..\src/interruptions.c ****                     }
2359:..\src/interruptions.c **** 
2360:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8176              		.loc 1 2360 0
 8177 0ea2 7E4B     		ldr	r3, .L552
 8178 0ea4 0022     		movs	r2, #0
 8179 0ea6 1A80     		strh	r2, [r3]	@ movhi
2361:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8180              		.loc 1 2361 0
 8181 0ea8 814B     		ldr	r3, .L552+20
 8182 0eaa 0022     		movs	r2, #0
 8183 0eac 1A70     		strb	r2, [r3]
2362:..\src/interruptions.c ****                 }
2363:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 189


 8184              		.loc 1 2363 0
 8185 0eae 0FE0     		b	.L536
 8186              	.L487:
2364:..\src/interruptions.c **** 
2365:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2366:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8187              		.loc 1 2366 0
 8188 0eb0 804B     		ldr	r3, .L552+24
 8189 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8190 0eb4 002B     		cmp	r3, #0
 8191 0eb6 0DD1     		bne	.L537
 8192              		.loc 1 2366 0 is_stmt 0 discriminator 1
 8193 0eb8 7F4B     		ldr	r3, .L552+28
 8194 0eba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8195 0ebc 002B     		cmp	r3, #0
 8196 0ebe 09D1     		bne	.L537
2367:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8197              		.loc 1 2367 0 is_stmt 1
 8198 0ec0 7B4B     		ldr	r3, .L552+20
 8199 0ec2 0222     		movs	r2, #2
 8200 0ec4 1A70     		strb	r2, [r3]
2368:..\src/interruptions.c ****             break;
 8201              		.loc 1 2368 0
 8202 0ec6 05E0     		b	.L537
 8203              	.L534:
2318:..\src/interruptions.c **** 
 8204              		.loc 1 2318 0
 8205 0ec8 00BF     		nop
 8206 0eca 04E0     		b	.L481
 8207              	.L535:
2340:..\src/interruptions.c **** 
 8208              		.loc 1 2340 0
 8209 0ecc 00BF     		nop
 8210 0ece 02E0     		b	.L481
 8211              	.L536:
2363:..\src/interruptions.c **** 
 8212              		.loc 1 2363 0
 8213 0ed0 00BF     		nop
 8214 0ed2 00E0     		b	.L481
 8215              	.L537:
 8216              		.loc 1 2368 0
 8217 0ed4 00BF     		nop
 8218              	.L481:
2369:..\src/interruptions.c ****         }
2370:..\src/interruptions.c **** 
2371:..\src/interruptions.c ****         if (interrupt_flag){
 8219              		.loc 1 2371 0
 8220 0ed6 744B     		ldr	r3, .L552+12
 8221 0ed8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8222 0eda 002B     		cmp	r3, #0
 8223 0edc 04D0     		beq	.L498
2372:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8224              		.loc 1 2372 0
 8225 0ede 724B     		ldr	r3, .L552+12
 8226 0ee0 0022     		movs	r2, #0
 8227 0ee2 1A70     		strb	r2, [r3]
2373:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 190


 8228              		.loc 1 2373 0
 8229 0ee4 FFF7FEFF 		bl	interrupt_manager
 8230              	.L498:
2374:..\src/interruptions.c ****         }
2375:..\src/interruptions.c ****             
2376:..\src/interruptions.c ****         switch (joy_LR_status) {
 8231              		.loc 1 2376 0
 8232 0ee8 744B     		ldr	r3, .L552+32
 8233 0eea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8234 0eec 052B     		cmp	r3, #5
 8235 0eee 00F2C380 		bhi	.L499
 8236 0ef2 01A2     		adr	r2, .L501
 8237 0ef4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8238              		.p2align 2
 8239              	.L501:
 8240 0ef8 110F0000 		.word	.L500+1
 8241 0efc AD0F0000 		.word	.L502+1
 8242 0f00 C10F0000 		.word	.L503+1
 8243 0f04 F50F0000 		.word	.L504+1
 8244 0f08 4F100000 		.word	.L505+1
 8245 0f0c 4F100000 		.word	.L505+1
 8246              		.p2align 1
 8247              	.L500:
2377:..\src/interruptions.c ****             case NORMAL:
2378:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8248              		.loc 1 2378 0
 8249 0f10 634B     		ldr	r3, .L552+4
 8250 0f12 B3F90630 		ldrsh	r3, [r3, #6]
 8251 0f16 7B60     		str	r3, [r7, #4]
2379:..\src/interruptions.c **** 
2380:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8252              		.loc 1 2380 0
 8253 0f18 694B     		ldr	r3, .L552+36
 8254 0f1a 1B68     		ldr	r3, [r3]
 8255 0f1c 7A68     		ldr	r2, [r7, #4]
 8256 0f1e D31A     		subs	r3, r2, r3
 8257 0f20 1846     		mov	r0, r3
 8258 0f22 FFF7FEFF 		bl	__aeabi_i2f
 8259 0f26 0446     		mov	r4, r0
 8260 0f28 654B     		ldr	r3, .L552+36
 8261 0f2a 1B68     		ldr	r3, [r3]
 8262 0f2c 1846     		mov	r0, r3
 8263 0f2e FFF7FEFF 		bl	__aeabi_i2f
 8264 0f32 0346     		mov	r3, r0
 8265 0f34 1946     		mov	r1, r3
 8266 0f36 2046     		mov	r0, r4
 8267 0f38 FFF7FEFF 		bl	__aeabi_fdiv
 8268 0f3c 0346     		mov	r3, r0
 8269 0f3e 1C46     		mov	r4, r3
 8270 0f40 604B     		ldr	r3, .L552+40
 8271 0f42 B3F8B432 		ldrh	r3, [r3, #692]
 8272 0f46 1846     		mov	r0, r3
 8273 0f48 FFF7FEFF 		bl	__aeabi_i2f
 8274 0f4c 0346     		mov	r3, r0
 8275 0f4e 1946     		mov	r1, r3
 8276 0f50 2046     		mov	r0, r4
 8277 0f52 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 191


 8278 0f56 0346     		mov	r3, r0
 8279 0f58 1846     		mov	r0, r3
 8280 0f5a FFF7FEFF 		bl	__aeabi_f2iz
 8281 0f5e 0346     		mov	r3, r0
 8282 0f60 7B60     		str	r3, [r7, #4]
2381:..\src/interruptions.c ****                 
2382:..\src/interruptions.c ****                 if (interrupt_flag){
 8283              		.loc 1 2382 0
 8284 0f62 514B     		ldr	r3, .L552+12
 8285 0f64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8286 0f66 002B     		cmp	r3, #0
 8287 0f68 04D0     		beq	.L506
2383:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8288              		.loc 1 2383 0
 8289 0f6a 4F4B     		ldr	r3, .L552+12
 8290 0f6c 0022     		movs	r2, #0
 8291 0f6e 1A70     		strb	r2, [r3]
2384:..\src/interruptions.c ****                     interrupt_manager();
 8292              		.loc 1 2384 0
 8293 0f70 FFF7FEFF 		bl	interrupt_manager
 8294              	.L506:
2385:..\src/interruptions.c ****                 }
2386:..\src/interruptions.c **** 
2387:..\src/interruptions.c ****                 //Saturation
2388:..\src/interruptions.c ****                 if (i_aux < -1024)
 8295              		.loc 1 2388 0
 8296 0f74 7B68     		ldr	r3, [r7, #4]
 8297 0f76 13F5806F 		cmn	r3, #1024
 8298 0f7a 01DA     		bge	.L507
2389:..\src/interruptions.c ****                     i_aux = -1024;
 8299              		.loc 1 2389 0
 8300 0f7c 524B     		ldr	r3, .L552+44
 8301 0f7e 7B60     		str	r3, [r7, #4]
 8302              	.L507:
2390:..\src/interruptions.c ****                 if (i_aux > 1024)
 8303              		.loc 1 2390 0
 8304 0f80 7B68     		ldr	r3, [r7, #4]
 8305 0f82 B3F5806F 		cmp	r3, #1024
 8306 0f86 02DD     		ble	.L508
2391:..\src/interruptions.c ****                     i_aux = 1024;
 8307              		.loc 1 2391 0
 8308 0f88 4FF48063 		mov	r3, #1024
 8309 0f8c 7B60     		str	r3, [r7, #4]
 8310              	.L508:
2392:..\src/interruptions.c **** 
2393:..\src/interruptions.c ****                 if (interrupt_flag){
 8311              		.loc 1 2393 0
 8312 0f8e 464B     		ldr	r3, .L552+12
 8313 0f90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8314 0f92 002B     		cmp	r3, #0
 8315 0f94 04D0     		beq	.L509
2394:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8316              		.loc 1 2394 0
 8317 0f96 444B     		ldr	r3, .L552+12
 8318 0f98 0022     		movs	r2, #0
 8319 0f9a 1A70     		strb	r2, [r3]
2395:..\src/interruptions.c ****                     interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 192


 8320              		.loc 1 2395 0
 8321 0f9c FFF7FEFF 		bl	interrupt_manager
 8322              	.L509:
2396:..\src/interruptions.c ****                 }
2397:..\src/interruptions.c **** 
2398:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8323              		.loc 1 2398 0
 8324 0fa0 7B68     		ldr	r3, [r7, #4]
 8325 0fa2 1BB2     		sxth	r3, r3
 8326 0fa4 1A46     		mov	r2, r3
 8327 0fa6 494B     		ldr	r3, .L552+48
 8328 0fa8 1A62     		str	r2, [r3, #32]
2399:..\src/interruptions.c **** 
2400:..\src/interruptions.c ****             break;
 8329              		.loc 1 2400 0
 8330 0faa 65E0     		b	.L499
 8331              	.L502:
2401:..\src/interruptions.c **** 
2402:..\src/interruptions.c ****             case RESET: // reset variables
2403:..\src/interruptions.c ****                 LR_counter = 0;
 8332              		.loc 1 2403 0
 8333 0fac 484B     		ldr	r3, .L552+52
 8334 0fae 0022     		movs	r2, #0
 8335 0fb0 1A80     		strh	r2, [r3]	@ movhi
2404:..\src/interruptions.c ****                 LR_mean_value = 0;
 8336              		.loc 1 2404 0
 8337 0fb2 434B     		ldr	r3, .L552+36
 8338 0fb4 0022     		movs	r2, #0
 8339 0fb6 1A60     		str	r2, [r3]
2405:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8340              		.loc 1 2405 0
 8341 0fb8 404B     		ldr	r3, .L552+32
 8342 0fba 0422     		movs	r2, #4
 8343 0fbc 1A70     		strb	r2, [r3]
2406:..\src/interruptions.c ****             break;
 8344              		.loc 1 2406 0
 8345 0fbe 5BE0     		b	.L499
 8346              	.L503:
2407:..\src/interruptions.c **** 
2408:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2409:..\src/interruptions.c ****                 LR_counter++;
 8347              		.loc 1 2409 0
 8348 0fc0 434B     		ldr	r3, .L552+52
 8349 0fc2 1B88     		ldrh	r3, [r3]
 8350 0fc4 0133     		adds	r3, r3, #1
 8351 0fc6 9AB2     		uxth	r2, r3
 8352 0fc8 414B     		ldr	r3, .L552+52
 8353 0fca 1A80     		strh	r2, [r3]	@ movhi
2410:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8354              		.loc 1 2410 0
 8355 0fcc 404B     		ldr	r3, .L552+52
 8356 0fce 1B88     		ldrh	r3, [r3]
 8357 0fd0 642B     		cmp	r3, #100
 8358 0fd2 4CD1     		bne	.L538
2411:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8359              		.loc 1 2411 0
 8360 0fd4 3E4B     		ldr	r3, .L552+52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 193


 8361 0fd6 0022     		movs	r2, #0
 8362 0fd8 1A80     		strh	r2, [r3]	@ movhi
2412:..\src/interruptions.c **** 
2413:..\src/interruptions.c ****                     if (interrupt_flag){
 8363              		.loc 1 2413 0
 8364 0fda 334B     		ldr	r3, .L552+12
 8365 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8366 0fde 002B     		cmp	r3, #0
 8367 0fe0 04D0     		beq	.L511
2414:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8368              		.loc 1 2414 0
 8369 0fe2 314B     		ldr	r3, .L552+12
 8370 0fe4 0022     		movs	r2, #0
 8371 0fe6 1A70     		strb	r2, [r3]
2415:..\src/interruptions.c ****                         interrupt_manager();
 8372              		.loc 1 2415 0
 8373 0fe8 FFF7FEFF 		bl	interrupt_manager
 8374              	.L511:
2416:..\src/interruptions.c ****                     }
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8375              		.loc 1 2418 0
 8376 0fec 334B     		ldr	r3, .L552+32
 8377 0fee 0322     		movs	r2, #3
 8378 0ff0 1A70     		strb	r2, [r3]
2419:..\src/interruptions.c ****                 }
2420:..\src/interruptions.c ****             break;
 8379              		.loc 1 2420 0
 8380 0ff2 3CE0     		b	.L538
 8381              	.L504:
2421:..\src/interruptions.c **** 
2422:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2423:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2424:..\src/interruptions.c ****                 LR_counter++;
 8382              		.loc 1 2424 0
 8383 0ff4 364B     		ldr	r3, .L552+52
 8384 0ff6 1B88     		ldrh	r3, [r3]
 8385 0ff8 0133     		adds	r3, r3, #1
 8386 0ffa 9AB2     		uxth	r2, r3
 8387 0ffc 344B     		ldr	r3, .L552+52
 8388 0ffe 1A80     		strh	r2, [r3]	@ movhi
2425:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8389              		.loc 1 2425 0
 8390 1000 274B     		ldr	r3, .L552+4
 8391 1002 B3F90630 		ldrsh	r3, [r3, #6]
 8392 1006 1A46     		mov	r2, r3
 8393 1008 2D4B     		ldr	r3, .L552+36
 8394 100a 1B68     		ldr	r3, [r3]
 8395 100c 1344     		add	r3, r3, r2
 8396 100e 2C4A     		ldr	r2, .L552+36
 8397 1010 1360     		str	r3, [r2]
2426:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8398              		.loc 1 2426 0
 8399 1012 2F4B     		ldr	r3, .L552+52
 8400 1014 1B88     		ldrh	r3, [r3]
 8401 1016 C82B     		cmp	r3, #200
 8402 1018 2BD1     		bne	.L539
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 194


2427:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8403              		.loc 1 2427 0
 8404 101a 294B     		ldr	r3, .L552+36
 8405 101c 1B68     		ldr	r3, [r3]
 8406 101e 234A     		ldr	r2, .L552+16
 8407 1020 82FB0312 		smull	r1, r2, r2, r3
 8408 1024 9211     		asrs	r2, r2, #6
 8409 1026 DB17     		asrs	r3, r3, #31
 8410 1028 D31A     		subs	r3, r2, r3
 8411 102a 254A     		ldr	r2, .L552+36
 8412 102c 1360     		str	r3, [r2]
2428:..\src/interruptions.c ****                     
2429:..\src/interruptions.c ****                     if (interrupt_flag){
 8413              		.loc 1 2429 0
 8414 102e 1E4B     		ldr	r3, .L552+12
 8415 1030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8416 1032 002B     		cmp	r3, #0
 8417 1034 04D0     		beq	.L513
2430:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8418              		.loc 1 2430 0
 8419 1036 1C4B     		ldr	r3, .L552+12
 8420 1038 0022     		movs	r2, #0
 8421 103a 1A70     		strb	r2, [r3]
2431:..\src/interruptions.c ****                         interrupt_manager();
 8422              		.loc 1 2431 0
 8423 103c FFF7FEFF 		bl	interrupt_manager
 8424              	.L513:
2432:..\src/interruptions.c ****                     }
2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8425              		.loc 1 2434 0
 8426 1040 234B     		ldr	r3, .L552+52
 8427 1042 0022     		movs	r2, #0
 8428 1044 1A80     		strh	r2, [r3]	@ movhi
2435:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8429              		.loc 1 2435 0
 8430 1046 1D4B     		ldr	r3, .L552+32
 8431 1048 0022     		movs	r2, #0
 8432 104a 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****                 }
2437:..\src/interruptions.c ****             break;
 8433              		.loc 1 2437 0
 8434 104c 11E0     		b	.L539
 8435              	.L505:
2438:..\src/interruptions.c **** 
2439:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2440:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8436              		.loc 1 2440 0
 8437 104e 194B     		ldr	r3, .L552+24
 8438 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8439 1052 002B     		cmp	r3, #0
 8440 1054 0FD1     		bne	.L540
 8441              		.loc 1 2440 0 is_stmt 0 discriminator 1
 8442 1056 184B     		ldr	r3, .L552+28
 8443 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8444 105a 002B     		cmp	r3, #0
 8445 105c 0BD1     		bne	.L540
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 195


 8446              		.loc 1 2440 0 discriminator 2
 8447 105e 144B     		ldr	r3, .L552+20
 8448 1060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8449 1062 002B     		cmp	r3, #0
 8450 1064 07D1     		bne	.L540
2441:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8451              		.loc 1 2441 0 is_stmt 1
 8452 1066 154B     		ldr	r3, .L552+32
 8453 1068 0222     		movs	r2, #2
 8454 106a 1A70     		strb	r2, [r3]
2442:..\src/interruptions.c ****             break;
 8455              		.loc 1 2442 0
 8456 106c 03E0     		b	.L540
 8457              	.L538:
2420:..\src/interruptions.c **** 
 8458              		.loc 1 2420 0
 8459 106e 00BF     		nop
 8460 1070 02E0     		b	.L499
 8461              	.L539:
2437:..\src/interruptions.c **** 
 8462              		.loc 1 2437 0
 8463 1072 00BF     		nop
 8464 1074 00E0     		b	.L499
 8465              	.L540:
 8466              		.loc 1 2442 0
 8467 1076 00BF     		nop
 8468              	.L499:
2443:..\src/interruptions.c ****         }
2444:..\src/interruptions.c ****        
2445:..\src/interruptions.c ****         if (interrupt_flag){
 8469              		.loc 1 2445 0
 8470 1078 0B4B     		ldr	r3, .L552+12
 8471 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8472 107c 002B     		cmp	r3, #0
 8473 107e 04D0     		beq	.L480
2446:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8474              		.loc 1 2446 0
 8475 1080 094B     		ldr	r3, .L552+12
 8476 1082 0022     		movs	r2, #0
 8477 1084 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****             interrupt_manager();
 8478              		.loc 1 2447 0
 8479 1086 FFF7FEFF 		bl	interrupt_manager
 8480              	.L480:
2448:..\src/interruptions.c ****         }
2449:..\src/interruptions.c ****     }
2450:..\src/interruptions.c ****     
2451:..\src/interruptions.c ****     // Read also EMG additional sensors port
2452:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8481              		.loc 1 2452 0
 8482 108a 124B     		ldr	r3, .L552+56
 8483 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8484 108e 062B     		cmp	r3, #6
 8485 1090 73D9     		bls	.L541
2453:..\src/interruptions.c ****         
2454:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8486              		.loc 1 2454 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 196


 8487 1092 114B     		ldr	r3, .L552+60
 8488 1094 0022     		movs	r2, #0
 8489 1096 1A70     		strb	r2, [r3]
 8490 1098 6BE0     		b	.L516
 8491              	.L553:
 8492 109a 00BF     		.align	2
 8493              	.L552:
 8494 109c 80010000 		.word	UD_counter.10646
 8495 10a0 00000000 		.word	ADC_buf
 8496 10a4 7C010000 		.word	UD_mean_value.10648
 8497 10a8 00000000 		.word	interrupt_flag
 8498 10ac 1F85EB51 		.word	1374389535
 8499 10b0 00000000 		.word	joy_UD_status
 8500 10b4 00000000 		.word	emg_1_status
 8501 10b8 00000000 		.word	emg_2_status
 8502 10bc 00000000 		.word	joy_LR_status
 8503 10c0 84010000 		.word	LR_mean_value.10649
 8504 10c4 00000000 		.word	c_mem
 8505 10c8 00FCFFFF 		.word	-1024
 8506 10cc 00000000 		.word	g_adc_meas
 8507 10d0 88010000 		.word	LR_counter.10647
 8508 10d4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8509 10d8 72010000 		.word	idx.10653
 8510              	.L523:
2455:..\src/interruptions.c ****             
2456:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8511              		.loc 1 2456 0
 8512 10dc 294B     		ldr	r3, .L554
 8513 10de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8514 10e0 0633     		adds	r3, r3, #6
 8515 10e2 294A     		ldr	r2, .L554+4
 8516 10e4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8517 10e8 7B60     		str	r3, [r7, #4]
2457:..\src/interruptions.c ****             if (i_aux < 0) 
 8518              		.loc 1 2457 0
 8519 10ea 7B68     		ldr	r3, [r7, #4]
 8520 10ec 002B     		cmp	r3, #0
 8521 10ee 01DA     		bge	.L517
2458:..\src/interruptions.c ****                 i_aux = 0;
 8522              		.loc 1 2458 0
 8523 10f0 0023     		movs	r3, #0
 8524 10f2 7B60     		str	r3, [r7, #4]
 8525              	.L517:
2459:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8526              		.loc 1 2459 0
 8527 10f4 234B     		ldr	r3, .L554
 8528 10f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8529 10f8 0233     		adds	r3, r3, #2
 8530 10fa DB00     		lsls	r3, r3, #3
 8531 10fc 234A     		ldr	r2, .L554+8
 8532 10fe 1344     		add	r3, r3, r2
 8533 1100 1946     		mov	r1, r3
 8534 1102 7868     		ldr	r0, [r7, #4]
 8535 1104 FFF7FEFF 		bl	filter
 8536 1108 7860     		str	r0, [r7, #4]
2460:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8537              		.loc 1 2460 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 197


 8538 110a 7B68     		ldr	r3, [r7, #4]
 8539 110c 9B02     		lsls	r3, r3, #10
 8540 110e 002B     		cmp	r3, #0
 8541 1110 01DA     		bge	.L518
 8542 1112 03F2FF33 		addw	r3, r3, #1023
 8543              	.L518:
 8544 1116 9B12     		asrs	r3, r3, #10
 8545 1118 7B60     		str	r3, [r7, #4]
2461:..\src/interruptions.c **** 
2462:..\src/interruptions.c ****             if (interrupt_flag){
 8546              		.loc 1 2462 0
 8547 111a 1D4B     		ldr	r3, .L554+12
 8548 111c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8549 111e 002B     		cmp	r3, #0
 8550 1120 04D0     		beq	.L519
2463:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8551              		.loc 1 2463 0
 8552 1122 1B4B     		ldr	r3, .L554+12
 8553 1124 0022     		movs	r2, #0
 8554 1126 1A70     		strb	r2, [r3]
2464:..\src/interruptions.c ****                 interrupt_manager();
 8555              		.loc 1 2464 0
 8556 1128 FFF7FEFF 		bl	interrupt_manager
 8557              	.L519:
2465:..\src/interruptions.c ****             }
2466:..\src/interruptions.c ****             //Saturation
2467:..\src/interruptions.c ****             if (i_aux < 0)
 8558              		.loc 1 2467 0
 8559 112c 7B68     		ldr	r3, [r7, #4]
 8560 112e 002B     		cmp	r3, #0
 8561 1130 02DA     		bge	.L520
2468:..\src/interruptions.c ****                 i_aux = 0;
 8562              		.loc 1 2468 0
 8563 1132 0023     		movs	r3, #0
 8564 1134 7B60     		str	r3, [r7, #4]
 8565 1136 06E0     		b	.L521
 8566              	.L520:
2469:..\src/interruptions.c ****             else 
2470:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8567              		.loc 1 2470 0
 8568 1138 7B68     		ldr	r3, [r7, #4]
 8569 113a B3F5806F 		cmp	r3, #1024
 8570 113e 02DD     		ble	.L521
2471:..\src/interruptions.c ****                     i_aux = 1024;
 8571              		.loc 1 2471 0
 8572 1140 4FF48063 		mov	r3, #1024
 8573 1144 7B60     		str	r3, [r7, #4]
 8574              	.L521:
2472:..\src/interruptions.c ****             
2473:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8575              		.loc 1 2473 0
 8576 1146 0F4B     		ldr	r3, .L554
 8577 1148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8578 114a 1249     		ldr	r1, .L554+16
 8579 114c 0233     		adds	r3, r3, #2
 8580 114e 7A68     		ldr	r2, [r7, #4]
 8581 1150 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 198


2474:..\src/interruptions.c **** 
2475:..\src/interruptions.c ****             if (interrupt_flag){
 8582              		.loc 1 2475 0
 8583 1154 0E4B     		ldr	r3, .L554+12
 8584 1156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8585 1158 002B     		cmp	r3, #0
 8586 115a 04D0     		beq	.L522
2476:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8587              		.loc 1 2476 0
 8588 115c 0C4B     		ldr	r3, .L554+12
 8589 115e 0022     		movs	r2, #0
 8590 1160 1A70     		strb	r2, [r3]
2477:..\src/interruptions.c ****                 interrupt_manager();
 8591              		.loc 1 2477 0
 8592 1162 FFF7FEFF 		bl	interrupt_manager
 8593              	.L522:
2454:..\src/interruptions.c ****             
 8594              		.loc 1 2454 0 discriminator 2
 8595 1166 074B     		ldr	r3, .L554
 8596 1168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8597 116a 0133     		adds	r3, r3, #1
 8598 116c DAB2     		uxtb	r2, r3
 8599 116e 054B     		ldr	r3, .L554
 8600 1170 1A70     		strb	r2, [r3]
 8601              	.L516:
2454:..\src/interruptions.c ****             
 8602              		.loc 1 2454 0 is_stmt 0 discriminator 1
 8603 1172 044B     		ldr	r3, .L554
 8604 1174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8605 1176 052B     		cmp	r3, #5
 8606 1178 B0D9     		bls	.L523
 8607              	.L541:
2478:..\src/interruptions.c ****             }
2479:..\src/interruptions.c ****         }
2480:..\src/interruptions.c ****     }
2481:..\src/interruptions.c ****     
2482:..\src/interruptions.c **** }
 8608              		.loc 1 2482 0 is_stmt 1
 8609 117a 00BF     		nop
 8610 117c 0C37     		adds	r7, r7, #12
 8611              		.cfi_def_cfa_offset 20
 8612 117e BD46     		mov	sp, r7
 8613              		.cfi_def_cfa_register 13
 8614              		@ sp needed
 8615 1180 F0BD     		pop	{r4, r5, r6, r7, pc}
 8616              	.L555:
 8617 1182 00BF     		.align	2
 8618              	.L554:
 8619 1184 72010000 		.word	idx.10653
 8620 1188 00000000 		.word	ADC_buf
 8621 118c 00000000 		.word	filt_emg
 8622 1190 00000000 		.word	interrupt_flag
 8623 1194 00000000 		.word	g_adc_meas
 8624              		.cfi_endproc
 8625              	.LFE74:
 8626              		.size	analog_read_end, .-analog_read_end
 8627              		.section	.text.overcurrent_control,"ax",%progbits
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 199


 8628              		.align	2
 8629              		.global	overcurrent_control
 8630              		.thumb
 8631              		.thumb_func
 8632              		.type	overcurrent_control, %function
 8633              	overcurrent_control:
 8634              	.LFB75:
2483:..\src/interruptions.c **** 
2484:..\src/interruptions.c **** //==============================================================================
2485:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2486:..\src/interruptions.c **** //==============================================================================
2487:..\src/interruptions.c **** 
2488:..\src/interruptions.c **** void overcurrent_control() {
 8635              		.loc 1 2488 0
 8636              		.cfi_startproc
 8637              		@ args = 0, pretend = 0, frame = 8
 8638              		@ frame_needed = 1, uses_anonymous_args = 0
 8639              		@ link register save eliminated.
 8640 0000 80B4     		push	{r7}
 8641              		.cfi_def_cfa_offset 4
 8642              		.cfi_offset 7, -4
 8643 0002 83B0     		sub	sp, sp, #12
 8644              		.cfi_def_cfa_offset 16
 8645 0004 00AF     		add	r7, sp, #0
 8646              		.cfi_def_cfa_register 7
 8647              	.LBB11:
2489:..\src/interruptions.c ****     
2490:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8648              		.loc 1 2490 0
 8649 0006 0023     		movs	r3, #0
 8650 0008 FB71     		strb	r3, [r7, #7]
 8651 000a 64E0     		b	.L557
 8652              	.L562:
2491:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8653              		.loc 1 2491 0
 8654 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8655 000e 3649     		ldr	r1, .L564
 8656 0010 1346     		mov	r3, r2
 8657 0012 DB00     		lsls	r3, r3, #3
 8658 0014 9B1A     		subs	r3, r3, r2
 8659 0016 1B01     		lsls	r3, r3, #4
 8660 0018 0B44     		add	r3, r3, r1
 8661 001a 03F58673 		add	r3, r3, #268
 8662 001e B3F90030 		ldrsh	r3, [r3]
 8663 0022 002B     		cmp	r3, #0
 8664 0024 54D0     		beq	.L558
 8665              	.LBB12:
2492:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8666              		.loc 1 2492 0
 8667 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8668 0028 3049     		ldr	r1, .L564+4
 8669 002a 1346     		mov	r3, r2
 8670 002c DB00     		lsls	r3, r3, #3
 8671 002e 9B1A     		subs	r3, r3, r2
 8672 0030 1B01     		lsls	r3, r3, #4
 8673 0032 0B44     		add	r3, r3, r1
 8674 0034 03F58873 		add	r3, r3, #272
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 200


 8675 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8676 003a 1946     		mov	r1, r3
 8677 003c 2C4A     		ldr	r2, .L564+8
 8678 003e 3423     		movs	r3, #52
 8679 0040 03FB01F3 		mul	r3, r3, r1
 8680 0044 1344     		add	r3, r3, r2
 8681 0046 0C33     		adds	r3, r3, #12
 8682 0048 1B68     		ldr	r3, [r3]
 8683 004a 3B60     		str	r3, [r7]
2493:..\src/interruptions.c ****             // check if the current is over the limit
2494:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2495:..\src/interruptions.c ****                 if (curr < 0){
 8684              		.loc 1 2495 0
 8685 004c 3B68     		ldr	r3, [r7]
 8686 004e 002B     		cmp	r3, #0
 8687 0050 02DA     		bge	.L559
2496:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8688              		.loc 1 2496 0
 8689 0052 3B68     		ldr	r3, [r7]
 8690 0054 5B42     		negs	r3, r3
 8691 0056 3B60     		str	r3, [r7]
 8692              	.L559:
2497:..\src/interruptions.c ****                 }
2498:..\src/interruptions.c ****          //   }
2499:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8693              		.loc 1 2499 0
 8694 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8695 005a 2349     		ldr	r1, .L564
 8696 005c 1346     		mov	r3, r2
 8697 005e DB00     		lsls	r3, r3, #3
 8698 0060 9B1A     		subs	r3, r3, r2
 8699 0062 1B01     		lsls	r3, r3, #4
 8700 0064 0B44     		add	r3, r3, r1
 8701 0066 03F58673 		add	r3, r3, #268
 8702 006a B3F90030 		ldrsh	r3, [r3]
 8703 006e 1A46     		mov	r2, r3
 8704 0070 3B68     		ldr	r3, [r7]
 8705 0072 9A42     		cmp	r2, r3
 8706 0074 07DA     		bge	.L560
2500:..\src/interruptions.c ****                 //decrease pwm_limit
2501:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8707              		.loc 1 2501 0
 8708 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8709 0078 1E4A     		ldr	r2, .L564+12
 8710 007a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8711 007c 013A     		subs	r2, r2, #1
 8712 007e D1B2     		uxtb	r1, r2
 8713 0080 1C4A     		ldr	r2, .L564+12
 8714 0082 D154     		strb	r1, [r2, r3]
 8715 0084 16E0     		b	.L563
 8716              	.L560:
2502:..\src/interruptions.c ****             // check if the current is in the safe zone
2503:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8717              		.loc 1 2503 0
 8718 0086 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8719 0088 1749     		ldr	r1, .L564
 8720 008a 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 201


 8721 008c DB00     		lsls	r3, r3, #3
 8722 008e 9B1A     		subs	r3, r3, r2
 8723 0090 1B01     		lsls	r3, r3, #4
 8724 0092 0B44     		add	r3, r3, r1
 8725 0094 03F58673 		add	r3, r3, #268
 8726 0098 B3F90030 		ldrsh	r3, [r3]
 8727 009c A3F10A02 		sub	r2, r3, #10
 8728 00a0 3B68     		ldr	r3, [r7]
 8729 00a2 9A42     		cmp	r2, r3
 8730 00a4 06DD     		ble	.L563
2504:..\src/interruptions.c ****                 //increase pwm_limit
2505:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8731              		.loc 1 2505 0
 8732 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8733 00a8 124A     		ldr	r2, .L564+12
 8734 00aa D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8735 00ac 0132     		adds	r2, r2, #1
 8736 00ae D1B2     		uxtb	r1, r2
 8737 00b0 104A     		ldr	r2, .L564+12
 8738 00b2 D154     		strb	r1, [r2, r3]
 8739              	.L563:
2506:..\src/interruptions.c ****             }
2507:..\src/interruptions.c **** 
2508:..\src/interruptions.c ****             // Bound pwm_limit
2509:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2510:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2511:..\src/interruptions.c ****             else 
2512:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8740              		.loc 1 2512 0
 8741 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8742 00b6 0F4A     		ldr	r2, .L564+12
 8743 00b8 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8744 00ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8745 00bc 0E49     		ldr	r1, .L564+16
 8746 00be CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8747 00c0 9A42     		cmp	r2, r3
 8748 00c2 05D9     		bls	.L558
2513:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8749              		.loc 1 2513 0
 8750 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8751 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8752 00c8 0B49     		ldr	r1, .L564+16
 8753 00ca 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8754 00cc 094A     		ldr	r2, .L564+12
 8755 00ce D154     		strb	r1, [r2, r3]
 8756              	.L558:
 8757              	.LBE12:
2490:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8758              		.loc 1 2490 0 discriminator 2
 8759 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8760 00d2 0133     		adds	r3, r3, #1
 8761 00d4 FB71     		strb	r3, [r7, #7]
 8762              	.L557:
2490:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8763              		.loc 1 2490 0 is_stmt 0 discriminator 1
 8764 00d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8765 00d8 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 202


 8766 00da 97D9     		bls	.L562
 8767              	.LBE11:
2514:..\src/interruptions.c ****         }
2515:..\src/interruptions.c ****     }
2516:..\src/interruptions.c **** }
 8768              		.loc 1 2516 0 is_stmt 1
 8769 00dc 00BF     		nop
 8770 00de 0C37     		adds	r7, r7, #12
 8771              		.cfi_def_cfa_offset 4
 8772 00e0 BD46     		mov	sp, r7
 8773              		.cfi_def_cfa_register 13
 8774              		@ sp needed
 8775 00e2 80BC     		pop	{r7}
 8776              		.cfi_restore 7
 8777              		.cfi_def_cfa_offset 0
 8778 00e4 7047     		bx	lr
 8779              	.L565:
 8780 00e6 00BF     		.align	2
 8781              	.L564:
 8782 00e8 00000000 		.word	c_mem
 8783 00ec 00000000 		.word	g_mem
 8784 00f0 00000000 		.word	g_meas
 8785 00f4 00000000 		.word	dev_pwm_limit
 8786 00f8 00000000 		.word	dev_pwm_sat
 8787              		.cfi_endproc
 8788              	.LFE75:
 8789              		.size	overcurrent_control, .-overcurrent_control
 8790              		.section	.text.pwm_limit_search,"ax",%progbits
 8791              		.align	2
 8792              		.global	pwm_limit_search
 8793              		.thumb
 8794              		.thumb_func
 8795              		.type	pwm_limit_search, %function
 8796              	pwm_limit_search:
 8797              	.LFB76:
2517:..\src/interruptions.c **** 
2518:..\src/interruptions.c **** //==============================================================================
2519:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2520:..\src/interruptions.c **** //==============================================================================
2521:..\src/interruptions.c **** 
2522:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8798              		.loc 1 2522 0
 8799              		.cfi_startproc
 8800              		@ args = 0, pretend = 0, frame = 16
 8801              		@ frame_needed = 1, uses_anonymous_args = 0
 8802              		@ link register save eliminated.
 8803 0000 80B4     		push	{r7}
 8804              		.cfi_def_cfa_offset 4
 8805              		.cfi_offset 7, -4
 8806 0002 85B0     		sub	sp, sp, #20
 8807              		.cfi_def_cfa_offset 24
 8808 0004 00AF     		add	r7, sp, #0
 8809              		.cfi_def_cfa_register 7
 8810 0006 0346     		mov	r3, r0
 8811 0008 FB71     		strb	r3, [r7, #7]
2523:..\src/interruptions.c **** 
2524:..\src/interruptions.c ****     uint8 CYDATA index;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 203


2525:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 8812              		.loc 1 2525 0
 8813 000a 46F29C33 		movw	r3, #25500
 8814 000e FB81     		strh	r3, [r7, #14]	@ movhi
2526:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8815              		.loc 1 2526 0
 8816 0010 42F6EC43 		movw	r3, #11500
 8817 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2527:..\src/interruptions.c ****     
2528:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8818              		.loc 1 2528 0
 8819 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8820 0018 144A     		ldr	r2, .L571
 8821 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8822 001e FB89     		ldrh	r3, [r7, #14]
 8823 0020 9A42     		cmp	r2, r3
 8824 0022 04DD     		ble	.L567
2529:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8825              		.loc 1 2529 0
 8826 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8827 0026 124A     		ldr	r2, .L571+4
 8828 0028 0021     		movs	r1, #0
 8829 002a D154     		strb	r1, [r2, r3]
2530:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2531:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2532:..\src/interruptions.c ****     } else {
2533:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2534:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2535:..\src/interruptions.c ****     }
2536:..\src/interruptions.c **** }
 8830              		.loc 1 2536 0
 8831 002c 19E0     		b	.L570
 8832              	.L567:
2530:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8833              		.loc 1 2530 0
 8834 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8835 0030 0E4A     		ldr	r2, .L571
 8836 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8837 0036 BB89     		ldrh	r3, [r7, #12]
 8838 0038 9A42     		cmp	r2, r3
 8839 003a 04DA     		bge	.L569
2531:..\src/interruptions.c ****     } else {
 8840              		.loc 1 2531 0
 8841 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8842 003e 0C4A     		ldr	r2, .L571+4
 8843 0040 6421     		movs	r1, #100
 8844 0042 D154     		strb	r1, [r2, r3]
 8845              		.loc 1 2536 0
 8846 0044 0DE0     		b	.L570
 8847              	.L569:
2533:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8848              		.loc 1 2533 0
 8849 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8850 0048 084A     		ldr	r2, .L571
 8851 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8852 004e BB89     		ldrh	r3, [r7, #12]
 8853 0050 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 204


 8854 0052 5B12     		asrs	r3, r3, #9
 8855 0054 FB72     		strb	r3, [r7, #11]
2534:..\src/interruptions.c ****     }
 8856              		.loc 1 2534 0
 8857 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8858 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8859 005a 0649     		ldr	r1, .L571+8
 8860 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8861 005e 044A     		ldr	r2, .L571+4
 8862 0060 D154     		strb	r1, [r2, r3]
 8863              	.L570:
 8864              		.loc 1 2536 0
 8865 0062 00BF     		nop
 8866 0064 1437     		adds	r7, r7, #20
 8867              		.cfi_def_cfa_offset 4
 8868 0066 BD46     		mov	sp, r7
 8869              		.cfi_def_cfa_register 13
 8870              		@ sp needed
 8871 0068 80BC     		pop	{r7}
 8872              		.cfi_restore 7
 8873              		.cfi_def_cfa_offset 0
 8874 006a 7047     		bx	lr
 8875              	.L572:
 8876              		.align	2
 8877              	.L571:
 8878 006c 00000000 		.word	dev_tension
 8879 0070 00000000 		.word	dev_pwm_sat
 8880 0074 00000000 		.word	pwm_preload_values
 8881              		.cfi_endproc
 8882              	.LFE76:
 8883              		.size	pwm_limit_search, .-pwm_limit_search
 8884              		.section	.text.cycles_counter_update,"ax",%progbits
 8885              		.align	2
 8886              		.global	cycles_counter_update
 8887              		.thumb
 8888              		.thumb_func
 8889              		.type	cycles_counter_update, %function
 8890              	cycles_counter_update:
 8891              	.LFB77:
2537:..\src/interruptions.c **** 
2538:..\src/interruptions.c **** //==============================================================================
2539:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2540:..\src/interruptions.c **** //==============================================================================
2541:..\src/interruptions.c **** 
2542:..\src/interruptions.c **** void cycles_counter_update() {
 8892              		.loc 1 2542 0
 8893              		.cfi_startproc
 8894              		@ args = 0, pretend = 0, frame = 24
 8895              		@ frame_needed = 1, uses_anonymous_args = 0
 8896 0000 80B5     		push	{r7, lr}
 8897              		.cfi_def_cfa_offset 8
 8898              		.cfi_offset 7, -8
 8899              		.cfi_offset 14, -4
 8900 0002 86B0     		sub	sp, sp, #24
 8901              		.cfi_def_cfa_offset 32
 8902 0004 00AF     		add	r7, sp, #0
 8903              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 205


2543:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2544:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2545:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2546:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2547:..\src/interruptions.c ****     static int32 thr_pos = 0;
2548:..\src/interruptions.c ****     static int32 max_pos = 0;
2549:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2550:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 8904              		.loc 1 2550 0
 8905 0006 0023     		movs	r3, #0
 8906 0008 FB60     		str	r3, [r7, #12]
 8907 000a 0023     		movs	r3, #0
 8908 000c BB60     		str	r3, [r7, #8]
 8909 000e 0023     		movs	r3, #0
 8910 0010 3B61     		str	r3, [r7, #16]
2551:..\src/interruptions.c ****     int32 step;
2552:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2553:..\src/interruptions.c **** 
2554:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8911              		.loc 1 2554 0
 8912 0012 A34B     		ldr	r3, .L621
 8913 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8914 0018 1946     		mov	r1, r3
 8915 001a A24A     		ldr	r2, .L621+4
 8916 001c 3423     		movs	r3, #52
 8917 001e 03FB01F3 		mul	r3, r3, r1
 8918 0022 1344     		add	r3, r3, r2
 8919 0024 1A68     		ldr	r2, [r3]
 8920 0026 9E4B     		ldr	r3, .L621
 8921 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8922 002c 1846     		mov	r0, r3
 8923 002e 9C49     		ldr	r1, .L621
 8924 0030 0346     		mov	r3, r0
 8925 0032 5B00     		lsls	r3, r3, #1
 8926 0034 0344     		add	r3, r3, r0
 8927 0036 1B01     		lsls	r3, r3, #4
 8928 0038 0B44     		add	r3, r3, r1
 8929 003a 03F29513 		addw	r3, r3, #405
 8930 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8931 0040 42FA03F3 		asr	r3, r2, r3
 8932 0044 FB60     		str	r3, [r7, #12]
2555:..\src/interruptions.c ****         
2556:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2557:..\src/interruptions.c ****     switch (pos_cycle_status){
 8933              		.loc 1 2557 0
 8934 0046 984B     		ldr	r3, .L621+8
 8935 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8936 004a 012B     		cmp	r3, #1
 8937 004c 3AD0     		beq	.L575
 8938 004e 022B     		cmp	r3, #2
 8939 0050 6ED0     		beq	.L576
 8940 0052 002B     		cmp	r3, #0
 8941 0054 40F02181 		bne	.L574
2558:..\src/interruptions.c ****         case STATE_INACTIVE:
2559:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 8942              		.loc 1 2559 0
 8943 0058 914B     		ldr	r3, .L621
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 206


 8944 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8945 005e 072B     		cmp	r3, #7
 8946 0060 04D0     		beq	.L578
 8947              		.loc 1 2559 0 is_stmt 0 discriminator 1
 8948 0062 924B     		ldr	r3, .L621+12
 8949 0064 93F90030 		ldrsb	r3, [r3]
 8950 0068 012B     		cmp	r3, #1
 8951 006a 0CD0     		beq	.L579
 8952              	.L578:
 8953              		.loc 1 2559 0 discriminator 3
 8954 006c 8C4B     		ldr	r3, .L621
 8955 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8956 0072 072B     		cmp	r3, #7
 8957 0074 40F00E81 		bne	.L615
 8958              		.loc 1 2559 0 discriminator 4
 8959 0078 8C4B     		ldr	r3, .L621+12
 8960 007a 93F90030 		ldrsb	r3, [r3]
 8961 007e B3F1FF3F 		cmp	r3, #-1
 8962 0082 40F00781 		bne	.L615
 8963              	.L579:
2560:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 8964              		.loc 1 2560 0 is_stmt 1
 8965 0086 8A4A     		ldr	r2, .L621+16
 8966 0088 FB68     		ldr	r3, [r7, #12]
 8967 008a 1360     		str	r3, [r2]
2561:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8968              		.loc 1 2561 0
 8969 008c 894B     		ldr	r3, .L621+20
 8970 008e 1A68     		ldr	r2, [r3]
 8971 0090 874B     		ldr	r3, .L621+16
 8972 0092 1B68     		ldr	r3, [r3]
 8973 0094 9A42     		cmp	r2, r3
 8974 0096 05DD     		ble	.L581
 8975              		.loc 1 2561 0 is_stmt 0 discriminator 1
 8976 0098 864B     		ldr	r3, .L621+20
 8977 009a 1A68     		ldr	r2, [r3]
 8978 009c 844B     		ldr	r3, .L621+16
 8979 009e 1B68     		ldr	r3, [r3]
 8980 00a0 D31A     		subs	r3, r2, r3
 8981 00a2 04E0     		b	.L582
 8982              	.L581:
 8983              		.loc 1 2561 0 discriminator 2
 8984 00a4 824B     		ldr	r3, .L621+16
 8985 00a6 1A68     		ldr	r2, [r3]
 8986 00a8 824B     		ldr	r3, .L621+20
 8987 00aa 1B68     		ldr	r3, [r3]
 8988 00ac D31A     		subs	r3, r2, r3
 8989              	.L582:
 8990              		.loc 1 2561 0 discriminator 4
 8991 00ae BB60     		str	r3, [r7, #8]
2562:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 8992              		.loc 1 2562 0 is_stmt 1 discriminator 4
 8993 00b0 7B4B     		ldr	r3, .L621
 8994 00b2 5A6D     		ldr	r2, [r3, #84]
 8995 00b4 BB68     		ldr	r3, [r7, #8]
 8996 00b6 1344     		add	r3, r3, r2
 8997 00b8 794A     		ldr	r2, .L621
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 207


 8998 00ba 5365     		str	r3, [r2, #84]
2563:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 8999              		.loc 1 2563 0 discriminator 4
 9000 00bc 7A4B     		ldr	r3, .L621+8
 9001 00be 0122     		movs	r2, #1
 9002 00c0 1A70     		strb	r2, [r3]
2564:..\src/interruptions.c ****             }
2565:..\src/interruptions.c ****             break;
 9003              		.loc 1 2565 0 discriminator 4
 9004 00c2 E7E0     		b	.L615
 9005              	.L575:
2566:..\src/interruptions.c ****         case STATE_ACTIVE:
2567:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9006              		.loc 1 2567 0
 9007 00c4 764B     		ldr	r3, .L621
 9008 00c6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9009 00ca 072B     		cmp	r3, #7
 9010 00cc 05D0     		beq	.L583
 9011              		.loc 1 2567 0 is_stmt 0 discriminator 1
 9012 00ce 774B     		ldr	r3, .L621+12
 9013 00d0 93F90030 		ldrsb	r3, [r3]
 9014 00d4 B3F1FF3F 		cmp	r3, #-1
 9015 00d8 0BD0     		beq	.L584
 9016              	.L583:
 9017              		.loc 1 2567 0 discriminator 3
 9018 00da 714B     		ldr	r3, .L621
 9019 00dc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9020 00e0 072B     		cmp	r3, #7
 9021 00e2 40F0D980 		bne	.L616
 9022              		.loc 1 2567 0 discriminator 4
 9023 00e6 714B     		ldr	r3, .L621+12
 9024 00e8 93F90030 		ldrsb	r3, [r3]
 9025 00ec 012B     		cmp	r3, #1
 9026 00ee 40F0D380 		bne	.L616
 9027              	.L584:
2568:..\src/interruptions.c ****                 max_pos = curr_pos;
 9028              		.loc 1 2568 0 is_stmt 1
 9029 00f2 704A     		ldr	r2, .L621+20
 9030 00f4 FB68     		ldr	r3, [r7, #12]
 9031 00f6 1360     		str	r3, [r2]
2569:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9032              		.loc 1 2569 0
 9033 00f8 6E4B     		ldr	r3, .L621+20
 9034 00fa 1A68     		ldr	r2, [r3]
 9035 00fc 6C4B     		ldr	r3, .L621+16
 9036 00fe 1B68     		ldr	r3, [r3]
 9037 0100 9A42     		cmp	r2, r3
 9038 0102 05DD     		ble	.L586
 9039              		.loc 1 2569 0 is_stmt 0 discriminator 1
 9040 0104 6B4B     		ldr	r3, .L621+20
 9041 0106 1A68     		ldr	r2, [r3]
 9042 0108 694B     		ldr	r3, .L621+16
 9043 010a 1B68     		ldr	r3, [r3]
 9044 010c D31A     		subs	r3, r2, r3
 9045 010e 04E0     		b	.L587
 9046              	.L586:
 9047              		.loc 1 2569 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 208


 9048 0110 674B     		ldr	r3, .L621+16
 9049 0112 1A68     		ldr	r2, [r3]
 9050 0114 674B     		ldr	r3, .L621+20
 9051 0116 1B68     		ldr	r3, [r3]
 9052 0118 D31A     		subs	r3, r2, r3
 9053              	.L587:
 9054              		.loc 1 2569 0 discriminator 4
 9055 011a BB60     		str	r3, [r7, #8]
2570:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9056              		.loc 1 2570 0 is_stmt 1 discriminator 4
 9057 011c 604B     		ldr	r3, .L621
 9058 011e 5A6D     		ldr	r2, [r3, #84]
 9059 0120 BB68     		ldr	r3, [r7, #8]
 9060 0122 1344     		add	r3, r3, r2
 9061 0124 5E4A     		ldr	r2, .L621
 9062 0126 5365     		str	r3, [r2, #84]
2571:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9063              		.loc 1 2571 0 discriminator 4
 9064 0128 5F4B     		ldr	r3, .L621+8
 9065 012a 0222     		movs	r2, #2
 9066 012c 1A70     		strb	r2, [r3]
2572:..\src/interruptions.c ****             }
2573:..\src/interruptions.c ****             break;
 9067              		.loc 1 2573 0 discriminator 4
 9068 012e B3E0     		b	.L616
 9069              	.L576:
2574:..\src/interruptions.c ****         case COUNTER_INC:
2575:..\src/interruptions.c **** 
2576:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9070              		.loc 1 2576 0
 9071 0130 604B     		ldr	r3, .L621+20
 9072 0132 1A68     		ldr	r2, [r3]
 9073 0134 5E4B     		ldr	r3, .L621+16
 9074 0136 1B68     		ldr	r3, [r3]
 9075 0138 9A42     		cmp	r2, r3
 9076 013a 05DD     		ble	.L588
 9077              		.loc 1 2576 0 is_stmt 0 discriminator 1
 9078 013c 5D4B     		ldr	r3, .L621+20
 9079 013e 1A68     		ldr	r2, [r3]
 9080 0140 5B4B     		ldr	r3, .L621+16
 9081 0142 1B68     		ldr	r3, [r3]
 9082 0144 D31A     		subs	r3, r2, r3
 9083 0146 04E0     		b	.L589
 9084              	.L588:
 9085              		.loc 1 2576 0 discriminator 2
 9086 0148 594B     		ldr	r3, .L621+16
 9087 014a 1A68     		ldr	r2, [r3]
 9088 014c 594B     		ldr	r3, .L621+20
 9089 014e 1B68     		ldr	r3, [r3]
 9090 0150 D31A     		subs	r3, r2, r3
 9091              	.L589:
 9092              		.loc 1 2576 0 discriminator 4
 9093 0152 BB60     		str	r3, [r7, #8]
2577:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9094              		.loc 1 2577 0 is_stmt 1 discriminator 4
 9095 0154 584B     		ldr	r3, .L621+24
 9096 0156 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 209


 9097 0158 BA68     		ldr	r2, [r7, #8]
 9098 015a 9A42     		cmp	r2, r3
 9099 015c 40F39680 		ble	.L590
2578:..\src/interruptions.c ****                 //update position histogram
2579:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9100              		.loc 1 2579 0
 9101 0160 4F4B     		ldr	r3, .L621
 9102 0162 D3F8E820 		ldr	r2, [r3, #232]
 9103 0166 4E4B     		ldr	r3, .L621
 9104 0168 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9105 016c 1846     		mov	r0, r3
 9106 016e 4C49     		ldr	r1, .L621
 9107 0170 0346     		mov	r3, r0
 9108 0172 5B00     		lsls	r3, r3, #1
 9109 0174 0344     		add	r3, r3, r0
 9110 0176 1B01     		lsls	r3, r3, #4
 9111 0178 0B44     		add	r3, r3, r1
 9112 017a 03F29513 		addw	r3, r3, #405
 9113 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9114 0180 42FA03F3 		asr	r3, r2, r3
 9115 0184 4D4A     		ldr	r2, .L621+28
 9116 0186 82FB0312 		smull	r1, r2, r2, r3
 9117 018a 9210     		asrs	r2, r2, #2
 9118 018c DB17     		asrs	r3, r3, #31
 9119 018e D31A     		subs	r3, r2, r3
 9120 0190 7B60     		str	r3, [r7, #4]
2580:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9121              		.loc 1 2580 0
 9122 0192 474B     		ldr	r3, .L621+16
 9123 0194 1A68     		ldr	r2, [r3]
 9124 0196 7B68     		ldr	r3, [r7, #4]
 9125 0198 92FBF3F3 		sdiv	r3, r2, r3
 9126 019c FB70     		strb	r3, [r7, #3]
2581:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9127              		.loc 1 2581 0
 9128 019e 454B     		ldr	r3, .L621+20
 9129 01a0 1A68     		ldr	r2, [r3]
 9130 01a2 7B68     		ldr	r3, [r7, #4]
 9131 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9132 01a8 BB70     		strb	r3, [r7, #2]
2582:..\src/interruptions.c ****                 
2583:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2584:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9133              		.loc 1 2584 0
 9134 01aa BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9135 01ac FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9136 01ae 9342     		cmp	r3, r2
 9137 01b0 28BF     		it	cs
 9138 01b2 1346     		movcs	r3, r2
 9139 01b4 7B70     		strb	r3, [r7, #1]
2585:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9140              		.loc 1 2585 0
 9141 01b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9142 01b8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9143 01ba 9342     		cmp	r3, r2
 9144 01bc 38BF     		it	cc
 9145 01be 1346     		movcc	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 210


 9146 01c0 3B70     		strb	r3, [r7]
2586:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9147              		.loc 1 2586 0
 9148 01c2 7B78     		ldrb	r3, [r7, #1]
 9149 01c4 FB75     		strb	r3, [r7, #23]
 9150 01c6 0DE0     		b	.L591
 9151              	.L593:
2587:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2588:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9152              		.loc 1 2588 0 discriminator 4
 9153 01c8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9154 01ca FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9155 01cc 3449     		ldr	r1, .L621
 9156 01ce 0632     		adds	r2, r2, #6
 9157 01d0 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9158 01d4 0132     		adds	r2, r2, #1
 9159 01d6 3249     		ldr	r1, .L621
 9160 01d8 0633     		adds	r3, r3, #6
 9161 01da 41F82320 		str	r2, [r1, r3, lsl #2]
2586:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9162              		.loc 1 2586 0 discriminator 4
 9163 01de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9164 01e0 0133     		adds	r3, r3, #1
 9165 01e2 FB75     		strb	r3, [r7, #23]
 9166              	.L591:
2586:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9167              		.loc 1 2586 0 is_stmt 0 discriminator 1
 9168 01e4 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9169 01e6 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9170 01e8 9A42     		cmp	r2, r3
 9171 01ea 02D8     		bhi	.L592
2586:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9172              		.loc 1 2586 0 discriminator 3
 9173 01ec FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9174 01ee 092B     		cmp	r3, #9
 9175 01f0 EAD9     		bls	.L593
 9176              	.L592:
2589:..\src/interruptions.c ****                 }
2590:..\src/interruptions.c ****                 
2591:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2592:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9177              		.loc 1 2592 0 is_stmt 1
 9178 01f2 2B4B     		ldr	r3, .L621
 9179 01f4 B3F90C31 		ldrsh	r3, [r3, #268]
 9180 01f8 002B     		cmp	r3, #0
 9181 01fa 00DA     		bge	.L594
 9182 01fc 0333     		adds	r3, r3, #3
 9183              	.L594:
 9184 01fe 9B10     		asrs	r3, r3, #2
 9185 0200 1BB2     		sxth	r3, r3
 9186 0202 7B60     		str	r3, [r7, #4]
2593:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9187              		.loc 1 2593 0
 9188 0204 264B     		ldr	r3, .L621
 9189 0206 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9190 020a 012B     		cmp	r3, #1
 9191 020c 0CD1     		bne	.L595
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 211


2594:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9192              		.loc 1 2594 0
 9193 020e 244B     		ldr	r3, .L621
 9194 0210 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9195 0214 1946     		mov	r1, r3
 9196 0216 234A     		ldr	r2, .L621+4
 9197 0218 3423     		movs	r3, #52
 9198 021a 03FB01F3 		mul	r3, r3, r1
 9199 021e 1344     		add	r3, r3, r2
 9200 0220 1433     		adds	r3, r3, #20
 9201 0222 1B68     		ldr	r3, [r3]
 9202 0224 3B61     		str	r3, [r7, #16]
 9203 0226 0BE0     		b	.L596
 9204              	.L595:
2595:..\src/interruptions.c ****                 else
2596:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9205              		.loc 1 2596 0
 9206 0228 1D4B     		ldr	r3, .L621
 9207 022a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9208 022e 1946     		mov	r1, r3
 9209 0230 1C4A     		ldr	r2, .L621+4
 9210 0232 3423     		movs	r3, #52
 9211 0234 03FB01F3 		mul	r3, r3, r1
 9212 0238 1344     		add	r3, r3, r2
 9213 023a 0C33     		adds	r3, r3, #12
 9214 023c 1B68     		ldr	r3, [r3]
 9215 023e 3B61     		str	r3, [r7, #16]
 9216              	.L596:
2597:..\src/interruptions.c **** 
2598:..\src/interruptions.c ****                 if (curr_ref < 0){
 9217              		.loc 1 2598 0
 9218 0240 3B69     		ldr	r3, [r7, #16]
 9219 0242 002B     		cmp	r3, #0
 9220 0244 02DA     		bge	.L597
2599:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9221              		.loc 1 2599 0
 9222 0246 3B69     		ldr	r3, [r7, #16]
 9223 0248 5B42     		negs	r3, r3
 9224 024a 3B61     		str	r3, [r7, #16]
 9225              	.L597:
2600:..\src/interruptions.c ****                 }
2601:..\src/interruptions.c ****                 
2602:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9226              		.loc 1 2602 0
 9227 024c 144B     		ldr	r3, .L621
 9228 024e B3F90C31 		ldrsh	r3, [r3, #268]
 9229 0252 1A46     		mov	r2, r3
 9230 0254 3B69     		ldr	r3, [r7, #16]
 9231 0256 9A42     		cmp	r2, r3
 9232 0258 05DA     		bge	.L598
2603:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9233              		.loc 1 2603 0
 9234 025a 114B     		ldr	r3, .L621
 9235 025c DB6C     		ldr	r3, [r3, #76]
 9236 025e 0133     		adds	r3, r3, #1
 9237 0260 0F4A     		ldr	r2, .L621
 9238 0262 D364     		str	r3, [r2, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 212


 9239 0264 12E0     		b	.L590
 9240              	.L598:
2604:..\src/interruptions.c ****                 else
2605:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9241              		.loc 1 2605 0
 9242 0266 3A69     		ldr	r2, [r7, #16]
 9243 0268 7B68     		ldr	r3, [r7, #4]
 9244 026a 92FBF3F3 		sdiv	r3, r2, r3
 9245 026e DBB2     		uxtb	r3, r3
 9246 0270 3969     		ldr	r1, [r7, #16]
 9247 0272 7A68     		ldr	r2, [r7, #4]
 9248 0274 91FBF2F2 		sdiv	r2, r1, r2
 9249 0278 D2B2     		uxtb	r2, r2
 9250 027a 0949     		ldr	r1, .L621
 9251 027c 1032     		adds	r2, r2, #16
 9252 027e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9253 0282 0132     		adds	r2, r2, #1
 9254 0284 0649     		ldr	r1, .L621
 9255 0286 1033     		adds	r3, r3, #16
 9256 0288 41F82320 		str	r2, [r1, r3, lsl #2]
 9257              	.L590:
2606:..\src/interruptions.c ****             }
2607:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9258              		.loc 1 2607 0
 9259 028c 064B     		ldr	r3, .L621+8
 9260 028e 0022     		movs	r2, #0
 9261 0290 1A70     		strb	r2, [r3]
2608:..\src/interruptions.c ****             break;
 9262              		.loc 1 2608 0
 9263 0292 02E0     		b	.L574
 9264              	.L615:
2565:..\src/interruptions.c ****         case STATE_ACTIVE:
 9265              		.loc 1 2565 0
 9266 0294 00BF     		nop
 9267 0296 00E0     		b	.L574
 9268              	.L616:
2573:..\src/interruptions.c ****         case COUNTER_INC:
 9269              		.loc 1 2573 0
 9270 0298 00BF     		nop
 9271              	.L574:
2609:..\src/interruptions.c ****     }
2610:..\src/interruptions.c ****     
2611:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2612:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9272              		.loc 1 2612 0
 9273 029a 0023     		movs	r3, #0
 9274 029c FB75     		strb	r3, [r7, #23]
 9275 029e 4FE0     		b	.L599
 9276              	.L622:
 9277              		.align	2
 9278              	.L621:
 9279 02a0 00000000 		.word	g_mem
 9280 02a4 00000000 		.word	g_meas
 9281 02a8 8A010000 		.word	pos_cycle_status.10724
 9282 02ac 00000000 		.word	pwm_sign
 9283 02b0 8C010000 		.word	thr_pos.10728
 9284 02b4 90010000 		.word	max_pos.10729
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 213


 9285 02b8 08000000 		.word	bin_threshold.10727
 9286 02bc 67666666 		.word	1717986919
 9287              	.L607:
2613:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9288              		.loc 1 2613 0
 9289 02c0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9290 02c2 4D4A     		ldr	r2, .L623
 9291 02c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9292 02c6 012B     		cmp	r3, #1
 9293 02c8 13D0     		beq	.L601
 9294 02ca 022B     		cmp	r3, #2
 9295 02cc 22D0     		beq	.L602
 9296 02ce 002B     		cmp	r3, #0
 9297 02d0 33D1     		bne	.L600
2614:..\src/interruptions.c ****             case STATE_INACTIVE:
2615:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9298              		.loc 1 2615 0
 9299 02d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9300 02d4 494A     		ldr	r2, .L623+4
 9301 02d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9302 02da FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9303 02dc 4849     		ldr	r1, .L623+8
 9304 02de F832     		adds	r2, r2, #248
 9305 02e0 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9306 02e4 9342     		cmp	r3, r2
 9307 02e6 25DD     		ble	.L617
2616:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9308              		.loc 1 2616 0
 9309 02e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9310 02ea 434A     		ldr	r2, .L623
 9311 02ec 0121     		movs	r1, #1
 9312 02ee D154     		strb	r1, [r2, r3]
2617:..\src/interruptions.c ****                 }
2618:..\src/interruptions.c ****                 break;
 9313              		.loc 1 2618 0
 9314 02f0 20E0     		b	.L617
 9315              	.L601:
2619:..\src/interruptions.c ****             case STATE_ACTIVE:
2620:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 9316              		.loc 1 2620 0
 9317 02f2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9318 02f4 414A     		ldr	r2, .L623+4
 9319 02f6 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9320 02fa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9321 02fc 4049     		ldr	r1, .L623+8
 9322 02fe F833     		adds	r3, r3, #248
 9323 0300 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9324 0304 0A3B     		subs	r3, r3, #10
 9325 0306 9A42     		cmp	r2, r3
 9326 0308 16DA     		bge	.L618
2621:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9327              		.loc 1 2621 0
 9328 030a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9329 030c 3A4A     		ldr	r2, .L623
 9330 030e 0221     		movs	r1, #2
 9331 0310 D154     		strb	r1, [r2, r3]
2622:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 214


2623:..\src/interruptions.c ****                 break;
 9332              		.loc 1 2623 0
 9333 0312 11E0     		b	.L618
 9334              	.L602:
2624:..\src/interruptions.c ****             case COUNTER_INC:
2625:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 9335              		.loc 1 2625 0
 9336 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9337 0316 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9338 0318 3949     		ldr	r1, .L623+8
 9339 031a 0432     		adds	r2, r2, #4
 9340 031c 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9341 0320 0132     		adds	r2, r2, #1
 9342 0322 3749     		ldr	r1, .L623+8
 9343 0324 0433     		adds	r3, r3, #4
 9344 0326 41F82320 		str	r2, [r1, r3, lsl #2]
2626:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9345              		.loc 1 2626 0
 9346 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9347 032c 324A     		ldr	r2, .L623
 9348 032e 0021     		movs	r1, #0
 9349 0330 D154     		strb	r1, [r2, r3]
2627:..\src/interruptions.c ****                 break;
 9350              		.loc 1 2627 0
 9351 0332 02E0     		b	.L600
 9352              	.L617:
2618:..\src/interruptions.c ****             case STATE_ACTIVE:
 9353              		.loc 1 2618 0
 9354 0334 00BF     		nop
 9355 0336 00E0     		b	.L600
 9356              	.L618:
2623:..\src/interruptions.c ****             case COUNTER_INC:
 9357              		.loc 1 2623 0
 9358 0338 00BF     		nop
 9359              	.L600:
2612:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9360              		.loc 1 2612 0 discriminator 2
 9361 033a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9362 033c 0133     		adds	r3, r3, #1
 9363 033e FB75     		strb	r3, [r7, #23]
 9364              	.L599:
2612:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9365              		.loc 1 2612 0 is_stmt 0 discriminator 1
 9366 0340 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9367 0342 012B     		cmp	r3, #1
 9368 0344 07D8     		bhi	.L606
2612:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9369              		.loc 1 2612 0 discriminator 3
 9370 0346 2F4B     		ldr	r3, .L623+12
 9371 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9372 034a 002B     		cmp	r3, #0
 9373 034c 03D1     		bne	.L606
2612:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9374              		.loc 1 2612 0 discriminator 4
 9375 034e 2E4B     		ldr	r3, .L623+16
 9376 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9377 0352 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 215


 9378 0354 B4D0     		beq	.L607
 9379              	.L606:
2628:..\src/interruptions.c ****         }
2629:..\src/interruptions.c ****     }
2630:..\src/interruptions.c ****     
2631:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2632:..\src/interruptions.c ****     switch (rest_cycle_status){
 9380              		.loc 1 2632 0 is_stmt 1
 9381 0356 2D4B     		ldr	r3, .L623+20
 9382 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9383 035a 012B     		cmp	r3, #1
 9384 035c 11D0     		beq	.L609
 9385 035e 022B     		cmp	r3, #2
 9386 0360 2AD0     		beq	.L610
 9387 0362 002B     		cmp	r3, #0
 9388 0364 42D1     		bne	.L608
2633:..\src/interruptions.c ****         case STATE_INACTIVE:
2634:..\src/interruptions.c ****             if (rest_enabled){
 9389              		.loc 1 2634 0
 9390 0366 2A4B     		ldr	r3, .L623+24
 9391 0368 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9392 036a 002B     		cmp	r3, #0
 9393 036c 3BD0     		beq	.L619
2635:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9394              		.loc 1 2635 0
 9395 036e FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9396 0372 0346     		mov	r3, r0
 9397 0374 1A46     		mov	r2, r3
 9398 0376 274B     		ldr	r3, .L623+28
 9399 0378 1A60     		str	r2, [r3]
2636:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9400              		.loc 1 2636 0
 9401 037a 244B     		ldr	r3, .L623+20
 9402 037c 0122     		movs	r2, #1
 9403 037e 1A70     		strb	r2, [r3]
2637:..\src/interruptions.c ****             }
2638:..\src/interruptions.c ****             break;
 9404              		.loc 1 2638 0
 9405 0380 31E0     		b	.L619
 9406              	.L609:
2639:..\src/interruptions.c ****         case STATE_ACTIVE:
2640:..\src/interruptions.c ****             if (!rest_enabled){
 9407              		.loc 1 2640 0
 9408 0382 234B     		ldr	r3, .L623+24
 9409 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9410 0386 002B     		cmp	r3, #0
 9411 0388 2FD1     		bne	.L620
2641:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9412              		.loc 1 2641 0
 9413 038a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9414 038e 0346     		mov	r3, r0
 9415 0390 1A46     		mov	r2, r3
 9416 0392 214B     		ldr	r3, .L623+32
 9417 0394 1A60     		str	r2, [r3]
2642:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9418              		.loc 1 2642 0
 9419 0396 1F4B     		ldr	r3, .L623+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 216


 9420 0398 1A68     		ldr	r2, [r3]
 9421 039a 1F4B     		ldr	r3, .L623+32
 9422 039c 1B68     		ldr	r3, [r3]
 9423 039e 9A42     		cmp	r2, r3
 9424 03a0 06D2     		bcs	.L614
2643:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9425              		.loc 1 2643 0
 9426 03a2 1C4B     		ldr	r3, .L623+28
 9427 03a4 1B68     		ldr	r3, [r3]
 9428 03a6 03F5BB53 		add	r3, r3, #5984
 9429 03aa 1033     		adds	r3, r3, #16
 9430 03ac 194A     		ldr	r2, .L623+28
 9431 03ae 1360     		str	r3, [r2]
 9432              	.L614:
2644:..\src/interruptions.c ****                 }
2645:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9433              		.loc 1 2645 0
 9434 03b0 164B     		ldr	r3, .L623+20
 9435 03b2 0222     		movs	r2, #2
 9436 03b4 1A70     		strb	r2, [r3]
2646:..\src/interruptions.c ****             }
2647:..\src/interruptions.c ****             break;
 9437              		.loc 1 2647 0
 9438 03b6 18E0     		b	.L620
 9439              	.L610:
2648:..\src/interruptions.c ****         case COUNTER_INC: 
2649:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9440              		.loc 1 2649 0
 9441 03b8 114B     		ldr	r3, .L623+8
 9442 03ba DA6D     		ldr	r2, [r3, #92]
 9443 03bc 154B     		ldr	r3, .L623+28
 9444 03be 1968     		ldr	r1, [r3]
 9445 03c0 154B     		ldr	r3, .L623+32
 9446 03c2 1B68     		ldr	r3, [r3]
 9447 03c4 CB1A     		subs	r3, r1, r3
 9448 03c6 1549     		ldr	r1, .L623+36
 9449 03c8 A1FB0313 		umull	r1, r3, r1, r3
 9450 03cc 1B09     		lsrs	r3, r3, #4
 9451 03ce 1344     		add	r3, r3, r2
 9452 03d0 0B4A     		ldr	r2, .L623+8
 9453 03d2 D365     		str	r3, [r2, #92]
2650:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9454              		.loc 1 2650 0
 9455 03d4 0A4B     		ldr	r3, .L623+8
 9456 03d6 1B6D     		ldr	r3, [r3, #80]
 9457 03d8 0133     		adds	r3, r3, #1
 9458 03da 094A     		ldr	r2, .L623+8
 9459 03dc 1365     		str	r3, [r2, #80]
2651:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9460              		.loc 1 2651 0
 9461 03de 0B4B     		ldr	r3, .L623+20
 9462 03e0 0022     		movs	r2, #0
 9463 03e2 1A70     		strb	r2, [r3]
2652:..\src/interruptions.c ****             break;
 9464              		.loc 1 2652 0
 9465 03e4 02E0     		b	.L608
 9466              	.L619:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 217


2638:..\src/interruptions.c ****         case STATE_ACTIVE:
 9467              		.loc 1 2638 0
 9468 03e6 00BF     		nop
 9469 03e8 00E0     		b	.L608
 9470              	.L620:
2647:..\src/interruptions.c ****         case COUNTER_INC: 
 9471              		.loc 1 2647 0
 9472 03ea 00BF     		nop
 9473              	.L608:
2653:..\src/interruptions.c ****     }
2654:..\src/interruptions.c ****           
2655:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2656:..\src/interruptions.c ****     save_cycles_eeprom();
 9474              		.loc 1 2656 0
 9475 03ec FFF7FEFF 		bl	save_cycles_eeprom
2657:..\src/interruptions.c ****     
2658:..\src/interruptions.c **** }
 9476              		.loc 1 2658 0
 9477 03f0 00BF     		nop
 9478 03f2 1837     		adds	r7, r7, #24
 9479              		.cfi_def_cfa_offset 8
 9480 03f4 BD46     		mov	sp, r7
 9481              		.cfi_def_cfa_register 13
 9482              		@ sp needed
 9483 03f6 80BD     		pop	{r7, pc}
 9484              	.L624:
 9485              		.align	2
 9486              	.L623:
 9487 03f8 94010000 		.word	emg_cycle_status.10725
 9488 03fc 00000000 		.word	g_adc_meas
 9489 0400 00000000 		.word	g_mem
 9490 0404 00000000 		.word	emg_1_status
 9491 0408 00000000 		.word	emg_2_status
 9492 040c 96010000 		.word	rest_cycle_status.10726
 9493 0410 00000000 		.word	rest_enabled
 9494 0414 98010000 		.word	timer_value_s.10739
 9495 0418 9C010000 		.word	timer_value_e.10740
 9496 041c 1F85EB51 		.word	1374389535
 9497              		.cfi_endproc
 9498              	.LFE77:
 9499              		.size	cycles_counter_update, .-cycles_counter_update
 9500              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9501              		.align	2
 9502              		.global	save_cycles_eeprom
 9503              		.thumb
 9504              		.thumb_func
 9505              		.type	save_cycles_eeprom, %function
 9506              	save_cycles_eeprom:
 9507              	.LFB78:
2659:..\src/interruptions.c **** 
2660:..\src/interruptions.c **** //==============================================================================
2661:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2662:..\src/interruptions.c **** //==============================================================================
2663:..\src/interruptions.c **** 
2664:..\src/interruptions.c **** void save_cycles_eeprom() {
 9508              		.loc 1 2664 0
 9509              		.cfi_startproc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 218


 9510              		@ args = 0, pretend = 0, frame = 24
 9511              		@ frame_needed = 1, uses_anonymous_args = 0
 9512 0000 80B5     		push	{r7, lr}
 9513              		.cfi_def_cfa_offset 8
 9514              		.cfi_offset 7, -8
 9515              		.cfi_offset 14, -4
 9516 0002 86B0     		sub	sp, sp, #24
 9517              		.cfi_def_cfa_offset 32
 9518 0004 00AF     		add	r7, sp, #0
 9519              		.cfi_def_cfa_register 7
2665:..\src/interruptions.c **** 
2666:..\src/interruptions.c ****     cystatus status;
2667:..\src/interruptions.c ****     static uint8 row_number;
2668:..\src/interruptions.c ****     uint8 row_start = 1;
 9520              		.loc 1 2668 0
 9521 0006 0123     		movs	r3, #1
 9522 0008 FB75     		strb	r3, [r7, #23]
2669:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 9523              		.loc 1 2669 0
 9524 000a 394B     		ldr	r3, .L641
 9525 000c 3B61     		str	r3, [r7, #16]
2670:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 9526              		.loc 1 2670 0
 9527 000e 394B     		ldr	r3, .L641+4
 9528 0010 FB60     		str	r3, [r7, #12]
2671:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9529              		.loc 1 2671 0
 9530 0012 FB7D     		ldrb	r3, [r7, #23]
 9531 0014 0433     		adds	r3, r3, #4
 9532 0016 FB72     		strb	r3, [r7, #11]
2672:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2673:..\src/interruptions.c **** 
2674:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2675:..\src/interruptions.c ****     switch(cycles_status) {
 9533              		.loc 1 2675 0
 9534 0018 374B     		ldr	r3, .L641+8
 9535 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9536 001c 042B     		cmp	r3, #4
 9537 001e 63D8     		bhi	.L637
 9538 0020 01A2     		adr	r2, .L628
 9539 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9540 0026 00BF     		.p2align 2
 9541              	.L628:
 9542 0028 3D000000 		.word	.L627+1
 9543 002c 5B000000 		.word	.L629+1
 9544 0030 8B000000 		.word	.L630+1
 9545 0034 C7000000 		.word	.L631+1
 9546 0038 DF000000 		.word	.L638+1
 9547              		.p2align 1
 9548              	.L627:
2676:..\src/interruptions.c ****         case PREPARE_DATA:
2677:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2678:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9549              		.loc 1 2678 0
 9550 003c 5022     		movs	r2, #80
 9551 003e 3969     		ldr	r1, [r7, #16]
 9552 0040 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 219


 9553 0042 FFF7FEFF 		bl	memcpy
2679:..\src/interruptions.c ****             m_addr = addr_start;
 9554              		.loc 1 2679 0
 9555 0046 2D4A     		ldr	r2, .L641+12
 9556 0048 3B69     		ldr	r3, [r7, #16]
 9557 004a 1360     		str	r3, [r2]
2680:..\src/interruptions.c ****             row_number = row_start;
 9558              		.loc 1 2680 0
 9559 004c 2C4A     		ldr	r2, .L641+16
 9560 004e FB7D     		ldrb	r3, [r7, #23]
 9561 0050 1370     		strb	r3, [r2]
2681:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9562              		.loc 1 2681 0
 9563 0052 294B     		ldr	r3, .L641+8
 9564 0054 0122     		movs	r2, #1
 9565 0056 1A70     		strb	r2, [r3]
2682:..\src/interruptions.c ****             break;
 9566              		.loc 1 2682 0
 9567 0058 46E0     		b	.L626
 9568              	.L629:
2683:..\src/interruptions.c ****             
2684:..\src/interruptions.c ****         case WRITE_CYCLES:
2685:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9569              		.loc 1 2685 0
 9570 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2686:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9571              		.loc 1 2686 0
 9572 005e 274B     		ldr	r3, .L641+12
 9573 0060 1A68     		ldr	r2, [r3]
 9574 0062 274B     		ldr	r3, .L641+16
 9575 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9576 0066 1946     		mov	r1, r3
 9577 0068 1046     		mov	r0, r2
 9578 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9579 006e 7860     		str	r0, [r7, #4]
2687:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9580              		.loc 1 2687 0
 9581 0070 7B68     		ldr	r3, [r7, #4]
 9582 0072 072B     		cmp	r3, #7
 9583 0074 02D0     		beq	.L633
 9584              		.loc 1 2687 0 is_stmt 0 discriminator 1
 9585 0076 7B68     		ldr	r3, [r7, #4]
 9586 0078 002B     		cmp	r3, #0
 9587 007a 32D1     		bne	.L639
 9588              	.L633:
2688:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9589              		.loc 1 2688 0 is_stmt 1
 9590 007c 1E4B     		ldr	r3, .L641+8
 9591 007e 0222     		movs	r2, #2
 9592 0080 1A70     		strb	r2, [r3]
2689:..\src/interruptions.c ****                 can_write = FALSE;
 9593              		.loc 1 2689 0
 9594 0082 204B     		ldr	r3, .L641+20
 9595 0084 0022     		movs	r2, #0
 9596 0086 1A70     		strb	r2, [r3]
2690:..\src/interruptions.c ****             }
2691:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 220


 9597              		.loc 1 2691 0
 9598 0088 2BE0     		b	.L639
 9599              	.L630:
2692:..\src/interruptions.c ****             
2693:..\src/interruptions.c ****         case WAIT_QUERY:
2694:..\src/interruptions.c ****             status = EEPROM_Query();
 9600              		.loc 1 2694 0
 9601 008a FFF7FEFF 		bl	EEPROM_Query
 9602 008e 7860     		str	r0, [r7, #4]
2695:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9603              		.loc 1 2695 0
 9604 0090 7B68     		ldr	r3, [r7, #4]
 9605 0092 002B     		cmp	r3, #0
 9606 0094 27D1     		bne	.L640
2696:..\src/interruptions.c ****                 if (row_number < row_end) {
 9607              		.loc 1 2696 0
 9608 0096 1A4B     		ldr	r3, .L641+16
 9609 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9610 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9611 009c 9A42     		cmp	r2, r3
 9612 009e 0ED9     		bls	.L636
2697:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 9613              		.loc 1 2697 0
 9614 00a0 164B     		ldr	r3, .L641+12
 9615 00a2 1B68     		ldr	r3, [r3]
 9616 00a4 1033     		adds	r3, r3, #16
 9617 00a6 154A     		ldr	r2, .L641+12
 9618 00a8 1360     		str	r3, [r2]
2698:..\src/interruptions.c ****                     row_number = row_number + 1;
 9619              		.loc 1 2698 0
 9620 00aa 154B     		ldr	r3, .L641+16
 9621 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9622 00ae 0133     		adds	r3, r3, #1
 9623 00b0 DAB2     		uxtb	r2, r3
 9624 00b2 134B     		ldr	r3, .L641+16
 9625 00b4 1A70     		strb	r2, [r3]
2699:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 9626              		.loc 1 2699 0
 9627 00b6 104B     		ldr	r3, .L641+8
 9628 00b8 0122     		movs	r2, #1
 9629 00ba 1A70     		strb	r2, [r3]
2700:..\src/interruptions.c ****                 }
2701:..\src/interruptions.c ****                 else {
2702:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2703:..\src/interruptions.c ****                 }
2704:..\src/interruptions.c ****             }
2705:..\src/interruptions.c ****             break;
 9630              		.loc 1 2705 0
 9631 00bc 13E0     		b	.L640
 9632              	.L636:
2702:..\src/interruptions.c ****                 }
 9633              		.loc 1 2702 0
 9634 00be 0E4B     		ldr	r3, .L641+8
 9635 00c0 0322     		movs	r2, #3
 9636 00c2 1A70     		strb	r2, [r3]
 9637              		.loc 1 2705 0
 9638 00c4 0FE0     		b	.L640
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 221


 9639              	.L631:
2706:..\src/interruptions.c ****            
2707:..\src/interruptions.c ****         case WRITE_END:
2708:..\src/interruptions.c ****             can_write = TRUE;            
 9640              		.loc 1 2708 0
 9641 00c6 0F4B     		ldr	r3, .L641+20
 9642 00c8 0122     		movs	r2, #1
 9643 00ca 1A70     		strb	r2, [r3]
2709:..\src/interruptions.c ****             cycles_status = NONE;
 9644              		.loc 1 2709 0
 9645 00cc 0A4B     		ldr	r3, .L641+8
 9646 00ce 0422     		movs	r2, #4
 9647 00d0 1A70     		strb	r2, [r3]
2710:..\src/interruptions.c ****             
2711:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2712:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 9648              		.loc 1 2712 0
 9649 00d2 5022     		movs	r2, #80
 9650 00d4 F968     		ldr	r1, [r7, #12]
 9651 00d6 3869     		ldr	r0, [r7, #16]
 9652 00d8 FFF7FEFF 		bl	memcpy
2713:..\src/interruptions.c ****             break;
 9653              		.loc 1 2713 0
 9654 00dc 04E0     		b	.L626
 9655              	.L638:
2714:..\src/interruptions.c ****             
2715:..\src/interruptions.c ****         case NONE:
2716:..\src/interruptions.c ****             break;
 9656              		.loc 1 2716 0
 9657 00de 00BF     		nop
 9658 00e0 02E0     		b	.L637
 9659              	.L639:
2691:..\src/interruptions.c ****             
 9660              		.loc 1 2691 0
 9661 00e2 00BF     		nop
 9662 00e4 00E0     		b	.L637
 9663              	.L640:
2705:..\src/interruptions.c ****            
 9664              		.loc 1 2705 0
 9665 00e6 00BF     		nop
 9666              	.L626:
 9667              	.L637:
2717:..\src/interruptions.c ****     }
2718:..\src/interruptions.c ****     
2719:..\src/interruptions.c **** }
 9668              		.loc 1 2719 0
 9669 00e8 00BF     		nop
 9670 00ea 1837     		adds	r7, r7, #24
 9671              		.cfi_def_cfa_offset 8
 9672 00ec BD46     		mov	sp, r7
 9673              		.cfi_def_cfa_register 13
 9674              		@ sp needed
 9675 00ee 80BD     		pop	{r7, pc}
 9676              	.L642:
 9677              		.align	2
 9678              	.L641:
 9679 00f0 10000000 		.word	g_mem+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 222


 9680 00f4 10000000 		.word	c_mem+16
 9681 00f8 00000000 		.word	cycles_status
 9682 00fc A0010000 		.word	m_addr.10767
 9683 0100 A4010000 		.word	row_number.10762
 9684 0104 00000000 		.word	can_write
 9685              		.cfi_endproc
 9686              	.LFE78:
 9687              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 9688              		.bss
 9689              	state.10446:
 9690 0000 00       		.space	1
 9691 0001 000000   		.align	2
 9692              	rx_queue.10450:
 9693 0004 000000   		.space	3
 9694              	data_packet_length.10448:
 9695 0007 00       		.space	1
 9696              	data_packet_index.10447:
 9697 0008 00       		.space	1
 9698 0009 000000   		.align	2
 9699              	data_packet_buffer.10449:
 9700 000c 00000000 		.space	128
 9700      00000000 
 9700      00000000 
 9700      00000000 
 9700      00000000 
 9701              		.data
 9702              		.align	1
 9703              		.type	counter_calibration.10466, %object
 9704              		.size	counter_calibration.10466, 2
 9705              	counter_calibration.10466:
 9706 0000 0100     		.short	1
 9707              		.align	1
 9708              		.type	counter_tension_func.10467, %object
 9709              		.size	counter_tension_func.10467, 2
 9710              	counter_tension_func.10467:
 9711 0002 0100     		.short	1
 9712              		.bss
 9713              		.align	2
 9714              	current_emg.10492:
 9715 008c 0000     		.space	2
 9716              	fsm_state.10529:
 9717 008e 00       		.space	1
 9718 008f 00       		.align	2
 9719              	pos_error_sum.10556:
 9720 0090 00000000 		.space	4
 9721              		.align	2
 9722              	prev_pos_err.10558:
 9723 0094 00000000 		.space	4
 9724              	motor_dir.10561:
 9725 0098 00       		.space	1
 9726 0099 000000   		.align	2
 9727              	curr_error_sum.10557:
 9728 009c 00000000 		.space	4
 9729              		.align	2
 9730              	prev_curr_err.10559:
 9731 00a0 00000000 		.space	4
 9732              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 223


 9733              	prev_pwm.10560:
 9734 00a4 00000000 		.space	4
 9735              		.align	2
 9736              	position_counter.10562:
 9737 00a8 00000000 		.space	4
 9738              		.align	2
 9739              	pos_error_sum.10589:
 9740 00ac 00000000 		.space	8
 9740      00000000 
 9741              		.align	2
 9742              	prev_pos_err.10591:
 9743 00b4 00000000 		.space	8
 9743      00000000 
 9744              		.align	2
 9745              	motor_dir.10594:
 9746 00bc 0000     		.space	2
 9747 00be 0000     		.align	2
 9748              	curr_error_sum.10590:
 9749 00c0 00000000 		.space	8
 9749      00000000 
 9750              		.align	2
 9751              	prev_curr_err.10592:
 9752 00c8 00000000 		.space	8
 9752      00000000 
 9753              		.align	2
 9754              	prev_pwm.10593:
 9755 00d0 00000000 		.space	8
 9755      00000000 
 9756              		.align	2
 9757              	position_counter.10595:
 9758 00d8 00000000 		.space	8
 9758      00000000 
 9759              		.align	2
 9760              	last_value_encoder.10618:
 9761 00e0 00000000 		.space	24
 9761      00000000 
 9761      00000000 
 9761      00000000 
 9761      00000000 
 9762              		.align	2
 9763              	comp_value_encoder.10619:
 9764 00f8 00000000 		.space	24
 9764      00000000 
 9764      00000000 
 9764      00000000 
 9764      00000000 
 9765              		.data
 9766              		.align	2
 9767              		.type	only_first_time.10621, %object
 9768              		.size	only_first_time.10621, 2
 9769              	only_first_time.10621:
 9770 0004 01       		.byte	1
 9771 0005 01       		.byte	1
 9772              		.bss
 9773              		.align	2
 9774              	error.10620:
 9775 0110 00000000 		.space	6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 224


 9775      0000
 9776 0116 0000     		.align	2
 9777              	v_value.10625:
 9778 0118 00000000 		.space	24
 9778      00000000 
 9778      00000000 
 9778      00000000 
 9778      00000000 
 9779              		.align	2
 9780              	vv_value.10626:
 9781 0130 00000000 		.space	24
 9781      00000000 
 9781      00000000 
 9781      00000000 
 9781      00000000 
 9782              		.align	2
 9783              	vvv_value.10627:
 9784 0148 00000000 		.space	24
 9784      00000000 
 9784      00000000 
 9784      00000000 
 9784      00000000 
 9785              		.align	2
 9786              	one_time_execute.10623:
 9787 0160 0000     		.space	2
 9788 0162 0000     		.align	2
 9789              	safe_startup_motor_activation.10622:
 9790 0164 0000     		.space	2
 9791 0166 0000     		.align	2
 9792              	count_startup_motor.10624:
 9793 0168 00000000 		.space	8
 9793      00000000 
 9794              		.data
 9795              		.type	first_tension_valid.10650, %object
 9796              		.size	first_tension_valid.10650, 1
 9797              	first_tension_valid.10650:
 9798 0006 01       		.byte	1
 9799              		.bss
 9800              		.align	1
 9801              	count.10651:
 9802 0170 0000     		.space	2
 9803              	idx.10653:
 9804 0172 00       		.space	1
 9805 0173 00       		.align	2
 9806              	v_count.10652:
 9807 0174 00000000 		.space	4
 9808              		.align	1
 9809              	emg_counter_1.10644:
 9810 0178 0000     		.space	2
 9811              		.align	1
 9812              	emg_counter_2.10645:
 9813 017a 0000     		.space	2
 9814              		.align	2
 9815              	UD_mean_value.10648:
 9816 017c 00000000 		.space	4
 9817              		.align	1
 9818              	UD_counter.10646:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 225


 9819 0180 0000     		.space	2
 9820 0182 0000     		.align	2
 9821              	LR_mean_value.10649:
 9822 0184 00000000 		.space	4
 9823              		.align	1
 9824              	LR_counter.10647:
 9825 0188 0000     		.space	2
 9826              	pos_cycle_status.10724:
 9827 018a 00       		.space	1
 9828 018b 00       		.align	2
 9829              	thr_pos.10728:
 9830 018c 00000000 		.space	4
 9831              		.align	2
 9832              	max_pos.10729:
 9833 0190 00000000 		.space	4
 9834              		.data
 9835 0007 00       		.align	2
 9836              		.type	bin_threshold.10727, %object
 9837              		.size	bin_threshold.10727, 4
 9838              	bin_threshold.10727:
 9839 0008 FA000000 		.word	250
 9840              		.bss
 9841              		.align	2
 9842              	emg_cycle_status.10725:
 9843 0194 0000     		.space	2
 9844              	rest_cycle_status.10726:
 9845 0196 00       		.space	1
 9846 0197 00       		.align	2
 9847              	timer_value_s.10739:
 9848 0198 00000000 		.space	4
 9849              		.align	2
 9850              	timer_value_e.10740:
 9851 019c 00000000 		.space	4
 9852              		.align	2
 9853              	m_addr.10767:
 9854 01a0 00000000 		.space	4
 9855              	row_number.10762:
 9856 01a4 00       		.space	1
 9857              		.text
 9858              	.Letext0:
 9859              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9860              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9861              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 9862              		.file 5 "..\\src\\commands.h"
 9863              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 9864              		.file 7 "..\\src\\globals.h"
 9865              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 9866              		.section	.debug_info,"",%progbits
 9867              	.Ldebug_info0:
 9868 0000 271B0000 		.4byte	0x1b27
 9869 0004 0400     		.2byte	0x4
 9870 0006 00000000 		.4byte	.Ldebug_abbrev0
 9871 000a 04       		.byte	0x4
 9872 000b 01       		.uleb128 0x1
 9873 000c 9E080000 		.4byte	.LASF342
 9874 0010 0C       		.byte	0xc
 9875 0011 A3100000 		.4byte	.LASF343
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 226


 9876 0015 00000000 		.4byte	.LASF344
 9877 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 9878 001d 00000000 		.4byte	0
 9879 0021 00000000 		.4byte	.Ldebug_line0
 9880 0025 02       		.uleb128 0x2
 9881 0026 01       		.byte	0x1
 9882 0027 06       		.byte	0x6
 9883 0028 01040000 		.4byte	.LASF0
 9884 002c 02       		.uleb128 0x2
 9885 002d 01       		.byte	0x1
 9886 002e 08       		.byte	0x8
 9887 002f 7E040000 		.4byte	.LASF1
 9888 0033 02       		.uleb128 0x2
 9889 0034 02       		.byte	0x2
 9890 0035 05       		.byte	0x5
 9891 0036 980E0000 		.4byte	.LASF2
 9892 003a 02       		.uleb128 0x2
 9893 003b 02       		.byte	0x2
 9894 003c 07       		.byte	0x7
 9895 003d 47100000 		.4byte	.LASF3
 9896 0041 03       		.uleb128 0x3
 9897 0042 39110000 		.4byte	.LASF9
 9898 0046 02       		.byte	0x2
 9899 0047 3F       		.byte	0x3f
 9900 0048 4C000000 		.4byte	0x4c
 9901 004c 02       		.uleb128 0x2
 9902 004d 04       		.byte	0x4
 9903 004e 05       		.byte	0x5
 9904 004f E1020000 		.4byte	.LASF4
 9905 0053 02       		.uleb128 0x2
 9906 0054 04       		.byte	0x4
 9907 0055 07       		.byte	0x7
 9908 0056 91070000 		.4byte	.LASF5
 9909 005a 02       		.uleb128 0x2
 9910 005b 08       		.byte	0x8
 9911 005c 05       		.byte	0x5
 9912 005d 64090000 		.4byte	.LASF6
 9913 0061 02       		.uleb128 0x2
 9914 0062 08       		.byte	0x8
 9915 0063 07       		.byte	0x7
 9916 0064 430C0000 		.4byte	.LASF7
 9917 0068 04       		.uleb128 0x4
 9918 0069 04       		.byte	0x4
 9919 006a 05       		.byte	0x5
 9920 006b 696E7400 		.ascii	"int\000"
 9921 006f 02       		.uleb128 0x2
 9922 0070 04       		.byte	0x4
 9923 0071 07       		.byte	0x7
 9924 0072 7A0A0000 		.4byte	.LASF8
 9925 0076 03       		.uleb128 0x3
 9926 0077 BE000000 		.4byte	.LASF10
 9927 007b 03       		.byte	0x3
 9928 007c 2C       		.byte	0x2c
 9929 007d 41000000 		.4byte	0x41
 9930 0081 05       		.uleb128 0x5
 9931 0082 720E0000 		.4byte	.LASF11
 9932 0086 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 227


 9933 0087 E401     		.2byte	0x1e4
 9934 0089 2C000000 		.4byte	0x2c
 9935 008d 05       		.uleb128 0x5
 9936 008e 96110000 		.4byte	.LASF12
 9937 0092 04       		.byte	0x4
 9938 0093 E501     		.2byte	0x1e5
 9939 0095 3A000000 		.4byte	0x3a
 9940 0099 05       		.uleb128 0x5
 9941 009a E4000000 		.4byte	.LASF13
 9942 009e 04       		.byte	0x4
 9943 009f E601     		.2byte	0x1e6
 9944 00a1 53000000 		.4byte	0x53
 9945 00a5 05       		.uleb128 0x5
 9946 00a6 C8010000 		.4byte	.LASF14
 9947 00aa 04       		.byte	0x4
 9948 00ab E701     		.2byte	0x1e7
 9949 00ad 25000000 		.4byte	0x25
 9950 00b1 05       		.uleb128 0x5
 9951 00b2 3F0F0000 		.4byte	.LASF15
 9952 00b6 04       		.byte	0x4
 9953 00b7 E801     		.2byte	0x1e8
 9954 00b9 33000000 		.4byte	0x33
 9955 00bd 05       		.uleb128 0x5
 9956 00be C6100000 		.4byte	.LASF16
 9957 00c2 04       		.byte	0x4
 9958 00c3 E901     		.2byte	0x1e9
 9959 00c5 4C000000 		.4byte	0x4c
 9960 00c9 05       		.uleb128 0x5
 9961 00ca 9D030000 		.4byte	.LASF17
 9962 00ce 04       		.byte	0x4
 9963 00cf EA01     		.2byte	0x1ea
 9964 00d1 D5000000 		.4byte	0xd5
 9965 00d5 02       		.uleb128 0x2
 9966 00d6 04       		.byte	0x4
 9967 00d7 04       		.byte	0x4
 9968 00d8 4C0A0000 		.4byte	.LASF18
 9969 00dc 02       		.uleb128 0x2
 9970 00dd 08       		.byte	0x8
 9971 00de 04       		.byte	0x4
 9972 00df A7090000 		.4byte	.LASF19
 9973 00e3 02       		.uleb128 0x2
 9974 00e4 01       		.byte	0x1
 9975 00e5 08       		.byte	0x8
 9976 00e6 10050000 		.4byte	.LASF20
 9977 00ea 05       		.uleb128 0x5
 9978 00eb B30A0000 		.4byte	.LASF21
 9979 00ef 04       		.byte	0x4
 9980 00f0 8602     		.2byte	0x286
 9981 00f2 53000000 		.4byte	0x53
 9982 00f6 05       		.uleb128 0x5
 9983 00f7 EE0C0000 		.4byte	.LASF22
 9984 00fb 04       		.byte	0x4
 9985 00fc 8E02     		.2byte	0x28e
 9986 00fe 02010000 		.4byte	0x102
 9987 0102 06       		.uleb128 0x6
 9988 0103 81000000 		.4byte	0x81
 9989 0107 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 228


 9990 0108 08       		.byte	0x8
 9991 0109 04       		.byte	0x4
 9992 010a 520B0000 		.4byte	.LASF23
 9993 010e 02       		.uleb128 0x2
 9994 010f 04       		.byte	0x4
 9995 0110 07       		.byte	0x7
 9996 0111 50000000 		.4byte	.LASF24
 9997 0115 07       		.uleb128 0x7
 9998 0116 E3000000 		.4byte	0xe3
 9999 011a 25010000 		.4byte	0x125
 10000 011e 08       		.uleb128 0x8
 10001 011f 0E010000 		.4byte	0x10e
 10002 0123 07       		.byte	0x7
 10003 0124 00       		.byte	0
 10004 0125 09       		.uleb128 0x9
 10005 0126 73110000 		.4byte	.LASF33
 10006 012a 01       		.byte	0x1
 10007 012b 2C000000 		.4byte	0x2c
 10008 012f 05       		.byte	0x5
 10009 0130 8E       		.byte	0x8e
 10010 0131 66010000 		.4byte	0x166
 10011 0135 0A       		.uleb128 0xa
 10012 0136 04070000 		.4byte	.LASF25
 10013 013a 00       		.byte	0
 10014 013b 0A       		.uleb128 0xa
 10015 013c BC0A0000 		.4byte	.LASF26
 10016 0140 01       		.byte	0x1
 10017 0141 0A       		.uleb128 0xa
 10018 0142 53020000 		.4byte	.LASF27
 10019 0146 02       		.byte	0x2
 10020 0147 0A       		.uleb128 0xa
 10021 0148 96010000 		.4byte	.LASF28
 10022 014c 03       		.byte	0x3
 10023 014d 0A       		.uleb128 0xa
 10024 014e 50010000 		.4byte	.LASF29
 10025 0152 04       		.byte	0x4
 10026 0153 0A       		.uleb128 0xa
 10027 0154 86000000 		.4byte	.LASF30
 10028 0158 05       		.byte	0x5
 10029 0159 0A       		.uleb128 0xa
 10030 015a E1070000 		.4byte	.LASF31
 10031 015e 06       		.byte	0x6
 10032 015f 0A       		.uleb128 0xa
 10033 0160 120E0000 		.4byte	.LASF32
 10034 0164 07       		.byte	0x7
 10035 0165 00       		.byte	0
 10036 0166 09       		.uleb128 0x9
 10037 0167 72090000 		.4byte	.LASF34
 10038 016b 01       		.byte	0x1
 10039 016c 2C000000 		.4byte	0x2c
 10040 0170 05       		.byte	0x5
 10041 0171 A2       		.byte	0xa2
 10042 0172 8F010000 		.4byte	0x18f
 10043 0176 0A       		.uleb128 0xa
 10044 0177 2B110000 		.4byte	.LASF35
 10045 017b 00       		.byte	0
 10046 017c 0A       		.uleb128 0xa
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 229


 10047 017d 7C080000 		.4byte	.LASF36
 10048 0181 01       		.byte	0x1
 10049 0182 0A       		.uleb128 0xa
 10050 0183 420B0000 		.4byte	.LASF37
 10051 0187 02       		.byte	0x2
 10052 0188 0A       		.uleb128 0xa
 10053 0189 74070000 		.4byte	.LASF38
 10054 018d 03       		.byte	0x3
 10055 018e 00       		.byte	0
 10056 018f 03       		.uleb128 0x3
 10057 0190 F6100000 		.4byte	.LASF39
 10058 0194 06       		.byte	0x6
 10059 0195 7E       		.byte	0x7e
 10060 0196 9A010000 		.4byte	0x19a
 10061 019a 0B       		.uleb128 0xb
 10062 019b F6100000 		.4byte	.LASF39
 10063 019f 0C       		.uleb128 0xc
 10064 01a0 04       		.byte	0x4
 10065 01a1 8F010000 		.4byte	0x18f
 10066 01a5 0D       		.uleb128 0xd
 10067 01a6 2C090000 		.4byte	.LASF42
 10068 01aa 10       		.byte	0x10
 10069 01ab 07       		.byte	0x7
 10070 01ac E2       		.byte	0xe2
 10071 01ad E2010000 		.4byte	0x1e2
 10072 01b1 0E       		.uleb128 0xe
 10073 01b2 706F7300 		.ascii	"pos\000"
 10074 01b6 07       		.byte	0x7
 10075 01b7 E3       		.byte	0xe3
 10076 01b8 BD000000 		.4byte	0xbd
 10077 01bc 00       		.byte	0
 10078 01bd 0F       		.uleb128 0xf
 10079 01be 61080000 		.4byte	.LASF40
 10080 01c2 07       		.byte	0x7
 10081 01c3 E4       		.byte	0xe4
 10082 01c4 BD000000 		.4byte	0xbd
 10083 01c8 04       		.byte	0x4
 10084 01c9 0E       		.uleb128 0xe
 10085 01ca 70776D00 		.ascii	"pwm\000"
 10086 01ce 07       		.byte	0x7
 10087 01cf E5       		.byte	0xe5
 10088 01d0 BD000000 		.4byte	0xbd
 10089 01d4 08       		.byte	0x8
 10090 01d5 0F       		.uleb128 0xf
 10091 01d6 850C0000 		.4byte	.LASF41
 10092 01da 07       		.byte	0x7
 10093 01db E6       		.byte	0xe6
 10094 01dc 81000000 		.4byte	0x81
 10095 01e0 0C       		.byte	0xc
 10096 01e1 00       		.byte	0
 10097 01e2 0D       		.uleb128 0xd
 10098 01e3 D90D0000 		.4byte	.LASF43
 10099 01e7 34       		.byte	0x34
 10100 01e8 07       		.byte	0x7
 10101 01e9 ED       		.byte	0xed
 10102 01ea 43020000 		.4byte	0x243
 10103 01ee 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 230


 10104 01ef 706F7300 		.ascii	"pos\000"
 10105 01f3 07       		.byte	0x7
 10106 01f4 EE       		.byte	0xee
 10107 01f5 43020000 		.4byte	0x243
 10108 01f9 00       		.byte	0
 10109 01fa 0F       		.uleb128 0xf
 10110 01fb 61080000 		.4byte	.LASF40
 10111 01ff 07       		.byte	0x7
 10112 0200 EF       		.byte	0xef
 10113 0201 BD000000 		.4byte	0xbd
 10114 0205 0C       		.byte	0xc
 10115 0206 0F       		.uleb128 0xf
 10116 0207 760F0000 		.4byte	.LASF44
 10117 020b 07       		.byte	0x7
 10118 020c F0       		.byte	0xf0
 10119 020d BD000000 		.4byte	0xbd
 10120 0211 10       		.byte	0x10
 10121 0212 0F       		.uleb128 0xf
 10122 0213 D7070000 		.4byte	.LASF45
 10123 0217 07       		.byte	0x7
 10124 0218 F1       		.byte	0xf1
 10125 0219 BD000000 		.4byte	0xbd
 10126 021d 14       		.byte	0x14
 10127 021e 0E       		.uleb128 0xe
 10128 021f 726F7400 		.ascii	"rot\000"
 10129 0223 07       		.byte	0x7
 10130 0224 F2       		.byte	0xf2
 10131 0225 53020000 		.4byte	0x253
 10132 0229 18       		.byte	0x18
 10133 022a 0E       		.uleb128 0xe
 10134 022b 76656C00 		.ascii	"vel\000"
 10135 022f 07       		.byte	0x7
 10136 0230 F3       		.byte	0xf3
 10137 0231 43020000 		.4byte	0x243
 10138 0235 1C       		.byte	0x1c
 10139 0236 0E       		.uleb128 0xe
 10140 0237 61636300 		.ascii	"acc\000"
 10141 023b 07       		.byte	0x7
 10142 023c F4       		.byte	0xf4
 10143 023d 43020000 		.4byte	0x243
 10144 0241 28       		.byte	0x28
 10145 0242 00       		.byte	0
 10146 0243 07       		.uleb128 0x7
 10147 0244 BD000000 		.4byte	0xbd
 10148 0248 53020000 		.4byte	0x253
 10149 024c 08       		.uleb128 0x8
 10150 024d 0E010000 		.4byte	0x10e
 10151 0251 02       		.byte	0x2
 10152 0252 00       		.byte	0
 10153 0253 07       		.uleb128 0x7
 10154 0254 A5000000 		.4byte	0xa5
 10155 0258 63020000 		.4byte	0x263
 10156 025c 08       		.uleb128 0x8
 10157 025d 0E010000 		.4byte	0x10e
 10158 0261 02       		.byte	0x2
 10159 0262 00       		.byte	0
 10160 0263 0D       		.uleb128 0xd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 231


 10161 0264 610A0000 		.4byte	.LASF46
 10162 0268 28       		.byte	0x28
 10163 0269 07       		.byte	0x7
 10164 026a F7       		.byte	0xf7
 10165 026b 94020000 		.4byte	0x294
 10166 026f 0E       		.uleb128 0xe
 10167 0270 656D6700 		.ascii	"emg\000"
 10168 0274 07       		.byte	0x7
 10169 0275 F8       		.byte	0xf8
 10170 0276 94020000 		.4byte	0x294
 10171 027a 00       		.byte	0
 10172 027b 0F       		.uleb128 0xf
 10173 027c 060B0000 		.4byte	.LASF47
 10174 0280 07       		.byte	0x7
 10175 0281 F9       		.byte	0xf9
 10176 0282 A4020000 		.4byte	0x2a4
 10177 0286 08       		.byte	0x8
 10178 0287 0F       		.uleb128 0xf
 10179 0288 B70E0000 		.4byte	.LASF48
 10180 028c 07       		.byte	0x7
 10181 028d FA       		.byte	0xfa
 10182 028e 94020000 		.4byte	0x294
 10183 0292 20       		.byte	0x20
 10184 0293 00       		.byte	0
 10185 0294 07       		.uleb128 0x7
 10186 0295 BD000000 		.4byte	0xbd
 10187 0299 A4020000 		.4byte	0x2a4
 10188 029d 08       		.uleb128 0x8
 10189 029e 0E010000 		.4byte	0x10e
 10190 02a2 01       		.byte	0x1
 10191 02a3 00       		.byte	0
 10192 02a4 07       		.uleb128 0x7
 10193 02a5 BD000000 		.4byte	0xbd
 10194 02a9 B4020000 		.4byte	0x2b4
 10195 02ad 08       		.uleb128 0x8
 10196 02ae 0E010000 		.4byte	0x10e
 10197 02b2 05       		.byte	0x5
 10198 02b3 00       		.byte	0
 10199 02b4 10       		.uleb128 0x10
 10200 02b5 DC000000 		.4byte	.LASF49
 10201 02b9 86       		.byte	0x86
 10202 02ba 07       		.byte	0x7
 10203 02bb 0501     		.2byte	0x105
 10204 02bd F6020000 		.4byte	0x2f6
 10205 02c1 11       		.uleb128 0x11
 10206 02c2 1C060000 		.4byte	.LASF50
 10207 02c6 07       		.byte	0x7
 10208 02c7 0601     		.2byte	0x106
 10209 02c9 F6020000 		.4byte	0x2f6
 10210 02cd 00       		.byte	0
 10211 02ce 11       		.uleb128 0x11
 10212 02cf 680C0000 		.4byte	.LASF51
 10213 02d3 07       		.byte	0x7
 10214 02d4 0701     		.2byte	0x107
 10215 02d6 B1000000 		.4byte	0xb1
 10216 02da 80       		.byte	0x80
 10217 02db 12       		.uleb128 0x12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 232


 10218 02dc 696E6400 		.ascii	"ind\000"
 10219 02e0 07       		.byte	0x7
 10220 02e1 0801     		.2byte	0x108
 10221 02e3 B1000000 		.4byte	0xb1
 10222 02e7 82       		.byte	0x82
 10223 02e8 11       		.uleb128 0x11
 10224 02e9 26020000 		.4byte	.LASF52
 10225 02ed 07       		.byte	0x7
 10226 02ee 0901     		.2byte	0x109
 10227 02f0 81000000 		.4byte	0x81
 10228 02f4 84       		.byte	0x84
 10229 02f5 00       		.byte	0
 10230 02f6 07       		.uleb128 0x7
 10231 02f7 81000000 		.4byte	0x81
 10232 02fb 06030000 		.4byte	0x306
 10233 02ff 08       		.uleb128 0x8
 10234 0300 0E010000 		.4byte	0x10e
 10235 0304 7F       		.byte	0x7f
 10236 0305 00       		.byte	0
 10237 0306 10       		.uleb128 0x10
 10238 0307 8A030000 		.4byte	.LASF53
 10239 030b 50       		.byte	0x50
 10240 030c 07       		.byte	0x7
 10241 030d 1201     		.2byte	0x112
 10242 030f 6F030000 		.4byte	0x36f
 10243 0313 11       		.uleb128 0x11
 10244 0314 BF030000 		.4byte	.LASF54
 10245 0318 07       		.byte	0x7
 10246 0319 1301     		.2byte	0x113
 10247 031b 6F030000 		.4byte	0x36f
 10248 031f 00       		.byte	0
 10249 0320 11       		.uleb128 0x11
 10250 0321 E3010000 		.4byte	.LASF55
 10251 0325 07       		.byte	0x7
 10252 0326 1401     		.2byte	0x114
 10253 0328 7F030000 		.4byte	0x37f
 10254 032c 08       		.byte	0x8
 10255 032d 11       		.uleb128 0x11
 10256 032e 350B0000 		.4byte	.LASF56
 10257 0332 07       		.byte	0x7
 10258 0333 1501     		.2byte	0x115
 10259 0335 8F030000 		.4byte	0x38f
 10260 0339 30       		.byte	0x30
 10261 033a 11       		.uleb128 0x11
 10262 033b 7A010000 		.4byte	.LASF57
 10263 033f 07       		.byte	0x7
 10264 0340 1601     		.2byte	0x116
 10265 0342 99000000 		.4byte	0x99
 10266 0346 40       		.byte	0x40
 10267 0347 11       		.uleb128 0x11
 10268 0348 43110000 		.4byte	.LASF58
 10269 034c 07       		.byte	0x7
 10270 034d 1701     		.2byte	0x117
 10271 034f 99000000 		.4byte	0x99
 10272 0353 44       		.byte	0x44
 10273 0354 11       		.uleb128 0x11
 10274 0355 AD070000 		.4byte	.LASF59
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 233


 10275 0359 07       		.byte	0x7
 10276 035a 1801     		.2byte	0x118
 10277 035c 99000000 		.4byte	0x99
 10278 0360 48       		.byte	0x48
 10279 0361 11       		.uleb128 0x11
 10280 0362 F5070000 		.4byte	.LASF60
 10281 0366 07       		.byte	0x7
 10282 0367 1901     		.2byte	0x119
 10283 0369 99000000 		.4byte	0x99
 10284 036d 4C       		.byte	0x4c
 10285 036e 00       		.byte	0
 10286 036f 07       		.uleb128 0x7
 10287 0370 99000000 		.4byte	0x99
 10288 0374 7F030000 		.4byte	0x37f
 10289 0378 08       		.uleb128 0x8
 10290 0379 0E010000 		.4byte	0x10e
 10291 037d 01       		.byte	0x1
 10292 037e 00       		.byte	0
 10293 037f 07       		.uleb128 0x7
 10294 0380 99000000 		.4byte	0x99
 10295 0384 8F030000 		.4byte	0x38f
 10296 0388 08       		.uleb128 0x8
 10297 0389 0E010000 		.4byte	0x10e
 10298 038d 09       		.byte	0x9
 10299 038e 00       		.byte	0
 10300 038f 07       		.uleb128 0x7
 10301 0390 99000000 		.4byte	0x99
 10302 0394 9F030000 		.4byte	0x39f
 10303 0398 08       		.uleb128 0x8
 10304 0399 0E010000 		.4byte	0x10e
 10305 039d 03       		.byte	0x3
 10306 039e 00       		.byte	0
 10307 039f 10       		.uleb128 0x10
 10308 03a0 49020000 		.4byte	.LASF61
 10309 03a4 10       		.byte	0x10
 10310 03a5 07       		.byte	0x7
 10311 03a6 2001     		.2byte	0x120
 10312 03a8 2E040000 		.4byte	0x42e
 10313 03ac 12       		.uleb128 0x12
 10314 03ad 696400   		.ascii	"id\000"
 10315 03b0 07       		.byte	0x7
 10316 03b1 2101     		.2byte	0x121
 10317 03b3 81000000 		.4byte	0x81
 10318 03b7 00       		.byte	0
 10319 03b8 11       		.uleb128 0x11
 10320 03b9 D20E0000 		.4byte	.LASF62
 10321 03bd 07       		.byte	0x7
 10322 03be 2201     		.2byte	0x122
 10323 03c0 2E040000 		.4byte	0x42e
 10324 03c4 01       		.byte	0x1
 10325 03c5 11       		.uleb128 0x11
 10326 03c6 0E0F0000 		.4byte	.LASF63
 10327 03ca 07       		.byte	0x7
 10328 03cb 2301     		.2byte	0x123
 10329 03cd 2E040000 		.4byte	0x42e
 10330 03d1 04       		.byte	0x4
 10331 03d2 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 234


 10332 03d3 D8040000 		.4byte	.LASF64
 10333 03d7 07       		.byte	0x7
 10334 03d8 2401     		.2byte	0x124
 10335 03da 81000000 		.4byte	0x81
 10336 03de 07       		.byte	0x7
 10337 03df 11       		.uleb128 0x11
 10338 03e0 13030000 		.4byte	.LASF65
 10339 03e4 07       		.byte	0x7
 10340 03e5 2501     		.2byte	0x125
 10341 03e7 81000000 		.4byte	0x81
 10342 03eb 08       		.byte	0x8
 10343 03ec 11       		.uleb128 0x11
 10344 03ed 6F020000 		.4byte	.LASF66
 10345 03f1 07       		.byte	0x7
 10346 03f2 2601     		.2byte	0x126
 10347 03f4 81000000 		.4byte	0x81
 10348 03f8 09       		.byte	0x9
 10349 03f9 11       		.uleb128 0x11
 10350 03fa 1B100000 		.4byte	.LASF67
 10351 03fe 07       		.byte	0x7
 10352 03ff 2701     		.2byte	0x127
 10353 0401 81000000 		.4byte	0x81
 10354 0405 0A       		.byte	0xa
 10355 0406 11       		.uleb128 0x11
 10356 0407 AF0F0000 		.4byte	.LASF68
 10357 040b 07       		.byte	0x7
 10358 040c 2801     		.2byte	0x128
 10359 040e 81000000 		.4byte	0x81
 10360 0412 0B       		.byte	0xb
 10361 0413 11       		.uleb128 0x11
 10362 0414 880D0000 		.4byte	.LASF69
 10363 0418 07       		.byte	0x7
 10364 0419 2901     		.2byte	0x129
 10365 041b 81000000 		.4byte	0x81
 10366 041f 0C       		.byte	0xc
 10367 0420 11       		.uleb128 0x11
 10368 0421 57030000 		.4byte	.LASF70
 10369 0425 07       		.byte	0x7
 10370 0426 2A01     		.2byte	0x12a
 10371 0428 2E040000 		.4byte	0x42e
 10372 042c 0D       		.byte	0xd
 10373 042d 00       		.byte	0
 10374 042e 07       		.uleb128 0x7
 10375 042f 81000000 		.4byte	0x81
 10376 0433 3E040000 		.4byte	0x43e
 10377 0437 08       		.uleb128 0x8
 10378 0438 0E010000 		.4byte	0x10e
 10379 043c 02       		.byte	0x2
 10380 043d 00       		.byte	0
 10381 043e 10       		.uleb128 0x10
 10382 043f E1100000 		.4byte	.LASF71
 10383 0443 70       		.byte	0x70
 10384 0444 07       		.byte	0x7
 10385 0445 3101     		.2byte	0x131
 10386 0447 B8050000 		.4byte	0x5b8
 10387 044b 12       		.uleb128 0x12
 10388 044c 6B5F7000 		.ascii	"k_p\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 235


 10389 0450 07       		.byte	0x7
 10390 0451 3201     		.2byte	0x132
 10391 0453 BD000000 		.4byte	0xbd
 10392 0457 00       		.byte	0
 10393 0458 12       		.uleb128 0x12
 10394 0459 6B5F6900 		.ascii	"k_i\000"
 10395 045d 07       		.byte	0x7
 10396 045e 3301     		.2byte	0x133
 10397 0460 BD000000 		.4byte	0xbd
 10398 0464 04       		.byte	0x4
 10399 0465 12       		.uleb128 0x12
 10400 0466 6B5F6400 		.ascii	"k_d\000"
 10401 046a 07       		.byte	0x7
 10402 046b 3401     		.2byte	0x134
 10403 046d BD000000 		.4byte	0xbd
 10404 0471 08       		.byte	0x8
 10405 0472 11       		.uleb128 0x11
 10406 0473 C10C0000 		.4byte	.LASF72
 10407 0477 07       		.byte	0x7
 10408 0478 3501     		.2byte	0x135
 10409 047a BD000000 		.4byte	0xbd
 10410 047e 0C       		.byte	0xc
 10411 047f 11       		.uleb128 0x11
 10412 0480 79050000 		.4byte	.LASF73
 10413 0484 07       		.byte	0x7
 10414 0485 3601     		.2byte	0x136
 10415 0487 BD000000 		.4byte	0xbd
 10416 048b 10       		.byte	0x10
 10417 048c 11       		.uleb128 0x11
 10418 048d 61050000 		.4byte	.LASF74
 10419 0491 07       		.byte	0x7
 10420 0492 3701     		.2byte	0x137
 10421 0494 BD000000 		.4byte	0xbd
 10422 0498 14       		.byte	0x14
 10423 0499 11       		.uleb128 0x11
 10424 049a 6F0F0000 		.4byte	.LASF75
 10425 049e 07       		.byte	0x7
 10426 049f 3801     		.2byte	0x138
 10427 04a1 BD000000 		.4byte	0xbd
 10428 04a5 18       		.byte	0x18
 10429 04a6 11       		.uleb128 0x11
 10430 04a7 15060000 		.4byte	.LASF76
 10431 04ab 07       		.byte	0x7
 10432 04ac 3901     		.2byte	0x139
 10433 04ae BD000000 		.4byte	0xbd
 10434 04b2 1C       		.byte	0x1c
 10435 04b3 11       		.uleb128 0x11
 10436 04b4 A20E0000 		.4byte	.LASF77
 10437 04b8 07       		.byte	0x7
 10438 04b9 3A01     		.2byte	0x13a
 10439 04bb BD000000 		.4byte	0xbd
 10440 04bf 20       		.byte	0x20
 10441 04c0 11       		.uleb128 0x11
 10442 04c1 23060000 		.4byte	.LASF78
 10443 04c5 07       		.byte	0x7
 10444 04c6 3B01     		.2byte	0x13b
 10445 04c8 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 236


 10446 04cc 24       		.byte	0x24
 10447 04cd 11       		.uleb128 0x11
 10448 04ce 5D070000 		.4byte	.LASF79
 10449 04d2 07       		.byte	0x7
 10450 04d3 3C01     		.2byte	0x13c
 10451 04d5 BD000000 		.4byte	0xbd
 10452 04d9 28       		.byte	0x28
 10453 04da 11       		.uleb128 0x11
 10454 04db BB110000 		.4byte	.LASF80
 10455 04df 07       		.byte	0x7
 10456 04e0 3D01     		.2byte	0x13d
 10457 04e2 BD000000 		.4byte	0xbd
 10458 04e6 2C       		.byte	0x2c
 10459 04e7 11       		.uleb128 0x11
 10460 04e8 05080000 		.4byte	.LASF81
 10461 04ec 07       		.byte	0x7
 10462 04ed 3E01     		.2byte	0x13e
 10463 04ef 81000000 		.4byte	0x81
 10464 04f3 30       		.byte	0x30
 10465 04f4 11       		.uleb128 0x11
 10466 04f5 580F0000 		.4byte	.LASF82
 10467 04f9 07       		.byte	0x7
 10468 04fa 3F01     		.2byte	0x13f
 10469 04fc 81000000 		.4byte	0x81
 10470 0500 31       		.byte	0x31
 10471 0501 11       		.uleb128 0x11
 10472 0502 D30C0000 		.4byte	.LASF83
 10473 0506 07       		.byte	0x7
 10474 0507 4001     		.2byte	0x140
 10475 0509 81000000 		.4byte	0x81
 10476 050d 32       		.byte	0x32
 10477 050e 11       		.uleb128 0x11
 10478 050f FE100000 		.4byte	.LASF84
 10479 0513 07       		.byte	0x7
 10480 0514 4101     		.2byte	0x141
 10481 0516 81000000 		.4byte	0x81
 10482 051a 33       		.byte	0x33
 10483 051b 11       		.uleb128 0x11
 10484 051c FB000000 		.4byte	.LASF85
 10485 0520 07       		.byte	0x7
 10486 0521 4201     		.2byte	0x142
 10487 0523 BD000000 		.4byte	0xbd
 10488 0527 34       		.byte	0x34
 10489 0528 11       		.uleb128 0x11
 10490 0529 A9050000 		.4byte	.LASF86
 10491 052d 07       		.byte	0x7
 10492 052e 4301     		.2byte	0x143
 10493 0530 BD000000 		.4byte	0xbd
 10494 0534 38       		.byte	0x38
 10495 0535 11       		.uleb128 0x11
 10496 0536 1D0A0000 		.4byte	.LASF87
 10497 053a 07       		.byte	0x7
 10498 053b 4401     		.2byte	0x144
 10499 053d BD000000 		.4byte	0xbd
 10500 0541 3C       		.byte	0x3c
 10501 0542 11       		.uleb128 0x11
 10502 0543 15050000 		.4byte	.LASF88
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 237


 10503 0547 07       		.byte	0x7
 10504 0548 4501     		.2byte	0x145
 10505 054a BD000000 		.4byte	0xbd
 10506 054e 40       		.byte	0x40
 10507 054f 11       		.uleb128 0x11
 10508 0550 64010000 		.4byte	.LASF89
 10509 0554 07       		.byte	0x7
 10510 0555 4601     		.2byte	0x146
 10511 0557 B8050000 		.4byte	0x5b8
 10512 055b 44       		.byte	0x44
 10513 055c 11       		.uleb128 0x11
 10514 055d 65110000 		.4byte	.LASF90
 10515 0561 07       		.byte	0x7
 10516 0562 4701     		.2byte	0x147
 10517 0564 B1000000 		.4byte	0xb1
 10518 0568 5C       		.byte	0x5c
 10519 0569 11       		.uleb128 0x11
 10520 056a 71080000 		.4byte	.LASF91
 10521 056e 07       		.byte	0x7
 10522 056f 4801     		.2byte	0x148
 10523 0571 81000000 		.4byte	0x81
 10524 0575 5E       		.byte	0x5e
 10525 0576 11       		.uleb128 0x11
 10526 0577 A60A0000 		.4byte	.LASF92
 10527 057b 07       		.byte	0x7
 10528 057c 4901     		.2byte	0x149
 10529 057e 81000000 		.4byte	0x81
 10530 0582 5F       		.byte	0x5f
 10531 0583 11       		.uleb128 0x11
 10532 0584 E3040000 		.4byte	.LASF93
 10533 0588 07       		.byte	0x7
 10534 0589 4A01     		.2byte	0x14a
 10535 058b 81000000 		.4byte	0x81
 10536 058f 60       		.byte	0x60
 10537 0590 11       		.uleb128 0x11
 10538 0591 50050000 		.4byte	.LASF94
 10539 0595 07       		.byte	0x7
 10540 0596 4B01     		.2byte	0x14b
 10541 0598 81000000 		.4byte	0x81
 10542 059c 61       		.byte	0x61
 10543 059d 11       		.uleb128 0x11
 10544 059e 8C040000 		.4byte	.LASF95
 10545 05a2 07       		.byte	0x7
 10546 05a3 4C01     		.2byte	0x14c
 10547 05a5 81000000 		.4byte	0x81
 10548 05a9 62       		.byte	0x62
 10549 05aa 11       		.uleb128 0x11
 10550 05ab 57030000 		.4byte	.LASF70
 10551 05af 07       		.byte	0x7
 10552 05b0 4D01     		.2byte	0x14d
 10553 05b2 C8050000 		.4byte	0x5c8
 10554 05b6 63       		.byte	0x63
 10555 05b7 00       		.byte	0
 10556 05b8 07       		.uleb128 0x7
 10557 05b9 D5000000 		.4byte	0xd5
 10558 05bd C8050000 		.4byte	0x5c8
 10559 05c1 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 238


 10560 05c2 0E010000 		.4byte	0x10e
 10561 05c6 05       		.byte	0x5
 10562 05c7 00       		.byte	0
 10563 05c8 07       		.uleb128 0x7
 10564 05c9 81000000 		.4byte	0x81
 10565 05cd D8050000 		.4byte	0x5d8
 10566 05d1 08       		.uleb128 0x8
 10567 05d2 0E010000 		.4byte	0x10e
 10568 05d6 0C       		.byte	0xc
 10569 05d7 00       		.byte	0
 10570 05d8 10       		.uleb128 0x10
 10571 05d9 5A100000 		.4byte	.LASF96
 10572 05dd 30       		.byte	0x30
 10573 05de 07       		.byte	0x7
 10574 05df 5401     		.2byte	0x154
 10575 05e1 5B060000 		.4byte	0x65b
 10576 05e5 11       		.uleb128 0x11
 10577 05e6 D7090000 		.4byte	.LASF97
 10578 05ea 07       		.byte	0x7
 10579 05eb 5501     		.2byte	0x155
 10580 05ed 5B060000 		.4byte	0x65b
 10581 05f1 00       		.byte	0
 10582 05f2 12       		.uleb128 0x12
 10583 05f3 72657300 		.ascii	"res\000"
 10584 05f7 07       		.byte	0x7
 10585 05f8 5601     		.2byte	0x156
 10586 05fa 2E040000 		.4byte	0x42e
 10587 05fe 05       		.byte	0x5
 10588 05ff 11       		.uleb128 0x11
 10589 0600 31080000 		.4byte	.LASF98
 10590 0604 07       		.byte	0x7
 10591 0605 5701     		.2byte	0x157
 10592 0607 43020000 		.4byte	0x243
 10593 060b 08       		.byte	0x8
 10594 060c 11       		.uleb128 0x11
 10595 060d 72050000 		.4byte	.LASF99
 10596 0611 07       		.byte	0x7
 10597 0612 5801     		.2byte	0x158
 10598 0614 6B060000 		.4byte	0x66b
 10599 0618 14       		.byte	0x14
 10600 0619 11       		.uleb128 0x11
 10601 061a DA0B0000 		.4byte	.LASF100
 10602 061e 07       		.byte	0x7
 10603 061f 5901     		.2byte	0x159
 10604 0621 81000000 		.4byte	0x81
 10605 0625 20       		.byte	0x20
 10606 0626 11       		.uleb128 0x11
 10607 0627 2C020000 		.4byte	.LASF101
 10608 062b 07       		.byte	0x7
 10609 062c 5A01     		.2byte	0x15a
 10610 062e 2E040000 		.4byte	0x42e
 10611 0632 21       		.byte	0x21
 10612 0633 11       		.uleb128 0x11
 10613 0634 8B0B0000 		.4byte	.LASF102
 10614 0638 07       		.byte	0x7
 10615 0639 5B01     		.2byte	0x15b
 10616 063b A5000000 		.4byte	0xa5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 239


 10617 063f 24       		.byte	0x24
 10618 0640 11       		.uleb128 0x11
 10619 0641 AA0D0000 		.4byte	.LASF103
 10620 0645 07       		.byte	0x7
 10621 0646 5C01     		.2byte	0x15c
 10622 0648 53020000 		.4byte	0x253
 10623 064c 25       		.byte	0x25
 10624 064d 11       		.uleb128 0x11
 10625 064e 57030000 		.4byte	.LASF70
 10626 0652 07       		.byte	0x7
 10627 0653 5D01     		.2byte	0x15d
 10628 0655 7B060000 		.4byte	0x67b
 10629 0659 28       		.byte	0x28
 10630 065a 00       		.byte	0
 10631 065b 07       		.uleb128 0x7
 10632 065c 81000000 		.4byte	0x81
 10633 0660 6B060000 		.4byte	0x66b
 10634 0664 08       		.uleb128 0x8
 10635 0665 0E010000 		.4byte	0x10e
 10636 0669 04       		.byte	0x4
 10637 066a 00       		.byte	0
 10638 066b 07       		.uleb128 0x7
 10639 066c C9000000 		.4byte	0xc9
 10640 0670 7B060000 		.4byte	0x67b
 10641 0674 08       		.uleb128 0x8
 10642 0675 0E010000 		.4byte	0x10e
 10643 0679 02       		.byte	0x2
 10644 067a 00       		.byte	0
 10645 067b 07       		.uleb128 0x7
 10646 067c 81000000 		.4byte	0x81
 10647 0680 8B060000 		.4byte	0x68b
 10648 0684 08       		.uleb128 0x8
 10649 0685 0E010000 		.4byte	0x10e
 10650 0689 07       		.byte	0x7
 10651 068a 00       		.byte	0
 10652 068b 10       		.uleb128 0x10
 10653 068c DC010000 		.4byte	.LASF104
 10654 0690 10       		.byte	0x10
 10655 0691 07       		.byte	0x7
 10656 0692 6401     		.2byte	0x164
 10657 0694 DA060000 		.4byte	0x6da
 10658 0698 11       		.uleb128 0x11
 10659 0699 140B0000 		.4byte	.LASF105
 10660 069d 07       		.byte	0x7
 10661 069e 6501     		.2byte	0x165
 10662 06a0 DA060000 		.4byte	0x6da
 10663 06a4 00       		.byte	0
 10664 06a5 11       		.uleb128 0x11
 10665 06a6 57110000 		.4byte	.LASF106
 10666 06aa 07       		.byte	0x7
 10667 06ab 6601     		.2byte	0x166
 10668 06ad 6F030000 		.4byte	0x36f
 10669 06b1 04       		.byte	0x4
 10670 06b2 11       		.uleb128 0x11
 10671 06b3 BF050000 		.4byte	.LASF107
 10672 06b7 07       		.byte	0x7
 10673 06b8 6701     		.2byte	0x167
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 240


 10674 06ba EA060000 		.4byte	0x6ea
 10675 06be 0C       		.byte	0xc
 10676 06bf 11       		.uleb128 0x11
 10677 06c0 C40D0000 		.4byte	.LASF108
 10678 06c4 07       		.byte	0x7
 10679 06c5 6801     		.2byte	0x168
 10680 06c7 81000000 		.4byte	0x81
 10681 06cb 0E       		.byte	0xe
 10682 06cc 11       		.uleb128 0x11
 10683 06cd 3B040000 		.4byte	.LASF109
 10684 06d1 07       		.byte	0x7
 10685 06d2 6901     		.2byte	0x169
 10686 06d4 81000000 		.4byte	0x81
 10687 06d8 0F       		.byte	0xf
 10688 06d9 00       		.byte	0
 10689 06da 07       		.uleb128 0x7
 10690 06db 8D000000 		.4byte	0x8d
 10691 06df EA060000 		.4byte	0x6ea
 10692 06e3 08       		.uleb128 0x8
 10693 06e4 0E010000 		.4byte	0x10e
 10694 06e8 01       		.byte	0x1
 10695 06e9 00       		.byte	0
 10696 06ea 07       		.uleb128 0x7
 10697 06eb 81000000 		.4byte	0x81
 10698 06ef FA060000 		.4byte	0x6fa
 10699 06f3 08       		.uleb128 0x8
 10700 06f4 0E010000 		.4byte	0x10e
 10701 06f8 01       		.byte	0x1
 10702 06f9 00       		.byte	0
 10703 06fa 10       		.uleb128 0x10
 10704 06fb D00A0000 		.4byte	.LASF110
 10705 06ff 20       		.byte	0x20
 10706 0700 07       		.byte	0x7
 10707 0701 7001     		.2byte	0x170
 10708 0703 3C070000 		.4byte	0x73c
 10709 0707 11       		.uleb128 0x11
 10710 0708 9A020000 		.4byte	.LASF111
 10711 070c 07       		.byte	0x7
 10712 070d 7101     		.2byte	0x171
 10713 070f 81000000 		.4byte	0x81
 10714 0713 00       		.byte	0
 10715 0714 11       		.uleb128 0x11
 10716 0715 38100000 		.4byte	.LASF112
 10717 0719 07       		.byte	0x7
 10718 071a 7201     		.2byte	0x172
 10719 071c 81000000 		.4byte	0x81
 10720 0720 01       		.byte	0x1
 10721 0721 11       		.uleb128 0x11
 10722 0722 520A0000 		.4byte	.LASF113
 10723 0726 07       		.byte	0x7
 10724 0727 7301     		.2byte	0x173
 10725 0729 3C070000 		.4byte	0x73c
 10726 072d 02       		.byte	0x2
 10727 072e 11       		.uleb128 0x11
 10728 072f 57030000 		.4byte	.LASF70
 10729 0733 07       		.byte	0x7
 10730 0734 7401     		.2byte	0x174
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 241


 10731 0736 5B060000 		.4byte	0x65b
 10732 073a 1B       		.byte	0x1b
 10733 073b 00       		.byte	0
 10734 073c 07       		.uleb128 0x7
 10735 073d 81000000 		.4byte	0x81
 10736 0741 52070000 		.4byte	0x752
 10737 0745 08       		.uleb128 0x8
 10738 0746 0E010000 		.4byte	0x10e
 10739 074a 04       		.byte	0x4
 10740 074b 08       		.uleb128 0x8
 10741 074c 0E010000 		.4byte	0x10e
 10742 0750 04       		.byte	0x4
 10743 0751 00       		.byte	0
 10744 0752 10       		.uleb128 0x10
 10745 0753 B70D0000 		.4byte	.LASF114
 10746 0757 20       		.byte	0x20
 10747 0758 07       		.byte	0x7
 10748 0759 7B01     		.2byte	0x17b
 10749 075b AE070000 		.4byte	0x7ae
 10750 075f 11       		.uleb128 0x11
 10751 0760 D00B0000 		.4byte	.LASF115
 10752 0764 07       		.byte	0x7
 10753 0765 7C01     		.2byte	0x17c
 10754 0767 AE070000 		.4byte	0x7ae
 10755 076b 00       		.byte	0
 10756 076c 11       		.uleb128 0x11
 10757 076d 450F0000 		.4byte	.LASF116
 10758 0771 07       		.byte	0x7
 10759 0772 7D01     		.2byte	0x17d
 10760 0774 81000000 		.4byte	0x81
 10761 0778 06       		.byte	0x6
 10762 0779 11       		.uleb128 0x11
 10763 077a 9E000000 		.4byte	.LASF117
 10764 077e 07       		.byte	0x7
 10765 077f 7E01     		.2byte	0x17e
 10766 0781 81000000 		.4byte	0x81
 10767 0785 07       		.byte	0x7
 10768 0786 11       		.uleb128 0x11
 10769 0787 FE050000 		.4byte	.LASF118
 10770 078b 07       		.byte	0x7
 10771 078c 7F01     		.2byte	0x17f
 10772 078e BE070000 		.4byte	0x7be
 10773 0792 08       		.byte	0x8
 10774 0793 11       		.uleb128 0x11
 10775 0794 A8020000 		.4byte	.LASF119
 10776 0798 07       		.byte	0x7
 10777 0799 8001     		.2byte	0x180
 10778 079b 81000000 		.4byte	0x81
 10779 079f 14       		.byte	0x14
 10780 07a0 11       		.uleb128 0x11
 10781 07a1 57030000 		.4byte	.LASF70
 10782 07a5 07       		.byte	0x7
 10783 07a6 8101     		.2byte	0x181
 10784 07a8 CE070000 		.4byte	0x7ce
 10785 07ac 15       		.byte	0x15
 10786 07ad 00       		.byte	0
 10787 07ae 07       		.uleb128 0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 242


 10788 07af 81000000 		.4byte	0x81
 10789 07b3 BE070000 		.4byte	0x7be
 10790 07b7 08       		.uleb128 0x8
 10791 07b8 0E010000 		.4byte	0x10e
 10792 07bc 05       		.byte	0x5
 10793 07bd 00       		.byte	0
 10794 07be 07       		.uleb128 0x7
 10795 07bf 81000000 		.4byte	0x81
 10796 07c3 CE070000 		.4byte	0x7ce
 10797 07c7 08       		.uleb128 0x8
 10798 07c8 0E010000 		.4byte	0x10e
 10799 07cc 0B       		.byte	0xb
 10800 07cd 00       		.byte	0
 10801 07ce 07       		.uleb128 0x7
 10802 07cf 81000000 		.4byte	0x81
 10803 07d3 DE070000 		.4byte	0x7de
 10804 07d7 08       		.uleb128 0x8
 10805 07d8 0E010000 		.4byte	0x10e
 10806 07dc 0A       		.byte	0xa
 10807 07dd 00       		.byte	0
 10808 07de 10       		.uleb128 0x10
 10809 07df A20D0000 		.4byte	.LASF120
 10810 07e3 20       		.byte	0x20
 10811 07e4 07       		.byte	0x7
 10812 07e5 8801     		.2byte	0x188
 10813 07e7 13080000 		.4byte	0x813
 10814 07eb 11       		.uleb128 0x11
 10815 07ec 0D040000 		.4byte	.LASF121
 10816 07f0 07       		.byte	0x7
 10817 07f1 8901     		.2byte	0x189
 10818 07f3 15010000 		.4byte	0x115
 10819 07f7 00       		.byte	0
 10820 07f8 11       		.uleb128 0x11
 10821 07f9 30030000 		.4byte	.LASF122
 10822 07fd 07       		.byte	0x7
 10823 07fe 8A01     		.2byte	0x18a
 10824 0800 8B060000 		.4byte	0x68b
 10825 0804 08       		.byte	0x8
 10826 0805 11       		.uleb128 0x11
 10827 0806 57030000 		.4byte	.LASF70
 10828 080a 07       		.byte	0x7
 10829 080b 8B01     		.2byte	0x18b
 10830 080d 7B060000 		.4byte	0x67b
 10831 0811 18       		.byte	0x18
 10832 0812 00       		.byte	0
 10833 0813 10       		.uleb128 0x10
 10834 0814 40090000 		.4byte	.LASF123
 10835 0818 10       		.byte	0x10
 10836 0819 07       		.byte	0x7
 10837 081a 9201     		.2byte	0x192
 10838 081c 62080000 		.4byte	0x862
 10839 0820 11       		.uleb128 0x11
 10840 0821 58080000 		.4byte	.LASF124
 10841 0825 07       		.byte	0x7
 10842 0826 9301     		.2byte	0x193
 10843 0828 BD000000 		.4byte	0xbd
 10844 082c 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 243


 10845 082d 11       		.uleb128 0x11
 10846 082e 9D110000 		.4byte	.LASF125
 10847 0832 07       		.byte	0x7
 10848 0833 9401     		.2byte	0x194
 10849 0835 BD000000 		.4byte	0xbd
 10850 0839 04       		.byte	0x4
 10851 083a 11       		.uleb128 0x11
 10852 083b C9050000 		.4byte	.LASF126
 10853 083f 07       		.byte	0x7
 10854 0840 9501     		.2byte	0x195
 10855 0842 BD000000 		.4byte	0xbd
 10856 0846 08       		.byte	0x8
 10857 0847 11       		.uleb128 0x11
 10858 0848 33070000 		.4byte	.LASF127
 10859 084c 07       		.byte	0x7
 10860 084d 9601     		.2byte	0x196
 10861 084f 81000000 		.4byte	0x81
 10862 0853 0C       		.byte	0xc
 10863 0854 11       		.uleb128 0x11
 10864 0855 57030000 		.4byte	.LASF70
 10865 0859 07       		.byte	0x7
 10866 085a 9701     		.2byte	0x197
 10867 085c 2E040000 		.4byte	0x42e
 10868 0860 0D       		.byte	0xd
 10869 0861 00       		.byte	0
 10870 0862 10       		.uleb128 0x10
 10871 0863 780E0000 		.4byte	.LASF128
 10872 0867 10       		.byte	0x10
 10873 0868 07       		.byte	0x7
 10874 0869 9E01     		.2byte	0x19e
 10875 086b A4080000 		.4byte	0x8a4
 10876 086f 11       		.uleb128 0x11
 10877 0870 46070000 		.4byte	.LASF129
 10878 0874 07       		.byte	0x7
 10879 0875 9F01     		.2byte	0x19f
 10880 0877 8D000000 		.4byte	0x8d
 10881 087b 00       		.byte	0
 10882 087c 11       		.uleb128 0x11
 10883 087d FF0D0000 		.4byte	.LASF130
 10884 0881 07       		.byte	0x7
 10885 0882 A001     		.2byte	0x1a0
 10886 0884 B1000000 		.4byte	0xb1
 10887 0888 02       		.byte	0x2
 10888 0889 11       		.uleb128 0x11
 10889 088a C8070000 		.4byte	.LASF131
 10890 088e 07       		.byte	0x7
 10891 088f A101     		.2byte	0x1a1
 10892 0891 DA060000 		.4byte	0x6da
 10893 0895 04       		.byte	0x4
 10894 0896 11       		.uleb128 0x11
 10895 0897 57030000 		.4byte	.LASF70
 10896 089b 07       		.byte	0x7
 10897 089c A201     		.2byte	0x1a2
 10898 089e 7B060000 		.4byte	0x67b
 10899 08a2 08       		.byte	0x8
 10900 08a3 00       		.byte	0
 10901 08a4 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 244


 10902 08a5 87010000 		.4byte	.LASF132
 10903 08a9 10       		.byte	0x10
 10904 08aa 07       		.byte	0x7
 10905 08ab A901     		.2byte	0x1a9
 10906 08ad D9080000 		.4byte	0x8d9
 10907 08b1 11       		.uleb128 0x11
 10908 08b2 4D0D0000 		.4byte	.LASF133
 10909 08b6 07       		.byte	0x7
 10910 08b7 AA01     		.2byte	0x1aa
 10911 08b9 81000000 		.4byte	0x81
 10912 08bd 00       		.byte	0
 10913 08be 11       		.uleb128 0x11
 10914 08bf 3E0A0000 		.4byte	.LASF134
 10915 08c3 07       		.byte	0x7
 10916 08c4 AB01     		.2byte	0x1ab
 10917 08c6 81000000 		.4byte	0x81
 10918 08ca 01       		.byte	0x1
 10919 08cb 11       		.uleb128 0x11
 10920 08cc 57030000 		.4byte	.LASF70
 10921 08d0 07       		.byte	0x7
 10922 08d1 AC01     		.2byte	0x1ac
 10923 08d3 D9080000 		.4byte	0x8d9
 10924 08d7 02       		.byte	0x2
 10925 08d8 00       		.byte	0
 10926 08d9 07       		.uleb128 0x7
 10927 08da 81000000 		.4byte	0x81
 10928 08de E9080000 		.4byte	0x8e9
 10929 08e2 08       		.uleb128 0x8
 10930 08e3 0E010000 		.4byte	0x10e
 10931 08e7 0D       		.byte	0xd
 10932 08e8 00       		.byte	0
 10933 08e9 10       		.uleb128 0x10
 10934 08ea 59090000 		.4byte	.LASF135
 10935 08ee 10       		.byte	0x10
 10936 08ef 07       		.byte	0x7
 10937 08f0 B301     		.2byte	0x1b3
 10938 08f2 2B090000 		.4byte	0x92b
 10939 08f6 11       		.uleb128 0x11
 10940 08f7 70100000 		.4byte	.LASF136
 10941 08fb 07       		.byte	0x7
 10942 08fc B401     		.2byte	0x1b4
 10943 08fe BD000000 		.4byte	0xbd
 10944 0902 00       		.byte	0
 10945 0903 11       		.uleb128 0x11
 10946 0904 1E070000 		.4byte	.LASF137
 10947 0908 07       		.byte	0x7
 10948 0909 B501     		.2byte	0x1b5
 10949 090b D5000000 		.4byte	0xd5
 10950 090f 04       		.byte	0x4
 10951 0910 11       		.uleb128 0x11
 10952 0911 050D0000 		.4byte	.LASF138
 10953 0915 07       		.byte	0x7
 10954 0916 B601     		.2byte	0x1b6
 10955 0918 D5000000 		.4byte	0xd5
 10956 091c 08       		.byte	0x8
 10957 091d 11       		.uleb128 0x11
 10958 091e 57030000 		.4byte	.LASF70
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 245


 10959 0922 07       		.byte	0x7
 10960 0923 B701     		.2byte	0x1b7
 10961 0925 2B090000 		.4byte	0x92b
 10962 0929 0C       		.byte	0xc
 10963 092a 00       		.byte	0
 10964 092b 07       		.uleb128 0x7
 10965 092c 81000000 		.4byte	0x81
 10966 0930 3B090000 		.4byte	0x93b
 10967 0934 08       		.uleb128 0x8
 10968 0935 0E010000 		.4byte	0x10e
 10969 0939 03       		.byte	0x3
 10970 093a 00       		.byte	0
 10971 093b 10       		.uleb128 0x10
 10972 093c 11020000 		.4byte	.LASF139
 10973 0940 12       		.byte	0x12
 10974 0941 07       		.byte	0x7
 10975 0942 BE01     		.2byte	0x1be
 10976 0944 7D090000 		.4byte	0x97d
 10977 0948 11       		.uleb128 0x11
 10978 0949 86110000 		.4byte	.LASF140
 10979 094d 07       		.byte	0x7
 10980 094e BF01     		.2byte	0x1bf
 10981 0950 81000000 		.4byte	0x81
 10982 0954 00       		.byte	0
 10983 0955 11       		.uleb128 0x11
 10984 0956 25100000 		.4byte	.LASF141
 10985 095a 07       		.byte	0x7
 10986 095b C001     		.2byte	0x1c0
 10987 095d DA060000 		.4byte	0x6da
 10988 0961 02       		.byte	0x2
 10989 0962 11       		.uleb128 0x11
 10990 0963 6A000000 		.4byte	.LASF142
 10991 0967 07       		.byte	0x7
 10992 0968 C101     		.2byte	0x1c1
 10993 096a 81000000 		.4byte	0x81
 10994 096e 06       		.byte	0x6
 10995 096f 11       		.uleb128 0x11
 10996 0970 57030000 		.4byte	.LASF70
 10997 0974 07       		.byte	0x7
 10998 0975 C201     		.2byte	0x1c2
 10999 0977 7D090000 		.4byte	0x97d
 11000 097b 07       		.byte	0x7
 11001 097c 00       		.byte	0
 11002 097d 07       		.uleb128 0x7
 11003 097e 81000000 		.4byte	0x81
 11004 0982 8D090000 		.4byte	0x98d
 11005 0986 08       		.uleb128 0x8
 11006 0987 0E010000 		.4byte	0x10e
 11007 098b 09       		.byte	0x9
 11008 098c 00       		.byte	0
 11009 098d 13       		.uleb128 0x13
 11010 098e 8B100000 		.4byte	.LASF143
 11011 0992 F402     		.2byte	0x2f4
 11012 0994 07       		.byte	0x7
 11013 0995 CB01     		.2byte	0x1cb
 11014 0997 720A0000 		.4byte	0xa72
 11015 099b 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 246


 11016 099c A10A0000 		.4byte	.LASF144
 11017 09a0 07       		.byte	0x7
 11018 09a1 CD01     		.2byte	0x1cd
 11019 09a3 81000000 		.4byte	0x81
 11020 09a7 00       		.byte	0
 11021 09a8 11       		.uleb128 0x11
 11022 09a9 57030000 		.4byte	.LASF70
 11023 09ad 07       		.byte	0x7
 11024 09ae CE01     		.2byte	0x1ce
 11025 09b0 720A0000 		.4byte	0xa72
 11026 09b4 01       		.byte	0x1
 11027 09b5 12       		.uleb128 0x12
 11028 09b6 636E7400 		.ascii	"cnt\000"
 11029 09ba 07       		.byte	0x7
 11030 09bb CF01     		.2byte	0x1cf
 11031 09bd 06030000 		.4byte	0x306
 11032 09c1 10       		.byte	0x10
 11033 09c2 11       		.uleb128 0x11
 11034 09c3 EA020000 		.4byte	.LASF145
 11035 09c7 07       		.byte	0x7
 11036 09c8 D001     		.2byte	0x1d0
 11037 09ca 820A0000 		.4byte	0xa82
 11038 09ce 60       		.byte	0x60
 11039 09cf 12       		.uleb128 0x12
 11040 09d0 64657600 		.ascii	"dev\000"
 11041 09d4 07       		.byte	0x7
 11042 09d5 D101     		.2byte	0x1d1
 11043 09d7 9F030000 		.4byte	0x39f
 11044 09db A0       		.byte	0xa0
 11045 09dc 11       		.uleb128 0x11
 11046 09dd C00E0000 		.4byte	.LASF146
 11047 09e1 07       		.byte	0x7
 11048 09e2 D201     		.2byte	0x1d2
 11049 09e4 920A0000 		.4byte	0xa92
 11050 09e8 B0       		.byte	0xb0
 11051 09e9 14       		.uleb128 0x14
 11052 09ea 656E6300 		.ascii	"enc\000"
 11053 09ee 07       		.byte	0x7
 11054 09ef D301     		.2byte	0x1d3
 11055 09f1 A20A0000 		.4byte	0xaa2
 11056 09f5 9001     		.2byte	0x190
 11057 09f7 14       		.uleb128 0x14
 11058 09f8 656D6700 		.ascii	"emg\000"
 11059 09fc 07       		.byte	0x7
 11060 09fd D401     		.2byte	0x1d4
 11061 09ff 8B060000 		.4byte	0x68b
 11062 0a03 F001     		.2byte	0x1f0
 11063 0a05 14       		.uleb128 0x14
 11064 0a06 696D7500 		.ascii	"imu\000"
 11065 0a0a 07       		.byte	0x7
 11066 0a0b D501     		.2byte	0x1d5
 11067 0a0d FA060000 		.4byte	0x6fa
 11068 0a11 0002     		.2byte	0x200
 11069 0a13 14       		.uleb128 0x14
 11070 0a14 65787000 		.ascii	"exp\000"
 11071 0a18 07       		.byte	0x7
 11072 0a19 D601     		.2byte	0x1d6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 247


 11073 0a1b 52070000 		.4byte	0x752
 11074 0a1f 2002     		.2byte	0x220
 11075 0a21 15       		.uleb128 0x15
 11076 0a22 B9000000 		.4byte	.LASF147
 11077 0a26 07       		.byte	0x7
 11078 0a27 D701     		.2byte	0x1d7
 11079 0a29 B20A0000 		.4byte	0xab2
 11080 0a2d 4002     		.2byte	0x240
 11081 0a2f 14       		.uleb128 0x14
 11082 0a30 534800   		.ascii	"SH\000"
 11083 0a33 07       		.byte	0x7
 11084 0a34 D901     		.2byte	0x1d9
 11085 0a36 13080000 		.4byte	0x813
 11086 0a3a A002     		.2byte	0x2a0
 11087 0a3c 15       		.uleb128 0x15
 11088 0a3d F2000000 		.4byte	.LASF148
 11089 0a41 07       		.byte	0x7
 11090 0a42 DA01     		.2byte	0x1da
 11091 0a44 62080000 		.4byte	0x862
 11092 0a48 B002     		.2byte	0x2b0
 11093 0a4a 14       		.uleb128 0x14
 11094 0a4b 4D5300   		.ascii	"MS\000"
 11095 0a4e 07       		.byte	0x7
 11096 0a4f DB01     		.2byte	0x1db
 11097 0a51 A4080000 		.4byte	0x8a4
 11098 0a55 C002     		.2byte	0x2c0
 11099 0a57 14       		.uleb128 0x14
 11100 0a58 464200   		.ascii	"FB\000"
 11101 0a5b 07       		.byte	0x7
 11102 0a5c DC01     		.2byte	0x1dc
 11103 0a5e E9080000 		.4byte	0x8e9
 11104 0a62 D002     		.2byte	0x2d0
 11105 0a64 14       		.uleb128 0x14
 11106 0a65 575200   		.ascii	"WR\000"
 11107 0a68 07       		.byte	0x7
 11108 0a69 DD01     		.2byte	0x1dd
 11109 0a6b 3B090000 		.4byte	0x93b
 11110 0a6f E002     		.2byte	0x2e0
 11111 0a71 00       		.byte	0
 11112 0a72 07       		.uleb128 0x7
 11113 0a73 81000000 		.4byte	0x81
 11114 0a77 820A0000 		.4byte	0xa82
 11115 0a7b 08       		.uleb128 0x8
 11116 0a7c 0E010000 		.4byte	0x10e
 11117 0a80 0E       		.byte	0xe
 11118 0a81 00       		.byte	0
 11119 0a82 07       		.uleb128 0x7
 11120 0a83 81000000 		.4byte	0x81
 11121 0a87 920A0000 		.4byte	0xa92
 11122 0a8b 08       		.uleb128 0x8
 11123 0a8c 0E010000 		.4byte	0x10e
 11124 0a90 3F       		.byte	0x3f
 11125 0a91 00       		.byte	0
 11126 0a92 07       		.uleb128 0x7
 11127 0a93 3E040000 		.4byte	0x43e
 11128 0a97 A20A0000 		.4byte	0xaa2
 11129 0a9b 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 248


 11130 0a9c 0E010000 		.4byte	0x10e
 11131 0aa0 01       		.byte	0x1
 11132 0aa1 00       		.byte	0
 11133 0aa2 07       		.uleb128 0x7
 11134 0aa3 D8050000 		.4byte	0x5d8
 11135 0aa7 B20A0000 		.4byte	0xab2
 11136 0aab 08       		.uleb128 0x8
 11137 0aac 0E010000 		.4byte	0x10e
 11138 0ab0 01       		.byte	0x1
 11139 0ab1 00       		.byte	0
 11140 0ab2 07       		.uleb128 0x7
 11141 0ab3 DE070000 		.4byte	0x7de
 11142 0ab7 C20A0000 		.4byte	0xac2
 11143 0abb 08       		.uleb128 0x8
 11144 0abc 0E010000 		.4byte	0x10e
 11145 0ac0 02       		.byte	0x2
 11146 0ac1 00       		.byte	0
 11147 0ac2 10       		.uleb128 0x10
 11148 0ac3 6F0C0000 		.4byte	.LASF149
 11149 0ac7 28       		.byte	0x28
 11150 0ac8 07       		.byte	0x7
 11151 0ac9 E801     		.2byte	0x1e8
 11152 0acb 1E0B0000 		.4byte	0xb1e
 11153 0acf 11       		.uleb128 0x11
 11154 0ad0 FD040000 		.4byte	.LASF150
 11155 0ad4 07       		.byte	0x7
 11156 0ad5 E901     		.2byte	0x1e9
 11157 0ad7 81000000 		.4byte	0x81
 11158 0adb 00       		.byte	0
 11159 0adc 11       		.uleb128 0x11
 11160 0add 64030000 		.4byte	.LASF151
 11161 0ae1 07       		.byte	0x7
 11162 0ae2 EA01     		.2byte	0x1ea
 11163 0ae4 1E0B0000 		.4byte	0xb1e
 11164 0ae8 02       		.byte	0x2
 11165 0ae9 11       		.uleb128 0x11
 11166 0aea C50B0000 		.4byte	.LASF152
 11167 0aee 07       		.byte	0x7
 11168 0aef EB01     		.2byte	0x1eb
 11169 0af1 1E0B0000 		.4byte	0xb1e
 11170 0af5 08       		.byte	0x8
 11171 0af6 11       		.uleb128 0x11
 11172 0af7 7B0C0000 		.4byte	.LASF153
 11173 0afb 07       		.byte	0x7
 11174 0afc EC01     		.2byte	0x1ec
 11175 0afe 1E0B0000 		.4byte	0xb1e
 11176 0b02 0E       		.byte	0xe
 11177 0b03 11       		.uleb128 0x11
 11178 0b04 4D080000 		.4byte	.LASF154
 11179 0b08 07       		.byte	0x7
 11180 0b09 ED01     		.2byte	0x1ed
 11181 0b0b 2E0B0000 		.4byte	0xb2e
 11182 0b0f 14       		.byte	0x14
 11183 0b10 11       		.uleb128 0x11
 11184 0b11 FE010000 		.4byte	.LASF155
 11185 0b15 07       		.byte	0x7
 11186 0b16 EE01     		.2byte	0x1ee
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 249


 11187 0b18 B1000000 		.4byte	0xb1
 11188 0b1c 24       		.byte	0x24
 11189 0b1d 00       		.byte	0
 11190 0b1e 07       		.uleb128 0x7
 11191 0b1f B1000000 		.4byte	0xb1
 11192 0b23 2E0B0000 		.4byte	0xb2e
 11193 0b27 08       		.uleb128 0x8
 11194 0b28 0E010000 		.4byte	0x10e
 11195 0b2c 02       		.byte	0x2
 11196 0b2d 00       		.byte	0
 11197 0b2e 07       		.uleb128 0x7
 11198 0b2f D5000000 		.4byte	0xd5
 11199 0b33 3E0B0000 		.4byte	0xb3e
 11200 0b37 08       		.uleb128 0x8
 11201 0b38 0E010000 		.4byte	0x10e
 11202 0b3c 03       		.byte	0x3
 11203 0b3d 00       		.byte	0
 11204 0b3e 10       		.uleb128 0x10
 11205 0b3f A8110000 		.4byte	.LASF156
 11206 0b43 08       		.byte	0x8
 11207 0b44 07       		.byte	0x7
 11208 0b45 F501     		.2byte	0x1f5
 11209 0b47 660B0000 		.4byte	0xb66
 11210 0b4b 11       		.uleb128 0x11
 11211 0b4c B5050000 		.4byte	.LASF157
 11212 0b50 07       		.byte	0x7
 11213 0b51 F601     		.2byte	0x1f6
 11214 0b53 BD000000 		.4byte	0xbd
 11215 0b57 00       		.byte	0
 11216 0b58 11       		.uleb128 0x11
 11217 0b59 44020000 		.4byte	.LASF158
 11218 0b5d 07       		.byte	0x7
 11219 0b5e F701     		.2byte	0x1f7
 11220 0b60 BD000000 		.4byte	0xbd
 11221 0b64 04       		.byte	0x4
 11222 0b65 00       		.byte	0
 11223 0b66 10       		.uleb128 0x10
 11224 0b67 1E040000 		.4byte	.LASF159
 11225 0b6b 06       		.byte	0x6
 11226 0b6c 07       		.byte	0x7
 11227 0b6d FE01     		.2byte	0x1fe
 11228 0b6f A80B0000 		.4byte	0xba8
 11229 0b73 11       		.uleb128 0x11
 11230 0b74 89070000 		.4byte	.LASF160
 11231 0b78 07       		.byte	0x7
 11232 0b79 FF01     		.2byte	0x1ff
 11233 0b7b 81000000 		.4byte	0x81
 11234 0b7f 00       		.byte	0
 11235 0b80 11       		.uleb128 0x11
 11236 0b81 C4110000 		.4byte	.LASF161
 11237 0b85 07       		.byte	0x7
 11238 0b86 0002     		.2byte	0x200
 11239 0b88 81000000 		.4byte	0x81
 11240 0b8c 01       		.byte	0x1
 11241 0b8d 11       		.uleb128 0x11
 11242 0b8e 42060000 		.4byte	.LASF162
 11243 0b92 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 250


 11244 0b93 0102     		.2byte	0x201
 11245 0b95 B1000000 		.4byte	0xb1
 11246 0b99 02       		.byte	0x2
 11247 0b9a 11       		.uleb128 0x11
 11248 0b9b 110A0000 		.4byte	.LASF163
 11249 0b9f 07       		.byte	0x7
 11250 0ba0 0202     		.2byte	0x202
 11251 0ba2 B1000000 		.4byte	0xb1
 11252 0ba6 04       		.byte	0x4
 11253 0ba7 00       		.byte	0
 11254 0ba8 16       		.uleb128 0x16
 11255 0ba9 01       		.byte	0x1
 11256 0baa 2C000000 		.4byte	0x2c
 11257 0bae 07       		.byte	0x7
 11258 0baf 0602     		.2byte	0x206
 11259 0bb1 DA0B0000 		.4byte	0xbda
 11260 0bb5 0A       		.uleb128 0xa
 11261 0bb6 D2050000 		.4byte	.LASF164
 11262 0bba 00       		.byte	0
 11263 0bbb 0A       		.uleb128 0xa
 11264 0bbc 470D0000 		.4byte	.LASF165
 11265 0bc0 01       		.byte	0x1
 11266 0bc1 0A       		.uleb128 0xa
 11267 0bc2 5E0B0000 		.4byte	.LASF166
 11268 0bc6 02       		.byte	0x2
 11269 0bc7 0A       		.uleb128 0xa
 11270 0bc8 8D020000 		.4byte	.LASF167
 11271 0bcc 03       		.byte	0x3
 11272 0bcd 0A       		.uleb128 0xa
 11273 0bce 470A0000 		.4byte	.LASF168
 11274 0bd2 04       		.byte	0x4
 11275 0bd3 0A       		.uleb128 0xa
 11276 0bd4 E50C0000 		.4byte	.LASF169
 11277 0bd8 05       		.byte	0x5
 11278 0bd9 00       		.byte	0
 11279 0bda 05       		.uleb128 0x5
 11280 0bdb 67050000 		.4byte	.LASF170
 11281 0bdf 07       		.byte	0x7
 11282 0be0 0E02     		.2byte	0x20e
 11283 0be2 A80B0000 		.4byte	0xba8
 11284 0be6 16       		.uleb128 0x16
 11285 0be7 01       		.byte	0x1
 11286 0be8 2C000000 		.4byte	0x2c
 11287 0bec 07       		.byte	0x7
 11288 0bed 1002     		.2byte	0x210
 11289 0bef 120C0000 		.4byte	0xc12
 11290 0bf3 0A       		.uleb128 0xa
 11291 0bf4 F1010000 		.4byte	.LASF171
 11292 0bf8 00       		.byte	0
 11293 0bf9 0A       		.uleb128 0xa
 11294 0bfa BB070000 		.4byte	.LASF172
 11295 0bfe 01       		.byte	0x1
 11296 0bff 0A       		.uleb128 0xa
 11297 0c00 66080000 		.4byte	.LASF173
 11298 0c04 02       		.byte	0x2
 11299 0c05 0A       		.uleb128 0xa
 11300 0c06 CB030000 		.4byte	.LASF174
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 251


 11301 0c0a 03       		.byte	0x3
 11302 0c0b 0A       		.uleb128 0xa
 11303 0c0c 81110000 		.4byte	.LASF175
 11304 0c10 04       		.byte	0x4
 11305 0c11 00       		.byte	0
 11306 0c12 05       		.uleb128 0x5
 11307 0c13 310E0000 		.4byte	.LASF176
 11308 0c17 07       		.byte	0x7
 11309 0c18 1702     		.2byte	0x217
 11310 0c1a E60B0000 		.4byte	0xbe6
 11311 0c1e 17       		.uleb128 0x17
 11312 0c1f 90050000 		.4byte	.LASF177
 11313 0c23 01       		.byte	0x1
 11314 0c24 62       		.byte	0x62
 11315 0c25 00000000 		.4byte	.LFB64
 11316 0c29 18000000 		.4byte	.LFE64-.LFB64
 11317 0c2d 01       		.uleb128 0x1
 11318 0c2e 9C       		.byte	0x9c
 11319 0c2f 17       		.uleb128 0x17
 11320 0c30 08100000 		.4byte	.LASF178
 11321 0c34 01       		.byte	0x1
 11322 0c35 6D       		.byte	0x6d
 11323 0c36 00000000 		.4byte	.LFB65
 11324 0c3a 20000000 		.4byte	.LFE65-.LFB65
 11325 0c3e 01       		.uleb128 0x1
 11326 0c3f 9C       		.byte	0x9c
 11327 0c40 18       		.uleb128 0x18
 11328 0c41 C5090000 		.4byte	.LASF210
 11329 0c45 01       		.byte	0x1
 11330 0c46 86       		.byte	0x86
 11331 0c47 00000000 		.4byte	.LFB66
 11332 0c4b F4010000 		.4byte	.LFE66-.LFB66
 11333 0c4f 01       		.uleb128 0x1
 11334 0c50 9C       		.byte	0x9c
 11335 0c51 D50C0000 		.4byte	0xcd5
 11336 0c55 19       		.uleb128 0x19
 11337 0c56 1F010000 		.4byte	.LASF179
 11338 0c5a 01       		.byte	0x1
 11339 0c5b 8B       		.byte	0x8b
 11340 0c5c 81000000 		.4byte	0x81
 11341 0c60 05       		.uleb128 0x5
 11342 0c61 03       		.byte	0x3
 11343 0c62 00000000 		.4byte	state.10446
 11344 0c66 19       		.uleb128 0x19
 11345 0c67 67060000 		.4byte	.LASF180
 11346 0c6b 01       		.byte	0x1
 11347 0c6c 8E       		.byte	0x8e
 11348 0c6d 81000000 		.4byte	0x81
 11349 0c71 05       		.uleb128 0x5
 11350 0c72 03       		.byte	0x3
 11351 0c73 08000000 		.4byte	data_packet_index.10447
 11352 0c77 19       		.uleb128 0x19
 11353 0c78 AE0C0000 		.4byte	.LASF181
 11354 0c7c 01       		.byte	0x1
 11355 0c7d 8F       		.byte	0x8f
 11356 0c7e 81000000 		.4byte	0x81
 11357 0c82 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 252


 11358 0c83 03       		.byte	0x3
 11359 0c84 07000000 		.4byte	data_packet_length.10448
 11360 0c88 19       		.uleb128 0x19
 11361 0c89 79060000 		.4byte	.LASF182
 11362 0c8d 01       		.byte	0x1
 11363 0c8e 90       		.byte	0x90
 11364 0c8f F6020000 		.4byte	0x2f6
 11365 0c93 05       		.uleb128 0x5
 11366 0c94 03       		.byte	0x3
 11367 0c95 0C000000 		.4byte	data_packet_buffer.10449
 11368 0c99 19       		.uleb128 0x19
 11369 0c9a E30A0000 		.4byte	.LASF183
 11370 0c9e 01       		.byte	0x1
 11371 0c9f 91       		.byte	0x91
 11372 0ca0 2E040000 		.4byte	0x42e
 11373 0ca4 05       		.uleb128 0x5
 11374 0ca5 03       		.byte	0x3
 11375 0ca6 04000000 		.4byte	rx_queue.10450
 11376 0caa 19       		.uleb128 0x19
 11377 0cab B6010000 		.4byte	.LASF184
 11378 0caf 01       		.byte	0x1
 11379 0cb0 94       		.byte	0x94
 11380 0cb1 81000000 		.4byte	0x81
 11381 0cb5 02       		.uleb128 0x2
 11382 0cb6 91       		.byte	0x91
 11383 0cb7 75       		.sleb128 -11
 11384 0cb8 19       		.uleb128 0x19
 11385 0cb9 2C060000 		.4byte	.LASF185
 11386 0cbd 01       		.byte	0x1
 11387 0cbe 95       		.byte	0x95
 11388 0cbf 81000000 		.4byte	0x81
 11389 0cc3 02       		.uleb128 0x2
 11390 0cc4 91       		.byte	0x91
 11391 0cc5 77       		.sleb128 -9
 11392 0cc6 19       		.uleb128 0x19
 11393 0cc7 66070000 		.4byte	.LASF186
 11394 0ccb 01       		.byte	0x1
 11395 0ccc 96       		.byte	0x96
 11396 0ccd 81000000 		.4byte	0x81
 11397 0cd1 02       		.uleb128 0x2
 11398 0cd2 91       		.byte	0x91
 11399 0cd3 76       		.sleb128 -10
 11400 0cd4 00       		.byte	0
 11401 0cd5 1A       		.uleb128 0x1a
 11402 0cd6 E00E0000 		.4byte	.LASF193
 11403 0cda 01       		.byte	0x1
 11404 0cdb 0C01     		.2byte	0x10c
 11405 0cdd 00000000 		.4byte	.LFB67
 11406 0ce1 24080000 		.4byte	.LFE67-.LFB67
 11407 0ce5 01       		.uleb128 0x1
 11408 0ce6 9C       		.byte	0x9c
 11409 0ce7 740D0000 		.4byte	0xd74
 11410 0ceb 1B       		.uleb128 0x1b
 11411 0cec A3060000 		.4byte	.LASF187
 11412 0cf0 01       		.byte	0x1
 11413 0cf1 0E01     		.2byte	0x10e
 11414 0cf3 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 253


 11415 0cf7 05       		.uleb128 0x5
 11416 0cf8 03       		.byte	0x3
 11417 0cf9 00000000 		.4byte	counter_calibration.10466
 11418 0cfd 1B       		.uleb128 0x1b
 11419 0cfe 190C0000 		.4byte	.LASF188
 11420 0d02 01       		.byte	0x1
 11421 0d03 0F01     		.2byte	0x10f
 11422 0d05 8D000000 		.4byte	0x8d
 11423 0d09 05       		.uleb128 0x5
 11424 0d0a 03       		.byte	0x3
 11425 0d0b 02000000 		.4byte	counter_tension_func.10467
 11426 0d0f 1B       		.uleb128 0x1b
 11427 0d10 CD010000 		.4byte	.LASF189
 11428 0d14 01       		.byte	0x1
 11429 0d15 1001     		.2byte	0x110
 11430 0d17 740D0000 		.4byte	0xd74
 11431 0d1b 03       		.uleb128 0x3
 11432 0d1c 91       		.byte	0x91
 11433 0d1d A86C     		.sleb128 -2520
 11434 0d1f 1B       		.uleb128 0x1b
 11435 0d20 FC0B0000 		.4byte	.LASF190
 11436 0d24 01       		.byte	0x1
 11437 0d25 1201     		.2byte	0x112
 11438 0d27 81000000 		.4byte	0x81
 11439 0d2b 02       		.uleb128 0x2
 11440 0d2c 91       		.byte	0x91
 11441 0d2d 6E       		.sleb128 -18
 11442 0d2e 1B       		.uleb128 0x1b
 11443 0d2f 82090000 		.4byte	.LASF191
 11444 0d33 01       		.byte	0x1
 11445 0d34 1301     		.2byte	0x113
 11446 0d36 81000000 		.4byte	0x81
 11447 0d3a 02       		.uleb128 0x2
 11448 0d3b 91       		.byte	0x91
 11449 0d3c 6D       		.sleb128 -19
 11450 0d3d 1C       		.uleb128 0x1c
 11451 0d3e 90010000 		.4byte	.LBB2
 11452 0d42 32010000 		.4byte	.LBE2-.LBB2
 11453 0d46 580D0000 		.4byte	0xd58
 11454 0d4a 1D       		.uleb128 0x1d
 11455 0d4b 6900     		.ascii	"i\000"
 11456 0d4d 01       		.byte	0x1
 11457 0d4e 4E01     		.2byte	0x14e
 11458 0d50 81000000 		.4byte	0x81
 11459 0d54 02       		.uleb128 0x2
 11460 0d55 91       		.byte	0x91
 11461 0d56 6F       		.sleb128 -17
 11462 0d57 00       		.byte	0
 11463 0d58 1E       		.uleb128 0x1e
 11464 0d59 56060000 		.4byte	.LBB3
 11465 0d5d 50000000 		.4byte	.LBE3-.LBB3
 11466 0d61 1B       		.uleb128 0x1b
 11467 0d62 F8020000 		.4byte	.LASF192
 11468 0d66 01       		.byte	0x1
 11469 0d67 3D02     		.2byte	0x23d
 11470 0d69 850D0000 		.4byte	0xd85
 11471 0d6d 04       		.uleb128 0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 254


 11472 0d6e 91       		.byte	0x91
 11473 0d6f 90F77E   		.sleb128 -17520
 11474 0d72 00       		.byte	0
 11475 0d73 00       		.byte	0
 11476 0d74 07       		.uleb128 0x7
 11477 0d75 E3000000 		.4byte	0xe3
 11478 0d79 850D0000 		.4byte	0xd85
 11479 0d7d 1F       		.uleb128 0x1f
 11480 0d7e 0E010000 		.4byte	0x10e
 11481 0d82 C309     		.2byte	0x9c3
 11482 0d84 00       		.byte	0
 11483 0d85 07       		.uleb128 0x7
 11484 0d86 E3000000 		.4byte	0xe3
 11485 0d8a 960D0000 		.4byte	0xd96
 11486 0d8e 1F       		.uleb128 0x1f
 11487 0d8f 0E010000 		.4byte	0x10e
 11488 0d93 973A     		.2byte	0x3a97
 11489 0d95 00       		.byte	0
 11490 0d96 1A       		.uleb128 0x1a
 11491 0d97 F30E0000 		.4byte	.LASF194
 11492 0d9b 01       		.byte	0x1
 11493 0d9c 8102     		.2byte	0x281
 11494 0d9e 00000000 		.4byte	.LFB68
 11495 0da2 CC050000 		.4byte	.LFE68-.LFB68
 11496 0da6 01       		.uleb128 0x1
 11497 0da7 9C       		.byte	0x9c
 11498 0da8 4C0E0000 		.4byte	0xe4c
 11499 0dac 20       		.uleb128 0x20
 11500 0dad 27080000 		.4byte	.LASF195
 11501 0db1 01       		.byte	0x1
 11502 0db2 8102     		.2byte	0x281
 11503 0db4 81000000 		.4byte	0x81
 11504 0db8 02       		.uleb128 0x2
 11505 0db9 91       		.byte	0x91
 11506 0dba 5F       		.sleb128 -33
 11507 0dbb 20       		.uleb128 0x20
 11508 0dbc 8C060000 		.4byte	.LASF196
 11509 0dc0 01       		.byte	0x1
 11510 0dc1 8102     		.2byte	0x281
 11511 0dc3 4C0E0000 		.4byte	0xe4c
 11512 0dc7 02       		.uleb128 0x2
 11513 0dc8 91       		.byte	0x91
 11514 0dc9 58       		.sleb128 -40
 11515 0dca 20       		.uleb128 0x20
 11516 0dcb BA100000 		.4byte	.LASF197
 11517 0dcf 01       		.byte	0x1
 11518 0dd0 8102     		.2byte	0x281
 11519 0dd2 4C0E0000 		.4byte	0xe4c
 11520 0dd6 02       		.uleb128 0x2
 11521 0dd7 91       		.byte	0x91
 11522 0dd8 54       		.sleb128 -44
 11523 0dd9 1B       		.uleb128 0x1b
 11524 0dda 03050000 		.4byte	.LASF198
 11525 0dde 01       		.byte	0x1
 11526 0ddf 8302     		.2byte	0x283
 11527 0de1 BD000000 		.4byte	0xbd
 11528 0de5 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 255


 11529 0de6 91       		.byte	0x91
 11530 0de7 74       		.sleb128 -12
 11531 0de8 1B       		.uleb128 0x1b
 11532 0de9 27040000 		.4byte	.LASF199
 11533 0ded 01       		.byte	0x1
 11534 0dee 8402     		.2byte	0x284
 11535 0df0 BD000000 		.4byte	0xbd
 11536 0df4 02       		.uleb128 0x2
 11537 0df5 91       		.byte	0x91
 11538 0df6 68       		.sleb128 -24
 11539 0df7 1B       		.uleb128 0x1b
 11540 0df8 31040000 		.4byte	.LASF200
 11541 0dfc 01       		.byte	0x1
 11542 0dfd 8402     		.2byte	0x284
 11543 0dff BD000000 		.4byte	0xbd
 11544 0e03 02       		.uleb128 0x2
 11545 0e04 91       		.byte	0x91
 11546 0e05 64       		.sleb128 -28
 11547 0e06 1D       		.uleb128 0x1d
 11548 0e07 4D4F5400 		.ascii	"MOT\000"
 11549 0e0b 01       		.byte	0x1
 11550 0e0c 8502     		.2byte	0x285
 11551 0e0e 520E0000 		.4byte	0xe52
 11552 0e12 02       		.uleb128 0x2
 11553 0e13 91       		.byte	0x91
 11554 0e14 70       		.sleb128 -16
 11555 0e15 1B       		.uleb128 0x1b
 11556 0e16 85100000 		.4byte	.LASF201
 11557 0e1a 01       		.byte	0x1
 11558 0e1b 8602     		.2byte	0x286
 11559 0e1d 81000000 		.4byte	0x81
 11560 0e21 02       		.uleb128 0x2
 11561 0e22 91       		.byte	0x91
 11562 0e23 6F       		.sleb128 -17
 11563 0e24 1B       		.uleb128 0x1b
 11564 0e25 D70A0000 		.4byte	.LASF202
 11565 0e29 01       		.byte	0x1
 11566 0e2a 8802     		.2byte	0x288
 11567 0e2c EA060000 		.4byte	0x6ea
 11568 0e30 05       		.uleb128 0x5
 11569 0e31 03       		.byte	0x3
 11570 0e32 8C000000 		.4byte	current_emg.10492
 11571 0e36 21       		.uleb128 0x21
 11572 0e37 00000000 		.4byte	.Ldebug_ranges0+0
 11573 0e3b 1B       		.uleb128 0x1b
 11574 0e3c 15010000 		.4byte	.LASF203
 11575 0e40 01       		.byte	0x1
 11576 0e41 AD02     		.2byte	0x2ad
 11577 0e43 BD000000 		.4byte	0xbd
 11578 0e47 02       		.uleb128 0x2
 11579 0e48 91       		.byte	0x91
 11580 0e49 60       		.sleb128 -32
 11581 0e4a 00       		.byte	0
 11582 0e4b 00       		.byte	0
 11583 0e4c 0C       		.uleb128 0xc
 11584 0e4d 04       		.byte	0x4
 11585 0e4e A5010000 		.4byte	0x1a5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 256


 11586 0e52 0C       		.uleb128 0xc
 11587 0e53 04       		.byte	0x4
 11588 0e54 3E040000 		.4byte	0x43e
 11589 0e58 22       		.uleb128 0x22
 11590 0e59 C90F0000 		.4byte	.LASF204
 11591 0e5d 01       		.byte	0x1
 11592 0e5e 6003     		.2byte	0x360
 11593 0e60 00000000 		.4byte	.LFB69
 11594 0e64 34030000 		.4byte	.LFE69-.LFB69
 11595 0e68 01       		.uleb128 0x1
 11596 0e69 9C       		.byte	0x9c
 11597 0e6a E80E0000 		.4byte	0xee8
 11598 0e6e 20       		.uleb128 0x20
 11599 0e6f 27080000 		.4byte	.LASF195
 11600 0e73 01       		.byte	0x1
 11601 0e74 6003     		.2byte	0x360
 11602 0e76 81000000 		.4byte	0x81
 11603 0e7a 02       		.uleb128 0x2
 11604 0e7b 91       		.byte	0x91
 11605 0e7c 67       		.sleb128 -25
 11606 0e7d 20       		.uleb128 0x20
 11607 0e7e 8C060000 		.4byte	.LASF196
 11608 0e82 01       		.byte	0x1
 11609 0e83 6003     		.2byte	0x360
 11610 0e85 4C0E0000 		.4byte	0xe4c
 11611 0e89 02       		.uleb128 0x2
 11612 0e8a 91       		.byte	0x91
 11613 0e8b 60       		.sleb128 -32
 11614 0e8c 20       		.uleb128 0x20
 11615 0e8d BA100000 		.4byte	.LASF197
 11616 0e91 01       		.byte	0x1
 11617 0e92 6003     		.2byte	0x360
 11618 0e94 4C0E0000 		.4byte	0xe4c
 11619 0e98 02       		.uleb128 0x2
 11620 0e99 91       		.byte	0x91
 11621 0e9a 5C       		.sleb128 -36
 11622 0e9b 23       		.uleb128 0x23
 11623 0e9c 18000000 		.4byte	.Ldebug_ranges0+0x18
 11624 0ea0 C30E0000 		.4byte	0xec3
 11625 0ea4 1B       		.uleb128 0x1b
 11626 0ea5 15010000 		.4byte	.LASF203
 11627 0ea9 01       		.byte	0x1
 11628 0eaa 6703     		.2byte	0x367
 11629 0eac BD000000 		.4byte	0xbd
 11630 0eb0 02       		.uleb128 0x2
 11631 0eb1 91       		.byte	0x91
 11632 0eb2 74       		.sleb128 -12
 11633 0eb3 1B       		.uleb128 0x1b
 11634 0eb4 1C020000 		.4byte	.LASF205
 11635 0eb8 01       		.byte	0x1
 11636 0eb9 6803     		.2byte	0x368
 11637 0ebb BD000000 		.4byte	0xbd
 11638 0ebf 02       		.uleb128 0x2
 11639 0ec0 91       		.byte	0x91
 11640 0ec1 70       		.sleb128 -16
 11641 0ec2 00       		.byte	0
 11642 0ec3 21       		.uleb128 0x21
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 257


 11643 0ec4 30000000 		.4byte	.Ldebug_ranges0+0x30
 11644 0ec8 1B       		.uleb128 0x1b
 11645 0ec9 160D0000 		.4byte	.LASF206
 11646 0ecd 01       		.byte	0x1
 11647 0ece 8D03     		.2byte	0x38d
 11648 0ed0 BD000000 		.4byte	0xbd
 11649 0ed4 02       		.uleb128 0x2
 11650 0ed5 91       		.byte	0x91
 11651 0ed6 6C       		.sleb128 -20
 11652 0ed7 1B       		.uleb128 0x1b
 11653 0ed8 BD090000 		.4byte	.LASF207
 11654 0edc 01       		.byte	0x1
 11655 0edd 8E03     		.2byte	0x38e
 11656 0edf BD000000 		.4byte	0xbd
 11657 0ee3 02       		.uleb128 0x2
 11658 0ee4 91       		.byte	0x91
 11659 0ee5 68       		.sleb128 -24
 11660 0ee6 00       		.byte	0
 11661 0ee7 00       		.byte	0
 11662 0ee8 1A       		.uleb128 0x1a
 11663 0ee9 E9090000 		.4byte	.LASF208
 11664 0eed 01       		.byte	0x1
 11665 0eee B903     		.2byte	0x3b9
 11666 0ef0 00000000 		.4byte	.LFB70
 11667 0ef4 B0010000 		.4byte	.LFE70-.LFB70
 11668 0ef8 01       		.uleb128 0x1
 11669 0ef9 9C       		.byte	0x9c
 11670 0efa 5C0F0000 		.4byte	0xf5c
 11671 0efe 20       		.uleb128 0x20
 11672 0eff 27080000 		.4byte	.LASF195
 11673 0f03 01       		.byte	0x1
 11674 0f04 B903     		.2byte	0x3b9
 11675 0f06 81000000 		.4byte	0x81
 11676 0f0a 02       		.uleb128 0x2
 11677 0f0b 91       		.byte	0x91
 11678 0f0c 77       		.sleb128 -9
 11679 0f0d 20       		.uleb128 0x20
 11680 0f0e 8C060000 		.4byte	.LASF196
 11681 0f12 01       		.byte	0x1
 11682 0f13 B903     		.2byte	0x3b9
 11683 0f15 4C0E0000 		.4byte	0xe4c
 11684 0f19 02       		.uleb128 0x2
 11685 0f1a 91       		.byte	0x91
 11686 0f1b 70       		.sleb128 -16
 11687 0f1c 20       		.uleb128 0x20
 11688 0f1d BA100000 		.4byte	.LASF197
 11689 0f21 01       		.byte	0x1
 11690 0f22 B903     		.2byte	0x3b9
 11691 0f24 4C0E0000 		.4byte	0xe4c
 11692 0f28 02       		.uleb128 0x2
 11693 0f29 91       		.byte	0x91
 11694 0f2a 6C       		.sleb128 -20
 11695 0f2b 20       		.uleb128 0x20
 11696 0f2c 27040000 		.4byte	.LASF199
 11697 0f30 01       		.byte	0x1
 11698 0f31 BA03     		.2byte	0x3ba
 11699 0f33 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 258


 11700 0f37 02       		.uleb128 0x2
 11701 0f38 91       		.byte	0x91
 11702 0f39 68       		.sleb128 -24
 11703 0f3a 20       		.uleb128 0x20
 11704 0f3b 31040000 		.4byte	.LASF200
 11705 0f3f 01       		.byte	0x1
 11706 0f40 BA03     		.2byte	0x3ba
 11707 0f42 BD000000 		.4byte	0xbd
 11708 0f46 02       		.uleb128 0x2
 11709 0f47 91       		.byte	0x91
 11710 0f48 00       		.sleb128 0
 11711 0f49 1B       		.uleb128 0x1b
 11712 0f4a 390C0000 		.4byte	.LASF209
 11713 0f4e 01       		.byte	0x1
 11714 0f4f BD03     		.2byte	0x3bd
 11715 0f51 81000000 		.4byte	0x81
 11716 0f55 05       		.uleb128 0x5
 11717 0f56 03       		.byte	0x3
 11718 0f57 8E000000 		.4byte	fsm_state.10529
 11719 0f5b 00       		.byte	0
 11720 0f5c 24       		.uleb128 0x24
 11721 0f5d D9050000 		.4byte	.LASF211
 11722 0f61 01       		.byte	0x1
 11723 0f62 EF03     		.2byte	0x3ef
 11724 0f64 00000000 		.4byte	.LFB71
 11725 0f68 0C070000 		.4byte	.LFE71-.LFB71
 11726 0f6c 01       		.uleb128 0x1
 11727 0f6d 9C       		.byte	0x9c
 11728 0f6e 13110000 		.4byte	0x1113
 11729 0f72 1B       		.uleb128 0x1b
 11730 0f73 70010000 		.4byte	.LASF212
 11731 0f77 01       		.byte	0x1
 11732 0f78 F103     		.2byte	0x3f1
 11733 0f7a BD000000 		.4byte	0xbd
 11734 0f7e 02       		.uleb128 0x2
 11735 0f7f 91       		.byte	0x91
 11736 0f80 74       		.sleb128 -12
 11737 0f81 1B       		.uleb128 0x1b
 11738 0f82 BB0B0000 		.4byte	.LASF213
 11739 0f86 01       		.byte	0x1
 11740 0f87 F203     		.2byte	0x3f2
 11741 0f89 BD000000 		.4byte	0xbd
 11742 0f8d 03       		.uleb128 0x3
 11743 0f8e 91       		.byte	0x91
 11744 0f8f B07F     		.sleb128 -80
 11745 0f91 1B       		.uleb128 0x1b
 11746 0f92 960F0000 		.4byte	.LASF214
 11747 0f96 01       		.byte	0x1
 11748 0f97 F303     		.2byte	0x3f3
 11749 0f99 BD000000 		.4byte	0xbd
 11750 0f9d 03       		.uleb128 0x3
 11751 0f9e 91       		.byte	0x91
 11752 0f9f AC7F     		.sleb128 -84
 11753 0fa1 1B       		.uleb128 0x1b
 11754 0fa2 0E0B0000 		.4byte	.LASF215
 11755 0fa6 01       		.byte	0x1
 11756 0fa7 F403     		.2byte	0x3f4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 259


 11757 0fa9 BD000000 		.4byte	0xbd
 11758 0fad 02       		.uleb128 0x2
 11759 0fae 91       		.byte	0x91
 11760 0faf 70       		.sleb128 -16
 11761 0fb0 1B       		.uleb128 0x1b
 11762 0fb1 FC0B0000 		.4byte	.LASF190
 11763 0fb5 01       		.byte	0x1
 11764 0fb6 F603     		.2byte	0x3f6
 11765 0fb8 81000000 		.4byte	0x81
 11766 0fbc 02       		.uleb128 0x2
 11767 0fbd 91       		.byte	0x91
 11768 0fbe 6F       		.sleb128 -17
 11769 0fbf 1B       		.uleb128 0x1b
 11770 0fc0 96030000 		.4byte	.LASF216
 11771 0fc4 01       		.byte	0x1
 11772 0fc5 F803     		.2byte	0x3f8
 11773 0fc7 520E0000 		.4byte	0xe52
 11774 0fcb 02       		.uleb128 0x2
 11775 0fcc 91       		.byte	0x91
 11776 0fcd 68       		.sleb128 -24
 11777 0fce 1B       		.uleb128 0x1b
 11778 0fcf 0A030000 		.4byte	.LASF217
 11779 0fd3 01       		.byte	0x1
 11780 0fd4 F903     		.2byte	0x3f9
 11781 0fd6 81000000 		.4byte	0x81
 11782 0fda 02       		.uleb128 0x2
 11783 0fdb 91       		.byte	0x91
 11784 0fdc 67       		.sleb128 -25
 11785 0fdd 1D       		.uleb128 0x1d
 11786 0fde 6B5F7000 		.ascii	"k_p\000"
 11787 0fe2 01       		.byte	0x1
 11788 0fe3 FB03     		.2byte	0x3fb
 11789 0fe5 BD000000 		.4byte	0xbd
 11790 0fe9 02       		.uleb128 0x2
 11791 0fea 91       		.byte	0x91
 11792 0feb 60       		.sleb128 -32
 11793 0fec 1D       		.uleb128 0x1d
 11794 0fed 6B5F6900 		.ascii	"k_i\000"
 11795 0ff1 01       		.byte	0x1
 11796 0ff2 FC03     		.2byte	0x3fc
 11797 0ff4 BD000000 		.4byte	0xbd
 11798 0ff8 02       		.uleb128 0x2
 11799 0ff9 91       		.byte	0x91
 11800 0ffa 5C       		.sleb128 -36
 11801 0ffb 1D       		.uleb128 0x1d
 11802 0ffc 6B5F6400 		.ascii	"k_d\000"
 11803 1000 01       		.byte	0x1
 11804 1001 FD03     		.2byte	0x3fd
 11805 1003 BD000000 		.4byte	0xbd
 11806 1007 02       		.uleb128 0x2
 11807 1008 91       		.byte	0x91
 11808 1009 58       		.sleb128 -40
 11809 100a 1B       		.uleb128 0x1b
 11810 100b C10C0000 		.4byte	.LASF72
 11811 100f 01       		.byte	0x1
 11812 1010 FF03     		.2byte	0x3ff
 11813 1012 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 260


 11814 1016 02       		.uleb128 0x2
 11815 1017 91       		.byte	0x91
 11816 1018 54       		.sleb128 -44
 11817 1019 1B       		.uleb128 0x1b
 11818 101a 79050000 		.4byte	.LASF73
 11819 101e 01       		.byte	0x1
 11820 101f 0004     		.2byte	0x400
 11821 1021 BD000000 		.4byte	0xbd
 11822 1025 02       		.uleb128 0x2
 11823 1026 91       		.byte	0x91
 11824 1027 50       		.sleb128 -48
 11825 1028 1B       		.uleb128 0x1b
 11826 1029 61050000 		.4byte	.LASF74
 11827 102d 01       		.byte	0x1
 11828 102e 0104     		.2byte	0x401
 11829 1030 BD000000 		.4byte	0xbd
 11830 1034 02       		.uleb128 0x2
 11831 1035 91       		.byte	0x91
 11832 1036 4C       		.sleb128 -52
 11833 1037 1B       		.uleb128 0x1b
 11834 1038 6F0F0000 		.4byte	.LASF75
 11835 103c 01       		.byte	0x1
 11836 103d 0304     		.2byte	0x403
 11837 103f BD000000 		.4byte	0xbd
 11838 1043 02       		.uleb128 0x2
 11839 1044 91       		.byte	0x91
 11840 1045 48       		.sleb128 -56
 11841 1046 1B       		.uleb128 0x1b
 11842 1047 15060000 		.4byte	.LASF76
 11843 104b 01       		.byte	0x1
 11844 104c 0404     		.2byte	0x404
 11845 104e BD000000 		.4byte	0xbd
 11846 1052 02       		.uleb128 0x2
 11847 1053 91       		.byte	0x91
 11848 1054 44       		.sleb128 -60
 11849 1055 1B       		.uleb128 0x1b
 11850 1056 A20E0000 		.4byte	.LASF77
 11851 105a 01       		.byte	0x1
 11852 105b 0504     		.2byte	0x405
 11853 105d BD000000 		.4byte	0xbd
 11854 1061 02       		.uleb128 0x2
 11855 1062 91       		.byte	0x91
 11856 1063 40       		.sleb128 -64
 11857 1064 1B       		.uleb128 0x1b
 11858 1065 23060000 		.4byte	.LASF78
 11859 1069 01       		.byte	0x1
 11860 106a 0704     		.2byte	0x407
 11861 106c BD000000 		.4byte	0xbd
 11862 1070 03       		.uleb128 0x3
 11863 1071 91       		.byte	0x91
 11864 1072 BC7F     		.sleb128 -68
 11865 1074 1B       		.uleb128 0x1b
 11866 1075 5D070000 		.4byte	.LASF79
 11867 1079 01       		.byte	0x1
 11868 107a 0804     		.2byte	0x408
 11869 107c BD000000 		.4byte	0xbd
 11870 1080 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 261


 11871 1081 91       		.byte	0x91
 11872 1082 B87F     		.sleb128 -72
 11873 1084 1B       		.uleb128 0x1b
 11874 1085 BB110000 		.4byte	.LASF80
 11875 1089 01       		.byte	0x1
 11876 108a 0904     		.2byte	0x409
 11877 108c BD000000 		.4byte	0xbd
 11878 1090 03       		.uleb128 0x3
 11879 1091 91       		.byte	0x91
 11880 1092 B47F     		.sleb128 -76
 11881 1094 1B       		.uleb128 0x1b
 11882 1095 F0050000 		.4byte	.LASF218
 11883 1099 01       		.byte	0x1
 11884 109a 0D04     		.2byte	0x40d
 11885 109c BD000000 		.4byte	0xbd
 11886 10a0 05       		.uleb128 0x5
 11887 10a1 03       		.byte	0x3
 11888 10a2 90000000 		.4byte	pos_error_sum.10556
 11889 10a6 1B       		.uleb128 0x1b
 11890 10a7 6F040000 		.4byte	.LASF219
 11891 10ab 01       		.byte	0x1
 11892 10ac 0E04     		.2byte	0x40e
 11893 10ae BD000000 		.4byte	0xbd
 11894 10b2 05       		.uleb128 0x5
 11895 10b3 03       		.byte	0x3
 11896 10b4 9C000000 		.4byte	curr_error_sum.10557
 11897 10b8 1B       		.uleb128 0x1b
 11898 10b9 660B0000 		.4byte	.LASF220
 11899 10bd 01       		.byte	0x1
 11900 10be 1004     		.2byte	0x410
 11901 10c0 BD000000 		.4byte	0xbd
 11902 10c4 05       		.uleb128 0x5
 11903 10c5 03       		.byte	0x3
 11904 10c6 94000000 		.4byte	prev_pos_err.10558
 11905 10ca 1B       		.uleb128 0x1b
 11906 10cb A00C0000 		.4byte	.LASF221
 11907 10cf 01       		.byte	0x1
 11908 10d0 1104     		.2byte	0x411
 11909 10d2 BD000000 		.4byte	0xbd
 11910 10d6 05       		.uleb128 0x5
 11911 10d7 03       		.byte	0x3
 11912 10d8 A0000000 		.4byte	prev_curr_err.10559
 11913 10dc 1B       		.uleb128 0x1b
 11914 10dd 050F0000 		.4byte	.LASF222
 11915 10e1 01       		.byte	0x1
 11916 10e2 1204     		.2byte	0x412
 11917 10e4 BD000000 		.4byte	0xbd
 11918 10e8 05       		.uleb128 0x5
 11919 10e9 03       		.byte	0x3
 11920 10ea A4000000 		.4byte	prev_pwm.10560
 11921 10ee 1B       		.uleb128 0x1b
 11922 10ef 7F050000 		.4byte	.LASF223
 11923 10f3 01       		.byte	0x1
 11924 10f4 1404     		.2byte	0x414
 11925 10f6 81000000 		.4byte	0x81
 11926 10fa 05       		.uleb128 0x5
 11927 10fb 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 262


 11928 10fc 98000000 		.4byte	motor_dir.10561
 11929 1100 1B       		.uleb128 0x1b
 11930 1101 48060000 		.4byte	.LASF224
 11931 1105 01       		.byte	0x1
 11932 1106 1504     		.2byte	0x415
 11933 1108 99000000 		.4byte	0x99
 11934 110c 05       		.uleb128 0x5
 11935 110d 03       		.byte	0x3
 11936 110e A8000000 		.4byte	position_counter.10562
 11937 1112 00       		.byte	0
 11938 1113 1A       		.uleb128 0x1a
 11939 1114 2B050000 		.4byte	.LASF225
 11940 1118 01       		.byte	0x1
 11941 1119 1F05     		.2byte	0x51f
 11942 111b 00000000 		.4byte	.LFB72
 11943 111f 44080000 		.4byte	.LFE72-.LFB72
 11944 1123 01       		.uleb128 0x1
 11945 1124 9C       		.byte	0x9c
 11946 1125 CC120000 		.4byte	0x12cc
 11947 1129 25       		.uleb128 0x25
 11948 112a 69647800 		.ascii	"idx\000"
 11949 112e 01       		.byte	0x1
 11950 112f 1F05     		.2byte	0x51f
 11951 1131 81000000 		.4byte	0x81
 11952 1135 03       		.uleb128 0x3
 11953 1136 91       		.byte	0x91
 11954 1137 A77F     		.sleb128 -89
 11955 1139 1B       		.uleb128 0x1b
 11956 113a 70010000 		.4byte	.LASF212
 11957 113e 01       		.byte	0x1
 11958 113f 2105     		.2byte	0x521
 11959 1141 BD000000 		.4byte	0xbd
 11960 1145 02       		.uleb128 0x2
 11961 1146 91       		.byte	0x91
 11962 1147 6C       		.sleb128 -20
 11963 1148 1B       		.uleb128 0x1b
 11964 1149 BB0B0000 		.4byte	.LASF213
 11965 114d 01       		.byte	0x1
 11966 114e 2205     		.2byte	0x522
 11967 1150 BD000000 		.4byte	0xbd
 11968 1154 03       		.uleb128 0x3
 11969 1155 91       		.byte	0x91
 11970 1156 AC7F     		.sleb128 -84
 11971 1158 1B       		.uleb128 0x1b
 11972 1159 960F0000 		.4byte	.LASF214
 11973 115d 01       		.byte	0x1
 11974 115e 2305     		.2byte	0x523
 11975 1160 BD000000 		.4byte	0xbd
 11976 1164 03       		.uleb128 0x3
 11977 1165 91       		.byte	0x91
 11978 1166 A87F     		.sleb128 -88
 11979 1168 1B       		.uleb128 0x1b
 11980 1169 0E0B0000 		.4byte	.LASF215
 11981 116d 01       		.byte	0x1
 11982 116e 2405     		.2byte	0x524
 11983 1170 BD000000 		.4byte	0xbd
 11984 1174 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 263


 11985 1175 91       		.byte	0x91
 11986 1176 68       		.sleb128 -24
 11987 1177 1D       		.uleb128 0x1d
 11988 1178 4D4F5400 		.ascii	"MOT\000"
 11989 117c 01       		.byte	0x1
 11990 117d 2605     		.2byte	0x526
 11991 117f 520E0000 		.4byte	0xe52
 11992 1183 02       		.uleb128 0x2
 11993 1184 91       		.byte	0x91
 11994 1185 64       		.sleb128 -28
 11995 1186 1B       		.uleb128 0x1b
 11996 1187 85100000 		.4byte	.LASF201
 11997 118b 01       		.byte	0x1
 11998 118c 2705     		.2byte	0x527
 11999 118e 81000000 		.4byte	0x81
 12000 1192 02       		.uleb128 0x2
 12001 1193 91       		.byte	0x91
 12002 1194 63       		.sleb128 -29
 12003 1195 1D       		.uleb128 0x1d
 12004 1196 6B5F7000 		.ascii	"k_p\000"
 12005 119a 01       		.byte	0x1
 12006 119b 2905     		.2byte	0x529
 12007 119d BD000000 		.4byte	0xbd
 12008 11a1 02       		.uleb128 0x2
 12009 11a2 91       		.byte	0x91
 12010 11a3 5C       		.sleb128 -36
 12011 11a4 1D       		.uleb128 0x1d
 12012 11a5 6B5F6900 		.ascii	"k_i\000"
 12013 11a9 01       		.byte	0x1
 12014 11aa 2A05     		.2byte	0x52a
 12015 11ac BD000000 		.4byte	0xbd
 12016 11b0 02       		.uleb128 0x2
 12017 11b1 91       		.byte	0x91
 12018 11b2 58       		.sleb128 -40
 12019 11b3 1D       		.uleb128 0x1d
 12020 11b4 6B5F6400 		.ascii	"k_d\000"
 12021 11b8 01       		.byte	0x1
 12022 11b9 2B05     		.2byte	0x52b
 12023 11bb BD000000 		.4byte	0xbd
 12024 11bf 02       		.uleb128 0x2
 12025 11c0 91       		.byte	0x91
 12026 11c1 54       		.sleb128 -44
 12027 11c2 1B       		.uleb128 0x1b
 12028 11c3 C10C0000 		.4byte	.LASF72
 12029 11c7 01       		.byte	0x1
 12030 11c8 2D05     		.2byte	0x52d
 12031 11ca BD000000 		.4byte	0xbd
 12032 11ce 02       		.uleb128 0x2
 12033 11cf 91       		.byte	0x91
 12034 11d0 50       		.sleb128 -48
 12035 11d1 1B       		.uleb128 0x1b
 12036 11d2 79050000 		.4byte	.LASF73
 12037 11d6 01       		.byte	0x1
 12038 11d7 2E05     		.2byte	0x52e
 12039 11d9 BD000000 		.4byte	0xbd
 12040 11dd 02       		.uleb128 0x2
 12041 11de 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 264


 12042 11df 4C       		.sleb128 -52
 12043 11e0 1B       		.uleb128 0x1b
 12044 11e1 61050000 		.4byte	.LASF74
 12045 11e5 01       		.byte	0x1
 12046 11e6 2F05     		.2byte	0x52f
 12047 11e8 BD000000 		.4byte	0xbd
 12048 11ec 02       		.uleb128 0x2
 12049 11ed 91       		.byte	0x91
 12050 11ee 48       		.sleb128 -56
 12051 11ef 1B       		.uleb128 0x1b
 12052 11f0 6F0F0000 		.4byte	.LASF75
 12053 11f4 01       		.byte	0x1
 12054 11f5 3105     		.2byte	0x531
 12055 11f7 BD000000 		.4byte	0xbd
 12056 11fb 02       		.uleb128 0x2
 12057 11fc 91       		.byte	0x91
 12058 11fd 44       		.sleb128 -60
 12059 11fe 1B       		.uleb128 0x1b
 12060 11ff 15060000 		.4byte	.LASF76
 12061 1203 01       		.byte	0x1
 12062 1204 3205     		.2byte	0x532
 12063 1206 BD000000 		.4byte	0xbd
 12064 120a 02       		.uleb128 0x2
 12065 120b 91       		.byte	0x91
 12066 120c 40       		.sleb128 -64
 12067 120d 1B       		.uleb128 0x1b
 12068 120e A20E0000 		.4byte	.LASF77
 12069 1212 01       		.byte	0x1
 12070 1213 3305     		.2byte	0x533
 12071 1215 BD000000 		.4byte	0xbd
 12072 1219 03       		.uleb128 0x3
 12073 121a 91       		.byte	0x91
 12074 121b BC7F     		.sleb128 -68
 12075 121d 1B       		.uleb128 0x1b
 12076 121e 23060000 		.4byte	.LASF78
 12077 1222 01       		.byte	0x1
 12078 1223 3505     		.2byte	0x535
 12079 1225 BD000000 		.4byte	0xbd
 12080 1229 03       		.uleb128 0x3
 12081 122a 91       		.byte	0x91
 12082 122b B87F     		.sleb128 -72
 12083 122d 1B       		.uleb128 0x1b
 12084 122e 5D070000 		.4byte	.LASF79
 12085 1232 01       		.byte	0x1
 12086 1233 3605     		.2byte	0x536
 12087 1235 BD000000 		.4byte	0xbd
 12088 1239 03       		.uleb128 0x3
 12089 123a 91       		.byte	0x91
 12090 123b B47F     		.sleb128 -76
 12091 123d 1B       		.uleb128 0x1b
 12092 123e BB110000 		.4byte	.LASF80
 12093 1242 01       		.byte	0x1
 12094 1243 3705     		.2byte	0x537
 12095 1245 BD000000 		.4byte	0xbd
 12096 1249 03       		.uleb128 0x3
 12097 124a 91       		.byte	0x91
 12098 124b B07F     		.sleb128 -80
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 265


 12099 124d 1B       		.uleb128 0x1b
 12100 124e F0050000 		.4byte	.LASF218
 12101 1252 01       		.byte	0x1
 12102 1253 3B05     		.2byte	0x53b
 12103 1255 94020000 		.4byte	0x294
 12104 1259 05       		.uleb128 0x5
 12105 125a 03       		.byte	0x3
 12106 125b AC000000 		.4byte	pos_error_sum.10589
 12107 125f 1B       		.uleb128 0x1b
 12108 1260 6F040000 		.4byte	.LASF219
 12109 1264 01       		.byte	0x1
 12110 1265 3C05     		.2byte	0x53c
 12111 1267 94020000 		.4byte	0x294
 12112 126b 05       		.uleb128 0x5
 12113 126c 03       		.byte	0x3
 12114 126d C0000000 		.4byte	curr_error_sum.10590
 12115 1271 1B       		.uleb128 0x1b
 12116 1272 660B0000 		.4byte	.LASF220
 12117 1276 01       		.byte	0x1
 12118 1277 3E05     		.2byte	0x53e
 12119 1279 94020000 		.4byte	0x294
 12120 127d 05       		.uleb128 0x5
 12121 127e 03       		.byte	0x3
 12122 127f B4000000 		.4byte	prev_pos_err.10591
 12123 1283 1B       		.uleb128 0x1b
 12124 1284 A00C0000 		.4byte	.LASF221
 12125 1288 01       		.byte	0x1
 12126 1289 3F05     		.2byte	0x53f
 12127 128b 94020000 		.4byte	0x294
 12128 128f 05       		.uleb128 0x5
 12129 1290 03       		.byte	0x3
 12130 1291 C8000000 		.4byte	prev_curr_err.10592
 12131 1295 1B       		.uleb128 0x1b
 12132 1296 050F0000 		.4byte	.LASF222
 12133 129a 01       		.byte	0x1
 12134 129b 4005     		.2byte	0x540
 12135 129d 94020000 		.4byte	0x294
 12136 12a1 05       		.uleb128 0x5
 12137 12a2 03       		.byte	0x3
 12138 12a3 D0000000 		.4byte	prev_pwm.10593
 12139 12a7 1B       		.uleb128 0x1b
 12140 12a8 7F050000 		.4byte	.LASF223
 12141 12ac 01       		.byte	0x1
 12142 12ad 4205     		.2byte	0x542
 12143 12af EA060000 		.4byte	0x6ea
 12144 12b3 05       		.uleb128 0x5
 12145 12b4 03       		.byte	0x3
 12146 12b5 BC000000 		.4byte	motor_dir.10594
 12147 12b9 1B       		.uleb128 0x1b
 12148 12ba 48060000 		.4byte	.LASF224
 12149 12be 01       		.byte	0x1
 12150 12bf 4305     		.2byte	0x543
 12151 12c1 6F030000 		.4byte	0x36f
 12152 12c5 05       		.uleb128 0x5
 12153 12c6 03       		.byte	0x3
 12154 12c7 D8000000 		.4byte	position_counter.10595
 12155 12cb 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 266


 12156 12cc 1A       		.uleb128 0x1a
 12157 12cd A5030000 		.4byte	.LASF226
 12158 12d1 01       		.byte	0x1
 12159 12d2 6E06     		.2byte	0x66e
 12160 12d4 00000000 		.4byte	.LFB73
 12161 12d8 18080000 		.4byte	.LFE73-.LFB73
 12162 12dc 01       		.uleb128 0x1
 12163 12dd 9C       		.byte	0x9c
 12164 12de 54140000 		.4byte	0x1454
 12165 12e2 20       		.uleb128 0x20
 12166 12e3 EB000000 		.4byte	.LASF227
 12167 12e7 01       		.byte	0x1
 12168 12e8 6E06     		.2byte	0x66e
 12169 12ea 81000000 		.4byte	0x81
 12170 12ee 03       		.uleb128 0x3
 12171 12ef 91       		.byte	0x91
 12172 12f0 BF7F     		.sleb128 -65
 12173 12f2 20       		.uleb128 0x20
 12174 12f3 FA0A0000 		.4byte	.LASF228
 12175 12f7 01       		.byte	0x1
 12176 12f8 6E06     		.2byte	0x66e
 12177 12fa 81000000 		.4byte	0x81
 12178 12fe 03       		.uleb128 0x3
 12179 12ff 91       		.byte	0x91
 12180 1300 BE7F     		.sleb128 -66
 12181 1302 1B       		.uleb128 0x1b
 12182 1303 18070000 		.4byte	.LASF229
 12183 1307 01       		.byte	0x1
 12184 1308 7006     		.2byte	0x670
 12185 130a 81000000 		.4byte	0x81
 12186 130e 02       		.uleb128 0x2
 12187 130f 91       		.byte	0x91
 12188 1310 67       		.sleb128 -25
 12189 1311 1D       		.uleb128 0x1d
 12190 1312 6A6A00   		.ascii	"jj\000"
 12191 1315 01       		.byte	0x1
 12192 1316 7306     		.2byte	0x673
 12193 1318 81000000 		.4byte	0x81
 12194 131c 02       		.uleb128 0x2
 12195 131d 91       		.byte	0x91
 12196 131e 66       		.sleb128 -26
 12197 131f 1B       		.uleb128 0x1b
 12198 1320 7E030000 		.4byte	.LASF230
 12199 1324 01       		.byte	0x1
 12200 1325 7506     		.2byte	0x675
 12201 1327 54140000 		.4byte	0x1454
 12202 132b 02       		.uleb128 0x2
 12203 132c 91       		.byte	0x91
 12204 132d 40       		.sleb128 -64
 12205 132e 1B       		.uleb128 0x1b
 12206 132f F60F0000 		.4byte	.LASF231
 12207 1333 01       		.byte	0x1
 12208 1334 7606     		.2byte	0x676
 12209 1336 B1000000 		.4byte	0xb1
 12210 133a 02       		.uleb128 0x2
 12211 133b 91       		.byte	0x91
 12212 133c 64       		.sleb128 -28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 267


 12213 133d 1B       		.uleb128 0x1b
 12214 133e 8B0C0000 		.4byte	.LASF232
 12215 1342 01       		.byte	0x1
 12216 1343 7706     		.2byte	0x677
 12217 1345 BD000000 		.4byte	0xbd
 12218 1349 02       		.uleb128 0x2
 12219 134a 91       		.byte	0x91
 12220 134b 54       		.sleb128 -44
 12221 134c 1B       		.uleb128 0x1b
 12222 134d A90E0000 		.4byte	.LASF233
 12223 1351 01       		.byte	0x1
 12224 1352 7806     		.2byte	0x678
 12225 1354 BD000000 		.4byte	0xbd
 12226 1358 02       		.uleb128 0x2
 12227 1359 91       		.byte	0x91
 12228 135a 60       		.sleb128 -32
 12229 135b 1B       		.uleb128 0x1b
 12230 135c B8040000 		.4byte	.LASF234
 12231 1360 01       		.byte	0x1
 12232 1361 7906     		.2byte	0x679
 12233 1363 BD000000 		.4byte	0xbd
 12234 1367 02       		.uleb128 0x2
 12235 1368 91       		.byte	0x91
 12236 1369 4C       		.sleb128 -52
 12237 136a 1B       		.uleb128 0x1b
 12238 136b 840E0000 		.4byte	.LASF235
 12239 136f 01       		.byte	0x1
 12240 1370 7A06     		.2byte	0x67a
 12241 1372 BD000000 		.4byte	0xbd
 12242 1376 02       		.uleb128 0x2
 12243 1377 91       		.byte	0x91
 12244 1378 50       		.sleb128 -48
 12245 1379 1B       		.uleb128 0x1b
 12246 137a 730B0000 		.4byte	.LASF236
 12247 137e 01       		.byte	0x1
 12248 137f 7B06     		.2byte	0x67b
 12249 1381 A5000000 		.4byte	0xa5
 12250 1385 02       		.uleb128 0x2
 12251 1386 91       		.byte	0x91
 12252 1387 5F       		.sleb128 -33
 12253 1388 1B       		.uleb128 0x1b
 12254 1389 060C0000 		.4byte	.LASF237
 12255 138d 01       		.byte	0x1
 12256 138e 7D06     		.2byte	0x67d
 12257 1390 64140000 		.4byte	0x1464
 12258 1394 05       		.uleb128 0x5
 12259 1395 03       		.byte	0x3
 12260 1396 E0000000 		.4byte	last_value_encoder.10618
 12261 139a 1B       		.uleb128 0x1b
 12262 139b DA060000 		.4byte	.LASF238
 12263 139f 01       		.byte	0x1
 12264 13a0 7E06     		.2byte	0x67e
 12265 13a2 64140000 		.4byte	0x1464
 12266 13a6 05       		.uleb128 0x5
 12267 13a7 03       		.byte	0x3
 12268 13a8 F8000000 		.4byte	comp_value_encoder.10619
 12269 13ac 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 268


 12270 13ad B9030000 		.4byte	.LASF239
 12271 13b1 01       		.byte	0x1
 12272 13b2 7F06     		.2byte	0x67f
 12273 13b4 7A140000 		.4byte	0x147a
 12274 13b8 05       		.uleb128 0x5
 12275 13b9 03       		.byte	0x3
 12276 13ba 10010000 		.4byte	error.10620
 12277 13be 1B       		.uleb128 0x1b
 12278 13bf 620E0000 		.4byte	.LASF240
 12279 13c3 01       		.byte	0x1
 12280 13c4 8106     		.2byte	0x681
 12281 13c6 EA060000 		.4byte	0x6ea
 12282 13ca 05       		.uleb128 0x5
 12283 13cb 03       		.byte	0x3
 12284 13cc 04000000 		.4byte	only_first_time.10621
 12285 13d0 1B       		.uleb128 0x1b
 12286 13d1 39030000 		.4byte	.LASF241
 12287 13d5 01       		.byte	0x1
 12288 13d6 8206     		.2byte	0x682
 12289 13d8 EA060000 		.4byte	0x6ea
 12290 13dc 05       		.uleb128 0x5
 12291 13dd 03       		.byte	0x3
 12292 13de 64010000 		.4byte	safe_startup_motor_activation.10622
 12293 13e2 1B       		.uleb128 0x1b
 12294 13e3 CB000000 		.4byte	.LASF242
 12295 13e7 01       		.byte	0x1
 12296 13e8 8306     		.2byte	0x683
 12297 13ea EA060000 		.4byte	0x6ea
 12298 13ee 05       		.uleb128 0x5
 12299 13ef 03       		.byte	0x3
 12300 13f0 60010000 		.4byte	one_time_execute.10623
 12301 13f4 1B       		.uleb128 0x1b
 12302 13f5 2A0A0000 		.4byte	.LASF243
 12303 13f9 01       		.byte	0x1
 12304 13fa 8406     		.2byte	0x684
 12305 13fc 6F030000 		.4byte	0x36f
 12306 1400 05       		.uleb128 0x5
 12307 1401 03       		.byte	0x3
 12308 1402 68010000 		.4byte	count_startup_motor.10624
 12309 1406 1B       		.uleb128 0x1b
 12310 1407 4B090000 		.4byte	.LASF244
 12311 140b 01       		.byte	0x1
 12312 140c 8606     		.2byte	0x686
 12313 140e 64140000 		.4byte	0x1464
 12314 1412 05       		.uleb128 0x5
 12315 1413 03       		.byte	0x3
 12316 1414 18010000 		.4byte	v_value.10625
 12317 1418 1B       		.uleb128 0x1b
 12318 1419 B2110000 		.4byte	.LASF245
 12319 141d 01       		.byte	0x1
 12320 141e 8706     		.2byte	0x687
 12321 1420 64140000 		.4byte	0x1464
 12322 1424 05       		.uleb128 0x5
 12323 1425 03       		.byte	0x3
 12324 1426 30010000 		.4byte	vv_value.10626
 12325 142a 1B       		.uleb128 0x1b
 12326 142b BE010000 		.4byte	.LASF246
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 269


 12327 142f 01       		.byte	0x1
 12328 1430 8806     		.2byte	0x688
 12329 1432 64140000 		.4byte	0x1464
 12330 1436 05       		.uleb128 0x5
 12331 1437 03       		.byte	0x3
 12332 1438 48010000 		.4byte	vvv_value.10627
 12333 143c 1E       		.uleb128 0x1e
 12334 143d 98000000 		.4byte	.LBB10
 12335 1441 6A000000 		.4byte	.LBE10-.LBB10
 12336 1445 1D       		.uleb128 0x1d
 12337 1446 6A00     		.ascii	"j\000"
 12338 1448 01       		.byte	0x1
 12339 1449 9806     		.2byte	0x698
 12340 144b 68000000 		.4byte	0x68
 12341 144f 02       		.uleb128 0x2
 12342 1450 91       		.byte	0x91
 12343 1451 58       		.sleb128 -40
 12344 1452 00       		.byte	0
 12345 1453 00       		.byte	0
 12346 1454 07       		.uleb128 0x7
 12347 1455 99000000 		.4byte	0x99
 12348 1459 64140000 		.4byte	0x1464
 12349 145d 08       		.uleb128 0x8
 12350 145e 0E010000 		.4byte	0x10e
 12351 1462 02       		.byte	0x2
 12352 1463 00       		.byte	0
 12353 1464 07       		.uleb128 0x7
 12354 1465 BD000000 		.4byte	0xbd
 12355 1469 7A140000 		.4byte	0x147a
 12356 146d 08       		.uleb128 0x8
 12357 146e 0E010000 		.4byte	0x10e
 12358 1472 01       		.byte	0x1
 12359 1473 08       		.uleb128 0x8
 12360 1474 0E010000 		.4byte	0x10e
 12361 1478 02       		.byte	0x2
 12362 1479 00       		.byte	0
 12363 147a 07       		.uleb128 0x7
 12364 147b 81000000 		.4byte	0x81
 12365 147f 90140000 		.4byte	0x1490
 12366 1483 08       		.uleb128 0x8
 12367 1484 0E010000 		.4byte	0x10e
 12368 1488 01       		.byte	0x1
 12369 1489 08       		.uleb128 0x8
 12370 148a 0E010000 		.4byte	0x10e
 12371 148e 02       		.byte	0x2
 12372 148f 00       		.byte	0
 12373 1490 24       		.uleb128 0x24
 12374 1491 5F0D0000 		.4byte	.LASF247
 12375 1495 01       		.byte	0x1
 12376 1496 4B07     		.2byte	0x74b
 12377 1498 00000000 		.4byte	.LFB74
 12378 149c 98110000 		.4byte	.LFE74-.LFB74
 12379 14a0 01       		.uleb128 0x1
 12380 14a1 9C       		.byte	0x9c
 12381 14a2 6A150000 		.4byte	0x156a
 12382 14a6 1B       		.uleb128 0x1b
 12383 14a7 FF0C0000 		.4byte	.LASF248
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 270


 12384 14ab 01       		.byte	0x1
 12385 14ac 5F07     		.2byte	0x75f
 12386 14ae BD000000 		.4byte	0xbd
 12387 14b2 02       		.uleb128 0x2
 12388 14b3 91       		.byte	0x91
 12389 14b4 64       		.sleb128 -28
 12390 14b5 1B       		.uleb128 0x1b
 12391 14b6 460E0000 		.4byte	.LASF249
 12392 14ba 01       		.byte	0x1
 12393 14bb 6107     		.2byte	0x761
 12394 14bd 8D000000 		.4byte	0x8d
 12395 14c1 05       		.uleb128 0x5
 12396 14c2 03       		.byte	0x3
 12397 14c3 78010000 		.4byte	emg_counter_1.10644
 12398 14c7 1B       		.uleb128 0x1b
 12399 14c8 540E0000 		.4byte	.LASF250
 12400 14cc 01       		.byte	0x1
 12401 14cd 6207     		.2byte	0x762
 12402 14cf 8D000000 		.4byte	0x8d
 12403 14d3 05       		.uleb128 0x5
 12404 14d4 03       		.byte	0x3
 12405 14d5 7A010000 		.4byte	emg_counter_2.10645
 12406 14d9 1B       		.uleb128 0x1b
 12407 14da 82020000 		.4byte	.LASF251
 12408 14de 01       		.byte	0x1
 12409 14df 6307     		.2byte	0x763
 12410 14e1 8D000000 		.4byte	0x8d
 12411 14e5 05       		.uleb128 0x5
 12412 14e6 03       		.byte	0x3
 12413 14e7 80010000 		.4byte	UD_counter.10646
 12414 14eb 1B       		.uleb128 0x1b
 12415 14ec D5030000 		.4byte	.LASF252
 12416 14f0 01       		.byte	0x1
 12417 14f1 6407     		.2byte	0x764
 12418 14f3 8D000000 		.4byte	0x8d
 12419 14f7 05       		.uleb128 0x5
 12420 14f8 03       		.byte	0x3
 12421 14f9 88010000 		.4byte	LR_counter.10647
 12422 14fd 1B       		.uleb128 0x1b
 12423 14fe EC0A0000 		.4byte	.LASF253
 12424 1502 01       		.byte	0x1
 12425 1503 6507     		.2byte	0x765
 12426 1505 BD000000 		.4byte	0xbd
 12427 1509 05       		.uleb128 0x5
 12428 150a 03       		.byte	0x3
 12429 150b 7C010000 		.4byte	UD_mean_value.10648
 12430 150f 1B       		.uleb128 0x1b
 12431 1510 0B110000 		.4byte	.LASF254
 12432 1514 01       		.byte	0x1
 12433 1515 6607     		.2byte	0x766
 12434 1517 BD000000 		.4byte	0xbd
 12435 151b 05       		.uleb128 0x5
 12436 151c 03       		.byte	0x3
 12437 151d 84010000 		.4byte	LR_mean_value.10649
 12438 1521 1B       		.uleb128 0x1b
 12439 1522 C1020000 		.4byte	.LASF255
 12440 1526 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 271


 12441 1527 6707     		.2byte	0x767
 12442 1529 81000000 		.4byte	0x81
 12443 152d 05       		.uleb128 0x5
 12444 152e 03       		.byte	0x3
 12445 152f 06000000 		.4byte	first_tension_valid.10650
 12446 1533 1B       		.uleb128 0x1b
 12447 1534 5B0A0000 		.4byte	.LASF256
 12448 1538 01       		.byte	0x1
 12449 1539 6907     		.2byte	0x769
 12450 153b 8D000000 		.4byte	0x8d
 12451 153f 05       		.uleb128 0x5
 12452 1540 03       		.byte	0x3
 12453 1541 70010000 		.4byte	count.10651
 12454 1545 1B       		.uleb128 0x1b
 12455 1546 AE010000 		.4byte	.LASF257
 12456 154a 01       		.byte	0x1
 12457 154b 6A07     		.2byte	0x76a
 12458 154d 99000000 		.4byte	0x99
 12459 1551 05       		.uleb128 0x5
 12460 1552 03       		.byte	0x3
 12461 1553 74010000 		.4byte	v_count.10652
 12462 1557 1D       		.uleb128 0x1d
 12463 1558 69647800 		.ascii	"idx\000"
 12464 155c 01       		.byte	0x1
 12465 155d 6B07     		.2byte	0x76b
 12466 155f 81000000 		.4byte	0x81
 12467 1563 05       		.uleb128 0x5
 12468 1564 03       		.byte	0x3
 12469 1565 72010000 		.4byte	idx.10653
 12470 1569 00       		.byte	0
 12471 156a 26       		.uleb128 0x26
 12472 156b 2A0D0000 		.4byte	.LASF258
 12473 156f 01       		.byte	0x1
 12474 1570 B809     		.2byte	0x9b8
 12475 1572 00000000 		.4byte	.LFB75
 12476 1576 FC000000 		.4byte	.LFE75-.LFB75
 12477 157a 01       		.uleb128 0x1
 12478 157b 9C       		.byte	0x9c
 12479 157c B1150000 		.4byte	0x15b1
 12480 1580 1E       		.uleb128 0x1e
 12481 1581 06000000 		.4byte	.LBB11
 12482 1585 D6000000 		.4byte	.LBE11-.LBB11
 12483 1589 1D       		.uleb128 0x1d
 12484 158a 6900     		.ascii	"i\000"
 12485 158c 01       		.byte	0x1
 12486 158d BA09     		.2byte	0x9ba
 12487 158f 81000000 		.4byte	0x81
 12488 1593 02       		.uleb128 0x2
 12489 1594 91       		.byte	0x91
 12490 1595 77       		.sleb128 -9
 12491 1596 1E       		.uleb128 0x1e
 12492 1597 26000000 		.4byte	.LBB12
 12493 159b AA000000 		.4byte	.LBE12-.LBB12
 12494 159f 1B       		.uleb128 0x1b
 12495 15a0 61080000 		.4byte	.LASF40
 12496 15a4 01       		.byte	0x1
 12497 15a5 BC09     		.2byte	0x9bc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 272


 12498 15a7 BD000000 		.4byte	0xbd
 12499 15ab 02       		.uleb128 0x2
 12500 15ac 91       		.byte	0x91
 12501 15ad 70       		.sleb128 -16
 12502 15ae 00       		.byte	0
 12503 15af 00       		.byte	0
 12504 15b0 00       		.byte	0
 12505 15b1 22       		.uleb128 0x22
 12506 15b2 F0030000 		.4byte	.LASF259
 12507 15b6 01       		.byte	0x1
 12508 15b7 DA09     		.2byte	0x9da
 12509 15b9 00000000 		.4byte	.LFB76
 12510 15bd 78000000 		.4byte	.LFE76-.LFB76
 12511 15c1 01       		.uleb128 0x1
 12512 15c2 9C       		.byte	0x9c
 12513 15c3 04160000 		.4byte	0x1604
 12514 15c7 20       		.uleb128 0x20
 12515 15c8 7C0B0000 		.4byte	.LASF260
 12516 15cc 01       		.byte	0x1
 12517 15cd DA09     		.2byte	0x9da
 12518 15cf 81000000 		.4byte	0x81
 12519 15d3 02       		.uleb128 0x2
 12520 15d4 91       		.byte	0x91
 12521 15d5 6F       		.sleb128 -17
 12522 15d6 1B       		.uleb128 0x1b
 12523 15d7 18070000 		.4byte	.LASF229
 12524 15db 01       		.byte	0x1
 12525 15dc DC09     		.2byte	0x9dc
 12526 15de 81000000 		.4byte	0x81
 12527 15e2 02       		.uleb128 0x2
 12528 15e3 91       		.byte	0x91
 12529 15e4 73       		.sleb128 -13
 12530 15e5 1B       		.uleb128 0x1b
 12531 15e6 F00B0000 		.4byte	.LASF261
 12532 15ea 01       		.byte	0x1
 12533 15eb DD09     		.2byte	0x9dd
 12534 15ed 8D000000 		.4byte	0x8d
 12535 15f1 02       		.uleb128 0x2
 12536 15f2 91       		.byte	0x91
 12537 15f3 76       		.sleb128 -10
 12538 15f4 1B       		.uleb128 0x1b
 12539 15f5 0B080000 		.4byte	.LASF262
 12540 15f9 01       		.byte	0x1
 12541 15fa DE09     		.2byte	0x9de
 12542 15fc 8D000000 		.4byte	0x8d
 12543 1600 02       		.uleb128 0x2
 12544 1601 91       		.byte	0x91
 12545 1602 74       		.sleb128 -12
 12546 1603 00       		.byte	0
 12547 1604 24       		.uleb128 0x24
 12548 1605 88080000 		.4byte	.LASF263
 12549 1609 01       		.byte	0x1
 12550 160a EE09     		.2byte	0x9ee
 12551 160c 00000000 		.4byte	.LFB77
 12552 1610 20040000 		.4byte	.LFE77-.LFB77
 12553 1614 01       		.uleb128 0x1
 12554 1615 9C       		.byte	0x9c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 273


 12555 1616 30170000 		.4byte	0x1730
 12556 161a 1B       		.uleb128 0x1b
 12557 161b 59000000 		.4byte	.LASF264
 12558 161f 01       		.byte	0x1
 12559 1620 EF09     		.2byte	0x9ef
 12560 1622 81000000 		.4byte	0x81
 12561 1626 05       		.uleb128 0x5
 12562 1627 03       		.byte	0x3
 12563 1628 8A010000 		.4byte	pos_cycle_status.10724
 12564 162c 1B       		.uleb128 0x1b
 12565 162d 910D0000 		.4byte	.LASF265
 12566 1631 01       		.byte	0x1
 12567 1632 F009     		.2byte	0x9f0
 12568 1634 EA060000 		.4byte	0x6ea
 12569 1638 05       		.uleb128 0x5
 12570 1639 03       		.byte	0x3
 12571 163a 94010000 		.4byte	emg_cycle_status.10725
 12572 163e 1B       		.uleb128 0x1b
 12573 163f B70F0000 		.4byte	.LASF266
 12574 1643 01       		.byte	0x1
 12575 1644 F109     		.2byte	0x9f1
 12576 1646 81000000 		.4byte	0x81
 12577 164a 05       		.uleb128 0x5
 12578 164b 03       		.byte	0x3
 12579 164c 96010000 		.4byte	rest_cycle_status.10726
 12580 1650 1B       		.uleb128 0x1b
 12581 1651 22030000 		.4byte	.LASF267
 12582 1655 01       		.byte	0x1
 12583 1656 F209     		.2byte	0x9f2
 12584 1658 BD000000 		.4byte	0xbd
 12585 165c 05       		.uleb128 0x5
 12586 165d 03       		.byte	0x3
 12587 165e 08000000 		.4byte	bin_threshold.10727
 12588 1662 1B       		.uleb128 0x1b
 12589 1663 09020000 		.4byte	.LASF268
 12590 1667 01       		.byte	0x1
 12591 1668 F309     		.2byte	0x9f3
 12592 166a BD000000 		.4byte	0xbd
 12593 166e 05       		.uleb128 0x5
 12594 166f 03       		.byte	0x3
 12595 1670 8C010000 		.4byte	thr_pos.10728
 12596 1674 1B       		.uleb128 0x1b
 12597 1675 870A0000 		.4byte	.LASF269
 12598 1679 01       		.byte	0x1
 12599 167a F409     		.2byte	0x9f4
 12600 167c BD000000 		.4byte	0xbd
 12601 1680 05       		.uleb128 0x5
 12602 1681 03       		.byte	0x3
 12603 1682 90010000 		.4byte	max_pos.10729
 12604 1686 1D       		.uleb128 0x1d
 12605 1687 6900     		.ascii	"i\000"
 12606 1689 01       		.byte	0x1
 12607 168a F509     		.2byte	0x9f5
 12608 168c 81000000 		.4byte	0x81
 12609 1690 02       		.uleb128 0x2
 12610 1691 91       		.byte	0x91
 12611 1692 77       		.sleb128 -9
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 274


 12612 1693 1B       		.uleb128 0x1b
 12613 1694 89050000 		.4byte	.LASF270
 12614 1698 01       		.byte	0x1
 12615 1699 F509     		.2byte	0x9f5
 12616 169b 81000000 		.4byte	0x81
 12617 169f 02       		.uleb128 0x2
 12618 16a0 91       		.byte	0x91
 12619 16a1 63       		.sleb128 -29
 12620 16a2 1B       		.uleb128 0x1b
 12621 16a3 3B010000 		.4byte	.LASF271
 12622 16a7 01       		.byte	0x1
 12623 16a8 F509     		.2byte	0x9f5
 12624 16aa 81000000 		.4byte	0x81
 12625 16ae 02       		.uleb128 0x2
 12626 16af 91       		.byte	0x91
 12627 16b0 62       		.sleb128 -30
 12628 16b1 1B       		.uleb128 0x1b
 12629 16b2 F30C0000 		.4byte	.LASF272
 12630 16b6 01       		.byte	0x1
 12631 16b7 F509     		.2byte	0x9f5
 12632 16b9 81000000 		.4byte	0x81
 12633 16bd 02       		.uleb128 0x2
 12634 16be 91       		.byte	0x91
 12635 16bf 61       		.sleb128 -31
 12636 16c0 1B       		.uleb128 0x1b
 12637 16c1 F90C0000 		.4byte	.LASF273
 12638 16c5 01       		.byte	0x1
 12639 16c6 F509     		.2byte	0x9f5
 12640 16c8 81000000 		.4byte	0x81
 12641 16cc 02       		.uleb128 0x2
 12642 16cd 91       		.byte	0x91
 12643 16ce 60       		.sleb128 -32
 12644 16cf 1B       		.uleb128 0x1b
 12645 16d0 3E0D0000 		.4byte	.LASF274
 12646 16d4 01       		.byte	0x1
 12647 16d5 F609     		.2byte	0x9f6
 12648 16d7 BD000000 		.4byte	0xbd
 12649 16db 02       		.uleb128 0x2
 12650 16dc 91       		.byte	0x91
 12651 16dd 6C       		.sleb128 -20
 12652 16de 1B       		.uleb128 0x1b
 12653 16df CF040000 		.4byte	.LASF275
 12654 16e3 01       		.byte	0x1
 12655 16e4 F609     		.2byte	0x9f6
 12656 16e6 BD000000 		.4byte	0xbd
 12657 16ea 02       		.uleb128 0x2
 12658 16eb 91       		.byte	0x91
 12659 16ec 68       		.sleb128 -24
 12660 16ed 1B       		.uleb128 0x1b
 12661 16ee 8F0E0000 		.4byte	.LASF276
 12662 16f2 01       		.byte	0x1
 12663 16f3 F609     		.2byte	0x9f6
 12664 16f5 BD000000 		.4byte	0xbd
 12665 16f9 02       		.uleb128 0x2
 12666 16fa 91       		.byte	0x91
 12667 16fb 70       		.sleb128 -16
 12668 16fc 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 275


 12669 16fd 6A040000 		.4byte	.LASF277
 12670 1701 01       		.byte	0x1
 12671 1702 F709     		.2byte	0x9f7
 12672 1704 BD000000 		.4byte	0xbd
 12673 1708 02       		.uleb128 0x2
 12674 1709 91       		.byte	0x91
 12675 170a 64       		.sleb128 -28
 12676 170b 1B       		.uleb128 0x1b
 12677 170c BE060000 		.4byte	.LASF278
 12678 1710 01       		.byte	0x1
 12679 1711 F809     		.2byte	0x9f8
 12680 1713 99000000 		.4byte	0x99
 12681 1717 05       		.uleb128 0x5
 12682 1718 03       		.byte	0x3
 12683 1719 98010000 		.4byte	timer_value_s.10739
 12684 171d 1B       		.uleb128 0x1b
 12685 171e 59060000 		.4byte	.LASF279
 12686 1722 01       		.byte	0x1
 12687 1723 F809     		.2byte	0x9f8
 12688 1725 99000000 		.4byte	0x99
 12689 1729 05       		.uleb128 0x5
 12690 172a 03       		.byte	0x3
 12691 172b 9C010000 		.4byte	timer_value_e.10740
 12692 172f 00       		.byte	0
 12693 1730 24       		.uleb128 0x24
 12694 1731 220B0000 		.4byte	.LASF280
 12695 1735 01       		.byte	0x1
 12696 1736 680A     		.2byte	0xa68
 12697 1738 00000000 		.4byte	.LFB78
 12698 173c 08010000 		.4byte	.LFE78-.LFB78
 12699 1740 01       		.uleb128 0x1
 12700 1741 9C       		.byte	0x9c
 12701 1742 B6170000 		.4byte	0x17b6
 12702 1746 1B       		.uleb128 0x1b
 12703 1747 8F0F0000 		.4byte	.LASF281
 12704 174b 01       		.byte	0x1
 12705 174c 6A0A     		.2byte	0xa6a
 12706 174e EA000000 		.4byte	0xea
 12707 1752 02       		.uleb128 0x2
 12708 1753 91       		.byte	0x91
 12709 1754 64       		.sleb128 -28
 12710 1755 1B       		.uleb128 0x1b
 12711 1756 1F0D0000 		.4byte	.LASF282
 12712 175a 01       		.byte	0x1
 12713 175b 6B0A     		.2byte	0xa6b
 12714 175d 81000000 		.4byte	0x81
 12715 1761 05       		.uleb128 0x5
 12716 1762 03       		.byte	0x3
 12717 1763 A4010000 		.4byte	row_number.10762
 12718 1767 1B       		.uleb128 0x1b
 12719 1768 A2040000 		.4byte	.LASF283
 12720 176c 01       		.byte	0x1
 12721 176d 6C0A     		.2byte	0xa6c
 12722 176f 81000000 		.4byte	0x81
 12723 1773 02       		.uleb128 0x2
 12724 1774 91       		.byte	0x91
 12725 1775 77       		.sleb128 -9
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 276


 12726 1776 1B       		.uleb128 0x1b
 12727 1777 E10D0000 		.4byte	.LASF284
 12728 177b 01       		.byte	0x1
 12729 177c 6D0A     		.2byte	0xa6d
 12730 177e B6170000 		.4byte	0x17b6
 12731 1782 02       		.uleb128 0x2
 12732 1783 91       		.byte	0x91
 12733 1784 70       		.sleb128 -16
 12734 1785 1B       		.uleb128 0x1b
 12735 1786 43010000 		.4byte	.LASF285
 12736 178a 01       		.byte	0x1
 12737 178b 6E0A     		.2byte	0xa6e
 12738 178d B6170000 		.4byte	0x17b6
 12739 1791 02       		.uleb128 0x2
 12740 1792 91       		.byte	0x91
 12741 1793 6C       		.sleb128 -20
 12742 1794 1B       		.uleb128 0x1b
 12743 1795 23110000 		.4byte	.LASF286
 12744 1799 01       		.byte	0x1
 12745 179a 6F0A     		.2byte	0xa6f
 12746 179c 81000000 		.4byte	0x81
 12747 17a0 02       		.uleb128 0x2
 12748 17a1 91       		.byte	0x91
 12749 17a2 6B       		.sleb128 -21
 12750 17a3 1B       		.uleb128 0x1b
 12751 17a4 6D0A0000 		.4byte	.LASF287
 12752 17a8 01       		.byte	0x1
 12753 17a9 700A     		.2byte	0xa70
 12754 17ab B6170000 		.4byte	0x17b6
 12755 17af 05       		.uleb128 0x5
 12756 17b0 03       		.byte	0x3
 12757 17b1 A0010000 		.4byte	m_addr.10767
 12758 17b5 00       		.byte	0
 12759 17b6 0C       		.uleb128 0xc
 12760 17b7 04       		.byte	0x4
 12761 17b8 81000000 		.4byte	0x81
 12762 17bc 07       		.uleb128 0x7
 12763 17bd CC170000 		.4byte	0x17cc
 12764 17c1 CC170000 		.4byte	0x17cc
 12765 17c5 08       		.uleb128 0x8
 12766 17c6 0E010000 		.4byte	0x10e
 12767 17ca 1C       		.byte	0x1c
 12768 17cb 00       		.byte	0
 12769 17cc 27       		.uleb128 0x27
 12770 17cd 81000000 		.4byte	0x81
 12771 17d1 19       		.uleb128 0x19
 12772 17d2 EC0D0000 		.4byte	.LASF288
 12773 17d6 01       		.byte	0x1
 12774 17d7 40       		.byte	0x40
 12775 17d8 E2170000 		.4byte	0x17e2
 12776 17dc 05       		.uleb128 0x5
 12777 17dd 03       		.byte	0x3
 12778 17de 00000000 		.4byte	pwm_preload_values
 12779 17e2 27       		.uleb128 0x27
 12780 17e3 BC170000 		.4byte	0x17bc
 12781 17e7 28       		.uleb128 0x28
 12782 17e8 260F0000 		.4byte	.LASF289
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 277


 12783 17ec 08       		.byte	0x8
 12784 17ed 1207     		.2byte	0x712
 12785 17ef F3170000 		.4byte	0x17f3
 12786 17f3 06       		.uleb128 0x6
 12787 17f4 76000000 		.4byte	0x76
 12788 17f8 07       		.uleb128 0x7
 12789 17f9 A5010000 		.4byte	0x1a5
 12790 17fd 08180000 		.4byte	0x1808
 12791 1801 08       		.uleb128 0x8
 12792 1802 0E010000 		.4byte	0x10e
 12793 1806 01       		.byte	0x1
 12794 1807 00       		.byte	0
 12795 1808 28       		.uleb128 0x28
 12796 1809 FE060000 		.4byte	.LASF290
 12797 180d 07       		.byte	0x7
 12798 180e 1B02     		.2byte	0x21b
 12799 1810 F8170000 		.4byte	0x17f8
 12800 1814 28       		.uleb128 0x28
 12801 1815 C6040000 		.4byte	.LASF291
 12802 1819 07       		.byte	0x7
 12803 181a 1B02     		.2byte	0x21b
 12804 181c F8170000 		.4byte	0x17f8
 12805 1820 28       		.uleb128 0x28
 12806 1821 B20B0000 		.4byte	.LASF292
 12807 1825 07       		.byte	0x7
 12808 1826 1B02     		.2byte	0x21b
 12809 1828 F8170000 		.4byte	0x17f8
 12810 182c 07       		.uleb128 0x7
 12811 182d E2010000 		.4byte	0x1e2
 12812 1831 3C180000 		.4byte	0x183c
 12813 1835 08       		.uleb128 0x8
 12814 1836 0E010000 		.4byte	0x10e
 12815 183a 01       		.byte	0x1
 12816 183b 00       		.byte	0
 12817 183c 28       		.uleb128 0x28
 12818 183d B7060000 		.4byte	.LASF293
 12819 1841 07       		.byte	0x7
 12820 1842 1C02     		.2byte	0x21c
 12821 1844 2C180000 		.4byte	0x182c
 12822 1848 28       		.uleb128 0x28
 12823 1849 19110000 		.4byte	.LASF294
 12824 184d 07       		.byte	0x7
 12825 184e 1C02     		.2byte	0x21c
 12826 1850 2C180000 		.4byte	0x182c
 12827 1854 28       		.uleb128 0x28
 12828 1855 65100000 		.4byte	.LASF295
 12829 1859 07       		.byte	0x7
 12830 185a 1D02     		.2byte	0x21d
 12831 185c 63020000 		.4byte	0x263
 12832 1860 28       		.uleb128 0x28
 12833 1861 70030000 		.4byte	.LASF296
 12834 1865 07       		.byte	0x7
 12835 1866 1D02     		.2byte	0x21d
 12836 1868 63020000 		.4byte	0x263
 12837 186c 28       		.uleb128 0x28
 12838 186d C6000000 		.4byte	.LASF297
 12839 1871 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 278


 12840 1872 1F02     		.2byte	0x21f
 12841 1874 B4020000 		.4byte	0x2b4
 12842 1878 28       		.uleb128 0x28
 12843 1879 400E0000 		.4byte	.LASF298
 12844 187d 07       		.byte	0x7
 12845 187e 2002     		.2byte	0x220
 12846 1880 8D090000 		.4byte	0x98d
 12847 1884 28       		.uleb128 0x28
 12848 1885 740A0000 		.4byte	.LASF299
 12849 1889 07       		.byte	0x7
 12850 188a 2002     		.2byte	0x220
 12851 188c 8D090000 		.4byte	0x98d
 12852 1890 28       		.uleb128 0x28
 12853 1891 53090000 		.4byte	.LASF300
 12854 1895 07       		.byte	0x7
 12855 1896 2102     		.2byte	0x221
 12856 1898 660B0000 		.4byte	0xb66
 12857 189c 07       		.uleb128 0x7
 12858 189d 3E0B0000 		.4byte	0xb3e
 12859 18a1 AC180000 		.4byte	0x18ac
 12860 18a5 08       		.uleb128 0x8
 12861 18a6 0E010000 		.4byte	0x10e
 12862 18aa 01       		.byte	0x1
 12863 18ab 00       		.byte	0
 12864 18ac 28       		.uleb128 0x28
 12865 18ad 9E0B0000 		.4byte	.LASF301
 12866 18b1 07       		.byte	0x7
 12867 18b2 2202     		.2byte	0x222
 12868 18b4 9C180000 		.4byte	0x189c
 12869 18b8 28       		.uleb128 0x28
 12870 18b9 AE090000 		.4byte	.LASF302
 12871 18bd 07       		.byte	0x7
 12872 18be 2202     		.2byte	0x222
 12873 18c0 9C180000 		.4byte	0x189c
 12874 18c4 28       		.uleb128 0x28
 12875 18c5 840B0000 		.4byte	.LASF303
 12876 18c9 07       		.byte	0x7
 12877 18ca 2202     		.2byte	0x222
 12878 18cc 9C180000 		.4byte	0x189c
 12879 18d0 07       		.uleb128 0x7
 12880 18d1 3E0B0000 		.4byte	0xb3e
 12881 18d5 E0180000 		.4byte	0x18e0
 12882 18d9 08       		.uleb128 0x8
 12883 18da 0E010000 		.4byte	0x10e
 12884 18de 02       		.byte	0x2
 12885 18df 00       		.byte	0
 12886 18e0 28       		.uleb128 0x28
 12887 18e1 47050000 		.4byte	.LASF304
 12888 18e5 07       		.byte	0x7
 12889 18e6 2302     		.2byte	0x223
 12890 18e8 D0180000 		.4byte	0x18d0
 12891 18ec 07       		.uleb128 0x7
 12892 18ed 3E0B0000 		.4byte	0xb3e
 12893 18f1 FC180000 		.4byte	0x18fc
 12894 18f5 08       		.uleb128 0x8
 12895 18f6 0E010000 		.4byte	0x10e
 12896 18fa 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 279


 12897 18fb 00       		.byte	0
 12898 18fc 28       		.uleb128 0x28
 12899 18fd D3010000 		.4byte	.LASF305
 12900 1901 07       		.byte	0x7
 12901 1902 2402     		.2byte	0x224
 12902 1904 EC180000 		.4byte	0x18ec
 12903 1908 28       		.uleb128 0x28
 12904 1909 D5020000 		.4byte	.LASF306
 12905 190d 07       		.byte	0x7
 12906 190e 2602     		.2byte	0x226
 12907 1910 8D000000 		.4byte	0x8d
 12908 1914 28       		.uleb128 0x28
 12909 1915 33090000 		.4byte	.LASF307
 12910 1919 07       		.byte	0x7
 12911 191a 2702     		.2byte	0x227
 12912 191c 8D000000 		.4byte	0x8d
 12913 1920 28       		.uleb128 0x28
 12914 1921 2E0C0000 		.4byte	.LASF308
 12915 1925 07       		.byte	0x7
 12916 1926 2802     		.2byte	0x228
 12917 1928 D5000000 		.4byte	0xd5
 12918 192c 28       		.uleb128 0x28
 12919 192d C70C0000 		.4byte	.LASF309
 12920 1931 07       		.byte	0x7
 12921 1932 2A02     		.2byte	0x22a
 12922 1934 94020000 		.4byte	0x294
 12923 1938 28       		.uleb128 0x28
 12924 1939 810F0000 		.4byte	.LASF310
 12925 193d 07       		.byte	0x7
 12926 193e 2B02     		.2byte	0x22b
 12927 1940 EA060000 		.4byte	0x6ea
 12928 1944 28       		.uleb128 0x28
 12929 1945 C60E0000 		.4byte	.LASF311
 12930 1949 07       		.byte	0x7
 12931 194a 2C02     		.2byte	0x22c
 12932 194c EA060000 		.4byte	0x6ea
 12933 1950 28       		.uleb128 0x28
 12934 1951 07060000 		.4byte	.LASF312
 12935 1955 07       		.byte	0x7
 12936 1956 2D02     		.2byte	0x22d
 12937 1958 94020000 		.4byte	0x294
 12938 195c 28       		.uleb128 0x28
 12939 195d 330F0000 		.4byte	.LASF313
 12940 1961 07       		.byte	0x7
 12941 1962 2E02     		.2byte	0x22e
 12942 1964 94020000 		.4byte	0x294
 12943 1968 28       		.uleb128 0x28
 12944 1969 95060000 		.4byte	.LASF314
 12945 196d 07       		.byte	0x7
 12946 196e 3002     		.2byte	0x230
 12947 1970 120C0000 		.4byte	0xc12
 12948 1974 28       		.uleb128 0x28
 12949 1975 F0040000 		.4byte	.LASF315
 12950 1979 07       		.byte	0x7
 12951 197a 3102     		.2byte	0x231
 12952 197c DA0B0000 		.4byte	0xbda
 12953 1980 28       		.uleb128 0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 280


 12954 1981 46040000 		.4byte	.LASF316
 12955 1985 07       		.byte	0x7
 12956 1986 3202     		.2byte	0x232
 12957 1988 DA0B0000 		.4byte	0xbda
 12958 198c 28       		.uleb128 0x28
 12959 198d 5A0C0000 		.4byte	.LASF317
 12960 1991 07       		.byte	0x7
 12961 1992 3302     		.2byte	0x233
 12962 1994 DA0B0000 		.4byte	0xbda
 12963 1998 28       		.uleb128 0x28
 12964 1999 95100000 		.4byte	.LASF318
 12965 199d 07       		.byte	0x7
 12966 199e 3402     		.2byte	0x234
 12967 19a0 DA0B0000 		.4byte	0xbda
 12968 19a4 28       		.uleb128 0x28
 12969 19a5 37080000 		.4byte	.LASF319
 12970 19a9 07       		.byte	0x7
 12971 19aa 3702     		.2byte	0x237
 12972 19ac EA060000 		.4byte	0x6ea
 12973 19b0 28       		.uleb128 0x28
 12974 19b1 07010000 		.4byte	.LASF320
 12975 19b5 07       		.byte	0x7
 12976 19b6 3802     		.2byte	0x238
 12977 19b8 81000000 		.4byte	0x81
 12978 19bc 28       		.uleb128 0x28
 12979 19bd 5B040000 		.4byte	.LASF321
 12980 19c1 07       		.byte	0x7
 12981 19c2 3902     		.2byte	0x239
 12982 19c4 81000000 		.4byte	0x81
 12983 19c8 28       		.uleb128 0x28
 12984 19c9 25010000 		.4byte	.LASF322
 12985 19cd 07       		.byte	0x7
 12986 19ce 3A02     		.2byte	0x23a
 12987 19d0 81000000 		.4byte	0x81
 12988 19d4 28       		.uleb128 0x28
 12989 19d5 4D110000 		.4byte	.LASF323
 12990 19d9 07       		.byte	0x7
 12991 19da 3C02     		.2byte	0x23c
 12992 19dc 81000000 		.4byte	0x81
 12993 19e0 28       		.uleb128 0x28
 12994 19e1 A50B0000 		.4byte	.LASF324
 12995 19e5 07       		.byte	0x7
 12996 19e6 3D02     		.2byte	0x23d
 12997 19e8 81000000 		.4byte	0x81
 12998 19ec 28       		.uleb128 0x28
 12999 19ed AC040000 		.4byte	.LASF325
 13000 19f1 07       		.byte	0x7
 13001 19f2 3E02     		.2byte	0x23e
 13002 19f4 81000000 		.4byte	0x81
 13003 19f8 28       		.uleb128 0x28
 13004 19f9 17080000 		.4byte	.LASF326
 13005 19fd 07       		.byte	0x7
 13006 19fe 3F02     		.2byte	0x23f
 13007 1a00 81000000 		.4byte	0x81
 13008 1a04 28       		.uleb128 0x28
 13009 1a05 93090000 		.4byte	.LASF327
 13010 1a09 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 281


 13011 1a0a 4002     		.2byte	0x240
 13012 1a0c 81000000 		.4byte	0x81
 13013 1a10 07       		.uleb128 0x7
 13014 1a11 B1000000 		.4byte	0xb1
 13015 1a15 201A0000 		.4byte	0x1a20
 13016 1a19 08       		.uleb128 0x8
 13017 1a1a 0E010000 		.4byte	0x10e
 13018 1a1e 0B       		.byte	0xb
 13019 1a1f 00       		.byte	0
 13020 1a20 28       		.uleb128 0x28
 13021 1a21 53040000 		.4byte	.LASF328
 13022 1a25 07       		.byte	0x7
 13023 1a26 4402     		.2byte	0x244
 13024 1a28 101A0000 		.4byte	0x1a10
 13025 1a2c 28       		.uleb128 0x28
 13026 1a2d CC100000 		.4byte	.LASF329
 13027 1a31 07       		.byte	0x7
 13028 1a32 4502     		.2byte	0x245
 13029 1a34 81000000 		.4byte	0x81
 13030 1a38 07       		.uleb128 0x7
 13031 1a39 A5000000 		.4byte	0xa5
 13032 1a3d 481A0000 		.4byte	0x1a48
 13033 1a41 08       		.uleb128 0x8
 13034 1a42 0E010000 		.4byte	0x10e
 13035 1a46 01       		.byte	0x1
 13036 1a47 00       		.byte	0
 13037 1a48 28       		.uleb128 0x28
 13038 1a49 22050000 		.4byte	.LASF330
 13039 1a4d 07       		.byte	0x7
 13040 1a4e 4802     		.2byte	0x248
 13041 1a50 381A0000 		.4byte	0x1a38
 13042 1a54 07       		.uleb128 0x7
 13043 1a55 99000000 		.4byte	0x99
 13044 1a59 6A1A0000 		.4byte	0x1a6a
 13045 1a5d 08       		.uleb128 0x8
 13046 1a5e 0E010000 		.4byte	0x10e
 13047 1a62 01       		.byte	0x1
 13048 1a63 08       		.uleb128 0x8
 13049 1a64 0E010000 		.4byte	0x10e
 13050 1a68 04       		.byte	0x4
 13051 1a69 00       		.byte	0
 13052 1a6a 28       		.uleb128 0x28
 13053 1a6b ED060000 		.4byte	.LASF331
 13054 1a6f 07       		.byte	0x7
 13055 1a70 4B02     		.2byte	0x24b
 13056 1a72 541A0000 		.4byte	0x1a54
 13057 1a76 28       		.uleb128 0x28
 13058 1a77 6F0D0000 		.4byte	.LASF332
 13059 1a7b 07       		.byte	0x7
 13060 1a7c 4C02     		.2byte	0x24c
 13061 1a7e EA060000 		.4byte	0x6ea
 13062 1a82 07       		.uleb128 0x7
 13063 1a83 8D000000 		.4byte	0x8d
 13064 1a87 981A0000 		.4byte	0x1a98
 13065 1a8b 08       		.uleb128 0x8
 13066 1a8c 0E010000 		.4byte	0x10e
 13067 1a90 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 282


 13068 1a91 08       		.uleb128 0x8
 13069 1a92 0E010000 		.4byte	0x10e
 13070 1a96 04       		.byte	0x4
 13071 1a97 00       		.byte	0
 13072 1a98 28       		.uleb128 0x28
 13073 1a99 A10F0000 		.4byte	.LASF333
 13074 1a9d 07       		.byte	0x7
 13075 1a9e 4D02     		.2byte	0x24d
 13076 1aa0 821A0000 		.4byte	0x1a82
 13077 1aa4 07       		.uleb128 0x7
 13078 1aa5 81000000 		.4byte	0x81
 13079 1aa9 BA1A0000 		.4byte	0x1aba
 13080 1aad 08       		.uleb128 0x8
 13081 1aae 0E010000 		.4byte	0x10e
 13082 1ab2 01       		.byte	0x1
 13083 1ab3 08       		.uleb128 0x8
 13084 1ab4 0E010000 		.4byte	0x10e
 13085 1ab8 04       		.byte	0x4
 13086 1ab9 00       		.byte	0
 13087 1aba 28       		.uleb128 0x28
 13088 1abb CC060000 		.4byte	.LASF334
 13089 1abf 07       		.byte	0x7
 13090 1ac0 4E02     		.2byte	0x24e
 13091 1ac2 A41A0000 		.4byte	0x1aa4
 13092 1ac6 28       		.uleb128 0x28
 13093 1ac7 E0030000 		.4byte	.LASF335
 13094 1acb 07       		.byte	0x7
 13095 1acc 4F02     		.2byte	0x24f
 13096 1ace EA060000 		.4byte	0x6ea
 13097 1ad2 28       		.uleb128 0x28
 13098 1ad3 8F0A0000 		.4byte	.LASF336
 13099 1ad7 07       		.byte	0x7
 13100 1ad8 5202     		.2byte	0x252
 13101 1ada BD000000 		.4byte	0xbd
 13102 1ade 28       		.uleb128 0x28
 13103 1adf EA050000 		.4byte	.LASF337
 13104 1ae3 07       		.byte	0x7
 13105 1ae4 5502     		.2byte	0x255
 13106 1ae6 9F010000 		.4byte	0x19f
 13107 1aea 28       		.uleb128 0x28
 13108 1aeb A3070000 		.4byte	.LASF338
 13109 1aef 07       		.byte	0x7
 13110 1af0 5802     		.2byte	0x258
 13111 1af2 9F010000 		.4byte	0x19f
 13112 1af6 07       		.uleb128 0x7
 13113 1af7 C20A0000 		.4byte	0xac2
 13114 1afb 061B0000 		.4byte	0x1b06
 13115 1aff 08       		.uleb128 0x8
 13116 1b00 0E010000 		.4byte	0x10e
 13117 1b04 04       		.byte	0x4
 13118 1b05 00       		.byte	0
 13119 1b06 28       		.uleb128 0x28
 13120 1b07 41050000 		.4byte	.LASF339
 13121 1b0b 07       		.byte	0x7
 13122 1b0c 6002     		.2byte	0x260
 13123 1b0e F61A0000 		.4byte	0x1af6
 13124 1b12 28       		.uleb128 0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 283


 13125 1b13 39060000 		.4byte	.LASF340
 13126 1b17 07       		.byte	0x7
 13127 1b18 6002     		.2byte	0x260
 13128 1b1a F61A0000 		.4byte	0x1af6
 13129 1b1e 28       		.uleb128 0x28
 13130 1b1f EA100000 		.4byte	.LASF341
 13131 1b23 07       		.byte	0x7
 13132 1b24 6902     		.2byte	0x269
 13133 1b26 81000000 		.4byte	0x81
 13134 1b2a 00       		.byte	0
 13135              		.section	.debug_abbrev,"",%progbits
 13136              	.Ldebug_abbrev0:
 13137 0000 01       		.uleb128 0x1
 13138 0001 11       		.uleb128 0x11
 13139 0002 01       		.byte	0x1
 13140 0003 25       		.uleb128 0x25
 13141 0004 0E       		.uleb128 0xe
 13142 0005 13       		.uleb128 0x13
 13143 0006 0B       		.uleb128 0xb
 13144 0007 03       		.uleb128 0x3
 13145 0008 0E       		.uleb128 0xe
 13146 0009 1B       		.uleb128 0x1b
 13147 000a 0E       		.uleb128 0xe
 13148 000b 55       		.uleb128 0x55
 13149 000c 17       		.uleb128 0x17
 13150 000d 11       		.uleb128 0x11
 13151 000e 01       		.uleb128 0x1
 13152 000f 10       		.uleb128 0x10
 13153 0010 17       		.uleb128 0x17
 13154 0011 00       		.byte	0
 13155 0012 00       		.byte	0
 13156 0013 02       		.uleb128 0x2
 13157 0014 24       		.uleb128 0x24
 13158 0015 00       		.byte	0
 13159 0016 0B       		.uleb128 0xb
 13160 0017 0B       		.uleb128 0xb
 13161 0018 3E       		.uleb128 0x3e
 13162 0019 0B       		.uleb128 0xb
 13163 001a 03       		.uleb128 0x3
 13164 001b 0E       		.uleb128 0xe
 13165 001c 00       		.byte	0
 13166 001d 00       		.byte	0
 13167 001e 03       		.uleb128 0x3
 13168 001f 16       		.uleb128 0x16
 13169 0020 00       		.byte	0
 13170 0021 03       		.uleb128 0x3
 13171 0022 0E       		.uleb128 0xe
 13172 0023 3A       		.uleb128 0x3a
 13173 0024 0B       		.uleb128 0xb
 13174 0025 3B       		.uleb128 0x3b
 13175 0026 0B       		.uleb128 0xb
 13176 0027 49       		.uleb128 0x49
 13177 0028 13       		.uleb128 0x13
 13178 0029 00       		.byte	0
 13179 002a 00       		.byte	0
 13180 002b 04       		.uleb128 0x4
 13181 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 284


 13182 002d 00       		.byte	0
 13183 002e 0B       		.uleb128 0xb
 13184 002f 0B       		.uleb128 0xb
 13185 0030 3E       		.uleb128 0x3e
 13186 0031 0B       		.uleb128 0xb
 13187 0032 03       		.uleb128 0x3
 13188 0033 08       		.uleb128 0x8
 13189 0034 00       		.byte	0
 13190 0035 00       		.byte	0
 13191 0036 05       		.uleb128 0x5
 13192 0037 16       		.uleb128 0x16
 13193 0038 00       		.byte	0
 13194 0039 03       		.uleb128 0x3
 13195 003a 0E       		.uleb128 0xe
 13196 003b 3A       		.uleb128 0x3a
 13197 003c 0B       		.uleb128 0xb
 13198 003d 3B       		.uleb128 0x3b
 13199 003e 05       		.uleb128 0x5
 13200 003f 49       		.uleb128 0x49
 13201 0040 13       		.uleb128 0x13
 13202 0041 00       		.byte	0
 13203 0042 00       		.byte	0
 13204 0043 06       		.uleb128 0x6
 13205 0044 35       		.uleb128 0x35
 13206 0045 00       		.byte	0
 13207 0046 49       		.uleb128 0x49
 13208 0047 13       		.uleb128 0x13
 13209 0048 00       		.byte	0
 13210 0049 00       		.byte	0
 13211 004a 07       		.uleb128 0x7
 13212 004b 01       		.uleb128 0x1
 13213 004c 01       		.byte	0x1
 13214 004d 49       		.uleb128 0x49
 13215 004e 13       		.uleb128 0x13
 13216 004f 01       		.uleb128 0x1
 13217 0050 13       		.uleb128 0x13
 13218 0051 00       		.byte	0
 13219 0052 00       		.byte	0
 13220 0053 08       		.uleb128 0x8
 13221 0054 21       		.uleb128 0x21
 13222 0055 00       		.byte	0
 13223 0056 49       		.uleb128 0x49
 13224 0057 13       		.uleb128 0x13
 13225 0058 2F       		.uleb128 0x2f
 13226 0059 0B       		.uleb128 0xb
 13227 005a 00       		.byte	0
 13228 005b 00       		.byte	0
 13229 005c 09       		.uleb128 0x9
 13230 005d 04       		.uleb128 0x4
 13231 005e 01       		.byte	0x1
 13232 005f 03       		.uleb128 0x3
 13233 0060 0E       		.uleb128 0xe
 13234 0061 0B       		.uleb128 0xb
 13235 0062 0B       		.uleb128 0xb
 13236 0063 49       		.uleb128 0x49
 13237 0064 13       		.uleb128 0x13
 13238 0065 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 285


 13239 0066 0B       		.uleb128 0xb
 13240 0067 3B       		.uleb128 0x3b
 13241 0068 0B       		.uleb128 0xb
 13242 0069 01       		.uleb128 0x1
 13243 006a 13       		.uleb128 0x13
 13244 006b 00       		.byte	0
 13245 006c 00       		.byte	0
 13246 006d 0A       		.uleb128 0xa
 13247 006e 28       		.uleb128 0x28
 13248 006f 00       		.byte	0
 13249 0070 03       		.uleb128 0x3
 13250 0071 0E       		.uleb128 0xe
 13251 0072 1C       		.uleb128 0x1c
 13252 0073 0B       		.uleb128 0xb
 13253 0074 00       		.byte	0
 13254 0075 00       		.byte	0
 13255 0076 0B       		.uleb128 0xb
 13256 0077 13       		.uleb128 0x13
 13257 0078 00       		.byte	0
 13258 0079 03       		.uleb128 0x3
 13259 007a 0E       		.uleb128 0xe
 13260 007b 3C       		.uleb128 0x3c
 13261 007c 19       		.uleb128 0x19
 13262 007d 00       		.byte	0
 13263 007e 00       		.byte	0
 13264 007f 0C       		.uleb128 0xc
 13265 0080 0F       		.uleb128 0xf
 13266 0081 00       		.byte	0
 13267 0082 0B       		.uleb128 0xb
 13268 0083 0B       		.uleb128 0xb
 13269 0084 49       		.uleb128 0x49
 13270 0085 13       		.uleb128 0x13
 13271 0086 00       		.byte	0
 13272 0087 00       		.byte	0
 13273 0088 0D       		.uleb128 0xd
 13274 0089 13       		.uleb128 0x13
 13275 008a 01       		.byte	0x1
 13276 008b 03       		.uleb128 0x3
 13277 008c 0E       		.uleb128 0xe
 13278 008d 0B       		.uleb128 0xb
 13279 008e 0B       		.uleb128 0xb
 13280 008f 3A       		.uleb128 0x3a
 13281 0090 0B       		.uleb128 0xb
 13282 0091 3B       		.uleb128 0x3b
 13283 0092 0B       		.uleb128 0xb
 13284 0093 01       		.uleb128 0x1
 13285 0094 13       		.uleb128 0x13
 13286 0095 00       		.byte	0
 13287 0096 00       		.byte	0
 13288 0097 0E       		.uleb128 0xe
 13289 0098 0D       		.uleb128 0xd
 13290 0099 00       		.byte	0
 13291 009a 03       		.uleb128 0x3
 13292 009b 08       		.uleb128 0x8
 13293 009c 3A       		.uleb128 0x3a
 13294 009d 0B       		.uleb128 0xb
 13295 009e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 286


 13296 009f 0B       		.uleb128 0xb
 13297 00a0 49       		.uleb128 0x49
 13298 00a1 13       		.uleb128 0x13
 13299 00a2 38       		.uleb128 0x38
 13300 00a3 0B       		.uleb128 0xb
 13301 00a4 00       		.byte	0
 13302 00a5 00       		.byte	0
 13303 00a6 0F       		.uleb128 0xf
 13304 00a7 0D       		.uleb128 0xd
 13305 00a8 00       		.byte	0
 13306 00a9 03       		.uleb128 0x3
 13307 00aa 0E       		.uleb128 0xe
 13308 00ab 3A       		.uleb128 0x3a
 13309 00ac 0B       		.uleb128 0xb
 13310 00ad 3B       		.uleb128 0x3b
 13311 00ae 0B       		.uleb128 0xb
 13312 00af 49       		.uleb128 0x49
 13313 00b0 13       		.uleb128 0x13
 13314 00b1 38       		.uleb128 0x38
 13315 00b2 0B       		.uleb128 0xb
 13316 00b3 00       		.byte	0
 13317 00b4 00       		.byte	0
 13318 00b5 10       		.uleb128 0x10
 13319 00b6 13       		.uleb128 0x13
 13320 00b7 01       		.byte	0x1
 13321 00b8 03       		.uleb128 0x3
 13322 00b9 0E       		.uleb128 0xe
 13323 00ba 0B       		.uleb128 0xb
 13324 00bb 0B       		.uleb128 0xb
 13325 00bc 3A       		.uleb128 0x3a
 13326 00bd 0B       		.uleb128 0xb
 13327 00be 3B       		.uleb128 0x3b
 13328 00bf 05       		.uleb128 0x5
 13329 00c0 01       		.uleb128 0x1
 13330 00c1 13       		.uleb128 0x13
 13331 00c2 00       		.byte	0
 13332 00c3 00       		.byte	0
 13333 00c4 11       		.uleb128 0x11
 13334 00c5 0D       		.uleb128 0xd
 13335 00c6 00       		.byte	0
 13336 00c7 03       		.uleb128 0x3
 13337 00c8 0E       		.uleb128 0xe
 13338 00c9 3A       		.uleb128 0x3a
 13339 00ca 0B       		.uleb128 0xb
 13340 00cb 3B       		.uleb128 0x3b
 13341 00cc 05       		.uleb128 0x5
 13342 00cd 49       		.uleb128 0x49
 13343 00ce 13       		.uleb128 0x13
 13344 00cf 38       		.uleb128 0x38
 13345 00d0 0B       		.uleb128 0xb
 13346 00d1 00       		.byte	0
 13347 00d2 00       		.byte	0
 13348 00d3 12       		.uleb128 0x12
 13349 00d4 0D       		.uleb128 0xd
 13350 00d5 00       		.byte	0
 13351 00d6 03       		.uleb128 0x3
 13352 00d7 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 287


 13353 00d8 3A       		.uleb128 0x3a
 13354 00d9 0B       		.uleb128 0xb
 13355 00da 3B       		.uleb128 0x3b
 13356 00db 05       		.uleb128 0x5
 13357 00dc 49       		.uleb128 0x49
 13358 00dd 13       		.uleb128 0x13
 13359 00de 38       		.uleb128 0x38
 13360 00df 0B       		.uleb128 0xb
 13361 00e0 00       		.byte	0
 13362 00e1 00       		.byte	0
 13363 00e2 13       		.uleb128 0x13
 13364 00e3 13       		.uleb128 0x13
 13365 00e4 01       		.byte	0x1
 13366 00e5 03       		.uleb128 0x3
 13367 00e6 0E       		.uleb128 0xe
 13368 00e7 0B       		.uleb128 0xb
 13369 00e8 05       		.uleb128 0x5
 13370 00e9 3A       		.uleb128 0x3a
 13371 00ea 0B       		.uleb128 0xb
 13372 00eb 3B       		.uleb128 0x3b
 13373 00ec 05       		.uleb128 0x5
 13374 00ed 01       		.uleb128 0x1
 13375 00ee 13       		.uleb128 0x13
 13376 00ef 00       		.byte	0
 13377 00f0 00       		.byte	0
 13378 00f1 14       		.uleb128 0x14
 13379 00f2 0D       		.uleb128 0xd
 13380 00f3 00       		.byte	0
 13381 00f4 03       		.uleb128 0x3
 13382 00f5 08       		.uleb128 0x8
 13383 00f6 3A       		.uleb128 0x3a
 13384 00f7 0B       		.uleb128 0xb
 13385 00f8 3B       		.uleb128 0x3b
 13386 00f9 05       		.uleb128 0x5
 13387 00fa 49       		.uleb128 0x49
 13388 00fb 13       		.uleb128 0x13
 13389 00fc 38       		.uleb128 0x38
 13390 00fd 05       		.uleb128 0x5
 13391 00fe 00       		.byte	0
 13392 00ff 00       		.byte	0
 13393 0100 15       		.uleb128 0x15
 13394 0101 0D       		.uleb128 0xd
 13395 0102 00       		.byte	0
 13396 0103 03       		.uleb128 0x3
 13397 0104 0E       		.uleb128 0xe
 13398 0105 3A       		.uleb128 0x3a
 13399 0106 0B       		.uleb128 0xb
 13400 0107 3B       		.uleb128 0x3b
 13401 0108 05       		.uleb128 0x5
 13402 0109 49       		.uleb128 0x49
 13403 010a 13       		.uleb128 0x13
 13404 010b 38       		.uleb128 0x38
 13405 010c 05       		.uleb128 0x5
 13406 010d 00       		.byte	0
 13407 010e 00       		.byte	0
 13408 010f 16       		.uleb128 0x16
 13409 0110 04       		.uleb128 0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 288


 13410 0111 01       		.byte	0x1
 13411 0112 0B       		.uleb128 0xb
 13412 0113 0B       		.uleb128 0xb
 13413 0114 49       		.uleb128 0x49
 13414 0115 13       		.uleb128 0x13
 13415 0116 3A       		.uleb128 0x3a
 13416 0117 0B       		.uleb128 0xb
 13417 0118 3B       		.uleb128 0x3b
 13418 0119 05       		.uleb128 0x5
 13419 011a 01       		.uleb128 0x1
 13420 011b 13       		.uleb128 0x13
 13421 011c 00       		.byte	0
 13422 011d 00       		.byte	0
 13423 011e 17       		.uleb128 0x17
 13424 011f 2E       		.uleb128 0x2e
 13425 0120 00       		.byte	0
 13426 0121 3F       		.uleb128 0x3f
 13427 0122 19       		.uleb128 0x19
 13428 0123 03       		.uleb128 0x3
 13429 0124 0E       		.uleb128 0xe
 13430 0125 3A       		.uleb128 0x3a
 13431 0126 0B       		.uleb128 0xb
 13432 0127 3B       		.uleb128 0x3b
 13433 0128 0B       		.uleb128 0xb
 13434 0129 27       		.uleb128 0x27
 13435 012a 19       		.uleb128 0x19
 13436 012b 11       		.uleb128 0x11
 13437 012c 01       		.uleb128 0x1
 13438 012d 12       		.uleb128 0x12
 13439 012e 06       		.uleb128 0x6
 13440 012f 40       		.uleb128 0x40
 13441 0130 18       		.uleb128 0x18
 13442 0131 9742     		.uleb128 0x2117
 13443 0133 19       		.uleb128 0x19
 13444 0134 00       		.byte	0
 13445 0135 00       		.byte	0
 13446 0136 18       		.uleb128 0x18
 13447 0137 2E       		.uleb128 0x2e
 13448 0138 01       		.byte	0x1
 13449 0139 3F       		.uleb128 0x3f
 13450 013a 19       		.uleb128 0x19
 13451 013b 03       		.uleb128 0x3
 13452 013c 0E       		.uleb128 0xe
 13453 013d 3A       		.uleb128 0x3a
 13454 013e 0B       		.uleb128 0xb
 13455 013f 3B       		.uleb128 0x3b
 13456 0140 0B       		.uleb128 0xb
 13457 0141 11       		.uleb128 0x11
 13458 0142 01       		.uleb128 0x1
 13459 0143 12       		.uleb128 0x12
 13460 0144 06       		.uleb128 0x6
 13461 0145 40       		.uleb128 0x40
 13462 0146 18       		.uleb128 0x18
 13463 0147 9642     		.uleb128 0x2116
 13464 0149 19       		.uleb128 0x19
 13465 014a 01       		.uleb128 0x1
 13466 014b 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 289


 13467 014c 00       		.byte	0
 13468 014d 00       		.byte	0
 13469 014e 19       		.uleb128 0x19
 13470 014f 34       		.uleb128 0x34
 13471 0150 00       		.byte	0
 13472 0151 03       		.uleb128 0x3
 13473 0152 0E       		.uleb128 0xe
 13474 0153 3A       		.uleb128 0x3a
 13475 0154 0B       		.uleb128 0xb
 13476 0155 3B       		.uleb128 0x3b
 13477 0156 0B       		.uleb128 0xb
 13478 0157 49       		.uleb128 0x49
 13479 0158 13       		.uleb128 0x13
 13480 0159 02       		.uleb128 0x2
 13481 015a 18       		.uleb128 0x18
 13482 015b 00       		.byte	0
 13483 015c 00       		.byte	0
 13484 015d 1A       		.uleb128 0x1a
 13485 015e 2E       		.uleb128 0x2e
 13486 015f 01       		.byte	0x1
 13487 0160 3F       		.uleb128 0x3f
 13488 0161 19       		.uleb128 0x19
 13489 0162 03       		.uleb128 0x3
 13490 0163 0E       		.uleb128 0xe
 13491 0164 3A       		.uleb128 0x3a
 13492 0165 0B       		.uleb128 0xb
 13493 0166 3B       		.uleb128 0x3b
 13494 0167 05       		.uleb128 0x5
 13495 0168 27       		.uleb128 0x27
 13496 0169 19       		.uleb128 0x19
 13497 016a 11       		.uleb128 0x11
 13498 016b 01       		.uleb128 0x1
 13499 016c 12       		.uleb128 0x12
 13500 016d 06       		.uleb128 0x6
 13501 016e 40       		.uleb128 0x40
 13502 016f 18       		.uleb128 0x18
 13503 0170 9642     		.uleb128 0x2116
 13504 0172 19       		.uleb128 0x19
 13505 0173 01       		.uleb128 0x1
 13506 0174 13       		.uleb128 0x13
 13507 0175 00       		.byte	0
 13508 0176 00       		.byte	0
 13509 0177 1B       		.uleb128 0x1b
 13510 0178 34       		.uleb128 0x34
 13511 0179 00       		.byte	0
 13512 017a 03       		.uleb128 0x3
 13513 017b 0E       		.uleb128 0xe
 13514 017c 3A       		.uleb128 0x3a
 13515 017d 0B       		.uleb128 0xb
 13516 017e 3B       		.uleb128 0x3b
 13517 017f 05       		.uleb128 0x5
 13518 0180 49       		.uleb128 0x49
 13519 0181 13       		.uleb128 0x13
 13520 0182 02       		.uleb128 0x2
 13521 0183 18       		.uleb128 0x18
 13522 0184 00       		.byte	0
 13523 0185 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 290


 13524 0186 1C       		.uleb128 0x1c
 13525 0187 0B       		.uleb128 0xb
 13526 0188 01       		.byte	0x1
 13527 0189 11       		.uleb128 0x11
 13528 018a 01       		.uleb128 0x1
 13529 018b 12       		.uleb128 0x12
 13530 018c 06       		.uleb128 0x6
 13531 018d 01       		.uleb128 0x1
 13532 018e 13       		.uleb128 0x13
 13533 018f 00       		.byte	0
 13534 0190 00       		.byte	0
 13535 0191 1D       		.uleb128 0x1d
 13536 0192 34       		.uleb128 0x34
 13537 0193 00       		.byte	0
 13538 0194 03       		.uleb128 0x3
 13539 0195 08       		.uleb128 0x8
 13540 0196 3A       		.uleb128 0x3a
 13541 0197 0B       		.uleb128 0xb
 13542 0198 3B       		.uleb128 0x3b
 13543 0199 05       		.uleb128 0x5
 13544 019a 49       		.uleb128 0x49
 13545 019b 13       		.uleb128 0x13
 13546 019c 02       		.uleb128 0x2
 13547 019d 18       		.uleb128 0x18
 13548 019e 00       		.byte	0
 13549 019f 00       		.byte	0
 13550 01a0 1E       		.uleb128 0x1e
 13551 01a1 0B       		.uleb128 0xb
 13552 01a2 01       		.byte	0x1
 13553 01a3 11       		.uleb128 0x11
 13554 01a4 01       		.uleb128 0x1
 13555 01a5 12       		.uleb128 0x12
 13556 01a6 06       		.uleb128 0x6
 13557 01a7 00       		.byte	0
 13558 01a8 00       		.byte	0
 13559 01a9 1F       		.uleb128 0x1f
 13560 01aa 21       		.uleb128 0x21
 13561 01ab 00       		.byte	0
 13562 01ac 49       		.uleb128 0x49
 13563 01ad 13       		.uleb128 0x13
 13564 01ae 2F       		.uleb128 0x2f
 13565 01af 05       		.uleb128 0x5
 13566 01b0 00       		.byte	0
 13567 01b1 00       		.byte	0
 13568 01b2 20       		.uleb128 0x20
 13569 01b3 05       		.uleb128 0x5
 13570 01b4 00       		.byte	0
 13571 01b5 03       		.uleb128 0x3
 13572 01b6 0E       		.uleb128 0xe
 13573 01b7 3A       		.uleb128 0x3a
 13574 01b8 0B       		.uleb128 0xb
 13575 01b9 3B       		.uleb128 0x3b
 13576 01ba 05       		.uleb128 0x5
 13577 01bb 49       		.uleb128 0x49
 13578 01bc 13       		.uleb128 0x13
 13579 01bd 02       		.uleb128 0x2
 13580 01be 18       		.uleb128 0x18
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 291


 13581 01bf 00       		.byte	0
 13582 01c0 00       		.byte	0
 13583 01c1 21       		.uleb128 0x21
 13584 01c2 0B       		.uleb128 0xb
 13585 01c3 01       		.byte	0x1
 13586 01c4 55       		.uleb128 0x55
 13587 01c5 17       		.uleb128 0x17
 13588 01c6 00       		.byte	0
 13589 01c7 00       		.byte	0
 13590 01c8 22       		.uleb128 0x22
 13591 01c9 2E       		.uleb128 0x2e
 13592 01ca 01       		.byte	0x1
 13593 01cb 3F       		.uleb128 0x3f
 13594 01cc 19       		.uleb128 0x19
 13595 01cd 03       		.uleb128 0x3
 13596 01ce 0E       		.uleb128 0xe
 13597 01cf 3A       		.uleb128 0x3a
 13598 01d0 0B       		.uleb128 0xb
 13599 01d1 3B       		.uleb128 0x3b
 13600 01d2 05       		.uleb128 0x5
 13601 01d3 27       		.uleb128 0x27
 13602 01d4 19       		.uleb128 0x19
 13603 01d5 11       		.uleb128 0x11
 13604 01d6 01       		.uleb128 0x1
 13605 01d7 12       		.uleb128 0x12
 13606 01d8 06       		.uleb128 0x6
 13607 01d9 40       		.uleb128 0x40
 13608 01da 18       		.uleb128 0x18
 13609 01db 9742     		.uleb128 0x2117
 13610 01dd 19       		.uleb128 0x19
 13611 01de 01       		.uleb128 0x1
 13612 01df 13       		.uleb128 0x13
 13613 01e0 00       		.byte	0
 13614 01e1 00       		.byte	0
 13615 01e2 23       		.uleb128 0x23
 13616 01e3 0B       		.uleb128 0xb
 13617 01e4 01       		.byte	0x1
 13618 01e5 55       		.uleb128 0x55
 13619 01e6 17       		.uleb128 0x17
 13620 01e7 01       		.uleb128 0x1
 13621 01e8 13       		.uleb128 0x13
 13622 01e9 00       		.byte	0
 13623 01ea 00       		.byte	0
 13624 01eb 24       		.uleb128 0x24
 13625 01ec 2E       		.uleb128 0x2e
 13626 01ed 01       		.byte	0x1
 13627 01ee 3F       		.uleb128 0x3f
 13628 01ef 19       		.uleb128 0x19
 13629 01f0 03       		.uleb128 0x3
 13630 01f1 0E       		.uleb128 0xe
 13631 01f2 3A       		.uleb128 0x3a
 13632 01f3 0B       		.uleb128 0xb
 13633 01f4 3B       		.uleb128 0x3b
 13634 01f5 05       		.uleb128 0x5
 13635 01f6 11       		.uleb128 0x11
 13636 01f7 01       		.uleb128 0x1
 13637 01f8 12       		.uleb128 0x12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 292


 13638 01f9 06       		.uleb128 0x6
 13639 01fa 40       		.uleb128 0x40
 13640 01fb 18       		.uleb128 0x18
 13641 01fc 9642     		.uleb128 0x2116
 13642 01fe 19       		.uleb128 0x19
 13643 01ff 01       		.uleb128 0x1
 13644 0200 13       		.uleb128 0x13
 13645 0201 00       		.byte	0
 13646 0202 00       		.byte	0
 13647 0203 25       		.uleb128 0x25
 13648 0204 05       		.uleb128 0x5
 13649 0205 00       		.byte	0
 13650 0206 03       		.uleb128 0x3
 13651 0207 08       		.uleb128 0x8
 13652 0208 3A       		.uleb128 0x3a
 13653 0209 0B       		.uleb128 0xb
 13654 020a 3B       		.uleb128 0x3b
 13655 020b 05       		.uleb128 0x5
 13656 020c 49       		.uleb128 0x49
 13657 020d 13       		.uleb128 0x13
 13658 020e 02       		.uleb128 0x2
 13659 020f 18       		.uleb128 0x18
 13660 0210 00       		.byte	0
 13661 0211 00       		.byte	0
 13662 0212 26       		.uleb128 0x26
 13663 0213 2E       		.uleb128 0x2e
 13664 0214 01       		.byte	0x1
 13665 0215 3F       		.uleb128 0x3f
 13666 0216 19       		.uleb128 0x19
 13667 0217 03       		.uleb128 0x3
 13668 0218 0E       		.uleb128 0xe
 13669 0219 3A       		.uleb128 0x3a
 13670 021a 0B       		.uleb128 0xb
 13671 021b 3B       		.uleb128 0x3b
 13672 021c 05       		.uleb128 0x5
 13673 021d 11       		.uleb128 0x11
 13674 021e 01       		.uleb128 0x1
 13675 021f 12       		.uleb128 0x12
 13676 0220 06       		.uleb128 0x6
 13677 0221 40       		.uleb128 0x40
 13678 0222 18       		.uleb128 0x18
 13679 0223 9742     		.uleb128 0x2117
 13680 0225 19       		.uleb128 0x19
 13681 0226 01       		.uleb128 0x1
 13682 0227 13       		.uleb128 0x13
 13683 0228 00       		.byte	0
 13684 0229 00       		.byte	0
 13685 022a 27       		.uleb128 0x27
 13686 022b 26       		.uleb128 0x26
 13687 022c 00       		.byte	0
 13688 022d 49       		.uleb128 0x49
 13689 022e 13       		.uleb128 0x13
 13690 022f 00       		.byte	0
 13691 0230 00       		.byte	0
 13692 0231 28       		.uleb128 0x28
 13693 0232 34       		.uleb128 0x34
 13694 0233 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 293


 13695 0234 03       		.uleb128 0x3
 13696 0235 0E       		.uleb128 0xe
 13697 0236 3A       		.uleb128 0x3a
 13698 0237 0B       		.uleb128 0xb
 13699 0238 3B       		.uleb128 0x3b
 13700 0239 05       		.uleb128 0x5
 13701 023a 49       		.uleb128 0x49
 13702 023b 13       		.uleb128 0x13
 13703 023c 3F       		.uleb128 0x3f
 13704 023d 19       		.uleb128 0x19
 13705 023e 3C       		.uleb128 0x3c
 13706 023f 19       		.uleb128 0x19
 13707 0240 00       		.byte	0
 13708 0241 00       		.byte	0
 13709 0242 00       		.byte	0
 13710              		.section	.debug_aranges,"",%progbits
 13711 0000 8C000000 		.4byte	0x8c
 13712 0004 0200     		.2byte	0x2
 13713 0006 00000000 		.4byte	.Ldebug_info0
 13714 000a 04       		.byte	0x4
 13715 000b 00       		.byte	0
 13716 000c 0000     		.2byte	0
 13717 000e 0000     		.2byte	0
 13718 0010 00000000 		.4byte	.LFB64
 13719 0014 18000000 		.4byte	.LFE64-.LFB64
 13720 0018 00000000 		.4byte	.LFB65
 13721 001c 20000000 		.4byte	.LFE65-.LFB65
 13722 0020 00000000 		.4byte	.LFB66
 13723 0024 F4010000 		.4byte	.LFE66-.LFB66
 13724 0028 00000000 		.4byte	.LFB67
 13725 002c 24080000 		.4byte	.LFE67-.LFB67
 13726 0030 00000000 		.4byte	.LFB68
 13727 0034 CC050000 		.4byte	.LFE68-.LFB68
 13728 0038 00000000 		.4byte	.LFB69
 13729 003c 34030000 		.4byte	.LFE69-.LFB69
 13730 0040 00000000 		.4byte	.LFB70
 13731 0044 B0010000 		.4byte	.LFE70-.LFB70
 13732 0048 00000000 		.4byte	.LFB71
 13733 004c 0C070000 		.4byte	.LFE71-.LFB71
 13734 0050 00000000 		.4byte	.LFB72
 13735 0054 44080000 		.4byte	.LFE72-.LFB72
 13736 0058 00000000 		.4byte	.LFB73
 13737 005c 18080000 		.4byte	.LFE73-.LFB73
 13738 0060 00000000 		.4byte	.LFB74
 13739 0064 98110000 		.4byte	.LFE74-.LFB74
 13740 0068 00000000 		.4byte	.LFB75
 13741 006c FC000000 		.4byte	.LFE75-.LFB75
 13742 0070 00000000 		.4byte	.LFB76
 13743 0074 78000000 		.4byte	.LFE76-.LFB76
 13744 0078 00000000 		.4byte	.LFB77
 13745 007c 20040000 		.4byte	.LFE77-.LFB77
 13746 0080 00000000 		.4byte	.LFB78
 13747 0084 08010000 		.4byte	.LFE78-.LFB78
 13748 0088 00000000 		.4byte	0
 13749 008c 00000000 		.4byte	0
 13750              		.section	.debug_ranges,"",%progbits
 13751              	.Ldebug_ranges0:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 294


 13752 0000 68010000 		.4byte	.LBB4
 13753 0004 AA010000 		.4byte	.LBE4
 13754 0008 AC010000 		.4byte	.LBB5
 13755 000c F2010000 		.4byte	.LBE5
 13756 0010 00000000 		.4byte	0
 13757 0014 00000000 		.4byte	0
 13758 0018 3A000000 		.4byte	.LBB6
 13759 001c 40010000 		.4byte	.LBE6
 13760 0020 42010000 		.4byte	.LBB7
 13761 0024 BC010000 		.4byte	.LBE7
 13762 0028 00000000 		.4byte	0
 13763 002c 00000000 		.4byte	0
 13764 0030 BE010000 		.4byte	.LBB8
 13765 0034 20030000 		.4byte	.LBE8
 13766 0038 22030000 		.4byte	.LBB9
 13767 003c 24030000 		.4byte	.LBE9
 13768 0040 00000000 		.4byte	0
 13769 0044 00000000 		.4byte	0
 13770 0048 00000000 		.4byte	.LFB64
 13771 004c 18000000 		.4byte	.LFE64
 13772 0050 00000000 		.4byte	.LFB65
 13773 0054 20000000 		.4byte	.LFE65
 13774 0058 00000000 		.4byte	.LFB66
 13775 005c F4010000 		.4byte	.LFE66
 13776 0060 00000000 		.4byte	.LFB67
 13777 0064 24080000 		.4byte	.LFE67
 13778 0068 00000000 		.4byte	.LFB68
 13779 006c CC050000 		.4byte	.LFE68
 13780 0070 00000000 		.4byte	.LFB69
 13781 0074 34030000 		.4byte	.LFE69
 13782 0078 00000000 		.4byte	.LFB70
 13783 007c B0010000 		.4byte	.LFE70
 13784 0080 00000000 		.4byte	.LFB71
 13785 0084 0C070000 		.4byte	.LFE71
 13786 0088 00000000 		.4byte	.LFB72
 13787 008c 44080000 		.4byte	.LFE72
 13788 0090 00000000 		.4byte	.LFB73
 13789 0094 18080000 		.4byte	.LFE73
 13790 0098 00000000 		.4byte	.LFB74
 13791 009c 98110000 		.4byte	.LFE74
 13792 00a0 00000000 		.4byte	.LFB75
 13793 00a4 FC000000 		.4byte	.LFE75
 13794 00a8 00000000 		.4byte	.LFB76
 13795 00ac 78000000 		.4byte	.LFE76
 13796 00b0 00000000 		.4byte	.LFB77
 13797 00b4 20040000 		.4byte	.LFE77
 13798 00b8 00000000 		.4byte	.LFB78
 13799 00bc 08010000 		.4byte	.LFE78
 13800 00c0 00000000 		.4byte	0
 13801 00c4 00000000 		.4byte	0
 13802              		.section	.debug_line,"",%progbits
 13803              	.Ldebug_line0:
 13804 0000 7E0B0000 		.section	.debug_str,"MS",%progbits,1
 13804      0200AC01 
 13804      00000201 
 13804      FB0E0D00 
 13804      01010101 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 295


 13805              	.LASF344:
 13806 0000 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GitHub\\SoftHandPRO-a"
 13806      73657273 
 13806      5C4D6174 
 13806      7469615C 
 13806      446F6375 
 13807 002e 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Generic.cydsn\000"
 13807      656E6572 
 13807      69632D46 
 13807      572D5053 
 13807      6F43355C 
 13808              	.LASF24:
 13809 0050 73697A65 		.ascii	"sizetype\000"
 13809      74797065 
 13809      00
 13810              	.LASF264:
 13811 0059 706F735F 		.ascii	"pos_cycle_status\000"
 13811      6379636C 
 13811      655F7374 
 13811      61747573 
 13811      00
 13812              	.LASF142:
 13813 006a 77726973 		.ascii	"wrist_direction_association\000"
 13813      745F6469 
 13813      72656374 
 13813      696F6E5F 
 13813      6173736F 
 13814              	.LASF30:
 13815 0086 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 13815      545F4D4F 
 13815      44455F45 
 13815      4D475F46 
 13815      4346535F 
 13816              	.LASF117:
 13817 009e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 13817      5F414443 
 13817      5F73656E 
 13817      736F7273 
 13817      5F706F72 
 13818              	.LASF147:
 13819 00b9 75736572 		.ascii	"user\000"
 13819      00
 13820              	.LASF10:
 13821 00be 696E7433 		.ascii	"int32_t\000"
 13821      325F7400 
 13822              	.LASF297:
 13823 00c6 675F7278 		.ascii	"g_rx\000"
 13823      00
 13824              	.LASF242:
 13825 00cb 6F6E655F 		.ascii	"one_time_execute\000"
 13825      74696D65 
 13825      5F657865 
 13825      63757465 
 13825      00
 13826              	.LASF49:
 13827 00dc 73745F64 		.ascii	"st_data\000"
 13827      61746100 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 296


 13828              	.LASF13:
 13829 00e4 75696E74 		.ascii	"uint32\000"
 13829      333200
 13830              	.LASF227:
 13831 00eb 6E5F6C69 		.ascii	"n_line\000"
 13831      6E6500
 13832              	.LASF148:
 13833 00f2 4A4F595F 		.ascii	"JOY_spec\000"
 13833      73706563 
 13833      00
 13834              	.LASF85:
 13835 00fb 706F735F 		.ascii	"pos_lim_inf\000"
 13835      6C696D5F 
 13835      696E6600 
 13836              	.LASF320:
 13837 0107 74656E73 		.ascii	"tension_valid\000"
 13837      696F6E5F 
 13837      76616C69 
 13837      6400
 13838              	.LASF203:
 13839 0115 6572725F 		.ascii	"err_joy_1\000"
 13839      6A6F795F 
 13839      3100
 13840              	.LASF179:
 13841 011f 73746174 		.ascii	"state\000"
 13841      6500
 13842              	.LASF322:
 13843 0125 6379636C 		.ascii	"cycles_interrupt_flag\000"
 13843      65735F69 
 13843      6E746572 
 13843      72757074 
 13843      5F666C61 
 13844              	.LASF271:
 13845 013b 62696E5F 		.ascii	"bin_max\000"
 13845      6D617800 
 13846              	.LASF285:
 13847 0143 61646472 		.ascii	"addr_start_c\000"
 13847      5F737461 
 13847      72745F63 
 13847      00
 13848              	.LASF29:
 13849 0150 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 13849      545F4D4F 
 13849      44455F45 
 13849      4D475F46 
 13849      43465300 
 13850              	.LASF89:
 13851 0164 63757272 		.ascii	"curr_lookup\000"
 13851      5F6C6F6F 
 13851      6B757000 
 13852              	.LASF212:
 13853 0170 70776D5F 		.ascii	"pwm_input\000"
 13853      696E7075 
 13853      7400
 13854              	.LASF57:
 13855 017a 72657374 		.ascii	"rest_counter\000"
 13855      5F636F75 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 297


 13855      6E746572 
 13855      00
 13856              	.LASF132:
 13857 0187 73745F4D 		.ascii	"st_MASTER_spec\000"
 13857      41535445 
 13857      525F7370 
 13857      656300
 13858              	.LASF28:
 13859 0196 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 13859      545F4D4F 
 13859      44455F45 
 13859      4D475F49 
 13859      4E544547 
 13860              	.LASF257:
 13861 01ae 765F636F 		.ascii	"v_count\000"
 13861      756E7400 
 13862              	.LASF184:
 13863 01b6 72785F64 		.ascii	"rx_data\000"
 13863      61746100 
 13864              	.LASF246:
 13865 01be 7676765F 		.ascii	"vvv_value\000"
 13865      76616C75 
 13865      6500
 13866              	.LASF14:
 13867 01c8 696E7438 		.ascii	"int8\000"
 13867      00
 13868              	.LASF189:
 13869 01cd 696E666F 		.ascii	"info_\000"
 13869      5F00
 13870              	.LASF305:
 13871 01d3 66696C74 		.ascii	"filt_emg\000"
 13871      5F656D67 
 13871      00
 13872              	.LASF104:
 13873 01dc 73745F65 		.ascii	"st_emg\000"
 13873      6D6700
 13874              	.LASF55:
 13875 01e3 706F7369 		.ascii	"position_hist\000"
 13875      74696F6E 
 13875      5F686973 
 13875      7400
 13876              	.LASF171:
 13877 01f1 50524550 		.ascii	"PREPARE_DATA\000"
 13877      4152455F 
 13877      44415441 
 13877      00
 13878              	.LASF155:
 13879 01fe 74656D70 		.ascii	"temp_value\000"
 13879      5F76616C 
 13879      756500
 13880              	.LASF268:
 13881 0209 7468725F 		.ascii	"thr_pos\000"
 13881      706F7300 
 13882              	.LASF139:
 13883 0211 73745F57 		.ascii	"st_WR_spec\000"
 13883      525F7370 
 13883      656300
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 298


 13884              	.LASF205:
 13885 021c 6572725F 		.ascii	"err_joy_2\000"
 13885      6A6F795F 
 13885      3200
 13886              	.LASF52:
 13887 0226 72656164 		.ascii	"ready\000"
 13887      7900
 13888              	.LASF101:
 13889 022c 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 13889      6964785F 
 13889      7573655F 
 13889      666F725F 
 13889      636F6E74 
 13890              	.LASF158:
 13891 0244 6761696E 		.ascii	"gain\000"
 13891      00
 13892              	.LASF61:
 13893 0249 73745F64 		.ascii	"st_device\000"
 13893      65766963 
 13893      6500
 13894              	.LASF27:
 13895 0253 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 13895      545F4D4F 
 13895      44455F45 
 13895      4D475F50 
 13895      524F504F 
 13896              	.LASF66:
 13897 026f 7573655F 		.ascii	"use_2nd_motor_flag\000"
 13897      326E645F 
 13897      6D6F746F 
 13897      725F666C 
 13897      616700
 13898              	.LASF251:
 13899 0282 55445F63 		.ascii	"UD_counter\000"
 13899      6F756E74 
 13899      657200
 13900              	.LASF167:
 13901 028d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 13901      414E445F 
 13901      4D45414E 
 13901      00
 13902              	.LASF111:
 13903 029a 72656164 		.ascii	"read_imu_flag\000"
 13903      5F696D75 
 13903      5F666C61 
 13903      6700
 13904              	.LASF119:
 13905 02a8 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 13905      72645F45 
 13905      4D475F68 
 13905      6973746F 
 13905      72795F6F 
 13906              	.LASF255:
 13907 02c1 66697273 		.ascii	"first_tension_valid\000"
 13907      745F7465 
 13907      6E73696F 
 13907      6E5F7661 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 299


 13907      6C696400 
 13908              	.LASF306:
 13909 02d5 74696D65 		.ascii	"timer_value\000"
 13909      725F7661 
 13909      6C756500 
 13910              	.LASF4:
 13911 02e1 6C6F6E67 		.ascii	"long int\000"
 13911      20696E74 
 13911      00
 13912              	.LASF145:
 13913 02ea 756E7573 		.ascii	"unused_bytes1\000"
 13913      65645F62 
 13913      79746573 
 13913      3100
 13914              	.LASF192:
 13915 02f8 454D475F 		.ascii	"EMG_history_info_\000"
 13915      68697374 
 13915      6F72795F 
 13915      696E666F 
 13915      5F00
 13916              	.LASF217:
 13917 030a 53485F45 		.ascii	"SH_ENC_L\000"
 13917      4E435F4C 
 13917      00
 13918              	.LASF65:
 13919 0313 72657365 		.ascii	"reset_counters\000"
 13919      745F636F 
 13919      756E7465 
 13919      727300
 13920              	.LASF267:
 13921 0322 62696E5F 		.ascii	"bin_threshold\000"
 13921      74687265 
 13921      73686F6C 
 13921      6400
 13922              	.LASF122:
 13923 0330 75736572 		.ascii	"user_emg\000"
 13923      5F656D67 
 13923      00
 13924              	.LASF241:
 13925 0339 73616665 		.ascii	"safe_startup_motor_activation\000"
 13925      5F737461 
 13925      72747570 
 13925      5F6D6F74 
 13925      6F725F61 
 13926              	.LASF70:
 13927 0357 756E7573 		.ascii	"unused_bytes\000"
 13927      65645F62 
 13927      79746573 
 13927      00
 13928              	.LASF151:
 13929 0364 61636365 		.ascii	"accel_value\000"
 13929      6C5F7661 
 13929      6C756500 
 13930              	.LASF296:
 13931 0370 675F6164 		.ascii	"g_adc_measOld\000"
 13931      635F6D65 
 13931      61734F6C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 300


 13931      6400
 13932              	.LASF230:
 13933 037e 6175785F 		.ascii	"aux_encoder\000"
 13933      656E636F 
 13933      64657200 
 13934              	.LASF53:
 13935 038a 73745F63 		.ascii	"st_counters\000"
 13935      6F756E74 
 13935      65727300 
 13936              	.LASF216:
 13937 0396 53485F4D 		.ascii	"SH_MOT\000"
 13937      4F5400
 13938              	.LASF17:
 13939 039d 666C6F61 		.ascii	"float32\000"
 13939      74333200 
 13940              	.LASF226:
 13941 03a5 656E636F 		.ascii	"encoder_reading_SPI\000"
 13941      6465725F 
 13941      72656164 
 13941      696E675F 
 13941      53504900 
 13942              	.LASF239:
 13943 03b9 6572726F 		.ascii	"error\000"
 13943      7200
 13944              	.LASF54:
 13945 03bf 656D675F 		.ascii	"emg_counter\000"
 13945      636F756E 
 13945      74657200 
 13946              	.LASF174:
 13947 03cb 57524954 		.ascii	"WRITE_END\000"
 13947      455F454E 
 13947      4400
 13948              	.LASF252:
 13949 03d5 4C525F63 		.ascii	"LR_counter\000"
 13949      6F756E74 
 13949      657200
 13950              	.LASF335:
 13951 03e0 706F735F 		.ascii	"pos_reconstruct\000"
 13951      7265636F 
 13951      6E737472 
 13951      75637400 
 13952              	.LASF259:
 13953 03f0 70776D5F 		.ascii	"pwm_limit_search\000"
 13953      6C696D69 
 13953      745F7365 
 13953      61726368 
 13953      00
 13954              	.LASF0:
 13955 0401 7369676E 		.ascii	"signed char\000"
 13955      65642063 
 13955      68617200 
 13956              	.LASF121:
 13957 040d 75736572 		.ascii	"user_code_string\000"
 13957      5F636F64 
 13957      655F7374 
 13957      72696E67 
 13957      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 301


 13958              	.LASF159:
 13959 041e 73745F63 		.ascii	"st_calib\000"
 13959      616C6962 
 13959      00
 13960              	.LASF199:
 13961 0427 6572725F 		.ascii	"err_emg_1\000"
 13961      656D675F 
 13961      3100
 13962              	.LASF200:
 13963 0431 6572725F 		.ascii	"err_emg_2\000"
 13963      656D675F 
 13963      3200
 13964              	.LASF109:
 13965 043b 73776974 		.ascii	"switch_emg\000"
 13965      63685F65 
 13965      6D6700
 13966              	.LASF316:
 13967 0446 656D675F 		.ascii	"emg_2_status\000"
 13967      325F7374 
 13967      61747573 
 13967      00
 13968              	.LASF328:
 13969 0453 4144435F 		.ascii	"ADC_buf\000"
 13969      62756600 
 13970              	.LASF321:
 13971 045b 696E7465 		.ascii	"interrupt_flag\000"
 13971      72727570 
 13971      745F666C 
 13971      616700
 13972              	.LASF277:
 13973 046a 73746570 		.ascii	"step\000"
 13973      00
 13974              	.LASF219:
 13975 046f 63757272 		.ascii	"curr_error_sum\000"
 13975      5F657272 
 13975      6F725F73 
 13975      756D00
 13976              	.LASF1:
 13977 047e 756E7369 		.ascii	"unsigned char\000"
 13977      676E6564 
 13977      20636861 
 13977      7200
 13978              	.LASF95:
 13979 048c 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 13979      72657665 
 13979      72735F6D 
 13979      6F746F72 
 13979      5F666C61 
 13980              	.LASF283:
 13981 04a2 726F775F 		.ascii	"row_start\000"
 13981      73746172 
 13981      7400
 13982              	.LASF325:
 13983 04ac 666F7263 		.ascii	"forced_open\000"
 13983      65645F6F 
 13983      70656E00 
 13984              	.LASF234:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 302


 13985 04b8 73706565 		.ascii	"speed_encoder\000"
 13985      645F656E 
 13985      636F6465 
 13985      7200
 13986              	.LASF291:
 13987 04c6 675F7265 		.ascii	"g_refNew\000"
 13987      664E6577 
 13987      00
 13988              	.LASF275:
 13989 04cf 63757272 		.ascii	"curr_off\000"
 13989      5F6F6666 
 13989      00
 13990              	.LASF64:
 13991 04d8 72696768 		.ascii	"right_left\000"
 13991      745F6C65 
 13991      667400
 13992              	.LASF93:
 13993 04e3 656E636F 		.ascii	"encoder_line\000"
 13993      6465725F 
 13993      6C696E65 
 13993      00
 13994              	.LASF315:
 13995 04f0 656D675F 		.ascii	"emg_1_status\000"
 13995      315F7374 
 13995      61747573 
 13995      00
 13996              	.LASF150:
 13997 04fd 666C6167 		.ascii	"flags\000"
 13997      7300
 13998              	.LASF198:
 13999 0503 68616E64 		.ascii	"handle_value\000"
 13999      6C655F76 
 13999      616C7565 
 13999      00
 14000              	.LASF20:
 14001 0510 63686172 		.ascii	"char\000"
 14001      00
 14002              	.LASF88:
 14003 0515 6D61785F 		.ascii	"max_step_pos\000"
 14003      73746570 
 14003      5F706F73 
 14003      00
 14004              	.LASF330:
 14005 0522 70776D5F 		.ascii	"pwm_sign\000"
 14005      7369676E 
 14005      00
 14006              	.LASF225:
 14007 052b 6D6F746F 		.ascii	"motor_control_generic\000"
 14007      725F636F 
 14007      6E74726F 
 14007      6C5F6765 
 14007      6E657269 
 14008              	.LASF339:
 14009 0541 675F696D 		.ascii	"g_imu\000"
 14009      7500
 14010              	.LASF304:
 14011 0547 66696C74 		.ascii	"filt_vel\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 303


 14011      5F76656C 
 14011      00
 14012              	.LASF94:
 14013 0550 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14013      72617465 
 14013      5F6C696D 
 14013      69746572 
 14013      00
 14014              	.LASF74:
 14015 0561 6B5F645F 		.ascii	"k_d_c\000"
 14015      6300
 14016              	.LASF170:
 14017 0567 6164635F 		.ascii	"adc_status\000"
 14017      73746174 
 14017      757300
 14018              	.LASF99:
 14019 0572 6D5F6D75 		.ascii	"m_mult\000"
 14019      6C7400
 14020              	.LASF73:
 14021 0579 6B5F695F 		.ascii	"k_i_c\000"
 14021      6300
 14022              	.LASF223:
 14023 057f 6D6F746F 		.ascii	"motor_dir\000"
 14023      725F6469 
 14023      7200
 14024              	.LASF270:
 14025 0589 62696E5F 		.ascii	"bin_st\000"
 14025      737400
 14026              	.LASF177:
 14027 0590 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14027      52533438 
 14027      355F5258 
 14027      5F457849 
 14027      6E746572 
 14028              	.LASF86:
 14029 05a9 706F735F 		.ascii	"pos_lim_sup\000"
 14029      6C696D5F 
 14029      73757000 
 14030              	.LASF157:
 14031 05b5 6F6C645F 		.ascii	"old_value\000"
 14031      76616C75 
 14031      6500
 14032              	.LASF107:
 14033 05bf 656D675F 		.ascii	"emg_speed\000"
 14033      73706565 
 14033      6400
 14034              	.LASF126:
 14035 05c9 72657374 		.ascii	"rest_vel\000"
 14035      5F76656C 
 14035      00
 14036              	.LASF164:
 14037 05d2 4E4F524D 		.ascii	"NORMAL\000"
 14037      414C00
 14038              	.LASF211:
 14039 05d9 6D6F746F 		.ascii	"motor_control_SH\000"
 14039      725F636F 
 14039      6E74726F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 304


 14039      6C5F5348 
 14039      00
 14040              	.LASF337:
 14041 05ea 7046696C 		.ascii	"pFile\000"
 14041      6500
 14042              	.LASF218:
 14043 05f0 706F735F 		.ascii	"pos_error_sum\000"
 14043      6572726F 
 14043      725F7375 
 14043      6D00
 14044              	.LASF118:
 14045 05fe 4144435F 		.ascii	"ADC_conf\000"
 14045      636F6E66 
 14045      00
 14046              	.LASF312:
 14047 0607 6465765F 		.ascii	"dev_tension_f\000"
 14047      74656E73 
 14047      696F6E5F 
 14047      6600
 14048              	.LASF76:
 14049 0615 6B5F695F 		.ascii	"k_i_dl\000"
 14049      646C00
 14050              	.LASF50:
 14051 061c 62756666 		.ascii	"buffer\000"
 14051      657200
 14052              	.LASF78:
 14053 0623 6B5F705F 		.ascii	"k_p_c_dl\000"
 14053      635F646C 
 14053      00
 14054              	.LASF185:
 14055 062c 72785F64 		.ascii	"rx_data_type\000"
 14055      6174615F 
 14055      74797065 
 14055      00
 14056              	.LASF340:
 14057 0639 675F696D 		.ascii	"g_imuNew\000"
 14057      754E6577 
 14057      00
 14058              	.LASF162:
 14059 0642 73706565 		.ascii	"speed\000"
 14059      6400
 14060              	.LASF224:
 14061 0648 706F7369 		.ascii	"position_counter\000"
 14061      74696F6E 
 14061      5F636F75 
 14061      6E746572 
 14061      00
 14062              	.LASF279:
 14063 0659 74696D65 		.ascii	"timer_value_e\000"
 14063      725F7661 
 14063      6C75655F 
 14063      6500
 14064              	.LASF180:
 14065 0667 64617461 		.ascii	"data_packet_index\000"
 14065      5F706163 
 14065      6B65745F 
 14065      696E6465 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 305


 14065      7800
 14066              	.LASF182:
 14067 0679 64617461 		.ascii	"data_packet_buffer\000"
 14067      5F706163 
 14067      6B65745F 
 14067      62756666 
 14067      657200
 14068              	.LASF196:
 14069 068c 73745F72 		.ascii	"st_ref_p\000"
 14069      65665F70 
 14069      00
 14070              	.LASF314:
 14071 0695 6379636C 		.ascii	"cycles_status\000"
 14071      65735F73 
 14071      74617475 
 14071      7300
 14072              	.LASF187:
 14073 06a3 636F756E 		.ascii	"counter_calibration\000"
 14073      7465725F 
 14073      63616C69 
 14073      62726174 
 14073      696F6E00 
 14074              	.LASF293:
 14075 06b7 675F6D65 		.ascii	"g_meas\000"
 14075      617300
 14076              	.LASF278:
 14077 06be 74696D65 		.ascii	"timer_value_s\000"
 14077      725F7661 
 14077      6C75655F 
 14077      7300
 14078              	.LASF334:
 14079 06cc 456E636F 		.ascii	"Encoder_Check\000"
 14079      6465725F 
 14079      43686563 
 14079      6B00
 14080              	.LASF238:
 14081 06da 636F6D70 		.ascii	"comp_value_encoder\000"
 14081      5F76616C 
 14081      75655F65 
 14081      6E636F64 
 14081      657200
 14082              	.LASF331:
 14083 06ed 64617461 		.ascii	"data_encoder_raw\000"
 14083      5F656E63 
 14083      6F646572 
 14083      5F726177 
 14083      00
 14084              	.LASF290:
 14085 06fe 675F7265 		.ascii	"g_ref\000"
 14085      6600
 14086              	.LASF25:
 14087 0704 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14087      545F4D4F 
 14087      44455F45 
 14087      58544552 
 14087      4E414C00 
 14088              	.LASF229:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 306


 14089 0718 696E6465 		.ascii	"index\000"
 14089      7800
 14090              	.LASF137:
 14091 071e 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14091      6D756D5F 
 14091      70726573 
 14091      73757265 
 14091      5F6B5061 
 14092              	.LASF127:
 14093 0733 72657374 		.ascii	"rest_position_flag\000"
 14093      5F706F73 
 14093      6974696F 
 14093      6E5F666C 
 14093      616700
 14094              	.LASF129:
 14095 0746 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14095      7469636B 
 14095      5F636C6F 
 14095      73757265 
 14095      5F737065 
 14096              	.LASF79:
 14097 075d 6B5F695F 		.ascii	"k_i_c_dl\000"
 14097      635F646C 
 14097      00
 14098              	.LASF186:
 14099 0766 7061636B 		.ascii	"package_count\000"
 14099      6167655F 
 14099      636F756E 
 14099      7400
 14100              	.LASF38:
 14101 0774 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14101      5F414E44 
 14101      5F504F53 
 14101      5F434F4E 
 14101      54524F4C 
 14102              	.LASF160:
 14103 0789 656E6162 		.ascii	"enabled\000"
 14103      6C656400 
 14104              	.LASF5:
 14105 0791 6C6F6E67 		.ascii	"long unsigned int\000"
 14105      20756E73 
 14105      69676E65 
 14105      6420696E 
 14105      7400
 14106              	.LASF338:
 14107 07a3 70454D47 		.ascii	"pEMGHFile\000"
 14107      4846696C 
 14107      6500
 14108              	.LASF59:
 14109 07ad 746F7461 		.ascii	"total_time_on\000"
 14109      6C5F7469 
 14109      6D655F6F 
 14109      6E00
 14110              	.LASF172:
 14111 07bb 57524954 		.ascii	"WRITE_CYCLES\000"
 14111      455F4359 
 14111      434C4553 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 307


 14111      00
 14112              	.LASF131:
 14113 07c8 6A6F7973 		.ascii	"joystick_gains\000"
 14113      7469636B 
 14113      5F676169 
 14113      6E7300
 14114              	.LASF45:
 14115 07d7 686F6C64 		.ascii	"hold_curr\000"
 14115      5F637572 
 14115      7200
 14116              	.LASF31:
 14117 07e1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14117      545F4D4F 
 14117      44455F4A 
 14117      4F595354 
 14117      49434B00 
 14118              	.LASF60:
 14119 07f5 746F7461 		.ascii	"total_time_rest\000"
 14119      6C5F7469 
 14119      6D655F72 
 14119      65737400 
 14120              	.LASF81:
 14121 0805 61637469 		.ascii	"activ\000"
 14121      7600
 14122              	.LASF262:
 14123 080b 6D696E5F 		.ascii	"min_tension\000"
 14123      74656E73 
 14123      696F6E00 
 14124              	.LASF326:
 14125 0817 62617474 		.ascii	"battery_low_SoC\000"
 14125      6572795F 
 14125      6C6F775F 
 14125      536F4300 
 14126              	.LASF195:
 14127 0827 6D6F746F 		.ascii	"motor_idx\000"
 14127      725F6964 
 14127      7800
 14128              	.LASF98:
 14129 0831 6D5F6F66 		.ascii	"m_off\000"
 14129      6600
 14130              	.LASF319:
 14131 0837 72657365 		.ascii	"reset_last_value_flag\000"
 14131      745F6C61 
 14131      73745F76 
 14131      616C7565 
 14131      5F666C61 
 14132              	.LASF154:
 14133 084d 71756174 		.ascii	"quat_value\000"
 14133      5F76616C 
 14133      756500
 14134              	.LASF124:
 14135 0858 72657374 		.ascii	"rest_pos\000"
 14135      5F706F73 
 14135      00
 14136              	.LASF40:
 14137 0861 63757272 		.ascii	"curr\000"
 14137      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 308


 14138              	.LASF173:
 14139 0866 57414954 		.ascii	"WAIT_QUERY\000"
 14139      5F515545 
 14139      525900
 14140              	.LASF91:
 14141 0871 696E7075 		.ascii	"input_mode\000"
 14141      745F6D6F 
 14141      646500
 14142              	.LASF36:
 14143 087c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14143      524F4C5F 
 14143      50574D00 
 14144              	.LASF263:
 14145 0888 6379636C 		.ascii	"cycles_counter_update\000"
 14145      65735F63 
 14145      6F756E74 
 14145      65725F75 
 14145      70646174 
 14146              	.LASF342:
 14147 089e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14147      43313120 
 14147      352E342E 
 14147      31203230 
 14147      31363036 
 14148 08d1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14148      20726576 
 14148      6973696F 
 14148      6E203233 
 14148      37373135 
 14149 0904 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14149      66756E63 
 14149      74696F6E 
 14149      2D736563 
 14149      74696F6E 
 14150              	.LASF42:
 14151 092c 73745F72 		.ascii	"st_ref\000"
 14151      656600
 14152              	.LASF307:
 14153 0933 74696D65 		.ascii	"timer_value0\000"
 14153      725F7661 
 14153      6C756530 
 14153      00
 14154              	.LASF123:
 14155 0940 73745F53 		.ascii	"st_SH_spec\000"
 14155      485F7370 
 14155      656300
 14156              	.LASF244:
 14157 094b 765F7661 		.ascii	"v_value\000"
 14157      6C756500 
 14158              	.LASF300:
 14159 0953 63616C69 		.ascii	"calib\000"
 14159      6200
 14160              	.LASF135:
 14161 0959 73745F46 		.ascii	"st_FB_spec\000"
 14161      425F7370 
 14161      656300
 14162              	.LASF6:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 309


 14163 0964 6C6F6E67 		.ascii	"long long int\000"
 14163      206C6F6E 
 14163      6720696E 
 14163      7400
 14164              	.LASF34:
 14165 0972 53485F63 		.ascii	"SH_control_mode\000"
 14165      6F6E7472 
 14165      6F6C5F6D 
 14165      6F646500 
 14166              	.LASF191:
 14167 0982 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14167      4E445F4D 
 14167      4F544F52 
 14167      5F494458 
 14167      00
 14168              	.LASF327:
 14169 0993 6368616E 		.ascii	"change_ext_ref_flag\000"
 14169      67655F65 
 14169      78745F72 
 14169      65665F66 
 14169      6C616700 
 14170              	.LASF19:
 14171 09a7 646F7562 		.ascii	"double\000"
 14171      6C6500
 14172              	.LASF302:
 14173 09ae 66696C74 		.ascii	"filt_curr_diff\000"
 14173      5F637572 
 14173      725F6469 
 14173      666600
 14174              	.LASF207:
 14175 09bd 706F735F 		.ascii	"pos_sum\000"
 14175      73756D00 
 14176              	.LASF210:
 14177 09c5 696E7465 		.ascii	"interrupt_manager\000"
 14177      72727570 
 14177      745F6D61 
 14177      6E616765 
 14177      7200
 14178              	.LASF97:
 14179 09d7 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14179      7261775F 
 14179      72656164 
 14179      5F636F6E 
 14179      6600
 14180              	.LASF208:
 14181 09e9 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14181      7574655F 
 14181      536F6674 
 14181      48616E64 
 14181      5F325F6D 
 14182              	.LASF163:
 14183 0a11 72657065 		.ascii	"repetitions\000"
 14183      74697469 
 14183      6F6E7300 
 14184              	.LASF87:
 14185 0a1d 6D61785F 		.ascii	"max_step_neg\000"
 14185      73746570 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 310


 14185      5F6E6567 
 14185      00
 14186              	.LASF243:
 14187 0a2a 636F756E 		.ascii	"count_startup_motor\000"
 14187      745F7374 
 14187      61727475 
 14187      705F6D6F 
 14187      746F7200 
 14188              	.LASF134:
 14189 0a3e 736C6176 		.ascii	"slave_ID\000"
 14189      655F4944 
 14189      00
 14190              	.LASF168:
 14191 0a47 57414954 		.ascii	"WAIT\000"
 14191      00
 14192              	.LASF18:
 14193 0a4c 666C6F61 		.ascii	"float\000"
 14193      7400
 14194              	.LASF113:
 14195 0a52 494D555F 		.ascii	"IMU_conf\000"
 14195      636F6E66 
 14195      00
 14196              	.LASF256:
 14197 0a5b 636F756E 		.ascii	"count\000"
 14197      7400
 14198              	.LASF46:
 14199 0a61 73745F61 		.ascii	"st_adc_meas\000"
 14199      64635F6D 
 14199      65617300 
 14200              	.LASF287:
 14201 0a6d 6D5F6164 		.ascii	"m_addr\000"
 14201      647200
 14202              	.LASF299:
 14203 0a74 635F6D65 		.ascii	"c_mem\000"
 14203      6D00
 14204              	.LASF8:
 14205 0a7a 756E7369 		.ascii	"unsigned int\000"
 14205      676E6564 
 14205      20696E74 
 14205      00
 14206              	.LASF269:
 14207 0a87 6D61785F 		.ascii	"max_pos\000"
 14207      706F7300 
 14208              	.LASF336:
 14209 0a8f 72657374 		.ascii	"rest_pos_curr_ref\000"
 14209      5F706F73 
 14209      5F637572 
 14209      725F7265 
 14209      6600
 14210              	.LASF144:
 14211 0aa1 666C6167 		.ascii	"flag\000"
 14211      00
 14212              	.LASF92:
 14213 0aa6 636F6E74 		.ascii	"control_mode\000"
 14213      726F6C5F 
 14213      6D6F6465 
 14213      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 311


 14214              	.LASF21:
 14215 0ab3 63797374 		.ascii	"cystatus\000"
 14215      61747573 
 14215      00
 14216              	.LASF26:
 14217 0abc 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14217      545F4D4F 
 14217      44455F45 
 14217      4E434F44 
 14217      45523300 
 14218              	.LASF110:
 14219 0ad0 73745F69 		.ascii	"st_imu\000"
 14219      6D7500
 14220              	.LASF202:
 14221 0ad7 63757272 		.ascii	"current_emg\000"
 14221      656E745F 
 14221      656D6700 
 14222              	.LASF183:
 14223 0ae3 72785F71 		.ascii	"rx_queue\000"
 14223      75657565 
 14223      00
 14224              	.LASF253:
 14225 0aec 55445F6D 		.ascii	"UD_mean_value\000"
 14225      65616E5F 
 14225      76616C75 
 14225      6500
 14226              	.LASF228:
 14227 0afa 6173736F 		.ascii	"assoc_motor\000"
 14227      635F6D6F 
 14227      746F7200 
 14228              	.LASF47:
 14229 0b06 6164645F 		.ascii	"add_emg\000"
 14229      656D6700 
 14230              	.LASF215:
 14231 0b0e 695F7265 		.ascii	"i_ref\000"
 14231      6600
 14232              	.LASF105:
 14233 0b14 656D675F 		.ascii	"emg_threshold\000"
 14233      74687265 
 14233      73686F6C 
 14233      6400
 14234              	.LASF280:
 14235 0b22 73617665 		.ascii	"save_cycles_eeprom\000"
 14235      5F637963 
 14235      6C65735F 
 14235      65657072 
 14235      6F6D00
 14236              	.LASF56:
 14237 0b35 63757272 		.ascii	"current_hist\000"
 14237      656E745F 
 14237      68697374 
 14237      00
 14238              	.LASF37:
 14239 0b42 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14239      524F4C5F 
 14239      43555252 
 14239      454E5400 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 312


 14240              	.LASF23:
 14241 0b52 6C6F6E67 		.ascii	"long double\000"
 14241      20646F75 
 14241      626C6500 
 14242              	.LASF166:
 14243 0b5e 44495343 		.ascii	"DISCARD\000"
 14243      41524400 
 14244              	.LASF220:
 14245 0b66 70726576 		.ascii	"prev_pos_err\000"
 14245      5F706F73 
 14245      5F657272 
 14245      00
 14246              	.LASF236:
 14247 0b73 696E6974 		.ascii	"init_rot\000"
 14247      5F726F74 
 14247      00
 14248              	.LASF260:
 14249 0b7c 6D6F745F 		.ascii	"mot_idx\000"
 14249      69647800 
 14250              	.LASF303:
 14251 0b84 66696C74 		.ascii	"filt_i\000"
 14251      5F6900
 14252              	.LASF102:
 14253 0b8b 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14253      725F6861 
 14253      6E646C65 
 14253      5F726174 
 14253      696F00
 14254              	.LASF301:
 14255 0b9e 66696C74 		.ascii	"filt_v\000"
 14255      5F7600
 14256              	.LASF324:
 14257 0ba5 72657374 		.ascii	"rest_enabled\000"
 14257      5F656E61 
 14257      626C6564 
 14257      00
 14258              	.LASF292:
 14259 0bb2 675F7265 		.ascii	"g_refOld\000"
 14259      664F6C64 
 14259      00
 14260              	.LASF213:
 14261 0bbb 706F735F 		.ascii	"pos_error\000"
 14261      6572726F 
 14261      7200
 14262              	.LASF152:
 14263 0bc5 6779726F 		.ascii	"gyro_value\000"
 14263      5F76616C 
 14263      756500
 14264              	.LASF115:
 14265 0bd0 63757272 		.ascii	"curr_time\000"
 14265      5F74696D 
 14265      6500
 14266              	.LASF100:
 14267 0bda 646F7562 		.ascii	"double_encoder_on_off\000"
 14267      6C655F65 
 14267      6E636F64 
 14267      65725F6F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 313


 14267      6E5F6F66 
 14268              	.LASF261:
 14269 0bf0 6D61785F 		.ascii	"max_tension\000"
 14269      74656E73 
 14269      696F6E00 
 14270              	.LASF190:
 14271 0bfc 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14271      525F4944 
 14271      5800
 14272              	.LASF237:
 14273 0c06 6C617374 		.ascii	"last_value_encoder\000"
 14273      5F76616C 
 14273      75655F65 
 14273      6E636F64 
 14273      657200
 14274              	.LASF188:
 14275 0c19 636F756E 		.ascii	"counter_tension_func\000"
 14275      7465725F 
 14275      74656E73 
 14275      696F6E5F 
 14275      66756E63 
 14276              	.LASF308:
 14277 0c2e 6379636C 		.ascii	"cycle_time\000"
 14277      655F7469 
 14277      6D6500
 14278              	.LASF209:
 14279 0c39 66736D5F 		.ascii	"fsm_state\000"
 14279      73746174 
 14279      6500
 14280              	.LASF7:
 14281 0c43 6C6F6E67 		.ascii	"long long unsigned int\000"
 14281      206C6F6E 
 14281      6720756E 
 14281      7369676E 
 14281      65642069 
 14282              	.LASF317:
 14283 0c5a 6A6F795F 		.ascii	"joy_UD_status\000"
 14283      55445F73 
 14283      74617475 
 14283      7300
 14284              	.LASF51:
 14285 0c68 6C656E67 		.ascii	"length\000"
 14285      746800
 14286              	.LASF149:
 14287 0c6f 73745F69 		.ascii	"st_imu_data\000"
 14287      6D755F64 
 14287      61746100 
 14288              	.LASF153:
 14289 0c7b 6D61675F 		.ascii	"mag_value\000"
 14289      76616C75 
 14289      6500
 14290              	.LASF41:
 14291 0c85 6F6E6F66 		.ascii	"onoff\000"
 14291      6600
 14292              	.LASF232:
 14293 0c8b 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14293      76616C75 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 314


 14293      655F656E 
 14293      636F6465 
 14293      725F3332 
 14294              	.LASF221:
 14295 0ca0 70726576 		.ascii	"prev_curr_err\000"
 14295      5F637572 
 14295      725F6572 
 14295      7200
 14296              	.LASF181:
 14297 0cae 64617461 		.ascii	"data_packet_length\000"
 14297      5F706163 
 14297      6B65745F 
 14297      6C656E67 
 14297      746800
 14298              	.LASF72:
 14299 0cc1 6B5F705F 		.ascii	"k_p_c\000"
 14299      6300
 14300              	.LASF309:
 14301 0cc7 6465765F 		.ascii	"dev_tension\000"
 14301      74656E73 
 14301      696F6E00 
 14302              	.LASF83:
 14303 0cd3 6D6F746F 		.ascii	"motor_driver_type\000"
 14303      725F6472 
 14303      69766572 
 14303      5F747970 
 14303      6500
 14304              	.LASF169:
 14305 0ce5 57414954 		.ascii	"WAIT_EoC\000"
 14305      5F456F43 
 14305      00
 14306              	.LASF22:
 14307 0cee 72656738 		.ascii	"reg8\000"
 14307      00
 14308              	.LASF272:
 14309 0cf3 62696E5F 		.ascii	"bin_1\000"
 14309      3100
 14310              	.LASF273:
 14311 0cf9 62696E5F 		.ascii	"bin_2\000"
 14311      3200
 14312              	.LASF248:
 14313 0cff 695F6175 		.ascii	"i_aux\000"
 14313      7800
 14314              	.LASF138:
 14315 0d05 70726F70 		.ascii	"prop_err_fb_gain\000"
 14315      5F657272 
 14315      5F66625F 
 14315      6761696E 
 14315      00
 14316              	.LASF206:
 14317 0d16 706F735F 		.ascii	"pos_diff\000"
 14317      64696666 
 14317      00
 14318              	.LASF282:
 14319 0d1f 726F775F 		.ascii	"row_number\000"
 14319      6E756D62 
 14319      657200
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 315


 14320              	.LASF258:
 14321 0d2a 6F766572 		.ascii	"overcurrent_control\000"
 14321      63757272 
 14321      656E745F 
 14321      636F6E74 
 14321      726F6C00 
 14322              	.LASF274:
 14323 0d3e 63757272 		.ascii	"curr_pos\000"
 14323      5F706F73 
 14323      00
 14324              	.LASF165:
 14325 0d47 52455345 		.ascii	"RESET\000"
 14325      5400
 14326              	.LASF133:
 14327 0d4d 736C6176 		.ascii	"slave_comm_active\000"
 14327      655F636F 
 14327      6D6D5F61 
 14327      63746976 
 14327      6500
 14328              	.LASF247:
 14329 0d5f 616E616C 		.ascii	"analog_read_end\000"
 14329      6F675F72 
 14329      6561645F 
 14329      656E6400 
 14330              	.LASF332:
 14331 0d6f 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 14331      636F6465 
 14331      725F4C69 
 14331      6E655F43 
 14331      6F6E6E65 
 14332              	.LASF69:
 14333 0d88 6465765F 		.ascii	"dev_type\000"
 14333      74797065 
 14333      00
 14334              	.LASF265:
 14335 0d91 656D675F 		.ascii	"emg_cycle_status\000"
 14335      6379636C 
 14335      655F7374 
 14335      61747573 
 14335      00
 14336              	.LASF120:
 14337 0da2 73745F75 		.ascii	"st_user\000"
 14337      73657200 
 14338              	.LASF103:
 14339 0daa 67656172 		.ascii	"gears_params\000"
 14339      735F7061 
 14339      72616D73 
 14339      00
 14340              	.LASF114:
 14341 0db7 73745F65 		.ascii	"st_expansion\000"
 14341      7870616E 
 14341      73696F6E 
 14341      00
 14342              	.LASF108:
 14343 0dc4 656D675F 		.ascii	"emg_calibration_flag\000"
 14343      63616C69 
 14343      62726174 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 316


 14343      696F6E5F 
 14343      666C6167 
 14344              	.LASF43:
 14345 0dd9 73745F6D 		.ascii	"st_meas\000"
 14345      65617300 
 14346              	.LASF284:
 14347 0de1 61646472 		.ascii	"addr_start\000"
 14347      5F737461 
 14347      727400
 14348              	.LASF288:
 14349 0dec 70776D5F 		.ascii	"pwm_preload_values\000"
 14349      7072656C 
 14349      6F61645F 
 14349      76616C75 
 14349      657300
 14350              	.LASF130:
 14351 0dff 6A6F7973 		.ascii	"joystick_threshold\000"
 14351      7469636B 
 14351      5F746872 
 14351      6573686F 
 14351      6C6400
 14352              	.LASF32:
 14353 0e12 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14353      545F4D4F 
 14353      44455F45 
 14353      4D475F50 
 14353      524F504F 
 14354              	.LASF176:
 14355 0e31 636F756E 		.ascii	"counter_status\000"
 14355      7465725F 
 14355      73746174 
 14355      757300
 14356              	.LASF298:
 14357 0e40 675F6D65 		.ascii	"g_mem\000"
 14357      6D00
 14358              	.LASF249:
 14359 0e46 656D675F 		.ascii	"emg_counter_1\000"
 14359      636F756E 
 14359      7465725F 
 14359      3100
 14360              	.LASF250:
 14361 0e54 656D675F 		.ascii	"emg_counter_2\000"
 14361      636F756E 
 14361      7465725F 
 14361      3200
 14362              	.LASF240:
 14363 0e62 6F6E6C79 		.ascii	"only_first_time\000"
 14363      5F666972 
 14363      73745F74 
 14363      696D6500 
 14364              	.LASF11:
 14365 0e72 75696E74 		.ascii	"uint8\000"
 14365      3800
 14366              	.LASF128:
 14367 0e78 73745F4A 		.ascii	"st_JOY_spec\000"
 14367      4F595F73 
 14367      70656300 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 317


 14368              	.LASF235:
 14369 0e84 76616C75 		.ascii	"value_diff\000"
 14369      655F6469 
 14369      666600
 14370              	.LASF276:
 14371 0e8f 63757272 		.ascii	"curr_ref\000"
 14371      5F726566 
 14371      00
 14372              	.LASF2:
 14373 0e98 73686F72 		.ascii	"short int\000"
 14373      7420696E 
 14373      7400
 14374              	.LASF77:
 14375 0ea2 6B5F645F 		.ascii	"k_d_dl\000"
 14375      646C00
 14376              	.LASF233:
 14377 0ea9 76616C75 		.ascii	"value_encoder\000"
 14377      655F656E 
 14377      636F6465 
 14377      7200
 14378              	.LASF48:
 14379 0eb7 6A6F7973 		.ascii	"joystick\000"
 14379      7469636B 
 14379      00
 14380              	.LASF146:
 14381 0ec0 6D6F746F 		.ascii	"motor\000"
 14381      7200
 14382              	.LASF311:
 14383 0ec6 6465765F 		.ascii	"dev_pwm_sat\000"
 14383      70776D5F 
 14383      73617400 
 14384              	.LASF62:
 14385 0ed2 68775F6D 		.ascii	"hw_maint_date\000"
 14385      61696E74 
 14385      5F646174 
 14385      6500
 14386              	.LASF193:
 14387 0ee0 66756E63 		.ascii	"function_scheduler\000"
 14387      74696F6E 
 14387      5F736368 
 14387      6564756C 
 14387      657200
 14388              	.LASF194:
 14389 0ef3 636F6D70 		.ascii	"compute_reference\000"
 14389      7574655F 
 14389      72656665 
 14389      72656E63 
 14389      6500
 14390              	.LASF222:
 14391 0f05 70726576 		.ascii	"prev_pwm\000"
 14391      5F70776D 
 14391      00
 14392              	.LASF63:
 14393 0f0e 73746174 		.ascii	"stats_period_begin_date\000"
 14393      735F7065 
 14393      72696F64 
 14393      5F626567 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 318


 14393      696E5F64 
 14394              	.LASF289:
 14395 0f26 49544D5F 		.ascii	"ITM_RxBuffer\000"
 14395      52784275 
 14395      66666572 
 14395      00
 14396              	.LASF313:
 14397 0f33 706F775F 		.ascii	"pow_tension\000"
 14397      74656E73 
 14397      696F6E00 
 14398              	.LASF15:
 14399 0f3f 696E7431 		.ascii	"int16\000"
 14399      3600
 14400              	.LASF116:
 14401 0f45 72656164 		.ascii	"read_exp_port_flag\000"
 14401      5F657870 
 14401      5F706F72 
 14401      745F666C 
 14401      616700
 14402              	.LASF82:
 14403 0f58 61637469 		.ascii	"activate_pwm_rescaling\000"
 14403      76617465 
 14403      5F70776D 
 14403      5F726573 
 14403      63616C69 
 14404              	.LASF75:
 14405 0f6f 6B5F705F 		.ascii	"k_p_dl\000"
 14405      646C00
 14406              	.LASF44:
 14407 0f76 65737469 		.ascii	"estim_curr\000"
 14407      6D5F6375 
 14407      727200
 14408              	.LASF310:
 14409 0f81 6465765F 		.ascii	"dev_pwm_limit\000"
 14409      70776D5F 
 14409      6C696D69 
 14409      7400
 14410              	.LASF281:
 14411 0f8f 73746174 		.ascii	"status\000"
 14411      757300
 14412              	.LASF214:
 14413 0f96 63757272 		.ascii	"curr_error\000"
 14413      5F657272 
 14413      6F7200
 14414              	.LASF333:
 14415 0fa1 456E636F 		.ascii	"Encoder_Value\000"
 14415      6465725F 
 14415      56616C75 
 14415      6500
 14416              	.LASF68:
 14417 0faf 75736572 		.ascii	"user_id\000"
 14417      5F696400 
 14418              	.LASF266:
 14419 0fb7 72657374 		.ascii	"rest_cycle_status\000"
 14419      5F637963 
 14419      6C655F73 
 14419      74617475 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 319


 14419      7300
 14420              	.LASF204:
 14421 0fc9 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 14421      7574655F 
 14421      536F6674 
 14421      48616E64 
 14421      5F325F6D 
 14422              	.LASF231:
 14423 0ff6 746D705F 		.ascii	"tmp_value_encoder\000"
 14423      76616C75 
 14423      655F656E 
 14423      636F6465 
 14423      7200
 14424              	.LASF178:
 14425 1008 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 14425      4359434C 
 14425      45535F48 
 14425      616E646C 
 14425      657200
 14426              	.LASF67:
 14427 101b 62617564 		.ascii	"baud_rate\000"
 14427      5F726174 
 14427      6500
 14428              	.LASF141:
 14429 1025 66617374 		.ascii	"fast_act_threshold\000"
 14429      5F616374 
 14429      5F746872 
 14429      6573686F 
 14429      6C6400
 14430              	.LASF112:
 14431 1038 5350495F 		.ascii	"SPI_read_delay\000"
 14431      72656164 
 14431      5F64656C 
 14431      617900
 14432              	.LASF3:
 14433 1047 73686F72 		.ascii	"short unsigned int\000"
 14433      7420756E 
 14433      7369676E 
 14433      65642069 
 14433      6E7400
 14434              	.LASF96:
 14435 105a 73745F65 		.ascii	"st_encoder\000"
 14435      6E636F64 
 14435      657200
 14436              	.LASF295:
 14437 1065 675F6164 		.ascii	"g_adc_meas\000"
 14437      635F6D65 
 14437      617300
 14438              	.LASF136:
 14439 1070 6D61785F 		.ascii	"max_residual_current\000"
 14439      72657369 
 14439      6475616C 
 14439      5F637572 
 14439      72656E74 
 14440              	.LASF201:
 14441 1085 454E435F 		.ascii	"ENC_L\000"
 14441      4C00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 320


 14442              	.LASF143:
 14443 108b 73745F65 		.ascii	"st_eeprom\000"
 14443      6570726F 
 14443      6D00
 14444              	.LASF318:
 14445 1095 6A6F795F 		.ascii	"joy_LR_status\000"
 14445      4C525F73 
 14445      74617475 
 14445      7300
 14446              	.LASF343:
 14447 10a3 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 14447      72635C69 
 14447      6E746572 
 14447      72757074 
 14447      696F6E73 
 14448              	.LASF197:
 14449 10ba 73745F72 		.ascii	"st_refOld_p\000"
 14449      65664F6C 
 14449      645F7000 
 14450              	.LASF16:
 14451 10c6 696E7433 		.ascii	"int32\000"
 14451      3200
 14452              	.LASF329:
 14453 10cc 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 14453      4F465F41 
 14453      4E414C4F 
 14453      475F494E 
 14453      50555453 
 14454              	.LASF71:
 14455 10e1 73745F6D 		.ascii	"st_motor\000"
 14455      6F746F72 
 14455      00
 14456              	.LASF341:
 14457 10ea 6D617374 		.ascii	"master_mode\000"
 14457      65725F6D 
 14457      6F646500 
 14458              	.LASF39:
 14459 10f6 46535F46 		.ascii	"FS_FILE\000"
 14459      494C4500 
 14460              	.LASF84:
 14461 10fe 706F735F 		.ascii	"pos_lim_flag\000"
 14461      6C696D5F 
 14461      666C6167 
 14461      00
 14462              	.LASF254:
 14463 110b 4C525F6D 		.ascii	"LR_mean_value\000"
 14463      65616E5F 
 14463      76616C75 
 14463      6500
 14464              	.LASF294:
 14465 1119 675F6D65 		.ascii	"g_measOld\000"
 14465      61734F6C 
 14465      6400
 14466              	.LASF286:
 14467 1123 726F775F 		.ascii	"row_end\000"
 14467      656E6400 
 14468              	.LASF35:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 321


 14469 112b 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 14469      524F4C5F 
 14469      414E474C 
 14469      4500
 14470              	.LASF9:
 14471 1139 5F5F696E 		.ascii	"__int32_t\000"
 14471      7433325F 
 14471      7400
 14472              	.LASF58:
 14473 1143 77697265 		.ascii	"wire_disp\000"
 14473      5F646973 
 14473      7000
 14474              	.LASF323:
 14475 114d 63616E5F 		.ascii	"can_write\000"
 14475      77726974 
 14475      6500
 14476              	.LASF106:
 14477 1157 656D675F 		.ascii	"emg_max_value\000"
 14477      6D61785F 
 14477      76616C75 
 14477      6500
 14478              	.LASF90:
 14479 1165 63757272 		.ascii	"current_limit\000"
 14479      656E745F 
 14479      6C696D69 
 14479      7400
 14480              	.LASF33:
 14481 1173 53485F69 		.ascii	"SH_input_mode\000"
 14481      6E707574 
 14481      5F6D6F64 
 14481      6500
 14482              	.LASF175:
 14483 1181 4E4F4E45 		.ascii	"NONE\000"
 14483      00
 14484              	.LASF140:
 14485 1186 61637469 		.ascii	"activation_mode\000"
 14485      76617469 
 14485      6F6E5F6D 
 14485      6F646500 
 14486              	.LASF12:
 14487 1196 75696E74 		.ascii	"uint16\000"
 14487      313600
 14488              	.LASF125:
 14489 119d 72657374 		.ascii	"rest_delay\000"
 14489      5F64656C 
 14489      617900
 14490              	.LASF156:
 14491 11a8 73745F66 		.ascii	"st_filter\000"
 14491      696C7465 
 14491      7200
 14492              	.LASF245:
 14493 11b2 76765F76 		.ascii	"vv_value\000"
 14493      616C7565 
 14493      00
 14494              	.LASF80:
 14495 11bb 6B5F645F 		.ascii	"k_d_c_dl\000"
 14495      635F646C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cc5HBckS.s 			page 322


 14495      00
 14496              	.LASF161:
 14497 11c4 64697265 		.ascii	"direction\000"
 14497      6374696F 
 14497      6E00
 14498              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
