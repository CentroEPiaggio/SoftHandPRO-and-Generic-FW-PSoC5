ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10445
 458 01dc 04000000 		.word	rx_queue.10449
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10447
 461 01e8 08000000 		.word	data_packet_index.10446
 462 01ec 0C000000 		.word	data_packet_buffer.10448
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a C64B     		ldr	r3, .L79
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0054 C44B     		ldr	r3, .L79+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 005c C24B     		ldr	r3, .L79+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0066 C14B     		ldr	r3, .L79+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F20A82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 6B010000 		.word	.L38+1
 552 0080 79030000 		.word	.L39+1
 553 0084 79030000 		.word	.L39+1
 554 0088 6B010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 B549     		ldr	r1, .L79+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa B14B     		ldr	r3, .L79+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 299 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc AB49     		ldr	r1, .L79+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 301 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de A349     		ldr	r1, .L79+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 305 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 17


 604 00f8 9B4B     		ldr	r3, .L79+4
 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 306 0
 609 0100 994B     		ldr	r3, .L79+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 307 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
 313:..\src/interruptions.c ****             motor_control_SH();
 615              		.loc 1 313 0
 616 010a FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 617              		.loc 1 316 0
 618 010e 07F58843 		add	r3, r7, #17408
 619 0112 03F15E03 		add	r3, r3, #94
 620 0116 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 621 0118 9449     		ldr	r1, .L79+8
 622 011a 1346     		mov	r3, r2
 623 011c DB00     		lsls	r3, r3, #3
 624 011e 9B1A     		subs	r3, r3, r2
 625 0120 1B01     		lsls	r3, r3, #4
 626 0122 0B44     		add	r3, r3, r1
 627 0124 03F58973 		add	r3, r3, #274
 628 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 629 012a 012B     		cmp	r3, #1
 630 012c 12D1     		bne	.L41
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 631              		.loc 1 317 0
 632 012e 07F58843 		add	r3, r7, #17408
 633 0132 03F15E03 		add	r3, r3, #94
 634 0136 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 635 0138 8C49     		ldr	r1, .L79+8
 636 013a 1346     		mov	r3, r2
 637 013c DB00     		lsls	r3, r3, #3
 638 013e 9B1A     		subs	r3, r3, r2
 639 0140 1B01     		lsls	r3, r3, #4
 640 0142 0B44     		add	r3, r3, r1
 641 0144 03F58773 		add	r3, r3, #270
 642 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 014a 002B     		cmp	r3, #0
 644 014c 02D1     		bne	.L41
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 645              		.loc 1 318 0
 646 014e 894B     		ldr	r3, .L79+16
 647 0150 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 18


 648 0152 1A70     		strb	r2, [r3]
 649              	.L41:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 650              		.loc 1 324 0
 651 0154 844B     		ldr	r3, .L79+4
 652 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 0158 002B     		cmp	r3, #0
 654 015a 00F08781 		beq	.L76
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 655              		.loc 1 325 0
 656 015e 824B     		ldr	r3, .L79+4
 657 0160 0022     		movs	r2, #0
 658 0162 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 659              		.loc 1 326 0
 660 0164 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 661              		.loc 1 328 0
 662 0168 80E1     		b	.L76
 663              	.L38:
 664              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 665              		.loc 1 333 0
 666 016a 0023     		movs	r3, #0
 667 016c 07F58842 		add	r2, r7, #17408
 668 0170 02F15F02 		add	r2, r2, #95
 669 0174 1370     		strb	r3, [r2]
 670 0176 7DE0     		b	.L43
 671              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 672              		.loc 1 334 0
 673 0178 07F58843 		add	r3, r7, #17408
 674 017c 03F15F03 		add	r3, r3, #95
 675 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 676 0182 7B4A     		ldr	r2, .L79+12
 677 0184 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 678 0186 002B     		cmp	r3, #0
 679 0188 69D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 680              		.loc 1 336 0
 681 018a 07F58843 		add	r3, r7, #17408
 682 018e 03F15F03 		add	r3, r3, #95
 683 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0194 1846     		mov	r0, r3
 685 0196 FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 19


 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 686              		.loc 1 338 0
 687 019a 07F58843 		add	r3, r7, #17408
 688 019e 03F15E03 		add	r3, r3, #94
 689 01a2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 690 01a4 7149     		ldr	r1, .L79+8
 691 01a6 1346     		mov	r3, r2
 692 01a8 DB00     		lsls	r3, r3, #3
 693 01aa 9B1A     		subs	r3, r3, r2
 694 01ac 1B01     		lsls	r3, r3, #4
 695 01ae 0B44     		add	r3, r3, r1
 696 01b0 03F58873 		add	r3, r3, #272
 697 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 01b6 07F58842 		add	r2, r7, #17408
 699 01ba 02F15F02 		add	r2, r2, #95
 700 01be 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 701 01c0 9A42     		cmp	r2, r3
 702 01c2 0ED1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 703              		.loc 1 340 0
 704 01c4 07F58843 		add	r3, r7, #17408
 705 01c8 03F15E03 		add	r3, r3, #94
 706 01cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ce 07F58843 		add	r3, r7, #17408
 708 01d2 03F15F03 		add	r3, r3, #95
 709 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 710 01d8 1146     		mov	r1, r2
 711 01da 1846     		mov	r0, r3
 712 01dc FFF7FEFF 		bl	encoder_reading_SPI
 713 01e0 34E0     		b	.L46
 714              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 715              		.loc 1 343 0
 716 01e2 07F58843 		add	r3, r7, #17408
 717 01e6 03F15D03 		add	r3, r3, #93
 718 01ea 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 719 01ec 5F49     		ldr	r1, .L79+8
 720 01ee 1346     		mov	r3, r2
 721 01f0 DB00     		lsls	r3, r3, #3
 722 01f2 9B1A     		subs	r3, r3, r2
 723 01f4 1B01     		lsls	r3, r3, #4
 724 01f6 0B44     		add	r3, r3, r1
 725 01f8 03F58873 		add	r3, r3, #272
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 07F58842 		add	r2, r7, #17408
 728 0202 02F15F02 		add	r2, r2, #95
 729 0206 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 730 0208 9A42     		cmp	r2, r3
 731 020a 0ED1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 732              		.loc 1 345 0
 733 020c 07F58843 		add	r3, r7, #17408
 734 0210 03F15D03 		add	r3, r3, #93
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 20


 735 0214 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 736 0216 07F58843 		add	r3, r7, #17408
 737 021a 03F15F03 		add	r3, r3, #95
 738 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 739 0220 1146     		mov	r1, r2
 740 0222 1846     		mov	r0, r3
 741 0224 FFF7FEFF 		bl	encoder_reading_SPI
 742 0228 10E0     		b	.L46
 743              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 744              		.loc 1 349 0
 745 022a 07F58843 		add	r3, r7, #17408
 746 022e 03F15F03 		add	r3, r3, #95
 747 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748 0234 4E4A     		ldr	r2, .L79+12
 749 0236 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 750 0238 1A46     		mov	r2, r3
 751 023a 07F58843 		add	r3, r7, #17408
 752 023e 03F15F03 		add	r3, r3, #95
 753 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 754 0244 1946     		mov	r1, r3
 755 0246 1046     		mov	r0, r2
 756 0248 FFF7FEFF 		bl	ReadEncoderLine
 757              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 758              		.loc 1 356 0
 759 024c 464B     		ldr	r3, .L79+4
 760 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 761 0250 002B     		cmp	r3, #0
 762 0252 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 763              		.loc 1 357 0
 764 0254 444B     		ldr	r3, .L79+4
 765 0256 0022     		movs	r2, #0
 766 0258 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 767              		.loc 1 358 0
 768 025a FFF7FEFF 		bl	interrupt_manager
 769              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 770              		.loc 1 333 0 discriminator 2
 771 025e 07F58843 		add	r3, r7, #17408
 772 0262 03F15F03 		add	r3, r3, #95
 773 0266 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0268 0133     		adds	r3, r3, #1
 775 026a 07F58842 		add	r2, r7, #17408
 776 026e 02F15F02 		add	r2, r2, #95
 777 0272 1370     		strb	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 21


 778              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 779              		.loc 1 333 0 is_stmt 0 discriminator 1
 780 0274 07F58843 		add	r3, r7, #17408
 781 0278 03F15F03 		add	r3, r3, #95
 782 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 783 027e 012B     		cmp	r3, #1
 784 0280 7FF67AAF 		bls	.L48
 785              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 786              		.loc 1 366 0 is_stmt 1
 787 0284 07F58843 		add	r3, r7, #17408
 788 0288 03F15E03 		add	r3, r3, #94
 789 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 790 028e 1846     		mov	r0, r3
 791 0290 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 792              		.loc 1 369 0
 793 0294 07F58843 		add	r3, r7, #17408
 794 0298 03F15E03 		add	r3, r3, #94
 795 029c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 796 029e 3349     		ldr	r1, .L79+8
 797 02a0 1346     		mov	r3, r2
 798 02a2 DB00     		lsls	r3, r3, #3
 799 02a4 9B1A     		subs	r3, r3, r2
 800 02a6 1B01     		lsls	r3, r3, #4
 801 02a8 0B44     		add	r3, r3, r1
 802 02aa 03F58973 		add	r3, r3, #274
 803 02ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 804 02b0 012B     		cmp	r3, #1
 805 02b2 12D1     		bne	.L49
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 806              		.loc 1 370 0
 807 02b4 07F58843 		add	r3, r7, #17408
 808 02b8 03F15E03 		add	r3, r3, #94
 809 02bc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 810 02be 2B49     		ldr	r1, .L79+8
 811 02c0 1346     		mov	r3, r2
 812 02c2 DB00     		lsls	r3, r3, #3
 813 02c4 9B1A     		subs	r3, r3, r2
 814 02c6 1B01     		lsls	r3, r3, #4
 815 02c8 0B44     		add	r3, r3, r1
 816 02ca 03F58773 		add	r3, r3, #270
 817 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 818 02d0 002B     		cmp	r3, #0
 819 02d2 02D1     		bne	.L49
 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 820              		.loc 1 371 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 22


 821 02d4 274B     		ldr	r3, .L79+16
 822 02d6 0022     		movs	r2, #0
 823 02d8 1A70     		strb	r2, [r3]
 824              	.L49:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****             if (interrupt_flag){
 825              		.loc 1 377 0
 826 02da 234B     		ldr	r3, .L79+4
 827 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 828 02de 002B     		cmp	r3, #0
 829 02e0 04D0     		beq	.L50
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 830              		.loc 1 378 0
 831 02e2 214B     		ldr	r3, .L79+4
 832 02e4 0022     		movs	r2, #0
 833 02e6 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 834              		.loc 1 379 0
 835 02e8 FFF7FEFF 		bl	interrupt_manager
 836              	.L50:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 837              		.loc 1 383 0
 838 02ec 1F4B     		ldr	r3, .L79+8
 839 02ee 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 840 02f2 012B     		cmp	r3, #1
 841 02f4 40F0BC80 		bne	.L77
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 842              		.loc 1 384 0
 843 02f8 07F58843 		add	r3, r7, #17408
 844 02fc 03F15D03 		add	r3, r3, #93
 845 0300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846 0302 1846     		mov	r0, r3
 847 0304 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 848              		.loc 1 387 0
 849 0308 07F58843 		add	r3, r7, #17408
 850 030c 03F15D03 		add	r3, r3, #93
 851 0310 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 852 0312 1649     		ldr	r1, .L79+8
 853 0314 1346     		mov	r3, r2
 854 0316 DB00     		lsls	r3, r3, #3
 855 0318 9B1A     		subs	r3, r3, r2
 856 031a 1B01     		lsls	r3, r3, #4
 857 031c 0B44     		add	r3, r3, r1
 858 031e 03F58973 		add	r3, r3, #274
 859 0322 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 860 0324 012B     		cmp	r3, #1
 861 0326 12D1     		bne	.L52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 23


 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 862              		.loc 1 388 0
 863 0328 07F58843 		add	r3, r7, #17408
 864 032c 03F15D03 		add	r3, r3, #93
 865 0330 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 866 0332 0E49     		ldr	r1, .L79+8
 867 0334 1346     		mov	r3, r2
 868 0336 DB00     		lsls	r3, r3, #3
 869 0338 9B1A     		subs	r3, r3, r2
 870 033a 1B01     		lsls	r3, r3, #4
 871 033c 0B44     		add	r3, r3, r1
 872 033e 03F58773 		add	r3, r3, #270
 873 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 874 0344 002B     		cmp	r3, #0
 875 0346 02D1     		bne	.L52
 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 876              		.loc 1 389 0
 877 0348 0A4B     		ldr	r3, .L79+16
 878 034a 0022     		movs	r2, #0
 879 034c 1A70     		strb	r2, [r3]
 880              	.L52:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 881              		.loc 1 395 0
 882 034e 064B     		ldr	r3, .L79+4
 883 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 0352 002B     		cmp	r3, #0
 885 0354 00F08C80 		beq	.L77
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 886              		.loc 1 396 0
 887 0358 034B     		ldr	r3, .L79+4
 888 035a 0022     		movs	r2, #0
 889 035c 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 890              		.loc 1 397 0
 891 035e FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 892              		.loc 1 400 0
 893 0362 85E0     		b	.L77
 894              	.L80:
 895              		.align	2
 896              	.L79:
 897 0364 00000000 		.word	timer_value0
 898 0368 00000000 		.word	interrupt_flag
 899 036c 00000000 		.word	c_mem
 900 0370 00000000 		.word	N_Encoder_Line_Connected
 901 0374 00000000 		.word	change_ext_ref_flag
 902              	.L39:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 403:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 24


 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 903              		.loc 1 405 0
 904 0378 3E4B     		ldr	r3, .L81
 905 037a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 037c 002B     		cmp	r3, #0
 907 037e 38D0     		beq	.L53
 908              		.loc 1 405 0 is_stmt 0 discriminator 1
 909 0380 3D4B     		ldr	r3, .L81+4
 910 0382 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 911 0386 002B     		cmp	r3, #0
 912 0388 33D0     		beq	.L53
 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 913              		.loc 1 407 0 is_stmt 1
 914 038a 3B4B     		ldr	r3, .L81+4
 915 038c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 916 0390 022B     		cmp	r3, #2
 917 0392 08D1     		bne	.L54
 408:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 918              		.loc 1 408 0
 919 0394 07F58843 		add	r3, r7, #17408
 920 0398 03F15D03 		add	r3, r3, #93
 921 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 922 039e 1846     		mov	r0, r3
 923 03a0 FFF7FEFF 		bl	air_chambers_control
 924 03a4 07E0     		b	.L55
 925              	.L54:
 409:..\src/interruptions.c ****                 }
 410:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 411:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 926              		.loc 1 411 0
 927 03a6 07F58843 		add	r3, r7, #17408
 928 03aa 03F15D03 		add	r3, r3, #93
 929 03ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 930 03b0 1846     		mov	r0, r3
 931 03b2 FFF7FEFF 		bl	otbk_act_wrist_control
 932              	.L55:
 412:..\src/interruptions.c ****                 }
 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****                 // Check Interrupt 
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****                 if (interrupt_flag){
 933              		.loc 1 416 0
 934 03b6 314B     		ldr	r3, .L81+8
 935 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 03ba 002B     		cmp	r3, #0
 937 03bc 04D0     		beq	.L56
 417:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 938              		.loc 1 417 0
 939 03be 2F4B     		ldr	r3, .L81+8
 940 03c0 0022     		movs	r2, #0
 941 03c2 1A70     		strb	r2, [r3]
 418:..\src/interruptions.c ****                     interrupt_manager();
 942              		.loc 1 418 0
 943 03c4 FFF7FEFF 		bl	interrupt_manager
 944              	.L56:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 25


 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c ****             
 421:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 945              		.loc 1 421 0
 946 03c8 2B4B     		ldr	r3, .L81+4
 947 03ca 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 948 03ce 07F58843 		add	r3, r7, #17408
 949 03d2 03F15D03 		add	r3, r3, #93
 950 03d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 951 03d8 1146     		mov	r1, r2
 952 03da 1846     		mov	r0, r3
 953 03dc FFF7FEFF 		bl	drive_slave
 422:..\src/interruptions.c ****             
 423:..\src/interruptions.c ****                 // Check Interrupt 
 424:..\src/interruptions.c **** 
 425:..\src/interruptions.c ****                 if (interrupt_flag){
 954              		.loc 1 425 0
 955 03e0 264B     		ldr	r3, .L81+8
 956 03e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 03e4 002B     		cmp	r3, #0
 958 03e6 04D0     		beq	.L53
 426:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 959              		.loc 1 426 0
 960 03e8 244B     		ldr	r3, .L81+8
 961 03ea 0022     		movs	r2, #0
 962 03ec 1A70     		strb	r2, [r3]
 427:..\src/interruptions.c ****                     interrupt_manager();
 963              		.loc 1 427 0
 964 03ee FFF7FEFF 		bl	interrupt_manager
 965              	.L53:
 428:..\src/interruptions.c ****                 }
 429:..\src/interruptions.c ****             }
 430:..\src/interruptions.c ****             if (!master_mode){
 966              		.loc 1 430 0
 967 03f2 204B     		ldr	r3, .L81
 968 03f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 03f6 002B     		cmp	r3, #0
 970 03f8 11D1     		bne	.L57
 431:..\src/interruptions.c ****                 
 432:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 971              		.loc 1 432 0
 972 03fa 1F4B     		ldr	r3, .L81+4
 973 03fc 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 974 0400 002B     		cmp	r3, #0
 975 0402 01D0     		beq	.L58
 433:..\src/interruptions.c ****                     // Stop feedback motors
 434:..\src/interruptions.c ****                     stop_master_device();
 976              		.loc 1 434 0
 977 0404 FFF7FEFF 		bl	stop_master_device
 978              	.L58:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****                 // Disable slave or motors
 437:..\src/interruptions.c ****                 deactivate_slaves();
 979              		.loc 1 437 0
 980 0408 FFF7FEFF 		bl	deactivate_slaves
 438:..\src/interruptions.c ****                         
 439:..\src/interruptions.c ****                 // Check Interrupt 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 26


 440:..\src/interruptions.c ****                 if (interrupt_flag){
 981              		.loc 1 440 0
 982 040c 1B4B     		ldr	r3, .L81+8
 983 040e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 984 0410 002B     		cmp	r3, #0
 985 0412 04D0     		beq	.L57
 441:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 986              		.loc 1 441 0
 987 0414 194B     		ldr	r3, .L81+8
 988 0416 0022     		movs	r2, #0
 989 0418 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****                     interrupt_manager();
 990              		.loc 1 442 0
 991 041a FFF7FEFF 		bl	interrupt_manager
 992              	.L57:
 443:..\src/interruptions.c ****                 } 
 444:..\src/interruptions.c ****             }
 445:..\src/interruptions.c ****     
 446:..\src/interruptions.c ****             // Control Master device main motor 
 447:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 448:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 993              		.loc 1 448 0
 994 041e 07F58843 		add	r3, r7, #17408
 995 0422 03F15E03 		add	r3, r3, #94
 996 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 997 0428 1846     		mov	r0, r3
 998 042a FFF7FEFF 		bl	motor_control_generic
 449:..\src/interruptions.c ****                         
 450:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 451:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 999              		.loc 1 451 0
 1000 042e 124B     		ldr	r3, .L81+4
 1001 0430 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1002 0434 032B     		cmp	r3, #3
 1003 0436 0FD1     		bne	.L59
 452:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1004              		.loc 1 452 0
 1005 0438 114B     		ldr	r3, .L81+12
 1006 043a 9B68     		ldr	r3, [r3, #8]
 1007 043c 432B     		cmp	r3, #67
 1008 043e 02DD     		ble	.L60
 453:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1009              		.loc 1 453 0
 1010 0440 0F4B     		ldr	r3, .L81+12
 1011 0442 4322     		movs	r2, #67
 1012 0444 9A60     		str	r2, [r3, #8]
 1013              	.L60:
 454:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1014              		.loc 1 454 0
 1015 0446 0E4B     		ldr	r3, .L81+12
 1016 0448 9B68     		ldr	r3, [r3, #8]
 1017 044a 13F1430F 		cmn	r3, #67
 1018 044e 03DA     		bge	.L59
 455:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1019              		.loc 1 455 0
 1020 0450 0B4B     		ldr	r3, .L81+12
 1021 0452 6FF04202 		mvn	r2, #66
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 27


 1022 0456 9A60     		str	r2, [r3, #8]
 1023              	.L59:
 456:..\src/interruptions.c ****             }
 457:..\src/interruptions.c ****             
 458:..\src/interruptions.c ****             // Check Interrupt 
 459:..\src/interruptions.c **** 
 460:..\src/interruptions.c ****             if (interrupt_flag){
 1024              		.loc 1 460 0
 1025 0458 084B     		ldr	r3, .L81+8
 1026 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1027 045c 002B     		cmp	r3, #0
 1028 045e 11D0     		beq	.L78
 461:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1029              		.loc 1 461 0
 1030 0460 064B     		ldr	r3, .L81+8
 1031 0462 0022     		movs	r2, #0
 1032 0464 1A70     		strb	r2, [r3]
 462:..\src/interruptions.c ****                 interrupt_manager();
 1033              		.loc 1 462 0
 1034 0466 FFF7FEFF 		bl	interrupt_manager
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             break;
 1035              		.loc 1 465 0
 1036 046a 0BE0     		b	.L78
 1037              	.L76:
 328:..\src/interruptions.c ****             
 1038              		.loc 1 328 0
 1039 046c 00BF     		nop
 1040 046e 0AE0     		b	.L35
 1041              	.L77:
 400:..\src/interruptions.c ****             
 1042              		.loc 1 400 0
 1043 0470 00BF     		nop
 1044 0472 08E0     		b	.L35
 1045              	.L82:
 1046              		.align	2
 1047              	.L81:
 1048 0474 00000000 		.word	master_mode
 1049 0478 00000000 		.word	c_mem
 1050 047c 00000000 		.word	interrupt_flag
 1051 0480 00000000 		.word	g_refNew
 1052              	.L78:
 1053              		.loc 1 465 0
 1054 0484 00BF     		nop
 1055              	.L35:
 466:..\src/interruptions.c ****     }
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     analog_read_end();
 1056              		.loc 1 470 0
 1057 0486 FFF7FEFF 		bl	analog_read_end
 471:..\src/interruptions.c **** 
 472:..\src/interruptions.c ****     if (interrupt_flag){
 1058              		.loc 1 472 0
 1059 048a A74B     		ldr	r3, .L83
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 28


 1060 048c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 048e 002B     		cmp	r3, #0
 1062 0490 04D0     		beq	.L62
 473:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1063              		.loc 1 473 0
 1064 0492 A54B     		ldr	r3, .L83
 1065 0494 0022     		movs	r2, #0
 1066 0496 1A70     		strb	r2, [r3]
 474:..\src/interruptions.c ****         interrupt_manager();
 1067              		.loc 1 474 0
 1068 0498 FFF7FEFF 		bl	interrupt_manager
 1069              	.L62:
 475:..\src/interruptions.c ****     }
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 478:..\src/interruptions.c **** 
 479:..\src/interruptions.c ****     overcurrent_control();
 1070              		.loc 1 479 0
 1071 049c FFF7FEFF 		bl	overcurrent_control
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     // Check Interrupt 
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     if (interrupt_flag){
 1072              		.loc 1 483 0
 1073 04a0 A14B     		ldr	r3, .L83
 1074 04a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075 04a4 002B     		cmp	r3, #0
 1076 04a6 04D0     		beq	.L63
 484:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1077              		.loc 1 484 0
 1078 04a8 9F4B     		ldr	r3, .L83
 1079 04aa 0022     		movs	r2, #0
 1080 04ac 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****         interrupt_manager();
 1081              		.loc 1 485 0
 1082 04ae FFF7FEFF 		bl	interrupt_manager
 1083              	.L63:
 486:..\src/interruptions.c ****     }
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     //---------------------------------- Calibration 
 489:..\src/interruptions.c **** 
 490:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 491:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1084              		.loc 1 491 0
 1085 04b2 9E4B     		ldr	r3, .L83+4
 1086 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 04b6 012B     		cmp	r3, #1
 1088 04b8 0ED1     		bne	.L64
 492:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1089              		.loc 1 492 0
 1090 04ba 9D4B     		ldr	r3, .L83+8
 1091 04bc 1B88     		ldrh	r3, [r3]
 1092 04be 0A2B     		cmp	r3, #10
 1093 04c0 04D1     		bne	.L65
 493:..\src/interruptions.c ****             calibration();
 1094              		.loc 1 493 0
 1095 04c2 FFF7FEFF 		bl	calibration
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 29


 494:..\src/interruptions.c ****             counter_calibration = 0;
 1096              		.loc 1 494 0
 1097 04c6 9A4B     		ldr	r3, .L83+8
 1098 04c8 0022     		movs	r2, #0
 1099 04ca 1A80     		strh	r2, [r3]	@ movhi
 1100              	.L65:
 495:..\src/interruptions.c ****         }
 496:..\src/interruptions.c ****         counter_calibration++;
 1101              		.loc 1 496 0
 1102 04cc 984B     		ldr	r3, .L83+8
 1103 04ce 1B88     		ldrh	r3, [r3]
 1104 04d0 0133     		adds	r3, r3, #1
 1105 04d2 9AB2     		uxth	r2, r3
 1106 04d4 964B     		ldr	r3, .L83+8
 1107 04d6 1A80     		strh	r2, [r3]	@ movhi
 1108              	.L64:
 497:..\src/interruptions.c ****     }
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****     // Check Interrupt 
 500:..\src/interruptions.c ****     
 501:..\src/interruptions.c ****     if (interrupt_flag){
 1109              		.loc 1 501 0
 1110 04d8 934B     		ldr	r3, .L83
 1111 04da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 04dc 002B     		cmp	r3, #0
 1113 04de 04D0     		beq	.L66
 502:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1114              		.loc 1 502 0
 1115 04e0 914B     		ldr	r3, .L83
 1116 04e2 0022     		movs	r2, #0
 1117 04e4 1A70     		strb	r2, [r3]
 503:..\src/interruptions.c ****         interrupt_manager();
 1118              		.loc 1 503 0
 1119 04e6 FFF7FEFF 		bl	interrupt_manager
 1120              	.L66:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1121              		.loc 1 506 0
 1122 04ea 924B     		ldr	r3, .L83+12
 1123 04ec 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1124 04f0 002B     		cmp	r3, #0
 1125 04f2 1CD1     		bne	.L67
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****         //---------------------------------- Rest position check
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 511:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1126              		.loc 1 511 0
 1127 04f4 8F4B     		ldr	r3, .L83+12
 1128 04f6 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1129 04fa 012B     		cmp	r3, #1
 1130 04fc 17D1     		bne	.L67
 512:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1131              		.loc 1 512 0
 1132 04fe 8C4B     		ldr	r3, .L83+8
 1133 0500 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 30


 1134 0502 0A2B     		cmp	r3, #10
 1135 0504 04D1     		bne	.L68
 513:..\src/interruptions.c ****                     check_rest_position();
 1136              		.loc 1 513 0
 1137 0506 FFF7FEFF 		bl	check_rest_position
 514:..\src/interruptions.c ****                     counter_calibration = 0;
 1138              		.loc 1 514 0
 1139 050a 894B     		ldr	r3, .L83+8
 1140 050c 0022     		movs	r2, #0
 1141 050e 1A80     		strh	r2, [r3]	@ movhi
 1142              	.L68:
 515:..\src/interruptions.c ****             }
 516:..\src/interruptions.c ****             counter_calibration++;
 1143              		.loc 1 516 0
 1144 0510 874B     		ldr	r3, .L83+8
 1145 0512 1B88     		ldrh	r3, [r3]
 1146 0514 0133     		adds	r3, r3, #1
 1147 0516 9AB2     		uxth	r2, r3
 1148 0518 854B     		ldr	r3, .L83+8
 1149 051a 1A80     		strh	r2, [r3]	@ movhi
 517:..\src/interruptions.c **** 
 518:..\src/interruptions.c ****             // Check Interrupt     
 519:..\src/interruptions.c ****             if (interrupt_flag){
 1150              		.loc 1 519 0
 1151 051c 824B     		ldr	r3, .L83
 1152 051e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 0520 002B     		cmp	r3, #0
 1154 0522 04D0     		beq	.L67
 520:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1155              		.loc 1 520 0
 1156 0524 804B     		ldr	r3, .L83
 1157 0526 0022     		movs	r2, #0
 1158 0528 1A70     		strb	r2, [r3]
 521:..\src/interruptions.c ****                 interrupt_manager();
 1159              		.loc 1 521 0
 1160 052a FFF7FEFF 		bl	interrupt_manager
 1161              	.L67:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****         }
 524:..\src/interruptions.c ****         
 525:..\src/interruptions.c ****     }
 526:..\src/interruptions.c ****     
 527:..\src/interruptions.c ****      
 528:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 529:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1162              		.loc 1 529 0
 1163 052e 814B     		ldr	r3, .L83+12
 1164 0530 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1165 0534 002B     		cmp	r3, #0
 1166 0536 0AD0     		beq	.L69
 530:..\src/interruptions.c ****         
 531:..\src/interruptions.c ****         update_EMG_history();
 1167              		.loc 1 531 0
 1168 0538 FFF7FEFF 		bl	update_EMG_history
 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****         // Check Interrupt 
 534:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 31


 535:..\src/interruptions.c ****         if (interrupt_flag){
 1169              		.loc 1 535 0
 1170 053c 7A4B     		ldr	r3, .L83
 1171 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1172 0540 002B     		cmp	r3, #0
 1173 0542 04D0     		beq	.L69
 536:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1174              		.loc 1 536 0
 1175 0544 784B     		ldr	r3, .L83
 1176 0546 0022     		movs	r2, #0
 1177 0548 1A70     		strb	r2, [r3]
 537:..\src/interruptions.c ****             interrupt_manager();
 1178              		.loc 1 537 0
 1179 054a FFF7FEFF 		bl	interrupt_manager
 1180              	.L69:
 538:..\src/interruptions.c ****         }
 539:..\src/interruptions.c ****     }
 540:..\src/interruptions.c **** 
 541:..\src/interruptions.c ****     
 542:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 543:..\src/interruptions.c **** 
 544:..\src/interruptions.c ****     cycles_counter_update();
 1181              		.loc 1 544 0
 1182 054e FFF7FEFF 		bl	cycles_counter_update
 545:..\src/interruptions.c **** 
 546:..\src/interruptions.c ****     // Check Cycles Interrupt 
 547:..\src/interruptions.c ****     
 548:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1183              		.loc 1 548 0
 1184 0552 794B     		ldr	r3, .L83+16
 1185 0554 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1186 0556 002B     		cmp	r3, #0
 1187 0558 5BD0     		beq	.L70
 549:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1188              		.loc 1 549 0
 1189 055a 774B     		ldr	r3, .L83+16
 1190 055c 0022     		movs	r2, #0
 1191 055e 1A70     		strb	r2, [r3]
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 552:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 553:..\src/interruptions.c ****         if(can_write) {
 1192              		.loc 1 553 0
 1193 0560 764B     		ldr	r3, .L83+20
 1194 0562 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1195 0564 002B     		cmp	r3, #0
 1196 0566 54D0     		beq	.L70
 554:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1197              		.loc 1 554 0
 1198 0568 754B     		ldr	r3, .L83+24
 1199 056a 0022     		movs	r2, #0
 1200 056c 1A70     		strb	r2, [r3]
 555:..\src/interruptions.c ****             
 556:..\src/interruptions.c ****             //Update time variable
 557:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1201              		.loc 1 557 0
 1202 056e 754B     		ldr	r3, .L83+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 32


 1203 0570 9B6D     		ldr	r3, [r3, #88]
 1204 0572 7833     		adds	r3, r3, #120
 1205 0574 734A     		ldr	r2, .L83+28
 1206 0576 9365     		str	r3, [r2, #88]
 558:..\src/interruptions.c ****             
 559:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1207              		.loc 1 559 0
 1208 0578 6E4B     		ldr	r3, .L83+12
 1209 057a 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1210 057e 012B     		cmp	r3, #1
 1211 0580 47D1     		bne	.L70
 560:..\src/interruptions.c ****                 
 561:..\src/interruptions.c ****                 store_RTC_current_time();
 1212              		.loc 1 561 0
 1213 0582 FFF7FEFF 		bl	store_RTC_current_time
 562:..\src/interruptions.c ****                 
 563:..\src/interruptions.c ****                 //Write in SD card
 564:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1214              		.loc 1 564 0
 1215 0586 07F56A53 		add	r3, r7, #14976
 1216 058a 03F11803 		add	r3, r3, #24
 1217 058e 1846     		mov	r0, r3
 1218 0590 FFF7FEFF 		bl	prepare_SD_info
 565:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1219              		.loc 1 565 0
 1220 0594 6C4B     		ldr	r3, .L83+32
 1221 0596 1C68     		ldr	r4, [r3]
 1222 0598 07F56A53 		add	r3, r7, #14976
 1223 059c 03F11803 		add	r3, r3, #24
 1224 05a0 1846     		mov	r0, r3
 1225 05a2 FFF7FEFF 		bl	strlen
 1226 05a6 0246     		mov	r2, r0
 1227 05a8 07F56A53 		add	r3, r7, #14976
 1228 05ac 03F11803 		add	r3, r3, #24
 1229 05b0 1946     		mov	r1, r3
 1230 05b2 2046     		mov	r0, r4
 1231 05b4 FFF7FEFF 		bl	FS_Write
 566:..\src/interruptions.c ****                 
 567:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1232              		.loc 1 567 0
 1233 05b8 5E4B     		ldr	r3, .L83+12
 1234 05ba 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1235 05be 002B     		cmp	r3, #0
 1236 05c0 27D0     		beq	.L70
 1237              	.LBB3:
 568:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1238              		.loc 1 568 0
 1239 05c2 07F16003 		add	r3, r7, #96
 1240 05c6 603B     		subs	r3, r3, #96
 1241 05c8 0022     		movs	r2, #0
 1242 05ca 1A60     		str	r2, [r3]
 1243 05cc 0433     		adds	r3, r3, #4
 1244 05ce 43F69422 		movw	r2, #14996
 1245 05d2 0021     		movs	r1, #0
 1246 05d4 1846     		mov	r0, r3
 1247 05d6 FFF7FEFF 		bl	memset
 569:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 33


 1248              		.loc 1 569 0
 1249 05da 5C4B     		ldr	r3, .L83+36
 1250 05dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1251 05de 07F16003 		add	r3, r7, #96
 1252 05e2 603B     		subs	r3, r3, #96
 1253 05e4 1A70     		strb	r2, [r3]
 570:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1254              		.loc 1 570 0
 1255 05e6 07F16003 		add	r3, r7, #96
 1256 05ea 603B     		subs	r3, r3, #96
 1257 05ec 1846     		mov	r0, r3
 1258 05ee FFF7FEFF 		bl	prepare_SD_EMG_history
 571:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1259              		.loc 1 571 0
 1260 05f2 574B     		ldr	r3, .L83+40
 1261 05f4 1C68     		ldr	r4, [r3]
 1262 05f6 07F16003 		add	r3, r7, #96
 1263 05fa 603B     		subs	r3, r3, #96
 1264 05fc 1846     		mov	r0, r3
 1265 05fe FFF7FEFF 		bl	strlen
 1266 0602 0246     		mov	r2, r0
 1267 0604 07F16003 		add	r3, r7, #96
 1268 0608 603B     		subs	r3, r3, #96
 1269 060a 1946     		mov	r1, r3
 1270 060c 2046     		mov	r0, r4
 1271 060e FFF7FEFF 		bl	FS_Write
 1272              	.L70:
 1273              	.LBE3:
 572:..\src/interruptions.c ****                 }
 573:..\src/interruptions.c ****             }
 574:..\src/interruptions.c ****         }
 575:..\src/interruptions.c ****     }
 576:..\src/interruptions.c ****     
 577:..\src/interruptions.c ****     // Check Interrupt 
 578:..\src/interruptions.c ****     
 579:..\src/interruptions.c ****     if (interrupt_flag){
 1274              		.loc 1 579 0
 1275 0612 454B     		ldr	r3, .L83
 1276 0614 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1277 0616 002B     		cmp	r3, #0
 1278 0618 04D0     		beq	.L71
 580:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1279              		.loc 1 580 0
 1280 061a 434B     		ldr	r3, .L83
 1281 061c 0022     		movs	r2, #0
 1282 061e 1A70     		strb	r2, [r3]
 581:..\src/interruptions.c ****         interrupt_manager();
 1283              		.loc 1 581 0
 1284 0620 FFF7FEFF 		bl	interrupt_manager
 1285              	.L71:
 582:..\src/interruptions.c ****     }
 583:..\src/interruptions.c ****     
 584:..\src/interruptions.c ****     
 585:..\src/interruptions.c ****     //---------------------------------- Check battery
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 588:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 34


 1286              		.loc 1 588 0
 1287 0624 4B4B     		ldr	r3, .L83+44
 1288 0626 1B88     		ldrh	r3, [r3]
 1289 0628 0A2B     		cmp	r3, #10
 1290 062a 04D1     		bne	.L72
 589:..\src/interruptions.c ****         battery_management();   
 1291              		.loc 1 589 0
 1292 062c FFF7FEFF 		bl	battery_management
 590:..\src/interruptions.c ****         counter_tension_func = 0;
 1293              		.loc 1 590 0
 1294 0630 484B     		ldr	r3, .L83+44
 1295 0632 0022     		movs	r2, #0
 1296 0634 1A80     		strh	r2, [r3]	@ movhi
 1297              	.L72:
 591:..\src/interruptions.c ****     }
 592:..\src/interruptions.c ****     counter_tension_func++;
 1298              		.loc 1 592 0
 1299 0636 474B     		ldr	r3, .L83+44
 1300 0638 1B88     		ldrh	r3, [r3]
 1301 063a 0133     		adds	r3, r3, #1
 1302 063c 9AB2     		uxth	r2, r3
 1303 063e 454B     		ldr	r3, .L83+44
 1304 0640 1A80     		strh	r2, [r3]	@ movhi
 593:..\src/interruptions.c **** 
 594:..\src/interruptions.c ****     // Check Interrupt 
 595:..\src/interruptions.c ****     
 596:..\src/interruptions.c ****     if (interrupt_flag){
 1305              		.loc 1 596 0
 1306 0642 394B     		ldr	r3, .L83
 1307 0644 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1308 0646 002B     		cmp	r3, #0
 1309 0648 04D0     		beq	.L73
 597:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1310              		.loc 1 597 0
 1311 064a 374B     		ldr	r3, .L83
 1312 064c 0022     		movs	r2, #0
 1313 064e 1A70     		strb	r2, [r3]
 598:..\src/interruptions.c ****         interrupt_manager();
 1314              		.loc 1 598 0
 1315 0650 FFF7FEFF 		bl	interrupt_manager
 1316              	.L73:
 599:..\src/interruptions.c ****     }
 600:..\src/interruptions.c ****    
 601:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 602:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1317              		.loc 1 602 0
 1318 0654 374B     		ldr	r3, .L83+12
 1319 0656 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1320 065a 002B     		cmp	r3, #0
 1321 065c 0AD0     		beq	.L74
 603:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1322              		.loc 1 603 0
 1323 065e FFF7FEFF 		bl	ReadAllIMUs
 604:..\src/interruptions.c ****         
 605:..\src/interruptions.c ****         if (interrupt_flag){
 1324              		.loc 1 605 0
 1325 0662 314B     		ldr	r3, .L83
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 35


 1326 0664 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1327 0666 002B     		cmp	r3, #0
 1328 0668 04D0     		beq	.L74
 606:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1329              		.loc 1 606 0
 1330 066a 2F4B     		ldr	r3, .L83
 1331 066c 0022     		movs	r2, #0
 1332 066e 1A70     		strb	r2, [r3]
 607:..\src/interruptions.c ****             interrupt_manager();
 1333              		.loc 1 607 0
 1334 0670 FFF7FEFF 		bl	interrupt_manager
 1335              	.L74:
 608:..\src/interruptions.c ****         }
 609:..\src/interruptions.c ****     }
 610:..\src/interruptions.c ****    
 611:..\src/interruptions.c ****     //---------------------------------- Update States
 612:..\src/interruptions.c ****     
 613:..\src/interruptions.c ****     // Load k-1 state
 614:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1336              		.loc 1 614 0
 1337 0674 384A     		ldr	r2, .L83+48
 1338 0676 394B     		ldr	r3, .L83+52
 1339 0678 1446     		mov	r4, r2
 1340 067a 1D46     		mov	r5, r3
 1341 067c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1342 067e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1343 0680 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1344 0682 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1345 0684 95E80300 		ldmia	r5, {r0, r1}
 1346 0688 84E80300 		stmia	r4, {r0, r1}
 615:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1347              		.loc 1 615 0
 1348 068c 344A     		ldr	r2, .L83+56
 1349 068e 354B     		ldr	r3, .L83+60
 1350 0690 1046     		mov	r0, r2
 1351 0692 1946     		mov	r1, r3
 1352 0694 6823     		movs	r3, #104
 1353 0696 1A46     		mov	r2, r3
 1354 0698 FFF7FEFF 		bl	memcpy
 616:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1355              		.loc 1 616 0
 1356 069c 324A     		ldr	r2, .L83+64
 1357 069e 334B     		ldr	r3, .L83+68
 1358 06a0 1446     		mov	r4, r2
 1359 06a2 1D46     		mov	r5, r3
 1360 06a4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1361 06a6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1362 06a8 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1363 06ac 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 617:..\src/interruptions.c **** 
 618:..\src/interruptions.c ****     // Load k+1 state        
 619:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1364              		.loc 1 619 0
 1365 06b0 2E4A     		ldr	r2, .L83+68
 1366 06b2 2F4B     		ldr	r3, .L83+72
 1367 06b4 1446     		mov	r4, r2
 1368 06b6 1D46     		mov	r5, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 36


 1369 06b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1370 06ba 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1371 06bc 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1372 06c0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 620:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1373              		.loc 1 620 0
 1374 06c4 2B4A     		ldr	r2, .L83+76
 1375 06c6 2C4B     		ldr	r3, .L83+80
 1376 06c8 1046     		mov	r0, r2
 1377 06ca 1946     		mov	r1, r3
 1378 06cc C823     		movs	r3, #200
 1379 06ce 1A46     		mov	r2, r3
 1380 06d0 FFF7FEFF 		bl	memcpy
 621:..\src/interruptions.c ****                 
 622:..\src/interruptions.c ****     if (interrupt_flag){
 1381              		.loc 1 622 0
 1382 06d4 144B     		ldr	r3, .L83
 1383 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1384 06d8 002B     		cmp	r3, #0
 1385 06da 04D0     		beq	.L75
 623:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1386              		.loc 1 623 0
 1387 06dc 124B     		ldr	r3, .L83
 1388 06de 0022     		movs	r2, #0
 1389 06e0 1A70     		strb	r2, [r3]
 624:..\src/interruptions.c ****         interrupt_manager();
 1390              		.loc 1 624 0
 1391 06e2 FFF7FEFF 		bl	interrupt_manager
 1392              	.L75:
 625:..\src/interruptions.c ****     }
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1393              		.loc 1 627 0
 1394 06e6 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1395 06ea 0346     		mov	r3, r0
 1396 06ec 1A46     		mov	r2, r3
 1397 06ee 234B     		ldr	r3, .L83+84
 1398 06f0 1A80     		strh	r2, [r3]	@ movhi
 628:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1399              		.loc 1 628 0
 1400 06f2 234B     		ldr	r3, .L83+88
 1401 06f4 1B88     		ldrh	r3, [r3]
 1402 06f6 1A46     		mov	r2, r3
 1403 06f8 204B     		ldr	r3, .L83+84
 1404 06fa 1B88     		ldrh	r3, [r3]
 1405 06fc D31A     		subs	r3, r2, r3
 1406 06fe 1846     		mov	r0, r3
 1407 0700 FFF7FEFF 		bl	__aeabi_i2f
 1408 0704 0346     		mov	r3, r0
 1409 0706 1F49     		ldr	r1, .L83+92
 1410 0708 1846     		mov	r0, r3
 1411 070a FFF7FEFF 		bl	__aeabi_fdiv
 1412 070e 0346     		mov	r3, r0
 1413 0710 1A46     		mov	r2, r3
 1414 0712 1D4B     		ldr	r3, .L83+96
 1415 0714 1A60     		str	r2, [r3]	@ float
 629:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 37


 1416              		.loc 1 629 0
 1417 0716 0120     		movs	r0, #1
 1418 0718 FFF7FEFF 		bl	MY_TIMER_REG_Write
 630:..\src/interruptions.c **** 
 631:..\src/interruptions.c **** }
 1419              		.loc 1 631 0
 1420 071c 00BF     		nop
 1421 071e 07F58847 		add	r7, r7, #17408
 1422 0722 6037     		adds	r7, r7, #96
 1423              		.cfi_def_cfa_offset 16
 1424 0724 BD46     		mov	sp, r7
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 0726 B0BD     		pop	{r4, r5, r7, pc}
 1428              	.L84:
 1429              		.align	2
 1430              	.L83:
 1431 0728 00000000 		.word	interrupt_flag
 1432 072c 00000000 		.word	calib
 1433 0730 00000000 		.word	counter_calibration.10465
 1434 0734 00000000 		.word	c_mem
 1435 0738 00000000 		.word	cycles_interrupt_flag
 1436 073c 00000000 		.word	can_write
 1437 0740 00000000 		.word	cycles_status
 1438 0744 00000000 		.word	g_mem
 1439 0748 00000000 		.word	pFile
 1440 074c 20000000 		.word	.LC0
 1441 0750 00000000 		.word	pEMGHFile
 1442 0754 02000000 		.word	counter_tension_func.10466
 1443 0758 00000000 		.word	g_adc_measOld
 1444 075c 00000000 		.word	g_adc_meas
 1445 0760 00000000 		.word	g_measOld
 1446 0764 00000000 		.word	g_meas
 1447 0768 00000000 		.word	g_refOld
 1448 076c 00000000 		.word	g_ref
 1449 0770 00000000 		.word	g_refNew
 1450 0774 00000000 		.word	g_imu
 1451 0778 00000000 		.word	g_imuNew
 1452 077c 00000000 		.word	timer_value
 1453 0780 00000000 		.word	timer_value0
 1454 0784 00247449 		.word	1232348160
 1455 0788 00000000 		.word	cycle_time
 1456              		.cfi_endproc
 1457              	.LFE67:
 1458              		.size	function_scheduler, .-function_scheduler
 1459              		.section	.text.compute_reference,"ax",%progbits
 1460              		.align	2
 1461              		.global	compute_reference
 1462              		.thumb
 1463              		.thumb_func
 1464              		.type	compute_reference, %function
 1465              	compute_reference:
 1466              	.LFB68:
 632:..\src/interruptions.c **** 
 633:..\src/interruptions.c **** //==============================================================================
 634:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 635:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 38


 636:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1467              		.loc 1 636 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 40
 1470              		@ frame_needed = 1, uses_anonymous_args = 0
 1471 0000 80B5     		push	{r7, lr}
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 7, -8
 1474              		.cfi_offset 14, -4
 1475 0002 8CB0     		sub	sp, sp, #48
 1476              		.cfi_def_cfa_offset 56
 1477 0004 02AF     		add	r7, sp, #8
 1478              		.cfi_def_cfa 7, 48
 1479 0006 0346     		mov	r3, r0
 1480 0008 B960     		str	r1, [r7, #8]
 1481 000a 7A60     		str	r2, [r7, #4]
 1482 000c FB73     		strb	r3, [r7, #15]
 637:..\src/interruptions.c ****     
 638:..\src/interruptions.c ****     int32 CYDATA handle_value;
 639:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 640:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1483              		.loc 1 640 0
 1484 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1485 0010 1346     		mov	r3, r2
 1486 0012 DB00     		lsls	r3, r3, #3
 1487 0014 9B1A     		subs	r3, r3, r2
 1488 0016 1B01     		lsls	r3, r3, #4
 1489 0018 B033     		adds	r3, r3, #176
 1490 001a A74A     		ldr	r2, .L149
 1491 001c 1344     		add	r3, r3, r2
 1492 001e 3B62     		str	r3, [r7, #32]
 641:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1493              		.loc 1 641 0
 1494 0020 3B6A     		ldr	r3, [r7, #32]
 1495 0022 93F86030 		ldrb	r3, [r3, #96]
 1496 0026 FB77     		strb	r3, [r7, #31]
 642:..\src/interruptions.c ****     
 643:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 644:..\src/interruptions.c ****                                                         // 1 EMG 1
 645:..\src/interruptions.c ****                                                         // 2 EMG 2
 646:..\src/interruptions.c ****                                                         // wait for both to get down
 647:..\src/interruptions.c ****     
 648:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1497              		.loc 1 648 0
 1498 0028 A44B     		ldr	r3, .L149+4
 1499 002a 1B68     		ldr	r3, [r3]
 1500 002c A24A     		ldr	r2, .L149
 1501 002e B2F8F021 		ldrh	r2, [r2, #496]
 1502 0032 9B1A     		subs	r3, r3, r2
 1503 0034 BB61     		str	r3, [r7, #24]
 649:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1504              		.loc 1 649 0
 1505 0036 A14B     		ldr	r3, .L149+4
 1506 0038 5B68     		ldr	r3, [r3, #4]
 1507 003a 9F4A     		ldr	r2, .L149
 1508 003c B2F8F221 		ldrh	r2, [r2, #498]
 1509 0040 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 39


 1510 0042 7B61     		str	r3, [r7, #20]
 650:..\src/interruptions.c ****     
 651:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 652:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1511              		.loc 1 652 0
 1512 0044 3B6A     		ldr	r3, [r7, #32]
 1513 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1514 004a 013B     		subs	r3, r3, #1
 1515 004c 062B     		cmp	r3, #6
 1516 004e 00F25182 		bhi	.L141
 1517 0052 01A2     		adr	r2, .L88
 1518 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1519              		.p2align 2
 1520              	.L88:
 1521 0058 75000000 		.word	.L87+1
 1522 005c 21020000 		.word	.L89+1
 1523 0060 C9020000 		.word	.L90+1
 1524 0064 31030000 		.word	.L91+1
 1525 0068 11040000 		.word	.L92+1
 1526 006c 4D010000 		.word	.L93+1
 1527 0070 5B020000 		.word	.L94+1
 1528              		.p2align 1
 1529              	.L87:
 653:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 654:..\src/interruptions.c **** 
 655:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 656:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 657:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1530              		.loc 1 657 0
 1531 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1532 0076 9049     		ldr	r1, .L149
 1533 0078 1346     		mov	r3, r2
 1534 007a 5B00     		lsls	r3, r3, #1
 1535 007c 1344     		add	r3, r3, r2
 1536 007e 1B01     		lsls	r3, r3, #4
 1537 0080 0B44     		add	r3, r3, r1
 1538 0082 03F5D873 		add	r3, r3, #432
 1539 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1540 0088 002B     		cmp	r3, #0
 1541 008a 19D0     		beq	.L95
 658:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1542              		.loc 1 658 0
 1543 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1544 008e 8C4A     		ldr	r2, .L149+8
 1545 0090 3421     		movs	r1, #52
 1546 0092 01FB03F3 		mul	r3, r1, r3
 1547 0096 1344     		add	r3, r3, r2
 1548 0098 0833     		adds	r3, r3, #8
 1549 009a 1968     		ldr	r1, [r3]
 1550 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1551 009e 8648     		ldr	r0, .L149
 1552 00a0 1346     		mov	r3, r2
 1553 00a2 5B00     		lsls	r3, r3, #1
 1554 00a4 1344     		add	r3, r3, r2
 1555 00a6 1B01     		lsls	r3, r3, #4
 1556 00a8 0344     		add	r3, r3, r0
 1557 00aa 03F5DA73 		add	r3, r3, #436
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 40


 1558 00ae 93F90030 		ldrsb	r3, [r3]
 1559 00b2 03FB01F2 		mul	r2, r3, r1
 1560 00b6 3B6A     		ldr	r3, [r7, #32]
 1561 00b8 5B6B     		ldr	r3, [r3, #52]
 1562 00ba 1344     		add	r3, r3, r2
 1563 00bc 7B62     		str	r3, [r7, #36]
 1564 00be 18E0     		b	.L96
 1565              	.L95:
 659:..\src/interruptions.c ****             else
 660:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1566              		.loc 1 660 0
 1567 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1568 00c2 7F4A     		ldr	r2, .L149+8
 1569 00c4 3421     		movs	r1, #52
 1570 00c6 01FB03F3 		mul	r3, r1, r3
 1571 00ca 1344     		add	r3, r3, r2
 1572 00cc 0433     		adds	r3, r3, #4
 1573 00ce 1968     		ldr	r1, [r3]
 1574 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1575 00d2 7948     		ldr	r0, .L149
 1576 00d4 1346     		mov	r3, r2
 1577 00d6 5B00     		lsls	r3, r3, #1
 1578 00d8 1344     		add	r3, r3, r2
 1579 00da 1B01     		lsls	r3, r3, #4
 1580 00dc 0344     		add	r3, r3, r0
 1581 00de 03F5DA73 		add	r3, r3, #436
 1582 00e2 93F90030 		ldrsb	r3, [r3]
 1583 00e6 03FB01F2 		mul	r2, r3, r1
 1584 00ea 3B6A     		ldr	r3, [r7, #32]
 1585 00ec 5B6B     		ldr	r3, [r3, #52]
 1586 00ee 1344     		add	r3, r3, r2
 1587 00f0 7B62     		str	r3, [r7, #36]
 1588              	.L96:
 661:..\src/interruptions.c ****             
 662:..\src/interruptions.c **** 
 663:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 664:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1589              		.loc 1 664 0
 1590 00f2 7B68     		ldr	r3, [r7, #4]
 1591 00f4 1B68     		ldr	r3, [r3]
 1592 00f6 7A6A     		ldr	r2, [r7, #36]
 1593 00f8 D21A     		subs	r2, r2, r3
 1594 00fa 3B6A     		ldr	r3, [r7, #32]
 1595 00fc 1B6C     		ldr	r3, [r3, #64]
 1596 00fe 9A42     		cmp	r2, r3
 1597 0100 0BDD     		ble	.L97
 1598              		.loc 1 664 0 is_stmt 0 discriminator 1
 1599 0102 3B6A     		ldr	r3, [r7, #32]
 1600 0104 1B6C     		ldr	r3, [r3, #64]
 1601 0106 002B     		cmp	r3, #0
 1602 0108 07D0     		beq	.L97
 665:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1603              		.loc 1 665 0 is_stmt 1
 1604 010a BB68     		ldr	r3, [r7, #8]
 1605 010c 1A68     		ldr	r2, [r3]
 1606 010e 3B6A     		ldr	r3, [r7, #32]
 1607 0110 1B6C     		ldr	r3, [r3, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 41


 1608 0112 1A44     		add	r2, r2, r3
 1609 0114 BB68     		ldr	r3, [r7, #8]
 1610 0116 1A60     		str	r2, [r3]
 1611 0118 17E0     		b	.L98
 1612              	.L97:
 666:..\src/interruptions.c ****             else {
 667:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1613              		.loc 1 667 0
 1614 011a 7B68     		ldr	r3, [r7, #4]
 1615 011c 1B68     		ldr	r3, [r3]
 1616 011e 7A6A     		ldr	r2, [r7, #36]
 1617 0120 D21A     		subs	r2, r2, r3
 1618 0122 3B6A     		ldr	r3, [r7, #32]
 1619 0124 DB6B     		ldr	r3, [r3, #60]
 1620 0126 9A42     		cmp	r2, r3
 1621 0128 0BDA     		bge	.L99
 1622              		.loc 1 667 0 is_stmt 0 discriminator 1
 1623 012a 3B6A     		ldr	r3, [r7, #32]
 1624 012c DB6B     		ldr	r3, [r3, #60]
 1625 012e 002B     		cmp	r3, #0
 1626 0130 07D0     		beq	.L99
 668:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1627              		.loc 1 668 0 is_stmt 1
 1628 0132 BB68     		ldr	r3, [r7, #8]
 1629 0134 1A68     		ldr	r2, [r3]
 1630 0136 3B6A     		ldr	r3, [r7, #32]
 1631 0138 DB6B     		ldr	r3, [r3, #60]
 1632 013a 1A44     		add	r2, r2, r3
 1633 013c BB68     		ldr	r3, [r7, #8]
 1634 013e 1A60     		str	r2, [r3]
 1635 0140 03E0     		b	.L98
 1636              	.L99:
 669:..\src/interruptions.c ****                 else
 670:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1637              		.loc 1 670 0
 1638 0142 BB68     		ldr	r3, [r7, #8]
 1639 0144 7A6A     		ldr	r2, [r7, #36]
 1640 0146 1A60     		str	r2, [r3]
 671:..\src/interruptions.c ****             }
 672:..\src/interruptions.c ****             break;
 1641              		.loc 1 672 0
 1642 0148 DFE1     		b	.L100
 1643              	.L98:
 1644 014a DEE1     		b	.L100
 1645              	.L93:
 673:..\src/interruptions.c ****         
 674:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 675:..\src/interruptions.c ****             
 676:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1646              		.loc 1 676 0
 1647 014c 5A4B     		ldr	r3, .L149
 1648 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1649 0152 002B     		cmp	r3, #0
 1650 0154 57D1     		bne	.L101
 677:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 678:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1651              		.loc 1 678 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 42


 1652 0156 7B68     		ldr	r3, [r7, #4]
 1653 0158 1A68     		ldr	r2, [r3]
 1654 015a BB68     		ldr	r3, [r7, #8]
 1655 015c 1A60     		str	r2, [r3]
 679:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1656              		.loc 1 679 0
 1657 015e 574B     		ldr	r3, .L149+4
 1658 0160 1B6A     		ldr	r3, [r3, #32]
 1659 0162 B3F52F7F 		cmp	r3, #700
 1660 0166 45DC     		bgt	.L102
 1661              	.LBB4:
 680:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1662              		.loc 1 680 0
 1663 0168 544B     		ldr	r3, .L149+4
 1664 016a 1B6A     		ldr	r3, [r3, #32]
 1665 016c 524A     		ldr	r2, .L149
 1666 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1667 0172 9B1A     		subs	r3, r3, r2
 1668 0174 3B61     		str	r3, [r7, #16]
 681:..\src/interruptions.c **** 
 682:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1669              		.loc 1 682 0
 1670 0176 514B     		ldr	r3, .L149+4
 1671 0178 1B6A     		ldr	r3, [r3, #32]
 1672 017a 4F4A     		ldr	r2, .L149
 1673 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1674 0180 9342     		cmp	r3, r2
 1675 0182 13DD     		ble	.L103
 683:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1676              		.loc 1 683 0
 1677 0184 BB68     		ldr	r3, [r7, #8]
 1678 0186 1A68     		ldr	r2, [r3]
 1679 0188 4B4B     		ldr	r3, .L149
 1680 018a B3F8B032 		ldrh	r3, [r3, #688]
 1681 018e 1946     		mov	r1, r3
 1682 0190 3B69     		ldr	r3, [r7, #16]
 1683 0192 03FB01F1 		mul	r1, r3, r1
 1684 0196 484B     		ldr	r3, .L149
 1685 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1686 019c C3F58063 		rsb	r3, r3, #1024
 1687 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1688 01a4 1A44     		add	r2, r2, r3
 1689 01a6 BB68     		ldr	r3, [r7, #8]
 1690 01a8 1A60     		str	r2, [r3]
 1691              	.LBE4:
 684:..\src/interruptions.c ****                     }
 685:..\src/interruptions.c ****                     else {
 686:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 687:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 688:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 689:..\src/interruptions.c ****                         }
 690:..\src/interruptions.c ****                     }
 691:..\src/interruptions.c ****                 }
 692:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 693:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 694:..\src/interruptions.c ****                 }
 695:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 43


 696:..\src/interruptions.c ****             else {
 697:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 698:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 699:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 700:..\src/interruptions.c ****                 }
 701:..\src/interruptions.c ****             }
 702:..\src/interruptions.c ****             break;
 1692              		.loc 1 702 0
 1693 01aa A5E1     		b	.L142
 1694              	.L103:
 1695              	.LBB5:
 686:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1696              		.loc 1 686 0
 1697 01ac 434B     		ldr	r3, .L149+4
 1698 01ae 1B6A     		ldr	r3, [r3, #32]
 1699 01b0 414A     		ldr	r2, .L149
 1700 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1701 01b6 1344     		add	r3, r3, r2
 1702 01b8 3B61     		str	r3, [r7, #16]
 687:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1703              		.loc 1 687 0
 1704 01ba 404B     		ldr	r3, .L149+4
 1705 01bc 1A6A     		ldr	r2, [r3, #32]
 1706 01be 3E4B     		ldr	r3, .L149
 1707 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1708 01c4 5B42     		negs	r3, r3
 1709 01c6 9A42     		cmp	r2, r3
 1710 01c8 80F29681 		bge	.L142
 688:..\src/interruptions.c ****                         }
 1711              		.loc 1 688 0
 1712 01cc BB68     		ldr	r3, [r7, #8]
 1713 01ce 1A68     		ldr	r2, [r3]
 1714 01d0 394B     		ldr	r3, .L149
 1715 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1716 01d6 1946     		mov	r1, r3
 1717 01d8 3B69     		ldr	r3, [r7, #16]
 1718 01da 03FB01F1 		mul	r1, r3, r1
 1719 01de 364B     		ldr	r3, .L149
 1720 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1721 01e4 C3F58063 		rsb	r3, r3, #1024
 1722 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1723 01ec 1A44     		add	r2, r2, r3
 1724 01ee BB68     		ldr	r3, [r7, #8]
 1725 01f0 1A60     		str	r2, [r3]
 1726              	.LBE5:
 1727              		.loc 1 702 0
 1728 01f2 81E1     		b	.L142
 1729              	.L102:
 693:..\src/interruptions.c ****                 }
 1730              		.loc 1 693 0
 1731 01f4 BB68     		ldr	r3, [r7, #8]
 1732 01f6 1B68     		ldr	r3, [r3]
 1733 01f8 324A     		ldr	r2, .L149+12
 1734 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1735 01fe 9A1A     		subs	r2, r3, r2
 1736 0200 BB68     		ldr	r3, [r7, #8]
 1737 0202 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 44


 1738              		.loc 1 702 0
 1739 0204 78E1     		b	.L142
 1740              	.L101:
 698:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1741              		.loc 1 698 0
 1742 0206 2C4B     		ldr	r3, .L149
 1743 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1744 020c 042B     		cmp	r3, #4
 1745 020e 40F07381 		bne	.L142
 699:..\src/interruptions.c ****                 }
 1746              		.loc 1 699 0
 1747 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1748 0214 7A68     		ldr	r2, [r7, #4]
 1749 0216 B968     		ldr	r1, [r7, #8]
 1750 0218 1846     		mov	r0, r3
 1751 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1752              		.loc 1 702 0
 1753 021e 6BE1     		b	.L142
 1754              	.L89:
 703:..\src/interruptions.c ****             
 704:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 705:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1755              		.loc 1 705 0
 1756 0220 BB69     		ldr	r3, [r7, #24]
 1757 0222 002B     		cmp	r3, #0
 1758 0224 15DD     		ble	.L107
 706:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1759              		.loc 1 706 0
 1760 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1761 0228 2649     		ldr	r1, .L149+12
 1762 022a 1346     		mov	r3, r2
 1763 022c DB00     		lsls	r3, r3, #3
 1764 022e 9B1A     		subs	r3, r3, r2
 1765 0230 1B01     		lsls	r3, r3, #4
 1766 0232 0B44     		add	r3, r3, r1
 1767 0234 E833     		adds	r3, r3, #232
 1768 0236 1B68     		ldr	r3, [r3]
 1769 0238 BA69     		ldr	r2, [r7, #24]
 1770 023a 02FB03F2 		mul	r2, r2, r3
 1771 023e 1E4B     		ldr	r3, .L149
 1772 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1773 0244 C3F58063 		rsb	r3, r3, #1024
 1774 0248 92FBF3F2 		sdiv	r2, r2, r3
 1775 024c BB68     		ldr	r3, [r7, #8]
 1776 024e 1A60     		str	r2, [r3]
 707:..\src/interruptions.c ****             else
 708:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 709:..\src/interruptions.c ****             break;
 1777              		.loc 1 709 0
 1778 0250 5BE1     		b	.L100
 1779              	.L107:
 708:..\src/interruptions.c ****             break;
 1780              		.loc 1 708 0
 1781 0252 BB68     		ldr	r3, [r7, #8]
 1782 0254 0022     		movs	r2, #0
 1783 0256 1A60     		str	r2, [r3]
 1784              		.loc 1 709 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 45


 1785 0258 57E1     		b	.L100
 1786              	.L94:
 710:..\src/interruptions.c ****         
 711:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 712:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1787              		.loc 1 712 0
 1788 025a BB69     		ldr	r3, [r7, #24]
 1789 025c 002B     		cmp	r3, #0
 1790 025e 1FDD     		ble	.L109
 713:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1791              		.loc 1 713 0
 1792 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1793 0262 1849     		ldr	r1, .L149+12
 1794 0264 1346     		mov	r3, r2
 1795 0266 DB00     		lsls	r3, r3, #3
 1796 0268 9B1A     		subs	r3, r3, r2
 1797 026a 1B01     		lsls	r3, r3, #4
 1798 026c 0B44     		add	r3, r3, r1
 1799 026e E833     		adds	r3, r3, #232
 1800 0270 1968     		ldr	r1, [r3]
 1801 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1802 0274 1348     		ldr	r0, .L149+12
 1803 0276 1346     		mov	r3, r2
 1804 0278 DB00     		lsls	r3, r3, #3
 1805 027a 9B1A     		subs	r3, r3, r2
 1806 027c 1B01     		lsls	r3, r3, #4
 1807 027e 0344     		add	r3, r3, r0
 1808 0280 E833     		adds	r3, r3, #232
 1809 0282 1B68     		ldr	r3, [r3]
 1810 0284 BA69     		ldr	r2, [r7, #24]
 1811 0286 02FB03F2 		mul	r2, r2, r3
 1812 028a 0B4B     		ldr	r3, .L149
 1813 028c B3F8F031 		ldrh	r3, [r3, #496]
 1814 0290 C3F58063 		rsb	r3, r3, #1024
 1815 0294 92FBF3F3 		sdiv	r3, r2, r3
 1816 0298 CA1A     		subs	r2, r1, r3
 1817 029a BB68     		ldr	r3, [r7, #8]
 1818 029c 1A60     		str	r2, [r3]
 714:..\src/interruptions.c ****             else
 715:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 716:..\src/interruptions.c ****             break;
 1819              		.loc 1 716 0
 1820 029e 34E1     		b	.L100
 1821              	.L109:
 715:..\src/interruptions.c ****             break;
 1822              		.loc 1 715 0
 1823 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1824 02a2 0849     		ldr	r1, .L149+12
 1825 02a4 1346     		mov	r3, r2
 1826 02a6 DB00     		lsls	r3, r3, #3
 1827 02a8 9B1A     		subs	r3, r3, r2
 1828 02aa 1B01     		lsls	r3, r3, #4
 1829 02ac 0B44     		add	r3, r3, r1
 1830 02ae E833     		adds	r3, r3, #232
 1831 02b0 1A68     		ldr	r2, [r3]
 1832 02b2 BB68     		ldr	r3, [r7, #8]
 1833 02b4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 46


 1834              		.loc 1 716 0
 1835 02b6 28E1     		b	.L100
 1836              	.L150:
 1837              		.align	2
 1838              	.L149:
 1839 02b8 00000000 		.word	c_mem
 1840 02bc 00000000 		.word	g_adc_meas
 1841 02c0 00000000 		.word	g_meas
 1842 02c4 00000000 		.word	g_mem
 1843              	.L90:
 717:..\src/interruptions.c **** 
 718:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 719:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1844              		.loc 1 719 0
 1845 02c8 7B68     		ldr	r3, [r7, #4]
 1846 02ca 1A68     		ldr	r2, [r3]
 1847 02cc BB68     		ldr	r3, [r7, #8]
 1848 02ce 1A60     		str	r2, [r3]
 720:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1849              		.loc 1 720 0
 1850 02d0 BB69     		ldr	r3, [r7, #24]
 1851 02d2 002B     		cmp	r3, #0
 1852 02d4 13DD     		ble	.L111
 721:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1853              		.loc 1 721 0
 1854 02d6 7B68     		ldr	r3, [r7, #4]
 1855 02d8 1A68     		ldr	r2, [r3]
 1856 02da 884B     		ldr	r3, .L151
 1857 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1858 02e0 1946     		mov	r1, r3
 1859 02e2 BB69     		ldr	r3, [r7, #24]
 1860 02e4 03FB01F3 		mul	r3, r3, r1
 1861 02e8 5900     		lsls	r1, r3, #1
 1862 02ea 854B     		ldr	r3, .L151+4
 1863 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1864 02f0 C3F58063 		rsb	r3, r3, #1024
 1865 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1866 02f8 1A44     		add	r2, r2, r3
 1867 02fa BB68     		ldr	r3, [r7, #8]
 1868 02fc 1A60     		str	r2, [r3]
 1869              	.L111:
 722:..\src/interruptions.c ****             }
 723:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1870              		.loc 1 723 0
 1871 02fe 7B69     		ldr	r3, [r7, #20]
 1872 0300 002B     		cmp	r3, #0
 1873 0302 40F30181 		ble	.L143
 724:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1874              		.loc 1 724 0
 1875 0306 7B68     		ldr	r3, [r7, #4]
 1876 0308 1A68     		ldr	r2, [r3]
 1877 030a 7C4B     		ldr	r3, .L151
 1878 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1879 0310 1946     		mov	r1, r3
 1880 0312 7B69     		ldr	r3, [r7, #20]
 1881 0314 03FB01F3 		mul	r3, r3, r1
 1882 0318 5900     		lsls	r1, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 47


 1883 031a 794B     		ldr	r3, .L151+4
 1884 031c B3F8F231 		ldrh	r3, [r3, #498]
 1885 0320 C3F58063 		rsb	r3, r3, #1024
 1886 0324 91FBF3F3 		sdiv	r3, r1, r3
 1887 0328 D21A     		subs	r2, r2, r3
 1888 032a BB68     		ldr	r3, [r7, #8]
 1889 032c 1A60     		str	r2, [r3]
 725:..\src/interruptions.c ****             }
 726:..\src/interruptions.c ****             break;
 1890              		.loc 1 726 0
 1891 032e EBE0     		b	.L143
 1892              	.L91:
 727:..\src/interruptions.c **** 
 728:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 729:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1893              		.loc 1 729 0
 1894 0330 7B68     		ldr	r3, [r7, #4]
 1895 0332 1A68     		ldr	r2, [r3]
 1896 0334 BB68     		ldr	r3, [r7, #8]
 1897 0336 1A60     		str	r2, [r3]
 730:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1898              		.loc 1 730 0
 1899 0338 714B     		ldr	r3, .L151+4
 1900 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1901 033e 042B     		cmp	r3, #4
 1902 0340 5BD0     		beq	.L113
 731:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1903              		.loc 1 731 0
 1904 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1905 0344 6F4A     		ldr	r2, .L151+8
 1906 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1907 0348 012B     		cmp	r3, #1
 1908 034a 1CD0     		beq	.L115
 1909 034c 022B     		cmp	r3, #2
 1910 034e 37D0     		beq	.L116
 1911 0350 002B     		cmp	r3, #0
 1912 0352 00D0     		beq	.L117
 732:..\src/interruptions.c ****                     case 0:
 733:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 734:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 735:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 736:..\src/interruptions.c ****                             break;
 737:..\src/interruptions.c ****                         }
 738:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 739:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 740:..\src/interruptions.c ****                             break;
 741:..\src/interruptions.c ****                         }
 742:..\src/interruptions.c ****                         break;
 743:..\src/interruptions.c **** 
 744:..\src/interruptions.c ****                     case 1:
 745:..\src/interruptions.c ****                         // EMG 1 is first
 746:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 748:..\src/interruptions.c ****                             break;
 749:..\src/interruptions.c ****                         }
 750:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 751:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 48


 752:..\src/interruptions.c **** 
 753:..\src/interruptions.c ****                     case 2:
 754:..\src/interruptions.c ****                         // EMG 2 is first
 755:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 756:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 757:..\src/interruptions.c ****                             break;
 758:..\src/interruptions.c ****                         }
 759:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 760:..\src/interruptions.c ****                         break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                     default:
 763:..\src/interruptions.c ****                         break;
 1913              		.loc 1 763 0
 1914 0354 5BE0     		b	.L123
 1915              	.L117:
 734:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1916              		.loc 1 734 0
 1917 0356 BB69     		ldr	r3, [r7, #24]
 1918 0358 002B     		cmp	r3, #0
 1919 035a 08DD     		ble	.L118
 734:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1920              		.loc 1 734 0 is_stmt 0 discriminator 1
 1921 035c BA69     		ldr	r2, [r7, #24]
 1922 035e 7B69     		ldr	r3, [r7, #20]
 1923 0360 9A42     		cmp	r2, r3
 1924 0362 04DD     		ble	.L118
 735:..\src/interruptions.c ****                             break;
 1925              		.loc 1 735 0 is_stmt 1
 1926 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1927 0366 674A     		ldr	r2, .L151+8
 1928 0368 0121     		movs	r1, #1
 1929 036a D154     		strb	r1, [r2, r3]
 736:..\src/interruptions.c ****                         }
 1930              		.loc 1 736 0
 1931 036c 4FE0     		b	.L123
 1932              	.L118:
 738:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1933              		.loc 1 738 0
 1934 036e 7B69     		ldr	r3, [r7, #20]
 1935 0370 002B     		cmp	r3, #0
 1936 0372 4BDD     		ble	.L144
 738:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1937              		.loc 1 738 0 is_stmt 0 discriminator 1
 1938 0374 7A69     		ldr	r2, [r7, #20]
 1939 0376 BB69     		ldr	r3, [r7, #24]
 1940 0378 9A42     		cmp	r2, r3
 1941 037a 47DD     		ble	.L144
 739:..\src/interruptions.c ****                             break;
 1942              		.loc 1 739 0 is_stmt 1
 1943 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1944 037e 614A     		ldr	r2, .L151+8
 1945 0380 0221     		movs	r1, #2
 1946 0382 D154     		strb	r1, [r2, r3]
 740:..\src/interruptions.c ****                         }
 1947              		.loc 1 740 0
 1948 0384 43E0     		b	.L123
 1949              	.L115:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 49


 746:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1950              		.loc 1 746 0
 1951 0386 BB69     		ldr	r3, [r7, #24]
 1952 0388 002B     		cmp	r3, #0
 1953 038a 04DA     		bge	.L121
 747:..\src/interruptions.c ****                             break;
 1954              		.loc 1 747 0
 1955 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1956 038e 5D4A     		ldr	r2, .L151+8
 1957 0390 0021     		movs	r1, #0
 1958 0392 D154     		strb	r1, [r2, r3]
 748:..\src/interruptions.c ****                         }
 1959              		.loc 1 748 0
 1960 0394 3BE0     		b	.L123
 1961              	.L121:
 750:..\src/interruptions.c ****                         break;
 1962              		.loc 1 750 0
 1963 0396 7B68     		ldr	r3, [r7, #4]
 1964 0398 1A68     		ldr	r2, [r3]
 1965 039a 584B     		ldr	r3, .L151
 1966 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1967 03a0 1946     		mov	r1, r3
 1968 03a2 BB69     		ldr	r3, [r7, #24]
 1969 03a4 03FB01F3 		mul	r3, r3, r1
 1970 03a8 9900     		lsls	r1, r3, #2
 1971 03aa 554B     		ldr	r3, .L151+4
 1972 03ac B3F8F031 		ldrh	r3, [r3, #496]
 1973 03b0 C3F58063 		rsb	r3, r3, #1024
 1974 03b4 91FBF3F3 		sdiv	r3, r1, r3
 1975 03b8 1A44     		add	r2, r2, r3
 1976 03ba BB68     		ldr	r3, [r7, #8]
 1977 03bc 1A60     		str	r2, [r3]
 751:..\src/interruptions.c **** 
 1978              		.loc 1 751 0
 1979 03be 26E0     		b	.L123
 1980              	.L116:
 755:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1981              		.loc 1 755 0
 1982 03c0 7B69     		ldr	r3, [r7, #20]
 1983 03c2 002B     		cmp	r3, #0
 1984 03c4 04DA     		bge	.L122
 756:..\src/interruptions.c ****                             break;
 1985              		.loc 1 756 0
 1986 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1987 03c8 4E4A     		ldr	r2, .L151+8
 1988 03ca 0021     		movs	r1, #0
 1989 03cc D154     		strb	r1, [r2, r3]
 757:..\src/interruptions.c ****                         }
 1990              		.loc 1 757 0
 1991 03ce 1EE0     		b	.L123
 1992              	.L122:
 759:..\src/interruptions.c ****                         break;
 1993              		.loc 1 759 0
 1994 03d0 7B68     		ldr	r3, [r7, #4]
 1995 03d2 1A68     		ldr	r2, [r3]
 1996 03d4 494B     		ldr	r3, .L151
 1997 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 50


 1998 03da 1946     		mov	r1, r3
 1999 03dc 7B69     		ldr	r3, [r7, #20]
 2000 03de 03FB01F3 		mul	r3, r3, r1
 2001 03e2 9900     		lsls	r1, r3, #2
 2002 03e4 464B     		ldr	r3, .L151+4
 2003 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2004 03ea C3F58063 		rsb	r3, r3, #1024
 2005 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2006 03f2 D21A     		subs	r2, r2, r3
 2007 03f4 BB68     		ldr	r3, [r7, #8]
 2008 03f6 1A60     		str	r2, [r3]
 760:..\src/interruptions.c **** 
 2009              		.loc 1 760 0
 2010 03f8 09E0     		b	.L123
 2011              	.L113:
 764:..\src/interruptions.c ****                 }
 765:..\src/interruptions.c ****             }
 766:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 767:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 768:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2012              		.loc 1 768 0
 2013 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2014 03fc 7B69     		ldr	r3, [r7, #20]
 2015 03fe 0093     		str	r3, [sp]
 2016 0400 BB69     		ldr	r3, [r7, #24]
 2017 0402 7A68     		ldr	r2, [r7, #4]
 2018 0404 B968     		ldr	r1, [r7, #8]
 2019 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 769:..\src/interruptions.c ****             }
 770:..\src/interruptions.c ****             break;
 2020              		.loc 1 770 0
 2021 040a 7EE0     		b	.L100
 2022              	.L144:
 742:..\src/interruptions.c **** 
 2023              		.loc 1 742 0
 2024 040c 00BF     		nop
 2025              	.L123:
 2026              		.loc 1 770 0 discriminator 5
 2027 040e 7CE0     		b	.L100
 2028              	.L92:
 771:..\src/interruptions.c **** 
 772:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 773:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2029              		.loc 1 773 0
 2030 0410 7B68     		ldr	r3, [r7, #4]
 2031 0412 1A68     		ldr	r2, [r3]
 2032 0414 BB68     		ldr	r3, [r7, #8]
 2033 0416 1A60     		str	r2, [r3]
 774:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2034              		.loc 1 774 0
 2035 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2036 041a 3A4A     		ldr	r2, .L151+8
 2037 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2038 041e 012B     		cmp	r3, #1
 2039 0420 1CD0     		beq	.L125
 2040 0422 022B     		cmp	r3, #2
 2041 0424 3DD0     		beq	.L126
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 51


 2042 0426 002B     		cmp	r3, #0
 2043 0428 00D0     		beq	.L127
 775:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 776:..\src/interruptions.c ****                 case 0:
 777:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 778:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 779:..\src/interruptions.c ****                         break;
 780:..\src/interruptions.c ****                     }
 781:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 782:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 783:..\src/interruptions.c ****                         break;
 784:..\src/interruptions.c ****                     }
 785:..\src/interruptions.c ****                     break;
 786:..\src/interruptions.c **** 
 787:..\src/interruptions.c ****                 // EMG 1 is first
 788:..\src/interruptions.c ****                 case 1:
 789:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 790:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 791:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 792:..\src/interruptions.c ****                         break;
 793:..\src/interruptions.c ****                     }
 794:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 795:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 796:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 797:..\src/interruptions.c ****                     
 798:..\src/interruptions.c ****                     break;
 799:..\src/interruptions.c **** 
 800:..\src/interruptions.c ****                 // EMG 2 is first
 801:..\src/interruptions.c ****                 case 2:
 802:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 803:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 804:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 805:..\src/interruptions.c ****                         break;
 806:..\src/interruptions.c ****                     }
 807:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 808:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 809:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 810:..\src/interruptions.c ****                     }
 811:..\src/interruptions.c ****                     break;
 812:..\src/interruptions.c **** 
 813:..\src/interruptions.c ****                 default:
 814:..\src/interruptions.c ****                     break;
 2044              		.loc 1 814 0
 2045 042a 62E0     		b	.L129
 2046              	.L127:
 777:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2047              		.loc 1 777 0
 2048 042c BB69     		ldr	r3, [r7, #24]
 2049 042e 002B     		cmp	r3, #0
 2050 0430 08DD     		ble	.L128
 777:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2051              		.loc 1 777 0 is_stmt 0 discriminator 1
 2052 0432 BA69     		ldr	r2, [r7, #24]
 2053 0434 7B69     		ldr	r3, [r7, #20]
 2054 0436 9A42     		cmp	r2, r3
 2055 0438 04DD     		ble	.L128
 778:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 52


 2056              		.loc 1 778 0 is_stmt 1
 2057 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2058 043c 314A     		ldr	r2, .L151+8
 2059 043e 0121     		movs	r1, #1
 2060 0440 D154     		strb	r1, [r2, r3]
 779:..\src/interruptions.c ****                     }
 2061              		.loc 1 779 0
 2062 0442 56E0     		b	.L129
 2063              	.L128:
 781:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2064              		.loc 1 781 0
 2065 0444 7B69     		ldr	r3, [r7, #20]
 2066 0446 002B     		cmp	r3, #0
 2067 0448 4EDD     		ble	.L145
 781:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2068              		.loc 1 781 0 is_stmt 0 discriminator 1
 2069 044a 7A69     		ldr	r2, [r7, #20]
 2070 044c BB69     		ldr	r3, [r7, #24]
 2071 044e 9A42     		cmp	r2, r3
 2072 0450 4ADD     		ble	.L145
 782:..\src/interruptions.c ****                         break;
 2073              		.loc 1 782 0 is_stmt 1
 2074 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2075 0454 2B4A     		ldr	r2, .L151+8
 2076 0456 0221     		movs	r1, #2
 2077 0458 D154     		strb	r1, [r2, r3]
 783:..\src/interruptions.c ****                     }
 2078              		.loc 1 783 0
 2079 045a 4AE0     		b	.L129
 2080              	.L125:
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2081              		.loc 1 790 0
 2082 045c BB69     		ldr	r3, [r7, #24]
 2083 045e 002B     		cmp	r3, #0
 2084 0460 07DA     		bge	.L131
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2085              		.loc 1 790 0 is_stmt 0 discriminator 1
 2086 0462 7B69     		ldr	r3, [r7, #20]
 2087 0464 002B     		cmp	r3, #0
 2088 0466 04DA     		bge	.L131
 791:..\src/interruptions.c ****                         break;
 2089              		.loc 1 791 0 is_stmt 1
 2090 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2091 046a 264A     		ldr	r2, .L151+8
 2092 046c 0021     		movs	r1, #0
 2093 046e D154     		strb	r1, [r2, r3]
 792:..\src/interruptions.c ****                     }
 2094              		.loc 1 792 0
 2095 0470 3FE0     		b	.L129
 2096              	.L131:
 795:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2097              		.loc 1 795 0
 2098 0472 BB69     		ldr	r3, [r7, #24]
 2099 0474 002B     		cmp	r3, #0
 2100 0476 39DD     		ble	.L146
 796:..\src/interruptions.c ****                     
 2101              		.loc 1 796 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 53


 2102 0478 7B68     		ldr	r3, [r7, #4]
 2103 047a 1A68     		ldr	r2, [r3]
 2104 047c 1F4B     		ldr	r3, .L151
 2105 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2106 0482 1946     		mov	r1, r3
 2107 0484 BB69     		ldr	r3, [r7, #24]
 2108 0486 03FB01F3 		mul	r3, r3, r1
 2109 048a 9900     		lsls	r1, r3, #2
 2110 048c 1C4B     		ldr	r3, .L151+4
 2111 048e B3F8F031 		ldrh	r3, [r3, #496]
 2112 0492 C3F58063 		rsb	r3, r3, #1024
 2113 0496 91FBF3F3 		sdiv	r3, r1, r3
 2114 049a 1A44     		add	r2, r2, r3
 2115 049c BB68     		ldr	r3, [r7, #8]
 2116 049e 1A60     		str	r2, [r3]
 798:..\src/interruptions.c **** 
 2117              		.loc 1 798 0
 2118 04a0 24E0     		b	.L146
 2119              	.L126:
 803:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2120              		.loc 1 803 0
 2121 04a2 BB69     		ldr	r3, [r7, #24]
 2122 04a4 002B     		cmp	r3, #0
 2123 04a6 07DA     		bge	.L133
 803:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2124              		.loc 1 803 0 is_stmt 0 discriminator 1
 2125 04a8 7B69     		ldr	r3, [r7, #20]
 2126 04aa 002B     		cmp	r3, #0
 2127 04ac 04DA     		bge	.L133
 804:..\src/interruptions.c ****                         break;
 2128              		.loc 1 804 0 is_stmt 1
 2129 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2130 04b0 144A     		ldr	r2, .L151+8
 2131 04b2 0021     		movs	r1, #0
 2132 04b4 D154     		strb	r1, [r2, r3]
 805:..\src/interruptions.c ****                     }
 2133              		.loc 1 805 0
 2134 04b6 1CE0     		b	.L129
 2135              	.L133:
 808:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2136              		.loc 1 808 0
 2137 04b8 7B69     		ldr	r3, [r7, #20]
 2138 04ba 002B     		cmp	r3, #0
 2139 04bc 18DD     		ble	.L147
 809:..\src/interruptions.c ****                     }
 2140              		.loc 1 809 0
 2141 04be 7B68     		ldr	r3, [r7, #4]
 2142 04c0 1A68     		ldr	r2, [r3]
 2143 04c2 0F4B     		ldr	r3, .L151+4
 2144 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2145 04c8 1946     		mov	r1, r3
 2146 04ca 7B69     		ldr	r3, [r7, #20]
 2147 04cc 03FB01F3 		mul	r3, r3, r1
 2148 04d0 9900     		lsls	r1, r3, #2
 2149 04d2 0B4B     		ldr	r3, .L151+4
 2150 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2151 04d8 C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 54


 2152 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2153 04e0 D21A     		subs	r2, r2, r3
 2154 04e2 BB68     		ldr	r3, [r7, #8]
 2155 04e4 1A60     		str	r2, [r3]
 811:..\src/interruptions.c **** 
 2156              		.loc 1 811 0
 2157 04e6 03E0     		b	.L147
 2158              	.L145:
 785:..\src/interruptions.c **** 
 2159              		.loc 1 785 0
 2160 04e8 00BF     		nop
 2161 04ea 0EE0     		b	.L100
 2162              	.L146:
 798:..\src/interruptions.c **** 
 2163              		.loc 1 798 0
 2164 04ec 00BF     		nop
 2165 04ee 0CE0     		b	.L100
 2166              	.L147:
 811:..\src/interruptions.c **** 
 2167              		.loc 1 811 0
 2168 04f0 00BF     		nop
 2169              	.L129:
 815:..\src/interruptions.c ****             }
 816:..\src/interruptions.c ****             break;
 2170              		.loc 1 816 0 discriminator 6
 2171 04f2 0AE0     		b	.L100
 2172              	.L141:
 817:..\src/interruptions.c **** 
 818:..\src/interruptions.c ****         default:
 819:..\src/interruptions.c ****             break;
 2173              		.loc 1 819 0
 2174 04f4 00BF     		nop
 2175 04f6 08E0     		b	.L100
 2176              	.L142:
 702:..\src/interruptions.c ****             
 2177              		.loc 1 702 0
 2178 04f8 00BF     		nop
 2179 04fa 06E0     		b	.L100
 2180              	.L152:
 2181              		.align	2
 2182              	.L151:
 2183 04fc 00000000 		.word	g_mem
 2184 0500 00000000 		.word	c_mem
 2185 0504 8C000000 		.word	current_emg.10491
 2186              	.L143:
 726:..\src/interruptions.c **** 
 2187              		.loc 1 726 0
 2188 0508 00BF     		nop
 2189              	.L100:
 820:..\src/interruptions.c ****     }
 821:..\src/interruptions.c **** 
 822:..\src/interruptions.c ****     // Position limit saturation
 823:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2190              		.loc 1 823 0
 2191 050a 3B6A     		ldr	r3, [r7, #32]
 2192 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2193 0510 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 55


 2194 0512 13D0     		beq	.L135
 824:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2195              		.loc 1 824 0
 2196 0514 BB68     		ldr	r3, [r7, #8]
 2197 0516 1A68     		ldr	r2, [r3]
 2198 0518 3B6A     		ldr	r3, [r7, #32]
 2199 051a 5B6B     		ldr	r3, [r3, #52]
 2200 051c 9A42     		cmp	r2, r3
 2201 051e 03DA     		bge	.L136
 825:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2202              		.loc 1 825 0
 2203 0520 3B6A     		ldr	r3, [r7, #32]
 2204 0522 5A6B     		ldr	r2, [r3, #52]
 2205 0524 BB68     		ldr	r3, [r7, #8]
 2206 0526 1A60     		str	r2, [r3]
 2207              	.L136:
 826:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2208              		.loc 1 826 0
 2209 0528 BB68     		ldr	r3, [r7, #8]
 2210 052a 1A68     		ldr	r2, [r3]
 2211 052c 3B6A     		ldr	r3, [r7, #32]
 2212 052e 9B6B     		ldr	r3, [r3, #56]
 2213 0530 9A42     		cmp	r2, r3
 2214 0532 03DD     		ble	.L135
 827:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2215              		.loc 1 827 0
 2216 0534 3B6A     		ldr	r3, [r7, #32]
 2217 0536 9A6B     		ldr	r2, [r3, #56]
 2218 0538 BB68     		ldr	r3, [r7, #8]
 2219 053a 1A60     		str	r2, [r3]
 2220              	.L135:
 828:..\src/interruptions.c ****     }
 829:..\src/interruptions.c ****     
 830:..\src/interruptions.c ****     // SAFETY
 831:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2221              		.loc 1 831 0
 2222 053c 1D4B     		ldr	r3, .L153
 2223 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2224 0540 012B     		cmp	r3, #1
 2225 0542 02D1     		bne	.L137
 832:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 833:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2226              		.loc 1 833 0
 2227 0544 BB68     		ldr	r3, [r7, #8]
 2228 0546 0022     		movs	r2, #0
 2229 0548 1A60     		str	r2, [r3]
 2230              	.L137:
 834:..\src/interruptions.c ****     }      
 835:..\src/interruptions.c ****     
 836:..\src/interruptions.c ****        
 837:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2231              		.loc 1 837 0
 2232 054a 1B4B     		ldr	r3, .L153+4
 2233 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2234 0550 012B     		cmp	r3, #1
 2235 0552 2AD1     		bne	.L148
 838:..\src/interruptions.c ****         if (rest_enabled == 1){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 56


 2236              		.loc 1 838 0
 2237 0554 194B     		ldr	r3, .L153+8
 2238 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2239 0558 012B     		cmp	r3, #1
 2240 055a 03D1     		bne	.L139
 839:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 840:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2241              		.loc 1 840 0
 2242 055c 184B     		ldr	r3, .L153+12
 2243 055e 1A68     		ldr	r2, [r3]
 2244 0560 BB68     		ldr	r3, [r7, #8]
 2245 0562 1A60     		str	r2, [r3]
 2246              	.L139:
 841:..\src/interruptions.c ****         }
 842:..\src/interruptions.c ****         
 843:..\src/interruptions.c ****         if (forced_open == 1) {
 2247              		.loc 1 843 0
 2248 0564 174B     		ldr	r3, .L153+16
 2249 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2250 0568 012B     		cmp	r3, #1
 2251 056a 1ED1     		bne	.L148
 844:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 845:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2252              		.loc 1 845 0
 2253 056c 7B69     		ldr	r3, [r7, #20]
 2254 056e 002B     		cmp	r3, #0
 2255 0570 13DD     		ble	.L140
 846:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2256              		.loc 1 846 0
 2257 0572 154B     		ldr	r3, .L153+20
 2258 0574 D3F8A022 		ldr	r2, [r3, #672]
 2259 0578 134B     		ldr	r3, .L153+20
 2260 057a D3F8A032 		ldr	r3, [r3, #672]
 2261 057e 7969     		ldr	r1, [r7, #20]
 2262 0580 01FB03F1 		mul	r1, r1, r3
 2263 0584 0C4B     		ldr	r3, .L153+4
 2264 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2265 058a C3F58063 		rsb	r3, r3, #1024
 2266 058e 91FBF3F3 		sdiv	r3, r1, r3
 2267 0592 D21A     		subs	r2, r2, r3
 2268 0594 BB68     		ldr	r3, [r7, #8]
 2269 0596 1A60     		str	r2, [r3]
 847:..\src/interruptions.c ****             else {
 848:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 849:..\src/interruptions.c ****                 forced_open = 0;
 850:..\src/interruptions.c ****             }
 851:..\src/interruptions.c ****         }
 852:..\src/interruptions.c ****     }
 853:..\src/interruptions.c **** }
 2270              		.loc 1 853 0
 2271 0598 07E0     		b	.L148
 2272              	.L140:
 848:..\src/interruptions.c ****                 forced_open = 0;
 2273              		.loc 1 848 0
 2274 059a 0B4B     		ldr	r3, .L153+20
 2275 059c D3F8A022 		ldr	r2, [r3, #672]
 2276 05a0 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 57


 2277 05a2 1A60     		str	r2, [r3]
 849:..\src/interruptions.c ****             }
 2278              		.loc 1 849 0
 2279 05a4 074B     		ldr	r3, .L153+16
 2280 05a6 0022     		movs	r2, #0
 2281 05a8 1A70     		strb	r2, [r3]
 2282              	.L148:
 2283              		.loc 1 853 0
 2284 05aa 00BF     		nop
 2285 05ac 2837     		adds	r7, r7, #40
 2286              		.cfi_def_cfa_offset 8
 2287 05ae BD46     		mov	sp, r7
 2288              		.cfi_def_cfa_register 13
 2289              		@ sp needed
 2290 05b0 80BD     		pop	{r7, pc}
 2291              	.L154:
 2292 05b2 00BF     		.align	2
 2293              	.L153:
 2294 05b4 00000000 		.word	battery_low_SoC
 2295 05b8 00000000 		.word	c_mem
 2296 05bc 00000000 		.word	rest_enabled
 2297 05c0 00000000 		.word	rest_pos_curr_ref
 2298 05c4 00000000 		.word	forced_open
 2299 05c8 00000000 		.word	g_mem
 2300              		.cfi_endproc
 2301              	.LFE68:
 2302              		.size	compute_reference, .-compute_reference
 2303              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2304              		.align	2
 2305              		.global	compute_SoftHand_2_motors_joystick_reference
 2306              		.thumb
 2307              		.thumb_func
 2308              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2309              	compute_SoftHand_2_motors_joystick_reference:
 2310              	.LFB69:
 854:..\src/interruptions.c **** 
 855:..\src/interruptions.c **** 
 856:..\src/interruptions.c **** //==============================================================================
 857:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 858:..\src/interruptions.c **** //==============================================================================
 859:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2311              		.loc 1 859 0
 2312              		.cfi_startproc
 2313              		@ args = 0, pretend = 0, frame = 32
 2314              		@ frame_needed = 1, uses_anonymous_args = 0
 2315              		@ link register save eliminated.
 2316 0000 80B4     		push	{r7}
 2317              		.cfi_def_cfa_offset 4
 2318              		.cfi_offset 7, -4
 2319 0002 89B0     		sub	sp, sp, #36
 2320              		.cfi_def_cfa_offset 40
 2321 0004 00AF     		add	r7, sp, #0
 2322              		.cfi_def_cfa_register 7
 2323 0006 0346     		mov	r3, r0
 2324 0008 B960     		str	r1, [r7, #8]
 2325 000a 7A60     		str	r2, [r7, #4]
 2326 000c FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 58


 860:..\src/interruptions.c ****     
 861:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2327              		.loc 1 861 0
 2328 000e B04B     		ldr	r3, .L176
 2329 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2330 0014 062B     		cmp	r3, #6
 2331 0016 40F08581 		bne	.L174
 2332              		.loc 1 861 0 is_stmt 0 discriminator 1
 2333 001a AD4B     		ldr	r3, .L176
 2334 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2335 0020 062B     		cmp	r3, #6
 2336 0022 40F07F81 		bne	.L174
 862:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2337              		.loc 1 862 0 is_stmt 1
 2338 0026 7B68     		ldr	r3, [r7, #4]
 2339 0028 1A68     		ldr	r2, [r3]
 2340 002a BB68     		ldr	r3, [r7, #8]
 2341 002c 1A60     		str	r2, [r3]
 863:..\src/interruptions.c ****     
 864:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2342              		.loc 1 864 0
 2343 002e A94B     		ldr	r3, .L176+4
 2344 0030 1B6A     		ldr	r3, [r3, #32]
 2345 0032 B3F52F7F 		cmp	r3, #700
 2346 0036 00F3C280 		bgt	.L157
 2347              	.LBB6:
 865:..\src/interruptions.c ****              
 866:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2348              		.loc 1 866 0
 2349 003a 0023     		movs	r3, #0
 2350 003c FB61     		str	r3, [r7, #28]
 867:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2351              		.loc 1 867 0
 2352 003e 0023     		movs	r3, #0
 2353 0040 BB61     		str	r3, [r7, #24]
 868:..\src/interruptions.c ****         
 869:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2354              		.loc 1 869 0
 2355 0042 A44B     		ldr	r3, .L176+4
 2356 0044 1B6A     		ldr	r3, [r3, #32]
 2357 0046 A24A     		ldr	r2, .L176
 2358 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2359 004c 9342     		cmp	r3, r2
 2360 004e 1ADD     		ble	.L158
 870:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2361              		.loc 1 870 0
 2362 0050 A04B     		ldr	r3, .L176+4
 2363 0052 1B6A     		ldr	r3, [r3, #32]
 2364 0054 9E4A     		ldr	r2, .L176
 2365 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2366 005a 9B1A     		subs	r3, r3, r2
 2367 005c FB61     		str	r3, [r7, #28]
 871:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2368              		.loc 1 871 0
 2369 005e BB68     		ldr	r3, [r7, #8]
 2370 0060 1A68     		ldr	r2, [r3]
 2371 0062 9B4B     		ldr	r3, .L176
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 59


 2372 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2373 0068 1946     		mov	r1, r3
 2374 006a FB69     		ldr	r3, [r7, #28]
 2375 006c 03FB01F1 		mul	r1, r3, r1
 2376 0070 974B     		ldr	r3, .L176
 2377 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2378 0076 C3F58063 		rsb	r3, r3, #1024
 2379 007a 91FBF3F3 		sdiv	r3, r1, r3
 2380 007e 1A44     		add	r2, r2, r3
 2381 0080 BB68     		ldr	r3, [r7, #8]
 2382 0082 1A60     		str	r2, [r3]
 2383 0084 21E0     		b	.L159
 2384              	.L158:
 872:..\src/interruptions.c ****             }
 873:..\src/interruptions.c ****             else {
 874:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2385              		.loc 1 874 0
 2386 0086 934B     		ldr	r3, .L176+4
 2387 0088 1A6A     		ldr	r2, [r3, #32]
 2388 008a 914B     		ldr	r3, .L176
 2389 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2390 0090 5B42     		negs	r3, r3
 2391 0092 9A42     		cmp	r2, r3
 2392 0094 19DA     		bge	.L159
 875:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2393              		.loc 1 875 0
 2394 0096 8F4B     		ldr	r3, .L176+4
 2395 0098 1B6A     		ldr	r3, [r3, #32]
 2396 009a 8D4A     		ldr	r2, .L176
 2397 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2398 00a0 1344     		add	r3, r3, r2
 2399 00a2 FB61     		str	r3, [r7, #28]
 876:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2400              		.loc 1 876 0
 2401 00a4 BB68     		ldr	r3, [r7, #8]
 2402 00a6 1A68     		ldr	r2, [r3]
 2403 00a8 894B     		ldr	r3, .L176
 2404 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2405 00ae 1946     		mov	r1, r3
 2406 00b0 FB69     		ldr	r3, [r7, #28]
 2407 00b2 03FB01F1 		mul	r1, r3, r1
 2408 00b6 864B     		ldr	r3, .L176
 2409 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2410 00bc C3F58063 		rsb	r3, r3, #1024
 2411 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2412 00c4 1A44     		add	r2, r2, r3
 2413 00c6 BB68     		ldr	r3, [r7, #8]
 2414 00c8 1A60     		str	r2, [r3]
 2415              	.L159:
 877:..\src/interruptions.c ****                 }
 878:..\src/interruptions.c ****             }
 879:..\src/interruptions.c **** 
 880:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2416              		.loc 1 880 0
 2417 00ca 824B     		ldr	r3, .L176+4
 2418 00cc 5B6A     		ldr	r3, [r3, #36]
 2419 00ce 804A     		ldr	r2, .L176
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 60


 2420 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2421 00d4 9342     		cmp	r3, r2
 2422 00d6 34DD     		ble	.L160
 881:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2423              		.loc 1 881 0
 2424 00d8 7E4B     		ldr	r3, .L176+4
 2425 00da 5B6A     		ldr	r3, [r3, #36]
 2426 00dc 7C4A     		ldr	r2, .L176
 2427 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2428 00e2 9B1A     		subs	r3, r3, r2
 2429 00e4 BB61     		str	r3, [r7, #24]
 882:..\src/interruptions.c ****                 if (motor_idx == 0){
 2430              		.loc 1 882 0
 2431 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2432 00e8 002B     		cmp	r3, #0
 2433 00ea 12D1     		bne	.L161
 883:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2434              		.loc 1 883 0
 2435 00ec BB68     		ldr	r3, [r7, #8]
 2436 00ee 1A68     		ldr	r2, [r3]
 2437 00f0 774B     		ldr	r3, .L176
 2438 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2439 00f6 1946     		mov	r1, r3
 2440 00f8 BB69     		ldr	r3, [r7, #24]
 2441 00fa 03FB01F1 		mul	r1, r3, r1
 2442 00fe 744B     		ldr	r3, .L176
 2443 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2444 0104 C3F58063 		rsb	r3, r3, #1024
 2445 0108 91FBF3F3 		sdiv	r3, r1, r3
 2446 010c 1A44     		add	r2, r2, r3
 2447 010e BB68     		ldr	r3, [r7, #8]
 2448 0110 1A60     		str	r2, [r3]
 2449              	.L161:
 884:..\src/interruptions.c ****                 }
 885:..\src/interruptions.c ****                 if (motor_idx == 1){
 2450              		.loc 1 885 0
 2451 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2452 0114 012B     		cmp	r3, #1
 2453 0116 40F00581 		bne	.L174
 886:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2454              		.loc 1 886 0
 2455 011a BB68     		ldr	r3, [r7, #8]
 2456 011c 1A68     		ldr	r2, [r3]
 2457 011e 6C4B     		ldr	r3, .L176
 2458 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2459 0124 1946     		mov	r1, r3
 2460 0126 BB69     		ldr	r3, [r7, #24]
 2461 0128 03FB01F1 		mul	r1, r3, r1
 2462 012c 684B     		ldr	r3, .L176
 2463 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2464 0132 C3F58063 		rsb	r3, r3, #1024
 2465 0136 91FBF3F3 		sdiv	r3, r1, r3
 2466 013a D21A     		subs	r2, r2, r3
 2467 013c BB68     		ldr	r3, [r7, #8]
 2468 013e 1A60     		str	r2, [r3]
 2469              	.LBE6:
 887:..\src/interruptions.c ****                 }          
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 61


 888:..\src/interruptions.c ****             }
 889:..\src/interruptions.c ****             else {
 890:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 891:..\src/interruptions.c ****                     
 892:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 893:..\src/interruptions.c ****                     if (motor_idx == 0){
 894:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 895:..\src/interruptions.c ****                     }
 896:..\src/interruptions.c ****                     if (motor_idx == 1){
 897:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 898:..\src/interruptions.c ****                     }
 899:..\src/interruptions.c ****                 }
 900:..\src/interruptions.c ****             }
 901:..\src/interruptions.c ****         }
 902:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 903:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 904:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 905:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 906:..\src/interruptions.c **** 
 907:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 908:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 909:..\src/interruptions.c ****                     if (motor_idx == 1){
 910:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 911:..\src/interruptions.c ****                     }
 912:..\src/interruptions.c ****                     if (motor_idx == 0){
 913:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 914:..\src/interruptions.c ****                     }                    
 915:..\src/interruptions.c ****                 }
 916:..\src/interruptions.c ****                 else {
 917:..\src/interruptions.c ****                     if (motor_idx == 0){
 918:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 919:..\src/interruptions.c ****                     }
 920:..\src/interruptions.c ****                     if (motor_idx == 1){
 921:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 922:..\src/interruptions.c ****                     }
 923:..\src/interruptions.c ****                 }
 924:..\src/interruptions.c ****                 
 925:..\src/interruptions.c ****             }
 926:..\src/interruptions.c ****             else {
 927:..\src/interruptions.c ****                 if(pos_sum > 0) {
 928:..\src/interruptions.c ****                     if (motor_idx == 0){
 929:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 930:..\src/interruptions.c ****                     }
 931:..\src/interruptions.c ****                     if (motor_idx == 1){
 932:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 933:..\src/interruptions.c ****                     }
 934:..\src/interruptions.c ****                     
 935:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 936:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 937:..\src/interruptions.c ****                     }
 938:..\src/interruptions.c ****                 }
 939:..\src/interruptions.c ****             }
 940:..\src/interruptions.c ****         }
 941:..\src/interruptions.c ****     }           
 942:..\src/interruptions.c **** }
 2470              		.loc 1 942 0
 2471 0140 F0E0     		b	.L174
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 62


 2472              	.L160:
 2473              	.LBB7:
 890:..\src/interruptions.c ****                     
 2474              		.loc 1 890 0
 2475 0142 644B     		ldr	r3, .L176+4
 2476 0144 5A6A     		ldr	r2, [r3, #36]
 2477 0146 624B     		ldr	r3, .L176
 2478 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2479 014c 5B42     		negs	r3, r3
 2480 014e 9A42     		cmp	r2, r3
 2481 0150 80F2E880 		bge	.L174
 892:..\src/interruptions.c ****                     if (motor_idx == 0){
 2482              		.loc 1 892 0
 2483 0154 5F4B     		ldr	r3, .L176+4
 2484 0156 5B6A     		ldr	r3, [r3, #36]
 2485 0158 5D4A     		ldr	r2, .L176
 2486 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2487 015e 1344     		add	r3, r3, r2
 2488 0160 BB61     		str	r3, [r7, #24]
 893:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2489              		.loc 1 893 0
 2490 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2491 0164 002B     		cmp	r3, #0
 2492 0166 12D1     		bne	.L164
 894:..\src/interruptions.c ****                     }
 2493              		.loc 1 894 0
 2494 0168 BB68     		ldr	r3, [r7, #8]
 2495 016a 1A68     		ldr	r2, [r3]
 2496 016c 584B     		ldr	r3, .L176
 2497 016e B3F8B032 		ldrh	r3, [r3, #688]
 2498 0172 1946     		mov	r1, r3
 2499 0174 BB69     		ldr	r3, [r7, #24]
 2500 0176 03FB01F1 		mul	r1, r3, r1
 2501 017a 554B     		ldr	r3, .L176
 2502 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2503 0180 C3F58063 		rsb	r3, r3, #1024
 2504 0184 91FBF3F3 		sdiv	r3, r1, r3
 2505 0188 1A44     		add	r2, r2, r3
 2506 018a BB68     		ldr	r3, [r7, #8]
 2507 018c 1A60     		str	r2, [r3]
 2508              	.L164:
 896:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2509              		.loc 1 896 0
 2510 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2511 0190 012B     		cmp	r3, #1
 2512 0192 40F0C780 		bne	.L174
 897:..\src/interruptions.c ****                     }
 2513              		.loc 1 897 0
 2514 0196 BB68     		ldr	r3, [r7, #8]
 2515 0198 1A68     		ldr	r2, [r3]
 2516 019a 4D4B     		ldr	r3, .L176
 2517 019c B3F8B032 		ldrh	r3, [r3, #688]
 2518 01a0 1946     		mov	r1, r3
 2519 01a2 BB69     		ldr	r3, [r7, #24]
 2520 01a4 03FB01F1 		mul	r1, r3, r1
 2521 01a8 494B     		ldr	r3, .L176
 2522 01aa B3F9B232 		ldrsh	r3, [r3, #690]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 63


 2523 01ae C3F58063 		rsb	r3, r3, #1024
 2524 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2525 01b6 D21A     		subs	r2, r2, r3
 2526 01b8 BB68     		ldr	r3, [r7, #8]
 2527 01ba 1A60     		str	r2, [r3]
 2528              	.LBE7:
 2529              		.loc 1 942 0
 2530 01bc B2E0     		b	.L174
 2531              	.L157:
 2532              	.LBB8:
 904:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2533              		.loc 1 904 0
 2534 01be 444B     		ldr	r3, .L176
 2535 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2536 01c4 1946     		mov	r1, r3
 2537 01c6 444A     		ldr	r2, .L176+8
 2538 01c8 3423     		movs	r3, #52
 2539 01ca 03FB01F3 		mul	r3, r3, r1
 2540 01ce 1344     		add	r3, r3, r2
 2541 01d0 1A68     		ldr	r2, [r3]
 2542 01d2 3F4B     		ldr	r3, .L176
 2543 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2544 01d8 1846     		mov	r0, r3
 2545 01da 3F49     		ldr	r1, .L176+8
 2546 01dc 3423     		movs	r3, #52
 2547 01de 03FB00F3 		mul	r3, r3, r0
 2548 01e2 0B44     		add	r3, r3, r1
 2549 01e4 0433     		adds	r3, r3, #4
 2550 01e6 1B68     		ldr	r3, [r3]
 2551 01e8 D21A     		subs	r2, r2, r3
 2552 01ea 394B     		ldr	r3, .L176
 2553 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2554 01f0 1846     		mov	r0, r3
 2555 01f2 3749     		ldr	r1, .L176
 2556 01f4 0346     		mov	r3, r0
 2557 01f6 5B00     		lsls	r3, r3, #1
 2558 01f8 0344     		add	r3, r3, r0
 2559 01fa 1B01     		lsls	r3, r3, #4
 2560 01fc 0B44     		add	r3, r3, r1
 2561 01fe 03F29513 		addw	r3, r3, #405
 2562 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2563 0204 42FA03F3 		asr	r3, r2, r3
 2564 0208 7B61     		str	r3, [r7, #20]
 905:..\src/interruptions.c **** 
 2565              		.loc 1 905 0
 2566 020a 314B     		ldr	r3, .L176
 2567 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2568 0210 1946     		mov	r1, r3
 2569 0212 314A     		ldr	r2, .L176+8
 2570 0214 3423     		movs	r3, #52
 2571 0216 03FB01F3 		mul	r3, r3, r1
 2572 021a 1344     		add	r3, r3, r2
 2573 021c 1A68     		ldr	r2, [r3]
 2574 021e 2C4B     		ldr	r3, .L176
 2575 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2576 0224 1846     		mov	r0, r3
 2577 0226 2C49     		ldr	r1, .L176+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 64


 2578 0228 3423     		movs	r3, #52
 2579 022a 03FB00F3 		mul	r3, r3, r0
 2580 022e 0B44     		add	r3, r3, r1
 2581 0230 0433     		adds	r3, r3, #4
 2582 0232 1B68     		ldr	r3, [r3]
 2583 0234 1A44     		add	r2, r2, r3
 2584 0236 264B     		ldr	r3, .L176
 2585 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2586 023c 1846     		mov	r0, r3
 2587 023e 2449     		ldr	r1, .L176
 2588 0240 0346     		mov	r3, r0
 2589 0242 5B00     		lsls	r3, r3, #1
 2590 0244 0344     		add	r3, r3, r0
 2591 0246 1B01     		lsls	r3, r3, #4
 2592 0248 0B44     		add	r3, r3, r1
 2593 024a 03F29513 		addw	r3, r3, #405
 2594 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2595 0250 42FA03F3 		asr	r3, r2, r3
 2596 0254 3B61     		str	r3, [r7, #16]
 907:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2597              		.loc 1 907 0
 2598 0256 7B69     		ldr	r3, [r7, #20]
 2599 0258 B3F5FA7F 		cmp	r3, #500
 2600 025c 03DC     		bgt	.L165
 907:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2601              		.loc 1 907 0 is_stmt 0 discriminator 1
 2602 025e 7B69     		ldr	r3, [r7, #20]
 2603 0260 13F5FA7F 		cmn	r3, #500
 2604 0264 3ADA     		bge	.L166
 2605              	.L165:
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2606              		.loc 1 908 0 is_stmt 1
 2607 0266 7B69     		ldr	r3, [r7, #20]
 2608 0268 002B     		cmp	r3, #0
 2609 026a 18DB     		blt	.L167
 909:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2610              		.loc 1 909 0
 2611 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2612 026e 012B     		cmp	r3, #1
 2613 0270 07D1     		bne	.L168
 910:..\src/interruptions.c ****                     }
 2614              		.loc 1 910 0
 2615 0272 BB68     		ldr	r3, [r7, #8]
 2616 0274 1B68     		ldr	r3, [r3]
 2617 0276 164A     		ldr	r2, .L176
 2618 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2619 027c 1A44     		add	r2, r2, r3
 2620 027e BB68     		ldr	r3, [r7, #8]
 2621 0280 1A60     		str	r2, [r3]
 2622              	.L168:
 912:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2623              		.loc 1 912 0
 2624 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2625 0284 002B     		cmp	r3, #0
 2626 0286 4CD1     		bne	.L175
 913:..\src/interruptions.c ****                     }                    
 2627              		.loc 1 913 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 65


 2628 0288 BB68     		ldr	r3, [r7, #8]
 2629 028a 1B68     		ldr	r3, [r3]
 2630 028c 104A     		ldr	r2, .L176
 2631 028e B2F8B022 		ldrh	r2, [r2, #688]
 2632 0292 5208     		lsrs	r2, r2, #1
 2633 0294 92B2     		uxth	r2, r2
 2634 0296 9A1A     		subs	r2, r3, r2
 2635 0298 BB68     		ldr	r3, [r7, #8]
 2636 029a 1A60     		str	r2, [r3]
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2637              		.loc 1 908 0
 2638 029c 41E0     		b	.L175
 2639              	.L167:
 917:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2640              		.loc 1 917 0
 2641 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2642 02a0 002B     		cmp	r3, #0
 2643 02a2 07D1     		bne	.L171
 918:..\src/interruptions.c ****                     }
 2644              		.loc 1 918 0
 2645 02a4 BB68     		ldr	r3, [r7, #8]
 2646 02a6 1B68     		ldr	r3, [r3]
 2647 02a8 094A     		ldr	r2, .L176
 2648 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2649 02ae 1A44     		add	r2, r2, r3
 2650 02b0 BB68     		ldr	r3, [r7, #8]
 2651 02b2 1A60     		str	r2, [r3]
 2652              	.L171:
 920:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2653              		.loc 1 920 0
 2654 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2655 02b6 012B     		cmp	r3, #1
 2656 02b8 33D1     		bne	.L175
 921:..\src/interruptions.c ****                     }
 2657              		.loc 1 921 0
 2658 02ba BB68     		ldr	r3, [r7, #8]
 2659 02bc 1B68     		ldr	r3, [r3]
 2660 02be 044A     		ldr	r2, .L176
 2661 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2662 02c4 5208     		lsrs	r2, r2, #1
 2663 02c6 92B2     		uxth	r2, r2
 2664 02c8 9A1A     		subs	r2, r3, r2
 2665 02ca BB68     		ldr	r3, [r7, #8]
 2666 02cc 1A60     		str	r2, [r3]
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2667              		.loc 1 908 0
 2668 02ce 28E0     		b	.L175
 2669              	.L177:
 2670              		.align	2
 2671              	.L176:
 2672 02d0 00000000 		.word	c_mem
 2673 02d4 00000000 		.word	g_adc_meas
 2674 02d8 00000000 		.word	g_meas
 2675              	.L166:
 927:..\src/interruptions.c ****                     if (motor_idx == 0){
 2676              		.loc 1 927 0
 2677 02dc 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 66


 2678 02de 002B     		cmp	r3, #0
 2679 02e0 20DD     		ble	.L174
 928:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2680              		.loc 1 928 0
 2681 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2682 02e4 002B     		cmp	r3, #0
 2683 02e6 08D1     		bne	.L172
 929:..\src/interruptions.c ****                     }
 2684              		.loc 1 929 0
 2685 02e8 BB68     		ldr	r3, [r7, #8]
 2686 02ea 1A68     		ldr	r2, [r3]
 2687 02ec 104B     		ldr	r3, .L178
 2688 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2689 02f2 5B00     		lsls	r3, r3, #1
 2690 02f4 D21A     		subs	r2, r2, r3
 2691 02f6 BB68     		ldr	r3, [r7, #8]
 2692 02f8 1A60     		str	r2, [r3]
 2693              	.L172:
 931:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2694              		.loc 1 931 0
 2695 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2696 02fc 012B     		cmp	r3, #1
 2697 02fe 08D1     		bne	.L173
 932:..\src/interruptions.c ****                     }
 2698              		.loc 1 932 0
 2699 0300 BB68     		ldr	r3, [r7, #8]
 2700 0302 1A68     		ldr	r2, [r3]
 2701 0304 0A4B     		ldr	r3, .L178
 2702 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2703 030a 5B00     		lsls	r3, r3, #1
 2704 030c D21A     		subs	r2, r2, r3
 2705 030e BB68     		ldr	r3, [r7, #8]
 2706 0310 1A60     		str	r2, [r3]
 2707              	.L173:
 935:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2708              		.loc 1 935 0
 2709 0312 BB68     		ldr	r3, [r7, #8]
 2710 0314 1B68     		ldr	r3, [r3]
 2711 0316 002B     		cmp	r3, #0
 2712 0318 04DA     		bge	.L174
 936:..\src/interruptions.c ****                     }
 2713              		.loc 1 936 0
 2714 031a BB68     		ldr	r3, [r7, #8]
 2715 031c 0022     		movs	r2, #0
 2716 031e 1A60     		str	r2, [r3]
 2717              	.LBE8:
 2718              		.loc 1 942 0
 2719 0320 00E0     		b	.L174
 2720              	.L175:
 2721              	.LBB9:
 908:..\src/interruptions.c ****                     if (motor_idx == 1){
 2722              		.loc 1 908 0
 2723 0322 00BF     		nop
 2724              	.L174:
 2725              	.LBE9:
 2726              		.loc 1 942 0
 2727 0324 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 67


 2728 0326 2437     		adds	r7, r7, #36
 2729              		.cfi_def_cfa_offset 4
 2730 0328 BD46     		mov	sp, r7
 2731              		.cfi_def_cfa_register 13
 2732              		@ sp needed
 2733 032a 80BC     		pop	{r7}
 2734              		.cfi_restore 7
 2735              		.cfi_def_cfa_offset 0
 2736 032c 7047     		bx	lr
 2737              	.L179:
 2738 032e 00BF     		.align	2
 2739              	.L178:
 2740 0330 00000000 		.word	c_mem
 2741              		.cfi_endproc
 2742              	.LFE69:
 2743              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2744              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2745              		.align	2
 2746              		.global	compute_SoftHand_2_motors_emg_reference
 2747              		.thumb
 2748              		.thumb_func
 2749              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2750              	compute_SoftHand_2_motors_emg_reference:
 2751              	.LFB70:
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c **** 
 945:..\src/interruptions.c **** //==============================================================================
 946:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 947:..\src/interruptions.c **** //==============================================================================
 948:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 949:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2752              		.loc 1 949 0
 2753              		.cfi_startproc
 2754              		@ args = 4, pretend = 0, frame = 16
 2755              		@ frame_needed = 1, uses_anonymous_args = 0
 2756 0000 80B5     		push	{r7, lr}
 2757              		.cfi_def_cfa_offset 8
 2758              		.cfi_offset 7, -8
 2759              		.cfi_offset 14, -4
 2760 0002 84B0     		sub	sp, sp, #16
 2761              		.cfi_def_cfa_offset 24
 2762 0004 00AF     		add	r7, sp, #0
 2763              		.cfi_def_cfa_register 7
 2764 0006 B960     		str	r1, [r7, #8]
 2765 0008 7A60     		str	r2, [r7, #4]
 2766 000a 3B60     		str	r3, [r7]
 2767 000c 0346     		mov	r3, r0
 2768 000e FB73     		strb	r3, [r7, #15]
 950:..\src/interruptions.c ****     
 951:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 952:..\src/interruptions.c ****     static uint8 fsm_state;     
 953:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2769              		.loc 1 953 0
 2770 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2771 0012 002B     		cmp	r3, #0
 2772 0014 05D1     		bne	.L181
 954:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 68


 2773              		.loc 1 954 0
 2774 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2775 001a 0346     		mov	r3, r0
 2776 001c 1A46     		mov	r2, r3
 2777 001e 614B     		ldr	r3, .L196
 2778 0020 1A70     		strb	r2, [r3]
 2779              	.L181:
 955:..\src/interruptions.c ****     }
 956:..\src/interruptions.c ****        
 957:..\src/interruptions.c ****     switch (fsm_state){
 2780              		.loc 1 957 0
 2781 0022 604B     		ldr	r3, .L196
 2782 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2783 0026 032B     		cmp	r3, #3
 2784 0028 00F2B780 		bhi	.L193
 2785 002c 01A2     		adr	r2, .L184
 2786 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2787 0032 00BF     		.p2align 2
 2788              	.L184:
 2789 0034 45000000 		.word	.L183+1
 2790 0038 45000000 		.word	.L183+1
 2791 003c BF000000 		.word	.L185+1
 2792 0040 4F000000 		.word	.L186+1
 2793              		.p2align 1
 2794              	.L183:
 958:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 959:..\src/interruptions.c ****              
 960:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2795              		.loc 1 960 0
 2796 0044 7B68     		ldr	r3, [r7, #4]
 2797 0046 1A68     		ldr	r2, [r3]
 2798 0048 BB68     		ldr	r3, [r7, #8]
 2799 004a 1A60     		str	r2, [r3]
 961:..\src/interruptions.c ****     
 962:..\src/interruptions.c ****             break;
 2800              		.loc 1 962 0
 2801 004c A5E0     		b	.L182
 2802              	.L186:
 963:..\src/interruptions.c ****         
 964:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 965:..\src/interruptions.c **** 
 966:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2803              		.loc 1 966 0
 2804 004e 3B68     		ldr	r3, [r7]
 2805 0050 002B     		cmp	r3, #0
 2806 0052 17DD     		ble	.L187
 2807              		.loc 1 966 0 is_stmt 0 discriminator 1
 2808 0054 3A68     		ldr	r2, [r7]
 2809 0056 BB69     		ldr	r3, [r7, #24]
 2810 0058 9A42     		cmp	r2, r3
 2811 005a 13DD     		ble	.L187
 967:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2812              		.loc 1 967 0 is_stmt 1
 2813 005c 7B68     		ldr	r3, [r7, #4]
 2814 005e 1A68     		ldr	r2, [r3]
 2815 0060 514B     		ldr	r3, .L196+4
 2816 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 69


 2817 0066 1946     		mov	r1, r3
 2818 0068 3B68     		ldr	r3, [r7]
 2819 006a 03FB01F3 		mul	r3, r3, r1
 2820 006e 9900     		lsls	r1, r3, #2
 2821 0070 4E4B     		ldr	r3, .L196+8
 2822 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2823 0076 C3F58063 		rsb	r3, r3, #1024
 2824 007a 91FBF3F3 		sdiv	r3, r1, r3
 2825 007e 1A44     		add	r2, r2, r3
 2826 0080 BB68     		ldr	r3, [r7, #8]
 2827 0082 1A60     		str	r2, [r3]
 2828              	.L187:
 968:..\src/interruptions.c ****             }
 969:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2829              		.loc 1 969 0
 2830 0084 BB69     		ldr	r3, [r7, #24]
 2831 0086 002B     		cmp	r3, #0
 2832 0088 40F38480 		ble	.L194
 2833              		.loc 1 969 0 is_stmt 0 discriminator 1
 2834 008c BA69     		ldr	r2, [r7, #24]
 2835 008e 3B68     		ldr	r3, [r7]
 2836 0090 9A42     		cmp	r2, r3
 2837 0092 7FDD     		ble	.L194
 970:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2838              		.loc 1 970 0 is_stmt 1
 2839 0094 7B68     		ldr	r3, [r7, #4]
 2840 0096 1A68     		ldr	r2, [r3]
 2841 0098 434B     		ldr	r3, .L196+4
 2842 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2843 009e 1946     		mov	r1, r3
 2844 00a0 BB69     		ldr	r3, [r7, #24]
 2845 00a2 03FB01F3 		mul	r3, r3, r1
 2846 00a6 9900     		lsls	r1, r3, #2
 2847 00a8 404B     		ldr	r3, .L196+8
 2848 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2849 00ae C3F58063 		rsb	r3, r3, #1024
 2850 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2851 00b6 D21A     		subs	r2, r2, r3
 2852 00b8 BB68     		ldr	r3, [r7, #8]
 2853 00ba 1A60     		str	r2, [r3]
 971:..\src/interruptions.c ****             }
 972:..\src/interruptions.c ****             
 973:..\src/interruptions.c ****             break;
 2854              		.loc 1 973 0
 2855 00bc 6AE0     		b	.L194
 2856              	.L185:
 974:..\src/interruptions.c ****             
 975:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 976:..\src/interruptions.c ****             
 977:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2857              		.loc 1 977 0
 2858 00be 3B68     		ldr	r3, [r7]
 2859 00c0 002B     		cmp	r3, #0
 2860 00c2 31DD     		ble	.L189
 2861              		.loc 1 977 0 is_stmt 0 discriminator 1
 2862 00c4 3A68     		ldr	r2, [r7]
 2863 00c6 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 70


 2864 00c8 9A42     		cmp	r2, r3
 2865 00ca 2DDD     		ble	.L189
 978:..\src/interruptions.c ****                 if (motor_idx == 0){
 2866              		.loc 1 978 0 is_stmt 1
 2867 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2868 00ce 002B     		cmp	r3, #0
 2869 00d0 13D1     		bne	.L190
 979:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2870              		.loc 1 979 0
 2871 00d2 7B68     		ldr	r3, [r7, #4]
 2872 00d4 1A68     		ldr	r2, [r3]
 2873 00d6 344B     		ldr	r3, .L196+4
 2874 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2875 00dc 1946     		mov	r1, r3
 2876 00de 3B68     		ldr	r3, [r7]
 2877 00e0 03FB01F3 		mul	r3, r3, r1
 2878 00e4 9900     		lsls	r1, r3, #2
 2879 00e6 314B     		ldr	r3, .L196+8
 2880 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2881 00ec C3F58063 		rsb	r3, r3, #1024
 2882 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2883 00f4 1A44     		add	r2, r2, r3
 2884 00f6 BB68     		ldr	r3, [r7, #8]
 2885 00f8 1A60     		str	r2, [r3]
 2886              	.L190:
 980:..\src/interruptions.c ****                 }
 981:..\src/interruptions.c ****                 if (motor_idx == 1){
 2887              		.loc 1 981 0
 2888 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2889 00fc 012B     		cmp	r3, #1
 2890 00fe 13D1     		bne	.L189
 982:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2891              		.loc 1 982 0
 2892 0100 7B68     		ldr	r3, [r7, #4]
 2893 0102 1A68     		ldr	r2, [r3]
 2894 0104 284B     		ldr	r3, .L196+4
 2895 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2896 010a 1946     		mov	r1, r3
 2897 010c 3B68     		ldr	r3, [r7]
 2898 010e 03FB01F3 		mul	r3, r3, r1
 2899 0112 9900     		lsls	r1, r3, #2
 2900 0114 254B     		ldr	r3, .L196+8
 2901 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2902 011a C3F58063 		rsb	r3, r3, #1024
 2903 011e 91FBF3F3 		sdiv	r3, r1, r3
 2904 0122 D21A     		subs	r2, r2, r3
 2905 0124 BB68     		ldr	r3, [r7, #8]
 2906 0126 1A60     		str	r2, [r3]
 2907              	.L189:
 983:..\src/interruptions.c ****                 }   
 984:..\src/interruptions.c ****             }
 985:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2908              		.loc 1 985 0
 2909 0128 BB69     		ldr	r3, [r7, #24]
 2910 012a 002B     		cmp	r3, #0
 2911 012c 34DD     		ble	.L195
 2912              		.loc 1 985 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 71


 2913 012e BA69     		ldr	r2, [r7, #24]
 2914 0130 3B68     		ldr	r3, [r7]
 2915 0132 9A42     		cmp	r2, r3
 2916 0134 30DD     		ble	.L195
 986:..\src/interruptions.c ****                 if (motor_idx == 0){
 2917              		.loc 1 986 0 is_stmt 1
 2918 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2919 0138 002B     		cmp	r3, #0
 2920 013a 13D1     		bne	.L192
 987:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2921              		.loc 1 987 0
 2922 013c 7B68     		ldr	r3, [r7, #4]
 2923 013e 1A68     		ldr	r2, [r3]
 2924 0140 194B     		ldr	r3, .L196+4
 2925 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2926 0146 1946     		mov	r1, r3
 2927 0148 BB69     		ldr	r3, [r7, #24]
 2928 014a 03FB01F3 		mul	r3, r3, r1
 2929 014e 9900     		lsls	r1, r3, #2
 2930 0150 164B     		ldr	r3, .L196+8
 2931 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2932 0156 C3F58063 		rsb	r3, r3, #1024
 2933 015a 91FBF3F3 		sdiv	r3, r1, r3
 2934 015e D21A     		subs	r2, r2, r3
 2935 0160 BB68     		ldr	r3, [r7, #8]
 2936 0162 1A60     		str	r2, [r3]
 2937              	.L192:
 988:..\src/interruptions.c ****                 }
 989:..\src/interruptions.c ****                 if (motor_idx == 1){
 2938              		.loc 1 989 0
 2939 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2940 0166 012B     		cmp	r3, #1
 2941 0168 16D1     		bne	.L195
 990:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2942              		.loc 1 990 0
 2943 016a 7B68     		ldr	r3, [r7, #4]
 2944 016c 1A68     		ldr	r2, [r3]
 2945 016e 0E4B     		ldr	r3, .L196+4
 2946 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2947 0174 1946     		mov	r1, r3
 2948 0176 BB69     		ldr	r3, [r7, #24]
 2949 0178 03FB01F3 		mul	r3, r3, r1
 2950 017c 9900     		lsls	r1, r3, #2
 2951 017e 0B4B     		ldr	r3, .L196+8
 2952 0180 B3F8F231 		ldrh	r3, [r3, #498]
 2953 0184 C3F58063 		rsb	r3, r3, #1024
 2954 0188 91FBF3F3 		sdiv	r3, r1, r3
 2955 018c 1A44     		add	r2, r2, r3
 2956 018e BB68     		ldr	r3, [r7, #8]
 2957 0190 1A60     		str	r2, [r3]
 991:..\src/interruptions.c ****                 }
 992:..\src/interruptions.c ****             }
 993:..\src/interruptions.c ****             
 994:..\src/interruptions.c ****             break;
 2958              		.loc 1 994 0
 2959 0192 01E0     		b	.L195
 2960              	.L194:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 72


 973:..\src/interruptions.c ****             
 2961              		.loc 1 973 0
 2962 0194 00BF     		nop
 2963 0196 00E0     		b	.L193
 2964              	.L195:
 2965              		.loc 1 994 0
 2966 0198 00BF     		nop
 2967              	.L182:
 2968              	.L193:
 995:..\src/interruptions.c ****     }
 996:..\src/interruptions.c ****  
 997:..\src/interruptions.c **** }
 2969              		.loc 1 997 0
 2970 019a 00BF     		nop
 2971 019c 1037     		adds	r7, r7, #16
 2972              		.cfi_def_cfa_offset 8
 2973 019e BD46     		mov	sp, r7
 2974              		.cfi_def_cfa_register 13
 2975              		@ sp needed
 2976 01a0 80BD     		pop	{r7, pc}
 2977              	.L197:
 2978 01a2 00BF     		.align	2
 2979              	.L196:
 2980 01a4 8E000000 		.word	fsm_state.10528
 2981 01a8 00000000 		.word	g_mem
 2982 01ac 00000000 		.word	c_mem
 2983              		.cfi_endproc
 2984              	.LFE70:
 2985              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 2986              		.section	.text.motor_control_SH,"ax",%progbits
 2987              		.align	2
 2988              		.global	motor_control_SH
 2989              		.thumb
 2990              		.thumb_func
 2991              		.type	motor_control_SH, %function
 2992              	motor_control_SH:
 2993              	.LFB71:
 998:..\src/interruptions.c **** 
 999:..\src/interruptions.c **** //==============================================================================
1000:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1001:..\src/interruptions.c **** //==============================================================================
1002:..\src/interruptions.c **** void motor_control_SH() {
 2994              		.loc 1 1002 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 80
 2997              		@ frame_needed = 1, uses_anonymous_args = 0
 2998 0000 80B5     		push	{r7, lr}
 2999              		.cfi_def_cfa_offset 8
 3000              		.cfi_offset 7, -8
 3001              		.cfi_offset 14, -4
 3002 0002 94B0     		sub	sp, sp, #80
 3003              		.cfi_def_cfa_offset 88
 3004 0004 00AF     		add	r7, sp, #0
 3005              		.cfi_def_cfa_register 7
1003:..\src/interruptions.c **** 
1004:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3006              		.loc 1 1004 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 73


 3007 0006 0023     		movs	r3, #0
 3008 0008 FB64     		str	r3, [r7, #76]
1005:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1006:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1007:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1008:..\src/interruptions.c ****  
1009:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3009              		.loc 1 1009 0
 3010 000a 0023     		movs	r3, #0
 3011 000c 87F84730 		strb	r3, [r7, #71]
1010:..\src/interruptions.c ****     
1011:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3012              		.loc 1 1011 0
 3013 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3014 0014 1346     		mov	r3, r2
 3015 0016 DB00     		lsls	r3, r3, #3
 3016 0018 9B1A     		subs	r3, r3, r2
 3017 001a 1B01     		lsls	r3, r3, #4
 3018 001c B033     		adds	r3, r3, #176
 3019 001e 9D4A     		ldr	r2, .L259
 3020 0020 1344     		add	r3, r3, r2
 3021 0022 3B64     		str	r3, [r7, #64]
1012:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3022              		.loc 1 1012 0
 3023 0024 3B6C     		ldr	r3, [r7, #64]
 3024 0026 93F86030 		ldrb	r3, [r3, #96]
 3025 002a 87F83F30 		strb	r3, [r7, #63]
1013:..\src/interruptions.c ****     
1014:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3026              		.loc 1 1014 0
 3027 002e 3B6C     		ldr	r3, [r7, #64]
 3028 0030 1B68     		ldr	r3, [r3]
 3029 0032 BB63     		str	r3, [r7, #56]
1015:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3030              		.loc 1 1015 0
 3031 0034 3B6C     		ldr	r3, [r7, #64]
 3032 0036 5B68     		ldr	r3, [r3, #4]
 3033 0038 7B63     		str	r3, [r7, #52]
1016:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3034              		.loc 1 1016 0
 3035 003a 3B6C     		ldr	r3, [r7, #64]
 3036 003c 9B68     		ldr	r3, [r3, #8]
 3037 003e 3B63     		str	r3, [r7, #48]
1017:..\src/interruptions.c **** 
1018:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3038              		.loc 1 1018 0
 3039 0040 3B6C     		ldr	r3, [r7, #64]
 3040 0042 DB68     		ldr	r3, [r3, #12]
 3041 0044 FB62     		str	r3, [r7, #44]
1019:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3042              		.loc 1 1019 0
 3043 0046 3B6C     		ldr	r3, [r7, #64]
 3044 0048 1B69     		ldr	r3, [r3, #16]
 3045 004a BB62     		str	r3, [r7, #40]
1020:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3046              		.loc 1 1020 0
 3047 004c 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 74


 3048 004e 5B69     		ldr	r3, [r3, #20]
 3049 0050 7B62     		str	r3, [r7, #36]
1021:..\src/interruptions.c **** 
1022:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3050              		.loc 1 1022 0
 3051 0052 3B6C     		ldr	r3, [r7, #64]
 3052 0054 9B69     		ldr	r3, [r3, #24]
 3053 0056 3B62     		str	r3, [r7, #32]
1023:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3054              		.loc 1 1023 0
 3055 0058 3B6C     		ldr	r3, [r7, #64]
 3056 005a DB69     		ldr	r3, [r3, #28]
 3057 005c FB61     		str	r3, [r7, #28]
1024:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3058              		.loc 1 1024 0
 3059 005e 3B6C     		ldr	r3, [r7, #64]
 3060 0060 1B6A     		ldr	r3, [r3, #32]
 3061 0062 BB61     		str	r3, [r7, #24]
1025:..\src/interruptions.c ****     
1026:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3062              		.loc 1 1026 0
 3063 0064 3B6C     		ldr	r3, [r7, #64]
 3064 0066 5B6A     		ldr	r3, [r3, #36]
 3065 0068 7B61     		str	r3, [r7, #20]
1027:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3066              		.loc 1 1027 0
 3067 006a 3B6C     		ldr	r3, [r7, #64]
 3068 006c 9B6A     		ldr	r3, [r3, #40]
 3069 006e 3B61     		str	r3, [r7, #16]
1028:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3070              		.loc 1 1028 0
 3071 0070 3B6C     		ldr	r3, [r7, #64]
 3072 0072 DB6A     		ldr	r3, [r3, #44]
 3073 0074 FB60     		str	r3, [r7, #12]
1029:..\src/interruptions.c **** 
1030:..\src/interruptions.c ****     // Static Variables
1031:..\src/interruptions.c **** 
1032:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1033:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1036:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1037:..\src/interruptions.c ****     static int32 prev_pwm;
1038:..\src/interruptions.c **** 
1039:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1040:..\src/interruptions.c ****     static uint32 position_counter = 0;
1041:..\src/interruptions.c ****   
1042:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1043:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3074              		.loc 1 1043 0
 3075 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3076 007a 1B01     		lsls	r3, r3, #4
 3077 007c 864A     		ldr	r2, .L259+4
 3078 007e 9918     		adds	r1, r3, r2
 3079 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3080 0084 1B01     		lsls	r3, r3, #4
 3081 0086 854A     		ldr	r2, .L259+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 75


 3082 0088 1A44     		add	r2, r2, r3
 3083 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3084 008e 1846     		mov	r0, r3
 3085 0090 FFF7FEFF 		bl	compute_reference
1044:..\src/interruptions.c ****      
1045:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3086              		.loc 1 1045 0
 3087 0094 3B6C     		ldr	r3, [r7, #64]
 3088 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3089 009a 032B     		cmp	r3, #3
 3090 009c 00F2F781 		bhi	.L199
 3091 00a0 01A2     		adr	r2, .L201
 3092 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3093 00a6 00BF     		.p2align 2
 3094              	.L201:
 3095 00a8 55020000 		.word	.L200+1
 3096 00ac 49040000 		.word	.L202+1
 3097 00b0 3B030000 		.word	.L203+1
 3098 00b4 B9000000 		.word	.L204+1
 3099              		.p2align 1
 3100              	.L204:
1046:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1047:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1048:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3101              		.loc 1 1048 0
 3102 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3103 00bc 764A     		ldr	r2, .L259+4
 3104 00be 1B01     		lsls	r3, r3, #4
 3105 00c0 1344     		add	r3, r3, r2
 3106 00c2 1A68     		ldr	r2, [r3]
 3107 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3108 00c8 7549     		ldr	r1, .L259+12
 3109 00ca 3420     		movs	r0, #52
 3110 00cc 00FB03F3 		mul	r3, r0, r3
 3111 00d0 0B44     		add	r3, r3, r1
 3112 00d2 1B68     		ldr	r3, [r3]
 3113 00d4 D31A     		subs	r3, r2, r3
 3114 00d6 BB60     		str	r3, [r7, #8]
1049:..\src/interruptions.c **** 
1050:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3115              		.loc 1 1050 0
 3116 00d8 724B     		ldr	r3, .L259+16
 3117 00da 1A68     		ldr	r2, [r3]
 3118 00dc BB68     		ldr	r3, [r7, #8]
 3119 00de 1344     		add	r3, r3, r2
 3120 00e0 704A     		ldr	r2, .L259+16
 3121 00e2 1360     		str	r3, [r2]
1051:..\src/interruptions.c **** 
1052:..\src/interruptions.c ****             // error_sum saturation
1053:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3122              		.loc 1 1053 0
 3123 00e4 6F4B     		ldr	r3, .L259+16
 3124 00e6 1B68     		ldr	r3, [r3]
 3125 00e8 6F4A     		ldr	r2, .L259+20
 3126 00ea 9342     		cmp	r3, r2
 3127 00ec 03DD     		ble	.L205
1054:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 76


 3128              		.loc 1 1054 0
 3129 00ee 6D4B     		ldr	r3, .L259+16
 3130 00f0 6D4A     		ldr	r2, .L259+20
 3131 00f2 1A60     		str	r2, [r3]
 3132 00f4 07E0     		b	.L206
 3133              	.L205:
1055:..\src/interruptions.c ****             else {
1056:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3134              		.loc 1 1056 0
 3135 00f6 6B4B     		ldr	r3, .L259+16
 3136 00f8 1B68     		ldr	r3, [r3]
 3137 00fa 6C4A     		ldr	r2, .L259+24
 3138 00fc 9342     		cmp	r3, r2
 3139 00fe 02DA     		bge	.L206
1057:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3140              		.loc 1 1057 0
 3141 0100 684B     		ldr	r3, .L259+16
 3142 0102 6A4A     		ldr	r2, .L259+24
 3143 0104 1A60     		str	r2, [r3]
 3144              	.L206:
1058:..\src/interruptions.c ****             }
1059:..\src/interruptions.c ****             
1060:..\src/interruptions.c ****             // ------ position PID control ------
1061:..\src/interruptions.c **** 
1062:..\src/interruptions.c ****             i_ref = 0;
 3145              		.loc 1 1062 0
 3146 0106 0023     		movs	r3, #0
 3147 0108 BB64     		str	r3, [r7, #72]
1063:..\src/interruptions.c ****             
1064:..\src/interruptions.c ****             // Proportional
1065:..\src/interruptions.c ****             if (k_p_dl != 0)
 3148              		.loc 1 1065 0
 3149 010a 3B6A     		ldr	r3, [r7, #32]
 3150 010c 002B     		cmp	r3, #0
 3151 010e 07D0     		beq	.L207
1066:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3152              		.loc 1 1066 0
 3153 0110 3B6A     		ldr	r3, [r7, #32]
 3154 0112 BA68     		ldr	r2, [r7, #8]
 3155 0114 02FB03F3 		mul	r3, r2, r3
 3156 0118 1B14     		asrs	r3, r3, #16
 3157 011a BA6C     		ldr	r2, [r7, #72]
 3158 011c 1344     		add	r3, r3, r2
 3159 011e BB64     		str	r3, [r7, #72]
 3160              	.L207:
1067:..\src/interruptions.c **** 
1068:..\src/interruptions.c ****             // Integral
1069:..\src/interruptions.c ****             if (k_i_dl != 0)
 3161              		.loc 1 1069 0
 3162 0120 FB69     		ldr	r3, [r7, #28]
 3163 0122 002B     		cmp	r3, #0
 3164 0124 08D0     		beq	.L208
1070:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3165              		.loc 1 1070 0
 3166 0126 5F4B     		ldr	r3, .L259+16
 3167 0128 1B68     		ldr	r3, [r3]
 3168 012a FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 77


 3169 012c 02FB03F3 		mul	r3, r2, r3
 3170 0130 1B14     		asrs	r3, r3, #16
 3171 0132 BA6C     		ldr	r2, [r7, #72]
 3172 0134 1344     		add	r3, r3, r2
 3173 0136 BB64     		str	r3, [r7, #72]
 3174              	.L208:
1071:..\src/interruptions.c **** 
1072:..\src/interruptions.c ****             // Derivative
1073:..\src/interruptions.c ****             if (k_d_dl != 0)
 3175              		.loc 1 1073 0
 3176 0138 BB69     		ldr	r3, [r7, #24]
 3177 013a 002B     		cmp	r3, #0
 3178 013c 0AD0     		beq	.L209
1074:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3179              		.loc 1 1074 0
 3180 013e 5C4B     		ldr	r3, .L259+28
 3181 0140 1B68     		ldr	r3, [r3]
 3182 0142 BA68     		ldr	r2, [r7, #8]
 3183 0144 D31A     		subs	r3, r2, r3
 3184 0146 BA69     		ldr	r2, [r7, #24]
 3185 0148 02FB03F3 		mul	r3, r2, r3
 3186 014c 1B14     		asrs	r3, r3, #16
 3187 014e BA6C     		ldr	r2, [r7, #72]
 3188 0150 1344     		add	r3, r3, r2
 3189 0152 BB64     		str	r3, [r7, #72]
 3190              	.L209:
1075:..\src/interruptions.c ****                         
1076:..\src/interruptions.c ****             // Update previous position
1077:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3191              		.loc 1 1077 0
 3192 0154 564A     		ldr	r2, .L259+28
 3193 0156 BB68     		ldr	r3, [r7, #8]
 3194 0158 1360     		str	r3, [r2]
1078:..\src/interruptions.c **** 
1079:..\src/interruptions.c ****             // motor direction depends on i_ref
1080:..\src/interruptions.c ****             if (i_ref >= 0)
 3195              		.loc 1 1080 0
 3196 015a BB6C     		ldr	r3, [r7, #72]
 3197 015c 002B     		cmp	r3, #0
 3198 015e 03DB     		blt	.L210
1081:..\src/interruptions.c ****                 motor_dir = TRUE;
 3199              		.loc 1 1081 0
 3200 0160 544B     		ldr	r3, .L259+32
 3201 0162 0122     		movs	r2, #1
 3202 0164 1A70     		strb	r2, [r3]
 3203 0166 02E0     		b	.L211
 3204              	.L210:
1082:..\src/interruptions.c ****             else
1083:..\src/interruptions.c ****                 motor_dir = FALSE;
 3205              		.loc 1 1083 0
 3206 0168 524B     		ldr	r3, .L259+32
 3207 016a 0022     		movs	r2, #0
 3208 016c 1A70     		strb	r2, [r3]
 3209              	.L211:
1084:..\src/interruptions.c **** 
1085:..\src/interruptions.c ****             // saturate max current
1086:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 78


 3210              		.loc 1 1086 0
 3211 016e 3B6C     		ldr	r3, [r7, #64]
 3212 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3213 0174 1A46     		mov	r2, r3
 3214 0176 BB6C     		ldr	r3, [r7, #72]
 3215 0178 9A42     		cmp	r2, r3
 3216 017a 04DA     		bge	.L212
1087:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3217              		.loc 1 1087 0
 3218 017c 3B6C     		ldr	r3, [r7, #64]
 3219 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3220 0182 BB64     		str	r3, [r7, #72]
 3221 0184 0BE0     		b	.L213
 3222              	.L212:
1088:..\src/interruptions.c ****             else {
1089:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3223              		.loc 1 1089 0
 3224 0186 3B6C     		ldr	r3, [r7, #64]
 3225 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3226 018c 5A42     		negs	r2, r3
 3227 018e BB6C     		ldr	r3, [r7, #72]
 3228 0190 9A42     		cmp	r2, r3
 3229 0192 04DD     		ble	.L213
1090:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3230              		.loc 1 1090 0
 3231 0194 3B6C     		ldr	r3, [r7, #64]
 3232 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3233 019a 5B42     		negs	r3, r3
 3234 019c BB64     		str	r3, [r7, #72]
 3235              	.L213:
1091:..\src/interruptions.c ****         	}
1092:..\src/interruptions.c **** 
1093:..\src/interruptions.c ****             // current error and curr error sum
1094:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3236              		.loc 1 1094 0
 3237 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3238 01a2 3F4A     		ldr	r2, .L259+12
 3239 01a4 3421     		movs	r1, #52
 3240 01a6 01FB03F3 		mul	r3, r1, r3
 3241 01aa 1344     		add	r3, r3, r2
 3242 01ac 0C33     		adds	r3, r3, #12
 3243 01ae 1B68     		ldr	r3, [r3]
 3244 01b0 BA6C     		ldr	r2, [r7, #72]
 3245 01b2 D31A     		subs	r3, r2, r3
 3246 01b4 7B60     		str	r3, [r7, #4]
1095:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3247              		.loc 1 1095 0
 3248 01b6 404B     		ldr	r3, .L259+36
 3249 01b8 1A68     		ldr	r2, [r3]
 3250 01ba 7B68     		ldr	r3, [r7, #4]
 3251 01bc 1344     		add	r3, r3, r2
 3252 01be 3E4A     		ldr	r2, .L259+36
 3253 01c0 1360     		str	r3, [r2]
1096:..\src/interruptions.c ****             
1097:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3254              		.loc 1 1097 0
 3255 01c2 3D4B     		ldr	r3, .L259+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 79


 3256 01c4 1B68     		ldr	r3, [r3]
 3257 01c6 3D4A     		ldr	r2, .L259+40
 3258 01c8 9342     		cmp	r3, r2
 3259 01ca 03DD     		ble	.L214
1098:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3260              		.loc 1 1098 0
 3261 01cc 3A4B     		ldr	r3, .L259+36
 3262 01ce 3B4A     		ldr	r2, .L259+40
 3263 01d0 1A60     		str	r2, [r3]
 3264 01d2 07E0     		b	.L215
 3265              	.L214:
1099:..\src/interruptions.c ****             else {
1100:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3266              		.loc 1 1100 0
 3267 01d4 384B     		ldr	r3, .L259+36
 3268 01d6 1B68     		ldr	r3, [r3]
 3269 01d8 394A     		ldr	r2, .L259+44
 3270 01da 9342     		cmp	r3, r2
 3271 01dc 02DA     		bge	.L215
1101:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3272              		.loc 1 1101 0
 3273 01de 364B     		ldr	r3, .L259+36
 3274 01e0 374A     		ldr	r2, .L259+44
 3275 01e2 1A60     		str	r2, [r3]
 3276              	.L215:
1102:..\src/interruptions.c ****             }
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****             // ----- current PID control -----
1105:..\src/interruptions.c **** 
1106:..\src/interruptions.c ****             pwm_input = 0;
 3277              		.loc 1 1106 0
 3278 01e4 0023     		movs	r3, #0
 3279 01e6 FB64     		str	r3, [r7, #76]
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****             // Proportional
1109:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3280              		.loc 1 1109 0
 3281 01e8 7B69     		ldr	r3, [r7, #20]
 3282 01ea 002B     		cmp	r3, #0
 3283 01ec 07D0     		beq	.L216
1110:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3284              		.loc 1 1110 0
 3285 01ee 7B69     		ldr	r3, [r7, #20]
 3286 01f0 7A68     		ldr	r2, [r7, #4]
 3287 01f2 02FB03F3 		mul	r3, r2, r3
 3288 01f6 1B14     		asrs	r3, r3, #16
 3289 01f8 FA6C     		ldr	r2, [r7, #76]
 3290 01fa 1344     		add	r3, r3, r2
 3291 01fc FB64     		str	r3, [r7, #76]
 3292              	.L216:
1111:..\src/interruptions.c **** 
1112:..\src/interruptions.c ****             // Integral
1113:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3293              		.loc 1 1113 0
 3294 01fe 3B69     		ldr	r3, [r7, #16]
 3295 0200 002B     		cmp	r3, #0
 3296 0202 08D0     		beq	.L217
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 80


1114:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3297              		.loc 1 1114 0
 3298 0204 2C4B     		ldr	r3, .L259+36
 3299 0206 1B68     		ldr	r3, [r3]
 3300 0208 3A69     		ldr	r2, [r7, #16]
 3301 020a 02FB03F3 		mul	r3, r2, r3
 3302 020e 1B14     		asrs	r3, r3, #16
 3303 0210 FA6C     		ldr	r2, [r7, #76]
 3304 0212 1344     		add	r3, r3, r2
 3305 0214 FB64     		str	r3, [r7, #76]
 3306              	.L217:
1115:..\src/interruptions.c **** 
1116:..\src/interruptions.c ****             // Derivative
1117:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3307              		.loc 1 1117 0
 3308 0216 FB68     		ldr	r3, [r7, #12]
 3309 0218 002B     		cmp	r3, #0
 3310 021a 0AD0     		beq	.L218
1118:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3311              		.loc 1 1118 0
 3312 021c 294B     		ldr	r3, .L259+48
 3313 021e 1B68     		ldr	r3, [r3]
 3314 0220 7A68     		ldr	r2, [r7, #4]
 3315 0222 D31A     		subs	r3, r2, r3
 3316 0224 FA68     		ldr	r2, [r7, #12]
 3317 0226 02FB03F3 		mul	r3, r2, r3
 3318 022a 1B14     		asrs	r3, r3, #16
 3319 022c FA6C     		ldr	r2, [r7, #76]
 3320 022e 1344     		add	r3, r3, r2
 3321 0230 FB64     		str	r3, [r7, #76]
 3322              	.L218:
1119:..\src/interruptions.c **** 
1120:..\src/interruptions.c ****             // pwm_input saturation
1121:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3323              		.loc 1 1121 0
 3324 0232 FB6C     		ldr	r3, [r7, #76]
 3325 0234 13F1640F 		cmn	r3, #100
 3326 0238 03DA     		bge	.L219
1122:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3327              		.loc 1 1122 0
 3328 023a 6FF06303 		mvn	r3, #99
 3329 023e FB64     		str	r3, [r7, #76]
 3330 0240 04E0     		b	.L220
 3331              	.L219:
1123:..\src/interruptions.c ****             else {
1124:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3332              		.loc 1 1124 0
 3333 0242 FB6C     		ldr	r3, [r7, #76]
 3334 0244 642B     		cmp	r3, #100
 3335 0246 01DD     		ble	.L220
1125:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3336              		.loc 1 1125 0
 3337 0248 6423     		movs	r3, #100
 3338 024a FB64     		str	r3, [r7, #76]
 3339              	.L220:
1126:..\src/interruptions.c ****             }
1127:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 81


1128:..\src/interruptions.c ****             // Update previous current
1129:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3340              		.loc 1 1129 0
 3341 024c 1D4A     		ldr	r2, .L259+48
 3342 024e 7B68     		ldr	r3, [r7, #4]
 3343 0250 1360     		str	r3, [r2]
1130:..\src/interruptions.c **** 
1131:..\src/interruptions.c ****         break;
 3344              		.loc 1 1131 0
 3345 0252 1CE1     		b	.L199
 3346              	.L200:
1132:..\src/interruptions.c **** 
1133:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1134:..\src/interruptions.c ****         case CONTROL_ANGLE:
1135:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3347              		.loc 1 1135 0
 3348 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3349 0258 0F4A     		ldr	r2, .L259+4
 3350 025a 1B01     		lsls	r3, r3, #4
 3351 025c 1344     		add	r3, r3, r2
 3352 025e 1A68     		ldr	r2, [r3]
 3353 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3354 0264 0E49     		ldr	r1, .L259+12
 3355 0266 3420     		movs	r0, #52
 3356 0268 00FB03F3 		mul	r3, r0, r3
 3357 026c 0B44     		add	r3, r3, r1
 3358 026e 1B68     		ldr	r3, [r3]
 3359 0270 D31A     		subs	r3, r2, r3
 3360 0272 BB60     		str	r3, [r7, #8]
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3361              		.loc 1 1137 0
 3362 0274 0B4B     		ldr	r3, .L259+16
 3363 0276 1A68     		ldr	r2, [r3]
 3364 0278 BB68     		ldr	r3, [r7, #8]
 3365 027a 1344     		add	r3, r3, r2
 3366 027c 094A     		ldr	r2, .L259+16
 3367 027e 1360     		str	r3, [r2]
1138:..\src/interruptions.c **** 
1139:..\src/interruptions.c ****             // anti-windup (for integral control)
1140:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3368              		.loc 1 1140 0
 3369 0280 084B     		ldr	r3, .L259+16
 3370 0282 1B68     		ldr	r3, [r3]
 3371 0284 B3F57A7F 		cmp	r3, #1000
 3372 0288 1EDD     		ble	.L221
1141:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3373              		.loc 1 1141 0
 3374 028a 064B     		ldr	r3, .L259+16
 3375 028c 4FF47A72 		mov	r2, #1000
 3376 0290 1A60     		str	r2, [r3]
 3377 0292 21E0     		b	.L222
 3378              	.L260:
 3379              		.align	2
 3380              	.L259:
 3381 0294 00000000 		.word	c_mem
 3382 0298 00000000 		.word	g_ref
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 82


 3383 029c 00000000 		.word	g_refOld
 3384 02a0 00000000 		.word	g_meas
 3385 02a4 90000000 		.word	pos_error_sum.10555
 3386 02a8 80F0FA02 		.word	50000000
 3387 02ac 800F05FD 		.word	-50000000
 3388 02b0 94000000 		.word	prev_pos_err.10557
 3389 02b4 98000000 		.word	motor_dir.10560
 3390 02b8 9C000000 		.word	curr_error_sum.10556
 3391 02bc A0860100 		.word	100000
 3392 02c0 6079FEFF 		.word	-100000
 3393 02c4 A0000000 		.word	prev_curr_err.10558
 3394              	.L221:
1142:..\src/interruptions.c ****             else {
1143:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3395              		.loc 1 1143 0
 3396 02c8 9C4B     		ldr	r3, .L261
 3397 02ca 1B68     		ldr	r3, [r3]
 3398 02cc 13F57A7F 		cmn	r3, #1000
 3399 02d0 02DA     		bge	.L222
1144:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3400              		.loc 1 1144 0
 3401 02d2 9A4B     		ldr	r3, .L261
 3402 02d4 9A4A     		ldr	r2, .L261+4
 3403 02d6 1A60     		str	r2, [r3]
 3404              	.L222:
1145:..\src/interruptions.c ****             }
1146:..\src/interruptions.c **** 
1147:..\src/interruptions.c ****             // Proportional
1148:..\src/interruptions.c ****             if (k_p != 0) 
 3405              		.loc 1 1148 0
 3406 02d8 BB6B     		ldr	r3, [r7, #56]
 3407 02da 002B     		cmp	r3, #0
 3408 02dc 05D0     		beq	.L223
1149:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3409              		.loc 1 1149 0
 3410 02de BB6B     		ldr	r3, [r7, #56]
 3411 02e0 BA68     		ldr	r2, [r7, #8]
 3412 02e2 02FB03F3 		mul	r3, r2, r3
 3413 02e6 1B14     		asrs	r3, r3, #16
 3414 02e8 FB64     		str	r3, [r7, #76]
 3415              	.L223:
1150:..\src/interruptions.c ****             
1151:..\src/interruptions.c **** 
1152:..\src/interruptions.c ****             // Integral
1153:..\src/interruptions.c ****             if (k_i != 0) 
 3416              		.loc 1 1153 0
 3417 02ea 7B6B     		ldr	r3, [r7, #52]
 3418 02ec 002B     		cmp	r3, #0
 3419 02ee 08D0     		beq	.L224
1154:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3420              		.loc 1 1154 0
 3421 02f0 924B     		ldr	r3, .L261
 3422 02f2 1B68     		ldr	r3, [r3]
 3423 02f4 7A6B     		ldr	r2, [r7, #52]
 3424 02f6 02FB03F3 		mul	r3, r2, r3
 3425 02fa 1B14     		asrs	r3, r3, #16
 3426 02fc FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 83


 3427 02fe 1344     		add	r3, r3, r2
 3428 0300 FB64     		str	r3, [r7, #76]
 3429              	.L224:
1155:..\src/interruptions.c ****             
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****             // Derivative
1158:..\src/interruptions.c ****             if (k_d != 0) 
 3430              		.loc 1 1158 0
 3431 0302 3B6B     		ldr	r3, [r7, #48]
 3432 0304 002B     		cmp	r3, #0
 3433 0306 0AD0     		beq	.L225
1159:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3434              		.loc 1 1159 0
 3435 0308 8E4B     		ldr	r3, .L261+8
 3436 030a 1B68     		ldr	r3, [r3]
 3437 030c BA68     		ldr	r2, [r7, #8]
 3438 030e D31A     		subs	r3, r2, r3
 3439 0310 3A6B     		ldr	r2, [r7, #48]
 3440 0312 02FB03F3 		mul	r3, r2, r3
 3441 0316 1B14     		asrs	r3, r3, #16
 3442 0318 FA6C     		ldr	r2, [r7, #76]
 3443 031a 1344     		add	r3, r3, r2
 3444 031c FB64     		str	r3, [r7, #76]
 3445              	.L225:
1160:..\src/interruptions.c ****             
1161:..\src/interruptions.c **** 
1162:..\src/interruptions.c ****             // Update measure
1163:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3446              		.loc 1 1163 0
 3447 031e 894A     		ldr	r2, .L261+8
 3448 0320 BB68     		ldr	r3, [r7, #8]
 3449 0322 1360     		str	r3, [r2]
1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****             if (pwm_input > 0)
 3450              		.loc 1 1165 0
 3451 0324 FB6C     		ldr	r3, [r7, #76]
 3452 0326 002B     		cmp	r3, #0
 3453 0328 03DD     		ble	.L226
1166:..\src/interruptions.c ****                 motor_dir = TRUE;
 3454              		.loc 1 1166 0
 3455 032a 874B     		ldr	r3, .L261+12
 3456 032c 0122     		movs	r2, #1
 3457 032e 1A70     		strb	r2, [r3]
1167:..\src/interruptions.c ****             else
1168:..\src/interruptions.c ****                 motor_dir = FALSE;
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****         break;
 3458              		.loc 1 1170 0
 3459 0330 ADE0     		b	.L199
 3460              	.L226:
1168:..\src/interruptions.c **** 
 3461              		.loc 1 1168 0
 3462 0332 854B     		ldr	r3, .L261+12
 3463 0334 0022     		movs	r2, #0
 3464 0336 1A70     		strb	r2, [r3]
 3465              		.loc 1 1170 0
 3466 0338 A9E0     		b	.L199
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 84


 3467              	.L203:
1171:..\src/interruptions.c **** 
1172:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1173:..\src/interruptions.c ****         case CONTROL_CURRENT:
1174:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3468              		.loc 1 1174 0
 3469 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3470 033e 834A     		ldr	r2, .L261+16
 3471 0340 1B01     		lsls	r3, r3, #4
 3472 0342 1344     		add	r3, r3, r2
 3473 0344 0C33     		adds	r3, r3, #12
 3474 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3475 0348 002B     		cmp	r3, #0
 3476 034a 00F09D80 		beq	.L257
 3477              		.loc 1 1174 0 is_stmt 0 discriminator 1
 3478 034e 804B     		ldr	r3, .L261+20
 3479 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3480 0352 002B     		cmp	r3, #0
 3481 0354 00F09880 		beq	.L257
1175:..\src/interruptions.c ****                 
1176:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3482              		.loc 1 1176 0 is_stmt 1
 3483 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3484 035c 7B4A     		ldr	r2, .L261+16
 3485 035e 1B01     		lsls	r3, r3, #4
 3486 0360 1344     		add	r3, r3, r2
 3487 0362 0433     		adds	r3, r3, #4
 3488 0364 1B68     		ldr	r3, [r3]
 3489 0366 BB64     		str	r3, [r7, #72]
1177:..\src/interruptions.c **** 
1178:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3490              		.loc 1 1178 0
 3491 0368 3B6C     		ldr	r3, [r7, #64]
 3492 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3493 036e 1A46     		mov	r2, r3
 3494 0370 BB6C     		ldr	r3, [r7, #72]
 3495 0372 9A42     		cmp	r2, r3
 3496 0374 04DA     		bge	.L229
1179:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3497              		.loc 1 1179 0
 3498 0376 3B6C     		ldr	r3, [r7, #64]
 3499 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3500 037c BB64     		str	r3, [r7, #72]
 3501 037e 0BE0     		b	.L230
 3502              	.L229:
1180:..\src/interruptions.c ****                 else {
1181:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3503              		.loc 1 1181 0
 3504 0380 3B6C     		ldr	r3, [r7, #64]
 3505 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3506 0386 5A42     		negs	r2, r3
 3507 0388 BB6C     		ldr	r3, [r7, #72]
 3508 038a 9A42     		cmp	r2, r3
 3509 038c 04DD     		ble	.L230
1182:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3510              		.loc 1 1182 0
 3511 038e 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 85


 3512 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3513 0394 5B42     		negs	r3, r3
 3514 0396 BB64     		str	r3, [r7, #72]
 3515              	.L230:
1183:..\src/interruptions.c ****                 }
1184:..\src/interruptions.c ****                 
1185:..\src/interruptions.c ****                 // current error
1186:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3516              		.loc 1 1186 0
 3517 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3518 039c 6D4A     		ldr	r2, .L261+24
 3519 039e 3421     		movs	r1, #52
 3520 03a0 01FB03F3 		mul	r3, r1, r3
 3521 03a4 1344     		add	r3, r3, r2
 3522 03a6 0C33     		adds	r3, r3, #12
 3523 03a8 1B68     		ldr	r3, [r3]
 3524 03aa BA6C     		ldr	r2, [r7, #72]
 3525 03ac D31A     		subs	r3, r2, r3
 3526 03ae 7B60     		str	r3, [r7, #4]
1187:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3527              		.loc 1 1187 0
 3528 03b0 694B     		ldr	r3, .L261+28
 3529 03b2 1A68     		ldr	r2, [r3]
 3530 03b4 7B68     		ldr	r3, [r7, #4]
 3531 03b6 1344     		add	r3, r3, r2
 3532 03b8 674A     		ldr	r2, .L261+28
 3533 03ba 1360     		str	r3, [r2]
1188:..\src/interruptions.c ****                 
1189:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3534              		.loc 1 1189 0
 3535 03bc 664B     		ldr	r3, .L261+28
 3536 03be 1B68     		ldr	r3, [r3]
 3537 03c0 664A     		ldr	r2, .L261+32
 3538 03c2 9342     		cmp	r3, r2
 3539 03c4 03DD     		ble	.L231
1190:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3540              		.loc 1 1190 0
 3541 03c6 644B     		ldr	r3, .L261+28
 3542 03c8 644A     		ldr	r2, .L261+32
 3543 03ca 1A60     		str	r2, [r3]
 3544 03cc 07E0     		b	.L232
 3545              	.L231:
1191:..\src/interruptions.c ****                 else {
1192:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3546              		.loc 1 1192 0
 3547 03ce 624B     		ldr	r3, .L261+28
 3548 03d0 1B68     		ldr	r3, [r3]
 3549 03d2 634A     		ldr	r2, .L261+36
 3550 03d4 9342     		cmp	r3, r2
 3551 03d6 02DA     		bge	.L232
1193:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3552              		.loc 1 1193 0
 3553 03d8 5F4B     		ldr	r3, .L261+28
 3554 03da 614A     		ldr	r2, .L261+36
 3555 03dc 1A60     		str	r2, [r3]
 3556              	.L232:
1194:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 86


1195:..\src/interruptions.c **** 
1196:..\src/interruptions.c ****                 pwm_input = 0;
 3557              		.loc 1 1196 0
 3558 03de 0023     		movs	r3, #0
 3559 03e0 FB64     		str	r3, [r7, #76]
1197:..\src/interruptions.c **** 
1198:..\src/interruptions.c ****                 // Proportional
1199:..\src/interruptions.c ****                 if (k_p_c != 0)
 3560              		.loc 1 1199 0
 3561 03e2 FB6A     		ldr	r3, [r7, #44]
 3562 03e4 002B     		cmp	r3, #0
 3563 03e6 07D0     		beq	.L233
1200:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3564              		.loc 1 1200 0
 3565 03e8 FB6A     		ldr	r3, [r7, #44]
 3566 03ea 7A68     		ldr	r2, [r7, #4]
 3567 03ec 02FB03F3 		mul	r3, r2, r3
 3568 03f0 1B14     		asrs	r3, r3, #16
 3569 03f2 FA6C     		ldr	r2, [r7, #76]
 3570 03f4 1344     		add	r3, r3, r2
 3571 03f6 FB64     		str	r3, [r7, #76]
 3572              	.L233:
1201:..\src/interruptions.c **** 
1202:..\src/interruptions.c ****                 // Integral
1203:..\src/interruptions.c ****                 if (k_i_c != 0)
 3573              		.loc 1 1203 0
 3574 03f8 BB6A     		ldr	r3, [r7, #40]
 3575 03fa 002B     		cmp	r3, #0
 3576 03fc 08D0     		beq	.L234
1204:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3577              		.loc 1 1204 0
 3578 03fe 564B     		ldr	r3, .L261+28
 3579 0400 1B68     		ldr	r3, [r3]
 3580 0402 BA6A     		ldr	r2, [r7, #40]
 3581 0404 02FB03F3 		mul	r3, r2, r3
 3582 0408 1B14     		asrs	r3, r3, #16
 3583 040a FA6C     		ldr	r2, [r7, #76]
 3584 040c 1344     		add	r3, r3, r2
 3585 040e FB64     		str	r3, [r7, #76]
 3586              	.L234:
1205:..\src/interruptions.c **** 
1206:..\src/interruptions.c ****                 // Derivative
1207:..\src/interruptions.c ****                 if (k_d_c != 0)
 3587              		.loc 1 1207 0
 3588 0410 7B6A     		ldr	r3, [r7, #36]
 3589 0412 002B     		cmp	r3, #0
 3590 0414 0AD0     		beq	.L235
1208:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3591              		.loc 1 1208 0
 3592 0416 534B     		ldr	r3, .L261+40
 3593 0418 1B68     		ldr	r3, [r3]
 3594 041a 7A68     		ldr	r2, [r7, #4]
 3595 041c D31A     		subs	r3, r2, r3
 3596 041e 7A6A     		ldr	r2, [r7, #36]
 3597 0420 02FB03F3 		mul	r3, r2, r3
 3598 0424 1B14     		asrs	r3, r3, #16
 3599 0426 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 87


 3600 0428 1344     		add	r3, r3, r2
 3601 042a FB64     		str	r3, [r7, #76]
 3602              	.L235:
1209:..\src/interruptions.c ****                 
1210:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3603              		.loc 1 1210 0
 3604 042c 4D4A     		ldr	r2, .L261+40
 3605 042e 7B68     		ldr	r3, [r7, #4]
 3606 0430 1360     		str	r3, [r2]
1211:..\src/interruptions.c ****                 
1212:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3607              		.loc 1 1212 0
 3608 0432 FB6C     		ldr	r3, [r7, #76]
 3609 0434 002B     		cmp	r3, #0
 3610 0436 03DB     		blt	.L236
1213:..\src/interruptions.c ****                     motor_dir = TRUE;
 3611              		.loc 1 1213 0
 3612 0438 434B     		ldr	r3, .L261+12
 3613 043a 0122     		movs	r2, #1
 3614 043c 1A70     		strb	r2, [r3]
1214:..\src/interruptions.c ****                 else
1215:..\src/interruptions.c ****                     motor_dir = FALSE;
1216:..\src/interruptions.c ****             }
1217:..\src/interruptions.c ****         break;
 3615              		.loc 1 1217 0
 3616 043e 23E0     		b	.L257
 3617              	.L236:
1215:..\src/interruptions.c ****             }
 3618              		.loc 1 1215 0
 3619 0440 414B     		ldr	r3, .L261+12
 3620 0442 0022     		movs	r2, #0
 3621 0444 1A70     		strb	r2, [r3]
 3622              		.loc 1 1217 0
 3623 0446 1FE0     		b	.L257
 3624              	.L202:
1218:..\src/interruptions.c ****         
1219:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1220:..\src/interruptions.c ****         case CONTROL_PWM:
1221:..\src/interruptions.c **** 
1222:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3625              		.loc 1 1222 0
 3626 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3627 044c 3F4A     		ldr	r2, .L261+16
 3628 044e 1B01     		lsls	r3, r3, #4
 3629 0450 1344     		add	r3, r3, r2
 3630 0452 0833     		adds	r3, r3, #8
 3631 0454 1B68     		ldr	r3, [r3]
 3632 0456 FB64     		str	r3, [r7, #76]
1223:..\src/interruptions.c **** 
1224:..\src/interruptions.c ****             if (pwm_input > 0) 
 3633              		.loc 1 1224 0
 3634 0458 FB6C     		ldr	r3, [r7, #76]
 3635 045a 002B     		cmp	r3, #0
 3636 045c 03DD     		ble	.L237
1225:..\src/interruptions.c ****                 motor_dir = TRUE;
 3637              		.loc 1 1225 0
 3638 045e 3A4B     		ldr	r3, .L261+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 88


 3639 0460 0122     		movs	r2, #1
 3640 0462 1A70     		strb	r2, [r3]
 3641 0464 02E0     		b	.L238
 3642              	.L237:
1226:..\src/interruptions.c ****             else 
1227:..\src/interruptions.c ****                 motor_dir = FALSE;
 3643              		.loc 1 1227 0
 3644 0466 384B     		ldr	r3, .L261+12
 3645 0468 0022     		movs	r2, #0
 3646 046a 1A70     		strb	r2, [r3]
 3647              	.L238:
1228:..\src/interruptions.c ****             
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****             // pwm_input saturation
1231:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3648              		.loc 1 1231 0
 3649 046c FB6C     		ldr	r3, [r7, #76]
 3650 046e 13F1640F 		cmn	r3, #100
 3651 0472 03DA     		bge	.L239
1232:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3652              		.loc 1 1232 0
 3653 0474 6FF06303 		mvn	r3, #99
 3654 0478 FB64     		str	r3, [r7, #76]
1233:..\src/interruptions.c ****             else {
1234:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1235:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1236:..\src/interruptions.c ****         	}
1237:..\src/interruptions.c **** 
1238:..\src/interruptions.c ****         break;
 3655              		.loc 1 1238 0
 3656 047a 07E0     		b	.L258
 3657              	.L239:
1234:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 3658              		.loc 1 1234 0
 3659 047c FB6C     		ldr	r3, [r7, #76]
 3660 047e 642B     		cmp	r3, #100
 3661 0480 04DD     		ble	.L258
1235:..\src/interruptions.c ****         	}
 3662              		.loc 1 1235 0
 3663 0482 6423     		movs	r3, #100
 3664 0484 FB64     		str	r3, [r7, #76]
 3665              		.loc 1 1238 0
 3666 0486 01E0     		b	.L258
 3667              	.L257:
1217:..\src/interruptions.c ****         
 3668              		.loc 1 1217 0
 3669 0488 00BF     		nop
 3670 048a 00E0     		b	.L199
 3671              	.L258:
 3672              		.loc 1 1238 0
 3673 048c 00BF     		nop
 3674              	.L199:
1239:..\src/interruptions.c ****             
1240:..\src/interruptions.c ****     }
1241:..\src/interruptions.c **** 
1242:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1243:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 89


1244:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3675              		.loc 1 1244 0
 3676 048e FB6C     		ldr	r3, [r7, #76]
 3677 0490 642B     		cmp	r3, #100
 3678 0492 01DD     		ble	.L241
1245:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3679              		.loc 1 1245 0
 3680 0494 6423     		movs	r3, #100
 3681 0496 FB64     		str	r3, [r7, #76]
 3682              	.L241:
1246:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3683              		.loc 1 1246 0
 3684 0498 FB6C     		ldr	r3, [r7, #76]
 3685 049a 13F1640F 		cmn	r3, #100
 3686 049e 02DA     		bge	.L242
1247:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3687              		.loc 1 1247 0
 3688 04a0 6FF06303 		mvn	r3, #99
 3689 04a4 FB64     		str	r3, [r7, #76]
 3690              	.L242:
1248:..\src/interruptions.c **** 
1249:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3691              		.loc 1 1249 0
 3692 04a6 3B6C     		ldr	r3, [r7, #64]
 3693 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3694 04ac 012B     		cmp	r3, #1
 3695 04ae 0DD0     		beq	.L243
1250:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 3696              		.loc 1 1250 0
 3697 04b0 FB6C     		ldr	r3, [r7, #76]
 3698 04b2 9B02     		lsls	r3, r3, #10
 3699 04b4 2C4A     		ldr	r2, .L261+44
 3700 04b6 82FB0312 		smull	r1, r2, r2, r3
 3701 04ba 5211     		asrs	r2, r2, #5
 3702 04bc DB17     		asrs	r3, r3, #31
 3703 04be D31A     		subs	r3, r2, r3
 3704 04c0 2A4A     		ldr	r2, .L261+48
 3705 04c2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3706 04c4 02FB03F3 		mul	r3, r2, r3
 3707 04c8 9B12     		asrs	r3, r3, #10
 3708 04ca FB64     		str	r3, [r7, #76]
 3709              	.L243:
1251:..\src/interruptions.c ****  
1252:..\src/interruptions.c ****     //// RATE LIMITER ////
1253:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3710              		.loc 1 1253 0
 3711 04cc 284B     		ldr	r3, .L261+52
 3712 04ce 1B68     		ldr	r3, [r3]
 3713 04d0 FA6C     		ldr	r2, [r7, #76]
 3714 04d2 D31A     		subs	r3, r2, r3
 3715 04d4 3A6C     		ldr	r2, [r7, #64]
 3716 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3717 04da 9342     		cmp	r3, r2
 3718 04dc 08DD     		ble	.L244
1254:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3719              		.loc 1 1254 0
 3720 04de 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 90


 3721 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3722 04e4 1A46     		mov	r2, r3
 3723 04e6 224B     		ldr	r3, .L261+52
 3724 04e8 1B68     		ldr	r3, [r3]
 3725 04ea 1344     		add	r3, r3, r2
 3726 04ec FB64     		str	r3, [r7, #76]
 3727 04ee 10E0     		b	.L245
 3728              	.L244:
1255:..\src/interruptions.c ****     }
1256:..\src/interruptions.c ****     else {
1257:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3729              		.loc 1 1257 0
 3730 04f0 1F4B     		ldr	r3, .L261+52
 3731 04f2 1B68     		ldr	r3, [r3]
 3732 04f4 FA6C     		ldr	r2, [r7, #76]
 3733 04f6 D21A     		subs	r2, r2, r3
 3734 04f8 3B6C     		ldr	r3, [r7, #64]
 3735 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3736 04fe 5B42     		negs	r3, r3
 3737 0500 9A42     		cmp	r2, r3
 3738 0502 06DA     		bge	.L245
1258:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3739              		.loc 1 1258 0
 3740 0504 1A4B     		ldr	r3, .L261+52
 3741 0506 1B68     		ldr	r3, [r3]
 3742 0508 3A6C     		ldr	r2, [r7, #64]
 3743 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3744 050e 9B1A     		subs	r3, r3, r2
 3745 0510 FB64     		str	r3, [r7, #76]
 3746              	.L245:
1259:..\src/interruptions.c ****     }
1260:..\src/interruptions.c ****     
1261:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3747              		.loc 1 1261 0
 3748 0512 FB6C     		ldr	r3, [r7, #76]
 3749 0514 642B     		cmp	r3, #100
 3750 0516 01DD     		ble	.L246
1262:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3751              		.loc 1 1262 0
 3752 0518 6423     		movs	r3, #100
 3753 051a FB64     		str	r3, [r7, #76]
 3754              	.L246:
1263:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3755              		.loc 1 1263 0
 3756 051c FB6C     		ldr	r3, [r7, #76]
 3757 051e 13F1640F 		cmn	r3, #100
 3758 0522 02DA     		bge	.L247
1264:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3759              		.loc 1 1264 0
 3760 0524 6FF06303 		mvn	r3, #99
 3761 0528 FB64     		str	r3, [r7, #76]
 3762              	.L247:
1265:..\src/interruptions.c ****     
1266:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3763              		.loc 1 1266 0
 3764 052a 114A     		ldr	r2, .L261+52
 3765 052c FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 91


 3766 052e 1360     		str	r3, [r2]
1267:..\src/interruptions.c **** 	
1268:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 3767              		.loc 1 1268 0
 3768 0530 FB6C     		ldr	r3, [r7, #76]
 3769 0532 002B     		cmp	r3, #0
 3770 0534 1EDB     		blt	.L248
 3771              		.loc 1 1268 0 is_stmt 0 discriminator 1
 3772 0536 0122     		movs	r2, #1
 3773 0538 1EE0     		b	.L249
 3774              	.L262:
 3775 053a 00BF     		.align	2
 3776              	.L261:
 3777 053c 90000000 		.word	pos_error_sum.10555
 3778 0540 18FCFFFF 		.word	-1000
 3779 0544 94000000 		.word	prev_pos_err.10557
 3780 0548 98000000 		.word	motor_dir.10560
 3781 054c 00000000 		.word	g_ref
 3782 0550 00000000 		.word	tension_valid
 3783 0554 00000000 		.word	g_meas
 3784 0558 9C000000 		.word	curr_error_sum.10556
 3785 055c A0860100 		.word	100000
 3786 0560 6079FEFF 		.word	-100000
 3787 0564 A0000000 		.word	prev_curr_err.10558
 3788 0568 1F85EB51 		.word	1374389535
 3789 056c 00000000 		.word	dev_pwm_limit
 3790 0570 A4000000 		.word	prev_pwm.10559
 3791              	.L248:
 3792              		.loc 1 1268 0 discriminator 2
 3793 0574 4FF0FF32 		mov	r2, #-1
 3794              	.L249:
 3795              		.loc 1 1268 0 discriminator 4
 3796 0578 5A4B     		ldr	r3, .L263
 3797 057a 1A70     		strb	r2, [r3]
1269:..\src/interruptions.c ****     
1270:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3798              		.loc 1 1270 0 is_stmt 1 discriminator 4
 3799 057c 3B6C     		ldr	r3, [r7, #64]
 3800 057e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3801 0582 012B     		cmp	r3, #1
 3802 0584 40F09680 		bne	.L250
1271:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1272:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3803              		.loc 1 1272 0
 3804 0588 3B6C     		ldr	r3, [r7, #64]
 3805 058a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3806 058e 012B     		cmp	r3, #1
 3807 0590 00F08D80 		beq	.L251
 3808              		.loc 1 1272 0 is_stmt 0 discriminator 1
 3809 0594 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3810 0598 534A     		ldr	r2, .L263+4
 3811 059a 3421     		movs	r1, #52
 3812 059c 01FB03F3 		mul	r3, r1, r3
 3813 05a0 1344     		add	r3, r3, r2
 3814 05a2 1A68     		ldr	r2, [r3]
 3815 05a4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3816 05a8 5049     		ldr	r1, .L263+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 92


 3817 05aa 3420     		movs	r0, #52
 3818 05ac 00FB03F3 		mul	r3, r0, r3
 3819 05b0 0B44     		add	r3, r3, r1
 3820 05b2 1B68     		ldr	r3, [r3]
 3821 05b4 D31A     		subs	r3, r2, r3
 3822 05b6 312B     		cmp	r3, #49
 3823 05b8 79DC     		bgt	.L251
1273:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3824              		.loc 1 1273 0 is_stmt 1 discriminator 2
 3825 05ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3826 05be 4A4A     		ldr	r2, .L263+4
 3827 05c0 3421     		movs	r1, #52
 3828 05c2 01FB03F3 		mul	r3, r1, r3
 3829 05c6 1344     		add	r3, r3, r2
 3830 05c8 1A68     		ldr	r2, [r3]
 3831 05ca 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3832 05ce 4749     		ldr	r1, .L263+8
 3833 05d0 3420     		movs	r0, #52
 3834 05d2 00FB03F3 		mul	r3, r0, r3
 3835 05d6 0B44     		add	r3, r3, r1
 3836 05d8 1B68     		ldr	r3, [r3]
 3837 05da D31A     		subs	r3, r2, r3
1272:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3838              		.loc 1 1272 0 discriminator 2
 3839 05dc 13F1310F 		cmn	r3, #49
 3840 05e0 65DB     		blt	.L251
1274:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3841              		.loc 1 1274 0
 3842 05e2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3843 05e6 424A     		ldr	r2, .L263+12
 3844 05e8 1B01     		lsls	r3, r3, #4
 3845 05ea 1344     		add	r3, r3, r2
 3846 05ec 1A68     		ldr	r2, [r3]
 3847 05ee 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3848 05f2 4049     		ldr	r1, .L263+16
 3849 05f4 1B01     		lsls	r3, r3, #4
 3850 05f6 0B44     		add	r3, r3, r1
 3851 05f8 1B68     		ldr	r3, [r3]
 3852 05fa D31A     		subs	r3, r2, r3
1273:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3853              		.loc 1 1273 0
 3854 05fc 632B     		cmp	r3, #99
 3855 05fe 56DC     		bgt	.L251
 3856              		.loc 1 1274 0
 3857 0600 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3858 0604 3A4A     		ldr	r2, .L263+12
 3859 0606 1B01     		lsls	r3, r3, #4
 3860 0608 1344     		add	r3, r3, r2
 3861 060a 1A68     		ldr	r2, [r3]
 3862 060c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3863 0610 3849     		ldr	r1, .L263+16
 3864 0612 1B01     		lsls	r3, r3, #4
 3865 0614 0B44     		add	r3, r3, r1
 3866 0616 1B68     		ldr	r3, [r3]
 3867 0618 D31A     		subs	r3, r2, r3
 3868 061a 13F1630F 		cmn	r3, #99
 3869 061e 46DB     		blt	.L251
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 93


1275:..\src/interruptions.c ****             position_counter++;
 3870              		.loc 1 1275 0
 3871 0620 354B     		ldr	r3, .L263+20
 3872 0622 1B68     		ldr	r3, [r3]
 3873 0624 0133     		adds	r3, r3, #1
 3874 0626 344A     		ldr	r2, .L263+20
 3875 0628 1360     		str	r3, [r2]
1276:..\src/interruptions.c ****             
1277:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3876              		.loc 1 1277 0
 3877 062a 334B     		ldr	r3, .L263+20
 3878 062c 1B68     		ldr	r3, [r3]
 3879 062e F92B     		cmp	r3, #249
 3880 0630 40D9     		bls	.L250
1278:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3881              		.loc 1 1278 0
 3882 0632 3B6C     		ldr	r3, [r7, #64]
 3883 0634 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3884 0638 002B     		cmp	r3, #0
 3885 063a 11D1     		bne	.L253
 3886              		.loc 1 1278 0 is_stmt 0 discriminator 1
 3887 063c 2F4B     		ldr	r3, .L263+24
 3888 063e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3889 0640 002B     		cmp	r3, #0
 3890 0642 0DD1     		bne	.L253
1279:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3891              		.loc 1 1279 0 is_stmt 1
 3892 0644 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3893 0648 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3894 064c 2749     		ldr	r1, .L263+8
 3895 064e 3420     		movs	r0, #52
 3896 0650 00FB02F2 		mul	r2, r0, r2
 3897 0654 0A44     		add	r2, r2, r1
 3898 0656 1268     		ldr	r2, [r2]
 3899 0658 2949     		ldr	r1, .L263+28
 3900 065a 1B01     		lsls	r3, r3, #4
 3901 065c 0B44     		add	r3, r3, r1
 3902 065e 1A60     		str	r2, [r3]
 3903              	.L253:
1280:..\src/interruptions.c ****                 }
1281:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3904              		.loc 1 1281 0
 3905 0660 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3906 0664 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3907 0668 2049     		ldr	r1, .L263+8
 3908 066a 3420     		movs	r0, #52
 3909 066c 00FB02F2 		mul	r2, r0, r2
 3910 0670 0A44     		add	r2, r2, r1
 3911 0672 1268     		ldr	r2, [r2]
 3912 0674 1F49     		ldr	r1, .L263+16
 3913 0676 1B01     		lsls	r3, r3, #4
 3914 0678 0B44     		add	r3, r3, r1
 3915 067a 1A60     		str	r2, [r3]
1282:..\src/interruptions.c ****                 
1283:..\src/interruptions.c ****                 if (position_counter == 250){
 3916              		.loc 1 1283 0
 3917 067c 1E4B     		ldr	r3, .L263+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 94


 3918 067e 1B68     		ldr	r3, [r3]
 3919 0680 FA2B     		cmp	r3, #250
 3920 0682 11D1     		bne	.L254
1284:..\src/interruptions.c ****                     // To do only once
1285:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3921              		.loc 1 1285 0
 3922 0684 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3923 0688 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3924 068c 1749     		ldr	r1, .L263+8
 3925 068e 3420     		movs	r0, #52
 3926 0690 00FB02F2 		mul	r2, r0, r2
 3927 0694 0A44     		add	r2, r2, r1
 3928 0696 0C32     		adds	r2, r2, #12
 3929 0698 1268     		ldr	r2, [r2]
 3930 069a 1449     		ldr	r1, .L263+8
 3931 069c 3420     		movs	r0, #52
 3932 069e 00FB03F3 		mul	r3, r0, r3
 3933 06a2 0B44     		add	r3, r3, r1
 3934 06a4 1433     		adds	r3, r3, #20
 3935 06a6 1A60     		str	r2, [r3]
 3936              	.L254:
1286:..\src/interruptions.c ****                 }
1287:..\src/interruptions.c ****                 pwm_input = 0;            
 3937              		.loc 1 1287 0
 3938 06a8 0023     		movs	r3, #0
 3939 06aa FB64     		str	r3, [r7, #76]
1277:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3940              		.loc 1 1277 0
 3941 06ac 02E0     		b	.L250
 3942              	.L251:
1288:..\src/interruptions.c ****             }
1289:..\src/interruptions.c ****         }
1290:..\src/interruptions.c ****         else {
1291:..\src/interruptions.c ****             position_counter = 0;
 3943              		.loc 1 1291 0
 3944 06ae 124B     		ldr	r3, .L263+20
 3945 06b0 0022     		movs	r2, #0
 3946 06b2 1A60     		str	r2, [r3]
 3947              	.L250:
1292:..\src/interruptions.c ****         }
1293:..\src/interruptions.c ****     }
1294:..\src/interruptions.c ****     
1295:..\src/interruptions.c ****     if (motor_dir)
 3948              		.loc 1 1295 0
 3949 06b4 134B     		ldr	r3, .L263+32
 3950 06b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3951 06b8 002B     		cmp	r3, #0
 3952 06ba 03D0     		beq	.L255
1296:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3953              		.loc 1 1296 0
 3954 06bc 0120     		movs	r0, #1
 3955 06be FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3956 06c2 02E0     		b	.L256
 3957              	.L255:
1297:..\src/interruptions.c ****     else
1298:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 3958              		.loc 1 1298 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 95


 3959 06c4 0020     		movs	r0, #0
 3960 06c6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3961              	.L256:
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3962              		.loc 1 1300 0
 3963 06ca FB6C     		ldr	r3, [r7, #76]
 3964 06cc 002B     		cmp	r3, #0
 3965 06ce B8BF     		it	lt
 3966 06d0 5B42     		rsblt	r3, r3, #0
 3967 06d2 DBB2     		uxtb	r3, r3
 3968 06d4 1846     		mov	r0, r3
 3969 06d6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1301:..\src/interruptions.c **** }
 3970              		.loc 1 1301 0
 3971 06da 00BF     		nop
 3972 06dc 5037     		adds	r7, r7, #80
 3973              		.cfi_def_cfa_offset 8
 3974 06de BD46     		mov	sp, r7
 3975              		.cfi_def_cfa_register 13
 3976              		@ sp needed
 3977 06e0 80BD     		pop	{r7, pc}
 3978              	.L264:
 3979 06e2 00BF     		.align	2
 3980              	.L263:
 3981 06e4 00000000 		.word	pwm_sign
 3982 06e8 00000000 		.word	g_measOld
 3983 06ec 00000000 		.word	g_meas
 3984 06f0 00000000 		.word	g_refOld
 3985 06f4 00000000 		.word	g_ref
 3986 06f8 A8000000 		.word	position_counter.10561
 3987 06fc 00000000 		.word	change_ext_ref_flag
 3988 0700 00000000 		.word	g_refNew
 3989 0704 98000000 		.word	motor_dir.10560
 3990              		.cfi_endproc
 3991              	.LFE71:
 3992              		.size	motor_control_SH, .-motor_control_SH
 3993              		.section	.text.motor_control_generic,"ax",%progbits
 3994              		.align	2
 3995              		.global	motor_control_generic
 3996              		.thumb
 3997              		.thumb_func
 3998              		.type	motor_control_generic, %function
 3999              	motor_control_generic:
 4000              	.LFB72:
1302:..\src/interruptions.c **** 
1303:..\src/interruptions.c **** //==============================================================================
1304:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1305:..\src/interruptions.c **** //==============================================================================
1306:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4001              		.loc 1 1306 0
 4002              		.cfi_startproc
 4003              		@ args = 0, pretend = 0, frame = 80
 4004              		@ frame_needed = 1, uses_anonymous_args = 0
 4005 0000 90B5     		push	{r4, r7, lr}
 4006              		.cfi_def_cfa_offset 12
 4007              		.cfi_offset 4, -12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 96


 4008              		.cfi_offset 7, -8
 4009              		.cfi_offset 14, -4
 4010 0002 95B0     		sub	sp, sp, #84
 4011              		.cfi_def_cfa_offset 96
 4012 0004 00AF     		add	r7, sp, #0
 4013              		.cfi_def_cfa_register 7
 4014 0006 0346     		mov	r3, r0
 4015 0008 FB71     		strb	r3, [r7, #7]
1307:..\src/interruptions.c ****     
1308:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4016              		.loc 1 1308 0
 4017 000a 0023     		movs	r3, #0
 4018 000c FB64     		str	r3, [r7, #76]
1309:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1310:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1311:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1312:..\src/interruptions.c **** 
1313:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4019              		.loc 1 1313 0
 4020 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4021 0010 1346     		mov	r3, r2
 4022 0012 DB00     		lsls	r3, r3, #3
 4023 0014 9B1A     		subs	r3, r3, r2
 4024 0016 1B01     		lsls	r3, r3, #4
 4025 0018 B033     		adds	r3, r3, #176
 4026 001a 9C4A     		ldr	r2, .L337
 4027 001c 1344     		add	r3, r3, r2
 4028 001e 7B64     		str	r3, [r7, #68]
1314:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4029              		.loc 1 1314 0
 4030 0020 7B6C     		ldr	r3, [r7, #68]
 4031 0022 93F86030 		ldrb	r3, [r3, #96]
 4032 0026 87F84330 		strb	r3, [r7, #67]
1315:..\src/interruptions.c ****     
1316:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4033              		.loc 1 1316 0
 4034 002a 7B6C     		ldr	r3, [r7, #68]
 4035 002c 1B68     		ldr	r3, [r3]
 4036 002e FB63     		str	r3, [r7, #60]
1317:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4037              		.loc 1 1317 0
 4038 0030 7B6C     		ldr	r3, [r7, #68]
 4039 0032 5B68     		ldr	r3, [r3, #4]
 4040 0034 BB63     		str	r3, [r7, #56]
1318:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4041              		.loc 1 1318 0
 4042 0036 7B6C     		ldr	r3, [r7, #68]
 4043 0038 9B68     		ldr	r3, [r3, #8]
 4044 003a 7B63     		str	r3, [r7, #52]
1319:..\src/interruptions.c **** 
1320:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4045              		.loc 1 1320 0
 4046 003c 7B6C     		ldr	r3, [r7, #68]
 4047 003e DB68     		ldr	r3, [r3, #12]
 4048 0040 3B63     		str	r3, [r7, #48]
1321:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4049              		.loc 1 1321 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 97


 4050 0042 7B6C     		ldr	r3, [r7, #68]
 4051 0044 1B69     		ldr	r3, [r3, #16]
 4052 0046 FB62     		str	r3, [r7, #44]
1322:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4053              		.loc 1 1322 0
 4054 0048 7B6C     		ldr	r3, [r7, #68]
 4055 004a 5B69     		ldr	r3, [r3, #20]
 4056 004c BB62     		str	r3, [r7, #40]
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4057              		.loc 1 1324 0
 4058 004e 7B6C     		ldr	r3, [r7, #68]
 4059 0050 9B69     		ldr	r3, [r3, #24]
 4060 0052 7B62     		str	r3, [r7, #36]
1325:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4061              		.loc 1 1325 0
 4062 0054 7B6C     		ldr	r3, [r7, #68]
 4063 0056 DB69     		ldr	r3, [r3, #28]
 4064 0058 3B62     		str	r3, [r7, #32]
1326:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4065              		.loc 1 1326 0
 4066 005a 7B6C     		ldr	r3, [r7, #68]
 4067 005c 1B6A     		ldr	r3, [r3, #32]
 4068 005e FB61     		str	r3, [r7, #28]
1327:..\src/interruptions.c ****     
1328:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4069              		.loc 1 1328 0
 4070 0060 7B6C     		ldr	r3, [r7, #68]
 4071 0062 5B6A     		ldr	r3, [r3, #36]
 4072 0064 BB61     		str	r3, [r7, #24]
1329:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4073              		.loc 1 1329 0
 4074 0066 7B6C     		ldr	r3, [r7, #68]
 4075 0068 9B6A     		ldr	r3, [r3, #40]
 4076 006a 7B61     		str	r3, [r7, #20]
1330:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4077              		.loc 1 1330 0
 4078 006c 7B6C     		ldr	r3, [r7, #68]
 4079 006e DB6A     		ldr	r3, [r3, #44]
 4080 0070 3B61     		str	r3, [r7, #16]
1331:..\src/interruptions.c **** 
1332:..\src/interruptions.c ****     // Static Variables
1333:..\src/interruptions.c **** 
1334:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1335:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1336:..\src/interruptions.c ****     
1337:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1338:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1339:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1340:..\src/interruptions.c **** 
1341:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1342:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1345:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4081              		.loc 1 1345 0
 4082 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 98


 4083 0074 1B01     		lsls	r3, r3, #4
 4084 0076 864A     		ldr	r2, .L337+4
 4085 0078 9918     		adds	r1, r3, r2
 4086 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4087 007c 1B01     		lsls	r3, r3, #4
 4088 007e 854A     		ldr	r2, .L337+8
 4089 0080 1A44     		add	r2, r2, r3
 4090 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4091 0084 1846     		mov	r0, r3
 4092 0086 FFF7FEFF 		bl	compute_reference
1346:..\src/interruptions.c ****     
1347:..\src/interruptions.c ****    
1348:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4093              		.loc 1 1348 0
 4094 008a 7B6C     		ldr	r3, [r7, #68]
 4095 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4096 0090 032B     		cmp	r3, #3
 4097 0092 00F25482 		bhi	.L266
 4098 0096 01A2     		adr	r2, .L268
 4099 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4100              		.p2align 2
 4101              	.L268:
 4102 009c C1020000 		.word	.L267+1
 4103 00a0 CB040000 		.word	.L269+1
 4104 00a4 99030000 		.word	.L270+1
 4105 00a8 AD000000 		.word	.L271+1
 4106              		.p2align 1
 4107              	.L271:
1349:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1350:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1351:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4108              		.loc 1 1351 0
 4109 00ac 784B     		ldr	r3, .L337+4
 4110 00ae 1A68     		ldr	r2, [r3]
 4111 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4112 00b4 7849     		ldr	r1, .L337+12
 4113 00b6 3420     		movs	r0, #52
 4114 00b8 00FB03F3 		mul	r3, r0, r3
 4115 00bc 0B44     		add	r3, r3, r1
 4116 00be 1B68     		ldr	r3, [r3]
 4117 00c0 D31A     		subs	r3, r2, r3
 4118 00c2 FB60     		str	r3, [r7, #12]
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4119              		.loc 1 1353 0
 4120 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4121 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4122 00c8 7449     		ldr	r1, .L337+16
 4123 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4124 00ce FA68     		ldr	r2, [r7, #12]
 4125 00d0 0A44     		add	r2, r2, r1
 4126 00d2 7249     		ldr	r1, .L337+16
 4127 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1354:..\src/interruptions.c **** 
1355:..\src/interruptions.c ****             // error_sum saturation
1356:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4128              		.loc 1 1356 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 99


 4129 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4130 00da 704A     		ldr	r2, .L337+16
 4131 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4132 00e0 6F4A     		ldr	r2, .L337+20
 4133 00e2 9342     		cmp	r3, r2
 4134 00e4 05DD     		ble	.L272
1357:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4135              		.loc 1 1357 0
 4136 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4137 00e8 6C4A     		ldr	r2, .L337+16
 4138 00ea 6D49     		ldr	r1, .L337+20
 4139 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4140 00f0 0BE0     		b	.L273
 4141              	.L272:
1358:..\src/interruptions.c ****             else {
1359:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4142              		.loc 1 1359 0
 4143 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4144 00f4 694A     		ldr	r2, .L337+16
 4145 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4146 00fa 6A4A     		ldr	r2, .L337+24
 4147 00fc 9342     		cmp	r3, r2
 4148 00fe 04DA     		bge	.L273
1360:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4149              		.loc 1 1360 0
 4150 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4151 0102 664A     		ldr	r2, .L337+16
 4152 0104 6749     		ldr	r1, .L337+24
 4153 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4154              	.L273:
1361:..\src/interruptions.c ****             }
1362:..\src/interruptions.c ****             
1363:..\src/interruptions.c ****             // ------ position PID control ------
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****             i_ref = 0;
 4155              		.loc 1 1365 0
 4156 010a 0023     		movs	r3, #0
 4157 010c BB64     		str	r3, [r7, #72]
1366:..\src/interruptions.c ****             
1367:..\src/interruptions.c ****             // Proportional
1368:..\src/interruptions.c ****             if (k_p_dl != 0)
 4158              		.loc 1 1368 0
 4159 010e 7B6A     		ldr	r3, [r7, #36]
 4160 0110 002B     		cmp	r3, #0
 4161 0112 07D0     		beq	.L274
1369:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4162              		.loc 1 1369 0
 4163 0114 7B6A     		ldr	r3, [r7, #36]
 4164 0116 FA68     		ldr	r2, [r7, #12]
 4165 0118 02FB03F3 		mul	r3, r2, r3
 4166 011c 1B14     		asrs	r3, r3, #16
 4167 011e BA6C     		ldr	r2, [r7, #72]
 4168 0120 1344     		add	r3, r3, r2
 4169 0122 BB64     		str	r3, [r7, #72]
 4170              	.L274:
1370:..\src/interruptions.c **** 
1371:..\src/interruptions.c ****             // Integral
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 100


1372:..\src/interruptions.c ****             if (k_i_dl != 0)
 4171              		.loc 1 1372 0
 4172 0124 3B6A     		ldr	r3, [r7, #32]
 4173 0126 002B     		cmp	r3, #0
 4174 0128 0AD0     		beq	.L275
1373:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4175              		.loc 1 1373 0
 4176 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4177 012c 5B4A     		ldr	r2, .L337+16
 4178 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4179 0132 3A6A     		ldr	r2, [r7, #32]
 4180 0134 02FB03F3 		mul	r3, r2, r3
 4181 0138 1B14     		asrs	r3, r3, #16
 4182 013a BA6C     		ldr	r2, [r7, #72]
 4183 013c 1344     		add	r3, r3, r2
 4184 013e BB64     		str	r3, [r7, #72]
 4185              	.L275:
1374:..\src/interruptions.c **** 
1375:..\src/interruptions.c ****             // Derivative
1376:..\src/interruptions.c ****             if (k_d_dl != 0)
 4186              		.loc 1 1376 0
 4187 0140 FB69     		ldr	r3, [r7, #28]
 4188 0142 002B     		cmp	r3, #0
 4189 0144 0CD0     		beq	.L276
1377:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4190              		.loc 1 1377 0
 4191 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4192 0148 574A     		ldr	r2, .L337+28
 4193 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4194 014e FA68     		ldr	r2, [r7, #12]
 4195 0150 D31A     		subs	r3, r2, r3
 4196 0152 FA69     		ldr	r2, [r7, #28]
 4197 0154 02FB03F3 		mul	r3, r2, r3
 4198 0158 1B14     		asrs	r3, r3, #16
 4199 015a BA6C     		ldr	r2, [r7, #72]
 4200 015c 1344     		add	r3, r3, r2
 4201 015e BB64     		str	r3, [r7, #72]
 4202              	.L276:
1378:..\src/interruptions.c ****                         
1379:..\src/interruptions.c ****             // Update previous position
1380:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4203              		.loc 1 1380 0
 4204 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4205 0162 5149     		ldr	r1, .L337+28
 4206 0164 FA68     		ldr	r2, [r7, #12]
 4207 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1381:..\src/interruptions.c **** 
1382:..\src/interruptions.c ****             // motor direction depends on i_ref
1383:..\src/interruptions.c ****             if (i_ref >= 0)
 4208              		.loc 1 1383 0
 4209 016a BB6C     		ldr	r3, [r7, #72]
 4210 016c 002B     		cmp	r3, #0
 4211 016e 04DB     		blt	.L277
1384:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4212              		.loc 1 1384 0
 4213 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4214 0172 4E4A     		ldr	r2, .L337+32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 101


 4215 0174 0121     		movs	r1, #1
 4216 0176 D154     		strb	r1, [r2, r3]
 4217 0178 03E0     		b	.L278
 4218              	.L277:
1385:..\src/interruptions.c ****             else
1386:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4219              		.loc 1 1386 0
 4220 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4221 017c 4B4A     		ldr	r2, .L337+32
 4222 017e 0021     		movs	r1, #0
 4223 0180 D154     		strb	r1, [r2, r3]
 4224              	.L278:
1387:..\src/interruptions.c **** 
1388:..\src/interruptions.c ****             // saturate max current
1389:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4225              		.loc 1 1389 0
 4226 0182 7B6C     		ldr	r3, [r7, #68]
 4227 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4228 0188 1A46     		mov	r2, r3
 4229 018a BB6C     		ldr	r3, [r7, #72]
 4230 018c 9A42     		cmp	r2, r3
 4231 018e 04DA     		bge	.L279
1390:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4232              		.loc 1 1390 0
 4233 0190 7B6C     		ldr	r3, [r7, #68]
 4234 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4235 0196 BB64     		str	r3, [r7, #72]
 4236 0198 0BE0     		b	.L280
 4237              	.L279:
1391:..\src/interruptions.c ****             else {
1392:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4238              		.loc 1 1392 0
 4239 019a 7B6C     		ldr	r3, [r7, #68]
 4240 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4241 01a0 5A42     		negs	r2, r3
 4242 01a2 BB6C     		ldr	r3, [r7, #72]
 4243 01a4 9A42     		cmp	r2, r3
 4244 01a6 04DD     		ble	.L280
1393:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4245              		.loc 1 1393 0
 4246 01a8 7B6C     		ldr	r3, [r7, #68]
 4247 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4248 01ae 5B42     		negs	r3, r3
 4249 01b0 BB64     		str	r3, [r7, #72]
 4250              	.L280:
1394:..\src/interruptions.c ****         	}
1395:..\src/interruptions.c **** 
1396:..\src/interruptions.c ****             // current error and curr error sum
1397:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4251              		.loc 1 1397 0
 4252 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4253 01b6 384A     		ldr	r2, .L337+12
 4254 01b8 3421     		movs	r1, #52
 4255 01ba 01FB03F3 		mul	r3, r1, r3
 4256 01be 1344     		add	r3, r3, r2
 4257 01c0 0C33     		adds	r3, r3, #12
 4258 01c2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 102


 4259 01c4 BA6C     		ldr	r2, [r7, #72]
 4260 01c6 D31A     		subs	r3, r2, r3
 4261 01c8 BB60     		str	r3, [r7, #8]
1398:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4262              		.loc 1 1398 0
 4263 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4264 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4265 01ce 3849     		ldr	r1, .L337+36
 4266 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4267 01d4 BA68     		ldr	r2, [r7, #8]
 4268 01d6 0A44     		add	r2, r2, r1
 4269 01d8 3549     		ldr	r1, .L337+36
 4270 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1399:..\src/interruptions.c ****             
1400:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4271              		.loc 1 1400 0
 4272 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4273 01e0 334A     		ldr	r2, .L337+36
 4274 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4275 01e6 334A     		ldr	r2, .L337+40
 4276 01e8 9342     		cmp	r3, r2
 4277 01ea 05DD     		ble	.L281
1401:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4278              		.loc 1 1401 0
 4279 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4280 01ee 304A     		ldr	r2, .L337+36
 4281 01f0 3049     		ldr	r1, .L337+40
 4282 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4283 01f6 0BE0     		b	.L282
 4284              	.L281:
1402:..\src/interruptions.c ****             else {
1403:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4285              		.loc 1 1403 0
 4286 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4287 01fa 2D4A     		ldr	r2, .L337+36
 4288 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4289 0200 2D4A     		ldr	r2, .L337+44
 4290 0202 9342     		cmp	r3, r2
 4291 0204 04DA     		bge	.L282
1404:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4292              		.loc 1 1404 0
 4293 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4294 0208 294A     		ldr	r2, .L337+36
 4295 020a 2B49     		ldr	r1, .L337+44
 4296 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4297              	.L282:
1405:..\src/interruptions.c ****             }
1406:..\src/interruptions.c **** 
1407:..\src/interruptions.c ****             // ----- current PID control -----
1408:..\src/interruptions.c **** 
1409:..\src/interruptions.c ****             pwm_input = 0;
 4298              		.loc 1 1409 0
 4299 0210 0023     		movs	r3, #0
 4300 0212 FB64     		str	r3, [r7, #76]
1410:..\src/interruptions.c **** 
1411:..\src/interruptions.c ****             // Proportional
1412:..\src/interruptions.c ****             if (k_p_c_dl != 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 103


 4301              		.loc 1 1412 0
 4302 0214 BB69     		ldr	r3, [r7, #24]
 4303 0216 002B     		cmp	r3, #0
 4304 0218 07D0     		beq	.L283
1413:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4305              		.loc 1 1413 0
 4306 021a BB69     		ldr	r3, [r7, #24]
 4307 021c BA68     		ldr	r2, [r7, #8]
 4308 021e 02FB03F3 		mul	r3, r2, r3
 4309 0222 1B14     		asrs	r3, r3, #16
 4310 0224 FA6C     		ldr	r2, [r7, #76]
 4311 0226 1344     		add	r3, r3, r2
 4312 0228 FB64     		str	r3, [r7, #76]
 4313              	.L283:
1414:..\src/interruptions.c **** 
1415:..\src/interruptions.c ****             // Integral
1416:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4314              		.loc 1 1416 0
 4315 022a 7B69     		ldr	r3, [r7, #20]
 4316 022c 002B     		cmp	r3, #0
 4317 022e 0AD0     		beq	.L284
1417:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4318              		.loc 1 1417 0
 4319 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4320 0232 1F4A     		ldr	r2, .L337+36
 4321 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4322 0238 7A69     		ldr	r2, [r7, #20]
 4323 023a 02FB03F3 		mul	r3, r2, r3
 4324 023e 1B14     		asrs	r3, r3, #16
 4325 0240 FA6C     		ldr	r2, [r7, #76]
 4326 0242 1344     		add	r3, r3, r2
 4327 0244 FB64     		str	r3, [r7, #76]
 4328              	.L284:
1418:..\src/interruptions.c **** 
1419:..\src/interruptions.c ****             // Derivative
1420:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4329              		.loc 1 1420 0
 4330 0246 3B69     		ldr	r3, [r7, #16]
 4331 0248 002B     		cmp	r3, #0
 4332 024a 0CD0     		beq	.L285
1421:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4333              		.loc 1 1421 0
 4334 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4335 024e 1B4A     		ldr	r2, .L337+48
 4336 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4337 0254 BA68     		ldr	r2, [r7, #8]
 4338 0256 D31A     		subs	r3, r2, r3
 4339 0258 3A69     		ldr	r2, [r7, #16]
 4340 025a 02FB03F3 		mul	r3, r2, r3
 4341 025e 1B14     		asrs	r3, r3, #16
 4342 0260 FA6C     		ldr	r2, [r7, #76]
 4343 0262 1344     		add	r3, r3, r2
 4344 0264 FB64     		str	r3, [r7, #76]
 4345              	.L285:
1422:..\src/interruptions.c **** 
1423:..\src/interruptions.c ****             // pwm_input saturation
1424:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 104


 4346              		.loc 1 1424 0
 4347 0266 FB6C     		ldr	r3, [r7, #76]
 4348 0268 13F1640F 		cmn	r3, #100
 4349 026c 03DA     		bge	.L286
1425:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4350              		.loc 1 1425 0
 4351 026e 6FF06303 		mvn	r3, #99
 4352 0272 FB64     		str	r3, [r7, #76]
 4353 0274 04E0     		b	.L287
 4354              	.L286:
1426:..\src/interruptions.c ****             else {
1427:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 4355              		.loc 1 1427 0
 4356 0276 FB6C     		ldr	r3, [r7, #76]
 4357 0278 642B     		cmp	r3, #100
 4358 027a 01DD     		ble	.L287
1428:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 4359              		.loc 1 1428 0
 4360 027c 6423     		movs	r3, #100
 4361 027e FB64     		str	r3, [r7, #76]
 4362              	.L287:
1429:..\src/interruptions.c ****             }
1430:..\src/interruptions.c **** 
1431:..\src/interruptions.c ****             // Update previous current
1432:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4363              		.loc 1 1432 0
 4364 0280 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4365 0282 0E49     		ldr	r1, .L337+48
 4366 0284 BA68     		ldr	r2, [r7, #8]
 4367 0286 41F82320 		str	r2, [r1, r3, lsl #2]
1433:..\src/interruptions.c **** 
1434:..\src/interruptions.c ****         break;
 4368              		.loc 1 1434 0
 4369 028a 58E1     		b	.L266
 4370              	.L338:
 4371              		.align	2
 4372              	.L337:
 4373 028c 00000000 		.word	c_mem
 4374 0290 00000000 		.word	g_ref
 4375 0294 00000000 		.word	g_refOld
 4376 0298 00000000 		.word	g_meas
 4377 029c AC000000 		.word	pos_error_sum.10588
 4378 02a0 80F0FA02 		.word	50000000
 4379 02a4 800F05FD 		.word	-50000000
 4380 02a8 B4000000 		.word	prev_pos_err.10590
 4381 02ac BC000000 		.word	motor_dir.10593
 4382 02b0 C0000000 		.word	curr_error_sum.10589
 4383 02b4 A0860100 		.word	100000
 4384 02b8 6079FEFF 		.word	-100000
 4385 02bc C8000000 		.word	prev_curr_err.10591
 4386              	.L267:
1435:..\src/interruptions.c **** 
1436:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1437:..\src/interruptions.c ****         case CONTROL_ANGLE:
1438:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4387              		.loc 1 1438 0
 4388 02c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 105


 4389 02c2 934A     		ldr	r2, .L339
 4390 02c4 1B01     		lsls	r3, r3, #4
 4391 02c6 1344     		add	r3, r3, r2
 4392 02c8 1A68     		ldr	r2, [r3]
 4393 02ca 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4394 02ce 9149     		ldr	r1, .L339+4
 4395 02d0 3420     		movs	r0, #52
 4396 02d2 00FB03F3 		mul	r3, r0, r3
 4397 02d6 0B44     		add	r3, r3, r1
 4398 02d8 1B68     		ldr	r3, [r3]
 4399 02da D31A     		subs	r3, r2, r3
 4400 02dc FB60     		str	r3, [r7, #12]
1439:..\src/interruptions.c **** 
1440:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4401              		.loc 1 1440 0
 4402 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4403 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4404 02e2 8D49     		ldr	r1, .L339+8
 4405 02e4 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4406 02e8 FA68     		ldr	r2, [r7, #12]
 4407 02ea 0A44     		add	r2, r2, r1
 4408 02ec 8A49     		ldr	r1, .L339+8
 4409 02ee 41F82320 		str	r2, [r1, r3, lsl #2]
1441:..\src/interruptions.c **** 
1442:..\src/interruptions.c ****             // anti-windup (for integral control)
1443:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4410              		.loc 1 1443 0
 4411 02f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4412 02f4 884A     		ldr	r2, .L339+8
 4413 02f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4414 02fa B3F57A7F 		cmp	r3, #1000
 4415 02fe 06DD     		ble	.L288
1444:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4416              		.loc 1 1444 0
 4417 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4418 0302 854A     		ldr	r2, .L339+8
 4419 0304 4FF47A71 		mov	r1, #1000
 4420 0308 42F82310 		str	r1, [r2, r3, lsl #2]
 4421 030c 0BE0     		b	.L289
 4422              	.L288:
1445:..\src/interruptions.c ****             else {
1446:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4423              		.loc 1 1446 0
 4424 030e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4425 0310 814A     		ldr	r2, .L339+8
 4426 0312 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4427 0316 13F57A7F 		cmn	r3, #1000
 4428 031a 04DA     		bge	.L289
1447:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4429              		.loc 1 1447 0
 4430 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4431 031e 7E4A     		ldr	r2, .L339+8
 4432 0320 7E49     		ldr	r1, .L339+12
 4433 0322 42F82310 		str	r1, [r2, r3, lsl #2]
 4434              	.L289:
1448:..\src/interruptions.c ****             }
1449:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 106


1450:..\src/interruptions.c ****             // Proportional
1451:..\src/interruptions.c ****             if (k_p != 0) 
 4435              		.loc 1 1451 0
 4436 0326 FB6B     		ldr	r3, [r7, #60]
 4437 0328 002B     		cmp	r3, #0
 4438 032a 05D0     		beq	.L290
1452:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4439              		.loc 1 1452 0
 4440 032c FB6B     		ldr	r3, [r7, #60]
 4441 032e FA68     		ldr	r2, [r7, #12]
 4442 0330 02FB03F3 		mul	r3, r2, r3
 4443 0334 1B14     		asrs	r3, r3, #16
 4444 0336 FB64     		str	r3, [r7, #76]
 4445              	.L290:
1453:..\src/interruptions.c ****             
1454:..\src/interruptions.c **** 
1455:..\src/interruptions.c ****             // Integral
1456:..\src/interruptions.c ****             if (k_i != 0) 
 4446              		.loc 1 1456 0
 4447 0338 BB6B     		ldr	r3, [r7, #56]
 4448 033a 002B     		cmp	r3, #0
 4449 033c 0AD0     		beq	.L291
1457:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4450              		.loc 1 1457 0
 4451 033e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4452 0340 754A     		ldr	r2, .L339+8
 4453 0342 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4454 0346 BA6B     		ldr	r2, [r7, #56]
 4455 0348 02FB03F3 		mul	r3, r2, r3
 4456 034c 1B14     		asrs	r3, r3, #16
 4457 034e FA6C     		ldr	r2, [r7, #76]
 4458 0350 1344     		add	r3, r3, r2
 4459 0352 FB64     		str	r3, [r7, #76]
 4460              	.L291:
1458:..\src/interruptions.c ****             
1459:..\src/interruptions.c **** 
1460:..\src/interruptions.c ****             // Derivative
1461:..\src/interruptions.c ****             if (k_d != 0) 
 4461              		.loc 1 1461 0
 4462 0354 7B6B     		ldr	r3, [r7, #52]
 4463 0356 002B     		cmp	r3, #0
 4464 0358 0CD0     		beq	.L292
1462:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4465              		.loc 1 1462 0
 4466 035a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4467 035c 704A     		ldr	r2, .L339+16
 4468 035e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4469 0362 FA68     		ldr	r2, [r7, #12]
 4470 0364 D31A     		subs	r3, r2, r3
 4471 0366 7A6B     		ldr	r2, [r7, #52]
 4472 0368 02FB03F3 		mul	r3, r2, r3
 4473 036c 1B14     		asrs	r3, r3, #16
 4474 036e FA6C     		ldr	r2, [r7, #76]
 4475 0370 1344     		add	r3, r3, r2
 4476 0372 FB64     		str	r3, [r7, #76]
 4477              	.L292:
1463:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 107


1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Update measure
1466:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4478              		.loc 1 1466 0
 4479 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4480 0376 6A49     		ldr	r1, .L339+16
 4481 0378 FA68     		ldr	r2, [r7, #12]
 4482 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1467:..\src/interruptions.c **** 
1468:..\src/interruptions.c ****             if (pwm_input > 0)
 4483              		.loc 1 1468 0
 4484 037e FB6C     		ldr	r3, [r7, #76]
 4485 0380 002B     		cmp	r3, #0
 4486 0382 04DD     		ble	.L293
1469:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4487              		.loc 1 1469 0
 4488 0384 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4489 0386 674A     		ldr	r2, .L339+20
 4490 0388 0121     		movs	r1, #1
 4491 038a D154     		strb	r1, [r2, r3]
1470:..\src/interruptions.c ****             else
1471:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1472:..\src/interruptions.c **** 
1473:..\src/interruptions.c ****         break;
 4492              		.loc 1 1473 0
 4493 038c D7E0     		b	.L266
 4494              	.L293:
1471:..\src/interruptions.c **** 
 4495              		.loc 1 1471 0
 4496 038e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4497 0390 644A     		ldr	r2, .L339+20
 4498 0392 0021     		movs	r1, #0
 4499 0394 D154     		strb	r1, [r2, r3]
 4500              		.loc 1 1473 0
 4501 0396 D2E0     		b	.L266
 4502              	.L270:
1474:..\src/interruptions.c **** 
1475:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1476:..\src/interruptions.c ****         case CONTROL_CURRENT:
1477:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4503              		.loc 1 1477 0
 4504 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4505 039a 5D4A     		ldr	r2, .L339
 4506 039c 1B01     		lsls	r3, r3, #4
 4507 039e 1344     		add	r3, r3, r2
 4508 03a0 0C33     		adds	r3, r3, #12
 4509 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4510 03a4 002B     		cmp	r3, #0
 4511 03a6 00F0B180 		beq	.L334
 4512              		.loc 1 1477 0 is_stmt 0 discriminator 1
 4513 03aa 5F4B     		ldr	r3, .L339+24
 4514 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4515 03ae 002B     		cmp	r3, #0
 4516 03b0 00F0AC80 		beq	.L334
1478:..\src/interruptions.c ****                 
1479:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4517              		.loc 1 1479 0 is_stmt 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 108


 4518 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4519 03b6 564A     		ldr	r2, .L339
 4520 03b8 1B01     		lsls	r3, r3, #4
 4521 03ba 1344     		add	r3, r3, r2
 4522 03bc 0433     		adds	r3, r3, #4
 4523 03be 1B68     		ldr	r3, [r3]
 4524 03c0 BB64     		str	r3, [r7, #72]
1480:..\src/interruptions.c **** 
1481:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4525              		.loc 1 1481 0
 4526 03c2 7B6C     		ldr	r3, [r7, #68]
 4527 03c4 B3F95C30 		ldrsh	r3, [r3, #92]
 4528 03c8 1A46     		mov	r2, r3
 4529 03ca BB6C     		ldr	r3, [r7, #72]
 4530 03cc 9A42     		cmp	r2, r3
 4531 03ce 04DA     		bge	.L296
1482:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4532              		.loc 1 1482 0
 4533 03d0 7B6C     		ldr	r3, [r7, #68]
 4534 03d2 B3F95C30 		ldrsh	r3, [r3, #92]
 4535 03d6 BB64     		str	r3, [r7, #72]
 4536 03d8 0BE0     		b	.L297
 4537              	.L296:
1483:..\src/interruptions.c ****                 else {
1484:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4538              		.loc 1 1484 0
 4539 03da 7B6C     		ldr	r3, [r7, #68]
 4540 03dc B3F95C30 		ldrsh	r3, [r3, #92]
 4541 03e0 5A42     		negs	r2, r3
 4542 03e2 BB6C     		ldr	r3, [r7, #72]
 4543 03e4 9A42     		cmp	r2, r3
 4544 03e6 04DD     		ble	.L297
1485:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4545              		.loc 1 1485 0
 4546 03e8 7B6C     		ldr	r3, [r7, #68]
 4547 03ea B3F95C30 		ldrsh	r3, [r3, #92]
 4548 03ee 5B42     		negs	r3, r3
 4549 03f0 BB64     		str	r3, [r7, #72]
 4550              	.L297:
1486:..\src/interruptions.c ****                 }
1487:..\src/interruptions.c ****                 
1488:..\src/interruptions.c ****                 // current error
1489:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4551              		.loc 1 1489 0
 4552 03f2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4553 03f6 474A     		ldr	r2, .L339+4
 4554 03f8 3421     		movs	r1, #52
 4555 03fa 01FB03F3 		mul	r3, r1, r3
 4556 03fe 1344     		add	r3, r3, r2
 4557 0400 0C33     		adds	r3, r3, #12
 4558 0402 1B68     		ldr	r3, [r3]
 4559 0404 BA6C     		ldr	r2, [r7, #72]
 4560 0406 D31A     		subs	r3, r2, r3
 4561 0408 BB60     		str	r3, [r7, #8]
1490:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4562              		.loc 1 1490 0
 4563 040a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 109


 4564 040c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4565 040e 4749     		ldr	r1, .L339+28
 4566 0410 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4567 0414 BA68     		ldr	r2, [r7, #8]
 4568 0416 0A44     		add	r2, r2, r1
 4569 0418 4449     		ldr	r1, .L339+28
 4570 041a 41F82320 		str	r2, [r1, r3, lsl #2]
1491:..\src/interruptions.c ****                 
1492:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4571              		.loc 1 1492 0
 4572 041e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4573 0420 424A     		ldr	r2, .L339+28
 4574 0422 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4575 0426 424A     		ldr	r2, .L339+32
 4576 0428 9342     		cmp	r3, r2
 4577 042a 05DD     		ble	.L298
1493:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4578              		.loc 1 1493 0
 4579 042c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4580 042e 3F4A     		ldr	r2, .L339+28
 4581 0430 3F49     		ldr	r1, .L339+32
 4582 0432 42F82310 		str	r1, [r2, r3, lsl #2]
 4583 0436 0BE0     		b	.L299
 4584              	.L298:
1494:..\src/interruptions.c ****                 else {
1495:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4585              		.loc 1 1495 0
 4586 0438 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4587 043a 3C4A     		ldr	r2, .L339+28
 4588 043c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4589 0440 3C4A     		ldr	r2, .L339+36
 4590 0442 9342     		cmp	r3, r2
 4591 0444 04DA     		bge	.L299
1496:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4592              		.loc 1 1496 0
 4593 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4594 0448 384A     		ldr	r2, .L339+28
 4595 044a 3A49     		ldr	r1, .L339+36
 4596 044c 42F82310 		str	r1, [r2, r3, lsl #2]
 4597              	.L299:
1497:..\src/interruptions.c ****                 }
1498:..\src/interruptions.c **** 
1499:..\src/interruptions.c ****                 pwm_input = 0;
 4598              		.loc 1 1499 0
 4599 0450 0023     		movs	r3, #0
 4600 0452 FB64     		str	r3, [r7, #76]
1500:..\src/interruptions.c **** 
1501:..\src/interruptions.c ****                 // Proportional
1502:..\src/interruptions.c ****                 if (k_p_c != 0)
 4601              		.loc 1 1502 0
 4602 0454 3B6B     		ldr	r3, [r7, #48]
 4603 0456 002B     		cmp	r3, #0
 4604 0458 07D0     		beq	.L300
1503:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4605              		.loc 1 1503 0
 4606 045a 3B6B     		ldr	r3, [r7, #48]
 4607 045c BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 110


 4608 045e 02FB03F3 		mul	r3, r2, r3
 4609 0462 1B14     		asrs	r3, r3, #16
 4610 0464 FA6C     		ldr	r2, [r7, #76]
 4611 0466 1344     		add	r3, r3, r2
 4612 0468 FB64     		str	r3, [r7, #76]
 4613              	.L300:
1504:..\src/interruptions.c **** 
1505:..\src/interruptions.c ****                 // Integral
1506:..\src/interruptions.c ****                 if (k_i_c != 0)
 4614              		.loc 1 1506 0
 4615 046a FB6A     		ldr	r3, [r7, #44]
 4616 046c 002B     		cmp	r3, #0
 4617 046e 0AD0     		beq	.L301
1507:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4618              		.loc 1 1507 0
 4619 0470 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4620 0472 2E4A     		ldr	r2, .L339+28
 4621 0474 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4622 0478 FA6A     		ldr	r2, [r7, #44]
 4623 047a 02FB03F3 		mul	r3, r2, r3
 4624 047e 1B14     		asrs	r3, r3, #16
 4625 0480 FA6C     		ldr	r2, [r7, #76]
 4626 0482 1344     		add	r3, r3, r2
 4627 0484 FB64     		str	r3, [r7, #76]
 4628              	.L301:
1508:..\src/interruptions.c **** 
1509:..\src/interruptions.c ****                 // Derivative
1510:..\src/interruptions.c ****                 if (k_d_c != 0)
 4629              		.loc 1 1510 0
 4630 0486 BB6A     		ldr	r3, [r7, #40]
 4631 0488 002B     		cmp	r3, #0
 4632 048a 0CD0     		beq	.L302
1511:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4633              		.loc 1 1511 0
 4634 048c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4635 048e 2A4A     		ldr	r2, .L339+40
 4636 0490 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4637 0494 BA68     		ldr	r2, [r7, #8]
 4638 0496 D31A     		subs	r3, r2, r3
 4639 0498 BA6A     		ldr	r2, [r7, #40]
 4640 049a 02FB03F3 		mul	r3, r2, r3
 4641 049e 1B14     		asrs	r3, r3, #16
 4642 04a0 FA6C     		ldr	r2, [r7, #76]
 4643 04a2 1344     		add	r3, r3, r2
 4644 04a4 FB64     		str	r3, [r7, #76]
 4645              	.L302:
1512:..\src/interruptions.c ****                 
1513:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4646              		.loc 1 1513 0
 4647 04a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4648 04a8 2349     		ldr	r1, .L339+40
 4649 04aa BA68     		ldr	r2, [r7, #8]
 4650 04ac 41F82320 		str	r2, [r1, r3, lsl #2]
1514:..\src/interruptions.c ****                 
1515:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4651              		.loc 1 1515 0
 4652 04b0 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 111


 4653 04b2 002B     		cmp	r3, #0
 4654 04b4 04DB     		blt	.L303
1516:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4655              		.loc 1 1516 0
 4656 04b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4657 04b8 1A4A     		ldr	r2, .L339+20
 4658 04ba 0121     		movs	r1, #1
 4659 04bc D154     		strb	r1, [r2, r3]
1517:..\src/interruptions.c ****                 else
1518:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1519:..\src/interruptions.c ****             }
1520:..\src/interruptions.c ****         break;
 4660              		.loc 1 1520 0
 4661 04be 25E0     		b	.L334
 4662              	.L303:
1518:..\src/interruptions.c ****             }
 4663              		.loc 1 1518 0
 4664 04c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4665 04c2 184A     		ldr	r2, .L339+20
 4666 04c4 0021     		movs	r1, #0
 4667 04c6 D154     		strb	r1, [r2, r3]
 4668              		.loc 1 1520 0
 4669 04c8 20E0     		b	.L334
 4670              	.L269:
1521:..\src/interruptions.c ****         
1522:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1523:..\src/interruptions.c ****         case CONTROL_PWM:
1524:..\src/interruptions.c **** 
1525:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4671              		.loc 1 1525 0
 4672 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4673 04cc 104A     		ldr	r2, .L339
 4674 04ce 1B01     		lsls	r3, r3, #4
 4675 04d0 1344     		add	r3, r3, r2
 4676 04d2 0833     		adds	r3, r3, #8
 4677 04d4 1B68     		ldr	r3, [r3]
 4678 04d6 FB64     		str	r3, [r7, #76]
1526:..\src/interruptions.c **** 
1527:..\src/interruptions.c ****             if (pwm_input > 0) 
 4679              		.loc 1 1527 0
 4680 04d8 FB6C     		ldr	r3, [r7, #76]
 4681 04da 002B     		cmp	r3, #0
 4682 04dc 04DD     		ble	.L304
1528:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4683              		.loc 1 1528 0
 4684 04de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4685 04e0 104A     		ldr	r2, .L339+20
 4686 04e2 0121     		movs	r1, #1
 4687 04e4 D154     		strb	r1, [r2, r3]
 4688 04e6 03E0     		b	.L305
 4689              	.L304:
1529:..\src/interruptions.c ****             else 
1530:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4690              		.loc 1 1530 0
 4691 04e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4692 04ea 0E4A     		ldr	r2, .L339+20
 4693 04ec 0021     		movs	r1, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 112


 4694 04ee D154     		strb	r1, [r2, r3]
 4695              	.L305:
1531:..\src/interruptions.c ****             
1532:..\src/interruptions.c **** 
1533:..\src/interruptions.c ****             // pwm_input saturation
1534:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4696              		.loc 1 1534 0
 4697 04f0 FB6C     		ldr	r3, [r7, #76]
 4698 04f2 13F1640F 		cmn	r3, #100
 4699 04f6 03DA     		bge	.L306
1535:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4700              		.loc 1 1535 0
 4701 04f8 6FF06303 		mvn	r3, #99
 4702 04fc FB64     		str	r3, [r7, #76]
1536:..\src/interruptions.c ****             else {
1537:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1538:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1539:..\src/interruptions.c ****         	}
1540:..\src/interruptions.c **** 
1541:..\src/interruptions.c ****         break;
 4703              		.loc 1 1541 0
 4704 04fe 1DE0     		b	.L335
 4705              	.L306:
1537:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4706              		.loc 1 1537 0
 4707 0500 FB6C     		ldr	r3, [r7, #76]
 4708 0502 642B     		cmp	r3, #100
 4709 0504 1ADD     		ble	.L335
1538:..\src/interruptions.c ****         	}
 4710              		.loc 1 1538 0
 4711 0506 6423     		movs	r3, #100
 4712 0508 FB64     		str	r3, [r7, #76]
 4713              		.loc 1 1541 0
 4714 050a 17E0     		b	.L335
 4715              	.L334:
1520:..\src/interruptions.c ****         
 4716              		.loc 1 1520 0
 4717 050c 00BF     		nop
 4718 050e 16E0     		b	.L266
 4719              	.L340:
 4720              		.align	2
 4721              	.L339:
 4722 0510 00000000 		.word	g_ref
 4723 0514 00000000 		.word	g_meas
 4724 0518 AC000000 		.word	pos_error_sum.10588
 4725 051c 18FCFFFF 		.word	-1000
 4726 0520 B4000000 		.word	prev_pos_err.10590
 4727 0524 BC000000 		.word	motor_dir.10593
 4728 0528 00000000 		.word	tension_valid
 4729 052c C0000000 		.word	curr_error_sum.10589
 4730 0530 A0860100 		.word	100000
 4731 0534 6079FEFF 		.word	-100000
 4732 0538 C8000000 		.word	prev_curr_err.10591
 4733              	.L335:
 4734              		.loc 1 1541 0
 4735 053c 00BF     		nop
 4736              	.L266:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 113


1542:..\src/interruptions.c ****             
1543:..\src/interruptions.c ****     }
1544:..\src/interruptions.c **** 
1545:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1546:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1547:..\src/interruptions.c **** 
1548:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4737              		.loc 1 1548 0
 4738 053e FB6C     		ldr	r3, [r7, #76]
 4739 0540 642B     		cmp	r3, #100
 4740 0542 01DD     		ble	.L308
1549:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4741              		.loc 1 1549 0
 4742 0544 6423     		movs	r3, #100
 4743 0546 FB64     		str	r3, [r7, #76]
 4744              	.L308:
1550:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4745              		.loc 1 1550 0
 4746 0548 FB6C     		ldr	r3, [r7, #76]
 4747 054a 13F1640F 		cmn	r3, #100
 4748 054e 02DA     		bge	.L309
1551:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4749              		.loc 1 1551 0
 4750 0550 6FF06303 		mvn	r3, #99
 4751 0554 FB64     		str	r3, [r7, #76]
 4752              	.L309:
1552:..\src/interruptions.c **** 
1553:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4753              		.loc 1 1553 0
 4754 0556 7B6C     		ldr	r3, [r7, #68]
 4755 0558 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4756 055c 012B     		cmp	r3, #1
 4757 055e 0DD0     		beq	.L310
1554:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4758              		.loc 1 1554 0
 4759 0560 FB6C     		ldr	r3, [r7, #76]
 4760 0562 9B02     		lsls	r3, r3, #10
 4761 0564 AA4A     		ldr	r2, .L341
 4762 0566 82FB0312 		smull	r1, r2, r2, r3
 4763 056a 5211     		asrs	r2, r2, #5
 4764 056c DB17     		asrs	r3, r3, #31
 4765 056e D31A     		subs	r3, r2, r3
 4766 0570 A84A     		ldr	r2, .L341+4
 4767 0572 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4768 0574 02FB03F3 		mul	r3, r2, r3
 4769 0578 9B12     		asrs	r3, r3, #10
 4770 057a FB64     		str	r3, [r7, #76]
 4771              	.L310:
1555:..\src/interruptions.c ****  
1556:..\src/interruptions.c ****     //// RATE LIMITER ////
1557:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4772              		.loc 1 1557 0
 4773 057c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4774 057e A64A     		ldr	r2, .L341+8
 4775 0580 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4776 0584 FA6C     		ldr	r2, [r7, #76]
 4777 0586 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 114


 4778 0588 7A6C     		ldr	r2, [r7, #68]
 4779 058a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4780 058e 9342     		cmp	r3, r2
 4781 0590 09DD     		ble	.L311
1558:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4782              		.loc 1 1558 0
 4783 0592 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4784 0594 A04A     		ldr	r2, .L341+8
 4785 0596 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4786 059a 7A6C     		ldr	r2, [r7, #68]
 4787 059c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4788 05a0 1344     		add	r3, r3, r2
 4789 05a2 FB64     		str	r3, [r7, #76]
 4790 05a4 14E0     		b	.L312
 4791              	.L311:
1559:..\src/interruptions.c ****     }
1560:..\src/interruptions.c ****     else {
1561:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4792              		.loc 1 1561 0
 4793 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4794 05a8 9B4A     		ldr	r2, .L341+8
 4795 05aa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4796 05ae FA6C     		ldr	r2, [r7, #76]
 4797 05b0 D21A     		subs	r2, r2, r3
 4798 05b2 7B6C     		ldr	r3, [r7, #68]
 4799 05b4 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4800 05b8 5B42     		negs	r3, r3
 4801 05ba 9A42     		cmp	r2, r3
 4802 05bc 08DA     		bge	.L312
1562:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4803              		.loc 1 1562 0
 4804 05be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4805 05c0 954A     		ldr	r2, .L341+8
 4806 05c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4807 05c6 7A6C     		ldr	r2, [r7, #68]
 4808 05c8 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4809 05cc 9B1A     		subs	r3, r3, r2
 4810 05ce FB64     		str	r3, [r7, #76]
 4811              	.L312:
1563:..\src/interruptions.c ****     }
1564:..\src/interruptions.c ****     
1565:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4812              		.loc 1 1565 0
 4813 05d0 FB6C     		ldr	r3, [r7, #76]
 4814 05d2 642B     		cmp	r3, #100
 4815 05d4 01DD     		ble	.L313
1566:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4816              		.loc 1 1566 0
 4817 05d6 6423     		movs	r3, #100
 4818 05d8 FB64     		str	r3, [r7, #76]
 4819              	.L313:
1567:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4820              		.loc 1 1567 0
 4821 05da FB6C     		ldr	r3, [r7, #76]
 4822 05dc 13F1640F 		cmn	r3, #100
 4823 05e0 02DA     		bge	.L314
1568:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 115


 4824              		.loc 1 1568 0
 4825 05e2 6FF06303 		mvn	r3, #99
 4826 05e6 FB64     		str	r3, [r7, #76]
 4827              	.L314:
1569:..\src/interruptions.c ****     
1570:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4828              		.loc 1 1570 0
 4829 05e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4830 05ea 8B49     		ldr	r1, .L341+8
 4831 05ec FA6C     		ldr	r2, [r7, #76]
 4832 05ee 41F82320 		str	r2, [r1, r3, lsl #2]
1571:..\src/interruptions.c **** 	
1572:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4833              		.loc 1 1572 0
 4834 05f2 FB6C     		ldr	r3, [r7, #76]
 4835 05f4 002B     		cmp	r3, #0
 4836 05f6 01DB     		blt	.L315
 4837              		.loc 1 1572 0 is_stmt 0 discriminator 1
 4838 05f8 0122     		movs	r2, #1
 4839 05fa 01E0     		b	.L316
 4840              	.L315:
 4841              		.loc 1 1572 0 discriminator 2
 4842 05fc 4FF0FF32 		mov	r2, #-1
 4843              	.L316:
 4844              		.loc 1 1572 0 discriminator 4
 4845 0600 864B     		ldr	r3, .L341+12
 4846 0602 1A70     		strb	r2, [r3]
1573:..\src/interruptions.c ****     
1574:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4847              		.loc 1 1574 0 is_stmt 1 discriminator 4
 4848 0604 7B6C     		ldr	r3, [r7, #68]
 4849 0606 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4850 060a 012B     		cmp	r3, #1
 4851 060c 40F0AA80 		bne	.L317
1575:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1576:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4852              		.loc 1 1576 0
 4853 0610 7B6C     		ldr	r3, [r7, #68]
 4854 0612 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4855 0616 012B     		cmp	r3, #1
 4856 0618 00F09F80 		beq	.L318
 4857              		.loc 1 1576 0 is_stmt 0 discriminator 1
 4858 061c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4859 0620 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4860 0622 7F48     		ldr	r0, .L341+16
 4861 0624 1346     		mov	r3, r2
 4862 0626 5B00     		lsls	r3, r3, #1
 4863 0628 1344     		add	r3, r3, r2
 4864 062a 9B00     		lsls	r3, r3, #2
 4865 062c 1344     		add	r3, r3, r2
 4866 062e 0B44     		add	r3, r3, r1
 4867 0630 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4868 0634 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4869 0638 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4870 063a 7A4C     		ldr	r4, .L341+20
 4871 063c 1346     		mov	r3, r2
 4872 063e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 116


 4873 0640 1344     		add	r3, r3, r2
 4874 0642 9B00     		lsls	r3, r3, #2
 4875 0644 1344     		add	r3, r3, r2
 4876 0646 0344     		add	r3, r3, r0
 4877 0648 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4878 064c CB1A     		subs	r3, r1, r3
 4879 064e 312B     		cmp	r3, #49
 4880 0650 00F38380 		bgt	.L318
1577:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4881              		.loc 1 1577 0 is_stmt 1 discriminator 2
 4882 0654 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4883 0658 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4884 065a 7148     		ldr	r0, .L341+16
 4885 065c 1346     		mov	r3, r2
 4886 065e 5B00     		lsls	r3, r3, #1
 4887 0660 1344     		add	r3, r3, r2
 4888 0662 9B00     		lsls	r3, r3, #2
 4889 0664 1344     		add	r3, r3, r2
 4890 0666 0B44     		add	r3, r3, r1
 4891 0668 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4892 066c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4893 0670 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4894 0672 6C4C     		ldr	r4, .L341+20
 4895 0674 1346     		mov	r3, r2
 4896 0676 5B00     		lsls	r3, r3, #1
 4897 0678 1344     		add	r3, r3, r2
 4898 067a 9B00     		lsls	r3, r3, #2
 4899 067c 1344     		add	r3, r3, r2
 4900 067e 0344     		add	r3, r3, r0
 4901 0680 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4902 0684 CB1A     		subs	r3, r1, r3
1576:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4903              		.loc 1 1576 0 discriminator 2
 4904 0686 13F1310F 		cmn	r3, #49
 4905 068a 66DB     		blt	.L318
1578:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4906              		.loc 1 1578 0
 4907 068c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4908 068e 664A     		ldr	r2, .L341+24
 4909 0690 1B01     		lsls	r3, r3, #4
 4910 0692 1344     		add	r3, r3, r2
 4911 0694 1A68     		ldr	r2, [r3]
 4912 0696 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4913 0698 6449     		ldr	r1, .L341+28
 4914 069a 1B01     		lsls	r3, r3, #4
 4915 069c 0B44     		add	r3, r3, r1
 4916 069e 1B68     		ldr	r3, [r3]
 4917 06a0 D31A     		subs	r3, r2, r3
1577:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4918              		.loc 1 1577 0
 4919 06a2 632B     		cmp	r3, #99
 4920 06a4 59DC     		bgt	.L318
 4921              		.loc 1 1578 0
 4922 06a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4923 06a8 5F4A     		ldr	r2, .L341+24
 4924 06aa 1B01     		lsls	r3, r3, #4
 4925 06ac 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 117


 4926 06ae 1A68     		ldr	r2, [r3]
 4927 06b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4928 06b2 5E49     		ldr	r1, .L341+28
 4929 06b4 1B01     		lsls	r3, r3, #4
 4930 06b6 0B44     		add	r3, r3, r1
 4931 06b8 1B68     		ldr	r3, [r3]
 4932 06ba D31A     		subs	r3, r2, r3
 4933 06bc 13F1630F 		cmn	r3, #99
 4934 06c0 4BDB     		blt	.L318
1579:..\src/interruptions.c ****             position_counter[idx]++;
 4935              		.loc 1 1579 0
 4936 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4937 06c4 5A4A     		ldr	r2, .L341+32
 4938 06c6 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4939 06ca 0132     		adds	r2, r2, #1
 4940 06cc 5849     		ldr	r1, .L341+32
 4941 06ce 41F82320 		str	r2, [r1, r3, lsl #2]
1580:..\src/interruptions.c ****             
1581:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4942              		.loc 1 1581 0
 4943 06d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4944 06d4 564A     		ldr	r2, .L341+32
 4945 06d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4946 06da F92B     		cmp	r3, #249
 4947 06dc 42D9     		bls	.L317
1582:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4948              		.loc 1 1582 0
 4949 06de 7B6C     		ldr	r3, [r7, #68]
 4950 06e0 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4951 06e4 002B     		cmp	r3, #0
 4952 06e6 10D1     		bne	.L320
 4953              		.loc 1 1582 0 is_stmt 0 discriminator 1
 4954 06e8 524B     		ldr	r3, .L341+36
 4955 06ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4956 06ec 002B     		cmp	r3, #0
 4957 06ee 0CD1     		bne	.L320
1583:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4958              		.loc 1 1583 0 is_stmt 1
 4959 06f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4960 06f2 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4961 06f6 4B49     		ldr	r1, .L341+20
 4962 06f8 3420     		movs	r0, #52
 4963 06fa 00FB02F2 		mul	r2, r0, r2
 4964 06fe 0A44     		add	r2, r2, r1
 4965 0700 1268     		ldr	r2, [r2]
 4966 0702 4D49     		ldr	r1, .L341+40
 4967 0704 1B01     		lsls	r3, r3, #4
 4968 0706 0B44     		add	r3, r3, r1
 4969 0708 1A60     		str	r2, [r3]
 4970              	.L320:
1584:..\src/interruptions.c ****                 }
1585:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4971              		.loc 1 1585 0
 4972 070a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4973 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4974 0710 4449     		ldr	r1, .L341+20
 4975 0712 3420     		movs	r0, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 118


 4976 0714 00FB02F2 		mul	r2, r0, r2
 4977 0718 0A44     		add	r2, r2, r1
 4978 071a 1268     		ldr	r2, [r2]
 4979 071c 4349     		ldr	r1, .L341+28
 4980 071e 1B01     		lsls	r3, r3, #4
 4981 0720 0B44     		add	r3, r3, r1
 4982 0722 1A60     		str	r2, [r3]
1586:..\src/interruptions.c ****                 
1587:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4983              		.loc 1 1587 0
 4984 0724 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4985 0726 424A     		ldr	r2, .L341+32
 4986 0728 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4987 072c FA2B     		cmp	r3, #250
 4988 072e 11D1     		bne	.L321
1588:..\src/interruptions.c ****                     // To do only once
1589:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4989              		.loc 1 1589 0
 4990 0730 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4991 0734 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4992 0738 3A49     		ldr	r1, .L341+20
 4993 073a 3420     		movs	r0, #52
 4994 073c 00FB02F2 		mul	r2, r0, r2
 4995 0740 0A44     		add	r2, r2, r1
 4996 0742 0C32     		adds	r2, r2, #12
 4997 0744 1268     		ldr	r2, [r2]
 4998 0746 3749     		ldr	r1, .L341+20
 4999 0748 3420     		movs	r0, #52
 5000 074a 00FB03F3 		mul	r3, r0, r3
 5001 074e 0B44     		add	r3, r3, r1
 5002 0750 1433     		adds	r3, r3, #20
 5003 0752 1A60     		str	r2, [r3]
 5004              	.L321:
1590:..\src/interruptions.c ****                 }
1591:..\src/interruptions.c ****                 pwm_input = 0;            
 5005              		.loc 1 1591 0
 5006 0754 0023     		movs	r3, #0
 5007 0756 FB64     		str	r3, [r7, #76]
1581:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5008              		.loc 1 1581 0
 5009 0758 04E0     		b	.L317
 5010              	.L318:
1592:..\src/interruptions.c ****             }
1593:..\src/interruptions.c ****         }
1594:..\src/interruptions.c ****         else {
1595:..\src/interruptions.c ****             position_counter[idx] = 0;
 5011              		.loc 1 1595 0
 5012 075a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5013 075c 344A     		ldr	r2, .L341+32
 5014 075e 0021     		movs	r1, #0
 5015 0760 42F82310 		str	r1, [r2, r3, lsl #2]
 5016              	.L317:
1596:..\src/interruptions.c ****         }
1597:..\src/interruptions.c ****     }
1598:..\src/interruptions.c ****     
1599:..\src/interruptions.c ****     // Set motor direction and write pwm value
1600:..\src/interruptions.c ****     switch (idx) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 119


 5017              		.loc 1 1600 0
 5018 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5019 0766 002B     		cmp	r3, #0
 5020 0768 02D0     		beq	.L323
 5021 076a 012B     		cmp	r3, #1
 5022 076c 26D0     		beq	.L324
1601:..\src/interruptions.c ****         case 0:         // Motor 1
1602:..\src/interruptions.c ****             if (motor_dir[idx])
1603:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1604:..\src/interruptions.c ****             else
1605:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1606:..\src/interruptions.c ****             
1607:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1608:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1609:..\src/interruptions.c ****             }
1610:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1611:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1612:..\src/interruptions.c ****             }
1613:..\src/interruptions.c ****             
1614:..\src/interruptions.c ****             break;
1615:..\src/interruptions.c ****         case 1:         // Motor 2
1616:..\src/interruptions.c ****             
1617:..\src/interruptions.c ****             if (motor_dir[idx])
1618:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1619:..\src/interruptions.c ****             else
1620:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1621:..\src/interruptions.c ****             
1622:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1623:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1624:..\src/interruptions.c ****             }
1625:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1626:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1627:..\src/interruptions.c ****             }
1628:..\src/interruptions.c ****             
1629:..\src/interruptions.c ****             break;
1630:..\src/interruptions.c ****         default:
1631:..\src/interruptions.c ****             break;
 5023              		.loc 1 1631 0
 5024 076e 4BE0     		b	.L329
 5025              	.L323:
1602:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5026              		.loc 1 1602 0
 5027 0770 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5028 0772 324A     		ldr	r2, .L341+44
 5029 0774 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5030 0776 002B     		cmp	r3, #0
 5031 0778 03D0     		beq	.L325
1603:..\src/interruptions.c ****             else
 5032              		.loc 1 1603 0
 5033 077a 0120     		movs	r0, #1
 5034 077c FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5035 0780 02E0     		b	.L326
 5036              	.L325:
1605:..\src/interruptions.c ****             
 5037              		.loc 1 1605 0
 5038 0782 0020     		movs	r0, #0
 5039 0784 FFF7FEFF 		bl	MOTOR_DIR_1_Write
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 120


 5040              	.L326:
1607:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 5041              		.loc 1 1607 0
 5042 0788 7B6C     		ldr	r3, [r7, #68]
 5043 078a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5044 078e 012B     		cmp	r3, #1
 5045 0790 0BD1     		bne	.L327
1608:..\src/interruptions.c ****             }
 5046              		.loc 1 1608 0
 5047 0792 FB6C     		ldr	r3, [r7, #76]
 5048 0794 002B     		cmp	r3, #0
 5049 0796 B8BF     		it	lt
 5050 0798 5B42     		rsblt	r3, r3, #0
 5051 079a DBB2     		uxtb	r3, r3
 5052 079c C3F16403 		rsb	r3, r3, #100
 5053 07a0 DBB2     		uxtb	r3, r3
 5054 07a2 1846     		mov	r0, r3
 5055 07a4 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1614:..\src/interruptions.c ****         case 1:         // Motor 2
 5056              		.loc 1 1614 0
 5057 07a8 2EE0     		b	.L329
 5058              	.L327:
1611:..\src/interruptions.c ****             }
 5059              		.loc 1 1611 0
 5060 07aa FB6C     		ldr	r3, [r7, #76]
 5061 07ac 002B     		cmp	r3, #0
 5062 07ae B8BF     		it	lt
 5063 07b0 5B42     		rsblt	r3, r3, #0
 5064 07b2 DBB2     		uxtb	r3, r3
 5065 07b4 1846     		mov	r0, r3
 5066 07b6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1614:..\src/interruptions.c ****         case 1:         // Motor 2
 5067              		.loc 1 1614 0
 5068 07ba 25E0     		b	.L329
 5069              	.L324:
1617:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5070              		.loc 1 1617 0
 5071 07bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5072 07be 1F4A     		ldr	r2, .L341+44
 5073 07c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5074 07c2 002B     		cmp	r3, #0
 5075 07c4 03D0     		beq	.L330
1618:..\src/interruptions.c ****             else
 5076              		.loc 1 1618 0
 5077 07c6 0120     		movs	r0, #1
 5078 07c8 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5079 07cc 02E0     		b	.L331
 5080              	.L330:
1620:..\src/interruptions.c ****             
 5081              		.loc 1 1620 0
 5082 07ce 0020     		movs	r0, #0
 5083 07d0 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5084              	.L331:
1622:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 5085              		.loc 1 1622 0
 5086 07d4 7B6C     		ldr	r3, [r7, #68]
 5087 07d6 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 121


 5088 07da 012B     		cmp	r3, #1
 5089 07dc 0BD1     		bne	.L332
1623:..\src/interruptions.c ****             }
 5090              		.loc 1 1623 0
 5091 07de FB6C     		ldr	r3, [r7, #76]
 5092 07e0 002B     		cmp	r3, #0
 5093 07e2 B8BF     		it	lt
 5094 07e4 5B42     		rsblt	r3, r3, #0
 5095 07e6 DBB2     		uxtb	r3, r3
 5096 07e8 C3F16403 		rsb	r3, r3, #100
 5097 07ec DBB2     		uxtb	r3, r3
 5098 07ee 1846     		mov	r0, r3
 5099 07f0 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1629:..\src/interruptions.c ****         default:
 5100              		.loc 1 1629 0
 5101 07f4 07E0     		b	.L336
 5102              	.L332:
1626:..\src/interruptions.c ****             }
 5103              		.loc 1 1626 0
 5104 07f6 FB6C     		ldr	r3, [r7, #76]
 5105 07f8 002B     		cmp	r3, #0
 5106 07fa B8BF     		it	lt
 5107 07fc 5B42     		rsblt	r3, r3, #0
 5108 07fe DBB2     		uxtb	r3, r3
 5109 0800 1846     		mov	r0, r3
 5110 0802 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5111              	.L336:
1629:..\src/interruptions.c ****         default:
 5112              		.loc 1 1629 0
 5113 0806 00BF     		nop
 5114              	.L329:
1632:..\src/interruptions.c ****     }
1633:..\src/interruptions.c ****     
1634:..\src/interruptions.c **** }
 5115              		.loc 1 1634 0
 5116 0808 00BF     		nop
 5117 080a 5437     		adds	r7, r7, #84
 5118              		.cfi_def_cfa_offset 12
 5119 080c BD46     		mov	sp, r7
 5120              		.cfi_def_cfa_register 13
 5121              		@ sp needed
 5122 080e 90BD     		pop	{r4, r7, pc}
 5123              	.L342:
 5124              		.align	2
 5125              	.L341:
 5126 0810 1F85EB51 		.word	1374389535
 5127 0814 00000000 		.word	dev_pwm_limit
 5128 0818 D0000000 		.word	prev_pwm.10592
 5129 081c 00000000 		.word	pwm_sign
 5130 0820 00000000 		.word	g_measOld
 5131 0824 00000000 		.word	g_meas
 5132 0828 00000000 		.word	g_refOld
 5133 082c 00000000 		.word	g_ref
 5134 0830 D8000000 		.word	position_counter.10594
 5135 0834 00000000 		.word	change_ext_ref_flag
 5136 0838 00000000 		.word	g_refNew
 5137 083c BC000000 		.word	motor_dir.10593
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 122


 5138              		.cfi_endproc
 5139              	.LFE72:
 5140              		.size	motor_control_generic, .-motor_control_generic
 5141              		.global	__aeabi_fcmpeq
 5142              		.global	__aeabi_fmul
 5143              		.global	__aeabi_f2iz
 5144              		.global	__aeabi_fcmplt
 5145              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5146              		.align	2
 5147              		.global	encoder_reading_SPI
 5148              		.thumb
 5149              		.thumb_func
 5150              		.type	encoder_reading_SPI, %function
 5151              	encoder_reading_SPI:
 5152              	.LFB73:
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c **** //==============================================================================
1637:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1638:..\src/interruptions.c **** //==============================================================================
1639:..\src/interruptions.c **** 
1640:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5153              		.loc 1 1640 0
 5154              		.cfi_startproc
 5155              		@ args = 0, pretend = 0, frame = 48
 5156              		@ frame_needed = 1, uses_anonymous_args = 0
 5157 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5158              		.cfi_def_cfa_offset 20
 5159              		.cfi_offset 4, -20
 5160              		.cfi_offset 5, -16
 5161              		.cfi_offset 6, -12
 5162              		.cfi_offset 7, -8
 5163              		.cfi_offset 14, -4
 5164 0002 8FB0     		sub	sp, sp, #60
 5165              		.cfi_def_cfa_offset 80
 5166 0004 02AF     		add	r7, sp, #8
 5167              		.cfi_def_cfa 7, 72
 5168 0006 0346     		mov	r3, r0
 5169 0008 0A46     		mov	r2, r1
 5170 000a FB71     		strb	r3, [r7, #7]
 5171 000c 1346     		mov	r3, r2
 5172 000e BB71     		strb	r3, [r7, #6]
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5173              		.loc 1 1642 0
 5174 0010 0023     		movs	r3, #0
 5175 0012 87F82F30 		strb	r3, [r7, #47]
1643:..\src/interruptions.c ****     
1644:..\src/interruptions.c ****     // Encoder Variables  
1645:..\src/interruptions.c ****     uint8 jj;
1646:..\src/interruptions.c ****      
1647:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1648:..\src/interruptions.c ****     int16 tmp_value_encoder;
1649:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1650:..\src/interruptions.c ****     int32 value_encoder;
1651:..\src/interruptions.c ****     int32 speed_encoder;
1652:..\src/interruptions.c ****     int32 value_diff;
1653:..\src/interruptions.c **** 	int8 init_rot = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 123


 5176              		.loc 1 1653 0
 5177 0016 0023     		movs	r3, #0
 5178 0018 87F82730 		strb	r3, [r7, #39]
1654:..\src/interruptions.c **** 
1655:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1656:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1657:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1658:..\src/interruptions.c ****     
1659:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1660:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1661:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1662:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1663:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1664:..\src/interruptions.c **** 
1665:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1666:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1667:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1668:..\src/interruptions.c **** //    
1669:..\src/interruptions.c ****     if (reset_last_value_flag) {
 5179              		.loc 1 1669 0
 5180 001c 914B     		ldr	r3, .L379
 5181 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5182 0020 002B     		cmp	r3, #0
 5183 0022 18D0     		beq	.L344
1670:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5184              		.loc 1 1670 0
 5185 0024 0323     		movs	r3, #3
 5186 0026 87F82E30 		strb	r3, [r7, #46]
 5187 002a 0AE0     		b	.L345
 5188              	.L346:
1671:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5189              		.loc 1 1671 0
 5190 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5191 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5192 0032 8D48     		ldr	r0, .L379+4
 5193 0034 1346     		mov	r3, r2
 5194 0036 5B00     		lsls	r3, r3, #1
 5195 0038 1344     		add	r3, r3, r2
 5196 003a 0B44     		add	r3, r3, r1
 5197 003c 0022     		movs	r2, #0
 5198 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 5199              	.L345:
1670:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5200              		.loc 1 1670 0 discriminator 1
 5201 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5202 0046 5A1E     		subs	r2, r3, #1
 5203 0048 87F82E20 		strb	r2, [r7, #46]
 5204 004c 002B     		cmp	r3, #0
 5205 004e EDD1     		bne	.L346
1672:..\src/interruptions.c ****         
1673:..\src/interruptions.c ****         reset_last_value_flag = 0;
 5206              		.loc 1 1673 0
 5207 0050 844B     		ldr	r3, .L379
 5208 0052 0022     		movs	r2, #0
 5209 0054 1A70     		strb	r2, [r3]
 5210              	.L344:
1674:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 124


1675:..\src/interruptions.c **** 
1676:..\src/interruptions.c ****     //======================================================     reading sensors
1677:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5211              		.loc 1 1677 0
 5212 0056 0023     		movs	r3, #0
 5213 0058 87F82F30 		strb	r3, [r7, #47]
 5214 005c 0DE0     		b	.L347
 5215              	.L348:
1678:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5216              		.loc 1 1678 0 discriminator 3
 5217 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5218 0062 9B00     		lsls	r3, r3, #2
 5219 0064 07F13002 		add	r2, r7, #48
 5220 0068 1344     		add	r3, r3, r2
 5221 006a 0022     		movs	r2, #0
 5222 006c 43F8282C 		str	r2, [r3, #-40]
1677:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5223              		.loc 1 1677 0 discriminator 3
 5224 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5225 0074 0133     		adds	r3, r3, #1
 5226 0076 87F82F30 		strb	r3, [r7, #47]
 5227              	.L347:
1677:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5228              		.loc 1 1677 0 is_stmt 0 discriminator 1
 5229 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5230 007e 022B     		cmp	r3, #2
 5231 0080 EDD9     		bls	.L348
1679:..\src/interruptions.c ****     }   
1680:..\src/interruptions.c ****     
1681:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5232              		.loc 1 1681 0 is_stmt 1
 5233 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5234 0084 794A     		ldr	r2, .L379+8
 5235 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5236 0088 1A46     		mov	r2, r3
 5237 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5238 008c 1946     		mov	r1, r3
 5239 008e 1046     		mov	r0, r2
 5240 0090 FFF7FEFF 		bl	ReadEncoderLine
 5241              	.LBB10:
1682:..\src/interruptions.c ****                                                                         //CS1 for left hand
1683:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5242              		.loc 1 1683 0
 5243 0094 0023     		movs	r3, #0
 5244 0096 3B62     		str	r3, [r7, #32]
 5245 0098 2EE0     		b	.L349
 5246              	.L351:
1684:..\src/interruptions.c ****         
1685:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1686:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5247              		.loc 1 1686 0
 5248 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5249 009c 7449     		ldr	r1, .L379+12
 5250 009e 1346     		mov	r3, r2
 5251 00a0 5B00     		lsls	r3, r3, #1
 5252 00a2 1344     		add	r3, r3, r2
 5253 00a4 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 125


 5254 00a6 CA18     		adds	r2, r1, r3
 5255 00a8 3B6A     		ldr	r3, [r7, #32]
 5256 00aa 1344     		add	r3, r3, r2
 5257 00ac 03F2B113 		addw	r3, r3, #433
 5258 00b0 1B78     		ldrb	r3, [r3]
 5259 00b2 87F82F30 		strb	r3, [r7, #47]
1687:..\src/interruptions.c ****         
1688:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5260              		.loc 1 1688 0
 5261 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5262 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5263 00bc 6D48     		ldr	r0, .L379+16
 5264 00be 1346     		mov	r3, r2
 5265 00c0 9B00     		lsls	r3, r3, #2
 5266 00c2 1344     		add	r3, r3, r2
 5267 00c4 0344     		add	r3, r3, r0
 5268 00c6 0B44     		add	r3, r3, r1
 5269 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5270 00ca 0F2B     		cmp	r3, #15
 5271 00cc 11D9     		bls	.L350
1689:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5272              		.loc 1 1689 0
 5273 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5274 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5275 00d4 6848     		ldr	r0, .L379+20
 5276 00d6 1346     		mov	r3, r2
 5277 00d8 9B00     		lsls	r3, r3, #2
 5278 00da 1344     		add	r3, r3, r2
 5279 00dc 0B44     		add	r3, r3, r1
 5280 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5281 00e2 1A46     		mov	r2, r3
 5282 00e4 3B6A     		ldr	r3, [r7, #32]
 5283 00e6 9B00     		lsls	r3, r3, #2
 5284 00e8 07F13001 		add	r1, r7, #48
 5285 00ec 0B44     		add	r3, r3, r1
 5286 00ee 43F8282C 		str	r2, [r3, #-40]
 5287              	.L350:
1683:..\src/interruptions.c ****         
 5288              		.loc 1 1683 0 discriminator 2
 5289 00f2 3B6A     		ldr	r3, [r7, #32]
 5290 00f4 0133     		adds	r3, r3, #1
 5291 00f6 3B62     		str	r3, [r7, #32]
 5292              	.L349:
1683:..\src/interruptions.c ****         
 5293              		.loc 1 1683 0 is_stmt 0 discriminator 1
 5294 00f8 3B6A     		ldr	r3, [r7, #32]
 5295 00fa 022B     		cmp	r3, #2
 5296 00fc CDDD     		ble	.L351
 5297              	.LBE10:
1690:..\src/interruptions.c ****         }
1691:..\src/interruptions.c ****     }
1692:..\src/interruptions.c ****     
1693:..\src/interruptions.c ****     // S = SIGN BIT
1694:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1695:..\src/interruptions.c ****     // 0 = 0 BIT
1696:..\src/interruptions.c ****     // C = CONTROL BIT
1697:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 126


1698:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5298              		.loc 1 1698 0 is_stmt 1
 5299 00fe 0023     		movs	r3, #0
 5300 0100 87F82F30 		strb	r3, [r7, #47]
 5301 0104 39E3     		b	.L352
 5302              	.L372:
1699:..\src/interruptions.c ****         
1700:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5303              		.loc 1 1700 0
 5304 0106 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5305 0108 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5306 010c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5307 0110 9B00     		lsls	r3, r3, #2
 5308 0112 07F13001 		add	r1, r7, #48
 5309 0116 0B44     		add	r3, r3, r1
 5310 0118 53F8281C 		ldr	r1, [r3, #-40]
 5311 011c 574C     		ldr	r4, .L379+24
 5312 011e 1346     		mov	r3, r2
 5313 0120 9B00     		lsls	r3, r3, #2
 5314 0122 1344     		add	r3, r3, r2
 5315 0124 0344     		add	r3, r3, r0
 5316 0126 44F82310 		str	r1, [r4, r3, lsl #2]
1701:..\src/interruptions.c ****         
1702:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5317              		.loc 1 1702 0
 5318 012a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5319 012e 9B00     		lsls	r3, r3, #2
 5320 0130 07F13002 		add	r2, r7, #48
 5321 0134 1344     		add	r3, r3, r2
 5322 0136 53F8283C 		ldr	r3, [r3, #-40]
 5323 013a 99B2     		uxth	r1, r3
 5324 013c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5325 013e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5326 0142 4F4C     		ldr	r4, .L379+28
 5327 0144 1346     		mov	r3, r2
 5328 0146 5B00     		lsls	r3, r3, #1
 5329 0148 1344     		add	r3, r3, r2
 5330 014a 9B00     		lsls	r3, r3, #2
 5331 014c 0344     		add	r3, r3, r0
 5332 014e 6633     		adds	r3, r3, #102
 5333 0150 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5334 0154 9BB2     		uxth	r3, r3
 5335 0156 CB1A     		subs	r3, r1, r3
 5336 0158 9BB2     		uxth	r3, r3
 5337 015a BB85     		strh	r3, [r7, #44]	@ movhi
1703:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5338              		.loc 1 1703 0
 5339 015c B7F92C30 		ldrsh	r3, [r7, #44]
 5340 0160 002B     		cmp	r3, #0
 5341 0162 04DA     		bge	.L353
1704:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5342              		.loc 1 1704 0
 5343 0164 BB8D     		ldrh	r3, [r7, #44]
 5344 0166 03F58053 		add	r3, r3, #4096
 5345 016a 9BB2     		uxth	r3, r3
 5346 016c BB85     		strh	r3, [r7, #44]	@ movhi
 5347              	.L353:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 127


1705:..\src/interruptions.c ****         }       // Range [0, 4096]
1706:..\src/interruptions.c **** 
1707:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5348              		.loc 1 1707 0
 5349 016e B7F92C30 		ldrsh	r3, [r7, #44]
 5350 0172 B3F5006F 		cmp	r3, #2048
 5351 0176 04DB     		blt	.L354
1708:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5352              		.loc 1 1708 0
 5353 0178 BB8D     		ldrh	r3, [r7, #44]
 5354 017a A3F58053 		sub	r3, r3, #4096
 5355 017e 9BB2     		uxth	r3, r3
 5356 0180 BB85     		strh	r3, [r7, #44]	@ movhi
 5357              	.L354:
1709:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5358              		.loc 1 1711 0
 5359 0182 B7F92C30 		ldrsh	r3, [r7, #44]
 5360 0186 1B01     		lsls	r3, r3, #4
 5361 0188 FB61     		str	r3, [r7, #28]
1712:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5362              		.loc 1 1712 0
 5363 018a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5364 018c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5365 0190 3C48     		ldr	r0, .L379+32
 5366 0192 1346     		mov	r3, r2
 5367 0194 5B00     		lsls	r3, r3, #1
 5368 0196 1344     		add	r3, r3, r2
 5369 0198 0B44     		add	r3, r3, r1
 5370 019a FA69     		ldr	r2, [r7, #28]
 5371 019c 40F82320 		str	r2, [r0, r3, lsl #2]
1713:..\src/interruptions.c **** 
1714:..\src/interruptions.c ****         // Initialize last_value_encoder
1715:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5372              		.loc 1 1715 0
 5373 01a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5374 01a2 394A     		ldr	r2, .L379+36
 5375 01a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5376 01a6 002B     		cmp	r3, #0
 5377 01a8 12D0     		beq	.L355
1716:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5378              		.loc 1 1716 0
 5379 01aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5380 01ac 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5381 01b0 2D48     		ldr	r0, .L379+4
 5382 01b2 1346     		mov	r3, r2
 5383 01b4 5B00     		lsls	r3, r3, #1
 5384 01b6 1344     		add	r3, r3, r2
 5385 01b8 0B44     		add	r3, r3, r1
 5386 01ba FA69     		ldr	r2, [r7, #28]
 5387 01bc 40F82320 		str	r2, [r0, r3, lsl #2]
1717:..\src/interruptions.c ****             if (index == 2)
 5388              		.loc 1 1717 0
 5389 01c0 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5390 01c4 022B     		cmp	r3, #2
 5391 01c6 03D1     		bne	.L355
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 128


1718:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5392              		.loc 1 1718 0
 5393 01c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5394 01ca 2F4A     		ldr	r2, .L379+36
 5395 01cc 0021     		movs	r1, #0
 5396 01ce D154     		strb	r1, [r2, r3]
 5397              	.L355:
1719:..\src/interruptions.c ****         }
1720:..\src/interruptions.c **** 
1721:..\src/interruptions.c ****         // Take care of rotations
1722:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5398              		.loc 1 1722 0
 5399 01d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5400 01d2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5401 01d6 2448     		ldr	r0, .L379+4
 5402 01d8 1346     		mov	r3, r2
 5403 01da 5B00     		lsls	r3, r3, #1
 5404 01dc 1344     		add	r3, r3, r2
 5405 01de 0B44     		add	r3, r3, r1
 5406 01e0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5407 01e4 FA69     		ldr	r2, [r7, #28]
 5408 01e6 D31A     		subs	r3, r2, r3
 5409 01e8 BB61     		str	r3, [r7, #24]
1723:..\src/interruptions.c **** 
1724:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1725:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1726:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1727:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1728:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1729:..\src/interruptions.c ****         //                                               |           |
1730:..\src/interruptions.c ****         //                                           24575           -24576
1731:..\src/interruptions.c ****         //                                               |___________|
1732:..\src/interruptions.c ****         //                                                   49152
1733:..\src/interruptions.c **** 
1734:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1735:..\src/interruptions.c ****         // and update the variable only if the difference between
1736:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1737:..\src/interruptions.c **** 
1738:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1739:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1740:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1741:..\src/interruptions.c **** 
1742:..\src/interruptions.c ****         if (value_diff > 49152)
 5410              		.loc 1 1742 0
 5411 01ea BB69     		ldr	r3, [r7, #24]
 5412 01ec B3F5404F 		cmp	r3, #49152
 5413 01f0 19DD     		ble	.L356
1743:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5414              		.loc 1 1743 0
 5415 01f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5416 01f4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5417 01f8 2448     		ldr	r0, .L379+40
 5418 01fa 3421     		movs	r1, #52
 5419 01fc 01FB02F1 		mul	r1, r1, r2
 5420 0200 0144     		add	r1, r1, r0
 5421 0202 1944     		add	r1, r1, r3
 5422 0204 1831     		adds	r1, r1, #24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 129


 5423 0206 91F90010 		ldrsb	r1, [r1]
 5424 020a C9B2     		uxtb	r1, r1
 5425 020c 0139     		subs	r1, r1, #1
 5426 020e C9B2     		uxtb	r1, r1
 5427 0210 4CB2     		sxtb	r4, r1
 5428 0212 1E49     		ldr	r1, .L379+40
 5429 0214 3420     		movs	r0, #52
 5430 0216 00FB02F2 		mul	r2, r0, r2
 5431 021a 0A44     		add	r2, r2, r1
 5432 021c 1344     		add	r3, r3, r2
 5433 021e 1833     		adds	r3, r3, #24
 5434 0220 2246     		mov	r2, r4
 5435 0222 1A70     		strb	r2, [r3]
 5436 0224 5CE0     		b	.L357
 5437              	.L356:
1744:..\src/interruptions.c ****         else{ 
1745:..\src/interruptions.c ****             if (value_diff < -49152)
 5438              		.loc 1 1745 0
 5439 0226 BB69     		ldr	r3, [r7, #24]
 5440 0228 13F5404F 		cmn	r3, #49152
 5441 022c 30DA     		bge	.L358
1746:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5442              		.loc 1 1746 0
 5443 022e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5444 0230 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5445 0234 1548     		ldr	r0, .L379+40
 5446 0236 3421     		movs	r1, #52
 5447 0238 01FB02F1 		mul	r1, r1, r2
 5448 023c 0144     		add	r1, r1, r0
 5449 023e 1944     		add	r1, r1, r3
 5450 0240 1831     		adds	r1, r1, #24
 5451 0242 91F90010 		ldrsb	r1, [r1]
 5452 0246 C9B2     		uxtb	r1, r1
 5453 0248 0131     		adds	r1, r1, #1
 5454 024a C9B2     		uxtb	r1, r1
 5455 024c 4CB2     		sxtb	r4, r1
 5456 024e 0F49     		ldr	r1, .L379+40
 5457 0250 3420     		movs	r0, #52
 5458 0252 00FB02F2 		mul	r2, r0, r2
 5459 0256 0A44     		add	r2, r2, r1
 5460 0258 1344     		add	r3, r3, r2
 5461 025a 1833     		adds	r3, r3, #24
 5462 025c 2246     		mov	r2, r4
 5463 025e 1A70     		strb	r2, [r3]
 5464 0260 3EE0     		b	.L357
 5465              	.L380:
 5466 0262 00BF     		.align	2
 5467              	.L379:
 5468 0264 00000000 		.word	reset_last_value_flag
 5469 0268 E0000000 		.word	last_value_encoder.10617
 5470 026c 00000000 		.word	N_Encoder_Line_Connected
 5471 0270 00000000 		.word	c_mem
 5472 0274 00000000 		.word	Encoder_Check
 5473 0278 00000000 		.word	Encoder_Value
 5474 027c 00000000 		.word	data_encoder_raw
 5475 0280 00000000 		.word	g_mem
 5476 0284 F8000000 		.word	comp_value_encoder.10618
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 130


 5477 0288 04000000 		.word	only_first_time.10620
 5478 028c 00000000 		.word	g_meas
 5479              	.L358:
1747:..\src/interruptions.c ****             else{
1748:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5480              		.loc 1 1748 0
 5481 0290 BB69     		ldr	r3, [r7, #24]
 5482 0292 002B     		cmp	r3, #0
 5483 0294 B8BF     		it	lt
 5484 0296 5B42     		rsblt	r3, r3, #0
 5485 0298 B3F5804F 		cmp	r3, #16384
 5486 029c 20DD     		ble	.L357
1749:..\src/interruptions.c ****                     error[n_line][index]++;
 5487              		.loc 1 1749 0
 5488 029e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5489 02a0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5490 02a4 9B48     		ldr	r0, .L381
 5491 02a6 1346     		mov	r3, r2
 5492 02a8 5B00     		lsls	r3, r3, #1
 5493 02aa 1344     		add	r3, r3, r2
 5494 02ac 0344     		add	r3, r3, r0
 5495 02ae 0B44     		add	r3, r3, r1
 5496 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5497 02b2 0133     		adds	r3, r3, #1
 5498 02b4 DCB2     		uxtb	r4, r3
 5499 02b6 9748     		ldr	r0, .L381
 5500 02b8 1346     		mov	r3, r2
 5501 02ba 5B00     		lsls	r3, r3, #1
 5502 02bc 1344     		add	r3, r3, r2
 5503 02be 0344     		add	r3, r3, r0
 5504 02c0 0B44     		add	r3, r3, r1
 5505 02c2 2246     		mov	r2, r4
 5506 02c4 1A70     		strb	r2, [r3]
1750:..\src/interruptions.c ****                                 
1751:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5507              		.loc 1 1751 0
 5508 02c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5509 02c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5510 02cc 9148     		ldr	r0, .L381
 5511 02ce 1346     		mov	r3, r2
 5512 02d0 5B00     		lsls	r3, r3, #1
 5513 02d2 1344     		add	r3, r3, r2
 5514 02d4 0344     		add	r3, r3, r0
 5515 02d6 0B44     		add	r3, r3, r1
 5516 02d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5517 02da 092B     		cmp	r3, #9
 5518 02dc 40F28C82 		bls	.L378
 5519              	.L357:
1752:..\src/interruptions.c ****                         // Discard
1753:..\src/interruptions.c ****                         return;
1754:..\src/interruptions.c ****                 }
1755:..\src/interruptions.c ****             }
1756:..\src/interruptions.c ****         }
1757:..\src/interruptions.c **** 
1758:..\src/interruptions.c ****         error[n_line][index] = 0;
 5520              		.loc 1 1758 0
 5521 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 131


 5522 02e2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5523 02e6 8B48     		ldr	r0, .L381
 5524 02e8 1346     		mov	r3, r2
 5525 02ea 5B00     		lsls	r3, r3, #1
 5526 02ec 1344     		add	r3, r3, r2
 5527 02ee 0344     		add	r3, r3, r0
 5528 02f0 0B44     		add	r3, r3, r1
 5529 02f2 0022     		movs	r2, #0
 5530 02f4 1A70     		strb	r2, [r3]
1759:..\src/interruptions.c ****         
1760:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5531              		.loc 1 1760 0
 5532 02f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5533 02f8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5534 02fc 8648     		ldr	r0, .L381+4
 5535 02fe 1346     		mov	r3, r2
 5536 0300 5B00     		lsls	r3, r3, #1
 5537 0302 1344     		add	r3, r3, r2
 5538 0304 0B44     		add	r3, r3, r1
 5539 0306 FA69     		ldr	r2, [r7, #28]
 5540 0308 40F82320 		str	r2, [r0, r3, lsl #2]
1761:..\src/interruptions.c **** 
1762:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5541              		.loc 1 1762 0
 5542 030c FB69     		ldr	r3, [r7, #28]
 5543 030e BB62     		str	r3, [r7, #40]
1763:..\src/interruptions.c **** 
1764:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5544              		.loc 1 1764 0
 5545 0310 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5546 0312 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5547 0316 8149     		ldr	r1, .L381+8
 5548 0318 3420     		movs	r0, #52
 5549 031a 00FB02F2 		mul	r2, r0, r2
 5550 031e 0A44     		add	r2, r2, r1
 5551 0320 1344     		add	r3, r3, r2
 5552 0322 1833     		adds	r3, r3, #24
 5553 0324 93F90030 		ldrsb	r3, [r3]
 5554 0328 1B04     		lsls	r3, r3, #16
 5555 032a BA6A     		ldr	r2, [r7, #40]
 5556 032c 1344     		add	r3, r3, r2
 5557 032e BB62     		str	r3, [r7, #40]
1765:..\src/interruptions.c ****         
1766:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5558              		.loc 1 1766 0
 5559 0330 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5560 0332 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5561 0336 7A48     		ldr	r0, .L381+12
 5562 0338 1346     		mov	r3, r2
 5563 033a 5B00     		lsls	r3, r3, #1
 5564 033c 1344     		add	r3, r3, r2
 5565 033e 9B00     		lsls	r3, r3, #2
 5566 0340 0B44     		add	r3, r3, r1
 5567 0342 6833     		adds	r3, r3, #104
 5568 0344 9B00     		lsls	r3, r3, #2
 5569 0346 0344     		add	r3, r3, r0
 5570 0348 5B68     		ldr	r3, [r3, #4]	@ float
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 132


 5571 034a 4FF07E51 		mov	r1, #1065353216
 5572 034e 1846     		mov	r0, r3
 5573 0350 FFF7FEFF 		bl	__aeabi_fcmpeq
 5574 0354 0346     		mov	r3, r0
 5575 0356 002B     		cmp	r3, #0
 5576 0358 1AD1     		bne	.L360
1767:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5577              		.loc 1 1767 0
 5578 035a B86A     		ldr	r0, [r7, #40]
 5579 035c FFF7FEFF 		bl	__aeabi_i2f
 5580 0360 0446     		mov	r4, r0
 5581 0362 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5582 0364 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5583 0368 6D48     		ldr	r0, .L381+12
 5584 036a 1346     		mov	r3, r2
 5585 036c 5B00     		lsls	r3, r3, #1
 5586 036e 1344     		add	r3, r3, r2
 5587 0370 9B00     		lsls	r3, r3, #2
 5588 0372 0B44     		add	r3, r3, r1
 5589 0374 6833     		adds	r3, r3, #104
 5590 0376 9B00     		lsls	r3, r3, #2
 5591 0378 0344     		add	r3, r3, r0
 5592 037a 5B68     		ldr	r3, [r3, #4]	@ float
 5593 037c 1946     		mov	r1, r3
 5594 037e 2046     		mov	r0, r4
 5595 0380 FFF7FEFF 		bl	__aeabi_fmul
 5596 0384 0346     		mov	r3, r0
 5597 0386 1846     		mov	r0, r3
 5598 0388 FFF7FEFF 		bl	__aeabi_f2iz
 5599 038c 0346     		mov	r3, r0
 5600 038e BB62     		str	r3, [r7, #40]
 5601              	.L360:
1768:..\src/interruptions.c ****         }
1769:..\src/interruptions.c **** 
1770:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5602              		.loc 1 1770 0
 5603 0390 634B     		ldr	r3, .L381+12
 5604 0392 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5605 0396 002B     		cmp	r3, #0
 5606 0398 0BD1     		bne	.L362
1771:..\src/interruptions.c ****             // Right / Left hand turn
1772:..\src/interruptions.c ****             if (index == 0) {
 5607              		.loc 1 1772 0
 5608 039a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5609 039e 002B     		cmp	r3, #0
 5610 03a0 07D1     		bne	.L362
1773:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5611              		.loc 1 1773 0
 5612 03a2 5F4B     		ldr	r3, .L381+12
 5613 03a4 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5614 03a8 002B     		cmp	r3, #0
 5615 03aa 02D1     		bne	.L362
1774:..\src/interruptions.c ****                     value_encoder *= -1;        
 5616              		.loc 1 1774 0
 5617 03ac BB6A     		ldr	r3, [r7, #40]
 5618 03ae 5B42     		negs	r3, r3
 5619 03b0 BB62     		str	r3, [r7, #40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 133


 5620              	.L362:
1775:..\src/interruptions.c ****                 }
1776:..\src/interruptions.c ****             }
1777:..\src/interruptions.c ****         }
1778:..\src/interruptions.c ****  
1779:..\src/interruptions.c **** 
1780:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5621              		.loc 1 1780 0
 5622 03b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5623 03b4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5624 03b8 5848     		ldr	r0, .L381+8
 5625 03ba 1346     		mov	r3, r2
 5626 03bc 5B00     		lsls	r3, r3, #1
 5627 03be 1344     		add	r3, r3, r2
 5628 03c0 9B00     		lsls	r3, r3, #2
 5629 03c2 1344     		add	r3, r3, r2
 5630 03c4 0B44     		add	r3, r3, r1
 5631 03c6 BA6A     		ldr	r2, [r7, #40]
 5632 03c8 40F82320 		str	r2, [r0, r3, lsl #2]
1781:..\src/interruptions.c ****     
1782:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5633              		.loc 1 1782 0
 5634 03cc BA6A     		ldr	r2, [r7, #40]
 5635 03ce 1346     		mov	r3, r2
 5636 03d0 9B00     		lsls	r3, r3, #2
 5637 03d2 1344     		add	r3, r3, r2
 5638 03d4 5B00     		lsls	r3, r3, #1
 5639 03d6 9918     		adds	r1, r3, r2
 5640 03d8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5641 03da 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5642 03de 514C     		ldr	r4, .L381+16
 5643 03e0 1346     		mov	r3, r2
 5644 03e2 5B00     		lsls	r3, r3, #1
 5645 03e4 1344     		add	r3, r3, r2
 5646 03e6 0344     		add	r3, r3, r0
 5647 03e8 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5648 03ec 6FF01102 		mvn	r2, #17
 5649 03f0 02FB03F3 		mul	r3, r2, r3
 5650 03f4 1944     		add	r1, r1, r3
 5651 03f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5652 03f8 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5653 03fc 4A4C     		ldr	r4, .L381+20
 5654 03fe 1346     		mov	r3, r2
 5655 0400 5B00     		lsls	r3, r3, #1
 5656 0402 1344     		add	r3, r3, r2
 5657 0404 0344     		add	r3, r3, r0
 5658 0406 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5659 040a 1346     		mov	r3, r2
 5660 040c DB00     		lsls	r3, r3, #3
 5661 040e 1344     		add	r3, r3, r2
 5662 0410 1944     		add	r1, r1, r3
 5663 0412 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5664 0414 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5665 0418 444C     		ldr	r4, .L381+24
 5666 041a 1346     		mov	r3, r2
 5667 041c 5B00     		lsls	r3, r3, #1
 5668 041e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 134


 5669 0420 0344     		add	r3, r3, r0
 5670 0422 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5671 0426 5B00     		lsls	r3, r3, #1
 5672 0428 C81A     		subs	r0, r1, r3
 5673 042a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5674 042e DB00     		lsls	r3, r3, #3
 5675 0430 3F4A     		ldr	r2, .L381+28
 5676 0432 1344     		add	r3, r3, r2
 5677 0434 1946     		mov	r1, r3
 5678 0436 FFF7FEFF 		bl	filter
 5679 043a 0346     		mov	r3, r0
 5680 043c 1BB2     		sxth	r3, r3
 5681 043e 7B61     		str	r3, [r7, #20]
1783:..\src/interruptions.c **** 
1784:..\src/interruptions.c ****         //Update current speed
1785:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5682              		.loc 1 1785 0
 5683 0440 7869     		ldr	r0, [r7, #20]
 5684 0442 FFF7FEFF 		bl	__aeabi_i2f
 5685 0446 0446     		mov	r4, r0
 5686 0448 3A4B     		ldr	r3, .L381+32
 5687 044a 1B68     		ldr	r3, [r3]	@ float
 5688 044c 3A49     		ldr	r1, .L381+36
 5689 044e 1846     		mov	r0, r3
 5690 0450 FFF7FEFF 		bl	__aeabi_fmul
 5691 0454 0346     		mov	r3, r0
 5692 0456 1946     		mov	r1, r3
 5693 0458 2046     		mov	r0, r4
 5694 045a FFF7FEFF 		bl	__aeabi_fdiv
 5695 045e 0346     		mov	r3, r0
 5696 0460 1846     		mov	r0, r3
 5697 0462 FFF7FEFF 		bl	__aeabi_f2iz
 5698 0466 0346     		mov	r3, r0
 5699 0468 7B61     		str	r3, [r7, #20]
1786:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5700              		.loc 1 1786 0
 5701 046a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5702 046c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5703 0470 2A48     		ldr	r0, .L381+8
 5704 0472 1346     		mov	r3, r2
 5705 0474 5B00     		lsls	r3, r3, #1
 5706 0476 1344     		add	r3, r3, r2
 5707 0478 9B00     		lsls	r3, r3, #2
 5708 047a 1344     		add	r3, r3, r2
 5709 047c 0B44     		add	r3, r3, r1
 5710 047e 0633     		adds	r3, r3, #6
 5711 0480 9B00     		lsls	r3, r3, #2
 5712 0482 0344     		add	r3, r3, r0
 5713 0484 7A69     		ldr	r2, [r7, #20]
 5714 0486 5A60     		str	r2, [r3, #4]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         // update old velocity and acceleration values
1789:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5715              		.loc 1 1789 0
 5716 0488 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5717 048a 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5718 048e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 135


 5719 0490 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5720 0494 244D     		ldr	r5, .L381+20
 5721 0496 0B46     		mov	r3, r1
 5722 0498 5B00     		lsls	r3, r3, #1
 5723 049a 0B44     		add	r3, r3, r1
 5724 049c 2344     		add	r3, r3, r4
 5725 049e 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5726 04a2 224C     		ldr	r4, .L381+24
 5727 04a4 1346     		mov	r3, r2
 5728 04a6 5B00     		lsls	r3, r3, #1
 5729 04a8 1344     		add	r3, r3, r2
 5730 04aa 0344     		add	r3, r3, r0
 5731 04ac 44F82310 		str	r1, [r4, r3, lsl #2]
1790:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5732              		.loc 1 1790 0
 5733 04b0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5734 04b2 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5735 04b6 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5736 04b8 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5737 04bc 194D     		ldr	r5, .L381+16
 5738 04be 0B46     		mov	r3, r1
 5739 04c0 5B00     		lsls	r3, r3, #1
 5740 04c2 0B44     		add	r3, r3, r1
 5741 04c4 2344     		add	r3, r3, r4
 5742 04c6 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5743 04ca 174C     		ldr	r4, .L381+20
 5744 04cc 1346     		mov	r3, r2
 5745 04ce 5B00     		lsls	r3, r3, #1
 5746 04d0 1344     		add	r3, r3, r2
 5747 04d2 0344     		add	r3, r3, r0
 5748 04d4 44F82310 		str	r1, [r4, r3, lsl #2]
1791:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5749              		.loc 1 1791 0
 5750 04d8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5751 04da 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5752 04de 1148     		ldr	r0, .L381+16
 5753 04e0 1346     		mov	r3, r2
 5754 04e2 5B00     		lsls	r3, r3, #1
 5755 04e4 1344     		add	r3, r3, r2
 5756 04e6 0B44     		add	r3, r3, r1
 5757 04e8 BA6A     		ldr	r2, [r7, #40]
 5758 04ea 40F82320 		str	r2, [r0, r3, lsl #2]
1792:..\src/interruptions.c **** 
1793:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1794:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5759              		.loc 1 1794 0
 5760 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5761 04f0 124A     		ldr	r2, .L381+40
 5762 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5763 04f4 002B     		cmp	r3, #0
 5764 04f6 40F03B81 		bne	.L363
1795:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5765              		.loc 1 1795 0
 5766 04fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5767 04fc 104A     		ldr	r2, .L381+44
 5768 04fe D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5769 0500 212B     		cmp	r3, #33
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 136


 5770 0502 1FD8     		bhi	.L364
1796:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5771              		.loc 1 1796 0
 5772 0504 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5773 0506 0E4A     		ldr	r2, .L381+44
 5774 0508 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5775 050a 0132     		adds	r2, r2, #1
 5776 050c D1B2     		uxtb	r1, r2
 5777 050e 0C4A     		ldr	r2, .L381+44
 5778 0510 D154     		strb	r1, [r2, r3]
 5779 0512 2DE1     		b	.L363
 5780              	.L382:
 5781              		.align	2
 5782              	.L381:
 5783 0514 10010000 		.word	error.10619
 5784 0518 E0000000 		.word	last_value_encoder.10617
 5785 051c 00000000 		.word	g_meas
 5786 0520 00000000 		.word	c_mem
 5787 0524 18010000 		.word	v_value.10625
 5788 0528 30010000 		.word	vv_value.10626
 5789 052c 48010000 		.word	vvv_value.10627
 5790 0530 00000000 		.word	filt_vel
 5791 0534 00000000 		.word	cycle_time
 5792 0538 0000C040 		.word	1086324736
 5793 053c 60010000 		.word	pos_reconstruct.10624
 5794 0540 64010000 		.word	one_time_execute.10622
 5795              	.L364:
1797:..\src/interruptions.c ****             else {
1798:..\src/interruptions.c ****                 //Double encoder translation
1799:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5796              		.loc 1 1799 0
 5797 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5798 0546 AE49     		ldr	r1, .L383
 5799 0548 1346     		mov	r3, r2
 5800 054a 5B00     		lsls	r3, r3, #1
 5801 054c 1344     		add	r3, r3, r2
 5802 054e 1B01     		lsls	r3, r3, #4
 5803 0550 0B44     		add	r3, r3, r1
 5804 0552 03F5D873 		add	r3, r3, #432
 5805 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5806 0558 002B     		cmp	r3, #0
 5807 055a 5ED0     		beq	.L365
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5808              		.loc 1 1800 0
 5809 055c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5810 055e A949     		ldr	r1, .L383+4
 5811 0560 1346     		mov	r3, r2
 5812 0562 5B00     		lsls	r3, r3, #1
 5813 0564 1344     		add	r3, r3, r2
 5814 0566 9B00     		lsls	r3, r3, #2
 5815 0568 0B44     		add	r3, r3, r1
 5816 056a 1868     		ldr	r0, [r3]
 5817 056c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5818 056e A549     		ldr	r1, .L383+4
 5819 0570 1346     		mov	r3, r2
 5820 0572 5B00     		lsls	r3, r3, #1
 5821 0574 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 137


 5822 0576 9B00     		lsls	r3, r3, #2
 5823 0578 0B44     		add	r3, r3, r1
 5824 057a 0433     		adds	r3, r3, #4
 5825 057c 1C68     		ldr	r4, [r3]
1801:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5826              		.loc 1 1801 0
 5827 057e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5828 0580 9F49     		ldr	r1, .L383
 5829 0582 1346     		mov	r3, r2
 5830 0584 5B00     		lsls	r3, r3, #1
 5831 0586 1344     		add	r3, r3, r2
 5832 0588 1B01     		lsls	r3, r3, #4
 5833 058a 0B44     		add	r3, r3, r1
 5834 058c 03F2B513 		addw	r3, r3, #437
 5835 0590 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5836              		.loc 1 1800 0
 5837 0594 1D46     		mov	r5, r3
 5838              		.loc 1 1801 0
 5839 0596 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5840 0598 9949     		ldr	r1, .L383
 5841 059a 1346     		mov	r3, r2
 5842 059c 5B00     		lsls	r3, r3, #1
 5843 059e 1344     		add	r3, r3, r2
 5844 05a0 1B01     		lsls	r3, r3, #4
 5845 05a2 0B44     		add	r3, r3, r1
 5846 05a4 03F5DB73 		add	r3, r3, #438
 5847 05a8 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5848              		.loc 1 1800 0
 5849 05ac 1E46     		mov	r6, r3
 5850              		.loc 1 1801 0
 5851 05ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5852 05b0 9349     		ldr	r1, .L383
 5853 05b2 1346     		mov	r3, r2
 5854 05b4 5B00     		lsls	r3, r3, #1
 5855 05b6 1344     		add	r3, r3, r2
 5856 05b8 1B01     		lsls	r3, r3, #4
 5857 05ba 0B44     		add	r3, r3, r1
 5858 05bc 03F2B713 		addw	r3, r3, #439
 5859 05c0 93F90030 		ldrsb	r3, [r3]
1800:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5860              		.loc 1 1800 0
 5861 05c4 0093     		str	r3, [sp]
 5862 05c6 3346     		mov	r3, r6
 5863 05c8 2A46     		mov	r2, r5
 5864 05ca 2146     		mov	r1, r4
 5865 05cc FFF7FEFF 		bl	calc_turns_fcn
 5866 05d0 0346     		mov	r3, r0
 5867 05d2 87F82730 		strb	r3, [r7, #39]
1802:..\src/interruptions.c **** 
1803:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5868              		.loc 1 1803 0
 5869 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5870 05d8 8949     		ldr	r1, .L383
 5871 05da 1346     		mov	r3, r2
 5872 05dc 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 138


 5873 05de 1344     		add	r3, r3, r2
 5874 05e0 1B01     		lsls	r3, r3, #4
 5875 05e2 0B44     		add	r3, r3, r1
 5876 05e4 03F5D273 		add	r3, r3, #420
 5877 05e8 1B68     		ldr	r3, [r3]	@ float
 5878 05ea 4FF00001 		mov	r1, #0
 5879 05ee 1846     		mov	r0, r3
 5880 05f0 FFF7FEFF 		bl	__aeabi_fcmplt
 5881 05f4 0346     		mov	r3, r0
 5882 05f6 002B     		cmp	r3, #0
 5883 05f8 05D0     		beq	.L366
1804:..\src/interruptions.c ****                         init_rot = -init_rot;
 5884              		.loc 1 1804 0
 5885 05fa 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5886 05fe 5B42     		negs	r3, r3
 5887 0600 DBB2     		uxtb	r3, r3
 5888 0602 87F82730 		strb	r3, [r7, #39]
 5889              	.L366:
1805:..\src/interruptions.c ****                     
1806:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5890              		.loc 1 1806 0
 5891 0606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5892 0608 7F4A     		ldr	r2, .L383+8
 5893 060a 3421     		movs	r1, #52
 5894 060c 01FB03F3 		mul	r3, r1, r3
 5895 0610 1344     		add	r3, r3, r2
 5896 0612 1833     		adds	r3, r3, #24
 5897 0614 97F82720 		ldrb	r2, [r7, #39]
 5898 0618 1A70     		strb	r2, [r3]
 5899              	.L365:
1807:..\src/interruptions.c ****                 }    
1808:..\src/interruptions.c **** 
1809:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5900              		.loc 1 1809 0
 5901 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5902 061c 7849     		ldr	r1, .L383
 5903 061e 1346     		mov	r3, r2
 5904 0620 5B00     		lsls	r3, r3, #1
 5905 0622 1344     		add	r3, r3, r2
 5906 0624 1B01     		lsls	r3, r3, #4
 5907 0626 0B44     		add	r3, r3, r1
 5908 0628 03F5D273 		add	r3, r3, #420
 5909 062c 1B68     		ldr	r3, [r3]	@ float
 5910 062e 4FF07E51 		mov	r1, #1065353216
 5911 0632 1846     		mov	r0, r3
 5912 0634 FFF7FEFF 		bl	__aeabi_fcmpeq
 5913 0638 0346     		mov	r3, r0
 5914 063a 002B     		cmp	r3, #0
 5915 063c 22D1     		bne	.L368
1810:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5916              		.loc 1 1810 0
 5917 063e FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5918 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5919 0642 714A     		ldr	r2, .L383+8
 5920 0644 3421     		movs	r1, #52
 5921 0646 01FB03F3 		mul	r3, r1, r3
 5922 064a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 139


 5923 064c 1B68     		ldr	r3, [r3]
 5924 064e 1846     		mov	r0, r3
 5925 0650 FFF7FEFF 		bl	__aeabi_i2f
 5926 0654 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5927 0656 6A49     		ldr	r1, .L383
 5928 0658 1346     		mov	r3, r2
 5929 065a 5B00     		lsls	r3, r3, #1
 5930 065c 1344     		add	r3, r3, r2
 5931 065e 1B01     		lsls	r3, r3, #4
 5932 0660 0B44     		add	r3, r3, r1
 5933 0662 03F5D273 		add	r3, r3, #420
 5934 0666 1B68     		ldr	r3, [r3]	@ float
 5935 0668 1946     		mov	r1, r3
 5936 066a FFF7FEFF 		bl	__aeabi_fdiv
 5937 066e 0346     		mov	r3, r0
 5938 0670 1846     		mov	r0, r3
 5939 0672 FFF7FEFF 		bl	__aeabi_f2iz
 5940 0676 0146     		mov	r1, r0
 5941 0678 634A     		ldr	r2, .L383+8
 5942 067a 3423     		movs	r3, #52
 5943 067c 03FB04F3 		mul	r3, r3, r4
 5944 0680 1344     		add	r3, r3, r2
 5945 0682 1960     		str	r1, [r3]
 5946              	.L368:
1811:..\src/interruptions.c ****                 
1812:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5947              		.loc 1 1812 0
 5948 0684 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5949 0686 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5950 0688 5F49     		ldr	r1, .L383+8
 5951 068a 3420     		movs	r0, #52
 5952 068c 00FB02F2 		mul	r2, r0, r2
 5953 0690 0A44     		add	r2, r2, r1
 5954 0692 1168     		ldr	r1, [r2]
 5955 0694 97F92720 		ldrsb	r2, [r7, #39]
 5956 0698 1204     		lsls	r2, r2, #16
 5957 069a 0A44     		add	r2, r2, r1
 5958 069c 5A49     		ldr	r1, .L383+8
 5959 069e 3420     		movs	r0, #52
 5960 06a0 00FB03F3 		mul	r3, r0, r3
 5961 06a4 0B44     		add	r3, r3, r1
 5962 06a6 1A60     		str	r2, [r3]
1813:..\src/interruptions.c ****             
1814:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5963              		.loc 1 1814 0
 5964 06a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5965 06aa 5549     		ldr	r1, .L383
 5966 06ac 1346     		mov	r3, r2
 5967 06ae 5B00     		lsls	r3, r3, #1
 5968 06b0 1344     		add	r3, r3, r2
 5969 06b2 1B01     		lsls	r3, r3, #4
 5970 06b4 0B44     		add	r3, r3, r1
 5971 06b6 03F5D273 		add	r3, r3, #420
 5972 06ba 1B68     		ldr	r3, [r3]	@ float
 5973 06bc 4FF07E51 		mov	r1, #1065353216
 5974 06c0 1846     		mov	r0, r3
 5975 06c2 FFF7FEFF 		bl	__aeabi_fcmpeq
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 140


 5976 06c6 0346     		mov	r3, r0
 5977 06c8 002B     		cmp	r3, #0
 5978 06ca 22D1     		bne	.L370
1815:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5979              		.loc 1 1815 0
 5980 06cc FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5981 06ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5982 06d0 4D4A     		ldr	r2, .L383+8
 5983 06d2 3421     		movs	r1, #52
 5984 06d4 01FB03F3 		mul	r3, r1, r3
 5985 06d8 1344     		add	r3, r3, r2
 5986 06da 1B68     		ldr	r3, [r3]
 5987 06dc 1846     		mov	r0, r3
 5988 06de FFF7FEFF 		bl	__aeabi_i2f
 5989 06e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5990 06e4 4649     		ldr	r1, .L383
 5991 06e6 1346     		mov	r3, r2
 5992 06e8 5B00     		lsls	r3, r3, #1
 5993 06ea 1344     		add	r3, r3, r2
 5994 06ec 1B01     		lsls	r3, r3, #4
 5995 06ee 0B44     		add	r3, r3, r1
 5996 06f0 03F5D273 		add	r3, r3, #420
 5997 06f4 1B68     		ldr	r3, [r3]	@ float
 5998 06f6 1946     		mov	r1, r3
 5999 06f8 FFF7FEFF 		bl	__aeabi_fmul
 6000 06fc 0346     		mov	r3, r0
 6001 06fe 1846     		mov	r0, r3
 6002 0700 FFF7FEFF 		bl	__aeabi_f2iz
 6003 0704 0146     		mov	r1, r0
 6004 0706 404A     		ldr	r2, .L383+8
 6005 0708 3423     		movs	r3, #52
 6006 070a 03FB04F3 		mul	r3, r3, r4
 6007 070e 1344     		add	r3, r3, r2
 6008 0710 1960     		str	r1, [r3]
 6009              	.L370:
1816:..\src/interruptions.c ****             
1817:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6010              		.loc 1 1817 0
 6011 0712 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6012 0714 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6013 0716 3C49     		ldr	r1, .L383+8
 6014 0718 3420     		movs	r0, #52
 6015 071a 00FB02F2 		mul	r2, r0, r2
 6016 071e 0A44     		add	r2, r2, r1
 6017 0720 1268     		ldr	r2, [r2]
 6018 0722 3A49     		ldr	r1, .L383+12
 6019 0724 1B01     		lsls	r3, r3, #4
 6020 0726 0B44     		add	r3, r3, r1
 6021 0728 1A60     		str	r2, [r3]
1818:..\src/interruptions.c **** 
1819:..\src/interruptions.c ****                 // If necessary activate motor
1820:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6022              		.loc 1 1820 0
 6023 072a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6024 072c 384A     		ldr	r2, .L383+16
 6025 072e 0121     		movs	r1, #1
 6026 0730 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 141


1821:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1822:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6027              		.loc 1 1822 0
 6028 0732 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6029 0734 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6030 0736 3248     		ldr	r0, .L383
 6031 0738 1346     		mov	r3, r2
 6032 073a DB00     		lsls	r3, r3, #3
 6033 073c 9B1A     		subs	r3, r3, r2
 6034 073e 1B01     		lsls	r3, r3, #4
 6035 0740 0344     		add	r3, r3, r0
 6036 0742 E033     		adds	r3, r3, #224
 6037 0744 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6038 0746 314A     		ldr	r2, .L383+12
 6039 0748 0B01     		lsls	r3, r1, #4
 6040 074a 1344     		add	r3, r3, r2
 6041 074c 0C33     		adds	r3, r3, #12
 6042 074e 0246     		mov	r2, r0
 6043 0750 1A70     		strb	r2, [r3]
1823:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6044              		.loc 1 1823 0
 6045 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6046 0754 2D4A     		ldr	r2, .L383+12
 6047 0756 1B01     		lsls	r3, r3, #4
 6048 0758 1344     		add	r3, r3, r2
 6049 075a 0C33     		adds	r3, r3, #12
 6050 075c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6051 075e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6052 0760 1146     		mov	r1, r2
 6053 0762 1846     		mov	r0, r3
 6054 0764 FFF7FEFF 		bl	enable_motor
1824:..\src/interruptions.c ****                 
1825:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6055              		.loc 1 1825 0
 6056 0768 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6057 076a 2A4A     		ldr	r2, .L383+20
 6058 076c 0121     		movs	r1, #1
 6059 076e D154     		strb	r1, [r2, r3]
 6060              	.L363:
1698:..\src/interruptions.c ****         
 6061              		.loc 1 1698 0 discriminator 2
 6062 0770 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6063 0774 0133     		adds	r3, r3, #1
 6064 0776 87F82F30 		strb	r3, [r7, #47]
 6065              	.L352:
1698:..\src/interruptions.c ****         
 6066              		.loc 1 1698 0 is_stmt 0 discriminator 1
 6067 077a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6068 077e 022B     		cmp	r3, #2
 6069 0780 7FF6C1AC 		bls	.L372
1826:..\src/interruptions.c ****             }
1827:..\src/interruptions.c ****         }
1828:..\src/interruptions.c ****     } 
1829:..\src/interruptions.c **** 
1830:..\src/interruptions.c **** 	
1831:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1832:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 142


 6070              		.loc 1 1832 0 is_stmt 1
 6071 0784 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6072 0786 224A     		ldr	r2, .L383+16
 6073 0788 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6074 078a 002B     		cmp	r3, #0
 6075 078c 35D0     		beq	.L343
1833:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6076              		.loc 1 1833 0
 6077 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6078 0790 214A     		ldr	r2, .L383+24
 6079 0792 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6080 0796 0132     		adds	r2, r2, #1
 6081 0798 1F49     		ldr	r1, .L383+24
 6082 079a 41F82320 		str	r2, [r1, r3, lsl #2]
1834:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6083              		.loc 1 1834 0
 6084 079e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6085 07a0 1D4A     		ldr	r2, .L383+24
 6086 07a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6087 07a6 B3F5FA5F 		cmp	r3, #8000
 6088 07aa 26D3     		bcc	.L343
1835:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6089              		.loc 1 1835 0
 6090 07ac BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6091 07ae 174A     		ldr	r2, .L383+12
 6092 07b0 1B01     		lsls	r3, r3, #4
 6093 07b2 1344     		add	r3, r3, r2
 6094 07b4 0022     		movs	r2, #0
 6095 07b6 1A60     		str	r2, [r3]
1836:..\src/interruptions.c ****             
1837:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1838:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6096              		.loc 1 1838 0
 6097 07b8 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6098 07ba BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6099 07bc 1048     		ldr	r0, .L383
 6100 07be 1346     		mov	r3, r2
 6101 07c0 DB00     		lsls	r3, r3, #3
 6102 07c2 9B1A     		subs	r3, r3, r2
 6103 07c4 1B01     		lsls	r3, r3, #4
 6104 07c6 0344     		add	r3, r3, r0
 6105 07c8 E033     		adds	r3, r3, #224
 6106 07ca 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6107 07cc 0F4A     		ldr	r2, .L383+12
 6108 07ce 0B01     		lsls	r3, r1, #4
 6109 07d0 1344     		add	r3, r3, r2
 6110 07d2 0C33     		adds	r3, r3, #12
 6111 07d4 0246     		mov	r2, r0
 6112 07d6 1A70     		strb	r2, [r3]
1839:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6113              		.loc 1 1839 0
 6114 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6115 07da 0C4A     		ldr	r2, .L383+12
 6116 07dc 1B01     		lsls	r3, r3, #4
 6117 07de 1344     		add	r3, r3, r2
 6118 07e0 0C33     		adds	r3, r3, #12
 6119 07e2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 143


 6120 07e4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6121 07e6 1146     		mov	r1, r2
 6122 07e8 1846     		mov	r0, r3
 6123 07ea FFF7FEFF 		bl	enable_motor
1840:..\src/interruptions.c ****                         
1841:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6124              		.loc 1 1841 0
 6125 07ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6126 07f0 074A     		ldr	r2, .L383+16
 6127 07f2 0021     		movs	r1, #0
 6128 07f4 D154     		strb	r1, [r2, r3]
 6129 07f6 00E0     		b	.L343
 6130              	.L378:
1753:..\src/interruptions.c ****                 }
 6131              		.loc 1 1753 0
 6132 07f8 00BF     		nop
 6133              	.L343:
1842:..\src/interruptions.c ****         }
1843:..\src/interruptions.c ****     }
1844:..\src/interruptions.c ****  
1845:..\src/interruptions.c **** }
 6134              		.loc 1 1845 0
 6135 07fa 3437     		adds	r7, r7, #52
 6136              		.cfi_def_cfa_offset 20
 6137 07fc BD46     		mov	sp, r7
 6138              		.cfi_def_cfa_register 13
 6139              		@ sp needed
 6140 07fe F0BD     		pop	{r4, r5, r6, r7, pc}
 6141              	.L384:
 6142              		.align	2
 6143              	.L383:
 6144 0800 00000000 		.word	c_mem
 6145 0804 F8000000 		.word	comp_value_encoder.10618
 6146 0808 00000000 		.word	g_meas
 6147 080c 00000000 		.word	g_refNew
 6148 0810 68010000 		.word	safe_startup_motor_activation.10621
 6149 0814 60010000 		.word	pos_reconstruct.10624
 6150 0818 6C010000 		.word	count_startup_motor.10623
 6151              		.cfi_endproc
 6152              	.LFE73:
 6153              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6154              		.section	.text.analog_read_end,"ax",%progbits
 6155              		.align	2
 6156              		.global	analog_read_end
 6157              		.thumb
 6158              		.thumb_func
 6159              		.type	analog_read_end, %function
 6160              	analog_read_end:
 6161              	.LFB74:
1846:..\src/interruptions.c **** 
1847:..\src/interruptions.c **** //==============================================================================
1848:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1849:..\src/interruptions.c **** //==============================================================================
1850:..\src/interruptions.c **** 
1851:..\src/interruptions.c **** void analog_read_end() {
 6162              		.loc 1 1851 0
 6163              		.cfi_startproc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 144


 6164              		@ args = 0, pretend = 0, frame = 8
 6165              		@ frame_needed = 1, uses_anonymous_args = 0
 6166 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6167              		.cfi_def_cfa_offset 20
 6168              		.cfi_offset 4, -20
 6169              		.cfi_offset 5, -16
 6170              		.cfi_offset 6, -12
 6171              		.cfi_offset 7, -8
 6172              		.cfi_offset 14, -4
 6173 0002 83B0     		sub	sp, sp, #12
 6174              		.cfi_def_cfa_offset 32
 6175 0004 00AF     		add	r7, sp, #0
 6176              		.cfi_def_cfa_register 7
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****     /* =========================================================================
1854:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1855:..\src/interruptions.c ****     /
1856:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1857:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1858:..\src/interruptions.c ****     /
1859:..\src/interruptions.c ****     /   Definition:
1860:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1861:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1862:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1863:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1864:..\src/interruptions.c ****     /
1865:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1866:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1867:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1868:..\src/interruptions.c ****     /  =========================================================================
1869:..\src/interruptions.c ****     */
1870:..\src/interruptions.c **** 
1871:..\src/interruptions.c ****     int32 CYDATA i_aux;
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1874:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1875:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1876:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1877:..\src/interruptions.c ****     static int32 UD_mean_value;
1878:..\src/interruptions.c ****     static int32 LR_mean_value;
1879:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1880:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1881:..\src/interruptions.c ****     static uint16 count = 0;
1882:..\src/interruptions.c ****     static uint32 v_count = 0;
1883:..\src/interruptions.c ****     static uint8 idx = 0;
1884:..\src/interruptions.c ****     
1885:..\src/interruptions.c ****     // Wait for conversion end
1886:..\src/interruptions.c ****     
1887:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6177              		.loc 1 1887 0
 6178 0006 08E0     		b	.L386
 6179              	.L387:
1888:..\src/interruptions.c ****         
1889:..\src/interruptions.c ****         if (interrupt_flag){
 6180              		.loc 1 1889 0
 6181 0008 A84B     		ldr	r3, .L540
 6182 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 145


 6183 000c 002B     		cmp	r3, #0
 6184 000e 04D0     		beq	.L386
1890:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6185              		.loc 1 1890 0
 6186 0010 A64B     		ldr	r3, .L540
 6187 0012 0022     		movs	r2, #0
 6188 0014 1A70     		strb	r2, [r3]
1891:..\src/interruptions.c ****             interrupt_manager();
 6189              		.loc 1 1891 0
 6190 0016 FFF7FEFF 		bl	interrupt_manager
 6191              	.L386:
1887:..\src/interruptions.c ****         
 6192              		.loc 1 1887 0
 6193 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6194 001e 0346     		mov	r3, r0
 6195 0020 002B     		cmp	r3, #0
 6196 0022 F1D0     		beq	.L387
1892:..\src/interruptions.c ****         }
1893:..\src/interruptions.c ****     }
1894:..\src/interruptions.c ****     
1895:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1896:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1897:..\src/interruptions.c ****         // Read pressure in any case
1898:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1899:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1900:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1901:..\src/interruptions.c ****     }
1902:..\src/interruptions.c **** #endif
1903:..\src/interruptions.c ****  
1904:..\src/interruptions.c ****     // Convert tension read
1905:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6197              		.loc 1 1905 0
 6198 0024 A24B     		ldr	r3, .L540+4
 6199 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6200 002a 022B     		cmp	r3, #2
 6201 002c 04D1     		bne	.L388
1906:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6202              		.loc 1 1906 0
 6203 002e A14B     		ldr	r3, .L540+8
 6204 0030 41F28832 		movw	r2, #5000
 6205 0034 1A60     		str	r2, [r3]
 6206 0036 0BE0     		b	.L389
 6207              	.L388:
1907:..\src/interruptions.c ****     }
1908:..\src/interruptions.c ****     else {
1909:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6208              		.loc 1 1909 0
 6209 0038 9F4B     		ldr	r3, .L540+12
 6210 003a B3F90030 		ldrsh	r3, [r3]
 6211 003e A3F25563 		subw	r3, r3, #1621
 6212 0042 40F2C672 		movw	r2, #1990
 6213 0046 02FB03F3 		mul	r3, r2, r3
 6214 004a DB11     		asrs	r3, r3, #7
 6215 004c 994A     		ldr	r2, .L540+8
 6216 004e 1360     		str	r3, [r2]
 6217              	.L389:
1910:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 146


1911:..\src/interruptions.c ****     
1912:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1913:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6218              		.loc 1 1913 0
 6219 0050 9A4B     		ldr	r3, .L540+16
 6220 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6221 0054 042B     		cmp	r3, #4
 6222 0056 0BD9     		bls	.L390
1914:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6223              		.loc 1 1914 0
 6224 0058 974B     		ldr	r3, .L540+12
 6225 005a B3F90830 		ldrsh	r3, [r3, #8]
 6226 005e A3F25563 		subw	r3, r3, #1621
 6227 0062 40F2C672 		movw	r2, #1990
 6228 0066 02FB03F3 		mul	r3, r2, r3
 6229 006a DB11     		asrs	r3, r3, #7
 6230 006c 914A     		ldr	r2, .L540+8
 6231 006e 5360     		str	r3, [r2, #4]
 6232              	.L390:
1915:..\src/interruptions.c ****     }
1916:..\src/interruptions.c ****     
1917:..\src/interruptions.c ****     if (interrupt_flag){
 6233              		.loc 1 1917 0
 6234 0070 8E4B     		ldr	r3, .L540
 6235 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6236 0074 002B     		cmp	r3, #0
 6237 0076 04D0     		beq	.L391
1918:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6238              		.loc 1 1918 0
 6239 0078 8C4B     		ldr	r3, .L540
 6240 007a 0022     		movs	r2, #0
 6241 007c 1A70     		strb	r2, [r3]
1919:..\src/interruptions.c ****         interrupt_manager();
 6242              		.loc 1 1919 0
 6243 007e FFF7FEFF 		bl	interrupt_manager
 6244              	.L391:
1920:..\src/interruptions.c ****     }
1921:..\src/interruptions.c ****     
1922:..\src/interruptions.c ****     // VOLTAGE READING
1923:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1924:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1925:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1926:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1927:..\src/interruptions.c ****     
1928:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6245              		.loc 1 1928 0
 6246 0082 8F4B     		ldr	r3, .L540+20
 6247 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6248 0086 002B     		cmp	r3, #0
 6249 0088 4DD0     		beq	.L392
 6250              		.loc 1 1928 0 is_stmt 0 discriminator 1
 6251 008a 8E4B     		ldr	r3, .L540+24
 6252 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6253 008e 002B     		cmp	r3, #0
 6254 0090 49D0     		beq	.L392
1929:..\src/interruptions.c ****         count = count + 1;
 6255              		.loc 1 1929 0 is_stmt 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 147


 6256 0092 8D4B     		ldr	r3, .L540+28
 6257 0094 1B88     		ldrh	r3, [r3]
 6258 0096 0133     		adds	r3, r3, #1
 6259 0098 9AB2     		uxth	r2, r3
 6260 009a 8B4B     		ldr	r3, .L540+28
 6261 009c 1A80     		strh	r2, [r3]	@ movhi
1930:..\src/interruptions.c ****         
1931:..\src/interruptions.c ****         if (count == 1000){
 6262              		.loc 1 1931 0
 6263 009e 8A4B     		ldr	r3, .L540+28
 6264 00a0 1B88     		ldrh	r3, [r3]
 6265 00a2 B3F57A7F 		cmp	r3, #1000
 6266 00a6 3ED1     		bne	.L392
1932:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6267              		.loc 1 1932 0
 6268 00a8 884B     		ldr	r3, .L540+32
 6269 00aa 0022     		movs	r2, #0
 6270 00ac 1A70     		strb	r2, [r3]
 6271 00ae 33E0     		b	.L393
 6272              	.L397:
1933:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6273              		.loc 1 1933 0
 6274 00b0 864B     		ldr	r3, .L540+32
 6275 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6276 00b4 1A46     		mov	r2, r3
 6277 00b6 7F4B     		ldr	r3, .L540+8
 6278 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6279 00bc 42F22732 		movw	r2, #8999
 6280 00c0 9342     		cmp	r3, r2
 6281 00c2 08DC     		bgt	.L394
1934:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6282              		.loc 1 1934 0
 6283 00c4 814B     		ldr	r3, .L540+32
 6284 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6285 00c8 1946     		mov	r1, r3
 6286 00ca 814B     		ldr	r3, .L540+36
 6287 00cc 4FF4FA52 		mov	r2, #8000
 6288 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 6289 00d4 1AE0     		b	.L395
 6290              	.L394:
1935:..\src/interruptions.c ****                 }
1936:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1937:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6291              		.loc 1 1937 0
 6292 00d6 7D4B     		ldr	r3, .L540+32
 6293 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6294 00da 1A46     		mov	r2, r3
 6295 00dc 754B     		ldr	r3, .L540+8
 6296 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6297 00e2 43F2C722 		movw	r2, #12999
 6298 00e6 9342     		cmp	r3, r2
 6299 00e8 08DC     		bgt	.L396
1938:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6300              		.loc 1 1938 0
 6301 00ea 784B     		ldr	r3, .L540+32
 6302 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6303 00ee 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 148


 6304 00f0 774B     		ldr	r3, .L540+36
 6305 00f2 42F6E062 		movw	r2, #12000
 6306 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 6307 00fa 07E0     		b	.L395
 6308              	.L396:
1939:..\src/interruptions.c ****                     }
1940:..\src/interruptions.c ****                     else
1941:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6309              		.loc 1 1941 0
 6310 00fc 734B     		ldr	r3, .L540+32
 6311 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6312 0100 1946     		mov	r1, r3
 6313 0102 734B     		ldr	r3, .L540+36
 6314 0104 45F6C052 		movw	r2, #24000
 6315 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 6316              	.L395:
1932:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6317              		.loc 1 1932 0 discriminator 2
 6318 010c 6F4B     		ldr	r3, .L540+32
 6319 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6320 0110 0133     		adds	r3, r3, #1
 6321 0112 DAB2     		uxtb	r2, r3
 6322 0114 6D4B     		ldr	r3, .L540+32
 6323 0116 1A70     		strb	r2, [r3]
 6324              	.L393:
1932:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6325              		.loc 1 1932 0 is_stmt 0 discriminator 1
 6326 0118 6C4B     		ldr	r3, .L540+32
 6327 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6328 011c 012B     		cmp	r3, #1
 6329 011e C7D9     		bls	.L397
1942:..\src/interruptions.c ****                 }
1943:..\src/interruptions.c ****             }
1944:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6330              		.loc 1 1944 0 is_stmt 1
 6331 0120 674B     		ldr	r3, .L540+20
 6332 0122 0022     		movs	r2, #0
 6333 0124 1A70     		strb	r2, [r3]
 6334              	.L392:
1945:..\src/interruptions.c ****         }
1946:..\src/interruptions.c ****     }
1947:..\src/interruptions.c **** 
1948:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1949:..\src/interruptions.c **** 
1950:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 6335              		.loc 1 1950 0
 6336 0126 634B     		ldr	r3, .L540+8
 6337 0128 1B68     		ldr	r3, [r3]
 6338 012a 41F65732 		movw	r2, #6999
 6339 012e 9342     		cmp	r3, r2
 6340 0130 00F3F080 		bgt	.L398
 6341              		.loc 1 1950 0 is_stmt 0 discriminator 1
 6342 0134 614B     		ldr	r3, .L540+16
 6343 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6344 0138 042B     		cmp	r3, #4
 6345 013a 06D9     		bls	.L399
 6346              		.loc 1 1950 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 149


 6347 013c 5D4B     		ldr	r3, .L540+8
 6348 013e 5B68     		ldr	r3, [r3, #4]
 6349 0140 41F65732 		movw	r2, #6999
 6350 0144 9342     		cmp	r3, r2
 6351 0146 00F3E580 		bgt	.L398
 6352              	.L399:
1951:..\src/interruptions.c ****         // PSoC is powered through uUSB
1952:..\src/interruptions.c ****         
1953:..\src/interruptions.c ****         tension_valid = FALSE;
 6353              		.loc 1 1953 0 is_stmt 1
 6354 014a 5E4B     		ldr	r3, .L540+24
 6355 014c 0022     		movs	r2, #0
 6356 014e 1A70     		strb	r2, [r3]
1954:..\src/interruptions.c ****             
1955:..\src/interruptions.c ****         if (interrupt_flag){
 6357              		.loc 1 1955 0
 6358 0150 564B     		ldr	r3, .L540
 6359 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6360 0154 002B     		cmp	r3, #0
 6361 0156 04D0     		beq	.L400
1956:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6362              		.loc 1 1956 0
 6363 0158 544B     		ldr	r3, .L540
 6364 015a 0022     		movs	r2, #0
 6365 015c 1A70     		strb	r2, [r3]
1957:..\src/interruptions.c ****             interrupt_manager();
 6366              		.loc 1 1957 0
 6367 015e FFF7FEFF 		bl	interrupt_manager
 6368              	.L400:
1958:..\src/interruptions.c ****         }
1959:..\src/interruptions.c ****         
1960:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6369              		.loc 1 1960 0
 6370 0162 5A4B     		ldr	r3, .L540+32
 6371 0164 0022     		movs	r2, #0
 6372 0166 1A70     		strb	r2, [r3]
 6373 0168 81E0     		b	.L401
 6374              	.L404:
1961:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6375              		.loc 1 1961 0
 6376 016a 5A4B     		ldr	r3, .L540+40
 6377 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6378 0170 002B     		cmp	r3, #0
 6379 0172 59D0     		beq	.L402
1962:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6380              		.loc 1 1962 0
 6381 0174 554B     		ldr	r3, .L540+32
 6382 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6383 0178 1946     		mov	r1, r3
 6384 017a 564A     		ldr	r2, .L540+40
 6385 017c 0B46     		mov	r3, r1
 6386 017e DB00     		lsls	r3, r3, #3
 6387 0180 5B1A     		subs	r3, r3, r1
 6388 0182 1B01     		lsls	r3, r3, #4
 6389 0184 1344     		add	r3, r3, r2
 6390 0186 03F58773 		add	r3, r3, #270
 6391 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 150


 6392 018c 022B     		cmp	r3, #2
 6393 018e 37D0     		beq	.L403
1963:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6394              		.loc 1 1963 0 discriminator 1
 6395 0190 4E4B     		ldr	r3, .L540+32
 6396 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6397 0194 1946     		mov	r1, r3
 6398 0196 4F4A     		ldr	r2, .L540+40
 6399 0198 0B46     		mov	r3, r1
 6400 019a DB00     		lsls	r3, r3, #3
 6401 019c 5B1A     		subs	r3, r3, r1
 6402 019e 1B01     		lsls	r3, r3, #4
 6403 01a0 1344     		add	r3, r3, r2
 6404 01a2 03F58773 		add	r3, r3, #270
 6405 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1962:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6406              		.loc 1 1962 0 discriminator 1
 6407 01a8 032B     		cmp	r3, #3
 6408 01aa 29D0     		beq	.L403
1964:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6409              		.loc 1 1964 0
 6410 01ac 474B     		ldr	r3, .L540+32
 6411 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6412 01b0 1946     		mov	r1, r3
 6413 01b2 484A     		ldr	r2, .L540+40
 6414 01b4 0B46     		mov	r3, r1
 6415 01b6 DB00     		lsls	r3, r3, #3
 6416 01b8 5B1A     		subs	r3, r3, r1
 6417 01ba 1B01     		lsls	r3, r3, #4
 6418 01bc 1344     		add	r3, r3, r2
 6419 01be 03F58773 		add	r3, r3, #270
 6420 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1963:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6421              		.loc 1 1963 0
 6422 01c4 042B     		cmp	r3, #4
 6423 01c6 1BD0     		beq	.L403
1965:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6424              		.loc 1 1965 0
 6425 01c8 404B     		ldr	r3, .L540+32
 6426 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6427 01cc 1946     		mov	r1, r3
 6428 01ce 414A     		ldr	r2, .L540+40
 6429 01d0 0B46     		mov	r3, r1
 6430 01d2 DB00     		lsls	r3, r3, #3
 6431 01d4 5B1A     		subs	r3, r3, r1
 6432 01d6 1B01     		lsls	r3, r3, #4
 6433 01d8 1344     		add	r3, r3, r2
 6434 01da 03F58773 		add	r3, r3, #270
 6435 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1964:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6436              		.loc 1 1964 0
 6437 01e0 052B     		cmp	r3, #5
 6438 01e2 0DD0     		beq	.L403
1966:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6439              		.loc 1 1966 0
 6440 01e4 394B     		ldr	r3, .L540+32
 6441 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 151


 6442 01e8 1946     		mov	r1, r3
 6443 01ea 3A4A     		ldr	r2, .L540+40
 6444 01ec 0B46     		mov	r3, r1
 6445 01ee DB00     		lsls	r3, r3, #3
 6446 01f0 5B1A     		subs	r3, r3, r1
 6447 01f2 1B01     		lsls	r3, r3, #4
 6448 01f4 1344     		add	r3, r3, r2
 6449 01f6 03F58773 		add	r3, r3, #270
 6450 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1965:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6451              		.loc 1 1965 0
 6452 01fc 072B     		cmp	r3, #7
 6453 01fe 13D1     		bne	.L402
 6454              	.L403:
1967:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6455              		.loc 1 1967 0
 6456 0200 324B     		ldr	r3, .L540+32
 6457 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6458 0204 344A     		ldr	r2, .L540+44
 6459 0206 1B01     		lsls	r3, r3, #4
 6460 0208 1344     		add	r3, r3, r2
 6461 020a 0C33     		adds	r3, r3, #12
 6462 020c 0022     		movs	r2, #0
 6463 020e 1A70     		strb	r2, [r3]
1968:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6464              		.loc 1 1968 0
 6465 0210 2E4B     		ldr	r3, .L540+32
 6466 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6467 0214 2D4B     		ldr	r3, .L540+32
 6468 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6469 0218 2F4A     		ldr	r2, .L540+44
 6470 021a 1B01     		lsls	r3, r3, #4
 6471 021c 1344     		add	r3, r3, r2
 6472 021e 0C33     		adds	r3, r3, #12
 6473 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6474 0222 1946     		mov	r1, r3
 6475 0224 FFF7FEFF 		bl	enable_motor
 6476              	.L402:
1969:..\src/interruptions.c ****                     
1970:..\src/interruptions.c ****                 }
1971:..\src/interruptions.c ****             }
1972:..\src/interruptions.c **** 
1973:..\src/interruptions.c ****             // Assign dev_tension and reset current
1974:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6477              		.loc 1 1974 0 discriminator 2
 6478 0228 284B     		ldr	r3, .L540+32
 6479 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6480 022c 1946     		mov	r1, r3
 6481 022e 214B     		ldr	r3, .L540+8
 6482 0230 41F28832 		movw	r2, #5000
 6483 0234 43F82120 		str	r2, [r3, r1, lsl #2]
1975:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6484              		.loc 1 1975 0 discriminator 2
 6485 0238 244B     		ldr	r3, .L540+32
 6486 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6487 023c 1946     		mov	r1, r3
 6488 023e 1C4A     		ldr	r2, .L540+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 152


 6489 0240 0B46     		mov	r3, r1
 6490 0242 DB00     		lsls	r3, r3, #3
 6491 0244 5B1A     		subs	r3, r3, r1
 6492 0246 1B01     		lsls	r3, r3, #4
 6493 0248 1344     		add	r3, r3, r2
 6494 024a 03F58873 		add	r3, r3, #272
 6495 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6496 0250 1946     		mov	r1, r3
 6497 0252 224A     		ldr	r2, .L540+48
 6498 0254 3423     		movs	r3, #52
 6499 0256 03FB01F3 		mul	r3, r3, r1
 6500 025a 1344     		add	r3, r3, r2
 6501 025c 0C33     		adds	r3, r3, #12
 6502 025e 0022     		movs	r2, #0
 6503 0260 1A60     		str	r2, [r3]
1960:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6504              		.loc 1 1960 0 discriminator 2
 6505 0262 1A4B     		ldr	r3, .L540+32
 6506 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6507 0266 0133     		adds	r3, r3, #1
 6508 0268 DAB2     		uxtb	r2, r3
 6509 026a 184B     		ldr	r3, .L540+32
 6510 026c 1A70     		strb	r2, [r3]
 6511              	.L401:
1960:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6512              		.loc 1 1960 0 is_stmt 0 discriminator 1
 6513 026e 174B     		ldr	r3, .L540+32
 6514 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6515 0272 012B     		cmp	r3, #1
 6516 0274 7FF679AF 		bls	.L404
1976:..\src/interruptions.c ****         }
1977:..\src/interruptions.c ****         
1978:..\src/interruptions.c ****         // Reset emg
1979:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6517              		.loc 1 1979 0 is_stmt 1
 6518 0278 144B     		ldr	r3, .L540+32
 6519 027a 0022     		movs	r2, #0
 6520 027c 1A70     		strb	r2, [r3]
 6521 027e 0CE0     		b	.L405
 6522              	.L406:
1980:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6523              		.loc 1 1980 0 discriminator 3
 6524 0280 124B     		ldr	r3, .L540+32
 6525 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6526 0284 1946     		mov	r1, r3
 6527 0286 164B     		ldr	r3, .L540+52
 6528 0288 0022     		movs	r2, #0
 6529 028a 43F82120 		str	r2, [r3, r1, lsl #2]
1979:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6530              		.loc 1 1979 0 discriminator 3
 6531 028e 0F4B     		ldr	r3, .L540+32
 6532 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6533 0292 0133     		adds	r3, r3, #1
 6534 0294 DAB2     		uxtb	r2, r3
 6535 0296 0D4B     		ldr	r3, .L540+32
 6536 0298 1A70     		strb	r2, [r3]
 6537              	.L405:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 153


1979:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6538              		.loc 1 1979 0 is_stmt 0 discriminator 1
 6539 029a 0C4B     		ldr	r3, .L540+32
 6540 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6541 029e 012B     		cmp	r3, #1
 6542 02a0 EED9     		bls	.L406
1981:..\src/interruptions.c ****         }
1982:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6543              		.loc 1 1982 0 is_stmt 1
 6544 02a2 0A4B     		ldr	r3, .L540+32
 6545 02a4 0022     		movs	r2, #0
 6546 02a6 1A70     		strb	r2, [r3]
 6547 02a8 29E0     		b	.L407
 6548              	.L541:
 6549 02aa 00BF     		.align	2
 6550              	.L540:
 6551 02ac 00000000 		.word	interrupt_flag
 6552 02b0 00000000 		.word	g_mem
 6553 02b4 00000000 		.word	dev_tension
 6554 02b8 00000000 		.word	ADC_buf
 6555 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6556 02c0 06000000 		.word	first_tension_valid.10650
 6557 02c4 00000000 		.word	tension_valid
 6558 02c8 74010000 		.word	count.10651
 6559 02cc 76010000 		.word	idx.10653
 6560 02d0 00000000 		.word	pow_tension
 6561 02d4 00000000 		.word	c_mem
 6562 02d8 00000000 		.word	g_ref
 6563 02dc 00000000 		.word	g_meas
 6564 02e0 00000000 		.word	g_adc_meas
 6565              	.L409:
1983:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6566              		.loc 1 1983 0 discriminator 4
 6567 02e4 A74B     		ldr	r3, .L542
 6568 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6569 02e8 A74A     		ldr	r2, .L542+4
 6570 02ea 0233     		adds	r3, r3, #2
 6571 02ec 0021     		movs	r1, #0
 6572 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6573              		.loc 1 1982 0 discriminator 4
 6574 02f2 A44B     		ldr	r3, .L542
 6575 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6576 02f6 0133     		adds	r3, r3, #1
 6577 02f8 DAB2     		uxtb	r2, r3
 6578 02fa A24B     		ldr	r3, .L542
 6579 02fc 1A70     		strb	r2, [r3]
 6580              	.L407:
1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6581              		.loc 1 1982 0 is_stmt 0 discriminator 1
 6582 02fe A34B     		ldr	r3, .L542+8
 6583 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6584 0304 002B     		cmp	r3, #0
 6585 0306 00F0EF81 		beq	.L522
1982:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6586              		.loc 1 1982 0 discriminator 3
 6587 030a 9E4B     		ldr	r3, .L542
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 154


 6588 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6589 030e 052B     		cmp	r3, #5
 6590 0310 E8D9     		bls	.L409
1950:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6591              		.loc 1 1950 0 is_stmt 1
 6592 0312 E9E1     		b	.L522
 6593              	.L398:
1984:..\src/interruptions.c ****         }
1985:..\src/interruptions.c ****         
1986:..\src/interruptions.c ****     }
1987:..\src/interruptions.c ****     else {
1988:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1989:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1990:..\src/interruptions.c ****         
1991:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1992:..\src/interruptions.c ****         
1993:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6594              		.loc 1 1993 0
 6595 0314 9E4B     		ldr	r3, .L542+12
 6596 0316 1B68     		ldr	r3, [r3]
 6597 0318 B3F57A7F 		cmp	r3, #1000
 6598 031c 0DD1     		bne	.L411
 6599              		.loc 1 1993 0 is_stmt 0 discriminator 1
 6600 031e 9D4B     		ldr	r3, .L542+16
 6601 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6602 0322 002B     		cmp	r3, #0
 6603 0324 09D1     		bne	.L411
1994:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1995:..\src/interruptions.c ****             tension_valid = TRUE;   
 6604              		.loc 1 1995 0 is_stmt 1
 6605 0326 9B4B     		ldr	r3, .L542+16
 6606 0328 0122     		movs	r2, #1
 6607 032a 1A70     		strb	r2, [r3]
1996:..\src/interruptions.c ****             count = 0;
 6608              		.loc 1 1996 0
 6609 032c 9A4B     		ldr	r3, .L542+20
 6610 032e 0022     		movs	r2, #0
 6611 0330 1A80     		strh	r2, [r3]	@ movhi
1997:..\src/interruptions.c ****             v_count = 0;
 6612              		.loc 1 1997 0
 6613 0332 974B     		ldr	r3, .L542+12
 6614 0334 0022     		movs	r2, #0
 6615 0336 1A60     		str	r2, [r3]
 6616 0338 2CE0     		b	.L412
 6617              	.L411:
1998:..\src/interruptions.c ****         }
1999:..\src/interruptions.c ****         else {  
2000:..\src/interruptions.c ****             // wait for battery voltage stabilization
2001:..\src/interruptions.c ****             if (v_count < 1000) {
 6618              		.loc 1 2001 0
 6619 033a 954B     		ldr	r3, .L542+12
 6620 033c 1B68     		ldr	r3, [r3]
 6621 033e B3F57A7F 		cmp	r3, #1000
 6622 0342 04D2     		bcs	.L413
2002:..\src/interruptions.c ****                 v_count = v_count + 1;
 6623              		.loc 1 2002 0
 6624 0344 924B     		ldr	r3, .L542+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 155


 6625 0346 1B68     		ldr	r3, [r3]
 6626 0348 0133     		adds	r3, r3, #1
 6627 034a 914A     		ldr	r2, .L542+12
 6628 034c 1360     		str	r3, [r2]
 6629              	.L413:
2003:..\src/interruptions.c ****             }
2004:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6630              		.loc 1 2004 0
 6631 034e 8D4B     		ldr	r3, .L542
 6632 0350 0022     		movs	r2, #0
 6633 0352 1A70     		strb	r2, [r3]
 6634 0354 1AE0     		b	.L414
 6635              	.L415:
2005:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6636              		.loc 1 2005 0 discriminator 3
 6637 0356 8B4B     		ldr	r3, .L542
 6638 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6639 035a 1C46     		mov	r4, r3
 6640 035c 894B     		ldr	r3, .L542
 6641 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6642 0360 1A46     		mov	r2, r3
 6643 0362 8E4B     		ldr	r3, .L542+24
 6644 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6645 0368 864B     		ldr	r3, .L542
 6646 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6647 036c DB00     		lsls	r3, r3, #3
 6648 036e 8C4A     		ldr	r2, .L542+28
 6649 0370 1344     		add	r3, r3, r2
 6650 0372 1946     		mov	r1, r3
 6651 0374 FFF7FEFF 		bl	filter
 6652 0378 0246     		mov	r2, r0
 6653 037a 8A4B     		ldr	r3, .L542+32
 6654 037c 43F82420 		str	r2, [r3, r4, lsl #2]
2004:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6655              		.loc 1 2004 0 discriminator 3
 6656 0380 804B     		ldr	r3, .L542
 6657 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6658 0384 0133     		adds	r3, r3, #1
 6659 0386 DAB2     		uxtb	r2, r3
 6660 0388 7E4B     		ldr	r3, .L542
 6661 038a 1A70     		strb	r2, [r3]
 6662              	.L414:
2004:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6663              		.loc 1 2004 0 is_stmt 0 discriminator 1
 6664 038c 7D4B     		ldr	r3, .L542
 6665 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6666 0390 012B     		cmp	r3, #1
 6667 0392 E0D9     		bls	.L415
 6668              	.L412:
2006:..\src/interruptions.c ****             }
2007:..\src/interruptions.c ****         }
2008:..\src/interruptions.c **** 
2009:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6669              		.loc 1 2009 0 is_stmt 1
 6670 0394 7B4B     		ldr	r3, .L542
 6671 0396 0022     		movs	r2, #0
 6672 0398 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 156


 6673 039a 17E0     		b	.L416
 6674              	.L418:
2010:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6675              		.loc 1 2010 0
 6676 039c 794B     		ldr	r3, .L542
 6677 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6678 03a0 1946     		mov	r1, r3
 6679 03a2 814A     		ldr	r2, .L542+36
 6680 03a4 0B46     		mov	r3, r1
 6681 03a6 DB00     		lsls	r3, r3, #3
 6682 03a8 5B1A     		subs	r3, r3, r1
 6683 03aa 1B01     		lsls	r3, r3, #4
 6684 03ac 1344     		add	r3, r3, r2
 6685 03ae E133     		adds	r3, r3, #225
 6686 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6687 03b2 002B     		cmp	r3, #0
 6688 03b4 04D0     		beq	.L417
2011:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6689              		.loc 1 2011 0
 6690 03b6 734B     		ldr	r3, .L542
 6691 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6692 03ba 1846     		mov	r0, r3
 6693 03bc FFF7FEFF 		bl	pwm_limit_search
 6694              	.L417:
2009:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6695              		.loc 1 2009 0 discriminator 2
 6696 03c0 704B     		ldr	r3, .L542
 6697 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6698 03c4 0133     		adds	r3, r3, #1
 6699 03c6 DAB2     		uxtb	r2, r3
 6700 03c8 6E4B     		ldr	r3, .L542
 6701 03ca 1A70     		strb	r2, [r3]
 6702              	.L416:
2009:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6703              		.loc 1 2009 0 is_stmt 0 discriminator 1
 6704 03cc 6D4B     		ldr	r3, .L542
 6705 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6706 03d0 012B     		cmp	r3, #1
 6707 03d2 E3D9     		bls	.L418
2012:..\src/interruptions.c ****         }
2013:..\src/interruptions.c ****         
2014:..\src/interruptions.c ****         // Filter and Set currents
2015:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6708              		.loc 1 2015 0 is_stmt 1
 6709 03d4 744B     		ldr	r3, .L542+36
 6710 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6711 03da 002B     		cmp	r3, #0
 6712 03dc 21D1     		bne	.L419
2016:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6713              		.loc 1 2016 0
 6714 03de 724B     		ldr	r3, .L542+36
 6715 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6716 03e4 1C46     		mov	r4, r3
 6717 03e6 714B     		ldr	r3, .L542+40
 6718 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 6719 03ec A3F5CE63 		sub	r3, r3, #1648
 6720 03f0 45F66A02 		movw	r2, #22634
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 157


 6721 03f4 02FB03F3 		mul	r3, r2, r3
 6722 03f8 5B13     		asrs	r3, r3, #13
 6723 03fa 1BB2     		sxth	r3, r3
 6724 03fc 1A46     		mov	r2, r3
 6725 03fe 6C4B     		ldr	r3, .L542+44
 6726 0400 93F90030 		ldrsb	r3, [r3]
 6727 0404 03FB02F3 		mul	r3, r3, r2
 6728 0408 6A49     		ldr	r1, .L542+48
 6729 040a 1846     		mov	r0, r3
 6730 040c FFF7FEFF 		bl	filter
 6731 0410 0146     		mov	r1, r0
 6732 0412 694A     		ldr	r2, .L542+52
 6733 0414 3423     		movs	r3, #52
 6734 0416 03FB04F3 		mul	r3, r3, r4
 6735 041a 1344     		add	r3, r3, r2
 6736 041c 0C33     		adds	r3, r3, #12
 6737 041e 1960     		str	r1, [r3]
 6738 0420 1BE0     		b	.L420
 6739              	.L419:
2017:..\src/interruptions.c ****         } else { // [GS]
2018:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6740              		.loc 1 2018 0
 6741 0422 614B     		ldr	r3, .L542+36
 6742 0424 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6743 0428 1846     		mov	r0, r3
 6744 042a 604B     		ldr	r3, .L542+40
 6745 042c B3F90230 		ldrsh	r3, [r3, #2]
 6746 0430 A3F26362 		subw	r2, r3, #1635
 6747 0434 1346     		mov	r3, r2
 6748 0436 1B01     		lsls	r3, r3, #4
 6749 0438 9B1A     		subs	r3, r3, r2
 6750 043a 5B01     		lsls	r3, r3, #5
 6751 043c 1B11     		asrs	r3, r3, #4
 6752 043e 1BB2     		sxth	r3, r3
 6753 0440 1A46     		mov	r2, r3
 6754 0442 5B4B     		ldr	r3, .L542+44
 6755 0444 93F90030 		ldrsb	r3, [r3]
 6756 0448 03FB02F2 		mul	r2, r3, r2
 6757 044c 5A49     		ldr	r1, .L542+52
 6758 044e 3423     		movs	r3, #52
 6759 0450 03FB00F3 		mul	r3, r3, r0
 6760 0454 0B44     		add	r3, r3, r1
 6761 0456 0C33     		adds	r3, r3, #12
 6762 0458 1A60     		str	r2, [r3]
 6763              	.L420:
2019:..\src/interruptions.c ****         }  
2020:..\src/interruptions.c **** 
2021:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2022:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6764              		.loc 1 2022 0
 6765 045a 534B     		ldr	r3, .L542+36
 6766 045c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6767 0460 1D46     		mov	r5, r3
 6768 0462 514B     		ldr	r3, .L542+36
 6769 0464 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6770 0468 1946     		mov	r1, r3
 6771 046a 534A     		ldr	r2, .L542+52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 158


 6772 046c 3423     		movs	r3, #52
 6773 046e 03FB01F3 		mul	r3, r3, r1
 6774 0472 1344     		add	r3, r3, r2
 6775 0474 0C33     		adds	r3, r3, #12
 6776 0476 1C68     		ldr	r4, [r3]
 6777 0478 4B4B     		ldr	r3, .L542+36
 6778 047a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6779 047e 1946     		mov	r1, r3
 6780 0480 4D4A     		ldr	r2, .L542+52
 6781 0482 3423     		movs	r3, #52
 6782 0484 03FB01F3 		mul	r3, r3, r1
 6783 0488 1344     		add	r3, r3, r2
 6784 048a 1A68     		ldr	r2, [r3]
 6785 048c 464B     		ldr	r3, .L542+36
 6786 048e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6787 0492 1846     		mov	r0, r3
 6788 0494 4449     		ldr	r1, .L542+36
 6789 0496 0346     		mov	r3, r0
 6790 0498 5B00     		lsls	r3, r3, #1
 6791 049a 0344     		add	r3, r3, r0
 6792 049c 1B01     		lsls	r3, r3, #4
 6793 049e 0B44     		add	r3, r3, r1
 6794 04a0 03F29513 		addw	r3, r3, #405
 6795 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6796 04a6 42FA03F6 		asr	r6, r2, r3
 6797 04aa 3F4B     		ldr	r3, .L542+36
 6798 04ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6799 04b0 1946     		mov	r1, r3
 6800 04b2 414A     		ldr	r2, .L542+52
 6801 04b4 3423     		movs	r3, #52
 6802 04b6 03FB01F3 		mul	r3, r3, r1
 6803 04ba 1344     		add	r3, r3, r2
 6804 04bc 1C33     		adds	r3, r3, #28
 6805 04be 1A68     		ldr	r2, [r3]
 6806 04c0 394B     		ldr	r3, .L542+36
 6807 04c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6808 04c6 1846     		mov	r0, r3
 6809 04c8 3749     		ldr	r1, .L542+36
 6810 04ca 0346     		mov	r3, r0
 6811 04cc 5B00     		lsls	r3, r3, #1
 6812 04ce 0344     		add	r3, r3, r0
 6813 04d0 1B01     		lsls	r3, r3, #4
 6814 04d2 0B44     		add	r3, r3, r1
 6815 04d4 03F29513 		addw	r3, r3, #405
 6816 04d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6817 04da 42FA03FE 		asr	lr, r2, r3
 6818 04de 374B     		ldr	r3, .L542+56
 6819 04e0 1A68     		ldr	r2, [r3]
 6820 04e2 314B     		ldr	r3, .L542+36
 6821 04e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6822 04e8 1846     		mov	r0, r3
 6823 04ea 2F49     		ldr	r1, .L542+36
 6824 04ec 0346     		mov	r3, r0
 6825 04ee 5B00     		lsls	r3, r3, #1
 6826 04f0 0344     		add	r3, r3, r0
 6827 04f2 1B01     		lsls	r3, r3, #4
 6828 04f4 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 159


 6829 04f6 03F29513 		addw	r3, r3, #405
 6830 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6831 04fc 42FA03F3 		asr	r3, r2, r3
 6832 0500 7246     		mov	r2, lr
 6833 0502 3146     		mov	r1, r6
 6834 0504 0020     		movs	r0, #0
 6835 0506 FFF7FEFF 		bl	curr_estim
 6836 050a 0346     		mov	r3, r0
 6837 050c E31A     		subs	r3, r4, r3
 6838 050e 2C49     		ldr	r1, .L542+60
 6839 0510 1846     		mov	r0, r3
 6840 0512 FFF7FEFF 		bl	filter
 6841 0516 0346     		mov	r3, r0
 6842 0518 1BB2     		sxth	r3, r3
 6843 051a 1946     		mov	r1, r3
 6844 051c 264A     		ldr	r2, .L542+52
 6845 051e 3423     		movs	r3, #52
 6846 0520 03FB05F3 		mul	r3, r3, r5
 6847 0524 1344     		add	r3, r3, r2
 6848 0526 1033     		adds	r3, r3, #16
 6849 0528 1960     		str	r1, [r3]
2023:..\src/interruptions.c ****         
2024:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2025:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6850              		.loc 1 2025 0
 6851 052a 264B     		ldr	r3, .L542+64
 6852 052c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6853 052e 042B     		cmp	r3, #4
 6854 0530 40F2D080 		bls	.L421
2026:..\src/interruptions.c ****             // Filter and Set currents
2027:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6855              		.loc 1 2027 0
 6856 0534 1C4B     		ldr	r3, .L542+36
 6857 0536 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6858 053a 002B     		cmp	r3, #0
 6859 053c 46D1     		bne	.L422
2028:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6860              		.loc 1 2028 0
 6861 053e 1A4B     		ldr	r3, .L542+36
 6862 0540 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6863 0544 1C46     		mov	r4, r3
 6864 0546 194B     		ldr	r3, .L542+40
 6865 0548 B3F90A30 		ldrsh	r3, [r3, #10]
 6866 054c A3F5CE63 		sub	r3, r3, #1648
 6867 0550 45F66A02 		movw	r2, #22634
 6868 0554 02FB03F3 		mul	r3, r2, r3
 6869 0558 5B13     		asrs	r3, r3, #13
 6870 055a 1BB2     		sxth	r3, r3
 6871 055c 1A46     		mov	r2, r3
 6872 055e 144B     		ldr	r3, .L542+44
 6873 0560 93F90030 		ldrsb	r3, [r3]
 6874 0564 03FB02F3 		mul	r3, r3, r2
 6875 0568 1749     		ldr	r1, .L542+68
 6876 056a 1846     		mov	r0, r3
 6877 056c FFF7FEFF 		bl	filter
 6878 0570 0146     		mov	r1, r0
 6879 0572 114A     		ldr	r2, .L542+52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 160


 6880 0574 3423     		movs	r3, #52
 6881 0576 03FB04F3 		mul	r3, r3, r4
 6882 057a 1344     		add	r3, r3, r2
 6883 057c 0C33     		adds	r3, r3, #12
 6884 057e 1960     		str	r1, [r3]
 6885 0580 40E0     		b	.L423
 6886              	.L543:
 6887 0582 00BF     		.align	2
 6888              	.L542:
 6889 0584 76010000 		.word	idx.10653
 6890 0588 00000000 		.word	g_adc_meas
 6891 058c 00000000 		.word	c_mem
 6892 0590 78010000 		.word	v_count.10652
 6893 0594 00000000 		.word	tension_valid
 6894 0598 74010000 		.word	count.10651
 6895 059c 00000000 		.word	dev_tension
 6896 05a0 00000000 		.word	filt_v
 6897 05a4 00000000 		.word	dev_tension_f
 6898 05a8 00000000 		.word	g_mem
 6899 05ac 00000000 		.word	ADC_buf
 6900 05b0 00000000 		.word	pwm_sign
 6901 05b4 00000000 		.word	filt_i
 6902 05b8 00000000 		.word	g_meas
 6903 05bc 00000000 		.word	g_ref
 6904 05c0 00000000 		.word	filt_curr_diff
 6905 05c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6906 05c8 08000000 		.word	filt_i+8
 6907              	.L422:
2029:..\src/interruptions.c ****             } else { // [GS]
2030:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6908              		.loc 1 2030 0
 6909 05cc 954B     		ldr	r3, .L544
 6910 05ce 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6911 05d2 1846     		mov	r0, r3
 6912 05d4 944B     		ldr	r3, .L544+4
 6913 05d6 B3F90A30 		ldrsh	r3, [r3, #10]
 6914 05da A3F26362 		subw	r2, r3, #1635
 6915 05de 1346     		mov	r3, r2
 6916 05e0 1B01     		lsls	r3, r3, #4
 6917 05e2 9B1A     		subs	r3, r3, r2
 6918 05e4 5B01     		lsls	r3, r3, #5
 6919 05e6 1B11     		asrs	r3, r3, #4
 6920 05e8 1BB2     		sxth	r3, r3
 6921 05ea 1A46     		mov	r2, r3
 6922 05ec 8F4B     		ldr	r3, .L544+8
 6923 05ee 93F90030 		ldrsb	r3, [r3]
 6924 05f2 03FB02F2 		mul	r2, r3, r2
 6925 05f6 8E49     		ldr	r1, .L544+12
 6926 05f8 3423     		movs	r3, #52
 6927 05fa 03FB00F3 		mul	r3, r3, r0
 6928 05fe 0B44     		add	r3, r3, r1
 6929 0600 0C33     		adds	r3, r3, #12
 6930 0602 1A60     		str	r2, [r3]
 6931              	.L423:
2031:..\src/interruptions.c ****             }  
2032:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
2033:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 161


2034:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6932              		.loc 1 2034 0
 6933 0604 874B     		ldr	r3, .L544
 6934 0606 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6935 060a 1D46     		mov	r5, r3
 6936 060c 854B     		ldr	r3, .L544
 6937 060e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6938 0612 1946     		mov	r1, r3
 6939 0614 864A     		ldr	r2, .L544+12
 6940 0616 3423     		movs	r3, #52
 6941 0618 03FB01F3 		mul	r3, r3, r1
 6942 061c 1344     		add	r3, r3, r2
 6943 061e 0C33     		adds	r3, r3, #12
 6944 0620 1C68     		ldr	r4, [r3]
 6945 0622 804B     		ldr	r3, .L544
 6946 0624 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6947 0628 1946     		mov	r1, r3
 6948 062a 814A     		ldr	r2, .L544+12
 6949 062c 3423     		movs	r3, #52
 6950 062e 03FB01F3 		mul	r3, r3, r1
 6951 0632 1344     		add	r3, r3, r2
 6952 0634 1A68     		ldr	r2, [r3]
 6953 0636 7B4B     		ldr	r3, .L544
 6954 0638 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6955 063c 1846     		mov	r0, r3
 6956 063e 7949     		ldr	r1, .L544
 6957 0640 0346     		mov	r3, r0
 6958 0642 5B00     		lsls	r3, r3, #1
 6959 0644 0344     		add	r3, r3, r0
 6960 0646 1B01     		lsls	r3, r3, #4
 6961 0648 0B44     		add	r3, r3, r1
 6962 064a 03F29513 		addw	r3, r3, #405
 6963 064e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6964 0650 42FA03F6 		asr	r6, r2, r3
 6965 0654 734B     		ldr	r3, .L544
 6966 0656 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6967 065a 1946     		mov	r1, r3
 6968 065c 744A     		ldr	r2, .L544+12
 6969 065e 3423     		movs	r3, #52
 6970 0660 03FB01F3 		mul	r3, r3, r1
 6971 0664 1344     		add	r3, r3, r2
 6972 0666 1C33     		adds	r3, r3, #28
 6973 0668 1A68     		ldr	r2, [r3]
 6974 066a 6E4B     		ldr	r3, .L544
 6975 066c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6976 0670 1846     		mov	r0, r3
 6977 0672 6C49     		ldr	r1, .L544
 6978 0674 0346     		mov	r3, r0
 6979 0676 5B00     		lsls	r3, r3, #1
 6980 0678 0344     		add	r3, r3, r0
 6981 067a 1B01     		lsls	r3, r3, #4
 6982 067c 0B44     		add	r3, r3, r1
 6983 067e 03F29513 		addw	r3, r3, #405
 6984 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6985 0684 42FA03FE 		asr	lr, r2, r3
 6986 0688 6A4B     		ldr	r3, .L544+16
 6987 068a 1A69     		ldr	r2, [r3, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 162


 6988 068c 654B     		ldr	r3, .L544
 6989 068e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6990 0692 1846     		mov	r0, r3
 6991 0694 6349     		ldr	r1, .L544
 6992 0696 0346     		mov	r3, r0
 6993 0698 5B00     		lsls	r3, r3, #1
 6994 069a 0344     		add	r3, r3, r0
 6995 069c 1B01     		lsls	r3, r3, #4
 6996 069e 0B44     		add	r3, r3, r1
 6997 06a0 03F29513 		addw	r3, r3, #405
 6998 06a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6999 06a6 42FA03F3 		asr	r3, r2, r3
 7000 06aa 7246     		mov	r2, lr
 7001 06ac 3146     		mov	r1, r6
 7002 06ae 0120     		movs	r0, #1
 7003 06b0 FFF7FEFF 		bl	curr_estim
 7004 06b4 0346     		mov	r3, r0
 7005 06b6 E31A     		subs	r3, r4, r3
 7006 06b8 5F49     		ldr	r1, .L544+20
 7007 06ba 1846     		mov	r0, r3
 7008 06bc FFF7FEFF 		bl	filter
 7009 06c0 0346     		mov	r3, r0
 7010 06c2 1BB2     		sxth	r3, r3
 7011 06c4 1946     		mov	r1, r3
 7012 06c6 5A4A     		ldr	r2, .L544+12
 7013 06c8 3423     		movs	r3, #52
 7014 06ca 03FB05F3 		mul	r3, r3, r5
 7015 06ce 1344     		add	r3, r3, r2
 7016 06d0 1033     		adds	r3, r3, #16
 7017 06d2 1960     		str	r1, [r3]
 7018              	.L421:
2035:..\src/interruptions.c ****         }
2036:..\src/interruptions.c ****     
2037:..\src/interruptions.c ****         // Check Interrupt 
2038:..\src/interruptions.c ****     
2039:..\src/interruptions.c ****         if (interrupt_flag){
 7019              		.loc 1 2039 0
 7020 06d4 594B     		ldr	r3, .L544+24
 7021 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7022 06d8 002B     		cmp	r3, #0
 7023 06da 06D0     		beq	.L410
2040:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7024              		.loc 1 2040 0
 7025 06dc 574B     		ldr	r3, .L544+24
 7026 06de 0022     		movs	r2, #0
 7027 06e0 1A70     		strb	r2, [r3]
2041:..\src/interruptions.c ****             interrupt_manager();
 7028              		.loc 1 2041 0
 7029 06e2 FFF7FEFF 		bl	interrupt_manager
 7030 06e6 00E0     		b	.L410
 7031              	.L522:
1950:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7032              		.loc 1 1950 0
 7033 06e8 00BF     		nop
 7034              	.L410:
2042:..\src/interruptions.c ****         }
2043:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 163


2044:..\src/interruptions.c ****     }
2045:..\src/interruptions.c ****     
2046:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2047:..\src/interruptions.c ****         
2048:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2049:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7035              		.loc 1 2049 0
 7036 06ea 554B     		ldr	r3, .L544+28
 7037 06ec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7038 06f0 002B     		cmp	r3, #0
 7039 06f2 05D1     		bne	.L424
2050:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7040              		.loc 1 2050 0
 7041 06f4 534B     		ldr	r3, .L544+32
 7042 06f6 0022     		movs	r2, #0
 7043 06f8 1A70     		strb	r2, [r3]
2051:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7044              		.loc 1 2051 0
 7045 06fa 534B     		ldr	r3, .L544+36
 7046 06fc 0022     		movs	r2, #0
 7047 06fe 1A70     		strb	r2, [r3]
 7048              	.L424:
2052:..\src/interruptions.c ****     }
2053:..\src/interruptions.c **** 
2054:..\src/interruptions.c ****     // EMG 1 calibration state machine
2055:..\src/interruptions.c ****    
2056:..\src/interruptions.c ****     // Calibration state machine
2057:..\src/interruptions.c ****     switch(emg_1_status) {
 7049              		.loc 1 2057 0
 7050 0700 504B     		ldr	r3, .L544+32
 7051 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7052 0704 032B     		cmp	r3, #3
 7053 0706 00F2FC80 		bhi	.L523
 7054 070a 01A2     		adr	r2, .L427
 7055 070c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7056              		.p2align 2
 7057              	.L427:
 7058 0710 21070000 		.word	.L426+1
 7059 0714 D1070000 		.word	.L428+1
 7060 0718 E7070000 		.word	.L429+1
 7061 071c 59080000 		.word	.L430+1
 7062              		.p2align 1
 7063              	.L426:
2058:..\src/interruptions.c ****         case NORMAL: // normal execution
2059:..\src/interruptions.c ****             
2060:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7064              		.loc 1 2060 0
 7065 0720 404B     		ldr	r3, .L544
 7066 0722 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7067 0726 022B     		cmp	r3, #2
 7068 0728 13D0     		beq	.L431
 7069              		.loc 1 2060 0 is_stmt 0 discriminator 1
 7070 072a 3E4B     		ldr	r3, .L544
 7071 072c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7072 0730 032B     		cmp	r3, #3
 7073 0732 0ED0     		beq	.L431
2061:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 164


 7074              		.loc 1 2061 0 is_stmt 1
 7075 0734 424B     		ldr	r3, .L544+28
 7076 0736 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7077 073a 0233     		adds	r3, r3, #2
 7078 073c 3A4A     		ldr	r2, .L544+4
 7079 073e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7080 0742 A3F26763 		subw	r3, r3, #1639
 7081 0746 5722     		movs	r2, #87
 7082 0748 02FB03F3 		mul	r3, r2, r3
 7083 074c 5B11     		asrs	r3, r3, #5
 7084 074e 7B60     		str	r3, [r7, #4]
 7085 0750 07E0     		b	.L432
 7086              	.L431:
2062:..\src/interruptions.c ****             }
2063:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2064:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7087              		.loc 1 2064 0
 7088 0752 3B4B     		ldr	r3, .L544+28
 7089 0754 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7090 0758 0233     		adds	r3, r3, #2
 7091 075a 334A     		ldr	r2, .L544+4
 7092 075c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7093 0760 7B60     		str	r3, [r7, #4]
 7094              	.L432:
2065:..\src/interruptions.c ****             }
2066:..\src/interruptions.c ****             
2067:..\src/interruptions.c ****             if (i_aux < 0) 
 7095              		.loc 1 2067 0
 7096 0762 7B68     		ldr	r3, [r7, #4]
 7097 0764 002B     		cmp	r3, #0
 7098 0766 01DA     		bge	.L433
2068:..\src/interruptions.c ****                 i_aux = 0;
 7099              		.loc 1 2068 0
 7100 0768 0023     		movs	r3, #0
 7101 076a 7B60     		str	r3, [r7, #4]
 7102              	.L433:
2069:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7103              		.loc 1 2069 0
 7104 076c 3749     		ldr	r1, .L544+40
 7105 076e 7868     		ldr	r0, [r7, #4]
 7106 0770 FFF7FEFF 		bl	filter
 7107 0774 7860     		str	r0, [r7, #4]
2070:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7108              		.loc 1 2070 0
 7109 0776 7B68     		ldr	r3, [r7, #4]
 7110 0778 9B02     		lsls	r3, r3, #10
 7111 077a 1A46     		mov	r2, r3
 7112 077c 294B     		ldr	r3, .L544
 7113 077e D3F8F431 		ldr	r3, [r3, #500]
 7114 0782 B2FBF3F3 		udiv	r3, r2, r3
 7115 0786 7B60     		str	r3, [r7, #4]
2071:..\src/interruptions.c **** 
2072:..\src/interruptions.c ****             if (interrupt_flag){
 7116              		.loc 1 2072 0
 7117 0788 2C4B     		ldr	r3, .L544+24
 7118 078a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7119 078c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 165


 7120 078e 04D0     		beq	.L434
2073:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7121              		.loc 1 2073 0
 7122 0790 2A4B     		ldr	r3, .L544+24
 7123 0792 0022     		movs	r2, #0
 7124 0794 1A70     		strb	r2, [r3]
2074:..\src/interruptions.c ****                 interrupt_manager();
 7125              		.loc 1 2074 0
 7126 0796 FFF7FEFF 		bl	interrupt_manager
 7127              	.L434:
2075:..\src/interruptions.c ****             }
2076:..\src/interruptions.c ****             //Saturation
2077:..\src/interruptions.c ****             if (i_aux < 0)
 7128              		.loc 1 2077 0
 7129 079a 7B68     		ldr	r3, [r7, #4]
 7130 079c 002B     		cmp	r3, #0
 7131 079e 02DA     		bge	.L435
2078:..\src/interruptions.c ****                 i_aux = 0;
 7132              		.loc 1 2078 0
 7133 07a0 0023     		movs	r3, #0
 7134 07a2 7B60     		str	r3, [r7, #4]
 7135 07a4 06E0     		b	.L436
 7136              	.L435:
2079:..\src/interruptions.c ****             else 
2080:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7137              		.loc 1 2080 0
 7138 07a6 7B68     		ldr	r3, [r7, #4]
 7139 07a8 B3F5806F 		cmp	r3, #1024
 7140 07ac 02DD     		ble	.L436
2081:..\src/interruptions.c ****                     i_aux = 1024;
 7141              		.loc 1 2081 0
 7142 07ae 4FF48063 		mov	r3, #1024
 7143 07b2 7B60     		str	r3, [r7, #4]
 7144              	.L436:
2082:..\src/interruptions.c ****             
2083:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7145              		.loc 1 2083 0
 7146 07b4 264A     		ldr	r2, .L544+44
 7147 07b6 7B68     		ldr	r3, [r7, #4]
 7148 07b8 1360     		str	r3, [r2]
2084:..\src/interruptions.c **** 
2085:..\src/interruptions.c ****             if (interrupt_flag){
 7149              		.loc 1 2085 0
 7150 07ba 204B     		ldr	r3, .L544+24
 7151 07bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7152 07be 002B     		cmp	r3, #0
 7153 07c0 00F0A180 		beq	.L524
2086:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7154              		.loc 1 2086 0
 7155 07c4 1D4B     		ldr	r3, .L544+24
 7156 07c6 0022     		movs	r2, #0
 7157 07c8 1A70     		strb	r2, [r3]
2087:..\src/interruptions.c ****                 interrupt_manager();
 7158              		.loc 1 2087 0
 7159 07ca FFF7FEFF 		bl	interrupt_manager
2088:..\src/interruptions.c ****             }
2089:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 166


2090:..\src/interruptions.c ****             break;
 7160              		.loc 1 2090 0
 7161 07ce 9AE0     		b	.L524
 7162              	.L428:
2091:..\src/interruptions.c **** 
2092:..\src/interruptions.c ****         case RESET: // reset variables
2093:..\src/interruptions.c ****             emg_counter_1 = 0;
 7163              		.loc 1 2093 0
 7164 07d0 204B     		ldr	r3, .L544+48
 7165 07d2 0022     		movs	r2, #0
 7166 07d4 1A80     		strh	r2, [r3]	@ movhi
2094:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7167              		.loc 1 2094 0
 7168 07d6 134B     		ldr	r3, .L544
 7169 07d8 0022     		movs	r2, #0
 7170 07da C3F8F421 		str	r2, [r3, #500]
2095:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7171              		.loc 1 2095 0
 7172 07de 194B     		ldr	r3, .L544+32
 7173 07e0 0222     		movs	r2, #2
 7174 07e2 1A70     		strb	r2, [r3]
2096:..\src/interruptions.c ****             break;
 7175              		.loc 1 2096 0
 7176 07e4 94E0     		b	.L438
 7177              	.L429:
2097:..\src/interruptions.c **** 
2098:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2099:..\src/interruptions.c ****             emg_counter_1++;
 7178              		.loc 1 2099 0
 7179 07e6 1B4B     		ldr	r3, .L544+48
 7180 07e8 1B88     		ldrh	r3, [r3]
 7181 07ea 0133     		adds	r3, r3, #1
 7182 07ec 9AB2     		uxth	r2, r3
 7183 07ee 194B     		ldr	r3, .L544+48
 7184 07f0 1A80     		strh	r2, [r3]	@ movhi
2100:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7185              		.loc 1 2100 0
 7186 07f2 184B     		ldr	r3, .L544+48
 7187 07f4 1B88     		ldrh	r3, [r3]
 7188 07f6 B3F5FA7F 		cmp	r3, #500
 7189 07fa 40F08680 		bne	.L525
2101:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7190              		.loc 1 2101 0
 7191 07fe 154B     		ldr	r3, .L544+48
 7192 0800 0022     		movs	r2, #0
 7193 0802 1A80     		strh	r2, [r3]	@ movhi
2102:..\src/interruptions.c ****                 LED_control(1);
 7194              		.loc 1 2102 0
 7195 0804 0120     		movs	r0, #1
 7196 0806 FFF7FEFF 		bl	LED_control
2103:..\src/interruptions.c **** 				
2104:..\src/interruptions.c ****                 if (interrupt_flag){
 7197              		.loc 1 2104 0
 7198 080a 0C4B     		ldr	r3, .L544+24
 7199 080c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7200 080e 002B     		cmp	r3, #0
 7201 0810 04D0     		beq	.L440
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 167


2105:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7202              		.loc 1 2105 0
 7203 0812 0A4B     		ldr	r3, .L544+24
 7204 0814 0022     		movs	r2, #0
 7205 0816 1A70     		strb	r2, [r3]
2106:..\src/interruptions.c ****                     interrupt_manager();
 7206              		.loc 1 2106 0
 7207 0818 FFF7FEFF 		bl	interrupt_manager
 7208              	.L440:
2107:..\src/interruptions.c ****                 }
2108:..\src/interruptions.c ****                 
2109:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7209              		.loc 1 2109 0
 7210 081c 094B     		ldr	r3, .L544+32
 7211 081e 0322     		movs	r2, #3
 7212 0820 1A70     		strb	r2, [r3]
2110:..\src/interruptions.c ****             }
2111:..\src/interruptions.c ****             break;
 7213              		.loc 1 2111 0
 7214 0822 72E0     		b	.L525
 7215              	.L545:
 7216              		.align	2
 7217              	.L544:
 7218 0824 00000000 		.word	g_mem
 7219 0828 00000000 		.word	ADC_buf
 7220 082c 00000000 		.word	pwm_sign
 7221 0830 00000000 		.word	g_meas
 7222 0834 00000000 		.word	g_ref
 7223 0838 08000000 		.word	filt_curr_diff+8
 7224 083c 00000000 		.word	interrupt_flag
 7225 0840 00000000 		.word	c_mem
 7226 0844 00000000 		.word	emg_1_status
 7227 0848 00000000 		.word	emg_2_status
 7228 084c 00000000 		.word	filt_emg
 7229 0850 00000000 		.word	g_adc_meas
 7230 0854 7C010000 		.word	emg_counter_1.10644
 7231              	.L430:
2112:..\src/interruptions.c **** 
2113:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2114:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2115:..\src/interruptions.c ****             emg_counter_1++;
 7232              		.loc 1 2115 0
 7233 0858 AF4B     		ldr	r3, .L546
 7234 085a 1B88     		ldrh	r3, [r3]
 7235 085c 0133     		adds	r3, r3, #1
 7236 085e 9AB2     		uxth	r2, r3
 7237 0860 AD4B     		ldr	r3, .L546
 7238 0862 1A80     		strh	r2, [r3]	@ movhi
2116:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7239              		.loc 1 2116 0
 7240 0864 AD4B     		ldr	r3, .L546+4
 7241 0866 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7242 086a 0233     		adds	r3, r3, #2
 7243 086c AC4A     		ldr	r2, .L546+8
 7244 086e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7245 0872 002B     		cmp	r3, #0
 7246 0874 07DA     		bge	.L441
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 168


2117:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7247              		.loc 1 2117 0
 7248 0876 A94B     		ldr	r3, .L546+4
 7249 0878 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7250 087c 0233     		adds	r3, r3, #2
 7251 087e A84A     		ldr	r2, .L546+8
 7252 0880 0021     		movs	r1, #0
 7253 0882 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7254              	.L441:
2118:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7255              		.loc 1 2118 0
 7256 0886 A54B     		ldr	r3, .L546+4
 7257 0888 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7258 088c 0233     		adds	r3, r3, #2
 7259 088e A44A     		ldr	r2, .L546+8
 7260 0890 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7261 0894 A349     		ldr	r1, .L546+12
 7262 0896 1846     		mov	r0, r3
 7263 0898 FFF7FEFF 		bl	filter
 7264 089c 0246     		mov	r2, r0
 7265 089e A24B     		ldr	r3, .L546+16
 7266 08a0 D3F8F431 		ldr	r3, [r3, #500]
 7267 08a4 1344     		add	r3, r3, r2
 7268 08a6 A04A     		ldr	r2, .L546+16
 7269 08a8 C2F8F431 		str	r3, [r2, #500]
2119:..\src/interruptions.c ****             
2120:..\src/interruptions.c ****             if (interrupt_flag){
 7270              		.loc 1 2120 0
 7271 08ac 9F4B     		ldr	r3, .L546+20
 7272 08ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7273 08b0 002B     		cmp	r3, #0
 7274 08b2 04D0     		beq	.L442
2121:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7275              		.loc 1 2121 0
 7276 08b4 9D4B     		ldr	r3, .L546+20
 7277 08b6 0022     		movs	r2, #0
 7278 08b8 1A70     		strb	r2, [r3]
2122:..\src/interruptions.c ****                 interrupt_manager();
 7279              		.loc 1 2122 0
 7280 08ba FFF7FEFF 		bl	interrupt_manager
 7281              	.L442:
2123:..\src/interruptions.c ****             }
2124:..\src/interruptions.c ****             
2125:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7282              		.loc 1 2125 0
 7283 08be 964B     		ldr	r3, .L546
 7284 08c0 1B88     		ldrh	r3, [r3]
 7285 08c2 B3F57A7F 		cmp	r3, #1000
 7286 08c6 22D1     		bne	.L526
2126:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7287              		.loc 1 2126 0
 7288 08c8 974B     		ldr	r3, .L546+16
 7289 08ca D3F8F431 		ldr	r3, [r3, #500]
 7290 08ce 984A     		ldr	r2, .L546+24
 7291 08d0 A2FB0323 		umull	r2, r3, r2, r3
 7292 08d4 9B09     		lsrs	r3, r3, #6
 7293 08d6 944A     		ldr	r2, .L546+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 169


 7294 08d8 C2F8F431 		str	r3, [r2, #500]
2127:..\src/interruptions.c **** 
2128:..\src/interruptions.c ****                 if (interrupt_flag){
 7295              		.loc 1 2128 0
 7296 08dc 934B     		ldr	r3, .L546+20
 7297 08de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7298 08e0 002B     		cmp	r3, #0
 7299 08e2 04D0     		beq	.L444
2129:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7300              		.loc 1 2129 0
 7301 08e4 914B     		ldr	r3, .L546+20
 7302 08e6 0022     		movs	r2, #0
 7303 08e8 1A70     		strb	r2, [r3]
2130:..\src/interruptions.c ****                     interrupt_manager();
 7304              		.loc 1 2130 0
 7305 08ea FFF7FEFF 		bl	interrupt_manager
 7306              	.L444:
2131:..\src/interruptions.c ****                 }                    
2132:..\src/interruptions.c ****                 
2133:..\src/interruptions.c ****                 LED_control(0);
 7307              		.loc 1 2133 0
 7308 08ee 0020     		movs	r0, #0
 7309 08f0 FFF7FEFF 		bl	LED_control
2134:..\src/interruptions.c **** 				
2135:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7310              		.loc 1 2135 0
 7311 08f4 884B     		ldr	r3, .L546
 7312 08f6 0022     		movs	r2, #0
 7313 08f8 1A80     		strh	r2, [r3]	@ movhi
2136:..\src/interruptions.c **** 
2137:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7314              		.loc 1 2137 0
 7315 08fa 8E4B     		ldr	r3, .L546+28
 7316 08fc 0022     		movs	r2, #0
 7317 08fe 1A70     		strb	r2, [r3]
2138:..\src/interruptions.c ****             }
2139:..\src/interruptions.c ****             break;
 7318              		.loc 1 2139 0
 7319 0900 05E0     		b	.L526
 7320              	.L523:
2140:..\src/interruptions.c **** 
2141:..\src/interruptions.c ****         default:
2142:..\src/interruptions.c ****             break;
 7321              		.loc 1 2142 0
 7322 0902 00BF     		nop
 7323 0904 04E0     		b	.L438
 7324              	.L524:
2090:..\src/interruptions.c **** 
 7325              		.loc 1 2090 0
 7326 0906 00BF     		nop
 7327 0908 02E0     		b	.L438
 7328              	.L525:
2111:..\src/interruptions.c **** 
 7329              		.loc 1 2111 0
 7330 090a 00BF     		nop
 7331 090c 00E0     		b	.L438
 7332              	.L526:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 170


2139:..\src/interruptions.c **** 
 7333              		.loc 1 2139 0
 7334 090e 00BF     		nop
 7335              	.L438:
2143:..\src/interruptions.c ****     }
2144:..\src/interruptions.c **** 
2145:..\src/interruptions.c ****     if (interrupt_flag){
 7336              		.loc 1 2145 0
 7337 0910 864B     		ldr	r3, .L546+20
 7338 0912 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7339 0914 002B     		cmp	r3, #0
 7340 0916 04D0     		beq	.L445
2146:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7341              		.loc 1 2146 0
 7342 0918 844B     		ldr	r3, .L546+20
 7343 091a 0022     		movs	r2, #0
 7344 091c 1A70     		strb	r2, [r3]
2147:..\src/interruptions.c ****         interrupt_manager();
 7345              		.loc 1 2147 0
 7346 091e FFF7FEFF 		bl	interrupt_manager
 7347              	.L445:
2148:..\src/interruptions.c ****     }
2149:..\src/interruptions.c ****     // EMG 2 calibration state machine
2150:..\src/interruptions.c ****     switch(emg_2_status) {
 7348              		.loc 1 2150 0
 7349 0922 854B     		ldr	r3, .L546+32
 7350 0924 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7351 0926 052B     		cmp	r3, #5
 7352 0928 00F2CA81 		bhi	.L527
 7353 092c 01A2     		adr	r2, .L448
 7354 092e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7355 0932 00BF     		.p2align 2
 7356              	.L448:
 7357 0934 4D090000 		.word	.L447+1
 7358 0938 ED090000 		.word	.L449+1
 7359 093c 150A0000 		.word	.L450+1
 7360 0940 530A0000 		.word	.L451+1
 7361 0944 050B0000 		.word	.L452+1
 7362 0948 490B0000 		.word	.L453+1
 7363              		.p2align 1
 7364              	.L447:
2151:..\src/interruptions.c ****         case NORMAL: // normal execution
2152:..\src/interruptions.c ****         
2153:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7365              		.loc 1 2153 0
 7366 094c 764B     		ldr	r3, .L546+16
 7367 094e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7368 0952 022B     		cmp	r3, #2
 7369 0954 14D0     		beq	.L454
 7370              		.loc 1 2153 0 is_stmt 0 discriminator 1
 7371 0956 744B     		ldr	r3, .L546+16
 7372 0958 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7373 095c 032B     		cmp	r3, #3
 7374 095e 0FD0     		beq	.L454
2154:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7375              		.loc 1 2154 0 is_stmt 1
 7376 0960 6E4B     		ldr	r3, .L546+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 171


 7377 0962 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7378 0966 C3F10303 		rsb	r3, r3, #3
 7379 096a 6D4A     		ldr	r2, .L546+8
 7380 096c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7381 0970 A3F26763 		subw	r3, r3, #1639
 7382 0974 5722     		movs	r2, #87
 7383 0976 02FB03F3 		mul	r3, r2, r3
 7384 097a 5B11     		asrs	r3, r3, #5
 7385 097c 7B60     		str	r3, [r7, #4]
 7386 097e 08E0     		b	.L455
 7387              	.L454:
2155:..\src/interruptions.c ****             }
2156:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2157:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7388              		.loc 1 2157 0
 7389 0980 664B     		ldr	r3, .L546+4
 7390 0982 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7391 0986 C3F10303 		rsb	r3, r3, #3
 7392 098a 654A     		ldr	r2, .L546+8
 7393 098c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7394 0990 7B60     		str	r3, [r7, #4]
 7395              	.L455:
2158:..\src/interruptions.c ****             }
2159:..\src/interruptions.c **** 
2160:..\src/interruptions.c ****             if (i_aux < 0)
 7396              		.loc 1 2160 0
 7397 0992 7B68     		ldr	r3, [r7, #4]
 7398 0994 002B     		cmp	r3, #0
 7399 0996 01DA     		bge	.L456
2161:..\src/interruptions.c ****                 i_aux = 0;
 7400              		.loc 1 2161 0
 7401 0998 0023     		movs	r3, #0
 7402 099a 7B60     		str	r3, [r7, #4]
 7403              	.L456:
2162:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7404              		.loc 1 2162 0
 7405 099c 6749     		ldr	r1, .L546+36
 7406 099e 7868     		ldr	r0, [r7, #4]
 7407 09a0 FFF7FEFF 		bl	filter
 7408 09a4 7860     		str	r0, [r7, #4]
2163:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7409              		.loc 1 2163 0
 7410 09a6 7B68     		ldr	r3, [r7, #4]
 7411 09a8 9B02     		lsls	r3, r3, #10
 7412 09aa 1A46     		mov	r2, r3
 7413 09ac 5E4B     		ldr	r3, .L546+16
 7414 09ae D3F8F831 		ldr	r3, [r3, #504]
 7415 09b2 B2FBF3F3 		udiv	r3, r2, r3
 7416 09b6 7B60     		str	r3, [r7, #4]
2164:..\src/interruptions.c **** 
2165:..\src/interruptions.c ****             if (interrupt_flag){
 7417              		.loc 1 2165 0
 7418 09b8 5C4B     		ldr	r3, .L546+20
 7419 09ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7420 09bc 002B     		cmp	r3, #0
 7421 09be 04D0     		beq	.L457
2166:..\src/interruptions.c ****                 interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 172


 7422              		.loc 1 2166 0
 7423 09c0 5A4B     		ldr	r3, .L546+20
 7424 09c2 0022     		movs	r2, #0
 7425 09c4 1A70     		strb	r2, [r3]
2167:..\src/interruptions.c ****                 interrupt_manager();
 7426              		.loc 1 2167 0
 7427 09c6 FFF7FEFF 		bl	interrupt_manager
 7428              	.L457:
2168:..\src/interruptions.c ****             }
2169:..\src/interruptions.c ****             
2170:..\src/interruptions.c ****             if (i_aux < 0) 
 7429              		.loc 1 2170 0
 7430 09ca 7B68     		ldr	r3, [r7, #4]
 7431 09cc 002B     		cmp	r3, #0
 7432 09ce 02DA     		bge	.L458
2171:..\src/interruptions.c ****                 i_aux = 0;
 7433              		.loc 1 2171 0
 7434 09d0 0023     		movs	r3, #0
 7435 09d2 7B60     		str	r3, [r7, #4]
 7436 09d4 06E0     		b	.L459
 7437              	.L458:
2172:..\src/interruptions.c ****             else 
2173:..\src/interruptions.c ****                 if (i_aux > 1024)
 7438              		.loc 1 2173 0
 7439 09d6 7B68     		ldr	r3, [r7, #4]
 7440 09d8 B3F5806F 		cmp	r3, #1024
 7441 09dc 02DD     		ble	.L459
2174:..\src/interruptions.c ****                     i_aux = 1024;
 7442              		.loc 1 2174 0
 7443 09de 4FF48063 		mov	r3, #1024
 7444 09e2 7B60     		str	r3, [r7, #4]
 7445              	.L459:
2175:..\src/interruptions.c ****             
2176:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7446              		.loc 1 2176 0
 7447 09e4 564A     		ldr	r2, .L546+40
 7448 09e6 7B68     		ldr	r3, [r7, #4]
 7449 09e8 5360     		str	r3, [r2, #4]
2177:..\src/interruptions.c **** 
2178:..\src/interruptions.c ****             break;
 7450              		.loc 1 2178 0
 7451 09ea 72E1     		b	.L460
 7452              	.L449:
2179:..\src/interruptions.c **** 
2180:..\src/interruptions.c ****         case RESET: // reset variables
2181:..\src/interruptions.c ****             emg_counter_2 = 0;
 7453              		.loc 1 2181 0
 7454 09ec 554B     		ldr	r3, .L546+44
 7455 09ee 0022     		movs	r2, #0
 7456 09f0 1A80     		strh	r2, [r3]	@ movhi
2182:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7457              		.loc 1 2182 0
 7458 09f2 4D4B     		ldr	r3, .L546+16
 7459 09f4 0022     		movs	r2, #0
 7460 09f6 C3F8F821 		str	r2, [r3, #504]
2183:..\src/interruptions.c **** 
2184:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 173


 7461              		.loc 1 2184 0
 7462 09fa 4C4B     		ldr	r3, .L546+20
 7463 09fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7464 09fe 002B     		cmp	r3, #0
 7465 0a00 04D0     		beq	.L461
2185:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7466              		.loc 1 2185 0
 7467 0a02 4A4B     		ldr	r3, .L546+20
 7468 0a04 0022     		movs	r2, #0
 7469 0a06 1A70     		strb	r2, [r3]
2186:..\src/interruptions.c ****                 interrupt_manager();
 7470              		.loc 1 2186 0
 7471 0a08 FFF7FEFF 		bl	interrupt_manager
 7472              	.L461:
2187:..\src/interruptions.c ****             }
2188:..\src/interruptions.c ****             
2189:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7473              		.loc 1 2189 0
 7474 0a0c 4A4B     		ldr	r3, .L546+32
 7475 0a0e 0422     		movs	r2, #4
 7476 0a10 1A70     		strb	r2, [r3]
2190:..\src/interruptions.c ****             break;
 7477              		.loc 1 2190 0
 7478 0a12 5EE1     		b	.L460
 7479              	.L450:
2191:..\src/interruptions.c **** 
2192:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2193:..\src/interruptions.c ****             emg_counter_2++;
 7480              		.loc 1 2193 0
 7481 0a14 4B4B     		ldr	r3, .L546+44
 7482 0a16 1B88     		ldrh	r3, [r3]
 7483 0a18 0133     		adds	r3, r3, #1
 7484 0a1a 9AB2     		uxth	r2, r3
 7485 0a1c 494B     		ldr	r3, .L546+44
 7486 0a1e 1A80     		strh	r2, [r3]	@ movhi
2194:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7487              		.loc 1 2194 0
 7488 0a20 484B     		ldr	r3, .L546+44
 7489 0a22 1B88     		ldrh	r3, [r3]
 7490 0a24 B3F5FA7F 		cmp	r3, #500
 7491 0a28 40F04C81 		bne	.L528
2195:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7492              		.loc 1 2195 0
 7493 0a2c 454B     		ldr	r3, .L546+44
 7494 0a2e 0022     		movs	r2, #0
 7495 0a30 1A80     		strh	r2, [r3]	@ movhi
2196:..\src/interruptions.c ****                 LED_control(1);
 7496              		.loc 1 2196 0
 7497 0a32 0120     		movs	r0, #1
 7498 0a34 FFF7FEFF 		bl	LED_control
2197:..\src/interruptions.c **** 
2198:..\src/interruptions.c ****                 if (interrupt_flag){
 7499              		.loc 1 2198 0
 7500 0a38 3C4B     		ldr	r3, .L546+20
 7501 0a3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7502 0a3c 002B     		cmp	r3, #0
 7503 0a3e 04D0     		beq	.L463
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 174


2199:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7504              		.loc 1 2199 0
 7505 0a40 3A4B     		ldr	r3, .L546+20
 7506 0a42 0022     		movs	r2, #0
 7507 0a44 1A70     		strb	r2, [r3]
2200:..\src/interruptions.c ****                     interrupt_manager();
 7508              		.loc 1 2200 0
 7509 0a46 FFF7FEFF 		bl	interrupt_manager
 7510              	.L463:
2201:..\src/interruptions.c ****                 }
2202:..\src/interruptions.c ****                 
2203:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7511              		.loc 1 2203 0
 7512 0a4a 3B4B     		ldr	r3, .L546+32
 7513 0a4c 0322     		movs	r2, #3
 7514 0a4e 1A70     		strb	r2, [r3]
2204:..\src/interruptions.c ****             }
2205:..\src/interruptions.c ****             break;
 7515              		.loc 1 2205 0
 7516 0a50 38E1     		b	.L528
 7517              	.L451:
2206:..\src/interruptions.c **** 
2207:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2208:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2209:..\src/interruptions.c ****             emg_counter_2++;
 7518              		.loc 1 2209 0
 7519 0a52 3C4B     		ldr	r3, .L546+44
 7520 0a54 1B88     		ldrh	r3, [r3]
 7521 0a56 0133     		adds	r3, r3, #1
 7522 0a58 9AB2     		uxth	r2, r3
 7523 0a5a 3A4B     		ldr	r3, .L546+44
 7524 0a5c 1A80     		strh	r2, [r3]	@ movhi
2210:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7525              		.loc 1 2210 0
 7526 0a5e 2F4B     		ldr	r3, .L546+4
 7527 0a60 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7528 0a64 C3F10303 		rsb	r3, r3, #3
 7529 0a68 2D4A     		ldr	r2, .L546+8
 7530 0a6a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7531 0a6e 002B     		cmp	r3, #0
 7532 0a70 08DA     		bge	.L464
2211:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7533              		.loc 1 2211 0
 7534 0a72 2A4B     		ldr	r3, .L546+4
 7535 0a74 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7536 0a78 C3F10303 		rsb	r3, r3, #3
 7537 0a7c 284A     		ldr	r2, .L546+8
 7538 0a7e 0021     		movs	r1, #0
 7539 0a80 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7540              	.L464:
2212:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7541              		.loc 1 2212 0
 7542 0a84 254B     		ldr	r3, .L546+4
 7543 0a86 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7544 0a8a C3F10303 		rsb	r3, r3, #3
 7545 0a8e 244A     		ldr	r2, .L546+8
 7546 0a90 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 175


 7547 0a94 2949     		ldr	r1, .L546+36
 7548 0a96 1846     		mov	r0, r3
 7549 0a98 FFF7FEFF 		bl	filter
 7550 0a9c 0246     		mov	r2, r0
 7551 0a9e 224B     		ldr	r3, .L546+16
 7552 0aa0 D3F8F831 		ldr	r3, [r3, #504]
 7553 0aa4 1344     		add	r3, r3, r2
 7554 0aa6 204A     		ldr	r2, .L546+16
 7555 0aa8 C2F8F831 		str	r3, [r2, #504]
2213:..\src/interruptions.c **** 
2214:..\src/interruptions.c ****             if (interrupt_flag){
 7556              		.loc 1 2214 0
 7557 0aac 1F4B     		ldr	r3, .L546+20
 7558 0aae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7559 0ab0 002B     		cmp	r3, #0
 7560 0ab2 04D0     		beq	.L465
2215:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7561              		.loc 1 2215 0
 7562 0ab4 1D4B     		ldr	r3, .L546+20
 7563 0ab6 0022     		movs	r2, #0
 7564 0ab8 1A70     		strb	r2, [r3]
2216:..\src/interruptions.c ****                 interrupt_manager();
 7565              		.loc 1 2216 0
 7566 0aba FFF7FEFF 		bl	interrupt_manager
 7567              	.L465:
2217:..\src/interruptions.c ****             }
2218:..\src/interruptions.c ****             
2219:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7568              		.loc 1 2219 0
 7569 0abe 214B     		ldr	r3, .L546+44
 7570 0ac0 1B88     		ldrh	r3, [r3]
 7571 0ac2 B3F57A7F 		cmp	r3, #1000
 7572 0ac6 40F0FF80 		bne	.L529
2220:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7573              		.loc 1 2220 0
 7574 0aca 174B     		ldr	r3, .L546+16
 7575 0acc D3F8F831 		ldr	r3, [r3, #504]
 7576 0ad0 174A     		ldr	r2, .L546+24
 7577 0ad2 A2FB0323 		umull	r2, r3, r2, r3
 7578 0ad6 9B09     		lsrs	r3, r3, #6
 7579 0ad8 134A     		ldr	r2, .L546+16
 7580 0ada C2F8F831 		str	r3, [r2, #504]
2221:..\src/interruptions.c ****                 LED_control(0);
 7581              		.loc 1 2221 0
 7582 0ade 0020     		movs	r0, #0
 7583 0ae0 FFF7FEFF 		bl	LED_control
2222:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7584              		.loc 1 2222 0
 7585 0ae4 174B     		ldr	r3, .L546+44
 7586 0ae6 0022     		movs	r2, #0
 7587 0ae8 1A80     		strh	r2, [r3]	@ movhi
2223:..\src/interruptions.c ****             
2224:..\src/interruptions.c ****                 if (interrupt_flag){
 7588              		.loc 1 2224 0
 7589 0aea 104B     		ldr	r3, .L546+20
 7590 0aec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7591 0aee 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 176


 7592 0af0 04D0     		beq	.L467
2225:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7593              		.loc 1 2225 0
 7594 0af2 0E4B     		ldr	r3, .L546+20
 7595 0af4 0022     		movs	r2, #0
 7596 0af6 1A70     		strb	r2, [r3]
2226:..\src/interruptions.c ****                     interrupt_manager();
 7597              		.loc 1 2226 0
 7598 0af8 FFF7FEFF 		bl	interrupt_manager
 7599              	.L467:
2227:..\src/interruptions.c ****                 }
2228:..\src/interruptions.c ****                 
2229:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7600              		.loc 1 2229 0
 7601 0afc 0E4B     		ldr	r3, .L546+32
 7602 0afe 0522     		movs	r2, #5
 7603 0b00 1A70     		strb	r2, [r3]
2230:..\src/interruptions.c ****             }
2231:..\src/interruptions.c ****             break;
 7604              		.loc 1 2231 0
 7605 0b02 E1E0     		b	.L529
 7606              	.L452:
2232:..\src/interruptions.c **** 
2233:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2234:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7607              		.loc 1 2234 0
 7608 0b04 0B4B     		ldr	r3, .L546+28
 7609 0b06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7610 0b08 002B     		cmp	r3, #0
 7611 0b0a 40F0DF80 		bne	.L530
2235:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7612              		.loc 1 2235 0
 7613 0b0e 0A4B     		ldr	r3, .L546+32
 7614 0b10 0222     		movs	r2, #2
 7615 0b12 1A70     		strb	r2, [r3]
2236:..\src/interruptions.c ****             break;
 7616              		.loc 1 2236 0
 7617 0b14 DAE0     		b	.L530
 7618              	.L547:
 7619 0b16 00BF     		.align	2
 7620              	.L546:
 7621 0b18 7C010000 		.word	emg_counter_1.10644
 7622 0b1c 00000000 		.word	c_mem
 7623 0b20 00000000 		.word	ADC_buf
 7624 0b24 00000000 		.word	filt_emg
 7625 0b28 00000000 		.word	g_mem
 7626 0b2c 00000000 		.word	interrupt_flag
 7627 0b30 D34D6210 		.word	274877907
 7628 0b34 00000000 		.word	emg_1_status
 7629 0b38 00000000 		.word	emg_2_status
 7630 0b3c 08000000 		.word	filt_emg+8
 7631 0b40 00000000 		.word	g_adc_meas
 7632 0b44 7E010000 		.word	emg_counter_2.10645
 7633              	.L453:
2237:..\src/interruptions.c **** 
2238:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2239:..\src/interruptions.c ****             emg_counter_2++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 177


 7634              		.loc 1 2239 0
 7635 0b48 B04B     		ldr	r3, .L548
 7636 0b4a 1B88     		ldrh	r3, [r3]
 7637 0b4c 0133     		adds	r3, r3, #1
 7638 0b4e 9AB2     		uxth	r2, r3
 7639 0b50 AE4B     		ldr	r3, .L548
 7640 0b52 1A80     		strh	r2, [r3]	@ movhi
2240:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7641              		.loc 1 2240 0
 7642 0b54 AD4B     		ldr	r3, .L548
 7643 0b56 1B88     		ldrh	r3, [r3]
 7644 0b58 B3F5FA7F 		cmp	r3, #500
 7645 0b5c 40F0B880 		bne	.L531
2241:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7646              		.loc 1 2241 0
 7647 0b60 AA4B     		ldr	r3, .L548
 7648 0b62 0022     		movs	r2, #0
 7649 0b64 1A80     		strh	r2, [r3]	@ movhi
2242:..\src/interruptions.c ****                 
2243:..\src/interruptions.c ****                 if (interrupt_flag){
 7650              		.loc 1 2243 0
 7651 0b66 AA4B     		ldr	r3, .L548+4
 7652 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7653 0b6a 002B     		cmp	r3, #0
 7654 0b6c 04D0     		beq	.L470
2244:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7655              		.loc 1 2244 0
 7656 0b6e A84B     		ldr	r3, .L548+4
 7657 0b70 0022     		movs	r2, #0
 7658 0b72 1A70     		strb	r2, [r3]
2245:..\src/interruptions.c ****                     interrupt_manager();
 7659              		.loc 1 2245 0
 7660 0b74 FFF7FEFF 		bl	interrupt_manager
 7661              	.L470:
2246:..\src/interruptions.c ****                 }
2247:..\src/interruptions.c ****                 
2248:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7662              		.loc 1 2248 0
 7663 0b78 A64B     		ldr	r3, .L548+8
 7664 0b7a 0022     		movs	r2, #0
 7665 0b7c 1A70     		strb	r2, [r3]
 7666 0b7e 93E0     		b	.L471
 7667              	.L475:
2249:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7668              		.loc 1 2249 0
 7669 0b80 A44B     		ldr	r3, .L548+8
 7670 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7671 0b84 1946     		mov	r1, r3
 7672 0b86 A44A     		ldr	r2, .L548+12
 7673 0b88 0B46     		mov	r3, r1
 7674 0b8a DB00     		lsls	r3, r3, #3
 7675 0b8c 5B1A     		subs	r3, r3, r1
 7676 0b8e 1B01     		lsls	r3, r3, #4
 7677 0b90 1344     		add	r3, r3, r2
 7678 0b92 03F58773 		add	r3, r3, #270
 7679 0b96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7680 0b98 022B     		cmp	r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 178


 7681 0b9a 37D0     		beq	.L472
2250:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7682              		.loc 1 2250 0 discriminator 1
 7683 0b9c 9D4B     		ldr	r3, .L548+8
 7684 0b9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7685 0ba0 1946     		mov	r1, r3
 7686 0ba2 9D4A     		ldr	r2, .L548+12
 7687 0ba4 0B46     		mov	r3, r1
 7688 0ba6 DB00     		lsls	r3, r3, #3
 7689 0ba8 5B1A     		subs	r3, r3, r1
 7690 0baa 1B01     		lsls	r3, r3, #4
 7691 0bac 1344     		add	r3, r3, r2
 7692 0bae 03F58773 		add	r3, r3, #270
 7693 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2249:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7694              		.loc 1 2249 0 discriminator 1
 7695 0bb4 032B     		cmp	r3, #3
 7696 0bb6 29D0     		beq	.L472
2251:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7697              		.loc 1 2251 0
 7698 0bb8 964B     		ldr	r3, .L548+8
 7699 0bba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7700 0bbc 1946     		mov	r1, r3
 7701 0bbe 964A     		ldr	r2, .L548+12
 7702 0bc0 0B46     		mov	r3, r1
 7703 0bc2 DB00     		lsls	r3, r3, #3
 7704 0bc4 5B1A     		subs	r3, r3, r1
 7705 0bc6 1B01     		lsls	r3, r3, #4
 7706 0bc8 1344     		add	r3, r3, r2
 7707 0bca 03F58773 		add	r3, r3, #270
 7708 0bce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2250:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7709              		.loc 1 2250 0
 7710 0bd0 042B     		cmp	r3, #4
 7711 0bd2 1BD0     		beq	.L472
2252:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7712              		.loc 1 2252 0
 7713 0bd4 8F4B     		ldr	r3, .L548+8
 7714 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7715 0bd8 1946     		mov	r1, r3
 7716 0bda 8F4A     		ldr	r2, .L548+12
 7717 0bdc 0B46     		mov	r3, r1
 7718 0bde DB00     		lsls	r3, r3, #3
 7719 0be0 5B1A     		subs	r3, r3, r1
 7720 0be2 1B01     		lsls	r3, r3, #4
 7721 0be4 1344     		add	r3, r3, r2
 7722 0be6 03F58773 		add	r3, r3, #270
 7723 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2251:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7724              		.loc 1 2251 0
 7725 0bec 052B     		cmp	r3, #5
 7726 0bee 0DD0     		beq	.L472
2253:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7727              		.loc 1 2253 0
 7728 0bf0 884B     		ldr	r3, .L548+8
 7729 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7730 0bf4 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 179


 7731 0bf6 884A     		ldr	r2, .L548+12
 7732 0bf8 0B46     		mov	r3, r1
 7733 0bfa DB00     		lsls	r3, r3, #3
 7734 0bfc 5B1A     		subs	r3, r3, r1
 7735 0bfe 1B01     		lsls	r3, r3, #4
 7736 0c00 1344     		add	r3, r3, r2
 7737 0c02 03F58773 		add	r3, r3, #270
 7738 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2252:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7739              		.loc 1 2252 0
 7740 0c08 072B     		cmp	r3, #7
 7741 0c0a 47D1     		bne	.L473
 7742              	.L472:
2254:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7743              		.loc 1 2254 0
 7744 0c0c 814B     		ldr	r3, .L548+8
 7745 0c0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7746 0c10 1946     		mov	r1, r3
 7747 0c12 814A     		ldr	r2, .L548+12
 7748 0c14 0B46     		mov	r3, r1
 7749 0c16 DB00     		lsls	r3, r3, #3
 7750 0c18 5B1A     		subs	r3, r3, r1
 7751 0c1a 1B01     		lsls	r3, r3, #4
 7752 0c1c 1344     		add	r3, r3, r2
 7753 0c1e 03F20F13 		addw	r3, r3, #271
 7754 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7755 0c24 002B     		cmp	r3, #0
 7756 0c26 19D1     		bne	.L474
2255:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7757              		.loc 1 2255 0
 7758 0c28 7A4B     		ldr	r3, .L548+8
 7759 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7760 0c2c 1846     		mov	r0, r3
 7761 0c2e 794B     		ldr	r3, .L548+8
 7762 0c30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7763 0c32 1946     		mov	r1, r3
 7764 0c34 794A     		ldr	r2, .L548+16
 7765 0c36 0B46     		mov	r3, r1
 7766 0c38 DB00     		lsls	r3, r3, #3
 7767 0c3a 5B1A     		subs	r3, r3, r1
 7768 0c3c 1B01     		lsls	r3, r3, #4
 7769 0c3e 1344     		add	r3, r3, r2
 7770 0c40 03F58873 		add	r3, r3, #272
 7771 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7772 0c46 1946     		mov	r1, r3
 7773 0c48 754A     		ldr	r2, .L548+20
 7774 0c4a 3423     		movs	r3, #52
 7775 0c4c 03FB01F3 		mul	r3, r3, r1
 7776 0c50 1344     		add	r3, r3, r2
 7777 0c52 1A68     		ldr	r2, [r3]
 7778 0c54 7349     		ldr	r1, .L548+24
 7779 0c56 0301     		lsls	r3, r0, #4
 7780 0c58 0B44     		add	r3, r3, r1
 7781 0c5a 1A60     		str	r2, [r3]
 7782              	.L474:
2256:..\src/interruptions.c ****                         }
2257:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 180


 7783              		.loc 1 2257 0
 7784 0c5c 6D4B     		ldr	r3, .L548+8
 7785 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7786 0c60 1846     		mov	r0, r3
 7787 0c62 6C4B     		ldr	r3, .L548+8
 7788 0c64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7789 0c66 1946     		mov	r1, r3
 7790 0c68 6B4A     		ldr	r2, .L548+12
 7791 0c6a 0B46     		mov	r3, r1
 7792 0c6c DB00     		lsls	r3, r3, #3
 7793 0c6e 5B1A     		subs	r3, r3, r1
 7794 0c70 1B01     		lsls	r3, r3, #4
 7795 0c72 1344     		add	r3, r3, r2
 7796 0c74 E033     		adds	r3, r3, #224
 7797 0c76 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7798 0c78 6A4A     		ldr	r2, .L548+24
 7799 0c7a 0301     		lsls	r3, r0, #4
 7800 0c7c 1344     		add	r3, r3, r2
 7801 0c7e 0C33     		adds	r3, r3, #12
 7802 0c80 0A46     		mov	r2, r1
 7803 0c82 1A70     		strb	r2, [r3]
2258:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7804              		.loc 1 2258 0
 7805 0c84 634B     		ldr	r3, .L548+8
 7806 0c86 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7807 0c88 624B     		ldr	r3, .L548+8
 7808 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7809 0c8c 654A     		ldr	r2, .L548+24
 7810 0c8e 1B01     		lsls	r3, r3, #4
 7811 0c90 1344     		add	r3, r3, r2
 7812 0c92 0C33     		adds	r3, r3, #12
 7813 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7814 0c96 1946     		mov	r1, r3
 7815 0c98 FFF7FEFF 		bl	enable_motor
 7816              	.L473:
2248:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7817              		.loc 1 2248 0 discriminator 2
 7818 0c9c 5D4B     		ldr	r3, .L548+8
 7819 0c9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7820 0ca0 0133     		adds	r3, r3, #1
 7821 0ca2 DAB2     		uxtb	r2, r3
 7822 0ca4 5B4B     		ldr	r3, .L548+8
 7823 0ca6 1A70     		strb	r2, [r3]
 7824              	.L471:
2248:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7825              		.loc 1 2248 0 is_stmt 0 discriminator 1
 7826 0ca8 5A4B     		ldr	r3, .L548+8
 7827 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7828 0cac 012B     		cmp	r3, #1
 7829 0cae 7FF667AF 		bls	.L475
2259:..\src/interruptions.c ****                     }
2260:..\src/interruptions.c ****                 }
2261:..\src/interruptions.c ****                     
2262:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7830              		.loc 1 2262 0 is_stmt 1
 7831 0cb2 0020     		movs	r0, #0
 7832 0cb4 FFF7FEFF 		bl	memStore
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 181


2263:..\src/interruptions.c ****                     
2264:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7833              		.loc 1 2264 0
 7834 0cb8 5B4B     		ldr	r3, .L548+28
 7835 0cba 0022     		movs	r2, #0
 7836 0cbc 1A70     		strb	r2, [r3]
2265:..\src/interruptions.c ****             }
2266:..\src/interruptions.c ****             break;
 7837              		.loc 1 2266 0
 7838 0cbe 07E0     		b	.L531
 7839              	.L527:
2267:..\src/interruptions.c ****         default:
2268:..\src/interruptions.c ****             break;
 7840              		.loc 1 2268 0
 7841 0cc0 00BF     		nop
 7842 0cc2 06E0     		b	.L460
 7843              	.L528:
2205:..\src/interruptions.c **** 
 7844              		.loc 1 2205 0
 7845 0cc4 00BF     		nop
 7846 0cc6 04E0     		b	.L460
 7847              	.L529:
2231:..\src/interruptions.c **** 
 7848              		.loc 1 2231 0
 7849 0cc8 00BF     		nop
 7850 0cca 02E0     		b	.L460
 7851              	.L530:
2236:..\src/interruptions.c **** 
 7852              		.loc 1 2236 0
 7853 0ccc 00BF     		nop
 7854 0cce 00E0     		b	.L460
 7855              	.L531:
2266:..\src/interruptions.c ****         default:
 7856              		.loc 1 2266 0
 7857 0cd0 00BF     		nop
 7858              	.L460:
2269:..\src/interruptions.c ****     }
2270:..\src/interruptions.c ****         
2271:..\src/interruptions.c ****     if (interrupt_flag){
 7859              		.loc 1 2271 0
 7860 0cd2 4F4B     		ldr	r3, .L548+4
 7861 0cd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7862 0cd6 002B     		cmp	r3, #0
 7863 0cd8 04D0     		beq	.L476
2272:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7864              		.loc 1 2272 0
 7865 0cda 4D4B     		ldr	r3, .L548+4
 7866 0cdc 0022     		movs	r2, #0
 7867 0cde 1A70     		strb	r2, [r3]
2273:..\src/interruptions.c ****         interrupt_manager();
 7868              		.loc 1 2273 0
 7869 0ce0 FFF7FEFF 		bl	interrupt_manager
 7870              	.L476:
2274:..\src/interruptions.c ****     }
2275:..\src/interruptions.c ****     
2276:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 7871              		.loc 1 2276 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 182


 7872 0ce4 4C4B     		ldr	r3, .L548+12
 7873 0ce6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7874 0cea 062B     		cmp	r3, #6
 7875 0cec 05D0     		beq	.L477
 7876              		.loc 1 2276 0 is_stmt 0 discriminator 1
 7877 0cee 4A4B     		ldr	r3, .L548+12
 7878 0cf0 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7879 0cf4 062B     		cmp	r3, #6
 7880 0cf6 40F0C881 		bne	.L478
 7881              	.L477:
2277:..\src/interruptions.c ****         // Read joystick
2278:..\src/interruptions.c ****         
2279:..\src/interruptions.c ****         switch (joy_UD_status) {
 7882              		.loc 1 2279 0 is_stmt 1
 7883 0cfa 4C4B     		ldr	r3, .L548+32
 7884 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7885 0cfe 052B     		cmp	r3, #5
 7886 0d00 00F2E980 		bhi	.L479
 7887 0d04 01A2     		adr	r2, .L481
 7888 0d06 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7889 0d0a 00BF     		.p2align 2
 7890              	.L481:
 7891 0d0c 250D0000 		.word	.L480+1
 7892 0d10 C30D0000 		.word	.L482+1
 7893 0d14 D70D0000 		.word	.L483+1
 7894 0d18 450E0000 		.word	.L484+1
 7895 0d1c B10E0000 		.word	.L485+1
 7896 0d20 B10E0000 		.word	.L485+1
 7897              		.p2align 1
 7898              	.L480:
2280:..\src/interruptions.c ****             case NORMAL:
2281:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 7899              		.loc 1 2281 0
 7900 0d24 424B     		ldr	r3, .L548+36
 7901 0d26 B3F90430 		ldrsh	r3, [r3, #4]
 7902 0d2a 7B60     		str	r3, [r7, #4]
2282:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2283:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 7903              		.loc 1 2283 0
 7904 0d2c 414B     		ldr	r3, .L548+40
 7905 0d2e 1B68     		ldr	r3, [r3]
 7906 0d30 7A68     		ldr	r2, [r7, #4]
 7907 0d32 D31A     		subs	r3, r2, r3
 7908 0d34 1846     		mov	r0, r3
 7909 0d36 FFF7FEFF 		bl	__aeabi_i2f
 7910 0d3a 0446     		mov	r4, r0
 7911 0d3c 3D4B     		ldr	r3, .L548+40
 7912 0d3e 1B68     		ldr	r3, [r3]
 7913 0d40 1846     		mov	r0, r3
 7914 0d42 FFF7FEFF 		bl	__aeabi_i2f
 7915 0d46 0346     		mov	r3, r0
 7916 0d48 1946     		mov	r1, r3
 7917 0d4a 2046     		mov	r0, r4
 7918 0d4c FFF7FEFF 		bl	__aeabi_fdiv
 7919 0d50 0346     		mov	r3, r0
 7920 0d52 1C46     		mov	r4, r3
 7921 0d54 304B     		ldr	r3, .L548+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 183


 7922 0d56 B3F8B632 		ldrh	r3, [r3, #694]
 7923 0d5a 1846     		mov	r0, r3
 7924 0d5c FFF7FEFF 		bl	__aeabi_i2f
 7925 0d60 0346     		mov	r3, r0
 7926 0d62 1946     		mov	r1, r3
 7927 0d64 2046     		mov	r0, r4
 7928 0d66 FFF7FEFF 		bl	__aeabi_fmul
 7929 0d6a 0346     		mov	r3, r0
 7930 0d6c 1846     		mov	r0, r3
 7931 0d6e FFF7FEFF 		bl	__aeabi_f2iz
 7932 0d72 0346     		mov	r3, r0
 7933 0d74 7B60     		str	r3, [r7, #4]
2284:..\src/interruptions.c ****                 
2285:..\src/interruptions.c ****                 if (interrupt_flag){
 7934              		.loc 1 2285 0
 7935 0d76 264B     		ldr	r3, .L548+4
 7936 0d78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7937 0d7a 002B     		cmp	r3, #0
 7938 0d7c 04D0     		beq	.L486
2286:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7939              		.loc 1 2286 0
 7940 0d7e 244B     		ldr	r3, .L548+4
 7941 0d80 0022     		movs	r2, #0
 7942 0d82 1A70     		strb	r2, [r3]
2287:..\src/interruptions.c ****                     interrupt_manager();
 7943              		.loc 1 2287 0
 7944 0d84 FFF7FEFF 		bl	interrupt_manager
 7945              	.L486:
2288:..\src/interruptions.c ****                 }
2289:..\src/interruptions.c **** 
2290:..\src/interruptions.c ****                 //Saturation
2291:..\src/interruptions.c ****                 if (i_aux < -1024) 
 7946              		.loc 1 2291 0
 7947 0d88 7B68     		ldr	r3, [r7, #4]
 7948 0d8a 13F5806F 		cmn	r3, #1024
 7949 0d8e 01DA     		bge	.L487
2292:..\src/interruptions.c ****                     i_aux = -1024;
 7950              		.loc 1 2292 0
 7951 0d90 294B     		ldr	r3, .L548+44
 7952 0d92 7B60     		str	r3, [r7, #4]
 7953              	.L487:
2293:..\src/interruptions.c ****                 if (i_aux > 1024)
 7954              		.loc 1 2293 0
 7955 0d94 7B68     		ldr	r3, [r7, #4]
 7956 0d96 B3F5806F 		cmp	r3, #1024
 7957 0d9a 02DD     		ble	.L488
2294:..\src/interruptions.c ****                     i_aux = 1024;
 7958              		.loc 1 2294 0
 7959 0d9c 4FF48063 		mov	r3, #1024
 7960 0da0 7B60     		str	r3, [r7, #4]
 7961              	.L488:
2295:..\src/interruptions.c **** 
2296:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 7962              		.loc 1 2296 0
 7963 0da2 7B68     		ldr	r3, [r7, #4]
 7964 0da4 1BB2     		sxth	r3, r3
 7965 0da6 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 184


 7966 0da8 244B     		ldr	r3, .L548+48
 7967 0daa 5A62     		str	r2, [r3, #36]
2297:..\src/interruptions.c **** 
2298:..\src/interruptions.c ****                 if (interrupt_flag){
 7968              		.loc 1 2298 0
 7969 0dac 184B     		ldr	r3, .L548+4
 7970 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7971 0db0 002B     		cmp	r3, #0
 7972 0db2 00F08980 		beq	.L532
2299:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7973              		.loc 1 2299 0
 7974 0db6 164B     		ldr	r3, .L548+4
 7975 0db8 0022     		movs	r2, #0
 7976 0dba 1A70     		strb	r2, [r3]
2300:..\src/interruptions.c ****                     interrupt_manager();
 7977              		.loc 1 2300 0
 7978 0dbc FFF7FEFF 		bl	interrupt_manager
2301:..\src/interruptions.c ****                 }
2302:..\src/interruptions.c **** 
2303:..\src/interruptions.c ****             break;
 7979              		.loc 1 2303 0
 7980 0dc0 82E0     		b	.L532
 7981              	.L482:
2304:..\src/interruptions.c **** 
2305:..\src/interruptions.c ****             case RESET: // reset variables
2306:..\src/interruptions.c ****                 UD_counter = 0;
 7982              		.loc 1 2306 0
 7983 0dc2 1F4B     		ldr	r3, .L548+52
 7984 0dc4 0022     		movs	r2, #0
 7985 0dc6 1A80     		strh	r2, [r3]	@ movhi
2307:..\src/interruptions.c ****                 UD_mean_value = 0;
 7986              		.loc 1 2307 0
 7987 0dc8 1A4B     		ldr	r3, .L548+40
 7988 0dca 0022     		movs	r2, #0
 7989 0dcc 1A60     		str	r2, [r3]
2308:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 7990              		.loc 1 2308 0
 7991 0dce 174B     		ldr	r3, .L548+32
 7992 0dd0 0422     		movs	r2, #4
 7993 0dd2 1A70     		strb	r2, [r3]
2309:..\src/interruptions.c **** 
2310:..\src/interruptions.c ****             break;
 7994              		.loc 1 2310 0
 7995 0dd4 7FE0     		b	.L479
 7996              	.L483:
2311:..\src/interruptions.c **** 
2312:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2313:..\src/interruptions.c ****                 UD_counter++;
 7997              		.loc 1 2313 0
 7998 0dd6 1A4B     		ldr	r3, .L548+52
 7999 0dd8 1B88     		ldrh	r3, [r3]
 8000 0dda 0133     		adds	r3, r3, #1
 8001 0ddc 9AB2     		uxth	r2, r3
 8002 0dde 184B     		ldr	r3, .L548+52
 8003 0de0 1A80     		strh	r2, [r3]	@ movhi
2314:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8004              		.loc 1 2314 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 185


 8005 0de2 174B     		ldr	r3, .L548+52
 8006 0de4 1B88     		ldrh	r3, [r3]
 8007 0de6 642B     		cmp	r3, #100
 8008 0de8 70D1     		bne	.L533
2315:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8009              		.loc 1 2315 0
 8010 0dea 154B     		ldr	r3, .L548+52
 8011 0dec 0022     		movs	r2, #0
 8012 0dee 1A80     		strh	r2, [r3]	@ movhi
2316:..\src/interruptions.c **** 
2317:..\src/interruptions.c ****                     if (interrupt_flag){
 8013              		.loc 1 2317 0
 8014 0df0 074B     		ldr	r3, .L548+4
 8015 0df2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8016 0df4 002B     		cmp	r3, #0
 8017 0df6 04D0     		beq	.L491
2318:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8018              		.loc 1 2318 0
 8019 0df8 054B     		ldr	r3, .L548+4
 8020 0dfa 0022     		movs	r2, #0
 8021 0dfc 1A70     		strb	r2, [r3]
2319:..\src/interruptions.c ****                         interrupt_manager();
 8022              		.loc 1 2319 0
 8023 0dfe FFF7FEFF 		bl	interrupt_manager
 8024              	.L491:
2320:..\src/interruptions.c ****                     }
2321:..\src/interruptions.c **** 
2322:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8025              		.loc 1 2322 0
 8026 0e02 0A4B     		ldr	r3, .L548+32
 8027 0e04 0322     		movs	r2, #3
 8028 0e06 1A70     		strb	r2, [r3]
2323:..\src/interruptions.c ****                 }
2324:..\src/interruptions.c **** 
2325:..\src/interruptions.c ****             break;
 8029              		.loc 1 2325 0
 8030 0e08 60E0     		b	.L533
 8031              	.L549:
 8032 0e0a 00BF     		.align	2
 8033              	.L548:
 8034 0e0c 7E010000 		.word	emg_counter_2.10645
 8035 0e10 00000000 		.word	interrupt_flag
 8036 0e14 76010000 		.word	idx.10653
 8037 0e18 00000000 		.word	c_mem
 8038 0e1c 00000000 		.word	g_mem
 8039 0e20 00000000 		.word	g_meas
 8040 0e24 00000000 		.word	g_ref
 8041 0e28 00000000 		.word	emg_2_status
 8042 0e2c 00000000 		.word	joy_UD_status
 8043 0e30 00000000 		.word	ADC_buf
 8044 0e34 80010000 		.word	UD_mean_value.10648
 8045 0e38 00FCFFFF 		.word	-1024
 8046 0e3c 00000000 		.word	g_adc_meas
 8047 0e40 84010000 		.word	UD_counter.10646
 8048              	.L484:
2326:..\src/interruptions.c **** 
2327:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 186


2328:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2329:..\src/interruptions.c ****                 UD_counter++;
 8049              		.loc 1 2329 0
 8050 0e44 954B     		ldr	r3, .L550
 8051 0e46 1B88     		ldrh	r3, [r3]
 8052 0e48 0133     		adds	r3, r3, #1
 8053 0e4a 9AB2     		uxth	r2, r3
 8054 0e4c 934B     		ldr	r3, .L550
 8055 0e4e 1A80     		strh	r2, [r3]	@ movhi
2330:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8056              		.loc 1 2330 0
 8057 0e50 934B     		ldr	r3, .L550+4
 8058 0e52 B3F90430 		ldrsh	r3, [r3, #4]
 8059 0e56 1A46     		mov	r2, r3
 8060 0e58 924B     		ldr	r3, .L550+8
 8061 0e5a 1B68     		ldr	r3, [r3]
 8062 0e5c 1344     		add	r3, r3, r2
 8063 0e5e 914A     		ldr	r2, .L550+8
 8064 0e60 1360     		str	r3, [r2]
2331:..\src/interruptions.c **** 
2332:..\src/interruptions.c ****                 if (interrupt_flag){
 8065              		.loc 1 2332 0
 8066 0e62 914B     		ldr	r3, .L550+12
 8067 0e64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8068 0e66 002B     		cmp	r3, #0
 8069 0e68 04D0     		beq	.L492
2333:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8070              		.loc 1 2333 0
 8071 0e6a 8F4B     		ldr	r3, .L550+12
 8072 0e6c 0022     		movs	r2, #0
 8073 0e6e 1A70     		strb	r2, [r3]
2334:..\src/interruptions.c ****                     interrupt_manager();
 8074              		.loc 1 2334 0
 8075 0e70 FFF7FEFF 		bl	interrupt_manager
 8076              	.L492:
2335:..\src/interruptions.c ****                 }
2336:..\src/interruptions.c **** 
2337:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8077              		.loc 1 2337 0
 8078 0e74 894B     		ldr	r3, .L550
 8079 0e76 1B88     		ldrh	r3, [r3]
 8080 0e78 C82B     		cmp	r3, #200
 8081 0e7a 29D1     		bne	.L534
2338:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8082              		.loc 1 2338 0
 8083 0e7c 894B     		ldr	r3, .L550+8
 8084 0e7e 1B68     		ldr	r3, [r3]
 8085 0e80 8A4A     		ldr	r2, .L550+16
 8086 0e82 82FB0312 		smull	r1, r2, r2, r3
 8087 0e86 9211     		asrs	r2, r2, #6
 8088 0e88 DB17     		asrs	r3, r3, #31
 8089 0e8a D31A     		subs	r3, r2, r3
 8090 0e8c 854A     		ldr	r2, .L550+8
 8091 0e8e 1360     		str	r3, [r2]
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****                     if (interrupt_flag){
 8092              		.loc 1 2340 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 187


 8093 0e90 854B     		ldr	r3, .L550+12
 8094 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8095 0e94 002B     		cmp	r3, #0
 8096 0e96 04D0     		beq	.L494
2341:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8097              		.loc 1 2341 0
 8098 0e98 834B     		ldr	r3, .L550+12
 8099 0e9a 0022     		movs	r2, #0
 8100 0e9c 1A70     		strb	r2, [r3]
2342:..\src/interruptions.c ****                         interrupt_manager();
 8101              		.loc 1 2342 0
 8102 0e9e FFF7FEFF 		bl	interrupt_manager
 8103              	.L494:
2343:..\src/interruptions.c ****                     }
2344:..\src/interruptions.c **** 
2345:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8104              		.loc 1 2345 0
 8105 0ea2 7E4B     		ldr	r3, .L550
 8106 0ea4 0022     		movs	r2, #0
 8107 0ea6 1A80     		strh	r2, [r3]	@ movhi
2346:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8108              		.loc 1 2346 0
 8109 0ea8 814B     		ldr	r3, .L550+20
 8110 0eaa 0022     		movs	r2, #0
 8111 0eac 1A70     		strb	r2, [r3]
2347:..\src/interruptions.c ****                 }
2348:..\src/interruptions.c ****             break;
 8112              		.loc 1 2348 0
 8113 0eae 0FE0     		b	.L534
 8114              	.L485:
2349:..\src/interruptions.c **** 
2350:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2351:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8115              		.loc 1 2351 0
 8116 0eb0 804B     		ldr	r3, .L550+24
 8117 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8118 0eb4 002B     		cmp	r3, #0
 8119 0eb6 0DD1     		bne	.L535
 8120              		.loc 1 2351 0 is_stmt 0 discriminator 1
 8121 0eb8 7F4B     		ldr	r3, .L550+28
 8122 0eba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8123 0ebc 002B     		cmp	r3, #0
 8124 0ebe 09D1     		bne	.L535
2352:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8125              		.loc 1 2352 0 is_stmt 1
 8126 0ec0 7B4B     		ldr	r3, .L550+20
 8127 0ec2 0222     		movs	r2, #2
 8128 0ec4 1A70     		strb	r2, [r3]
2353:..\src/interruptions.c ****             break;
 8129              		.loc 1 2353 0
 8130 0ec6 05E0     		b	.L535
 8131              	.L532:
2303:..\src/interruptions.c **** 
 8132              		.loc 1 2303 0
 8133 0ec8 00BF     		nop
 8134 0eca 04E0     		b	.L479
 8135              	.L533:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 188


2325:..\src/interruptions.c **** 
 8136              		.loc 1 2325 0
 8137 0ecc 00BF     		nop
 8138 0ece 02E0     		b	.L479
 8139              	.L534:
2348:..\src/interruptions.c **** 
 8140              		.loc 1 2348 0
 8141 0ed0 00BF     		nop
 8142 0ed2 00E0     		b	.L479
 8143              	.L535:
 8144              		.loc 1 2353 0
 8145 0ed4 00BF     		nop
 8146              	.L479:
2354:..\src/interruptions.c ****         }
2355:..\src/interruptions.c **** 
2356:..\src/interruptions.c ****         if (interrupt_flag){
 8147              		.loc 1 2356 0
 8148 0ed6 744B     		ldr	r3, .L550+12
 8149 0ed8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8150 0eda 002B     		cmp	r3, #0
 8151 0edc 04D0     		beq	.L496
2357:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8152              		.loc 1 2357 0
 8153 0ede 724B     		ldr	r3, .L550+12
 8154 0ee0 0022     		movs	r2, #0
 8155 0ee2 1A70     		strb	r2, [r3]
2358:..\src/interruptions.c ****             interrupt_manager();
 8156              		.loc 1 2358 0
 8157 0ee4 FFF7FEFF 		bl	interrupt_manager
 8158              	.L496:
2359:..\src/interruptions.c ****         }
2360:..\src/interruptions.c ****             
2361:..\src/interruptions.c ****         switch (joy_LR_status) {
 8159              		.loc 1 2361 0
 8160 0ee8 744B     		ldr	r3, .L550+32
 8161 0eea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8162 0eec 052B     		cmp	r3, #5
 8163 0eee 00F2C380 		bhi	.L497
 8164 0ef2 01A2     		adr	r2, .L499
 8165 0ef4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8166              		.p2align 2
 8167              	.L499:
 8168 0ef8 110F0000 		.word	.L498+1
 8169 0efc AD0F0000 		.word	.L500+1
 8170 0f00 C10F0000 		.word	.L501+1
 8171 0f04 F50F0000 		.word	.L502+1
 8172 0f08 4F100000 		.word	.L503+1
 8173 0f0c 4F100000 		.word	.L503+1
 8174              		.p2align 1
 8175              	.L498:
2362:..\src/interruptions.c ****             case NORMAL:
2363:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8176              		.loc 1 2363 0
 8177 0f10 634B     		ldr	r3, .L550+4
 8178 0f12 B3F90630 		ldrsh	r3, [r3, #6]
 8179 0f16 7B60     		str	r3, [r7, #4]
2364:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 189


2365:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8180              		.loc 1 2365 0
 8181 0f18 694B     		ldr	r3, .L550+36
 8182 0f1a 1B68     		ldr	r3, [r3]
 8183 0f1c 7A68     		ldr	r2, [r7, #4]
 8184 0f1e D31A     		subs	r3, r2, r3
 8185 0f20 1846     		mov	r0, r3
 8186 0f22 FFF7FEFF 		bl	__aeabi_i2f
 8187 0f26 0446     		mov	r4, r0
 8188 0f28 654B     		ldr	r3, .L550+36
 8189 0f2a 1B68     		ldr	r3, [r3]
 8190 0f2c 1846     		mov	r0, r3
 8191 0f2e FFF7FEFF 		bl	__aeabi_i2f
 8192 0f32 0346     		mov	r3, r0
 8193 0f34 1946     		mov	r1, r3
 8194 0f36 2046     		mov	r0, r4
 8195 0f38 FFF7FEFF 		bl	__aeabi_fdiv
 8196 0f3c 0346     		mov	r3, r0
 8197 0f3e 1C46     		mov	r4, r3
 8198 0f40 604B     		ldr	r3, .L550+40
 8199 0f42 B3F8B432 		ldrh	r3, [r3, #692]
 8200 0f46 1846     		mov	r0, r3
 8201 0f48 FFF7FEFF 		bl	__aeabi_i2f
 8202 0f4c 0346     		mov	r3, r0
 8203 0f4e 1946     		mov	r1, r3
 8204 0f50 2046     		mov	r0, r4
 8205 0f52 FFF7FEFF 		bl	__aeabi_fmul
 8206 0f56 0346     		mov	r3, r0
 8207 0f58 1846     		mov	r0, r3
 8208 0f5a FFF7FEFF 		bl	__aeabi_f2iz
 8209 0f5e 0346     		mov	r3, r0
 8210 0f60 7B60     		str	r3, [r7, #4]
2366:..\src/interruptions.c ****                 
2367:..\src/interruptions.c ****                 if (interrupt_flag){
 8211              		.loc 1 2367 0
 8212 0f62 514B     		ldr	r3, .L550+12
 8213 0f64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8214 0f66 002B     		cmp	r3, #0
 8215 0f68 04D0     		beq	.L504
2368:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8216              		.loc 1 2368 0
 8217 0f6a 4F4B     		ldr	r3, .L550+12
 8218 0f6c 0022     		movs	r2, #0
 8219 0f6e 1A70     		strb	r2, [r3]
2369:..\src/interruptions.c ****                     interrupt_manager();
 8220              		.loc 1 2369 0
 8221 0f70 FFF7FEFF 		bl	interrupt_manager
 8222              	.L504:
2370:..\src/interruptions.c ****                 }
2371:..\src/interruptions.c **** 
2372:..\src/interruptions.c ****                 //Saturation
2373:..\src/interruptions.c ****                 if (i_aux < -1024)
 8223              		.loc 1 2373 0
 8224 0f74 7B68     		ldr	r3, [r7, #4]
 8225 0f76 13F5806F 		cmn	r3, #1024
 8226 0f7a 01DA     		bge	.L505
2374:..\src/interruptions.c ****                     i_aux = -1024;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 190


 8227              		.loc 1 2374 0
 8228 0f7c 524B     		ldr	r3, .L550+44
 8229 0f7e 7B60     		str	r3, [r7, #4]
 8230              	.L505:
2375:..\src/interruptions.c ****                 if (i_aux > 1024)
 8231              		.loc 1 2375 0
 8232 0f80 7B68     		ldr	r3, [r7, #4]
 8233 0f82 B3F5806F 		cmp	r3, #1024
 8234 0f86 02DD     		ble	.L506
2376:..\src/interruptions.c ****                     i_aux = 1024;
 8235              		.loc 1 2376 0
 8236 0f88 4FF48063 		mov	r3, #1024
 8237 0f8c 7B60     		str	r3, [r7, #4]
 8238              	.L506:
2377:..\src/interruptions.c **** 
2378:..\src/interruptions.c ****                 if (interrupt_flag){
 8239              		.loc 1 2378 0
 8240 0f8e 464B     		ldr	r3, .L550+12
 8241 0f90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8242 0f92 002B     		cmp	r3, #0
 8243 0f94 04D0     		beq	.L507
2379:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8244              		.loc 1 2379 0
 8245 0f96 444B     		ldr	r3, .L550+12
 8246 0f98 0022     		movs	r2, #0
 8247 0f9a 1A70     		strb	r2, [r3]
2380:..\src/interruptions.c ****                     interrupt_manager();
 8248              		.loc 1 2380 0
 8249 0f9c FFF7FEFF 		bl	interrupt_manager
 8250              	.L507:
2381:..\src/interruptions.c ****                 }
2382:..\src/interruptions.c **** 
2383:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8251              		.loc 1 2383 0
 8252 0fa0 7B68     		ldr	r3, [r7, #4]
 8253 0fa2 1BB2     		sxth	r3, r3
 8254 0fa4 1A46     		mov	r2, r3
 8255 0fa6 494B     		ldr	r3, .L550+48
 8256 0fa8 1A62     		str	r2, [r3, #32]
2384:..\src/interruptions.c **** 
2385:..\src/interruptions.c ****             break;
 8257              		.loc 1 2385 0
 8258 0faa 65E0     		b	.L497
 8259              	.L500:
2386:..\src/interruptions.c **** 
2387:..\src/interruptions.c ****             case RESET: // reset variables
2388:..\src/interruptions.c ****                 LR_counter = 0;
 8260              		.loc 1 2388 0
 8261 0fac 484B     		ldr	r3, .L550+52
 8262 0fae 0022     		movs	r2, #0
 8263 0fb0 1A80     		strh	r2, [r3]	@ movhi
2389:..\src/interruptions.c ****                 LR_mean_value = 0;
 8264              		.loc 1 2389 0
 8265 0fb2 434B     		ldr	r3, .L550+36
 8266 0fb4 0022     		movs	r2, #0
 8267 0fb6 1A60     		str	r2, [r3]
2390:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 191


 8268              		.loc 1 2390 0
 8269 0fb8 404B     		ldr	r3, .L550+32
 8270 0fba 0422     		movs	r2, #4
 8271 0fbc 1A70     		strb	r2, [r3]
2391:..\src/interruptions.c ****             break;
 8272              		.loc 1 2391 0
 8273 0fbe 5BE0     		b	.L497
 8274              	.L501:
2392:..\src/interruptions.c **** 
2393:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2394:..\src/interruptions.c ****                 LR_counter++;
 8275              		.loc 1 2394 0
 8276 0fc0 434B     		ldr	r3, .L550+52
 8277 0fc2 1B88     		ldrh	r3, [r3]
 8278 0fc4 0133     		adds	r3, r3, #1
 8279 0fc6 9AB2     		uxth	r2, r3
 8280 0fc8 414B     		ldr	r3, .L550+52
 8281 0fca 1A80     		strh	r2, [r3]	@ movhi
2395:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8282              		.loc 1 2395 0
 8283 0fcc 404B     		ldr	r3, .L550+52
 8284 0fce 1B88     		ldrh	r3, [r3]
 8285 0fd0 642B     		cmp	r3, #100
 8286 0fd2 4CD1     		bne	.L536
2396:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8287              		.loc 1 2396 0
 8288 0fd4 3E4B     		ldr	r3, .L550+52
 8289 0fd6 0022     		movs	r2, #0
 8290 0fd8 1A80     		strh	r2, [r3]	@ movhi
2397:..\src/interruptions.c **** 
2398:..\src/interruptions.c ****                     if (interrupt_flag){
 8291              		.loc 1 2398 0
 8292 0fda 334B     		ldr	r3, .L550+12
 8293 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8294 0fde 002B     		cmp	r3, #0
 8295 0fe0 04D0     		beq	.L509
2399:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8296              		.loc 1 2399 0
 8297 0fe2 314B     		ldr	r3, .L550+12
 8298 0fe4 0022     		movs	r2, #0
 8299 0fe6 1A70     		strb	r2, [r3]
2400:..\src/interruptions.c ****                         interrupt_manager();
 8300              		.loc 1 2400 0
 8301 0fe8 FFF7FEFF 		bl	interrupt_manager
 8302              	.L509:
2401:..\src/interruptions.c ****                     }
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8303              		.loc 1 2403 0
 8304 0fec 334B     		ldr	r3, .L550+32
 8305 0fee 0322     		movs	r2, #3
 8306 0ff0 1A70     		strb	r2, [r3]
2404:..\src/interruptions.c ****                 }
2405:..\src/interruptions.c ****             break;
 8307              		.loc 1 2405 0
 8308 0ff2 3CE0     		b	.L536
 8309              	.L502:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 192


2406:..\src/interruptions.c **** 
2407:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2408:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2409:..\src/interruptions.c ****                 LR_counter++;
 8310              		.loc 1 2409 0
 8311 0ff4 364B     		ldr	r3, .L550+52
 8312 0ff6 1B88     		ldrh	r3, [r3]
 8313 0ff8 0133     		adds	r3, r3, #1
 8314 0ffa 9AB2     		uxth	r2, r3
 8315 0ffc 344B     		ldr	r3, .L550+52
 8316 0ffe 1A80     		strh	r2, [r3]	@ movhi
2410:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8317              		.loc 1 2410 0
 8318 1000 274B     		ldr	r3, .L550+4
 8319 1002 B3F90630 		ldrsh	r3, [r3, #6]
 8320 1006 1A46     		mov	r2, r3
 8321 1008 2D4B     		ldr	r3, .L550+36
 8322 100a 1B68     		ldr	r3, [r3]
 8323 100c 1344     		add	r3, r3, r2
 8324 100e 2C4A     		ldr	r2, .L550+36
 8325 1010 1360     		str	r3, [r2]
2411:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8326              		.loc 1 2411 0
 8327 1012 2F4B     		ldr	r3, .L550+52
 8328 1014 1B88     		ldrh	r3, [r3]
 8329 1016 C82B     		cmp	r3, #200
 8330 1018 2BD1     		bne	.L537
2412:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8331              		.loc 1 2412 0
 8332 101a 294B     		ldr	r3, .L550+36
 8333 101c 1B68     		ldr	r3, [r3]
 8334 101e 234A     		ldr	r2, .L550+16
 8335 1020 82FB0312 		smull	r1, r2, r2, r3
 8336 1024 9211     		asrs	r2, r2, #6
 8337 1026 DB17     		asrs	r3, r3, #31
 8338 1028 D31A     		subs	r3, r2, r3
 8339 102a 254A     		ldr	r2, .L550+36
 8340 102c 1360     		str	r3, [r2]
2413:..\src/interruptions.c ****                     
2414:..\src/interruptions.c ****                     if (interrupt_flag){
 8341              		.loc 1 2414 0
 8342 102e 1E4B     		ldr	r3, .L550+12
 8343 1030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8344 1032 002B     		cmp	r3, #0
 8345 1034 04D0     		beq	.L511
2415:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8346              		.loc 1 2415 0
 8347 1036 1C4B     		ldr	r3, .L550+12
 8348 1038 0022     		movs	r2, #0
 8349 103a 1A70     		strb	r2, [r3]
2416:..\src/interruptions.c ****                         interrupt_manager();
 8350              		.loc 1 2416 0
 8351 103c FFF7FEFF 		bl	interrupt_manager
 8352              	.L511:
2417:..\src/interruptions.c ****                     }
2418:..\src/interruptions.c **** 
2419:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 193


 8353              		.loc 1 2419 0
 8354 1040 234B     		ldr	r3, .L550+52
 8355 1042 0022     		movs	r2, #0
 8356 1044 1A80     		strh	r2, [r3]	@ movhi
2420:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8357              		.loc 1 2420 0
 8358 1046 1D4B     		ldr	r3, .L550+32
 8359 1048 0022     		movs	r2, #0
 8360 104a 1A70     		strb	r2, [r3]
2421:..\src/interruptions.c ****                 }
2422:..\src/interruptions.c ****             break;
 8361              		.loc 1 2422 0
 8362 104c 11E0     		b	.L537
 8363              	.L503:
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2425:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8364              		.loc 1 2425 0
 8365 104e 194B     		ldr	r3, .L550+24
 8366 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8367 1052 002B     		cmp	r3, #0
 8368 1054 0FD1     		bne	.L538
 8369              		.loc 1 2425 0 is_stmt 0 discriminator 1
 8370 1056 184B     		ldr	r3, .L550+28
 8371 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8372 105a 002B     		cmp	r3, #0
 8373 105c 0BD1     		bne	.L538
 8374              		.loc 1 2425 0 discriminator 2
 8375 105e 144B     		ldr	r3, .L550+20
 8376 1060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8377 1062 002B     		cmp	r3, #0
 8378 1064 07D1     		bne	.L538
2426:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8379              		.loc 1 2426 0 is_stmt 1
 8380 1066 154B     		ldr	r3, .L550+32
 8381 1068 0222     		movs	r2, #2
 8382 106a 1A70     		strb	r2, [r3]
2427:..\src/interruptions.c ****             break;
 8383              		.loc 1 2427 0
 8384 106c 03E0     		b	.L538
 8385              	.L536:
2405:..\src/interruptions.c **** 
 8386              		.loc 1 2405 0
 8387 106e 00BF     		nop
 8388 1070 02E0     		b	.L497
 8389              	.L537:
2422:..\src/interruptions.c **** 
 8390              		.loc 1 2422 0
 8391 1072 00BF     		nop
 8392 1074 00E0     		b	.L497
 8393              	.L538:
 8394              		.loc 1 2427 0
 8395 1076 00BF     		nop
 8396              	.L497:
2428:..\src/interruptions.c ****         }
2429:..\src/interruptions.c ****        
2430:..\src/interruptions.c ****         if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 194


 8397              		.loc 1 2430 0
 8398 1078 0B4B     		ldr	r3, .L550+12
 8399 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8400 107c 002B     		cmp	r3, #0
 8401 107e 04D0     		beq	.L478
2431:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8402              		.loc 1 2431 0
 8403 1080 094B     		ldr	r3, .L550+12
 8404 1082 0022     		movs	r2, #0
 8405 1084 1A70     		strb	r2, [r3]
2432:..\src/interruptions.c ****             interrupt_manager();
 8406              		.loc 1 2432 0
 8407 1086 FFF7FEFF 		bl	interrupt_manager
 8408              	.L478:
2433:..\src/interruptions.c ****         }
2434:..\src/interruptions.c ****     }
2435:..\src/interruptions.c ****     
2436:..\src/interruptions.c ****     // Read also EMG additional sensors port
2437:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8409              		.loc 1 2437 0
 8410 108a 124B     		ldr	r3, .L550+56
 8411 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8412 108e 062B     		cmp	r3, #6
 8413 1090 73D9     		bls	.L539
2438:..\src/interruptions.c ****         
2439:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8414              		.loc 1 2439 0
 8415 1092 114B     		ldr	r3, .L550+60
 8416 1094 0022     		movs	r2, #0
 8417 1096 1A70     		strb	r2, [r3]
 8418 1098 6BE0     		b	.L514
 8419              	.L551:
 8420 109a 00BF     		.align	2
 8421              	.L550:
 8422 109c 84010000 		.word	UD_counter.10646
 8423 10a0 00000000 		.word	ADC_buf
 8424 10a4 80010000 		.word	UD_mean_value.10648
 8425 10a8 00000000 		.word	interrupt_flag
 8426 10ac 1F85EB51 		.word	1374389535
 8427 10b0 00000000 		.word	joy_UD_status
 8428 10b4 00000000 		.word	emg_1_status
 8429 10b8 00000000 		.word	emg_2_status
 8430 10bc 00000000 		.word	joy_LR_status
 8431 10c0 88010000 		.word	LR_mean_value.10649
 8432 10c4 00000000 		.word	c_mem
 8433 10c8 00FCFFFF 		.word	-1024
 8434 10cc 00000000 		.word	g_adc_meas
 8435 10d0 8C010000 		.word	LR_counter.10647
 8436 10d4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8437 10d8 76010000 		.word	idx.10653
 8438              	.L521:
2440:..\src/interruptions.c ****             
2441:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8439              		.loc 1 2441 0
 8440 10dc 294B     		ldr	r3, .L552
 8441 10de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8442 10e0 0633     		adds	r3, r3, #6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 195


 8443 10e2 294A     		ldr	r2, .L552+4
 8444 10e4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8445 10e8 7B60     		str	r3, [r7, #4]
2442:..\src/interruptions.c ****             if (i_aux < 0) 
 8446              		.loc 1 2442 0
 8447 10ea 7B68     		ldr	r3, [r7, #4]
 8448 10ec 002B     		cmp	r3, #0
 8449 10ee 01DA     		bge	.L515
2443:..\src/interruptions.c ****                 i_aux = 0;
 8450              		.loc 1 2443 0
 8451 10f0 0023     		movs	r3, #0
 8452 10f2 7B60     		str	r3, [r7, #4]
 8453              	.L515:
2444:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8454              		.loc 1 2444 0
 8455 10f4 234B     		ldr	r3, .L552
 8456 10f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8457 10f8 0233     		adds	r3, r3, #2
 8458 10fa DB00     		lsls	r3, r3, #3
 8459 10fc 234A     		ldr	r2, .L552+8
 8460 10fe 1344     		add	r3, r3, r2
 8461 1100 1946     		mov	r1, r3
 8462 1102 7868     		ldr	r0, [r7, #4]
 8463 1104 FFF7FEFF 		bl	filter
 8464 1108 7860     		str	r0, [r7, #4]
2445:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8465              		.loc 1 2445 0
 8466 110a 7B68     		ldr	r3, [r7, #4]
 8467 110c 9B02     		lsls	r3, r3, #10
 8468 110e 002B     		cmp	r3, #0
 8469 1110 01DA     		bge	.L516
 8470 1112 03F2FF33 		addw	r3, r3, #1023
 8471              	.L516:
 8472 1116 9B12     		asrs	r3, r3, #10
 8473 1118 7B60     		str	r3, [r7, #4]
2446:..\src/interruptions.c **** 
2447:..\src/interruptions.c ****             if (interrupt_flag){
 8474              		.loc 1 2447 0
 8475 111a 1D4B     		ldr	r3, .L552+12
 8476 111c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8477 111e 002B     		cmp	r3, #0
 8478 1120 04D0     		beq	.L517
2448:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8479              		.loc 1 2448 0
 8480 1122 1B4B     		ldr	r3, .L552+12
 8481 1124 0022     		movs	r2, #0
 8482 1126 1A70     		strb	r2, [r3]
2449:..\src/interruptions.c ****                 interrupt_manager();
 8483              		.loc 1 2449 0
 8484 1128 FFF7FEFF 		bl	interrupt_manager
 8485              	.L517:
2450:..\src/interruptions.c ****             }
2451:..\src/interruptions.c ****             //Saturation
2452:..\src/interruptions.c ****             if (i_aux < 0)
 8486              		.loc 1 2452 0
 8487 112c 7B68     		ldr	r3, [r7, #4]
 8488 112e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 196


 8489 1130 02DA     		bge	.L518
2453:..\src/interruptions.c ****                 i_aux = 0;
 8490              		.loc 1 2453 0
 8491 1132 0023     		movs	r3, #0
 8492 1134 7B60     		str	r3, [r7, #4]
 8493 1136 06E0     		b	.L519
 8494              	.L518:
2454:..\src/interruptions.c ****             else 
2455:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8495              		.loc 1 2455 0
 8496 1138 7B68     		ldr	r3, [r7, #4]
 8497 113a B3F5806F 		cmp	r3, #1024
 8498 113e 02DD     		ble	.L519
2456:..\src/interruptions.c ****                     i_aux = 1024;
 8499              		.loc 1 2456 0
 8500 1140 4FF48063 		mov	r3, #1024
 8501 1144 7B60     		str	r3, [r7, #4]
 8502              	.L519:
2457:..\src/interruptions.c ****             
2458:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8503              		.loc 1 2458 0
 8504 1146 0F4B     		ldr	r3, .L552
 8505 1148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8506 114a 1249     		ldr	r1, .L552+16
 8507 114c 0233     		adds	r3, r3, #2
 8508 114e 7A68     		ldr	r2, [r7, #4]
 8509 1150 41F82320 		str	r2, [r1, r3, lsl #2]
2459:..\src/interruptions.c **** 
2460:..\src/interruptions.c ****             if (interrupt_flag){
 8510              		.loc 1 2460 0
 8511 1154 0E4B     		ldr	r3, .L552+12
 8512 1156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8513 1158 002B     		cmp	r3, #0
 8514 115a 04D0     		beq	.L520
2461:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8515              		.loc 1 2461 0
 8516 115c 0C4B     		ldr	r3, .L552+12
 8517 115e 0022     		movs	r2, #0
 8518 1160 1A70     		strb	r2, [r3]
2462:..\src/interruptions.c ****                 interrupt_manager();
 8519              		.loc 1 2462 0
 8520 1162 FFF7FEFF 		bl	interrupt_manager
 8521              	.L520:
2439:..\src/interruptions.c ****             
 8522              		.loc 1 2439 0 discriminator 2
 8523 1166 074B     		ldr	r3, .L552
 8524 1168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8525 116a 0133     		adds	r3, r3, #1
 8526 116c DAB2     		uxtb	r2, r3
 8527 116e 054B     		ldr	r3, .L552
 8528 1170 1A70     		strb	r2, [r3]
 8529              	.L514:
2439:..\src/interruptions.c ****             
 8530              		.loc 1 2439 0 is_stmt 0 discriminator 1
 8531 1172 044B     		ldr	r3, .L552
 8532 1174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8533 1176 052B     		cmp	r3, #5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 197


 8534 1178 B0D9     		bls	.L521
 8535              	.L539:
2463:..\src/interruptions.c ****             }
2464:..\src/interruptions.c ****         }
2465:..\src/interruptions.c ****     }
2466:..\src/interruptions.c ****     
2467:..\src/interruptions.c **** }
 8536              		.loc 1 2467 0 is_stmt 1
 8537 117a 00BF     		nop
 8538 117c 0C37     		adds	r7, r7, #12
 8539              		.cfi_def_cfa_offset 20
 8540 117e BD46     		mov	sp, r7
 8541              		.cfi_def_cfa_register 13
 8542              		@ sp needed
 8543 1180 F0BD     		pop	{r4, r5, r6, r7, pc}
 8544              	.L553:
 8545 1182 00BF     		.align	2
 8546              	.L552:
 8547 1184 76010000 		.word	idx.10653
 8548 1188 00000000 		.word	ADC_buf
 8549 118c 00000000 		.word	filt_emg
 8550 1190 00000000 		.word	interrupt_flag
 8551 1194 00000000 		.word	g_adc_meas
 8552              		.cfi_endproc
 8553              	.LFE74:
 8554              		.size	analog_read_end, .-analog_read_end
 8555              		.section	.text.overcurrent_control,"ax",%progbits
 8556              		.align	2
 8557              		.global	overcurrent_control
 8558              		.thumb
 8559              		.thumb_func
 8560              		.type	overcurrent_control, %function
 8561              	overcurrent_control:
 8562              	.LFB75:
2468:..\src/interruptions.c **** 
2469:..\src/interruptions.c **** //==============================================================================
2470:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2471:..\src/interruptions.c **** //==============================================================================
2472:..\src/interruptions.c **** 
2473:..\src/interruptions.c **** void overcurrent_control() {
 8563              		.loc 1 2473 0
 8564              		.cfi_startproc
 8565              		@ args = 0, pretend = 0, frame = 8
 8566              		@ frame_needed = 1, uses_anonymous_args = 0
 8567              		@ link register save eliminated.
 8568 0000 80B4     		push	{r7}
 8569              		.cfi_def_cfa_offset 4
 8570              		.cfi_offset 7, -4
 8571 0002 83B0     		sub	sp, sp, #12
 8572              		.cfi_def_cfa_offset 16
 8573 0004 00AF     		add	r7, sp, #0
 8574              		.cfi_def_cfa_register 7
 8575              	.LBB11:
2474:..\src/interruptions.c ****     
2475:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8576              		.loc 1 2475 0
 8577 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 198


 8578 0008 FB71     		strb	r3, [r7, #7]
 8579 000a 61E0     		b	.L555
 8580              	.L559:
2476:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8581              		.loc 1 2476 0
 8582 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8583 000e 3449     		ldr	r1, .L561
 8584 0010 1346     		mov	r3, r2
 8585 0012 DB00     		lsls	r3, r3, #3
 8586 0014 9B1A     		subs	r3, r3, r2
 8587 0016 1B01     		lsls	r3, r3, #4
 8588 0018 0B44     		add	r3, r3, r1
 8589 001a 03F58673 		add	r3, r3, #268
 8590 001e B3F90030 		ldrsh	r3, [r3]
 8591 0022 002B     		cmp	r3, #0
 8592 0024 51D0     		beq	.L556
2477:..\src/interruptions.c ****             // if the current is over the limit
2478:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 8593              		.loc 1 2478 0
 8594 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8595 0028 2E49     		ldr	r1, .L561+4
 8596 002a 1346     		mov	r3, r2
 8597 002c DB00     		lsls	r3, r3, #3
 8598 002e 9B1A     		subs	r3, r3, r2
 8599 0030 1B01     		lsls	r3, r3, #4
 8600 0032 0B44     		add	r3, r3, r1
 8601 0034 03F58873 		add	r3, r3, #272
 8602 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8603 003a 1946     		mov	r1, r3
 8604 003c 2A4A     		ldr	r2, .L561+8
 8605 003e 3423     		movs	r3, #52
 8606 0040 03FB01F3 		mul	r3, r3, r1
 8607 0044 1344     		add	r3, r3, r2
 8608 0046 0C33     		adds	r3, r3, #12
 8609 0048 1968     		ldr	r1, [r3]
 8610 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8611 004c 2448     		ldr	r0, .L561
 8612 004e 1346     		mov	r3, r2
 8613 0050 DB00     		lsls	r3, r3, #3
 8614 0052 9B1A     		subs	r3, r3, r2
 8615 0054 1B01     		lsls	r3, r3, #4
 8616 0056 0344     		add	r3, r3, r0
 8617 0058 03F58673 		add	r3, r3, #268
 8618 005c B3F90030 		ldrsh	r3, [r3]
 8619 0060 9942     		cmp	r1, r3
 8620 0062 07DD     		ble	.L557
2479:..\src/interruptions.c ****                 //decrease pwm_limit
2480:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8621              		.loc 1 2480 0
 8622 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8623 0066 214A     		ldr	r2, .L561+12
 8624 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8625 006a 013A     		subs	r2, r2, #1
 8626 006c D1B2     		uxtb	r1, r2
 8627 006e 1F4A     		ldr	r2, .L561+12
 8628 0070 D154     		strb	r1, [r2, r3]
 8629 0072 1CE0     		b	.L560
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 199


 8630              	.L557:
2481:..\src/interruptions.c ****             // if the current is in the safe zone
2482:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8631              		.loc 1 2482 0
 8632 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8633 0076 1C4A     		ldr	r2, .L561+8
 8634 0078 3421     		movs	r1, #52
 8635 007a 01FB03F3 		mul	r3, r1, r3
 8636 007e 1344     		add	r3, r3, r2
 8637 0080 0C33     		adds	r3, r3, #12
 8638 0082 1968     		ldr	r1, [r3]
 8639 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8640 0086 1648     		ldr	r0, .L561
 8641 0088 1346     		mov	r3, r2
 8642 008a DB00     		lsls	r3, r3, #3
 8643 008c 9B1A     		subs	r3, r3, r2
 8644 008e 1B01     		lsls	r3, r3, #4
 8645 0090 0344     		add	r3, r3, r0
 8646 0092 03F58673 		add	r3, r3, #268
 8647 0096 B3F90030 		ldrsh	r3, [r3]
 8648 009a 0A3B     		subs	r3, r3, #10
 8649 009c 9942     		cmp	r1, r3
 8650 009e 06DA     		bge	.L560
2483:..\src/interruptions.c ****                 //increase pwm_limit
2484:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8651              		.loc 1 2484 0
 8652 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8653 00a2 124A     		ldr	r2, .L561+12
 8654 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8655 00a6 0132     		adds	r2, r2, #1
 8656 00a8 D1B2     		uxtb	r1, r2
 8657 00aa 104A     		ldr	r2, .L561+12
 8658 00ac D154     		strb	r1, [r2, r3]
 8659              	.L560:
2485:..\src/interruptions.c ****             }
2486:..\src/interruptions.c **** 
2487:..\src/interruptions.c ****             // Bound pwm_limit
2488:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2489:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2490:..\src/interruptions.c ****             else 
2491:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8660              		.loc 1 2491 0
 8661 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8662 00b0 0E4A     		ldr	r2, .L561+12
 8663 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8664 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8665 00b6 0E49     		ldr	r1, .L561+16
 8666 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8667 00ba 9A42     		cmp	r2, r3
 8668 00bc 05D9     		bls	.L556
2492:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8669              		.loc 1 2492 0
 8670 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8671 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8672 00c2 0B49     		ldr	r1, .L561+16
 8673 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8674 00c6 094A     		ldr	r2, .L561+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 200


 8675 00c8 D154     		strb	r1, [r2, r3]
 8676              	.L556:
2475:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8677              		.loc 1 2475 0 discriminator 2
 8678 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8679 00cc 0133     		adds	r3, r3, #1
 8680 00ce FB71     		strb	r3, [r7, #7]
 8681              	.L555:
2475:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8682              		.loc 1 2475 0 is_stmt 0 discriminator 1
 8683 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8684 00d2 012B     		cmp	r3, #1
 8685 00d4 9AD9     		bls	.L559
 8686              	.LBE11:
2493:..\src/interruptions.c ****         }
2494:..\src/interruptions.c ****     }
2495:..\src/interruptions.c **** }
 8687              		.loc 1 2495 0 is_stmt 1
 8688 00d6 00BF     		nop
 8689 00d8 0C37     		adds	r7, r7, #12
 8690              		.cfi_def_cfa_offset 4
 8691 00da BD46     		mov	sp, r7
 8692              		.cfi_def_cfa_register 13
 8693              		@ sp needed
 8694 00dc 80BC     		pop	{r7}
 8695              		.cfi_restore 7
 8696              		.cfi_def_cfa_offset 0
 8697 00de 7047     		bx	lr
 8698              	.L562:
 8699              		.align	2
 8700              	.L561:
 8701 00e0 00000000 		.word	c_mem
 8702 00e4 00000000 		.word	g_mem
 8703 00e8 00000000 		.word	g_meas
 8704 00ec 00000000 		.word	dev_pwm_limit
 8705 00f0 00000000 		.word	dev_pwm_sat
 8706              		.cfi_endproc
 8707              	.LFE75:
 8708              		.size	overcurrent_control, .-overcurrent_control
 8709              		.section	.text.pwm_limit_search,"ax",%progbits
 8710              		.align	2
 8711              		.global	pwm_limit_search
 8712              		.thumb
 8713              		.thumb_func
 8714              		.type	pwm_limit_search, %function
 8715              	pwm_limit_search:
 8716              	.LFB76:
2496:..\src/interruptions.c **** 
2497:..\src/interruptions.c **** //==============================================================================
2498:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2499:..\src/interruptions.c **** //==============================================================================
2500:..\src/interruptions.c **** 
2501:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8717              		.loc 1 2501 0
 8718              		.cfi_startproc
 8719              		@ args = 0, pretend = 0, frame = 16
 8720              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 201


 8721              		@ link register save eliminated.
 8722 0000 80B4     		push	{r7}
 8723              		.cfi_def_cfa_offset 4
 8724              		.cfi_offset 7, -4
 8725 0002 85B0     		sub	sp, sp, #20
 8726              		.cfi_def_cfa_offset 24
 8727 0004 00AF     		add	r7, sp, #0
 8728              		.cfi_def_cfa_register 7
 8729 0006 0346     		mov	r3, r0
 8730 0008 FB71     		strb	r3, [r7, #7]
2502:..\src/interruptions.c **** 
2503:..\src/interruptions.c ****     uint8 CYDATA index;
2504:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 8731              		.loc 1 2504 0
 8732 000a 46F29C33 		movw	r3, #25500
 8733 000e FB81     		strh	r3, [r7, #14]	@ movhi
2505:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8734              		.loc 1 2505 0
 8735 0010 42F6EC43 		movw	r3, #11500
 8736 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2506:..\src/interruptions.c ****     
2507:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8737              		.loc 1 2507 0
 8738 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8739 0018 144A     		ldr	r2, .L568
 8740 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8741 001e FB89     		ldrh	r3, [r7, #14]
 8742 0020 9A42     		cmp	r2, r3
 8743 0022 04DD     		ble	.L564
2508:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8744              		.loc 1 2508 0
 8745 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8746 0026 124A     		ldr	r2, .L568+4
 8747 0028 0021     		movs	r1, #0
 8748 002a D154     		strb	r1, [r2, r3]
2509:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2510:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2511:..\src/interruptions.c ****     } else {
2512:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2513:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2514:..\src/interruptions.c ****     }
2515:..\src/interruptions.c **** }
 8749              		.loc 1 2515 0
 8750 002c 19E0     		b	.L567
 8751              	.L564:
2509:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8752              		.loc 1 2509 0
 8753 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8754 0030 0E4A     		ldr	r2, .L568
 8755 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8756 0036 BB89     		ldrh	r3, [r7, #12]
 8757 0038 9A42     		cmp	r2, r3
 8758 003a 04DA     		bge	.L566
2510:..\src/interruptions.c ****     } else {
 8759              		.loc 1 2510 0
 8760 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8761 003e 0C4A     		ldr	r2, .L568+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 202


 8762 0040 6421     		movs	r1, #100
 8763 0042 D154     		strb	r1, [r2, r3]
 8764              		.loc 1 2515 0
 8765 0044 0DE0     		b	.L567
 8766              	.L566:
2512:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8767              		.loc 1 2512 0
 8768 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8769 0048 084A     		ldr	r2, .L568
 8770 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8771 004e BB89     		ldrh	r3, [r7, #12]
 8772 0050 D31A     		subs	r3, r2, r3
 8773 0052 5B12     		asrs	r3, r3, #9
 8774 0054 FB72     		strb	r3, [r7, #11]
2513:..\src/interruptions.c ****     }
 8775              		.loc 1 2513 0
 8776 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8777 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8778 005a 0649     		ldr	r1, .L568+8
 8779 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8780 005e 044A     		ldr	r2, .L568+4
 8781 0060 D154     		strb	r1, [r2, r3]
 8782              	.L567:
 8783              		.loc 1 2515 0
 8784 0062 00BF     		nop
 8785 0064 1437     		adds	r7, r7, #20
 8786              		.cfi_def_cfa_offset 4
 8787 0066 BD46     		mov	sp, r7
 8788              		.cfi_def_cfa_register 13
 8789              		@ sp needed
 8790 0068 80BC     		pop	{r7}
 8791              		.cfi_restore 7
 8792              		.cfi_def_cfa_offset 0
 8793 006a 7047     		bx	lr
 8794              	.L569:
 8795              		.align	2
 8796              	.L568:
 8797 006c 00000000 		.word	dev_tension
 8798 0070 00000000 		.word	dev_pwm_sat
 8799 0074 00000000 		.word	pwm_preload_values
 8800              		.cfi_endproc
 8801              	.LFE76:
 8802              		.size	pwm_limit_search, .-pwm_limit_search
 8803              		.section	.text.cycles_counter_update,"ax",%progbits
 8804              		.align	2
 8805              		.global	cycles_counter_update
 8806              		.thumb
 8807              		.thumb_func
 8808              		.type	cycles_counter_update, %function
 8809              	cycles_counter_update:
 8810              	.LFB77:
2516:..\src/interruptions.c **** 
2517:..\src/interruptions.c **** //==============================================================================
2518:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2519:..\src/interruptions.c **** //==============================================================================
2520:..\src/interruptions.c **** 
2521:..\src/interruptions.c **** void cycles_counter_update() {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 203


 8811              		.loc 1 2521 0
 8812              		.cfi_startproc
 8813              		@ args = 0, pretend = 0, frame = 24
 8814              		@ frame_needed = 1, uses_anonymous_args = 0
 8815 0000 80B5     		push	{r7, lr}
 8816              		.cfi_def_cfa_offset 8
 8817              		.cfi_offset 7, -8
 8818              		.cfi_offset 14, -4
 8819 0002 86B0     		sub	sp, sp, #24
 8820              		.cfi_def_cfa_offset 32
 8821 0004 00AF     		add	r7, sp, #0
 8822              		.cfi_def_cfa_register 7
2522:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2523:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2524:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2525:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2526:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2527:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2528:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2529:..\src/interruptions.c ****     int32 step;
2530:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2531:..\src/interruptions.c **** 
2532:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8823              		.loc 1 2532 0
 8824 0006 AB4B     		ldr	r3, .L616
 8825 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8826 000c 1946     		mov	r1, r3
 8827 000e AA4A     		ldr	r2, .L616+4
 8828 0010 3423     		movs	r3, #52
 8829 0012 03FB01F3 		mul	r3, r3, r1
 8830 0016 1344     		add	r3, r3, r2
 8831 0018 1A68     		ldr	r2, [r3]
 8832 001a A64B     		ldr	r3, .L616
 8833 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8834 0020 1846     		mov	r0, r3
 8835 0022 A449     		ldr	r1, .L616
 8836 0024 0346     		mov	r3, r0
 8837 0026 5B00     		lsls	r3, r3, #1
 8838 0028 0344     		add	r3, r3, r0
 8839 002a 1B01     		lsls	r3, r3, #4
 8840 002c 0B44     		add	r3, r3, r1
 8841 002e 03F29513 		addw	r3, r3, #405
 8842 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8843 0034 42FA03F3 		asr	r3, r2, r3
 8844 0038 FB60     		str	r3, [r7, #12]
2533:..\src/interruptions.c ****     
2534:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2535:..\src/interruptions.c ****     switch (pos_cycle_status){
 8845              		.loc 1 2535 0
 8846 003a A04B     		ldr	r3, .L616+8
 8847 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8848 003e 012B     		cmp	r3, #1
 8849 0040 3AD0     		beq	.L572
 8850 0042 022B     		cmp	r3, #2
 8851 0044 6ED0     		beq	.L573
 8852 0046 002B     		cmp	r3, #0
 8853 0048 40F01881 		bne	.L571
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 204


2536:..\src/interruptions.c ****         case STATE_INACTIVE:
2537:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 8854              		.loc 1 2537 0
 8855 004c 994B     		ldr	r3, .L616
 8856 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8857 0052 072B     		cmp	r3, #7
 8858 0054 04D0     		beq	.L575
 8859              		.loc 1 2537 0 is_stmt 0 discriminator 1
 8860 0056 9A4B     		ldr	r3, .L616+12
 8861 0058 93F90030 		ldrsb	r3, [r3]
 8862 005c 012B     		cmp	r3, #1
 8863 005e 0CD0     		beq	.L576
 8864              	.L575:
 8865              		.loc 1 2537 0 discriminator 3
 8866 0060 944B     		ldr	r3, .L616
 8867 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8868 0066 072B     		cmp	r3, #7
 8869 0068 40F00581 		bne	.L610
 8870              		.loc 1 2537 0 discriminator 4
 8871 006c 944B     		ldr	r3, .L616+12
 8872 006e 93F90030 		ldrsb	r3, [r3]
 8873 0072 B3F1FF3F 		cmp	r3, #-1
 8874 0076 40F0FE80 		bne	.L610
 8875              	.L576:
2538:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 8876              		.loc 1 2538 0 is_stmt 1
 8877 007a 924A     		ldr	r2, .L616+16
 8878 007c FB68     		ldr	r3, [r7, #12]
 8879 007e 1360     		str	r3, [r2]
2539:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8880              		.loc 1 2539 0
 8881 0080 914B     		ldr	r3, .L616+20
 8882 0082 1A68     		ldr	r2, [r3]
 8883 0084 8F4B     		ldr	r3, .L616+16
 8884 0086 1B68     		ldr	r3, [r3]
 8885 0088 9A42     		cmp	r2, r3
 8886 008a 05DD     		ble	.L578
 8887              		.loc 1 2539 0 is_stmt 0 discriminator 1
 8888 008c 8E4B     		ldr	r3, .L616+20
 8889 008e 1A68     		ldr	r2, [r3]
 8890 0090 8C4B     		ldr	r3, .L616+16
 8891 0092 1B68     		ldr	r3, [r3]
 8892 0094 D31A     		subs	r3, r2, r3
 8893 0096 04E0     		b	.L579
 8894              	.L578:
 8895              		.loc 1 2539 0 discriminator 2
 8896 0098 8A4B     		ldr	r3, .L616+16
 8897 009a 1A68     		ldr	r2, [r3]
 8898 009c 8A4B     		ldr	r3, .L616+20
 8899 009e 1B68     		ldr	r3, [r3]
 8900 00a0 D31A     		subs	r3, r2, r3
 8901              	.L579:
 8902              		.loc 1 2539 0 discriminator 4
 8903 00a2 BB60     		str	r3, [r7, #8]
2540:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 8904              		.loc 1 2540 0 is_stmt 1 discriminator 4
 8905 00a4 834B     		ldr	r3, .L616
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 205


 8906 00a6 5A6D     		ldr	r2, [r3, #84]
 8907 00a8 BB68     		ldr	r3, [r7, #8]
 8908 00aa 1344     		add	r3, r3, r2
 8909 00ac 814A     		ldr	r2, .L616
 8910 00ae 5365     		str	r3, [r2, #84]
2541:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 8911              		.loc 1 2541 0 discriminator 4
 8912 00b0 824B     		ldr	r3, .L616+8
 8913 00b2 0122     		movs	r2, #1
 8914 00b4 1A70     		strb	r2, [r3]
2542:..\src/interruptions.c ****             }
2543:..\src/interruptions.c ****             break;
 8915              		.loc 1 2543 0 discriminator 4
 8916 00b6 DEE0     		b	.L610
 8917              	.L572:
2544:..\src/interruptions.c ****         case STATE_ACTIVE:
2545:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 8918              		.loc 1 2545 0
 8919 00b8 7E4B     		ldr	r3, .L616
 8920 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8921 00be 072B     		cmp	r3, #7
 8922 00c0 05D0     		beq	.L580
 8923              		.loc 1 2545 0 is_stmt 0 discriminator 1
 8924 00c2 7F4B     		ldr	r3, .L616+12
 8925 00c4 93F90030 		ldrsb	r3, [r3]
 8926 00c8 B3F1FF3F 		cmp	r3, #-1
 8927 00cc 0BD0     		beq	.L581
 8928              	.L580:
 8929              		.loc 1 2545 0 discriminator 3
 8930 00ce 794B     		ldr	r3, .L616
 8931 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8932 00d4 072B     		cmp	r3, #7
 8933 00d6 40F0D080 		bne	.L611
 8934              		.loc 1 2545 0 discriminator 4
 8935 00da 794B     		ldr	r3, .L616+12
 8936 00dc 93F90030 		ldrsb	r3, [r3]
 8937 00e0 012B     		cmp	r3, #1
 8938 00e2 40F0CA80 		bne	.L611
 8939              	.L581:
2546:..\src/interruptions.c ****                 max_pos = curr_pos;
 8940              		.loc 1 2546 0 is_stmt 1
 8941 00e6 784A     		ldr	r2, .L616+20
 8942 00e8 FB68     		ldr	r3, [r7, #12]
 8943 00ea 1360     		str	r3, [r2]
2547:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8944              		.loc 1 2547 0
 8945 00ec 764B     		ldr	r3, .L616+20
 8946 00ee 1A68     		ldr	r2, [r3]
 8947 00f0 744B     		ldr	r3, .L616+16
 8948 00f2 1B68     		ldr	r3, [r3]
 8949 00f4 9A42     		cmp	r2, r3
 8950 00f6 05DD     		ble	.L583
 8951              		.loc 1 2547 0 is_stmt 0 discriminator 1
 8952 00f8 734B     		ldr	r3, .L616+20
 8953 00fa 1A68     		ldr	r2, [r3]
 8954 00fc 714B     		ldr	r3, .L616+16
 8955 00fe 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 206


 8956 0100 D31A     		subs	r3, r2, r3
 8957 0102 04E0     		b	.L584
 8958              	.L583:
 8959              		.loc 1 2547 0 discriminator 2
 8960 0104 6F4B     		ldr	r3, .L616+16
 8961 0106 1A68     		ldr	r2, [r3]
 8962 0108 6F4B     		ldr	r3, .L616+20
 8963 010a 1B68     		ldr	r3, [r3]
 8964 010c D31A     		subs	r3, r2, r3
 8965              	.L584:
 8966              		.loc 1 2547 0 discriminator 4
 8967 010e BB60     		str	r3, [r7, #8]
2548:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 8968              		.loc 1 2548 0 is_stmt 1 discriminator 4
 8969 0110 684B     		ldr	r3, .L616
 8970 0112 5A6D     		ldr	r2, [r3, #84]
 8971 0114 BB68     		ldr	r3, [r7, #8]
 8972 0116 1344     		add	r3, r3, r2
 8973 0118 664A     		ldr	r2, .L616
 8974 011a 5365     		str	r3, [r2, #84]
2549:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 8975              		.loc 1 2549 0 discriminator 4
 8976 011c 674B     		ldr	r3, .L616+8
 8977 011e 0222     		movs	r2, #2
 8978 0120 1A70     		strb	r2, [r3]
2550:..\src/interruptions.c ****             }
2551:..\src/interruptions.c ****             break;
 8979              		.loc 1 2551 0 discriminator 4
 8980 0122 AAE0     		b	.L611
 8981              	.L573:
2552:..\src/interruptions.c ****         case COUNTER_INC:
2553:..\src/interruptions.c **** 
2554:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8982              		.loc 1 2554 0
 8983 0124 684B     		ldr	r3, .L616+20
 8984 0126 1A68     		ldr	r2, [r3]
 8985 0128 664B     		ldr	r3, .L616+16
 8986 012a 1B68     		ldr	r3, [r3]
 8987 012c 9A42     		cmp	r2, r3
 8988 012e 05DD     		ble	.L585
 8989              		.loc 1 2554 0 is_stmt 0 discriminator 1
 8990 0130 654B     		ldr	r3, .L616+20
 8991 0132 1A68     		ldr	r2, [r3]
 8992 0134 634B     		ldr	r3, .L616+16
 8993 0136 1B68     		ldr	r3, [r3]
 8994 0138 D31A     		subs	r3, r2, r3
 8995 013a 04E0     		b	.L586
 8996              	.L585:
 8997              		.loc 1 2554 0 discriminator 2
 8998 013c 614B     		ldr	r3, .L616+16
 8999 013e 1A68     		ldr	r2, [r3]
 9000 0140 614B     		ldr	r3, .L616+20
 9001 0142 1B68     		ldr	r3, [r3]
 9002 0144 D31A     		subs	r3, r2, r3
 9003              	.L586:
 9004              		.loc 1 2554 0 discriminator 4
 9005 0146 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 207


2555:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9006              		.loc 1 2555 0 is_stmt 1 discriminator 4
 9007 0148 604B     		ldr	r3, .L616+24
 9008 014a 1B68     		ldr	r3, [r3]
 9009 014c BA68     		ldr	r2, [r7, #8]
 9010 014e 9A42     		cmp	r2, r3
 9011 0150 40F38D80 		ble	.L587
2556:..\src/interruptions.c ****                 //update position histogram
2557:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9012              		.loc 1 2557 0
 9013 0154 574B     		ldr	r3, .L616
 9014 0156 D3F8E820 		ldr	r2, [r3, #232]
 9015 015a 564B     		ldr	r3, .L616
 9016 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9017 0160 1846     		mov	r0, r3
 9018 0162 5449     		ldr	r1, .L616
 9019 0164 0346     		mov	r3, r0
 9020 0166 5B00     		lsls	r3, r3, #1
 9021 0168 0344     		add	r3, r3, r0
 9022 016a 1B01     		lsls	r3, r3, #4
 9023 016c 0B44     		add	r3, r3, r1
 9024 016e 03F29513 		addw	r3, r3, #405
 9025 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9026 0174 42FA03F3 		asr	r3, r2, r3
 9027 0178 554A     		ldr	r2, .L616+28
 9028 017a 82FB0312 		smull	r1, r2, r2, r3
 9029 017e 9210     		asrs	r2, r2, #2
 9030 0180 DB17     		asrs	r3, r3, #31
 9031 0182 D31A     		subs	r3, r2, r3
 9032 0184 7B60     		str	r3, [r7, #4]
2558:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9033              		.loc 1 2558 0
 9034 0186 4F4B     		ldr	r3, .L616+16
 9035 0188 1A68     		ldr	r2, [r3]
 9036 018a 7B68     		ldr	r3, [r7, #4]
 9037 018c 92FBF3F3 		sdiv	r3, r2, r3
 9038 0190 FB70     		strb	r3, [r7, #3]
2559:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9039              		.loc 1 2559 0
 9040 0192 4D4B     		ldr	r3, .L616+20
 9041 0194 1A68     		ldr	r2, [r3]
 9042 0196 7B68     		ldr	r3, [r7, #4]
 9043 0198 92FBF3F3 		sdiv	r3, r2, r3
 9044 019c BB70     		strb	r3, [r7, #2]
2560:..\src/interruptions.c ****                 
2561:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2562:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9045              		.loc 1 2562 0
 9046 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9047 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9048 01a2 9342     		cmp	r3, r2
 9049 01a4 28BF     		it	cs
 9050 01a6 1346     		movcs	r3, r2
 9051 01a8 7B70     		strb	r3, [r7, #1]
2563:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9052              		.loc 1 2563 0
 9053 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 208


 9054 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9055 01ae 9342     		cmp	r3, r2
 9056 01b0 38BF     		it	cc
 9057 01b2 1346     		movcc	r3, r2
 9058 01b4 3B70     		strb	r3, [r7]
2564:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9059              		.loc 1 2564 0
 9060 01b6 7B78     		ldrb	r3, [r7, #1]
 9061 01b8 FB75     		strb	r3, [r7, #23]
 9062 01ba 0DE0     		b	.L588
 9063              	.L589:
2565:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2566:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9064              		.loc 1 2566 0 discriminator 3
 9065 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9066 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9067 01c0 3C49     		ldr	r1, .L616
 9068 01c2 0632     		adds	r2, r2, #6
 9069 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9070 01c8 0132     		adds	r2, r2, #1
 9071 01ca 3A49     		ldr	r1, .L616
 9072 01cc 0633     		adds	r3, r3, #6
 9073 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2564:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9074              		.loc 1 2564 0 discriminator 3
 9075 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9076 01d4 0133     		adds	r3, r3, #1
 9077 01d6 FB75     		strb	r3, [r7, #23]
 9078              	.L588:
2564:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 9079              		.loc 1 2564 0 is_stmt 0 discriminator 1
 9080 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9081 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9082 01dc 9A42     		cmp	r2, r3
 9083 01de EDD9     		bls	.L589
2567:..\src/interruptions.c ****                 }
2568:..\src/interruptions.c ****                 
2569:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2570:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9084              		.loc 1 2570 0 is_stmt 1
 9085 01e0 344B     		ldr	r3, .L616
 9086 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 9087 01e6 002B     		cmp	r3, #0
 9088 01e8 00DA     		bge	.L590
 9089 01ea 0333     		adds	r3, r3, #3
 9090              	.L590:
 9091 01ec 9B10     		asrs	r3, r3, #2
 9092 01ee 1BB2     		sxth	r3, r3
 9093 01f0 7B60     		str	r3, [r7, #4]
2571:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9094              		.loc 1 2571 0
 9095 01f2 304B     		ldr	r3, .L616
 9096 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9097 01f8 012B     		cmp	r3, #1
 9098 01fa 0CD1     		bne	.L591
2572:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9099              		.loc 1 2572 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 209


 9100 01fc 2D4B     		ldr	r3, .L616
 9101 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9102 0202 1946     		mov	r1, r3
 9103 0204 2C4A     		ldr	r2, .L616+4
 9104 0206 3423     		movs	r3, #52
 9105 0208 03FB01F3 		mul	r3, r3, r1
 9106 020c 1344     		add	r3, r3, r2
 9107 020e 1433     		adds	r3, r3, #20
 9108 0210 1B68     		ldr	r3, [r3]
 9109 0212 3B61     		str	r3, [r7, #16]
 9110 0214 0BE0     		b	.L592
 9111              	.L591:
2573:..\src/interruptions.c ****                 else
2574:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9112              		.loc 1 2574 0
 9113 0216 274B     		ldr	r3, .L616
 9114 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9115 021c 1946     		mov	r1, r3
 9116 021e 264A     		ldr	r2, .L616+4
 9117 0220 3423     		movs	r3, #52
 9118 0222 03FB01F3 		mul	r3, r3, r1
 9119 0226 1344     		add	r3, r3, r2
 9120 0228 0C33     		adds	r3, r3, #12
 9121 022a 1B68     		ldr	r3, [r3]
 9122 022c 3B61     		str	r3, [r7, #16]
 9123              	.L592:
2575:..\src/interruptions.c ****                     
2576:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9124              		.loc 1 2576 0
 9125 022e 214B     		ldr	r3, .L616
 9126 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 9127 0234 1A46     		mov	r2, r3
 9128 0236 3B69     		ldr	r3, [r7, #16]
 9129 0238 9A42     		cmp	r2, r3
 9130 023a 05DA     		bge	.L593
2577:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9131              		.loc 1 2577 0
 9132 023c 1D4B     		ldr	r3, .L616
 9133 023e DB6C     		ldr	r3, [r3, #76]
 9134 0240 0133     		adds	r3, r3, #1
 9135 0242 1C4A     		ldr	r2, .L616
 9136 0244 D364     		str	r3, [r2, #76]
 9137 0246 12E0     		b	.L587
 9138              	.L593:
2578:..\src/interruptions.c ****                 else
2579:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9139              		.loc 1 2579 0
 9140 0248 3A69     		ldr	r2, [r7, #16]
 9141 024a 7B68     		ldr	r3, [r7, #4]
 9142 024c 92FBF3F3 		sdiv	r3, r2, r3
 9143 0250 DBB2     		uxtb	r3, r3
 9144 0252 3969     		ldr	r1, [r7, #16]
 9145 0254 7A68     		ldr	r2, [r7, #4]
 9146 0256 91FBF2F2 		sdiv	r2, r1, r2
 9147 025a D2B2     		uxtb	r2, r2
 9148 025c 1549     		ldr	r1, .L616
 9149 025e 1032     		adds	r2, r2, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 210


 9150 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9151 0264 0132     		adds	r2, r2, #1
 9152 0266 1349     		ldr	r1, .L616
 9153 0268 1033     		adds	r3, r3, #16
 9154 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 9155              	.L587:
2580:..\src/interruptions.c ****             }
2581:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9156              		.loc 1 2581 0
 9157 026e 134B     		ldr	r3, .L616+8
 9158 0270 0022     		movs	r2, #0
 9159 0272 1A70     		strb	r2, [r3]
2582:..\src/interruptions.c ****             break;
 9160              		.loc 1 2582 0
 9161 0274 02E0     		b	.L571
 9162              	.L610:
2543:..\src/interruptions.c ****         case STATE_ACTIVE:
 9163              		.loc 1 2543 0
 9164 0276 00BF     		nop
 9165 0278 00E0     		b	.L571
 9166              	.L611:
2551:..\src/interruptions.c ****         case COUNTER_INC:
 9167              		.loc 1 2551 0
 9168 027a 00BF     		nop
 9169              	.L571:
2583:..\src/interruptions.c ****     }
2584:..\src/interruptions.c ****     
2585:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2586:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9170              		.loc 1 2586 0
 9171 027c 0023     		movs	r3, #0
 9172 027e FB75     		strb	r3, [r7, #23]
 9173 0280 53E0     		b	.L594
 9174              	.L602:
2587:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9175              		.loc 1 2587 0
 9176 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9177 0284 134A     		ldr	r2, .L616+32
 9178 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9179 0288 012B     		cmp	r3, #1
 9180 028a 27D0     		beq	.L596
 9181 028c 022B     		cmp	r3, #2
 9182 028e 36D0     		beq	.L597
 9183 0290 002B     		cmp	r3, #0
 9184 0292 47D1     		bne	.L595
2588:..\src/interruptions.c ****             case STATE_INACTIVE:
2589:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9185              		.loc 1 2589 0
 9186 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9187 0296 104A     		ldr	r2, .L616+36
 9188 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9189 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9190 029e 0549     		ldr	r1, .L616
 9191 02a0 F832     		adds	r2, r2, #248
 9192 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9193 02a6 9342     		cmp	r3, r2
 9194 02a8 39DD     		ble	.L612
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 211


2590:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9195              		.loc 1 2590 0
 9196 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9197 02ac 094A     		ldr	r2, .L616+32
 9198 02ae 0121     		movs	r1, #1
 9199 02b0 D154     		strb	r1, [r2, r3]
2591:..\src/interruptions.c ****                 }
2592:..\src/interruptions.c ****                 break;
 9200              		.loc 1 2592 0
 9201 02b2 34E0     		b	.L612
 9202              	.L617:
 9203              		.align	2
 9204              	.L616:
 9205 02b4 00000000 		.word	g_mem
 9206 02b8 00000000 		.word	g_meas
 9207 02bc 8E010000 		.word	pos_cycle_status.10723
 9208 02c0 00000000 		.word	pwm_sign
 9209 02c4 90010000 		.word	thr_pos.10727
 9210 02c8 94010000 		.word	max_pos.10728
 9211 02cc 08000000 		.word	bin_threshold.10726
 9212 02d0 67666666 		.word	1717986919
 9213 02d4 98010000 		.word	emg_cycle_status.10724
 9214 02d8 00000000 		.word	g_adc_meas
 9215              	.L596:
2593:..\src/interruptions.c ****             case STATE_ACTIVE:
2594:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 9216              		.loc 1 2594 0
 9217 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9218 02de 414A     		ldr	r2, .L618
 9219 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9220 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9221 02e6 4049     		ldr	r1, .L618+4
 9222 02e8 F833     		adds	r3, r3, #248
 9223 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9224 02ee 0A3B     		subs	r3, r3, #10
 9225 02f0 9A42     		cmp	r2, r3
 9226 02f2 16DA     		bge	.L613
2595:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9227              		.loc 1 2595 0
 9228 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9229 02f6 3D4A     		ldr	r2, .L618+8
 9230 02f8 0221     		movs	r1, #2
 9231 02fa D154     		strb	r1, [r2, r3]
2596:..\src/interruptions.c ****                 }
2597:..\src/interruptions.c ****                 break;
 9232              		.loc 1 2597 0
 9233 02fc 11E0     		b	.L613
 9234              	.L597:
2598:..\src/interruptions.c ****             case COUNTER_INC:
2599:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 9235              		.loc 1 2599 0
 9236 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9237 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9238 0302 3949     		ldr	r1, .L618+4
 9239 0304 0432     		adds	r2, r2, #4
 9240 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9241 030a 0132     		adds	r2, r2, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 212


 9242 030c 3649     		ldr	r1, .L618+4
 9243 030e 0433     		adds	r3, r3, #4
 9244 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2600:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9245              		.loc 1 2600 0
 9246 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9247 0316 354A     		ldr	r2, .L618+8
 9248 0318 0021     		movs	r1, #0
 9249 031a D154     		strb	r1, [r2, r3]
2601:..\src/interruptions.c ****                 break;
 9250              		.loc 1 2601 0
 9251 031c 02E0     		b	.L595
 9252              	.L612:
2592:..\src/interruptions.c ****             case STATE_ACTIVE:
 9253              		.loc 1 2592 0
 9254 031e 00BF     		nop
 9255 0320 00E0     		b	.L595
 9256              	.L613:
2597:..\src/interruptions.c ****             case COUNTER_INC:
 9257              		.loc 1 2597 0
 9258 0322 00BF     		nop
 9259              	.L595:
2586:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9260              		.loc 1 2586 0 discriminator 2
 9261 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9262 0326 0133     		adds	r3, r3, #1
 9263 0328 FB75     		strb	r3, [r7, #23]
 9264              	.L594:
2586:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9265              		.loc 1 2586 0 is_stmt 0 discriminator 1
 9266 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9267 032c 012B     		cmp	r3, #1
 9268 032e 07D8     		bhi	.L601
2586:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9269              		.loc 1 2586 0 discriminator 3
 9270 0330 2F4B     		ldr	r3, .L618+12
 9271 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9272 0334 002B     		cmp	r3, #0
 9273 0336 03D1     		bne	.L601
2586:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9274              		.loc 1 2586 0 discriminator 4
 9275 0338 2E4B     		ldr	r3, .L618+16
 9276 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9277 033c 002B     		cmp	r3, #0
 9278 033e A0D0     		beq	.L602
 9279              	.L601:
2602:..\src/interruptions.c ****         }
2603:..\src/interruptions.c ****     }
2604:..\src/interruptions.c ****     
2605:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2606:..\src/interruptions.c ****     switch (rest_cycle_status){
 9280              		.loc 1 2606 0 is_stmt 1
 9281 0340 2D4B     		ldr	r3, .L618+20
 9282 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9283 0344 012B     		cmp	r3, #1
 9284 0346 11D0     		beq	.L604
 9285 0348 022B     		cmp	r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 213


 9286 034a 2AD0     		beq	.L605
 9287 034c 002B     		cmp	r3, #0
 9288 034e 42D1     		bne	.L603
2607:..\src/interruptions.c ****         case STATE_INACTIVE:
2608:..\src/interruptions.c ****             if (rest_enabled){
 9289              		.loc 1 2608 0
 9290 0350 2A4B     		ldr	r3, .L618+24
 9291 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9292 0354 002B     		cmp	r3, #0
 9293 0356 3BD0     		beq	.L614
2609:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9294              		.loc 1 2609 0
 9295 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9296 035c 0346     		mov	r3, r0
 9297 035e 1A46     		mov	r2, r3
 9298 0360 274B     		ldr	r3, .L618+28
 9299 0362 1A60     		str	r2, [r3]
2610:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9300              		.loc 1 2610 0
 9301 0364 244B     		ldr	r3, .L618+20
 9302 0366 0122     		movs	r2, #1
 9303 0368 1A70     		strb	r2, [r3]
2611:..\src/interruptions.c ****             }
2612:..\src/interruptions.c ****             break;
 9304              		.loc 1 2612 0
 9305 036a 31E0     		b	.L614
 9306              	.L604:
2613:..\src/interruptions.c ****         case STATE_ACTIVE:
2614:..\src/interruptions.c ****             if (!rest_enabled){
 9307              		.loc 1 2614 0
 9308 036c 234B     		ldr	r3, .L618+24
 9309 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9310 0370 002B     		cmp	r3, #0
 9311 0372 2FD1     		bne	.L615
2615:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9312              		.loc 1 2615 0
 9313 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9314 0378 0346     		mov	r3, r0
 9315 037a 1A46     		mov	r2, r3
 9316 037c 214B     		ldr	r3, .L618+32
 9317 037e 1A60     		str	r2, [r3]
2616:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9318              		.loc 1 2616 0
 9319 0380 1F4B     		ldr	r3, .L618+28
 9320 0382 1A68     		ldr	r2, [r3]
 9321 0384 1F4B     		ldr	r3, .L618+32
 9322 0386 1B68     		ldr	r3, [r3]
 9323 0388 9A42     		cmp	r2, r3
 9324 038a 06D2     		bcs	.L609
2617:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9325              		.loc 1 2617 0
 9326 038c 1C4B     		ldr	r3, .L618+28
 9327 038e 1B68     		ldr	r3, [r3]
 9328 0390 03F5BB53 		add	r3, r3, #5984
 9329 0394 1033     		adds	r3, r3, #16
 9330 0396 1A4A     		ldr	r2, .L618+28
 9331 0398 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 214


 9332              	.L609:
2618:..\src/interruptions.c ****                 }
2619:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9333              		.loc 1 2619 0
 9334 039a 174B     		ldr	r3, .L618+20
 9335 039c 0222     		movs	r2, #2
 9336 039e 1A70     		strb	r2, [r3]
2620:..\src/interruptions.c ****             }
2621:..\src/interruptions.c ****             break;
 9337              		.loc 1 2621 0
 9338 03a0 18E0     		b	.L615
 9339              	.L605:
2622:..\src/interruptions.c ****         case COUNTER_INC: 
2623:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9340              		.loc 1 2623 0
 9341 03a2 114B     		ldr	r3, .L618+4
 9342 03a4 DA6D     		ldr	r2, [r3, #92]
 9343 03a6 164B     		ldr	r3, .L618+28
 9344 03a8 1968     		ldr	r1, [r3]
 9345 03aa 164B     		ldr	r3, .L618+32
 9346 03ac 1B68     		ldr	r3, [r3]
 9347 03ae CB1A     		subs	r3, r1, r3
 9348 03b0 1549     		ldr	r1, .L618+36
 9349 03b2 A1FB0313 		umull	r1, r3, r1, r3
 9350 03b6 1B09     		lsrs	r3, r3, #4
 9351 03b8 1344     		add	r3, r3, r2
 9352 03ba 0B4A     		ldr	r2, .L618+4
 9353 03bc D365     		str	r3, [r2, #92]
2624:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9354              		.loc 1 2624 0
 9355 03be 0A4B     		ldr	r3, .L618+4
 9356 03c0 1B6D     		ldr	r3, [r3, #80]
 9357 03c2 0133     		adds	r3, r3, #1
 9358 03c4 084A     		ldr	r2, .L618+4
 9359 03c6 1365     		str	r3, [r2, #80]
2625:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9360              		.loc 1 2625 0
 9361 03c8 0B4B     		ldr	r3, .L618+20
 9362 03ca 0022     		movs	r2, #0
 9363 03cc 1A70     		strb	r2, [r3]
2626:..\src/interruptions.c ****             break;
 9364              		.loc 1 2626 0
 9365 03ce 02E0     		b	.L603
 9366              	.L614:
2612:..\src/interruptions.c ****         case STATE_ACTIVE:
 9367              		.loc 1 2612 0
 9368 03d0 00BF     		nop
 9369 03d2 00E0     		b	.L603
 9370              	.L615:
2621:..\src/interruptions.c ****         case COUNTER_INC: 
 9371              		.loc 1 2621 0
 9372 03d4 00BF     		nop
 9373              	.L603:
2627:..\src/interruptions.c ****     }
2628:..\src/interruptions.c ****           
2629:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2630:..\src/interruptions.c ****     save_cycles_eeprom();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 215


 9374              		.loc 1 2630 0
 9375 03d6 FFF7FEFF 		bl	save_cycles_eeprom
2631:..\src/interruptions.c ****     
2632:..\src/interruptions.c **** }
 9376              		.loc 1 2632 0
 9377 03da 00BF     		nop
 9378 03dc 1837     		adds	r7, r7, #24
 9379              		.cfi_def_cfa_offset 8
 9380 03de BD46     		mov	sp, r7
 9381              		.cfi_def_cfa_register 13
 9382              		@ sp needed
 9383 03e0 80BD     		pop	{r7, pc}
 9384              	.L619:
 9385 03e2 00BF     		.align	2
 9386              	.L618:
 9387 03e4 00000000 		.word	g_adc_meas
 9388 03e8 00000000 		.word	g_mem
 9389 03ec 98010000 		.word	emg_cycle_status.10724
 9390 03f0 00000000 		.word	emg_1_status
 9391 03f4 00000000 		.word	emg_2_status
 9392 03f8 9A010000 		.word	rest_cycle_status.10725
 9393 03fc 00000000 		.word	rest_enabled
 9394 0400 9C010000 		.word	timer_value_s.10738
 9395 0404 A0010000 		.word	timer_value_e.10739
 9396 0408 1F85EB51 		.word	1374389535
 9397              		.cfi_endproc
 9398              	.LFE77:
 9399              		.size	cycles_counter_update, .-cycles_counter_update
 9400              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9401              		.align	2
 9402              		.global	save_cycles_eeprom
 9403              		.thumb
 9404              		.thumb_func
 9405              		.type	save_cycles_eeprom, %function
 9406              	save_cycles_eeprom:
 9407              	.LFB78:
2633:..\src/interruptions.c **** 
2634:..\src/interruptions.c **** //==============================================================================
2635:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2636:..\src/interruptions.c **** //==============================================================================
2637:..\src/interruptions.c **** 
2638:..\src/interruptions.c **** void save_cycles_eeprom() {
 9408              		.loc 1 2638 0
 9409              		.cfi_startproc
 9410              		@ args = 0, pretend = 0, frame = 24
 9411              		@ frame_needed = 1, uses_anonymous_args = 0
 9412 0000 80B5     		push	{r7, lr}
 9413              		.cfi_def_cfa_offset 8
 9414              		.cfi_offset 7, -8
 9415              		.cfi_offset 14, -4
 9416 0002 86B0     		sub	sp, sp, #24
 9417              		.cfi_def_cfa_offset 32
 9418 0004 00AF     		add	r7, sp, #0
 9419              		.cfi_def_cfa_register 7
2639:..\src/interruptions.c **** 
2640:..\src/interruptions.c ****     cystatus status;
2641:..\src/interruptions.c ****     static uint8 row_number;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 216


2642:..\src/interruptions.c ****     uint8 row_start = 1;
 9420              		.loc 1 2642 0
 9421 0006 0123     		movs	r3, #1
 9422 0008 FB75     		strb	r3, [r7, #23]
2643:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 9423              		.loc 1 2643 0
 9424 000a 394B     		ldr	r3, .L636
 9425 000c 3B61     		str	r3, [r7, #16]
2644:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 9426              		.loc 1 2644 0
 9427 000e 394B     		ldr	r3, .L636+4
 9428 0010 FB60     		str	r3, [r7, #12]
2645:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9429              		.loc 1 2645 0
 9430 0012 FB7D     		ldrb	r3, [r7, #23]
 9431 0014 0433     		adds	r3, r3, #4
 9432 0016 FB72     		strb	r3, [r7, #11]
2646:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2647:..\src/interruptions.c **** 
2648:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2649:..\src/interruptions.c ****     switch(cycles_status) {
 9433              		.loc 1 2649 0
 9434 0018 374B     		ldr	r3, .L636+8
 9435 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9436 001c 042B     		cmp	r3, #4
 9437 001e 63D8     		bhi	.L632
 9438 0020 01A2     		adr	r2, .L623
 9439 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9440 0026 00BF     		.p2align 2
 9441              	.L623:
 9442 0028 3D000000 		.word	.L622+1
 9443 002c 5B000000 		.word	.L624+1
 9444 0030 8B000000 		.word	.L625+1
 9445 0034 C7000000 		.word	.L626+1
 9446 0038 DF000000 		.word	.L633+1
 9447              		.p2align 1
 9448              	.L622:
2650:..\src/interruptions.c ****         case PREPARE_DATA:
2651:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2652:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9449              		.loc 1 2652 0
 9450 003c 5022     		movs	r2, #80
 9451 003e 3969     		ldr	r1, [r7, #16]
 9452 0040 F868     		ldr	r0, [r7, #12]
 9453 0042 FFF7FEFF 		bl	memcpy
2653:..\src/interruptions.c ****             m_addr = addr_start;
 9454              		.loc 1 2653 0
 9455 0046 2D4A     		ldr	r2, .L636+12
 9456 0048 3B69     		ldr	r3, [r7, #16]
 9457 004a 1360     		str	r3, [r2]
2654:..\src/interruptions.c ****             row_number = row_start;
 9458              		.loc 1 2654 0
 9459 004c 2C4A     		ldr	r2, .L636+16
 9460 004e FB7D     		ldrb	r3, [r7, #23]
 9461 0050 1370     		strb	r3, [r2]
2655:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9462              		.loc 1 2655 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 217


 9463 0052 294B     		ldr	r3, .L636+8
 9464 0054 0122     		movs	r2, #1
 9465 0056 1A70     		strb	r2, [r3]
2656:..\src/interruptions.c ****             break;
 9466              		.loc 1 2656 0
 9467 0058 46E0     		b	.L621
 9468              	.L624:
2657:..\src/interruptions.c ****             
2658:..\src/interruptions.c ****         case WRITE_CYCLES:
2659:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9469              		.loc 1 2659 0
 9470 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2660:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9471              		.loc 1 2660 0
 9472 005e 274B     		ldr	r3, .L636+12
 9473 0060 1A68     		ldr	r2, [r3]
 9474 0062 274B     		ldr	r3, .L636+16
 9475 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9476 0066 1946     		mov	r1, r3
 9477 0068 1046     		mov	r0, r2
 9478 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9479 006e 7860     		str	r0, [r7, #4]
2661:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9480              		.loc 1 2661 0
 9481 0070 7B68     		ldr	r3, [r7, #4]
 9482 0072 072B     		cmp	r3, #7
 9483 0074 02D0     		beq	.L628
 9484              		.loc 1 2661 0 is_stmt 0 discriminator 1
 9485 0076 7B68     		ldr	r3, [r7, #4]
 9486 0078 002B     		cmp	r3, #0
 9487 007a 32D1     		bne	.L634
 9488              	.L628:
2662:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9489              		.loc 1 2662 0 is_stmt 1
 9490 007c 1E4B     		ldr	r3, .L636+8
 9491 007e 0222     		movs	r2, #2
 9492 0080 1A70     		strb	r2, [r3]
2663:..\src/interruptions.c ****                 can_write = FALSE;
 9493              		.loc 1 2663 0
 9494 0082 204B     		ldr	r3, .L636+20
 9495 0084 0022     		movs	r2, #0
 9496 0086 1A70     		strb	r2, [r3]
2664:..\src/interruptions.c ****             }
2665:..\src/interruptions.c ****             break;
 9497              		.loc 1 2665 0
 9498 0088 2BE0     		b	.L634
 9499              	.L625:
2666:..\src/interruptions.c ****             
2667:..\src/interruptions.c ****         case WAIT_QUERY:
2668:..\src/interruptions.c ****             status = EEPROM_Query();
 9500              		.loc 1 2668 0
 9501 008a FFF7FEFF 		bl	EEPROM_Query
 9502 008e 7860     		str	r0, [r7, #4]
2669:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9503              		.loc 1 2669 0
 9504 0090 7B68     		ldr	r3, [r7, #4]
 9505 0092 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 218


 9506 0094 27D1     		bne	.L635
2670:..\src/interruptions.c ****                 if (row_number < row_end) {
 9507              		.loc 1 2670 0
 9508 0096 1A4B     		ldr	r3, .L636+16
 9509 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9510 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9511 009c 9A42     		cmp	r2, r3
 9512 009e 0ED9     		bls	.L631
2671:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 9513              		.loc 1 2671 0
 9514 00a0 164B     		ldr	r3, .L636+12
 9515 00a2 1B68     		ldr	r3, [r3]
 9516 00a4 1033     		adds	r3, r3, #16
 9517 00a6 154A     		ldr	r2, .L636+12
 9518 00a8 1360     		str	r3, [r2]
2672:..\src/interruptions.c ****                     row_number = row_number + 1;
 9519              		.loc 1 2672 0
 9520 00aa 154B     		ldr	r3, .L636+16
 9521 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9522 00ae 0133     		adds	r3, r3, #1
 9523 00b0 DAB2     		uxtb	r2, r3
 9524 00b2 134B     		ldr	r3, .L636+16
 9525 00b4 1A70     		strb	r2, [r3]
2673:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 9526              		.loc 1 2673 0
 9527 00b6 104B     		ldr	r3, .L636+8
 9528 00b8 0122     		movs	r2, #1
 9529 00ba 1A70     		strb	r2, [r3]
2674:..\src/interruptions.c ****                 }
2675:..\src/interruptions.c ****                 else {
2676:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2677:..\src/interruptions.c ****                 }
2678:..\src/interruptions.c ****             }
2679:..\src/interruptions.c ****             break;
 9530              		.loc 1 2679 0
 9531 00bc 13E0     		b	.L635
 9532              	.L631:
2676:..\src/interruptions.c ****                 }
 9533              		.loc 1 2676 0
 9534 00be 0E4B     		ldr	r3, .L636+8
 9535 00c0 0322     		movs	r2, #3
 9536 00c2 1A70     		strb	r2, [r3]
 9537              		.loc 1 2679 0
 9538 00c4 0FE0     		b	.L635
 9539              	.L626:
2680:..\src/interruptions.c ****            
2681:..\src/interruptions.c ****         case WRITE_END:
2682:..\src/interruptions.c ****             can_write = TRUE;            
 9540              		.loc 1 2682 0
 9541 00c6 0F4B     		ldr	r3, .L636+20
 9542 00c8 0122     		movs	r2, #1
 9543 00ca 1A70     		strb	r2, [r3]
2683:..\src/interruptions.c ****             cycles_status = NONE;
 9544              		.loc 1 2683 0
 9545 00cc 0A4B     		ldr	r3, .L636+8
 9546 00ce 0422     		movs	r2, #4
 9547 00d0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 219


2684:..\src/interruptions.c ****             
2685:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2686:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 9548              		.loc 1 2686 0
 9549 00d2 5022     		movs	r2, #80
 9550 00d4 F968     		ldr	r1, [r7, #12]
 9551 00d6 3869     		ldr	r0, [r7, #16]
 9552 00d8 FFF7FEFF 		bl	memcpy
2687:..\src/interruptions.c ****             break;
 9553              		.loc 1 2687 0
 9554 00dc 04E0     		b	.L621
 9555              	.L633:
2688:..\src/interruptions.c ****             
2689:..\src/interruptions.c ****         case NONE:
2690:..\src/interruptions.c ****             break;
 9556              		.loc 1 2690 0
 9557 00de 00BF     		nop
 9558 00e0 02E0     		b	.L632
 9559              	.L634:
2665:..\src/interruptions.c ****             
 9560              		.loc 1 2665 0
 9561 00e2 00BF     		nop
 9562 00e4 00E0     		b	.L632
 9563              	.L635:
2679:..\src/interruptions.c ****            
 9564              		.loc 1 2679 0
 9565 00e6 00BF     		nop
 9566              	.L621:
 9567              	.L632:
2691:..\src/interruptions.c ****     }
2692:..\src/interruptions.c ****     
2693:..\src/interruptions.c **** }
 9568              		.loc 1 2693 0
 9569 00e8 00BF     		nop
 9570 00ea 1837     		adds	r7, r7, #24
 9571              		.cfi_def_cfa_offset 8
 9572 00ec BD46     		mov	sp, r7
 9573              		.cfi_def_cfa_register 13
 9574              		@ sp needed
 9575 00ee 80BD     		pop	{r7, pc}
 9576              	.L637:
 9577              		.align	2
 9578              	.L636:
 9579 00f0 10000000 		.word	g_mem+16
 9580 00f4 10000000 		.word	c_mem+16
 9581 00f8 00000000 		.word	cycles_status
 9582 00fc A4010000 		.word	m_addr.10766
 9583 0100 A8010000 		.word	row_number.10761
 9584 0104 00000000 		.word	can_write
 9585              		.cfi_endproc
 9586              	.LFE78:
 9587              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 9588              		.bss
 9589              	state.10445:
 9590 0000 00       		.space	1
 9591 0001 000000   		.align	2
 9592              	rx_queue.10449:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 220


 9593 0004 000000   		.space	3
 9594              	data_packet_length.10447:
 9595 0007 00       		.space	1
 9596              	data_packet_index.10446:
 9597 0008 00       		.space	1
 9598 0009 000000   		.align	2
 9599              	data_packet_buffer.10448:
 9600 000c 00000000 		.space	128
 9600      00000000 
 9600      00000000 
 9600      00000000 
 9600      00000000 
 9601              		.data
 9602              		.align	1
 9603              		.type	counter_calibration.10465, %object
 9604              		.size	counter_calibration.10465, 2
 9605              	counter_calibration.10465:
 9606 0000 0100     		.short	1
 9607              		.align	1
 9608              		.type	counter_tension_func.10466, %object
 9609              		.size	counter_tension_func.10466, 2
 9610              	counter_tension_func.10466:
 9611 0002 0100     		.short	1
 9612              		.bss
 9613              		.align	2
 9614              	current_emg.10491:
 9615 008c 0000     		.space	2
 9616              	fsm_state.10528:
 9617 008e 00       		.space	1
 9618 008f 00       		.align	2
 9619              	pos_error_sum.10555:
 9620 0090 00000000 		.space	4
 9621              		.align	2
 9622              	prev_pos_err.10557:
 9623 0094 00000000 		.space	4
 9624              	motor_dir.10560:
 9625 0098 00       		.space	1
 9626 0099 000000   		.align	2
 9627              	curr_error_sum.10556:
 9628 009c 00000000 		.space	4
 9629              		.align	2
 9630              	prev_curr_err.10558:
 9631 00a0 00000000 		.space	4
 9632              		.align	2
 9633              	prev_pwm.10559:
 9634 00a4 00000000 		.space	4
 9635              		.align	2
 9636              	position_counter.10561:
 9637 00a8 00000000 		.space	4
 9638              		.align	2
 9639              	pos_error_sum.10588:
 9640 00ac 00000000 		.space	8
 9640      00000000 
 9641              		.align	2
 9642              	prev_pos_err.10590:
 9643 00b4 00000000 		.space	8
 9643      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 221


 9644              		.align	2
 9645              	motor_dir.10593:
 9646 00bc 0000     		.space	2
 9647 00be 0000     		.align	2
 9648              	curr_error_sum.10589:
 9649 00c0 00000000 		.space	8
 9649      00000000 
 9650              		.align	2
 9651              	prev_curr_err.10591:
 9652 00c8 00000000 		.space	8
 9652      00000000 
 9653              		.align	2
 9654              	prev_pwm.10592:
 9655 00d0 00000000 		.space	8
 9655      00000000 
 9656              		.align	2
 9657              	position_counter.10594:
 9658 00d8 00000000 		.space	8
 9658      00000000 
 9659              		.align	2
 9660              	last_value_encoder.10617:
 9661 00e0 00000000 		.space	24
 9661      00000000 
 9661      00000000 
 9661      00000000 
 9661      00000000 
 9662              		.align	2
 9663              	comp_value_encoder.10618:
 9664 00f8 00000000 		.space	24
 9664      00000000 
 9664      00000000 
 9664      00000000 
 9664      00000000 
 9665              		.data
 9666              		.align	2
 9667              		.type	only_first_time.10620, %object
 9668              		.size	only_first_time.10620, 2
 9669              	only_first_time.10620:
 9670 0004 01       		.byte	1
 9671 0005 01       		.byte	1
 9672              		.bss
 9673              		.align	2
 9674              	error.10619:
 9675 0110 00000000 		.space	6
 9675      0000
 9676 0116 0000     		.align	2
 9677              	v_value.10625:
 9678 0118 00000000 		.space	24
 9678      00000000 
 9678      00000000 
 9678      00000000 
 9678      00000000 
 9679              		.align	2
 9680              	vv_value.10626:
 9681 0130 00000000 		.space	24
 9681      00000000 
 9681      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 222


 9681      00000000 
 9681      00000000 
 9682              		.align	2
 9683              	vvv_value.10627:
 9684 0148 00000000 		.space	24
 9684      00000000 
 9684      00000000 
 9684      00000000 
 9684      00000000 
 9685              		.align	2
 9686              	pos_reconstruct.10624:
 9687 0160 0000     		.space	2
 9688 0162 0000     		.align	2
 9689              	one_time_execute.10622:
 9690 0164 0000     		.space	2
 9691 0166 0000     		.align	2
 9692              	safe_startup_motor_activation.10621:
 9693 0168 0000     		.space	2
 9694 016a 0000     		.align	2
 9695              	count_startup_motor.10623:
 9696 016c 00000000 		.space	8
 9696      00000000 
 9697              		.data
 9698              		.type	first_tension_valid.10650, %object
 9699              		.size	first_tension_valid.10650, 1
 9700              	first_tension_valid.10650:
 9701 0006 01       		.byte	1
 9702              		.bss
 9703              		.align	1
 9704              	count.10651:
 9705 0174 0000     		.space	2
 9706              	idx.10653:
 9707 0176 00       		.space	1
 9708 0177 00       		.align	2
 9709              	v_count.10652:
 9710 0178 00000000 		.space	4
 9711              		.align	1
 9712              	emg_counter_1.10644:
 9713 017c 0000     		.space	2
 9714              		.align	1
 9715              	emg_counter_2.10645:
 9716 017e 0000     		.space	2
 9717              		.align	2
 9718              	UD_mean_value.10648:
 9719 0180 00000000 		.space	4
 9720              		.align	1
 9721              	UD_counter.10646:
 9722 0184 0000     		.space	2
 9723 0186 0000     		.align	2
 9724              	LR_mean_value.10649:
 9725 0188 00000000 		.space	4
 9726              		.align	1
 9727              	LR_counter.10647:
 9728 018c 0000     		.space	2
 9729              	pos_cycle_status.10723:
 9730 018e 00       		.space	1
 9731 018f 00       		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 223


 9732              	thr_pos.10727:
 9733 0190 00000000 		.space	4
 9734              		.align	2
 9735              	max_pos.10728:
 9736 0194 00000000 		.space	4
 9737              		.data
 9738 0007 00       		.align	2
 9739              		.type	bin_threshold.10726, %object
 9740              		.size	bin_threshold.10726, 4
 9741              	bin_threshold.10726:
 9742 0008 FA000000 		.word	250
 9743              		.bss
 9744              		.align	2
 9745              	emg_cycle_status.10724:
 9746 0198 0000     		.space	2
 9747              	rest_cycle_status.10725:
 9748 019a 00       		.space	1
 9749 019b 00       		.align	2
 9750              	timer_value_s.10738:
 9751 019c 00000000 		.space	4
 9752              		.align	2
 9753              	timer_value_e.10739:
 9754 01a0 00000000 		.space	4
 9755              		.align	2
 9756              	m_addr.10766:
 9757 01a4 00000000 		.space	4
 9758              	row_number.10761:
 9759 01a8 00       		.space	1
 9760              		.text
 9761              	.Letext0:
 9762              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 9763              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 9764              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 9765              		.file 5 "..\\src\\commands.h"
 9766              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 9767              		.file 7 "..\\src\\globals.h"
 9768              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 9769              		.section	.debug_info,"",%progbits
 9770              	.Ldebug_info0:
 9771 0000 041B0000 		.4byte	0x1b04
 9772 0004 0400     		.2byte	0x4
 9773 0006 00000000 		.4byte	.Ldebug_abbrev0
 9774 000a 04       		.byte	0x4
 9775 000b 01       		.uleb128 0x1
 9776 000c 9E080000 		.4byte	.LASF342
 9777 0010 0C       		.byte	0xc
 9778 0011 A3100000 		.4byte	.LASF343
 9779 0015 A0040000 		.4byte	.LASF344
 9780 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 9781 001d 00000000 		.4byte	0
 9782 0021 00000000 		.4byte	.Ldebug_line0
 9783 0025 02       		.uleb128 0x2
 9784 0026 01       		.byte	0x1
 9785 0027 06       		.byte	0x6
 9786 0028 B1030000 		.4byte	.LASF0
 9787 002c 02       		.uleb128 0x2
 9788 002d 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 224


 9789 002e 08       		.byte	0x8
 9790 002f 2E040000 		.4byte	.LASF1
 9791 0033 02       		.uleb128 0x2
 9792 0034 02       		.byte	0x2
 9793 0035 05       		.byte	0x5
 9794 0036 980E0000 		.4byte	.LASF2
 9795 003a 02       		.uleb128 0x2
 9796 003b 02       		.byte	0x2
 9797 003c 07       		.byte	0x7
 9798 003d 47100000 		.4byte	.LASF3
 9799 0041 03       		.uleb128 0x3
 9800 0042 39110000 		.4byte	.LASF9
 9801 0046 02       		.byte	0x2
 9802 0047 3F       		.byte	0x3f
 9803 0048 4C000000 		.4byte	0x4c
 9804 004c 02       		.uleb128 0x2
 9805 004d 04       		.byte	0x4
 9806 004e 05       		.byte	0x5
 9807 004f 91020000 		.4byte	.LASF4
 9808 0053 02       		.uleb128 0x2
 9809 0054 04       		.byte	0x4
 9810 0055 07       		.byte	0x7
 9811 0056 91070000 		.4byte	.LASF5
 9812 005a 02       		.uleb128 0x2
 9813 005b 08       		.byte	0x8
 9814 005c 05       		.byte	0x5
 9815 005d 64090000 		.4byte	.LASF6
 9816 0061 02       		.uleb128 0x2
 9817 0062 08       		.byte	0x8
 9818 0063 07       		.byte	0x7
 9819 0064 430C0000 		.4byte	.LASF7
 9820 0068 04       		.uleb128 0x4
 9821 0069 04       		.byte	0x4
 9822 006a 05       		.byte	0x5
 9823 006b 696E7400 		.ascii	"int\000"
 9824 006f 02       		.uleb128 0x2
 9825 0070 04       		.byte	0x4
 9826 0071 07       		.byte	0x7
 9827 0072 7A0A0000 		.4byte	.LASF8
 9828 0076 03       		.uleb128 0x3
 9829 0077 6E000000 		.4byte	.LASF10
 9830 007b 03       		.byte	0x3
 9831 007c 2C       		.byte	0x2c
 9832 007d 41000000 		.4byte	0x41
 9833 0081 05       		.uleb128 0x5
 9834 0082 720E0000 		.4byte	.LASF11
 9835 0086 04       		.byte	0x4
 9836 0087 E401     		.2byte	0x1e4
 9837 0089 2C000000 		.4byte	0x2c
 9838 008d 05       		.uleb128 0x5
 9839 008e 96110000 		.4byte	.LASF12
 9840 0092 04       		.byte	0x4
 9841 0093 E501     		.2byte	0x1e5
 9842 0095 3A000000 		.4byte	0x3a
 9843 0099 05       		.uleb128 0x5
 9844 009a 94000000 		.4byte	.LASF13
 9845 009e 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 225


 9846 009f E601     		.2byte	0x1e6
 9847 00a1 53000000 		.4byte	0x53
 9848 00a5 05       		.uleb128 0x5
 9849 00a6 78010000 		.4byte	.LASF14
 9850 00aa 04       		.byte	0x4
 9851 00ab E701     		.2byte	0x1e7
 9852 00ad 25000000 		.4byte	0x25
 9853 00b1 05       		.uleb128 0x5
 9854 00b2 3F0F0000 		.4byte	.LASF15
 9855 00b6 04       		.byte	0x4
 9856 00b7 E801     		.2byte	0x1e8
 9857 00b9 33000000 		.4byte	0x33
 9858 00bd 05       		.uleb128 0x5
 9859 00be C6100000 		.4byte	.LASF16
 9860 00c2 04       		.byte	0x4
 9861 00c3 E901     		.2byte	0x1e9
 9862 00c5 4C000000 		.4byte	0x4c
 9863 00c9 05       		.uleb128 0x5
 9864 00ca 4D030000 		.4byte	.LASF17
 9865 00ce 04       		.byte	0x4
 9866 00cf EA01     		.2byte	0x1ea
 9867 00d1 D5000000 		.4byte	0xd5
 9868 00d5 02       		.uleb128 0x2
 9869 00d6 04       		.byte	0x4
 9870 00d7 04       		.byte	0x4
 9871 00d8 4C0A0000 		.4byte	.LASF18
 9872 00dc 02       		.uleb128 0x2
 9873 00dd 08       		.byte	0x8
 9874 00de 04       		.byte	0x4
 9875 00df A7090000 		.4byte	.LASF19
 9876 00e3 02       		.uleb128 0x2
 9877 00e4 01       		.byte	0x1
 9878 00e5 08       		.byte	0x8
 9879 00e6 10050000 		.4byte	.LASF20
 9880 00ea 05       		.uleb128 0x5
 9881 00eb B30A0000 		.4byte	.LASF21
 9882 00ef 04       		.byte	0x4
 9883 00f0 8602     		.2byte	0x286
 9884 00f2 53000000 		.4byte	0x53
 9885 00f6 05       		.uleb128 0x5
 9886 00f7 EE0C0000 		.4byte	.LASF22
 9887 00fb 04       		.byte	0x4
 9888 00fc 8E02     		.2byte	0x28e
 9889 00fe 02010000 		.4byte	0x102
 9890 0102 06       		.uleb128 0x6
 9891 0103 81000000 		.4byte	0x81
 9892 0107 02       		.uleb128 0x2
 9893 0108 08       		.byte	0x8
 9894 0109 04       		.byte	0x4
 9895 010a 520B0000 		.4byte	.LASF23
 9896 010e 02       		.uleb128 0x2
 9897 010f 04       		.byte	0x4
 9898 0110 07       		.byte	0x7
 9899 0111 00000000 		.4byte	.LASF24
 9900 0115 07       		.uleb128 0x7
 9901 0116 E3000000 		.4byte	0xe3
 9902 011a 25010000 		.4byte	0x125
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 226


 9903 011e 08       		.uleb128 0x8
 9904 011f 0E010000 		.4byte	0x10e
 9905 0123 07       		.byte	0x7
 9906 0124 00       		.byte	0
 9907 0125 09       		.uleb128 0x9
 9908 0126 73110000 		.4byte	.LASF33
 9909 012a 01       		.byte	0x1
 9910 012b 2C000000 		.4byte	0x2c
 9911 012f 05       		.byte	0x5
 9912 0130 8E       		.byte	0x8e
 9913 0131 66010000 		.4byte	0x166
 9914 0135 0A       		.uleb128 0xa
 9915 0136 04070000 		.4byte	.LASF25
 9916 013a 00       		.byte	0
 9917 013b 0A       		.uleb128 0xa
 9918 013c BC0A0000 		.4byte	.LASF26
 9919 0140 01       		.byte	0x1
 9920 0141 0A       		.uleb128 0xa
 9921 0142 03020000 		.4byte	.LASF27
 9922 0146 02       		.byte	0x2
 9923 0147 0A       		.uleb128 0xa
 9924 0148 46010000 		.4byte	.LASF28
 9925 014c 03       		.byte	0x3
 9926 014d 0A       		.uleb128 0xa
 9927 014e 00010000 		.4byte	.LASF29
 9928 0152 04       		.byte	0x4
 9929 0153 0A       		.uleb128 0xa
 9930 0154 36000000 		.4byte	.LASF30
 9931 0158 05       		.byte	0x5
 9932 0159 0A       		.uleb128 0xa
 9933 015a E1070000 		.4byte	.LASF31
 9934 015e 06       		.byte	0x6
 9935 015f 0A       		.uleb128 0xa
 9936 0160 120E0000 		.4byte	.LASF32
 9937 0164 07       		.byte	0x7
 9938 0165 00       		.byte	0
 9939 0166 09       		.uleb128 0x9
 9940 0167 72090000 		.4byte	.LASF34
 9941 016b 01       		.byte	0x1
 9942 016c 2C000000 		.4byte	0x2c
 9943 0170 05       		.byte	0x5
 9944 0171 A2       		.byte	0xa2
 9945 0172 8F010000 		.4byte	0x18f
 9946 0176 0A       		.uleb128 0xa
 9947 0177 2B110000 		.4byte	.LASF35
 9948 017b 00       		.byte	0
 9949 017c 0A       		.uleb128 0xa
 9950 017d 7C080000 		.4byte	.LASF36
 9951 0181 01       		.byte	0x1
 9952 0182 0A       		.uleb128 0xa
 9953 0183 420B0000 		.4byte	.LASF37
 9954 0187 02       		.byte	0x2
 9955 0188 0A       		.uleb128 0xa
 9956 0189 74070000 		.4byte	.LASF38
 9957 018d 03       		.byte	0x3
 9958 018e 00       		.byte	0
 9959 018f 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 227


 9960 0190 F6100000 		.4byte	.LASF39
 9961 0194 06       		.byte	0x6
 9962 0195 7E       		.byte	0x7e
 9963 0196 9A010000 		.4byte	0x19a
 9964 019a 0B       		.uleb128 0xb
 9965 019b F6100000 		.4byte	.LASF39
 9966 019f 0C       		.uleb128 0xc
 9967 01a0 04       		.byte	0x4
 9968 01a1 8F010000 		.4byte	0x18f
 9969 01a5 0D       		.uleb128 0xd
 9970 01a6 2C090000 		.4byte	.LASF42
 9971 01aa 10       		.byte	0x10
 9972 01ab 07       		.byte	0x7
 9973 01ac E2       		.byte	0xe2
 9974 01ad E2010000 		.4byte	0x1e2
 9975 01b1 0E       		.uleb128 0xe
 9976 01b2 706F7300 		.ascii	"pos\000"
 9977 01b6 07       		.byte	0x7
 9978 01b7 E3       		.byte	0xe3
 9979 01b8 BD000000 		.4byte	0xbd
 9980 01bc 00       		.byte	0
 9981 01bd 0F       		.uleb128 0xf
 9982 01be 61080000 		.4byte	.LASF40
 9983 01c2 07       		.byte	0x7
 9984 01c3 E4       		.byte	0xe4
 9985 01c4 BD000000 		.4byte	0xbd
 9986 01c8 04       		.byte	0x4
 9987 01c9 0E       		.uleb128 0xe
 9988 01ca 70776D00 		.ascii	"pwm\000"
 9989 01ce 07       		.byte	0x7
 9990 01cf E5       		.byte	0xe5
 9991 01d0 BD000000 		.4byte	0xbd
 9992 01d4 08       		.byte	0x8
 9993 01d5 0F       		.uleb128 0xf
 9994 01d6 850C0000 		.4byte	.LASF41
 9995 01da 07       		.byte	0x7
 9996 01db E6       		.byte	0xe6
 9997 01dc 81000000 		.4byte	0x81
 9998 01e0 0C       		.byte	0xc
 9999 01e1 00       		.byte	0
 10000 01e2 0D       		.uleb128 0xd
 10001 01e3 D90D0000 		.4byte	.LASF43
 10002 01e7 34       		.byte	0x34
 10003 01e8 07       		.byte	0x7
 10004 01e9 ED       		.byte	0xed
 10005 01ea 43020000 		.4byte	0x243
 10006 01ee 0E       		.uleb128 0xe
 10007 01ef 706F7300 		.ascii	"pos\000"
 10008 01f3 07       		.byte	0x7
 10009 01f4 EE       		.byte	0xee
 10010 01f5 43020000 		.4byte	0x243
 10011 01f9 00       		.byte	0
 10012 01fa 0F       		.uleb128 0xf
 10013 01fb 61080000 		.4byte	.LASF40
 10014 01ff 07       		.byte	0x7
 10015 0200 EF       		.byte	0xef
 10016 0201 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 228


 10017 0205 0C       		.byte	0xc
 10018 0206 0F       		.uleb128 0xf
 10019 0207 760F0000 		.4byte	.LASF44
 10020 020b 07       		.byte	0x7
 10021 020c F0       		.byte	0xf0
 10022 020d BD000000 		.4byte	0xbd
 10023 0211 10       		.byte	0x10
 10024 0212 0F       		.uleb128 0xf
 10025 0213 D7070000 		.4byte	.LASF45
 10026 0217 07       		.byte	0x7
 10027 0218 F1       		.byte	0xf1
 10028 0219 BD000000 		.4byte	0xbd
 10029 021d 14       		.byte	0x14
 10030 021e 0E       		.uleb128 0xe
 10031 021f 726F7400 		.ascii	"rot\000"
 10032 0223 07       		.byte	0x7
 10033 0224 F2       		.byte	0xf2
 10034 0225 53020000 		.4byte	0x253
 10035 0229 18       		.byte	0x18
 10036 022a 0E       		.uleb128 0xe
 10037 022b 76656C00 		.ascii	"vel\000"
 10038 022f 07       		.byte	0x7
 10039 0230 F3       		.byte	0xf3
 10040 0231 43020000 		.4byte	0x243
 10041 0235 1C       		.byte	0x1c
 10042 0236 0E       		.uleb128 0xe
 10043 0237 61636300 		.ascii	"acc\000"
 10044 023b 07       		.byte	0x7
 10045 023c F4       		.byte	0xf4
 10046 023d 43020000 		.4byte	0x243
 10047 0241 28       		.byte	0x28
 10048 0242 00       		.byte	0
 10049 0243 07       		.uleb128 0x7
 10050 0244 BD000000 		.4byte	0xbd
 10051 0248 53020000 		.4byte	0x253
 10052 024c 08       		.uleb128 0x8
 10053 024d 0E010000 		.4byte	0x10e
 10054 0251 02       		.byte	0x2
 10055 0252 00       		.byte	0
 10056 0253 07       		.uleb128 0x7
 10057 0254 A5000000 		.4byte	0xa5
 10058 0258 63020000 		.4byte	0x263
 10059 025c 08       		.uleb128 0x8
 10060 025d 0E010000 		.4byte	0x10e
 10061 0261 02       		.byte	0x2
 10062 0262 00       		.byte	0
 10063 0263 0D       		.uleb128 0xd
 10064 0264 610A0000 		.4byte	.LASF46
 10065 0268 28       		.byte	0x28
 10066 0269 07       		.byte	0x7
 10067 026a F7       		.byte	0xf7
 10068 026b 94020000 		.4byte	0x294
 10069 026f 0E       		.uleb128 0xe
 10070 0270 656D6700 		.ascii	"emg\000"
 10071 0274 07       		.byte	0x7
 10072 0275 F8       		.byte	0xf8
 10073 0276 94020000 		.4byte	0x294
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 229


 10074 027a 00       		.byte	0
 10075 027b 0F       		.uleb128 0xf
 10076 027c 060B0000 		.4byte	.LASF47
 10077 0280 07       		.byte	0x7
 10078 0281 F9       		.byte	0xf9
 10079 0282 A4020000 		.4byte	0x2a4
 10080 0286 08       		.byte	0x8
 10081 0287 0F       		.uleb128 0xf
 10082 0288 B70E0000 		.4byte	.LASF48
 10083 028c 07       		.byte	0x7
 10084 028d FA       		.byte	0xfa
 10085 028e 94020000 		.4byte	0x294
 10086 0292 20       		.byte	0x20
 10087 0293 00       		.byte	0
 10088 0294 07       		.uleb128 0x7
 10089 0295 BD000000 		.4byte	0xbd
 10090 0299 A4020000 		.4byte	0x2a4
 10091 029d 08       		.uleb128 0x8
 10092 029e 0E010000 		.4byte	0x10e
 10093 02a2 01       		.byte	0x1
 10094 02a3 00       		.byte	0
 10095 02a4 07       		.uleb128 0x7
 10096 02a5 BD000000 		.4byte	0xbd
 10097 02a9 B4020000 		.4byte	0x2b4
 10098 02ad 08       		.uleb128 0x8
 10099 02ae 0E010000 		.4byte	0x10e
 10100 02b2 05       		.byte	0x5
 10101 02b3 00       		.byte	0
 10102 02b4 10       		.uleb128 0x10
 10103 02b5 8C000000 		.4byte	.LASF49
 10104 02b9 86       		.byte	0x86
 10105 02ba 07       		.byte	0x7
 10106 02bb 0501     		.2byte	0x105
 10107 02bd F6020000 		.4byte	0x2f6
 10108 02c1 11       		.uleb128 0x11
 10109 02c2 1C060000 		.4byte	.LASF50
 10110 02c6 07       		.byte	0x7
 10111 02c7 0601     		.2byte	0x106
 10112 02c9 F6020000 		.4byte	0x2f6
 10113 02cd 00       		.byte	0
 10114 02ce 11       		.uleb128 0x11
 10115 02cf 680C0000 		.4byte	.LASF51
 10116 02d3 07       		.byte	0x7
 10117 02d4 0701     		.2byte	0x107
 10118 02d6 B1000000 		.4byte	0xb1
 10119 02da 80       		.byte	0x80
 10120 02db 12       		.uleb128 0x12
 10121 02dc 696E6400 		.ascii	"ind\000"
 10122 02e0 07       		.byte	0x7
 10123 02e1 0801     		.2byte	0x108
 10124 02e3 B1000000 		.4byte	0xb1
 10125 02e7 82       		.byte	0x82
 10126 02e8 11       		.uleb128 0x11
 10127 02e9 D6010000 		.4byte	.LASF52
 10128 02ed 07       		.byte	0x7
 10129 02ee 0901     		.2byte	0x109
 10130 02f0 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 230


 10131 02f4 84       		.byte	0x84
 10132 02f5 00       		.byte	0
 10133 02f6 07       		.uleb128 0x7
 10134 02f7 81000000 		.4byte	0x81
 10135 02fb 06030000 		.4byte	0x306
 10136 02ff 08       		.uleb128 0x8
 10137 0300 0E010000 		.4byte	0x10e
 10138 0304 7F       		.byte	0x7f
 10139 0305 00       		.byte	0
 10140 0306 10       		.uleb128 0x10
 10141 0307 3A030000 		.4byte	.LASF53
 10142 030b 50       		.byte	0x50
 10143 030c 07       		.byte	0x7
 10144 030d 1201     		.2byte	0x112
 10145 030f 6F030000 		.4byte	0x36f
 10146 0313 11       		.uleb128 0x11
 10147 0314 6F030000 		.4byte	.LASF54
 10148 0318 07       		.byte	0x7
 10149 0319 1301     		.2byte	0x113
 10150 031b 6F030000 		.4byte	0x36f
 10151 031f 00       		.byte	0
 10152 0320 11       		.uleb128 0x11
 10153 0321 93010000 		.4byte	.LASF55
 10154 0325 07       		.byte	0x7
 10155 0326 1401     		.2byte	0x114
 10156 0328 7F030000 		.4byte	0x37f
 10157 032c 08       		.byte	0x8
 10158 032d 11       		.uleb128 0x11
 10159 032e 350B0000 		.4byte	.LASF56
 10160 0332 07       		.byte	0x7
 10161 0333 1501     		.2byte	0x115
 10162 0335 8F030000 		.4byte	0x38f
 10163 0339 30       		.byte	0x30
 10164 033a 11       		.uleb128 0x11
 10165 033b 2A010000 		.4byte	.LASF57
 10166 033f 07       		.byte	0x7
 10167 0340 1601     		.2byte	0x116
 10168 0342 99000000 		.4byte	0x99
 10169 0346 40       		.byte	0x40
 10170 0347 11       		.uleb128 0x11
 10171 0348 43110000 		.4byte	.LASF58
 10172 034c 07       		.byte	0x7
 10173 034d 1701     		.2byte	0x117
 10174 034f 99000000 		.4byte	0x99
 10175 0353 44       		.byte	0x44
 10176 0354 11       		.uleb128 0x11
 10177 0355 AD070000 		.4byte	.LASF59
 10178 0359 07       		.byte	0x7
 10179 035a 1801     		.2byte	0x118
 10180 035c 99000000 		.4byte	0x99
 10181 0360 48       		.byte	0x48
 10182 0361 11       		.uleb128 0x11
 10183 0362 F5070000 		.4byte	.LASF60
 10184 0366 07       		.byte	0x7
 10185 0367 1901     		.2byte	0x119
 10186 0369 99000000 		.4byte	0x99
 10187 036d 4C       		.byte	0x4c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 231


 10188 036e 00       		.byte	0
 10189 036f 07       		.uleb128 0x7
 10190 0370 99000000 		.4byte	0x99
 10191 0374 7F030000 		.4byte	0x37f
 10192 0378 08       		.uleb128 0x8
 10193 0379 0E010000 		.4byte	0x10e
 10194 037d 01       		.byte	0x1
 10195 037e 00       		.byte	0
 10196 037f 07       		.uleb128 0x7
 10197 0380 99000000 		.4byte	0x99
 10198 0384 8F030000 		.4byte	0x38f
 10199 0388 08       		.uleb128 0x8
 10200 0389 0E010000 		.4byte	0x10e
 10201 038d 09       		.byte	0x9
 10202 038e 00       		.byte	0
 10203 038f 07       		.uleb128 0x7
 10204 0390 99000000 		.4byte	0x99
 10205 0394 9F030000 		.4byte	0x39f
 10206 0398 08       		.uleb128 0x8
 10207 0399 0E010000 		.4byte	0x10e
 10208 039d 03       		.byte	0x3
 10209 039e 00       		.byte	0
 10210 039f 10       		.uleb128 0x10
 10211 03a0 F9010000 		.4byte	.LASF61
 10212 03a4 10       		.byte	0x10
 10213 03a5 07       		.byte	0x7
 10214 03a6 2001     		.2byte	0x120
 10215 03a8 2E040000 		.4byte	0x42e
 10216 03ac 12       		.uleb128 0x12
 10217 03ad 696400   		.ascii	"id\000"
 10218 03b0 07       		.byte	0x7
 10219 03b1 2101     		.2byte	0x121
 10220 03b3 81000000 		.4byte	0x81
 10221 03b7 00       		.byte	0
 10222 03b8 11       		.uleb128 0x11
 10223 03b9 D20E0000 		.4byte	.LASF62
 10224 03bd 07       		.byte	0x7
 10225 03be 2201     		.2byte	0x122
 10226 03c0 2E040000 		.4byte	0x42e
 10227 03c4 01       		.byte	0x1
 10228 03c5 11       		.uleb128 0x11
 10229 03c6 0E0F0000 		.4byte	.LASF63
 10230 03ca 07       		.byte	0x7
 10231 03cb 2301     		.2byte	0x123
 10232 03cd 2E040000 		.4byte	0x42e
 10233 03d1 04       		.byte	0x4
 10234 03d2 11       		.uleb128 0x11
 10235 03d3 88040000 		.4byte	.LASF64
 10236 03d7 07       		.byte	0x7
 10237 03d8 2401     		.2byte	0x124
 10238 03da 81000000 		.4byte	0x81
 10239 03de 07       		.byte	0x7
 10240 03df 11       		.uleb128 0x11
 10241 03e0 C3020000 		.4byte	.LASF65
 10242 03e4 07       		.byte	0x7
 10243 03e5 2501     		.2byte	0x125
 10244 03e7 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 232


 10245 03eb 08       		.byte	0x8
 10246 03ec 11       		.uleb128 0x11
 10247 03ed 1F020000 		.4byte	.LASF66
 10248 03f1 07       		.byte	0x7
 10249 03f2 2601     		.2byte	0x126
 10250 03f4 81000000 		.4byte	0x81
 10251 03f8 09       		.byte	0x9
 10252 03f9 11       		.uleb128 0x11
 10253 03fa 1B100000 		.4byte	.LASF67
 10254 03fe 07       		.byte	0x7
 10255 03ff 2701     		.2byte	0x127
 10256 0401 81000000 		.4byte	0x81
 10257 0405 0A       		.byte	0xa
 10258 0406 11       		.uleb128 0x11
 10259 0407 AF0F0000 		.4byte	.LASF68
 10260 040b 07       		.byte	0x7
 10261 040c 2801     		.2byte	0x128
 10262 040e 81000000 		.4byte	0x81
 10263 0412 0B       		.byte	0xb
 10264 0413 11       		.uleb128 0x11
 10265 0414 880D0000 		.4byte	.LASF69
 10266 0418 07       		.byte	0x7
 10267 0419 2901     		.2byte	0x129
 10268 041b 81000000 		.4byte	0x81
 10269 041f 0C       		.byte	0xc
 10270 0420 11       		.uleb128 0x11
 10271 0421 07030000 		.4byte	.LASF70
 10272 0425 07       		.byte	0x7
 10273 0426 2A01     		.2byte	0x12a
 10274 0428 2E040000 		.4byte	0x42e
 10275 042c 0D       		.byte	0xd
 10276 042d 00       		.byte	0
 10277 042e 07       		.uleb128 0x7
 10278 042f 81000000 		.4byte	0x81
 10279 0433 3E040000 		.4byte	0x43e
 10280 0437 08       		.uleb128 0x8
 10281 0438 0E010000 		.4byte	0x10e
 10282 043c 02       		.byte	0x2
 10283 043d 00       		.byte	0
 10284 043e 10       		.uleb128 0x10
 10285 043f E1100000 		.4byte	.LASF71
 10286 0443 70       		.byte	0x70
 10287 0444 07       		.byte	0x7
 10288 0445 3101     		.2byte	0x131
 10289 0447 B8050000 		.4byte	0x5b8
 10290 044b 12       		.uleb128 0x12
 10291 044c 6B5F7000 		.ascii	"k_p\000"
 10292 0450 07       		.byte	0x7
 10293 0451 3201     		.2byte	0x132
 10294 0453 BD000000 		.4byte	0xbd
 10295 0457 00       		.byte	0
 10296 0458 12       		.uleb128 0x12
 10297 0459 6B5F6900 		.ascii	"k_i\000"
 10298 045d 07       		.byte	0x7
 10299 045e 3301     		.2byte	0x133
 10300 0460 BD000000 		.4byte	0xbd
 10301 0464 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 233


 10302 0465 12       		.uleb128 0x12
 10303 0466 6B5F6400 		.ascii	"k_d\000"
 10304 046a 07       		.byte	0x7
 10305 046b 3401     		.2byte	0x134
 10306 046d BD000000 		.4byte	0xbd
 10307 0471 08       		.byte	0x8
 10308 0472 11       		.uleb128 0x11
 10309 0473 C10C0000 		.4byte	.LASF72
 10310 0477 07       		.byte	0x7
 10311 0478 3501     		.2byte	0x135
 10312 047a BD000000 		.4byte	0xbd
 10313 047e 0C       		.byte	0xc
 10314 047f 11       		.uleb128 0x11
 10315 0480 79050000 		.4byte	.LASF73
 10316 0484 07       		.byte	0x7
 10317 0485 3601     		.2byte	0x136
 10318 0487 BD000000 		.4byte	0xbd
 10319 048b 10       		.byte	0x10
 10320 048c 11       		.uleb128 0x11
 10321 048d 61050000 		.4byte	.LASF74
 10322 0491 07       		.byte	0x7
 10323 0492 3701     		.2byte	0x137
 10324 0494 BD000000 		.4byte	0xbd
 10325 0498 14       		.byte	0x14
 10326 0499 11       		.uleb128 0x11
 10327 049a 6F0F0000 		.4byte	.LASF75
 10328 049e 07       		.byte	0x7
 10329 049f 3801     		.2byte	0x138
 10330 04a1 BD000000 		.4byte	0xbd
 10331 04a5 18       		.byte	0x18
 10332 04a6 11       		.uleb128 0x11
 10333 04a7 15060000 		.4byte	.LASF76
 10334 04ab 07       		.byte	0x7
 10335 04ac 3901     		.2byte	0x139
 10336 04ae BD000000 		.4byte	0xbd
 10337 04b2 1C       		.byte	0x1c
 10338 04b3 11       		.uleb128 0x11
 10339 04b4 A20E0000 		.4byte	.LASF77
 10340 04b8 07       		.byte	0x7
 10341 04b9 3A01     		.2byte	0x13a
 10342 04bb BD000000 		.4byte	0xbd
 10343 04bf 20       		.byte	0x20
 10344 04c0 11       		.uleb128 0x11
 10345 04c1 23060000 		.4byte	.LASF78
 10346 04c5 07       		.byte	0x7
 10347 04c6 3B01     		.2byte	0x13b
 10348 04c8 BD000000 		.4byte	0xbd
 10349 04cc 24       		.byte	0x24
 10350 04cd 11       		.uleb128 0x11
 10351 04ce 5D070000 		.4byte	.LASF79
 10352 04d2 07       		.byte	0x7
 10353 04d3 3C01     		.2byte	0x13c
 10354 04d5 BD000000 		.4byte	0xbd
 10355 04d9 28       		.byte	0x28
 10356 04da 11       		.uleb128 0x11
 10357 04db BB110000 		.4byte	.LASF80
 10358 04df 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 234


 10359 04e0 3D01     		.2byte	0x13d
 10360 04e2 BD000000 		.4byte	0xbd
 10361 04e6 2C       		.byte	0x2c
 10362 04e7 11       		.uleb128 0x11
 10363 04e8 05080000 		.4byte	.LASF81
 10364 04ec 07       		.byte	0x7
 10365 04ed 3E01     		.2byte	0x13e
 10366 04ef 81000000 		.4byte	0x81
 10367 04f3 30       		.byte	0x30
 10368 04f4 11       		.uleb128 0x11
 10369 04f5 580F0000 		.4byte	.LASF82
 10370 04f9 07       		.byte	0x7
 10371 04fa 3F01     		.2byte	0x13f
 10372 04fc 81000000 		.4byte	0x81
 10373 0500 31       		.byte	0x31
 10374 0501 11       		.uleb128 0x11
 10375 0502 D30C0000 		.4byte	.LASF83
 10376 0506 07       		.byte	0x7
 10377 0507 4001     		.2byte	0x140
 10378 0509 81000000 		.4byte	0x81
 10379 050d 32       		.byte	0x32
 10380 050e 11       		.uleb128 0x11
 10381 050f FE100000 		.4byte	.LASF84
 10382 0513 07       		.byte	0x7
 10383 0514 4101     		.2byte	0x141
 10384 0516 81000000 		.4byte	0x81
 10385 051a 33       		.byte	0x33
 10386 051b 11       		.uleb128 0x11
 10387 051c AB000000 		.4byte	.LASF85
 10388 0520 07       		.byte	0x7
 10389 0521 4201     		.2byte	0x142
 10390 0523 BD000000 		.4byte	0xbd
 10391 0527 34       		.byte	0x34
 10392 0528 11       		.uleb128 0x11
 10393 0529 A9050000 		.4byte	.LASF86
 10394 052d 07       		.byte	0x7
 10395 052e 4301     		.2byte	0x143
 10396 0530 BD000000 		.4byte	0xbd
 10397 0534 38       		.byte	0x38
 10398 0535 11       		.uleb128 0x11
 10399 0536 1D0A0000 		.4byte	.LASF87
 10400 053a 07       		.byte	0x7
 10401 053b 4401     		.2byte	0x144
 10402 053d BD000000 		.4byte	0xbd
 10403 0541 3C       		.byte	0x3c
 10404 0542 11       		.uleb128 0x11
 10405 0543 15050000 		.4byte	.LASF88
 10406 0547 07       		.byte	0x7
 10407 0548 4501     		.2byte	0x145
 10408 054a BD000000 		.4byte	0xbd
 10409 054e 40       		.byte	0x40
 10410 054f 11       		.uleb128 0x11
 10411 0550 14010000 		.4byte	.LASF89
 10412 0554 07       		.byte	0x7
 10413 0555 4601     		.2byte	0x146
 10414 0557 B8050000 		.4byte	0x5b8
 10415 055b 44       		.byte	0x44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 235


 10416 055c 11       		.uleb128 0x11
 10417 055d 65110000 		.4byte	.LASF90
 10418 0561 07       		.byte	0x7
 10419 0562 4701     		.2byte	0x147
 10420 0564 B1000000 		.4byte	0xb1
 10421 0568 5C       		.byte	0x5c
 10422 0569 11       		.uleb128 0x11
 10423 056a 71080000 		.4byte	.LASF91
 10424 056e 07       		.byte	0x7
 10425 056f 4801     		.2byte	0x148
 10426 0571 81000000 		.4byte	0x81
 10427 0575 5E       		.byte	0x5e
 10428 0576 11       		.uleb128 0x11
 10429 0577 A60A0000 		.4byte	.LASF92
 10430 057b 07       		.byte	0x7
 10431 057c 4901     		.2byte	0x149
 10432 057e 81000000 		.4byte	0x81
 10433 0582 5F       		.byte	0x5f
 10434 0583 11       		.uleb128 0x11
 10435 0584 93040000 		.4byte	.LASF93
 10436 0588 07       		.byte	0x7
 10437 0589 4A01     		.2byte	0x14a
 10438 058b 81000000 		.4byte	0x81
 10439 058f 60       		.byte	0x60
 10440 0590 11       		.uleb128 0x11
 10441 0591 50050000 		.4byte	.LASF94
 10442 0595 07       		.byte	0x7
 10443 0596 4B01     		.2byte	0x14b
 10444 0598 81000000 		.4byte	0x81
 10445 059c 61       		.byte	0x61
 10446 059d 11       		.uleb128 0x11
 10447 059e 3C040000 		.4byte	.LASF95
 10448 05a2 07       		.byte	0x7
 10449 05a3 4C01     		.2byte	0x14c
 10450 05a5 81000000 		.4byte	0x81
 10451 05a9 62       		.byte	0x62
 10452 05aa 11       		.uleb128 0x11
 10453 05ab 07030000 		.4byte	.LASF70
 10454 05af 07       		.byte	0x7
 10455 05b0 4D01     		.2byte	0x14d
 10456 05b2 C8050000 		.4byte	0x5c8
 10457 05b6 63       		.byte	0x63
 10458 05b7 00       		.byte	0
 10459 05b8 07       		.uleb128 0x7
 10460 05b9 D5000000 		.4byte	0xd5
 10461 05bd C8050000 		.4byte	0x5c8
 10462 05c1 08       		.uleb128 0x8
 10463 05c2 0E010000 		.4byte	0x10e
 10464 05c6 05       		.byte	0x5
 10465 05c7 00       		.byte	0
 10466 05c8 07       		.uleb128 0x7
 10467 05c9 81000000 		.4byte	0x81
 10468 05cd D8050000 		.4byte	0x5d8
 10469 05d1 08       		.uleb128 0x8
 10470 05d2 0E010000 		.4byte	0x10e
 10471 05d6 0C       		.byte	0xc
 10472 05d7 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 236


 10473 05d8 10       		.uleb128 0x10
 10474 05d9 5A100000 		.4byte	.LASF96
 10475 05dd 30       		.byte	0x30
 10476 05de 07       		.byte	0x7
 10477 05df 5401     		.2byte	0x154
 10478 05e1 5B060000 		.4byte	0x65b
 10479 05e5 11       		.uleb128 0x11
 10480 05e6 D7090000 		.4byte	.LASF97
 10481 05ea 07       		.byte	0x7
 10482 05eb 5501     		.2byte	0x155
 10483 05ed 5B060000 		.4byte	0x65b
 10484 05f1 00       		.byte	0
 10485 05f2 12       		.uleb128 0x12
 10486 05f3 72657300 		.ascii	"res\000"
 10487 05f7 07       		.byte	0x7
 10488 05f8 5601     		.2byte	0x156
 10489 05fa 2E040000 		.4byte	0x42e
 10490 05fe 05       		.byte	0x5
 10491 05ff 11       		.uleb128 0x11
 10492 0600 31080000 		.4byte	.LASF98
 10493 0604 07       		.byte	0x7
 10494 0605 5701     		.2byte	0x157
 10495 0607 43020000 		.4byte	0x243
 10496 060b 08       		.byte	0x8
 10497 060c 11       		.uleb128 0x11
 10498 060d 72050000 		.4byte	.LASF99
 10499 0611 07       		.byte	0x7
 10500 0612 5801     		.2byte	0x158
 10501 0614 6B060000 		.4byte	0x66b
 10502 0618 14       		.byte	0x14
 10503 0619 11       		.uleb128 0x11
 10504 061a DA0B0000 		.4byte	.LASF100
 10505 061e 07       		.byte	0x7
 10506 061f 5901     		.2byte	0x159
 10507 0621 81000000 		.4byte	0x81
 10508 0625 20       		.byte	0x20
 10509 0626 11       		.uleb128 0x11
 10510 0627 DC010000 		.4byte	.LASF101
 10511 062b 07       		.byte	0x7
 10512 062c 5A01     		.2byte	0x15a
 10513 062e 2E040000 		.4byte	0x42e
 10514 0632 21       		.byte	0x21
 10515 0633 11       		.uleb128 0x11
 10516 0634 8B0B0000 		.4byte	.LASF102
 10517 0638 07       		.byte	0x7
 10518 0639 5B01     		.2byte	0x15b
 10519 063b A5000000 		.4byte	0xa5
 10520 063f 24       		.byte	0x24
 10521 0640 11       		.uleb128 0x11
 10522 0641 AA0D0000 		.4byte	.LASF103
 10523 0645 07       		.byte	0x7
 10524 0646 5C01     		.2byte	0x15c
 10525 0648 53020000 		.4byte	0x253
 10526 064c 25       		.byte	0x25
 10527 064d 11       		.uleb128 0x11
 10528 064e 07030000 		.4byte	.LASF70
 10529 0652 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 237


 10530 0653 5D01     		.2byte	0x15d
 10531 0655 7B060000 		.4byte	0x67b
 10532 0659 28       		.byte	0x28
 10533 065a 00       		.byte	0
 10534 065b 07       		.uleb128 0x7
 10535 065c 81000000 		.4byte	0x81
 10536 0660 6B060000 		.4byte	0x66b
 10537 0664 08       		.uleb128 0x8
 10538 0665 0E010000 		.4byte	0x10e
 10539 0669 04       		.byte	0x4
 10540 066a 00       		.byte	0
 10541 066b 07       		.uleb128 0x7
 10542 066c C9000000 		.4byte	0xc9
 10543 0670 7B060000 		.4byte	0x67b
 10544 0674 08       		.uleb128 0x8
 10545 0675 0E010000 		.4byte	0x10e
 10546 0679 02       		.byte	0x2
 10547 067a 00       		.byte	0
 10548 067b 07       		.uleb128 0x7
 10549 067c 81000000 		.4byte	0x81
 10550 0680 8B060000 		.4byte	0x68b
 10551 0684 08       		.uleb128 0x8
 10552 0685 0E010000 		.4byte	0x10e
 10553 0689 07       		.byte	0x7
 10554 068a 00       		.byte	0
 10555 068b 10       		.uleb128 0x10
 10556 068c 8C010000 		.4byte	.LASF104
 10557 0690 10       		.byte	0x10
 10558 0691 07       		.byte	0x7
 10559 0692 6401     		.2byte	0x164
 10560 0694 DA060000 		.4byte	0x6da
 10561 0698 11       		.uleb128 0x11
 10562 0699 140B0000 		.4byte	.LASF105
 10563 069d 07       		.byte	0x7
 10564 069e 6501     		.2byte	0x165
 10565 06a0 DA060000 		.4byte	0x6da
 10566 06a4 00       		.byte	0
 10567 06a5 11       		.uleb128 0x11
 10568 06a6 57110000 		.4byte	.LASF106
 10569 06aa 07       		.byte	0x7
 10570 06ab 6601     		.2byte	0x166
 10571 06ad 6F030000 		.4byte	0x36f
 10572 06b1 04       		.byte	0x4
 10573 06b2 11       		.uleb128 0x11
 10574 06b3 BF050000 		.4byte	.LASF107
 10575 06b7 07       		.byte	0x7
 10576 06b8 6701     		.2byte	0x167
 10577 06ba EA060000 		.4byte	0x6ea
 10578 06be 0C       		.byte	0xc
 10579 06bf 11       		.uleb128 0x11
 10580 06c0 C40D0000 		.4byte	.LASF108
 10581 06c4 07       		.byte	0x7
 10582 06c5 6801     		.2byte	0x168
 10583 06c7 81000000 		.4byte	0x81
 10584 06cb 0E       		.byte	0xe
 10585 06cc 11       		.uleb128 0x11
 10586 06cd EB030000 		.4byte	.LASF109
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 238


 10587 06d1 07       		.byte	0x7
 10588 06d2 6901     		.2byte	0x169
 10589 06d4 81000000 		.4byte	0x81
 10590 06d8 0F       		.byte	0xf
 10591 06d9 00       		.byte	0
 10592 06da 07       		.uleb128 0x7
 10593 06db 8D000000 		.4byte	0x8d
 10594 06df EA060000 		.4byte	0x6ea
 10595 06e3 08       		.uleb128 0x8
 10596 06e4 0E010000 		.4byte	0x10e
 10597 06e8 01       		.byte	0x1
 10598 06e9 00       		.byte	0
 10599 06ea 07       		.uleb128 0x7
 10600 06eb 81000000 		.4byte	0x81
 10601 06ef FA060000 		.4byte	0x6fa
 10602 06f3 08       		.uleb128 0x8
 10603 06f4 0E010000 		.4byte	0x10e
 10604 06f8 01       		.byte	0x1
 10605 06f9 00       		.byte	0
 10606 06fa 10       		.uleb128 0x10
 10607 06fb D00A0000 		.4byte	.LASF110
 10608 06ff 20       		.byte	0x20
 10609 0700 07       		.byte	0x7
 10610 0701 7001     		.2byte	0x170
 10611 0703 3C070000 		.4byte	0x73c
 10612 0707 11       		.uleb128 0x11
 10613 0708 4A020000 		.4byte	.LASF111
 10614 070c 07       		.byte	0x7
 10615 070d 7101     		.2byte	0x171
 10616 070f 81000000 		.4byte	0x81
 10617 0713 00       		.byte	0
 10618 0714 11       		.uleb128 0x11
 10619 0715 38100000 		.4byte	.LASF112
 10620 0719 07       		.byte	0x7
 10621 071a 7201     		.2byte	0x172
 10622 071c 81000000 		.4byte	0x81
 10623 0720 01       		.byte	0x1
 10624 0721 11       		.uleb128 0x11
 10625 0722 520A0000 		.4byte	.LASF113
 10626 0726 07       		.byte	0x7
 10627 0727 7301     		.2byte	0x173
 10628 0729 3C070000 		.4byte	0x73c
 10629 072d 02       		.byte	0x2
 10630 072e 11       		.uleb128 0x11
 10631 072f 07030000 		.4byte	.LASF70
 10632 0733 07       		.byte	0x7
 10633 0734 7401     		.2byte	0x174
 10634 0736 5B060000 		.4byte	0x65b
 10635 073a 1B       		.byte	0x1b
 10636 073b 00       		.byte	0
 10637 073c 07       		.uleb128 0x7
 10638 073d 81000000 		.4byte	0x81
 10639 0741 52070000 		.4byte	0x752
 10640 0745 08       		.uleb128 0x8
 10641 0746 0E010000 		.4byte	0x10e
 10642 074a 04       		.byte	0x4
 10643 074b 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 239


 10644 074c 0E010000 		.4byte	0x10e
 10645 0750 04       		.byte	0x4
 10646 0751 00       		.byte	0
 10647 0752 10       		.uleb128 0x10
 10648 0753 B70D0000 		.4byte	.LASF114
 10649 0757 20       		.byte	0x20
 10650 0758 07       		.byte	0x7
 10651 0759 7B01     		.2byte	0x17b
 10652 075b AE070000 		.4byte	0x7ae
 10653 075f 11       		.uleb128 0x11
 10654 0760 D00B0000 		.4byte	.LASF115
 10655 0764 07       		.byte	0x7
 10656 0765 7C01     		.2byte	0x17c
 10657 0767 AE070000 		.4byte	0x7ae
 10658 076b 00       		.byte	0
 10659 076c 11       		.uleb128 0x11
 10660 076d 450F0000 		.4byte	.LASF116
 10661 0771 07       		.byte	0x7
 10662 0772 7D01     		.2byte	0x17d
 10663 0774 81000000 		.4byte	0x81
 10664 0778 06       		.byte	0x6
 10665 0779 11       		.uleb128 0x11
 10666 077a 4E000000 		.4byte	.LASF117
 10667 077e 07       		.byte	0x7
 10668 077f 7E01     		.2byte	0x17e
 10669 0781 81000000 		.4byte	0x81
 10670 0785 07       		.byte	0x7
 10671 0786 11       		.uleb128 0x11
 10672 0787 FE050000 		.4byte	.LASF118
 10673 078b 07       		.byte	0x7
 10674 078c 7F01     		.2byte	0x17f
 10675 078e BE070000 		.4byte	0x7be
 10676 0792 08       		.byte	0x8
 10677 0793 11       		.uleb128 0x11
 10678 0794 58020000 		.4byte	.LASF119
 10679 0798 07       		.byte	0x7
 10680 0799 8001     		.2byte	0x180
 10681 079b 81000000 		.4byte	0x81
 10682 079f 14       		.byte	0x14
 10683 07a0 11       		.uleb128 0x11
 10684 07a1 07030000 		.4byte	.LASF70
 10685 07a5 07       		.byte	0x7
 10686 07a6 8101     		.2byte	0x181
 10687 07a8 CE070000 		.4byte	0x7ce
 10688 07ac 15       		.byte	0x15
 10689 07ad 00       		.byte	0
 10690 07ae 07       		.uleb128 0x7
 10691 07af 81000000 		.4byte	0x81
 10692 07b3 BE070000 		.4byte	0x7be
 10693 07b7 08       		.uleb128 0x8
 10694 07b8 0E010000 		.4byte	0x10e
 10695 07bc 05       		.byte	0x5
 10696 07bd 00       		.byte	0
 10697 07be 07       		.uleb128 0x7
 10698 07bf 81000000 		.4byte	0x81
 10699 07c3 CE070000 		.4byte	0x7ce
 10700 07c7 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 240


 10701 07c8 0E010000 		.4byte	0x10e
 10702 07cc 0B       		.byte	0xb
 10703 07cd 00       		.byte	0
 10704 07ce 07       		.uleb128 0x7
 10705 07cf 81000000 		.4byte	0x81
 10706 07d3 DE070000 		.4byte	0x7de
 10707 07d7 08       		.uleb128 0x8
 10708 07d8 0E010000 		.4byte	0x10e
 10709 07dc 0A       		.byte	0xa
 10710 07dd 00       		.byte	0
 10711 07de 10       		.uleb128 0x10
 10712 07df A20D0000 		.4byte	.LASF120
 10713 07e3 20       		.byte	0x20
 10714 07e4 07       		.byte	0x7
 10715 07e5 8801     		.2byte	0x188
 10716 07e7 13080000 		.4byte	0x813
 10717 07eb 11       		.uleb128 0x11
 10718 07ec BD030000 		.4byte	.LASF121
 10719 07f0 07       		.byte	0x7
 10720 07f1 8901     		.2byte	0x189
 10721 07f3 15010000 		.4byte	0x115
 10722 07f7 00       		.byte	0
 10723 07f8 11       		.uleb128 0x11
 10724 07f9 E0020000 		.4byte	.LASF122
 10725 07fd 07       		.byte	0x7
 10726 07fe 8A01     		.2byte	0x18a
 10727 0800 8B060000 		.4byte	0x68b
 10728 0804 08       		.byte	0x8
 10729 0805 11       		.uleb128 0x11
 10730 0806 07030000 		.4byte	.LASF70
 10731 080a 07       		.byte	0x7
 10732 080b 8B01     		.2byte	0x18b
 10733 080d 7B060000 		.4byte	0x67b
 10734 0811 18       		.byte	0x18
 10735 0812 00       		.byte	0
 10736 0813 10       		.uleb128 0x10
 10737 0814 40090000 		.4byte	.LASF123
 10738 0818 10       		.byte	0x10
 10739 0819 07       		.byte	0x7
 10740 081a 9201     		.2byte	0x192
 10741 081c 62080000 		.4byte	0x862
 10742 0820 11       		.uleb128 0x11
 10743 0821 58080000 		.4byte	.LASF124
 10744 0825 07       		.byte	0x7
 10745 0826 9301     		.2byte	0x193
 10746 0828 BD000000 		.4byte	0xbd
 10747 082c 00       		.byte	0
 10748 082d 11       		.uleb128 0x11
 10749 082e 9D110000 		.4byte	.LASF125
 10750 0832 07       		.byte	0x7
 10751 0833 9401     		.2byte	0x194
 10752 0835 BD000000 		.4byte	0xbd
 10753 0839 04       		.byte	0x4
 10754 083a 11       		.uleb128 0x11
 10755 083b C9050000 		.4byte	.LASF126
 10756 083f 07       		.byte	0x7
 10757 0840 9501     		.2byte	0x195
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 241


 10758 0842 BD000000 		.4byte	0xbd
 10759 0846 08       		.byte	0x8
 10760 0847 11       		.uleb128 0x11
 10761 0848 33070000 		.4byte	.LASF127
 10762 084c 07       		.byte	0x7
 10763 084d 9601     		.2byte	0x196
 10764 084f 81000000 		.4byte	0x81
 10765 0853 0C       		.byte	0xc
 10766 0854 11       		.uleb128 0x11
 10767 0855 07030000 		.4byte	.LASF70
 10768 0859 07       		.byte	0x7
 10769 085a 9701     		.2byte	0x197
 10770 085c 2E040000 		.4byte	0x42e
 10771 0860 0D       		.byte	0xd
 10772 0861 00       		.byte	0
 10773 0862 10       		.uleb128 0x10
 10774 0863 780E0000 		.4byte	.LASF128
 10775 0867 10       		.byte	0x10
 10776 0868 07       		.byte	0x7
 10777 0869 9E01     		.2byte	0x19e
 10778 086b A4080000 		.4byte	0x8a4
 10779 086f 11       		.uleb128 0x11
 10780 0870 46070000 		.4byte	.LASF129
 10781 0874 07       		.byte	0x7
 10782 0875 9F01     		.2byte	0x19f
 10783 0877 8D000000 		.4byte	0x8d
 10784 087b 00       		.byte	0
 10785 087c 11       		.uleb128 0x11
 10786 087d FF0D0000 		.4byte	.LASF130
 10787 0881 07       		.byte	0x7
 10788 0882 A001     		.2byte	0x1a0
 10789 0884 B1000000 		.4byte	0xb1
 10790 0888 02       		.byte	0x2
 10791 0889 11       		.uleb128 0x11
 10792 088a C8070000 		.4byte	.LASF131
 10793 088e 07       		.byte	0x7
 10794 088f A101     		.2byte	0x1a1
 10795 0891 DA060000 		.4byte	0x6da
 10796 0895 04       		.byte	0x4
 10797 0896 11       		.uleb128 0x11
 10798 0897 07030000 		.4byte	.LASF70
 10799 089b 07       		.byte	0x7
 10800 089c A201     		.2byte	0x1a2
 10801 089e 7B060000 		.4byte	0x67b
 10802 08a2 08       		.byte	0x8
 10803 08a3 00       		.byte	0
 10804 08a4 10       		.uleb128 0x10
 10805 08a5 37010000 		.4byte	.LASF132
 10806 08a9 10       		.byte	0x10
 10807 08aa 07       		.byte	0x7
 10808 08ab A901     		.2byte	0x1a9
 10809 08ad D9080000 		.4byte	0x8d9
 10810 08b1 11       		.uleb128 0x11
 10811 08b2 4D0D0000 		.4byte	.LASF133
 10812 08b6 07       		.byte	0x7
 10813 08b7 AA01     		.2byte	0x1aa
 10814 08b9 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 242


 10815 08bd 00       		.byte	0
 10816 08be 11       		.uleb128 0x11
 10817 08bf 3E0A0000 		.4byte	.LASF134
 10818 08c3 07       		.byte	0x7
 10819 08c4 AB01     		.2byte	0x1ab
 10820 08c6 81000000 		.4byte	0x81
 10821 08ca 01       		.byte	0x1
 10822 08cb 11       		.uleb128 0x11
 10823 08cc 07030000 		.4byte	.LASF70
 10824 08d0 07       		.byte	0x7
 10825 08d1 AC01     		.2byte	0x1ac
 10826 08d3 D9080000 		.4byte	0x8d9
 10827 08d7 02       		.byte	0x2
 10828 08d8 00       		.byte	0
 10829 08d9 07       		.uleb128 0x7
 10830 08da 81000000 		.4byte	0x81
 10831 08de E9080000 		.4byte	0x8e9
 10832 08e2 08       		.uleb128 0x8
 10833 08e3 0E010000 		.4byte	0x10e
 10834 08e7 0D       		.byte	0xd
 10835 08e8 00       		.byte	0
 10836 08e9 10       		.uleb128 0x10
 10837 08ea 59090000 		.4byte	.LASF135
 10838 08ee 10       		.byte	0x10
 10839 08ef 07       		.byte	0x7
 10840 08f0 B301     		.2byte	0x1b3
 10841 08f2 2B090000 		.4byte	0x92b
 10842 08f6 11       		.uleb128 0x11
 10843 08f7 70100000 		.4byte	.LASF136
 10844 08fb 07       		.byte	0x7
 10845 08fc B401     		.2byte	0x1b4
 10846 08fe BD000000 		.4byte	0xbd
 10847 0902 00       		.byte	0
 10848 0903 11       		.uleb128 0x11
 10849 0904 1E070000 		.4byte	.LASF137
 10850 0908 07       		.byte	0x7
 10851 0909 B501     		.2byte	0x1b5
 10852 090b D5000000 		.4byte	0xd5
 10853 090f 04       		.byte	0x4
 10854 0910 11       		.uleb128 0x11
 10855 0911 050D0000 		.4byte	.LASF138
 10856 0915 07       		.byte	0x7
 10857 0916 B601     		.2byte	0x1b6
 10858 0918 D5000000 		.4byte	0xd5
 10859 091c 08       		.byte	0x8
 10860 091d 11       		.uleb128 0x11
 10861 091e 07030000 		.4byte	.LASF70
 10862 0922 07       		.byte	0x7
 10863 0923 B701     		.2byte	0x1b7
 10864 0925 2B090000 		.4byte	0x92b
 10865 0929 0C       		.byte	0xc
 10866 092a 00       		.byte	0
 10867 092b 07       		.uleb128 0x7
 10868 092c 81000000 		.4byte	0x81
 10869 0930 3B090000 		.4byte	0x93b
 10870 0934 08       		.uleb128 0x8
 10871 0935 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 243


 10872 0939 03       		.byte	0x3
 10873 093a 00       		.byte	0
 10874 093b 10       		.uleb128 0x10
 10875 093c C1010000 		.4byte	.LASF139
 10876 0940 12       		.byte	0x12
 10877 0941 07       		.byte	0x7
 10878 0942 BE01     		.2byte	0x1be
 10879 0944 7D090000 		.4byte	0x97d
 10880 0948 11       		.uleb128 0x11
 10881 0949 86110000 		.4byte	.LASF140
 10882 094d 07       		.byte	0x7
 10883 094e BF01     		.2byte	0x1bf
 10884 0950 81000000 		.4byte	0x81
 10885 0954 00       		.byte	0
 10886 0955 11       		.uleb128 0x11
 10887 0956 25100000 		.4byte	.LASF141
 10888 095a 07       		.byte	0x7
 10889 095b C001     		.2byte	0x1c0
 10890 095d DA060000 		.4byte	0x6da
 10891 0961 02       		.byte	0x2
 10892 0962 11       		.uleb128 0x11
 10893 0963 1A000000 		.4byte	.LASF142
 10894 0967 07       		.byte	0x7
 10895 0968 C101     		.2byte	0x1c1
 10896 096a 81000000 		.4byte	0x81
 10897 096e 06       		.byte	0x6
 10898 096f 11       		.uleb128 0x11
 10899 0970 07030000 		.4byte	.LASF70
 10900 0974 07       		.byte	0x7
 10901 0975 C201     		.2byte	0x1c2
 10902 0977 7D090000 		.4byte	0x97d
 10903 097b 07       		.byte	0x7
 10904 097c 00       		.byte	0
 10905 097d 07       		.uleb128 0x7
 10906 097e 81000000 		.4byte	0x81
 10907 0982 8D090000 		.4byte	0x98d
 10908 0986 08       		.uleb128 0x8
 10909 0987 0E010000 		.4byte	0x10e
 10910 098b 09       		.byte	0x9
 10911 098c 00       		.byte	0
 10912 098d 13       		.uleb128 0x13
 10913 098e 8B100000 		.4byte	.LASF143
 10914 0992 F402     		.2byte	0x2f4
 10915 0994 07       		.byte	0x7
 10916 0995 CB01     		.2byte	0x1cb
 10917 0997 720A0000 		.4byte	0xa72
 10918 099b 11       		.uleb128 0x11
 10919 099c A10A0000 		.4byte	.LASF144
 10920 09a0 07       		.byte	0x7
 10921 09a1 CD01     		.2byte	0x1cd
 10922 09a3 81000000 		.4byte	0x81
 10923 09a7 00       		.byte	0
 10924 09a8 11       		.uleb128 0x11
 10925 09a9 07030000 		.4byte	.LASF70
 10926 09ad 07       		.byte	0x7
 10927 09ae CE01     		.2byte	0x1ce
 10928 09b0 720A0000 		.4byte	0xa72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 244


 10929 09b4 01       		.byte	0x1
 10930 09b5 12       		.uleb128 0x12
 10931 09b6 636E7400 		.ascii	"cnt\000"
 10932 09ba 07       		.byte	0x7
 10933 09bb CF01     		.2byte	0x1cf
 10934 09bd 06030000 		.4byte	0x306
 10935 09c1 10       		.byte	0x10
 10936 09c2 11       		.uleb128 0x11
 10937 09c3 9A020000 		.4byte	.LASF145
 10938 09c7 07       		.byte	0x7
 10939 09c8 D001     		.2byte	0x1d0
 10940 09ca 820A0000 		.4byte	0xa82
 10941 09ce 60       		.byte	0x60
 10942 09cf 12       		.uleb128 0x12
 10943 09d0 64657600 		.ascii	"dev\000"
 10944 09d4 07       		.byte	0x7
 10945 09d5 D101     		.2byte	0x1d1
 10946 09d7 9F030000 		.4byte	0x39f
 10947 09db A0       		.byte	0xa0
 10948 09dc 11       		.uleb128 0x11
 10949 09dd C00E0000 		.4byte	.LASF146
 10950 09e1 07       		.byte	0x7
 10951 09e2 D201     		.2byte	0x1d2
 10952 09e4 920A0000 		.4byte	0xa92
 10953 09e8 B0       		.byte	0xb0
 10954 09e9 14       		.uleb128 0x14
 10955 09ea 656E6300 		.ascii	"enc\000"
 10956 09ee 07       		.byte	0x7
 10957 09ef D301     		.2byte	0x1d3
 10958 09f1 A20A0000 		.4byte	0xaa2
 10959 09f5 9001     		.2byte	0x190
 10960 09f7 14       		.uleb128 0x14
 10961 09f8 656D6700 		.ascii	"emg\000"
 10962 09fc 07       		.byte	0x7
 10963 09fd D401     		.2byte	0x1d4
 10964 09ff 8B060000 		.4byte	0x68b
 10965 0a03 F001     		.2byte	0x1f0
 10966 0a05 14       		.uleb128 0x14
 10967 0a06 696D7500 		.ascii	"imu\000"
 10968 0a0a 07       		.byte	0x7
 10969 0a0b D501     		.2byte	0x1d5
 10970 0a0d FA060000 		.4byte	0x6fa
 10971 0a11 0002     		.2byte	0x200
 10972 0a13 14       		.uleb128 0x14
 10973 0a14 65787000 		.ascii	"exp\000"
 10974 0a18 07       		.byte	0x7
 10975 0a19 D601     		.2byte	0x1d6
 10976 0a1b 52070000 		.4byte	0x752
 10977 0a1f 2002     		.2byte	0x220
 10978 0a21 15       		.uleb128 0x15
 10979 0a22 69000000 		.4byte	.LASF147
 10980 0a26 07       		.byte	0x7
 10981 0a27 D701     		.2byte	0x1d7
 10982 0a29 B20A0000 		.4byte	0xab2
 10983 0a2d 4002     		.2byte	0x240
 10984 0a2f 14       		.uleb128 0x14
 10985 0a30 534800   		.ascii	"SH\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 245


 10986 0a33 07       		.byte	0x7
 10987 0a34 D901     		.2byte	0x1d9
 10988 0a36 13080000 		.4byte	0x813
 10989 0a3a A002     		.2byte	0x2a0
 10990 0a3c 15       		.uleb128 0x15
 10991 0a3d A2000000 		.4byte	.LASF148
 10992 0a41 07       		.byte	0x7
 10993 0a42 DA01     		.2byte	0x1da
 10994 0a44 62080000 		.4byte	0x862
 10995 0a48 B002     		.2byte	0x2b0
 10996 0a4a 14       		.uleb128 0x14
 10997 0a4b 4D5300   		.ascii	"MS\000"
 10998 0a4e 07       		.byte	0x7
 10999 0a4f DB01     		.2byte	0x1db
 11000 0a51 A4080000 		.4byte	0x8a4
 11001 0a55 C002     		.2byte	0x2c0
 11002 0a57 14       		.uleb128 0x14
 11003 0a58 464200   		.ascii	"FB\000"
 11004 0a5b 07       		.byte	0x7
 11005 0a5c DC01     		.2byte	0x1dc
 11006 0a5e E9080000 		.4byte	0x8e9
 11007 0a62 D002     		.2byte	0x2d0
 11008 0a64 14       		.uleb128 0x14
 11009 0a65 575200   		.ascii	"WR\000"
 11010 0a68 07       		.byte	0x7
 11011 0a69 DD01     		.2byte	0x1dd
 11012 0a6b 3B090000 		.4byte	0x93b
 11013 0a6f E002     		.2byte	0x2e0
 11014 0a71 00       		.byte	0
 11015 0a72 07       		.uleb128 0x7
 11016 0a73 81000000 		.4byte	0x81
 11017 0a77 820A0000 		.4byte	0xa82
 11018 0a7b 08       		.uleb128 0x8
 11019 0a7c 0E010000 		.4byte	0x10e
 11020 0a80 0E       		.byte	0xe
 11021 0a81 00       		.byte	0
 11022 0a82 07       		.uleb128 0x7
 11023 0a83 81000000 		.4byte	0x81
 11024 0a87 920A0000 		.4byte	0xa92
 11025 0a8b 08       		.uleb128 0x8
 11026 0a8c 0E010000 		.4byte	0x10e
 11027 0a90 3F       		.byte	0x3f
 11028 0a91 00       		.byte	0
 11029 0a92 07       		.uleb128 0x7
 11030 0a93 3E040000 		.4byte	0x43e
 11031 0a97 A20A0000 		.4byte	0xaa2
 11032 0a9b 08       		.uleb128 0x8
 11033 0a9c 0E010000 		.4byte	0x10e
 11034 0aa0 01       		.byte	0x1
 11035 0aa1 00       		.byte	0
 11036 0aa2 07       		.uleb128 0x7
 11037 0aa3 D8050000 		.4byte	0x5d8
 11038 0aa7 B20A0000 		.4byte	0xab2
 11039 0aab 08       		.uleb128 0x8
 11040 0aac 0E010000 		.4byte	0x10e
 11041 0ab0 01       		.byte	0x1
 11042 0ab1 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 246


 11043 0ab2 07       		.uleb128 0x7
 11044 0ab3 DE070000 		.4byte	0x7de
 11045 0ab7 C20A0000 		.4byte	0xac2
 11046 0abb 08       		.uleb128 0x8
 11047 0abc 0E010000 		.4byte	0x10e
 11048 0ac0 02       		.byte	0x2
 11049 0ac1 00       		.byte	0
 11050 0ac2 10       		.uleb128 0x10
 11051 0ac3 6F0C0000 		.4byte	.LASF149
 11052 0ac7 28       		.byte	0x28
 11053 0ac8 07       		.byte	0x7
 11054 0ac9 E801     		.2byte	0x1e8
 11055 0acb 1E0B0000 		.4byte	0xb1e
 11056 0acf 11       		.uleb128 0x11
 11057 0ad0 FD040000 		.4byte	.LASF150
 11058 0ad4 07       		.byte	0x7
 11059 0ad5 E901     		.2byte	0x1e9
 11060 0ad7 81000000 		.4byte	0x81
 11061 0adb 00       		.byte	0
 11062 0adc 11       		.uleb128 0x11
 11063 0add 14030000 		.4byte	.LASF151
 11064 0ae1 07       		.byte	0x7
 11065 0ae2 EA01     		.2byte	0x1ea
 11066 0ae4 1E0B0000 		.4byte	0xb1e
 11067 0ae8 02       		.byte	0x2
 11068 0ae9 11       		.uleb128 0x11
 11069 0aea C50B0000 		.4byte	.LASF152
 11070 0aee 07       		.byte	0x7
 11071 0aef EB01     		.2byte	0x1eb
 11072 0af1 1E0B0000 		.4byte	0xb1e
 11073 0af5 08       		.byte	0x8
 11074 0af6 11       		.uleb128 0x11
 11075 0af7 7B0C0000 		.4byte	.LASF153
 11076 0afb 07       		.byte	0x7
 11077 0afc EC01     		.2byte	0x1ec
 11078 0afe 1E0B0000 		.4byte	0xb1e
 11079 0b02 0E       		.byte	0xe
 11080 0b03 11       		.uleb128 0x11
 11081 0b04 4D080000 		.4byte	.LASF154
 11082 0b08 07       		.byte	0x7
 11083 0b09 ED01     		.2byte	0x1ed
 11084 0b0b 2E0B0000 		.4byte	0xb2e
 11085 0b0f 14       		.byte	0x14
 11086 0b10 11       		.uleb128 0x11
 11087 0b11 AE010000 		.4byte	.LASF155
 11088 0b15 07       		.byte	0x7
 11089 0b16 EE01     		.2byte	0x1ee
 11090 0b18 B1000000 		.4byte	0xb1
 11091 0b1c 24       		.byte	0x24
 11092 0b1d 00       		.byte	0
 11093 0b1e 07       		.uleb128 0x7
 11094 0b1f B1000000 		.4byte	0xb1
 11095 0b23 2E0B0000 		.4byte	0xb2e
 11096 0b27 08       		.uleb128 0x8
 11097 0b28 0E010000 		.4byte	0x10e
 11098 0b2c 02       		.byte	0x2
 11099 0b2d 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 247


 11100 0b2e 07       		.uleb128 0x7
 11101 0b2f D5000000 		.4byte	0xd5
 11102 0b33 3E0B0000 		.4byte	0xb3e
 11103 0b37 08       		.uleb128 0x8
 11104 0b38 0E010000 		.4byte	0x10e
 11105 0b3c 03       		.byte	0x3
 11106 0b3d 00       		.byte	0
 11107 0b3e 10       		.uleb128 0x10
 11108 0b3f A8110000 		.4byte	.LASF156
 11109 0b43 08       		.byte	0x8
 11110 0b44 07       		.byte	0x7
 11111 0b45 F501     		.2byte	0x1f5
 11112 0b47 660B0000 		.4byte	0xb66
 11113 0b4b 11       		.uleb128 0x11
 11114 0b4c B5050000 		.4byte	.LASF157
 11115 0b50 07       		.byte	0x7
 11116 0b51 F601     		.2byte	0x1f6
 11117 0b53 BD000000 		.4byte	0xbd
 11118 0b57 00       		.byte	0
 11119 0b58 11       		.uleb128 0x11
 11120 0b59 F4010000 		.4byte	.LASF158
 11121 0b5d 07       		.byte	0x7
 11122 0b5e F701     		.2byte	0x1f7
 11123 0b60 BD000000 		.4byte	0xbd
 11124 0b64 04       		.byte	0x4
 11125 0b65 00       		.byte	0
 11126 0b66 10       		.uleb128 0x10
 11127 0b67 CE030000 		.4byte	.LASF159
 11128 0b6b 06       		.byte	0x6
 11129 0b6c 07       		.byte	0x7
 11130 0b6d FE01     		.2byte	0x1fe
 11131 0b6f A80B0000 		.4byte	0xba8
 11132 0b73 11       		.uleb128 0x11
 11133 0b74 89070000 		.4byte	.LASF160
 11134 0b78 07       		.byte	0x7
 11135 0b79 FF01     		.2byte	0x1ff
 11136 0b7b 81000000 		.4byte	0x81
 11137 0b7f 00       		.byte	0
 11138 0b80 11       		.uleb128 0x11
 11139 0b81 C4110000 		.4byte	.LASF161
 11140 0b85 07       		.byte	0x7
 11141 0b86 0002     		.2byte	0x200
 11142 0b88 81000000 		.4byte	0x81
 11143 0b8c 01       		.byte	0x1
 11144 0b8d 11       		.uleb128 0x11
 11145 0b8e 42060000 		.4byte	.LASF162
 11146 0b92 07       		.byte	0x7
 11147 0b93 0102     		.2byte	0x201
 11148 0b95 B1000000 		.4byte	0xb1
 11149 0b99 02       		.byte	0x2
 11150 0b9a 11       		.uleb128 0x11
 11151 0b9b 110A0000 		.4byte	.LASF163
 11152 0b9f 07       		.byte	0x7
 11153 0ba0 0202     		.2byte	0x202
 11154 0ba2 B1000000 		.4byte	0xb1
 11155 0ba6 04       		.byte	0x4
 11156 0ba7 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 248


 11157 0ba8 16       		.uleb128 0x16
 11158 0ba9 01       		.byte	0x1
 11159 0baa 2C000000 		.4byte	0x2c
 11160 0bae 07       		.byte	0x7
 11161 0baf 0602     		.2byte	0x206
 11162 0bb1 DA0B0000 		.4byte	0xbda
 11163 0bb5 0A       		.uleb128 0xa
 11164 0bb6 D2050000 		.4byte	.LASF164
 11165 0bba 00       		.byte	0
 11166 0bbb 0A       		.uleb128 0xa
 11167 0bbc 470D0000 		.4byte	.LASF165
 11168 0bc0 01       		.byte	0x1
 11169 0bc1 0A       		.uleb128 0xa
 11170 0bc2 5E0B0000 		.4byte	.LASF166
 11171 0bc6 02       		.byte	0x2
 11172 0bc7 0A       		.uleb128 0xa
 11173 0bc8 3D020000 		.4byte	.LASF167
 11174 0bcc 03       		.byte	0x3
 11175 0bcd 0A       		.uleb128 0xa
 11176 0bce 470A0000 		.4byte	.LASF168
 11177 0bd2 04       		.byte	0x4
 11178 0bd3 0A       		.uleb128 0xa
 11179 0bd4 E50C0000 		.4byte	.LASF169
 11180 0bd8 05       		.byte	0x5
 11181 0bd9 00       		.byte	0
 11182 0bda 05       		.uleb128 0x5
 11183 0bdb 67050000 		.4byte	.LASF170
 11184 0bdf 07       		.byte	0x7
 11185 0be0 0E02     		.2byte	0x20e
 11186 0be2 A80B0000 		.4byte	0xba8
 11187 0be6 16       		.uleb128 0x16
 11188 0be7 01       		.byte	0x1
 11189 0be8 2C000000 		.4byte	0x2c
 11190 0bec 07       		.byte	0x7
 11191 0bed 1002     		.2byte	0x210
 11192 0bef 120C0000 		.4byte	0xc12
 11193 0bf3 0A       		.uleb128 0xa
 11194 0bf4 A1010000 		.4byte	.LASF171
 11195 0bf8 00       		.byte	0
 11196 0bf9 0A       		.uleb128 0xa
 11197 0bfa BB070000 		.4byte	.LASF172
 11198 0bfe 01       		.byte	0x1
 11199 0bff 0A       		.uleb128 0xa
 11200 0c00 66080000 		.4byte	.LASF173
 11201 0c04 02       		.byte	0x2
 11202 0c05 0A       		.uleb128 0xa
 11203 0c06 7B030000 		.4byte	.LASF174
 11204 0c0a 03       		.byte	0x3
 11205 0c0b 0A       		.uleb128 0xa
 11206 0c0c 81110000 		.4byte	.LASF175
 11207 0c10 04       		.byte	0x4
 11208 0c11 00       		.byte	0
 11209 0c12 05       		.uleb128 0x5
 11210 0c13 310E0000 		.4byte	.LASF176
 11211 0c17 07       		.byte	0x7
 11212 0c18 1702     		.2byte	0x217
 11213 0c1a E60B0000 		.4byte	0xbe6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 249


 11214 0c1e 17       		.uleb128 0x17
 11215 0c1f 90050000 		.4byte	.LASF177
 11216 0c23 01       		.byte	0x1
 11217 0c24 62       		.byte	0x62
 11218 0c25 00000000 		.4byte	.LFB64
 11219 0c29 18000000 		.4byte	.LFE64-.LFB64
 11220 0c2d 01       		.uleb128 0x1
 11221 0c2e 9C       		.byte	0x9c
 11222 0c2f 17       		.uleb128 0x17
 11223 0c30 08100000 		.4byte	.LASF178
 11224 0c34 01       		.byte	0x1
 11225 0c35 6D       		.byte	0x6d
 11226 0c36 00000000 		.4byte	.LFB65
 11227 0c3a 20000000 		.4byte	.LFE65-.LFB65
 11228 0c3e 01       		.uleb128 0x1
 11229 0c3f 9C       		.byte	0x9c
 11230 0c40 18       		.uleb128 0x18
 11231 0c41 C5090000 		.4byte	.LASF210
 11232 0c45 01       		.byte	0x1
 11233 0c46 86       		.byte	0x86
 11234 0c47 00000000 		.4byte	.LFB66
 11235 0c4b F4010000 		.4byte	.LFE66-.LFB66
 11236 0c4f 01       		.uleb128 0x1
 11237 0c50 9C       		.byte	0x9c
 11238 0c51 D50C0000 		.4byte	0xcd5
 11239 0c55 19       		.uleb128 0x19
 11240 0c56 CF000000 		.4byte	.LASF179
 11241 0c5a 01       		.byte	0x1
 11242 0c5b 8B       		.byte	0x8b
 11243 0c5c 81000000 		.4byte	0x81
 11244 0c60 05       		.uleb128 0x5
 11245 0c61 03       		.byte	0x3
 11246 0c62 00000000 		.4byte	state.10445
 11247 0c66 19       		.uleb128 0x19
 11248 0c67 67060000 		.4byte	.LASF180
 11249 0c6b 01       		.byte	0x1
 11250 0c6c 8E       		.byte	0x8e
 11251 0c6d 81000000 		.4byte	0x81
 11252 0c71 05       		.uleb128 0x5
 11253 0c72 03       		.byte	0x3
 11254 0c73 08000000 		.4byte	data_packet_index.10446
 11255 0c77 19       		.uleb128 0x19
 11256 0c78 AE0C0000 		.4byte	.LASF181
 11257 0c7c 01       		.byte	0x1
 11258 0c7d 8F       		.byte	0x8f
 11259 0c7e 81000000 		.4byte	0x81
 11260 0c82 05       		.uleb128 0x5
 11261 0c83 03       		.byte	0x3
 11262 0c84 07000000 		.4byte	data_packet_length.10447
 11263 0c88 19       		.uleb128 0x19
 11264 0c89 79060000 		.4byte	.LASF182
 11265 0c8d 01       		.byte	0x1
 11266 0c8e 90       		.byte	0x90
 11267 0c8f F6020000 		.4byte	0x2f6
 11268 0c93 05       		.uleb128 0x5
 11269 0c94 03       		.byte	0x3
 11270 0c95 0C000000 		.4byte	data_packet_buffer.10448
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 250


 11271 0c99 19       		.uleb128 0x19
 11272 0c9a E30A0000 		.4byte	.LASF183
 11273 0c9e 01       		.byte	0x1
 11274 0c9f 91       		.byte	0x91
 11275 0ca0 2E040000 		.4byte	0x42e
 11276 0ca4 05       		.uleb128 0x5
 11277 0ca5 03       		.byte	0x3
 11278 0ca6 04000000 		.4byte	rx_queue.10449
 11279 0caa 19       		.uleb128 0x19
 11280 0cab 66010000 		.4byte	.LASF184
 11281 0caf 01       		.byte	0x1
 11282 0cb0 94       		.byte	0x94
 11283 0cb1 81000000 		.4byte	0x81
 11284 0cb5 02       		.uleb128 0x2
 11285 0cb6 91       		.byte	0x91
 11286 0cb7 75       		.sleb128 -11
 11287 0cb8 19       		.uleb128 0x19
 11288 0cb9 2C060000 		.4byte	.LASF185
 11289 0cbd 01       		.byte	0x1
 11290 0cbe 95       		.byte	0x95
 11291 0cbf 81000000 		.4byte	0x81
 11292 0cc3 02       		.uleb128 0x2
 11293 0cc4 91       		.byte	0x91
 11294 0cc5 77       		.sleb128 -9
 11295 0cc6 19       		.uleb128 0x19
 11296 0cc7 66070000 		.4byte	.LASF186
 11297 0ccb 01       		.byte	0x1
 11298 0ccc 96       		.byte	0x96
 11299 0ccd 81000000 		.4byte	0x81
 11300 0cd1 02       		.uleb128 0x2
 11301 0cd2 91       		.byte	0x91
 11302 0cd3 76       		.sleb128 -10
 11303 0cd4 00       		.byte	0
 11304 0cd5 1A       		.uleb128 0x1a
 11305 0cd6 E00E0000 		.4byte	.LASF193
 11306 0cda 01       		.byte	0x1
 11307 0cdb 0C01     		.2byte	0x10c
 11308 0cdd 00000000 		.4byte	.LFB67
 11309 0ce1 8C070000 		.4byte	.LFE67-.LFB67
 11310 0ce5 01       		.uleb128 0x1
 11311 0ce6 9C       		.byte	0x9c
 11312 0ce7 740D0000 		.4byte	0xd74
 11313 0ceb 1B       		.uleb128 0x1b
 11314 0cec A3060000 		.4byte	.LASF187
 11315 0cf0 01       		.byte	0x1
 11316 0cf1 0E01     		.2byte	0x10e
 11317 0cf3 8D000000 		.4byte	0x8d
 11318 0cf7 05       		.uleb128 0x5
 11319 0cf8 03       		.byte	0x3
 11320 0cf9 00000000 		.4byte	counter_calibration.10465
 11321 0cfd 1B       		.uleb128 0x1b
 11322 0cfe 190C0000 		.4byte	.LASF188
 11323 0d02 01       		.byte	0x1
 11324 0d03 0F01     		.2byte	0x10f
 11325 0d05 8D000000 		.4byte	0x8d
 11326 0d09 05       		.uleb128 0x5
 11327 0d0a 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 251


 11328 0d0b 02000000 		.4byte	counter_tension_func.10466
 11329 0d0f 1B       		.uleb128 0x1b
 11330 0d10 7D010000 		.4byte	.LASF189
 11331 0d14 01       		.byte	0x1
 11332 0d15 1001     		.2byte	0x110
 11333 0d17 740D0000 		.4byte	0xd74
 11334 0d1b 03       		.uleb128 0x3
 11335 0d1c 91       		.byte	0x91
 11336 0d1d A86C     		.sleb128 -2520
 11337 0d1f 1B       		.uleb128 0x1b
 11338 0d20 FC0B0000 		.4byte	.LASF190
 11339 0d24 01       		.byte	0x1
 11340 0d25 1201     		.2byte	0x112
 11341 0d27 81000000 		.4byte	0x81
 11342 0d2b 02       		.uleb128 0x2
 11343 0d2c 91       		.byte	0x91
 11344 0d2d 6E       		.sleb128 -18
 11345 0d2e 1B       		.uleb128 0x1b
 11346 0d2f 82090000 		.4byte	.LASF191
 11347 0d33 01       		.byte	0x1
 11348 0d34 1301     		.2byte	0x113
 11349 0d36 81000000 		.4byte	0x81
 11350 0d3a 02       		.uleb128 0x2
 11351 0d3b 91       		.byte	0x91
 11352 0d3c 6D       		.sleb128 -19
 11353 0d3d 1C       		.uleb128 0x1c
 11354 0d3e 6A010000 		.4byte	.LBB2
 11355 0d42 1A010000 		.4byte	.LBE2-.LBB2
 11356 0d46 580D0000 		.4byte	0xd58
 11357 0d4a 1D       		.uleb128 0x1d
 11358 0d4b 6900     		.ascii	"i\000"
 11359 0d4d 01       		.byte	0x1
 11360 0d4e 4D01     		.2byte	0x14d
 11361 0d50 81000000 		.4byte	0x81
 11362 0d54 02       		.uleb128 0x2
 11363 0d55 91       		.byte	0x91
 11364 0d56 6F       		.sleb128 -17
 11365 0d57 00       		.byte	0
 11366 0d58 1E       		.uleb128 0x1e
 11367 0d59 C2050000 		.4byte	.LBB3
 11368 0d5d 50000000 		.4byte	.LBE3-.LBB3
 11369 0d61 1B       		.uleb128 0x1b
 11370 0d62 A8020000 		.4byte	.LASF192
 11371 0d66 01       		.byte	0x1
 11372 0d67 3802     		.2byte	0x238
 11373 0d69 850D0000 		.4byte	0xd85
 11374 0d6d 04       		.uleb128 0x4
 11375 0d6e 91       		.byte	0x91
 11376 0d6f 90F77E   		.sleb128 -17520
 11377 0d72 00       		.byte	0
 11378 0d73 00       		.byte	0
 11379 0d74 07       		.uleb128 0x7
 11380 0d75 E3000000 		.4byte	0xe3
 11381 0d79 850D0000 		.4byte	0xd85
 11382 0d7d 1F       		.uleb128 0x1f
 11383 0d7e 0E010000 		.4byte	0x10e
 11384 0d82 C309     		.2byte	0x9c3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 252


 11385 0d84 00       		.byte	0
 11386 0d85 07       		.uleb128 0x7
 11387 0d86 E3000000 		.4byte	0xe3
 11388 0d8a 960D0000 		.4byte	0xd96
 11389 0d8e 1F       		.uleb128 0x1f
 11390 0d8f 0E010000 		.4byte	0x10e
 11391 0d93 973A     		.2byte	0x3a97
 11392 0d95 00       		.byte	0
 11393 0d96 1A       		.uleb128 0x1a
 11394 0d97 F30E0000 		.4byte	.LASF194
 11395 0d9b 01       		.byte	0x1
 11396 0d9c 7C02     		.2byte	0x27c
 11397 0d9e 00000000 		.4byte	.LFB68
 11398 0da2 CC050000 		.4byte	.LFE68-.LFB68
 11399 0da6 01       		.uleb128 0x1
 11400 0da7 9C       		.byte	0x9c
 11401 0da8 4C0E0000 		.4byte	0xe4c
 11402 0dac 20       		.uleb128 0x20
 11403 0dad 27080000 		.4byte	.LASF195
 11404 0db1 01       		.byte	0x1
 11405 0db2 7C02     		.2byte	0x27c
 11406 0db4 81000000 		.4byte	0x81
 11407 0db8 02       		.uleb128 0x2
 11408 0db9 91       		.byte	0x91
 11409 0dba 5F       		.sleb128 -33
 11410 0dbb 20       		.uleb128 0x20
 11411 0dbc 8C060000 		.4byte	.LASF196
 11412 0dc0 01       		.byte	0x1
 11413 0dc1 7C02     		.2byte	0x27c
 11414 0dc3 4C0E0000 		.4byte	0xe4c
 11415 0dc7 02       		.uleb128 0x2
 11416 0dc8 91       		.byte	0x91
 11417 0dc9 58       		.sleb128 -40
 11418 0dca 20       		.uleb128 0x20
 11419 0dcb BA100000 		.4byte	.LASF197
 11420 0dcf 01       		.byte	0x1
 11421 0dd0 7C02     		.2byte	0x27c
 11422 0dd2 4C0E0000 		.4byte	0xe4c
 11423 0dd6 02       		.uleb128 0x2
 11424 0dd7 91       		.byte	0x91
 11425 0dd8 54       		.sleb128 -44
 11426 0dd9 1B       		.uleb128 0x1b
 11427 0dda 03050000 		.4byte	.LASF198
 11428 0dde 01       		.byte	0x1
 11429 0ddf 7E02     		.2byte	0x27e
 11430 0de1 BD000000 		.4byte	0xbd
 11431 0de5 02       		.uleb128 0x2
 11432 0de6 91       		.byte	0x91
 11433 0de7 74       		.sleb128 -12
 11434 0de8 1B       		.uleb128 0x1b
 11435 0de9 D7030000 		.4byte	.LASF199
 11436 0ded 01       		.byte	0x1
 11437 0dee 7F02     		.2byte	0x27f
 11438 0df0 BD000000 		.4byte	0xbd
 11439 0df4 02       		.uleb128 0x2
 11440 0df5 91       		.byte	0x91
 11441 0df6 68       		.sleb128 -24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 253


 11442 0df7 1B       		.uleb128 0x1b
 11443 0df8 E1030000 		.4byte	.LASF200
 11444 0dfc 01       		.byte	0x1
 11445 0dfd 7F02     		.2byte	0x27f
 11446 0dff BD000000 		.4byte	0xbd
 11447 0e03 02       		.uleb128 0x2
 11448 0e04 91       		.byte	0x91
 11449 0e05 64       		.sleb128 -28
 11450 0e06 1D       		.uleb128 0x1d
 11451 0e07 4D4F5400 		.ascii	"MOT\000"
 11452 0e0b 01       		.byte	0x1
 11453 0e0c 8002     		.2byte	0x280
 11454 0e0e 520E0000 		.4byte	0xe52
 11455 0e12 02       		.uleb128 0x2
 11456 0e13 91       		.byte	0x91
 11457 0e14 70       		.sleb128 -16
 11458 0e15 1B       		.uleb128 0x1b
 11459 0e16 85100000 		.4byte	.LASF201
 11460 0e1a 01       		.byte	0x1
 11461 0e1b 8102     		.2byte	0x281
 11462 0e1d 81000000 		.4byte	0x81
 11463 0e21 02       		.uleb128 0x2
 11464 0e22 91       		.byte	0x91
 11465 0e23 6F       		.sleb128 -17
 11466 0e24 1B       		.uleb128 0x1b
 11467 0e25 D70A0000 		.4byte	.LASF202
 11468 0e29 01       		.byte	0x1
 11469 0e2a 8302     		.2byte	0x283
 11470 0e2c EA060000 		.4byte	0x6ea
 11471 0e30 05       		.uleb128 0x5
 11472 0e31 03       		.byte	0x3
 11473 0e32 8C000000 		.4byte	current_emg.10491
 11474 0e36 21       		.uleb128 0x21
 11475 0e37 00000000 		.4byte	.Ldebug_ranges0+0
 11476 0e3b 1B       		.uleb128 0x1b
 11477 0e3c C5000000 		.4byte	.LASF203
 11478 0e40 01       		.byte	0x1
 11479 0e41 A802     		.2byte	0x2a8
 11480 0e43 BD000000 		.4byte	0xbd
 11481 0e47 02       		.uleb128 0x2
 11482 0e48 91       		.byte	0x91
 11483 0e49 60       		.sleb128 -32
 11484 0e4a 00       		.byte	0
 11485 0e4b 00       		.byte	0
 11486 0e4c 0C       		.uleb128 0xc
 11487 0e4d 04       		.byte	0x4
 11488 0e4e A5010000 		.4byte	0x1a5
 11489 0e52 0C       		.uleb128 0xc
 11490 0e53 04       		.byte	0x4
 11491 0e54 3E040000 		.4byte	0x43e
 11492 0e58 22       		.uleb128 0x22
 11493 0e59 C90F0000 		.4byte	.LASF204
 11494 0e5d 01       		.byte	0x1
 11495 0e5e 5B03     		.2byte	0x35b
 11496 0e60 00000000 		.4byte	.LFB69
 11497 0e64 34030000 		.4byte	.LFE69-.LFB69
 11498 0e68 01       		.uleb128 0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 254


 11499 0e69 9C       		.byte	0x9c
 11500 0e6a E80E0000 		.4byte	0xee8
 11501 0e6e 20       		.uleb128 0x20
 11502 0e6f 27080000 		.4byte	.LASF195
 11503 0e73 01       		.byte	0x1
 11504 0e74 5B03     		.2byte	0x35b
 11505 0e76 81000000 		.4byte	0x81
 11506 0e7a 02       		.uleb128 0x2
 11507 0e7b 91       		.byte	0x91
 11508 0e7c 67       		.sleb128 -25
 11509 0e7d 20       		.uleb128 0x20
 11510 0e7e 8C060000 		.4byte	.LASF196
 11511 0e82 01       		.byte	0x1
 11512 0e83 5B03     		.2byte	0x35b
 11513 0e85 4C0E0000 		.4byte	0xe4c
 11514 0e89 02       		.uleb128 0x2
 11515 0e8a 91       		.byte	0x91
 11516 0e8b 60       		.sleb128 -32
 11517 0e8c 20       		.uleb128 0x20
 11518 0e8d BA100000 		.4byte	.LASF197
 11519 0e91 01       		.byte	0x1
 11520 0e92 5B03     		.2byte	0x35b
 11521 0e94 4C0E0000 		.4byte	0xe4c
 11522 0e98 02       		.uleb128 0x2
 11523 0e99 91       		.byte	0x91
 11524 0e9a 5C       		.sleb128 -36
 11525 0e9b 23       		.uleb128 0x23
 11526 0e9c 18000000 		.4byte	.Ldebug_ranges0+0x18
 11527 0ea0 C30E0000 		.4byte	0xec3
 11528 0ea4 1B       		.uleb128 0x1b
 11529 0ea5 C5000000 		.4byte	.LASF203
 11530 0ea9 01       		.byte	0x1
 11531 0eaa 6203     		.2byte	0x362
 11532 0eac BD000000 		.4byte	0xbd
 11533 0eb0 02       		.uleb128 0x2
 11534 0eb1 91       		.byte	0x91
 11535 0eb2 74       		.sleb128 -12
 11536 0eb3 1B       		.uleb128 0x1b
 11537 0eb4 CC010000 		.4byte	.LASF205
 11538 0eb8 01       		.byte	0x1
 11539 0eb9 6303     		.2byte	0x363
 11540 0ebb BD000000 		.4byte	0xbd
 11541 0ebf 02       		.uleb128 0x2
 11542 0ec0 91       		.byte	0x91
 11543 0ec1 70       		.sleb128 -16
 11544 0ec2 00       		.byte	0
 11545 0ec3 21       		.uleb128 0x21
 11546 0ec4 30000000 		.4byte	.Ldebug_ranges0+0x30
 11547 0ec8 1B       		.uleb128 0x1b
 11548 0ec9 160D0000 		.4byte	.LASF206
 11549 0ecd 01       		.byte	0x1
 11550 0ece 8803     		.2byte	0x388
 11551 0ed0 BD000000 		.4byte	0xbd
 11552 0ed4 02       		.uleb128 0x2
 11553 0ed5 91       		.byte	0x91
 11554 0ed6 6C       		.sleb128 -20
 11555 0ed7 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 255


 11556 0ed8 BD090000 		.4byte	.LASF207
 11557 0edc 01       		.byte	0x1
 11558 0edd 8903     		.2byte	0x389
 11559 0edf BD000000 		.4byte	0xbd
 11560 0ee3 02       		.uleb128 0x2
 11561 0ee4 91       		.byte	0x91
 11562 0ee5 68       		.sleb128 -24
 11563 0ee6 00       		.byte	0
 11564 0ee7 00       		.byte	0
 11565 0ee8 1A       		.uleb128 0x1a
 11566 0ee9 E9090000 		.4byte	.LASF208
 11567 0eed 01       		.byte	0x1
 11568 0eee B403     		.2byte	0x3b4
 11569 0ef0 00000000 		.4byte	.LFB70
 11570 0ef4 B0010000 		.4byte	.LFE70-.LFB70
 11571 0ef8 01       		.uleb128 0x1
 11572 0ef9 9C       		.byte	0x9c
 11573 0efa 5C0F0000 		.4byte	0xf5c
 11574 0efe 20       		.uleb128 0x20
 11575 0eff 27080000 		.4byte	.LASF195
 11576 0f03 01       		.byte	0x1
 11577 0f04 B403     		.2byte	0x3b4
 11578 0f06 81000000 		.4byte	0x81
 11579 0f0a 02       		.uleb128 0x2
 11580 0f0b 91       		.byte	0x91
 11581 0f0c 77       		.sleb128 -9
 11582 0f0d 20       		.uleb128 0x20
 11583 0f0e 8C060000 		.4byte	.LASF196
 11584 0f12 01       		.byte	0x1
 11585 0f13 B403     		.2byte	0x3b4
 11586 0f15 4C0E0000 		.4byte	0xe4c
 11587 0f19 02       		.uleb128 0x2
 11588 0f1a 91       		.byte	0x91
 11589 0f1b 70       		.sleb128 -16
 11590 0f1c 20       		.uleb128 0x20
 11591 0f1d BA100000 		.4byte	.LASF197
 11592 0f21 01       		.byte	0x1
 11593 0f22 B403     		.2byte	0x3b4
 11594 0f24 4C0E0000 		.4byte	0xe4c
 11595 0f28 02       		.uleb128 0x2
 11596 0f29 91       		.byte	0x91
 11597 0f2a 6C       		.sleb128 -20
 11598 0f2b 20       		.uleb128 0x20
 11599 0f2c D7030000 		.4byte	.LASF199
 11600 0f30 01       		.byte	0x1
 11601 0f31 B503     		.2byte	0x3b5
 11602 0f33 BD000000 		.4byte	0xbd
 11603 0f37 02       		.uleb128 0x2
 11604 0f38 91       		.byte	0x91
 11605 0f39 68       		.sleb128 -24
 11606 0f3a 20       		.uleb128 0x20
 11607 0f3b E1030000 		.4byte	.LASF200
 11608 0f3f 01       		.byte	0x1
 11609 0f40 B503     		.2byte	0x3b5
 11610 0f42 BD000000 		.4byte	0xbd
 11611 0f46 02       		.uleb128 0x2
 11612 0f47 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 256


 11613 0f48 00       		.sleb128 0
 11614 0f49 1B       		.uleb128 0x1b
 11615 0f4a 390C0000 		.4byte	.LASF209
 11616 0f4e 01       		.byte	0x1
 11617 0f4f B803     		.2byte	0x3b8
 11618 0f51 81000000 		.4byte	0x81
 11619 0f55 05       		.uleb128 0x5
 11620 0f56 03       		.byte	0x3
 11621 0f57 8E000000 		.4byte	fsm_state.10528
 11622 0f5b 00       		.byte	0
 11623 0f5c 24       		.uleb128 0x24
 11624 0f5d D9050000 		.4byte	.LASF211
 11625 0f61 01       		.byte	0x1
 11626 0f62 EA03     		.2byte	0x3ea
 11627 0f64 00000000 		.4byte	.LFB71
 11628 0f68 08070000 		.4byte	.LFE71-.LFB71
 11629 0f6c 01       		.uleb128 0x1
 11630 0f6d 9C       		.byte	0x9c
 11631 0f6e 13110000 		.4byte	0x1113
 11632 0f72 1B       		.uleb128 0x1b
 11633 0f73 20010000 		.4byte	.LASF212
 11634 0f77 01       		.byte	0x1
 11635 0f78 EC03     		.2byte	0x3ec
 11636 0f7a BD000000 		.4byte	0xbd
 11637 0f7e 02       		.uleb128 0x2
 11638 0f7f 91       		.byte	0x91
 11639 0f80 74       		.sleb128 -12
 11640 0f81 1B       		.uleb128 0x1b
 11641 0f82 BB0B0000 		.4byte	.LASF213
 11642 0f86 01       		.byte	0x1
 11643 0f87 ED03     		.2byte	0x3ed
 11644 0f89 BD000000 		.4byte	0xbd
 11645 0f8d 03       		.uleb128 0x3
 11646 0f8e 91       		.byte	0x91
 11647 0f8f B07F     		.sleb128 -80
 11648 0f91 1B       		.uleb128 0x1b
 11649 0f92 960F0000 		.4byte	.LASF214
 11650 0f96 01       		.byte	0x1
 11651 0f97 EE03     		.2byte	0x3ee
 11652 0f99 BD000000 		.4byte	0xbd
 11653 0f9d 03       		.uleb128 0x3
 11654 0f9e 91       		.byte	0x91
 11655 0f9f AC7F     		.sleb128 -84
 11656 0fa1 1B       		.uleb128 0x1b
 11657 0fa2 0E0B0000 		.4byte	.LASF215
 11658 0fa6 01       		.byte	0x1
 11659 0fa7 EF03     		.2byte	0x3ef
 11660 0fa9 BD000000 		.4byte	0xbd
 11661 0fad 02       		.uleb128 0x2
 11662 0fae 91       		.byte	0x91
 11663 0faf 70       		.sleb128 -16
 11664 0fb0 1B       		.uleb128 0x1b
 11665 0fb1 FC0B0000 		.4byte	.LASF190
 11666 0fb5 01       		.byte	0x1
 11667 0fb6 F103     		.2byte	0x3f1
 11668 0fb8 81000000 		.4byte	0x81
 11669 0fbc 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 257


 11670 0fbd 91       		.byte	0x91
 11671 0fbe 6F       		.sleb128 -17
 11672 0fbf 1B       		.uleb128 0x1b
 11673 0fc0 46030000 		.4byte	.LASF216
 11674 0fc4 01       		.byte	0x1
 11675 0fc5 F303     		.2byte	0x3f3
 11676 0fc7 520E0000 		.4byte	0xe52
 11677 0fcb 02       		.uleb128 0x2
 11678 0fcc 91       		.byte	0x91
 11679 0fcd 68       		.sleb128 -24
 11680 0fce 1B       		.uleb128 0x1b
 11681 0fcf BA020000 		.4byte	.LASF217
 11682 0fd3 01       		.byte	0x1
 11683 0fd4 F403     		.2byte	0x3f4
 11684 0fd6 81000000 		.4byte	0x81
 11685 0fda 02       		.uleb128 0x2
 11686 0fdb 91       		.byte	0x91
 11687 0fdc 67       		.sleb128 -25
 11688 0fdd 1D       		.uleb128 0x1d
 11689 0fde 6B5F7000 		.ascii	"k_p\000"
 11690 0fe2 01       		.byte	0x1
 11691 0fe3 F603     		.2byte	0x3f6
 11692 0fe5 BD000000 		.4byte	0xbd
 11693 0fe9 02       		.uleb128 0x2
 11694 0fea 91       		.byte	0x91
 11695 0feb 60       		.sleb128 -32
 11696 0fec 1D       		.uleb128 0x1d
 11697 0fed 6B5F6900 		.ascii	"k_i\000"
 11698 0ff1 01       		.byte	0x1
 11699 0ff2 F703     		.2byte	0x3f7
 11700 0ff4 BD000000 		.4byte	0xbd
 11701 0ff8 02       		.uleb128 0x2
 11702 0ff9 91       		.byte	0x91
 11703 0ffa 5C       		.sleb128 -36
 11704 0ffb 1D       		.uleb128 0x1d
 11705 0ffc 6B5F6400 		.ascii	"k_d\000"
 11706 1000 01       		.byte	0x1
 11707 1001 F803     		.2byte	0x3f8
 11708 1003 BD000000 		.4byte	0xbd
 11709 1007 02       		.uleb128 0x2
 11710 1008 91       		.byte	0x91
 11711 1009 58       		.sleb128 -40
 11712 100a 1B       		.uleb128 0x1b
 11713 100b C10C0000 		.4byte	.LASF72
 11714 100f 01       		.byte	0x1
 11715 1010 FA03     		.2byte	0x3fa
 11716 1012 BD000000 		.4byte	0xbd
 11717 1016 02       		.uleb128 0x2
 11718 1017 91       		.byte	0x91
 11719 1018 54       		.sleb128 -44
 11720 1019 1B       		.uleb128 0x1b
 11721 101a 79050000 		.4byte	.LASF73
 11722 101e 01       		.byte	0x1
 11723 101f FB03     		.2byte	0x3fb
 11724 1021 BD000000 		.4byte	0xbd
 11725 1025 02       		.uleb128 0x2
 11726 1026 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 258


 11727 1027 50       		.sleb128 -48
 11728 1028 1B       		.uleb128 0x1b
 11729 1029 61050000 		.4byte	.LASF74
 11730 102d 01       		.byte	0x1
 11731 102e FC03     		.2byte	0x3fc
 11732 1030 BD000000 		.4byte	0xbd
 11733 1034 02       		.uleb128 0x2
 11734 1035 91       		.byte	0x91
 11735 1036 4C       		.sleb128 -52
 11736 1037 1B       		.uleb128 0x1b
 11737 1038 6F0F0000 		.4byte	.LASF75
 11738 103c 01       		.byte	0x1
 11739 103d FE03     		.2byte	0x3fe
 11740 103f BD000000 		.4byte	0xbd
 11741 1043 02       		.uleb128 0x2
 11742 1044 91       		.byte	0x91
 11743 1045 48       		.sleb128 -56
 11744 1046 1B       		.uleb128 0x1b
 11745 1047 15060000 		.4byte	.LASF76
 11746 104b 01       		.byte	0x1
 11747 104c FF03     		.2byte	0x3ff
 11748 104e BD000000 		.4byte	0xbd
 11749 1052 02       		.uleb128 0x2
 11750 1053 91       		.byte	0x91
 11751 1054 44       		.sleb128 -60
 11752 1055 1B       		.uleb128 0x1b
 11753 1056 A20E0000 		.4byte	.LASF77
 11754 105a 01       		.byte	0x1
 11755 105b 0004     		.2byte	0x400
 11756 105d BD000000 		.4byte	0xbd
 11757 1061 02       		.uleb128 0x2
 11758 1062 91       		.byte	0x91
 11759 1063 40       		.sleb128 -64
 11760 1064 1B       		.uleb128 0x1b
 11761 1065 23060000 		.4byte	.LASF78
 11762 1069 01       		.byte	0x1
 11763 106a 0204     		.2byte	0x402
 11764 106c BD000000 		.4byte	0xbd
 11765 1070 03       		.uleb128 0x3
 11766 1071 91       		.byte	0x91
 11767 1072 BC7F     		.sleb128 -68
 11768 1074 1B       		.uleb128 0x1b
 11769 1075 5D070000 		.4byte	.LASF79
 11770 1079 01       		.byte	0x1
 11771 107a 0304     		.2byte	0x403
 11772 107c BD000000 		.4byte	0xbd
 11773 1080 03       		.uleb128 0x3
 11774 1081 91       		.byte	0x91
 11775 1082 B87F     		.sleb128 -72
 11776 1084 1B       		.uleb128 0x1b
 11777 1085 BB110000 		.4byte	.LASF80
 11778 1089 01       		.byte	0x1
 11779 108a 0404     		.2byte	0x404
 11780 108c BD000000 		.4byte	0xbd
 11781 1090 03       		.uleb128 0x3
 11782 1091 91       		.byte	0x91
 11783 1092 B47F     		.sleb128 -76
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 259


 11784 1094 1B       		.uleb128 0x1b
 11785 1095 F0050000 		.4byte	.LASF218
 11786 1099 01       		.byte	0x1
 11787 109a 0804     		.2byte	0x408
 11788 109c BD000000 		.4byte	0xbd
 11789 10a0 05       		.uleb128 0x5
 11790 10a1 03       		.byte	0x3
 11791 10a2 90000000 		.4byte	pos_error_sum.10555
 11792 10a6 1B       		.uleb128 0x1b
 11793 10a7 1F040000 		.4byte	.LASF219
 11794 10ab 01       		.byte	0x1
 11795 10ac 0904     		.2byte	0x409
 11796 10ae BD000000 		.4byte	0xbd
 11797 10b2 05       		.uleb128 0x5
 11798 10b3 03       		.byte	0x3
 11799 10b4 9C000000 		.4byte	curr_error_sum.10556
 11800 10b8 1B       		.uleb128 0x1b
 11801 10b9 660B0000 		.4byte	.LASF220
 11802 10bd 01       		.byte	0x1
 11803 10be 0B04     		.2byte	0x40b
 11804 10c0 BD000000 		.4byte	0xbd
 11805 10c4 05       		.uleb128 0x5
 11806 10c5 03       		.byte	0x3
 11807 10c6 94000000 		.4byte	prev_pos_err.10557
 11808 10ca 1B       		.uleb128 0x1b
 11809 10cb A00C0000 		.4byte	.LASF221
 11810 10cf 01       		.byte	0x1
 11811 10d0 0C04     		.2byte	0x40c
 11812 10d2 BD000000 		.4byte	0xbd
 11813 10d6 05       		.uleb128 0x5
 11814 10d7 03       		.byte	0x3
 11815 10d8 A0000000 		.4byte	prev_curr_err.10558
 11816 10dc 1B       		.uleb128 0x1b
 11817 10dd 050F0000 		.4byte	.LASF222
 11818 10e1 01       		.byte	0x1
 11819 10e2 0D04     		.2byte	0x40d
 11820 10e4 BD000000 		.4byte	0xbd
 11821 10e8 05       		.uleb128 0x5
 11822 10e9 03       		.byte	0x3
 11823 10ea A4000000 		.4byte	prev_pwm.10559
 11824 10ee 1B       		.uleb128 0x1b
 11825 10ef 7F050000 		.4byte	.LASF223
 11826 10f3 01       		.byte	0x1
 11827 10f4 0F04     		.2byte	0x40f
 11828 10f6 81000000 		.4byte	0x81
 11829 10fa 05       		.uleb128 0x5
 11830 10fb 03       		.byte	0x3
 11831 10fc 98000000 		.4byte	motor_dir.10560
 11832 1100 1B       		.uleb128 0x1b
 11833 1101 48060000 		.4byte	.LASF224
 11834 1105 01       		.byte	0x1
 11835 1106 1004     		.2byte	0x410
 11836 1108 99000000 		.4byte	0x99
 11837 110c 05       		.uleb128 0x5
 11838 110d 03       		.byte	0x3
 11839 110e A8000000 		.4byte	position_counter.10561
 11840 1112 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 260


 11841 1113 1A       		.uleb128 0x1a
 11842 1114 2B050000 		.4byte	.LASF225
 11843 1118 01       		.byte	0x1
 11844 1119 1A05     		.2byte	0x51a
 11845 111b 00000000 		.4byte	.LFB72
 11846 111f 40080000 		.4byte	.LFE72-.LFB72
 11847 1123 01       		.uleb128 0x1
 11848 1124 9C       		.byte	0x9c
 11849 1125 CC120000 		.4byte	0x12cc
 11850 1129 25       		.uleb128 0x25
 11851 112a 69647800 		.ascii	"idx\000"
 11852 112e 01       		.byte	0x1
 11853 112f 1A05     		.2byte	0x51a
 11854 1131 81000000 		.4byte	0x81
 11855 1135 03       		.uleb128 0x3
 11856 1136 91       		.byte	0x91
 11857 1137 A77F     		.sleb128 -89
 11858 1139 1B       		.uleb128 0x1b
 11859 113a 20010000 		.4byte	.LASF212
 11860 113e 01       		.byte	0x1
 11861 113f 1C05     		.2byte	0x51c
 11862 1141 BD000000 		.4byte	0xbd
 11863 1145 02       		.uleb128 0x2
 11864 1146 91       		.byte	0x91
 11865 1147 6C       		.sleb128 -20
 11866 1148 1B       		.uleb128 0x1b
 11867 1149 BB0B0000 		.4byte	.LASF213
 11868 114d 01       		.byte	0x1
 11869 114e 1D05     		.2byte	0x51d
 11870 1150 BD000000 		.4byte	0xbd
 11871 1154 03       		.uleb128 0x3
 11872 1155 91       		.byte	0x91
 11873 1156 AC7F     		.sleb128 -84
 11874 1158 1B       		.uleb128 0x1b
 11875 1159 960F0000 		.4byte	.LASF214
 11876 115d 01       		.byte	0x1
 11877 115e 1E05     		.2byte	0x51e
 11878 1160 BD000000 		.4byte	0xbd
 11879 1164 03       		.uleb128 0x3
 11880 1165 91       		.byte	0x91
 11881 1166 A87F     		.sleb128 -88
 11882 1168 1B       		.uleb128 0x1b
 11883 1169 0E0B0000 		.4byte	.LASF215
 11884 116d 01       		.byte	0x1
 11885 116e 1F05     		.2byte	0x51f
 11886 1170 BD000000 		.4byte	0xbd
 11887 1174 02       		.uleb128 0x2
 11888 1175 91       		.byte	0x91
 11889 1176 68       		.sleb128 -24
 11890 1177 1D       		.uleb128 0x1d
 11891 1178 4D4F5400 		.ascii	"MOT\000"
 11892 117c 01       		.byte	0x1
 11893 117d 2105     		.2byte	0x521
 11894 117f 520E0000 		.4byte	0xe52
 11895 1183 02       		.uleb128 0x2
 11896 1184 91       		.byte	0x91
 11897 1185 64       		.sleb128 -28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 261


 11898 1186 1B       		.uleb128 0x1b
 11899 1187 85100000 		.4byte	.LASF201
 11900 118b 01       		.byte	0x1
 11901 118c 2205     		.2byte	0x522
 11902 118e 81000000 		.4byte	0x81
 11903 1192 02       		.uleb128 0x2
 11904 1193 91       		.byte	0x91
 11905 1194 63       		.sleb128 -29
 11906 1195 1D       		.uleb128 0x1d
 11907 1196 6B5F7000 		.ascii	"k_p\000"
 11908 119a 01       		.byte	0x1
 11909 119b 2405     		.2byte	0x524
 11910 119d BD000000 		.4byte	0xbd
 11911 11a1 02       		.uleb128 0x2
 11912 11a2 91       		.byte	0x91
 11913 11a3 5C       		.sleb128 -36
 11914 11a4 1D       		.uleb128 0x1d
 11915 11a5 6B5F6900 		.ascii	"k_i\000"
 11916 11a9 01       		.byte	0x1
 11917 11aa 2505     		.2byte	0x525
 11918 11ac BD000000 		.4byte	0xbd
 11919 11b0 02       		.uleb128 0x2
 11920 11b1 91       		.byte	0x91
 11921 11b2 58       		.sleb128 -40
 11922 11b3 1D       		.uleb128 0x1d
 11923 11b4 6B5F6400 		.ascii	"k_d\000"
 11924 11b8 01       		.byte	0x1
 11925 11b9 2605     		.2byte	0x526
 11926 11bb BD000000 		.4byte	0xbd
 11927 11bf 02       		.uleb128 0x2
 11928 11c0 91       		.byte	0x91
 11929 11c1 54       		.sleb128 -44
 11930 11c2 1B       		.uleb128 0x1b
 11931 11c3 C10C0000 		.4byte	.LASF72
 11932 11c7 01       		.byte	0x1
 11933 11c8 2805     		.2byte	0x528
 11934 11ca BD000000 		.4byte	0xbd
 11935 11ce 02       		.uleb128 0x2
 11936 11cf 91       		.byte	0x91
 11937 11d0 50       		.sleb128 -48
 11938 11d1 1B       		.uleb128 0x1b
 11939 11d2 79050000 		.4byte	.LASF73
 11940 11d6 01       		.byte	0x1
 11941 11d7 2905     		.2byte	0x529
 11942 11d9 BD000000 		.4byte	0xbd
 11943 11dd 02       		.uleb128 0x2
 11944 11de 91       		.byte	0x91
 11945 11df 4C       		.sleb128 -52
 11946 11e0 1B       		.uleb128 0x1b
 11947 11e1 61050000 		.4byte	.LASF74
 11948 11e5 01       		.byte	0x1
 11949 11e6 2A05     		.2byte	0x52a
 11950 11e8 BD000000 		.4byte	0xbd
 11951 11ec 02       		.uleb128 0x2
 11952 11ed 91       		.byte	0x91
 11953 11ee 48       		.sleb128 -56
 11954 11ef 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 262


 11955 11f0 6F0F0000 		.4byte	.LASF75
 11956 11f4 01       		.byte	0x1
 11957 11f5 2C05     		.2byte	0x52c
 11958 11f7 BD000000 		.4byte	0xbd
 11959 11fb 02       		.uleb128 0x2
 11960 11fc 91       		.byte	0x91
 11961 11fd 44       		.sleb128 -60
 11962 11fe 1B       		.uleb128 0x1b
 11963 11ff 15060000 		.4byte	.LASF76
 11964 1203 01       		.byte	0x1
 11965 1204 2D05     		.2byte	0x52d
 11966 1206 BD000000 		.4byte	0xbd
 11967 120a 02       		.uleb128 0x2
 11968 120b 91       		.byte	0x91
 11969 120c 40       		.sleb128 -64
 11970 120d 1B       		.uleb128 0x1b
 11971 120e A20E0000 		.4byte	.LASF77
 11972 1212 01       		.byte	0x1
 11973 1213 2E05     		.2byte	0x52e
 11974 1215 BD000000 		.4byte	0xbd
 11975 1219 03       		.uleb128 0x3
 11976 121a 91       		.byte	0x91
 11977 121b BC7F     		.sleb128 -68
 11978 121d 1B       		.uleb128 0x1b
 11979 121e 23060000 		.4byte	.LASF78
 11980 1222 01       		.byte	0x1
 11981 1223 3005     		.2byte	0x530
 11982 1225 BD000000 		.4byte	0xbd
 11983 1229 03       		.uleb128 0x3
 11984 122a 91       		.byte	0x91
 11985 122b B87F     		.sleb128 -72
 11986 122d 1B       		.uleb128 0x1b
 11987 122e 5D070000 		.4byte	.LASF79
 11988 1232 01       		.byte	0x1
 11989 1233 3105     		.2byte	0x531
 11990 1235 BD000000 		.4byte	0xbd
 11991 1239 03       		.uleb128 0x3
 11992 123a 91       		.byte	0x91
 11993 123b B47F     		.sleb128 -76
 11994 123d 1B       		.uleb128 0x1b
 11995 123e BB110000 		.4byte	.LASF80
 11996 1242 01       		.byte	0x1
 11997 1243 3205     		.2byte	0x532
 11998 1245 BD000000 		.4byte	0xbd
 11999 1249 03       		.uleb128 0x3
 12000 124a 91       		.byte	0x91
 12001 124b B07F     		.sleb128 -80
 12002 124d 1B       		.uleb128 0x1b
 12003 124e F0050000 		.4byte	.LASF218
 12004 1252 01       		.byte	0x1
 12005 1253 3605     		.2byte	0x536
 12006 1255 94020000 		.4byte	0x294
 12007 1259 05       		.uleb128 0x5
 12008 125a 03       		.byte	0x3
 12009 125b AC000000 		.4byte	pos_error_sum.10588
 12010 125f 1B       		.uleb128 0x1b
 12011 1260 1F040000 		.4byte	.LASF219
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 263


 12012 1264 01       		.byte	0x1
 12013 1265 3705     		.2byte	0x537
 12014 1267 94020000 		.4byte	0x294
 12015 126b 05       		.uleb128 0x5
 12016 126c 03       		.byte	0x3
 12017 126d C0000000 		.4byte	curr_error_sum.10589
 12018 1271 1B       		.uleb128 0x1b
 12019 1272 660B0000 		.4byte	.LASF220
 12020 1276 01       		.byte	0x1
 12021 1277 3905     		.2byte	0x539
 12022 1279 94020000 		.4byte	0x294
 12023 127d 05       		.uleb128 0x5
 12024 127e 03       		.byte	0x3
 12025 127f B4000000 		.4byte	prev_pos_err.10590
 12026 1283 1B       		.uleb128 0x1b
 12027 1284 A00C0000 		.4byte	.LASF221
 12028 1288 01       		.byte	0x1
 12029 1289 3A05     		.2byte	0x53a
 12030 128b 94020000 		.4byte	0x294
 12031 128f 05       		.uleb128 0x5
 12032 1290 03       		.byte	0x3
 12033 1291 C8000000 		.4byte	prev_curr_err.10591
 12034 1295 1B       		.uleb128 0x1b
 12035 1296 050F0000 		.4byte	.LASF222
 12036 129a 01       		.byte	0x1
 12037 129b 3B05     		.2byte	0x53b
 12038 129d 94020000 		.4byte	0x294
 12039 12a1 05       		.uleb128 0x5
 12040 12a2 03       		.byte	0x3
 12041 12a3 D0000000 		.4byte	prev_pwm.10592
 12042 12a7 1B       		.uleb128 0x1b
 12043 12a8 7F050000 		.4byte	.LASF223
 12044 12ac 01       		.byte	0x1
 12045 12ad 3D05     		.2byte	0x53d
 12046 12af EA060000 		.4byte	0x6ea
 12047 12b3 05       		.uleb128 0x5
 12048 12b4 03       		.byte	0x3
 12049 12b5 BC000000 		.4byte	motor_dir.10593
 12050 12b9 1B       		.uleb128 0x1b
 12051 12ba 48060000 		.4byte	.LASF224
 12052 12be 01       		.byte	0x1
 12053 12bf 3E05     		.2byte	0x53e
 12054 12c1 6F030000 		.4byte	0x36f
 12055 12c5 05       		.uleb128 0x5
 12056 12c6 03       		.byte	0x3
 12057 12c7 D8000000 		.4byte	position_counter.10594
 12058 12cb 00       		.byte	0
 12059 12cc 1A       		.uleb128 0x1a
 12060 12cd 55030000 		.4byte	.LASF226
 12061 12d1 01       		.byte	0x1
 12062 12d2 6806     		.2byte	0x668
 12063 12d4 00000000 		.4byte	.LFB73
 12064 12d8 1C080000 		.4byte	.LFE73-.LFB73
 12065 12dc 01       		.uleb128 0x1
 12066 12dd 9C       		.byte	0x9c
 12067 12de 66140000 		.4byte	0x1466
 12068 12e2 20       		.uleb128 0x20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 264


 12069 12e3 9B000000 		.4byte	.LASF227
 12070 12e7 01       		.byte	0x1
 12071 12e8 6806     		.2byte	0x668
 12072 12ea 81000000 		.4byte	0x81
 12073 12ee 03       		.uleb128 0x3
 12074 12ef 91       		.byte	0x91
 12075 12f0 BF7F     		.sleb128 -65
 12076 12f2 20       		.uleb128 0x20
 12077 12f3 FA0A0000 		.4byte	.LASF228
 12078 12f7 01       		.byte	0x1
 12079 12f8 6806     		.2byte	0x668
 12080 12fa 81000000 		.4byte	0x81
 12081 12fe 03       		.uleb128 0x3
 12082 12ff 91       		.byte	0x91
 12083 1300 BE7F     		.sleb128 -66
 12084 1302 1B       		.uleb128 0x1b
 12085 1303 18070000 		.4byte	.LASF229
 12086 1307 01       		.byte	0x1
 12087 1308 6A06     		.2byte	0x66a
 12088 130a 81000000 		.4byte	0x81
 12089 130e 02       		.uleb128 0x2
 12090 130f 91       		.byte	0x91
 12091 1310 67       		.sleb128 -25
 12092 1311 1D       		.uleb128 0x1d
 12093 1312 6A6A00   		.ascii	"jj\000"
 12094 1315 01       		.byte	0x1
 12095 1316 6D06     		.2byte	0x66d
 12096 1318 81000000 		.4byte	0x81
 12097 131c 02       		.uleb128 0x2
 12098 131d 91       		.byte	0x91
 12099 131e 66       		.sleb128 -26
 12100 131f 1B       		.uleb128 0x1b
 12101 1320 2E030000 		.4byte	.LASF230
 12102 1324 01       		.byte	0x1
 12103 1325 6F06     		.2byte	0x66f
 12104 1327 66140000 		.4byte	0x1466
 12105 132b 02       		.uleb128 0x2
 12106 132c 91       		.byte	0x91
 12107 132d 40       		.sleb128 -64
 12108 132e 1B       		.uleb128 0x1b
 12109 132f F60F0000 		.4byte	.LASF231
 12110 1333 01       		.byte	0x1
 12111 1334 7006     		.2byte	0x670
 12112 1336 B1000000 		.4byte	0xb1
 12113 133a 02       		.uleb128 0x2
 12114 133b 91       		.byte	0x91
 12115 133c 64       		.sleb128 -28
 12116 133d 1B       		.uleb128 0x1b
 12117 133e 8B0C0000 		.4byte	.LASF232
 12118 1342 01       		.byte	0x1
 12119 1343 7106     		.2byte	0x671
 12120 1345 BD000000 		.4byte	0xbd
 12121 1349 02       		.uleb128 0x2
 12122 134a 91       		.byte	0x91
 12123 134b 54       		.sleb128 -44
 12124 134c 1B       		.uleb128 0x1b
 12125 134d A90E0000 		.4byte	.LASF233
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 265


 12126 1351 01       		.byte	0x1
 12127 1352 7206     		.2byte	0x672
 12128 1354 BD000000 		.4byte	0xbd
 12129 1358 02       		.uleb128 0x2
 12130 1359 91       		.byte	0x91
 12131 135a 60       		.sleb128 -32
 12132 135b 1B       		.uleb128 0x1b
 12133 135c 68040000 		.4byte	.LASF234
 12134 1360 01       		.byte	0x1
 12135 1361 7306     		.2byte	0x673
 12136 1363 BD000000 		.4byte	0xbd
 12137 1367 02       		.uleb128 0x2
 12138 1368 91       		.byte	0x91
 12139 1369 4C       		.sleb128 -52
 12140 136a 1B       		.uleb128 0x1b
 12141 136b 840E0000 		.4byte	.LASF235
 12142 136f 01       		.byte	0x1
 12143 1370 7406     		.2byte	0x674
 12144 1372 BD000000 		.4byte	0xbd
 12145 1376 02       		.uleb128 0x2
 12146 1377 91       		.byte	0x91
 12147 1378 50       		.sleb128 -48
 12148 1379 1B       		.uleb128 0x1b
 12149 137a 730B0000 		.4byte	.LASF236
 12150 137e 01       		.byte	0x1
 12151 137f 7506     		.2byte	0x675
 12152 1381 A5000000 		.4byte	0xa5
 12153 1385 02       		.uleb128 0x2
 12154 1386 91       		.byte	0x91
 12155 1387 5F       		.sleb128 -33
 12156 1388 1B       		.uleb128 0x1b
 12157 1389 060C0000 		.4byte	.LASF237
 12158 138d 01       		.byte	0x1
 12159 138e 7706     		.2byte	0x677
 12160 1390 76140000 		.4byte	0x1476
 12161 1394 05       		.uleb128 0x5
 12162 1395 03       		.byte	0x3
 12163 1396 E0000000 		.4byte	last_value_encoder.10617
 12164 139a 1B       		.uleb128 0x1b
 12165 139b DA060000 		.4byte	.LASF238
 12166 139f 01       		.byte	0x1
 12167 13a0 7806     		.2byte	0x678
 12168 13a2 76140000 		.4byte	0x1476
 12169 13a6 05       		.uleb128 0x5
 12170 13a7 03       		.byte	0x3
 12171 13a8 F8000000 		.4byte	comp_value_encoder.10618
 12172 13ac 1B       		.uleb128 0x1b
 12173 13ad 69030000 		.4byte	.LASF239
 12174 13b1 01       		.byte	0x1
 12175 13b2 7906     		.2byte	0x679
 12176 13b4 8C140000 		.4byte	0x148c
 12177 13b8 05       		.uleb128 0x5
 12178 13b9 03       		.byte	0x3
 12179 13ba 10010000 		.4byte	error.10619
 12180 13be 1B       		.uleb128 0x1b
 12181 13bf 620E0000 		.4byte	.LASF240
 12182 13c3 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 266


 12183 13c4 7B06     		.2byte	0x67b
 12184 13c6 EA060000 		.4byte	0x6ea
 12185 13ca 05       		.uleb128 0x5
 12186 13cb 03       		.byte	0x3
 12187 13cc 04000000 		.4byte	only_first_time.10620
 12188 13d0 1B       		.uleb128 0x1b
 12189 13d1 E9020000 		.4byte	.LASF241
 12190 13d5 01       		.byte	0x1
 12191 13d6 7C06     		.2byte	0x67c
 12192 13d8 EA060000 		.4byte	0x6ea
 12193 13dc 05       		.uleb128 0x5
 12194 13dd 03       		.byte	0x3
 12195 13de 68010000 		.4byte	safe_startup_motor_activation.10621
 12196 13e2 1B       		.uleb128 0x1b
 12197 13e3 7B000000 		.4byte	.LASF242
 12198 13e7 01       		.byte	0x1
 12199 13e8 7D06     		.2byte	0x67d
 12200 13ea EA060000 		.4byte	0x6ea
 12201 13ee 05       		.uleb128 0x5
 12202 13ef 03       		.byte	0x3
 12203 13f0 64010000 		.4byte	one_time_execute.10622
 12204 13f4 1B       		.uleb128 0x1b
 12205 13f5 2A0A0000 		.4byte	.LASF243
 12206 13f9 01       		.byte	0x1
 12207 13fa 7E06     		.2byte	0x67e
 12208 13fc 6F030000 		.4byte	0x36f
 12209 1400 05       		.uleb128 0x5
 12210 1401 03       		.byte	0x3
 12211 1402 6C010000 		.4byte	count_startup_motor.10623
 12212 1406 1B       		.uleb128 0x1b
 12213 1407 90030000 		.4byte	.LASF244
 12214 140b 01       		.byte	0x1
 12215 140c 7F06     		.2byte	0x67f
 12216 140e EA060000 		.4byte	0x6ea
 12217 1412 05       		.uleb128 0x5
 12218 1413 03       		.byte	0x3
 12219 1414 60010000 		.4byte	pos_reconstruct.10624
 12220 1418 1B       		.uleb128 0x1b
 12221 1419 4B090000 		.4byte	.LASF245
 12222 141d 01       		.byte	0x1
 12223 141e 8106     		.2byte	0x681
 12224 1420 76140000 		.4byte	0x1476
 12225 1424 05       		.uleb128 0x5
 12226 1425 03       		.byte	0x3
 12227 1426 18010000 		.4byte	v_value.10625
 12228 142a 1B       		.uleb128 0x1b
 12229 142b B2110000 		.4byte	.LASF246
 12230 142f 01       		.byte	0x1
 12231 1430 8206     		.2byte	0x682
 12232 1432 76140000 		.4byte	0x1476
 12233 1436 05       		.uleb128 0x5
 12234 1437 03       		.byte	0x3
 12235 1438 30010000 		.4byte	vv_value.10626
 12236 143c 1B       		.uleb128 0x1b
 12237 143d 6E010000 		.4byte	.LASF247
 12238 1441 01       		.byte	0x1
 12239 1442 8306     		.2byte	0x683
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 267


 12240 1444 76140000 		.4byte	0x1476
 12241 1448 05       		.uleb128 0x5
 12242 1449 03       		.byte	0x3
 12243 144a 48010000 		.4byte	vvv_value.10627
 12244 144e 1E       		.uleb128 0x1e
 12245 144f 94000000 		.4byte	.LBB10
 12246 1453 6A000000 		.4byte	.LBE10-.LBB10
 12247 1457 1D       		.uleb128 0x1d
 12248 1458 6A00     		.ascii	"j\000"
 12249 145a 01       		.byte	0x1
 12250 145b 9306     		.2byte	0x693
 12251 145d 68000000 		.4byte	0x68
 12252 1461 02       		.uleb128 0x2
 12253 1462 91       		.byte	0x91
 12254 1463 58       		.sleb128 -40
 12255 1464 00       		.byte	0
 12256 1465 00       		.byte	0
 12257 1466 07       		.uleb128 0x7
 12258 1467 99000000 		.4byte	0x99
 12259 146b 76140000 		.4byte	0x1476
 12260 146f 08       		.uleb128 0x8
 12261 1470 0E010000 		.4byte	0x10e
 12262 1474 02       		.byte	0x2
 12263 1475 00       		.byte	0
 12264 1476 07       		.uleb128 0x7
 12265 1477 BD000000 		.4byte	0xbd
 12266 147b 8C140000 		.4byte	0x148c
 12267 147f 08       		.uleb128 0x8
 12268 1480 0E010000 		.4byte	0x10e
 12269 1484 01       		.byte	0x1
 12270 1485 08       		.uleb128 0x8
 12271 1486 0E010000 		.4byte	0x10e
 12272 148a 02       		.byte	0x2
 12273 148b 00       		.byte	0
 12274 148c 07       		.uleb128 0x7
 12275 148d 81000000 		.4byte	0x81
 12276 1491 A2140000 		.4byte	0x14a2
 12277 1495 08       		.uleb128 0x8
 12278 1496 0E010000 		.4byte	0x10e
 12279 149a 01       		.byte	0x1
 12280 149b 08       		.uleb128 0x8
 12281 149c 0E010000 		.4byte	0x10e
 12282 14a0 02       		.byte	0x2
 12283 14a1 00       		.byte	0
 12284 14a2 24       		.uleb128 0x24
 12285 14a3 5F0D0000 		.4byte	.LASF248
 12286 14a7 01       		.byte	0x1
 12287 14a8 3B07     		.2byte	0x73b
 12288 14aa 00000000 		.4byte	.LFB74
 12289 14ae 98110000 		.4byte	.LFE74-.LFB74
 12290 14b2 01       		.uleb128 0x1
 12291 14b3 9C       		.byte	0x9c
 12292 14b4 7C150000 		.4byte	0x157c
 12293 14b8 1B       		.uleb128 0x1b
 12294 14b9 FF0C0000 		.4byte	.LASF249
 12295 14bd 01       		.byte	0x1
 12296 14be 4F07     		.2byte	0x74f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 268


 12297 14c0 BD000000 		.4byte	0xbd
 12298 14c4 02       		.uleb128 0x2
 12299 14c5 91       		.byte	0x91
 12300 14c6 64       		.sleb128 -28
 12301 14c7 1B       		.uleb128 0x1b
 12302 14c8 460E0000 		.4byte	.LASF250
 12303 14cc 01       		.byte	0x1
 12304 14cd 5107     		.2byte	0x751
 12305 14cf 8D000000 		.4byte	0x8d
 12306 14d3 05       		.uleb128 0x5
 12307 14d4 03       		.byte	0x3
 12308 14d5 7C010000 		.4byte	emg_counter_1.10644
 12309 14d9 1B       		.uleb128 0x1b
 12310 14da 540E0000 		.4byte	.LASF251
 12311 14de 01       		.byte	0x1
 12312 14df 5207     		.2byte	0x752
 12313 14e1 8D000000 		.4byte	0x8d
 12314 14e5 05       		.uleb128 0x5
 12315 14e6 03       		.byte	0x3
 12316 14e7 7E010000 		.4byte	emg_counter_2.10645
 12317 14eb 1B       		.uleb128 0x1b
 12318 14ec 32020000 		.4byte	.LASF252
 12319 14f0 01       		.byte	0x1
 12320 14f1 5307     		.2byte	0x753
 12321 14f3 8D000000 		.4byte	0x8d
 12322 14f7 05       		.uleb128 0x5
 12323 14f8 03       		.byte	0x3
 12324 14f9 84010000 		.4byte	UD_counter.10646
 12325 14fd 1B       		.uleb128 0x1b
 12326 14fe 85030000 		.4byte	.LASF253
 12327 1502 01       		.byte	0x1
 12328 1503 5407     		.2byte	0x754
 12329 1505 8D000000 		.4byte	0x8d
 12330 1509 05       		.uleb128 0x5
 12331 150a 03       		.byte	0x3
 12332 150b 8C010000 		.4byte	LR_counter.10647
 12333 150f 1B       		.uleb128 0x1b
 12334 1510 EC0A0000 		.4byte	.LASF254
 12335 1514 01       		.byte	0x1
 12336 1515 5507     		.2byte	0x755
 12337 1517 BD000000 		.4byte	0xbd
 12338 151b 05       		.uleb128 0x5
 12339 151c 03       		.byte	0x3
 12340 151d 80010000 		.4byte	UD_mean_value.10648
 12341 1521 1B       		.uleb128 0x1b
 12342 1522 0B110000 		.4byte	.LASF255
 12343 1526 01       		.byte	0x1
 12344 1527 5607     		.2byte	0x756
 12345 1529 BD000000 		.4byte	0xbd
 12346 152d 05       		.uleb128 0x5
 12347 152e 03       		.byte	0x3
 12348 152f 88010000 		.4byte	LR_mean_value.10649
 12349 1533 1B       		.uleb128 0x1b
 12350 1534 71020000 		.4byte	.LASF256
 12351 1538 01       		.byte	0x1
 12352 1539 5707     		.2byte	0x757
 12353 153b 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 269


 12354 153f 05       		.uleb128 0x5
 12355 1540 03       		.byte	0x3
 12356 1541 06000000 		.4byte	first_tension_valid.10650
 12357 1545 1B       		.uleb128 0x1b
 12358 1546 5B0A0000 		.4byte	.LASF257
 12359 154a 01       		.byte	0x1
 12360 154b 5907     		.2byte	0x759
 12361 154d 8D000000 		.4byte	0x8d
 12362 1551 05       		.uleb128 0x5
 12363 1552 03       		.byte	0x3
 12364 1553 74010000 		.4byte	count.10651
 12365 1557 1B       		.uleb128 0x1b
 12366 1558 5E010000 		.4byte	.LASF258
 12367 155c 01       		.byte	0x1
 12368 155d 5A07     		.2byte	0x75a
 12369 155f 99000000 		.4byte	0x99
 12370 1563 05       		.uleb128 0x5
 12371 1564 03       		.byte	0x3
 12372 1565 78010000 		.4byte	v_count.10652
 12373 1569 1D       		.uleb128 0x1d
 12374 156a 69647800 		.ascii	"idx\000"
 12375 156e 01       		.byte	0x1
 12376 156f 5B07     		.2byte	0x75b
 12377 1571 81000000 		.4byte	0x81
 12378 1575 05       		.uleb128 0x5
 12379 1576 03       		.byte	0x3
 12380 1577 76010000 		.4byte	idx.10653
 12381 157b 00       		.byte	0
 12382 157c 26       		.uleb128 0x26
 12383 157d 2A0D0000 		.4byte	.LASF259
 12384 1581 01       		.byte	0x1
 12385 1582 A909     		.2byte	0x9a9
 12386 1584 00000000 		.4byte	.LFB75
 12387 1588 F4000000 		.4byte	.LFE75-.LFB75
 12388 158c 01       		.uleb128 0x1
 12389 158d 9C       		.byte	0x9c
 12390 158e AA150000 		.4byte	0x15aa
 12391 1592 1E       		.uleb128 0x1e
 12392 1593 06000000 		.4byte	.LBB11
 12393 1597 D0000000 		.4byte	.LBE11-.LBB11
 12394 159b 1D       		.uleb128 0x1d
 12395 159c 6900     		.ascii	"i\000"
 12396 159e 01       		.byte	0x1
 12397 159f AB09     		.2byte	0x9ab
 12398 15a1 81000000 		.4byte	0x81
 12399 15a5 02       		.uleb128 0x2
 12400 15a6 91       		.byte	0x91
 12401 15a7 77       		.sleb128 -9
 12402 15a8 00       		.byte	0
 12403 15a9 00       		.byte	0
 12404 15aa 22       		.uleb128 0x22
 12405 15ab A0030000 		.4byte	.LASF260
 12406 15af 01       		.byte	0x1
 12407 15b0 C509     		.2byte	0x9c5
 12408 15b2 00000000 		.4byte	.LFB76
 12409 15b6 78000000 		.4byte	.LFE76-.LFB76
 12410 15ba 01       		.uleb128 0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 270


 12411 15bb 9C       		.byte	0x9c
 12412 15bc FD150000 		.4byte	0x15fd
 12413 15c0 20       		.uleb128 0x20
 12414 15c1 7C0B0000 		.4byte	.LASF261
 12415 15c5 01       		.byte	0x1
 12416 15c6 C509     		.2byte	0x9c5
 12417 15c8 81000000 		.4byte	0x81
 12418 15cc 02       		.uleb128 0x2
 12419 15cd 91       		.byte	0x91
 12420 15ce 6F       		.sleb128 -17
 12421 15cf 1B       		.uleb128 0x1b
 12422 15d0 18070000 		.4byte	.LASF229
 12423 15d4 01       		.byte	0x1
 12424 15d5 C709     		.2byte	0x9c7
 12425 15d7 81000000 		.4byte	0x81
 12426 15db 02       		.uleb128 0x2
 12427 15dc 91       		.byte	0x91
 12428 15dd 73       		.sleb128 -13
 12429 15de 1B       		.uleb128 0x1b
 12430 15df F00B0000 		.4byte	.LASF262
 12431 15e3 01       		.byte	0x1
 12432 15e4 C809     		.2byte	0x9c8
 12433 15e6 8D000000 		.4byte	0x8d
 12434 15ea 02       		.uleb128 0x2
 12435 15eb 91       		.byte	0x91
 12436 15ec 76       		.sleb128 -10
 12437 15ed 1B       		.uleb128 0x1b
 12438 15ee 0B080000 		.4byte	.LASF263
 12439 15f2 01       		.byte	0x1
 12440 15f3 C909     		.2byte	0x9c9
 12441 15f5 8D000000 		.4byte	0x8d
 12442 15f9 02       		.uleb128 0x2
 12443 15fa 91       		.byte	0x91
 12444 15fb 74       		.sleb128 -12
 12445 15fc 00       		.byte	0
 12446 15fd 24       		.uleb128 0x24
 12447 15fe 88080000 		.4byte	.LASF264
 12448 1602 01       		.byte	0x1
 12449 1603 D909     		.2byte	0x9d9
 12450 1605 00000000 		.4byte	.LFB77
 12451 1609 0C040000 		.4byte	.LFE77-.LFB77
 12452 160d 01       		.uleb128 0x1
 12453 160e 9C       		.byte	0x9c
 12454 160f 29170000 		.4byte	0x1729
 12455 1613 1B       		.uleb128 0x1b
 12456 1614 09000000 		.4byte	.LASF265
 12457 1618 01       		.byte	0x1
 12458 1619 DA09     		.2byte	0x9da
 12459 161b 81000000 		.4byte	0x81
 12460 161f 05       		.uleb128 0x5
 12461 1620 03       		.byte	0x3
 12462 1621 8E010000 		.4byte	pos_cycle_status.10723
 12463 1625 1B       		.uleb128 0x1b
 12464 1626 910D0000 		.4byte	.LASF266
 12465 162a 01       		.byte	0x1
 12466 162b DB09     		.2byte	0x9db
 12467 162d EA060000 		.4byte	0x6ea
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 271


 12468 1631 05       		.uleb128 0x5
 12469 1632 03       		.byte	0x3
 12470 1633 98010000 		.4byte	emg_cycle_status.10724
 12471 1637 1B       		.uleb128 0x1b
 12472 1638 B70F0000 		.4byte	.LASF267
 12473 163c 01       		.byte	0x1
 12474 163d DC09     		.2byte	0x9dc
 12475 163f 81000000 		.4byte	0x81
 12476 1643 05       		.uleb128 0x5
 12477 1644 03       		.byte	0x3
 12478 1645 9A010000 		.4byte	rest_cycle_status.10725
 12479 1649 1B       		.uleb128 0x1b
 12480 164a D2020000 		.4byte	.LASF268
 12481 164e 01       		.byte	0x1
 12482 164f DD09     		.2byte	0x9dd
 12483 1651 BD000000 		.4byte	0xbd
 12484 1655 05       		.uleb128 0x5
 12485 1656 03       		.byte	0x3
 12486 1657 08000000 		.4byte	bin_threshold.10726
 12487 165b 1B       		.uleb128 0x1b
 12488 165c B9010000 		.4byte	.LASF269
 12489 1660 01       		.byte	0x1
 12490 1661 DE09     		.2byte	0x9de
 12491 1663 BD000000 		.4byte	0xbd
 12492 1667 05       		.uleb128 0x5
 12493 1668 03       		.byte	0x3
 12494 1669 90010000 		.4byte	thr_pos.10727
 12495 166d 1B       		.uleb128 0x1b
 12496 166e 870A0000 		.4byte	.LASF270
 12497 1672 01       		.byte	0x1
 12498 1673 DE09     		.2byte	0x9de
 12499 1675 BD000000 		.4byte	0xbd
 12500 1679 05       		.uleb128 0x5
 12501 167a 03       		.byte	0x3
 12502 167b 94010000 		.4byte	max_pos.10728
 12503 167f 1D       		.uleb128 0x1d
 12504 1680 6900     		.ascii	"i\000"
 12505 1682 01       		.byte	0x1
 12506 1683 DF09     		.2byte	0x9df
 12507 1685 81000000 		.4byte	0x81
 12508 1689 02       		.uleb128 0x2
 12509 168a 91       		.byte	0x91
 12510 168b 77       		.sleb128 -9
 12511 168c 1B       		.uleb128 0x1b
 12512 168d 89050000 		.4byte	.LASF271
 12513 1691 01       		.byte	0x1
 12514 1692 DF09     		.2byte	0x9df
 12515 1694 81000000 		.4byte	0x81
 12516 1698 02       		.uleb128 0x2
 12517 1699 91       		.byte	0x91
 12518 169a 63       		.sleb128 -29
 12519 169b 1B       		.uleb128 0x1b
 12520 169c EB000000 		.4byte	.LASF272
 12521 16a0 01       		.byte	0x1
 12522 16a1 DF09     		.2byte	0x9df
 12523 16a3 81000000 		.4byte	0x81
 12524 16a7 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 272


 12525 16a8 91       		.byte	0x91
 12526 16a9 62       		.sleb128 -30
 12527 16aa 1B       		.uleb128 0x1b
 12528 16ab F30C0000 		.4byte	.LASF273
 12529 16af 01       		.byte	0x1
 12530 16b0 DF09     		.2byte	0x9df
 12531 16b2 81000000 		.4byte	0x81
 12532 16b6 02       		.uleb128 0x2
 12533 16b7 91       		.byte	0x91
 12534 16b8 61       		.sleb128 -31
 12535 16b9 1B       		.uleb128 0x1b
 12536 16ba F90C0000 		.4byte	.LASF274
 12537 16be 01       		.byte	0x1
 12538 16bf DF09     		.2byte	0x9df
 12539 16c1 81000000 		.4byte	0x81
 12540 16c5 02       		.uleb128 0x2
 12541 16c6 91       		.byte	0x91
 12542 16c7 60       		.sleb128 -32
 12543 16c8 1B       		.uleb128 0x1b
 12544 16c9 3E0D0000 		.4byte	.LASF275
 12545 16cd 01       		.byte	0x1
 12546 16ce E009     		.2byte	0x9e0
 12547 16d0 BD000000 		.4byte	0xbd
 12548 16d4 02       		.uleb128 0x2
 12549 16d5 91       		.byte	0x91
 12550 16d6 6C       		.sleb128 -20
 12551 16d7 1B       		.uleb128 0x1b
 12552 16d8 7F040000 		.4byte	.LASF276
 12553 16dc 01       		.byte	0x1
 12554 16dd E009     		.2byte	0x9e0
 12555 16df BD000000 		.4byte	0xbd
 12556 16e3 02       		.uleb128 0x2
 12557 16e4 91       		.byte	0x91
 12558 16e5 68       		.sleb128 -24
 12559 16e6 1B       		.uleb128 0x1b
 12560 16e7 8F0E0000 		.4byte	.LASF277
 12561 16eb 01       		.byte	0x1
 12562 16ec E009     		.2byte	0x9e0
 12563 16ee BD000000 		.4byte	0xbd
 12564 16f2 02       		.uleb128 0x2
 12565 16f3 91       		.byte	0x91
 12566 16f4 70       		.sleb128 -16
 12567 16f5 1B       		.uleb128 0x1b
 12568 16f6 1A040000 		.4byte	.LASF278
 12569 16fa 01       		.byte	0x1
 12570 16fb E109     		.2byte	0x9e1
 12571 16fd BD000000 		.4byte	0xbd
 12572 1701 02       		.uleb128 0x2
 12573 1702 91       		.byte	0x91
 12574 1703 64       		.sleb128 -28
 12575 1704 1B       		.uleb128 0x1b
 12576 1705 BE060000 		.4byte	.LASF279
 12577 1709 01       		.byte	0x1
 12578 170a E209     		.2byte	0x9e2
 12579 170c 99000000 		.4byte	0x99
 12580 1710 05       		.uleb128 0x5
 12581 1711 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 273


 12582 1712 9C010000 		.4byte	timer_value_s.10738
 12583 1716 1B       		.uleb128 0x1b
 12584 1717 59060000 		.4byte	.LASF280
 12585 171b 01       		.byte	0x1
 12586 171c E209     		.2byte	0x9e2
 12587 171e 99000000 		.4byte	0x99
 12588 1722 05       		.uleb128 0x5
 12589 1723 03       		.byte	0x3
 12590 1724 A0010000 		.4byte	timer_value_e.10739
 12591 1728 00       		.byte	0
 12592 1729 24       		.uleb128 0x24
 12593 172a 220B0000 		.4byte	.LASF281
 12594 172e 01       		.byte	0x1
 12595 172f 4E0A     		.2byte	0xa4e
 12596 1731 00000000 		.4byte	.LFB78
 12597 1735 08010000 		.4byte	.LFE78-.LFB78
 12598 1739 01       		.uleb128 0x1
 12599 173a 9C       		.byte	0x9c
 12600 173b AF170000 		.4byte	0x17af
 12601 173f 1B       		.uleb128 0x1b
 12602 1740 8F0F0000 		.4byte	.LASF282
 12603 1744 01       		.byte	0x1
 12604 1745 500A     		.2byte	0xa50
 12605 1747 EA000000 		.4byte	0xea
 12606 174b 02       		.uleb128 0x2
 12607 174c 91       		.byte	0x91
 12608 174d 64       		.sleb128 -28
 12609 174e 1B       		.uleb128 0x1b
 12610 174f 1F0D0000 		.4byte	.LASF283
 12611 1753 01       		.byte	0x1
 12612 1754 510A     		.2byte	0xa51
 12613 1756 81000000 		.4byte	0x81
 12614 175a 05       		.uleb128 0x5
 12615 175b 03       		.byte	0x3
 12616 175c A8010000 		.4byte	row_number.10761
 12617 1760 1B       		.uleb128 0x1b
 12618 1761 52040000 		.4byte	.LASF284
 12619 1765 01       		.byte	0x1
 12620 1766 520A     		.2byte	0xa52
 12621 1768 81000000 		.4byte	0x81
 12622 176c 02       		.uleb128 0x2
 12623 176d 91       		.byte	0x91
 12624 176e 77       		.sleb128 -9
 12625 176f 1B       		.uleb128 0x1b
 12626 1770 E10D0000 		.4byte	.LASF285
 12627 1774 01       		.byte	0x1
 12628 1775 530A     		.2byte	0xa53
 12629 1777 AF170000 		.4byte	0x17af
 12630 177b 02       		.uleb128 0x2
 12631 177c 91       		.byte	0x91
 12632 177d 70       		.sleb128 -16
 12633 177e 1B       		.uleb128 0x1b
 12634 177f F3000000 		.4byte	.LASF286
 12635 1783 01       		.byte	0x1
 12636 1784 540A     		.2byte	0xa54
 12637 1786 AF170000 		.4byte	0x17af
 12638 178a 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 274


 12639 178b 91       		.byte	0x91
 12640 178c 6C       		.sleb128 -20
 12641 178d 1B       		.uleb128 0x1b
 12642 178e 23110000 		.4byte	.LASF287
 12643 1792 01       		.byte	0x1
 12644 1793 550A     		.2byte	0xa55
 12645 1795 81000000 		.4byte	0x81
 12646 1799 02       		.uleb128 0x2
 12647 179a 91       		.byte	0x91
 12648 179b 6B       		.sleb128 -21
 12649 179c 1B       		.uleb128 0x1b
 12650 179d 6D0A0000 		.4byte	.LASF288
 12651 17a1 01       		.byte	0x1
 12652 17a2 560A     		.2byte	0xa56
 12653 17a4 AF170000 		.4byte	0x17af
 12654 17a8 05       		.uleb128 0x5
 12655 17a9 03       		.byte	0x3
 12656 17aa A4010000 		.4byte	m_addr.10766
 12657 17ae 00       		.byte	0
 12658 17af 0C       		.uleb128 0xc
 12659 17b0 04       		.byte	0x4
 12660 17b1 81000000 		.4byte	0x81
 12661 17b5 07       		.uleb128 0x7
 12662 17b6 C5170000 		.4byte	0x17c5
 12663 17ba C5170000 		.4byte	0x17c5
 12664 17be 08       		.uleb128 0x8
 12665 17bf 0E010000 		.4byte	0x10e
 12666 17c3 1C       		.byte	0x1c
 12667 17c4 00       		.byte	0
 12668 17c5 27       		.uleb128 0x27
 12669 17c6 81000000 		.4byte	0x81
 12670 17ca 19       		.uleb128 0x19
 12671 17cb EC0D0000 		.4byte	.LASF289
 12672 17cf 01       		.byte	0x1
 12673 17d0 40       		.byte	0x40
 12674 17d1 DB170000 		.4byte	0x17db
 12675 17d5 05       		.uleb128 0x5
 12676 17d6 03       		.byte	0x3
 12677 17d7 00000000 		.4byte	pwm_preload_values
 12678 17db 27       		.uleb128 0x27
 12679 17dc B5170000 		.4byte	0x17b5
 12680 17e0 28       		.uleb128 0x28
 12681 17e1 260F0000 		.4byte	.LASF290
 12682 17e5 08       		.byte	0x8
 12683 17e6 1207     		.2byte	0x712
 12684 17e8 EC170000 		.4byte	0x17ec
 12685 17ec 06       		.uleb128 0x6
 12686 17ed 76000000 		.4byte	0x76
 12687 17f1 07       		.uleb128 0x7
 12688 17f2 A5010000 		.4byte	0x1a5
 12689 17f6 01180000 		.4byte	0x1801
 12690 17fa 08       		.uleb128 0x8
 12691 17fb 0E010000 		.4byte	0x10e
 12692 17ff 01       		.byte	0x1
 12693 1800 00       		.byte	0
 12694 1801 28       		.uleb128 0x28
 12695 1802 FE060000 		.4byte	.LASF291
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 275


 12696 1806 07       		.byte	0x7
 12697 1807 1B02     		.2byte	0x21b
 12698 1809 F1170000 		.4byte	0x17f1
 12699 180d 28       		.uleb128 0x28
 12700 180e 76040000 		.4byte	.LASF292
 12701 1812 07       		.byte	0x7
 12702 1813 1B02     		.2byte	0x21b
 12703 1815 F1170000 		.4byte	0x17f1
 12704 1819 28       		.uleb128 0x28
 12705 181a B20B0000 		.4byte	.LASF293
 12706 181e 07       		.byte	0x7
 12707 181f 1B02     		.2byte	0x21b
 12708 1821 F1170000 		.4byte	0x17f1
 12709 1825 07       		.uleb128 0x7
 12710 1826 E2010000 		.4byte	0x1e2
 12711 182a 35180000 		.4byte	0x1835
 12712 182e 08       		.uleb128 0x8
 12713 182f 0E010000 		.4byte	0x10e
 12714 1833 01       		.byte	0x1
 12715 1834 00       		.byte	0
 12716 1835 28       		.uleb128 0x28
 12717 1836 B7060000 		.4byte	.LASF294
 12718 183a 07       		.byte	0x7
 12719 183b 1C02     		.2byte	0x21c
 12720 183d 25180000 		.4byte	0x1825
 12721 1841 28       		.uleb128 0x28
 12722 1842 19110000 		.4byte	.LASF295
 12723 1846 07       		.byte	0x7
 12724 1847 1C02     		.2byte	0x21c
 12725 1849 25180000 		.4byte	0x1825
 12726 184d 28       		.uleb128 0x28
 12727 184e 65100000 		.4byte	.LASF296
 12728 1852 07       		.byte	0x7
 12729 1853 1D02     		.2byte	0x21d
 12730 1855 63020000 		.4byte	0x263
 12731 1859 28       		.uleb128 0x28
 12732 185a 20030000 		.4byte	.LASF297
 12733 185e 07       		.byte	0x7
 12734 185f 1D02     		.2byte	0x21d
 12735 1861 63020000 		.4byte	0x263
 12736 1865 28       		.uleb128 0x28
 12737 1866 76000000 		.4byte	.LASF298
 12738 186a 07       		.byte	0x7
 12739 186b 1F02     		.2byte	0x21f
 12740 186d B4020000 		.4byte	0x2b4
 12741 1871 28       		.uleb128 0x28
 12742 1872 400E0000 		.4byte	.LASF299
 12743 1876 07       		.byte	0x7
 12744 1877 2002     		.2byte	0x220
 12745 1879 8D090000 		.4byte	0x98d
 12746 187d 28       		.uleb128 0x28
 12747 187e 740A0000 		.4byte	.LASF300
 12748 1882 07       		.byte	0x7
 12749 1883 2002     		.2byte	0x220
 12750 1885 8D090000 		.4byte	0x98d
 12751 1889 28       		.uleb128 0x28
 12752 188a 53090000 		.4byte	.LASF301
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 276


 12753 188e 07       		.byte	0x7
 12754 188f 2102     		.2byte	0x221
 12755 1891 660B0000 		.4byte	0xb66
 12756 1895 07       		.uleb128 0x7
 12757 1896 3E0B0000 		.4byte	0xb3e
 12758 189a A5180000 		.4byte	0x18a5
 12759 189e 08       		.uleb128 0x8
 12760 189f 0E010000 		.4byte	0x10e
 12761 18a3 01       		.byte	0x1
 12762 18a4 00       		.byte	0
 12763 18a5 28       		.uleb128 0x28
 12764 18a6 9E0B0000 		.4byte	.LASF302
 12765 18aa 07       		.byte	0x7
 12766 18ab 2202     		.2byte	0x222
 12767 18ad 95180000 		.4byte	0x1895
 12768 18b1 28       		.uleb128 0x28
 12769 18b2 AE090000 		.4byte	.LASF303
 12770 18b6 07       		.byte	0x7
 12771 18b7 2202     		.2byte	0x222
 12772 18b9 95180000 		.4byte	0x1895
 12773 18bd 28       		.uleb128 0x28
 12774 18be 840B0000 		.4byte	.LASF304
 12775 18c2 07       		.byte	0x7
 12776 18c3 2202     		.2byte	0x222
 12777 18c5 95180000 		.4byte	0x1895
 12778 18c9 07       		.uleb128 0x7
 12779 18ca 3E0B0000 		.4byte	0xb3e
 12780 18ce D9180000 		.4byte	0x18d9
 12781 18d2 08       		.uleb128 0x8
 12782 18d3 0E010000 		.4byte	0x10e
 12783 18d7 02       		.byte	0x2
 12784 18d8 00       		.byte	0
 12785 18d9 28       		.uleb128 0x28
 12786 18da 47050000 		.4byte	.LASF305
 12787 18de 07       		.byte	0x7
 12788 18df 2302     		.2byte	0x223
 12789 18e1 C9180000 		.4byte	0x18c9
 12790 18e5 07       		.uleb128 0x7
 12791 18e6 3E0B0000 		.4byte	0xb3e
 12792 18ea F5180000 		.4byte	0x18f5
 12793 18ee 08       		.uleb128 0x8
 12794 18ef 0E010000 		.4byte	0x10e
 12795 18f3 07       		.byte	0x7
 12796 18f4 00       		.byte	0
 12797 18f5 28       		.uleb128 0x28
 12798 18f6 83010000 		.4byte	.LASF306
 12799 18fa 07       		.byte	0x7
 12800 18fb 2402     		.2byte	0x224
 12801 18fd E5180000 		.4byte	0x18e5
 12802 1901 28       		.uleb128 0x28
 12803 1902 85020000 		.4byte	.LASF307
 12804 1906 07       		.byte	0x7
 12805 1907 2602     		.2byte	0x226
 12806 1909 8D000000 		.4byte	0x8d
 12807 190d 28       		.uleb128 0x28
 12808 190e 33090000 		.4byte	.LASF308
 12809 1912 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 277


 12810 1913 2702     		.2byte	0x227
 12811 1915 8D000000 		.4byte	0x8d
 12812 1919 28       		.uleb128 0x28
 12813 191a 2E0C0000 		.4byte	.LASF309
 12814 191e 07       		.byte	0x7
 12815 191f 2802     		.2byte	0x228
 12816 1921 D5000000 		.4byte	0xd5
 12817 1925 28       		.uleb128 0x28
 12818 1926 C70C0000 		.4byte	.LASF310
 12819 192a 07       		.byte	0x7
 12820 192b 2A02     		.2byte	0x22a
 12821 192d 94020000 		.4byte	0x294
 12822 1931 28       		.uleb128 0x28
 12823 1932 810F0000 		.4byte	.LASF311
 12824 1936 07       		.byte	0x7
 12825 1937 2B02     		.2byte	0x22b
 12826 1939 EA060000 		.4byte	0x6ea
 12827 193d 28       		.uleb128 0x28
 12828 193e C60E0000 		.4byte	.LASF312
 12829 1942 07       		.byte	0x7
 12830 1943 2C02     		.2byte	0x22c
 12831 1945 EA060000 		.4byte	0x6ea
 12832 1949 28       		.uleb128 0x28
 12833 194a 07060000 		.4byte	.LASF313
 12834 194e 07       		.byte	0x7
 12835 194f 2D02     		.2byte	0x22d
 12836 1951 94020000 		.4byte	0x294
 12837 1955 28       		.uleb128 0x28
 12838 1956 330F0000 		.4byte	.LASF314
 12839 195a 07       		.byte	0x7
 12840 195b 2E02     		.2byte	0x22e
 12841 195d 94020000 		.4byte	0x294
 12842 1961 28       		.uleb128 0x28
 12843 1962 95060000 		.4byte	.LASF315
 12844 1966 07       		.byte	0x7
 12845 1967 3002     		.2byte	0x230
 12846 1969 120C0000 		.4byte	0xc12
 12847 196d 28       		.uleb128 0x28
 12848 196e F0040000 		.4byte	.LASF316
 12849 1972 07       		.byte	0x7
 12850 1973 3102     		.2byte	0x231
 12851 1975 DA0B0000 		.4byte	0xbda
 12852 1979 28       		.uleb128 0x28
 12853 197a F6030000 		.4byte	.LASF317
 12854 197e 07       		.byte	0x7
 12855 197f 3202     		.2byte	0x232
 12856 1981 DA0B0000 		.4byte	0xbda
 12857 1985 28       		.uleb128 0x28
 12858 1986 5A0C0000 		.4byte	.LASF318
 12859 198a 07       		.byte	0x7
 12860 198b 3302     		.2byte	0x233
 12861 198d DA0B0000 		.4byte	0xbda
 12862 1991 28       		.uleb128 0x28
 12863 1992 95100000 		.4byte	.LASF319
 12864 1996 07       		.byte	0x7
 12865 1997 3402     		.2byte	0x234
 12866 1999 DA0B0000 		.4byte	0xbda
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 278


 12867 199d 28       		.uleb128 0x28
 12868 199e 37080000 		.4byte	.LASF320
 12869 19a2 07       		.byte	0x7
 12870 19a3 3702     		.2byte	0x237
 12871 19a5 81000000 		.4byte	0x81
 12872 19a9 28       		.uleb128 0x28
 12873 19aa B7000000 		.4byte	.LASF321
 12874 19ae 07       		.byte	0x7
 12875 19af 3802     		.2byte	0x238
 12876 19b1 81000000 		.4byte	0x81
 12877 19b5 28       		.uleb128 0x28
 12878 19b6 0B040000 		.4byte	.LASF322
 12879 19ba 07       		.byte	0x7
 12880 19bb 3902     		.2byte	0x239
 12881 19bd 81000000 		.4byte	0x81
 12882 19c1 28       		.uleb128 0x28
 12883 19c2 D5000000 		.4byte	.LASF323
 12884 19c6 07       		.byte	0x7
 12885 19c7 3A02     		.2byte	0x23a
 12886 19c9 81000000 		.4byte	0x81
 12887 19cd 28       		.uleb128 0x28
 12888 19ce 4D110000 		.4byte	.LASF324
 12889 19d2 07       		.byte	0x7
 12890 19d3 3C02     		.2byte	0x23c
 12891 19d5 81000000 		.4byte	0x81
 12892 19d9 28       		.uleb128 0x28
 12893 19da A50B0000 		.4byte	.LASF325
 12894 19de 07       		.byte	0x7
 12895 19df 3D02     		.2byte	0x23d
 12896 19e1 81000000 		.4byte	0x81
 12897 19e5 28       		.uleb128 0x28
 12898 19e6 5C040000 		.4byte	.LASF326
 12899 19ea 07       		.byte	0x7
 12900 19eb 3E02     		.2byte	0x23e
 12901 19ed 81000000 		.4byte	0x81
 12902 19f1 28       		.uleb128 0x28
 12903 19f2 17080000 		.4byte	.LASF327
 12904 19f6 07       		.byte	0x7
 12905 19f7 3F02     		.2byte	0x23f
 12906 19f9 81000000 		.4byte	0x81
 12907 19fd 28       		.uleb128 0x28
 12908 19fe 93090000 		.4byte	.LASF328
 12909 1a02 07       		.byte	0x7
 12910 1a03 4002     		.2byte	0x240
 12911 1a05 81000000 		.4byte	0x81
 12912 1a09 07       		.uleb128 0x7
 12913 1a0a B1000000 		.4byte	0xb1
 12914 1a0e 191A0000 		.4byte	0x1a19
 12915 1a12 08       		.uleb128 0x8
 12916 1a13 0E010000 		.4byte	0x10e
 12917 1a17 0B       		.byte	0xb
 12918 1a18 00       		.byte	0
 12919 1a19 28       		.uleb128 0x28
 12920 1a1a 03040000 		.4byte	.LASF329
 12921 1a1e 07       		.byte	0x7
 12922 1a1f 4402     		.2byte	0x244
 12923 1a21 091A0000 		.4byte	0x1a09
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 279


 12924 1a25 28       		.uleb128 0x28
 12925 1a26 CC100000 		.4byte	.LASF330
 12926 1a2a 07       		.byte	0x7
 12927 1a2b 4502     		.2byte	0x245
 12928 1a2d 81000000 		.4byte	0x81
 12929 1a31 28       		.uleb128 0x28
 12930 1a32 22050000 		.4byte	.LASF331
 12931 1a36 07       		.byte	0x7
 12932 1a37 4802     		.2byte	0x248
 12933 1a39 A5000000 		.4byte	0xa5
 12934 1a3d 07       		.uleb128 0x7
 12935 1a3e 99000000 		.4byte	0x99
 12936 1a42 531A0000 		.4byte	0x1a53
 12937 1a46 08       		.uleb128 0x8
 12938 1a47 0E010000 		.4byte	0x10e
 12939 1a4b 01       		.byte	0x1
 12940 1a4c 08       		.uleb128 0x8
 12941 1a4d 0E010000 		.4byte	0x10e
 12942 1a51 04       		.byte	0x4
 12943 1a52 00       		.byte	0
 12944 1a53 28       		.uleb128 0x28
 12945 1a54 ED060000 		.4byte	.LASF332
 12946 1a58 07       		.byte	0x7
 12947 1a59 4B02     		.2byte	0x24b
 12948 1a5b 3D1A0000 		.4byte	0x1a3d
 12949 1a5f 28       		.uleb128 0x28
 12950 1a60 6F0D0000 		.4byte	.LASF333
 12951 1a64 07       		.byte	0x7
 12952 1a65 4C02     		.2byte	0x24c
 12953 1a67 EA060000 		.4byte	0x6ea
 12954 1a6b 07       		.uleb128 0x7
 12955 1a6c 8D000000 		.4byte	0x8d
 12956 1a70 811A0000 		.4byte	0x1a81
 12957 1a74 08       		.uleb128 0x8
 12958 1a75 0E010000 		.4byte	0x10e
 12959 1a79 01       		.byte	0x1
 12960 1a7a 08       		.uleb128 0x8
 12961 1a7b 0E010000 		.4byte	0x10e
 12962 1a7f 04       		.byte	0x4
 12963 1a80 00       		.byte	0
 12964 1a81 28       		.uleb128 0x28
 12965 1a82 A10F0000 		.4byte	.LASF334
 12966 1a86 07       		.byte	0x7
 12967 1a87 4D02     		.2byte	0x24d
 12968 1a89 6B1A0000 		.4byte	0x1a6b
 12969 1a8d 07       		.uleb128 0x7
 12970 1a8e 81000000 		.4byte	0x81
 12971 1a92 A31A0000 		.4byte	0x1aa3
 12972 1a96 08       		.uleb128 0x8
 12973 1a97 0E010000 		.4byte	0x10e
 12974 1a9b 01       		.byte	0x1
 12975 1a9c 08       		.uleb128 0x8
 12976 1a9d 0E010000 		.4byte	0x10e
 12977 1aa1 04       		.byte	0x4
 12978 1aa2 00       		.byte	0
 12979 1aa3 28       		.uleb128 0x28
 12980 1aa4 CC060000 		.4byte	.LASF335
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 280


 12981 1aa8 07       		.byte	0x7
 12982 1aa9 4E02     		.2byte	0x24e
 12983 1aab 8D1A0000 		.4byte	0x1a8d
 12984 1aaf 28       		.uleb128 0x28
 12985 1ab0 8F0A0000 		.4byte	.LASF336
 12986 1ab4 07       		.byte	0x7
 12987 1ab5 5102     		.2byte	0x251
 12988 1ab7 BD000000 		.4byte	0xbd
 12989 1abb 28       		.uleb128 0x28
 12990 1abc EA050000 		.4byte	.LASF337
 12991 1ac0 07       		.byte	0x7
 12992 1ac1 5402     		.2byte	0x254
 12993 1ac3 9F010000 		.4byte	0x19f
 12994 1ac7 28       		.uleb128 0x28
 12995 1ac8 A3070000 		.4byte	.LASF338
 12996 1acc 07       		.byte	0x7
 12997 1acd 5702     		.2byte	0x257
 12998 1acf 9F010000 		.4byte	0x19f
 12999 1ad3 07       		.uleb128 0x7
 13000 1ad4 C20A0000 		.4byte	0xac2
 13001 1ad8 E31A0000 		.4byte	0x1ae3
 13002 1adc 08       		.uleb128 0x8
 13003 1add 0E010000 		.4byte	0x10e
 13004 1ae1 04       		.byte	0x4
 13005 1ae2 00       		.byte	0
 13006 1ae3 28       		.uleb128 0x28
 13007 1ae4 41050000 		.4byte	.LASF339
 13008 1ae8 07       		.byte	0x7
 13009 1ae9 5F02     		.2byte	0x25f
 13010 1aeb D31A0000 		.4byte	0x1ad3
 13011 1aef 28       		.uleb128 0x28
 13012 1af0 39060000 		.4byte	.LASF340
 13013 1af4 07       		.byte	0x7
 13014 1af5 5F02     		.2byte	0x25f
 13015 1af7 D31A0000 		.4byte	0x1ad3
 13016 1afb 28       		.uleb128 0x28
 13017 1afc EA100000 		.4byte	.LASF341
 13018 1b00 07       		.byte	0x7
 13019 1b01 6802     		.2byte	0x268
 13020 1b03 81000000 		.4byte	0x81
 13021 1b07 00       		.byte	0
 13022              		.section	.debug_abbrev,"",%progbits
 13023              	.Ldebug_abbrev0:
 13024 0000 01       		.uleb128 0x1
 13025 0001 11       		.uleb128 0x11
 13026 0002 01       		.byte	0x1
 13027 0003 25       		.uleb128 0x25
 13028 0004 0E       		.uleb128 0xe
 13029 0005 13       		.uleb128 0x13
 13030 0006 0B       		.uleb128 0xb
 13031 0007 03       		.uleb128 0x3
 13032 0008 0E       		.uleb128 0xe
 13033 0009 1B       		.uleb128 0x1b
 13034 000a 0E       		.uleb128 0xe
 13035 000b 55       		.uleb128 0x55
 13036 000c 17       		.uleb128 0x17
 13037 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 281


 13038 000e 01       		.uleb128 0x1
 13039 000f 10       		.uleb128 0x10
 13040 0010 17       		.uleb128 0x17
 13041 0011 00       		.byte	0
 13042 0012 00       		.byte	0
 13043 0013 02       		.uleb128 0x2
 13044 0014 24       		.uleb128 0x24
 13045 0015 00       		.byte	0
 13046 0016 0B       		.uleb128 0xb
 13047 0017 0B       		.uleb128 0xb
 13048 0018 3E       		.uleb128 0x3e
 13049 0019 0B       		.uleb128 0xb
 13050 001a 03       		.uleb128 0x3
 13051 001b 0E       		.uleb128 0xe
 13052 001c 00       		.byte	0
 13053 001d 00       		.byte	0
 13054 001e 03       		.uleb128 0x3
 13055 001f 16       		.uleb128 0x16
 13056 0020 00       		.byte	0
 13057 0021 03       		.uleb128 0x3
 13058 0022 0E       		.uleb128 0xe
 13059 0023 3A       		.uleb128 0x3a
 13060 0024 0B       		.uleb128 0xb
 13061 0025 3B       		.uleb128 0x3b
 13062 0026 0B       		.uleb128 0xb
 13063 0027 49       		.uleb128 0x49
 13064 0028 13       		.uleb128 0x13
 13065 0029 00       		.byte	0
 13066 002a 00       		.byte	0
 13067 002b 04       		.uleb128 0x4
 13068 002c 24       		.uleb128 0x24
 13069 002d 00       		.byte	0
 13070 002e 0B       		.uleb128 0xb
 13071 002f 0B       		.uleb128 0xb
 13072 0030 3E       		.uleb128 0x3e
 13073 0031 0B       		.uleb128 0xb
 13074 0032 03       		.uleb128 0x3
 13075 0033 08       		.uleb128 0x8
 13076 0034 00       		.byte	0
 13077 0035 00       		.byte	0
 13078 0036 05       		.uleb128 0x5
 13079 0037 16       		.uleb128 0x16
 13080 0038 00       		.byte	0
 13081 0039 03       		.uleb128 0x3
 13082 003a 0E       		.uleb128 0xe
 13083 003b 3A       		.uleb128 0x3a
 13084 003c 0B       		.uleb128 0xb
 13085 003d 3B       		.uleb128 0x3b
 13086 003e 05       		.uleb128 0x5
 13087 003f 49       		.uleb128 0x49
 13088 0040 13       		.uleb128 0x13
 13089 0041 00       		.byte	0
 13090 0042 00       		.byte	0
 13091 0043 06       		.uleb128 0x6
 13092 0044 35       		.uleb128 0x35
 13093 0045 00       		.byte	0
 13094 0046 49       		.uleb128 0x49
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 282


 13095 0047 13       		.uleb128 0x13
 13096 0048 00       		.byte	0
 13097 0049 00       		.byte	0
 13098 004a 07       		.uleb128 0x7
 13099 004b 01       		.uleb128 0x1
 13100 004c 01       		.byte	0x1
 13101 004d 49       		.uleb128 0x49
 13102 004e 13       		.uleb128 0x13
 13103 004f 01       		.uleb128 0x1
 13104 0050 13       		.uleb128 0x13
 13105 0051 00       		.byte	0
 13106 0052 00       		.byte	0
 13107 0053 08       		.uleb128 0x8
 13108 0054 21       		.uleb128 0x21
 13109 0055 00       		.byte	0
 13110 0056 49       		.uleb128 0x49
 13111 0057 13       		.uleb128 0x13
 13112 0058 2F       		.uleb128 0x2f
 13113 0059 0B       		.uleb128 0xb
 13114 005a 00       		.byte	0
 13115 005b 00       		.byte	0
 13116 005c 09       		.uleb128 0x9
 13117 005d 04       		.uleb128 0x4
 13118 005e 01       		.byte	0x1
 13119 005f 03       		.uleb128 0x3
 13120 0060 0E       		.uleb128 0xe
 13121 0061 0B       		.uleb128 0xb
 13122 0062 0B       		.uleb128 0xb
 13123 0063 49       		.uleb128 0x49
 13124 0064 13       		.uleb128 0x13
 13125 0065 3A       		.uleb128 0x3a
 13126 0066 0B       		.uleb128 0xb
 13127 0067 3B       		.uleb128 0x3b
 13128 0068 0B       		.uleb128 0xb
 13129 0069 01       		.uleb128 0x1
 13130 006a 13       		.uleb128 0x13
 13131 006b 00       		.byte	0
 13132 006c 00       		.byte	0
 13133 006d 0A       		.uleb128 0xa
 13134 006e 28       		.uleb128 0x28
 13135 006f 00       		.byte	0
 13136 0070 03       		.uleb128 0x3
 13137 0071 0E       		.uleb128 0xe
 13138 0072 1C       		.uleb128 0x1c
 13139 0073 0B       		.uleb128 0xb
 13140 0074 00       		.byte	0
 13141 0075 00       		.byte	0
 13142 0076 0B       		.uleb128 0xb
 13143 0077 13       		.uleb128 0x13
 13144 0078 00       		.byte	0
 13145 0079 03       		.uleb128 0x3
 13146 007a 0E       		.uleb128 0xe
 13147 007b 3C       		.uleb128 0x3c
 13148 007c 19       		.uleb128 0x19
 13149 007d 00       		.byte	0
 13150 007e 00       		.byte	0
 13151 007f 0C       		.uleb128 0xc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 283


 13152 0080 0F       		.uleb128 0xf
 13153 0081 00       		.byte	0
 13154 0082 0B       		.uleb128 0xb
 13155 0083 0B       		.uleb128 0xb
 13156 0084 49       		.uleb128 0x49
 13157 0085 13       		.uleb128 0x13
 13158 0086 00       		.byte	0
 13159 0087 00       		.byte	0
 13160 0088 0D       		.uleb128 0xd
 13161 0089 13       		.uleb128 0x13
 13162 008a 01       		.byte	0x1
 13163 008b 03       		.uleb128 0x3
 13164 008c 0E       		.uleb128 0xe
 13165 008d 0B       		.uleb128 0xb
 13166 008e 0B       		.uleb128 0xb
 13167 008f 3A       		.uleb128 0x3a
 13168 0090 0B       		.uleb128 0xb
 13169 0091 3B       		.uleb128 0x3b
 13170 0092 0B       		.uleb128 0xb
 13171 0093 01       		.uleb128 0x1
 13172 0094 13       		.uleb128 0x13
 13173 0095 00       		.byte	0
 13174 0096 00       		.byte	0
 13175 0097 0E       		.uleb128 0xe
 13176 0098 0D       		.uleb128 0xd
 13177 0099 00       		.byte	0
 13178 009a 03       		.uleb128 0x3
 13179 009b 08       		.uleb128 0x8
 13180 009c 3A       		.uleb128 0x3a
 13181 009d 0B       		.uleb128 0xb
 13182 009e 3B       		.uleb128 0x3b
 13183 009f 0B       		.uleb128 0xb
 13184 00a0 49       		.uleb128 0x49
 13185 00a1 13       		.uleb128 0x13
 13186 00a2 38       		.uleb128 0x38
 13187 00a3 0B       		.uleb128 0xb
 13188 00a4 00       		.byte	0
 13189 00a5 00       		.byte	0
 13190 00a6 0F       		.uleb128 0xf
 13191 00a7 0D       		.uleb128 0xd
 13192 00a8 00       		.byte	0
 13193 00a9 03       		.uleb128 0x3
 13194 00aa 0E       		.uleb128 0xe
 13195 00ab 3A       		.uleb128 0x3a
 13196 00ac 0B       		.uleb128 0xb
 13197 00ad 3B       		.uleb128 0x3b
 13198 00ae 0B       		.uleb128 0xb
 13199 00af 49       		.uleb128 0x49
 13200 00b0 13       		.uleb128 0x13
 13201 00b1 38       		.uleb128 0x38
 13202 00b2 0B       		.uleb128 0xb
 13203 00b3 00       		.byte	0
 13204 00b4 00       		.byte	0
 13205 00b5 10       		.uleb128 0x10
 13206 00b6 13       		.uleb128 0x13
 13207 00b7 01       		.byte	0x1
 13208 00b8 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 284


 13209 00b9 0E       		.uleb128 0xe
 13210 00ba 0B       		.uleb128 0xb
 13211 00bb 0B       		.uleb128 0xb
 13212 00bc 3A       		.uleb128 0x3a
 13213 00bd 0B       		.uleb128 0xb
 13214 00be 3B       		.uleb128 0x3b
 13215 00bf 05       		.uleb128 0x5
 13216 00c0 01       		.uleb128 0x1
 13217 00c1 13       		.uleb128 0x13
 13218 00c2 00       		.byte	0
 13219 00c3 00       		.byte	0
 13220 00c4 11       		.uleb128 0x11
 13221 00c5 0D       		.uleb128 0xd
 13222 00c6 00       		.byte	0
 13223 00c7 03       		.uleb128 0x3
 13224 00c8 0E       		.uleb128 0xe
 13225 00c9 3A       		.uleb128 0x3a
 13226 00ca 0B       		.uleb128 0xb
 13227 00cb 3B       		.uleb128 0x3b
 13228 00cc 05       		.uleb128 0x5
 13229 00cd 49       		.uleb128 0x49
 13230 00ce 13       		.uleb128 0x13
 13231 00cf 38       		.uleb128 0x38
 13232 00d0 0B       		.uleb128 0xb
 13233 00d1 00       		.byte	0
 13234 00d2 00       		.byte	0
 13235 00d3 12       		.uleb128 0x12
 13236 00d4 0D       		.uleb128 0xd
 13237 00d5 00       		.byte	0
 13238 00d6 03       		.uleb128 0x3
 13239 00d7 08       		.uleb128 0x8
 13240 00d8 3A       		.uleb128 0x3a
 13241 00d9 0B       		.uleb128 0xb
 13242 00da 3B       		.uleb128 0x3b
 13243 00db 05       		.uleb128 0x5
 13244 00dc 49       		.uleb128 0x49
 13245 00dd 13       		.uleb128 0x13
 13246 00de 38       		.uleb128 0x38
 13247 00df 0B       		.uleb128 0xb
 13248 00e0 00       		.byte	0
 13249 00e1 00       		.byte	0
 13250 00e2 13       		.uleb128 0x13
 13251 00e3 13       		.uleb128 0x13
 13252 00e4 01       		.byte	0x1
 13253 00e5 03       		.uleb128 0x3
 13254 00e6 0E       		.uleb128 0xe
 13255 00e7 0B       		.uleb128 0xb
 13256 00e8 05       		.uleb128 0x5
 13257 00e9 3A       		.uleb128 0x3a
 13258 00ea 0B       		.uleb128 0xb
 13259 00eb 3B       		.uleb128 0x3b
 13260 00ec 05       		.uleb128 0x5
 13261 00ed 01       		.uleb128 0x1
 13262 00ee 13       		.uleb128 0x13
 13263 00ef 00       		.byte	0
 13264 00f0 00       		.byte	0
 13265 00f1 14       		.uleb128 0x14
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 285


 13266 00f2 0D       		.uleb128 0xd
 13267 00f3 00       		.byte	0
 13268 00f4 03       		.uleb128 0x3
 13269 00f5 08       		.uleb128 0x8
 13270 00f6 3A       		.uleb128 0x3a
 13271 00f7 0B       		.uleb128 0xb
 13272 00f8 3B       		.uleb128 0x3b
 13273 00f9 05       		.uleb128 0x5
 13274 00fa 49       		.uleb128 0x49
 13275 00fb 13       		.uleb128 0x13
 13276 00fc 38       		.uleb128 0x38
 13277 00fd 05       		.uleb128 0x5
 13278 00fe 00       		.byte	0
 13279 00ff 00       		.byte	0
 13280 0100 15       		.uleb128 0x15
 13281 0101 0D       		.uleb128 0xd
 13282 0102 00       		.byte	0
 13283 0103 03       		.uleb128 0x3
 13284 0104 0E       		.uleb128 0xe
 13285 0105 3A       		.uleb128 0x3a
 13286 0106 0B       		.uleb128 0xb
 13287 0107 3B       		.uleb128 0x3b
 13288 0108 05       		.uleb128 0x5
 13289 0109 49       		.uleb128 0x49
 13290 010a 13       		.uleb128 0x13
 13291 010b 38       		.uleb128 0x38
 13292 010c 05       		.uleb128 0x5
 13293 010d 00       		.byte	0
 13294 010e 00       		.byte	0
 13295 010f 16       		.uleb128 0x16
 13296 0110 04       		.uleb128 0x4
 13297 0111 01       		.byte	0x1
 13298 0112 0B       		.uleb128 0xb
 13299 0113 0B       		.uleb128 0xb
 13300 0114 49       		.uleb128 0x49
 13301 0115 13       		.uleb128 0x13
 13302 0116 3A       		.uleb128 0x3a
 13303 0117 0B       		.uleb128 0xb
 13304 0118 3B       		.uleb128 0x3b
 13305 0119 05       		.uleb128 0x5
 13306 011a 01       		.uleb128 0x1
 13307 011b 13       		.uleb128 0x13
 13308 011c 00       		.byte	0
 13309 011d 00       		.byte	0
 13310 011e 17       		.uleb128 0x17
 13311 011f 2E       		.uleb128 0x2e
 13312 0120 00       		.byte	0
 13313 0121 3F       		.uleb128 0x3f
 13314 0122 19       		.uleb128 0x19
 13315 0123 03       		.uleb128 0x3
 13316 0124 0E       		.uleb128 0xe
 13317 0125 3A       		.uleb128 0x3a
 13318 0126 0B       		.uleb128 0xb
 13319 0127 3B       		.uleb128 0x3b
 13320 0128 0B       		.uleb128 0xb
 13321 0129 27       		.uleb128 0x27
 13322 012a 19       		.uleb128 0x19
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 286


 13323 012b 11       		.uleb128 0x11
 13324 012c 01       		.uleb128 0x1
 13325 012d 12       		.uleb128 0x12
 13326 012e 06       		.uleb128 0x6
 13327 012f 40       		.uleb128 0x40
 13328 0130 18       		.uleb128 0x18
 13329 0131 9742     		.uleb128 0x2117
 13330 0133 19       		.uleb128 0x19
 13331 0134 00       		.byte	0
 13332 0135 00       		.byte	0
 13333 0136 18       		.uleb128 0x18
 13334 0137 2E       		.uleb128 0x2e
 13335 0138 01       		.byte	0x1
 13336 0139 3F       		.uleb128 0x3f
 13337 013a 19       		.uleb128 0x19
 13338 013b 03       		.uleb128 0x3
 13339 013c 0E       		.uleb128 0xe
 13340 013d 3A       		.uleb128 0x3a
 13341 013e 0B       		.uleb128 0xb
 13342 013f 3B       		.uleb128 0x3b
 13343 0140 0B       		.uleb128 0xb
 13344 0141 11       		.uleb128 0x11
 13345 0142 01       		.uleb128 0x1
 13346 0143 12       		.uleb128 0x12
 13347 0144 06       		.uleb128 0x6
 13348 0145 40       		.uleb128 0x40
 13349 0146 18       		.uleb128 0x18
 13350 0147 9642     		.uleb128 0x2116
 13351 0149 19       		.uleb128 0x19
 13352 014a 01       		.uleb128 0x1
 13353 014b 13       		.uleb128 0x13
 13354 014c 00       		.byte	0
 13355 014d 00       		.byte	0
 13356 014e 19       		.uleb128 0x19
 13357 014f 34       		.uleb128 0x34
 13358 0150 00       		.byte	0
 13359 0151 03       		.uleb128 0x3
 13360 0152 0E       		.uleb128 0xe
 13361 0153 3A       		.uleb128 0x3a
 13362 0154 0B       		.uleb128 0xb
 13363 0155 3B       		.uleb128 0x3b
 13364 0156 0B       		.uleb128 0xb
 13365 0157 49       		.uleb128 0x49
 13366 0158 13       		.uleb128 0x13
 13367 0159 02       		.uleb128 0x2
 13368 015a 18       		.uleb128 0x18
 13369 015b 00       		.byte	0
 13370 015c 00       		.byte	0
 13371 015d 1A       		.uleb128 0x1a
 13372 015e 2E       		.uleb128 0x2e
 13373 015f 01       		.byte	0x1
 13374 0160 3F       		.uleb128 0x3f
 13375 0161 19       		.uleb128 0x19
 13376 0162 03       		.uleb128 0x3
 13377 0163 0E       		.uleb128 0xe
 13378 0164 3A       		.uleb128 0x3a
 13379 0165 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 287


 13380 0166 3B       		.uleb128 0x3b
 13381 0167 05       		.uleb128 0x5
 13382 0168 27       		.uleb128 0x27
 13383 0169 19       		.uleb128 0x19
 13384 016a 11       		.uleb128 0x11
 13385 016b 01       		.uleb128 0x1
 13386 016c 12       		.uleb128 0x12
 13387 016d 06       		.uleb128 0x6
 13388 016e 40       		.uleb128 0x40
 13389 016f 18       		.uleb128 0x18
 13390 0170 9642     		.uleb128 0x2116
 13391 0172 19       		.uleb128 0x19
 13392 0173 01       		.uleb128 0x1
 13393 0174 13       		.uleb128 0x13
 13394 0175 00       		.byte	0
 13395 0176 00       		.byte	0
 13396 0177 1B       		.uleb128 0x1b
 13397 0178 34       		.uleb128 0x34
 13398 0179 00       		.byte	0
 13399 017a 03       		.uleb128 0x3
 13400 017b 0E       		.uleb128 0xe
 13401 017c 3A       		.uleb128 0x3a
 13402 017d 0B       		.uleb128 0xb
 13403 017e 3B       		.uleb128 0x3b
 13404 017f 05       		.uleb128 0x5
 13405 0180 49       		.uleb128 0x49
 13406 0181 13       		.uleb128 0x13
 13407 0182 02       		.uleb128 0x2
 13408 0183 18       		.uleb128 0x18
 13409 0184 00       		.byte	0
 13410 0185 00       		.byte	0
 13411 0186 1C       		.uleb128 0x1c
 13412 0187 0B       		.uleb128 0xb
 13413 0188 01       		.byte	0x1
 13414 0189 11       		.uleb128 0x11
 13415 018a 01       		.uleb128 0x1
 13416 018b 12       		.uleb128 0x12
 13417 018c 06       		.uleb128 0x6
 13418 018d 01       		.uleb128 0x1
 13419 018e 13       		.uleb128 0x13
 13420 018f 00       		.byte	0
 13421 0190 00       		.byte	0
 13422 0191 1D       		.uleb128 0x1d
 13423 0192 34       		.uleb128 0x34
 13424 0193 00       		.byte	0
 13425 0194 03       		.uleb128 0x3
 13426 0195 08       		.uleb128 0x8
 13427 0196 3A       		.uleb128 0x3a
 13428 0197 0B       		.uleb128 0xb
 13429 0198 3B       		.uleb128 0x3b
 13430 0199 05       		.uleb128 0x5
 13431 019a 49       		.uleb128 0x49
 13432 019b 13       		.uleb128 0x13
 13433 019c 02       		.uleb128 0x2
 13434 019d 18       		.uleb128 0x18
 13435 019e 00       		.byte	0
 13436 019f 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 288


 13437 01a0 1E       		.uleb128 0x1e
 13438 01a1 0B       		.uleb128 0xb
 13439 01a2 01       		.byte	0x1
 13440 01a3 11       		.uleb128 0x11
 13441 01a4 01       		.uleb128 0x1
 13442 01a5 12       		.uleb128 0x12
 13443 01a6 06       		.uleb128 0x6
 13444 01a7 00       		.byte	0
 13445 01a8 00       		.byte	0
 13446 01a9 1F       		.uleb128 0x1f
 13447 01aa 21       		.uleb128 0x21
 13448 01ab 00       		.byte	0
 13449 01ac 49       		.uleb128 0x49
 13450 01ad 13       		.uleb128 0x13
 13451 01ae 2F       		.uleb128 0x2f
 13452 01af 05       		.uleb128 0x5
 13453 01b0 00       		.byte	0
 13454 01b1 00       		.byte	0
 13455 01b2 20       		.uleb128 0x20
 13456 01b3 05       		.uleb128 0x5
 13457 01b4 00       		.byte	0
 13458 01b5 03       		.uleb128 0x3
 13459 01b6 0E       		.uleb128 0xe
 13460 01b7 3A       		.uleb128 0x3a
 13461 01b8 0B       		.uleb128 0xb
 13462 01b9 3B       		.uleb128 0x3b
 13463 01ba 05       		.uleb128 0x5
 13464 01bb 49       		.uleb128 0x49
 13465 01bc 13       		.uleb128 0x13
 13466 01bd 02       		.uleb128 0x2
 13467 01be 18       		.uleb128 0x18
 13468 01bf 00       		.byte	0
 13469 01c0 00       		.byte	0
 13470 01c1 21       		.uleb128 0x21
 13471 01c2 0B       		.uleb128 0xb
 13472 01c3 01       		.byte	0x1
 13473 01c4 55       		.uleb128 0x55
 13474 01c5 17       		.uleb128 0x17
 13475 01c6 00       		.byte	0
 13476 01c7 00       		.byte	0
 13477 01c8 22       		.uleb128 0x22
 13478 01c9 2E       		.uleb128 0x2e
 13479 01ca 01       		.byte	0x1
 13480 01cb 3F       		.uleb128 0x3f
 13481 01cc 19       		.uleb128 0x19
 13482 01cd 03       		.uleb128 0x3
 13483 01ce 0E       		.uleb128 0xe
 13484 01cf 3A       		.uleb128 0x3a
 13485 01d0 0B       		.uleb128 0xb
 13486 01d1 3B       		.uleb128 0x3b
 13487 01d2 05       		.uleb128 0x5
 13488 01d3 27       		.uleb128 0x27
 13489 01d4 19       		.uleb128 0x19
 13490 01d5 11       		.uleb128 0x11
 13491 01d6 01       		.uleb128 0x1
 13492 01d7 12       		.uleb128 0x12
 13493 01d8 06       		.uleb128 0x6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 289


 13494 01d9 40       		.uleb128 0x40
 13495 01da 18       		.uleb128 0x18
 13496 01db 9742     		.uleb128 0x2117
 13497 01dd 19       		.uleb128 0x19
 13498 01de 01       		.uleb128 0x1
 13499 01df 13       		.uleb128 0x13
 13500 01e0 00       		.byte	0
 13501 01e1 00       		.byte	0
 13502 01e2 23       		.uleb128 0x23
 13503 01e3 0B       		.uleb128 0xb
 13504 01e4 01       		.byte	0x1
 13505 01e5 55       		.uleb128 0x55
 13506 01e6 17       		.uleb128 0x17
 13507 01e7 01       		.uleb128 0x1
 13508 01e8 13       		.uleb128 0x13
 13509 01e9 00       		.byte	0
 13510 01ea 00       		.byte	0
 13511 01eb 24       		.uleb128 0x24
 13512 01ec 2E       		.uleb128 0x2e
 13513 01ed 01       		.byte	0x1
 13514 01ee 3F       		.uleb128 0x3f
 13515 01ef 19       		.uleb128 0x19
 13516 01f0 03       		.uleb128 0x3
 13517 01f1 0E       		.uleb128 0xe
 13518 01f2 3A       		.uleb128 0x3a
 13519 01f3 0B       		.uleb128 0xb
 13520 01f4 3B       		.uleb128 0x3b
 13521 01f5 05       		.uleb128 0x5
 13522 01f6 11       		.uleb128 0x11
 13523 01f7 01       		.uleb128 0x1
 13524 01f8 12       		.uleb128 0x12
 13525 01f9 06       		.uleb128 0x6
 13526 01fa 40       		.uleb128 0x40
 13527 01fb 18       		.uleb128 0x18
 13528 01fc 9642     		.uleb128 0x2116
 13529 01fe 19       		.uleb128 0x19
 13530 01ff 01       		.uleb128 0x1
 13531 0200 13       		.uleb128 0x13
 13532 0201 00       		.byte	0
 13533 0202 00       		.byte	0
 13534 0203 25       		.uleb128 0x25
 13535 0204 05       		.uleb128 0x5
 13536 0205 00       		.byte	0
 13537 0206 03       		.uleb128 0x3
 13538 0207 08       		.uleb128 0x8
 13539 0208 3A       		.uleb128 0x3a
 13540 0209 0B       		.uleb128 0xb
 13541 020a 3B       		.uleb128 0x3b
 13542 020b 05       		.uleb128 0x5
 13543 020c 49       		.uleb128 0x49
 13544 020d 13       		.uleb128 0x13
 13545 020e 02       		.uleb128 0x2
 13546 020f 18       		.uleb128 0x18
 13547 0210 00       		.byte	0
 13548 0211 00       		.byte	0
 13549 0212 26       		.uleb128 0x26
 13550 0213 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 290


 13551 0214 01       		.byte	0x1
 13552 0215 3F       		.uleb128 0x3f
 13553 0216 19       		.uleb128 0x19
 13554 0217 03       		.uleb128 0x3
 13555 0218 0E       		.uleb128 0xe
 13556 0219 3A       		.uleb128 0x3a
 13557 021a 0B       		.uleb128 0xb
 13558 021b 3B       		.uleb128 0x3b
 13559 021c 05       		.uleb128 0x5
 13560 021d 11       		.uleb128 0x11
 13561 021e 01       		.uleb128 0x1
 13562 021f 12       		.uleb128 0x12
 13563 0220 06       		.uleb128 0x6
 13564 0221 40       		.uleb128 0x40
 13565 0222 18       		.uleb128 0x18
 13566 0223 9742     		.uleb128 0x2117
 13567 0225 19       		.uleb128 0x19
 13568 0226 01       		.uleb128 0x1
 13569 0227 13       		.uleb128 0x13
 13570 0228 00       		.byte	0
 13571 0229 00       		.byte	0
 13572 022a 27       		.uleb128 0x27
 13573 022b 26       		.uleb128 0x26
 13574 022c 00       		.byte	0
 13575 022d 49       		.uleb128 0x49
 13576 022e 13       		.uleb128 0x13
 13577 022f 00       		.byte	0
 13578 0230 00       		.byte	0
 13579 0231 28       		.uleb128 0x28
 13580 0232 34       		.uleb128 0x34
 13581 0233 00       		.byte	0
 13582 0234 03       		.uleb128 0x3
 13583 0235 0E       		.uleb128 0xe
 13584 0236 3A       		.uleb128 0x3a
 13585 0237 0B       		.uleb128 0xb
 13586 0238 3B       		.uleb128 0x3b
 13587 0239 05       		.uleb128 0x5
 13588 023a 49       		.uleb128 0x49
 13589 023b 13       		.uleb128 0x13
 13590 023c 3F       		.uleb128 0x3f
 13591 023d 19       		.uleb128 0x19
 13592 023e 3C       		.uleb128 0x3c
 13593 023f 19       		.uleb128 0x19
 13594 0240 00       		.byte	0
 13595 0241 00       		.byte	0
 13596 0242 00       		.byte	0
 13597              		.section	.debug_aranges,"",%progbits
 13598 0000 8C000000 		.4byte	0x8c
 13599 0004 0200     		.2byte	0x2
 13600 0006 00000000 		.4byte	.Ldebug_info0
 13601 000a 04       		.byte	0x4
 13602 000b 00       		.byte	0
 13603 000c 0000     		.2byte	0
 13604 000e 0000     		.2byte	0
 13605 0010 00000000 		.4byte	.LFB64
 13606 0014 18000000 		.4byte	.LFE64-.LFB64
 13607 0018 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 291


 13608 001c 20000000 		.4byte	.LFE65-.LFB65
 13609 0020 00000000 		.4byte	.LFB66
 13610 0024 F4010000 		.4byte	.LFE66-.LFB66
 13611 0028 00000000 		.4byte	.LFB67
 13612 002c 8C070000 		.4byte	.LFE67-.LFB67
 13613 0030 00000000 		.4byte	.LFB68
 13614 0034 CC050000 		.4byte	.LFE68-.LFB68
 13615 0038 00000000 		.4byte	.LFB69
 13616 003c 34030000 		.4byte	.LFE69-.LFB69
 13617 0040 00000000 		.4byte	.LFB70
 13618 0044 B0010000 		.4byte	.LFE70-.LFB70
 13619 0048 00000000 		.4byte	.LFB71
 13620 004c 08070000 		.4byte	.LFE71-.LFB71
 13621 0050 00000000 		.4byte	.LFB72
 13622 0054 40080000 		.4byte	.LFE72-.LFB72
 13623 0058 00000000 		.4byte	.LFB73
 13624 005c 1C080000 		.4byte	.LFE73-.LFB73
 13625 0060 00000000 		.4byte	.LFB74
 13626 0064 98110000 		.4byte	.LFE74-.LFB74
 13627 0068 00000000 		.4byte	.LFB75
 13628 006c F4000000 		.4byte	.LFE75-.LFB75
 13629 0070 00000000 		.4byte	.LFB76
 13630 0074 78000000 		.4byte	.LFE76-.LFB76
 13631 0078 00000000 		.4byte	.LFB77
 13632 007c 0C040000 		.4byte	.LFE77-.LFB77
 13633 0080 00000000 		.4byte	.LFB78
 13634 0084 08010000 		.4byte	.LFE78-.LFB78
 13635 0088 00000000 		.4byte	0
 13636 008c 00000000 		.4byte	0
 13637              		.section	.debug_ranges,"",%progbits
 13638              	.Ldebug_ranges0:
 13639 0000 68010000 		.4byte	.LBB4
 13640 0004 AA010000 		.4byte	.LBE4
 13641 0008 AC010000 		.4byte	.LBB5
 13642 000c F2010000 		.4byte	.LBE5
 13643 0010 00000000 		.4byte	0
 13644 0014 00000000 		.4byte	0
 13645 0018 3A000000 		.4byte	.LBB6
 13646 001c 40010000 		.4byte	.LBE6
 13647 0020 42010000 		.4byte	.LBB7
 13648 0024 BC010000 		.4byte	.LBE7
 13649 0028 00000000 		.4byte	0
 13650 002c 00000000 		.4byte	0
 13651 0030 BE010000 		.4byte	.LBB8
 13652 0034 20030000 		.4byte	.LBE8
 13653 0038 22030000 		.4byte	.LBB9
 13654 003c 24030000 		.4byte	.LBE9
 13655 0040 00000000 		.4byte	0
 13656 0044 00000000 		.4byte	0
 13657 0048 00000000 		.4byte	.LFB64
 13658 004c 18000000 		.4byte	.LFE64
 13659 0050 00000000 		.4byte	.LFB65
 13660 0054 20000000 		.4byte	.LFE65
 13661 0058 00000000 		.4byte	.LFB66
 13662 005c F4010000 		.4byte	.LFE66
 13663 0060 00000000 		.4byte	.LFB67
 13664 0064 8C070000 		.4byte	.LFE67
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 292


 13665 0068 00000000 		.4byte	.LFB68
 13666 006c CC050000 		.4byte	.LFE68
 13667 0070 00000000 		.4byte	.LFB69
 13668 0074 34030000 		.4byte	.LFE69
 13669 0078 00000000 		.4byte	.LFB70
 13670 007c B0010000 		.4byte	.LFE70
 13671 0080 00000000 		.4byte	.LFB71
 13672 0084 08070000 		.4byte	.LFE71
 13673 0088 00000000 		.4byte	.LFB72
 13674 008c 40080000 		.4byte	.LFE72
 13675 0090 00000000 		.4byte	.LFB73
 13676 0094 1C080000 		.4byte	.LFE73
 13677 0098 00000000 		.4byte	.LFB74
 13678 009c 98110000 		.4byte	.LFE74
 13679 00a0 00000000 		.4byte	.LFB75
 13680 00a4 F4000000 		.4byte	.LFE75
 13681 00a8 00000000 		.4byte	.LFB76
 13682 00ac 78000000 		.4byte	.LFE76
 13683 00b0 00000000 		.4byte	.LFB77
 13684 00b4 0C040000 		.4byte	.LFE77
 13685 00b8 00000000 		.4byte	.LFB78
 13686 00bc 08010000 		.4byte	.LFE78
 13687 00c0 00000000 		.4byte	0
 13688 00c4 00000000 		.4byte	0
 13689              		.section	.debug_line,"",%progbits
 13690              	.Ldebug_line0:
 13691 0000 6B0B0000 		.section	.debug_str,"MS",%progbits,1
 13691      0200AC01 
 13691      00000201 
 13691      FB0E0D00 
 13691      01010101 
 13692              	.LASF24:
 13693 0000 73697A65 		.ascii	"sizetype\000"
 13693      74797065 
 13693      00
 13694              	.LASF265:
 13695 0009 706F735F 		.ascii	"pos_cycle_status\000"
 13695      6379636C 
 13695      655F7374 
 13695      61747573 
 13695      00
 13696              	.LASF142:
 13697 001a 77726973 		.ascii	"wrist_direction_association\000"
 13697      745F6469 
 13697      72656374 
 13697      696F6E5F 
 13697      6173736F 
 13698              	.LASF30:
 13699 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 13699      545F4D4F 
 13699      44455F45 
 13699      4D475F46 
 13699      4346535F 
 13700              	.LASF117:
 13701 004e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 13701      5F414443 
 13701      5F73656E 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 293


 13701      736F7273 
 13701      5F706F72 
 13702              	.LASF147:
 13703 0069 75736572 		.ascii	"user\000"
 13703      00
 13704              	.LASF10:
 13705 006e 696E7433 		.ascii	"int32_t\000"
 13705      325F7400 
 13706              	.LASF298:
 13707 0076 675F7278 		.ascii	"g_rx\000"
 13707      00
 13708              	.LASF242:
 13709 007b 6F6E655F 		.ascii	"one_time_execute\000"
 13709      74696D65 
 13709      5F657865 
 13709      63757465 
 13709      00
 13710              	.LASF49:
 13711 008c 73745F64 		.ascii	"st_data\000"
 13711      61746100 
 13712              	.LASF13:
 13713 0094 75696E74 		.ascii	"uint32\000"
 13713      333200
 13714              	.LASF227:
 13715 009b 6E5F6C69 		.ascii	"n_line\000"
 13715      6E6500
 13716              	.LASF148:
 13717 00a2 4A4F595F 		.ascii	"JOY_spec\000"
 13717      73706563 
 13717      00
 13718              	.LASF85:
 13719 00ab 706F735F 		.ascii	"pos_lim_inf\000"
 13719      6C696D5F 
 13719      696E6600 
 13720              	.LASF321:
 13721 00b7 74656E73 		.ascii	"tension_valid\000"
 13721      696F6E5F 
 13721      76616C69 
 13721      6400
 13722              	.LASF203:
 13723 00c5 6572725F 		.ascii	"err_joy_1\000"
 13723      6A6F795F 
 13723      3100
 13724              	.LASF179:
 13725 00cf 73746174 		.ascii	"state\000"
 13725      6500
 13726              	.LASF323:
 13727 00d5 6379636C 		.ascii	"cycles_interrupt_flag\000"
 13727      65735F69 
 13727      6E746572 
 13727      72757074 
 13727      5F666C61 
 13728              	.LASF272:
 13729 00eb 62696E5F 		.ascii	"bin_max\000"
 13729      6D617800 
 13730              	.LASF286:
 13731 00f3 61646472 		.ascii	"addr_start_c\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 294


 13731      5F737461 
 13731      72745F63 
 13731      00
 13732              	.LASF29:
 13733 0100 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 13733      545F4D4F 
 13733      44455F45 
 13733      4D475F46 
 13733      43465300 
 13734              	.LASF89:
 13735 0114 63757272 		.ascii	"curr_lookup\000"
 13735      5F6C6F6F 
 13735      6B757000 
 13736              	.LASF212:
 13737 0120 70776D5F 		.ascii	"pwm_input\000"
 13737      696E7075 
 13737      7400
 13738              	.LASF57:
 13739 012a 72657374 		.ascii	"rest_counter\000"
 13739      5F636F75 
 13739      6E746572 
 13739      00
 13740              	.LASF132:
 13741 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 13741      41535445 
 13741      525F7370 
 13741      656300
 13742              	.LASF28:
 13743 0146 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 13743      545F4D4F 
 13743      44455F45 
 13743      4D475F49 
 13743      4E544547 
 13744              	.LASF258:
 13745 015e 765F636F 		.ascii	"v_count\000"
 13745      756E7400 
 13746              	.LASF184:
 13747 0166 72785F64 		.ascii	"rx_data\000"
 13747      61746100 
 13748              	.LASF247:
 13749 016e 7676765F 		.ascii	"vvv_value\000"
 13749      76616C75 
 13749      6500
 13750              	.LASF14:
 13751 0178 696E7438 		.ascii	"int8\000"
 13751      00
 13752              	.LASF189:
 13753 017d 696E666F 		.ascii	"info_\000"
 13753      5F00
 13754              	.LASF306:
 13755 0183 66696C74 		.ascii	"filt_emg\000"
 13755      5F656D67 
 13755      00
 13756              	.LASF104:
 13757 018c 73745F65 		.ascii	"st_emg\000"
 13757      6D6700
 13758              	.LASF55:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 295


 13759 0193 706F7369 		.ascii	"position_hist\000"
 13759      74696F6E 
 13759      5F686973 
 13759      7400
 13760              	.LASF171:
 13761 01a1 50524550 		.ascii	"PREPARE_DATA\000"
 13761      4152455F 
 13761      44415441 
 13761      00
 13762              	.LASF155:
 13763 01ae 74656D70 		.ascii	"temp_value\000"
 13763      5F76616C 
 13763      756500
 13764              	.LASF269:
 13765 01b9 7468725F 		.ascii	"thr_pos\000"
 13765      706F7300 
 13766              	.LASF139:
 13767 01c1 73745F57 		.ascii	"st_WR_spec\000"
 13767      525F7370 
 13767      656300
 13768              	.LASF205:
 13769 01cc 6572725F 		.ascii	"err_joy_2\000"
 13769      6A6F795F 
 13769      3200
 13770              	.LASF52:
 13771 01d6 72656164 		.ascii	"ready\000"
 13771      7900
 13772              	.LASF101:
 13773 01dc 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 13773      6964785F 
 13773      7573655F 
 13773      666F725F 
 13773      636F6E74 
 13774              	.LASF158:
 13775 01f4 6761696E 		.ascii	"gain\000"
 13775      00
 13776              	.LASF61:
 13777 01f9 73745F64 		.ascii	"st_device\000"
 13777      65766963 
 13777      6500
 13778              	.LASF27:
 13779 0203 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 13779      545F4D4F 
 13779      44455F45 
 13779      4D475F50 
 13779      524F504F 
 13780              	.LASF66:
 13781 021f 7573655F 		.ascii	"use_2nd_motor_flag\000"
 13781      326E645F 
 13781      6D6F746F 
 13781      725F666C 
 13781      616700
 13782              	.LASF252:
 13783 0232 55445F63 		.ascii	"UD_counter\000"
 13783      6F756E74 
 13783      657200
 13784              	.LASF167:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 296


 13785 023d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 13785      414E445F 
 13785      4D45414E 
 13785      00
 13786              	.LASF111:
 13787 024a 72656164 		.ascii	"read_imu_flag\000"
 13787      5F696D75 
 13787      5F666C61 
 13787      6700
 13788              	.LASF119:
 13789 0258 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 13789      72645F45 
 13789      4D475F68 
 13789      6973746F 
 13789      72795F6F 
 13790              	.LASF256:
 13791 0271 66697273 		.ascii	"first_tension_valid\000"
 13791      745F7465 
 13791      6E73696F 
 13791      6E5F7661 
 13791      6C696400 
 13792              	.LASF307:
 13793 0285 74696D65 		.ascii	"timer_value\000"
 13793      725F7661 
 13793      6C756500 
 13794              	.LASF4:
 13795 0291 6C6F6E67 		.ascii	"long int\000"
 13795      20696E74 
 13795      00
 13796              	.LASF145:
 13797 029a 756E7573 		.ascii	"unused_bytes1\000"
 13797      65645F62 
 13797      79746573 
 13797      3100
 13798              	.LASF192:
 13799 02a8 454D475F 		.ascii	"EMG_history_info_\000"
 13799      68697374 
 13799      6F72795F 
 13799      696E666F 
 13799      5F00
 13800              	.LASF217:
 13801 02ba 53485F45 		.ascii	"SH_ENC_L\000"
 13801      4E435F4C 
 13801      00
 13802              	.LASF65:
 13803 02c3 72657365 		.ascii	"reset_counters\000"
 13803      745F636F 
 13803      756E7465 
 13803      727300
 13804              	.LASF268:
 13805 02d2 62696E5F 		.ascii	"bin_threshold\000"
 13805      74687265 
 13805      73686F6C 
 13805      6400
 13806              	.LASF122:
 13807 02e0 75736572 		.ascii	"user_emg\000"
 13807      5F656D67 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 297


 13807      00
 13808              	.LASF241:
 13809 02e9 73616665 		.ascii	"safe_startup_motor_activation\000"
 13809      5F737461 
 13809      72747570 
 13809      5F6D6F74 
 13809      6F725F61 
 13810              	.LASF70:
 13811 0307 756E7573 		.ascii	"unused_bytes\000"
 13811      65645F62 
 13811      79746573 
 13811      00
 13812              	.LASF151:
 13813 0314 61636365 		.ascii	"accel_value\000"
 13813      6C5F7661 
 13813      6C756500 
 13814              	.LASF297:
 13815 0320 675F6164 		.ascii	"g_adc_measOld\000"
 13815      635F6D65 
 13815      61734F6C 
 13815      6400
 13816              	.LASF230:
 13817 032e 6175785F 		.ascii	"aux_encoder\000"
 13817      656E636F 
 13817      64657200 
 13818              	.LASF53:
 13819 033a 73745F63 		.ascii	"st_counters\000"
 13819      6F756E74 
 13819      65727300 
 13820              	.LASF216:
 13821 0346 53485F4D 		.ascii	"SH_MOT\000"
 13821      4F5400
 13822              	.LASF17:
 13823 034d 666C6F61 		.ascii	"float32\000"
 13823      74333200 
 13824              	.LASF226:
 13825 0355 656E636F 		.ascii	"encoder_reading_SPI\000"
 13825      6465725F 
 13825      72656164 
 13825      696E675F 
 13825      53504900 
 13826              	.LASF239:
 13827 0369 6572726F 		.ascii	"error\000"
 13827      7200
 13828              	.LASF54:
 13829 036f 656D675F 		.ascii	"emg_counter\000"
 13829      636F756E 
 13829      74657200 
 13830              	.LASF174:
 13831 037b 57524954 		.ascii	"WRITE_END\000"
 13831      455F454E 
 13831      4400
 13832              	.LASF253:
 13833 0385 4C525F63 		.ascii	"LR_counter\000"
 13833      6F756E74 
 13833      657200
 13834              	.LASF244:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 298


 13835 0390 706F735F 		.ascii	"pos_reconstruct\000"
 13835      7265636F 
 13835      6E737472 
 13835      75637400 
 13836              	.LASF260:
 13837 03a0 70776D5F 		.ascii	"pwm_limit_search\000"
 13837      6C696D69 
 13837      745F7365 
 13837      61726368 
 13837      00
 13838              	.LASF0:
 13839 03b1 7369676E 		.ascii	"signed char\000"
 13839      65642063 
 13839      68617200 
 13840              	.LASF121:
 13841 03bd 75736572 		.ascii	"user_code_string\000"
 13841      5F636F64 
 13841      655F7374 
 13841      72696E67 
 13841      00
 13842              	.LASF159:
 13843 03ce 73745F63 		.ascii	"st_calib\000"
 13843      616C6962 
 13843      00
 13844              	.LASF199:
 13845 03d7 6572725F 		.ascii	"err_emg_1\000"
 13845      656D675F 
 13845      3100
 13846              	.LASF200:
 13847 03e1 6572725F 		.ascii	"err_emg_2\000"
 13847      656D675F 
 13847      3200
 13848              	.LASF109:
 13849 03eb 73776974 		.ascii	"switch_emg\000"
 13849      63685F65 
 13849      6D6700
 13850              	.LASF317:
 13851 03f6 656D675F 		.ascii	"emg_2_status\000"
 13851      325F7374 
 13851      61747573 
 13851      00
 13852              	.LASF329:
 13853 0403 4144435F 		.ascii	"ADC_buf\000"
 13853      62756600 
 13854              	.LASF322:
 13855 040b 696E7465 		.ascii	"interrupt_flag\000"
 13855      72727570 
 13855      745F666C 
 13855      616700
 13856              	.LASF278:
 13857 041a 73746570 		.ascii	"step\000"
 13857      00
 13858              	.LASF219:
 13859 041f 63757272 		.ascii	"curr_error_sum\000"
 13859      5F657272 
 13859      6F725F73 
 13859      756D00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 299


 13860              	.LASF1:
 13861 042e 756E7369 		.ascii	"unsigned char\000"
 13861      676E6564 
 13861      20636861 
 13861      7200
 13862              	.LASF95:
 13863 043c 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 13863      72657665 
 13863      72735F6D 
 13863      6F746F72 
 13863      5F666C61 
 13864              	.LASF284:
 13865 0452 726F775F 		.ascii	"row_start\000"
 13865      73746172 
 13865      7400
 13866              	.LASF326:
 13867 045c 666F7263 		.ascii	"forced_open\000"
 13867      65645F6F 
 13867      70656E00 
 13868              	.LASF234:
 13869 0468 73706565 		.ascii	"speed_encoder\000"
 13869      645F656E 
 13869      636F6465 
 13869      7200
 13870              	.LASF292:
 13871 0476 675F7265 		.ascii	"g_refNew\000"
 13871      664E6577 
 13871      00
 13872              	.LASF276:
 13873 047f 63757272 		.ascii	"curr_off\000"
 13873      5F6F6666 
 13873      00
 13874              	.LASF64:
 13875 0488 72696768 		.ascii	"right_left\000"
 13875      745F6C65 
 13875      667400
 13876              	.LASF93:
 13877 0493 656E636F 		.ascii	"encoder_line\000"
 13877      6465725F 
 13877      6C696E65 
 13877      00
 13878              	.LASF344:
 13879 04a0 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 13879      73657273 
 13879      5C4D6174 
 13879      7469615C 
 13879      446F6375 
 13880 04ce 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Generic.cydsn\000"
 13880      656E6572 
 13880      69632D46 
 13880      572D5053 
 13880      6F43355C 
 13881              	.LASF316:
 13882 04f0 656D675F 		.ascii	"emg_1_status\000"
 13882      315F7374 
 13882      61747573 
 13882      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 300


 13883              	.LASF150:
 13884 04fd 666C6167 		.ascii	"flags\000"
 13884      7300
 13885              	.LASF198:
 13886 0503 68616E64 		.ascii	"handle_value\000"
 13886      6C655F76 
 13886      616C7565 
 13886      00
 13887              	.LASF20:
 13888 0510 63686172 		.ascii	"char\000"
 13888      00
 13889              	.LASF88:
 13890 0515 6D61785F 		.ascii	"max_step_pos\000"
 13890      73746570 
 13890      5F706F73 
 13890      00
 13891              	.LASF331:
 13892 0522 70776D5F 		.ascii	"pwm_sign\000"
 13892      7369676E 
 13892      00
 13893              	.LASF225:
 13894 052b 6D6F746F 		.ascii	"motor_control_generic\000"
 13894      725F636F 
 13894      6E74726F 
 13894      6C5F6765 
 13894      6E657269 
 13895              	.LASF339:
 13896 0541 675F696D 		.ascii	"g_imu\000"
 13896      7500
 13897              	.LASF305:
 13898 0547 66696C74 		.ascii	"filt_vel\000"
 13898      5F76656C 
 13898      00
 13899              	.LASF94:
 13900 0550 70776D5F 		.ascii	"pwm_rate_limiter\000"
 13900      72617465 
 13900      5F6C696D 
 13900      69746572 
 13900      00
 13901              	.LASF74:
 13902 0561 6B5F645F 		.ascii	"k_d_c\000"
 13902      6300
 13903              	.LASF170:
 13904 0567 6164635F 		.ascii	"adc_status\000"
 13904      73746174 
 13904      757300
 13905              	.LASF99:
 13906 0572 6D5F6D75 		.ascii	"m_mult\000"
 13906      6C7400
 13907              	.LASF73:
 13908 0579 6B5F695F 		.ascii	"k_i_c\000"
 13908      6300
 13909              	.LASF223:
 13910 057f 6D6F746F 		.ascii	"motor_dir\000"
 13910      725F6469 
 13910      7200
 13911              	.LASF271:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 301


 13912 0589 62696E5F 		.ascii	"bin_st\000"
 13912      737400
 13913              	.LASF177:
 13914 0590 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 13914      52533438 
 13914      355F5258 
 13914      5F457849 
 13914      6E746572 
 13915              	.LASF86:
 13916 05a9 706F735F 		.ascii	"pos_lim_sup\000"
 13916      6C696D5F 
 13916      73757000 
 13917              	.LASF157:
 13918 05b5 6F6C645F 		.ascii	"old_value\000"
 13918      76616C75 
 13918      6500
 13919              	.LASF107:
 13920 05bf 656D675F 		.ascii	"emg_speed\000"
 13920      73706565 
 13920      6400
 13921              	.LASF126:
 13922 05c9 72657374 		.ascii	"rest_vel\000"
 13922      5F76656C 
 13922      00
 13923              	.LASF164:
 13924 05d2 4E4F524D 		.ascii	"NORMAL\000"
 13924      414C00
 13925              	.LASF211:
 13926 05d9 6D6F746F 		.ascii	"motor_control_SH\000"
 13926      725F636F 
 13926      6E74726F 
 13926      6C5F5348 
 13926      00
 13927              	.LASF337:
 13928 05ea 7046696C 		.ascii	"pFile\000"
 13928      6500
 13929              	.LASF218:
 13930 05f0 706F735F 		.ascii	"pos_error_sum\000"
 13930      6572726F 
 13930      725F7375 
 13930      6D00
 13931              	.LASF118:
 13932 05fe 4144435F 		.ascii	"ADC_conf\000"
 13932      636F6E66 
 13932      00
 13933              	.LASF313:
 13934 0607 6465765F 		.ascii	"dev_tension_f\000"
 13934      74656E73 
 13934      696F6E5F 
 13934      6600
 13935              	.LASF76:
 13936 0615 6B5F695F 		.ascii	"k_i_dl\000"
 13936      646C00
 13937              	.LASF50:
 13938 061c 62756666 		.ascii	"buffer\000"
 13938      657200
 13939              	.LASF78:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 302


 13940 0623 6B5F705F 		.ascii	"k_p_c_dl\000"
 13940      635F646C 
 13940      00
 13941              	.LASF185:
 13942 062c 72785F64 		.ascii	"rx_data_type\000"
 13942      6174615F 
 13942      74797065 
 13942      00
 13943              	.LASF340:
 13944 0639 675F696D 		.ascii	"g_imuNew\000"
 13944      754E6577 
 13944      00
 13945              	.LASF162:
 13946 0642 73706565 		.ascii	"speed\000"
 13946      6400
 13947              	.LASF224:
 13948 0648 706F7369 		.ascii	"position_counter\000"
 13948      74696F6E 
 13948      5F636F75 
 13948      6E746572 
 13948      00
 13949              	.LASF280:
 13950 0659 74696D65 		.ascii	"timer_value_e\000"
 13950      725F7661 
 13950      6C75655F 
 13950      6500
 13951              	.LASF180:
 13952 0667 64617461 		.ascii	"data_packet_index\000"
 13952      5F706163 
 13952      6B65745F 
 13952      696E6465 
 13952      7800
 13953              	.LASF182:
 13954 0679 64617461 		.ascii	"data_packet_buffer\000"
 13954      5F706163 
 13954      6B65745F 
 13954      62756666 
 13954      657200
 13955              	.LASF196:
 13956 068c 73745F72 		.ascii	"st_ref_p\000"
 13956      65665F70 
 13956      00
 13957              	.LASF315:
 13958 0695 6379636C 		.ascii	"cycles_status\000"
 13958      65735F73 
 13958      74617475 
 13958      7300
 13959              	.LASF187:
 13960 06a3 636F756E 		.ascii	"counter_calibration\000"
 13960      7465725F 
 13960      63616C69 
 13960      62726174 
 13960      696F6E00 
 13961              	.LASF294:
 13962 06b7 675F6D65 		.ascii	"g_meas\000"
 13962      617300
 13963              	.LASF279:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 303


 13964 06be 74696D65 		.ascii	"timer_value_s\000"
 13964      725F7661 
 13964      6C75655F 
 13964      7300
 13965              	.LASF335:
 13966 06cc 456E636F 		.ascii	"Encoder_Check\000"
 13966      6465725F 
 13966      43686563 
 13966      6B00
 13967              	.LASF238:
 13968 06da 636F6D70 		.ascii	"comp_value_encoder\000"
 13968      5F76616C 
 13968      75655F65 
 13968      6E636F64 
 13968      657200
 13969              	.LASF332:
 13970 06ed 64617461 		.ascii	"data_encoder_raw\000"
 13970      5F656E63 
 13970      6F646572 
 13970      5F726177 
 13970      00
 13971              	.LASF291:
 13972 06fe 675F7265 		.ascii	"g_ref\000"
 13972      6600
 13973              	.LASF25:
 13974 0704 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 13974      545F4D4F 
 13974      44455F45 
 13974      58544552 
 13974      4E414C00 
 13975              	.LASF229:
 13976 0718 696E6465 		.ascii	"index\000"
 13976      7800
 13977              	.LASF137:
 13978 071e 6D617869 		.ascii	"maximum_pressure_kPa\000"
 13978      6D756D5F 
 13978      70726573 
 13978      73757265 
 13978      5F6B5061 
 13979              	.LASF127:
 13980 0733 72657374 		.ascii	"rest_position_flag\000"
 13980      5F706F73 
 13980      6974696F 
 13980      6E5F666C 
 13980      616700
 13981              	.LASF129:
 13982 0746 6A6F7973 		.ascii	"joystick_closure_speed\000"
 13982      7469636B 
 13982      5F636C6F 
 13982      73757265 
 13982      5F737065 
 13983              	.LASF79:
 13984 075d 6B5F695F 		.ascii	"k_i_c_dl\000"
 13984      635F646C 
 13984      00
 13985              	.LASF186:
 13986 0766 7061636B 		.ascii	"package_count\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 304


 13986      6167655F 
 13986      636F756E 
 13986      7400
 13987              	.LASF38:
 13988 0774 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 13988      5F414E44 
 13988      5F504F53 
 13988      5F434F4E 
 13988      54524F4C 
 13989              	.LASF160:
 13990 0789 656E6162 		.ascii	"enabled\000"
 13990      6C656400 
 13991              	.LASF5:
 13992 0791 6C6F6E67 		.ascii	"long unsigned int\000"
 13992      20756E73 
 13992      69676E65 
 13992      6420696E 
 13992      7400
 13993              	.LASF338:
 13994 07a3 70454D47 		.ascii	"pEMGHFile\000"
 13994      4846696C 
 13994      6500
 13995              	.LASF59:
 13996 07ad 746F7461 		.ascii	"total_time_on\000"
 13996      6C5F7469 
 13996      6D655F6F 
 13996      6E00
 13997              	.LASF172:
 13998 07bb 57524954 		.ascii	"WRITE_CYCLES\000"
 13998      455F4359 
 13998      434C4553 
 13998      00
 13999              	.LASF131:
 14000 07c8 6A6F7973 		.ascii	"joystick_gains\000"
 14000      7469636B 
 14000      5F676169 
 14000      6E7300
 14001              	.LASF45:
 14002 07d7 686F6C64 		.ascii	"hold_curr\000"
 14002      5F637572 
 14002      7200
 14003              	.LASF31:
 14004 07e1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14004      545F4D4F 
 14004      44455F4A 
 14004      4F595354 
 14004      49434B00 
 14005              	.LASF60:
 14006 07f5 746F7461 		.ascii	"total_time_rest\000"
 14006      6C5F7469 
 14006      6D655F72 
 14006      65737400 
 14007              	.LASF81:
 14008 0805 61637469 		.ascii	"activ\000"
 14008      7600
 14009              	.LASF263:
 14010 080b 6D696E5F 		.ascii	"min_tension\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 305


 14010      74656E73 
 14010      696F6E00 
 14011              	.LASF327:
 14012 0817 62617474 		.ascii	"battery_low_SoC\000"
 14012      6572795F 
 14012      6C6F775F 
 14012      536F4300 
 14013              	.LASF195:
 14014 0827 6D6F746F 		.ascii	"motor_idx\000"
 14014      725F6964 
 14014      7800
 14015              	.LASF98:
 14016 0831 6D5F6F66 		.ascii	"m_off\000"
 14016      6600
 14017              	.LASF320:
 14018 0837 72657365 		.ascii	"reset_last_value_flag\000"
 14018      745F6C61 
 14018      73745F76 
 14018      616C7565 
 14018      5F666C61 
 14019              	.LASF154:
 14020 084d 71756174 		.ascii	"quat_value\000"
 14020      5F76616C 
 14020      756500
 14021              	.LASF124:
 14022 0858 72657374 		.ascii	"rest_pos\000"
 14022      5F706F73 
 14022      00
 14023              	.LASF40:
 14024 0861 63757272 		.ascii	"curr\000"
 14024      00
 14025              	.LASF173:
 14026 0866 57414954 		.ascii	"WAIT_QUERY\000"
 14026      5F515545 
 14026      525900
 14027              	.LASF91:
 14028 0871 696E7075 		.ascii	"input_mode\000"
 14028      745F6D6F 
 14028      646500
 14029              	.LASF36:
 14030 087c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14030      524F4C5F 
 14030      50574D00 
 14031              	.LASF264:
 14032 0888 6379636C 		.ascii	"cycles_counter_update\000"
 14032      65735F63 
 14032      6F756E74 
 14032      65725F75 
 14032      70646174 
 14033              	.LASF342:
 14034 089e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14034      43313120 
 14034      352E342E 
 14034      31203230 
 14034      31363036 
 14035 08d1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14035      20726576 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 306


 14035      6973696F 
 14035      6E203233 
 14035      37373135 
 14036 0904 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14036      66756E63 
 14036      74696F6E 
 14036      2D736563 
 14036      74696F6E 
 14037              	.LASF42:
 14038 092c 73745F72 		.ascii	"st_ref\000"
 14038      656600
 14039              	.LASF308:
 14040 0933 74696D65 		.ascii	"timer_value0\000"
 14040      725F7661 
 14040      6C756530 
 14040      00
 14041              	.LASF123:
 14042 0940 73745F53 		.ascii	"st_SH_spec\000"
 14042      485F7370 
 14042      656300
 14043              	.LASF245:
 14044 094b 765F7661 		.ascii	"v_value\000"
 14044      6C756500 
 14045              	.LASF301:
 14046 0953 63616C69 		.ascii	"calib\000"
 14046      6200
 14047              	.LASF135:
 14048 0959 73745F46 		.ascii	"st_FB_spec\000"
 14048      425F7370 
 14048      656300
 14049              	.LASF6:
 14050 0964 6C6F6E67 		.ascii	"long long int\000"
 14050      206C6F6E 
 14050      6720696E 
 14050      7400
 14051              	.LASF34:
 14052 0972 53485F63 		.ascii	"SH_control_mode\000"
 14052      6F6E7472 
 14052      6F6C5F6D 
 14052      6F646500 
 14053              	.LASF191:
 14054 0982 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14054      4E445F4D 
 14054      4F544F52 
 14054      5F494458 
 14054      00
 14055              	.LASF328:
 14056 0993 6368616E 		.ascii	"change_ext_ref_flag\000"
 14056      67655F65 
 14056      78745F72 
 14056      65665F66 
 14056      6C616700 
 14057              	.LASF19:
 14058 09a7 646F7562 		.ascii	"double\000"
 14058      6C6500
 14059              	.LASF303:
 14060 09ae 66696C74 		.ascii	"filt_curr_diff\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 307


 14060      5F637572 
 14060      725F6469 
 14060      666600
 14061              	.LASF207:
 14062 09bd 706F735F 		.ascii	"pos_sum\000"
 14062      73756D00 
 14063              	.LASF210:
 14064 09c5 696E7465 		.ascii	"interrupt_manager\000"
 14064      72727570 
 14064      745F6D61 
 14064      6E616765 
 14064      7200
 14065              	.LASF97:
 14066 09d7 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14066      7261775F 
 14066      72656164 
 14066      5F636F6E 
 14066      6600
 14067              	.LASF208:
 14068 09e9 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14068      7574655F 
 14068      536F6674 
 14068      48616E64 
 14068      5F325F6D 
 14069              	.LASF163:
 14070 0a11 72657065 		.ascii	"repetitions\000"
 14070      74697469 
 14070      6F6E7300 
 14071              	.LASF87:
 14072 0a1d 6D61785F 		.ascii	"max_step_neg\000"
 14072      73746570 
 14072      5F6E6567 
 14072      00
 14073              	.LASF243:
 14074 0a2a 636F756E 		.ascii	"count_startup_motor\000"
 14074      745F7374 
 14074      61727475 
 14074      705F6D6F 
 14074      746F7200 
 14075              	.LASF134:
 14076 0a3e 736C6176 		.ascii	"slave_ID\000"
 14076      655F4944 
 14076      00
 14077              	.LASF168:
 14078 0a47 57414954 		.ascii	"WAIT\000"
 14078      00
 14079              	.LASF18:
 14080 0a4c 666C6F61 		.ascii	"float\000"
 14080      7400
 14081              	.LASF113:
 14082 0a52 494D555F 		.ascii	"IMU_conf\000"
 14082      636F6E66 
 14082      00
 14083              	.LASF257:
 14084 0a5b 636F756E 		.ascii	"count\000"
 14084      7400
 14085              	.LASF46:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 308


 14086 0a61 73745F61 		.ascii	"st_adc_meas\000"
 14086      64635F6D 
 14086      65617300 
 14087              	.LASF288:
 14088 0a6d 6D5F6164 		.ascii	"m_addr\000"
 14088      647200
 14089              	.LASF300:
 14090 0a74 635F6D65 		.ascii	"c_mem\000"
 14090      6D00
 14091              	.LASF8:
 14092 0a7a 756E7369 		.ascii	"unsigned int\000"
 14092      676E6564 
 14092      20696E74 
 14092      00
 14093              	.LASF270:
 14094 0a87 6D61785F 		.ascii	"max_pos\000"
 14094      706F7300 
 14095              	.LASF336:
 14096 0a8f 72657374 		.ascii	"rest_pos_curr_ref\000"
 14096      5F706F73 
 14096      5F637572 
 14096      725F7265 
 14096      6600
 14097              	.LASF144:
 14098 0aa1 666C6167 		.ascii	"flag\000"
 14098      00
 14099              	.LASF92:
 14100 0aa6 636F6E74 		.ascii	"control_mode\000"
 14100      726F6C5F 
 14100      6D6F6465 
 14100      00
 14101              	.LASF21:
 14102 0ab3 63797374 		.ascii	"cystatus\000"
 14102      61747573 
 14102      00
 14103              	.LASF26:
 14104 0abc 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14104      545F4D4F 
 14104      44455F45 
 14104      4E434F44 
 14104      45523300 
 14105              	.LASF110:
 14106 0ad0 73745F69 		.ascii	"st_imu\000"
 14106      6D7500
 14107              	.LASF202:
 14108 0ad7 63757272 		.ascii	"current_emg\000"
 14108      656E745F 
 14108      656D6700 
 14109              	.LASF183:
 14110 0ae3 72785F71 		.ascii	"rx_queue\000"
 14110      75657565 
 14110      00
 14111              	.LASF254:
 14112 0aec 55445F6D 		.ascii	"UD_mean_value\000"
 14112      65616E5F 
 14112      76616C75 
 14112      6500
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 309


 14113              	.LASF228:
 14114 0afa 6173736F 		.ascii	"assoc_motor\000"
 14114      635F6D6F 
 14114      746F7200 
 14115              	.LASF47:
 14116 0b06 6164645F 		.ascii	"add_emg\000"
 14116      656D6700 
 14117              	.LASF215:
 14118 0b0e 695F7265 		.ascii	"i_ref\000"
 14118      6600
 14119              	.LASF105:
 14120 0b14 656D675F 		.ascii	"emg_threshold\000"
 14120      74687265 
 14120      73686F6C 
 14120      6400
 14121              	.LASF281:
 14122 0b22 73617665 		.ascii	"save_cycles_eeprom\000"
 14122      5F637963 
 14122      6C65735F 
 14122      65657072 
 14122      6F6D00
 14123              	.LASF56:
 14124 0b35 63757272 		.ascii	"current_hist\000"
 14124      656E745F 
 14124      68697374 
 14124      00
 14125              	.LASF37:
 14126 0b42 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14126      524F4C5F 
 14126      43555252 
 14126      454E5400 
 14127              	.LASF23:
 14128 0b52 6C6F6E67 		.ascii	"long double\000"
 14128      20646F75 
 14128      626C6500 
 14129              	.LASF166:
 14130 0b5e 44495343 		.ascii	"DISCARD\000"
 14130      41524400 
 14131              	.LASF220:
 14132 0b66 70726576 		.ascii	"prev_pos_err\000"
 14132      5F706F73 
 14132      5F657272 
 14132      00
 14133              	.LASF236:
 14134 0b73 696E6974 		.ascii	"init_rot\000"
 14134      5F726F74 
 14134      00
 14135              	.LASF261:
 14136 0b7c 6D6F745F 		.ascii	"mot_idx\000"
 14136      69647800 
 14137              	.LASF304:
 14138 0b84 66696C74 		.ascii	"filt_i\000"
 14138      5F6900
 14139              	.LASF102:
 14140 0b8b 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14140      725F6861 
 14140      6E646C65 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 310


 14140      5F726174 
 14140      696F00
 14141              	.LASF302:
 14142 0b9e 66696C74 		.ascii	"filt_v\000"
 14142      5F7600
 14143              	.LASF325:
 14144 0ba5 72657374 		.ascii	"rest_enabled\000"
 14144      5F656E61 
 14144      626C6564 
 14144      00
 14145              	.LASF293:
 14146 0bb2 675F7265 		.ascii	"g_refOld\000"
 14146      664F6C64 
 14146      00
 14147              	.LASF213:
 14148 0bbb 706F735F 		.ascii	"pos_error\000"
 14148      6572726F 
 14148      7200
 14149              	.LASF152:
 14150 0bc5 6779726F 		.ascii	"gyro_value\000"
 14150      5F76616C 
 14150      756500
 14151              	.LASF115:
 14152 0bd0 63757272 		.ascii	"curr_time\000"
 14152      5F74696D 
 14152      6500
 14153              	.LASF100:
 14154 0bda 646F7562 		.ascii	"double_encoder_on_off\000"
 14154      6C655F65 
 14154      6E636F64 
 14154      65725F6F 
 14154      6E5F6F66 
 14155              	.LASF262:
 14156 0bf0 6D61785F 		.ascii	"max_tension\000"
 14156      74656E73 
 14156      696F6E00 
 14157              	.LASF190:
 14158 0bfc 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14158      525F4944 
 14158      5800
 14159              	.LASF237:
 14160 0c06 6C617374 		.ascii	"last_value_encoder\000"
 14160      5F76616C 
 14160      75655F65 
 14160      6E636F64 
 14160      657200
 14161              	.LASF188:
 14162 0c19 636F756E 		.ascii	"counter_tension_func\000"
 14162      7465725F 
 14162      74656E73 
 14162      696F6E5F 
 14162      66756E63 
 14163              	.LASF309:
 14164 0c2e 6379636C 		.ascii	"cycle_time\000"
 14164      655F7469 
 14164      6D6500
 14165              	.LASF209:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 311


 14166 0c39 66736D5F 		.ascii	"fsm_state\000"
 14166      73746174 
 14166      6500
 14167              	.LASF7:
 14168 0c43 6C6F6E67 		.ascii	"long long unsigned int\000"
 14168      206C6F6E 
 14168      6720756E 
 14168      7369676E 
 14168      65642069 
 14169              	.LASF318:
 14170 0c5a 6A6F795F 		.ascii	"joy_UD_status\000"
 14170      55445F73 
 14170      74617475 
 14170      7300
 14171              	.LASF51:
 14172 0c68 6C656E67 		.ascii	"length\000"
 14172      746800
 14173              	.LASF149:
 14174 0c6f 73745F69 		.ascii	"st_imu_data\000"
 14174      6D755F64 
 14174      61746100 
 14175              	.LASF153:
 14176 0c7b 6D61675F 		.ascii	"mag_value\000"
 14176      76616C75 
 14176      6500
 14177              	.LASF41:
 14178 0c85 6F6E6F66 		.ascii	"onoff\000"
 14178      6600
 14179              	.LASF232:
 14180 0c8b 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14180      76616C75 
 14180      655F656E 
 14180      636F6465 
 14180      725F3332 
 14181              	.LASF221:
 14182 0ca0 70726576 		.ascii	"prev_curr_err\000"
 14182      5F637572 
 14182      725F6572 
 14182      7200
 14183              	.LASF181:
 14184 0cae 64617461 		.ascii	"data_packet_length\000"
 14184      5F706163 
 14184      6B65745F 
 14184      6C656E67 
 14184      746800
 14185              	.LASF72:
 14186 0cc1 6B5F705F 		.ascii	"k_p_c\000"
 14186      6300
 14187              	.LASF310:
 14188 0cc7 6465765F 		.ascii	"dev_tension\000"
 14188      74656E73 
 14188      696F6E00 
 14189              	.LASF83:
 14190 0cd3 6D6F746F 		.ascii	"motor_driver_type\000"
 14190      725F6472 
 14190      69766572 
 14190      5F747970 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 312


 14190      6500
 14191              	.LASF169:
 14192 0ce5 57414954 		.ascii	"WAIT_EoC\000"
 14192      5F456F43 
 14192      00
 14193              	.LASF22:
 14194 0cee 72656738 		.ascii	"reg8\000"
 14194      00
 14195              	.LASF273:
 14196 0cf3 62696E5F 		.ascii	"bin_1\000"
 14196      3100
 14197              	.LASF274:
 14198 0cf9 62696E5F 		.ascii	"bin_2\000"
 14198      3200
 14199              	.LASF249:
 14200 0cff 695F6175 		.ascii	"i_aux\000"
 14200      7800
 14201              	.LASF138:
 14202 0d05 70726F70 		.ascii	"prop_err_fb_gain\000"
 14202      5F657272 
 14202      5F66625F 
 14202      6761696E 
 14202      00
 14203              	.LASF206:
 14204 0d16 706F735F 		.ascii	"pos_diff\000"
 14204      64696666 
 14204      00
 14205              	.LASF283:
 14206 0d1f 726F775F 		.ascii	"row_number\000"
 14206      6E756D62 
 14206      657200
 14207              	.LASF259:
 14208 0d2a 6F766572 		.ascii	"overcurrent_control\000"
 14208      63757272 
 14208      656E745F 
 14208      636F6E74 
 14208      726F6C00 
 14209              	.LASF275:
 14210 0d3e 63757272 		.ascii	"curr_pos\000"
 14210      5F706F73 
 14210      00
 14211              	.LASF165:
 14212 0d47 52455345 		.ascii	"RESET\000"
 14212      5400
 14213              	.LASF133:
 14214 0d4d 736C6176 		.ascii	"slave_comm_active\000"
 14214      655F636F 
 14214      6D6D5F61 
 14214      63746976 
 14214      6500
 14215              	.LASF248:
 14216 0d5f 616E616C 		.ascii	"analog_read_end\000"
 14216      6F675F72 
 14216      6561645F 
 14216      656E6400 
 14217              	.LASF333:
 14218 0d6f 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 313


 14218      636F6465 
 14218      725F4C69 
 14218      6E655F43 
 14218      6F6E6E65 
 14219              	.LASF69:
 14220 0d88 6465765F 		.ascii	"dev_type\000"
 14220      74797065 
 14220      00
 14221              	.LASF266:
 14222 0d91 656D675F 		.ascii	"emg_cycle_status\000"
 14222      6379636C 
 14222      655F7374 
 14222      61747573 
 14222      00
 14223              	.LASF120:
 14224 0da2 73745F75 		.ascii	"st_user\000"
 14224      73657200 
 14225              	.LASF103:
 14226 0daa 67656172 		.ascii	"gears_params\000"
 14226      735F7061 
 14226      72616D73 
 14226      00
 14227              	.LASF114:
 14228 0db7 73745F65 		.ascii	"st_expansion\000"
 14228      7870616E 
 14228      73696F6E 
 14228      00
 14229              	.LASF108:
 14230 0dc4 656D675F 		.ascii	"emg_calibration_flag\000"
 14230      63616C69 
 14230      62726174 
 14230      696F6E5F 
 14230      666C6167 
 14231              	.LASF43:
 14232 0dd9 73745F6D 		.ascii	"st_meas\000"
 14232      65617300 
 14233              	.LASF285:
 14234 0de1 61646472 		.ascii	"addr_start\000"
 14234      5F737461 
 14234      727400
 14235              	.LASF289:
 14236 0dec 70776D5F 		.ascii	"pwm_preload_values\000"
 14236      7072656C 
 14236      6F61645F 
 14236      76616C75 
 14236      657300
 14237              	.LASF130:
 14238 0dff 6A6F7973 		.ascii	"joystick_threshold\000"
 14238      7469636B 
 14238      5F746872 
 14238      6573686F 
 14238      6C6400
 14239              	.LASF32:
 14240 0e12 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14240      545F4D4F 
 14240      44455F45 
 14240      4D475F50 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 314


 14240      524F504F 
 14241              	.LASF176:
 14242 0e31 636F756E 		.ascii	"counter_status\000"
 14242      7465725F 
 14242      73746174 
 14242      757300
 14243              	.LASF299:
 14244 0e40 675F6D65 		.ascii	"g_mem\000"
 14244      6D00
 14245              	.LASF250:
 14246 0e46 656D675F 		.ascii	"emg_counter_1\000"
 14246      636F756E 
 14246      7465725F 
 14246      3100
 14247              	.LASF251:
 14248 0e54 656D675F 		.ascii	"emg_counter_2\000"
 14248      636F756E 
 14248      7465725F 
 14248      3200
 14249              	.LASF240:
 14250 0e62 6F6E6C79 		.ascii	"only_first_time\000"
 14250      5F666972 
 14250      73745F74 
 14250      696D6500 
 14251              	.LASF11:
 14252 0e72 75696E74 		.ascii	"uint8\000"
 14252      3800
 14253              	.LASF128:
 14254 0e78 73745F4A 		.ascii	"st_JOY_spec\000"
 14254      4F595F73 
 14254      70656300 
 14255              	.LASF235:
 14256 0e84 76616C75 		.ascii	"value_diff\000"
 14256      655F6469 
 14256      666600
 14257              	.LASF277:
 14258 0e8f 63757272 		.ascii	"curr_ref\000"
 14258      5F726566 
 14258      00
 14259              	.LASF2:
 14260 0e98 73686F72 		.ascii	"short int\000"
 14260      7420696E 
 14260      7400
 14261              	.LASF77:
 14262 0ea2 6B5F645F 		.ascii	"k_d_dl\000"
 14262      646C00
 14263              	.LASF233:
 14264 0ea9 76616C75 		.ascii	"value_encoder\000"
 14264      655F656E 
 14264      636F6465 
 14264      7200
 14265              	.LASF48:
 14266 0eb7 6A6F7973 		.ascii	"joystick\000"
 14266      7469636B 
 14266      00
 14267              	.LASF146:
 14268 0ec0 6D6F746F 		.ascii	"motor\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 315


 14268      7200
 14269              	.LASF312:
 14270 0ec6 6465765F 		.ascii	"dev_pwm_sat\000"
 14270      70776D5F 
 14270      73617400 
 14271              	.LASF62:
 14272 0ed2 68775F6D 		.ascii	"hw_maint_date\000"
 14272      61696E74 
 14272      5F646174 
 14272      6500
 14273              	.LASF193:
 14274 0ee0 66756E63 		.ascii	"function_scheduler\000"
 14274      74696F6E 
 14274      5F736368 
 14274      6564756C 
 14274      657200
 14275              	.LASF194:
 14276 0ef3 636F6D70 		.ascii	"compute_reference\000"
 14276      7574655F 
 14276      72656665 
 14276      72656E63 
 14276      6500
 14277              	.LASF222:
 14278 0f05 70726576 		.ascii	"prev_pwm\000"
 14278      5F70776D 
 14278      00
 14279              	.LASF63:
 14280 0f0e 73746174 		.ascii	"stats_period_begin_date\000"
 14280      735F7065 
 14280      72696F64 
 14280      5F626567 
 14280      696E5F64 
 14281              	.LASF290:
 14282 0f26 49544D5F 		.ascii	"ITM_RxBuffer\000"
 14282      52784275 
 14282      66666572 
 14282      00
 14283              	.LASF314:
 14284 0f33 706F775F 		.ascii	"pow_tension\000"
 14284      74656E73 
 14284      696F6E00 
 14285              	.LASF15:
 14286 0f3f 696E7431 		.ascii	"int16\000"
 14286      3600
 14287              	.LASF116:
 14288 0f45 72656164 		.ascii	"read_exp_port_flag\000"
 14288      5F657870 
 14288      5F706F72 
 14288      745F666C 
 14288      616700
 14289              	.LASF82:
 14290 0f58 61637469 		.ascii	"activate_pwm_rescaling\000"
 14290      76617465 
 14290      5F70776D 
 14290      5F726573 
 14290      63616C69 
 14291              	.LASF75:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 316


 14292 0f6f 6B5F705F 		.ascii	"k_p_dl\000"
 14292      646C00
 14293              	.LASF44:
 14294 0f76 65737469 		.ascii	"estim_curr\000"
 14294      6D5F6375 
 14294      727200
 14295              	.LASF311:
 14296 0f81 6465765F 		.ascii	"dev_pwm_limit\000"
 14296      70776D5F 
 14296      6C696D69 
 14296      7400
 14297              	.LASF282:
 14298 0f8f 73746174 		.ascii	"status\000"
 14298      757300
 14299              	.LASF214:
 14300 0f96 63757272 		.ascii	"curr_error\000"
 14300      5F657272 
 14300      6F7200
 14301              	.LASF334:
 14302 0fa1 456E636F 		.ascii	"Encoder_Value\000"
 14302      6465725F 
 14302      56616C75 
 14302      6500
 14303              	.LASF68:
 14304 0faf 75736572 		.ascii	"user_id\000"
 14304      5F696400 
 14305              	.LASF267:
 14306 0fb7 72657374 		.ascii	"rest_cycle_status\000"
 14306      5F637963 
 14306      6C655F73 
 14306      74617475 
 14306      7300
 14307              	.LASF204:
 14308 0fc9 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 14308      7574655F 
 14308      536F6674 
 14308      48616E64 
 14308      5F325F6D 
 14309              	.LASF231:
 14310 0ff6 746D705F 		.ascii	"tmp_value_encoder\000"
 14310      76616C75 
 14310      655F656E 
 14310      636F6465 
 14310      7200
 14311              	.LASF178:
 14312 1008 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 14312      4359434C 
 14312      45535F48 
 14312      616E646C 
 14312      657200
 14313              	.LASF67:
 14314 101b 62617564 		.ascii	"baud_rate\000"
 14314      5F726174 
 14314      6500
 14315              	.LASF141:
 14316 1025 66617374 		.ascii	"fast_act_threshold\000"
 14316      5F616374 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 317


 14316      5F746872 
 14316      6573686F 
 14316      6C6400
 14317              	.LASF112:
 14318 1038 5350495F 		.ascii	"SPI_read_delay\000"
 14318      72656164 
 14318      5F64656C 
 14318      617900
 14319              	.LASF3:
 14320 1047 73686F72 		.ascii	"short unsigned int\000"
 14320      7420756E 
 14320      7369676E 
 14320      65642069 
 14320      6E7400
 14321              	.LASF96:
 14322 105a 73745F65 		.ascii	"st_encoder\000"
 14322      6E636F64 
 14322      657200
 14323              	.LASF296:
 14324 1065 675F6164 		.ascii	"g_adc_meas\000"
 14324      635F6D65 
 14324      617300
 14325              	.LASF136:
 14326 1070 6D61785F 		.ascii	"max_residual_current\000"
 14326      72657369 
 14326      6475616C 
 14326      5F637572 
 14326      72656E74 
 14327              	.LASF201:
 14328 1085 454E435F 		.ascii	"ENC_L\000"
 14328      4C00
 14329              	.LASF143:
 14330 108b 73745F65 		.ascii	"st_eeprom\000"
 14330      6570726F 
 14330      6D00
 14331              	.LASF319:
 14332 1095 6A6F795F 		.ascii	"joy_LR_status\000"
 14332      4C525F73 
 14332      74617475 
 14332      7300
 14333              	.LASF343:
 14334 10a3 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 14334      72635C69 
 14334      6E746572 
 14334      72757074 
 14334      696F6E73 
 14335              	.LASF197:
 14336 10ba 73745F72 		.ascii	"st_refOld_p\000"
 14336      65664F6C 
 14336      645F7000 
 14337              	.LASF16:
 14338 10c6 696E7433 		.ascii	"int32\000"
 14338      3200
 14339              	.LASF330:
 14340 10cc 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 14340      4F465F41 
 14340      4E414C4F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 318


 14340      475F494E 
 14340      50555453 
 14341              	.LASF71:
 14342 10e1 73745F6D 		.ascii	"st_motor\000"
 14342      6F746F72 
 14342      00
 14343              	.LASF341:
 14344 10ea 6D617374 		.ascii	"master_mode\000"
 14344      65725F6D 
 14344      6F646500 
 14345              	.LASF39:
 14346 10f6 46535F46 		.ascii	"FS_FILE\000"
 14346      494C4500 
 14347              	.LASF84:
 14348 10fe 706F735F 		.ascii	"pos_lim_flag\000"
 14348      6C696D5F 
 14348      666C6167 
 14348      00
 14349              	.LASF255:
 14350 110b 4C525F6D 		.ascii	"LR_mean_value\000"
 14350      65616E5F 
 14350      76616C75 
 14350      6500
 14351              	.LASF295:
 14352 1119 675F6D65 		.ascii	"g_measOld\000"
 14352      61734F6C 
 14352      6400
 14353              	.LASF287:
 14354 1123 726F775F 		.ascii	"row_end\000"
 14354      656E6400 
 14355              	.LASF35:
 14356 112b 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 14356      524F4C5F 
 14356      414E474C 
 14356      4500
 14357              	.LASF9:
 14358 1139 5F5F696E 		.ascii	"__int32_t\000"
 14358      7433325F 
 14358      7400
 14359              	.LASF58:
 14360 1143 77697265 		.ascii	"wire_disp\000"
 14360      5F646973 
 14360      7000
 14361              	.LASF324:
 14362 114d 63616E5F 		.ascii	"can_write\000"
 14362      77726974 
 14362      6500
 14363              	.LASF106:
 14364 1157 656D675F 		.ascii	"emg_max_value\000"
 14364      6D61785F 
 14364      76616C75 
 14364      6500
 14365              	.LASF90:
 14366 1165 63757272 		.ascii	"current_limit\000"
 14366      656E745F 
 14366      6C696D69 
 14366      7400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccqGcnLs.s 			page 319


 14367              	.LASF33:
 14368 1173 53485F69 		.ascii	"SH_input_mode\000"
 14368      6E707574 
 14368      5F6D6F64 
 14368      6500
 14369              	.LASF175:
 14370 1181 4E4F4E45 		.ascii	"NONE\000"
 14370      00
 14371              	.LASF140:
 14372 1186 61637469 		.ascii	"activation_mode\000"
 14372      76617469 
 14372      6F6E5F6D 
 14372      6F646500 
 14373              	.LASF12:
 14374 1196 75696E74 		.ascii	"uint16\000"
 14374      313600
 14375              	.LASF125:
 14376 119d 72657374 		.ascii	"rest_delay\000"
 14376      5F64656C 
 14376      617900
 14377              	.LASF156:
 14378 11a8 73745F66 		.ascii	"st_filter\000"
 14378      696C7465 
 14378      7200
 14379              	.LASF246:
 14380 11b2 76765F76 		.ascii	"vv_value\000"
 14380      616C7565 
 14380      00
 14381              	.LASF80:
 14382 11bb 6B5F645F 		.ascii	"k_d_c_dl\000"
 14382      635F646C 
 14382      00
 14383              	.LASF161:
 14384 11c4 64697265 		.ascii	"direction\000"
 14384      6374696F 
 14384      6E00
 14385              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
