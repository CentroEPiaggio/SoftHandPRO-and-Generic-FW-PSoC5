ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 6)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 185 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 185 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 186:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 186 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
 263 00b8 01E0     		b	.L19
 264              	.L18:
 187:..\src/interruptions.c ****                 else                //packet is for others
 188:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 188 0
 266 00ba 0123     		movs	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 9


 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 189:..\src/interruptions.c ****                 
 190:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 190 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 191:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 191 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 192:..\src/interruptions.c ****                 break;
 277              		.loc 1 192 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 193:..\src/interruptions.c **** 
 194:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 195:..\src/interruptions.c ****             case  WAIT_LENGTH:
 196:..\src/interruptions.c **** 
 197:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 197 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 198:..\src/interruptions.c ****                 // check validity of pack length
 199:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 199 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 200:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 200 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 201:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 201 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 202:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 202 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
 203:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 203 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 204:..\src/interruptions.c ****                     state = WAIT_START;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 10


 308              		.loc 1 204 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 205:..\src/interruptions.c ****                 } else {
 206:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 206 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     
 208:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 208 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 209:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 209 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 210:..\src/interruptions.c ****                     else
 211:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 211 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 212:..\src/interruptions.c ****                 }
 213:..\src/interruptions.c ****                 break;
 332              		.loc 1 213 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 214:..\src/interruptions.c **** 
 215:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 216:..\src/interruptions.c ****             case RECEIVE:
 217:..\src/interruptions.c **** 
 218:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 218 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 219:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 219 0
 343 0126 304B     		ldr	r3, .L31+16
 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 220:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 11


 221:..\src/interruptions.c ****                 // check end of transmission
 222:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 222 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 223:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 224:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 224 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 225:..\src/interruptions.c ****                         // copying data from buffer to global packet
 226:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 226 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 227:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 227 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 228:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 228 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 229:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 229 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 230:..\src/interruptions.c ****                     }
 231:..\src/interruptions.c ****                     
 232:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 232 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 233:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 233 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
 387 0174 1A70     		strb	r2, [r3]
 234:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 234 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 12


 235:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 235 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 236:..\src/interruptions.c ****                 
 237:..\src/interruptions.c ****                 }
 238:..\src/interruptions.c ****                 break;
 396              		.loc 1 238 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 239:..\src/interruptions.c **** 
 240:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 241:..\src/interruptions.c ****             case UNLOAD:
 242:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 242 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 243:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 243 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 244:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 244 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 245:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 245 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 246:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 246 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 247:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 247 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 248:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 248 0
 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 249:..\src/interruptions.c ****                 }
 250:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 13


 433              		.loc 1 250 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 052B     		cmp	r3, #5
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 251:..\src/interruptions.c ****         }
 252:..\src/interruptions.c ****     }
 253:..\src/interruptions.c **** }
 446              		.loc 1 253 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10355
 458 01dc 04000000 		.word	rx_queue.10359
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10357
 461 01e8 08000000 		.word	data_packet_index.10356
 462 01ec 0C000000 		.word	data_packet_buffer.10358
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fdiv
 469              		.section	.text.function_scheduler,"ax",%progbits
 470              		.align	2
 471              		.global	function_scheduler
 472              		.thumb
 473              		.thumb_func
 474              		.type	function_scheduler, %function
 475              	function_scheduler:
 476              	.LFB67:
 254:..\src/interruptions.c **** //==============================================================================
 255:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 256:..\src/interruptions.c **** //==============================================================================
 257:..\src/interruptions.c **** // Call all the function with the right frequency
 258:..\src/interruptions.c **** //==============================================================================
 259:..\src/interruptions.c **** // Base frequency 1000 Hz
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 14


 262:..\src/interruptions.c **** void function_scheduler(void) {
 477              		.loc 1 262 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 2504
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 B0B5     		push	{r4, r5, r7, lr}
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 ADF6C81D 		subw	sp, sp, #2504
 488              		.cfi_def_cfa_offset 2520
 489 0006 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 263:..\src/interruptions.c ****  
 264:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 265:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 266:..\src/interruptions.c ****     char info_[2500] = "";
 491              		.loc 1 266 0
 492 0008 3B46     		mov	r3, r7
 493 000a 0022     		movs	r2, #0
 494 000c 1A60     		str	r2, [r3]
 495 000e 0433     		adds	r3, r3, #4
 496 0010 4FF41C62 		mov	r2, #2496
 497 0014 0021     		movs	r1, #0
 498 0016 1846     		mov	r0, r3
 499 0018 FFF7FEFF 		bl	memset
 267:..\src/interruptions.c ****     
 268:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 500              		.loc 1 268 0
 501 001c 0023     		movs	r3, #0
 502 001e 87F8C639 		strb	r3, [r7, #2502]
 269:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 503              		.loc 1 269 0
 504 0022 0123     		movs	r3, #1
 505 0024 87F8C539 		strb	r3, [r7, #2501]
 270:..\src/interruptions.c ****     
 271:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 506              		.loc 1 271 0
 507 0028 0020     		movs	r0, #0
 508 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 272:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 509              		.loc 1 272 0
 510 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 511 0032 0346     		mov	r3, r0
 512 0034 1A46     		mov	r2, r3
 513 0036 4A4B     		ldr	r3, .L60
 514 0038 1A80     		strh	r2, [r3]	@ movhi
 273:..\src/interruptions.c **** 
 274:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 275:..\src/interruptions.c **** 
 276:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 515              		.loc 1 276 0
 516 003a 0120     		movs	r0, #1
 517 003c FFF7FEFF 		bl	ADC_SOC_Write
 277:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 15


 278:..\src/interruptions.c ****     // Check Interrupt 
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     if (interrupt_flag){
 518              		.loc 1 280 0
 519 0040 484B     		ldr	r3, .L60+4
 520 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0044 002B     		cmp	r3, #0
 522 0046 04D0     		beq	.L34
 281:..\src/interruptions.c ****         interrupt_flag = FALSE;
 523              		.loc 1 281 0
 524 0048 464B     		ldr	r3, .L60+4
 525 004a 0022     		movs	r2, #0
 526 004c 1A70     		strb	r2, [r3]
 282:..\src/interruptions.c ****         interrupt_manager();
 527              		.loc 1 282 0
 528 004e FFF7FEFF 		bl	interrupt_manager
 529              	.L34:
 283:..\src/interruptions.c ****     }
 284:..\src/interruptions.c ****     
 285:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){
 530              		.loc 1 285 0
 531 0052 454B     		ldr	r3, .L60+8
 532 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 533 0058 002B     		cmp	r3, #0
 534 005a 42D1     		bne	.L35
 286:..\src/interruptions.c ****         
 287:..\src/interruptions.c ****         //---------------------------------- Get Encoders
 288:..\src/interruptions.c ****         
 289:..\src/interruptions.c ****         // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 290:..\src/interruptions.c ****         if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 535              		.loc 1 290 0
 536 005c 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 537 0060 4149     		ldr	r1, .L60+8
 538 0062 1346     		mov	r3, r2
 539 0064 DB00     		lsls	r3, r3, #3
 540 0066 9B1A     		subs	r3, r3, r2
 541 0068 1B01     		lsls	r3, r3, #4
 542 006a 0B44     		add	r3, r3, r1
 543 006c 03F58873 		add	r3, r3, #272
 544 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 545 0072 1A46     		mov	r2, r3
 546 0074 3D4B     		ldr	r3, .L60+12
 547 0076 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 548 0078 002B     		cmp	r3, #0
 549 007a 25D0     		beq	.L36
 291:..\src/interruptions.c ****             // Change CS only if there are attached encoders on the line
 292:..\src/interruptions.c ****             Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 550              		.loc 1 292 0
 551 007c 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 552 0080 3949     		ldr	r1, .L60+8
 553 0082 1346     		mov	r3, r2
 554 0084 DB00     		lsls	r3, r3, #3
 555 0086 9B1A     		subs	r3, r3, r2
 556 0088 1B01     		lsls	r3, r3, #4
 557 008a 0B44     		add	r3, r3, r1
 558 008c 03F58873 		add	r3, r3, #272
 559 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 16


 560 0092 1846     		mov	r0, r3
 561 0094 FFF7FEFF 		bl	Change_CS_EncoderLine
 293:..\src/interruptions.c ****             
 294:..\src/interruptions.c ****             encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 for 
 562              		.loc 1 294 0
 563 0098 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 564 009c 3249     		ldr	r1, .L60+8
 565 009e 1346     		mov	r3, r2
 566 00a0 DB00     		lsls	r3, r3, #3
 567 00a2 9B1A     		subs	r3, r3, r2
 568 00a4 1B01     		lsls	r3, r3, #4
 569 00a6 0B44     		add	r3, r3, r1
 570 00a8 03F58873 		add	r3, r3, #272
 571 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572 00ae 0021     		movs	r1, #0
 573 00b0 1846     		mov	r0, r3
 574 00b2 FFF7FEFF 		bl	encoder_reading_SPI
 295:..\src/interruptions.c **** 
 296:..\src/interruptions.c ****             // Check Interrupt     
 297:..\src/interruptions.c ****             
 298:..\src/interruptions.c ****             if (interrupt_flag){
 575              		.loc 1 298 0
 576 00b6 2B4B     		ldr	r3, .L60+4
 577 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 578 00ba 002B     		cmp	r3, #0
 579 00bc 04D0     		beq	.L36
 299:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 580              		.loc 1 299 0
 581 00be 294B     		ldr	r3, .L60+4
 582 00c0 0022     		movs	r2, #0
 583 00c2 1A70     		strb	r2, [r3]
 300:..\src/interruptions.c ****                 interrupt_manager();
 584              		.loc 1 300 0
 585 00c4 FFF7FEFF 		bl	interrupt_manager
 586              	.L36:
 301:..\src/interruptions.c ****             }
 302:..\src/interruptions.c ****         }
 303:..\src/interruptions.c ****         
 304:..\src/interruptions.c ****         //---------------------------------- Control SH Motor
 305:..\src/interruptions.c ****         
 306:..\src/interruptions.c ****         motor_control_SH();
 587              		.loc 1 306 0
 588 00c8 FFF7FEFF 		bl	motor_control_SH
 307:..\src/interruptions.c **** 
 308:..\src/interruptions.c ****         // Check Interrupt 
 309:..\src/interruptions.c **** 
 310:..\src/interruptions.c ****         if (interrupt_flag){
 589              		.loc 1 310 0
 590 00cc 254B     		ldr	r3, .L60+4
 591 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 592 00d0 002B     		cmp	r3, #0
 593 00d2 00F08B80 		beq	.L38
 311:..\src/interruptions.c ****             interrupt_flag = FALSE;
 594              		.loc 1 311 0
 595 00d6 234B     		ldr	r3, .L60+4
 596 00d8 0022     		movs	r2, #0
 597 00da 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 17


 312:..\src/interruptions.c ****             interrupt_manager();
 598              		.loc 1 312 0
 599 00dc FFF7FEFF 		bl	interrupt_manager
 600 00e0 84E0     		b	.L38
 601              	.L35:
 602              	.LBB2:
 313:..\src/interruptions.c ****         }  
 314:..\src/interruptions.c ****     }
 315:..\src/interruptions.c ****     else {      // GENERIC device
 316:..\src/interruptions.c **** 
 317:..\src/interruptions.c ****         //---------------------------------- Get Encoders
 318:..\src/interruptions.c **** 
 319:..\src/interruptions.c ****         for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 603              		.loc 1 319 0
 604 00e2 0023     		movs	r3, #0
 605 00e4 87F8C739 		strb	r3, [r7, #2503]
 606 00e8 5BE0     		b	.L39
 607              	.L44:
 320:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 608              		.loc 1 320 0
 609 00ea 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 610 00ee 1F4A     		ldr	r2, .L60+12
 611 00f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 612 00f2 002B     		cmp	r3, #0
 613 00f4 50D0     		beq	.L40
 321:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 322:..\src/interruptions.c ****                 Change_CS_EncoderLine(i);
 614              		.loc 1 322 0
 615 00f6 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 616 00fa 1846     		mov	r0, r3
 617 00fc FFF7FEFF 		bl	Change_CS_EncoderLine
 323:..\src/interruptions.c ****                           
 324:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 618              		.loc 1 324 0
 619 0100 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 620 0104 1849     		ldr	r1, .L60+8
 621 0106 1346     		mov	r3, r2
 622 0108 DB00     		lsls	r3, r3, #3
 623 010a 9B1A     		subs	r3, r3, r2
 624 010c 1B01     		lsls	r3, r3, #4
 625 010e 0B44     		add	r3, r3, r1
 626 0110 03F58873 		add	r3, r3, #272
 627 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 628 0116 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 629 011a 9A42     		cmp	r2, r3
 630 011c 08D1     		bne	.L41
 325:..\src/interruptions.c ****                     // Check if the line is used to control motor or not
 326:..\src/interruptions.c ****                     encoder_reading_SPI(i, MOTOR_IDX); 
 631              		.loc 1 326 0
 632 011e 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 633 0122 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 634 0126 1146     		mov	r1, r2
 635 0128 1846     		mov	r0, r3
 636 012a FFF7FEFF 		bl	encoder_reading_SPI
 637 012e 2AE0     		b	.L42
 638              	.L41:
 327:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 18


 328:..\src/interruptions.c ****                 else {
 329:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 639              		.loc 1 329 0
 640 0130 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 641 0134 0C49     		ldr	r1, .L60+8
 642 0136 1346     		mov	r3, r2
 643 0138 DB00     		lsls	r3, r3, #3
 644 013a 9B1A     		subs	r3, r3, r2
 645 013c 1B01     		lsls	r3, r3, #4
 646 013e 0B44     		add	r3, r3, r1
 647 0140 03F58873 		add	r3, r3, #272
 648 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 649 0146 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 650 014a 9A42     		cmp	r2, r3
 651 014c 10D1     		bne	.L43
 330:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 331:..\src/interruptions.c ****                         encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 652              		.loc 1 331 0
 653 014e 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 654 0152 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 655 0156 1146     		mov	r1, r2
 656 0158 1846     		mov	r0, r3
 657 015a FFF7FEFF 		bl	encoder_reading_SPI
 658 015e 12E0     		b	.L42
 659              	.L61:
 660              		.align	2
 661              	.L60:
 662 0160 00000000 		.word	timer_value0
 663 0164 00000000 		.word	interrupt_flag
 664 0168 00000000 		.word	c_mem
 665 016c 00000000 		.word	N_Encoder_Line_Connected
 666              	.L43:
 332:..\src/interruptions.c ****                     }
 333:..\src/interruptions.c ****                     else {
 334:..\src/interruptions.c ****                         // Get only raw encoder value
 335:..\src/interruptions.c ****                         ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 667              		.loc 1 335 0
 668 0170 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 669 0174 AC4A     		ldr	r2, .L62
 670 0176 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 671 0178 1A46     		mov	r2, r3
 672 017a 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 673 017e 1946     		mov	r1, r3
 674 0180 1046     		mov	r0, r2
 675 0182 FFF7FEFF 		bl	ReadEncoderLine
 676              	.L42:
 336:..\src/interruptions.c ****                         // Values are stored in Encoder_Value[i] vector
 337:..\src/interruptions.c ****                     }
 338:..\src/interruptions.c ****                 }
 339:..\src/interruptions.c **** 
 340:..\src/interruptions.c ****                 // Check Interrupt     
 341:..\src/interruptions.c ****                 
 342:..\src/interruptions.c ****                 if (interrupt_flag){
 677              		.loc 1 342 0
 678 0186 A94B     		ldr	r3, .L62+4
 679 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 018a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 19


 681 018c 04D0     		beq	.L40
 343:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 682              		.loc 1 343 0
 683 018e A74B     		ldr	r3, .L62+4
 684 0190 0022     		movs	r2, #0
 685 0192 1A70     		strb	r2, [r3]
 344:..\src/interruptions.c ****                     interrupt_manager();
 686              		.loc 1 344 0
 687 0194 FFF7FEFF 		bl	interrupt_manager
 688              	.L40:
 319:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 689              		.loc 1 319 0 discriminator 2
 690 0198 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 691 019c 0133     		adds	r3, r3, #1
 692 019e 87F8C739 		strb	r3, [r7, #2503]
 693              	.L39:
 319:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 694              		.loc 1 319 0 is_stmt 0 discriminator 1
 695 01a2 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 696 01a6 012B     		cmp	r3, #1
 697 01a8 9FD9     		bls	.L44
 698              	.LBE2:
 345:..\src/interruptions.c ****                 }
 346:..\src/interruptions.c ****             }
 347:..\src/interruptions.c ****         } 
 348:..\src/interruptions.c ****         
 349:..\src/interruptions.c ****         //---------------------------------- Control Motor
 350:..\src/interruptions.c ****         
 351:..\src/interruptions.c ****         // Control MOTOR_IDX motor (always active) according to motor driver type
 352:..\src/interruptions.c ****         motor_control_generic(MOTOR_IDX);
 699              		.loc 1 352 0 is_stmt 1
 700 01aa 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 701 01ae 1846     		mov	r0, r3
 702 01b0 FFF7FEFF 		bl	motor_control_generic
 353:..\src/interruptions.c ****         
 354:..\src/interruptions.c ****         // Check Interrupt 
 355:..\src/interruptions.c **** 
 356:..\src/interruptions.c ****         if (interrupt_flag){
 703              		.loc 1 356 0
 704 01b4 9D4B     		ldr	r3, .L62+4
 705 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 706 01b8 002B     		cmp	r3, #0
 707 01ba 04D0     		beq	.L45
 357:..\src/interruptions.c ****             interrupt_flag = FALSE;
 708              		.loc 1 357 0
 709 01bc 9B4B     		ldr	r3, .L62+4
 710 01be 0022     		movs	r2, #0
 711 01c0 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****             interrupt_manager();
 712              		.loc 1 358 0
 713 01c2 FFF7FEFF 		bl	interrupt_manager
 714              	.L45:
 359:..\src/interruptions.c ****         }
 360:..\src/interruptions.c ****         
 361:..\src/interruptions.c ****         // Control 2nd motor (if necessary) according to motor driver type
 362:..\src/interruptions.c ****         if (c_mem.dev.use_2nd_motor_flag == TRUE){
 715              		.loc 1 362 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 20


 716 01c6 9A4B     		ldr	r3, .L62+8
 717 01c8 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 718 01cc 012B     		cmp	r3, #1
 719 01ce 0DD1     		bne	.L38
 363:..\src/interruptions.c ****             motor_control_generic(SECOND_MOTOR_IDX);
 720              		.loc 1 363 0
 721 01d0 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 722 01d4 1846     		mov	r0, r3
 723 01d6 FFF7FEFF 		bl	motor_control_generic
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Check Interrupt 
 366:..\src/interruptions.c **** 
 367:..\src/interruptions.c ****             if (interrupt_flag){
 724              		.loc 1 367 0
 725 01da 944B     		ldr	r3, .L62+4
 726 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01de 002B     		cmp	r3, #0
 728 01e0 04D0     		beq	.L38
 368:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 729              		.loc 1 368 0
 730 01e2 924B     		ldr	r3, .L62+4
 731 01e4 0022     		movs	r2, #0
 732 01e6 1A70     		strb	r2, [r3]
 369:..\src/interruptions.c ****                 interrupt_manager();
 733              		.loc 1 369 0
 734 01e8 FFF7FEFF 		bl	interrupt_manager
 735              	.L38:
 370:..\src/interruptions.c ****             }
 371:..\src/interruptions.c ****         }  
 372:..\src/interruptions.c ****     }
 373:..\src/interruptions.c **** 
 374:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 375:..\src/interruptions.c **** 
 376:..\src/interruptions.c ****     analog_read_end();
 736              		.loc 1 376 0
 737 01ec FFF7FEFF 		bl	analog_read_end
 377:..\src/interruptions.c **** 
 378:..\src/interruptions.c ****     if (interrupt_flag){
 738              		.loc 1 378 0
 739 01f0 8E4B     		ldr	r3, .L62+4
 740 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 741 01f4 002B     		cmp	r3, #0
 742 01f6 04D0     		beq	.L46
 379:..\src/interruptions.c ****         interrupt_flag = FALSE;
 743              		.loc 1 379 0
 744 01f8 8C4B     		ldr	r3, .L62+4
 745 01fa 0022     		movs	r2, #0
 746 01fc 1A70     		strb	r2, [r3]
 380:..\src/interruptions.c ****         interrupt_manager();
 747              		.loc 1 380 0
 748 01fe FFF7FEFF 		bl	interrupt_manager
 749              	.L46:
 381:..\src/interruptions.c ****     }
 382:..\src/interruptions.c **** 
 383:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 384:..\src/interruptions.c **** 
 385:..\src/interruptions.c ****     overcurrent_control();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 21


 750              		.loc 1 385 0
 751 0202 FFF7FEFF 		bl	overcurrent_control
 386:..\src/interruptions.c ****     
 387:..\src/interruptions.c ****     // Check Interrupt 
 388:..\src/interruptions.c ****     
 389:..\src/interruptions.c ****     if (interrupt_flag){
 752              		.loc 1 389 0
 753 0206 894B     		ldr	r3, .L62+4
 754 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 755 020a 002B     		cmp	r3, #0
 756 020c 04D0     		beq	.L47
 390:..\src/interruptions.c ****         interrupt_flag = FALSE;
 757              		.loc 1 390 0
 758 020e 874B     		ldr	r3, .L62+4
 759 0210 0022     		movs	r2, #0
 760 0212 1A70     		strb	r2, [r3]
 391:..\src/interruptions.c ****         interrupt_manager();
 761              		.loc 1 391 0
 762 0214 FFF7FEFF 		bl	interrupt_manager
 763              	.L47:
 392:..\src/interruptions.c ****     }
 393:..\src/interruptions.c **** 
 394:..\src/interruptions.c ****     //---------------------------------- Calibration 
 395:..\src/interruptions.c **** 
 396:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 397:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 764              		.loc 1 397 0
 765 0218 864B     		ldr	r3, .L62+12
 766 021a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 767 021c 012B     		cmp	r3, #1
 768 021e 0ED1     		bne	.L48
 398:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 769              		.loc 1 398 0
 770 0220 854B     		ldr	r3, .L62+16
 771 0222 1B88     		ldrh	r3, [r3]
 772 0224 0A2B     		cmp	r3, #10
 773 0226 04D1     		bne	.L49
 399:..\src/interruptions.c ****             calibration();
 774              		.loc 1 399 0
 775 0228 FFF7FEFF 		bl	calibration
 400:..\src/interruptions.c ****             counter_calibration = 0;
 776              		.loc 1 400 0
 777 022c 824B     		ldr	r3, .L62+16
 778 022e 0022     		movs	r2, #0
 779 0230 1A80     		strh	r2, [r3]	@ movhi
 780              	.L49:
 401:..\src/interruptions.c ****         }
 402:..\src/interruptions.c ****         counter_calibration++;
 781              		.loc 1 402 0
 782 0232 814B     		ldr	r3, .L62+16
 783 0234 1B88     		ldrh	r3, [r3]
 784 0236 0133     		adds	r3, r3, #1
 785 0238 9AB2     		uxth	r2, r3
 786 023a 7F4B     		ldr	r3, .L62+16
 787 023c 1A80     		strh	r2, [r3]	@ movhi
 788              	.L48:
 403:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 22


 404:..\src/interruptions.c **** 
 405:..\src/interruptions.c ****     // Check Interrupt 
 406:..\src/interruptions.c ****     
 407:..\src/interruptions.c ****     if (interrupt_flag){
 789              		.loc 1 407 0
 790 023e 7B4B     		ldr	r3, .L62+4
 791 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 792 0242 002B     		cmp	r3, #0
 793 0244 04D0     		beq	.L50
 408:..\src/interruptions.c ****         interrupt_flag = FALSE;
 794              		.loc 1 408 0
 795 0246 794B     		ldr	r3, .L62+4
 796 0248 0022     		movs	r2, #0
 797 024a 1A70     		strb	r2, [r3]
 409:..\src/interruptions.c ****         interrupt_manager();
 798              		.loc 1 409 0
 799 024c FFF7FEFF 		bl	interrupt_manager
 800              	.L50:
 410:..\src/interruptions.c ****     }
 411:..\src/interruptions.c ****     
 412:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 801              		.loc 1 412 0
 802 0250 774B     		ldr	r3, .L62+8
 803 0252 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 804 0256 002B     		cmp	r3, #0
 805 0258 1CD1     		bne	.L51
 413:..\src/interruptions.c ****     
 414:..\src/interruptions.c ****         //---------------------------------- Rest position check
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 417:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 806              		.loc 1 417 0
 807 025a 754B     		ldr	r3, .L62+8
 808 025c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 809 0260 012B     		cmp	r3, #1
 810 0262 17D1     		bne	.L51
 418:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 811              		.loc 1 418 0
 812 0264 744B     		ldr	r3, .L62+16
 813 0266 1B88     		ldrh	r3, [r3]
 814 0268 0A2B     		cmp	r3, #10
 815 026a 04D1     		bne	.L52
 419:..\src/interruptions.c ****                     check_rest_position();
 816              		.loc 1 419 0
 817 026c FFF7FEFF 		bl	check_rest_position
 420:..\src/interruptions.c ****                     counter_calibration = 0;
 818              		.loc 1 420 0
 819 0270 714B     		ldr	r3, .L62+16
 820 0272 0022     		movs	r2, #0
 821 0274 1A80     		strh	r2, [r3]	@ movhi
 822              	.L52:
 421:..\src/interruptions.c ****             }
 422:..\src/interruptions.c ****             counter_calibration++;
 823              		.loc 1 422 0
 824 0276 704B     		ldr	r3, .L62+16
 825 0278 1B88     		ldrh	r3, [r3]
 826 027a 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 23


 827 027c 9AB2     		uxth	r2, r3
 828 027e 6E4B     		ldr	r3, .L62+16
 829 0280 1A80     		strh	r2, [r3]	@ movhi
 423:..\src/interruptions.c **** 
 424:..\src/interruptions.c ****             // Check Interrupt     
 425:..\src/interruptions.c ****             if (interrupt_flag){
 830              		.loc 1 425 0
 831 0282 6A4B     		ldr	r3, .L62+4
 832 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 0286 002B     		cmp	r3, #0
 834 0288 04D0     		beq	.L51
 426:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 835              		.loc 1 426 0
 836 028a 684B     		ldr	r3, .L62+4
 837 028c 0022     		movs	r2, #0
 838 028e 1A70     		strb	r2, [r3]
 427:..\src/interruptions.c ****                 interrupt_manager();
 839              		.loc 1 427 0
 840 0290 FFF7FEFF 		bl	interrupt_manager
 841              	.L51:
 428:..\src/interruptions.c ****             }
 429:..\src/interruptions.c ****         }
 430:..\src/interruptions.c ****         
 431:..\src/interruptions.c ****     }
 432:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 433:..\src/interruptions.c **** 
 434:..\src/interruptions.c ****     cycles_counter_update();
 842              		.loc 1 434 0
 843 0294 FFF7FEFF 		bl	cycles_counter_update
 435:..\src/interruptions.c **** 
 436:..\src/interruptions.c ****     // Check Cycles Interrupt 
 437:..\src/interruptions.c ****     
 438:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 844              		.loc 1 438 0
 845 0298 684B     		ldr	r3, .L62+20
 846 029a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847 029c 002B     		cmp	r3, #0
 848 029e 25D0     		beq	.L53
 439:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 849              		.loc 1 439 0
 850 02a0 664B     		ldr	r3, .L62+20
 851 02a2 0022     		movs	r2, #0
 852 02a4 1A70     		strb	r2, [r3]
 440:..\src/interruptions.c **** 
 441:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 442:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 443:..\src/interruptions.c ****         if(can_write) {
 853              		.loc 1 443 0
 854 02a6 664B     		ldr	r3, .L62+24
 855 02a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 856 02aa 002B     		cmp	r3, #0
 857 02ac 1ED0     		beq	.L53
 444:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 858              		.loc 1 444 0
 859 02ae 654B     		ldr	r3, .L62+28
 860 02b0 0022     		movs	r2, #0
 861 02b2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 24


 445:..\src/interruptions.c ****             
 446:..\src/interruptions.c ****             //Update time variable
 447:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 862              		.loc 1 447 0
 863 02b4 644B     		ldr	r3, .L62+32
 864 02b6 9B6D     		ldr	r3, [r3, #88]
 865 02b8 7833     		adds	r3, r3, #120
 866 02ba 634A     		ldr	r2, .L62+32
 867 02bc 9365     		str	r3, [r2, #88]
 448:..\src/interruptions.c ****             
 449:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 868              		.loc 1 449 0
 869 02be 5C4B     		ldr	r3, .L62+8
 870 02c0 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 871 02c4 012B     		cmp	r3, #1
 872 02c6 11D1     		bne	.L53
 450:..\src/interruptions.c ****                 
 451:..\src/interruptions.c ****                 store_RTC_current_time();
 873              		.loc 1 451 0
 874 02c8 FFF7FEFF 		bl	store_RTC_current_time
 452:..\src/interruptions.c ****                 
 453:..\src/interruptions.c ****                 //Write in SD card
 454:..\src/interruptions.c ****                 prepare_SD_info(info_);
 875              		.loc 1 454 0
 876 02cc 3B46     		mov	r3, r7
 877 02ce 1846     		mov	r0, r3
 878 02d0 FFF7FEFF 		bl	prepare_SD_info
 455:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 879              		.loc 1 455 0
 880 02d4 5D4B     		ldr	r3, .L62+36
 881 02d6 1C68     		ldr	r4, [r3]
 882 02d8 3B46     		mov	r3, r7
 883 02da 1846     		mov	r0, r3
 884 02dc FFF7FEFF 		bl	strlen
 885 02e0 0246     		mov	r2, r0
 886 02e2 3B46     		mov	r3, r7
 887 02e4 1946     		mov	r1, r3
 888 02e6 2046     		mov	r0, r4
 889 02e8 FFF7FEFF 		bl	FS_Write
 890              	.L53:
 456:..\src/interruptions.c ****             }
 457:..\src/interruptions.c ****         }
 458:..\src/interruptions.c ****     }
 459:..\src/interruptions.c ****     
 460:..\src/interruptions.c ****     // Check Interrupt 
 461:..\src/interruptions.c ****     
 462:..\src/interruptions.c ****     if (interrupt_flag){
 891              		.loc 1 462 0
 892 02ec 4F4B     		ldr	r3, .L62+4
 893 02ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 02f0 002B     		cmp	r3, #0
 895 02f2 04D0     		beq	.L54
 463:..\src/interruptions.c ****         interrupt_flag = FALSE;
 896              		.loc 1 463 0
 897 02f4 4D4B     		ldr	r3, .L62+4
 898 02f6 0022     		movs	r2, #0
 899 02f8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 25


 464:..\src/interruptions.c ****         interrupt_manager();
 900              		.loc 1 464 0
 901 02fa FFF7FEFF 		bl	interrupt_manager
 902              	.L54:
 465:..\src/interruptions.c ****     }
 466:..\src/interruptions.c ****     
 467:..\src/interruptions.c ****     
 468:..\src/interruptions.c ****     //---------------------------------- Check battery
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 471:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 903              		.loc 1 471 0
 904 02fe 544B     		ldr	r3, .L62+40
 905 0300 1B88     		ldrh	r3, [r3]
 906 0302 0A2B     		cmp	r3, #10
 907 0304 04D1     		bne	.L55
 472:..\src/interruptions.c ****         battery_management();   
 908              		.loc 1 472 0
 909 0306 FFF7FEFF 		bl	battery_management
 473:..\src/interruptions.c ****         counter_tension_func = 0;
 910              		.loc 1 473 0
 911 030a 514B     		ldr	r3, .L62+40
 912 030c 0022     		movs	r2, #0
 913 030e 1A80     		strh	r2, [r3]	@ movhi
 914              	.L55:
 474:..\src/interruptions.c ****     }
 475:..\src/interruptions.c ****     counter_tension_func++;
 915              		.loc 1 475 0
 916 0310 4F4B     		ldr	r3, .L62+40
 917 0312 1B88     		ldrh	r3, [r3]
 918 0314 0133     		adds	r3, r3, #1
 919 0316 9AB2     		uxth	r2, r3
 920 0318 4D4B     		ldr	r3, .L62+40
 921 031a 1A80     		strh	r2, [r3]	@ movhi
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     // Check Interrupt 
 478:..\src/interruptions.c ****     
 479:..\src/interruptions.c ****     if (interrupt_flag){
 922              		.loc 1 479 0
 923 031c 434B     		ldr	r3, .L62+4
 924 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 925 0320 002B     		cmp	r3, #0
 926 0322 04D0     		beq	.L56
 480:..\src/interruptions.c ****         interrupt_flag = FALSE;
 927              		.loc 1 480 0
 928 0324 414B     		ldr	r3, .L62+4
 929 0326 0022     		movs	r2, #0
 930 0328 1A70     		strb	r2, [r3]
 481:..\src/interruptions.c ****         interrupt_manager();
 931              		.loc 1 481 0
 932 032a FFF7FEFF 		bl	interrupt_manager
 933              	.L56:
 482:..\src/interruptions.c ****     }
 483:..\src/interruptions.c ****    
 484:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 485:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 934              		.loc 1 485 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 26


 935 032e 404B     		ldr	r3, .L62+8
 936 0330 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 937 0334 002B     		cmp	r3, #0
 938 0336 0AD0     		beq	.L57
 486:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 939              		.loc 1 486 0
 940 0338 FFF7FEFF 		bl	ReadAllIMUs
 487:..\src/interruptions.c ****         
 488:..\src/interruptions.c ****         if (interrupt_flag){
 941              		.loc 1 488 0
 942 033c 3B4B     		ldr	r3, .L62+4
 943 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 0340 002B     		cmp	r3, #0
 945 0342 04D0     		beq	.L57
 489:..\src/interruptions.c ****             interrupt_flag = FALSE;
 946              		.loc 1 489 0
 947 0344 394B     		ldr	r3, .L62+4
 948 0346 0022     		movs	r2, #0
 949 0348 1A70     		strb	r2, [r3]
 490:..\src/interruptions.c ****             interrupt_manager();
 950              		.loc 1 490 0
 951 034a FFF7FEFF 		bl	interrupt_manager
 952              	.L57:
 491:..\src/interruptions.c ****         }
 492:..\src/interruptions.c ****     }
 493:..\src/interruptions.c ****    
 494:..\src/interruptions.c ****     //---------------------------------- Update States
 495:..\src/interruptions.c ****     
 496:..\src/interruptions.c ****     // Load k-1 state
 497:..\src/interruptions.c ****     memcpy( &g_emg_measOld, &g_emg_meas, sizeof(g_emg_meas) );
 953              		.loc 1 497 0
 954 034e 414A     		ldr	r2, .L62+44
 955 0350 414B     		ldr	r3, .L62+48
 956 0352 1446     		mov	r4, r2
 957 0354 1D46     		mov	r5, r3
 958 0356 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 959 0358 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 960 035a 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 961 035e 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 498:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 962              		.loc 1 498 0
 963 0362 3E4A     		ldr	r2, .L62+52
 964 0364 3E4B     		ldr	r3, .L62+56
 965 0366 1046     		mov	r0, r2
 966 0368 1946     		mov	r1, r3
 967 036a 6023     		movs	r3, #96
 968 036c 1A46     		mov	r2, r3
 969 036e FFF7FEFF 		bl	memcpy
 499:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 970              		.loc 1 499 0
 971 0372 3C4A     		ldr	r2, .L62+60
 972 0374 3C4B     		ldr	r3, .L62+64
 973 0376 1446     		mov	r4, r2
 974 0378 1D46     		mov	r5, r3
 975 037a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 976 037c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 977 037e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 27


 978 0382 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 500:..\src/interruptions.c **** 
 501:..\src/interruptions.c ****     // Load k+1 state        
 502:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 979              		.loc 1 502 0
 980 0386 384A     		ldr	r2, .L62+64
 981 0388 384B     		ldr	r3, .L62+68
 982 038a 1446     		mov	r4, r2
 983 038c 1D46     		mov	r5, r3
 984 038e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 985 0390 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 986 0392 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 987 0396 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 503:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 988              		.loc 1 503 0
 989 039a 354A     		ldr	r2, .L62+72
 990 039c 354B     		ldr	r3, .L62+76
 991 039e 1046     		mov	r0, r2
 992 03a0 1946     		mov	r1, r3
 993 03a2 C823     		movs	r3, #200
 994 03a4 1A46     		mov	r2, r3
 995 03a6 FFF7FEFF 		bl	memcpy
 504:..\src/interruptions.c ****                 
 505:..\src/interruptions.c ****     if (interrupt_flag){
 996              		.loc 1 505 0
 997 03aa 204B     		ldr	r3, .L62+4
 998 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 03ae 002B     		cmp	r3, #0
 1000 03b0 04D0     		beq	.L58
 506:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1001              		.loc 1 506 0
 1002 03b2 1E4B     		ldr	r3, .L62+4
 1003 03b4 0022     		movs	r2, #0
 1004 03b6 1A70     		strb	r2, [r3]
 507:..\src/interruptions.c ****         interrupt_manager();
 1005              		.loc 1 507 0
 1006 03b8 FFF7FEFF 		bl	interrupt_manager
 1007              	.L58:
 508:..\src/interruptions.c ****     }
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 1008              		.loc 1 510 0
 1009 03bc 1C4B     		ldr	r3, .L62+8
 1010 03be 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1011 03c2 002B     		cmp	r3, #0
 1012 03c4 0FD1     		bne	.L59
 511:..\src/interruptions.c ****         if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 1013              		.loc 1 511 0
 1014 03c6 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 1015 03ca 1949     		ldr	r1, .L62+8
 1016 03cc 1346     		mov	r3, r2
 1017 03ce DB00     		lsls	r3, r3, #3
 1018 03d0 9B1A     		subs	r3, r3, r2
 1019 03d2 1B01     		lsls	r3, r3, #4
 1020 03d4 0B44     		add	r3, r3, r1
 1021 03d6 03F58773 		add	r3, r3, #270
 1022 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 28


 1023 03dc 002B     		cmp	r3, #0
 1024 03de 02D1     		bne	.L59
 512:..\src/interruptions.c ****             change_ext_ref_flag = FALSE;
 1025              		.loc 1 512 0
 1026 03e0 254B     		ldr	r3, .L62+80
 1027 03e2 0022     		movs	r2, #0
 1028 03e4 1A70     		strb	r2, [r3]
 1029              	.L59:
 513:..\src/interruptions.c ****         }   
 514:..\src/interruptions.c ****     }
 515:..\src/interruptions.c **** 
 516:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1030              		.loc 1 516 0
 1031 03e6 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1032 03ea 0346     		mov	r3, r0
 1033 03ec 1A46     		mov	r2, r3
 1034 03ee 234B     		ldr	r3, .L62+84
 1035 03f0 1A80     		strh	r2, [r3]	@ movhi
 517:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1036              		.loc 1 517 0
 1037 03f2 234B     		ldr	r3, .L62+88
 1038 03f4 1B88     		ldrh	r3, [r3]
 1039 03f6 1A46     		mov	r2, r3
 1040 03f8 204B     		ldr	r3, .L62+84
 1041 03fa 1B88     		ldrh	r3, [r3]
 1042 03fc D31A     		subs	r3, r2, r3
 1043 03fe 1846     		mov	r0, r3
 1044 0400 FFF7FEFF 		bl	__aeabi_i2f
 1045 0404 0346     		mov	r3, r0
 1046 0406 1F49     		ldr	r1, .L62+92
 1047 0408 1846     		mov	r0, r3
 1048 040a FFF7FEFF 		bl	__aeabi_fdiv
 1049 040e 0346     		mov	r3, r0
 1050 0410 1A46     		mov	r2, r3
 1051 0412 1D4B     		ldr	r3, .L62+96
 1052 0414 1A60     		str	r2, [r3]	@ float
 518:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1053              		.loc 1 518 0
 1054 0416 0120     		movs	r0, #1
 1055 0418 FFF7FEFF 		bl	MY_TIMER_REG_Write
 519:..\src/interruptions.c **** 
 520:..\src/interruptions.c **** }
 1056              		.loc 1 520 0
 1057 041c 00BF     		nop
 1058 041e 07F6C817 		addw	r7, r7, #2504
 1059              		.cfi_def_cfa_offset 16
 1060 0422 BD46     		mov	sp, r7
 1061              		.cfi_def_cfa_register 13
 1062              		@ sp needed
 1063 0424 B0BD     		pop	{r4, r5, r7, pc}
 1064              	.L63:
 1065 0426 00BF     		.align	2
 1066              	.L62:
 1067 0428 00000000 		.word	N_Encoder_Line_Connected
 1068 042c 00000000 		.word	interrupt_flag
 1069 0430 00000000 		.word	c_mem
 1070 0434 00000000 		.word	calib
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 29


 1071 0438 00000000 		.word	counter_calibration.10375
 1072 043c 00000000 		.word	cycles_interrupt_flag
 1073 0440 00000000 		.word	can_write
 1074 0444 00000000 		.word	cycles_status
 1075 0448 00000000 		.word	g_mem
 1076 044c 00000000 		.word	pFile
 1077 0450 02000000 		.word	counter_tension_func.10376
 1078 0454 00000000 		.word	g_emg_measOld
 1079 0458 00000000 		.word	g_emg_meas
 1080 045c 00000000 		.word	g_measOld
 1081 0460 00000000 		.word	g_meas
 1082 0464 00000000 		.word	g_refOld
 1083 0468 00000000 		.word	g_ref
 1084 046c 00000000 		.word	g_refNew
 1085 0470 00000000 		.word	g_imu
 1086 0474 00000000 		.word	g_imuNew
 1087 0478 00000000 		.word	change_ext_ref_flag
 1088 047c 00000000 		.word	timer_value
 1089 0480 00000000 		.word	timer_value0
 1090 0484 00247449 		.word	1232348160
 1091 0488 00000000 		.word	cycle_time
 1092              		.cfi_endproc
 1093              	.LFE67:
 1094              		.size	function_scheduler, .-function_scheduler
 1095              		.section	.text.motor_control_SH,"ax",%progbits
 1096              		.align	2
 1097              		.global	motor_control_SH
 1098              		.thumb
 1099              		.thumb_func
 1100              		.type	motor_control_SH, %function
 1101              	motor_control_SH:
 1102              	.LFB68:
 521:..\src/interruptions.c **** 
 522:..\src/interruptions.c **** //==============================================================================
 523:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 524:..\src/interruptions.c **** //==============================================================================
 525:..\src/interruptions.c **** void motor_control_SH() {
 1103              		.loc 1 525 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 88
 1106              		@ frame_needed = 1, uses_anonymous_args = 0
 1107 0000 80B5     		push	{r7, lr}
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 7, -8
 1110              		.cfi_offset 14, -4
 1111 0002 96B0     		sub	sp, sp, #88
 1112              		.cfi_def_cfa_offset 96
 1113 0004 00AF     		add	r7, sp, #0
 1114              		.cfi_def_cfa_register 7
 526:..\src/interruptions.c **** 
 527:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 1115              		.loc 1 527 0
 1116 0006 0023     		movs	r3, #0
 1117 0008 7B65     		str	r3, [r7, #84]
 528:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 529:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 530:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 30


 531:..\src/interruptions.c ****     int32 CYDATA handle_value;
 532:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 533:..\src/interruptions.c **** 
 534:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 1118              		.loc 1 534 0
 1119 000a 0023     		movs	r3, #0
 1120 000c 87F84B30 		strb	r3, [r7, #75]
 535:..\src/interruptions.c ****     
 536:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 1121              		.loc 1 536 0
 1122 0010 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 1123 0014 1346     		mov	r3, r2
 1124 0016 DB00     		lsls	r3, r3, #3
 1125 0018 9B1A     		subs	r3, r3, r2
 1126 001a 1B01     		lsls	r3, r3, #4
 1127 001c B033     		adds	r3, r3, #176
 1128 001e A44A     		ldr	r2, .L176
 1129 0020 1344     		add	r3, r3, r2
 1130 0022 7B64     		str	r3, [r7, #68]
 537:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 1131              		.loc 1 537 0
 1132 0024 7B6C     		ldr	r3, [r7, #68]
 1133 0026 93F86030 		ldrb	r3, [r3, #96]
 1134 002a 87F84330 		strb	r3, [r7, #67]
 538:..\src/interruptions.c ****     
 539:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 1135              		.loc 1 539 0
 1136 002e 7B6C     		ldr	r3, [r7, #68]
 1137 0030 1B68     		ldr	r3, [r3]
 1138 0032 FB63     		str	r3, [r7, #60]
 540:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 1139              		.loc 1 540 0
 1140 0034 7B6C     		ldr	r3, [r7, #68]
 1141 0036 5B68     		ldr	r3, [r3, #4]
 1142 0038 BB63     		str	r3, [r7, #56]
 541:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 1143              		.loc 1 541 0
 1144 003a 7B6C     		ldr	r3, [r7, #68]
 1145 003c 9B68     		ldr	r3, [r3, #8]
 1146 003e 7B63     		str	r3, [r7, #52]
 542:..\src/interruptions.c **** 
 543:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 1147              		.loc 1 543 0
 1148 0040 7B6C     		ldr	r3, [r7, #68]
 1149 0042 DB68     		ldr	r3, [r3, #12]
 1150 0044 3B63     		str	r3, [r7, #48]
 544:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 1151              		.loc 1 544 0
 1152 0046 7B6C     		ldr	r3, [r7, #68]
 1153 0048 1B69     		ldr	r3, [r3, #16]
 1154 004a FB62     		str	r3, [r7, #44]
 545:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 1155              		.loc 1 545 0
 1156 004c 7B6C     		ldr	r3, [r7, #68]
 1157 004e 5B69     		ldr	r3, [r3, #20]
 1158 0050 BB62     		str	r3, [r7, #40]
 546:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 31


 547:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 1159              		.loc 1 547 0
 1160 0052 7B6C     		ldr	r3, [r7, #68]
 1161 0054 9B69     		ldr	r3, [r3, #24]
 1162 0056 7B62     		str	r3, [r7, #36]
 548:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 1163              		.loc 1 548 0
 1164 0058 7B6C     		ldr	r3, [r7, #68]
 1165 005a DB69     		ldr	r3, [r3, #28]
 1166 005c 3B62     		str	r3, [r7, #32]
 549:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 1167              		.loc 1 549 0
 1168 005e 7B6C     		ldr	r3, [r7, #68]
 1169 0060 1B6A     		ldr	r3, [r3, #32]
 1170 0062 FB61     		str	r3, [r7, #28]
 550:..\src/interruptions.c ****     
 551:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 1171              		.loc 1 551 0
 1172 0064 7B6C     		ldr	r3, [r7, #68]
 1173 0066 5B6A     		ldr	r3, [r3, #36]
 1174 0068 BB61     		str	r3, [r7, #24]
 552:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 1175              		.loc 1 552 0
 1176 006a 7B6C     		ldr	r3, [r7, #68]
 1177 006c 9B6A     		ldr	r3, [r3, #40]
 1178 006e 7B61     		str	r3, [r7, #20]
 553:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 1179              		.loc 1 553 0
 1180 0070 7B6C     		ldr	r3, [r7, #68]
 1181 0072 DB6A     		ldr	r3, [r3, #44]
 1182 0074 3B61     		str	r3, [r7, #16]
 554:..\src/interruptions.c **** 
 555:..\src/interruptions.c ****     // Static Variables
 556:..\src/interruptions.c **** 
 557:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 558:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 559:..\src/interruptions.c ****     
 560:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 561:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 562:..\src/interruptions.c ****     static int32 prev_pwm;
 563:..\src/interruptions.c **** 
 564:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 565:..\src/interruptions.c ****     static uint32 position_counter = 0;
 566:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 567:..\src/interruptions.c ****                                     // 1 EMG 1
 568:..\src/interruptions.c ****                                     // 2 EMG 2
 569:..\src/interruptions.c ****                                     // wait for both to get down
 570:..\src/interruptions.c ****     
 571:..\src/interruptions.c **** 
 572:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1183              		.loc 1 572 0
 1184 0076 8F4B     		ldr	r3, .L176+4
 1185 0078 1B68     		ldr	r3, [r3]
 1186 007a 8D4A     		ldr	r2, .L176
 1187 007c B2F8F021 		ldrh	r2, [r2, #496]
 1188 0080 9B1A     		subs	r3, r3, r2
 1189 0082 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 32


 573:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1190              		.loc 1 573 0
 1191 0084 8B4B     		ldr	r3, .L176+4
 1192 0086 5B68     		ldr	r3, [r3, #4]
 1193 0088 894A     		ldr	r2, .L176
 1194 008a B2F8F221 		ldrh	r2, [r2, #498]
 1195 008e 9B1A     		subs	r3, r3, r2
 1196 0090 BB60     		str	r3, [r7, #8]
 574:..\src/interruptions.c **** 
 575:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
 576:..\src/interruptions.c ****     switch(SH_MOT->input_mode) {
 1197              		.loc 1 576 0
 1198 0092 7B6C     		ldr	r3, [r7, #68]
 1199 0094 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1200 0098 013B     		subs	r3, r3, #1
 1201 009a 052B     		cmp	r3, #5
 1202 009c 00F2C881 		bhi	.L168
 1203 00a0 01A2     		adr	r2, .L67
 1204 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1205 00a6 00BF     		.p2align 2
 1206              	.L67:
 1207 00a8 C1000000 		.word	.L66+1
 1208 00ac A7010000 		.word	.L68+1
 1209 00b0 0F020000 		.word	.L69+1
 1210 00b4 7F020000 		.word	.L70+1
 1211 00b8 57030000 		.word	.L71+1
 1212 00bc D5010000 		.word	.L72+1
 1213              		.p2align 1
 1214              	.L66:
 577:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 578:..\src/interruptions.c **** 
 579:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 580:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 581:..\src/interruptions.c ****             if (c_mem.enc[SH_ENC_L].double_encoder_on_off) 
 1215              		.loc 1 581 0
 1216 00c0 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1217 00c4 7A49     		ldr	r1, .L176
 1218 00c6 1346     		mov	r3, r2
 1219 00c8 5B00     		lsls	r3, r3, #1
 1220 00ca 1344     		add	r3, r3, r2
 1221 00cc 1B01     		lsls	r3, r3, #4
 1222 00ce 0B44     		add	r3, r3, r1
 1223 00d0 03F5D873 		add	r3, r3, #432
 1224 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 00d6 002B     		cmp	r3, #0
 1226 00d8 1CD0     		beq	.L73
 582:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[2] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1227              		.loc 1 582 0
 1228 00da 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1229 00de 7649     		ldr	r1, .L176+8
 1230 00e0 1346     		mov	r3, r2
 1231 00e2 5B00     		lsls	r3, r3, #1
 1232 00e4 1344     		add	r3, r3, r2
 1233 00e6 1B01     		lsls	r3, r3, #4
 1234 00e8 0B44     		add	r3, r3, r1
 1235 00ea 0833     		adds	r3, r3, #8
 1236 00ec 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 33


 1237 00ee 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1238 00f2 6F48     		ldr	r0, .L176
 1239 00f4 1346     		mov	r3, r2
 1240 00f6 5B00     		lsls	r3, r3, #1
 1241 00f8 1344     		add	r3, r3, r2
 1242 00fa 1B01     		lsls	r3, r3, #4
 1243 00fc 0344     		add	r3, r3, r0
 1244 00fe 03F5DA73 		add	r3, r3, #436
 1245 0102 93F90030 		ldrsb	r3, [r3]
 1246 0106 03FB01F2 		mul	r2, r3, r1
 1247 010a 7B6C     		ldr	r3, [r7, #68]
 1248 010c 5B6B     		ldr	r3, [r3, #52]
 1249 010e 1344     		add	r3, r3, r2
 1250 0110 FB64     		str	r3, [r7, #76]
 1251 0112 1BE0     		b	.L74
 1252              	.L73:
 583:..\src/interruptions.c ****             else
 584:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[1] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1253              		.loc 1 584 0
 1254 0114 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1255 0118 6749     		ldr	r1, .L176+8
 1256 011a 1346     		mov	r3, r2
 1257 011c 5B00     		lsls	r3, r3, #1
 1258 011e 1344     		add	r3, r3, r2
 1259 0120 1B01     		lsls	r3, r3, #4
 1260 0122 0B44     		add	r3, r3, r1
 1261 0124 0433     		adds	r3, r3, #4
 1262 0126 1968     		ldr	r1, [r3]
 1263 0128 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1264 012c 6048     		ldr	r0, .L176
 1265 012e 1346     		mov	r3, r2
 1266 0130 5B00     		lsls	r3, r3, #1
 1267 0132 1344     		add	r3, r3, r2
 1268 0134 1B01     		lsls	r3, r3, #4
 1269 0136 0344     		add	r3, r3, r0
 1270 0138 03F5DA73 		add	r3, r3, #436
 1271 013c 93F90030 		ldrsb	r3, [r3]
 1272 0140 03FB01F2 		mul	r2, r3, r1
 1273 0144 7B6C     		ldr	r3, [r7, #68]
 1274 0146 5B6B     		ldr	r3, [r3, #52]
 1275 0148 1344     		add	r3, r3, r2
 1276 014a FB64     		str	r3, [r7, #76]
 1277              	.L74:
 585:..\src/interruptions.c ****             
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 588:..\src/interruptions.c ****             if (((handle_value - g_refOld[0].pos) > SH_MOT->max_step_pos) && (SH_MOT->max_step_pos 
 1278              		.loc 1 588 0
 1279 014c 5B4B     		ldr	r3, .L176+12
 1280 014e 1B68     		ldr	r3, [r3]
 1281 0150 FA6C     		ldr	r2, [r7, #76]
 1282 0152 D21A     		subs	r2, r2, r3
 1283 0154 7B6C     		ldr	r3, [r7, #68]
 1284 0156 1B6C     		ldr	r3, [r3, #64]
 1285 0158 9A42     		cmp	r2, r3
 1286 015a 0BDD     		ble	.L75
 1287              		.loc 1 588 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 34


 1288 015c 7B6C     		ldr	r3, [r7, #68]
 1289 015e 1B6C     		ldr	r3, [r3, #64]
 1290 0160 002B     		cmp	r3, #0
 1291 0162 07D0     		beq	.L75
 589:..\src/interruptions.c ****                 g_ref[0].pos += SH_MOT->max_step_pos;
 1292              		.loc 1 589 0 is_stmt 1
 1293 0164 564B     		ldr	r3, .L176+16
 1294 0166 1A68     		ldr	r2, [r3]
 1295 0168 7B6C     		ldr	r3, [r7, #68]
 1296 016a 1B6C     		ldr	r3, [r3, #64]
 1297 016c 1344     		add	r3, r3, r2
 1298 016e 544A     		ldr	r2, .L176+16
 1299 0170 1360     		str	r3, [r2]
 1300 0172 17E0     		b	.L76
 1301              	.L75:
 590:..\src/interruptions.c ****             else {
 591:..\src/interruptions.c ****                 if (((handle_value - g_refOld[0].pos) < SH_MOT->max_step_neg) && (SH_MOT->max_step_
 1302              		.loc 1 591 0
 1303 0174 514B     		ldr	r3, .L176+12
 1304 0176 1B68     		ldr	r3, [r3]
 1305 0178 FA6C     		ldr	r2, [r7, #76]
 1306 017a D21A     		subs	r2, r2, r3
 1307 017c 7B6C     		ldr	r3, [r7, #68]
 1308 017e DB6B     		ldr	r3, [r3, #60]
 1309 0180 9A42     		cmp	r2, r3
 1310 0182 0BDA     		bge	.L77
 1311              		.loc 1 591 0 is_stmt 0 discriminator 1
 1312 0184 7B6C     		ldr	r3, [r7, #68]
 1313 0186 DB6B     		ldr	r3, [r3, #60]
 1314 0188 002B     		cmp	r3, #0
 1315 018a 07D0     		beq	.L77
 592:..\src/interruptions.c ****                     g_ref[0].pos += SH_MOT->max_step_neg;
 1316              		.loc 1 592 0 is_stmt 1
 1317 018c 4C4B     		ldr	r3, .L176+16
 1318 018e 1A68     		ldr	r2, [r3]
 1319 0190 7B6C     		ldr	r3, [r7, #68]
 1320 0192 DB6B     		ldr	r3, [r3, #60]
 1321 0194 1344     		add	r3, r3, r2
 1322 0196 4A4A     		ldr	r2, .L176+16
 1323 0198 1360     		str	r3, [r2]
 1324 019a 03E0     		b	.L76
 1325              	.L77:
 593:..\src/interruptions.c ****                 else
 594:..\src/interruptions.c ****                     g_ref[0].pos = handle_value;
 1326              		.loc 1 594 0
 1327 019c 484A     		ldr	r2, .L176+16
 1328 019e FB6C     		ldr	r3, [r7, #76]
 1329 01a0 1360     		str	r3, [r2]
 595:..\src/interruptions.c ****             }
 596:..\src/interruptions.c ****             break;
 1330              		.loc 1 596 0
 1331 01a2 48E1     		b	.L78
 1332              	.L76:
 1333 01a4 47E1     		b	.L78
 1334              	.L68:
 597:..\src/interruptions.c ****             
 598:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 35


 599:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1335              		.loc 1 599 0
 1336 01a6 FB68     		ldr	r3, [r7, #12]
 1337 01a8 002B     		cmp	r3, #0
 1338 01aa 0FDD     		ble	.L79
 600:..\src/interruptions.c ****                 g_ref[0].pos = (err_emg_1 * g_mem.motor[0].pos_lim_sup) / (1024 - c_mem.emg.emg_thr
 1339              		.loc 1 600 0
 1340 01ac 454B     		ldr	r3, .L176+20
 1341 01ae D3F8E830 		ldr	r3, [r3, #232]
 1342 01b2 FA68     		ldr	r2, [r7, #12]
 1343 01b4 02FB03F2 		mul	r2, r2, r3
 1344 01b8 3D4B     		ldr	r3, .L176
 1345 01ba B3F8F031 		ldrh	r3, [r3, #496]
 1346 01be C3F58063 		rsb	r3, r3, #1024
 1347 01c2 92FBF3F3 		sdiv	r3, r2, r3
 1348 01c6 3E4A     		ldr	r2, .L176+16
 1349 01c8 1360     		str	r3, [r2]
 601:..\src/interruptions.c ****             else
 602:..\src/interruptions.c ****                 g_ref[0].pos = 0;
 603:..\src/interruptions.c ****             break;
 1350              		.loc 1 603 0
 1351 01ca 34E1     		b	.L78
 1352              	.L79:
 602:..\src/interruptions.c ****             break;
 1353              		.loc 1 602 0
 1354 01cc 3C4B     		ldr	r3, .L176+16
 1355 01ce 0022     		movs	r2, #0
 1356 01d0 1A60     		str	r2, [r3]
 1357              		.loc 1 603 0
 1358 01d2 30E1     		b	.L78
 1359              	.L72:
 604:..\src/interruptions.c ****                 
 605:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 606:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1360              		.loc 1 606 0
 1361 01d4 FB68     		ldr	r3, [r7, #12]
 1362 01d6 002B     		cmp	r3, #0
 1363 01d8 13DD     		ble	.L81
 607:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup - (err_emg_1 * g_mem.motor[0].pos_lim_sup
 1364              		.loc 1 607 0
 1365 01da 3A4B     		ldr	r3, .L176+20
 1366 01dc D3F8E820 		ldr	r2, [r3, #232]
 1367 01e0 384B     		ldr	r3, .L176+20
 1368 01e2 D3F8E830 		ldr	r3, [r3, #232]
 1369 01e6 F968     		ldr	r1, [r7, #12]
 1370 01e8 01FB03F1 		mul	r1, r1, r3
 1371 01ec 304B     		ldr	r3, .L176
 1372 01ee B3F8F031 		ldrh	r3, [r3, #496]
 1373 01f2 C3F58063 		rsb	r3, r3, #1024
 1374 01f6 91FBF3F3 		sdiv	r3, r1, r3
 1375 01fa D31A     		subs	r3, r2, r3
 1376 01fc 304A     		ldr	r2, .L176+16
 1377 01fe 1360     		str	r3, [r2]
 608:..\src/interruptions.c ****             else
 609:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup;
 610:..\src/interruptions.c ****             break;
 1378              		.loc 1 610 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 36


 1379 0200 19E1     		b	.L78
 1380              	.L81:
 609:..\src/interruptions.c ****             break;
 1381              		.loc 1 609 0
 1382 0202 304B     		ldr	r3, .L176+20
 1383 0204 D3F8E830 		ldr	r3, [r3, #232]
 1384 0208 2D4A     		ldr	r2, .L176+16
 1385 020a 1360     		str	r3, [r2]
 1386              		.loc 1 610 0
 1387 020c 13E1     		b	.L78
 1388              	.L69:
 611:..\src/interruptions.c **** 
 612:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 613:..\src/interruptions.c ****             g_ref[0].pos = g_mem.motor[0].pos_lim_sup - g_refOld[0].pos;
 1389              		.loc 1 613 0
 1390 020e 2D4B     		ldr	r3, .L176+20
 1391 0210 D3F8E820 		ldr	r2, [r3, #232]
 1392 0214 294B     		ldr	r3, .L176+12
 1393 0216 1B68     		ldr	r3, [r3]
 1394 0218 D31A     		subs	r3, r2, r3
 1395 021a 294A     		ldr	r2, .L176+16
 1396 021c 1360     		str	r3, [r2]
 614:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1397              		.loc 1 614 0
 1398 021e FB68     		ldr	r3, [r7, #12]
 1399 0220 002B     		cmp	r3, #0
 1400 0222 13DD     		ble	.L83
 615:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (1024
 1401              		.loc 1 615 0
 1402 0224 254B     		ldr	r3, .L176+12
 1403 0226 1A68     		ldr	r2, [r3]
 1404 0228 264B     		ldr	r3, .L176+20
 1405 022a 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1406 022e 1946     		mov	r1, r3
 1407 0230 FB68     		ldr	r3, [r7, #12]
 1408 0232 03FB01F3 		mul	r3, r3, r1
 1409 0236 5900     		lsls	r1, r3, #1
 1410 0238 1D4B     		ldr	r3, .L176
 1411 023a B3F8F031 		ldrh	r3, [r3, #496]
 1412 023e C3F58063 		rsb	r3, r3, #1024
 1413 0242 91FBF3F3 		sdiv	r3, r1, r3
 1414 0246 1344     		add	r3, r3, r2
 1415 0248 1D4A     		ldr	r2, .L176+16
 1416 024a 1360     		str	r3, [r2]
 1417              	.L83:
 616:..\src/interruptions.c ****             }
 617:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1418              		.loc 1 617 0
 1419 024c BB68     		ldr	r3, [r7, #8]
 1420 024e 002B     		cmp	r3, #0
 1421 0250 40F3F080 		ble	.L169
 618:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (1024
 1422              		.loc 1 618 0
 1423 0254 194B     		ldr	r3, .L176+12
 1424 0256 1A68     		ldr	r2, [r3]
 1425 0258 1A4B     		ldr	r3, .L176+20
 1426 025a 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 37


 1427 025e 1946     		mov	r1, r3
 1428 0260 BB68     		ldr	r3, [r7, #8]
 1429 0262 03FB01F3 		mul	r3, r3, r1
 1430 0266 5900     		lsls	r1, r3, #1
 1431 0268 114B     		ldr	r3, .L176
 1432 026a B3F8F231 		ldrh	r3, [r3, #498]
 1433 026e C3F58063 		rsb	r3, r3, #1024
 1434 0272 91FBF3F3 		sdiv	r3, r1, r3
 1435 0276 D31A     		subs	r3, r2, r3
 1436 0278 114A     		ldr	r2, .L176+16
 1437 027a 1360     		str	r3, [r2]
 619:..\src/interruptions.c ****             }
 620:..\src/interruptions.c ****             break;
 1438              		.loc 1 620 0
 1439 027c DAE0     		b	.L169
 1440              	.L70:
 621:..\src/interruptions.c **** 
 622:..\src/interruptions.c **** 
 623:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 624:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1441              		.loc 1 624 0
 1442 027e 0F4B     		ldr	r3, .L176+12
 1443 0280 1B68     		ldr	r3, [r3]
 1444 0282 0F4A     		ldr	r2, .L176+16
 1445 0284 1360     		str	r3, [r2]
 625:..\src/interruptions.c ****             switch (current_emg) {
 1446              		.loc 1 625 0
 1447 0286 104B     		ldr	r3, .L176+24
 1448 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1449 028a 012B     		cmp	r3, #1
 1450 028c 29D0     		beq	.L86
 1451 028e 022B     		cmp	r3, #2
 1452 0290 43D0     		beq	.L87
 1453 0292 002B     		cmp	r3, #0
 1454 0294 00D0     		beq	.L88
 626:..\src/interruptions.c ****                 case 0:
 627:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 628:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 629:..\src/interruptions.c ****                         current_emg = 1;
 630:..\src/interruptions.c ****                         break;
 631:..\src/interruptions.c ****                     }
 632:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 633:..\src/interruptions.c ****                         current_emg = 2;
 634:..\src/interruptions.c ****                         break;
 635:..\src/interruptions.c ****                     }
 636:..\src/interruptions.c ****                     break;
 637:..\src/interruptions.c **** 
 638:..\src/interruptions.c ****                 case 1:
 639:..\src/interruptions.c ****                     // EMG 1 is first
 640:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 641:..\src/interruptions.c ****                         current_emg = 0;
 642:..\src/interruptions.c ****                         break;
 643:..\src/interruptions.c ****                     }
 644:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (1024
 645:..\src/interruptions.c ****                     break;
 646:..\src/interruptions.c **** 
 647:..\src/interruptions.c ****                 case 2:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 38


 648:..\src/interruptions.c ****                     // EMG 2 is first
 649:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 650:..\src/interruptions.c ****                         current_emg = 0;
 651:..\src/interruptions.c ****                         break;
 652:..\src/interruptions.c ****                     }
 653:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (1024
 654:..\src/interruptions.c ****                     break;
 655:..\src/interruptions.c **** 
 656:..\src/interruptions.c ****                 default:
 657:..\src/interruptions.c ****                     break;
 1455              		.loc 1 657 0
 1456 0296 5DE0     		b	.L90
 1457              	.L88:
 628:..\src/interruptions.c ****                         current_emg = 1;
 1458              		.loc 1 628 0
 1459 0298 FB68     		ldr	r3, [r7, #12]
 1460 029a 002B     		cmp	r3, #0
 1461 029c 16DD     		ble	.L89
 628:..\src/interruptions.c ****                         current_emg = 1;
 1462              		.loc 1 628 0 is_stmt 0 discriminator 1
 1463 029e FA68     		ldr	r2, [r7, #12]
 1464 02a0 BB68     		ldr	r3, [r7, #8]
 1465 02a2 9A42     		cmp	r2, r3
 1466 02a4 12DD     		ble	.L89
 629:..\src/interruptions.c ****                         break;
 1467              		.loc 1 629 0 is_stmt 1
 1468 02a6 084B     		ldr	r3, .L176+24
 1469 02a8 0122     		movs	r2, #1
 1470 02aa 1A70     		strb	r2, [r3]
 630:..\src/interruptions.c ****                     }
 1471              		.loc 1 630 0
 1472 02ac 52E0     		b	.L90
 1473              	.L177:
 1474 02ae 00BF     		.align	2
 1475              	.L176:
 1476 02b0 00000000 		.word	c_mem
 1477 02b4 00000000 		.word	g_emg_meas
 1478 02b8 00000000 		.word	g_meas
 1479 02bc 00000000 		.word	g_refOld
 1480 02c0 00000000 		.word	g_ref
 1481 02c4 00000000 		.word	g_mem
 1482 02c8 8C000000 		.word	current_emg.10415
 1483              	.L89:
 632:..\src/interruptions.c ****                         current_emg = 2;
 1484              		.loc 1 632 0
 1485 02cc BB68     		ldr	r3, [r7, #8]
 1486 02ce 002B     		cmp	r3, #0
 1487 02d0 3FDD     		ble	.L170
 632:..\src/interruptions.c ****                         current_emg = 2;
 1488              		.loc 1 632 0 is_stmt 0 discriminator 1
 1489 02d2 BA68     		ldr	r2, [r7, #8]
 1490 02d4 FB68     		ldr	r3, [r7, #12]
 1491 02d6 9A42     		cmp	r2, r3
 1492 02d8 3BDD     		ble	.L170
 633:..\src/interruptions.c ****                         break;
 1493              		.loc 1 633 0 is_stmt 1
 1494 02da 954B     		ldr	r3, .L178
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 39


 1495 02dc 0222     		movs	r2, #2
 1496 02de 1A70     		strb	r2, [r3]
 634:..\src/interruptions.c ****                     }
 1497              		.loc 1 634 0
 1498 02e0 38E0     		b	.L90
 1499              	.L86:
 640:..\src/interruptions.c ****                         current_emg = 0;
 1500              		.loc 1 640 0
 1501 02e2 FB68     		ldr	r3, [r7, #12]
 1502 02e4 002B     		cmp	r3, #0
 1503 02e6 03DA     		bge	.L92
 641:..\src/interruptions.c ****                         break;
 1504              		.loc 1 641 0
 1505 02e8 914B     		ldr	r3, .L178
 1506 02ea 0022     		movs	r2, #0
 1507 02ec 1A70     		strb	r2, [r3]
 642:..\src/interruptions.c ****                     }
 1508              		.loc 1 642 0
 1509 02ee 31E0     		b	.L90
 1510              	.L92:
 644:..\src/interruptions.c ****                     break;
 1511              		.loc 1 644 0
 1512 02f0 904B     		ldr	r3, .L178+4
 1513 02f2 1A68     		ldr	r2, [r3]
 1514 02f4 904B     		ldr	r3, .L178+8
 1515 02f6 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1516 02fa 1946     		mov	r1, r3
 1517 02fc FB68     		ldr	r3, [r7, #12]
 1518 02fe 03FB01F3 		mul	r3, r3, r1
 1519 0302 9900     		lsls	r1, r3, #2
 1520 0304 8D4B     		ldr	r3, .L178+12
 1521 0306 B3F8F031 		ldrh	r3, [r3, #496]
 1522 030a C3F58063 		rsb	r3, r3, #1024
 1523 030e 91FBF3F3 		sdiv	r3, r1, r3
 1524 0312 1344     		add	r3, r3, r2
 1525 0314 8A4A     		ldr	r2, .L178+16
 1526 0316 1360     		str	r3, [r2]
 645:..\src/interruptions.c **** 
 1527              		.loc 1 645 0
 1528 0318 1CE0     		b	.L90
 1529              	.L87:
 649:..\src/interruptions.c ****                         current_emg = 0;
 1530              		.loc 1 649 0
 1531 031a BB68     		ldr	r3, [r7, #8]
 1532 031c 002B     		cmp	r3, #0
 1533 031e 03DA     		bge	.L93
 650:..\src/interruptions.c ****                         break;
 1534              		.loc 1 650 0
 1535 0320 834B     		ldr	r3, .L178
 1536 0322 0022     		movs	r2, #0
 1537 0324 1A70     		strb	r2, [r3]
 651:..\src/interruptions.c ****                     }
 1538              		.loc 1 651 0
 1539 0326 15E0     		b	.L90
 1540              	.L93:
 653:..\src/interruptions.c ****                     break;
 1541              		.loc 1 653 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 40


 1542 0328 824B     		ldr	r3, .L178+4
 1543 032a 1A68     		ldr	r2, [r3]
 1544 032c 824B     		ldr	r3, .L178+8
 1545 032e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1546 0332 1946     		mov	r1, r3
 1547 0334 BB68     		ldr	r3, [r7, #8]
 1548 0336 03FB01F3 		mul	r3, r3, r1
 1549 033a 9900     		lsls	r1, r3, #2
 1550 033c 7F4B     		ldr	r3, .L178+12
 1551 033e B3F8F231 		ldrh	r3, [r3, #498]
 1552 0342 C3F58063 		rsb	r3, r3, #1024
 1553 0346 91FBF3F3 		sdiv	r3, r1, r3
 1554 034a D31A     		subs	r3, r2, r3
 1555 034c 7C4A     		ldr	r2, .L178+16
 1556 034e 1360     		str	r3, [r2]
 654:..\src/interruptions.c **** 
 1557              		.loc 1 654 0
 1558 0350 00E0     		b	.L90
 1559              	.L170:
 636:..\src/interruptions.c **** 
 1560              		.loc 1 636 0
 1561 0352 00BF     		nop
 1562              	.L90:
 658:..\src/interruptions.c ****             }
 659:..\src/interruptions.c ****             break;
 1563              		.loc 1 659 0 discriminator 1
 1564 0354 6FE0     		b	.L78
 1565              	.L71:
 660:..\src/interruptions.c **** 
 661:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 662:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1566              		.loc 1 662 0
 1567 0356 774B     		ldr	r3, .L178+4
 1568 0358 1B68     		ldr	r3, [r3]
 1569 035a 794A     		ldr	r2, .L178+16
 1570 035c 1360     		str	r3, [r2]
 663:..\src/interruptions.c ****             switch (current_emg) {
 1571              		.loc 1 663 0
 1572 035e 744B     		ldr	r3, .L178
 1573 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1574 0362 012B     		cmp	r3, #1
 1575 0364 1AD0     		beq	.L95
 1576 0366 022B     		cmp	r3, #2
 1577 0368 3AD0     		beq	.L96
 1578 036a 002B     		cmp	r3, #0
 1579 036c 00D0     		beq	.L97
 664:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 665:..\src/interruptions.c ****                 case 0:
 666:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 667:..\src/interruptions.c ****                         current_emg = 1;
 668:..\src/interruptions.c ****                         break;
 669:..\src/interruptions.c ****                     }
 670:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 671:..\src/interruptions.c ****                         current_emg = 2;
 672:..\src/interruptions.c ****                         break;
 673:..\src/interruptions.c ****                     }
 674:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 41


 675:..\src/interruptions.c **** 
 676:..\src/interruptions.c ****                 // EMG 1 is first
 677:..\src/interruptions.c ****                 case 1:
 678:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 679:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 680:..\src/interruptions.c ****                         current_emg = 0;
 681:..\src/interruptions.c ****                         break;
 682:..\src/interruptions.c ****                     }
 683:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 684:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 685:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 686:..\src/interruptions.c ****                     
 687:..\src/interruptions.c ****                     break;
 688:..\src/interruptions.c **** 
 689:..\src/interruptions.c ****                 // EMG 2 is first
 690:..\src/interruptions.c ****                 case 2:
 691:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 692:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 693:..\src/interruptions.c ****                         current_emg = 0;
 694:..\src/interruptions.c ****                         break;
 695:..\src/interruptions.c ****                     }
 696:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 697:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 698:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 699:..\src/interruptions.c ****                     }
 700:..\src/interruptions.c ****                     break;
 701:..\src/interruptions.c **** 
 702:..\src/interruptions.c ****                 default:
 703:..\src/interruptions.c ****                     break;
 1580              		.loc 1 703 0
 1581 036e 5EE0     		b	.L99
 1582              	.L97:
 666:..\src/interruptions.c ****                         current_emg = 1;
 1583              		.loc 1 666 0
 1584 0370 FB68     		ldr	r3, [r7, #12]
 1585 0372 002B     		cmp	r3, #0
 1586 0374 07DD     		ble	.L98
 666:..\src/interruptions.c ****                         current_emg = 1;
 1587              		.loc 1 666 0 is_stmt 0 discriminator 1
 1588 0376 FA68     		ldr	r2, [r7, #12]
 1589 0378 BB68     		ldr	r3, [r7, #8]
 1590 037a 9A42     		cmp	r2, r3
 1591 037c 03DD     		ble	.L98
 667:..\src/interruptions.c ****                         break;
 1592              		.loc 1 667 0 is_stmt 1
 1593 037e 6C4B     		ldr	r3, .L178
 1594 0380 0122     		movs	r2, #1
 1595 0382 1A70     		strb	r2, [r3]
 668:..\src/interruptions.c ****                     }
 1596              		.loc 1 668 0
 1597 0384 53E0     		b	.L99
 1598              	.L98:
 670:..\src/interruptions.c ****                         current_emg = 2;
 1599              		.loc 1 670 0
 1600 0386 BB68     		ldr	r3, [r7, #8]
 1601 0388 002B     		cmp	r3, #0
 1602 038a 4BDD     		ble	.L171
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 42


 670:..\src/interruptions.c ****                         current_emg = 2;
 1603              		.loc 1 670 0 is_stmt 0 discriminator 1
 1604 038c BA68     		ldr	r2, [r7, #8]
 1605 038e FB68     		ldr	r3, [r7, #12]
 1606 0390 9A42     		cmp	r2, r3
 1607 0392 47DD     		ble	.L171
 671:..\src/interruptions.c ****                         break;
 1608              		.loc 1 671 0 is_stmt 1
 1609 0394 664B     		ldr	r3, .L178
 1610 0396 0222     		movs	r2, #2
 1611 0398 1A70     		strb	r2, [r3]
 672:..\src/interruptions.c ****                     }
 1612              		.loc 1 672 0
 1613 039a 48E0     		b	.L99
 1614              	.L95:
 679:..\src/interruptions.c ****                         current_emg = 0;
 1615              		.loc 1 679 0
 1616 039c FB68     		ldr	r3, [r7, #12]
 1617 039e 002B     		cmp	r3, #0
 1618 03a0 06DA     		bge	.L101
 679:..\src/interruptions.c ****                         current_emg = 0;
 1619              		.loc 1 679 0 is_stmt 0 discriminator 1
 1620 03a2 BB68     		ldr	r3, [r7, #8]
 1621 03a4 002B     		cmp	r3, #0
 1622 03a6 03DA     		bge	.L101
 680:..\src/interruptions.c ****                         break;
 1623              		.loc 1 680 0 is_stmt 1
 1624 03a8 614B     		ldr	r3, .L178
 1625 03aa 0022     		movs	r2, #0
 1626 03ac 1A70     		strb	r2, [r3]
 681:..\src/interruptions.c ****                     }
 1627              		.loc 1 681 0
 1628 03ae 3EE0     		b	.L99
 1629              	.L101:
 684:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 1630              		.loc 1 684 0
 1631 03b0 FB68     		ldr	r3, [r7, #12]
 1632 03b2 002B     		cmp	r3, #0
 1633 03b4 38DD     		ble	.L172
 685:..\src/interruptions.c ****                     
 1634              		.loc 1 685 0
 1635 03b6 5F4B     		ldr	r3, .L178+4
 1636 03b8 1A68     		ldr	r2, [r3]
 1637 03ba 5F4B     		ldr	r3, .L178+8
 1638 03bc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1639 03c0 1946     		mov	r1, r3
 1640 03c2 FB68     		ldr	r3, [r7, #12]
 1641 03c4 03FB01F3 		mul	r3, r3, r1
 1642 03c8 9900     		lsls	r1, r3, #2
 1643 03ca 5C4B     		ldr	r3, .L178+12
 1644 03cc B3F8F031 		ldrh	r3, [r3, #496]
 1645 03d0 C3F58063 		rsb	r3, r3, #1024
 1646 03d4 91FBF3F3 		sdiv	r3, r1, r3
 1647 03d8 1344     		add	r3, r3, r2
 1648 03da 594A     		ldr	r2, .L178+16
 1649 03dc 1360     		str	r3, [r2]
 687:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 43


 1650              		.loc 1 687 0
 1651 03de 23E0     		b	.L172
 1652              	.L96:
 692:..\src/interruptions.c ****                         current_emg = 0;
 1653              		.loc 1 692 0
 1654 03e0 FB68     		ldr	r3, [r7, #12]
 1655 03e2 002B     		cmp	r3, #0
 1656 03e4 06DA     		bge	.L103
 692:..\src/interruptions.c ****                         current_emg = 0;
 1657              		.loc 1 692 0 is_stmt 0 discriminator 1
 1658 03e6 BB68     		ldr	r3, [r7, #8]
 1659 03e8 002B     		cmp	r3, #0
 1660 03ea 03DA     		bge	.L103
 693:..\src/interruptions.c ****                         break;
 1661              		.loc 1 693 0 is_stmt 1
 1662 03ec 504B     		ldr	r3, .L178
 1663 03ee 0022     		movs	r2, #0
 1664 03f0 1A70     		strb	r2, [r3]
 694:..\src/interruptions.c ****                     }
 1665              		.loc 1 694 0
 1666 03f2 1CE0     		b	.L99
 1667              	.L103:
 697:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 1668              		.loc 1 697 0
 1669 03f4 BB68     		ldr	r3, [r7, #8]
 1670 03f6 002B     		cmp	r3, #0
 1671 03f8 18DD     		ble	.L173
 698:..\src/interruptions.c ****                     }
 1672              		.loc 1 698 0
 1673 03fa 4E4B     		ldr	r3, .L178+4
 1674 03fc 1A68     		ldr	r2, [r3]
 1675 03fe 4F4B     		ldr	r3, .L178+12
 1676 0400 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1677 0404 1946     		mov	r1, r3
 1678 0406 BB68     		ldr	r3, [r7, #8]
 1679 0408 03FB01F3 		mul	r3, r3, r1
 1680 040c 9900     		lsls	r1, r3, #2
 1681 040e 4B4B     		ldr	r3, .L178+12
 1682 0410 B3F8F231 		ldrh	r3, [r3, #498]
 1683 0414 C3F58063 		rsb	r3, r3, #1024
 1684 0418 91FBF3F3 		sdiv	r3, r1, r3
 1685 041c D31A     		subs	r3, r2, r3
 1686 041e 484A     		ldr	r2, .L178+16
 1687 0420 1360     		str	r3, [r2]
 700:..\src/interruptions.c **** 
 1688              		.loc 1 700 0
 1689 0422 03E0     		b	.L173
 1690              	.L171:
 674:..\src/interruptions.c **** 
 1691              		.loc 1 674 0
 1692 0424 00BF     		nop
 1693 0426 06E0     		b	.L78
 1694              	.L172:
 687:..\src/interruptions.c **** 
 1695              		.loc 1 687 0
 1696 0428 00BF     		nop
 1697 042a 04E0     		b	.L78
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 44


 1698              	.L173:
 700:..\src/interruptions.c **** 
 1699              		.loc 1 700 0
 1700 042c 00BF     		nop
 1701              	.L99:
 704:..\src/interruptions.c ****             }
 705:..\src/interruptions.c ****             break;
 1702              		.loc 1 705 0 discriminator 3
 1703 042e 02E0     		b	.L78
 1704              	.L168:
 706:..\src/interruptions.c **** 
 707:..\src/interruptions.c ****         default:
 708:..\src/interruptions.c ****             break;
 1705              		.loc 1 708 0
 1706 0430 00BF     		nop
 1707 0432 00E0     		b	.L78
 1708              	.L169:
 620:..\src/interruptions.c **** 
 1709              		.loc 1 620 0
 1710 0434 00BF     		nop
 1711              	.L78:
 709:..\src/interruptions.c ****     }
 710:..\src/interruptions.c **** 
 711:..\src/interruptions.c ****     // Position limit saturation
 712:..\src/interruptions.c ****     if (SH_MOT->pos_lim_flag) {
 1712              		.loc 1 712 0
 1713 0436 7B6C     		ldr	r3, [r7, #68]
 1714 0438 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1715 043c 002B     		cmp	r3, #0
 1716 043e 13D0     		beq	.L105
 713:..\src/interruptions.c ****         if (g_ref[0].pos < SH_MOT->pos_lim_inf) 
 1717              		.loc 1 713 0
 1718 0440 3F4B     		ldr	r3, .L178+16
 1719 0442 1A68     		ldr	r2, [r3]
 1720 0444 7B6C     		ldr	r3, [r7, #68]
 1721 0446 5B6B     		ldr	r3, [r3, #52]
 1722 0448 9A42     		cmp	r2, r3
 1723 044a 03DA     		bge	.L106
 714:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_inf;
 1724              		.loc 1 714 0
 1725 044c 7B6C     		ldr	r3, [r7, #68]
 1726 044e 5B6B     		ldr	r3, [r3, #52]
 1727 0450 3B4A     		ldr	r2, .L178+16
 1728 0452 1360     		str	r3, [r2]
 1729              	.L106:
 715:..\src/interruptions.c ****         if (g_ref[0].pos > SH_MOT->pos_lim_sup) 
 1730              		.loc 1 715 0
 1731 0454 3A4B     		ldr	r3, .L178+16
 1732 0456 1A68     		ldr	r2, [r3]
 1733 0458 7B6C     		ldr	r3, [r7, #68]
 1734 045a 9B6B     		ldr	r3, [r3, #56]
 1735 045c 9A42     		cmp	r2, r3
 1736 045e 03DD     		ble	.L105
 716:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_sup;
 1737              		.loc 1 716 0
 1738 0460 7B6C     		ldr	r3, [r7, #68]
 1739 0462 9B6B     		ldr	r3, [r3, #56]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 45


 1740 0464 364A     		ldr	r2, .L178+16
 1741 0466 1360     		str	r3, [r2]
 1742              	.L105:
 717:..\src/interruptions.c ****     }
 718:..\src/interruptions.c ****     
 719:..\src/interruptions.c ****     if (battery_low_SoC == 1) {
 1743              		.loc 1 719 0
 1744 0468 364B     		ldr	r3, .L178+20
 1745 046a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746 046c 012B     		cmp	r3, #1
 1747 046e 02D1     		bne	.L107
 720:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 721:..\src/interruptions.c ****         g_ref[0].pos = 0;
 1748              		.loc 1 721 0
 1749 0470 334B     		ldr	r3, .L178+16
 1750 0472 0022     		movs	r2, #0
 1751 0474 1A60     		str	r2, [r3]
 1752              	.L107:
 722:..\src/interruptions.c ****     }
 723:..\src/interruptions.c ****         
 724:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1753              		.loc 1 724 0
 1754 0476 314B     		ldr	r3, .L178+12
 1755 0478 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1756 047c 012B     		cmp	r3, #1
 1757 047e 2AD1     		bne	.L108
 725:..\src/interruptions.c ****         if (rest_enabled == 1){
 1758              		.loc 1 725 0
 1759 0480 314B     		ldr	r3, .L178+24
 1760 0482 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1761 0484 012B     		cmp	r3, #1
 1762 0486 03D1     		bne	.L109
 726:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 727:..\src/interruptions.c ****             g_ref[0].pos = rest_pos_curr_ref;
 1763              		.loc 1 727 0
 1764 0488 304B     		ldr	r3, .L178+28
 1765 048a 1B68     		ldr	r3, [r3]
 1766 048c 2C4A     		ldr	r2, .L178+16
 1767 048e 1360     		str	r3, [r2]
 1768              	.L109:
 728:..\src/interruptions.c ****         }
 729:..\src/interruptions.c ****         
 730:..\src/interruptions.c ****         if (forced_open == 1) {
 1769              		.loc 1 730 0
 1770 0490 2F4B     		ldr	r3, .L178+32
 1771 0492 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1772 0494 012B     		cmp	r3, #1
 1773 0496 1ED1     		bne	.L108
 731:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 732:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1774              		.loc 1 732 0
 1775 0498 BB68     		ldr	r3, [r7, #8]
 1776 049a 002B     		cmp	r3, #0
 1777 049c 13DD     		ble	.L110
 733:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem.
 1778              		.loc 1 733 0
 1779 049e 264B     		ldr	r3, .L178+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 46


 1780 04a0 D3F8A022 		ldr	r2, [r3, #672]
 1781 04a4 244B     		ldr	r3, .L178+8
 1782 04a6 D3F8A032 		ldr	r3, [r3, #672]
 1783 04aa B968     		ldr	r1, [r7, #8]
 1784 04ac 01FB03F1 		mul	r1, r1, r3
 1785 04b0 224B     		ldr	r3, .L178+12
 1786 04b2 B3F8F231 		ldrh	r3, [r3, #498]
 1787 04b6 C3F58063 		rsb	r3, r3, #1024
 1788 04ba 91FBF3F3 		sdiv	r3, r1, r3
 1789 04be D31A     		subs	r3, r2, r3
 1790 04c0 1F4A     		ldr	r2, .L178+16
 1791 04c2 1360     		str	r3, [r2]
 1792 04c4 07E0     		b	.L108
 1793              	.L110:
 734:..\src/interruptions.c ****             else {
 735:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos;
 1794              		.loc 1 735 0
 1795 04c6 1C4B     		ldr	r3, .L178+8
 1796 04c8 D3F8A032 		ldr	r3, [r3, #672]
 1797 04cc 1C4A     		ldr	r2, .L178+16
 1798 04ce 1360     		str	r3, [r2]
 736:..\src/interruptions.c ****                 forced_open = 0;
 1799              		.loc 1 736 0
 1800 04d0 1F4B     		ldr	r3, .L178+32
 1801 04d2 0022     		movs	r2, #0
 1802 04d4 1A70     		strb	r2, [r3]
 1803              	.L108:
 737:..\src/interruptions.c ****             }
 738:..\src/interruptions.c ****         }
 739:..\src/interruptions.c ****     }
 740:..\src/interruptions.c **** 
 741:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 1804              		.loc 1 741 0
 1805 04d6 7B6C     		ldr	r3, [r7, #68]
 1806 04d8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 1807 04dc 032B     		cmp	r3, #3
 1808 04de 00F2FA81 		bhi	.L111
 1809 04e2 01A2     		adr	r2, .L113
 1810 04e4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1811              		.p2align 2
 1812              	.L113:
 1813 04e8 C1060000 		.word	.L112+1
 1814 04ec 9B080000 		.word	.L114+1
 1815 04f0 6D070000 		.word	.L115+1
 1816 04f4 F9040000 		.word	.L116+1
 1817              		.p2align 1
 1818              	.L116:
 742:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 743:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 744:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 1819              		.loc 1 744 0
 1820 04f8 114B     		ldr	r3, .L178+16
 1821 04fa 1968     		ldr	r1, [r3]
 1822 04fc 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1823 0500 1448     		ldr	r0, .L178+36
 1824 0502 1346     		mov	r3, r2
 1825 0504 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 47


 1826 0506 1344     		add	r3, r3, r2
 1827 0508 1B01     		lsls	r3, r3, #4
 1828 050a 0344     		add	r3, r3, r0
 1829 050c 1B68     		ldr	r3, [r3]
 1830 050e CB1A     		subs	r3, r1, r3
 1831 0510 7B60     		str	r3, [r7, #4]
 745:..\src/interruptions.c **** 
 746:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1832              		.loc 1 746 0
 1833 0512 114B     		ldr	r3, .L178+40
 1834 0514 1A68     		ldr	r2, [r3]
 1835 0516 7B68     		ldr	r3, [r7, #4]
 1836 0518 1344     		add	r3, r3, r2
 1837 051a 0F4A     		ldr	r2, .L178+40
 1838 051c 1360     		str	r3, [r2]
 747:..\src/interruptions.c **** 
 748:..\src/interruptions.c ****             // error_sum saturation
 749:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 1839              		.loc 1 749 0
 1840 051e 0E4B     		ldr	r3, .L178+40
 1841 0520 1B68     		ldr	r3, [r3]
 1842 0522 0E4A     		ldr	r2, .L178+44
 1843 0524 9342     		cmp	r3, r2
 1844 0526 1BDD     		ble	.L117
 750:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 1845              		.loc 1 750 0
 1846 0528 0B4B     		ldr	r3, .L178+40
 1847 052a 0C4A     		ldr	r2, .L178+44
 1848 052c 1A60     		str	r2, [r3]
 1849 052e 1FE0     		b	.L118
 1850              	.L179:
 1851              		.align	2
 1852              	.L178:
 1853 0530 8C000000 		.word	current_emg.10415
 1854 0534 00000000 		.word	g_refOld
 1855 0538 00000000 		.word	g_mem
 1856 053c 00000000 		.word	c_mem
 1857 0540 00000000 		.word	g_ref
 1858 0544 00000000 		.word	battery_low_SoC
 1859 0548 00000000 		.word	rest_enabled
 1860 054c 00000000 		.word	rest_pos_curr_ref
 1861 0550 00000000 		.word	forced_open
 1862 0554 00000000 		.word	g_meas
 1863 0558 90000000 		.word	pos_error_sum.10408
 1864 055c 80F0FA02 		.word	50000000
 1865              	.L117:
 751:..\src/interruptions.c ****             else {
 752:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 1866              		.loc 1 752 0
 1867 0560 8F4B     		ldr	r3, .L180
 1868 0562 1B68     		ldr	r3, [r3]
 1869 0564 8F4A     		ldr	r2, .L180+4
 1870 0566 9342     		cmp	r3, r2
 1871 0568 02DA     		bge	.L118
 753:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 1872              		.loc 1 753 0
 1873 056a 8D4B     		ldr	r3, .L180
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 48


 1874 056c 8D4A     		ldr	r2, .L180+4
 1875 056e 1A60     		str	r2, [r3]
 1876              	.L118:
 754:..\src/interruptions.c ****             }
 755:..\src/interruptions.c ****             
 756:..\src/interruptions.c ****             // ------ position PID control ------
 757:..\src/interruptions.c **** 
 758:..\src/interruptions.c ****             i_ref = 0;
 1877              		.loc 1 758 0
 1878 0570 0023     		movs	r3, #0
 1879 0572 3B65     		str	r3, [r7, #80]
 759:..\src/interruptions.c ****             
 760:..\src/interruptions.c ****             // Proportional
 761:..\src/interruptions.c ****             if (k_p_dl != 0)
 1880              		.loc 1 761 0
 1881 0574 7B6A     		ldr	r3, [r7, #36]
 1882 0576 002B     		cmp	r3, #0
 1883 0578 07D0     		beq	.L119
 762:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 1884              		.loc 1 762 0
 1885 057a 7B6A     		ldr	r3, [r7, #36]
 1886 057c 7A68     		ldr	r2, [r7, #4]
 1887 057e 02FB03F3 		mul	r3, r2, r3
 1888 0582 1B14     		asrs	r3, r3, #16
 1889 0584 3A6D     		ldr	r2, [r7, #80]
 1890 0586 1344     		add	r3, r3, r2
 1891 0588 3B65     		str	r3, [r7, #80]
 1892              	.L119:
 763:..\src/interruptions.c **** 
 764:..\src/interruptions.c ****             // Integral
 765:..\src/interruptions.c ****             if (k_i_dl != 0)
 1893              		.loc 1 765 0
 1894 058a 3B6A     		ldr	r3, [r7, #32]
 1895 058c 002B     		cmp	r3, #0
 1896 058e 08D0     		beq	.L120
 766:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 1897              		.loc 1 766 0
 1898 0590 834B     		ldr	r3, .L180
 1899 0592 1B68     		ldr	r3, [r3]
 1900 0594 3A6A     		ldr	r2, [r7, #32]
 1901 0596 02FB03F3 		mul	r3, r2, r3
 1902 059a 1B14     		asrs	r3, r3, #16
 1903 059c 3A6D     		ldr	r2, [r7, #80]
 1904 059e 1344     		add	r3, r3, r2
 1905 05a0 3B65     		str	r3, [r7, #80]
 1906              	.L120:
 767:..\src/interruptions.c **** 
 768:..\src/interruptions.c ****             // Derivative
 769:..\src/interruptions.c ****             if (k_d_dl != 0)
 1907              		.loc 1 769 0
 1908 05a2 FB69     		ldr	r3, [r7, #28]
 1909 05a4 002B     		cmp	r3, #0
 1910 05a6 0AD0     		beq	.L121
 770:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 1911              		.loc 1 770 0
 1912 05a8 7F4B     		ldr	r3, .L180+8
 1913 05aa 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 49


 1914 05ac 7A68     		ldr	r2, [r7, #4]
 1915 05ae D31A     		subs	r3, r2, r3
 1916 05b0 FA69     		ldr	r2, [r7, #28]
 1917 05b2 02FB03F3 		mul	r3, r2, r3
 1918 05b6 1B14     		asrs	r3, r3, #16
 1919 05b8 3A6D     		ldr	r2, [r7, #80]
 1920 05ba 1344     		add	r3, r3, r2
 1921 05bc 3B65     		str	r3, [r7, #80]
 1922              	.L121:
 771:..\src/interruptions.c ****                         
 772:..\src/interruptions.c ****             // Update previous position
 773:..\src/interruptions.c ****             prev_pos_err = pos_error;
 1923              		.loc 1 773 0
 1924 05be 7A4A     		ldr	r2, .L180+8
 1925 05c0 7B68     		ldr	r3, [r7, #4]
 1926 05c2 1360     		str	r3, [r2]
 774:..\src/interruptions.c **** 
 775:..\src/interruptions.c ****             // motor direction depends on i_ref
 776:..\src/interruptions.c ****             if (i_ref >= 0)
 1927              		.loc 1 776 0
 1928 05c4 3B6D     		ldr	r3, [r7, #80]
 1929 05c6 002B     		cmp	r3, #0
 1930 05c8 03DB     		blt	.L122
 777:..\src/interruptions.c ****                 motor_dir = TRUE;
 1931              		.loc 1 777 0
 1932 05ca 784B     		ldr	r3, .L180+12
 1933 05cc 0122     		movs	r2, #1
 1934 05ce 1A70     		strb	r2, [r3]
 1935 05d0 02E0     		b	.L123
 1936              	.L122:
 778:..\src/interruptions.c ****             else
 779:..\src/interruptions.c ****                 motor_dir = FALSE;
 1937              		.loc 1 779 0
 1938 05d2 764B     		ldr	r3, .L180+12
 1939 05d4 0022     		movs	r2, #0
 1940 05d6 1A70     		strb	r2, [r3]
 1941              	.L123:
 780:..\src/interruptions.c **** 
 781:..\src/interruptions.c ****             // saturate max current
 782:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 1942              		.loc 1 782 0
 1943 05d8 7B6C     		ldr	r3, [r7, #68]
 1944 05da B3F95C30 		ldrsh	r3, [r3, #92]
 1945 05de 1A46     		mov	r2, r3
 1946 05e0 3B6D     		ldr	r3, [r7, #80]
 1947 05e2 9A42     		cmp	r2, r3
 1948 05e4 04DA     		bge	.L124
 783:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 1949              		.loc 1 783 0
 1950 05e6 7B6C     		ldr	r3, [r7, #68]
 1951 05e8 B3F95C30 		ldrsh	r3, [r3, #92]
 1952 05ec 3B65     		str	r3, [r7, #80]
 1953 05ee 0BE0     		b	.L125
 1954              	.L124:
 784:..\src/interruptions.c ****             else {
 785:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 1955              		.loc 1 785 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 50


 1956 05f0 7B6C     		ldr	r3, [r7, #68]
 1957 05f2 B3F95C30 		ldrsh	r3, [r3, #92]
 1958 05f6 5A42     		negs	r2, r3
 1959 05f8 3B6D     		ldr	r3, [r7, #80]
 1960 05fa 9A42     		cmp	r2, r3
 1961 05fc 04DD     		ble	.L125
 786:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 1962              		.loc 1 786 0
 1963 05fe 7B6C     		ldr	r3, [r7, #68]
 1964 0600 B3F95C30 		ldrsh	r3, [r3, #92]
 1965 0604 5B42     		negs	r3, r3
 1966 0606 3B65     		str	r3, [r7, #80]
 1967              	.L125:
 787:..\src/interruptions.c ****         	}
 788:..\src/interruptions.c **** 
 789:..\src/interruptions.c ****             // current error and curr error sum
 790:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 1968              		.loc 1 790 0
 1969 0608 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1970 060c 6849     		ldr	r1, .L180+16
 1971 060e 1346     		mov	r3, r2
 1972 0610 5B00     		lsls	r3, r3, #1
 1973 0612 1344     		add	r3, r3, r2
 1974 0614 1B01     		lsls	r3, r3, #4
 1975 0616 0B44     		add	r3, r3, r1
 1976 0618 0C33     		adds	r3, r3, #12
 1977 061a 1B68     		ldr	r3, [r3]
 1978 061c 3A6D     		ldr	r2, [r7, #80]
 1979 061e D31A     		subs	r3, r2, r3
 1980 0620 3B60     		str	r3, [r7]
 791:..\src/interruptions.c ****             curr_error_sum += curr_error;
 1981              		.loc 1 791 0
 1982 0622 644B     		ldr	r3, .L180+20
 1983 0624 1A68     		ldr	r2, [r3]
 1984 0626 3B68     		ldr	r3, [r7]
 1985 0628 1344     		add	r3, r3, r2
 1986 062a 624A     		ldr	r2, .L180+20
 1987 062c 1360     		str	r3, [r2]
 792:..\src/interruptions.c ****             
 793:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 1988              		.loc 1 793 0
 1989 062e 614B     		ldr	r3, .L180+20
 1990 0630 1B68     		ldr	r3, [r3]
 1991 0632 614A     		ldr	r2, .L180+24
 1992 0634 9342     		cmp	r3, r2
 1993 0636 03DD     		ble	.L126
 794:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 1994              		.loc 1 794 0
 1995 0638 5E4B     		ldr	r3, .L180+20
 1996 063a 5F4A     		ldr	r2, .L180+24
 1997 063c 1A60     		str	r2, [r3]
 1998 063e 07E0     		b	.L127
 1999              	.L126:
 795:..\src/interruptions.c ****             else {
 796:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2000              		.loc 1 796 0
 2001 0640 5C4B     		ldr	r3, .L180+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 51


 2002 0642 1B68     		ldr	r3, [r3]
 2003 0644 5D4A     		ldr	r2, .L180+28
 2004 0646 9342     		cmp	r3, r2
 2005 0648 02DA     		bge	.L127
 797:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2006              		.loc 1 797 0
 2007 064a 5A4B     		ldr	r3, .L180+20
 2008 064c 5B4A     		ldr	r2, .L180+28
 2009 064e 1A60     		str	r2, [r3]
 2010              	.L127:
 798:..\src/interruptions.c ****             }
 799:..\src/interruptions.c **** 
 800:..\src/interruptions.c ****             // ----- current PID control -----
 801:..\src/interruptions.c **** 
 802:..\src/interruptions.c ****             pwm_input = 0;
 2011              		.loc 1 802 0
 2012 0650 0023     		movs	r3, #0
 2013 0652 7B65     		str	r3, [r7, #84]
 803:..\src/interruptions.c **** 
 804:..\src/interruptions.c ****             // Proportional
 805:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2014              		.loc 1 805 0
 2015 0654 BB69     		ldr	r3, [r7, #24]
 2016 0656 002B     		cmp	r3, #0
 2017 0658 07D0     		beq	.L128
 806:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2018              		.loc 1 806 0
 2019 065a BB69     		ldr	r3, [r7, #24]
 2020 065c 3A68     		ldr	r2, [r7]
 2021 065e 02FB03F3 		mul	r3, r2, r3
 2022 0662 1B14     		asrs	r3, r3, #16
 2023 0664 7A6D     		ldr	r2, [r7, #84]
 2024 0666 1344     		add	r3, r3, r2
 2025 0668 7B65     		str	r3, [r7, #84]
 2026              	.L128:
 807:..\src/interruptions.c **** 
 808:..\src/interruptions.c ****             // Integral
 809:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2027              		.loc 1 809 0
 2028 066a 7B69     		ldr	r3, [r7, #20]
 2029 066c 002B     		cmp	r3, #0
 2030 066e 08D0     		beq	.L129
 810:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2031              		.loc 1 810 0
 2032 0670 504B     		ldr	r3, .L180+20
 2033 0672 1B68     		ldr	r3, [r3]
 2034 0674 7A69     		ldr	r2, [r7, #20]
 2035 0676 02FB03F3 		mul	r3, r2, r3
 2036 067a 1B14     		asrs	r3, r3, #16
 2037 067c 7A6D     		ldr	r2, [r7, #84]
 2038 067e 1344     		add	r3, r3, r2
 2039 0680 7B65     		str	r3, [r7, #84]
 2040              	.L129:
 811:..\src/interruptions.c **** 
 812:..\src/interruptions.c ****             // Derivative
 813:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2041              		.loc 1 813 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 52


 2042 0682 3B69     		ldr	r3, [r7, #16]
 2043 0684 002B     		cmp	r3, #0
 2044 0686 0AD0     		beq	.L130
 814:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2045              		.loc 1 814 0
 2046 0688 4D4B     		ldr	r3, .L180+32
 2047 068a 1B68     		ldr	r3, [r3]
 2048 068c 3A68     		ldr	r2, [r7]
 2049 068e D31A     		subs	r3, r2, r3
 2050 0690 3A69     		ldr	r2, [r7, #16]
 2051 0692 02FB03F3 		mul	r3, r2, r3
 2052 0696 1B14     		asrs	r3, r3, #16
 2053 0698 7A6D     		ldr	r2, [r7, #84]
 2054 069a 1344     		add	r3, r3, r2
 2055 069c 7B65     		str	r3, [r7, #84]
 2056              	.L130:
 815:..\src/interruptions.c **** 
 816:..\src/interruptions.c ****             // pwm_input saturation
 817:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2057              		.loc 1 817 0
 2058 069e 7B6D     		ldr	r3, [r7, #84]
 2059 06a0 13F1640F 		cmn	r3, #100
 2060 06a4 03DA     		bge	.L131
 818:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2061              		.loc 1 818 0
 2062 06a6 6FF06303 		mvn	r3, #99
 2063 06aa 7B65     		str	r3, [r7, #84]
 2064 06ac 04E0     		b	.L132
 2065              	.L131:
 819:..\src/interruptions.c ****             else {
 820:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2066              		.loc 1 820 0
 2067 06ae 7B6D     		ldr	r3, [r7, #84]
 2068 06b0 642B     		cmp	r3, #100
 2069 06b2 01DD     		ble	.L132
 821:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 2070              		.loc 1 821 0
 2071 06b4 6423     		movs	r3, #100
 2072 06b6 7B65     		str	r3, [r7, #84]
 2073              	.L132:
 822:..\src/interruptions.c ****             }
 823:..\src/interruptions.c **** 
 824:..\src/interruptions.c ****             // Update previous current
 825:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2074              		.loc 1 825 0
 2075 06b8 414A     		ldr	r2, .L180+32
 2076 06ba 3B68     		ldr	r3, [r7]
 2077 06bc 1360     		str	r3, [r2]
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****         break;
 2078              		.loc 1 827 0
 2079 06be 0AE1     		b	.L111
 2080              	.L112:
 828:..\src/interruptions.c **** 
 829:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 830:..\src/interruptions.c ****         case CONTROL_ANGLE:
 831:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 53


 2081              		.loc 1 831 0
 2082 06c0 404B     		ldr	r3, .L180+36
 2083 06c2 1968     		ldr	r1, [r3]
 2084 06c4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2085 06c8 3948     		ldr	r0, .L180+16
 2086 06ca 1346     		mov	r3, r2
 2087 06cc 5B00     		lsls	r3, r3, #1
 2088 06ce 1344     		add	r3, r3, r2
 2089 06d0 1B01     		lsls	r3, r3, #4
 2090 06d2 0344     		add	r3, r3, r0
 2091 06d4 1B68     		ldr	r3, [r3]
 2092 06d6 CB1A     		subs	r3, r1, r3
 2093 06d8 7B60     		str	r3, [r7, #4]
 832:..\src/interruptions.c **** 
 833:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2094              		.loc 1 833 0
 2095 06da 314B     		ldr	r3, .L180
 2096 06dc 1A68     		ldr	r2, [r3]
 2097 06de 7B68     		ldr	r3, [r7, #4]
 2098 06e0 1344     		add	r3, r3, r2
 2099 06e2 2F4A     		ldr	r2, .L180
 2100 06e4 1360     		str	r3, [r2]
 834:..\src/interruptions.c **** 
 835:..\src/interruptions.c ****             // anti-windup (for integral control)
 836:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2101              		.loc 1 836 0
 2102 06e6 2E4B     		ldr	r3, .L180
 2103 06e8 1B68     		ldr	r3, [r3]
 2104 06ea B3F57A7F 		cmp	r3, #1000
 2105 06ee 04DD     		ble	.L133
 837:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2106              		.loc 1 837 0
 2107 06f0 2B4B     		ldr	r3, .L180
 2108 06f2 4FF47A72 		mov	r2, #1000
 2109 06f6 1A60     		str	r2, [r3]
 2110 06f8 07E0     		b	.L134
 2111              	.L133:
 838:..\src/interruptions.c ****             else {
 839:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 2112              		.loc 1 839 0
 2113 06fa 294B     		ldr	r3, .L180
 2114 06fc 1B68     		ldr	r3, [r3]
 2115 06fe 13F57A7F 		cmn	r3, #1000
 2116 0702 02DA     		bge	.L134
 840:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 2117              		.loc 1 840 0
 2118 0704 264B     		ldr	r3, .L180
 2119 0706 304A     		ldr	r2, .L180+40
 2120 0708 1A60     		str	r2, [r3]
 2121              	.L134:
 841:..\src/interruptions.c ****             }
 842:..\src/interruptions.c **** 
 843:..\src/interruptions.c ****             // Proportional
 844:..\src/interruptions.c ****             if (k_p != 0) 
 2122              		.loc 1 844 0
 2123 070a FB6B     		ldr	r3, [r7, #60]
 2124 070c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 54


 2125 070e 05D0     		beq	.L135
 845:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 2126              		.loc 1 845 0
 2127 0710 FB6B     		ldr	r3, [r7, #60]
 2128 0712 7A68     		ldr	r2, [r7, #4]
 2129 0714 02FB03F3 		mul	r3, r2, r3
 2130 0718 1B14     		asrs	r3, r3, #16
 2131 071a 7B65     		str	r3, [r7, #84]
 2132              	.L135:
 846:..\src/interruptions.c ****             
 847:..\src/interruptions.c **** 
 848:..\src/interruptions.c ****             // Integral
 849:..\src/interruptions.c ****             if (k_i != 0) 
 2133              		.loc 1 849 0
 2134 071c BB6B     		ldr	r3, [r7, #56]
 2135 071e 002B     		cmp	r3, #0
 2136 0720 08D0     		beq	.L136
 850:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 2137              		.loc 1 850 0
 2138 0722 1F4B     		ldr	r3, .L180
 2139 0724 1B68     		ldr	r3, [r3]
 2140 0726 BA6B     		ldr	r2, [r7, #56]
 2141 0728 02FB03F3 		mul	r3, r2, r3
 2142 072c 1B14     		asrs	r3, r3, #16
 2143 072e 7A6D     		ldr	r2, [r7, #84]
 2144 0730 1344     		add	r3, r3, r2
 2145 0732 7B65     		str	r3, [r7, #84]
 2146              	.L136:
 851:..\src/interruptions.c ****             
 852:..\src/interruptions.c **** 
 853:..\src/interruptions.c ****             // Derivative
 854:..\src/interruptions.c ****             if (k_d != 0) 
 2147              		.loc 1 854 0
 2148 0734 7B6B     		ldr	r3, [r7, #52]
 2149 0736 002B     		cmp	r3, #0
 2150 0738 0AD0     		beq	.L137
 855:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2151              		.loc 1 855 0
 2152 073a 1B4B     		ldr	r3, .L180+8
 2153 073c 1B68     		ldr	r3, [r3]
 2154 073e 7A68     		ldr	r2, [r7, #4]
 2155 0740 D31A     		subs	r3, r2, r3
 2156 0742 7A6B     		ldr	r2, [r7, #52]
 2157 0744 02FB03F3 		mul	r3, r2, r3
 2158 0748 1B14     		asrs	r3, r3, #16
 2159 074a 7A6D     		ldr	r2, [r7, #84]
 2160 074c 1344     		add	r3, r3, r2
 2161 074e 7B65     		str	r3, [r7, #84]
 2162              	.L137:
 856:..\src/interruptions.c ****             
 857:..\src/interruptions.c **** 
 858:..\src/interruptions.c ****             // Update measure
 859:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2163              		.loc 1 859 0
 2164 0750 154A     		ldr	r2, .L180+8
 2165 0752 7B68     		ldr	r3, [r7, #4]
 2166 0754 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 55


 860:..\src/interruptions.c **** 
 861:..\src/interruptions.c ****             if (pwm_input > 0)
 2167              		.loc 1 861 0
 2168 0756 7B6D     		ldr	r3, [r7, #84]
 2169 0758 002B     		cmp	r3, #0
 2170 075a 03DD     		ble	.L138
 862:..\src/interruptions.c ****                 motor_dir = TRUE;
 2171              		.loc 1 862 0
 2172 075c 134B     		ldr	r3, .L180+12
 2173 075e 0122     		movs	r2, #1
 2174 0760 1A70     		strb	r2, [r3]
 863:..\src/interruptions.c ****             else
 864:..\src/interruptions.c ****                 motor_dir = FALSE;
 865:..\src/interruptions.c **** 
 866:..\src/interruptions.c ****         break;
 2175              		.loc 1 866 0
 2176 0762 B8E0     		b	.L111
 2177              	.L138:
 864:..\src/interruptions.c **** 
 2178              		.loc 1 864 0
 2179 0764 114B     		ldr	r3, .L180+12
 2180 0766 0022     		movs	r2, #0
 2181 0768 1A70     		strb	r2, [r3]
 2182              		.loc 1 866 0
 2183 076a B4E0     		b	.L111
 2184              	.L115:
 867:..\src/interruptions.c **** 
 868:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 869:..\src/interruptions.c ****         case CONTROL_CURRENT:
 870:..\src/interruptions.c ****             if(g_ref[0].onoff && tension_valid) {
 2185              		.loc 1 870 0
 2186 076c 154B     		ldr	r3, .L180+36
 2187 076e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2188 0770 002B     		cmp	r3, #0
 2189 0772 00F0AD80 		beq	.L174
 2190              		.loc 1 870 0 is_stmt 0 discriminator 1
 2191 0776 154B     		ldr	r3, .L180+44
 2192 0778 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2193 077a 002B     		cmp	r3, #0
 2194 077c 00F0A880 		beq	.L174
 871:..\src/interruptions.c ****                 
 872:..\src/interruptions.c ****                 i_ref = g_ref[0].curr;
 2195              		.loc 1 872 0 is_stmt 1
 2196 0780 104B     		ldr	r3, .L180+36
 2197 0782 5B68     		ldr	r3, [r3, #4]
 2198 0784 3B65     		str	r3, [r7, #80]
 873:..\src/interruptions.c **** 
 874:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 2199              		.loc 1 874 0
 2200 0786 7B6C     		ldr	r3, [r7, #68]
 2201 0788 B3F95C30 		ldrsh	r3, [r3, #92]
 2202 078c 1A46     		mov	r2, r3
 2203 078e 3B6D     		ldr	r3, [r7, #80]
 2204 0790 9A42     		cmp	r2, r3
 2205 0792 1DDA     		bge	.L141
 875:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 2206              		.loc 1 875 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 56


 2207 0794 7B6C     		ldr	r3, [r7, #68]
 2208 0796 B3F95C30 		ldrsh	r3, [r3, #92]
 2209 079a 3B65     		str	r3, [r7, #80]
 2210 079c 24E0     		b	.L142
 2211              	.L181:
 2212 079e 00BF     		.align	2
 2213              	.L180:
 2214 07a0 90000000 		.word	pos_error_sum.10408
 2215 07a4 800F05FD 		.word	-50000000
 2216 07a8 94000000 		.word	prev_pos_err.10410
 2217 07ac 98000000 		.word	motor_dir.10413
 2218 07b0 00000000 		.word	g_meas
 2219 07b4 9C000000 		.word	curr_error_sum.10409
 2220 07b8 A0860100 		.word	100000
 2221 07bc 6079FEFF 		.word	-100000
 2222 07c0 A0000000 		.word	prev_curr_err.10411
 2223 07c4 00000000 		.word	g_ref
 2224 07c8 18FCFFFF 		.word	-1000
 2225 07cc 00000000 		.word	tension_valid
 2226              	.L141:
 876:..\src/interruptions.c ****                 else {
 877:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 2227              		.loc 1 877 0
 2228 07d0 7B6C     		ldr	r3, [r7, #68]
 2229 07d2 B3F95C30 		ldrsh	r3, [r3, #92]
 2230 07d6 5A42     		negs	r2, r3
 2231 07d8 3B6D     		ldr	r3, [r7, #80]
 2232 07da 9A42     		cmp	r2, r3
 2233 07dc 04DD     		ble	.L142
 878:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 2234              		.loc 1 878 0
 2235 07de 7B6C     		ldr	r3, [r7, #68]
 2236 07e0 B3F95C30 		ldrsh	r3, [r3, #92]
 2237 07e4 5B42     		negs	r3, r3
 2238 07e6 3B65     		str	r3, [r7, #80]
 2239              	.L142:
 879:..\src/interruptions.c ****                 }
 880:..\src/interruptions.c ****                 
 881:..\src/interruptions.c ****                 // current error
 882:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 2240              		.loc 1 882 0
 2241 07e8 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2242 07ec A449     		ldr	r1, .L182
 2243 07ee 1346     		mov	r3, r2
 2244 07f0 5B00     		lsls	r3, r3, #1
 2245 07f2 1344     		add	r3, r3, r2
 2246 07f4 1B01     		lsls	r3, r3, #4
 2247 07f6 0B44     		add	r3, r3, r1
 2248 07f8 0C33     		adds	r3, r3, #12
 2249 07fa 1B68     		ldr	r3, [r3]
 2250 07fc 3A6D     		ldr	r2, [r7, #80]
 2251 07fe D31A     		subs	r3, r2, r3
 2252 0800 3B60     		str	r3, [r7]
 883:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2253              		.loc 1 883 0
 2254 0802 A04B     		ldr	r3, .L182+4
 2255 0804 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 57


 2256 0806 3B68     		ldr	r3, [r7]
 2257 0808 1344     		add	r3, r3, r2
 2258 080a 9E4A     		ldr	r2, .L182+4
 2259 080c 1360     		str	r3, [r2]
 884:..\src/interruptions.c ****                 
 885:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2260              		.loc 1 885 0
 2261 080e 9D4B     		ldr	r3, .L182+4
 2262 0810 1B68     		ldr	r3, [r3]
 2263 0812 9D4A     		ldr	r2, .L182+8
 2264 0814 9342     		cmp	r3, r2
 2265 0816 03DD     		ble	.L143
 886:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2266              		.loc 1 886 0
 2267 0818 9A4B     		ldr	r3, .L182+4
 2268 081a 9B4A     		ldr	r2, .L182+8
 2269 081c 1A60     		str	r2, [r3]
 2270 081e 07E0     		b	.L144
 2271              	.L143:
 887:..\src/interruptions.c ****                 else {
 888:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2272              		.loc 1 888 0
 2273 0820 984B     		ldr	r3, .L182+4
 2274 0822 1B68     		ldr	r3, [r3]
 2275 0824 994A     		ldr	r2, .L182+12
 2276 0826 9342     		cmp	r3, r2
 2277 0828 02DA     		bge	.L144
 889:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2278              		.loc 1 889 0
 2279 082a 964B     		ldr	r3, .L182+4
 2280 082c 974A     		ldr	r2, .L182+12
 2281 082e 1A60     		str	r2, [r3]
 2282              	.L144:
 890:..\src/interruptions.c ****                 }
 891:..\src/interruptions.c **** 
 892:..\src/interruptions.c ****                 pwm_input = 0;
 2283              		.loc 1 892 0
 2284 0830 0023     		movs	r3, #0
 2285 0832 7B65     		str	r3, [r7, #84]
 893:..\src/interruptions.c **** 
 894:..\src/interruptions.c ****                 // Proportional
 895:..\src/interruptions.c ****                 if (k_p_c != 0)
 2286              		.loc 1 895 0
 2287 0834 3B6B     		ldr	r3, [r7, #48]
 2288 0836 002B     		cmp	r3, #0
 2289 0838 07D0     		beq	.L145
 896:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2290              		.loc 1 896 0
 2291 083a 3B6B     		ldr	r3, [r7, #48]
 2292 083c 3A68     		ldr	r2, [r7]
 2293 083e 02FB03F3 		mul	r3, r2, r3
 2294 0842 1B14     		asrs	r3, r3, #16
 2295 0844 7A6D     		ldr	r2, [r7, #84]
 2296 0846 1344     		add	r3, r3, r2
 2297 0848 7B65     		str	r3, [r7, #84]
 2298              	.L145:
 897:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 58


 898:..\src/interruptions.c ****                 // Integral
 899:..\src/interruptions.c ****                 if (k_i_c != 0)
 2299              		.loc 1 899 0
 2300 084a FB6A     		ldr	r3, [r7, #44]
 2301 084c 002B     		cmp	r3, #0
 2302 084e 08D0     		beq	.L146
 900:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2303              		.loc 1 900 0
 2304 0850 8C4B     		ldr	r3, .L182+4
 2305 0852 1B68     		ldr	r3, [r3]
 2306 0854 FA6A     		ldr	r2, [r7, #44]
 2307 0856 02FB03F3 		mul	r3, r2, r3
 2308 085a 1B14     		asrs	r3, r3, #16
 2309 085c 7A6D     		ldr	r2, [r7, #84]
 2310 085e 1344     		add	r3, r3, r2
 2311 0860 7B65     		str	r3, [r7, #84]
 2312              	.L146:
 901:..\src/interruptions.c **** 
 902:..\src/interruptions.c ****                 // Derivative
 903:..\src/interruptions.c ****                 if (k_d_c != 0)
 2313              		.loc 1 903 0
 2314 0862 BB6A     		ldr	r3, [r7, #40]
 2315 0864 002B     		cmp	r3, #0
 2316 0866 0AD0     		beq	.L147
 904:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2317              		.loc 1 904 0
 2318 0868 894B     		ldr	r3, .L182+16
 2319 086a 1B68     		ldr	r3, [r3]
 2320 086c 3A68     		ldr	r2, [r7]
 2321 086e D31A     		subs	r3, r2, r3
 2322 0870 BA6A     		ldr	r2, [r7, #40]
 2323 0872 02FB03F3 		mul	r3, r2, r3
 2324 0876 1B14     		asrs	r3, r3, #16
 2325 0878 7A6D     		ldr	r2, [r7, #84]
 2326 087a 1344     		add	r3, r3, r2
 2327 087c 7B65     		str	r3, [r7, #84]
 2328              	.L147:
 905:..\src/interruptions.c ****                 
 906:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2329              		.loc 1 906 0
 2330 087e 844A     		ldr	r2, .L182+16
 2331 0880 3B68     		ldr	r3, [r7]
 2332 0882 1360     		str	r3, [r2]
 907:..\src/interruptions.c ****                 
 908:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2333              		.loc 1 908 0
 2334 0884 7B6D     		ldr	r3, [r7, #84]
 2335 0886 002B     		cmp	r3, #0
 2336 0888 03DB     		blt	.L148
 909:..\src/interruptions.c ****                     motor_dir = TRUE;
 2337              		.loc 1 909 0
 2338 088a 824B     		ldr	r3, .L182+20
 2339 088c 0122     		movs	r2, #1
 2340 088e 1A70     		strb	r2, [r3]
 910:..\src/interruptions.c ****                 else
 911:..\src/interruptions.c ****                     motor_dir = FALSE;
 912:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 59


 913:..\src/interruptions.c ****         break;
 2341              		.loc 1 913 0
 2342 0890 1EE0     		b	.L174
 2343              	.L148:
 911:..\src/interruptions.c ****             }
 2344              		.loc 1 911 0
 2345 0892 804B     		ldr	r3, .L182+20
 2346 0894 0022     		movs	r2, #0
 2347 0896 1A70     		strb	r2, [r3]
 2348              		.loc 1 913 0
 2349 0898 1AE0     		b	.L174
 2350              	.L114:
 914:..\src/interruptions.c ****         
 915:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
 916:..\src/interruptions.c ****         case CONTROL_PWM:
 917:..\src/interruptions.c **** 
 918:..\src/interruptions.c ****             pwm_input = g_ref[0].pwm;
 2351              		.loc 1 918 0
 2352 089a 7F4B     		ldr	r3, .L182+24
 2353 089c 9B68     		ldr	r3, [r3, #8]
 2354 089e 7B65     		str	r3, [r7, #84]
 919:..\src/interruptions.c **** 
 920:..\src/interruptions.c ****             if (pwm_input > 0) 
 2355              		.loc 1 920 0
 2356 08a0 7B6D     		ldr	r3, [r7, #84]
 2357 08a2 002B     		cmp	r3, #0
 2358 08a4 03DD     		ble	.L149
 921:..\src/interruptions.c ****                 motor_dir = TRUE;
 2359              		.loc 1 921 0
 2360 08a6 7B4B     		ldr	r3, .L182+20
 2361 08a8 0122     		movs	r2, #1
 2362 08aa 1A70     		strb	r2, [r3]
 2363 08ac 02E0     		b	.L150
 2364              	.L149:
 922:..\src/interruptions.c ****             else 
 923:..\src/interruptions.c ****                 motor_dir = FALSE;
 2365              		.loc 1 923 0
 2366 08ae 794B     		ldr	r3, .L182+20
 2367 08b0 0022     		movs	r2, #0
 2368 08b2 1A70     		strb	r2, [r3]
 2369              	.L150:
 924:..\src/interruptions.c ****             
 925:..\src/interruptions.c **** 
 926:..\src/interruptions.c ****             // pwm_input saturation
 927:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2370              		.loc 1 927 0
 2371 08b4 7B6D     		ldr	r3, [r7, #84]
 2372 08b6 13F1640F 		cmn	r3, #100
 2373 08ba 03DA     		bge	.L151
 928:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2374              		.loc 1 928 0
 2375 08bc 6FF06303 		mvn	r3, #99
 2376 08c0 7B65     		str	r3, [r7, #84]
 929:..\src/interruptions.c ****             else {
 930:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
 931:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 932:..\src/interruptions.c ****         	}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 60


 933:..\src/interruptions.c **** 
 934:..\src/interruptions.c ****         break;
 2377              		.loc 1 934 0
 2378 08c2 07E0     		b	.L175
 2379              	.L151:
 930:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2380              		.loc 1 930 0
 2381 08c4 7B6D     		ldr	r3, [r7, #84]
 2382 08c6 642B     		cmp	r3, #100
 2383 08c8 04DD     		ble	.L175
 931:..\src/interruptions.c ****         	}
 2384              		.loc 1 931 0
 2385 08ca 6423     		movs	r3, #100
 2386 08cc 7B65     		str	r3, [r7, #84]
 2387              		.loc 1 934 0
 2388 08ce 01E0     		b	.L175
 2389              	.L174:
 913:..\src/interruptions.c ****         
 2390              		.loc 1 913 0
 2391 08d0 00BF     		nop
 2392 08d2 00E0     		b	.L111
 2393              	.L175:
 2394              		.loc 1 934 0
 2395 08d4 00BF     		nop
 2396              	.L111:
 935:..\src/interruptions.c ****             
 936:..\src/interruptions.c ****     }
 937:..\src/interruptions.c **** 
 938:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
 939:..\src/interruptions.c **** 
 940:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2397              		.loc 1 940 0
 2398 08d6 7B6D     		ldr	r3, [r7, #84]
 2399 08d8 642B     		cmp	r3, #100
 2400 08da 01DD     		ble	.L153
 941:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2401              		.loc 1 941 0
 2402 08dc 6423     		movs	r3, #100
 2403 08de 7B65     		str	r3, [r7, #84]
 2404              	.L153:
 942:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2405              		.loc 1 942 0
 2406 08e0 7B6D     		ldr	r3, [r7, #84]
 2407 08e2 13F1640F 		cmn	r3, #100
 2408 08e6 02DA     		bge	.L154
 943:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2409              		.loc 1 943 0
 2410 08e8 6FF06303 		mvn	r3, #99
 2411 08ec 7B65     		str	r3, [r7, #84]
 2412              	.L154:
 944:..\src/interruptions.c **** 
 945:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 2413              		.loc 1 945 0
 2414 08ee 7B6C     		ldr	r3, [r7, #68]
 2415 08f0 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2416 08f4 012B     		cmp	r3, #1
 2417 08f6 0DD0     		beq	.L155
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 61


 946:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 2418              		.loc 1 946 0
 2419 08f8 7B6D     		ldr	r3, [r7, #84]
 2420 08fa 9B02     		lsls	r3, r3, #10
 2421 08fc 674A     		ldr	r2, .L182+28
 2422 08fe 82FB0312 		smull	r1, r2, r2, r3
 2423 0902 5211     		asrs	r2, r2, #5
 2424 0904 DB17     		asrs	r3, r3, #31
 2425 0906 D31A     		subs	r3, r2, r3
 2426 0908 654A     		ldr	r2, .L182+32
 2427 090a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2428 090c 02FB03F3 		mul	r3, r2, r3
 2429 0910 9B12     		asrs	r3, r3, #10
 2430 0912 7B65     		str	r3, [r7, #84]
 2431              	.L155:
 947:..\src/interruptions.c ****  
 948:..\src/interruptions.c ****     //// RATE LIMITER ////
 949:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 2432              		.loc 1 949 0
 2433 0914 634B     		ldr	r3, .L182+36
 2434 0916 1B68     		ldr	r3, [r3]
 2435 0918 7A6D     		ldr	r2, [r7, #84]
 2436 091a D31A     		subs	r3, r2, r3
 2437 091c 7A6C     		ldr	r2, [r7, #68]
 2438 091e 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2439 0922 9342     		cmp	r3, r2
 2440 0924 08DD     		ble	.L156
 950:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 2441              		.loc 1 950 0
 2442 0926 7B6C     		ldr	r3, [r7, #68]
 2443 0928 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2444 092c 1A46     		mov	r2, r3
 2445 092e 5D4B     		ldr	r3, .L182+36
 2446 0930 1B68     		ldr	r3, [r3]
 2447 0932 1344     		add	r3, r3, r2
 2448 0934 7B65     		str	r3, [r7, #84]
 2449 0936 10E0     		b	.L157
 2450              	.L156:
 951:..\src/interruptions.c ****     }
 952:..\src/interruptions.c ****     else {
 953:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 2451              		.loc 1 953 0
 2452 0938 5A4B     		ldr	r3, .L182+36
 2453 093a 1B68     		ldr	r3, [r3]
 2454 093c 7A6D     		ldr	r2, [r7, #84]
 2455 093e D21A     		subs	r2, r2, r3
 2456 0940 7B6C     		ldr	r3, [r7, #68]
 2457 0942 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2458 0946 5B42     		negs	r3, r3
 2459 0948 9A42     		cmp	r2, r3
 2460 094a 06DA     		bge	.L157
 954:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 2461              		.loc 1 954 0
 2462 094c 554B     		ldr	r3, .L182+36
 2463 094e 1B68     		ldr	r3, [r3]
 2464 0950 7A6C     		ldr	r2, [r7, #68]
 2465 0952 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 62


 2466 0956 9B1A     		subs	r3, r3, r2
 2467 0958 7B65     		str	r3, [r7, #84]
 2468              	.L157:
 955:..\src/interruptions.c ****     }
 956:..\src/interruptions.c ****     /*   old version [MP] - to check
 957:..\src/interruptions.c ****     if(SIGN(pwm_input-prev_pwm) == SIGN(pos_error))
 958:..\src/interruptions.c ****     {
 959:..\src/interruptions.c ****         if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter)
 960:..\src/interruptions.c ****             pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 961:..\src/interruptions.c ****     
 962:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 963:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 964:..\src/interruptions.c ****     }*/
 965:..\src/interruptions.c ****     
 966:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2469              		.loc 1 966 0
 2470 095a 7B6D     		ldr	r3, [r7, #84]
 2471 095c 642B     		cmp	r3, #100
 2472 095e 01DD     		ble	.L158
 967:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2473              		.loc 1 967 0
 2474 0960 6423     		movs	r3, #100
 2475 0962 7B65     		str	r3, [r7, #84]
 2476              	.L158:
 968:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2477              		.loc 1 968 0
 2478 0964 7B6D     		ldr	r3, [r7, #84]
 2479 0966 13F1640F 		cmn	r3, #100
 2480 096a 02DA     		bge	.L159
 969:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2481              		.loc 1 969 0
 2482 096c 6FF06303 		mvn	r3, #99
 2483 0970 7B65     		str	r3, [r7, #84]
 2484              	.L159:
 970:..\src/interruptions.c ****     
 971:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2485              		.loc 1 971 0
 2486 0972 4C4A     		ldr	r2, .L182+36
 2487 0974 7B6D     		ldr	r3, [r7, #84]
 2488 0976 1360     		str	r3, [r2]
 972:..\src/interruptions.c **** 	
 973:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2489              		.loc 1 973 0
 2490 0978 7B6D     		ldr	r3, [r7, #84]
 2491 097a 002B     		cmp	r3, #0
 2492 097c 01DB     		blt	.L160
 2493              		.loc 1 973 0 is_stmt 0 discriminator 1
 2494 097e 0122     		movs	r2, #1
 2495 0980 01E0     		b	.L161
 2496              	.L160:
 2497              		.loc 1 973 0 discriminator 2
 2498 0982 4FF0FF32 		mov	r2, #-1
 2499              	.L161:
 2500              		.loc 1 973 0 discriminator 4
 2501 0986 484B     		ldr	r3, .L182+40
 2502 0988 1A70     		strb	r2, [r3]
 974:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 63


 975:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 2503              		.loc 1 975 0 is_stmt 1 discriminator 4
 2504 098a 7B6C     		ldr	r3, [r7, #68]
 2505 098c 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 2506 0990 012B     		cmp	r3, #1
 2507 0992 6CD1     		bne	.L162
 976:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
 977:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 2508              		.loc 1 977 0
 2509 0994 7B6C     		ldr	r3, [r7, #68]
 2510 0996 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2511 099a 012B     		cmp	r3, #1
 2512 099c 64D0     		beq	.L163
 2513              		.loc 1 977 0 is_stmt 0 discriminator 1
 2514 099e 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2515 09a2 4249     		ldr	r1, .L182+44
 2516 09a4 1346     		mov	r3, r2
 2517 09a6 5B00     		lsls	r3, r3, #1
 2518 09a8 1344     		add	r3, r3, r2
 2519 09aa 1B01     		lsls	r3, r3, #4
 2520 09ac 0B44     		add	r3, r3, r1
 2521 09ae 1968     		ldr	r1, [r3]
 2522 09b0 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2523 09b4 3248     		ldr	r0, .L182
 2524 09b6 1346     		mov	r3, r2
 2525 09b8 5B00     		lsls	r3, r3, #1
 2526 09ba 1344     		add	r3, r3, r2
 2527 09bc 1B01     		lsls	r3, r3, #4
 2528 09be 0344     		add	r3, r3, r0
 2529 09c0 1B68     		ldr	r3, [r3]
 2530 09c2 CB1A     		subs	r3, r1, r3
 2531 09c4 312B     		cmp	r3, #49
 2532 09c6 4FDC     		bgt	.L163
 978:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2533              		.loc 1 978 0 is_stmt 1 discriminator 2
 2534 09c8 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2535 09cc 3749     		ldr	r1, .L182+44
 2536 09ce 1346     		mov	r3, r2
 2537 09d0 5B00     		lsls	r3, r3, #1
 2538 09d2 1344     		add	r3, r3, r2
 2539 09d4 1B01     		lsls	r3, r3, #4
 2540 09d6 0B44     		add	r3, r3, r1
 2541 09d8 1968     		ldr	r1, [r3]
 2542 09da 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2543 09de 2848     		ldr	r0, .L182
 2544 09e0 1346     		mov	r3, r2
 2545 09e2 5B00     		lsls	r3, r3, #1
 2546 09e4 1344     		add	r3, r3, r2
 2547 09e6 1B01     		lsls	r3, r3, #4
 2548 09e8 0344     		add	r3, r3, r0
 2549 09ea 1B68     		ldr	r3, [r3]
 2550 09ec CB1A     		subs	r3, r1, r3
 977:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2551              		.loc 1 977 0 discriminator 2
 2552 09ee 13F1310F 		cmn	r3, #49
 2553 09f2 39DB     		blt	.L163
 979:..\src/interruptions.c ****             ((g_refOld[0].pos - g_ref[0].pos) < 100 && (g_refOld[0].pos - g_ref[0].pos) > -100) ) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 64


 2554              		.loc 1 979 0
 2555 09f4 2E4B     		ldr	r3, .L182+48
 2556 09f6 1A68     		ldr	r2, [r3]
 2557 09f8 274B     		ldr	r3, .L182+24
 2558 09fa 1B68     		ldr	r3, [r3]
 2559 09fc D31A     		subs	r3, r2, r3
 978:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2560              		.loc 1 978 0
 2561 09fe 632B     		cmp	r3, #99
 2562 0a00 32DC     		bgt	.L163
 2563              		.loc 1 979 0
 2564 0a02 2B4B     		ldr	r3, .L182+48
 2565 0a04 1A68     		ldr	r2, [r3]
 2566 0a06 244B     		ldr	r3, .L182+24
 2567 0a08 1B68     		ldr	r3, [r3]
 2568 0a0a D31A     		subs	r3, r2, r3
 2569 0a0c 13F1630F 		cmn	r3, #99
 2570 0a10 2ADB     		blt	.L163
 980:..\src/interruptions.c ****             position_counter++;
 2571              		.loc 1 980 0
 2572 0a12 284B     		ldr	r3, .L182+52
 2573 0a14 1B68     		ldr	r3, [r3]
 2574 0a16 0133     		adds	r3, r3, #1
 2575 0a18 264A     		ldr	r2, .L182+52
 2576 0a1a 1360     		str	r3, [r2]
 981:..\src/interruptions.c ****             
 982:..\src/interruptions.c ****             if (position_counter > 250) { 
 2577              		.loc 1 982 0
 2578 0a1c 254B     		ldr	r3, .L182+52
 2579 0a1e 1B68     		ldr	r3, [r3]
 2580 0a20 FA2B     		cmp	r3, #250
 2581 0a22 24D9     		bls	.L162
 983:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2582              		.loc 1 983 0
 2583 0a24 7B6C     		ldr	r3, [r7, #68]
 2584 0a26 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2585 0a2a 002B     		cmp	r3, #0
 2586 0a2c 0ED1     		bne	.L165
 2587              		.loc 1 983 0 is_stmt 0 discriminator 1
 2588 0a2e 224B     		ldr	r3, .L182+56
 2589 0a30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2590 0a32 002B     		cmp	r3, #0
 2591 0a34 0AD1     		bne	.L165
 984:..\src/interruptions.c ****                     g_refNew[0].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when USB input 
 2592              		.loc 1 984 0 is_stmt 1
 2593 0a36 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2594 0a3a 1149     		ldr	r1, .L182
 2595 0a3c 1346     		mov	r3, r2
 2596 0a3e 5B00     		lsls	r3, r3, #1
 2597 0a40 1344     		add	r3, r3, r2
 2598 0a42 1B01     		lsls	r3, r3, #4
 2599 0a44 0B44     		add	r3, r3, r1
 2600 0a46 1B68     		ldr	r3, [r3]
 2601 0a48 1C4A     		ldr	r2, .L182+60
 2602 0a4a 1360     		str	r3, [r2]
 2603              	.L165:
 985:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 65


 986:..\src/interruptions.c ****                 g_ref[0].pos = g_meas[SH_ENC_L].pos[0];
 2604              		.loc 1 986 0
 2605 0a4c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2606 0a50 0B49     		ldr	r1, .L182
 2607 0a52 1346     		mov	r3, r2
 2608 0a54 5B00     		lsls	r3, r3, #1
 2609 0a56 1344     		add	r3, r3, r2
 2610 0a58 1B01     		lsls	r3, r3, #4
 2611 0a5a 0B44     		add	r3, r3, r1
 2612 0a5c 1B68     		ldr	r3, [r3]
 2613 0a5e 0E4A     		ldr	r2, .L182+24
 2614 0a60 1360     		str	r3, [r2]
 987:..\src/interruptions.c ****                 pwm_input = 0;            
 2615              		.loc 1 987 0
 2616 0a62 0023     		movs	r3, #0
 2617 0a64 7B65     		str	r3, [r7, #84]
 982:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2618              		.loc 1 982 0
 2619 0a66 02E0     		b	.L162
 2620              	.L163:
 988:..\src/interruptions.c ****             }
 989:..\src/interruptions.c ****         }
 990:..\src/interruptions.c ****         else {
 991:..\src/interruptions.c ****             position_counter = 0;
 2621              		.loc 1 991 0
 2622 0a68 124B     		ldr	r3, .L182+52
 2623 0a6a 0022     		movs	r2, #0
 2624 0a6c 1A60     		str	r2, [r3]
 2625              	.L162:
 992:..\src/interruptions.c ****         }
 993:..\src/interruptions.c ****     }
 994:..\src/interruptions.c ****     
 995:..\src/interruptions.c ****     if (motor_dir)
 2626              		.loc 1 995 0
 2627 0a6e 094B     		ldr	r3, .L182+20
 2628 0a70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2629 0a72 002B     		cmp	r3, #0
 2630 0a74 24D0     		beq	.L166
 996:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 2631              		.loc 1 996 0
 2632 0a76 0120     		movs	r0, #1
 2633 0a78 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2634 0a7c 23E0     		b	.L167
 2635              	.L183:
 2636 0a7e 00BF     		.align	2
 2637              	.L182:
 2638 0a80 00000000 		.word	g_meas
 2639 0a84 9C000000 		.word	curr_error_sum.10409
 2640 0a88 A0860100 		.word	100000
 2641 0a8c 6079FEFF 		.word	-100000
 2642 0a90 A0000000 		.word	prev_curr_err.10411
 2643 0a94 98000000 		.word	motor_dir.10413
 2644 0a98 00000000 		.word	g_ref
 2645 0a9c 1F85EB51 		.word	1374389535
 2646 0aa0 00000000 		.word	dev_pwm_limit
 2647 0aa4 A4000000 		.word	prev_pwm.10412
 2648 0aa8 00000000 		.word	pwm_sign
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 66


 2649 0aac 00000000 		.word	g_measOld
 2650 0ab0 00000000 		.word	g_refOld
 2651 0ab4 A8000000 		.word	position_counter.10414
 2652 0ab8 00000000 		.word	change_ext_ref_flag
 2653 0abc 00000000 		.word	g_refNew
 2654              	.L166:
 997:..\src/interruptions.c ****     else
 998:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 2655              		.loc 1 998 0
 2656 0ac0 0020     		movs	r0, #0
 2657 0ac2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2658              	.L167:
 999:..\src/interruptions.c **** 
1000:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 2659              		.loc 1 1000 0
 2660 0ac6 7B6D     		ldr	r3, [r7, #84]
 2661 0ac8 002B     		cmp	r3, #0
 2662 0aca B8BF     		it	lt
 2663 0acc 5B42     		rsblt	r3, r3, #0
 2664 0ace DBB2     		uxtb	r3, r3
 2665 0ad0 1846     		mov	r0, r3
 2666 0ad2 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1001:..\src/interruptions.c **** }
 2667              		.loc 1 1001 0
 2668 0ad6 00BF     		nop
 2669 0ad8 5837     		adds	r7, r7, #88
 2670              		.cfi_def_cfa_offset 8
 2671 0ada BD46     		mov	sp, r7
 2672              		.cfi_def_cfa_register 13
 2673              		@ sp needed
 2674 0adc 80BD     		pop	{r7, pc}
 2675              		.cfi_endproc
 2676              	.LFE68:
 2677              		.size	motor_control_SH, .-motor_control_SH
 2678 0ade 00BF     		.section	.text.motor_control_generic,"ax",%progbits
 2679              		.align	2
 2680              		.global	motor_control_generic
 2681              		.thumb
 2682              		.thumb_func
 2683              		.type	motor_control_generic, %function
 2684              	motor_control_generic:
 2685              	.LFB69:
1002:..\src/interruptions.c **** 
1003:..\src/interruptions.c **** //==============================================================================
1004:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1005:..\src/interruptions.c **** //==============================================================================
1006:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 2686              		.loc 1 1006 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 96
 2689              		@ frame_needed = 1, uses_anonymous_args = 0
 2690 0000 90B5     		push	{r4, r7, lr}
 2691              		.cfi_def_cfa_offset 12
 2692              		.cfi_offset 4, -12
 2693              		.cfi_offset 7, -8
 2694              		.cfi_offset 14, -4
 2695 0002 99B0     		sub	sp, sp, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 67


 2696              		.cfi_def_cfa_offset 112
 2697 0004 00AF     		add	r7, sp, #0
 2698              		.cfi_def_cfa_register 7
 2699 0006 0346     		mov	r3, r0
 2700 0008 FB71     		strb	r3, [r7, #7]
1007:..\src/interruptions.c ****     
1008:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2701              		.loc 1 1008 0
 2702 000a 0023     		movs	r3, #0
 2703 000c FB65     		str	r3, [r7, #92]
1009:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1010:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1011:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1012:..\src/interruptions.c ****     int32 CYDATA handle_value;
1013:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
1014:..\src/interruptions.c **** 
1015:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 2704              		.loc 1 1015 0
 2705 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2706 0010 1346     		mov	r3, r2
 2707 0012 DB00     		lsls	r3, r3, #3
 2708 0014 9B1A     		subs	r3, r3, r2
 2709 0016 1B01     		lsls	r3, r3, #4
 2710 0018 B033     		adds	r3, r3, #176
 2711 001a AA4A     		ldr	r2, .L305
 2712 001c 1344     		add	r3, r3, r2
 2713 001e FB64     		str	r3, [r7, #76]
1016:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 2714              		.loc 1 1016 0
 2715 0020 FB6C     		ldr	r3, [r7, #76]
 2716 0022 93F86030 		ldrb	r3, [r3, #96]
 2717 0026 87F84B30 		strb	r3, [r7, #75]
1017:..\src/interruptions.c ****     
1018:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 2718              		.loc 1 1018 0
 2719 002a FB6C     		ldr	r3, [r7, #76]
 2720 002c 1B68     		ldr	r3, [r3]
 2721 002e 7B64     		str	r3, [r7, #68]
1019:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 2722              		.loc 1 1019 0
 2723 0030 FB6C     		ldr	r3, [r7, #76]
 2724 0032 5B68     		ldr	r3, [r3, #4]
 2725 0034 3B64     		str	r3, [r7, #64]
1020:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 2726              		.loc 1 1020 0
 2727 0036 FB6C     		ldr	r3, [r7, #76]
 2728 0038 9B68     		ldr	r3, [r3, #8]
 2729 003a FB63     		str	r3, [r7, #60]
1021:..\src/interruptions.c **** 
1022:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 2730              		.loc 1 1022 0
 2731 003c FB6C     		ldr	r3, [r7, #76]
 2732 003e DB68     		ldr	r3, [r3, #12]
 2733 0040 BB63     		str	r3, [r7, #56]
1023:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 2734              		.loc 1 1023 0
 2735 0042 FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 68


 2736 0044 1B69     		ldr	r3, [r3, #16]
 2737 0046 7B63     		str	r3, [r7, #52]
1024:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 2738              		.loc 1 1024 0
 2739 0048 FB6C     		ldr	r3, [r7, #76]
 2740 004a 5B69     		ldr	r3, [r3, #20]
 2741 004c 3B63     		str	r3, [r7, #48]
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 2742              		.loc 1 1026 0
 2743 004e FB6C     		ldr	r3, [r7, #76]
 2744 0050 9B69     		ldr	r3, [r3, #24]
 2745 0052 FB62     		str	r3, [r7, #44]
1027:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 2746              		.loc 1 1027 0
 2747 0054 FB6C     		ldr	r3, [r7, #76]
 2748 0056 DB69     		ldr	r3, [r3, #28]
 2749 0058 BB62     		str	r3, [r7, #40]
1028:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 2750              		.loc 1 1028 0
 2751 005a FB6C     		ldr	r3, [r7, #76]
 2752 005c 1B6A     		ldr	r3, [r3, #32]
 2753 005e 7B62     		str	r3, [r7, #36]
1029:..\src/interruptions.c ****     
1030:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 2754              		.loc 1 1030 0
 2755 0060 FB6C     		ldr	r3, [r7, #76]
 2756 0062 5B6A     		ldr	r3, [r3, #36]
 2757 0064 3B62     		str	r3, [r7, #32]
1031:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 2758              		.loc 1 1031 0
 2759 0066 FB6C     		ldr	r3, [r7, #76]
 2760 0068 9B6A     		ldr	r3, [r3, #40]
 2761 006a FB61     		str	r3, [r7, #28]
1032:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 2762              		.loc 1 1032 0
 2763 006c FB6C     		ldr	r3, [r7, #76]
 2764 006e DB6A     		ldr	r3, [r3, #44]
 2765 0070 BB61     		str	r3, [r7, #24]
1033:..\src/interruptions.c **** 
1034:..\src/interruptions.c ****     // Static Variables
1035:..\src/interruptions.c **** 
1036:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1037:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1038:..\src/interruptions.c ****     
1039:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1040:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1041:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1042:..\src/interruptions.c **** 
1043:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1044:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1045:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
1046:..\src/interruptions.c ****                                                         // 1 EMG 1
1047:..\src/interruptions.c ****                                                         // 2 EMG 2
1048:..\src/interruptions.c ****                                                         // wait for both to get down
1049:..\src/interruptions.c ****     
1050:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 69


 2766              		.loc 1 1050 0
 2767 0072 954B     		ldr	r3, .L305+4
 2768 0074 1B68     		ldr	r3, [r3]
 2769 0076 934A     		ldr	r2, .L305
 2770 0078 B2F8F021 		ldrh	r2, [r2, #496]
 2771 007c 9B1A     		subs	r3, r3, r2
 2772 007e 7B61     		str	r3, [r7, #20]
1051:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 2773              		.loc 1 1051 0
 2774 0080 914B     		ldr	r3, .L305+4
 2775 0082 5B68     		ldr	r3, [r3, #4]
 2776 0084 8F4A     		ldr	r2, .L305
 2777 0086 B2F8F221 		ldrh	r2, [r2, #498]
 2778 008a 9B1A     		subs	r3, r3, r2
 2779 008c 3B61     		str	r3, [r7, #16]
1052:..\src/interruptions.c **** 
1053:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
1054:..\src/interruptions.c ****     switch(MOT->input_mode) {
 2780              		.loc 1 1054 0
 2781 008e FB6C     		ldr	r3, [r7, #76]
 2782 0090 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2783 0094 013B     		subs	r3, r3, #1
 2784 0096 042B     		cmp	r3, #4
 2785 0098 00F20682 		bhi	.L296
 2786 009c 01A2     		adr	r2, .L187
 2787 009e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2788 00a2 00BF     		.p2align 2
 2789              	.L187:
 2790 00a4 B9000000 		.word	.L186+1
 2791 00a8 C9010000 		.word	.L188+1
 2792 00ac 0F020000 		.word	.L189+1
 2793 00b0 9B020000 		.word	.L190+1
 2794 00b4 A1030000 		.word	.L191+1
 2795              		.p2align 1
 2796              	.L186:
1055:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
1056:..\src/interruptions.c **** 
1057:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
1058:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
1059:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 2797              		.loc 1 1059 0
 2798 00b8 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 2799 00bc 8149     		ldr	r1, .L305
 2800 00be 1346     		mov	r3, r2
 2801 00c0 5B00     		lsls	r3, r3, #1
 2802 00c2 1344     		add	r3, r3, r2
 2803 00c4 1B01     		lsls	r3, r3, #4
 2804 00c6 0B44     		add	r3, r3, r1
 2805 00c8 03F5D873 		add	r3, r3, #432
 2806 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2807 00ce 002B     		cmp	r3, #0
 2808 00d0 1CD0     		beq	.L192
1060:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 2809              		.loc 1 1060 0
 2810 00d2 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 2811 00d6 7D49     		ldr	r1, .L305+8
 2812 00d8 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 70


 2813 00da 5B00     		lsls	r3, r3, #1
 2814 00dc 1344     		add	r3, r3, r2
 2815 00de 1B01     		lsls	r3, r3, #4
 2816 00e0 0B44     		add	r3, r3, r1
 2817 00e2 0833     		adds	r3, r3, #8
 2818 00e4 1968     		ldr	r1, [r3]
 2819 00e6 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 2820 00ea 7648     		ldr	r0, .L305
 2821 00ec 1346     		mov	r3, r2
 2822 00ee 5B00     		lsls	r3, r3, #1
 2823 00f0 1344     		add	r3, r3, r2
 2824 00f2 1B01     		lsls	r3, r3, #4
 2825 00f4 0344     		add	r3, r3, r0
 2826 00f6 03F5DA73 		add	r3, r3, #436
 2827 00fa 93F90030 		ldrsb	r3, [r3]
 2828 00fe 03FB01F2 		mul	r2, r3, r1
 2829 0102 FB6C     		ldr	r3, [r7, #76]
 2830 0104 5B6B     		ldr	r3, [r3, #52]
 2831 0106 1344     		add	r3, r3, r2
 2832 0108 3B65     		str	r3, [r7, #80]
 2833 010a 1BE0     		b	.L193
 2834              	.L192:
1061:..\src/interruptions.c ****             else
1062:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 2835              		.loc 1 1062 0
 2836 010c 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 2837 0110 6E49     		ldr	r1, .L305+8
 2838 0112 1346     		mov	r3, r2
 2839 0114 5B00     		lsls	r3, r3, #1
 2840 0116 1344     		add	r3, r3, r2
 2841 0118 1B01     		lsls	r3, r3, #4
 2842 011a 0B44     		add	r3, r3, r1
 2843 011c 0433     		adds	r3, r3, #4
 2844 011e 1968     		ldr	r1, [r3]
 2845 0120 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 2846 0124 6748     		ldr	r0, .L305
 2847 0126 1346     		mov	r3, r2
 2848 0128 5B00     		lsls	r3, r3, #1
 2849 012a 1344     		add	r3, r3, r2
 2850 012c 1B01     		lsls	r3, r3, #4
 2851 012e 0344     		add	r3, r3, r0
 2852 0130 03F5DA73 		add	r3, r3, #436
 2853 0134 93F90030 		ldrsb	r3, [r3]
 2854 0138 03FB01F2 		mul	r2, r3, r1
 2855 013c FB6C     		ldr	r3, [r7, #76]
 2856 013e 5B6B     		ldr	r3, [r3, #52]
 2857 0140 1344     		add	r3, r3, r2
 2858 0142 3B65     		str	r3, [r7, #80]
 2859              	.L193:
1063:..\src/interruptions.c ****             
1064:..\src/interruptions.c **** 
1065:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
1066:..\src/interruptions.c ****             if (((handle_value - g_refOld[idx].pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0
 2860              		.loc 1 1066 0
 2861 0144 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2862 0146 624A     		ldr	r2, .L305+12
 2863 0148 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 71


 2864 014a 1344     		add	r3, r3, r2
 2865 014c 1B68     		ldr	r3, [r3]
 2866 014e 3A6D     		ldr	r2, [r7, #80]
 2867 0150 D21A     		subs	r2, r2, r3
 2868 0152 FB6C     		ldr	r3, [r7, #76]
 2869 0154 1B6C     		ldr	r3, [r3, #64]
 2870 0156 9A42     		cmp	r2, r3
 2871 0158 11DD     		ble	.L194
 2872              		.loc 1 1066 0 is_stmt 0 discriminator 1
 2873 015a FB6C     		ldr	r3, [r7, #76]
 2874 015c 1B6C     		ldr	r3, [r3, #64]
 2875 015e 002B     		cmp	r3, #0
 2876 0160 0DD0     		beq	.L194
1067:..\src/interruptions.c ****                 g_ref[idx].pos += MOT->max_step_pos;
 2877              		.loc 1 1067 0 is_stmt 1
 2878 0162 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2879 0164 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2880 0166 5B49     		ldr	r1, .L305+16
 2881 0168 1201     		lsls	r2, r2, #4
 2882 016a 0A44     		add	r2, r2, r1
 2883 016c 1168     		ldr	r1, [r2]
 2884 016e FA6C     		ldr	r2, [r7, #76]
 2885 0170 126C     		ldr	r2, [r2, #64]
 2886 0172 0A44     		add	r2, r2, r1
 2887 0174 5749     		ldr	r1, .L305+16
 2888 0176 1B01     		lsls	r3, r3, #4
 2889 0178 0B44     		add	r3, r3, r1
 2890 017a 1A60     		str	r2, [r3]
 2891 017c 23E0     		b	.L195
 2892              	.L194:
1068:..\src/interruptions.c ****             else {
1069:..\src/interruptions.c ****                 if (((handle_value - g_refOld[idx].pos) < MOT->max_step_neg) && (MOT->max_step_neg 
 2893              		.loc 1 1069 0
 2894 017e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2895 0180 534A     		ldr	r2, .L305+12
 2896 0182 1B01     		lsls	r3, r3, #4
 2897 0184 1344     		add	r3, r3, r2
 2898 0186 1B68     		ldr	r3, [r3]
 2899 0188 3A6D     		ldr	r2, [r7, #80]
 2900 018a D21A     		subs	r2, r2, r3
 2901 018c FB6C     		ldr	r3, [r7, #76]
 2902 018e DB6B     		ldr	r3, [r3, #60]
 2903 0190 9A42     		cmp	r2, r3
 2904 0192 11DA     		bge	.L196
 2905              		.loc 1 1069 0 is_stmt 0 discriminator 1
 2906 0194 FB6C     		ldr	r3, [r7, #76]
 2907 0196 DB6B     		ldr	r3, [r3, #60]
 2908 0198 002B     		cmp	r3, #0
 2909 019a 0DD0     		beq	.L196
1070:..\src/interruptions.c ****                     g_ref[idx].pos += MOT->max_step_neg;
 2910              		.loc 1 1070 0 is_stmt 1
 2911 019c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2912 019e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2913 01a0 4C49     		ldr	r1, .L305+16
 2914 01a2 1201     		lsls	r2, r2, #4
 2915 01a4 0A44     		add	r2, r2, r1
 2916 01a6 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 72


 2917 01a8 FA6C     		ldr	r2, [r7, #76]
 2918 01aa D26B     		ldr	r2, [r2, #60]
 2919 01ac 0A44     		add	r2, r2, r1
 2920 01ae 4949     		ldr	r1, .L305+16
 2921 01b0 1B01     		lsls	r3, r3, #4
 2922 01b2 0B44     		add	r3, r3, r1
 2923 01b4 1A60     		str	r2, [r3]
 2924 01b6 06E0     		b	.L195
 2925              	.L196:
1071:..\src/interruptions.c ****                 else
1072:..\src/interruptions.c ****                     g_ref[idx].pos = handle_value;
 2926              		.loc 1 1072 0
 2927 01b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2928 01ba 464A     		ldr	r2, .L305+16
 2929 01bc 1B01     		lsls	r3, r3, #4
 2930 01be 1344     		add	r3, r3, r2
 2931 01c0 3A6D     		ldr	r2, [r7, #80]
 2932 01c2 1A60     		str	r2, [r3]
1073:..\src/interruptions.c ****             }
1074:..\src/interruptions.c ****             break;
 2933              		.loc 1 1074 0
 2934 01c4 73E1     		b	.L197
 2935              	.L195:
 2936 01c6 72E1     		b	.L197
 2937              	.L188:
1075:..\src/interruptions.c ****             
1076:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
1077:..\src/interruptions.c ****             if (err_emg_1 > 0)
 2938              		.loc 1 1077 0
 2939 01c8 7B69     		ldr	r3, [r7, #20]
 2940 01ca 002B     		cmp	r3, #0
 2941 01cc 18DD     		ble	.L198
1078:..\src/interruptions.c ****                 g_ref[idx].pos = (err_emg_1 * g_mem.motor[idx].pos_lim_sup) / (1024 - c_mem.emg.emg
 2942              		.loc 1 1078 0
 2943 01ce F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 2944 01d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2945 01d2 4148     		ldr	r0, .L305+20
 2946 01d4 1346     		mov	r3, r2
 2947 01d6 DB00     		lsls	r3, r3, #3
 2948 01d8 9B1A     		subs	r3, r3, r2
 2949 01da 1B01     		lsls	r3, r3, #4
 2950 01dc 0344     		add	r3, r3, r0
 2951 01de E833     		adds	r3, r3, #232
 2952 01e0 1B68     		ldr	r3, [r3]
 2953 01e2 7A69     		ldr	r2, [r7, #20]
 2954 01e4 02FB03F2 		mul	r2, r2, r3
 2955 01e8 364B     		ldr	r3, .L305
 2956 01ea B3F8F031 		ldrh	r3, [r3, #496]
 2957 01ee C3F58063 		rsb	r3, r3, #1024
 2958 01f2 92FBF3F2 		sdiv	r2, r2, r3
 2959 01f6 3748     		ldr	r0, .L305+16
 2960 01f8 0B01     		lsls	r3, r1, #4
 2961 01fa 0344     		add	r3, r3, r0
 2962 01fc 1A60     		str	r2, [r3]
1079:..\src/interruptions.c ****             else
1080:..\src/interruptions.c ****                 g_ref[idx].pos = 0;
1081:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 73


 2963              		.loc 1 1081 0
 2964 01fe 56E1     		b	.L197
 2965              	.L198:
1080:..\src/interruptions.c ****             break;
 2966              		.loc 1 1080 0
 2967 0200 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2968 0202 344A     		ldr	r2, .L305+16
 2969 0204 1B01     		lsls	r3, r3, #4
 2970 0206 1344     		add	r3, r3, r2
 2971 0208 0022     		movs	r2, #0
 2972 020a 1A60     		str	r2, [r3]
 2973              		.loc 1 1081 0
 2974 020c 4FE1     		b	.L197
 2975              	.L189:
1082:..\src/interruptions.c **** 
1083:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
1084:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 2976              		.loc 1 1084 0
 2977 020e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2978 0210 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2979 0212 2F49     		ldr	r1, .L305+12
 2980 0214 1201     		lsls	r2, r2, #4
 2981 0216 0A44     		add	r2, r2, r1
 2982 0218 1268     		ldr	r2, [r2]
 2983 021a 2E49     		ldr	r1, .L305+16
 2984 021c 1B01     		lsls	r3, r3, #4
 2985 021e 0B44     		add	r3, r3, r1
 2986 0220 1A60     		str	r2, [r3]
1085:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 2987              		.loc 1 1085 0
 2988 0222 7B69     		ldr	r3, [r7, #20]
 2989 0224 002B     		cmp	r3, #0
 2990 0226 19DD     		ble	.L200
1086:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (
 2991              		.loc 1 1086 0
 2992 0228 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2993 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2994 022c 2849     		ldr	r1, .L305+12
 2995 022e 1201     		lsls	r2, r2, #4
 2996 0230 0A44     		add	r2, r2, r1
 2997 0232 1168     		ldr	r1, [r2]
 2998 0234 284A     		ldr	r2, .L305+20
 2999 0236 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3000 023a 1046     		mov	r0, r2
 3001 023c 7A69     		ldr	r2, [r7, #20]
 3002 023e 02FB00F2 		mul	r2, r2, r0
 3003 0242 5000     		lsls	r0, r2, #1
 3004 0244 1F4A     		ldr	r2, .L305
 3005 0246 B2F8F021 		ldrh	r2, [r2, #496]
 3006 024a C2F58062 		rsb	r2, r2, #1024
 3007 024e 90FBF2F2 		sdiv	r2, r0, r2
 3008 0252 0A44     		add	r2, r2, r1
 3009 0254 1F49     		ldr	r1, .L305+16
 3010 0256 1B01     		lsls	r3, r3, #4
 3011 0258 0B44     		add	r3, r3, r1
 3012 025a 1A60     		str	r2, [r3]
 3013              	.L200:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 74


1087:..\src/interruptions.c ****             }
1088:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 3014              		.loc 1 1088 0
 3015 025c 3B69     		ldr	r3, [r7, #16]
 3016 025e 002B     		cmp	r3, #0
 3017 0260 40F32481 		ble	.L297
1089:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (
 3018              		.loc 1 1089 0
 3019 0264 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3020 0266 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3021 0268 1949     		ldr	r1, .L305+12
 3022 026a 1201     		lsls	r2, r2, #4
 3023 026c 0A44     		add	r2, r2, r1
 3024 026e 1168     		ldr	r1, [r2]
 3025 0270 194A     		ldr	r2, .L305+20
 3026 0272 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3027 0276 1046     		mov	r0, r2
 3028 0278 3A69     		ldr	r2, [r7, #16]
 3029 027a 02FB00F2 		mul	r2, r2, r0
 3030 027e 5000     		lsls	r0, r2, #1
 3031 0280 104A     		ldr	r2, .L305
 3032 0282 B2F8F221 		ldrh	r2, [r2, #498]
 3033 0286 C2F58062 		rsb	r2, r2, #1024
 3034 028a 90FBF2F2 		sdiv	r2, r0, r2
 3035 028e 8A1A     		subs	r2, r1, r2
 3036 0290 1049     		ldr	r1, .L305+16
 3037 0292 1B01     		lsls	r3, r3, #4
 3038 0294 0B44     		add	r3, r3, r1
 3039 0296 1A60     		str	r2, [r3]
1090:..\src/interruptions.c ****             }
1091:..\src/interruptions.c ****             break;
 3040              		.loc 1 1091 0
 3041 0298 08E1     		b	.L297
 3042              	.L190:
1092:..\src/interruptions.c **** 
1093:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
1094:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3043              		.loc 1 1094 0
 3044 029a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3045 029c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3046 029e 0C49     		ldr	r1, .L305+12
 3047 02a0 1201     		lsls	r2, r2, #4
 3048 02a2 0A44     		add	r2, r2, r1
 3049 02a4 1268     		ldr	r2, [r2]
 3050 02a6 0B49     		ldr	r1, .L305+16
 3051 02a8 1B01     		lsls	r3, r3, #4
 3052 02aa 0B44     		add	r3, r3, r1
 3053 02ac 1A60     		str	r2, [r3]
1095:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3054              		.loc 1 1095 0
 3055 02ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3056 02b0 0A4A     		ldr	r2, .L305+24
 3057 02b2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3058 02b4 012B     		cmp	r3, #1
 3059 02b6 2BD0     		beq	.L203
 3060 02b8 022B     		cmp	r3, #2
 3061 02ba 4CD0     		beq	.L204
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 75


 3062 02bc 002B     		cmp	r3, #0
 3063 02be 0FD0     		beq	.L205
1096:..\src/interruptions.c ****                 case 0:
1097:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
1098:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1099:..\src/interruptions.c ****                         current_emg[idx] = 1;
1100:..\src/interruptions.c ****                         break;
1101:..\src/interruptions.c ****                     }
1102:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1103:..\src/interruptions.c ****                         current_emg[idx] = 2;
1104:..\src/interruptions.c ****                         break;
1105:..\src/interruptions.c ****                     }
1106:..\src/interruptions.c ****                     break;
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****                 case 1:
1109:..\src/interruptions.c ****                     // EMG 1 is first
1110:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
1111:..\src/interruptions.c ****                         current_emg[idx] = 0;
1112:..\src/interruptions.c ****                         break;
1113:..\src/interruptions.c ****                     }
1114:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
1115:..\src/interruptions.c ****                     break;
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****                 case 2:
1118:..\src/interruptions.c ****                     // EMG 2 is first
1119:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
1120:..\src/interruptions.c ****                         current_emg[idx] = 0;
1121:..\src/interruptions.c ****                         break;
1122:..\src/interruptions.c ****                     }
1123:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (
1124:..\src/interruptions.c ****                     break;
1125:..\src/interruptions.c **** 
1126:..\src/interruptions.c ****                 default:
1127:..\src/interruptions.c ****                     break;
 3064              		.loc 1 1127 0
 3065 02c0 6DE0     		b	.L207
 3066              	.L306:
 3067 02c2 00BF     		.align	2
 3068              	.L305:
 3069 02c4 00000000 		.word	c_mem
 3070 02c8 00000000 		.word	g_emg_meas
 3071 02cc 00000000 		.word	g_meas
 3072 02d0 00000000 		.word	g_refOld
 3073 02d4 00000000 		.word	g_ref
 3074 02d8 00000000 		.word	g_mem
 3075 02dc AC000000 		.word	current_emg.10470
 3076              	.L205:
1098:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3077              		.loc 1 1098 0
 3078 02e0 7B69     		ldr	r3, [r7, #20]
 3079 02e2 002B     		cmp	r3, #0
 3080 02e4 08DD     		ble	.L206
1098:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3081              		.loc 1 1098 0 is_stmt 0 discriminator 1
 3082 02e6 7A69     		ldr	r2, [r7, #20]
 3083 02e8 3B69     		ldr	r3, [r7, #16]
 3084 02ea 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 76


 3085 02ec 04DD     		ble	.L206
1099:..\src/interruptions.c ****                         break;
 3086              		.loc 1 1099 0 is_stmt 1
 3087 02ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3088 02f0 A14A     		ldr	r2, .L307
 3089 02f2 0121     		movs	r1, #1
 3090 02f4 D154     		strb	r1, [r2, r3]
1100:..\src/interruptions.c ****                     }
 3091              		.loc 1 1100 0
 3092 02f6 52E0     		b	.L207
 3093              	.L206:
1102:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3094              		.loc 1 1102 0
 3095 02f8 3B69     		ldr	r3, [r7, #16]
 3096 02fa 002B     		cmp	r3, #0
 3097 02fc 4EDD     		ble	.L298
1102:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3098              		.loc 1 1102 0 is_stmt 0 discriminator 1
 3099 02fe 3A69     		ldr	r2, [r7, #16]
 3100 0300 7B69     		ldr	r3, [r7, #20]
 3101 0302 9A42     		cmp	r2, r3
 3102 0304 4ADD     		ble	.L298
1103:..\src/interruptions.c ****                         break;
 3103              		.loc 1 1103 0 is_stmt 1
 3104 0306 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3105 0308 9B4A     		ldr	r2, .L307
 3106 030a 0221     		movs	r1, #2
 3107 030c D154     		strb	r1, [r2, r3]
1104:..\src/interruptions.c ****                     }
 3108              		.loc 1 1104 0
 3109 030e 46E0     		b	.L207
 3110              	.L203:
1110:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3111              		.loc 1 1110 0
 3112 0310 7B69     		ldr	r3, [r7, #20]
 3113 0312 002B     		cmp	r3, #0
 3114 0314 04DA     		bge	.L209
1111:..\src/interruptions.c ****                         break;
 3115              		.loc 1 1111 0
 3116 0316 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3117 0318 974A     		ldr	r2, .L307
 3118 031a 0021     		movs	r1, #0
 3119 031c D154     		strb	r1, [r2, r3]
1112:..\src/interruptions.c ****                     }
 3120              		.loc 1 1112 0
 3121 031e 3EE0     		b	.L207
 3122              	.L209:
1114:..\src/interruptions.c ****                     break;
 3123              		.loc 1 1114 0
 3124 0320 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3125 0322 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3126 0324 9549     		ldr	r1, .L307+4
 3127 0326 1201     		lsls	r2, r2, #4
 3128 0328 0A44     		add	r2, r2, r1
 3129 032a 1168     		ldr	r1, [r2]
 3130 032c 944A     		ldr	r2, .L307+8
 3131 032e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 77


 3132 0332 1046     		mov	r0, r2
 3133 0334 7A69     		ldr	r2, [r7, #20]
 3134 0336 02FB00F2 		mul	r2, r2, r0
 3135 033a 9000     		lsls	r0, r2, #2
 3136 033c 914A     		ldr	r2, .L307+12
 3137 033e B2F8F021 		ldrh	r2, [r2, #496]
 3138 0342 C2F58062 		rsb	r2, r2, #1024
 3139 0346 90FBF2F2 		sdiv	r2, r0, r2
 3140 034a 0A44     		add	r2, r2, r1
 3141 034c 8E49     		ldr	r1, .L307+16
 3142 034e 1B01     		lsls	r3, r3, #4
 3143 0350 0B44     		add	r3, r3, r1
 3144 0352 1A60     		str	r2, [r3]
1115:..\src/interruptions.c **** 
 3145              		.loc 1 1115 0
 3146 0354 23E0     		b	.L207
 3147              	.L204:
1119:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3148              		.loc 1 1119 0
 3149 0356 3B69     		ldr	r3, [r7, #16]
 3150 0358 002B     		cmp	r3, #0
 3151 035a 04DA     		bge	.L210
1120:..\src/interruptions.c ****                         break;
 3152              		.loc 1 1120 0
 3153 035c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3154 035e 864A     		ldr	r2, .L307
 3155 0360 0021     		movs	r1, #0
 3156 0362 D154     		strb	r1, [r2, r3]
1121:..\src/interruptions.c ****                     }
 3157              		.loc 1 1121 0
 3158 0364 1BE0     		b	.L207
 3159              	.L210:
1123:..\src/interruptions.c ****                     break;
 3160              		.loc 1 1123 0
 3161 0366 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3162 0368 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3163 036a 8449     		ldr	r1, .L307+4
 3164 036c 1201     		lsls	r2, r2, #4
 3165 036e 0A44     		add	r2, r2, r1
 3166 0370 1168     		ldr	r1, [r2]
 3167 0372 834A     		ldr	r2, .L307+8
 3168 0374 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3169 0378 1046     		mov	r0, r2
 3170 037a 3A69     		ldr	r2, [r7, #16]
 3171 037c 02FB00F2 		mul	r2, r2, r0
 3172 0380 9000     		lsls	r0, r2, #2
 3173 0382 804A     		ldr	r2, .L307+12
 3174 0384 B2F8F221 		ldrh	r2, [r2, #498]
 3175 0388 C2F58062 		rsb	r2, r2, #1024
 3176 038c 90FBF2F2 		sdiv	r2, r0, r2
 3177 0390 8A1A     		subs	r2, r1, r2
 3178 0392 7D49     		ldr	r1, .L307+16
 3179 0394 1B01     		lsls	r3, r3, #4
 3180 0396 0B44     		add	r3, r3, r1
 3181 0398 1A60     		str	r2, [r3]
1124:..\src/interruptions.c **** 
 3182              		.loc 1 1124 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 78


 3183 039a 00E0     		b	.L207
 3184              	.L298:
1106:..\src/interruptions.c **** 
 3185              		.loc 1 1106 0
 3186 039c 00BF     		nop
 3187              	.L207:
1128:..\src/interruptions.c ****             }
1129:..\src/interruptions.c ****             break;
 3188              		.loc 1 1129 0 discriminator 1
 3189 039e 86E0     		b	.L197
 3190              	.L191:
1130:..\src/interruptions.c **** 
1131:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
1132:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3191              		.loc 1 1132 0
 3192 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3193 03a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3194 03a4 7549     		ldr	r1, .L307+4
 3195 03a6 1201     		lsls	r2, r2, #4
 3196 03a8 0A44     		add	r2, r2, r1
 3197 03aa 1268     		ldr	r2, [r2]
 3198 03ac 7649     		ldr	r1, .L307+16
 3199 03ae 1B01     		lsls	r3, r3, #4
 3200 03b0 0B44     		add	r3, r3, r1
 3201 03b2 1A60     		str	r2, [r3]
1133:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3202              		.loc 1 1133 0
 3203 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3204 03b6 704A     		ldr	r2, .L307
 3205 03b8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3206 03ba 012B     		cmp	r3, #1
 3207 03bc 1CD0     		beq	.L212
 3208 03be 022B     		cmp	r3, #2
 3209 03c0 43D0     		beq	.L213
 3210 03c2 002B     		cmp	r3, #0
 3211 03c4 00D0     		beq	.L214
1134:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
1135:..\src/interruptions.c ****                 case 0:
1136:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1137:..\src/interruptions.c ****                         current_emg[idx] = 1;
1138:..\src/interruptions.c ****                         break;
1139:..\src/interruptions.c ****                     }
1140:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1141:..\src/interruptions.c ****                         current_emg[idx] = 2;
1142:..\src/interruptions.c ****                         break;
1143:..\src/interruptions.c ****                     }
1144:..\src/interruptions.c ****                     break;
1145:..\src/interruptions.c **** 
1146:..\src/interruptions.c ****                 // EMG 1 is first
1147:..\src/interruptions.c ****                 case 1:
1148:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1149:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1150:..\src/interruptions.c ****                         current_emg[idx] = 0;
1151:..\src/interruptions.c ****                         break;
1152:..\src/interruptions.c ****                     }
1153:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1154:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 79


1155:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
1156:..\src/interruptions.c ****                     
1157:..\src/interruptions.c ****                     break;
1158:..\src/interruptions.c **** 
1159:..\src/interruptions.c ****                 // EMG 2 is first
1160:..\src/interruptions.c ****                 case 2:
1161:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1162:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1163:..\src/interruptions.c ****                         current_emg[idx] = 0;
1164:..\src/interruptions.c ****                         break;
1165:..\src/interruptions.c ****                     }
1166:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1167:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
1168:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
1169:..\src/interruptions.c ****                     }
1170:..\src/interruptions.c ****                     break;
1171:..\src/interruptions.c **** 
1172:..\src/interruptions.c ****                 default:
1173:..\src/interruptions.c ****                     break;
 3212              		.loc 1 1173 0
 3213 03c6 6EE0     		b	.L216
 3214              	.L214:
1136:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3215              		.loc 1 1136 0
 3216 03c8 7B69     		ldr	r3, [r7, #20]
 3217 03ca 002B     		cmp	r3, #0
 3218 03cc 08DD     		ble	.L215
1136:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3219              		.loc 1 1136 0 is_stmt 0 discriminator 1
 3220 03ce 7A69     		ldr	r2, [r7, #20]
 3221 03d0 3B69     		ldr	r3, [r7, #16]
 3222 03d2 9A42     		cmp	r2, r3
 3223 03d4 04DD     		ble	.L215
1137:..\src/interruptions.c ****                         break;
 3224              		.loc 1 1137 0 is_stmt 1
 3225 03d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3226 03d8 674A     		ldr	r2, .L307
 3227 03da 0121     		movs	r1, #1
 3228 03dc D154     		strb	r1, [r2, r3]
1138:..\src/interruptions.c ****                     }
 3229              		.loc 1 1138 0
 3230 03de 62E0     		b	.L216
 3231              	.L215:
1140:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3232              		.loc 1 1140 0
 3233 03e0 3B69     		ldr	r3, [r7, #16]
 3234 03e2 002B     		cmp	r3, #0
 3235 03e4 5ADD     		ble	.L299
1140:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3236              		.loc 1 1140 0 is_stmt 0 discriminator 1
 3237 03e6 3A69     		ldr	r2, [r7, #16]
 3238 03e8 7B69     		ldr	r3, [r7, #20]
 3239 03ea 9A42     		cmp	r2, r3
 3240 03ec 56DD     		ble	.L299
1141:..\src/interruptions.c ****                         break;
 3241              		.loc 1 1141 0 is_stmt 1
 3242 03ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 80


 3243 03f0 614A     		ldr	r2, .L307
 3244 03f2 0221     		movs	r1, #2
 3245 03f4 D154     		strb	r1, [r2, r3]
1142:..\src/interruptions.c ****                     }
 3246              		.loc 1 1142 0
 3247 03f6 56E0     		b	.L216
 3248              	.L212:
1149:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3249              		.loc 1 1149 0
 3250 03f8 7B69     		ldr	r3, [r7, #20]
 3251 03fa 002B     		cmp	r3, #0
 3252 03fc 07DA     		bge	.L218
1149:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3253              		.loc 1 1149 0 is_stmt 0 discriminator 1
 3254 03fe 3B69     		ldr	r3, [r7, #16]
 3255 0400 002B     		cmp	r3, #0
 3256 0402 04DA     		bge	.L218
1150:..\src/interruptions.c ****                         break;
 3257              		.loc 1 1150 0 is_stmt 1
 3258 0404 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3259 0406 5C4A     		ldr	r2, .L307
 3260 0408 0021     		movs	r1, #0
 3261 040a D154     		strb	r1, [r2, r3]
1151:..\src/interruptions.c ****                     }
 3262              		.loc 1 1151 0
 3263 040c 4BE0     		b	.L216
 3264              	.L218:
1154:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
 3265              		.loc 1 1154 0
 3266 040e 7B69     		ldr	r3, [r7, #20]
 3267 0410 002B     		cmp	r3, #0
 3268 0412 45DD     		ble	.L300
1155:..\src/interruptions.c ****                     
 3269              		.loc 1 1155 0
 3270 0414 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3271 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3272 0418 5849     		ldr	r1, .L307+4
 3273 041a 1201     		lsls	r2, r2, #4
 3274 041c 0A44     		add	r2, r2, r1
 3275 041e 1168     		ldr	r1, [r2]
 3276 0420 574A     		ldr	r2, .L307+8
 3277 0422 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3278 0426 1046     		mov	r0, r2
 3279 0428 7A69     		ldr	r2, [r7, #20]
 3280 042a 02FB00F2 		mul	r2, r2, r0
 3281 042e 9000     		lsls	r0, r2, #2
 3282 0430 544A     		ldr	r2, .L307+12
 3283 0432 B2F8F021 		ldrh	r2, [r2, #496]
 3284 0436 C2F58062 		rsb	r2, r2, #1024
 3285 043a 90FBF2F2 		sdiv	r2, r0, r2
 3286 043e 0A44     		add	r2, r2, r1
 3287 0440 5149     		ldr	r1, .L307+16
 3288 0442 1B01     		lsls	r3, r3, #4
 3289 0444 0B44     		add	r3, r3, r1
 3290 0446 1A60     		str	r2, [r3]
1157:..\src/interruptions.c **** 
 3291              		.loc 1 1157 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 81


 3292 0448 2AE0     		b	.L300
 3293              	.L213:
1162:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3294              		.loc 1 1162 0
 3295 044a 7B69     		ldr	r3, [r7, #20]
 3296 044c 002B     		cmp	r3, #0
 3297 044e 07DA     		bge	.L220
1162:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3298              		.loc 1 1162 0 is_stmt 0 discriminator 1
 3299 0450 3B69     		ldr	r3, [r7, #16]
 3300 0452 002B     		cmp	r3, #0
 3301 0454 04DA     		bge	.L220
1163:..\src/interruptions.c ****                         break;
 3302              		.loc 1 1163 0 is_stmt 1
 3303 0456 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3304 0458 474A     		ldr	r2, .L307
 3305 045a 0021     		movs	r1, #0
 3306 045c D154     		strb	r1, [r2, r3]
1164:..\src/interruptions.c ****                     }
 3307              		.loc 1 1164 0
 3308 045e 22E0     		b	.L216
 3309              	.L220:
1167:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
 3310              		.loc 1 1167 0
 3311 0460 3B69     		ldr	r3, [r7, #16]
 3312 0462 002B     		cmp	r3, #0
 3313 0464 1EDD     		ble	.L301
1168:..\src/interruptions.c ****                     }
 3314              		.loc 1 1168 0
 3315 0466 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3316 0468 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3317 046a 4449     		ldr	r1, .L307+4
 3318 046c 1201     		lsls	r2, r2, #4
 3319 046e 0A44     		add	r2, r2, r1
 3320 0470 1168     		ldr	r1, [r2]
 3321 0472 444A     		ldr	r2, .L307+12
 3322 0474 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3323 0478 1046     		mov	r0, r2
 3324 047a 3A69     		ldr	r2, [r7, #16]
 3325 047c 02FB00F2 		mul	r2, r2, r0
 3326 0480 9000     		lsls	r0, r2, #2
 3327 0482 404A     		ldr	r2, .L307+12
 3328 0484 B2F8F221 		ldrh	r2, [r2, #498]
 3329 0488 C2F58062 		rsb	r2, r2, #1024
 3330 048c 90FBF2F2 		sdiv	r2, r0, r2
 3331 0490 8A1A     		subs	r2, r1, r2
 3332 0492 3D49     		ldr	r1, .L307+16
 3333 0494 1B01     		lsls	r3, r3, #4
 3334 0496 0B44     		add	r3, r3, r1
 3335 0498 1A60     		str	r2, [r3]
1170:..\src/interruptions.c **** 
 3336              		.loc 1 1170 0
 3337 049a 03E0     		b	.L301
 3338              	.L299:
1144:..\src/interruptions.c **** 
 3339              		.loc 1 1144 0
 3340 049c 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 82


 3341 049e 06E0     		b	.L197
 3342              	.L300:
1157:..\src/interruptions.c **** 
 3343              		.loc 1 1157 0
 3344 04a0 00BF     		nop
 3345 04a2 04E0     		b	.L197
 3346              	.L301:
1170:..\src/interruptions.c **** 
 3347              		.loc 1 1170 0
 3348 04a4 00BF     		nop
 3349              	.L216:
1174:..\src/interruptions.c ****             }
1175:..\src/interruptions.c ****             break;
 3350              		.loc 1 1175 0 discriminator 3
 3351 04a6 02E0     		b	.L197
 3352              	.L296:
1176:..\src/interruptions.c **** 
1177:..\src/interruptions.c ****         default:
1178:..\src/interruptions.c ****             break;
 3353              		.loc 1 1178 0
 3354 04a8 00BF     		nop
 3355 04aa 00E0     		b	.L197
 3356              	.L297:
1091:..\src/interruptions.c **** 
 3357              		.loc 1 1091 0
 3358 04ac 00BF     		nop
 3359              	.L197:
1179:..\src/interruptions.c ****     }
1180:..\src/interruptions.c **** 
1181:..\src/interruptions.c ****     // Position limit saturation
1182:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 3360              		.loc 1 1182 0
 3361 04ae FB6C     		ldr	r3, [r7, #76]
 3362 04b0 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 3363 04b4 002B     		cmp	r3, #0
 3364 04b6 1FD0     		beq	.L222
1183:..\src/interruptions.c ****         if (g_ref[idx].pos < MOT->pos_lim_inf) 
 3365              		.loc 1 1183 0
 3366 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3367 04ba 334A     		ldr	r2, .L307+16
 3368 04bc 1B01     		lsls	r3, r3, #4
 3369 04be 1344     		add	r3, r3, r2
 3370 04c0 1A68     		ldr	r2, [r3]
 3371 04c2 FB6C     		ldr	r3, [r7, #76]
 3372 04c4 5B6B     		ldr	r3, [r3, #52]
 3373 04c6 9A42     		cmp	r2, r3
 3374 04c8 06DA     		bge	.L223
1184:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_inf;
 3375              		.loc 1 1184 0
 3376 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3377 04cc FA6C     		ldr	r2, [r7, #76]
 3378 04ce 526B     		ldr	r2, [r2, #52]
 3379 04d0 2D49     		ldr	r1, .L307+16
 3380 04d2 1B01     		lsls	r3, r3, #4
 3381 04d4 0B44     		add	r3, r3, r1
 3382 04d6 1A60     		str	r2, [r3]
 3383              	.L223:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 83


1185:..\src/interruptions.c ****         if (g_ref[idx].pos > MOT->pos_lim_sup) 
 3384              		.loc 1 1185 0
 3385 04d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3386 04da 2B4A     		ldr	r2, .L307+16
 3387 04dc 1B01     		lsls	r3, r3, #4
 3388 04de 1344     		add	r3, r3, r2
 3389 04e0 1A68     		ldr	r2, [r3]
 3390 04e2 FB6C     		ldr	r3, [r7, #76]
 3391 04e4 9B6B     		ldr	r3, [r3, #56]
 3392 04e6 9A42     		cmp	r2, r3
 3393 04e8 06DD     		ble	.L222
1186:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_sup;
 3394              		.loc 1 1186 0
 3395 04ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3396 04ec FA6C     		ldr	r2, [r7, #76]
 3397 04ee 926B     		ldr	r2, [r2, #56]
 3398 04f0 2549     		ldr	r1, .L307+16
 3399 04f2 1B01     		lsls	r3, r3, #4
 3400 04f4 0B44     		add	r3, r3, r1
 3401 04f6 1A60     		str	r2, [r3]
 3402              	.L222:
1187:..\src/interruptions.c ****     }
1188:..\src/interruptions.c ****     
1189:..\src/interruptions.c ****     // SAFETY
1190:..\src/interruptions.c ****     if (battery_low_SoC == 1) {
 3403              		.loc 1 1190 0
 3404 04f8 244B     		ldr	r3, .L307+20
 3405 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3406 04fc 012B     		cmp	r3, #1
 3407 04fe 05D1     		bne	.L224
1191:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
1192:..\src/interruptions.c ****         g_ref[idx].pos = 0;
 3408              		.loc 1 1192 0
 3409 0500 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3410 0502 214A     		ldr	r2, .L307+16
 3411 0504 1B01     		lsls	r3, r3, #4
 3412 0506 1344     		add	r3, r3, r2
 3413 0508 0022     		movs	r2, #0
 3414 050a 1A60     		str	r2, [r3]
 3415              	.L224:
1193:..\src/interruptions.c ****     }        
1194:..\src/interruptions.c **** 
1195:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3416              		.loc 1 1195 0
 3417 050c FB6C     		ldr	r3, [r7, #76]
 3418 050e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3419 0512 032B     		cmp	r3, #3
 3420 0514 00F25282 		bhi	.L225
 3421 0518 01A2     		adr	r2, .L227
 3422 051a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3423 051e 00BF     		.p2align 2
 3424              	.L227:
 3425 0520 39070000 		.word	.L226+1
 3426 0524 75090000 		.word	.L228+1
 3427 0528 41080000 		.word	.L229+1
 3428 052c 31050000 		.word	.L230+1
 3429              		.p2align 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 84


 3430              	.L230:
1196:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1197:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1198:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3431              		.loc 1 1198 0
 3432 0530 154B     		ldr	r3, .L307+16
 3433 0532 1968     		ldr	r1, [r3]
 3434 0534 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 3435 0538 1548     		ldr	r0, .L307+24
 3436 053a 1346     		mov	r3, r2
 3437 053c 5B00     		lsls	r3, r3, #1
 3438 053e 1344     		add	r3, r3, r2
 3439 0540 1B01     		lsls	r3, r3, #4
 3440 0542 0344     		add	r3, r3, r0
 3441 0544 1B68     		ldr	r3, [r3]
 3442 0546 CB1A     		subs	r3, r1, r3
 3443 0548 BB65     		str	r3, [r7, #88]
1199:..\src/interruptions.c **** 
1200:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3444              		.loc 1 1200 0
 3445 054a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3446 054c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3447 054e 1149     		ldr	r1, .L307+28
 3448 0550 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3449 0554 BA6D     		ldr	r2, [r7, #88]
 3450 0556 0A44     		add	r2, r2, r1
 3451 0558 0E49     		ldr	r1, .L307+28
 3452 055a 41F82320 		str	r2, [r1, r3, lsl #2]
1201:..\src/interruptions.c **** 
1202:..\src/interruptions.c ****             // error_sum saturation
1203:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3453              		.loc 1 1203 0
 3454 055e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3455 0560 0C4A     		ldr	r2, .L307+28
 3456 0562 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3457 0566 0C4A     		ldr	r2, .L307+32
 3458 0568 9342     		cmp	r3, r2
 3459 056a 17DD     		ble	.L231
1204:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3460              		.loc 1 1204 0
 3461 056c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3462 056e 094A     		ldr	r2, .L307+28
 3463 0570 0949     		ldr	r1, .L307+32
 3464 0572 42F82310 		str	r1, [r2, r3, lsl #2]
 3465 0576 1DE0     		b	.L232
 3466              	.L308:
 3467              		.align	2
 3468              	.L307:
 3469 0578 AC000000 		.word	current_emg.10470
 3470 057c 00000000 		.word	g_refOld
 3471 0580 00000000 		.word	g_mem
 3472 0584 00000000 		.word	c_mem
 3473 0588 00000000 		.word	g_ref
 3474 058c 00000000 		.word	battery_low_SoC
 3475 0590 00000000 		.word	g_meas
 3476 0594 B0000000 		.word	pos_error_sum.10463
 3477 0598 80F0FA02 		.word	50000000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 85


 3478              	.L231:
1205:..\src/interruptions.c ****             else {
1206:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3479              		.loc 1 1206 0
 3480 059c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3481 059e 9D4A     		ldr	r2, .L309
 3482 05a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3483 05a4 9C4A     		ldr	r2, .L309+4
 3484 05a6 9342     		cmp	r3, r2
 3485 05a8 04DA     		bge	.L232
1207:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3486              		.loc 1 1207 0
 3487 05aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3488 05ac 994A     		ldr	r2, .L309
 3489 05ae 9A49     		ldr	r1, .L309+4
 3490 05b0 42F82310 		str	r1, [r2, r3, lsl #2]
 3491              	.L232:
1208:..\src/interruptions.c ****             }
1209:..\src/interruptions.c ****             
1210:..\src/interruptions.c ****             // ------ position PID control ------
1211:..\src/interruptions.c **** 
1212:..\src/interruptions.c ****             i_ref = 0;
 3492              		.loc 1 1212 0
 3493 05b4 0023     		movs	r3, #0
 3494 05b6 7B65     		str	r3, [r7, #84]
1213:..\src/interruptions.c ****             
1214:..\src/interruptions.c ****             // Proportional
1215:..\src/interruptions.c ****             if (k_p_dl != 0)
 3495              		.loc 1 1215 0
 3496 05b8 FB6A     		ldr	r3, [r7, #44]
 3497 05ba 002B     		cmp	r3, #0
 3498 05bc 07D0     		beq	.L233
1216:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3499              		.loc 1 1216 0
 3500 05be FB6A     		ldr	r3, [r7, #44]
 3501 05c0 BA6D     		ldr	r2, [r7, #88]
 3502 05c2 02FB03F3 		mul	r3, r2, r3
 3503 05c6 1B14     		asrs	r3, r3, #16
 3504 05c8 7A6D     		ldr	r2, [r7, #84]
 3505 05ca 1344     		add	r3, r3, r2
 3506 05cc 7B65     		str	r3, [r7, #84]
 3507              	.L233:
1217:..\src/interruptions.c **** 
1218:..\src/interruptions.c ****             // Integral
1219:..\src/interruptions.c ****             if (k_i_dl != 0)
 3508              		.loc 1 1219 0
 3509 05ce BB6A     		ldr	r3, [r7, #40]
 3510 05d0 002B     		cmp	r3, #0
 3511 05d2 0AD0     		beq	.L234
1220:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3512              		.loc 1 1220 0
 3513 05d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3514 05d6 8F4A     		ldr	r2, .L309
 3515 05d8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3516 05dc BA6A     		ldr	r2, [r7, #40]
 3517 05de 02FB03F3 		mul	r3, r2, r3
 3518 05e2 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 86


 3519 05e4 7A6D     		ldr	r2, [r7, #84]
 3520 05e6 1344     		add	r3, r3, r2
 3521 05e8 7B65     		str	r3, [r7, #84]
 3522              	.L234:
1221:..\src/interruptions.c **** 
1222:..\src/interruptions.c ****             // Derivative
1223:..\src/interruptions.c ****             if (k_d_dl != 0)
 3523              		.loc 1 1223 0
 3524 05ea 7B6A     		ldr	r3, [r7, #36]
 3525 05ec 002B     		cmp	r3, #0
 3526 05ee 0CD0     		beq	.L235
1224:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3527              		.loc 1 1224 0
 3528 05f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3529 05f2 8A4A     		ldr	r2, .L309+8
 3530 05f4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3531 05f8 BA6D     		ldr	r2, [r7, #88]
 3532 05fa D31A     		subs	r3, r2, r3
 3533 05fc 7A6A     		ldr	r2, [r7, #36]
 3534 05fe 02FB03F3 		mul	r3, r2, r3
 3535 0602 1B14     		asrs	r3, r3, #16
 3536 0604 7A6D     		ldr	r2, [r7, #84]
 3537 0606 1344     		add	r3, r3, r2
 3538 0608 7B65     		str	r3, [r7, #84]
 3539              	.L235:
1225:..\src/interruptions.c ****                         
1226:..\src/interruptions.c ****             // Update previous position
1227:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3540              		.loc 1 1227 0
 3541 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3542 060c 8349     		ldr	r1, .L309+8
 3543 060e BA6D     		ldr	r2, [r7, #88]
 3544 0610 41F82320 		str	r2, [r1, r3, lsl #2]
1228:..\src/interruptions.c **** 
1229:..\src/interruptions.c ****             // motor direction depends on i_ref
1230:..\src/interruptions.c ****             if (i_ref >= 0)
 3545              		.loc 1 1230 0
 3546 0614 7B6D     		ldr	r3, [r7, #84]
 3547 0616 002B     		cmp	r3, #0
 3548 0618 04DB     		blt	.L236
1231:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3549              		.loc 1 1231 0
 3550 061a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3551 061c 804A     		ldr	r2, .L309+12
 3552 061e 0121     		movs	r1, #1
 3553 0620 D154     		strb	r1, [r2, r3]
 3554 0622 03E0     		b	.L237
 3555              	.L236:
1232:..\src/interruptions.c ****             else
1233:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3556              		.loc 1 1233 0
 3557 0624 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3558 0626 7E4A     		ldr	r2, .L309+12
 3559 0628 0021     		movs	r1, #0
 3560 062a D154     		strb	r1, [r2, r3]
 3561              	.L237:
1234:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 87


1235:..\src/interruptions.c ****             // saturate max current
1236:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3562              		.loc 1 1236 0
 3563 062c FB6C     		ldr	r3, [r7, #76]
 3564 062e B3F95C30 		ldrsh	r3, [r3, #92]
 3565 0632 1A46     		mov	r2, r3
 3566 0634 7B6D     		ldr	r3, [r7, #84]
 3567 0636 9A42     		cmp	r2, r3
 3568 0638 04DA     		bge	.L238
1237:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3569              		.loc 1 1237 0
 3570 063a FB6C     		ldr	r3, [r7, #76]
 3571 063c B3F95C30 		ldrsh	r3, [r3, #92]
 3572 0640 7B65     		str	r3, [r7, #84]
 3573 0642 0BE0     		b	.L239
 3574              	.L238:
1238:..\src/interruptions.c ****             else {
1239:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3575              		.loc 1 1239 0
 3576 0644 FB6C     		ldr	r3, [r7, #76]
 3577 0646 B3F95C30 		ldrsh	r3, [r3, #92]
 3578 064a 5A42     		negs	r2, r3
 3579 064c 7B6D     		ldr	r3, [r7, #84]
 3580 064e 9A42     		cmp	r2, r3
 3581 0650 04DD     		ble	.L239
1240:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3582              		.loc 1 1240 0
 3583 0652 FB6C     		ldr	r3, [r7, #76]
 3584 0654 B3F95C30 		ldrsh	r3, [r3, #92]
 3585 0658 5B42     		negs	r3, r3
 3586 065a 7B65     		str	r3, [r7, #84]
 3587              	.L239:
1241:..\src/interruptions.c ****         	}
1242:..\src/interruptions.c **** 
1243:..\src/interruptions.c ****             // current error and curr error sum
1244:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3588              		.loc 1 1244 0
 3589 065c 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 3590 0660 7049     		ldr	r1, .L309+16
 3591 0662 1346     		mov	r3, r2
 3592 0664 5B00     		lsls	r3, r3, #1
 3593 0666 1344     		add	r3, r3, r2
 3594 0668 1B01     		lsls	r3, r3, #4
 3595 066a 0B44     		add	r3, r3, r1
 3596 066c 0C33     		adds	r3, r3, #12
 3597 066e 1B68     		ldr	r3, [r3]
 3598 0670 7A6D     		ldr	r2, [r7, #84]
 3599 0672 D31A     		subs	r3, r2, r3
 3600 0674 FB60     		str	r3, [r7, #12]
1245:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3601              		.loc 1 1245 0
 3602 0676 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3603 0678 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3604 067a 6B49     		ldr	r1, .L309+20
 3605 067c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3606 0680 FA68     		ldr	r2, [r7, #12]
 3607 0682 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 88


 3608 0684 6849     		ldr	r1, .L309+20
 3609 0686 41F82320 		str	r2, [r1, r3, lsl #2]
1246:..\src/interruptions.c ****             
1247:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3610              		.loc 1 1247 0
 3611 068a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3612 068c 664A     		ldr	r2, .L309+20
 3613 068e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3614 0692 664A     		ldr	r2, .L309+24
 3615 0694 9342     		cmp	r3, r2
 3616 0696 05DD     		ble	.L240
1248:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3617              		.loc 1 1248 0
 3618 0698 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3619 069a 634A     		ldr	r2, .L309+20
 3620 069c 6349     		ldr	r1, .L309+24
 3621 069e 42F82310 		str	r1, [r2, r3, lsl #2]
 3622 06a2 0BE0     		b	.L241
 3623              	.L240:
1249:..\src/interruptions.c ****             else {
1250:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3624              		.loc 1 1250 0
 3625 06a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3626 06a6 604A     		ldr	r2, .L309+20
 3627 06a8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3628 06ac 604A     		ldr	r2, .L309+28
 3629 06ae 9342     		cmp	r3, r2
 3630 06b0 04DA     		bge	.L241
1251:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3631              		.loc 1 1251 0
 3632 06b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3633 06b4 5C4A     		ldr	r2, .L309+20
 3634 06b6 5E49     		ldr	r1, .L309+28
 3635 06b8 42F82310 		str	r1, [r2, r3, lsl #2]
 3636              	.L241:
1252:..\src/interruptions.c ****             }
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****             // ----- current PID control -----
1255:..\src/interruptions.c **** 
1256:..\src/interruptions.c ****             pwm_input = 0;
 3637              		.loc 1 1256 0
 3638 06bc 0023     		movs	r3, #0
 3639 06be FB65     		str	r3, [r7, #92]
1257:..\src/interruptions.c **** 
1258:..\src/interruptions.c ****             // Proportional
1259:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3640              		.loc 1 1259 0
 3641 06c0 3B6A     		ldr	r3, [r7, #32]
 3642 06c2 002B     		cmp	r3, #0
 3643 06c4 07D0     		beq	.L242
1260:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3644              		.loc 1 1260 0
 3645 06c6 3B6A     		ldr	r3, [r7, #32]
 3646 06c8 FA68     		ldr	r2, [r7, #12]
 3647 06ca 02FB03F3 		mul	r3, r2, r3
 3648 06ce 1B14     		asrs	r3, r3, #16
 3649 06d0 FA6D     		ldr	r2, [r7, #92]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 89


 3650 06d2 1344     		add	r3, r3, r2
 3651 06d4 FB65     		str	r3, [r7, #92]
 3652              	.L242:
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****             // Integral
1263:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3653              		.loc 1 1263 0
 3654 06d6 FB69     		ldr	r3, [r7, #28]
 3655 06d8 002B     		cmp	r3, #0
 3656 06da 0AD0     		beq	.L243
1264:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3657              		.loc 1 1264 0
 3658 06dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3659 06de 524A     		ldr	r2, .L309+20
 3660 06e0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3661 06e4 FA69     		ldr	r2, [r7, #28]
 3662 06e6 02FB03F3 		mul	r3, r2, r3
 3663 06ea 1B14     		asrs	r3, r3, #16
 3664 06ec FA6D     		ldr	r2, [r7, #92]
 3665 06ee 1344     		add	r3, r3, r2
 3666 06f0 FB65     		str	r3, [r7, #92]
 3667              	.L243:
1265:..\src/interruptions.c **** 
1266:..\src/interruptions.c ****             // Derivative
1267:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3668              		.loc 1 1267 0
 3669 06f2 BB69     		ldr	r3, [r7, #24]
 3670 06f4 002B     		cmp	r3, #0
 3671 06f6 0CD0     		beq	.L244
1268:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3672              		.loc 1 1268 0
 3673 06f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3674 06fa 4E4A     		ldr	r2, .L309+32
 3675 06fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3676 0700 FA68     		ldr	r2, [r7, #12]
 3677 0702 D31A     		subs	r3, r2, r3
 3678 0704 BA69     		ldr	r2, [r7, #24]
 3679 0706 02FB03F3 		mul	r3, r2, r3
 3680 070a 1B14     		asrs	r3, r3, #16
 3681 070c FA6D     		ldr	r2, [r7, #92]
 3682 070e 1344     		add	r3, r3, r2
 3683 0710 FB65     		str	r3, [r7, #92]
 3684              	.L244:
1269:..\src/interruptions.c **** 
1270:..\src/interruptions.c ****             // pwm_input saturation
1271:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3685              		.loc 1 1271 0
 3686 0712 FB6D     		ldr	r3, [r7, #92]
 3687 0714 13F1640F 		cmn	r3, #100
 3688 0718 03DA     		bge	.L245
1272:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3689              		.loc 1 1272 0
 3690 071a 6FF06303 		mvn	r3, #99
 3691 071e FB65     		str	r3, [r7, #92]
 3692 0720 04E0     		b	.L246
 3693              	.L245:
1273:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 90


1274:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3694              		.loc 1 1274 0
 3695 0722 FB6D     		ldr	r3, [r7, #92]
 3696 0724 642B     		cmp	r3, #100
 3697 0726 01DD     		ble	.L246
1275:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3698              		.loc 1 1275 0
 3699 0728 6423     		movs	r3, #100
 3700 072a FB65     		str	r3, [r7, #92]
 3701              	.L246:
1276:..\src/interruptions.c ****             }
1277:..\src/interruptions.c **** 
1278:..\src/interruptions.c ****             // Update previous current
1279:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3702              		.loc 1 1279 0
 3703 072c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3704 072e 4149     		ldr	r1, .L309+32
 3705 0730 FA68     		ldr	r2, [r7, #12]
 3706 0732 41F82320 		str	r2, [r1, r3, lsl #2]
1280:..\src/interruptions.c **** 
1281:..\src/interruptions.c ****         break;
 3707              		.loc 1 1281 0
 3708 0736 41E1     		b	.L225
 3709              	.L226:
1282:..\src/interruptions.c **** 
1283:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1284:..\src/interruptions.c ****         case CONTROL_ANGLE:
1285:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 3710              		.loc 1 1285 0
 3711 0738 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3712 073a 3F4A     		ldr	r2, .L309+36
 3713 073c 1B01     		lsls	r3, r3, #4
 3714 073e 1344     		add	r3, r3, r2
 3715 0740 1968     		ldr	r1, [r3]
 3716 0742 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 3717 0746 3748     		ldr	r0, .L309+16
 3718 0748 1346     		mov	r3, r2
 3719 074a 5B00     		lsls	r3, r3, #1
 3720 074c 1344     		add	r3, r3, r2
 3721 074e 1B01     		lsls	r3, r3, #4
 3722 0750 0344     		add	r3, r3, r0
 3723 0752 1B68     		ldr	r3, [r3]
 3724 0754 CB1A     		subs	r3, r1, r3
 3725 0756 BB65     		str	r3, [r7, #88]
1286:..\src/interruptions.c **** 
1287:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3726              		.loc 1 1287 0
 3727 0758 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3728 075a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3729 075c 2D49     		ldr	r1, .L309
 3730 075e 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3731 0762 BA6D     		ldr	r2, [r7, #88]
 3732 0764 0A44     		add	r2, r2, r1
 3733 0766 2B49     		ldr	r1, .L309
 3734 0768 41F82320 		str	r2, [r1, r3, lsl #2]
1288:..\src/interruptions.c **** 
1289:..\src/interruptions.c ****             // anti-windup (for integral control)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 91


1290:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 3735              		.loc 1 1290 0
 3736 076c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3737 076e 294A     		ldr	r2, .L309
 3738 0770 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3739 0774 B3F57A7F 		cmp	r3, #1000
 3740 0778 06DD     		ble	.L247
1291:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 3741              		.loc 1 1291 0
 3742 077a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3743 077c 254A     		ldr	r2, .L309
 3744 077e 4FF47A71 		mov	r1, #1000
 3745 0782 42F82310 		str	r1, [r2, r3, lsl #2]
 3746 0786 0BE0     		b	.L248
 3747              	.L247:
1292:..\src/interruptions.c ****             else {
1293:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 3748              		.loc 1 1293 0
 3749 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3750 078a 224A     		ldr	r2, .L309
 3751 078c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3752 0790 13F57A7F 		cmn	r3, #1000
 3753 0794 04DA     		bge	.L248
1294:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 3754              		.loc 1 1294 0
 3755 0796 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3756 0798 1E4A     		ldr	r2, .L309
 3757 079a 2849     		ldr	r1, .L309+40
 3758 079c 42F82310 		str	r1, [r2, r3, lsl #2]
 3759              	.L248:
1295:..\src/interruptions.c ****             }
1296:..\src/interruptions.c **** 
1297:..\src/interruptions.c ****             // Proportional
1298:..\src/interruptions.c ****             if (k_p != 0) 
 3760              		.loc 1 1298 0
 3761 07a0 7B6C     		ldr	r3, [r7, #68]
 3762 07a2 002B     		cmp	r3, #0
 3763 07a4 05D0     		beq	.L249
1299:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3764              		.loc 1 1299 0
 3765 07a6 7B6C     		ldr	r3, [r7, #68]
 3766 07a8 BA6D     		ldr	r2, [r7, #88]
 3767 07aa 02FB03F3 		mul	r3, r2, r3
 3768 07ae 1B14     		asrs	r3, r3, #16
 3769 07b0 FB65     		str	r3, [r7, #92]
 3770              	.L249:
1300:..\src/interruptions.c ****             
1301:..\src/interruptions.c **** 
1302:..\src/interruptions.c ****             // Integral
1303:..\src/interruptions.c ****             if (k_i != 0) 
 3771              		.loc 1 1303 0
 3772 07b2 3B6C     		ldr	r3, [r7, #64]
 3773 07b4 002B     		cmp	r3, #0
 3774 07b6 0AD0     		beq	.L250
1304:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 3775              		.loc 1 1304 0
 3776 07b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 92


 3777 07ba 164A     		ldr	r2, .L309
 3778 07bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3779 07c0 3A6C     		ldr	r2, [r7, #64]
 3780 07c2 02FB03F3 		mul	r3, r2, r3
 3781 07c6 1B14     		asrs	r3, r3, #16
 3782 07c8 FA6D     		ldr	r2, [r7, #92]
 3783 07ca 1344     		add	r3, r3, r2
 3784 07cc FB65     		str	r3, [r7, #92]
 3785              	.L250:
1305:..\src/interruptions.c ****             
1306:..\src/interruptions.c **** 
1307:..\src/interruptions.c ****             // Derivative
1308:..\src/interruptions.c ****             if (k_d != 0) 
 3786              		.loc 1 1308 0
 3787 07ce FB6B     		ldr	r3, [r7, #60]
 3788 07d0 002B     		cmp	r3, #0
 3789 07d2 0CD0     		beq	.L251
1309:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 3790              		.loc 1 1309 0
 3791 07d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3792 07d6 114A     		ldr	r2, .L309+8
 3793 07d8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3794 07dc BA6D     		ldr	r2, [r7, #88]
 3795 07de D31A     		subs	r3, r2, r3
 3796 07e0 FA6B     		ldr	r2, [r7, #60]
 3797 07e2 02FB03F3 		mul	r3, r2, r3
 3798 07e6 1B14     		asrs	r3, r3, #16
 3799 07e8 FA6D     		ldr	r2, [r7, #92]
 3800 07ea 1344     		add	r3, r3, r2
 3801 07ec FB65     		str	r3, [r7, #92]
 3802              	.L251:
1310:..\src/interruptions.c ****             
1311:..\src/interruptions.c **** 
1312:..\src/interruptions.c ****             // Update measure
1313:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3803              		.loc 1 1313 0
 3804 07ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3805 07f0 0A49     		ldr	r1, .L309+8
 3806 07f2 BA6D     		ldr	r2, [r7, #88]
 3807 07f4 41F82320 		str	r2, [r1, r3, lsl #2]
1314:..\src/interruptions.c **** 
1315:..\src/interruptions.c ****             if (pwm_input > 0)
 3808              		.loc 1 1315 0
 3809 07f8 FB6D     		ldr	r3, [r7, #92]
 3810 07fa 002B     		cmp	r3, #0
 3811 07fc 04DD     		ble	.L252
1316:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3812              		.loc 1 1316 0
 3813 07fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3814 0800 074A     		ldr	r2, .L309+12
 3815 0802 0121     		movs	r1, #1
 3816 0804 D154     		strb	r1, [r2, r3]
1317:..\src/interruptions.c ****             else
1318:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1319:..\src/interruptions.c **** 
1320:..\src/interruptions.c ****         break;
 3817              		.loc 1 1320 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 93


 3818 0806 D9E0     		b	.L225
 3819              	.L252:
1318:..\src/interruptions.c **** 
 3820              		.loc 1 1318 0
 3821 0808 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3822 080a 054A     		ldr	r2, .L309+12
 3823 080c 0021     		movs	r1, #0
 3824 080e D154     		strb	r1, [r2, r3]
 3825              		.loc 1 1320 0
 3826 0810 D4E0     		b	.L225
 3827              	.L310:
 3828 0812 00BF     		.align	2
 3829              	.L309:
 3830 0814 B0000000 		.word	pos_error_sum.10463
 3831 0818 800F05FD 		.word	-50000000
 3832 081c B8000000 		.word	prev_pos_err.10465
 3833 0820 C0000000 		.word	motor_dir.10468
 3834 0824 00000000 		.word	g_meas
 3835 0828 C4000000 		.word	curr_error_sum.10464
 3836 082c A0860100 		.word	100000
 3837 0830 6079FEFF 		.word	-100000
 3838 0834 CC000000 		.word	prev_curr_err.10466
 3839 0838 00000000 		.word	g_ref
 3840 083c 18FCFFFF 		.word	-1000
 3841              	.L229:
1321:..\src/interruptions.c **** 
1322:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1323:..\src/interruptions.c ****         case CONTROL_CURRENT:
1324:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 3842              		.loc 1 1324 0
 3843 0840 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3844 0842 984A     		ldr	r2, .L311
 3845 0844 1B01     		lsls	r3, r3, #4
 3846 0846 1344     		add	r3, r3, r2
 3847 0848 0C33     		adds	r3, r3, #12
 3848 084a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3849 084c 002B     		cmp	r3, #0
 3850 084e 00F0B280 		beq	.L302
 3851              		.loc 1 1324 0 is_stmt 0 discriminator 1
 3852 0852 954B     		ldr	r3, .L311+4
 3853 0854 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3854 0856 002B     		cmp	r3, #0
 3855 0858 00F0AD80 		beq	.L302
1325:..\src/interruptions.c ****                 
1326:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 3856              		.loc 1 1326 0 is_stmt 1
 3857 085c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3858 085e 914A     		ldr	r2, .L311
 3859 0860 1B01     		lsls	r3, r3, #4
 3860 0862 1344     		add	r3, r3, r2
 3861 0864 0433     		adds	r3, r3, #4
 3862 0866 1B68     		ldr	r3, [r3]
 3863 0868 7B65     		str	r3, [r7, #84]
1327:..\src/interruptions.c **** 
1328:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 3864              		.loc 1 1328 0
 3865 086a FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 94


 3866 086c B3F95C30 		ldrsh	r3, [r3, #92]
 3867 0870 1A46     		mov	r2, r3
 3868 0872 7B6D     		ldr	r3, [r7, #84]
 3869 0874 9A42     		cmp	r2, r3
 3870 0876 04DA     		bge	.L255
1329:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 3871              		.loc 1 1329 0
 3872 0878 FB6C     		ldr	r3, [r7, #76]
 3873 087a B3F95C30 		ldrsh	r3, [r3, #92]
 3874 087e 7B65     		str	r3, [r7, #84]
 3875 0880 0BE0     		b	.L256
 3876              	.L255:
1330:..\src/interruptions.c ****                 else {
1331:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 3877              		.loc 1 1331 0
 3878 0882 FB6C     		ldr	r3, [r7, #76]
 3879 0884 B3F95C30 		ldrsh	r3, [r3, #92]
 3880 0888 5A42     		negs	r2, r3
 3881 088a 7B6D     		ldr	r3, [r7, #84]
 3882 088c 9A42     		cmp	r2, r3
 3883 088e 04DD     		ble	.L256
1332:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 3884              		.loc 1 1332 0
 3885 0890 FB6C     		ldr	r3, [r7, #76]
 3886 0892 B3F95C30 		ldrsh	r3, [r3, #92]
 3887 0896 5B42     		negs	r3, r3
 3888 0898 7B65     		str	r3, [r7, #84]
 3889              	.L256:
1333:..\src/interruptions.c ****                 }
1334:..\src/interruptions.c ****                 
1335:..\src/interruptions.c ****                 // current error
1336:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 3890              		.loc 1 1336 0
 3891 089a 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 3892 089e 8349     		ldr	r1, .L311+8
 3893 08a0 1346     		mov	r3, r2
 3894 08a2 5B00     		lsls	r3, r3, #1
 3895 08a4 1344     		add	r3, r3, r2
 3896 08a6 1B01     		lsls	r3, r3, #4
 3897 08a8 0B44     		add	r3, r3, r1
 3898 08aa 0C33     		adds	r3, r3, #12
 3899 08ac 1B68     		ldr	r3, [r3]
 3900 08ae 7A6D     		ldr	r2, [r7, #84]
 3901 08b0 D31A     		subs	r3, r2, r3
 3902 08b2 FB60     		str	r3, [r7, #12]
1337:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 3903              		.loc 1 1337 0
 3904 08b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3905 08b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3906 08b8 7D49     		ldr	r1, .L311+12
 3907 08ba 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3908 08be FA68     		ldr	r2, [r7, #12]
 3909 08c0 0A44     		add	r2, r2, r1
 3910 08c2 7B49     		ldr	r1, .L311+12
 3911 08c4 41F82320 		str	r2, [r1, r3, lsl #2]
1338:..\src/interruptions.c ****                 
1339:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 95


 3912              		.loc 1 1339 0
 3913 08c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3914 08ca 794A     		ldr	r2, .L311+12
 3915 08cc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3916 08d0 784A     		ldr	r2, .L311+16
 3917 08d2 9342     		cmp	r3, r2
 3918 08d4 05DD     		ble	.L257
1340:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3919              		.loc 1 1340 0
 3920 08d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3921 08d8 754A     		ldr	r2, .L311+12
 3922 08da 7649     		ldr	r1, .L311+16
 3923 08dc 42F82310 		str	r1, [r2, r3, lsl #2]
 3924 08e0 0BE0     		b	.L258
 3925              	.L257:
1341:..\src/interruptions.c ****                 else {
1342:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 3926              		.loc 1 1342 0
 3927 08e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3928 08e4 724A     		ldr	r2, .L311+12
 3929 08e6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3930 08ea 734A     		ldr	r2, .L311+20
 3931 08ec 9342     		cmp	r3, r2
 3932 08ee 04DA     		bge	.L258
1343:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3933              		.loc 1 1343 0
 3934 08f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3935 08f2 6F4A     		ldr	r2, .L311+12
 3936 08f4 7049     		ldr	r1, .L311+20
 3937 08f6 42F82310 		str	r1, [r2, r3, lsl #2]
 3938              	.L258:
1344:..\src/interruptions.c ****                 }
1345:..\src/interruptions.c **** 
1346:..\src/interruptions.c ****                 pwm_input = 0;
 3939              		.loc 1 1346 0
 3940 08fa 0023     		movs	r3, #0
 3941 08fc FB65     		str	r3, [r7, #92]
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****                 // Proportional
1349:..\src/interruptions.c ****                 if (k_p_c != 0)
 3942              		.loc 1 1349 0
 3943 08fe BB6B     		ldr	r3, [r7, #56]
 3944 0900 002B     		cmp	r3, #0
 3945 0902 07D0     		beq	.L259
1350:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3946              		.loc 1 1350 0
 3947 0904 BB6B     		ldr	r3, [r7, #56]
 3948 0906 FA68     		ldr	r2, [r7, #12]
 3949 0908 02FB03F3 		mul	r3, r2, r3
 3950 090c 1B14     		asrs	r3, r3, #16
 3951 090e FA6D     		ldr	r2, [r7, #92]
 3952 0910 1344     		add	r3, r3, r2
 3953 0912 FB65     		str	r3, [r7, #92]
 3954              	.L259:
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****                 // Integral
1353:..\src/interruptions.c ****                 if (k_i_c != 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 96


 3955              		.loc 1 1353 0
 3956 0914 7B6B     		ldr	r3, [r7, #52]
 3957 0916 002B     		cmp	r3, #0
 3958 0918 0AD0     		beq	.L260
1354:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 3959              		.loc 1 1354 0
 3960 091a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3961 091c 644A     		ldr	r2, .L311+12
 3962 091e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3963 0922 7A6B     		ldr	r2, [r7, #52]
 3964 0924 02FB03F3 		mul	r3, r2, r3
 3965 0928 1B14     		asrs	r3, r3, #16
 3966 092a FA6D     		ldr	r2, [r7, #92]
 3967 092c 1344     		add	r3, r3, r2
 3968 092e FB65     		str	r3, [r7, #92]
 3969              	.L260:
1355:..\src/interruptions.c **** 
1356:..\src/interruptions.c ****                 // Derivative
1357:..\src/interruptions.c ****                 if (k_d_c != 0)
 3970              		.loc 1 1357 0
 3971 0930 3B6B     		ldr	r3, [r7, #48]
 3972 0932 002B     		cmp	r3, #0
 3973 0934 0CD0     		beq	.L261
1358:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 3974              		.loc 1 1358 0
 3975 0936 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3976 0938 604A     		ldr	r2, .L311+24
 3977 093a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3978 093e FA68     		ldr	r2, [r7, #12]
 3979 0940 D31A     		subs	r3, r2, r3
 3980 0942 3A6B     		ldr	r2, [r7, #48]
 3981 0944 02FB03F3 		mul	r3, r2, r3
 3982 0948 1B14     		asrs	r3, r3, #16
 3983 094a FA6D     		ldr	r2, [r7, #92]
 3984 094c 1344     		add	r3, r3, r2
 3985 094e FB65     		str	r3, [r7, #92]
 3986              	.L261:
1359:..\src/interruptions.c ****                 
1360:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 3987              		.loc 1 1360 0
 3988 0950 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3989 0952 5A49     		ldr	r1, .L311+24
 3990 0954 FA68     		ldr	r2, [r7, #12]
 3991 0956 41F82320 		str	r2, [r1, r3, lsl #2]
1361:..\src/interruptions.c ****                 
1362:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3992              		.loc 1 1362 0
 3993 095a FB6D     		ldr	r3, [r7, #92]
 3994 095c 002B     		cmp	r3, #0
 3995 095e 04DB     		blt	.L262
1363:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 3996              		.loc 1 1363 0
 3997 0960 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3998 0962 574A     		ldr	r2, .L311+28
 3999 0964 0121     		movs	r1, #1
 4000 0966 D154     		strb	r1, [r2, r3]
1364:..\src/interruptions.c ****                 else
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 97


1365:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1366:..\src/interruptions.c ****             }
1367:..\src/interruptions.c ****         break;
 4001              		.loc 1 1367 0
 4002 0968 25E0     		b	.L302
 4003              	.L262:
1365:..\src/interruptions.c ****             }
 4004              		.loc 1 1365 0
 4005 096a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4006 096c 544A     		ldr	r2, .L311+28
 4007 096e 0021     		movs	r1, #0
 4008 0970 D154     		strb	r1, [r2, r3]
 4009              		.loc 1 1367 0
 4010 0972 20E0     		b	.L302
 4011              	.L228:
1368:..\src/interruptions.c ****         
1369:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1370:..\src/interruptions.c ****         case CONTROL_PWM:
1371:..\src/interruptions.c **** 
1372:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4012              		.loc 1 1372 0
 4013 0974 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4014 0976 4B4A     		ldr	r2, .L311
 4015 0978 1B01     		lsls	r3, r3, #4
 4016 097a 1344     		add	r3, r3, r2
 4017 097c 0833     		adds	r3, r3, #8
 4018 097e 1B68     		ldr	r3, [r3]
 4019 0980 FB65     		str	r3, [r7, #92]
1373:..\src/interruptions.c **** 
1374:..\src/interruptions.c ****             if (pwm_input > 0) 
 4020              		.loc 1 1374 0
 4021 0982 FB6D     		ldr	r3, [r7, #92]
 4022 0984 002B     		cmp	r3, #0
 4023 0986 04DD     		ble	.L263
1375:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4024              		.loc 1 1375 0
 4025 0988 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4026 098a 4D4A     		ldr	r2, .L311+28
 4027 098c 0121     		movs	r1, #1
 4028 098e D154     		strb	r1, [r2, r3]
 4029 0990 03E0     		b	.L264
 4030              	.L263:
1376:..\src/interruptions.c ****             else 
1377:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4031              		.loc 1 1377 0
 4032 0992 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4033 0994 4A4A     		ldr	r2, .L311+28
 4034 0996 0021     		movs	r1, #0
 4035 0998 D154     		strb	r1, [r2, r3]
 4036              	.L264:
1378:..\src/interruptions.c ****             
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             // pwm_input saturation
1381:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4037              		.loc 1 1381 0
 4038 099a FB6D     		ldr	r3, [r7, #92]
 4039 099c 13F1640F 		cmn	r3, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 98


 4040 09a0 03DA     		bge	.L265
1382:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4041              		.loc 1 1382 0
 4042 09a2 6FF06303 		mvn	r3, #99
 4043 09a6 FB65     		str	r3, [r7, #92]
1383:..\src/interruptions.c ****             else {
1384:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1385:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1386:..\src/interruptions.c ****         	}
1387:..\src/interruptions.c **** 
1388:..\src/interruptions.c ****         break;
 4044              		.loc 1 1388 0
 4045 09a8 07E0     		b	.L303
 4046              	.L265:
1384:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4047              		.loc 1 1384 0
 4048 09aa FB6D     		ldr	r3, [r7, #92]
 4049 09ac 642B     		cmp	r3, #100
 4050 09ae 04DD     		ble	.L303
1385:..\src/interruptions.c ****         	}
 4051              		.loc 1 1385 0
 4052 09b0 6423     		movs	r3, #100
 4053 09b2 FB65     		str	r3, [r7, #92]
 4054              		.loc 1 1388 0
 4055 09b4 01E0     		b	.L303
 4056              	.L302:
1367:..\src/interruptions.c ****         
 4057              		.loc 1 1367 0
 4058 09b6 00BF     		nop
 4059 09b8 00E0     		b	.L225
 4060              	.L303:
 4061              		.loc 1 1388 0
 4062 09ba 00BF     		nop
 4063              	.L225:
1389:..\src/interruptions.c ****             
1390:..\src/interruptions.c ****     }
1391:..\src/interruptions.c **** 
1392:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1393:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1394:..\src/interruptions.c **** 
1395:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4064              		.loc 1 1395 0
 4065 09bc FB6D     		ldr	r3, [r7, #92]
 4066 09be 642B     		cmp	r3, #100
 4067 09c0 01DD     		ble	.L267
1396:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4068              		.loc 1 1396 0
 4069 09c2 6423     		movs	r3, #100
 4070 09c4 FB65     		str	r3, [r7, #92]
 4071              	.L267:
1397:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4072              		.loc 1 1397 0
 4073 09c6 FB6D     		ldr	r3, [r7, #92]
 4074 09c8 13F1640F 		cmn	r3, #100
 4075 09cc 02DA     		bge	.L268
1398:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4076              		.loc 1 1398 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 99


 4077 09ce 6FF06303 		mvn	r3, #99
 4078 09d2 FB65     		str	r3, [r7, #92]
 4079              	.L268:
1399:..\src/interruptions.c **** 
1400:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4080              		.loc 1 1400 0
 4081 09d4 FB6C     		ldr	r3, [r7, #76]
 4082 09d6 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4083 09da 012B     		cmp	r3, #1
 4084 09dc 0DD0     		beq	.L269
1401:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4085              		.loc 1 1401 0
 4086 09de FB6D     		ldr	r3, [r7, #92]
 4087 09e0 9B02     		lsls	r3, r3, #10
 4088 09e2 384A     		ldr	r2, .L311+32
 4089 09e4 82FB0312 		smull	r1, r2, r2, r3
 4090 09e8 5211     		asrs	r2, r2, #5
 4091 09ea DB17     		asrs	r3, r3, #31
 4092 09ec D31A     		subs	r3, r2, r3
 4093 09ee 364A     		ldr	r2, .L311+36
 4094 09f0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4095 09f2 02FB03F3 		mul	r3, r2, r3
 4096 09f6 9B12     		asrs	r3, r3, #10
 4097 09f8 FB65     		str	r3, [r7, #92]
 4098              	.L269:
1402:..\src/interruptions.c ****  
1403:..\src/interruptions.c ****     //// RATE LIMITER ////
1404:..\src/interruptions.c ****     if(SIGN(pwm_input-prev_pwm[idx]) == SIGN(pos_error))
 4099              		.loc 1 1404 0
 4100 09fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4101 09fc 334A     		ldr	r2, .L311+40
 4102 09fe 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4103 0a02 FA6D     		ldr	r2, [r7, #92]
 4104 0a04 D31A     		subs	r3, r2, r3
 4105 0a06 002B     		cmp	r3, #0
 4106 0a08 01DB     		blt	.L270
 4107              		.loc 1 1404 0 is_stmt 0 discriminator 1
 4108 0a0a 0122     		movs	r2, #1
 4109 0a0c 01E0     		b	.L271
 4110              	.L270:
 4111              		.loc 1 1404 0 discriminator 2
 4112 0a0e 4FF0FF32 		mov	r2, #-1
 4113              	.L271:
 4114              		.loc 1 1404 0 discriminator 4
 4115 0a12 BB6D     		ldr	r3, [r7, #88]
 4116 0a14 002B     		cmp	r3, #0
 4117 0a16 01DB     		blt	.L272
 4118              		.loc 1 1404 0 discriminator 5
 4119 0a18 0123     		movs	r3, #1
 4120 0a1a 01E0     		b	.L273
 4121              	.L272:
 4122              		.loc 1 1404 0 discriminator 6
 4123 0a1c 4FF0FF33 		mov	r3, #-1
 4124              	.L273:
 4125              		.loc 1 1404 0 discriminator 8
 4126 0a20 9A42     		cmp	r2, r3
 4127 0a22 28D1     		bne	.L274
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 100


1405:..\src/interruptions.c ****     {
1406:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter)
 4128              		.loc 1 1406 0 is_stmt 1
 4129 0a24 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4130 0a26 294A     		ldr	r2, .L311+40
 4131 0a28 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4132 0a2c FA6D     		ldr	r2, [r7, #92]
 4133 0a2e D31A     		subs	r3, r2, r3
 4134 0a30 FA6C     		ldr	r2, [r7, #76]
 4135 0a32 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4136 0a36 9342     		cmp	r3, r2
 4137 0a38 08DD     		ble	.L275
1407:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4138              		.loc 1 1407 0
 4139 0a3a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4140 0a3c 234A     		ldr	r2, .L311+40
 4141 0a3e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4142 0a42 FA6C     		ldr	r2, [r7, #76]
 4143 0a44 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4144 0a48 1344     		add	r3, r3, r2
 4145 0a4a FB65     		str	r3, [r7, #92]
 4146              	.L275:
1408:..\src/interruptions.c ****     
1409:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4147              		.loc 1 1409 0
 4148 0a4c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4149 0a4e 1F4A     		ldr	r2, .L311+40
 4150 0a50 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4151 0a54 FA6D     		ldr	r2, [r7, #92]
 4152 0a56 D21A     		subs	r2, r2, r3
 4153 0a58 FB6C     		ldr	r3, [r7, #76]
 4154 0a5a 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4155 0a5e 5B42     		negs	r3, r3
 4156 0a60 9A42     		cmp	r2, r3
 4157 0a62 08DA     		bge	.L274
1410:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4158              		.loc 1 1410 0
 4159 0a64 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4160 0a66 194A     		ldr	r2, .L311+40
 4161 0a68 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4162 0a6c FA6C     		ldr	r2, [r7, #76]
 4163 0a6e 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4164 0a72 9B1A     		subs	r3, r3, r2
 4165 0a74 FB65     		str	r3, [r7, #92]
 4166              	.L274:
1411:..\src/interruptions.c ****     }
1412:..\src/interruptions.c ****     
1413:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4167              		.loc 1 1413 0
 4168 0a76 FB6D     		ldr	r3, [r7, #92]
 4169 0a78 642B     		cmp	r3, #100
 4170 0a7a 01DD     		ble	.L276
1414:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4171              		.loc 1 1414 0
 4172 0a7c 6423     		movs	r3, #100
 4173 0a7e FB65     		str	r3, [r7, #92]
 4174              	.L276:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 101


1415:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4175              		.loc 1 1415 0
 4176 0a80 FB6D     		ldr	r3, [r7, #92]
 4177 0a82 13F1640F 		cmn	r3, #100
 4178 0a86 02DA     		bge	.L277
1416:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4179              		.loc 1 1416 0
 4180 0a88 6FF06303 		mvn	r3, #99
 4181 0a8c FB65     		str	r3, [r7, #92]
 4182              	.L277:
1417:..\src/interruptions.c ****     
1418:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4183              		.loc 1 1418 0
 4184 0a8e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4185 0a90 0E49     		ldr	r1, .L311+40
 4186 0a92 FA6D     		ldr	r2, [r7, #92]
 4187 0a94 41F82320 		str	r2, [r1, r3, lsl #2]
1419:..\src/interruptions.c **** 	
1420:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4188              		.loc 1 1420 0
 4189 0a98 FB6D     		ldr	r3, [r7, #92]
 4190 0a9a 002B     		cmp	r3, #0
 4191 0a9c 18DB     		blt	.L278
 4192              		.loc 1 1420 0 is_stmt 0 discriminator 1
 4193 0a9e 0122     		movs	r2, #1
 4194 0aa0 18E0     		b	.L279
 4195              	.L312:
 4196 0aa2 00BF     		.align	2
 4197              	.L311:
 4198 0aa4 00000000 		.word	g_ref
 4199 0aa8 00000000 		.word	tension_valid
 4200 0aac 00000000 		.word	g_meas
 4201 0ab0 C4000000 		.word	curr_error_sum.10464
 4202 0ab4 A0860100 		.word	100000
 4203 0ab8 6079FEFF 		.word	-100000
 4204 0abc CC000000 		.word	prev_curr_err.10466
 4205 0ac0 C0000000 		.word	motor_dir.10468
 4206 0ac4 1F85EB51 		.word	1374389535
 4207 0ac8 00000000 		.word	dev_pwm_limit
 4208 0acc D4000000 		.word	prev_pwm.10467
 4209              	.L278:
 4210              		.loc 1 1420 0 discriminator 2
 4211 0ad0 4FF0FF32 		mov	r2, #-1
 4212              	.L279:
 4213              		.loc 1 1420 0 discriminator 4
 4214 0ad4 764B     		ldr	r3, .L313
 4215 0ad6 1A70     		strb	r2, [r3]
1421:..\src/interruptions.c ****     
1422:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4216              		.loc 1 1422 0 is_stmt 1 discriminator 4
 4217 0ad8 FB6C     		ldr	r3, [r7, #76]
 4218 0ada 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4219 0ade 012B     		cmp	r3, #1
 4220 0ae0 40F08F80 		bne	.L280
1423:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1424:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4221              		.loc 1 1424 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 102


 4222 0ae4 FB6C     		ldr	r3, [r7, #76]
 4223 0ae6 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4224 0aea 012B     		cmp	r3, #1
 4225 0aec 00F08480 		beq	.L281
 4226              		.loc 1 1424 0 is_stmt 0 discriminator 1
 4227 0af0 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4228 0af4 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4229 0af6 6F48     		ldr	r0, .L313+4
 4230 0af8 1346     		mov	r3, r2
 4231 0afa 5B00     		lsls	r3, r3, #1
 4232 0afc 1344     		add	r3, r3, r2
 4233 0afe 9B00     		lsls	r3, r3, #2
 4234 0b00 0B44     		add	r3, r3, r1
 4235 0b02 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4236 0b06 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4237 0b0a F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4238 0b0c 6A4C     		ldr	r4, .L313+8
 4239 0b0e 1346     		mov	r3, r2
 4240 0b10 5B00     		lsls	r3, r3, #1
 4241 0b12 1344     		add	r3, r3, r2
 4242 0b14 9B00     		lsls	r3, r3, #2
 4243 0b16 0344     		add	r3, r3, r0
 4244 0b18 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4245 0b1c CB1A     		subs	r3, r1, r3
 4246 0b1e 312B     		cmp	r3, #49
 4247 0b20 6ADC     		bgt	.L281
1425:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4248              		.loc 1 1425 0 is_stmt 1 discriminator 2
 4249 0b22 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4250 0b26 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4251 0b28 6248     		ldr	r0, .L313+4
 4252 0b2a 1346     		mov	r3, r2
 4253 0b2c 5B00     		lsls	r3, r3, #1
 4254 0b2e 1344     		add	r3, r3, r2
 4255 0b30 9B00     		lsls	r3, r3, #2
 4256 0b32 0B44     		add	r3, r3, r1
 4257 0b34 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4258 0b38 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4259 0b3c F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4260 0b3e 5E4C     		ldr	r4, .L313+8
 4261 0b40 1346     		mov	r3, r2
 4262 0b42 5B00     		lsls	r3, r3, #1
 4263 0b44 1344     		add	r3, r3, r2
 4264 0b46 9B00     		lsls	r3, r3, #2
 4265 0b48 0344     		add	r3, r3, r0
 4266 0b4a 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4267 0b4e CB1A     		subs	r3, r1, r3
1424:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4268              		.loc 1 1424 0 discriminator 2
 4269 0b50 13F1310F 		cmn	r3, #49
 4270 0b54 50DB     		blt	.L281
1426:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4271              		.loc 1 1426 0
 4272 0b56 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4273 0b58 584A     		ldr	r2, .L313+12
 4274 0b5a 1B01     		lsls	r3, r3, #4
 4275 0b5c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 103


 4276 0b5e 1A68     		ldr	r2, [r3]
 4277 0b60 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4278 0b62 5749     		ldr	r1, .L313+16
 4279 0b64 1B01     		lsls	r3, r3, #4
 4280 0b66 0B44     		add	r3, r3, r1
 4281 0b68 1B68     		ldr	r3, [r3]
 4282 0b6a D31A     		subs	r3, r2, r3
1425:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4283              		.loc 1 1425 0
 4284 0b6c 632B     		cmp	r3, #99
 4285 0b6e 43DC     		bgt	.L281
 4286              		.loc 1 1426 0
 4287 0b70 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4288 0b72 524A     		ldr	r2, .L313+12
 4289 0b74 1B01     		lsls	r3, r3, #4
 4290 0b76 1344     		add	r3, r3, r2
 4291 0b78 1A68     		ldr	r2, [r3]
 4292 0b7a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4293 0b7c 5049     		ldr	r1, .L313+16
 4294 0b7e 1B01     		lsls	r3, r3, #4
 4295 0b80 0B44     		add	r3, r3, r1
 4296 0b82 1B68     		ldr	r3, [r3]
 4297 0b84 D31A     		subs	r3, r2, r3
 4298 0b86 13F1630F 		cmn	r3, #99
 4299 0b8a 35DB     		blt	.L281
1427:..\src/interruptions.c ****             position_counter[idx]++;
 4300              		.loc 1 1427 0
 4301 0b8c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4302 0b8e 4D4A     		ldr	r2, .L313+20
 4303 0b90 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4304 0b94 0132     		adds	r2, r2, #1
 4305 0b96 4B49     		ldr	r1, .L313+20
 4306 0b98 41F82320 		str	r2, [r1, r3, lsl #2]
1428:..\src/interruptions.c ****             
1429:..\src/interruptions.c ****             if (position_counter[idx] > 250) { 
 4307              		.loc 1 1429 0
 4308 0b9c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4309 0b9e 494A     		ldr	r2, .L313+20
 4310 0ba0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4311 0ba4 FA2B     		cmp	r3, #250
 4312 0ba6 2CD9     		bls	.L280
1430:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4313              		.loc 1 1430 0
 4314 0ba8 FB6C     		ldr	r3, [r7, #76]
 4315 0baa 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4316 0bae 002B     		cmp	r3, #0
 4317 0bb0 11D1     		bne	.L283
 4318              		.loc 1 1430 0 is_stmt 0 discriminator 1
 4319 0bb2 454B     		ldr	r3, .L313+24
 4320 0bb4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4321 0bb6 002B     		cmp	r3, #0
 4322 0bb8 0DD1     		bne	.L283
1431:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4323              		.loc 1 1431 0 is_stmt 1
 4324 0bba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4325 0bbc 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4326 0bc0 3D48     		ldr	r0, .L313+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 104


 4327 0bc2 1346     		mov	r3, r2
 4328 0bc4 5B00     		lsls	r3, r3, #1
 4329 0bc6 1344     		add	r3, r3, r2
 4330 0bc8 1B01     		lsls	r3, r3, #4
 4331 0bca 0344     		add	r3, r3, r0
 4332 0bcc 1A68     		ldr	r2, [r3]
 4333 0bce 3F48     		ldr	r0, .L313+28
 4334 0bd0 0B01     		lsls	r3, r1, #4
 4335 0bd2 0344     		add	r3, r3, r0
 4336 0bd4 1A60     		str	r2, [r3]
 4337              	.L283:
1432:..\src/interruptions.c ****                 }
1433:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4338              		.loc 1 1433 0
 4339 0bd6 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4340 0bd8 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 4341 0bdc 3648     		ldr	r0, .L313+8
 4342 0bde 1346     		mov	r3, r2
 4343 0be0 5B00     		lsls	r3, r3, #1
 4344 0be2 1344     		add	r3, r3, r2
 4345 0be4 1B01     		lsls	r3, r3, #4
 4346 0be6 0344     		add	r3, r3, r0
 4347 0be8 1A68     		ldr	r2, [r3]
 4348 0bea 3548     		ldr	r0, .L313+16
 4349 0bec 0B01     		lsls	r3, r1, #4
 4350 0bee 0344     		add	r3, r3, r0
 4351 0bf0 1A60     		str	r2, [r3]
1434:..\src/interruptions.c ****                 pwm_input = 0;            
 4352              		.loc 1 1434 0
 4353 0bf2 0023     		movs	r3, #0
 4354 0bf4 FB65     		str	r3, [r7, #92]
1429:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4355              		.loc 1 1429 0
 4356 0bf6 04E0     		b	.L280
 4357              	.L281:
1435:..\src/interruptions.c ****             }
1436:..\src/interruptions.c ****         }
1437:..\src/interruptions.c ****         else {
1438:..\src/interruptions.c ****             position_counter[idx] = 0;
 4358              		.loc 1 1438 0
 4359 0bf8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4360 0bfa 324A     		ldr	r2, .L313+20
 4361 0bfc 0021     		movs	r1, #0
 4362 0bfe 42F82310 		str	r1, [r2, r3, lsl #2]
 4363              	.L280:
1439:..\src/interruptions.c ****         }
1440:..\src/interruptions.c ****     }
1441:..\src/interruptions.c ****     
1442:..\src/interruptions.c ****     // Set motor direction and write pwm value
1443:..\src/interruptions.c ****     switch (idx) {
 4364              		.loc 1 1443 0
 4365 0c02 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4366 0c04 002B     		cmp	r3, #0
 4367 0c06 02D0     		beq	.L285
 4368 0c08 012B     		cmp	r3, #1
 4369 0c0a 26D0     		beq	.L286
1444:..\src/interruptions.c ****         case 0:         // Motor 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 105


1445:..\src/interruptions.c ****             if (motor_dir[idx])
1446:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1447:..\src/interruptions.c ****             else
1448:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1449:..\src/interruptions.c ****             
1450:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1451:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1452:..\src/interruptions.c ****             }
1453:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1454:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1455:..\src/interruptions.c ****             }
1456:..\src/interruptions.c ****             
1457:..\src/interruptions.c ****             break;
1458:..\src/interruptions.c ****         case 1:         // Motor 2
1459:..\src/interruptions.c ****             
1460:..\src/interruptions.c ****             if (motor_dir[idx])
1461:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1462:..\src/interruptions.c ****             else
1463:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1464:..\src/interruptions.c ****             
1465:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1466:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1467:..\src/interruptions.c ****             }
1468:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1469:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1470:..\src/interruptions.c ****             }
1471:..\src/interruptions.c ****             
1472:..\src/interruptions.c ****             break;
1473:..\src/interruptions.c ****         default:
1474:..\src/interruptions.c ****             break;
 4370              		.loc 1 1474 0
 4371 0c0c 4BE0     		b	.L291
 4372              	.L285:
1445:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4373              		.loc 1 1445 0
 4374 0c0e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4375 0c10 2F4A     		ldr	r2, .L313+32
 4376 0c12 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4377 0c14 002B     		cmp	r3, #0
 4378 0c16 03D0     		beq	.L287
1446:..\src/interruptions.c ****             else
 4379              		.loc 1 1446 0
 4380 0c18 0120     		movs	r0, #1
 4381 0c1a FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4382 0c1e 02E0     		b	.L288
 4383              	.L287:
1448:..\src/interruptions.c ****             
 4384              		.loc 1 1448 0
 4385 0c20 0020     		movs	r0, #0
 4386 0c22 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4387              	.L288:
1450:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4388              		.loc 1 1450 0
 4389 0c26 FB6C     		ldr	r3, [r7, #76]
 4390 0c28 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4391 0c2c 012B     		cmp	r3, #1
 4392 0c2e 0BD1     		bne	.L289
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 106


1451:..\src/interruptions.c ****             }
 4393              		.loc 1 1451 0
 4394 0c30 FB6D     		ldr	r3, [r7, #92]
 4395 0c32 002B     		cmp	r3, #0
 4396 0c34 B8BF     		it	lt
 4397 0c36 5B42     		rsblt	r3, r3, #0
 4398 0c38 DBB2     		uxtb	r3, r3
 4399 0c3a C3F16403 		rsb	r3, r3, #100
 4400 0c3e DBB2     		uxtb	r3, r3
 4401 0c40 1846     		mov	r0, r3
 4402 0c42 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1457:..\src/interruptions.c ****         case 1:         // Motor 2
 4403              		.loc 1 1457 0
 4404 0c46 2EE0     		b	.L291
 4405              	.L289:
1454:..\src/interruptions.c ****             }
 4406              		.loc 1 1454 0
 4407 0c48 FB6D     		ldr	r3, [r7, #92]
 4408 0c4a 002B     		cmp	r3, #0
 4409 0c4c B8BF     		it	lt
 4410 0c4e 5B42     		rsblt	r3, r3, #0
 4411 0c50 DBB2     		uxtb	r3, r3
 4412 0c52 1846     		mov	r0, r3
 4413 0c54 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1457:..\src/interruptions.c ****         case 1:         // Motor 2
 4414              		.loc 1 1457 0
 4415 0c58 25E0     		b	.L291
 4416              	.L286:
1460:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4417              		.loc 1 1460 0
 4418 0c5a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4419 0c5c 1C4A     		ldr	r2, .L313+32
 4420 0c5e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4421 0c60 002B     		cmp	r3, #0
 4422 0c62 03D0     		beq	.L292
1461:..\src/interruptions.c ****             else
 4423              		.loc 1 1461 0
 4424 0c64 0120     		movs	r0, #1
 4425 0c66 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4426 0c6a 02E0     		b	.L293
 4427              	.L292:
1463:..\src/interruptions.c ****             
 4428              		.loc 1 1463 0
 4429 0c6c 0020     		movs	r0, #0
 4430 0c6e FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4431              	.L293:
1465:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4432              		.loc 1 1465 0
 4433 0c72 FB6C     		ldr	r3, [r7, #76]
 4434 0c74 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4435 0c78 012B     		cmp	r3, #1
 4436 0c7a 0BD1     		bne	.L294
1466:..\src/interruptions.c ****             }
 4437              		.loc 1 1466 0
 4438 0c7c FB6D     		ldr	r3, [r7, #92]
 4439 0c7e 002B     		cmp	r3, #0
 4440 0c80 B8BF     		it	lt
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 107


 4441 0c82 5B42     		rsblt	r3, r3, #0
 4442 0c84 DBB2     		uxtb	r3, r3
 4443 0c86 C3F16403 		rsb	r3, r3, #100
 4444 0c8a DBB2     		uxtb	r3, r3
 4445 0c8c 1846     		mov	r0, r3
 4446 0c8e FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1472:..\src/interruptions.c ****         default:
 4447              		.loc 1 1472 0
 4448 0c92 07E0     		b	.L304
 4449              	.L294:
1469:..\src/interruptions.c ****             }
 4450              		.loc 1 1469 0
 4451 0c94 FB6D     		ldr	r3, [r7, #92]
 4452 0c96 002B     		cmp	r3, #0
 4453 0c98 B8BF     		it	lt
 4454 0c9a 5B42     		rsblt	r3, r3, #0
 4455 0c9c DBB2     		uxtb	r3, r3
 4456 0c9e 1846     		mov	r0, r3
 4457 0ca0 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4458              	.L304:
1472:..\src/interruptions.c ****         default:
 4459              		.loc 1 1472 0
 4460 0ca4 00BF     		nop
 4461              	.L291:
1475:..\src/interruptions.c ****     }
1476:..\src/interruptions.c ****     
1477:..\src/interruptions.c **** }
 4462              		.loc 1 1477 0
 4463 0ca6 00BF     		nop
 4464 0ca8 6437     		adds	r7, r7, #100
 4465              		.cfi_def_cfa_offset 12
 4466 0caa BD46     		mov	sp, r7
 4467              		.cfi_def_cfa_register 13
 4468              		@ sp needed
 4469 0cac 90BD     		pop	{r4, r7, pc}
 4470              	.L314:
 4471 0cae 00BF     		.align	2
 4472              	.L313:
 4473 0cb0 00000000 		.word	pwm_sign
 4474 0cb4 00000000 		.word	g_measOld
 4475 0cb8 00000000 		.word	g_meas
 4476 0cbc 00000000 		.word	g_refOld
 4477 0cc0 00000000 		.word	g_ref
 4478 0cc4 DC000000 		.word	position_counter.10469
 4479 0cc8 00000000 		.word	change_ext_ref_flag
 4480 0ccc 00000000 		.word	g_refNew
 4481 0cd0 C0000000 		.word	motor_dir.10468
 4482              		.cfi_endproc
 4483              	.LFE69:
 4484              		.size	motor_control_generic, .-motor_control_generic
 4485              		.global	__aeabi_fcmpeq
 4486              		.global	__aeabi_fmul
 4487              		.global	__aeabi_f2iz
 4488              		.global	__aeabi_fcmplt
 4489              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4490              		.align	2
 4491              		.global	encoder_reading_SPI
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 108


 4492              		.thumb
 4493              		.thumb_func
 4494              		.type	encoder_reading_SPI, %function
 4495              	encoder_reading_SPI:
 4496              	.LFB70:
1478:..\src/interruptions.c **** 
1479:..\src/interruptions.c **** //==============================================================================
1480:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1481:..\src/interruptions.c **** //==============================================================================
1482:..\src/interruptions.c **** 
1483:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4497              		.loc 1 1483 0
 4498              		.cfi_startproc
 4499              		@ args = 0, pretend = 0, frame = 48
 4500              		@ frame_needed = 1, uses_anonymous_args = 0
 4501 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4502              		.cfi_def_cfa_offset 20
 4503              		.cfi_offset 4, -20
 4504              		.cfi_offset 5, -16
 4505              		.cfi_offset 6, -12
 4506              		.cfi_offset 7, -8
 4507              		.cfi_offset 14, -4
 4508 0002 8FB0     		sub	sp, sp, #60
 4509              		.cfi_def_cfa_offset 80
 4510 0004 02AF     		add	r7, sp, #8
 4511              		.cfi_def_cfa 7, 72
 4512 0006 0346     		mov	r3, r0
 4513 0008 0A46     		mov	r2, r1
 4514 000a FB71     		strb	r3, [r7, #7]
 4515 000c 1346     		mov	r3, r2
 4516 000e BB71     		strb	r3, [r7, #6]
1484:..\src/interruptions.c **** 
1485:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4517              		.loc 1 1485 0
 4518 0010 0023     		movs	r3, #0
 4519 0012 87F82F30 		strb	r3, [r7, #47]
1486:..\src/interruptions.c ****     
1487:..\src/interruptions.c ****     // Encoder Variables  
1488:..\src/interruptions.c ****     uint8 jj;
1489:..\src/interruptions.c ****      
1490:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1491:..\src/interruptions.c ****     int16 tmp_value_encoder;
1492:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1493:..\src/interruptions.c ****     int32 value_encoder;
1494:..\src/interruptions.c ****     int32 speed_encoder;
1495:..\src/interruptions.c ****     int32 value_diff;
1496:..\src/interruptions.c **** 	int8 init_rot = 0;
 4520              		.loc 1 1496 0
 4521 0016 0023     		movs	r3, #0
 4522 0018 87F82730 		strb	r3, [r7, #39]
1497:..\src/interruptions.c **** 
1498:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1499:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1500:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1501:..\src/interruptions.c ****     
1502:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1503:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 109


1504:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1505:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1506:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1507:..\src/interruptions.c **** 
1508:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1509:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1510:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1511:..\src/interruptions.c **** //    
1512:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4523              		.loc 1 1512 0
 4524 001c 904B     		ldr	r3, .L351
 4525 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4526 0020 002B     		cmp	r3, #0
 4527 0022 18D0     		beq	.L316
1513:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4528              		.loc 1 1513 0
 4529 0024 0323     		movs	r3, #3
 4530 0026 87F82E30 		strb	r3, [r7, #46]
 4531 002a 0AE0     		b	.L317
 4532              	.L318:
1514:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4533              		.loc 1 1514 0
 4534 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4535 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4536 0032 8C48     		ldr	r0, .L351+4
 4537 0034 1346     		mov	r3, r2
 4538 0036 5B00     		lsls	r3, r3, #1
 4539 0038 1344     		add	r3, r3, r2
 4540 003a 0B44     		add	r3, r3, r1
 4541 003c 0022     		movs	r2, #0
 4542 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4543              	.L317:
1513:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4544              		.loc 1 1513 0 discriminator 1
 4545 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4546 0046 5A1E     		subs	r2, r3, #1
 4547 0048 87F82E20 		strb	r2, [r7, #46]
 4548 004c 002B     		cmp	r3, #0
 4549 004e EDD1     		bne	.L318
1515:..\src/interruptions.c ****         
1516:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4550              		.loc 1 1516 0
 4551 0050 834B     		ldr	r3, .L351
 4552 0052 0022     		movs	r2, #0
 4553 0054 1A70     		strb	r2, [r3]
 4554              	.L316:
1517:..\src/interruptions.c ****     }
1518:..\src/interruptions.c **** 
1519:..\src/interruptions.c ****     //======================================================     reading sensors
1520:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4555              		.loc 1 1520 0
 4556 0056 0023     		movs	r3, #0
 4557 0058 87F82F30 		strb	r3, [r7, #47]
 4558 005c 0DE0     		b	.L319
 4559              	.L320:
1521:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4560              		.loc 1 1521 0 discriminator 3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 110


 4561 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4562 0062 9B00     		lsls	r3, r3, #2
 4563 0064 07F13002 		add	r2, r7, #48
 4564 0068 1344     		add	r3, r3, r2
 4565 006a 0022     		movs	r2, #0
 4566 006c 43F8282C 		str	r2, [r3, #-40]
1520:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4567              		.loc 1 1520 0 discriminator 3
 4568 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4569 0074 0133     		adds	r3, r3, #1
 4570 0076 87F82F30 		strb	r3, [r7, #47]
 4571              	.L319:
1520:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4572              		.loc 1 1520 0 is_stmt 0 discriminator 1
 4573 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4574 007e 022B     		cmp	r3, #2
 4575 0080 EDD9     		bls	.L320
1522:..\src/interruptions.c ****     }   
1523:..\src/interruptions.c ****     
1524:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4576              		.loc 1 1524 0 is_stmt 1
 4577 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4578 0084 784A     		ldr	r2, .L351+8
 4579 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4580 0088 1A46     		mov	r2, r3
 4581 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4582 008c 1946     		mov	r1, r3
 4583 008e 1046     		mov	r0, r2
 4584 0090 FFF7FEFF 		bl	ReadEncoderLine
 4585              	.LBB3:
1525:..\src/interruptions.c ****                                                                         //CS1 for left hand
1526:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4586              		.loc 1 1526 0
 4587 0094 0023     		movs	r3, #0
 4588 0096 3B62     		str	r3, [r7, #32]
 4589 0098 2EE0     		b	.L321
 4590              	.L323:
1527:..\src/interruptions.c ****         
1528:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1529:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4591              		.loc 1 1529 0
 4592 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4593 009c 7349     		ldr	r1, .L351+12
 4594 009e 1346     		mov	r3, r2
 4595 00a0 5B00     		lsls	r3, r3, #1
 4596 00a2 1344     		add	r3, r3, r2
 4597 00a4 1B01     		lsls	r3, r3, #4
 4598 00a6 CA18     		adds	r2, r1, r3
 4599 00a8 3B6A     		ldr	r3, [r7, #32]
 4600 00aa 1344     		add	r3, r3, r2
 4601 00ac 03F2B113 		addw	r3, r3, #433
 4602 00b0 1B78     		ldrb	r3, [r3]
 4603 00b2 87F82F30 		strb	r3, [r7, #47]
1530:..\src/interruptions.c ****         
1531:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4604              		.loc 1 1531 0
 4605 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 111


 4606 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4607 00bc 6C48     		ldr	r0, .L351+16
 4608 00be 1346     		mov	r3, r2
 4609 00c0 9B00     		lsls	r3, r3, #2
 4610 00c2 1344     		add	r3, r3, r2
 4611 00c4 0344     		add	r3, r3, r0
 4612 00c6 0B44     		add	r3, r3, r1
 4613 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4614 00ca 0F2B     		cmp	r3, #15
 4615 00cc 11D9     		bls	.L322
1532:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4616              		.loc 1 1532 0
 4617 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4618 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4619 00d4 6748     		ldr	r0, .L351+20
 4620 00d6 1346     		mov	r3, r2
 4621 00d8 9B00     		lsls	r3, r3, #2
 4622 00da 1344     		add	r3, r3, r2
 4623 00dc 0B44     		add	r3, r3, r1
 4624 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4625 00e2 1A46     		mov	r2, r3
 4626 00e4 3B6A     		ldr	r3, [r7, #32]
 4627 00e6 9B00     		lsls	r3, r3, #2
 4628 00e8 07F13001 		add	r1, r7, #48
 4629 00ec 0B44     		add	r3, r3, r1
 4630 00ee 43F8282C 		str	r2, [r3, #-40]
 4631              	.L322:
1526:..\src/interruptions.c ****         
 4632              		.loc 1 1526 0 discriminator 2
 4633 00f2 3B6A     		ldr	r3, [r7, #32]
 4634 00f4 0133     		adds	r3, r3, #1
 4635 00f6 3B62     		str	r3, [r7, #32]
 4636              	.L321:
1526:..\src/interruptions.c ****         
 4637              		.loc 1 1526 0 is_stmt 0 discriminator 1
 4638 00f8 3B6A     		ldr	r3, [r7, #32]
 4639 00fa 022B     		cmp	r3, #2
 4640 00fc CDDD     		ble	.L323
 4641              	.LBE3:
1533:..\src/interruptions.c ****         }
1534:..\src/interruptions.c ****     }
1535:..\src/interruptions.c ****     
1536:..\src/interruptions.c ****     // S = SIGN BIT
1537:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1538:..\src/interruptions.c ****     // 0 = 0 BIT
1539:..\src/interruptions.c ****     // C = CONTROL BIT
1540:..\src/interruptions.c ****     
1541:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4642              		.loc 1 1541 0 is_stmt 1
 4643 00fe 0023     		movs	r3, #0
 4644 0100 87F82F30 		strb	r3, [r7, #47]
 4645 0104 3DE3     		b	.L324
 4646              	.L344:
1542:..\src/interruptions.c ****         
1543:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4647              		.loc 1 1543 0
 4648 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 112


 4649 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4650 010e 9B00     		lsls	r3, r3, #2
 4651 0110 07F13001 		add	r1, r7, #48
 4652 0114 0B44     		add	r3, r3, r1
 4653 0116 53F8283C 		ldr	r3, [r3, #-40]
 4654 011a 5749     		ldr	r1, .L351+24
 4655 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1544:..\src/interruptions.c ****         
1545:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4656              		.loc 1 1545 0
 4657 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4658 0124 9B00     		lsls	r3, r3, #2
 4659 0126 07F13002 		add	r2, r7, #48
 4660 012a 1344     		add	r3, r3, r2
 4661 012c 53F8283C 		ldr	r3, [r3, #-40]
 4662 0130 99B2     		uxth	r1, r3
 4663 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4664 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4665 0138 504C     		ldr	r4, .L351+28
 4666 013a 1346     		mov	r3, r2
 4667 013c 5B00     		lsls	r3, r3, #1
 4668 013e 1344     		add	r3, r3, r2
 4669 0140 9B00     		lsls	r3, r3, #2
 4670 0142 0344     		add	r3, r3, r0
 4671 0144 6633     		adds	r3, r3, #102
 4672 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4673 014a 9BB2     		uxth	r3, r3
 4674 014c CB1A     		subs	r3, r1, r3
 4675 014e 9BB2     		uxth	r3, r3
 4676 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1546:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4677              		.loc 1 1546 0
 4678 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4679 0156 002B     		cmp	r3, #0
 4680 0158 04DA     		bge	.L325
1547:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4681              		.loc 1 1547 0
 4682 015a BB8D     		ldrh	r3, [r7, #44]
 4683 015c 03F58053 		add	r3, r3, #4096
 4684 0160 9BB2     		uxth	r3, r3
 4685 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4686              	.L325:
1548:..\src/interruptions.c ****         }       // Range [0, 4096]
1549:..\src/interruptions.c **** 
1550:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4687              		.loc 1 1550 0
 4688 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4689 0168 B3F5006F 		cmp	r3, #2048
 4690 016c 04DB     		blt	.L326
1551:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4691              		.loc 1 1551 0
 4692 016e BB8D     		ldrh	r3, [r7, #44]
 4693 0170 A3F58053 		sub	r3, r3, #4096
 4694 0174 9BB2     		uxth	r3, r3
 4695 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4696              	.L326:
1552:..\src/interruptions.c ****         }       // Range [-2048, 2047]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 113


1553:..\src/interruptions.c **** 
1554:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4697              		.loc 1 1554 0
 4698 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4699 017c 1B01     		lsls	r3, r3, #4
 4700 017e FB61     		str	r3, [r7, #28]
1555:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4701              		.loc 1 1555 0
 4702 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4703 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4704 0186 3E48     		ldr	r0, .L351+32
 4705 0188 1346     		mov	r3, r2
 4706 018a 5B00     		lsls	r3, r3, #1
 4707 018c 1344     		add	r3, r3, r2
 4708 018e 0B44     		add	r3, r3, r1
 4709 0190 FA69     		ldr	r2, [r7, #28]
 4710 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1556:..\src/interruptions.c **** 
1557:..\src/interruptions.c ****         // Initialize last_value_encoder
1558:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4711              		.loc 1 1558 0
 4712 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4713 0198 3A4A     		ldr	r2, .L351+36
 4714 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4715 019c 002B     		cmp	r3, #0
 4716 019e 12D0     		beq	.L327
1559:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4717              		.loc 1 1559 0
 4718 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4719 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4720 01a6 2F48     		ldr	r0, .L351+4
 4721 01a8 1346     		mov	r3, r2
 4722 01aa 5B00     		lsls	r3, r3, #1
 4723 01ac 1344     		add	r3, r3, r2
 4724 01ae 0B44     		add	r3, r3, r1
 4725 01b0 FA69     		ldr	r2, [r7, #28]
 4726 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1560:..\src/interruptions.c ****             if (index == 2)
 4727              		.loc 1 1560 0
 4728 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4729 01ba 022B     		cmp	r3, #2
 4730 01bc 03D1     		bne	.L327
1561:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 4731              		.loc 1 1561 0
 4732 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4733 01c0 304A     		ldr	r2, .L351+36
 4734 01c2 0021     		movs	r1, #0
 4735 01c4 D154     		strb	r1, [r2, r3]
 4736              	.L327:
1562:..\src/interruptions.c ****         }
1563:..\src/interruptions.c **** 
1564:..\src/interruptions.c ****         // Take care of rotations
1565:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 4737              		.loc 1 1565 0
 4738 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4739 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4740 01cc 2548     		ldr	r0, .L351+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 114


 4741 01ce 1346     		mov	r3, r2
 4742 01d0 5B00     		lsls	r3, r3, #1
 4743 01d2 1344     		add	r3, r3, r2
 4744 01d4 0B44     		add	r3, r3, r1
 4745 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4746 01da FA69     		ldr	r2, [r7, #28]
 4747 01dc D31A     		subs	r3, r2, r3
 4748 01de BB61     		str	r3, [r7, #24]
1566:..\src/interruptions.c **** 
1567:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1568:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1569:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1570:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1571:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1572:..\src/interruptions.c ****         //                                               |           |
1573:..\src/interruptions.c ****         //                                           24575           -24576
1574:..\src/interruptions.c ****         //                                               |___________|
1575:..\src/interruptions.c ****         //                                                   49152
1576:..\src/interruptions.c **** 
1577:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1578:..\src/interruptions.c ****         // and update the variable only if the difference between
1579:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1580:..\src/interruptions.c **** 
1581:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1582:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1583:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1584:..\src/interruptions.c **** 
1585:..\src/interruptions.c ****         if (value_diff > 49152)
 4749              		.loc 1 1585 0
 4750 01e0 BB69     		ldr	r3, [r7, #24]
 4751 01e2 B3F5404F 		cmp	r3, #49152
 4752 01e6 1BDD     		ble	.L328
1586:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 4753              		.loc 1 1586 0
 4754 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4755 01ea 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4756 01ee 2648     		ldr	r0, .L351+40
 4757 01f0 1346     		mov	r3, r2
 4758 01f2 5B00     		lsls	r3, r3, #1
 4759 01f4 1344     		add	r3, r3, r2
 4760 01f6 1B01     		lsls	r3, r3, #4
 4761 01f8 0344     		add	r3, r3, r0
 4762 01fa 0B44     		add	r3, r3, r1
 4763 01fc 1433     		adds	r3, r3, #20
 4764 01fe 93F90030 		ldrsb	r3, [r3]
 4765 0202 DBB2     		uxtb	r3, r3
 4766 0204 013B     		subs	r3, r3, #1
 4767 0206 DBB2     		uxtb	r3, r3
 4768 0208 5CB2     		sxtb	r4, r3
 4769 020a 1F48     		ldr	r0, .L351+40
 4770 020c 1346     		mov	r3, r2
 4771 020e 5B00     		lsls	r3, r3, #1
 4772 0210 1344     		add	r3, r3, r2
 4773 0212 1B01     		lsls	r3, r3, #4
 4774 0214 0344     		add	r3, r3, r0
 4775 0216 0B44     		add	r3, r3, r1
 4776 0218 1433     		adds	r3, r3, #20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 115


 4777 021a 2246     		mov	r2, r4
 4778 021c 1A70     		strb	r2, [r3]
 4779 021e 5DE0     		b	.L329
 4780              	.L328:
1587:..\src/interruptions.c ****         else{ 
1588:..\src/interruptions.c ****             if (value_diff < -49152)
 4781              		.loc 1 1588 0
 4782 0220 BB69     		ldr	r3, [r7, #24]
 4783 0222 13F5404F 		cmn	r3, #49152
 4784 0226 31DA     		bge	.L330
1589:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 4785              		.loc 1 1589 0
 4786 0228 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4787 022a 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4788 022e 1648     		ldr	r0, .L351+40
 4789 0230 1346     		mov	r3, r2
 4790 0232 5B00     		lsls	r3, r3, #1
 4791 0234 1344     		add	r3, r3, r2
 4792 0236 1B01     		lsls	r3, r3, #4
 4793 0238 0344     		add	r3, r3, r0
 4794 023a 0B44     		add	r3, r3, r1
 4795 023c 1433     		adds	r3, r3, #20
 4796 023e 93F90030 		ldrsb	r3, [r3]
 4797 0242 DBB2     		uxtb	r3, r3
 4798 0244 0133     		adds	r3, r3, #1
 4799 0246 DBB2     		uxtb	r3, r3
 4800 0248 5CB2     		sxtb	r4, r3
 4801 024a 0F48     		ldr	r0, .L351+40
 4802 024c 1346     		mov	r3, r2
 4803 024e 5B00     		lsls	r3, r3, #1
 4804 0250 1344     		add	r3, r3, r2
 4805 0252 1B01     		lsls	r3, r3, #4
 4806 0254 0344     		add	r3, r3, r0
 4807 0256 0B44     		add	r3, r3, r1
 4808 0258 1433     		adds	r3, r3, #20
 4809 025a 2246     		mov	r2, r4
 4810 025c 1A70     		strb	r2, [r3]
 4811 025e 3DE0     		b	.L329
 4812              	.L352:
 4813              		.align	2
 4814              	.L351:
 4815 0260 00000000 		.word	reset_last_value_flag
 4816 0264 E4000000 		.word	last_value_encoder.10510
 4817 0268 00000000 		.word	N_Encoder_Line_Connected
 4818 026c 00000000 		.word	c_mem
 4819 0270 00000000 		.word	Encoder_Check
 4820 0274 00000000 		.word	Encoder_Value
 4821 0278 00000000 		.word	data_encoder_raw
 4822 027c 00000000 		.word	g_mem
 4823 0280 FC000000 		.word	comp_value_encoder.10511
 4824 0284 04000000 		.word	only_first_time.10513
 4825 0288 00000000 		.word	g_meas
 4826              	.L330:
1590:..\src/interruptions.c ****             else{
1591:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measure are too far
 4827              		.loc 1 1591 0
 4828 028c BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 116


 4829 028e 002B     		cmp	r3, #0
 4830 0290 B8BF     		it	lt
 4831 0292 5B42     		rsblt	r3, r3, #0
 4832 0294 B3F5804F 		cmp	r3, #16384
 4833 0298 20DD     		ble	.L329
1592:..\src/interruptions.c ****                     error[n_line][index]++;
 4834              		.loc 1 1592 0
 4835 029a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4836 029c 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4837 02a0 9A48     		ldr	r0, .L353
 4838 02a2 1346     		mov	r3, r2
 4839 02a4 5B00     		lsls	r3, r3, #1
 4840 02a6 1344     		add	r3, r3, r2
 4841 02a8 0344     		add	r3, r3, r0
 4842 02aa 0B44     		add	r3, r3, r1
 4843 02ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4844 02ae 0133     		adds	r3, r3, #1
 4845 02b0 DCB2     		uxtb	r4, r3
 4846 02b2 9648     		ldr	r0, .L353
 4847 02b4 1346     		mov	r3, r2
 4848 02b6 5B00     		lsls	r3, r3, #1
 4849 02b8 1344     		add	r3, r3, r2
 4850 02ba 0344     		add	r3, r3, r0
 4851 02bc 0B44     		add	r3, r3, r1
 4852 02be 2246     		mov	r2, r4
 4853 02c0 1A70     		strb	r2, [r3]
1593:..\src/interruptions.c ****                                 
1594:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 4854              		.loc 1 1594 0
 4855 02c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4856 02c4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4857 02c8 9048     		ldr	r0, .L353
 4858 02ca 1346     		mov	r3, r2
 4859 02cc 5B00     		lsls	r3, r3, #1
 4860 02ce 1344     		add	r3, r3, r2
 4861 02d0 0344     		add	r3, r3, r0
 4862 02d2 0B44     		add	r3, r3, r1
 4863 02d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4864 02d6 092B     		cmp	r3, #9
 4865 02d8 40F29282 		bls	.L350
 4866              	.L329:
1595:..\src/interruptions.c ****                         // Discard
1596:..\src/interruptions.c ****                         return;
1597:..\src/interruptions.c ****                 }
1598:..\src/interruptions.c ****             }
1599:..\src/interruptions.c ****         }
1600:..\src/interruptions.c **** 
1601:..\src/interruptions.c ****         error[n_line][index] = 0;
 4867              		.loc 1 1601 0
 4868 02dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4869 02de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4870 02e2 8A48     		ldr	r0, .L353
 4871 02e4 1346     		mov	r3, r2
 4872 02e6 5B00     		lsls	r3, r3, #1
 4873 02e8 1344     		add	r3, r3, r2
 4874 02ea 0344     		add	r3, r3, r0
 4875 02ec 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 117


 4876 02ee 0022     		movs	r2, #0
 4877 02f0 1A70     		strb	r2, [r3]
1602:..\src/interruptions.c ****         
1603:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4878              		.loc 1 1603 0
 4879 02f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4880 02f4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4881 02f8 8548     		ldr	r0, .L353+4
 4882 02fa 1346     		mov	r3, r2
 4883 02fc 5B00     		lsls	r3, r3, #1
 4884 02fe 1344     		add	r3, r3, r2
 4885 0300 0B44     		add	r3, r3, r1
 4886 0302 FA69     		ldr	r2, [r7, #28]
 4887 0304 40F82320 		str	r2, [r0, r3, lsl #2]
1604:..\src/interruptions.c **** 
1605:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 4888              		.loc 1 1605 0
 4889 0308 FB69     		ldr	r3, [r7, #28]
 4890 030a BB62     		str	r3, [r7, #40]
1606:..\src/interruptions.c **** 
1607:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 4891              		.loc 1 1607 0
 4892 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4893 030e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4894 0312 8048     		ldr	r0, .L353+8
 4895 0314 1346     		mov	r3, r2
 4896 0316 5B00     		lsls	r3, r3, #1
 4897 0318 1344     		add	r3, r3, r2
 4898 031a 1B01     		lsls	r3, r3, #4
 4899 031c 0344     		add	r3, r3, r0
 4900 031e 0B44     		add	r3, r3, r1
 4901 0320 1433     		adds	r3, r3, #20
 4902 0322 93F90030 		ldrsb	r3, [r3]
 4903 0326 1B04     		lsls	r3, r3, #16
 4904 0328 BA6A     		ldr	r2, [r7, #40]
 4905 032a 1344     		add	r3, r3, r2
 4906 032c BB62     		str	r3, [r7, #40]
1608:..\src/interruptions.c ****         
1609:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 4907              		.loc 1 1609 0
 4908 032e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4909 0330 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4910 0334 7848     		ldr	r0, .L353+12
 4911 0336 1346     		mov	r3, r2
 4912 0338 5B00     		lsls	r3, r3, #1
 4913 033a 1344     		add	r3, r3, r2
 4914 033c 9B00     		lsls	r3, r3, #2
 4915 033e 0B44     		add	r3, r3, r1
 4916 0340 6833     		adds	r3, r3, #104
 4917 0342 9B00     		lsls	r3, r3, #2
 4918 0344 0344     		add	r3, r3, r0
 4919 0346 5B68     		ldr	r3, [r3, #4]	@ float
 4920 0348 4FF07E51 		mov	r1, #1065353216
 4921 034c 1846     		mov	r0, r3
 4922 034e FFF7FEFF 		bl	__aeabi_fcmpeq
 4923 0352 0346     		mov	r3, r0
 4924 0354 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 118


 4925 0356 1AD1     		bne	.L332
1610:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 4926              		.loc 1 1610 0
 4927 0358 B86A     		ldr	r0, [r7, #40]
 4928 035a FFF7FEFF 		bl	__aeabi_i2f
 4929 035e 0446     		mov	r4, r0
 4930 0360 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4931 0362 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4932 0366 6C48     		ldr	r0, .L353+12
 4933 0368 1346     		mov	r3, r2
 4934 036a 5B00     		lsls	r3, r3, #1
 4935 036c 1344     		add	r3, r3, r2
 4936 036e 9B00     		lsls	r3, r3, #2
 4937 0370 0B44     		add	r3, r3, r1
 4938 0372 6833     		adds	r3, r3, #104
 4939 0374 9B00     		lsls	r3, r3, #2
 4940 0376 0344     		add	r3, r3, r0
 4941 0378 5B68     		ldr	r3, [r3, #4]	@ float
 4942 037a 1946     		mov	r1, r3
 4943 037c 2046     		mov	r0, r4
 4944 037e FFF7FEFF 		bl	__aeabi_fmul
 4945 0382 0346     		mov	r3, r0
 4946 0384 1846     		mov	r0, r3
 4947 0386 FFF7FEFF 		bl	__aeabi_f2iz
 4948 038a 0346     		mov	r3, r0
 4949 038c BB62     		str	r3, [r7, #40]
 4950              	.L332:
1611:..\src/interruptions.c ****         }
1612:..\src/interruptions.c **** 
1613:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 4951              		.loc 1 1613 0
 4952 038e 624B     		ldr	r3, .L353+12
 4953 0390 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 4954 0394 002B     		cmp	r3, #0
 4955 0396 0BD1     		bne	.L334
1614:..\src/interruptions.c ****             // Right / Left hand turn
1615:..\src/interruptions.c ****             if (index == 0) {
 4956              		.loc 1 1615 0
 4957 0398 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4958 039c 002B     		cmp	r3, #0
 4959 039e 07D1     		bne	.L334
1616:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 4960              		.loc 1 1616 0
 4961 03a0 5D4B     		ldr	r3, .L353+12
 4962 03a2 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 4963 03a6 002B     		cmp	r3, #0
 4964 03a8 02D1     		bne	.L334
1617:..\src/interruptions.c ****                     value_encoder *= -1;        
 4965              		.loc 1 1617 0
 4966 03aa BB6A     		ldr	r3, [r7, #40]
 4967 03ac 5B42     		negs	r3, r3
 4968 03ae BB62     		str	r3, [r7, #40]
 4969              	.L334:
1618:..\src/interruptions.c ****                 }
1619:..\src/interruptions.c ****             }
1620:..\src/interruptions.c ****         }
1621:..\src/interruptions.c ****  
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 119


1622:..\src/interruptions.c **** 
1623:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 4970              		.loc 1 1623 0
 4971 03b0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4972 03b2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4973 03b6 5748     		ldr	r0, .L353+8
 4974 03b8 1346     		mov	r3, r2
 4975 03ba 5B00     		lsls	r3, r3, #1
 4976 03bc 1344     		add	r3, r3, r2
 4977 03be 9B00     		lsls	r3, r3, #2
 4978 03c0 0B44     		add	r3, r3, r1
 4979 03c2 BA6A     		ldr	r2, [r7, #40]
 4980 03c4 40F82320 		str	r2, [r0, r3, lsl #2]
1624:..\src/interruptions.c ****     
1625:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 4981              		.loc 1 1625 0
 4982 03c8 BA6A     		ldr	r2, [r7, #40]
 4983 03ca 1346     		mov	r3, r2
 4984 03cc 9B00     		lsls	r3, r3, #2
 4985 03ce 1344     		add	r3, r3, r2
 4986 03d0 5B00     		lsls	r3, r3, #1
 4987 03d2 9918     		adds	r1, r3, r2
 4988 03d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4989 03d6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4990 03da 504C     		ldr	r4, .L353+16
 4991 03dc 1346     		mov	r3, r2
 4992 03de 5B00     		lsls	r3, r3, #1
 4993 03e0 1344     		add	r3, r3, r2
 4994 03e2 0344     		add	r3, r3, r0
 4995 03e4 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4996 03e8 6FF01102 		mvn	r2, #17
 4997 03ec 02FB03F3 		mul	r3, r2, r3
 4998 03f0 1944     		add	r1, r1, r3
 4999 03f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5000 03f4 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5001 03f8 494C     		ldr	r4, .L353+20
 5002 03fa 1346     		mov	r3, r2
 5003 03fc 5B00     		lsls	r3, r3, #1
 5004 03fe 1344     		add	r3, r3, r2
 5005 0400 0344     		add	r3, r3, r0
 5006 0402 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5007 0406 1346     		mov	r3, r2
 5008 0408 DB00     		lsls	r3, r3, #3
 5009 040a 1344     		add	r3, r3, r2
 5010 040c 1944     		add	r1, r1, r3
 5011 040e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5012 0410 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5013 0414 434C     		ldr	r4, .L353+24
 5014 0416 1346     		mov	r3, r2
 5015 0418 5B00     		lsls	r3, r3, #1
 5016 041a 1344     		add	r3, r3, r2
 5017 041c 0344     		add	r3, r3, r0
 5018 041e 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5019 0422 5B00     		lsls	r3, r3, #1
 5020 0424 C81A     		subs	r0, r1, r3
 5021 0426 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5022 042a DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 120


 5023 042c 3E4A     		ldr	r2, .L353+28
 5024 042e 1344     		add	r3, r3, r2
 5025 0430 1946     		mov	r1, r3
 5026 0432 FFF7FEFF 		bl	filter
 5027 0436 0346     		mov	r3, r0
 5028 0438 1BB2     		sxth	r3, r3
 5029 043a 7B61     		str	r3, [r7, #20]
1626:..\src/interruptions.c **** 
1627:..\src/interruptions.c ****         //Update current speed
1628:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5030              		.loc 1 1628 0
 5031 043c 7869     		ldr	r0, [r7, #20]
 5032 043e FFF7FEFF 		bl	__aeabi_i2f
 5033 0442 0446     		mov	r4, r0
 5034 0444 394B     		ldr	r3, .L353+32
 5035 0446 1B68     		ldr	r3, [r3]	@ float
 5036 0448 3949     		ldr	r1, .L353+36
 5037 044a 1846     		mov	r0, r3
 5038 044c FFF7FEFF 		bl	__aeabi_fmul
 5039 0450 0346     		mov	r3, r0
 5040 0452 1946     		mov	r1, r3
 5041 0454 2046     		mov	r0, r4
 5042 0456 FFF7FEFF 		bl	__aeabi_fdiv
 5043 045a 0346     		mov	r3, r0
 5044 045c 1846     		mov	r0, r3
 5045 045e FFF7FEFF 		bl	__aeabi_f2iz
 5046 0462 0346     		mov	r3, r0
 5047 0464 7B61     		str	r3, [r7, #20]
1629:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5048              		.loc 1 1629 0
 5049 0466 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5050 0468 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5051 046c 2948     		ldr	r0, .L353+8
 5052 046e 1346     		mov	r3, r2
 5053 0470 5B00     		lsls	r3, r3, #1
 5054 0472 1344     		add	r3, r3, r2
 5055 0474 9B00     		lsls	r3, r3, #2
 5056 0476 0B44     		add	r3, r3, r1
 5057 0478 0633     		adds	r3, r3, #6
 5058 047a 7A69     		ldr	r2, [r7, #20]
 5059 047c 40F82320 		str	r2, [r0, r3, lsl #2]
1630:..\src/interruptions.c **** 
1631:..\src/interruptions.c ****         // update old velocity and acceleration values
1632:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5060              		.loc 1 1632 0
 5061 0480 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5062 0482 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5063 0486 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5064 0488 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5065 048c 244D     		ldr	r5, .L353+20
 5066 048e 0B46     		mov	r3, r1
 5067 0490 5B00     		lsls	r3, r3, #1
 5068 0492 0B44     		add	r3, r3, r1
 5069 0494 2344     		add	r3, r3, r4
 5070 0496 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5071 049a 224C     		ldr	r4, .L353+24
 5072 049c 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 121


 5073 049e 5B00     		lsls	r3, r3, #1
 5074 04a0 1344     		add	r3, r3, r2
 5075 04a2 0344     		add	r3, r3, r0
 5076 04a4 44F82310 		str	r1, [r4, r3, lsl #2]
1633:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5077              		.loc 1 1633 0
 5078 04a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5079 04aa 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5080 04ae F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5081 04b0 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5082 04b4 194D     		ldr	r5, .L353+16
 5083 04b6 0B46     		mov	r3, r1
 5084 04b8 5B00     		lsls	r3, r3, #1
 5085 04ba 0B44     		add	r3, r3, r1
 5086 04bc 2344     		add	r3, r3, r4
 5087 04be 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5088 04c2 174C     		ldr	r4, .L353+20
 5089 04c4 1346     		mov	r3, r2
 5090 04c6 5B00     		lsls	r3, r3, #1
 5091 04c8 1344     		add	r3, r3, r2
 5092 04ca 0344     		add	r3, r3, r0
 5093 04cc 44F82310 		str	r1, [r4, r3, lsl #2]
1634:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5094              		.loc 1 1634 0
 5095 04d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5096 04d2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5097 04d6 1148     		ldr	r0, .L353+16
 5098 04d8 1346     		mov	r3, r2
 5099 04da 5B00     		lsls	r3, r3, #1
 5100 04dc 1344     		add	r3, r3, r2
 5101 04de 0B44     		add	r3, r3, r1
 5102 04e0 BA6A     		ldr	r2, [r7, #40]
 5103 04e2 40F82320 		str	r2, [r0, r3, lsl #2]
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1637:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5104              		.loc 1 1637 0
 5105 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5106 04e8 124A     		ldr	r2, .L353+40
 5107 04ea D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5108 04ec 002B     		cmp	r3, #0
 5109 04ee 40F04381 		bne	.L335
1638:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5110              		.loc 1 1638 0
 5111 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5112 04f4 104A     		ldr	r2, .L353+44
 5113 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5114 04f8 212B     		cmp	r3, #33
 5115 04fa 1FD8     		bhi	.L336
1639:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5116              		.loc 1 1639 0
 5117 04fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5118 04fe 0E4A     		ldr	r2, .L353+44
 5119 0500 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5120 0502 0132     		adds	r2, r2, #1
 5121 0504 D1B2     		uxtb	r1, r2
 5122 0506 0C4A     		ldr	r2, .L353+44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 122


 5123 0508 D154     		strb	r1, [r2, r3]
 5124 050a 35E1     		b	.L335
 5125              	.L354:
 5126              		.align	2
 5127              	.L353:
 5128 050c 14010000 		.word	error.10512
 5129 0510 E4000000 		.word	last_value_encoder.10510
 5130 0514 00000000 		.word	g_meas
 5131 0518 00000000 		.word	c_mem
 5132 051c 1C010000 		.word	v_value.10518
 5133 0520 34010000 		.word	vv_value.10519
 5134 0524 4C010000 		.word	vvv_value.10520
 5135 0528 00000000 		.word	filt_vel
 5136 052c 00000000 		.word	cycle_time
 5137 0530 0000C040 		.word	1086324736
 5138 0534 64010000 		.word	pos_reconstruct.10517
 5139 0538 68010000 		.word	one_time_execute.10515
 5140              	.L336:
1640:..\src/interruptions.c ****             else {
1641:..\src/interruptions.c ****                 //Double encoder translation
1642:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5141              		.loc 1 1642 0
 5142 053c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5143 053e B249     		ldr	r1, .L355
 5144 0540 1346     		mov	r3, r2
 5145 0542 5B00     		lsls	r3, r3, #1
 5146 0544 1344     		add	r3, r3, r2
 5147 0546 1B01     		lsls	r3, r3, #4
 5148 0548 0B44     		add	r3, r3, r1
 5149 054a 03F5D873 		add	r3, r3, #432
 5150 054e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5151 0550 002B     		cmp	r3, #0
 5152 0552 5FD0     		beq	.L337
1643:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5153              		.loc 1 1643 0
 5154 0554 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5155 0556 AD49     		ldr	r1, .L355+4
 5156 0558 1346     		mov	r3, r2
 5157 055a 5B00     		lsls	r3, r3, #1
 5158 055c 1344     		add	r3, r3, r2
 5159 055e 9B00     		lsls	r3, r3, #2
 5160 0560 0B44     		add	r3, r3, r1
 5161 0562 1868     		ldr	r0, [r3]
 5162 0564 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5163 0566 A949     		ldr	r1, .L355+4
 5164 0568 1346     		mov	r3, r2
 5165 056a 5B00     		lsls	r3, r3, #1
 5166 056c 1344     		add	r3, r3, r2
 5167 056e 9B00     		lsls	r3, r3, #2
 5168 0570 0B44     		add	r3, r3, r1
 5169 0572 0433     		adds	r3, r3, #4
 5170 0574 1C68     		ldr	r4, [r3]
1644:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5171              		.loc 1 1644 0
 5172 0576 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5173 0578 A349     		ldr	r1, .L355
 5174 057a 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 123


 5175 057c 5B00     		lsls	r3, r3, #1
 5176 057e 1344     		add	r3, r3, r2
 5177 0580 1B01     		lsls	r3, r3, #4
 5178 0582 0B44     		add	r3, r3, r1
 5179 0584 03F2B513 		addw	r3, r3, #437
 5180 0588 93F90030 		ldrsb	r3, [r3]
1643:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5181              		.loc 1 1643 0
 5182 058c 1D46     		mov	r5, r3
 5183              		.loc 1 1644 0
 5184 058e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5185 0590 9D49     		ldr	r1, .L355
 5186 0592 1346     		mov	r3, r2
 5187 0594 5B00     		lsls	r3, r3, #1
 5188 0596 1344     		add	r3, r3, r2
 5189 0598 1B01     		lsls	r3, r3, #4
 5190 059a 0B44     		add	r3, r3, r1
 5191 059c 03F5DB73 		add	r3, r3, #438
 5192 05a0 93F90030 		ldrsb	r3, [r3]
1643:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5193              		.loc 1 1643 0
 5194 05a4 1E46     		mov	r6, r3
 5195              		.loc 1 1644 0
 5196 05a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5197 05a8 9749     		ldr	r1, .L355
 5198 05aa 1346     		mov	r3, r2
 5199 05ac 5B00     		lsls	r3, r3, #1
 5200 05ae 1344     		add	r3, r3, r2
 5201 05b0 1B01     		lsls	r3, r3, #4
 5202 05b2 0B44     		add	r3, r3, r1
 5203 05b4 03F2B713 		addw	r3, r3, #439
 5204 05b8 93F90030 		ldrsb	r3, [r3]
1643:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5205              		.loc 1 1643 0
 5206 05bc 0093     		str	r3, [sp]
 5207 05be 3346     		mov	r3, r6
 5208 05c0 2A46     		mov	r2, r5
 5209 05c2 2146     		mov	r1, r4
 5210 05c4 FFF7FEFF 		bl	calc_turns_fcn
 5211 05c8 0346     		mov	r3, r0
 5212 05ca 87F82730 		strb	r3, [r7, #39]
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5213              		.loc 1 1646 0
 5214 05ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5215 05d0 8D49     		ldr	r1, .L355
 5216 05d2 1346     		mov	r3, r2
 5217 05d4 5B00     		lsls	r3, r3, #1
 5218 05d6 1344     		add	r3, r3, r2
 5219 05d8 1B01     		lsls	r3, r3, #4
 5220 05da 0B44     		add	r3, r3, r1
 5221 05dc 03F5D273 		add	r3, r3, #420
 5222 05e0 1B68     		ldr	r3, [r3]	@ float
 5223 05e2 4FF00001 		mov	r1, #0
 5224 05e6 1846     		mov	r0, r3
 5225 05e8 FFF7FEFF 		bl	__aeabi_fcmplt
 5226 05ec 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 124


 5227 05ee 002B     		cmp	r3, #0
 5228 05f0 05D0     		beq	.L338
1647:..\src/interruptions.c ****                         init_rot = -init_rot;
 5229              		.loc 1 1647 0
 5230 05f2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5231 05f6 5B42     		negs	r3, r3
 5232 05f8 DBB2     		uxtb	r3, r3
 5233 05fa 87F82730 		strb	r3, [r7, #39]
 5234              	.L338:
1648:..\src/interruptions.c ****                     
1649:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5235              		.loc 1 1649 0
 5236 05fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5237 0600 8349     		ldr	r1, .L355+8
 5238 0602 1346     		mov	r3, r2
 5239 0604 5B00     		lsls	r3, r3, #1
 5240 0606 1344     		add	r3, r3, r2
 5241 0608 1B01     		lsls	r3, r3, #4
 5242 060a 0B44     		add	r3, r3, r1
 5243 060c 1433     		adds	r3, r3, #20
 5244 060e 97F82720 		ldrb	r2, [r7, #39]
 5245 0612 1A70     		strb	r2, [r3]
 5246              	.L337:
1650:..\src/interruptions.c ****                 }    
1651:..\src/interruptions.c **** 
1652:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5247              		.loc 1 1652 0
 5248 0614 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5249 0616 7C49     		ldr	r1, .L355
 5250 0618 1346     		mov	r3, r2
 5251 061a 5B00     		lsls	r3, r3, #1
 5252 061c 1344     		add	r3, r3, r2
 5253 061e 1B01     		lsls	r3, r3, #4
 5254 0620 0B44     		add	r3, r3, r1
 5255 0622 03F5D273 		add	r3, r3, #420
 5256 0626 1B68     		ldr	r3, [r3]	@ float
 5257 0628 4FF07E51 		mov	r1, #1065353216
 5258 062c 1846     		mov	r0, r3
 5259 062e FFF7FEFF 		bl	__aeabi_fcmpeq
 5260 0632 0346     		mov	r3, r0
 5261 0634 002B     		cmp	r3, #0
 5262 0636 24D1     		bne	.L340
1653:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5263              		.loc 1 1653 0
 5264 0638 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5265 063a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5266 063c 7449     		ldr	r1, .L355+8
 5267 063e 1346     		mov	r3, r2
 5268 0640 5B00     		lsls	r3, r3, #1
 5269 0642 1344     		add	r3, r3, r2
 5270 0644 1B01     		lsls	r3, r3, #4
 5271 0646 0B44     		add	r3, r3, r1
 5272 0648 1B68     		ldr	r3, [r3]
 5273 064a 1846     		mov	r0, r3
 5274 064c FFF7FEFF 		bl	__aeabi_i2f
 5275 0650 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5276 0652 6D49     		ldr	r1, .L355
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 125


 5277 0654 1346     		mov	r3, r2
 5278 0656 5B00     		lsls	r3, r3, #1
 5279 0658 1344     		add	r3, r3, r2
 5280 065a 1B01     		lsls	r3, r3, #4
 5281 065c 0B44     		add	r3, r3, r1
 5282 065e 03F5D273 		add	r3, r3, #420
 5283 0662 1B68     		ldr	r3, [r3]	@ float
 5284 0664 1946     		mov	r1, r3
 5285 0666 FFF7FEFF 		bl	__aeabi_fdiv
 5286 066a 0346     		mov	r3, r0
 5287 066c 1846     		mov	r0, r3
 5288 066e FFF7FEFF 		bl	__aeabi_f2iz
 5289 0672 0146     		mov	r1, r0
 5290 0674 664A     		ldr	r2, .L355+8
 5291 0676 2346     		mov	r3, r4
 5292 0678 5B00     		lsls	r3, r3, #1
 5293 067a 2344     		add	r3, r3, r4
 5294 067c 1B01     		lsls	r3, r3, #4
 5295 067e 1344     		add	r3, r3, r2
 5296 0680 1960     		str	r1, [r3]
 5297              	.L340:
1654:..\src/interruptions.c ****                 
1655:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5298              		.loc 1 1655 0
 5299 0682 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5300 0684 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5301 0686 6248     		ldr	r0, .L355+8
 5302 0688 0B46     		mov	r3, r1
 5303 068a 5B00     		lsls	r3, r3, #1
 5304 068c 0B44     		add	r3, r3, r1
 5305 068e 1B01     		lsls	r3, r3, #4
 5306 0690 0344     		add	r3, r3, r0
 5307 0692 1968     		ldr	r1, [r3]
 5308 0694 97F92730 		ldrsb	r3, [r7, #39]
 5309 0698 1B04     		lsls	r3, r3, #16
 5310 069a 1944     		add	r1, r1, r3
 5311 069c 5C48     		ldr	r0, .L355+8
 5312 069e 1346     		mov	r3, r2
 5313 06a0 5B00     		lsls	r3, r3, #1
 5314 06a2 1344     		add	r3, r3, r2
 5315 06a4 1B01     		lsls	r3, r3, #4
 5316 06a6 0344     		add	r3, r3, r0
 5317 06a8 1960     		str	r1, [r3]
1656:..\src/interruptions.c ****             
1657:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5318              		.loc 1 1657 0
 5319 06aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5320 06ac 5649     		ldr	r1, .L355
 5321 06ae 1346     		mov	r3, r2
 5322 06b0 5B00     		lsls	r3, r3, #1
 5323 06b2 1344     		add	r3, r3, r2
 5324 06b4 1B01     		lsls	r3, r3, #4
 5325 06b6 0B44     		add	r3, r3, r1
 5326 06b8 03F5D273 		add	r3, r3, #420
 5327 06bc 1B68     		ldr	r3, [r3]	@ float
 5328 06be 4FF07E51 		mov	r1, #1065353216
 5329 06c2 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 126


 5330 06c4 FFF7FEFF 		bl	__aeabi_fcmpeq
 5331 06c8 0346     		mov	r3, r0
 5332 06ca 002B     		cmp	r3, #0
 5333 06cc 24D1     		bne	.L342
1658:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5334              		.loc 1 1658 0
 5335 06ce FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5336 06d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5337 06d2 4F49     		ldr	r1, .L355+8
 5338 06d4 1346     		mov	r3, r2
 5339 06d6 5B00     		lsls	r3, r3, #1
 5340 06d8 1344     		add	r3, r3, r2
 5341 06da 1B01     		lsls	r3, r3, #4
 5342 06dc 0B44     		add	r3, r3, r1
 5343 06de 1B68     		ldr	r3, [r3]
 5344 06e0 1846     		mov	r0, r3
 5345 06e2 FFF7FEFF 		bl	__aeabi_i2f
 5346 06e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5347 06e8 4749     		ldr	r1, .L355
 5348 06ea 1346     		mov	r3, r2
 5349 06ec 5B00     		lsls	r3, r3, #1
 5350 06ee 1344     		add	r3, r3, r2
 5351 06f0 1B01     		lsls	r3, r3, #4
 5352 06f2 0B44     		add	r3, r3, r1
 5353 06f4 03F5D273 		add	r3, r3, #420
 5354 06f8 1B68     		ldr	r3, [r3]	@ float
 5355 06fa 1946     		mov	r1, r3
 5356 06fc FFF7FEFF 		bl	__aeabi_fmul
 5357 0700 0346     		mov	r3, r0
 5358 0702 1846     		mov	r0, r3
 5359 0704 FFF7FEFF 		bl	__aeabi_f2iz
 5360 0708 0146     		mov	r1, r0
 5361 070a 414A     		ldr	r2, .L355+8
 5362 070c 2346     		mov	r3, r4
 5363 070e 5B00     		lsls	r3, r3, #1
 5364 0710 2344     		add	r3, r3, r4
 5365 0712 1B01     		lsls	r3, r3, #4
 5366 0714 1344     		add	r3, r3, r2
 5367 0716 1960     		str	r1, [r3]
 5368              	.L342:
1659:..\src/interruptions.c ****             
1660:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5369              		.loc 1 1660 0
 5370 0718 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5371 071a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5372 071c 3C48     		ldr	r0, .L355+8
 5373 071e 1346     		mov	r3, r2
 5374 0720 5B00     		lsls	r3, r3, #1
 5375 0722 1344     		add	r3, r3, r2
 5376 0724 1B01     		lsls	r3, r3, #4
 5377 0726 0344     		add	r3, r3, r0
 5378 0728 1A68     		ldr	r2, [r3]
 5379 072a 3A48     		ldr	r0, .L355+12
 5380 072c 0B01     		lsls	r3, r1, #4
 5381 072e 0344     		add	r3, r3, r0
 5382 0730 1A60     		str	r2, [r3]
1661:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 127


1662:..\src/interruptions.c ****                 // If necessary activate motor
1663:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5383              		.loc 1 1663 0
 5384 0732 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5385 0734 384A     		ldr	r2, .L355+16
 5386 0736 0121     		movs	r1, #1
 5387 0738 D154     		strb	r1, [r2, r3]
1664:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1665:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5388              		.loc 1 1665 0
 5389 073a B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5390 073c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5391 073e 3248     		ldr	r0, .L355
 5392 0740 1346     		mov	r3, r2
 5393 0742 DB00     		lsls	r3, r3, #3
 5394 0744 9B1A     		subs	r3, r3, r2
 5395 0746 1B01     		lsls	r3, r3, #4
 5396 0748 0344     		add	r3, r3, r0
 5397 074a E033     		adds	r3, r3, #224
 5398 074c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5399 074e 314A     		ldr	r2, .L355+12
 5400 0750 0B01     		lsls	r3, r1, #4
 5401 0752 1344     		add	r3, r3, r2
 5402 0754 0C33     		adds	r3, r3, #12
 5403 0756 0246     		mov	r2, r0
 5404 0758 1A70     		strb	r2, [r3]
1666:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5405              		.loc 1 1666 0
 5406 075a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5407 075c 2D4A     		ldr	r2, .L355+12
 5408 075e 1B01     		lsls	r3, r3, #4
 5409 0760 1344     		add	r3, r3, r2
 5410 0762 0C33     		adds	r3, r3, #12
 5411 0764 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5412 0766 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5413 0768 1146     		mov	r1, r2
 5414 076a 1846     		mov	r0, r3
 5415 076c FFF7FEFF 		bl	enable_motor
1667:..\src/interruptions.c ****                 
1668:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5416              		.loc 1 1668 0
 5417 0770 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5418 0772 2A4A     		ldr	r2, .L355+20
 5419 0774 0121     		movs	r1, #1
 5420 0776 D154     		strb	r1, [r2, r3]
 5421              	.L335:
1541:..\src/interruptions.c ****         
 5422              		.loc 1 1541 0 discriminator 2
 5423 0778 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5424 077c 0133     		adds	r3, r3, #1
 5425 077e 87F82F30 		strb	r3, [r7, #47]
 5426              	.L324:
1541:..\src/interruptions.c ****         
 5427              		.loc 1 1541 0 is_stmt 0 discriminator 1
 5428 0782 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5429 0786 022B     		cmp	r3, #2
 5430 0788 7FF6BDAC 		bls	.L344
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 128


1669:..\src/interruptions.c ****             }
1670:..\src/interruptions.c ****         }
1671:..\src/interruptions.c ****     } 
1672:..\src/interruptions.c **** 
1673:..\src/interruptions.c **** 	
1674:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1675:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5431              		.loc 1 1675 0 is_stmt 1
 5432 078c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5433 078e 224A     		ldr	r2, .L355+16
 5434 0790 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5435 0792 002B     		cmp	r3, #0
 5436 0794 35D0     		beq	.L315
1676:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5437              		.loc 1 1676 0
 5438 0796 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5439 0798 214A     		ldr	r2, .L355+24
 5440 079a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5441 079e 0132     		adds	r2, r2, #1
 5442 07a0 1F49     		ldr	r1, .L355+24
 5443 07a2 41F82320 		str	r2, [r1, r3, lsl #2]
1677:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5444              		.loc 1 1677 0
 5445 07a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5446 07a8 1D4A     		ldr	r2, .L355+24
 5447 07aa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5448 07ae B3F5FA5F 		cmp	r3, #8000
 5449 07b2 26D3     		bcc	.L315
1678:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5450              		.loc 1 1678 0
 5451 07b4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5452 07b6 174A     		ldr	r2, .L355+12
 5453 07b8 1B01     		lsls	r3, r3, #4
 5454 07ba 1344     		add	r3, r3, r2
 5455 07bc 0022     		movs	r2, #0
 5456 07be 1A60     		str	r2, [r3]
1679:..\src/interruptions.c ****             
1680:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1681:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5457              		.loc 1 1681 0
 5458 07c0 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5459 07c2 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5460 07c4 1048     		ldr	r0, .L355
 5461 07c6 1346     		mov	r3, r2
 5462 07c8 DB00     		lsls	r3, r3, #3
 5463 07ca 9B1A     		subs	r3, r3, r2
 5464 07cc 1B01     		lsls	r3, r3, #4
 5465 07ce 0344     		add	r3, r3, r0
 5466 07d0 E033     		adds	r3, r3, #224
 5467 07d2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5468 07d4 0F4A     		ldr	r2, .L355+12
 5469 07d6 0B01     		lsls	r3, r1, #4
 5470 07d8 1344     		add	r3, r3, r2
 5471 07da 0C33     		adds	r3, r3, #12
 5472 07dc 0246     		mov	r2, r0
 5473 07de 1A70     		strb	r2, [r3]
1682:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 129


 5474              		.loc 1 1682 0
 5475 07e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5476 07e2 0C4A     		ldr	r2, .L355+12
 5477 07e4 1B01     		lsls	r3, r3, #4
 5478 07e6 1344     		add	r3, r3, r2
 5479 07e8 0C33     		adds	r3, r3, #12
 5480 07ea 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5481 07ec BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5482 07ee 1146     		mov	r1, r2
 5483 07f0 1846     		mov	r0, r3
 5484 07f2 FFF7FEFF 		bl	enable_motor
1683:..\src/interruptions.c ****                         
1684:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5485              		.loc 1 1684 0
 5486 07f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5487 07f8 074A     		ldr	r2, .L355+16
 5488 07fa 0021     		movs	r1, #0
 5489 07fc D154     		strb	r1, [r2, r3]
 5490 07fe 00E0     		b	.L315
 5491              	.L350:
1596:..\src/interruptions.c ****                 }
 5492              		.loc 1 1596 0
 5493 0800 00BF     		nop
 5494              	.L315:
1685:..\src/interruptions.c ****         }
1686:..\src/interruptions.c ****     }
1687:..\src/interruptions.c ****  
1688:..\src/interruptions.c **** }
 5495              		.loc 1 1688 0
 5496 0802 3437     		adds	r7, r7, #52
 5497              		.cfi_def_cfa_offset 20
 5498 0804 BD46     		mov	sp, r7
 5499              		.cfi_def_cfa_register 13
 5500              		@ sp needed
 5501 0806 F0BD     		pop	{r4, r5, r6, r7, pc}
 5502              	.L356:
 5503              		.align	2
 5504              	.L355:
 5505 0808 00000000 		.word	c_mem
 5506 080c FC000000 		.word	comp_value_encoder.10511
 5507 0810 00000000 		.word	g_meas
 5508 0814 00000000 		.word	g_refNew
 5509 0818 6C010000 		.word	safe_startup_motor_activation.10514
 5510 081c 64010000 		.word	pos_reconstruct.10517
 5511 0820 70010000 		.word	count_startup_motor.10516
 5512              		.cfi_endproc
 5513              	.LFE70:
 5514              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 5515              		.section	.text.analog_read_end,"ax",%progbits
 5516              		.align	2
 5517              		.global	analog_read_end
 5518              		.thumb
 5519              		.thumb_func
 5520              		.type	analog_read_end, %function
 5521              	analog_read_end:
 5522              	.LFB71:
1689:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 130


1690:..\src/interruptions.c **** //==============================================================================
1691:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1692:..\src/interruptions.c **** //==============================================================================
1693:..\src/interruptions.c **** 
1694:..\src/interruptions.c **** void analog_read_end() {
 5523              		.loc 1 1694 0
 5524              		.cfi_startproc
 5525              		@ args = 0, pretend = 0, frame = 8
 5526              		@ frame_needed = 1, uses_anonymous_args = 0
 5527 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5528              		.cfi_def_cfa_offset 20
 5529              		.cfi_offset 4, -20
 5530              		.cfi_offset 5, -16
 5531              		.cfi_offset 6, -12
 5532              		.cfi_offset 7, -8
 5533              		.cfi_offset 14, -4
 5534 0002 83B0     		sub	sp, sp, #12
 5535              		.cfi_def_cfa_offset 32
 5536 0004 00AF     		add	r7, sp, #0
 5537              		.cfi_def_cfa_register 7
1695:..\src/interruptions.c **** 
1696:..\src/interruptions.c ****     /* =========================================================================
1697:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1698:..\src/interruptions.c ****     /
1699:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1700:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1701:..\src/interruptions.c ****     /
1702:..\src/interruptions.c ****     /   Definition:
1703:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1704:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1705:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1706:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1707:..\src/interruptions.c ****     /
1708:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1709:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1710:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1711:..\src/interruptions.c ****     /  =========================================================================
1712:..\src/interruptions.c ****     */
1713:..\src/interruptions.c **** 
1714:..\src/interruptions.c ****     int32 CYDATA i_aux;
1715:..\src/interruptions.c **** 
1716:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1717:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1718:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1719:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1720:..\src/interruptions.c ****     static uint16 count = 0;
1721:..\src/interruptions.c ****     static uint32 v_count = 0;
1722:..\src/interruptions.c ****     static uint8 idx = 0;
1723:..\src/interruptions.c ****     
1724:..\src/interruptions.c ****     // Wait for conversion end
1725:..\src/interruptions.c ****     
1726:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5538              		.loc 1 1726 0
 5539 0006 08E0     		b	.L358
 5540              	.L359:
1727:..\src/interruptions.c ****         
1728:..\src/interruptions.c ****         if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 131


 5541              		.loc 1 1728 0
 5542 0008 A84B     		ldr	r3, .L463
 5543 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5544 000c 002B     		cmp	r3, #0
 5545 000e 04D0     		beq	.L358
1729:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5546              		.loc 1 1729 0
 5547 0010 A64B     		ldr	r3, .L463
 5548 0012 0022     		movs	r2, #0
 5549 0014 1A70     		strb	r2, [r3]
1730:..\src/interruptions.c ****             interrupt_manager();
 5550              		.loc 1 1730 0
 5551 0016 FFF7FEFF 		bl	interrupt_manager
 5552              	.L358:
1726:..\src/interruptions.c ****         
 5553              		.loc 1 1726 0
 5554 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5555 001e 0346     		mov	r3, r0
 5556 0020 002B     		cmp	r3, #0
 5557 0022 F1D0     		beq	.L359
1731:..\src/interruptions.c ****         }
1732:..\src/interruptions.c ****     }
1733:..\src/interruptions.c ****     
1734:..\src/interruptions.c ****     // Convert tension read
1735:..\src/interruptions.c ****     dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5558              		.loc 1 1735 0
 5559 0024 A24B     		ldr	r3, .L463+4
 5560 0026 B3F90030 		ldrsh	r3, [r3]
 5561 002a A3F25563 		subw	r3, r3, #1621
 5562 002e 40F2C672 		movw	r2, #1990
 5563 0032 02FB03F3 		mul	r3, r2, r3
 5564 0036 DB11     		asrs	r3, r3, #7
 5565 0038 9E4A     		ldr	r2, .L463+8
 5566 003a 1360     		str	r3, [r2]
1736:..\src/interruptions.c ****     
1737:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1738:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5567              		.loc 1 1738 0
 5568 003c 9E4B     		ldr	r3, .L463+12
 5569 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5570 0040 042B     		cmp	r3, #4
 5571 0042 0BD9     		bls	.L360
1739:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5572              		.loc 1 1739 0
 5573 0044 9A4B     		ldr	r3, .L463+4
 5574 0046 B3F90830 		ldrsh	r3, [r3, #8]
 5575 004a A3F25563 		subw	r3, r3, #1621
 5576 004e 40F2C672 		movw	r2, #1990
 5577 0052 02FB03F3 		mul	r3, r2, r3
 5578 0056 DB11     		asrs	r3, r3, #7
 5579 0058 964A     		ldr	r2, .L463+8
 5580 005a 5360     		str	r3, [r2, #4]
 5581              	.L360:
1740:..\src/interruptions.c ****     }
1741:..\src/interruptions.c ****     
1742:..\src/interruptions.c ****     if (interrupt_flag){
 5582              		.loc 1 1742 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 132


 5583 005c 934B     		ldr	r3, .L463
 5584 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5585 0060 002B     		cmp	r3, #0
 5586 0062 04D0     		beq	.L361
1743:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5587              		.loc 1 1743 0
 5588 0064 914B     		ldr	r3, .L463
 5589 0066 0022     		movs	r2, #0
 5590 0068 1A70     		strb	r2, [r3]
1744:..\src/interruptions.c ****         interrupt_manager();
 5591              		.loc 1 1744 0
 5592 006a FFF7FEFF 		bl	interrupt_manager
 5593              	.L361:
1745:..\src/interruptions.c ****     }
1746:..\src/interruptions.c ****     
1747:..\src/interruptions.c ****     // VOLTAGE READING
1748:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1749:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1750:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1751:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1752:..\src/interruptions.c ****     
1753:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 5594              		.loc 1 1753 0
 5595 006e 934B     		ldr	r3, .L463+16
 5596 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5597 0072 002B     		cmp	r3, #0
 5598 0074 4DD0     		beq	.L362
 5599              		.loc 1 1753 0 is_stmt 0 discriminator 1
 5600 0076 924B     		ldr	r3, .L463+20
 5601 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5602 007a 002B     		cmp	r3, #0
 5603 007c 49D0     		beq	.L362
1754:..\src/interruptions.c ****         count = count + 1;
 5604              		.loc 1 1754 0 is_stmt 1
 5605 007e 914B     		ldr	r3, .L463+24
 5606 0080 1B88     		ldrh	r3, [r3]
 5607 0082 0133     		adds	r3, r3, #1
 5608 0084 9AB2     		uxth	r2, r3
 5609 0086 8F4B     		ldr	r3, .L463+24
 5610 0088 1A80     		strh	r2, [r3]	@ movhi
1755:..\src/interruptions.c ****         
1756:..\src/interruptions.c ****         if (count == 1000){
 5611              		.loc 1 1756 0
 5612 008a 8E4B     		ldr	r3, .L463+24
 5613 008c 1B88     		ldrh	r3, [r3]
 5614 008e B3F57A7F 		cmp	r3, #1000
 5615 0092 3ED1     		bne	.L362
1757:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5616              		.loc 1 1757 0
 5617 0094 8C4B     		ldr	r3, .L463+28
 5618 0096 0022     		movs	r2, #0
 5619 0098 1A70     		strb	r2, [r3]
 5620 009a 33E0     		b	.L363
 5621              	.L367:
1758:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5622              		.loc 1 1758 0
 5623 009c 8A4B     		ldr	r3, .L463+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 133


 5624 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5625 00a0 1A46     		mov	r2, r3
 5626 00a2 844B     		ldr	r3, .L463+8
 5627 00a4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5628 00a8 42F22732 		movw	r2, #8999
 5629 00ac 9342     		cmp	r3, r2
 5630 00ae 08DC     		bgt	.L364
1759:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5631              		.loc 1 1759 0
 5632 00b0 854B     		ldr	r3, .L463+28
 5633 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5634 00b4 1946     		mov	r1, r3
 5635 00b6 854B     		ldr	r3, .L463+32
 5636 00b8 4FF4FA52 		mov	r2, #8000
 5637 00bc 43F82120 		str	r2, [r3, r1, lsl #2]
 5638 00c0 1AE0     		b	.L365
 5639              	.L364:
1760:..\src/interruptions.c ****                 }
1761:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1762:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5640              		.loc 1 1762 0
 5641 00c2 814B     		ldr	r3, .L463+28
 5642 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5643 00c6 1A46     		mov	r2, r3
 5644 00c8 7A4B     		ldr	r3, .L463+8
 5645 00ca 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5646 00ce 43F2C722 		movw	r2, #12999
 5647 00d2 9342     		cmp	r3, r2
 5648 00d4 08DC     		bgt	.L366
1763:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5649              		.loc 1 1763 0
 5650 00d6 7C4B     		ldr	r3, .L463+28
 5651 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5652 00da 1946     		mov	r1, r3
 5653 00dc 7B4B     		ldr	r3, .L463+32
 5654 00de 42F6E062 		movw	r2, #12000
 5655 00e2 43F82120 		str	r2, [r3, r1, lsl #2]
 5656 00e6 07E0     		b	.L365
 5657              	.L366:
1764:..\src/interruptions.c ****                     }
1765:..\src/interruptions.c ****                     else
1766:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5658              		.loc 1 1766 0
 5659 00e8 774B     		ldr	r3, .L463+28
 5660 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5661 00ec 1946     		mov	r1, r3
 5662 00ee 774B     		ldr	r3, .L463+32
 5663 00f0 45F6C052 		movw	r2, #24000
 5664 00f4 43F82120 		str	r2, [r3, r1, lsl #2]
 5665              	.L365:
1757:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5666              		.loc 1 1757 0 discriminator 2
 5667 00f8 734B     		ldr	r3, .L463+28
 5668 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5669 00fc 0133     		adds	r3, r3, #1
 5670 00fe DAB2     		uxtb	r2, r3
 5671 0100 714B     		ldr	r3, .L463+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 134


 5672 0102 1A70     		strb	r2, [r3]
 5673              	.L363:
1757:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5674              		.loc 1 1757 0 is_stmt 0 discriminator 1
 5675 0104 704B     		ldr	r3, .L463+28
 5676 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5677 0108 012B     		cmp	r3, #1
 5678 010a C7D9     		bls	.L367
1767:..\src/interruptions.c ****                 }
1768:..\src/interruptions.c ****             }
1769:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5679              		.loc 1 1769 0 is_stmt 1
 5680 010c 6B4B     		ldr	r3, .L463+16
 5681 010e 0022     		movs	r2, #0
 5682 0110 1A70     		strb	r2, [r3]
 5683              	.L362:
1770:..\src/interruptions.c ****         }
1771:..\src/interruptions.c ****     }
1772:..\src/interruptions.c **** 
1773:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1774:..\src/interruptions.c **** 
1775:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 5684              		.loc 1 1775 0
 5685 0112 684B     		ldr	r3, .L463+8
 5686 0114 1B68     		ldr	r3, [r3]
 5687 0116 41F65732 		movw	r2, #6999
 5688 011a 9342     		cmp	r3, r2
 5689 011c 00F3E280 		bgt	.L368
 5690              		.loc 1 1775 0 is_stmt 0 discriminator 1
 5691 0120 654B     		ldr	r3, .L463+12
 5692 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5693 0124 042B     		cmp	r3, #4
 5694 0126 06D9     		bls	.L369
 5695              		.loc 1 1775 0 discriminator 2
 5696 0128 624B     		ldr	r3, .L463+8
 5697 012a 5B68     		ldr	r3, [r3, #4]
 5698 012c 41F65732 		movw	r2, #6999
 5699 0130 9342     		cmp	r3, r2
 5700 0132 00F3D780 		bgt	.L368
 5701              	.L369:
1776:..\src/interruptions.c ****         // PSoC is powered through uUSB
1777:..\src/interruptions.c ****         
1778:..\src/interruptions.c ****         tension_valid = FALSE;
 5702              		.loc 1 1778 0 is_stmt 1
 5703 0136 624B     		ldr	r3, .L463+20
 5704 0138 0022     		movs	r2, #0
 5705 013a 1A70     		strb	r2, [r3]
1779:..\src/interruptions.c ****             
1780:..\src/interruptions.c ****         if (interrupt_flag){
 5706              		.loc 1 1780 0
 5707 013c 5B4B     		ldr	r3, .L463
 5708 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5709 0140 002B     		cmp	r3, #0
 5710 0142 04D0     		beq	.L370
1781:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5711              		.loc 1 1781 0
 5712 0144 594B     		ldr	r3, .L463
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 135


 5713 0146 0022     		movs	r2, #0
 5714 0148 1A70     		strb	r2, [r3]
1782:..\src/interruptions.c ****             interrupt_manager();
 5715              		.loc 1 1782 0
 5716 014a FFF7FEFF 		bl	interrupt_manager
 5717              	.L370:
1783:..\src/interruptions.c ****         }
1784:..\src/interruptions.c ****         
1785:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5718              		.loc 1 1785 0
 5719 014e 5E4B     		ldr	r3, .L463+28
 5720 0150 0022     		movs	r2, #0
 5721 0152 1A70     		strb	r2, [r3]
 5722 0154 74E0     		b	.L371
 5723              	.L374:
1786:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5724              		.loc 1 1786 0
 5725 0156 5E4B     		ldr	r3, .L463+36
 5726 0158 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 5727 015c 002B     		cmp	r3, #0
 5728 015e 4BD0     		beq	.L372
1787:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5729              		.loc 1 1787 0
 5730 0160 594B     		ldr	r3, .L463+28
 5731 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5732 0164 1946     		mov	r1, r3
 5733 0166 5A4A     		ldr	r2, .L463+36
 5734 0168 0B46     		mov	r3, r1
 5735 016a DB00     		lsls	r3, r3, #3
 5736 016c 5B1A     		subs	r3, r3, r1
 5737 016e 1B01     		lsls	r3, r3, #4
 5738 0170 1344     		add	r3, r3, r2
 5739 0172 03F58773 		add	r3, r3, #270
 5740 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5741 0178 022B     		cmp	r3, #2
 5742 017a 29D0     		beq	.L373
1788:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5743              		.loc 1 1788 0 discriminator 1
 5744 017c 524B     		ldr	r3, .L463+28
 5745 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5746 0180 1946     		mov	r1, r3
 5747 0182 534A     		ldr	r2, .L463+36
 5748 0184 0B46     		mov	r3, r1
 5749 0186 DB00     		lsls	r3, r3, #3
 5750 0188 5B1A     		subs	r3, r3, r1
 5751 018a 1B01     		lsls	r3, r3, #4
 5752 018c 1344     		add	r3, r3, r2
 5753 018e 03F58773 		add	r3, r3, #270
 5754 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1787:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5755              		.loc 1 1787 0 discriminator 1
 5756 0194 032B     		cmp	r3, #3
 5757 0196 1BD0     		beq	.L373
1789:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5758              		.loc 1 1789 0
 5759 0198 4B4B     		ldr	r3, .L463+28
 5760 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 136


 5761 019c 1946     		mov	r1, r3
 5762 019e 4C4A     		ldr	r2, .L463+36
 5763 01a0 0B46     		mov	r3, r1
 5764 01a2 DB00     		lsls	r3, r3, #3
 5765 01a4 5B1A     		subs	r3, r3, r1
 5766 01a6 1B01     		lsls	r3, r3, #4
 5767 01a8 1344     		add	r3, r3, r2
 5768 01aa 03F58773 		add	r3, r3, #270
 5769 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1788:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5770              		.loc 1 1788 0
 5771 01b0 042B     		cmp	r3, #4
 5772 01b2 0DD0     		beq	.L373
1790:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 5773              		.loc 1 1790 0
 5774 01b4 444B     		ldr	r3, .L463+28
 5775 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5776 01b8 1946     		mov	r1, r3
 5777 01ba 454A     		ldr	r2, .L463+36
 5778 01bc 0B46     		mov	r3, r1
 5779 01be DB00     		lsls	r3, r3, #3
 5780 01c0 5B1A     		subs	r3, r3, r1
 5781 01c2 1B01     		lsls	r3, r3, #4
 5782 01c4 1344     		add	r3, r3, r2
 5783 01c6 03F58773 		add	r3, r3, #270
 5784 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1789:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5785              		.loc 1 1789 0
 5786 01cc 052B     		cmp	r3, #5
 5787 01ce 13D1     		bne	.L372
 5788              	.L373:
1791:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 5789              		.loc 1 1791 0
 5790 01d0 3D4B     		ldr	r3, .L463+28
 5791 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5792 01d4 3F4A     		ldr	r2, .L463+40
 5793 01d6 1B01     		lsls	r3, r3, #4
 5794 01d8 1344     		add	r3, r3, r2
 5795 01da 0C33     		adds	r3, r3, #12
 5796 01dc 0022     		movs	r2, #0
 5797 01de 1A70     		strb	r2, [r3]
1792:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 5798              		.loc 1 1792 0
 5799 01e0 394B     		ldr	r3, .L463+28
 5800 01e2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5801 01e4 384B     		ldr	r3, .L463+28
 5802 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5803 01e8 3A4A     		ldr	r2, .L463+40
 5804 01ea 1B01     		lsls	r3, r3, #4
 5805 01ec 1344     		add	r3, r3, r2
 5806 01ee 0C33     		adds	r3, r3, #12
 5807 01f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5808 01f2 1946     		mov	r1, r3
 5809 01f4 FFF7FEFF 		bl	enable_motor
 5810              	.L372:
1793:..\src/interruptions.c ****                     
1794:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 137


1795:..\src/interruptions.c ****             }
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****             // Assign dev_tension and reset current
1798:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 5811              		.loc 1 1798 0 discriminator 2
 5812 01f8 334B     		ldr	r3, .L463+28
 5813 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5814 01fc 1946     		mov	r1, r3
 5815 01fe 2D4B     		ldr	r3, .L463+8
 5816 0200 41F28832 		movw	r2, #5000
 5817 0204 43F82120 		str	r2, [r3, r1, lsl #2]
1799:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 5818              		.loc 1 1799 0 discriminator 2
 5819 0208 2F4B     		ldr	r3, .L463+28
 5820 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5821 020c 1946     		mov	r1, r3
 5822 020e 324A     		ldr	r2, .L463+44
 5823 0210 0B46     		mov	r3, r1
 5824 0212 DB00     		lsls	r3, r3, #3
 5825 0214 5B1A     		subs	r3, r3, r1
 5826 0216 1B01     		lsls	r3, r3, #4
 5827 0218 1344     		add	r3, r3, r2
 5828 021a 03F58873 		add	r3, r3, #272
 5829 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5830 0220 1946     		mov	r1, r3
 5831 0222 2E4A     		ldr	r2, .L463+48
 5832 0224 0B46     		mov	r3, r1
 5833 0226 5B00     		lsls	r3, r3, #1
 5834 0228 0B44     		add	r3, r3, r1
 5835 022a 1B01     		lsls	r3, r3, #4
 5836 022c 1344     		add	r3, r3, r2
 5837 022e 0C33     		adds	r3, r3, #12
 5838 0230 0022     		movs	r2, #0
 5839 0232 1A60     		str	r2, [r3]
1785:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5840              		.loc 1 1785 0 discriminator 2
 5841 0234 244B     		ldr	r3, .L463+28
 5842 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5843 0238 0133     		adds	r3, r3, #1
 5844 023a DAB2     		uxtb	r2, r3
 5845 023c 224B     		ldr	r3, .L463+28
 5846 023e 1A70     		strb	r2, [r3]
 5847              	.L371:
1785:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5848              		.loc 1 1785 0 is_stmt 0 discriminator 1
 5849 0240 214B     		ldr	r3, .L463+28
 5850 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5851 0244 012B     		cmp	r3, #1
 5852 0246 86D9     		bls	.L374
1800:..\src/interruptions.c ****         }
1801:..\src/interruptions.c ****         
1802:..\src/interruptions.c ****         // Reset emg
1803:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 5853              		.loc 1 1803 0 is_stmt 1
 5854 0248 1F4B     		ldr	r3, .L463+28
 5855 024a 0022     		movs	r2, #0
 5856 024c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 138


 5857 024e 0CE0     		b	.L375
 5858              	.L376:
1804:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 5859              		.loc 1 1804 0 discriminator 3
 5860 0250 1D4B     		ldr	r3, .L463+28
 5861 0252 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5862 0254 1946     		mov	r1, r3
 5863 0256 224B     		ldr	r3, .L463+52
 5864 0258 0022     		movs	r2, #0
 5865 025a 43F82120 		str	r2, [r3, r1, lsl #2]
1803:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 5866              		.loc 1 1803 0 discriminator 3
 5867 025e 1A4B     		ldr	r3, .L463+28
 5868 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5869 0262 0133     		adds	r3, r3, #1
 5870 0264 DAB2     		uxtb	r2, r3
 5871 0266 184B     		ldr	r3, .L463+28
 5872 0268 1A70     		strb	r2, [r3]
 5873              	.L375:
1803:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 5874              		.loc 1 1803 0 is_stmt 0 discriminator 1
 5875 026a 174B     		ldr	r3, .L463+28
 5876 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5877 026e 012B     		cmp	r3, #1
 5878 0270 EED9     		bls	.L376
1805:..\src/interruptions.c ****         }
1806:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 5879              		.loc 1 1806 0 is_stmt 1
 5880 0272 154B     		ldr	r3, .L463+28
 5881 0274 0022     		movs	r2, #0
 5882 0276 1A70     		strb	r2, [r3]
 5883 0278 0CE0     		b	.L377
 5884              	.L379:
1807:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5885              		.loc 1 1807 0 discriminator 4
 5886 027a 134B     		ldr	r3, .L463+28
 5887 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5888 027e 184A     		ldr	r2, .L463+52
 5889 0280 0233     		adds	r3, r3, #2
 5890 0282 0021     		movs	r1, #0
 5891 0284 42F82310 		str	r1, [r2, r3, lsl #2]
1806:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5892              		.loc 1 1806 0 discriminator 4
 5893 0288 0F4B     		ldr	r3, .L463+28
 5894 028a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5895 028c 0133     		adds	r3, r3, #1
 5896 028e DAB2     		uxtb	r2, r3
 5897 0290 0D4B     		ldr	r3, .L463+28
 5898 0292 1A70     		strb	r2, [r3]
 5899              	.L377:
1806:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5900              		.loc 1 1806 0 is_stmt 0 discriminator 1
 5901 0294 0E4B     		ldr	r3, .L463+36
 5902 0296 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 5903 029a 002B     		cmp	r3, #0
 5904 029c 00F01382 		beq	.L452
1806:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 139


 5905              		.loc 1 1806 0 discriminator 3
 5906 02a0 094B     		ldr	r3, .L463+28
 5907 02a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5908 02a4 052B     		cmp	r3, #5
 5909 02a6 E8D9     		bls	.L379
1775:..\src/interruptions.c ****         // PSoC is powered through uUSB
 5910              		.loc 1 1775 0 is_stmt 1
 5911 02a8 0DE2     		b	.L452
 5912              	.L464:
 5913 02aa 00BF     		.align	2
 5914              	.L463:
 5915 02ac 00000000 		.word	interrupt_flag
 5916 02b0 00000000 		.word	ADC_buf
 5917 02b4 00000000 		.word	dev_tension
 5918 02b8 00000000 		.word	NUM_OF_ANALOG_INPUTS
 5919 02bc 06000000 		.word	first_tension_valid.10539
 5920 02c0 00000000 		.word	tension_valid
 5921 02c4 78010000 		.word	count.10540
 5922 02c8 7A010000 		.word	idx.10542
 5923 02cc 00000000 		.word	pow_tension
 5924 02d0 00000000 		.word	c_mem
 5925 02d4 00000000 		.word	g_ref
 5926 02d8 00000000 		.word	g_mem
 5927 02dc 00000000 		.word	g_meas
 5928 02e0 00000000 		.word	g_emg_meas
 5929              	.L368:
1808:..\src/interruptions.c ****         }
1809:..\src/interruptions.c ****         
1810:..\src/interruptions.c ****     }
1811:..\src/interruptions.c ****     else {
1812:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1813:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1814:..\src/interruptions.c ****         
1815:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1816:..\src/interruptions.c ****         
1817:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 5930              		.loc 1 1817 0
 5931 02e4 9E4B     		ldr	r3, .L465
 5932 02e6 1B68     		ldr	r3, [r3]
 5933 02e8 B3F57A7F 		cmp	r3, #1000
 5934 02ec 0DD1     		bne	.L381
 5935              		.loc 1 1817 0 is_stmt 0 discriminator 1
 5936 02ee 9D4B     		ldr	r3, .L465+4
 5937 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5938 02f2 002B     		cmp	r3, #0
 5939 02f4 09D1     		bne	.L381
1818:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1819:..\src/interruptions.c ****             tension_valid = TRUE;   
 5940              		.loc 1 1819 0 is_stmt 1
 5941 02f6 9B4B     		ldr	r3, .L465+4
 5942 02f8 0122     		movs	r2, #1
 5943 02fa 1A70     		strb	r2, [r3]
1820:..\src/interruptions.c ****             count = 0;
 5944              		.loc 1 1820 0
 5945 02fc 9A4B     		ldr	r3, .L465+8
 5946 02fe 0022     		movs	r2, #0
 5947 0300 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 140


1821:..\src/interruptions.c ****             v_count = 0;
 5948              		.loc 1 1821 0
 5949 0302 974B     		ldr	r3, .L465
 5950 0304 0022     		movs	r2, #0
 5951 0306 1A60     		str	r2, [r3]
 5952 0308 2CE0     		b	.L382
 5953              	.L381:
1822:..\src/interruptions.c ****         }
1823:..\src/interruptions.c ****         else {  
1824:..\src/interruptions.c ****             // wait for battery voltage stabilization
1825:..\src/interruptions.c ****             if (v_count < 1000) {
 5954              		.loc 1 1825 0
 5955 030a 954B     		ldr	r3, .L465
 5956 030c 1B68     		ldr	r3, [r3]
 5957 030e B3F57A7F 		cmp	r3, #1000
 5958 0312 04D2     		bcs	.L383
1826:..\src/interruptions.c ****                 v_count = v_count + 1;
 5959              		.loc 1 1826 0
 5960 0314 924B     		ldr	r3, .L465
 5961 0316 1B68     		ldr	r3, [r3]
 5962 0318 0133     		adds	r3, r3, #1
 5963 031a 914A     		ldr	r2, .L465
 5964 031c 1360     		str	r3, [r2]
 5965              	.L383:
1827:..\src/interruptions.c ****             }
1828:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5966              		.loc 1 1828 0
 5967 031e 934B     		ldr	r3, .L465+12
 5968 0320 0022     		movs	r2, #0
 5969 0322 1A70     		strb	r2, [r3]
 5970 0324 1AE0     		b	.L384
 5971              	.L385:
1829:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5972              		.loc 1 1829 0 discriminator 3
 5973 0326 914B     		ldr	r3, .L465+12
 5974 0328 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5975 032a 1C46     		mov	r4, r3
 5976 032c 8F4B     		ldr	r3, .L465+12
 5977 032e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5978 0330 1A46     		mov	r2, r3
 5979 0332 8F4B     		ldr	r3, .L465+16
 5980 0334 53F82200 		ldr	r0, [r3, r2, lsl #2]
 5981 0338 8C4B     		ldr	r3, .L465+12
 5982 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5983 033c DB00     		lsls	r3, r3, #3
 5984 033e 8D4A     		ldr	r2, .L465+20
 5985 0340 1344     		add	r3, r3, r2
 5986 0342 1946     		mov	r1, r3
 5987 0344 FFF7FEFF 		bl	filter
 5988 0348 0246     		mov	r2, r0
 5989 034a 8B4B     		ldr	r3, .L465+24
 5990 034c 43F82420 		str	r2, [r3, r4, lsl #2]
1828:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5991              		.loc 1 1828 0 discriminator 3
 5992 0350 864B     		ldr	r3, .L465+12
 5993 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5994 0354 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 141


 5995 0356 DAB2     		uxtb	r2, r3
 5996 0358 844B     		ldr	r3, .L465+12
 5997 035a 1A70     		strb	r2, [r3]
 5998              	.L384:
1828:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5999              		.loc 1 1828 0 is_stmt 0 discriminator 1
 6000 035c 834B     		ldr	r3, .L465+12
 6001 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6002 0360 012B     		cmp	r3, #1
 6003 0362 E0D9     		bls	.L385
 6004              	.L382:
1830:..\src/interruptions.c ****             }
1831:..\src/interruptions.c ****         }
1832:..\src/interruptions.c **** 
1833:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6005              		.loc 1 1833 0 is_stmt 1
 6006 0364 814B     		ldr	r3, .L465+12
 6007 0366 0022     		movs	r2, #0
 6008 0368 1A70     		strb	r2, [r3]
 6009 036a 17E0     		b	.L386
 6010              	.L388:
1834:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6011              		.loc 1 1834 0
 6012 036c 7F4B     		ldr	r3, .L465+12
 6013 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6014 0370 1946     		mov	r1, r3
 6015 0372 824A     		ldr	r2, .L465+28
 6016 0374 0B46     		mov	r3, r1
 6017 0376 DB00     		lsls	r3, r3, #3
 6018 0378 5B1A     		subs	r3, r3, r1
 6019 037a 1B01     		lsls	r3, r3, #4
 6020 037c 1344     		add	r3, r3, r2
 6021 037e E133     		adds	r3, r3, #225
 6022 0380 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6023 0382 002B     		cmp	r3, #0
 6024 0384 04D0     		beq	.L387
1835:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6025              		.loc 1 1835 0
 6026 0386 794B     		ldr	r3, .L465+12
 6027 0388 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6028 038a 1846     		mov	r0, r3
 6029 038c FFF7FEFF 		bl	pwm_limit_search
 6030              	.L387:
1833:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6031              		.loc 1 1833 0 discriminator 2
 6032 0390 764B     		ldr	r3, .L465+12
 6033 0392 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6034 0394 0133     		adds	r3, r3, #1
 6035 0396 DAB2     		uxtb	r2, r3
 6036 0398 744B     		ldr	r3, .L465+12
 6037 039a 1A70     		strb	r2, [r3]
 6038              	.L386:
1833:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6039              		.loc 1 1833 0 is_stmt 0 discriminator 1
 6040 039c 734B     		ldr	r3, .L465+12
 6041 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6042 03a0 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 142


 6043 03a2 E3D9     		bls	.L388
1836:..\src/interruptions.c ****         }
1837:..\src/interruptions.c ****         
1838:..\src/interruptions.c ****         // Filter and Set currents
1839:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6044              		.loc 1 1839 0 is_stmt 1
 6045 03a4 754B     		ldr	r3, .L465+28
 6046 03a6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6047 03aa 002B     		cmp	r3, #0
 6048 03ac 22D1     		bne	.L389
1840:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6049              		.loc 1 1840 0
 6050 03ae 734B     		ldr	r3, .L465+28
 6051 03b0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6052 03b4 1C46     		mov	r4, r3
 6053 03b6 724B     		ldr	r3, .L465+32
 6054 03b8 B3F90230 		ldrsh	r3, [r3, #2]
 6055 03bc A3F5CE63 		sub	r3, r3, #1648
 6056 03c0 45F66A02 		movw	r2, #22634
 6057 03c4 02FB03F3 		mul	r3, r2, r3
 6058 03c8 5B13     		asrs	r3, r3, #13
 6059 03ca 1BB2     		sxth	r3, r3
 6060 03cc 1A46     		mov	r2, r3
 6061 03ce 6D4B     		ldr	r3, .L465+36
 6062 03d0 93F90030 		ldrsb	r3, [r3]
 6063 03d4 03FB02F3 		mul	r3, r3, r2
 6064 03d8 6B49     		ldr	r1, .L465+40
 6065 03da 1846     		mov	r0, r3
 6066 03dc FFF7FEFF 		bl	filter
 6067 03e0 0146     		mov	r1, r0
 6068 03e2 6A4A     		ldr	r2, .L465+44
 6069 03e4 2346     		mov	r3, r4
 6070 03e6 5B00     		lsls	r3, r3, #1
 6071 03e8 2344     		add	r3, r3, r4
 6072 03ea 1B01     		lsls	r3, r3, #4
 6073 03ec 1344     		add	r3, r3, r2
 6074 03ee 0C33     		adds	r3, r3, #12
 6075 03f0 1960     		str	r1, [r3]
 6076 03f2 1CE0     		b	.L390
 6077              	.L389:
1841:..\src/interruptions.c ****         } else { // [GS]
1842:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6078              		.loc 1 1842 0
 6079 03f4 614B     		ldr	r3, .L465+28
 6080 03f6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6081 03fa 1846     		mov	r0, r3
 6082 03fc 604B     		ldr	r3, .L465+32
 6083 03fe B3F90230 		ldrsh	r3, [r3, #2]
 6084 0402 A3F26362 		subw	r2, r3, #1635
 6085 0406 1346     		mov	r3, r2
 6086 0408 1B01     		lsls	r3, r3, #4
 6087 040a 9B1A     		subs	r3, r3, r2
 6088 040c 5B01     		lsls	r3, r3, #5
 6089 040e 1B11     		asrs	r3, r3, #4
 6090 0410 1BB2     		sxth	r3, r3
 6091 0412 1A46     		mov	r2, r3
 6092 0414 5B4B     		ldr	r3, .L465+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 143


 6093 0416 93F90030 		ldrsb	r3, [r3]
 6094 041a 03FB02F2 		mul	r2, r3, r2
 6095 041e 5B49     		ldr	r1, .L465+44
 6096 0420 0346     		mov	r3, r0
 6097 0422 5B00     		lsls	r3, r3, #1
 6098 0424 0344     		add	r3, r3, r0
 6099 0426 1B01     		lsls	r3, r3, #4
 6100 0428 0B44     		add	r3, r3, r1
 6101 042a 0C33     		adds	r3, r3, #12
 6102 042c 1A60     		str	r2, [r3]
 6103              	.L390:
1843:..\src/interruptions.c ****         }  
1844:..\src/interruptions.c **** 
1845:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1846:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6104              		.loc 1 1846 0
 6105 042e 534B     		ldr	r3, .L465+28
 6106 0430 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6107 0434 1D46     		mov	r5, r3
 6108 0436 514B     		ldr	r3, .L465+28
 6109 0438 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6110 043c 1946     		mov	r1, r3
 6111 043e 534A     		ldr	r2, .L465+44
 6112 0440 0B46     		mov	r3, r1
 6113 0442 5B00     		lsls	r3, r3, #1
 6114 0444 0B44     		add	r3, r3, r1
 6115 0446 1B01     		lsls	r3, r3, #4
 6116 0448 1344     		add	r3, r3, r2
 6117 044a 0C33     		adds	r3, r3, #12
 6118 044c 1C68     		ldr	r4, [r3]
 6119 044e 4B4B     		ldr	r3, .L465+28
 6120 0450 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6121 0454 1946     		mov	r1, r3
 6122 0456 4D4A     		ldr	r2, .L465+44
 6123 0458 0B46     		mov	r3, r1
 6124 045a 5B00     		lsls	r3, r3, #1
 6125 045c 0B44     		add	r3, r3, r1
 6126 045e 1B01     		lsls	r3, r3, #4
 6127 0460 1344     		add	r3, r3, r2
 6128 0462 1A68     		ldr	r2, [r3]
 6129 0464 454B     		ldr	r3, .L465+28
 6130 0466 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6131 046a 1846     		mov	r0, r3
 6132 046c 4349     		ldr	r1, .L465+28
 6133 046e 0346     		mov	r3, r0
 6134 0470 5B00     		lsls	r3, r3, #1
 6135 0472 0344     		add	r3, r3, r0
 6136 0474 1B01     		lsls	r3, r3, #4
 6137 0476 0B44     		add	r3, r3, r1
 6138 0478 03F29513 		addw	r3, r3, #405
 6139 047c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6140 047e 42FA03F6 		asr	r6, r2, r3
 6141 0482 3E4B     		ldr	r3, .L465+28
 6142 0484 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6143 0488 1946     		mov	r1, r3
 6144 048a 404A     		ldr	r2, .L465+44
 6145 048c 0B46     		mov	r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 144


 6146 048e 5B00     		lsls	r3, r3, #1
 6147 0490 0B44     		add	r3, r3, r1
 6148 0492 1B01     		lsls	r3, r3, #4
 6149 0494 1344     		add	r3, r3, r2
 6150 0496 1833     		adds	r3, r3, #24
 6151 0498 1A68     		ldr	r2, [r3]
 6152 049a 384B     		ldr	r3, .L465+28
 6153 049c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6154 04a0 1846     		mov	r0, r3
 6155 04a2 3649     		ldr	r1, .L465+28
 6156 04a4 0346     		mov	r3, r0
 6157 04a6 5B00     		lsls	r3, r3, #1
 6158 04a8 0344     		add	r3, r3, r0
 6159 04aa 1B01     		lsls	r3, r3, #4
 6160 04ac 0B44     		add	r3, r3, r1
 6161 04ae 03F29513 		addw	r3, r3, #405
 6162 04b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6163 04b4 42FA03FE 		asr	lr, r2, r3
 6164 04b8 354B     		ldr	r3, .L465+48
 6165 04ba 1A68     		ldr	r2, [r3]
 6166 04bc 2F4B     		ldr	r3, .L465+28
 6167 04be 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6168 04c2 1846     		mov	r0, r3
 6169 04c4 2D49     		ldr	r1, .L465+28
 6170 04c6 0346     		mov	r3, r0
 6171 04c8 5B00     		lsls	r3, r3, #1
 6172 04ca 0344     		add	r3, r3, r0
 6173 04cc 1B01     		lsls	r3, r3, #4
 6174 04ce 0B44     		add	r3, r3, r1
 6175 04d0 03F29513 		addw	r3, r3, #405
 6176 04d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6177 04d6 42FA03F3 		asr	r3, r2, r3
 6178 04da 7246     		mov	r2, lr
 6179 04dc 3146     		mov	r1, r6
 6180 04de 0020     		movs	r0, #0
 6181 04e0 FFF7FEFF 		bl	curr_estim
 6182 04e4 0346     		mov	r3, r0
 6183 04e6 E31A     		subs	r3, r4, r3
 6184 04e8 2A49     		ldr	r1, .L465+52
 6185 04ea 1846     		mov	r0, r3
 6186 04ec FFF7FEFF 		bl	filter
 6187 04f0 0346     		mov	r3, r0
 6188 04f2 1BB2     		sxth	r3, r3
 6189 04f4 1946     		mov	r1, r3
 6190 04f6 254A     		ldr	r2, .L465+44
 6191 04f8 2B46     		mov	r3, r5
 6192 04fa 5B00     		lsls	r3, r3, #1
 6193 04fc 2B44     		add	r3, r3, r5
 6194 04fe 1B01     		lsls	r3, r3, #4
 6195 0500 1344     		add	r3, r3, r2
 6196 0502 1033     		adds	r3, r3, #16
 6197 0504 1960     		str	r1, [r3]
1847:..\src/interruptions.c ****         
1848:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1849:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6198              		.loc 1 1849 0
 6199 0506 244B     		ldr	r3, .L465+56
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 145


 6200 0508 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6201 050a 042B     		cmp	r3, #4
 6202 050c 40F2D180 		bls	.L391
1850:..\src/interruptions.c ****             // Filter and Set currents
1851:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6203              		.loc 1 1851 0
 6204 0510 1A4B     		ldr	r3, .L465+28
 6205 0512 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6206 0516 002B     		cmp	r3, #0
 6207 0518 42D1     		bne	.L392
1852:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6208              		.loc 1 1852 0
 6209 051a 184B     		ldr	r3, .L465+28
 6210 051c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6211 0520 1C46     		mov	r4, r3
 6212 0522 174B     		ldr	r3, .L465+32
 6213 0524 B3F90A30 		ldrsh	r3, [r3, #10]
 6214 0528 A3F5CE63 		sub	r3, r3, #1648
 6215 052c 45F66A02 		movw	r2, #22634
 6216 0530 02FB03F3 		mul	r3, r2, r3
 6217 0534 5B13     		asrs	r3, r3, #13
 6218 0536 1BB2     		sxth	r3, r3
 6219 0538 1A46     		mov	r2, r3
 6220 053a 124B     		ldr	r3, .L465+36
 6221 053c 93F90030 		ldrsb	r3, [r3]
 6222 0540 03FB02F3 		mul	r3, r3, r2
 6223 0544 1549     		ldr	r1, .L465+60
 6224 0546 1846     		mov	r0, r3
 6225 0548 FFF7FEFF 		bl	filter
 6226 054c 0146     		mov	r1, r0
 6227 054e 0F4A     		ldr	r2, .L465+44
 6228 0550 2346     		mov	r3, r4
 6229 0552 5B00     		lsls	r3, r3, #1
 6230 0554 2344     		add	r3, r3, r4
 6231 0556 1B01     		lsls	r3, r3, #4
 6232 0558 1344     		add	r3, r3, r2
 6233 055a 0C33     		adds	r3, r3, #12
 6234 055c 1960     		str	r1, [r3]
 6235 055e 3CE0     		b	.L393
 6236              	.L466:
 6237              		.align	2
 6238              	.L465:
 6239 0560 7C010000 		.word	v_count.10541
 6240 0564 00000000 		.word	tension_valid
 6241 0568 78010000 		.word	count.10540
 6242 056c 7A010000 		.word	idx.10542
 6243 0570 00000000 		.word	dev_tension
 6244 0574 00000000 		.word	filt_v
 6245 0578 00000000 		.word	dev_tension_f
 6246 057c 00000000 		.word	g_mem
 6247 0580 00000000 		.word	ADC_buf
 6248 0584 00000000 		.word	pwm_sign
 6249 0588 00000000 		.word	filt_i
 6250 058c 00000000 		.word	g_meas
 6251 0590 00000000 		.word	g_ref
 6252 0594 00000000 		.word	filt_curr_diff
 6253 0598 00000000 		.word	NUM_OF_ANALOG_INPUTS
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 146


 6254 059c 08000000 		.word	filt_i+8
 6255              	.L392:
1853:..\src/interruptions.c ****             } else { // [GS]
1854:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6256              		.loc 1 1854 0
 6257 05a0 BC4B     		ldr	r3, .L467
 6258 05a2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6259 05a6 1846     		mov	r0, r3
 6260 05a8 BB4B     		ldr	r3, .L467+4
 6261 05aa B3F90A30 		ldrsh	r3, [r3, #10]
 6262 05ae A3F26362 		subw	r2, r3, #1635
 6263 05b2 1346     		mov	r3, r2
 6264 05b4 1B01     		lsls	r3, r3, #4
 6265 05b6 9B1A     		subs	r3, r3, r2
 6266 05b8 5B01     		lsls	r3, r3, #5
 6267 05ba 1B11     		asrs	r3, r3, #4
 6268 05bc 1BB2     		sxth	r3, r3
 6269 05be 1A46     		mov	r2, r3
 6270 05c0 B64B     		ldr	r3, .L467+8
 6271 05c2 93F90030 		ldrsb	r3, [r3]
 6272 05c6 03FB02F2 		mul	r2, r3, r2
 6273 05ca B549     		ldr	r1, .L467+12
 6274 05cc 0346     		mov	r3, r0
 6275 05ce 5B00     		lsls	r3, r3, #1
 6276 05d0 0344     		add	r3, r3, r0
 6277 05d2 1B01     		lsls	r3, r3, #4
 6278 05d4 0B44     		add	r3, r3, r1
 6279 05d6 0C33     		adds	r3, r3, #12
 6280 05d8 1A60     		str	r2, [r3]
 6281              	.L393:
1855:..\src/interruptions.c ****             }  
1856:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
1857:..\src/interruptions.c ****             
1858:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6282              		.loc 1 1858 0
 6283 05da AE4B     		ldr	r3, .L467
 6284 05dc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6285 05e0 1D46     		mov	r5, r3
 6286 05e2 AC4B     		ldr	r3, .L467
 6287 05e4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6288 05e8 1946     		mov	r1, r3
 6289 05ea AD4A     		ldr	r2, .L467+12
 6290 05ec 0B46     		mov	r3, r1
 6291 05ee 5B00     		lsls	r3, r3, #1
 6292 05f0 0B44     		add	r3, r3, r1
 6293 05f2 1B01     		lsls	r3, r3, #4
 6294 05f4 1344     		add	r3, r3, r2
 6295 05f6 0C33     		adds	r3, r3, #12
 6296 05f8 1C68     		ldr	r4, [r3]
 6297 05fa A64B     		ldr	r3, .L467
 6298 05fc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6299 0600 1946     		mov	r1, r3
 6300 0602 A74A     		ldr	r2, .L467+12
 6301 0604 0B46     		mov	r3, r1
 6302 0606 5B00     		lsls	r3, r3, #1
 6303 0608 0B44     		add	r3, r3, r1
 6304 060a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 147


 6305 060c 1344     		add	r3, r3, r2
 6306 060e 1A68     		ldr	r2, [r3]
 6307 0610 A04B     		ldr	r3, .L467
 6308 0612 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6309 0616 1846     		mov	r0, r3
 6310 0618 9E49     		ldr	r1, .L467
 6311 061a 0346     		mov	r3, r0
 6312 061c 5B00     		lsls	r3, r3, #1
 6313 061e 0344     		add	r3, r3, r0
 6314 0620 1B01     		lsls	r3, r3, #4
 6315 0622 0B44     		add	r3, r3, r1
 6316 0624 03F29513 		addw	r3, r3, #405
 6317 0628 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6318 062a 42FA03F6 		asr	r6, r2, r3
 6319 062e 994B     		ldr	r3, .L467
 6320 0630 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6321 0634 1946     		mov	r1, r3
 6322 0636 9A4A     		ldr	r2, .L467+12
 6323 0638 0B46     		mov	r3, r1
 6324 063a 5B00     		lsls	r3, r3, #1
 6325 063c 0B44     		add	r3, r3, r1
 6326 063e 1B01     		lsls	r3, r3, #4
 6327 0640 1344     		add	r3, r3, r2
 6328 0642 1833     		adds	r3, r3, #24
 6329 0644 1A68     		ldr	r2, [r3]
 6330 0646 934B     		ldr	r3, .L467
 6331 0648 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6332 064c 1846     		mov	r0, r3
 6333 064e 9149     		ldr	r1, .L467
 6334 0650 0346     		mov	r3, r0
 6335 0652 5B00     		lsls	r3, r3, #1
 6336 0654 0344     		add	r3, r3, r0
 6337 0656 1B01     		lsls	r3, r3, #4
 6338 0658 0B44     		add	r3, r3, r1
 6339 065a 03F29513 		addw	r3, r3, #405
 6340 065e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6341 0660 42FA03FE 		asr	lr, r2, r3
 6342 0664 8F4B     		ldr	r3, .L467+16
 6343 0666 1A69     		ldr	r2, [r3, #16]
 6344 0668 8A4B     		ldr	r3, .L467
 6345 066a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6346 066e 1846     		mov	r0, r3
 6347 0670 8849     		ldr	r1, .L467
 6348 0672 0346     		mov	r3, r0
 6349 0674 5B00     		lsls	r3, r3, #1
 6350 0676 0344     		add	r3, r3, r0
 6351 0678 1B01     		lsls	r3, r3, #4
 6352 067a 0B44     		add	r3, r3, r1
 6353 067c 03F29513 		addw	r3, r3, #405
 6354 0680 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6355 0682 42FA03F3 		asr	r3, r2, r3
 6356 0686 7246     		mov	r2, lr
 6357 0688 3146     		mov	r1, r6
 6358 068a 0120     		movs	r0, #1
 6359 068c FFF7FEFF 		bl	curr_estim
 6360 0690 0346     		mov	r3, r0
 6361 0692 E31A     		subs	r3, r4, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 148


 6362 0694 8449     		ldr	r1, .L467+20
 6363 0696 1846     		mov	r0, r3
 6364 0698 FFF7FEFF 		bl	filter
 6365 069c 0346     		mov	r3, r0
 6366 069e 1BB2     		sxth	r3, r3
 6367 06a0 1946     		mov	r1, r3
 6368 06a2 7F4A     		ldr	r2, .L467+12
 6369 06a4 2B46     		mov	r3, r5
 6370 06a6 5B00     		lsls	r3, r3, #1
 6371 06a8 2B44     		add	r3, r3, r5
 6372 06aa 1B01     		lsls	r3, r3, #4
 6373 06ac 1344     		add	r3, r3, r2
 6374 06ae 1033     		adds	r3, r3, #16
 6375 06b0 1960     		str	r1, [r3]
 6376              	.L391:
1859:..\src/interruptions.c ****         }
1860:..\src/interruptions.c ****     
1861:..\src/interruptions.c ****         // Check Interrupt 
1862:..\src/interruptions.c ****     
1863:..\src/interruptions.c ****         if (interrupt_flag){
 6377              		.loc 1 1863 0
 6378 06b2 7E4B     		ldr	r3, .L467+24
 6379 06b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6380 06b6 002B     		cmp	r3, #0
 6381 06b8 06D0     		beq	.L380
1864:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6382              		.loc 1 1864 0
 6383 06ba 7C4B     		ldr	r3, .L467+24
 6384 06bc 0022     		movs	r2, #0
 6385 06be 1A70     		strb	r2, [r3]
1865:..\src/interruptions.c ****             interrupt_manager();
 6386              		.loc 1 1865 0
 6387 06c0 FFF7FEFF 		bl	interrupt_manager
 6388 06c4 00E0     		b	.L380
 6389              	.L452:
1775:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6390              		.loc 1 1775 0
 6391 06c6 00BF     		nop
 6392              	.L380:
1866:..\src/interruptions.c ****         }
1867:..\src/interruptions.c **** 
1868:..\src/interruptions.c ****     }
1869:..\src/interruptions.c ****     
1870:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1871:..\src/interruptions.c ****         
1872:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1873:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6393              		.loc 1 1873 0
 6394 06c8 794B     		ldr	r3, .L467+28
 6395 06ca 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 6396 06ce 002B     		cmp	r3, #0
 6397 06d0 05D1     		bne	.L394
1874:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6398              		.loc 1 1874 0
 6399 06d2 784B     		ldr	r3, .L467+32
 6400 06d4 0022     		movs	r2, #0
 6401 06d6 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 149


1875:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6402              		.loc 1 1875 0
 6403 06d8 774B     		ldr	r3, .L467+36
 6404 06da 0022     		movs	r2, #0
 6405 06dc 1A70     		strb	r2, [r3]
 6406              	.L394:
1876:..\src/interruptions.c ****     }
1877:..\src/interruptions.c **** 
1878:..\src/interruptions.c ****     // EMG 1 calibration state machine
1879:..\src/interruptions.c ****    
1880:..\src/interruptions.c ****     // Calibration state machine
1881:..\src/interruptions.c ****     switch(emg_1_status) {
 6407              		.loc 1 1881 0
 6408 06de 754B     		ldr	r3, .L467+32
 6409 06e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6410 06e2 032B     		cmp	r3, #3
 6411 06e4 00F2CF80 		bhi	.L453
 6412 06e8 01A2     		adr	r2, .L397
 6413 06ea 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6414 06ee 00BF     		.p2align 2
 6415              	.L397:
 6416 06f0 01070000 		.word	.L396+1
 6417 06f4 8B070000 		.word	.L398+1
 6418 06f8 A1070000 		.word	.L399+1
 6419 06fc DD070000 		.word	.L400+1
 6420              		.p2align 1
 6421              	.L396:
1882:..\src/interruptions.c ****         case NORMAL: // normal execution
1883:..\src/interruptions.c ****             i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range to 
 6422              		.loc 1 1883 0
 6423 0700 6B4B     		ldr	r3, .L467+28
 6424 0702 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6425 0706 0233     		adds	r3, r3, #2
 6426 0708 634A     		ldr	r2, .L467+4
 6427 070a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6428 070e A3F26763 		subw	r3, r3, #1639
 6429 0712 5722     		movs	r2, #87
 6430 0714 02FB03F3 		mul	r3, r2, r3
 6431 0718 5B11     		asrs	r3, r3, #5
 6432 071a 7B60     		str	r3, [r7, #4]
1884:..\src/interruptions.c ****             //i_aux = (int32)(ADC_buf[2 + c_mem.switch_emg]);
1885:..\src/interruptions.c ****             if (i_aux < 0) 
 6433              		.loc 1 1885 0
 6434 071c 7B68     		ldr	r3, [r7, #4]
 6435 071e 002B     		cmp	r3, #0
 6436 0720 01DA     		bge	.L401
1886:..\src/interruptions.c ****                 i_aux = 0;
 6437              		.loc 1 1886 0
 6438 0722 0023     		movs	r3, #0
 6439 0724 7B60     		str	r3, [r7, #4]
 6440              	.L401:
1887:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6441              		.loc 1 1887 0
 6442 0726 6549     		ldr	r1, .L467+40
 6443 0728 7868     		ldr	r0, [r7, #4]
 6444 072a FFF7FEFF 		bl	filter
 6445 072e 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 150


1888:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6446              		.loc 1 1888 0
 6447 0730 7B68     		ldr	r3, [r7, #4]
 6448 0732 9B02     		lsls	r3, r3, #10
 6449 0734 1A46     		mov	r2, r3
 6450 0736 574B     		ldr	r3, .L467
 6451 0738 D3F8F431 		ldr	r3, [r3, #500]
 6452 073c B2FBF3F3 		udiv	r3, r2, r3
 6453 0740 7B60     		str	r3, [r7, #4]
1889:..\src/interruptions.c **** 
1890:..\src/interruptions.c ****             if (interrupt_flag){
 6454              		.loc 1 1890 0
 6455 0742 5A4B     		ldr	r3, .L467+24
 6456 0744 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6457 0746 002B     		cmp	r3, #0
 6458 0748 04D0     		beq	.L402
1891:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6459              		.loc 1 1891 0
 6460 074a 584B     		ldr	r3, .L467+24
 6461 074c 0022     		movs	r2, #0
 6462 074e 1A70     		strb	r2, [r3]
1892:..\src/interruptions.c ****                 interrupt_manager();
 6463              		.loc 1 1892 0
 6464 0750 FFF7FEFF 		bl	interrupt_manager
 6465              	.L402:
1893:..\src/interruptions.c ****             }
1894:..\src/interruptions.c ****             //Saturation
1895:..\src/interruptions.c ****             if (i_aux < 0)
 6466              		.loc 1 1895 0
 6467 0754 7B68     		ldr	r3, [r7, #4]
 6468 0756 002B     		cmp	r3, #0
 6469 0758 02DA     		bge	.L403
1896:..\src/interruptions.c ****                 i_aux = 0;
 6470              		.loc 1 1896 0
 6471 075a 0023     		movs	r3, #0
 6472 075c 7B60     		str	r3, [r7, #4]
 6473 075e 06E0     		b	.L404
 6474              	.L403:
1897:..\src/interruptions.c ****             else 
1898:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6475              		.loc 1 1898 0
 6476 0760 7B68     		ldr	r3, [r7, #4]
 6477 0762 B3F5806F 		cmp	r3, #1024
 6478 0766 02DD     		ble	.L404
1899:..\src/interruptions.c ****                     i_aux = 1024;
 6479              		.loc 1 1899 0
 6480 0768 4FF48063 		mov	r3, #1024
 6481 076c 7B60     		str	r3, [r7, #4]
 6482              	.L404:
1900:..\src/interruptions.c ****             
1901:..\src/interruptions.c ****             g_emg_meas.emg[0] = i_aux;
 6483              		.loc 1 1901 0
 6484 076e 544A     		ldr	r2, .L467+44
 6485 0770 7B68     		ldr	r3, [r7, #4]
 6486 0772 1360     		str	r3, [r2]
1902:..\src/interruptions.c **** 
1903:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 151


 6487              		.loc 1 1903 0
 6488 0774 4D4B     		ldr	r3, .L467+24
 6489 0776 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6490 0778 002B     		cmp	r3, #0
 6491 077a 00F08680 		beq	.L454
1904:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6492              		.loc 1 1904 0
 6493 077e 4B4B     		ldr	r3, .L467+24
 6494 0780 0022     		movs	r2, #0
 6495 0782 1A70     		strb	r2, [r3]
1905:..\src/interruptions.c ****                 interrupt_manager();
 6496              		.loc 1 1905 0
 6497 0784 FFF7FEFF 		bl	interrupt_manager
1906:..\src/interruptions.c ****             }
1907:..\src/interruptions.c ****             
1908:..\src/interruptions.c ****             break;
 6498              		.loc 1 1908 0
 6499 0788 7FE0     		b	.L454
 6500              	.L398:
1909:..\src/interruptions.c **** 
1910:..\src/interruptions.c ****         case RESET: // reset variables
1911:..\src/interruptions.c ****             emg_counter_1 = 0;
 6501              		.loc 1 1911 0
 6502 078a 4E4B     		ldr	r3, .L467+48
 6503 078c 0022     		movs	r2, #0
 6504 078e 1A80     		strh	r2, [r3]	@ movhi
1912:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 6505              		.loc 1 1912 0
 6506 0790 404B     		ldr	r3, .L467
 6507 0792 0022     		movs	r2, #0
 6508 0794 C3F8F421 		str	r2, [r3, #500]
1913:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6509              		.loc 1 1913 0
 6510 0798 464B     		ldr	r3, .L467+32
 6511 079a 0222     		movs	r2, #2
 6512 079c 1A70     		strb	r2, [r3]
1914:..\src/interruptions.c ****             break;
 6513              		.loc 1 1914 0
 6514 079e 96E0     		b	.L406
 6515              	.L399:
1915:..\src/interruptions.c **** 
1916:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1917:..\src/interruptions.c ****             emg_counter_1++;
 6516              		.loc 1 1917 0
 6517 07a0 484B     		ldr	r3, .L467+48
 6518 07a2 1B88     		ldrh	r3, [r3]
 6519 07a4 0133     		adds	r3, r3, #1
 6520 07a6 9AB2     		uxth	r2, r3
 6521 07a8 464B     		ldr	r3, .L467+48
 6522 07aa 1A80     		strh	r2, [r3]	@ movhi
1918:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6523              		.loc 1 1918 0
 6524 07ac 454B     		ldr	r3, .L467+48
 6525 07ae 1B88     		ldrh	r3, [r3]
 6526 07b0 B3F5FA7F 		cmp	r3, #500
 6527 07b4 6BD1     		bne	.L455
1919:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 152


 6528              		.loc 1 1919 0
 6529 07b6 434B     		ldr	r3, .L467+48
 6530 07b8 0022     		movs	r2, #0
 6531 07ba 1A80     		strh	r2, [r3]	@ movhi
1920:..\src/interruptions.c ****                 LED_control(1);
 6532              		.loc 1 1920 0
 6533 07bc 0120     		movs	r0, #1
 6534 07be FFF7FEFF 		bl	LED_control
1921:..\src/interruptions.c **** 				
1922:..\src/interruptions.c ****                 if (interrupt_flag){
 6535              		.loc 1 1922 0
 6536 07c2 3A4B     		ldr	r3, .L467+24
 6537 07c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6538 07c6 002B     		cmp	r3, #0
 6539 07c8 04D0     		beq	.L408
1923:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6540              		.loc 1 1923 0
 6541 07ca 384B     		ldr	r3, .L467+24
 6542 07cc 0022     		movs	r2, #0
 6543 07ce 1A70     		strb	r2, [r3]
1924:..\src/interruptions.c ****                     interrupt_manager();
 6544              		.loc 1 1924 0
 6545 07d0 FFF7FEFF 		bl	interrupt_manager
 6546              	.L408:
1925:..\src/interruptions.c ****                 }
1926:..\src/interruptions.c ****                 
1927:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 6547              		.loc 1 1927 0
 6548 07d4 374B     		ldr	r3, .L467+32
 6549 07d6 0322     		movs	r2, #3
 6550 07d8 1A70     		strb	r2, [r3]
1928:..\src/interruptions.c ****             }
1929:..\src/interruptions.c ****             break;
 6551              		.loc 1 1929 0
 6552 07da 58E0     		b	.L455
 6553              	.L400:
1930:..\src/interruptions.c **** 
1931:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1932:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1933:..\src/interruptions.c ****             emg_counter_1++;
 6554              		.loc 1 1933 0
 6555 07dc 394B     		ldr	r3, .L467+48
 6556 07de 1B88     		ldrh	r3, [r3]
 6557 07e0 0133     		adds	r3, r3, #1
 6558 07e2 9AB2     		uxth	r2, r3
 6559 07e4 374B     		ldr	r3, .L467+48
 6560 07e6 1A80     		strh	r2, [r3]	@ movhi
1934:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6561              		.loc 1 1934 0
 6562 07e8 314B     		ldr	r3, .L467+28
 6563 07ea 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6564 07ee 0233     		adds	r3, r3, #2
 6565 07f0 294A     		ldr	r2, .L467+4
 6566 07f2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6567 07f6 002B     		cmp	r3, #0
 6568 07f8 07DA     		bge	.L409
1935:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 153


 6569              		.loc 1 1935 0
 6570 07fa 2D4B     		ldr	r3, .L467+28
 6571 07fc 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6572 0800 0233     		adds	r3, r3, #2
 6573 0802 254A     		ldr	r2, .L467+4
 6574 0804 0021     		movs	r1, #0
 6575 0806 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6576              	.L409:
1936:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6577              		.loc 1 1936 0
 6578 080a 294B     		ldr	r3, .L467+28
 6579 080c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6580 0810 0233     		adds	r3, r3, #2
 6581 0812 214A     		ldr	r2, .L467+4
 6582 0814 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6583 0818 2849     		ldr	r1, .L467+40
 6584 081a 1846     		mov	r0, r3
 6585 081c FFF7FEFF 		bl	filter
 6586 0820 0246     		mov	r2, r0
 6587 0822 1C4B     		ldr	r3, .L467
 6588 0824 D3F8F431 		ldr	r3, [r3, #500]
 6589 0828 1344     		add	r3, r3, r2
 6590 082a 1A4A     		ldr	r2, .L467
 6591 082c C2F8F431 		str	r3, [r2, #500]
1937:..\src/interruptions.c ****             
1938:..\src/interruptions.c ****             if (interrupt_flag){
 6592              		.loc 1 1938 0
 6593 0830 1E4B     		ldr	r3, .L467+24
 6594 0832 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6595 0834 002B     		cmp	r3, #0
 6596 0836 04D0     		beq	.L410
1939:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6597              		.loc 1 1939 0
 6598 0838 1C4B     		ldr	r3, .L467+24
 6599 083a 0022     		movs	r2, #0
 6600 083c 1A70     		strb	r2, [r3]
1940:..\src/interruptions.c ****                 interrupt_manager();
 6601              		.loc 1 1940 0
 6602 083e FFF7FEFF 		bl	interrupt_manager
 6603              	.L410:
1941:..\src/interruptions.c ****             }
1942:..\src/interruptions.c ****             
1943:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6604              		.loc 1 1943 0
 6605 0842 204B     		ldr	r3, .L467+48
 6606 0844 1B88     		ldrh	r3, [r3]
 6607 0846 B3F57A7F 		cmp	r3, #1000
 6608 084a 3FD1     		bne	.L456
1944:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6609              		.loc 1 1944 0
 6610 084c 114B     		ldr	r3, .L467
 6611 084e D3F8F431 		ldr	r3, [r3, #500]
 6612 0852 1D4A     		ldr	r2, .L467+52
 6613 0854 A2FB0323 		umull	r2, r3, r2, r3
 6614 0858 9B09     		lsrs	r3, r3, #6
 6615 085a 0E4A     		ldr	r2, .L467
 6616 085c C2F8F431 		str	r3, [r2, #500]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 154


1945:..\src/interruptions.c **** 
1946:..\src/interruptions.c ****                 if (interrupt_flag){
 6617              		.loc 1 1946 0
 6618 0860 124B     		ldr	r3, .L467+24
 6619 0862 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6620 0864 002B     		cmp	r3, #0
 6621 0866 04D0     		beq	.L412
1947:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6622              		.loc 1 1947 0
 6623 0868 104B     		ldr	r3, .L467+24
 6624 086a 0022     		movs	r2, #0
 6625 086c 1A70     		strb	r2, [r3]
1948:..\src/interruptions.c ****                     interrupt_manager();
 6626              		.loc 1 1948 0
 6627 086e FFF7FEFF 		bl	interrupt_manager
 6628              	.L412:
1949:..\src/interruptions.c ****                 }                    
1950:..\src/interruptions.c ****                 
1951:..\src/interruptions.c ****                 LED_control(0);
 6629              		.loc 1 1951 0
 6630 0872 0020     		movs	r0, #0
 6631 0874 FFF7FEFF 		bl	LED_control
1952:..\src/interruptions.c **** 				
1953:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6632              		.loc 1 1953 0
 6633 0878 124B     		ldr	r3, .L467+48
 6634 087a 0022     		movs	r2, #0
 6635 087c 1A80     		strh	r2, [r3]	@ movhi
1954:..\src/interruptions.c **** 
1955:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6636              		.loc 1 1955 0
 6637 087e 0D4B     		ldr	r3, .L467+32
 6638 0880 0022     		movs	r2, #0
 6639 0882 1A70     		strb	r2, [r3]
1956:..\src/interruptions.c ****             }
1957:..\src/interruptions.c ****             break;
 6640              		.loc 1 1957 0
 6641 0884 22E0     		b	.L456
 6642              	.L453:
1958:..\src/interruptions.c **** 
1959:..\src/interruptions.c ****         default:
1960:..\src/interruptions.c ****             break;
 6643              		.loc 1 1960 0
 6644 0886 00BF     		nop
 6645 0888 21E0     		b	.L406
 6646              	.L454:
1908:..\src/interruptions.c **** 
 6647              		.loc 1 1908 0
 6648 088a 00BF     		nop
 6649 088c 1FE0     		b	.L406
 6650              	.L455:
1929:..\src/interruptions.c **** 
 6651              		.loc 1 1929 0
 6652 088e 00BF     		nop
 6653 0890 1DE0     		b	.L406
 6654              	.L468:
 6655 0892 00BF     		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 155


 6656              	.L467:
 6657 0894 00000000 		.word	g_mem
 6658 0898 00000000 		.word	ADC_buf
 6659 089c 00000000 		.word	pwm_sign
 6660 08a0 00000000 		.word	g_meas
 6661 08a4 00000000 		.word	g_ref
 6662 08a8 08000000 		.word	filt_curr_diff+8
 6663 08ac 00000000 		.word	interrupt_flag
 6664 08b0 00000000 		.word	c_mem
 6665 08b4 00000000 		.word	emg_1_status
 6666 08b8 00000000 		.word	emg_2_status
 6667 08bc 00000000 		.word	filt_emg
 6668 08c0 00000000 		.word	g_emg_meas
 6669 08c4 80010000 		.word	emg_counter_1.10537
 6670 08c8 D34D6210 		.word	274877907
 6671              	.L456:
1957:..\src/interruptions.c **** 
 6672              		.loc 1 1957 0
 6673 08cc 00BF     		nop
 6674              	.L406:
1961:..\src/interruptions.c ****     }
1962:..\src/interruptions.c **** 
1963:..\src/interruptions.c ****     if (interrupt_flag){
 6675              		.loc 1 1963 0
 6676 08ce 854B     		ldr	r3, .L469
 6677 08d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6678 08d2 002B     		cmp	r3, #0
 6679 08d4 04D0     		beq	.L413
1964:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6680              		.loc 1 1964 0
 6681 08d6 834B     		ldr	r3, .L469
 6682 08d8 0022     		movs	r2, #0
 6683 08da 1A70     		strb	r2, [r3]
1965:..\src/interruptions.c ****         interrupt_manager();
 6684              		.loc 1 1965 0
 6685 08dc FFF7FEFF 		bl	interrupt_manager
 6686              	.L413:
1966:..\src/interruptions.c ****     }
1967:..\src/interruptions.c ****     // EMG 2 calibration state machine
1968:..\src/interruptions.c ****     switch(emg_2_status) {
 6687              		.loc 1 1968 0
 6688 08e0 814B     		ldr	r3, .L469+4
 6689 08e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6690 08e4 052B     		cmp	r3, #5
 6691 08e6 00F2A681 		bhi	.L457
 6692 08ea 01A2     		adr	r2, .L416
 6693 08ec 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6694              		.p2align 2
 6695              	.L416:
 6696 08f0 09090000 		.word	.L415+1
 6697 08f4 81090000 		.word	.L417+1
 6698 08f8 A9090000 		.word	.L418+1
 6699 08fc E7090000 		.word	.L419+1
 6700 0900 990A0000 		.word	.L420+1
 6701 0904 AB0A0000 		.word	.L421+1
 6702              		.p2align 1
 6703              	.L415:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 156


1969:..\src/interruptions.c ****         case NORMAL: // normal execution
1970:..\src/interruptions.c ****             i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1640) * 87) >> 5;  //map range to 
 6704              		.loc 1 1970 0
 6705 0908 784B     		ldr	r3, .L469+8
 6706 090a 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6707 090e C3F10303 		rsb	r3, r3, #3
 6708 0912 774A     		ldr	r2, .L469+12
 6709 0914 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6710 0918 A3F5CD63 		sub	r3, r3, #1640
 6711 091c 5722     		movs	r2, #87
 6712 091e 02FB03F3 		mul	r3, r2, r3
 6713 0922 5B11     		asrs	r3, r3, #5
 6714 0924 7B60     		str	r3, [r7, #4]
1971:..\src/interruptions.c ****             //i_aux = (int32)(ADC_buf[3 - c_mem.switch_emg]);
1972:..\src/interruptions.c ****                 if (i_aux < 0)
 6715              		.loc 1 1972 0
 6716 0926 7B68     		ldr	r3, [r7, #4]
 6717 0928 002B     		cmp	r3, #0
 6718 092a 01DA     		bge	.L422
1973:..\src/interruptions.c ****                     i_aux = 0;
 6719              		.loc 1 1973 0
 6720 092c 0023     		movs	r3, #0
 6721 092e 7B60     		str	r3, [r7, #4]
 6722              	.L422:
1974:..\src/interruptions.c ****                 i_aux = filter(i_aux, &filt_emg[1]);
 6723              		.loc 1 1974 0
 6724 0930 7049     		ldr	r1, .L469+16
 6725 0932 7868     		ldr	r0, [r7, #4]
 6726 0934 FFF7FEFF 		bl	filter
 6727 0938 7860     		str	r0, [r7, #4]
1975:..\src/interruptions.c ****                 i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 6728              		.loc 1 1975 0
 6729 093a 7B68     		ldr	r3, [r7, #4]
 6730 093c 9B02     		lsls	r3, r3, #10
 6731 093e 1A46     		mov	r2, r3
 6732 0940 6D4B     		ldr	r3, .L469+20
 6733 0942 D3F8F831 		ldr	r3, [r3, #504]
 6734 0946 B2FBF3F3 		udiv	r3, r2, r3
 6735 094a 7B60     		str	r3, [r7, #4]
1976:..\src/interruptions.c ****     
1977:..\src/interruptions.c ****                 if (interrupt_flag){
 6736              		.loc 1 1977 0
 6737 094c 654B     		ldr	r3, .L469
 6738 094e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6739 0950 002B     		cmp	r3, #0
 6740 0952 04D0     		beq	.L423
1978:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6741              		.loc 1 1978 0
 6742 0954 634B     		ldr	r3, .L469
 6743 0956 0022     		movs	r2, #0
 6744 0958 1A70     		strb	r2, [r3]
1979:..\src/interruptions.c ****                     interrupt_manager();
 6745              		.loc 1 1979 0
 6746 095a FFF7FEFF 		bl	interrupt_manager
 6747              	.L423:
1980:..\src/interruptions.c ****                 }
1981:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 157


1982:..\src/interruptions.c ****                 if (i_aux < 0) 
 6748              		.loc 1 1982 0
 6749 095e 7B68     		ldr	r3, [r7, #4]
 6750 0960 002B     		cmp	r3, #0
 6751 0962 02DA     		bge	.L424
1983:..\src/interruptions.c ****                     i_aux = 0;
 6752              		.loc 1 1983 0
 6753 0964 0023     		movs	r3, #0
 6754 0966 7B60     		str	r3, [r7, #4]
 6755 0968 06E0     		b	.L425
 6756              	.L424:
1984:..\src/interruptions.c ****                 else 
1985:..\src/interruptions.c ****                     if (i_aux > 1024)
 6757              		.loc 1 1985 0
 6758 096a 7B68     		ldr	r3, [r7, #4]
 6759 096c B3F5806F 		cmp	r3, #1024
 6760 0970 02DD     		ble	.L425
1986:..\src/interruptions.c ****                         i_aux = 1024;
 6761              		.loc 1 1986 0
 6762 0972 4FF48063 		mov	r3, #1024
 6763 0976 7B60     		str	r3, [r7, #4]
 6764              	.L425:
1987:..\src/interruptions.c ****                 
1988:..\src/interruptions.c ****                 g_emg_meas.emg[1] = i_aux;
 6765              		.loc 1 1988 0
 6766 0978 604A     		ldr	r2, .L469+24
 6767 097a 7B68     		ldr	r3, [r7, #4]
 6768 097c 5360     		str	r3, [r2, #4]
1989:..\src/interruptions.c **** 
1990:..\src/interruptions.c ****             break;
 6769              		.loc 1 1990 0
 6770 097e 63E1     		b	.L426
 6771              	.L417:
1991:..\src/interruptions.c **** 
1992:..\src/interruptions.c ****         case RESET: // reset variables
1993:..\src/interruptions.c ****             emg_counter_2 = 0;
 6772              		.loc 1 1993 0
 6773 0980 5F4B     		ldr	r3, .L469+28
 6774 0982 0022     		movs	r2, #0
 6775 0984 1A80     		strh	r2, [r3]	@ movhi
1994:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 6776              		.loc 1 1994 0
 6777 0986 5C4B     		ldr	r3, .L469+20
 6778 0988 0022     		movs	r2, #0
 6779 098a C3F8F821 		str	r2, [r3, #504]
1995:..\src/interruptions.c **** 
1996:..\src/interruptions.c ****             if (interrupt_flag){
 6780              		.loc 1 1996 0
 6781 098e 554B     		ldr	r3, .L469
 6782 0990 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6783 0992 002B     		cmp	r3, #0
 6784 0994 04D0     		beq	.L427
1997:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6785              		.loc 1 1997 0
 6786 0996 534B     		ldr	r3, .L469
 6787 0998 0022     		movs	r2, #0
 6788 099a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 158


1998:..\src/interruptions.c ****                 interrupt_manager();
 6789              		.loc 1 1998 0
 6790 099c FFF7FEFF 		bl	interrupt_manager
 6791              	.L427:
1999:..\src/interruptions.c ****             }
2000:..\src/interruptions.c ****             
2001:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 6792              		.loc 1 2001 0
 6793 09a0 514B     		ldr	r3, .L469+4
 6794 09a2 0422     		movs	r2, #4
 6795 09a4 1A70     		strb	r2, [r3]
2002:..\src/interruptions.c ****             break;
 6796              		.loc 1 2002 0
 6797 09a6 4FE1     		b	.L426
 6798              	.L418:
2003:..\src/interruptions.c **** 
2004:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2005:..\src/interruptions.c ****             emg_counter_2++;
 6799              		.loc 1 2005 0
 6800 09a8 554B     		ldr	r3, .L469+28
 6801 09aa 1B88     		ldrh	r3, [r3]
 6802 09ac 0133     		adds	r3, r3, #1
 6803 09ae 9AB2     		uxth	r2, r3
 6804 09b0 534B     		ldr	r3, .L469+28
 6805 09b2 1A80     		strh	r2, [r3]	@ movhi
2006:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6806              		.loc 1 2006 0
 6807 09b4 524B     		ldr	r3, .L469+28
 6808 09b6 1B88     		ldrh	r3, [r3]
 6809 09b8 B3F5FA7F 		cmp	r3, #500
 6810 09bc 40F03D81 		bne	.L458
2007:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6811              		.loc 1 2007 0
 6812 09c0 4F4B     		ldr	r3, .L469+28
 6813 09c2 0022     		movs	r2, #0
 6814 09c4 1A80     		strh	r2, [r3]	@ movhi
2008:..\src/interruptions.c ****                 LED_control(1);
 6815              		.loc 1 2008 0
 6816 09c6 0120     		movs	r0, #1
 6817 09c8 FFF7FEFF 		bl	LED_control
2009:..\src/interruptions.c **** 
2010:..\src/interruptions.c ****                 if (interrupt_flag){
 6818              		.loc 1 2010 0
 6819 09cc 454B     		ldr	r3, .L469
 6820 09ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6821 09d0 002B     		cmp	r3, #0
 6822 09d2 04D0     		beq	.L429
2011:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6823              		.loc 1 2011 0
 6824 09d4 434B     		ldr	r3, .L469
 6825 09d6 0022     		movs	r2, #0
 6826 09d8 1A70     		strb	r2, [r3]
2012:..\src/interruptions.c ****                     interrupt_manager();
 6827              		.loc 1 2012 0
 6828 09da FFF7FEFF 		bl	interrupt_manager
 6829              	.L429:
2013:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 159


2014:..\src/interruptions.c ****                 
2015:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 6830              		.loc 1 2015 0
 6831 09de 424B     		ldr	r3, .L469+4
 6832 09e0 0322     		movs	r2, #3
 6833 09e2 1A70     		strb	r2, [r3]
2016:..\src/interruptions.c ****             }
2017:..\src/interruptions.c ****             break;
 6834              		.loc 1 2017 0
 6835 09e4 29E1     		b	.L458
 6836              	.L419:
2018:..\src/interruptions.c **** 
2019:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2020:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2021:..\src/interruptions.c ****             emg_counter_2++;
 6837              		.loc 1 2021 0
 6838 09e6 464B     		ldr	r3, .L469+28
 6839 09e8 1B88     		ldrh	r3, [r3]
 6840 09ea 0133     		adds	r3, r3, #1
 6841 09ec 9AB2     		uxth	r2, r3
 6842 09ee 444B     		ldr	r3, .L469+28
 6843 09f0 1A80     		strh	r2, [r3]	@ movhi
2022:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 6844              		.loc 1 2022 0
 6845 09f2 3E4B     		ldr	r3, .L469+8
 6846 09f4 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6847 09f8 C3F10303 		rsb	r3, r3, #3
 6848 09fc 3C4A     		ldr	r2, .L469+12
 6849 09fe 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6850 0a02 002B     		cmp	r3, #0
 6851 0a04 08DA     		bge	.L430
2023:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 6852              		.loc 1 2023 0
 6853 0a06 394B     		ldr	r3, .L469+8
 6854 0a08 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6855 0a0c C3F10303 		rsb	r3, r3, #3
 6856 0a10 374A     		ldr	r2, .L469+12
 6857 0a12 0021     		movs	r1, #0
 6858 0a14 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6859              	.L430:
2024:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 6860              		.loc 1 2024 0
 6861 0a18 344B     		ldr	r3, .L469+8
 6862 0a1a 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6863 0a1e C3F10303 		rsb	r3, r3, #3
 6864 0a22 334A     		ldr	r2, .L469+12
 6865 0a24 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6866 0a28 3249     		ldr	r1, .L469+16
 6867 0a2a 1846     		mov	r0, r3
 6868 0a2c FFF7FEFF 		bl	filter
 6869 0a30 0246     		mov	r2, r0
 6870 0a32 314B     		ldr	r3, .L469+20
 6871 0a34 D3F8F831 		ldr	r3, [r3, #504]
 6872 0a38 1344     		add	r3, r3, r2
 6873 0a3a 2F4A     		ldr	r2, .L469+20
 6874 0a3c C2F8F831 		str	r3, [r2, #504]
2025:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 160


2026:..\src/interruptions.c ****             if (interrupt_flag){
 6875              		.loc 1 2026 0
 6876 0a40 284B     		ldr	r3, .L469
 6877 0a42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6878 0a44 002B     		cmp	r3, #0
 6879 0a46 04D0     		beq	.L431
2027:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6880              		.loc 1 2027 0
 6881 0a48 264B     		ldr	r3, .L469
 6882 0a4a 0022     		movs	r2, #0
 6883 0a4c 1A70     		strb	r2, [r3]
2028:..\src/interruptions.c ****                 interrupt_manager();
 6884              		.loc 1 2028 0
 6885 0a4e FFF7FEFF 		bl	interrupt_manager
 6886              	.L431:
2029:..\src/interruptions.c ****             }
2030:..\src/interruptions.c ****             
2031:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 6887              		.loc 1 2031 0
 6888 0a52 2B4B     		ldr	r3, .L469+28
 6889 0a54 1B88     		ldrh	r3, [r3]
 6890 0a56 B3F57A7F 		cmp	r3, #1000
 6891 0a5a 40F0F080 		bne	.L459
2032:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 6892              		.loc 1 2032 0
 6893 0a5e 264B     		ldr	r3, .L469+20
 6894 0a60 D3F8F831 		ldr	r3, [r3, #504]
 6895 0a64 274A     		ldr	r2, .L469+32
 6896 0a66 A2FB0323 		umull	r2, r3, r2, r3
 6897 0a6a 9B09     		lsrs	r3, r3, #6
 6898 0a6c 224A     		ldr	r2, .L469+20
 6899 0a6e C2F8F831 		str	r3, [r2, #504]
2033:..\src/interruptions.c ****                 LED_control(0);
 6900              		.loc 1 2033 0
 6901 0a72 0020     		movs	r0, #0
 6902 0a74 FFF7FEFF 		bl	LED_control
2034:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6903              		.loc 1 2034 0
 6904 0a78 214B     		ldr	r3, .L469+28
 6905 0a7a 0022     		movs	r2, #0
 6906 0a7c 1A80     		strh	r2, [r3]	@ movhi
2035:..\src/interruptions.c ****             
2036:..\src/interruptions.c ****                 if (interrupt_flag){
 6907              		.loc 1 2036 0
 6908 0a7e 194B     		ldr	r3, .L469
 6909 0a80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6910 0a82 002B     		cmp	r3, #0
 6911 0a84 04D0     		beq	.L433
2037:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6912              		.loc 1 2037 0
 6913 0a86 174B     		ldr	r3, .L469
 6914 0a88 0022     		movs	r2, #0
 6915 0a8a 1A70     		strb	r2, [r3]
2038:..\src/interruptions.c ****                     interrupt_manager();
 6916              		.loc 1 2038 0
 6917 0a8c FFF7FEFF 		bl	interrupt_manager
 6918              	.L433:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 161


2039:..\src/interruptions.c ****                 }
2040:..\src/interruptions.c ****                 
2041:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 6919              		.loc 1 2041 0
 6920 0a90 154B     		ldr	r3, .L469+4
 6921 0a92 0522     		movs	r2, #5
 6922 0a94 1A70     		strb	r2, [r3]
2042:..\src/interruptions.c ****             }
2043:..\src/interruptions.c ****             break;
 6923              		.loc 1 2043 0
 6924 0a96 D2E0     		b	.L459
 6925              	.L420:
2044:..\src/interruptions.c **** 
2045:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2046:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 6926              		.loc 1 2046 0
 6927 0a98 1B4B     		ldr	r3, .L469+36
 6928 0a9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6929 0a9c 002B     		cmp	r3, #0
 6930 0a9e 40F0D080 		bne	.L460
2047:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 6931              		.loc 1 2047 0
 6932 0aa2 114B     		ldr	r3, .L469+4
 6933 0aa4 0222     		movs	r2, #2
 6934 0aa6 1A70     		strb	r2, [r3]
2048:..\src/interruptions.c ****             break;
 6935              		.loc 1 2048 0
 6936 0aa8 CBE0     		b	.L460
 6937              	.L421:
2049:..\src/interruptions.c **** 
2050:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2051:..\src/interruptions.c ****             emg_counter_2++;
 6938              		.loc 1 2051 0
 6939 0aaa 154B     		ldr	r3, .L469+28
 6940 0aac 1B88     		ldrh	r3, [r3]
 6941 0aae 0133     		adds	r3, r3, #1
 6942 0ab0 9AB2     		uxth	r2, r3
 6943 0ab2 134B     		ldr	r3, .L469+28
 6944 0ab4 1A80     		strh	r2, [r3]	@ movhi
2052:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6945              		.loc 1 2052 0
 6946 0ab6 124B     		ldr	r3, .L469+28
 6947 0ab8 1B88     		ldrh	r3, [r3]
 6948 0aba B3F5FA7F 		cmp	r3, #500
 6949 0abe 40F0C280 		bne	.L461
2053:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6950              		.loc 1 2053 0
 6951 0ac2 0F4B     		ldr	r3, .L469+28
 6952 0ac4 0022     		movs	r2, #0
 6953 0ac6 1A80     		strh	r2, [r3]	@ movhi
2054:..\src/interruptions.c ****                 
2055:..\src/interruptions.c ****                 if (interrupt_flag){
 6954              		.loc 1 2055 0
 6955 0ac8 064B     		ldr	r3, .L469
 6956 0aca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6957 0acc 002B     		cmp	r3, #0
 6958 0ace 04D0     		beq	.L436
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 162


2056:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6959              		.loc 1 2056 0
 6960 0ad0 044B     		ldr	r3, .L469
 6961 0ad2 0022     		movs	r2, #0
 6962 0ad4 1A70     		strb	r2, [r3]
2057:..\src/interruptions.c ****                     interrupt_manager();
 6963              		.loc 1 2057 0
 6964 0ad6 FFF7FEFF 		bl	interrupt_manager
 6965              	.L436:
2058:..\src/interruptions.c ****                 }
2059:..\src/interruptions.c ****                 
2060:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6966              		.loc 1 2060 0
 6967 0ada 0C4B     		ldr	r3, .L469+40
 6968 0adc 0022     		movs	r2, #0
 6969 0ade 1A70     		strb	r2, [r3]
 6970 0ae0 9DE0     		b	.L437
 6971              	.L470:
 6972 0ae2 00BF     		.align	2
 6973              	.L469:
 6974 0ae4 00000000 		.word	interrupt_flag
 6975 0ae8 00000000 		.word	emg_2_status
 6976 0aec 00000000 		.word	c_mem
 6977 0af0 00000000 		.word	ADC_buf
 6978 0af4 08000000 		.word	filt_emg+8
 6979 0af8 00000000 		.word	g_mem
 6980 0afc 00000000 		.word	g_emg_meas
 6981 0b00 82010000 		.word	emg_counter_2.10538
 6982 0b04 D34D6210 		.word	274877907
 6983 0b08 00000000 		.word	emg_1_status
 6984 0b0c 7A010000 		.word	idx.10542
 6985              	.L441:
2061:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6986              		.loc 1 2061 0
 6987 0b10 7F4B     		ldr	r3, .L471
 6988 0b12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6989 0b14 1946     		mov	r1, r3
 6990 0b16 7F4A     		ldr	r2, .L471+4
 6991 0b18 0B46     		mov	r3, r1
 6992 0b1a DB00     		lsls	r3, r3, #3
 6993 0b1c 5B1A     		subs	r3, r3, r1
 6994 0b1e 1B01     		lsls	r3, r3, #4
 6995 0b20 1344     		add	r3, r3, r2
 6996 0b22 03F58773 		add	r3, r3, #270
 6997 0b26 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6998 0b28 022B     		cmp	r3, #2
 6999 0b2a 29D0     		beq	.L438
2062:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7000              		.loc 1 2062 0 discriminator 1
 7001 0b2c 784B     		ldr	r3, .L471
 7002 0b2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7003 0b30 1946     		mov	r1, r3
 7004 0b32 784A     		ldr	r2, .L471+4
 7005 0b34 0B46     		mov	r3, r1
 7006 0b36 DB00     		lsls	r3, r3, #3
 7007 0b38 5B1A     		subs	r3, r3, r1
 7008 0b3a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 163


 7009 0b3c 1344     		add	r3, r3, r2
 7010 0b3e 03F58773 		add	r3, r3, #270
 7011 0b42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2061:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7012              		.loc 1 2061 0 discriminator 1
 7013 0b44 032B     		cmp	r3, #3
 7014 0b46 1BD0     		beq	.L438
2063:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7015              		.loc 1 2063 0
 7016 0b48 714B     		ldr	r3, .L471
 7017 0b4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7018 0b4c 1946     		mov	r1, r3
 7019 0b4e 714A     		ldr	r2, .L471+4
 7020 0b50 0B46     		mov	r3, r1
 7021 0b52 DB00     		lsls	r3, r3, #3
 7022 0b54 5B1A     		subs	r3, r3, r1
 7023 0b56 1B01     		lsls	r3, r3, #4
 7024 0b58 1344     		add	r3, r3, r2
 7025 0b5a 03F58773 		add	r3, r3, #270
 7026 0b5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2062:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7027              		.loc 1 2062 0
 7028 0b60 042B     		cmp	r3, #4
 7029 0b62 0DD0     		beq	.L438
2064:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 7030              		.loc 1 2064 0
 7031 0b64 6A4B     		ldr	r3, .L471
 7032 0b66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7033 0b68 1946     		mov	r1, r3
 7034 0b6a 6A4A     		ldr	r2, .L471+4
 7035 0b6c 0B46     		mov	r3, r1
 7036 0b6e DB00     		lsls	r3, r3, #3
 7037 0b70 5B1A     		subs	r3, r3, r1
 7038 0b72 1B01     		lsls	r3, r3, #4
 7039 0b74 1344     		add	r3, r3, r2
 7040 0b76 03F58773 		add	r3, r3, #270
 7041 0b7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2063:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7042              		.loc 1 2063 0
 7043 0b7c 052B     		cmp	r3, #5
 7044 0b7e 48D1     		bne	.L439
 7045              	.L438:
2065:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7046              		.loc 1 2065 0
 7047 0b80 634B     		ldr	r3, .L471
 7048 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7049 0b84 1946     		mov	r1, r3
 7050 0b86 634A     		ldr	r2, .L471+4
 7051 0b88 0B46     		mov	r3, r1
 7052 0b8a DB00     		lsls	r3, r3, #3
 7053 0b8c 5B1A     		subs	r3, r3, r1
 7054 0b8e 1B01     		lsls	r3, r3, #4
 7055 0b90 1344     		add	r3, r3, r2
 7056 0b92 03F20F13 		addw	r3, r3, #271
 7057 0b96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7058 0b98 002B     		cmp	r3, #0
 7059 0b9a 1AD1     		bne	.L440
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 164


2066:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7060              		.loc 1 2066 0
 7061 0b9c 5C4B     		ldr	r3, .L471
 7062 0b9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7063 0ba0 1846     		mov	r0, r3
 7064 0ba2 5B4B     		ldr	r3, .L471
 7065 0ba4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7066 0ba6 1946     		mov	r1, r3
 7067 0ba8 5B4A     		ldr	r2, .L471+8
 7068 0baa 0B46     		mov	r3, r1
 7069 0bac DB00     		lsls	r3, r3, #3
 7070 0bae 5B1A     		subs	r3, r3, r1
 7071 0bb0 1B01     		lsls	r3, r3, #4
 7072 0bb2 1344     		add	r3, r3, r2
 7073 0bb4 03F58873 		add	r3, r3, #272
 7074 0bb8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7075 0bba 1946     		mov	r1, r3
 7076 0bbc 574A     		ldr	r2, .L471+12
 7077 0bbe 0B46     		mov	r3, r1
 7078 0bc0 5B00     		lsls	r3, r3, #1
 7079 0bc2 0B44     		add	r3, r3, r1
 7080 0bc4 1B01     		lsls	r3, r3, #4
 7081 0bc6 1344     		add	r3, r3, r2
 7082 0bc8 1A68     		ldr	r2, [r3]
 7083 0bca 5549     		ldr	r1, .L471+16
 7084 0bcc 0301     		lsls	r3, r0, #4
 7085 0bce 0B44     		add	r3, r3, r1
 7086 0bd0 1A60     		str	r2, [r3]
 7087              	.L440:
2067:..\src/interruptions.c ****                         }
2068:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7088              		.loc 1 2068 0
 7089 0bd2 4F4B     		ldr	r3, .L471
 7090 0bd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7091 0bd6 1846     		mov	r0, r3
 7092 0bd8 4D4B     		ldr	r3, .L471
 7093 0bda 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7094 0bdc 1946     		mov	r1, r3
 7095 0bde 4D4A     		ldr	r2, .L471+4
 7096 0be0 0B46     		mov	r3, r1
 7097 0be2 DB00     		lsls	r3, r3, #3
 7098 0be4 5B1A     		subs	r3, r3, r1
 7099 0be6 1B01     		lsls	r3, r3, #4
 7100 0be8 1344     		add	r3, r3, r2
 7101 0bea E033     		adds	r3, r3, #224
 7102 0bec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7103 0bee 4C4A     		ldr	r2, .L471+16
 7104 0bf0 0301     		lsls	r3, r0, #4
 7105 0bf2 1344     		add	r3, r3, r2
 7106 0bf4 0C33     		adds	r3, r3, #12
 7107 0bf6 0A46     		mov	r2, r1
 7108 0bf8 1A70     		strb	r2, [r3]
2069:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7109              		.loc 1 2069 0
 7110 0bfa 454B     		ldr	r3, .L471
 7111 0bfc 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7112 0bfe 444B     		ldr	r3, .L471
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 165


 7113 0c00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7114 0c02 474A     		ldr	r2, .L471+16
 7115 0c04 1B01     		lsls	r3, r3, #4
 7116 0c06 1344     		add	r3, r3, r2
 7117 0c08 0C33     		adds	r3, r3, #12
 7118 0c0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7119 0c0c 1946     		mov	r1, r3
 7120 0c0e FFF7FEFF 		bl	enable_motor
 7121              	.L439:
2060:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7122              		.loc 1 2060 0 discriminator 2
 7123 0c12 3F4B     		ldr	r3, .L471
 7124 0c14 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7125 0c16 0133     		adds	r3, r3, #1
 7126 0c18 DAB2     		uxtb	r2, r3
 7127 0c1a 3D4B     		ldr	r3, .L471
 7128 0c1c 1A70     		strb	r2, [r3]
 7129              	.L437:
2060:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7130              		.loc 1 2060 0 is_stmt 0 discriminator 1
 7131 0c1e 3C4B     		ldr	r3, .L471
 7132 0c20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7133 0c22 012B     		cmp	r3, #1
 7134 0c24 7FF674AF 		bls	.L441
2070:..\src/interruptions.c ****                     }
2071:..\src/interruptions.c ****                 }
2072:..\src/interruptions.c ****                     
2073:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7135              		.loc 1 2073 0 is_stmt 1
 7136 0c28 0020     		movs	r0, #0
 7137 0c2a FFF7FEFF 		bl	memStore
2074:..\src/interruptions.c ****                     
2075:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7138              		.loc 1 2075 0
 7139 0c2e 3D4B     		ldr	r3, .L471+20
 7140 0c30 0022     		movs	r2, #0
 7141 0c32 1A70     		strb	r2, [r3]
2076:..\src/interruptions.c ****             }
2077:..\src/interruptions.c ****             break;
 7142              		.loc 1 2077 0
 7143 0c34 07E0     		b	.L461
 7144              	.L457:
2078:..\src/interruptions.c ****         default:
2079:..\src/interruptions.c ****             break;
 7145              		.loc 1 2079 0
 7146 0c36 00BF     		nop
 7147 0c38 06E0     		b	.L426
 7148              	.L458:
2017:..\src/interruptions.c **** 
 7149              		.loc 1 2017 0
 7150 0c3a 00BF     		nop
 7151 0c3c 04E0     		b	.L426
 7152              	.L459:
2043:..\src/interruptions.c **** 
 7153              		.loc 1 2043 0
 7154 0c3e 00BF     		nop
 7155 0c40 02E0     		b	.L426
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 166


 7156              	.L460:
2048:..\src/interruptions.c **** 
 7157              		.loc 1 2048 0
 7158 0c42 00BF     		nop
 7159 0c44 00E0     		b	.L426
 7160              	.L461:
2077:..\src/interruptions.c ****         default:
 7161              		.loc 1 2077 0
 7162 0c46 00BF     		nop
 7163              	.L426:
2080:..\src/interruptions.c ****     }
2081:..\src/interruptions.c ****         
2082:..\src/interruptions.c ****     if (interrupt_flag){
 7164              		.loc 1 2082 0
 7165 0c48 374B     		ldr	r3, .L471+24
 7166 0c4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7167 0c4c 002B     		cmp	r3, #0
 7168 0c4e 04D0     		beq	.L442
2083:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7169              		.loc 1 2083 0
 7170 0c50 354B     		ldr	r3, .L471+24
 7171 0c52 0022     		movs	r2, #0
 7172 0c54 1A70     		strb	r2, [r3]
2084:..\src/interruptions.c ****         interrupt_manager();
 7173              		.loc 1 2084 0
 7174 0c56 FFF7FEFF 		bl	interrupt_manager
 7175              	.L442:
2085:..\src/interruptions.c ****     }
2086:..\src/interruptions.c ****     
2087:..\src/interruptions.c ****     // Read also EMG additional sensors port
2088:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 7176              		.loc 1 2088 0
 7177 0c5a 344B     		ldr	r3, .L471+28
 7178 0c5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7179 0c5e 062B     		cmp	r3, #6
 7180 0c60 52D9     		bls	.L462
2089:..\src/interruptions.c ****         
2090:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 7181              		.loc 1 2090 0
 7182 0c62 2B4B     		ldr	r3, .L471
 7183 0c64 0022     		movs	r2, #0
 7184 0c66 1A70     		strb	r2, [r3]
 7185 0c68 4AE0     		b	.L444
 7186              	.L451:
2091:..\src/interruptions.c ****             
2092:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 7187              		.loc 1 2092 0
 7188 0c6a 294B     		ldr	r3, .L471
 7189 0c6c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7190 0c6e 0633     		adds	r3, r3, #6
 7191 0c70 2F4A     		ldr	r2, .L471+32
 7192 0c72 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7193 0c76 7B60     		str	r3, [r7, #4]
2093:..\src/interruptions.c ****             if (i_aux < 0) 
 7194              		.loc 1 2093 0
 7195 0c78 7B68     		ldr	r3, [r7, #4]
 7196 0c7a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 167


 7197 0c7c 01DA     		bge	.L445
2094:..\src/interruptions.c ****                 i_aux = 0;
 7198              		.loc 1 2094 0
 7199 0c7e 0023     		movs	r3, #0
 7200 0c80 7B60     		str	r3, [r7, #4]
 7201              	.L445:
2095:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 7202              		.loc 1 2095 0
 7203 0c82 234B     		ldr	r3, .L471
 7204 0c84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7205 0c86 0233     		adds	r3, r3, #2
 7206 0c88 DB00     		lsls	r3, r3, #3
 7207 0c8a 2A4A     		ldr	r2, .L471+36
 7208 0c8c 1344     		add	r3, r3, r2
 7209 0c8e 1946     		mov	r1, r3
 7210 0c90 7868     		ldr	r0, [r7, #4]
 7211 0c92 FFF7FEFF 		bl	filter
 7212 0c96 7860     		str	r0, [r7, #4]
2096:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 7213              		.loc 1 2096 0
 7214 0c98 7B68     		ldr	r3, [r7, #4]
 7215 0c9a 9B02     		lsls	r3, r3, #10
 7216 0c9c 002B     		cmp	r3, #0
 7217 0c9e 01DA     		bge	.L446
 7218 0ca0 03F2FF33 		addw	r3, r3, #1023
 7219              	.L446:
 7220 0ca4 9B12     		asrs	r3, r3, #10
 7221 0ca6 7B60     		str	r3, [r7, #4]
2097:..\src/interruptions.c **** 
2098:..\src/interruptions.c ****             if (interrupt_flag){
 7222              		.loc 1 2098 0
 7223 0ca8 1F4B     		ldr	r3, .L471+24
 7224 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7225 0cac 002B     		cmp	r3, #0
 7226 0cae 04D0     		beq	.L447
2099:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7227              		.loc 1 2099 0
 7228 0cb0 1D4B     		ldr	r3, .L471+24
 7229 0cb2 0022     		movs	r2, #0
 7230 0cb4 1A70     		strb	r2, [r3]
2100:..\src/interruptions.c ****                 interrupt_manager();
 7231              		.loc 1 2100 0
 7232 0cb6 FFF7FEFF 		bl	interrupt_manager
 7233              	.L447:
2101:..\src/interruptions.c ****             }
2102:..\src/interruptions.c ****             //Saturation
2103:..\src/interruptions.c ****             if (i_aux < 0)
 7234              		.loc 1 2103 0
 7235 0cba 7B68     		ldr	r3, [r7, #4]
 7236 0cbc 002B     		cmp	r3, #0
 7237 0cbe 02DA     		bge	.L448
2104:..\src/interruptions.c ****                 i_aux = 0;
 7238              		.loc 1 2104 0
 7239 0cc0 0023     		movs	r3, #0
 7240 0cc2 7B60     		str	r3, [r7, #4]
 7241 0cc4 06E0     		b	.L449
 7242              	.L448:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 168


2105:..\src/interruptions.c ****             else 
2106:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7243              		.loc 1 2106 0
 7244 0cc6 7B68     		ldr	r3, [r7, #4]
 7245 0cc8 B3F5806F 		cmp	r3, #1024
 7246 0ccc 02DD     		ble	.L449
2107:..\src/interruptions.c ****                     i_aux = 1024;
 7247              		.loc 1 2107 0
 7248 0cce 4FF48063 		mov	r3, #1024
 7249 0cd2 7B60     		str	r3, [r7, #4]
 7250              	.L449:
2108:..\src/interruptions.c ****             
2109:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = i_aux;
 7251              		.loc 1 2109 0
 7252 0cd4 0E4B     		ldr	r3, .L471
 7253 0cd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7254 0cd8 1749     		ldr	r1, .L471+40
 7255 0cda 0233     		adds	r3, r3, #2
 7256 0cdc 7A68     		ldr	r2, [r7, #4]
 7257 0cde 41F82320 		str	r2, [r1, r3, lsl #2]
2110:..\src/interruptions.c **** 
2111:..\src/interruptions.c ****             if (interrupt_flag){
 7258              		.loc 1 2111 0
 7259 0ce2 114B     		ldr	r3, .L471+24
 7260 0ce4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7261 0ce6 002B     		cmp	r3, #0
 7262 0ce8 04D0     		beq	.L450
2112:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7263              		.loc 1 2112 0
 7264 0cea 0F4B     		ldr	r3, .L471+24
 7265 0cec 0022     		movs	r2, #0
 7266 0cee 1A70     		strb	r2, [r3]
2113:..\src/interruptions.c ****                 interrupt_manager();
 7267              		.loc 1 2113 0
 7268 0cf0 FFF7FEFF 		bl	interrupt_manager
 7269              	.L450:
2090:..\src/interruptions.c ****             
 7270              		.loc 1 2090 0 discriminator 2
 7271 0cf4 064B     		ldr	r3, .L471
 7272 0cf6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7273 0cf8 0133     		adds	r3, r3, #1
 7274 0cfa DAB2     		uxtb	r2, r3
 7275 0cfc 044B     		ldr	r3, .L471
 7276 0cfe 1A70     		strb	r2, [r3]
 7277              	.L444:
2090:..\src/interruptions.c ****             
 7278              		.loc 1 2090 0 is_stmt 0 discriminator 1
 7279 0d00 034B     		ldr	r3, .L471
 7280 0d02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7281 0d04 052B     		cmp	r3, #5
 7282 0d06 B0D9     		bls	.L451
 7283              	.L462:
2114:..\src/interruptions.c ****             }
2115:..\src/interruptions.c ****         }
2116:..\src/interruptions.c ****     }
2117:..\src/interruptions.c ****     
2118:..\src/interruptions.c **** }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 169


 7284              		.loc 1 2118 0 is_stmt 1
 7285 0d08 00BF     		nop
 7286 0d0a 0C37     		adds	r7, r7, #12
 7287              		.cfi_def_cfa_offset 20
 7288 0d0c BD46     		mov	sp, r7
 7289              		.cfi_def_cfa_register 13
 7290              		@ sp needed
 7291 0d0e F0BD     		pop	{r4, r5, r6, r7, pc}
 7292              	.L472:
 7293              		.align	2
 7294              	.L471:
 7295 0d10 7A010000 		.word	idx.10542
 7296 0d14 00000000 		.word	c_mem
 7297 0d18 00000000 		.word	g_mem
 7298 0d1c 00000000 		.word	g_meas
 7299 0d20 00000000 		.word	g_ref
 7300 0d24 00000000 		.word	emg_2_status
 7301 0d28 00000000 		.word	interrupt_flag
 7302 0d2c 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7303 0d30 00000000 		.word	ADC_buf
 7304 0d34 00000000 		.word	filt_emg
 7305 0d38 00000000 		.word	g_emg_meas
 7306              		.cfi_endproc
 7307              	.LFE71:
 7308              		.size	analog_read_end, .-analog_read_end
 7309              		.section	.text.overcurrent_control,"ax",%progbits
 7310              		.align	2
 7311              		.global	overcurrent_control
 7312              		.thumb
 7313              		.thumb_func
 7314              		.type	overcurrent_control, %function
 7315              	overcurrent_control:
 7316              	.LFB72:
2119:..\src/interruptions.c **** 
2120:..\src/interruptions.c **** //==============================================================================
2121:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2122:..\src/interruptions.c **** //==============================================================================
2123:..\src/interruptions.c **** 
2124:..\src/interruptions.c **** void overcurrent_control() {
 7317              		.loc 1 2124 0
 7318              		.cfi_startproc
 7319              		@ args = 0, pretend = 0, frame = 8
 7320              		@ frame_needed = 1, uses_anonymous_args = 0
 7321              		@ link register save eliminated.
 7322 0000 80B4     		push	{r7}
 7323              		.cfi_def_cfa_offset 4
 7324              		.cfi_offset 7, -4
 7325 0002 83B0     		sub	sp, sp, #12
 7326              		.cfi_def_cfa_offset 16
 7327 0004 00AF     		add	r7, sp, #0
 7328              		.cfi_def_cfa_register 7
 7329              	.LBB4:
2125:..\src/interruptions.c ****     
2126:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 7330              		.loc 1 2126 0
 7331 0006 0023     		movs	r3, #0
 7332 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 170


 7333 000a 63E0     		b	.L474
 7334              	.L478:
2127:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7335              		.loc 1 2127 0
 7336 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7337 000e 3549     		ldr	r1, .L480
 7338 0010 1346     		mov	r3, r2
 7339 0012 DB00     		lsls	r3, r3, #3
 7340 0014 9B1A     		subs	r3, r3, r2
 7341 0016 1B01     		lsls	r3, r3, #4
 7342 0018 0B44     		add	r3, r3, r1
 7343 001a 03F58673 		add	r3, r3, #268
 7344 001e B3F90030 		ldrsh	r3, [r3]
 7345 0022 002B     		cmp	r3, #0
 7346 0024 53D0     		beq	.L475
2128:..\src/interruptions.c ****             // if the current is over the limit
2129:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 7347              		.loc 1 2129 0
 7348 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7349 0028 2F49     		ldr	r1, .L480+4
 7350 002a 1346     		mov	r3, r2
 7351 002c DB00     		lsls	r3, r3, #3
 7352 002e 9B1A     		subs	r3, r3, r2
 7353 0030 1B01     		lsls	r3, r3, #4
 7354 0032 0B44     		add	r3, r3, r1
 7355 0034 03F58873 		add	r3, r3, #272
 7356 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7357 003a 1946     		mov	r1, r3
 7358 003c 2B4A     		ldr	r2, .L480+8
 7359 003e 0B46     		mov	r3, r1
 7360 0040 5B00     		lsls	r3, r3, #1
 7361 0042 0B44     		add	r3, r3, r1
 7362 0044 1B01     		lsls	r3, r3, #4
 7363 0046 1344     		add	r3, r3, r2
 7364 0048 0C33     		adds	r3, r3, #12
 7365 004a 1968     		ldr	r1, [r3]
 7366 004c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7367 004e 2548     		ldr	r0, .L480
 7368 0050 1346     		mov	r3, r2
 7369 0052 DB00     		lsls	r3, r3, #3
 7370 0054 9B1A     		subs	r3, r3, r2
 7371 0056 1B01     		lsls	r3, r3, #4
 7372 0058 0344     		add	r3, r3, r0
 7373 005a 03F58673 		add	r3, r3, #268
 7374 005e B3F90030 		ldrsh	r3, [r3]
 7375 0062 9942     		cmp	r1, r3
 7376 0064 07DD     		ble	.L476
2130:..\src/interruptions.c ****                 //decrease pwm_limit
2131:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 7377              		.loc 1 2131 0
 7378 0066 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7379 0068 214A     		ldr	r2, .L480+12
 7380 006a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7381 006c 013A     		subs	r2, r2, #1
 7382 006e D1B2     		uxtb	r1, r2
 7383 0070 1F4A     		ldr	r2, .L480+12
 7384 0072 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 171


 7385 0074 1DE0     		b	.L479
 7386              	.L476:
2132:..\src/interruptions.c ****             // if the current is in the safe zone
2133:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 7387              		.loc 1 2133 0
 7388 0076 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7389 0078 1C49     		ldr	r1, .L480+8
 7390 007a 1346     		mov	r3, r2
 7391 007c 5B00     		lsls	r3, r3, #1
 7392 007e 1344     		add	r3, r3, r2
 7393 0080 1B01     		lsls	r3, r3, #4
 7394 0082 0B44     		add	r3, r3, r1
 7395 0084 0C33     		adds	r3, r3, #12
 7396 0086 1968     		ldr	r1, [r3]
 7397 0088 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7398 008a 1648     		ldr	r0, .L480
 7399 008c 1346     		mov	r3, r2
 7400 008e DB00     		lsls	r3, r3, #3
 7401 0090 9B1A     		subs	r3, r3, r2
 7402 0092 1B01     		lsls	r3, r3, #4
 7403 0094 0344     		add	r3, r3, r0
 7404 0096 03F58673 		add	r3, r3, #268
 7405 009a B3F90030 		ldrsh	r3, [r3]
 7406 009e 0A3B     		subs	r3, r3, #10
 7407 00a0 9942     		cmp	r1, r3
 7408 00a2 06DA     		bge	.L479
2134:..\src/interruptions.c ****                 //increase pwm_limit
2135:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 7409              		.loc 1 2135 0
 7410 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7411 00a6 124A     		ldr	r2, .L480+12
 7412 00a8 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7413 00aa 0132     		adds	r2, r2, #1
 7414 00ac D1B2     		uxtb	r1, r2
 7415 00ae 104A     		ldr	r2, .L480+12
 7416 00b0 D154     		strb	r1, [r2, r3]
 7417              	.L479:
2136:..\src/interruptions.c ****             }
2137:..\src/interruptions.c **** 
2138:..\src/interruptions.c ****             // Bound pwm_limit
2139:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2140:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2141:..\src/interruptions.c ****             else 
2142:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 7418              		.loc 1 2142 0
 7419 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7420 00b4 0E4A     		ldr	r2, .L480+12
 7421 00b6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7422 00b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7423 00ba 0E49     		ldr	r1, .L480+16
 7424 00bc CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7425 00be 9A42     		cmp	r2, r3
 7426 00c0 05D9     		bls	.L475
2143:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 7427              		.loc 1 2143 0
 7428 00c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7429 00c4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 172


 7430 00c6 0B49     		ldr	r1, .L480+16
 7431 00c8 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7432 00ca 094A     		ldr	r2, .L480+12
 7433 00cc D154     		strb	r1, [r2, r3]
 7434              	.L475:
2126:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7435              		.loc 1 2126 0 discriminator 2
 7436 00ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7437 00d0 0133     		adds	r3, r3, #1
 7438 00d2 FB71     		strb	r3, [r7, #7]
 7439              	.L474:
2126:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7440              		.loc 1 2126 0 is_stmt 0 discriminator 1
 7441 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7442 00d6 012B     		cmp	r3, #1
 7443 00d8 98D9     		bls	.L478
 7444              	.LBE4:
2144:..\src/interruptions.c ****         }
2145:..\src/interruptions.c ****     }
2146:..\src/interruptions.c **** }
 7445              		.loc 1 2146 0 is_stmt 1
 7446 00da 00BF     		nop
 7447 00dc 0C37     		adds	r7, r7, #12
 7448              		.cfi_def_cfa_offset 4
 7449 00de BD46     		mov	sp, r7
 7450              		.cfi_def_cfa_register 13
 7451              		@ sp needed
 7452 00e0 80BC     		pop	{r7}
 7453              		.cfi_restore 7
 7454              		.cfi_def_cfa_offset 0
 7455 00e2 7047     		bx	lr
 7456              	.L481:
 7457              		.align	2
 7458              	.L480:
 7459 00e4 00000000 		.word	c_mem
 7460 00e8 00000000 		.word	g_mem
 7461 00ec 00000000 		.word	g_meas
 7462 00f0 00000000 		.word	dev_pwm_limit
 7463 00f4 00000000 		.word	dev_pwm_sat
 7464              		.cfi_endproc
 7465              	.LFE72:
 7466              		.size	overcurrent_control, .-overcurrent_control
 7467              		.section	.text.pwm_limit_search,"ax",%progbits
 7468              		.align	2
 7469              		.global	pwm_limit_search
 7470              		.thumb
 7471              		.thumb_func
 7472              		.type	pwm_limit_search, %function
 7473              	pwm_limit_search:
 7474              	.LFB73:
2147:..\src/interruptions.c **** 
2148:..\src/interruptions.c **** //==============================================================================
2149:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2150:..\src/interruptions.c **** //==============================================================================
2151:..\src/interruptions.c **** 
2152:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 7475              		.loc 1 2152 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 173


 7476              		.cfi_startproc
 7477              		@ args = 0, pretend = 0, frame = 16
 7478              		@ frame_needed = 1, uses_anonymous_args = 0
 7479              		@ link register save eliminated.
 7480 0000 80B4     		push	{r7}
 7481              		.cfi_def_cfa_offset 4
 7482              		.cfi_offset 7, -4
 7483 0002 85B0     		sub	sp, sp, #20
 7484              		.cfi_def_cfa_offset 24
 7485 0004 00AF     		add	r7, sp, #0
 7486              		.cfi_def_cfa_register 7
 7487 0006 0346     		mov	r3, r0
 7488 0008 FB71     		strb	r3, [r7, #7]
2153:..\src/interruptions.c **** 
2154:..\src/interruptions.c ****     uint8 CYDATA index;
2155:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 7489              		.loc 1 2155 0
 7490 000a 46F29C33 		movw	r3, #25500
 7491 000e FB81     		strh	r3, [r7, #14]	@ movhi
2156:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 7492              		.loc 1 2156 0
 7493 0010 42F6EC43 		movw	r3, #11500
 7494 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2157:..\src/interruptions.c ****     
2158:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 7495              		.loc 1 2158 0
 7496 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7497 0018 144A     		ldr	r2, .L487
 7498 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7499 001e FB89     		ldrh	r3, [r7, #14]
 7500 0020 9A42     		cmp	r2, r3
 7501 0022 04DD     		ble	.L483
2159:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 7502              		.loc 1 2159 0
 7503 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7504 0026 124A     		ldr	r2, .L487+4
 7505 0028 0021     		movs	r1, #0
 7506 002a D154     		strb	r1, [r2, r3]
2160:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2161:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2162:..\src/interruptions.c ****     } else {
2163:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2164:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2165:..\src/interruptions.c ****     }
2166:..\src/interruptions.c **** }
 7507              		.loc 1 2166 0
 7508 002c 19E0     		b	.L486
 7509              	.L483:
2160:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 7510              		.loc 1 2160 0
 7511 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7512 0030 0E4A     		ldr	r2, .L487
 7513 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7514 0036 BB89     		ldrh	r3, [r7, #12]
 7515 0038 9A42     		cmp	r2, r3
 7516 003a 04DA     		bge	.L485
2161:..\src/interruptions.c ****     } else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 174


 7517              		.loc 1 2161 0
 7518 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7519 003e 0C4A     		ldr	r2, .L487+4
 7520 0040 6421     		movs	r1, #100
 7521 0042 D154     		strb	r1, [r2, r3]
 7522              		.loc 1 2166 0
 7523 0044 0DE0     		b	.L486
 7524              	.L485:
2163:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 7525              		.loc 1 2163 0
 7526 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7527 0048 084A     		ldr	r2, .L487
 7528 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7529 004e BB89     		ldrh	r3, [r7, #12]
 7530 0050 D31A     		subs	r3, r2, r3
 7531 0052 5B12     		asrs	r3, r3, #9
 7532 0054 FB72     		strb	r3, [r7, #11]
2164:..\src/interruptions.c ****     }
 7533              		.loc 1 2164 0
 7534 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7535 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 7536 005a 0649     		ldr	r1, .L487+8
 7537 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7538 005e 044A     		ldr	r2, .L487+4
 7539 0060 D154     		strb	r1, [r2, r3]
 7540              	.L486:
 7541              		.loc 1 2166 0
 7542 0062 00BF     		nop
 7543 0064 1437     		adds	r7, r7, #20
 7544              		.cfi_def_cfa_offset 4
 7545 0066 BD46     		mov	sp, r7
 7546              		.cfi_def_cfa_register 13
 7547              		@ sp needed
 7548 0068 80BC     		pop	{r7}
 7549              		.cfi_restore 7
 7550              		.cfi_def_cfa_offset 0
 7551 006a 7047     		bx	lr
 7552              	.L488:
 7553              		.align	2
 7554              	.L487:
 7555 006c 00000000 		.word	dev_tension
 7556 0070 00000000 		.word	dev_pwm_sat
 7557 0074 00000000 		.word	pwm_preload_values
 7558              		.cfi_endproc
 7559              	.LFE73:
 7560              		.size	pwm_limit_search, .-pwm_limit_search
 7561              		.section	.text.cycles_counter_update,"ax",%progbits
 7562              		.align	2
 7563              		.global	cycles_counter_update
 7564              		.thumb
 7565              		.thumb_func
 7566              		.type	cycles_counter_update, %function
 7567              	cycles_counter_update:
 7568              	.LFB74:
2167:..\src/interruptions.c **** 
2168:..\src/interruptions.c **** //==============================================================================
2169:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 175


2170:..\src/interruptions.c **** //==============================================================================
2171:..\src/interruptions.c **** 
2172:..\src/interruptions.c **** void cycles_counter_update() {
 7569              		.loc 1 2172 0
 7570              		.cfi_startproc
 7571              		@ args = 0, pretend = 0, frame = 24
 7572              		@ frame_needed = 1, uses_anonymous_args = 0
 7573 0000 80B5     		push	{r7, lr}
 7574              		.cfi_def_cfa_offset 8
 7575              		.cfi_offset 7, -8
 7576              		.cfi_offset 14, -4
 7577 0002 86B0     		sub	sp, sp, #24
 7578              		.cfi_def_cfa_offset 32
 7579 0004 00AF     		add	r7, sp, #0
 7580              		.cfi_def_cfa_register 7
2173:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2174:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2175:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2176:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2177:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2178:..\src/interruptions.c ****     uint8 i, bin_st, bin_max;
2179:..\src/interruptions.c ****     int32 curr_pos, curr_off;
2180:..\src/interruptions.c ****     int32 step;
2181:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2182:..\src/interruptions.c **** 
2183:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[0].res[0]);
 7581              		.loc 1 2183 0
 7582 0006 AA4B     		ldr	r3, .L537
 7583 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7584 000c 1946     		mov	r1, r3
 7585 000e A94A     		ldr	r2, .L537+4
 7586 0010 0B46     		mov	r3, r1
 7587 0012 5B00     		lsls	r3, r3, #1
 7588 0014 0B44     		add	r3, r3, r1
 7589 0016 1B01     		lsls	r3, r3, #4
 7590 0018 1344     		add	r3, r3, r2
 7591 001a 1B68     		ldr	r3, [r3]
 7592 001c A44A     		ldr	r2, .L537
 7593 001e 92F89521 		ldrb	r2, [r2, #405]	@ zero_extendqisi2
 7594 0022 1341     		asrs	r3, r3, r2
 7595 0024 3B61     		str	r3, [r7, #16]
2184:..\src/interruptions.c ****     
2185:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2186:..\src/interruptions.c ****     switch (pos_cycle_status){
 7596              		.loc 1 2186 0
 7597 0026 A44B     		ldr	r3, .L537+8
 7598 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7599 002a 012B     		cmp	r3, #1
 7600 002c 3AD0     		beq	.L491
 7601 002e 022B     		cmp	r3, #2
 7602 0030 6ED0     		beq	.L492
 7603 0032 002B     		cmp	r3, #0
 7604 0034 40F01F81 		bne	.L490
2187:..\src/interruptions.c ****         case STATE_INACTIVE:
2188:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 7605              		.loc 1 2188 0
 7606 0038 9D4B     		ldr	r3, .L537
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 176


 7607 003a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7608 003e 062B     		cmp	r3, #6
 7609 0040 04D0     		beq	.L494
 7610              		.loc 1 2188 0 is_stmt 0 discriminator 1
 7611 0042 9E4B     		ldr	r3, .L537+12
 7612 0044 93F90030 		ldrsb	r3, [r3]
 7613 0048 012B     		cmp	r3, #1
 7614 004a 0CD0     		beq	.L495
 7615              	.L494:
 7616              		.loc 1 2188 0 discriminator 3
 7617 004c 984B     		ldr	r3, .L537
 7618 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7619 0052 062B     		cmp	r3, #6
 7620 0054 40F00C81 		bne	.L531
 7621              		.loc 1 2188 0 discriminator 4
 7622 0058 984B     		ldr	r3, .L537+12
 7623 005a 93F90030 		ldrsb	r3, [r3]
 7624 005e B3F1FF3F 		cmp	r3, #-1
 7625 0062 40F00581 		bne	.L531
 7626              	.L495:
2189:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 7627              		.loc 1 2189 0 is_stmt 1
 7628 0066 964A     		ldr	r2, .L537+16
 7629 0068 3B69     		ldr	r3, [r7, #16]
 7630 006a 1360     		str	r3, [r2]
2190:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7631              		.loc 1 2190 0
 7632 006c 954B     		ldr	r3, .L537+20
 7633 006e 1A68     		ldr	r2, [r3]
 7634 0070 934B     		ldr	r3, .L537+16
 7635 0072 1B68     		ldr	r3, [r3]
 7636 0074 9A42     		cmp	r2, r3
 7637 0076 05DD     		ble	.L497
 7638              		.loc 1 2190 0 is_stmt 0 discriminator 1
 7639 0078 924B     		ldr	r3, .L537+20
 7640 007a 1A68     		ldr	r2, [r3]
 7641 007c 904B     		ldr	r3, .L537+16
 7642 007e 1B68     		ldr	r3, [r3]
 7643 0080 D31A     		subs	r3, r2, r3
 7644 0082 04E0     		b	.L498
 7645              	.L497:
 7646              		.loc 1 2190 0 discriminator 2
 7647 0084 8E4B     		ldr	r3, .L537+16
 7648 0086 1A68     		ldr	r2, [r3]
 7649 0088 8E4B     		ldr	r3, .L537+20
 7650 008a 1B68     		ldr	r3, [r3]
 7651 008c D31A     		subs	r3, r2, r3
 7652              	.L498:
 7653              		.loc 1 2190 0 discriminator 4
 7654 008e FB60     		str	r3, [r7, #12]
2191:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 7655              		.loc 1 2191 0 is_stmt 1 discriminator 4
 7656 0090 874B     		ldr	r3, .L537
 7657 0092 5A6D     		ldr	r2, [r3, #84]
 7658 0094 FB68     		ldr	r3, [r7, #12]
 7659 0096 1344     		add	r3, r3, r2
 7660 0098 854A     		ldr	r2, .L537
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 177


 7661 009a 5365     		str	r3, [r2, #84]
2192:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 7662              		.loc 1 2192 0 discriminator 4
 7663 009c 864B     		ldr	r3, .L537+8
 7664 009e 0122     		movs	r2, #1
 7665 00a0 1A70     		strb	r2, [r3]
2193:..\src/interruptions.c ****             }
2194:..\src/interruptions.c ****             break;
 7666              		.loc 1 2194 0 discriminator 4
 7667 00a2 E5E0     		b	.L531
 7668              	.L491:
2195:..\src/interruptions.c ****         case STATE_ACTIVE:
2196:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 7669              		.loc 1 2196 0
 7670 00a4 824B     		ldr	r3, .L537
 7671 00a6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7672 00aa 062B     		cmp	r3, #6
 7673 00ac 05D0     		beq	.L499
 7674              		.loc 1 2196 0 is_stmt 0 discriminator 1
 7675 00ae 834B     		ldr	r3, .L537+12
 7676 00b0 93F90030 		ldrsb	r3, [r3]
 7677 00b4 B3F1FF3F 		cmp	r3, #-1
 7678 00b8 0BD0     		beq	.L500
 7679              	.L499:
 7680              		.loc 1 2196 0 discriminator 3
 7681 00ba 7D4B     		ldr	r3, .L537
 7682 00bc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7683 00c0 062B     		cmp	r3, #6
 7684 00c2 40F0D780 		bne	.L532
 7685              		.loc 1 2196 0 discriminator 4
 7686 00c6 7D4B     		ldr	r3, .L537+12
 7687 00c8 93F90030 		ldrsb	r3, [r3]
 7688 00cc 012B     		cmp	r3, #1
 7689 00ce 40F0D180 		bne	.L532
 7690              	.L500:
2197:..\src/interruptions.c ****                 max_pos = curr_pos;
 7691              		.loc 1 2197 0 is_stmt 1
 7692 00d2 7C4A     		ldr	r2, .L537+20
 7693 00d4 3B69     		ldr	r3, [r7, #16]
 7694 00d6 1360     		str	r3, [r2]
2198:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7695              		.loc 1 2198 0
 7696 00d8 7A4B     		ldr	r3, .L537+20
 7697 00da 1A68     		ldr	r2, [r3]
 7698 00dc 784B     		ldr	r3, .L537+16
 7699 00de 1B68     		ldr	r3, [r3]
 7700 00e0 9A42     		cmp	r2, r3
 7701 00e2 05DD     		ble	.L502
 7702              		.loc 1 2198 0 is_stmt 0 discriminator 1
 7703 00e4 774B     		ldr	r3, .L537+20
 7704 00e6 1A68     		ldr	r2, [r3]
 7705 00e8 754B     		ldr	r3, .L537+16
 7706 00ea 1B68     		ldr	r3, [r3]
 7707 00ec D31A     		subs	r3, r2, r3
 7708 00ee 04E0     		b	.L503
 7709              	.L502:
 7710              		.loc 1 2198 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 178


 7711 00f0 734B     		ldr	r3, .L537+16
 7712 00f2 1A68     		ldr	r2, [r3]
 7713 00f4 734B     		ldr	r3, .L537+20
 7714 00f6 1B68     		ldr	r3, [r3]
 7715 00f8 D31A     		subs	r3, r2, r3
 7716              	.L503:
 7717              		.loc 1 2198 0 discriminator 4
 7718 00fa FB60     		str	r3, [r7, #12]
2199:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 7719              		.loc 1 2199 0 is_stmt 1 discriminator 4
 7720 00fc 6C4B     		ldr	r3, .L537
 7721 00fe 5A6D     		ldr	r2, [r3, #84]
 7722 0100 FB68     		ldr	r3, [r7, #12]
 7723 0102 1344     		add	r3, r3, r2
 7724 0104 6A4A     		ldr	r2, .L537
 7725 0106 5365     		str	r3, [r2, #84]
2200:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 7726              		.loc 1 2200 0 discriminator 4
 7727 0108 6B4B     		ldr	r3, .L537+8
 7728 010a 0222     		movs	r2, #2
 7729 010c 1A70     		strb	r2, [r3]
2201:..\src/interruptions.c ****             }
2202:..\src/interruptions.c ****             break;
 7730              		.loc 1 2202 0 discriminator 4
 7731 010e B1E0     		b	.L532
 7732              	.L492:
2203:..\src/interruptions.c ****         case COUNTER_INC:
2204:..\src/interruptions.c **** 
2205:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7733              		.loc 1 2205 0
 7734 0110 6C4B     		ldr	r3, .L537+20
 7735 0112 1A68     		ldr	r2, [r3]
 7736 0114 6A4B     		ldr	r3, .L537+16
 7737 0116 1B68     		ldr	r3, [r3]
 7738 0118 9A42     		cmp	r2, r3
 7739 011a 05DD     		ble	.L504
 7740              		.loc 1 2205 0 is_stmt 0 discriminator 1
 7741 011c 694B     		ldr	r3, .L537+20
 7742 011e 1A68     		ldr	r2, [r3]
 7743 0120 674B     		ldr	r3, .L537+16
 7744 0122 1B68     		ldr	r3, [r3]
 7745 0124 D31A     		subs	r3, r2, r3
 7746 0126 04E0     		b	.L505
 7747              	.L504:
 7748              		.loc 1 2205 0 discriminator 2
 7749 0128 654B     		ldr	r3, .L537+16
 7750 012a 1A68     		ldr	r2, [r3]
 7751 012c 654B     		ldr	r3, .L537+20
 7752 012e 1B68     		ldr	r3, [r3]
 7753 0130 D31A     		subs	r3, r2, r3
 7754              	.L505:
 7755              		.loc 1 2205 0 discriminator 4
 7756 0132 FB60     		str	r3, [r7, #12]
2206:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 7757              		.loc 1 2206 0 is_stmt 1 discriminator 4
 7758 0134 644B     		ldr	r3, .L537+24
 7759 0136 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 179


 7760 0138 FA68     		ldr	r2, [r7, #12]
 7761 013a 9A42     		cmp	r2, r3
 7762 013c 40F39480 		ble	.L506
2207:..\src/interruptions.c ****                 //update position histogram
2208:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[0].res[0]) / 10);
 7763              		.loc 1 2208 0
 7764 0140 5B4B     		ldr	r3, .L537
 7765 0142 D3F8E830 		ldr	r3, [r3, #232]
 7766 0146 5A4A     		ldr	r2, .L537
 7767 0148 92F89521 		ldrb	r2, [r2, #405]	@ zero_extendqisi2
 7768 014c 1341     		asrs	r3, r3, r2
 7769 014e 5F4A     		ldr	r2, .L537+28
 7770 0150 82FB0312 		smull	r1, r2, r2, r3
 7771 0154 9210     		asrs	r2, r2, #2
 7772 0156 DB17     		asrs	r3, r3, #31
 7773 0158 D31A     		subs	r3, r2, r3
 7774 015a BB60     		str	r3, [r7, #8]
2209:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 7775              		.loc 1 2209 0
 7776 015c 584B     		ldr	r3, .L537+16
 7777 015e 1A68     		ldr	r2, [r3]
 7778 0160 BB68     		ldr	r3, [r7, #8]
 7779 0162 92FBF3F3 		sdiv	r3, r2, r3
 7780 0166 FB71     		strb	r3, [r7, #7]
2210:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 7781              		.loc 1 2210 0
 7782 0168 564B     		ldr	r3, .L537+20
 7783 016a 1A68     		ldr	r2, [r3]
 7784 016c BB68     		ldr	r3, [r7, #8]
 7785 016e 92FBF3F3 		sdiv	r3, r2, r3
 7786 0172 BB71     		strb	r3, [r7, #6]
2211:..\src/interruptions.c ****                 if (g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC){
 7787              		.loc 1 2211 0
 7788 0174 4E4B     		ldr	r3, .L537
 7789 0176 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7790 017a 062B     		cmp	r3, #6
 7791 017c 15D0     		beq	.L507
2212:..\src/interruptions.c ****                     for (i=bin_st; i<= bin_max; i++){
 7792              		.loc 1 2212 0
 7793 017e FB79     		ldrb	r3, [r7, #7]
 7794 0180 FB75     		strb	r3, [r7, #23]
 7795 0182 0DE0     		b	.L508
 7796              	.L509:
2213:..\src/interruptions.c ****                         //position_hist counts how many times the SoftHand stays in bin while closi
2214:..\src/interruptions.c ****                         g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 7797              		.loc 1 2214 0 discriminator 3
 7798 0184 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7799 0186 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7800 0188 4949     		ldr	r1, .L537
 7801 018a 0632     		adds	r2, r2, #6
 7802 018c 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7803 0190 0132     		adds	r2, r2, #1
 7804 0192 4749     		ldr	r1, .L537
 7805 0194 0633     		adds	r3, r3, #6
 7806 0196 41F82320 		str	r2, [r1, r3, lsl #2]
2212:..\src/interruptions.c ****                     for (i=bin_st; i<= bin_max; i++){
 7807              		.loc 1 2212 0 discriminator 3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 180


 7808 019a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7809 019c 0133     		adds	r3, r3, #1
 7810 019e FB75     		strb	r3, [r7, #23]
 7811              	.L508:
2212:..\src/interruptions.c ****                     for (i=bin_st; i<= bin_max; i++){
 7812              		.loc 1 2212 0 is_stmt 0 discriminator 1
 7813 01a0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7814 01a2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 7815 01a4 9A42     		cmp	r2, r3
 7816 01a6 EDD9     		bls	.L509
 7817 01a8 14E0     		b	.L510
 7818              	.L507:
2215:..\src/interruptions.c ****                     }
2216:..\src/interruptions.c ****                 }
2217:..\src/interruptions.c ****                 else {
2218:..\src/interruptions.c ****                     // Bin computation at reverse
2219:..\src/interruptions.c ****                     for (i=bin_max; i>= bin_st; i--){
 7819              		.loc 1 2219 0 is_stmt 1
 7820 01aa BB79     		ldrb	r3, [r7, #6]
 7821 01ac FB75     		strb	r3, [r7, #23]
 7822 01ae 0DE0     		b	.L511
 7823              	.L512:
2220:..\src/interruptions.c ****                         //position_hist counts how many times the SoftHand stays in bin while openi
2221:..\src/interruptions.c ****                         g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 7824              		.loc 1 2221 0 discriminator 3
 7825 01b0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7826 01b2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7827 01b4 3E49     		ldr	r1, .L537
 7828 01b6 0632     		adds	r2, r2, #6
 7829 01b8 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7830 01bc 0132     		adds	r2, r2, #1
 7831 01be 3C49     		ldr	r1, .L537
 7832 01c0 0633     		adds	r3, r3, #6
 7833 01c2 41F82320 		str	r2, [r1, r3, lsl #2]
2219:..\src/interruptions.c ****                         //position_hist counts how many times the SoftHand stays in bin while openi
 7834              		.loc 1 2219 0 discriminator 3
 7835 01c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7836 01c8 013B     		subs	r3, r3, #1
 7837 01ca FB75     		strb	r3, [r7, #23]
 7838              	.L511:
2219:..\src/interruptions.c ****                         //position_hist counts how many times the SoftHand stays in bin while openi
 7839              		.loc 1 2219 0 is_stmt 0 discriminator 1
 7840 01cc FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7841 01ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7842 01d0 9A42     		cmp	r2, r3
 7843 01d2 EDD2     		bcs	.L512
 7844              	.L510:
2222:..\src/interruptions.c ****                     }
2223:..\src/interruptions.c ****                 }
2224:..\src/interruptions.c ****                 
2225:..\src/interruptions.c ****                 //update current histogram
2226:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 7845              		.loc 1 2226 0 is_stmt 1
 7846 01d4 364B     		ldr	r3, .L537
 7847 01d6 B3F90C31 		ldrsh	r3, [r3, #268]
 7848 01da 002B     		cmp	r3, #0
 7849 01dc 00DA     		bge	.L513
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 181


 7850 01de 0333     		adds	r3, r3, #3
 7851              	.L513:
 7852 01e0 9B10     		asrs	r3, r3, #2
 7853 01e2 1BB2     		sxth	r3, r3
 7854 01e4 BB60     		str	r3, [r7, #8]
2227:..\src/interruptions.c ****                 if (g_meas[g_mem.motor[0].encoder_line].curr > g_mem.motor[0].current_limit)
 7855              		.loc 1 2227 0
 7856 01e6 324B     		ldr	r3, .L537
 7857 01e8 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7858 01ec 1946     		mov	r1, r3
 7859 01ee 314A     		ldr	r2, .L537+4
 7860 01f0 0B46     		mov	r3, r1
 7861 01f2 5B00     		lsls	r3, r3, #1
 7862 01f4 0B44     		add	r3, r3, r1
 7863 01f6 1B01     		lsls	r3, r3, #4
 7864 01f8 1344     		add	r3, r3, r2
 7865 01fa 0C33     		adds	r3, r3, #12
 7866 01fc 1B68     		ldr	r3, [r3]
 7867 01fe 2C4A     		ldr	r2, .L537
 7868 0200 B2F90C21 		ldrsh	r2, [r2, #268]
 7869 0204 9342     		cmp	r3, r2
 7870 0206 05DD     		ble	.L514
2228:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 7871              		.loc 1 2228 0
 7872 0208 294B     		ldr	r3, .L537
 7873 020a DB6C     		ldr	r3, [r3, #76]
 7874 020c 0133     		adds	r3, r3, #1
 7875 020e 284A     		ldr	r2, .L537
 7876 0210 D364     		str	r3, [r2, #76]
 7877 0212 29E0     		b	.L506
 7878              	.L514:
2229:..\src/interruptions.c ****                 else
2230:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(g_meas[g_mem.motor[0].encoder_line].curr/step)] 
 7879              		.loc 1 2230 0
 7880 0214 264B     		ldr	r3, .L537
 7881 0216 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7882 021a 1946     		mov	r1, r3
 7883 021c 254A     		ldr	r2, .L537+4
 7884 021e 0B46     		mov	r3, r1
 7885 0220 5B00     		lsls	r3, r3, #1
 7886 0222 0B44     		add	r3, r3, r1
 7887 0224 1B01     		lsls	r3, r3, #4
 7888 0226 1344     		add	r3, r3, r2
 7889 0228 0C33     		adds	r3, r3, #12
 7890 022a 1A68     		ldr	r2, [r3]
 7891 022c BB68     		ldr	r3, [r7, #8]
 7892 022e 92FBF3F3 		sdiv	r3, r2, r3
 7893 0232 D9B2     		uxtb	r1, r3
 7894 0234 1E4B     		ldr	r3, .L537
 7895 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7896 023a 1846     		mov	r0, r3
 7897 023c 1D4A     		ldr	r2, .L537+4
 7898 023e 0346     		mov	r3, r0
 7899 0240 5B00     		lsls	r3, r3, #1
 7900 0242 0344     		add	r3, r3, r0
 7901 0244 1B01     		lsls	r3, r3, #4
 7902 0246 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 182


 7903 0248 0C33     		adds	r3, r3, #12
 7904 024a 1A68     		ldr	r2, [r3]
 7905 024c BB68     		ldr	r3, [r7, #8]
 7906 024e 92FBF3F3 		sdiv	r3, r2, r3
 7907 0252 DBB2     		uxtb	r3, r3
 7908 0254 164A     		ldr	r2, .L537
 7909 0256 1033     		adds	r3, r3, #16
 7910 0258 52F82330 		ldr	r3, [r2, r3, lsl #2]
 7911 025c 5A1C     		adds	r2, r3, #1
 7912 025e 1448     		ldr	r0, .L537
 7913 0260 01F11003 		add	r3, r1, #16
 7914 0264 40F82320 		str	r2, [r0, r3, lsl #2]
 7915              	.L506:
2231:..\src/interruptions.c ****             }
2232:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 7916              		.loc 1 2232 0
 7917 0268 134B     		ldr	r3, .L537+8
 7918 026a 0022     		movs	r2, #0
 7919 026c 1A70     		strb	r2, [r3]
2233:..\src/interruptions.c ****             break;
 7920              		.loc 1 2233 0
 7921 026e 02E0     		b	.L490
 7922              	.L531:
2194:..\src/interruptions.c ****         case STATE_ACTIVE:
 7923              		.loc 1 2194 0
 7924 0270 00BF     		nop
 7925 0272 00E0     		b	.L490
 7926              	.L532:
2202:..\src/interruptions.c ****         case COUNTER_INC:
 7927              		.loc 1 2202 0
 7928 0274 00BF     		nop
 7929              	.L490:
2234:..\src/interruptions.c ****     }
2235:..\src/interruptions.c ****     
2236:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2237:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 7930              		.loc 1 2237 0
 7931 0276 0023     		movs	r3, #0
 7932 0278 FB75     		strb	r3, [r7, #23]
 7933 027a 4EE0     		b	.L515
 7934              	.L523:
2238:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 7935              		.loc 1 2238 0
 7936 027c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7937 027e 144A     		ldr	r2, .L537+32
 7938 0280 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7939 0282 012B     		cmp	r3, #1
 7940 0284 28D0     		beq	.L517
 7941 0286 022B     		cmp	r3, #2
 7942 0288 31D0     		beq	.L518
 7943 028a 002B     		cmp	r3, #0
 7944 028c 42D1     		bne	.L516
2239:..\src/interruptions.c ****             case STATE_INACTIVE:
2240:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 7945              		.loc 1 2240 0
 7946 028e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7947 0290 104A     		ldr	r2, .L537+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 183


 7948 0292 52F82330 		ldr	r3, [r2, r3, lsl #2]
 7949 0296 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7950 0298 0549     		ldr	r1, .L537
 7951 029a F832     		adds	r2, r2, #248
 7952 029c 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 7953 02a0 9342     		cmp	r3, r2
 7954 02a2 34DD     		ble	.L533
2241:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 7955              		.loc 1 2241 0
 7956 02a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7957 02a6 0A4A     		ldr	r2, .L537+32
 7958 02a8 0121     		movs	r1, #1
 7959 02aa D154     		strb	r1, [r2, r3]
2242:..\src/interruptions.c ****                 }
2243:..\src/interruptions.c ****                 break;
 7960              		.loc 1 2243 0
 7961 02ac 2FE0     		b	.L533
 7962              	.L538:
 7963 02ae 00BF     		.align	2
 7964              	.L537:
 7965 02b0 00000000 		.word	g_mem
 7966 02b4 00000000 		.word	g_meas
 7967 02b8 84010000 		.word	pos_cycle_status.10598
 7968 02bc 00000000 		.word	pwm_sign
 7969 02c0 88010000 		.word	thr_pos.10602
 7970 02c4 8C010000 		.word	max_pos.10603
 7971 02c8 08000000 		.word	bin_threshold.10601
 7972 02cc 67666666 		.word	1717986919
 7973 02d0 90010000 		.word	emg_cycle_status.10599
 7974 02d4 00000000 		.word	g_emg_meas
 7975              	.L517:
2244:..\src/interruptions.c ****             case STATE_ACTIVE:
2245:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] < 10){
 7976              		.loc 1 2245 0
 7977 02d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7978 02da 3D4A     		ldr	r2, .L539
 7979 02dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 7980 02e0 092B     		cmp	r3, #9
 7981 02e2 16DC     		bgt	.L534
2246:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 7982              		.loc 1 2246 0
 7983 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7984 02e6 3B4A     		ldr	r2, .L539+4
 7985 02e8 0221     		movs	r1, #2
 7986 02ea D154     		strb	r1, [r2, r3]
2247:..\src/interruptions.c ****                 }
2248:..\src/interruptions.c ****                 break;
 7987              		.loc 1 2248 0
 7988 02ec 11E0     		b	.L534
 7989              	.L518:
2249:..\src/interruptions.c ****             case COUNTER_INC:
2250:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 7990              		.loc 1 2250 0
 7991 02ee FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7992 02f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7993 02f2 3949     		ldr	r1, .L539+8
 7994 02f4 0432     		adds	r2, r2, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 184


 7995 02f6 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7996 02fa 0132     		adds	r2, r2, #1
 7997 02fc 3649     		ldr	r1, .L539+8
 7998 02fe 0433     		adds	r3, r3, #4
 7999 0300 41F82320 		str	r2, [r1, r3, lsl #2]
2251:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 8000              		.loc 1 2251 0
 8001 0304 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8002 0306 334A     		ldr	r2, .L539+4
 8003 0308 0021     		movs	r1, #0
 8004 030a D154     		strb	r1, [r2, r3]
2252:..\src/interruptions.c ****                 break;
 8005              		.loc 1 2252 0
 8006 030c 02E0     		b	.L516
 8007              	.L533:
2243:..\src/interruptions.c ****             case STATE_ACTIVE:
 8008              		.loc 1 2243 0
 8009 030e 00BF     		nop
 8010 0310 00E0     		b	.L516
 8011              	.L534:
2248:..\src/interruptions.c ****             case COUNTER_INC:
 8012              		.loc 1 2248 0
 8013 0312 00BF     		nop
 8014              	.L516:
2237:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8015              		.loc 1 2237 0 discriminator 2
 8016 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8017 0316 0133     		adds	r3, r3, #1
 8018 0318 FB75     		strb	r3, [r7, #23]
 8019              	.L515:
2237:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8020              		.loc 1 2237 0 is_stmt 0 discriminator 1
 8021 031a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8022 031c 012B     		cmp	r3, #1
 8023 031e 07D8     		bhi	.L522
2237:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8024              		.loc 1 2237 0 discriminator 3
 8025 0320 2E4B     		ldr	r3, .L539+12
 8026 0322 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8027 0324 002B     		cmp	r3, #0
 8028 0326 03D1     		bne	.L522
2237:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8029              		.loc 1 2237 0 discriminator 4
 8030 0328 2D4B     		ldr	r3, .L539+16
 8031 032a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8032 032c 002B     		cmp	r3, #0
 8033 032e A5D0     		beq	.L523
 8034              	.L522:
2253:..\src/interruptions.c ****         }
2254:..\src/interruptions.c ****     }
2255:..\src/interruptions.c ****     
2256:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2257:..\src/interruptions.c ****     switch (rest_cycle_status){
 8035              		.loc 1 2257 0 is_stmt 1
 8036 0330 2C4B     		ldr	r3, .L539+20
 8037 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8038 0334 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 185


 8039 0336 11D0     		beq	.L525
 8040 0338 022B     		cmp	r3, #2
 8041 033a 29D0     		beq	.L526
 8042 033c 002B     		cmp	r3, #0
 8043 033e 41D1     		bne	.L524
2258:..\src/interruptions.c ****         case STATE_INACTIVE:
2259:..\src/interruptions.c ****             if (rest_enabled){
 8044              		.loc 1 2259 0
 8045 0340 294B     		ldr	r3, .L539+24
 8046 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8047 0344 002B     		cmp	r3, #0
 8048 0346 3AD0     		beq	.L535
2260:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 8049              		.loc 1 2260 0
 8050 0348 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8051 034c 0346     		mov	r3, r0
 8052 034e 1A46     		mov	r2, r3
 8053 0350 264B     		ldr	r3, .L539+28
 8054 0352 1A60     		str	r2, [r3]
2261:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8055              		.loc 1 2261 0
 8056 0354 234B     		ldr	r3, .L539+20
 8057 0356 0122     		movs	r2, #1
 8058 0358 1A70     		strb	r2, [r3]
2262:..\src/interruptions.c ****             }
2263:..\src/interruptions.c ****             break;
 8059              		.loc 1 2263 0
 8060 035a 30E0     		b	.L535
 8061              	.L525:
2264:..\src/interruptions.c ****         case STATE_ACTIVE:
2265:..\src/interruptions.c ****             if (!rest_enabled){
 8062              		.loc 1 2265 0
 8063 035c 224B     		ldr	r3, .L539+24
 8064 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8065 0360 002B     		cmp	r3, #0
 8066 0362 2ED1     		bne	.L536
2266:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8067              		.loc 1 2266 0
 8068 0364 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8069 0368 0346     		mov	r3, r0
 8070 036a 1A46     		mov	r2, r3
 8071 036c 204B     		ldr	r3, .L539+32
 8072 036e 1A60     		str	r2, [r3]
2267:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8073              		.loc 1 2267 0
 8074 0370 1E4B     		ldr	r3, .L539+28
 8075 0372 1A68     		ldr	r2, [r3]
 8076 0374 1E4B     		ldr	r3, .L539+32
 8077 0376 1B68     		ldr	r3, [r3]
 8078 0378 9A42     		cmp	r2, r3
 8079 037a 05D2     		bcs	.L530
2268:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8080              		.loc 1 2268 0
 8081 037c 1B4B     		ldr	r3, .L539+28
 8082 037e 1B68     		ldr	r3, [r3]
 8083 0380 03F59663 		add	r3, r3, #1200
 8084 0384 194A     		ldr	r2, .L539+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 186


 8085 0386 1360     		str	r3, [r2]
 8086              	.L530:
2269:..\src/interruptions.c ****                 }
2270:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8087              		.loc 1 2270 0
 8088 0388 164B     		ldr	r3, .L539+20
 8089 038a 0222     		movs	r2, #2
 8090 038c 1A70     		strb	r2, [r3]
2271:..\src/interruptions.c ****             }
2272:..\src/interruptions.c ****             break;
 8091              		.loc 1 2272 0
 8092 038e 18E0     		b	.L536
 8093              	.L526:
2273:..\src/interruptions.c ****         case COUNTER_INC: 
2274:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8094              		.loc 1 2274 0
 8095 0390 114B     		ldr	r3, .L539+8
 8096 0392 DA6D     		ldr	r2, [r3, #92]
 8097 0394 154B     		ldr	r3, .L539+28
 8098 0396 1968     		ldr	r1, [r3]
 8099 0398 154B     		ldr	r3, .L539+32
 8100 039a 1B68     		ldr	r3, [r3]
 8101 039c CB1A     		subs	r3, r1, r3
 8102 039e 1549     		ldr	r1, .L539+36
 8103 03a0 A1FB0313 		umull	r1, r3, r1, r3
 8104 03a4 DB08     		lsrs	r3, r3, #3
 8105 03a6 1344     		add	r3, r3, r2
 8106 03a8 0B4A     		ldr	r2, .L539+8
 8107 03aa D365     		str	r3, [r2, #92]
2275:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8108              		.loc 1 2275 0
 8109 03ac 0A4B     		ldr	r3, .L539+8
 8110 03ae 1B6D     		ldr	r3, [r3, #80]
 8111 03b0 0133     		adds	r3, r3, #1
 8112 03b2 094A     		ldr	r2, .L539+8
 8113 03b4 1365     		str	r3, [r2, #80]
2276:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8114              		.loc 1 2276 0
 8115 03b6 0B4B     		ldr	r3, .L539+20
 8116 03b8 0022     		movs	r2, #0
 8117 03ba 1A70     		strb	r2, [r3]
2277:..\src/interruptions.c ****             break;
 8118              		.loc 1 2277 0
 8119 03bc 02E0     		b	.L524
 8120              	.L535:
2263:..\src/interruptions.c ****         case STATE_ACTIVE:
 8121              		.loc 1 2263 0
 8122 03be 00BF     		nop
 8123 03c0 00E0     		b	.L524
 8124              	.L536:
2272:..\src/interruptions.c ****         case COUNTER_INC: 
 8125              		.loc 1 2272 0
 8126 03c2 00BF     		nop
 8127              	.L524:
2278:..\src/interruptions.c ****     }
2279:..\src/interruptions.c ****           
2280:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 187


2281:..\src/interruptions.c ****     save_cycles_eeprom();
 8128              		.loc 1 2281 0
 8129 03c4 FFF7FEFF 		bl	save_cycles_eeprom
2282:..\src/interruptions.c ****     
2283:..\src/interruptions.c **** }
 8130              		.loc 1 2283 0
 8131 03c8 00BF     		nop
 8132 03ca 1837     		adds	r7, r7, #24
 8133              		.cfi_def_cfa_offset 8
 8134 03cc BD46     		mov	sp, r7
 8135              		.cfi_def_cfa_register 13
 8136              		@ sp needed
 8137 03ce 80BD     		pop	{r7, pc}
 8138              	.L540:
 8139              		.align	2
 8140              	.L539:
 8141 03d0 00000000 		.word	g_emg_meas
 8142 03d4 90010000 		.word	emg_cycle_status.10599
 8143 03d8 00000000 		.word	g_mem
 8144 03dc 00000000 		.word	emg_1_status
 8145 03e0 00000000 		.word	emg_2_status
 8146 03e4 92010000 		.word	rest_cycle_status.10600
 8147 03e8 00000000 		.word	rest_enabled
 8148 03ec 94010000 		.word	timer_value_s.10610
 8149 03f0 98010000 		.word	timer_value_e.10611
 8150 03f4 CDCCCCCC 		.word	-858993459
 8151              		.cfi_endproc
 8152              	.LFE74:
 8153              		.size	cycles_counter_update, .-cycles_counter_update
 8154              		.section	.text.save_cycles_eeprom,"ax",%progbits
 8155              		.align	2
 8156              		.global	save_cycles_eeprom
 8157              		.thumb
 8158              		.thumb_func
 8159              		.type	save_cycles_eeprom, %function
 8160              	save_cycles_eeprom:
 8161              	.LFB75:
2284:..\src/interruptions.c **** 
2285:..\src/interruptions.c **** //==============================================================================
2286:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2287:..\src/interruptions.c **** //==============================================================================
2288:..\src/interruptions.c **** 
2289:..\src/interruptions.c **** void save_cycles_eeprom() {
 8162              		.loc 1 2289 0
 8163              		.cfi_startproc
 8164              		@ args = 0, pretend = 0, frame = 24
 8165              		@ frame_needed = 1, uses_anonymous_args = 0
 8166 0000 80B5     		push	{r7, lr}
 8167              		.cfi_def_cfa_offset 8
 8168              		.cfi_offset 7, -8
 8169              		.cfi_offset 14, -4
 8170 0002 86B0     		sub	sp, sp, #24
 8171              		.cfi_def_cfa_offset 32
 8172 0004 00AF     		add	r7, sp, #0
 8173              		.cfi_def_cfa_register 7
2290:..\src/interruptions.c **** 
2291:..\src/interruptions.c ****     cystatus status;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 188


2292:..\src/interruptions.c ****     static uint8 row_number;
2293:..\src/interruptions.c ****     uint8 row_start = 1;
 8174              		.loc 1 2293 0
 8175 0006 0123     		movs	r3, #1
 8176 0008 FB75     		strb	r3, [r7, #23]
2294:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 8177              		.loc 1 2294 0
 8178 000a 394B     		ldr	r3, .L557
 8179 000c 3B61     		str	r3, [r7, #16]
2295:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 8180              		.loc 1 2295 0
 8181 000e 394B     		ldr	r3, .L557+4
 8182 0010 FB60     		str	r3, [r7, #12]
2296:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 8183              		.loc 1 2296 0
 8184 0012 FB7D     		ldrb	r3, [r7, #23]
 8185 0014 0433     		adds	r3, r3, #4
 8186 0016 FB72     		strb	r3, [r7, #11]
2297:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2298:..\src/interruptions.c **** 
2299:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2300:..\src/interruptions.c ****     switch(cycles_status) {
 8187              		.loc 1 2300 0
 8188 0018 374B     		ldr	r3, .L557+8
 8189 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8190 001c 042B     		cmp	r3, #4
 8191 001e 63D8     		bhi	.L553
 8192 0020 01A2     		adr	r2, .L544
 8193 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8194 0026 00BF     		.p2align 2
 8195              	.L544:
 8196 0028 3D000000 		.word	.L543+1
 8197 002c 5B000000 		.word	.L545+1
 8198 0030 8B000000 		.word	.L546+1
 8199 0034 C7000000 		.word	.L547+1
 8200 0038 DF000000 		.word	.L554+1
 8201              		.p2align 1
 8202              	.L543:
2301:..\src/interruptions.c ****         case PREPARE_DATA:
2302:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2303:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 8203              		.loc 1 2303 0
 8204 003c 5022     		movs	r2, #80
 8205 003e 3969     		ldr	r1, [r7, #16]
 8206 0040 F868     		ldr	r0, [r7, #12]
 8207 0042 FFF7FEFF 		bl	memcpy
2304:..\src/interruptions.c ****             m_addr = addr_start;
 8208              		.loc 1 2304 0
 8209 0046 2D4A     		ldr	r2, .L557+12
 8210 0048 3B69     		ldr	r3, [r7, #16]
 8211 004a 1360     		str	r3, [r2]
2305:..\src/interruptions.c ****             row_number = row_start;
 8212              		.loc 1 2305 0
 8213 004c 2C4A     		ldr	r2, .L557+16
 8214 004e FB7D     		ldrb	r3, [r7, #23]
 8215 0050 1370     		strb	r3, [r2]
2306:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 189


 8216              		.loc 1 2306 0
 8217 0052 294B     		ldr	r3, .L557+8
 8218 0054 0122     		movs	r2, #1
 8219 0056 1A70     		strb	r2, [r3]
2307:..\src/interruptions.c ****             break;
 8220              		.loc 1 2307 0
 8221 0058 46E0     		b	.L542
 8222              	.L545:
2308:..\src/interruptions.c ****             
2309:..\src/interruptions.c ****         case WRITE_CYCLES:
2310:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 8223              		.loc 1 2310 0
 8224 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2311:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 8225              		.loc 1 2311 0
 8226 005e 274B     		ldr	r3, .L557+12
 8227 0060 1A68     		ldr	r2, [r3]
 8228 0062 274B     		ldr	r3, .L557+16
 8229 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8230 0066 1946     		mov	r1, r3
 8231 0068 1046     		mov	r0, r2
 8232 006a FFF7FEFF 		bl	EEPROM_StartWrite
 8233 006e 7860     		str	r0, [r7, #4]
2312:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 8234              		.loc 1 2312 0
 8235 0070 7B68     		ldr	r3, [r7, #4]
 8236 0072 072B     		cmp	r3, #7
 8237 0074 02D0     		beq	.L549
 8238              		.loc 1 2312 0 is_stmt 0 discriminator 1
 8239 0076 7B68     		ldr	r3, [r7, #4]
 8240 0078 002B     		cmp	r3, #0
 8241 007a 32D1     		bne	.L555
 8242              	.L549:
2313:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 8243              		.loc 1 2313 0 is_stmt 1
 8244 007c 1E4B     		ldr	r3, .L557+8
 8245 007e 0222     		movs	r2, #2
 8246 0080 1A70     		strb	r2, [r3]
2314:..\src/interruptions.c ****                 can_write = FALSE;
 8247              		.loc 1 2314 0
 8248 0082 204B     		ldr	r3, .L557+20
 8249 0084 0022     		movs	r2, #0
 8250 0086 1A70     		strb	r2, [r3]
2315:..\src/interruptions.c ****             }
2316:..\src/interruptions.c ****             break;
 8251              		.loc 1 2316 0
 8252 0088 2BE0     		b	.L555
 8253              	.L546:
2317:..\src/interruptions.c ****             
2318:..\src/interruptions.c ****         case WAIT_QUERY:
2319:..\src/interruptions.c ****             status = EEPROM_Query();
 8254              		.loc 1 2319 0
 8255 008a FFF7FEFF 		bl	EEPROM_Query
 8256 008e 7860     		str	r0, [r7, #4]
2320:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 8257              		.loc 1 2320 0
 8258 0090 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 190


 8259 0092 002B     		cmp	r3, #0
 8260 0094 27D1     		bne	.L556
2321:..\src/interruptions.c ****                 if (row_number < row_end) {
 8261              		.loc 1 2321 0
 8262 0096 1A4B     		ldr	r3, .L557+16
 8263 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8264 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8265 009c 9A42     		cmp	r2, r3
 8266 009e 0ED9     		bls	.L552
2322:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 8267              		.loc 1 2322 0
 8268 00a0 164B     		ldr	r3, .L557+12
 8269 00a2 1B68     		ldr	r3, [r3]
 8270 00a4 1033     		adds	r3, r3, #16
 8271 00a6 154A     		ldr	r2, .L557+12
 8272 00a8 1360     		str	r3, [r2]
2323:..\src/interruptions.c ****                     row_number = row_number + 1;
 8273              		.loc 1 2323 0
 8274 00aa 154B     		ldr	r3, .L557+16
 8275 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8276 00ae 0133     		adds	r3, r3, #1
 8277 00b0 DAB2     		uxtb	r2, r3
 8278 00b2 134B     		ldr	r3, .L557+16
 8279 00b4 1A70     		strb	r2, [r3]
2324:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 8280              		.loc 1 2324 0
 8281 00b6 104B     		ldr	r3, .L557+8
 8282 00b8 0122     		movs	r2, #1
 8283 00ba 1A70     		strb	r2, [r3]
2325:..\src/interruptions.c ****                 }
2326:..\src/interruptions.c ****                 else {
2327:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2328:..\src/interruptions.c ****                 }
2329:..\src/interruptions.c ****             }
2330:..\src/interruptions.c ****             break;
 8284              		.loc 1 2330 0
 8285 00bc 13E0     		b	.L556
 8286              	.L552:
2327:..\src/interruptions.c ****                 }
 8287              		.loc 1 2327 0
 8288 00be 0E4B     		ldr	r3, .L557+8
 8289 00c0 0322     		movs	r2, #3
 8290 00c2 1A70     		strb	r2, [r3]
 8291              		.loc 1 2330 0
 8292 00c4 0FE0     		b	.L556
 8293              	.L547:
2331:..\src/interruptions.c ****            
2332:..\src/interruptions.c ****         case WRITE_END:
2333:..\src/interruptions.c ****             can_write = TRUE;            
 8294              		.loc 1 2333 0
 8295 00c6 0F4B     		ldr	r3, .L557+20
 8296 00c8 0122     		movs	r2, #1
 8297 00ca 1A70     		strb	r2, [r3]
2334:..\src/interruptions.c ****             cycles_status = NONE;
 8298              		.loc 1 2334 0
 8299 00cc 0A4B     		ldr	r3, .L557+8
 8300 00ce 0422     		movs	r2, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 191


 8301 00d0 1A70     		strb	r2, [r3]
2335:..\src/interruptions.c ****             
2336:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2337:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 8302              		.loc 1 2337 0
 8303 00d2 5022     		movs	r2, #80
 8304 00d4 F968     		ldr	r1, [r7, #12]
 8305 00d6 3869     		ldr	r0, [r7, #16]
 8306 00d8 FFF7FEFF 		bl	memcpy
2338:..\src/interruptions.c ****             break;
 8307              		.loc 1 2338 0
 8308 00dc 04E0     		b	.L542
 8309              	.L554:
2339:..\src/interruptions.c ****             
2340:..\src/interruptions.c ****         case NONE:
2341:..\src/interruptions.c ****             break;
 8310              		.loc 1 2341 0
 8311 00de 00BF     		nop
 8312 00e0 02E0     		b	.L553
 8313              	.L555:
2316:..\src/interruptions.c ****             
 8314              		.loc 1 2316 0
 8315 00e2 00BF     		nop
 8316 00e4 00E0     		b	.L553
 8317              	.L556:
2330:..\src/interruptions.c ****            
 8318              		.loc 1 2330 0
 8319 00e6 00BF     		nop
 8320              	.L542:
 8321              	.L553:
2342:..\src/interruptions.c ****     }
2343:..\src/interruptions.c ****     
2344:..\src/interruptions.c **** }
 8322              		.loc 1 2344 0
 8323 00e8 00BF     		nop
 8324 00ea 1837     		adds	r7, r7, #24
 8325              		.cfi_def_cfa_offset 8
 8326 00ec BD46     		mov	sp, r7
 8327              		.cfi_def_cfa_register 13
 8328              		@ sp needed
 8329 00ee 80BD     		pop	{r7, pc}
 8330              	.L558:
 8331              		.align	2
 8332              	.L557:
 8333 00f0 10000000 		.word	g_mem+16
 8334 00f4 10000000 		.word	c_mem+16
 8335 00f8 00000000 		.word	cycles_status
 8336 00fc 9C010000 		.word	m_addr.10641
 8337 0100 A0010000 		.word	row_number.10636
 8338 0104 00000000 		.word	can_write
 8339              		.cfi_endproc
 8340              	.LFE75:
 8341              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 8342              		.bss
 8343              	state.10355:
 8344 0000 00       		.space	1
 8345 0001 000000   		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 192


 8346              	rx_queue.10359:
 8347 0004 000000   		.space	3
 8348              	data_packet_length.10357:
 8349 0007 00       		.space	1
 8350              	data_packet_index.10356:
 8351 0008 00       		.space	1
 8352 0009 000000   		.align	2
 8353              	data_packet_buffer.10358:
 8354 000c 00000000 		.space	128
 8354      00000000 
 8354      00000000 
 8354      00000000 
 8354      00000000 
 8355              		.data
 8356              		.align	1
 8357              		.type	counter_calibration.10375, %object
 8358              		.size	counter_calibration.10375, 2
 8359              	counter_calibration.10375:
 8360 0000 0100     		.short	1
 8361              		.align	1
 8362              		.type	counter_tension_func.10376, %object
 8363              		.size	counter_tension_func.10376, 2
 8364              	counter_tension_func.10376:
 8365 0002 0100     		.short	1
 8366              		.bss
 8367              	current_emg.10415:
 8368 008c 00       		.space	1
 8369 008d 000000   		.align	2
 8370              	pos_error_sum.10408:
 8371 0090 00000000 		.space	4
 8372              		.align	2
 8373              	prev_pos_err.10410:
 8374 0094 00000000 		.space	4
 8375              	motor_dir.10413:
 8376 0098 00       		.space	1
 8377 0099 000000   		.align	2
 8378              	curr_error_sum.10409:
 8379 009c 00000000 		.space	4
 8380              		.align	2
 8381              	prev_curr_err.10411:
 8382 00a0 00000000 		.space	4
 8383              		.align	2
 8384              	prev_pwm.10412:
 8385 00a4 00000000 		.space	4
 8386              		.align	2
 8387              	position_counter.10414:
 8388 00a8 00000000 		.space	4
 8389              		.align	2
 8390              	current_emg.10470:
 8391 00ac 0000     		.space	2
 8392 00ae 0000     		.align	2
 8393              	pos_error_sum.10463:
 8394 00b0 00000000 		.space	8
 8394      00000000 
 8395              		.align	2
 8396              	prev_pos_err.10465:
 8397 00b8 00000000 		.space	8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 193


 8397      00000000 
 8398              		.align	2
 8399              	motor_dir.10468:
 8400 00c0 0000     		.space	2
 8401 00c2 0000     		.align	2
 8402              	curr_error_sum.10464:
 8403 00c4 00000000 		.space	8
 8403      00000000 
 8404              		.align	2
 8405              	prev_curr_err.10466:
 8406 00cc 00000000 		.space	8
 8406      00000000 
 8407              		.align	2
 8408              	prev_pwm.10467:
 8409 00d4 00000000 		.space	8
 8409      00000000 
 8410              		.align	2
 8411              	position_counter.10469:
 8412 00dc 00000000 		.space	8
 8412      00000000 
 8413              		.align	2
 8414              	last_value_encoder.10510:
 8415 00e4 00000000 		.space	24
 8415      00000000 
 8415      00000000 
 8415      00000000 
 8415      00000000 
 8416              		.align	2
 8417              	comp_value_encoder.10511:
 8418 00fc 00000000 		.space	24
 8418      00000000 
 8418      00000000 
 8418      00000000 
 8418      00000000 
 8419              		.data
 8420              		.align	2
 8421              		.type	only_first_time.10513, %object
 8422              		.size	only_first_time.10513, 2
 8423              	only_first_time.10513:
 8424 0004 01       		.byte	1
 8425 0005 01       		.byte	1
 8426              		.bss
 8427              		.align	2
 8428              	error.10512:
 8429 0114 00000000 		.space	6
 8429      0000
 8430 011a 0000     		.align	2
 8431              	v_value.10518:
 8432 011c 00000000 		.space	24
 8432      00000000 
 8432      00000000 
 8432      00000000 
 8432      00000000 
 8433              		.align	2
 8434              	vv_value.10519:
 8435 0134 00000000 		.space	24
 8435      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 194


 8435      00000000 
 8435      00000000 
 8435      00000000 
 8436              		.align	2
 8437              	vvv_value.10520:
 8438 014c 00000000 		.space	24
 8438      00000000 
 8438      00000000 
 8438      00000000 
 8438      00000000 
 8439              		.align	2
 8440              	pos_reconstruct.10517:
 8441 0164 0000     		.space	2
 8442 0166 0000     		.align	2
 8443              	one_time_execute.10515:
 8444 0168 0000     		.space	2
 8445 016a 0000     		.align	2
 8446              	safe_startup_motor_activation.10514:
 8447 016c 0000     		.space	2
 8448 016e 0000     		.align	2
 8449              	count_startup_motor.10516:
 8450 0170 00000000 		.space	8
 8450      00000000 
 8451              		.data
 8452              		.type	first_tension_valid.10539, %object
 8453              		.size	first_tension_valid.10539, 1
 8454              	first_tension_valid.10539:
 8455 0006 01       		.byte	1
 8456              		.bss
 8457              		.align	1
 8458              	count.10540:
 8459 0178 0000     		.space	2
 8460              	idx.10542:
 8461 017a 00       		.space	1
 8462 017b 00       		.align	2
 8463              	v_count.10541:
 8464 017c 00000000 		.space	4
 8465              		.align	1
 8466              	emg_counter_1.10537:
 8467 0180 0000     		.space	2
 8468              		.align	1
 8469              	emg_counter_2.10538:
 8470 0182 0000     		.space	2
 8471              	pos_cycle_status.10598:
 8472 0184 00       		.space	1
 8473 0185 000000   		.align	2
 8474              	thr_pos.10602:
 8475 0188 00000000 		.space	4
 8476              		.align	2
 8477              	max_pos.10603:
 8478 018c 00000000 		.space	4
 8479              		.data
 8480 0007 00       		.align	2
 8481              		.type	bin_threshold.10601, %object
 8482              		.size	bin_threshold.10601, 4
 8483              	bin_threshold.10601:
 8484 0008 FA000000 		.word	250
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 195


 8485              		.bss
 8486              		.align	2
 8487              	emg_cycle_status.10599:
 8488 0190 0000     		.space	2
 8489              	rest_cycle_status.10600:
 8490 0192 00       		.space	1
 8491 0193 00       		.align	2
 8492              	timer_value_s.10610:
 8493 0194 00000000 		.space	4
 8494              		.align	2
 8495              	timer_value_e.10611:
 8496 0198 00000000 		.space	4
 8497              		.align	2
 8498              	m_addr.10641:
 8499 019c 00000000 		.space	4
 8500              	row_number.10636:
 8501 01a0 00       		.space	1
 8502              		.text
 8503              	.Letext0:
 8504              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8505              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8506              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8507              		.file 5 "..\\src\\commands.h"
 8508              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 8509              		.file 7 "..\\src\\globals.h"
 8510              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 8511              		.section	.debug_info,"",%progbits
 8512              	.Ldebug_info0:
 8513 0000 62170000 		.4byte	0x1762
 8514 0004 0400     		.2byte	0x4
 8515 0006 00000000 		.4byte	.Ldebug_abbrev0
 8516 000a 04       		.byte	0x4
 8517 000b 01       		.uleb128 0x1
 8518 000c 98070000 		.4byte	.LASF299
 8519 0010 0C       		.byte	0xc
 8520 0011 4C0E0000 		.4byte	.LASF300
 8521 0015 14040000 		.4byte	.LASF301
 8522 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8523 001d 00000000 		.4byte	0
 8524 0021 00000000 		.4byte	.Ldebug_line0
 8525 0025 02       		.uleb128 0x2
 8526 0026 01       		.byte	0x1
 8527 0027 06       		.byte	0x6
 8528 0028 25030000 		.4byte	.LASF0
 8529 002c 02       		.uleb128 0x2
 8530 002d 01       		.byte	0x1
 8531 002e 08       		.byte	0x8
 8532 002f A2030000 		.4byte	.LASF1
 8533 0033 02       		.uleb128 0x2
 8534 0034 02       		.byte	0x2
 8535 0035 05       		.byte	0x5
 8536 0036 D10C0000 		.4byte	.LASF2
 8537 003a 02       		.uleb128 0x2
 8538 003b 02       		.byte	0x2
 8539 003c 07       		.byte	0x7
 8540 003d 1E0E0000 		.4byte	.LASF3
 8541 0041 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 196


 8542 0042 B30E0000 		.4byte	.LASF9
 8543 0046 02       		.byte	0x2
 8544 0047 3F       		.byte	0x3f
 8545 0048 4C000000 		.4byte	0x4c
 8546 004c 02       		.uleb128 0x2
 8547 004d 04       		.byte	0x4
 8548 004e 05       		.byte	0x5
 8549 004f 30020000 		.4byte	.LASF4
 8550 0053 02       		.uleb128 0x2
 8551 0054 04       		.byte	0x4
 8552 0055 07       		.byte	0x7
 8553 0056 C5060000 		.4byte	.LASF5
 8554 005a 02       		.uleb128 0x2
 8555 005b 08       		.byte	0x8
 8556 005c 05       		.byte	0x5
 8557 005d 53080000 		.4byte	.LASF6
 8558 0061 02       		.uleb128 0x2
 8559 0062 08       		.byte	0x8
 8560 0063 07       		.byte	0x7
 8561 0064 EA0A0000 		.4byte	.LASF7
 8562 0068 04       		.uleb128 0x4
 8563 0069 04       		.byte	0x4
 8564 006a 05       		.byte	0x5
 8565 006b 696E7400 		.ascii	"int\000"
 8566 006f 02       		.uleb128 0x2
 8567 0070 04       		.byte	0x4
 8568 0071 07       		.byte	0x7
 8569 0072 2D090000 		.4byte	.LASF8
 8570 0076 03       		.uleb128 0x3
 8571 0077 52000000 		.4byte	.LASF10
 8572 007b 03       		.byte	0x3
 8573 007c 2C       		.byte	0x2c
 8574 007d 41000000 		.4byte	0x41
 8575 0081 05       		.uleb128 0x5
 8576 0082 C00C0000 		.4byte	.LASF11
 8577 0086 04       		.byte	0x4
 8578 0087 E401     		.2byte	0x1e4
 8579 0089 2C000000 		.4byte	0x2c
 8580 008d 05       		.uleb128 0x5
 8581 008e 000F0000 		.4byte	.LASF12
 8582 0092 04       		.byte	0x4
 8583 0093 E501     		.2byte	0x1e5
 8584 0095 3A000000 		.4byte	0x3a
 8585 0099 05       		.uleb128 0x5
 8586 009a 83000000 		.4byte	.LASF13
 8587 009e 04       		.byte	0x4
 8588 009f E601     		.2byte	0x1e6
 8589 00a1 53000000 		.4byte	0x53
 8590 00a5 05       		.uleb128 0x5
 8591 00a6 45010000 		.4byte	.LASF14
 8592 00aa 04       		.byte	0x4
 8593 00ab E701     		.2byte	0x1e7
 8594 00ad 25000000 		.4byte	0x25
 8595 00b1 05       		.uleb128 0x5
 8596 00b2 5D0D0000 		.4byte	.LASF15
 8597 00b6 04       		.byte	0x4
 8598 00b7 E801     		.2byte	0x1e8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 197


 8599 00b9 33000000 		.4byte	0x33
 8600 00bd 05       		.uleb128 0x5
 8601 00be 630E0000 		.4byte	.LASF16
 8602 00c2 04       		.byte	0x4
 8603 00c3 E901     		.2byte	0x1e9
 8604 00c5 4C000000 		.4byte	0x4c
 8605 00c9 05       		.uleb128 0x5
 8606 00ca CC020000 		.4byte	.LASF17
 8607 00ce 04       		.byte	0x4
 8608 00cf EA01     		.2byte	0x1ea
 8609 00d1 D5000000 		.4byte	0xd5
 8610 00d5 02       		.uleb128 0x2
 8611 00d6 04       		.byte	0x4
 8612 00d7 04       		.byte	0x4
 8613 00d8 02090000 		.4byte	.LASF18
 8614 00dc 02       		.uleb128 0x2
 8615 00dd 08       		.byte	0x8
 8616 00de 04       		.byte	0x4
 8617 00df 96080000 		.4byte	.LASF19
 8618 00e3 02       		.uleb128 0x2
 8619 00e4 01       		.byte	0x1
 8620 00e5 08       		.byte	0x8
 8621 00e6 84040000 		.4byte	.LASF20
 8622 00ea 05       		.uleb128 0x5
 8623 00eb 66090000 		.4byte	.LASF21
 8624 00ef 04       		.byte	0x4
 8625 00f0 8602     		.2byte	0x286
 8626 00f2 53000000 		.4byte	0x53
 8627 00f6 05       		.uleb128 0x5
 8628 00f7 870B0000 		.4byte	.LASF22
 8629 00fb 04       		.byte	0x4
 8630 00fc 8E02     		.2byte	0x28e
 8631 00fe 02010000 		.4byte	0x102
 8632 0102 06       		.uleb128 0x6
 8633 0103 81000000 		.4byte	0x81
 8634 0107 02       		.uleb128 0x2
 8635 0108 08       		.byte	0x8
 8636 0109 04       		.byte	0x4
 8637 010a F7090000 		.4byte	.LASF23
 8638 010e 02       		.uleb128 0x2
 8639 010f 04       		.byte	0x4
 8640 0110 07       		.byte	0x7
 8641 0111 00000000 		.4byte	.LASF24
 8642 0115 07       		.uleb128 0x7
 8643 0116 E3000000 		.4byte	0xe3
 8644 011a 25010000 		.4byte	0x125
 8645 011e 08       		.uleb128 0x8
 8646 011f 0E010000 		.4byte	0x10e
 8647 0123 07       		.byte	0x7
 8648 0124 00       		.byte	0
 8649 0125 09       		.uleb128 0x9
 8650 0126 ED0E0000 		.4byte	.LASF32
 8651 012a 01       		.byte	0x1
 8652 012b 2C000000 		.4byte	0x2c
 8653 012f 05       		.byte	0x5
 8654 0130 8B       		.byte	0x8b
 8655 0131 60010000 		.4byte	0x160
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 198


 8656 0135 0A       		.uleb128 0xa
 8657 0136 5E060000 		.4byte	.LASF25
 8658 013a 00       		.byte	0
 8659 013b 0A       		.uleb128 0xa
 8660 013c 6F090000 		.4byte	.LASF26
 8661 0140 01       		.byte	0x1
 8662 0141 0A       		.uleb128 0xa
 8663 0142 C6010000 		.4byte	.LASF27
 8664 0146 02       		.byte	0x2
 8665 0147 0A       		.uleb128 0xa
 8666 0148 13010000 		.4byte	.LASF28
 8667 014c 03       		.byte	0x3
 8668 014d 0A       		.uleb128 0xa
 8669 014e DC000000 		.4byte	.LASF29
 8670 0152 04       		.byte	0x4
 8671 0153 0A       		.uleb128 0xa
 8672 0154 1A000000 		.4byte	.LASF30
 8673 0158 05       		.byte	0x5
 8674 0159 0A       		.uleb128 0xa
 8675 015a 600C0000 		.4byte	.LASF31
 8676 015e 06       		.byte	0x6
 8677 015f 00       		.byte	0
 8678 0160 09       		.uleb128 0x9
 8679 0161 61080000 		.4byte	.LASF33
 8680 0165 01       		.byte	0x1
 8681 0166 2C000000 		.4byte	0x2c
 8682 016a 05       		.byte	0x5
 8683 016b 9E       		.byte	0x9e
 8684 016c 89010000 		.4byte	0x189
 8685 0170 0A       		.uleb128 0xa
 8686 0171 A50E0000 		.4byte	.LASF34
 8687 0175 00       		.byte	0
 8688 0176 0A       		.uleb128 0xa
 8689 0177 76070000 		.4byte	.LASF35
 8690 017b 01       		.byte	0x1
 8691 017c 0A       		.uleb128 0xa
 8692 017d E7090000 		.4byte	.LASF36
 8693 0181 02       		.byte	0x2
 8694 0182 0A       		.uleb128 0xa
 8695 0183 A8060000 		.4byte	.LASF37
 8696 0187 03       		.byte	0x3
 8697 0188 00       		.byte	0
 8698 0189 03       		.uleb128 0x3
 8699 018a 7E0E0000 		.4byte	.LASF38
 8700 018e 06       		.byte	0x6
 8701 018f 7E       		.byte	0x7e
 8702 0190 94010000 		.4byte	0x194
 8703 0194 0B       		.uleb128 0xb
 8704 0195 7E0E0000 		.4byte	.LASF38
 8705 0199 0C       		.uleb128 0xc
 8706 019a 04       		.byte	0x4
 8707 019b 89010000 		.4byte	0x189
 8708 019f 0D       		.uleb128 0xd
 8709 01a0 26080000 		.4byte	.LASF41
 8710 01a4 10       		.byte	0x10
 8711 01a5 07       		.byte	0x7
 8712 01a6 CE       		.byte	0xce
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 199


 8713 01a7 DC010000 		.4byte	0x1dc
 8714 01ab 0E       		.uleb128 0xe
 8715 01ac 706F7300 		.ascii	"pos\000"
 8716 01b0 07       		.byte	0x7
 8717 01b1 CF       		.byte	0xcf
 8718 01b2 BD000000 		.4byte	0xbd
 8719 01b6 00       		.byte	0
 8720 01b7 0F       		.uleb128 0xf
 8721 01b8 5B070000 		.4byte	.LASF39
 8722 01bc 07       		.byte	0x7
 8723 01bd D0       		.byte	0xd0
 8724 01be BD000000 		.4byte	0xbd
 8725 01c2 04       		.byte	0x4
 8726 01c3 0E       		.uleb128 0xe
 8727 01c4 70776D00 		.ascii	"pwm\000"
 8728 01c8 07       		.byte	0x7
 8729 01c9 D1       		.byte	0xd1
 8730 01ca BD000000 		.4byte	0xbd
 8731 01ce 08       		.byte	0x8
 8732 01cf 0F       		.uleb128 0xf
 8733 01d0 1E0B0000 		.4byte	.LASF40
 8734 01d4 07       		.byte	0x7
 8735 01d5 D2       		.byte	0xd2
 8736 01d6 81000000 		.4byte	0x81
 8737 01da 0C       		.byte	0xc
 8738 01db 00       		.byte	0
 8739 01dc 0D       		.uleb128 0xd
 8740 01dd 3A0C0000 		.4byte	.LASF42
 8741 01e1 30       		.byte	0x30
 8742 01e2 07       		.byte	0x7
 8743 01e3 D9       		.byte	0xd9
 8744 01e4 31020000 		.4byte	0x231
 8745 01e8 0E       		.uleb128 0xe
 8746 01e9 706F7300 		.ascii	"pos\000"
 8747 01ed 07       		.byte	0x7
 8748 01ee DA       		.byte	0xda
 8749 01ef 31020000 		.4byte	0x231
 8750 01f3 00       		.byte	0
 8751 01f4 0F       		.uleb128 0xf
 8752 01f5 5B070000 		.4byte	.LASF39
 8753 01f9 07       		.byte	0x7
 8754 01fa DB       		.byte	0xdb
 8755 01fb BD000000 		.4byte	0xbd
 8756 01ff 0C       		.byte	0xc
 8757 0200 0F       		.uleb128 0xf
 8758 0201 940D0000 		.4byte	.LASF43
 8759 0205 07       		.byte	0x7
 8760 0206 DC       		.byte	0xdc
 8761 0207 BD000000 		.4byte	0xbd
 8762 020b 10       		.byte	0x10
 8763 020c 0E       		.uleb128 0xe
 8764 020d 726F7400 		.ascii	"rot\000"
 8765 0211 07       		.byte	0x7
 8766 0212 DD       		.byte	0xdd
 8767 0213 41020000 		.4byte	0x241
 8768 0217 14       		.byte	0x14
 8769 0218 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 200


 8770 0219 76656C00 		.ascii	"vel\000"
 8771 021d 07       		.byte	0x7
 8772 021e DE       		.byte	0xde
 8773 021f 31020000 		.4byte	0x231
 8774 0223 18       		.byte	0x18
 8775 0224 0E       		.uleb128 0xe
 8776 0225 61636300 		.ascii	"acc\000"
 8777 0229 07       		.byte	0x7
 8778 022a DF       		.byte	0xdf
 8779 022b 31020000 		.4byte	0x231
 8780 022f 24       		.byte	0x24
 8781 0230 00       		.byte	0
 8782 0231 07       		.uleb128 0x7
 8783 0232 BD000000 		.4byte	0xbd
 8784 0236 41020000 		.4byte	0x241
 8785 023a 08       		.uleb128 0x8
 8786 023b 0E010000 		.4byte	0x10e
 8787 023f 02       		.byte	0x2
 8788 0240 00       		.byte	0
 8789 0241 07       		.uleb128 0x7
 8790 0242 A5000000 		.4byte	0xa5
 8791 0246 51020000 		.4byte	0x251
 8792 024a 08       		.uleb128 0x8
 8793 024b 0E010000 		.4byte	0x10e
 8794 024f 02       		.byte	0x2
 8795 0250 00       		.byte	0
 8796 0251 0D       		.uleb128 0xd
 8797 0252 290A0000 		.4byte	.LASF44
 8798 0256 20       		.byte	0x20
 8799 0257 07       		.byte	0x7
 8800 0258 E2       		.byte	0xe2
 8801 0259 76020000 		.4byte	0x276
 8802 025d 0E       		.uleb128 0xe
 8803 025e 656D6700 		.ascii	"emg\000"
 8804 0262 07       		.byte	0x7
 8805 0263 E3       		.byte	0xe3
 8806 0264 76020000 		.4byte	0x276
 8807 0268 00       		.byte	0
 8808 0269 0F       		.uleb128 0xf
 8809 026a AB090000 		.4byte	.LASF45
 8810 026e 07       		.byte	0x7
 8811 026f E4       		.byte	0xe4
 8812 0270 86020000 		.4byte	0x286
 8813 0274 08       		.byte	0x8
 8814 0275 00       		.byte	0
 8815 0276 07       		.uleb128 0x7
 8816 0277 BD000000 		.4byte	0xbd
 8817 027b 86020000 		.4byte	0x286
 8818 027f 08       		.uleb128 0x8
 8819 0280 0E010000 		.4byte	0x10e
 8820 0284 01       		.byte	0x1
 8821 0285 00       		.byte	0
 8822 0286 07       		.uleb128 0x7
 8823 0287 BD000000 		.4byte	0xbd
 8824 028b 96020000 		.4byte	0x296
 8825 028f 08       		.uleb128 0x8
 8826 0290 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 201


 8827 0294 05       		.byte	0x5
 8828 0295 00       		.byte	0
 8829 0296 0D       		.uleb128 0xd
 8830 0297 70000000 		.4byte	.LASF46
 8831 029b 86       		.byte	0x86
 8832 029c 07       		.byte	0x7
 8833 029d EB       		.byte	0xeb
 8834 029e D3020000 		.4byte	0x2d3
 8835 02a2 0F       		.uleb128 0xf
 8836 02a3 7F050000 		.4byte	.LASF47
 8837 02a7 07       		.byte	0x7
 8838 02a8 EC       		.byte	0xec
 8839 02a9 D3020000 		.4byte	0x2d3
 8840 02ad 00       		.byte	0
 8841 02ae 0F       		.uleb128 0xf
 8842 02af 010B0000 		.4byte	.LASF48
 8843 02b3 07       		.byte	0x7
 8844 02b4 ED       		.byte	0xed
 8845 02b5 B1000000 		.4byte	0xb1
 8846 02b9 80       		.byte	0x80
 8847 02ba 0E       		.uleb128 0xe
 8848 02bb 696E6400 		.ascii	"ind\000"
 8849 02bf 07       		.byte	0x7
 8850 02c0 EE       		.byte	0xee
 8851 02c1 B1000000 		.4byte	0xb1
 8852 02c5 82       		.byte	0x82
 8853 02c6 0F       		.uleb128 0xf
 8854 02c7 99010000 		.4byte	.LASF49
 8855 02cb 07       		.byte	0x7
 8856 02cc EF       		.byte	0xef
 8857 02cd 81000000 		.4byte	0x81
 8858 02d1 84       		.byte	0x84
 8859 02d2 00       		.byte	0
 8860 02d3 07       		.uleb128 0x7
 8861 02d4 81000000 		.4byte	0x81
 8862 02d8 E3020000 		.4byte	0x2e3
 8863 02dc 08       		.uleb128 0x8
 8864 02dd 0E010000 		.4byte	0x10e
 8865 02e1 7F       		.byte	0x7f
 8866 02e2 00       		.byte	0
 8867 02e3 0D       		.uleb128 0xd
 8868 02e4 B9020000 		.4byte	.LASF50
 8869 02e8 50       		.byte	0x50
 8870 02e9 07       		.byte	0x7
 8871 02ea F8       		.byte	0xf8
 8872 02eb 44030000 		.4byte	0x344
 8873 02ef 0F       		.uleb128 0xf
 8874 02f0 EE020000 		.4byte	.LASF51
 8875 02f4 07       		.byte	0x7
 8876 02f5 F9       		.byte	0xf9
 8877 02f6 44030000 		.4byte	0x344
 8878 02fa 00       		.byte	0
 8879 02fb 0F       		.uleb128 0xf
 8880 02fc 6B010000 		.4byte	.LASF52
 8881 0300 07       		.byte	0x7
 8882 0301 FA       		.byte	0xfa
 8883 0302 54030000 		.4byte	0x354
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 202


 8884 0306 08       		.byte	0x8
 8885 0307 0F       		.uleb128 0xf
 8886 0308 DA090000 		.4byte	.LASF53
 8887 030c 07       		.byte	0x7
 8888 030d FB       		.byte	0xfb
 8889 030e 64030000 		.4byte	0x364
 8890 0312 30       		.byte	0x30
 8891 0313 0F       		.uleb128 0xf
 8892 0314 06010000 		.4byte	.LASF54
 8893 0318 07       		.byte	0x7
 8894 0319 FC       		.byte	0xfc
 8895 031a 99000000 		.4byte	0x99
 8896 031e 40       		.byte	0x40
 8897 031f 0F       		.uleb128 0xf
 8898 0320 BD0E0000 		.4byte	.LASF55
 8899 0324 07       		.byte	0x7
 8900 0325 FD       		.byte	0xfd
 8901 0326 99000000 		.4byte	0x99
 8902 032a 44       		.byte	0x44
 8903 032b 0F       		.uleb128 0xf
 8904 032c D7060000 		.4byte	.LASF56
 8905 0330 07       		.byte	0x7
 8906 0331 FE       		.byte	0xfe
 8907 0332 99000000 		.4byte	0x99
 8908 0336 48       		.byte	0x48
 8909 0337 0F       		.uleb128 0xf
 8910 0338 F9060000 		.4byte	.LASF57
 8911 033c 07       		.byte	0x7
 8912 033d FF       		.byte	0xff
 8913 033e 99000000 		.4byte	0x99
 8914 0342 4C       		.byte	0x4c
 8915 0343 00       		.byte	0
 8916 0344 07       		.uleb128 0x7
 8917 0345 99000000 		.4byte	0x99
 8918 0349 54030000 		.4byte	0x354
 8919 034d 08       		.uleb128 0x8
 8920 034e 0E010000 		.4byte	0x10e
 8921 0352 01       		.byte	0x1
 8922 0353 00       		.byte	0
 8923 0354 07       		.uleb128 0x7
 8924 0355 99000000 		.4byte	0x99
 8925 0359 64030000 		.4byte	0x364
 8926 035d 08       		.uleb128 0x8
 8927 035e 0E010000 		.4byte	0x10e
 8928 0362 09       		.byte	0x9
 8929 0363 00       		.byte	0
 8930 0364 07       		.uleb128 0x7
 8931 0365 99000000 		.4byte	0x99
 8932 0369 74030000 		.4byte	0x374
 8933 036d 08       		.uleb128 0x8
 8934 036e 0E010000 		.4byte	0x10e
 8935 0372 03       		.byte	0x3
 8936 0373 00       		.byte	0
 8937 0374 10       		.uleb128 0x10
 8938 0375 BC010000 		.4byte	.LASF58
 8939 0379 10       		.byte	0x10
 8940 037a 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 203


 8941 037b 0601     		.2byte	0x106
 8942 037d 03040000 		.4byte	0x403
 8943 0381 11       		.uleb128 0x11
 8944 0382 696400   		.ascii	"id\000"
 8945 0385 07       		.byte	0x7
 8946 0386 0701     		.2byte	0x107
 8947 0388 81000000 		.4byte	0x81
 8948 038c 00       		.byte	0
 8949 038d 12       		.uleb128 0x12
 8950 038e 020D0000 		.4byte	.LASF59
 8951 0392 07       		.byte	0x7
 8952 0393 0801     		.2byte	0x108
 8953 0395 03040000 		.4byte	0x403
 8954 0399 01       		.byte	0x1
 8955 039a 12       		.uleb128 0x12
 8956 039b 2C0D0000 		.4byte	.LASF60
 8957 039f 07       		.byte	0x7
 8958 03a0 0901     		.2byte	0x109
 8959 03a2 03040000 		.4byte	0x403
 8960 03a6 04       		.byte	0x4
 8961 03a7 12       		.uleb128 0x12
 8962 03a8 FC030000 		.4byte	.LASF61
 8963 03ac 07       		.byte	0x7
 8964 03ad 0A01     		.2byte	0x10a
 8965 03af 81000000 		.4byte	0x81
 8966 03b3 07       		.byte	0x7
 8967 03b4 12       		.uleb128 0x12
 8968 03b5 50020000 		.4byte	.LASF62
 8969 03b9 07       		.byte	0x7
 8970 03ba 0B01     		.2byte	0x10b
 8971 03bc 81000000 		.4byte	0x81
 8972 03c0 08       		.byte	0x8
 8973 03c1 12       		.uleb128 0x12
 8974 03c2 E2010000 		.4byte	.LASF63
 8975 03c6 07       		.byte	0x7
 8976 03c7 0C01     		.2byte	0x10c
 8977 03c9 81000000 		.4byte	0x81
 8978 03cd 09       		.byte	0x9
 8979 03ce 12       		.uleb128 0x12
 8980 03cf 050E0000 		.4byte	.LASF64
 8981 03d3 07       		.byte	0x7
 8982 03d4 0D01     		.2byte	0x10d
 8983 03d6 81000000 		.4byte	0x81
 8984 03da 0A       		.byte	0xa
 8985 03db 12       		.uleb128 0x12
 8986 03dc C60D0000 		.4byte	.LASF65
 8987 03e0 07       		.byte	0x7
 8988 03e1 0E01     		.2byte	0x10e
 8989 03e3 81000000 		.4byte	0x81
 8990 03e7 0B       		.byte	0xb
 8991 03e8 12       		.uleb128 0x12
 8992 03e9 E90B0000 		.4byte	.LASF66
 8993 03ed 07       		.byte	0x7
 8994 03ee 0F01     		.2byte	0x10f
 8995 03f0 81000000 		.4byte	0x81
 8996 03f4 0C       		.byte	0xc
 8997 03f5 12       		.uleb128 0x12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 204


 8998 03f6 94020000 		.4byte	.LASF67
 8999 03fa 07       		.byte	0x7
 9000 03fb 1001     		.2byte	0x110
 9001 03fd 03040000 		.4byte	0x403
 9002 0401 0D       		.byte	0xd
 9003 0402 00       		.byte	0
 9004 0403 07       		.uleb128 0x7
 9005 0404 81000000 		.4byte	0x81
 9006 0408 13040000 		.4byte	0x413
 9007 040c 08       		.uleb128 0x8
 9008 040d 0E010000 		.4byte	0x10e
 9009 0411 02       		.byte	0x2
 9010 0412 00       		.byte	0
 9011 0413 10       		.uleb128 0x10
 9012 0414 17090000 		.4byte	.LASF68
 9013 0418 70       		.byte	0x70
 9014 0419 07       		.byte	0x7
 9015 041a 1701     		.2byte	0x117
 9016 041c 8D050000 		.4byte	0x58d
 9017 0420 11       		.uleb128 0x11
 9018 0421 6B5F7000 		.ascii	"k_p\000"
 9019 0425 07       		.byte	0x7
 9020 0426 1801     		.2byte	0x118
 9021 0428 BD000000 		.4byte	0xbd
 9022 042c 00       		.byte	0
 9023 042d 11       		.uleb128 0x11
 9024 042e 6B5F6900 		.ascii	"k_i\000"
 9025 0432 07       		.byte	0x7
 9026 0433 1901     		.2byte	0x119
 9027 0435 BD000000 		.4byte	0xbd
 9028 0439 04       		.byte	0x4
 9029 043a 11       		.uleb128 0x11
 9030 043b 6B5F6400 		.ascii	"k_d\000"
 9031 043f 07       		.byte	0x7
 9032 0440 1A01     		.2byte	0x11a
 9033 0442 BD000000 		.4byte	0xbd
 9034 0446 08       		.byte	0x8
 9035 0447 12       		.uleb128 0x12
 9036 0448 5A0B0000 		.4byte	.LASF69
 9037 044c 07       		.byte	0x7
 9038 044d 1B01     		.2byte	0x11b
 9039 044f BD000000 		.4byte	0xbd
 9040 0453 0C       		.byte	0xc
 9041 0454 12       		.uleb128 0x12
 9042 0455 DC040000 		.4byte	.LASF70
 9043 0459 07       		.byte	0x7
 9044 045a 1C01     		.2byte	0x11c
 9045 045c BD000000 		.4byte	0xbd
 9046 0460 10       		.byte	0x10
 9047 0461 12       		.uleb128 0x12
 9048 0462 CF040000 		.4byte	.LASF71
 9049 0466 07       		.byte	0x7
 9050 0467 1D01     		.2byte	0x11d
 9051 0469 BD000000 		.4byte	0xbd
 9052 046d 14       		.byte	0x14
 9053 046e 12       		.uleb128 0x12
 9054 046f 8D0D0000 		.4byte	.LASF72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 205


 9055 0473 07       		.byte	0x7
 9056 0474 1E01     		.2byte	0x11e
 9057 0476 BD000000 		.4byte	0xbd
 9058 047a 18       		.byte	0x18
 9059 047b 12       		.uleb128 0x12
 9060 047c 78050000 		.4byte	.LASF73
 9061 0480 07       		.byte	0x7
 9062 0481 1F01     		.2byte	0x11f
 9063 0483 BD000000 		.4byte	0xbd
 9064 0487 1C       		.byte	0x1c
 9065 0488 12       		.uleb128 0x12
 9066 0489 DB0C0000 		.4byte	.LASF74
 9067 048d 07       		.byte	0x7
 9068 048e 2001     		.2byte	0x120
 9069 0490 BD000000 		.4byte	0xbd
 9070 0494 20       		.byte	0x20
 9071 0495 12       		.uleb128 0x12
 9072 0496 86050000 		.4byte	.LASF75
 9073 049a 07       		.byte	0x7
 9074 049b 2101     		.2byte	0x121
 9075 049d BD000000 		.4byte	0xbd
 9076 04a1 24       		.byte	0x24
 9077 04a2 12       		.uleb128 0x12
 9078 04a3 91060000 		.4byte	.LASF76
 9079 04a7 07       		.byte	0x7
 9080 04a8 2201     		.2byte	0x122
 9081 04aa BD000000 		.4byte	0xbd
 9082 04ae 28       		.byte	0x28
 9083 04af 12       		.uleb128 0x12
 9084 04b0 330F0000 		.4byte	.LASF77
 9085 04b4 07       		.byte	0x7
 9086 04b5 2301     		.2byte	0x123
 9087 04b7 BD000000 		.4byte	0xbd
 9088 04bb 2C       		.byte	0x2c
 9089 04bc 12       		.uleb128 0x12
 9090 04bd 09070000 		.4byte	.LASF78
 9091 04c1 07       		.byte	0x7
 9092 04c2 2401     		.2byte	0x124
 9093 04c4 81000000 		.4byte	0x81
 9094 04c8 30       		.byte	0x30
 9095 04c9 12       		.uleb128 0x12
 9096 04ca 760D0000 		.4byte	.LASF79
 9097 04ce 07       		.byte	0x7
 9098 04cf 2501     		.2byte	0x125
 9099 04d1 81000000 		.4byte	0x81
 9100 04d5 31       		.byte	0x31
 9101 04d6 12       		.uleb128 0x12
 9102 04d7 6C0B0000 		.4byte	.LASF80
 9103 04db 07       		.byte	0x7
 9104 04dc 2601     		.2byte	0x126
 9105 04de 81000000 		.4byte	0x81
 9106 04e2 32       		.byte	0x32
 9107 04e3 12       		.uleb128 0x12
 9108 04e4 860E0000 		.4byte	.LASF81
 9109 04e8 07       		.byte	0x7
 9110 04e9 2701     		.2byte	0x127
 9111 04eb 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 206


 9112 04ef 33       		.byte	0x33
 9113 04f0 12       		.uleb128 0x12
 9114 04f1 91000000 		.4byte	.LASF82
 9115 04f5 07       		.byte	0x7
 9116 04f6 2801     		.2byte	0x128
 9117 04f8 BD000000 		.4byte	0xbd
 9118 04fc 34       		.byte	0x34
 9119 04fd 12       		.uleb128 0x12
 9120 04fe 0C050000 		.4byte	.LASF83
 9121 0502 07       		.byte	0x7
 9122 0503 2901     		.2byte	0x129
 9123 0505 BD000000 		.4byte	0xbd
 9124 0509 38       		.byte	0x38
 9125 050a 12       		.uleb128 0x12
 9126 050b DC080000 		.4byte	.LASF84
 9127 050f 07       		.byte	0x7
 9128 0510 2A01     		.2byte	0x12a
 9129 0512 BD000000 		.4byte	0xbd
 9130 0516 3C       		.byte	0x3c
 9131 0517 12       		.uleb128 0x12
 9132 0518 89040000 		.4byte	.LASF85
 9133 051c 07       		.byte	0x7
 9134 051d 2B01     		.2byte	0x12b
 9135 051f BD000000 		.4byte	0xbd
 9136 0523 40       		.byte	0x40
 9137 0524 12       		.uleb128 0x12
 9138 0525 F0000000 		.4byte	.LASF86
 9139 0529 07       		.byte	0x7
 9140 052a 2C01     		.2byte	0x12c
 9141 052c 8D050000 		.4byte	0x58d
 9142 0530 44       		.byte	0x44
 9143 0531 12       		.uleb128 0x12
 9144 0532 DF0E0000 		.4byte	.LASF87
 9145 0536 07       		.byte	0x7
 9146 0537 2D01     		.2byte	0x12d
 9147 0539 B1000000 		.4byte	0xb1
 9148 053d 5C       		.byte	0x5c
 9149 053e 12       		.uleb128 0x12
 9150 053f 6B070000 		.4byte	.LASF88
 9151 0543 07       		.byte	0x7
 9152 0544 2E01     		.2byte	0x12e
 9153 0546 81000000 		.4byte	0x81
 9154 054a 5E       		.byte	0x5e
 9155 054b 12       		.uleb128 0x12
 9156 054c 59090000 		.4byte	.LASF89
 9157 0550 07       		.byte	0x7
 9158 0551 2F01     		.2byte	0x12f
 9159 0553 81000000 		.4byte	0x81
 9160 0557 5F       		.byte	0x5f
 9161 0558 12       		.uleb128 0x12
 9162 0559 07040000 		.4byte	.LASF90
 9163 055d 07       		.byte	0x7
 9164 055e 3001     		.2byte	0x130
 9165 0560 81000000 		.4byte	0x81
 9166 0564 60       		.byte	0x60
 9167 0565 12       		.uleb128 0x12
 9168 0566 BE040000 		.4byte	.LASF91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 207


 9169 056a 07       		.byte	0x7
 9170 056b 3101     		.2byte	0x131
 9171 056d 81000000 		.4byte	0x81
 9172 0571 61       		.byte	0x61
 9173 0572 12       		.uleb128 0x12
 9174 0573 B0030000 		.4byte	.LASF92
 9175 0577 07       		.byte	0x7
 9176 0578 3201     		.2byte	0x132
 9177 057a 81000000 		.4byte	0x81
 9178 057e 62       		.byte	0x62
 9179 057f 12       		.uleb128 0x12
 9180 0580 94020000 		.4byte	.LASF67
 9181 0584 07       		.byte	0x7
 9182 0585 3301     		.2byte	0x133
 9183 0587 9D050000 		.4byte	0x59d
 9184 058b 63       		.byte	0x63
 9185 058c 00       		.byte	0
 9186 058d 07       		.uleb128 0x7
 9187 058e D5000000 		.4byte	0xd5
 9188 0592 9D050000 		.4byte	0x59d
 9189 0596 08       		.uleb128 0x8
 9190 0597 0E010000 		.4byte	0x10e
 9191 059b 05       		.byte	0x5
 9192 059c 00       		.byte	0
 9193 059d 07       		.uleb128 0x7
 9194 059e 81000000 		.4byte	0x81
 9195 05a2 AD050000 		.4byte	0x5ad
 9196 05a6 08       		.uleb128 0x8
 9197 05a7 0E010000 		.4byte	0x10e
 9198 05ab 0C       		.byte	0xc
 9199 05ac 00       		.byte	0
 9200 05ad 10       		.uleb128 0x10
 9201 05ae 310E0000 		.4byte	.LASF93
 9202 05b2 30       		.byte	0x30
 9203 05b3 07       		.byte	0x7
 9204 05b4 3A01     		.2byte	0x13a
 9205 05b6 30060000 		.4byte	0x630
 9206 05ba 12       		.uleb128 0x12
 9207 05bb BE080000 		.4byte	.LASF94
 9208 05bf 07       		.byte	0x7
 9209 05c0 3B01     		.2byte	0x13b
 9210 05c2 30060000 		.4byte	0x630
 9211 05c6 00       		.byte	0
 9212 05c7 11       		.uleb128 0x11
 9213 05c8 72657300 		.ascii	"res\000"
 9214 05cc 07       		.byte	0x7
 9215 05cd 3C01     		.2byte	0x13c
 9216 05cf 03040000 		.4byte	0x403
 9217 05d3 05       		.byte	0x5
 9218 05d4 12       		.uleb128 0x12
 9219 05d5 2B070000 		.4byte	.LASF95
 9220 05d9 07       		.byte	0x7
 9221 05da 3D01     		.2byte	0x13d
 9222 05dc 31020000 		.4byte	0x231
 9223 05e0 08       		.byte	0x8
 9224 05e1 12       		.uleb128 0x12
 9225 05e2 D5040000 		.4byte	.LASF96
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 208


 9226 05e6 07       		.byte	0x7
 9227 05e7 3E01     		.2byte	0x13e
 9228 05e9 40060000 		.4byte	0x640
 9229 05ed 14       		.byte	0x14
 9230 05ee 12       		.uleb128 0x12
 9231 05ef 8B0A0000 		.4byte	.LASF97
 9232 05f3 07       		.byte	0x7
 9233 05f4 3F01     		.2byte	0x13f
 9234 05f6 81000000 		.4byte	0x81
 9235 05fa 20       		.byte	0x20
 9236 05fb 12       		.uleb128 0x12
 9237 05fc 9F010000 		.4byte	.LASF98
 9238 0600 07       		.byte	0x7
 9239 0601 4001     		.2byte	0x140
 9240 0603 03040000 		.4byte	0x403
 9241 0607 21       		.byte	0x21
 9242 0608 12       		.uleb128 0x12
 9243 0609 3C0A0000 		.4byte	.LASF99
 9244 060d 07       		.byte	0x7
 9245 060e 4101     		.2byte	0x141
 9246 0610 A5000000 		.4byte	0xa5
 9247 0614 24       		.byte	0x24
 9248 0615 12       		.uleb128 0x12
 9249 0616 0B0C0000 		.4byte	.LASF100
 9250 061a 07       		.byte	0x7
 9251 061b 4201     		.2byte	0x142
 9252 061d 41020000 		.4byte	0x241
 9253 0621 25       		.byte	0x25
 9254 0622 12       		.uleb128 0x12
 9255 0623 94020000 		.4byte	.LASF67
 9256 0627 07       		.byte	0x7
 9257 0628 4301     		.2byte	0x143
 9258 062a 50060000 		.4byte	0x650
 9259 062e 28       		.byte	0x28
 9260 062f 00       		.byte	0
 9261 0630 07       		.uleb128 0x7
 9262 0631 81000000 		.4byte	0x81
 9263 0635 40060000 		.4byte	0x640
 9264 0639 08       		.uleb128 0x8
 9265 063a 0E010000 		.4byte	0x10e
 9266 063e 04       		.byte	0x4
 9267 063f 00       		.byte	0
 9268 0640 07       		.uleb128 0x7
 9269 0641 C9000000 		.4byte	0xc9
 9270 0645 50060000 		.4byte	0x650
 9271 0649 08       		.uleb128 0x8
 9272 064a 0E010000 		.4byte	0x10e
 9273 064e 02       		.byte	0x2
 9274 064f 00       		.byte	0
 9275 0650 07       		.uleb128 0x7
 9276 0651 81000000 		.4byte	0x81
 9277 0655 60060000 		.4byte	0x660
 9278 0659 08       		.uleb128 0x8
 9279 065a 0E010000 		.4byte	0x10e
 9280 065e 07       		.byte	0x7
 9281 065f 00       		.byte	0
 9282 0660 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 209


 9283 0661 64010000 		.4byte	.LASF101
 9284 0665 10       		.byte	0x10
 9285 0666 07       		.byte	0x7
 9286 0667 4A01     		.2byte	0x14a
 9287 0669 BC060000 		.4byte	0x6bc
 9288 066d 12       		.uleb128 0x12
 9289 066e B9090000 		.4byte	.LASF102
 9290 0672 07       		.byte	0x7
 9291 0673 4B01     		.2byte	0x14b
 9292 0675 BC060000 		.4byte	0x6bc
 9293 0679 00       		.byte	0
 9294 067a 12       		.uleb128 0x12
 9295 067b D10E0000 		.4byte	.LASF103
 9296 067f 07       		.byte	0x7
 9297 0680 4C01     		.2byte	0x14c
 9298 0682 44030000 		.4byte	0x344
 9299 0686 04       		.byte	0x4
 9300 0687 12       		.uleb128 0x12
 9301 0688 22050000 		.4byte	.LASF104
 9302 068c 07       		.byte	0x7
 9303 068d 4D01     		.2byte	0x14d
 9304 068f 81000000 		.4byte	0x81
 9305 0693 0C       		.byte	0xc
 9306 0694 12       		.uleb128 0x12
 9307 0695 250C0000 		.4byte	.LASF105
 9308 0699 07       		.byte	0x7
 9309 069a 4E01     		.2byte	0x14e
 9310 069c 81000000 		.4byte	0x81
 9311 06a0 0D       		.byte	0xd
 9312 06a1 12       		.uleb128 0x12
 9313 06a2 5F030000 		.4byte	.LASF106
 9314 06a6 07       		.byte	0x7
 9315 06a7 4F01     		.2byte	0x14f
 9316 06a9 81000000 		.4byte	0x81
 9317 06ad 0E       		.byte	0xe
 9318 06ae 12       		.uleb128 0x12
 9319 06af 94020000 		.4byte	.LASF67
 9320 06b3 07       		.byte	0x7
 9321 06b4 5001     		.2byte	0x150
 9322 06b6 CC060000 		.4byte	0x6cc
 9323 06ba 0F       		.byte	0xf
 9324 06bb 00       		.byte	0
 9325 06bc 07       		.uleb128 0x7
 9326 06bd 8D000000 		.4byte	0x8d
 9327 06c1 CC060000 		.4byte	0x6cc
 9328 06c5 08       		.uleb128 0x8
 9329 06c6 0E010000 		.4byte	0x10e
 9330 06ca 01       		.byte	0x1
 9331 06cb 00       		.byte	0
 9332 06cc 07       		.uleb128 0x7
 9333 06cd 81000000 		.4byte	0x81
 9334 06d1 DC060000 		.4byte	0x6dc
 9335 06d5 08       		.uleb128 0x8
 9336 06d6 0E010000 		.4byte	0x10e
 9337 06da 00       		.byte	0
 9338 06db 00       		.byte	0
 9339 06dc 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 210


 9340 06dd 83090000 		.4byte	.LASF107
 9341 06e1 20       		.byte	0x20
 9342 06e2 07       		.byte	0x7
 9343 06e3 5701     		.2byte	0x157
 9344 06e5 1E070000 		.4byte	0x71e
 9345 06e9 12       		.uleb128 0x12
 9346 06ea 02020000 		.4byte	.LASF108
 9347 06ee 07       		.byte	0x7
 9348 06ef 5801     		.2byte	0x158
 9349 06f1 81000000 		.4byte	0x81
 9350 06f5 00       		.byte	0
 9351 06f6 12       		.uleb128 0x12
 9352 06f7 0F0E0000 		.4byte	.LASF109
 9353 06fb 07       		.byte	0x7
 9354 06fc 5901     		.2byte	0x159
 9355 06fe 81000000 		.4byte	0x81
 9356 0702 01       		.byte	0x1
 9357 0703 12       		.uleb128 0x12
 9358 0704 08090000 		.4byte	.LASF110
 9359 0708 07       		.byte	0x7
 9360 0709 5A01     		.2byte	0x15a
 9361 070b 1E070000 		.4byte	0x71e
 9362 070f 02       		.byte	0x2
 9363 0710 12       		.uleb128 0x12
 9364 0711 94020000 		.4byte	.LASF67
 9365 0715 07       		.byte	0x7
 9366 0716 5B01     		.2byte	0x15b
 9367 0718 30060000 		.4byte	0x630
 9368 071c 1B       		.byte	0x1b
 9369 071d 00       		.byte	0
 9370 071e 07       		.uleb128 0x7
 9371 071f 81000000 		.4byte	0x81
 9372 0723 34070000 		.4byte	0x734
 9373 0727 08       		.uleb128 0x8
 9374 0728 0E010000 		.4byte	0x10e
 9375 072c 04       		.byte	0x4
 9376 072d 08       		.uleb128 0x8
 9377 072e 0E010000 		.4byte	0x10e
 9378 0732 04       		.byte	0x4
 9379 0733 00       		.byte	0
 9380 0734 10       		.uleb128 0x10
 9381 0735 180C0000 		.4byte	.LASF111
 9382 0739 20       		.byte	0x20
 9383 073a 07       		.byte	0x7
 9384 073b 6201     		.2byte	0x162
 9385 073d 83070000 		.4byte	0x783
 9386 0741 12       		.uleb128 0x12
 9387 0742 810A0000 		.4byte	.LASF112
 9388 0746 07       		.byte	0x7
 9389 0747 6301     		.2byte	0x163
 9390 0749 83070000 		.4byte	0x783
 9391 074d 00       		.byte	0
 9392 074e 12       		.uleb128 0x12
 9393 074f 630D0000 		.4byte	.LASF113
 9394 0753 07       		.byte	0x7
 9395 0754 6401     		.2byte	0x164
 9396 0756 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 211


 9397 075a 06       		.byte	0x6
 9398 075b 12       		.uleb128 0x12
 9399 075c 32000000 		.4byte	.LASF114
 9400 0760 07       		.byte	0x7
 9401 0761 6501     		.2byte	0x165
 9402 0763 81000000 		.4byte	0x81
 9403 0767 07       		.byte	0x7
 9404 0768 12       		.uleb128 0x12
 9405 0769 61050000 		.4byte	.LASF115
 9406 076d 07       		.byte	0x7
 9407 076e 6601     		.2byte	0x166
 9408 0770 93070000 		.4byte	0x793
 9409 0774 08       		.byte	0x8
 9410 0775 12       		.uleb128 0x12
 9411 0776 94020000 		.4byte	.LASF67
 9412 077a 07       		.byte	0x7
 9413 077b 6701     		.2byte	0x167
 9414 077d 93070000 		.4byte	0x793
 9415 0781 14       		.byte	0x14
 9416 0782 00       		.byte	0
 9417 0783 07       		.uleb128 0x7
 9418 0784 81000000 		.4byte	0x81
 9419 0788 93070000 		.4byte	0x793
 9420 078c 08       		.uleb128 0x8
 9421 078d 0E010000 		.4byte	0x10e
 9422 0791 05       		.byte	0x5
 9423 0792 00       		.byte	0
 9424 0793 07       		.uleb128 0x7
 9425 0794 81000000 		.4byte	0x81
 9426 0798 A3070000 		.4byte	0x7a3
 9427 079c 08       		.uleb128 0x8
 9428 079d 0E010000 		.4byte	0x10e
 9429 07a1 0B       		.byte	0xb
 9430 07a2 00       		.byte	0
 9431 07a3 10       		.uleb128 0x10
 9432 07a4 030C0000 		.4byte	.LASF116
 9433 07a8 20       		.byte	0x20
 9434 07a9 07       		.byte	0x7
 9435 07aa 6E01     		.2byte	0x16e
 9436 07ac D8070000 		.4byte	0x7d8
 9437 07b0 12       		.uleb128 0x12
 9438 07b1 31030000 		.4byte	.LASF117
 9439 07b5 07       		.byte	0x7
 9440 07b6 6F01     		.2byte	0x16f
 9441 07b8 15010000 		.4byte	0x115
 9442 07bc 00       		.byte	0
 9443 07bd 12       		.uleb128 0x12
 9444 07be 6D020000 		.4byte	.LASF118
 9445 07c2 07       		.byte	0x7
 9446 07c3 7001     		.2byte	0x170
 9447 07c5 60060000 		.4byte	0x660
 9448 07c9 08       		.byte	0x8
 9449 07ca 12       		.uleb128 0x12
 9450 07cb 94020000 		.4byte	.LASF67
 9451 07cf 07       		.byte	0x7
 9452 07d0 7101     		.2byte	0x171
 9453 07d2 50060000 		.4byte	0x650
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 212


 9454 07d6 18       		.byte	0x18
 9455 07d7 00       		.byte	0
 9456 07d8 10       		.uleb128 0x10
 9457 07d9 3A080000 		.4byte	.LASF119
 9458 07dd 10       		.byte	0x10
 9459 07de 07       		.byte	0x7
 9460 07df 7801     		.2byte	0x178
 9461 07e1 27080000 		.4byte	0x827
 9462 07e5 12       		.uleb128 0x12
 9463 07e6 52070000 		.4byte	.LASF120
 9464 07ea 07       		.byte	0x7
 9465 07eb 7901     		.2byte	0x179
 9466 07ed BD000000 		.4byte	0xbd
 9467 07f1 00       		.byte	0
 9468 07f2 12       		.uleb128 0x12
 9469 07f3 150F0000 		.4byte	.LASF121
 9470 07f7 07       		.byte	0x7
 9471 07f8 7A01     		.2byte	0x17a
 9472 07fa BD000000 		.4byte	0xbd
 9473 07fe 04       		.byte	0x4
 9474 07ff 12       		.uleb128 0x12
 9475 0800 2C050000 		.4byte	.LASF122
 9476 0804 07       		.byte	0x7
 9477 0805 7B01     		.2byte	0x17b
 9478 0807 BD000000 		.4byte	0xbd
 9479 080b 08       		.byte	0x8
 9480 080c 12       		.uleb128 0x12
 9481 080d 78060000 		.4byte	.LASF123
 9482 0811 07       		.byte	0x7
 9483 0812 7C01     		.2byte	0x17c
 9484 0814 81000000 		.4byte	0x81
 9485 0818 0C       		.byte	0xc
 9486 0819 12       		.uleb128 0x12
 9487 081a 94020000 		.4byte	.LASF67
 9488 081e 07       		.byte	0x7
 9489 081f 7D01     		.2byte	0x17d
 9490 0821 03040000 		.4byte	0x403
 9491 0825 0D       		.byte	0xd
 9492 0826 00       		.byte	0
 9493 0827 13       		.uleb128 0x13
 9494 0828 420E0000 		.4byte	.LASF124
 9495 082c B002     		.2byte	0x2b0
 9496 082e 07       		.byte	0x7
 9497 082f 8501     		.2byte	0x185
 9498 0831 D7080000 		.4byte	0x8d7
 9499 0835 12       		.uleb128 0x12
 9500 0836 54090000 		.4byte	.LASF125
 9501 083a 07       		.byte	0x7
 9502 083b 8701     		.2byte	0x187
 9503 083d 81000000 		.4byte	0x81
 9504 0841 00       		.byte	0
 9505 0842 12       		.uleb128 0x12
 9506 0843 94020000 		.4byte	.LASF67
 9507 0847 07       		.byte	0x7
 9508 0848 8801     		.2byte	0x188
 9509 084a D7080000 		.4byte	0x8d7
 9510 084e 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 213


 9511 084f 11       		.uleb128 0x11
 9512 0850 636E7400 		.ascii	"cnt\000"
 9513 0854 07       		.byte	0x7
 9514 0855 8901     		.2byte	0x189
 9515 0857 E3020000 		.4byte	0x2e3
 9516 085b 10       		.byte	0x10
 9517 085c 12       		.uleb128 0x12
 9518 085d 39020000 		.4byte	.LASF126
 9519 0861 07       		.byte	0x7
 9520 0862 8A01     		.2byte	0x18a
 9521 0864 E7080000 		.4byte	0x8e7
 9522 0868 60       		.byte	0x60
 9523 0869 11       		.uleb128 0x11
 9524 086a 64657600 		.ascii	"dev\000"
 9525 086e 07       		.byte	0x7
 9526 086f 8B01     		.2byte	0x18b
 9527 0871 74030000 		.4byte	0x374
 9528 0875 A0       		.byte	0xa0
 9529 0876 12       		.uleb128 0x12
 9530 0877 F00C0000 		.4byte	.LASF127
 9531 087b 07       		.byte	0x7
 9532 087c 8C01     		.2byte	0x18c
 9533 087e F7080000 		.4byte	0x8f7
 9534 0882 B0       		.byte	0xb0
 9535 0883 14       		.uleb128 0x14
 9536 0884 656E6300 		.ascii	"enc\000"
 9537 0888 07       		.byte	0x7
 9538 0889 8D01     		.2byte	0x18d
 9539 088b 07090000 		.4byte	0x907
 9540 088f 9001     		.2byte	0x190
 9541 0891 14       		.uleb128 0x14
 9542 0892 656D6700 		.ascii	"emg\000"
 9543 0896 07       		.byte	0x7
 9544 0897 8E01     		.2byte	0x18e
 9545 0899 60060000 		.4byte	0x660
 9546 089d F001     		.2byte	0x1f0
 9547 089f 14       		.uleb128 0x14
 9548 08a0 696D7500 		.ascii	"imu\000"
 9549 08a4 07       		.byte	0x7
 9550 08a5 8F01     		.2byte	0x18f
 9551 08a7 DC060000 		.4byte	0x6dc
 9552 08ab 0002     		.2byte	0x200
 9553 08ad 14       		.uleb128 0x14
 9554 08ae 65787000 		.ascii	"exp\000"
 9555 08b2 07       		.byte	0x7
 9556 08b3 9001     		.2byte	0x190
 9557 08b5 34070000 		.4byte	0x734
 9558 08b9 2002     		.2byte	0x220
 9559 08bb 15       		.uleb128 0x15
 9560 08bc 4D000000 		.4byte	.LASF128
 9561 08c0 07       		.byte	0x7
 9562 08c1 9101     		.2byte	0x191
 9563 08c3 17090000 		.4byte	0x917
 9564 08c7 4002     		.2byte	0x240
 9565 08c9 14       		.uleb128 0x14
 9566 08ca 534800   		.ascii	"SH\000"
 9567 08cd 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 214


 9568 08ce 9301     		.2byte	0x193
 9569 08d0 D8070000 		.4byte	0x7d8
 9570 08d4 A002     		.2byte	0x2a0
 9571 08d6 00       		.byte	0
 9572 08d7 07       		.uleb128 0x7
 9573 08d8 81000000 		.4byte	0x81
 9574 08dc E7080000 		.4byte	0x8e7
 9575 08e0 08       		.uleb128 0x8
 9576 08e1 0E010000 		.4byte	0x10e
 9577 08e5 0E       		.byte	0xe
 9578 08e6 00       		.byte	0
 9579 08e7 07       		.uleb128 0x7
 9580 08e8 81000000 		.4byte	0x81
 9581 08ec F7080000 		.4byte	0x8f7
 9582 08f0 08       		.uleb128 0x8
 9583 08f1 0E010000 		.4byte	0x10e
 9584 08f5 3F       		.byte	0x3f
 9585 08f6 00       		.byte	0
 9586 08f7 07       		.uleb128 0x7
 9587 08f8 13040000 		.4byte	0x413
 9588 08fc 07090000 		.4byte	0x907
 9589 0900 08       		.uleb128 0x8
 9590 0901 0E010000 		.4byte	0x10e
 9591 0905 01       		.byte	0x1
 9592 0906 00       		.byte	0
 9593 0907 07       		.uleb128 0x7
 9594 0908 AD050000 		.4byte	0x5ad
 9595 090c 17090000 		.4byte	0x917
 9596 0910 08       		.uleb128 0x8
 9597 0911 0E010000 		.4byte	0x10e
 9598 0915 01       		.byte	0x1
 9599 0916 00       		.byte	0
 9600 0917 07       		.uleb128 0x7
 9601 0918 A3070000 		.4byte	0x7a3
 9602 091c 27090000 		.4byte	0x927
 9603 0920 08       		.uleb128 0x8
 9604 0921 0E010000 		.4byte	0x10e
 9605 0925 02       		.byte	0x2
 9606 0926 00       		.byte	0
 9607 0927 10       		.uleb128 0x10
 9608 0928 080B0000 		.4byte	.LASF129
 9609 092c 28       		.byte	0x28
 9610 092d 07       		.byte	0x7
 9611 092e A101     		.2byte	0x1a1
 9612 0930 83090000 		.4byte	0x983
 9613 0934 12       		.uleb128 0x12
 9614 0935 71040000 		.4byte	.LASF130
 9615 0939 07       		.byte	0x7
 9616 093a A201     		.2byte	0x1a2
 9617 093c 81000000 		.4byte	0x81
 9618 0940 00       		.byte	0
 9619 0941 12       		.uleb128 0x12
 9620 0942 A1020000 		.4byte	.LASF131
 9621 0946 07       		.byte	0x7
 9622 0947 A301     		.2byte	0x1a3
 9623 0949 83090000 		.4byte	0x983
 9624 094d 02       		.byte	0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 215


 9625 094e 12       		.uleb128 0x12
 9626 094f 760A0000 		.4byte	.LASF132
 9627 0953 07       		.byte	0x7
 9628 0954 A401     		.2byte	0x1a4
 9629 0956 83090000 		.4byte	0x983
 9630 095a 08       		.byte	0x8
 9631 095b 12       		.uleb128 0x12
 9632 095c 140B0000 		.4byte	.LASF133
 9633 0960 07       		.byte	0x7
 9634 0961 A501     		.2byte	0x1a5
 9635 0963 83090000 		.4byte	0x983
 9636 0967 0E       		.byte	0xe
 9637 0968 12       		.uleb128 0x12
 9638 0969 47070000 		.4byte	.LASF134
 9639 096d 07       		.byte	0x7
 9640 096e A601     		.2byte	0x1a6
 9641 0970 93090000 		.4byte	0x993
 9642 0974 14       		.byte	0x14
 9643 0975 12       		.uleb128 0x12
 9644 0976 86010000 		.4byte	.LASF135
 9645 097a 07       		.byte	0x7
 9646 097b A701     		.2byte	0x1a7
 9647 097d B1000000 		.4byte	0xb1
 9648 0981 24       		.byte	0x24
 9649 0982 00       		.byte	0
 9650 0983 07       		.uleb128 0x7
 9651 0984 B1000000 		.4byte	0xb1
 9652 0988 93090000 		.4byte	0x993
 9653 098c 08       		.uleb128 0x8
 9654 098d 0E010000 		.4byte	0x10e
 9655 0991 02       		.byte	0x2
 9656 0992 00       		.byte	0
 9657 0993 07       		.uleb128 0x7
 9658 0994 D5000000 		.4byte	0xd5
 9659 0998 A3090000 		.4byte	0x9a3
 9660 099c 08       		.uleb128 0x8
 9661 099d 0E010000 		.4byte	0x10e
 9662 09a1 03       		.byte	0x3
 9663 09a2 00       		.byte	0
 9664 09a3 10       		.uleb128 0x10
 9665 09a4 200F0000 		.4byte	.LASF136
 9666 09a8 08       		.byte	0x8
 9667 09a9 07       		.byte	0x7
 9668 09aa AE01     		.2byte	0x1ae
 9669 09ac CB090000 		.4byte	0x9cb
 9670 09b0 12       		.uleb128 0x12
 9671 09b1 18050000 		.4byte	.LASF137
 9672 09b5 07       		.byte	0x7
 9673 09b6 AF01     		.2byte	0x1af
 9674 09b8 BD000000 		.4byte	0xbd
 9675 09bc 00       		.byte	0
 9676 09bd 12       		.uleb128 0x12
 9677 09be B7010000 		.4byte	.LASF138
 9678 09c2 07       		.byte	0x7
 9679 09c3 B001     		.2byte	0x1b0
 9680 09c5 BD000000 		.4byte	0xbd
 9681 09c9 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 216


 9682 09ca 00       		.byte	0
 9683 09cb 10       		.uleb128 0x10
 9684 09cc 42030000 		.4byte	.LASF139
 9685 09d0 06       		.byte	0x6
 9686 09d1 07       		.byte	0x7
 9687 09d2 B701     		.2byte	0x1b7
 9688 09d4 0D0A0000 		.4byte	0xa0d
 9689 09d8 12       		.uleb128 0x12
 9690 09d9 BD060000 		.4byte	.LASF140
 9691 09dd 07       		.byte	0x7
 9692 09de B801     		.2byte	0x1b8
 9693 09e0 81000000 		.4byte	0x81
 9694 09e4 00       		.byte	0
 9695 09e5 12       		.uleb128 0x12
 9696 09e6 3C0F0000 		.4byte	.LASF141
 9697 09ea 07       		.byte	0x7
 9698 09eb B901     		.2byte	0x1b9
 9699 09ed 81000000 		.4byte	0x81
 9700 09f1 01       		.byte	0x1
 9701 09f2 12       		.uleb128 0x12
 9702 09f3 A5050000 		.4byte	.LASF142
 9703 09f7 07       		.byte	0x7
 9704 09f8 BA01     		.2byte	0x1ba
 9705 09fa B1000000 		.4byte	0xb1
 9706 09fe 02       		.byte	0x2
 9707 09ff 12       		.uleb128 0x12
 9708 0a00 D0080000 		.4byte	.LASF143
 9709 0a04 07       		.byte	0x7
 9710 0a05 BB01     		.2byte	0x1bb
 9711 0a07 B1000000 		.4byte	0xb1
 9712 0a0b 04       		.byte	0x4
 9713 0a0c 00       		.byte	0
 9714 0a0d 16       		.uleb128 0x16
 9715 0a0e 01       		.byte	0x1
 9716 0a0f 2C000000 		.4byte	0x2c
 9717 0a13 07       		.byte	0x7
 9718 0a14 BF01     		.2byte	0x1bf
 9719 0a16 3F0A0000 		.4byte	0xa3f
 9720 0a1a 0A       		.uleb128 0xa
 9721 0a1b 35050000 		.4byte	.LASF144
 9722 0a1f 00       		.byte	0
 9723 0a20 0A       		.uleb128 0xa
 9724 0a21 BA0B0000 		.4byte	.LASF145
 9725 0a25 01       		.byte	0x1
 9726 0a26 0A       		.uleb128 0xa
 9727 0a27 030A0000 		.4byte	.LASF146
 9728 0a2b 02       		.byte	0x2
 9729 0a2c 0A       		.uleb128 0xa
 9730 0a2d F5010000 		.4byte	.LASF147
 9731 0a31 03       		.byte	0x3
 9732 0a32 0A       		.uleb128 0xa
 9733 0a33 FD080000 		.4byte	.LASF148
 9734 0a37 04       		.byte	0x4
 9735 0a38 0A       		.uleb128 0xa
 9736 0a39 7E0B0000 		.4byte	.LASF149
 9737 0a3d 05       		.byte	0x5
 9738 0a3e 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 217


 9739 0a3f 05       		.uleb128 0x5
 9740 0a40 50010000 		.4byte	.LASF150
 9741 0a44 07       		.byte	0x7
 9742 0a45 C701     		.2byte	0x1c7
 9743 0a47 0D0A0000 		.4byte	0xa0d
 9744 0a4b 16       		.uleb128 0x16
 9745 0a4c 01       		.byte	0x1
 9746 0a4d 2C000000 		.4byte	0x2c
 9747 0a51 07       		.byte	0x7
 9748 0a52 C901     		.2byte	0x1c9
 9749 0a54 770A0000 		.4byte	0xa77
 9750 0a58 0A       		.uleb128 0xa
 9751 0a59 79010000 		.4byte	.LASF151
 9752 0a5d 00       		.byte	0
 9753 0a5e 0A       		.uleb128 0xa
 9754 0a5f E5060000 		.4byte	.LASF152
 9755 0a63 01       		.byte	0x1
 9756 0a64 0A       		.uleb128 0xa
 9757 0a65 60070000 		.4byte	.LASF153
 9758 0a69 02       		.byte	0x2
 9759 0a6a 0A       		.uleb128 0xa
 9760 0a6b FA020000 		.4byte	.LASF154
 9761 0a6f 03       		.byte	0x3
 9762 0a70 0A       		.uleb128 0xa
 9763 0a71 FB0E0000 		.4byte	.LASF155
 9764 0a75 04       		.byte	0x4
 9765 0a76 00       		.byte	0
 9766 0a77 05       		.uleb128 0x5
 9767 0a78 7F0C0000 		.4byte	.LASF156
 9768 0a7c 07       		.byte	0x7
 9769 0a7d D001     		.2byte	0x1d0
 9770 0a7f 4B0A0000 		.4byte	0xa4b
 9771 0a83 17       		.uleb128 0x17
 9772 0a84 F3040000 		.4byte	.LASF157
 9773 0a88 01       		.byte	0x1
 9774 0a89 62       		.byte	0x62
 9775 0a8a 00000000 		.4byte	.LFB64
 9776 0a8e 18000000 		.4byte	.LFE64-.LFB64
 9777 0a92 01       		.uleb128 0x1
 9778 0a93 9C       		.byte	0x9c
 9779 0a94 17       		.uleb128 0x17
 9780 0a95 F20D0000 		.4byte	.LASF158
 9781 0a99 01       		.byte	0x1
 9782 0a9a 6D       		.byte	0x6d
 9783 0a9b 00000000 		.4byte	.LFB65
 9784 0a9f 20000000 		.4byte	.LFE65-.LFB65
 9785 0aa3 01       		.uleb128 0x1
 9786 0aa4 9C       		.byte	0x9c
 9787 0aa5 18       		.uleb128 0x18
 9788 0aa6 AC080000 		.4byte	.LASF172
 9789 0aaa 01       		.byte	0x1
 9790 0aab 86       		.byte	0x86
 9791 0aac 00000000 		.4byte	.LFB66
 9792 0ab0 F4010000 		.4byte	.LFE66-.LFB66
 9793 0ab4 01       		.uleb128 0x1
 9794 0ab5 9C       		.byte	0x9c
 9795 0ab6 3A0B0000 		.4byte	0xb3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 218


 9796 0aba 19       		.uleb128 0x19
 9797 0abb AB000000 		.4byte	.LASF159
 9798 0abf 01       		.byte	0x1
 9799 0ac0 8B       		.byte	0x8b
 9800 0ac1 81000000 		.4byte	0x81
 9801 0ac5 05       		.uleb128 0x5
 9802 0ac6 03       		.byte	0x3
 9803 0ac7 00000000 		.4byte	state.10355
 9804 0acb 19       		.uleb128 0x19
 9805 0acc CA050000 		.4byte	.LASF160
 9806 0ad0 01       		.byte	0x1
 9807 0ad1 8E       		.byte	0x8e
 9808 0ad2 81000000 		.4byte	0x81
 9809 0ad6 05       		.uleb128 0x5
 9810 0ad7 03       		.byte	0x3
 9811 0ad8 08000000 		.4byte	data_packet_index.10356
 9812 0adc 19       		.uleb128 0x19
 9813 0add 470B0000 		.4byte	.LASF161
 9814 0ae1 01       		.byte	0x1
 9815 0ae2 8F       		.byte	0x8f
 9816 0ae3 81000000 		.4byte	0x81
 9817 0ae7 05       		.uleb128 0x5
 9818 0ae8 03       		.byte	0x3
 9819 0ae9 07000000 		.4byte	data_packet_length.10357
 9820 0aed 19       		.uleb128 0x19
 9821 0aee DC050000 		.4byte	.LASF162
 9822 0af2 01       		.byte	0x1
 9823 0af3 90       		.byte	0x90
 9824 0af4 D3020000 		.4byte	0x2d3
 9825 0af8 05       		.uleb128 0x5
 9826 0af9 03       		.byte	0x3
 9827 0afa 0C000000 		.4byte	data_packet_buffer.10358
 9828 0afe 19       		.uleb128 0x19
 9829 0aff 96090000 		.4byte	.LASF163
 9830 0b03 01       		.byte	0x1
 9831 0b04 91       		.byte	0x91
 9832 0b05 03040000 		.4byte	0x403
 9833 0b09 05       		.uleb128 0x5
 9834 0b0a 03       		.byte	0x3
 9835 0b0b 04000000 		.4byte	rx_queue.10359
 9836 0b0f 19       		.uleb128 0x19
 9837 0b10 33010000 		.4byte	.LASF164
 9838 0b14 01       		.byte	0x1
 9839 0b15 94       		.byte	0x94
 9840 0b16 81000000 		.4byte	0x81
 9841 0b1a 02       		.uleb128 0x2
 9842 0b1b 91       		.byte	0x91
 9843 0b1c 75       		.sleb128 -11
 9844 0b1d 19       		.uleb128 0x19
 9845 0b1e 8F050000 		.4byte	.LASF165
 9846 0b22 01       		.byte	0x1
 9847 0b23 95       		.byte	0x95
 9848 0b24 81000000 		.4byte	0x81
 9849 0b28 02       		.uleb128 0x2
 9850 0b29 91       		.byte	0x91
 9851 0b2a 77       		.sleb128 -9
 9852 0b2b 19       		.uleb128 0x19
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 219


 9853 0b2c 9A060000 		.4byte	.LASF166
 9854 0b30 01       		.byte	0x1
 9855 0b31 96       		.byte	0x96
 9856 0b32 81000000 		.4byte	0x81
 9857 0b36 02       		.uleb128 0x2
 9858 0b37 91       		.byte	0x91
 9859 0b38 76       		.sleb128 -10
 9860 0b39 00       		.byte	0
 9861 0b3a 1A       		.uleb128 0x1a
 9862 0b3b 100D0000 		.4byte	.LASF191
 9863 0b3f 01       		.byte	0x1
 9864 0b40 0601     		.2byte	0x106
 9865 0b42 00000000 		.4byte	.LFB67
 9866 0b46 8C040000 		.4byte	.LFE67-.LFB67
 9867 0b4a 01       		.uleb128 0x1
 9868 0b4b 9C       		.byte	0x9c
 9869 0b4c BA0B0000 		.4byte	0xbba
 9870 0b50 1B       		.uleb128 0x1b
 9871 0b51 FD050000 		.4byte	.LASF167
 9872 0b55 01       		.byte	0x1
 9873 0b56 0801     		.2byte	0x108
 9874 0b58 8D000000 		.4byte	0x8d
 9875 0b5c 05       		.uleb128 0x5
 9876 0b5d 03       		.byte	0x3
 9877 0b5e 00000000 		.4byte	counter_calibration.10375
 9878 0b62 1B       		.uleb128 0x1b
 9879 0b63 CA0A0000 		.4byte	.LASF168
 9880 0b67 01       		.byte	0x1
 9881 0b68 0901     		.2byte	0x109
 9882 0b6a 8D000000 		.4byte	0x8d
 9883 0b6e 05       		.uleb128 0x5
 9884 0b6f 03       		.byte	0x3
 9885 0b70 02000000 		.4byte	counter_tension_func.10376
 9886 0b74 1B       		.uleb128 0x1b
 9887 0b75 4A010000 		.4byte	.LASF169
 9888 0b79 01       		.byte	0x1
 9889 0b7a 0A01     		.2byte	0x10a
 9890 0b7c BA0B0000 		.4byte	0xbba
 9891 0b80 03       		.uleb128 0x3
 9892 0b81 91       		.byte	0x91
 9893 0b82 A86C     		.sleb128 -2520
 9894 0b84 1B       		.uleb128 0x1b
 9895 0b85 AD0A0000 		.4byte	.LASF170
 9896 0b89 01       		.byte	0x1
 9897 0b8a 0C01     		.2byte	0x10c
 9898 0b8c 81000000 		.4byte	0x81
 9899 0b90 02       		.uleb128 0x2
 9900 0b91 91       		.byte	0x91
 9901 0b92 6E       		.sleb128 -18
 9902 0b93 1B       		.uleb128 0x1b
 9903 0b94 71080000 		.4byte	.LASF171
 9904 0b98 01       		.byte	0x1
 9905 0b99 0D01     		.2byte	0x10d
 9906 0b9b 81000000 		.4byte	0x81
 9907 0b9f 02       		.uleb128 0x2
 9908 0ba0 91       		.byte	0x91
 9909 0ba1 6D       		.sleb128 -19
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 220


 9910 0ba2 1C       		.uleb128 0x1c
 9911 0ba3 E2000000 		.4byte	.LBB2
 9912 0ba7 C8000000 		.4byte	.LBE2-.LBB2
 9913 0bab 1D       		.uleb128 0x1d
 9914 0bac 6900     		.ascii	"i\000"
 9915 0bae 01       		.byte	0x1
 9916 0baf 3F01     		.2byte	0x13f
 9917 0bb1 81000000 		.4byte	0x81
 9918 0bb5 02       		.uleb128 0x2
 9919 0bb6 91       		.byte	0x91
 9920 0bb7 6F       		.sleb128 -17
 9921 0bb8 00       		.byte	0
 9922 0bb9 00       		.byte	0
 9923 0bba 07       		.uleb128 0x7
 9924 0bbb E3000000 		.4byte	0xe3
 9925 0bbf CB0B0000 		.4byte	0xbcb
 9926 0bc3 1E       		.uleb128 0x1e
 9927 0bc4 0E010000 		.4byte	0x10e
 9928 0bc8 C309     		.2byte	0x9c3
 9929 0bca 00       		.byte	0
 9930 0bcb 1F       		.uleb128 0x1f
 9931 0bcc 3C050000 		.4byte	.LASF173
 9932 0bd0 01       		.byte	0x1
 9933 0bd1 0D02     		.2byte	0x20d
 9934 0bd3 00000000 		.4byte	.LFB68
 9935 0bd7 DE0A0000 		.4byte	.LFE68-.LFB68
 9936 0bdb 01       		.uleb128 0x1
 9937 0bdc 9C       		.byte	0x9c
 9938 0bdd C40D0000 		.4byte	0xdc4
 9939 0be1 1B       		.uleb128 0x1b
 9940 0be2 FC000000 		.4byte	.LASF174
 9941 0be6 01       		.byte	0x1
 9942 0be7 0F02     		.2byte	0x20f
 9943 0be9 BD000000 		.4byte	0xbd
 9944 0bed 02       		.uleb128 0x2
 9945 0bee 91       		.byte	0x91
 9946 0bef 74       		.sleb128 -12
 9947 0bf0 1B       		.uleb128 0x1b
 9948 0bf1 6C0A0000 		.4byte	.LASF175
 9949 0bf5 01       		.byte	0x1
 9950 0bf6 1002     		.2byte	0x210
 9951 0bf8 BD000000 		.4byte	0xbd
 9952 0bfc 03       		.uleb128 0x3
 9953 0bfd 91       		.byte	0x91
 9954 0bfe A47F     		.sleb128 -92
 9955 0c00 1B       		.uleb128 0x1b
 9956 0c01 AD0D0000 		.4byte	.LASF176
 9957 0c05 01       		.byte	0x1
 9958 0c06 1102     		.2byte	0x211
 9959 0c08 BD000000 		.4byte	0xbd
 9960 0c0c 03       		.uleb128 0x3
 9961 0c0d 91       		.byte	0x91
 9962 0c0e A07F     		.sleb128 -96
 9963 0c10 1B       		.uleb128 0x1b
 9964 0c11 B3090000 		.4byte	.LASF177
 9965 0c15 01       		.byte	0x1
 9966 0c16 1202     		.2byte	0x212
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 221


 9967 0c18 BD000000 		.4byte	0xbd
 9968 0c1c 02       		.uleb128 0x2
 9969 0c1d 91       		.byte	0x91
 9970 0c1e 70       		.sleb128 -16
 9971 0c1f 1B       		.uleb128 0x1b
 9972 0c20 77040000 		.4byte	.LASF178
 9973 0c24 01       		.byte	0x1
 9974 0c25 1302     		.2byte	0x213
 9975 0c27 BD000000 		.4byte	0xbd
 9976 0c2b 02       		.uleb128 0x2
 9977 0c2c 91       		.byte	0x91
 9978 0c2d 6C       		.sleb128 -20
 9979 0c2e 1B       		.uleb128 0x1b
 9980 0c2f 4B030000 		.4byte	.LASF179
 9981 0c33 01       		.byte	0x1
 9982 0c34 1402     		.2byte	0x214
 9983 0c36 BD000000 		.4byte	0xbd
 9984 0c3a 03       		.uleb128 0x3
 9985 0c3b 91       		.byte	0x91
 9986 0c3c AC7F     		.sleb128 -84
 9987 0c3e 1B       		.uleb128 0x1b
 9988 0c3f 55030000 		.4byte	.LASF180
 9989 0c43 01       		.byte	0x1
 9990 0c44 1402     		.2byte	0x214
 9991 0c46 BD000000 		.4byte	0xbd
 9992 0c4a 03       		.uleb128 0x3
 9993 0c4b 91       		.byte	0x91
 9994 0c4c A87F     		.sleb128 -88
 9995 0c4e 1B       		.uleb128 0x1b
 9996 0c4f AD0A0000 		.4byte	.LASF170
 9997 0c53 01       		.byte	0x1
 9998 0c54 1602     		.2byte	0x216
 9999 0c56 81000000 		.4byte	0x81
 10000 0c5a 02       		.uleb128 0x2
 10001 0c5b 91       		.byte	0x91
 10002 0c5c 6B       		.sleb128 -21
 10003 0c5d 1B       		.uleb128 0x1b
 10004 0c5e C5020000 		.4byte	.LASF181
 10005 0c62 01       		.byte	0x1
 10006 0c63 1802     		.2byte	0x218
 10007 0c65 C40D0000 		.4byte	0xdc4
 10008 0c69 02       		.uleb128 0x2
 10009 0c6a 91       		.byte	0x91
 10010 0c6b 64       		.sleb128 -28
 10011 0c6c 1B       		.uleb128 0x1b
 10012 0c6d 47020000 		.4byte	.LASF182
 10013 0c71 01       		.byte	0x1
 10014 0c72 1902     		.2byte	0x219
 10015 0c74 81000000 		.4byte	0x81
 10016 0c78 02       		.uleb128 0x2
 10017 0c79 91       		.byte	0x91
 10018 0c7a 63       		.sleb128 -29
 10019 0c7b 1D       		.uleb128 0x1d
 10020 0c7c 6B5F7000 		.ascii	"k_p\000"
 10021 0c80 01       		.byte	0x1
 10022 0c81 1B02     		.2byte	0x21b
 10023 0c83 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 222


 10024 0c87 02       		.uleb128 0x2
 10025 0c88 91       		.byte	0x91
 10026 0c89 5C       		.sleb128 -36
 10027 0c8a 1D       		.uleb128 0x1d
 10028 0c8b 6B5F6900 		.ascii	"k_i\000"
 10029 0c8f 01       		.byte	0x1
 10030 0c90 1C02     		.2byte	0x21c
 10031 0c92 BD000000 		.4byte	0xbd
 10032 0c96 02       		.uleb128 0x2
 10033 0c97 91       		.byte	0x91
 10034 0c98 58       		.sleb128 -40
 10035 0c99 1D       		.uleb128 0x1d
 10036 0c9a 6B5F6400 		.ascii	"k_d\000"
 10037 0c9e 01       		.byte	0x1
 10038 0c9f 1D02     		.2byte	0x21d
 10039 0ca1 BD000000 		.4byte	0xbd
 10040 0ca5 02       		.uleb128 0x2
 10041 0ca6 91       		.byte	0x91
 10042 0ca7 54       		.sleb128 -44
 10043 0ca8 1B       		.uleb128 0x1b
 10044 0ca9 5A0B0000 		.4byte	.LASF69
 10045 0cad 01       		.byte	0x1
 10046 0cae 1F02     		.2byte	0x21f
 10047 0cb0 BD000000 		.4byte	0xbd
 10048 0cb4 02       		.uleb128 0x2
 10049 0cb5 91       		.byte	0x91
 10050 0cb6 50       		.sleb128 -48
 10051 0cb7 1B       		.uleb128 0x1b
 10052 0cb8 DC040000 		.4byte	.LASF70
 10053 0cbc 01       		.byte	0x1
 10054 0cbd 2002     		.2byte	0x220
 10055 0cbf BD000000 		.4byte	0xbd
 10056 0cc3 02       		.uleb128 0x2
 10057 0cc4 91       		.byte	0x91
 10058 0cc5 4C       		.sleb128 -52
 10059 0cc6 1B       		.uleb128 0x1b
 10060 0cc7 CF040000 		.4byte	.LASF71
 10061 0ccb 01       		.byte	0x1
 10062 0ccc 2102     		.2byte	0x221
 10063 0cce BD000000 		.4byte	0xbd
 10064 0cd2 02       		.uleb128 0x2
 10065 0cd3 91       		.byte	0x91
 10066 0cd4 48       		.sleb128 -56
 10067 0cd5 1B       		.uleb128 0x1b
 10068 0cd6 8D0D0000 		.4byte	.LASF72
 10069 0cda 01       		.byte	0x1
 10070 0cdb 2302     		.2byte	0x223
 10071 0cdd BD000000 		.4byte	0xbd
 10072 0ce1 02       		.uleb128 0x2
 10073 0ce2 91       		.byte	0x91
 10074 0ce3 44       		.sleb128 -60
 10075 0ce4 1B       		.uleb128 0x1b
 10076 0ce5 78050000 		.4byte	.LASF73
 10077 0ce9 01       		.byte	0x1
 10078 0cea 2402     		.2byte	0x224
 10079 0cec BD000000 		.4byte	0xbd
 10080 0cf0 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 223


 10081 0cf1 91       		.byte	0x91
 10082 0cf2 40       		.sleb128 -64
 10083 0cf3 1B       		.uleb128 0x1b
 10084 0cf4 DB0C0000 		.4byte	.LASF74
 10085 0cf8 01       		.byte	0x1
 10086 0cf9 2502     		.2byte	0x225
 10087 0cfb BD000000 		.4byte	0xbd
 10088 0cff 03       		.uleb128 0x3
 10089 0d00 91       		.byte	0x91
 10090 0d01 BC7F     		.sleb128 -68
 10091 0d03 1B       		.uleb128 0x1b
 10092 0d04 86050000 		.4byte	.LASF75
 10093 0d08 01       		.byte	0x1
 10094 0d09 2702     		.2byte	0x227
 10095 0d0b BD000000 		.4byte	0xbd
 10096 0d0f 03       		.uleb128 0x3
 10097 0d10 91       		.byte	0x91
 10098 0d11 B87F     		.sleb128 -72
 10099 0d13 1B       		.uleb128 0x1b
 10100 0d14 91060000 		.4byte	.LASF76
 10101 0d18 01       		.byte	0x1
 10102 0d19 2802     		.2byte	0x228
 10103 0d1b BD000000 		.4byte	0xbd
 10104 0d1f 03       		.uleb128 0x3
 10105 0d20 91       		.byte	0x91
 10106 0d21 B47F     		.sleb128 -76
 10107 0d23 1B       		.uleb128 0x1b
 10108 0d24 330F0000 		.4byte	.LASF77
 10109 0d28 01       		.byte	0x1
 10110 0d29 2902     		.2byte	0x229
 10111 0d2b BD000000 		.4byte	0xbd
 10112 0d2f 03       		.uleb128 0x3
 10113 0d30 91       		.byte	0x91
 10114 0d31 B07F     		.sleb128 -80
 10115 0d33 1B       		.uleb128 0x1b
 10116 0d34 53050000 		.4byte	.LASF183
 10117 0d38 01       		.byte	0x1
 10118 0d39 2D02     		.2byte	0x22d
 10119 0d3b BD000000 		.4byte	0xbd
 10120 0d3f 05       		.uleb128 0x5
 10121 0d40 03       		.byte	0x3
 10122 0d41 90000000 		.4byte	pos_error_sum.10408
 10123 0d45 1B       		.uleb128 0x1b
 10124 0d46 93030000 		.4byte	.LASF184
 10125 0d4a 01       		.byte	0x1
 10126 0d4b 2E02     		.2byte	0x22e
 10127 0d4d BD000000 		.4byte	0xbd
 10128 0d51 05       		.uleb128 0x5
 10129 0d52 03       		.byte	0x3
 10130 0d53 9C000000 		.4byte	curr_error_sum.10409
 10131 0d57 1B       		.uleb128 0x1b
 10132 0d58 0B0A0000 		.4byte	.LASF185
 10133 0d5c 01       		.byte	0x1
 10134 0d5d 3002     		.2byte	0x230
 10135 0d5f BD000000 		.4byte	0xbd
 10136 0d63 05       		.uleb128 0x5
 10137 0d64 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 224


 10138 0d65 94000000 		.4byte	prev_pos_err.10410
 10139 0d69 1B       		.uleb128 0x1b
 10140 0d6a 390B0000 		.4byte	.LASF186
 10141 0d6e 01       		.byte	0x1
 10142 0d6f 3102     		.2byte	0x231
 10143 0d71 BD000000 		.4byte	0xbd
 10144 0d75 05       		.uleb128 0x5
 10145 0d76 03       		.byte	0x3
 10146 0d77 A0000000 		.4byte	prev_curr_err.10411
 10147 0d7b 1B       		.uleb128 0x1b
 10148 0d7c 230D0000 		.4byte	.LASF187
 10149 0d80 01       		.byte	0x1
 10150 0d81 3202     		.2byte	0x232
 10151 0d83 BD000000 		.4byte	0xbd
 10152 0d87 05       		.uleb128 0x5
 10153 0d88 03       		.byte	0x3
 10154 0d89 A4000000 		.4byte	prev_pwm.10412
 10155 0d8d 1B       		.uleb128 0x1b
 10156 0d8e E2040000 		.4byte	.LASF188
 10157 0d92 01       		.byte	0x1
 10158 0d93 3402     		.2byte	0x234
 10159 0d95 81000000 		.4byte	0x81
 10160 0d99 05       		.uleb128 0x5
 10161 0d9a 03       		.byte	0x3
 10162 0d9b 98000000 		.4byte	motor_dir.10413
 10163 0d9f 1B       		.uleb128 0x1b
 10164 0da0 AB050000 		.4byte	.LASF189
 10165 0da4 01       		.byte	0x1
 10166 0da5 3502     		.2byte	0x235
 10167 0da7 99000000 		.4byte	0x99
 10168 0dab 05       		.uleb128 0x5
 10169 0dac 03       		.byte	0x3
 10170 0dad A8000000 		.4byte	position_counter.10414
 10171 0db1 1B       		.uleb128 0x1b
 10172 0db2 8A090000 		.4byte	.LASF190
 10173 0db6 01       		.byte	0x1
 10174 0db7 3602     		.2byte	0x236
 10175 0db9 81000000 		.4byte	0x81
 10176 0dbd 05       		.uleb128 0x5
 10177 0dbe 03       		.byte	0x3
 10178 0dbf 8C000000 		.4byte	current_emg.10415
 10179 0dc3 00       		.byte	0
 10180 0dc4 0C       		.uleb128 0xc
 10181 0dc5 04       		.byte	0x4
 10182 0dc6 13040000 		.4byte	0x413
 10183 0dca 1A       		.uleb128 0x1a
 10184 0dcb 9F040000 		.4byte	.LASF192
 10185 0dcf 01       		.byte	0x1
 10186 0dd0 EE03     		.2byte	0x3ee
 10187 0dd2 00000000 		.4byte	.LFB69
 10188 0dd6 D40C0000 		.4byte	.LFE69-.LFB69
 10189 0dda 01       		.uleb128 0x1
 10190 0ddb 9C       		.byte	0x9c
 10191 0ddc C50F0000 		.4byte	0xfc5
 10192 0de0 20       		.uleb128 0x20
 10193 0de1 69647800 		.ascii	"idx\000"
 10194 0de5 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 225


 10195 0de6 EE03     		.2byte	0x3ee
 10196 0de8 81000000 		.4byte	0x81
 10197 0dec 03       		.uleb128 0x3
 10198 0ded 91       		.byte	0x91
 10199 0dee 977F     		.sleb128 -105
 10200 0df0 1B       		.uleb128 0x1b
 10201 0df1 FC000000 		.4byte	.LASF174
 10202 0df5 01       		.byte	0x1
 10203 0df6 F003     		.2byte	0x3f0
 10204 0df8 BD000000 		.4byte	0xbd
 10205 0dfc 02       		.uleb128 0x2
 10206 0dfd 91       		.byte	0x91
 10207 0dfe 6C       		.sleb128 -20
 10208 0dff 1B       		.uleb128 0x1b
 10209 0e00 6C0A0000 		.4byte	.LASF175
 10210 0e04 01       		.byte	0x1
 10211 0e05 F103     		.2byte	0x3f1
 10212 0e07 BD000000 		.4byte	0xbd
 10213 0e0b 02       		.uleb128 0x2
 10214 0e0c 91       		.byte	0x91
 10215 0e0d 68       		.sleb128 -24
 10216 0e0e 1B       		.uleb128 0x1b
 10217 0e0f AD0D0000 		.4byte	.LASF176
 10218 0e13 01       		.byte	0x1
 10219 0e14 F203     		.2byte	0x3f2
 10220 0e16 BD000000 		.4byte	0xbd
 10221 0e1a 03       		.uleb128 0x3
 10222 0e1b 91       		.byte	0x91
 10223 0e1c 9C7F     		.sleb128 -100
 10224 0e1e 1B       		.uleb128 0x1b
 10225 0e1f B3090000 		.4byte	.LASF177
 10226 0e23 01       		.byte	0x1
 10227 0e24 F303     		.2byte	0x3f3
 10228 0e26 BD000000 		.4byte	0xbd
 10229 0e2a 02       		.uleb128 0x2
 10230 0e2b 91       		.byte	0x91
 10231 0e2c 64       		.sleb128 -28
 10232 0e2d 1B       		.uleb128 0x1b
 10233 0e2e 77040000 		.4byte	.LASF178
 10234 0e32 01       		.byte	0x1
 10235 0e33 F403     		.2byte	0x3f4
 10236 0e35 BD000000 		.4byte	0xbd
 10237 0e39 02       		.uleb128 0x2
 10238 0e3a 91       		.byte	0x91
 10239 0e3b 60       		.sleb128 -32
 10240 0e3c 1B       		.uleb128 0x1b
 10241 0e3d 4B030000 		.4byte	.LASF179
 10242 0e41 01       		.byte	0x1
 10243 0e42 F503     		.2byte	0x3f5
 10244 0e44 BD000000 		.4byte	0xbd
 10245 0e48 03       		.uleb128 0x3
 10246 0e49 91       		.byte	0x91
 10247 0e4a A47F     		.sleb128 -92
 10248 0e4c 1B       		.uleb128 0x1b
 10249 0e4d 55030000 		.4byte	.LASF180
 10250 0e51 01       		.byte	0x1
 10251 0e52 F503     		.2byte	0x3f5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 226


 10252 0e54 BD000000 		.4byte	0xbd
 10253 0e58 03       		.uleb128 0x3
 10254 0e59 91       		.byte	0x91
 10255 0e5a A07F     		.sleb128 -96
 10256 0e5c 1D       		.uleb128 0x1d
 10257 0e5d 4D4F5400 		.ascii	"MOT\000"
 10258 0e61 01       		.byte	0x1
 10259 0e62 F703     		.2byte	0x3f7
 10260 0e64 C40D0000 		.4byte	0xdc4
 10261 0e68 02       		.uleb128 0x2
 10262 0e69 91       		.byte	0x91
 10263 0e6a 5C       		.sleb128 -36
 10264 0e6b 1B       		.uleb128 0x1b
 10265 0e6c 3C0E0000 		.4byte	.LASF193
 10266 0e70 01       		.byte	0x1
 10267 0e71 F803     		.2byte	0x3f8
 10268 0e73 81000000 		.4byte	0x81
 10269 0e77 02       		.uleb128 0x2
 10270 0e78 91       		.byte	0x91
 10271 0e79 5B       		.sleb128 -37
 10272 0e7a 1D       		.uleb128 0x1d
 10273 0e7b 6B5F7000 		.ascii	"k_p\000"
 10274 0e7f 01       		.byte	0x1
 10275 0e80 FA03     		.2byte	0x3fa
 10276 0e82 BD000000 		.4byte	0xbd
 10277 0e86 02       		.uleb128 0x2
 10278 0e87 91       		.byte	0x91
 10279 0e88 54       		.sleb128 -44
 10280 0e89 1D       		.uleb128 0x1d
 10281 0e8a 6B5F6900 		.ascii	"k_i\000"
 10282 0e8e 01       		.byte	0x1
 10283 0e8f FB03     		.2byte	0x3fb
 10284 0e91 BD000000 		.4byte	0xbd
 10285 0e95 02       		.uleb128 0x2
 10286 0e96 91       		.byte	0x91
 10287 0e97 50       		.sleb128 -48
 10288 0e98 1D       		.uleb128 0x1d
 10289 0e99 6B5F6400 		.ascii	"k_d\000"
 10290 0e9d 01       		.byte	0x1
 10291 0e9e FC03     		.2byte	0x3fc
 10292 0ea0 BD000000 		.4byte	0xbd
 10293 0ea4 02       		.uleb128 0x2
 10294 0ea5 91       		.byte	0x91
 10295 0ea6 4C       		.sleb128 -52
 10296 0ea7 1B       		.uleb128 0x1b
 10297 0ea8 5A0B0000 		.4byte	.LASF69
 10298 0eac 01       		.byte	0x1
 10299 0ead FE03     		.2byte	0x3fe
 10300 0eaf BD000000 		.4byte	0xbd
 10301 0eb3 02       		.uleb128 0x2
 10302 0eb4 91       		.byte	0x91
 10303 0eb5 48       		.sleb128 -56
 10304 0eb6 1B       		.uleb128 0x1b
 10305 0eb7 DC040000 		.4byte	.LASF70
 10306 0ebb 01       		.byte	0x1
 10307 0ebc FF03     		.2byte	0x3ff
 10308 0ebe BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 227


 10309 0ec2 02       		.uleb128 0x2
 10310 0ec3 91       		.byte	0x91
 10311 0ec4 44       		.sleb128 -60
 10312 0ec5 1B       		.uleb128 0x1b
 10313 0ec6 CF040000 		.4byte	.LASF71
 10314 0eca 01       		.byte	0x1
 10315 0ecb 0004     		.2byte	0x400
 10316 0ecd BD000000 		.4byte	0xbd
 10317 0ed1 02       		.uleb128 0x2
 10318 0ed2 91       		.byte	0x91
 10319 0ed3 40       		.sleb128 -64
 10320 0ed4 1B       		.uleb128 0x1b
 10321 0ed5 8D0D0000 		.4byte	.LASF72
 10322 0ed9 01       		.byte	0x1
 10323 0eda 0204     		.2byte	0x402
 10324 0edc BD000000 		.4byte	0xbd
 10325 0ee0 03       		.uleb128 0x3
 10326 0ee1 91       		.byte	0x91
 10327 0ee2 BC7F     		.sleb128 -68
 10328 0ee4 1B       		.uleb128 0x1b
 10329 0ee5 78050000 		.4byte	.LASF73
 10330 0ee9 01       		.byte	0x1
 10331 0eea 0304     		.2byte	0x403
 10332 0eec BD000000 		.4byte	0xbd
 10333 0ef0 03       		.uleb128 0x3
 10334 0ef1 91       		.byte	0x91
 10335 0ef2 B87F     		.sleb128 -72
 10336 0ef4 1B       		.uleb128 0x1b
 10337 0ef5 DB0C0000 		.4byte	.LASF74
 10338 0ef9 01       		.byte	0x1
 10339 0efa 0404     		.2byte	0x404
 10340 0efc BD000000 		.4byte	0xbd
 10341 0f00 03       		.uleb128 0x3
 10342 0f01 91       		.byte	0x91
 10343 0f02 B47F     		.sleb128 -76
 10344 0f04 1B       		.uleb128 0x1b
 10345 0f05 86050000 		.4byte	.LASF75
 10346 0f09 01       		.byte	0x1
 10347 0f0a 0604     		.2byte	0x406
 10348 0f0c BD000000 		.4byte	0xbd
 10349 0f10 03       		.uleb128 0x3
 10350 0f11 91       		.byte	0x91
 10351 0f12 B07F     		.sleb128 -80
 10352 0f14 1B       		.uleb128 0x1b
 10353 0f15 91060000 		.4byte	.LASF76
 10354 0f19 01       		.byte	0x1
 10355 0f1a 0704     		.2byte	0x407
 10356 0f1c BD000000 		.4byte	0xbd
 10357 0f20 03       		.uleb128 0x3
 10358 0f21 91       		.byte	0x91
 10359 0f22 AC7F     		.sleb128 -84
 10360 0f24 1B       		.uleb128 0x1b
 10361 0f25 330F0000 		.4byte	.LASF77
 10362 0f29 01       		.byte	0x1
 10363 0f2a 0804     		.2byte	0x408
 10364 0f2c BD000000 		.4byte	0xbd
 10365 0f30 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 228


 10366 0f31 91       		.byte	0x91
 10367 0f32 A87F     		.sleb128 -88
 10368 0f34 1B       		.uleb128 0x1b
 10369 0f35 53050000 		.4byte	.LASF183
 10370 0f39 01       		.byte	0x1
 10371 0f3a 0C04     		.2byte	0x40c
 10372 0f3c 76020000 		.4byte	0x276
 10373 0f40 05       		.uleb128 0x5
 10374 0f41 03       		.byte	0x3
 10375 0f42 B0000000 		.4byte	pos_error_sum.10463
 10376 0f46 1B       		.uleb128 0x1b
 10377 0f47 93030000 		.4byte	.LASF184
 10378 0f4b 01       		.byte	0x1
 10379 0f4c 0D04     		.2byte	0x40d
 10380 0f4e 76020000 		.4byte	0x276
 10381 0f52 05       		.uleb128 0x5
 10382 0f53 03       		.byte	0x3
 10383 0f54 C4000000 		.4byte	curr_error_sum.10464
 10384 0f58 1B       		.uleb128 0x1b
 10385 0f59 0B0A0000 		.4byte	.LASF185
 10386 0f5d 01       		.byte	0x1
 10387 0f5e 0F04     		.2byte	0x40f
 10388 0f60 76020000 		.4byte	0x276
 10389 0f64 05       		.uleb128 0x5
 10390 0f65 03       		.byte	0x3
 10391 0f66 B8000000 		.4byte	prev_pos_err.10465
 10392 0f6a 1B       		.uleb128 0x1b
 10393 0f6b 390B0000 		.4byte	.LASF186
 10394 0f6f 01       		.byte	0x1
 10395 0f70 1004     		.2byte	0x410
 10396 0f72 76020000 		.4byte	0x276
 10397 0f76 05       		.uleb128 0x5
 10398 0f77 03       		.byte	0x3
 10399 0f78 CC000000 		.4byte	prev_curr_err.10466
 10400 0f7c 1B       		.uleb128 0x1b
 10401 0f7d 230D0000 		.4byte	.LASF187
 10402 0f81 01       		.byte	0x1
 10403 0f82 1104     		.2byte	0x411
 10404 0f84 76020000 		.4byte	0x276
 10405 0f88 05       		.uleb128 0x5
 10406 0f89 03       		.byte	0x3
 10407 0f8a D4000000 		.4byte	prev_pwm.10467
 10408 0f8e 1B       		.uleb128 0x1b
 10409 0f8f E2040000 		.4byte	.LASF188
 10410 0f93 01       		.byte	0x1
 10411 0f94 1304     		.2byte	0x413
 10412 0f96 C50F0000 		.4byte	0xfc5
 10413 0f9a 05       		.uleb128 0x5
 10414 0f9b 03       		.byte	0x3
 10415 0f9c C0000000 		.4byte	motor_dir.10468
 10416 0fa0 1B       		.uleb128 0x1b
 10417 0fa1 AB050000 		.4byte	.LASF189
 10418 0fa5 01       		.byte	0x1
 10419 0fa6 1404     		.2byte	0x414
 10420 0fa8 44030000 		.4byte	0x344
 10421 0fac 05       		.uleb128 0x5
 10422 0fad 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 229


 10423 0fae DC000000 		.4byte	position_counter.10469
 10424 0fb2 1B       		.uleb128 0x1b
 10425 0fb3 8A090000 		.4byte	.LASF190
 10426 0fb7 01       		.byte	0x1
 10427 0fb8 1504     		.2byte	0x415
 10428 0fba C50F0000 		.4byte	0xfc5
 10429 0fbe 05       		.uleb128 0x5
 10430 0fbf 03       		.byte	0x3
 10431 0fc0 AC000000 		.4byte	current_emg.10470
 10432 0fc4 00       		.byte	0
 10433 0fc5 07       		.uleb128 0x7
 10434 0fc6 81000000 		.4byte	0x81
 10435 0fca D50F0000 		.4byte	0xfd5
 10436 0fce 08       		.uleb128 0x8
 10437 0fcf 0E010000 		.4byte	0x10e
 10438 0fd3 01       		.byte	0x1
 10439 0fd4 00       		.byte	0
 10440 0fd5 1A       		.uleb128 0x1a
 10441 0fd6 D4020000 		.4byte	.LASF194
 10442 0fda 01       		.byte	0x1
 10443 0fdb CB05     		.2byte	0x5cb
 10444 0fdd 00000000 		.4byte	.LFB70
 10445 0fe1 24080000 		.4byte	.LFE70-.LFB70
 10446 0fe5 01       		.uleb128 0x1
 10447 0fe6 9C       		.byte	0x9c
 10448 0fe7 6F110000 		.4byte	0x116f
 10449 0feb 21       		.uleb128 0x21
 10450 0fec 8A000000 		.4byte	.LASF195
 10451 0ff0 01       		.byte	0x1
 10452 0ff1 CB05     		.2byte	0x5cb
 10453 0ff3 81000000 		.4byte	0x81
 10454 0ff7 03       		.uleb128 0x3
 10455 0ff8 91       		.byte	0x91
 10456 0ff9 BF7F     		.sleb128 -65
 10457 0ffb 21       		.uleb128 0x21
 10458 0ffc 9F090000 		.4byte	.LASF196
 10459 1000 01       		.byte	0x1
 10460 1001 CB05     		.2byte	0x5cb
 10461 1003 81000000 		.4byte	0x81
 10462 1007 03       		.uleb128 0x3
 10463 1008 91       		.byte	0x91
 10464 1009 BE7F     		.sleb128 -66
 10465 100b 1B       		.uleb128 0x1b
 10466 100c 72060000 		.4byte	.LASF197
 10467 1010 01       		.byte	0x1
 10468 1011 CD05     		.2byte	0x5cd
 10469 1013 81000000 		.4byte	0x81
 10470 1017 02       		.uleb128 0x2
 10471 1018 91       		.byte	0x91
 10472 1019 67       		.sleb128 -25
 10473 101a 1D       		.uleb128 0x1d
 10474 101b 6A6A00   		.ascii	"jj\000"
 10475 101e 01       		.byte	0x1
 10476 101f D005     		.2byte	0x5d0
 10477 1021 81000000 		.4byte	0x81
 10478 1025 02       		.uleb128 0x2
 10479 1026 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 230


 10480 1027 66       		.sleb128 -26
 10481 1028 1B       		.uleb128 0x1b
 10482 1029 AD020000 		.4byte	.LASF198
 10483 102d 01       		.byte	0x1
 10484 102e D205     		.2byte	0x5d2
 10485 1030 6F110000 		.4byte	0x116f
 10486 1034 02       		.uleb128 0x2
 10487 1035 91       		.byte	0x91
 10488 1036 40       		.sleb128 -64
 10489 1037 1B       		.uleb128 0x1b
 10490 1038 E00D0000 		.4byte	.LASF199
 10491 103c 01       		.byte	0x1
 10492 103d D305     		.2byte	0x5d3
 10493 103f B1000000 		.4byte	0xb1
 10494 1043 02       		.uleb128 0x2
 10495 1044 91       		.byte	0x91
 10496 1045 64       		.sleb128 -28
 10497 1046 1B       		.uleb128 0x1b
 10498 1047 240B0000 		.4byte	.LASF200
 10499 104b 01       		.byte	0x1
 10500 104c D405     		.2byte	0x5d4
 10501 104e BD000000 		.4byte	0xbd
 10502 1052 02       		.uleb128 0x2
 10503 1053 91       		.byte	0x91
 10504 1054 54       		.sleb128 -44
 10505 1055 1B       		.uleb128 0x1b
 10506 1056 E20C0000 		.4byte	.LASF201
 10507 105a 01       		.byte	0x1
 10508 105b D505     		.2byte	0x5d5
 10509 105d BD000000 		.4byte	0xbd
 10510 1061 02       		.uleb128 0x2
 10511 1062 91       		.byte	0x91
 10512 1063 60       		.sleb128 -32
 10513 1064 1B       		.uleb128 0x1b
 10514 1065 DC030000 		.4byte	.LASF202
 10515 1069 01       		.byte	0x1
 10516 106a D605     		.2byte	0x5d6
 10517 106c BD000000 		.4byte	0xbd
 10518 1070 02       		.uleb128 0x2
 10519 1071 91       		.byte	0x91
 10520 1072 4C       		.sleb128 -52
 10521 1073 1B       		.uleb128 0x1b
 10522 1074 C60C0000 		.4byte	.LASF203
 10523 1078 01       		.byte	0x1
 10524 1079 D705     		.2byte	0x5d7
 10525 107b BD000000 		.4byte	0xbd
 10526 107f 02       		.uleb128 0x2
 10527 1080 91       		.byte	0x91
 10528 1081 50       		.sleb128 -48
 10529 1082 1B       		.uleb128 0x1b
 10530 1083 180A0000 		.4byte	.LASF204
 10531 1087 01       		.byte	0x1
 10532 1088 D805     		.2byte	0x5d8
 10533 108a A5000000 		.4byte	0xa5
 10534 108e 02       		.uleb128 0x2
 10535 108f 91       		.byte	0x91
 10536 1090 5F       		.sleb128 -33
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 231


 10537 1091 1B       		.uleb128 0x1b
 10538 1092 B70A0000 		.4byte	.LASF205
 10539 1096 01       		.byte	0x1
 10540 1097 DA05     		.2byte	0x5da
 10541 1099 7F110000 		.4byte	0x117f
 10542 109d 05       		.uleb128 0x5
 10543 109e 03       		.byte	0x3
 10544 109f E4000000 		.4byte	last_value_encoder.10510
 10545 10a3 1B       		.uleb128 0x1b
 10546 10a4 34060000 		.4byte	.LASF206
 10547 10a8 01       		.byte	0x1
 10548 10a9 DB05     		.2byte	0x5db
 10549 10ab 7F110000 		.4byte	0x117f
 10550 10af 05       		.uleb128 0x5
 10551 10b0 03       		.byte	0x3
 10552 10b1 FC000000 		.4byte	comp_value_encoder.10511
 10553 10b5 1B       		.uleb128 0x1b
 10554 10b6 E8020000 		.4byte	.LASF207
 10555 10ba 01       		.byte	0x1
 10556 10bb DC05     		.2byte	0x5dc
 10557 10bd 95110000 		.4byte	0x1195
 10558 10c1 05       		.uleb128 0x5
 10559 10c2 03       		.byte	0x3
 10560 10c3 14010000 		.4byte	error.10512
 10561 10c7 1B       		.uleb128 0x1b
 10562 10c8 B00C0000 		.4byte	.LASF208
 10563 10cc 01       		.byte	0x1
 10564 10cd DE05     		.2byte	0x5de
 10565 10cf C50F0000 		.4byte	0xfc5
 10566 10d3 05       		.uleb128 0x5
 10567 10d4 03       		.byte	0x3
 10568 10d5 04000000 		.4byte	only_first_time.10513
 10569 10d9 1B       		.uleb128 0x1b
 10570 10da 76020000 		.4byte	.LASF209
 10571 10de 01       		.byte	0x1
 10572 10df DF05     		.2byte	0x5df
 10573 10e1 C50F0000 		.4byte	0xfc5
 10574 10e5 05       		.uleb128 0x5
 10575 10e6 03       		.byte	0x3
 10576 10e7 6C010000 		.4byte	safe_startup_motor_activation.10514
 10577 10eb 1B       		.uleb128 0x1b
 10578 10ec 5F000000 		.4byte	.LASF210
 10579 10f0 01       		.byte	0x1
 10580 10f1 E005     		.2byte	0x5e0
 10581 10f3 C50F0000 		.4byte	0xfc5
 10582 10f7 05       		.uleb128 0x5
 10583 10f8 03       		.byte	0x3
 10584 10f9 68010000 		.4byte	one_time_execute.10515
 10585 10fd 1B       		.uleb128 0x1b
 10586 10fe E9080000 		.4byte	.LASF211
 10587 1102 01       		.byte	0x1
 10588 1103 E105     		.2byte	0x5e1
 10589 1105 44030000 		.4byte	0x344
 10590 1109 05       		.uleb128 0x5
 10591 110a 03       		.byte	0x3
 10592 110b 70010000 		.4byte	count_startup_motor.10516
 10593 110f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 232


 10594 1110 04030000 		.4byte	.LASF212
 10595 1114 01       		.byte	0x1
 10596 1115 E205     		.2byte	0x5e2
 10597 1117 C50F0000 		.4byte	0xfc5
 10598 111b 05       		.uleb128 0x5
 10599 111c 03       		.byte	0x3
 10600 111d 64010000 		.4byte	pos_reconstruct.10517
 10601 1121 1B       		.uleb128 0x1b
 10602 1122 45080000 		.4byte	.LASF213
 10603 1126 01       		.byte	0x1
 10604 1127 E405     		.2byte	0x5e4
 10605 1129 7F110000 		.4byte	0x117f
 10606 112d 05       		.uleb128 0x5
 10607 112e 03       		.byte	0x3
 10608 112f 1C010000 		.4byte	v_value.10518
 10609 1133 1B       		.uleb128 0x1b
 10610 1134 2A0F0000 		.4byte	.LASF214
 10611 1138 01       		.byte	0x1
 10612 1139 E505     		.2byte	0x5e5
 10613 113b 7F110000 		.4byte	0x117f
 10614 113f 05       		.uleb128 0x5
 10615 1140 03       		.byte	0x3
 10616 1141 34010000 		.4byte	vv_value.10519
 10617 1145 1B       		.uleb128 0x1b
 10618 1146 3B010000 		.4byte	.LASF215
 10619 114a 01       		.byte	0x1
 10620 114b E605     		.2byte	0x5e6
 10621 114d 7F110000 		.4byte	0x117f
 10622 1151 05       		.uleb128 0x5
 10623 1152 03       		.byte	0x3
 10624 1153 4C010000 		.4byte	vvv_value.10520
 10625 1157 1C       		.uleb128 0x1c
 10626 1158 94000000 		.4byte	.LBB3
 10627 115c 6A000000 		.4byte	.LBE3-.LBB3
 10628 1160 1D       		.uleb128 0x1d
 10629 1161 6A00     		.ascii	"j\000"
 10630 1163 01       		.byte	0x1
 10631 1164 F605     		.2byte	0x5f6
 10632 1166 68000000 		.4byte	0x68
 10633 116a 02       		.uleb128 0x2
 10634 116b 91       		.byte	0x91
 10635 116c 58       		.sleb128 -40
 10636 116d 00       		.byte	0
 10637 116e 00       		.byte	0
 10638 116f 07       		.uleb128 0x7
 10639 1170 99000000 		.4byte	0x99
 10640 1174 7F110000 		.4byte	0x117f
 10641 1178 08       		.uleb128 0x8
 10642 1179 0E010000 		.4byte	0x10e
 10643 117d 02       		.byte	0x2
 10644 117e 00       		.byte	0
 10645 117f 07       		.uleb128 0x7
 10646 1180 BD000000 		.4byte	0xbd
 10647 1184 95110000 		.4byte	0x1195
 10648 1188 08       		.uleb128 0x8
 10649 1189 0E010000 		.4byte	0x10e
 10650 118d 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 233


 10651 118e 08       		.uleb128 0x8
 10652 118f 0E010000 		.4byte	0x10e
 10653 1193 02       		.byte	0x2
 10654 1194 00       		.byte	0
 10655 1195 07       		.uleb128 0x7
 10656 1196 81000000 		.4byte	0x81
 10657 119a AB110000 		.4byte	0x11ab
 10658 119e 08       		.uleb128 0x8
 10659 119f 0E010000 		.4byte	0x10e
 10660 11a3 01       		.byte	0x1
 10661 11a4 08       		.uleb128 0x8
 10662 11a5 0E010000 		.4byte	0x10e
 10663 11a9 02       		.byte	0x2
 10664 11aa 00       		.byte	0
 10665 11ab 1F       		.uleb128 0x1f
 10666 11ac C00B0000 		.4byte	.LASF216
 10667 11b0 01       		.byte	0x1
 10668 11b1 9E06     		.2byte	0x69e
 10669 11b3 00000000 		.4byte	.LFB71
 10670 11b7 3C0D0000 		.4byte	.LFE71-.LFB71
 10671 11bb 01       		.uleb128 0x1
 10672 11bc 9C       		.byte	0x9c
 10673 11bd 3D120000 		.4byte	0x123d
 10674 11c1 1B       		.uleb128 0x1b
 10675 11c2 8C0B0000 		.4byte	.LASF217
 10676 11c6 01       		.byte	0x1
 10677 11c7 B206     		.2byte	0x6b2
 10678 11c9 BD000000 		.4byte	0xbd
 10679 11cd 02       		.uleb128 0x2
 10680 11ce 91       		.byte	0x91
 10681 11cf 64       		.sleb128 -28
 10682 11d0 1B       		.uleb128 0x1b
 10683 11d1 940C0000 		.4byte	.LASF218
 10684 11d5 01       		.byte	0x1
 10685 11d6 B406     		.2byte	0x6b4
 10686 11d8 8D000000 		.4byte	0x8d
 10687 11dc 05       		.uleb128 0x5
 10688 11dd 03       		.byte	0x3
 10689 11de 80010000 		.4byte	emg_counter_1.10537
 10690 11e2 1B       		.uleb128 0x1b
 10691 11e3 A20C0000 		.4byte	.LASF219
 10692 11e7 01       		.byte	0x1
 10693 11e8 B506     		.2byte	0x6b5
 10694 11ea 8D000000 		.4byte	0x8d
 10695 11ee 05       		.uleb128 0x5
 10696 11ef 03       		.byte	0x3
 10697 11f0 82010000 		.4byte	emg_counter_2.10538
 10698 11f4 1B       		.uleb128 0x1b
 10699 11f5 10020000 		.4byte	.LASF220
 10700 11f9 01       		.byte	0x1
 10701 11fa B606     		.2byte	0x6b6
 10702 11fc 81000000 		.4byte	0x81
 10703 1200 05       		.uleb128 0x5
 10704 1201 03       		.byte	0x3
 10705 1202 06000000 		.4byte	first_tension_valid.10539
 10706 1206 1B       		.uleb128 0x1b
 10707 1207 11090000 		.4byte	.LASF221
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 234


 10708 120b 01       		.byte	0x1
 10709 120c B806     		.2byte	0x6b8
 10710 120e 8D000000 		.4byte	0x8d
 10711 1212 05       		.uleb128 0x5
 10712 1213 03       		.byte	0x3
 10713 1214 78010000 		.4byte	count.10540
 10714 1218 1B       		.uleb128 0x1b
 10715 1219 2B010000 		.4byte	.LASF222
 10716 121d 01       		.byte	0x1
 10717 121e B906     		.2byte	0x6b9
 10718 1220 99000000 		.4byte	0x99
 10719 1224 05       		.uleb128 0x5
 10720 1225 03       		.byte	0x3
 10721 1226 7C010000 		.4byte	v_count.10541
 10722 122a 1D       		.uleb128 0x1d
 10723 122b 69647800 		.ascii	"idx\000"
 10724 122f 01       		.byte	0x1
 10725 1230 BA06     		.2byte	0x6ba
 10726 1232 81000000 		.4byte	0x81
 10727 1236 05       		.uleb128 0x5
 10728 1237 03       		.byte	0x3
 10729 1238 7A010000 		.4byte	idx.10542
 10730 123c 00       		.byte	0
 10731 123d 22       		.uleb128 0x22
 10732 123e 9D0B0000 		.4byte	.LASF223
 10733 1242 01       		.byte	0x1
 10734 1243 4C08     		.2byte	0x84c
 10735 1245 00000000 		.4byte	.LFB72
 10736 1249 F8000000 		.4byte	.LFE72-.LFB72
 10737 124d 01       		.uleb128 0x1
 10738 124e 9C       		.byte	0x9c
 10739 124f 6B120000 		.4byte	0x126b
 10740 1253 1C       		.uleb128 0x1c
 10741 1254 06000000 		.4byte	.LBB4
 10742 1258 D4000000 		.4byte	.LBE4-.LBB4
 10743 125c 1D       		.uleb128 0x1d
 10744 125d 6900     		.ascii	"i\000"
 10745 125f 01       		.byte	0x1
 10746 1260 4E08     		.2byte	0x84e
 10747 1262 81000000 		.4byte	0x81
 10748 1266 02       		.uleb128 0x2
 10749 1267 91       		.byte	0x91
 10750 1268 77       		.sleb128 -9
 10751 1269 00       		.byte	0
 10752 126a 00       		.byte	0
 10753 126b 23       		.uleb128 0x23
 10754 126c 14030000 		.4byte	.LASF224
 10755 1270 01       		.byte	0x1
 10756 1271 6808     		.2byte	0x868
 10757 1273 00000000 		.4byte	.LFB73
 10758 1277 78000000 		.4byte	.LFE73-.LFB73
 10759 127b 01       		.uleb128 0x1
 10760 127c 9C       		.byte	0x9c
 10761 127d BE120000 		.4byte	0x12be
 10762 1281 21       		.uleb128 0x21
 10763 1282 210A0000 		.4byte	.LASF225
 10764 1286 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 235


 10765 1287 6808     		.2byte	0x868
 10766 1289 81000000 		.4byte	0x81
 10767 128d 02       		.uleb128 0x2
 10768 128e 91       		.byte	0x91
 10769 128f 6F       		.sleb128 -17
 10770 1290 1B       		.uleb128 0x1b
 10771 1291 72060000 		.4byte	.LASF197
 10772 1295 01       		.byte	0x1
 10773 1296 6A08     		.2byte	0x86a
 10774 1298 81000000 		.4byte	0x81
 10775 129c 02       		.uleb128 0x2
 10776 129d 91       		.byte	0x91
 10777 129e 73       		.sleb128 -13
 10778 129f 1B       		.uleb128 0x1b
 10779 12a0 A10A0000 		.4byte	.LASF226
 10780 12a4 01       		.byte	0x1
 10781 12a5 6B08     		.2byte	0x86b
 10782 12a7 8D000000 		.4byte	0x8d
 10783 12ab 02       		.uleb128 0x2
 10784 12ac 91       		.byte	0x91
 10785 12ad 76       		.sleb128 -10
 10786 12ae 1B       		.uleb128 0x1b
 10787 12af 0F070000 		.4byte	.LASF227
 10788 12b3 01       		.byte	0x1
 10789 12b4 6C08     		.2byte	0x86c
 10790 12b6 8D000000 		.4byte	0x8d
 10791 12ba 02       		.uleb128 0x2
 10792 12bb 91       		.byte	0x91
 10793 12bc 74       		.sleb128 -12
 10794 12bd 00       		.byte	0
 10795 12be 1F       		.uleb128 0x1f
 10796 12bf 82070000 		.4byte	.LASF228
 10797 12c3 01       		.byte	0x1
 10798 12c4 7C08     		.2byte	0x87c
 10799 12c6 00000000 		.4byte	.LFB74
 10800 12ca F8030000 		.4byte	.LFE74-.LFB74
 10801 12ce 01       		.uleb128 0x1
 10802 12cf 9C       		.byte	0x9c
 10803 12d0 BD130000 		.4byte	0x13bd
 10804 12d4 1B       		.uleb128 0x1b
 10805 12d5 09000000 		.4byte	.LASF229
 10806 12d9 01       		.byte	0x1
 10807 12da 7D08     		.2byte	0x87d
 10808 12dc 81000000 		.4byte	0x81
 10809 12e0 05       		.uleb128 0x5
 10810 12e1 03       		.byte	0x3
 10811 12e2 84010000 		.4byte	pos_cycle_status.10598
 10812 12e6 1B       		.uleb128 0x1b
 10813 12e7 F20B0000 		.4byte	.LASF230
 10814 12eb 01       		.byte	0x1
 10815 12ec 7E08     		.2byte	0x87e
 10816 12ee C50F0000 		.4byte	0xfc5
 10817 12f2 05       		.uleb128 0x5
 10818 12f3 03       		.byte	0x3
 10819 12f4 90010000 		.4byte	emg_cycle_status.10599
 10820 12f8 1B       		.uleb128 0x1b
 10821 12f9 CE0D0000 		.4byte	.LASF231
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 236


 10822 12fd 01       		.byte	0x1
 10823 12fe 7F08     		.2byte	0x87f
 10824 1300 81000000 		.4byte	0x81
 10825 1304 05       		.uleb128 0x5
 10826 1305 03       		.byte	0x3
 10827 1306 92010000 		.4byte	rest_cycle_status.10600
 10828 130a 1B       		.uleb128 0x1b
 10829 130b 5F020000 		.4byte	.LASF232
 10830 130f 01       		.byte	0x1
 10831 1310 8008     		.2byte	0x880
 10832 1312 BD000000 		.4byte	0xbd
 10833 1316 05       		.uleb128 0x5
 10834 1317 03       		.byte	0x3
 10835 1318 08000000 		.4byte	bin_threshold.10601
 10836 131c 1B       		.uleb128 0x1b
 10837 131d 91010000 		.4byte	.LASF233
 10838 1321 01       		.byte	0x1
 10839 1322 8108     		.2byte	0x881
 10840 1324 BD000000 		.4byte	0xbd
 10841 1328 05       		.uleb128 0x5
 10842 1329 03       		.byte	0x3
 10843 132a 88010000 		.4byte	thr_pos.10602
 10844 132e 1B       		.uleb128 0x1b
 10845 132f 3A090000 		.4byte	.LASF234
 10846 1333 01       		.byte	0x1
 10847 1334 8108     		.2byte	0x881
 10848 1336 BD000000 		.4byte	0xbd
 10849 133a 05       		.uleb128 0x5
 10850 133b 03       		.byte	0x3
 10851 133c 8C010000 		.4byte	max_pos.10603
 10852 1340 1D       		.uleb128 0x1d
 10853 1341 6900     		.ascii	"i\000"
 10854 1343 01       		.byte	0x1
 10855 1344 8208     		.2byte	0x882
 10856 1346 81000000 		.4byte	0x81
 10857 134a 02       		.uleb128 0x2
 10858 134b 91       		.byte	0x91
 10859 134c 77       		.sleb128 -9
 10860 134d 1B       		.uleb128 0x1b
 10861 134e EC040000 		.4byte	.LASF235
 10862 1352 01       		.byte	0x1
 10863 1353 8208     		.2byte	0x882
 10864 1355 81000000 		.4byte	0x81
 10865 1359 02       		.uleb128 0x2
 10866 135a 91       		.byte	0x91
 10867 135b 67       		.sleb128 -25
 10868 135c 1B       		.uleb128 0x1b
 10869 135d C7000000 		.4byte	.LASF236
 10870 1361 01       		.byte	0x1
 10871 1362 8208     		.2byte	0x882
 10872 1364 81000000 		.4byte	0x81
 10873 1368 02       		.uleb128 0x2
 10874 1369 91       		.byte	0x91
 10875 136a 66       		.sleb128 -26
 10876 136b 1B       		.uleb128 0x1b
 10877 136c B10B0000 		.4byte	.LASF237
 10878 1370 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 237


 10879 1371 8308     		.2byte	0x883
 10880 1373 BD000000 		.4byte	0xbd
 10881 1377 02       		.uleb128 0x2
 10882 1378 91       		.byte	0x91
 10883 1379 70       		.sleb128 -16
 10884 137a 1B       		.uleb128 0x1b
 10885 137b F3030000 		.4byte	.LASF238
 10886 137f 01       		.byte	0x1
 10887 1380 8308     		.2byte	0x883
 10888 1382 BD000000 		.4byte	0xbd
 10889 1386 02       		.uleb128 0x2
 10890 1387 91       		.byte	0x91
 10891 1388 6C       		.sleb128 -20
 10892 1389 1B       		.uleb128 0x1b
 10893 138a 8E030000 		.4byte	.LASF239
 10894 138e 01       		.byte	0x1
 10895 138f 8408     		.2byte	0x884
 10896 1391 BD000000 		.4byte	0xbd
 10897 1395 02       		.uleb128 0x2
 10898 1396 91       		.byte	0x91
 10899 1397 68       		.sleb128 -24
 10900 1398 1B       		.uleb128 0x1b
 10901 1399 18060000 		.4byte	.LASF240
 10902 139d 01       		.byte	0x1
 10903 139e 8508     		.2byte	0x885
 10904 13a0 99000000 		.4byte	0x99
 10905 13a4 05       		.uleb128 0x5
 10906 13a5 03       		.byte	0x3
 10907 13a6 94010000 		.4byte	timer_value_s.10610
 10908 13aa 1B       		.uleb128 0x1b
 10909 13ab BC050000 		.4byte	.LASF241
 10910 13af 01       		.byte	0x1
 10911 13b0 8508     		.2byte	0x885
 10912 13b2 99000000 		.4byte	0x99
 10913 13b6 05       		.uleb128 0x5
 10914 13b7 03       		.byte	0x3
 10915 13b8 98010000 		.4byte	timer_value_e.10611
 10916 13bc 00       		.byte	0
 10917 13bd 1F       		.uleb128 0x1f
 10918 13be C7090000 		.4byte	.LASF242
 10919 13c2 01       		.byte	0x1
 10920 13c3 F108     		.2byte	0x8f1
 10921 13c5 00000000 		.4byte	.LFB75
 10922 13c9 08010000 		.4byte	.LFE75-.LFB75
 10923 13cd 01       		.uleb128 0x1
 10924 13ce 9C       		.byte	0x9c
 10925 13cf 43140000 		.4byte	0x1443
 10926 13d3 1B       		.uleb128 0x1b
 10927 13d4 F2060000 		.4byte	.LASF243
 10928 13d8 01       		.byte	0x1
 10929 13d9 F308     		.2byte	0x8f3
 10930 13db EA000000 		.4byte	0xea
 10931 13df 02       		.uleb128 0x2
 10932 13e0 91       		.byte	0x91
 10933 13e1 64       		.sleb128 -28
 10934 13e2 1B       		.uleb128 0x1b
 10935 13e3 920B0000 		.4byte	.LASF244
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 238


 10936 13e7 01       		.byte	0x1
 10937 13e8 F408     		.2byte	0x8f4
 10938 13ea 81000000 		.4byte	0x81
 10939 13ee 05       		.uleb128 0x5
 10940 13ef 03       		.byte	0x3
 10941 13f0 A0010000 		.4byte	row_number.10636
 10942 13f4 1B       		.uleb128 0x1b
 10943 13f5 C6030000 		.4byte	.LASF245
 10944 13f9 01       		.byte	0x1
 10945 13fa F508     		.2byte	0x8f5
 10946 13fc 81000000 		.4byte	0x81
 10947 1400 02       		.uleb128 0x2
 10948 1401 91       		.byte	0x91
 10949 1402 77       		.sleb128 -9
 10950 1403 1B       		.uleb128 0x1b
 10951 1404 420C0000 		.4byte	.LASF246
 10952 1408 01       		.byte	0x1
 10953 1409 F608     		.2byte	0x8f6
 10954 140b 43140000 		.4byte	0x1443
 10955 140f 02       		.uleb128 0x2
 10956 1410 91       		.byte	0x91
 10957 1411 70       		.sleb128 -16
 10958 1412 1B       		.uleb128 0x1b
 10959 1413 CF000000 		.4byte	.LASF247
 10960 1417 01       		.byte	0x1
 10961 1418 F708     		.2byte	0x8f7
 10962 141a 43140000 		.4byte	0x1443
 10963 141e 02       		.uleb128 0x2
 10964 141f 91       		.byte	0x91
 10965 1420 6C       		.sleb128 -20
 10966 1421 1B       		.uleb128 0x1b
 10967 1422 9D0E0000 		.4byte	.LASF248
 10968 1426 01       		.byte	0x1
 10969 1427 F808     		.2byte	0x8f8
 10970 1429 81000000 		.4byte	0x81
 10971 142d 02       		.uleb128 0x2
 10972 142e 91       		.byte	0x91
 10973 142f 6B       		.sleb128 -21
 10974 1430 1B       		.uleb128 0x1b
 10975 1431 20090000 		.4byte	.LASF249
 10976 1435 01       		.byte	0x1
 10977 1436 F908     		.2byte	0x8f9
 10978 1438 43140000 		.4byte	0x1443
 10979 143c 05       		.uleb128 0x5
 10980 143d 03       		.byte	0x3
 10981 143e 9C010000 		.4byte	m_addr.10641
 10982 1442 00       		.byte	0
 10983 1443 0C       		.uleb128 0xc
 10984 1444 04       		.byte	0x4
 10985 1445 81000000 		.4byte	0x81
 10986 1449 07       		.uleb128 0x7
 10987 144a 59140000 		.4byte	0x1459
 10988 144e 59140000 		.4byte	0x1459
 10989 1452 08       		.uleb128 0x8
 10990 1453 0E010000 		.4byte	0x10e
 10991 1457 1C       		.byte	0x1c
 10992 1458 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 239


 10993 1459 24       		.uleb128 0x24
 10994 145a 81000000 		.4byte	0x81
 10995 145e 19       		.uleb128 0x19
 10996 145f 4D0C0000 		.4byte	.LASF250
 10997 1463 01       		.byte	0x1
 10998 1464 40       		.byte	0x40
 10999 1465 6F140000 		.4byte	0x146f
 11000 1469 05       		.uleb128 0x5
 11001 146a 03       		.byte	0x3
 11002 146b 00000000 		.4byte	pwm_preload_values
 11003 146f 24       		.uleb128 0x24
 11004 1470 49140000 		.4byte	0x1449
 11005 1474 25       		.uleb128 0x25
 11006 1475 440D0000 		.4byte	.LASF251
 11007 1479 08       		.byte	0x8
 11008 147a 1207     		.2byte	0x712
 11009 147c 80140000 		.4byte	0x1480
 11010 1480 06       		.uleb128 0x6
 11011 1481 76000000 		.4byte	0x76
 11012 1485 07       		.uleb128 0x7
 11013 1486 9F010000 		.4byte	0x19f
 11014 148a 95140000 		.4byte	0x1495
 11015 148e 08       		.uleb128 0x8
 11016 148f 0E010000 		.4byte	0x10e
 11017 1493 01       		.byte	0x1
 11018 1494 00       		.byte	0
 11019 1495 25       		.uleb128 0x25
 11020 1496 58060000 		.4byte	.LASF252
 11021 149a 07       		.byte	0x7
 11022 149b D401     		.2byte	0x1d4
 11023 149d 85140000 		.4byte	0x1485
 11024 14a1 25       		.uleb128 0x25
 11025 14a2 EA030000 		.4byte	.LASF253
 11026 14a6 07       		.byte	0x7
 11027 14a7 D401     		.2byte	0x1d4
 11028 14a9 85140000 		.4byte	0x1485
 11029 14ad 25       		.uleb128 0x25
 11030 14ae 630A0000 		.4byte	.LASF254
 11031 14b2 07       		.byte	0x7
 11032 14b3 D401     		.2byte	0x1d4
 11033 14b5 85140000 		.4byte	0x1485
 11034 14b9 07       		.uleb128 0x7
 11035 14ba DC010000 		.4byte	0x1dc
 11036 14be C9140000 		.4byte	0x14c9
 11037 14c2 08       		.uleb128 0x8
 11038 14c3 0E010000 		.4byte	0x10e
 11039 14c7 01       		.byte	0x1
 11040 14c8 00       		.byte	0
 11041 14c9 25       		.uleb128 0x25
 11042 14ca 11060000 		.4byte	.LASF255
 11043 14ce 07       		.byte	0x7
 11044 14cf D501     		.2byte	0x1d5
 11045 14d1 B9140000 		.4byte	0x14b9
 11046 14d5 25       		.uleb128 0x25
 11047 14d6 930E0000 		.4byte	.LASF256
 11048 14da 07       		.byte	0x7
 11049 14db D501     		.2byte	0x1d5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 240


 11050 14dd B9140000 		.4byte	0x14b9
 11051 14e1 25       		.uleb128 0x25
 11052 14e2 78000000 		.4byte	.LASF257
 11053 14e6 07       		.byte	0x7
 11054 14e7 D601     		.2byte	0x1d6
 11055 14e9 51020000 		.4byte	0x251
 11056 14ed 25       		.uleb128 0x25
 11057 14ee 070F0000 		.4byte	.LASF258
 11058 14f2 07       		.byte	0x7
 11059 14f3 D601     		.2byte	0x1d6
 11060 14f5 51020000 		.4byte	0x251
 11061 14f9 25       		.uleb128 0x25
 11062 14fa 5A000000 		.4byte	.LASF259
 11063 14fe 07       		.byte	0x7
 11064 14ff D701     		.2byte	0x1d7
 11065 1501 96020000 		.4byte	0x296
 11066 1505 25       		.uleb128 0x25
 11067 1506 8E0C0000 		.4byte	.LASF260
 11068 150a 07       		.byte	0x7
 11069 150b D801     		.2byte	0x1d8
 11070 150d 27080000 		.4byte	0x827
 11071 1511 25       		.uleb128 0x25
 11072 1512 27090000 		.4byte	.LASF261
 11073 1516 07       		.byte	0x7
 11074 1517 D801     		.2byte	0x1d8
 11075 1519 27080000 		.4byte	0x827
 11076 151d 25       		.uleb128 0x25
 11077 151e 4D080000 		.4byte	.LASF262
 11078 1522 07       		.byte	0x7
 11079 1523 D901     		.2byte	0x1d9
 11080 1525 CB090000 		.4byte	0x9cb
 11081 1529 07       		.uleb128 0x7
 11082 152a A3090000 		.4byte	0x9a3
 11083 152e 39150000 		.4byte	0x1539
 11084 1532 08       		.uleb128 0x8
 11085 1533 0E010000 		.4byte	0x10e
 11086 1537 01       		.byte	0x1
 11087 1538 00       		.byte	0
 11088 1539 25       		.uleb128 0x25
 11089 153a 4F0A0000 		.4byte	.LASF263
 11090 153e 07       		.byte	0x7
 11091 153f DA01     		.2byte	0x1da
 11092 1541 29150000 		.4byte	0x1529
 11093 1545 25       		.uleb128 0x25
 11094 1546 9D080000 		.4byte	.LASF264
 11095 154a 07       		.byte	0x7
 11096 154b DA01     		.2byte	0x1da
 11097 154d 29150000 		.4byte	0x1529
 11098 1551 25       		.uleb128 0x25
 11099 1552 350A0000 		.4byte	.LASF265
 11100 1556 07       		.byte	0x7
 11101 1557 DA01     		.2byte	0x1da
 11102 1559 29150000 		.4byte	0x1529
 11103 155d 07       		.uleb128 0x7
 11104 155e A3090000 		.4byte	0x9a3
 11105 1562 6D150000 		.4byte	0x156d
 11106 1566 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 241


 11107 1567 0E010000 		.4byte	0x10e
 11108 156b 02       		.byte	0x2
 11109 156c 00       		.byte	0
 11110 156d 25       		.uleb128 0x25
 11111 156e B5040000 		.4byte	.LASF266
 11112 1572 07       		.byte	0x7
 11113 1573 DB01     		.2byte	0x1db
 11114 1575 5D150000 		.4byte	0x155d
 11115 1579 07       		.uleb128 0x7
 11116 157a A3090000 		.4byte	0x9a3
 11117 157e 89150000 		.4byte	0x1589
 11118 1582 08       		.uleb128 0x8
 11119 1583 0E010000 		.4byte	0x10e
 11120 1587 07       		.byte	0x7
 11121 1588 00       		.byte	0
 11122 1589 25       		.uleb128 0x25
 11123 158a 5B010000 		.4byte	.LASF267
 11124 158e 07       		.byte	0x7
 11125 158f DC01     		.2byte	0x1dc
 11126 1591 79150000 		.4byte	0x1579
 11127 1595 25       		.uleb128 0x25
 11128 1596 24020000 		.4byte	.LASF268
 11129 159a 07       		.byte	0x7
 11130 159b DE01     		.2byte	0x1de
 11131 159d 8D000000 		.4byte	0x8d
 11132 15a1 25       		.uleb128 0x25
 11133 15a2 2D080000 		.4byte	.LASF269
 11134 15a6 07       		.byte	0x7
 11135 15a7 DF01     		.2byte	0x1df
 11136 15a9 8D000000 		.4byte	0x8d
 11137 15ad 25       		.uleb128 0x25
 11138 15ae DF0A0000 		.4byte	.LASF270
 11139 15b2 07       		.byte	0x7
 11140 15b3 E001     		.2byte	0x1e0
 11141 15b5 D5000000 		.4byte	0xd5
 11142 15b9 25       		.uleb128 0x25
 11143 15ba 600B0000 		.4byte	.LASF271
 11144 15be 07       		.byte	0x7
 11145 15bf E201     		.2byte	0x1e2
 11146 15c1 76020000 		.4byte	0x276
 11147 15c5 25       		.uleb128 0x25
 11148 15c6 9F0D0000 		.4byte	.LASF272
 11149 15ca 07       		.byte	0x7
 11150 15cb E301     		.2byte	0x1e3
 11151 15cd C50F0000 		.4byte	0xfc5
 11152 15d1 25       		.uleb128 0x25
 11153 15d2 F60C0000 		.4byte	.LASF273
 11154 15d6 07       		.byte	0x7
 11155 15d7 E401     		.2byte	0x1e4
 11156 15d9 C50F0000 		.4byte	0xfc5
 11157 15dd 25       		.uleb128 0x25
 11158 15de 6A050000 		.4byte	.LASF274
 11159 15e2 07       		.byte	0x7
 11160 15e3 E501     		.2byte	0x1e5
 11161 15e5 76020000 		.4byte	0x276
 11162 15e9 25       		.uleb128 0x25
 11163 15ea 510D0000 		.4byte	.LASF275
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 242


 11164 15ee 07       		.byte	0x7
 11165 15ef E601     		.2byte	0x1e6
 11166 15f1 76020000 		.4byte	0x276
 11167 15f5 25       		.uleb128 0x25
 11168 15f6 EF050000 		.4byte	.LASF276
 11169 15fa 07       		.byte	0x7
 11170 15fb E801     		.2byte	0x1e8
 11171 15fd 770A0000 		.4byte	0xa77
 11172 1601 25       		.uleb128 0x25
 11173 1602 64040000 		.4byte	.LASF277
 11174 1606 07       		.byte	0x7
 11175 1607 E901     		.2byte	0x1e9
 11176 1609 3F0A0000 		.4byte	0xa3f
 11177 160d 25       		.uleb128 0x25
 11178 160e 6A030000 		.4byte	.LASF278
 11179 1612 07       		.byte	0x7
 11180 1613 EA01     		.2byte	0x1ea
 11181 1615 3F0A0000 		.4byte	0xa3f
 11182 1619 25       		.uleb128 0x25
 11183 161a 31070000 		.4byte	.LASF279
 11184 161e 07       		.byte	0x7
 11185 161f ED01     		.2byte	0x1ed
 11186 1621 81000000 		.4byte	0x81
 11187 1625 25       		.uleb128 0x25
 11188 1626 9D000000 		.4byte	.LASF280
 11189 162a 07       		.byte	0x7
 11190 162b EE01     		.2byte	0x1ee
 11191 162d 81000000 		.4byte	0x81
 11192 1631 25       		.uleb128 0x25
 11193 1632 7F030000 		.4byte	.LASF281
 11194 1636 07       		.byte	0x7
 11195 1637 EF01     		.2byte	0x1ef
 11196 1639 81000000 		.4byte	0x81
 11197 163d 25       		.uleb128 0x25
 11198 163e B1000000 		.4byte	.LASF282
 11199 1642 07       		.byte	0x7
 11200 1643 F001     		.2byte	0x1f0
 11201 1645 81000000 		.4byte	0x81
 11202 1649 25       		.uleb128 0x25
 11203 164a C70E0000 		.4byte	.LASF283
 11204 164e 07       		.byte	0x7
 11205 164f F201     		.2byte	0x1f2
 11206 1651 81000000 		.4byte	0x81
 11207 1655 25       		.uleb128 0x25
 11208 1656 560A0000 		.4byte	.LASF284
 11209 165a 07       		.byte	0x7
 11210 165b F301     		.2byte	0x1f3
 11211 165d 81000000 		.4byte	0x81
 11212 1661 25       		.uleb128 0x25
 11213 1662 D0030000 		.4byte	.LASF285
 11214 1666 07       		.byte	0x7
 11215 1667 F401     		.2byte	0x1f4
 11216 1669 81000000 		.4byte	0x81
 11217 166d 25       		.uleb128 0x25
 11218 166e 1B070000 		.4byte	.LASF286
 11219 1672 07       		.byte	0x7
 11220 1673 F501     		.2byte	0x1f5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 243


 11221 1675 81000000 		.4byte	0x81
 11222 1679 25       		.uleb128 0x25
 11223 167a 82080000 		.4byte	.LASF287
 11224 167e 07       		.byte	0x7
 11225 167f F601     		.2byte	0x1f6
 11226 1681 81000000 		.4byte	0x81
 11227 1685 07       		.uleb128 0x7
 11228 1686 B1000000 		.4byte	0xb1
 11229 168a 95160000 		.4byte	0x1695
 11230 168e 08       		.uleb128 0x8
 11231 168f 0E010000 		.4byte	0x10e
 11232 1693 0B       		.byte	0xb
 11233 1694 00       		.byte	0
 11234 1695 25       		.uleb128 0x25
 11235 1696 77030000 		.4byte	.LASF288
 11236 169a 07       		.byte	0x7
 11237 169b FA01     		.2byte	0x1fa
 11238 169d 85160000 		.4byte	0x1685
 11239 16a1 25       		.uleb128 0x25
 11240 16a2 690E0000 		.4byte	.LASF289
 11241 16a6 07       		.byte	0x7
 11242 16a7 FB01     		.2byte	0x1fb
 11243 16a9 81000000 		.4byte	0x81
 11244 16ad 25       		.uleb128 0x25
 11245 16ae 96040000 		.4byte	.LASF290
 11246 16b2 07       		.byte	0x7
 11247 16b3 FE01     		.2byte	0x1fe
 11248 16b5 A5000000 		.4byte	0xa5
 11249 16b9 07       		.uleb128 0x7
 11250 16ba 99000000 		.4byte	0x99
 11251 16be C9160000 		.4byte	0x16c9
 11252 16c2 08       		.uleb128 0x8
 11253 16c3 0E010000 		.4byte	0x10e
 11254 16c7 04       		.byte	0x4
 11255 16c8 00       		.byte	0
 11256 16c9 25       		.uleb128 0x25
 11257 16ca 47060000 		.4byte	.LASF291
 11258 16ce 07       		.byte	0x7
 11259 16cf 0102     		.2byte	0x201
 11260 16d1 B9160000 		.4byte	0x16b9
 11261 16d5 25       		.uleb128 0x25
 11262 16d6 D00B0000 		.4byte	.LASF292
 11263 16da 07       		.byte	0x7
 11264 16db 0202     		.2byte	0x202
 11265 16dd C50F0000 		.4byte	0xfc5
 11266 16e1 07       		.uleb128 0x7
 11267 16e2 8D000000 		.4byte	0x8d
 11268 16e6 F7160000 		.4byte	0x16f7
 11269 16ea 08       		.uleb128 0x8
 11270 16eb 0E010000 		.4byte	0x10e
 11271 16ef 01       		.byte	0x1
 11272 16f0 08       		.uleb128 0x8
 11273 16f1 0E010000 		.4byte	0x10e
 11274 16f5 04       		.byte	0x4
 11275 16f6 00       		.byte	0
 11276 16f7 25       		.uleb128 0x25
 11277 16f8 B80D0000 		.4byte	.LASF293
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 244


 11278 16fc 07       		.byte	0x7
 11279 16fd 0302     		.2byte	0x203
 11280 16ff E1160000 		.4byte	0x16e1
 11281 1703 07       		.uleb128 0x7
 11282 1704 81000000 		.4byte	0x81
 11283 1708 19170000 		.4byte	0x1719
 11284 170c 08       		.uleb128 0x8
 11285 170d 0E010000 		.4byte	0x10e
 11286 1711 01       		.byte	0x1
 11287 1712 08       		.uleb128 0x8
 11288 1713 0E010000 		.4byte	0x10e
 11289 1717 04       		.byte	0x4
 11290 1718 00       		.byte	0
 11291 1719 25       		.uleb128 0x25
 11292 171a 26060000 		.4byte	.LASF294
 11293 171e 07       		.byte	0x7
 11294 171f 0402     		.2byte	0x204
 11295 1721 03170000 		.4byte	0x1703
 11296 1725 25       		.uleb128 0x25
 11297 1726 42090000 		.4byte	.LASF295
 11298 172a 07       		.byte	0x7
 11299 172b 0702     		.2byte	0x207
 11300 172d BD000000 		.4byte	0xbd
 11301 1731 25       		.uleb128 0x25
 11302 1732 4D050000 		.4byte	.LASF296
 11303 1736 07       		.byte	0x7
 11304 1737 0A02     		.2byte	0x20a
 11305 1739 99010000 		.4byte	0x199
 11306 173d 07       		.uleb128 0x7
 11307 173e 27090000 		.4byte	0x927
 11308 1742 4D170000 		.4byte	0x174d
 11309 1746 08       		.uleb128 0x8
 11310 1747 0E010000 		.4byte	0x10e
 11311 174b 04       		.byte	0x4
 11312 174c 00       		.byte	0
 11313 174d 25       		.uleb128 0x25
 11314 174e 8B060000 		.4byte	.LASF297
 11315 1752 07       		.byte	0x7
 11316 1753 1302     		.2byte	0x213
 11317 1755 3D170000 		.4byte	0x173d
 11318 1759 25       		.uleb128 0x25
 11319 175a 9C050000 		.4byte	.LASF298
 11320 175e 07       		.byte	0x7
 11321 175f 1302     		.2byte	0x213
 11322 1761 3D170000 		.4byte	0x173d
 11323 1765 00       		.byte	0
 11324              		.section	.debug_abbrev,"",%progbits
 11325              	.Ldebug_abbrev0:
 11326 0000 01       		.uleb128 0x1
 11327 0001 11       		.uleb128 0x11
 11328 0002 01       		.byte	0x1
 11329 0003 25       		.uleb128 0x25
 11330 0004 0E       		.uleb128 0xe
 11331 0005 13       		.uleb128 0x13
 11332 0006 0B       		.uleb128 0xb
 11333 0007 03       		.uleb128 0x3
 11334 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 245


 11335 0009 1B       		.uleb128 0x1b
 11336 000a 0E       		.uleb128 0xe
 11337 000b 55       		.uleb128 0x55
 11338 000c 17       		.uleb128 0x17
 11339 000d 11       		.uleb128 0x11
 11340 000e 01       		.uleb128 0x1
 11341 000f 10       		.uleb128 0x10
 11342 0010 17       		.uleb128 0x17
 11343 0011 00       		.byte	0
 11344 0012 00       		.byte	0
 11345 0013 02       		.uleb128 0x2
 11346 0014 24       		.uleb128 0x24
 11347 0015 00       		.byte	0
 11348 0016 0B       		.uleb128 0xb
 11349 0017 0B       		.uleb128 0xb
 11350 0018 3E       		.uleb128 0x3e
 11351 0019 0B       		.uleb128 0xb
 11352 001a 03       		.uleb128 0x3
 11353 001b 0E       		.uleb128 0xe
 11354 001c 00       		.byte	0
 11355 001d 00       		.byte	0
 11356 001e 03       		.uleb128 0x3
 11357 001f 16       		.uleb128 0x16
 11358 0020 00       		.byte	0
 11359 0021 03       		.uleb128 0x3
 11360 0022 0E       		.uleb128 0xe
 11361 0023 3A       		.uleb128 0x3a
 11362 0024 0B       		.uleb128 0xb
 11363 0025 3B       		.uleb128 0x3b
 11364 0026 0B       		.uleb128 0xb
 11365 0027 49       		.uleb128 0x49
 11366 0028 13       		.uleb128 0x13
 11367 0029 00       		.byte	0
 11368 002a 00       		.byte	0
 11369 002b 04       		.uleb128 0x4
 11370 002c 24       		.uleb128 0x24
 11371 002d 00       		.byte	0
 11372 002e 0B       		.uleb128 0xb
 11373 002f 0B       		.uleb128 0xb
 11374 0030 3E       		.uleb128 0x3e
 11375 0031 0B       		.uleb128 0xb
 11376 0032 03       		.uleb128 0x3
 11377 0033 08       		.uleb128 0x8
 11378 0034 00       		.byte	0
 11379 0035 00       		.byte	0
 11380 0036 05       		.uleb128 0x5
 11381 0037 16       		.uleb128 0x16
 11382 0038 00       		.byte	0
 11383 0039 03       		.uleb128 0x3
 11384 003a 0E       		.uleb128 0xe
 11385 003b 3A       		.uleb128 0x3a
 11386 003c 0B       		.uleb128 0xb
 11387 003d 3B       		.uleb128 0x3b
 11388 003e 05       		.uleb128 0x5
 11389 003f 49       		.uleb128 0x49
 11390 0040 13       		.uleb128 0x13
 11391 0041 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 246


 11392 0042 00       		.byte	0
 11393 0043 06       		.uleb128 0x6
 11394 0044 35       		.uleb128 0x35
 11395 0045 00       		.byte	0
 11396 0046 49       		.uleb128 0x49
 11397 0047 13       		.uleb128 0x13
 11398 0048 00       		.byte	0
 11399 0049 00       		.byte	0
 11400 004a 07       		.uleb128 0x7
 11401 004b 01       		.uleb128 0x1
 11402 004c 01       		.byte	0x1
 11403 004d 49       		.uleb128 0x49
 11404 004e 13       		.uleb128 0x13
 11405 004f 01       		.uleb128 0x1
 11406 0050 13       		.uleb128 0x13
 11407 0051 00       		.byte	0
 11408 0052 00       		.byte	0
 11409 0053 08       		.uleb128 0x8
 11410 0054 21       		.uleb128 0x21
 11411 0055 00       		.byte	0
 11412 0056 49       		.uleb128 0x49
 11413 0057 13       		.uleb128 0x13
 11414 0058 2F       		.uleb128 0x2f
 11415 0059 0B       		.uleb128 0xb
 11416 005a 00       		.byte	0
 11417 005b 00       		.byte	0
 11418 005c 09       		.uleb128 0x9
 11419 005d 04       		.uleb128 0x4
 11420 005e 01       		.byte	0x1
 11421 005f 03       		.uleb128 0x3
 11422 0060 0E       		.uleb128 0xe
 11423 0061 0B       		.uleb128 0xb
 11424 0062 0B       		.uleb128 0xb
 11425 0063 49       		.uleb128 0x49
 11426 0064 13       		.uleb128 0x13
 11427 0065 3A       		.uleb128 0x3a
 11428 0066 0B       		.uleb128 0xb
 11429 0067 3B       		.uleb128 0x3b
 11430 0068 0B       		.uleb128 0xb
 11431 0069 01       		.uleb128 0x1
 11432 006a 13       		.uleb128 0x13
 11433 006b 00       		.byte	0
 11434 006c 00       		.byte	0
 11435 006d 0A       		.uleb128 0xa
 11436 006e 28       		.uleb128 0x28
 11437 006f 00       		.byte	0
 11438 0070 03       		.uleb128 0x3
 11439 0071 0E       		.uleb128 0xe
 11440 0072 1C       		.uleb128 0x1c
 11441 0073 0B       		.uleb128 0xb
 11442 0074 00       		.byte	0
 11443 0075 00       		.byte	0
 11444 0076 0B       		.uleb128 0xb
 11445 0077 13       		.uleb128 0x13
 11446 0078 00       		.byte	0
 11447 0079 03       		.uleb128 0x3
 11448 007a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 247


 11449 007b 3C       		.uleb128 0x3c
 11450 007c 19       		.uleb128 0x19
 11451 007d 00       		.byte	0
 11452 007e 00       		.byte	0
 11453 007f 0C       		.uleb128 0xc
 11454 0080 0F       		.uleb128 0xf
 11455 0081 00       		.byte	0
 11456 0082 0B       		.uleb128 0xb
 11457 0083 0B       		.uleb128 0xb
 11458 0084 49       		.uleb128 0x49
 11459 0085 13       		.uleb128 0x13
 11460 0086 00       		.byte	0
 11461 0087 00       		.byte	0
 11462 0088 0D       		.uleb128 0xd
 11463 0089 13       		.uleb128 0x13
 11464 008a 01       		.byte	0x1
 11465 008b 03       		.uleb128 0x3
 11466 008c 0E       		.uleb128 0xe
 11467 008d 0B       		.uleb128 0xb
 11468 008e 0B       		.uleb128 0xb
 11469 008f 3A       		.uleb128 0x3a
 11470 0090 0B       		.uleb128 0xb
 11471 0091 3B       		.uleb128 0x3b
 11472 0092 0B       		.uleb128 0xb
 11473 0093 01       		.uleb128 0x1
 11474 0094 13       		.uleb128 0x13
 11475 0095 00       		.byte	0
 11476 0096 00       		.byte	0
 11477 0097 0E       		.uleb128 0xe
 11478 0098 0D       		.uleb128 0xd
 11479 0099 00       		.byte	0
 11480 009a 03       		.uleb128 0x3
 11481 009b 08       		.uleb128 0x8
 11482 009c 3A       		.uleb128 0x3a
 11483 009d 0B       		.uleb128 0xb
 11484 009e 3B       		.uleb128 0x3b
 11485 009f 0B       		.uleb128 0xb
 11486 00a0 49       		.uleb128 0x49
 11487 00a1 13       		.uleb128 0x13
 11488 00a2 38       		.uleb128 0x38
 11489 00a3 0B       		.uleb128 0xb
 11490 00a4 00       		.byte	0
 11491 00a5 00       		.byte	0
 11492 00a6 0F       		.uleb128 0xf
 11493 00a7 0D       		.uleb128 0xd
 11494 00a8 00       		.byte	0
 11495 00a9 03       		.uleb128 0x3
 11496 00aa 0E       		.uleb128 0xe
 11497 00ab 3A       		.uleb128 0x3a
 11498 00ac 0B       		.uleb128 0xb
 11499 00ad 3B       		.uleb128 0x3b
 11500 00ae 0B       		.uleb128 0xb
 11501 00af 49       		.uleb128 0x49
 11502 00b0 13       		.uleb128 0x13
 11503 00b1 38       		.uleb128 0x38
 11504 00b2 0B       		.uleb128 0xb
 11505 00b3 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 248


 11506 00b4 00       		.byte	0
 11507 00b5 10       		.uleb128 0x10
 11508 00b6 13       		.uleb128 0x13
 11509 00b7 01       		.byte	0x1
 11510 00b8 03       		.uleb128 0x3
 11511 00b9 0E       		.uleb128 0xe
 11512 00ba 0B       		.uleb128 0xb
 11513 00bb 0B       		.uleb128 0xb
 11514 00bc 3A       		.uleb128 0x3a
 11515 00bd 0B       		.uleb128 0xb
 11516 00be 3B       		.uleb128 0x3b
 11517 00bf 05       		.uleb128 0x5
 11518 00c0 01       		.uleb128 0x1
 11519 00c1 13       		.uleb128 0x13
 11520 00c2 00       		.byte	0
 11521 00c3 00       		.byte	0
 11522 00c4 11       		.uleb128 0x11
 11523 00c5 0D       		.uleb128 0xd
 11524 00c6 00       		.byte	0
 11525 00c7 03       		.uleb128 0x3
 11526 00c8 08       		.uleb128 0x8
 11527 00c9 3A       		.uleb128 0x3a
 11528 00ca 0B       		.uleb128 0xb
 11529 00cb 3B       		.uleb128 0x3b
 11530 00cc 05       		.uleb128 0x5
 11531 00cd 49       		.uleb128 0x49
 11532 00ce 13       		.uleb128 0x13
 11533 00cf 38       		.uleb128 0x38
 11534 00d0 0B       		.uleb128 0xb
 11535 00d1 00       		.byte	0
 11536 00d2 00       		.byte	0
 11537 00d3 12       		.uleb128 0x12
 11538 00d4 0D       		.uleb128 0xd
 11539 00d5 00       		.byte	0
 11540 00d6 03       		.uleb128 0x3
 11541 00d7 0E       		.uleb128 0xe
 11542 00d8 3A       		.uleb128 0x3a
 11543 00d9 0B       		.uleb128 0xb
 11544 00da 3B       		.uleb128 0x3b
 11545 00db 05       		.uleb128 0x5
 11546 00dc 49       		.uleb128 0x49
 11547 00dd 13       		.uleb128 0x13
 11548 00de 38       		.uleb128 0x38
 11549 00df 0B       		.uleb128 0xb
 11550 00e0 00       		.byte	0
 11551 00e1 00       		.byte	0
 11552 00e2 13       		.uleb128 0x13
 11553 00e3 13       		.uleb128 0x13
 11554 00e4 01       		.byte	0x1
 11555 00e5 03       		.uleb128 0x3
 11556 00e6 0E       		.uleb128 0xe
 11557 00e7 0B       		.uleb128 0xb
 11558 00e8 05       		.uleb128 0x5
 11559 00e9 3A       		.uleb128 0x3a
 11560 00ea 0B       		.uleb128 0xb
 11561 00eb 3B       		.uleb128 0x3b
 11562 00ec 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 249


 11563 00ed 01       		.uleb128 0x1
 11564 00ee 13       		.uleb128 0x13
 11565 00ef 00       		.byte	0
 11566 00f0 00       		.byte	0
 11567 00f1 14       		.uleb128 0x14
 11568 00f2 0D       		.uleb128 0xd
 11569 00f3 00       		.byte	0
 11570 00f4 03       		.uleb128 0x3
 11571 00f5 08       		.uleb128 0x8
 11572 00f6 3A       		.uleb128 0x3a
 11573 00f7 0B       		.uleb128 0xb
 11574 00f8 3B       		.uleb128 0x3b
 11575 00f9 05       		.uleb128 0x5
 11576 00fa 49       		.uleb128 0x49
 11577 00fb 13       		.uleb128 0x13
 11578 00fc 38       		.uleb128 0x38
 11579 00fd 05       		.uleb128 0x5
 11580 00fe 00       		.byte	0
 11581 00ff 00       		.byte	0
 11582 0100 15       		.uleb128 0x15
 11583 0101 0D       		.uleb128 0xd
 11584 0102 00       		.byte	0
 11585 0103 03       		.uleb128 0x3
 11586 0104 0E       		.uleb128 0xe
 11587 0105 3A       		.uleb128 0x3a
 11588 0106 0B       		.uleb128 0xb
 11589 0107 3B       		.uleb128 0x3b
 11590 0108 05       		.uleb128 0x5
 11591 0109 49       		.uleb128 0x49
 11592 010a 13       		.uleb128 0x13
 11593 010b 38       		.uleb128 0x38
 11594 010c 05       		.uleb128 0x5
 11595 010d 00       		.byte	0
 11596 010e 00       		.byte	0
 11597 010f 16       		.uleb128 0x16
 11598 0110 04       		.uleb128 0x4
 11599 0111 01       		.byte	0x1
 11600 0112 0B       		.uleb128 0xb
 11601 0113 0B       		.uleb128 0xb
 11602 0114 49       		.uleb128 0x49
 11603 0115 13       		.uleb128 0x13
 11604 0116 3A       		.uleb128 0x3a
 11605 0117 0B       		.uleb128 0xb
 11606 0118 3B       		.uleb128 0x3b
 11607 0119 05       		.uleb128 0x5
 11608 011a 01       		.uleb128 0x1
 11609 011b 13       		.uleb128 0x13
 11610 011c 00       		.byte	0
 11611 011d 00       		.byte	0
 11612 011e 17       		.uleb128 0x17
 11613 011f 2E       		.uleb128 0x2e
 11614 0120 00       		.byte	0
 11615 0121 3F       		.uleb128 0x3f
 11616 0122 19       		.uleb128 0x19
 11617 0123 03       		.uleb128 0x3
 11618 0124 0E       		.uleb128 0xe
 11619 0125 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 250


 11620 0126 0B       		.uleb128 0xb
 11621 0127 3B       		.uleb128 0x3b
 11622 0128 0B       		.uleb128 0xb
 11623 0129 27       		.uleb128 0x27
 11624 012a 19       		.uleb128 0x19
 11625 012b 11       		.uleb128 0x11
 11626 012c 01       		.uleb128 0x1
 11627 012d 12       		.uleb128 0x12
 11628 012e 06       		.uleb128 0x6
 11629 012f 40       		.uleb128 0x40
 11630 0130 18       		.uleb128 0x18
 11631 0131 9742     		.uleb128 0x2117
 11632 0133 19       		.uleb128 0x19
 11633 0134 00       		.byte	0
 11634 0135 00       		.byte	0
 11635 0136 18       		.uleb128 0x18
 11636 0137 2E       		.uleb128 0x2e
 11637 0138 01       		.byte	0x1
 11638 0139 3F       		.uleb128 0x3f
 11639 013a 19       		.uleb128 0x19
 11640 013b 03       		.uleb128 0x3
 11641 013c 0E       		.uleb128 0xe
 11642 013d 3A       		.uleb128 0x3a
 11643 013e 0B       		.uleb128 0xb
 11644 013f 3B       		.uleb128 0x3b
 11645 0140 0B       		.uleb128 0xb
 11646 0141 11       		.uleb128 0x11
 11647 0142 01       		.uleb128 0x1
 11648 0143 12       		.uleb128 0x12
 11649 0144 06       		.uleb128 0x6
 11650 0145 40       		.uleb128 0x40
 11651 0146 18       		.uleb128 0x18
 11652 0147 9642     		.uleb128 0x2116
 11653 0149 19       		.uleb128 0x19
 11654 014a 01       		.uleb128 0x1
 11655 014b 13       		.uleb128 0x13
 11656 014c 00       		.byte	0
 11657 014d 00       		.byte	0
 11658 014e 19       		.uleb128 0x19
 11659 014f 34       		.uleb128 0x34
 11660 0150 00       		.byte	0
 11661 0151 03       		.uleb128 0x3
 11662 0152 0E       		.uleb128 0xe
 11663 0153 3A       		.uleb128 0x3a
 11664 0154 0B       		.uleb128 0xb
 11665 0155 3B       		.uleb128 0x3b
 11666 0156 0B       		.uleb128 0xb
 11667 0157 49       		.uleb128 0x49
 11668 0158 13       		.uleb128 0x13
 11669 0159 02       		.uleb128 0x2
 11670 015a 18       		.uleb128 0x18
 11671 015b 00       		.byte	0
 11672 015c 00       		.byte	0
 11673 015d 1A       		.uleb128 0x1a
 11674 015e 2E       		.uleb128 0x2e
 11675 015f 01       		.byte	0x1
 11676 0160 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 251


 11677 0161 19       		.uleb128 0x19
 11678 0162 03       		.uleb128 0x3
 11679 0163 0E       		.uleb128 0xe
 11680 0164 3A       		.uleb128 0x3a
 11681 0165 0B       		.uleb128 0xb
 11682 0166 3B       		.uleb128 0x3b
 11683 0167 05       		.uleb128 0x5
 11684 0168 27       		.uleb128 0x27
 11685 0169 19       		.uleb128 0x19
 11686 016a 11       		.uleb128 0x11
 11687 016b 01       		.uleb128 0x1
 11688 016c 12       		.uleb128 0x12
 11689 016d 06       		.uleb128 0x6
 11690 016e 40       		.uleb128 0x40
 11691 016f 18       		.uleb128 0x18
 11692 0170 9642     		.uleb128 0x2116
 11693 0172 19       		.uleb128 0x19
 11694 0173 01       		.uleb128 0x1
 11695 0174 13       		.uleb128 0x13
 11696 0175 00       		.byte	0
 11697 0176 00       		.byte	0
 11698 0177 1B       		.uleb128 0x1b
 11699 0178 34       		.uleb128 0x34
 11700 0179 00       		.byte	0
 11701 017a 03       		.uleb128 0x3
 11702 017b 0E       		.uleb128 0xe
 11703 017c 3A       		.uleb128 0x3a
 11704 017d 0B       		.uleb128 0xb
 11705 017e 3B       		.uleb128 0x3b
 11706 017f 05       		.uleb128 0x5
 11707 0180 49       		.uleb128 0x49
 11708 0181 13       		.uleb128 0x13
 11709 0182 02       		.uleb128 0x2
 11710 0183 18       		.uleb128 0x18
 11711 0184 00       		.byte	0
 11712 0185 00       		.byte	0
 11713 0186 1C       		.uleb128 0x1c
 11714 0187 0B       		.uleb128 0xb
 11715 0188 01       		.byte	0x1
 11716 0189 11       		.uleb128 0x11
 11717 018a 01       		.uleb128 0x1
 11718 018b 12       		.uleb128 0x12
 11719 018c 06       		.uleb128 0x6
 11720 018d 00       		.byte	0
 11721 018e 00       		.byte	0
 11722 018f 1D       		.uleb128 0x1d
 11723 0190 34       		.uleb128 0x34
 11724 0191 00       		.byte	0
 11725 0192 03       		.uleb128 0x3
 11726 0193 08       		.uleb128 0x8
 11727 0194 3A       		.uleb128 0x3a
 11728 0195 0B       		.uleb128 0xb
 11729 0196 3B       		.uleb128 0x3b
 11730 0197 05       		.uleb128 0x5
 11731 0198 49       		.uleb128 0x49
 11732 0199 13       		.uleb128 0x13
 11733 019a 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 252


 11734 019b 18       		.uleb128 0x18
 11735 019c 00       		.byte	0
 11736 019d 00       		.byte	0
 11737 019e 1E       		.uleb128 0x1e
 11738 019f 21       		.uleb128 0x21
 11739 01a0 00       		.byte	0
 11740 01a1 49       		.uleb128 0x49
 11741 01a2 13       		.uleb128 0x13
 11742 01a3 2F       		.uleb128 0x2f
 11743 01a4 05       		.uleb128 0x5
 11744 01a5 00       		.byte	0
 11745 01a6 00       		.byte	0
 11746 01a7 1F       		.uleb128 0x1f
 11747 01a8 2E       		.uleb128 0x2e
 11748 01a9 01       		.byte	0x1
 11749 01aa 3F       		.uleb128 0x3f
 11750 01ab 19       		.uleb128 0x19
 11751 01ac 03       		.uleb128 0x3
 11752 01ad 0E       		.uleb128 0xe
 11753 01ae 3A       		.uleb128 0x3a
 11754 01af 0B       		.uleb128 0xb
 11755 01b0 3B       		.uleb128 0x3b
 11756 01b1 05       		.uleb128 0x5
 11757 01b2 11       		.uleb128 0x11
 11758 01b3 01       		.uleb128 0x1
 11759 01b4 12       		.uleb128 0x12
 11760 01b5 06       		.uleb128 0x6
 11761 01b6 40       		.uleb128 0x40
 11762 01b7 18       		.uleb128 0x18
 11763 01b8 9642     		.uleb128 0x2116
 11764 01ba 19       		.uleb128 0x19
 11765 01bb 01       		.uleb128 0x1
 11766 01bc 13       		.uleb128 0x13
 11767 01bd 00       		.byte	0
 11768 01be 00       		.byte	0
 11769 01bf 20       		.uleb128 0x20
 11770 01c0 05       		.uleb128 0x5
 11771 01c1 00       		.byte	0
 11772 01c2 03       		.uleb128 0x3
 11773 01c3 08       		.uleb128 0x8
 11774 01c4 3A       		.uleb128 0x3a
 11775 01c5 0B       		.uleb128 0xb
 11776 01c6 3B       		.uleb128 0x3b
 11777 01c7 05       		.uleb128 0x5
 11778 01c8 49       		.uleb128 0x49
 11779 01c9 13       		.uleb128 0x13
 11780 01ca 02       		.uleb128 0x2
 11781 01cb 18       		.uleb128 0x18
 11782 01cc 00       		.byte	0
 11783 01cd 00       		.byte	0
 11784 01ce 21       		.uleb128 0x21
 11785 01cf 05       		.uleb128 0x5
 11786 01d0 00       		.byte	0
 11787 01d1 03       		.uleb128 0x3
 11788 01d2 0E       		.uleb128 0xe
 11789 01d3 3A       		.uleb128 0x3a
 11790 01d4 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 253


 11791 01d5 3B       		.uleb128 0x3b
 11792 01d6 05       		.uleb128 0x5
 11793 01d7 49       		.uleb128 0x49
 11794 01d8 13       		.uleb128 0x13
 11795 01d9 02       		.uleb128 0x2
 11796 01da 18       		.uleb128 0x18
 11797 01db 00       		.byte	0
 11798 01dc 00       		.byte	0
 11799 01dd 22       		.uleb128 0x22
 11800 01de 2E       		.uleb128 0x2e
 11801 01df 01       		.byte	0x1
 11802 01e0 3F       		.uleb128 0x3f
 11803 01e1 19       		.uleb128 0x19
 11804 01e2 03       		.uleb128 0x3
 11805 01e3 0E       		.uleb128 0xe
 11806 01e4 3A       		.uleb128 0x3a
 11807 01e5 0B       		.uleb128 0xb
 11808 01e6 3B       		.uleb128 0x3b
 11809 01e7 05       		.uleb128 0x5
 11810 01e8 11       		.uleb128 0x11
 11811 01e9 01       		.uleb128 0x1
 11812 01ea 12       		.uleb128 0x12
 11813 01eb 06       		.uleb128 0x6
 11814 01ec 40       		.uleb128 0x40
 11815 01ed 18       		.uleb128 0x18
 11816 01ee 9742     		.uleb128 0x2117
 11817 01f0 19       		.uleb128 0x19
 11818 01f1 01       		.uleb128 0x1
 11819 01f2 13       		.uleb128 0x13
 11820 01f3 00       		.byte	0
 11821 01f4 00       		.byte	0
 11822 01f5 23       		.uleb128 0x23
 11823 01f6 2E       		.uleb128 0x2e
 11824 01f7 01       		.byte	0x1
 11825 01f8 3F       		.uleb128 0x3f
 11826 01f9 19       		.uleb128 0x19
 11827 01fa 03       		.uleb128 0x3
 11828 01fb 0E       		.uleb128 0xe
 11829 01fc 3A       		.uleb128 0x3a
 11830 01fd 0B       		.uleb128 0xb
 11831 01fe 3B       		.uleb128 0x3b
 11832 01ff 05       		.uleb128 0x5
 11833 0200 27       		.uleb128 0x27
 11834 0201 19       		.uleb128 0x19
 11835 0202 11       		.uleb128 0x11
 11836 0203 01       		.uleb128 0x1
 11837 0204 12       		.uleb128 0x12
 11838 0205 06       		.uleb128 0x6
 11839 0206 40       		.uleb128 0x40
 11840 0207 18       		.uleb128 0x18
 11841 0208 9742     		.uleb128 0x2117
 11842 020a 19       		.uleb128 0x19
 11843 020b 01       		.uleb128 0x1
 11844 020c 13       		.uleb128 0x13
 11845 020d 00       		.byte	0
 11846 020e 00       		.byte	0
 11847 020f 24       		.uleb128 0x24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 254


 11848 0210 26       		.uleb128 0x26
 11849 0211 00       		.byte	0
 11850 0212 49       		.uleb128 0x49
 11851 0213 13       		.uleb128 0x13
 11852 0214 00       		.byte	0
 11853 0215 00       		.byte	0
 11854 0216 25       		.uleb128 0x25
 11855 0217 34       		.uleb128 0x34
 11856 0218 00       		.byte	0
 11857 0219 03       		.uleb128 0x3
 11858 021a 0E       		.uleb128 0xe
 11859 021b 3A       		.uleb128 0x3a
 11860 021c 0B       		.uleb128 0xb
 11861 021d 3B       		.uleb128 0x3b
 11862 021e 05       		.uleb128 0x5
 11863 021f 49       		.uleb128 0x49
 11864 0220 13       		.uleb128 0x13
 11865 0221 3F       		.uleb128 0x3f
 11866 0222 19       		.uleb128 0x19
 11867 0223 3C       		.uleb128 0x3c
 11868 0224 19       		.uleb128 0x19
 11869 0225 00       		.byte	0
 11870 0226 00       		.byte	0
 11871 0227 00       		.byte	0
 11872              		.section	.debug_aranges,"",%progbits
 11873 0000 74000000 		.4byte	0x74
 11874 0004 0200     		.2byte	0x2
 11875 0006 00000000 		.4byte	.Ldebug_info0
 11876 000a 04       		.byte	0x4
 11877 000b 00       		.byte	0
 11878 000c 0000     		.2byte	0
 11879 000e 0000     		.2byte	0
 11880 0010 00000000 		.4byte	.LFB64
 11881 0014 18000000 		.4byte	.LFE64-.LFB64
 11882 0018 00000000 		.4byte	.LFB65
 11883 001c 20000000 		.4byte	.LFE65-.LFB65
 11884 0020 00000000 		.4byte	.LFB66
 11885 0024 F4010000 		.4byte	.LFE66-.LFB66
 11886 0028 00000000 		.4byte	.LFB67
 11887 002c 8C040000 		.4byte	.LFE67-.LFB67
 11888 0030 00000000 		.4byte	.LFB68
 11889 0034 DE0A0000 		.4byte	.LFE68-.LFB68
 11890 0038 00000000 		.4byte	.LFB69
 11891 003c D40C0000 		.4byte	.LFE69-.LFB69
 11892 0040 00000000 		.4byte	.LFB70
 11893 0044 24080000 		.4byte	.LFE70-.LFB70
 11894 0048 00000000 		.4byte	.LFB71
 11895 004c 3C0D0000 		.4byte	.LFE71-.LFB71
 11896 0050 00000000 		.4byte	.LFB72
 11897 0054 F8000000 		.4byte	.LFE72-.LFB72
 11898 0058 00000000 		.4byte	.LFB73
 11899 005c 78000000 		.4byte	.LFE73-.LFB73
 11900 0060 00000000 		.4byte	.LFB74
 11901 0064 F8030000 		.4byte	.LFE74-.LFB74
 11902 0068 00000000 		.4byte	.LFB75
 11903 006c 08010000 		.4byte	.LFE75-.LFB75
 11904 0070 00000000 		.4byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 255


 11905 0074 00000000 		.4byte	0
 11906              		.section	.debug_ranges,"",%progbits
 11907              	.Ldebug_ranges0:
 11908 0000 00000000 		.4byte	.LFB64
 11909 0004 18000000 		.4byte	.LFE64
 11910 0008 00000000 		.4byte	.LFB65
 11911 000c 20000000 		.4byte	.LFE65
 11912 0010 00000000 		.4byte	.LFB66
 11913 0014 F4010000 		.4byte	.LFE66
 11914 0018 00000000 		.4byte	.LFB67
 11915 001c 8C040000 		.4byte	.LFE67
 11916 0020 00000000 		.4byte	.LFB68
 11917 0024 DE0A0000 		.4byte	.LFE68
 11918 0028 00000000 		.4byte	.LFB69
 11919 002c D40C0000 		.4byte	.LFE69
 11920 0030 00000000 		.4byte	.LFB70
 11921 0034 24080000 		.4byte	.LFE70
 11922 0038 00000000 		.4byte	.LFB71
 11923 003c 3C0D0000 		.4byte	.LFE71
 11924 0040 00000000 		.4byte	.LFB72
 11925 0044 F8000000 		.4byte	.LFE72
 11926 0048 00000000 		.4byte	.LFB73
 11927 004c 78000000 		.4byte	.LFE73
 11928 0050 00000000 		.4byte	.LFB74
 11929 0054 F8030000 		.4byte	.LFE74
 11930 0058 00000000 		.4byte	.LFB75
 11931 005c 08010000 		.4byte	.LFE75
 11932 0060 00000000 		.4byte	0
 11933 0064 00000000 		.4byte	0
 11934              		.section	.debug_line,"",%progbits
 11935              	.Ldebug_line0:
 11936 0000 650A0000 		.section	.debug_str,"MS",%progbits,1
 11936      0200AC01 
 11936      00000201 
 11936      FB0E0D00 
 11936      01010101 
 11937              	.LASF24:
 11938 0000 73697A65 		.ascii	"sizetype\000"
 11938      74797065 
 11938      00
 11939              	.LASF229:
 11940 0009 706F735F 		.ascii	"pos_cycle_status\000"
 11940      6379636C 
 11940      655F7374 
 11940      61747573 
 11940      00
 11941              	.LASF30:
 11942 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11942      545F4D4F 
 11942      44455F45 
 11942      4D475F46 
 11942      4346535F 
 11943              	.LASF114:
 11944 0032 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 11944      5F414443 
 11944      5F73656E 
 11944      736F7273 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 256


 11944      5F706F72 
 11945              	.LASF128:
 11946 004d 75736572 		.ascii	"user\000"
 11946      00
 11947              	.LASF10:
 11948 0052 696E7433 		.ascii	"int32_t\000"
 11948      325F7400 
 11949              	.LASF259:
 11950 005a 675F7278 		.ascii	"g_rx\000"
 11950      00
 11951              	.LASF210:
 11952 005f 6F6E655F 		.ascii	"one_time_execute\000"
 11952      74696D65 
 11952      5F657865 
 11952      63757465 
 11952      00
 11953              	.LASF46:
 11954 0070 73745F64 		.ascii	"st_data\000"
 11954      61746100 
 11955              	.LASF257:
 11956 0078 675F656D 		.ascii	"g_emg_meas\000"
 11956      675F6D65 
 11956      617300
 11957              	.LASF13:
 11958 0083 75696E74 		.ascii	"uint32\000"
 11958      333200
 11959              	.LASF195:
 11960 008a 6E5F6C69 		.ascii	"n_line\000"
 11960      6E6500
 11961              	.LASF82:
 11962 0091 706F735F 		.ascii	"pos_lim_inf\000"
 11962      6C696D5F 
 11962      696E6600 
 11963              	.LASF280:
 11964 009d 74656E73 		.ascii	"tension_valid\000"
 11964      696F6E5F 
 11964      76616C69 
 11964      6400
 11965              	.LASF159:
 11966 00ab 73746174 		.ascii	"state\000"
 11966      6500
 11967              	.LASF282:
 11968 00b1 6379636C 		.ascii	"cycles_interrupt_flag\000"
 11968      65735F69 
 11968      6E746572 
 11968      72757074 
 11968      5F666C61 
 11969              	.LASF236:
 11970 00c7 62696E5F 		.ascii	"bin_max\000"
 11970      6D617800 
 11971              	.LASF247:
 11972 00cf 61646472 		.ascii	"addr_start_c\000"
 11972      5F737461 
 11972      72745F63 
 11972      00
 11973              	.LASF29:
 11974 00dc 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 257


 11974      545F4D4F 
 11974      44455F45 
 11974      4D475F46 
 11974      43465300 
 11975              	.LASF86:
 11976 00f0 63757272 		.ascii	"curr_lookup\000"
 11976      5F6C6F6F 
 11976      6B757000 
 11977              	.LASF174:
 11978 00fc 70776D5F 		.ascii	"pwm_input\000"
 11978      696E7075 
 11978      7400
 11979              	.LASF54:
 11980 0106 72657374 		.ascii	"rest_counter\000"
 11980      5F636F75 
 11980      6E746572 
 11980      00
 11981              	.LASF28:
 11982 0113 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 11982      545F4D4F 
 11982      44455F45 
 11982      4D475F49 
 11982      4E544547 
 11983              	.LASF222:
 11984 012b 765F636F 		.ascii	"v_count\000"
 11984      756E7400 
 11985              	.LASF164:
 11986 0133 72785F64 		.ascii	"rx_data\000"
 11986      61746100 
 11987              	.LASF215:
 11988 013b 7676765F 		.ascii	"vvv_value\000"
 11988      76616C75 
 11988      6500
 11989              	.LASF14:
 11990 0145 696E7438 		.ascii	"int8\000"
 11990      00
 11991              	.LASF169:
 11992 014a 696E666F 		.ascii	"info_\000"
 11992      5F00
 11993              	.LASF150:
 11994 0150 656D675F 		.ascii	"emg_status\000"
 11994      73746174 
 11994      757300
 11995              	.LASF267:
 11996 015b 66696C74 		.ascii	"filt_emg\000"
 11996      5F656D67 
 11996      00
 11997              	.LASF101:
 11998 0164 73745F65 		.ascii	"st_emg\000"
 11998      6D6700
 11999              	.LASF52:
 12000 016b 706F7369 		.ascii	"position_hist\000"
 12000      74696F6E 
 12000      5F686973 
 12000      7400
 12001              	.LASF151:
 12002 0179 50524550 		.ascii	"PREPARE_DATA\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 258


 12002      4152455F 
 12002      44415441 
 12002      00
 12003              	.LASF135:
 12004 0186 74656D70 		.ascii	"temp_value\000"
 12004      5F76616C 
 12004      756500
 12005              	.LASF233:
 12006 0191 7468725F 		.ascii	"thr_pos\000"
 12006      706F7300 
 12007              	.LASF49:
 12008 0199 72656164 		.ascii	"ready\000"
 12008      7900
 12009              	.LASF98:
 12010 019f 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 12010      6964785F 
 12010      7573655F 
 12010      666F725F 
 12010      636F6E74 
 12011              	.LASF138:
 12012 01b7 6761696E 		.ascii	"gain\000"
 12012      00
 12013              	.LASF58:
 12014 01bc 73745F64 		.ascii	"st_device\000"
 12014      65766963 
 12014      6500
 12015              	.LASF27:
 12016 01c6 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 12016      545F4D4F 
 12016      44455F45 
 12016      4D475F50 
 12016      524F504F 
 12017              	.LASF63:
 12018 01e2 7573655F 		.ascii	"use_2nd_motor_flag\000"
 12018      326E645F 
 12018      6D6F746F 
 12018      725F666C 
 12018      616700
 12019              	.LASF147:
 12020 01f5 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 12020      414E445F 
 12020      4D45414E 
 12020      00
 12021              	.LASF108:
 12022 0202 72656164 		.ascii	"read_imu_flag\000"
 12022      5F696D75 
 12022      5F666C61 
 12022      6700
 12023              	.LASF220:
 12024 0210 66697273 		.ascii	"first_tension_valid\000"
 12024      745F7465 
 12024      6E73696F 
 12024      6E5F7661 
 12024      6C696400 
 12025              	.LASF268:
 12026 0224 74696D65 		.ascii	"timer_value\000"
 12026      725F7661 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 259


 12026      6C756500 
 12027              	.LASF4:
 12028 0230 6C6F6E67 		.ascii	"long int\000"
 12028      20696E74 
 12028      00
 12029              	.LASF126:
 12030 0239 756E7573 		.ascii	"unused_bytes1\000"
 12030      65645F62 
 12030      79746573 
 12030      3100
 12031              	.LASF182:
 12032 0247 53485F45 		.ascii	"SH_ENC_L\000"
 12032      4E435F4C 
 12032      00
 12033              	.LASF62:
 12034 0250 72657365 		.ascii	"reset_counters\000"
 12034      745F636F 
 12034      756E7465 
 12034      727300
 12035              	.LASF232:
 12036 025f 62696E5F 		.ascii	"bin_threshold\000"
 12036      74687265 
 12036      73686F6C 
 12036      6400
 12037              	.LASF118:
 12038 026d 75736572 		.ascii	"user_emg\000"
 12038      5F656D67 
 12038      00
 12039              	.LASF209:
 12040 0276 73616665 		.ascii	"safe_startup_motor_activation\000"
 12040      5F737461 
 12040      72747570 
 12040      5F6D6F74 
 12040      6F725F61 
 12041              	.LASF67:
 12042 0294 756E7573 		.ascii	"unused_bytes\000"
 12042      65645F62 
 12042      79746573 
 12042      00
 12043              	.LASF131:
 12044 02a1 61636365 		.ascii	"accel_value\000"
 12044      6C5F7661 
 12044      6C756500 
 12045              	.LASF198:
 12046 02ad 6175785F 		.ascii	"aux_encoder\000"
 12046      656E636F 
 12046      64657200 
 12047              	.LASF50:
 12048 02b9 73745F63 		.ascii	"st_counters\000"
 12048      6F756E74 
 12048      65727300 
 12049              	.LASF181:
 12050 02c5 53485F4D 		.ascii	"SH_MOT\000"
 12050      4F5400
 12051              	.LASF17:
 12052 02cc 666C6F61 		.ascii	"float32\000"
 12052      74333200 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 260


 12053              	.LASF194:
 12054 02d4 656E636F 		.ascii	"encoder_reading_SPI\000"
 12054      6465725F 
 12054      72656164 
 12054      696E675F 
 12054      53504900 
 12055              	.LASF207:
 12056 02e8 6572726F 		.ascii	"error\000"
 12056      7200
 12057              	.LASF51:
 12058 02ee 656D675F 		.ascii	"emg_counter\000"
 12058      636F756E 
 12058      74657200 
 12059              	.LASF154:
 12060 02fa 57524954 		.ascii	"WRITE_END\000"
 12060      455F454E 
 12060      4400
 12061              	.LASF212:
 12062 0304 706F735F 		.ascii	"pos_reconstruct\000"
 12062      7265636F 
 12062      6E737472 
 12062      75637400 
 12063              	.LASF224:
 12064 0314 70776D5F 		.ascii	"pwm_limit_search\000"
 12064      6C696D69 
 12064      745F7365 
 12064      61726368 
 12064      00
 12065              	.LASF0:
 12066 0325 7369676E 		.ascii	"signed char\000"
 12066      65642063 
 12066      68617200 
 12067              	.LASF117:
 12068 0331 75736572 		.ascii	"user_code_string\000"
 12068      5F636F64 
 12068      655F7374 
 12068      72696E67 
 12068      00
 12069              	.LASF139:
 12070 0342 73745F63 		.ascii	"st_calib\000"
 12070      616C6962 
 12070      00
 12071              	.LASF179:
 12072 034b 6572725F 		.ascii	"err_emg_1\000"
 12072      656D675F 
 12072      3100
 12073              	.LASF180:
 12074 0355 6572725F 		.ascii	"err_emg_2\000"
 12074      656D675F 
 12074      3200
 12075              	.LASF106:
 12076 035f 73776974 		.ascii	"switch_emg\000"
 12076      63685F65 
 12076      6D6700
 12077              	.LASF278:
 12078 036a 656D675F 		.ascii	"emg_2_status\000"
 12078      325F7374 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 261


 12078      61747573 
 12078      00
 12079              	.LASF288:
 12080 0377 4144435F 		.ascii	"ADC_buf\000"
 12080      62756600 
 12081              	.LASF281:
 12082 037f 696E7465 		.ascii	"interrupt_flag\000"
 12082      72727570 
 12082      745F666C 
 12082      616700
 12083              	.LASF239:
 12084 038e 73746570 		.ascii	"step\000"
 12084      00
 12085              	.LASF184:
 12086 0393 63757272 		.ascii	"curr_error_sum\000"
 12086      5F657272 
 12086      6F725F73 
 12086      756D00
 12087              	.LASF1:
 12088 03a2 756E7369 		.ascii	"unsigned char\000"
 12088      676E6564 
 12088      20636861 
 12088      7200
 12089              	.LASF92:
 12090 03b0 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 12090      72657665 
 12090      72735F6D 
 12090      6F746F72 
 12090      5F666C61 
 12091              	.LASF245:
 12092 03c6 726F775F 		.ascii	"row_start\000"
 12092      73746172 
 12092      7400
 12093              	.LASF285:
 12094 03d0 666F7263 		.ascii	"forced_open\000"
 12094      65645F6F 
 12094      70656E00 
 12095              	.LASF202:
 12096 03dc 73706565 		.ascii	"speed_encoder\000"
 12096      645F656E 
 12096      636F6465 
 12096      7200
 12097              	.LASF253:
 12098 03ea 675F7265 		.ascii	"g_refNew\000"
 12098      664E6577 
 12098      00
 12099              	.LASF238:
 12100 03f3 63757272 		.ascii	"curr_off\000"
 12100      5F6F6666 
 12100      00
 12101              	.LASF61:
 12102 03fc 72696768 		.ascii	"right_left\000"
 12102      745F6C65 
 12102      667400
 12103              	.LASF90:
 12104 0407 656E636F 		.ascii	"encoder_line\000"
 12104      6465725F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 262


 12104      6C696E65 
 12104      00
 12105              	.LASF301:
 12106 0414 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 12106      73657273 
 12106      5C4D6174 
 12106      7469615C 
 12106      446F6375 
 12107 0442 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Generic.cydsn\000"
 12107      656E6572 
 12107      69632D46 
 12107      572D5053 
 12107      6F43355C 
 12108              	.LASF277:
 12109 0464 656D675F 		.ascii	"emg_1_status\000"
 12109      315F7374 
 12109      61747573 
 12109      00
 12110              	.LASF130:
 12111 0471 666C6167 		.ascii	"flags\000"
 12111      7300
 12112              	.LASF178:
 12113 0477 68616E64 		.ascii	"handle_value\000"
 12113      6C655F76 
 12113      616C7565 
 12113      00
 12114              	.LASF20:
 12115 0484 63686172 		.ascii	"char\000"
 12115      00
 12116              	.LASF85:
 12117 0489 6D61785F 		.ascii	"max_step_pos\000"
 12117      73746570 
 12117      5F706F73 
 12117      00
 12118              	.LASF290:
 12119 0496 70776D5F 		.ascii	"pwm_sign\000"
 12119      7369676E 
 12119      00
 12120              	.LASF192:
 12121 049f 6D6F746F 		.ascii	"motor_control_generic\000"
 12121      725F636F 
 12121      6E74726F 
 12121      6C5F6765 
 12121      6E657269 
 12122              	.LASF266:
 12123 04b5 66696C74 		.ascii	"filt_vel\000"
 12123      5F76656C 
 12123      00
 12124              	.LASF91:
 12125 04be 70776D5F 		.ascii	"pwm_rate_limiter\000"
 12125      72617465 
 12125      5F6C696D 
 12125      69746572 
 12125      00
 12126              	.LASF71:
 12127 04cf 6B5F645F 		.ascii	"k_d_c\000"
 12127      6300
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 263


 12128              	.LASF96:
 12129 04d5 6D5F6D75 		.ascii	"m_mult\000"
 12129      6C7400
 12130              	.LASF70:
 12131 04dc 6B5F695F 		.ascii	"k_i_c\000"
 12131      6300
 12132              	.LASF188:
 12133 04e2 6D6F746F 		.ascii	"motor_dir\000"
 12133      725F6469 
 12133      7200
 12134              	.LASF235:
 12135 04ec 62696E5F 		.ascii	"bin_st\000"
 12135      737400
 12136              	.LASF157:
 12137 04f3 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 12137      52533438 
 12137      355F5258 
 12137      5F457849 
 12137      6E746572 
 12138              	.LASF83:
 12139 050c 706F735F 		.ascii	"pos_lim_sup\000"
 12139      6C696D5F 
 12139      73757000 
 12140              	.LASF137:
 12141 0518 6F6C645F 		.ascii	"old_value\000"
 12141      76616C75 
 12141      6500
 12142              	.LASF104:
 12143 0522 656D675F 		.ascii	"emg_speed\000"
 12143      73706565 
 12143      6400
 12144              	.LASF122:
 12145 052c 72657374 		.ascii	"rest_vel\000"
 12145      5F76656C 
 12145      00
 12146              	.LASF144:
 12147 0535 4E4F524D 		.ascii	"NORMAL\000"
 12147      414C00
 12148              	.LASF173:
 12149 053c 6D6F746F 		.ascii	"motor_control_SH\000"
 12149      725F636F 
 12149      6E74726F 
 12149      6C5F5348 
 12149      00
 12150              	.LASF296:
 12151 054d 7046696C 		.ascii	"pFile\000"
 12151      6500
 12152              	.LASF183:
 12153 0553 706F735F 		.ascii	"pos_error_sum\000"
 12153      6572726F 
 12153      725F7375 
 12153      6D00
 12154              	.LASF115:
 12155 0561 4144435F 		.ascii	"ADC_conf\000"
 12155      636F6E66 
 12155      00
 12156              	.LASF274:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 264


 12157 056a 6465765F 		.ascii	"dev_tension_f\000"
 12157      74656E73 
 12157      696F6E5F 
 12157      6600
 12158              	.LASF73:
 12159 0578 6B5F695F 		.ascii	"k_i_dl\000"
 12159      646C00
 12160              	.LASF47:
 12161 057f 62756666 		.ascii	"buffer\000"
 12161      657200
 12162              	.LASF75:
 12163 0586 6B5F705F 		.ascii	"k_p_c_dl\000"
 12163      635F646C 
 12163      00
 12164              	.LASF165:
 12165 058f 72785F64 		.ascii	"rx_data_type\000"
 12165      6174615F 
 12165      74797065 
 12165      00
 12166              	.LASF298:
 12167 059c 675F696D 		.ascii	"g_imuNew\000"
 12167      754E6577 
 12167      00
 12168              	.LASF142:
 12169 05a5 73706565 		.ascii	"speed\000"
 12169      6400
 12170              	.LASF189:
 12171 05ab 706F7369 		.ascii	"position_counter\000"
 12171      74696F6E 
 12171      5F636F75 
 12171      6E746572 
 12171      00
 12172              	.LASF241:
 12173 05bc 74696D65 		.ascii	"timer_value_e\000"
 12173      725F7661 
 12173      6C75655F 
 12173      6500
 12174              	.LASF160:
 12175 05ca 64617461 		.ascii	"data_packet_index\000"
 12175      5F706163 
 12175      6B65745F 
 12175      696E6465 
 12175      7800
 12176              	.LASF162:
 12177 05dc 64617461 		.ascii	"data_packet_buffer\000"
 12177      5F706163 
 12177      6B65745F 
 12177      62756666 
 12177      657200
 12178              	.LASF276:
 12179 05ef 6379636C 		.ascii	"cycles_status\000"
 12179      65735F73 
 12179      74617475 
 12179      7300
 12180              	.LASF167:
 12181 05fd 636F756E 		.ascii	"counter_calibration\000"
 12181      7465725F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 265


 12181      63616C69 
 12181      62726174 
 12181      696F6E00 
 12182              	.LASF255:
 12183 0611 675F6D65 		.ascii	"g_meas\000"
 12183      617300
 12184              	.LASF240:
 12185 0618 74696D65 		.ascii	"timer_value_s\000"
 12185      725F7661 
 12185      6C75655F 
 12185      7300
 12186              	.LASF294:
 12187 0626 456E636F 		.ascii	"Encoder_Check\000"
 12187      6465725F 
 12187      43686563 
 12187      6B00
 12188              	.LASF206:
 12189 0634 636F6D70 		.ascii	"comp_value_encoder\000"
 12189      5F76616C 
 12189      75655F65 
 12189      6E636F64 
 12189      657200
 12190              	.LASF291:
 12191 0647 64617461 		.ascii	"data_encoder_raw\000"
 12191      5F656E63 
 12191      6F646572 
 12191      5F726177 
 12191      00
 12192              	.LASF252:
 12193 0658 675F7265 		.ascii	"g_ref\000"
 12193      6600
 12194              	.LASF25:
 12195 065e 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 12195      545F4D4F 
 12195      44455F45 
 12195      58544552 
 12195      4E414C00 
 12196              	.LASF197:
 12197 0672 696E6465 		.ascii	"index\000"
 12197      7800
 12198              	.LASF123:
 12199 0678 72657374 		.ascii	"rest_position_flag\000"
 12199      5F706F73 
 12199      6974696F 
 12199      6E5F666C 
 12199      616700
 12200              	.LASF297:
 12201 068b 675F696D 		.ascii	"g_imu\000"
 12201      7500
 12202              	.LASF76:
 12203 0691 6B5F695F 		.ascii	"k_i_c_dl\000"
 12203      635F646C 
 12203      00
 12204              	.LASF166:
 12205 069a 7061636B 		.ascii	"package_count\000"
 12205      6167655F 
 12205      636F756E 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 266


 12205      7400
 12206              	.LASF37:
 12207 06a8 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 12207      5F414E44 
 12207      5F504F53 
 12207      5F434F4E 
 12207      54524F4C 
 12208              	.LASF140:
 12209 06bd 656E6162 		.ascii	"enabled\000"
 12209      6C656400 
 12210              	.LASF5:
 12211 06c5 6C6F6E67 		.ascii	"long unsigned int\000"
 12211      20756E73 
 12211      69676E65 
 12211      6420696E 
 12211      7400
 12212              	.LASF56:
 12213 06d7 746F7461 		.ascii	"total_time_on\000"
 12213      6C5F7469 
 12213      6D655F6F 
 12213      6E00
 12214              	.LASF152:
 12215 06e5 57524954 		.ascii	"WRITE_CYCLES\000"
 12215      455F4359 
 12215      434C4553 
 12215      00
 12216              	.LASF243:
 12217 06f2 73746174 		.ascii	"status\000"
 12217      757300
 12218              	.LASF57:
 12219 06f9 746F7461 		.ascii	"total_time_rest\000"
 12219      6C5F7469 
 12219      6D655F72 
 12219      65737400 
 12220              	.LASF78:
 12221 0709 61637469 		.ascii	"activ\000"
 12221      7600
 12222              	.LASF227:
 12223 070f 6D696E5F 		.ascii	"min_tension\000"
 12223      74656E73 
 12223      696F6E00 
 12224              	.LASF286:
 12225 071b 62617474 		.ascii	"battery_low_SoC\000"
 12225      6572795F 
 12225      6C6F775F 
 12225      536F4300 
 12226              	.LASF95:
 12227 072b 6D5F6F66 		.ascii	"m_off\000"
 12227      6600
 12228              	.LASF279:
 12229 0731 72657365 		.ascii	"reset_last_value_flag\000"
 12229      745F6C61 
 12229      73745F76 
 12229      616C7565 
 12229      5F666C61 
 12230              	.LASF134:
 12231 0747 71756174 		.ascii	"quat_value\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 267


 12231      5F76616C 
 12231      756500
 12232              	.LASF120:
 12233 0752 72657374 		.ascii	"rest_pos\000"
 12233      5F706F73 
 12233      00
 12234              	.LASF39:
 12235 075b 63757272 		.ascii	"curr\000"
 12235      00
 12236              	.LASF153:
 12237 0760 57414954 		.ascii	"WAIT_QUERY\000"
 12237      5F515545 
 12237      525900
 12238              	.LASF88:
 12239 076b 696E7075 		.ascii	"input_mode\000"
 12239      745F6D6F 
 12239      646500
 12240              	.LASF35:
 12241 0776 434F4E54 		.ascii	"CONTROL_PWM\000"
 12241      524F4C5F 
 12241      50574D00 
 12242              	.LASF228:
 12243 0782 6379636C 		.ascii	"cycles_counter_update\000"
 12243      65735F63 
 12243      6F756E74 
 12243      65725F75 
 12243      70646174 
 12244              	.LASF299:
 12245 0798 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12245      43313120 
 12245      352E342E 
 12245      31203230 
 12245      31363036 
 12246 07cb 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 12246      20726576 
 12246      6973696F 
 12246      6E203233 
 12246      37373135 
 12247 07fe 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 12247      66756E63 
 12247      74696F6E 
 12247      2D736563 
 12247      74696F6E 
 12248              	.LASF41:
 12249 0826 73745F72 		.ascii	"st_ref\000"
 12249      656600
 12250              	.LASF269:
 12251 082d 74696D65 		.ascii	"timer_value0\000"
 12251      725F7661 
 12251      6C756530 
 12251      00
 12252              	.LASF119:
 12253 083a 73745F53 		.ascii	"st_SH_spec\000"
 12253      485F7370 
 12253      656300
 12254              	.LASF213:
 12255 0845 765F7661 		.ascii	"v_value\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 268


 12255      6C756500 
 12256              	.LASF262:
 12257 084d 63616C69 		.ascii	"calib\000"
 12257      6200
 12258              	.LASF6:
 12259 0853 6C6F6E67 		.ascii	"long long int\000"
 12259      206C6F6E 
 12259      6720696E 
 12259      7400
 12260              	.LASF33:
 12261 0861 53485F63 		.ascii	"SH_control_mode\000"
 12261      6F6E7472 
 12261      6F6C5F6D 
 12261      6F646500 
 12262              	.LASF171:
 12263 0871 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 12263      4E445F4D 
 12263      4F544F52 
 12263      5F494458 
 12263      00
 12264              	.LASF287:
 12265 0882 6368616E 		.ascii	"change_ext_ref_flag\000"
 12265      67655F65 
 12265      78745F72 
 12265      65665F66 
 12265      6C616700 
 12266              	.LASF19:
 12267 0896 646F7562 		.ascii	"double\000"
 12267      6C6500
 12268              	.LASF264:
 12269 089d 66696C74 		.ascii	"filt_curr_diff\000"
 12269      5F637572 
 12269      725F6469 
 12269      666600
 12270              	.LASF172:
 12271 08ac 696E7465 		.ascii	"interrupt_manager\000"
 12271      72727570 
 12271      745F6D61 
 12271      6E616765 
 12271      7200
 12272              	.LASF94:
 12273 08be 456E635F 		.ascii	"Enc_raw_read_conf\000"
 12273      7261775F 
 12273      72656164 
 12273      5F636F6E 
 12273      6600
 12274              	.LASF143:
 12275 08d0 72657065 		.ascii	"repetitions\000"
 12275      74697469 
 12275      6F6E7300 
 12276              	.LASF84:
 12277 08dc 6D61785F 		.ascii	"max_step_neg\000"
 12277      73746570 
 12277      5F6E6567 
 12277      00
 12278              	.LASF211:
 12279 08e9 636F756E 		.ascii	"count_startup_motor\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 269


 12279      745F7374 
 12279      61727475 
 12279      705F6D6F 
 12279      746F7200 
 12280              	.LASF148:
 12281 08fd 57414954 		.ascii	"WAIT\000"
 12281      00
 12282              	.LASF18:
 12283 0902 666C6F61 		.ascii	"float\000"
 12283      7400
 12284              	.LASF110:
 12285 0908 494D555F 		.ascii	"IMU_conf\000"
 12285      636F6E66 
 12285      00
 12286              	.LASF221:
 12287 0911 636F756E 		.ascii	"count\000"
 12287      7400
 12288              	.LASF68:
 12289 0917 73745F6D 		.ascii	"st_motor\000"
 12289      6F746F72 
 12289      00
 12290              	.LASF249:
 12291 0920 6D5F6164 		.ascii	"m_addr\000"
 12291      647200
 12292              	.LASF261:
 12293 0927 635F6D65 		.ascii	"c_mem\000"
 12293      6D00
 12294              	.LASF8:
 12295 092d 756E7369 		.ascii	"unsigned int\000"
 12295      676E6564 
 12295      20696E74 
 12295      00
 12296              	.LASF234:
 12297 093a 6D61785F 		.ascii	"max_pos\000"
 12297      706F7300 
 12298              	.LASF295:
 12299 0942 72657374 		.ascii	"rest_pos_curr_ref\000"
 12299      5F706F73 
 12299      5F637572 
 12299      725F7265 
 12299      6600
 12300              	.LASF125:
 12301 0954 666C6167 		.ascii	"flag\000"
 12301      00
 12302              	.LASF89:
 12303 0959 636F6E74 		.ascii	"control_mode\000"
 12303      726F6C5F 
 12303      6D6F6465 
 12303      00
 12304              	.LASF21:
 12305 0966 63797374 		.ascii	"cystatus\000"
 12305      61747573 
 12305      00
 12306              	.LASF26:
 12307 096f 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 12307      545F4D4F 
 12307      44455F45 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 270


 12307      4E434F44 
 12307      45523300 
 12308              	.LASF107:
 12309 0983 73745F69 		.ascii	"st_imu\000"
 12309      6D7500
 12310              	.LASF190:
 12311 098a 63757272 		.ascii	"current_emg\000"
 12311      656E745F 
 12311      656D6700 
 12312              	.LASF163:
 12313 0996 72785F71 		.ascii	"rx_queue\000"
 12313      75657565 
 12313      00
 12314              	.LASF196:
 12315 099f 6173736F 		.ascii	"assoc_motor\000"
 12315      635F6D6F 
 12315      746F7200 
 12316              	.LASF45:
 12317 09ab 6164645F 		.ascii	"add_emg\000"
 12317      656D6700 
 12318              	.LASF177:
 12319 09b3 695F7265 		.ascii	"i_ref\000"
 12319      6600
 12320              	.LASF102:
 12321 09b9 656D675F 		.ascii	"emg_threshold\000"
 12321      74687265 
 12321      73686F6C 
 12321      6400
 12322              	.LASF242:
 12323 09c7 73617665 		.ascii	"save_cycles_eeprom\000"
 12323      5F637963 
 12323      6C65735F 
 12323      65657072 
 12323      6F6D00
 12324              	.LASF53:
 12325 09da 63757272 		.ascii	"current_hist\000"
 12325      656E745F 
 12325      68697374 
 12325      00
 12326              	.LASF36:
 12327 09e7 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 12327      524F4C5F 
 12327      43555252 
 12327      454E5400 
 12328              	.LASF23:
 12329 09f7 6C6F6E67 		.ascii	"long double\000"
 12329      20646F75 
 12329      626C6500 
 12330              	.LASF146:
 12331 0a03 44495343 		.ascii	"DISCARD\000"
 12331      41524400 
 12332              	.LASF185:
 12333 0a0b 70726576 		.ascii	"prev_pos_err\000"
 12333      5F706F73 
 12333      5F657272 
 12333      00
 12334              	.LASF204:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 271


 12335 0a18 696E6974 		.ascii	"init_rot\000"
 12335      5F726F74 
 12335      00
 12336              	.LASF225:
 12337 0a21 6D6F745F 		.ascii	"mot_idx\000"
 12337      69647800 
 12338              	.LASF44:
 12339 0a29 73745F65 		.ascii	"st_emg_meas\000"
 12339      6D675F6D 
 12339      65617300 
 12340              	.LASF265:
 12341 0a35 66696C74 		.ascii	"filt_i\000"
 12341      5F6900
 12342              	.LASF99:
 12343 0a3c 6D6F746F 		.ascii	"motor_handle_ratio\000"
 12343      725F6861 
 12343      6E646C65 
 12343      5F726174 
 12343      696F00
 12344              	.LASF263:
 12345 0a4f 66696C74 		.ascii	"filt_v\000"
 12345      5F7600
 12346              	.LASF284:
 12347 0a56 72657374 		.ascii	"rest_enabled\000"
 12347      5F656E61 
 12347      626C6564 
 12347      00
 12348              	.LASF254:
 12349 0a63 675F7265 		.ascii	"g_refOld\000"
 12349      664F6C64 
 12349      00
 12350              	.LASF175:
 12351 0a6c 706F735F 		.ascii	"pos_error\000"
 12351      6572726F 
 12351      7200
 12352              	.LASF132:
 12353 0a76 6779726F 		.ascii	"gyro_value\000"
 12353      5F76616C 
 12353      756500
 12354              	.LASF112:
 12355 0a81 63757272 		.ascii	"curr_time\000"
 12355      5F74696D 
 12355      6500
 12356              	.LASF97:
 12357 0a8b 646F7562 		.ascii	"double_encoder_on_off\000"
 12357      6C655F65 
 12357      6E636F64 
 12357      65725F6F 
 12357      6E5F6F66 
 12358              	.LASF226:
 12359 0aa1 6D61785F 		.ascii	"max_tension\000"
 12359      74656E73 
 12359      696F6E00 
 12360              	.LASF170:
 12361 0aad 4D4F544F 		.ascii	"MOTOR_IDX\000"
 12361      525F4944 
 12361      5800
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 272


 12362              	.LASF205:
 12363 0ab7 6C617374 		.ascii	"last_value_encoder\000"
 12363      5F76616C 
 12363      75655F65 
 12363      6E636F64 
 12363      657200
 12364              	.LASF168:
 12365 0aca 636F756E 		.ascii	"counter_tension_func\000"
 12365      7465725F 
 12365      74656E73 
 12365      696F6E5F 
 12365      66756E63 
 12366              	.LASF270:
 12367 0adf 6379636C 		.ascii	"cycle_time\000"
 12367      655F7469 
 12367      6D6500
 12368              	.LASF7:
 12369 0aea 6C6F6E67 		.ascii	"long long unsigned int\000"
 12369      206C6F6E 
 12369      6720756E 
 12369      7369676E 
 12369      65642069 
 12370              	.LASF48:
 12371 0b01 6C656E67 		.ascii	"length\000"
 12371      746800
 12372              	.LASF129:
 12373 0b08 73745F69 		.ascii	"st_imu_data\000"
 12373      6D755F64 
 12373      61746100 
 12374              	.LASF133:
 12375 0b14 6D61675F 		.ascii	"mag_value\000"
 12375      76616C75 
 12375      6500
 12376              	.LASF40:
 12377 0b1e 6F6E6F66 		.ascii	"onoff\000"
 12377      6600
 12378              	.LASF200:
 12379 0b24 746D705F 		.ascii	"tmp_value_encoder_32\000"
 12379      76616C75 
 12379      655F656E 
 12379      636F6465 
 12379      725F3332 
 12380              	.LASF186:
 12381 0b39 70726576 		.ascii	"prev_curr_err\000"
 12381      5F637572 
 12381      725F6572 
 12381      7200
 12382              	.LASF161:
 12383 0b47 64617461 		.ascii	"data_packet_length\000"
 12383      5F706163 
 12383      6B65745F 
 12383      6C656E67 
 12383      746800
 12384              	.LASF69:
 12385 0b5a 6B5F705F 		.ascii	"k_p_c\000"
 12385      6300
 12386              	.LASF271:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 273


 12387 0b60 6465765F 		.ascii	"dev_tension\000"
 12387      74656E73 
 12387      696F6E00 
 12388              	.LASF80:
 12389 0b6c 6D6F746F 		.ascii	"motor_driver_type\000"
 12389      725F6472 
 12389      69766572 
 12389      5F747970 
 12389      6500
 12390              	.LASF149:
 12391 0b7e 57414954 		.ascii	"WAIT_EoC\000"
 12391      5F456F43 
 12391      00
 12392              	.LASF22:
 12393 0b87 72656738 		.ascii	"reg8\000"
 12393      00
 12394              	.LASF217:
 12395 0b8c 695F6175 		.ascii	"i_aux\000"
 12395      7800
 12396              	.LASF244:
 12397 0b92 726F775F 		.ascii	"row_number\000"
 12397      6E756D62 
 12397      657200
 12398              	.LASF223:
 12399 0b9d 6F766572 		.ascii	"overcurrent_control\000"
 12399      63757272 
 12399      656E745F 
 12399      636F6E74 
 12399      726F6C00 
 12400              	.LASF237:
 12401 0bb1 63757272 		.ascii	"curr_pos\000"
 12401      5F706F73 
 12401      00
 12402              	.LASF145:
 12403 0bba 52455345 		.ascii	"RESET\000"
 12403      5400
 12404              	.LASF216:
 12405 0bc0 616E616C 		.ascii	"analog_read_end\000"
 12405      6F675F72 
 12405      6561645F 
 12405      656E6400 
 12406              	.LASF292:
 12407 0bd0 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 12407      636F6465 
 12407      725F4C69 
 12407      6E655F43 
 12407      6F6E6E65 
 12408              	.LASF66:
 12409 0be9 6465765F 		.ascii	"dev_type\000"
 12409      74797065 
 12409      00
 12410              	.LASF230:
 12411 0bf2 656D675F 		.ascii	"emg_cycle_status\000"
 12411      6379636C 
 12411      655F7374 
 12411      61747573 
 12411      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 274


 12412              	.LASF116:
 12413 0c03 73745F75 		.ascii	"st_user\000"
 12413      73657200 
 12414              	.LASF100:
 12415 0c0b 67656172 		.ascii	"gears_params\000"
 12415      735F7061 
 12415      72616D73 
 12415      00
 12416              	.LASF111:
 12417 0c18 73745F65 		.ascii	"st_expansion\000"
 12417      7870616E 
 12417      73696F6E 
 12417      00
 12418              	.LASF105:
 12419 0c25 656D675F 		.ascii	"emg_calibration_flag\000"
 12419      63616C69 
 12419      62726174 
 12419      696F6E5F 
 12419      666C6167 
 12420              	.LASF42:
 12421 0c3a 73745F6D 		.ascii	"st_meas\000"
 12421      65617300 
 12422              	.LASF246:
 12423 0c42 61646472 		.ascii	"addr_start\000"
 12423      5F737461 
 12423      727400
 12424              	.LASF250:
 12425 0c4d 70776D5F 		.ascii	"pwm_preload_values\000"
 12425      7072656C 
 12425      6F61645F 
 12425      76616C75 
 12425      657300
 12426              	.LASF31:
 12427 0c60 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 12427      545F4D4F 
 12427      44455F45 
 12427      4D475F50 
 12427      524F504F 
 12428              	.LASF156:
 12429 0c7f 636F756E 		.ascii	"counter_status\000"
 12429      7465725F 
 12429      73746174 
 12429      757300
 12430              	.LASF260:
 12431 0c8e 675F6D65 		.ascii	"g_mem\000"
 12431      6D00
 12432              	.LASF218:
 12433 0c94 656D675F 		.ascii	"emg_counter_1\000"
 12433      636F756E 
 12433      7465725F 
 12433      3100
 12434              	.LASF219:
 12435 0ca2 656D675F 		.ascii	"emg_counter_2\000"
 12435      636F756E 
 12435      7465725F 
 12435      3200
 12436              	.LASF208:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 275


 12437 0cb0 6F6E6C79 		.ascii	"only_first_time\000"
 12437      5F666972 
 12437      73745F74 
 12437      696D6500 
 12438              	.LASF11:
 12439 0cc0 75696E74 		.ascii	"uint8\000"
 12439      3800
 12440              	.LASF203:
 12441 0cc6 76616C75 		.ascii	"value_diff\000"
 12441      655F6469 
 12441      666600
 12442              	.LASF2:
 12443 0cd1 73686F72 		.ascii	"short int\000"
 12443      7420696E 
 12443      7400
 12444              	.LASF74:
 12445 0cdb 6B5F645F 		.ascii	"k_d_dl\000"
 12445      646C00
 12446              	.LASF201:
 12447 0ce2 76616C75 		.ascii	"value_encoder\000"
 12447      655F656E 
 12447      636F6465 
 12447      7200
 12448              	.LASF127:
 12449 0cf0 6D6F746F 		.ascii	"motor\000"
 12449      7200
 12450              	.LASF273:
 12451 0cf6 6465765F 		.ascii	"dev_pwm_sat\000"
 12451      70776D5F 
 12451      73617400 
 12452              	.LASF59:
 12453 0d02 68775F6D 		.ascii	"hw_maint_date\000"
 12453      61696E74 
 12453      5F646174 
 12453      6500
 12454              	.LASF191:
 12455 0d10 66756E63 		.ascii	"function_scheduler\000"
 12455      74696F6E 
 12455      5F736368 
 12455      6564756C 
 12455      657200
 12456              	.LASF187:
 12457 0d23 70726576 		.ascii	"prev_pwm\000"
 12457      5F70776D 
 12457      00
 12458              	.LASF60:
 12459 0d2c 73746174 		.ascii	"stats_period_begin_date\000"
 12459      735F7065 
 12459      72696F64 
 12459      5F626567 
 12459      696E5F64 
 12460              	.LASF251:
 12461 0d44 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12461      52784275 
 12461      66666572 
 12461      00
 12462              	.LASF275:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 276


 12463 0d51 706F775F 		.ascii	"pow_tension\000"
 12463      74656E73 
 12463      696F6E00 
 12464              	.LASF15:
 12465 0d5d 696E7431 		.ascii	"int16\000"
 12465      3600
 12466              	.LASF113:
 12467 0d63 72656164 		.ascii	"read_exp_port_flag\000"
 12467      5F657870 
 12467      5F706F72 
 12467      745F666C 
 12467      616700
 12468              	.LASF79:
 12469 0d76 61637469 		.ascii	"activate_pwm_rescaling\000"
 12469      76617465 
 12469      5F70776D 
 12469      5F726573 
 12469      63616C69 
 12470              	.LASF72:
 12471 0d8d 6B5F705F 		.ascii	"k_p_dl\000"
 12471      646C00
 12472              	.LASF43:
 12473 0d94 65737469 		.ascii	"estim_curr\000"
 12473      6D5F6375 
 12473      727200
 12474              	.LASF272:
 12475 0d9f 6465765F 		.ascii	"dev_pwm_limit\000"
 12475      70776D5F 
 12475      6C696D69 
 12475      7400
 12476              	.LASF176:
 12477 0dad 63757272 		.ascii	"curr_error\000"
 12477      5F657272 
 12477      6F7200
 12478              	.LASF293:
 12479 0db8 456E636F 		.ascii	"Encoder_Value\000"
 12479      6465725F 
 12479      56616C75 
 12479      6500
 12480              	.LASF65:
 12481 0dc6 75736572 		.ascii	"user_id\000"
 12481      5F696400 
 12482              	.LASF231:
 12483 0dce 72657374 		.ascii	"rest_cycle_status\000"
 12483      5F637963 
 12483      6C655F73 
 12483      74617475 
 12483      7300
 12484              	.LASF199:
 12485 0de0 746D705F 		.ascii	"tmp_value_encoder\000"
 12485      76616C75 
 12485      655F656E 
 12485      636F6465 
 12485      7200
 12486              	.LASF158:
 12487 0df2 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 12487      4359434C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 277


 12487      45535F48 
 12487      616E646C 
 12487      657200
 12488              	.LASF64:
 12489 0e05 62617564 		.ascii	"baud_rate\000"
 12489      5F726174 
 12489      6500
 12490              	.LASF109:
 12491 0e0f 5350495F 		.ascii	"SPI_read_delay\000"
 12491      72656164 
 12491      5F64656C 
 12491      617900
 12492              	.LASF3:
 12493 0e1e 73686F72 		.ascii	"short unsigned int\000"
 12493      7420756E 
 12493      7369676E 
 12493      65642069 
 12493      6E7400
 12494              	.LASF93:
 12495 0e31 73745F65 		.ascii	"st_encoder\000"
 12495      6E636F64 
 12495      657200
 12496              	.LASF193:
 12497 0e3c 454E435F 		.ascii	"ENC_L\000"
 12497      4C00
 12498              	.LASF124:
 12499 0e42 73745F65 		.ascii	"st_eeprom\000"
 12499      6570726F 
 12499      6D00
 12500              	.LASF300:
 12501 0e4c 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 12501      72635C69 
 12501      6E746572 
 12501      72757074 
 12501      696F6E73 
 12502              	.LASF16:
 12503 0e63 696E7433 		.ascii	"int32\000"
 12503      3200
 12504              	.LASF289:
 12505 0e69 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 12505      4F465F41 
 12505      4E414C4F 
 12505      475F494E 
 12505      50555453 
 12506              	.LASF38:
 12507 0e7e 46535F46 		.ascii	"FS_FILE\000"
 12507      494C4500 
 12508              	.LASF81:
 12509 0e86 706F735F 		.ascii	"pos_lim_flag\000"
 12509      6C696D5F 
 12509      666C6167 
 12509      00
 12510              	.LASF256:
 12511 0e93 675F6D65 		.ascii	"g_measOld\000"
 12511      61734F6C 
 12511      6400
 12512              	.LASF248:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 278


 12513 0e9d 726F775F 		.ascii	"row_end\000"
 12513      656E6400 
 12514              	.LASF34:
 12515 0ea5 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 12515      524F4C5F 
 12515      414E474C 
 12515      4500
 12516              	.LASF9:
 12517 0eb3 5F5F696E 		.ascii	"__int32_t\000"
 12517      7433325F 
 12517      7400
 12518              	.LASF55:
 12519 0ebd 77697265 		.ascii	"wire_disp\000"
 12519      5F646973 
 12519      7000
 12520              	.LASF283:
 12521 0ec7 63616E5F 		.ascii	"can_write\000"
 12521      77726974 
 12521      6500
 12522              	.LASF103:
 12523 0ed1 656D675F 		.ascii	"emg_max_value\000"
 12523      6D61785F 
 12523      76616C75 
 12523      6500
 12524              	.LASF87:
 12525 0edf 63757272 		.ascii	"current_limit\000"
 12525      656E745F 
 12525      6C696D69 
 12525      7400
 12526              	.LASF32:
 12527 0eed 53485F69 		.ascii	"SH_input_mode\000"
 12527      6E707574 
 12527      5F6D6F64 
 12527      6500
 12528              	.LASF155:
 12529 0efb 4E4F4E45 		.ascii	"NONE\000"
 12529      00
 12530              	.LASF12:
 12531 0f00 75696E74 		.ascii	"uint16\000"
 12531      313600
 12532              	.LASF258:
 12533 0f07 675F656D 		.ascii	"g_emg_measOld\000"
 12533      675F6D65 
 12533      61734F6C 
 12533      6400
 12534              	.LASF121:
 12535 0f15 72657374 		.ascii	"rest_delay\000"
 12535      5F64656C 
 12535      617900
 12536              	.LASF136:
 12537 0f20 73745F66 		.ascii	"st_filter\000"
 12537      696C7465 
 12537      7200
 12538              	.LASF214:
 12539 0f2a 76765F76 		.ascii	"vv_value\000"
 12539      616C7565 
 12539      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccKdTwyR.s 			page 279


 12540              	.LASF77:
 12541 0f33 6B5F645F 		.ascii	"k_d_c_dl\000"
 12541      635F646C 
 12541      00
 12542              	.LASF141:
 12543 0f3c 64697265 		.ascii	"direction\000"
 12543      6374696F 
 12543      6E00
 12544              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
