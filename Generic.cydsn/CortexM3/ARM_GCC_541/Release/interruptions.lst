ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10381
 458 01dc 04000000 		.word	rx_queue.10385
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10383
 461 01e8 08000000 		.word	data_packet_index.10382
 462 01ec 0C000000 		.word	data_packet_buffer.10384
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fdiv
 469              		.section	.text.function_scheduler,"ax",%progbits
 470              		.align	2
 471              		.global	function_scheduler
 472              		.thumb
 473              		.thumb_func
 474              		.type	function_scheduler, %function
 475              	function_scheduler:
 476              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 14


 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 1000 Hz
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 477              		.loc 1 268 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 2504
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 B0B5     		push	{r4, r5, r7, lr}
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 ADF6C81D 		subw	sp, sp, #2504
 488              		.cfi_def_cfa_offset 2520
 489 0006 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 491              		.loc 1 272 0
 492 0008 3B46     		mov	r3, r7
 493 000a 0022     		movs	r2, #0
 494 000c 1A60     		str	r2, [r3]
 495 000e 0433     		adds	r3, r3, #4
 496 0010 4FF41C62 		mov	r2, #2496
 497 0014 0021     		movs	r1, #0
 498 0016 1846     		mov	r0, r3
 499 0018 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 500              		.loc 1 274 0
 501 001c 0023     		movs	r3, #0
 502 001e 87F8C639 		strb	r3, [r7, #2502]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 503              		.loc 1 275 0
 504 0022 0123     		movs	r3, #1
 505 0024 87F8C539 		strb	r3, [r7, #2501]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 506              		.loc 1 277 0
 507 0028 0020     		movs	r0, #0
 508 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 509              		.loc 1 278 0
 510 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 511 0032 0346     		mov	r3, r0
 512 0034 1A46     		mov	r2, r3
 513 0036 C74B     		ldr	r3, .L74
 514 0038 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 15


 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 515              		.loc 1 282 0
 516 003a 0120     		movs	r0, #1
 517 003c FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 518              		.loc 1 286 0
 519 0040 C54B     		ldr	r3, .L74+4
 520 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0044 002B     		cmp	r3, #0
 522 0046 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 523              		.loc 1 287 0
 524 0048 C34B     		ldr	r3, .L74+4
 525 004a 0022     		movs	r2, #0
 526 004c 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 527              		.loc 1 288 0
 528 004e FFF7FEFF 		bl	interrupt_manager
 529              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 530              		.loc 1 291 0
 531 0052 C24B     		ldr	r3, .L74+8
 532 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 533 0058 012B     		cmp	r3, #1
 534 005a 65D0     		beq	.L36
 535 005c 022B     		cmp	r3, #2
 536 005e 00F01C81 		beq	.L37
 537 0062 002B     		cmp	r3, #0
 538 0064 40F08381 		bne	.L35
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 539              		.loc 1 297 0
 540 0068 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 541 006c BB49     		ldr	r1, .L74+8
 542 006e 1346     		mov	r3, r2
 543 0070 DB00     		lsls	r3, r3, #3
 544 0072 9B1A     		subs	r3, r3, r2
 545 0074 1B01     		lsls	r3, r3, #4
 546 0076 0B44     		add	r3, r3, r1
 547 0078 03F58873 		add	r3, r3, #272
 548 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 549 007e 1A46     		mov	r2, r3
 550 0080 B74B     		ldr	r3, .L74+12
 551 0082 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 552 0084 002B     		cmp	r3, #0
 553 0086 25D0     		beq	.L39
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 16


 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 554              		.loc 1 299 0
 555 0088 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 556 008c B349     		ldr	r1, .L74+8
 557 008e 1346     		mov	r3, r2
 558 0090 DB00     		lsls	r3, r3, #3
 559 0092 9B1A     		subs	r3, r3, r2
 560 0094 1B01     		lsls	r3, r3, #4
 561 0096 0B44     		add	r3, r3, r1
 562 0098 03F58873 		add	r3, r3, #272
 563 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 564 009e 1846     		mov	r0, r3
 565 00a0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 566              		.loc 1 301 0
 567 00a4 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 568 00a8 AC49     		ldr	r1, .L74+8
 569 00aa 1346     		mov	r3, r2
 570 00ac DB00     		lsls	r3, r3, #3
 571 00ae 9B1A     		subs	r3, r3, r2
 572 00b0 1B01     		lsls	r3, r3, #4
 573 00b2 0B44     		add	r3, r3, r1
 574 00b4 03F58873 		add	r3, r3, #272
 575 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 576 00ba 0021     		movs	r1, #0
 577 00bc 1846     		mov	r0, r3
 578 00be FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 579              		.loc 1 305 0
 580 00c2 A54B     		ldr	r3, .L74+4
 581 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 00c6 002B     		cmp	r3, #0
 583 00c8 04D0     		beq	.L39
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 584              		.loc 1 306 0
 585 00ca A34B     		ldr	r3, .L74+4
 586 00cc 0022     		movs	r2, #0
 587 00ce 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 588              		.loc 1 307 0
 589 00d0 FFF7FEFF 		bl	interrupt_manager
 590              	.L39:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
 313:..\src/interruptions.c ****             motor_control_SH();
 591              		.loc 1 313 0
 592 00d4 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 17


 593              		.loc 1 316 0
 594 00d8 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 595 00dc 9F49     		ldr	r1, .L74+8
 596 00de 1346     		mov	r3, r2
 597 00e0 DB00     		lsls	r3, r3, #3
 598 00e2 9B1A     		subs	r3, r3, r2
 599 00e4 1B01     		lsls	r3, r3, #4
 600 00e6 0B44     		add	r3, r3, r1
 601 00e8 03F58973 		add	r3, r3, #274
 602 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 603 00ee 012B     		cmp	r3, #1
 604 00f0 0FD1     		bne	.L40
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 605              		.loc 1 317 0
 606 00f2 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 607 00f6 9949     		ldr	r1, .L74+8
 608 00f8 1346     		mov	r3, r2
 609 00fa DB00     		lsls	r3, r3, #3
 610 00fc 9B1A     		subs	r3, r3, r2
 611 00fe 1B01     		lsls	r3, r3, #4
 612 0100 0B44     		add	r3, r3, r1
 613 0102 03F58773 		add	r3, r3, #270
 614 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 615 0108 002B     		cmp	r3, #0
 616 010a 02D1     		bne	.L40
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 617              		.loc 1 318 0
 618 010c 954B     		ldr	r3, .L74+16
 619 010e 0022     		movs	r2, #0
 620 0110 1A70     		strb	r2, [r3]
 621              	.L40:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 622              		.loc 1 324 0
 623 0112 914B     		ldr	r3, .L74+4
 624 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 625 0116 002B     		cmp	r3, #0
 626 0118 00F01881 		beq	.L71
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 627              		.loc 1 325 0
 628 011c 8E4B     		ldr	r3, .L74+4
 629 011e 0022     		movs	r2, #0
 630 0120 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 631              		.loc 1 326 0
 632 0122 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 633              		.loc 1 328 0
 634 0126 11E1     		b	.L71
 635              	.L36:
 636              	.LBB2:
 329:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 18


 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 637              		.loc 1 333 0
 638 0128 0023     		movs	r3, #0
 639 012a 87F8C739 		strb	r3, [r7, #2503]
 640 012e 53E0     		b	.L42
 641              	.L47:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 642              		.loc 1 334 0
 643 0130 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 644 0134 8A4A     		ldr	r2, .L74+12
 645 0136 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 646 0138 002B     		cmp	r3, #0
 647 013a 48D0     		beq	.L43
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 648              		.loc 1 336 0
 649 013c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 650 0140 1846     		mov	r0, r3
 651 0142 FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 652              		.loc 1 338 0
 653 0146 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 654 014a 8449     		ldr	r1, .L74+8
 655 014c 1346     		mov	r3, r2
 656 014e DB00     		lsls	r3, r3, #3
 657 0150 9B1A     		subs	r3, r3, r2
 658 0152 1B01     		lsls	r3, r3, #4
 659 0154 0B44     		add	r3, r3, r1
 660 0156 03F58873 		add	r3, r3, #272
 661 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 662 015c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 663 0160 9A42     		cmp	r2, r3
 664 0162 08D1     		bne	.L44
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 665              		.loc 1 340 0
 666 0164 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 667 0168 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 668 016c 1146     		mov	r1, r2
 669 016e 1846     		mov	r0, r3
 670 0170 FFF7FEFF 		bl	encoder_reading_SPI
 671 0174 22E0     		b	.L45
 672              	.L44:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 673              		.loc 1 343 0
 674 0176 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 675 017a 7849     		ldr	r1, .L74+8
 676 017c 1346     		mov	r3, r2
 677 017e DB00     		lsls	r3, r3, #3
 678 0180 9B1A     		subs	r3, r3, r2
 679 0182 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 19


 680 0184 0B44     		add	r3, r3, r1
 681 0186 03F58873 		add	r3, r3, #272
 682 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 683 018c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 684 0190 9A42     		cmp	r2, r3
 685 0192 08D1     		bne	.L46
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 686              		.loc 1 345 0
 687 0194 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 688 0198 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 689 019c 1146     		mov	r1, r2
 690 019e 1846     		mov	r0, r3
 691 01a0 FFF7FEFF 		bl	encoder_reading_SPI
 692 01a4 0AE0     		b	.L45
 693              	.L46:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 694              		.loc 1 349 0
 695 01a6 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 696 01aa 6D4A     		ldr	r2, .L74+12
 697 01ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 698 01ae 1A46     		mov	r2, r3
 699 01b0 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 700 01b4 1946     		mov	r1, r3
 701 01b6 1046     		mov	r0, r2
 702 01b8 FFF7FEFF 		bl	ReadEncoderLine
 703              	.L45:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 704              		.loc 1 356 0
 705 01bc 664B     		ldr	r3, .L74+4
 706 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 707 01c0 002B     		cmp	r3, #0
 708 01c2 04D0     		beq	.L43
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 709              		.loc 1 357 0
 710 01c4 644B     		ldr	r3, .L74+4
 711 01c6 0022     		movs	r2, #0
 712 01c8 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 713              		.loc 1 358 0
 714 01ca FFF7FEFF 		bl	interrupt_manager
 715              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 716              		.loc 1 333 0 discriminator 2
 717 01ce 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 718 01d2 0133     		adds	r3, r3, #1
 719 01d4 87F8C739 		strb	r3, [r7, #2503]
 720              	.L42:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 20


 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 721              		.loc 1 333 0 is_stmt 0 discriminator 1
 722 01d8 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 723 01dc 012B     		cmp	r3, #1
 724 01de A7D9     		bls	.L47
 725              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 726              		.loc 1 366 0 is_stmt 1
 727 01e0 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 728 01e4 1846     		mov	r0, r3
 729 01e6 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 730              		.loc 1 369 0
 731 01ea 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 732 01ee 5B49     		ldr	r1, .L74+8
 733 01f0 1346     		mov	r3, r2
 734 01f2 DB00     		lsls	r3, r3, #3
 735 01f4 9B1A     		subs	r3, r3, r2
 736 01f6 1B01     		lsls	r3, r3, #4
 737 01f8 0B44     		add	r3, r3, r1
 738 01fa 03F58973 		add	r3, r3, #274
 739 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740 0200 012B     		cmp	r3, #1
 741 0202 0FD1     		bne	.L48
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 742              		.loc 1 370 0
 743 0204 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 744 0208 5449     		ldr	r1, .L74+8
 745 020a 1346     		mov	r3, r2
 746 020c DB00     		lsls	r3, r3, #3
 747 020e 9B1A     		subs	r3, r3, r2
 748 0210 1B01     		lsls	r3, r3, #4
 749 0212 0B44     		add	r3, r3, r1
 750 0214 03F58773 		add	r3, r3, #270
 751 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 752 021a 002B     		cmp	r3, #0
 753 021c 02D1     		bne	.L48
 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 754              		.loc 1 371 0
 755 021e 514B     		ldr	r3, .L74+16
 756 0220 0022     		movs	r2, #0
 757 0222 1A70     		strb	r2, [r3]
 758              	.L48:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 21


 377:..\src/interruptions.c ****             if (interrupt_flag){
 759              		.loc 1 377 0
 760 0224 4C4B     		ldr	r3, .L74+4
 761 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 762 0228 002B     		cmp	r3, #0
 763 022a 04D0     		beq	.L49
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 764              		.loc 1 378 0
 765 022c 4A4B     		ldr	r3, .L74+4
 766 022e 0022     		movs	r2, #0
 767 0230 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 768              		.loc 1 379 0
 769 0232 FFF7FEFF 		bl	interrupt_manager
 770              	.L49:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 771              		.loc 1 383 0
 772 0236 494B     		ldr	r3, .L74+8
 773 0238 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 774 023c 012B     		cmp	r3, #1
 775 023e 40F08780 		bne	.L72
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 776              		.loc 1 384 0
 777 0242 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 778 0246 1846     		mov	r0, r3
 779 0248 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 780              		.loc 1 387 0
 781 024c 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 782 0250 4249     		ldr	r1, .L74+8
 783 0252 1346     		mov	r3, r2
 784 0254 DB00     		lsls	r3, r3, #3
 785 0256 9B1A     		subs	r3, r3, r2
 786 0258 1B01     		lsls	r3, r3, #4
 787 025a 0B44     		add	r3, r3, r1
 788 025c 03F58973 		add	r3, r3, #274
 789 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 790 0262 012B     		cmp	r3, #1
 791 0264 0FD1     		bne	.L51
 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 792              		.loc 1 388 0
 793 0266 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 794 026a 3C49     		ldr	r1, .L74+8
 795 026c 1346     		mov	r3, r2
 796 026e DB00     		lsls	r3, r3, #3
 797 0270 9B1A     		subs	r3, r3, r2
 798 0272 1B01     		lsls	r3, r3, #4
 799 0274 0B44     		add	r3, r3, r1
 800 0276 03F58773 		add	r3, r3, #270
 801 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 802 027c 002B     		cmp	r3, #0
 803 027e 02D1     		bne	.L51
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 22


 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 804              		.loc 1 389 0
 805 0280 384B     		ldr	r3, .L74+16
 806 0282 0022     		movs	r2, #0
 807 0284 1A70     		strb	r2, [r3]
 808              	.L51:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 809              		.loc 1 395 0
 810 0286 344B     		ldr	r3, .L74+4
 811 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 812 028a 002B     		cmp	r3, #0
 813 028c 60D0     		beq	.L72
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 814              		.loc 1 396 0
 815 028e 324B     		ldr	r3, .L74+4
 816 0290 0022     		movs	r2, #0
 817 0292 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 818              		.loc 1 397 0
 819 0294 FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 820              		.loc 1 400 0
 821 0298 5AE0     		b	.L72
 822              	.L37:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB:
 403:..\src/interruptions.c ****             
 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 823              		.loc 1 405 0
 824 029a 334B     		ldr	r3, .L74+20
 825 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 826 029e 002B     		cmp	r3, #0
 827 02a0 2FD0     		beq	.L52
 828              		.loc 1 405 0 is_stmt 0 discriminator 1
 829 02a2 2E4B     		ldr	r3, .L74+8
 830 02a4 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 831 02a8 002B     		cmp	r3, #0
 832 02aa 2AD0     		beq	.L52
 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 air_chambers_control();
 833              		.loc 1 407 0 is_stmt 1
 834 02ac FFF7FEFF 		bl	air_chambers_control
 408:..\src/interruptions.c ****             
 409:..\src/interruptions.c ****                 // Check Interrupt 
 410:..\src/interruptions.c ****                 
 411:..\src/interruptions.c ****                 if (interrupt_flag){
 835              		.loc 1 411 0
 836 02b0 294B     		ldr	r3, .L74+4
 837 02b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 23


 838 02b4 002B     		cmp	r3, #0
 839 02b6 04D0     		beq	.L53
 412:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 840              		.loc 1 412 0
 841 02b8 274B     		ldr	r3, .L74+4
 842 02ba 0022     		movs	r2, #0
 843 02bc 1A70     		strb	r2, [r3]
 413:..\src/interruptions.c ****                     interrupt_manager();
 844              		.loc 1 413 0
 845 02be FFF7FEFF 		bl	interrupt_manager
 846              	.L53:
 414:..\src/interruptions.c ****                 }
 415:..\src/interruptions.c ****                 
 416:..\src/interruptions.c ****                 // Drive slave with reference generated on second motor index
 417:..\src/interruptions.c ****                 // Use second motor structures and parameters, only to generate position reference 
 418:..\src/interruptions.c ****                 // IMPORTANT: configure second motor parameters with proper slave parameters
 419:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 847              		.loc 1 419 0
 848 02c2 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 849 02c6 1846     		mov	r0, r3
 850 02c8 FFF7FEFF 		bl	motor_control_generic
 420:..\src/interruptions.c ****                 
 421:..\src/interruptions.c ****                 // Check Interrupt 
 422:..\src/interruptions.c **** 
 423:..\src/interruptions.c ****                 if (interrupt_flag){
 851              		.loc 1 423 0
 852 02cc 224B     		ldr	r3, .L74+4
 853 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 854 02d0 002B     		cmp	r3, #0
 855 02d2 04D0     		beq	.L54
 424:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 856              		.loc 1 424 0
 857 02d4 204B     		ldr	r3, .L74+4
 858 02d6 0022     		movs	r2, #0
 859 02d8 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****                     interrupt_manager();
 860              		.loc 1 425 0
 861 02da FFF7FEFF 		bl	interrupt_manager
 862              	.L54:
 426:..\src/interruptions.c ****                 }
 427:..\src/interruptions.c ****                 
 428:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 863              		.loc 1 428 0
 864 02de 1F4B     		ldr	r3, .L74+8
 865 02e0 93F8B122 		ldrb	r2, [r3, #689]	@ zero_extendqisi2
 866 02e4 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 867 02e8 1146     		mov	r1, r2
 868 02ea 1846     		mov	r0, r3
 869 02ec FFF7FEFF 		bl	drive_slave
 429:..\src/interruptions.c ****             
 430:..\src/interruptions.c ****                 // Check Interrupt 
 431:..\src/interruptions.c **** 
 432:..\src/interruptions.c ****                 if (interrupt_flag){
 870              		.loc 1 432 0
 871 02f0 194B     		ldr	r3, .L74+4
 872 02f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 873 02f4 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 24


 874 02f6 04D0     		beq	.L52
 433:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 875              		.loc 1 433 0
 876 02f8 174B     		ldr	r3, .L74+4
 877 02fa 0022     		movs	r2, #0
 878 02fc 1A70     		strb	r2, [r3]
 434:..\src/interruptions.c ****                     interrupt_manager();
 879              		.loc 1 434 0
 880 02fe FFF7FEFF 		bl	interrupt_manager
 881              	.L52:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****             }
 437:..\src/interruptions.c ****             if (!master_mode){
 882              		.loc 1 437 0
 883 0302 194B     		ldr	r3, .L74+20
 884 0304 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 885 0306 002B     		cmp	r3, #0
 886 0308 11D1     		bne	.L55
 438:..\src/interruptions.c ****                 
 439:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 887              		.loc 1 439 0
 888 030a 144B     		ldr	r3, .L74+8
 889 030c 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 890 0310 002B     		cmp	r3, #0
 891 0312 01D0     		beq	.L56
 440:..\src/interruptions.c ****                     // Stop feedback motors
 441:..\src/interruptions.c ****                     stop_feedback();
 892              		.loc 1 441 0
 893 0314 FFF7FEFF 		bl	stop_feedback
 894              	.L56:
 442:..\src/interruptions.c ****                 }
 443:..\src/interruptions.c ****                 // Disable slave or motors
 444:..\src/interruptions.c ****                 deactivate_slaves();
 895              		.loc 1 444 0
 896 0318 FFF7FEFF 		bl	deactivate_slaves
 445:..\src/interruptions.c ****                         
 446:..\src/interruptions.c ****                 // Check Interrupt 
 447:..\src/interruptions.c ****                 if (interrupt_flag){
 897              		.loc 1 447 0
 898 031c 0E4B     		ldr	r3, .L74+4
 899 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 900 0320 002B     		cmp	r3, #0
 901 0322 04D0     		beq	.L55
 448:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 902              		.loc 1 448 0
 903 0324 0C4B     		ldr	r3, .L74+4
 904 0326 0022     		movs	r2, #0
 905 0328 1A70     		strb	r2, [r3]
 449:..\src/interruptions.c ****                     interrupt_manager();
 906              		.loc 1 449 0
 907 032a FFF7FEFF 		bl	interrupt_manager
 908              	.L55:
 450:..\src/interruptions.c ****                 } 
 451:..\src/interruptions.c ****             }
 452:..\src/interruptions.c ****     
 453:..\src/interruptions.c ****             // Control MOTOR_IDX motor [PUMP] with PWM control
 454:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 25


 909              		.loc 1 454 0
 910 032e 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 911 0332 1846     		mov	r0, r3
 912 0334 FFF7FEFF 		bl	motor_control_generic
 455:..\src/interruptions.c ****             
 456:..\src/interruptions.c ****             // Check Interrupt 
 457:..\src/interruptions.c **** 
 458:..\src/interruptions.c ****             if (interrupt_flag){
 913              		.loc 1 458 0
 914 0338 074B     		ldr	r3, .L74+4
 915 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 916 033c 002B     		cmp	r3, #0
 917 033e 15D0     		beq	.L73
 459:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 918              		.loc 1 459 0
 919 0340 054B     		ldr	r3, .L74+4
 920 0342 0022     		movs	r2, #0
 921 0344 1A70     		strb	r2, [r3]
 460:..\src/interruptions.c ****                 interrupt_manager();
 922              		.loc 1 460 0
 923 0346 FFF7FEFF 		bl	interrupt_manager
 461:..\src/interruptions.c ****             }
 462:..\src/interruptions.c ****             
 463:..\src/interruptions.c ****             break;
 924              		.loc 1 463 0
 925 034a 0FE0     		b	.L73
 926              	.L71:
 328:..\src/interruptions.c ****             
 927              		.loc 1 328 0
 928 034c 00BF     		nop
 929 034e 0EE0     		b	.L35
 930              	.L72:
 400:..\src/interruptions.c ****             
 931              		.loc 1 400 0
 932 0350 00BF     		nop
 933 0352 0CE0     		b	.L35
 934              	.L75:
 935              		.align	2
 936              	.L74:
 937 0354 00000000 		.word	timer_value0
 938 0358 00000000 		.word	interrupt_flag
 939 035c 00000000 		.word	c_mem
 940 0360 00000000 		.word	N_Encoder_Line_Connected
 941 0364 00000000 		.word	change_ext_ref_flag
 942 0368 00000000 		.word	master_mode
 943              	.L73:
 944              		.loc 1 463 0
 945 036c 00BF     		nop
 946              	.L35:
 464:..\src/interruptions.c ****     }
 465:..\src/interruptions.c **** 
 466:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     analog_read_end();
 947              		.loc 1 468 0
 948 036e FFF7FEFF 		bl	analog_read_end
 469:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 26


 470:..\src/interruptions.c ****     if (interrupt_flag){
 949              		.loc 1 470 0
 950 0372 834B     		ldr	r3, .L76
 951 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 952 0376 002B     		cmp	r3, #0
 953 0378 04D0     		beq	.L58
 471:..\src/interruptions.c ****         interrupt_flag = FALSE;
 954              		.loc 1 471 0
 955 037a 814B     		ldr	r3, .L76
 956 037c 0022     		movs	r2, #0
 957 037e 1A70     		strb	r2, [r3]
 472:..\src/interruptions.c ****         interrupt_manager();
 958              		.loc 1 472 0
 959 0380 FFF7FEFF 		bl	interrupt_manager
 960              	.L58:
 473:..\src/interruptions.c ****     }
 474:..\src/interruptions.c **** 
 475:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     overcurrent_control();
 961              		.loc 1 477 0
 962 0384 FFF7FEFF 		bl	overcurrent_control
 478:..\src/interruptions.c ****     
 479:..\src/interruptions.c ****     // Check Interrupt 
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     if (interrupt_flag){
 963              		.loc 1 481 0
 964 0388 7D4B     		ldr	r3, .L76
 965 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 966 038c 002B     		cmp	r3, #0
 967 038e 04D0     		beq	.L59
 482:..\src/interruptions.c ****         interrupt_flag = FALSE;
 968              		.loc 1 482 0
 969 0390 7B4B     		ldr	r3, .L76
 970 0392 0022     		movs	r2, #0
 971 0394 1A70     		strb	r2, [r3]
 483:..\src/interruptions.c ****         interrupt_manager();
 972              		.loc 1 483 0
 973 0396 FFF7FEFF 		bl	interrupt_manager
 974              	.L59:
 484:..\src/interruptions.c ****     }
 485:..\src/interruptions.c **** 
 486:..\src/interruptions.c ****     //---------------------------------- Calibration 
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 489:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 975              		.loc 1 489 0
 976 039a 7A4B     		ldr	r3, .L76+4
 977 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 978 039e 012B     		cmp	r3, #1
 979 03a0 0ED1     		bne	.L60
 490:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 980              		.loc 1 490 0
 981 03a2 794B     		ldr	r3, .L76+8
 982 03a4 1B88     		ldrh	r3, [r3]
 983 03a6 0A2B     		cmp	r3, #10
 984 03a8 04D1     		bne	.L61
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 27


 491:..\src/interruptions.c ****             calibration();
 985              		.loc 1 491 0
 986 03aa FFF7FEFF 		bl	calibration
 492:..\src/interruptions.c ****             counter_calibration = 0;
 987              		.loc 1 492 0
 988 03ae 764B     		ldr	r3, .L76+8
 989 03b0 0022     		movs	r2, #0
 990 03b2 1A80     		strh	r2, [r3]	@ movhi
 991              	.L61:
 493:..\src/interruptions.c ****         }
 494:..\src/interruptions.c ****         counter_calibration++;
 992              		.loc 1 494 0
 993 03b4 744B     		ldr	r3, .L76+8
 994 03b6 1B88     		ldrh	r3, [r3]
 995 03b8 0133     		adds	r3, r3, #1
 996 03ba 9AB2     		uxth	r2, r3
 997 03bc 724B     		ldr	r3, .L76+8
 998 03be 1A80     		strh	r2, [r3]	@ movhi
 999              	.L60:
 495:..\src/interruptions.c ****     }
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c ****     // Check Interrupt 
 498:..\src/interruptions.c ****     
 499:..\src/interruptions.c ****     if (interrupt_flag){
 1000              		.loc 1 499 0
 1001 03c0 6F4B     		ldr	r3, .L76
 1002 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 03c4 002B     		cmp	r3, #0
 1004 03c6 04D0     		beq	.L62
 500:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1005              		.loc 1 500 0
 1006 03c8 6D4B     		ldr	r3, .L76
 1007 03ca 0022     		movs	r2, #0
 1008 03cc 1A70     		strb	r2, [r3]
 501:..\src/interruptions.c ****         interrupt_manager();
 1009              		.loc 1 501 0
 1010 03ce FFF7FEFF 		bl	interrupt_manager
 1011              	.L62:
 502:..\src/interruptions.c ****     }
 503:..\src/interruptions.c ****     
 504:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1012              		.loc 1 504 0
 1013 03d2 6E4B     		ldr	r3, .L76+12
 1014 03d4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1015 03d8 002B     		cmp	r3, #0
 1016 03da 1CD1     		bne	.L63
 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****         //---------------------------------- Rest position check
 507:..\src/interruptions.c **** 
 508:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 509:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1017              		.loc 1 509 0
 1018 03dc 6B4B     		ldr	r3, .L76+12
 1019 03de 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1020 03e2 012B     		cmp	r3, #1
 1021 03e4 17D1     		bne	.L63
 510:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 28


 1022              		.loc 1 510 0
 1023 03e6 684B     		ldr	r3, .L76+8
 1024 03e8 1B88     		ldrh	r3, [r3]
 1025 03ea 0A2B     		cmp	r3, #10
 1026 03ec 04D1     		bne	.L64
 511:..\src/interruptions.c ****                     check_rest_position();
 1027              		.loc 1 511 0
 1028 03ee FFF7FEFF 		bl	check_rest_position
 512:..\src/interruptions.c ****                     counter_calibration = 0;
 1029              		.loc 1 512 0
 1030 03f2 654B     		ldr	r3, .L76+8
 1031 03f4 0022     		movs	r2, #0
 1032 03f6 1A80     		strh	r2, [r3]	@ movhi
 1033              	.L64:
 513:..\src/interruptions.c ****             }
 514:..\src/interruptions.c ****             counter_calibration++;
 1034              		.loc 1 514 0
 1035 03f8 634B     		ldr	r3, .L76+8
 1036 03fa 1B88     		ldrh	r3, [r3]
 1037 03fc 0133     		adds	r3, r3, #1
 1038 03fe 9AB2     		uxth	r2, r3
 1039 0400 614B     		ldr	r3, .L76+8
 1040 0402 1A80     		strh	r2, [r3]	@ movhi
 515:..\src/interruptions.c **** 
 516:..\src/interruptions.c ****             // Check Interrupt     
 517:..\src/interruptions.c ****             if (interrupt_flag){
 1041              		.loc 1 517 0
 1042 0404 5E4B     		ldr	r3, .L76
 1043 0406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044 0408 002B     		cmp	r3, #0
 1045 040a 04D0     		beq	.L63
 518:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1046              		.loc 1 518 0
 1047 040c 5C4B     		ldr	r3, .L76
 1048 040e 0022     		movs	r2, #0
 1049 0410 1A70     		strb	r2, [r3]
 519:..\src/interruptions.c ****                 interrupt_manager();
 1050              		.loc 1 519 0
 1051 0412 FFF7FEFF 		bl	interrupt_manager
 1052              	.L63:
 520:..\src/interruptions.c ****             }
 521:..\src/interruptions.c ****         }
 522:..\src/interruptions.c ****         
 523:..\src/interruptions.c ****     }
 524:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 525:..\src/interruptions.c **** 
 526:..\src/interruptions.c ****     cycles_counter_update();
 1053              		.loc 1 526 0
 1054 0416 FFF7FEFF 		bl	cycles_counter_update
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****     // Check Cycles Interrupt 
 529:..\src/interruptions.c ****     
 530:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1055              		.loc 1 530 0
 1056 041a 5D4B     		ldr	r3, .L76+16
 1057 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1058 041e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 29


 1059 0420 25D0     		beq	.L65
 531:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1060              		.loc 1 531 0
 1061 0422 5B4B     		ldr	r3, .L76+16
 1062 0424 0022     		movs	r2, #0
 1063 0426 1A70     		strb	r2, [r3]
 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 534:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 535:..\src/interruptions.c ****         if(can_write) {
 1064              		.loc 1 535 0
 1065 0428 5A4B     		ldr	r3, .L76+20
 1066 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067 042c 002B     		cmp	r3, #0
 1068 042e 1ED0     		beq	.L65
 536:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1069              		.loc 1 536 0
 1070 0430 594B     		ldr	r3, .L76+24
 1071 0432 0022     		movs	r2, #0
 1072 0434 1A70     		strb	r2, [r3]
 537:..\src/interruptions.c ****             
 538:..\src/interruptions.c ****             //Update time variable
 539:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1073              		.loc 1 539 0
 1074 0436 594B     		ldr	r3, .L76+28
 1075 0438 9B6D     		ldr	r3, [r3, #88]
 1076 043a 7833     		adds	r3, r3, #120
 1077 043c 574A     		ldr	r2, .L76+28
 1078 043e 9365     		str	r3, [r2, #88]
 540:..\src/interruptions.c ****             
 541:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1079              		.loc 1 541 0
 1080 0440 524B     		ldr	r3, .L76+12
 1081 0442 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1082 0446 012B     		cmp	r3, #1
 1083 0448 11D1     		bne	.L65
 542:..\src/interruptions.c ****                 
 543:..\src/interruptions.c ****                 store_RTC_current_time();
 1084              		.loc 1 543 0
 1085 044a FFF7FEFF 		bl	store_RTC_current_time
 544:..\src/interruptions.c ****                 
 545:..\src/interruptions.c ****                 //Write in SD card
 546:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1086              		.loc 1 546 0
 1087 044e 3B46     		mov	r3, r7
 1088 0450 1846     		mov	r0, r3
 1089 0452 FFF7FEFF 		bl	prepare_SD_info
 547:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1090              		.loc 1 547 0
 1091 0456 524B     		ldr	r3, .L76+32
 1092 0458 1C68     		ldr	r4, [r3]
 1093 045a 3B46     		mov	r3, r7
 1094 045c 1846     		mov	r0, r3
 1095 045e FFF7FEFF 		bl	strlen
 1096 0462 0246     		mov	r2, r0
 1097 0464 3B46     		mov	r3, r7
 1098 0466 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 30


 1099 0468 2046     		mov	r0, r4
 1100 046a FFF7FEFF 		bl	FS_Write
 1101              	.L65:
 548:..\src/interruptions.c ****             }
 549:..\src/interruptions.c ****         }
 550:..\src/interruptions.c ****     }
 551:..\src/interruptions.c ****     
 552:..\src/interruptions.c ****     // Check Interrupt 
 553:..\src/interruptions.c ****     
 554:..\src/interruptions.c ****     if (interrupt_flag){
 1102              		.loc 1 554 0
 1103 046e 444B     		ldr	r3, .L76
 1104 0470 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1105 0472 002B     		cmp	r3, #0
 1106 0474 04D0     		beq	.L66
 555:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1107              		.loc 1 555 0
 1108 0476 424B     		ldr	r3, .L76
 1109 0478 0022     		movs	r2, #0
 1110 047a 1A70     		strb	r2, [r3]
 556:..\src/interruptions.c ****         interrupt_manager();
 1111              		.loc 1 556 0
 1112 047c FFF7FEFF 		bl	interrupt_manager
 1113              	.L66:
 557:..\src/interruptions.c ****     }
 558:..\src/interruptions.c ****     
 559:..\src/interruptions.c ****     
 560:..\src/interruptions.c ****     //---------------------------------- Check battery
 561:..\src/interruptions.c **** 
 562:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 563:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1114              		.loc 1 563 0
 1115 0480 484B     		ldr	r3, .L76+36
 1116 0482 1B88     		ldrh	r3, [r3]
 1117 0484 0A2B     		cmp	r3, #10
 1118 0486 04D1     		bne	.L67
 564:..\src/interruptions.c ****         battery_management();   
 1119              		.loc 1 564 0
 1120 0488 FFF7FEFF 		bl	battery_management
 565:..\src/interruptions.c ****         counter_tension_func = 0;
 1121              		.loc 1 565 0
 1122 048c 454B     		ldr	r3, .L76+36
 1123 048e 0022     		movs	r2, #0
 1124 0490 1A80     		strh	r2, [r3]	@ movhi
 1125              	.L67:
 566:..\src/interruptions.c ****     }
 567:..\src/interruptions.c ****     counter_tension_func++;
 1126              		.loc 1 567 0
 1127 0492 444B     		ldr	r3, .L76+36
 1128 0494 1B88     		ldrh	r3, [r3]
 1129 0496 0133     		adds	r3, r3, #1
 1130 0498 9AB2     		uxth	r2, r3
 1131 049a 424B     		ldr	r3, .L76+36
 1132 049c 1A80     		strh	r2, [r3]	@ movhi
 568:..\src/interruptions.c **** 
 569:..\src/interruptions.c ****     // Check Interrupt 
 570:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 31


 571:..\src/interruptions.c ****     if (interrupt_flag){
 1133              		.loc 1 571 0
 1134 049e 384B     		ldr	r3, .L76
 1135 04a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1136 04a2 002B     		cmp	r3, #0
 1137 04a4 04D0     		beq	.L68
 572:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1138              		.loc 1 572 0
 1139 04a6 364B     		ldr	r3, .L76
 1140 04a8 0022     		movs	r2, #0
 1141 04aa 1A70     		strb	r2, [r3]
 573:..\src/interruptions.c ****         interrupt_manager();
 1142              		.loc 1 573 0
 1143 04ac FFF7FEFF 		bl	interrupt_manager
 1144              	.L68:
 574:..\src/interruptions.c ****     }
 575:..\src/interruptions.c ****    
 576:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 577:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1145              		.loc 1 577 0
 1146 04b0 364B     		ldr	r3, .L76+12
 1147 04b2 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1148 04b6 002B     		cmp	r3, #0
 1149 04b8 0AD0     		beq	.L69
 578:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1150              		.loc 1 578 0
 1151 04ba FFF7FEFF 		bl	ReadAllIMUs
 579:..\src/interruptions.c ****         
 580:..\src/interruptions.c ****         if (interrupt_flag){
 1152              		.loc 1 580 0
 1153 04be 304B     		ldr	r3, .L76
 1154 04c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1155 04c2 002B     		cmp	r3, #0
 1156 04c4 04D0     		beq	.L69
 581:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1157              		.loc 1 581 0
 1158 04c6 2E4B     		ldr	r3, .L76
 1159 04c8 0022     		movs	r2, #0
 1160 04ca 1A70     		strb	r2, [r3]
 582:..\src/interruptions.c ****             interrupt_manager();
 1161              		.loc 1 582 0
 1162 04cc FFF7FEFF 		bl	interrupt_manager
 1163              	.L69:
 583:..\src/interruptions.c ****         }
 584:..\src/interruptions.c ****     }
 585:..\src/interruptions.c ****    
 586:..\src/interruptions.c ****     //---------------------------------- Update States
 587:..\src/interruptions.c ****     
 588:..\src/interruptions.c ****     // Load k-1 state
 589:..\src/interruptions.c ****     memcpy( &g_emg_measOld, &g_emg_meas, sizeof(g_emg_meas) );
 1164              		.loc 1 589 0
 1165 04d0 354A     		ldr	r2, .L76+40
 1166 04d2 364B     		ldr	r3, .L76+44
 1167 04d4 1446     		mov	r4, r2
 1168 04d6 1D46     		mov	r5, r3
 1169 04d8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1170 04da 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 32


 1171 04dc 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1172 04e0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 590:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1173              		.loc 1 590 0
 1174 04e4 324A     		ldr	r2, .L76+48
 1175 04e6 334B     		ldr	r3, .L76+52
 1176 04e8 1046     		mov	r0, r2
 1177 04ea 1946     		mov	r1, r3
 1178 04ec 6823     		movs	r3, #104
 1179 04ee 1A46     		mov	r2, r3
 1180 04f0 FFF7FEFF 		bl	memcpy
 591:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1181              		.loc 1 591 0
 1182 04f4 304A     		ldr	r2, .L76+56
 1183 04f6 314B     		ldr	r3, .L76+60
 1184 04f8 1446     		mov	r4, r2
 1185 04fa 1D46     		mov	r5, r3
 1186 04fc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1187 04fe 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1188 0500 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1189 0504 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 592:..\src/interruptions.c **** 
 593:..\src/interruptions.c ****     // Load k+1 state        
 594:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1190              		.loc 1 594 0
 1191 0508 2C4A     		ldr	r2, .L76+60
 1192 050a 2D4B     		ldr	r3, .L76+64
 1193 050c 1446     		mov	r4, r2
 1194 050e 1D46     		mov	r5, r3
 1195 0510 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1196 0512 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1197 0514 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1198 0518 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 595:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1199              		.loc 1 595 0
 1200 051c 294A     		ldr	r2, .L76+68
 1201 051e 2A4B     		ldr	r3, .L76+72
 1202 0520 1046     		mov	r0, r2
 1203 0522 1946     		mov	r1, r3
 1204 0524 C823     		movs	r3, #200
 1205 0526 1A46     		mov	r2, r3
 1206 0528 FFF7FEFF 		bl	memcpy
 596:..\src/interruptions.c ****                 
 597:..\src/interruptions.c ****     if (interrupt_flag){
 1207              		.loc 1 597 0
 1208 052c 144B     		ldr	r3, .L76
 1209 052e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1210 0530 002B     		cmp	r3, #0
 1211 0532 04D0     		beq	.L70
 598:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1212              		.loc 1 598 0
 1213 0534 124B     		ldr	r3, .L76
 1214 0536 0022     		movs	r2, #0
 1215 0538 1A70     		strb	r2, [r3]
 599:..\src/interruptions.c ****         interrupt_manager();
 1216              		.loc 1 599 0
 1217 053a FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 33


 1218              	.L70:
 600:..\src/interruptions.c ****     }
 601:..\src/interruptions.c **** 
 602:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1219              		.loc 1 602 0
 1220 053e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1221 0542 0346     		mov	r3, r0
 1222 0544 1A46     		mov	r2, r3
 1223 0546 214B     		ldr	r3, .L76+76
 1224 0548 1A80     		strh	r2, [r3]	@ movhi
 603:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1225              		.loc 1 603 0
 1226 054a 214B     		ldr	r3, .L76+80
 1227 054c 1B88     		ldrh	r3, [r3]
 1228 054e 1A46     		mov	r2, r3
 1229 0550 1E4B     		ldr	r3, .L76+76
 1230 0552 1B88     		ldrh	r3, [r3]
 1231 0554 D31A     		subs	r3, r2, r3
 1232 0556 1846     		mov	r0, r3
 1233 0558 FFF7FEFF 		bl	__aeabi_i2f
 1234 055c 0346     		mov	r3, r0
 1235 055e 1D49     		ldr	r1, .L76+84
 1236 0560 1846     		mov	r0, r3
 1237 0562 FFF7FEFF 		bl	__aeabi_fdiv
 1238 0566 0346     		mov	r3, r0
 1239 0568 1A46     		mov	r2, r3
 1240 056a 1B4B     		ldr	r3, .L76+88
 1241 056c 1A60     		str	r2, [r3]	@ float
 604:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1242              		.loc 1 604 0
 1243 056e 0120     		movs	r0, #1
 1244 0570 FFF7FEFF 		bl	MY_TIMER_REG_Write
 605:..\src/interruptions.c **** 
 606:..\src/interruptions.c **** }
 1245              		.loc 1 606 0
 1246 0574 00BF     		nop
 1247 0576 07F6C817 		addw	r7, r7, #2504
 1248              		.cfi_def_cfa_offset 16
 1249 057a BD46     		mov	sp, r7
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 057c B0BD     		pop	{r4, r5, r7, pc}
 1253              	.L77:
 1254 057e 00BF     		.align	2
 1255              	.L76:
 1256 0580 00000000 		.word	interrupt_flag
 1257 0584 00000000 		.word	calib
 1258 0588 00000000 		.word	counter_calibration.10401
 1259 058c 00000000 		.word	c_mem
 1260 0590 00000000 		.word	cycles_interrupt_flag
 1261 0594 00000000 		.word	can_write
 1262 0598 00000000 		.word	cycles_status
 1263 059c 00000000 		.word	g_mem
 1264 05a0 00000000 		.word	pFile
 1265 05a4 02000000 		.word	counter_tension_func.10402
 1266 05a8 00000000 		.word	g_emg_measOld
 1267 05ac 00000000 		.word	g_emg_meas
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 34


 1268 05b0 00000000 		.word	g_measOld
 1269 05b4 00000000 		.word	g_meas
 1270 05b8 00000000 		.word	g_refOld
 1271 05bc 00000000 		.word	g_ref
 1272 05c0 00000000 		.word	g_refNew
 1273 05c4 00000000 		.word	g_imu
 1274 05c8 00000000 		.word	g_imuNew
 1275 05cc 00000000 		.word	timer_value
 1276 05d0 00000000 		.word	timer_value0
 1277 05d4 00247449 		.word	1232348160
 1278 05d8 00000000 		.word	cycle_time
 1279              		.cfi_endproc
 1280              	.LFE67:
 1281              		.size	function_scheduler, .-function_scheduler
 1282              		.section	.text.motor_control_SH,"ax",%progbits
 1283              		.align	2
 1284              		.global	motor_control_SH
 1285              		.thumb
 1286              		.thumb_func
 1287              		.type	motor_control_SH, %function
 1288              	motor_control_SH:
 1289              	.LFB68:
 607:..\src/interruptions.c **** 
 608:..\src/interruptions.c **** //==============================================================================
 609:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 610:..\src/interruptions.c **** //==============================================================================
 611:..\src/interruptions.c **** void motor_control_SH() {
 1290              		.loc 1 611 0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 88
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294 0000 80B5     		push	{r7, lr}
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 7, -8
 1297              		.cfi_offset 14, -4
 1298 0002 96B0     		sub	sp, sp, #88
 1299              		.cfi_def_cfa_offset 96
 1300 0004 00AF     		add	r7, sp, #0
 1301              		.cfi_def_cfa_register 7
 612:..\src/interruptions.c **** 
 613:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 1302              		.loc 1 613 0
 1303 0006 0023     		movs	r3, #0
 1304 0008 7B65     		str	r3, [r7, #84]
 614:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 615:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 616:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 617:..\src/interruptions.c ****     int32 CYDATA handle_value;
 618:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 619:..\src/interruptions.c **** 
 620:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 1305              		.loc 1 620 0
 1306 000a 0023     		movs	r3, #0
 1307 000c 87F84B30 		strb	r3, [r7, #75]
 621:..\src/interruptions.c ****     
 622:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 1308              		.loc 1 622 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 35


 1309 0010 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 1310 0014 1346     		mov	r3, r2
 1311 0016 DB00     		lsls	r3, r3, #3
 1312 0018 9B1A     		subs	r3, r3, r2
 1313 001a 1B01     		lsls	r3, r3, #4
 1314 001c B033     		adds	r3, r3, #176
 1315 001e A34A     		ldr	r2, .L191
 1316 0020 1344     		add	r3, r3, r2
 1317 0022 7B64     		str	r3, [r7, #68]
 623:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 1318              		.loc 1 623 0
 1319 0024 7B6C     		ldr	r3, [r7, #68]
 1320 0026 93F86030 		ldrb	r3, [r3, #96]
 1321 002a 87F84330 		strb	r3, [r7, #67]
 624:..\src/interruptions.c ****     
 625:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 1322              		.loc 1 625 0
 1323 002e 7B6C     		ldr	r3, [r7, #68]
 1324 0030 1B68     		ldr	r3, [r3]
 1325 0032 FB63     		str	r3, [r7, #60]
 626:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 1326              		.loc 1 626 0
 1327 0034 7B6C     		ldr	r3, [r7, #68]
 1328 0036 5B68     		ldr	r3, [r3, #4]
 1329 0038 BB63     		str	r3, [r7, #56]
 627:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 1330              		.loc 1 627 0
 1331 003a 7B6C     		ldr	r3, [r7, #68]
 1332 003c 9B68     		ldr	r3, [r3, #8]
 1333 003e 7B63     		str	r3, [r7, #52]
 628:..\src/interruptions.c **** 
 629:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 1334              		.loc 1 629 0
 1335 0040 7B6C     		ldr	r3, [r7, #68]
 1336 0042 DB68     		ldr	r3, [r3, #12]
 1337 0044 3B63     		str	r3, [r7, #48]
 630:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 1338              		.loc 1 630 0
 1339 0046 7B6C     		ldr	r3, [r7, #68]
 1340 0048 1B69     		ldr	r3, [r3, #16]
 1341 004a FB62     		str	r3, [r7, #44]
 631:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 1342              		.loc 1 631 0
 1343 004c 7B6C     		ldr	r3, [r7, #68]
 1344 004e 5B69     		ldr	r3, [r3, #20]
 1345 0050 BB62     		str	r3, [r7, #40]
 632:..\src/interruptions.c **** 
 633:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 1346              		.loc 1 633 0
 1347 0052 7B6C     		ldr	r3, [r7, #68]
 1348 0054 9B69     		ldr	r3, [r3, #24]
 1349 0056 7B62     		str	r3, [r7, #36]
 634:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 1350              		.loc 1 634 0
 1351 0058 7B6C     		ldr	r3, [r7, #68]
 1352 005a DB69     		ldr	r3, [r3, #28]
 1353 005c 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 36


 635:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 1354              		.loc 1 635 0
 1355 005e 7B6C     		ldr	r3, [r7, #68]
 1356 0060 1B6A     		ldr	r3, [r3, #32]
 1357 0062 FB61     		str	r3, [r7, #28]
 636:..\src/interruptions.c ****     
 637:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 1358              		.loc 1 637 0
 1359 0064 7B6C     		ldr	r3, [r7, #68]
 1360 0066 5B6A     		ldr	r3, [r3, #36]
 1361 0068 BB61     		str	r3, [r7, #24]
 638:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 1362              		.loc 1 638 0
 1363 006a 7B6C     		ldr	r3, [r7, #68]
 1364 006c 9B6A     		ldr	r3, [r3, #40]
 1365 006e 7B61     		str	r3, [r7, #20]
 639:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 1366              		.loc 1 639 0
 1367 0070 7B6C     		ldr	r3, [r7, #68]
 1368 0072 DB6A     		ldr	r3, [r3, #44]
 1369 0074 3B61     		str	r3, [r7, #16]
 640:..\src/interruptions.c **** 
 641:..\src/interruptions.c ****     // Static Variables
 642:..\src/interruptions.c **** 
 643:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 644:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 645:..\src/interruptions.c ****     
 646:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 647:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 648:..\src/interruptions.c ****     static int32 prev_pwm;
 649:..\src/interruptions.c **** 
 650:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 651:..\src/interruptions.c ****     static uint32 position_counter = 0;
 652:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 653:..\src/interruptions.c ****                                     // 1 EMG 1
 654:..\src/interruptions.c ****                                     // 2 EMG 2
 655:..\src/interruptions.c ****                                     // wait for both to get down
 656:..\src/interruptions.c ****     
 657:..\src/interruptions.c **** 
 658:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1370              		.loc 1 658 0
 1371 0076 8E4B     		ldr	r3, .L191+4
 1372 0078 1B68     		ldr	r3, [r3]
 1373 007a 8C4A     		ldr	r2, .L191
 1374 007c B2F8F021 		ldrh	r2, [r2, #496]
 1375 0080 9B1A     		subs	r3, r3, r2
 1376 0082 FB60     		str	r3, [r7, #12]
 659:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1377              		.loc 1 659 0
 1378 0084 8A4B     		ldr	r3, .L191+4
 1379 0086 5B68     		ldr	r3, [r3, #4]
 1380 0088 884A     		ldr	r2, .L191
 1381 008a B2F8F221 		ldrh	r2, [r2, #498]
 1382 008e 9B1A     		subs	r3, r3, r2
 1383 0090 BB60     		str	r3, [r7, #8]
 660:..\src/interruptions.c **** 
 661:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 37


 662:..\src/interruptions.c ****     switch(SH_MOT->input_mode) {
 1384              		.loc 1 662 0
 1385 0092 7B6C     		ldr	r3, [r7, #68]
 1386 0094 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1387 0098 013B     		subs	r3, r3, #1
 1388 009a 052B     		cmp	r3, #5
 1389 009c 00F2C681 		bhi	.L183
 1390 00a0 01A2     		adr	r2, .L81
 1391 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1392 00a6 00BF     		.p2align 2
 1393              	.L81:
 1394 00a8 C1000000 		.word	.L80+1
 1395 00ac A3010000 		.word	.L82+1
 1396 00b0 0B020000 		.word	.L83+1
 1397 00b4 7B020000 		.word	.L84+1
 1398 00b8 53030000 		.word	.L85+1
 1399 00bc D1010000 		.word	.L86+1
 1400              		.p2align 1
 1401              	.L80:
 663:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 664:..\src/interruptions.c **** 
 665:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 666:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 667:..\src/interruptions.c ****             if (c_mem.enc[SH_ENC_L].double_encoder_on_off) 
 1402              		.loc 1 667 0
 1403 00c0 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1404 00c4 7949     		ldr	r1, .L191
 1405 00c6 1346     		mov	r3, r2
 1406 00c8 5B00     		lsls	r3, r3, #1
 1407 00ca 1344     		add	r3, r3, r2
 1408 00cc 1B01     		lsls	r3, r3, #4
 1409 00ce 0B44     		add	r3, r3, r1
 1410 00d0 03F5D873 		add	r3, r3, #432
 1411 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1412 00d6 002B     		cmp	r3, #0
 1413 00d8 1BD0     		beq	.L87
 668:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[2] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1414              		.loc 1 668 0
 1415 00da 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1416 00de 754A     		ldr	r2, .L191+8
 1417 00e0 3421     		movs	r1, #52
 1418 00e2 01FB03F3 		mul	r3, r1, r3
 1419 00e6 1344     		add	r3, r3, r2
 1420 00e8 0833     		adds	r3, r3, #8
 1421 00ea 1968     		ldr	r1, [r3]
 1422 00ec 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1423 00f0 6E48     		ldr	r0, .L191
 1424 00f2 1346     		mov	r3, r2
 1425 00f4 5B00     		lsls	r3, r3, #1
 1426 00f6 1344     		add	r3, r3, r2
 1427 00f8 1B01     		lsls	r3, r3, #4
 1428 00fa 0344     		add	r3, r3, r0
 1429 00fc 03F5DA73 		add	r3, r3, #436
 1430 0100 93F90030 		ldrsb	r3, [r3]
 1431 0104 03FB01F2 		mul	r2, r3, r1
 1432 0108 7B6C     		ldr	r3, [r7, #68]
 1433 010a 5B6B     		ldr	r3, [r3, #52]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 38


 1434 010c 1344     		add	r3, r3, r2
 1435 010e FB64     		str	r3, [r7, #76]
 1436 0110 1AE0     		b	.L88
 1437              	.L87:
 669:..\src/interruptions.c ****             else
 670:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[1] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1438              		.loc 1 670 0
 1439 0112 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1440 0116 674A     		ldr	r2, .L191+8
 1441 0118 3421     		movs	r1, #52
 1442 011a 01FB03F3 		mul	r3, r1, r3
 1443 011e 1344     		add	r3, r3, r2
 1444 0120 0433     		adds	r3, r3, #4
 1445 0122 1968     		ldr	r1, [r3]
 1446 0124 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1447 0128 6048     		ldr	r0, .L191
 1448 012a 1346     		mov	r3, r2
 1449 012c 5B00     		lsls	r3, r3, #1
 1450 012e 1344     		add	r3, r3, r2
 1451 0130 1B01     		lsls	r3, r3, #4
 1452 0132 0344     		add	r3, r3, r0
 1453 0134 03F5DA73 		add	r3, r3, #436
 1454 0138 93F90030 		ldrsb	r3, [r3]
 1455 013c 03FB01F2 		mul	r2, r3, r1
 1456 0140 7B6C     		ldr	r3, [r7, #68]
 1457 0142 5B6B     		ldr	r3, [r3, #52]
 1458 0144 1344     		add	r3, r3, r2
 1459 0146 FB64     		str	r3, [r7, #76]
 1460              	.L88:
 671:..\src/interruptions.c ****             
 672:..\src/interruptions.c **** 
 673:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 674:..\src/interruptions.c ****             if (((handle_value - g_refOld[0].pos) > SH_MOT->max_step_pos) && (SH_MOT->max_step_pos 
 1461              		.loc 1 674 0
 1462 0148 5B4B     		ldr	r3, .L191+12
 1463 014a 1B68     		ldr	r3, [r3]
 1464 014c FA6C     		ldr	r2, [r7, #76]
 1465 014e D21A     		subs	r2, r2, r3
 1466 0150 7B6C     		ldr	r3, [r7, #68]
 1467 0152 1B6C     		ldr	r3, [r3, #64]
 1468 0154 9A42     		cmp	r2, r3
 1469 0156 0BDD     		ble	.L89
 1470              		.loc 1 674 0 is_stmt 0 discriminator 1
 1471 0158 7B6C     		ldr	r3, [r7, #68]
 1472 015a 1B6C     		ldr	r3, [r3, #64]
 1473 015c 002B     		cmp	r3, #0
 1474 015e 07D0     		beq	.L89
 675:..\src/interruptions.c ****                 g_ref[0].pos += SH_MOT->max_step_pos;
 1475              		.loc 1 675 0 is_stmt 1
 1476 0160 564B     		ldr	r3, .L191+16
 1477 0162 1A68     		ldr	r2, [r3]
 1478 0164 7B6C     		ldr	r3, [r7, #68]
 1479 0166 1B6C     		ldr	r3, [r3, #64]
 1480 0168 1344     		add	r3, r3, r2
 1481 016a 544A     		ldr	r2, .L191+16
 1482 016c 1360     		str	r3, [r2]
 1483 016e 17E0     		b	.L90
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 39


 1484              	.L89:
 676:..\src/interruptions.c ****             else {
 677:..\src/interruptions.c ****                 if (((handle_value - g_refOld[0].pos) < SH_MOT->max_step_neg) && (SH_MOT->max_step_
 1485              		.loc 1 677 0
 1486 0170 514B     		ldr	r3, .L191+12
 1487 0172 1B68     		ldr	r3, [r3]
 1488 0174 FA6C     		ldr	r2, [r7, #76]
 1489 0176 D21A     		subs	r2, r2, r3
 1490 0178 7B6C     		ldr	r3, [r7, #68]
 1491 017a DB6B     		ldr	r3, [r3, #60]
 1492 017c 9A42     		cmp	r2, r3
 1493 017e 0BDA     		bge	.L91
 1494              		.loc 1 677 0 is_stmt 0 discriminator 1
 1495 0180 7B6C     		ldr	r3, [r7, #68]
 1496 0182 DB6B     		ldr	r3, [r3, #60]
 1497 0184 002B     		cmp	r3, #0
 1498 0186 07D0     		beq	.L91
 678:..\src/interruptions.c ****                     g_ref[0].pos += SH_MOT->max_step_neg;
 1499              		.loc 1 678 0 is_stmt 1
 1500 0188 4C4B     		ldr	r3, .L191+16
 1501 018a 1A68     		ldr	r2, [r3]
 1502 018c 7B6C     		ldr	r3, [r7, #68]
 1503 018e DB6B     		ldr	r3, [r3, #60]
 1504 0190 1344     		add	r3, r3, r2
 1505 0192 4A4A     		ldr	r2, .L191+16
 1506 0194 1360     		str	r3, [r2]
 1507 0196 03E0     		b	.L90
 1508              	.L91:
 679:..\src/interruptions.c ****                 else
 680:..\src/interruptions.c ****                     g_ref[0].pos = handle_value;
 1509              		.loc 1 680 0
 1510 0198 484A     		ldr	r2, .L191+16
 1511 019a FB6C     		ldr	r3, [r7, #76]
 1512 019c 1360     		str	r3, [r2]
 681:..\src/interruptions.c ****             }
 682:..\src/interruptions.c ****             break;
 1513              		.loc 1 682 0
 1514 019e 48E1     		b	.L92
 1515              	.L90:
 1516 01a0 47E1     		b	.L92
 1517              	.L82:
 683:..\src/interruptions.c ****             
 684:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 685:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1518              		.loc 1 685 0
 1519 01a2 FB68     		ldr	r3, [r7, #12]
 1520 01a4 002B     		cmp	r3, #0
 1521 01a6 0FDD     		ble	.L93
 686:..\src/interruptions.c ****                 g_ref[0].pos = (err_emg_1 * g_mem.motor[0].pos_lim_sup) / (1024 - c_mem.emg.emg_thr
 1522              		.loc 1 686 0
 1523 01a8 454B     		ldr	r3, .L191+20
 1524 01aa D3F8E830 		ldr	r3, [r3, #232]
 1525 01ae FA68     		ldr	r2, [r7, #12]
 1526 01b0 02FB03F2 		mul	r2, r2, r3
 1527 01b4 3D4B     		ldr	r3, .L191
 1528 01b6 B3F8F031 		ldrh	r3, [r3, #496]
 1529 01ba C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 40


 1530 01be 92FBF3F3 		sdiv	r3, r2, r3
 1531 01c2 3E4A     		ldr	r2, .L191+16
 1532 01c4 1360     		str	r3, [r2]
 687:..\src/interruptions.c ****             else
 688:..\src/interruptions.c ****                 g_ref[0].pos = 0;
 689:..\src/interruptions.c ****             break;
 1533              		.loc 1 689 0
 1534 01c6 34E1     		b	.L92
 1535              	.L93:
 688:..\src/interruptions.c ****             break;
 1536              		.loc 1 688 0
 1537 01c8 3C4B     		ldr	r3, .L191+16
 1538 01ca 0022     		movs	r2, #0
 1539 01cc 1A60     		str	r2, [r3]
 1540              		.loc 1 689 0
 1541 01ce 30E1     		b	.L92
 1542              	.L86:
 690:..\src/interruptions.c ****                 
 691:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 692:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1543              		.loc 1 692 0
 1544 01d0 FB68     		ldr	r3, [r7, #12]
 1545 01d2 002B     		cmp	r3, #0
 1546 01d4 13DD     		ble	.L95
 693:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup - (err_emg_1 * g_mem.motor[0].pos_lim_sup
 1547              		.loc 1 693 0
 1548 01d6 3A4B     		ldr	r3, .L191+20
 1549 01d8 D3F8E820 		ldr	r2, [r3, #232]
 1550 01dc 384B     		ldr	r3, .L191+20
 1551 01de D3F8E830 		ldr	r3, [r3, #232]
 1552 01e2 F968     		ldr	r1, [r7, #12]
 1553 01e4 01FB03F1 		mul	r1, r1, r3
 1554 01e8 304B     		ldr	r3, .L191
 1555 01ea B3F8F031 		ldrh	r3, [r3, #496]
 1556 01ee C3F58063 		rsb	r3, r3, #1024
 1557 01f2 91FBF3F3 		sdiv	r3, r1, r3
 1558 01f6 D31A     		subs	r3, r2, r3
 1559 01f8 304A     		ldr	r2, .L191+16
 1560 01fa 1360     		str	r3, [r2]
 694:..\src/interruptions.c ****             else
 695:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup;
 696:..\src/interruptions.c ****             break;
 1561              		.loc 1 696 0
 1562 01fc 19E1     		b	.L92
 1563              	.L95:
 695:..\src/interruptions.c ****             break;
 1564              		.loc 1 695 0
 1565 01fe 304B     		ldr	r3, .L191+20
 1566 0200 D3F8E830 		ldr	r3, [r3, #232]
 1567 0204 2D4A     		ldr	r2, .L191+16
 1568 0206 1360     		str	r3, [r2]
 1569              		.loc 1 696 0
 1570 0208 13E1     		b	.L92
 1571              	.L83:
 697:..\src/interruptions.c **** 
 698:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 699:..\src/interruptions.c ****             g_ref[0].pos = g_mem.motor[0].pos_lim_sup - g_refOld[0].pos;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 41


 1572              		.loc 1 699 0
 1573 020a 2D4B     		ldr	r3, .L191+20
 1574 020c D3F8E820 		ldr	r2, [r3, #232]
 1575 0210 294B     		ldr	r3, .L191+12
 1576 0212 1B68     		ldr	r3, [r3]
 1577 0214 D31A     		subs	r3, r2, r3
 1578 0216 294A     		ldr	r2, .L191+16
 1579 0218 1360     		str	r3, [r2]
 700:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1580              		.loc 1 700 0
 1581 021a FB68     		ldr	r3, [r7, #12]
 1582 021c 002B     		cmp	r3, #0
 1583 021e 13DD     		ble	.L97
 701:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (1024
 1584              		.loc 1 701 0
 1585 0220 254B     		ldr	r3, .L191+12
 1586 0222 1A68     		ldr	r2, [r3]
 1587 0224 264B     		ldr	r3, .L191+20
 1588 0226 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1589 022a 1946     		mov	r1, r3
 1590 022c FB68     		ldr	r3, [r7, #12]
 1591 022e 03FB01F3 		mul	r3, r3, r1
 1592 0232 5900     		lsls	r1, r3, #1
 1593 0234 1D4B     		ldr	r3, .L191
 1594 0236 B3F8F031 		ldrh	r3, [r3, #496]
 1595 023a C3F58063 		rsb	r3, r3, #1024
 1596 023e 91FBF3F3 		sdiv	r3, r1, r3
 1597 0242 1344     		add	r3, r3, r2
 1598 0244 1D4A     		ldr	r2, .L191+16
 1599 0246 1360     		str	r3, [r2]
 1600              	.L97:
 702:..\src/interruptions.c ****             }
 703:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1601              		.loc 1 703 0
 1602 0248 BB68     		ldr	r3, [r7, #8]
 1603 024a 002B     		cmp	r3, #0
 1604 024c 40F3F080 		ble	.L184
 704:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (1024
 1605              		.loc 1 704 0
 1606 0250 194B     		ldr	r3, .L191+12
 1607 0252 1A68     		ldr	r2, [r3]
 1608 0254 1A4B     		ldr	r3, .L191+20
 1609 0256 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1610 025a 1946     		mov	r1, r3
 1611 025c BB68     		ldr	r3, [r7, #8]
 1612 025e 03FB01F3 		mul	r3, r3, r1
 1613 0262 5900     		lsls	r1, r3, #1
 1614 0264 114B     		ldr	r3, .L191
 1615 0266 B3F8F231 		ldrh	r3, [r3, #498]
 1616 026a C3F58063 		rsb	r3, r3, #1024
 1617 026e 91FBF3F3 		sdiv	r3, r1, r3
 1618 0272 D31A     		subs	r3, r2, r3
 1619 0274 114A     		ldr	r2, .L191+16
 1620 0276 1360     		str	r3, [r2]
 705:..\src/interruptions.c ****             }
 706:..\src/interruptions.c ****             break;
 1621              		.loc 1 706 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 42


 1622 0278 DAE0     		b	.L184
 1623              	.L84:
 707:..\src/interruptions.c **** 
 708:..\src/interruptions.c **** 
 709:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 710:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1624              		.loc 1 710 0
 1625 027a 0F4B     		ldr	r3, .L191+12
 1626 027c 1B68     		ldr	r3, [r3]
 1627 027e 0F4A     		ldr	r2, .L191+16
 1628 0280 1360     		str	r3, [r2]
 711:..\src/interruptions.c ****             switch (current_emg) {
 1629              		.loc 1 711 0
 1630 0282 104B     		ldr	r3, .L191+24
 1631 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1632 0286 012B     		cmp	r3, #1
 1633 0288 29D0     		beq	.L100
 1634 028a 022B     		cmp	r3, #2
 1635 028c 43D0     		beq	.L101
 1636 028e 002B     		cmp	r3, #0
 1637 0290 00D0     		beq	.L102
 712:..\src/interruptions.c ****                 case 0:
 713:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 714:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 715:..\src/interruptions.c ****                         current_emg = 1;
 716:..\src/interruptions.c ****                         break;
 717:..\src/interruptions.c ****                     }
 718:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 719:..\src/interruptions.c ****                         current_emg = 2;
 720:..\src/interruptions.c ****                         break;
 721:..\src/interruptions.c ****                     }
 722:..\src/interruptions.c ****                     break;
 723:..\src/interruptions.c **** 
 724:..\src/interruptions.c ****                 case 1:
 725:..\src/interruptions.c ****                     // EMG 1 is first
 726:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 727:..\src/interruptions.c ****                         current_emg = 0;
 728:..\src/interruptions.c ****                         break;
 729:..\src/interruptions.c ****                     }
 730:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (1024
 731:..\src/interruptions.c ****                     break;
 732:..\src/interruptions.c **** 
 733:..\src/interruptions.c ****                 case 2:
 734:..\src/interruptions.c ****                     // EMG 2 is first
 735:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 736:..\src/interruptions.c ****                         current_emg = 0;
 737:..\src/interruptions.c ****                         break;
 738:..\src/interruptions.c ****                     }
 739:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (1024
 740:..\src/interruptions.c ****                     break;
 741:..\src/interruptions.c **** 
 742:..\src/interruptions.c ****                 default:
 743:..\src/interruptions.c ****                     break;
 1638              		.loc 1 743 0
 1639 0292 5DE0     		b	.L104
 1640              	.L102:
 714:..\src/interruptions.c ****                         current_emg = 1;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 43


 1641              		.loc 1 714 0
 1642 0294 FB68     		ldr	r3, [r7, #12]
 1643 0296 002B     		cmp	r3, #0
 1644 0298 16DD     		ble	.L103
 714:..\src/interruptions.c ****                         current_emg = 1;
 1645              		.loc 1 714 0 is_stmt 0 discriminator 1
 1646 029a FA68     		ldr	r2, [r7, #12]
 1647 029c BB68     		ldr	r3, [r7, #8]
 1648 029e 9A42     		cmp	r2, r3
 1649 02a0 12DD     		ble	.L103
 715:..\src/interruptions.c ****                         break;
 1650              		.loc 1 715 0 is_stmt 1
 1651 02a2 084B     		ldr	r3, .L191+24
 1652 02a4 0122     		movs	r2, #1
 1653 02a6 1A70     		strb	r2, [r3]
 716:..\src/interruptions.c ****                     }
 1654              		.loc 1 716 0
 1655 02a8 52E0     		b	.L104
 1656              	.L192:
 1657 02aa 00BF     		.align	2
 1658              	.L191:
 1659 02ac 00000000 		.word	c_mem
 1660 02b0 00000000 		.word	g_emg_meas
 1661 02b4 00000000 		.word	g_meas
 1662 02b8 00000000 		.word	g_refOld
 1663 02bc 00000000 		.word	g_ref
 1664 02c0 00000000 		.word	g_mem
 1665 02c4 8C000000 		.word	current_emg.10445
 1666              	.L103:
 718:..\src/interruptions.c ****                         current_emg = 2;
 1667              		.loc 1 718 0
 1668 02c8 BB68     		ldr	r3, [r7, #8]
 1669 02ca 002B     		cmp	r3, #0
 1670 02cc 3FDD     		ble	.L185
 718:..\src/interruptions.c ****                         current_emg = 2;
 1671              		.loc 1 718 0 is_stmt 0 discriminator 1
 1672 02ce BA68     		ldr	r2, [r7, #8]
 1673 02d0 FB68     		ldr	r3, [r7, #12]
 1674 02d2 9A42     		cmp	r2, r3
 1675 02d4 3BDD     		ble	.L185
 719:..\src/interruptions.c ****                         break;
 1676              		.loc 1 719 0 is_stmt 1
 1677 02d6 954B     		ldr	r3, .L193
 1678 02d8 0222     		movs	r2, #2
 1679 02da 1A70     		strb	r2, [r3]
 720:..\src/interruptions.c ****                     }
 1680              		.loc 1 720 0
 1681 02dc 38E0     		b	.L104
 1682              	.L100:
 726:..\src/interruptions.c ****                         current_emg = 0;
 1683              		.loc 1 726 0
 1684 02de FB68     		ldr	r3, [r7, #12]
 1685 02e0 002B     		cmp	r3, #0
 1686 02e2 03DA     		bge	.L106
 727:..\src/interruptions.c ****                         break;
 1687              		.loc 1 727 0
 1688 02e4 914B     		ldr	r3, .L193
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 44


 1689 02e6 0022     		movs	r2, #0
 1690 02e8 1A70     		strb	r2, [r3]
 728:..\src/interruptions.c ****                     }
 1691              		.loc 1 728 0
 1692 02ea 31E0     		b	.L104
 1693              	.L106:
 730:..\src/interruptions.c ****                     break;
 1694              		.loc 1 730 0
 1695 02ec 904B     		ldr	r3, .L193+4
 1696 02ee 1A68     		ldr	r2, [r3]
 1697 02f0 904B     		ldr	r3, .L193+8
 1698 02f2 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1699 02f6 1946     		mov	r1, r3
 1700 02f8 FB68     		ldr	r3, [r7, #12]
 1701 02fa 03FB01F3 		mul	r3, r3, r1
 1702 02fe 9900     		lsls	r1, r3, #2
 1703 0300 8D4B     		ldr	r3, .L193+12
 1704 0302 B3F8F031 		ldrh	r3, [r3, #496]
 1705 0306 C3F58063 		rsb	r3, r3, #1024
 1706 030a 91FBF3F3 		sdiv	r3, r1, r3
 1707 030e 1344     		add	r3, r3, r2
 1708 0310 8A4A     		ldr	r2, .L193+16
 1709 0312 1360     		str	r3, [r2]
 731:..\src/interruptions.c **** 
 1710              		.loc 1 731 0
 1711 0314 1CE0     		b	.L104
 1712              	.L101:
 735:..\src/interruptions.c ****                         current_emg = 0;
 1713              		.loc 1 735 0
 1714 0316 BB68     		ldr	r3, [r7, #8]
 1715 0318 002B     		cmp	r3, #0
 1716 031a 03DA     		bge	.L107
 736:..\src/interruptions.c ****                         break;
 1717              		.loc 1 736 0
 1718 031c 834B     		ldr	r3, .L193
 1719 031e 0022     		movs	r2, #0
 1720 0320 1A70     		strb	r2, [r3]
 737:..\src/interruptions.c ****                     }
 1721              		.loc 1 737 0
 1722 0322 15E0     		b	.L104
 1723              	.L107:
 739:..\src/interruptions.c ****                     break;
 1724              		.loc 1 739 0
 1725 0324 824B     		ldr	r3, .L193+4
 1726 0326 1A68     		ldr	r2, [r3]
 1727 0328 824B     		ldr	r3, .L193+8
 1728 032a 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1729 032e 1946     		mov	r1, r3
 1730 0330 BB68     		ldr	r3, [r7, #8]
 1731 0332 03FB01F3 		mul	r3, r3, r1
 1732 0336 9900     		lsls	r1, r3, #2
 1733 0338 7F4B     		ldr	r3, .L193+12
 1734 033a B3F8F231 		ldrh	r3, [r3, #498]
 1735 033e C3F58063 		rsb	r3, r3, #1024
 1736 0342 91FBF3F3 		sdiv	r3, r1, r3
 1737 0346 D31A     		subs	r3, r2, r3
 1738 0348 7C4A     		ldr	r2, .L193+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 45


 1739 034a 1360     		str	r3, [r2]
 740:..\src/interruptions.c **** 
 1740              		.loc 1 740 0
 1741 034c 00E0     		b	.L104
 1742              	.L185:
 722:..\src/interruptions.c **** 
 1743              		.loc 1 722 0
 1744 034e 00BF     		nop
 1745              	.L104:
 744:..\src/interruptions.c ****             }
 745:..\src/interruptions.c ****             break;
 1746              		.loc 1 745 0 discriminator 1
 1747 0350 6FE0     		b	.L92
 1748              	.L85:
 746:..\src/interruptions.c **** 
 747:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 748:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1749              		.loc 1 748 0
 1750 0352 774B     		ldr	r3, .L193+4
 1751 0354 1B68     		ldr	r3, [r3]
 1752 0356 794A     		ldr	r2, .L193+16
 1753 0358 1360     		str	r3, [r2]
 749:..\src/interruptions.c ****             switch (current_emg) {
 1754              		.loc 1 749 0
 1755 035a 744B     		ldr	r3, .L193
 1756 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1757 035e 012B     		cmp	r3, #1
 1758 0360 1AD0     		beq	.L109
 1759 0362 022B     		cmp	r3, #2
 1760 0364 3AD0     		beq	.L110
 1761 0366 002B     		cmp	r3, #0
 1762 0368 00D0     		beq	.L111
 750:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 751:..\src/interruptions.c ****                 case 0:
 752:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 753:..\src/interruptions.c ****                         current_emg = 1;
 754:..\src/interruptions.c ****                         break;
 755:..\src/interruptions.c ****                     }
 756:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 757:..\src/interruptions.c ****                         current_emg = 2;
 758:..\src/interruptions.c ****                         break;
 759:..\src/interruptions.c ****                     }
 760:..\src/interruptions.c ****                     break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                 // EMG 1 is first
 763:..\src/interruptions.c ****                 case 1:
 764:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 765:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 766:..\src/interruptions.c ****                         current_emg = 0;
 767:..\src/interruptions.c ****                         break;
 768:..\src/interruptions.c ****                     }
 769:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 770:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 771:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 772:..\src/interruptions.c ****                     
 773:..\src/interruptions.c ****                     break;
 774:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 46


 775:..\src/interruptions.c ****                 // EMG 2 is first
 776:..\src/interruptions.c ****                 case 2:
 777:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 778:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 779:..\src/interruptions.c ****                         current_emg = 0;
 780:..\src/interruptions.c ****                         break;
 781:..\src/interruptions.c ****                     }
 782:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 783:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 784:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 785:..\src/interruptions.c ****                     }
 786:..\src/interruptions.c ****                     break;
 787:..\src/interruptions.c **** 
 788:..\src/interruptions.c ****                 default:
 789:..\src/interruptions.c ****                     break;
 1763              		.loc 1 789 0
 1764 036a 5EE0     		b	.L113
 1765              	.L111:
 752:..\src/interruptions.c ****                         current_emg = 1;
 1766              		.loc 1 752 0
 1767 036c FB68     		ldr	r3, [r7, #12]
 1768 036e 002B     		cmp	r3, #0
 1769 0370 07DD     		ble	.L112
 752:..\src/interruptions.c ****                         current_emg = 1;
 1770              		.loc 1 752 0 is_stmt 0 discriminator 1
 1771 0372 FA68     		ldr	r2, [r7, #12]
 1772 0374 BB68     		ldr	r3, [r7, #8]
 1773 0376 9A42     		cmp	r2, r3
 1774 0378 03DD     		ble	.L112
 753:..\src/interruptions.c ****                         break;
 1775              		.loc 1 753 0 is_stmt 1
 1776 037a 6C4B     		ldr	r3, .L193
 1777 037c 0122     		movs	r2, #1
 1778 037e 1A70     		strb	r2, [r3]
 754:..\src/interruptions.c ****                     }
 1779              		.loc 1 754 0
 1780 0380 53E0     		b	.L113
 1781              	.L112:
 756:..\src/interruptions.c ****                         current_emg = 2;
 1782              		.loc 1 756 0
 1783 0382 BB68     		ldr	r3, [r7, #8]
 1784 0384 002B     		cmp	r3, #0
 1785 0386 4BDD     		ble	.L186
 756:..\src/interruptions.c ****                         current_emg = 2;
 1786              		.loc 1 756 0 is_stmt 0 discriminator 1
 1787 0388 BA68     		ldr	r2, [r7, #8]
 1788 038a FB68     		ldr	r3, [r7, #12]
 1789 038c 9A42     		cmp	r2, r3
 1790 038e 47DD     		ble	.L186
 757:..\src/interruptions.c ****                         break;
 1791              		.loc 1 757 0 is_stmt 1
 1792 0390 664B     		ldr	r3, .L193
 1793 0392 0222     		movs	r2, #2
 1794 0394 1A70     		strb	r2, [r3]
 758:..\src/interruptions.c ****                     }
 1795              		.loc 1 758 0
 1796 0396 48E0     		b	.L113
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 47


 1797              	.L109:
 765:..\src/interruptions.c ****                         current_emg = 0;
 1798              		.loc 1 765 0
 1799 0398 FB68     		ldr	r3, [r7, #12]
 1800 039a 002B     		cmp	r3, #0
 1801 039c 06DA     		bge	.L115
 765:..\src/interruptions.c ****                         current_emg = 0;
 1802              		.loc 1 765 0 is_stmt 0 discriminator 1
 1803 039e BB68     		ldr	r3, [r7, #8]
 1804 03a0 002B     		cmp	r3, #0
 1805 03a2 03DA     		bge	.L115
 766:..\src/interruptions.c ****                         break;
 1806              		.loc 1 766 0 is_stmt 1
 1807 03a4 614B     		ldr	r3, .L193
 1808 03a6 0022     		movs	r2, #0
 1809 03a8 1A70     		strb	r2, [r3]
 767:..\src/interruptions.c ****                     }
 1810              		.loc 1 767 0
 1811 03aa 3EE0     		b	.L113
 1812              	.L115:
 770:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 1813              		.loc 1 770 0
 1814 03ac FB68     		ldr	r3, [r7, #12]
 1815 03ae 002B     		cmp	r3, #0
 1816 03b0 38DD     		ble	.L187
 771:..\src/interruptions.c ****                     
 1817              		.loc 1 771 0
 1818 03b2 5F4B     		ldr	r3, .L193+4
 1819 03b4 1A68     		ldr	r2, [r3]
 1820 03b6 5F4B     		ldr	r3, .L193+8
 1821 03b8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1822 03bc 1946     		mov	r1, r3
 1823 03be FB68     		ldr	r3, [r7, #12]
 1824 03c0 03FB01F3 		mul	r3, r3, r1
 1825 03c4 9900     		lsls	r1, r3, #2
 1826 03c6 5C4B     		ldr	r3, .L193+12
 1827 03c8 B3F8F031 		ldrh	r3, [r3, #496]
 1828 03cc C3F58063 		rsb	r3, r3, #1024
 1829 03d0 91FBF3F3 		sdiv	r3, r1, r3
 1830 03d4 1344     		add	r3, r3, r2
 1831 03d6 594A     		ldr	r2, .L193+16
 1832 03d8 1360     		str	r3, [r2]
 773:..\src/interruptions.c **** 
 1833              		.loc 1 773 0
 1834 03da 23E0     		b	.L187
 1835              	.L110:
 778:..\src/interruptions.c ****                         current_emg = 0;
 1836              		.loc 1 778 0
 1837 03dc FB68     		ldr	r3, [r7, #12]
 1838 03de 002B     		cmp	r3, #0
 1839 03e0 06DA     		bge	.L117
 778:..\src/interruptions.c ****                         current_emg = 0;
 1840              		.loc 1 778 0 is_stmt 0 discriminator 1
 1841 03e2 BB68     		ldr	r3, [r7, #8]
 1842 03e4 002B     		cmp	r3, #0
 1843 03e6 03DA     		bge	.L117
 779:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 48


 1844              		.loc 1 779 0 is_stmt 1
 1845 03e8 504B     		ldr	r3, .L193
 1846 03ea 0022     		movs	r2, #0
 1847 03ec 1A70     		strb	r2, [r3]
 780:..\src/interruptions.c ****                     }
 1848              		.loc 1 780 0
 1849 03ee 1CE0     		b	.L113
 1850              	.L117:
 783:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 1851              		.loc 1 783 0
 1852 03f0 BB68     		ldr	r3, [r7, #8]
 1853 03f2 002B     		cmp	r3, #0
 1854 03f4 18DD     		ble	.L188
 784:..\src/interruptions.c ****                     }
 1855              		.loc 1 784 0
 1856 03f6 4E4B     		ldr	r3, .L193+4
 1857 03f8 1A68     		ldr	r2, [r3]
 1858 03fa 4F4B     		ldr	r3, .L193+12
 1859 03fc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1860 0400 1946     		mov	r1, r3
 1861 0402 BB68     		ldr	r3, [r7, #8]
 1862 0404 03FB01F3 		mul	r3, r3, r1
 1863 0408 9900     		lsls	r1, r3, #2
 1864 040a 4B4B     		ldr	r3, .L193+12
 1865 040c B3F8F231 		ldrh	r3, [r3, #498]
 1866 0410 C3F58063 		rsb	r3, r3, #1024
 1867 0414 91FBF3F3 		sdiv	r3, r1, r3
 1868 0418 D31A     		subs	r3, r2, r3
 1869 041a 484A     		ldr	r2, .L193+16
 1870 041c 1360     		str	r3, [r2]
 786:..\src/interruptions.c **** 
 1871              		.loc 1 786 0
 1872 041e 03E0     		b	.L188
 1873              	.L186:
 760:..\src/interruptions.c **** 
 1874              		.loc 1 760 0
 1875 0420 00BF     		nop
 1876 0422 06E0     		b	.L92
 1877              	.L187:
 773:..\src/interruptions.c **** 
 1878              		.loc 1 773 0
 1879 0424 00BF     		nop
 1880 0426 04E0     		b	.L92
 1881              	.L188:
 786:..\src/interruptions.c **** 
 1882              		.loc 1 786 0
 1883 0428 00BF     		nop
 1884              	.L113:
 790:..\src/interruptions.c ****             }
 791:..\src/interruptions.c ****             break;
 1885              		.loc 1 791 0 discriminator 3
 1886 042a 02E0     		b	.L92
 1887              	.L183:
 792:..\src/interruptions.c **** 
 793:..\src/interruptions.c ****         default:
 794:..\src/interruptions.c ****             break;
 1888              		.loc 1 794 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 49


 1889 042c 00BF     		nop
 1890 042e 00E0     		b	.L92
 1891              	.L184:
 706:..\src/interruptions.c **** 
 1892              		.loc 1 706 0
 1893 0430 00BF     		nop
 1894              	.L92:
 795:..\src/interruptions.c ****     }
 796:..\src/interruptions.c **** 
 797:..\src/interruptions.c ****     // Position limit saturation
 798:..\src/interruptions.c ****     if (SH_MOT->pos_lim_flag) {
 1895              		.loc 1 798 0
 1896 0432 7B6C     		ldr	r3, [r7, #68]
 1897 0434 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1898 0438 002B     		cmp	r3, #0
 1899 043a 13D0     		beq	.L119
 799:..\src/interruptions.c ****         if (g_ref[0].pos < SH_MOT->pos_lim_inf) 
 1900              		.loc 1 799 0
 1901 043c 3F4B     		ldr	r3, .L193+16
 1902 043e 1A68     		ldr	r2, [r3]
 1903 0440 7B6C     		ldr	r3, [r7, #68]
 1904 0442 5B6B     		ldr	r3, [r3, #52]
 1905 0444 9A42     		cmp	r2, r3
 1906 0446 03DA     		bge	.L120
 800:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_inf;
 1907              		.loc 1 800 0
 1908 0448 7B6C     		ldr	r3, [r7, #68]
 1909 044a 5B6B     		ldr	r3, [r3, #52]
 1910 044c 3B4A     		ldr	r2, .L193+16
 1911 044e 1360     		str	r3, [r2]
 1912              	.L120:
 801:..\src/interruptions.c ****         if (g_ref[0].pos > SH_MOT->pos_lim_sup) 
 1913              		.loc 1 801 0
 1914 0450 3A4B     		ldr	r3, .L193+16
 1915 0452 1A68     		ldr	r2, [r3]
 1916 0454 7B6C     		ldr	r3, [r7, #68]
 1917 0456 9B6B     		ldr	r3, [r3, #56]
 1918 0458 9A42     		cmp	r2, r3
 1919 045a 03DD     		ble	.L119
 802:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_sup;
 1920              		.loc 1 802 0
 1921 045c 7B6C     		ldr	r3, [r7, #68]
 1922 045e 9B6B     		ldr	r3, [r3, #56]
 1923 0460 364A     		ldr	r2, .L193+16
 1924 0462 1360     		str	r3, [r2]
 1925              	.L119:
 803:..\src/interruptions.c ****     }
 804:..\src/interruptions.c ****     
 805:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1926              		.loc 1 805 0
 1927 0464 364B     		ldr	r3, .L193+20
 1928 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1929 0468 012B     		cmp	r3, #1
 1930 046a 02D1     		bne	.L121
 806:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 807:..\src/interruptions.c ****         g_ref[0].pos = 0;
 1931              		.loc 1 807 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 50


 1932 046c 334B     		ldr	r3, .L193+16
 1933 046e 0022     		movs	r2, #0
 1934 0470 1A60     		str	r2, [r3]
 1935              	.L121:
 808:..\src/interruptions.c ****     }
 809:..\src/interruptions.c ****         
 810:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1936              		.loc 1 810 0
 1937 0472 314B     		ldr	r3, .L193+12
 1938 0474 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1939 0478 012B     		cmp	r3, #1
 1940 047a 2AD1     		bne	.L122
 811:..\src/interruptions.c ****         if (rest_enabled == 1){
 1941              		.loc 1 811 0
 1942 047c 314B     		ldr	r3, .L193+24
 1943 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1944 0480 012B     		cmp	r3, #1
 1945 0482 03D1     		bne	.L123
 812:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 813:..\src/interruptions.c ****             g_ref[0].pos = rest_pos_curr_ref;
 1946              		.loc 1 813 0
 1947 0484 304B     		ldr	r3, .L193+28
 1948 0486 1B68     		ldr	r3, [r3]
 1949 0488 2C4A     		ldr	r2, .L193+16
 1950 048a 1360     		str	r3, [r2]
 1951              	.L123:
 814:..\src/interruptions.c ****         }
 815:..\src/interruptions.c ****         
 816:..\src/interruptions.c ****         if (forced_open == 1) {
 1952              		.loc 1 816 0
 1953 048c 2F4B     		ldr	r3, .L193+32
 1954 048e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1955 0490 012B     		cmp	r3, #1
 1956 0492 1ED1     		bne	.L122
 817:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 818:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1957              		.loc 1 818 0
 1958 0494 BB68     		ldr	r3, [r7, #8]
 1959 0496 002B     		cmp	r3, #0
 1960 0498 13DD     		ble	.L124
 819:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem.
 1961              		.loc 1 819 0
 1962 049a 264B     		ldr	r3, .L193+8
 1963 049c D3F8A022 		ldr	r2, [r3, #672]
 1964 04a0 244B     		ldr	r3, .L193+8
 1965 04a2 D3F8A032 		ldr	r3, [r3, #672]
 1966 04a6 B968     		ldr	r1, [r7, #8]
 1967 04a8 01FB03F1 		mul	r1, r1, r3
 1968 04ac 224B     		ldr	r3, .L193+12
 1969 04ae B3F8F231 		ldrh	r3, [r3, #498]
 1970 04b2 C3F58063 		rsb	r3, r3, #1024
 1971 04b6 91FBF3F3 		sdiv	r3, r1, r3
 1972 04ba D31A     		subs	r3, r2, r3
 1973 04bc 1F4A     		ldr	r2, .L193+16
 1974 04be 1360     		str	r3, [r2]
 1975 04c0 07E0     		b	.L122
 1976              	.L124:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 51


 820:..\src/interruptions.c ****             else {
 821:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos;
 1977              		.loc 1 821 0
 1978 04c2 1C4B     		ldr	r3, .L193+8
 1979 04c4 D3F8A032 		ldr	r3, [r3, #672]
 1980 04c8 1C4A     		ldr	r2, .L193+16
 1981 04ca 1360     		str	r3, [r2]
 822:..\src/interruptions.c ****                 forced_open = 0;
 1982              		.loc 1 822 0
 1983 04cc 1F4B     		ldr	r3, .L193+32
 1984 04ce 0022     		movs	r2, #0
 1985 04d0 1A70     		strb	r2, [r3]
 1986              	.L122:
 823:..\src/interruptions.c ****             }
 824:..\src/interruptions.c ****         }
 825:..\src/interruptions.c ****     }
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 1987              		.loc 1 827 0
 1988 04d2 7B6C     		ldr	r3, [r7, #68]
 1989 04d4 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 1990 04d8 032B     		cmp	r3, #3
 1991 04da 00F2F781 		bhi	.L125
 1992 04de 01A2     		adr	r2, .L127
 1993 04e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1994              		.p2align 2
 1995              	.L127:
 1996 04e4 BB060000 		.word	.L126+1
 1997 04e8 91080000 		.word	.L128+1
 1998 04ec 65070000 		.word	.L129+1
 1999 04f0 F5040000 		.word	.L130+1
 2000              		.p2align 1
 2001              	.L130:
 828:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 829:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 830:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 2002              		.loc 1 830 0
 2003 04f4 114B     		ldr	r3, .L193+16
 2004 04f6 1A68     		ldr	r2, [r3]
 2005 04f8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2006 04fc 1449     		ldr	r1, .L193+36
 2007 04fe 3420     		movs	r0, #52
 2008 0500 00FB03F3 		mul	r3, r0, r3
 2009 0504 0B44     		add	r3, r3, r1
 2010 0506 1B68     		ldr	r3, [r3]
 2011 0508 D31A     		subs	r3, r2, r3
 2012 050a 7B60     		str	r3, [r7, #4]
 831:..\src/interruptions.c **** 
 832:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2013              		.loc 1 832 0
 2014 050c 114B     		ldr	r3, .L193+40
 2015 050e 1A68     		ldr	r2, [r3]
 2016 0510 7B68     		ldr	r3, [r7, #4]
 2017 0512 1344     		add	r3, r3, r2
 2018 0514 0F4A     		ldr	r2, .L193+40
 2019 0516 1360     		str	r3, [r2]
 833:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 52


 834:..\src/interruptions.c ****             // error_sum saturation
 835:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2020              		.loc 1 835 0
 2021 0518 0E4B     		ldr	r3, .L193+40
 2022 051a 1B68     		ldr	r3, [r3]
 2023 051c 0E4A     		ldr	r2, .L193+44
 2024 051e 9342     		cmp	r3, r2
 2025 0520 1CDD     		ble	.L131
 836:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2026              		.loc 1 836 0
 2027 0522 0C4B     		ldr	r3, .L193+40
 2028 0524 0C4A     		ldr	r2, .L193+44
 2029 0526 1A60     		str	r2, [r3]
 2030 0528 20E0     		b	.L132
 2031              	.L194:
 2032 052a 00BF     		.align	2
 2033              	.L193:
 2034 052c 8C000000 		.word	current_emg.10445
 2035 0530 00000000 		.word	g_refOld
 2036 0534 00000000 		.word	g_mem
 2037 0538 00000000 		.word	c_mem
 2038 053c 00000000 		.word	g_ref
 2039 0540 00000000 		.word	battery_low_SoC
 2040 0544 00000000 		.word	rest_enabled
 2041 0548 00000000 		.word	rest_pos_curr_ref
 2042 054c 00000000 		.word	forced_open
 2043 0550 00000000 		.word	g_meas
 2044 0554 90000000 		.word	pos_error_sum.10438
 2045 0558 80F0FA02 		.word	50000000
 2046              	.L131:
 837:..\src/interruptions.c ****             else {
 838:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2047              		.loc 1 838 0
 2048 055c 8E4B     		ldr	r3, .L195
 2049 055e 1B68     		ldr	r3, [r3]
 2050 0560 8E4A     		ldr	r2, .L195+4
 2051 0562 9342     		cmp	r3, r2
 2052 0564 02DA     		bge	.L132
 839:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2053              		.loc 1 839 0
 2054 0566 8C4B     		ldr	r3, .L195
 2055 0568 8C4A     		ldr	r2, .L195+4
 2056 056a 1A60     		str	r2, [r3]
 2057              	.L132:
 840:..\src/interruptions.c ****             }
 841:..\src/interruptions.c ****             
 842:..\src/interruptions.c ****             // ------ position PID control ------
 843:..\src/interruptions.c **** 
 844:..\src/interruptions.c ****             i_ref = 0;
 2058              		.loc 1 844 0
 2059 056c 0023     		movs	r3, #0
 2060 056e 3B65     		str	r3, [r7, #80]
 845:..\src/interruptions.c ****             
 846:..\src/interruptions.c ****             // Proportional
 847:..\src/interruptions.c ****             if (k_p_dl != 0)
 2061              		.loc 1 847 0
 2062 0570 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 53


 2063 0572 002B     		cmp	r3, #0
 2064 0574 07D0     		beq	.L133
 848:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2065              		.loc 1 848 0
 2066 0576 7B6A     		ldr	r3, [r7, #36]
 2067 0578 7A68     		ldr	r2, [r7, #4]
 2068 057a 02FB03F3 		mul	r3, r2, r3
 2069 057e 1B14     		asrs	r3, r3, #16
 2070 0580 3A6D     		ldr	r2, [r7, #80]
 2071 0582 1344     		add	r3, r3, r2
 2072 0584 3B65     		str	r3, [r7, #80]
 2073              	.L133:
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c ****             // Integral
 851:..\src/interruptions.c ****             if (k_i_dl != 0)
 2074              		.loc 1 851 0
 2075 0586 3B6A     		ldr	r3, [r7, #32]
 2076 0588 002B     		cmp	r3, #0
 2077 058a 08D0     		beq	.L134
 852:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2078              		.loc 1 852 0
 2079 058c 824B     		ldr	r3, .L195
 2080 058e 1B68     		ldr	r3, [r3]
 2081 0590 3A6A     		ldr	r2, [r7, #32]
 2082 0592 02FB03F3 		mul	r3, r2, r3
 2083 0596 1B14     		asrs	r3, r3, #16
 2084 0598 3A6D     		ldr	r2, [r7, #80]
 2085 059a 1344     		add	r3, r3, r2
 2086 059c 3B65     		str	r3, [r7, #80]
 2087              	.L134:
 853:..\src/interruptions.c **** 
 854:..\src/interruptions.c ****             // Derivative
 855:..\src/interruptions.c ****             if (k_d_dl != 0)
 2088              		.loc 1 855 0
 2089 059e FB69     		ldr	r3, [r7, #28]
 2090 05a0 002B     		cmp	r3, #0
 2091 05a2 0AD0     		beq	.L135
 856:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2092              		.loc 1 856 0
 2093 05a4 7E4B     		ldr	r3, .L195+8
 2094 05a6 1B68     		ldr	r3, [r3]
 2095 05a8 7A68     		ldr	r2, [r7, #4]
 2096 05aa D31A     		subs	r3, r2, r3
 2097 05ac FA69     		ldr	r2, [r7, #28]
 2098 05ae 02FB03F3 		mul	r3, r2, r3
 2099 05b2 1B14     		asrs	r3, r3, #16
 2100 05b4 3A6D     		ldr	r2, [r7, #80]
 2101 05b6 1344     		add	r3, r3, r2
 2102 05b8 3B65     		str	r3, [r7, #80]
 2103              	.L135:
 857:..\src/interruptions.c ****                         
 858:..\src/interruptions.c ****             // Update previous position
 859:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2104              		.loc 1 859 0
 2105 05ba 794A     		ldr	r2, .L195+8
 2106 05bc 7B68     		ldr	r3, [r7, #4]
 2107 05be 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 54


 860:..\src/interruptions.c **** 
 861:..\src/interruptions.c ****             // motor direction depends on i_ref
 862:..\src/interruptions.c ****             if (i_ref >= 0)
 2108              		.loc 1 862 0
 2109 05c0 3B6D     		ldr	r3, [r7, #80]
 2110 05c2 002B     		cmp	r3, #0
 2111 05c4 03DB     		blt	.L136
 863:..\src/interruptions.c ****                 motor_dir = TRUE;
 2112              		.loc 1 863 0
 2113 05c6 774B     		ldr	r3, .L195+12
 2114 05c8 0122     		movs	r2, #1
 2115 05ca 1A70     		strb	r2, [r3]
 2116 05cc 02E0     		b	.L137
 2117              	.L136:
 864:..\src/interruptions.c ****             else
 865:..\src/interruptions.c ****                 motor_dir = FALSE;
 2118              		.loc 1 865 0
 2119 05ce 754B     		ldr	r3, .L195+12
 2120 05d0 0022     		movs	r2, #0
 2121 05d2 1A70     		strb	r2, [r3]
 2122              	.L137:
 866:..\src/interruptions.c **** 
 867:..\src/interruptions.c ****             // saturate max current
 868:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2123              		.loc 1 868 0
 2124 05d4 7B6C     		ldr	r3, [r7, #68]
 2125 05d6 B3F95C30 		ldrsh	r3, [r3, #92]
 2126 05da 1A46     		mov	r2, r3
 2127 05dc 3B6D     		ldr	r3, [r7, #80]
 2128 05de 9A42     		cmp	r2, r3
 2129 05e0 04DA     		bge	.L138
 869:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2130              		.loc 1 869 0
 2131 05e2 7B6C     		ldr	r3, [r7, #68]
 2132 05e4 B3F95C30 		ldrsh	r3, [r3, #92]
 2133 05e8 3B65     		str	r3, [r7, #80]
 2134 05ea 0BE0     		b	.L139
 2135              	.L138:
 870:..\src/interruptions.c ****             else {
 871:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2136              		.loc 1 871 0
 2137 05ec 7B6C     		ldr	r3, [r7, #68]
 2138 05ee B3F95C30 		ldrsh	r3, [r3, #92]
 2139 05f2 5A42     		negs	r2, r3
 2140 05f4 3B6D     		ldr	r3, [r7, #80]
 2141 05f6 9A42     		cmp	r2, r3
 2142 05f8 04DD     		ble	.L139
 872:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2143              		.loc 1 872 0
 2144 05fa 7B6C     		ldr	r3, [r7, #68]
 2145 05fc B3F95C30 		ldrsh	r3, [r3, #92]
 2146 0600 5B42     		negs	r3, r3
 2147 0602 3B65     		str	r3, [r7, #80]
 2148              	.L139:
 873:..\src/interruptions.c ****         	}
 874:..\src/interruptions.c **** 
 875:..\src/interruptions.c ****             // current error and curr error sum
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 55


 876:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2149              		.loc 1 876 0
 2150 0604 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2151 0608 674A     		ldr	r2, .L195+16
 2152 060a 3421     		movs	r1, #52
 2153 060c 01FB03F3 		mul	r3, r1, r3
 2154 0610 1344     		add	r3, r3, r2
 2155 0612 0C33     		adds	r3, r3, #12
 2156 0614 1B68     		ldr	r3, [r3]
 2157 0616 3A6D     		ldr	r2, [r7, #80]
 2158 0618 D31A     		subs	r3, r2, r3
 2159 061a 3B60     		str	r3, [r7]
 877:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2160              		.loc 1 877 0
 2161 061c 634B     		ldr	r3, .L195+20
 2162 061e 1A68     		ldr	r2, [r3]
 2163 0620 3B68     		ldr	r3, [r7]
 2164 0622 1344     		add	r3, r3, r2
 2165 0624 614A     		ldr	r2, .L195+20
 2166 0626 1360     		str	r3, [r2]
 878:..\src/interruptions.c ****             
 879:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2167              		.loc 1 879 0
 2168 0628 604B     		ldr	r3, .L195+20
 2169 062a 1B68     		ldr	r3, [r3]
 2170 062c 604A     		ldr	r2, .L195+24
 2171 062e 9342     		cmp	r3, r2
 2172 0630 03DD     		ble	.L140
 880:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2173              		.loc 1 880 0
 2174 0632 5E4B     		ldr	r3, .L195+20
 2175 0634 5E4A     		ldr	r2, .L195+24
 2176 0636 1A60     		str	r2, [r3]
 2177 0638 07E0     		b	.L141
 2178              	.L140:
 881:..\src/interruptions.c ****             else {
 882:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2179              		.loc 1 882 0
 2180 063a 5C4B     		ldr	r3, .L195+20
 2181 063c 1B68     		ldr	r3, [r3]
 2182 063e 5D4A     		ldr	r2, .L195+28
 2183 0640 9342     		cmp	r3, r2
 2184 0642 02DA     		bge	.L141
 883:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2185              		.loc 1 883 0
 2186 0644 594B     		ldr	r3, .L195+20
 2187 0646 5B4A     		ldr	r2, .L195+28
 2188 0648 1A60     		str	r2, [r3]
 2189              	.L141:
 884:..\src/interruptions.c ****             }
 885:..\src/interruptions.c **** 
 886:..\src/interruptions.c ****             // ----- current PID control -----
 887:..\src/interruptions.c **** 
 888:..\src/interruptions.c ****             pwm_input = 0;
 2190              		.loc 1 888 0
 2191 064a 0023     		movs	r3, #0
 2192 064c 7B65     		str	r3, [r7, #84]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 56


 889:..\src/interruptions.c **** 
 890:..\src/interruptions.c ****             // Proportional
 891:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2193              		.loc 1 891 0
 2194 064e BB69     		ldr	r3, [r7, #24]
 2195 0650 002B     		cmp	r3, #0
 2196 0652 07D0     		beq	.L142
 892:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2197              		.loc 1 892 0
 2198 0654 BB69     		ldr	r3, [r7, #24]
 2199 0656 3A68     		ldr	r2, [r7]
 2200 0658 02FB03F3 		mul	r3, r2, r3
 2201 065c 1B14     		asrs	r3, r3, #16
 2202 065e 7A6D     		ldr	r2, [r7, #84]
 2203 0660 1344     		add	r3, r3, r2
 2204 0662 7B65     		str	r3, [r7, #84]
 2205              	.L142:
 893:..\src/interruptions.c **** 
 894:..\src/interruptions.c ****             // Integral
 895:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2206              		.loc 1 895 0
 2207 0664 7B69     		ldr	r3, [r7, #20]
 2208 0666 002B     		cmp	r3, #0
 2209 0668 08D0     		beq	.L143
 896:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2210              		.loc 1 896 0
 2211 066a 504B     		ldr	r3, .L195+20
 2212 066c 1B68     		ldr	r3, [r3]
 2213 066e 7A69     		ldr	r2, [r7, #20]
 2214 0670 02FB03F3 		mul	r3, r2, r3
 2215 0674 1B14     		asrs	r3, r3, #16
 2216 0676 7A6D     		ldr	r2, [r7, #84]
 2217 0678 1344     		add	r3, r3, r2
 2218 067a 7B65     		str	r3, [r7, #84]
 2219              	.L143:
 897:..\src/interruptions.c **** 
 898:..\src/interruptions.c ****             // Derivative
 899:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2220              		.loc 1 899 0
 2221 067c 3B69     		ldr	r3, [r7, #16]
 2222 067e 002B     		cmp	r3, #0
 2223 0680 0AD0     		beq	.L144
 900:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2224              		.loc 1 900 0
 2225 0682 4D4B     		ldr	r3, .L195+32
 2226 0684 1B68     		ldr	r3, [r3]
 2227 0686 3A68     		ldr	r2, [r7]
 2228 0688 D31A     		subs	r3, r2, r3
 2229 068a 3A69     		ldr	r2, [r7, #16]
 2230 068c 02FB03F3 		mul	r3, r2, r3
 2231 0690 1B14     		asrs	r3, r3, #16
 2232 0692 7A6D     		ldr	r2, [r7, #84]
 2233 0694 1344     		add	r3, r3, r2
 2234 0696 7B65     		str	r3, [r7, #84]
 2235              	.L144:
 901:..\src/interruptions.c **** 
 902:..\src/interruptions.c ****             // pwm_input saturation
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 57


 903:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2236              		.loc 1 903 0
 2237 0698 7B6D     		ldr	r3, [r7, #84]
 2238 069a 13F1640F 		cmn	r3, #100
 2239 069e 03DA     		bge	.L145
 904:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2240              		.loc 1 904 0
 2241 06a0 6FF06303 		mvn	r3, #99
 2242 06a4 7B65     		str	r3, [r7, #84]
 2243 06a6 04E0     		b	.L146
 2244              	.L145:
 905:..\src/interruptions.c ****             else {
 906:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2245              		.loc 1 906 0
 2246 06a8 7B6D     		ldr	r3, [r7, #84]
 2247 06aa 642B     		cmp	r3, #100
 2248 06ac 01DD     		ble	.L146
 907:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 2249              		.loc 1 907 0
 2250 06ae 6423     		movs	r3, #100
 2251 06b0 7B65     		str	r3, [r7, #84]
 2252              	.L146:
 908:..\src/interruptions.c ****             }
 909:..\src/interruptions.c **** 
 910:..\src/interruptions.c ****             // Update previous current
 911:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2253              		.loc 1 911 0
 2254 06b2 414A     		ldr	r2, .L195+32
 2255 06b4 3B68     		ldr	r3, [r7]
 2256 06b6 1360     		str	r3, [r2]
 912:..\src/interruptions.c **** 
 913:..\src/interruptions.c ****         break;
 2257              		.loc 1 913 0
 2258 06b8 08E1     		b	.L125
 2259              	.L126:
 914:..\src/interruptions.c **** 
 915:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 916:..\src/interruptions.c ****         case CONTROL_ANGLE:
 917:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 2260              		.loc 1 917 0
 2261 06ba 404B     		ldr	r3, .L195+36
 2262 06bc 1A68     		ldr	r2, [r3]
 2263 06be 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2264 06c2 3949     		ldr	r1, .L195+16
 2265 06c4 3420     		movs	r0, #52
 2266 06c6 00FB03F3 		mul	r3, r0, r3
 2267 06ca 0B44     		add	r3, r3, r1
 2268 06cc 1B68     		ldr	r3, [r3]
 2269 06ce D31A     		subs	r3, r2, r3
 2270 06d0 7B60     		str	r3, [r7, #4]
 918:..\src/interruptions.c **** 
 919:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2271              		.loc 1 919 0
 2272 06d2 314B     		ldr	r3, .L195
 2273 06d4 1A68     		ldr	r2, [r3]
 2274 06d6 7B68     		ldr	r3, [r7, #4]
 2275 06d8 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 58


 2276 06da 2F4A     		ldr	r2, .L195
 2277 06dc 1360     		str	r3, [r2]
 920:..\src/interruptions.c **** 
 921:..\src/interruptions.c ****             // anti-windup (for integral control)
 922:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2278              		.loc 1 922 0
 2279 06de 2E4B     		ldr	r3, .L195
 2280 06e0 1B68     		ldr	r3, [r3]
 2281 06e2 B3F57A7F 		cmp	r3, #1000
 2282 06e6 04DD     		ble	.L147
 923:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2283              		.loc 1 923 0
 2284 06e8 2B4B     		ldr	r3, .L195
 2285 06ea 4FF47A72 		mov	r2, #1000
 2286 06ee 1A60     		str	r2, [r3]
 2287 06f0 07E0     		b	.L148
 2288              	.L147:
 924:..\src/interruptions.c ****             else {
 925:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 2289              		.loc 1 925 0
 2290 06f2 294B     		ldr	r3, .L195
 2291 06f4 1B68     		ldr	r3, [r3]
 2292 06f6 13F57A7F 		cmn	r3, #1000
 2293 06fa 02DA     		bge	.L148
 926:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 2294              		.loc 1 926 0
 2295 06fc 264B     		ldr	r3, .L195
 2296 06fe 304A     		ldr	r2, .L195+40
 2297 0700 1A60     		str	r2, [r3]
 2298              	.L148:
 927:..\src/interruptions.c ****             }
 928:..\src/interruptions.c **** 
 929:..\src/interruptions.c ****             // Proportional
 930:..\src/interruptions.c ****             if (k_p != 0) 
 2299              		.loc 1 930 0
 2300 0702 FB6B     		ldr	r3, [r7, #60]
 2301 0704 002B     		cmp	r3, #0
 2302 0706 05D0     		beq	.L149
 931:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 2303              		.loc 1 931 0
 2304 0708 FB6B     		ldr	r3, [r7, #60]
 2305 070a 7A68     		ldr	r2, [r7, #4]
 2306 070c 02FB03F3 		mul	r3, r2, r3
 2307 0710 1B14     		asrs	r3, r3, #16
 2308 0712 7B65     		str	r3, [r7, #84]
 2309              	.L149:
 932:..\src/interruptions.c ****             
 933:..\src/interruptions.c **** 
 934:..\src/interruptions.c ****             // Integral
 935:..\src/interruptions.c ****             if (k_i != 0) 
 2310              		.loc 1 935 0
 2311 0714 BB6B     		ldr	r3, [r7, #56]
 2312 0716 002B     		cmp	r3, #0
 2313 0718 08D0     		beq	.L150
 936:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 2314              		.loc 1 936 0
 2315 071a 1F4B     		ldr	r3, .L195
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 59


 2316 071c 1B68     		ldr	r3, [r3]
 2317 071e BA6B     		ldr	r2, [r7, #56]
 2318 0720 02FB03F3 		mul	r3, r2, r3
 2319 0724 1B14     		asrs	r3, r3, #16
 2320 0726 7A6D     		ldr	r2, [r7, #84]
 2321 0728 1344     		add	r3, r3, r2
 2322 072a 7B65     		str	r3, [r7, #84]
 2323              	.L150:
 937:..\src/interruptions.c ****             
 938:..\src/interruptions.c **** 
 939:..\src/interruptions.c ****             // Derivative
 940:..\src/interruptions.c ****             if (k_d != 0) 
 2324              		.loc 1 940 0
 2325 072c 7B6B     		ldr	r3, [r7, #52]
 2326 072e 002B     		cmp	r3, #0
 2327 0730 0AD0     		beq	.L151
 941:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2328              		.loc 1 941 0
 2329 0732 1B4B     		ldr	r3, .L195+8
 2330 0734 1B68     		ldr	r3, [r3]
 2331 0736 7A68     		ldr	r2, [r7, #4]
 2332 0738 D31A     		subs	r3, r2, r3
 2333 073a 7A6B     		ldr	r2, [r7, #52]
 2334 073c 02FB03F3 		mul	r3, r2, r3
 2335 0740 1B14     		asrs	r3, r3, #16
 2336 0742 7A6D     		ldr	r2, [r7, #84]
 2337 0744 1344     		add	r3, r3, r2
 2338 0746 7B65     		str	r3, [r7, #84]
 2339              	.L151:
 942:..\src/interruptions.c ****             
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c ****             // Update measure
 945:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2340              		.loc 1 945 0
 2341 0748 154A     		ldr	r2, .L195+8
 2342 074a 7B68     		ldr	r3, [r7, #4]
 2343 074c 1360     		str	r3, [r2]
 946:..\src/interruptions.c **** 
 947:..\src/interruptions.c ****             if (pwm_input > 0)
 2344              		.loc 1 947 0
 2345 074e 7B6D     		ldr	r3, [r7, #84]
 2346 0750 002B     		cmp	r3, #0
 2347 0752 03DD     		ble	.L152
 948:..\src/interruptions.c ****                 motor_dir = TRUE;
 2348              		.loc 1 948 0
 2349 0754 134B     		ldr	r3, .L195+12
 2350 0756 0122     		movs	r2, #1
 2351 0758 1A70     		strb	r2, [r3]
 949:..\src/interruptions.c ****             else
 950:..\src/interruptions.c ****                 motor_dir = FALSE;
 951:..\src/interruptions.c **** 
 952:..\src/interruptions.c ****         break;
 2352              		.loc 1 952 0
 2353 075a B7E0     		b	.L125
 2354              	.L152:
 950:..\src/interruptions.c **** 
 2355              		.loc 1 950 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 60


 2356 075c 114B     		ldr	r3, .L195+12
 2357 075e 0022     		movs	r2, #0
 2358 0760 1A70     		strb	r2, [r3]
 2359              		.loc 1 952 0
 2360 0762 B3E0     		b	.L125
 2361              	.L129:
 953:..\src/interruptions.c **** 
 954:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 955:..\src/interruptions.c ****         case CONTROL_CURRENT:
 956:..\src/interruptions.c ****             if(g_ref[0].onoff && tension_valid) {
 2362              		.loc 1 956 0
 2363 0764 154B     		ldr	r3, .L195+36
 2364 0766 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2365 0768 002B     		cmp	r3, #0
 2366 076a 00F0AC80 		beq	.L189
 2367              		.loc 1 956 0 is_stmt 0 discriminator 1
 2368 076e 154B     		ldr	r3, .L195+44
 2369 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2370 0772 002B     		cmp	r3, #0
 2371 0774 00F0A780 		beq	.L189
 957:..\src/interruptions.c ****                 
 958:..\src/interruptions.c ****                 i_ref = g_ref[0].curr;
 2372              		.loc 1 958 0 is_stmt 1
 2373 0778 104B     		ldr	r3, .L195+36
 2374 077a 5B68     		ldr	r3, [r3, #4]
 2375 077c 3B65     		str	r3, [r7, #80]
 959:..\src/interruptions.c **** 
 960:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 2376              		.loc 1 960 0
 2377 077e 7B6C     		ldr	r3, [r7, #68]
 2378 0780 B3F95C30 		ldrsh	r3, [r3, #92]
 2379 0784 1A46     		mov	r2, r3
 2380 0786 3B6D     		ldr	r3, [r7, #80]
 2381 0788 9A42     		cmp	r2, r3
 2382 078a 1DDA     		bge	.L155
 961:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 2383              		.loc 1 961 0
 2384 078c 7B6C     		ldr	r3, [r7, #68]
 2385 078e B3F95C30 		ldrsh	r3, [r3, #92]
 2386 0792 3B65     		str	r3, [r7, #80]
 2387 0794 24E0     		b	.L156
 2388              	.L196:
 2389 0796 00BF     		.align	2
 2390              	.L195:
 2391 0798 90000000 		.word	pos_error_sum.10438
 2392 079c 800F05FD 		.word	-50000000
 2393 07a0 94000000 		.word	prev_pos_err.10440
 2394 07a4 98000000 		.word	motor_dir.10443
 2395 07a8 00000000 		.word	g_meas
 2396 07ac 9C000000 		.word	curr_error_sum.10439
 2397 07b0 A0860100 		.word	100000
 2398 07b4 6079FEFF 		.word	-100000
 2399 07b8 A0000000 		.word	prev_curr_err.10441
 2400 07bc 00000000 		.word	g_ref
 2401 07c0 18FCFFFF 		.word	-1000
 2402 07c4 00000000 		.word	tension_valid
 2403              	.L155:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 61


 962:..\src/interruptions.c ****                 else {
 963:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 2404              		.loc 1 963 0
 2405 07c8 7B6C     		ldr	r3, [r7, #68]
 2406 07ca B3F95C30 		ldrsh	r3, [r3, #92]
 2407 07ce 5A42     		negs	r2, r3
 2408 07d0 3B6D     		ldr	r3, [r7, #80]
 2409 07d2 9A42     		cmp	r2, r3
 2410 07d4 04DD     		ble	.L156
 964:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 2411              		.loc 1 964 0
 2412 07d6 7B6C     		ldr	r3, [r7, #68]
 2413 07d8 B3F95C30 		ldrsh	r3, [r3, #92]
 2414 07dc 5B42     		negs	r3, r3
 2415 07de 3B65     		str	r3, [r7, #80]
 2416              	.L156:
 965:..\src/interruptions.c ****                 }
 966:..\src/interruptions.c ****                 
 967:..\src/interruptions.c ****                 // current error
 968:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 2417              		.loc 1 968 0
 2418 07e0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2419 07e4 A74A     		ldr	r2, .L197
 2420 07e6 3421     		movs	r1, #52
 2421 07e8 01FB03F3 		mul	r3, r1, r3
 2422 07ec 1344     		add	r3, r3, r2
 2423 07ee 0C33     		adds	r3, r3, #12
 2424 07f0 1B68     		ldr	r3, [r3]
 2425 07f2 3A6D     		ldr	r2, [r7, #80]
 2426 07f4 D31A     		subs	r3, r2, r3
 2427 07f6 3B60     		str	r3, [r7]
 969:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2428              		.loc 1 969 0
 2429 07f8 A34B     		ldr	r3, .L197+4
 2430 07fa 1A68     		ldr	r2, [r3]
 2431 07fc 3B68     		ldr	r3, [r7]
 2432 07fe 1344     		add	r3, r3, r2
 2433 0800 A14A     		ldr	r2, .L197+4
 2434 0802 1360     		str	r3, [r2]
 970:..\src/interruptions.c ****                 
 971:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2435              		.loc 1 971 0
 2436 0804 A04B     		ldr	r3, .L197+4
 2437 0806 1B68     		ldr	r3, [r3]
 2438 0808 A04A     		ldr	r2, .L197+8
 2439 080a 9342     		cmp	r3, r2
 2440 080c 03DD     		ble	.L157
 972:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2441              		.loc 1 972 0
 2442 080e 9E4B     		ldr	r3, .L197+4
 2443 0810 9E4A     		ldr	r2, .L197+8
 2444 0812 1A60     		str	r2, [r3]
 2445 0814 07E0     		b	.L158
 2446              	.L157:
 973:..\src/interruptions.c ****                 else {
 974:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2447              		.loc 1 974 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 62


 2448 0816 9C4B     		ldr	r3, .L197+4
 2449 0818 1B68     		ldr	r3, [r3]
 2450 081a 9D4A     		ldr	r2, .L197+12
 2451 081c 9342     		cmp	r3, r2
 2452 081e 02DA     		bge	.L158
 975:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2453              		.loc 1 975 0
 2454 0820 994B     		ldr	r3, .L197+4
 2455 0822 9B4A     		ldr	r2, .L197+12
 2456 0824 1A60     		str	r2, [r3]
 2457              	.L158:
 976:..\src/interruptions.c ****                 }
 977:..\src/interruptions.c **** 
 978:..\src/interruptions.c ****                 pwm_input = 0;
 2458              		.loc 1 978 0
 2459 0826 0023     		movs	r3, #0
 2460 0828 7B65     		str	r3, [r7, #84]
 979:..\src/interruptions.c **** 
 980:..\src/interruptions.c ****                 // Proportional
 981:..\src/interruptions.c ****                 if (k_p_c != 0)
 2461              		.loc 1 981 0
 2462 082a 3B6B     		ldr	r3, [r7, #48]
 2463 082c 002B     		cmp	r3, #0
 2464 082e 07D0     		beq	.L159
 982:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2465              		.loc 1 982 0
 2466 0830 3B6B     		ldr	r3, [r7, #48]
 2467 0832 3A68     		ldr	r2, [r7]
 2468 0834 02FB03F3 		mul	r3, r2, r3
 2469 0838 1B14     		asrs	r3, r3, #16
 2470 083a 7A6D     		ldr	r2, [r7, #84]
 2471 083c 1344     		add	r3, r3, r2
 2472 083e 7B65     		str	r3, [r7, #84]
 2473              	.L159:
 983:..\src/interruptions.c **** 
 984:..\src/interruptions.c ****                 // Integral
 985:..\src/interruptions.c ****                 if (k_i_c != 0)
 2474              		.loc 1 985 0
 2475 0840 FB6A     		ldr	r3, [r7, #44]
 2476 0842 002B     		cmp	r3, #0
 2477 0844 08D0     		beq	.L160
 986:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2478              		.loc 1 986 0
 2479 0846 904B     		ldr	r3, .L197+4
 2480 0848 1B68     		ldr	r3, [r3]
 2481 084a FA6A     		ldr	r2, [r7, #44]
 2482 084c 02FB03F3 		mul	r3, r2, r3
 2483 0850 1B14     		asrs	r3, r3, #16
 2484 0852 7A6D     		ldr	r2, [r7, #84]
 2485 0854 1344     		add	r3, r3, r2
 2486 0856 7B65     		str	r3, [r7, #84]
 2487              	.L160:
 987:..\src/interruptions.c **** 
 988:..\src/interruptions.c ****                 // Derivative
 989:..\src/interruptions.c ****                 if (k_d_c != 0)
 2488              		.loc 1 989 0
 2489 0858 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 63


 2490 085a 002B     		cmp	r3, #0
 2491 085c 0AD0     		beq	.L161
 990:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2492              		.loc 1 990 0
 2493 085e 8D4B     		ldr	r3, .L197+16
 2494 0860 1B68     		ldr	r3, [r3]
 2495 0862 3A68     		ldr	r2, [r7]
 2496 0864 D31A     		subs	r3, r2, r3
 2497 0866 BA6A     		ldr	r2, [r7, #40]
 2498 0868 02FB03F3 		mul	r3, r2, r3
 2499 086c 1B14     		asrs	r3, r3, #16
 2500 086e 7A6D     		ldr	r2, [r7, #84]
 2501 0870 1344     		add	r3, r3, r2
 2502 0872 7B65     		str	r3, [r7, #84]
 2503              	.L161:
 991:..\src/interruptions.c ****                 
 992:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2504              		.loc 1 992 0
 2505 0874 874A     		ldr	r2, .L197+16
 2506 0876 3B68     		ldr	r3, [r7]
 2507 0878 1360     		str	r3, [r2]
 993:..\src/interruptions.c ****                 
 994:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2508              		.loc 1 994 0
 2509 087a 7B6D     		ldr	r3, [r7, #84]
 2510 087c 002B     		cmp	r3, #0
 2511 087e 03DB     		blt	.L162
 995:..\src/interruptions.c ****                     motor_dir = TRUE;
 2512              		.loc 1 995 0
 2513 0880 854B     		ldr	r3, .L197+20
 2514 0882 0122     		movs	r2, #1
 2515 0884 1A70     		strb	r2, [r3]
 996:..\src/interruptions.c ****                 else
 997:..\src/interruptions.c ****                     motor_dir = FALSE;
 998:..\src/interruptions.c ****             }
 999:..\src/interruptions.c ****         break;
 2516              		.loc 1 999 0
 2517 0886 1EE0     		b	.L189
 2518              	.L162:
 997:..\src/interruptions.c ****             }
 2519              		.loc 1 997 0
 2520 0888 834B     		ldr	r3, .L197+20
 2521 088a 0022     		movs	r2, #0
 2522 088c 1A70     		strb	r2, [r3]
 2523              		.loc 1 999 0
 2524 088e 1AE0     		b	.L189
 2525              	.L128:
1000:..\src/interruptions.c ****         
1001:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1002:..\src/interruptions.c ****         case CONTROL_PWM:
1003:..\src/interruptions.c **** 
1004:..\src/interruptions.c ****             pwm_input = g_ref[0].pwm;
 2526              		.loc 1 1004 0
 2527 0890 824B     		ldr	r3, .L197+24
 2528 0892 9B68     		ldr	r3, [r3, #8]
 2529 0894 7B65     		str	r3, [r7, #84]
1005:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 64


1006:..\src/interruptions.c ****             if (pwm_input > 0) 
 2530              		.loc 1 1006 0
 2531 0896 7B6D     		ldr	r3, [r7, #84]
 2532 0898 002B     		cmp	r3, #0
 2533 089a 03DD     		ble	.L163
1007:..\src/interruptions.c ****                 motor_dir = TRUE;
 2534              		.loc 1 1007 0
 2535 089c 7E4B     		ldr	r3, .L197+20
 2536 089e 0122     		movs	r2, #1
 2537 08a0 1A70     		strb	r2, [r3]
 2538 08a2 02E0     		b	.L164
 2539              	.L163:
1008:..\src/interruptions.c ****             else 
1009:..\src/interruptions.c ****                 motor_dir = FALSE;
 2540              		.loc 1 1009 0
 2541 08a4 7C4B     		ldr	r3, .L197+20
 2542 08a6 0022     		movs	r2, #0
 2543 08a8 1A70     		strb	r2, [r3]
 2544              	.L164:
1010:..\src/interruptions.c ****             
1011:..\src/interruptions.c **** 
1012:..\src/interruptions.c ****             // pwm_input saturation
1013:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2545              		.loc 1 1013 0
 2546 08aa 7B6D     		ldr	r3, [r7, #84]
 2547 08ac 13F1640F 		cmn	r3, #100
 2548 08b0 03DA     		bge	.L165
1014:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2549              		.loc 1 1014 0
 2550 08b2 6FF06303 		mvn	r3, #99
 2551 08b6 7B65     		str	r3, [r7, #84]
1015:..\src/interruptions.c ****             else {
1016:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1017:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1018:..\src/interruptions.c ****         	}
1019:..\src/interruptions.c **** 
1020:..\src/interruptions.c ****         break;
 2552              		.loc 1 1020 0
 2553 08b8 07E0     		b	.L190
 2554              	.L165:
1016:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2555              		.loc 1 1016 0
 2556 08ba 7B6D     		ldr	r3, [r7, #84]
 2557 08bc 642B     		cmp	r3, #100
 2558 08be 04DD     		ble	.L190
1017:..\src/interruptions.c ****         	}
 2559              		.loc 1 1017 0
 2560 08c0 6423     		movs	r3, #100
 2561 08c2 7B65     		str	r3, [r7, #84]
 2562              		.loc 1 1020 0
 2563 08c4 01E0     		b	.L190
 2564              	.L189:
 999:..\src/interruptions.c ****         
 2565              		.loc 1 999 0
 2566 08c6 00BF     		nop
 2567 08c8 00E0     		b	.L125
 2568              	.L190:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 65


 2569              		.loc 1 1020 0
 2570 08ca 00BF     		nop
 2571              	.L125:
1021:..\src/interruptions.c ****             
1022:..\src/interruptions.c ****     }
1023:..\src/interruptions.c **** 
1024:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2572              		.loc 1 1026 0
 2573 08cc 7B6D     		ldr	r3, [r7, #84]
 2574 08ce 642B     		cmp	r3, #100
 2575 08d0 01DD     		ble	.L167
1027:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2576              		.loc 1 1027 0
 2577 08d2 6423     		movs	r3, #100
 2578 08d4 7B65     		str	r3, [r7, #84]
 2579              	.L167:
1028:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2580              		.loc 1 1028 0
 2581 08d6 7B6D     		ldr	r3, [r7, #84]
 2582 08d8 13F1640F 		cmn	r3, #100
 2583 08dc 02DA     		bge	.L168
1029:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2584              		.loc 1 1029 0
 2585 08de 6FF06303 		mvn	r3, #99
 2586 08e2 7B65     		str	r3, [r7, #84]
 2587              	.L168:
1030:..\src/interruptions.c **** 
1031:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 2588              		.loc 1 1031 0
 2589 08e4 7B6C     		ldr	r3, [r7, #68]
 2590 08e6 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2591 08ea 012B     		cmp	r3, #1
 2592 08ec 0DD0     		beq	.L169
1032:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 2593              		.loc 1 1032 0
 2594 08ee 7B6D     		ldr	r3, [r7, #84]
 2595 08f0 9B02     		lsls	r3, r3, #10
 2596 08f2 6B4A     		ldr	r2, .L197+28
 2597 08f4 82FB0312 		smull	r1, r2, r2, r3
 2598 08f8 5211     		asrs	r2, r2, #5
 2599 08fa DB17     		asrs	r3, r3, #31
 2600 08fc D31A     		subs	r3, r2, r3
 2601 08fe 694A     		ldr	r2, .L197+32
 2602 0900 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2603 0902 02FB03F3 		mul	r3, r2, r3
 2604 0906 9B12     		asrs	r3, r3, #10
 2605 0908 7B65     		str	r3, [r7, #84]
 2606              	.L169:
1033:..\src/interruptions.c ****  
1034:..\src/interruptions.c ****     //// RATE LIMITER ////
1035:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 2607              		.loc 1 1035 0
 2608 090a 674B     		ldr	r3, .L197+36
 2609 090c 1B68     		ldr	r3, [r3]
 2610 090e 7A6D     		ldr	r2, [r7, #84]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 66


 2611 0910 D31A     		subs	r3, r2, r3
 2612 0912 7A6C     		ldr	r2, [r7, #68]
 2613 0914 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2614 0918 9342     		cmp	r3, r2
 2615 091a 08DD     		ble	.L170
1036:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 2616              		.loc 1 1036 0
 2617 091c 7B6C     		ldr	r3, [r7, #68]
 2618 091e 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2619 0922 1A46     		mov	r2, r3
 2620 0924 604B     		ldr	r3, .L197+36
 2621 0926 1B68     		ldr	r3, [r3]
 2622 0928 1344     		add	r3, r3, r2
 2623 092a 7B65     		str	r3, [r7, #84]
 2624 092c 10E0     		b	.L171
 2625              	.L170:
1037:..\src/interruptions.c ****     }
1038:..\src/interruptions.c ****     else {
1039:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 2626              		.loc 1 1039 0
 2627 092e 5E4B     		ldr	r3, .L197+36
 2628 0930 1B68     		ldr	r3, [r3]
 2629 0932 7A6D     		ldr	r2, [r7, #84]
 2630 0934 D21A     		subs	r2, r2, r3
 2631 0936 7B6C     		ldr	r3, [r7, #68]
 2632 0938 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2633 093c 5B42     		negs	r3, r3
 2634 093e 9A42     		cmp	r2, r3
 2635 0940 06DA     		bge	.L171
1040:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 2636              		.loc 1 1040 0
 2637 0942 594B     		ldr	r3, .L197+36
 2638 0944 1B68     		ldr	r3, [r3]
 2639 0946 7A6C     		ldr	r2, [r7, #68]
 2640 0948 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2641 094c 9B1A     		subs	r3, r3, r2
 2642 094e 7B65     		str	r3, [r7, #84]
 2643              	.L171:
1041:..\src/interruptions.c ****     }
1042:..\src/interruptions.c ****     
1043:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2644              		.loc 1 1043 0
 2645 0950 7B6D     		ldr	r3, [r7, #84]
 2646 0952 642B     		cmp	r3, #100
 2647 0954 01DD     		ble	.L172
1044:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2648              		.loc 1 1044 0
 2649 0956 6423     		movs	r3, #100
 2650 0958 7B65     		str	r3, [r7, #84]
 2651              	.L172:
1045:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2652              		.loc 1 1045 0
 2653 095a 7B6D     		ldr	r3, [r7, #84]
 2654 095c 13F1640F 		cmn	r3, #100
 2655 0960 02DA     		bge	.L173
1046:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2656              		.loc 1 1046 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 67


 2657 0962 6FF06303 		mvn	r3, #99
 2658 0966 7B65     		str	r3, [r7, #84]
 2659              	.L173:
1047:..\src/interruptions.c ****     
1048:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2660              		.loc 1 1048 0
 2661 0968 4F4A     		ldr	r2, .L197+36
 2662 096a 7B6D     		ldr	r3, [r7, #84]
 2663 096c 1360     		str	r3, [r2]
1049:..\src/interruptions.c **** 	
1050:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2664              		.loc 1 1050 0
 2665 096e 7B6D     		ldr	r3, [r7, #84]
 2666 0970 002B     		cmp	r3, #0
 2667 0972 01DB     		blt	.L174
 2668              		.loc 1 1050 0 is_stmt 0 discriminator 1
 2669 0974 0122     		movs	r2, #1
 2670 0976 01E0     		b	.L175
 2671              	.L174:
 2672              		.loc 1 1050 0 discriminator 2
 2673 0978 4FF0FF32 		mov	r2, #-1
 2674              	.L175:
 2675              		.loc 1 1050 0 discriminator 4
 2676 097c 4B4B     		ldr	r3, .L197+40
 2677 097e 1A70     		strb	r2, [r3]
1051:..\src/interruptions.c ****     
1052:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 2678              		.loc 1 1052 0 is_stmt 1 discriminator 4
 2679 0980 7B6C     		ldr	r3, [r7, #68]
 2680 0982 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 2681 0986 012B     		cmp	r3, #1
 2682 0988 40F09F80 		bne	.L176
1053:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1054:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 2683              		.loc 1 1054 0
 2684 098c 7B6C     		ldr	r3, [r7, #68]
 2685 098e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2686 0992 012B     		cmp	r3, #1
 2687 0994 00F09680 		beq	.L177
 2688              		.loc 1 1054 0 is_stmt 0 discriminator 1
 2689 0998 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2690 099c 444A     		ldr	r2, .L197+44
 2691 099e 3421     		movs	r1, #52
 2692 09a0 01FB03F3 		mul	r3, r1, r3
 2693 09a4 1344     		add	r3, r3, r2
 2694 09a6 1A68     		ldr	r2, [r3]
 2695 09a8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2696 09ac 3549     		ldr	r1, .L197
 2697 09ae 3420     		movs	r0, #52
 2698 09b0 00FB03F3 		mul	r3, r0, r3
 2699 09b4 0B44     		add	r3, r3, r1
 2700 09b6 1B68     		ldr	r3, [r3]
 2701 09b8 D31A     		subs	r3, r2, r3
 2702 09ba 312B     		cmp	r3, #49
 2703 09bc 00F38280 		bgt	.L177
1055:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2704              		.loc 1 1055 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 68


 2705 09c0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2706 09c4 3A4A     		ldr	r2, .L197+44
 2707 09c6 3421     		movs	r1, #52
 2708 09c8 01FB03F3 		mul	r3, r1, r3
 2709 09cc 1344     		add	r3, r3, r2
 2710 09ce 1A68     		ldr	r2, [r3]
 2711 09d0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2712 09d4 2B49     		ldr	r1, .L197
 2713 09d6 3420     		movs	r0, #52
 2714 09d8 00FB03F3 		mul	r3, r0, r3
 2715 09dc 0B44     		add	r3, r3, r1
 2716 09de 1B68     		ldr	r3, [r3]
 2717 09e0 D31A     		subs	r3, r2, r3
1054:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2718              		.loc 1 1054 0 discriminator 2
 2719 09e2 13F1310F 		cmn	r3, #49
 2720 09e6 6DDB     		blt	.L177
1056:..\src/interruptions.c ****             ((g_refOld[0].pos - g_ref[0].pos) < 100 && (g_refOld[0].pos - g_ref[0].pos) > -100) ) {
 2721              		.loc 1 1056 0
 2722 09e8 324B     		ldr	r3, .L197+48
 2723 09ea 1A68     		ldr	r2, [r3]
 2724 09ec 2B4B     		ldr	r3, .L197+24
 2725 09ee 1B68     		ldr	r3, [r3]
 2726 09f0 D31A     		subs	r3, r2, r3
1055:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2727              		.loc 1 1055 0
 2728 09f2 632B     		cmp	r3, #99
 2729 09f4 66DC     		bgt	.L177
 2730              		.loc 1 1056 0
 2731 09f6 2F4B     		ldr	r3, .L197+48
 2732 09f8 1A68     		ldr	r2, [r3]
 2733 09fa 284B     		ldr	r3, .L197+24
 2734 09fc 1B68     		ldr	r3, [r3]
 2735 09fe D31A     		subs	r3, r2, r3
 2736 0a00 13F1630F 		cmn	r3, #99
 2737 0a04 5EDB     		blt	.L177
1057:..\src/interruptions.c ****             position_counter++;
 2738              		.loc 1 1057 0
 2739 0a06 2C4B     		ldr	r3, .L197+52
 2740 0a08 1B68     		ldr	r3, [r3]
 2741 0a0a 0133     		adds	r3, r3, #1
 2742 0a0c 2A4A     		ldr	r2, .L197+52
 2743 0a0e 1360     		str	r3, [r2]
1058:..\src/interruptions.c ****             
1059:..\src/interruptions.c ****             if (position_counter >= 250) { 
 2744              		.loc 1 1059 0
 2745 0a10 294B     		ldr	r3, .L197+52
 2746 0a12 1B68     		ldr	r3, [r3]
 2747 0a14 F92B     		cmp	r3, #249
 2748 0a16 58D9     		bls	.L176
1060:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2749              		.loc 1 1060 0
 2750 0a18 7B6C     		ldr	r3, [r7, #68]
 2751 0a1a 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2752 0a1e 002B     		cmp	r3, #0
 2753 0a20 0DD1     		bne	.L179
 2754              		.loc 1 1060 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 69


 2755 0a22 264B     		ldr	r3, .L197+56
 2756 0a24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2757 0a26 002B     		cmp	r3, #0
 2758 0a28 09D1     		bne	.L179
1061:..\src/interruptions.c ****                     g_refNew[0].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when USB input 
 2759              		.loc 1 1061 0 is_stmt 1
 2760 0a2a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2761 0a2e 154A     		ldr	r2, .L197
 2762 0a30 3421     		movs	r1, #52
 2763 0a32 01FB03F3 		mul	r3, r1, r3
 2764 0a36 1344     		add	r3, r3, r2
 2765 0a38 1B68     		ldr	r3, [r3]
 2766 0a3a 214A     		ldr	r2, .L197+60
 2767 0a3c 1360     		str	r3, [r2]
 2768              	.L179:
1062:..\src/interruptions.c ****                 }
1063:..\src/interruptions.c ****                 g_ref[0].pos = g_meas[SH_ENC_L].pos[0];
 2769              		.loc 1 1063 0
 2770 0a3e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2771 0a42 104A     		ldr	r2, .L197
 2772 0a44 3421     		movs	r1, #52
 2773 0a46 01FB03F3 		mul	r3, r1, r3
 2774 0a4a 1344     		add	r3, r3, r2
 2775 0a4c 1B68     		ldr	r3, [r3]
 2776 0a4e 134A     		ldr	r2, .L197+24
 2777 0a50 1360     		str	r3, [r2]
1064:..\src/interruptions.c ****                 
1065:..\src/interruptions.c ****                 if (position_counter == 250){
 2778              		.loc 1 1065 0
 2779 0a52 194B     		ldr	r3, .L197+52
 2780 0a54 1B68     		ldr	r3, [r3]
 2781 0a56 FA2B     		cmp	r3, #250
 2782 0a58 11D1     		bne	.L180
1066:..\src/interruptions.c ****                     // To do only once
1067:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 2783              		.loc 1 1067 0
 2784 0a5a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2785 0a5e 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2786 0a62 0849     		ldr	r1, .L197
 2787 0a64 3420     		movs	r0, #52
 2788 0a66 00FB02F2 		mul	r2, r0, r2
 2789 0a6a 0A44     		add	r2, r2, r1
 2790 0a6c 0C32     		adds	r2, r2, #12
 2791 0a6e 1268     		ldr	r2, [r2]
 2792 0a70 0449     		ldr	r1, .L197
 2793 0a72 3420     		movs	r0, #52
 2794 0a74 00FB03F3 		mul	r3, r0, r3
 2795 0a78 0B44     		add	r3, r3, r1
 2796 0a7a 1433     		adds	r3, r3, #20
 2797 0a7c 1A60     		str	r2, [r3]
 2798              	.L180:
1068:..\src/interruptions.c ****                 }
1069:..\src/interruptions.c ****                 pwm_input = 0;            
 2799              		.loc 1 1069 0
 2800 0a7e 0023     		movs	r3, #0
 2801 0a80 7B65     		str	r3, [r7, #84]
1059:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 70


 2802              		.loc 1 1059 0
 2803 0a82 22E0     		b	.L176
 2804              	.L198:
 2805              		.align	2
 2806              	.L197:
 2807 0a84 00000000 		.word	g_meas
 2808 0a88 9C000000 		.word	curr_error_sum.10439
 2809 0a8c A0860100 		.word	100000
 2810 0a90 6079FEFF 		.word	-100000
 2811 0a94 A0000000 		.word	prev_curr_err.10441
 2812 0a98 98000000 		.word	motor_dir.10443
 2813 0a9c 00000000 		.word	g_ref
 2814 0aa0 1F85EB51 		.word	1374389535
 2815 0aa4 00000000 		.word	dev_pwm_limit
 2816 0aa8 A4000000 		.word	prev_pwm.10442
 2817 0aac 00000000 		.word	pwm_sign
 2818 0ab0 00000000 		.word	g_measOld
 2819 0ab4 00000000 		.word	g_refOld
 2820 0ab8 A8000000 		.word	position_counter.10444
 2821 0abc 00000000 		.word	change_ext_ref_flag
 2822 0ac0 00000000 		.word	g_refNew
 2823              	.L177:
1070:..\src/interruptions.c ****             }
1071:..\src/interruptions.c ****         }
1072:..\src/interruptions.c ****         else {
1073:..\src/interruptions.c ****             position_counter = 0;
 2824              		.loc 1 1073 0
 2825 0ac4 0C4B     		ldr	r3, .L199
 2826 0ac6 0022     		movs	r2, #0
 2827 0ac8 1A60     		str	r2, [r3]
 2828              	.L176:
1074:..\src/interruptions.c ****         }
1075:..\src/interruptions.c ****     }
1076:..\src/interruptions.c ****     
1077:..\src/interruptions.c ****     if (motor_dir)
 2829              		.loc 1 1077 0
 2830 0aca 0C4B     		ldr	r3, .L199+4
 2831 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2832 0ace 002B     		cmp	r3, #0
 2833 0ad0 03D0     		beq	.L181
1078:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 2834              		.loc 1 1078 0
 2835 0ad2 0120     		movs	r0, #1
 2836 0ad4 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2837 0ad8 02E0     		b	.L182
 2838              	.L181:
1079:..\src/interruptions.c ****     else
1080:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 2839              		.loc 1 1080 0
 2840 0ada 0020     		movs	r0, #0
 2841 0adc FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2842              	.L182:
1081:..\src/interruptions.c **** 
1082:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 2843              		.loc 1 1082 0
 2844 0ae0 7B6D     		ldr	r3, [r7, #84]
 2845 0ae2 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 71


 2846 0ae4 B8BF     		it	lt
 2847 0ae6 5B42     		rsblt	r3, r3, #0
 2848 0ae8 DBB2     		uxtb	r3, r3
 2849 0aea 1846     		mov	r0, r3
 2850 0aec FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1083:..\src/interruptions.c **** }
 2851              		.loc 1 1083 0
 2852 0af0 00BF     		nop
 2853 0af2 5837     		adds	r7, r7, #88
 2854              		.cfi_def_cfa_offset 8
 2855 0af4 BD46     		mov	sp, r7
 2856              		.cfi_def_cfa_register 13
 2857              		@ sp needed
 2858 0af6 80BD     		pop	{r7, pc}
 2859              	.L200:
 2860              		.align	2
 2861              	.L199:
 2862 0af8 A8000000 		.word	position_counter.10444
 2863 0afc 98000000 		.word	motor_dir.10443
 2864              		.cfi_endproc
 2865              	.LFE68:
 2866              		.size	motor_control_SH, .-motor_control_SH
 2867              		.section	.text.motor_control_generic,"ax",%progbits
 2868              		.align	2
 2869              		.global	motor_control_generic
 2870              		.thumb
 2871              		.thumb_func
 2872              		.type	motor_control_generic, %function
 2873              	motor_control_generic:
 2874              	.LFB69:
1084:..\src/interruptions.c **** 
1085:..\src/interruptions.c **** //==============================================================================
1086:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1087:..\src/interruptions.c **** //==============================================================================
1088:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 2875              		.loc 1 1088 0
 2876              		.cfi_startproc
 2877              		@ args = 0, pretend = 0, frame = 96
 2878              		@ frame_needed = 1, uses_anonymous_args = 0
 2879 0000 90B5     		push	{r4, r7, lr}
 2880              		.cfi_def_cfa_offset 12
 2881              		.cfi_offset 4, -12
 2882              		.cfi_offset 7, -8
 2883              		.cfi_offset 14, -4
 2884 0002 99B0     		sub	sp, sp, #100
 2885              		.cfi_def_cfa_offset 112
 2886 0004 00AF     		add	r7, sp, #0
 2887              		.cfi_def_cfa_register 7
 2888 0006 0346     		mov	r3, r0
 2889 0008 FB71     		strb	r3, [r7, #7]
1089:..\src/interruptions.c ****     
1090:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2890              		.loc 1 1090 0
 2891 000a 0023     		movs	r3, #0
 2892 000c FB65     		str	r3, [r7, #92]
1091:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1092:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 72


1093:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1094:..\src/interruptions.c ****     int32 CYDATA handle_value;
1095:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
1096:..\src/interruptions.c **** 
1097:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 2893              		.loc 1 1097 0
 2894 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2895 0010 1346     		mov	r3, r2
 2896 0012 DB00     		lsls	r3, r3, #3
 2897 0014 9B1A     		subs	r3, r3, r2
 2898 0016 1B01     		lsls	r3, r3, #4
 2899 0018 B033     		adds	r3, r3, #176
 2900 001a A94A     		ldr	r2, .L319
 2901 001c 1344     		add	r3, r3, r2
 2902 001e 3B65     		str	r3, [r7, #80]
1098:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 2903              		.loc 1 1098 0
 2904 0020 3B6D     		ldr	r3, [r7, #80]
 2905 0022 93F86030 		ldrb	r3, [r3, #96]
 2906 0026 87F84F30 		strb	r3, [r7, #79]
1099:..\src/interruptions.c ****     
1100:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 2907              		.loc 1 1100 0
 2908 002a 3B6D     		ldr	r3, [r7, #80]
 2909 002c 1B68     		ldr	r3, [r3]
 2910 002e BB64     		str	r3, [r7, #72]
1101:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 2911              		.loc 1 1101 0
 2912 0030 3B6D     		ldr	r3, [r7, #80]
 2913 0032 5B68     		ldr	r3, [r3, #4]
 2914 0034 7B64     		str	r3, [r7, #68]
1102:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 2915              		.loc 1 1102 0
 2916 0036 3B6D     		ldr	r3, [r7, #80]
 2917 0038 9B68     		ldr	r3, [r3, #8]
 2918 003a 3B64     		str	r3, [r7, #64]
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 2919              		.loc 1 1104 0
 2920 003c 3B6D     		ldr	r3, [r7, #80]
 2921 003e DB68     		ldr	r3, [r3, #12]
 2922 0040 FB63     		str	r3, [r7, #60]
1105:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 2923              		.loc 1 1105 0
 2924 0042 3B6D     		ldr	r3, [r7, #80]
 2925 0044 1B69     		ldr	r3, [r3, #16]
 2926 0046 BB63     		str	r3, [r7, #56]
1106:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 2927              		.loc 1 1106 0
 2928 0048 3B6D     		ldr	r3, [r7, #80]
 2929 004a 5B69     		ldr	r3, [r3, #20]
 2930 004c 7B63     		str	r3, [r7, #52]
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 2931              		.loc 1 1108 0
 2932 004e 3B6D     		ldr	r3, [r7, #80]
 2933 0050 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 73


 2934 0052 3B63     		str	r3, [r7, #48]
1109:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 2935              		.loc 1 1109 0
 2936 0054 3B6D     		ldr	r3, [r7, #80]
 2937 0056 DB69     		ldr	r3, [r3, #28]
 2938 0058 FB62     		str	r3, [r7, #44]
1110:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 2939              		.loc 1 1110 0
 2940 005a 3B6D     		ldr	r3, [r7, #80]
 2941 005c 1B6A     		ldr	r3, [r3, #32]
 2942 005e BB62     		str	r3, [r7, #40]
1111:..\src/interruptions.c ****     
1112:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 2943              		.loc 1 1112 0
 2944 0060 3B6D     		ldr	r3, [r7, #80]
 2945 0062 5B6A     		ldr	r3, [r3, #36]
 2946 0064 7B62     		str	r3, [r7, #36]
1113:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 2947              		.loc 1 1113 0
 2948 0066 3B6D     		ldr	r3, [r7, #80]
 2949 0068 9B6A     		ldr	r3, [r3, #40]
 2950 006a 3B62     		str	r3, [r7, #32]
1114:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 2951              		.loc 1 1114 0
 2952 006c 3B6D     		ldr	r3, [r7, #80]
 2953 006e DB6A     		ldr	r3, [r3, #44]
 2954 0070 FB61     		str	r3, [r7, #28]
1115:..\src/interruptions.c **** 
1116:..\src/interruptions.c ****     // Static Variables
1117:..\src/interruptions.c **** 
1118:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1119:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1120:..\src/interruptions.c ****     
1121:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1122:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1123:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1124:..\src/interruptions.c **** 
1125:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1126:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1127:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
1128:..\src/interruptions.c ****                                                         // 1 EMG 1
1129:..\src/interruptions.c ****                                                         // 2 EMG 2
1130:..\src/interruptions.c ****                                                         // wait for both to get down
1131:..\src/interruptions.c ****     
1132:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 2955              		.loc 1 1132 0
 2956 0072 944B     		ldr	r3, .L319+4
 2957 0074 1B68     		ldr	r3, [r3]
 2958 0076 924A     		ldr	r2, .L319
 2959 0078 B2F8F021 		ldrh	r2, [r2, #496]
 2960 007c 9B1A     		subs	r3, r3, r2
 2961 007e BB61     		str	r3, [r7, #24]
1133:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 2962              		.loc 1 1133 0
 2963 0080 904B     		ldr	r3, .L319+4
 2964 0082 5B68     		ldr	r3, [r3, #4]
 2965 0084 8E4A     		ldr	r2, .L319
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 74


 2966 0086 B2F8F221 		ldrh	r2, [r2, #498]
 2967 008a 9B1A     		subs	r3, r3, r2
 2968 008c 7B61     		str	r3, [r7, #20]
1134:..\src/interruptions.c **** 
1135:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
1136:..\src/interruptions.c ****     switch(MOT->input_mode) {
 2969              		.loc 1 1136 0
 2970 008e 3B6D     		ldr	r3, [r7, #80]
 2971 0090 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2972 0094 013B     		subs	r3, r3, #1
 2973 0096 042B     		cmp	r3, #4
 2974 0098 00F20482 		bhi	.L310
 2975 009c 01A2     		adr	r2, .L204
 2976 009e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2977 00a2 00BF     		.p2align 2
 2978              	.L204:
 2979 00a4 B9000000 		.word	.L203+1
 2980 00a8 C5010000 		.word	.L205+1
 2981 00ac 0B020000 		.word	.L206+1
 2982 00b0 97020000 		.word	.L207+1
 2983 00b4 9D030000 		.word	.L208+1
 2984              		.p2align 1
 2985              	.L203:
1137:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
1138:..\src/interruptions.c **** 
1139:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
1140:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
1141:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 2986              		.loc 1 1141 0
 2987 00b8 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 2988 00bc 8049     		ldr	r1, .L319
 2989 00be 1346     		mov	r3, r2
 2990 00c0 5B00     		lsls	r3, r3, #1
 2991 00c2 1344     		add	r3, r3, r2
 2992 00c4 1B01     		lsls	r3, r3, #4
 2993 00c6 0B44     		add	r3, r3, r1
 2994 00c8 03F5D873 		add	r3, r3, #432
 2995 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2996 00ce 002B     		cmp	r3, #0
 2997 00d0 1BD0     		beq	.L209
1142:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 2998              		.loc 1 1142 0
 2999 00d2 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3000 00d6 7C4A     		ldr	r2, .L319+8
 3001 00d8 3421     		movs	r1, #52
 3002 00da 01FB03F3 		mul	r3, r1, r3
 3003 00de 1344     		add	r3, r3, r2
 3004 00e0 0833     		adds	r3, r3, #8
 3005 00e2 1968     		ldr	r1, [r3]
 3006 00e4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 3007 00e8 7548     		ldr	r0, .L319
 3008 00ea 1346     		mov	r3, r2
 3009 00ec 5B00     		lsls	r3, r3, #1
 3010 00ee 1344     		add	r3, r3, r2
 3011 00f0 1B01     		lsls	r3, r3, #4
 3012 00f2 0344     		add	r3, r3, r0
 3013 00f4 03F5DA73 		add	r3, r3, #436
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 75


 3014 00f8 93F90030 		ldrsb	r3, [r3]
 3015 00fc 03FB01F2 		mul	r2, r3, r1
 3016 0100 3B6D     		ldr	r3, [r7, #80]
 3017 0102 5B6B     		ldr	r3, [r3, #52]
 3018 0104 1344     		add	r3, r3, r2
 3019 0106 7B65     		str	r3, [r7, #84]
 3020 0108 1AE0     		b	.L210
 3021              	.L209:
1143:..\src/interruptions.c ****             else
1144:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 3022              		.loc 1 1144 0
 3023 010a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3024 010e 6E4A     		ldr	r2, .L319+8
 3025 0110 3421     		movs	r1, #52
 3026 0112 01FB03F3 		mul	r3, r1, r3
 3027 0116 1344     		add	r3, r3, r2
 3028 0118 0433     		adds	r3, r3, #4
 3029 011a 1968     		ldr	r1, [r3]
 3030 011c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 3031 0120 6748     		ldr	r0, .L319
 3032 0122 1346     		mov	r3, r2
 3033 0124 5B00     		lsls	r3, r3, #1
 3034 0126 1344     		add	r3, r3, r2
 3035 0128 1B01     		lsls	r3, r3, #4
 3036 012a 0344     		add	r3, r3, r0
 3037 012c 03F5DA73 		add	r3, r3, #436
 3038 0130 93F90030 		ldrsb	r3, [r3]
 3039 0134 03FB01F2 		mul	r2, r3, r1
 3040 0138 3B6D     		ldr	r3, [r7, #80]
 3041 013a 5B6B     		ldr	r3, [r3, #52]
 3042 013c 1344     		add	r3, r3, r2
 3043 013e 7B65     		str	r3, [r7, #84]
 3044              	.L210:
1145:..\src/interruptions.c ****             
1146:..\src/interruptions.c **** 
1147:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
1148:..\src/interruptions.c ****             if (((handle_value - g_refOld[idx].pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0
 3045              		.loc 1 1148 0
 3046 0140 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3047 0142 624A     		ldr	r2, .L319+12
 3048 0144 1B01     		lsls	r3, r3, #4
 3049 0146 1344     		add	r3, r3, r2
 3050 0148 1B68     		ldr	r3, [r3]
 3051 014a 7A6D     		ldr	r2, [r7, #84]
 3052 014c D21A     		subs	r2, r2, r3
 3053 014e 3B6D     		ldr	r3, [r7, #80]
 3054 0150 1B6C     		ldr	r3, [r3, #64]
 3055 0152 9A42     		cmp	r2, r3
 3056 0154 11DD     		ble	.L211
 3057              		.loc 1 1148 0 is_stmt 0 discriminator 1
 3058 0156 3B6D     		ldr	r3, [r7, #80]
 3059 0158 1B6C     		ldr	r3, [r3, #64]
 3060 015a 002B     		cmp	r3, #0
 3061 015c 0DD0     		beq	.L211
1149:..\src/interruptions.c ****                 g_ref[idx].pos += MOT->max_step_pos;
 3062              		.loc 1 1149 0 is_stmt 1
 3063 015e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 76


 3064 0160 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3065 0162 5B49     		ldr	r1, .L319+16
 3066 0164 1201     		lsls	r2, r2, #4
 3067 0166 0A44     		add	r2, r2, r1
 3068 0168 1168     		ldr	r1, [r2]
 3069 016a 3A6D     		ldr	r2, [r7, #80]
 3070 016c 126C     		ldr	r2, [r2, #64]
 3071 016e 0A44     		add	r2, r2, r1
 3072 0170 5749     		ldr	r1, .L319+16
 3073 0172 1B01     		lsls	r3, r3, #4
 3074 0174 0B44     		add	r3, r3, r1
 3075 0176 1A60     		str	r2, [r3]
 3076 0178 23E0     		b	.L212
 3077              	.L211:
1150:..\src/interruptions.c ****             else {
1151:..\src/interruptions.c ****                 if (((handle_value - g_refOld[idx].pos) < MOT->max_step_neg) && (MOT->max_step_neg 
 3078              		.loc 1 1151 0
 3079 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3080 017c 534A     		ldr	r2, .L319+12
 3081 017e 1B01     		lsls	r3, r3, #4
 3082 0180 1344     		add	r3, r3, r2
 3083 0182 1B68     		ldr	r3, [r3]
 3084 0184 7A6D     		ldr	r2, [r7, #84]
 3085 0186 D21A     		subs	r2, r2, r3
 3086 0188 3B6D     		ldr	r3, [r7, #80]
 3087 018a DB6B     		ldr	r3, [r3, #60]
 3088 018c 9A42     		cmp	r2, r3
 3089 018e 11DA     		bge	.L213
 3090              		.loc 1 1151 0 is_stmt 0 discriminator 1
 3091 0190 3B6D     		ldr	r3, [r7, #80]
 3092 0192 DB6B     		ldr	r3, [r3, #60]
 3093 0194 002B     		cmp	r3, #0
 3094 0196 0DD0     		beq	.L213
1152:..\src/interruptions.c ****                     g_ref[idx].pos += MOT->max_step_neg;
 3095              		.loc 1 1152 0 is_stmt 1
 3096 0198 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3097 019a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3098 019c 4C49     		ldr	r1, .L319+16
 3099 019e 1201     		lsls	r2, r2, #4
 3100 01a0 0A44     		add	r2, r2, r1
 3101 01a2 1168     		ldr	r1, [r2]
 3102 01a4 3A6D     		ldr	r2, [r7, #80]
 3103 01a6 D26B     		ldr	r2, [r2, #60]
 3104 01a8 0A44     		add	r2, r2, r1
 3105 01aa 4949     		ldr	r1, .L319+16
 3106 01ac 1B01     		lsls	r3, r3, #4
 3107 01ae 0B44     		add	r3, r3, r1
 3108 01b0 1A60     		str	r2, [r3]
 3109 01b2 06E0     		b	.L212
 3110              	.L213:
1153:..\src/interruptions.c ****                 else
1154:..\src/interruptions.c ****                     g_ref[idx].pos = handle_value;
 3111              		.loc 1 1154 0
 3112 01b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3113 01b6 464A     		ldr	r2, .L319+16
 3114 01b8 1B01     		lsls	r3, r3, #4
 3115 01ba 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 77


 3116 01bc 7A6D     		ldr	r2, [r7, #84]
 3117 01be 1A60     		str	r2, [r3]
1155:..\src/interruptions.c ****             }
1156:..\src/interruptions.c ****             break;
 3118              		.loc 1 1156 0
 3119 01c0 73E1     		b	.L214
 3120              	.L212:
 3121 01c2 72E1     		b	.L214
 3122              	.L205:
1157:..\src/interruptions.c ****             
1158:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
1159:..\src/interruptions.c ****             if (err_emg_1 > 0)
 3123              		.loc 1 1159 0
 3124 01c4 BB69     		ldr	r3, [r7, #24]
 3125 01c6 002B     		cmp	r3, #0
 3126 01c8 18DD     		ble	.L215
1160:..\src/interruptions.c ****                 g_ref[idx].pos = (err_emg_1 * g_mem.motor[idx].pos_lim_sup) / (1024 - c_mem.emg.emg
 3127              		.loc 1 1160 0
 3128 01ca F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 3129 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3130 01ce 4148     		ldr	r0, .L319+20
 3131 01d0 1346     		mov	r3, r2
 3132 01d2 DB00     		lsls	r3, r3, #3
 3133 01d4 9B1A     		subs	r3, r3, r2
 3134 01d6 1B01     		lsls	r3, r3, #4
 3135 01d8 0344     		add	r3, r3, r0
 3136 01da E833     		adds	r3, r3, #232
 3137 01dc 1B68     		ldr	r3, [r3]
 3138 01de BA69     		ldr	r2, [r7, #24]
 3139 01e0 02FB03F2 		mul	r2, r2, r3
 3140 01e4 364B     		ldr	r3, .L319
 3141 01e6 B3F8F031 		ldrh	r3, [r3, #496]
 3142 01ea C3F58063 		rsb	r3, r3, #1024
 3143 01ee 92FBF3F2 		sdiv	r2, r2, r3
 3144 01f2 3748     		ldr	r0, .L319+16
 3145 01f4 0B01     		lsls	r3, r1, #4
 3146 01f6 0344     		add	r3, r3, r0
 3147 01f8 1A60     		str	r2, [r3]
1161:..\src/interruptions.c ****             else
1162:..\src/interruptions.c ****                 g_ref[idx].pos = 0;
1163:..\src/interruptions.c ****             break;
 3148              		.loc 1 1163 0
 3149 01fa 56E1     		b	.L214
 3150              	.L215:
1162:..\src/interruptions.c ****             break;
 3151              		.loc 1 1162 0
 3152 01fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3153 01fe 344A     		ldr	r2, .L319+16
 3154 0200 1B01     		lsls	r3, r3, #4
 3155 0202 1344     		add	r3, r3, r2
 3156 0204 0022     		movs	r2, #0
 3157 0206 1A60     		str	r2, [r3]
 3158              		.loc 1 1163 0
 3159 0208 4FE1     		b	.L214
 3160              	.L206:
1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 78


1166:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3161              		.loc 1 1166 0
 3162 020a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3163 020c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3164 020e 2F49     		ldr	r1, .L319+12
 3165 0210 1201     		lsls	r2, r2, #4
 3166 0212 0A44     		add	r2, r2, r1
 3167 0214 1268     		ldr	r2, [r2]
 3168 0216 2E49     		ldr	r1, .L319+16
 3169 0218 1B01     		lsls	r3, r3, #4
 3170 021a 0B44     		add	r3, r3, r1
 3171 021c 1A60     		str	r2, [r3]
1167:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 3172              		.loc 1 1167 0
 3173 021e BB69     		ldr	r3, [r7, #24]
 3174 0220 002B     		cmp	r3, #0
 3175 0222 19DD     		ble	.L217
1168:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (
 3176              		.loc 1 1168 0
 3177 0224 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3178 0226 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3179 0228 2849     		ldr	r1, .L319+12
 3180 022a 1201     		lsls	r2, r2, #4
 3181 022c 0A44     		add	r2, r2, r1
 3182 022e 1168     		ldr	r1, [r2]
 3183 0230 284A     		ldr	r2, .L319+20
 3184 0232 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3185 0236 1046     		mov	r0, r2
 3186 0238 BA69     		ldr	r2, [r7, #24]
 3187 023a 02FB00F2 		mul	r2, r2, r0
 3188 023e 5000     		lsls	r0, r2, #1
 3189 0240 1F4A     		ldr	r2, .L319
 3190 0242 B2F8F021 		ldrh	r2, [r2, #496]
 3191 0246 C2F58062 		rsb	r2, r2, #1024
 3192 024a 90FBF2F2 		sdiv	r2, r0, r2
 3193 024e 0A44     		add	r2, r2, r1
 3194 0250 1F49     		ldr	r1, .L319+16
 3195 0252 1B01     		lsls	r3, r3, #4
 3196 0254 0B44     		add	r3, r3, r1
 3197 0256 1A60     		str	r2, [r3]
 3198              	.L217:
1169:..\src/interruptions.c ****             }
1170:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 3199              		.loc 1 1170 0
 3200 0258 7B69     		ldr	r3, [r7, #20]
 3201 025a 002B     		cmp	r3, #0
 3202 025c 40F32481 		ble	.L311
1171:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (
 3203              		.loc 1 1171 0
 3204 0260 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3205 0262 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3206 0264 1949     		ldr	r1, .L319+12
 3207 0266 1201     		lsls	r2, r2, #4
 3208 0268 0A44     		add	r2, r2, r1
 3209 026a 1168     		ldr	r1, [r2]
 3210 026c 194A     		ldr	r2, .L319+20
 3211 026e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 79


 3212 0272 1046     		mov	r0, r2
 3213 0274 7A69     		ldr	r2, [r7, #20]
 3214 0276 02FB00F2 		mul	r2, r2, r0
 3215 027a 5000     		lsls	r0, r2, #1
 3216 027c 104A     		ldr	r2, .L319
 3217 027e B2F8F221 		ldrh	r2, [r2, #498]
 3218 0282 C2F58062 		rsb	r2, r2, #1024
 3219 0286 90FBF2F2 		sdiv	r2, r0, r2
 3220 028a 8A1A     		subs	r2, r1, r2
 3221 028c 1049     		ldr	r1, .L319+16
 3222 028e 1B01     		lsls	r3, r3, #4
 3223 0290 0B44     		add	r3, r3, r1
 3224 0292 1A60     		str	r2, [r3]
1172:..\src/interruptions.c ****             }
1173:..\src/interruptions.c ****             break;
 3225              		.loc 1 1173 0
 3226 0294 08E1     		b	.L311
 3227              	.L207:
1174:..\src/interruptions.c **** 
1175:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
1176:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3228              		.loc 1 1176 0
 3229 0296 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3230 0298 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3231 029a 0C49     		ldr	r1, .L319+12
 3232 029c 1201     		lsls	r2, r2, #4
 3233 029e 0A44     		add	r2, r2, r1
 3234 02a0 1268     		ldr	r2, [r2]
 3235 02a2 0B49     		ldr	r1, .L319+16
 3236 02a4 1B01     		lsls	r3, r3, #4
 3237 02a6 0B44     		add	r3, r3, r1
 3238 02a8 1A60     		str	r2, [r3]
1177:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3239              		.loc 1 1177 0
 3240 02aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3241 02ac 0A4A     		ldr	r2, .L319+24
 3242 02ae D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3243 02b0 012B     		cmp	r3, #1
 3244 02b2 2BD0     		beq	.L220
 3245 02b4 022B     		cmp	r3, #2
 3246 02b6 4CD0     		beq	.L221
 3247 02b8 002B     		cmp	r3, #0
 3248 02ba 0FD0     		beq	.L222
1178:..\src/interruptions.c ****                 case 0:
1179:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
1180:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1181:..\src/interruptions.c ****                         current_emg[idx] = 1;
1182:..\src/interruptions.c ****                         break;
1183:..\src/interruptions.c ****                     }
1184:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1185:..\src/interruptions.c ****                         current_emg[idx] = 2;
1186:..\src/interruptions.c ****                         break;
1187:..\src/interruptions.c ****                     }
1188:..\src/interruptions.c ****                     break;
1189:..\src/interruptions.c **** 
1190:..\src/interruptions.c ****                 case 1:
1191:..\src/interruptions.c ****                     // EMG 1 is first
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 80


1192:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
1193:..\src/interruptions.c ****                         current_emg[idx] = 0;
1194:..\src/interruptions.c ****                         break;
1195:..\src/interruptions.c ****                     }
1196:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
1197:..\src/interruptions.c ****                     break;
1198:..\src/interruptions.c **** 
1199:..\src/interruptions.c ****                 case 2:
1200:..\src/interruptions.c ****                     // EMG 2 is first
1201:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
1202:..\src/interruptions.c ****                         current_emg[idx] = 0;
1203:..\src/interruptions.c ****                         break;
1204:..\src/interruptions.c ****                     }
1205:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (
1206:..\src/interruptions.c ****                     break;
1207:..\src/interruptions.c **** 
1208:..\src/interruptions.c ****                 default:
1209:..\src/interruptions.c ****                     break;
 3249              		.loc 1 1209 0
 3250 02bc 6DE0     		b	.L224
 3251              	.L320:
 3252 02be 00BF     		.align	2
 3253              	.L319:
 3254 02c0 00000000 		.word	c_mem
 3255 02c4 00000000 		.word	g_emg_meas
 3256 02c8 00000000 		.word	g_meas
 3257 02cc 00000000 		.word	g_refOld
 3258 02d0 00000000 		.word	g_ref
 3259 02d4 00000000 		.word	g_mem
 3260 02d8 AC000000 		.word	current_emg.10500
 3261              	.L222:
1180:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3262              		.loc 1 1180 0
 3263 02dc BB69     		ldr	r3, [r7, #24]
 3264 02de 002B     		cmp	r3, #0
 3265 02e0 08DD     		ble	.L223
1180:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3266              		.loc 1 1180 0 is_stmt 0 discriminator 1
 3267 02e2 BA69     		ldr	r2, [r7, #24]
 3268 02e4 7B69     		ldr	r3, [r7, #20]
 3269 02e6 9A42     		cmp	r2, r3
 3270 02e8 04DD     		ble	.L223
1181:..\src/interruptions.c ****                         break;
 3271              		.loc 1 1181 0 is_stmt 1
 3272 02ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3273 02ec A14A     		ldr	r2, .L321
 3274 02ee 0121     		movs	r1, #1
 3275 02f0 D154     		strb	r1, [r2, r3]
1182:..\src/interruptions.c ****                     }
 3276              		.loc 1 1182 0
 3277 02f2 52E0     		b	.L224
 3278              	.L223:
1184:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3279              		.loc 1 1184 0
 3280 02f4 7B69     		ldr	r3, [r7, #20]
 3281 02f6 002B     		cmp	r3, #0
 3282 02f8 4EDD     		ble	.L312
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 81


1184:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3283              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3284 02fa 7A69     		ldr	r2, [r7, #20]
 3285 02fc BB69     		ldr	r3, [r7, #24]
 3286 02fe 9A42     		cmp	r2, r3
 3287 0300 4ADD     		ble	.L312
1185:..\src/interruptions.c ****                         break;
 3288              		.loc 1 1185 0 is_stmt 1
 3289 0302 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3290 0304 9B4A     		ldr	r2, .L321
 3291 0306 0221     		movs	r1, #2
 3292 0308 D154     		strb	r1, [r2, r3]
1186:..\src/interruptions.c ****                     }
 3293              		.loc 1 1186 0
 3294 030a 46E0     		b	.L224
 3295              	.L220:
1192:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3296              		.loc 1 1192 0
 3297 030c BB69     		ldr	r3, [r7, #24]
 3298 030e 002B     		cmp	r3, #0
 3299 0310 04DA     		bge	.L226
1193:..\src/interruptions.c ****                         break;
 3300              		.loc 1 1193 0
 3301 0312 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3302 0314 974A     		ldr	r2, .L321
 3303 0316 0021     		movs	r1, #0
 3304 0318 D154     		strb	r1, [r2, r3]
1194:..\src/interruptions.c ****                     }
 3305              		.loc 1 1194 0
 3306 031a 3EE0     		b	.L224
 3307              	.L226:
1196:..\src/interruptions.c ****                     break;
 3308              		.loc 1 1196 0
 3309 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3310 031e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3311 0320 9549     		ldr	r1, .L321+4
 3312 0322 1201     		lsls	r2, r2, #4
 3313 0324 0A44     		add	r2, r2, r1
 3314 0326 1168     		ldr	r1, [r2]
 3315 0328 944A     		ldr	r2, .L321+8
 3316 032a 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3317 032e 1046     		mov	r0, r2
 3318 0330 BA69     		ldr	r2, [r7, #24]
 3319 0332 02FB00F2 		mul	r2, r2, r0
 3320 0336 9000     		lsls	r0, r2, #2
 3321 0338 914A     		ldr	r2, .L321+12
 3322 033a B2F8F021 		ldrh	r2, [r2, #496]
 3323 033e C2F58062 		rsb	r2, r2, #1024
 3324 0342 90FBF2F2 		sdiv	r2, r0, r2
 3325 0346 0A44     		add	r2, r2, r1
 3326 0348 8E49     		ldr	r1, .L321+16
 3327 034a 1B01     		lsls	r3, r3, #4
 3328 034c 0B44     		add	r3, r3, r1
 3329 034e 1A60     		str	r2, [r3]
1197:..\src/interruptions.c **** 
 3330              		.loc 1 1197 0
 3331 0350 23E0     		b	.L224
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 82


 3332              	.L221:
1201:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3333              		.loc 1 1201 0
 3334 0352 7B69     		ldr	r3, [r7, #20]
 3335 0354 002B     		cmp	r3, #0
 3336 0356 04DA     		bge	.L227
1202:..\src/interruptions.c ****                         break;
 3337              		.loc 1 1202 0
 3338 0358 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3339 035a 864A     		ldr	r2, .L321
 3340 035c 0021     		movs	r1, #0
 3341 035e D154     		strb	r1, [r2, r3]
1203:..\src/interruptions.c ****                     }
 3342              		.loc 1 1203 0
 3343 0360 1BE0     		b	.L224
 3344              	.L227:
1205:..\src/interruptions.c ****                     break;
 3345              		.loc 1 1205 0
 3346 0362 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3347 0364 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3348 0366 8449     		ldr	r1, .L321+4
 3349 0368 1201     		lsls	r2, r2, #4
 3350 036a 0A44     		add	r2, r2, r1
 3351 036c 1168     		ldr	r1, [r2]
 3352 036e 834A     		ldr	r2, .L321+8
 3353 0370 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3354 0374 1046     		mov	r0, r2
 3355 0376 7A69     		ldr	r2, [r7, #20]
 3356 0378 02FB00F2 		mul	r2, r2, r0
 3357 037c 9000     		lsls	r0, r2, #2
 3358 037e 804A     		ldr	r2, .L321+12
 3359 0380 B2F8F221 		ldrh	r2, [r2, #498]
 3360 0384 C2F58062 		rsb	r2, r2, #1024
 3361 0388 90FBF2F2 		sdiv	r2, r0, r2
 3362 038c 8A1A     		subs	r2, r1, r2
 3363 038e 7D49     		ldr	r1, .L321+16
 3364 0390 1B01     		lsls	r3, r3, #4
 3365 0392 0B44     		add	r3, r3, r1
 3366 0394 1A60     		str	r2, [r3]
1206:..\src/interruptions.c **** 
 3367              		.loc 1 1206 0
 3368 0396 00E0     		b	.L224
 3369              	.L312:
1188:..\src/interruptions.c **** 
 3370              		.loc 1 1188 0
 3371 0398 00BF     		nop
 3372              	.L224:
1210:..\src/interruptions.c ****             }
1211:..\src/interruptions.c ****             break;
 3373              		.loc 1 1211 0 discriminator 1
 3374 039a 86E0     		b	.L214
 3375              	.L208:
1212:..\src/interruptions.c **** 
1213:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
1214:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3376              		.loc 1 1214 0
 3377 039c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 83


 3378 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3379 03a0 7549     		ldr	r1, .L321+4
 3380 03a2 1201     		lsls	r2, r2, #4
 3381 03a4 0A44     		add	r2, r2, r1
 3382 03a6 1268     		ldr	r2, [r2]
 3383 03a8 7649     		ldr	r1, .L321+16
 3384 03aa 1B01     		lsls	r3, r3, #4
 3385 03ac 0B44     		add	r3, r3, r1
 3386 03ae 1A60     		str	r2, [r3]
1215:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3387              		.loc 1 1215 0
 3388 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3389 03b2 704A     		ldr	r2, .L321
 3390 03b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3391 03b6 012B     		cmp	r3, #1
 3392 03b8 1CD0     		beq	.L229
 3393 03ba 022B     		cmp	r3, #2
 3394 03bc 43D0     		beq	.L230
 3395 03be 002B     		cmp	r3, #0
 3396 03c0 00D0     		beq	.L231
1216:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
1217:..\src/interruptions.c ****                 case 0:
1218:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1219:..\src/interruptions.c ****                         current_emg[idx] = 1;
1220:..\src/interruptions.c ****                         break;
1221:..\src/interruptions.c ****                     }
1222:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1223:..\src/interruptions.c ****                         current_emg[idx] = 2;
1224:..\src/interruptions.c ****                         break;
1225:..\src/interruptions.c ****                     }
1226:..\src/interruptions.c ****                     break;
1227:..\src/interruptions.c **** 
1228:..\src/interruptions.c ****                 // EMG 1 is first
1229:..\src/interruptions.c ****                 case 1:
1230:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1231:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1232:..\src/interruptions.c ****                         current_emg[idx] = 0;
1233:..\src/interruptions.c ****                         break;
1234:..\src/interruptions.c ****                     }
1235:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1236:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
1237:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
1238:..\src/interruptions.c ****                     
1239:..\src/interruptions.c ****                     break;
1240:..\src/interruptions.c **** 
1241:..\src/interruptions.c ****                 // EMG 2 is first
1242:..\src/interruptions.c ****                 case 2:
1243:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1244:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1245:..\src/interruptions.c ****                         current_emg[idx] = 0;
1246:..\src/interruptions.c ****                         break;
1247:..\src/interruptions.c ****                     }
1248:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1249:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
1250:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
1251:..\src/interruptions.c ****                     }
1252:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 84


1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****                 default:
1255:..\src/interruptions.c ****                     break;
 3397              		.loc 1 1255 0
 3398 03c2 6EE0     		b	.L233
 3399              	.L231:
1218:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3400              		.loc 1 1218 0
 3401 03c4 BB69     		ldr	r3, [r7, #24]
 3402 03c6 002B     		cmp	r3, #0
 3403 03c8 08DD     		ble	.L232
1218:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3404              		.loc 1 1218 0 is_stmt 0 discriminator 1
 3405 03ca BA69     		ldr	r2, [r7, #24]
 3406 03cc 7B69     		ldr	r3, [r7, #20]
 3407 03ce 9A42     		cmp	r2, r3
 3408 03d0 04DD     		ble	.L232
1219:..\src/interruptions.c ****                         break;
 3409              		.loc 1 1219 0 is_stmt 1
 3410 03d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3411 03d4 674A     		ldr	r2, .L321
 3412 03d6 0121     		movs	r1, #1
 3413 03d8 D154     		strb	r1, [r2, r3]
1220:..\src/interruptions.c ****                     }
 3414              		.loc 1 1220 0
 3415 03da 62E0     		b	.L233
 3416              	.L232:
1222:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3417              		.loc 1 1222 0
 3418 03dc 7B69     		ldr	r3, [r7, #20]
 3419 03de 002B     		cmp	r3, #0
 3420 03e0 5ADD     		ble	.L313
1222:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3421              		.loc 1 1222 0 is_stmt 0 discriminator 1
 3422 03e2 7A69     		ldr	r2, [r7, #20]
 3423 03e4 BB69     		ldr	r3, [r7, #24]
 3424 03e6 9A42     		cmp	r2, r3
 3425 03e8 56DD     		ble	.L313
1223:..\src/interruptions.c ****                         break;
 3426              		.loc 1 1223 0 is_stmt 1
 3427 03ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3428 03ec 614A     		ldr	r2, .L321
 3429 03ee 0221     		movs	r1, #2
 3430 03f0 D154     		strb	r1, [r2, r3]
1224:..\src/interruptions.c ****                     }
 3431              		.loc 1 1224 0
 3432 03f2 56E0     		b	.L233
 3433              	.L229:
1231:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3434              		.loc 1 1231 0
 3435 03f4 BB69     		ldr	r3, [r7, #24]
 3436 03f6 002B     		cmp	r3, #0
 3437 03f8 07DA     		bge	.L235
1231:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3438              		.loc 1 1231 0 is_stmt 0 discriminator 1
 3439 03fa 7B69     		ldr	r3, [r7, #20]
 3440 03fc 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 85


 3441 03fe 04DA     		bge	.L235
1232:..\src/interruptions.c ****                         break;
 3442              		.loc 1 1232 0 is_stmt 1
 3443 0400 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3444 0402 5C4A     		ldr	r2, .L321
 3445 0404 0021     		movs	r1, #0
 3446 0406 D154     		strb	r1, [r2, r3]
1233:..\src/interruptions.c ****                     }
 3447              		.loc 1 1233 0
 3448 0408 4BE0     		b	.L233
 3449              	.L235:
1236:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
 3450              		.loc 1 1236 0
 3451 040a BB69     		ldr	r3, [r7, #24]
 3452 040c 002B     		cmp	r3, #0
 3453 040e 45DD     		ble	.L314
1237:..\src/interruptions.c ****                     
 3454              		.loc 1 1237 0
 3455 0410 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3456 0412 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3457 0414 5849     		ldr	r1, .L321+4
 3458 0416 1201     		lsls	r2, r2, #4
 3459 0418 0A44     		add	r2, r2, r1
 3460 041a 1168     		ldr	r1, [r2]
 3461 041c 574A     		ldr	r2, .L321+8
 3462 041e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3463 0422 1046     		mov	r0, r2
 3464 0424 BA69     		ldr	r2, [r7, #24]
 3465 0426 02FB00F2 		mul	r2, r2, r0
 3466 042a 9000     		lsls	r0, r2, #2
 3467 042c 544A     		ldr	r2, .L321+12
 3468 042e B2F8F021 		ldrh	r2, [r2, #496]
 3469 0432 C2F58062 		rsb	r2, r2, #1024
 3470 0436 90FBF2F2 		sdiv	r2, r0, r2
 3471 043a 0A44     		add	r2, r2, r1
 3472 043c 5149     		ldr	r1, .L321+16
 3473 043e 1B01     		lsls	r3, r3, #4
 3474 0440 0B44     		add	r3, r3, r1
 3475 0442 1A60     		str	r2, [r3]
1239:..\src/interruptions.c **** 
 3476              		.loc 1 1239 0
 3477 0444 2AE0     		b	.L314
 3478              	.L230:
1244:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3479              		.loc 1 1244 0
 3480 0446 BB69     		ldr	r3, [r7, #24]
 3481 0448 002B     		cmp	r3, #0
 3482 044a 07DA     		bge	.L237
1244:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3483              		.loc 1 1244 0 is_stmt 0 discriminator 1
 3484 044c 7B69     		ldr	r3, [r7, #20]
 3485 044e 002B     		cmp	r3, #0
 3486 0450 04DA     		bge	.L237
1245:..\src/interruptions.c ****                         break;
 3487              		.loc 1 1245 0 is_stmt 1
 3488 0452 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3489 0454 474A     		ldr	r2, .L321
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 86


 3490 0456 0021     		movs	r1, #0
 3491 0458 D154     		strb	r1, [r2, r3]
1246:..\src/interruptions.c ****                     }
 3492              		.loc 1 1246 0
 3493 045a 22E0     		b	.L233
 3494              	.L237:
1249:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
 3495              		.loc 1 1249 0
 3496 045c 7B69     		ldr	r3, [r7, #20]
 3497 045e 002B     		cmp	r3, #0
 3498 0460 1EDD     		ble	.L315
1250:..\src/interruptions.c ****                     }
 3499              		.loc 1 1250 0
 3500 0462 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3501 0464 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3502 0466 4449     		ldr	r1, .L321+4
 3503 0468 1201     		lsls	r2, r2, #4
 3504 046a 0A44     		add	r2, r2, r1
 3505 046c 1168     		ldr	r1, [r2]
 3506 046e 444A     		ldr	r2, .L321+12
 3507 0470 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3508 0474 1046     		mov	r0, r2
 3509 0476 7A69     		ldr	r2, [r7, #20]
 3510 0478 02FB00F2 		mul	r2, r2, r0
 3511 047c 9000     		lsls	r0, r2, #2
 3512 047e 404A     		ldr	r2, .L321+12
 3513 0480 B2F8F221 		ldrh	r2, [r2, #498]
 3514 0484 C2F58062 		rsb	r2, r2, #1024
 3515 0488 90FBF2F2 		sdiv	r2, r0, r2
 3516 048c 8A1A     		subs	r2, r1, r2
 3517 048e 3D49     		ldr	r1, .L321+16
 3518 0490 1B01     		lsls	r3, r3, #4
 3519 0492 0B44     		add	r3, r3, r1
 3520 0494 1A60     		str	r2, [r3]
1252:..\src/interruptions.c **** 
 3521              		.loc 1 1252 0
 3522 0496 03E0     		b	.L315
 3523              	.L313:
1226:..\src/interruptions.c **** 
 3524              		.loc 1 1226 0
 3525 0498 00BF     		nop
 3526 049a 06E0     		b	.L214
 3527              	.L314:
1239:..\src/interruptions.c **** 
 3528              		.loc 1 1239 0
 3529 049c 00BF     		nop
 3530 049e 04E0     		b	.L214
 3531              	.L315:
1252:..\src/interruptions.c **** 
 3532              		.loc 1 1252 0
 3533 04a0 00BF     		nop
 3534              	.L233:
1256:..\src/interruptions.c ****             }
1257:..\src/interruptions.c ****             break;
 3535              		.loc 1 1257 0 discriminator 3
 3536 04a2 02E0     		b	.L214
 3537              	.L310:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 87


1258:..\src/interruptions.c **** 
1259:..\src/interruptions.c ****         default:
1260:..\src/interruptions.c ****             break;
 3538              		.loc 1 1260 0
 3539 04a4 00BF     		nop
 3540 04a6 00E0     		b	.L214
 3541              	.L311:
1173:..\src/interruptions.c **** 
 3542              		.loc 1 1173 0
 3543 04a8 00BF     		nop
 3544              	.L214:
1261:..\src/interruptions.c ****     }
1262:..\src/interruptions.c **** 
1263:..\src/interruptions.c ****     // Position limit saturation
1264:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 3545              		.loc 1 1264 0
 3546 04aa 3B6D     		ldr	r3, [r7, #80]
 3547 04ac 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 3548 04b0 002B     		cmp	r3, #0
 3549 04b2 1FD0     		beq	.L239
1265:..\src/interruptions.c ****         if (g_ref[idx].pos < MOT->pos_lim_inf) 
 3550              		.loc 1 1265 0
 3551 04b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3552 04b6 334A     		ldr	r2, .L321+16
 3553 04b8 1B01     		lsls	r3, r3, #4
 3554 04ba 1344     		add	r3, r3, r2
 3555 04bc 1A68     		ldr	r2, [r3]
 3556 04be 3B6D     		ldr	r3, [r7, #80]
 3557 04c0 5B6B     		ldr	r3, [r3, #52]
 3558 04c2 9A42     		cmp	r2, r3
 3559 04c4 06DA     		bge	.L240
1266:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_inf;
 3560              		.loc 1 1266 0
 3561 04c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3562 04c8 3A6D     		ldr	r2, [r7, #80]
 3563 04ca 526B     		ldr	r2, [r2, #52]
 3564 04cc 2D49     		ldr	r1, .L321+16
 3565 04ce 1B01     		lsls	r3, r3, #4
 3566 04d0 0B44     		add	r3, r3, r1
 3567 04d2 1A60     		str	r2, [r3]
 3568              	.L240:
1267:..\src/interruptions.c ****         if (g_ref[idx].pos > MOT->pos_lim_sup) 
 3569              		.loc 1 1267 0
 3570 04d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3571 04d6 2B4A     		ldr	r2, .L321+16
 3572 04d8 1B01     		lsls	r3, r3, #4
 3573 04da 1344     		add	r3, r3, r2
 3574 04dc 1A68     		ldr	r2, [r3]
 3575 04de 3B6D     		ldr	r3, [r7, #80]
 3576 04e0 9B6B     		ldr	r3, [r3, #56]
 3577 04e2 9A42     		cmp	r2, r3
 3578 04e4 06DD     		ble	.L239
1268:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_sup;
 3579              		.loc 1 1268 0
 3580 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3581 04e8 3A6D     		ldr	r2, [r7, #80]
 3582 04ea 926B     		ldr	r2, [r2, #56]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 88


 3583 04ec 2549     		ldr	r1, .L321+16
 3584 04ee 1B01     		lsls	r3, r3, #4
 3585 04f0 0B44     		add	r3, r3, r1
 3586 04f2 1A60     		str	r2, [r3]
 3587              	.L239:
1269:..\src/interruptions.c ****     }
1270:..\src/interruptions.c ****     
1271:..\src/interruptions.c ****     // SAFETY
1272:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 3588              		.loc 1 1272 0
 3589 04f4 244B     		ldr	r3, .L321+20
 3590 04f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3591 04f8 012B     		cmp	r3, #1
 3592 04fa 05D1     		bne	.L241
1273:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
1274:..\src/interruptions.c ****         g_ref[idx].pos = 0;
 3593              		.loc 1 1274 0
 3594 04fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3595 04fe 214A     		ldr	r2, .L321+16
 3596 0500 1B01     		lsls	r3, r3, #4
 3597 0502 1344     		add	r3, r3, r2
 3598 0504 0022     		movs	r2, #0
 3599 0506 1A60     		str	r2, [r3]
 3600              	.L241:
1275:..\src/interruptions.c ****     }        
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3601              		.loc 1 1277 0
 3602 0508 3B6D     		ldr	r3, [r7, #80]
 3603 050a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3604 050e 032B     		cmp	r3, #3
 3605 0510 00F24F82 		bhi	.L242
 3606 0514 01A2     		adr	r2, .L244
 3607 0516 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3608 051a 00BF     		.p2align 2
 3609              	.L244:
 3610 051c 33070000 		.word	.L243+1
 3611 0520 6B090000 		.word	.L245+1
 3612 0524 39080000 		.word	.L246+1
 3613 0528 2D050000 		.word	.L247+1
 3614              		.p2align 1
 3615              	.L247:
1278:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1279:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1280:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3616              		.loc 1 1280 0
 3617 052c 154B     		ldr	r3, .L321+16
 3618 052e 1A68     		ldr	r2, [r3]
 3619 0530 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3620 0534 1549     		ldr	r1, .L321+24
 3621 0536 3420     		movs	r0, #52
 3622 0538 00FB03F3 		mul	r3, r0, r3
 3623 053c 0B44     		add	r3, r3, r1
 3624 053e 1B68     		ldr	r3, [r3]
 3625 0540 D31A     		subs	r3, r2, r3
 3626 0542 3B61     		str	r3, [r7, #16]
1281:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 89


1282:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3627              		.loc 1 1282 0
 3628 0544 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3629 0546 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3630 0548 1149     		ldr	r1, .L321+28
 3631 054a 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3632 054e 3A69     		ldr	r2, [r7, #16]
 3633 0550 0A44     		add	r2, r2, r1
 3634 0552 0F49     		ldr	r1, .L321+28
 3635 0554 41F82320 		str	r2, [r1, r3, lsl #2]
1283:..\src/interruptions.c **** 
1284:..\src/interruptions.c ****             // error_sum saturation
1285:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3636              		.loc 1 1285 0
 3637 0558 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3638 055a 0D4A     		ldr	r2, .L321+28
 3639 055c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3640 0560 0C4A     		ldr	r2, .L321+32
 3641 0562 9342     		cmp	r3, r2
 3642 0564 18DD     		ble	.L248
1286:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3643              		.loc 1 1286 0
 3644 0566 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3645 0568 094A     		ldr	r2, .L321+28
 3646 056a 0A49     		ldr	r1, .L321+32
 3647 056c 42F82310 		str	r1, [r2, r3, lsl #2]
 3648 0570 1EE0     		b	.L249
 3649              	.L322:
 3650 0572 00BF     		.align	2
 3651              	.L321:
 3652 0574 AC000000 		.word	current_emg.10500
 3653 0578 00000000 		.word	g_refOld
 3654 057c 00000000 		.word	g_mem
 3655 0580 00000000 		.word	c_mem
 3656 0584 00000000 		.word	g_ref
 3657 0588 00000000 		.word	battery_low_SoC
 3658 058c 00000000 		.word	g_meas
 3659 0590 B0000000 		.word	pos_error_sum.10493
 3660 0594 80F0FA02 		.word	50000000
 3661              	.L248:
1287:..\src/interruptions.c ****             else {
1288:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3662              		.loc 1 1288 0
 3663 0598 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3664 059a 9C4A     		ldr	r2, .L323
 3665 059c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3666 05a0 9B4A     		ldr	r2, .L323+4
 3667 05a2 9342     		cmp	r3, r2
 3668 05a4 04DA     		bge	.L249
1289:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3669              		.loc 1 1289 0
 3670 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3671 05a8 984A     		ldr	r2, .L323
 3672 05aa 9949     		ldr	r1, .L323+4
 3673 05ac 42F82310 		str	r1, [r2, r3, lsl #2]
 3674              	.L249:
1290:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 90


1291:..\src/interruptions.c ****             
1292:..\src/interruptions.c ****             // ------ position PID control ------
1293:..\src/interruptions.c **** 
1294:..\src/interruptions.c ****             i_ref = 0;
 3675              		.loc 1 1294 0
 3676 05b0 0023     		movs	r3, #0
 3677 05b2 BB65     		str	r3, [r7, #88]
1295:..\src/interruptions.c ****             
1296:..\src/interruptions.c ****             // Proportional
1297:..\src/interruptions.c ****             if (k_p_dl != 0)
 3678              		.loc 1 1297 0
 3679 05b4 3B6B     		ldr	r3, [r7, #48]
 3680 05b6 002B     		cmp	r3, #0
 3681 05b8 07D0     		beq	.L250
1298:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3682              		.loc 1 1298 0
 3683 05ba 3B6B     		ldr	r3, [r7, #48]
 3684 05bc 3A69     		ldr	r2, [r7, #16]
 3685 05be 02FB03F3 		mul	r3, r2, r3
 3686 05c2 1B14     		asrs	r3, r3, #16
 3687 05c4 BA6D     		ldr	r2, [r7, #88]
 3688 05c6 1344     		add	r3, r3, r2
 3689 05c8 BB65     		str	r3, [r7, #88]
 3690              	.L250:
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****             // Integral
1301:..\src/interruptions.c ****             if (k_i_dl != 0)
 3691              		.loc 1 1301 0
 3692 05ca FB6A     		ldr	r3, [r7, #44]
 3693 05cc 002B     		cmp	r3, #0
 3694 05ce 0AD0     		beq	.L251
1302:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3695              		.loc 1 1302 0
 3696 05d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3697 05d2 8E4A     		ldr	r2, .L323
 3698 05d4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3699 05d8 FA6A     		ldr	r2, [r7, #44]
 3700 05da 02FB03F3 		mul	r3, r2, r3
 3701 05de 1B14     		asrs	r3, r3, #16
 3702 05e0 BA6D     		ldr	r2, [r7, #88]
 3703 05e2 1344     		add	r3, r3, r2
 3704 05e4 BB65     		str	r3, [r7, #88]
 3705              	.L251:
1303:..\src/interruptions.c **** 
1304:..\src/interruptions.c ****             // Derivative
1305:..\src/interruptions.c ****             if (k_d_dl != 0)
 3706              		.loc 1 1305 0
 3707 05e6 BB6A     		ldr	r3, [r7, #40]
 3708 05e8 002B     		cmp	r3, #0
 3709 05ea 0CD0     		beq	.L252
1306:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3710              		.loc 1 1306 0
 3711 05ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3712 05ee 894A     		ldr	r2, .L323+8
 3713 05f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3714 05f4 3A69     		ldr	r2, [r7, #16]
 3715 05f6 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 91


 3716 05f8 BA6A     		ldr	r2, [r7, #40]
 3717 05fa 02FB03F3 		mul	r3, r2, r3
 3718 05fe 1B14     		asrs	r3, r3, #16
 3719 0600 BA6D     		ldr	r2, [r7, #88]
 3720 0602 1344     		add	r3, r3, r2
 3721 0604 BB65     		str	r3, [r7, #88]
 3722              	.L252:
1307:..\src/interruptions.c ****                         
1308:..\src/interruptions.c ****             // Update previous position
1309:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3723              		.loc 1 1309 0
 3724 0606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3725 0608 8249     		ldr	r1, .L323+8
 3726 060a 3A69     		ldr	r2, [r7, #16]
 3727 060c 41F82320 		str	r2, [r1, r3, lsl #2]
1310:..\src/interruptions.c **** 
1311:..\src/interruptions.c ****             // motor direction depends on i_ref
1312:..\src/interruptions.c ****             if (i_ref >= 0)
 3728              		.loc 1 1312 0
 3729 0610 BB6D     		ldr	r3, [r7, #88]
 3730 0612 002B     		cmp	r3, #0
 3731 0614 04DB     		blt	.L253
1313:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3732              		.loc 1 1313 0
 3733 0616 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3734 0618 7F4A     		ldr	r2, .L323+12
 3735 061a 0121     		movs	r1, #1
 3736 061c D154     		strb	r1, [r2, r3]
 3737 061e 03E0     		b	.L254
 3738              	.L253:
1314:..\src/interruptions.c ****             else
1315:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3739              		.loc 1 1315 0
 3740 0620 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3741 0622 7D4A     		ldr	r2, .L323+12
 3742 0624 0021     		movs	r1, #0
 3743 0626 D154     		strb	r1, [r2, r3]
 3744              	.L254:
1316:..\src/interruptions.c **** 
1317:..\src/interruptions.c ****             // saturate max current
1318:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3745              		.loc 1 1318 0
 3746 0628 3B6D     		ldr	r3, [r7, #80]
 3747 062a B3F95C30 		ldrsh	r3, [r3, #92]
 3748 062e 1A46     		mov	r2, r3
 3749 0630 BB6D     		ldr	r3, [r7, #88]
 3750 0632 9A42     		cmp	r2, r3
 3751 0634 04DA     		bge	.L255
1319:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3752              		.loc 1 1319 0
 3753 0636 3B6D     		ldr	r3, [r7, #80]
 3754 0638 B3F95C30 		ldrsh	r3, [r3, #92]
 3755 063c BB65     		str	r3, [r7, #88]
 3756 063e 0BE0     		b	.L256
 3757              	.L255:
1320:..\src/interruptions.c ****             else {
1321:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 92


 3758              		.loc 1 1321 0
 3759 0640 3B6D     		ldr	r3, [r7, #80]
 3760 0642 B3F95C30 		ldrsh	r3, [r3, #92]
 3761 0646 5A42     		negs	r2, r3
 3762 0648 BB6D     		ldr	r3, [r7, #88]
 3763 064a 9A42     		cmp	r2, r3
 3764 064c 04DD     		ble	.L256
1322:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3765              		.loc 1 1322 0
 3766 064e 3B6D     		ldr	r3, [r7, #80]
 3767 0650 B3F95C30 		ldrsh	r3, [r3, #92]
 3768 0654 5B42     		negs	r3, r3
 3769 0656 BB65     		str	r3, [r7, #88]
 3770              	.L256:
1323:..\src/interruptions.c ****         	}
1324:..\src/interruptions.c **** 
1325:..\src/interruptions.c ****             // current error and curr error sum
1326:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3771              		.loc 1 1326 0
 3772 0658 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3773 065c 6F4A     		ldr	r2, .L323+16
 3774 065e 3421     		movs	r1, #52
 3775 0660 01FB03F3 		mul	r3, r1, r3
 3776 0664 1344     		add	r3, r3, r2
 3777 0666 0C33     		adds	r3, r3, #12
 3778 0668 1B68     		ldr	r3, [r3]
 3779 066a BA6D     		ldr	r2, [r7, #88]
 3780 066c D31A     		subs	r3, r2, r3
 3781 066e FB60     		str	r3, [r7, #12]
1327:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3782              		.loc 1 1327 0
 3783 0670 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3784 0672 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3785 0674 6A49     		ldr	r1, .L323+20
 3786 0676 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3787 067a FA68     		ldr	r2, [r7, #12]
 3788 067c 0A44     		add	r2, r2, r1
 3789 067e 6849     		ldr	r1, .L323+20
 3790 0680 41F82320 		str	r2, [r1, r3, lsl #2]
1328:..\src/interruptions.c ****             
1329:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3791              		.loc 1 1329 0
 3792 0684 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3793 0686 664A     		ldr	r2, .L323+20
 3794 0688 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3795 068c 654A     		ldr	r2, .L323+24
 3796 068e 9342     		cmp	r3, r2
 3797 0690 05DD     		ble	.L257
1330:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3798              		.loc 1 1330 0
 3799 0692 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3800 0694 624A     		ldr	r2, .L323+20
 3801 0696 6349     		ldr	r1, .L323+24
 3802 0698 42F82310 		str	r1, [r2, r3, lsl #2]
 3803 069c 0BE0     		b	.L258
 3804              	.L257:
1331:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 93


1332:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3805              		.loc 1 1332 0
 3806 069e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3807 06a0 5F4A     		ldr	r2, .L323+20
 3808 06a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3809 06a6 604A     		ldr	r2, .L323+28
 3810 06a8 9342     		cmp	r3, r2
 3811 06aa 04DA     		bge	.L258
1333:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3812              		.loc 1 1333 0
 3813 06ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3814 06ae 5C4A     		ldr	r2, .L323+20
 3815 06b0 5D49     		ldr	r1, .L323+28
 3816 06b2 42F82310 		str	r1, [r2, r3, lsl #2]
 3817              	.L258:
1334:..\src/interruptions.c ****             }
1335:..\src/interruptions.c **** 
1336:..\src/interruptions.c ****             // ----- current PID control -----
1337:..\src/interruptions.c **** 
1338:..\src/interruptions.c ****             pwm_input = 0;
 3818              		.loc 1 1338 0
 3819 06b6 0023     		movs	r3, #0
 3820 06b8 FB65     		str	r3, [r7, #92]
1339:..\src/interruptions.c **** 
1340:..\src/interruptions.c ****             // Proportional
1341:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3821              		.loc 1 1341 0
 3822 06ba 7B6A     		ldr	r3, [r7, #36]
 3823 06bc 002B     		cmp	r3, #0
 3824 06be 07D0     		beq	.L259
1342:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3825              		.loc 1 1342 0
 3826 06c0 7B6A     		ldr	r3, [r7, #36]
 3827 06c2 FA68     		ldr	r2, [r7, #12]
 3828 06c4 02FB03F3 		mul	r3, r2, r3
 3829 06c8 1B14     		asrs	r3, r3, #16
 3830 06ca FA6D     		ldr	r2, [r7, #92]
 3831 06cc 1344     		add	r3, r3, r2
 3832 06ce FB65     		str	r3, [r7, #92]
 3833              	.L259:
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****             // Integral
1345:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3834              		.loc 1 1345 0
 3835 06d0 3B6A     		ldr	r3, [r7, #32]
 3836 06d2 002B     		cmp	r3, #0
 3837 06d4 0AD0     		beq	.L260
1346:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3838              		.loc 1 1346 0
 3839 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3840 06d8 514A     		ldr	r2, .L323+20
 3841 06da 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3842 06de 3A6A     		ldr	r2, [r7, #32]
 3843 06e0 02FB03F3 		mul	r3, r2, r3
 3844 06e4 1B14     		asrs	r3, r3, #16
 3845 06e6 FA6D     		ldr	r2, [r7, #92]
 3846 06e8 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 94


 3847 06ea FB65     		str	r3, [r7, #92]
 3848              	.L260:
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****             // Derivative
1349:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3849              		.loc 1 1349 0
 3850 06ec FB69     		ldr	r3, [r7, #28]
 3851 06ee 002B     		cmp	r3, #0
 3852 06f0 0CD0     		beq	.L261
1350:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3853              		.loc 1 1350 0
 3854 06f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3855 06f4 4D4A     		ldr	r2, .L323+32
 3856 06f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3857 06fa FA68     		ldr	r2, [r7, #12]
 3858 06fc D31A     		subs	r3, r2, r3
 3859 06fe FA69     		ldr	r2, [r7, #28]
 3860 0700 02FB03F3 		mul	r3, r2, r3
 3861 0704 1B14     		asrs	r3, r3, #16
 3862 0706 FA6D     		ldr	r2, [r7, #92]
 3863 0708 1344     		add	r3, r3, r2
 3864 070a FB65     		str	r3, [r7, #92]
 3865              	.L261:
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****             // pwm_input saturation
1353:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3866              		.loc 1 1353 0
 3867 070c FB6D     		ldr	r3, [r7, #92]
 3868 070e 13F1640F 		cmn	r3, #100
 3869 0712 03DA     		bge	.L262
1354:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3870              		.loc 1 1354 0
 3871 0714 6FF06303 		mvn	r3, #99
 3872 0718 FB65     		str	r3, [r7, #92]
 3873 071a 04E0     		b	.L263
 3874              	.L262:
1355:..\src/interruptions.c ****             else {
1356:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3875              		.loc 1 1356 0
 3876 071c FB6D     		ldr	r3, [r7, #92]
 3877 071e 642B     		cmp	r3, #100
 3878 0720 01DD     		ble	.L263
1357:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3879              		.loc 1 1357 0
 3880 0722 6423     		movs	r3, #100
 3881 0724 FB65     		str	r3, [r7, #92]
 3882              	.L263:
1358:..\src/interruptions.c ****             }
1359:..\src/interruptions.c **** 
1360:..\src/interruptions.c ****             // Update previous current
1361:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3883              		.loc 1 1361 0
 3884 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3885 0728 4049     		ldr	r1, .L323+32
 3886 072a FA68     		ldr	r2, [r7, #12]
 3887 072c 41F82320 		str	r2, [r1, r3, lsl #2]
1362:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 95


1363:..\src/interruptions.c ****         break;
 3888              		.loc 1 1363 0
 3889 0730 3FE1     		b	.L242
 3890              	.L243:
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1366:..\src/interruptions.c ****         case CONTROL_ANGLE:
1367:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 3891              		.loc 1 1367 0
 3892 0732 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3893 0734 3E4A     		ldr	r2, .L323+36
 3894 0736 1B01     		lsls	r3, r3, #4
 3895 0738 1344     		add	r3, r3, r2
 3896 073a 1A68     		ldr	r2, [r3]
 3897 073c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3898 0740 3649     		ldr	r1, .L323+16
 3899 0742 3420     		movs	r0, #52
 3900 0744 00FB03F3 		mul	r3, r0, r3
 3901 0748 0B44     		add	r3, r3, r1
 3902 074a 1B68     		ldr	r3, [r3]
 3903 074c D31A     		subs	r3, r2, r3
 3904 074e 3B61     		str	r3, [r7, #16]
1368:..\src/interruptions.c **** 
1369:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3905              		.loc 1 1369 0
 3906 0750 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3907 0752 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3908 0754 2D49     		ldr	r1, .L323
 3909 0756 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3910 075a 3A69     		ldr	r2, [r7, #16]
 3911 075c 0A44     		add	r2, r2, r1
 3912 075e 2B49     		ldr	r1, .L323
 3913 0760 41F82320 		str	r2, [r1, r3, lsl #2]
1370:..\src/interruptions.c **** 
1371:..\src/interruptions.c ****             // anti-windup (for integral control)
1372:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 3914              		.loc 1 1372 0
 3915 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3916 0766 294A     		ldr	r2, .L323
 3917 0768 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3918 076c B3F57A7F 		cmp	r3, #1000
 3919 0770 06DD     		ble	.L264
1373:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 3920              		.loc 1 1373 0
 3921 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3922 0774 254A     		ldr	r2, .L323
 3923 0776 4FF47A71 		mov	r1, #1000
 3924 077a 42F82310 		str	r1, [r2, r3, lsl #2]
 3925 077e 0BE0     		b	.L265
 3926              	.L264:
1374:..\src/interruptions.c ****             else {
1375:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 3927              		.loc 1 1375 0
 3928 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3929 0782 224A     		ldr	r2, .L323
 3930 0784 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3931 0788 13F57A7F 		cmn	r3, #1000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 96


 3932 078c 04DA     		bge	.L265
1376:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 3933              		.loc 1 1376 0
 3934 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3935 0790 1E4A     		ldr	r2, .L323
 3936 0792 2849     		ldr	r1, .L323+40
 3937 0794 42F82310 		str	r1, [r2, r3, lsl #2]
 3938              	.L265:
1377:..\src/interruptions.c ****             }
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****             // Proportional
1380:..\src/interruptions.c ****             if (k_p != 0) 
 3939              		.loc 1 1380 0
 3940 0798 BB6C     		ldr	r3, [r7, #72]
 3941 079a 002B     		cmp	r3, #0
 3942 079c 05D0     		beq	.L266
1381:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3943              		.loc 1 1381 0
 3944 079e BB6C     		ldr	r3, [r7, #72]
 3945 07a0 3A69     		ldr	r2, [r7, #16]
 3946 07a2 02FB03F3 		mul	r3, r2, r3
 3947 07a6 1B14     		asrs	r3, r3, #16
 3948 07a8 FB65     		str	r3, [r7, #92]
 3949              	.L266:
1382:..\src/interruptions.c ****             
1383:..\src/interruptions.c **** 
1384:..\src/interruptions.c ****             // Integral
1385:..\src/interruptions.c ****             if (k_i != 0) 
 3950              		.loc 1 1385 0
 3951 07aa 7B6C     		ldr	r3, [r7, #68]
 3952 07ac 002B     		cmp	r3, #0
 3953 07ae 0AD0     		beq	.L267
1386:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 3954              		.loc 1 1386 0
 3955 07b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3956 07b2 164A     		ldr	r2, .L323
 3957 07b4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3958 07b8 7A6C     		ldr	r2, [r7, #68]
 3959 07ba 02FB03F3 		mul	r3, r2, r3
 3960 07be 1B14     		asrs	r3, r3, #16
 3961 07c0 FA6D     		ldr	r2, [r7, #92]
 3962 07c2 1344     		add	r3, r3, r2
 3963 07c4 FB65     		str	r3, [r7, #92]
 3964              	.L267:
1387:..\src/interruptions.c ****             
1388:..\src/interruptions.c **** 
1389:..\src/interruptions.c ****             // Derivative
1390:..\src/interruptions.c ****             if (k_d != 0) 
 3965              		.loc 1 1390 0
 3966 07c6 3B6C     		ldr	r3, [r7, #64]
 3967 07c8 002B     		cmp	r3, #0
 3968 07ca 0CD0     		beq	.L268
1391:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 3969              		.loc 1 1391 0
 3970 07cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3971 07ce 114A     		ldr	r2, .L323+8
 3972 07d0 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 97


 3973 07d4 3A69     		ldr	r2, [r7, #16]
 3974 07d6 D31A     		subs	r3, r2, r3
 3975 07d8 3A6C     		ldr	r2, [r7, #64]
 3976 07da 02FB03F3 		mul	r3, r2, r3
 3977 07de 1B14     		asrs	r3, r3, #16
 3978 07e0 FA6D     		ldr	r2, [r7, #92]
 3979 07e2 1344     		add	r3, r3, r2
 3980 07e4 FB65     		str	r3, [r7, #92]
 3981              	.L268:
1392:..\src/interruptions.c ****             
1393:..\src/interruptions.c **** 
1394:..\src/interruptions.c ****             // Update measure
1395:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3982              		.loc 1 1395 0
 3983 07e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3984 07e8 0A49     		ldr	r1, .L323+8
 3985 07ea 3A69     		ldr	r2, [r7, #16]
 3986 07ec 41F82320 		str	r2, [r1, r3, lsl #2]
1396:..\src/interruptions.c **** 
1397:..\src/interruptions.c ****             if (pwm_input > 0)
 3987              		.loc 1 1397 0
 3988 07f0 FB6D     		ldr	r3, [r7, #92]
 3989 07f2 002B     		cmp	r3, #0
 3990 07f4 04DD     		ble	.L269
1398:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3991              		.loc 1 1398 0
 3992 07f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3993 07f8 074A     		ldr	r2, .L323+12
 3994 07fa 0121     		movs	r1, #1
 3995 07fc D154     		strb	r1, [r2, r3]
1399:..\src/interruptions.c ****             else
1400:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1401:..\src/interruptions.c **** 
1402:..\src/interruptions.c ****         break;
 3996              		.loc 1 1402 0
 3997 07fe D8E0     		b	.L242
 3998              	.L269:
1400:..\src/interruptions.c **** 
 3999              		.loc 1 1400 0
 4000 0800 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4001 0802 054A     		ldr	r2, .L323+12
 4002 0804 0021     		movs	r1, #0
 4003 0806 D154     		strb	r1, [r2, r3]
 4004              		.loc 1 1402 0
 4005 0808 D3E0     		b	.L242
 4006              	.L324:
 4007 080a 00BF     		.align	2
 4008              	.L323:
 4009 080c B0000000 		.word	pos_error_sum.10493
 4010 0810 800F05FD 		.word	-50000000
 4011 0814 B8000000 		.word	prev_pos_err.10495
 4012 0818 C0000000 		.word	motor_dir.10498
 4013 081c 00000000 		.word	g_meas
 4014 0820 C4000000 		.word	curr_error_sum.10494
 4015 0824 A0860100 		.word	100000
 4016 0828 6079FEFF 		.word	-100000
 4017 082c CC000000 		.word	prev_curr_err.10496
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 98


 4018 0830 00000000 		.word	g_ref
 4019 0834 18FCFFFF 		.word	-1000
 4020              	.L246:
1403:..\src/interruptions.c **** 
1404:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1405:..\src/interruptions.c ****         case CONTROL_CURRENT:
1406:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4021              		.loc 1 1406 0
 4022 0838 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4023 083a 8D4A     		ldr	r2, .L325
 4024 083c 1B01     		lsls	r3, r3, #4
 4025 083e 1344     		add	r3, r3, r2
 4026 0840 0C33     		adds	r3, r3, #12
 4027 0842 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4028 0844 002B     		cmp	r3, #0
 4029 0846 00F0B180 		beq	.L316
 4030              		.loc 1 1406 0 is_stmt 0 discriminator 1
 4031 084a 8A4B     		ldr	r3, .L325+4
 4032 084c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4033 084e 002B     		cmp	r3, #0
 4034 0850 00F0AC80 		beq	.L316
1407:..\src/interruptions.c ****                 
1408:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4035              		.loc 1 1408 0 is_stmt 1
 4036 0854 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4037 0856 864A     		ldr	r2, .L325
 4038 0858 1B01     		lsls	r3, r3, #4
 4039 085a 1344     		add	r3, r3, r2
 4040 085c 0433     		adds	r3, r3, #4
 4041 085e 1B68     		ldr	r3, [r3]
 4042 0860 BB65     		str	r3, [r7, #88]
1409:..\src/interruptions.c **** 
1410:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4043              		.loc 1 1410 0
 4044 0862 3B6D     		ldr	r3, [r7, #80]
 4045 0864 B3F95C30 		ldrsh	r3, [r3, #92]
 4046 0868 1A46     		mov	r2, r3
 4047 086a BB6D     		ldr	r3, [r7, #88]
 4048 086c 9A42     		cmp	r2, r3
 4049 086e 04DA     		bge	.L272
1411:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4050              		.loc 1 1411 0
 4051 0870 3B6D     		ldr	r3, [r7, #80]
 4052 0872 B3F95C30 		ldrsh	r3, [r3, #92]
 4053 0876 BB65     		str	r3, [r7, #88]
 4054 0878 0BE0     		b	.L273
 4055              	.L272:
1412:..\src/interruptions.c ****                 else {
1413:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4056              		.loc 1 1413 0
 4057 087a 3B6D     		ldr	r3, [r7, #80]
 4058 087c B3F95C30 		ldrsh	r3, [r3, #92]
 4059 0880 5A42     		negs	r2, r3
 4060 0882 BB6D     		ldr	r3, [r7, #88]
 4061 0884 9A42     		cmp	r2, r3
 4062 0886 04DD     		ble	.L273
1414:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 99


 4063              		.loc 1 1414 0
 4064 0888 3B6D     		ldr	r3, [r7, #80]
 4065 088a B3F95C30 		ldrsh	r3, [r3, #92]
 4066 088e 5B42     		negs	r3, r3
 4067 0890 BB65     		str	r3, [r7, #88]
 4068              	.L273:
1415:..\src/interruptions.c ****                 }
1416:..\src/interruptions.c ****                 
1417:..\src/interruptions.c ****                 // current error
1418:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4069              		.loc 1 1418 0
 4070 0892 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 4071 0896 784A     		ldr	r2, .L325+8
 4072 0898 3421     		movs	r1, #52
 4073 089a 01FB03F3 		mul	r3, r1, r3
 4074 089e 1344     		add	r3, r3, r2
 4075 08a0 0C33     		adds	r3, r3, #12
 4076 08a2 1B68     		ldr	r3, [r3]
 4077 08a4 BA6D     		ldr	r2, [r7, #88]
 4078 08a6 D31A     		subs	r3, r2, r3
 4079 08a8 FB60     		str	r3, [r7, #12]
1419:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4080              		.loc 1 1419 0
 4081 08aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4082 08ac FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4083 08ae 7349     		ldr	r1, .L325+12
 4084 08b0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4085 08b4 FA68     		ldr	r2, [r7, #12]
 4086 08b6 0A44     		add	r2, r2, r1
 4087 08b8 7049     		ldr	r1, .L325+12
 4088 08ba 41F82320 		str	r2, [r1, r3, lsl #2]
1420:..\src/interruptions.c ****                 
1421:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4089              		.loc 1 1421 0
 4090 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4091 08c0 6E4A     		ldr	r2, .L325+12
 4092 08c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4093 08c6 6E4A     		ldr	r2, .L325+16
 4094 08c8 9342     		cmp	r3, r2
 4095 08ca 05DD     		ble	.L274
1422:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4096              		.loc 1 1422 0
 4097 08cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4098 08ce 6B4A     		ldr	r2, .L325+12
 4099 08d0 6B49     		ldr	r1, .L325+16
 4100 08d2 42F82310 		str	r1, [r2, r3, lsl #2]
 4101 08d6 0BE0     		b	.L275
 4102              	.L274:
1423:..\src/interruptions.c ****                 else {
1424:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4103              		.loc 1 1424 0
 4104 08d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4105 08da 684A     		ldr	r2, .L325+12
 4106 08dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4107 08e0 684A     		ldr	r2, .L325+20
 4108 08e2 9342     		cmp	r3, r2
 4109 08e4 04DA     		bge	.L275
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 100


1425:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4110              		.loc 1 1425 0
 4111 08e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4112 08e8 644A     		ldr	r2, .L325+12
 4113 08ea 6649     		ldr	r1, .L325+20
 4114 08ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4115              	.L275:
1426:..\src/interruptions.c ****                 }
1427:..\src/interruptions.c **** 
1428:..\src/interruptions.c ****                 pwm_input = 0;
 4116              		.loc 1 1428 0
 4117 08f0 0023     		movs	r3, #0
 4118 08f2 FB65     		str	r3, [r7, #92]
1429:..\src/interruptions.c **** 
1430:..\src/interruptions.c ****                 // Proportional
1431:..\src/interruptions.c ****                 if (k_p_c != 0)
 4119              		.loc 1 1431 0
 4120 08f4 FB6B     		ldr	r3, [r7, #60]
 4121 08f6 002B     		cmp	r3, #0
 4122 08f8 07D0     		beq	.L276
1432:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4123              		.loc 1 1432 0
 4124 08fa FB6B     		ldr	r3, [r7, #60]
 4125 08fc FA68     		ldr	r2, [r7, #12]
 4126 08fe 02FB03F3 		mul	r3, r2, r3
 4127 0902 1B14     		asrs	r3, r3, #16
 4128 0904 FA6D     		ldr	r2, [r7, #92]
 4129 0906 1344     		add	r3, r3, r2
 4130 0908 FB65     		str	r3, [r7, #92]
 4131              	.L276:
1433:..\src/interruptions.c **** 
1434:..\src/interruptions.c ****                 // Integral
1435:..\src/interruptions.c ****                 if (k_i_c != 0)
 4132              		.loc 1 1435 0
 4133 090a BB6B     		ldr	r3, [r7, #56]
 4134 090c 002B     		cmp	r3, #0
 4135 090e 0AD0     		beq	.L277
1436:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4136              		.loc 1 1436 0
 4137 0910 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4138 0912 5A4A     		ldr	r2, .L325+12
 4139 0914 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4140 0918 BA6B     		ldr	r2, [r7, #56]
 4141 091a 02FB03F3 		mul	r3, r2, r3
 4142 091e 1B14     		asrs	r3, r3, #16
 4143 0920 FA6D     		ldr	r2, [r7, #92]
 4144 0922 1344     		add	r3, r3, r2
 4145 0924 FB65     		str	r3, [r7, #92]
 4146              	.L277:
1437:..\src/interruptions.c **** 
1438:..\src/interruptions.c ****                 // Derivative
1439:..\src/interruptions.c ****                 if (k_d_c != 0)
 4147              		.loc 1 1439 0
 4148 0926 7B6B     		ldr	r3, [r7, #52]
 4149 0928 002B     		cmp	r3, #0
 4150 092a 0CD0     		beq	.L278
1440:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 101


 4151              		.loc 1 1440 0
 4152 092c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4153 092e 564A     		ldr	r2, .L325+24
 4154 0930 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4155 0934 FA68     		ldr	r2, [r7, #12]
 4156 0936 D31A     		subs	r3, r2, r3
 4157 0938 7A6B     		ldr	r2, [r7, #52]
 4158 093a 02FB03F3 		mul	r3, r2, r3
 4159 093e 1B14     		asrs	r3, r3, #16
 4160 0940 FA6D     		ldr	r2, [r7, #92]
 4161 0942 1344     		add	r3, r3, r2
 4162 0944 FB65     		str	r3, [r7, #92]
 4163              	.L278:
1441:..\src/interruptions.c ****                 
1442:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4164              		.loc 1 1442 0
 4165 0946 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4166 0948 4F49     		ldr	r1, .L325+24
 4167 094a FA68     		ldr	r2, [r7, #12]
 4168 094c 41F82320 		str	r2, [r1, r3, lsl #2]
1443:..\src/interruptions.c ****                 
1444:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4169              		.loc 1 1444 0
 4170 0950 FB6D     		ldr	r3, [r7, #92]
 4171 0952 002B     		cmp	r3, #0
 4172 0954 04DB     		blt	.L279
1445:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4173              		.loc 1 1445 0
 4174 0956 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4175 0958 4C4A     		ldr	r2, .L325+28
 4176 095a 0121     		movs	r1, #1
 4177 095c D154     		strb	r1, [r2, r3]
1446:..\src/interruptions.c ****                 else
1447:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1448:..\src/interruptions.c ****             }
1449:..\src/interruptions.c ****         break;
 4178              		.loc 1 1449 0
 4179 095e 25E0     		b	.L316
 4180              	.L279:
1447:..\src/interruptions.c ****             }
 4181              		.loc 1 1447 0
 4182 0960 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4183 0962 4A4A     		ldr	r2, .L325+28
 4184 0964 0021     		movs	r1, #0
 4185 0966 D154     		strb	r1, [r2, r3]
 4186              		.loc 1 1449 0
 4187 0968 20E0     		b	.L316
 4188              	.L245:
1450:..\src/interruptions.c ****         
1451:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1452:..\src/interruptions.c ****         case CONTROL_PWM:
1453:..\src/interruptions.c **** 
1454:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4189              		.loc 1 1454 0
 4190 096a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4191 096c 404A     		ldr	r2, .L325
 4192 096e 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 102


 4193 0970 1344     		add	r3, r3, r2
 4194 0972 0833     		adds	r3, r3, #8
 4195 0974 1B68     		ldr	r3, [r3]
 4196 0976 FB65     		str	r3, [r7, #92]
1455:..\src/interruptions.c **** 
1456:..\src/interruptions.c ****             if (pwm_input > 0) 
 4197              		.loc 1 1456 0
 4198 0978 FB6D     		ldr	r3, [r7, #92]
 4199 097a 002B     		cmp	r3, #0
 4200 097c 04DD     		ble	.L280
1457:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4201              		.loc 1 1457 0
 4202 097e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4203 0980 424A     		ldr	r2, .L325+28
 4204 0982 0121     		movs	r1, #1
 4205 0984 D154     		strb	r1, [r2, r3]
 4206 0986 03E0     		b	.L281
 4207              	.L280:
1458:..\src/interruptions.c ****             else 
1459:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4208              		.loc 1 1459 0
 4209 0988 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4210 098a 404A     		ldr	r2, .L325+28
 4211 098c 0021     		movs	r1, #0
 4212 098e D154     		strb	r1, [r2, r3]
 4213              	.L281:
1460:..\src/interruptions.c ****             
1461:..\src/interruptions.c **** 
1462:..\src/interruptions.c ****             // pwm_input saturation
1463:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4214              		.loc 1 1463 0
 4215 0990 FB6D     		ldr	r3, [r7, #92]
 4216 0992 13F1640F 		cmn	r3, #100
 4217 0996 03DA     		bge	.L282
1464:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4218              		.loc 1 1464 0
 4219 0998 6FF06303 		mvn	r3, #99
 4220 099c FB65     		str	r3, [r7, #92]
1465:..\src/interruptions.c ****             else {
1466:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1467:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1468:..\src/interruptions.c ****         	}
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****         break;
 4221              		.loc 1 1470 0
 4222 099e 07E0     		b	.L317
 4223              	.L282:
1466:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4224              		.loc 1 1466 0
 4225 09a0 FB6D     		ldr	r3, [r7, #92]
 4226 09a2 642B     		cmp	r3, #100
 4227 09a4 04DD     		ble	.L317
1467:..\src/interruptions.c ****         	}
 4228              		.loc 1 1467 0
 4229 09a6 6423     		movs	r3, #100
 4230 09a8 FB65     		str	r3, [r7, #92]
 4231              		.loc 1 1470 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 103


 4232 09aa 01E0     		b	.L317
 4233              	.L316:
1449:..\src/interruptions.c ****         
 4234              		.loc 1 1449 0
 4235 09ac 00BF     		nop
 4236 09ae 00E0     		b	.L242
 4237              	.L317:
 4238              		.loc 1 1470 0
 4239 09b0 00BF     		nop
 4240              	.L242:
1471:..\src/interruptions.c ****             
1472:..\src/interruptions.c ****     }
1473:..\src/interruptions.c **** 
1474:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1475:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1476:..\src/interruptions.c **** 
1477:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4241              		.loc 1 1477 0
 4242 09b2 FB6D     		ldr	r3, [r7, #92]
 4243 09b4 642B     		cmp	r3, #100
 4244 09b6 01DD     		ble	.L284
1478:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4245              		.loc 1 1478 0
 4246 09b8 6423     		movs	r3, #100
 4247 09ba FB65     		str	r3, [r7, #92]
 4248              	.L284:
1479:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4249              		.loc 1 1479 0
 4250 09bc FB6D     		ldr	r3, [r7, #92]
 4251 09be 13F1640F 		cmn	r3, #100
 4252 09c2 02DA     		bge	.L285
1480:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4253              		.loc 1 1480 0
 4254 09c4 6FF06303 		mvn	r3, #99
 4255 09c8 FB65     		str	r3, [r7, #92]
 4256              	.L285:
1481:..\src/interruptions.c **** 
1482:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4257              		.loc 1 1482 0
 4258 09ca 3B6D     		ldr	r3, [r7, #80]
 4259 09cc 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4260 09d0 012B     		cmp	r3, #1
 4261 09d2 0DD0     		beq	.L286
1483:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4262              		.loc 1 1483 0
 4263 09d4 FB6D     		ldr	r3, [r7, #92]
 4264 09d6 9B02     		lsls	r3, r3, #10
 4265 09d8 2D4A     		ldr	r2, .L325+32
 4266 09da 82FB0312 		smull	r1, r2, r2, r3
 4267 09de 5211     		asrs	r2, r2, #5
 4268 09e0 DB17     		asrs	r3, r3, #31
 4269 09e2 D31A     		subs	r3, r2, r3
 4270 09e4 2B4A     		ldr	r2, .L325+36
 4271 09e6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4272 09e8 02FB03F3 		mul	r3, r2, r3
 4273 09ec 9B12     		asrs	r3, r3, #10
 4274 09ee FB65     		str	r3, [r7, #92]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 104


 4275              	.L286:
1484:..\src/interruptions.c ****  
1485:..\src/interruptions.c ****     //// RATE LIMITER ////
1486:..\src/interruptions.c ****        if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4276              		.loc 1 1486 0
 4277 09f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4278 09f2 294A     		ldr	r2, .L325+40
 4279 09f4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4280 09f8 FA6D     		ldr	r2, [r7, #92]
 4281 09fa D31A     		subs	r3, r2, r3
 4282 09fc 3A6D     		ldr	r2, [r7, #80]
 4283 09fe 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4284 0a02 9342     		cmp	r3, r2
 4285 0a04 09DD     		ble	.L287
1487:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4286              		.loc 1 1487 0
 4287 0a06 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4288 0a08 234A     		ldr	r2, .L325+40
 4289 0a0a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4290 0a0e 3A6D     		ldr	r2, [r7, #80]
 4291 0a10 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4292 0a14 1344     		add	r3, r3, r2
 4293 0a16 FB65     		str	r3, [r7, #92]
 4294 0a18 14E0     		b	.L288
 4295              	.L287:
1488:..\src/interruptions.c ****     }
1489:..\src/interruptions.c ****     else {
1490:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4296              		.loc 1 1490 0
 4297 0a1a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4298 0a1c 1E4A     		ldr	r2, .L325+40
 4299 0a1e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4300 0a22 FA6D     		ldr	r2, [r7, #92]
 4301 0a24 D21A     		subs	r2, r2, r3
 4302 0a26 3B6D     		ldr	r3, [r7, #80]
 4303 0a28 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4304 0a2c 5B42     		negs	r3, r3
 4305 0a2e 9A42     		cmp	r2, r3
 4306 0a30 08DA     		bge	.L288
1491:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4307              		.loc 1 1491 0
 4308 0a32 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4309 0a34 184A     		ldr	r2, .L325+40
 4310 0a36 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4311 0a3a 3A6D     		ldr	r2, [r7, #80]
 4312 0a3c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4313 0a40 9B1A     		subs	r3, r3, r2
 4314 0a42 FB65     		str	r3, [r7, #92]
 4315              	.L288:
1492:..\src/interruptions.c ****     }
1493:..\src/interruptions.c ****     
1494:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4316              		.loc 1 1494 0
 4317 0a44 FB6D     		ldr	r3, [r7, #92]
 4318 0a46 642B     		cmp	r3, #100
 4319 0a48 01DD     		ble	.L289
1495:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 105


 4320              		.loc 1 1495 0
 4321 0a4a 6423     		movs	r3, #100
 4322 0a4c FB65     		str	r3, [r7, #92]
 4323              	.L289:
1496:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4324              		.loc 1 1496 0
 4325 0a4e FB6D     		ldr	r3, [r7, #92]
 4326 0a50 13F1640F 		cmn	r3, #100
 4327 0a54 02DA     		bge	.L290
1497:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4328              		.loc 1 1497 0
 4329 0a56 6FF06303 		mvn	r3, #99
 4330 0a5a FB65     		str	r3, [r7, #92]
 4331              	.L290:
1498:..\src/interruptions.c ****     
1499:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4332              		.loc 1 1499 0
 4333 0a5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4334 0a5e 0E49     		ldr	r1, .L325+40
 4335 0a60 FA6D     		ldr	r2, [r7, #92]
 4336 0a62 41F82320 		str	r2, [r1, r3, lsl #2]
1500:..\src/interruptions.c **** 	
1501:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4337              		.loc 1 1501 0
 4338 0a66 FB6D     		ldr	r3, [r7, #92]
 4339 0a68 002B     		cmp	r3, #0
 4340 0a6a 17DB     		blt	.L291
 4341              		.loc 1 1501 0 is_stmt 0 discriminator 1
 4342 0a6c 0122     		movs	r2, #1
 4343 0a6e 17E0     		b	.L292
 4344              	.L326:
 4345              		.align	2
 4346              	.L325:
 4347 0a70 00000000 		.word	g_ref
 4348 0a74 00000000 		.word	tension_valid
 4349 0a78 00000000 		.word	g_meas
 4350 0a7c C4000000 		.word	curr_error_sum.10494
 4351 0a80 A0860100 		.word	100000
 4352 0a84 6079FEFF 		.word	-100000
 4353 0a88 CC000000 		.word	prev_curr_err.10496
 4354 0a8c C0000000 		.word	motor_dir.10498
 4355 0a90 1F85EB51 		.word	1374389535
 4356 0a94 00000000 		.word	dev_pwm_limit
 4357 0a98 D4000000 		.word	prev_pwm.10497
 4358              	.L291:
 4359              		.loc 1 1501 0 discriminator 2
 4360 0a9c 4FF0FF32 		mov	r2, #-1
 4361              	.L292:
 4362              		.loc 1 1501 0 discriminator 4
 4363 0aa0 834B     		ldr	r3, .L327
 4364 0aa2 1A70     		strb	r2, [r3]
1502:..\src/interruptions.c ****     
1503:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4365              		.loc 1 1503 0 is_stmt 1 discriminator 4
 4366 0aa4 3B6D     		ldr	r3, [r7, #80]
 4367 0aa6 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4368 0aaa 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 106


 4369 0aac 40F0AA80 		bne	.L293
1504:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1505:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4370              		.loc 1 1505 0
 4371 0ab0 3B6D     		ldr	r3, [r7, #80]
 4372 0ab2 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4373 0ab6 012B     		cmp	r3, #1
 4374 0ab8 00F09F80 		beq	.L294
 4375              		.loc 1 1505 0 is_stmt 0 discriminator 1
 4376 0abc 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4377 0ac0 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4378 0ac2 7C48     		ldr	r0, .L327+4
 4379 0ac4 1346     		mov	r3, r2
 4380 0ac6 5B00     		lsls	r3, r3, #1
 4381 0ac8 1344     		add	r3, r3, r2
 4382 0aca 9B00     		lsls	r3, r3, #2
 4383 0acc 1344     		add	r3, r3, r2
 4384 0ace 0B44     		add	r3, r3, r1
 4385 0ad0 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4386 0ad4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4387 0ad8 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4388 0ada 774C     		ldr	r4, .L327+8
 4389 0adc 1346     		mov	r3, r2
 4390 0ade 5B00     		lsls	r3, r3, #1
 4391 0ae0 1344     		add	r3, r3, r2
 4392 0ae2 9B00     		lsls	r3, r3, #2
 4393 0ae4 1344     		add	r3, r3, r2
 4394 0ae6 0344     		add	r3, r3, r0
 4395 0ae8 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4396 0aec CB1A     		subs	r3, r1, r3
 4397 0aee 312B     		cmp	r3, #49
 4398 0af0 00F38380 		bgt	.L294
1506:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4399              		.loc 1 1506 0 is_stmt 1 discriminator 2
 4400 0af4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4401 0af8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4402 0afa 6E48     		ldr	r0, .L327+4
 4403 0afc 1346     		mov	r3, r2
 4404 0afe 5B00     		lsls	r3, r3, #1
 4405 0b00 1344     		add	r3, r3, r2
 4406 0b02 9B00     		lsls	r3, r3, #2
 4407 0b04 1344     		add	r3, r3, r2
 4408 0b06 0B44     		add	r3, r3, r1
 4409 0b08 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4410 0b0c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4411 0b10 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4412 0b12 694C     		ldr	r4, .L327+8
 4413 0b14 1346     		mov	r3, r2
 4414 0b16 5B00     		lsls	r3, r3, #1
 4415 0b18 1344     		add	r3, r3, r2
 4416 0b1a 9B00     		lsls	r3, r3, #2
 4417 0b1c 1344     		add	r3, r3, r2
 4418 0b1e 0344     		add	r3, r3, r0
 4419 0b20 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4420 0b24 CB1A     		subs	r3, r1, r3
1505:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4421              		.loc 1 1505 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 107


 4422 0b26 13F1310F 		cmn	r3, #49
 4423 0b2a 66DB     		blt	.L294
1507:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4424              		.loc 1 1507 0
 4425 0b2c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4426 0b2e 634A     		ldr	r2, .L327+12
 4427 0b30 1B01     		lsls	r3, r3, #4
 4428 0b32 1344     		add	r3, r3, r2
 4429 0b34 1A68     		ldr	r2, [r3]
 4430 0b36 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4431 0b38 6149     		ldr	r1, .L327+16
 4432 0b3a 1B01     		lsls	r3, r3, #4
 4433 0b3c 0B44     		add	r3, r3, r1
 4434 0b3e 1B68     		ldr	r3, [r3]
 4435 0b40 D31A     		subs	r3, r2, r3
1506:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4436              		.loc 1 1506 0
 4437 0b42 632B     		cmp	r3, #99
 4438 0b44 59DC     		bgt	.L294
 4439              		.loc 1 1507 0
 4440 0b46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4441 0b48 5C4A     		ldr	r2, .L327+12
 4442 0b4a 1B01     		lsls	r3, r3, #4
 4443 0b4c 1344     		add	r3, r3, r2
 4444 0b4e 1A68     		ldr	r2, [r3]
 4445 0b50 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4446 0b52 5B49     		ldr	r1, .L327+16
 4447 0b54 1B01     		lsls	r3, r3, #4
 4448 0b56 0B44     		add	r3, r3, r1
 4449 0b58 1B68     		ldr	r3, [r3]
 4450 0b5a D31A     		subs	r3, r2, r3
 4451 0b5c 13F1630F 		cmn	r3, #99
 4452 0b60 4BDB     		blt	.L294
1508:..\src/interruptions.c ****             position_counter[idx]++;
 4453              		.loc 1 1508 0
 4454 0b62 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4455 0b64 574A     		ldr	r2, .L327+20
 4456 0b66 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4457 0b6a 0132     		adds	r2, r2, #1
 4458 0b6c 5549     		ldr	r1, .L327+20
 4459 0b6e 41F82320 		str	r2, [r1, r3, lsl #2]
1509:..\src/interruptions.c ****             
1510:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4460              		.loc 1 1510 0
 4461 0b72 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4462 0b74 534A     		ldr	r2, .L327+20
 4463 0b76 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4464 0b7a F92B     		cmp	r3, #249
 4465 0b7c 42D9     		bls	.L293
1511:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4466              		.loc 1 1511 0
 4467 0b7e 3B6D     		ldr	r3, [r7, #80]
 4468 0b80 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4469 0b84 002B     		cmp	r3, #0
 4470 0b86 10D1     		bne	.L296
 4471              		.loc 1 1511 0 is_stmt 0 discriminator 1
 4472 0b88 4F4B     		ldr	r3, .L327+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 108


 4473 0b8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4474 0b8c 002B     		cmp	r3, #0
 4475 0b8e 0CD1     		bne	.L296
1512:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4476              		.loc 1 1512 0 is_stmt 1
 4477 0b90 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4478 0b92 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4479 0b96 4849     		ldr	r1, .L327+8
 4480 0b98 3420     		movs	r0, #52
 4481 0b9a 00FB02F2 		mul	r2, r0, r2
 4482 0b9e 0A44     		add	r2, r2, r1
 4483 0ba0 1268     		ldr	r2, [r2]
 4484 0ba2 4A49     		ldr	r1, .L327+28
 4485 0ba4 1B01     		lsls	r3, r3, #4
 4486 0ba6 0B44     		add	r3, r3, r1
 4487 0ba8 1A60     		str	r2, [r3]
 4488              	.L296:
1513:..\src/interruptions.c ****                 }
1514:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4489              		.loc 1 1514 0
 4490 0baa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4491 0bac 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4492 0bb0 4149     		ldr	r1, .L327+8
 4493 0bb2 3420     		movs	r0, #52
 4494 0bb4 00FB02F2 		mul	r2, r0, r2
 4495 0bb8 0A44     		add	r2, r2, r1
 4496 0bba 1268     		ldr	r2, [r2]
 4497 0bbc 4049     		ldr	r1, .L327+16
 4498 0bbe 1B01     		lsls	r3, r3, #4
 4499 0bc0 0B44     		add	r3, r3, r1
 4500 0bc2 1A60     		str	r2, [r3]
1515:..\src/interruptions.c ****                 
1516:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4501              		.loc 1 1516 0
 4502 0bc4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4503 0bc6 3F4A     		ldr	r2, .L327+20
 4504 0bc8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4505 0bcc FA2B     		cmp	r3, #250
 4506 0bce 11D1     		bne	.L297
1517:..\src/interruptions.c ****                     // To do only once
1518:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4507              		.loc 1 1518 0
 4508 0bd0 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 4509 0bd4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4510 0bd8 3749     		ldr	r1, .L327+8
 4511 0bda 3420     		movs	r0, #52
 4512 0bdc 00FB02F2 		mul	r2, r0, r2
 4513 0be0 0A44     		add	r2, r2, r1
 4514 0be2 0C32     		adds	r2, r2, #12
 4515 0be4 1268     		ldr	r2, [r2]
 4516 0be6 3449     		ldr	r1, .L327+8
 4517 0be8 3420     		movs	r0, #52
 4518 0bea 00FB03F3 		mul	r3, r0, r3
 4519 0bee 0B44     		add	r3, r3, r1
 4520 0bf0 1433     		adds	r3, r3, #20
 4521 0bf2 1A60     		str	r2, [r3]
 4522              	.L297:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 109


1519:..\src/interruptions.c ****                 }
1520:..\src/interruptions.c ****                 pwm_input = 0;            
 4523              		.loc 1 1520 0
 4524 0bf4 0023     		movs	r3, #0
 4525 0bf6 FB65     		str	r3, [r7, #92]
1510:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4526              		.loc 1 1510 0
 4527 0bf8 04E0     		b	.L293
 4528              	.L294:
1521:..\src/interruptions.c ****             }
1522:..\src/interruptions.c ****         }
1523:..\src/interruptions.c ****         else {
1524:..\src/interruptions.c ****             position_counter[idx] = 0;
 4529              		.loc 1 1524 0
 4530 0bfa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4531 0bfc 314A     		ldr	r2, .L327+20
 4532 0bfe 0021     		movs	r1, #0
 4533 0c00 42F82310 		str	r1, [r2, r3, lsl #2]
 4534              	.L293:
1525:..\src/interruptions.c ****         }
1526:..\src/interruptions.c ****     }
1527:..\src/interruptions.c ****     
1528:..\src/interruptions.c ****     // Set motor direction and write pwm value
1529:..\src/interruptions.c ****     switch (idx) {
 4535              		.loc 1 1529 0
 4536 0c04 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4537 0c06 002B     		cmp	r3, #0
 4538 0c08 02D0     		beq	.L299
 4539 0c0a 012B     		cmp	r3, #1
 4540 0c0c 26D0     		beq	.L300
1530:..\src/interruptions.c ****         case 0:         // Motor 1
1531:..\src/interruptions.c ****             if (motor_dir[idx])
1532:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1533:..\src/interruptions.c ****             else
1534:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1535:..\src/interruptions.c ****             
1536:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1537:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1538:..\src/interruptions.c ****             }
1539:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1540:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1541:..\src/interruptions.c ****             }
1542:..\src/interruptions.c ****             
1543:..\src/interruptions.c ****             break;
1544:..\src/interruptions.c ****         case 1:         // Motor 2
1545:..\src/interruptions.c ****             
1546:..\src/interruptions.c ****             if (motor_dir[idx])
1547:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1548:..\src/interruptions.c ****             else
1549:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1550:..\src/interruptions.c ****             
1551:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1552:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1553:..\src/interruptions.c ****             }
1554:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1555:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1556:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 110


1557:..\src/interruptions.c ****             
1558:..\src/interruptions.c ****             break;
1559:..\src/interruptions.c ****         default:
1560:..\src/interruptions.c ****             break;
 4541              		.loc 1 1560 0
 4542 0c0e 4BE0     		b	.L305
 4543              	.L299:
1531:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4544              		.loc 1 1531 0
 4545 0c10 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4546 0c12 2F4A     		ldr	r2, .L327+32
 4547 0c14 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4548 0c16 002B     		cmp	r3, #0
 4549 0c18 03D0     		beq	.L301
1532:..\src/interruptions.c ****             else
 4550              		.loc 1 1532 0
 4551 0c1a 0120     		movs	r0, #1
 4552 0c1c FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4553 0c20 02E0     		b	.L302
 4554              	.L301:
1534:..\src/interruptions.c ****             
 4555              		.loc 1 1534 0
 4556 0c22 0020     		movs	r0, #0
 4557 0c24 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4558              	.L302:
1536:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4559              		.loc 1 1536 0
 4560 0c28 3B6D     		ldr	r3, [r7, #80]
 4561 0c2a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4562 0c2e 012B     		cmp	r3, #1
 4563 0c30 0BD1     		bne	.L303
1537:..\src/interruptions.c ****             }
 4564              		.loc 1 1537 0
 4565 0c32 FB6D     		ldr	r3, [r7, #92]
 4566 0c34 002B     		cmp	r3, #0
 4567 0c36 B8BF     		it	lt
 4568 0c38 5B42     		rsblt	r3, r3, #0
 4569 0c3a DBB2     		uxtb	r3, r3
 4570 0c3c C3F16403 		rsb	r3, r3, #100
 4571 0c40 DBB2     		uxtb	r3, r3
 4572 0c42 1846     		mov	r0, r3
 4573 0c44 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1543:..\src/interruptions.c ****         case 1:         // Motor 2
 4574              		.loc 1 1543 0
 4575 0c48 2EE0     		b	.L305
 4576              	.L303:
1540:..\src/interruptions.c ****             }
 4577              		.loc 1 1540 0
 4578 0c4a FB6D     		ldr	r3, [r7, #92]
 4579 0c4c 002B     		cmp	r3, #0
 4580 0c4e B8BF     		it	lt
 4581 0c50 5B42     		rsblt	r3, r3, #0
 4582 0c52 DBB2     		uxtb	r3, r3
 4583 0c54 1846     		mov	r0, r3
 4584 0c56 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1543:..\src/interruptions.c ****         case 1:         // Motor 2
 4585              		.loc 1 1543 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 111


 4586 0c5a 25E0     		b	.L305
 4587              	.L300:
1546:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4588              		.loc 1 1546 0
 4589 0c5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4590 0c5e 1C4A     		ldr	r2, .L327+32
 4591 0c60 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4592 0c62 002B     		cmp	r3, #0
 4593 0c64 03D0     		beq	.L306
1547:..\src/interruptions.c ****             else
 4594              		.loc 1 1547 0
 4595 0c66 0120     		movs	r0, #1
 4596 0c68 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4597 0c6c 02E0     		b	.L307
 4598              	.L306:
1549:..\src/interruptions.c ****             
 4599              		.loc 1 1549 0
 4600 0c6e 0020     		movs	r0, #0
 4601 0c70 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4602              	.L307:
1551:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4603              		.loc 1 1551 0
 4604 0c74 3B6D     		ldr	r3, [r7, #80]
 4605 0c76 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4606 0c7a 012B     		cmp	r3, #1
 4607 0c7c 0BD1     		bne	.L308
1552:..\src/interruptions.c ****             }
 4608              		.loc 1 1552 0
 4609 0c7e FB6D     		ldr	r3, [r7, #92]
 4610 0c80 002B     		cmp	r3, #0
 4611 0c82 B8BF     		it	lt
 4612 0c84 5B42     		rsblt	r3, r3, #0
 4613 0c86 DBB2     		uxtb	r3, r3
 4614 0c88 C3F16403 		rsb	r3, r3, #100
 4615 0c8c DBB2     		uxtb	r3, r3
 4616 0c8e 1846     		mov	r0, r3
 4617 0c90 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1558:..\src/interruptions.c ****         default:
 4618              		.loc 1 1558 0
 4619 0c94 07E0     		b	.L318
 4620              	.L308:
1555:..\src/interruptions.c ****             }
 4621              		.loc 1 1555 0
 4622 0c96 FB6D     		ldr	r3, [r7, #92]
 4623 0c98 002B     		cmp	r3, #0
 4624 0c9a B8BF     		it	lt
 4625 0c9c 5B42     		rsblt	r3, r3, #0
 4626 0c9e DBB2     		uxtb	r3, r3
 4627 0ca0 1846     		mov	r0, r3
 4628 0ca2 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4629              	.L318:
1558:..\src/interruptions.c ****         default:
 4630              		.loc 1 1558 0
 4631 0ca6 00BF     		nop
 4632              	.L305:
1561:..\src/interruptions.c ****     }
1562:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 112


1563:..\src/interruptions.c **** }
 4633              		.loc 1 1563 0
 4634 0ca8 00BF     		nop
 4635 0caa 6437     		adds	r7, r7, #100
 4636              		.cfi_def_cfa_offset 12
 4637 0cac BD46     		mov	sp, r7
 4638              		.cfi_def_cfa_register 13
 4639              		@ sp needed
 4640 0cae 90BD     		pop	{r4, r7, pc}
 4641              	.L328:
 4642              		.align	2
 4643              	.L327:
 4644 0cb0 00000000 		.word	pwm_sign
 4645 0cb4 00000000 		.word	g_measOld
 4646 0cb8 00000000 		.word	g_meas
 4647 0cbc 00000000 		.word	g_refOld
 4648 0cc0 00000000 		.word	g_ref
 4649 0cc4 DC000000 		.word	position_counter.10499
 4650 0cc8 00000000 		.word	change_ext_ref_flag
 4651 0ccc 00000000 		.word	g_refNew
 4652 0cd0 C0000000 		.word	motor_dir.10498
 4653              		.cfi_endproc
 4654              	.LFE69:
 4655              		.size	motor_control_generic, .-motor_control_generic
 4656              		.global	__aeabi_fcmpeq
 4657              		.global	__aeabi_fmul
 4658              		.global	__aeabi_f2iz
 4659              		.global	__aeabi_fcmplt
 4660              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4661              		.align	2
 4662              		.global	encoder_reading_SPI
 4663              		.thumb
 4664              		.thumb_func
 4665              		.type	encoder_reading_SPI, %function
 4666              	encoder_reading_SPI:
 4667              	.LFB70:
1564:..\src/interruptions.c **** 
1565:..\src/interruptions.c **** //==============================================================================
1566:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1567:..\src/interruptions.c **** //==============================================================================
1568:..\src/interruptions.c **** 
1569:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4668              		.loc 1 1569 0
 4669              		.cfi_startproc
 4670              		@ args = 0, pretend = 0, frame = 48
 4671              		@ frame_needed = 1, uses_anonymous_args = 0
 4672 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4673              		.cfi_def_cfa_offset 20
 4674              		.cfi_offset 4, -20
 4675              		.cfi_offset 5, -16
 4676              		.cfi_offset 6, -12
 4677              		.cfi_offset 7, -8
 4678              		.cfi_offset 14, -4
 4679 0002 8FB0     		sub	sp, sp, #60
 4680              		.cfi_def_cfa_offset 80
 4681 0004 02AF     		add	r7, sp, #8
 4682              		.cfi_def_cfa 7, 72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 113


 4683 0006 0346     		mov	r3, r0
 4684 0008 0A46     		mov	r2, r1
 4685 000a FB71     		strb	r3, [r7, #7]
 4686 000c 1346     		mov	r3, r2
 4687 000e BB71     		strb	r3, [r7, #6]
1570:..\src/interruptions.c **** 
1571:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4688              		.loc 1 1571 0
 4689 0010 0023     		movs	r3, #0
 4690 0012 87F82F30 		strb	r3, [r7, #47]
1572:..\src/interruptions.c ****     
1573:..\src/interruptions.c ****     // Encoder Variables  
1574:..\src/interruptions.c ****     uint8 jj;
1575:..\src/interruptions.c ****      
1576:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1577:..\src/interruptions.c ****     int16 tmp_value_encoder;
1578:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1579:..\src/interruptions.c ****     int32 value_encoder;
1580:..\src/interruptions.c ****     int32 speed_encoder;
1581:..\src/interruptions.c ****     int32 value_diff;
1582:..\src/interruptions.c **** 	int8 init_rot = 0;
 4691              		.loc 1 1582 0
 4692 0016 0023     		movs	r3, #0
 4693 0018 87F82730 		strb	r3, [r7, #39]
1583:..\src/interruptions.c **** 
1584:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1585:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1586:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1587:..\src/interruptions.c ****     
1588:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1589:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1590:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1591:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1592:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1593:..\src/interruptions.c **** 
1594:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1595:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1596:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1597:..\src/interruptions.c **** //    
1598:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4694              		.loc 1 1598 0
 4695 001c 8E4B     		ldr	r3, .L365
 4696 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4697 0020 002B     		cmp	r3, #0
 4698 0022 18D0     		beq	.L330
1599:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4699              		.loc 1 1599 0
 4700 0024 0323     		movs	r3, #3
 4701 0026 87F82E30 		strb	r3, [r7, #46]
 4702 002a 0AE0     		b	.L331
 4703              	.L332:
1600:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4704              		.loc 1 1600 0
 4705 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4706 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4707 0032 8A48     		ldr	r0, .L365+4
 4708 0034 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 114


 4709 0036 5B00     		lsls	r3, r3, #1
 4710 0038 1344     		add	r3, r3, r2
 4711 003a 0B44     		add	r3, r3, r1
 4712 003c 0022     		movs	r2, #0
 4713 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4714              	.L331:
1599:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4715              		.loc 1 1599 0 discriminator 1
 4716 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4717 0046 5A1E     		subs	r2, r3, #1
 4718 0048 87F82E20 		strb	r2, [r7, #46]
 4719 004c 002B     		cmp	r3, #0
 4720 004e EDD1     		bne	.L332
1601:..\src/interruptions.c ****         
1602:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4721              		.loc 1 1602 0
 4722 0050 814B     		ldr	r3, .L365
 4723 0052 0022     		movs	r2, #0
 4724 0054 1A70     		strb	r2, [r3]
 4725              	.L330:
1603:..\src/interruptions.c ****     }
1604:..\src/interruptions.c **** 
1605:..\src/interruptions.c ****     //======================================================     reading sensors
1606:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4726              		.loc 1 1606 0
 4727 0056 0023     		movs	r3, #0
 4728 0058 87F82F30 		strb	r3, [r7, #47]
 4729 005c 0DE0     		b	.L333
 4730              	.L334:
1607:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4731              		.loc 1 1607 0 discriminator 3
 4732 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4733 0062 9B00     		lsls	r3, r3, #2
 4734 0064 07F13002 		add	r2, r7, #48
 4735 0068 1344     		add	r3, r3, r2
 4736 006a 0022     		movs	r2, #0
 4737 006c 43F8282C 		str	r2, [r3, #-40]
1606:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4738              		.loc 1 1606 0 discriminator 3
 4739 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4740 0074 0133     		adds	r3, r3, #1
 4741 0076 87F82F30 		strb	r3, [r7, #47]
 4742              	.L333:
1606:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4743              		.loc 1 1606 0 is_stmt 0 discriminator 1
 4744 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4745 007e 022B     		cmp	r3, #2
 4746 0080 EDD9     		bls	.L334
1608:..\src/interruptions.c ****     }   
1609:..\src/interruptions.c ****     
1610:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4747              		.loc 1 1610 0 is_stmt 1
 4748 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4749 0084 764A     		ldr	r2, .L365+8
 4750 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4751 0088 1A46     		mov	r2, r3
 4752 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 115


 4753 008c 1946     		mov	r1, r3
 4754 008e 1046     		mov	r0, r2
 4755 0090 FFF7FEFF 		bl	ReadEncoderLine
 4756              	.LBB3:
1611:..\src/interruptions.c ****                                                                         //CS1 for left hand
1612:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4757              		.loc 1 1612 0
 4758 0094 0023     		movs	r3, #0
 4759 0096 3B62     		str	r3, [r7, #32]
 4760 0098 2EE0     		b	.L335
 4761              	.L337:
1613:..\src/interruptions.c ****         
1614:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1615:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4762              		.loc 1 1615 0
 4763 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4764 009c 7149     		ldr	r1, .L365+12
 4765 009e 1346     		mov	r3, r2
 4766 00a0 5B00     		lsls	r3, r3, #1
 4767 00a2 1344     		add	r3, r3, r2
 4768 00a4 1B01     		lsls	r3, r3, #4
 4769 00a6 CA18     		adds	r2, r1, r3
 4770 00a8 3B6A     		ldr	r3, [r7, #32]
 4771 00aa 1344     		add	r3, r3, r2
 4772 00ac 03F2B113 		addw	r3, r3, #433
 4773 00b0 1B78     		ldrb	r3, [r3]
 4774 00b2 87F82F30 		strb	r3, [r7, #47]
1616:..\src/interruptions.c ****         
1617:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4775              		.loc 1 1617 0
 4776 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4777 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4778 00bc 6A48     		ldr	r0, .L365+16
 4779 00be 1346     		mov	r3, r2
 4780 00c0 9B00     		lsls	r3, r3, #2
 4781 00c2 1344     		add	r3, r3, r2
 4782 00c4 0344     		add	r3, r3, r0
 4783 00c6 0B44     		add	r3, r3, r1
 4784 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4785 00ca 0F2B     		cmp	r3, #15
 4786 00cc 11D9     		bls	.L336
1618:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4787              		.loc 1 1618 0
 4788 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4789 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4790 00d4 6548     		ldr	r0, .L365+20
 4791 00d6 1346     		mov	r3, r2
 4792 00d8 9B00     		lsls	r3, r3, #2
 4793 00da 1344     		add	r3, r3, r2
 4794 00dc 0B44     		add	r3, r3, r1
 4795 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4796 00e2 1A46     		mov	r2, r3
 4797 00e4 3B6A     		ldr	r3, [r7, #32]
 4798 00e6 9B00     		lsls	r3, r3, #2
 4799 00e8 07F13001 		add	r1, r7, #48
 4800 00ec 0B44     		add	r3, r3, r1
 4801 00ee 43F8282C 		str	r2, [r3, #-40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 116


 4802              	.L336:
1612:..\src/interruptions.c ****         
 4803              		.loc 1 1612 0 discriminator 2
 4804 00f2 3B6A     		ldr	r3, [r7, #32]
 4805 00f4 0133     		adds	r3, r3, #1
 4806 00f6 3B62     		str	r3, [r7, #32]
 4807              	.L335:
1612:..\src/interruptions.c ****         
 4808              		.loc 1 1612 0 is_stmt 0 discriminator 1
 4809 00f8 3B6A     		ldr	r3, [r7, #32]
 4810 00fa 022B     		cmp	r3, #2
 4811 00fc CDDD     		ble	.L337
 4812              	.LBE3:
1619:..\src/interruptions.c ****         }
1620:..\src/interruptions.c ****     }
1621:..\src/interruptions.c ****     
1622:..\src/interruptions.c ****     // S = SIGN BIT
1623:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1624:..\src/interruptions.c ****     // 0 = 0 BIT
1625:..\src/interruptions.c ****     // C = CONTROL BIT
1626:..\src/interruptions.c ****     
1627:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4813              		.loc 1 1627 0 is_stmt 1
 4814 00fe 0023     		movs	r3, #0
 4815 0100 87F82F30 		strb	r3, [r7, #47]
 4816 0104 33E3     		b	.L338
 4817              	.L358:
1628:..\src/interruptions.c ****         
1629:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4818              		.loc 1 1629 0
 4819 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 4820 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4821 010e 9B00     		lsls	r3, r3, #2
 4822 0110 07F13001 		add	r1, r7, #48
 4823 0114 0B44     		add	r3, r3, r1
 4824 0116 53F8283C 		ldr	r3, [r3, #-40]
 4825 011a 5549     		ldr	r1, .L365+24
 4826 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1630:..\src/interruptions.c ****         
1631:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4827              		.loc 1 1631 0
 4828 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4829 0124 9B00     		lsls	r3, r3, #2
 4830 0126 07F13002 		add	r2, r7, #48
 4831 012a 1344     		add	r3, r3, r2
 4832 012c 53F8283C 		ldr	r3, [r3, #-40]
 4833 0130 99B2     		uxth	r1, r3
 4834 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4835 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4836 0138 4E4C     		ldr	r4, .L365+28
 4837 013a 1346     		mov	r3, r2
 4838 013c 5B00     		lsls	r3, r3, #1
 4839 013e 1344     		add	r3, r3, r2
 4840 0140 9B00     		lsls	r3, r3, #2
 4841 0142 0344     		add	r3, r3, r0
 4842 0144 6633     		adds	r3, r3, #102
 4843 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 117


 4844 014a 9BB2     		uxth	r3, r3
 4845 014c CB1A     		subs	r3, r1, r3
 4846 014e 9BB2     		uxth	r3, r3
 4847 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1632:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4848              		.loc 1 1632 0
 4849 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4850 0156 002B     		cmp	r3, #0
 4851 0158 04DA     		bge	.L339
1633:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4852              		.loc 1 1633 0
 4853 015a BB8D     		ldrh	r3, [r7, #44]
 4854 015c 03F58053 		add	r3, r3, #4096
 4855 0160 9BB2     		uxth	r3, r3
 4856 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4857              	.L339:
1634:..\src/interruptions.c ****         }       // Range [0, 4096]
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4858              		.loc 1 1636 0
 4859 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4860 0168 B3F5006F 		cmp	r3, #2048
 4861 016c 04DB     		blt	.L340
1637:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4862              		.loc 1 1637 0
 4863 016e BB8D     		ldrh	r3, [r7, #44]
 4864 0170 A3F58053 		sub	r3, r3, #4096
 4865 0174 9BB2     		uxth	r3, r3
 4866 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4867              	.L340:
1638:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1639:..\src/interruptions.c **** 
1640:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4868              		.loc 1 1640 0
 4869 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4870 017c 1B01     		lsls	r3, r3, #4
 4871 017e FB61     		str	r3, [r7, #28]
1641:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4872              		.loc 1 1641 0
 4873 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4874 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4875 0186 3C48     		ldr	r0, .L365+32
 4876 0188 1346     		mov	r3, r2
 4877 018a 5B00     		lsls	r3, r3, #1
 4878 018c 1344     		add	r3, r3, r2
 4879 018e 0B44     		add	r3, r3, r1
 4880 0190 FA69     		ldr	r2, [r7, #28]
 4881 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1642:..\src/interruptions.c **** 
1643:..\src/interruptions.c ****         // Initialize last_value_encoder
1644:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4882              		.loc 1 1644 0
 4883 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4884 0198 384A     		ldr	r2, .L365+36
 4885 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4886 019c 002B     		cmp	r3, #0
 4887 019e 12D0     		beq	.L341
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 118


1645:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4888              		.loc 1 1645 0
 4889 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4890 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4891 01a6 2D48     		ldr	r0, .L365+4
 4892 01a8 1346     		mov	r3, r2
 4893 01aa 5B00     		lsls	r3, r3, #1
 4894 01ac 1344     		add	r3, r3, r2
 4895 01ae 0B44     		add	r3, r3, r1
 4896 01b0 FA69     		ldr	r2, [r7, #28]
 4897 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1646:..\src/interruptions.c ****             if (index == 2)
 4898              		.loc 1 1646 0
 4899 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4900 01ba 022B     		cmp	r3, #2
 4901 01bc 03D1     		bne	.L341
1647:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 4902              		.loc 1 1647 0
 4903 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4904 01c0 2E4A     		ldr	r2, .L365+36
 4905 01c2 0021     		movs	r1, #0
 4906 01c4 D154     		strb	r1, [r2, r3]
 4907              	.L341:
1648:..\src/interruptions.c ****         }
1649:..\src/interruptions.c **** 
1650:..\src/interruptions.c ****         // Take care of rotations
1651:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 4908              		.loc 1 1651 0
 4909 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4910 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4911 01cc 2348     		ldr	r0, .L365+4
 4912 01ce 1346     		mov	r3, r2
 4913 01d0 5B00     		lsls	r3, r3, #1
 4914 01d2 1344     		add	r3, r3, r2
 4915 01d4 0B44     		add	r3, r3, r1
 4916 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4917 01da FA69     		ldr	r2, [r7, #28]
 4918 01dc D31A     		subs	r3, r2, r3
 4919 01de BB61     		str	r3, [r7, #24]
1652:..\src/interruptions.c **** 
1653:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1654:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1655:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1656:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1657:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1658:..\src/interruptions.c ****         //                                               |           |
1659:..\src/interruptions.c ****         //                                           24575           -24576
1660:..\src/interruptions.c ****         //                                               |___________|
1661:..\src/interruptions.c ****         //                                                   49152
1662:..\src/interruptions.c **** 
1663:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1664:..\src/interruptions.c ****         // and update the variable only if the difference between
1665:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1666:..\src/interruptions.c **** 
1667:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1668:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1669:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 119


1670:..\src/interruptions.c **** 
1671:..\src/interruptions.c ****         if (value_diff > 49152)
 4920              		.loc 1 1671 0
 4921 01e0 BB69     		ldr	r3, [r7, #24]
 4922 01e2 B3F5404F 		cmp	r3, #49152
 4923 01e6 19DD     		ble	.L342
1672:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 4924              		.loc 1 1672 0
 4925 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4926 01ea 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4927 01ee 2448     		ldr	r0, .L365+40
 4928 01f0 3421     		movs	r1, #52
 4929 01f2 01FB02F1 		mul	r1, r1, r2
 4930 01f6 0144     		add	r1, r1, r0
 4931 01f8 1944     		add	r1, r1, r3
 4932 01fa 1831     		adds	r1, r1, #24
 4933 01fc 91F90010 		ldrsb	r1, [r1]
 4934 0200 C9B2     		uxtb	r1, r1
 4935 0202 0139     		subs	r1, r1, #1
 4936 0204 C9B2     		uxtb	r1, r1
 4937 0206 4CB2     		sxtb	r4, r1
 4938 0208 1D49     		ldr	r1, .L365+40
 4939 020a 3420     		movs	r0, #52
 4940 020c 00FB02F2 		mul	r2, r0, r2
 4941 0210 0A44     		add	r2, r2, r1
 4942 0212 1344     		add	r3, r3, r2
 4943 0214 1833     		adds	r3, r3, #24
 4944 0216 2246     		mov	r2, r4
 4945 0218 1A70     		strb	r2, [r3]
 4946 021a 5BE0     		b	.L343
 4947              	.L342:
1673:..\src/interruptions.c ****         else{ 
1674:..\src/interruptions.c ****             if (value_diff < -49152)
 4948              		.loc 1 1674 0
 4949 021c BB69     		ldr	r3, [r7, #24]
 4950 021e 13F5404F 		cmn	r3, #49152
 4951 0222 2FDA     		bge	.L344
1675:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 4952              		.loc 1 1675 0
 4953 0224 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4954 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4955 022a 1548     		ldr	r0, .L365+40
 4956 022c 3421     		movs	r1, #52
 4957 022e 01FB02F1 		mul	r1, r1, r2
 4958 0232 0144     		add	r1, r1, r0
 4959 0234 1944     		add	r1, r1, r3
 4960 0236 1831     		adds	r1, r1, #24
 4961 0238 91F90010 		ldrsb	r1, [r1]
 4962 023c C9B2     		uxtb	r1, r1
 4963 023e 0131     		adds	r1, r1, #1
 4964 0240 C9B2     		uxtb	r1, r1
 4965 0242 4CB2     		sxtb	r4, r1
 4966 0244 0E49     		ldr	r1, .L365+40
 4967 0246 3420     		movs	r0, #52
 4968 0248 00FB02F2 		mul	r2, r0, r2
 4969 024c 0A44     		add	r2, r2, r1
 4970 024e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 120


 4971 0250 1833     		adds	r3, r3, #24
 4972 0252 2246     		mov	r2, r4
 4973 0254 1A70     		strb	r2, [r3]
 4974 0256 3DE0     		b	.L343
 4975              	.L366:
 4976              		.align	2
 4977              	.L365:
 4978 0258 00000000 		.word	reset_last_value_flag
 4979 025c E4000000 		.word	last_value_encoder.10540
 4980 0260 00000000 		.word	N_Encoder_Line_Connected
 4981 0264 00000000 		.word	c_mem
 4982 0268 00000000 		.word	Encoder_Check
 4983 026c 00000000 		.word	Encoder_Value
 4984 0270 00000000 		.word	data_encoder_raw
 4985 0274 00000000 		.word	g_mem
 4986 0278 FC000000 		.word	comp_value_encoder.10541
 4987 027c 04000000 		.word	only_first_time.10543
 4988 0280 00000000 		.word	g_meas
 4989              	.L344:
1676:..\src/interruptions.c ****             else{
1677:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 4990              		.loc 1 1677 0
 4991 0284 BB69     		ldr	r3, [r7, #24]
 4992 0286 002B     		cmp	r3, #0
 4993 0288 B8BF     		it	lt
 4994 028a 5B42     		rsblt	r3, r3, #0
 4995 028c B3F5804F 		cmp	r3, #16384
 4996 0290 20DD     		ble	.L343
1678:..\src/interruptions.c ****                     error[n_line][index]++;
 4997              		.loc 1 1678 0
 4998 0292 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4999 0294 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5000 0298 9B48     		ldr	r0, .L367
 5001 029a 1346     		mov	r3, r2
 5002 029c 5B00     		lsls	r3, r3, #1
 5003 029e 1344     		add	r3, r3, r2
 5004 02a0 0344     		add	r3, r3, r0
 5005 02a2 0B44     		add	r3, r3, r1
 5006 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5007 02a6 0133     		adds	r3, r3, #1
 5008 02a8 DCB2     		uxtb	r4, r3
 5009 02aa 9748     		ldr	r0, .L367
 5010 02ac 1346     		mov	r3, r2
 5011 02ae 5B00     		lsls	r3, r3, #1
 5012 02b0 1344     		add	r3, r3, r2
 5013 02b2 0344     		add	r3, r3, r0
 5014 02b4 0B44     		add	r3, r3, r1
 5015 02b6 2246     		mov	r2, r4
 5016 02b8 1A70     		strb	r2, [r3]
1679:..\src/interruptions.c ****                                 
1680:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5017              		.loc 1 1680 0
 5018 02ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5019 02bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5020 02c0 9148     		ldr	r0, .L367
 5021 02c2 1346     		mov	r3, r2
 5022 02c4 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 121


 5023 02c6 1344     		add	r3, r3, r2
 5024 02c8 0344     		add	r3, r3, r0
 5025 02ca 0B44     		add	r3, r3, r1
 5026 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5027 02ce 092B     		cmp	r3, #9
 5028 02d0 40F28C82 		bls	.L364
 5029              	.L343:
1681:..\src/interruptions.c ****                         // Discard
1682:..\src/interruptions.c ****                         return;
1683:..\src/interruptions.c ****                 }
1684:..\src/interruptions.c ****             }
1685:..\src/interruptions.c ****         }
1686:..\src/interruptions.c **** 
1687:..\src/interruptions.c ****         error[n_line][index] = 0;
 5030              		.loc 1 1687 0
 5031 02d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5032 02d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5033 02da 8B48     		ldr	r0, .L367
 5034 02dc 1346     		mov	r3, r2
 5035 02de 5B00     		lsls	r3, r3, #1
 5036 02e0 1344     		add	r3, r3, r2
 5037 02e2 0344     		add	r3, r3, r0
 5038 02e4 0B44     		add	r3, r3, r1
 5039 02e6 0022     		movs	r2, #0
 5040 02e8 1A70     		strb	r2, [r3]
1688:..\src/interruptions.c ****         
1689:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5041              		.loc 1 1689 0
 5042 02ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5043 02ec 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5044 02f0 8648     		ldr	r0, .L367+4
 5045 02f2 1346     		mov	r3, r2
 5046 02f4 5B00     		lsls	r3, r3, #1
 5047 02f6 1344     		add	r3, r3, r2
 5048 02f8 0B44     		add	r3, r3, r1
 5049 02fa FA69     		ldr	r2, [r7, #28]
 5050 02fc 40F82320 		str	r2, [r0, r3, lsl #2]
1690:..\src/interruptions.c **** 
1691:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5051              		.loc 1 1691 0
 5052 0300 FB69     		ldr	r3, [r7, #28]
 5053 0302 BB62     		str	r3, [r7, #40]
1692:..\src/interruptions.c **** 
1693:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5054              		.loc 1 1693 0
 5055 0304 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5056 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5057 030a 8149     		ldr	r1, .L367+8
 5058 030c 3420     		movs	r0, #52
 5059 030e 00FB02F2 		mul	r2, r0, r2
 5060 0312 0A44     		add	r2, r2, r1
 5061 0314 1344     		add	r3, r3, r2
 5062 0316 1833     		adds	r3, r3, #24
 5063 0318 93F90030 		ldrsb	r3, [r3]
 5064 031c 1B04     		lsls	r3, r3, #16
 5065 031e BA6A     		ldr	r2, [r7, #40]
 5066 0320 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 122


 5067 0322 BB62     		str	r3, [r7, #40]
1694:..\src/interruptions.c ****         
1695:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5068              		.loc 1 1695 0
 5069 0324 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5070 0326 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5071 032a 7A48     		ldr	r0, .L367+12
 5072 032c 1346     		mov	r3, r2
 5073 032e 5B00     		lsls	r3, r3, #1
 5074 0330 1344     		add	r3, r3, r2
 5075 0332 9B00     		lsls	r3, r3, #2
 5076 0334 0B44     		add	r3, r3, r1
 5077 0336 6833     		adds	r3, r3, #104
 5078 0338 9B00     		lsls	r3, r3, #2
 5079 033a 0344     		add	r3, r3, r0
 5080 033c 5B68     		ldr	r3, [r3, #4]	@ float
 5081 033e 4FF07E51 		mov	r1, #1065353216
 5082 0342 1846     		mov	r0, r3
 5083 0344 FFF7FEFF 		bl	__aeabi_fcmpeq
 5084 0348 0346     		mov	r3, r0
 5085 034a 002B     		cmp	r3, #0
 5086 034c 1AD1     		bne	.L346
1696:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5087              		.loc 1 1696 0
 5088 034e B86A     		ldr	r0, [r7, #40]
 5089 0350 FFF7FEFF 		bl	__aeabi_i2f
 5090 0354 0446     		mov	r4, r0
 5091 0356 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5092 0358 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5093 035c 6D48     		ldr	r0, .L367+12
 5094 035e 1346     		mov	r3, r2
 5095 0360 5B00     		lsls	r3, r3, #1
 5096 0362 1344     		add	r3, r3, r2
 5097 0364 9B00     		lsls	r3, r3, #2
 5098 0366 0B44     		add	r3, r3, r1
 5099 0368 6833     		adds	r3, r3, #104
 5100 036a 9B00     		lsls	r3, r3, #2
 5101 036c 0344     		add	r3, r3, r0
 5102 036e 5B68     		ldr	r3, [r3, #4]	@ float
 5103 0370 1946     		mov	r1, r3
 5104 0372 2046     		mov	r0, r4
 5105 0374 FFF7FEFF 		bl	__aeabi_fmul
 5106 0378 0346     		mov	r3, r0
 5107 037a 1846     		mov	r0, r3
 5108 037c FFF7FEFF 		bl	__aeabi_f2iz
 5109 0380 0346     		mov	r3, r0
 5110 0382 BB62     		str	r3, [r7, #40]
 5111              	.L346:
1697:..\src/interruptions.c ****         }
1698:..\src/interruptions.c **** 
1699:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5112              		.loc 1 1699 0
 5113 0384 634B     		ldr	r3, .L367+12
 5114 0386 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5115 038a 002B     		cmp	r3, #0
 5116 038c 0BD1     		bne	.L348
1700:..\src/interruptions.c ****             // Right / Left hand turn
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 123


1701:..\src/interruptions.c ****             if (index == 0) {
 5117              		.loc 1 1701 0
 5118 038e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5119 0392 002B     		cmp	r3, #0
 5120 0394 07D1     		bne	.L348
1702:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5121              		.loc 1 1702 0
 5122 0396 5F4B     		ldr	r3, .L367+12
 5123 0398 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5124 039c 002B     		cmp	r3, #0
 5125 039e 02D1     		bne	.L348
1703:..\src/interruptions.c ****                     value_encoder *= -1;        
 5126              		.loc 1 1703 0
 5127 03a0 BB6A     		ldr	r3, [r7, #40]
 5128 03a2 5B42     		negs	r3, r3
 5129 03a4 BB62     		str	r3, [r7, #40]
 5130              	.L348:
1704:..\src/interruptions.c ****                 }
1705:..\src/interruptions.c ****             }
1706:..\src/interruptions.c ****         }
1707:..\src/interruptions.c ****  
1708:..\src/interruptions.c **** 
1709:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5131              		.loc 1 1709 0
 5132 03a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5133 03a8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5134 03ac 5848     		ldr	r0, .L367+8
 5135 03ae 1346     		mov	r3, r2
 5136 03b0 5B00     		lsls	r3, r3, #1
 5137 03b2 1344     		add	r3, r3, r2
 5138 03b4 9B00     		lsls	r3, r3, #2
 5139 03b6 1344     		add	r3, r3, r2
 5140 03b8 0B44     		add	r3, r3, r1
 5141 03ba BA6A     		ldr	r2, [r7, #40]
 5142 03bc 40F82320 		str	r2, [r0, r3, lsl #2]
1710:..\src/interruptions.c ****     
1711:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5143              		.loc 1 1711 0
 5144 03c0 BA6A     		ldr	r2, [r7, #40]
 5145 03c2 1346     		mov	r3, r2
 5146 03c4 9B00     		lsls	r3, r3, #2
 5147 03c6 1344     		add	r3, r3, r2
 5148 03c8 5B00     		lsls	r3, r3, #1
 5149 03ca 9918     		adds	r1, r3, r2
 5150 03cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5151 03ce 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5152 03d2 514C     		ldr	r4, .L367+16
 5153 03d4 1346     		mov	r3, r2
 5154 03d6 5B00     		lsls	r3, r3, #1
 5155 03d8 1344     		add	r3, r3, r2
 5156 03da 0344     		add	r3, r3, r0
 5157 03dc 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5158 03e0 6FF01102 		mvn	r2, #17
 5159 03e4 02FB03F3 		mul	r3, r2, r3
 5160 03e8 1944     		add	r1, r1, r3
 5161 03ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5162 03ec 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 124


 5163 03f0 4A4C     		ldr	r4, .L367+20
 5164 03f2 1346     		mov	r3, r2
 5165 03f4 5B00     		lsls	r3, r3, #1
 5166 03f6 1344     		add	r3, r3, r2
 5167 03f8 0344     		add	r3, r3, r0
 5168 03fa 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5169 03fe 1346     		mov	r3, r2
 5170 0400 DB00     		lsls	r3, r3, #3
 5171 0402 1344     		add	r3, r3, r2
 5172 0404 1944     		add	r1, r1, r3
 5173 0406 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5174 0408 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5175 040c 444C     		ldr	r4, .L367+24
 5176 040e 1346     		mov	r3, r2
 5177 0410 5B00     		lsls	r3, r3, #1
 5178 0412 1344     		add	r3, r3, r2
 5179 0414 0344     		add	r3, r3, r0
 5180 0416 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5181 041a 5B00     		lsls	r3, r3, #1
 5182 041c C81A     		subs	r0, r1, r3
 5183 041e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5184 0422 DB00     		lsls	r3, r3, #3
 5185 0424 3F4A     		ldr	r2, .L367+28
 5186 0426 1344     		add	r3, r3, r2
 5187 0428 1946     		mov	r1, r3
 5188 042a FFF7FEFF 		bl	filter
 5189 042e 0346     		mov	r3, r0
 5190 0430 1BB2     		sxth	r3, r3
 5191 0432 7B61     		str	r3, [r7, #20]
1712:..\src/interruptions.c **** 
1713:..\src/interruptions.c ****         //Update current speed
1714:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5192              		.loc 1 1714 0
 5193 0434 7869     		ldr	r0, [r7, #20]
 5194 0436 FFF7FEFF 		bl	__aeabi_i2f
 5195 043a 0446     		mov	r4, r0
 5196 043c 3A4B     		ldr	r3, .L367+32
 5197 043e 1B68     		ldr	r3, [r3]	@ float
 5198 0440 3A49     		ldr	r1, .L367+36
 5199 0442 1846     		mov	r0, r3
 5200 0444 FFF7FEFF 		bl	__aeabi_fmul
 5201 0448 0346     		mov	r3, r0
 5202 044a 1946     		mov	r1, r3
 5203 044c 2046     		mov	r0, r4
 5204 044e FFF7FEFF 		bl	__aeabi_fdiv
 5205 0452 0346     		mov	r3, r0
 5206 0454 1846     		mov	r0, r3
 5207 0456 FFF7FEFF 		bl	__aeabi_f2iz
 5208 045a 0346     		mov	r3, r0
 5209 045c 7B61     		str	r3, [r7, #20]
1715:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5210              		.loc 1 1715 0
 5211 045e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5212 0460 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5213 0464 2A48     		ldr	r0, .L367+8
 5214 0466 1346     		mov	r3, r2
 5215 0468 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 125


 5216 046a 1344     		add	r3, r3, r2
 5217 046c 9B00     		lsls	r3, r3, #2
 5218 046e 1344     		add	r3, r3, r2
 5219 0470 0B44     		add	r3, r3, r1
 5220 0472 0633     		adds	r3, r3, #6
 5221 0474 9B00     		lsls	r3, r3, #2
 5222 0476 0344     		add	r3, r3, r0
 5223 0478 7A69     		ldr	r2, [r7, #20]
 5224 047a 5A60     		str	r2, [r3, #4]
1716:..\src/interruptions.c **** 
1717:..\src/interruptions.c ****         // update old velocity and acceleration values
1718:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5225              		.loc 1 1718 0
 5226 047c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5227 047e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5228 0482 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5229 0484 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5230 0488 244D     		ldr	r5, .L367+20
 5231 048a 0B46     		mov	r3, r1
 5232 048c 5B00     		lsls	r3, r3, #1
 5233 048e 0B44     		add	r3, r3, r1
 5234 0490 2344     		add	r3, r3, r4
 5235 0492 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5236 0496 224C     		ldr	r4, .L367+24
 5237 0498 1346     		mov	r3, r2
 5238 049a 5B00     		lsls	r3, r3, #1
 5239 049c 1344     		add	r3, r3, r2
 5240 049e 0344     		add	r3, r3, r0
 5241 04a0 44F82310 		str	r1, [r4, r3, lsl #2]
1719:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5242              		.loc 1 1719 0
 5243 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5244 04a6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5245 04aa F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5246 04ac 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5247 04b0 194D     		ldr	r5, .L367+16
 5248 04b2 0B46     		mov	r3, r1
 5249 04b4 5B00     		lsls	r3, r3, #1
 5250 04b6 0B44     		add	r3, r3, r1
 5251 04b8 2344     		add	r3, r3, r4
 5252 04ba 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5253 04be 174C     		ldr	r4, .L367+20
 5254 04c0 1346     		mov	r3, r2
 5255 04c2 5B00     		lsls	r3, r3, #1
 5256 04c4 1344     		add	r3, r3, r2
 5257 04c6 0344     		add	r3, r3, r0
 5258 04c8 44F82310 		str	r1, [r4, r3, lsl #2]
1720:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5259              		.loc 1 1720 0
 5260 04cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5261 04ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5262 04d2 1148     		ldr	r0, .L367+16
 5263 04d4 1346     		mov	r3, r2
 5264 04d6 5B00     		lsls	r3, r3, #1
 5265 04d8 1344     		add	r3, r3, r2
 5266 04da 0B44     		add	r3, r3, r1
 5267 04dc BA6A     		ldr	r2, [r7, #40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 126


 5268 04de 40F82320 		str	r2, [r0, r3, lsl #2]
1721:..\src/interruptions.c **** 
1722:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1723:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5269              		.loc 1 1723 0
 5270 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5271 04e4 124A     		ldr	r2, .L367+40
 5272 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5273 04e8 002B     		cmp	r3, #0
 5274 04ea 40F03B81 		bne	.L349
1724:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5275              		.loc 1 1724 0
 5276 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5277 04f0 104A     		ldr	r2, .L367+44
 5278 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5279 04f4 212B     		cmp	r3, #33
 5280 04f6 1FD8     		bhi	.L350
1725:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5281              		.loc 1 1725 0
 5282 04f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5283 04fa 0E4A     		ldr	r2, .L367+44
 5284 04fc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5285 04fe 0132     		adds	r2, r2, #1
 5286 0500 D1B2     		uxtb	r1, r2
 5287 0502 0C4A     		ldr	r2, .L367+44
 5288 0504 D154     		strb	r1, [r2, r3]
 5289 0506 2DE1     		b	.L349
 5290              	.L368:
 5291              		.align	2
 5292              	.L367:
 5293 0508 14010000 		.word	error.10542
 5294 050c E4000000 		.word	last_value_encoder.10540
 5295 0510 00000000 		.word	g_meas
 5296 0514 00000000 		.word	c_mem
 5297 0518 1C010000 		.word	v_value.10548
 5298 051c 34010000 		.word	vv_value.10549
 5299 0520 4C010000 		.word	vvv_value.10550
 5300 0524 00000000 		.word	filt_vel
 5301 0528 00000000 		.word	cycle_time
 5302 052c 0000C040 		.word	1086324736
 5303 0530 64010000 		.word	pos_reconstruct.10547
 5304 0534 68010000 		.word	one_time_execute.10545
 5305              	.L350:
1726:..\src/interruptions.c ****             else {
1727:..\src/interruptions.c ****                 //Double encoder translation
1728:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5306              		.loc 1 1728 0
 5307 0538 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5308 053a AE49     		ldr	r1, .L369
 5309 053c 1346     		mov	r3, r2
 5310 053e 5B00     		lsls	r3, r3, #1
 5311 0540 1344     		add	r3, r3, r2
 5312 0542 1B01     		lsls	r3, r3, #4
 5313 0544 0B44     		add	r3, r3, r1
 5314 0546 03F5D873 		add	r3, r3, #432
 5315 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5316 054c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 127


 5317 054e 5ED0     		beq	.L351
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5318              		.loc 1 1729 0
 5319 0550 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5320 0552 A949     		ldr	r1, .L369+4
 5321 0554 1346     		mov	r3, r2
 5322 0556 5B00     		lsls	r3, r3, #1
 5323 0558 1344     		add	r3, r3, r2
 5324 055a 9B00     		lsls	r3, r3, #2
 5325 055c 0B44     		add	r3, r3, r1
 5326 055e 1868     		ldr	r0, [r3]
 5327 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5328 0562 A549     		ldr	r1, .L369+4
 5329 0564 1346     		mov	r3, r2
 5330 0566 5B00     		lsls	r3, r3, #1
 5331 0568 1344     		add	r3, r3, r2
 5332 056a 9B00     		lsls	r3, r3, #2
 5333 056c 0B44     		add	r3, r3, r1
 5334 056e 0433     		adds	r3, r3, #4
 5335 0570 1C68     		ldr	r4, [r3]
1730:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5336              		.loc 1 1730 0
 5337 0572 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5338 0574 9F49     		ldr	r1, .L369
 5339 0576 1346     		mov	r3, r2
 5340 0578 5B00     		lsls	r3, r3, #1
 5341 057a 1344     		add	r3, r3, r2
 5342 057c 1B01     		lsls	r3, r3, #4
 5343 057e 0B44     		add	r3, r3, r1
 5344 0580 03F2B513 		addw	r3, r3, #437
 5345 0584 93F90030 		ldrsb	r3, [r3]
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5346              		.loc 1 1729 0
 5347 0588 1D46     		mov	r5, r3
 5348              		.loc 1 1730 0
 5349 058a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5350 058c 9949     		ldr	r1, .L369
 5351 058e 1346     		mov	r3, r2
 5352 0590 5B00     		lsls	r3, r3, #1
 5353 0592 1344     		add	r3, r3, r2
 5354 0594 1B01     		lsls	r3, r3, #4
 5355 0596 0B44     		add	r3, r3, r1
 5356 0598 03F5DB73 		add	r3, r3, #438
 5357 059c 93F90030 		ldrsb	r3, [r3]
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5358              		.loc 1 1729 0
 5359 05a0 1E46     		mov	r6, r3
 5360              		.loc 1 1730 0
 5361 05a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5362 05a4 9349     		ldr	r1, .L369
 5363 05a6 1346     		mov	r3, r2
 5364 05a8 5B00     		lsls	r3, r3, #1
 5365 05aa 1344     		add	r3, r3, r2
 5366 05ac 1B01     		lsls	r3, r3, #4
 5367 05ae 0B44     		add	r3, r3, r1
 5368 05b0 03F2B713 		addw	r3, r3, #439
 5369 05b4 93F90030 		ldrsb	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 128


1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5370              		.loc 1 1729 0
 5371 05b8 0093     		str	r3, [sp]
 5372 05ba 3346     		mov	r3, r6
 5373 05bc 2A46     		mov	r2, r5
 5374 05be 2146     		mov	r1, r4
 5375 05c0 FFF7FEFF 		bl	calc_turns_fcn
 5376 05c4 0346     		mov	r3, r0
 5377 05c6 87F82730 		strb	r3, [r7, #39]
1731:..\src/interruptions.c **** 
1732:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5378              		.loc 1 1732 0
 5379 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5380 05cc 8949     		ldr	r1, .L369
 5381 05ce 1346     		mov	r3, r2
 5382 05d0 5B00     		lsls	r3, r3, #1
 5383 05d2 1344     		add	r3, r3, r2
 5384 05d4 1B01     		lsls	r3, r3, #4
 5385 05d6 0B44     		add	r3, r3, r1
 5386 05d8 03F5D273 		add	r3, r3, #420
 5387 05dc 1B68     		ldr	r3, [r3]	@ float
 5388 05de 4FF00001 		mov	r1, #0
 5389 05e2 1846     		mov	r0, r3
 5390 05e4 FFF7FEFF 		bl	__aeabi_fcmplt
 5391 05e8 0346     		mov	r3, r0
 5392 05ea 002B     		cmp	r3, #0
 5393 05ec 05D0     		beq	.L352
1733:..\src/interruptions.c ****                         init_rot = -init_rot;
 5394              		.loc 1 1733 0
 5395 05ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5396 05f2 5B42     		negs	r3, r3
 5397 05f4 DBB2     		uxtb	r3, r3
 5398 05f6 87F82730 		strb	r3, [r7, #39]
 5399              	.L352:
1734:..\src/interruptions.c ****                     
1735:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5400              		.loc 1 1735 0
 5401 05fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5402 05fc 7F4A     		ldr	r2, .L369+8
 5403 05fe 3421     		movs	r1, #52
 5404 0600 01FB03F3 		mul	r3, r1, r3
 5405 0604 1344     		add	r3, r3, r2
 5406 0606 1833     		adds	r3, r3, #24
 5407 0608 97F82720 		ldrb	r2, [r7, #39]
 5408 060c 1A70     		strb	r2, [r3]
 5409              	.L351:
1736:..\src/interruptions.c ****                 }    
1737:..\src/interruptions.c **** 
1738:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5410              		.loc 1 1738 0
 5411 060e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5412 0610 7849     		ldr	r1, .L369
 5413 0612 1346     		mov	r3, r2
 5414 0614 5B00     		lsls	r3, r3, #1
 5415 0616 1344     		add	r3, r3, r2
 5416 0618 1B01     		lsls	r3, r3, #4
 5417 061a 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 129


 5418 061c 03F5D273 		add	r3, r3, #420
 5419 0620 1B68     		ldr	r3, [r3]	@ float
 5420 0622 4FF07E51 		mov	r1, #1065353216
 5421 0626 1846     		mov	r0, r3
 5422 0628 FFF7FEFF 		bl	__aeabi_fcmpeq
 5423 062c 0346     		mov	r3, r0
 5424 062e 002B     		cmp	r3, #0
 5425 0630 22D1     		bne	.L354
1739:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5426              		.loc 1 1739 0
 5427 0632 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5428 0634 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5429 0636 714A     		ldr	r2, .L369+8
 5430 0638 3421     		movs	r1, #52
 5431 063a 01FB03F3 		mul	r3, r1, r3
 5432 063e 1344     		add	r3, r3, r2
 5433 0640 1B68     		ldr	r3, [r3]
 5434 0642 1846     		mov	r0, r3
 5435 0644 FFF7FEFF 		bl	__aeabi_i2f
 5436 0648 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5437 064a 6A49     		ldr	r1, .L369
 5438 064c 1346     		mov	r3, r2
 5439 064e 5B00     		lsls	r3, r3, #1
 5440 0650 1344     		add	r3, r3, r2
 5441 0652 1B01     		lsls	r3, r3, #4
 5442 0654 0B44     		add	r3, r3, r1
 5443 0656 03F5D273 		add	r3, r3, #420
 5444 065a 1B68     		ldr	r3, [r3]	@ float
 5445 065c 1946     		mov	r1, r3
 5446 065e FFF7FEFF 		bl	__aeabi_fdiv
 5447 0662 0346     		mov	r3, r0
 5448 0664 1846     		mov	r0, r3
 5449 0666 FFF7FEFF 		bl	__aeabi_f2iz
 5450 066a 0146     		mov	r1, r0
 5451 066c 634A     		ldr	r2, .L369+8
 5452 066e 3423     		movs	r3, #52
 5453 0670 03FB04F3 		mul	r3, r3, r4
 5454 0674 1344     		add	r3, r3, r2
 5455 0676 1960     		str	r1, [r3]
 5456              	.L354:
1740:..\src/interruptions.c ****                 
1741:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5457              		.loc 1 1741 0
 5458 0678 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5459 067a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5460 067c 5F49     		ldr	r1, .L369+8
 5461 067e 3420     		movs	r0, #52
 5462 0680 00FB02F2 		mul	r2, r0, r2
 5463 0684 0A44     		add	r2, r2, r1
 5464 0686 1168     		ldr	r1, [r2]
 5465 0688 97F92720 		ldrsb	r2, [r7, #39]
 5466 068c 1204     		lsls	r2, r2, #16
 5467 068e 0A44     		add	r2, r2, r1
 5468 0690 5A49     		ldr	r1, .L369+8
 5469 0692 3420     		movs	r0, #52
 5470 0694 00FB03F3 		mul	r3, r0, r3
 5471 0698 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 130


 5472 069a 1A60     		str	r2, [r3]
1742:..\src/interruptions.c ****             
1743:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5473              		.loc 1 1743 0
 5474 069c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5475 069e 5549     		ldr	r1, .L369
 5476 06a0 1346     		mov	r3, r2
 5477 06a2 5B00     		lsls	r3, r3, #1
 5478 06a4 1344     		add	r3, r3, r2
 5479 06a6 1B01     		lsls	r3, r3, #4
 5480 06a8 0B44     		add	r3, r3, r1
 5481 06aa 03F5D273 		add	r3, r3, #420
 5482 06ae 1B68     		ldr	r3, [r3]	@ float
 5483 06b0 4FF07E51 		mov	r1, #1065353216
 5484 06b4 1846     		mov	r0, r3
 5485 06b6 FFF7FEFF 		bl	__aeabi_fcmpeq
 5486 06ba 0346     		mov	r3, r0
 5487 06bc 002B     		cmp	r3, #0
 5488 06be 22D1     		bne	.L356
1744:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5489              		.loc 1 1744 0
 5490 06c0 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5491 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5492 06c4 4D4A     		ldr	r2, .L369+8
 5493 06c6 3421     		movs	r1, #52
 5494 06c8 01FB03F3 		mul	r3, r1, r3
 5495 06cc 1344     		add	r3, r3, r2
 5496 06ce 1B68     		ldr	r3, [r3]
 5497 06d0 1846     		mov	r0, r3
 5498 06d2 FFF7FEFF 		bl	__aeabi_i2f
 5499 06d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5500 06d8 4649     		ldr	r1, .L369
 5501 06da 1346     		mov	r3, r2
 5502 06dc 5B00     		lsls	r3, r3, #1
 5503 06de 1344     		add	r3, r3, r2
 5504 06e0 1B01     		lsls	r3, r3, #4
 5505 06e2 0B44     		add	r3, r3, r1
 5506 06e4 03F5D273 		add	r3, r3, #420
 5507 06e8 1B68     		ldr	r3, [r3]	@ float
 5508 06ea 1946     		mov	r1, r3
 5509 06ec FFF7FEFF 		bl	__aeabi_fmul
 5510 06f0 0346     		mov	r3, r0
 5511 06f2 1846     		mov	r0, r3
 5512 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 5513 06f8 0146     		mov	r1, r0
 5514 06fa 404A     		ldr	r2, .L369+8
 5515 06fc 3423     		movs	r3, #52
 5516 06fe 03FB04F3 		mul	r3, r3, r4
 5517 0702 1344     		add	r3, r3, r2
 5518 0704 1960     		str	r1, [r3]
 5519              	.L356:
1745:..\src/interruptions.c ****             
1746:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5520              		.loc 1 1746 0
 5521 0706 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5522 0708 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5523 070a 3C49     		ldr	r1, .L369+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 131


 5524 070c 3420     		movs	r0, #52
 5525 070e 00FB02F2 		mul	r2, r0, r2
 5526 0712 0A44     		add	r2, r2, r1
 5527 0714 1268     		ldr	r2, [r2]
 5528 0716 3A49     		ldr	r1, .L369+12
 5529 0718 1B01     		lsls	r3, r3, #4
 5530 071a 0B44     		add	r3, r3, r1
 5531 071c 1A60     		str	r2, [r3]
1747:..\src/interruptions.c **** 
1748:..\src/interruptions.c ****                 // If necessary activate motor
1749:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5532              		.loc 1 1749 0
 5533 071e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5534 0720 384A     		ldr	r2, .L369+16
 5535 0722 0121     		movs	r1, #1
 5536 0724 D154     		strb	r1, [r2, r3]
1750:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1751:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5537              		.loc 1 1751 0
 5538 0726 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5539 0728 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5540 072a 3248     		ldr	r0, .L369
 5541 072c 1346     		mov	r3, r2
 5542 072e DB00     		lsls	r3, r3, #3
 5543 0730 9B1A     		subs	r3, r3, r2
 5544 0732 1B01     		lsls	r3, r3, #4
 5545 0734 0344     		add	r3, r3, r0
 5546 0736 E033     		adds	r3, r3, #224
 5547 0738 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5548 073a 314A     		ldr	r2, .L369+12
 5549 073c 0B01     		lsls	r3, r1, #4
 5550 073e 1344     		add	r3, r3, r2
 5551 0740 0C33     		adds	r3, r3, #12
 5552 0742 0246     		mov	r2, r0
 5553 0744 1A70     		strb	r2, [r3]
1752:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5554              		.loc 1 1752 0
 5555 0746 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5556 0748 2D4A     		ldr	r2, .L369+12
 5557 074a 1B01     		lsls	r3, r3, #4
 5558 074c 1344     		add	r3, r3, r2
 5559 074e 0C33     		adds	r3, r3, #12
 5560 0750 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5561 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5562 0754 1146     		mov	r1, r2
 5563 0756 1846     		mov	r0, r3
 5564 0758 FFF7FEFF 		bl	enable_motor
1753:..\src/interruptions.c ****                 
1754:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5565              		.loc 1 1754 0
 5566 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5567 075e 2A4A     		ldr	r2, .L369+20
 5568 0760 0121     		movs	r1, #1
 5569 0762 D154     		strb	r1, [r2, r3]
 5570              	.L349:
1627:..\src/interruptions.c ****         
 5571              		.loc 1 1627 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 132


 5572 0764 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5573 0768 0133     		adds	r3, r3, #1
 5574 076a 87F82F30 		strb	r3, [r7, #47]
 5575              	.L338:
1627:..\src/interruptions.c ****         
 5576              		.loc 1 1627 0 is_stmt 0 discriminator 1
 5577 076e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5578 0772 022B     		cmp	r3, #2
 5579 0774 7FF6C7AC 		bls	.L358
1755:..\src/interruptions.c ****             }
1756:..\src/interruptions.c ****         }
1757:..\src/interruptions.c ****     } 
1758:..\src/interruptions.c **** 
1759:..\src/interruptions.c **** 	
1760:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1761:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5580              		.loc 1 1761 0 is_stmt 1
 5581 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5582 077a 224A     		ldr	r2, .L369+16
 5583 077c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5584 077e 002B     		cmp	r3, #0
 5585 0780 35D0     		beq	.L329
1762:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5586              		.loc 1 1762 0
 5587 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5588 0784 214A     		ldr	r2, .L369+24
 5589 0786 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5590 078a 0132     		adds	r2, r2, #1
 5591 078c 1F49     		ldr	r1, .L369+24
 5592 078e 41F82320 		str	r2, [r1, r3, lsl #2]
1763:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5593              		.loc 1 1763 0
 5594 0792 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5595 0794 1D4A     		ldr	r2, .L369+24
 5596 0796 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5597 079a B3F5FA5F 		cmp	r3, #8000
 5598 079e 26D3     		bcc	.L329
1764:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5599              		.loc 1 1764 0
 5600 07a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5601 07a2 174A     		ldr	r2, .L369+12
 5602 07a4 1B01     		lsls	r3, r3, #4
 5603 07a6 1344     		add	r3, r3, r2
 5604 07a8 0022     		movs	r2, #0
 5605 07aa 1A60     		str	r2, [r3]
1765:..\src/interruptions.c ****             
1766:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1767:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5606              		.loc 1 1767 0
 5607 07ac B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5608 07ae BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5609 07b0 1048     		ldr	r0, .L369
 5610 07b2 1346     		mov	r3, r2
 5611 07b4 DB00     		lsls	r3, r3, #3
 5612 07b6 9B1A     		subs	r3, r3, r2
 5613 07b8 1B01     		lsls	r3, r3, #4
 5614 07ba 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 133


 5615 07bc E033     		adds	r3, r3, #224
 5616 07be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5617 07c0 0F4A     		ldr	r2, .L369+12
 5618 07c2 0B01     		lsls	r3, r1, #4
 5619 07c4 1344     		add	r3, r3, r2
 5620 07c6 0C33     		adds	r3, r3, #12
 5621 07c8 0246     		mov	r2, r0
 5622 07ca 1A70     		strb	r2, [r3]
1768:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 5623              		.loc 1 1768 0
 5624 07cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5625 07ce 0C4A     		ldr	r2, .L369+12
 5626 07d0 1B01     		lsls	r3, r3, #4
 5627 07d2 1344     		add	r3, r3, r2
 5628 07d4 0C33     		adds	r3, r3, #12
 5629 07d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5630 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5631 07da 1146     		mov	r1, r2
 5632 07dc 1846     		mov	r0, r3
 5633 07de FFF7FEFF 		bl	enable_motor
1769:..\src/interruptions.c ****                         
1770:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5634              		.loc 1 1770 0
 5635 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5636 07e4 074A     		ldr	r2, .L369+16
 5637 07e6 0021     		movs	r1, #0
 5638 07e8 D154     		strb	r1, [r2, r3]
 5639 07ea 00E0     		b	.L329
 5640              	.L364:
1682:..\src/interruptions.c ****                 }
 5641              		.loc 1 1682 0
 5642 07ec 00BF     		nop
 5643              	.L329:
1771:..\src/interruptions.c ****         }
1772:..\src/interruptions.c ****     }
1773:..\src/interruptions.c ****  
1774:..\src/interruptions.c **** }
 5644              		.loc 1 1774 0
 5645 07ee 3437     		adds	r7, r7, #52
 5646              		.cfi_def_cfa_offset 20
 5647 07f0 BD46     		mov	sp, r7
 5648              		.cfi_def_cfa_register 13
 5649              		@ sp needed
 5650 07f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5651              	.L370:
 5652              		.align	2
 5653              	.L369:
 5654 07f4 00000000 		.word	c_mem
 5655 07f8 FC000000 		.word	comp_value_encoder.10541
 5656 07fc 00000000 		.word	g_meas
 5657 0800 00000000 		.word	g_refNew
 5658 0804 6C010000 		.word	safe_startup_motor_activation.10544
 5659 0808 64010000 		.word	pos_reconstruct.10547
 5660 080c 70010000 		.word	count_startup_motor.10546
 5661              		.cfi_endproc
 5662              	.LFE70:
 5663              		.size	encoder_reading_SPI, .-encoder_reading_SPI
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 134


 5664              		.section	.text.analog_read_end,"ax",%progbits
 5665              		.align	2
 5666              		.global	analog_read_end
 5667              		.thumb
 5668              		.thumb_func
 5669              		.type	analog_read_end, %function
 5670              	analog_read_end:
 5671              	.LFB71:
1775:..\src/interruptions.c **** 
1776:..\src/interruptions.c **** //==============================================================================
1777:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1778:..\src/interruptions.c **** //==============================================================================
1779:..\src/interruptions.c **** 
1780:..\src/interruptions.c **** void analog_read_end() {
 5672              		.loc 1 1780 0
 5673              		.cfi_startproc
 5674              		@ args = 0, pretend = 0, frame = 8
 5675              		@ frame_needed = 1, uses_anonymous_args = 0
 5676 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5677              		.cfi_def_cfa_offset 20
 5678              		.cfi_offset 4, -20
 5679              		.cfi_offset 5, -16
 5680              		.cfi_offset 6, -12
 5681              		.cfi_offset 7, -8
 5682              		.cfi_offset 14, -4
 5683 0002 83B0     		sub	sp, sp, #12
 5684              		.cfi_def_cfa_offset 32
 5685 0004 00AF     		add	r7, sp, #0
 5686              		.cfi_def_cfa_register 7
1781:..\src/interruptions.c **** 
1782:..\src/interruptions.c ****     /* =========================================================================
1783:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1784:..\src/interruptions.c ****     /
1785:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1786:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1787:..\src/interruptions.c ****     /
1788:..\src/interruptions.c ****     /   Definition:
1789:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1790:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1791:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1792:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1793:..\src/interruptions.c ****     /
1794:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1795:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1796:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1797:..\src/interruptions.c ****     /  =========================================================================
1798:..\src/interruptions.c ****     */
1799:..\src/interruptions.c **** 
1800:..\src/interruptions.c ****     int32 CYDATA i_aux;
1801:..\src/interruptions.c **** 
1802:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1803:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1804:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1805:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1806:..\src/interruptions.c ****     static uint16 count = 0;
1807:..\src/interruptions.c ****     static uint32 v_count = 0;
1808:..\src/interruptions.c ****     static uint8 idx = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 135


1809:..\src/interruptions.c ****     
1810:..\src/interruptions.c ****     // Wait for conversion end
1811:..\src/interruptions.c ****     
1812:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5687              		.loc 1 1812 0
 5688 0006 08E0     		b	.L372
 5689              	.L373:
1813:..\src/interruptions.c ****         
1814:..\src/interruptions.c ****         if (interrupt_flag){
 5690              		.loc 1 1814 0
 5691 0008 AC4B     		ldr	r3, .L483
 5692 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5693 000c 002B     		cmp	r3, #0
 5694 000e 04D0     		beq	.L372
1815:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5695              		.loc 1 1815 0
 5696 0010 AA4B     		ldr	r3, .L483
 5697 0012 0022     		movs	r2, #0
 5698 0014 1A70     		strb	r2, [r3]
1816:..\src/interruptions.c ****             interrupt_manager();
 5699              		.loc 1 1816 0
 5700 0016 FFF7FEFF 		bl	interrupt_manager
 5701              	.L372:
1812:..\src/interruptions.c ****         
 5702              		.loc 1 1812 0
 5703 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5704 001e 0346     		mov	r3, r0
 5705 0020 002B     		cmp	r3, #0
 5706 0022 F1D0     		beq	.L373
1817:..\src/interruptions.c ****         }
1818:..\src/interruptions.c ****     }
1819:..\src/interruptions.c ****     
1820:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1821:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1822:..\src/interruptions.c ****         // Read pressure in any case
1823:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1824:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1825:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1826:..\src/interruptions.c ****     }
1827:..\src/interruptions.c **** #endif
1828:..\src/interruptions.c ****  
1829:..\src/interruptions.c ****     // Convert tension read
1830:..\src/interruptions.c ****     if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 5707              		.loc 1 1830 0
 5708 0024 A64B     		ldr	r3, .L483+4
 5709 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5710 002a 022B     		cmp	r3, #2
 5711 002c 04D0     		beq	.L374
1831:..\src/interruptions.c ****         dev_tension[0] = 5000;
 5712              		.loc 1 1831 0
 5713 002e A54B     		ldr	r3, .L483+8
 5714 0030 41F28832 		movw	r2, #5000
 5715 0034 1A60     		str	r2, [r3]
 5716 0036 0BE0     		b	.L375
 5717              	.L374:
1832:..\src/interruptions.c ****     }
1833:..\src/interruptions.c ****     else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 136


1834:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5718              		.loc 1 1834 0
 5719 0038 A34B     		ldr	r3, .L483+12
 5720 003a B3F90030 		ldrsh	r3, [r3]
 5721 003e A3F25563 		subw	r3, r3, #1621
 5722 0042 40F2C672 		movw	r2, #1990
 5723 0046 02FB03F3 		mul	r3, r2, r3
 5724 004a DB11     		asrs	r3, r3, #7
 5725 004c 9D4A     		ldr	r2, .L483+8
 5726 004e 1360     		str	r3, [r2]
 5727              	.L375:
1835:..\src/interruptions.c ****     }
1836:..\src/interruptions.c ****     
1837:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1838:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5728              		.loc 1 1838 0
 5729 0050 9E4B     		ldr	r3, .L483+16
 5730 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5731 0054 042B     		cmp	r3, #4
 5732 0056 0BD9     		bls	.L376
1839:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5733              		.loc 1 1839 0
 5734 0058 9B4B     		ldr	r3, .L483+12
 5735 005a B3F90830 		ldrsh	r3, [r3, #8]
 5736 005e A3F25563 		subw	r3, r3, #1621
 5737 0062 40F2C672 		movw	r2, #1990
 5738 0066 02FB03F3 		mul	r3, r2, r3
 5739 006a DB11     		asrs	r3, r3, #7
 5740 006c 954A     		ldr	r2, .L483+8
 5741 006e 5360     		str	r3, [r2, #4]
 5742              	.L376:
1840:..\src/interruptions.c ****     }
1841:..\src/interruptions.c ****     
1842:..\src/interruptions.c ****     if (interrupt_flag){
 5743              		.loc 1 1842 0
 5744 0070 924B     		ldr	r3, .L483
 5745 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5746 0074 002B     		cmp	r3, #0
 5747 0076 04D0     		beq	.L377
1843:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5748              		.loc 1 1843 0
 5749 0078 904B     		ldr	r3, .L483
 5750 007a 0022     		movs	r2, #0
 5751 007c 1A70     		strb	r2, [r3]
1844:..\src/interruptions.c ****         interrupt_manager();
 5752              		.loc 1 1844 0
 5753 007e FFF7FEFF 		bl	interrupt_manager
 5754              	.L377:
1845:..\src/interruptions.c ****     }
1846:..\src/interruptions.c ****     
1847:..\src/interruptions.c ****     // VOLTAGE READING
1848:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1849:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1850:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1851:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1852:..\src/interruptions.c ****     
1853:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 137


 5755              		.loc 1 1853 0
 5756 0082 934B     		ldr	r3, .L483+20
 5757 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5758 0086 002B     		cmp	r3, #0
 5759 0088 4DD0     		beq	.L378
 5760              		.loc 1 1853 0 is_stmt 0 discriminator 1
 5761 008a 924B     		ldr	r3, .L483+24
 5762 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5763 008e 002B     		cmp	r3, #0
 5764 0090 49D0     		beq	.L378
1854:..\src/interruptions.c ****         count = count + 1;
 5765              		.loc 1 1854 0 is_stmt 1
 5766 0092 914B     		ldr	r3, .L483+28
 5767 0094 1B88     		ldrh	r3, [r3]
 5768 0096 0133     		adds	r3, r3, #1
 5769 0098 9AB2     		uxth	r2, r3
 5770 009a 8F4B     		ldr	r3, .L483+28
 5771 009c 1A80     		strh	r2, [r3]	@ movhi
1855:..\src/interruptions.c ****         
1856:..\src/interruptions.c ****         if (count == 1000){
 5772              		.loc 1 1856 0
 5773 009e 8E4B     		ldr	r3, .L483+28
 5774 00a0 1B88     		ldrh	r3, [r3]
 5775 00a2 B3F57A7F 		cmp	r3, #1000
 5776 00a6 3ED1     		bne	.L378
1857:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5777              		.loc 1 1857 0
 5778 00a8 8C4B     		ldr	r3, .L483+32
 5779 00aa 0022     		movs	r2, #0
 5780 00ac 1A70     		strb	r2, [r3]
 5781 00ae 33E0     		b	.L379
 5782              	.L383:
1858:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5783              		.loc 1 1858 0
 5784 00b0 8A4B     		ldr	r3, .L483+32
 5785 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5786 00b4 1A46     		mov	r2, r3
 5787 00b6 834B     		ldr	r3, .L483+8
 5788 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5789 00bc 42F22732 		movw	r2, #8999
 5790 00c0 9342     		cmp	r3, r2
 5791 00c2 08DC     		bgt	.L380
1859:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5792              		.loc 1 1859 0
 5793 00c4 854B     		ldr	r3, .L483+32
 5794 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5795 00c8 1946     		mov	r1, r3
 5796 00ca 854B     		ldr	r3, .L483+36
 5797 00cc 4FF4FA52 		mov	r2, #8000
 5798 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 5799 00d4 1AE0     		b	.L381
 5800              	.L380:
1860:..\src/interruptions.c ****                 }
1861:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1862:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5801              		.loc 1 1862 0
 5802 00d6 814B     		ldr	r3, .L483+32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 138


 5803 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5804 00da 1A46     		mov	r2, r3
 5805 00dc 794B     		ldr	r3, .L483+8
 5806 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5807 00e2 43F2C722 		movw	r2, #12999
 5808 00e6 9342     		cmp	r3, r2
 5809 00e8 08DC     		bgt	.L382
1863:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5810              		.loc 1 1863 0
 5811 00ea 7C4B     		ldr	r3, .L483+32
 5812 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5813 00ee 1946     		mov	r1, r3
 5814 00f0 7B4B     		ldr	r3, .L483+36
 5815 00f2 42F6E062 		movw	r2, #12000
 5816 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 5817 00fa 07E0     		b	.L381
 5818              	.L382:
1864:..\src/interruptions.c ****                     }
1865:..\src/interruptions.c ****                     else
1866:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5819              		.loc 1 1866 0
 5820 00fc 774B     		ldr	r3, .L483+32
 5821 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5822 0100 1946     		mov	r1, r3
 5823 0102 774B     		ldr	r3, .L483+36
 5824 0104 45F6C052 		movw	r2, #24000
 5825 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 5826              	.L381:
1857:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5827              		.loc 1 1857 0 discriminator 2
 5828 010c 734B     		ldr	r3, .L483+32
 5829 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5830 0110 0133     		adds	r3, r3, #1
 5831 0112 DAB2     		uxtb	r2, r3
 5832 0114 714B     		ldr	r3, .L483+32
 5833 0116 1A70     		strb	r2, [r3]
 5834              	.L379:
1857:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5835              		.loc 1 1857 0 is_stmt 0 discriminator 1
 5836 0118 704B     		ldr	r3, .L483+32
 5837 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5838 011c 012B     		cmp	r3, #1
 5839 011e C7D9     		bls	.L383
1867:..\src/interruptions.c ****                 }
1868:..\src/interruptions.c ****             }
1869:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5840              		.loc 1 1869 0 is_stmt 1
 5841 0120 6B4B     		ldr	r3, .L483+20
 5842 0122 0022     		movs	r2, #0
 5843 0124 1A70     		strb	r2, [r3]
 5844              	.L378:
1870:..\src/interruptions.c ****         }
1871:..\src/interruptions.c ****     }
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1874:..\src/interruptions.c **** 
1875:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 139


 5845              		.loc 1 1875 0
 5846 0126 674B     		ldr	r3, .L483+8
 5847 0128 1B68     		ldr	r3, [r3]
 5848 012a 41F65732 		movw	r2, #6999
 5849 012e 9342     		cmp	r3, r2
 5850 0130 00F3E080 		bgt	.L384
 5851              		.loc 1 1875 0 is_stmt 0 discriminator 1
 5852 0134 654B     		ldr	r3, .L483+16
 5853 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5854 0138 042B     		cmp	r3, #4
 5855 013a 06D9     		bls	.L385
 5856              		.loc 1 1875 0 discriminator 2
 5857 013c 614B     		ldr	r3, .L483+8
 5858 013e 5B68     		ldr	r3, [r3, #4]
 5859 0140 41F65732 		movw	r2, #6999
 5860 0144 9342     		cmp	r3, r2
 5861 0146 00F3D580 		bgt	.L384
 5862              	.L385:
1876:..\src/interruptions.c ****         // PSoC is powered through uUSB
1877:..\src/interruptions.c ****         
1878:..\src/interruptions.c ****         tension_valid = FALSE;
 5863              		.loc 1 1878 0 is_stmt 1
 5864 014a 624B     		ldr	r3, .L483+24
 5865 014c 0022     		movs	r2, #0
 5866 014e 1A70     		strb	r2, [r3]
1879:..\src/interruptions.c ****             
1880:..\src/interruptions.c ****         if (interrupt_flag){
 5867              		.loc 1 1880 0
 5868 0150 5A4B     		ldr	r3, .L483
 5869 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5870 0154 002B     		cmp	r3, #0
 5871 0156 04D0     		beq	.L386
1881:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5872              		.loc 1 1881 0
 5873 0158 584B     		ldr	r3, .L483
 5874 015a 0022     		movs	r2, #0
 5875 015c 1A70     		strb	r2, [r3]
1882:..\src/interruptions.c ****             interrupt_manager();
 5876              		.loc 1 1882 0
 5877 015e FFF7FEFF 		bl	interrupt_manager
 5878              	.L386:
1883:..\src/interruptions.c ****         }
1884:..\src/interruptions.c ****         
1885:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5879              		.loc 1 1885 0
 5880 0162 5E4B     		ldr	r3, .L483+32
 5881 0164 0022     		movs	r2, #0
 5882 0166 1A70     		strb	r2, [r3]
 5883 0168 73E0     		b	.L387
 5884              	.L390:
1886:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5885              		.loc 1 1886 0
 5886 016a 5E4B     		ldr	r3, .L483+40
 5887 016c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 5888 0170 002B     		cmp	r3, #0
 5889 0172 4BD0     		beq	.L388
1887:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 140


 5890              		.loc 1 1887 0
 5891 0174 594B     		ldr	r3, .L483+32
 5892 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5893 0178 1946     		mov	r1, r3
 5894 017a 5A4A     		ldr	r2, .L483+40
 5895 017c 0B46     		mov	r3, r1
 5896 017e DB00     		lsls	r3, r3, #3
 5897 0180 5B1A     		subs	r3, r3, r1
 5898 0182 1B01     		lsls	r3, r3, #4
 5899 0184 1344     		add	r3, r3, r2
 5900 0186 03F58773 		add	r3, r3, #270
 5901 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5902 018c 022B     		cmp	r3, #2
 5903 018e 29D0     		beq	.L389
1888:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5904              		.loc 1 1888 0 discriminator 1
 5905 0190 524B     		ldr	r3, .L483+32
 5906 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5907 0194 1946     		mov	r1, r3
 5908 0196 534A     		ldr	r2, .L483+40
 5909 0198 0B46     		mov	r3, r1
 5910 019a DB00     		lsls	r3, r3, #3
 5911 019c 5B1A     		subs	r3, r3, r1
 5912 019e 1B01     		lsls	r3, r3, #4
 5913 01a0 1344     		add	r3, r3, r2
 5914 01a2 03F58773 		add	r3, r3, #270
 5915 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1887:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5916              		.loc 1 1887 0 discriminator 1
 5917 01a8 032B     		cmp	r3, #3
 5918 01aa 1BD0     		beq	.L389
1889:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5919              		.loc 1 1889 0
 5920 01ac 4B4B     		ldr	r3, .L483+32
 5921 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5922 01b0 1946     		mov	r1, r3
 5923 01b2 4C4A     		ldr	r2, .L483+40
 5924 01b4 0B46     		mov	r3, r1
 5925 01b6 DB00     		lsls	r3, r3, #3
 5926 01b8 5B1A     		subs	r3, r3, r1
 5927 01ba 1B01     		lsls	r3, r3, #4
 5928 01bc 1344     		add	r3, r3, r2
 5929 01be 03F58773 		add	r3, r3, #270
 5930 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1888:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5931              		.loc 1 1888 0
 5932 01c4 042B     		cmp	r3, #4
 5933 01c6 0DD0     		beq	.L389
1890:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 5934              		.loc 1 1890 0
 5935 01c8 444B     		ldr	r3, .L483+32
 5936 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5937 01cc 1946     		mov	r1, r3
 5938 01ce 454A     		ldr	r2, .L483+40
 5939 01d0 0B46     		mov	r3, r1
 5940 01d2 DB00     		lsls	r3, r3, #3
 5941 01d4 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 141


 5942 01d6 1B01     		lsls	r3, r3, #4
 5943 01d8 1344     		add	r3, r3, r2
 5944 01da 03F58773 		add	r3, r3, #270
 5945 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1889:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5946              		.loc 1 1889 0
 5947 01e0 052B     		cmp	r3, #5
 5948 01e2 13D1     		bne	.L388
 5949              	.L389:
1891:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 5950              		.loc 1 1891 0
 5951 01e4 3D4B     		ldr	r3, .L483+32
 5952 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5953 01e8 3F4A     		ldr	r2, .L483+44
 5954 01ea 1B01     		lsls	r3, r3, #4
 5955 01ec 1344     		add	r3, r3, r2
 5956 01ee 0C33     		adds	r3, r3, #12
 5957 01f0 0022     		movs	r2, #0
 5958 01f2 1A70     		strb	r2, [r3]
1892:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 5959              		.loc 1 1892 0
 5960 01f4 394B     		ldr	r3, .L483+32
 5961 01f6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5962 01f8 384B     		ldr	r3, .L483+32
 5963 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5964 01fc 3A4A     		ldr	r2, .L483+44
 5965 01fe 1B01     		lsls	r3, r3, #4
 5966 0200 1344     		add	r3, r3, r2
 5967 0202 0C33     		adds	r3, r3, #12
 5968 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5969 0206 1946     		mov	r1, r3
 5970 0208 FFF7FEFF 		bl	enable_motor
 5971              	.L388:
1893:..\src/interruptions.c ****                     
1894:..\src/interruptions.c ****                 }
1895:..\src/interruptions.c ****             }
1896:..\src/interruptions.c **** 
1897:..\src/interruptions.c ****             // Assign dev_tension and reset current
1898:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 5972              		.loc 1 1898 0 discriminator 2
 5973 020c 334B     		ldr	r3, .L483+32
 5974 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5975 0210 1946     		mov	r1, r3
 5976 0212 2C4B     		ldr	r3, .L483+8
 5977 0214 41F28832 		movw	r2, #5000
 5978 0218 43F82120 		str	r2, [r3, r1, lsl #2]
1899:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 5979              		.loc 1 1899 0 discriminator 2
 5980 021c 2F4B     		ldr	r3, .L483+32
 5981 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5982 0220 1946     		mov	r1, r3
 5983 0222 274A     		ldr	r2, .L483+4
 5984 0224 0B46     		mov	r3, r1
 5985 0226 DB00     		lsls	r3, r3, #3
 5986 0228 5B1A     		subs	r3, r3, r1
 5987 022a 1B01     		lsls	r3, r3, #4
 5988 022c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 142


 5989 022e 03F58873 		add	r3, r3, #272
 5990 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5991 0234 1946     		mov	r1, r3
 5992 0236 2D4A     		ldr	r2, .L483+48
 5993 0238 3423     		movs	r3, #52
 5994 023a 03FB01F3 		mul	r3, r3, r1
 5995 023e 1344     		add	r3, r3, r2
 5996 0240 0C33     		adds	r3, r3, #12
 5997 0242 0022     		movs	r2, #0
 5998 0244 1A60     		str	r2, [r3]
1885:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5999              		.loc 1 1885 0 discriminator 2
 6000 0246 254B     		ldr	r3, .L483+32
 6001 0248 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6002 024a 0133     		adds	r3, r3, #1
 6003 024c DAB2     		uxtb	r2, r3
 6004 024e 234B     		ldr	r3, .L483+32
 6005 0250 1A70     		strb	r2, [r3]
 6006              	.L387:
1885:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6007              		.loc 1 1885 0 is_stmt 0 discriminator 1
 6008 0252 224B     		ldr	r3, .L483+32
 6009 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6010 0256 012B     		cmp	r3, #1
 6011 0258 87D9     		bls	.L390
1900:..\src/interruptions.c ****         }
1901:..\src/interruptions.c ****         
1902:..\src/interruptions.c ****         // Reset emg
1903:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6012              		.loc 1 1903 0 is_stmt 1
 6013 025a 204B     		ldr	r3, .L483+32
 6014 025c 0022     		movs	r2, #0
 6015 025e 1A70     		strb	r2, [r3]
 6016 0260 0CE0     		b	.L391
 6017              	.L392:
1904:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6018              		.loc 1 1904 0 discriminator 3
 6019 0262 1E4B     		ldr	r3, .L483+32
 6020 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6021 0266 1946     		mov	r1, r3
 6022 0268 214B     		ldr	r3, .L483+52
 6023 026a 0022     		movs	r2, #0
 6024 026c 43F82120 		str	r2, [r3, r1, lsl #2]
1903:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6025              		.loc 1 1903 0 discriminator 3
 6026 0270 1A4B     		ldr	r3, .L483+32
 6027 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6028 0274 0133     		adds	r3, r3, #1
 6029 0276 DAB2     		uxtb	r2, r3
 6030 0278 184B     		ldr	r3, .L483+32
 6031 027a 1A70     		strb	r2, [r3]
 6032              	.L391:
1903:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6033              		.loc 1 1903 0 is_stmt 0 discriminator 1
 6034 027c 174B     		ldr	r3, .L483+32
 6035 027e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6036 0280 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 143


 6037 0282 EED9     		bls	.L392
1905:..\src/interruptions.c ****         }
1906:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6038              		.loc 1 1906 0 is_stmt 1
 6039 0284 154B     		ldr	r3, .L483+32
 6040 0286 0022     		movs	r2, #0
 6041 0288 1A70     		strb	r2, [r3]
 6042 028a 0CE0     		b	.L393
 6043              	.L395:
1907:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6044              		.loc 1 1907 0 discriminator 4
 6045 028c 134B     		ldr	r3, .L483+32
 6046 028e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6047 0290 174A     		ldr	r2, .L483+52
 6048 0292 0233     		adds	r3, r3, #2
 6049 0294 0021     		movs	r1, #0
 6050 0296 42F82310 		str	r1, [r2, r3, lsl #2]
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6051              		.loc 1 1906 0 discriminator 4
 6052 029a 104B     		ldr	r3, .L483+32
 6053 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6054 029e 0133     		adds	r3, r3, #1
 6055 02a0 DAB2     		uxtb	r2, r3
 6056 02a2 0E4B     		ldr	r3, .L483+32
 6057 02a4 1A70     		strb	r2, [r3]
 6058              	.L393:
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6059              		.loc 1 1906 0 is_stmt 0 discriminator 1
 6060 02a6 0F4B     		ldr	r3, .L483+40
 6061 02a8 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6062 02ac 002B     		cmp	r3, #0
 6063 02ae 00F00782 		beq	.L472
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6064              		.loc 1 1906 0 discriminator 3
 6065 02b2 0A4B     		ldr	r3, .L483+32
 6066 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6067 02b6 052B     		cmp	r3, #5
 6068 02b8 E8D9     		bls	.L395
1875:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6069              		.loc 1 1875 0 is_stmt 1
 6070 02ba 01E2     		b	.L472
 6071              	.L484:
 6072              		.align	2
 6073              	.L483:
 6074 02bc 00000000 		.word	interrupt_flag
 6075 02c0 00000000 		.word	g_mem
 6076 02c4 00000000 		.word	dev_tension
 6077 02c8 00000000 		.word	ADC_buf
 6078 02cc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6079 02d0 06000000 		.word	first_tension_valid.10569
 6080 02d4 00000000 		.word	tension_valid
 6081 02d8 78010000 		.word	count.10570
 6082 02dc 7A010000 		.word	idx.10572
 6083 02e0 00000000 		.word	pow_tension
 6084 02e4 00000000 		.word	c_mem
 6085 02e8 00000000 		.word	g_ref
 6086 02ec 00000000 		.word	g_meas
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 144


 6087 02f0 00000000 		.word	g_emg_meas
 6088              	.L384:
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****         
1910:..\src/interruptions.c ****     }
1911:..\src/interruptions.c ****     else {
1912:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1913:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1914:..\src/interruptions.c ****         
1915:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1916:..\src/interruptions.c ****         
1917:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6089              		.loc 1 1917 0
 6090 02f4 9B4B     		ldr	r3, .L485
 6091 02f6 1B68     		ldr	r3, [r3]
 6092 02f8 B3F57A7F 		cmp	r3, #1000
 6093 02fc 0DD1     		bne	.L397
 6094              		.loc 1 1917 0 is_stmt 0 discriminator 1
 6095 02fe 9A4B     		ldr	r3, .L485+4
 6096 0300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6097 0302 002B     		cmp	r3, #0
 6098 0304 09D1     		bne	.L397
1918:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1919:..\src/interruptions.c ****             tension_valid = TRUE;   
 6099              		.loc 1 1919 0 is_stmt 1
 6100 0306 984B     		ldr	r3, .L485+4
 6101 0308 0122     		movs	r2, #1
 6102 030a 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****             count = 0;
 6103              		.loc 1 1920 0
 6104 030c 974B     		ldr	r3, .L485+8
 6105 030e 0022     		movs	r2, #0
 6106 0310 1A80     		strh	r2, [r3]	@ movhi
1921:..\src/interruptions.c ****             v_count = 0;
 6107              		.loc 1 1921 0
 6108 0312 944B     		ldr	r3, .L485
 6109 0314 0022     		movs	r2, #0
 6110 0316 1A60     		str	r2, [r3]
 6111 0318 2CE0     		b	.L398
 6112              	.L397:
1922:..\src/interruptions.c ****         }
1923:..\src/interruptions.c ****         else {  
1924:..\src/interruptions.c ****             // wait for battery voltage stabilization
1925:..\src/interruptions.c ****             if (v_count < 1000) {
 6113              		.loc 1 1925 0
 6114 031a 924B     		ldr	r3, .L485
 6115 031c 1B68     		ldr	r3, [r3]
 6116 031e B3F57A7F 		cmp	r3, #1000
 6117 0322 04D2     		bcs	.L399
1926:..\src/interruptions.c ****                 v_count = v_count + 1;
 6118              		.loc 1 1926 0
 6119 0324 8F4B     		ldr	r3, .L485
 6120 0326 1B68     		ldr	r3, [r3]
 6121 0328 0133     		adds	r3, r3, #1
 6122 032a 8E4A     		ldr	r2, .L485
 6123 032c 1360     		str	r3, [r2]
 6124              	.L399:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 145


1927:..\src/interruptions.c ****             }
1928:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6125              		.loc 1 1928 0
 6126 032e 904B     		ldr	r3, .L485+12
 6127 0330 0022     		movs	r2, #0
 6128 0332 1A70     		strb	r2, [r3]
 6129 0334 1AE0     		b	.L400
 6130              	.L401:
1929:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6131              		.loc 1 1929 0 discriminator 3
 6132 0336 8E4B     		ldr	r3, .L485+12
 6133 0338 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6134 033a 1C46     		mov	r4, r3
 6135 033c 8C4B     		ldr	r3, .L485+12
 6136 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6137 0340 1A46     		mov	r2, r3
 6138 0342 8C4B     		ldr	r3, .L485+16
 6139 0344 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6140 0348 894B     		ldr	r3, .L485+12
 6141 034a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6142 034c DB00     		lsls	r3, r3, #3
 6143 034e 8A4A     		ldr	r2, .L485+20
 6144 0350 1344     		add	r3, r3, r2
 6145 0352 1946     		mov	r1, r3
 6146 0354 FFF7FEFF 		bl	filter
 6147 0358 0246     		mov	r2, r0
 6148 035a 884B     		ldr	r3, .L485+24
 6149 035c 43F82420 		str	r2, [r3, r4, lsl #2]
1928:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6150              		.loc 1 1928 0 discriminator 3
 6151 0360 834B     		ldr	r3, .L485+12
 6152 0362 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6153 0364 0133     		adds	r3, r3, #1
 6154 0366 DAB2     		uxtb	r2, r3
 6155 0368 814B     		ldr	r3, .L485+12
 6156 036a 1A70     		strb	r2, [r3]
 6157              	.L400:
1928:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6158              		.loc 1 1928 0 is_stmt 0 discriminator 1
 6159 036c 804B     		ldr	r3, .L485+12
 6160 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6161 0370 012B     		cmp	r3, #1
 6162 0372 E0D9     		bls	.L401
 6163              	.L398:
1930:..\src/interruptions.c ****             }
1931:..\src/interruptions.c ****         }
1932:..\src/interruptions.c **** 
1933:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6164              		.loc 1 1933 0 is_stmt 1
 6165 0374 7E4B     		ldr	r3, .L485+12
 6166 0376 0022     		movs	r2, #0
 6167 0378 1A70     		strb	r2, [r3]
 6168 037a 17E0     		b	.L402
 6169              	.L404:
1934:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6170              		.loc 1 1934 0
 6171 037c 7C4B     		ldr	r3, .L485+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 146


 6172 037e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6173 0380 1946     		mov	r1, r3
 6174 0382 7F4A     		ldr	r2, .L485+28
 6175 0384 0B46     		mov	r3, r1
 6176 0386 DB00     		lsls	r3, r3, #3
 6177 0388 5B1A     		subs	r3, r3, r1
 6178 038a 1B01     		lsls	r3, r3, #4
 6179 038c 1344     		add	r3, r3, r2
 6180 038e E133     		adds	r3, r3, #225
 6181 0390 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6182 0392 002B     		cmp	r3, #0
 6183 0394 04D0     		beq	.L403
1935:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6184              		.loc 1 1935 0
 6185 0396 764B     		ldr	r3, .L485+12
 6186 0398 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6187 039a 1846     		mov	r0, r3
 6188 039c FFF7FEFF 		bl	pwm_limit_search
 6189              	.L403:
1933:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6190              		.loc 1 1933 0 discriminator 2
 6191 03a0 734B     		ldr	r3, .L485+12
 6192 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6193 03a4 0133     		adds	r3, r3, #1
 6194 03a6 DAB2     		uxtb	r2, r3
 6195 03a8 714B     		ldr	r3, .L485+12
 6196 03aa 1A70     		strb	r2, [r3]
 6197              	.L402:
1933:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6198              		.loc 1 1933 0 is_stmt 0 discriminator 1
 6199 03ac 704B     		ldr	r3, .L485+12
 6200 03ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6201 03b0 012B     		cmp	r3, #1
 6202 03b2 E3D9     		bls	.L404
1936:..\src/interruptions.c ****         }
1937:..\src/interruptions.c ****         
1938:..\src/interruptions.c ****         // Filter and Set currents
1939:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6203              		.loc 1 1939 0 is_stmt 1
 6204 03b4 724B     		ldr	r3, .L485+28
 6205 03b6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6206 03ba 002B     		cmp	r3, #0
 6207 03bc 21D1     		bne	.L405
1940:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6208              		.loc 1 1940 0
 6209 03be 704B     		ldr	r3, .L485+28
 6210 03c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6211 03c4 1C46     		mov	r4, r3
 6212 03c6 6F4B     		ldr	r3, .L485+32
 6213 03c8 B3F90230 		ldrsh	r3, [r3, #2]
 6214 03cc A3F5CE63 		sub	r3, r3, #1648
 6215 03d0 45F66A02 		movw	r2, #22634
 6216 03d4 02FB03F3 		mul	r3, r2, r3
 6217 03d8 5B13     		asrs	r3, r3, #13
 6218 03da 1BB2     		sxth	r3, r3
 6219 03dc 1A46     		mov	r2, r3
 6220 03de 6A4B     		ldr	r3, .L485+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 147


 6221 03e0 93F90030 		ldrsb	r3, [r3]
 6222 03e4 03FB02F3 		mul	r3, r3, r2
 6223 03e8 6849     		ldr	r1, .L485+40
 6224 03ea 1846     		mov	r0, r3
 6225 03ec FFF7FEFF 		bl	filter
 6226 03f0 0146     		mov	r1, r0
 6227 03f2 674A     		ldr	r2, .L485+44
 6228 03f4 3423     		movs	r3, #52
 6229 03f6 03FB04F3 		mul	r3, r3, r4
 6230 03fa 1344     		add	r3, r3, r2
 6231 03fc 0C33     		adds	r3, r3, #12
 6232 03fe 1960     		str	r1, [r3]
 6233 0400 1BE0     		b	.L406
 6234              	.L405:
1941:..\src/interruptions.c ****         } else { // [GS]
1942:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6235              		.loc 1 1942 0
 6236 0402 5F4B     		ldr	r3, .L485+28
 6237 0404 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6238 0408 1846     		mov	r0, r3
 6239 040a 5E4B     		ldr	r3, .L485+32
 6240 040c B3F90230 		ldrsh	r3, [r3, #2]
 6241 0410 A3F26362 		subw	r2, r3, #1635
 6242 0414 1346     		mov	r3, r2
 6243 0416 1B01     		lsls	r3, r3, #4
 6244 0418 9B1A     		subs	r3, r3, r2
 6245 041a 5B01     		lsls	r3, r3, #5
 6246 041c 1B11     		asrs	r3, r3, #4
 6247 041e 1BB2     		sxth	r3, r3
 6248 0420 1A46     		mov	r2, r3
 6249 0422 594B     		ldr	r3, .L485+36
 6250 0424 93F90030 		ldrsb	r3, [r3]
 6251 0428 03FB02F2 		mul	r2, r3, r2
 6252 042c 5849     		ldr	r1, .L485+44
 6253 042e 3423     		movs	r3, #52
 6254 0430 03FB00F3 		mul	r3, r3, r0
 6255 0434 0B44     		add	r3, r3, r1
 6256 0436 0C33     		adds	r3, r3, #12
 6257 0438 1A60     		str	r2, [r3]
 6258              	.L406:
1943:..\src/interruptions.c ****         }  
1944:..\src/interruptions.c **** 
1945:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1946:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6259              		.loc 1 1946 0
 6260 043a 514B     		ldr	r3, .L485+28
 6261 043c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6262 0440 1D46     		mov	r5, r3
 6263 0442 4F4B     		ldr	r3, .L485+28
 6264 0444 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6265 0448 1946     		mov	r1, r3
 6266 044a 514A     		ldr	r2, .L485+44
 6267 044c 3423     		movs	r3, #52
 6268 044e 03FB01F3 		mul	r3, r3, r1
 6269 0452 1344     		add	r3, r3, r2
 6270 0454 0C33     		adds	r3, r3, #12
 6271 0456 1C68     		ldr	r4, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 148


 6272 0458 494B     		ldr	r3, .L485+28
 6273 045a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6274 045e 1946     		mov	r1, r3
 6275 0460 4B4A     		ldr	r2, .L485+44
 6276 0462 3423     		movs	r3, #52
 6277 0464 03FB01F3 		mul	r3, r3, r1
 6278 0468 1344     		add	r3, r3, r2
 6279 046a 1A68     		ldr	r2, [r3]
 6280 046c 444B     		ldr	r3, .L485+28
 6281 046e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6282 0472 1846     		mov	r0, r3
 6283 0474 4249     		ldr	r1, .L485+28
 6284 0476 0346     		mov	r3, r0
 6285 0478 5B00     		lsls	r3, r3, #1
 6286 047a 0344     		add	r3, r3, r0
 6287 047c 1B01     		lsls	r3, r3, #4
 6288 047e 0B44     		add	r3, r3, r1
 6289 0480 03F29513 		addw	r3, r3, #405
 6290 0484 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6291 0486 42FA03F6 		asr	r6, r2, r3
 6292 048a 3D4B     		ldr	r3, .L485+28
 6293 048c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6294 0490 1946     		mov	r1, r3
 6295 0492 3F4A     		ldr	r2, .L485+44
 6296 0494 3423     		movs	r3, #52
 6297 0496 03FB01F3 		mul	r3, r3, r1
 6298 049a 1344     		add	r3, r3, r2
 6299 049c 1C33     		adds	r3, r3, #28
 6300 049e 1A68     		ldr	r2, [r3]
 6301 04a0 374B     		ldr	r3, .L485+28
 6302 04a2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6303 04a6 1846     		mov	r0, r3
 6304 04a8 3549     		ldr	r1, .L485+28
 6305 04aa 0346     		mov	r3, r0
 6306 04ac 5B00     		lsls	r3, r3, #1
 6307 04ae 0344     		add	r3, r3, r0
 6308 04b0 1B01     		lsls	r3, r3, #4
 6309 04b2 0B44     		add	r3, r3, r1
 6310 04b4 03F29513 		addw	r3, r3, #405
 6311 04b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6312 04ba 42FA03FE 		asr	lr, r2, r3
 6313 04be 354B     		ldr	r3, .L485+48
 6314 04c0 1A68     		ldr	r2, [r3]
 6315 04c2 2F4B     		ldr	r3, .L485+28
 6316 04c4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6317 04c8 1846     		mov	r0, r3
 6318 04ca 2D49     		ldr	r1, .L485+28
 6319 04cc 0346     		mov	r3, r0
 6320 04ce 5B00     		lsls	r3, r3, #1
 6321 04d0 0344     		add	r3, r3, r0
 6322 04d2 1B01     		lsls	r3, r3, #4
 6323 04d4 0B44     		add	r3, r3, r1
 6324 04d6 03F29513 		addw	r3, r3, #405
 6325 04da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6326 04dc 42FA03F3 		asr	r3, r2, r3
 6327 04e0 7246     		mov	r2, lr
 6328 04e2 3146     		mov	r1, r6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 149


 6329 04e4 0020     		movs	r0, #0
 6330 04e6 FFF7FEFF 		bl	curr_estim
 6331 04ea 0346     		mov	r3, r0
 6332 04ec E31A     		subs	r3, r4, r3
 6333 04ee 2A49     		ldr	r1, .L485+52
 6334 04f0 1846     		mov	r0, r3
 6335 04f2 FFF7FEFF 		bl	filter
 6336 04f6 0346     		mov	r3, r0
 6337 04f8 1BB2     		sxth	r3, r3
 6338 04fa 1946     		mov	r1, r3
 6339 04fc 244A     		ldr	r2, .L485+44
 6340 04fe 3423     		movs	r3, #52
 6341 0500 03FB05F3 		mul	r3, r3, r5
 6342 0504 1344     		add	r3, r3, r2
 6343 0506 1033     		adds	r3, r3, #16
 6344 0508 1960     		str	r1, [r3]
1947:..\src/interruptions.c ****         
1948:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1949:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6345              		.loc 1 1949 0
 6346 050a 244B     		ldr	r3, .L485+56
 6347 050c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6348 050e 042B     		cmp	r3, #4
 6349 0510 40F2CC80 		bls	.L407
1950:..\src/interruptions.c ****             // Filter and Set currents
1951:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6350              		.loc 1 1951 0
 6351 0514 1A4B     		ldr	r3, .L485+28
 6352 0516 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6353 051a 002B     		cmp	r3, #0
 6354 051c 42D1     		bne	.L408
1952:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6355              		.loc 1 1952 0
 6356 051e 184B     		ldr	r3, .L485+28
 6357 0520 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6358 0524 1C46     		mov	r4, r3
 6359 0526 174B     		ldr	r3, .L485+32
 6360 0528 B3F90A30 		ldrsh	r3, [r3, #10]
 6361 052c A3F5CE63 		sub	r3, r3, #1648
 6362 0530 45F66A02 		movw	r2, #22634
 6363 0534 02FB03F3 		mul	r3, r2, r3
 6364 0538 5B13     		asrs	r3, r3, #13
 6365 053a 1BB2     		sxth	r3, r3
 6366 053c 1A46     		mov	r2, r3
 6367 053e 124B     		ldr	r3, .L485+36
 6368 0540 93F90030 		ldrsb	r3, [r3]
 6369 0544 03FB02F3 		mul	r3, r3, r2
 6370 0548 1549     		ldr	r1, .L485+60
 6371 054a 1846     		mov	r0, r3
 6372 054c FFF7FEFF 		bl	filter
 6373 0550 0146     		mov	r1, r0
 6374 0552 0F4A     		ldr	r2, .L485+44
 6375 0554 3423     		movs	r3, #52
 6376 0556 03FB04F3 		mul	r3, r3, r4
 6377 055a 1344     		add	r3, r3, r2
 6378 055c 0C33     		adds	r3, r3, #12
 6379 055e 1960     		str	r1, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 150


 6380 0560 3CE0     		b	.L409
 6381              	.L486:
 6382 0562 00BF     		.align	2
 6383              	.L485:
 6384 0564 7C010000 		.word	v_count.10571
 6385 0568 00000000 		.word	tension_valid
 6386 056c 78010000 		.word	count.10570
 6387 0570 7A010000 		.word	idx.10572
 6388 0574 00000000 		.word	dev_tension
 6389 0578 00000000 		.word	filt_v
 6390 057c 00000000 		.word	dev_tension_f
 6391 0580 00000000 		.word	g_mem
 6392 0584 00000000 		.word	ADC_buf
 6393 0588 00000000 		.word	pwm_sign
 6394 058c 00000000 		.word	filt_i
 6395 0590 00000000 		.word	g_meas
 6396 0594 00000000 		.word	g_ref
 6397 0598 00000000 		.word	filt_curr_diff
 6398 059c 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6399 05a0 08000000 		.word	filt_i+8
 6400              	.L408:
1953:..\src/interruptions.c ****             } else { // [GS]
1954:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6401              		.loc 1 1954 0
 6402 05a4 934B     		ldr	r3, .L487
 6403 05a6 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6404 05aa 1846     		mov	r0, r3
 6405 05ac 924B     		ldr	r3, .L487+4
 6406 05ae B3F90A30 		ldrsh	r3, [r3, #10]
 6407 05b2 A3F26362 		subw	r2, r3, #1635
 6408 05b6 1346     		mov	r3, r2
 6409 05b8 1B01     		lsls	r3, r3, #4
 6410 05ba 9B1A     		subs	r3, r3, r2
 6411 05bc 5B01     		lsls	r3, r3, #5
 6412 05be 1B11     		asrs	r3, r3, #4
 6413 05c0 1BB2     		sxth	r3, r3
 6414 05c2 1A46     		mov	r2, r3
 6415 05c4 8D4B     		ldr	r3, .L487+8
 6416 05c6 93F90030 		ldrsb	r3, [r3]
 6417 05ca 03FB02F2 		mul	r2, r3, r2
 6418 05ce 8C49     		ldr	r1, .L487+12
 6419 05d0 3423     		movs	r3, #52
 6420 05d2 03FB00F3 		mul	r3, r3, r0
 6421 05d6 0B44     		add	r3, r3, r1
 6422 05d8 0C33     		adds	r3, r3, #12
 6423 05da 1A60     		str	r2, [r3]
 6424              	.L409:
1955:..\src/interruptions.c ****             }  
1956:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
1957:..\src/interruptions.c ****             
1958:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6425              		.loc 1 1958 0
 6426 05dc 854B     		ldr	r3, .L487
 6427 05de 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6428 05e2 1D46     		mov	r5, r3
 6429 05e4 834B     		ldr	r3, .L487
 6430 05e6 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 151


 6431 05ea 1946     		mov	r1, r3
 6432 05ec 844A     		ldr	r2, .L487+12
 6433 05ee 3423     		movs	r3, #52
 6434 05f0 03FB01F3 		mul	r3, r3, r1
 6435 05f4 1344     		add	r3, r3, r2
 6436 05f6 0C33     		adds	r3, r3, #12
 6437 05f8 1C68     		ldr	r4, [r3]
 6438 05fa 7E4B     		ldr	r3, .L487
 6439 05fc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6440 0600 1946     		mov	r1, r3
 6441 0602 7F4A     		ldr	r2, .L487+12
 6442 0604 3423     		movs	r3, #52
 6443 0606 03FB01F3 		mul	r3, r3, r1
 6444 060a 1344     		add	r3, r3, r2
 6445 060c 1A68     		ldr	r2, [r3]
 6446 060e 794B     		ldr	r3, .L487
 6447 0610 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6448 0614 1846     		mov	r0, r3
 6449 0616 7749     		ldr	r1, .L487
 6450 0618 0346     		mov	r3, r0
 6451 061a 5B00     		lsls	r3, r3, #1
 6452 061c 0344     		add	r3, r3, r0
 6453 061e 1B01     		lsls	r3, r3, #4
 6454 0620 0B44     		add	r3, r3, r1
 6455 0622 03F29513 		addw	r3, r3, #405
 6456 0626 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6457 0628 42FA03F6 		asr	r6, r2, r3
 6458 062c 714B     		ldr	r3, .L487
 6459 062e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6460 0632 1946     		mov	r1, r3
 6461 0634 724A     		ldr	r2, .L487+12
 6462 0636 3423     		movs	r3, #52
 6463 0638 03FB01F3 		mul	r3, r3, r1
 6464 063c 1344     		add	r3, r3, r2
 6465 063e 1C33     		adds	r3, r3, #28
 6466 0640 1A68     		ldr	r2, [r3]
 6467 0642 6C4B     		ldr	r3, .L487
 6468 0644 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6469 0648 1846     		mov	r0, r3
 6470 064a 6A49     		ldr	r1, .L487
 6471 064c 0346     		mov	r3, r0
 6472 064e 5B00     		lsls	r3, r3, #1
 6473 0650 0344     		add	r3, r3, r0
 6474 0652 1B01     		lsls	r3, r3, #4
 6475 0654 0B44     		add	r3, r3, r1
 6476 0656 03F29513 		addw	r3, r3, #405
 6477 065a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6478 065c 42FA03FE 		asr	lr, r2, r3
 6479 0660 684B     		ldr	r3, .L487+16
 6480 0662 1A69     		ldr	r2, [r3, #16]
 6481 0664 634B     		ldr	r3, .L487
 6482 0666 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6483 066a 1846     		mov	r0, r3
 6484 066c 6149     		ldr	r1, .L487
 6485 066e 0346     		mov	r3, r0
 6486 0670 5B00     		lsls	r3, r3, #1
 6487 0672 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 152


 6488 0674 1B01     		lsls	r3, r3, #4
 6489 0676 0B44     		add	r3, r3, r1
 6490 0678 03F29513 		addw	r3, r3, #405
 6491 067c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6492 067e 42FA03F3 		asr	r3, r2, r3
 6493 0682 7246     		mov	r2, lr
 6494 0684 3146     		mov	r1, r6
 6495 0686 0120     		movs	r0, #1
 6496 0688 FFF7FEFF 		bl	curr_estim
 6497 068c 0346     		mov	r3, r0
 6498 068e E31A     		subs	r3, r4, r3
 6499 0690 5D49     		ldr	r1, .L487+20
 6500 0692 1846     		mov	r0, r3
 6501 0694 FFF7FEFF 		bl	filter
 6502 0698 0346     		mov	r3, r0
 6503 069a 1BB2     		sxth	r3, r3
 6504 069c 1946     		mov	r1, r3
 6505 069e 584A     		ldr	r2, .L487+12
 6506 06a0 3423     		movs	r3, #52
 6507 06a2 03FB05F3 		mul	r3, r3, r5
 6508 06a6 1344     		add	r3, r3, r2
 6509 06a8 1033     		adds	r3, r3, #16
 6510 06aa 1960     		str	r1, [r3]
 6511              	.L407:
1959:..\src/interruptions.c ****         }
1960:..\src/interruptions.c ****     
1961:..\src/interruptions.c ****         // Check Interrupt 
1962:..\src/interruptions.c ****     
1963:..\src/interruptions.c ****         if (interrupt_flag){
 6512              		.loc 1 1963 0
 6513 06ac 574B     		ldr	r3, .L487+24
 6514 06ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6515 06b0 002B     		cmp	r3, #0
 6516 06b2 06D0     		beq	.L396
1964:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6517              		.loc 1 1964 0
 6518 06b4 554B     		ldr	r3, .L487+24
 6519 06b6 0022     		movs	r2, #0
 6520 06b8 1A70     		strb	r2, [r3]
1965:..\src/interruptions.c ****             interrupt_manager();
 6521              		.loc 1 1965 0
 6522 06ba FFF7FEFF 		bl	interrupt_manager
 6523 06be 00E0     		b	.L396
 6524              	.L472:
1875:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6525              		.loc 1 1875 0
 6526 06c0 00BF     		nop
 6527              	.L396:
1966:..\src/interruptions.c ****         }
1967:..\src/interruptions.c **** 
1968:..\src/interruptions.c ****     }
1969:..\src/interruptions.c ****     
1970:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1971:..\src/interruptions.c ****         
1972:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1973:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6528              		.loc 1 1973 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 153


 6529 06c2 534B     		ldr	r3, .L487+28
 6530 06c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 6531 06c8 002B     		cmp	r3, #0
 6532 06ca 05D1     		bne	.L410
1974:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6533              		.loc 1 1974 0
 6534 06cc 514B     		ldr	r3, .L487+32
 6535 06ce 0022     		movs	r2, #0
 6536 06d0 1A70     		strb	r2, [r3]
1975:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6537              		.loc 1 1975 0
 6538 06d2 514B     		ldr	r3, .L487+36
 6539 06d4 0022     		movs	r2, #0
 6540 06d6 1A70     		strb	r2, [r3]
 6541              	.L410:
1976:..\src/interruptions.c ****     }
1977:..\src/interruptions.c **** 
1978:..\src/interruptions.c ****     // EMG 1 calibration state machine
1979:..\src/interruptions.c ****    
1980:..\src/interruptions.c ****     // Calibration state machine
1981:..\src/interruptions.c ****     switch(emg_1_status) {
 6542              		.loc 1 1981 0
 6543 06d8 4E4B     		ldr	r3, .L487+32
 6544 06da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6545 06dc 032B     		cmp	r3, #3
 6546 06de 00F2F880 		bhi	.L473
 6547 06e2 01A2     		adr	r2, .L413
 6548 06e4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6549              		.p2align 2
 6550              	.L413:
 6551 06e8 F9060000 		.word	.L412+1
 6552 06ec 9F070000 		.word	.L414+1
 6553 06f0 B5070000 		.word	.L415+1
 6554 06f4 29080000 		.word	.L416+1
 6555              		.p2align 1
 6556              	.L412:
1982:..\src/interruptions.c ****         case NORMAL: // normal execution
1983:..\src/interruptions.c ****             
1984:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 6557              		.loc 1 1984 0
 6558 06f8 3E4B     		ldr	r3, .L487
 6559 06fa 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6560 06fe 022B     		cmp	r3, #2
 6561 0700 0ED0     		beq	.L417
1985:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6562              		.loc 1 1985 0
 6563 0702 434B     		ldr	r3, .L487+28
 6564 0704 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6565 0708 0233     		adds	r3, r3, #2
 6566 070a 3B4A     		ldr	r2, .L487+4
 6567 070c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6568 0710 A3F26763 		subw	r3, r3, #1639
 6569 0714 5722     		movs	r2, #87
 6570 0716 02FB03F3 		mul	r3, r2, r3
 6571 071a 5B11     		asrs	r3, r3, #5
 6572 071c 7B60     		str	r3, [r7, #4]
 6573 071e 07E0     		b	.L418
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 154


 6574              	.L417:
1986:..\src/interruptions.c ****             }
1987:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
1988:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 6575              		.loc 1 1988 0
 6576 0720 3B4B     		ldr	r3, .L487+28
 6577 0722 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6578 0726 0233     		adds	r3, r3, #2
 6579 0728 334A     		ldr	r2, .L487+4
 6580 072a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6581 072e 7B60     		str	r3, [r7, #4]
 6582              	.L418:
1989:..\src/interruptions.c ****             }
1990:..\src/interruptions.c ****             
1991:..\src/interruptions.c ****             if (i_aux < 0) 
 6583              		.loc 1 1991 0
 6584 0730 7B68     		ldr	r3, [r7, #4]
 6585 0732 002B     		cmp	r3, #0
 6586 0734 01DA     		bge	.L419
1992:..\src/interruptions.c ****                 i_aux = 0;
 6587              		.loc 1 1992 0
 6588 0736 0023     		movs	r3, #0
 6589 0738 7B60     		str	r3, [r7, #4]
 6590              	.L419:
1993:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6591              		.loc 1 1993 0
 6592 073a 3849     		ldr	r1, .L487+40
 6593 073c 7868     		ldr	r0, [r7, #4]
 6594 073e FFF7FEFF 		bl	filter
 6595 0742 7860     		str	r0, [r7, #4]
1994:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6596              		.loc 1 1994 0
 6597 0744 7B68     		ldr	r3, [r7, #4]
 6598 0746 9B02     		lsls	r3, r3, #10
 6599 0748 1A46     		mov	r2, r3
 6600 074a 2A4B     		ldr	r3, .L487
 6601 074c D3F8F431 		ldr	r3, [r3, #500]
 6602 0750 B2FBF3F3 		udiv	r3, r2, r3
 6603 0754 7B60     		str	r3, [r7, #4]
1995:..\src/interruptions.c **** 
1996:..\src/interruptions.c ****             if (interrupt_flag){
 6604              		.loc 1 1996 0
 6605 0756 2D4B     		ldr	r3, .L487+24
 6606 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6607 075a 002B     		cmp	r3, #0
 6608 075c 04D0     		beq	.L420
1997:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6609              		.loc 1 1997 0
 6610 075e 2B4B     		ldr	r3, .L487+24
 6611 0760 0022     		movs	r2, #0
 6612 0762 1A70     		strb	r2, [r3]
1998:..\src/interruptions.c ****                 interrupt_manager();
 6613              		.loc 1 1998 0
 6614 0764 FFF7FEFF 		bl	interrupt_manager
 6615              	.L420:
1999:..\src/interruptions.c ****             }
2000:..\src/interruptions.c ****             //Saturation
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 155


2001:..\src/interruptions.c ****             if (i_aux < 0)
 6616              		.loc 1 2001 0
 6617 0768 7B68     		ldr	r3, [r7, #4]
 6618 076a 002B     		cmp	r3, #0
 6619 076c 02DA     		bge	.L421
2002:..\src/interruptions.c ****                 i_aux = 0;
 6620              		.loc 1 2002 0
 6621 076e 0023     		movs	r3, #0
 6622 0770 7B60     		str	r3, [r7, #4]
 6623 0772 06E0     		b	.L422
 6624              	.L421:
2003:..\src/interruptions.c ****             else 
2004:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6625              		.loc 1 2004 0
 6626 0774 7B68     		ldr	r3, [r7, #4]
 6627 0776 B3F5806F 		cmp	r3, #1024
 6628 077a 02DD     		ble	.L422
2005:..\src/interruptions.c ****                     i_aux = 1024;
 6629              		.loc 1 2005 0
 6630 077c 4FF48063 		mov	r3, #1024
 6631 0780 7B60     		str	r3, [r7, #4]
 6632              	.L422:
2006:..\src/interruptions.c ****             
2007:..\src/interruptions.c ****             g_emg_meas.emg[0] = i_aux;
 6633              		.loc 1 2007 0
 6634 0782 274A     		ldr	r2, .L487+44
 6635 0784 7B68     		ldr	r3, [r7, #4]
 6636 0786 1360     		str	r3, [r2]
2008:..\src/interruptions.c **** 
2009:..\src/interruptions.c ****             if (interrupt_flag){
 6637              		.loc 1 2009 0
 6638 0788 204B     		ldr	r3, .L487+24
 6639 078a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6640 078c 002B     		cmp	r3, #0
 6641 078e 00F0A280 		beq	.L474
2010:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6642              		.loc 1 2010 0
 6643 0792 1E4B     		ldr	r3, .L487+24
 6644 0794 0022     		movs	r2, #0
 6645 0796 1A70     		strb	r2, [r3]
2011:..\src/interruptions.c ****                 interrupt_manager();
 6646              		.loc 1 2011 0
 6647 0798 FFF7FEFF 		bl	interrupt_manager
2012:..\src/interruptions.c ****             }
2013:..\src/interruptions.c ****             
2014:..\src/interruptions.c ****             break;
 6648              		.loc 1 2014 0
 6649 079c 9BE0     		b	.L474
 6650              	.L414:
2015:..\src/interruptions.c **** 
2016:..\src/interruptions.c ****         case RESET: // reset variables
2017:..\src/interruptions.c ****             emg_counter_1 = 0;
 6651              		.loc 1 2017 0
 6652 079e 214B     		ldr	r3, .L487+48
 6653 07a0 0022     		movs	r2, #0
 6654 07a2 1A80     		strh	r2, [r3]	@ movhi
2018:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 156


 6655              		.loc 1 2018 0
 6656 07a4 134B     		ldr	r3, .L487
 6657 07a6 0022     		movs	r2, #0
 6658 07a8 C3F8F421 		str	r2, [r3, #500]
2019:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6659              		.loc 1 2019 0
 6660 07ac 194B     		ldr	r3, .L487+32
 6661 07ae 0222     		movs	r2, #2
 6662 07b0 1A70     		strb	r2, [r3]
2020:..\src/interruptions.c ****             break;
 6663              		.loc 1 2020 0
 6664 07b2 95E0     		b	.L424
 6665              	.L415:
2021:..\src/interruptions.c **** 
2022:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2023:..\src/interruptions.c ****             emg_counter_1++;
 6666              		.loc 1 2023 0
 6667 07b4 1B4B     		ldr	r3, .L487+48
 6668 07b6 1B88     		ldrh	r3, [r3]
 6669 07b8 0133     		adds	r3, r3, #1
 6670 07ba 9AB2     		uxth	r2, r3
 6671 07bc 194B     		ldr	r3, .L487+48
 6672 07be 1A80     		strh	r2, [r3]	@ movhi
2024:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6673              		.loc 1 2024 0
 6674 07c0 184B     		ldr	r3, .L487+48
 6675 07c2 1B88     		ldrh	r3, [r3]
 6676 07c4 B3F5FA7F 		cmp	r3, #500
 6677 07c8 40F08780 		bne	.L475
2025:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6678              		.loc 1 2025 0
 6679 07cc 154B     		ldr	r3, .L487+48
 6680 07ce 0022     		movs	r2, #0
 6681 07d0 1A80     		strh	r2, [r3]	@ movhi
2026:..\src/interruptions.c ****                 LED_control(1);
 6682              		.loc 1 2026 0
 6683 07d2 0120     		movs	r0, #1
 6684 07d4 FFF7FEFF 		bl	LED_control
2027:..\src/interruptions.c **** 				
2028:..\src/interruptions.c ****                 if (interrupt_flag){
 6685              		.loc 1 2028 0
 6686 07d8 0C4B     		ldr	r3, .L487+24
 6687 07da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6688 07dc 002B     		cmp	r3, #0
 6689 07de 04D0     		beq	.L426
2029:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6690              		.loc 1 2029 0
 6691 07e0 0A4B     		ldr	r3, .L487+24
 6692 07e2 0022     		movs	r2, #0
 6693 07e4 1A70     		strb	r2, [r3]
2030:..\src/interruptions.c ****                     interrupt_manager();
 6694              		.loc 1 2030 0
 6695 07e6 FFF7FEFF 		bl	interrupt_manager
 6696              	.L426:
2031:..\src/interruptions.c ****                 }
2032:..\src/interruptions.c ****                 
2033:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 157


 6697              		.loc 1 2033 0
 6698 07ea 0A4B     		ldr	r3, .L487+32
 6699 07ec 0322     		movs	r2, #3
 6700 07ee 1A70     		strb	r2, [r3]
2034:..\src/interruptions.c ****             }
2035:..\src/interruptions.c ****             break;
 6701              		.loc 1 2035 0
 6702 07f0 73E0     		b	.L475
 6703              	.L488:
 6704 07f2 00BF     		.align	2
 6705              	.L487:
 6706 07f4 00000000 		.word	g_mem
 6707 07f8 00000000 		.word	ADC_buf
 6708 07fc 00000000 		.word	pwm_sign
 6709 0800 00000000 		.word	g_meas
 6710 0804 00000000 		.word	g_ref
 6711 0808 08000000 		.word	filt_curr_diff+8
 6712 080c 00000000 		.word	interrupt_flag
 6713 0810 00000000 		.word	c_mem
 6714 0814 00000000 		.word	emg_1_status
 6715 0818 00000000 		.word	emg_2_status
 6716 081c 00000000 		.word	filt_emg
 6717 0820 00000000 		.word	g_emg_meas
 6718 0824 80010000 		.word	emg_counter_1.10567
 6719              	.L416:
2036:..\src/interruptions.c **** 
2037:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2038:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2039:..\src/interruptions.c ****             emg_counter_1++;
 6720              		.loc 1 2039 0
 6721 0828 AC4B     		ldr	r3, .L489
 6722 082a 1B88     		ldrh	r3, [r3]
 6723 082c 0133     		adds	r3, r3, #1
 6724 082e 9AB2     		uxth	r2, r3
 6725 0830 AA4B     		ldr	r3, .L489
 6726 0832 1A80     		strh	r2, [r3]	@ movhi
2040:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6727              		.loc 1 2040 0
 6728 0834 AA4B     		ldr	r3, .L489+4
 6729 0836 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6730 083a 0233     		adds	r3, r3, #2
 6731 083c A94A     		ldr	r2, .L489+8
 6732 083e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6733 0842 002B     		cmp	r3, #0
 6734 0844 07DA     		bge	.L427
2041:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 6735              		.loc 1 2041 0
 6736 0846 A64B     		ldr	r3, .L489+4
 6737 0848 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6738 084c 0233     		adds	r3, r3, #2
 6739 084e A54A     		ldr	r2, .L489+8
 6740 0850 0021     		movs	r1, #0
 6741 0852 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6742              	.L427:
2042:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6743              		.loc 1 2042 0
 6744 0856 A24B     		ldr	r3, .L489+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 158


 6745 0858 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6746 085c 0233     		adds	r3, r3, #2
 6747 085e A14A     		ldr	r2, .L489+8
 6748 0860 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6749 0864 A049     		ldr	r1, .L489+12
 6750 0866 1846     		mov	r0, r3
 6751 0868 FFF7FEFF 		bl	filter
 6752 086c 0246     		mov	r2, r0
 6753 086e 9F4B     		ldr	r3, .L489+16
 6754 0870 D3F8F431 		ldr	r3, [r3, #500]
 6755 0874 1344     		add	r3, r3, r2
 6756 0876 9D4A     		ldr	r2, .L489+16
 6757 0878 C2F8F431 		str	r3, [r2, #500]
2043:..\src/interruptions.c ****             
2044:..\src/interruptions.c ****             if (interrupt_flag){
 6758              		.loc 1 2044 0
 6759 087c 9C4B     		ldr	r3, .L489+20
 6760 087e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6761 0880 002B     		cmp	r3, #0
 6762 0882 04D0     		beq	.L428
2045:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6763              		.loc 1 2045 0
 6764 0884 9A4B     		ldr	r3, .L489+20
 6765 0886 0022     		movs	r2, #0
 6766 0888 1A70     		strb	r2, [r3]
2046:..\src/interruptions.c ****                 interrupt_manager();
 6767              		.loc 1 2046 0
 6768 088a FFF7FEFF 		bl	interrupt_manager
 6769              	.L428:
2047:..\src/interruptions.c ****             }
2048:..\src/interruptions.c ****             
2049:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6770              		.loc 1 2049 0
 6771 088e 934B     		ldr	r3, .L489
 6772 0890 1B88     		ldrh	r3, [r3]
 6773 0892 B3F57A7F 		cmp	r3, #1000
 6774 0896 22D1     		bne	.L476
2050:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6775              		.loc 1 2050 0
 6776 0898 944B     		ldr	r3, .L489+16
 6777 089a D3F8F431 		ldr	r3, [r3, #500]
 6778 089e 954A     		ldr	r2, .L489+24
 6779 08a0 A2FB0323 		umull	r2, r3, r2, r3
 6780 08a4 9B09     		lsrs	r3, r3, #6
 6781 08a6 914A     		ldr	r2, .L489+16
 6782 08a8 C2F8F431 		str	r3, [r2, #500]
2051:..\src/interruptions.c **** 
2052:..\src/interruptions.c ****                 if (interrupt_flag){
 6783              		.loc 1 2052 0
 6784 08ac 904B     		ldr	r3, .L489+20
 6785 08ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6786 08b0 002B     		cmp	r3, #0
 6787 08b2 04D0     		beq	.L430
2053:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6788              		.loc 1 2053 0
 6789 08b4 8E4B     		ldr	r3, .L489+20
 6790 08b6 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 159


 6791 08b8 1A70     		strb	r2, [r3]
2054:..\src/interruptions.c ****                     interrupt_manager();
 6792              		.loc 1 2054 0
 6793 08ba FFF7FEFF 		bl	interrupt_manager
 6794              	.L430:
2055:..\src/interruptions.c ****                 }                    
2056:..\src/interruptions.c ****                 
2057:..\src/interruptions.c ****                 LED_control(0);
 6795              		.loc 1 2057 0
 6796 08be 0020     		movs	r0, #0
 6797 08c0 FFF7FEFF 		bl	LED_control
2058:..\src/interruptions.c **** 				
2059:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6798              		.loc 1 2059 0
 6799 08c4 854B     		ldr	r3, .L489
 6800 08c6 0022     		movs	r2, #0
 6801 08c8 1A80     		strh	r2, [r3]	@ movhi
2060:..\src/interruptions.c **** 
2061:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6802              		.loc 1 2061 0
 6803 08ca 8B4B     		ldr	r3, .L489+28
 6804 08cc 0022     		movs	r2, #0
 6805 08ce 1A70     		strb	r2, [r3]
2062:..\src/interruptions.c ****             }
2063:..\src/interruptions.c ****             break;
 6806              		.loc 1 2063 0
 6807 08d0 05E0     		b	.L476
 6808              	.L473:
2064:..\src/interruptions.c **** 
2065:..\src/interruptions.c ****         default:
2066:..\src/interruptions.c ****             break;
 6809              		.loc 1 2066 0
 6810 08d2 00BF     		nop
 6811 08d4 04E0     		b	.L424
 6812              	.L474:
2014:..\src/interruptions.c **** 
 6813              		.loc 1 2014 0
 6814 08d6 00BF     		nop
 6815 08d8 02E0     		b	.L424
 6816              	.L475:
2035:..\src/interruptions.c **** 
 6817              		.loc 1 2035 0
 6818 08da 00BF     		nop
 6819 08dc 00E0     		b	.L424
 6820              	.L476:
2063:..\src/interruptions.c **** 
 6821              		.loc 1 2063 0
 6822 08de 00BF     		nop
 6823              	.L424:
2067:..\src/interruptions.c ****     }
2068:..\src/interruptions.c **** 
2069:..\src/interruptions.c ****     if (interrupt_flag){
 6824              		.loc 1 2069 0
 6825 08e0 834B     		ldr	r3, .L489+20
 6826 08e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6827 08e4 002B     		cmp	r3, #0
 6828 08e6 04D0     		beq	.L431
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 160


2070:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6829              		.loc 1 2070 0
 6830 08e8 814B     		ldr	r3, .L489+20
 6831 08ea 0022     		movs	r2, #0
 6832 08ec 1A70     		strb	r2, [r3]
2071:..\src/interruptions.c ****         interrupt_manager();
 6833              		.loc 1 2071 0
 6834 08ee FFF7FEFF 		bl	interrupt_manager
 6835              	.L431:
2072:..\src/interruptions.c ****     }
2073:..\src/interruptions.c ****     // EMG 2 calibration state machine
2074:..\src/interruptions.c ****     switch(emg_2_status) {
 6836              		.loc 1 2074 0
 6837 08f2 824B     		ldr	r3, .L489+32
 6838 08f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6839 08f6 052B     		cmp	r3, #5
 6840 08f8 00F2B681 		bhi	.L477
 6841 08fc 01A2     		adr	r2, .L434
 6842 08fe 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6843 0902 00BF     		.p2align 2
 6844              	.L434:
 6845 0904 1D090000 		.word	.L433+1
 6846 0908 B3090000 		.word	.L435+1
 6847 090c DB090000 		.word	.L436+1
 6848 0910 190A0000 		.word	.L437+1
 6849 0914 CB0A0000 		.word	.L438+1
 6850 0918 0D0B0000 		.word	.L439+1
 6851              		.p2align 1
 6852              	.L433:
2075:..\src/interruptions.c ****         case NORMAL: // normal execution
2076:..\src/interruptions.c ****         
2077:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 6853              		.loc 1 2077 0
 6854 091c 734B     		ldr	r3, .L489+16
 6855 091e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6856 0922 022B     		cmp	r3, #2
 6857 0924 0FD0     		beq	.L440
2078:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6858              		.loc 1 2078 0
 6859 0926 6E4B     		ldr	r3, .L489+4
 6860 0928 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6861 092c C3F10303 		rsb	r3, r3, #3
 6862 0930 6C4A     		ldr	r2, .L489+8
 6863 0932 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6864 0936 A3F26763 		subw	r3, r3, #1639
 6865 093a 5722     		movs	r2, #87
 6866 093c 02FB03F3 		mul	r3, r2, r3
 6867 0940 5B11     		asrs	r3, r3, #5
 6868 0942 7B60     		str	r3, [r7, #4]
 6869 0944 08E0     		b	.L441
 6870              	.L440:
2079:..\src/interruptions.c ****             }
2080:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2081:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 6871              		.loc 1 2081 0
 6872 0946 664B     		ldr	r3, .L489+4
 6873 0948 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 161


 6874 094c C3F10303 		rsb	r3, r3, #3
 6875 0950 644A     		ldr	r2, .L489+8
 6876 0952 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6877 0956 7B60     		str	r3, [r7, #4]
 6878              	.L441:
2082:..\src/interruptions.c ****             }
2083:..\src/interruptions.c **** 
2084:..\src/interruptions.c ****             if (i_aux < 0)
 6879              		.loc 1 2084 0
 6880 0958 7B68     		ldr	r3, [r7, #4]
 6881 095a 002B     		cmp	r3, #0
 6882 095c 01DA     		bge	.L442
2085:..\src/interruptions.c ****                 i_aux = 0;
 6883              		.loc 1 2085 0
 6884 095e 0023     		movs	r3, #0
 6885 0960 7B60     		str	r3, [r7, #4]
 6886              	.L442:
2086:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 6887              		.loc 1 2086 0
 6888 0962 6749     		ldr	r1, .L489+36
 6889 0964 7868     		ldr	r0, [r7, #4]
 6890 0966 FFF7FEFF 		bl	filter
 6891 096a 7860     		str	r0, [r7, #4]
2087:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 6892              		.loc 1 2087 0
 6893 096c 7B68     		ldr	r3, [r7, #4]
 6894 096e 9B02     		lsls	r3, r3, #10
 6895 0970 1A46     		mov	r2, r3
 6896 0972 5E4B     		ldr	r3, .L489+16
 6897 0974 D3F8F831 		ldr	r3, [r3, #504]
 6898 0978 B2FBF3F3 		udiv	r3, r2, r3
 6899 097c 7B60     		str	r3, [r7, #4]
2088:..\src/interruptions.c **** 
2089:..\src/interruptions.c ****             if (interrupt_flag){
 6900              		.loc 1 2089 0
 6901 097e 5C4B     		ldr	r3, .L489+20
 6902 0980 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6903 0982 002B     		cmp	r3, #0
 6904 0984 04D0     		beq	.L443
2090:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6905              		.loc 1 2090 0
 6906 0986 5A4B     		ldr	r3, .L489+20
 6907 0988 0022     		movs	r2, #0
 6908 098a 1A70     		strb	r2, [r3]
2091:..\src/interruptions.c ****                 interrupt_manager();
 6909              		.loc 1 2091 0
 6910 098c FFF7FEFF 		bl	interrupt_manager
 6911              	.L443:
2092:..\src/interruptions.c ****             }
2093:..\src/interruptions.c ****             
2094:..\src/interruptions.c ****             if (i_aux < 0) 
 6912              		.loc 1 2094 0
 6913 0990 7B68     		ldr	r3, [r7, #4]
 6914 0992 002B     		cmp	r3, #0
 6915 0994 02DA     		bge	.L444
2095:..\src/interruptions.c ****                 i_aux = 0;
 6916              		.loc 1 2095 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 162


 6917 0996 0023     		movs	r3, #0
 6918 0998 7B60     		str	r3, [r7, #4]
 6919 099a 06E0     		b	.L445
 6920              	.L444:
2096:..\src/interruptions.c ****             else 
2097:..\src/interruptions.c ****                 if (i_aux > 1024)
 6921              		.loc 1 2097 0
 6922 099c 7B68     		ldr	r3, [r7, #4]
 6923 099e B3F5806F 		cmp	r3, #1024
 6924 09a2 02DD     		ble	.L445
2098:..\src/interruptions.c ****                     i_aux = 1024;
 6925              		.loc 1 2098 0
 6926 09a4 4FF48063 		mov	r3, #1024
 6927 09a8 7B60     		str	r3, [r7, #4]
 6928              	.L445:
2099:..\src/interruptions.c ****             
2100:..\src/interruptions.c ****             g_emg_meas.emg[1] = i_aux;
 6929              		.loc 1 2100 0
 6930 09aa 564A     		ldr	r2, .L489+40
 6931 09ac 7B68     		ldr	r3, [r7, #4]
 6932 09ae 5360     		str	r3, [r2, #4]
2101:..\src/interruptions.c **** 
2102:..\src/interruptions.c ****             break;
 6933              		.loc 1 2102 0
 6934 09b0 63E1     		b	.L446
 6935              	.L435:
2103:..\src/interruptions.c **** 
2104:..\src/interruptions.c ****         case RESET: // reset variables
2105:..\src/interruptions.c ****             emg_counter_2 = 0;
 6936              		.loc 1 2105 0
 6937 09b2 554B     		ldr	r3, .L489+44
 6938 09b4 0022     		movs	r2, #0
 6939 09b6 1A80     		strh	r2, [r3]	@ movhi
2106:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 6940              		.loc 1 2106 0
 6941 09b8 4C4B     		ldr	r3, .L489+16
 6942 09ba 0022     		movs	r2, #0
 6943 09bc C3F8F821 		str	r2, [r3, #504]
2107:..\src/interruptions.c **** 
2108:..\src/interruptions.c ****             if (interrupt_flag){
 6944              		.loc 1 2108 0
 6945 09c0 4B4B     		ldr	r3, .L489+20
 6946 09c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6947 09c4 002B     		cmp	r3, #0
 6948 09c6 04D0     		beq	.L447
2109:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6949              		.loc 1 2109 0
 6950 09c8 494B     		ldr	r3, .L489+20
 6951 09ca 0022     		movs	r2, #0
 6952 09cc 1A70     		strb	r2, [r3]
2110:..\src/interruptions.c ****                 interrupt_manager();
 6953              		.loc 1 2110 0
 6954 09ce FFF7FEFF 		bl	interrupt_manager
 6955              	.L447:
2111:..\src/interruptions.c ****             }
2112:..\src/interruptions.c ****             
2113:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 163


 6956              		.loc 1 2113 0
 6957 09d2 4A4B     		ldr	r3, .L489+32
 6958 09d4 0422     		movs	r2, #4
 6959 09d6 1A70     		strb	r2, [r3]
2114:..\src/interruptions.c ****             break;
 6960              		.loc 1 2114 0
 6961 09d8 4FE1     		b	.L446
 6962              	.L436:
2115:..\src/interruptions.c **** 
2116:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2117:..\src/interruptions.c ****             emg_counter_2++;
 6963              		.loc 1 2117 0
 6964 09da 4B4B     		ldr	r3, .L489+44
 6965 09dc 1B88     		ldrh	r3, [r3]
 6966 09de 0133     		adds	r3, r3, #1
 6967 09e0 9AB2     		uxth	r2, r3
 6968 09e2 494B     		ldr	r3, .L489+44
 6969 09e4 1A80     		strh	r2, [r3]	@ movhi
2118:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6970              		.loc 1 2118 0
 6971 09e6 484B     		ldr	r3, .L489+44
 6972 09e8 1B88     		ldrh	r3, [r3]
 6973 09ea B3F5FA7F 		cmp	r3, #500
 6974 09ee 40F03D81 		bne	.L478
2119:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6975              		.loc 1 2119 0
 6976 09f2 454B     		ldr	r3, .L489+44
 6977 09f4 0022     		movs	r2, #0
 6978 09f6 1A80     		strh	r2, [r3]	@ movhi
2120:..\src/interruptions.c ****                 LED_control(1);
 6979              		.loc 1 2120 0
 6980 09f8 0120     		movs	r0, #1
 6981 09fa FFF7FEFF 		bl	LED_control
2121:..\src/interruptions.c **** 
2122:..\src/interruptions.c ****                 if (interrupt_flag){
 6982              		.loc 1 2122 0
 6983 09fe 3C4B     		ldr	r3, .L489+20
 6984 0a00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6985 0a02 002B     		cmp	r3, #0
 6986 0a04 04D0     		beq	.L449
2123:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6987              		.loc 1 2123 0
 6988 0a06 3A4B     		ldr	r3, .L489+20
 6989 0a08 0022     		movs	r2, #0
 6990 0a0a 1A70     		strb	r2, [r3]
2124:..\src/interruptions.c ****                     interrupt_manager();
 6991              		.loc 1 2124 0
 6992 0a0c FFF7FEFF 		bl	interrupt_manager
 6993              	.L449:
2125:..\src/interruptions.c ****                 }
2126:..\src/interruptions.c ****                 
2127:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 6994              		.loc 1 2127 0
 6995 0a10 3A4B     		ldr	r3, .L489+32
 6996 0a12 0322     		movs	r2, #3
 6997 0a14 1A70     		strb	r2, [r3]
2128:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 164


2129:..\src/interruptions.c ****             break;
 6998              		.loc 1 2129 0
 6999 0a16 29E1     		b	.L478
 7000              	.L437:
2130:..\src/interruptions.c **** 
2131:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2132:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2133:..\src/interruptions.c ****             emg_counter_2++;
 7001              		.loc 1 2133 0
 7002 0a18 3B4B     		ldr	r3, .L489+44
 7003 0a1a 1B88     		ldrh	r3, [r3]
 7004 0a1c 0133     		adds	r3, r3, #1
 7005 0a1e 9AB2     		uxth	r2, r3
 7006 0a20 394B     		ldr	r3, .L489+44
 7007 0a22 1A80     		strh	r2, [r3]	@ movhi
2134:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7008              		.loc 1 2134 0
 7009 0a24 2E4B     		ldr	r3, .L489+4
 7010 0a26 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7011 0a2a C3F10303 		rsb	r3, r3, #3
 7012 0a2e 2D4A     		ldr	r2, .L489+8
 7013 0a30 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7014 0a34 002B     		cmp	r3, #0
 7015 0a36 08DA     		bge	.L450
2135:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7016              		.loc 1 2135 0
 7017 0a38 294B     		ldr	r3, .L489+4
 7018 0a3a 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7019 0a3e C3F10303 		rsb	r3, r3, #3
 7020 0a42 284A     		ldr	r2, .L489+8
 7021 0a44 0021     		movs	r1, #0
 7022 0a46 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7023              	.L450:
2136:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7024              		.loc 1 2136 0
 7025 0a4a 254B     		ldr	r3, .L489+4
 7026 0a4c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7027 0a50 C3F10303 		rsb	r3, r3, #3
 7028 0a54 234A     		ldr	r2, .L489+8
 7029 0a56 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7030 0a5a 2949     		ldr	r1, .L489+36
 7031 0a5c 1846     		mov	r0, r3
 7032 0a5e FFF7FEFF 		bl	filter
 7033 0a62 0246     		mov	r2, r0
 7034 0a64 214B     		ldr	r3, .L489+16
 7035 0a66 D3F8F831 		ldr	r3, [r3, #504]
 7036 0a6a 1344     		add	r3, r3, r2
 7037 0a6c 1F4A     		ldr	r2, .L489+16
 7038 0a6e C2F8F831 		str	r3, [r2, #504]
2137:..\src/interruptions.c **** 
2138:..\src/interruptions.c ****             if (interrupt_flag){
 7039              		.loc 1 2138 0
 7040 0a72 1F4B     		ldr	r3, .L489+20
 7041 0a74 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7042 0a76 002B     		cmp	r3, #0
 7043 0a78 04D0     		beq	.L451
2139:..\src/interruptions.c ****                 interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 165


 7044              		.loc 1 2139 0
 7045 0a7a 1D4B     		ldr	r3, .L489+20
 7046 0a7c 0022     		movs	r2, #0
 7047 0a7e 1A70     		strb	r2, [r3]
2140:..\src/interruptions.c ****                 interrupt_manager();
 7048              		.loc 1 2140 0
 7049 0a80 FFF7FEFF 		bl	interrupt_manager
 7050              	.L451:
2141:..\src/interruptions.c ****             }
2142:..\src/interruptions.c ****             
2143:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7051              		.loc 1 2143 0
 7052 0a84 204B     		ldr	r3, .L489+44
 7053 0a86 1B88     		ldrh	r3, [r3]
 7054 0a88 B3F57A7F 		cmp	r3, #1000
 7055 0a8c 40F0F080 		bne	.L479
2144:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7056              		.loc 1 2144 0
 7057 0a90 164B     		ldr	r3, .L489+16
 7058 0a92 D3F8F831 		ldr	r3, [r3, #504]
 7059 0a96 174A     		ldr	r2, .L489+24
 7060 0a98 A2FB0323 		umull	r2, r3, r2, r3
 7061 0a9c 9B09     		lsrs	r3, r3, #6
 7062 0a9e 134A     		ldr	r2, .L489+16
 7063 0aa0 C2F8F831 		str	r3, [r2, #504]
2145:..\src/interruptions.c ****                 LED_control(0);
 7064              		.loc 1 2145 0
 7065 0aa4 0020     		movs	r0, #0
 7066 0aa6 FFF7FEFF 		bl	LED_control
2146:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7067              		.loc 1 2146 0
 7068 0aaa 174B     		ldr	r3, .L489+44
 7069 0aac 0022     		movs	r2, #0
 7070 0aae 1A80     		strh	r2, [r3]	@ movhi
2147:..\src/interruptions.c ****             
2148:..\src/interruptions.c ****                 if (interrupt_flag){
 7071              		.loc 1 2148 0
 7072 0ab0 0F4B     		ldr	r3, .L489+20
 7073 0ab2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7074 0ab4 002B     		cmp	r3, #0
 7075 0ab6 04D0     		beq	.L453
2149:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7076              		.loc 1 2149 0
 7077 0ab8 0D4B     		ldr	r3, .L489+20
 7078 0aba 0022     		movs	r2, #0
 7079 0abc 1A70     		strb	r2, [r3]
2150:..\src/interruptions.c ****                     interrupt_manager();
 7080              		.loc 1 2150 0
 7081 0abe FFF7FEFF 		bl	interrupt_manager
 7082              	.L453:
2151:..\src/interruptions.c ****                 }
2152:..\src/interruptions.c ****                 
2153:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7083              		.loc 1 2153 0
 7084 0ac2 0E4B     		ldr	r3, .L489+32
 7085 0ac4 0522     		movs	r2, #5
 7086 0ac6 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 166


2154:..\src/interruptions.c ****             }
2155:..\src/interruptions.c ****             break;
 7087              		.loc 1 2155 0
 7088 0ac8 D2E0     		b	.L479
 7089              	.L438:
2156:..\src/interruptions.c **** 
2157:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2158:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7090              		.loc 1 2158 0
 7091 0aca 0B4B     		ldr	r3, .L489+28
 7092 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7093 0ace 002B     		cmp	r3, #0
 7094 0ad0 40F0D080 		bne	.L480
2159:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7095              		.loc 1 2159 0
 7096 0ad4 094B     		ldr	r3, .L489+32
 7097 0ad6 0222     		movs	r2, #2
 7098 0ad8 1A70     		strb	r2, [r3]
2160:..\src/interruptions.c ****             break;
 7099              		.loc 1 2160 0
 7100 0ada CBE0     		b	.L480
 7101              	.L490:
 7102              		.align	2
 7103              	.L489:
 7104 0adc 80010000 		.word	emg_counter_1.10567
 7105 0ae0 00000000 		.word	c_mem
 7106 0ae4 00000000 		.word	ADC_buf
 7107 0ae8 00000000 		.word	filt_emg
 7108 0aec 00000000 		.word	g_mem
 7109 0af0 00000000 		.word	interrupt_flag
 7110 0af4 D34D6210 		.word	274877907
 7111 0af8 00000000 		.word	emg_1_status
 7112 0afc 00000000 		.word	emg_2_status
 7113 0b00 08000000 		.word	filt_emg+8
 7114 0b04 00000000 		.word	g_emg_meas
 7115 0b08 82010000 		.word	emg_counter_2.10568
 7116              	.L439:
2161:..\src/interruptions.c **** 
2162:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2163:..\src/interruptions.c ****             emg_counter_2++;
 7117              		.loc 1 2163 0
 7118 0b0c 8D4B     		ldr	r3, .L491
 7119 0b0e 1B88     		ldrh	r3, [r3]
 7120 0b10 0133     		adds	r3, r3, #1
 7121 0b12 9AB2     		uxth	r2, r3
 7122 0b14 8B4B     		ldr	r3, .L491
 7123 0b16 1A80     		strh	r2, [r3]	@ movhi
2164:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7124              		.loc 1 2164 0
 7125 0b18 8A4B     		ldr	r3, .L491
 7126 0b1a 1B88     		ldrh	r3, [r3]
 7127 0b1c B3F5FA7F 		cmp	r3, #500
 7128 0b20 40F0AA80 		bne	.L481
2165:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7129              		.loc 1 2165 0
 7130 0b24 874B     		ldr	r3, .L491
 7131 0b26 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 167


 7132 0b28 1A80     		strh	r2, [r3]	@ movhi
2166:..\src/interruptions.c ****                 
2167:..\src/interruptions.c ****                 if (interrupt_flag){
 7133              		.loc 1 2167 0
 7134 0b2a 874B     		ldr	r3, .L491+4
 7135 0b2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7136 0b2e 002B     		cmp	r3, #0
 7137 0b30 04D0     		beq	.L456
2168:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7138              		.loc 1 2168 0
 7139 0b32 854B     		ldr	r3, .L491+4
 7140 0b34 0022     		movs	r2, #0
 7141 0b36 1A70     		strb	r2, [r3]
2169:..\src/interruptions.c ****                     interrupt_manager();
 7142              		.loc 1 2169 0
 7143 0b38 FFF7FEFF 		bl	interrupt_manager
 7144              	.L456:
2170:..\src/interruptions.c ****                 }
2171:..\src/interruptions.c ****                 
2172:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7145              		.loc 1 2172 0
 7146 0b3c 834B     		ldr	r3, .L491+8
 7147 0b3e 0022     		movs	r2, #0
 7148 0b40 1A70     		strb	r2, [r3]
 7149 0b42 85E0     		b	.L457
 7150              	.L461:
2173:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7151              		.loc 1 2173 0
 7152 0b44 814B     		ldr	r3, .L491+8
 7153 0b46 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7154 0b48 1946     		mov	r1, r3
 7155 0b4a 814A     		ldr	r2, .L491+12
 7156 0b4c 0B46     		mov	r3, r1
 7157 0b4e DB00     		lsls	r3, r3, #3
 7158 0b50 5B1A     		subs	r3, r3, r1
 7159 0b52 1B01     		lsls	r3, r3, #4
 7160 0b54 1344     		add	r3, r3, r2
 7161 0b56 03F58773 		add	r3, r3, #270
 7162 0b5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7163 0b5c 022B     		cmp	r3, #2
 7164 0b5e 29D0     		beq	.L458
2174:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7165              		.loc 1 2174 0 discriminator 1
 7166 0b60 7A4B     		ldr	r3, .L491+8
 7167 0b62 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7168 0b64 1946     		mov	r1, r3
 7169 0b66 7A4A     		ldr	r2, .L491+12
 7170 0b68 0B46     		mov	r3, r1
 7171 0b6a DB00     		lsls	r3, r3, #3
 7172 0b6c 5B1A     		subs	r3, r3, r1
 7173 0b6e 1B01     		lsls	r3, r3, #4
 7174 0b70 1344     		add	r3, r3, r2
 7175 0b72 03F58773 		add	r3, r3, #270
 7176 0b76 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2173:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7177              		.loc 1 2173 0 discriminator 1
 7178 0b78 032B     		cmp	r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 168


 7179 0b7a 1BD0     		beq	.L458
2175:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7180              		.loc 1 2175 0
 7181 0b7c 734B     		ldr	r3, .L491+8
 7182 0b7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7183 0b80 1946     		mov	r1, r3
 7184 0b82 734A     		ldr	r2, .L491+12
 7185 0b84 0B46     		mov	r3, r1
 7186 0b86 DB00     		lsls	r3, r3, #3
 7187 0b88 5B1A     		subs	r3, r3, r1
 7188 0b8a 1B01     		lsls	r3, r3, #4
 7189 0b8c 1344     		add	r3, r3, r2
 7190 0b8e 03F58773 		add	r3, r3, #270
 7191 0b92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2174:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7192              		.loc 1 2174 0
 7193 0b94 042B     		cmp	r3, #4
 7194 0b96 0DD0     		beq	.L458
2176:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 7195              		.loc 1 2176 0
 7196 0b98 6C4B     		ldr	r3, .L491+8
 7197 0b9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7198 0b9c 1946     		mov	r1, r3
 7199 0b9e 6C4A     		ldr	r2, .L491+12
 7200 0ba0 0B46     		mov	r3, r1
 7201 0ba2 DB00     		lsls	r3, r3, #3
 7202 0ba4 5B1A     		subs	r3, r3, r1
 7203 0ba6 1B01     		lsls	r3, r3, #4
 7204 0ba8 1344     		add	r3, r3, r2
 7205 0baa 03F58773 		add	r3, r3, #270
 7206 0bae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2175:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7207              		.loc 1 2175 0
 7208 0bb0 052B     		cmp	r3, #5
 7209 0bb2 47D1     		bne	.L459
 7210              	.L458:
2177:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7211              		.loc 1 2177 0
 7212 0bb4 654B     		ldr	r3, .L491+8
 7213 0bb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7214 0bb8 1946     		mov	r1, r3
 7215 0bba 654A     		ldr	r2, .L491+12
 7216 0bbc 0B46     		mov	r3, r1
 7217 0bbe DB00     		lsls	r3, r3, #3
 7218 0bc0 5B1A     		subs	r3, r3, r1
 7219 0bc2 1B01     		lsls	r3, r3, #4
 7220 0bc4 1344     		add	r3, r3, r2
 7221 0bc6 03F20F13 		addw	r3, r3, #271
 7222 0bca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7223 0bcc 002B     		cmp	r3, #0
 7224 0bce 19D1     		bne	.L460
2178:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7225              		.loc 1 2178 0
 7226 0bd0 5E4B     		ldr	r3, .L491+8
 7227 0bd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7228 0bd4 1846     		mov	r0, r3
 7229 0bd6 5D4B     		ldr	r3, .L491+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 169


 7230 0bd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7231 0bda 1946     		mov	r1, r3
 7232 0bdc 5D4A     		ldr	r2, .L491+16
 7233 0bde 0B46     		mov	r3, r1
 7234 0be0 DB00     		lsls	r3, r3, #3
 7235 0be2 5B1A     		subs	r3, r3, r1
 7236 0be4 1B01     		lsls	r3, r3, #4
 7237 0be6 1344     		add	r3, r3, r2
 7238 0be8 03F58873 		add	r3, r3, #272
 7239 0bec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7240 0bee 1946     		mov	r1, r3
 7241 0bf0 594A     		ldr	r2, .L491+20
 7242 0bf2 3423     		movs	r3, #52
 7243 0bf4 03FB01F3 		mul	r3, r3, r1
 7244 0bf8 1344     		add	r3, r3, r2
 7245 0bfa 1A68     		ldr	r2, [r3]
 7246 0bfc 5749     		ldr	r1, .L491+24
 7247 0bfe 0301     		lsls	r3, r0, #4
 7248 0c00 0B44     		add	r3, r3, r1
 7249 0c02 1A60     		str	r2, [r3]
 7250              	.L460:
2179:..\src/interruptions.c ****                         }
2180:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7251              		.loc 1 2180 0
 7252 0c04 514B     		ldr	r3, .L491+8
 7253 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7254 0c08 1846     		mov	r0, r3
 7255 0c0a 504B     		ldr	r3, .L491+8
 7256 0c0c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7257 0c0e 1946     		mov	r1, r3
 7258 0c10 4F4A     		ldr	r2, .L491+12
 7259 0c12 0B46     		mov	r3, r1
 7260 0c14 DB00     		lsls	r3, r3, #3
 7261 0c16 5B1A     		subs	r3, r3, r1
 7262 0c18 1B01     		lsls	r3, r3, #4
 7263 0c1a 1344     		add	r3, r3, r2
 7264 0c1c E033     		adds	r3, r3, #224
 7265 0c1e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7266 0c20 4E4A     		ldr	r2, .L491+24
 7267 0c22 0301     		lsls	r3, r0, #4
 7268 0c24 1344     		add	r3, r3, r2
 7269 0c26 0C33     		adds	r3, r3, #12
 7270 0c28 0A46     		mov	r2, r1
 7271 0c2a 1A70     		strb	r2, [r3]
2181:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7272              		.loc 1 2181 0
 7273 0c2c 474B     		ldr	r3, .L491+8
 7274 0c2e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7275 0c30 464B     		ldr	r3, .L491+8
 7276 0c32 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7277 0c34 494A     		ldr	r2, .L491+24
 7278 0c36 1B01     		lsls	r3, r3, #4
 7279 0c38 1344     		add	r3, r3, r2
 7280 0c3a 0C33     		adds	r3, r3, #12
 7281 0c3c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7282 0c3e 1946     		mov	r1, r3
 7283 0c40 FFF7FEFF 		bl	enable_motor
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 170


 7284              	.L459:
2172:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7285              		.loc 1 2172 0 discriminator 2
 7286 0c44 414B     		ldr	r3, .L491+8
 7287 0c46 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7288 0c48 0133     		adds	r3, r3, #1
 7289 0c4a DAB2     		uxtb	r2, r3
 7290 0c4c 3F4B     		ldr	r3, .L491+8
 7291 0c4e 1A70     		strb	r2, [r3]
 7292              	.L457:
2172:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7293              		.loc 1 2172 0 is_stmt 0 discriminator 1
 7294 0c50 3E4B     		ldr	r3, .L491+8
 7295 0c52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7296 0c54 012B     		cmp	r3, #1
 7297 0c56 7FF675AF 		bls	.L461
2182:..\src/interruptions.c ****                     }
2183:..\src/interruptions.c ****                 }
2184:..\src/interruptions.c ****                     
2185:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7298              		.loc 1 2185 0 is_stmt 1
 7299 0c5a 0020     		movs	r0, #0
 7300 0c5c FFF7FEFF 		bl	memStore
2186:..\src/interruptions.c ****                     
2187:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7301              		.loc 1 2187 0
 7302 0c60 3F4B     		ldr	r3, .L491+28
 7303 0c62 0022     		movs	r2, #0
 7304 0c64 1A70     		strb	r2, [r3]
2188:..\src/interruptions.c ****             }
2189:..\src/interruptions.c ****             break;
 7305              		.loc 1 2189 0
 7306 0c66 07E0     		b	.L481
 7307              	.L477:
2190:..\src/interruptions.c ****         default:
2191:..\src/interruptions.c ****             break;
 7308              		.loc 1 2191 0
 7309 0c68 00BF     		nop
 7310 0c6a 06E0     		b	.L446
 7311              	.L478:
2129:..\src/interruptions.c **** 
 7312              		.loc 1 2129 0
 7313 0c6c 00BF     		nop
 7314 0c6e 04E0     		b	.L446
 7315              	.L479:
2155:..\src/interruptions.c **** 
 7316              		.loc 1 2155 0
 7317 0c70 00BF     		nop
 7318 0c72 02E0     		b	.L446
 7319              	.L480:
2160:..\src/interruptions.c **** 
 7320              		.loc 1 2160 0
 7321 0c74 00BF     		nop
 7322 0c76 00E0     		b	.L446
 7323              	.L481:
2189:..\src/interruptions.c ****         default:
 7324              		.loc 1 2189 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 171


 7325 0c78 00BF     		nop
 7326              	.L446:
2192:..\src/interruptions.c ****     }
2193:..\src/interruptions.c ****         
2194:..\src/interruptions.c ****     if (interrupt_flag){
 7327              		.loc 1 2194 0
 7328 0c7a 334B     		ldr	r3, .L491+4
 7329 0c7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7330 0c7e 002B     		cmp	r3, #0
 7331 0c80 04D0     		beq	.L462
2195:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7332              		.loc 1 2195 0
 7333 0c82 314B     		ldr	r3, .L491+4
 7334 0c84 0022     		movs	r2, #0
 7335 0c86 1A70     		strb	r2, [r3]
2196:..\src/interruptions.c ****         interrupt_manager();
 7336              		.loc 1 2196 0
 7337 0c88 FFF7FEFF 		bl	interrupt_manager
 7338              	.L462:
2197:..\src/interruptions.c ****     }
2198:..\src/interruptions.c ****     
2199:..\src/interruptions.c ****     // Read also EMG additional sensors port
2200:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 7339              		.loc 1 2200 0
 7340 0c8c 354B     		ldr	r3, .L491+32
 7341 0c8e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7342 0c90 062B     		cmp	r3, #6
 7343 0c92 52D9     		bls	.L482
2201:..\src/interruptions.c ****         
2202:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 7344              		.loc 1 2202 0
 7345 0c94 2D4B     		ldr	r3, .L491+8
 7346 0c96 0022     		movs	r2, #0
 7347 0c98 1A70     		strb	r2, [r3]
 7348 0c9a 4AE0     		b	.L464
 7349              	.L471:
2203:..\src/interruptions.c ****             
2204:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 7350              		.loc 1 2204 0
 7351 0c9c 2B4B     		ldr	r3, .L491+8
 7352 0c9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7353 0ca0 0633     		adds	r3, r3, #6
 7354 0ca2 314A     		ldr	r2, .L491+36
 7355 0ca4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7356 0ca8 7B60     		str	r3, [r7, #4]
2205:..\src/interruptions.c ****             if (i_aux < 0) 
 7357              		.loc 1 2205 0
 7358 0caa 7B68     		ldr	r3, [r7, #4]
 7359 0cac 002B     		cmp	r3, #0
 7360 0cae 01DA     		bge	.L465
2206:..\src/interruptions.c ****                 i_aux = 0;
 7361              		.loc 1 2206 0
 7362 0cb0 0023     		movs	r3, #0
 7363 0cb2 7B60     		str	r3, [r7, #4]
 7364              	.L465:
2207:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 7365              		.loc 1 2207 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 172


 7366 0cb4 254B     		ldr	r3, .L491+8
 7367 0cb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7368 0cb8 0233     		adds	r3, r3, #2
 7369 0cba DB00     		lsls	r3, r3, #3
 7370 0cbc 2B4A     		ldr	r2, .L491+40
 7371 0cbe 1344     		add	r3, r3, r2
 7372 0cc0 1946     		mov	r1, r3
 7373 0cc2 7868     		ldr	r0, [r7, #4]
 7374 0cc4 FFF7FEFF 		bl	filter
 7375 0cc8 7860     		str	r0, [r7, #4]
2208:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 7376              		.loc 1 2208 0
 7377 0cca 7B68     		ldr	r3, [r7, #4]
 7378 0ccc 9B02     		lsls	r3, r3, #10
 7379 0cce 002B     		cmp	r3, #0
 7380 0cd0 01DA     		bge	.L466
 7381 0cd2 03F2FF33 		addw	r3, r3, #1023
 7382              	.L466:
 7383 0cd6 9B12     		asrs	r3, r3, #10
 7384 0cd8 7B60     		str	r3, [r7, #4]
2209:..\src/interruptions.c **** 
2210:..\src/interruptions.c ****             if (interrupt_flag){
 7385              		.loc 1 2210 0
 7386 0cda 1B4B     		ldr	r3, .L491+4
 7387 0cdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7388 0cde 002B     		cmp	r3, #0
 7389 0ce0 04D0     		beq	.L467
2211:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7390              		.loc 1 2211 0
 7391 0ce2 194B     		ldr	r3, .L491+4
 7392 0ce4 0022     		movs	r2, #0
 7393 0ce6 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****                 interrupt_manager();
 7394              		.loc 1 2212 0
 7395 0ce8 FFF7FEFF 		bl	interrupt_manager
 7396              	.L467:
2213:..\src/interruptions.c ****             }
2214:..\src/interruptions.c ****             //Saturation
2215:..\src/interruptions.c ****             if (i_aux < 0)
 7397              		.loc 1 2215 0
 7398 0cec 7B68     		ldr	r3, [r7, #4]
 7399 0cee 002B     		cmp	r3, #0
 7400 0cf0 02DA     		bge	.L468
2216:..\src/interruptions.c ****                 i_aux = 0;
 7401              		.loc 1 2216 0
 7402 0cf2 0023     		movs	r3, #0
 7403 0cf4 7B60     		str	r3, [r7, #4]
 7404 0cf6 06E0     		b	.L469
 7405              	.L468:
2217:..\src/interruptions.c ****             else 
2218:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7406              		.loc 1 2218 0
 7407 0cf8 7B68     		ldr	r3, [r7, #4]
 7408 0cfa B3F5806F 		cmp	r3, #1024
 7409 0cfe 02DD     		ble	.L469
2219:..\src/interruptions.c ****                     i_aux = 1024;
 7410              		.loc 1 2219 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 173


 7411 0d00 4FF48063 		mov	r3, #1024
 7412 0d04 7B60     		str	r3, [r7, #4]
 7413              	.L469:
2220:..\src/interruptions.c ****             
2221:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = i_aux;
 7414              		.loc 1 2221 0
 7415 0d06 114B     		ldr	r3, .L491+8
 7416 0d08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7417 0d0a 1949     		ldr	r1, .L491+44
 7418 0d0c 0233     		adds	r3, r3, #2
 7419 0d0e 7A68     		ldr	r2, [r7, #4]
 7420 0d10 41F82320 		str	r2, [r1, r3, lsl #2]
2222:..\src/interruptions.c **** 
2223:..\src/interruptions.c ****             if (interrupt_flag){
 7421              		.loc 1 2223 0
 7422 0d14 0C4B     		ldr	r3, .L491+4
 7423 0d16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7424 0d18 002B     		cmp	r3, #0
 7425 0d1a 04D0     		beq	.L470
2224:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7426              		.loc 1 2224 0
 7427 0d1c 0A4B     		ldr	r3, .L491+4
 7428 0d1e 0022     		movs	r2, #0
 7429 0d20 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****                 interrupt_manager();
 7430              		.loc 1 2225 0
 7431 0d22 FFF7FEFF 		bl	interrupt_manager
 7432              	.L470:
2202:..\src/interruptions.c ****             
 7433              		.loc 1 2202 0 discriminator 2
 7434 0d26 094B     		ldr	r3, .L491+8
 7435 0d28 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7436 0d2a 0133     		adds	r3, r3, #1
 7437 0d2c DAB2     		uxtb	r2, r3
 7438 0d2e 074B     		ldr	r3, .L491+8
 7439 0d30 1A70     		strb	r2, [r3]
 7440              	.L464:
2202:..\src/interruptions.c ****             
 7441              		.loc 1 2202 0 is_stmt 0 discriminator 1
 7442 0d32 064B     		ldr	r3, .L491+8
 7443 0d34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7444 0d36 052B     		cmp	r3, #5
 7445 0d38 B0D9     		bls	.L471
 7446              	.L482:
2226:..\src/interruptions.c ****             }
2227:..\src/interruptions.c ****         }
2228:..\src/interruptions.c ****     }
2229:..\src/interruptions.c ****     
2230:..\src/interruptions.c **** }
 7447              		.loc 1 2230 0 is_stmt 1
 7448 0d3a 00BF     		nop
 7449 0d3c 0C37     		adds	r7, r7, #12
 7450              		.cfi_def_cfa_offset 20
 7451 0d3e BD46     		mov	sp, r7
 7452              		.cfi_def_cfa_register 13
 7453              		@ sp needed
 7454 0d40 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 174


 7455              	.L492:
 7456 0d42 00BF     		.align	2
 7457              	.L491:
 7458 0d44 82010000 		.word	emg_counter_2.10568
 7459 0d48 00000000 		.word	interrupt_flag
 7460 0d4c 7A010000 		.word	idx.10572
 7461 0d50 00000000 		.word	c_mem
 7462 0d54 00000000 		.word	g_mem
 7463 0d58 00000000 		.word	g_meas
 7464 0d5c 00000000 		.word	g_ref
 7465 0d60 00000000 		.word	emg_2_status
 7466 0d64 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7467 0d68 00000000 		.word	ADC_buf
 7468 0d6c 00000000 		.word	filt_emg
 7469 0d70 00000000 		.word	g_emg_meas
 7470              		.cfi_endproc
 7471              	.LFE71:
 7472              		.size	analog_read_end, .-analog_read_end
 7473              		.section	.text.overcurrent_control,"ax",%progbits
 7474              		.align	2
 7475              		.global	overcurrent_control
 7476              		.thumb
 7477              		.thumb_func
 7478              		.type	overcurrent_control, %function
 7479              	overcurrent_control:
 7480              	.LFB72:
2231:..\src/interruptions.c **** 
2232:..\src/interruptions.c **** //==============================================================================
2233:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2234:..\src/interruptions.c **** //==============================================================================
2235:..\src/interruptions.c **** 
2236:..\src/interruptions.c **** void overcurrent_control() {
 7481              		.loc 1 2236 0
 7482              		.cfi_startproc
 7483              		@ args = 0, pretend = 0, frame = 8
 7484              		@ frame_needed = 1, uses_anonymous_args = 0
 7485              		@ link register save eliminated.
 7486 0000 80B4     		push	{r7}
 7487              		.cfi_def_cfa_offset 4
 7488              		.cfi_offset 7, -4
 7489 0002 83B0     		sub	sp, sp, #12
 7490              		.cfi_def_cfa_offset 16
 7491 0004 00AF     		add	r7, sp, #0
 7492              		.cfi_def_cfa_register 7
 7493              	.LBB4:
2237:..\src/interruptions.c ****     
2238:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 7494              		.loc 1 2238 0
 7495 0006 0023     		movs	r3, #0
 7496 0008 FB71     		strb	r3, [r7, #7]
 7497 000a 61E0     		b	.L494
 7498              	.L498:
2239:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7499              		.loc 1 2239 0
 7500 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7501 000e 3449     		ldr	r1, .L500
 7502 0010 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 175


 7503 0012 DB00     		lsls	r3, r3, #3
 7504 0014 9B1A     		subs	r3, r3, r2
 7505 0016 1B01     		lsls	r3, r3, #4
 7506 0018 0B44     		add	r3, r3, r1
 7507 001a 03F58673 		add	r3, r3, #268
 7508 001e B3F90030 		ldrsh	r3, [r3]
 7509 0022 002B     		cmp	r3, #0
 7510 0024 51D0     		beq	.L495
2240:..\src/interruptions.c ****             // if the current is over the limit
2241:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 7511              		.loc 1 2241 0
 7512 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7513 0028 2E49     		ldr	r1, .L500+4
 7514 002a 1346     		mov	r3, r2
 7515 002c DB00     		lsls	r3, r3, #3
 7516 002e 9B1A     		subs	r3, r3, r2
 7517 0030 1B01     		lsls	r3, r3, #4
 7518 0032 0B44     		add	r3, r3, r1
 7519 0034 03F58873 		add	r3, r3, #272
 7520 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7521 003a 1946     		mov	r1, r3
 7522 003c 2A4A     		ldr	r2, .L500+8
 7523 003e 3423     		movs	r3, #52
 7524 0040 03FB01F3 		mul	r3, r3, r1
 7525 0044 1344     		add	r3, r3, r2
 7526 0046 0C33     		adds	r3, r3, #12
 7527 0048 1968     		ldr	r1, [r3]
 7528 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7529 004c 2448     		ldr	r0, .L500
 7530 004e 1346     		mov	r3, r2
 7531 0050 DB00     		lsls	r3, r3, #3
 7532 0052 9B1A     		subs	r3, r3, r2
 7533 0054 1B01     		lsls	r3, r3, #4
 7534 0056 0344     		add	r3, r3, r0
 7535 0058 03F58673 		add	r3, r3, #268
 7536 005c B3F90030 		ldrsh	r3, [r3]
 7537 0060 9942     		cmp	r1, r3
 7538 0062 07DD     		ble	.L496
2242:..\src/interruptions.c ****                 //decrease pwm_limit
2243:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 7539              		.loc 1 2243 0
 7540 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7541 0066 214A     		ldr	r2, .L500+12
 7542 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7543 006a 013A     		subs	r2, r2, #1
 7544 006c D1B2     		uxtb	r1, r2
 7545 006e 1F4A     		ldr	r2, .L500+12
 7546 0070 D154     		strb	r1, [r2, r3]
 7547 0072 1CE0     		b	.L499
 7548              	.L496:
2244:..\src/interruptions.c ****             // if the current is in the safe zone
2245:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 7549              		.loc 1 2245 0
 7550 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7551 0076 1C4A     		ldr	r2, .L500+8
 7552 0078 3421     		movs	r1, #52
 7553 007a 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 176


 7554 007e 1344     		add	r3, r3, r2
 7555 0080 0C33     		adds	r3, r3, #12
 7556 0082 1968     		ldr	r1, [r3]
 7557 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7558 0086 1648     		ldr	r0, .L500
 7559 0088 1346     		mov	r3, r2
 7560 008a DB00     		lsls	r3, r3, #3
 7561 008c 9B1A     		subs	r3, r3, r2
 7562 008e 1B01     		lsls	r3, r3, #4
 7563 0090 0344     		add	r3, r3, r0
 7564 0092 03F58673 		add	r3, r3, #268
 7565 0096 B3F90030 		ldrsh	r3, [r3]
 7566 009a 0A3B     		subs	r3, r3, #10
 7567 009c 9942     		cmp	r1, r3
 7568 009e 06DA     		bge	.L499
2246:..\src/interruptions.c ****                 //increase pwm_limit
2247:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 7569              		.loc 1 2247 0
 7570 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7571 00a2 124A     		ldr	r2, .L500+12
 7572 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7573 00a6 0132     		adds	r2, r2, #1
 7574 00a8 D1B2     		uxtb	r1, r2
 7575 00aa 104A     		ldr	r2, .L500+12
 7576 00ac D154     		strb	r1, [r2, r3]
 7577              	.L499:
2248:..\src/interruptions.c ****             }
2249:..\src/interruptions.c **** 
2250:..\src/interruptions.c ****             // Bound pwm_limit
2251:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2252:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2253:..\src/interruptions.c ****             else 
2254:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 7578              		.loc 1 2254 0
 7579 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7580 00b0 0E4A     		ldr	r2, .L500+12
 7581 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7582 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7583 00b6 0E49     		ldr	r1, .L500+16
 7584 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7585 00ba 9A42     		cmp	r2, r3
 7586 00bc 05D9     		bls	.L495
2255:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 7587              		.loc 1 2255 0
 7588 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7589 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7590 00c2 0B49     		ldr	r1, .L500+16
 7591 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7592 00c6 094A     		ldr	r2, .L500+12
 7593 00c8 D154     		strb	r1, [r2, r3]
 7594              	.L495:
2238:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7595              		.loc 1 2238 0 discriminator 2
 7596 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7597 00cc 0133     		adds	r3, r3, #1
 7598 00ce FB71     		strb	r3, [r7, #7]
 7599              	.L494:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 177


2238:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7600              		.loc 1 2238 0 is_stmt 0 discriminator 1
 7601 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7602 00d2 012B     		cmp	r3, #1
 7603 00d4 9AD9     		bls	.L498
 7604              	.LBE4:
2256:..\src/interruptions.c ****         }
2257:..\src/interruptions.c ****     }
2258:..\src/interruptions.c **** }
 7605              		.loc 1 2258 0 is_stmt 1
 7606 00d6 00BF     		nop
 7607 00d8 0C37     		adds	r7, r7, #12
 7608              		.cfi_def_cfa_offset 4
 7609 00da BD46     		mov	sp, r7
 7610              		.cfi_def_cfa_register 13
 7611              		@ sp needed
 7612 00dc 80BC     		pop	{r7}
 7613              		.cfi_restore 7
 7614              		.cfi_def_cfa_offset 0
 7615 00de 7047     		bx	lr
 7616              	.L501:
 7617              		.align	2
 7618              	.L500:
 7619 00e0 00000000 		.word	c_mem
 7620 00e4 00000000 		.word	g_mem
 7621 00e8 00000000 		.word	g_meas
 7622 00ec 00000000 		.word	dev_pwm_limit
 7623 00f0 00000000 		.word	dev_pwm_sat
 7624              		.cfi_endproc
 7625              	.LFE72:
 7626              		.size	overcurrent_control, .-overcurrent_control
 7627              		.section	.text.pwm_limit_search,"ax",%progbits
 7628              		.align	2
 7629              		.global	pwm_limit_search
 7630              		.thumb
 7631              		.thumb_func
 7632              		.type	pwm_limit_search, %function
 7633              	pwm_limit_search:
 7634              	.LFB73:
2259:..\src/interruptions.c **** 
2260:..\src/interruptions.c **** //==============================================================================
2261:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2262:..\src/interruptions.c **** //==============================================================================
2263:..\src/interruptions.c **** 
2264:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 7635              		.loc 1 2264 0
 7636              		.cfi_startproc
 7637              		@ args = 0, pretend = 0, frame = 16
 7638              		@ frame_needed = 1, uses_anonymous_args = 0
 7639              		@ link register save eliminated.
 7640 0000 80B4     		push	{r7}
 7641              		.cfi_def_cfa_offset 4
 7642              		.cfi_offset 7, -4
 7643 0002 85B0     		sub	sp, sp, #20
 7644              		.cfi_def_cfa_offset 24
 7645 0004 00AF     		add	r7, sp, #0
 7646              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 178


 7647 0006 0346     		mov	r3, r0
 7648 0008 FB71     		strb	r3, [r7, #7]
2265:..\src/interruptions.c **** 
2266:..\src/interruptions.c ****     uint8 CYDATA index;
2267:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 7649              		.loc 1 2267 0
 7650 000a 46F29C33 		movw	r3, #25500
 7651 000e FB81     		strh	r3, [r7, #14]	@ movhi
2268:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 7652              		.loc 1 2268 0
 7653 0010 42F6EC43 		movw	r3, #11500
 7654 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2269:..\src/interruptions.c ****     
2270:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 7655              		.loc 1 2270 0
 7656 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7657 0018 144A     		ldr	r2, .L507
 7658 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7659 001e FB89     		ldrh	r3, [r7, #14]
 7660 0020 9A42     		cmp	r2, r3
 7661 0022 04DD     		ble	.L503
2271:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 7662              		.loc 1 2271 0
 7663 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7664 0026 124A     		ldr	r2, .L507+4
 7665 0028 0021     		movs	r1, #0
 7666 002a D154     		strb	r1, [r2, r3]
2272:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2273:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2274:..\src/interruptions.c ****     } else {
2275:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2276:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2277:..\src/interruptions.c ****     }
2278:..\src/interruptions.c **** }
 7667              		.loc 1 2278 0
 7668 002c 19E0     		b	.L506
 7669              	.L503:
2272:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 7670              		.loc 1 2272 0
 7671 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7672 0030 0E4A     		ldr	r2, .L507
 7673 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7674 0036 BB89     		ldrh	r3, [r7, #12]
 7675 0038 9A42     		cmp	r2, r3
 7676 003a 04DA     		bge	.L505
2273:..\src/interruptions.c ****     } else {
 7677              		.loc 1 2273 0
 7678 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7679 003e 0C4A     		ldr	r2, .L507+4
 7680 0040 6421     		movs	r1, #100
 7681 0042 D154     		strb	r1, [r2, r3]
 7682              		.loc 1 2278 0
 7683 0044 0DE0     		b	.L506
 7684              	.L505:
2275:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 7685              		.loc 1 2275 0
 7686 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 179


 7687 0048 084A     		ldr	r2, .L507
 7688 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7689 004e BB89     		ldrh	r3, [r7, #12]
 7690 0050 D31A     		subs	r3, r2, r3
 7691 0052 5B12     		asrs	r3, r3, #9
 7692 0054 FB72     		strb	r3, [r7, #11]
2276:..\src/interruptions.c ****     }
 7693              		.loc 1 2276 0
 7694 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7695 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 7696 005a 0649     		ldr	r1, .L507+8
 7697 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7698 005e 044A     		ldr	r2, .L507+4
 7699 0060 D154     		strb	r1, [r2, r3]
 7700              	.L506:
 7701              		.loc 1 2278 0
 7702 0062 00BF     		nop
 7703 0064 1437     		adds	r7, r7, #20
 7704              		.cfi_def_cfa_offset 4
 7705 0066 BD46     		mov	sp, r7
 7706              		.cfi_def_cfa_register 13
 7707              		@ sp needed
 7708 0068 80BC     		pop	{r7}
 7709              		.cfi_restore 7
 7710              		.cfi_def_cfa_offset 0
 7711 006a 7047     		bx	lr
 7712              	.L508:
 7713              		.align	2
 7714              	.L507:
 7715 006c 00000000 		.word	dev_tension
 7716 0070 00000000 		.word	dev_pwm_sat
 7717 0074 00000000 		.word	pwm_preload_values
 7718              		.cfi_endproc
 7719              	.LFE73:
 7720              		.size	pwm_limit_search, .-pwm_limit_search
 7721              		.section	.text.cycles_counter_update,"ax",%progbits
 7722              		.align	2
 7723              		.global	cycles_counter_update
 7724              		.thumb
 7725              		.thumb_func
 7726              		.type	cycles_counter_update, %function
 7727              	cycles_counter_update:
 7728              	.LFB74:
2279:..\src/interruptions.c **** 
2280:..\src/interruptions.c **** //==============================================================================
2281:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2282:..\src/interruptions.c **** //==============================================================================
2283:..\src/interruptions.c **** 
2284:..\src/interruptions.c **** void cycles_counter_update() {
 7729              		.loc 1 2284 0
 7730              		.cfi_startproc
 7731              		@ args = 0, pretend = 0, frame = 24
 7732              		@ frame_needed = 1, uses_anonymous_args = 0
 7733 0000 80B5     		push	{r7, lr}
 7734              		.cfi_def_cfa_offset 8
 7735              		.cfi_offset 7, -8
 7736              		.cfi_offset 14, -4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 180


 7737 0002 86B0     		sub	sp, sp, #24
 7738              		.cfi_def_cfa_offset 32
 7739 0004 00AF     		add	r7, sp, #0
 7740              		.cfi_def_cfa_register 7
2285:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2286:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2287:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2288:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2289:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2290:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2291:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2292:..\src/interruptions.c ****     int32 step;
2293:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2294:..\src/interruptions.c **** 
2295:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 7741              		.loc 1 2295 0
 7742 0006 AB4B     		ldr	r3, .L555
 7743 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7744 000c 1946     		mov	r1, r3
 7745 000e AA4A     		ldr	r2, .L555+4
 7746 0010 3423     		movs	r3, #52
 7747 0012 03FB01F3 		mul	r3, r3, r1
 7748 0016 1344     		add	r3, r3, r2
 7749 0018 1A68     		ldr	r2, [r3]
 7750 001a A64B     		ldr	r3, .L555
 7751 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7752 0020 1846     		mov	r0, r3
 7753 0022 A449     		ldr	r1, .L555
 7754 0024 0346     		mov	r3, r0
 7755 0026 5B00     		lsls	r3, r3, #1
 7756 0028 0344     		add	r3, r3, r0
 7757 002a 1B01     		lsls	r3, r3, #4
 7758 002c 0B44     		add	r3, r3, r1
 7759 002e 03F29513 		addw	r3, r3, #405
 7760 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7761 0034 42FA03F3 		asr	r3, r2, r3
 7762 0038 FB60     		str	r3, [r7, #12]
2296:..\src/interruptions.c ****     
2297:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2298:..\src/interruptions.c ****     switch (pos_cycle_status){
 7763              		.loc 1 2298 0
 7764 003a A04B     		ldr	r3, .L555+8
 7765 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7766 003e 012B     		cmp	r3, #1
 7767 0040 3AD0     		beq	.L511
 7768 0042 022B     		cmp	r3, #2
 7769 0044 6ED0     		beq	.L512
 7770 0046 002B     		cmp	r3, #0
 7771 0048 40F01881 		bne	.L510
2299:..\src/interruptions.c ****         case STATE_INACTIVE:
2300:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 7772              		.loc 1 2300 0
 7773 004c 994B     		ldr	r3, .L555
 7774 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7775 0052 062B     		cmp	r3, #6
 7776 0054 04D0     		beq	.L514
 7777              		.loc 1 2300 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 181


 7778 0056 9A4B     		ldr	r3, .L555+12
 7779 0058 93F90030 		ldrsb	r3, [r3]
 7780 005c 012B     		cmp	r3, #1
 7781 005e 0CD0     		beq	.L515
 7782              	.L514:
 7783              		.loc 1 2300 0 discriminator 3
 7784 0060 944B     		ldr	r3, .L555
 7785 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7786 0066 062B     		cmp	r3, #6
 7787 0068 40F00581 		bne	.L549
 7788              		.loc 1 2300 0 discriminator 4
 7789 006c 944B     		ldr	r3, .L555+12
 7790 006e 93F90030 		ldrsb	r3, [r3]
 7791 0072 B3F1FF3F 		cmp	r3, #-1
 7792 0076 40F0FE80 		bne	.L549
 7793              	.L515:
2301:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 7794              		.loc 1 2301 0 is_stmt 1
 7795 007a 924A     		ldr	r2, .L555+16
 7796 007c FB68     		ldr	r3, [r7, #12]
 7797 007e 1360     		str	r3, [r2]
2302:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7798              		.loc 1 2302 0
 7799 0080 914B     		ldr	r3, .L555+20
 7800 0082 1A68     		ldr	r2, [r3]
 7801 0084 8F4B     		ldr	r3, .L555+16
 7802 0086 1B68     		ldr	r3, [r3]
 7803 0088 9A42     		cmp	r2, r3
 7804 008a 05DD     		ble	.L517
 7805              		.loc 1 2302 0 is_stmt 0 discriminator 1
 7806 008c 8E4B     		ldr	r3, .L555+20
 7807 008e 1A68     		ldr	r2, [r3]
 7808 0090 8C4B     		ldr	r3, .L555+16
 7809 0092 1B68     		ldr	r3, [r3]
 7810 0094 D31A     		subs	r3, r2, r3
 7811 0096 04E0     		b	.L518
 7812              	.L517:
 7813              		.loc 1 2302 0 discriminator 2
 7814 0098 8A4B     		ldr	r3, .L555+16
 7815 009a 1A68     		ldr	r2, [r3]
 7816 009c 8A4B     		ldr	r3, .L555+20
 7817 009e 1B68     		ldr	r3, [r3]
 7818 00a0 D31A     		subs	r3, r2, r3
 7819              	.L518:
 7820              		.loc 1 2302 0 discriminator 4
 7821 00a2 BB60     		str	r3, [r7, #8]
2303:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 7822              		.loc 1 2303 0 is_stmt 1 discriminator 4
 7823 00a4 834B     		ldr	r3, .L555
 7824 00a6 5A6D     		ldr	r2, [r3, #84]
 7825 00a8 BB68     		ldr	r3, [r7, #8]
 7826 00aa 1344     		add	r3, r3, r2
 7827 00ac 814A     		ldr	r2, .L555
 7828 00ae 5365     		str	r3, [r2, #84]
2304:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 7829              		.loc 1 2304 0 discriminator 4
 7830 00b0 824B     		ldr	r3, .L555+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 182


 7831 00b2 0122     		movs	r2, #1
 7832 00b4 1A70     		strb	r2, [r3]
2305:..\src/interruptions.c ****             }
2306:..\src/interruptions.c ****             break;
 7833              		.loc 1 2306 0 discriminator 4
 7834 00b6 DEE0     		b	.L549
 7835              	.L511:
2307:..\src/interruptions.c ****         case STATE_ACTIVE:
2308:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 7836              		.loc 1 2308 0
 7837 00b8 7E4B     		ldr	r3, .L555
 7838 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7839 00be 062B     		cmp	r3, #6
 7840 00c0 05D0     		beq	.L519
 7841              		.loc 1 2308 0 is_stmt 0 discriminator 1
 7842 00c2 7F4B     		ldr	r3, .L555+12
 7843 00c4 93F90030 		ldrsb	r3, [r3]
 7844 00c8 B3F1FF3F 		cmp	r3, #-1
 7845 00cc 0BD0     		beq	.L520
 7846              	.L519:
 7847              		.loc 1 2308 0 discriminator 3
 7848 00ce 794B     		ldr	r3, .L555
 7849 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7850 00d4 062B     		cmp	r3, #6
 7851 00d6 40F0D080 		bne	.L550
 7852              		.loc 1 2308 0 discriminator 4
 7853 00da 794B     		ldr	r3, .L555+12
 7854 00dc 93F90030 		ldrsb	r3, [r3]
 7855 00e0 012B     		cmp	r3, #1
 7856 00e2 40F0CA80 		bne	.L550
 7857              	.L520:
2309:..\src/interruptions.c ****                 max_pos = curr_pos;
 7858              		.loc 1 2309 0 is_stmt 1
 7859 00e6 784A     		ldr	r2, .L555+20
 7860 00e8 FB68     		ldr	r3, [r7, #12]
 7861 00ea 1360     		str	r3, [r2]
2310:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7862              		.loc 1 2310 0
 7863 00ec 764B     		ldr	r3, .L555+20
 7864 00ee 1A68     		ldr	r2, [r3]
 7865 00f0 744B     		ldr	r3, .L555+16
 7866 00f2 1B68     		ldr	r3, [r3]
 7867 00f4 9A42     		cmp	r2, r3
 7868 00f6 05DD     		ble	.L522
 7869              		.loc 1 2310 0 is_stmt 0 discriminator 1
 7870 00f8 734B     		ldr	r3, .L555+20
 7871 00fa 1A68     		ldr	r2, [r3]
 7872 00fc 714B     		ldr	r3, .L555+16
 7873 00fe 1B68     		ldr	r3, [r3]
 7874 0100 D31A     		subs	r3, r2, r3
 7875 0102 04E0     		b	.L523
 7876              	.L522:
 7877              		.loc 1 2310 0 discriminator 2
 7878 0104 6F4B     		ldr	r3, .L555+16
 7879 0106 1A68     		ldr	r2, [r3]
 7880 0108 6F4B     		ldr	r3, .L555+20
 7881 010a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 183


 7882 010c D31A     		subs	r3, r2, r3
 7883              	.L523:
 7884              		.loc 1 2310 0 discriminator 4
 7885 010e BB60     		str	r3, [r7, #8]
2311:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 7886              		.loc 1 2311 0 is_stmt 1 discriminator 4
 7887 0110 684B     		ldr	r3, .L555
 7888 0112 5A6D     		ldr	r2, [r3, #84]
 7889 0114 BB68     		ldr	r3, [r7, #8]
 7890 0116 1344     		add	r3, r3, r2
 7891 0118 664A     		ldr	r2, .L555
 7892 011a 5365     		str	r3, [r2, #84]
2312:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 7893              		.loc 1 2312 0 discriminator 4
 7894 011c 674B     		ldr	r3, .L555+8
 7895 011e 0222     		movs	r2, #2
 7896 0120 1A70     		strb	r2, [r3]
2313:..\src/interruptions.c ****             }
2314:..\src/interruptions.c ****             break;
 7897              		.loc 1 2314 0 discriminator 4
 7898 0122 AAE0     		b	.L550
 7899              	.L512:
2315:..\src/interruptions.c ****         case COUNTER_INC:
2316:..\src/interruptions.c **** 
2317:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7900              		.loc 1 2317 0
 7901 0124 684B     		ldr	r3, .L555+20
 7902 0126 1A68     		ldr	r2, [r3]
 7903 0128 664B     		ldr	r3, .L555+16
 7904 012a 1B68     		ldr	r3, [r3]
 7905 012c 9A42     		cmp	r2, r3
 7906 012e 05DD     		ble	.L524
 7907              		.loc 1 2317 0 is_stmt 0 discriminator 1
 7908 0130 654B     		ldr	r3, .L555+20
 7909 0132 1A68     		ldr	r2, [r3]
 7910 0134 634B     		ldr	r3, .L555+16
 7911 0136 1B68     		ldr	r3, [r3]
 7912 0138 D31A     		subs	r3, r2, r3
 7913 013a 04E0     		b	.L525
 7914              	.L524:
 7915              		.loc 1 2317 0 discriminator 2
 7916 013c 614B     		ldr	r3, .L555+16
 7917 013e 1A68     		ldr	r2, [r3]
 7918 0140 614B     		ldr	r3, .L555+20
 7919 0142 1B68     		ldr	r3, [r3]
 7920 0144 D31A     		subs	r3, r2, r3
 7921              	.L525:
 7922              		.loc 1 2317 0 discriminator 4
 7923 0146 BB60     		str	r3, [r7, #8]
2318:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 7924              		.loc 1 2318 0 is_stmt 1 discriminator 4
 7925 0148 604B     		ldr	r3, .L555+24
 7926 014a 1B68     		ldr	r3, [r3]
 7927 014c BA68     		ldr	r2, [r7, #8]
 7928 014e 9A42     		cmp	r2, r3
 7929 0150 40F38D80 		ble	.L526
2319:..\src/interruptions.c ****                 //update position histogram
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 184


2320:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 7930              		.loc 1 2320 0
 7931 0154 574B     		ldr	r3, .L555
 7932 0156 D3F8E820 		ldr	r2, [r3, #232]
 7933 015a 564B     		ldr	r3, .L555
 7934 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7935 0160 1846     		mov	r0, r3
 7936 0162 5449     		ldr	r1, .L555
 7937 0164 0346     		mov	r3, r0
 7938 0166 5B00     		lsls	r3, r3, #1
 7939 0168 0344     		add	r3, r3, r0
 7940 016a 1B01     		lsls	r3, r3, #4
 7941 016c 0B44     		add	r3, r3, r1
 7942 016e 03F29513 		addw	r3, r3, #405
 7943 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7944 0174 42FA03F3 		asr	r3, r2, r3
 7945 0178 554A     		ldr	r2, .L555+28
 7946 017a 82FB0312 		smull	r1, r2, r2, r3
 7947 017e 9210     		asrs	r2, r2, #2
 7948 0180 DB17     		asrs	r3, r3, #31
 7949 0182 D31A     		subs	r3, r2, r3
 7950 0184 7B60     		str	r3, [r7, #4]
2321:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 7951              		.loc 1 2321 0
 7952 0186 4F4B     		ldr	r3, .L555+16
 7953 0188 1A68     		ldr	r2, [r3]
 7954 018a 7B68     		ldr	r3, [r7, #4]
 7955 018c 92FBF3F3 		sdiv	r3, r2, r3
 7956 0190 FB70     		strb	r3, [r7, #3]
2322:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 7957              		.loc 1 2322 0
 7958 0192 4D4B     		ldr	r3, .L555+20
 7959 0194 1A68     		ldr	r2, [r3]
 7960 0196 7B68     		ldr	r3, [r7, #4]
 7961 0198 92FBF3F3 		sdiv	r3, r2, r3
 7962 019c BB70     		strb	r3, [r7, #2]
2323:..\src/interruptions.c ****                 
2324:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2325:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 7963              		.loc 1 2325 0
 7964 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 7965 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 7966 01a2 9342     		cmp	r3, r2
 7967 01a4 28BF     		it	cs
 7968 01a6 1346     		movcs	r3, r2
 7969 01a8 7B70     		strb	r3, [r7, #1]
2326:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 7970              		.loc 1 2326 0
 7971 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 7972 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 7973 01ae 9342     		cmp	r3, r2
 7974 01b0 38BF     		it	cc
 7975 01b2 1346     		movcc	r3, r2
 7976 01b4 3B70     		strb	r3, [r7]
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7977              		.loc 1 2327 0
 7978 01b6 7B78     		ldrb	r3, [r7, #1]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 185


 7979 01b8 FB75     		strb	r3, [r7, #23]
 7980 01ba 0DE0     		b	.L527
 7981              	.L528:
2328:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2329:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 7982              		.loc 1 2329 0 discriminator 3
 7983 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7984 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7985 01c0 3C49     		ldr	r1, .L555
 7986 01c2 0632     		adds	r2, r2, #6
 7987 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7988 01c8 0132     		adds	r2, r2, #1
 7989 01ca 3A49     		ldr	r1, .L555
 7990 01cc 0633     		adds	r3, r3, #6
 7991 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7992              		.loc 1 2327 0 discriminator 3
 7993 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7994 01d4 0133     		adds	r3, r3, #1
 7995 01d6 FB75     		strb	r3, [r7, #23]
 7996              	.L527:
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7997              		.loc 1 2327 0 is_stmt 0 discriminator 1
 7998 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7999 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 8000 01dc 9A42     		cmp	r2, r3
 8001 01de EDD9     		bls	.L528
2330:..\src/interruptions.c ****                 }
2331:..\src/interruptions.c ****                 
2332:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2333:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 8002              		.loc 1 2333 0 is_stmt 1
 8003 01e0 344B     		ldr	r3, .L555
 8004 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 8005 01e6 002B     		cmp	r3, #0
 8006 01e8 00DA     		bge	.L529
 8007 01ea 0333     		adds	r3, r3, #3
 8008              	.L529:
 8009 01ec 9B10     		asrs	r3, r3, #2
 8010 01ee 1BB2     		sxth	r3, r3
 8011 01f0 7B60     		str	r3, [r7, #4]
2334:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 8012              		.loc 1 2334 0
 8013 01f2 304B     		ldr	r3, .L555
 8014 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 8015 01f8 012B     		cmp	r3, #1
 8016 01fa 0CD1     		bne	.L530
2335:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 8017              		.loc 1 2335 0
 8018 01fc 2D4B     		ldr	r3, .L555
 8019 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8020 0202 1946     		mov	r1, r3
 8021 0204 2C4A     		ldr	r2, .L555+4
 8022 0206 3423     		movs	r3, #52
 8023 0208 03FB01F3 		mul	r3, r3, r1
 8024 020c 1344     		add	r3, r3, r2
 8025 020e 1433     		adds	r3, r3, #20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 186


 8026 0210 1B68     		ldr	r3, [r3]
 8027 0212 3B61     		str	r3, [r7, #16]
 8028 0214 0BE0     		b	.L531
 8029              	.L530:
2336:..\src/interruptions.c ****                 else
2337:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 8030              		.loc 1 2337 0
 8031 0216 274B     		ldr	r3, .L555
 8032 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8033 021c 1946     		mov	r1, r3
 8034 021e 264A     		ldr	r2, .L555+4
 8035 0220 3423     		movs	r3, #52
 8036 0222 03FB01F3 		mul	r3, r3, r1
 8037 0226 1344     		add	r3, r3, r2
 8038 0228 0C33     		adds	r3, r3, #12
 8039 022a 1B68     		ldr	r3, [r3]
 8040 022c 3B61     		str	r3, [r7, #16]
 8041              	.L531:
2338:..\src/interruptions.c ****                     
2339:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 8042              		.loc 1 2339 0
 8043 022e 214B     		ldr	r3, .L555
 8044 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 8045 0234 1A46     		mov	r2, r3
 8046 0236 3B69     		ldr	r3, [r7, #16]
 8047 0238 9A42     		cmp	r2, r3
 8048 023a 05DA     		bge	.L532
2340:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 8049              		.loc 1 2340 0
 8050 023c 1D4B     		ldr	r3, .L555
 8051 023e DB6C     		ldr	r3, [r3, #76]
 8052 0240 0133     		adds	r3, r3, #1
 8053 0242 1C4A     		ldr	r2, .L555
 8054 0244 D364     		str	r3, [r2, #76]
 8055 0246 12E0     		b	.L526
 8056              	.L532:
2341:..\src/interruptions.c ****                 else
2342:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 8057              		.loc 1 2342 0
 8058 0248 3A69     		ldr	r2, [r7, #16]
 8059 024a 7B68     		ldr	r3, [r7, #4]
 8060 024c 92FBF3F3 		sdiv	r3, r2, r3
 8061 0250 DBB2     		uxtb	r3, r3
 8062 0252 3969     		ldr	r1, [r7, #16]
 8063 0254 7A68     		ldr	r2, [r7, #4]
 8064 0256 91FBF2F2 		sdiv	r2, r1, r2
 8065 025a D2B2     		uxtb	r2, r2
 8066 025c 1549     		ldr	r1, .L555
 8067 025e 1032     		adds	r2, r2, #16
 8068 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8069 0264 0132     		adds	r2, r2, #1
 8070 0266 1349     		ldr	r1, .L555
 8071 0268 1033     		adds	r3, r3, #16
 8072 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 8073              	.L526:
2343:..\src/interruptions.c ****             }
2344:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 187


 8074              		.loc 1 2344 0
 8075 026e 134B     		ldr	r3, .L555+8
 8076 0270 0022     		movs	r2, #0
 8077 0272 1A70     		strb	r2, [r3]
2345:..\src/interruptions.c ****             break;
 8078              		.loc 1 2345 0
 8079 0274 02E0     		b	.L510
 8080              	.L549:
2306:..\src/interruptions.c ****         case STATE_ACTIVE:
 8081              		.loc 1 2306 0
 8082 0276 00BF     		nop
 8083 0278 00E0     		b	.L510
 8084              	.L550:
2314:..\src/interruptions.c ****         case COUNTER_INC:
 8085              		.loc 1 2314 0
 8086 027a 00BF     		nop
 8087              	.L510:
2346:..\src/interruptions.c ****     }
2347:..\src/interruptions.c ****     
2348:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2349:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 8088              		.loc 1 2349 0
 8089 027c 0023     		movs	r3, #0
 8090 027e FB75     		strb	r3, [r7, #23]
 8091 0280 53E0     		b	.L533
 8092              	.L541:
2350:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8093              		.loc 1 2350 0
 8094 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8095 0284 134A     		ldr	r2, .L555+32
 8096 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8097 0288 012B     		cmp	r3, #1
 8098 028a 27D0     		beq	.L535
 8099 028c 022B     		cmp	r3, #2
 8100 028e 36D0     		beq	.L536
 8101 0290 002B     		cmp	r3, #0
 8102 0292 47D1     		bne	.L534
2351:..\src/interruptions.c ****             case STATE_INACTIVE:
2352:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 8103              		.loc 1 2352 0
 8104 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8105 0296 104A     		ldr	r2, .L555+36
 8106 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 8107 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8108 029e 0549     		ldr	r1, .L555
 8109 02a0 F832     		adds	r2, r2, #248
 8110 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 8111 02a6 9342     		cmp	r3, r2
 8112 02a8 39DD     		ble	.L551
2353:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 8113              		.loc 1 2353 0
 8114 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8115 02ac 094A     		ldr	r2, .L555+32
 8116 02ae 0121     		movs	r1, #1
 8117 02b0 D154     		strb	r1, [r2, r3]
2354:..\src/interruptions.c ****                 }
2355:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 188


 8118              		.loc 1 2355 0
 8119 02b2 34E0     		b	.L551
 8120              	.L556:
 8121              		.align	2
 8122              	.L555:
 8123 02b4 00000000 		.word	g_mem
 8124 02b8 00000000 		.word	g_meas
 8125 02bc 84010000 		.word	pos_cycle_status.10628
 8126 02c0 00000000 		.word	pwm_sign
 8127 02c4 88010000 		.word	thr_pos.10632
 8128 02c8 8C010000 		.word	max_pos.10633
 8129 02cc 08000000 		.word	bin_threshold.10631
 8130 02d0 67666666 		.word	1717986919
 8131 02d4 90010000 		.word	emg_cycle_status.10629
 8132 02d8 00000000 		.word	g_emg_meas
 8133              	.L535:
2356:..\src/interruptions.c ****             case STATE_ACTIVE:
2357:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 8134              		.loc 1 2357 0
 8135 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8136 02de 404A     		ldr	r2, .L557
 8137 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8138 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8139 02e6 3F49     		ldr	r1, .L557+4
 8140 02e8 F833     		adds	r3, r3, #248
 8141 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8142 02ee 0A3B     		subs	r3, r3, #10
 8143 02f0 9A42     		cmp	r2, r3
 8144 02f2 16DA     		bge	.L552
2358:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 8145              		.loc 1 2358 0
 8146 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8147 02f6 3C4A     		ldr	r2, .L557+8
 8148 02f8 0221     		movs	r1, #2
 8149 02fa D154     		strb	r1, [r2, r3]
2359:..\src/interruptions.c ****                 }
2360:..\src/interruptions.c ****                 break;
 8150              		.loc 1 2360 0
 8151 02fc 11E0     		b	.L552
 8152              	.L536:
2361:..\src/interruptions.c ****             case COUNTER_INC:
2362:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 8153              		.loc 1 2362 0
 8154 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8155 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8156 0302 3849     		ldr	r1, .L557+4
 8157 0304 0432     		adds	r2, r2, #4
 8158 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8159 030a 0132     		adds	r2, r2, #1
 8160 030c 3549     		ldr	r1, .L557+4
 8161 030e 0433     		adds	r3, r3, #4
 8162 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2363:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 8163              		.loc 1 2363 0
 8164 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8165 0316 344A     		ldr	r2, .L557+8
 8166 0318 0021     		movs	r1, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 189


 8167 031a D154     		strb	r1, [r2, r3]
2364:..\src/interruptions.c ****                 break;
 8168              		.loc 1 2364 0
 8169 031c 02E0     		b	.L534
 8170              	.L551:
2355:..\src/interruptions.c ****             case STATE_ACTIVE:
 8171              		.loc 1 2355 0
 8172 031e 00BF     		nop
 8173 0320 00E0     		b	.L534
 8174              	.L552:
2360:..\src/interruptions.c ****             case COUNTER_INC:
 8175              		.loc 1 2360 0
 8176 0322 00BF     		nop
 8177              	.L534:
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8178              		.loc 1 2349 0 discriminator 2
 8179 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8180 0326 0133     		adds	r3, r3, #1
 8181 0328 FB75     		strb	r3, [r7, #23]
 8182              	.L533:
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8183              		.loc 1 2349 0 is_stmt 0 discriminator 1
 8184 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8185 032c 012B     		cmp	r3, #1
 8186 032e 07D8     		bhi	.L540
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8187              		.loc 1 2349 0 discriminator 3
 8188 0330 2E4B     		ldr	r3, .L557+12
 8189 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8190 0334 002B     		cmp	r3, #0
 8191 0336 03D1     		bne	.L540
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8192              		.loc 1 2349 0 discriminator 4
 8193 0338 2D4B     		ldr	r3, .L557+16
 8194 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8195 033c 002B     		cmp	r3, #0
 8196 033e A0D0     		beq	.L541
 8197              	.L540:
2365:..\src/interruptions.c ****         }
2366:..\src/interruptions.c ****     }
2367:..\src/interruptions.c ****     
2368:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2369:..\src/interruptions.c ****     switch (rest_cycle_status){
 8198              		.loc 1 2369 0 is_stmt 1
 8199 0340 2C4B     		ldr	r3, .L557+20
 8200 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8201 0344 012B     		cmp	r3, #1
 8202 0346 11D0     		beq	.L543
 8203 0348 022B     		cmp	r3, #2
 8204 034a 29D0     		beq	.L544
 8205 034c 002B     		cmp	r3, #0
 8206 034e 41D1     		bne	.L542
2370:..\src/interruptions.c ****         case STATE_INACTIVE:
2371:..\src/interruptions.c ****             if (rest_enabled){
 8207              		.loc 1 2371 0
 8208 0350 294B     		ldr	r3, .L557+24
 8209 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 190


 8210 0354 002B     		cmp	r3, #0
 8211 0356 3AD0     		beq	.L553
2372:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 8212              		.loc 1 2372 0
 8213 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8214 035c 0346     		mov	r3, r0
 8215 035e 1A46     		mov	r2, r3
 8216 0360 264B     		ldr	r3, .L557+28
 8217 0362 1A60     		str	r2, [r3]
2373:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8218              		.loc 1 2373 0
 8219 0364 234B     		ldr	r3, .L557+20
 8220 0366 0122     		movs	r2, #1
 8221 0368 1A70     		strb	r2, [r3]
2374:..\src/interruptions.c ****             }
2375:..\src/interruptions.c ****             break;
 8222              		.loc 1 2375 0
 8223 036a 30E0     		b	.L553
 8224              	.L543:
2376:..\src/interruptions.c ****         case STATE_ACTIVE:
2377:..\src/interruptions.c ****             if (!rest_enabled){
 8225              		.loc 1 2377 0
 8226 036c 224B     		ldr	r3, .L557+24
 8227 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8228 0370 002B     		cmp	r3, #0
 8229 0372 2ED1     		bne	.L554
2378:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8230              		.loc 1 2378 0
 8231 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8232 0378 0346     		mov	r3, r0
 8233 037a 1A46     		mov	r2, r3
 8234 037c 204B     		ldr	r3, .L557+32
 8235 037e 1A60     		str	r2, [r3]
2379:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8236              		.loc 1 2379 0
 8237 0380 1E4B     		ldr	r3, .L557+28
 8238 0382 1A68     		ldr	r2, [r3]
 8239 0384 1E4B     		ldr	r3, .L557+32
 8240 0386 1B68     		ldr	r3, [r3]
 8241 0388 9A42     		cmp	r2, r3
 8242 038a 05D2     		bcs	.L548
2380:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8243              		.loc 1 2380 0
 8244 038c 1B4B     		ldr	r3, .L557+28
 8245 038e 1B68     		ldr	r3, [r3]
 8246 0390 03F59663 		add	r3, r3, #1200
 8247 0394 194A     		ldr	r2, .L557+28
 8248 0396 1360     		str	r3, [r2]
 8249              	.L548:
2381:..\src/interruptions.c ****                 }
2382:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8250              		.loc 1 2382 0
 8251 0398 164B     		ldr	r3, .L557+20
 8252 039a 0222     		movs	r2, #2
 8253 039c 1A70     		strb	r2, [r3]
2383:..\src/interruptions.c ****             }
2384:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 191


 8254              		.loc 1 2384 0
 8255 039e 18E0     		b	.L554
 8256              	.L544:
2385:..\src/interruptions.c ****         case COUNTER_INC: 
2386:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8257              		.loc 1 2386 0
 8258 03a0 104B     		ldr	r3, .L557+4
 8259 03a2 DA6D     		ldr	r2, [r3, #92]
 8260 03a4 154B     		ldr	r3, .L557+28
 8261 03a6 1968     		ldr	r1, [r3]
 8262 03a8 154B     		ldr	r3, .L557+32
 8263 03aa 1B68     		ldr	r3, [r3]
 8264 03ac CB1A     		subs	r3, r1, r3
 8265 03ae 1549     		ldr	r1, .L557+36
 8266 03b0 A1FB0313 		umull	r1, r3, r1, r3
 8267 03b4 DB08     		lsrs	r3, r3, #3
 8268 03b6 1344     		add	r3, r3, r2
 8269 03b8 0A4A     		ldr	r2, .L557+4
 8270 03ba D365     		str	r3, [r2, #92]
2387:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8271              		.loc 1 2387 0
 8272 03bc 094B     		ldr	r3, .L557+4
 8273 03be 1B6D     		ldr	r3, [r3, #80]
 8274 03c0 0133     		adds	r3, r3, #1
 8275 03c2 084A     		ldr	r2, .L557+4
 8276 03c4 1365     		str	r3, [r2, #80]
2388:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8277              		.loc 1 2388 0
 8278 03c6 0B4B     		ldr	r3, .L557+20
 8279 03c8 0022     		movs	r2, #0
 8280 03ca 1A70     		strb	r2, [r3]
2389:..\src/interruptions.c ****             break;
 8281              		.loc 1 2389 0
 8282 03cc 02E0     		b	.L542
 8283              	.L553:
2375:..\src/interruptions.c ****         case STATE_ACTIVE:
 8284              		.loc 1 2375 0
 8285 03ce 00BF     		nop
 8286 03d0 00E0     		b	.L542
 8287              	.L554:
2384:..\src/interruptions.c ****         case COUNTER_INC: 
 8288              		.loc 1 2384 0
 8289 03d2 00BF     		nop
 8290              	.L542:
2390:..\src/interruptions.c ****     }
2391:..\src/interruptions.c ****           
2392:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2393:..\src/interruptions.c ****     save_cycles_eeprom();
 8291              		.loc 1 2393 0
 8292 03d4 FFF7FEFF 		bl	save_cycles_eeprom
2394:..\src/interruptions.c ****     
2395:..\src/interruptions.c **** }
 8293              		.loc 1 2395 0
 8294 03d8 00BF     		nop
 8295 03da 1837     		adds	r7, r7, #24
 8296              		.cfi_def_cfa_offset 8
 8297 03dc BD46     		mov	sp, r7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 192


 8298              		.cfi_def_cfa_register 13
 8299              		@ sp needed
 8300 03de 80BD     		pop	{r7, pc}
 8301              	.L558:
 8302              		.align	2
 8303              	.L557:
 8304 03e0 00000000 		.word	g_emg_meas
 8305 03e4 00000000 		.word	g_mem
 8306 03e8 90010000 		.word	emg_cycle_status.10629
 8307 03ec 00000000 		.word	emg_1_status
 8308 03f0 00000000 		.word	emg_2_status
 8309 03f4 92010000 		.word	rest_cycle_status.10630
 8310 03f8 00000000 		.word	rest_enabled
 8311 03fc 94010000 		.word	timer_value_s.10643
 8312 0400 98010000 		.word	timer_value_e.10644
 8313 0404 CDCCCCCC 		.word	-858993459
 8314              		.cfi_endproc
 8315              	.LFE74:
 8316              		.size	cycles_counter_update, .-cycles_counter_update
 8317              		.section	.text.save_cycles_eeprom,"ax",%progbits
 8318              		.align	2
 8319              		.global	save_cycles_eeprom
 8320              		.thumb
 8321              		.thumb_func
 8322              		.type	save_cycles_eeprom, %function
 8323              	save_cycles_eeprom:
 8324              	.LFB75:
2396:..\src/interruptions.c **** 
2397:..\src/interruptions.c **** //==============================================================================
2398:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2399:..\src/interruptions.c **** //==============================================================================
2400:..\src/interruptions.c **** 
2401:..\src/interruptions.c **** void save_cycles_eeprom() {
 8325              		.loc 1 2401 0
 8326              		.cfi_startproc
 8327              		@ args = 0, pretend = 0, frame = 24
 8328              		@ frame_needed = 1, uses_anonymous_args = 0
 8329 0000 80B5     		push	{r7, lr}
 8330              		.cfi_def_cfa_offset 8
 8331              		.cfi_offset 7, -8
 8332              		.cfi_offset 14, -4
 8333 0002 86B0     		sub	sp, sp, #24
 8334              		.cfi_def_cfa_offset 32
 8335 0004 00AF     		add	r7, sp, #0
 8336              		.cfi_def_cfa_register 7
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****     cystatus status;
2404:..\src/interruptions.c ****     static uint8 row_number;
2405:..\src/interruptions.c ****     uint8 row_start = 1;
 8337              		.loc 1 2405 0
 8338 0006 0123     		movs	r3, #1
 8339 0008 FB75     		strb	r3, [r7, #23]
2406:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 8340              		.loc 1 2406 0
 8341 000a 394B     		ldr	r3, .L575
 8342 000c 3B61     		str	r3, [r7, #16]
2407:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 193


 8343              		.loc 1 2407 0
 8344 000e 394B     		ldr	r3, .L575+4
 8345 0010 FB60     		str	r3, [r7, #12]
2408:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 8346              		.loc 1 2408 0
 8347 0012 FB7D     		ldrb	r3, [r7, #23]
 8348 0014 0433     		adds	r3, r3, #4
 8349 0016 FB72     		strb	r3, [r7, #11]
2409:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2410:..\src/interruptions.c **** 
2411:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2412:..\src/interruptions.c ****     switch(cycles_status) {
 8350              		.loc 1 2412 0
 8351 0018 374B     		ldr	r3, .L575+8
 8352 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8353 001c 042B     		cmp	r3, #4
 8354 001e 63D8     		bhi	.L571
 8355 0020 01A2     		adr	r2, .L562
 8356 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8357 0026 00BF     		.p2align 2
 8358              	.L562:
 8359 0028 3D000000 		.word	.L561+1
 8360 002c 5B000000 		.word	.L563+1
 8361 0030 8B000000 		.word	.L564+1
 8362 0034 C7000000 		.word	.L565+1
 8363 0038 DF000000 		.word	.L572+1
 8364              		.p2align 1
 8365              	.L561:
2413:..\src/interruptions.c ****         case PREPARE_DATA:
2414:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2415:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 8366              		.loc 1 2415 0
 8367 003c 5022     		movs	r2, #80
 8368 003e 3969     		ldr	r1, [r7, #16]
 8369 0040 F868     		ldr	r0, [r7, #12]
 8370 0042 FFF7FEFF 		bl	memcpy
2416:..\src/interruptions.c ****             m_addr = addr_start;
 8371              		.loc 1 2416 0
 8372 0046 2D4A     		ldr	r2, .L575+12
 8373 0048 3B69     		ldr	r3, [r7, #16]
 8374 004a 1360     		str	r3, [r2]
2417:..\src/interruptions.c ****             row_number = row_start;
 8375              		.loc 1 2417 0
 8376 004c 2C4A     		ldr	r2, .L575+16
 8377 004e FB7D     		ldrb	r3, [r7, #23]
 8378 0050 1370     		strb	r3, [r2]
2418:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 8379              		.loc 1 2418 0
 8380 0052 294B     		ldr	r3, .L575+8
 8381 0054 0122     		movs	r2, #1
 8382 0056 1A70     		strb	r2, [r3]
2419:..\src/interruptions.c ****             break;
 8383              		.loc 1 2419 0
 8384 0058 46E0     		b	.L560
 8385              	.L563:
2420:..\src/interruptions.c ****             
2421:..\src/interruptions.c ****         case WRITE_CYCLES:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 194


2422:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 8386              		.loc 1 2422 0
 8387 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2423:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 8388              		.loc 1 2423 0
 8389 005e 274B     		ldr	r3, .L575+12
 8390 0060 1A68     		ldr	r2, [r3]
 8391 0062 274B     		ldr	r3, .L575+16
 8392 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8393 0066 1946     		mov	r1, r3
 8394 0068 1046     		mov	r0, r2
 8395 006a FFF7FEFF 		bl	EEPROM_StartWrite
 8396 006e 7860     		str	r0, [r7, #4]
2424:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 8397              		.loc 1 2424 0
 8398 0070 7B68     		ldr	r3, [r7, #4]
 8399 0072 072B     		cmp	r3, #7
 8400 0074 02D0     		beq	.L567
 8401              		.loc 1 2424 0 is_stmt 0 discriminator 1
 8402 0076 7B68     		ldr	r3, [r7, #4]
 8403 0078 002B     		cmp	r3, #0
 8404 007a 32D1     		bne	.L573
 8405              	.L567:
2425:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 8406              		.loc 1 2425 0 is_stmt 1
 8407 007c 1E4B     		ldr	r3, .L575+8
 8408 007e 0222     		movs	r2, #2
 8409 0080 1A70     		strb	r2, [r3]
2426:..\src/interruptions.c ****                 can_write = FALSE;
 8410              		.loc 1 2426 0
 8411 0082 204B     		ldr	r3, .L575+20
 8412 0084 0022     		movs	r2, #0
 8413 0086 1A70     		strb	r2, [r3]
2427:..\src/interruptions.c ****             }
2428:..\src/interruptions.c ****             break;
 8414              		.loc 1 2428 0
 8415 0088 2BE0     		b	.L573
 8416              	.L564:
2429:..\src/interruptions.c ****             
2430:..\src/interruptions.c ****         case WAIT_QUERY:
2431:..\src/interruptions.c ****             status = EEPROM_Query();
 8417              		.loc 1 2431 0
 8418 008a FFF7FEFF 		bl	EEPROM_Query
 8419 008e 7860     		str	r0, [r7, #4]
2432:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 8420              		.loc 1 2432 0
 8421 0090 7B68     		ldr	r3, [r7, #4]
 8422 0092 002B     		cmp	r3, #0
 8423 0094 27D1     		bne	.L574
2433:..\src/interruptions.c ****                 if (row_number < row_end) {
 8424              		.loc 1 2433 0
 8425 0096 1A4B     		ldr	r3, .L575+16
 8426 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8427 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8428 009c 9A42     		cmp	r2, r3
 8429 009e 0ED9     		bls	.L570
2434:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 195


 8430              		.loc 1 2434 0
 8431 00a0 164B     		ldr	r3, .L575+12
 8432 00a2 1B68     		ldr	r3, [r3]
 8433 00a4 1033     		adds	r3, r3, #16
 8434 00a6 154A     		ldr	r2, .L575+12
 8435 00a8 1360     		str	r3, [r2]
2435:..\src/interruptions.c ****                     row_number = row_number + 1;
 8436              		.loc 1 2435 0
 8437 00aa 154B     		ldr	r3, .L575+16
 8438 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8439 00ae 0133     		adds	r3, r3, #1
 8440 00b0 DAB2     		uxtb	r2, r3
 8441 00b2 134B     		ldr	r3, .L575+16
 8442 00b4 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 8443              		.loc 1 2436 0
 8444 00b6 104B     		ldr	r3, .L575+8
 8445 00b8 0122     		movs	r2, #1
 8446 00ba 1A70     		strb	r2, [r3]
2437:..\src/interruptions.c ****                 }
2438:..\src/interruptions.c ****                 else {
2439:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2440:..\src/interruptions.c ****                 }
2441:..\src/interruptions.c ****             }
2442:..\src/interruptions.c ****             break;
 8447              		.loc 1 2442 0
 8448 00bc 13E0     		b	.L574
 8449              	.L570:
2439:..\src/interruptions.c ****                 }
 8450              		.loc 1 2439 0
 8451 00be 0E4B     		ldr	r3, .L575+8
 8452 00c0 0322     		movs	r2, #3
 8453 00c2 1A70     		strb	r2, [r3]
 8454              		.loc 1 2442 0
 8455 00c4 0FE0     		b	.L574
 8456              	.L565:
2443:..\src/interruptions.c ****            
2444:..\src/interruptions.c ****         case WRITE_END:
2445:..\src/interruptions.c ****             can_write = TRUE;            
 8457              		.loc 1 2445 0
 8458 00c6 0F4B     		ldr	r3, .L575+20
 8459 00c8 0122     		movs	r2, #1
 8460 00ca 1A70     		strb	r2, [r3]
2446:..\src/interruptions.c ****             cycles_status = NONE;
 8461              		.loc 1 2446 0
 8462 00cc 0A4B     		ldr	r3, .L575+8
 8463 00ce 0422     		movs	r2, #4
 8464 00d0 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****             
2448:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2449:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 8465              		.loc 1 2449 0
 8466 00d2 5022     		movs	r2, #80
 8467 00d4 F968     		ldr	r1, [r7, #12]
 8468 00d6 3869     		ldr	r0, [r7, #16]
 8469 00d8 FFF7FEFF 		bl	memcpy
2450:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 196


 8470              		.loc 1 2450 0
 8471 00dc 04E0     		b	.L560
 8472              	.L572:
2451:..\src/interruptions.c ****             
2452:..\src/interruptions.c ****         case NONE:
2453:..\src/interruptions.c ****             break;
 8473              		.loc 1 2453 0
 8474 00de 00BF     		nop
 8475 00e0 02E0     		b	.L571
 8476              	.L573:
2428:..\src/interruptions.c ****             
 8477              		.loc 1 2428 0
 8478 00e2 00BF     		nop
 8479 00e4 00E0     		b	.L571
 8480              	.L574:
2442:..\src/interruptions.c ****            
 8481              		.loc 1 2442 0
 8482 00e6 00BF     		nop
 8483              	.L560:
 8484              	.L571:
2454:..\src/interruptions.c ****     }
2455:..\src/interruptions.c ****     
2456:..\src/interruptions.c **** }
 8485              		.loc 1 2456 0
 8486 00e8 00BF     		nop
 8487 00ea 1837     		adds	r7, r7, #24
 8488              		.cfi_def_cfa_offset 8
 8489 00ec BD46     		mov	sp, r7
 8490              		.cfi_def_cfa_register 13
 8491              		@ sp needed
 8492 00ee 80BD     		pop	{r7, pc}
 8493              	.L576:
 8494              		.align	2
 8495              	.L575:
 8496 00f0 10000000 		.word	g_mem+16
 8497 00f4 10000000 		.word	c_mem+16
 8498 00f8 00000000 		.word	cycles_status
 8499 00fc 9C010000 		.word	m_addr.10671
 8500 0100 A0010000 		.word	row_number.10666
 8501 0104 00000000 		.word	can_write
 8502              		.cfi_endproc
 8503              	.LFE75:
 8504              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 8505              		.bss
 8506              	state.10381:
 8507 0000 00       		.space	1
 8508 0001 000000   		.align	2
 8509              	rx_queue.10385:
 8510 0004 000000   		.space	3
 8511              	data_packet_length.10383:
 8512 0007 00       		.space	1
 8513              	data_packet_index.10382:
 8514 0008 00       		.space	1
 8515 0009 000000   		.align	2
 8516              	data_packet_buffer.10384:
 8517 000c 00000000 		.space	128
 8517      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 197


 8517      00000000 
 8517      00000000 
 8517      00000000 
 8518              		.data
 8519              		.align	1
 8520              		.type	counter_calibration.10401, %object
 8521              		.size	counter_calibration.10401, 2
 8522              	counter_calibration.10401:
 8523 0000 0100     		.short	1
 8524              		.align	1
 8525              		.type	counter_tension_func.10402, %object
 8526              		.size	counter_tension_func.10402, 2
 8527              	counter_tension_func.10402:
 8528 0002 0100     		.short	1
 8529              		.bss
 8530              	current_emg.10445:
 8531 008c 00       		.space	1
 8532 008d 000000   		.align	2
 8533              	pos_error_sum.10438:
 8534 0090 00000000 		.space	4
 8535              		.align	2
 8536              	prev_pos_err.10440:
 8537 0094 00000000 		.space	4
 8538              	motor_dir.10443:
 8539 0098 00       		.space	1
 8540 0099 000000   		.align	2
 8541              	curr_error_sum.10439:
 8542 009c 00000000 		.space	4
 8543              		.align	2
 8544              	prev_curr_err.10441:
 8545 00a0 00000000 		.space	4
 8546              		.align	2
 8547              	prev_pwm.10442:
 8548 00a4 00000000 		.space	4
 8549              		.align	2
 8550              	position_counter.10444:
 8551 00a8 00000000 		.space	4
 8552              		.align	2
 8553              	current_emg.10500:
 8554 00ac 0000     		.space	2
 8555 00ae 0000     		.align	2
 8556              	pos_error_sum.10493:
 8557 00b0 00000000 		.space	8
 8557      00000000 
 8558              		.align	2
 8559              	prev_pos_err.10495:
 8560 00b8 00000000 		.space	8
 8560      00000000 
 8561              		.align	2
 8562              	motor_dir.10498:
 8563 00c0 0000     		.space	2
 8564 00c2 0000     		.align	2
 8565              	curr_error_sum.10494:
 8566 00c4 00000000 		.space	8
 8566      00000000 
 8567              		.align	2
 8568              	prev_curr_err.10496:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 198


 8569 00cc 00000000 		.space	8
 8569      00000000 
 8570              		.align	2
 8571              	prev_pwm.10497:
 8572 00d4 00000000 		.space	8
 8572      00000000 
 8573              		.align	2
 8574              	position_counter.10499:
 8575 00dc 00000000 		.space	8
 8575      00000000 
 8576              		.align	2
 8577              	last_value_encoder.10540:
 8578 00e4 00000000 		.space	24
 8578      00000000 
 8578      00000000 
 8578      00000000 
 8578      00000000 
 8579              		.align	2
 8580              	comp_value_encoder.10541:
 8581 00fc 00000000 		.space	24
 8581      00000000 
 8581      00000000 
 8581      00000000 
 8581      00000000 
 8582              		.data
 8583              		.align	2
 8584              		.type	only_first_time.10543, %object
 8585              		.size	only_first_time.10543, 2
 8586              	only_first_time.10543:
 8587 0004 01       		.byte	1
 8588 0005 01       		.byte	1
 8589              		.bss
 8590              		.align	2
 8591              	error.10542:
 8592 0114 00000000 		.space	6
 8592      0000
 8593 011a 0000     		.align	2
 8594              	v_value.10548:
 8595 011c 00000000 		.space	24
 8595      00000000 
 8595      00000000 
 8595      00000000 
 8595      00000000 
 8596              		.align	2
 8597              	vv_value.10549:
 8598 0134 00000000 		.space	24
 8598      00000000 
 8598      00000000 
 8598      00000000 
 8598      00000000 
 8599              		.align	2
 8600              	vvv_value.10550:
 8601 014c 00000000 		.space	24
 8601      00000000 
 8601      00000000 
 8601      00000000 
 8601      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 199


 8602              		.align	2
 8603              	pos_reconstruct.10547:
 8604 0164 0000     		.space	2
 8605 0166 0000     		.align	2
 8606              	one_time_execute.10545:
 8607 0168 0000     		.space	2
 8608 016a 0000     		.align	2
 8609              	safe_startup_motor_activation.10544:
 8610 016c 0000     		.space	2
 8611 016e 0000     		.align	2
 8612              	count_startup_motor.10546:
 8613 0170 00000000 		.space	8
 8613      00000000 
 8614              		.data
 8615              		.type	first_tension_valid.10569, %object
 8616              		.size	first_tension_valid.10569, 1
 8617              	first_tension_valid.10569:
 8618 0006 01       		.byte	1
 8619              		.bss
 8620              		.align	1
 8621              	count.10570:
 8622 0178 0000     		.space	2
 8623              	idx.10572:
 8624 017a 00       		.space	1
 8625 017b 00       		.align	2
 8626              	v_count.10571:
 8627 017c 00000000 		.space	4
 8628              		.align	1
 8629              	emg_counter_1.10567:
 8630 0180 0000     		.space	2
 8631              		.align	1
 8632              	emg_counter_2.10568:
 8633 0182 0000     		.space	2
 8634              	pos_cycle_status.10628:
 8635 0184 00       		.space	1
 8636 0185 000000   		.align	2
 8637              	thr_pos.10632:
 8638 0188 00000000 		.space	4
 8639              		.align	2
 8640              	max_pos.10633:
 8641 018c 00000000 		.space	4
 8642              		.data
 8643 0007 00       		.align	2
 8644              		.type	bin_threshold.10631, %object
 8645              		.size	bin_threshold.10631, 4
 8646              	bin_threshold.10631:
 8647 0008 FA000000 		.word	250
 8648              		.bss
 8649              		.align	2
 8650              	emg_cycle_status.10629:
 8651 0190 0000     		.space	2
 8652              	rest_cycle_status.10630:
 8653 0192 00       		.space	1
 8654 0193 00       		.align	2
 8655              	timer_value_s.10643:
 8656 0194 00000000 		.space	4
 8657              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 200


 8658              	timer_value_e.10644:
 8659 0198 00000000 		.space	4
 8660              		.align	2
 8661              	m_addr.10671:
 8662 019c 00000000 		.space	4
 8663              	row_number.10666:
 8664 01a0 00       		.space	1
 8665              		.text
 8666              	.Letext0:
 8667              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8668              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8669              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8670              		.file 5 "..\\src\\commands.h"
 8671              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 8672              		.file 7 "..\\src\\globals.h"
 8673              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 8674              		.section	.debug_info,"",%progbits
 8675              	.Ldebug_info0:
 8676 0000 60180000 		.4byte	0x1860
 8677 0004 0400     		.2byte	0x4
 8678 0006 00000000 		.4byte	.Ldebug_abbrev0
 8679 000a 04       		.byte	0x4
 8680 000b 01       		.uleb128 0x1
 8681 000c BF070000 		.4byte	.LASF311
 8682 0010 0C       		.byte	0xc
 8683 0011 DB0E0000 		.4byte	.LASF312
 8684 0015 23040000 		.4byte	.LASF313
 8685 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8686 001d 00000000 		.4byte	0
 8687 0021 00000000 		.4byte	.Ldebug_line0
 8688 0025 02       		.uleb128 0x2
 8689 0026 01       		.byte	0x1
 8690 0027 06       		.byte	0x6
 8691 0028 34030000 		.4byte	.LASF0
 8692 002c 02       		.uleb128 0x2
 8693 002d 01       		.byte	0x1
 8694 002e 08       		.byte	0x8
 8695 002f B1030000 		.4byte	.LASF1
 8696 0033 02       		.uleb128 0x2
 8697 0034 02       		.byte	0x2
 8698 0035 05       		.byte	0x5
 8699 0036 440D0000 		.4byte	.LASF2
 8700 003a 02       		.uleb128 0x2
 8701 003b 02       		.byte	0x2
 8702 003c 07       		.byte	0x7
 8703 003d 980E0000 		.4byte	.LASF3
 8704 0041 03       		.uleb128 0x3
 8705 0042 4E0F0000 		.4byte	.LASF9
 8706 0046 02       		.byte	0x2
 8707 0047 3F       		.byte	0x3f
 8708 0048 4C000000 		.4byte	0x4c
 8709 004c 02       		.uleb128 0x2
 8710 004d 04       		.byte	0x4
 8711 004e 05       		.byte	0x5
 8712 004f 3F020000 		.4byte	.LASF4
 8713 0053 02       		.uleb128 0x2
 8714 0054 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 201


 8715 0055 07       		.byte	0x7
 8716 0056 E9060000 		.4byte	.LASF5
 8717 005a 02       		.uleb128 0x2
 8718 005b 08       		.byte	0x8
 8719 005c 05       		.byte	0x5
 8720 005d 85080000 		.4byte	.LASF6
 8721 0061 02       		.uleb128 0x2
 8722 0062 08       		.byte	0x8
 8723 0063 07       		.byte	0x7
 8724 0064 250B0000 		.4byte	.LASF7
 8725 0068 04       		.uleb128 0x4
 8726 0069 04       		.byte	0x4
 8727 006a 05       		.byte	0x5
 8728 006b 696E7400 		.ascii	"int\000"
 8729 006f 02       		.uleb128 0x2
 8730 0070 04       		.byte	0x4
 8731 0071 07       		.byte	0x7
 8732 0072 68090000 		.4byte	.LASF8
 8733 0076 03       		.uleb128 0x3
 8734 0077 52000000 		.4byte	.LASF10
 8735 007b 03       		.byte	0x3
 8736 007c 2C       		.byte	0x2c
 8737 007d 41000000 		.4byte	0x41
 8738 0081 05       		.uleb128 0x5
 8739 0082 2A0D0000 		.4byte	.LASF11
 8740 0086 04       		.byte	0x4
 8741 0087 E401     		.2byte	0x1e4
 8742 0089 2C000000 		.4byte	0x2c
 8743 008d 05       		.uleb128 0x5
 8744 008e 9B0F0000 		.4byte	.LASF12
 8745 0092 04       		.byte	0x4
 8746 0093 E501     		.2byte	0x1e5
 8747 0095 3A000000 		.4byte	0x3a
 8748 0099 05       		.uleb128 0x5
 8749 009a 83000000 		.4byte	.LASF13
 8750 009e 04       		.byte	0x4
 8751 009f E601     		.2byte	0x1e6
 8752 00a1 53000000 		.4byte	0x53
 8753 00a5 05       		.uleb128 0x5
 8754 00a6 54010000 		.4byte	.LASF14
 8755 00aa 04       		.byte	0x4
 8756 00ab E701     		.2byte	0x1e7
 8757 00ad 25000000 		.4byte	0x25
 8758 00b1 05       		.uleb128 0x5
 8759 00b2 D00D0000 		.4byte	.LASF15
 8760 00b6 04       		.byte	0x4
 8761 00b7 E801     		.2byte	0x1e8
 8762 00b9 33000000 		.4byte	0x33
 8763 00bd 05       		.uleb128 0x5
 8764 00be F20E0000 		.4byte	.LASF16
 8765 00c2 04       		.byte	0x4
 8766 00c3 E901     		.2byte	0x1e9
 8767 00c5 4C000000 		.4byte	0x4c
 8768 00c9 05       		.uleb128 0x5
 8769 00ca DB020000 		.4byte	.LASF17
 8770 00ce 04       		.byte	0x4
 8771 00cf EA01     		.2byte	0x1ea
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 202


 8772 00d1 D5000000 		.4byte	0xd5
 8773 00d5 02       		.uleb128 0x2
 8774 00d6 04       		.byte	0x4
 8775 00d7 04       		.byte	0x4
 8776 00d8 3D090000 		.4byte	.LASF18
 8777 00dc 02       		.uleb128 0x2
 8778 00dd 08       		.byte	0x8
 8779 00de 04       		.byte	0x4
 8780 00df C8080000 		.4byte	.LASF19
 8781 00e3 02       		.uleb128 0x2
 8782 00e4 01       		.byte	0x1
 8783 00e5 08       		.byte	0x8
 8784 00e6 93040000 		.4byte	.LASF20
 8785 00ea 05       		.uleb128 0x5
 8786 00eb A1090000 		.4byte	.LASF21
 8787 00ef 04       		.byte	0x4
 8788 00f0 8602     		.2byte	0x286
 8789 00f2 53000000 		.4byte	0x53
 8790 00f6 05       		.uleb128 0x5
 8791 00f7 C20B0000 		.4byte	.LASF22
 8792 00fb 04       		.byte	0x4
 8793 00fc 8E02     		.2byte	0x28e
 8794 00fe 02010000 		.4byte	0x102
 8795 0102 06       		.uleb128 0x6
 8796 0103 81000000 		.4byte	0x81
 8797 0107 02       		.uleb128 0x2
 8798 0108 08       		.byte	0x8
 8799 0109 04       		.byte	0x4
 8800 010a 320A0000 		.4byte	.LASF23
 8801 010e 02       		.uleb128 0x2
 8802 010f 04       		.byte	0x4
 8803 0110 07       		.byte	0x7
 8804 0111 00000000 		.4byte	.LASF24
 8805 0115 07       		.uleb128 0x7
 8806 0116 E3000000 		.4byte	0xe3
 8807 011a 25010000 		.4byte	0x125
 8808 011e 08       		.uleb128 0x8
 8809 011f 0E010000 		.4byte	0x10e
 8810 0123 07       		.byte	0x7
 8811 0124 00       		.byte	0
 8812 0125 09       		.uleb128 0x9
 8813 0126 880F0000 		.4byte	.LASF32
 8814 012a 01       		.byte	0x1
 8815 012b 2C000000 		.4byte	0x2c
 8816 012f 05       		.byte	0x5
 8817 0130 8B       		.byte	0x8b
 8818 0131 60010000 		.4byte	0x160
 8819 0135 0A       		.uleb128 0xa
 8820 0136 6D060000 		.4byte	.LASF25
 8821 013a 00       		.byte	0
 8822 013b 0A       		.uleb128 0xa
 8823 013c AA090000 		.4byte	.LASF26
 8824 0140 01       		.byte	0x1
 8825 0141 0A       		.uleb128 0xa
 8826 0142 D5010000 		.4byte	.LASF27
 8827 0146 02       		.byte	0x2
 8828 0147 0A       		.uleb128 0xa
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 203


 8829 0148 22010000 		.4byte	.LASF28
 8830 014c 03       		.byte	0x3
 8831 014d 0A       		.uleb128 0xa
 8832 014e DC000000 		.4byte	.LASF29
 8833 0152 04       		.byte	0x4
 8834 0153 0A       		.uleb128 0xa
 8835 0154 1A000000 		.4byte	.LASF30
 8836 0158 05       		.byte	0x5
 8837 0159 0A       		.uleb128 0xa
 8838 015a CA0C0000 		.4byte	.LASF31
 8839 015e 06       		.byte	0x6
 8840 015f 00       		.byte	0
 8841 0160 09       		.uleb128 0x9
 8842 0161 93080000 		.4byte	.LASF33
 8843 0165 01       		.byte	0x1
 8844 0166 2C000000 		.4byte	0x2c
 8845 016a 05       		.byte	0x5
 8846 016b 9E       		.byte	0x9e
 8847 016c 89010000 		.4byte	0x189
 8848 0170 0A       		.uleb128 0xa
 8849 0171 400F0000 		.4byte	.LASF34
 8850 0175 00       		.byte	0
 8851 0176 0A       		.uleb128 0xa
 8852 0177 9D070000 		.4byte	.LASF35
 8853 017b 01       		.byte	0x1
 8854 017c 0A       		.uleb128 0xa
 8855 017d 220A0000 		.4byte	.LASF36
 8856 0181 02       		.byte	0x2
 8857 0182 0A       		.uleb128 0xa
 8858 0183 CC060000 		.4byte	.LASF37
 8859 0187 03       		.byte	0x3
 8860 0188 00       		.byte	0
 8861 0189 03       		.uleb128 0x3
 8862 018a 190F0000 		.4byte	.LASF38
 8863 018e 06       		.byte	0x6
 8864 018f 7E       		.byte	0x7e
 8865 0190 94010000 		.4byte	0x194
 8866 0194 0B       		.uleb128 0xb
 8867 0195 190F0000 		.4byte	.LASF38
 8868 0199 0C       		.uleb128 0xc
 8869 019a 04       		.byte	0x4
 8870 019b 89010000 		.4byte	0x189
 8871 019f 0D       		.uleb128 0xd
 8872 01a0 4D080000 		.4byte	.LASF41
 8873 01a4 10       		.byte	0x10
 8874 01a5 07       		.byte	0x7
 8875 01a6 D3       		.byte	0xd3
 8876 01a7 DC010000 		.4byte	0x1dc
 8877 01ab 0E       		.uleb128 0xe
 8878 01ac 706F7300 		.ascii	"pos\000"
 8879 01b0 07       		.byte	0x7
 8880 01b1 D4       		.byte	0xd4
 8881 01b2 BD000000 		.4byte	0xbd
 8882 01b6 00       		.byte	0
 8883 01b7 0F       		.uleb128 0xf
 8884 01b8 82070000 		.4byte	.LASF39
 8885 01bc 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 204


 8886 01bd D5       		.byte	0xd5
 8887 01be BD000000 		.4byte	0xbd
 8888 01c2 04       		.byte	0x4
 8889 01c3 0E       		.uleb128 0xe
 8890 01c4 70776D00 		.ascii	"pwm\000"
 8891 01c8 07       		.byte	0x7
 8892 01c9 D6       		.byte	0xd6
 8893 01ca BD000000 		.4byte	0xbd
 8894 01ce 08       		.byte	0x8
 8895 01cf 0F       		.uleb128 0xf
 8896 01d0 590B0000 		.4byte	.LASF40
 8897 01d4 07       		.byte	0x7
 8898 01d5 D7       		.byte	0xd7
 8899 01d6 81000000 		.4byte	0x81
 8900 01da 0C       		.byte	0xc
 8901 01db 00       		.byte	0
 8902 01dc 0D       		.uleb128 0xd
 8903 01dd A40C0000 		.4byte	.LASF42
 8904 01e1 34       		.byte	0x34
 8905 01e2 07       		.byte	0x7
 8906 01e3 DE       		.byte	0xde
 8907 01e4 3D020000 		.4byte	0x23d
 8908 01e8 0E       		.uleb128 0xe
 8909 01e9 706F7300 		.ascii	"pos\000"
 8910 01ed 07       		.byte	0x7
 8911 01ee DF       		.byte	0xdf
 8912 01ef 3D020000 		.4byte	0x23d
 8913 01f3 00       		.byte	0
 8914 01f4 0F       		.uleb128 0xf
 8915 01f5 82070000 		.4byte	.LASF39
 8916 01f9 07       		.byte	0x7
 8917 01fa E0       		.byte	0xe0
 8918 01fb BD000000 		.4byte	0xbd
 8919 01ff 0C       		.byte	0xc
 8920 0200 0F       		.uleb128 0xf
 8921 0201 070E0000 		.4byte	.LASF43
 8922 0205 07       		.byte	0x7
 8923 0206 E1       		.byte	0xe1
 8924 0207 BD000000 		.4byte	0xbd
 8925 020b 10       		.byte	0x10
 8926 020c 0F       		.uleb128 0xf
 8927 020d 16070000 		.4byte	.LASF44
 8928 0211 07       		.byte	0x7
 8929 0212 E2       		.byte	0xe2
 8930 0213 BD000000 		.4byte	0xbd
 8931 0217 14       		.byte	0x14
 8932 0218 0E       		.uleb128 0xe
 8933 0219 726F7400 		.ascii	"rot\000"
 8934 021d 07       		.byte	0x7
 8935 021e E3       		.byte	0xe3
 8936 021f 4D020000 		.4byte	0x24d
 8937 0223 18       		.byte	0x18
 8938 0224 0E       		.uleb128 0xe
 8939 0225 76656C00 		.ascii	"vel\000"
 8940 0229 07       		.byte	0x7
 8941 022a E4       		.byte	0xe4
 8942 022b 3D020000 		.4byte	0x23d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 205


 8943 022f 1C       		.byte	0x1c
 8944 0230 0E       		.uleb128 0xe
 8945 0231 61636300 		.ascii	"acc\000"
 8946 0235 07       		.byte	0x7
 8947 0236 E5       		.byte	0xe5
 8948 0237 3D020000 		.4byte	0x23d
 8949 023b 28       		.byte	0x28
 8950 023c 00       		.byte	0
 8951 023d 07       		.uleb128 0x7
 8952 023e BD000000 		.4byte	0xbd
 8953 0242 4D020000 		.4byte	0x24d
 8954 0246 08       		.uleb128 0x8
 8955 0247 0E010000 		.4byte	0x10e
 8956 024b 02       		.byte	0x2
 8957 024c 00       		.byte	0
 8958 024d 07       		.uleb128 0x7
 8959 024e A5000000 		.4byte	0xa5
 8960 0252 5D020000 		.4byte	0x25d
 8961 0256 08       		.uleb128 0x8
 8962 0257 0E010000 		.4byte	0x10e
 8963 025b 02       		.byte	0x2
 8964 025c 00       		.byte	0
 8965 025d 0D       		.uleb128 0xd
 8966 025e 640A0000 		.4byte	.LASF45
 8967 0262 20       		.byte	0x20
 8968 0263 07       		.byte	0x7
 8969 0264 E8       		.byte	0xe8
 8970 0265 82020000 		.4byte	0x282
 8971 0269 0E       		.uleb128 0xe
 8972 026a 656D6700 		.ascii	"emg\000"
 8973 026e 07       		.byte	0x7
 8974 026f E9       		.byte	0xe9
 8975 0270 82020000 		.4byte	0x282
 8976 0274 00       		.byte	0
 8977 0275 0F       		.uleb128 0xf
 8978 0276 E6090000 		.4byte	.LASF46
 8979 027a 07       		.byte	0x7
 8980 027b EA       		.byte	0xea
 8981 027c 92020000 		.4byte	0x292
 8982 0280 08       		.byte	0x8
 8983 0281 00       		.byte	0
 8984 0282 07       		.uleb128 0x7
 8985 0283 BD000000 		.4byte	0xbd
 8986 0287 92020000 		.4byte	0x292
 8987 028b 08       		.uleb128 0x8
 8988 028c 0E010000 		.4byte	0x10e
 8989 0290 01       		.byte	0x1
 8990 0291 00       		.byte	0
 8991 0292 07       		.uleb128 0x7
 8992 0293 BD000000 		.4byte	0xbd
 8993 0297 A2020000 		.4byte	0x2a2
 8994 029b 08       		.uleb128 0x8
 8995 029c 0E010000 		.4byte	0x10e
 8996 02a0 05       		.byte	0x5
 8997 02a1 00       		.byte	0
 8998 02a2 0D       		.uleb128 0xd
 8999 02a3 70000000 		.4byte	.LASF47
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 206


 9000 02a7 86       		.byte	0x86
 9001 02a8 07       		.byte	0x7
 9002 02a9 F5       		.byte	0xf5
 9003 02aa DF020000 		.4byte	0x2df
 9004 02ae 0F       		.uleb128 0xf
 9005 02af 8E050000 		.4byte	.LASF48
 9006 02b3 07       		.byte	0x7
 9007 02b4 F6       		.byte	0xf6
 9008 02b5 DF020000 		.4byte	0x2df
 9009 02b9 00       		.byte	0
 9010 02ba 0F       		.uleb128 0xf
 9011 02bb 3C0B0000 		.4byte	.LASF49
 9012 02bf 07       		.byte	0x7
 9013 02c0 F7       		.byte	0xf7
 9014 02c1 B1000000 		.4byte	0xb1
 9015 02c5 80       		.byte	0x80
 9016 02c6 0E       		.uleb128 0xe
 9017 02c7 696E6400 		.ascii	"ind\000"
 9018 02cb 07       		.byte	0x7
 9019 02cc F8       		.byte	0xf8
 9020 02cd B1000000 		.4byte	0xb1
 9021 02d1 82       		.byte	0x82
 9022 02d2 0F       		.uleb128 0xf
 9023 02d3 A8010000 		.4byte	.LASF50
 9024 02d7 07       		.byte	0x7
 9025 02d8 F9       		.byte	0xf9
 9026 02d9 81000000 		.4byte	0x81
 9027 02dd 84       		.byte	0x84
 9028 02de 00       		.byte	0
 9029 02df 07       		.uleb128 0x7
 9030 02e0 81000000 		.4byte	0x81
 9031 02e4 EF020000 		.4byte	0x2ef
 9032 02e8 08       		.uleb128 0x8
 9033 02e9 0E010000 		.4byte	0x10e
 9034 02ed 7F       		.byte	0x7f
 9035 02ee 00       		.byte	0
 9036 02ef 10       		.uleb128 0x10
 9037 02f0 C8020000 		.4byte	.LASF51
 9038 02f4 50       		.byte	0x50
 9039 02f5 07       		.byte	0x7
 9040 02f6 0201     		.2byte	0x102
 9041 02f8 58030000 		.4byte	0x358
 9042 02fc 11       		.uleb128 0x11
 9043 02fd FD020000 		.4byte	.LASF52
 9044 0301 07       		.byte	0x7
 9045 0302 0301     		.2byte	0x103
 9046 0304 58030000 		.4byte	0x358
 9047 0308 00       		.byte	0
 9048 0309 11       		.uleb128 0x11
 9049 030a 7A010000 		.4byte	.LASF53
 9050 030e 07       		.byte	0x7
 9051 030f 0401     		.2byte	0x104
 9052 0311 68030000 		.4byte	0x368
 9053 0315 08       		.byte	0x8
 9054 0316 11       		.uleb128 0x11
 9055 0317 150A0000 		.4byte	.LASF54
 9056 031b 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 207


 9057 031c 0501     		.2byte	0x105
 9058 031e 78030000 		.4byte	0x378
 9059 0322 30       		.byte	0x30
 9060 0323 11       		.uleb128 0x11
 9061 0324 06010000 		.4byte	.LASF55
 9062 0328 07       		.byte	0x7
 9063 0329 0601     		.2byte	0x106
 9064 032b 99000000 		.4byte	0x99
 9065 032f 40       		.byte	0x40
 9066 0330 11       		.uleb128 0x11
 9067 0331 580F0000 		.4byte	.LASF56
 9068 0335 07       		.byte	0x7
 9069 0336 0701     		.2byte	0x107
 9070 0338 99000000 		.4byte	0x99
 9071 033c 44       		.byte	0x44
 9072 033d 11       		.uleb128 0x11
 9073 033e FB060000 		.4byte	.LASF57
 9074 0342 07       		.byte	0x7
 9075 0343 0801     		.2byte	0x108
 9076 0345 99000000 		.4byte	0x99
 9077 0349 48       		.byte	0x48
 9078 034a 11       		.uleb128 0x11
 9079 034b 20070000 		.4byte	.LASF58
 9080 034f 07       		.byte	0x7
 9081 0350 0901     		.2byte	0x109
 9082 0352 99000000 		.4byte	0x99
 9083 0356 4C       		.byte	0x4c
 9084 0357 00       		.byte	0
 9085 0358 07       		.uleb128 0x7
 9086 0359 99000000 		.4byte	0x99
 9087 035d 68030000 		.4byte	0x368
 9088 0361 08       		.uleb128 0x8
 9089 0362 0E010000 		.4byte	0x10e
 9090 0366 01       		.byte	0x1
 9091 0367 00       		.byte	0
 9092 0368 07       		.uleb128 0x7
 9093 0369 99000000 		.4byte	0x99
 9094 036d 78030000 		.4byte	0x378
 9095 0371 08       		.uleb128 0x8
 9096 0372 0E010000 		.4byte	0x10e
 9097 0376 09       		.byte	0x9
 9098 0377 00       		.byte	0
 9099 0378 07       		.uleb128 0x7
 9100 0379 99000000 		.4byte	0x99
 9101 037d 88030000 		.4byte	0x388
 9102 0381 08       		.uleb128 0x8
 9103 0382 0E010000 		.4byte	0x10e
 9104 0386 03       		.byte	0x3
 9105 0387 00       		.byte	0
 9106 0388 10       		.uleb128 0x10
 9107 0389 CB010000 		.4byte	.LASF59
 9108 038d 10       		.byte	0x10
 9109 038e 07       		.byte	0x7
 9110 038f 1001     		.2byte	0x110
 9111 0391 17040000 		.4byte	0x417
 9112 0395 12       		.uleb128 0x12
 9113 0396 696400   		.ascii	"id\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 208


 9114 0399 07       		.byte	0x7
 9115 039a 1101     		.2byte	0x111
 9116 039c 81000000 		.4byte	0x81
 9117 03a0 00       		.byte	0
 9118 03a1 11       		.uleb128 0x11
 9119 03a2 750D0000 		.4byte	.LASF60
 9120 03a6 07       		.byte	0x7
 9121 03a7 1201     		.2byte	0x112
 9122 03a9 17040000 		.4byte	0x417
 9123 03ad 01       		.byte	0x1
 9124 03ae 11       		.uleb128 0x11
 9125 03af 9F0D0000 		.4byte	.LASF61
 9126 03b3 07       		.byte	0x7
 9127 03b4 1301     		.2byte	0x113
 9128 03b6 17040000 		.4byte	0x417
 9129 03ba 04       		.byte	0x4
 9130 03bb 11       		.uleb128 0x11
 9131 03bc 0B040000 		.4byte	.LASF62
 9132 03c0 07       		.byte	0x7
 9133 03c1 1401     		.2byte	0x114
 9134 03c3 81000000 		.4byte	0x81
 9135 03c7 07       		.byte	0x7
 9136 03c8 11       		.uleb128 0x11
 9137 03c9 5F020000 		.4byte	.LASF63
 9138 03cd 07       		.byte	0x7
 9139 03ce 1501     		.2byte	0x115
 9140 03d0 81000000 		.4byte	0x81
 9141 03d4 08       		.byte	0x8
 9142 03d5 11       		.uleb128 0x11
 9143 03d6 F1010000 		.4byte	.LASF64
 9144 03da 07       		.byte	0x7
 9145 03db 1601     		.2byte	0x116
 9146 03dd 81000000 		.4byte	0x81
 9147 03e1 09       		.byte	0x9
 9148 03e2 11       		.uleb128 0x11
 9149 03e3 7F0E0000 		.4byte	.LASF65
 9150 03e7 07       		.byte	0x7
 9151 03e8 1701     		.2byte	0x117
 9152 03ea 81000000 		.4byte	0x81
 9153 03ee 0A       		.byte	0xa
 9154 03ef 11       		.uleb128 0x11
 9155 03f0 400E0000 		.4byte	.LASF66
 9156 03f4 07       		.byte	0x7
 9157 03f5 1801     		.2byte	0x118
 9158 03f7 81000000 		.4byte	0x81
 9159 03fb 0B       		.byte	0xb
 9160 03fc 11       		.uleb128 0x11
 9161 03fd 530C0000 		.4byte	.LASF67
 9162 0401 07       		.byte	0x7
 9163 0402 1901     		.2byte	0x119
 9164 0404 81000000 		.4byte	0x81
 9165 0408 0C       		.byte	0xc
 9166 0409 11       		.uleb128 0x11
 9167 040a A3020000 		.4byte	.LASF68
 9168 040e 07       		.byte	0x7
 9169 040f 1A01     		.2byte	0x11a
 9170 0411 17040000 		.4byte	0x417
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 209


 9171 0415 0D       		.byte	0xd
 9172 0416 00       		.byte	0
 9173 0417 07       		.uleb128 0x7
 9174 0418 81000000 		.4byte	0x81
 9175 041c 27040000 		.4byte	0x427
 9176 0420 08       		.uleb128 0x8
 9177 0421 0E010000 		.4byte	0x10e
 9178 0425 02       		.byte	0x2
 9179 0426 00       		.byte	0
 9180 0427 10       		.uleb128 0x10
 9181 0428 52090000 		.4byte	.LASF69
 9182 042c 70       		.byte	0x70
 9183 042d 07       		.byte	0x7
 9184 042e 2101     		.2byte	0x121
 9185 0430 A1050000 		.4byte	0x5a1
 9186 0434 12       		.uleb128 0x12
 9187 0435 6B5F7000 		.ascii	"k_p\000"
 9188 0439 07       		.byte	0x7
 9189 043a 2201     		.2byte	0x122
 9190 043c BD000000 		.4byte	0xbd
 9191 0440 00       		.byte	0
 9192 0441 12       		.uleb128 0x12
 9193 0442 6B5F6900 		.ascii	"k_i\000"
 9194 0446 07       		.byte	0x7
 9195 0447 2301     		.2byte	0x123
 9196 0449 BD000000 		.4byte	0xbd
 9197 044d 04       		.byte	0x4
 9198 044e 12       		.uleb128 0x12
 9199 044f 6B5F6400 		.ascii	"k_d\000"
 9200 0453 07       		.byte	0x7
 9201 0454 2401     		.2byte	0x124
 9202 0456 BD000000 		.4byte	0xbd
 9203 045a 08       		.byte	0x8
 9204 045b 11       		.uleb128 0x11
 9205 045c 950B0000 		.4byte	.LASF70
 9206 0460 07       		.byte	0x7
 9207 0461 2501     		.2byte	0x125
 9208 0463 BD000000 		.4byte	0xbd
 9209 0467 0C       		.byte	0xc
 9210 0468 11       		.uleb128 0x11
 9211 0469 EB040000 		.4byte	.LASF71
 9212 046d 07       		.byte	0x7
 9213 046e 2601     		.2byte	0x126
 9214 0470 BD000000 		.4byte	0xbd
 9215 0474 10       		.byte	0x10
 9216 0475 11       		.uleb128 0x11
 9217 0476 DE040000 		.4byte	.LASF72
 9218 047a 07       		.byte	0x7
 9219 047b 2701     		.2byte	0x127
 9220 047d BD000000 		.4byte	0xbd
 9221 0481 14       		.byte	0x14
 9222 0482 11       		.uleb128 0x11
 9223 0483 000E0000 		.4byte	.LASF73
 9224 0487 07       		.byte	0x7
 9225 0488 2801     		.2byte	0x128
 9226 048a BD000000 		.4byte	0xbd
 9227 048e 18       		.byte	0x18
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 210


 9228 048f 11       		.uleb128 0x11
 9229 0490 87050000 		.4byte	.LASF74
 9230 0494 07       		.byte	0x7
 9231 0495 2901     		.2byte	0x129
 9232 0497 BD000000 		.4byte	0xbd
 9233 049b 1C       		.byte	0x1c
 9234 049c 11       		.uleb128 0x11
 9235 049d 4E0D0000 		.4byte	.LASF75
 9236 04a1 07       		.byte	0x7
 9237 04a2 2A01     		.2byte	0x12a
 9238 04a4 BD000000 		.4byte	0xbd
 9239 04a8 20       		.byte	0x20
 9240 04a9 11       		.uleb128 0x11
 9241 04aa 95050000 		.4byte	.LASF76
 9242 04ae 07       		.byte	0x7
 9243 04af 2B01     		.2byte	0x12b
 9244 04b1 BD000000 		.4byte	0xbd
 9245 04b5 24       		.byte	0x24
 9246 04b6 11       		.uleb128 0x11
 9247 04b7 B5060000 		.4byte	.LASF77
 9248 04bb 07       		.byte	0x7
 9249 04bc 2C01     		.2byte	0x12c
 9250 04be BD000000 		.4byte	0xbd
 9251 04c2 28       		.byte	0x28
 9252 04c3 11       		.uleb128 0x11
 9253 04c4 CE0F0000 		.4byte	.LASF78
 9254 04c8 07       		.byte	0x7
 9255 04c9 2D01     		.2byte	0x12d
 9256 04cb BD000000 		.4byte	0xbd
 9257 04cf 2C       		.byte	0x2c
 9258 04d0 11       		.uleb128 0x11
 9259 04d1 30070000 		.4byte	.LASF79
 9260 04d5 07       		.byte	0x7
 9261 04d6 2E01     		.2byte	0x12e
 9262 04d8 81000000 		.4byte	0x81
 9263 04dc 30       		.byte	0x30
 9264 04dd 11       		.uleb128 0x11
 9265 04de E90D0000 		.4byte	.LASF80
 9266 04e2 07       		.byte	0x7
 9267 04e3 2F01     		.2byte	0x12f
 9268 04e5 81000000 		.4byte	0x81
 9269 04e9 31       		.byte	0x31
 9270 04ea 11       		.uleb128 0x11
 9271 04eb A70B0000 		.4byte	.LASF81
 9272 04ef 07       		.byte	0x7
 9273 04f0 3001     		.2byte	0x130
 9274 04f2 81000000 		.4byte	0x81
 9275 04f6 32       		.byte	0x32
 9276 04f7 11       		.uleb128 0x11
 9277 04f8 210F0000 		.4byte	.LASF82
 9278 04fc 07       		.byte	0x7
 9279 04fd 3101     		.2byte	0x131
 9280 04ff 81000000 		.4byte	0x81
 9281 0503 33       		.byte	0x33
 9282 0504 11       		.uleb128 0x11
 9283 0505 91000000 		.4byte	.LASF83
 9284 0509 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 211


 9285 050a 3201     		.2byte	0x132
 9286 050c BD000000 		.4byte	0xbd
 9287 0510 34       		.byte	0x34
 9288 0511 11       		.uleb128 0x11
 9289 0512 1B050000 		.4byte	.LASF84
 9290 0516 07       		.byte	0x7
 9291 0517 3301     		.2byte	0x133
 9292 0519 BD000000 		.4byte	0xbd
 9293 051d 38       		.byte	0x38
 9294 051e 11       		.uleb128 0x11
 9295 051f 0E090000 		.4byte	.LASF85
 9296 0523 07       		.byte	0x7
 9297 0524 3401     		.2byte	0x134
 9298 0526 BD000000 		.4byte	0xbd
 9299 052a 3C       		.byte	0x3c
 9300 052b 11       		.uleb128 0x11
 9301 052c 98040000 		.4byte	.LASF86
 9302 0530 07       		.byte	0x7
 9303 0531 3501     		.2byte	0x135
 9304 0533 BD000000 		.4byte	0xbd
 9305 0537 40       		.byte	0x40
 9306 0538 11       		.uleb128 0x11
 9307 0539 F0000000 		.4byte	.LASF87
 9308 053d 07       		.byte	0x7
 9309 053e 3601     		.2byte	0x136
 9310 0540 A1050000 		.4byte	0x5a1
 9311 0544 44       		.byte	0x44
 9312 0545 11       		.uleb128 0x11
 9313 0546 7A0F0000 		.4byte	.LASF88
 9314 054a 07       		.byte	0x7
 9315 054b 3701     		.2byte	0x137
 9316 054d B1000000 		.4byte	0xb1
 9317 0551 5C       		.byte	0x5c
 9318 0552 11       		.uleb128 0x11
 9319 0553 92070000 		.4byte	.LASF89
 9320 0557 07       		.byte	0x7
 9321 0558 3801     		.2byte	0x138
 9322 055a 81000000 		.4byte	0x81
 9323 055e 5E       		.byte	0x5e
 9324 055f 11       		.uleb128 0x11
 9325 0560 94090000 		.4byte	.LASF90
 9326 0564 07       		.byte	0x7
 9327 0565 3901     		.2byte	0x139
 9328 0567 81000000 		.4byte	0x81
 9329 056b 5F       		.byte	0x5f
 9330 056c 11       		.uleb128 0x11
 9331 056d 16040000 		.4byte	.LASF91
 9332 0571 07       		.byte	0x7
 9333 0572 3A01     		.2byte	0x13a
 9334 0574 81000000 		.4byte	0x81
 9335 0578 60       		.byte	0x60
 9336 0579 11       		.uleb128 0x11
 9337 057a CD040000 		.4byte	.LASF92
 9338 057e 07       		.byte	0x7
 9339 057f 3B01     		.2byte	0x13b
 9340 0581 81000000 		.4byte	0x81
 9341 0585 61       		.byte	0x61
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 212


 9342 0586 11       		.uleb128 0x11
 9343 0587 BF030000 		.4byte	.LASF93
 9344 058b 07       		.byte	0x7
 9345 058c 3C01     		.2byte	0x13c
 9346 058e 81000000 		.4byte	0x81
 9347 0592 62       		.byte	0x62
 9348 0593 11       		.uleb128 0x11
 9349 0594 A3020000 		.4byte	.LASF68
 9350 0598 07       		.byte	0x7
 9351 0599 3D01     		.2byte	0x13d
 9352 059b B1050000 		.4byte	0x5b1
 9353 059f 63       		.byte	0x63
 9354 05a0 00       		.byte	0
 9355 05a1 07       		.uleb128 0x7
 9356 05a2 D5000000 		.4byte	0xd5
 9357 05a6 B1050000 		.4byte	0x5b1
 9358 05aa 08       		.uleb128 0x8
 9359 05ab 0E010000 		.4byte	0x10e
 9360 05af 05       		.byte	0x5
 9361 05b0 00       		.byte	0
 9362 05b1 07       		.uleb128 0x7
 9363 05b2 81000000 		.4byte	0x81
 9364 05b6 C1050000 		.4byte	0x5c1
 9365 05ba 08       		.uleb128 0x8
 9366 05bb 0E010000 		.4byte	0x10e
 9367 05bf 0C       		.byte	0xc
 9368 05c0 00       		.byte	0
 9369 05c1 10       		.uleb128 0x10
 9370 05c2 AB0E0000 		.4byte	.LASF94
 9371 05c6 30       		.byte	0x30
 9372 05c7 07       		.byte	0x7
 9373 05c8 4401     		.2byte	0x144
 9374 05ca 44060000 		.4byte	0x644
 9375 05ce 11       		.uleb128 0x11
 9376 05cf F0080000 		.4byte	.LASF95
 9377 05d3 07       		.byte	0x7
 9378 05d4 4501     		.2byte	0x145
 9379 05d6 44060000 		.4byte	0x644
 9380 05da 00       		.byte	0
 9381 05db 12       		.uleb128 0x12
 9382 05dc 72657300 		.ascii	"res\000"
 9383 05e0 07       		.byte	0x7
 9384 05e1 4601     		.2byte	0x146
 9385 05e3 17040000 		.4byte	0x417
 9386 05e7 05       		.byte	0x5
 9387 05e8 11       		.uleb128 0x11
 9388 05e9 52070000 		.4byte	.LASF96
 9389 05ed 07       		.byte	0x7
 9390 05ee 4701     		.2byte	0x147
 9391 05f0 3D020000 		.4byte	0x23d
 9392 05f4 08       		.byte	0x8
 9393 05f5 11       		.uleb128 0x11
 9394 05f6 E4040000 		.4byte	.LASF97
 9395 05fa 07       		.byte	0x7
 9396 05fb 4801     		.2byte	0x148
 9397 05fd 54060000 		.4byte	0x654
 9398 0601 14       		.byte	0x14
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 213


 9399 0602 11       		.uleb128 0x11
 9400 0603 C60A0000 		.4byte	.LASF98
 9401 0607 07       		.byte	0x7
 9402 0608 4901     		.2byte	0x149
 9403 060a 81000000 		.4byte	0x81
 9404 060e 20       		.byte	0x20
 9405 060f 11       		.uleb128 0x11
 9406 0610 AE010000 		.4byte	.LASF99
 9407 0614 07       		.byte	0x7
 9408 0615 4A01     		.2byte	0x14a
 9409 0617 17040000 		.4byte	0x417
 9410 061b 21       		.byte	0x21
 9411 061c 11       		.uleb128 0x11
 9412 061d 770A0000 		.4byte	.LASF100
 9413 0621 07       		.byte	0x7
 9414 0622 4B01     		.2byte	0x14b
 9415 0624 A5000000 		.4byte	0xa5
 9416 0628 24       		.byte	0x24
 9417 0629 11       		.uleb128 0x11
 9418 062a 750C0000 		.4byte	.LASF101
 9419 062e 07       		.byte	0x7
 9420 062f 4C01     		.2byte	0x14c
 9421 0631 4D020000 		.4byte	0x24d
 9422 0635 25       		.byte	0x25
 9423 0636 11       		.uleb128 0x11
 9424 0637 A3020000 		.4byte	.LASF68
 9425 063b 07       		.byte	0x7
 9426 063c 4D01     		.2byte	0x14d
 9427 063e 64060000 		.4byte	0x664
 9428 0642 28       		.byte	0x28
 9429 0643 00       		.byte	0
 9430 0644 07       		.uleb128 0x7
 9431 0645 81000000 		.4byte	0x81
 9432 0649 54060000 		.4byte	0x654
 9433 064d 08       		.uleb128 0x8
 9434 064e 0E010000 		.4byte	0x10e
 9435 0652 04       		.byte	0x4
 9436 0653 00       		.byte	0
 9437 0654 07       		.uleb128 0x7
 9438 0655 C9000000 		.4byte	0xc9
 9439 0659 64060000 		.4byte	0x664
 9440 065d 08       		.uleb128 0x8
 9441 065e 0E010000 		.4byte	0x10e
 9442 0662 02       		.byte	0x2
 9443 0663 00       		.byte	0
 9444 0664 07       		.uleb128 0x7
 9445 0665 81000000 		.4byte	0x81
 9446 0669 74060000 		.4byte	0x674
 9447 066d 08       		.uleb128 0x8
 9448 066e 0E010000 		.4byte	0x10e
 9449 0672 07       		.byte	0x7
 9450 0673 00       		.byte	0
 9451 0674 10       		.uleb128 0x10
 9452 0675 73010000 		.4byte	.LASF102
 9453 0679 10       		.byte	0x10
 9454 067a 07       		.byte	0x7
 9455 067b 5401     		.2byte	0x154
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 214


 9456 067d D0060000 		.4byte	0x6d0
 9457 0681 11       		.uleb128 0x11
 9458 0682 F4090000 		.4byte	.LASF103
 9459 0686 07       		.byte	0x7
 9460 0687 5501     		.2byte	0x155
 9461 0689 D0060000 		.4byte	0x6d0
 9462 068d 00       		.byte	0
 9463 068e 11       		.uleb128 0x11
 9464 068f 6C0F0000 		.4byte	.LASF104
 9465 0693 07       		.byte	0x7
 9466 0694 5601     		.2byte	0x156
 9467 0696 58030000 		.4byte	0x358
 9468 069a 04       		.byte	0x4
 9469 069b 11       		.uleb128 0x11
 9470 069c 31050000 		.4byte	.LASF105
 9471 06a0 07       		.byte	0x7
 9472 06a1 5701     		.2byte	0x157
 9473 06a3 81000000 		.4byte	0x81
 9474 06a7 0C       		.byte	0xc
 9475 06a8 11       		.uleb128 0x11
 9476 06a9 8F0C0000 		.4byte	.LASF106
 9477 06ad 07       		.byte	0x7
 9478 06ae 5801     		.2byte	0x158
 9479 06b0 81000000 		.4byte	0x81
 9480 06b4 0D       		.byte	0xd
 9481 06b5 11       		.uleb128 0x11
 9482 06b6 6E030000 		.4byte	.LASF107
 9483 06ba 07       		.byte	0x7
 9484 06bb 5901     		.2byte	0x159
 9485 06bd 81000000 		.4byte	0x81
 9486 06c1 0E       		.byte	0xe
 9487 06c2 11       		.uleb128 0x11
 9488 06c3 A3020000 		.4byte	.LASF68
 9489 06c7 07       		.byte	0x7
 9490 06c8 5A01     		.2byte	0x15a
 9491 06ca E0060000 		.4byte	0x6e0
 9492 06ce 0F       		.byte	0xf
 9493 06cf 00       		.byte	0
 9494 06d0 07       		.uleb128 0x7
 9495 06d1 8D000000 		.4byte	0x8d
 9496 06d5 E0060000 		.4byte	0x6e0
 9497 06d9 08       		.uleb128 0x8
 9498 06da 0E010000 		.4byte	0x10e
 9499 06de 01       		.byte	0x1
 9500 06df 00       		.byte	0
 9501 06e0 07       		.uleb128 0x7
 9502 06e1 81000000 		.4byte	0x81
 9503 06e5 F0060000 		.4byte	0x6f0
 9504 06e9 08       		.uleb128 0x8
 9505 06ea 0E010000 		.4byte	0x10e
 9506 06ee 00       		.byte	0
 9507 06ef 00       		.byte	0
 9508 06f0 10       		.uleb128 0x10
 9509 06f1 BE090000 		.4byte	.LASF108
 9510 06f5 20       		.byte	0x20
 9511 06f6 07       		.byte	0x7
 9512 06f7 6101     		.2byte	0x161
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 215


 9513 06f9 32070000 		.4byte	0x732
 9514 06fd 11       		.uleb128 0x11
 9515 06fe 11020000 		.4byte	.LASF109
 9516 0702 07       		.byte	0x7
 9517 0703 6201     		.2byte	0x162
 9518 0705 81000000 		.4byte	0x81
 9519 0709 00       		.byte	0
 9520 070a 11       		.uleb128 0x11
 9521 070b 890E0000 		.4byte	.LASF110
 9522 070f 07       		.byte	0x7
 9523 0710 6301     		.2byte	0x163
 9524 0712 81000000 		.4byte	0x81
 9525 0716 01       		.byte	0x1
 9526 0717 11       		.uleb128 0x11
 9527 0718 43090000 		.4byte	.LASF111
 9528 071c 07       		.byte	0x7
 9529 071d 6401     		.2byte	0x164
 9530 071f 32070000 		.4byte	0x732
 9531 0723 02       		.byte	0x2
 9532 0724 11       		.uleb128 0x11
 9533 0725 A3020000 		.4byte	.LASF68
 9534 0729 07       		.byte	0x7
 9535 072a 6501     		.2byte	0x165
 9536 072c 44060000 		.4byte	0x644
 9537 0730 1B       		.byte	0x1b
 9538 0731 00       		.byte	0
 9539 0732 07       		.uleb128 0x7
 9540 0733 81000000 		.4byte	0x81
 9541 0737 48070000 		.4byte	0x748
 9542 073b 08       		.uleb128 0x8
 9543 073c 0E010000 		.4byte	0x10e
 9544 0740 04       		.byte	0x4
 9545 0741 08       		.uleb128 0x8
 9546 0742 0E010000 		.4byte	0x10e
 9547 0746 04       		.byte	0x4
 9548 0747 00       		.byte	0
 9549 0748 10       		.uleb128 0x10
 9550 0749 820C0000 		.4byte	.LASF112
 9551 074d 20       		.byte	0x20
 9552 074e 07       		.byte	0x7
 9553 074f 6C01     		.2byte	0x16c
 9554 0751 97070000 		.4byte	0x797
 9555 0755 11       		.uleb128 0x11
 9556 0756 BC0A0000 		.4byte	.LASF113
 9557 075a 07       		.byte	0x7
 9558 075b 6D01     		.2byte	0x16d
 9559 075d 97070000 		.4byte	0x797
 9560 0761 00       		.byte	0
 9561 0762 11       		.uleb128 0x11
 9562 0763 D60D0000 		.4byte	.LASF114
 9563 0767 07       		.byte	0x7
 9564 0768 6E01     		.2byte	0x16e
 9565 076a 81000000 		.4byte	0x81
 9566 076e 06       		.byte	0x6
 9567 076f 11       		.uleb128 0x11
 9568 0770 32000000 		.4byte	.LASF115
 9569 0774 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 216


 9570 0775 6F01     		.2byte	0x16f
 9571 0777 81000000 		.4byte	0x81
 9572 077b 07       		.byte	0x7
 9573 077c 11       		.uleb128 0x11
 9574 077d 70050000 		.4byte	.LASF116
 9575 0781 07       		.byte	0x7
 9576 0782 7001     		.2byte	0x170
 9577 0784 A7070000 		.4byte	0x7a7
 9578 0788 08       		.byte	0x8
 9579 0789 11       		.uleb128 0x11
 9580 078a A3020000 		.4byte	.LASF68
 9581 078e 07       		.byte	0x7
 9582 078f 7101     		.2byte	0x171
 9583 0791 A7070000 		.4byte	0x7a7
 9584 0795 14       		.byte	0x14
 9585 0796 00       		.byte	0
 9586 0797 07       		.uleb128 0x7
 9587 0798 81000000 		.4byte	0x81
 9588 079c A7070000 		.4byte	0x7a7
 9589 07a0 08       		.uleb128 0x8
 9590 07a1 0E010000 		.4byte	0x10e
 9591 07a5 05       		.byte	0x5
 9592 07a6 00       		.byte	0
 9593 07a7 07       		.uleb128 0x7
 9594 07a8 81000000 		.4byte	0x81
 9595 07ac B7070000 		.4byte	0x7b7
 9596 07b0 08       		.uleb128 0x8
 9597 07b1 0E010000 		.4byte	0x10e
 9598 07b5 0B       		.byte	0xb
 9599 07b6 00       		.byte	0
 9600 07b7 10       		.uleb128 0x10
 9601 07b8 6D0C0000 		.4byte	.LASF117
 9602 07bc 20       		.byte	0x20
 9603 07bd 07       		.byte	0x7
 9604 07be 7801     		.2byte	0x178
 9605 07c0 EC070000 		.4byte	0x7ec
 9606 07c4 11       		.uleb128 0x11
 9607 07c5 40030000 		.4byte	.LASF118
 9608 07c9 07       		.byte	0x7
 9609 07ca 7901     		.2byte	0x179
 9610 07cc 15010000 		.4byte	0x115
 9611 07d0 00       		.byte	0
 9612 07d1 11       		.uleb128 0x11
 9613 07d2 7C020000 		.4byte	.LASF119
 9614 07d6 07       		.byte	0x7
 9615 07d7 7A01     		.2byte	0x17a
 9616 07d9 74060000 		.4byte	0x674
 9617 07dd 08       		.byte	0x8
 9618 07de 11       		.uleb128 0x11
 9619 07df A3020000 		.4byte	.LASF68
 9620 07e3 07       		.byte	0x7
 9621 07e4 7B01     		.2byte	0x17b
 9622 07e6 64060000 		.4byte	0x664
 9623 07ea 18       		.byte	0x18
 9624 07eb 00       		.byte	0
 9625 07ec 10       		.uleb128 0x10
 9626 07ed 61080000 		.4byte	.LASF120
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 217


 9627 07f1 10       		.byte	0x10
 9628 07f2 07       		.byte	0x7
 9629 07f3 8201     		.2byte	0x182
 9630 07f5 3B080000 		.4byte	0x83b
 9631 07f9 11       		.uleb128 0x11
 9632 07fa 79070000 		.4byte	.LASF121
 9633 07fe 07       		.byte	0x7
 9634 07ff 8301     		.2byte	0x183
 9635 0801 BD000000 		.4byte	0xbd
 9636 0805 00       		.byte	0
 9637 0806 11       		.uleb128 0x11
 9638 0807 B00F0000 		.4byte	.LASF122
 9639 080b 07       		.byte	0x7
 9640 080c 8401     		.2byte	0x184
 9641 080e BD000000 		.4byte	0xbd
 9642 0812 04       		.byte	0x4
 9643 0813 11       		.uleb128 0x11
 9644 0814 3B050000 		.4byte	.LASF123
 9645 0818 07       		.byte	0x7
 9646 0819 8501     		.2byte	0x185
 9647 081b BD000000 		.4byte	0xbd
 9648 081f 08       		.byte	0x8
 9649 0820 11       		.uleb128 0x11
 9650 0821 9C060000 		.4byte	.LASF124
 9651 0825 07       		.byte	0x7
 9652 0826 8601     		.2byte	0x186
 9653 0828 81000000 		.4byte	0x81
 9654 082c 0C       		.byte	0xc
 9655 082d 11       		.uleb128 0x11
 9656 082e A3020000 		.4byte	.LASF68
 9657 0832 07       		.byte	0x7
 9658 0833 8701     		.2byte	0x187
 9659 0835 17040000 		.4byte	0x417
 9660 0839 0D       		.byte	0xd
 9661 083a 00       		.byte	0
 9662 083b 10       		.uleb128 0x10
 9663 083c 13010000 		.4byte	.LASF125
 9664 0840 10       		.byte	0x10
 9665 0841 07       		.byte	0x7
 9666 0842 8E01     		.2byte	0x18e
 9667 0844 70080000 		.4byte	0x870
 9668 0848 11       		.uleb128 0x11
 9669 0849 180C0000 		.4byte	.LASF126
 9670 084d 07       		.byte	0x7
 9671 084e 8F01     		.2byte	0x18f
 9672 0850 81000000 		.4byte	0x81
 9673 0854 00       		.byte	0
 9674 0855 11       		.uleb128 0x11
 9675 0856 2F090000 		.4byte	.LASF127
 9676 085a 07       		.byte	0x7
 9677 085b 9001     		.2byte	0x190
 9678 085d 81000000 		.4byte	0x81
 9679 0861 01       		.byte	0x1
 9680 0862 11       		.uleb128 0x11
 9681 0863 A3020000 		.4byte	.LASF68
 9682 0867 07       		.byte	0x7
 9683 0868 9101     		.2byte	0x191
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 218


 9684 086a 70080000 		.4byte	0x870
 9685 086e 02       		.byte	0x2
 9686 086f 00       		.byte	0
 9687 0870 07       		.uleb128 0x7
 9688 0871 81000000 		.4byte	0x81
 9689 0875 80080000 		.4byte	0x880
 9690 0879 08       		.uleb128 0x8
 9691 087a 0E010000 		.4byte	0x10e
 9692 087e 0D       		.byte	0xd
 9693 087f 00       		.byte	0
 9694 0880 10       		.uleb128 0x10
 9695 0881 7A080000 		.4byte	.LASF128
 9696 0885 10       		.byte	0x10
 9697 0886 07       		.byte	0x7
 9698 0887 9801     		.2byte	0x198
 9699 0889 C2080000 		.4byte	0x8c2
 9700 088d 11       		.uleb128 0x11
 9701 088e B60E0000 		.4byte	.LASF129
 9702 0892 07       		.byte	0x7
 9703 0893 9901     		.2byte	0x199
 9704 0895 BD000000 		.4byte	0xbd
 9705 0899 00       		.byte	0
 9706 089a 11       		.uleb128 0x11
 9707 089b 87060000 		.4byte	.LASF130
 9708 089f 07       		.byte	0x7
 9709 08a0 9A01     		.2byte	0x19a
 9710 08a2 D5000000 		.4byte	0xd5
 9711 08a6 04       		.byte	0x4
 9712 08a7 11       		.uleb128 0x11
 9713 08a8 D90B0000 		.4byte	.LASF131
 9714 08ac 07       		.byte	0x7
 9715 08ad 9B01     		.2byte	0x19b
 9716 08af D5000000 		.4byte	0xd5
 9717 08b3 08       		.byte	0x8
 9718 08b4 11       		.uleb128 0x11
 9719 08b5 A3020000 		.4byte	.LASF68
 9720 08b9 07       		.byte	0x7
 9721 08ba 9C01     		.2byte	0x19c
 9722 08bc C2080000 		.4byte	0x8c2
 9723 08c0 0C       		.byte	0xc
 9724 08c1 00       		.byte	0
 9725 08c2 07       		.uleb128 0x7
 9726 08c3 81000000 		.4byte	0x81
 9727 08c7 D2080000 		.4byte	0x8d2
 9728 08cb 08       		.uleb128 0x8
 9729 08cc 0E010000 		.4byte	0x10e
 9730 08d0 03       		.byte	0x3
 9731 08d1 00       		.byte	0
 9732 08d2 13       		.uleb128 0x13
 9733 08d3 D10E0000 		.4byte	.LASF132
 9734 08d7 D002     		.2byte	0x2d0
 9735 08d9 07       		.byte	0x7
 9736 08da A501     		.2byte	0x1a5
 9737 08dc 9C090000 		.4byte	0x99c
 9738 08e0 11       		.uleb128 0x11
 9739 08e1 8F090000 		.4byte	.LASF133
 9740 08e5 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 219


 9741 08e6 A701     		.2byte	0x1a7
 9742 08e8 81000000 		.4byte	0x81
 9743 08ec 00       		.byte	0
 9744 08ed 11       		.uleb128 0x11
 9745 08ee A3020000 		.4byte	.LASF68
 9746 08f2 07       		.byte	0x7
 9747 08f3 A801     		.2byte	0x1a8
 9748 08f5 9C090000 		.4byte	0x99c
 9749 08f9 01       		.byte	0x1
 9750 08fa 12       		.uleb128 0x12
 9751 08fb 636E7400 		.ascii	"cnt\000"
 9752 08ff 07       		.byte	0x7
 9753 0900 A901     		.2byte	0x1a9
 9754 0902 EF020000 		.4byte	0x2ef
 9755 0906 10       		.byte	0x10
 9756 0907 11       		.uleb128 0x11
 9757 0908 48020000 		.4byte	.LASF134
 9758 090c 07       		.byte	0x7
 9759 090d AA01     		.2byte	0x1aa
 9760 090f AC090000 		.4byte	0x9ac
 9761 0913 60       		.byte	0x60
 9762 0914 12       		.uleb128 0x12
 9763 0915 64657600 		.ascii	"dev\000"
 9764 0919 07       		.byte	0x7
 9765 091a AB01     		.2byte	0x1ab
 9766 091c 88030000 		.4byte	0x388
 9767 0920 A0       		.byte	0xa0
 9768 0921 11       		.uleb128 0x11
 9769 0922 630D0000 		.4byte	.LASF135
 9770 0926 07       		.byte	0x7
 9771 0927 AC01     		.2byte	0x1ac
 9772 0929 BC090000 		.4byte	0x9bc
 9773 092d B0       		.byte	0xb0
 9774 092e 14       		.uleb128 0x14
 9775 092f 656E6300 		.ascii	"enc\000"
 9776 0933 07       		.byte	0x7
 9777 0934 AD01     		.2byte	0x1ad
 9778 0936 CC090000 		.4byte	0x9cc
 9779 093a 9001     		.2byte	0x190
 9780 093c 14       		.uleb128 0x14
 9781 093d 656D6700 		.ascii	"emg\000"
 9782 0941 07       		.byte	0x7
 9783 0942 AE01     		.2byte	0x1ae
 9784 0944 74060000 		.4byte	0x674
 9785 0948 F001     		.2byte	0x1f0
 9786 094a 14       		.uleb128 0x14
 9787 094b 696D7500 		.ascii	"imu\000"
 9788 094f 07       		.byte	0x7
 9789 0950 AF01     		.2byte	0x1af
 9790 0952 F0060000 		.4byte	0x6f0
 9791 0956 0002     		.2byte	0x200
 9792 0958 14       		.uleb128 0x14
 9793 0959 65787000 		.ascii	"exp\000"
 9794 095d 07       		.byte	0x7
 9795 095e B001     		.2byte	0x1b0
 9796 0960 48070000 		.4byte	0x748
 9797 0964 2002     		.2byte	0x220
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 220


 9798 0966 15       		.uleb128 0x15
 9799 0967 4D000000 		.4byte	.LASF136
 9800 096b 07       		.byte	0x7
 9801 096c B101     		.2byte	0x1b1
 9802 096e DC090000 		.4byte	0x9dc
 9803 0972 4002     		.2byte	0x240
 9804 0974 14       		.uleb128 0x14
 9805 0975 534800   		.ascii	"SH\000"
 9806 0978 07       		.byte	0x7
 9807 0979 B301     		.2byte	0x1b3
 9808 097b EC070000 		.4byte	0x7ec
 9809 097f A002     		.2byte	0x2a0
 9810 0981 14       		.uleb128 0x14
 9811 0982 4D5300   		.ascii	"MS\000"
 9812 0985 07       		.byte	0x7
 9813 0986 B401     		.2byte	0x1b4
 9814 0988 3B080000 		.4byte	0x83b
 9815 098c B002     		.2byte	0x2b0
 9816 098e 14       		.uleb128 0x14
 9817 098f 464200   		.ascii	"FB\000"
 9818 0992 07       		.byte	0x7
 9819 0993 B501     		.2byte	0x1b5
 9820 0995 80080000 		.4byte	0x880
 9821 0999 C002     		.2byte	0x2c0
 9822 099b 00       		.byte	0
 9823 099c 07       		.uleb128 0x7
 9824 099d 81000000 		.4byte	0x81
 9825 09a1 AC090000 		.4byte	0x9ac
 9826 09a5 08       		.uleb128 0x8
 9827 09a6 0E010000 		.4byte	0x10e
 9828 09aa 0E       		.byte	0xe
 9829 09ab 00       		.byte	0
 9830 09ac 07       		.uleb128 0x7
 9831 09ad 81000000 		.4byte	0x81
 9832 09b1 BC090000 		.4byte	0x9bc
 9833 09b5 08       		.uleb128 0x8
 9834 09b6 0E010000 		.4byte	0x10e
 9835 09ba 3F       		.byte	0x3f
 9836 09bb 00       		.byte	0
 9837 09bc 07       		.uleb128 0x7
 9838 09bd 27040000 		.4byte	0x427
 9839 09c1 CC090000 		.4byte	0x9cc
 9840 09c5 08       		.uleb128 0x8
 9841 09c6 0E010000 		.4byte	0x10e
 9842 09ca 01       		.byte	0x1
 9843 09cb 00       		.byte	0
 9844 09cc 07       		.uleb128 0x7
 9845 09cd C1050000 		.4byte	0x5c1
 9846 09d1 DC090000 		.4byte	0x9dc
 9847 09d5 08       		.uleb128 0x8
 9848 09d6 0E010000 		.4byte	0x10e
 9849 09da 01       		.byte	0x1
 9850 09db 00       		.byte	0
 9851 09dc 07       		.uleb128 0x7
 9852 09dd B7070000 		.4byte	0x7b7
 9853 09e1 EC090000 		.4byte	0x9ec
 9854 09e5 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 221


 9855 09e6 0E010000 		.4byte	0x10e
 9856 09ea 02       		.byte	0x2
 9857 09eb 00       		.byte	0
 9858 09ec 10       		.uleb128 0x10
 9859 09ed 430B0000 		.4byte	.LASF137
 9860 09f1 28       		.byte	0x28
 9861 09f2 07       		.byte	0x7
 9862 09f3 C101     		.2byte	0x1c1
 9863 09f5 480A0000 		.4byte	0xa48
 9864 09f9 11       		.uleb128 0x11
 9865 09fa 80040000 		.4byte	.LASF138
 9866 09fe 07       		.byte	0x7
 9867 09ff C201     		.2byte	0x1c2
 9868 0a01 81000000 		.4byte	0x81
 9869 0a05 00       		.byte	0
 9870 0a06 11       		.uleb128 0x11
 9871 0a07 B0020000 		.4byte	.LASF139
 9872 0a0b 07       		.byte	0x7
 9873 0a0c C301     		.2byte	0x1c3
 9874 0a0e 480A0000 		.4byte	0xa48
 9875 0a12 02       		.byte	0x2
 9876 0a13 11       		.uleb128 0x11
 9877 0a14 B10A0000 		.4byte	.LASF140
 9878 0a18 07       		.byte	0x7
 9879 0a19 C401     		.2byte	0x1c4
 9880 0a1b 480A0000 		.4byte	0xa48
 9881 0a1f 08       		.byte	0x8
 9882 0a20 11       		.uleb128 0x11
 9883 0a21 4F0B0000 		.4byte	.LASF141
 9884 0a25 07       		.byte	0x7
 9885 0a26 C501     		.2byte	0x1c5
 9886 0a28 480A0000 		.4byte	0xa48
 9887 0a2c 0E       		.byte	0xe
 9888 0a2d 11       		.uleb128 0x11
 9889 0a2e 6E070000 		.4byte	.LASF142
 9890 0a32 07       		.byte	0x7
 9891 0a33 C601     		.2byte	0x1c6
 9892 0a35 580A0000 		.4byte	0xa58
 9893 0a39 14       		.byte	0x14
 9894 0a3a 11       		.uleb128 0x11
 9895 0a3b 95010000 		.4byte	.LASF143
 9896 0a3f 07       		.byte	0x7
 9897 0a40 C701     		.2byte	0x1c7
 9898 0a42 B1000000 		.4byte	0xb1
 9899 0a46 24       		.byte	0x24
 9900 0a47 00       		.byte	0
 9901 0a48 07       		.uleb128 0x7
 9902 0a49 B1000000 		.4byte	0xb1
 9903 0a4d 580A0000 		.4byte	0xa58
 9904 0a51 08       		.uleb128 0x8
 9905 0a52 0E010000 		.4byte	0x10e
 9906 0a56 02       		.byte	0x2
 9907 0a57 00       		.byte	0
 9908 0a58 07       		.uleb128 0x7
 9909 0a59 D5000000 		.4byte	0xd5
 9910 0a5d 680A0000 		.4byte	0xa68
 9911 0a61 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 222


 9912 0a62 0E010000 		.4byte	0x10e
 9913 0a66 03       		.byte	0x3
 9914 0a67 00       		.byte	0
 9915 0a68 10       		.uleb128 0x10
 9916 0a69 BB0F0000 		.4byte	.LASF144
 9917 0a6d 08       		.byte	0x8
 9918 0a6e 07       		.byte	0x7
 9919 0a6f CE01     		.2byte	0x1ce
 9920 0a71 900A0000 		.4byte	0xa90
 9921 0a75 11       		.uleb128 0x11
 9922 0a76 27050000 		.4byte	.LASF145
 9923 0a7a 07       		.byte	0x7
 9924 0a7b CF01     		.2byte	0x1cf
 9925 0a7d BD000000 		.4byte	0xbd
 9926 0a81 00       		.byte	0
 9927 0a82 11       		.uleb128 0x11
 9928 0a83 C6010000 		.4byte	.LASF146
 9929 0a87 07       		.byte	0x7
 9930 0a88 D001     		.2byte	0x1d0
 9931 0a8a BD000000 		.4byte	0xbd
 9932 0a8e 04       		.byte	0x4
 9933 0a8f 00       		.byte	0
 9934 0a90 10       		.uleb128 0x10
 9935 0a91 51030000 		.4byte	.LASF147
 9936 0a95 06       		.byte	0x6
 9937 0a96 07       		.byte	0x7
 9938 0a97 D701     		.2byte	0x1d7
 9939 0a99 D20A0000 		.4byte	0xad2
 9940 0a9d 11       		.uleb128 0x11
 9941 0a9e E1060000 		.4byte	.LASF148
 9942 0aa2 07       		.byte	0x7
 9943 0aa3 D801     		.2byte	0x1d8
 9944 0aa5 81000000 		.4byte	0x81
 9945 0aa9 00       		.byte	0
 9946 0aaa 11       		.uleb128 0x11
 9947 0aab D70F0000 		.4byte	.LASF149
 9948 0aaf 07       		.byte	0x7
 9949 0ab0 D901     		.2byte	0x1d9
 9950 0ab2 81000000 		.4byte	0x81
 9951 0ab6 01       		.byte	0x1
 9952 0ab7 11       		.uleb128 0x11
 9953 0ab8 B4050000 		.4byte	.LASF150
 9954 0abc 07       		.byte	0x7
 9955 0abd DA01     		.2byte	0x1da
 9956 0abf B1000000 		.4byte	0xb1
 9957 0ac3 02       		.byte	0x2
 9958 0ac4 11       		.uleb128 0x11
 9959 0ac5 02090000 		.4byte	.LASF151
 9960 0ac9 07       		.byte	0x7
 9961 0aca DB01     		.2byte	0x1db
 9962 0acc B1000000 		.4byte	0xb1
 9963 0ad0 04       		.byte	0x4
 9964 0ad1 00       		.byte	0
 9965 0ad2 16       		.uleb128 0x16
 9966 0ad3 01       		.byte	0x1
 9967 0ad4 2C000000 		.4byte	0x2c
 9968 0ad8 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 223


 9969 0ad9 DF01     		.2byte	0x1df
 9970 0adb 040B0000 		.4byte	0xb04
 9971 0adf 0A       		.uleb128 0xa
 9972 0ae0 44050000 		.4byte	.LASF152
 9973 0ae4 00       		.byte	0
 9974 0ae5 0A       		.uleb128 0xa
 9975 0ae6 120C0000 		.4byte	.LASF153
 9976 0aea 01       		.byte	0x1
 9977 0aeb 0A       		.uleb128 0xa
 9978 0aec 3E0A0000 		.4byte	.LASF154
 9979 0af0 02       		.byte	0x2
 9980 0af1 0A       		.uleb128 0xa
 9981 0af2 04020000 		.4byte	.LASF155
 9982 0af6 03       		.byte	0x3
 9983 0af7 0A       		.uleb128 0xa
 9984 0af8 38090000 		.4byte	.LASF156
 9985 0afc 04       		.byte	0x4
 9986 0afd 0A       		.uleb128 0xa
 9987 0afe B90B0000 		.4byte	.LASF157
 9988 0b02 05       		.byte	0x5
 9989 0b03 00       		.byte	0
 9990 0b04 05       		.uleb128 0x5
 9991 0b05 5F010000 		.4byte	.LASF158
 9992 0b09 07       		.byte	0x7
 9993 0b0a E701     		.2byte	0x1e7
 9994 0b0c D20A0000 		.4byte	0xad2
 9995 0b10 16       		.uleb128 0x16
 9996 0b11 01       		.byte	0x1
 9997 0b12 2C000000 		.4byte	0x2c
 9998 0b16 07       		.byte	0x7
 9999 0b17 E901     		.2byte	0x1e9
 10000 0b19 3C0B0000 		.4byte	0xb3c
 10001 0b1d 0A       		.uleb128 0xa
 10002 0b1e 88010000 		.4byte	.LASF159
 10003 0b22 00       		.byte	0
 10004 0b23 0A       		.uleb128 0xa
 10005 0b24 09070000 		.4byte	.LASF160
 10006 0b28 01       		.byte	0x1
 10007 0b29 0A       		.uleb128 0xa
 10008 0b2a 87070000 		.4byte	.LASF161
 10009 0b2e 02       		.byte	0x2
 10010 0b2f 0A       		.uleb128 0xa
 10011 0b30 09030000 		.4byte	.LASF162
 10012 0b34 03       		.byte	0x3
 10013 0b35 0A       		.uleb128 0xa
 10014 0b36 960F0000 		.4byte	.LASF163
 10015 0b3a 04       		.byte	0x4
 10016 0b3b 00       		.byte	0
 10017 0b3c 05       		.uleb128 0x5
 10018 0b3d E90C0000 		.4byte	.LASF164
 10019 0b41 07       		.byte	0x7
 10020 0b42 F001     		.2byte	0x1f0
 10021 0b44 100B0000 		.4byte	0xb10
 10022 0b48 17       		.uleb128 0x17
 10023 0b49 02050000 		.4byte	.LASF165
 10024 0b4d 01       		.byte	0x1
 10025 0b4e 62       		.byte	0x62
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 224


 10026 0b4f 00000000 		.4byte	.LFB64
 10027 0b53 18000000 		.4byte	.LFE64-.LFB64
 10028 0b57 01       		.uleb128 0x1
 10029 0b58 9C       		.byte	0x9c
 10030 0b59 17       		.uleb128 0x17
 10031 0b5a 6C0E0000 		.4byte	.LASF166
 10032 0b5e 01       		.byte	0x1
 10033 0b5f 6D       		.byte	0x6d
 10034 0b60 00000000 		.4byte	.LFB65
 10035 0b64 20000000 		.4byte	.LFE65-.LFB65
 10036 0b68 01       		.uleb128 0x1
 10037 0b69 9C       		.byte	0x9c
 10038 0b6a 18       		.uleb128 0x18
 10039 0b6b DE080000 		.4byte	.LASF180
 10040 0b6f 01       		.byte	0x1
 10041 0b70 86       		.byte	0x86
 10042 0b71 00000000 		.4byte	.LFB66
 10043 0b75 F4010000 		.4byte	.LFE66-.LFB66
 10044 0b79 01       		.uleb128 0x1
 10045 0b7a 9C       		.byte	0x9c
 10046 0b7b FF0B0000 		.4byte	0xbff
 10047 0b7f 19       		.uleb128 0x19
 10048 0b80 AB000000 		.4byte	.LASF167
 10049 0b84 01       		.byte	0x1
 10050 0b85 8B       		.byte	0x8b
 10051 0b86 81000000 		.4byte	0x81
 10052 0b8a 05       		.uleb128 0x5
 10053 0b8b 03       		.byte	0x3
 10054 0b8c 00000000 		.4byte	state.10381
 10055 0b90 19       		.uleb128 0x19
 10056 0b91 D9050000 		.4byte	.LASF168
 10057 0b95 01       		.byte	0x1
 10058 0b96 8E       		.byte	0x8e
 10059 0b97 81000000 		.4byte	0x81
 10060 0b9b 05       		.uleb128 0x5
 10061 0b9c 03       		.byte	0x3
 10062 0b9d 08000000 		.4byte	data_packet_index.10382
 10063 0ba1 19       		.uleb128 0x19
 10064 0ba2 820B0000 		.4byte	.LASF169
 10065 0ba6 01       		.byte	0x1
 10066 0ba7 8F       		.byte	0x8f
 10067 0ba8 81000000 		.4byte	0x81
 10068 0bac 05       		.uleb128 0x5
 10069 0bad 03       		.byte	0x3
 10070 0bae 07000000 		.4byte	data_packet_length.10383
 10071 0bb2 19       		.uleb128 0x19
 10072 0bb3 EB050000 		.4byte	.LASF170
 10073 0bb7 01       		.byte	0x1
 10074 0bb8 90       		.byte	0x90
 10075 0bb9 DF020000 		.4byte	0x2df
 10076 0bbd 05       		.uleb128 0x5
 10077 0bbe 03       		.byte	0x3
 10078 0bbf 0C000000 		.4byte	data_packet_buffer.10384
 10079 0bc3 19       		.uleb128 0x19
 10080 0bc4 D1090000 		.4byte	.LASF171
 10081 0bc8 01       		.byte	0x1
 10082 0bc9 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 225


 10083 0bca 17040000 		.4byte	0x417
 10084 0bce 05       		.uleb128 0x5
 10085 0bcf 03       		.byte	0x3
 10086 0bd0 04000000 		.4byte	rx_queue.10385
 10087 0bd4 19       		.uleb128 0x19
 10088 0bd5 42010000 		.4byte	.LASF172
 10089 0bd9 01       		.byte	0x1
 10090 0bda 94       		.byte	0x94
 10091 0bdb 81000000 		.4byte	0x81
 10092 0bdf 02       		.uleb128 0x2
 10093 0be0 91       		.byte	0x91
 10094 0be1 75       		.sleb128 -11
 10095 0be2 19       		.uleb128 0x19
 10096 0be3 9E050000 		.4byte	.LASF173
 10097 0be7 01       		.byte	0x1
 10098 0be8 95       		.byte	0x95
 10099 0be9 81000000 		.4byte	0x81
 10100 0bed 02       		.uleb128 0x2
 10101 0bee 91       		.byte	0x91
 10102 0bef 77       		.sleb128 -9
 10103 0bf0 19       		.uleb128 0x19
 10104 0bf1 BE060000 		.4byte	.LASF174
 10105 0bf5 01       		.byte	0x1
 10106 0bf6 96       		.byte	0x96
 10107 0bf7 81000000 		.4byte	0x81
 10108 0bfb 02       		.uleb128 0x2
 10109 0bfc 91       		.byte	0x91
 10110 0bfd 76       		.sleb128 -10
 10111 0bfe 00       		.byte	0
 10112 0bff 1A       		.uleb128 0x1a
 10113 0c00 830D0000 		.4byte	.LASF199
 10114 0c04 01       		.byte	0x1
 10115 0c05 0C01     		.2byte	0x10c
 10116 0c07 00000000 		.4byte	.LFB67
 10117 0c0b DC050000 		.4byte	.LFE67-.LFB67
 10118 0c0f 01       		.uleb128 0x1
 10119 0c10 9C       		.byte	0x9c
 10120 0c11 7F0C0000 		.4byte	0xc7f
 10121 0c15 1B       		.uleb128 0x1b
 10122 0c16 0C060000 		.4byte	.LASF175
 10123 0c1a 01       		.byte	0x1
 10124 0c1b 0E01     		.2byte	0x10e
 10125 0c1d 8D000000 		.4byte	0x8d
 10126 0c21 05       		.uleb128 0x5
 10127 0c22 03       		.byte	0x3
 10128 0c23 00000000 		.4byte	counter_calibration.10401
 10129 0c27 1B       		.uleb128 0x1b
 10130 0c28 050B0000 		.4byte	.LASF176
 10131 0c2c 01       		.byte	0x1
 10132 0c2d 0F01     		.2byte	0x10f
 10133 0c2f 8D000000 		.4byte	0x8d
 10134 0c33 05       		.uleb128 0x5
 10135 0c34 03       		.byte	0x3
 10136 0c35 02000000 		.4byte	counter_tension_func.10402
 10137 0c39 1B       		.uleb128 0x1b
 10138 0c3a 59010000 		.4byte	.LASF177
 10139 0c3e 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 226


 10140 0c3f 1001     		.2byte	0x110
 10141 0c41 7F0C0000 		.4byte	0xc7f
 10142 0c45 03       		.uleb128 0x3
 10143 0c46 91       		.byte	0x91
 10144 0c47 A86C     		.sleb128 -2520
 10145 0c49 1B       		.uleb128 0x1b
 10146 0c4a E80A0000 		.4byte	.LASF178
 10147 0c4e 01       		.byte	0x1
 10148 0c4f 1201     		.2byte	0x112
 10149 0c51 81000000 		.4byte	0x81
 10150 0c55 02       		.uleb128 0x2
 10151 0c56 91       		.byte	0x91
 10152 0c57 6E       		.sleb128 -18
 10153 0c58 1B       		.uleb128 0x1b
 10154 0c59 A3080000 		.4byte	.LASF179
 10155 0c5d 01       		.byte	0x1
 10156 0c5e 1301     		.2byte	0x113
 10157 0c60 81000000 		.4byte	0x81
 10158 0c64 02       		.uleb128 0x2
 10159 0c65 91       		.byte	0x91
 10160 0c66 6D       		.sleb128 -19
 10161 0c67 1C       		.uleb128 0x1c
 10162 0c68 28010000 		.4byte	.LBB2
 10163 0c6c B8000000 		.4byte	.LBE2-.LBB2
 10164 0c70 1D       		.uleb128 0x1d
 10165 0c71 6900     		.ascii	"i\000"
 10166 0c73 01       		.byte	0x1
 10167 0c74 4D01     		.2byte	0x14d
 10168 0c76 81000000 		.4byte	0x81
 10169 0c7a 02       		.uleb128 0x2
 10170 0c7b 91       		.byte	0x91
 10171 0c7c 6F       		.sleb128 -17
 10172 0c7d 00       		.byte	0
 10173 0c7e 00       		.byte	0
 10174 0c7f 07       		.uleb128 0x7
 10175 0c80 E3000000 		.4byte	0xe3
 10176 0c84 900C0000 		.4byte	0xc90
 10177 0c88 1E       		.uleb128 0x1e
 10178 0c89 0E010000 		.4byte	0x10e
 10179 0c8d C309     		.2byte	0x9c3
 10180 0c8f 00       		.byte	0
 10181 0c90 1F       		.uleb128 0x1f
 10182 0c91 4B050000 		.4byte	.LASF181
 10183 0c95 01       		.byte	0x1
 10184 0c96 6302     		.2byte	0x263
 10185 0c98 00000000 		.4byte	.LFB68
 10186 0c9c 000B0000 		.4byte	.LFE68-.LFB68
 10187 0ca0 01       		.uleb128 0x1
 10188 0ca1 9C       		.byte	0x9c
 10189 0ca2 890E0000 		.4byte	0xe89
 10190 0ca6 1B       		.uleb128 0x1b
 10191 0ca7 FC000000 		.4byte	.LASF182
 10192 0cab 01       		.byte	0x1
 10193 0cac 6502     		.2byte	0x265
 10194 0cae BD000000 		.4byte	0xbd
 10195 0cb2 02       		.uleb128 0x2
 10196 0cb3 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 227


 10197 0cb4 74       		.sleb128 -12
 10198 0cb5 1B       		.uleb128 0x1b
 10199 0cb6 A70A0000 		.4byte	.LASF183
 10200 0cba 01       		.byte	0x1
 10201 0cbb 6602     		.2byte	0x266
 10202 0cbd BD000000 		.4byte	0xbd
 10203 0cc1 03       		.uleb128 0x3
 10204 0cc2 91       		.byte	0x91
 10205 0cc3 A47F     		.sleb128 -92
 10206 0cc5 1B       		.uleb128 0x1b
 10207 0cc6 270E0000 		.4byte	.LASF184
 10208 0cca 01       		.byte	0x1
 10209 0ccb 6702     		.2byte	0x267
 10210 0ccd BD000000 		.4byte	0xbd
 10211 0cd1 03       		.uleb128 0x3
 10212 0cd2 91       		.byte	0x91
 10213 0cd3 A07F     		.sleb128 -96
 10214 0cd5 1B       		.uleb128 0x1b
 10215 0cd6 EE090000 		.4byte	.LASF185
 10216 0cda 01       		.byte	0x1
 10217 0cdb 6802     		.2byte	0x268
 10218 0cdd BD000000 		.4byte	0xbd
 10219 0ce1 02       		.uleb128 0x2
 10220 0ce2 91       		.byte	0x91
 10221 0ce3 70       		.sleb128 -16
 10222 0ce4 1B       		.uleb128 0x1b
 10223 0ce5 86040000 		.4byte	.LASF186
 10224 0ce9 01       		.byte	0x1
 10225 0cea 6902     		.2byte	0x269
 10226 0cec BD000000 		.4byte	0xbd
 10227 0cf0 02       		.uleb128 0x2
 10228 0cf1 91       		.byte	0x91
 10229 0cf2 6C       		.sleb128 -20
 10230 0cf3 1B       		.uleb128 0x1b
 10231 0cf4 5A030000 		.4byte	.LASF187
 10232 0cf8 01       		.byte	0x1
 10233 0cf9 6A02     		.2byte	0x26a
 10234 0cfb BD000000 		.4byte	0xbd
 10235 0cff 03       		.uleb128 0x3
 10236 0d00 91       		.byte	0x91
 10237 0d01 AC7F     		.sleb128 -84
 10238 0d03 1B       		.uleb128 0x1b
 10239 0d04 64030000 		.4byte	.LASF188
 10240 0d08 01       		.byte	0x1
 10241 0d09 6A02     		.2byte	0x26a
 10242 0d0b BD000000 		.4byte	0xbd
 10243 0d0f 03       		.uleb128 0x3
 10244 0d10 91       		.byte	0x91
 10245 0d11 A87F     		.sleb128 -88
 10246 0d13 1B       		.uleb128 0x1b
 10247 0d14 E80A0000 		.4byte	.LASF178
 10248 0d18 01       		.byte	0x1
 10249 0d19 6C02     		.2byte	0x26c
 10250 0d1b 81000000 		.4byte	0x81
 10251 0d1f 02       		.uleb128 0x2
 10252 0d20 91       		.byte	0x91
 10253 0d21 6B       		.sleb128 -21
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 228


 10254 0d22 1B       		.uleb128 0x1b
 10255 0d23 D4020000 		.4byte	.LASF189
 10256 0d27 01       		.byte	0x1
 10257 0d28 6E02     		.2byte	0x26e
 10258 0d2a 890E0000 		.4byte	0xe89
 10259 0d2e 02       		.uleb128 0x2
 10260 0d2f 91       		.byte	0x91
 10261 0d30 64       		.sleb128 -28
 10262 0d31 1B       		.uleb128 0x1b
 10263 0d32 56020000 		.4byte	.LASF190
 10264 0d36 01       		.byte	0x1
 10265 0d37 6F02     		.2byte	0x26f
 10266 0d39 81000000 		.4byte	0x81
 10267 0d3d 02       		.uleb128 0x2
 10268 0d3e 91       		.byte	0x91
 10269 0d3f 63       		.sleb128 -29
 10270 0d40 1D       		.uleb128 0x1d
 10271 0d41 6B5F7000 		.ascii	"k_p\000"
 10272 0d45 01       		.byte	0x1
 10273 0d46 7102     		.2byte	0x271
 10274 0d48 BD000000 		.4byte	0xbd
 10275 0d4c 02       		.uleb128 0x2
 10276 0d4d 91       		.byte	0x91
 10277 0d4e 5C       		.sleb128 -36
 10278 0d4f 1D       		.uleb128 0x1d
 10279 0d50 6B5F6900 		.ascii	"k_i\000"
 10280 0d54 01       		.byte	0x1
 10281 0d55 7202     		.2byte	0x272
 10282 0d57 BD000000 		.4byte	0xbd
 10283 0d5b 02       		.uleb128 0x2
 10284 0d5c 91       		.byte	0x91
 10285 0d5d 58       		.sleb128 -40
 10286 0d5e 1D       		.uleb128 0x1d
 10287 0d5f 6B5F6400 		.ascii	"k_d\000"
 10288 0d63 01       		.byte	0x1
 10289 0d64 7302     		.2byte	0x273
 10290 0d66 BD000000 		.4byte	0xbd
 10291 0d6a 02       		.uleb128 0x2
 10292 0d6b 91       		.byte	0x91
 10293 0d6c 54       		.sleb128 -44
 10294 0d6d 1B       		.uleb128 0x1b
 10295 0d6e 950B0000 		.4byte	.LASF70
 10296 0d72 01       		.byte	0x1
 10297 0d73 7502     		.2byte	0x275
 10298 0d75 BD000000 		.4byte	0xbd
 10299 0d79 02       		.uleb128 0x2
 10300 0d7a 91       		.byte	0x91
 10301 0d7b 50       		.sleb128 -48
 10302 0d7c 1B       		.uleb128 0x1b
 10303 0d7d EB040000 		.4byte	.LASF71
 10304 0d81 01       		.byte	0x1
 10305 0d82 7602     		.2byte	0x276
 10306 0d84 BD000000 		.4byte	0xbd
 10307 0d88 02       		.uleb128 0x2
 10308 0d89 91       		.byte	0x91
 10309 0d8a 4C       		.sleb128 -52
 10310 0d8b 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 229


 10311 0d8c DE040000 		.4byte	.LASF72
 10312 0d90 01       		.byte	0x1
 10313 0d91 7702     		.2byte	0x277
 10314 0d93 BD000000 		.4byte	0xbd
 10315 0d97 02       		.uleb128 0x2
 10316 0d98 91       		.byte	0x91
 10317 0d99 48       		.sleb128 -56
 10318 0d9a 1B       		.uleb128 0x1b
 10319 0d9b 000E0000 		.4byte	.LASF73
 10320 0d9f 01       		.byte	0x1
 10321 0da0 7902     		.2byte	0x279
 10322 0da2 BD000000 		.4byte	0xbd
 10323 0da6 02       		.uleb128 0x2
 10324 0da7 91       		.byte	0x91
 10325 0da8 44       		.sleb128 -60
 10326 0da9 1B       		.uleb128 0x1b
 10327 0daa 87050000 		.4byte	.LASF74
 10328 0dae 01       		.byte	0x1
 10329 0daf 7A02     		.2byte	0x27a
 10330 0db1 BD000000 		.4byte	0xbd
 10331 0db5 02       		.uleb128 0x2
 10332 0db6 91       		.byte	0x91
 10333 0db7 40       		.sleb128 -64
 10334 0db8 1B       		.uleb128 0x1b
 10335 0db9 4E0D0000 		.4byte	.LASF75
 10336 0dbd 01       		.byte	0x1
 10337 0dbe 7B02     		.2byte	0x27b
 10338 0dc0 BD000000 		.4byte	0xbd
 10339 0dc4 03       		.uleb128 0x3
 10340 0dc5 91       		.byte	0x91
 10341 0dc6 BC7F     		.sleb128 -68
 10342 0dc8 1B       		.uleb128 0x1b
 10343 0dc9 95050000 		.4byte	.LASF76
 10344 0dcd 01       		.byte	0x1
 10345 0dce 7D02     		.2byte	0x27d
 10346 0dd0 BD000000 		.4byte	0xbd
 10347 0dd4 03       		.uleb128 0x3
 10348 0dd5 91       		.byte	0x91
 10349 0dd6 B87F     		.sleb128 -72
 10350 0dd8 1B       		.uleb128 0x1b
 10351 0dd9 B5060000 		.4byte	.LASF77
 10352 0ddd 01       		.byte	0x1
 10353 0dde 7E02     		.2byte	0x27e
 10354 0de0 BD000000 		.4byte	0xbd
 10355 0de4 03       		.uleb128 0x3
 10356 0de5 91       		.byte	0x91
 10357 0de6 B47F     		.sleb128 -76
 10358 0de8 1B       		.uleb128 0x1b
 10359 0de9 CE0F0000 		.4byte	.LASF78
 10360 0ded 01       		.byte	0x1
 10361 0dee 7F02     		.2byte	0x27f
 10362 0df0 BD000000 		.4byte	0xbd
 10363 0df4 03       		.uleb128 0x3
 10364 0df5 91       		.byte	0x91
 10365 0df6 B07F     		.sleb128 -80
 10366 0df8 1B       		.uleb128 0x1b
 10367 0df9 62050000 		.4byte	.LASF191
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 230


 10368 0dfd 01       		.byte	0x1
 10369 0dfe 8302     		.2byte	0x283
 10370 0e00 BD000000 		.4byte	0xbd
 10371 0e04 05       		.uleb128 0x5
 10372 0e05 03       		.byte	0x3
 10373 0e06 90000000 		.4byte	pos_error_sum.10438
 10374 0e0a 1B       		.uleb128 0x1b
 10375 0e0b A2030000 		.4byte	.LASF192
 10376 0e0f 01       		.byte	0x1
 10377 0e10 8402     		.2byte	0x284
 10378 0e12 BD000000 		.4byte	0xbd
 10379 0e16 05       		.uleb128 0x5
 10380 0e17 03       		.byte	0x3
 10381 0e18 9C000000 		.4byte	curr_error_sum.10439
 10382 0e1c 1B       		.uleb128 0x1b
 10383 0e1d 460A0000 		.4byte	.LASF193
 10384 0e21 01       		.byte	0x1
 10385 0e22 8602     		.2byte	0x286
 10386 0e24 BD000000 		.4byte	0xbd
 10387 0e28 05       		.uleb128 0x5
 10388 0e29 03       		.byte	0x3
 10389 0e2a 94000000 		.4byte	prev_pos_err.10440
 10390 0e2e 1B       		.uleb128 0x1b
 10391 0e2f 740B0000 		.4byte	.LASF194
 10392 0e33 01       		.byte	0x1
 10393 0e34 8702     		.2byte	0x287
 10394 0e36 BD000000 		.4byte	0xbd
 10395 0e3a 05       		.uleb128 0x5
 10396 0e3b 03       		.byte	0x3
 10397 0e3c A0000000 		.4byte	prev_curr_err.10441
 10398 0e40 1B       		.uleb128 0x1b
 10399 0e41 960D0000 		.4byte	.LASF195
 10400 0e45 01       		.byte	0x1
 10401 0e46 8802     		.2byte	0x288
 10402 0e48 BD000000 		.4byte	0xbd
 10403 0e4c 05       		.uleb128 0x5
 10404 0e4d 03       		.byte	0x3
 10405 0e4e A4000000 		.4byte	prev_pwm.10442
 10406 0e52 1B       		.uleb128 0x1b
 10407 0e53 F1040000 		.4byte	.LASF196
 10408 0e57 01       		.byte	0x1
 10409 0e58 8A02     		.2byte	0x28a
 10410 0e5a 81000000 		.4byte	0x81
 10411 0e5e 05       		.uleb128 0x5
 10412 0e5f 03       		.byte	0x3
 10413 0e60 98000000 		.4byte	motor_dir.10443
 10414 0e64 1B       		.uleb128 0x1b
 10415 0e65 BA050000 		.4byte	.LASF197
 10416 0e69 01       		.byte	0x1
 10417 0e6a 8B02     		.2byte	0x28b
 10418 0e6c 99000000 		.4byte	0x99
 10419 0e70 05       		.uleb128 0x5
 10420 0e71 03       		.byte	0x3
 10421 0e72 A8000000 		.4byte	position_counter.10444
 10422 0e76 1B       		.uleb128 0x1b
 10423 0e77 C5090000 		.4byte	.LASF198
 10424 0e7b 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 231


 10425 0e7c 8C02     		.2byte	0x28c
 10426 0e7e 81000000 		.4byte	0x81
 10427 0e82 05       		.uleb128 0x5
 10428 0e83 03       		.byte	0x3
 10429 0e84 8C000000 		.4byte	current_emg.10445
 10430 0e88 00       		.byte	0
 10431 0e89 0C       		.uleb128 0xc
 10432 0e8a 04       		.byte	0x4
 10433 0e8b 27040000 		.4byte	0x427
 10434 0e8f 1A       		.uleb128 0x1a
 10435 0e90 AE040000 		.4byte	.LASF200
 10436 0e94 01       		.byte	0x1
 10437 0e95 4004     		.2byte	0x440
 10438 0e97 00000000 		.4byte	.LFB69
 10439 0e9b D40C0000 		.4byte	.LFE69-.LFB69
 10440 0e9f 01       		.uleb128 0x1
 10441 0ea0 9C       		.byte	0x9c
 10442 0ea1 8A100000 		.4byte	0x108a
 10443 0ea5 20       		.uleb128 0x20
 10444 0ea6 69647800 		.ascii	"idx\000"
 10445 0eaa 01       		.byte	0x1
 10446 0eab 4004     		.2byte	0x440
 10447 0ead 81000000 		.4byte	0x81
 10448 0eb1 03       		.uleb128 0x3
 10449 0eb2 91       		.byte	0x91
 10450 0eb3 977F     		.sleb128 -105
 10451 0eb5 1B       		.uleb128 0x1b
 10452 0eb6 FC000000 		.4byte	.LASF182
 10453 0eba 01       		.byte	0x1
 10454 0ebb 4204     		.2byte	0x442
 10455 0ebd BD000000 		.4byte	0xbd
 10456 0ec1 02       		.uleb128 0x2
 10457 0ec2 91       		.byte	0x91
 10458 0ec3 6C       		.sleb128 -20
 10459 0ec4 1B       		.uleb128 0x1b
 10460 0ec5 A70A0000 		.4byte	.LASF183
 10461 0ec9 01       		.byte	0x1
 10462 0eca 4304     		.2byte	0x443
 10463 0ecc BD000000 		.4byte	0xbd
 10464 0ed0 03       		.uleb128 0x3
 10465 0ed1 91       		.byte	0x91
 10466 0ed2 A07F     		.sleb128 -96
 10467 0ed4 1B       		.uleb128 0x1b
 10468 0ed5 270E0000 		.4byte	.LASF184
 10469 0ed9 01       		.byte	0x1
 10470 0eda 4404     		.2byte	0x444
 10471 0edc BD000000 		.4byte	0xbd
 10472 0ee0 03       		.uleb128 0x3
 10473 0ee1 91       		.byte	0x91
 10474 0ee2 9C7F     		.sleb128 -100
 10475 0ee4 1B       		.uleb128 0x1b
 10476 0ee5 EE090000 		.4byte	.LASF185
 10477 0ee9 01       		.byte	0x1
 10478 0eea 4504     		.2byte	0x445
 10479 0eec BD000000 		.4byte	0xbd
 10480 0ef0 02       		.uleb128 0x2
 10481 0ef1 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 232


 10482 0ef2 68       		.sleb128 -24
 10483 0ef3 1B       		.uleb128 0x1b
 10484 0ef4 86040000 		.4byte	.LASF186
 10485 0ef8 01       		.byte	0x1
 10486 0ef9 4604     		.2byte	0x446
 10487 0efb BD000000 		.4byte	0xbd
 10488 0eff 02       		.uleb128 0x2
 10489 0f00 91       		.byte	0x91
 10490 0f01 64       		.sleb128 -28
 10491 0f02 1B       		.uleb128 0x1b
 10492 0f03 5A030000 		.4byte	.LASF187
 10493 0f07 01       		.byte	0x1
 10494 0f08 4704     		.2byte	0x447
 10495 0f0a BD000000 		.4byte	0xbd
 10496 0f0e 03       		.uleb128 0x3
 10497 0f0f 91       		.byte	0x91
 10498 0f10 A87F     		.sleb128 -88
 10499 0f12 1B       		.uleb128 0x1b
 10500 0f13 64030000 		.4byte	.LASF188
 10501 0f17 01       		.byte	0x1
 10502 0f18 4704     		.2byte	0x447
 10503 0f1a BD000000 		.4byte	0xbd
 10504 0f1e 03       		.uleb128 0x3
 10505 0f1f 91       		.byte	0x91
 10506 0f20 A47F     		.sleb128 -92
 10507 0f22 1D       		.uleb128 0x1d
 10508 0f23 4D4F5400 		.ascii	"MOT\000"
 10509 0f27 01       		.byte	0x1
 10510 0f28 4904     		.2byte	0x449
 10511 0f2a 890E0000 		.4byte	0xe89
 10512 0f2e 02       		.uleb128 0x2
 10513 0f2f 91       		.byte	0x91
 10514 0f30 60       		.sleb128 -32
 10515 0f31 1B       		.uleb128 0x1b
 10516 0f32 CB0E0000 		.4byte	.LASF201
 10517 0f36 01       		.byte	0x1
 10518 0f37 4A04     		.2byte	0x44a
 10519 0f39 81000000 		.4byte	0x81
 10520 0f3d 02       		.uleb128 0x2
 10521 0f3e 91       		.byte	0x91
 10522 0f3f 5F       		.sleb128 -33
 10523 0f40 1D       		.uleb128 0x1d
 10524 0f41 6B5F7000 		.ascii	"k_p\000"
 10525 0f45 01       		.byte	0x1
 10526 0f46 4C04     		.2byte	0x44c
 10527 0f48 BD000000 		.4byte	0xbd
 10528 0f4c 02       		.uleb128 0x2
 10529 0f4d 91       		.byte	0x91
 10530 0f4e 58       		.sleb128 -40
 10531 0f4f 1D       		.uleb128 0x1d
 10532 0f50 6B5F6900 		.ascii	"k_i\000"
 10533 0f54 01       		.byte	0x1
 10534 0f55 4D04     		.2byte	0x44d
 10535 0f57 BD000000 		.4byte	0xbd
 10536 0f5b 02       		.uleb128 0x2
 10537 0f5c 91       		.byte	0x91
 10538 0f5d 54       		.sleb128 -44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 233


 10539 0f5e 1D       		.uleb128 0x1d
 10540 0f5f 6B5F6400 		.ascii	"k_d\000"
 10541 0f63 01       		.byte	0x1
 10542 0f64 4E04     		.2byte	0x44e
 10543 0f66 BD000000 		.4byte	0xbd
 10544 0f6a 02       		.uleb128 0x2
 10545 0f6b 91       		.byte	0x91
 10546 0f6c 50       		.sleb128 -48
 10547 0f6d 1B       		.uleb128 0x1b
 10548 0f6e 950B0000 		.4byte	.LASF70
 10549 0f72 01       		.byte	0x1
 10550 0f73 5004     		.2byte	0x450
 10551 0f75 BD000000 		.4byte	0xbd
 10552 0f79 02       		.uleb128 0x2
 10553 0f7a 91       		.byte	0x91
 10554 0f7b 4C       		.sleb128 -52
 10555 0f7c 1B       		.uleb128 0x1b
 10556 0f7d EB040000 		.4byte	.LASF71
 10557 0f81 01       		.byte	0x1
 10558 0f82 5104     		.2byte	0x451
 10559 0f84 BD000000 		.4byte	0xbd
 10560 0f88 02       		.uleb128 0x2
 10561 0f89 91       		.byte	0x91
 10562 0f8a 48       		.sleb128 -56
 10563 0f8b 1B       		.uleb128 0x1b
 10564 0f8c DE040000 		.4byte	.LASF72
 10565 0f90 01       		.byte	0x1
 10566 0f91 5204     		.2byte	0x452
 10567 0f93 BD000000 		.4byte	0xbd
 10568 0f97 02       		.uleb128 0x2
 10569 0f98 91       		.byte	0x91
 10570 0f99 44       		.sleb128 -60
 10571 0f9a 1B       		.uleb128 0x1b
 10572 0f9b 000E0000 		.4byte	.LASF73
 10573 0f9f 01       		.byte	0x1
 10574 0fa0 5404     		.2byte	0x454
 10575 0fa2 BD000000 		.4byte	0xbd
 10576 0fa6 02       		.uleb128 0x2
 10577 0fa7 91       		.byte	0x91
 10578 0fa8 40       		.sleb128 -64
 10579 0fa9 1B       		.uleb128 0x1b
 10580 0faa 87050000 		.4byte	.LASF74
 10581 0fae 01       		.byte	0x1
 10582 0faf 5504     		.2byte	0x455
 10583 0fb1 BD000000 		.4byte	0xbd
 10584 0fb5 03       		.uleb128 0x3
 10585 0fb6 91       		.byte	0x91
 10586 0fb7 BC7F     		.sleb128 -68
 10587 0fb9 1B       		.uleb128 0x1b
 10588 0fba 4E0D0000 		.4byte	.LASF75
 10589 0fbe 01       		.byte	0x1
 10590 0fbf 5604     		.2byte	0x456
 10591 0fc1 BD000000 		.4byte	0xbd
 10592 0fc5 03       		.uleb128 0x3
 10593 0fc6 91       		.byte	0x91
 10594 0fc7 B87F     		.sleb128 -72
 10595 0fc9 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 234


 10596 0fca 95050000 		.4byte	.LASF76
 10597 0fce 01       		.byte	0x1
 10598 0fcf 5804     		.2byte	0x458
 10599 0fd1 BD000000 		.4byte	0xbd
 10600 0fd5 03       		.uleb128 0x3
 10601 0fd6 91       		.byte	0x91
 10602 0fd7 B47F     		.sleb128 -76
 10603 0fd9 1B       		.uleb128 0x1b
 10604 0fda B5060000 		.4byte	.LASF77
 10605 0fde 01       		.byte	0x1
 10606 0fdf 5904     		.2byte	0x459
 10607 0fe1 BD000000 		.4byte	0xbd
 10608 0fe5 03       		.uleb128 0x3
 10609 0fe6 91       		.byte	0x91
 10610 0fe7 B07F     		.sleb128 -80
 10611 0fe9 1B       		.uleb128 0x1b
 10612 0fea CE0F0000 		.4byte	.LASF78
 10613 0fee 01       		.byte	0x1
 10614 0fef 5A04     		.2byte	0x45a
 10615 0ff1 BD000000 		.4byte	0xbd
 10616 0ff5 03       		.uleb128 0x3
 10617 0ff6 91       		.byte	0x91
 10618 0ff7 AC7F     		.sleb128 -84
 10619 0ff9 1B       		.uleb128 0x1b
 10620 0ffa 62050000 		.4byte	.LASF191
 10621 0ffe 01       		.byte	0x1
 10622 0fff 5E04     		.2byte	0x45e
 10623 1001 82020000 		.4byte	0x282
 10624 1005 05       		.uleb128 0x5
 10625 1006 03       		.byte	0x3
 10626 1007 B0000000 		.4byte	pos_error_sum.10493
 10627 100b 1B       		.uleb128 0x1b
 10628 100c A2030000 		.4byte	.LASF192
 10629 1010 01       		.byte	0x1
 10630 1011 5F04     		.2byte	0x45f
 10631 1013 82020000 		.4byte	0x282
 10632 1017 05       		.uleb128 0x5
 10633 1018 03       		.byte	0x3
 10634 1019 C4000000 		.4byte	curr_error_sum.10494
 10635 101d 1B       		.uleb128 0x1b
 10636 101e 460A0000 		.4byte	.LASF193
 10637 1022 01       		.byte	0x1
 10638 1023 6104     		.2byte	0x461
 10639 1025 82020000 		.4byte	0x282
 10640 1029 05       		.uleb128 0x5
 10641 102a 03       		.byte	0x3
 10642 102b B8000000 		.4byte	prev_pos_err.10495
 10643 102f 1B       		.uleb128 0x1b
 10644 1030 740B0000 		.4byte	.LASF194
 10645 1034 01       		.byte	0x1
 10646 1035 6204     		.2byte	0x462
 10647 1037 82020000 		.4byte	0x282
 10648 103b 05       		.uleb128 0x5
 10649 103c 03       		.byte	0x3
 10650 103d CC000000 		.4byte	prev_curr_err.10496
 10651 1041 1B       		.uleb128 0x1b
 10652 1042 960D0000 		.4byte	.LASF195
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 235


 10653 1046 01       		.byte	0x1
 10654 1047 6304     		.2byte	0x463
 10655 1049 82020000 		.4byte	0x282
 10656 104d 05       		.uleb128 0x5
 10657 104e 03       		.byte	0x3
 10658 104f D4000000 		.4byte	prev_pwm.10497
 10659 1053 1B       		.uleb128 0x1b
 10660 1054 F1040000 		.4byte	.LASF196
 10661 1058 01       		.byte	0x1
 10662 1059 6504     		.2byte	0x465
 10663 105b 8A100000 		.4byte	0x108a
 10664 105f 05       		.uleb128 0x5
 10665 1060 03       		.byte	0x3
 10666 1061 C0000000 		.4byte	motor_dir.10498
 10667 1065 1B       		.uleb128 0x1b
 10668 1066 BA050000 		.4byte	.LASF197
 10669 106a 01       		.byte	0x1
 10670 106b 6604     		.2byte	0x466
 10671 106d 58030000 		.4byte	0x358
 10672 1071 05       		.uleb128 0x5
 10673 1072 03       		.byte	0x3
 10674 1073 DC000000 		.4byte	position_counter.10499
 10675 1077 1B       		.uleb128 0x1b
 10676 1078 C5090000 		.4byte	.LASF198
 10677 107c 01       		.byte	0x1
 10678 107d 6704     		.2byte	0x467
 10679 107f 8A100000 		.4byte	0x108a
 10680 1083 05       		.uleb128 0x5
 10681 1084 03       		.byte	0x3
 10682 1085 AC000000 		.4byte	current_emg.10500
 10683 1089 00       		.byte	0
 10684 108a 07       		.uleb128 0x7
 10685 108b 81000000 		.4byte	0x81
 10686 108f 9A100000 		.4byte	0x109a
 10687 1093 08       		.uleb128 0x8
 10688 1094 0E010000 		.4byte	0x10e
 10689 1098 01       		.byte	0x1
 10690 1099 00       		.byte	0
 10691 109a 1A       		.uleb128 0x1a
 10692 109b E3020000 		.4byte	.LASF202
 10693 109f 01       		.byte	0x1
 10694 10a0 2106     		.2byte	0x621
 10695 10a2 00000000 		.4byte	.LFB70
 10696 10a6 10080000 		.4byte	.LFE70-.LFB70
 10697 10aa 01       		.uleb128 0x1
 10698 10ab 9C       		.byte	0x9c
 10699 10ac 34120000 		.4byte	0x1234
 10700 10b0 21       		.uleb128 0x21
 10701 10b1 8A000000 		.4byte	.LASF203
 10702 10b5 01       		.byte	0x1
 10703 10b6 2106     		.2byte	0x621
 10704 10b8 81000000 		.4byte	0x81
 10705 10bc 03       		.uleb128 0x3
 10706 10bd 91       		.byte	0x91
 10707 10be BF7F     		.sleb128 -65
 10708 10c0 21       		.uleb128 0x21
 10709 10c1 DA090000 		.4byte	.LASF204
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 236


 10710 10c5 01       		.byte	0x1
 10711 10c6 2106     		.2byte	0x621
 10712 10c8 81000000 		.4byte	0x81
 10713 10cc 03       		.uleb128 0x3
 10714 10cd 91       		.byte	0x91
 10715 10ce BE7F     		.sleb128 -66
 10716 10d0 1B       		.uleb128 0x1b
 10717 10d1 81060000 		.4byte	.LASF205
 10718 10d5 01       		.byte	0x1
 10719 10d6 2306     		.2byte	0x623
 10720 10d8 81000000 		.4byte	0x81
 10721 10dc 02       		.uleb128 0x2
 10722 10dd 91       		.byte	0x91
 10723 10de 67       		.sleb128 -25
 10724 10df 1D       		.uleb128 0x1d
 10725 10e0 6A6A00   		.ascii	"jj\000"
 10726 10e3 01       		.byte	0x1
 10727 10e4 2606     		.2byte	0x626
 10728 10e6 81000000 		.4byte	0x81
 10729 10ea 02       		.uleb128 0x2
 10730 10eb 91       		.byte	0x91
 10731 10ec 66       		.sleb128 -26
 10732 10ed 1B       		.uleb128 0x1b
 10733 10ee BC020000 		.4byte	.LASF206
 10734 10f2 01       		.byte	0x1
 10735 10f3 2806     		.2byte	0x628
 10736 10f5 34120000 		.4byte	0x1234
 10737 10f9 02       		.uleb128 0x2
 10738 10fa 91       		.byte	0x91
 10739 10fb 40       		.sleb128 -64
 10740 10fc 1B       		.uleb128 0x1b
 10741 10fd 5A0E0000 		.4byte	.LASF207
 10742 1101 01       		.byte	0x1
 10743 1102 2906     		.2byte	0x629
 10744 1104 B1000000 		.4byte	0xb1
 10745 1108 02       		.uleb128 0x2
 10746 1109 91       		.byte	0x91
 10747 110a 64       		.sleb128 -28
 10748 110b 1B       		.uleb128 0x1b
 10749 110c 5F0B0000 		.4byte	.LASF208
 10750 1110 01       		.byte	0x1
 10751 1111 2A06     		.2byte	0x62a
 10752 1113 BD000000 		.4byte	0xbd
 10753 1117 02       		.uleb128 0x2
 10754 1118 91       		.byte	0x91
 10755 1119 54       		.sleb128 -44
 10756 111a 1B       		.uleb128 0x1b
 10757 111b 550D0000 		.4byte	.LASF209
 10758 111f 01       		.byte	0x1
 10759 1120 2B06     		.2byte	0x62b
 10760 1122 BD000000 		.4byte	0xbd
 10761 1126 02       		.uleb128 0x2
 10762 1127 91       		.byte	0x91
 10763 1128 60       		.sleb128 -32
 10764 1129 1B       		.uleb128 0x1b
 10765 112a EB030000 		.4byte	.LASF210
 10766 112e 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 237


 10767 112f 2C06     		.2byte	0x62c
 10768 1131 BD000000 		.4byte	0xbd
 10769 1135 02       		.uleb128 0x2
 10770 1136 91       		.byte	0x91
 10771 1137 4C       		.sleb128 -52
 10772 1138 1B       		.uleb128 0x1b
 10773 1139 300D0000 		.4byte	.LASF211
 10774 113d 01       		.byte	0x1
 10775 113e 2D06     		.2byte	0x62d
 10776 1140 BD000000 		.4byte	0xbd
 10777 1144 02       		.uleb128 0x2
 10778 1145 91       		.byte	0x91
 10779 1146 50       		.sleb128 -48
 10780 1147 1B       		.uleb128 0x1b
 10781 1148 530A0000 		.4byte	.LASF212
 10782 114c 01       		.byte	0x1
 10783 114d 2E06     		.2byte	0x62e
 10784 114f A5000000 		.4byte	0xa5
 10785 1153 02       		.uleb128 0x2
 10786 1154 91       		.byte	0x91
 10787 1155 5F       		.sleb128 -33
 10788 1156 1B       		.uleb128 0x1b
 10789 1157 F20A0000 		.4byte	.LASF213
 10790 115b 01       		.byte	0x1
 10791 115c 3006     		.2byte	0x630
 10792 115e 44120000 		.4byte	0x1244
 10793 1162 05       		.uleb128 0x5
 10794 1163 03       		.byte	0x3
 10795 1164 E4000000 		.4byte	last_value_encoder.10540
 10796 1168 1B       		.uleb128 0x1b
 10797 1169 43060000 		.4byte	.LASF214
 10798 116d 01       		.byte	0x1
 10799 116e 3106     		.2byte	0x631
 10800 1170 44120000 		.4byte	0x1244
 10801 1174 05       		.uleb128 0x5
 10802 1175 03       		.byte	0x3
 10803 1176 FC000000 		.4byte	comp_value_encoder.10541
 10804 117a 1B       		.uleb128 0x1b
 10805 117b F7020000 		.4byte	.LASF215
 10806 117f 01       		.byte	0x1
 10807 1180 3206     		.2byte	0x632
 10808 1182 5A120000 		.4byte	0x125a
 10809 1186 05       		.uleb128 0x5
 10810 1187 03       		.byte	0x3
 10811 1188 14010000 		.4byte	error.10542
 10812 118c 1B       		.uleb128 0x1b
 10813 118d 1A0D0000 		.4byte	.LASF216
 10814 1191 01       		.byte	0x1
 10815 1192 3406     		.2byte	0x634
 10816 1194 8A100000 		.4byte	0x108a
 10817 1198 05       		.uleb128 0x5
 10818 1199 03       		.byte	0x3
 10819 119a 04000000 		.4byte	only_first_time.10543
 10820 119e 1B       		.uleb128 0x1b
 10821 119f 85020000 		.4byte	.LASF217
 10822 11a3 01       		.byte	0x1
 10823 11a4 3506     		.2byte	0x635
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 238


 10824 11a6 8A100000 		.4byte	0x108a
 10825 11aa 05       		.uleb128 0x5
 10826 11ab 03       		.byte	0x3
 10827 11ac 6C010000 		.4byte	safe_startup_motor_activation.10544
 10828 11b0 1B       		.uleb128 0x1b
 10829 11b1 5F000000 		.4byte	.LASF218
 10830 11b5 01       		.byte	0x1
 10831 11b6 3606     		.2byte	0x636
 10832 11b8 8A100000 		.4byte	0x108a
 10833 11bc 05       		.uleb128 0x5
 10834 11bd 03       		.byte	0x3
 10835 11be 68010000 		.4byte	one_time_execute.10545
 10836 11c2 1B       		.uleb128 0x1b
 10837 11c3 1B090000 		.4byte	.LASF219
 10838 11c7 01       		.byte	0x1
 10839 11c8 3706     		.2byte	0x637
 10840 11ca 58030000 		.4byte	0x358
 10841 11ce 05       		.uleb128 0x5
 10842 11cf 03       		.byte	0x3
 10843 11d0 70010000 		.4byte	count_startup_motor.10546
 10844 11d4 1B       		.uleb128 0x1b
 10845 11d5 13030000 		.4byte	.LASF220
 10846 11d9 01       		.byte	0x1
 10847 11da 3806     		.2byte	0x638
 10848 11dc 8A100000 		.4byte	0x108a
 10849 11e0 05       		.uleb128 0x5
 10850 11e1 03       		.byte	0x3
 10851 11e2 64010000 		.4byte	pos_reconstruct.10547
 10852 11e6 1B       		.uleb128 0x1b
 10853 11e7 6C080000 		.4byte	.LASF221
 10854 11eb 01       		.byte	0x1
 10855 11ec 3A06     		.2byte	0x63a
 10856 11ee 44120000 		.4byte	0x1244
 10857 11f2 05       		.uleb128 0x5
 10858 11f3 03       		.byte	0x3
 10859 11f4 1C010000 		.4byte	v_value.10548
 10860 11f8 1B       		.uleb128 0x1b
 10861 11f9 C50F0000 		.4byte	.LASF222
 10862 11fd 01       		.byte	0x1
 10863 11fe 3B06     		.2byte	0x63b
 10864 1200 44120000 		.4byte	0x1244
 10865 1204 05       		.uleb128 0x5
 10866 1205 03       		.byte	0x3
 10867 1206 34010000 		.4byte	vv_value.10549
 10868 120a 1B       		.uleb128 0x1b
 10869 120b 4A010000 		.4byte	.LASF223
 10870 120f 01       		.byte	0x1
 10871 1210 3C06     		.2byte	0x63c
 10872 1212 44120000 		.4byte	0x1244
 10873 1216 05       		.uleb128 0x5
 10874 1217 03       		.byte	0x3
 10875 1218 4C010000 		.4byte	vvv_value.10550
 10876 121c 1C       		.uleb128 0x1c
 10877 121d 94000000 		.4byte	.LBB3
 10878 1221 6A000000 		.4byte	.LBE3-.LBB3
 10879 1225 1D       		.uleb128 0x1d
 10880 1226 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 239


 10881 1228 01       		.byte	0x1
 10882 1229 4C06     		.2byte	0x64c
 10883 122b 68000000 		.4byte	0x68
 10884 122f 02       		.uleb128 0x2
 10885 1230 91       		.byte	0x91
 10886 1231 58       		.sleb128 -40
 10887 1232 00       		.byte	0
 10888 1233 00       		.byte	0
 10889 1234 07       		.uleb128 0x7
 10890 1235 99000000 		.4byte	0x99
 10891 1239 44120000 		.4byte	0x1244
 10892 123d 08       		.uleb128 0x8
 10893 123e 0E010000 		.4byte	0x10e
 10894 1242 02       		.byte	0x2
 10895 1243 00       		.byte	0
 10896 1244 07       		.uleb128 0x7
 10897 1245 BD000000 		.4byte	0xbd
 10898 1249 5A120000 		.4byte	0x125a
 10899 124d 08       		.uleb128 0x8
 10900 124e 0E010000 		.4byte	0x10e
 10901 1252 01       		.byte	0x1
 10902 1253 08       		.uleb128 0x8
 10903 1254 0E010000 		.4byte	0x10e
 10904 1258 02       		.byte	0x2
 10905 1259 00       		.byte	0
 10906 125a 07       		.uleb128 0x7
 10907 125b 81000000 		.4byte	0x81
 10908 125f 70120000 		.4byte	0x1270
 10909 1263 08       		.uleb128 0x8
 10910 1264 0E010000 		.4byte	0x10e
 10911 1268 01       		.byte	0x1
 10912 1269 08       		.uleb128 0x8
 10913 126a 0E010000 		.4byte	0x10e
 10914 126e 02       		.byte	0x2
 10915 126f 00       		.byte	0
 10916 1270 1F       		.uleb128 0x1f
 10917 1271 2A0C0000 		.4byte	.LASF224
 10918 1275 01       		.byte	0x1
 10919 1276 F406     		.2byte	0x6f4
 10920 1278 00000000 		.4byte	.LFB71
 10921 127c 740D0000 		.4byte	.LFE71-.LFB71
 10922 1280 01       		.uleb128 0x1
 10923 1281 9C       		.byte	0x9c
 10924 1282 02130000 		.4byte	0x1302
 10925 1286 1B       		.uleb128 0x1b
 10926 1287 D30B0000 		.4byte	.LASF225
 10927 128b 01       		.byte	0x1
 10928 128c 0807     		.2byte	0x708
 10929 128e BD000000 		.4byte	0xbd
 10930 1292 02       		.uleb128 0x2
 10931 1293 91       		.byte	0x91
 10932 1294 64       		.sleb128 -28
 10933 1295 1B       		.uleb128 0x1b
 10934 1296 FE0C0000 		.4byte	.LASF226
 10935 129a 01       		.byte	0x1
 10936 129b 0A07     		.2byte	0x70a
 10937 129d 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 240


 10938 12a1 05       		.uleb128 0x5
 10939 12a2 03       		.byte	0x3
 10940 12a3 80010000 		.4byte	emg_counter_1.10567
 10941 12a7 1B       		.uleb128 0x1b
 10942 12a8 0C0D0000 		.4byte	.LASF227
 10943 12ac 01       		.byte	0x1
 10944 12ad 0B07     		.2byte	0x70b
 10945 12af 8D000000 		.4byte	0x8d
 10946 12b3 05       		.uleb128 0x5
 10947 12b4 03       		.byte	0x3
 10948 12b5 82010000 		.4byte	emg_counter_2.10568
 10949 12b9 1B       		.uleb128 0x1b
 10950 12ba 1F020000 		.4byte	.LASF228
 10951 12be 01       		.byte	0x1
 10952 12bf 0C07     		.2byte	0x70c
 10953 12c1 81000000 		.4byte	0x81
 10954 12c5 05       		.uleb128 0x5
 10955 12c6 03       		.byte	0x3
 10956 12c7 06000000 		.4byte	first_tension_valid.10569
 10957 12cb 1B       		.uleb128 0x1b
 10958 12cc 4C090000 		.4byte	.LASF229
 10959 12d0 01       		.byte	0x1
 10960 12d1 0E07     		.2byte	0x70e
 10961 12d3 8D000000 		.4byte	0x8d
 10962 12d7 05       		.uleb128 0x5
 10963 12d8 03       		.byte	0x3
 10964 12d9 78010000 		.4byte	count.10570
 10965 12dd 1B       		.uleb128 0x1b
 10966 12de 3A010000 		.4byte	.LASF230
 10967 12e2 01       		.byte	0x1
 10968 12e3 0F07     		.2byte	0x70f
 10969 12e5 99000000 		.4byte	0x99
 10970 12e9 05       		.uleb128 0x5
 10971 12ea 03       		.byte	0x3
 10972 12eb 7C010000 		.4byte	v_count.10571
 10973 12ef 1D       		.uleb128 0x1d
 10974 12f0 69647800 		.ascii	"idx\000"
 10975 12f4 01       		.byte	0x1
 10976 12f5 1007     		.2byte	0x710
 10977 12f7 81000000 		.4byte	0x81
 10978 12fb 05       		.uleb128 0x5
 10979 12fc 03       		.byte	0x3
 10980 12fd 7A010000 		.4byte	idx.10572
 10981 1301 00       		.byte	0
 10982 1302 22       		.uleb128 0x22
 10983 1303 F50B0000 		.4byte	.LASF231
 10984 1307 01       		.byte	0x1
 10985 1308 BC08     		.2byte	0x8bc
 10986 130a 00000000 		.4byte	.LFB72
 10987 130e F4000000 		.4byte	.LFE72-.LFB72
 10988 1312 01       		.uleb128 0x1
 10989 1313 9C       		.byte	0x9c
 10990 1314 30130000 		.4byte	0x1330
 10991 1318 1C       		.uleb128 0x1c
 10992 1319 06000000 		.4byte	.LBB4
 10993 131d D0000000 		.4byte	.LBE4-.LBB4
 10994 1321 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 241


 10995 1322 6900     		.ascii	"i\000"
 10996 1324 01       		.byte	0x1
 10997 1325 BE08     		.2byte	0x8be
 10998 1327 81000000 		.4byte	0x81
 10999 132b 02       		.uleb128 0x2
 11000 132c 91       		.byte	0x91
 11001 132d 77       		.sleb128 -9
 11002 132e 00       		.byte	0
 11003 132f 00       		.byte	0
 11004 1330 23       		.uleb128 0x23
 11005 1331 23030000 		.4byte	.LASF232
 11006 1335 01       		.byte	0x1
 11007 1336 D808     		.2byte	0x8d8
 11008 1338 00000000 		.4byte	.LFB73
 11009 133c 78000000 		.4byte	.LFE73-.LFB73
 11010 1340 01       		.uleb128 0x1
 11011 1341 9C       		.byte	0x9c
 11012 1342 83130000 		.4byte	0x1383
 11013 1346 21       		.uleb128 0x21
 11014 1347 5C0A0000 		.4byte	.LASF233
 11015 134b 01       		.byte	0x1
 11016 134c D808     		.2byte	0x8d8
 11017 134e 81000000 		.4byte	0x81
 11018 1352 02       		.uleb128 0x2
 11019 1353 91       		.byte	0x91
 11020 1354 6F       		.sleb128 -17
 11021 1355 1B       		.uleb128 0x1b
 11022 1356 81060000 		.4byte	.LASF205
 11023 135a 01       		.byte	0x1
 11024 135b DA08     		.2byte	0x8da
 11025 135d 81000000 		.4byte	0x81
 11026 1361 02       		.uleb128 0x2
 11027 1362 91       		.byte	0x91
 11028 1363 73       		.sleb128 -13
 11029 1364 1B       		.uleb128 0x1b
 11030 1365 DC0A0000 		.4byte	.LASF234
 11031 1369 01       		.byte	0x1
 11032 136a DB08     		.2byte	0x8db
 11033 136c 8D000000 		.4byte	0x8d
 11034 1370 02       		.uleb128 0x2
 11035 1371 91       		.byte	0x91
 11036 1372 76       		.sleb128 -10
 11037 1373 1B       		.uleb128 0x1b
 11038 1374 36070000 		.4byte	.LASF235
 11039 1378 01       		.byte	0x1
 11040 1379 DC08     		.2byte	0x8dc
 11041 137b 8D000000 		.4byte	0x8d
 11042 137f 02       		.uleb128 0x2
 11043 1380 91       		.byte	0x91
 11044 1381 74       		.sleb128 -12
 11045 1382 00       		.byte	0
 11046 1383 1F       		.uleb128 0x1f
 11047 1384 A9070000 		.4byte	.LASF236
 11048 1388 01       		.byte	0x1
 11049 1389 EC08     		.2byte	0x8ec
 11050 138b 00000000 		.4byte	.LFB74
 11051 138f 08040000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 242


 11052 1393 01       		.uleb128 0x1
 11053 1394 9C       		.byte	0x9c
 11054 1395 AF140000 		.4byte	0x14af
 11055 1399 1B       		.uleb128 0x1b
 11056 139a 09000000 		.4byte	.LASF237
 11057 139e 01       		.byte	0x1
 11058 139f ED08     		.2byte	0x8ed
 11059 13a1 81000000 		.4byte	0x81
 11060 13a5 05       		.uleb128 0x5
 11061 13a6 03       		.byte	0x3
 11062 13a7 84010000 		.4byte	pos_cycle_status.10628
 11063 13ab 1B       		.uleb128 0x1b
 11064 13ac 5C0C0000 		.4byte	.LASF238
 11065 13b0 01       		.byte	0x1
 11066 13b1 EE08     		.2byte	0x8ee
 11067 13b3 8A100000 		.4byte	0x108a
 11068 13b7 05       		.uleb128 0x5
 11069 13b8 03       		.byte	0x3
 11070 13b9 90010000 		.4byte	emg_cycle_status.10629
 11071 13bd 1B       		.uleb128 0x1b
 11072 13be 480E0000 		.4byte	.LASF239
 11073 13c2 01       		.byte	0x1
 11074 13c3 EF08     		.2byte	0x8ef
 11075 13c5 81000000 		.4byte	0x81
 11076 13c9 05       		.uleb128 0x5
 11077 13ca 03       		.byte	0x3
 11078 13cb 92010000 		.4byte	rest_cycle_status.10630
 11079 13cf 1B       		.uleb128 0x1b
 11080 13d0 6E020000 		.4byte	.LASF240
 11081 13d4 01       		.byte	0x1
 11082 13d5 F008     		.2byte	0x8f0
 11083 13d7 BD000000 		.4byte	0xbd
 11084 13db 05       		.uleb128 0x5
 11085 13dc 03       		.byte	0x3
 11086 13dd 08000000 		.4byte	bin_threshold.10631
 11087 13e1 1B       		.uleb128 0x1b
 11088 13e2 A0010000 		.4byte	.LASF241
 11089 13e6 01       		.byte	0x1
 11090 13e7 F108     		.2byte	0x8f1
 11091 13e9 BD000000 		.4byte	0xbd
 11092 13ed 05       		.uleb128 0x5
 11093 13ee 03       		.byte	0x3
 11094 13ef 88010000 		.4byte	thr_pos.10632
 11095 13f3 1B       		.uleb128 0x1b
 11096 13f4 75090000 		.4byte	.LASF242
 11097 13f8 01       		.byte	0x1
 11098 13f9 F108     		.2byte	0x8f1
 11099 13fb BD000000 		.4byte	0xbd
 11100 13ff 05       		.uleb128 0x5
 11101 1400 03       		.byte	0x3
 11102 1401 8C010000 		.4byte	max_pos.10633
 11103 1405 1D       		.uleb128 0x1d
 11104 1406 6900     		.ascii	"i\000"
 11105 1408 01       		.byte	0x1
 11106 1409 F208     		.2byte	0x8f2
 11107 140b 81000000 		.4byte	0x81
 11108 140f 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 243


 11109 1410 91       		.byte	0x91
 11110 1411 77       		.sleb128 -9
 11111 1412 1B       		.uleb128 0x1b
 11112 1413 FB040000 		.4byte	.LASF243
 11113 1417 01       		.byte	0x1
 11114 1418 F208     		.2byte	0x8f2
 11115 141a 81000000 		.4byte	0x81
 11116 141e 02       		.uleb128 0x2
 11117 141f 91       		.byte	0x91
 11118 1420 63       		.sleb128 -29
 11119 1421 1B       		.uleb128 0x1b
 11120 1422 C7000000 		.4byte	.LASF244
 11121 1426 01       		.byte	0x1
 11122 1427 F208     		.2byte	0x8f2
 11123 1429 81000000 		.4byte	0x81
 11124 142d 02       		.uleb128 0x2
 11125 142e 91       		.byte	0x91
 11126 142f 62       		.sleb128 -30
 11127 1430 1B       		.uleb128 0x1b
 11128 1431 C70B0000 		.4byte	.LASF245
 11129 1435 01       		.byte	0x1
 11130 1436 F208     		.2byte	0x8f2
 11131 1438 81000000 		.4byte	0x81
 11132 143c 02       		.uleb128 0x2
 11133 143d 91       		.byte	0x91
 11134 143e 61       		.sleb128 -31
 11135 143f 1B       		.uleb128 0x1b
 11136 1440 CD0B0000 		.4byte	.LASF246
 11137 1444 01       		.byte	0x1
 11138 1445 F208     		.2byte	0x8f2
 11139 1447 81000000 		.4byte	0x81
 11140 144b 02       		.uleb128 0x2
 11141 144c 91       		.byte	0x91
 11142 144d 60       		.sleb128 -32
 11143 144e 1B       		.uleb128 0x1b
 11144 144f 090C0000 		.4byte	.LASF247
 11145 1453 01       		.byte	0x1
 11146 1454 F308     		.2byte	0x8f3
 11147 1456 BD000000 		.4byte	0xbd
 11148 145a 02       		.uleb128 0x2
 11149 145b 91       		.byte	0x91
 11150 145c 6C       		.sleb128 -20
 11151 145d 1B       		.uleb128 0x1b
 11152 145e 02040000 		.4byte	.LASF248
 11153 1462 01       		.byte	0x1
 11154 1463 F308     		.2byte	0x8f3
 11155 1465 BD000000 		.4byte	0xbd
 11156 1469 02       		.uleb128 0x2
 11157 146a 91       		.byte	0x91
 11158 146b 68       		.sleb128 -24
 11159 146c 1B       		.uleb128 0x1b
 11160 146d 3B0D0000 		.4byte	.LASF249
 11161 1471 01       		.byte	0x1
 11162 1472 F308     		.2byte	0x8f3
 11163 1474 BD000000 		.4byte	0xbd
 11164 1478 02       		.uleb128 0x2
 11165 1479 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 244


 11166 147a 70       		.sleb128 -16
 11167 147b 1B       		.uleb128 0x1b
 11168 147c 9D030000 		.4byte	.LASF250
 11169 1480 01       		.byte	0x1
 11170 1481 F408     		.2byte	0x8f4
 11171 1483 BD000000 		.4byte	0xbd
 11172 1487 02       		.uleb128 0x2
 11173 1488 91       		.byte	0x91
 11174 1489 64       		.sleb128 -28
 11175 148a 1B       		.uleb128 0x1b
 11176 148b 27060000 		.4byte	.LASF251
 11177 148f 01       		.byte	0x1
 11178 1490 F508     		.2byte	0x8f5
 11179 1492 99000000 		.4byte	0x99
 11180 1496 05       		.uleb128 0x5
 11181 1497 03       		.byte	0x3
 11182 1498 94010000 		.4byte	timer_value_s.10643
 11183 149c 1B       		.uleb128 0x1b
 11184 149d CB050000 		.4byte	.LASF252
 11185 14a1 01       		.byte	0x1
 11186 14a2 F508     		.2byte	0x8f5
 11187 14a4 99000000 		.4byte	0x99
 11188 14a8 05       		.uleb128 0x5
 11189 14a9 03       		.byte	0x3
 11190 14aa 98010000 		.4byte	timer_value_e.10644
 11191 14ae 00       		.byte	0
 11192 14af 1F       		.uleb128 0x1f
 11193 14b0 020A0000 		.4byte	.LASF253
 11194 14b4 01       		.byte	0x1
 11195 14b5 6109     		.2byte	0x961
 11196 14b7 00000000 		.4byte	.LFB75
 11197 14bb 08010000 		.4byte	.LFE75-.LFB75
 11198 14bf 01       		.uleb128 0x1
 11199 14c0 9C       		.byte	0x9c
 11200 14c1 35150000 		.4byte	0x1535
 11201 14c5 1B       		.uleb128 0x1b
 11202 14c6 200E0000 		.4byte	.LASF254
 11203 14ca 01       		.byte	0x1
 11204 14cb 6309     		.2byte	0x963
 11205 14cd EA000000 		.4byte	0xea
 11206 14d1 02       		.uleb128 0x2
 11207 14d2 91       		.byte	0x91
 11208 14d3 64       		.sleb128 -28
 11209 14d4 1B       		.uleb128 0x1b
 11210 14d5 EA0B0000 		.4byte	.LASF255
 11211 14d9 01       		.byte	0x1
 11212 14da 6409     		.2byte	0x964
 11213 14dc 81000000 		.4byte	0x81
 11214 14e0 05       		.uleb128 0x5
 11215 14e1 03       		.byte	0x3
 11216 14e2 A0010000 		.4byte	row_number.10666
 11217 14e6 1B       		.uleb128 0x1b
 11218 14e7 D5030000 		.4byte	.LASF256
 11219 14eb 01       		.byte	0x1
 11220 14ec 6509     		.2byte	0x965
 11221 14ee 81000000 		.4byte	0x81
 11222 14f2 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 245


 11223 14f3 91       		.byte	0x91
 11224 14f4 77       		.sleb128 -9
 11225 14f5 1B       		.uleb128 0x1b
 11226 14f6 AC0C0000 		.4byte	.LASF257
 11227 14fa 01       		.byte	0x1
 11228 14fb 6609     		.2byte	0x966
 11229 14fd 35150000 		.4byte	0x1535
 11230 1501 02       		.uleb128 0x2
 11231 1502 91       		.byte	0x91
 11232 1503 70       		.sleb128 -16
 11233 1504 1B       		.uleb128 0x1b
 11234 1505 CF000000 		.4byte	.LASF258
 11235 1509 01       		.byte	0x1
 11236 150a 6709     		.2byte	0x967
 11237 150c 35150000 		.4byte	0x1535
 11238 1510 02       		.uleb128 0x2
 11239 1511 91       		.byte	0x91
 11240 1512 6C       		.sleb128 -20
 11241 1513 1B       		.uleb128 0x1b
 11242 1514 380F0000 		.4byte	.LASF259
 11243 1518 01       		.byte	0x1
 11244 1519 6809     		.2byte	0x968
 11245 151b 81000000 		.4byte	0x81
 11246 151f 02       		.uleb128 0x2
 11247 1520 91       		.byte	0x91
 11248 1521 6B       		.sleb128 -21
 11249 1522 1B       		.uleb128 0x1b
 11250 1523 5B090000 		.4byte	.LASF260
 11251 1527 01       		.byte	0x1
 11252 1528 6909     		.2byte	0x969
 11253 152a 35150000 		.4byte	0x1535
 11254 152e 05       		.uleb128 0x5
 11255 152f 03       		.byte	0x3
 11256 1530 9C010000 		.4byte	m_addr.10671
 11257 1534 00       		.byte	0
 11258 1535 0C       		.uleb128 0xc
 11259 1536 04       		.byte	0x4
 11260 1537 81000000 		.4byte	0x81
 11261 153b 07       		.uleb128 0x7
 11262 153c 4B150000 		.4byte	0x154b
 11263 1540 4B150000 		.4byte	0x154b
 11264 1544 08       		.uleb128 0x8
 11265 1545 0E010000 		.4byte	0x10e
 11266 1549 1C       		.byte	0x1c
 11267 154a 00       		.byte	0
 11268 154b 24       		.uleb128 0x24
 11269 154c 81000000 		.4byte	0x81
 11270 1550 19       		.uleb128 0x19
 11271 1551 B70C0000 		.4byte	.LASF261
 11272 1555 01       		.byte	0x1
 11273 1556 40       		.byte	0x40
 11274 1557 61150000 		.4byte	0x1561
 11275 155b 05       		.uleb128 0x5
 11276 155c 03       		.byte	0x3
 11277 155d 00000000 		.4byte	pwm_preload_values
 11278 1561 24       		.uleb128 0x24
 11279 1562 3B150000 		.4byte	0x153b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 246


 11280 1566 25       		.uleb128 0x25
 11281 1567 B70D0000 		.4byte	.LASF262
 11282 156b 08       		.byte	0x8
 11283 156c 1207     		.2byte	0x712
 11284 156e 72150000 		.4byte	0x1572
 11285 1572 06       		.uleb128 0x6
 11286 1573 76000000 		.4byte	0x76
 11287 1577 07       		.uleb128 0x7
 11288 1578 9F010000 		.4byte	0x19f
 11289 157c 87150000 		.4byte	0x1587
 11290 1580 08       		.uleb128 0x8
 11291 1581 0E010000 		.4byte	0x10e
 11292 1585 01       		.byte	0x1
 11293 1586 00       		.byte	0
 11294 1587 25       		.uleb128 0x25
 11295 1588 67060000 		.4byte	.LASF263
 11296 158c 07       		.byte	0x7
 11297 158d F401     		.2byte	0x1f4
 11298 158f 77150000 		.4byte	0x1577
 11299 1593 25       		.uleb128 0x25
 11300 1594 F9030000 		.4byte	.LASF264
 11301 1598 07       		.byte	0x7
 11302 1599 F401     		.2byte	0x1f4
 11303 159b 77150000 		.4byte	0x1577
 11304 159f 25       		.uleb128 0x25
 11305 15a0 9E0A0000 		.4byte	.LASF265
 11306 15a4 07       		.byte	0x7
 11307 15a5 F401     		.2byte	0x1f4
 11308 15a7 77150000 		.4byte	0x1577
 11309 15ab 07       		.uleb128 0x7
 11310 15ac DC010000 		.4byte	0x1dc
 11311 15b0 BB150000 		.4byte	0x15bb
 11312 15b4 08       		.uleb128 0x8
 11313 15b5 0E010000 		.4byte	0x10e
 11314 15b9 01       		.byte	0x1
 11315 15ba 00       		.byte	0
 11316 15bb 25       		.uleb128 0x25
 11317 15bc 20060000 		.4byte	.LASF266
 11318 15c0 07       		.byte	0x7
 11319 15c1 F501     		.2byte	0x1f5
 11320 15c3 AB150000 		.4byte	0x15ab
 11321 15c7 25       		.uleb128 0x25
 11322 15c8 2E0F0000 		.4byte	.LASF267
 11323 15cc 07       		.byte	0x7
 11324 15cd F501     		.2byte	0x1f5
 11325 15cf AB150000 		.4byte	0x15ab
 11326 15d3 25       		.uleb128 0x25
 11327 15d4 78000000 		.4byte	.LASF268
 11328 15d8 07       		.byte	0x7
 11329 15d9 F601     		.2byte	0x1f6
 11330 15db 5D020000 		.4byte	0x25d
 11331 15df 25       		.uleb128 0x25
 11332 15e0 A20F0000 		.4byte	.LASF269
 11333 15e4 07       		.byte	0x7
 11334 15e5 F601     		.2byte	0x1f6
 11335 15e7 5D020000 		.4byte	0x25d
 11336 15eb 25       		.uleb128 0x25
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 247


 11337 15ec 5A000000 		.4byte	.LASF270
 11338 15f0 07       		.byte	0x7
 11339 15f1 F801     		.2byte	0x1f8
 11340 15f3 A2020000 		.4byte	0x2a2
 11341 15f7 25       		.uleb128 0x25
 11342 15f8 F80C0000 		.4byte	.LASF271
 11343 15fc 07       		.byte	0x7
 11344 15fd F901     		.2byte	0x1f9
 11345 15ff D2080000 		.4byte	0x8d2
 11346 1603 25       		.uleb128 0x25
 11347 1604 62090000 		.4byte	.LASF272
 11348 1608 07       		.byte	0x7
 11349 1609 F901     		.2byte	0x1f9
 11350 160b D2080000 		.4byte	0x8d2
 11351 160f 25       		.uleb128 0x25
 11352 1610 74080000 		.4byte	.LASF273
 11353 1614 07       		.byte	0x7
 11354 1615 FA01     		.2byte	0x1fa
 11355 1617 900A0000 		.4byte	0xa90
 11356 161b 07       		.uleb128 0x7
 11357 161c 680A0000 		.4byte	0xa68
 11358 1620 2B160000 		.4byte	0x162b
 11359 1624 08       		.uleb128 0x8
 11360 1625 0E010000 		.4byte	0x10e
 11361 1629 01       		.byte	0x1
 11362 162a 00       		.byte	0
 11363 162b 25       		.uleb128 0x25
 11364 162c 8A0A0000 		.4byte	.LASF274
 11365 1630 07       		.byte	0x7
 11366 1631 FB01     		.2byte	0x1fb
 11367 1633 1B160000 		.4byte	0x161b
 11368 1637 25       		.uleb128 0x25
 11369 1638 CF080000 		.4byte	.LASF275
 11370 163c 07       		.byte	0x7
 11371 163d FB01     		.2byte	0x1fb
 11372 163f 1B160000 		.4byte	0x161b
 11373 1643 25       		.uleb128 0x25
 11374 1644 700A0000 		.4byte	.LASF276
 11375 1648 07       		.byte	0x7
 11376 1649 FB01     		.2byte	0x1fb
 11377 164b 1B160000 		.4byte	0x161b
 11378 164f 07       		.uleb128 0x7
 11379 1650 680A0000 		.4byte	0xa68
 11380 1654 5F160000 		.4byte	0x165f
 11381 1658 08       		.uleb128 0x8
 11382 1659 0E010000 		.4byte	0x10e
 11383 165d 02       		.byte	0x2
 11384 165e 00       		.byte	0
 11385 165f 25       		.uleb128 0x25
 11386 1660 C4040000 		.4byte	.LASF277
 11387 1664 07       		.byte	0x7
 11388 1665 FC01     		.2byte	0x1fc
 11389 1667 4F160000 		.4byte	0x164f
 11390 166b 07       		.uleb128 0x7
 11391 166c 680A0000 		.4byte	0xa68
 11392 1670 7B160000 		.4byte	0x167b
 11393 1674 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 248


 11394 1675 0E010000 		.4byte	0x10e
 11395 1679 07       		.byte	0x7
 11396 167a 00       		.byte	0
 11397 167b 25       		.uleb128 0x25
 11398 167c 6A010000 		.4byte	.LASF278
 11399 1680 07       		.byte	0x7
 11400 1681 FD01     		.2byte	0x1fd
 11401 1683 6B160000 		.4byte	0x166b
 11402 1687 25       		.uleb128 0x25
 11403 1688 33020000 		.4byte	.LASF279
 11404 168c 07       		.byte	0x7
 11405 168d FF01     		.2byte	0x1ff
 11406 168f 8D000000 		.4byte	0x8d
 11407 1693 25       		.uleb128 0x25
 11408 1694 54080000 		.4byte	.LASF280
 11409 1698 07       		.byte	0x7
 11410 1699 0002     		.2byte	0x200
 11411 169b 8D000000 		.4byte	0x8d
 11412 169f 25       		.uleb128 0x25
 11413 16a0 1A0B0000 		.4byte	.LASF281
 11414 16a4 07       		.byte	0x7
 11415 16a5 0102     		.2byte	0x201
 11416 16a7 D5000000 		.4byte	0xd5
 11417 16ab 25       		.uleb128 0x25
 11418 16ac 9B0B0000 		.4byte	.LASF282
 11419 16b0 07       		.byte	0x7
 11420 16b1 0302     		.2byte	0x203
 11421 16b3 82020000 		.4byte	0x282
 11422 16b7 25       		.uleb128 0x25
 11423 16b8 120E0000 		.4byte	.LASF283
 11424 16bc 07       		.byte	0x7
 11425 16bd 0402     		.2byte	0x204
 11426 16bf 8A100000 		.4byte	0x108a
 11427 16c3 25       		.uleb128 0x25
 11428 16c4 690D0000 		.4byte	.LASF284
 11429 16c8 07       		.byte	0x7
 11430 16c9 0502     		.2byte	0x205
 11431 16cb 8A100000 		.4byte	0x108a
 11432 16cf 25       		.uleb128 0x25
 11433 16d0 79050000 		.4byte	.LASF285
 11434 16d4 07       		.byte	0x7
 11435 16d5 0602     		.2byte	0x206
 11436 16d7 82020000 		.4byte	0x282
 11437 16db 25       		.uleb128 0x25
 11438 16dc C40D0000 		.4byte	.LASF286
 11439 16e0 07       		.byte	0x7
 11440 16e1 0702     		.2byte	0x207
 11441 16e3 82020000 		.4byte	0x282
 11442 16e7 25       		.uleb128 0x25
 11443 16e8 FE050000 		.4byte	.LASF287
 11444 16ec 07       		.byte	0x7
 11445 16ed 0902     		.2byte	0x209
 11446 16ef 3C0B0000 		.4byte	0xb3c
 11447 16f3 25       		.uleb128 0x25
 11448 16f4 73040000 		.4byte	.LASF288
 11449 16f8 07       		.byte	0x7
 11450 16f9 0A02     		.2byte	0x20a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 249


 11451 16fb 040B0000 		.4byte	0xb04
 11452 16ff 25       		.uleb128 0x25
 11453 1700 79030000 		.4byte	.LASF289
 11454 1704 07       		.byte	0x7
 11455 1705 0B02     		.2byte	0x20b
 11456 1707 040B0000 		.4byte	0xb04
 11457 170b 25       		.uleb128 0x25
 11458 170c 58070000 		.4byte	.LASF290
 11459 1710 07       		.byte	0x7
 11460 1711 0E02     		.2byte	0x20e
 11461 1713 81000000 		.4byte	0x81
 11462 1717 25       		.uleb128 0x25
 11463 1718 9D000000 		.4byte	.LASF291
 11464 171c 07       		.byte	0x7
 11465 171d 0F02     		.2byte	0x20f
 11466 171f 81000000 		.4byte	0x81
 11467 1723 25       		.uleb128 0x25
 11468 1724 8E030000 		.4byte	.LASF292
 11469 1728 07       		.byte	0x7
 11470 1729 1002     		.2byte	0x210
 11471 172b 81000000 		.4byte	0x81
 11472 172f 25       		.uleb128 0x25
 11473 1730 B1000000 		.4byte	.LASF293
 11474 1734 07       		.byte	0x7
 11475 1735 1102     		.2byte	0x211
 11476 1737 81000000 		.4byte	0x81
 11477 173b 25       		.uleb128 0x25
 11478 173c 620F0000 		.4byte	.LASF294
 11479 1740 07       		.byte	0x7
 11480 1741 1302     		.2byte	0x213
 11481 1743 81000000 		.4byte	0x81
 11482 1747 25       		.uleb128 0x25
 11483 1748 910A0000 		.4byte	.LASF295
 11484 174c 07       		.byte	0x7
 11485 174d 1402     		.2byte	0x214
 11486 174f 81000000 		.4byte	0x81
 11487 1753 25       		.uleb128 0x25
 11488 1754 DF030000 		.4byte	.LASF296
 11489 1758 07       		.byte	0x7
 11490 1759 1502     		.2byte	0x215
 11491 175b 81000000 		.4byte	0x81
 11492 175f 25       		.uleb128 0x25
 11493 1760 42070000 		.4byte	.LASF297
 11494 1764 07       		.byte	0x7
 11495 1765 1602     		.2byte	0x216
 11496 1767 81000000 		.4byte	0x81
 11497 176b 25       		.uleb128 0x25
 11498 176c B4080000 		.4byte	.LASF298
 11499 1770 07       		.byte	0x7
 11500 1771 1702     		.2byte	0x217
 11501 1773 81000000 		.4byte	0x81
 11502 1777 07       		.uleb128 0x7
 11503 1778 B1000000 		.4byte	0xb1
 11504 177c 87170000 		.4byte	0x1787
 11505 1780 08       		.uleb128 0x8
 11506 1781 0E010000 		.4byte	0x10e
 11507 1785 0B       		.byte	0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 250


 11508 1786 00       		.byte	0
 11509 1787 25       		.uleb128 0x25
 11510 1788 86030000 		.4byte	.LASF299
 11511 178c 07       		.byte	0x7
 11512 178d 1B02     		.2byte	0x21b
 11513 178f 77170000 		.4byte	0x1777
 11514 1793 25       		.uleb128 0x25
 11515 1794 F80E0000 		.4byte	.LASF300
 11516 1798 07       		.byte	0x7
 11517 1799 1C02     		.2byte	0x21c
 11518 179b 81000000 		.4byte	0x81
 11519 179f 25       		.uleb128 0x25
 11520 17a0 A5040000 		.4byte	.LASF301
 11521 17a4 07       		.byte	0x7
 11522 17a5 1F02     		.2byte	0x21f
 11523 17a7 A5000000 		.4byte	0xa5
 11524 17ab 07       		.uleb128 0x7
 11525 17ac 99000000 		.4byte	0x99
 11526 17b0 BB170000 		.4byte	0x17bb
 11527 17b4 08       		.uleb128 0x8
 11528 17b5 0E010000 		.4byte	0x10e
 11529 17b9 04       		.byte	0x4
 11530 17ba 00       		.byte	0
 11531 17bb 25       		.uleb128 0x25
 11532 17bc 56060000 		.4byte	.LASF302
 11533 17c0 07       		.byte	0x7
 11534 17c1 2202     		.2byte	0x222
 11535 17c3 AB170000 		.4byte	0x17ab
 11536 17c7 25       		.uleb128 0x25
 11537 17c8 3A0C0000 		.4byte	.LASF303
 11538 17cc 07       		.byte	0x7
 11539 17cd 2302     		.2byte	0x223
 11540 17cf 8A100000 		.4byte	0x108a
 11541 17d3 07       		.uleb128 0x7
 11542 17d4 8D000000 		.4byte	0x8d
 11543 17d8 E9170000 		.4byte	0x17e9
 11544 17dc 08       		.uleb128 0x8
 11545 17dd 0E010000 		.4byte	0x10e
 11546 17e1 01       		.byte	0x1
 11547 17e2 08       		.uleb128 0x8
 11548 17e3 0E010000 		.4byte	0x10e
 11549 17e7 04       		.byte	0x4
 11550 17e8 00       		.byte	0
 11551 17e9 25       		.uleb128 0x25
 11552 17ea 320E0000 		.4byte	.LASF304
 11553 17ee 07       		.byte	0x7
 11554 17ef 2402     		.2byte	0x224
 11555 17f1 D3170000 		.4byte	0x17d3
 11556 17f5 07       		.uleb128 0x7
 11557 17f6 81000000 		.4byte	0x81
 11558 17fa 0B180000 		.4byte	0x180b
 11559 17fe 08       		.uleb128 0x8
 11560 17ff 0E010000 		.4byte	0x10e
 11561 1803 01       		.byte	0x1
 11562 1804 08       		.uleb128 0x8
 11563 1805 0E010000 		.4byte	0x10e
 11564 1809 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 251


 11565 180a 00       		.byte	0
 11566 180b 25       		.uleb128 0x25
 11567 180c 35060000 		.4byte	.LASF305
 11568 1810 07       		.byte	0x7
 11569 1811 2502     		.2byte	0x225
 11570 1813 F5170000 		.4byte	0x17f5
 11571 1817 25       		.uleb128 0x25
 11572 1818 7D090000 		.4byte	.LASF306
 11573 181c 07       		.byte	0x7
 11574 181d 2802     		.2byte	0x228
 11575 181f BD000000 		.4byte	0xbd
 11576 1823 25       		.uleb128 0x25
 11577 1824 5C050000 		.4byte	.LASF307
 11578 1828 07       		.byte	0x7
 11579 1829 2B02     		.2byte	0x22b
 11580 182b 99010000 		.4byte	0x199
 11581 182f 07       		.uleb128 0x7
 11582 1830 EC090000 		.4byte	0x9ec
 11583 1834 3F180000 		.4byte	0x183f
 11584 1838 08       		.uleb128 0x8
 11585 1839 0E010000 		.4byte	0x10e
 11586 183d 04       		.byte	0x4
 11587 183e 00       		.byte	0
 11588 183f 25       		.uleb128 0x25
 11589 1840 AF060000 		.4byte	.LASF308
 11590 1844 07       		.byte	0x7
 11591 1845 3402     		.2byte	0x234
 11592 1847 2F180000 		.4byte	0x182f
 11593 184b 25       		.uleb128 0x25
 11594 184c AB050000 		.4byte	.LASF309
 11595 1850 07       		.byte	0x7
 11596 1851 3402     		.2byte	0x234
 11597 1853 2F180000 		.4byte	0x182f
 11598 1857 25       		.uleb128 0x25
 11599 1858 0D0F0000 		.4byte	.LASF310
 11600 185c 07       		.byte	0x7
 11601 185d 3D02     		.2byte	0x23d
 11602 185f 81000000 		.4byte	0x81
 11603 1863 00       		.byte	0
 11604              		.section	.debug_abbrev,"",%progbits
 11605              	.Ldebug_abbrev0:
 11606 0000 01       		.uleb128 0x1
 11607 0001 11       		.uleb128 0x11
 11608 0002 01       		.byte	0x1
 11609 0003 25       		.uleb128 0x25
 11610 0004 0E       		.uleb128 0xe
 11611 0005 13       		.uleb128 0x13
 11612 0006 0B       		.uleb128 0xb
 11613 0007 03       		.uleb128 0x3
 11614 0008 0E       		.uleb128 0xe
 11615 0009 1B       		.uleb128 0x1b
 11616 000a 0E       		.uleb128 0xe
 11617 000b 55       		.uleb128 0x55
 11618 000c 17       		.uleb128 0x17
 11619 000d 11       		.uleb128 0x11
 11620 000e 01       		.uleb128 0x1
 11621 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 252


 11622 0010 17       		.uleb128 0x17
 11623 0011 00       		.byte	0
 11624 0012 00       		.byte	0
 11625 0013 02       		.uleb128 0x2
 11626 0014 24       		.uleb128 0x24
 11627 0015 00       		.byte	0
 11628 0016 0B       		.uleb128 0xb
 11629 0017 0B       		.uleb128 0xb
 11630 0018 3E       		.uleb128 0x3e
 11631 0019 0B       		.uleb128 0xb
 11632 001a 03       		.uleb128 0x3
 11633 001b 0E       		.uleb128 0xe
 11634 001c 00       		.byte	0
 11635 001d 00       		.byte	0
 11636 001e 03       		.uleb128 0x3
 11637 001f 16       		.uleb128 0x16
 11638 0020 00       		.byte	0
 11639 0021 03       		.uleb128 0x3
 11640 0022 0E       		.uleb128 0xe
 11641 0023 3A       		.uleb128 0x3a
 11642 0024 0B       		.uleb128 0xb
 11643 0025 3B       		.uleb128 0x3b
 11644 0026 0B       		.uleb128 0xb
 11645 0027 49       		.uleb128 0x49
 11646 0028 13       		.uleb128 0x13
 11647 0029 00       		.byte	0
 11648 002a 00       		.byte	0
 11649 002b 04       		.uleb128 0x4
 11650 002c 24       		.uleb128 0x24
 11651 002d 00       		.byte	0
 11652 002e 0B       		.uleb128 0xb
 11653 002f 0B       		.uleb128 0xb
 11654 0030 3E       		.uleb128 0x3e
 11655 0031 0B       		.uleb128 0xb
 11656 0032 03       		.uleb128 0x3
 11657 0033 08       		.uleb128 0x8
 11658 0034 00       		.byte	0
 11659 0035 00       		.byte	0
 11660 0036 05       		.uleb128 0x5
 11661 0037 16       		.uleb128 0x16
 11662 0038 00       		.byte	0
 11663 0039 03       		.uleb128 0x3
 11664 003a 0E       		.uleb128 0xe
 11665 003b 3A       		.uleb128 0x3a
 11666 003c 0B       		.uleb128 0xb
 11667 003d 3B       		.uleb128 0x3b
 11668 003e 05       		.uleb128 0x5
 11669 003f 49       		.uleb128 0x49
 11670 0040 13       		.uleb128 0x13
 11671 0041 00       		.byte	0
 11672 0042 00       		.byte	0
 11673 0043 06       		.uleb128 0x6
 11674 0044 35       		.uleb128 0x35
 11675 0045 00       		.byte	0
 11676 0046 49       		.uleb128 0x49
 11677 0047 13       		.uleb128 0x13
 11678 0048 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 253


 11679 0049 00       		.byte	0
 11680 004a 07       		.uleb128 0x7
 11681 004b 01       		.uleb128 0x1
 11682 004c 01       		.byte	0x1
 11683 004d 49       		.uleb128 0x49
 11684 004e 13       		.uleb128 0x13
 11685 004f 01       		.uleb128 0x1
 11686 0050 13       		.uleb128 0x13
 11687 0051 00       		.byte	0
 11688 0052 00       		.byte	0
 11689 0053 08       		.uleb128 0x8
 11690 0054 21       		.uleb128 0x21
 11691 0055 00       		.byte	0
 11692 0056 49       		.uleb128 0x49
 11693 0057 13       		.uleb128 0x13
 11694 0058 2F       		.uleb128 0x2f
 11695 0059 0B       		.uleb128 0xb
 11696 005a 00       		.byte	0
 11697 005b 00       		.byte	0
 11698 005c 09       		.uleb128 0x9
 11699 005d 04       		.uleb128 0x4
 11700 005e 01       		.byte	0x1
 11701 005f 03       		.uleb128 0x3
 11702 0060 0E       		.uleb128 0xe
 11703 0061 0B       		.uleb128 0xb
 11704 0062 0B       		.uleb128 0xb
 11705 0063 49       		.uleb128 0x49
 11706 0064 13       		.uleb128 0x13
 11707 0065 3A       		.uleb128 0x3a
 11708 0066 0B       		.uleb128 0xb
 11709 0067 3B       		.uleb128 0x3b
 11710 0068 0B       		.uleb128 0xb
 11711 0069 01       		.uleb128 0x1
 11712 006a 13       		.uleb128 0x13
 11713 006b 00       		.byte	0
 11714 006c 00       		.byte	0
 11715 006d 0A       		.uleb128 0xa
 11716 006e 28       		.uleb128 0x28
 11717 006f 00       		.byte	0
 11718 0070 03       		.uleb128 0x3
 11719 0071 0E       		.uleb128 0xe
 11720 0072 1C       		.uleb128 0x1c
 11721 0073 0B       		.uleb128 0xb
 11722 0074 00       		.byte	0
 11723 0075 00       		.byte	0
 11724 0076 0B       		.uleb128 0xb
 11725 0077 13       		.uleb128 0x13
 11726 0078 00       		.byte	0
 11727 0079 03       		.uleb128 0x3
 11728 007a 0E       		.uleb128 0xe
 11729 007b 3C       		.uleb128 0x3c
 11730 007c 19       		.uleb128 0x19
 11731 007d 00       		.byte	0
 11732 007e 00       		.byte	0
 11733 007f 0C       		.uleb128 0xc
 11734 0080 0F       		.uleb128 0xf
 11735 0081 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 254


 11736 0082 0B       		.uleb128 0xb
 11737 0083 0B       		.uleb128 0xb
 11738 0084 49       		.uleb128 0x49
 11739 0085 13       		.uleb128 0x13
 11740 0086 00       		.byte	0
 11741 0087 00       		.byte	0
 11742 0088 0D       		.uleb128 0xd
 11743 0089 13       		.uleb128 0x13
 11744 008a 01       		.byte	0x1
 11745 008b 03       		.uleb128 0x3
 11746 008c 0E       		.uleb128 0xe
 11747 008d 0B       		.uleb128 0xb
 11748 008e 0B       		.uleb128 0xb
 11749 008f 3A       		.uleb128 0x3a
 11750 0090 0B       		.uleb128 0xb
 11751 0091 3B       		.uleb128 0x3b
 11752 0092 0B       		.uleb128 0xb
 11753 0093 01       		.uleb128 0x1
 11754 0094 13       		.uleb128 0x13
 11755 0095 00       		.byte	0
 11756 0096 00       		.byte	0
 11757 0097 0E       		.uleb128 0xe
 11758 0098 0D       		.uleb128 0xd
 11759 0099 00       		.byte	0
 11760 009a 03       		.uleb128 0x3
 11761 009b 08       		.uleb128 0x8
 11762 009c 3A       		.uleb128 0x3a
 11763 009d 0B       		.uleb128 0xb
 11764 009e 3B       		.uleb128 0x3b
 11765 009f 0B       		.uleb128 0xb
 11766 00a0 49       		.uleb128 0x49
 11767 00a1 13       		.uleb128 0x13
 11768 00a2 38       		.uleb128 0x38
 11769 00a3 0B       		.uleb128 0xb
 11770 00a4 00       		.byte	0
 11771 00a5 00       		.byte	0
 11772 00a6 0F       		.uleb128 0xf
 11773 00a7 0D       		.uleb128 0xd
 11774 00a8 00       		.byte	0
 11775 00a9 03       		.uleb128 0x3
 11776 00aa 0E       		.uleb128 0xe
 11777 00ab 3A       		.uleb128 0x3a
 11778 00ac 0B       		.uleb128 0xb
 11779 00ad 3B       		.uleb128 0x3b
 11780 00ae 0B       		.uleb128 0xb
 11781 00af 49       		.uleb128 0x49
 11782 00b0 13       		.uleb128 0x13
 11783 00b1 38       		.uleb128 0x38
 11784 00b2 0B       		.uleb128 0xb
 11785 00b3 00       		.byte	0
 11786 00b4 00       		.byte	0
 11787 00b5 10       		.uleb128 0x10
 11788 00b6 13       		.uleb128 0x13
 11789 00b7 01       		.byte	0x1
 11790 00b8 03       		.uleb128 0x3
 11791 00b9 0E       		.uleb128 0xe
 11792 00ba 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 255


 11793 00bb 0B       		.uleb128 0xb
 11794 00bc 3A       		.uleb128 0x3a
 11795 00bd 0B       		.uleb128 0xb
 11796 00be 3B       		.uleb128 0x3b
 11797 00bf 05       		.uleb128 0x5
 11798 00c0 01       		.uleb128 0x1
 11799 00c1 13       		.uleb128 0x13
 11800 00c2 00       		.byte	0
 11801 00c3 00       		.byte	0
 11802 00c4 11       		.uleb128 0x11
 11803 00c5 0D       		.uleb128 0xd
 11804 00c6 00       		.byte	0
 11805 00c7 03       		.uleb128 0x3
 11806 00c8 0E       		.uleb128 0xe
 11807 00c9 3A       		.uleb128 0x3a
 11808 00ca 0B       		.uleb128 0xb
 11809 00cb 3B       		.uleb128 0x3b
 11810 00cc 05       		.uleb128 0x5
 11811 00cd 49       		.uleb128 0x49
 11812 00ce 13       		.uleb128 0x13
 11813 00cf 38       		.uleb128 0x38
 11814 00d0 0B       		.uleb128 0xb
 11815 00d1 00       		.byte	0
 11816 00d2 00       		.byte	0
 11817 00d3 12       		.uleb128 0x12
 11818 00d4 0D       		.uleb128 0xd
 11819 00d5 00       		.byte	0
 11820 00d6 03       		.uleb128 0x3
 11821 00d7 08       		.uleb128 0x8
 11822 00d8 3A       		.uleb128 0x3a
 11823 00d9 0B       		.uleb128 0xb
 11824 00da 3B       		.uleb128 0x3b
 11825 00db 05       		.uleb128 0x5
 11826 00dc 49       		.uleb128 0x49
 11827 00dd 13       		.uleb128 0x13
 11828 00de 38       		.uleb128 0x38
 11829 00df 0B       		.uleb128 0xb
 11830 00e0 00       		.byte	0
 11831 00e1 00       		.byte	0
 11832 00e2 13       		.uleb128 0x13
 11833 00e3 13       		.uleb128 0x13
 11834 00e4 01       		.byte	0x1
 11835 00e5 03       		.uleb128 0x3
 11836 00e6 0E       		.uleb128 0xe
 11837 00e7 0B       		.uleb128 0xb
 11838 00e8 05       		.uleb128 0x5
 11839 00e9 3A       		.uleb128 0x3a
 11840 00ea 0B       		.uleb128 0xb
 11841 00eb 3B       		.uleb128 0x3b
 11842 00ec 05       		.uleb128 0x5
 11843 00ed 01       		.uleb128 0x1
 11844 00ee 13       		.uleb128 0x13
 11845 00ef 00       		.byte	0
 11846 00f0 00       		.byte	0
 11847 00f1 14       		.uleb128 0x14
 11848 00f2 0D       		.uleb128 0xd
 11849 00f3 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 256


 11850 00f4 03       		.uleb128 0x3
 11851 00f5 08       		.uleb128 0x8
 11852 00f6 3A       		.uleb128 0x3a
 11853 00f7 0B       		.uleb128 0xb
 11854 00f8 3B       		.uleb128 0x3b
 11855 00f9 05       		.uleb128 0x5
 11856 00fa 49       		.uleb128 0x49
 11857 00fb 13       		.uleb128 0x13
 11858 00fc 38       		.uleb128 0x38
 11859 00fd 05       		.uleb128 0x5
 11860 00fe 00       		.byte	0
 11861 00ff 00       		.byte	0
 11862 0100 15       		.uleb128 0x15
 11863 0101 0D       		.uleb128 0xd
 11864 0102 00       		.byte	0
 11865 0103 03       		.uleb128 0x3
 11866 0104 0E       		.uleb128 0xe
 11867 0105 3A       		.uleb128 0x3a
 11868 0106 0B       		.uleb128 0xb
 11869 0107 3B       		.uleb128 0x3b
 11870 0108 05       		.uleb128 0x5
 11871 0109 49       		.uleb128 0x49
 11872 010a 13       		.uleb128 0x13
 11873 010b 38       		.uleb128 0x38
 11874 010c 05       		.uleb128 0x5
 11875 010d 00       		.byte	0
 11876 010e 00       		.byte	0
 11877 010f 16       		.uleb128 0x16
 11878 0110 04       		.uleb128 0x4
 11879 0111 01       		.byte	0x1
 11880 0112 0B       		.uleb128 0xb
 11881 0113 0B       		.uleb128 0xb
 11882 0114 49       		.uleb128 0x49
 11883 0115 13       		.uleb128 0x13
 11884 0116 3A       		.uleb128 0x3a
 11885 0117 0B       		.uleb128 0xb
 11886 0118 3B       		.uleb128 0x3b
 11887 0119 05       		.uleb128 0x5
 11888 011a 01       		.uleb128 0x1
 11889 011b 13       		.uleb128 0x13
 11890 011c 00       		.byte	0
 11891 011d 00       		.byte	0
 11892 011e 17       		.uleb128 0x17
 11893 011f 2E       		.uleb128 0x2e
 11894 0120 00       		.byte	0
 11895 0121 3F       		.uleb128 0x3f
 11896 0122 19       		.uleb128 0x19
 11897 0123 03       		.uleb128 0x3
 11898 0124 0E       		.uleb128 0xe
 11899 0125 3A       		.uleb128 0x3a
 11900 0126 0B       		.uleb128 0xb
 11901 0127 3B       		.uleb128 0x3b
 11902 0128 0B       		.uleb128 0xb
 11903 0129 27       		.uleb128 0x27
 11904 012a 19       		.uleb128 0x19
 11905 012b 11       		.uleb128 0x11
 11906 012c 01       		.uleb128 0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 257


 11907 012d 12       		.uleb128 0x12
 11908 012e 06       		.uleb128 0x6
 11909 012f 40       		.uleb128 0x40
 11910 0130 18       		.uleb128 0x18
 11911 0131 9742     		.uleb128 0x2117
 11912 0133 19       		.uleb128 0x19
 11913 0134 00       		.byte	0
 11914 0135 00       		.byte	0
 11915 0136 18       		.uleb128 0x18
 11916 0137 2E       		.uleb128 0x2e
 11917 0138 01       		.byte	0x1
 11918 0139 3F       		.uleb128 0x3f
 11919 013a 19       		.uleb128 0x19
 11920 013b 03       		.uleb128 0x3
 11921 013c 0E       		.uleb128 0xe
 11922 013d 3A       		.uleb128 0x3a
 11923 013e 0B       		.uleb128 0xb
 11924 013f 3B       		.uleb128 0x3b
 11925 0140 0B       		.uleb128 0xb
 11926 0141 11       		.uleb128 0x11
 11927 0142 01       		.uleb128 0x1
 11928 0143 12       		.uleb128 0x12
 11929 0144 06       		.uleb128 0x6
 11930 0145 40       		.uleb128 0x40
 11931 0146 18       		.uleb128 0x18
 11932 0147 9642     		.uleb128 0x2116
 11933 0149 19       		.uleb128 0x19
 11934 014a 01       		.uleb128 0x1
 11935 014b 13       		.uleb128 0x13
 11936 014c 00       		.byte	0
 11937 014d 00       		.byte	0
 11938 014e 19       		.uleb128 0x19
 11939 014f 34       		.uleb128 0x34
 11940 0150 00       		.byte	0
 11941 0151 03       		.uleb128 0x3
 11942 0152 0E       		.uleb128 0xe
 11943 0153 3A       		.uleb128 0x3a
 11944 0154 0B       		.uleb128 0xb
 11945 0155 3B       		.uleb128 0x3b
 11946 0156 0B       		.uleb128 0xb
 11947 0157 49       		.uleb128 0x49
 11948 0158 13       		.uleb128 0x13
 11949 0159 02       		.uleb128 0x2
 11950 015a 18       		.uleb128 0x18
 11951 015b 00       		.byte	0
 11952 015c 00       		.byte	0
 11953 015d 1A       		.uleb128 0x1a
 11954 015e 2E       		.uleb128 0x2e
 11955 015f 01       		.byte	0x1
 11956 0160 3F       		.uleb128 0x3f
 11957 0161 19       		.uleb128 0x19
 11958 0162 03       		.uleb128 0x3
 11959 0163 0E       		.uleb128 0xe
 11960 0164 3A       		.uleb128 0x3a
 11961 0165 0B       		.uleb128 0xb
 11962 0166 3B       		.uleb128 0x3b
 11963 0167 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 258


 11964 0168 27       		.uleb128 0x27
 11965 0169 19       		.uleb128 0x19
 11966 016a 11       		.uleb128 0x11
 11967 016b 01       		.uleb128 0x1
 11968 016c 12       		.uleb128 0x12
 11969 016d 06       		.uleb128 0x6
 11970 016e 40       		.uleb128 0x40
 11971 016f 18       		.uleb128 0x18
 11972 0170 9642     		.uleb128 0x2116
 11973 0172 19       		.uleb128 0x19
 11974 0173 01       		.uleb128 0x1
 11975 0174 13       		.uleb128 0x13
 11976 0175 00       		.byte	0
 11977 0176 00       		.byte	0
 11978 0177 1B       		.uleb128 0x1b
 11979 0178 34       		.uleb128 0x34
 11980 0179 00       		.byte	0
 11981 017a 03       		.uleb128 0x3
 11982 017b 0E       		.uleb128 0xe
 11983 017c 3A       		.uleb128 0x3a
 11984 017d 0B       		.uleb128 0xb
 11985 017e 3B       		.uleb128 0x3b
 11986 017f 05       		.uleb128 0x5
 11987 0180 49       		.uleb128 0x49
 11988 0181 13       		.uleb128 0x13
 11989 0182 02       		.uleb128 0x2
 11990 0183 18       		.uleb128 0x18
 11991 0184 00       		.byte	0
 11992 0185 00       		.byte	0
 11993 0186 1C       		.uleb128 0x1c
 11994 0187 0B       		.uleb128 0xb
 11995 0188 01       		.byte	0x1
 11996 0189 11       		.uleb128 0x11
 11997 018a 01       		.uleb128 0x1
 11998 018b 12       		.uleb128 0x12
 11999 018c 06       		.uleb128 0x6
 12000 018d 00       		.byte	0
 12001 018e 00       		.byte	0
 12002 018f 1D       		.uleb128 0x1d
 12003 0190 34       		.uleb128 0x34
 12004 0191 00       		.byte	0
 12005 0192 03       		.uleb128 0x3
 12006 0193 08       		.uleb128 0x8
 12007 0194 3A       		.uleb128 0x3a
 12008 0195 0B       		.uleb128 0xb
 12009 0196 3B       		.uleb128 0x3b
 12010 0197 05       		.uleb128 0x5
 12011 0198 49       		.uleb128 0x49
 12012 0199 13       		.uleb128 0x13
 12013 019a 02       		.uleb128 0x2
 12014 019b 18       		.uleb128 0x18
 12015 019c 00       		.byte	0
 12016 019d 00       		.byte	0
 12017 019e 1E       		.uleb128 0x1e
 12018 019f 21       		.uleb128 0x21
 12019 01a0 00       		.byte	0
 12020 01a1 49       		.uleb128 0x49
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 259


 12021 01a2 13       		.uleb128 0x13
 12022 01a3 2F       		.uleb128 0x2f
 12023 01a4 05       		.uleb128 0x5
 12024 01a5 00       		.byte	0
 12025 01a6 00       		.byte	0
 12026 01a7 1F       		.uleb128 0x1f
 12027 01a8 2E       		.uleb128 0x2e
 12028 01a9 01       		.byte	0x1
 12029 01aa 3F       		.uleb128 0x3f
 12030 01ab 19       		.uleb128 0x19
 12031 01ac 03       		.uleb128 0x3
 12032 01ad 0E       		.uleb128 0xe
 12033 01ae 3A       		.uleb128 0x3a
 12034 01af 0B       		.uleb128 0xb
 12035 01b0 3B       		.uleb128 0x3b
 12036 01b1 05       		.uleb128 0x5
 12037 01b2 11       		.uleb128 0x11
 12038 01b3 01       		.uleb128 0x1
 12039 01b4 12       		.uleb128 0x12
 12040 01b5 06       		.uleb128 0x6
 12041 01b6 40       		.uleb128 0x40
 12042 01b7 18       		.uleb128 0x18
 12043 01b8 9642     		.uleb128 0x2116
 12044 01ba 19       		.uleb128 0x19
 12045 01bb 01       		.uleb128 0x1
 12046 01bc 13       		.uleb128 0x13
 12047 01bd 00       		.byte	0
 12048 01be 00       		.byte	0
 12049 01bf 20       		.uleb128 0x20
 12050 01c0 05       		.uleb128 0x5
 12051 01c1 00       		.byte	0
 12052 01c2 03       		.uleb128 0x3
 12053 01c3 08       		.uleb128 0x8
 12054 01c4 3A       		.uleb128 0x3a
 12055 01c5 0B       		.uleb128 0xb
 12056 01c6 3B       		.uleb128 0x3b
 12057 01c7 05       		.uleb128 0x5
 12058 01c8 49       		.uleb128 0x49
 12059 01c9 13       		.uleb128 0x13
 12060 01ca 02       		.uleb128 0x2
 12061 01cb 18       		.uleb128 0x18
 12062 01cc 00       		.byte	0
 12063 01cd 00       		.byte	0
 12064 01ce 21       		.uleb128 0x21
 12065 01cf 05       		.uleb128 0x5
 12066 01d0 00       		.byte	0
 12067 01d1 03       		.uleb128 0x3
 12068 01d2 0E       		.uleb128 0xe
 12069 01d3 3A       		.uleb128 0x3a
 12070 01d4 0B       		.uleb128 0xb
 12071 01d5 3B       		.uleb128 0x3b
 12072 01d6 05       		.uleb128 0x5
 12073 01d7 49       		.uleb128 0x49
 12074 01d8 13       		.uleb128 0x13
 12075 01d9 02       		.uleb128 0x2
 12076 01da 18       		.uleb128 0x18
 12077 01db 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 260


 12078 01dc 00       		.byte	0
 12079 01dd 22       		.uleb128 0x22
 12080 01de 2E       		.uleb128 0x2e
 12081 01df 01       		.byte	0x1
 12082 01e0 3F       		.uleb128 0x3f
 12083 01e1 19       		.uleb128 0x19
 12084 01e2 03       		.uleb128 0x3
 12085 01e3 0E       		.uleb128 0xe
 12086 01e4 3A       		.uleb128 0x3a
 12087 01e5 0B       		.uleb128 0xb
 12088 01e6 3B       		.uleb128 0x3b
 12089 01e7 05       		.uleb128 0x5
 12090 01e8 11       		.uleb128 0x11
 12091 01e9 01       		.uleb128 0x1
 12092 01ea 12       		.uleb128 0x12
 12093 01eb 06       		.uleb128 0x6
 12094 01ec 40       		.uleb128 0x40
 12095 01ed 18       		.uleb128 0x18
 12096 01ee 9742     		.uleb128 0x2117
 12097 01f0 19       		.uleb128 0x19
 12098 01f1 01       		.uleb128 0x1
 12099 01f2 13       		.uleb128 0x13
 12100 01f3 00       		.byte	0
 12101 01f4 00       		.byte	0
 12102 01f5 23       		.uleb128 0x23
 12103 01f6 2E       		.uleb128 0x2e
 12104 01f7 01       		.byte	0x1
 12105 01f8 3F       		.uleb128 0x3f
 12106 01f9 19       		.uleb128 0x19
 12107 01fa 03       		.uleb128 0x3
 12108 01fb 0E       		.uleb128 0xe
 12109 01fc 3A       		.uleb128 0x3a
 12110 01fd 0B       		.uleb128 0xb
 12111 01fe 3B       		.uleb128 0x3b
 12112 01ff 05       		.uleb128 0x5
 12113 0200 27       		.uleb128 0x27
 12114 0201 19       		.uleb128 0x19
 12115 0202 11       		.uleb128 0x11
 12116 0203 01       		.uleb128 0x1
 12117 0204 12       		.uleb128 0x12
 12118 0205 06       		.uleb128 0x6
 12119 0206 40       		.uleb128 0x40
 12120 0207 18       		.uleb128 0x18
 12121 0208 9742     		.uleb128 0x2117
 12122 020a 19       		.uleb128 0x19
 12123 020b 01       		.uleb128 0x1
 12124 020c 13       		.uleb128 0x13
 12125 020d 00       		.byte	0
 12126 020e 00       		.byte	0
 12127 020f 24       		.uleb128 0x24
 12128 0210 26       		.uleb128 0x26
 12129 0211 00       		.byte	0
 12130 0212 49       		.uleb128 0x49
 12131 0213 13       		.uleb128 0x13
 12132 0214 00       		.byte	0
 12133 0215 00       		.byte	0
 12134 0216 25       		.uleb128 0x25
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 261


 12135 0217 34       		.uleb128 0x34
 12136 0218 00       		.byte	0
 12137 0219 03       		.uleb128 0x3
 12138 021a 0E       		.uleb128 0xe
 12139 021b 3A       		.uleb128 0x3a
 12140 021c 0B       		.uleb128 0xb
 12141 021d 3B       		.uleb128 0x3b
 12142 021e 05       		.uleb128 0x5
 12143 021f 49       		.uleb128 0x49
 12144 0220 13       		.uleb128 0x13
 12145 0221 3F       		.uleb128 0x3f
 12146 0222 19       		.uleb128 0x19
 12147 0223 3C       		.uleb128 0x3c
 12148 0224 19       		.uleb128 0x19
 12149 0225 00       		.byte	0
 12150 0226 00       		.byte	0
 12151 0227 00       		.byte	0
 12152              		.section	.debug_aranges,"",%progbits
 12153 0000 74000000 		.4byte	0x74
 12154 0004 0200     		.2byte	0x2
 12155 0006 00000000 		.4byte	.Ldebug_info0
 12156 000a 04       		.byte	0x4
 12157 000b 00       		.byte	0
 12158 000c 0000     		.2byte	0
 12159 000e 0000     		.2byte	0
 12160 0010 00000000 		.4byte	.LFB64
 12161 0014 18000000 		.4byte	.LFE64-.LFB64
 12162 0018 00000000 		.4byte	.LFB65
 12163 001c 20000000 		.4byte	.LFE65-.LFB65
 12164 0020 00000000 		.4byte	.LFB66
 12165 0024 F4010000 		.4byte	.LFE66-.LFB66
 12166 0028 00000000 		.4byte	.LFB67
 12167 002c DC050000 		.4byte	.LFE67-.LFB67
 12168 0030 00000000 		.4byte	.LFB68
 12169 0034 000B0000 		.4byte	.LFE68-.LFB68
 12170 0038 00000000 		.4byte	.LFB69
 12171 003c D40C0000 		.4byte	.LFE69-.LFB69
 12172 0040 00000000 		.4byte	.LFB70
 12173 0044 10080000 		.4byte	.LFE70-.LFB70
 12174 0048 00000000 		.4byte	.LFB71
 12175 004c 740D0000 		.4byte	.LFE71-.LFB71
 12176 0050 00000000 		.4byte	.LFB72
 12177 0054 F4000000 		.4byte	.LFE72-.LFB72
 12178 0058 00000000 		.4byte	.LFB73
 12179 005c 78000000 		.4byte	.LFE73-.LFB73
 12180 0060 00000000 		.4byte	.LFB74
 12181 0064 08040000 		.4byte	.LFE74-.LFB74
 12182 0068 00000000 		.4byte	.LFB75
 12183 006c 08010000 		.4byte	.LFE75-.LFB75
 12184 0070 00000000 		.4byte	0
 12185 0074 00000000 		.4byte	0
 12186              		.section	.debug_ranges,"",%progbits
 12187              	.Ldebug_ranges0:
 12188 0000 00000000 		.4byte	.LFB64
 12189 0004 18000000 		.4byte	.LFE64
 12190 0008 00000000 		.4byte	.LFB65
 12191 000c 20000000 		.4byte	.LFE65
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 262


 12192 0010 00000000 		.4byte	.LFB66
 12193 0014 F4010000 		.4byte	.LFE66
 12194 0018 00000000 		.4byte	.LFB67
 12195 001c DC050000 		.4byte	.LFE67
 12196 0020 00000000 		.4byte	.LFB68
 12197 0024 000B0000 		.4byte	.LFE68
 12198 0028 00000000 		.4byte	.LFB69
 12199 002c D40C0000 		.4byte	.LFE69
 12200 0030 00000000 		.4byte	.LFB70
 12201 0034 10080000 		.4byte	.LFE70
 12202 0038 00000000 		.4byte	.LFB71
 12203 003c 740D0000 		.4byte	.LFE71
 12204 0040 00000000 		.4byte	.LFB72
 12205 0044 F4000000 		.4byte	.LFE72
 12206 0048 00000000 		.4byte	.LFB73
 12207 004c 78000000 		.4byte	.LFE73
 12208 0050 00000000 		.4byte	.LFB74
 12209 0054 08040000 		.4byte	.LFE74
 12210 0058 00000000 		.4byte	.LFB75
 12211 005c 08010000 		.4byte	.LFE75
 12212 0060 00000000 		.4byte	0
 12213 0064 00000000 		.4byte	0
 12214              		.section	.debug_line,"",%progbits
 12215              	.Ldebug_line0:
 12216 0000 740A0000 		.section	.debug_str,"MS",%progbits,1
 12216      0200AC01 
 12216      00000201 
 12216      FB0E0D00 
 12216      01010101 
 12217              	.LASF24:
 12218 0000 73697A65 		.ascii	"sizetype\000"
 12218      74797065 
 12218      00
 12219              	.LASF237:
 12220 0009 706F735F 		.ascii	"pos_cycle_status\000"
 12220      6379636C 
 12220      655F7374 
 12220      61747573 
 12220      00
 12221              	.LASF30:
 12222 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 12222      545F4D4F 
 12222      44455F45 
 12222      4D475F46 
 12222      4346535F 
 12223              	.LASF115:
 12224 0032 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 12224      5F414443 
 12224      5F73656E 
 12224      736F7273 
 12224      5F706F72 
 12225              	.LASF136:
 12226 004d 75736572 		.ascii	"user\000"
 12226      00
 12227              	.LASF10:
 12228 0052 696E7433 		.ascii	"int32_t\000"
 12228      325F7400 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 263


 12229              	.LASF270:
 12230 005a 675F7278 		.ascii	"g_rx\000"
 12230      00
 12231              	.LASF218:
 12232 005f 6F6E655F 		.ascii	"one_time_execute\000"
 12232      74696D65 
 12232      5F657865 
 12232      63757465 
 12232      00
 12233              	.LASF47:
 12234 0070 73745F64 		.ascii	"st_data\000"
 12234      61746100 
 12235              	.LASF268:
 12236 0078 675F656D 		.ascii	"g_emg_meas\000"
 12236      675F6D65 
 12236      617300
 12237              	.LASF13:
 12238 0083 75696E74 		.ascii	"uint32\000"
 12238      333200
 12239              	.LASF203:
 12240 008a 6E5F6C69 		.ascii	"n_line\000"
 12240      6E6500
 12241              	.LASF83:
 12242 0091 706F735F 		.ascii	"pos_lim_inf\000"
 12242      6C696D5F 
 12242      696E6600 
 12243              	.LASF291:
 12244 009d 74656E73 		.ascii	"tension_valid\000"
 12244      696F6E5F 
 12244      76616C69 
 12244      6400
 12245              	.LASF167:
 12246 00ab 73746174 		.ascii	"state\000"
 12246      6500
 12247              	.LASF293:
 12248 00b1 6379636C 		.ascii	"cycles_interrupt_flag\000"
 12248      65735F69 
 12248      6E746572 
 12248      72757074 
 12248      5F666C61 
 12249              	.LASF244:
 12250 00c7 62696E5F 		.ascii	"bin_max\000"
 12250      6D617800 
 12251              	.LASF258:
 12252 00cf 61646472 		.ascii	"addr_start_c\000"
 12252      5F737461 
 12252      72745F63 
 12252      00
 12253              	.LASF29:
 12254 00dc 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 12254      545F4D4F 
 12254      44455F45 
 12254      4D475F46 
 12254      43465300 
 12255              	.LASF87:
 12256 00f0 63757272 		.ascii	"curr_lookup\000"
 12256      5F6C6F6F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 264


 12256      6B757000 
 12257              	.LASF182:
 12258 00fc 70776D5F 		.ascii	"pwm_input\000"
 12258      696E7075 
 12258      7400
 12259              	.LASF55:
 12260 0106 72657374 		.ascii	"rest_counter\000"
 12260      5F636F75 
 12260      6E746572 
 12260      00
 12261              	.LASF125:
 12262 0113 73745F4D 		.ascii	"st_MASTER_spec\000"
 12262      41535445 
 12262      525F7370 
 12262      656300
 12263              	.LASF28:
 12264 0122 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 12264      545F4D4F 
 12264      44455F45 
 12264      4D475F49 
 12264      4E544547 
 12265              	.LASF230:
 12266 013a 765F636F 		.ascii	"v_count\000"
 12266      756E7400 
 12267              	.LASF172:
 12268 0142 72785F64 		.ascii	"rx_data\000"
 12268      61746100 
 12269              	.LASF223:
 12270 014a 7676765F 		.ascii	"vvv_value\000"
 12270      76616C75 
 12270      6500
 12271              	.LASF14:
 12272 0154 696E7438 		.ascii	"int8\000"
 12272      00
 12273              	.LASF177:
 12274 0159 696E666F 		.ascii	"info_\000"
 12274      5F00
 12275              	.LASF158:
 12276 015f 656D675F 		.ascii	"emg_status\000"
 12276      73746174 
 12276      757300
 12277              	.LASF278:
 12278 016a 66696C74 		.ascii	"filt_emg\000"
 12278      5F656D67 
 12278      00
 12279              	.LASF102:
 12280 0173 73745F65 		.ascii	"st_emg\000"
 12280      6D6700
 12281              	.LASF53:
 12282 017a 706F7369 		.ascii	"position_hist\000"
 12282      74696F6E 
 12282      5F686973 
 12282      7400
 12283              	.LASF159:
 12284 0188 50524550 		.ascii	"PREPARE_DATA\000"
 12284      4152455F 
 12284      44415441 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 265


 12284      00
 12285              	.LASF143:
 12286 0195 74656D70 		.ascii	"temp_value\000"
 12286      5F76616C 
 12286      756500
 12287              	.LASF241:
 12288 01a0 7468725F 		.ascii	"thr_pos\000"
 12288      706F7300 
 12289              	.LASF50:
 12290 01a8 72656164 		.ascii	"ready\000"
 12290      7900
 12291              	.LASF99:
 12292 01ae 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 12292      6964785F 
 12292      7573655F 
 12292      666F725F 
 12292      636F6E74 
 12293              	.LASF146:
 12294 01c6 6761696E 		.ascii	"gain\000"
 12294      00
 12295              	.LASF59:
 12296 01cb 73745F64 		.ascii	"st_device\000"
 12296      65766963 
 12296      6500
 12297              	.LASF27:
 12298 01d5 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 12298      545F4D4F 
 12298      44455F45 
 12298      4D475F50 
 12298      524F504F 
 12299              	.LASF64:
 12300 01f1 7573655F 		.ascii	"use_2nd_motor_flag\000"
 12300      326E645F 
 12300      6D6F746F 
 12300      725F666C 
 12300      616700
 12301              	.LASF155:
 12302 0204 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 12302      414E445F 
 12302      4D45414E 
 12302      00
 12303              	.LASF109:
 12304 0211 72656164 		.ascii	"read_imu_flag\000"
 12304      5F696D75 
 12304      5F666C61 
 12304      6700
 12305              	.LASF228:
 12306 021f 66697273 		.ascii	"first_tension_valid\000"
 12306      745F7465 
 12306      6E73696F 
 12306      6E5F7661 
 12306      6C696400 
 12307              	.LASF279:
 12308 0233 74696D65 		.ascii	"timer_value\000"
 12308      725F7661 
 12308      6C756500 
 12309              	.LASF4:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 266


 12310 023f 6C6F6E67 		.ascii	"long int\000"
 12310      20696E74 
 12310      00
 12311              	.LASF134:
 12312 0248 756E7573 		.ascii	"unused_bytes1\000"
 12312      65645F62 
 12312      79746573 
 12312      3100
 12313              	.LASF190:
 12314 0256 53485F45 		.ascii	"SH_ENC_L\000"
 12314      4E435F4C 
 12314      00
 12315              	.LASF63:
 12316 025f 72657365 		.ascii	"reset_counters\000"
 12316      745F636F 
 12316      756E7465 
 12316      727300
 12317              	.LASF240:
 12318 026e 62696E5F 		.ascii	"bin_threshold\000"
 12318      74687265 
 12318      73686F6C 
 12318      6400
 12319              	.LASF119:
 12320 027c 75736572 		.ascii	"user_emg\000"
 12320      5F656D67 
 12320      00
 12321              	.LASF217:
 12322 0285 73616665 		.ascii	"safe_startup_motor_activation\000"
 12322      5F737461 
 12322      72747570 
 12322      5F6D6F74 
 12322      6F725F61 
 12323              	.LASF68:
 12324 02a3 756E7573 		.ascii	"unused_bytes\000"
 12324      65645F62 
 12324      79746573 
 12324      00
 12325              	.LASF139:
 12326 02b0 61636365 		.ascii	"accel_value\000"
 12326      6C5F7661 
 12326      6C756500 
 12327              	.LASF206:
 12328 02bc 6175785F 		.ascii	"aux_encoder\000"
 12328      656E636F 
 12328      64657200 
 12329              	.LASF51:
 12330 02c8 73745F63 		.ascii	"st_counters\000"
 12330      6F756E74 
 12330      65727300 
 12331              	.LASF189:
 12332 02d4 53485F4D 		.ascii	"SH_MOT\000"
 12332      4F5400
 12333              	.LASF17:
 12334 02db 666C6F61 		.ascii	"float32\000"
 12334      74333200 
 12335              	.LASF202:
 12336 02e3 656E636F 		.ascii	"encoder_reading_SPI\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 267


 12336      6465725F 
 12336      72656164 
 12336      696E675F 
 12336      53504900 
 12337              	.LASF215:
 12338 02f7 6572726F 		.ascii	"error\000"
 12338      7200
 12339              	.LASF52:
 12340 02fd 656D675F 		.ascii	"emg_counter\000"
 12340      636F756E 
 12340      74657200 
 12341              	.LASF162:
 12342 0309 57524954 		.ascii	"WRITE_END\000"
 12342      455F454E 
 12342      4400
 12343              	.LASF220:
 12344 0313 706F735F 		.ascii	"pos_reconstruct\000"
 12344      7265636F 
 12344      6E737472 
 12344      75637400 
 12345              	.LASF232:
 12346 0323 70776D5F 		.ascii	"pwm_limit_search\000"
 12346      6C696D69 
 12346      745F7365 
 12346      61726368 
 12346      00
 12347              	.LASF0:
 12348 0334 7369676E 		.ascii	"signed char\000"
 12348      65642063 
 12348      68617200 
 12349              	.LASF118:
 12350 0340 75736572 		.ascii	"user_code_string\000"
 12350      5F636F64 
 12350      655F7374 
 12350      72696E67 
 12350      00
 12351              	.LASF147:
 12352 0351 73745F63 		.ascii	"st_calib\000"
 12352      616C6962 
 12352      00
 12353              	.LASF187:
 12354 035a 6572725F 		.ascii	"err_emg_1\000"
 12354      656D675F 
 12354      3100
 12355              	.LASF188:
 12356 0364 6572725F 		.ascii	"err_emg_2\000"
 12356      656D675F 
 12356      3200
 12357              	.LASF107:
 12358 036e 73776974 		.ascii	"switch_emg\000"
 12358      63685F65 
 12358      6D6700
 12359              	.LASF289:
 12360 0379 656D675F 		.ascii	"emg_2_status\000"
 12360      325F7374 
 12360      61747573 
 12360      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 268


 12361              	.LASF299:
 12362 0386 4144435F 		.ascii	"ADC_buf\000"
 12362      62756600 
 12363              	.LASF292:
 12364 038e 696E7465 		.ascii	"interrupt_flag\000"
 12364      72727570 
 12364      745F666C 
 12364      616700
 12365              	.LASF250:
 12366 039d 73746570 		.ascii	"step\000"
 12366      00
 12367              	.LASF192:
 12368 03a2 63757272 		.ascii	"curr_error_sum\000"
 12368      5F657272 
 12368      6F725F73 
 12368      756D00
 12369              	.LASF1:
 12370 03b1 756E7369 		.ascii	"unsigned char\000"
 12370      676E6564 
 12370      20636861 
 12370      7200
 12371              	.LASF93:
 12372 03bf 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 12372      72657665 
 12372      72735F6D 
 12372      6F746F72 
 12372      5F666C61 
 12373              	.LASF256:
 12374 03d5 726F775F 		.ascii	"row_start\000"
 12374      73746172 
 12374      7400
 12375              	.LASF296:
 12376 03df 666F7263 		.ascii	"forced_open\000"
 12376      65645F6F 
 12376      70656E00 
 12377              	.LASF210:
 12378 03eb 73706565 		.ascii	"speed_encoder\000"
 12378      645F656E 
 12378      636F6465 
 12378      7200
 12379              	.LASF264:
 12380 03f9 675F7265 		.ascii	"g_refNew\000"
 12380      664E6577 
 12380      00
 12381              	.LASF248:
 12382 0402 63757272 		.ascii	"curr_off\000"
 12382      5F6F6666 
 12382      00
 12383              	.LASF62:
 12384 040b 72696768 		.ascii	"right_left\000"
 12384      745F6C65 
 12384      667400
 12385              	.LASF91:
 12386 0416 656E636F 		.ascii	"encoder_line\000"
 12386      6465725F 
 12386      6C696E65 
 12386      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 269


 12387              	.LASF313:
 12388 0423 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 12388      73657273 
 12388      5C4D6174 
 12388      7469615C 
 12388      446F6375 
 12389 0451 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Generic.cydsn\000"
 12389      656E6572 
 12389      69632D46 
 12389      572D5053 
 12389      6F43355C 
 12390              	.LASF288:
 12391 0473 656D675F 		.ascii	"emg_1_status\000"
 12391      315F7374 
 12391      61747573 
 12391      00
 12392              	.LASF138:
 12393 0480 666C6167 		.ascii	"flags\000"
 12393      7300
 12394              	.LASF186:
 12395 0486 68616E64 		.ascii	"handle_value\000"
 12395      6C655F76 
 12395      616C7565 
 12395      00
 12396              	.LASF20:
 12397 0493 63686172 		.ascii	"char\000"
 12397      00
 12398              	.LASF86:
 12399 0498 6D61785F 		.ascii	"max_step_pos\000"
 12399      73746570 
 12399      5F706F73 
 12399      00
 12400              	.LASF301:
 12401 04a5 70776D5F 		.ascii	"pwm_sign\000"
 12401      7369676E 
 12401      00
 12402              	.LASF200:
 12403 04ae 6D6F746F 		.ascii	"motor_control_generic\000"
 12403      725F636F 
 12403      6E74726F 
 12403      6C5F6765 
 12403      6E657269 
 12404              	.LASF277:
 12405 04c4 66696C74 		.ascii	"filt_vel\000"
 12405      5F76656C 
 12405      00
 12406              	.LASF92:
 12407 04cd 70776D5F 		.ascii	"pwm_rate_limiter\000"
 12407      72617465 
 12407      5F6C696D 
 12407      69746572 
 12407      00
 12408              	.LASF72:
 12409 04de 6B5F645F 		.ascii	"k_d_c\000"
 12409      6300
 12410              	.LASF97:
 12411 04e4 6D5F6D75 		.ascii	"m_mult\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 270


 12411      6C7400
 12412              	.LASF71:
 12413 04eb 6B5F695F 		.ascii	"k_i_c\000"
 12413      6300
 12414              	.LASF196:
 12415 04f1 6D6F746F 		.ascii	"motor_dir\000"
 12415      725F6469 
 12415      7200
 12416              	.LASF243:
 12417 04fb 62696E5F 		.ascii	"bin_st\000"
 12417      737400
 12418              	.LASF165:
 12419 0502 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 12419      52533438 
 12419      355F5258 
 12419      5F457849 
 12419      6E746572 
 12420              	.LASF84:
 12421 051b 706F735F 		.ascii	"pos_lim_sup\000"
 12421      6C696D5F 
 12421      73757000 
 12422              	.LASF145:
 12423 0527 6F6C645F 		.ascii	"old_value\000"
 12423      76616C75 
 12423      6500
 12424              	.LASF105:
 12425 0531 656D675F 		.ascii	"emg_speed\000"
 12425      73706565 
 12425      6400
 12426              	.LASF123:
 12427 053b 72657374 		.ascii	"rest_vel\000"
 12427      5F76656C 
 12427      00
 12428              	.LASF152:
 12429 0544 4E4F524D 		.ascii	"NORMAL\000"
 12429      414C00
 12430              	.LASF181:
 12431 054b 6D6F746F 		.ascii	"motor_control_SH\000"
 12431      725F636F 
 12431      6E74726F 
 12431      6C5F5348 
 12431      00
 12432              	.LASF307:
 12433 055c 7046696C 		.ascii	"pFile\000"
 12433      6500
 12434              	.LASF191:
 12435 0562 706F735F 		.ascii	"pos_error_sum\000"
 12435      6572726F 
 12435      725F7375 
 12435      6D00
 12436              	.LASF116:
 12437 0570 4144435F 		.ascii	"ADC_conf\000"
 12437      636F6E66 
 12437      00
 12438              	.LASF285:
 12439 0579 6465765F 		.ascii	"dev_tension_f\000"
 12439      74656E73 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 271


 12439      696F6E5F 
 12439      6600
 12440              	.LASF74:
 12441 0587 6B5F695F 		.ascii	"k_i_dl\000"
 12441      646C00
 12442              	.LASF48:
 12443 058e 62756666 		.ascii	"buffer\000"
 12443      657200
 12444              	.LASF76:
 12445 0595 6B5F705F 		.ascii	"k_p_c_dl\000"
 12445      635F646C 
 12445      00
 12446              	.LASF173:
 12447 059e 72785F64 		.ascii	"rx_data_type\000"
 12447      6174615F 
 12447      74797065 
 12447      00
 12448              	.LASF309:
 12449 05ab 675F696D 		.ascii	"g_imuNew\000"
 12449      754E6577 
 12449      00
 12450              	.LASF150:
 12451 05b4 73706565 		.ascii	"speed\000"
 12451      6400
 12452              	.LASF197:
 12453 05ba 706F7369 		.ascii	"position_counter\000"
 12453      74696F6E 
 12453      5F636F75 
 12453      6E746572 
 12453      00
 12454              	.LASF252:
 12455 05cb 74696D65 		.ascii	"timer_value_e\000"
 12455      725F7661 
 12455      6C75655F 
 12455      6500
 12456              	.LASF168:
 12457 05d9 64617461 		.ascii	"data_packet_index\000"
 12457      5F706163 
 12457      6B65745F 
 12457      696E6465 
 12457      7800
 12458              	.LASF170:
 12459 05eb 64617461 		.ascii	"data_packet_buffer\000"
 12459      5F706163 
 12459      6B65745F 
 12459      62756666 
 12459      657200
 12460              	.LASF287:
 12461 05fe 6379636C 		.ascii	"cycles_status\000"
 12461      65735F73 
 12461      74617475 
 12461      7300
 12462              	.LASF175:
 12463 060c 636F756E 		.ascii	"counter_calibration\000"
 12463      7465725F 
 12463      63616C69 
 12463      62726174 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 272


 12463      696F6E00 
 12464              	.LASF266:
 12465 0620 675F6D65 		.ascii	"g_meas\000"
 12465      617300
 12466              	.LASF251:
 12467 0627 74696D65 		.ascii	"timer_value_s\000"
 12467      725F7661 
 12467      6C75655F 
 12467      7300
 12468              	.LASF305:
 12469 0635 456E636F 		.ascii	"Encoder_Check\000"
 12469      6465725F 
 12469      43686563 
 12469      6B00
 12470              	.LASF214:
 12471 0643 636F6D70 		.ascii	"comp_value_encoder\000"
 12471      5F76616C 
 12471      75655F65 
 12471      6E636F64 
 12471      657200
 12472              	.LASF302:
 12473 0656 64617461 		.ascii	"data_encoder_raw\000"
 12473      5F656E63 
 12473      6F646572 
 12473      5F726177 
 12473      00
 12474              	.LASF263:
 12475 0667 675F7265 		.ascii	"g_ref\000"
 12475      6600
 12476              	.LASF25:
 12477 066d 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 12477      545F4D4F 
 12477      44455F45 
 12477      58544552 
 12477      4E414C00 
 12478              	.LASF205:
 12479 0681 696E6465 		.ascii	"index\000"
 12479      7800
 12480              	.LASF130:
 12481 0687 6D617869 		.ascii	"maximum_pressure_kPa\000"
 12481      6D756D5F 
 12481      70726573 
 12481      73757265 
 12481      5F6B5061 
 12482              	.LASF124:
 12483 069c 72657374 		.ascii	"rest_position_flag\000"
 12483      5F706F73 
 12483      6974696F 
 12483      6E5F666C 
 12483      616700
 12484              	.LASF308:
 12485 06af 675F696D 		.ascii	"g_imu\000"
 12485      7500
 12486              	.LASF77:
 12487 06b5 6B5F695F 		.ascii	"k_i_c_dl\000"
 12487      635F646C 
 12487      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 273


 12488              	.LASF174:
 12489 06be 7061636B 		.ascii	"package_count\000"
 12489      6167655F 
 12489      636F756E 
 12489      7400
 12490              	.LASF37:
 12491 06cc 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 12491      5F414E44 
 12491      5F504F53 
 12491      5F434F4E 
 12491      54524F4C 
 12492              	.LASF148:
 12493 06e1 656E6162 		.ascii	"enabled\000"
 12493      6C656400 
 12494              	.LASF5:
 12495 06e9 6C6F6E67 		.ascii	"long unsigned int\000"
 12495      20756E73 
 12495      69676E65 
 12495      6420696E 
 12495      7400
 12496              	.LASF57:
 12497 06fb 746F7461 		.ascii	"total_time_on\000"
 12497      6C5F7469 
 12497      6D655F6F 
 12497      6E00
 12498              	.LASF160:
 12499 0709 57524954 		.ascii	"WRITE_CYCLES\000"
 12499      455F4359 
 12499      434C4553 
 12499      00
 12500              	.LASF44:
 12501 0716 686F6C64 		.ascii	"hold_curr\000"
 12501      5F637572 
 12501      7200
 12502              	.LASF58:
 12503 0720 746F7461 		.ascii	"total_time_rest\000"
 12503      6C5F7469 
 12503      6D655F72 
 12503      65737400 
 12504              	.LASF79:
 12505 0730 61637469 		.ascii	"activ\000"
 12505      7600
 12506              	.LASF235:
 12507 0736 6D696E5F 		.ascii	"min_tension\000"
 12507      74656E73 
 12507      696F6E00 
 12508              	.LASF297:
 12509 0742 62617474 		.ascii	"battery_low_SoC\000"
 12509      6572795F 
 12509      6C6F775F 
 12509      536F4300 
 12510              	.LASF96:
 12511 0752 6D5F6F66 		.ascii	"m_off\000"
 12511      6600
 12512              	.LASF290:
 12513 0758 72657365 		.ascii	"reset_last_value_flag\000"
 12513      745F6C61 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 274


 12513      73745F76 
 12513      616C7565 
 12513      5F666C61 
 12514              	.LASF142:
 12515 076e 71756174 		.ascii	"quat_value\000"
 12515      5F76616C 
 12515      756500
 12516              	.LASF121:
 12517 0779 72657374 		.ascii	"rest_pos\000"
 12517      5F706F73 
 12517      00
 12518              	.LASF39:
 12519 0782 63757272 		.ascii	"curr\000"
 12519      00
 12520              	.LASF161:
 12521 0787 57414954 		.ascii	"WAIT_QUERY\000"
 12521      5F515545 
 12521      525900
 12522              	.LASF89:
 12523 0792 696E7075 		.ascii	"input_mode\000"
 12523      745F6D6F 
 12523      646500
 12524              	.LASF35:
 12525 079d 434F4E54 		.ascii	"CONTROL_PWM\000"
 12525      524F4C5F 
 12525      50574D00 
 12526              	.LASF236:
 12527 07a9 6379636C 		.ascii	"cycles_counter_update\000"
 12527      65735F63 
 12527      6F756E74 
 12527      65725F75 
 12527      70646174 
 12528              	.LASF311:
 12529 07bf 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12529      43313120 
 12529      352E342E 
 12529      31203230 
 12529      31363036 
 12530 07f2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 12530      20726576 
 12530      6973696F 
 12530      6E203233 
 12530      37373135 
 12531 0825 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 12531      66756E63 
 12531      74696F6E 
 12531      2D736563 
 12531      74696F6E 
 12532              	.LASF41:
 12533 084d 73745F72 		.ascii	"st_ref\000"
 12533      656600
 12534              	.LASF280:
 12535 0854 74696D65 		.ascii	"timer_value0\000"
 12535      725F7661 
 12535      6C756530 
 12535      00
 12536              	.LASF120:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 275


 12537 0861 73745F53 		.ascii	"st_SH_spec\000"
 12537      485F7370 
 12537      656300
 12538              	.LASF221:
 12539 086c 765F7661 		.ascii	"v_value\000"
 12539      6C756500 
 12540              	.LASF273:
 12541 0874 63616C69 		.ascii	"calib\000"
 12541      6200
 12542              	.LASF128:
 12543 087a 73745F46 		.ascii	"st_FB_spec\000"
 12543      425F7370 
 12543      656300
 12544              	.LASF6:
 12545 0885 6C6F6E67 		.ascii	"long long int\000"
 12545      206C6F6E 
 12545      6720696E 
 12545      7400
 12546              	.LASF33:
 12547 0893 53485F63 		.ascii	"SH_control_mode\000"
 12547      6F6E7472 
 12547      6F6C5F6D 
 12547      6F646500 
 12548              	.LASF179:
 12549 08a3 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 12549      4E445F4D 
 12549      4F544F52 
 12549      5F494458 
 12549      00
 12550              	.LASF298:
 12551 08b4 6368616E 		.ascii	"change_ext_ref_flag\000"
 12551      67655F65 
 12551      78745F72 
 12551      65665F66 
 12551      6C616700 
 12552              	.LASF19:
 12553 08c8 646F7562 		.ascii	"double\000"
 12553      6C6500
 12554              	.LASF275:
 12555 08cf 66696C74 		.ascii	"filt_curr_diff\000"
 12555      5F637572 
 12555      725F6469 
 12555      666600
 12556              	.LASF180:
 12557 08de 696E7465 		.ascii	"interrupt_manager\000"
 12557      72727570 
 12557      745F6D61 
 12557      6E616765 
 12557      7200
 12558              	.LASF95:
 12559 08f0 456E635F 		.ascii	"Enc_raw_read_conf\000"
 12559      7261775F 
 12559      72656164 
 12559      5F636F6E 
 12559      6600
 12560              	.LASF151:
 12561 0902 72657065 		.ascii	"repetitions\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 276


 12561      74697469 
 12561      6F6E7300 
 12562              	.LASF85:
 12563 090e 6D61785F 		.ascii	"max_step_neg\000"
 12563      73746570 
 12563      5F6E6567 
 12563      00
 12564              	.LASF219:
 12565 091b 636F756E 		.ascii	"count_startup_motor\000"
 12565      745F7374 
 12565      61727475 
 12565      705F6D6F 
 12565      746F7200 
 12566              	.LASF127:
 12567 092f 736C6176 		.ascii	"slave_ID\000"
 12567      655F4944 
 12567      00
 12568              	.LASF156:
 12569 0938 57414954 		.ascii	"WAIT\000"
 12569      00
 12570              	.LASF18:
 12571 093d 666C6F61 		.ascii	"float\000"
 12571      7400
 12572              	.LASF111:
 12573 0943 494D555F 		.ascii	"IMU_conf\000"
 12573      636F6E66 
 12573      00
 12574              	.LASF229:
 12575 094c 636F756E 		.ascii	"count\000"
 12575      7400
 12576              	.LASF69:
 12577 0952 73745F6D 		.ascii	"st_motor\000"
 12577      6F746F72 
 12577      00
 12578              	.LASF260:
 12579 095b 6D5F6164 		.ascii	"m_addr\000"
 12579      647200
 12580              	.LASF272:
 12581 0962 635F6D65 		.ascii	"c_mem\000"
 12581      6D00
 12582              	.LASF8:
 12583 0968 756E7369 		.ascii	"unsigned int\000"
 12583      676E6564 
 12583      20696E74 
 12583      00
 12584              	.LASF242:
 12585 0975 6D61785F 		.ascii	"max_pos\000"
 12585      706F7300 
 12586              	.LASF306:
 12587 097d 72657374 		.ascii	"rest_pos_curr_ref\000"
 12587      5F706F73 
 12587      5F637572 
 12587      725F7265 
 12587      6600
 12588              	.LASF133:
 12589 098f 666C6167 		.ascii	"flag\000"
 12589      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 277


 12590              	.LASF90:
 12591 0994 636F6E74 		.ascii	"control_mode\000"
 12591      726F6C5F 
 12591      6D6F6465 
 12591      00
 12592              	.LASF21:
 12593 09a1 63797374 		.ascii	"cystatus\000"
 12593      61747573 
 12593      00
 12594              	.LASF26:
 12595 09aa 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 12595      545F4D4F 
 12595      44455F45 
 12595      4E434F44 
 12595      45523300 
 12596              	.LASF108:
 12597 09be 73745F69 		.ascii	"st_imu\000"
 12597      6D7500
 12598              	.LASF198:
 12599 09c5 63757272 		.ascii	"current_emg\000"
 12599      656E745F 
 12599      656D6700 
 12600              	.LASF171:
 12601 09d1 72785F71 		.ascii	"rx_queue\000"
 12601      75657565 
 12601      00
 12602              	.LASF204:
 12603 09da 6173736F 		.ascii	"assoc_motor\000"
 12603      635F6D6F 
 12603      746F7200 
 12604              	.LASF46:
 12605 09e6 6164645F 		.ascii	"add_emg\000"
 12605      656D6700 
 12606              	.LASF185:
 12607 09ee 695F7265 		.ascii	"i_ref\000"
 12607      6600
 12608              	.LASF103:
 12609 09f4 656D675F 		.ascii	"emg_threshold\000"
 12609      74687265 
 12609      73686F6C 
 12609      6400
 12610              	.LASF253:
 12611 0a02 73617665 		.ascii	"save_cycles_eeprom\000"
 12611      5F637963 
 12611      6C65735F 
 12611      65657072 
 12611      6F6D00
 12612              	.LASF54:
 12613 0a15 63757272 		.ascii	"current_hist\000"
 12613      656E745F 
 12613      68697374 
 12613      00
 12614              	.LASF36:
 12615 0a22 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 12615      524F4C5F 
 12615      43555252 
 12615      454E5400 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 278


 12616              	.LASF23:
 12617 0a32 6C6F6E67 		.ascii	"long double\000"
 12617      20646F75 
 12617      626C6500 
 12618              	.LASF154:
 12619 0a3e 44495343 		.ascii	"DISCARD\000"
 12619      41524400 
 12620              	.LASF193:
 12621 0a46 70726576 		.ascii	"prev_pos_err\000"
 12621      5F706F73 
 12621      5F657272 
 12621      00
 12622              	.LASF212:
 12623 0a53 696E6974 		.ascii	"init_rot\000"
 12623      5F726F74 
 12623      00
 12624              	.LASF233:
 12625 0a5c 6D6F745F 		.ascii	"mot_idx\000"
 12625      69647800 
 12626              	.LASF45:
 12627 0a64 73745F65 		.ascii	"st_emg_meas\000"
 12627      6D675F6D 
 12627      65617300 
 12628              	.LASF276:
 12629 0a70 66696C74 		.ascii	"filt_i\000"
 12629      5F6900
 12630              	.LASF100:
 12631 0a77 6D6F746F 		.ascii	"motor_handle_ratio\000"
 12631      725F6861 
 12631      6E646C65 
 12631      5F726174 
 12631      696F00
 12632              	.LASF274:
 12633 0a8a 66696C74 		.ascii	"filt_v\000"
 12633      5F7600
 12634              	.LASF295:
 12635 0a91 72657374 		.ascii	"rest_enabled\000"
 12635      5F656E61 
 12635      626C6564 
 12635      00
 12636              	.LASF265:
 12637 0a9e 675F7265 		.ascii	"g_refOld\000"
 12637      664F6C64 
 12637      00
 12638              	.LASF183:
 12639 0aa7 706F735F 		.ascii	"pos_error\000"
 12639      6572726F 
 12639      7200
 12640              	.LASF140:
 12641 0ab1 6779726F 		.ascii	"gyro_value\000"
 12641      5F76616C 
 12641      756500
 12642              	.LASF113:
 12643 0abc 63757272 		.ascii	"curr_time\000"
 12643      5F74696D 
 12643      6500
 12644              	.LASF98:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 279


 12645 0ac6 646F7562 		.ascii	"double_encoder_on_off\000"
 12645      6C655F65 
 12645      6E636F64 
 12645      65725F6F 
 12645      6E5F6F66 
 12646              	.LASF234:
 12647 0adc 6D61785F 		.ascii	"max_tension\000"
 12647      74656E73 
 12647      696F6E00 
 12648              	.LASF178:
 12649 0ae8 4D4F544F 		.ascii	"MOTOR_IDX\000"
 12649      525F4944 
 12649      5800
 12650              	.LASF213:
 12651 0af2 6C617374 		.ascii	"last_value_encoder\000"
 12651      5F76616C 
 12651      75655F65 
 12651      6E636F64 
 12651      657200
 12652              	.LASF176:
 12653 0b05 636F756E 		.ascii	"counter_tension_func\000"
 12653      7465725F 
 12653      74656E73 
 12653      696F6E5F 
 12653      66756E63 
 12654              	.LASF281:
 12655 0b1a 6379636C 		.ascii	"cycle_time\000"
 12655      655F7469 
 12655      6D6500
 12656              	.LASF7:
 12657 0b25 6C6F6E67 		.ascii	"long long unsigned int\000"
 12657      206C6F6E 
 12657      6720756E 
 12657      7369676E 
 12657      65642069 
 12658              	.LASF49:
 12659 0b3c 6C656E67 		.ascii	"length\000"
 12659      746800
 12660              	.LASF137:
 12661 0b43 73745F69 		.ascii	"st_imu_data\000"
 12661      6D755F64 
 12661      61746100 
 12662              	.LASF141:
 12663 0b4f 6D61675F 		.ascii	"mag_value\000"
 12663      76616C75 
 12663      6500
 12664              	.LASF40:
 12665 0b59 6F6E6F66 		.ascii	"onoff\000"
 12665      6600
 12666              	.LASF208:
 12667 0b5f 746D705F 		.ascii	"tmp_value_encoder_32\000"
 12667      76616C75 
 12667      655F656E 
 12667      636F6465 
 12667      725F3332 
 12668              	.LASF194:
 12669 0b74 70726576 		.ascii	"prev_curr_err\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 280


 12669      5F637572 
 12669      725F6572 
 12669      7200
 12670              	.LASF169:
 12671 0b82 64617461 		.ascii	"data_packet_length\000"
 12671      5F706163 
 12671      6B65745F 
 12671      6C656E67 
 12671      746800
 12672              	.LASF70:
 12673 0b95 6B5F705F 		.ascii	"k_p_c\000"
 12673      6300
 12674              	.LASF282:
 12675 0b9b 6465765F 		.ascii	"dev_tension\000"
 12675      74656E73 
 12675      696F6E00 
 12676              	.LASF81:
 12677 0ba7 6D6F746F 		.ascii	"motor_driver_type\000"
 12677      725F6472 
 12677      69766572 
 12677      5F747970 
 12677      6500
 12678              	.LASF157:
 12679 0bb9 57414954 		.ascii	"WAIT_EoC\000"
 12679      5F456F43 
 12679      00
 12680              	.LASF22:
 12681 0bc2 72656738 		.ascii	"reg8\000"
 12681      00
 12682              	.LASF245:
 12683 0bc7 62696E5F 		.ascii	"bin_1\000"
 12683      3100
 12684              	.LASF246:
 12685 0bcd 62696E5F 		.ascii	"bin_2\000"
 12685      3200
 12686              	.LASF225:
 12687 0bd3 695F6175 		.ascii	"i_aux\000"
 12687      7800
 12688              	.LASF131:
 12689 0bd9 70726F70 		.ascii	"prop_err_fb_gain\000"
 12689      5F657272 
 12689      5F66625F 
 12689      6761696E 
 12689      00
 12690              	.LASF255:
 12691 0bea 726F775F 		.ascii	"row_number\000"
 12691      6E756D62 
 12691      657200
 12692              	.LASF231:
 12693 0bf5 6F766572 		.ascii	"overcurrent_control\000"
 12693      63757272 
 12693      656E745F 
 12693      636F6E74 
 12693      726F6C00 
 12694              	.LASF247:
 12695 0c09 63757272 		.ascii	"curr_pos\000"
 12695      5F706F73 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 281


 12695      00
 12696              	.LASF153:
 12697 0c12 52455345 		.ascii	"RESET\000"
 12697      5400
 12698              	.LASF126:
 12699 0c18 736C6176 		.ascii	"slave_comm_active\000"
 12699      655F636F 
 12699      6D6D5F61 
 12699      63746976 
 12699      6500
 12700              	.LASF224:
 12701 0c2a 616E616C 		.ascii	"analog_read_end\000"
 12701      6F675F72 
 12701      6561645F 
 12701      656E6400 
 12702              	.LASF303:
 12703 0c3a 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 12703      636F6465 
 12703      725F4C69 
 12703      6E655F43 
 12703      6F6E6E65 
 12704              	.LASF67:
 12705 0c53 6465765F 		.ascii	"dev_type\000"
 12705      74797065 
 12705      00
 12706              	.LASF238:
 12707 0c5c 656D675F 		.ascii	"emg_cycle_status\000"
 12707      6379636C 
 12707      655F7374 
 12707      61747573 
 12707      00
 12708              	.LASF117:
 12709 0c6d 73745F75 		.ascii	"st_user\000"
 12709      73657200 
 12710              	.LASF101:
 12711 0c75 67656172 		.ascii	"gears_params\000"
 12711      735F7061 
 12711      72616D73 
 12711      00
 12712              	.LASF112:
 12713 0c82 73745F65 		.ascii	"st_expansion\000"
 12713      7870616E 
 12713      73696F6E 
 12713      00
 12714              	.LASF106:
 12715 0c8f 656D675F 		.ascii	"emg_calibration_flag\000"
 12715      63616C69 
 12715      62726174 
 12715      696F6E5F 
 12715      666C6167 
 12716              	.LASF42:
 12717 0ca4 73745F6D 		.ascii	"st_meas\000"
 12717      65617300 
 12718              	.LASF257:
 12719 0cac 61646472 		.ascii	"addr_start\000"
 12719      5F737461 
 12719      727400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 282


 12720              	.LASF261:
 12721 0cb7 70776D5F 		.ascii	"pwm_preload_values\000"
 12721      7072656C 
 12721      6F61645F 
 12721      76616C75 
 12721      657300
 12722              	.LASF31:
 12723 0cca 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 12723      545F4D4F 
 12723      44455F45 
 12723      4D475F50 
 12723      524F504F 
 12724              	.LASF164:
 12725 0ce9 636F756E 		.ascii	"counter_status\000"
 12725      7465725F 
 12725      73746174 
 12725      757300
 12726              	.LASF271:
 12727 0cf8 675F6D65 		.ascii	"g_mem\000"
 12727      6D00
 12728              	.LASF226:
 12729 0cfe 656D675F 		.ascii	"emg_counter_1\000"
 12729      636F756E 
 12729      7465725F 
 12729      3100
 12730              	.LASF227:
 12731 0d0c 656D675F 		.ascii	"emg_counter_2\000"
 12731      636F756E 
 12731      7465725F 
 12731      3200
 12732              	.LASF216:
 12733 0d1a 6F6E6C79 		.ascii	"only_first_time\000"
 12733      5F666972 
 12733      73745F74 
 12733      696D6500 
 12734              	.LASF11:
 12735 0d2a 75696E74 		.ascii	"uint8\000"
 12735      3800
 12736              	.LASF211:
 12737 0d30 76616C75 		.ascii	"value_diff\000"
 12737      655F6469 
 12737      666600
 12738              	.LASF249:
 12739 0d3b 63757272 		.ascii	"curr_ref\000"
 12739      5F726566 
 12739      00
 12740              	.LASF2:
 12741 0d44 73686F72 		.ascii	"short int\000"
 12741      7420696E 
 12741      7400
 12742              	.LASF75:
 12743 0d4e 6B5F645F 		.ascii	"k_d_dl\000"
 12743      646C00
 12744              	.LASF209:
 12745 0d55 76616C75 		.ascii	"value_encoder\000"
 12745      655F656E 
 12745      636F6465 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 283


 12745      7200
 12746              	.LASF135:
 12747 0d63 6D6F746F 		.ascii	"motor\000"
 12747      7200
 12748              	.LASF284:
 12749 0d69 6465765F 		.ascii	"dev_pwm_sat\000"
 12749      70776D5F 
 12749      73617400 
 12750              	.LASF60:
 12751 0d75 68775F6D 		.ascii	"hw_maint_date\000"
 12751      61696E74 
 12751      5F646174 
 12751      6500
 12752              	.LASF199:
 12753 0d83 66756E63 		.ascii	"function_scheduler\000"
 12753      74696F6E 
 12753      5F736368 
 12753      6564756C 
 12753      657200
 12754              	.LASF195:
 12755 0d96 70726576 		.ascii	"prev_pwm\000"
 12755      5F70776D 
 12755      00
 12756              	.LASF61:
 12757 0d9f 73746174 		.ascii	"stats_period_begin_date\000"
 12757      735F7065 
 12757      72696F64 
 12757      5F626567 
 12757      696E5F64 
 12758              	.LASF262:
 12759 0db7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12759      52784275 
 12759      66666572 
 12759      00
 12760              	.LASF286:
 12761 0dc4 706F775F 		.ascii	"pow_tension\000"
 12761      74656E73 
 12761      696F6E00 
 12762              	.LASF15:
 12763 0dd0 696E7431 		.ascii	"int16\000"
 12763      3600
 12764              	.LASF114:
 12765 0dd6 72656164 		.ascii	"read_exp_port_flag\000"
 12765      5F657870 
 12765      5F706F72 
 12765      745F666C 
 12765      616700
 12766              	.LASF80:
 12767 0de9 61637469 		.ascii	"activate_pwm_rescaling\000"
 12767      76617465 
 12767      5F70776D 
 12767      5F726573 
 12767      63616C69 
 12768              	.LASF73:
 12769 0e00 6B5F705F 		.ascii	"k_p_dl\000"
 12769      646C00
 12770              	.LASF43:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 284


 12771 0e07 65737469 		.ascii	"estim_curr\000"
 12771      6D5F6375 
 12771      727200
 12772              	.LASF283:
 12773 0e12 6465765F 		.ascii	"dev_pwm_limit\000"
 12773      70776D5F 
 12773      6C696D69 
 12773      7400
 12774              	.LASF254:
 12775 0e20 73746174 		.ascii	"status\000"
 12775      757300
 12776              	.LASF184:
 12777 0e27 63757272 		.ascii	"curr_error\000"
 12777      5F657272 
 12777      6F7200
 12778              	.LASF304:
 12779 0e32 456E636F 		.ascii	"Encoder_Value\000"
 12779      6465725F 
 12779      56616C75 
 12779      6500
 12780              	.LASF66:
 12781 0e40 75736572 		.ascii	"user_id\000"
 12781      5F696400 
 12782              	.LASF239:
 12783 0e48 72657374 		.ascii	"rest_cycle_status\000"
 12783      5F637963 
 12783      6C655F73 
 12783      74617475 
 12783      7300
 12784              	.LASF207:
 12785 0e5a 746D705F 		.ascii	"tmp_value_encoder\000"
 12785      76616C75 
 12785      655F656E 
 12785      636F6465 
 12785      7200
 12786              	.LASF166:
 12787 0e6c 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 12787      4359434C 
 12787      45535F48 
 12787      616E646C 
 12787      657200
 12788              	.LASF65:
 12789 0e7f 62617564 		.ascii	"baud_rate\000"
 12789      5F726174 
 12789      6500
 12790              	.LASF110:
 12791 0e89 5350495F 		.ascii	"SPI_read_delay\000"
 12791      72656164 
 12791      5F64656C 
 12791      617900
 12792              	.LASF3:
 12793 0e98 73686F72 		.ascii	"short unsigned int\000"
 12793      7420756E 
 12793      7369676E 
 12793      65642069 
 12793      6E7400
 12794              	.LASF94:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 285


 12795 0eab 73745F65 		.ascii	"st_encoder\000"
 12795      6E636F64 
 12795      657200
 12796              	.LASF129:
 12797 0eb6 6D61785F 		.ascii	"max_residual_current\000"
 12797      72657369 
 12797      6475616C 
 12797      5F637572 
 12797      72656E74 
 12798              	.LASF201:
 12799 0ecb 454E435F 		.ascii	"ENC_L\000"
 12799      4C00
 12800              	.LASF132:
 12801 0ed1 73745F65 		.ascii	"st_eeprom\000"
 12801      6570726F 
 12801      6D00
 12802              	.LASF312:
 12803 0edb 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 12803      72635C69 
 12803      6E746572 
 12803      72757074 
 12803      696F6E73 
 12804              	.LASF16:
 12805 0ef2 696E7433 		.ascii	"int32\000"
 12805      3200
 12806              	.LASF300:
 12807 0ef8 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 12807      4F465F41 
 12807      4E414C4F 
 12807      475F494E 
 12807      50555453 
 12808              	.LASF310:
 12809 0f0d 6D617374 		.ascii	"master_mode\000"
 12809      65725F6D 
 12809      6F646500 
 12810              	.LASF38:
 12811 0f19 46535F46 		.ascii	"FS_FILE\000"
 12811      494C4500 
 12812              	.LASF82:
 12813 0f21 706F735F 		.ascii	"pos_lim_flag\000"
 12813      6C696D5F 
 12813      666C6167 
 12813      00
 12814              	.LASF267:
 12815 0f2e 675F6D65 		.ascii	"g_measOld\000"
 12815      61734F6C 
 12815      6400
 12816              	.LASF259:
 12817 0f38 726F775F 		.ascii	"row_end\000"
 12817      656E6400 
 12818              	.LASF34:
 12819 0f40 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 12819      524F4C5F 
 12819      414E474C 
 12819      4500
 12820              	.LASF9:
 12821 0f4e 5F5F696E 		.ascii	"__int32_t\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 286


 12821      7433325F 
 12821      7400
 12822              	.LASF56:
 12823 0f58 77697265 		.ascii	"wire_disp\000"
 12823      5F646973 
 12823      7000
 12824              	.LASF294:
 12825 0f62 63616E5F 		.ascii	"can_write\000"
 12825      77726974 
 12825      6500
 12826              	.LASF104:
 12827 0f6c 656D675F 		.ascii	"emg_max_value\000"
 12827      6D61785F 
 12827      76616C75 
 12827      6500
 12828              	.LASF88:
 12829 0f7a 63757272 		.ascii	"current_limit\000"
 12829      656E745F 
 12829      6C696D69 
 12829      7400
 12830              	.LASF32:
 12831 0f88 53485F69 		.ascii	"SH_input_mode\000"
 12831      6E707574 
 12831      5F6D6F64 
 12831      6500
 12832              	.LASF163:
 12833 0f96 4E4F4E45 		.ascii	"NONE\000"
 12833      00
 12834              	.LASF12:
 12835 0f9b 75696E74 		.ascii	"uint16\000"
 12835      313600
 12836              	.LASF269:
 12837 0fa2 675F656D 		.ascii	"g_emg_measOld\000"
 12837      675F6D65 
 12837      61734F6C 
 12837      6400
 12838              	.LASF122:
 12839 0fb0 72657374 		.ascii	"rest_delay\000"
 12839      5F64656C 
 12839      617900
 12840              	.LASF144:
 12841 0fbb 73745F66 		.ascii	"st_filter\000"
 12841      696C7465 
 12841      7200
 12842              	.LASF222:
 12843 0fc5 76765F76 		.ascii	"vv_value\000"
 12843      616C7565 
 12843      00
 12844              	.LASF78:
 12845 0fce 6B5F645F 		.ascii	"k_d_c_dl\000"
 12845      635F646C 
 12845      00
 12846              	.LASF149:
 12847 0fd7 64697265 		.ascii	"direction\000"
 12847      6374696F 
 12847      6E00
 12848              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccn0hIl6.s 			page 287


