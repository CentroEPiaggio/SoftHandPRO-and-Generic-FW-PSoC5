ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10447
 458 01dc 04000000 		.word	rx_queue.10451
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10449
 461 01e8 08000000 		.word	data_packet_index.10448
 462 01ec 0C000000 		.word	data_packet_buffer.10450
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 814B     		ldr	r3, .L80
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0054 7F4B     		ldr	r3, .L80+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 005c 7D4B     		ldr	r3, .L80+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0066 7C4B     		ldr	r3, .L80+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F24C82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 91010000 		.word	.L38+1
 552 0080 EF030000 		.word	.L39+1
 553 0084 EF030000 		.word	.L39+1
 554 0088 91010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 7049     		ldr	r1, .L80+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa 6C4B     		ldr	r3, .L80+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 299 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc 6649     		ldr	r1, .L80+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 301 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de 5E49     		ldr	r1, .L80+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 305 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 17


 604 00f8 564B     		ldr	r3, .L80+4
 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 306 0
 609 0100 544B     		ldr	r3, .L80+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 307 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 615              		.loc 1 312 0
 616 010a 07F58843 		add	r3, r7, #17408
 617 010e 03F15E03 		add	r3, r3, #94
 618 0112 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 619 0114 5049     		ldr	r1, .L80+8
 620 0116 1346     		mov	r3, r2
 621 0118 DB00     		lsls	r3, r3, #3
 622 011a 9B1A     		subs	r3, r3, r2
 623 011c 1B01     		lsls	r3, r3, #4
 624 011e 0B44     		add	r3, r3, r1
 625 0120 03F58873 		add	r3, r3, #272
 626 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627 0126 1A46     		mov	r2, r3
 628 0128 4D4B     		ldr	r3, .L80+16
 629 012a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 630 012c 002B     		cmp	r3, #0
 631 012e 24D0     		beq	.L41
 313:..\src/interruptions.c ****                 motor_control_SH();
 632              		.loc 1 313 0
 633 0130 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****                 
 315:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 316:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 634              		.loc 1 316 0
 635 0134 07F58843 		add	r3, r7, #17408
 636 0138 03F15E03 		add	r3, r3, #94
 637 013c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 638 013e 4649     		ldr	r1, .L80+8
 639 0140 1346     		mov	r3, r2
 640 0142 DB00     		lsls	r3, r3, #3
 641 0144 9B1A     		subs	r3, r3, r2
 642 0146 1B01     		lsls	r3, r3, #4
 643 0148 0B44     		add	r3, r3, r1
 644 014a 03F58973 		add	r3, r3, #274
 645 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646 0150 012B     		cmp	r3, #1
 647 0152 12D1     		bne	.L41
 317:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 648              		.loc 1 317 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 18


 649 0154 07F58843 		add	r3, r7, #17408
 650 0158 03F15E03 		add	r3, r3, #94
 651 015c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 652 015e 3E49     		ldr	r1, .L80+8
 653 0160 1346     		mov	r3, r2
 654 0162 DB00     		lsls	r3, r3, #3
 655 0164 9B1A     		subs	r3, r3, r2
 656 0166 1B01     		lsls	r3, r3, #4
 657 0168 0B44     		add	r3, r3, r1
 658 016a 03F58773 		add	r3, r3, #270
 659 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 0170 002B     		cmp	r3, #0
 661 0172 02D1     		bne	.L41
 318:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 662              		.loc 1 318 0
 663 0174 3B4B     		ldr	r3, .L80+20
 664 0176 0022     		movs	r2, #0
 665 0178 1A70     		strb	r2, [r3]
 666              	.L41:
 319:..\src/interruptions.c ****                     }   
 320:..\src/interruptions.c ****                 }
 321:..\src/interruptions.c ****             }
 322:..\src/interruptions.c **** 
 323:..\src/interruptions.c ****             // Check Interrupt 
 324:..\src/interruptions.c **** 
 325:..\src/interruptions.c ****             if (interrupt_flag){
 667              		.loc 1 325 0
 668 017a 364B     		ldr	r3, .L80+4
 669 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 017e 002B     		cmp	r3, #0
 671 0180 00F0AF81 		beq	.L77
 326:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 672              		.loc 1 326 0
 673 0184 334B     		ldr	r3, .L80+4
 674 0186 0022     		movs	r2, #0
 675 0188 1A70     		strb	r2, [r3]
 327:..\src/interruptions.c ****                 interrupt_manager();
 676              		.loc 1 327 0
 677 018a FFF7FEFF 		bl	interrupt_manager
 328:..\src/interruptions.c ****             }
 329:..\src/interruptions.c ****             break;
 678              		.loc 1 329 0
 679 018e A8E1     		b	.L77
 680              	.L38:
 681              	.LBB2:
 330:..\src/interruptions.c ****             
 331:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 332:..\src/interruptions.c ****             
 333:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 334:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 682              		.loc 1 334 0
 683 0190 0023     		movs	r3, #0
 684 0192 07F58842 		add	r2, r7, #17408
 685 0196 02F15F02 		add	r2, r2, #95
 686 019a 1370     		strb	r3, [r2]
 687 019c 89E0     		b	.L43
 688              	.L48:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 19


 335:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 689              		.loc 1 335 0
 690 019e 07F58843 		add	r3, r7, #17408
 691 01a2 03F15F03 		add	r3, r3, #95
 692 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 01a8 2C4A     		ldr	r2, .L80+12
 694 01aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 695 01ac 002B     		cmp	r3, #0
 696 01ae 75D0     		beq	.L44
 336:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 337:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 697              		.loc 1 337 0
 698 01b0 07F58843 		add	r3, r7, #17408
 699 01b4 03F15F03 		add	r3, r3, #95
 700 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 01ba 1846     		mov	r0, r3
 702 01bc FFF7FEFF 		bl	Change_CS_EncoderLine
 338:..\src/interruptions.c ****                               
 339:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 703              		.loc 1 339 0
 704 01c0 07F58843 		add	r3, r7, #17408
 705 01c4 03F15E03 		add	r3, r3, #94
 706 01c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ca 2349     		ldr	r1, .L80+8
 708 01cc 1346     		mov	r3, r2
 709 01ce DB00     		lsls	r3, r3, #3
 710 01d0 9B1A     		subs	r3, r3, r2
 711 01d2 1B01     		lsls	r3, r3, #4
 712 01d4 0B44     		add	r3, r3, r1
 713 01d6 03F58873 		add	r3, r3, #272
 714 01da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 715 01dc 07F58842 		add	r2, r7, #17408
 716 01e0 02F15F02 		add	r2, r2, #95
 717 01e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 718 01e6 9A42     		cmp	r2, r3
 719 01e8 0ED1     		bne	.L45
 340:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 341:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 720              		.loc 1 341 0
 721 01ea 07F58843 		add	r3, r7, #17408
 722 01ee 03F15E03 		add	r3, r3, #94
 723 01f2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 724 01f4 07F58843 		add	r3, r7, #17408
 725 01f8 03F15F03 		add	r3, r3, #95
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 1146     		mov	r1, r2
 728 0200 1846     		mov	r0, r3
 729 0202 FFF7FEFF 		bl	encoder_reading_SPI
 730 0206 40E0     		b	.L46
 731              	.L45:
 342:..\src/interruptions.c ****                     }
 343:..\src/interruptions.c ****                     else {
 344:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 732              		.loc 1 344 0
 733 0208 07F58843 		add	r3, r7, #17408
 734 020c 03F15D03 		add	r3, r3, #93
 735 0210 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 20


 736 0212 1149     		ldr	r1, .L80+8
 737 0214 1346     		mov	r3, r2
 738 0216 DB00     		lsls	r3, r3, #3
 739 0218 9B1A     		subs	r3, r3, r2
 740 021a 1B01     		lsls	r3, r3, #4
 741 021c 0B44     		add	r3, r3, r1
 742 021e 03F58873 		add	r3, r3, #272
 743 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 0224 07F58842 		add	r2, r7, #17408
 745 0228 02F15F02 		add	r2, r2, #95
 746 022c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 747 022e 9A42     		cmp	r2, r3
 748 0230 1AD1     		bne	.L47
 345:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 346:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 749              		.loc 1 346 0
 750 0232 07F58843 		add	r3, r7, #17408
 751 0236 03F15D03 		add	r3, r3, #93
 752 023a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 753 023c 07F58843 		add	r3, r7, #17408
 754 0240 03F15F03 		add	r3, r3, #95
 755 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 756 0246 1146     		mov	r1, r2
 757 0248 1846     		mov	r0, r3
 758 024a FFF7FEFF 		bl	encoder_reading_SPI
 759 024e 1CE0     		b	.L46
 760              	.L81:
 761              		.align	2
 762              	.L80:
 763 0250 00000000 		.word	timer_value0
 764 0254 00000000 		.word	interrupt_flag
 765 0258 00000000 		.word	c_mem
 766 025c 00000000 		.word	N_Encoder_Line_Connected
 767 0260 00000000 		.word	pos_reconstruct
 768 0264 00000000 		.word	change_ext_ref_flag
 769              	.L47:
 347:..\src/interruptions.c ****                         }
 348:..\src/interruptions.c ****                         else {
 349:..\src/interruptions.c ****                             // Get only raw encoder value
 350:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 770              		.loc 1 350 0
 771 0268 07F58843 		add	r3, r7, #17408
 772 026c 03F15F03 		add	r3, r3, #95
 773 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0272 9E4A     		ldr	r2, .L82
 775 0274 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 776 0276 1A46     		mov	r2, r3
 777 0278 07F58843 		add	r3, r7, #17408
 778 027c 03F15F03 		add	r3, r3, #95
 779 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 780 0282 1946     		mov	r1, r3
 781 0284 1046     		mov	r0, r2
 782 0286 FFF7FEFF 		bl	ReadEncoderLine
 783              	.L46:
 351:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 352:..\src/interruptions.c ****                         }
 353:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 21


 354:..\src/interruptions.c **** 
 355:..\src/interruptions.c ****                     // Check Interrupt     
 356:..\src/interruptions.c ****                     
 357:..\src/interruptions.c ****                     if (interrupt_flag){
 784              		.loc 1 357 0
 785 028a 994B     		ldr	r3, .L82+4
 786 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 028e 002B     		cmp	r3, #0
 788 0290 04D0     		beq	.L44
 358:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 789              		.loc 1 358 0
 790 0292 974B     		ldr	r3, .L82+4
 791 0294 0022     		movs	r2, #0
 792 0296 1A70     		strb	r2, [r3]
 359:..\src/interruptions.c ****                         interrupt_manager();
 793              		.loc 1 359 0
 794 0298 FFF7FEFF 		bl	interrupt_manager
 795              	.L44:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 796              		.loc 1 334 0 discriminator 2
 797 029c 07F58843 		add	r3, r7, #17408
 798 02a0 03F15F03 		add	r3, r3, #95
 799 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 02a6 0133     		adds	r3, r3, #1
 801 02a8 07F58842 		add	r2, r7, #17408
 802 02ac 02F15F02 		add	r2, r2, #95
 803 02b0 1370     		strb	r3, [r2]
 804              	.L43:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 805              		.loc 1 334 0 is_stmt 0 discriminator 1
 806 02b2 07F58843 		add	r3, r7, #17408
 807 02b6 03F15F03 		add	r3, r3, #95
 808 02ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02bc 012B     		cmp	r3, #1
 810 02be 7FF66EAF 		bls	.L48
 811              	.LBE2:
 360:..\src/interruptions.c ****                     }
 361:..\src/interruptions.c ****                 }
 362:..\src/interruptions.c ****             } 
 363:..\src/interruptions.c ****             
 364:..\src/interruptions.c ****             //---------------------------------- Control Motor
 365:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 812              		.loc 1 365 0 is_stmt 1
 813 02c2 07F58843 		add	r3, r7, #17408
 814 02c6 03F15E03 		add	r3, r3, #94
 815 02ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 816 02cc 8949     		ldr	r1, .L82+8
 817 02ce 1346     		mov	r3, r2
 818 02d0 DB00     		lsls	r3, r3, #3
 819 02d2 9B1A     		subs	r3, r3, r2
 820 02d4 1B01     		lsls	r3, r3, #4
 821 02d6 0B44     		add	r3, r3, r1
 822 02d8 03F58873 		add	r3, r3, #272
 823 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 02de 1A46     		mov	r2, r3
 825 02e0 854B     		ldr	r3, .L82+12
 826 02e2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 22


 827 02e4 002B     		cmp	r3, #0
 828 02e6 2AD0     		beq	.L49
 366:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 367:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 829              		.loc 1 367 0
 830 02e8 07F58843 		add	r3, r7, #17408
 831 02ec 03F15E03 		add	r3, r3, #94
 832 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 02f2 1846     		mov	r0, r3
 834 02f4 FFF7FEFF 		bl	motor_control_generic
 368:..\src/interruptions.c ****                 
 369:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 835              		.loc 1 370 0
 836 02f8 07F58843 		add	r3, r7, #17408
 837 02fc 03F15E03 		add	r3, r3, #94
 838 0300 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 839 0302 7C49     		ldr	r1, .L82+8
 840 0304 1346     		mov	r3, r2
 841 0306 DB00     		lsls	r3, r3, #3
 842 0308 9B1A     		subs	r3, r3, r2
 843 030a 1B01     		lsls	r3, r3, #4
 844 030c 0B44     		add	r3, r3, r1
 845 030e 03F58973 		add	r3, r3, #274
 846 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847 0314 012B     		cmp	r3, #1
 848 0316 12D1     		bne	.L49
 371:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 849              		.loc 1 371 0
 850 0318 07F58843 		add	r3, r7, #17408
 851 031c 03F15E03 		add	r3, r3, #94
 852 0320 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 853 0322 7449     		ldr	r1, .L82+8
 854 0324 1346     		mov	r3, r2
 855 0326 DB00     		lsls	r3, r3, #3
 856 0328 9B1A     		subs	r3, r3, r2
 857 032a 1B01     		lsls	r3, r3, #4
 858 032c 0B44     		add	r3, r3, r1
 859 032e 03F58773 		add	r3, r3, #270
 860 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 861 0334 002B     		cmp	r3, #0
 862 0336 02D1     		bne	.L49
 372:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 863              		.loc 1 372 0
 864 0338 704B     		ldr	r3, .L82+16
 865 033a 0022     		movs	r2, #0
 866 033c 1A70     		strb	r2, [r3]
 867              	.L49:
 373:..\src/interruptions.c ****                     }   
 374:..\src/interruptions.c ****                 }
 375:..\src/interruptions.c ****                      
 376:..\src/interruptions.c ****                 
 377:..\src/interruptions.c ****             }
 378:..\src/interruptions.c ****             
 379:..\src/interruptions.c ****             // Check Interrupt 
 380:..\src/interruptions.c **** 
 381:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 23


 868              		.loc 1 381 0
 869 033e 6C4B     		ldr	r3, .L82+4
 870 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 871 0342 002B     		cmp	r3, #0
 872 0344 04D0     		beq	.L50
 382:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 873              		.loc 1 382 0
 874 0346 6A4B     		ldr	r3, .L82+4
 875 0348 0022     		movs	r2, #0
 876 034a 1A70     		strb	r2, [r3]
 383:..\src/interruptions.c ****                 interrupt_manager();
 877              		.loc 1 383 0
 878 034c FFF7FEFF 		bl	interrupt_manager
 879              	.L50:
 384:..\src/interruptions.c ****             }
 385:..\src/interruptions.c ****             
 386:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 387:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 880              		.loc 1 387 0
 881 0350 684B     		ldr	r3, .L82+8
 882 0352 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 883 0356 012B     		cmp	r3, #1
 884 0358 40F0C580 		bne	.L78
 388:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 885              		.loc 1 388 0
 886 035c 07F58843 		add	r3, r7, #17408
 887 0360 03F15D03 		add	r3, r3, #93
 888 0364 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 889 0366 6349     		ldr	r1, .L82+8
 890 0368 1346     		mov	r3, r2
 891 036a DB00     		lsls	r3, r3, #3
 892 036c 9B1A     		subs	r3, r3, r2
 893 036e 1B01     		lsls	r3, r3, #4
 894 0370 0B44     		add	r3, r3, r1
 895 0372 03F58873 		add	r3, r3, #272
 896 0376 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0378 1A46     		mov	r2, r3
 898 037a 5F4B     		ldr	r3, .L82+12
 899 037c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 900 037e 002B     		cmp	r3, #0
 901 0380 2AD0     		beq	.L52
 389:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 902              		.loc 1 389 0
 903 0382 07F58843 		add	r3, r7, #17408
 904 0386 03F15D03 		add	r3, r3, #93
 905 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 038c 1846     		mov	r0, r3
 907 038e FFF7FEFF 		bl	motor_control_generic
 390:..\src/interruptions.c ****                     
 391:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 392:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 908              		.loc 1 392 0
 909 0392 07F58843 		add	r3, r7, #17408
 910 0396 03F15D03 		add	r3, r3, #93
 911 039a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 912 039c 5549     		ldr	r1, .L82+8
 913 039e 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 24


 914 03a0 DB00     		lsls	r3, r3, #3
 915 03a2 9B1A     		subs	r3, r3, r2
 916 03a4 1B01     		lsls	r3, r3, #4
 917 03a6 0B44     		add	r3, r3, r1
 918 03a8 03F58973 		add	r3, r3, #274
 919 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 920 03ae 012B     		cmp	r3, #1
 921 03b0 12D1     		bne	.L52
 393:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 922              		.loc 1 393 0
 923 03b2 07F58843 		add	r3, r7, #17408
 924 03b6 03F15D03 		add	r3, r3, #93
 925 03ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 926 03bc 4D49     		ldr	r1, .L82+8
 927 03be 1346     		mov	r3, r2
 928 03c0 DB00     		lsls	r3, r3, #3
 929 03c2 9B1A     		subs	r3, r3, r2
 930 03c4 1B01     		lsls	r3, r3, #4
 931 03c6 0B44     		add	r3, r3, r1
 932 03c8 03F58773 		add	r3, r3, #270
 933 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934 03ce 002B     		cmp	r3, #0
 935 03d0 02D1     		bne	.L52
 394:..\src/interruptions.c ****                             change_ext_ref_flag = FALSE;
 936              		.loc 1 394 0
 937 03d2 4A4B     		ldr	r3, .L82+16
 938 03d4 0022     		movs	r2, #0
 939 03d6 1A70     		strb	r2, [r3]
 940              	.L52:
 395:..\src/interruptions.c ****                         }   
 396:..\src/interruptions.c ****                     }
 397:..\src/interruptions.c ****                     
 398:..\src/interruptions.c ****                   
 399:..\src/interruptions.c ****                 }
 400:..\src/interruptions.c ****                 // Check Interrupt 
 401:..\src/interruptions.c **** 
 402:..\src/interruptions.c ****                 if (interrupt_flag){
 941              		.loc 1 402 0
 942 03d8 454B     		ldr	r3, .L82+4
 943 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 03dc 002B     		cmp	r3, #0
 945 03de 00F08280 		beq	.L78
 403:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 946              		.loc 1 403 0
 947 03e2 434B     		ldr	r3, .L82+4
 948 03e4 0022     		movs	r2, #0
 949 03e6 1A70     		strb	r2, [r3]
 404:..\src/interruptions.c ****                     interrupt_manager();
 950              		.loc 1 404 0
 951 03e8 FFF7FEFF 		bl	interrupt_manager
 405:..\src/interruptions.c ****                 }
 406:..\src/interruptions.c ****             }  
 407:..\src/interruptions.c ****             break;
 952              		.loc 1 407 0
 953 03ec 7BE0     		b	.L78
 954              	.L39:
 408:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 25


 409:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 410:..\src/interruptions.c ****             
 411:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 412:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 955              		.loc 1 412 0
 956 03ee 444B     		ldr	r3, .L82+20
 957 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 958 03f2 002B     		cmp	r3, #0
 959 03f4 38D0     		beq	.L53
 960              		.loc 1 412 0 is_stmt 0 discriminator 1
 961 03f6 3F4B     		ldr	r3, .L82+8
 962 03f8 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 963 03fc 002B     		cmp	r3, #0
 964 03fe 33D0     		beq	.L53
 413:..\src/interruptions.c ****                 
 414:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 965              		.loc 1 414 0 is_stmt 1
 966 0400 3C4B     		ldr	r3, .L82+8
 967 0402 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 968 0406 022B     		cmp	r3, #2
 969 0408 08D1     		bne	.L54
 415:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 970              		.loc 1 415 0
 971 040a 07F58843 		add	r3, r7, #17408
 972 040e 03F15D03 		add	r3, r3, #93
 973 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 0414 1846     		mov	r0, r3
 975 0416 FFF7FEFF 		bl	air_chambers_control
 976 041a 07E0     		b	.L55
 977              	.L54:
 416:..\src/interruptions.c ****                 }
 417:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 418:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 978              		.loc 1 418 0
 979 041c 07F58843 		add	r3, r7, #17408
 980 0420 03F15D03 		add	r3, r3, #93
 981 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 0426 1846     		mov	r0, r3
 983 0428 FFF7FEFF 		bl	otbk_act_wrist_control
 984              	.L55:
 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c **** 
 421:..\src/interruptions.c ****                 // Check Interrupt 
 422:..\src/interruptions.c **** 
 423:..\src/interruptions.c ****                 if (interrupt_flag){
 985              		.loc 1 423 0
 986 042c 304B     		ldr	r3, .L82+4
 987 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0430 002B     		cmp	r3, #0
 989 0432 04D0     		beq	.L56
 424:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 990              		.loc 1 424 0
 991 0434 2E4B     		ldr	r3, .L82+4
 992 0436 0022     		movs	r2, #0
 993 0438 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****                     interrupt_manager();
 994              		.loc 1 425 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 26


 995 043a FFF7FEFF 		bl	interrupt_manager
 996              	.L56:
 426:..\src/interruptions.c ****                 }
 427:..\src/interruptions.c ****             
 428:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 997              		.loc 1 428 0
 998 043e 2D4B     		ldr	r3, .L82+8
 999 0440 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 1000 0444 07F58843 		add	r3, r7, #17408
 1001 0448 03F15D03 		add	r3, r3, #93
 1002 044c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 044e 1146     		mov	r1, r2
 1004 0450 1846     		mov	r0, r3
 1005 0452 FFF7FEFF 		bl	drive_slave
 429:..\src/interruptions.c ****             
 430:..\src/interruptions.c ****                 // Check Interrupt 
 431:..\src/interruptions.c **** 
 432:..\src/interruptions.c ****                 if (interrupt_flag){
 1006              		.loc 1 432 0
 1007 0456 264B     		ldr	r3, .L82+4
 1008 0458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 045a 002B     		cmp	r3, #0
 1010 045c 04D0     		beq	.L53
 433:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1011              		.loc 1 433 0
 1012 045e 244B     		ldr	r3, .L82+4
 1013 0460 0022     		movs	r2, #0
 1014 0462 1A70     		strb	r2, [r3]
 434:..\src/interruptions.c ****                     interrupt_manager();
 1015              		.loc 1 434 0
 1016 0464 FFF7FEFF 		bl	interrupt_manager
 1017              	.L53:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****             }
 437:..\src/interruptions.c ****             if (!master_mode){
 1018              		.loc 1 437 0
 1019 0468 254B     		ldr	r3, .L82+20
 1020 046a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 046c 002B     		cmp	r3, #0
 1022 046e 11D1     		bne	.L57
 438:..\src/interruptions.c ****                 
 439:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 1023              		.loc 1 439 0
 1024 0470 204B     		ldr	r3, .L82+8
 1025 0472 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 1026 0476 002B     		cmp	r3, #0
 1027 0478 01D0     		beq	.L58
 440:..\src/interruptions.c ****                     // Stop feedback motors
 441:..\src/interruptions.c ****                     stop_master_device();
 1028              		.loc 1 441 0
 1029 047a FFF7FEFF 		bl	stop_master_device
 1030              	.L58:
 442:..\src/interruptions.c ****                 }
 443:..\src/interruptions.c ****                 // Disable slave or motors
 444:..\src/interruptions.c ****                 deactivate_slaves();
 1031              		.loc 1 444 0
 1032 047e FFF7FEFF 		bl	deactivate_slaves
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 27


 445:..\src/interruptions.c ****                         
 446:..\src/interruptions.c ****                 // Check Interrupt 
 447:..\src/interruptions.c ****                 if (interrupt_flag){
 1033              		.loc 1 447 0
 1034 0482 1B4B     		ldr	r3, .L82+4
 1035 0484 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0486 002B     		cmp	r3, #0
 1037 0488 04D0     		beq	.L57
 448:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1038              		.loc 1 448 0
 1039 048a 194B     		ldr	r3, .L82+4
 1040 048c 0022     		movs	r2, #0
 1041 048e 1A70     		strb	r2, [r3]
 449:..\src/interruptions.c ****                     interrupt_manager();
 1042              		.loc 1 449 0
 1043 0490 FFF7FEFF 		bl	interrupt_manager
 1044              	.L57:
 450:..\src/interruptions.c ****                 } 
 451:..\src/interruptions.c ****             }
 452:..\src/interruptions.c ****     
 453:..\src/interruptions.c ****             // Control Master device main motor 
 454:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 455:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1045              		.loc 1 455 0
 1046 0494 07F58843 		add	r3, r7, #17408
 1047 0498 03F15E03 		add	r3, r3, #94
 1048 049c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049 049e 1846     		mov	r0, r3
 1050 04a0 FFF7FEFF 		bl	motor_control_generic
 456:..\src/interruptions.c ****                         
 457:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 458:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1051              		.loc 1 458 0
 1052 04a4 134B     		ldr	r3, .L82+8
 1053 04a6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1054 04aa 032B     		cmp	r3, #3
 1055 04ac 0FD1     		bne	.L59
 459:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1056              		.loc 1 459 0
 1057 04ae 154B     		ldr	r3, .L82+24
 1058 04b0 9B68     		ldr	r3, [r3, #8]
 1059 04b2 432B     		cmp	r3, #67
 1060 04b4 02DD     		ble	.L60
 460:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1061              		.loc 1 460 0
 1062 04b6 134B     		ldr	r3, .L82+24
 1063 04b8 4322     		movs	r2, #67
 1064 04ba 9A60     		str	r2, [r3, #8]
 1065              	.L60:
 461:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1066              		.loc 1 461 0
 1067 04bc 114B     		ldr	r3, .L82+24
 1068 04be 9B68     		ldr	r3, [r3, #8]
 1069 04c0 13F1430F 		cmn	r3, #67
 1070 04c4 03DA     		bge	.L59
 462:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1071              		.loc 1 462 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 28


 1072 04c6 0F4B     		ldr	r3, .L82+24
 1073 04c8 6FF04202 		mvn	r2, #66
 1074 04cc 9A60     		str	r2, [r3, #8]
 1075              	.L59:
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             // Check Interrupt 
 466:..\src/interruptions.c **** 
 467:..\src/interruptions.c ****             if (interrupt_flag){
 1076              		.loc 1 467 0
 1077 04ce 084B     		ldr	r3, .L82+4
 1078 04d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 04d2 002B     		cmp	r3, #0
 1080 04d4 18D0     		beq	.L79
 468:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1081              		.loc 1 468 0
 1082 04d6 064B     		ldr	r3, .L82+4
 1083 04d8 0022     		movs	r2, #0
 1084 04da 1A70     		strb	r2, [r3]
 469:..\src/interruptions.c ****                 interrupt_manager();
 1085              		.loc 1 469 0
 1086 04dc FFF7FEFF 		bl	interrupt_manager
 470:..\src/interruptions.c ****             }
 471:..\src/interruptions.c ****             
 472:..\src/interruptions.c ****             break;
 1087              		.loc 1 472 0
 1088 04e0 12E0     		b	.L79
 1089              	.L77:
 329:..\src/interruptions.c ****             
 1090              		.loc 1 329 0
 1091 04e2 00BF     		nop
 1092 04e4 11E0     		b	.L35
 1093              	.L78:
 407:..\src/interruptions.c ****             
 1094              		.loc 1 407 0
 1095 04e6 00BF     		nop
 1096 04e8 0FE0     		b	.L35
 1097              	.L83:
 1098 04ea 00BF     		.align	2
 1099              	.L82:
 1100 04ec 00000000 		.word	N_Encoder_Line_Connected
 1101 04f0 00000000 		.word	interrupt_flag
 1102 04f4 00000000 		.word	c_mem
 1103 04f8 00000000 		.word	pos_reconstruct
 1104 04fc 00000000 		.word	change_ext_ref_flag
 1105 0500 00000000 		.word	master_mode
 1106 0504 00000000 		.word	g_refNew
 1107              	.L79:
 1108              		.loc 1 472 0
 1109 0508 00BF     		nop
 1110              	.L35:
 473:..\src/interruptions.c ****     }
 474:..\src/interruptions.c **** 
 475:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     analog_read_end();
 1111              		.loc 1 477 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 29


 1112 050a FFF7FEFF 		bl	analog_read_end
 478:..\src/interruptions.c **** 
 479:..\src/interruptions.c ****     if (interrupt_flag){
 1113              		.loc 1 479 0
 1114 050e AB4B     		ldr	r3, .L84
 1115 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1116 0512 002B     		cmp	r3, #0
 1117 0514 04D0     		beq	.L62
 480:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1118              		.loc 1 480 0
 1119 0516 A94B     		ldr	r3, .L84
 1120 0518 0022     		movs	r2, #0
 1121 051a 1A70     		strb	r2, [r3]
 481:..\src/interruptions.c ****         interrupt_manager();
 1122              		.loc 1 481 0
 1123 051c FFF7FEFF 		bl	interrupt_manager
 1124              	.L62:
 482:..\src/interruptions.c ****     }
 483:..\src/interruptions.c **** 
 484:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 485:..\src/interruptions.c **** 
 486:..\src/interruptions.c ****     overcurrent_control();
 1125              		.loc 1 486 0
 1126 0520 FFF7FEFF 		bl	overcurrent_control
 487:..\src/interruptions.c ****     
 488:..\src/interruptions.c ****     // Check Interrupt 
 489:..\src/interruptions.c ****     
 490:..\src/interruptions.c ****     if (interrupt_flag){
 1127              		.loc 1 490 0
 1128 0524 A54B     		ldr	r3, .L84
 1129 0526 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0528 002B     		cmp	r3, #0
 1131 052a 04D0     		beq	.L63
 491:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1132              		.loc 1 491 0
 1133 052c A34B     		ldr	r3, .L84
 1134 052e 0022     		movs	r2, #0
 1135 0530 1A70     		strb	r2, [r3]
 492:..\src/interruptions.c ****         interrupt_manager();
 1136              		.loc 1 492 0
 1137 0532 FFF7FEFF 		bl	interrupt_manager
 1138              	.L63:
 493:..\src/interruptions.c ****     }
 494:..\src/interruptions.c **** 
 495:..\src/interruptions.c ****     //---------------------------------- Calibration 
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 498:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1139              		.loc 1 498 0
 1140 0536 A24B     		ldr	r3, .L84+4
 1141 0538 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 053a 012B     		cmp	r3, #1
 1143 053c 0ED1     		bne	.L64
 499:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1144              		.loc 1 499 0
 1145 053e A14B     		ldr	r3, .L84+8
 1146 0540 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 30


 1147 0542 0A2B     		cmp	r3, #10
 1148 0544 04D1     		bne	.L65
 500:..\src/interruptions.c ****             calibration();
 1149              		.loc 1 500 0
 1150 0546 FFF7FEFF 		bl	calibration
 501:..\src/interruptions.c ****             counter_calibration = 0;
 1151              		.loc 1 501 0
 1152 054a 9E4B     		ldr	r3, .L84+8
 1153 054c 0022     		movs	r2, #0
 1154 054e 1A80     		strh	r2, [r3]	@ movhi
 1155              	.L65:
 502:..\src/interruptions.c ****         }
 503:..\src/interruptions.c ****         counter_calibration++;
 1156              		.loc 1 503 0
 1157 0550 9C4B     		ldr	r3, .L84+8
 1158 0552 1B88     		ldrh	r3, [r3]
 1159 0554 0133     		adds	r3, r3, #1
 1160 0556 9AB2     		uxth	r2, r3
 1161 0558 9A4B     		ldr	r3, .L84+8
 1162 055a 1A80     		strh	r2, [r3]	@ movhi
 1163              	.L64:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c **** 
 506:..\src/interruptions.c ****     // Check Interrupt 
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****     if (interrupt_flag){
 1164              		.loc 1 508 0
 1165 055c 974B     		ldr	r3, .L84
 1166 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 0560 002B     		cmp	r3, #0
 1168 0562 04D0     		beq	.L66
 509:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1169              		.loc 1 509 0
 1170 0564 954B     		ldr	r3, .L84
 1171 0566 0022     		movs	r2, #0
 1172 0568 1A70     		strb	r2, [r3]
 510:..\src/interruptions.c ****         interrupt_manager();
 1173              		.loc 1 510 0
 1174 056a FFF7FEFF 		bl	interrupt_manager
 1175              	.L66:
 511:..\src/interruptions.c ****     }
 512:..\src/interruptions.c ****     
 513:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1176              		.loc 1 513 0
 1177 056e 964B     		ldr	r3, .L84+12
 1178 0570 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1179 0574 002B     		cmp	r3, #0
 1180 0576 1CD1     		bne	.L67
 514:..\src/interruptions.c ****     
 515:..\src/interruptions.c ****         //---------------------------------- Rest position check
 516:..\src/interruptions.c **** 
 517:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 518:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1181              		.loc 1 518 0
 1182 0578 934B     		ldr	r3, .L84+12
 1183 057a 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1184 057e 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 31


 1185 0580 17D1     		bne	.L67
 519:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1186              		.loc 1 519 0
 1187 0582 904B     		ldr	r3, .L84+8
 1188 0584 1B88     		ldrh	r3, [r3]
 1189 0586 0A2B     		cmp	r3, #10
 1190 0588 04D1     		bne	.L68
 520:..\src/interruptions.c ****                     check_rest_position();
 1191              		.loc 1 520 0
 1192 058a FFF7FEFF 		bl	check_rest_position
 521:..\src/interruptions.c ****                     counter_calibration = 0;
 1193              		.loc 1 521 0
 1194 058e 8D4B     		ldr	r3, .L84+8
 1195 0590 0022     		movs	r2, #0
 1196 0592 1A80     		strh	r2, [r3]	@ movhi
 1197              	.L68:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****             counter_calibration++;
 1198              		.loc 1 523 0
 1199 0594 8B4B     		ldr	r3, .L84+8
 1200 0596 1B88     		ldrh	r3, [r3]
 1201 0598 0133     		adds	r3, r3, #1
 1202 059a 9AB2     		uxth	r2, r3
 1203 059c 894B     		ldr	r3, .L84+8
 1204 059e 1A80     		strh	r2, [r3]	@ movhi
 524:..\src/interruptions.c **** 
 525:..\src/interruptions.c ****             // Check Interrupt     
 526:..\src/interruptions.c ****             if (interrupt_flag){
 1205              		.loc 1 526 0
 1206 05a0 864B     		ldr	r3, .L84
 1207 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 05a4 002B     		cmp	r3, #0
 1209 05a6 04D0     		beq	.L67
 527:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1210              		.loc 1 527 0
 1211 05a8 844B     		ldr	r3, .L84
 1212 05aa 0022     		movs	r2, #0
 1213 05ac 1A70     		strb	r2, [r3]
 528:..\src/interruptions.c ****                 interrupt_manager();
 1214              		.loc 1 528 0
 1215 05ae FFF7FEFF 		bl	interrupt_manager
 1216              	.L67:
 529:..\src/interruptions.c ****             }
 530:..\src/interruptions.c ****         }
 531:..\src/interruptions.c ****         
 532:..\src/interruptions.c ****     }
 533:..\src/interruptions.c ****     
 534:..\src/interruptions.c ****      
 535:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 536:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1217              		.loc 1 536 0
 1218 05b2 854B     		ldr	r3, .L84+12
 1219 05b4 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1220 05b8 002B     		cmp	r3, #0
 1221 05ba 0AD0     		beq	.L69
 537:..\src/interruptions.c ****         
 538:..\src/interruptions.c ****         update_EMG_history();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 32


 1222              		.loc 1 538 0
 1223 05bc FFF7FEFF 		bl	update_EMG_history
 539:..\src/interruptions.c **** 
 540:..\src/interruptions.c ****         // Check Interrupt 
 541:..\src/interruptions.c **** 
 542:..\src/interruptions.c ****         if (interrupt_flag){
 1224              		.loc 1 542 0
 1225 05c0 7E4B     		ldr	r3, .L84
 1226 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1227 05c4 002B     		cmp	r3, #0
 1228 05c6 04D0     		beq	.L69
 543:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1229              		.loc 1 543 0
 1230 05c8 7C4B     		ldr	r3, .L84
 1231 05ca 0022     		movs	r2, #0
 1232 05cc 1A70     		strb	r2, [r3]
 544:..\src/interruptions.c ****             interrupt_manager();
 1233              		.loc 1 544 0
 1234 05ce FFF7FEFF 		bl	interrupt_manager
 1235              	.L69:
 545:..\src/interruptions.c ****         }
 546:..\src/interruptions.c ****     }
 547:..\src/interruptions.c **** 
 548:..\src/interruptions.c ****     
 549:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1236              		.loc 1 551 0
 1237 05d2 7D4B     		ldr	r3, .L84+12
 1238 05d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1239 05d8 1A46     		mov	r2, r3
 1240 05da 7C4B     		ldr	r3, .L84+16
 1241 05dc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1242 05de 002B     		cmp	r3, #0
 1243 05e0 01D0     		beq	.L70
 552:..\src/interruptions.c ****         cycles_counter_update();
 1244              		.loc 1 552 0
 1245 05e2 FFF7FEFF 		bl	cycles_counter_update
 1246              	.L70:
 553:..\src/interruptions.c ****     }
 554:..\src/interruptions.c **** 
 555:..\src/interruptions.c ****     // Check Cycles Interrupt 
 556:..\src/interruptions.c ****     
 557:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1247              		.loc 1 557 0
 1248 05e6 7A4B     		ldr	r3, .L84+20
 1249 05e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 05ea 002B     		cmp	r3, #0
 1251 05ec 5BD0     		beq	.L71
 558:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1252              		.loc 1 558 0
 1253 05ee 784B     		ldr	r3, .L84+20
 1254 05f0 0022     		movs	r2, #0
 1255 05f2 1A70     		strb	r2, [r3]
 559:..\src/interruptions.c **** 
 560:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 561:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 33


 562:..\src/interruptions.c ****         if(can_write) {
 1256              		.loc 1 562 0
 1257 05f4 774B     		ldr	r3, .L84+24
 1258 05f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1259 05f8 002B     		cmp	r3, #0
 1260 05fa 54D0     		beq	.L71
 563:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1261              		.loc 1 563 0
 1262 05fc 764B     		ldr	r3, .L84+28
 1263 05fe 0022     		movs	r2, #0
 1264 0600 1A70     		strb	r2, [r3]
 564:..\src/interruptions.c ****             
 565:..\src/interruptions.c ****             //Update time variable
 566:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1265              		.loc 1 566 0
 1266 0602 764B     		ldr	r3, .L84+32
 1267 0604 9B6D     		ldr	r3, [r3, #88]
 1268 0606 7833     		adds	r3, r3, #120
 1269 0608 744A     		ldr	r2, .L84+32
 1270 060a 9365     		str	r3, [r2, #88]
 567:..\src/interruptions.c ****             
 568:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1271              		.loc 1 568 0
 1272 060c 6E4B     		ldr	r3, .L84+12
 1273 060e 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1274 0612 012B     		cmp	r3, #1
 1275 0614 47D1     		bne	.L71
 569:..\src/interruptions.c ****                 
 570:..\src/interruptions.c ****                 store_RTC_current_time();
 1276              		.loc 1 570 0
 1277 0616 FFF7FEFF 		bl	store_RTC_current_time
 571:..\src/interruptions.c ****                 
 572:..\src/interruptions.c ****                 //Write in SD card
 573:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1278              		.loc 1 573 0
 1279 061a 07F56A53 		add	r3, r7, #14976
 1280 061e 03F11803 		add	r3, r3, #24
 1281 0622 1846     		mov	r0, r3
 1282 0624 FFF7FEFF 		bl	prepare_SD_info
 574:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1283              		.loc 1 574 0
 1284 0628 6D4B     		ldr	r3, .L84+36
 1285 062a 1C68     		ldr	r4, [r3]
 1286 062c 07F56A53 		add	r3, r7, #14976
 1287 0630 03F11803 		add	r3, r3, #24
 1288 0634 1846     		mov	r0, r3
 1289 0636 FFF7FEFF 		bl	strlen
 1290 063a 0246     		mov	r2, r0
 1291 063c 07F56A53 		add	r3, r7, #14976
 1292 0640 03F11803 		add	r3, r3, #24
 1293 0644 1946     		mov	r1, r3
 1294 0646 2046     		mov	r0, r4
 1295 0648 FFF7FEFF 		bl	FS_Write
 575:..\src/interruptions.c ****                 
 576:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1296              		.loc 1 576 0
 1297 064c 5E4B     		ldr	r3, .L84+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 34


 1298 064e 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1299 0652 002B     		cmp	r3, #0
 1300 0654 27D0     		beq	.L71
 1301              	.LBB3:
 577:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1302              		.loc 1 577 0
 1303 0656 07F16003 		add	r3, r7, #96
 1304 065a 603B     		subs	r3, r3, #96
 1305 065c 0022     		movs	r2, #0
 1306 065e 1A60     		str	r2, [r3]
 1307 0660 0433     		adds	r3, r3, #4
 1308 0662 43F69422 		movw	r2, #14996
 1309 0666 0021     		movs	r1, #0
 1310 0668 1846     		mov	r0, r3
 1311 066a FFF7FEFF 		bl	memset
 578:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1312              		.loc 1 578 0
 1313 066e 5D4B     		ldr	r3, .L84+40
 1314 0670 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1315 0672 07F16003 		add	r3, r7, #96
 1316 0676 603B     		subs	r3, r3, #96
 1317 0678 1A70     		strb	r2, [r3]
 579:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1318              		.loc 1 579 0
 1319 067a 07F16003 		add	r3, r7, #96
 1320 067e 603B     		subs	r3, r3, #96
 1321 0680 1846     		mov	r0, r3
 1322 0682 FFF7FEFF 		bl	prepare_SD_EMG_history
 580:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1323              		.loc 1 580 0
 1324 0686 584B     		ldr	r3, .L84+44
 1325 0688 1C68     		ldr	r4, [r3]
 1326 068a 07F16003 		add	r3, r7, #96
 1327 068e 603B     		subs	r3, r3, #96
 1328 0690 1846     		mov	r0, r3
 1329 0692 FFF7FEFF 		bl	strlen
 1330 0696 0246     		mov	r2, r0
 1331 0698 07F16003 		add	r3, r7, #96
 1332 069c 603B     		subs	r3, r3, #96
 1333 069e 1946     		mov	r1, r3
 1334 06a0 2046     		mov	r0, r4
 1335 06a2 FFF7FEFF 		bl	FS_Write
 1336              	.L71:
 1337              	.LBE3:
 581:..\src/interruptions.c ****                 }
 582:..\src/interruptions.c ****             }
 583:..\src/interruptions.c ****         }
 584:..\src/interruptions.c ****     }
 585:..\src/interruptions.c ****     
 586:..\src/interruptions.c ****     // Check Interrupt 
 587:..\src/interruptions.c ****     
 588:..\src/interruptions.c ****     if (interrupt_flag){
 1338              		.loc 1 588 0
 1339 06a6 454B     		ldr	r3, .L84
 1340 06a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1341 06aa 002B     		cmp	r3, #0
 1342 06ac 04D0     		beq	.L72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 35


 589:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1343              		.loc 1 589 0
 1344 06ae 434B     		ldr	r3, .L84
 1345 06b0 0022     		movs	r2, #0
 1346 06b2 1A70     		strb	r2, [r3]
 590:..\src/interruptions.c ****         interrupt_manager();
 1347              		.loc 1 590 0
 1348 06b4 FFF7FEFF 		bl	interrupt_manager
 1349              	.L72:
 591:..\src/interruptions.c ****     }
 592:..\src/interruptions.c ****     
 593:..\src/interruptions.c ****     
 594:..\src/interruptions.c ****     //---------------------------------- Check battery
 595:..\src/interruptions.c **** 
 596:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 597:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1350              		.loc 1 597 0
 1351 06b8 4C4B     		ldr	r3, .L84+48
 1352 06ba 1B88     		ldrh	r3, [r3]
 1353 06bc 0A2B     		cmp	r3, #10
 1354 06be 04D1     		bne	.L73
 598:..\src/interruptions.c ****         battery_management();   
 1355              		.loc 1 598 0
 1356 06c0 FFF7FEFF 		bl	battery_management
 599:..\src/interruptions.c ****         counter_tension_func = 0;
 1357              		.loc 1 599 0
 1358 06c4 494B     		ldr	r3, .L84+48
 1359 06c6 0022     		movs	r2, #0
 1360 06c8 1A80     		strh	r2, [r3]	@ movhi
 1361              	.L73:
 600:..\src/interruptions.c ****     }
 601:..\src/interruptions.c ****     counter_tension_func++;
 1362              		.loc 1 601 0
 1363 06ca 484B     		ldr	r3, .L84+48
 1364 06cc 1B88     		ldrh	r3, [r3]
 1365 06ce 0133     		adds	r3, r3, #1
 1366 06d0 9AB2     		uxth	r2, r3
 1367 06d2 464B     		ldr	r3, .L84+48
 1368 06d4 1A80     		strh	r2, [r3]	@ movhi
 602:..\src/interruptions.c **** 
 603:..\src/interruptions.c ****     // Check Interrupt 
 604:..\src/interruptions.c ****     
 605:..\src/interruptions.c ****     if (interrupt_flag){
 1369              		.loc 1 605 0
 1370 06d6 394B     		ldr	r3, .L84
 1371 06d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 06da 002B     		cmp	r3, #0
 1373 06dc 04D0     		beq	.L74
 606:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1374              		.loc 1 606 0
 1375 06de 374B     		ldr	r3, .L84
 1376 06e0 0022     		movs	r2, #0
 1377 06e2 1A70     		strb	r2, [r3]
 607:..\src/interruptions.c ****         interrupt_manager();
 1378              		.loc 1 607 0
 1379 06e4 FFF7FEFF 		bl	interrupt_manager
 1380              	.L74:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 36


 608:..\src/interruptions.c ****     }
 609:..\src/interruptions.c ****    
 610:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 611:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1381              		.loc 1 611 0
 1382 06e8 374B     		ldr	r3, .L84+12
 1383 06ea 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1384 06ee 002B     		cmp	r3, #0
 1385 06f0 0AD0     		beq	.L75
 612:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1386              		.loc 1 612 0
 1387 06f2 FFF7FEFF 		bl	ReadAllIMUs
 613:..\src/interruptions.c ****         
 614:..\src/interruptions.c ****         if (interrupt_flag){
 1388              		.loc 1 614 0
 1389 06f6 314B     		ldr	r3, .L84
 1390 06f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1391 06fa 002B     		cmp	r3, #0
 1392 06fc 04D0     		beq	.L75
 615:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1393              		.loc 1 615 0
 1394 06fe 2F4B     		ldr	r3, .L84
 1395 0700 0022     		movs	r2, #0
 1396 0702 1A70     		strb	r2, [r3]
 616:..\src/interruptions.c ****             interrupt_manager();
 1397              		.loc 1 616 0
 1398 0704 FFF7FEFF 		bl	interrupt_manager
 1399              	.L75:
 617:..\src/interruptions.c ****         }
 618:..\src/interruptions.c ****     }
 619:..\src/interruptions.c ****    
 620:..\src/interruptions.c ****     //---------------------------------- Update States
 621:..\src/interruptions.c ****     
 622:..\src/interruptions.c ****     // Load k-1 state
 623:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1400              		.loc 1 623 0
 1401 0708 394A     		ldr	r2, .L84+52
 1402 070a 3A4B     		ldr	r3, .L84+56
 1403 070c 1446     		mov	r4, r2
 1404 070e 1D46     		mov	r5, r3
 1405 0710 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1406 0712 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1407 0714 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1408 0716 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1409 0718 95E80300 		ldmia	r5, {r0, r1}
 1410 071c 84E80300 		stmia	r4, {r0, r1}
 624:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1411              		.loc 1 624 0
 1412 0720 354A     		ldr	r2, .L84+60
 1413 0722 364B     		ldr	r3, .L84+64
 1414 0724 1046     		mov	r0, r2
 1415 0726 1946     		mov	r1, r3
 1416 0728 6823     		movs	r3, #104
 1417 072a 1A46     		mov	r2, r3
 1418 072c FFF7FEFF 		bl	memcpy
 625:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1419              		.loc 1 625 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 37


 1420 0730 334A     		ldr	r2, .L84+68
 1421 0732 344B     		ldr	r3, .L84+72
 1422 0734 1446     		mov	r4, r2
 1423 0736 1D46     		mov	r5, r3
 1424 0738 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1425 073a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1426 073c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1427 0740 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c ****     // Load k+1 state        
 628:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1428              		.loc 1 628 0
 1429 0744 2F4A     		ldr	r2, .L84+72
 1430 0746 304B     		ldr	r3, .L84+76
 1431 0748 1446     		mov	r4, r2
 1432 074a 1D46     		mov	r5, r3
 1433 074c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1434 074e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1435 0750 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1436 0754 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 629:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1437              		.loc 1 629 0
 1438 0758 2C4A     		ldr	r2, .L84+80
 1439 075a 2D4B     		ldr	r3, .L84+84
 1440 075c 1046     		mov	r0, r2
 1441 075e 1946     		mov	r1, r3
 1442 0760 C823     		movs	r3, #200
 1443 0762 1A46     		mov	r2, r3
 1444 0764 FFF7FEFF 		bl	memcpy
 630:..\src/interruptions.c ****                 
 631:..\src/interruptions.c ****     if (interrupt_flag){
 1445              		.loc 1 631 0
 1446 0768 144B     		ldr	r3, .L84
 1447 076a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 076c 002B     		cmp	r3, #0
 1449 076e 04D0     		beq	.L76
 632:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1450              		.loc 1 632 0
 1451 0770 124B     		ldr	r3, .L84
 1452 0772 0022     		movs	r2, #0
 1453 0774 1A70     		strb	r2, [r3]
 633:..\src/interruptions.c ****         interrupt_manager();
 1454              		.loc 1 633 0
 1455 0776 FFF7FEFF 		bl	interrupt_manager
 1456              	.L76:
 634:..\src/interruptions.c ****     }
 635:..\src/interruptions.c **** 
 636:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1457              		.loc 1 636 0
 1458 077a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1459 077e 0346     		mov	r3, r0
 1460 0780 1A46     		mov	r2, r3
 1461 0782 244B     		ldr	r3, .L84+88
 1462 0784 1A80     		strh	r2, [r3]	@ movhi
 637:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1463              		.loc 1 637 0
 1464 0786 244B     		ldr	r3, .L84+92
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 38


 1465 0788 1B88     		ldrh	r3, [r3]
 1466 078a 1A46     		mov	r2, r3
 1467 078c 214B     		ldr	r3, .L84+88
 1468 078e 1B88     		ldrh	r3, [r3]
 1469 0790 D31A     		subs	r3, r2, r3
 1470 0792 1846     		mov	r0, r3
 1471 0794 FFF7FEFF 		bl	__aeabi_i2f
 1472 0798 0346     		mov	r3, r0
 1473 079a 2049     		ldr	r1, .L84+96
 1474 079c 1846     		mov	r0, r3
 1475 079e FFF7FEFF 		bl	__aeabi_fdiv
 1476 07a2 0346     		mov	r3, r0
 1477 07a4 1A46     		mov	r2, r3
 1478 07a6 1E4B     		ldr	r3, .L84+100
 1479 07a8 1A60     		str	r2, [r3]	@ float
 638:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1480              		.loc 1 638 0
 1481 07aa 0120     		movs	r0, #1
 1482 07ac FFF7FEFF 		bl	MY_TIMER_REG_Write
 639:..\src/interruptions.c **** 
 640:..\src/interruptions.c **** }
 1483              		.loc 1 640 0
 1484 07b0 00BF     		nop
 1485 07b2 07F58847 		add	r7, r7, #17408
 1486 07b6 6037     		adds	r7, r7, #96
 1487              		.cfi_def_cfa_offset 16
 1488 07b8 BD46     		mov	sp, r7
 1489              		.cfi_def_cfa_register 13
 1490              		@ sp needed
 1491 07ba B0BD     		pop	{r4, r5, r7, pc}
 1492              	.L85:
 1493              		.align	2
 1494              	.L84:
 1495 07bc 00000000 		.word	interrupt_flag
 1496 07c0 00000000 		.word	calib
 1497 07c4 00000000 		.word	counter_calibration.10467
 1498 07c8 00000000 		.word	c_mem
 1499 07cc 00000000 		.word	pos_reconstruct
 1500 07d0 00000000 		.word	cycles_interrupt_flag
 1501 07d4 00000000 		.word	can_write
 1502 07d8 00000000 		.word	cycles_status
 1503 07dc 00000000 		.word	g_mem
 1504 07e0 00000000 		.word	pFile
 1505 07e4 20000000 		.word	.LC0
 1506 07e8 00000000 		.word	pEMGHFile
 1507 07ec 02000000 		.word	counter_tension_func.10468
 1508 07f0 00000000 		.word	g_adc_measOld
 1509 07f4 00000000 		.word	g_adc_meas
 1510 07f8 00000000 		.word	g_measOld
 1511 07fc 00000000 		.word	g_meas
 1512 0800 00000000 		.word	g_refOld
 1513 0804 00000000 		.word	g_ref
 1514 0808 00000000 		.word	g_refNew
 1515 080c 00000000 		.word	g_imu
 1516 0810 00000000 		.word	g_imuNew
 1517 0814 00000000 		.word	timer_value
 1518 0818 00000000 		.word	timer_value0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 39


 1519 081c 00247449 		.word	1232348160
 1520 0820 00000000 		.word	cycle_time
 1521              		.cfi_endproc
 1522              	.LFE67:
 1523              		.size	function_scheduler, .-function_scheduler
 1524              		.section	.text.compute_reference,"ax",%progbits
 1525              		.align	2
 1526              		.global	compute_reference
 1527              		.thumb
 1528              		.thumb_func
 1529              		.type	compute_reference, %function
 1530              	compute_reference:
 1531              	.LFB68:
 641:..\src/interruptions.c **** 
 642:..\src/interruptions.c **** //==============================================================================
 643:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 644:..\src/interruptions.c **** //==============================================================================
 645:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1532              		.loc 1 645 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 40
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536 0000 80B5     		push	{r7, lr}
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 8CB0     		sub	sp, sp, #48
 1541              		.cfi_def_cfa_offset 56
 1542 0004 02AF     		add	r7, sp, #8
 1543              		.cfi_def_cfa 7, 48
 1544 0006 0346     		mov	r3, r0
 1545 0008 B960     		str	r1, [r7, #8]
 1546 000a 7A60     		str	r2, [r7, #4]
 1547 000c FB73     		strb	r3, [r7, #15]
 646:..\src/interruptions.c ****     
 647:..\src/interruptions.c ****     int32 CYDATA handle_value;
 648:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 649:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1548              		.loc 1 649 0
 1549 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1550 0010 1346     		mov	r3, r2
 1551 0012 DB00     		lsls	r3, r3, #3
 1552 0014 9B1A     		subs	r3, r3, r2
 1553 0016 1B01     		lsls	r3, r3, #4
 1554 0018 B033     		adds	r3, r3, #176
 1555 001a A74A     		ldr	r2, .L150
 1556 001c 1344     		add	r3, r3, r2
 1557 001e 3B62     		str	r3, [r7, #32]
 650:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1558              		.loc 1 650 0
 1559 0020 3B6A     		ldr	r3, [r7, #32]
 1560 0022 93F86030 		ldrb	r3, [r3, #96]
 1561 0026 FB77     		strb	r3, [r7, #31]
 651:..\src/interruptions.c ****     
 652:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 653:..\src/interruptions.c ****                                                         // 1 EMG 1
 654:..\src/interruptions.c ****                                                         // 2 EMG 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 40


 655:..\src/interruptions.c ****                                                         // wait for both to get down
 656:..\src/interruptions.c ****     
 657:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1562              		.loc 1 657 0
 1563 0028 A44B     		ldr	r3, .L150+4
 1564 002a 1B68     		ldr	r3, [r3]
 1565 002c A24A     		ldr	r2, .L150
 1566 002e B2F8F021 		ldrh	r2, [r2, #496]
 1567 0032 9B1A     		subs	r3, r3, r2
 1568 0034 BB61     		str	r3, [r7, #24]
 658:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1569              		.loc 1 658 0
 1570 0036 A14B     		ldr	r3, .L150+4
 1571 0038 5B68     		ldr	r3, [r3, #4]
 1572 003a 9F4A     		ldr	r2, .L150
 1573 003c B2F8F221 		ldrh	r2, [r2, #498]
 1574 0040 9B1A     		subs	r3, r3, r2
 1575 0042 7B61     		str	r3, [r7, #20]
 659:..\src/interruptions.c ****     
 660:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 661:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1576              		.loc 1 661 0
 1577 0044 3B6A     		ldr	r3, [r7, #32]
 1578 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1579 004a 013B     		subs	r3, r3, #1
 1580 004c 062B     		cmp	r3, #6
 1581 004e 00F25182 		bhi	.L142
 1582 0052 01A2     		adr	r2, .L89
 1583 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1584              		.p2align 2
 1585              	.L89:
 1586 0058 75000000 		.word	.L88+1
 1587 005c 21020000 		.word	.L90+1
 1588 0060 C9020000 		.word	.L91+1
 1589 0064 31030000 		.word	.L92+1
 1590 0068 11040000 		.word	.L93+1
 1591 006c 4D010000 		.word	.L94+1
 1592 0070 5B020000 		.word	.L95+1
 1593              		.p2align 1
 1594              	.L88:
 662:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 663:..\src/interruptions.c **** 
 664:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 665:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 666:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1595              		.loc 1 666 0
 1596 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1597 0076 9049     		ldr	r1, .L150
 1598 0078 1346     		mov	r3, r2
 1599 007a 5B00     		lsls	r3, r3, #1
 1600 007c 1344     		add	r3, r3, r2
 1601 007e 1B01     		lsls	r3, r3, #4
 1602 0080 0B44     		add	r3, r3, r1
 1603 0082 03F5D873 		add	r3, r3, #432
 1604 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1605 0088 002B     		cmp	r3, #0
 1606 008a 19D0     		beq	.L96
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 41


 667:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1607              		.loc 1 667 0
 1608 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1609 008e 8C4A     		ldr	r2, .L150+8
 1610 0090 3421     		movs	r1, #52
 1611 0092 01FB03F3 		mul	r3, r1, r3
 1612 0096 1344     		add	r3, r3, r2
 1613 0098 0833     		adds	r3, r3, #8
 1614 009a 1968     		ldr	r1, [r3]
 1615 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1616 009e 8648     		ldr	r0, .L150
 1617 00a0 1346     		mov	r3, r2
 1618 00a2 5B00     		lsls	r3, r3, #1
 1619 00a4 1344     		add	r3, r3, r2
 1620 00a6 1B01     		lsls	r3, r3, #4
 1621 00a8 0344     		add	r3, r3, r0
 1622 00aa 03F5DA73 		add	r3, r3, #436
 1623 00ae 93F90030 		ldrsb	r3, [r3]
 1624 00b2 03FB01F2 		mul	r2, r3, r1
 1625 00b6 3B6A     		ldr	r3, [r7, #32]
 1626 00b8 5B6B     		ldr	r3, [r3, #52]
 1627 00ba 1344     		add	r3, r3, r2
 1628 00bc 7B62     		str	r3, [r7, #36]
 1629 00be 18E0     		b	.L97
 1630              	.L96:
 668:..\src/interruptions.c ****             else
 669:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1631              		.loc 1 669 0
 1632 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1633 00c2 7F4A     		ldr	r2, .L150+8
 1634 00c4 3421     		movs	r1, #52
 1635 00c6 01FB03F3 		mul	r3, r1, r3
 1636 00ca 1344     		add	r3, r3, r2
 1637 00cc 0433     		adds	r3, r3, #4
 1638 00ce 1968     		ldr	r1, [r3]
 1639 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1640 00d2 7948     		ldr	r0, .L150
 1641 00d4 1346     		mov	r3, r2
 1642 00d6 5B00     		lsls	r3, r3, #1
 1643 00d8 1344     		add	r3, r3, r2
 1644 00da 1B01     		lsls	r3, r3, #4
 1645 00dc 0344     		add	r3, r3, r0
 1646 00de 03F5DA73 		add	r3, r3, #436
 1647 00e2 93F90030 		ldrsb	r3, [r3]
 1648 00e6 03FB01F2 		mul	r2, r3, r1
 1649 00ea 3B6A     		ldr	r3, [r7, #32]
 1650 00ec 5B6B     		ldr	r3, [r3, #52]
 1651 00ee 1344     		add	r3, r3, r2
 1652 00f0 7B62     		str	r3, [r7, #36]
 1653              	.L97:
 670:..\src/interruptions.c ****             
 671:..\src/interruptions.c **** 
 672:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 673:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1654              		.loc 1 673 0
 1655 00f2 7B68     		ldr	r3, [r7, #4]
 1656 00f4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 42


 1657 00f6 7A6A     		ldr	r2, [r7, #36]
 1658 00f8 D21A     		subs	r2, r2, r3
 1659 00fa 3B6A     		ldr	r3, [r7, #32]
 1660 00fc 1B6C     		ldr	r3, [r3, #64]
 1661 00fe 9A42     		cmp	r2, r3
 1662 0100 0BDD     		ble	.L98
 1663              		.loc 1 673 0 is_stmt 0 discriminator 1
 1664 0102 3B6A     		ldr	r3, [r7, #32]
 1665 0104 1B6C     		ldr	r3, [r3, #64]
 1666 0106 002B     		cmp	r3, #0
 1667 0108 07D0     		beq	.L98
 674:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1668              		.loc 1 674 0 is_stmt 1
 1669 010a BB68     		ldr	r3, [r7, #8]
 1670 010c 1A68     		ldr	r2, [r3]
 1671 010e 3B6A     		ldr	r3, [r7, #32]
 1672 0110 1B6C     		ldr	r3, [r3, #64]
 1673 0112 1A44     		add	r2, r2, r3
 1674 0114 BB68     		ldr	r3, [r7, #8]
 1675 0116 1A60     		str	r2, [r3]
 1676 0118 17E0     		b	.L99
 1677              	.L98:
 675:..\src/interruptions.c ****             else {
 676:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1678              		.loc 1 676 0
 1679 011a 7B68     		ldr	r3, [r7, #4]
 1680 011c 1B68     		ldr	r3, [r3]
 1681 011e 7A6A     		ldr	r2, [r7, #36]
 1682 0120 D21A     		subs	r2, r2, r3
 1683 0122 3B6A     		ldr	r3, [r7, #32]
 1684 0124 DB6B     		ldr	r3, [r3, #60]
 1685 0126 9A42     		cmp	r2, r3
 1686 0128 0BDA     		bge	.L100
 1687              		.loc 1 676 0 is_stmt 0 discriminator 1
 1688 012a 3B6A     		ldr	r3, [r7, #32]
 1689 012c DB6B     		ldr	r3, [r3, #60]
 1690 012e 002B     		cmp	r3, #0
 1691 0130 07D0     		beq	.L100
 677:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1692              		.loc 1 677 0 is_stmt 1
 1693 0132 BB68     		ldr	r3, [r7, #8]
 1694 0134 1A68     		ldr	r2, [r3]
 1695 0136 3B6A     		ldr	r3, [r7, #32]
 1696 0138 DB6B     		ldr	r3, [r3, #60]
 1697 013a 1A44     		add	r2, r2, r3
 1698 013c BB68     		ldr	r3, [r7, #8]
 1699 013e 1A60     		str	r2, [r3]
 1700 0140 03E0     		b	.L99
 1701              	.L100:
 678:..\src/interruptions.c ****                 else
 679:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1702              		.loc 1 679 0
 1703 0142 BB68     		ldr	r3, [r7, #8]
 1704 0144 7A6A     		ldr	r2, [r7, #36]
 1705 0146 1A60     		str	r2, [r3]
 680:..\src/interruptions.c ****             }
 681:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 43


 1706              		.loc 1 681 0
 1707 0148 DFE1     		b	.L101
 1708              	.L99:
 1709 014a DEE1     		b	.L101
 1710              	.L94:
 682:..\src/interruptions.c ****         
 683:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 684:..\src/interruptions.c ****             
 685:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1711              		.loc 1 685 0
 1712 014c 5A4B     		ldr	r3, .L150
 1713 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1714 0152 002B     		cmp	r3, #0
 1715 0154 57D1     		bne	.L102
 686:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 687:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1716              		.loc 1 687 0
 1717 0156 7B68     		ldr	r3, [r7, #4]
 1718 0158 1A68     		ldr	r2, [r3]
 1719 015a BB68     		ldr	r3, [r7, #8]
 1720 015c 1A60     		str	r2, [r3]
 688:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1721              		.loc 1 688 0
 1722 015e 574B     		ldr	r3, .L150+4
 1723 0160 1B6A     		ldr	r3, [r3, #32]
 1724 0162 B3F52F7F 		cmp	r3, #700
 1725 0166 45DC     		bgt	.L103
 1726              	.LBB4:
 689:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1727              		.loc 1 689 0
 1728 0168 544B     		ldr	r3, .L150+4
 1729 016a 1B6A     		ldr	r3, [r3, #32]
 1730 016c 524A     		ldr	r2, .L150
 1731 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1732 0172 9B1A     		subs	r3, r3, r2
 1733 0174 3B61     		str	r3, [r7, #16]
 690:..\src/interruptions.c **** 
 691:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1734              		.loc 1 691 0
 1735 0176 514B     		ldr	r3, .L150+4
 1736 0178 1B6A     		ldr	r3, [r3, #32]
 1737 017a 4F4A     		ldr	r2, .L150
 1738 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1739 0180 9342     		cmp	r3, r2
 1740 0182 13DD     		ble	.L104
 692:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1741              		.loc 1 692 0
 1742 0184 BB68     		ldr	r3, [r7, #8]
 1743 0186 1A68     		ldr	r2, [r3]
 1744 0188 4B4B     		ldr	r3, .L150
 1745 018a B3F8B032 		ldrh	r3, [r3, #688]
 1746 018e 1946     		mov	r1, r3
 1747 0190 3B69     		ldr	r3, [r7, #16]
 1748 0192 03FB01F1 		mul	r1, r3, r1
 1749 0196 484B     		ldr	r3, .L150
 1750 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1751 019c C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 44


 1752 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1753 01a4 1A44     		add	r2, r2, r3
 1754 01a6 BB68     		ldr	r3, [r7, #8]
 1755 01a8 1A60     		str	r2, [r3]
 1756              	.LBE4:
 693:..\src/interruptions.c ****                     }
 694:..\src/interruptions.c ****                     else {
 695:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 696:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 697:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 698:..\src/interruptions.c ****                         }
 699:..\src/interruptions.c ****                     }
 700:..\src/interruptions.c ****                 }
 701:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 702:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 703:..\src/interruptions.c ****                 }
 704:..\src/interruptions.c ****             }
 705:..\src/interruptions.c ****             else {
 706:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 707:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 708:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 709:..\src/interruptions.c ****                 }
 710:..\src/interruptions.c ****             }
 711:..\src/interruptions.c ****             break;
 1757              		.loc 1 711 0
 1758 01aa A5E1     		b	.L143
 1759              	.L104:
 1760              	.LBB5:
 695:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1761              		.loc 1 695 0
 1762 01ac 434B     		ldr	r3, .L150+4
 1763 01ae 1B6A     		ldr	r3, [r3, #32]
 1764 01b0 414A     		ldr	r2, .L150
 1765 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1766 01b6 1344     		add	r3, r3, r2
 1767 01b8 3B61     		str	r3, [r7, #16]
 696:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1768              		.loc 1 696 0
 1769 01ba 404B     		ldr	r3, .L150+4
 1770 01bc 1A6A     		ldr	r2, [r3, #32]
 1771 01be 3E4B     		ldr	r3, .L150
 1772 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1773 01c4 5B42     		negs	r3, r3
 1774 01c6 9A42     		cmp	r2, r3
 1775 01c8 80F29681 		bge	.L143
 697:..\src/interruptions.c ****                         }
 1776              		.loc 1 697 0
 1777 01cc BB68     		ldr	r3, [r7, #8]
 1778 01ce 1A68     		ldr	r2, [r3]
 1779 01d0 394B     		ldr	r3, .L150
 1780 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1781 01d6 1946     		mov	r1, r3
 1782 01d8 3B69     		ldr	r3, [r7, #16]
 1783 01da 03FB01F1 		mul	r1, r3, r1
 1784 01de 364B     		ldr	r3, .L150
 1785 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1786 01e4 C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 45


 1787 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1788 01ec 1A44     		add	r2, r2, r3
 1789 01ee BB68     		ldr	r3, [r7, #8]
 1790 01f0 1A60     		str	r2, [r3]
 1791              	.LBE5:
 1792              		.loc 1 711 0
 1793 01f2 81E1     		b	.L143
 1794              	.L103:
 702:..\src/interruptions.c ****                 }
 1795              		.loc 1 702 0
 1796 01f4 BB68     		ldr	r3, [r7, #8]
 1797 01f6 1B68     		ldr	r3, [r3]
 1798 01f8 324A     		ldr	r2, .L150+12
 1799 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1800 01fe 9A1A     		subs	r2, r3, r2
 1801 0200 BB68     		ldr	r3, [r7, #8]
 1802 0202 1A60     		str	r2, [r3]
 1803              		.loc 1 711 0
 1804 0204 78E1     		b	.L143
 1805              	.L102:
 707:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1806              		.loc 1 707 0
 1807 0206 2C4B     		ldr	r3, .L150
 1808 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1809 020c 042B     		cmp	r3, #4
 1810 020e 40F07381 		bne	.L143
 708:..\src/interruptions.c ****                 }
 1811              		.loc 1 708 0
 1812 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1813 0214 7A68     		ldr	r2, [r7, #4]
 1814 0216 B968     		ldr	r1, [r7, #8]
 1815 0218 1846     		mov	r0, r3
 1816 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1817              		.loc 1 711 0
 1818 021e 6BE1     		b	.L143
 1819              	.L90:
 712:..\src/interruptions.c ****             
 713:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 714:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1820              		.loc 1 714 0
 1821 0220 BB69     		ldr	r3, [r7, #24]
 1822 0222 002B     		cmp	r3, #0
 1823 0224 15DD     		ble	.L108
 715:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1824              		.loc 1 715 0
 1825 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1826 0228 2649     		ldr	r1, .L150+12
 1827 022a 1346     		mov	r3, r2
 1828 022c DB00     		lsls	r3, r3, #3
 1829 022e 9B1A     		subs	r3, r3, r2
 1830 0230 1B01     		lsls	r3, r3, #4
 1831 0232 0B44     		add	r3, r3, r1
 1832 0234 E833     		adds	r3, r3, #232
 1833 0236 1B68     		ldr	r3, [r3]
 1834 0238 BA69     		ldr	r2, [r7, #24]
 1835 023a 02FB03F2 		mul	r2, r2, r3
 1836 023e 1E4B     		ldr	r3, .L150
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 46


 1837 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1838 0244 C3F58063 		rsb	r3, r3, #1024
 1839 0248 92FBF3F2 		sdiv	r2, r2, r3
 1840 024c BB68     		ldr	r3, [r7, #8]
 1841 024e 1A60     		str	r2, [r3]
 716:..\src/interruptions.c ****             else
 717:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 718:..\src/interruptions.c ****             break;
 1842              		.loc 1 718 0
 1843 0250 5BE1     		b	.L101
 1844              	.L108:
 717:..\src/interruptions.c ****             break;
 1845              		.loc 1 717 0
 1846 0252 BB68     		ldr	r3, [r7, #8]
 1847 0254 0022     		movs	r2, #0
 1848 0256 1A60     		str	r2, [r3]
 1849              		.loc 1 718 0
 1850 0258 57E1     		b	.L101
 1851              	.L95:
 719:..\src/interruptions.c ****         
 720:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 721:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1852              		.loc 1 721 0
 1853 025a BB69     		ldr	r3, [r7, #24]
 1854 025c 002B     		cmp	r3, #0
 1855 025e 1FDD     		ble	.L110
 722:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1856              		.loc 1 722 0
 1857 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1858 0262 1849     		ldr	r1, .L150+12
 1859 0264 1346     		mov	r3, r2
 1860 0266 DB00     		lsls	r3, r3, #3
 1861 0268 9B1A     		subs	r3, r3, r2
 1862 026a 1B01     		lsls	r3, r3, #4
 1863 026c 0B44     		add	r3, r3, r1
 1864 026e E833     		adds	r3, r3, #232
 1865 0270 1968     		ldr	r1, [r3]
 1866 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1867 0274 1348     		ldr	r0, .L150+12
 1868 0276 1346     		mov	r3, r2
 1869 0278 DB00     		lsls	r3, r3, #3
 1870 027a 9B1A     		subs	r3, r3, r2
 1871 027c 1B01     		lsls	r3, r3, #4
 1872 027e 0344     		add	r3, r3, r0
 1873 0280 E833     		adds	r3, r3, #232
 1874 0282 1B68     		ldr	r3, [r3]
 1875 0284 BA69     		ldr	r2, [r7, #24]
 1876 0286 02FB03F2 		mul	r2, r2, r3
 1877 028a 0B4B     		ldr	r3, .L150
 1878 028c B3F8F031 		ldrh	r3, [r3, #496]
 1879 0290 C3F58063 		rsb	r3, r3, #1024
 1880 0294 92FBF3F3 		sdiv	r3, r2, r3
 1881 0298 CA1A     		subs	r2, r1, r3
 1882 029a BB68     		ldr	r3, [r7, #8]
 1883 029c 1A60     		str	r2, [r3]
 723:..\src/interruptions.c ****             else
 724:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 47


 725:..\src/interruptions.c ****             break;
 1884              		.loc 1 725 0
 1885 029e 34E1     		b	.L101
 1886              	.L110:
 724:..\src/interruptions.c ****             break;
 1887              		.loc 1 724 0
 1888 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1889 02a2 0849     		ldr	r1, .L150+12
 1890 02a4 1346     		mov	r3, r2
 1891 02a6 DB00     		lsls	r3, r3, #3
 1892 02a8 9B1A     		subs	r3, r3, r2
 1893 02aa 1B01     		lsls	r3, r3, #4
 1894 02ac 0B44     		add	r3, r3, r1
 1895 02ae E833     		adds	r3, r3, #232
 1896 02b0 1A68     		ldr	r2, [r3]
 1897 02b2 BB68     		ldr	r3, [r7, #8]
 1898 02b4 1A60     		str	r2, [r3]
 1899              		.loc 1 725 0
 1900 02b6 28E1     		b	.L101
 1901              	.L151:
 1902              		.align	2
 1903              	.L150:
 1904 02b8 00000000 		.word	c_mem
 1905 02bc 00000000 		.word	g_adc_meas
 1906 02c0 00000000 		.word	g_meas
 1907 02c4 00000000 		.word	g_mem
 1908              	.L91:
 726:..\src/interruptions.c **** 
 727:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 728:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1909              		.loc 1 728 0
 1910 02c8 7B68     		ldr	r3, [r7, #4]
 1911 02ca 1A68     		ldr	r2, [r3]
 1912 02cc BB68     		ldr	r3, [r7, #8]
 1913 02ce 1A60     		str	r2, [r3]
 729:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1914              		.loc 1 729 0
 1915 02d0 BB69     		ldr	r3, [r7, #24]
 1916 02d2 002B     		cmp	r3, #0
 1917 02d4 13DD     		ble	.L112
 730:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1918              		.loc 1 730 0
 1919 02d6 7B68     		ldr	r3, [r7, #4]
 1920 02d8 1A68     		ldr	r2, [r3]
 1921 02da 884B     		ldr	r3, .L152
 1922 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1923 02e0 1946     		mov	r1, r3
 1924 02e2 BB69     		ldr	r3, [r7, #24]
 1925 02e4 03FB01F3 		mul	r3, r3, r1
 1926 02e8 5900     		lsls	r1, r3, #1
 1927 02ea 854B     		ldr	r3, .L152+4
 1928 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1929 02f0 C3F58063 		rsb	r3, r3, #1024
 1930 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1931 02f8 1A44     		add	r2, r2, r3
 1932 02fa BB68     		ldr	r3, [r7, #8]
 1933 02fc 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 48


 1934              	.L112:
 731:..\src/interruptions.c ****             }
 732:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1935              		.loc 1 732 0
 1936 02fe 7B69     		ldr	r3, [r7, #20]
 1937 0300 002B     		cmp	r3, #0
 1938 0302 40F30181 		ble	.L144
 733:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1939              		.loc 1 733 0
 1940 0306 7B68     		ldr	r3, [r7, #4]
 1941 0308 1A68     		ldr	r2, [r3]
 1942 030a 7C4B     		ldr	r3, .L152
 1943 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1944 0310 1946     		mov	r1, r3
 1945 0312 7B69     		ldr	r3, [r7, #20]
 1946 0314 03FB01F3 		mul	r3, r3, r1
 1947 0318 5900     		lsls	r1, r3, #1
 1948 031a 794B     		ldr	r3, .L152+4
 1949 031c B3F8F231 		ldrh	r3, [r3, #498]
 1950 0320 C3F58063 		rsb	r3, r3, #1024
 1951 0324 91FBF3F3 		sdiv	r3, r1, r3
 1952 0328 D21A     		subs	r2, r2, r3
 1953 032a BB68     		ldr	r3, [r7, #8]
 1954 032c 1A60     		str	r2, [r3]
 734:..\src/interruptions.c ****             }
 735:..\src/interruptions.c ****             break;
 1955              		.loc 1 735 0
 1956 032e EBE0     		b	.L144
 1957              	.L92:
 736:..\src/interruptions.c **** 
 737:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 738:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1958              		.loc 1 738 0
 1959 0330 7B68     		ldr	r3, [r7, #4]
 1960 0332 1A68     		ldr	r2, [r3]
 1961 0334 BB68     		ldr	r3, [r7, #8]
 1962 0336 1A60     		str	r2, [r3]
 739:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1963              		.loc 1 739 0
 1964 0338 714B     		ldr	r3, .L152+4
 1965 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1966 033e 042B     		cmp	r3, #4
 1967 0340 5BD0     		beq	.L114
 740:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1968              		.loc 1 740 0
 1969 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1970 0344 6F4A     		ldr	r2, .L152+8
 1971 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1972 0348 012B     		cmp	r3, #1
 1973 034a 1CD0     		beq	.L116
 1974 034c 022B     		cmp	r3, #2
 1975 034e 37D0     		beq	.L117
 1976 0350 002B     		cmp	r3, #0
 1977 0352 00D0     		beq	.L118
 741:..\src/interruptions.c ****                     case 0:
 742:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 743:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 49


 744:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 745:..\src/interruptions.c ****                             break;
 746:..\src/interruptions.c ****                         }
 747:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 748:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 749:..\src/interruptions.c ****                             break;
 750:..\src/interruptions.c ****                         }
 751:..\src/interruptions.c ****                         break;
 752:..\src/interruptions.c **** 
 753:..\src/interruptions.c ****                     case 1:
 754:..\src/interruptions.c ****                         // EMG 1 is first
 755:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 756:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 757:..\src/interruptions.c ****                             break;
 758:..\src/interruptions.c ****                         }
 759:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 760:..\src/interruptions.c ****                         break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                     case 2:
 763:..\src/interruptions.c ****                         // EMG 2 is first
 764:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 765:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 766:..\src/interruptions.c ****                             break;
 767:..\src/interruptions.c ****                         }
 768:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 769:..\src/interruptions.c ****                         break;
 770:..\src/interruptions.c **** 
 771:..\src/interruptions.c ****                     default:
 772:..\src/interruptions.c ****                         break;
 1978              		.loc 1 772 0
 1979 0354 5BE0     		b	.L124
 1980              	.L118:
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1981              		.loc 1 743 0
 1982 0356 BB69     		ldr	r3, [r7, #24]
 1983 0358 002B     		cmp	r3, #0
 1984 035a 08DD     		ble	.L119
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1985              		.loc 1 743 0 is_stmt 0 discriminator 1
 1986 035c BA69     		ldr	r2, [r7, #24]
 1987 035e 7B69     		ldr	r3, [r7, #20]
 1988 0360 9A42     		cmp	r2, r3
 1989 0362 04DD     		ble	.L119
 744:..\src/interruptions.c ****                             break;
 1990              		.loc 1 744 0 is_stmt 1
 1991 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1992 0366 674A     		ldr	r2, .L152+8
 1993 0368 0121     		movs	r1, #1
 1994 036a D154     		strb	r1, [r2, r3]
 745:..\src/interruptions.c ****                         }
 1995              		.loc 1 745 0
 1996 036c 4FE0     		b	.L124
 1997              	.L119:
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1998              		.loc 1 747 0
 1999 036e 7B69     		ldr	r3, [r7, #20]
 2000 0370 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 50


 2001 0372 4BDD     		ble	.L145
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2002              		.loc 1 747 0 is_stmt 0 discriminator 1
 2003 0374 7A69     		ldr	r2, [r7, #20]
 2004 0376 BB69     		ldr	r3, [r7, #24]
 2005 0378 9A42     		cmp	r2, r3
 2006 037a 47DD     		ble	.L145
 748:..\src/interruptions.c ****                             break;
 2007              		.loc 1 748 0 is_stmt 1
 2008 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2009 037e 614A     		ldr	r2, .L152+8
 2010 0380 0221     		movs	r1, #2
 2011 0382 D154     		strb	r1, [r2, r3]
 749:..\src/interruptions.c ****                         }
 2012              		.loc 1 749 0
 2013 0384 43E0     		b	.L124
 2014              	.L116:
 755:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2015              		.loc 1 755 0
 2016 0386 BB69     		ldr	r3, [r7, #24]
 2017 0388 002B     		cmp	r3, #0
 2018 038a 04DA     		bge	.L122
 756:..\src/interruptions.c ****                             break;
 2019              		.loc 1 756 0
 2020 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2021 038e 5D4A     		ldr	r2, .L152+8
 2022 0390 0021     		movs	r1, #0
 2023 0392 D154     		strb	r1, [r2, r3]
 757:..\src/interruptions.c ****                         }
 2024              		.loc 1 757 0
 2025 0394 3BE0     		b	.L124
 2026              	.L122:
 759:..\src/interruptions.c ****                         break;
 2027              		.loc 1 759 0
 2028 0396 7B68     		ldr	r3, [r7, #4]
 2029 0398 1A68     		ldr	r2, [r3]
 2030 039a 584B     		ldr	r3, .L152
 2031 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2032 03a0 1946     		mov	r1, r3
 2033 03a2 BB69     		ldr	r3, [r7, #24]
 2034 03a4 03FB01F3 		mul	r3, r3, r1
 2035 03a8 9900     		lsls	r1, r3, #2
 2036 03aa 554B     		ldr	r3, .L152+4
 2037 03ac B3F8F031 		ldrh	r3, [r3, #496]
 2038 03b0 C3F58063 		rsb	r3, r3, #1024
 2039 03b4 91FBF3F3 		sdiv	r3, r1, r3
 2040 03b8 1A44     		add	r2, r2, r3
 2041 03ba BB68     		ldr	r3, [r7, #8]
 2042 03bc 1A60     		str	r2, [r3]
 760:..\src/interruptions.c **** 
 2043              		.loc 1 760 0
 2044 03be 26E0     		b	.L124
 2045              	.L117:
 764:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2046              		.loc 1 764 0
 2047 03c0 7B69     		ldr	r3, [r7, #20]
 2048 03c2 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 51


 2049 03c4 04DA     		bge	.L123
 765:..\src/interruptions.c ****                             break;
 2050              		.loc 1 765 0
 2051 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2052 03c8 4E4A     		ldr	r2, .L152+8
 2053 03ca 0021     		movs	r1, #0
 2054 03cc D154     		strb	r1, [r2, r3]
 766:..\src/interruptions.c ****                         }
 2055              		.loc 1 766 0
 2056 03ce 1EE0     		b	.L124
 2057              	.L123:
 768:..\src/interruptions.c ****                         break;
 2058              		.loc 1 768 0
 2059 03d0 7B68     		ldr	r3, [r7, #4]
 2060 03d2 1A68     		ldr	r2, [r3]
 2061 03d4 494B     		ldr	r3, .L152
 2062 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2063 03da 1946     		mov	r1, r3
 2064 03dc 7B69     		ldr	r3, [r7, #20]
 2065 03de 03FB01F3 		mul	r3, r3, r1
 2066 03e2 9900     		lsls	r1, r3, #2
 2067 03e4 464B     		ldr	r3, .L152+4
 2068 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2069 03ea C3F58063 		rsb	r3, r3, #1024
 2070 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2071 03f2 D21A     		subs	r2, r2, r3
 2072 03f4 BB68     		ldr	r3, [r7, #8]
 2073 03f6 1A60     		str	r2, [r3]
 769:..\src/interruptions.c **** 
 2074              		.loc 1 769 0
 2075 03f8 09E0     		b	.L124
 2076              	.L114:
 773:..\src/interruptions.c ****                 }
 774:..\src/interruptions.c ****             }
 775:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 776:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 777:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2077              		.loc 1 777 0
 2078 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2079 03fc 7B69     		ldr	r3, [r7, #20]
 2080 03fe 0093     		str	r3, [sp]
 2081 0400 BB69     		ldr	r3, [r7, #24]
 2082 0402 7A68     		ldr	r2, [r7, #4]
 2083 0404 B968     		ldr	r1, [r7, #8]
 2084 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 778:..\src/interruptions.c ****             }
 779:..\src/interruptions.c ****             break;
 2085              		.loc 1 779 0
 2086 040a 7EE0     		b	.L101
 2087              	.L145:
 751:..\src/interruptions.c **** 
 2088              		.loc 1 751 0
 2089 040c 00BF     		nop
 2090              	.L124:
 2091              		.loc 1 779 0 discriminator 5
 2092 040e 7CE0     		b	.L101
 2093              	.L93:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 52


 780:..\src/interruptions.c **** 
 781:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 782:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2094              		.loc 1 782 0
 2095 0410 7B68     		ldr	r3, [r7, #4]
 2096 0412 1A68     		ldr	r2, [r3]
 2097 0414 BB68     		ldr	r3, [r7, #8]
 2098 0416 1A60     		str	r2, [r3]
 783:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2099              		.loc 1 783 0
 2100 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2101 041a 3A4A     		ldr	r2, .L152+8
 2102 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2103 041e 012B     		cmp	r3, #1
 2104 0420 1CD0     		beq	.L126
 2105 0422 022B     		cmp	r3, #2
 2106 0424 3DD0     		beq	.L127
 2107 0426 002B     		cmp	r3, #0
 2108 0428 00D0     		beq	.L128
 784:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 785:..\src/interruptions.c ****                 case 0:
 786:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 787:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 788:..\src/interruptions.c ****                         break;
 789:..\src/interruptions.c ****                     }
 790:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 791:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 792:..\src/interruptions.c ****                         break;
 793:..\src/interruptions.c ****                     }
 794:..\src/interruptions.c ****                     break;
 795:..\src/interruptions.c **** 
 796:..\src/interruptions.c ****                 // EMG 1 is first
 797:..\src/interruptions.c ****                 case 1:
 798:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 799:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 800:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 801:..\src/interruptions.c ****                         break;
 802:..\src/interruptions.c ****                     }
 803:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 804:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 805:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 806:..\src/interruptions.c ****                     
 807:..\src/interruptions.c ****                     break;
 808:..\src/interruptions.c **** 
 809:..\src/interruptions.c ****                 // EMG 2 is first
 810:..\src/interruptions.c ****                 case 2:
 811:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 812:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 813:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 814:..\src/interruptions.c ****                         break;
 815:..\src/interruptions.c ****                     }
 816:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 817:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 818:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 819:..\src/interruptions.c ****                     }
 820:..\src/interruptions.c ****                     break;
 821:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 53


 822:..\src/interruptions.c ****                 default:
 823:..\src/interruptions.c ****                     break;
 2109              		.loc 1 823 0
 2110 042a 62E0     		b	.L130
 2111              	.L128:
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2112              		.loc 1 786 0
 2113 042c BB69     		ldr	r3, [r7, #24]
 2114 042e 002B     		cmp	r3, #0
 2115 0430 08DD     		ble	.L129
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2116              		.loc 1 786 0 is_stmt 0 discriminator 1
 2117 0432 BA69     		ldr	r2, [r7, #24]
 2118 0434 7B69     		ldr	r3, [r7, #20]
 2119 0436 9A42     		cmp	r2, r3
 2120 0438 04DD     		ble	.L129
 787:..\src/interruptions.c ****                         break;
 2121              		.loc 1 787 0 is_stmt 1
 2122 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2123 043c 314A     		ldr	r2, .L152+8
 2124 043e 0121     		movs	r1, #1
 2125 0440 D154     		strb	r1, [r2, r3]
 788:..\src/interruptions.c ****                     }
 2126              		.loc 1 788 0
 2127 0442 56E0     		b	.L130
 2128              	.L129:
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2129              		.loc 1 790 0
 2130 0444 7B69     		ldr	r3, [r7, #20]
 2131 0446 002B     		cmp	r3, #0
 2132 0448 4EDD     		ble	.L146
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2133              		.loc 1 790 0 is_stmt 0 discriminator 1
 2134 044a 7A69     		ldr	r2, [r7, #20]
 2135 044c BB69     		ldr	r3, [r7, #24]
 2136 044e 9A42     		cmp	r2, r3
 2137 0450 4ADD     		ble	.L146
 791:..\src/interruptions.c ****                         break;
 2138              		.loc 1 791 0 is_stmt 1
 2139 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2140 0454 2B4A     		ldr	r2, .L152+8
 2141 0456 0221     		movs	r1, #2
 2142 0458 D154     		strb	r1, [r2, r3]
 792:..\src/interruptions.c ****                     }
 2143              		.loc 1 792 0
 2144 045a 4AE0     		b	.L130
 2145              	.L126:
 799:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2146              		.loc 1 799 0
 2147 045c BB69     		ldr	r3, [r7, #24]
 2148 045e 002B     		cmp	r3, #0
 2149 0460 07DA     		bge	.L132
 799:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2150              		.loc 1 799 0 is_stmt 0 discriminator 1
 2151 0462 7B69     		ldr	r3, [r7, #20]
 2152 0464 002B     		cmp	r3, #0
 2153 0466 04DA     		bge	.L132
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 54


 800:..\src/interruptions.c ****                         break;
 2154              		.loc 1 800 0 is_stmt 1
 2155 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2156 046a 264A     		ldr	r2, .L152+8
 2157 046c 0021     		movs	r1, #0
 2158 046e D154     		strb	r1, [r2, r3]
 801:..\src/interruptions.c ****                     }
 2159              		.loc 1 801 0
 2160 0470 3FE0     		b	.L130
 2161              	.L132:
 804:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2162              		.loc 1 804 0
 2163 0472 BB69     		ldr	r3, [r7, #24]
 2164 0474 002B     		cmp	r3, #0
 2165 0476 39DD     		ble	.L147
 805:..\src/interruptions.c ****                     
 2166              		.loc 1 805 0
 2167 0478 7B68     		ldr	r3, [r7, #4]
 2168 047a 1A68     		ldr	r2, [r3]
 2169 047c 1F4B     		ldr	r3, .L152
 2170 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2171 0482 1946     		mov	r1, r3
 2172 0484 BB69     		ldr	r3, [r7, #24]
 2173 0486 03FB01F3 		mul	r3, r3, r1
 2174 048a 9900     		lsls	r1, r3, #2
 2175 048c 1C4B     		ldr	r3, .L152+4
 2176 048e B3F8F031 		ldrh	r3, [r3, #496]
 2177 0492 C3F58063 		rsb	r3, r3, #1024
 2178 0496 91FBF3F3 		sdiv	r3, r1, r3
 2179 049a 1A44     		add	r2, r2, r3
 2180 049c BB68     		ldr	r3, [r7, #8]
 2181 049e 1A60     		str	r2, [r3]
 807:..\src/interruptions.c **** 
 2182              		.loc 1 807 0
 2183 04a0 24E0     		b	.L147
 2184              	.L127:
 812:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2185              		.loc 1 812 0
 2186 04a2 BB69     		ldr	r3, [r7, #24]
 2187 04a4 002B     		cmp	r3, #0
 2188 04a6 07DA     		bge	.L134
 812:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2189              		.loc 1 812 0 is_stmt 0 discriminator 1
 2190 04a8 7B69     		ldr	r3, [r7, #20]
 2191 04aa 002B     		cmp	r3, #0
 2192 04ac 04DA     		bge	.L134
 813:..\src/interruptions.c ****                         break;
 2193              		.loc 1 813 0 is_stmt 1
 2194 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2195 04b0 144A     		ldr	r2, .L152+8
 2196 04b2 0021     		movs	r1, #0
 2197 04b4 D154     		strb	r1, [r2, r3]
 814:..\src/interruptions.c ****                     }
 2198              		.loc 1 814 0
 2199 04b6 1CE0     		b	.L130
 2200              	.L134:
 817:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 55


 2201              		.loc 1 817 0
 2202 04b8 7B69     		ldr	r3, [r7, #20]
 2203 04ba 002B     		cmp	r3, #0
 2204 04bc 18DD     		ble	.L148
 818:..\src/interruptions.c ****                     }
 2205              		.loc 1 818 0
 2206 04be 7B68     		ldr	r3, [r7, #4]
 2207 04c0 1A68     		ldr	r2, [r3]
 2208 04c2 0F4B     		ldr	r3, .L152+4
 2209 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2210 04c8 1946     		mov	r1, r3
 2211 04ca 7B69     		ldr	r3, [r7, #20]
 2212 04cc 03FB01F3 		mul	r3, r3, r1
 2213 04d0 9900     		lsls	r1, r3, #2
 2214 04d2 0B4B     		ldr	r3, .L152+4
 2215 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2216 04d8 C3F58063 		rsb	r3, r3, #1024
 2217 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2218 04e0 D21A     		subs	r2, r2, r3
 2219 04e2 BB68     		ldr	r3, [r7, #8]
 2220 04e4 1A60     		str	r2, [r3]
 820:..\src/interruptions.c **** 
 2221              		.loc 1 820 0
 2222 04e6 03E0     		b	.L148
 2223              	.L146:
 794:..\src/interruptions.c **** 
 2224              		.loc 1 794 0
 2225 04e8 00BF     		nop
 2226 04ea 0EE0     		b	.L101
 2227              	.L147:
 807:..\src/interruptions.c **** 
 2228              		.loc 1 807 0
 2229 04ec 00BF     		nop
 2230 04ee 0CE0     		b	.L101
 2231              	.L148:
 820:..\src/interruptions.c **** 
 2232              		.loc 1 820 0
 2233 04f0 00BF     		nop
 2234              	.L130:
 824:..\src/interruptions.c ****             }
 825:..\src/interruptions.c ****             break;
 2235              		.loc 1 825 0 discriminator 6
 2236 04f2 0AE0     		b	.L101
 2237              	.L142:
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****         default:
 828:..\src/interruptions.c ****             break;
 2238              		.loc 1 828 0
 2239 04f4 00BF     		nop
 2240 04f6 08E0     		b	.L101
 2241              	.L143:
 711:..\src/interruptions.c ****             
 2242              		.loc 1 711 0
 2243 04f8 00BF     		nop
 2244 04fa 06E0     		b	.L101
 2245              	.L153:
 2246              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 56


 2247              	.L152:
 2248 04fc 00000000 		.word	g_mem
 2249 0500 00000000 		.word	c_mem
 2250 0504 8C000000 		.word	current_emg.10493
 2251              	.L144:
 735:..\src/interruptions.c **** 
 2252              		.loc 1 735 0
 2253 0508 00BF     		nop
 2254              	.L101:
 829:..\src/interruptions.c ****     }
 830:..\src/interruptions.c **** 
 831:..\src/interruptions.c ****     // Position limit saturation
 832:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2255              		.loc 1 832 0
 2256 050a 3B6A     		ldr	r3, [r7, #32]
 2257 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2258 0510 002B     		cmp	r3, #0
 2259 0512 13D0     		beq	.L136
 833:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2260              		.loc 1 833 0
 2261 0514 BB68     		ldr	r3, [r7, #8]
 2262 0516 1A68     		ldr	r2, [r3]
 2263 0518 3B6A     		ldr	r3, [r7, #32]
 2264 051a 5B6B     		ldr	r3, [r3, #52]
 2265 051c 9A42     		cmp	r2, r3
 2266 051e 03DA     		bge	.L137
 834:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2267              		.loc 1 834 0
 2268 0520 3B6A     		ldr	r3, [r7, #32]
 2269 0522 5A6B     		ldr	r2, [r3, #52]
 2270 0524 BB68     		ldr	r3, [r7, #8]
 2271 0526 1A60     		str	r2, [r3]
 2272              	.L137:
 835:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2273              		.loc 1 835 0
 2274 0528 BB68     		ldr	r3, [r7, #8]
 2275 052a 1A68     		ldr	r2, [r3]
 2276 052c 3B6A     		ldr	r3, [r7, #32]
 2277 052e 9B6B     		ldr	r3, [r3, #56]
 2278 0530 9A42     		cmp	r2, r3
 2279 0532 03DD     		ble	.L136
 836:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2280              		.loc 1 836 0
 2281 0534 3B6A     		ldr	r3, [r7, #32]
 2282 0536 9A6B     		ldr	r2, [r3, #56]
 2283 0538 BB68     		ldr	r3, [r7, #8]
 2284 053a 1A60     		str	r2, [r3]
 2285              	.L136:
 837:..\src/interruptions.c ****     }
 838:..\src/interruptions.c ****     
 839:..\src/interruptions.c ****     // SAFETY
 840:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2286              		.loc 1 840 0
 2287 053c 1D4B     		ldr	r3, .L154
 2288 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2289 0540 012B     		cmp	r3, #1
 2290 0542 02D1     		bne	.L138
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 57


 841:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 842:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2291              		.loc 1 842 0
 2292 0544 BB68     		ldr	r3, [r7, #8]
 2293 0546 0022     		movs	r2, #0
 2294 0548 1A60     		str	r2, [r3]
 2295              	.L138:
 843:..\src/interruptions.c ****     }      
 844:..\src/interruptions.c ****     
 845:..\src/interruptions.c ****        
 846:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2296              		.loc 1 846 0
 2297 054a 1B4B     		ldr	r3, .L154+4
 2298 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2299 0550 012B     		cmp	r3, #1
 2300 0552 2AD1     		bne	.L149
 847:..\src/interruptions.c ****         if (rest_enabled == 1){
 2301              		.loc 1 847 0
 2302 0554 194B     		ldr	r3, .L154+8
 2303 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304 0558 012B     		cmp	r3, #1
 2305 055a 03D1     		bne	.L140
 848:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 849:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2306              		.loc 1 849 0
 2307 055c 184B     		ldr	r3, .L154+12
 2308 055e 1A68     		ldr	r2, [r3]
 2309 0560 BB68     		ldr	r3, [r7, #8]
 2310 0562 1A60     		str	r2, [r3]
 2311              	.L140:
 850:..\src/interruptions.c ****         }
 851:..\src/interruptions.c ****         
 852:..\src/interruptions.c ****         if (forced_open == 1) {
 2312              		.loc 1 852 0
 2313 0564 174B     		ldr	r3, .L154+16
 2314 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2315 0568 012B     		cmp	r3, #1
 2316 056a 1ED1     		bne	.L149
 853:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 854:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2317              		.loc 1 854 0
 2318 056c 7B69     		ldr	r3, [r7, #20]
 2319 056e 002B     		cmp	r3, #0
 2320 0570 13DD     		ble	.L141
 855:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2321              		.loc 1 855 0
 2322 0572 154B     		ldr	r3, .L154+20
 2323 0574 D3F8A022 		ldr	r2, [r3, #672]
 2324 0578 134B     		ldr	r3, .L154+20
 2325 057a D3F8A032 		ldr	r3, [r3, #672]
 2326 057e 7969     		ldr	r1, [r7, #20]
 2327 0580 01FB03F1 		mul	r1, r1, r3
 2328 0584 0C4B     		ldr	r3, .L154+4
 2329 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2330 058a C3F58063 		rsb	r3, r3, #1024
 2331 058e 91FBF3F3 		sdiv	r3, r1, r3
 2332 0592 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 58


 2333 0594 BB68     		ldr	r3, [r7, #8]
 2334 0596 1A60     		str	r2, [r3]
 856:..\src/interruptions.c ****             else {
 857:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 858:..\src/interruptions.c ****                 forced_open = 0;
 859:..\src/interruptions.c ****             }
 860:..\src/interruptions.c ****         }
 861:..\src/interruptions.c ****     }
 862:..\src/interruptions.c **** }
 2335              		.loc 1 862 0
 2336 0598 07E0     		b	.L149
 2337              	.L141:
 857:..\src/interruptions.c ****                 forced_open = 0;
 2338              		.loc 1 857 0
 2339 059a 0B4B     		ldr	r3, .L154+20
 2340 059c D3F8A022 		ldr	r2, [r3, #672]
 2341 05a0 BB68     		ldr	r3, [r7, #8]
 2342 05a2 1A60     		str	r2, [r3]
 858:..\src/interruptions.c ****             }
 2343              		.loc 1 858 0
 2344 05a4 074B     		ldr	r3, .L154+16
 2345 05a6 0022     		movs	r2, #0
 2346 05a8 1A70     		strb	r2, [r3]
 2347              	.L149:
 2348              		.loc 1 862 0
 2349 05aa 00BF     		nop
 2350 05ac 2837     		adds	r7, r7, #40
 2351              		.cfi_def_cfa_offset 8
 2352 05ae BD46     		mov	sp, r7
 2353              		.cfi_def_cfa_register 13
 2354              		@ sp needed
 2355 05b0 80BD     		pop	{r7, pc}
 2356              	.L155:
 2357 05b2 00BF     		.align	2
 2358              	.L154:
 2359 05b4 00000000 		.word	battery_low_SoC
 2360 05b8 00000000 		.word	c_mem
 2361 05bc 00000000 		.word	rest_enabled
 2362 05c0 00000000 		.word	rest_pos_curr_ref
 2363 05c4 00000000 		.word	forced_open
 2364 05c8 00000000 		.word	g_mem
 2365              		.cfi_endproc
 2366              	.LFE68:
 2367              		.size	compute_reference, .-compute_reference
 2368              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2369              		.align	2
 2370              		.global	compute_SoftHand_2_motors_joystick_reference
 2371              		.thumb
 2372              		.thumb_func
 2373              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2374              	compute_SoftHand_2_motors_joystick_reference:
 2375              	.LFB69:
 863:..\src/interruptions.c **** 
 864:..\src/interruptions.c **** 
 865:..\src/interruptions.c **** //==============================================================================
 866:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 867:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 59


 868:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2376              		.loc 1 868 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 32
 2379              		@ frame_needed = 1, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 2381 0000 80B4     		push	{r7}
 2382              		.cfi_def_cfa_offset 4
 2383              		.cfi_offset 7, -4
 2384 0002 89B0     		sub	sp, sp, #36
 2385              		.cfi_def_cfa_offset 40
 2386 0004 00AF     		add	r7, sp, #0
 2387              		.cfi_def_cfa_register 7
 2388 0006 0346     		mov	r3, r0
 2389 0008 B960     		str	r1, [r7, #8]
 2390 000a 7A60     		str	r2, [r7, #4]
 2391 000c FB73     		strb	r3, [r7, #15]
 869:..\src/interruptions.c ****     
 870:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2392              		.loc 1 870 0
 2393 000e B04B     		ldr	r3, .L177
 2394 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2395 0014 062B     		cmp	r3, #6
 2396 0016 40F08581 		bne	.L175
 2397              		.loc 1 870 0 is_stmt 0 discriminator 1
 2398 001a AD4B     		ldr	r3, .L177
 2399 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2400 0020 062B     		cmp	r3, #6
 2401 0022 40F07F81 		bne	.L175
 871:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2402              		.loc 1 871 0 is_stmt 1
 2403 0026 7B68     		ldr	r3, [r7, #4]
 2404 0028 1A68     		ldr	r2, [r3]
 2405 002a BB68     		ldr	r3, [r7, #8]
 2406 002c 1A60     		str	r2, [r3]
 872:..\src/interruptions.c ****     
 873:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2407              		.loc 1 873 0
 2408 002e A94B     		ldr	r3, .L177+4
 2409 0030 1B6A     		ldr	r3, [r3, #32]
 2410 0032 B3F52F7F 		cmp	r3, #700
 2411 0036 00F3C280 		bgt	.L158
 2412              	.LBB6:
 874:..\src/interruptions.c ****              
 875:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2413              		.loc 1 875 0
 2414 003a 0023     		movs	r3, #0
 2415 003c FB61     		str	r3, [r7, #28]
 876:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2416              		.loc 1 876 0
 2417 003e 0023     		movs	r3, #0
 2418 0040 BB61     		str	r3, [r7, #24]
 877:..\src/interruptions.c ****         
 878:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2419              		.loc 1 878 0
 2420 0042 A44B     		ldr	r3, .L177+4
 2421 0044 1B6A     		ldr	r3, [r3, #32]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 60


 2422 0046 A24A     		ldr	r2, .L177
 2423 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2424 004c 9342     		cmp	r3, r2
 2425 004e 1ADD     		ble	.L159
 879:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2426              		.loc 1 879 0
 2427 0050 A04B     		ldr	r3, .L177+4
 2428 0052 1B6A     		ldr	r3, [r3, #32]
 2429 0054 9E4A     		ldr	r2, .L177
 2430 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2431 005a 9B1A     		subs	r3, r3, r2
 2432 005c FB61     		str	r3, [r7, #28]
 880:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2433              		.loc 1 880 0
 2434 005e BB68     		ldr	r3, [r7, #8]
 2435 0060 1A68     		ldr	r2, [r3]
 2436 0062 9B4B     		ldr	r3, .L177
 2437 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2438 0068 1946     		mov	r1, r3
 2439 006a FB69     		ldr	r3, [r7, #28]
 2440 006c 03FB01F1 		mul	r1, r3, r1
 2441 0070 974B     		ldr	r3, .L177
 2442 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2443 0076 C3F58063 		rsb	r3, r3, #1024
 2444 007a 91FBF3F3 		sdiv	r3, r1, r3
 2445 007e 1A44     		add	r2, r2, r3
 2446 0080 BB68     		ldr	r3, [r7, #8]
 2447 0082 1A60     		str	r2, [r3]
 2448 0084 21E0     		b	.L160
 2449              	.L159:
 881:..\src/interruptions.c ****             }
 882:..\src/interruptions.c ****             else {
 883:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2450              		.loc 1 883 0
 2451 0086 934B     		ldr	r3, .L177+4
 2452 0088 1A6A     		ldr	r2, [r3, #32]
 2453 008a 914B     		ldr	r3, .L177
 2454 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2455 0090 5B42     		negs	r3, r3
 2456 0092 9A42     		cmp	r2, r3
 2457 0094 19DA     		bge	.L160
 884:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2458              		.loc 1 884 0
 2459 0096 8F4B     		ldr	r3, .L177+4
 2460 0098 1B6A     		ldr	r3, [r3, #32]
 2461 009a 8D4A     		ldr	r2, .L177
 2462 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2463 00a0 1344     		add	r3, r3, r2
 2464 00a2 FB61     		str	r3, [r7, #28]
 885:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2465              		.loc 1 885 0
 2466 00a4 BB68     		ldr	r3, [r7, #8]
 2467 00a6 1A68     		ldr	r2, [r3]
 2468 00a8 894B     		ldr	r3, .L177
 2469 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2470 00ae 1946     		mov	r1, r3
 2471 00b0 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 61


 2472 00b2 03FB01F1 		mul	r1, r3, r1
 2473 00b6 864B     		ldr	r3, .L177
 2474 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2475 00bc C3F58063 		rsb	r3, r3, #1024
 2476 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2477 00c4 1A44     		add	r2, r2, r3
 2478 00c6 BB68     		ldr	r3, [r7, #8]
 2479 00c8 1A60     		str	r2, [r3]
 2480              	.L160:
 886:..\src/interruptions.c ****                 }
 887:..\src/interruptions.c ****             }
 888:..\src/interruptions.c **** 
 889:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2481              		.loc 1 889 0
 2482 00ca 824B     		ldr	r3, .L177+4
 2483 00cc 5B6A     		ldr	r3, [r3, #36]
 2484 00ce 804A     		ldr	r2, .L177
 2485 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2486 00d4 9342     		cmp	r3, r2
 2487 00d6 34DD     		ble	.L161
 890:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2488              		.loc 1 890 0
 2489 00d8 7E4B     		ldr	r3, .L177+4
 2490 00da 5B6A     		ldr	r3, [r3, #36]
 2491 00dc 7C4A     		ldr	r2, .L177
 2492 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2493 00e2 9B1A     		subs	r3, r3, r2
 2494 00e4 BB61     		str	r3, [r7, #24]
 891:..\src/interruptions.c ****                 if (motor_idx == 0){
 2495              		.loc 1 891 0
 2496 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2497 00e8 002B     		cmp	r3, #0
 2498 00ea 12D1     		bne	.L162
 892:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2499              		.loc 1 892 0
 2500 00ec BB68     		ldr	r3, [r7, #8]
 2501 00ee 1A68     		ldr	r2, [r3]
 2502 00f0 774B     		ldr	r3, .L177
 2503 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2504 00f6 1946     		mov	r1, r3
 2505 00f8 BB69     		ldr	r3, [r7, #24]
 2506 00fa 03FB01F1 		mul	r1, r3, r1
 2507 00fe 744B     		ldr	r3, .L177
 2508 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2509 0104 C3F58063 		rsb	r3, r3, #1024
 2510 0108 91FBF3F3 		sdiv	r3, r1, r3
 2511 010c 1A44     		add	r2, r2, r3
 2512 010e BB68     		ldr	r3, [r7, #8]
 2513 0110 1A60     		str	r2, [r3]
 2514              	.L162:
 893:..\src/interruptions.c ****                 }
 894:..\src/interruptions.c ****                 if (motor_idx == 1){
 2515              		.loc 1 894 0
 2516 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2517 0114 012B     		cmp	r3, #1
 2518 0116 40F00581 		bne	.L175
 895:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 62


 2519              		.loc 1 895 0
 2520 011a BB68     		ldr	r3, [r7, #8]
 2521 011c 1A68     		ldr	r2, [r3]
 2522 011e 6C4B     		ldr	r3, .L177
 2523 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2524 0124 1946     		mov	r1, r3
 2525 0126 BB69     		ldr	r3, [r7, #24]
 2526 0128 03FB01F1 		mul	r1, r3, r1
 2527 012c 684B     		ldr	r3, .L177
 2528 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2529 0132 C3F58063 		rsb	r3, r3, #1024
 2530 0136 91FBF3F3 		sdiv	r3, r1, r3
 2531 013a D21A     		subs	r2, r2, r3
 2532 013c BB68     		ldr	r3, [r7, #8]
 2533 013e 1A60     		str	r2, [r3]
 2534              	.LBE6:
 896:..\src/interruptions.c ****                 }          
 897:..\src/interruptions.c ****             }
 898:..\src/interruptions.c ****             else {
 899:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 900:..\src/interruptions.c ****                     
 901:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 902:..\src/interruptions.c ****                     if (motor_idx == 0){
 903:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 904:..\src/interruptions.c ****                     }
 905:..\src/interruptions.c ****                     if (motor_idx == 1){
 906:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 907:..\src/interruptions.c ****                     }
 908:..\src/interruptions.c ****                 }
 909:..\src/interruptions.c ****             }
 910:..\src/interruptions.c ****         }
 911:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 912:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 913:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 914:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 915:..\src/interruptions.c **** 
 916:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 917:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 918:..\src/interruptions.c ****                     if (motor_idx == 1){
 919:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 920:..\src/interruptions.c ****                     }
 921:..\src/interruptions.c ****                     if (motor_idx == 0){
 922:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 923:..\src/interruptions.c ****                     }                    
 924:..\src/interruptions.c ****                 }
 925:..\src/interruptions.c ****                 else {
 926:..\src/interruptions.c ****                     if (motor_idx == 0){
 927:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 928:..\src/interruptions.c ****                     }
 929:..\src/interruptions.c ****                     if (motor_idx == 1){
 930:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 931:..\src/interruptions.c ****                     }
 932:..\src/interruptions.c ****                 }
 933:..\src/interruptions.c ****                 
 934:..\src/interruptions.c ****             }
 935:..\src/interruptions.c ****             else {
 936:..\src/interruptions.c ****                 if(pos_sum > 0) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 63


 937:..\src/interruptions.c ****                     if (motor_idx == 0){
 938:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 939:..\src/interruptions.c ****                     }
 940:..\src/interruptions.c ****                     if (motor_idx == 1){
 941:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 942:..\src/interruptions.c ****                     }
 943:..\src/interruptions.c ****                     
 944:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 945:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 946:..\src/interruptions.c ****                     }
 947:..\src/interruptions.c ****                 }
 948:..\src/interruptions.c ****             }
 949:..\src/interruptions.c ****         }
 950:..\src/interruptions.c ****     }           
 951:..\src/interruptions.c **** }
 2535              		.loc 1 951 0
 2536 0140 F0E0     		b	.L175
 2537              	.L161:
 2538              	.LBB7:
 899:..\src/interruptions.c ****                     
 2539              		.loc 1 899 0
 2540 0142 644B     		ldr	r3, .L177+4
 2541 0144 5A6A     		ldr	r2, [r3, #36]
 2542 0146 624B     		ldr	r3, .L177
 2543 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2544 014c 5B42     		negs	r3, r3
 2545 014e 9A42     		cmp	r2, r3
 2546 0150 80F2E880 		bge	.L175
 901:..\src/interruptions.c ****                     if (motor_idx == 0){
 2547              		.loc 1 901 0
 2548 0154 5F4B     		ldr	r3, .L177+4
 2549 0156 5B6A     		ldr	r3, [r3, #36]
 2550 0158 5D4A     		ldr	r2, .L177
 2551 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2552 015e 1344     		add	r3, r3, r2
 2553 0160 BB61     		str	r3, [r7, #24]
 902:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2554              		.loc 1 902 0
 2555 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2556 0164 002B     		cmp	r3, #0
 2557 0166 12D1     		bne	.L165
 903:..\src/interruptions.c ****                     }
 2558              		.loc 1 903 0
 2559 0168 BB68     		ldr	r3, [r7, #8]
 2560 016a 1A68     		ldr	r2, [r3]
 2561 016c 584B     		ldr	r3, .L177
 2562 016e B3F8B032 		ldrh	r3, [r3, #688]
 2563 0172 1946     		mov	r1, r3
 2564 0174 BB69     		ldr	r3, [r7, #24]
 2565 0176 03FB01F1 		mul	r1, r3, r1
 2566 017a 554B     		ldr	r3, .L177
 2567 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2568 0180 C3F58063 		rsb	r3, r3, #1024
 2569 0184 91FBF3F3 		sdiv	r3, r1, r3
 2570 0188 1A44     		add	r2, r2, r3
 2571 018a BB68     		ldr	r3, [r7, #8]
 2572 018c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 64


 2573              	.L165:
 905:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2574              		.loc 1 905 0
 2575 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2576 0190 012B     		cmp	r3, #1
 2577 0192 40F0C780 		bne	.L175
 906:..\src/interruptions.c ****                     }
 2578              		.loc 1 906 0
 2579 0196 BB68     		ldr	r3, [r7, #8]
 2580 0198 1A68     		ldr	r2, [r3]
 2581 019a 4D4B     		ldr	r3, .L177
 2582 019c B3F8B032 		ldrh	r3, [r3, #688]
 2583 01a0 1946     		mov	r1, r3
 2584 01a2 BB69     		ldr	r3, [r7, #24]
 2585 01a4 03FB01F1 		mul	r1, r3, r1
 2586 01a8 494B     		ldr	r3, .L177
 2587 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2588 01ae C3F58063 		rsb	r3, r3, #1024
 2589 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2590 01b6 D21A     		subs	r2, r2, r3
 2591 01b8 BB68     		ldr	r3, [r7, #8]
 2592 01ba 1A60     		str	r2, [r3]
 2593              	.LBE7:
 2594              		.loc 1 951 0
 2595 01bc B2E0     		b	.L175
 2596              	.L158:
 2597              	.LBB8:
 913:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2598              		.loc 1 913 0
 2599 01be 444B     		ldr	r3, .L177
 2600 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2601 01c4 1946     		mov	r1, r3
 2602 01c6 444A     		ldr	r2, .L177+8
 2603 01c8 3423     		movs	r3, #52
 2604 01ca 03FB01F3 		mul	r3, r3, r1
 2605 01ce 1344     		add	r3, r3, r2
 2606 01d0 1A68     		ldr	r2, [r3]
 2607 01d2 3F4B     		ldr	r3, .L177
 2608 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2609 01d8 1846     		mov	r0, r3
 2610 01da 3F49     		ldr	r1, .L177+8
 2611 01dc 3423     		movs	r3, #52
 2612 01de 03FB00F3 		mul	r3, r3, r0
 2613 01e2 0B44     		add	r3, r3, r1
 2614 01e4 0433     		adds	r3, r3, #4
 2615 01e6 1B68     		ldr	r3, [r3]
 2616 01e8 D21A     		subs	r2, r2, r3
 2617 01ea 394B     		ldr	r3, .L177
 2618 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2619 01f0 1846     		mov	r0, r3
 2620 01f2 3749     		ldr	r1, .L177
 2621 01f4 0346     		mov	r3, r0
 2622 01f6 5B00     		lsls	r3, r3, #1
 2623 01f8 0344     		add	r3, r3, r0
 2624 01fa 1B01     		lsls	r3, r3, #4
 2625 01fc 0B44     		add	r3, r3, r1
 2626 01fe 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 65


 2627 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2628 0204 42FA03F3 		asr	r3, r2, r3
 2629 0208 7B61     		str	r3, [r7, #20]
 914:..\src/interruptions.c **** 
 2630              		.loc 1 914 0
 2631 020a 314B     		ldr	r3, .L177
 2632 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2633 0210 1946     		mov	r1, r3
 2634 0212 314A     		ldr	r2, .L177+8
 2635 0214 3423     		movs	r3, #52
 2636 0216 03FB01F3 		mul	r3, r3, r1
 2637 021a 1344     		add	r3, r3, r2
 2638 021c 1A68     		ldr	r2, [r3]
 2639 021e 2C4B     		ldr	r3, .L177
 2640 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2641 0224 1846     		mov	r0, r3
 2642 0226 2C49     		ldr	r1, .L177+8
 2643 0228 3423     		movs	r3, #52
 2644 022a 03FB00F3 		mul	r3, r3, r0
 2645 022e 0B44     		add	r3, r3, r1
 2646 0230 0433     		adds	r3, r3, #4
 2647 0232 1B68     		ldr	r3, [r3]
 2648 0234 1A44     		add	r2, r2, r3
 2649 0236 264B     		ldr	r3, .L177
 2650 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2651 023c 1846     		mov	r0, r3
 2652 023e 2449     		ldr	r1, .L177
 2653 0240 0346     		mov	r3, r0
 2654 0242 5B00     		lsls	r3, r3, #1
 2655 0244 0344     		add	r3, r3, r0
 2656 0246 1B01     		lsls	r3, r3, #4
 2657 0248 0B44     		add	r3, r3, r1
 2658 024a 03F29513 		addw	r3, r3, #405
 2659 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2660 0250 42FA03F3 		asr	r3, r2, r3
 2661 0254 3B61     		str	r3, [r7, #16]
 916:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2662              		.loc 1 916 0
 2663 0256 7B69     		ldr	r3, [r7, #20]
 2664 0258 B3F5FA7F 		cmp	r3, #500
 2665 025c 03DC     		bgt	.L166
 916:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2666              		.loc 1 916 0 is_stmt 0 discriminator 1
 2667 025e 7B69     		ldr	r3, [r7, #20]
 2668 0260 13F5FA7F 		cmn	r3, #500
 2669 0264 3ADA     		bge	.L167
 2670              	.L166:
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2671              		.loc 1 917 0 is_stmt 1
 2672 0266 7B69     		ldr	r3, [r7, #20]
 2673 0268 002B     		cmp	r3, #0
 2674 026a 18DB     		blt	.L168
 918:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2675              		.loc 1 918 0
 2676 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2677 026e 012B     		cmp	r3, #1
 2678 0270 07D1     		bne	.L169
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 66


 919:..\src/interruptions.c ****                     }
 2679              		.loc 1 919 0
 2680 0272 BB68     		ldr	r3, [r7, #8]
 2681 0274 1B68     		ldr	r3, [r3]
 2682 0276 164A     		ldr	r2, .L177
 2683 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2684 027c 1A44     		add	r2, r2, r3
 2685 027e BB68     		ldr	r3, [r7, #8]
 2686 0280 1A60     		str	r2, [r3]
 2687              	.L169:
 921:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2688              		.loc 1 921 0
 2689 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2690 0284 002B     		cmp	r3, #0
 2691 0286 4CD1     		bne	.L176
 922:..\src/interruptions.c ****                     }                    
 2692              		.loc 1 922 0
 2693 0288 BB68     		ldr	r3, [r7, #8]
 2694 028a 1B68     		ldr	r3, [r3]
 2695 028c 104A     		ldr	r2, .L177
 2696 028e B2F8B022 		ldrh	r2, [r2, #688]
 2697 0292 5208     		lsrs	r2, r2, #1
 2698 0294 92B2     		uxth	r2, r2
 2699 0296 9A1A     		subs	r2, r3, r2
 2700 0298 BB68     		ldr	r3, [r7, #8]
 2701 029a 1A60     		str	r2, [r3]
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2702              		.loc 1 917 0
 2703 029c 41E0     		b	.L176
 2704              	.L168:
 926:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2705              		.loc 1 926 0
 2706 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2707 02a0 002B     		cmp	r3, #0
 2708 02a2 07D1     		bne	.L172
 927:..\src/interruptions.c ****                     }
 2709              		.loc 1 927 0
 2710 02a4 BB68     		ldr	r3, [r7, #8]
 2711 02a6 1B68     		ldr	r3, [r3]
 2712 02a8 094A     		ldr	r2, .L177
 2713 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2714 02ae 1A44     		add	r2, r2, r3
 2715 02b0 BB68     		ldr	r3, [r7, #8]
 2716 02b2 1A60     		str	r2, [r3]
 2717              	.L172:
 929:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2718              		.loc 1 929 0
 2719 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2720 02b6 012B     		cmp	r3, #1
 2721 02b8 33D1     		bne	.L176
 930:..\src/interruptions.c ****                     }
 2722              		.loc 1 930 0
 2723 02ba BB68     		ldr	r3, [r7, #8]
 2724 02bc 1B68     		ldr	r3, [r3]
 2725 02be 044A     		ldr	r2, .L177
 2726 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2727 02c4 5208     		lsrs	r2, r2, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 67


 2728 02c6 92B2     		uxth	r2, r2
 2729 02c8 9A1A     		subs	r2, r3, r2
 2730 02ca BB68     		ldr	r3, [r7, #8]
 2731 02cc 1A60     		str	r2, [r3]
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2732              		.loc 1 917 0
 2733 02ce 28E0     		b	.L176
 2734              	.L178:
 2735              		.align	2
 2736              	.L177:
 2737 02d0 00000000 		.word	c_mem
 2738 02d4 00000000 		.word	g_adc_meas
 2739 02d8 00000000 		.word	g_meas
 2740              	.L167:
 936:..\src/interruptions.c ****                     if (motor_idx == 0){
 2741              		.loc 1 936 0
 2742 02dc 3B69     		ldr	r3, [r7, #16]
 2743 02de 002B     		cmp	r3, #0
 2744 02e0 20DD     		ble	.L175
 937:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2745              		.loc 1 937 0
 2746 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2747 02e4 002B     		cmp	r3, #0
 2748 02e6 08D1     		bne	.L173
 938:..\src/interruptions.c ****                     }
 2749              		.loc 1 938 0
 2750 02e8 BB68     		ldr	r3, [r7, #8]
 2751 02ea 1A68     		ldr	r2, [r3]
 2752 02ec 104B     		ldr	r3, .L179
 2753 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2754 02f2 5B00     		lsls	r3, r3, #1
 2755 02f4 D21A     		subs	r2, r2, r3
 2756 02f6 BB68     		ldr	r3, [r7, #8]
 2757 02f8 1A60     		str	r2, [r3]
 2758              	.L173:
 940:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2759              		.loc 1 940 0
 2760 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2761 02fc 012B     		cmp	r3, #1
 2762 02fe 08D1     		bne	.L174
 941:..\src/interruptions.c ****                     }
 2763              		.loc 1 941 0
 2764 0300 BB68     		ldr	r3, [r7, #8]
 2765 0302 1A68     		ldr	r2, [r3]
 2766 0304 0A4B     		ldr	r3, .L179
 2767 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2768 030a 5B00     		lsls	r3, r3, #1
 2769 030c D21A     		subs	r2, r2, r3
 2770 030e BB68     		ldr	r3, [r7, #8]
 2771 0310 1A60     		str	r2, [r3]
 2772              	.L174:
 944:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2773              		.loc 1 944 0
 2774 0312 BB68     		ldr	r3, [r7, #8]
 2775 0314 1B68     		ldr	r3, [r3]
 2776 0316 002B     		cmp	r3, #0
 2777 0318 04DA     		bge	.L175
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 68


 945:..\src/interruptions.c ****                     }
 2778              		.loc 1 945 0
 2779 031a BB68     		ldr	r3, [r7, #8]
 2780 031c 0022     		movs	r2, #0
 2781 031e 1A60     		str	r2, [r3]
 2782              	.LBE8:
 2783              		.loc 1 951 0
 2784 0320 00E0     		b	.L175
 2785              	.L176:
 2786              	.LBB9:
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2787              		.loc 1 917 0
 2788 0322 00BF     		nop
 2789              	.L175:
 2790              	.LBE9:
 2791              		.loc 1 951 0
 2792 0324 00BF     		nop
 2793 0326 2437     		adds	r7, r7, #36
 2794              		.cfi_def_cfa_offset 4
 2795 0328 BD46     		mov	sp, r7
 2796              		.cfi_def_cfa_register 13
 2797              		@ sp needed
 2798 032a 80BC     		pop	{r7}
 2799              		.cfi_restore 7
 2800              		.cfi_def_cfa_offset 0
 2801 032c 7047     		bx	lr
 2802              	.L180:
 2803 032e 00BF     		.align	2
 2804              	.L179:
 2805 0330 00000000 		.word	c_mem
 2806              		.cfi_endproc
 2807              	.LFE69:
 2808              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2809              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2810              		.align	2
 2811              		.global	compute_SoftHand_2_motors_emg_reference
 2812              		.thumb
 2813              		.thumb_func
 2814              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2815              	compute_SoftHand_2_motors_emg_reference:
 2816              	.LFB70:
 952:..\src/interruptions.c **** 
 953:..\src/interruptions.c **** 
 954:..\src/interruptions.c **** //==============================================================================
 955:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 956:..\src/interruptions.c **** //==============================================================================
 957:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 958:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2817              		.loc 1 958 0
 2818              		.cfi_startproc
 2819              		@ args = 4, pretend = 0, frame = 16
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 0000 80B5     		push	{r7, lr}
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 7, -8
 2824              		.cfi_offset 14, -4
 2825 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 69


 2826              		.cfi_def_cfa_offset 24
 2827 0004 00AF     		add	r7, sp, #0
 2828              		.cfi_def_cfa_register 7
 2829 0006 B960     		str	r1, [r7, #8]
 2830 0008 7A60     		str	r2, [r7, #4]
 2831 000a 3B60     		str	r3, [r7]
 2832 000c 0346     		mov	r3, r0
 2833 000e FB73     		strb	r3, [r7, #15]
 959:..\src/interruptions.c ****     
 960:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 961:..\src/interruptions.c ****     static uint8 fsm_state;     
 962:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2834              		.loc 1 962 0
 2835 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2836 0012 002B     		cmp	r3, #0
 2837 0014 05D1     		bne	.L182
 963:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2838              		.loc 1 963 0
 2839 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2840 001a 0346     		mov	r3, r0
 2841 001c 1A46     		mov	r2, r3
 2842 001e 614B     		ldr	r3, .L197
 2843 0020 1A70     		strb	r2, [r3]
 2844              	.L182:
 964:..\src/interruptions.c ****     }
 965:..\src/interruptions.c ****        
 966:..\src/interruptions.c ****     switch (fsm_state){
 2845              		.loc 1 966 0
 2846 0022 604B     		ldr	r3, .L197
 2847 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2848 0026 032B     		cmp	r3, #3
 2849 0028 00F2B780 		bhi	.L194
 2850 002c 01A2     		adr	r2, .L185
 2851 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2852 0032 00BF     		.p2align 2
 2853              	.L185:
 2854 0034 45000000 		.word	.L184+1
 2855 0038 45000000 		.word	.L184+1
 2856 003c BF000000 		.word	.L186+1
 2857 0040 4F000000 		.word	.L187+1
 2858              		.p2align 1
 2859              	.L184:
 967:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 968:..\src/interruptions.c ****              
 969:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2860              		.loc 1 969 0
 2861 0044 7B68     		ldr	r3, [r7, #4]
 2862 0046 1A68     		ldr	r2, [r3]
 2863 0048 BB68     		ldr	r3, [r7, #8]
 2864 004a 1A60     		str	r2, [r3]
 970:..\src/interruptions.c ****     
 971:..\src/interruptions.c ****             break;
 2865              		.loc 1 971 0
 2866 004c A5E0     		b	.L183
 2867              	.L187:
 972:..\src/interruptions.c ****         
 973:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 70


 974:..\src/interruptions.c **** 
 975:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2868              		.loc 1 975 0
 2869 004e 3B68     		ldr	r3, [r7]
 2870 0050 002B     		cmp	r3, #0
 2871 0052 17DD     		ble	.L188
 2872              		.loc 1 975 0 is_stmt 0 discriminator 1
 2873 0054 3A68     		ldr	r2, [r7]
 2874 0056 BB69     		ldr	r3, [r7, #24]
 2875 0058 9A42     		cmp	r2, r3
 2876 005a 13DD     		ble	.L188
 976:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2877              		.loc 1 976 0 is_stmt 1
 2878 005c 7B68     		ldr	r3, [r7, #4]
 2879 005e 1A68     		ldr	r2, [r3]
 2880 0060 514B     		ldr	r3, .L197+4
 2881 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2882 0066 1946     		mov	r1, r3
 2883 0068 3B68     		ldr	r3, [r7]
 2884 006a 03FB01F3 		mul	r3, r3, r1
 2885 006e 9900     		lsls	r1, r3, #2
 2886 0070 4E4B     		ldr	r3, .L197+8
 2887 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2888 0076 C3F58063 		rsb	r3, r3, #1024
 2889 007a 91FBF3F3 		sdiv	r3, r1, r3
 2890 007e 1A44     		add	r2, r2, r3
 2891 0080 BB68     		ldr	r3, [r7, #8]
 2892 0082 1A60     		str	r2, [r3]
 2893              	.L188:
 977:..\src/interruptions.c ****             }
 978:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2894              		.loc 1 978 0
 2895 0084 BB69     		ldr	r3, [r7, #24]
 2896 0086 002B     		cmp	r3, #0
 2897 0088 40F38480 		ble	.L195
 2898              		.loc 1 978 0 is_stmt 0 discriminator 1
 2899 008c BA69     		ldr	r2, [r7, #24]
 2900 008e 3B68     		ldr	r3, [r7]
 2901 0090 9A42     		cmp	r2, r3
 2902 0092 7FDD     		ble	.L195
 979:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2903              		.loc 1 979 0 is_stmt 1
 2904 0094 7B68     		ldr	r3, [r7, #4]
 2905 0096 1A68     		ldr	r2, [r3]
 2906 0098 434B     		ldr	r3, .L197+4
 2907 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2908 009e 1946     		mov	r1, r3
 2909 00a0 BB69     		ldr	r3, [r7, #24]
 2910 00a2 03FB01F3 		mul	r3, r3, r1
 2911 00a6 9900     		lsls	r1, r3, #2
 2912 00a8 404B     		ldr	r3, .L197+8
 2913 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2914 00ae C3F58063 		rsb	r3, r3, #1024
 2915 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2916 00b6 D21A     		subs	r2, r2, r3
 2917 00b8 BB68     		ldr	r3, [r7, #8]
 2918 00ba 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 71


 980:..\src/interruptions.c ****             }
 981:..\src/interruptions.c ****             
 982:..\src/interruptions.c ****             break;
 2919              		.loc 1 982 0
 2920 00bc 6AE0     		b	.L195
 2921              	.L186:
 983:..\src/interruptions.c ****             
 984:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 985:..\src/interruptions.c ****             
 986:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2922              		.loc 1 986 0
 2923 00be 3B68     		ldr	r3, [r7]
 2924 00c0 002B     		cmp	r3, #0
 2925 00c2 31DD     		ble	.L190
 2926              		.loc 1 986 0 is_stmt 0 discriminator 1
 2927 00c4 3A68     		ldr	r2, [r7]
 2928 00c6 BB69     		ldr	r3, [r7, #24]
 2929 00c8 9A42     		cmp	r2, r3
 2930 00ca 2DDD     		ble	.L190
 987:..\src/interruptions.c ****                 if (motor_idx == 0){
 2931              		.loc 1 987 0 is_stmt 1
 2932 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2933 00ce 002B     		cmp	r3, #0
 2934 00d0 13D1     		bne	.L191
 988:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2935              		.loc 1 988 0
 2936 00d2 7B68     		ldr	r3, [r7, #4]
 2937 00d4 1A68     		ldr	r2, [r3]
 2938 00d6 344B     		ldr	r3, .L197+4
 2939 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2940 00dc 1946     		mov	r1, r3
 2941 00de 3B68     		ldr	r3, [r7]
 2942 00e0 03FB01F3 		mul	r3, r3, r1
 2943 00e4 9900     		lsls	r1, r3, #2
 2944 00e6 314B     		ldr	r3, .L197+8
 2945 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2946 00ec C3F58063 		rsb	r3, r3, #1024
 2947 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2948 00f4 1A44     		add	r2, r2, r3
 2949 00f6 BB68     		ldr	r3, [r7, #8]
 2950 00f8 1A60     		str	r2, [r3]
 2951              	.L191:
 989:..\src/interruptions.c ****                 }
 990:..\src/interruptions.c ****                 if (motor_idx == 1){
 2952              		.loc 1 990 0
 2953 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2954 00fc 012B     		cmp	r3, #1
 2955 00fe 13D1     		bne	.L190
 991:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2956              		.loc 1 991 0
 2957 0100 7B68     		ldr	r3, [r7, #4]
 2958 0102 1A68     		ldr	r2, [r3]
 2959 0104 284B     		ldr	r3, .L197+4
 2960 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2961 010a 1946     		mov	r1, r3
 2962 010c 3B68     		ldr	r3, [r7]
 2963 010e 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 72


 2964 0112 9900     		lsls	r1, r3, #2
 2965 0114 254B     		ldr	r3, .L197+8
 2966 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2967 011a C3F58063 		rsb	r3, r3, #1024
 2968 011e 91FBF3F3 		sdiv	r3, r1, r3
 2969 0122 D21A     		subs	r2, r2, r3
 2970 0124 BB68     		ldr	r3, [r7, #8]
 2971 0126 1A60     		str	r2, [r3]
 2972              	.L190:
 992:..\src/interruptions.c ****                 }   
 993:..\src/interruptions.c ****             }
 994:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2973              		.loc 1 994 0
 2974 0128 BB69     		ldr	r3, [r7, #24]
 2975 012a 002B     		cmp	r3, #0
 2976 012c 34DD     		ble	.L196
 2977              		.loc 1 994 0 is_stmt 0 discriminator 1
 2978 012e BA69     		ldr	r2, [r7, #24]
 2979 0130 3B68     		ldr	r3, [r7]
 2980 0132 9A42     		cmp	r2, r3
 2981 0134 30DD     		ble	.L196
 995:..\src/interruptions.c ****                 if (motor_idx == 0){
 2982              		.loc 1 995 0 is_stmt 1
 2983 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2984 0138 002B     		cmp	r3, #0
 2985 013a 13D1     		bne	.L193
 996:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2986              		.loc 1 996 0
 2987 013c 7B68     		ldr	r3, [r7, #4]
 2988 013e 1A68     		ldr	r2, [r3]
 2989 0140 194B     		ldr	r3, .L197+4
 2990 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2991 0146 1946     		mov	r1, r3
 2992 0148 BB69     		ldr	r3, [r7, #24]
 2993 014a 03FB01F3 		mul	r3, r3, r1
 2994 014e 9900     		lsls	r1, r3, #2
 2995 0150 164B     		ldr	r3, .L197+8
 2996 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2997 0156 C3F58063 		rsb	r3, r3, #1024
 2998 015a 91FBF3F3 		sdiv	r3, r1, r3
 2999 015e D21A     		subs	r2, r2, r3
 3000 0160 BB68     		ldr	r3, [r7, #8]
 3001 0162 1A60     		str	r2, [r3]
 3002              	.L193:
 997:..\src/interruptions.c ****                 }
 998:..\src/interruptions.c ****                 if (motor_idx == 1){
 3003              		.loc 1 998 0
 3004 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3005 0166 012B     		cmp	r3, #1
 3006 0168 16D1     		bne	.L196
 999:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3007              		.loc 1 999 0
 3008 016a 7B68     		ldr	r3, [r7, #4]
 3009 016c 1A68     		ldr	r2, [r3]
 3010 016e 0E4B     		ldr	r3, .L197+4
 3011 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 3012 0174 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 73


 3013 0176 BB69     		ldr	r3, [r7, #24]
 3014 0178 03FB01F3 		mul	r3, r3, r1
 3015 017c 9900     		lsls	r1, r3, #2
 3016 017e 0B4B     		ldr	r3, .L197+8
 3017 0180 B3F8F231 		ldrh	r3, [r3, #498]
 3018 0184 C3F58063 		rsb	r3, r3, #1024
 3019 0188 91FBF3F3 		sdiv	r3, r1, r3
 3020 018c 1A44     		add	r2, r2, r3
 3021 018e BB68     		ldr	r3, [r7, #8]
 3022 0190 1A60     		str	r2, [r3]
1000:..\src/interruptions.c ****                 }
1001:..\src/interruptions.c ****             }
1002:..\src/interruptions.c ****             
1003:..\src/interruptions.c ****             break;
 3023              		.loc 1 1003 0
 3024 0192 01E0     		b	.L196
 3025              	.L195:
 982:..\src/interruptions.c ****             
 3026              		.loc 1 982 0
 3027 0194 00BF     		nop
 3028 0196 00E0     		b	.L194
 3029              	.L196:
 3030              		.loc 1 1003 0
 3031 0198 00BF     		nop
 3032              	.L183:
 3033              	.L194:
1004:..\src/interruptions.c ****     }
1005:..\src/interruptions.c ****  
1006:..\src/interruptions.c **** }
 3034              		.loc 1 1006 0
 3035 019a 00BF     		nop
 3036 019c 1037     		adds	r7, r7, #16
 3037              		.cfi_def_cfa_offset 8
 3038 019e BD46     		mov	sp, r7
 3039              		.cfi_def_cfa_register 13
 3040              		@ sp needed
 3041 01a0 80BD     		pop	{r7, pc}
 3042              	.L198:
 3043 01a2 00BF     		.align	2
 3044              	.L197:
 3045 01a4 8E000000 		.word	fsm_state.10530
 3046 01a8 00000000 		.word	g_mem
 3047 01ac 00000000 		.word	c_mem
 3048              		.cfi_endproc
 3049              	.LFE70:
 3050              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3051              		.section	.text.motor_control_SH,"ax",%progbits
 3052              		.align	2
 3053              		.global	motor_control_SH
 3054              		.thumb
 3055              		.thumb_func
 3056              		.type	motor_control_SH, %function
 3057              	motor_control_SH:
 3058              	.LFB71:
1007:..\src/interruptions.c **** 
1008:..\src/interruptions.c **** //==============================================================================
1009:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 74


1010:..\src/interruptions.c **** //==============================================================================
1011:..\src/interruptions.c **** void motor_control_SH() {
 3059              		.loc 1 1011 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 80
 3062              		@ frame_needed = 1, uses_anonymous_args = 0
 3063 0000 80B5     		push	{r7, lr}
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 7, -8
 3066              		.cfi_offset 14, -4
 3067 0002 94B0     		sub	sp, sp, #80
 3068              		.cfi_def_cfa_offset 88
 3069 0004 00AF     		add	r7, sp, #0
 3070              		.cfi_def_cfa_register 7
1012:..\src/interruptions.c **** 
1013:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3071              		.loc 1 1013 0
 3072 0006 0023     		movs	r3, #0
 3073 0008 FB64     		str	r3, [r7, #76]
1014:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1015:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1016:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1017:..\src/interruptions.c ****  
1018:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3074              		.loc 1 1018 0
 3075 000a 0023     		movs	r3, #0
 3076 000c 87F84730 		strb	r3, [r7, #71]
1019:..\src/interruptions.c ****     
1020:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3077              		.loc 1 1020 0
 3078 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3079 0014 1346     		mov	r3, r2
 3080 0016 DB00     		lsls	r3, r3, #3
 3081 0018 9B1A     		subs	r3, r3, r2
 3082 001a 1B01     		lsls	r3, r3, #4
 3083 001c B033     		adds	r3, r3, #176
 3084 001e 9D4A     		ldr	r2, .L260
 3085 0020 1344     		add	r3, r3, r2
 3086 0022 3B64     		str	r3, [r7, #64]
1021:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3087              		.loc 1 1021 0
 3088 0024 3B6C     		ldr	r3, [r7, #64]
 3089 0026 93F86030 		ldrb	r3, [r3, #96]
 3090 002a 87F83F30 		strb	r3, [r7, #63]
1022:..\src/interruptions.c ****     
1023:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3091              		.loc 1 1023 0
 3092 002e 3B6C     		ldr	r3, [r7, #64]
 3093 0030 1B68     		ldr	r3, [r3]
 3094 0032 BB63     		str	r3, [r7, #56]
1024:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3095              		.loc 1 1024 0
 3096 0034 3B6C     		ldr	r3, [r7, #64]
 3097 0036 5B68     		ldr	r3, [r3, #4]
 3098 0038 7B63     		str	r3, [r7, #52]
1025:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3099              		.loc 1 1025 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 75


 3100 003a 3B6C     		ldr	r3, [r7, #64]
 3101 003c 9B68     		ldr	r3, [r3, #8]
 3102 003e 3B63     		str	r3, [r7, #48]
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3103              		.loc 1 1027 0
 3104 0040 3B6C     		ldr	r3, [r7, #64]
 3105 0042 DB68     		ldr	r3, [r3, #12]
 3106 0044 FB62     		str	r3, [r7, #44]
1028:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3107              		.loc 1 1028 0
 3108 0046 3B6C     		ldr	r3, [r7, #64]
 3109 0048 1B69     		ldr	r3, [r3, #16]
 3110 004a BB62     		str	r3, [r7, #40]
1029:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3111              		.loc 1 1029 0
 3112 004c 3B6C     		ldr	r3, [r7, #64]
 3113 004e 5B69     		ldr	r3, [r3, #20]
 3114 0050 7B62     		str	r3, [r7, #36]
1030:..\src/interruptions.c **** 
1031:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3115              		.loc 1 1031 0
 3116 0052 3B6C     		ldr	r3, [r7, #64]
 3117 0054 9B69     		ldr	r3, [r3, #24]
 3118 0056 3B62     		str	r3, [r7, #32]
1032:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3119              		.loc 1 1032 0
 3120 0058 3B6C     		ldr	r3, [r7, #64]
 3121 005a DB69     		ldr	r3, [r3, #28]
 3122 005c FB61     		str	r3, [r7, #28]
1033:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3123              		.loc 1 1033 0
 3124 005e 3B6C     		ldr	r3, [r7, #64]
 3125 0060 1B6A     		ldr	r3, [r3, #32]
 3126 0062 BB61     		str	r3, [r7, #24]
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3127              		.loc 1 1035 0
 3128 0064 3B6C     		ldr	r3, [r7, #64]
 3129 0066 5B6A     		ldr	r3, [r3, #36]
 3130 0068 7B61     		str	r3, [r7, #20]
1036:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3131              		.loc 1 1036 0
 3132 006a 3B6C     		ldr	r3, [r7, #64]
 3133 006c 9B6A     		ldr	r3, [r3, #40]
 3134 006e 3B61     		str	r3, [r7, #16]
1037:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3135              		.loc 1 1037 0
 3136 0070 3B6C     		ldr	r3, [r7, #64]
 3137 0072 DB6A     		ldr	r3, [r3, #44]
 3138 0074 FB60     		str	r3, [r7, #12]
1038:..\src/interruptions.c **** 
1039:..\src/interruptions.c ****     // Static Variables
1040:..\src/interruptions.c **** 
1041:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1042:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1043:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 76


1044:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1045:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1046:..\src/interruptions.c ****     static int32 prev_pwm;
1047:..\src/interruptions.c **** 
1048:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1049:..\src/interruptions.c ****     static uint32 position_counter = 0;
1050:..\src/interruptions.c ****   
1051:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1052:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3139              		.loc 1 1052 0
 3140 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3141 007a 1B01     		lsls	r3, r3, #4
 3142 007c 864A     		ldr	r2, .L260+4
 3143 007e 9918     		adds	r1, r3, r2
 3144 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3145 0084 1B01     		lsls	r3, r3, #4
 3146 0086 854A     		ldr	r2, .L260+8
 3147 0088 1A44     		add	r2, r2, r3
 3148 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3149 008e 1846     		mov	r0, r3
 3150 0090 FFF7FEFF 		bl	compute_reference
1053:..\src/interruptions.c ****      
1054:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3151              		.loc 1 1054 0
 3152 0094 3B6C     		ldr	r3, [r7, #64]
 3153 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3154 009a 032B     		cmp	r3, #3
 3155 009c 00F2F781 		bhi	.L200
 3156 00a0 01A2     		adr	r2, .L202
 3157 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3158 00a6 00BF     		.p2align 2
 3159              	.L202:
 3160 00a8 55020000 		.word	.L201+1
 3161 00ac 49040000 		.word	.L203+1
 3162 00b0 3B030000 		.word	.L204+1
 3163 00b4 B9000000 		.word	.L205+1
 3164              		.p2align 1
 3165              	.L205:
1055:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1056:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1057:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3166              		.loc 1 1057 0
 3167 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3168 00bc 764A     		ldr	r2, .L260+4
 3169 00be 1B01     		lsls	r3, r3, #4
 3170 00c0 1344     		add	r3, r3, r2
 3171 00c2 1A68     		ldr	r2, [r3]
 3172 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3173 00c8 7549     		ldr	r1, .L260+12
 3174 00ca 3420     		movs	r0, #52
 3175 00cc 00FB03F3 		mul	r3, r0, r3
 3176 00d0 0B44     		add	r3, r3, r1
 3177 00d2 1B68     		ldr	r3, [r3]
 3178 00d4 D31A     		subs	r3, r2, r3
 3179 00d6 BB60     		str	r3, [r7, #8]
1058:..\src/interruptions.c **** 
1059:..\src/interruptions.c ****             pos_error_sum += pos_error;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 77


 3180              		.loc 1 1059 0
 3181 00d8 724B     		ldr	r3, .L260+16
 3182 00da 1A68     		ldr	r2, [r3]
 3183 00dc BB68     		ldr	r3, [r7, #8]
 3184 00de 1344     		add	r3, r3, r2
 3185 00e0 704A     		ldr	r2, .L260+16
 3186 00e2 1360     		str	r3, [r2]
1060:..\src/interruptions.c **** 
1061:..\src/interruptions.c ****             // error_sum saturation
1062:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3187              		.loc 1 1062 0
 3188 00e4 6F4B     		ldr	r3, .L260+16
 3189 00e6 1B68     		ldr	r3, [r3]
 3190 00e8 6F4A     		ldr	r2, .L260+20
 3191 00ea 9342     		cmp	r3, r2
 3192 00ec 03DD     		ble	.L206
1063:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3193              		.loc 1 1063 0
 3194 00ee 6D4B     		ldr	r3, .L260+16
 3195 00f0 6D4A     		ldr	r2, .L260+20
 3196 00f2 1A60     		str	r2, [r3]
 3197 00f4 07E0     		b	.L207
 3198              	.L206:
1064:..\src/interruptions.c ****             else {
1065:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3199              		.loc 1 1065 0
 3200 00f6 6B4B     		ldr	r3, .L260+16
 3201 00f8 1B68     		ldr	r3, [r3]
 3202 00fa 6C4A     		ldr	r2, .L260+24
 3203 00fc 9342     		cmp	r3, r2
 3204 00fe 02DA     		bge	.L207
1066:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3205              		.loc 1 1066 0
 3206 0100 684B     		ldr	r3, .L260+16
 3207 0102 6A4A     		ldr	r2, .L260+24
 3208 0104 1A60     		str	r2, [r3]
 3209              	.L207:
1067:..\src/interruptions.c ****             }
1068:..\src/interruptions.c ****             
1069:..\src/interruptions.c ****             // ------ position PID control ------
1070:..\src/interruptions.c **** 
1071:..\src/interruptions.c ****             i_ref = 0;
 3210              		.loc 1 1071 0
 3211 0106 0023     		movs	r3, #0
 3212 0108 BB64     		str	r3, [r7, #72]
1072:..\src/interruptions.c ****             
1073:..\src/interruptions.c ****             // Proportional
1074:..\src/interruptions.c ****             if (k_p_dl != 0)
 3213              		.loc 1 1074 0
 3214 010a 3B6A     		ldr	r3, [r7, #32]
 3215 010c 002B     		cmp	r3, #0
 3216 010e 07D0     		beq	.L208
1075:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3217              		.loc 1 1075 0
 3218 0110 3B6A     		ldr	r3, [r7, #32]
 3219 0112 BA68     		ldr	r2, [r7, #8]
 3220 0114 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 78


 3221 0118 1B14     		asrs	r3, r3, #16
 3222 011a BA6C     		ldr	r2, [r7, #72]
 3223 011c 1344     		add	r3, r3, r2
 3224 011e BB64     		str	r3, [r7, #72]
 3225              	.L208:
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****             // Integral
1078:..\src/interruptions.c ****             if (k_i_dl != 0)
 3226              		.loc 1 1078 0
 3227 0120 FB69     		ldr	r3, [r7, #28]
 3228 0122 002B     		cmp	r3, #0
 3229 0124 08D0     		beq	.L209
1079:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3230              		.loc 1 1079 0
 3231 0126 5F4B     		ldr	r3, .L260+16
 3232 0128 1B68     		ldr	r3, [r3]
 3233 012a FA69     		ldr	r2, [r7, #28]
 3234 012c 02FB03F3 		mul	r3, r2, r3
 3235 0130 1B14     		asrs	r3, r3, #16
 3236 0132 BA6C     		ldr	r2, [r7, #72]
 3237 0134 1344     		add	r3, r3, r2
 3238 0136 BB64     		str	r3, [r7, #72]
 3239              	.L209:
1080:..\src/interruptions.c **** 
1081:..\src/interruptions.c ****             // Derivative
1082:..\src/interruptions.c ****             if (k_d_dl != 0)
 3240              		.loc 1 1082 0
 3241 0138 BB69     		ldr	r3, [r7, #24]
 3242 013a 002B     		cmp	r3, #0
 3243 013c 0AD0     		beq	.L210
1083:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3244              		.loc 1 1083 0
 3245 013e 5C4B     		ldr	r3, .L260+28
 3246 0140 1B68     		ldr	r3, [r3]
 3247 0142 BA68     		ldr	r2, [r7, #8]
 3248 0144 D31A     		subs	r3, r2, r3
 3249 0146 BA69     		ldr	r2, [r7, #24]
 3250 0148 02FB03F3 		mul	r3, r2, r3
 3251 014c 1B14     		asrs	r3, r3, #16
 3252 014e BA6C     		ldr	r2, [r7, #72]
 3253 0150 1344     		add	r3, r3, r2
 3254 0152 BB64     		str	r3, [r7, #72]
 3255              	.L210:
1084:..\src/interruptions.c ****                         
1085:..\src/interruptions.c ****             // Update previous position
1086:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3256              		.loc 1 1086 0
 3257 0154 564A     		ldr	r2, .L260+28
 3258 0156 BB68     		ldr	r3, [r7, #8]
 3259 0158 1360     		str	r3, [r2]
1087:..\src/interruptions.c **** 
1088:..\src/interruptions.c ****             // motor direction depends on i_ref
1089:..\src/interruptions.c ****             if (i_ref >= 0)
 3260              		.loc 1 1089 0
 3261 015a BB6C     		ldr	r3, [r7, #72]
 3262 015c 002B     		cmp	r3, #0
 3263 015e 03DB     		blt	.L211
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 79


1090:..\src/interruptions.c ****                 motor_dir = TRUE;
 3264              		.loc 1 1090 0
 3265 0160 544B     		ldr	r3, .L260+32
 3266 0162 0122     		movs	r2, #1
 3267 0164 1A70     		strb	r2, [r3]
 3268 0166 02E0     		b	.L212
 3269              	.L211:
1091:..\src/interruptions.c ****             else
1092:..\src/interruptions.c ****                 motor_dir = FALSE;
 3270              		.loc 1 1092 0
 3271 0168 524B     		ldr	r3, .L260+32
 3272 016a 0022     		movs	r2, #0
 3273 016c 1A70     		strb	r2, [r3]
 3274              	.L212:
1093:..\src/interruptions.c **** 
1094:..\src/interruptions.c ****             // saturate max current
1095:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3275              		.loc 1 1095 0
 3276 016e 3B6C     		ldr	r3, [r7, #64]
 3277 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3278 0174 1A46     		mov	r2, r3
 3279 0176 BB6C     		ldr	r3, [r7, #72]
 3280 0178 9A42     		cmp	r2, r3
 3281 017a 04DA     		bge	.L213
1096:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3282              		.loc 1 1096 0
 3283 017c 3B6C     		ldr	r3, [r7, #64]
 3284 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3285 0182 BB64     		str	r3, [r7, #72]
 3286 0184 0BE0     		b	.L214
 3287              	.L213:
1097:..\src/interruptions.c ****             else {
1098:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3288              		.loc 1 1098 0
 3289 0186 3B6C     		ldr	r3, [r7, #64]
 3290 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3291 018c 5A42     		negs	r2, r3
 3292 018e BB6C     		ldr	r3, [r7, #72]
 3293 0190 9A42     		cmp	r2, r3
 3294 0192 04DD     		ble	.L214
1099:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3295              		.loc 1 1099 0
 3296 0194 3B6C     		ldr	r3, [r7, #64]
 3297 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3298 019a 5B42     		negs	r3, r3
 3299 019c BB64     		str	r3, [r7, #72]
 3300              	.L214:
1100:..\src/interruptions.c ****         	}
1101:..\src/interruptions.c **** 
1102:..\src/interruptions.c ****             // current error and curr error sum
1103:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3301              		.loc 1 1103 0
 3302 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3303 01a2 3F4A     		ldr	r2, .L260+12
 3304 01a4 3421     		movs	r1, #52
 3305 01a6 01FB03F3 		mul	r3, r1, r3
 3306 01aa 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 80


 3307 01ac 0C33     		adds	r3, r3, #12
 3308 01ae 1B68     		ldr	r3, [r3]
 3309 01b0 BA6C     		ldr	r2, [r7, #72]
 3310 01b2 D31A     		subs	r3, r2, r3
 3311 01b4 7B60     		str	r3, [r7, #4]
1104:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3312              		.loc 1 1104 0
 3313 01b6 404B     		ldr	r3, .L260+36
 3314 01b8 1A68     		ldr	r2, [r3]
 3315 01ba 7B68     		ldr	r3, [r7, #4]
 3316 01bc 1344     		add	r3, r3, r2
 3317 01be 3E4A     		ldr	r2, .L260+36
 3318 01c0 1360     		str	r3, [r2]
1105:..\src/interruptions.c ****             
1106:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3319              		.loc 1 1106 0
 3320 01c2 3D4B     		ldr	r3, .L260+36
 3321 01c4 1B68     		ldr	r3, [r3]
 3322 01c6 3D4A     		ldr	r2, .L260+40
 3323 01c8 9342     		cmp	r3, r2
 3324 01ca 03DD     		ble	.L215
1107:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3325              		.loc 1 1107 0
 3326 01cc 3A4B     		ldr	r3, .L260+36
 3327 01ce 3B4A     		ldr	r2, .L260+40
 3328 01d0 1A60     		str	r2, [r3]
 3329 01d2 07E0     		b	.L216
 3330              	.L215:
1108:..\src/interruptions.c ****             else {
1109:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3331              		.loc 1 1109 0
 3332 01d4 384B     		ldr	r3, .L260+36
 3333 01d6 1B68     		ldr	r3, [r3]
 3334 01d8 394A     		ldr	r2, .L260+44
 3335 01da 9342     		cmp	r3, r2
 3336 01dc 02DA     		bge	.L216
1110:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3337              		.loc 1 1110 0
 3338 01de 364B     		ldr	r3, .L260+36
 3339 01e0 374A     		ldr	r2, .L260+44
 3340 01e2 1A60     		str	r2, [r3]
 3341              	.L216:
1111:..\src/interruptions.c ****             }
1112:..\src/interruptions.c **** 
1113:..\src/interruptions.c ****             // ----- current PID control -----
1114:..\src/interruptions.c **** 
1115:..\src/interruptions.c ****             pwm_input = 0;
 3342              		.loc 1 1115 0
 3343 01e4 0023     		movs	r3, #0
 3344 01e6 FB64     		str	r3, [r7, #76]
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****             // Proportional
1118:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3345              		.loc 1 1118 0
 3346 01e8 7B69     		ldr	r3, [r7, #20]
 3347 01ea 002B     		cmp	r3, #0
 3348 01ec 07D0     		beq	.L217
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 81


1119:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3349              		.loc 1 1119 0
 3350 01ee 7B69     		ldr	r3, [r7, #20]
 3351 01f0 7A68     		ldr	r2, [r7, #4]
 3352 01f2 02FB03F3 		mul	r3, r2, r3
 3353 01f6 1B14     		asrs	r3, r3, #16
 3354 01f8 FA6C     		ldr	r2, [r7, #76]
 3355 01fa 1344     		add	r3, r3, r2
 3356 01fc FB64     		str	r3, [r7, #76]
 3357              	.L217:
1120:..\src/interruptions.c **** 
1121:..\src/interruptions.c ****             // Integral
1122:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3358              		.loc 1 1122 0
 3359 01fe 3B69     		ldr	r3, [r7, #16]
 3360 0200 002B     		cmp	r3, #0
 3361 0202 08D0     		beq	.L218
1123:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3362              		.loc 1 1123 0
 3363 0204 2C4B     		ldr	r3, .L260+36
 3364 0206 1B68     		ldr	r3, [r3]
 3365 0208 3A69     		ldr	r2, [r7, #16]
 3366 020a 02FB03F3 		mul	r3, r2, r3
 3367 020e 1B14     		asrs	r3, r3, #16
 3368 0210 FA6C     		ldr	r2, [r7, #76]
 3369 0212 1344     		add	r3, r3, r2
 3370 0214 FB64     		str	r3, [r7, #76]
 3371              	.L218:
1124:..\src/interruptions.c **** 
1125:..\src/interruptions.c ****             // Derivative
1126:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3372              		.loc 1 1126 0
 3373 0216 FB68     		ldr	r3, [r7, #12]
 3374 0218 002B     		cmp	r3, #0
 3375 021a 0AD0     		beq	.L219
1127:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3376              		.loc 1 1127 0
 3377 021c 294B     		ldr	r3, .L260+48
 3378 021e 1B68     		ldr	r3, [r3]
 3379 0220 7A68     		ldr	r2, [r7, #4]
 3380 0222 D31A     		subs	r3, r2, r3
 3381 0224 FA68     		ldr	r2, [r7, #12]
 3382 0226 02FB03F3 		mul	r3, r2, r3
 3383 022a 1B14     		asrs	r3, r3, #16
 3384 022c FA6C     		ldr	r2, [r7, #76]
 3385 022e 1344     		add	r3, r3, r2
 3386 0230 FB64     		str	r3, [r7, #76]
 3387              	.L219:
1128:..\src/interruptions.c **** 
1129:..\src/interruptions.c ****             // pwm_input saturation
1130:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3388              		.loc 1 1130 0
 3389 0232 FB6C     		ldr	r3, [r7, #76]
 3390 0234 13F1640F 		cmn	r3, #100
 3391 0238 03DA     		bge	.L220
1131:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3392              		.loc 1 1131 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 82


 3393 023a 6FF06303 		mvn	r3, #99
 3394 023e FB64     		str	r3, [r7, #76]
 3395 0240 04E0     		b	.L221
 3396              	.L220:
1132:..\src/interruptions.c ****             else {
1133:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3397              		.loc 1 1133 0
 3398 0242 FB6C     		ldr	r3, [r7, #76]
 3399 0244 642B     		cmp	r3, #100
 3400 0246 01DD     		ble	.L221
1134:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3401              		.loc 1 1134 0
 3402 0248 6423     		movs	r3, #100
 3403 024a FB64     		str	r3, [r7, #76]
 3404              	.L221:
1135:..\src/interruptions.c ****             }
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c ****             // Update previous current
1138:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3405              		.loc 1 1138 0
 3406 024c 1D4A     		ldr	r2, .L260+48
 3407 024e 7B68     		ldr	r3, [r7, #4]
 3408 0250 1360     		str	r3, [r2]
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****         break;
 3409              		.loc 1 1140 0
 3410 0252 1CE1     		b	.L200
 3411              	.L201:
1141:..\src/interruptions.c **** 
1142:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1143:..\src/interruptions.c ****         case CONTROL_ANGLE:
1144:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3412              		.loc 1 1144 0
 3413 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3414 0258 0F4A     		ldr	r2, .L260+4
 3415 025a 1B01     		lsls	r3, r3, #4
 3416 025c 1344     		add	r3, r3, r2
 3417 025e 1A68     		ldr	r2, [r3]
 3418 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3419 0264 0E49     		ldr	r1, .L260+12
 3420 0266 3420     		movs	r0, #52
 3421 0268 00FB03F3 		mul	r3, r0, r3
 3422 026c 0B44     		add	r3, r3, r1
 3423 026e 1B68     		ldr	r3, [r3]
 3424 0270 D31A     		subs	r3, r2, r3
 3425 0272 BB60     		str	r3, [r7, #8]
1145:..\src/interruptions.c **** 
1146:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3426              		.loc 1 1146 0
 3427 0274 0B4B     		ldr	r3, .L260+16
 3428 0276 1A68     		ldr	r2, [r3]
 3429 0278 BB68     		ldr	r3, [r7, #8]
 3430 027a 1344     		add	r3, r3, r2
 3431 027c 094A     		ldr	r2, .L260+16
 3432 027e 1360     		str	r3, [r2]
1147:..\src/interruptions.c **** 
1148:..\src/interruptions.c ****             // anti-windup (for integral control)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 83


1149:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3433              		.loc 1 1149 0
 3434 0280 084B     		ldr	r3, .L260+16
 3435 0282 1B68     		ldr	r3, [r3]
 3436 0284 B3F57A7F 		cmp	r3, #1000
 3437 0288 1EDD     		ble	.L222
1150:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3438              		.loc 1 1150 0
 3439 028a 064B     		ldr	r3, .L260+16
 3440 028c 4FF47A72 		mov	r2, #1000
 3441 0290 1A60     		str	r2, [r3]
 3442 0292 21E0     		b	.L223
 3443              	.L261:
 3444              		.align	2
 3445              	.L260:
 3446 0294 00000000 		.word	c_mem
 3447 0298 00000000 		.word	g_ref
 3448 029c 00000000 		.word	g_refOld
 3449 02a0 00000000 		.word	g_meas
 3450 02a4 90000000 		.word	pos_error_sum.10557
 3451 02a8 80F0FA02 		.word	50000000
 3452 02ac 800F05FD 		.word	-50000000
 3453 02b0 94000000 		.word	prev_pos_err.10559
 3454 02b4 98000000 		.word	motor_dir.10562
 3455 02b8 9C000000 		.word	curr_error_sum.10558
 3456 02bc A0860100 		.word	100000
 3457 02c0 6079FEFF 		.word	-100000
 3458 02c4 A0000000 		.word	prev_curr_err.10560
 3459              	.L222:
1151:..\src/interruptions.c ****             else {
1152:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3460              		.loc 1 1152 0
 3461 02c8 9D4B     		ldr	r3, .L262
 3462 02ca 1B68     		ldr	r3, [r3]
 3463 02cc 13F57A7F 		cmn	r3, #1000
 3464 02d0 02DA     		bge	.L223
1153:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3465              		.loc 1 1153 0
 3466 02d2 9B4B     		ldr	r3, .L262
 3467 02d4 9B4A     		ldr	r2, .L262+4
 3468 02d6 1A60     		str	r2, [r3]
 3469              	.L223:
1154:..\src/interruptions.c ****             }
1155:..\src/interruptions.c **** 
1156:..\src/interruptions.c ****             // Proportional
1157:..\src/interruptions.c ****             if (k_p != 0) 
 3470              		.loc 1 1157 0
 3471 02d8 BB6B     		ldr	r3, [r7, #56]
 3472 02da 002B     		cmp	r3, #0
 3473 02dc 05D0     		beq	.L224
1158:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3474              		.loc 1 1158 0
 3475 02de BB6B     		ldr	r3, [r7, #56]
 3476 02e0 BA68     		ldr	r2, [r7, #8]
 3477 02e2 02FB03F3 		mul	r3, r2, r3
 3478 02e6 1B14     		asrs	r3, r3, #16
 3479 02e8 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 84


 3480              	.L224:
1159:..\src/interruptions.c ****             
1160:..\src/interruptions.c **** 
1161:..\src/interruptions.c ****             // Integral
1162:..\src/interruptions.c ****             if (k_i != 0) 
 3481              		.loc 1 1162 0
 3482 02ea 7B6B     		ldr	r3, [r7, #52]
 3483 02ec 002B     		cmp	r3, #0
 3484 02ee 08D0     		beq	.L225
1163:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3485              		.loc 1 1163 0
 3486 02f0 934B     		ldr	r3, .L262
 3487 02f2 1B68     		ldr	r3, [r3]
 3488 02f4 7A6B     		ldr	r2, [r7, #52]
 3489 02f6 02FB03F3 		mul	r3, r2, r3
 3490 02fa 1B14     		asrs	r3, r3, #16
 3491 02fc FA6C     		ldr	r2, [r7, #76]
 3492 02fe 1344     		add	r3, r3, r2
 3493 0300 FB64     		str	r3, [r7, #76]
 3494              	.L225:
1164:..\src/interruptions.c ****             
1165:..\src/interruptions.c **** 
1166:..\src/interruptions.c ****             // Derivative
1167:..\src/interruptions.c ****             if (k_d != 0) 
 3495              		.loc 1 1167 0
 3496 0302 3B6B     		ldr	r3, [r7, #48]
 3497 0304 002B     		cmp	r3, #0
 3498 0306 0AD0     		beq	.L226
1168:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3499              		.loc 1 1168 0
 3500 0308 8F4B     		ldr	r3, .L262+8
 3501 030a 1B68     		ldr	r3, [r3]
 3502 030c BA68     		ldr	r2, [r7, #8]
 3503 030e D31A     		subs	r3, r2, r3
 3504 0310 3A6B     		ldr	r2, [r7, #48]
 3505 0312 02FB03F3 		mul	r3, r2, r3
 3506 0316 1B14     		asrs	r3, r3, #16
 3507 0318 FA6C     		ldr	r2, [r7, #76]
 3508 031a 1344     		add	r3, r3, r2
 3509 031c FB64     		str	r3, [r7, #76]
 3510              	.L226:
1169:..\src/interruptions.c ****             
1170:..\src/interruptions.c **** 
1171:..\src/interruptions.c ****             // Update measure
1172:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3511              		.loc 1 1172 0
 3512 031e 8A4A     		ldr	r2, .L262+8
 3513 0320 BB68     		ldr	r3, [r7, #8]
 3514 0322 1360     		str	r3, [r2]
1173:..\src/interruptions.c **** 
1174:..\src/interruptions.c ****             if (pwm_input > 0)
 3515              		.loc 1 1174 0
 3516 0324 FB6C     		ldr	r3, [r7, #76]
 3517 0326 002B     		cmp	r3, #0
 3518 0328 03DD     		ble	.L227
1175:..\src/interruptions.c ****                 motor_dir = TRUE;
 3519              		.loc 1 1175 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 85


 3520 032a 884B     		ldr	r3, .L262+12
 3521 032c 0122     		movs	r2, #1
 3522 032e 1A70     		strb	r2, [r3]
1176:..\src/interruptions.c ****             else
1177:..\src/interruptions.c ****                 motor_dir = FALSE;
1178:..\src/interruptions.c **** 
1179:..\src/interruptions.c ****         break;
 3523              		.loc 1 1179 0
 3524 0330 ADE0     		b	.L200
 3525              	.L227:
1177:..\src/interruptions.c **** 
 3526              		.loc 1 1177 0
 3527 0332 864B     		ldr	r3, .L262+12
 3528 0334 0022     		movs	r2, #0
 3529 0336 1A70     		strb	r2, [r3]
 3530              		.loc 1 1179 0
 3531 0338 A9E0     		b	.L200
 3532              	.L204:
1180:..\src/interruptions.c **** 
1181:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1182:..\src/interruptions.c ****         case CONTROL_CURRENT:
1183:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3533              		.loc 1 1183 0
 3534 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3535 033e 844A     		ldr	r2, .L262+16
 3536 0340 1B01     		lsls	r3, r3, #4
 3537 0342 1344     		add	r3, r3, r2
 3538 0344 0C33     		adds	r3, r3, #12
 3539 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3540 0348 002B     		cmp	r3, #0
 3541 034a 00F09D80 		beq	.L258
 3542              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3543 034e 814B     		ldr	r3, .L262+20
 3544 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3545 0352 002B     		cmp	r3, #0
 3546 0354 00F09880 		beq	.L258
1184:..\src/interruptions.c ****                 
1185:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3547              		.loc 1 1185 0 is_stmt 1
 3548 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3549 035c 7C4A     		ldr	r2, .L262+16
 3550 035e 1B01     		lsls	r3, r3, #4
 3551 0360 1344     		add	r3, r3, r2
 3552 0362 0433     		adds	r3, r3, #4
 3553 0364 1B68     		ldr	r3, [r3]
 3554 0366 BB64     		str	r3, [r7, #72]
1186:..\src/interruptions.c **** 
1187:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3555              		.loc 1 1187 0
 3556 0368 3B6C     		ldr	r3, [r7, #64]
 3557 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3558 036e 1A46     		mov	r2, r3
 3559 0370 BB6C     		ldr	r3, [r7, #72]
 3560 0372 9A42     		cmp	r2, r3
 3561 0374 04DA     		bge	.L230
1188:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3562              		.loc 1 1188 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 86


 3563 0376 3B6C     		ldr	r3, [r7, #64]
 3564 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3565 037c BB64     		str	r3, [r7, #72]
 3566 037e 0BE0     		b	.L231
 3567              	.L230:
1189:..\src/interruptions.c ****                 else {
1190:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3568              		.loc 1 1190 0
 3569 0380 3B6C     		ldr	r3, [r7, #64]
 3570 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3571 0386 5A42     		negs	r2, r3
 3572 0388 BB6C     		ldr	r3, [r7, #72]
 3573 038a 9A42     		cmp	r2, r3
 3574 038c 04DD     		ble	.L231
1191:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3575              		.loc 1 1191 0
 3576 038e 3B6C     		ldr	r3, [r7, #64]
 3577 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3578 0394 5B42     		negs	r3, r3
 3579 0396 BB64     		str	r3, [r7, #72]
 3580              	.L231:
1192:..\src/interruptions.c ****                 }
1193:..\src/interruptions.c ****                 
1194:..\src/interruptions.c ****                 // current error
1195:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3581              		.loc 1 1195 0
 3582 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3583 039c 6E4A     		ldr	r2, .L262+24
 3584 039e 3421     		movs	r1, #52
 3585 03a0 01FB03F3 		mul	r3, r1, r3
 3586 03a4 1344     		add	r3, r3, r2
 3587 03a6 0C33     		adds	r3, r3, #12
 3588 03a8 1B68     		ldr	r3, [r3]
 3589 03aa BA6C     		ldr	r2, [r7, #72]
 3590 03ac D31A     		subs	r3, r2, r3
 3591 03ae 7B60     		str	r3, [r7, #4]
1196:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3592              		.loc 1 1196 0
 3593 03b0 6A4B     		ldr	r3, .L262+28
 3594 03b2 1A68     		ldr	r2, [r3]
 3595 03b4 7B68     		ldr	r3, [r7, #4]
 3596 03b6 1344     		add	r3, r3, r2
 3597 03b8 684A     		ldr	r2, .L262+28
 3598 03ba 1360     		str	r3, [r2]
1197:..\src/interruptions.c ****                 
1198:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3599              		.loc 1 1198 0
 3600 03bc 674B     		ldr	r3, .L262+28
 3601 03be 1B68     		ldr	r3, [r3]
 3602 03c0 674A     		ldr	r2, .L262+32
 3603 03c2 9342     		cmp	r3, r2
 3604 03c4 03DD     		ble	.L232
1199:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3605              		.loc 1 1199 0
 3606 03c6 654B     		ldr	r3, .L262+28
 3607 03c8 654A     		ldr	r2, .L262+32
 3608 03ca 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 87


 3609 03cc 07E0     		b	.L233
 3610              	.L232:
1200:..\src/interruptions.c ****                 else {
1201:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3611              		.loc 1 1201 0
 3612 03ce 634B     		ldr	r3, .L262+28
 3613 03d0 1B68     		ldr	r3, [r3]
 3614 03d2 644A     		ldr	r2, .L262+36
 3615 03d4 9342     		cmp	r3, r2
 3616 03d6 02DA     		bge	.L233
1202:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3617              		.loc 1 1202 0
 3618 03d8 604B     		ldr	r3, .L262+28
 3619 03da 624A     		ldr	r2, .L262+36
 3620 03dc 1A60     		str	r2, [r3]
 3621              	.L233:
1203:..\src/interruptions.c ****                 }
1204:..\src/interruptions.c **** 
1205:..\src/interruptions.c ****                 pwm_input = 0;
 3622              		.loc 1 1205 0
 3623 03de 0023     		movs	r3, #0
 3624 03e0 FB64     		str	r3, [r7, #76]
1206:..\src/interruptions.c **** 
1207:..\src/interruptions.c ****                 // Proportional
1208:..\src/interruptions.c ****                 if (k_p_c != 0)
 3625              		.loc 1 1208 0
 3626 03e2 FB6A     		ldr	r3, [r7, #44]
 3627 03e4 002B     		cmp	r3, #0
 3628 03e6 07D0     		beq	.L234
1209:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3629              		.loc 1 1209 0
 3630 03e8 FB6A     		ldr	r3, [r7, #44]
 3631 03ea 7A68     		ldr	r2, [r7, #4]
 3632 03ec 02FB03F3 		mul	r3, r2, r3
 3633 03f0 1B14     		asrs	r3, r3, #16
 3634 03f2 FA6C     		ldr	r2, [r7, #76]
 3635 03f4 1344     		add	r3, r3, r2
 3636 03f6 FB64     		str	r3, [r7, #76]
 3637              	.L234:
1210:..\src/interruptions.c **** 
1211:..\src/interruptions.c ****                 // Integral
1212:..\src/interruptions.c ****                 if (k_i_c != 0)
 3638              		.loc 1 1212 0
 3639 03f8 BB6A     		ldr	r3, [r7, #40]
 3640 03fa 002B     		cmp	r3, #0
 3641 03fc 08D0     		beq	.L235
1213:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3642              		.loc 1 1213 0
 3643 03fe 574B     		ldr	r3, .L262+28
 3644 0400 1B68     		ldr	r3, [r3]
 3645 0402 BA6A     		ldr	r2, [r7, #40]
 3646 0404 02FB03F3 		mul	r3, r2, r3
 3647 0408 1B14     		asrs	r3, r3, #16
 3648 040a FA6C     		ldr	r2, [r7, #76]
 3649 040c 1344     		add	r3, r3, r2
 3650 040e FB64     		str	r3, [r7, #76]
 3651              	.L235:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 88


1214:..\src/interruptions.c **** 
1215:..\src/interruptions.c ****                 // Derivative
1216:..\src/interruptions.c ****                 if (k_d_c != 0)
 3652              		.loc 1 1216 0
 3653 0410 7B6A     		ldr	r3, [r7, #36]
 3654 0412 002B     		cmp	r3, #0
 3655 0414 0AD0     		beq	.L236
1217:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3656              		.loc 1 1217 0
 3657 0416 544B     		ldr	r3, .L262+40
 3658 0418 1B68     		ldr	r3, [r3]
 3659 041a 7A68     		ldr	r2, [r7, #4]
 3660 041c D31A     		subs	r3, r2, r3
 3661 041e 7A6A     		ldr	r2, [r7, #36]
 3662 0420 02FB03F3 		mul	r3, r2, r3
 3663 0424 1B14     		asrs	r3, r3, #16
 3664 0426 FA6C     		ldr	r2, [r7, #76]
 3665 0428 1344     		add	r3, r3, r2
 3666 042a FB64     		str	r3, [r7, #76]
 3667              	.L236:
1218:..\src/interruptions.c ****                 
1219:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3668              		.loc 1 1219 0
 3669 042c 4E4A     		ldr	r2, .L262+40
 3670 042e 7B68     		ldr	r3, [r7, #4]
 3671 0430 1360     		str	r3, [r2]
1220:..\src/interruptions.c ****                 
1221:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3672              		.loc 1 1221 0
 3673 0432 FB6C     		ldr	r3, [r7, #76]
 3674 0434 002B     		cmp	r3, #0
 3675 0436 03DB     		blt	.L237
1222:..\src/interruptions.c ****                     motor_dir = TRUE;
 3676              		.loc 1 1222 0
 3677 0438 444B     		ldr	r3, .L262+12
 3678 043a 0122     		movs	r2, #1
 3679 043c 1A70     		strb	r2, [r3]
1223:..\src/interruptions.c ****                 else
1224:..\src/interruptions.c ****                     motor_dir = FALSE;
1225:..\src/interruptions.c ****             }
1226:..\src/interruptions.c ****         break;
 3680              		.loc 1 1226 0
 3681 043e 23E0     		b	.L258
 3682              	.L237:
1224:..\src/interruptions.c ****             }
 3683              		.loc 1 1224 0
 3684 0440 424B     		ldr	r3, .L262+12
 3685 0442 0022     		movs	r2, #0
 3686 0444 1A70     		strb	r2, [r3]
 3687              		.loc 1 1226 0
 3688 0446 1FE0     		b	.L258
 3689              	.L203:
1227:..\src/interruptions.c ****         
1228:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1229:..\src/interruptions.c ****         case CONTROL_PWM:
1230:..\src/interruptions.c **** 
1231:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 89


 3690              		.loc 1 1231 0
 3691 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3692 044c 404A     		ldr	r2, .L262+16
 3693 044e 1B01     		lsls	r3, r3, #4
 3694 0450 1344     		add	r3, r3, r2
 3695 0452 0833     		adds	r3, r3, #8
 3696 0454 1B68     		ldr	r3, [r3]
 3697 0456 FB64     		str	r3, [r7, #76]
1232:..\src/interruptions.c **** 
1233:..\src/interruptions.c ****             if (pwm_input > 0) 
 3698              		.loc 1 1233 0
 3699 0458 FB6C     		ldr	r3, [r7, #76]
 3700 045a 002B     		cmp	r3, #0
 3701 045c 03DD     		ble	.L238
1234:..\src/interruptions.c ****                 motor_dir = TRUE;
 3702              		.loc 1 1234 0
 3703 045e 3B4B     		ldr	r3, .L262+12
 3704 0460 0122     		movs	r2, #1
 3705 0462 1A70     		strb	r2, [r3]
 3706 0464 02E0     		b	.L239
 3707              	.L238:
1235:..\src/interruptions.c ****             else 
1236:..\src/interruptions.c ****                 motor_dir = FALSE;
 3708              		.loc 1 1236 0
 3709 0466 394B     		ldr	r3, .L262+12
 3710 0468 0022     		movs	r2, #0
 3711 046a 1A70     		strb	r2, [r3]
 3712              	.L239:
1237:..\src/interruptions.c ****             
1238:..\src/interruptions.c **** 
1239:..\src/interruptions.c ****             // pwm_input saturation
1240:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3713              		.loc 1 1240 0
 3714 046c FB6C     		ldr	r3, [r7, #76]
 3715 046e 13F1640F 		cmn	r3, #100
 3716 0472 03DA     		bge	.L240
1241:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3717              		.loc 1 1241 0
 3718 0474 6FF06303 		mvn	r3, #99
 3719 0478 FB64     		str	r3, [r7, #76]
1242:..\src/interruptions.c ****             else {
1243:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1244:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1245:..\src/interruptions.c ****         	}
1246:..\src/interruptions.c **** 
1247:..\src/interruptions.c ****         break;
 3720              		.loc 1 1247 0
 3721 047a 07E0     		b	.L259
 3722              	.L240:
1243:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3723              		.loc 1 1243 0
 3724 047c FB6C     		ldr	r3, [r7, #76]
 3725 047e 642B     		cmp	r3, #100
 3726 0480 04DD     		ble	.L259
1244:..\src/interruptions.c ****         	}
 3727              		.loc 1 1244 0
 3728 0482 6423     		movs	r3, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 90


 3729 0484 FB64     		str	r3, [r7, #76]
 3730              		.loc 1 1247 0
 3731 0486 01E0     		b	.L259
 3732              	.L258:
1226:..\src/interruptions.c ****         
 3733              		.loc 1 1226 0
 3734 0488 00BF     		nop
 3735 048a 00E0     		b	.L200
 3736              	.L259:
 3737              		.loc 1 1247 0
 3738 048c 00BF     		nop
 3739              	.L200:
1248:..\src/interruptions.c ****             
1249:..\src/interruptions.c ****     }
1250:..\src/interruptions.c **** 
1251:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1252:..\src/interruptions.c **** 
1253:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3740              		.loc 1 1253 0
 3741 048e FB6C     		ldr	r3, [r7, #76]
 3742 0490 642B     		cmp	r3, #100
 3743 0492 01DD     		ble	.L242
1254:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3744              		.loc 1 1254 0
 3745 0494 6423     		movs	r3, #100
 3746 0496 FB64     		str	r3, [r7, #76]
 3747              	.L242:
1255:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3748              		.loc 1 1255 0
 3749 0498 FB6C     		ldr	r3, [r7, #76]
 3750 049a 13F1640F 		cmn	r3, #100
 3751 049e 02DA     		bge	.L243
1256:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3752              		.loc 1 1256 0
 3753 04a0 6FF06303 		mvn	r3, #99
 3754 04a4 FB64     		str	r3, [r7, #76]
 3755              	.L243:
1257:..\src/interruptions.c **** 
1258:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3756              		.loc 1 1258 0
 3757 04a6 3B6C     		ldr	r3, [r7, #64]
 3758 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3759 04ac 012B     		cmp	r3, #1
 3760 04ae 0DD0     		beq	.L244
1259:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3761              		.loc 1 1259 0
 3762 04b0 FB6C     		ldr	r3, [r7, #76]
 3763 04b2 9B02     		lsls	r3, r3, #10
 3764 04b4 2D4A     		ldr	r2, .L262+44
 3765 04b6 82FB0312 		smull	r1, r2, r2, r3
 3766 04ba 5211     		asrs	r2, r2, #5
 3767 04bc DB17     		asrs	r3, r3, #31
 3768 04be D31A     		subs	r3, r2, r3
 3769 04c0 2B4A     		ldr	r2, .L262+48
 3770 04c2 1288     		ldrh	r2, [r2]
 3771 04c4 02FB03F3 		mul	r3, r2, r3
 3772 04c8 9B12     		asrs	r3, r3, #10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 91


 3773 04ca FB64     		str	r3, [r7, #76]
 3774              	.L244:
1260:..\src/interruptions.c ****  
1261:..\src/interruptions.c ****     //// RATE LIMITER ////
1262:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3775              		.loc 1 1262 0
 3776 04cc 294B     		ldr	r3, .L262+52
 3777 04ce 1B68     		ldr	r3, [r3]
 3778 04d0 FA6C     		ldr	r2, [r7, #76]
 3779 04d2 D31A     		subs	r3, r2, r3
 3780 04d4 3A6C     		ldr	r2, [r7, #64]
 3781 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3782 04da 9342     		cmp	r3, r2
 3783 04dc 08DD     		ble	.L245
1263:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3784              		.loc 1 1263 0
 3785 04de 3B6C     		ldr	r3, [r7, #64]
 3786 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3787 04e4 1A46     		mov	r2, r3
 3788 04e6 234B     		ldr	r3, .L262+52
 3789 04e8 1B68     		ldr	r3, [r3]
 3790 04ea 1344     		add	r3, r3, r2
 3791 04ec FB64     		str	r3, [r7, #76]
 3792 04ee 10E0     		b	.L246
 3793              	.L245:
1264:..\src/interruptions.c ****     }
1265:..\src/interruptions.c ****     else {
1266:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3794              		.loc 1 1266 0
 3795 04f0 204B     		ldr	r3, .L262+52
 3796 04f2 1B68     		ldr	r3, [r3]
 3797 04f4 FA6C     		ldr	r2, [r7, #76]
 3798 04f6 D21A     		subs	r2, r2, r3
 3799 04f8 3B6C     		ldr	r3, [r7, #64]
 3800 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3801 04fe 5B42     		negs	r3, r3
 3802 0500 9A42     		cmp	r2, r3
 3803 0502 06DA     		bge	.L246
1267:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3804              		.loc 1 1267 0
 3805 0504 1B4B     		ldr	r3, .L262+52
 3806 0506 1B68     		ldr	r3, [r3]
 3807 0508 3A6C     		ldr	r2, [r7, #64]
 3808 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3809 050e 9B1A     		subs	r3, r3, r2
 3810 0510 FB64     		str	r3, [r7, #76]
 3811              	.L246:
1268:..\src/interruptions.c ****     }
1269:..\src/interruptions.c ****     
1270:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3812              		.loc 1 1270 0
 3813 0512 FB6C     		ldr	r3, [r7, #76]
 3814 0514 642B     		cmp	r3, #100
 3815 0516 01DD     		ble	.L247
1271:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3816              		.loc 1 1271 0
 3817 0518 6423     		movs	r3, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 92


 3818 051a FB64     		str	r3, [r7, #76]
 3819              	.L247:
1272:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3820              		.loc 1 1272 0
 3821 051c FB6C     		ldr	r3, [r7, #76]
 3822 051e 13F1640F 		cmn	r3, #100
 3823 0522 02DA     		bge	.L248
1273:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3824              		.loc 1 1273 0
 3825 0524 6FF06303 		mvn	r3, #99
 3826 0528 FB64     		str	r3, [r7, #76]
 3827              	.L248:
1274:..\src/interruptions.c ****     
1275:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3828              		.loc 1 1275 0
 3829 052a 124A     		ldr	r2, .L262+52
 3830 052c FB6C     		ldr	r3, [r7, #76]
 3831 052e 1360     		str	r3, [r2]
1276:..\src/interruptions.c **** 	
1277:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3832              		.loc 1 1277 0
 3833 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3834 0534 FA6C     		ldr	r2, [r7, #76]
 3835 0536 002A     		cmp	r2, #0
 3836 0538 1EDB     		blt	.L249
 3837              		.loc 1 1277 0 is_stmt 0 discriminator 1
 3838 053a 0121     		movs	r1, #1
 3839 053c 1EE0     		b	.L250
 3840              	.L263:
 3841 053e 00BF     		.align	2
 3842              	.L262:
 3843 0540 90000000 		.word	pos_error_sum.10557
 3844 0544 18FCFFFF 		.word	-1000
 3845 0548 94000000 		.word	prev_pos_err.10559
 3846 054c 98000000 		.word	motor_dir.10562
 3847 0550 00000000 		.word	g_ref
 3848 0554 00000000 		.word	tension_valid
 3849 0558 00000000 		.word	g_meas
 3850 055c 9C000000 		.word	curr_error_sum.10558
 3851 0560 A0860100 		.word	100000
 3852 0564 6079FEFF 		.word	-100000
 3853 0568 A0000000 		.word	prev_curr_err.10560
 3854 056c 1F85EB51 		.word	1374389535
 3855 0570 00000000 		.word	dev_pwm_limit
 3856 0574 A4000000 		.word	prev_pwm.10561
 3857              	.L249:
 3858              		.loc 1 1277 0 discriminator 2
 3859 0578 4FF0FF31 		mov	r1, #-1
 3860              	.L250:
 3861              		.loc 1 1277 0 discriminator 4
 3862 057c 5A4A     		ldr	r2, .L264
 3863 057e D154     		strb	r1, [r2, r3]
1278:..\src/interruptions.c ****     
1279:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3864              		.loc 1 1279 0 is_stmt 1 discriminator 4
 3865 0580 3B6C     		ldr	r3, [r7, #64]
 3866 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 93


 3867 0586 012B     		cmp	r3, #1
 3868 0588 40F09680 		bne	.L251
1280:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1281:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3869              		.loc 1 1281 0
 3870 058c 3B6C     		ldr	r3, [r7, #64]
 3871 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3872 0592 012B     		cmp	r3, #1
 3873 0594 00F08D80 		beq	.L252
 3874              		.loc 1 1281 0 is_stmt 0 discriminator 1
 3875 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3876 059c 534A     		ldr	r2, .L264+4
 3877 059e 3421     		movs	r1, #52
 3878 05a0 01FB03F3 		mul	r3, r1, r3
 3879 05a4 1344     		add	r3, r3, r2
 3880 05a6 1A68     		ldr	r2, [r3]
 3881 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3882 05ac 5049     		ldr	r1, .L264+8
 3883 05ae 3420     		movs	r0, #52
 3884 05b0 00FB03F3 		mul	r3, r0, r3
 3885 05b4 0B44     		add	r3, r3, r1
 3886 05b6 1B68     		ldr	r3, [r3]
 3887 05b8 D31A     		subs	r3, r2, r3
 3888 05ba 312B     		cmp	r3, #49
 3889 05bc 79DC     		bgt	.L252
1282:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3890              		.loc 1 1282 0 is_stmt 1 discriminator 2
 3891 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3892 05c2 4A4A     		ldr	r2, .L264+4
 3893 05c4 3421     		movs	r1, #52
 3894 05c6 01FB03F3 		mul	r3, r1, r3
 3895 05ca 1344     		add	r3, r3, r2
 3896 05cc 1A68     		ldr	r2, [r3]
 3897 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3898 05d2 4749     		ldr	r1, .L264+8
 3899 05d4 3420     		movs	r0, #52
 3900 05d6 00FB03F3 		mul	r3, r0, r3
 3901 05da 0B44     		add	r3, r3, r1
 3902 05dc 1B68     		ldr	r3, [r3]
 3903 05de D31A     		subs	r3, r2, r3
1281:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3904              		.loc 1 1281 0 discriminator 2
 3905 05e0 13F1310F 		cmn	r3, #49
 3906 05e4 65DB     		blt	.L252
1283:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3907              		.loc 1 1283 0
 3908 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3909 05ea 424A     		ldr	r2, .L264+12
 3910 05ec 1B01     		lsls	r3, r3, #4
 3911 05ee 1344     		add	r3, r3, r2
 3912 05f0 1A68     		ldr	r2, [r3]
 3913 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3914 05f6 4049     		ldr	r1, .L264+16
 3915 05f8 1B01     		lsls	r3, r3, #4
 3916 05fa 0B44     		add	r3, r3, r1
 3917 05fc 1B68     		ldr	r3, [r3]
 3918 05fe D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 94


1282:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3919              		.loc 1 1282 0
 3920 0600 632B     		cmp	r3, #99
 3921 0602 56DC     		bgt	.L252
 3922              		.loc 1 1283 0
 3923 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3924 0608 3A4A     		ldr	r2, .L264+12
 3925 060a 1B01     		lsls	r3, r3, #4
 3926 060c 1344     		add	r3, r3, r2
 3927 060e 1A68     		ldr	r2, [r3]
 3928 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3929 0614 3849     		ldr	r1, .L264+16
 3930 0616 1B01     		lsls	r3, r3, #4
 3931 0618 0B44     		add	r3, r3, r1
 3932 061a 1B68     		ldr	r3, [r3]
 3933 061c D31A     		subs	r3, r2, r3
 3934 061e 13F1630F 		cmn	r3, #99
 3935 0622 46DB     		blt	.L252
1284:..\src/interruptions.c ****             position_counter++;
 3936              		.loc 1 1284 0
 3937 0624 354B     		ldr	r3, .L264+20
 3938 0626 1B68     		ldr	r3, [r3]
 3939 0628 0133     		adds	r3, r3, #1
 3940 062a 344A     		ldr	r2, .L264+20
 3941 062c 1360     		str	r3, [r2]
1285:..\src/interruptions.c ****             
1286:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3942              		.loc 1 1286 0
 3943 062e 334B     		ldr	r3, .L264+20
 3944 0630 1B68     		ldr	r3, [r3]
 3945 0632 F92B     		cmp	r3, #249
 3946 0634 40D9     		bls	.L251
1287:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3947              		.loc 1 1287 0
 3948 0636 3B6C     		ldr	r3, [r7, #64]
 3949 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3950 063c 002B     		cmp	r3, #0
 3951 063e 11D1     		bne	.L254
 3952              		.loc 1 1287 0 is_stmt 0 discriminator 1
 3953 0640 2F4B     		ldr	r3, .L264+24
 3954 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3955 0644 002B     		cmp	r3, #0
 3956 0646 0DD1     		bne	.L254
1288:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3957              		.loc 1 1288 0 is_stmt 1
 3958 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3959 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3960 0650 2749     		ldr	r1, .L264+8
 3961 0652 3420     		movs	r0, #52
 3962 0654 00FB02F2 		mul	r2, r0, r2
 3963 0658 0A44     		add	r2, r2, r1
 3964 065a 1268     		ldr	r2, [r2]
 3965 065c 2949     		ldr	r1, .L264+28
 3966 065e 1B01     		lsls	r3, r3, #4
 3967 0660 0B44     		add	r3, r3, r1
 3968 0662 1A60     		str	r2, [r3]
 3969              	.L254:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 95


1289:..\src/interruptions.c ****                 }
1290:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3970              		.loc 1 1290 0
 3971 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3972 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3973 066c 2049     		ldr	r1, .L264+8
 3974 066e 3420     		movs	r0, #52
 3975 0670 00FB02F2 		mul	r2, r0, r2
 3976 0674 0A44     		add	r2, r2, r1
 3977 0676 1268     		ldr	r2, [r2]
 3978 0678 1F49     		ldr	r1, .L264+16
 3979 067a 1B01     		lsls	r3, r3, #4
 3980 067c 0B44     		add	r3, r3, r1
 3981 067e 1A60     		str	r2, [r3]
1291:..\src/interruptions.c ****                 
1292:..\src/interruptions.c ****                 if (position_counter == 250){
 3982              		.loc 1 1292 0
 3983 0680 1E4B     		ldr	r3, .L264+20
 3984 0682 1B68     		ldr	r3, [r3]
 3985 0684 FA2B     		cmp	r3, #250
 3986 0686 11D1     		bne	.L255
1293:..\src/interruptions.c ****                     // To do only once
1294:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3987              		.loc 1 1294 0
 3988 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3989 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3990 0690 1749     		ldr	r1, .L264+8
 3991 0692 3420     		movs	r0, #52
 3992 0694 00FB02F2 		mul	r2, r0, r2
 3993 0698 0A44     		add	r2, r2, r1
 3994 069a 0C32     		adds	r2, r2, #12
 3995 069c 1268     		ldr	r2, [r2]
 3996 069e 1449     		ldr	r1, .L264+8
 3997 06a0 3420     		movs	r0, #52
 3998 06a2 00FB03F3 		mul	r3, r0, r3
 3999 06a6 0B44     		add	r3, r3, r1
 4000 06a8 1433     		adds	r3, r3, #20
 4001 06aa 1A60     		str	r2, [r3]
 4002              	.L255:
1295:..\src/interruptions.c ****                 }
1296:..\src/interruptions.c ****                 pwm_input = 0;            
 4003              		.loc 1 1296 0
 4004 06ac 0023     		movs	r3, #0
 4005 06ae FB64     		str	r3, [r7, #76]
1286:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4006              		.loc 1 1286 0
 4007 06b0 02E0     		b	.L251
 4008              	.L252:
1297:..\src/interruptions.c ****             }
1298:..\src/interruptions.c ****         }
1299:..\src/interruptions.c ****         else {
1300:..\src/interruptions.c ****             position_counter = 0;
 4009              		.loc 1 1300 0
 4010 06b2 124B     		ldr	r3, .L264+20
 4011 06b4 0022     		movs	r2, #0
 4012 06b6 1A60     		str	r2, [r3]
 4013              	.L251:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 96


1301:..\src/interruptions.c ****         }
1302:..\src/interruptions.c ****     }
1303:..\src/interruptions.c ****     
1304:..\src/interruptions.c ****     if (motor_dir)
 4014              		.loc 1 1304 0
 4015 06b8 134B     		ldr	r3, .L264+32
 4016 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4017 06bc 002B     		cmp	r3, #0
 4018 06be 03D0     		beq	.L256
1305:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4019              		.loc 1 1305 0
 4020 06c0 0120     		movs	r0, #1
 4021 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4022 06c6 02E0     		b	.L257
 4023              	.L256:
1306:..\src/interruptions.c ****     else
1307:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4024              		.loc 1 1307 0
 4025 06c8 0020     		movs	r0, #0
 4026 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4027              	.L257:
1308:..\src/interruptions.c **** 
1309:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4028              		.loc 1 1309 0
 4029 06ce FB6C     		ldr	r3, [r7, #76]
 4030 06d0 002B     		cmp	r3, #0
 4031 06d2 B8BF     		it	lt
 4032 06d4 5B42     		rsblt	r3, r3, #0
 4033 06d6 9BB2     		uxth	r3, r3
 4034 06d8 1846     		mov	r0, r3
 4035 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1310:..\src/interruptions.c **** }
 4036              		.loc 1 1310 0
 4037 06de 00BF     		nop
 4038 06e0 5037     		adds	r7, r7, #80
 4039              		.cfi_def_cfa_offset 8
 4040 06e2 BD46     		mov	sp, r7
 4041              		.cfi_def_cfa_register 13
 4042              		@ sp needed
 4043 06e4 80BD     		pop	{r7, pc}
 4044              	.L265:
 4045 06e6 00BF     		.align	2
 4046              	.L264:
 4047 06e8 00000000 		.word	pwm_sign
 4048 06ec 00000000 		.word	g_measOld
 4049 06f0 00000000 		.word	g_meas
 4050 06f4 00000000 		.word	g_refOld
 4051 06f8 00000000 		.word	g_ref
 4052 06fc A8000000 		.word	position_counter.10563
 4053 0700 00000000 		.word	change_ext_ref_flag
 4054 0704 00000000 		.word	g_refNew
 4055 0708 98000000 		.word	motor_dir.10562
 4056              		.cfi_endproc
 4057              	.LFE71:
 4058              		.size	motor_control_SH, .-motor_control_SH
 4059              		.section	.text.motor_control_generic,"ax",%progbits
 4060              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 97


 4061              		.global	motor_control_generic
 4062              		.thumb
 4063              		.thumb_func
 4064              		.type	motor_control_generic, %function
 4065              	motor_control_generic:
 4066              	.LFB72:
1311:..\src/interruptions.c **** 
1312:..\src/interruptions.c **** //==============================================================================
1313:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1314:..\src/interruptions.c **** //==============================================================================
1315:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4067              		.loc 1 1315 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 80
 4070              		@ frame_needed = 1, uses_anonymous_args = 0
 4071 0000 90B5     		push	{r4, r7, lr}
 4072              		.cfi_def_cfa_offset 12
 4073              		.cfi_offset 4, -12
 4074              		.cfi_offset 7, -8
 4075              		.cfi_offset 14, -4
 4076 0002 95B0     		sub	sp, sp, #84
 4077              		.cfi_def_cfa_offset 96
 4078 0004 00AF     		add	r7, sp, #0
 4079              		.cfi_def_cfa_register 7
 4080 0006 0346     		mov	r3, r0
 4081 0008 FB71     		strb	r3, [r7, #7]
1316:..\src/interruptions.c ****     
1317:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4082              		.loc 1 1317 0
 4083 000a 0023     		movs	r3, #0
 4084 000c FB64     		str	r3, [r7, #76]
1318:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1319:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1320:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1321:..\src/interruptions.c **** 
1322:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4085              		.loc 1 1322 0
 4086 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4087 0010 1346     		mov	r3, r2
 4088 0012 DB00     		lsls	r3, r3, #3
 4089 0014 9B1A     		subs	r3, r3, r2
 4090 0016 1B01     		lsls	r3, r3, #4
 4091 0018 B033     		adds	r3, r3, #176
 4092 001a 9D4A     		ldr	r2, .L357
 4093 001c 1344     		add	r3, r3, r2
 4094 001e 7B64     		str	r3, [r7, #68]
1323:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4095              		.loc 1 1323 0
 4096 0020 7B6C     		ldr	r3, [r7, #68]
 4097 0022 93F86030 		ldrb	r3, [r3, #96]
 4098 0026 87F84330 		strb	r3, [r7, #67]
1324:..\src/interruptions.c ****     
1325:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4099              		.loc 1 1325 0
 4100 002a 7B6C     		ldr	r3, [r7, #68]
 4101 002c 1B68     		ldr	r3, [r3]
 4102 002e FB63     		str	r3, [r7, #60]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 98


1326:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4103              		.loc 1 1326 0
 4104 0030 7B6C     		ldr	r3, [r7, #68]
 4105 0032 5B68     		ldr	r3, [r3, #4]
 4106 0034 BB63     		str	r3, [r7, #56]
1327:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4107              		.loc 1 1327 0
 4108 0036 7B6C     		ldr	r3, [r7, #68]
 4109 0038 9B68     		ldr	r3, [r3, #8]
 4110 003a 7B63     		str	r3, [r7, #52]
1328:..\src/interruptions.c **** 
1329:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4111              		.loc 1 1329 0
 4112 003c 7B6C     		ldr	r3, [r7, #68]
 4113 003e DB68     		ldr	r3, [r3, #12]
 4114 0040 3B63     		str	r3, [r7, #48]
1330:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4115              		.loc 1 1330 0
 4116 0042 7B6C     		ldr	r3, [r7, #68]
 4117 0044 1B69     		ldr	r3, [r3, #16]
 4118 0046 FB62     		str	r3, [r7, #44]
1331:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4119              		.loc 1 1331 0
 4120 0048 7B6C     		ldr	r3, [r7, #68]
 4121 004a 5B69     		ldr	r3, [r3, #20]
 4122 004c BB62     		str	r3, [r7, #40]
1332:..\src/interruptions.c **** 
1333:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4123              		.loc 1 1333 0
 4124 004e 7B6C     		ldr	r3, [r7, #68]
 4125 0050 9B69     		ldr	r3, [r3, #24]
 4126 0052 7B62     		str	r3, [r7, #36]
1334:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4127              		.loc 1 1334 0
 4128 0054 7B6C     		ldr	r3, [r7, #68]
 4129 0056 DB69     		ldr	r3, [r3, #28]
 4130 0058 3B62     		str	r3, [r7, #32]
1335:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4131              		.loc 1 1335 0
 4132 005a 7B6C     		ldr	r3, [r7, #68]
 4133 005c 1B6A     		ldr	r3, [r3, #32]
 4134 005e FB61     		str	r3, [r7, #28]
1336:..\src/interruptions.c ****     
1337:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4135              		.loc 1 1337 0
 4136 0060 7B6C     		ldr	r3, [r7, #68]
 4137 0062 5B6A     		ldr	r3, [r3, #36]
 4138 0064 BB61     		str	r3, [r7, #24]
1338:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4139              		.loc 1 1338 0
 4140 0066 7B6C     		ldr	r3, [r7, #68]
 4141 0068 9B6A     		ldr	r3, [r3, #40]
 4142 006a 7B61     		str	r3, [r7, #20]
1339:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4143              		.loc 1 1339 0
 4144 006c 7B6C     		ldr	r3, [r7, #68]
 4145 006e DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 99


 4146 0070 3B61     		str	r3, [r7, #16]
1340:..\src/interruptions.c **** 
1341:..\src/interruptions.c ****     // Static Variables
1342:..\src/interruptions.c **** 
1343:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1344:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1345:..\src/interruptions.c ****     
1346:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1347:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1348:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1349:..\src/interruptions.c **** 
1350:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1351:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1354:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4147              		.loc 1 1354 0
 4148 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4149 0074 1B01     		lsls	r3, r3, #4
 4150 0076 874A     		ldr	r2, .L357+4
 4151 0078 9918     		adds	r1, r3, r2
 4152 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4153 007c 1B01     		lsls	r3, r3, #4
 4154 007e 864A     		ldr	r2, .L357+8
 4155 0080 1A44     		add	r2, r2, r3
 4156 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4157 0084 1846     		mov	r0, r3
 4158 0086 FFF7FEFF 		bl	compute_reference
1355:..\src/interruptions.c ****     
1356:..\src/interruptions.c ****    
1357:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4159              		.loc 1 1357 0
 4160 008a 7B6C     		ldr	r3, [r7, #68]
 4161 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4162 0090 032B     		cmp	r3, #3
 4163 0092 00F28082 		bhi	.L267
 4164 0096 01A2     		adr	r2, .L269
 4165 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4166              		.p2align 2
 4167              	.L269:
 4168 009c ED020000 		.word	.L268+1
 4169 00a0 F7040000 		.word	.L270+1
 4170 00a4 C5030000 		.word	.L271+1
 4171 00a8 AD000000 		.word	.L272+1
 4172              		.p2align 1
 4173              	.L272:
1358:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1359:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1360:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4174              		.loc 1 1360 0
 4175 00ac 794B     		ldr	r3, .L357+4
 4176 00ae 1A68     		ldr	r2, [r3]
 4177 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4178 00b4 7949     		ldr	r1, .L357+12
 4179 00b6 3420     		movs	r0, #52
 4180 00b8 00FB03F3 		mul	r3, r0, r3
 4181 00bc 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 100


 4182 00be 1B68     		ldr	r3, [r3]
 4183 00c0 D31A     		subs	r3, r2, r3
 4184 00c2 FB60     		str	r3, [r7, #12]
1361:..\src/interruptions.c **** 
1362:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4185              		.loc 1 1362 0
 4186 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4187 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4188 00c8 7549     		ldr	r1, .L357+16
 4189 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4190 00ce FA68     		ldr	r2, [r7, #12]
 4191 00d0 0A44     		add	r2, r2, r1
 4192 00d2 7349     		ldr	r1, .L357+16
 4193 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1363:..\src/interruptions.c **** 
1364:..\src/interruptions.c ****             // error_sum saturation
1365:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4194              		.loc 1 1365 0
 4195 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4196 00da 714A     		ldr	r2, .L357+16
 4197 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4198 00e0 704A     		ldr	r2, .L357+20
 4199 00e2 9342     		cmp	r3, r2
 4200 00e4 05DD     		ble	.L273
1366:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4201              		.loc 1 1366 0
 4202 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4203 00e8 6D4A     		ldr	r2, .L357+16
 4204 00ea 6E49     		ldr	r1, .L357+20
 4205 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4206 00f0 0BE0     		b	.L274
 4207              	.L273:
1367:..\src/interruptions.c ****             else {
1368:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4208              		.loc 1 1368 0
 4209 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4210 00f4 6A4A     		ldr	r2, .L357+16
 4211 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4212 00fa 6B4A     		ldr	r2, .L357+24
 4213 00fc 9342     		cmp	r3, r2
 4214 00fe 04DA     		bge	.L274
1369:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4215              		.loc 1 1369 0
 4216 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4217 0102 674A     		ldr	r2, .L357+16
 4218 0104 6849     		ldr	r1, .L357+24
 4219 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4220              	.L274:
1370:..\src/interruptions.c ****             }
1371:..\src/interruptions.c ****             
1372:..\src/interruptions.c ****             // ------ position PID control ------
1373:..\src/interruptions.c **** 
1374:..\src/interruptions.c ****             i_ref = 0;
 4221              		.loc 1 1374 0
 4222 010a 0023     		movs	r3, #0
 4223 010c BB64     		str	r3, [r7, #72]
1375:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 101


1376:..\src/interruptions.c ****             // Proportional
1377:..\src/interruptions.c ****             if (k_p_dl != 0)
 4224              		.loc 1 1377 0
 4225 010e 7B6A     		ldr	r3, [r7, #36]
 4226 0110 002B     		cmp	r3, #0
 4227 0112 07D0     		beq	.L275
1378:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4228              		.loc 1 1378 0
 4229 0114 7B6A     		ldr	r3, [r7, #36]
 4230 0116 FA68     		ldr	r2, [r7, #12]
 4231 0118 02FB03F3 		mul	r3, r2, r3
 4232 011c 1B14     		asrs	r3, r3, #16
 4233 011e BA6C     		ldr	r2, [r7, #72]
 4234 0120 1344     		add	r3, r3, r2
 4235 0122 BB64     		str	r3, [r7, #72]
 4236              	.L275:
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             // Integral
1381:..\src/interruptions.c ****             if (k_i_dl != 0)
 4237              		.loc 1 1381 0
 4238 0124 3B6A     		ldr	r3, [r7, #32]
 4239 0126 002B     		cmp	r3, #0
 4240 0128 0AD0     		beq	.L276
1382:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4241              		.loc 1 1382 0
 4242 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4243 012c 5C4A     		ldr	r2, .L357+16
 4244 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4245 0132 3A6A     		ldr	r2, [r7, #32]
 4246 0134 02FB03F3 		mul	r3, r2, r3
 4247 0138 1B14     		asrs	r3, r3, #16
 4248 013a BA6C     		ldr	r2, [r7, #72]
 4249 013c 1344     		add	r3, r3, r2
 4250 013e BB64     		str	r3, [r7, #72]
 4251              	.L276:
1383:..\src/interruptions.c **** 
1384:..\src/interruptions.c ****             // Derivative
1385:..\src/interruptions.c ****             if (k_d_dl != 0)
 4252              		.loc 1 1385 0
 4253 0140 FB69     		ldr	r3, [r7, #28]
 4254 0142 002B     		cmp	r3, #0
 4255 0144 0CD0     		beq	.L277
1386:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4256              		.loc 1 1386 0
 4257 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4258 0148 584A     		ldr	r2, .L357+28
 4259 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4260 014e FA68     		ldr	r2, [r7, #12]
 4261 0150 D31A     		subs	r3, r2, r3
 4262 0152 FA69     		ldr	r2, [r7, #28]
 4263 0154 02FB03F3 		mul	r3, r2, r3
 4264 0158 1B14     		asrs	r3, r3, #16
 4265 015a BA6C     		ldr	r2, [r7, #72]
 4266 015c 1344     		add	r3, r3, r2
 4267 015e BB64     		str	r3, [r7, #72]
 4268              	.L277:
1387:..\src/interruptions.c ****                         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 102


1388:..\src/interruptions.c ****             // Update previous position
1389:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4269              		.loc 1 1389 0
 4270 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4271 0162 5249     		ldr	r1, .L357+28
 4272 0164 FA68     		ldr	r2, [r7, #12]
 4273 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1390:..\src/interruptions.c **** 
1391:..\src/interruptions.c ****             // motor direction depends on i_ref
1392:..\src/interruptions.c ****             if (i_ref >= 0)
 4274              		.loc 1 1392 0
 4275 016a BB6C     		ldr	r3, [r7, #72]
 4276 016c 002B     		cmp	r3, #0
 4277 016e 04DB     		blt	.L278
1393:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4278              		.loc 1 1393 0
 4279 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4280 0172 4F4A     		ldr	r2, .L357+32
 4281 0174 0121     		movs	r1, #1
 4282 0176 D154     		strb	r1, [r2, r3]
 4283 0178 03E0     		b	.L279
 4284              	.L278:
1394:..\src/interruptions.c ****             else
1395:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4285              		.loc 1 1395 0
 4286 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4287 017c 4C4A     		ldr	r2, .L357+32
 4288 017e 0021     		movs	r1, #0
 4289 0180 D154     		strb	r1, [r2, r3]
 4290              	.L279:
1396:..\src/interruptions.c **** 
1397:..\src/interruptions.c ****             // saturate max current
1398:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4291              		.loc 1 1398 0
 4292 0182 7B6C     		ldr	r3, [r7, #68]
 4293 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4294 0188 1A46     		mov	r2, r3
 4295 018a BB6C     		ldr	r3, [r7, #72]
 4296 018c 9A42     		cmp	r2, r3
 4297 018e 04DA     		bge	.L280
1399:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4298              		.loc 1 1399 0
 4299 0190 7B6C     		ldr	r3, [r7, #68]
 4300 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4301 0196 BB64     		str	r3, [r7, #72]
 4302 0198 0BE0     		b	.L281
 4303              	.L280:
1400:..\src/interruptions.c ****             else {
1401:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4304              		.loc 1 1401 0
 4305 019a 7B6C     		ldr	r3, [r7, #68]
 4306 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4307 01a0 5A42     		negs	r2, r3
 4308 01a2 BB6C     		ldr	r3, [r7, #72]
 4309 01a4 9A42     		cmp	r2, r3
 4310 01a6 04DD     		ble	.L281
1402:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 103


 4311              		.loc 1 1402 0
 4312 01a8 7B6C     		ldr	r3, [r7, #68]
 4313 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4314 01ae 5B42     		negs	r3, r3
 4315 01b0 BB64     		str	r3, [r7, #72]
 4316              	.L281:
1403:..\src/interruptions.c ****         	}
1404:..\src/interruptions.c **** 
1405:..\src/interruptions.c ****             // current error and curr error sum
1406:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4317              		.loc 1 1406 0
 4318 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4319 01b6 394A     		ldr	r2, .L357+12
 4320 01b8 3421     		movs	r1, #52
 4321 01ba 01FB03F3 		mul	r3, r1, r3
 4322 01be 1344     		add	r3, r3, r2
 4323 01c0 0C33     		adds	r3, r3, #12
 4324 01c2 1B68     		ldr	r3, [r3]
 4325 01c4 BA6C     		ldr	r2, [r7, #72]
 4326 01c6 D31A     		subs	r3, r2, r3
 4327 01c8 BB60     		str	r3, [r7, #8]
1407:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4328              		.loc 1 1407 0
 4329 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4330 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4331 01ce 3949     		ldr	r1, .L357+36
 4332 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4333 01d4 BA68     		ldr	r2, [r7, #8]
 4334 01d6 0A44     		add	r2, r2, r1
 4335 01d8 3649     		ldr	r1, .L357+36
 4336 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1408:..\src/interruptions.c ****             
1409:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4337              		.loc 1 1409 0
 4338 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4339 01e0 344A     		ldr	r2, .L357+36
 4340 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4341 01e6 344A     		ldr	r2, .L357+40
 4342 01e8 9342     		cmp	r3, r2
 4343 01ea 05DD     		ble	.L282
1410:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4344              		.loc 1 1410 0
 4345 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4346 01ee 314A     		ldr	r2, .L357+36
 4347 01f0 3149     		ldr	r1, .L357+40
 4348 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4349 01f6 0BE0     		b	.L283
 4350              	.L282:
1411:..\src/interruptions.c ****             else {
1412:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4351              		.loc 1 1412 0
 4352 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4353 01fa 2E4A     		ldr	r2, .L357+36
 4354 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4355 0200 2E4A     		ldr	r2, .L357+44
 4356 0202 9342     		cmp	r3, r2
 4357 0204 04DA     		bge	.L283
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 104


1413:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4358              		.loc 1 1413 0
 4359 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4360 0208 2A4A     		ldr	r2, .L357+36
 4361 020a 2C49     		ldr	r1, .L357+44
 4362 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4363              	.L283:
1414:..\src/interruptions.c ****             }
1415:..\src/interruptions.c **** 
1416:..\src/interruptions.c ****             // ----- current PID control -----
1417:..\src/interruptions.c **** 
1418:..\src/interruptions.c ****             pwm_input = 0;
 4364              		.loc 1 1418 0
 4365 0210 0023     		movs	r3, #0
 4366 0212 FB64     		str	r3, [r7, #76]
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****             // Proportional
1421:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4367              		.loc 1 1421 0
 4368 0214 BB69     		ldr	r3, [r7, #24]
 4369 0216 002B     		cmp	r3, #0
 4370 0218 07D0     		beq	.L284
1422:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4371              		.loc 1 1422 0
 4372 021a BB69     		ldr	r3, [r7, #24]
 4373 021c BA68     		ldr	r2, [r7, #8]
 4374 021e 02FB03F3 		mul	r3, r2, r3
 4375 0222 1B14     		asrs	r3, r3, #16
 4376 0224 FA6C     		ldr	r2, [r7, #76]
 4377 0226 1344     		add	r3, r3, r2
 4378 0228 FB64     		str	r3, [r7, #76]
 4379              	.L284:
1423:..\src/interruptions.c **** 
1424:..\src/interruptions.c ****             // Integral
1425:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4380              		.loc 1 1425 0
 4381 022a 7B69     		ldr	r3, [r7, #20]
 4382 022c 002B     		cmp	r3, #0
 4383 022e 0AD0     		beq	.L285
1426:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4384              		.loc 1 1426 0
 4385 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4386 0232 204A     		ldr	r2, .L357+36
 4387 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4388 0238 7A69     		ldr	r2, [r7, #20]
 4389 023a 02FB03F3 		mul	r3, r2, r3
 4390 023e 1B14     		asrs	r3, r3, #16
 4391 0240 FA6C     		ldr	r2, [r7, #76]
 4392 0242 1344     		add	r3, r3, r2
 4393 0244 FB64     		str	r3, [r7, #76]
 4394              	.L285:
1427:..\src/interruptions.c **** 
1428:..\src/interruptions.c ****             // Derivative
1429:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4395              		.loc 1 1429 0
 4396 0246 3B69     		ldr	r3, [r7, #16]
 4397 0248 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 105


 4398 024a 0CD0     		beq	.L286
1430:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4399              		.loc 1 1430 0
 4400 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4401 024e 1C4A     		ldr	r2, .L357+48
 4402 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4403 0254 BA68     		ldr	r2, [r7, #8]
 4404 0256 D31A     		subs	r3, r2, r3
 4405 0258 3A69     		ldr	r2, [r7, #16]
 4406 025a 02FB03F3 		mul	r3, r2, r3
 4407 025e 1B14     		asrs	r3, r3, #16
 4408 0260 FA6C     		ldr	r2, [r7, #76]
 4409 0262 1344     		add	r3, r3, r2
 4410 0264 FB64     		str	r3, [r7, #76]
 4411              	.L286:
1431:..\src/interruptions.c ****              
1432:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1433:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4412              		.loc 1 1433 0
 4413 0266 7B6C     		ldr	r3, [r7, #68]
 4414 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4415 026c 022B     		cmp	r3, #2
 4416 026e 2BD1     		bne	.L287
1434:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4417              		.loc 1 1434 0
 4418 0270 FB6C     		ldr	r3, [r7, #76]
 4419 0272 40F6A932 		movw	r2, #2985
 4420 0276 9342     		cmp	r3, r2
 4421 0278 02DD     		ble	.L288
1435:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4422              		.loc 1 1435 0
 4423 027a 40F6A933 		movw	r3, #2985
 4424 027e FB64     		str	r3, [r7, #76]
 4425              	.L288:
1436:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4426              		.loc 1 1436 0
 4427 0280 FB6C     		ldr	r3, [r7, #76]
 4428 0282 104A     		ldr	r2, .L357+52
 4429 0284 9342     		cmp	r3, r2
 4430 0286 2BDA     		bge	.L290
1437:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4431              		.loc 1 1437 0
 4432 0288 0E4B     		ldr	r3, .L357+52
 4433 028a FB64     		str	r3, [r7, #76]
 4434 028c 28E0     		b	.L290
 4435              	.L358:
 4436 028e 00BF     		.align	2
 4437              	.L357:
 4438 0290 00000000 		.word	c_mem
 4439 0294 00000000 		.word	g_ref
 4440 0298 00000000 		.word	g_refOld
 4441 029c 00000000 		.word	g_meas
 4442 02a0 AC000000 		.word	pos_error_sum.10590
 4443 02a4 80F0FA02 		.word	50000000
 4444 02a8 800F05FD 		.word	-50000000
 4445 02ac B4000000 		.word	prev_pos_err.10592
 4446 02b0 BC000000 		.word	motor_dir.10595
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 106


 4447 02b4 C0000000 		.word	curr_error_sum.10591
 4448 02b8 A0860100 		.word	100000
 4449 02bc 6079FEFF 		.word	-100000
 4450 02c0 C8000000 		.word	prev_curr_err.10593
 4451 02c4 57F4FFFF 		.word	-2985
 4452              	.L287:
1438:..\src/interruptions.c ****             }
1439:..\src/interruptions.c ****             else {
1440:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4453              		.loc 1 1440 0
 4454 02c8 FB6C     		ldr	r3, [r7, #76]
 4455 02ca 642B     		cmp	r3, #100
 4456 02cc 01DD     		ble	.L291
1441:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4457              		.loc 1 1441 0
 4458 02ce 6423     		movs	r3, #100
 4459 02d0 FB64     		str	r3, [r7, #76]
 4460              	.L291:
1442:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4461              		.loc 1 1442 0
 4462 02d2 FB6C     		ldr	r3, [r7, #76]
 4463 02d4 13F1640F 		cmn	r3, #100
 4464 02d8 02DA     		bge	.L290
1443:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4465              		.loc 1 1443 0
 4466 02da 6FF06303 		mvn	r3, #99
 4467 02de FB64     		str	r3, [r7, #76]
 4468              	.L290:
1444:..\src/interruptions.c ****             }
1445:..\src/interruptions.c **** 
1446:..\src/interruptions.c ****             // Update previous current
1447:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4469              		.loc 1 1447 0
 4470 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4471 02e2 A049     		ldr	r1, .L359
 4472 02e4 BA68     		ldr	r2, [r7, #8]
 4473 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1448:..\src/interruptions.c **** 
1449:..\src/interruptions.c ****         break;
 4474              		.loc 1 1449 0
 4475 02ea 54E1     		b	.L267
 4476              	.L268:
1450:..\src/interruptions.c **** 
1451:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1452:..\src/interruptions.c ****         case CONTROL_ANGLE:
1453:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4477              		.loc 1 1453 0
 4478 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4479 02ee 9E4A     		ldr	r2, .L359+4
 4480 02f0 1B01     		lsls	r3, r3, #4
 4481 02f2 1344     		add	r3, r3, r2
 4482 02f4 1A68     		ldr	r2, [r3]
 4483 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4484 02fa 9C49     		ldr	r1, .L359+8
 4485 02fc 3420     		movs	r0, #52
 4486 02fe 00FB03F3 		mul	r3, r0, r3
 4487 0302 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 107


 4488 0304 1B68     		ldr	r3, [r3]
 4489 0306 D31A     		subs	r3, r2, r3
 4490 0308 FB60     		str	r3, [r7, #12]
1454:..\src/interruptions.c **** 
1455:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4491              		.loc 1 1455 0
 4492 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4493 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4494 030e 9849     		ldr	r1, .L359+12
 4495 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4496 0314 FA68     		ldr	r2, [r7, #12]
 4497 0316 0A44     		add	r2, r2, r1
 4498 0318 9549     		ldr	r1, .L359+12
 4499 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1456:..\src/interruptions.c **** 
1457:..\src/interruptions.c ****             // anti-windup (for integral control)
1458:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4500              		.loc 1 1458 0
 4501 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4502 0320 934A     		ldr	r2, .L359+12
 4503 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4504 0326 B3F57A7F 		cmp	r3, #1000
 4505 032a 06DD     		ble	.L292
1459:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4506              		.loc 1 1459 0
 4507 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4508 032e 904A     		ldr	r2, .L359+12
 4509 0330 4FF47A71 		mov	r1, #1000
 4510 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4511 0338 0BE0     		b	.L293
 4512              	.L292:
1460:..\src/interruptions.c ****             else {
1461:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4513              		.loc 1 1461 0
 4514 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4515 033c 8C4A     		ldr	r2, .L359+12
 4516 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4517 0342 13F57A7F 		cmn	r3, #1000
 4518 0346 04DA     		bge	.L293
1462:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4519              		.loc 1 1462 0
 4520 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4521 034a 894A     		ldr	r2, .L359+12
 4522 034c 8949     		ldr	r1, .L359+16
 4523 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4524              	.L293:
1463:..\src/interruptions.c ****             }
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Proportional
1466:..\src/interruptions.c ****             if (k_p != 0) 
 4525              		.loc 1 1466 0
 4526 0352 FB6B     		ldr	r3, [r7, #60]
 4527 0354 002B     		cmp	r3, #0
 4528 0356 05D0     		beq	.L294
1467:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4529              		.loc 1 1467 0
 4530 0358 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 108


 4531 035a FA68     		ldr	r2, [r7, #12]
 4532 035c 02FB03F3 		mul	r3, r2, r3
 4533 0360 1B14     		asrs	r3, r3, #16
 4534 0362 FB64     		str	r3, [r7, #76]
 4535              	.L294:
1468:..\src/interruptions.c ****             
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****             // Integral
1471:..\src/interruptions.c ****             if (k_i != 0) 
 4536              		.loc 1 1471 0
 4537 0364 BB6B     		ldr	r3, [r7, #56]
 4538 0366 002B     		cmp	r3, #0
 4539 0368 0AD0     		beq	.L295
1472:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4540              		.loc 1 1472 0
 4541 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4542 036c 804A     		ldr	r2, .L359+12
 4543 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4544 0372 BA6B     		ldr	r2, [r7, #56]
 4545 0374 02FB03F3 		mul	r3, r2, r3
 4546 0378 1B14     		asrs	r3, r3, #16
 4547 037a FA6C     		ldr	r2, [r7, #76]
 4548 037c 1344     		add	r3, r3, r2
 4549 037e FB64     		str	r3, [r7, #76]
 4550              	.L295:
1473:..\src/interruptions.c ****             
1474:..\src/interruptions.c **** 
1475:..\src/interruptions.c ****             // Derivative
1476:..\src/interruptions.c ****             if (k_d != 0) 
 4551              		.loc 1 1476 0
 4552 0380 7B6B     		ldr	r3, [r7, #52]
 4553 0382 002B     		cmp	r3, #0
 4554 0384 0CD0     		beq	.L296
1477:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4555              		.loc 1 1477 0
 4556 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4557 0388 7B4A     		ldr	r2, .L359+20
 4558 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4559 038e FA68     		ldr	r2, [r7, #12]
 4560 0390 D31A     		subs	r3, r2, r3
 4561 0392 7A6B     		ldr	r2, [r7, #52]
 4562 0394 02FB03F3 		mul	r3, r2, r3
 4563 0398 1B14     		asrs	r3, r3, #16
 4564 039a FA6C     		ldr	r2, [r7, #76]
 4565 039c 1344     		add	r3, r3, r2
 4566 039e FB64     		str	r3, [r7, #76]
 4567              	.L296:
1478:..\src/interruptions.c ****             
1479:..\src/interruptions.c **** 
1480:..\src/interruptions.c ****             // Update measure
1481:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4568              		.loc 1 1481 0
 4569 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4570 03a2 7549     		ldr	r1, .L359+20
 4571 03a4 FA68     		ldr	r2, [r7, #12]
 4572 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1482:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 109


1483:..\src/interruptions.c ****             if (pwm_input > 0)
 4573              		.loc 1 1483 0
 4574 03aa FB6C     		ldr	r3, [r7, #76]
 4575 03ac 002B     		cmp	r3, #0
 4576 03ae 04DD     		ble	.L297
1484:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4577              		.loc 1 1484 0
 4578 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4579 03b2 724A     		ldr	r2, .L359+24
 4580 03b4 0121     		movs	r1, #1
 4581 03b6 D154     		strb	r1, [r2, r3]
1485:..\src/interruptions.c ****             else
1486:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1487:..\src/interruptions.c **** 
1488:..\src/interruptions.c ****         break;
 4582              		.loc 1 1488 0
 4583 03b8 EDE0     		b	.L267
 4584              	.L297:
1486:..\src/interruptions.c **** 
 4585              		.loc 1 1486 0
 4586 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4587 03bc 6F4A     		ldr	r2, .L359+24
 4588 03be 0021     		movs	r1, #0
 4589 03c0 D154     		strb	r1, [r2, r3]
 4590              		.loc 1 1488 0
 4591 03c2 E8E0     		b	.L267
 4592              	.L271:
1489:..\src/interruptions.c **** 
1490:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1491:..\src/interruptions.c ****         case CONTROL_CURRENT:
1492:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4593              		.loc 1 1492 0
 4594 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4595 03c6 684A     		ldr	r2, .L359+4
 4596 03c8 1B01     		lsls	r3, r3, #4
 4597 03ca 1344     		add	r3, r3, r2
 4598 03cc 0C33     		adds	r3, r3, #12
 4599 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4600 03d0 002B     		cmp	r3, #0
 4601 03d2 00F0C480 		beq	.L354
 4602              		.loc 1 1492 0 is_stmt 0 discriminator 1
 4603 03d6 6A4B     		ldr	r3, .L359+28
 4604 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4605 03da 002B     		cmp	r3, #0
 4606 03dc 00F0BF80 		beq	.L354
1493:..\src/interruptions.c ****                 
1494:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4607              		.loc 1 1494 0 is_stmt 1
 4608 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4609 03e2 614A     		ldr	r2, .L359+4
 4610 03e4 1B01     		lsls	r3, r3, #4
 4611 03e6 1344     		add	r3, r3, r2
 4612 03e8 0433     		adds	r3, r3, #4
 4613 03ea 1B68     		ldr	r3, [r3]
 4614 03ec BB64     		str	r3, [r7, #72]
1495:..\src/interruptions.c **** 
1496:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 110


 4615              		.loc 1 1496 0
 4616 03ee 7B6C     		ldr	r3, [r7, #68]
 4617 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4618 03f4 1A46     		mov	r2, r3
 4619 03f6 BB6C     		ldr	r3, [r7, #72]
 4620 03f8 9A42     		cmp	r2, r3
 4621 03fa 04DA     		bge	.L300
1497:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4622              		.loc 1 1497 0
 4623 03fc 7B6C     		ldr	r3, [r7, #68]
 4624 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4625 0402 BB64     		str	r3, [r7, #72]
 4626 0404 0BE0     		b	.L301
 4627              	.L300:
1498:..\src/interruptions.c ****                 else {
1499:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4628              		.loc 1 1499 0
 4629 0406 7B6C     		ldr	r3, [r7, #68]
 4630 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4631 040c 5A42     		negs	r2, r3
 4632 040e BB6C     		ldr	r3, [r7, #72]
 4633 0410 9A42     		cmp	r2, r3
 4634 0412 04DD     		ble	.L301
1500:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4635              		.loc 1 1500 0
 4636 0414 7B6C     		ldr	r3, [r7, #68]
 4637 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4638 041a 5B42     		negs	r3, r3
 4639 041c BB64     		str	r3, [r7, #72]
 4640              	.L301:
1501:..\src/interruptions.c ****                 }
1502:..\src/interruptions.c ****                 
1503:..\src/interruptions.c ****                 // current error
1504:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4641              		.loc 1 1504 0
 4642 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4643 0422 524A     		ldr	r2, .L359+8
 4644 0424 3421     		movs	r1, #52
 4645 0426 01FB03F3 		mul	r3, r1, r3
 4646 042a 1344     		add	r3, r3, r2
 4647 042c 0C33     		adds	r3, r3, #12
 4648 042e 1B68     		ldr	r3, [r3]
 4649 0430 BA6C     		ldr	r2, [r7, #72]
 4650 0432 D31A     		subs	r3, r2, r3
 4651 0434 BB60     		str	r3, [r7, #8]
1505:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4652              		.loc 1 1505 0
 4653 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4654 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4655 043a 5249     		ldr	r1, .L359+32
 4656 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4657 0440 BA68     		ldr	r2, [r7, #8]
 4658 0442 0A44     		add	r2, r2, r1
 4659 0444 4F49     		ldr	r1, .L359+32
 4660 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1506:..\src/interruptions.c ****                 
1507:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 111


 4661              		.loc 1 1507 0
 4662 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4663 044c 4D4A     		ldr	r2, .L359+32
 4664 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4665 0452 4D4A     		ldr	r2, .L359+36
 4666 0454 9342     		cmp	r3, r2
 4667 0456 05DD     		ble	.L302
1508:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4668              		.loc 1 1508 0
 4669 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4670 045a 4A4A     		ldr	r2, .L359+32
 4671 045c 4A49     		ldr	r1, .L359+36
 4672 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4673 0462 0BE0     		b	.L303
 4674              	.L302:
1509:..\src/interruptions.c ****                 else {
1510:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4675              		.loc 1 1510 0
 4676 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4677 0466 474A     		ldr	r2, .L359+32
 4678 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4679 046c 474A     		ldr	r2, .L359+40
 4680 046e 9342     		cmp	r3, r2
 4681 0470 04DA     		bge	.L303
1511:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4682              		.loc 1 1511 0
 4683 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4684 0474 434A     		ldr	r2, .L359+32
 4685 0476 4549     		ldr	r1, .L359+40
 4686 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4687              	.L303:
1512:..\src/interruptions.c ****                 }
1513:..\src/interruptions.c **** 
1514:..\src/interruptions.c ****                 pwm_input = 0;
 4688              		.loc 1 1514 0
 4689 047c 0023     		movs	r3, #0
 4690 047e FB64     		str	r3, [r7, #76]
1515:..\src/interruptions.c **** 
1516:..\src/interruptions.c ****                 // Proportional
1517:..\src/interruptions.c ****                 if (k_p_c != 0)
 4691              		.loc 1 1517 0
 4692 0480 3B6B     		ldr	r3, [r7, #48]
 4693 0482 002B     		cmp	r3, #0
 4694 0484 07D0     		beq	.L304
1518:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4695              		.loc 1 1518 0
 4696 0486 3B6B     		ldr	r3, [r7, #48]
 4697 0488 BA68     		ldr	r2, [r7, #8]
 4698 048a 02FB03F3 		mul	r3, r2, r3
 4699 048e 1B14     		asrs	r3, r3, #16
 4700 0490 FA6C     		ldr	r2, [r7, #76]
 4701 0492 1344     		add	r3, r3, r2
 4702 0494 FB64     		str	r3, [r7, #76]
 4703              	.L304:
1519:..\src/interruptions.c **** 
1520:..\src/interruptions.c ****                 // Integral
1521:..\src/interruptions.c ****                 if (k_i_c != 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 112


 4704              		.loc 1 1521 0
 4705 0496 FB6A     		ldr	r3, [r7, #44]
 4706 0498 002B     		cmp	r3, #0
 4707 049a 0AD0     		beq	.L305
1522:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4708              		.loc 1 1522 0
 4709 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4710 049e 394A     		ldr	r2, .L359+32
 4711 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4712 04a4 FA6A     		ldr	r2, [r7, #44]
 4713 04a6 02FB03F3 		mul	r3, r2, r3
 4714 04aa 1B14     		asrs	r3, r3, #16
 4715 04ac FA6C     		ldr	r2, [r7, #76]
 4716 04ae 1344     		add	r3, r3, r2
 4717 04b0 FB64     		str	r3, [r7, #76]
 4718              	.L305:
1523:..\src/interruptions.c **** 
1524:..\src/interruptions.c ****                 // Derivative
1525:..\src/interruptions.c ****                 if (k_d_c != 0)
 4719              		.loc 1 1525 0
 4720 04b2 BB6A     		ldr	r3, [r7, #40]
 4721 04b4 002B     		cmp	r3, #0
 4722 04b6 0CD0     		beq	.L306
1526:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4723              		.loc 1 1526 0
 4724 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4725 04ba 2A4A     		ldr	r2, .L359
 4726 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4727 04c0 BA68     		ldr	r2, [r7, #8]
 4728 04c2 D31A     		subs	r3, r2, r3
 4729 04c4 BA6A     		ldr	r2, [r7, #40]
 4730 04c6 02FB03F3 		mul	r3, r2, r3
 4731 04ca 1B14     		asrs	r3, r3, #16
 4732 04cc FA6C     		ldr	r2, [r7, #76]
 4733 04ce 1344     		add	r3, r3, r2
 4734 04d0 FB64     		str	r3, [r7, #76]
 4735              	.L306:
1527:..\src/interruptions.c ****                 
1528:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4736              		.loc 1 1528 0
 4737 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4738 04d4 2349     		ldr	r1, .L359
 4739 04d6 BA68     		ldr	r2, [r7, #8]
 4740 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1529:..\src/interruptions.c ****                 
1530:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4741              		.loc 1 1530 0
 4742 04dc FB6C     		ldr	r3, [r7, #76]
 4743 04de 002B     		cmp	r3, #0
 4744 04e0 04DB     		blt	.L307
1531:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4745              		.loc 1 1531 0
 4746 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4747 04e4 254A     		ldr	r2, .L359+24
 4748 04e6 0121     		movs	r1, #1
 4749 04e8 D154     		strb	r1, [r2, r3]
1532:..\src/interruptions.c ****                 else
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 113


1533:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1534:..\src/interruptions.c ****             }
1535:..\src/interruptions.c ****         break;
 4750              		.loc 1 1535 0
 4751 04ea 38E0     		b	.L354
 4752              	.L307:
1533:..\src/interruptions.c ****             }
 4753              		.loc 1 1533 0
 4754 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4755 04ee 234A     		ldr	r2, .L359+24
 4756 04f0 0021     		movs	r1, #0
 4757 04f2 D154     		strb	r1, [r2, r3]
 4758              		.loc 1 1535 0
 4759 04f4 33E0     		b	.L354
 4760              	.L270:
1536:..\src/interruptions.c ****         
1537:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1538:..\src/interruptions.c ****         case CONTROL_PWM:
1539:..\src/interruptions.c **** 
1540:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4761              		.loc 1 1540 0
 4762 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4763 04f8 1B4A     		ldr	r2, .L359+4
 4764 04fa 1B01     		lsls	r3, r3, #4
 4765 04fc 1344     		add	r3, r3, r2
 4766 04fe 0833     		adds	r3, r3, #8
 4767 0500 1B68     		ldr	r3, [r3]
 4768 0502 FB64     		str	r3, [r7, #76]
1541:..\src/interruptions.c **** 
1542:..\src/interruptions.c ****             if (pwm_input > 0) 
 4769              		.loc 1 1542 0
 4770 0504 FB6C     		ldr	r3, [r7, #76]
 4771 0506 002B     		cmp	r3, #0
 4772 0508 04DD     		ble	.L308
1543:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4773              		.loc 1 1543 0
 4774 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4775 050c 1B4A     		ldr	r2, .L359+24
 4776 050e 0121     		movs	r1, #1
 4777 0510 D154     		strb	r1, [r2, r3]
 4778 0512 03E0     		b	.L309
 4779              	.L308:
1544:..\src/interruptions.c ****             else 
1545:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4780              		.loc 1 1545 0
 4781 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4782 0516 194A     		ldr	r2, .L359+24
 4783 0518 0021     		movs	r1, #0
 4784 051a D154     		strb	r1, [r2, r3]
 4785              	.L309:
1546:..\src/interruptions.c ****             
1547:..\src/interruptions.c ****           
1548:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1549:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4786              		.loc 1 1549 0
 4787 051c 7B6C     		ldr	r3, [r7, #68]
 4788 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 114


 4789 0522 022B     		cmp	r3, #2
 4790 0524 0ED1     		bne	.L310
1550:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4791              		.loc 1 1550 0
 4792 0526 FB6C     		ldr	r3, [r7, #76]
 4793 0528 40F6A932 		movw	r2, #2985
 4794 052c 9342     		cmp	r3, r2
 4795 052e 02DD     		ble	.L311
1551:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4796              		.loc 1 1551 0
 4797 0530 40F6A933 		movw	r3, #2985
 4798 0534 FB64     		str	r3, [r7, #76]
 4799              	.L311:
1552:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4800              		.loc 1 1552 0
 4801 0536 FB6C     		ldr	r3, [r7, #76]
 4802 0538 154A     		ldr	r2, .L359+44
 4803 053a 9342     		cmp	r3, r2
 4804 053c 2ADA     		bge	.L355
1553:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4805              		.loc 1 1553 0
 4806 053e 144B     		ldr	r3, .L359+44
 4807 0540 FB64     		str	r3, [r7, #76]
1554:..\src/interruptions.c ****             }
1555:..\src/interruptions.c ****             else {
1556:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1557:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1558:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1559:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1560:..\src/interruptions.c ****             }
1561:..\src/interruptions.c **** 
1562:..\src/interruptions.c ****         break;
 4808              		.loc 1 1562 0
 4809 0542 27E0     		b	.L355
 4810              	.L310:
1556:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4811              		.loc 1 1556 0
 4812 0544 FB6C     		ldr	r3, [r7, #76]
 4813 0546 642B     		cmp	r3, #100
 4814 0548 01DD     		ble	.L314
1557:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4815              		.loc 1 1557 0
 4816 054a 6423     		movs	r3, #100
 4817 054c FB64     		str	r3, [r7, #76]
 4818              	.L314:
1558:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4819              		.loc 1 1558 0
 4820 054e FB6C     		ldr	r3, [r7, #76]
 4821 0550 13F1640F 		cmn	r3, #100
 4822 0554 1EDA     		bge	.L355
1559:..\src/interruptions.c ****             }
 4823              		.loc 1 1559 0
 4824 0556 6FF06303 		mvn	r3, #99
 4825 055a FB64     		str	r3, [r7, #76]
 4826              		.loc 1 1562 0
 4827 055c 1AE0     		b	.L355
 4828              	.L354:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 115


1535:..\src/interruptions.c ****         
 4829              		.loc 1 1535 0
 4830 055e 00BF     		nop
 4831 0560 19E0     		b	.L267
 4832              	.L360:
 4833 0562 00BF     		.align	2
 4834              	.L359:
 4835 0564 C8000000 		.word	prev_curr_err.10593
 4836 0568 00000000 		.word	g_ref
 4837 056c 00000000 		.word	g_meas
 4838 0570 AC000000 		.word	pos_error_sum.10590
 4839 0574 18FCFFFF 		.word	-1000
 4840 0578 B4000000 		.word	prev_pos_err.10592
 4841 057c BC000000 		.word	motor_dir.10595
 4842 0580 00000000 		.word	tension_valid
 4843 0584 C0000000 		.word	curr_error_sum.10591
 4844 0588 A0860100 		.word	100000
 4845 058c 6079FEFF 		.word	-100000
 4846 0590 57F4FFFF 		.word	-2985
 4847              	.L355:
 4848              		.loc 1 1562 0
 4849 0594 00BF     		nop
 4850              	.L267:
1563:..\src/interruptions.c ****             
1564:..\src/interruptions.c ****     }
1565:..\src/interruptions.c **** 
1566:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1567:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1568:..\src/interruptions.c **** 
1569:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1570:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4851              		.loc 1 1570 0
 4852 0596 7B6C     		ldr	r3, [r7, #68]
 4853 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4854 059c 022B     		cmp	r3, #2
 4855 059e 23D1     		bne	.L315
1571:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4856              		.loc 1 1571 0
 4857 05a0 FB6C     		ldr	r3, [r7, #76]
 4858 05a2 40F6A932 		movw	r2, #2985
 4859 05a6 9342     		cmp	r3, r2
 4860 05a8 02DD     		ble	.L316
1572:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4861              		.loc 1 1572 0
 4862 05aa 40F6A933 		movw	r3, #2985
 4863 05ae FB64     		str	r3, [r7, #76]
 4864              	.L316:
1573:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4865              		.loc 1 1573 0
 4866 05b0 FB6C     		ldr	r3, [r7, #76]
 4867 05b2 B34A     		ldr	r2, .L361
 4868 05b4 9342     		cmp	r3, r2
 4869 05b6 01DA     		bge	.L317
1574:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4870              		.loc 1 1574 0
 4871 05b8 B14B     		ldr	r3, .L361
 4872 05ba FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 116


 4873              	.L317:
1575:..\src/interruptions.c ****         
1576:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4874              		.loc 1 1576 0
 4875 05bc 7B6C     		ldr	r3, [r7, #68]
 4876 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4877 05c2 012B     		cmp	r3, #1
 4878 05c4 31D0     		beq	.L319
1577:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4879              		.loc 1 1577 0
 4880 05c6 FB6C     		ldr	r3, [r7, #76]
 4881 05c8 9B02     		lsls	r3, r3, #10
 4882 05ca AE4A     		ldr	r2, .L361+4
 4883 05cc 82FB0312 		smull	r1, r2, r2, r3
 4884 05d0 9211     		asrs	r2, r2, #6
 4885 05d2 DB17     		asrs	r3, r3, #31
 4886 05d4 D31A     		subs	r3, r2, r3
 4887 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4888 05d8 AB49     		ldr	r1, .L361+8
 4889 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4890 05de 02FB03F3 		mul	r3, r2, r3
 4891 05e2 9B12     		asrs	r3, r3, #10
 4892 05e4 FB64     		str	r3, [r7, #76]
 4893 05e6 20E0     		b	.L319
 4894              	.L315:
1578:..\src/interruptions.c ****     }
1579:..\src/interruptions.c ****     else {
1580:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4895              		.loc 1 1580 0
 4896 05e8 FB6C     		ldr	r3, [r7, #76]
 4897 05ea 642B     		cmp	r3, #100
 4898 05ec 01DD     		ble	.L320
1581:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4899              		.loc 1 1581 0
 4900 05ee 6423     		movs	r3, #100
 4901 05f0 FB64     		str	r3, [r7, #76]
 4902              	.L320:
1582:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4903              		.loc 1 1582 0
 4904 05f2 FB6C     		ldr	r3, [r7, #76]
 4905 05f4 13F1640F 		cmn	r3, #100
 4906 05f8 02DA     		bge	.L321
1583:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4907              		.loc 1 1583 0
 4908 05fa 6FF06303 		mvn	r3, #99
 4909 05fe FB64     		str	r3, [r7, #76]
 4910              	.L321:
1584:..\src/interruptions.c ****         
1585:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4911              		.loc 1 1585 0
 4912 0600 7B6C     		ldr	r3, [r7, #68]
 4913 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4914 0606 012B     		cmp	r3, #1
 4915 0608 0FD0     		beq	.L319
1586:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4916              		.loc 1 1586 0
 4917 060a FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 117


 4918 060c 9B02     		lsls	r3, r3, #10
 4919 060e 9F4A     		ldr	r2, .L361+12
 4920 0610 82FB0312 		smull	r1, r2, r2, r3
 4921 0614 5211     		asrs	r2, r2, #5
 4922 0616 DB17     		asrs	r3, r3, #31
 4923 0618 D31A     		subs	r3, r2, r3
 4924 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4925 061c 9A49     		ldr	r1, .L361+8
 4926 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4927 0622 02FB03F3 		mul	r3, r2, r3
 4928 0626 9B12     		asrs	r3, r3, #10
 4929 0628 FB64     		str	r3, [r7, #76]
 4930              	.L319:
1587:..\src/interruptions.c ****     }
1588:..\src/interruptions.c **** 
1589:..\src/interruptions.c ****     //// RATE LIMITER ////
1590:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4931              		.loc 1 1590 0
 4932 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4933 062c 984A     		ldr	r2, .L361+16
 4934 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4935 0632 FA6C     		ldr	r2, [r7, #76]
 4936 0634 D31A     		subs	r3, r2, r3
 4937 0636 7A6C     		ldr	r2, [r7, #68]
 4938 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4939 063c 9342     		cmp	r3, r2
 4940 063e 09DD     		ble	.L322
1591:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4941              		.loc 1 1591 0
 4942 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4943 0642 934A     		ldr	r2, .L361+16
 4944 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4945 0648 7A6C     		ldr	r2, [r7, #68]
 4946 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4947 064e 1344     		add	r3, r3, r2
 4948 0650 FB64     		str	r3, [r7, #76]
 4949 0652 14E0     		b	.L323
 4950              	.L322:
1592:..\src/interruptions.c ****     }
1593:..\src/interruptions.c ****     else {
1594:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4951              		.loc 1 1594 0
 4952 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4953 0656 8E4A     		ldr	r2, .L361+16
 4954 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4955 065c FA6C     		ldr	r2, [r7, #76]
 4956 065e D21A     		subs	r2, r2, r3
 4957 0660 7B6C     		ldr	r3, [r7, #68]
 4958 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4959 0666 5B42     		negs	r3, r3
 4960 0668 9A42     		cmp	r2, r3
 4961 066a 08DA     		bge	.L323
1595:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4962              		.loc 1 1595 0
 4963 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4964 066e 884A     		ldr	r2, .L361+16
 4965 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 118


 4966 0674 7A6C     		ldr	r2, [r7, #68]
 4967 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4968 067a 9B1A     		subs	r3, r3, r2
 4969 067c FB64     		str	r3, [r7, #76]
 4970              	.L323:
1596:..\src/interruptions.c ****     }
1597:..\src/interruptions.c ****    
1598:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1599:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4971              		.loc 1 1599 0
 4972 067e 7B6C     		ldr	r3, [r7, #68]
 4973 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4974 0684 022B     		cmp	r3, #2
 4975 0686 0ED1     		bne	.L324
1600:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4976              		.loc 1 1600 0
 4977 0688 FB6C     		ldr	r3, [r7, #76]
 4978 068a 40F6A932 		movw	r2, #2985
 4979 068e 9342     		cmp	r3, r2
 4980 0690 02DD     		ble	.L325
1601:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4981              		.loc 1 1601 0
 4982 0692 40F6A933 		movw	r3, #2985
 4983 0696 FB64     		str	r3, [r7, #76]
 4984              	.L325:
1602:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4985              		.loc 1 1602 0
 4986 0698 FB6C     		ldr	r3, [r7, #76]
 4987 069a 794A     		ldr	r2, .L361
 4988 069c 9342     		cmp	r3, r2
 4989 069e 0EDA     		bge	.L327
1603:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4990              		.loc 1 1603 0
 4991 06a0 774B     		ldr	r3, .L361
 4992 06a2 FB64     		str	r3, [r7, #76]
 4993 06a4 0BE0     		b	.L327
 4994              	.L324:
1604:..\src/interruptions.c ****     }
1605:..\src/interruptions.c ****     else {
1606:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4995              		.loc 1 1606 0
 4996 06a6 FB6C     		ldr	r3, [r7, #76]
 4997 06a8 642B     		cmp	r3, #100
 4998 06aa 01DD     		ble	.L328
1607:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4999              		.loc 1 1607 0
 5000 06ac 6423     		movs	r3, #100
 5001 06ae FB64     		str	r3, [r7, #76]
 5002              	.L328:
1608:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 5003              		.loc 1 1608 0
 5004 06b0 FB6C     		ldr	r3, [r7, #76]
 5005 06b2 13F1640F 		cmn	r3, #100
 5006 06b6 02DA     		bge	.L327
1609:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 5007              		.loc 1 1609 0
 5008 06b8 6FF06303 		mvn	r3, #99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 119


 5009 06bc FB64     		str	r3, [r7, #76]
 5010              	.L327:
1610:..\src/interruptions.c ****     }
1611:..\src/interruptions.c **** 
1612:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 5011              		.loc 1 1612 0
 5012 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5013 06c0 7349     		ldr	r1, .L361+16
 5014 06c2 FA6C     		ldr	r2, [r7, #76]
 5015 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1613:..\src/interruptions.c ****            
1614:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5016              		.loc 1 1614 0
 5017 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5018 06ca FA6C     		ldr	r2, [r7, #76]
 5019 06cc 002A     		cmp	r2, #0
 5020 06ce 01DB     		blt	.L329
 5021              		.loc 1 1614 0 is_stmt 0 discriminator 1
 5022 06d0 0121     		movs	r1, #1
 5023 06d2 01E0     		b	.L330
 5024              	.L329:
 5025              		.loc 1 1614 0 discriminator 2
 5026 06d4 4FF0FF31 		mov	r1, #-1
 5027              	.L330:
 5028              		.loc 1 1614 0 discriminator 4
 5029 06d8 6E4A     		ldr	r2, .L361+20
 5030 06da D154     		strb	r1, [r2, r3]
1615:..\src/interruptions.c ****     
1616:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 5031              		.loc 1 1616 0 is_stmt 1 discriminator 4
 5032 06dc 7B6C     		ldr	r3, [r7, #68]
 5033 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 5034 06e2 012B     		cmp	r3, #1
 5035 06e4 40F0AA80 		bne	.L331
1617:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1618:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 5036              		.loc 1 1618 0
 5037 06e8 7B6C     		ldr	r3, [r7, #68]
 5038 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5039 06ee 012B     		cmp	r3, #1
 5040 06f0 00F09F80 		beq	.L332
 5041              		.loc 1 1618 0 is_stmt 0 discriminator 1
 5042 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5043 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5044 06fa 6748     		ldr	r0, .L361+24
 5045 06fc 1346     		mov	r3, r2
 5046 06fe 5B00     		lsls	r3, r3, #1
 5047 0700 1344     		add	r3, r3, r2
 5048 0702 9B00     		lsls	r3, r3, #2
 5049 0704 1344     		add	r3, r3, r2
 5050 0706 0B44     		add	r3, r3, r1
 5051 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5052 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5053 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5054 0712 624C     		ldr	r4, .L361+28
 5055 0714 1346     		mov	r3, r2
 5056 0716 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 120


 5057 0718 1344     		add	r3, r3, r2
 5058 071a 9B00     		lsls	r3, r3, #2
 5059 071c 1344     		add	r3, r3, r2
 5060 071e 0344     		add	r3, r3, r0
 5061 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5062 0724 CB1A     		subs	r3, r1, r3
 5063 0726 312B     		cmp	r3, #49
 5064 0728 00F38380 		bgt	.L332
1619:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5065              		.loc 1 1619 0 is_stmt 1 discriminator 2
 5066 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5067 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5068 0732 5948     		ldr	r0, .L361+24
 5069 0734 1346     		mov	r3, r2
 5070 0736 5B00     		lsls	r3, r3, #1
 5071 0738 1344     		add	r3, r3, r2
 5072 073a 9B00     		lsls	r3, r3, #2
 5073 073c 1344     		add	r3, r3, r2
 5074 073e 0B44     		add	r3, r3, r1
 5075 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5076 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5077 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5078 074a 544C     		ldr	r4, .L361+28
 5079 074c 1346     		mov	r3, r2
 5080 074e 5B00     		lsls	r3, r3, #1
 5081 0750 1344     		add	r3, r3, r2
 5082 0752 9B00     		lsls	r3, r3, #2
 5083 0754 1344     		add	r3, r3, r2
 5084 0756 0344     		add	r3, r3, r0
 5085 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5086 075c CB1A     		subs	r3, r1, r3
1618:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5087              		.loc 1 1618 0 discriminator 2
 5088 075e 13F1310F 		cmn	r3, #49
 5089 0762 66DB     		blt	.L332
1620:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 5090              		.loc 1 1620 0
 5091 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5092 0766 4E4A     		ldr	r2, .L361+32
 5093 0768 1B01     		lsls	r3, r3, #4
 5094 076a 1344     		add	r3, r3, r2
 5095 076c 1A68     		ldr	r2, [r3]
 5096 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5097 0770 4C49     		ldr	r1, .L361+36
 5098 0772 1B01     		lsls	r3, r3, #4
 5099 0774 0B44     		add	r3, r3, r1
 5100 0776 1B68     		ldr	r3, [r3]
 5101 0778 D31A     		subs	r3, r2, r3
1619:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5102              		.loc 1 1619 0
 5103 077a 632B     		cmp	r3, #99
 5104 077c 59DC     		bgt	.L332
 5105              		.loc 1 1620 0
 5106 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5107 0780 474A     		ldr	r2, .L361+32
 5108 0782 1B01     		lsls	r3, r3, #4
 5109 0784 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 121


 5110 0786 1A68     		ldr	r2, [r3]
 5111 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5112 078a 4649     		ldr	r1, .L361+36
 5113 078c 1B01     		lsls	r3, r3, #4
 5114 078e 0B44     		add	r3, r3, r1
 5115 0790 1B68     		ldr	r3, [r3]
 5116 0792 D31A     		subs	r3, r2, r3
 5117 0794 13F1630F 		cmn	r3, #99
 5118 0798 4BDB     		blt	.L332
1621:..\src/interruptions.c ****             position_counter[idx]++;
 5119              		.loc 1 1621 0
 5120 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5121 079c 424A     		ldr	r2, .L361+40
 5122 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5123 07a2 0132     		adds	r2, r2, #1
 5124 07a4 4049     		ldr	r1, .L361+40
 5125 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1622:..\src/interruptions.c ****             
1623:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5126              		.loc 1 1623 0
 5127 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5128 07ac 3E4A     		ldr	r2, .L361+40
 5129 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5130 07b2 F92B     		cmp	r3, #249
 5131 07b4 42D9     		bls	.L331
1624:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5132              		.loc 1 1624 0
 5133 07b6 7B6C     		ldr	r3, [r7, #68]
 5134 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5135 07bc 002B     		cmp	r3, #0
 5136 07be 10D1     		bne	.L334
 5137              		.loc 1 1624 0 is_stmt 0 discriminator 1
 5138 07c0 3A4B     		ldr	r3, .L361+44
 5139 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5140 07c4 002B     		cmp	r3, #0
 5141 07c6 0CD1     		bne	.L334
1625:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5142              		.loc 1 1625 0 is_stmt 1
 5143 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5144 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5145 07ce 3349     		ldr	r1, .L361+28
 5146 07d0 3420     		movs	r0, #52
 5147 07d2 00FB02F2 		mul	r2, r0, r2
 5148 07d6 0A44     		add	r2, r2, r1
 5149 07d8 1268     		ldr	r2, [r2]
 5150 07da 3549     		ldr	r1, .L361+48
 5151 07dc 1B01     		lsls	r3, r3, #4
 5152 07de 0B44     		add	r3, r3, r1
 5153 07e0 1A60     		str	r2, [r3]
 5154              	.L334:
1626:..\src/interruptions.c ****                 }
1627:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5155              		.loc 1 1627 0
 5156 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5157 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5158 07e8 2C49     		ldr	r1, .L361+28
 5159 07ea 3420     		movs	r0, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 122


 5160 07ec 00FB02F2 		mul	r2, r0, r2
 5161 07f0 0A44     		add	r2, r2, r1
 5162 07f2 1268     		ldr	r2, [r2]
 5163 07f4 2B49     		ldr	r1, .L361+36
 5164 07f6 1B01     		lsls	r3, r3, #4
 5165 07f8 0B44     		add	r3, r3, r1
 5166 07fa 1A60     		str	r2, [r3]
1628:..\src/interruptions.c ****                 
1629:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5167              		.loc 1 1629 0
 5168 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5169 07fe 2A4A     		ldr	r2, .L361+40
 5170 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5171 0804 FA2B     		cmp	r3, #250
 5172 0806 11D1     		bne	.L335
1630:..\src/interruptions.c ****                     // To do only once
1631:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5173              		.loc 1 1631 0
 5174 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5175 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5176 0810 2249     		ldr	r1, .L361+28
 5177 0812 3420     		movs	r0, #52
 5178 0814 00FB02F2 		mul	r2, r0, r2
 5179 0818 0A44     		add	r2, r2, r1
 5180 081a 0C32     		adds	r2, r2, #12
 5181 081c 1268     		ldr	r2, [r2]
 5182 081e 1F49     		ldr	r1, .L361+28
 5183 0820 3420     		movs	r0, #52
 5184 0822 00FB03F3 		mul	r3, r0, r3
 5185 0826 0B44     		add	r3, r3, r1
 5186 0828 1433     		adds	r3, r3, #20
 5187 082a 1A60     		str	r2, [r3]
 5188              	.L335:
1632:..\src/interruptions.c ****                 }
1633:..\src/interruptions.c ****                 pwm_input = 0;            
 5189              		.loc 1 1633 0
 5190 082c 0023     		movs	r3, #0
 5191 082e FB64     		str	r3, [r7, #76]
1623:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5192              		.loc 1 1623 0
 5193 0830 04E0     		b	.L331
 5194              	.L332:
1634:..\src/interruptions.c ****             }
1635:..\src/interruptions.c ****         }
1636:..\src/interruptions.c ****         else {
1637:..\src/interruptions.c ****             position_counter[idx] = 0;
 5195              		.loc 1 1637 0
 5196 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5197 0834 1C4A     		ldr	r2, .L361+40
 5198 0836 0021     		movs	r1, #0
 5199 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 5200              	.L331:
1638:..\src/interruptions.c ****         }
1639:..\src/interruptions.c ****     }
1640:..\src/interruptions.c ****     
1641:..\src/interruptions.c ****     
1642:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 123


1643:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 5201              		.loc 1 1643 0
 5202 083c 7B6C     		ldr	r3, [r7, #68]
 5203 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5204 0842 022B     		cmp	r3, #2
 5205 0844 3BD1     		bne	.L336
1644:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1645:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 5206              		.loc 1 1645 0
 5207 0846 FB6C     		ldr	r3, [r7, #76]
 5208 0848 002B     		cmp	r3, #0
 5209 084a B8BF     		it	lt
 5210 084c 5B42     		rsblt	r3, r3, #0
 5211 084e 40F68C22 		movw	r2, #2700
 5212 0852 9342     		cmp	r3, r2
 5213 0854 07DD     		ble	.L337
1646:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 5214              		.loc 1 1646 0
 5215 0856 FB6C     		ldr	r3, [r7, #76]
 5216 0858 002B     		cmp	r3, #0
 5217 085a 02DB     		blt	.L338
 5218              		.loc 1 1646 0 is_stmt 0 discriminator 1
 5219 085c 40F68C23 		movw	r3, #2700
 5220 0860 00E0     		b	.L339
 5221              	.L338:
 5222              		.loc 1 1646 0 discriminator 2
 5223 0862 144B     		ldr	r3, .L361+52
 5224              	.L339:
 5225              		.loc 1 1646 0 discriminator 4
 5226 0864 FB64     		str	r3, [r7, #76]
 5227              	.L337:
1647:..\src/interruptions.c ****         }
1648:..\src/interruptions.c ****         
1649:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 5228              		.loc 1 1649 0 is_stmt 1
 5229 0866 FB6C     		ldr	r3, [r7, #76]
 5230 0868 13F1C70F 		cmn	r3, #199
 5231 086c 27DB     		blt	.L336
 5232              		.loc 1 1649 0 is_stmt 0 discriminator 1
 5233 086e FB6C     		ldr	r3, [r7, #76]
 5234 0870 C72B     		cmp	r3, #199
 5235 0872 24DC     		bgt	.L336
1650:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 5236              		.loc 1 1650 0 is_stmt 1
 5237 0874 FB6C     		ldr	r3, [r7, #76]
 5238 0876 002B     		cmp	r3, #0
 5239 0878 1EDB     		blt	.L340
 5240              		.loc 1 1650 0 is_stmt 0 discriminator 1
 5241 087a C823     		movs	r3, #200
 5242 087c 1EE0     		b	.L341
 5243              	.L362:
 5244 087e 00BF     		.align	2
 5245              	.L361:
 5246 0880 57F4FFFF 		.word	-2985
 5247 0884 81207D05 		.word	92086401
 5248 0888 00000000 		.word	dev_pwm_limit
 5249 088c 1F85EB51 		.word	1374389535
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 124


 5250 0890 D0000000 		.word	prev_pwm.10594
 5251 0894 00000000 		.word	pwm_sign
 5252 0898 00000000 		.word	g_measOld
 5253 089c 00000000 		.word	g_meas
 5254 08a0 00000000 		.word	g_refOld
 5255 08a4 00000000 		.word	g_ref
 5256 08a8 D8000000 		.word	position_counter.10596
 5257 08ac 00000000 		.word	change_ext_ref_flag
 5258 08b0 00000000 		.word	g_refNew
 5259 08b4 74F5FFFF 		.word	-2700
 5260              	.L340:
 5261              		.loc 1 1650 0 discriminator 2
 5262 08b8 6FF0C703 		mvn	r3, #199
 5263              	.L341:
 5264              		.loc 1 1650 0 discriminator 4
 5265 08bc FB64     		str	r3, [r7, #76]
 5266              	.L336:
1651:..\src/interruptions.c ****         }
1652:..\src/interruptions.c ****        
1653:..\src/interruptions.c ****     }
1654:..\src/interruptions.c ****     
1655:..\src/interruptions.c ****     // Set motor direction and write pwm value
1656:..\src/interruptions.c ****     switch (idx) {
 5267              		.loc 1 1656 0 is_stmt 1
 5268 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5269 08c0 002B     		cmp	r3, #0
 5270 08c2 02D0     		beq	.L343
 5271 08c4 012B     		cmp	r3, #1
 5272 08c6 26D0     		beq	.L344
1657:..\src/interruptions.c ****         case 0:         // Motor 1
1658:..\src/interruptions.c ****             if (motor_dir[idx])
1659:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1660:..\src/interruptions.c ****             else
1661:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1662:..\src/interruptions.c ****             
1663:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1664:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1665:..\src/interruptions.c ****             }
1666:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1667:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1668:..\src/interruptions.c ****             }
1669:..\src/interruptions.c ****             
1670:..\src/interruptions.c ****             break;
1671:..\src/interruptions.c ****         case 1:         // Motor 2
1672:..\src/interruptions.c ****             
1673:..\src/interruptions.c ****             if (motor_dir[idx])
1674:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1675:..\src/interruptions.c ****             else
1676:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1677:..\src/interruptions.c ****             
1678:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1679:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1680:..\src/interruptions.c ****             }
1681:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1682:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1683:..\src/interruptions.c ****             }
1684:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 125


1685:..\src/interruptions.c ****             break;
1686:..\src/interruptions.c ****         default:
1687:..\src/interruptions.c ****             break;
 5273              		.loc 1 1687 0
 5274 08c8 4BE0     		b	.L349
 5275              	.L343:
1658:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5276              		.loc 1 1658 0
 5277 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5278 08cc 274A     		ldr	r2, .L363
 5279 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5280 08d0 002B     		cmp	r3, #0
 5281 08d2 03D0     		beq	.L345
1659:..\src/interruptions.c ****             else
 5282              		.loc 1 1659 0
 5283 08d4 0120     		movs	r0, #1
 5284 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5285 08da 02E0     		b	.L346
 5286              	.L345:
1661:..\src/interruptions.c ****             
 5287              		.loc 1 1661 0
 5288 08dc 0020     		movs	r0, #0
 5289 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5290              	.L346:
1663:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 5291              		.loc 1 1663 0
 5292 08e2 7B6C     		ldr	r3, [r7, #68]
 5293 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5294 08e8 012B     		cmp	r3, #1
 5295 08ea 0BD1     		bne	.L347
1664:..\src/interruptions.c ****             }
 5296              		.loc 1 1664 0
 5297 08ec FB6C     		ldr	r3, [r7, #76]
 5298 08ee 002B     		cmp	r3, #0
 5299 08f0 B8BF     		it	lt
 5300 08f2 5B42     		rsblt	r3, r3, #0
 5301 08f4 9BB2     		uxth	r3, r3
 5302 08f6 C3F16403 		rsb	r3, r3, #100
 5303 08fa 9BB2     		uxth	r3, r3
 5304 08fc 1846     		mov	r0, r3
 5305 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1670:..\src/interruptions.c ****         case 1:         // Motor 2
 5306              		.loc 1 1670 0
 5307 0902 2EE0     		b	.L349
 5308              	.L347:
1667:..\src/interruptions.c ****             }
 5309              		.loc 1 1667 0
 5310 0904 FB6C     		ldr	r3, [r7, #76]
 5311 0906 002B     		cmp	r3, #0
 5312 0908 B8BF     		it	lt
 5313 090a 5B42     		rsblt	r3, r3, #0
 5314 090c 9BB2     		uxth	r3, r3
 5315 090e 1846     		mov	r0, r3
 5316 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1670:..\src/interruptions.c ****         case 1:         // Motor 2
 5317              		.loc 1 1670 0
 5318 0914 25E0     		b	.L349
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 126


 5319              	.L344:
1673:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5320              		.loc 1 1673 0
 5321 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5322 0918 144A     		ldr	r2, .L363
 5323 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5324 091c 002B     		cmp	r3, #0
 5325 091e 03D0     		beq	.L350
1674:..\src/interruptions.c ****             else
 5326              		.loc 1 1674 0
 5327 0920 0120     		movs	r0, #1
 5328 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5329 0926 02E0     		b	.L351
 5330              	.L350:
1676:..\src/interruptions.c ****             
 5331              		.loc 1 1676 0
 5332 0928 0020     		movs	r0, #0
 5333 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5334              	.L351:
1678:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 5335              		.loc 1 1678 0
 5336 092e 7B6C     		ldr	r3, [r7, #68]
 5337 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5338 0934 012B     		cmp	r3, #1
 5339 0936 0BD1     		bne	.L352
1679:..\src/interruptions.c ****             }
 5340              		.loc 1 1679 0
 5341 0938 FB6C     		ldr	r3, [r7, #76]
 5342 093a 002B     		cmp	r3, #0
 5343 093c B8BF     		it	lt
 5344 093e 5B42     		rsblt	r3, r3, #0
 5345 0940 9BB2     		uxth	r3, r3
 5346 0942 C3F16403 		rsb	r3, r3, #100
 5347 0946 9BB2     		uxth	r3, r3
 5348 0948 1846     		mov	r0, r3
 5349 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1685:..\src/interruptions.c ****         default:
 5350              		.loc 1 1685 0
 5351 094e 07E0     		b	.L356
 5352              	.L352:
1682:..\src/interruptions.c ****             }
 5353              		.loc 1 1682 0
 5354 0950 FB6C     		ldr	r3, [r7, #76]
 5355 0952 002B     		cmp	r3, #0
 5356 0954 B8BF     		it	lt
 5357 0956 5B42     		rsblt	r3, r3, #0
 5358 0958 9BB2     		uxth	r3, r3
 5359 095a 1846     		mov	r0, r3
 5360 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5361              	.L356:
1685:..\src/interruptions.c ****         default:
 5362              		.loc 1 1685 0
 5363 0960 00BF     		nop
 5364              	.L349:
1688:..\src/interruptions.c ****     }
1689:..\src/interruptions.c ****     
1690:..\src/interruptions.c **** }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 127


 5365              		.loc 1 1690 0
 5366 0962 00BF     		nop
 5367 0964 5437     		adds	r7, r7, #84
 5368              		.cfi_def_cfa_offset 12
 5369 0966 BD46     		mov	sp, r7
 5370              		.cfi_def_cfa_register 13
 5371              		@ sp needed
 5372 0968 90BD     		pop	{r4, r7, pc}
 5373              	.L364:
 5374 096a 00BF     		.align	2
 5375              	.L363:
 5376 096c BC000000 		.word	motor_dir.10595
 5377              		.cfi_endproc
 5378              	.LFE72:
 5379              		.size	motor_control_generic, .-motor_control_generic
 5380              		.global	__aeabi_fcmpeq
 5381              		.global	__aeabi_fmul
 5382              		.global	__aeabi_f2iz
 5383              		.global	__aeabi_fcmplt
 5384              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5385              		.align	2
 5386              		.global	encoder_reading_SPI
 5387              		.thumb
 5388              		.thumb_func
 5389              		.type	encoder_reading_SPI, %function
 5390              	encoder_reading_SPI:
 5391              	.LFB73:
1691:..\src/interruptions.c **** 
1692:..\src/interruptions.c **** //==============================================================================
1693:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1694:..\src/interruptions.c **** //==============================================================================
1695:..\src/interruptions.c **** 
1696:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5392              		.loc 1 1696 0
 5393              		.cfi_startproc
 5394              		@ args = 0, pretend = 0, frame = 48
 5395              		@ frame_needed = 1, uses_anonymous_args = 0
 5396 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5397              		.cfi_def_cfa_offset 20
 5398              		.cfi_offset 4, -20
 5399              		.cfi_offset 5, -16
 5400              		.cfi_offset 6, -12
 5401              		.cfi_offset 7, -8
 5402              		.cfi_offset 14, -4
 5403 0002 8FB0     		sub	sp, sp, #60
 5404              		.cfi_def_cfa_offset 80
 5405 0004 02AF     		add	r7, sp, #8
 5406              		.cfi_def_cfa 7, 72
 5407 0006 0346     		mov	r3, r0
 5408 0008 0A46     		mov	r2, r1
 5409 000a FB71     		strb	r3, [r7, #7]
 5410 000c 1346     		mov	r3, r2
 5411 000e BB71     		strb	r3, [r7, #6]
1697:..\src/interruptions.c **** 
1698:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5412              		.loc 1 1698 0
 5413 0010 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 128


 5414 0012 87F82F30 		strb	r3, [r7, #47]
1699:..\src/interruptions.c ****     
1700:..\src/interruptions.c ****     // Encoder Variables  
1701:..\src/interruptions.c ****     uint8 jj;
1702:..\src/interruptions.c ****      
1703:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1704:..\src/interruptions.c ****     int16 tmp_value_encoder;
1705:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1706:..\src/interruptions.c ****     int32 value_encoder;
1707:..\src/interruptions.c ****     int32 speed_encoder;
1708:..\src/interruptions.c ****     int32 value_diff;
1709:..\src/interruptions.c **** 	int8 init_rot = 0;
 5415              		.loc 1 1709 0
 5416 0016 0023     		movs	r3, #0
 5417 0018 87F82730 		strb	r3, [r7, #39]
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1712:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1713:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1714:..\src/interruptions.c ****     
1715:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1716:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1717:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1718:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1719:..\src/interruptions.c **** 
1720:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1721:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1722:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1723:..\src/interruptions.c ****     
1724:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5418              		.loc 1 1724 0
 5419 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5420 001e 924A     		ldr	r2, .L402
 5421 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5422 0022 002B     		cmp	r3, #0
 5423 0024 19D0     		beq	.L366
1725:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5424              		.loc 1 1725 0
 5425 0026 0323     		movs	r3, #3
 5426 0028 87F82E30 		strb	r3, [r7, #46]
 5427 002c 0AE0     		b	.L367
 5428              	.L368:
1726:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5429              		.loc 1 1726 0
 5430 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5431 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5432 0034 8D48     		ldr	r0, .L402+4
 5433 0036 1346     		mov	r3, r2
 5434 0038 5B00     		lsls	r3, r3, #1
 5435 003a 1344     		add	r3, r3, r2
 5436 003c 0B44     		add	r3, r3, r1
 5437 003e 0022     		movs	r2, #0
 5438 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5439              	.L367:
1725:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5440              		.loc 1 1725 0 discriminator 1
 5441 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 129


 5442 0048 5A1E     		subs	r2, r3, #1
 5443 004a 87F82E20 		strb	r2, [r7, #46]
 5444 004e 002B     		cmp	r3, #0
 5445 0050 EDD1     		bne	.L368
1727:..\src/interruptions.c ****         
1728:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5446              		.loc 1 1728 0
 5447 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5448 0054 844A     		ldr	r2, .L402
 5449 0056 0021     		movs	r1, #0
 5450 0058 D154     		strb	r1, [r2, r3]
 5451              	.L366:
1729:..\src/interruptions.c ****     }
1730:..\src/interruptions.c **** 
1731:..\src/interruptions.c ****     //======================================================     reading sensors
1732:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5452              		.loc 1 1732 0
 5453 005a 0023     		movs	r3, #0
 5454 005c 87F82F30 		strb	r3, [r7, #47]
 5455 0060 0DE0     		b	.L369
 5456              	.L370:
1733:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5457              		.loc 1 1733 0 discriminator 3
 5458 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5459 0066 9B00     		lsls	r3, r3, #2
 5460 0068 07F13002 		add	r2, r7, #48
 5461 006c 1344     		add	r3, r3, r2
 5462 006e 0022     		movs	r2, #0
 5463 0070 43F8282C 		str	r2, [r3, #-40]
1732:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5464              		.loc 1 1732 0 discriminator 3
 5465 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5466 0078 0133     		adds	r3, r3, #1
 5467 007a 87F82F30 		strb	r3, [r7, #47]
 5468              	.L369:
1732:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5469              		.loc 1 1732 0 is_stmt 0 discriminator 1
 5470 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5471 0082 022B     		cmp	r3, #2
 5472 0084 EDD9     		bls	.L370
1734:..\src/interruptions.c ****     }   
1735:..\src/interruptions.c ****     
1736:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5473              		.loc 1 1736 0 is_stmt 1
 5474 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5475 0088 794A     		ldr	r2, .L402+8
 5476 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5477 008c 1A46     		mov	r2, r3
 5478 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5479 0090 1946     		mov	r1, r3
 5480 0092 1046     		mov	r0, r2
 5481 0094 FFF7FEFF 		bl	ReadEncoderLine
 5482              	.LBB10:
1737:..\src/interruptions.c ****                                                                         //CS1 for left hand
1738:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5483              		.loc 1 1738 0
 5484 0098 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 130


 5485 009a 3B62     		str	r3, [r7, #32]
 5486 009c 2EE0     		b	.L371
 5487              	.L373:
1739:..\src/interruptions.c ****         
1740:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1741:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5488              		.loc 1 1741 0
 5489 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5490 00a0 7449     		ldr	r1, .L402+12
 5491 00a2 1346     		mov	r3, r2
 5492 00a4 5B00     		lsls	r3, r3, #1
 5493 00a6 1344     		add	r3, r3, r2
 5494 00a8 1B01     		lsls	r3, r3, #4
 5495 00aa CA18     		adds	r2, r1, r3
 5496 00ac 3B6A     		ldr	r3, [r7, #32]
 5497 00ae 1344     		add	r3, r3, r2
 5498 00b0 03F2B113 		addw	r3, r3, #433
 5499 00b4 1B78     		ldrb	r3, [r3]
 5500 00b6 87F82F30 		strb	r3, [r7, #47]
1742:..\src/interruptions.c ****         
1743:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5501              		.loc 1 1743 0
 5502 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5503 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5504 00c0 6D48     		ldr	r0, .L402+16
 5505 00c2 1346     		mov	r3, r2
 5506 00c4 9B00     		lsls	r3, r3, #2
 5507 00c6 1344     		add	r3, r3, r2
 5508 00c8 0344     		add	r3, r3, r0
 5509 00ca 0B44     		add	r3, r3, r1
 5510 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5511 00ce 0F2B     		cmp	r3, #15
 5512 00d0 11D9     		bls	.L372
1744:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5513              		.loc 1 1744 0
 5514 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5515 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5516 00d8 6848     		ldr	r0, .L402+20
 5517 00da 1346     		mov	r3, r2
 5518 00dc 9B00     		lsls	r3, r3, #2
 5519 00de 1344     		add	r3, r3, r2
 5520 00e0 0B44     		add	r3, r3, r1
 5521 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5522 00e6 1A46     		mov	r2, r3
 5523 00e8 3B6A     		ldr	r3, [r7, #32]
 5524 00ea 9B00     		lsls	r3, r3, #2
 5525 00ec 07F13001 		add	r1, r7, #48
 5526 00f0 0B44     		add	r3, r3, r1
 5527 00f2 43F8282C 		str	r2, [r3, #-40]
 5528              	.L372:
1738:..\src/interruptions.c ****         
 5529              		.loc 1 1738 0 discriminator 2
 5530 00f6 3B6A     		ldr	r3, [r7, #32]
 5531 00f8 0133     		adds	r3, r3, #1
 5532 00fa 3B62     		str	r3, [r7, #32]
 5533              	.L371:
1738:..\src/interruptions.c ****         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 131


 5534              		.loc 1 1738 0 is_stmt 0 discriminator 1
 5535 00fc 3B6A     		ldr	r3, [r7, #32]
 5536 00fe 022B     		cmp	r3, #2
 5537 0100 CDDD     		ble	.L373
 5538              	.LBE10:
1745:..\src/interruptions.c ****         }
1746:..\src/interruptions.c ****     }
1747:..\src/interruptions.c ****     
1748:..\src/interruptions.c ****     // S = SIGN BIT
1749:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1750:..\src/interruptions.c ****     // 0 = 0 BIT
1751:..\src/interruptions.c ****     // C = CONTROL BIT
1752:..\src/interruptions.c ****     
1753:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5539              		.loc 1 1753 0 is_stmt 1
 5540 0102 0023     		movs	r3, #0
 5541 0104 87F82F30 		strb	r3, [r7, #47]
 5542 0108 35E3     		b	.L374
 5543              	.L395:
1754:..\src/interruptions.c ****         
1755:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5544              		.loc 1 1755 0
 5545 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5546 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5547 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5548 0114 9B00     		lsls	r3, r3, #2
 5549 0116 07F13001 		add	r1, r7, #48
 5550 011a 0B44     		add	r3, r3, r1
 5551 011c 53F8281C 		ldr	r1, [r3, #-40]
 5552 0120 574C     		ldr	r4, .L402+24
 5553 0122 1346     		mov	r3, r2
 5554 0124 9B00     		lsls	r3, r3, #2
 5555 0126 1344     		add	r3, r3, r2
 5556 0128 0344     		add	r3, r3, r0
 5557 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1756:..\src/interruptions.c ****         
1757:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5558              		.loc 1 1757 0
 5559 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5560 0132 9B00     		lsls	r3, r3, #2
 5561 0134 07F13002 		add	r2, r7, #48
 5562 0138 1344     		add	r3, r3, r2
 5563 013a 53F8283C 		ldr	r3, [r3, #-40]
 5564 013e 99B2     		uxth	r1, r3
 5565 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5566 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5567 0146 4F4C     		ldr	r4, .L402+28
 5568 0148 1346     		mov	r3, r2
 5569 014a 5B00     		lsls	r3, r3, #1
 5570 014c 1344     		add	r3, r3, r2
 5571 014e 9B00     		lsls	r3, r3, #2
 5572 0150 0344     		add	r3, r3, r0
 5573 0152 6633     		adds	r3, r3, #102
 5574 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5575 0158 9BB2     		uxth	r3, r3
 5576 015a CB1A     		subs	r3, r1, r3
 5577 015c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 132


 5578 015e BB85     		strh	r3, [r7, #44]	@ movhi
1758:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5579              		.loc 1 1758 0
 5580 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5581 0164 002B     		cmp	r3, #0
 5582 0166 04DA     		bge	.L375
1759:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5583              		.loc 1 1759 0
 5584 0168 BB8D     		ldrh	r3, [r7, #44]
 5585 016a 03F58053 		add	r3, r3, #4096
 5586 016e 9BB2     		uxth	r3, r3
 5587 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5588              	.L375:
1760:..\src/interruptions.c ****         }       // Range [0, 4096]
1761:..\src/interruptions.c **** 
1762:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5589              		.loc 1 1762 0
 5590 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5591 0176 B3F5006F 		cmp	r3, #2048
 5592 017a 04DB     		blt	.L376
1763:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5593              		.loc 1 1763 0
 5594 017c BB8D     		ldrh	r3, [r7, #44]
 5595 017e A3F58053 		sub	r3, r3, #4096
 5596 0182 9BB2     		uxth	r3, r3
 5597 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5598              	.L376:
1764:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1765:..\src/interruptions.c **** 
1766:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5599              		.loc 1 1766 0
 5600 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5601 018a 1B01     		lsls	r3, r3, #4
 5602 018c FB61     		str	r3, [r7, #28]
1767:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5603              		.loc 1 1767 0
 5604 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5605 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5606 0194 3C48     		ldr	r0, .L402+32
 5607 0196 1346     		mov	r3, r2
 5608 0198 5B00     		lsls	r3, r3, #1
 5609 019a 1344     		add	r3, r3, r2
 5610 019c 0B44     		add	r3, r3, r1
 5611 019e FA69     		ldr	r2, [r7, #28]
 5612 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1768:..\src/interruptions.c **** 
1769:..\src/interruptions.c ****         // Initialize last_value_encoder
1770:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5613              		.loc 1 1770 0
 5614 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5615 01a6 394A     		ldr	r2, .L402+36
 5616 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5617 01aa 002B     		cmp	r3, #0
 5618 01ac 12D0     		beq	.L377
1771:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5619              		.loc 1 1771 0
 5620 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 133


 5621 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5622 01b4 2D48     		ldr	r0, .L402+4
 5623 01b6 1346     		mov	r3, r2
 5624 01b8 5B00     		lsls	r3, r3, #1
 5625 01ba 1344     		add	r3, r3, r2
 5626 01bc 0B44     		add	r3, r3, r1
 5627 01be FA69     		ldr	r2, [r7, #28]
 5628 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1772:..\src/interruptions.c ****             if (index == 2)
 5629              		.loc 1 1772 0
 5630 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5631 01c8 022B     		cmp	r3, #2
 5632 01ca 03D1     		bne	.L377
1773:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5633              		.loc 1 1773 0
 5634 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5635 01ce 2F4A     		ldr	r2, .L402+36
 5636 01d0 0021     		movs	r1, #0
 5637 01d2 D154     		strb	r1, [r2, r3]
 5638              	.L377:
1774:..\src/interruptions.c ****         }
1775:..\src/interruptions.c **** 
1776:..\src/interruptions.c ****         // Take care of rotations
1777:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5639              		.loc 1 1777 0
 5640 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5641 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5642 01da 2448     		ldr	r0, .L402+4
 5643 01dc 1346     		mov	r3, r2
 5644 01de 5B00     		lsls	r3, r3, #1
 5645 01e0 1344     		add	r3, r3, r2
 5646 01e2 0B44     		add	r3, r3, r1
 5647 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5648 01e8 FA69     		ldr	r2, [r7, #28]
 5649 01ea D31A     		subs	r3, r2, r3
 5650 01ec BB61     		str	r3, [r7, #24]
1778:..\src/interruptions.c **** 
1779:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1780:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1781:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1782:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1783:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1784:..\src/interruptions.c ****         //                                               |           |
1785:..\src/interruptions.c ****         //                                           24575           -24576
1786:..\src/interruptions.c ****         //                                               |___________|
1787:..\src/interruptions.c ****         //                                                   49152
1788:..\src/interruptions.c **** 
1789:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1790:..\src/interruptions.c ****         // and update the variable only if the difference between
1791:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1792:..\src/interruptions.c **** 
1793:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1794:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1795:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****         if (value_diff > 49152)
 5651              		.loc 1 1797 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 134


 5652 01ee BB69     		ldr	r3, [r7, #24]
 5653 01f0 B3F5404F 		cmp	r3, #49152
 5654 01f4 19DD     		ble	.L378
1798:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5655              		.loc 1 1798 0
 5656 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5657 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5658 01fc 2448     		ldr	r0, .L402+40
 5659 01fe 3421     		movs	r1, #52
 5660 0200 01FB02F1 		mul	r1, r1, r2
 5661 0204 0144     		add	r1, r1, r0
 5662 0206 1944     		add	r1, r1, r3
 5663 0208 1831     		adds	r1, r1, #24
 5664 020a 91F90010 		ldrsb	r1, [r1]
 5665 020e C9B2     		uxtb	r1, r1
 5666 0210 0139     		subs	r1, r1, #1
 5667 0212 C9B2     		uxtb	r1, r1
 5668 0214 4CB2     		sxtb	r4, r1
 5669 0216 1E49     		ldr	r1, .L402+40
 5670 0218 3420     		movs	r0, #52
 5671 021a 00FB02F2 		mul	r2, r0, r2
 5672 021e 0A44     		add	r2, r2, r1
 5673 0220 1344     		add	r3, r3, r2
 5674 0222 1833     		adds	r3, r3, #24
 5675 0224 2246     		mov	r2, r4
 5676 0226 1A70     		strb	r2, [r3]
 5677 0228 5CE0     		b	.L379
 5678              	.L378:
1799:..\src/interruptions.c ****         else{ 
1800:..\src/interruptions.c ****             if (value_diff < -49152)
 5679              		.loc 1 1800 0
 5680 022a BB69     		ldr	r3, [r7, #24]
 5681 022c 13F5404F 		cmn	r3, #49152
 5682 0230 30DA     		bge	.L380
1801:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5683              		.loc 1 1801 0
 5684 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5685 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5686 0238 1548     		ldr	r0, .L402+40
 5687 023a 3421     		movs	r1, #52
 5688 023c 01FB02F1 		mul	r1, r1, r2
 5689 0240 0144     		add	r1, r1, r0
 5690 0242 1944     		add	r1, r1, r3
 5691 0244 1831     		adds	r1, r1, #24
 5692 0246 91F90010 		ldrsb	r1, [r1]
 5693 024a C9B2     		uxtb	r1, r1
 5694 024c 0131     		adds	r1, r1, #1
 5695 024e C9B2     		uxtb	r1, r1
 5696 0250 4CB2     		sxtb	r4, r1
 5697 0252 0F49     		ldr	r1, .L402+40
 5698 0254 3420     		movs	r0, #52
 5699 0256 00FB02F2 		mul	r2, r0, r2
 5700 025a 0A44     		add	r2, r2, r1
 5701 025c 1344     		add	r3, r3, r2
 5702 025e 1833     		adds	r3, r3, #24
 5703 0260 2246     		mov	r2, r4
 5704 0262 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 135


 5705 0264 3EE0     		b	.L379
 5706              	.L403:
 5707 0266 00BF     		.align	2
 5708              	.L402:
 5709 0268 00000000 		.word	reset_last_value_flag
 5710 026c E0000000 		.word	last_value_encoder.10619
 5711 0270 00000000 		.word	N_Encoder_Line_Connected
 5712 0274 00000000 		.word	c_mem
 5713 0278 00000000 		.word	Encoder_Check
 5714 027c 00000000 		.word	Encoder_Value
 5715 0280 00000000 		.word	data_encoder_raw
 5716 0284 00000000 		.word	g_mem
 5717 0288 F8000000 		.word	comp_value_encoder.10620
 5718 028c 04000000 		.word	only_first_time.10622
 5719 0290 00000000 		.word	g_meas
 5720              	.L380:
1802:..\src/interruptions.c ****             else{
1803:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5721              		.loc 1 1803 0
 5722 0294 BB69     		ldr	r3, [r7, #24]
 5723 0296 002B     		cmp	r3, #0
 5724 0298 B8BF     		it	lt
 5725 029a 5B42     		rsblt	r3, r3, #0
 5726 029c B3F5804F 		cmp	r3, #16384
 5727 02a0 20DD     		ble	.L379
1804:..\src/interruptions.c ****                     error[n_line][index]++;
 5728              		.loc 1 1804 0
 5729 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5730 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5731 02a8 9B48     		ldr	r0, .L404
 5732 02aa 1346     		mov	r3, r2
 5733 02ac 5B00     		lsls	r3, r3, #1
 5734 02ae 1344     		add	r3, r3, r2
 5735 02b0 0344     		add	r3, r3, r0
 5736 02b2 0B44     		add	r3, r3, r1
 5737 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5738 02b6 0133     		adds	r3, r3, #1
 5739 02b8 DCB2     		uxtb	r4, r3
 5740 02ba 9748     		ldr	r0, .L404
 5741 02bc 1346     		mov	r3, r2
 5742 02be 5B00     		lsls	r3, r3, #1
 5743 02c0 1344     		add	r3, r3, r2
 5744 02c2 0344     		add	r3, r3, r0
 5745 02c4 0B44     		add	r3, r3, r1
 5746 02c6 2246     		mov	r2, r4
 5747 02c8 1A70     		strb	r2, [r3]
1805:..\src/interruptions.c ****                                 
1806:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5748              		.loc 1 1806 0
 5749 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5750 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5751 02d0 9148     		ldr	r0, .L404
 5752 02d2 1346     		mov	r3, r2
 5753 02d4 5B00     		lsls	r3, r3, #1
 5754 02d6 1344     		add	r3, r3, r2
 5755 02d8 0344     		add	r3, r3, r0
 5756 02da 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 136


 5757 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5758 02de 092B     		cmp	r3, #9
 5759 02e0 40F28882 		bls	.L401
 5760              	.L379:
1807:..\src/interruptions.c ****                         // Discard
1808:..\src/interruptions.c ****                         return;
1809:..\src/interruptions.c ****                 }
1810:..\src/interruptions.c ****             }
1811:..\src/interruptions.c ****         }
1812:..\src/interruptions.c **** 
1813:..\src/interruptions.c ****         error[n_line][index] = 0;
 5761              		.loc 1 1813 0
 5762 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5763 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5764 02ea 8B48     		ldr	r0, .L404
 5765 02ec 1346     		mov	r3, r2
 5766 02ee 5B00     		lsls	r3, r3, #1
 5767 02f0 1344     		add	r3, r3, r2
 5768 02f2 0344     		add	r3, r3, r0
 5769 02f4 0B44     		add	r3, r3, r1
 5770 02f6 0022     		movs	r2, #0
 5771 02f8 1A70     		strb	r2, [r3]
1814:..\src/interruptions.c ****         
1815:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5772              		.loc 1 1815 0
 5773 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5774 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5775 0300 8648     		ldr	r0, .L404+4
 5776 0302 1346     		mov	r3, r2
 5777 0304 5B00     		lsls	r3, r3, #1
 5778 0306 1344     		add	r3, r3, r2
 5779 0308 0B44     		add	r3, r3, r1
 5780 030a FA69     		ldr	r2, [r7, #28]
 5781 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1816:..\src/interruptions.c **** 
1817:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5782              		.loc 1 1817 0
 5783 0310 FB69     		ldr	r3, [r7, #28]
 5784 0312 BB62     		str	r3, [r7, #40]
1818:..\src/interruptions.c **** 
1819:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5785              		.loc 1 1819 0
 5786 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5787 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5788 031a 8149     		ldr	r1, .L404+8
 5789 031c 3420     		movs	r0, #52
 5790 031e 00FB02F2 		mul	r2, r0, r2
 5791 0322 0A44     		add	r2, r2, r1
 5792 0324 1344     		add	r3, r3, r2
 5793 0326 1833     		adds	r3, r3, #24
 5794 0328 93F90030 		ldrsb	r3, [r3]
 5795 032c 1B04     		lsls	r3, r3, #16
 5796 032e BA6A     		ldr	r2, [r7, #40]
 5797 0330 1344     		add	r3, r3, r2
 5798 0332 BB62     		str	r3, [r7, #40]
1820:..\src/interruptions.c ****         
1821:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 137


 5799              		.loc 1 1821 0
 5800 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5801 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5802 033a 7A48     		ldr	r0, .L404+12
 5803 033c 1346     		mov	r3, r2
 5804 033e 5B00     		lsls	r3, r3, #1
 5805 0340 1344     		add	r3, r3, r2
 5806 0342 9B00     		lsls	r3, r3, #2
 5807 0344 0B44     		add	r3, r3, r1
 5808 0346 6833     		adds	r3, r3, #104
 5809 0348 9B00     		lsls	r3, r3, #2
 5810 034a 0344     		add	r3, r3, r0
 5811 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5812 034e 4FF07E51 		mov	r1, #1065353216
 5813 0352 1846     		mov	r0, r3
 5814 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5815 0358 0346     		mov	r3, r0
 5816 035a 002B     		cmp	r3, #0
 5817 035c 1AD1     		bne	.L382
1822:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5818              		.loc 1 1822 0
 5819 035e B86A     		ldr	r0, [r7, #40]
 5820 0360 FFF7FEFF 		bl	__aeabi_i2f
 5821 0364 0446     		mov	r4, r0
 5822 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5823 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5824 036c 6D48     		ldr	r0, .L404+12
 5825 036e 1346     		mov	r3, r2
 5826 0370 5B00     		lsls	r3, r3, #1
 5827 0372 1344     		add	r3, r3, r2
 5828 0374 9B00     		lsls	r3, r3, #2
 5829 0376 0B44     		add	r3, r3, r1
 5830 0378 6833     		adds	r3, r3, #104
 5831 037a 9B00     		lsls	r3, r3, #2
 5832 037c 0344     		add	r3, r3, r0
 5833 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5834 0380 1946     		mov	r1, r3
 5835 0382 2046     		mov	r0, r4
 5836 0384 FFF7FEFF 		bl	__aeabi_fmul
 5837 0388 0346     		mov	r3, r0
 5838 038a 1846     		mov	r0, r3
 5839 038c FFF7FEFF 		bl	__aeabi_f2iz
 5840 0390 0346     		mov	r3, r0
 5841 0392 BB62     		str	r3, [r7, #40]
 5842              	.L382:
1823:..\src/interruptions.c ****         }
1824:..\src/interruptions.c **** 
1825:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5843              		.loc 1 1825 0
 5844 0394 634B     		ldr	r3, .L404+12
 5845 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5846 039a 002B     		cmp	r3, #0
 5847 039c 0BD1     		bne	.L384
1826:..\src/interruptions.c ****             // Right / Left hand turn
1827:..\src/interruptions.c ****             if (index == 0) {
 5848              		.loc 1 1827 0
 5849 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 138


 5850 03a2 002B     		cmp	r3, #0
 5851 03a4 07D1     		bne	.L384
1828:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5852              		.loc 1 1828 0
 5853 03a6 5F4B     		ldr	r3, .L404+12
 5854 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5855 03ac 002B     		cmp	r3, #0
 5856 03ae 02D1     		bne	.L384
1829:..\src/interruptions.c ****                     value_encoder *= -1;        
 5857              		.loc 1 1829 0
 5858 03b0 BB6A     		ldr	r3, [r7, #40]
 5859 03b2 5B42     		negs	r3, r3
 5860 03b4 BB62     		str	r3, [r7, #40]
 5861              	.L384:
1830:..\src/interruptions.c ****                 }
1831:..\src/interruptions.c ****             }
1832:..\src/interruptions.c ****         } 
1833:..\src/interruptions.c ****         
1834:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5862              		.loc 1 1834 0
 5863 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5864 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5865 03bc 5848     		ldr	r0, .L404+8
 5866 03be 1346     		mov	r3, r2
 5867 03c0 5B00     		lsls	r3, r3, #1
 5868 03c2 1344     		add	r3, r3, r2
 5869 03c4 9B00     		lsls	r3, r3, #2
 5870 03c6 1344     		add	r3, r3, r2
 5871 03c8 0B44     		add	r3, r3, r1
 5872 03ca BA6A     		ldr	r2, [r7, #40]
 5873 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1835:..\src/interruptions.c ****     
1836:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5874              		.loc 1 1836 0
 5875 03d0 BA6A     		ldr	r2, [r7, #40]
 5876 03d2 1346     		mov	r3, r2
 5877 03d4 9B00     		lsls	r3, r3, #2
 5878 03d6 1344     		add	r3, r3, r2
 5879 03d8 5B00     		lsls	r3, r3, #1
 5880 03da 9918     		adds	r1, r3, r2
 5881 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5882 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5883 03e2 514C     		ldr	r4, .L404+16
 5884 03e4 1346     		mov	r3, r2
 5885 03e6 5B00     		lsls	r3, r3, #1
 5886 03e8 1344     		add	r3, r3, r2
 5887 03ea 0344     		add	r3, r3, r0
 5888 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5889 03f0 6FF01102 		mvn	r2, #17
 5890 03f4 02FB03F3 		mul	r3, r2, r3
 5891 03f8 1944     		add	r1, r1, r3
 5892 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5893 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5894 0400 4A4C     		ldr	r4, .L404+20
 5895 0402 1346     		mov	r3, r2
 5896 0404 5B00     		lsls	r3, r3, #1
 5897 0406 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 139


 5898 0408 0344     		add	r3, r3, r0
 5899 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5900 040e 1346     		mov	r3, r2
 5901 0410 DB00     		lsls	r3, r3, #3
 5902 0412 1344     		add	r3, r3, r2
 5903 0414 1944     		add	r1, r1, r3
 5904 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5905 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5906 041c 444C     		ldr	r4, .L404+24
 5907 041e 1346     		mov	r3, r2
 5908 0420 5B00     		lsls	r3, r3, #1
 5909 0422 1344     		add	r3, r3, r2
 5910 0424 0344     		add	r3, r3, r0
 5911 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5912 042a 5B00     		lsls	r3, r3, #1
 5913 042c C81A     		subs	r0, r1, r3
 5914 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5915 0432 DB00     		lsls	r3, r3, #3
 5916 0434 3F4A     		ldr	r2, .L404+28
 5917 0436 1344     		add	r3, r3, r2
 5918 0438 1946     		mov	r1, r3
 5919 043a FFF7FEFF 		bl	filter
 5920 043e 0346     		mov	r3, r0
 5921 0440 1BB2     		sxth	r3, r3
 5922 0442 7B61     		str	r3, [r7, #20]
1837:..\src/interruptions.c **** 
1838:..\src/interruptions.c ****         //Update current speed
1839:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5923              		.loc 1 1839 0
 5924 0444 7869     		ldr	r0, [r7, #20]
 5925 0446 FFF7FEFF 		bl	__aeabi_i2f
 5926 044a 0446     		mov	r4, r0
 5927 044c 3A4B     		ldr	r3, .L404+32
 5928 044e 1B68     		ldr	r3, [r3]	@ float
 5929 0450 3A49     		ldr	r1, .L404+36
 5930 0452 1846     		mov	r0, r3
 5931 0454 FFF7FEFF 		bl	__aeabi_fmul
 5932 0458 0346     		mov	r3, r0
 5933 045a 1946     		mov	r1, r3
 5934 045c 2046     		mov	r0, r4
 5935 045e FFF7FEFF 		bl	__aeabi_fdiv
 5936 0462 0346     		mov	r3, r0
 5937 0464 1846     		mov	r0, r3
 5938 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5939 046a 0346     		mov	r3, r0
 5940 046c 7B61     		str	r3, [r7, #20]
1840:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5941              		.loc 1 1840 0
 5942 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5943 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5944 0474 2A48     		ldr	r0, .L404+8
 5945 0476 1346     		mov	r3, r2
 5946 0478 5B00     		lsls	r3, r3, #1
 5947 047a 1344     		add	r3, r3, r2
 5948 047c 9B00     		lsls	r3, r3, #2
 5949 047e 1344     		add	r3, r3, r2
 5950 0480 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 140


 5951 0482 0633     		adds	r3, r3, #6
 5952 0484 9B00     		lsls	r3, r3, #2
 5953 0486 0344     		add	r3, r3, r0
 5954 0488 7A69     		ldr	r2, [r7, #20]
 5955 048a 5A60     		str	r2, [r3, #4]
1841:..\src/interruptions.c **** 
1842:..\src/interruptions.c ****         // update old velocity and acceleration values
1843:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5956              		.loc 1 1843 0
 5957 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5958 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5959 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5960 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5961 0498 244D     		ldr	r5, .L404+20
 5962 049a 0B46     		mov	r3, r1
 5963 049c 5B00     		lsls	r3, r3, #1
 5964 049e 0B44     		add	r3, r3, r1
 5965 04a0 2344     		add	r3, r3, r4
 5966 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5967 04a6 224C     		ldr	r4, .L404+24
 5968 04a8 1346     		mov	r3, r2
 5969 04aa 5B00     		lsls	r3, r3, #1
 5970 04ac 1344     		add	r3, r3, r2
 5971 04ae 0344     		add	r3, r3, r0
 5972 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1844:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5973              		.loc 1 1844 0
 5974 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5975 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5976 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5977 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5978 04c0 194D     		ldr	r5, .L404+16
 5979 04c2 0B46     		mov	r3, r1
 5980 04c4 5B00     		lsls	r3, r3, #1
 5981 04c6 0B44     		add	r3, r3, r1
 5982 04c8 2344     		add	r3, r3, r4
 5983 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5984 04ce 174C     		ldr	r4, .L404+20
 5985 04d0 1346     		mov	r3, r2
 5986 04d2 5B00     		lsls	r3, r3, #1
 5987 04d4 1344     		add	r3, r3, r2
 5988 04d6 0344     		add	r3, r3, r0
 5989 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1845:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5990              		.loc 1 1845 0
 5991 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5992 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5993 04e2 1148     		ldr	r0, .L404+16
 5994 04e4 1346     		mov	r3, r2
 5995 04e6 5B00     		lsls	r3, r3, #1
 5996 04e8 1344     		add	r3, r3, r2
 5997 04ea 0B44     		add	r3, r3, r1
 5998 04ec BA6A     		ldr	r2, [r7, #40]
 5999 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1846:..\src/interruptions.c **** 
1847:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1848:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 141


 6000              		.loc 1 1848 0
 6001 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6002 04f4 124A     		ldr	r2, .L404+40
 6003 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6004 04f8 002B     		cmp	r3, #0
 6005 04fa 40F03781 		bne	.L385
1849:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 6006              		.loc 1 1849 0
 6007 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6008 0500 104A     		ldr	r2, .L404+44
 6009 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6010 0504 352B     		cmp	r3, #53
 6011 0506 1FD8     		bhi	.L386
1850:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 6012              		.loc 1 1850 0
 6013 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6014 050a 0E4A     		ldr	r2, .L404+44
 6015 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 6016 050e 0132     		adds	r2, r2, #1
 6017 0510 D1B2     		uxtb	r1, r2
 6018 0512 0C4A     		ldr	r2, .L404+44
 6019 0514 D154     		strb	r1, [r2, r3]
 6020 0516 29E1     		b	.L385
 6021              	.L405:
 6022              		.align	2
 6023              	.L404:
 6024 0518 10010000 		.word	error.10621
 6025 051c E0000000 		.word	last_value_encoder.10619
 6026 0520 00000000 		.word	g_meas
 6027 0524 00000000 		.word	c_mem
 6028 0528 18010000 		.word	v_value.10626
 6029 052c 30010000 		.word	vv_value.10627
 6030 0530 48010000 		.word	vvv_value.10628
 6031 0534 00000000 		.word	filt_vel
 6032 0538 00000000 		.word	cycle_time
 6033 053c 0000C040 		.word	1086324736
 6034 0540 00000000 		.word	pos_reconstruct
 6035 0544 60010000 		.word	one_time_execute.10624
 6036              	.L386:
1851:..\src/interruptions.c ****             else {
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****                 //Double encoder translation
1854:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 6037              		.loc 1 1854 0
 6038 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6039 054a AC49     		ldr	r1, .L406
 6040 054c 1346     		mov	r3, r2
 6041 054e 5B00     		lsls	r3, r3, #1
 6042 0550 1344     		add	r3, r3, r2
 6043 0552 1B01     		lsls	r3, r3, #4
 6044 0554 0B44     		add	r3, r3, r1
 6045 0556 03F5D873 		add	r3, r3, #432
 6046 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6047 055c 002B     		cmp	r3, #0
 6048 055e 5ED0     		beq	.L387
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6049              		.loc 1 1855 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 142


 6050 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6051 0562 A749     		ldr	r1, .L406+4
 6052 0564 1346     		mov	r3, r2
 6053 0566 5B00     		lsls	r3, r3, #1
 6054 0568 1344     		add	r3, r3, r2
 6055 056a 9B00     		lsls	r3, r3, #2
 6056 056c 0B44     		add	r3, r3, r1
 6057 056e 1868     		ldr	r0, [r3]
 6058 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6059 0572 A349     		ldr	r1, .L406+4
 6060 0574 1346     		mov	r3, r2
 6061 0576 5B00     		lsls	r3, r3, #1
 6062 0578 1344     		add	r3, r3, r2
 6063 057a 9B00     		lsls	r3, r3, #2
 6064 057c 0B44     		add	r3, r3, r1
 6065 057e 0433     		adds	r3, r3, #4
 6066 0580 1C68     		ldr	r4, [r3]
1856:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 6067              		.loc 1 1856 0
 6068 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6069 0584 9D49     		ldr	r1, .L406
 6070 0586 1346     		mov	r3, r2
 6071 0588 5B00     		lsls	r3, r3, #1
 6072 058a 1344     		add	r3, r3, r2
 6073 058c 1B01     		lsls	r3, r3, #4
 6074 058e 0B44     		add	r3, r3, r1
 6075 0590 03F2B513 		addw	r3, r3, #437
 6076 0594 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6077              		.loc 1 1855 0
 6078 0598 1D46     		mov	r5, r3
 6079              		.loc 1 1856 0
 6080 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6081 059c 9749     		ldr	r1, .L406
 6082 059e 1346     		mov	r3, r2
 6083 05a0 5B00     		lsls	r3, r3, #1
 6084 05a2 1344     		add	r3, r3, r2
 6085 05a4 1B01     		lsls	r3, r3, #4
 6086 05a6 0B44     		add	r3, r3, r1
 6087 05a8 03F5DB73 		add	r3, r3, #438
 6088 05ac 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6089              		.loc 1 1855 0
 6090 05b0 1E46     		mov	r6, r3
 6091              		.loc 1 1856 0
 6092 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6093 05b4 9149     		ldr	r1, .L406
 6094 05b6 1346     		mov	r3, r2
 6095 05b8 5B00     		lsls	r3, r3, #1
 6096 05ba 1344     		add	r3, r3, r2
 6097 05bc 1B01     		lsls	r3, r3, #4
 6098 05be 0B44     		add	r3, r3, r1
 6099 05c0 03F2B713 		addw	r3, r3, #439
 6100 05c4 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6101              		.loc 1 1855 0
 6102 05c8 0093     		str	r3, [sp]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 143


 6103 05ca 3346     		mov	r3, r6
 6104 05cc 2A46     		mov	r2, r5
 6105 05ce 2146     		mov	r1, r4
 6106 05d0 FFF7FEFF 		bl	calc_turns_fcn
 6107 05d4 0346     		mov	r3, r0
 6108 05d6 87F82730 		strb	r3, [r7, #39]
1857:..\src/interruptions.c **** 
1858:..\src/interruptions.c **** 
1859:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 6109              		.loc 1 1859 0
 6110 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6111 05dc 8749     		ldr	r1, .L406
 6112 05de 1346     		mov	r3, r2
 6113 05e0 5B00     		lsls	r3, r3, #1
 6114 05e2 1344     		add	r3, r3, r2
 6115 05e4 1B01     		lsls	r3, r3, #4
 6116 05e6 0B44     		add	r3, r3, r1
 6117 05e8 03F5D273 		add	r3, r3, #420
 6118 05ec 1B68     		ldr	r3, [r3]	@ float
 6119 05ee 4FF00001 		mov	r1, #0
 6120 05f2 1846     		mov	r0, r3
 6121 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 6122 05f8 0346     		mov	r3, r0
 6123 05fa 002B     		cmp	r3, #0
 6124 05fc 05D0     		beq	.L388
1860:..\src/interruptions.c ****                         init_rot = -init_rot;
 6125              		.loc 1 1860 0
 6126 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 6127 0602 5B42     		negs	r3, r3
 6128 0604 DBB2     		uxtb	r3, r3
 6129 0606 87F82730 		strb	r3, [r7, #39]
 6130              	.L388:
1861:..\src/interruptions.c ****                     
1862:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 6131              		.loc 1 1862 0
 6132 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6133 060c 7D4A     		ldr	r2, .L406+8
 6134 060e 3421     		movs	r1, #52
 6135 0610 01FB03F3 		mul	r3, r1, r3
 6136 0614 1344     		add	r3, r3, r2
 6137 0616 1833     		adds	r3, r3, #24
 6138 0618 97F82720 		ldrb	r2, [r7, #39]
 6139 061c 1A70     		strb	r2, [r3]
 6140              	.L387:
1863:..\src/interruptions.c ****                 }    
1864:..\src/interruptions.c **** 
1865:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 6141              		.loc 1 1865 0
 6142 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6143 0620 7649     		ldr	r1, .L406
 6144 0622 1346     		mov	r3, r2
 6145 0624 5B00     		lsls	r3, r3, #1
 6146 0626 1344     		add	r3, r3, r2
 6147 0628 1B01     		lsls	r3, r3, #4
 6148 062a 0B44     		add	r3, r3, r1
 6149 062c 03F5D273 		add	r3, r3, #420
 6150 0630 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 144


 6151 0632 4FF07E51 		mov	r1, #1065353216
 6152 0636 1846     		mov	r0, r3
 6153 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 6154 063c 0346     		mov	r3, r0
 6155 063e 002B     		cmp	r3, #0
 6156 0640 22D1     		bne	.L390
1866:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 6157              		.loc 1 1866 0
 6158 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6159 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6160 0646 6F4A     		ldr	r2, .L406+8
 6161 0648 3421     		movs	r1, #52
 6162 064a 01FB03F3 		mul	r3, r1, r3
 6163 064e 1344     		add	r3, r3, r2
 6164 0650 1B68     		ldr	r3, [r3]
 6165 0652 1846     		mov	r0, r3
 6166 0654 FFF7FEFF 		bl	__aeabi_i2f
 6167 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6168 065a 6849     		ldr	r1, .L406
 6169 065c 1346     		mov	r3, r2
 6170 065e 5B00     		lsls	r3, r3, #1
 6171 0660 1344     		add	r3, r3, r2
 6172 0662 1B01     		lsls	r3, r3, #4
 6173 0664 0B44     		add	r3, r3, r1
 6174 0666 03F5D273 		add	r3, r3, #420
 6175 066a 1B68     		ldr	r3, [r3]	@ float
 6176 066c 1946     		mov	r1, r3
 6177 066e FFF7FEFF 		bl	__aeabi_fdiv
 6178 0672 0346     		mov	r3, r0
 6179 0674 1846     		mov	r0, r3
 6180 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6181 067a 0146     		mov	r1, r0
 6182 067c 614A     		ldr	r2, .L406+8
 6183 067e 3423     		movs	r3, #52
 6184 0680 03FB04F3 		mul	r3, r3, r4
 6185 0684 1344     		add	r3, r3, r2
 6186 0686 1960     		str	r1, [r3]
 6187              	.L390:
1867:..\src/interruptions.c ****                 
1868:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6188              		.loc 1 1868 0
 6189 0688 97F92730 		ldrsb	r3, [r7, #39]
 6190 068c 1B04     		lsls	r3, r3, #16
 6191 068e BA6A     		ldr	r2, [r7, #40]
 6192 0690 1344     		add	r3, r3, r2
 6193 0692 BB62     		str	r3, [r7, #40]
1869:..\src/interruptions.c ****        
1870:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6194              		.loc 1 1870 0
 6195 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6196 0696 5949     		ldr	r1, .L406
 6197 0698 1346     		mov	r3, r2
 6198 069a 5B00     		lsls	r3, r3, #1
 6199 069c 1344     		add	r3, r3, r2
 6200 069e 1B01     		lsls	r3, r3, #4
 6201 06a0 0B44     		add	r3, r3, r1
 6202 06a2 03F5D273 		add	r3, r3, #420
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 145


 6203 06a6 1B68     		ldr	r3, [r3]	@ float
 6204 06a8 4FF07E51 		mov	r1, #1065353216
 6205 06ac 1846     		mov	r0, r3
 6206 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6207 06b2 0346     		mov	r3, r0
 6208 06b4 002B     		cmp	r3, #0
 6209 06b6 15D1     		bne	.L392
1871:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6210              		.loc 1 1871 0
 6211 06b8 B86A     		ldr	r0, [r7, #40]
 6212 06ba FFF7FEFF 		bl	__aeabi_i2f
 6213 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6214 06c0 4E49     		ldr	r1, .L406
 6215 06c2 1346     		mov	r3, r2
 6216 06c4 5B00     		lsls	r3, r3, #1
 6217 06c6 1344     		add	r3, r3, r2
 6218 06c8 1B01     		lsls	r3, r3, #4
 6219 06ca 0B44     		add	r3, r3, r1
 6220 06cc 03F5D273 		add	r3, r3, #420
 6221 06d0 1B68     		ldr	r3, [r3]	@ float
 6222 06d2 1946     		mov	r1, r3
 6223 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6224 06d8 0346     		mov	r3, r0
 6225 06da 1846     		mov	r0, r3
 6226 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6227 06e0 0346     		mov	r3, r0
 6228 06e2 BB62     		str	r3, [r7, #40]
 6229              	.L392:
1872:..\src/interruptions.c ****                 }
1873:..\src/interruptions.c **** 
1874:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6230              		.loc 1 1874 0
 6231 06e4 454B     		ldr	r3, .L406
 6232 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6233 06ea 002B     		cmp	r3, #0
 6234 06ec 07D1     		bne	.L394
1875:..\src/interruptions.c ****                     // Right / Left hand turn
1876:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6235              		.loc 1 1876 0
 6236 06ee 434B     		ldr	r3, .L406
 6237 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6238 06f4 002B     		cmp	r3, #0
 6239 06f6 02D1     		bne	.L394
1877:..\src/interruptions.c ****                         value_encoder *= -1;        
 6240              		.loc 1 1877 0
 6241 06f8 BB6A     		ldr	r3, [r7, #40]
 6242 06fa 5B42     		negs	r3, r3
 6243 06fc BB62     		str	r3, [r7, #40]
 6244              	.L394:
1878:..\src/interruptions.c ****                     }
1879:..\src/interruptions.c ****                 }
1880:..\src/interruptions.c ****          
1881:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6245              		.loc 1 1881 0
 6246 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6247 0700 404A     		ldr	r2, .L406+8
 6248 0702 3421     		movs	r1, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 146


 6249 0704 01FB03F3 		mul	r3, r1, r3
 6250 0708 1344     		add	r3, r3, r2
 6251 070a BA6A     		ldr	r2, [r7, #40]
 6252 070c 1A60     		str	r2, [r3]
1882:..\src/interruptions.c ****                 
1883:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6253              		.loc 1 1883 0
 6254 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6255 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6256 0712 3C49     		ldr	r1, .L406+8
 6257 0714 3420     		movs	r0, #52
 6258 0716 00FB02F2 		mul	r2, r0, r2
 6259 071a 0A44     		add	r2, r2, r1
 6260 071c 1268     		ldr	r2, [r2]
 6261 071e 3A49     		ldr	r1, .L406+12
 6262 0720 1B01     		lsls	r3, r3, #4
 6263 0722 0B44     		add	r3, r3, r1
 6264 0724 1A60     		str	r2, [r3]
1884:..\src/interruptions.c **** 
1885:..\src/interruptions.c ****                 // If necessary activate motor
1886:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6265              		.loc 1 1886 0
 6266 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6267 0728 384A     		ldr	r2, .L406+16
 6268 072a 0121     		movs	r1, #1
 6269 072c D154     		strb	r1, [r2, r3]
1887:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1888:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6270              		.loc 1 1888 0
 6271 072e B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6272 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6273 0732 3248     		ldr	r0, .L406
 6274 0734 1346     		mov	r3, r2
 6275 0736 DB00     		lsls	r3, r3, #3
 6276 0738 9B1A     		subs	r3, r3, r2
 6277 073a 1B01     		lsls	r3, r3, #4
 6278 073c 0344     		add	r3, r3, r0
 6279 073e E033     		adds	r3, r3, #224
 6280 0740 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6281 0742 314A     		ldr	r2, .L406+12
 6282 0744 0B01     		lsls	r3, r1, #4
 6283 0746 1344     		add	r3, r3, r2
 6284 0748 0C33     		adds	r3, r3, #12
 6285 074a 0246     		mov	r2, r0
 6286 074c 1A70     		strb	r2, [r3]
1889:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6287              		.loc 1 1889 0
 6288 074e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6289 0750 2D4A     		ldr	r2, .L406+12
 6290 0752 1B01     		lsls	r3, r3, #4
 6291 0754 1344     		add	r3, r3, r2
 6292 0756 0C33     		adds	r3, r3, #12
 6293 0758 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6294 075a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6295 075c 1146     		mov	r1, r2
 6296 075e 1846     		mov	r0, r3
 6297 0760 FFF7FEFF 		bl	enable_motor
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 147


1890:..\src/interruptions.c ****                 
1891:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6298              		.loc 1 1891 0
 6299 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6300 0766 2A4A     		ldr	r2, .L406+20
 6301 0768 0121     		movs	r1, #1
 6302 076a D154     		strb	r1, [r2, r3]
 6303              	.L385:
1753:..\src/interruptions.c ****         
 6304              		.loc 1 1753 0 discriminator 2
 6305 076c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6306 0770 0133     		adds	r3, r3, #1
 6307 0772 87F82F30 		strb	r3, [r7, #47]
 6308              	.L374:
1753:..\src/interruptions.c ****         
 6309              		.loc 1 1753 0 is_stmt 0 discriminator 1
 6310 0776 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6311 077a 022B     		cmp	r3, #2
 6312 077c 7FF6C5AC 		bls	.L395
1892:..\src/interruptions.c ****             }
1893:..\src/interruptions.c ****         }
1894:..\src/interruptions.c ****     } 
1895:..\src/interruptions.c **** 
1896:..\src/interruptions.c **** 	
1897:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1898:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6313              		.loc 1 1898 0 is_stmt 1
 6314 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6315 0782 224A     		ldr	r2, .L406+16
 6316 0784 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6317 0786 002B     		cmp	r3, #0
 6318 0788 35D0     		beq	.L365
1899:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6319              		.loc 1 1899 0
 6320 078a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6321 078c 214A     		ldr	r2, .L406+24
 6322 078e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6323 0792 0132     		adds	r2, r2, #1
 6324 0794 1F49     		ldr	r1, .L406+24
 6325 0796 41F82320 		str	r2, [r1, r3, lsl #2]
1900:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6326              		.loc 1 1900 0
 6327 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6328 079c 1D4A     		ldr	r2, .L406+24
 6329 079e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6330 07a2 B3F5FA5F 		cmp	r3, #8000
 6331 07a6 26D3     		bcc	.L365
1901:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6332              		.loc 1 1901 0
 6333 07a8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6334 07aa 174A     		ldr	r2, .L406+12
 6335 07ac 1B01     		lsls	r3, r3, #4
 6336 07ae 1344     		add	r3, r3, r2
 6337 07b0 0022     		movs	r2, #0
 6338 07b2 1A60     		str	r2, [r3]
1902:..\src/interruptions.c ****             
1903:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 148


1904:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6339              		.loc 1 1904 0
 6340 07b4 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6341 07b6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6342 07b8 1048     		ldr	r0, .L406
 6343 07ba 1346     		mov	r3, r2
 6344 07bc DB00     		lsls	r3, r3, #3
 6345 07be 9B1A     		subs	r3, r3, r2
 6346 07c0 1B01     		lsls	r3, r3, #4
 6347 07c2 0344     		add	r3, r3, r0
 6348 07c4 E033     		adds	r3, r3, #224
 6349 07c6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6350 07c8 0F4A     		ldr	r2, .L406+12
 6351 07ca 0B01     		lsls	r3, r1, #4
 6352 07cc 1344     		add	r3, r3, r2
 6353 07ce 0C33     		adds	r3, r3, #12
 6354 07d0 0246     		mov	r2, r0
 6355 07d2 1A70     		strb	r2, [r3]
1905:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6356              		.loc 1 1905 0
 6357 07d4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6358 07d6 0C4A     		ldr	r2, .L406+12
 6359 07d8 1B01     		lsls	r3, r3, #4
 6360 07da 1344     		add	r3, r3, r2
 6361 07dc 0C33     		adds	r3, r3, #12
 6362 07de 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6363 07e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6364 07e2 1146     		mov	r1, r2
 6365 07e4 1846     		mov	r0, r3
 6366 07e6 FFF7FEFF 		bl	enable_motor
1906:..\src/interruptions.c ****                         
1907:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6367              		.loc 1 1907 0
 6368 07ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6369 07ec 074A     		ldr	r2, .L406+16
 6370 07ee 0021     		movs	r1, #0
 6371 07f0 D154     		strb	r1, [r2, r3]
 6372 07f2 00E0     		b	.L365
 6373              	.L401:
1808:..\src/interruptions.c ****                 }
 6374              		.loc 1 1808 0
 6375 07f4 00BF     		nop
 6376              	.L365:
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     }
1910:..\src/interruptions.c ****  
1911:..\src/interruptions.c **** }
 6377              		.loc 1 1911 0
 6378 07f6 3437     		adds	r7, r7, #52
 6379              		.cfi_def_cfa_offset 20
 6380 07f8 BD46     		mov	sp, r7
 6381              		.cfi_def_cfa_register 13
 6382              		@ sp needed
 6383 07fa F0BD     		pop	{r4, r5, r6, r7, pc}
 6384              	.L407:
 6385              		.align	2
 6386              	.L406:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 149


 6387 07fc 00000000 		.word	c_mem
 6388 0800 F8000000 		.word	comp_value_encoder.10620
 6389 0804 00000000 		.word	g_meas
 6390 0808 00000000 		.word	g_refNew
 6391 080c 64010000 		.word	safe_startup_motor_activation.10623
 6392 0810 00000000 		.word	pos_reconstruct
 6393 0814 68010000 		.word	count_startup_motor.10625
 6394              		.cfi_endproc
 6395              	.LFE73:
 6396              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6397              		.section	.text.analog_read_end,"ax",%progbits
 6398              		.align	2
 6399              		.global	analog_read_end
 6400              		.thumb
 6401              		.thumb_func
 6402              		.type	analog_read_end, %function
 6403              	analog_read_end:
 6404              	.LFB74:
1912:..\src/interruptions.c **** 
1913:..\src/interruptions.c **** //==============================================================================
1914:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1915:..\src/interruptions.c **** //==============================================================================
1916:..\src/interruptions.c **** 
1917:..\src/interruptions.c **** void analog_read_end() {
 6405              		.loc 1 1917 0
 6406              		.cfi_startproc
 6407              		@ args = 0, pretend = 0, frame = 8
 6408              		@ frame_needed = 1, uses_anonymous_args = 0
 6409 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6410              		.cfi_def_cfa_offset 20
 6411              		.cfi_offset 4, -20
 6412              		.cfi_offset 5, -16
 6413              		.cfi_offset 6, -12
 6414              		.cfi_offset 7, -8
 6415              		.cfi_offset 14, -4
 6416 0002 83B0     		sub	sp, sp, #12
 6417              		.cfi_def_cfa_offset 32
 6418 0004 00AF     		add	r7, sp, #0
 6419              		.cfi_def_cfa_register 7
1918:..\src/interruptions.c **** 
1919:..\src/interruptions.c ****     /* =========================================================================
1920:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1921:..\src/interruptions.c ****     /
1922:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1923:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1924:..\src/interruptions.c ****     /
1925:..\src/interruptions.c ****     /   Definition:
1926:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1927:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1928:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1929:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1930:..\src/interruptions.c ****     /
1931:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1932:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1933:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1934:..\src/interruptions.c ****     /  =========================================================================
1935:..\src/interruptions.c ****     */
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 150


1936:..\src/interruptions.c **** 
1937:..\src/interruptions.c ****     int32 CYDATA i_aux;
1938:..\src/interruptions.c **** 
1939:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1940:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1941:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1942:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1943:..\src/interruptions.c ****     static int32 UD_mean_value;
1944:..\src/interruptions.c ****     static int32 LR_mean_value;
1945:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1946:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1947:..\src/interruptions.c ****     static uint16 count = 0;
1948:..\src/interruptions.c ****     static uint32 v_count = 0;
1949:..\src/interruptions.c ****     static uint8 idx = 0;
1950:..\src/interruptions.c ****     
1951:..\src/interruptions.c ****     // Wait for conversion end
1952:..\src/interruptions.c ****     
1953:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6420              		.loc 1 1953 0
 6421 0006 08E0     		b	.L409
 6422              	.L410:
1954:..\src/interruptions.c ****         
1955:..\src/interruptions.c ****         if (interrupt_flag){
 6423              		.loc 1 1955 0
 6424 0008 A84B     		ldr	r3, .L565
 6425 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6426 000c 002B     		cmp	r3, #0
 6427 000e 04D0     		beq	.L409
1956:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6428              		.loc 1 1956 0
 6429 0010 A64B     		ldr	r3, .L565
 6430 0012 0022     		movs	r2, #0
 6431 0014 1A70     		strb	r2, [r3]
1957:..\src/interruptions.c ****             interrupt_manager();
 6432              		.loc 1 1957 0
 6433 0016 FFF7FEFF 		bl	interrupt_manager
 6434              	.L409:
1953:..\src/interruptions.c ****         
 6435              		.loc 1 1953 0
 6436 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6437 001e 0346     		mov	r3, r0
 6438 0020 002B     		cmp	r3, #0
 6439 0022 F1D0     		beq	.L410
1958:..\src/interruptions.c ****         }
1959:..\src/interruptions.c ****     }
1960:..\src/interruptions.c ****     
1961:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1962:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1963:..\src/interruptions.c ****         // Read pressure in any case
1964:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1965:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1966:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1967:..\src/interruptions.c ****     }
1968:..\src/interruptions.c **** #endif
1969:..\src/interruptions.c ****  
1970:..\src/interruptions.c ****     // Convert tension read
1971:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 151


 6440              		.loc 1 1971 0
 6441 0024 A24B     		ldr	r3, .L565+4
 6442 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6443 002a 022B     		cmp	r3, #2
 6444 002c 04D1     		bne	.L411
1972:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6445              		.loc 1 1972 0
 6446 002e A14B     		ldr	r3, .L565+8
 6447 0030 41F28832 		movw	r2, #5000
 6448 0034 1A60     		str	r2, [r3]
 6449 0036 0BE0     		b	.L412
 6450              	.L411:
1973:..\src/interruptions.c ****     }
1974:..\src/interruptions.c ****     else {
1975:..\src/interruptions.c ****         dev_tension[0] =  ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6451              		.loc 1 1975 0
 6452 0038 9F4B     		ldr	r3, .L565+12
 6453 003a B3F90030 		ldrsh	r3, [r3]
 6454 003e A3F25563 		subw	r3, r3, #1621
 6455 0042 40F2C672 		movw	r2, #1990
 6456 0046 02FB03F3 		mul	r3, r2, r3
 6457 004a DB11     		asrs	r3, r3, #7
 6458 004c 994A     		ldr	r2, .L565+8
 6459 004e 1360     		str	r3, [r2]
 6460              	.L412:
1976:..\src/interruptions.c ****     }
1977:..\src/interruptions.c ****     
1978:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1979:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6461              		.loc 1 1979 0
 6462 0050 9A4B     		ldr	r3, .L565+16
 6463 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6464 0054 042B     		cmp	r3, #4
 6465 0056 0BD9     		bls	.L413
1980:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6466              		.loc 1 1980 0
 6467 0058 974B     		ldr	r3, .L565+12
 6468 005a B3F90830 		ldrsh	r3, [r3, #8]
 6469 005e A3F25563 		subw	r3, r3, #1621
 6470 0062 40F2C672 		movw	r2, #1990
 6471 0066 02FB03F3 		mul	r3, r2, r3
 6472 006a DB11     		asrs	r3, r3, #7
 6473 006c 914A     		ldr	r2, .L565+8
 6474 006e 5360     		str	r3, [r2, #4]
 6475              	.L413:
1981:..\src/interruptions.c ****     }
1982:..\src/interruptions.c ****     
1983:..\src/interruptions.c ****     if (interrupt_flag){
 6476              		.loc 1 1983 0
 6477 0070 8E4B     		ldr	r3, .L565
 6478 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6479 0074 002B     		cmp	r3, #0
 6480 0076 04D0     		beq	.L414
1984:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6481              		.loc 1 1984 0
 6482 0078 8C4B     		ldr	r3, .L565
 6483 007a 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 152


 6484 007c 1A70     		strb	r2, [r3]
1985:..\src/interruptions.c ****         interrupt_manager();
 6485              		.loc 1 1985 0
 6486 007e FFF7FEFF 		bl	interrupt_manager
 6487              	.L414:
1986:..\src/interruptions.c ****     }
1987:..\src/interruptions.c ****     
1988:..\src/interruptions.c ****     // VOLTAGE READING
1989:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1990:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1991:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1992:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1993:..\src/interruptions.c ****     
1994:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6488              		.loc 1 1994 0
 6489 0082 8F4B     		ldr	r3, .L565+20
 6490 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6491 0086 002B     		cmp	r3, #0
 6492 0088 4DD0     		beq	.L415
 6493              		.loc 1 1994 0 is_stmt 0 discriminator 1
 6494 008a 8E4B     		ldr	r3, .L565+24
 6495 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6496 008e 002B     		cmp	r3, #0
 6497 0090 49D0     		beq	.L415
1995:..\src/interruptions.c ****         count = count + 1;
 6498              		.loc 1 1995 0 is_stmt 1
 6499 0092 8D4B     		ldr	r3, .L565+28
 6500 0094 1B88     		ldrh	r3, [r3]
 6501 0096 0133     		adds	r3, r3, #1
 6502 0098 9AB2     		uxth	r2, r3
 6503 009a 8B4B     		ldr	r3, .L565+28
 6504 009c 1A80     		strh	r2, [r3]	@ movhi
1996:..\src/interruptions.c ****         
1997:..\src/interruptions.c ****         if (count == 1000){
 6505              		.loc 1 1997 0
 6506 009e 8A4B     		ldr	r3, .L565+28
 6507 00a0 1B88     		ldrh	r3, [r3]
 6508 00a2 B3F57A7F 		cmp	r3, #1000
 6509 00a6 3ED1     		bne	.L415
1998:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6510              		.loc 1 1998 0
 6511 00a8 884B     		ldr	r3, .L565+32
 6512 00aa 0022     		movs	r2, #0
 6513 00ac 1A70     		strb	r2, [r3]
 6514 00ae 33E0     		b	.L416
 6515              	.L420:
1999:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6516              		.loc 1 1999 0
 6517 00b0 864B     		ldr	r3, .L565+32
 6518 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6519 00b4 1A46     		mov	r2, r3
 6520 00b6 7F4B     		ldr	r3, .L565+8
 6521 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6522 00bc 42F22732 		movw	r2, #8999
 6523 00c0 9342     		cmp	r3, r2
 6524 00c2 08DC     		bgt	.L417
2000:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 153


 6525              		.loc 1 2000 0
 6526 00c4 814B     		ldr	r3, .L565+32
 6527 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6528 00c8 1946     		mov	r1, r3
 6529 00ca 814B     		ldr	r3, .L565+36
 6530 00cc 4FF4FA52 		mov	r2, #8000
 6531 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 6532 00d4 1AE0     		b	.L418
 6533              	.L417:
2001:..\src/interruptions.c ****                 }
2002:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
2003:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6534              		.loc 1 2003 0
 6535 00d6 7D4B     		ldr	r3, .L565+32
 6536 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6537 00da 1A46     		mov	r2, r3
 6538 00dc 754B     		ldr	r3, .L565+8
 6539 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6540 00e2 43F2C722 		movw	r2, #12999
 6541 00e6 9342     		cmp	r3, r2
 6542 00e8 08DC     		bgt	.L419
2004:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6543              		.loc 1 2004 0
 6544 00ea 784B     		ldr	r3, .L565+32
 6545 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6546 00ee 1946     		mov	r1, r3
 6547 00f0 774B     		ldr	r3, .L565+36
 6548 00f2 42F6E062 		movw	r2, #12000
 6549 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 6550 00fa 07E0     		b	.L418
 6551              	.L419:
2005:..\src/interruptions.c ****                     }
2006:..\src/interruptions.c ****                     else
2007:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6552              		.loc 1 2007 0
 6553 00fc 734B     		ldr	r3, .L565+32
 6554 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6555 0100 1946     		mov	r1, r3
 6556 0102 734B     		ldr	r3, .L565+36
 6557 0104 45F6C052 		movw	r2, #24000
 6558 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 6559              	.L418:
1998:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6560              		.loc 1 1998 0 discriminator 2
 6561 010c 6F4B     		ldr	r3, .L565+32
 6562 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6563 0110 0133     		adds	r3, r3, #1
 6564 0112 DAB2     		uxtb	r2, r3
 6565 0114 6D4B     		ldr	r3, .L565+32
 6566 0116 1A70     		strb	r2, [r3]
 6567              	.L416:
1998:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6568              		.loc 1 1998 0 is_stmt 0 discriminator 1
 6569 0118 6C4B     		ldr	r3, .L565+32
 6570 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6571 011c 012B     		cmp	r3, #1
 6572 011e C7D9     		bls	.L420
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 154


2008:..\src/interruptions.c ****                 }
2009:..\src/interruptions.c ****             }
2010:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6573              		.loc 1 2010 0 is_stmt 1
 6574 0120 674B     		ldr	r3, .L565+20
 6575 0122 0022     		movs	r2, #0
 6576 0124 1A70     		strb	r2, [r3]
 6577              	.L415:
2011:..\src/interruptions.c ****         }
2012:..\src/interruptions.c ****     }
2013:..\src/interruptions.c **** 
2014:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
2015:..\src/interruptions.c **** 
2016:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 6578              		.loc 1 2016 0
 6579 0126 634B     		ldr	r3, .L565+8
 6580 0128 1B68     		ldr	r3, [r3]
 6581 012a 41F65732 		movw	r2, #6999
 6582 012e 9342     		cmp	r3, r2
 6583 0130 00F3F080 		bgt	.L421
 6584              		.loc 1 2016 0 is_stmt 0 discriminator 1
 6585 0134 614B     		ldr	r3, .L565+16
 6586 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6587 0138 042B     		cmp	r3, #4
 6588 013a 06D9     		bls	.L422
 6589              		.loc 1 2016 0 discriminator 2
 6590 013c 5D4B     		ldr	r3, .L565+8
 6591 013e 5B68     		ldr	r3, [r3, #4]
 6592 0140 41F65732 		movw	r2, #6999
 6593 0144 9342     		cmp	r3, r2
 6594 0146 00F3E580 		bgt	.L421
 6595              	.L422:
2017:..\src/interruptions.c ****         // PSoC is powered through uUSB
2018:..\src/interruptions.c ****         
2019:..\src/interruptions.c ****         tension_valid = FALSE;
 6596              		.loc 1 2019 0 is_stmt 1
 6597 014a 5E4B     		ldr	r3, .L565+24
 6598 014c 0022     		movs	r2, #0
 6599 014e 1A70     		strb	r2, [r3]
2020:..\src/interruptions.c ****             
2021:..\src/interruptions.c ****         if (interrupt_flag){
 6600              		.loc 1 2021 0
 6601 0150 564B     		ldr	r3, .L565
 6602 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6603 0154 002B     		cmp	r3, #0
 6604 0156 04D0     		beq	.L423
2022:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6605              		.loc 1 2022 0
 6606 0158 544B     		ldr	r3, .L565
 6607 015a 0022     		movs	r2, #0
 6608 015c 1A70     		strb	r2, [r3]
2023:..\src/interruptions.c ****             interrupt_manager();
 6609              		.loc 1 2023 0
 6610 015e FFF7FEFF 		bl	interrupt_manager
 6611              	.L423:
2024:..\src/interruptions.c ****         }
2025:..\src/interruptions.c ****         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 155


2026:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6612              		.loc 1 2026 0
 6613 0162 5A4B     		ldr	r3, .L565+32
 6614 0164 0022     		movs	r2, #0
 6615 0166 1A70     		strb	r2, [r3]
 6616 0168 81E0     		b	.L424
 6617              	.L427:
2027:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6618              		.loc 1 2027 0
 6619 016a 5A4B     		ldr	r3, .L565+40
 6620 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6621 0170 002B     		cmp	r3, #0
 6622 0172 59D0     		beq	.L425
2028:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6623              		.loc 1 2028 0
 6624 0174 554B     		ldr	r3, .L565+32
 6625 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6626 0178 1946     		mov	r1, r3
 6627 017a 564A     		ldr	r2, .L565+40
 6628 017c 0B46     		mov	r3, r1
 6629 017e DB00     		lsls	r3, r3, #3
 6630 0180 5B1A     		subs	r3, r3, r1
 6631 0182 1B01     		lsls	r3, r3, #4
 6632 0184 1344     		add	r3, r3, r2
 6633 0186 03F58773 		add	r3, r3, #270
 6634 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6635 018c 022B     		cmp	r3, #2
 6636 018e 37D0     		beq	.L426
2029:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6637              		.loc 1 2029 0 discriminator 1
 6638 0190 4E4B     		ldr	r3, .L565+32
 6639 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6640 0194 1946     		mov	r1, r3
 6641 0196 4F4A     		ldr	r2, .L565+40
 6642 0198 0B46     		mov	r3, r1
 6643 019a DB00     		lsls	r3, r3, #3
 6644 019c 5B1A     		subs	r3, r3, r1
 6645 019e 1B01     		lsls	r3, r3, #4
 6646 01a0 1344     		add	r3, r3, r2
 6647 01a2 03F58773 		add	r3, r3, #270
 6648 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2028:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6649              		.loc 1 2028 0 discriminator 1
 6650 01a8 032B     		cmp	r3, #3
 6651 01aa 29D0     		beq	.L426
2030:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6652              		.loc 1 2030 0
 6653 01ac 474B     		ldr	r3, .L565+32
 6654 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6655 01b0 1946     		mov	r1, r3
 6656 01b2 484A     		ldr	r2, .L565+40
 6657 01b4 0B46     		mov	r3, r1
 6658 01b6 DB00     		lsls	r3, r3, #3
 6659 01b8 5B1A     		subs	r3, r3, r1
 6660 01ba 1B01     		lsls	r3, r3, #4
 6661 01bc 1344     		add	r3, r3, r2
 6662 01be 03F58773 		add	r3, r3, #270
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 156


 6663 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2029:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6664              		.loc 1 2029 0
 6665 01c4 042B     		cmp	r3, #4
 6666 01c6 1BD0     		beq	.L426
2031:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6667              		.loc 1 2031 0
 6668 01c8 404B     		ldr	r3, .L565+32
 6669 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6670 01cc 1946     		mov	r1, r3
 6671 01ce 414A     		ldr	r2, .L565+40
 6672 01d0 0B46     		mov	r3, r1
 6673 01d2 DB00     		lsls	r3, r3, #3
 6674 01d4 5B1A     		subs	r3, r3, r1
 6675 01d6 1B01     		lsls	r3, r3, #4
 6676 01d8 1344     		add	r3, r3, r2
 6677 01da 03F58773 		add	r3, r3, #270
 6678 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2030:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6679              		.loc 1 2030 0
 6680 01e0 052B     		cmp	r3, #5
 6681 01e2 0DD0     		beq	.L426
2032:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6682              		.loc 1 2032 0
 6683 01e4 394B     		ldr	r3, .L565+32
 6684 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6685 01e8 1946     		mov	r1, r3
 6686 01ea 3A4A     		ldr	r2, .L565+40
 6687 01ec 0B46     		mov	r3, r1
 6688 01ee DB00     		lsls	r3, r3, #3
 6689 01f0 5B1A     		subs	r3, r3, r1
 6690 01f2 1B01     		lsls	r3, r3, #4
 6691 01f4 1344     		add	r3, r3, r2
 6692 01f6 03F58773 		add	r3, r3, #270
 6693 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2031:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6694              		.loc 1 2031 0
 6695 01fc 072B     		cmp	r3, #7
 6696 01fe 13D1     		bne	.L425
 6697              	.L426:
2033:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6698              		.loc 1 2033 0
 6699 0200 324B     		ldr	r3, .L565+32
 6700 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6701 0204 344A     		ldr	r2, .L565+44
 6702 0206 1B01     		lsls	r3, r3, #4
 6703 0208 1344     		add	r3, r3, r2
 6704 020a 0C33     		adds	r3, r3, #12
 6705 020c 0022     		movs	r2, #0
 6706 020e 1A70     		strb	r2, [r3]
2034:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6707              		.loc 1 2034 0
 6708 0210 2E4B     		ldr	r3, .L565+32
 6709 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6710 0214 2D4B     		ldr	r3, .L565+32
 6711 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6712 0218 2F4A     		ldr	r2, .L565+44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 157


 6713 021a 1B01     		lsls	r3, r3, #4
 6714 021c 1344     		add	r3, r3, r2
 6715 021e 0C33     		adds	r3, r3, #12
 6716 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6717 0222 1946     		mov	r1, r3
 6718 0224 FFF7FEFF 		bl	enable_motor
 6719              	.L425:
2035:..\src/interruptions.c ****                     
2036:..\src/interruptions.c ****                 }
2037:..\src/interruptions.c ****             }
2038:..\src/interruptions.c **** 
2039:..\src/interruptions.c ****             // Assign dev_tension and reset current
2040:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6720              		.loc 1 2040 0 discriminator 2
 6721 0228 284B     		ldr	r3, .L565+32
 6722 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6723 022c 1946     		mov	r1, r3
 6724 022e 214B     		ldr	r3, .L565+8
 6725 0230 41F28832 		movw	r2, #5000
 6726 0234 43F82120 		str	r2, [r3, r1, lsl #2]
2041:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6727              		.loc 1 2041 0 discriminator 2
 6728 0238 244B     		ldr	r3, .L565+32
 6729 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6730 023c 1946     		mov	r1, r3
 6731 023e 1C4A     		ldr	r2, .L565+4
 6732 0240 0B46     		mov	r3, r1
 6733 0242 DB00     		lsls	r3, r3, #3
 6734 0244 5B1A     		subs	r3, r3, r1
 6735 0246 1B01     		lsls	r3, r3, #4
 6736 0248 1344     		add	r3, r3, r2
 6737 024a 03F58873 		add	r3, r3, #272
 6738 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6739 0250 1946     		mov	r1, r3
 6740 0252 224A     		ldr	r2, .L565+48
 6741 0254 3423     		movs	r3, #52
 6742 0256 03FB01F3 		mul	r3, r3, r1
 6743 025a 1344     		add	r3, r3, r2
 6744 025c 0C33     		adds	r3, r3, #12
 6745 025e 0022     		movs	r2, #0
 6746 0260 1A60     		str	r2, [r3]
2026:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6747              		.loc 1 2026 0 discriminator 2
 6748 0262 1A4B     		ldr	r3, .L565+32
 6749 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6750 0266 0133     		adds	r3, r3, #1
 6751 0268 DAB2     		uxtb	r2, r3
 6752 026a 184B     		ldr	r3, .L565+32
 6753 026c 1A70     		strb	r2, [r3]
 6754              	.L424:
2026:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6755              		.loc 1 2026 0 is_stmt 0 discriminator 1
 6756 026e 174B     		ldr	r3, .L565+32
 6757 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6758 0272 012B     		cmp	r3, #1
 6759 0274 7FF679AF 		bls	.L427
2042:..\src/interruptions.c ****         }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 158


2043:..\src/interruptions.c ****         
2044:..\src/interruptions.c ****         // Reset emg
2045:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6760              		.loc 1 2045 0 is_stmt 1
 6761 0278 144B     		ldr	r3, .L565+32
 6762 027a 0022     		movs	r2, #0
 6763 027c 1A70     		strb	r2, [r3]
 6764 027e 0CE0     		b	.L428
 6765              	.L429:
2046:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6766              		.loc 1 2046 0 discriminator 3
 6767 0280 124B     		ldr	r3, .L565+32
 6768 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6769 0284 1946     		mov	r1, r3
 6770 0286 164B     		ldr	r3, .L565+52
 6771 0288 0022     		movs	r2, #0
 6772 028a 43F82120 		str	r2, [r3, r1, lsl #2]
2045:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6773              		.loc 1 2045 0 discriminator 3
 6774 028e 0F4B     		ldr	r3, .L565+32
 6775 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6776 0292 0133     		adds	r3, r3, #1
 6777 0294 DAB2     		uxtb	r2, r3
 6778 0296 0D4B     		ldr	r3, .L565+32
 6779 0298 1A70     		strb	r2, [r3]
 6780              	.L428:
2045:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6781              		.loc 1 2045 0 is_stmt 0 discriminator 1
 6782 029a 0C4B     		ldr	r3, .L565+32
 6783 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6784 029e 012B     		cmp	r3, #1
 6785 02a0 EED9     		bls	.L429
2047:..\src/interruptions.c ****         }
2048:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6786              		.loc 1 2048 0 is_stmt 1
 6787 02a2 0A4B     		ldr	r3, .L565+32
 6788 02a4 0022     		movs	r2, #0
 6789 02a6 1A70     		strb	r2, [r3]
 6790 02a8 29E0     		b	.L430
 6791              	.L566:
 6792 02aa 00BF     		.align	2
 6793              	.L565:
 6794 02ac 00000000 		.word	interrupt_flag
 6795 02b0 00000000 		.word	g_mem
 6796 02b4 00000000 		.word	dev_tension
 6797 02b8 00000000 		.word	ADC_buf
 6798 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6799 02c0 06000000 		.word	first_tension_valid.10651
 6800 02c4 00000000 		.word	tension_valid
 6801 02c8 70010000 		.word	count.10652
 6802 02cc 72010000 		.word	idx.10654
 6803 02d0 00000000 		.word	pow_tension
 6804 02d4 00000000 		.word	c_mem
 6805 02d8 00000000 		.word	g_ref
 6806 02dc 00000000 		.word	g_meas
 6807 02e0 00000000 		.word	g_adc_meas
 6808              	.L432:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 159


2049:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6809              		.loc 1 2049 0 discriminator 4
 6810 02e4 BA4B     		ldr	r3, .L567
 6811 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6812 02e8 BA4A     		ldr	r2, .L567+4
 6813 02ea 0233     		adds	r3, r3, #2
 6814 02ec 0021     		movs	r1, #0
 6815 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
2048:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6816              		.loc 1 2048 0 discriminator 4
 6817 02f2 B74B     		ldr	r3, .L567
 6818 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6819 02f6 0133     		adds	r3, r3, #1
 6820 02f8 DAB2     		uxtb	r2, r3
 6821 02fa B54B     		ldr	r3, .L567
 6822 02fc 1A70     		strb	r2, [r3]
 6823              	.L430:
2048:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6824              		.loc 1 2048 0 is_stmt 0 discriminator 1
 6825 02fe B64B     		ldr	r3, .L567+8
 6826 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6827 0304 002B     		cmp	r3, #0
 6828 0306 00F03C82 		beq	.L547
2048:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6829              		.loc 1 2048 0 discriminator 3
 6830 030a B14B     		ldr	r3, .L567
 6831 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6832 030e 052B     		cmp	r3, #5
 6833 0310 E8D9     		bls	.L432
2016:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6834              		.loc 1 2016 0 is_stmt 1
 6835 0312 36E2     		b	.L547
 6836              	.L421:
2050:..\src/interruptions.c ****         }
2051:..\src/interruptions.c ****         
2052:..\src/interruptions.c ****     }
2053:..\src/interruptions.c ****     else {
2054:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2055:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
2056:..\src/interruptions.c ****         
2057:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2058:..\src/interruptions.c ****         
2059:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6837              		.loc 1 2059 0
 6838 0314 B14B     		ldr	r3, .L567+12
 6839 0316 1B68     		ldr	r3, [r3]
 6840 0318 B3F57A7F 		cmp	r3, #1000
 6841 031c 0DD1     		bne	.L434
 6842              		.loc 1 2059 0 is_stmt 0 discriminator 1
 6843 031e B04B     		ldr	r3, .L567+16
 6844 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6845 0322 002B     		cmp	r3, #0
 6846 0324 09D1     		bne	.L434
2060:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2061:..\src/interruptions.c ****             tension_valid = TRUE;   
 6847              		.loc 1 2061 0 is_stmt 1
 6848 0326 AE4B     		ldr	r3, .L567+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 160


 6849 0328 0122     		movs	r2, #1
 6850 032a 1A70     		strb	r2, [r3]
2062:..\src/interruptions.c ****             count = 0;
 6851              		.loc 1 2062 0
 6852 032c AD4B     		ldr	r3, .L567+20
 6853 032e 0022     		movs	r2, #0
 6854 0330 1A80     		strh	r2, [r3]	@ movhi
2063:..\src/interruptions.c ****             v_count = 0;
 6855              		.loc 1 2063 0
 6856 0332 AA4B     		ldr	r3, .L567+12
 6857 0334 0022     		movs	r2, #0
 6858 0336 1A60     		str	r2, [r3]
 6859 0338 2CE0     		b	.L435
 6860              	.L434:
2064:..\src/interruptions.c ****         }
2065:..\src/interruptions.c ****         else {  
2066:..\src/interruptions.c ****             // wait for battery voltage stabilization
2067:..\src/interruptions.c ****             if (v_count < 1000) {
 6861              		.loc 1 2067 0
 6862 033a A84B     		ldr	r3, .L567+12
 6863 033c 1B68     		ldr	r3, [r3]
 6864 033e B3F57A7F 		cmp	r3, #1000
 6865 0342 04D2     		bcs	.L436
2068:..\src/interruptions.c ****                 v_count = v_count + 1;
 6866              		.loc 1 2068 0
 6867 0344 A54B     		ldr	r3, .L567+12
 6868 0346 1B68     		ldr	r3, [r3]
 6869 0348 0133     		adds	r3, r3, #1
 6870 034a A44A     		ldr	r2, .L567+12
 6871 034c 1360     		str	r3, [r2]
 6872              	.L436:
2069:..\src/interruptions.c ****             }
2070:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6873              		.loc 1 2070 0
 6874 034e A04B     		ldr	r3, .L567
 6875 0350 0022     		movs	r2, #0
 6876 0352 1A70     		strb	r2, [r3]
 6877 0354 1AE0     		b	.L437
 6878              	.L438:
2071:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6879              		.loc 1 2071 0 discriminator 3
 6880 0356 9E4B     		ldr	r3, .L567
 6881 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6882 035a 1C46     		mov	r4, r3
 6883 035c 9C4B     		ldr	r3, .L567
 6884 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6885 0360 1A46     		mov	r2, r3
 6886 0362 A14B     		ldr	r3, .L567+24
 6887 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6888 0368 994B     		ldr	r3, .L567
 6889 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6890 036c DB00     		lsls	r3, r3, #3
 6891 036e 9F4A     		ldr	r2, .L567+28
 6892 0370 1344     		add	r3, r3, r2
 6893 0372 1946     		mov	r1, r3
 6894 0374 FFF7FEFF 		bl	filter
 6895 0378 0246     		mov	r2, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 161


 6896 037a 9D4B     		ldr	r3, .L567+32
 6897 037c 43F82420 		str	r2, [r3, r4, lsl #2]
2070:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6898              		.loc 1 2070 0 discriminator 3
 6899 0380 934B     		ldr	r3, .L567
 6900 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6901 0384 0133     		adds	r3, r3, #1
 6902 0386 DAB2     		uxtb	r2, r3
 6903 0388 914B     		ldr	r3, .L567
 6904 038a 1A70     		strb	r2, [r3]
 6905              	.L437:
2070:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6906              		.loc 1 2070 0 is_stmt 0 discriminator 1
 6907 038c 904B     		ldr	r3, .L567
 6908 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6909 0390 012B     		cmp	r3, #1
 6910 0392 E0D9     		bls	.L438
 6911              	.L435:
2072:..\src/interruptions.c ****             }
2073:..\src/interruptions.c ****         }
2074:..\src/interruptions.c **** 
2075:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6912              		.loc 1 2075 0 is_stmt 1
 6913 0394 8E4B     		ldr	r3, .L567
 6914 0396 0022     		movs	r2, #0
 6915 0398 1A70     		strb	r2, [r3]
 6916 039a 17E0     		b	.L439
 6917              	.L441:
2076:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6918              		.loc 1 2076 0
 6919 039c 8C4B     		ldr	r3, .L567
 6920 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6921 03a0 1946     		mov	r1, r3
 6922 03a2 944A     		ldr	r2, .L567+36
 6923 03a4 0B46     		mov	r3, r1
 6924 03a6 DB00     		lsls	r3, r3, #3
 6925 03a8 5B1A     		subs	r3, r3, r1
 6926 03aa 1B01     		lsls	r3, r3, #4
 6927 03ac 1344     		add	r3, r3, r2
 6928 03ae E133     		adds	r3, r3, #225
 6929 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6930 03b2 002B     		cmp	r3, #0
 6931 03b4 04D0     		beq	.L440
2077:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6932              		.loc 1 2077 0
 6933 03b6 864B     		ldr	r3, .L567
 6934 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6935 03ba 1846     		mov	r0, r3
 6936 03bc FFF7FEFF 		bl	pwm_limit_search
 6937              	.L440:
2075:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6938              		.loc 1 2075 0 discriminator 2
 6939 03c0 834B     		ldr	r3, .L567
 6940 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6941 03c4 0133     		adds	r3, r3, #1
 6942 03c6 DAB2     		uxtb	r2, r3
 6943 03c8 814B     		ldr	r3, .L567
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 162


 6944 03ca 1A70     		strb	r2, [r3]
 6945              	.L439:
2075:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6946              		.loc 1 2075 0 is_stmt 0 discriminator 1
 6947 03cc 804B     		ldr	r3, .L567
 6948 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6949 03d0 012B     		cmp	r3, #1
 6950 03d2 E3D9     		bls	.L441
2078:..\src/interruptions.c ****         }
2079:..\src/interruptions.c ****         
2080:..\src/interruptions.c ****         // Filter and Set currents
2081:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6951              		.loc 1 2081 0 is_stmt 1
 6952 03d4 874B     		ldr	r3, .L567+36
 6953 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6954 03da 002B     		cmp	r3, #0
 6955 03dc 21D1     		bne	.L442
2082:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6956              		.loc 1 2082 0
 6957 03de 854B     		ldr	r3, .L567+36
 6958 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6959 03e4 1C46     		mov	r4, r3
 6960 03e6 844B     		ldr	r3, .L567+40
 6961 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 6962 03ec A3F5CE63 		sub	r3, r3, #1648
 6963 03f0 45F66A02 		movw	r2, #22634
 6964 03f4 02FB03F3 		mul	r3, r2, r3
 6965 03f8 5B13     		asrs	r3, r3, #13
 6966 03fa 1BB2     		sxth	r3, r3
 6967 03fc 1A46     		mov	r2, r3
 6968 03fe 7F4B     		ldr	r3, .L567+44
 6969 0400 93F90030 		ldrsb	r3, [r3]
 6970 0404 03FB02F3 		mul	r3, r3, r2
 6971 0408 7D49     		ldr	r1, .L567+48
 6972 040a 1846     		mov	r0, r3
 6973 040c FFF7FEFF 		bl	filter
 6974 0410 0146     		mov	r1, r0
 6975 0412 7C4A     		ldr	r2, .L567+52
 6976 0414 3423     		movs	r3, #52
 6977 0416 03FB04F3 		mul	r3, r3, r4
 6978 041a 1344     		add	r3, r3, r2
 6979 041c 0C33     		adds	r3, r3, #12
 6980 041e 1960     		str	r1, [r3]
 6981 0420 42E0     		b	.L443
 6982              	.L442:
2083:..\src/interruptions.c ****         } 
2084:..\src/interruptions.c ****         else {
2085:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 6983              		.loc 1 2085 0
 6984 0422 744B     		ldr	r3, .L567+36
 6985 0424 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6986 0428 022B     		cmp	r3, #2
 6987 042a 21D1     		bne	.L444
2086:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2087:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 6988              		.loc 1 2087 0
 6989 042c 714B     		ldr	r3, .L567+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 163


 6990 042e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6991 0432 1C46     		mov	r4, r3
 6992 0434 704B     		ldr	r3, .L567+40
 6993 0436 B3F90230 		ldrsh	r3, [r3, #2]
 6994 043a A3F28F63 		subw	r3, r3, #1679
 6995 043e 45F65072 		movw	r2, #24400
 6996 0442 02FB03F3 		mul	r3, r2, r3
 6997 0446 5B13     		asrs	r3, r3, #13
 6998 0448 1BB2     		sxth	r3, r3
 6999 044a 1A46     		mov	r2, r3
 7000 044c 6B4B     		ldr	r3, .L567+44
 7001 044e 93F90030 		ldrsb	r3, [r3]
 7002 0452 03FB02F3 		mul	r3, r3, r2
 7003 0456 6A49     		ldr	r1, .L567+48
 7004 0458 1846     		mov	r0, r3
 7005 045a FFF7FEFF 		bl	filter
 7006 045e 0146     		mov	r1, r0
 7007 0460 684A     		ldr	r2, .L567+52
 7008 0462 3423     		movs	r3, #52
 7009 0464 03FB04F3 		mul	r3, r3, r4
 7010 0468 1344     		add	r3, r3, r2
 7011 046a 0C33     		adds	r3, r3, #12
 7012 046c 1960     		str	r1, [r3]
 7013 046e 1BE0     		b	.L443
 7014              	.L444:
2088:..\src/interruptions.c ****             } else { // [GS]
2089:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 7015              		.loc 1 2089 0
 7016 0470 604B     		ldr	r3, .L567+36
 7017 0472 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7018 0476 1846     		mov	r0, r3
 7019 0478 5F4B     		ldr	r3, .L567+40
 7020 047a B3F90230 		ldrsh	r3, [r3, #2]
 7021 047e A3F26362 		subw	r2, r3, #1635
 7022 0482 1346     		mov	r3, r2
 7023 0484 1B01     		lsls	r3, r3, #4
 7024 0486 9B1A     		subs	r3, r3, r2
 7025 0488 5B01     		lsls	r3, r3, #5
 7026 048a 1B11     		asrs	r3, r3, #4
 7027 048c 1BB2     		sxth	r3, r3
 7028 048e 1A46     		mov	r2, r3
 7029 0490 5A4B     		ldr	r3, .L567+44
 7030 0492 93F90030 		ldrsb	r3, [r3]
 7031 0496 03FB02F2 		mul	r2, r3, r2
 7032 049a 5A49     		ldr	r1, .L567+52
 7033 049c 3423     		movs	r3, #52
 7034 049e 03FB00F3 		mul	r3, r3, r0
 7035 04a2 0B44     		add	r3, r3, r1
 7036 04a4 0C33     		adds	r3, r3, #12
 7037 04a6 1A60     		str	r2, [r3]
 7038              	.L443:
2090:..\src/interruptions.c ****             }
2091:..\src/interruptions.c ****         }
2092:..\src/interruptions.c ****         
2093:..\src/interruptions.c **** 
2094:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2095:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 164


 7039              		.loc 1 2095 0
 7040 04a8 524B     		ldr	r3, .L567+36
 7041 04aa 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7042 04ae 1D46     		mov	r5, r3
 7043 04b0 504B     		ldr	r3, .L567+36
 7044 04b2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7045 04b6 1946     		mov	r1, r3
 7046 04b8 524A     		ldr	r2, .L567+52
 7047 04ba 3423     		movs	r3, #52
 7048 04bc 03FB01F3 		mul	r3, r3, r1
 7049 04c0 1344     		add	r3, r3, r2
 7050 04c2 0C33     		adds	r3, r3, #12
 7051 04c4 1C68     		ldr	r4, [r3]
 7052 04c6 4B4B     		ldr	r3, .L567+36
 7053 04c8 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7054 04cc 1946     		mov	r1, r3
 7055 04ce 4D4A     		ldr	r2, .L567+52
 7056 04d0 3423     		movs	r3, #52
 7057 04d2 03FB01F3 		mul	r3, r3, r1
 7058 04d6 1344     		add	r3, r3, r2
 7059 04d8 1A68     		ldr	r2, [r3]
 7060 04da 464B     		ldr	r3, .L567+36
 7061 04dc 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7062 04e0 1846     		mov	r0, r3
 7063 04e2 4449     		ldr	r1, .L567+36
 7064 04e4 0346     		mov	r3, r0
 7065 04e6 5B00     		lsls	r3, r3, #1
 7066 04e8 0344     		add	r3, r3, r0
 7067 04ea 1B01     		lsls	r3, r3, #4
 7068 04ec 0B44     		add	r3, r3, r1
 7069 04ee 03F29513 		addw	r3, r3, #405
 7070 04f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7071 04f4 42FA03F6 		asr	r6, r2, r3
 7072 04f8 3E4B     		ldr	r3, .L567+36
 7073 04fa 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7074 04fe 1946     		mov	r1, r3
 7075 0500 404A     		ldr	r2, .L567+52
 7076 0502 3423     		movs	r3, #52
 7077 0504 03FB01F3 		mul	r3, r3, r1
 7078 0508 1344     		add	r3, r3, r2
 7079 050a 1C33     		adds	r3, r3, #28
 7080 050c 1A68     		ldr	r2, [r3]
 7081 050e 394B     		ldr	r3, .L567+36
 7082 0510 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7083 0514 1846     		mov	r0, r3
 7084 0516 3749     		ldr	r1, .L567+36
 7085 0518 0346     		mov	r3, r0
 7086 051a 5B00     		lsls	r3, r3, #1
 7087 051c 0344     		add	r3, r3, r0
 7088 051e 1B01     		lsls	r3, r3, #4
 7089 0520 0B44     		add	r3, r3, r1
 7090 0522 03F29513 		addw	r3, r3, #405
 7091 0526 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7092 0528 42FA03FE 		asr	lr, r2, r3
 7093 052c 364B     		ldr	r3, .L567+56
 7094 052e 1A68     		ldr	r2, [r3]
 7095 0530 304B     		ldr	r3, .L567+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 165


 7096 0532 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7097 0536 1846     		mov	r0, r3
 7098 0538 2E49     		ldr	r1, .L567+36
 7099 053a 0346     		mov	r3, r0
 7100 053c 5B00     		lsls	r3, r3, #1
 7101 053e 0344     		add	r3, r3, r0
 7102 0540 1B01     		lsls	r3, r3, #4
 7103 0542 0B44     		add	r3, r3, r1
 7104 0544 03F29513 		addw	r3, r3, #405
 7105 0548 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7106 054a 42FA03F3 		asr	r3, r2, r3
 7107 054e 7246     		mov	r2, lr
 7108 0550 3146     		mov	r1, r6
 7109 0552 0020     		movs	r0, #0
 7110 0554 FFF7FEFF 		bl	curr_estim
 7111 0558 0346     		mov	r3, r0
 7112 055a E31A     		subs	r3, r4, r3
 7113 055c 2B49     		ldr	r1, .L567+60
 7114 055e 1846     		mov	r0, r3
 7115 0560 FFF7FEFF 		bl	filter
 7116 0564 0346     		mov	r3, r0
 7117 0566 1BB2     		sxth	r3, r3
 7118 0568 1946     		mov	r1, r3
 7119 056a 264A     		ldr	r2, .L567+52
 7120 056c 3423     		movs	r3, #52
 7121 056e 03FB05F3 		mul	r3, r3, r5
 7122 0572 1344     		add	r3, r3, r2
 7123 0574 1033     		adds	r3, r3, #16
 7124 0576 1960     		str	r1, [r3]
2096:..\src/interruptions.c ****         
2097:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2098:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7125              		.loc 1 2098 0
 7126 0578 254B     		ldr	r3, .L567+64
 7127 057a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7128 057c 042B     		cmp	r3, #4
 7129 057e 40F2F680 		bls	.L445
2099:..\src/interruptions.c ****             // Filter and Set currents
2100:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 7130              		.loc 1 2100 0
 7131 0582 1C4B     		ldr	r3, .L567+36
 7132 0584 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7133 0588 002B     		cmp	r3, #0
 7134 058a 45D1     		bne	.L446
2101:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7135              		.loc 1 2101 0
 7136 058c 194B     		ldr	r3, .L567+36
 7137 058e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7138 0592 1C46     		mov	r4, r3
 7139 0594 184B     		ldr	r3, .L567+40
 7140 0596 B3F90A30 		ldrsh	r3, [r3, #10]
 7141 059a A3F5CE63 		sub	r3, r3, #1648
 7142 059e 45F66A02 		movw	r2, #22634
 7143 05a2 02FB03F3 		mul	r3, r2, r3
 7144 05a6 5B13     		asrs	r3, r3, #13
 7145 05a8 1BB2     		sxth	r3, r3
 7146 05aa 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 166


 7147 05ac 134B     		ldr	r3, .L567+44
 7148 05ae 93F90130 		ldrsb	r3, [r3, #1]
 7149 05b2 03FB02F3 		mul	r3, r3, r2
 7150 05b6 1749     		ldr	r1, .L567+68
 7151 05b8 1846     		mov	r0, r3
 7152 05ba FFF7FEFF 		bl	filter
 7153 05be 0146     		mov	r1, r0
 7154 05c0 104A     		ldr	r2, .L567+52
 7155 05c2 3423     		movs	r3, #52
 7156 05c4 03FB04F3 		mul	r3, r3, r4
 7157 05c8 1344     		add	r3, r3, r2
 7158 05ca 0C33     		adds	r3, r3, #12
 7159 05cc 1960     		str	r1, [r3]
 7160 05ce 66E0     		b	.L447
 7161              	.L568:
 7162              		.align	2
 7163              	.L567:
 7164 05d0 72010000 		.word	idx.10654
 7165 05d4 00000000 		.word	g_adc_meas
 7166 05d8 00000000 		.word	c_mem
 7167 05dc 74010000 		.word	v_count.10653
 7168 05e0 00000000 		.word	tension_valid
 7169 05e4 70010000 		.word	count.10652
 7170 05e8 00000000 		.word	dev_tension
 7171 05ec 00000000 		.word	filt_v
 7172 05f0 00000000 		.word	dev_tension_f
 7173 05f4 00000000 		.word	g_mem
 7174 05f8 00000000 		.word	ADC_buf
 7175 05fc 00000000 		.word	pwm_sign
 7176 0600 00000000 		.word	filt_i
 7177 0604 00000000 		.word	g_meas
 7178 0608 00000000 		.word	g_ref
 7179 060c 00000000 		.word	filt_curr_diff
 7180 0610 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7181 0614 08000000 		.word	filt_i+8
 7182              	.L446:
2102:..\src/interruptions.c ****             } 
2103:..\src/interruptions.c ****             else {
2104:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7183              		.loc 1 2104 0
 7184 0618 A94B     		ldr	r3, .L569
 7185 061a 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7186 061e 022B     		cmp	r3, #2
 7187 0620 21D1     		bne	.L448
2105:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2106:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7188              		.loc 1 2106 0
 7189 0622 A74B     		ldr	r3, .L569
 7190 0624 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7191 0628 1C46     		mov	r4, r3
 7192 062a A64B     		ldr	r3, .L569+4
 7193 062c B3F90A30 		ldrsh	r3, [r3, #10]
 7194 0630 A3F28F63 		subw	r3, r3, #1679
 7195 0634 45F65072 		movw	r2, #24400
 7196 0638 02FB03F3 		mul	r3, r2, r3
 7197 063c 5B13     		asrs	r3, r3, #13
 7198 063e 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 167


 7199 0640 1A46     		mov	r2, r3
 7200 0642 A14B     		ldr	r3, .L569+8
 7201 0644 93F90130 		ldrsb	r3, [r3, #1]
 7202 0648 03FB02F3 		mul	r3, r3, r2
 7203 064c 9F49     		ldr	r1, .L569+12
 7204 064e 1846     		mov	r0, r3
 7205 0650 FFF7FEFF 		bl	filter
 7206 0654 0146     		mov	r1, r0
 7207 0656 9E4A     		ldr	r2, .L569+16
 7208 0658 3423     		movs	r3, #52
 7209 065a 03FB04F3 		mul	r3, r3, r4
 7210 065e 1344     		add	r3, r3, r2
 7211 0660 0C33     		adds	r3, r3, #12
 7212 0662 1960     		str	r1, [r3]
 7213 0664 1BE0     		b	.L447
 7214              	.L448:
2107:..\src/interruptions.c ****                 } else { // [GS]
2108:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7215              		.loc 1 2108 0
 7216 0666 964B     		ldr	r3, .L569
 7217 0668 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7218 066c 1846     		mov	r0, r3
 7219 066e 954B     		ldr	r3, .L569+4
 7220 0670 B3F90A30 		ldrsh	r3, [r3, #10]
 7221 0674 A3F26362 		subw	r2, r3, #1635
 7222 0678 1346     		mov	r3, r2
 7223 067a 1B01     		lsls	r3, r3, #4
 7224 067c 9B1A     		subs	r3, r3, r2
 7225 067e 5B01     		lsls	r3, r3, #5
 7226 0680 1B11     		asrs	r3, r3, #4
 7227 0682 1BB2     		sxth	r3, r3
 7228 0684 1A46     		mov	r2, r3
 7229 0686 904B     		ldr	r3, .L569+8
 7230 0688 93F90130 		ldrsb	r3, [r3, #1]
 7231 068c 03FB02F2 		mul	r2, r3, r2
 7232 0690 8F49     		ldr	r1, .L569+16
 7233 0692 3423     		movs	r3, #52
 7234 0694 03FB00F3 		mul	r3, r3, r0
 7235 0698 0B44     		add	r3, r3, r1
 7236 069a 0C33     		adds	r3, r3, #12
 7237 069c 1A60     		str	r2, [r3]
 7238              	.L447:
2109:..\src/interruptions.c ****                 }
2110:..\src/interruptions.c ****             }
2111:..\src/interruptions.c ****             
2112:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7239              		.loc 1 2112 0
 7240 069e 884B     		ldr	r3, .L569
 7241 06a0 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7242 06a4 1D46     		mov	r5, r3
 7243 06a6 864B     		ldr	r3, .L569
 7244 06a8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7245 06ac 1946     		mov	r1, r3
 7246 06ae 884A     		ldr	r2, .L569+16
 7247 06b0 3423     		movs	r3, #52
 7248 06b2 03FB01F3 		mul	r3, r3, r1
 7249 06b6 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 168


 7250 06b8 0C33     		adds	r3, r3, #12
 7251 06ba 1C68     		ldr	r4, [r3]
 7252 06bc 804B     		ldr	r3, .L569
 7253 06be 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7254 06c2 1946     		mov	r1, r3
 7255 06c4 824A     		ldr	r2, .L569+16
 7256 06c6 3423     		movs	r3, #52
 7257 06c8 03FB01F3 		mul	r3, r3, r1
 7258 06cc 1344     		add	r3, r3, r2
 7259 06ce 1A68     		ldr	r2, [r3]
 7260 06d0 7B4B     		ldr	r3, .L569
 7261 06d2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7262 06d6 1846     		mov	r0, r3
 7263 06d8 7949     		ldr	r1, .L569
 7264 06da 0346     		mov	r3, r0
 7265 06dc 5B00     		lsls	r3, r3, #1
 7266 06de 0344     		add	r3, r3, r0
 7267 06e0 1B01     		lsls	r3, r3, #4
 7268 06e2 0B44     		add	r3, r3, r1
 7269 06e4 03F29513 		addw	r3, r3, #405
 7270 06e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7271 06ea 42FA03F6 		asr	r6, r2, r3
 7272 06ee 744B     		ldr	r3, .L569
 7273 06f0 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7274 06f4 1946     		mov	r1, r3
 7275 06f6 764A     		ldr	r2, .L569+16
 7276 06f8 3423     		movs	r3, #52
 7277 06fa 03FB01F3 		mul	r3, r3, r1
 7278 06fe 1344     		add	r3, r3, r2
 7279 0700 1C33     		adds	r3, r3, #28
 7280 0702 1A68     		ldr	r2, [r3]
 7281 0704 6E4B     		ldr	r3, .L569
 7282 0706 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7283 070a 1846     		mov	r0, r3
 7284 070c 6C49     		ldr	r1, .L569
 7285 070e 0346     		mov	r3, r0
 7286 0710 5B00     		lsls	r3, r3, #1
 7287 0712 0344     		add	r3, r3, r0
 7288 0714 1B01     		lsls	r3, r3, #4
 7289 0716 0B44     		add	r3, r3, r1
 7290 0718 03F29513 		addw	r3, r3, #405
 7291 071c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7292 071e 42FA03FE 		asr	lr, r2, r3
 7293 0722 6C4B     		ldr	r3, .L569+20
 7294 0724 1A69     		ldr	r2, [r3, #16]
 7295 0726 664B     		ldr	r3, .L569
 7296 0728 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7297 072c 1846     		mov	r0, r3
 7298 072e 6449     		ldr	r1, .L569
 7299 0730 0346     		mov	r3, r0
 7300 0732 5B00     		lsls	r3, r3, #1
 7301 0734 0344     		add	r3, r3, r0
 7302 0736 1B01     		lsls	r3, r3, #4
 7303 0738 0B44     		add	r3, r3, r1
 7304 073a 03F29513 		addw	r3, r3, #405
 7305 073e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7306 0740 42FA03F3 		asr	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 169


 7307 0744 7246     		mov	r2, lr
 7308 0746 3146     		mov	r1, r6
 7309 0748 0120     		movs	r0, #1
 7310 074a FFF7FEFF 		bl	curr_estim
 7311 074e 0346     		mov	r3, r0
 7312 0750 E31A     		subs	r3, r4, r3
 7313 0752 6149     		ldr	r1, .L569+24
 7314 0754 1846     		mov	r0, r3
 7315 0756 FFF7FEFF 		bl	filter
 7316 075a 0346     		mov	r3, r0
 7317 075c 1BB2     		sxth	r3, r3
 7318 075e 1946     		mov	r1, r3
 7319 0760 5B4A     		ldr	r2, .L569+16
 7320 0762 3423     		movs	r3, #52
 7321 0764 03FB05F3 		mul	r3, r3, r5
 7322 0768 1344     		add	r3, r3, r2
 7323 076a 1033     		adds	r3, r3, #16
 7324 076c 1960     		str	r1, [r3]
 7325              	.L445:
2113:..\src/interruptions.c ****         }
2114:..\src/interruptions.c ****     
2115:..\src/interruptions.c ****         // Check Interrupt 
2116:..\src/interruptions.c ****     
2117:..\src/interruptions.c ****         if (interrupt_flag){
 7326              		.loc 1 2117 0
 7327 076e 5B4B     		ldr	r3, .L569+28
 7328 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7329 0772 002B     		cmp	r3, #0
 7330 0774 06D0     		beq	.L433
2118:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7331              		.loc 1 2118 0
 7332 0776 594B     		ldr	r3, .L569+28
 7333 0778 0022     		movs	r2, #0
 7334 077a 1A70     		strb	r2, [r3]
2119:..\src/interruptions.c ****             interrupt_manager();
 7335              		.loc 1 2119 0
 7336 077c FFF7FEFF 		bl	interrupt_manager
 7337 0780 00E0     		b	.L433
 7338              	.L547:
2016:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7339              		.loc 1 2016 0
 7340 0782 00BF     		nop
 7341              	.L433:
2120:..\src/interruptions.c ****         }
2121:..\src/interruptions.c **** 
2122:..\src/interruptions.c ****     }
2123:..\src/interruptions.c ****     
2124:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2125:..\src/interruptions.c ****         
2126:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2127:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7342              		.loc 1 2127 0
 7343 0784 564B     		ldr	r3, .L569+32
 7344 0786 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7345 078a 002B     		cmp	r3, #0
 7346 078c 05D1     		bne	.L449
2128:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 170


 7347              		.loc 1 2128 0
 7348 078e 554B     		ldr	r3, .L569+36
 7349 0790 0022     		movs	r2, #0
 7350 0792 1A70     		strb	r2, [r3]
2129:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7351              		.loc 1 2129 0
 7352 0794 544B     		ldr	r3, .L569+40
 7353 0796 0022     		movs	r2, #0
 7354 0798 1A70     		strb	r2, [r3]
 7355              	.L449:
2130:..\src/interruptions.c ****     }
2131:..\src/interruptions.c **** 
2132:..\src/interruptions.c ****     // EMG 1 calibration state machine
2133:..\src/interruptions.c ****    
2134:..\src/interruptions.c ****     // Calibration state machine
2135:..\src/interruptions.c ****     switch(emg_1_status) {
 7356              		.loc 1 2135 0
 7357 079a 524B     		ldr	r3, .L569+36
 7358 079c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7359 079e 032B     		cmp	r3, #3
 7360 07a0 00F2FF80 		bhi	.L548
 7361 07a4 01A2     		adr	r2, .L452
 7362 07a6 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7363 07aa 00BF     		.p2align 2
 7364              	.L452:
 7365 07ac BD070000 		.word	.L451+1
 7366 07b0 6D080000 		.word	.L453+1
 7367 07b4 83080000 		.word	.L454+1
 7368 07b8 F9080000 		.word	.L455+1
 7369              		.p2align 1
 7370              	.L451:
2136:..\src/interruptions.c ****         case NORMAL: // normal execution
2137:..\src/interruptions.c ****             
2138:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7371              		.loc 1 2138 0
 7372 07bc 404B     		ldr	r3, .L569
 7373 07be 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7374 07c2 022B     		cmp	r3, #2
 7375 07c4 13D0     		beq	.L456
 7376              		.loc 1 2138 0 is_stmt 0 discriminator 1
 7377 07c6 3E4B     		ldr	r3, .L569
 7378 07c8 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7379 07cc 032B     		cmp	r3, #3
 7380 07ce 0ED0     		beq	.L456
2139:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7381              		.loc 1 2139 0 is_stmt 1
 7382 07d0 434B     		ldr	r3, .L569+32
 7383 07d2 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7384 07d6 0233     		adds	r3, r3, #2
 7385 07d8 3A4A     		ldr	r2, .L569+4
 7386 07da 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7387 07de A3F26763 		subw	r3, r3, #1639
 7388 07e2 5722     		movs	r2, #87
 7389 07e4 02FB03F3 		mul	r3, r2, r3
 7390 07e8 5B11     		asrs	r3, r3, #5
 7391 07ea 7B60     		str	r3, [r7, #4]
 7392 07ec 07E0     		b	.L457
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 171


 7393              	.L456:
2140:..\src/interruptions.c ****             }
2141:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2142:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7394              		.loc 1 2142 0
 7395 07ee 3C4B     		ldr	r3, .L569+32
 7396 07f0 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7397 07f4 0233     		adds	r3, r3, #2
 7398 07f6 334A     		ldr	r2, .L569+4
 7399 07f8 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7400 07fc 7B60     		str	r3, [r7, #4]
 7401              	.L457:
2143:..\src/interruptions.c ****             }
2144:..\src/interruptions.c ****             
2145:..\src/interruptions.c ****             if (i_aux < 0) 
 7402              		.loc 1 2145 0
 7403 07fe 7B68     		ldr	r3, [r7, #4]
 7404 0800 002B     		cmp	r3, #0
 7405 0802 01DA     		bge	.L458
2146:..\src/interruptions.c ****                 i_aux = 0;
 7406              		.loc 1 2146 0
 7407 0804 0023     		movs	r3, #0
 7408 0806 7B60     		str	r3, [r7, #4]
 7409              	.L458:
2147:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7410              		.loc 1 2147 0
 7411 0808 3849     		ldr	r1, .L569+44
 7412 080a 7868     		ldr	r0, [r7, #4]
 7413 080c FFF7FEFF 		bl	filter
 7414 0810 7860     		str	r0, [r7, #4]
2148:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7415              		.loc 1 2148 0
 7416 0812 7B68     		ldr	r3, [r7, #4]
 7417 0814 9B02     		lsls	r3, r3, #10
 7418 0816 1A46     		mov	r2, r3
 7419 0818 294B     		ldr	r3, .L569
 7420 081a D3F8F431 		ldr	r3, [r3, #500]
 7421 081e B2FBF3F3 		udiv	r3, r2, r3
 7422 0822 7B60     		str	r3, [r7, #4]
2149:..\src/interruptions.c **** 
2150:..\src/interruptions.c ****             if (interrupt_flag){
 7423              		.loc 1 2150 0
 7424 0824 2D4B     		ldr	r3, .L569+28
 7425 0826 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7426 0828 002B     		cmp	r3, #0
 7427 082a 04D0     		beq	.L459
2151:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7428              		.loc 1 2151 0
 7429 082c 2B4B     		ldr	r3, .L569+28
 7430 082e 0022     		movs	r2, #0
 7431 0830 1A70     		strb	r2, [r3]
2152:..\src/interruptions.c ****                 interrupt_manager();
 7432              		.loc 1 2152 0
 7433 0832 FFF7FEFF 		bl	interrupt_manager
 7434              	.L459:
2153:..\src/interruptions.c ****             }
2154:..\src/interruptions.c ****             //Saturation
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 172


2155:..\src/interruptions.c ****             if (i_aux < 0)
 7435              		.loc 1 2155 0
 7436 0836 7B68     		ldr	r3, [r7, #4]
 7437 0838 002B     		cmp	r3, #0
 7438 083a 02DA     		bge	.L460
2156:..\src/interruptions.c ****                 i_aux = 0;
 7439              		.loc 1 2156 0
 7440 083c 0023     		movs	r3, #0
 7441 083e 7B60     		str	r3, [r7, #4]
 7442 0840 06E0     		b	.L461
 7443              	.L460:
2157:..\src/interruptions.c ****             else 
2158:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7444              		.loc 1 2158 0
 7445 0842 7B68     		ldr	r3, [r7, #4]
 7446 0844 B3F5806F 		cmp	r3, #1024
 7447 0848 02DD     		ble	.L461
2159:..\src/interruptions.c ****                     i_aux = 1024;
 7448              		.loc 1 2159 0
 7449 084a 4FF48063 		mov	r3, #1024
 7450 084e 7B60     		str	r3, [r7, #4]
 7451              	.L461:
2160:..\src/interruptions.c ****             
2161:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7452              		.loc 1 2161 0
 7453 0850 274A     		ldr	r2, .L569+48
 7454 0852 7B68     		ldr	r3, [r7, #4]
 7455 0854 1360     		str	r3, [r2]
2162:..\src/interruptions.c **** 
2163:..\src/interruptions.c ****             if (interrupt_flag){
 7456              		.loc 1 2163 0
 7457 0856 214B     		ldr	r3, .L569+28
 7458 0858 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7459 085a 002B     		cmp	r3, #0
 7460 085c 00F0A380 		beq	.L549
2164:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7461              		.loc 1 2164 0
 7462 0860 1E4B     		ldr	r3, .L569+28
 7463 0862 0022     		movs	r2, #0
 7464 0864 1A70     		strb	r2, [r3]
2165:..\src/interruptions.c ****                 interrupt_manager();
 7465              		.loc 1 2165 0
 7466 0866 FFF7FEFF 		bl	interrupt_manager
2166:..\src/interruptions.c ****             }
2167:..\src/interruptions.c ****             
2168:..\src/interruptions.c ****             break;
 7467              		.loc 1 2168 0
 7468 086a 9CE0     		b	.L549
 7469              	.L453:
2169:..\src/interruptions.c **** 
2170:..\src/interruptions.c ****         case RESET: // reset variables
2171:..\src/interruptions.c ****             emg_counter_1 = 0;
 7470              		.loc 1 2171 0
 7471 086c 214B     		ldr	r3, .L569+52
 7472 086e 0022     		movs	r2, #0
 7473 0870 1A80     		strh	r2, [r3]	@ movhi
2172:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 173


 7474              		.loc 1 2172 0
 7475 0872 134B     		ldr	r3, .L569
 7476 0874 0022     		movs	r2, #0
 7477 0876 C3F8F421 		str	r2, [r3, #500]
2173:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7478              		.loc 1 2173 0
 7479 087a 1A4B     		ldr	r3, .L569+36
 7480 087c 0222     		movs	r2, #2
 7481 087e 1A70     		strb	r2, [r3]
2174:..\src/interruptions.c ****             break;
 7482              		.loc 1 2174 0
 7483 0880 96E0     		b	.L463
 7484              	.L454:
2175:..\src/interruptions.c **** 
2176:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2177:..\src/interruptions.c ****             emg_counter_1++;
 7485              		.loc 1 2177 0
 7486 0882 1C4B     		ldr	r3, .L569+52
 7487 0884 1B88     		ldrh	r3, [r3]
 7488 0886 0133     		adds	r3, r3, #1
 7489 0888 9AB2     		uxth	r2, r3
 7490 088a 1A4B     		ldr	r3, .L569+52
 7491 088c 1A80     		strh	r2, [r3]	@ movhi
2178:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7492              		.loc 1 2178 0
 7493 088e 194B     		ldr	r3, .L569+52
 7494 0890 1B88     		ldrh	r3, [r3]
 7495 0892 B3F5FA7F 		cmp	r3, #500
 7496 0896 40F08880 		bne	.L550
2179:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7497              		.loc 1 2179 0
 7498 089a 164B     		ldr	r3, .L569+52
 7499 089c 0022     		movs	r2, #0
 7500 089e 1A80     		strh	r2, [r3]	@ movhi
2180:..\src/interruptions.c ****                 LED_control(1);
 7501              		.loc 1 2180 0
 7502 08a0 0120     		movs	r0, #1
 7503 08a2 FFF7FEFF 		bl	LED_control
2181:..\src/interruptions.c **** 				
2182:..\src/interruptions.c ****                 if (interrupt_flag){
 7504              		.loc 1 2182 0
 7505 08a6 0D4B     		ldr	r3, .L569+28
 7506 08a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7507 08aa 002B     		cmp	r3, #0
 7508 08ac 04D0     		beq	.L465
2183:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7509              		.loc 1 2183 0
 7510 08ae 0B4B     		ldr	r3, .L569+28
 7511 08b0 0022     		movs	r2, #0
 7512 08b2 1A70     		strb	r2, [r3]
2184:..\src/interruptions.c ****                     interrupt_manager();
 7513              		.loc 1 2184 0
 7514 08b4 FFF7FEFF 		bl	interrupt_manager
 7515              	.L465:
2185:..\src/interruptions.c ****                 }
2186:..\src/interruptions.c ****                 
2187:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 174


 7516              		.loc 1 2187 0
 7517 08b8 0A4B     		ldr	r3, .L569+36
 7518 08ba 0322     		movs	r2, #3
 7519 08bc 1A70     		strb	r2, [r3]
2188:..\src/interruptions.c ****             }
2189:..\src/interruptions.c ****             break;
 7520              		.loc 1 2189 0
 7521 08be 74E0     		b	.L550
 7522              	.L570:
 7523              		.align	2
 7524              	.L569:
 7525 08c0 00000000 		.word	g_mem
 7526 08c4 00000000 		.word	ADC_buf
 7527 08c8 00000000 		.word	pwm_sign
 7528 08cc 08000000 		.word	filt_i+8
 7529 08d0 00000000 		.word	g_meas
 7530 08d4 00000000 		.word	g_ref
 7531 08d8 08000000 		.word	filt_curr_diff+8
 7532 08dc 00000000 		.word	interrupt_flag
 7533 08e0 00000000 		.word	c_mem
 7534 08e4 00000000 		.word	emg_1_status
 7535 08e8 00000000 		.word	emg_2_status
 7536 08ec 00000000 		.word	filt_emg
 7537 08f0 00000000 		.word	g_adc_meas
 7538 08f4 78010000 		.word	emg_counter_1.10645
 7539              	.L455:
2190:..\src/interruptions.c **** 
2191:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2192:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2193:..\src/interruptions.c ****             emg_counter_1++;
 7540              		.loc 1 2193 0
 7541 08f8 AF4B     		ldr	r3, .L571
 7542 08fa 1B88     		ldrh	r3, [r3]
 7543 08fc 0133     		adds	r3, r3, #1
 7544 08fe 9AB2     		uxth	r2, r3
 7545 0900 AD4B     		ldr	r3, .L571
 7546 0902 1A80     		strh	r2, [r3]	@ movhi
2194:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7547              		.loc 1 2194 0
 7548 0904 AD4B     		ldr	r3, .L571+4
 7549 0906 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7550 090a 0233     		adds	r3, r3, #2
 7551 090c AC4A     		ldr	r2, .L571+8
 7552 090e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7553 0912 002B     		cmp	r3, #0
 7554 0914 07DA     		bge	.L466
2195:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7555              		.loc 1 2195 0
 7556 0916 A94B     		ldr	r3, .L571+4
 7557 0918 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7558 091c 0233     		adds	r3, r3, #2
 7559 091e A84A     		ldr	r2, .L571+8
 7560 0920 0021     		movs	r1, #0
 7561 0922 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7562              	.L466:
2196:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7563              		.loc 1 2196 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 175


 7564 0926 A54B     		ldr	r3, .L571+4
 7565 0928 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7566 092c 0233     		adds	r3, r3, #2
 7567 092e A44A     		ldr	r2, .L571+8
 7568 0930 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7569 0934 A349     		ldr	r1, .L571+12
 7570 0936 1846     		mov	r0, r3
 7571 0938 FFF7FEFF 		bl	filter
 7572 093c 0246     		mov	r2, r0
 7573 093e A24B     		ldr	r3, .L571+16
 7574 0940 D3F8F431 		ldr	r3, [r3, #500]
 7575 0944 1344     		add	r3, r3, r2
 7576 0946 A04A     		ldr	r2, .L571+16
 7577 0948 C2F8F431 		str	r3, [r2, #500]
2197:..\src/interruptions.c ****             
2198:..\src/interruptions.c ****             if (interrupt_flag){
 7578              		.loc 1 2198 0
 7579 094c 9F4B     		ldr	r3, .L571+20
 7580 094e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7581 0950 002B     		cmp	r3, #0
 7582 0952 04D0     		beq	.L467
2199:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7583              		.loc 1 2199 0
 7584 0954 9D4B     		ldr	r3, .L571+20
 7585 0956 0022     		movs	r2, #0
 7586 0958 1A70     		strb	r2, [r3]
2200:..\src/interruptions.c ****                 interrupt_manager();
 7587              		.loc 1 2200 0
 7588 095a FFF7FEFF 		bl	interrupt_manager
 7589              	.L467:
2201:..\src/interruptions.c ****             }
2202:..\src/interruptions.c ****             
2203:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7590              		.loc 1 2203 0
 7591 095e 964B     		ldr	r3, .L571
 7592 0960 1B88     		ldrh	r3, [r3]
 7593 0962 B3F57A7F 		cmp	r3, #1000
 7594 0966 22D1     		bne	.L551
2204:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7595              		.loc 1 2204 0
 7596 0968 974B     		ldr	r3, .L571+16
 7597 096a D3F8F431 		ldr	r3, [r3, #500]
 7598 096e 984A     		ldr	r2, .L571+24
 7599 0970 A2FB0323 		umull	r2, r3, r2, r3
 7600 0974 9B09     		lsrs	r3, r3, #6
 7601 0976 944A     		ldr	r2, .L571+16
 7602 0978 C2F8F431 		str	r3, [r2, #500]
2205:..\src/interruptions.c **** 
2206:..\src/interruptions.c ****                 if (interrupt_flag){
 7603              		.loc 1 2206 0
 7604 097c 934B     		ldr	r3, .L571+20
 7605 097e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7606 0980 002B     		cmp	r3, #0
 7607 0982 04D0     		beq	.L469
2207:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7608              		.loc 1 2207 0
 7609 0984 914B     		ldr	r3, .L571+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 176


 7610 0986 0022     		movs	r2, #0
 7611 0988 1A70     		strb	r2, [r3]
2208:..\src/interruptions.c ****                     interrupt_manager();
 7612              		.loc 1 2208 0
 7613 098a FFF7FEFF 		bl	interrupt_manager
 7614              	.L469:
2209:..\src/interruptions.c ****                 }                    
2210:..\src/interruptions.c ****                 
2211:..\src/interruptions.c ****                 LED_control(0);
 7615              		.loc 1 2211 0
 7616 098e 0020     		movs	r0, #0
 7617 0990 FFF7FEFF 		bl	LED_control
2212:..\src/interruptions.c **** 				
2213:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7618              		.loc 1 2213 0
 7619 0994 884B     		ldr	r3, .L571
 7620 0996 0022     		movs	r2, #0
 7621 0998 1A80     		strh	r2, [r3]	@ movhi
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7622              		.loc 1 2215 0
 7623 099a 8E4B     		ldr	r3, .L571+28
 7624 099c 0022     		movs	r2, #0
 7625 099e 1A70     		strb	r2, [r3]
2216:..\src/interruptions.c ****             }
2217:..\src/interruptions.c ****             break;
 7626              		.loc 1 2217 0
 7627 09a0 05E0     		b	.L551
 7628              	.L548:
2218:..\src/interruptions.c **** 
2219:..\src/interruptions.c ****         default:
2220:..\src/interruptions.c ****             break;
 7629              		.loc 1 2220 0
 7630 09a2 00BF     		nop
 7631 09a4 04E0     		b	.L463
 7632              	.L549:
2168:..\src/interruptions.c **** 
 7633              		.loc 1 2168 0
 7634 09a6 00BF     		nop
 7635 09a8 02E0     		b	.L463
 7636              	.L550:
2189:..\src/interruptions.c **** 
 7637              		.loc 1 2189 0
 7638 09aa 00BF     		nop
 7639 09ac 00E0     		b	.L463
 7640              	.L551:
2217:..\src/interruptions.c **** 
 7641              		.loc 1 2217 0
 7642 09ae 00BF     		nop
 7643              	.L463:
2221:..\src/interruptions.c ****     }
2222:..\src/interruptions.c **** 
2223:..\src/interruptions.c ****     if (interrupt_flag){
 7644              		.loc 1 2223 0
 7645 09b0 864B     		ldr	r3, .L571+20
 7646 09b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7647 09b4 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 177


 7648 09b6 04D0     		beq	.L470
2224:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7649              		.loc 1 2224 0
 7650 09b8 844B     		ldr	r3, .L571+20
 7651 09ba 0022     		movs	r2, #0
 7652 09bc 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****         interrupt_manager();
 7653              		.loc 1 2225 0
 7654 09be FFF7FEFF 		bl	interrupt_manager
 7655              	.L470:
2226:..\src/interruptions.c ****     }
2227:..\src/interruptions.c ****     // EMG 2 calibration state machine
2228:..\src/interruptions.c ****     switch(emg_2_status) {
 7656              		.loc 1 2228 0
 7657 09c2 854B     		ldr	r3, .L571+32
 7658 09c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7659 09c6 052B     		cmp	r3, #5
 7660 09c8 00F2CA81 		bhi	.L552
 7661 09cc 01A2     		adr	r2, .L473
 7662 09ce 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7663 09d2 00BF     		.p2align 2
 7664              	.L473:
 7665 09d4 ED090000 		.word	.L472+1
 7666 09d8 8D0A0000 		.word	.L474+1
 7667 09dc B50A0000 		.word	.L475+1
 7668 09e0 F30A0000 		.word	.L476+1
 7669 09e4 A50B0000 		.word	.L477+1
 7670 09e8 E90B0000 		.word	.L478+1
 7671              		.p2align 1
 7672              	.L472:
2229:..\src/interruptions.c ****         case NORMAL: // normal execution
2230:..\src/interruptions.c ****         
2231:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7673              		.loc 1 2231 0
 7674 09ec 764B     		ldr	r3, .L571+16
 7675 09ee 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7676 09f2 022B     		cmp	r3, #2
 7677 09f4 14D0     		beq	.L479
 7678              		.loc 1 2231 0 is_stmt 0 discriminator 1
 7679 09f6 744B     		ldr	r3, .L571+16
 7680 09f8 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7681 09fc 032B     		cmp	r3, #3
 7682 09fe 0FD0     		beq	.L479
2232:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7683              		.loc 1 2232 0 is_stmt 1
 7684 0a00 6E4B     		ldr	r3, .L571+4
 7685 0a02 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7686 0a06 C3F10303 		rsb	r3, r3, #3
 7687 0a0a 6D4A     		ldr	r2, .L571+8
 7688 0a0c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7689 0a10 A3F26763 		subw	r3, r3, #1639
 7690 0a14 5722     		movs	r2, #87
 7691 0a16 02FB03F3 		mul	r3, r2, r3
 7692 0a1a 5B11     		asrs	r3, r3, #5
 7693 0a1c 7B60     		str	r3, [r7, #4]
 7694 0a1e 08E0     		b	.L480
 7695              	.L479:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 178


2233:..\src/interruptions.c ****             }
2234:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2235:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7696              		.loc 1 2235 0
 7697 0a20 664B     		ldr	r3, .L571+4
 7698 0a22 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7699 0a26 C3F10303 		rsb	r3, r3, #3
 7700 0a2a 654A     		ldr	r2, .L571+8
 7701 0a2c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7702 0a30 7B60     		str	r3, [r7, #4]
 7703              	.L480:
2236:..\src/interruptions.c ****             }
2237:..\src/interruptions.c **** 
2238:..\src/interruptions.c ****             if (i_aux < 0)
 7704              		.loc 1 2238 0
 7705 0a32 7B68     		ldr	r3, [r7, #4]
 7706 0a34 002B     		cmp	r3, #0
 7707 0a36 01DA     		bge	.L481
2239:..\src/interruptions.c ****                 i_aux = 0;
 7708              		.loc 1 2239 0
 7709 0a38 0023     		movs	r3, #0
 7710 0a3a 7B60     		str	r3, [r7, #4]
 7711              	.L481:
2240:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7712              		.loc 1 2240 0
 7713 0a3c 6749     		ldr	r1, .L571+36
 7714 0a3e 7868     		ldr	r0, [r7, #4]
 7715 0a40 FFF7FEFF 		bl	filter
 7716 0a44 7860     		str	r0, [r7, #4]
2241:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7717              		.loc 1 2241 0
 7718 0a46 7B68     		ldr	r3, [r7, #4]
 7719 0a48 9B02     		lsls	r3, r3, #10
 7720 0a4a 1A46     		mov	r2, r3
 7721 0a4c 5E4B     		ldr	r3, .L571+16
 7722 0a4e D3F8F831 		ldr	r3, [r3, #504]
 7723 0a52 B2FBF3F3 		udiv	r3, r2, r3
 7724 0a56 7B60     		str	r3, [r7, #4]
2242:..\src/interruptions.c **** 
2243:..\src/interruptions.c ****             if (interrupt_flag){
 7725              		.loc 1 2243 0
 7726 0a58 5C4B     		ldr	r3, .L571+20
 7727 0a5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7728 0a5c 002B     		cmp	r3, #0
 7729 0a5e 04D0     		beq	.L482
2244:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7730              		.loc 1 2244 0
 7731 0a60 5A4B     		ldr	r3, .L571+20
 7732 0a62 0022     		movs	r2, #0
 7733 0a64 1A70     		strb	r2, [r3]
2245:..\src/interruptions.c ****                 interrupt_manager();
 7734              		.loc 1 2245 0
 7735 0a66 FFF7FEFF 		bl	interrupt_manager
 7736              	.L482:
2246:..\src/interruptions.c ****             }
2247:..\src/interruptions.c ****             
2248:..\src/interruptions.c ****             if (i_aux < 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 179


 7737              		.loc 1 2248 0
 7738 0a6a 7B68     		ldr	r3, [r7, #4]
 7739 0a6c 002B     		cmp	r3, #0
 7740 0a6e 02DA     		bge	.L483
2249:..\src/interruptions.c ****                 i_aux = 0;
 7741              		.loc 1 2249 0
 7742 0a70 0023     		movs	r3, #0
 7743 0a72 7B60     		str	r3, [r7, #4]
 7744 0a74 06E0     		b	.L484
 7745              	.L483:
2250:..\src/interruptions.c ****             else 
2251:..\src/interruptions.c ****                 if (i_aux > 1024)
 7746              		.loc 1 2251 0
 7747 0a76 7B68     		ldr	r3, [r7, #4]
 7748 0a78 B3F5806F 		cmp	r3, #1024
 7749 0a7c 02DD     		ble	.L484
2252:..\src/interruptions.c ****                     i_aux = 1024;
 7750              		.loc 1 2252 0
 7751 0a7e 4FF48063 		mov	r3, #1024
 7752 0a82 7B60     		str	r3, [r7, #4]
 7753              	.L484:
2253:..\src/interruptions.c ****             
2254:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7754              		.loc 1 2254 0
 7755 0a84 564A     		ldr	r2, .L571+40
 7756 0a86 7B68     		ldr	r3, [r7, #4]
 7757 0a88 5360     		str	r3, [r2, #4]
2255:..\src/interruptions.c **** 
2256:..\src/interruptions.c ****             break;
 7758              		.loc 1 2256 0
 7759 0a8a 72E1     		b	.L485
 7760              	.L474:
2257:..\src/interruptions.c **** 
2258:..\src/interruptions.c ****         case RESET: // reset variables
2259:..\src/interruptions.c ****             emg_counter_2 = 0;
 7761              		.loc 1 2259 0
 7762 0a8c 554B     		ldr	r3, .L571+44
 7763 0a8e 0022     		movs	r2, #0
 7764 0a90 1A80     		strh	r2, [r3]	@ movhi
2260:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7765              		.loc 1 2260 0
 7766 0a92 4D4B     		ldr	r3, .L571+16
 7767 0a94 0022     		movs	r2, #0
 7768 0a96 C3F8F821 		str	r2, [r3, #504]
2261:..\src/interruptions.c **** 
2262:..\src/interruptions.c ****             if (interrupt_flag){
 7769              		.loc 1 2262 0
 7770 0a9a 4C4B     		ldr	r3, .L571+20
 7771 0a9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7772 0a9e 002B     		cmp	r3, #0
 7773 0aa0 04D0     		beq	.L486
2263:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7774              		.loc 1 2263 0
 7775 0aa2 4A4B     		ldr	r3, .L571+20
 7776 0aa4 0022     		movs	r2, #0
 7777 0aa6 1A70     		strb	r2, [r3]
2264:..\src/interruptions.c ****                 interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 180


 7778              		.loc 1 2264 0
 7779 0aa8 FFF7FEFF 		bl	interrupt_manager
 7780              	.L486:
2265:..\src/interruptions.c ****             }
2266:..\src/interruptions.c ****             
2267:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7781              		.loc 1 2267 0
 7782 0aac 4A4B     		ldr	r3, .L571+32
 7783 0aae 0422     		movs	r2, #4
 7784 0ab0 1A70     		strb	r2, [r3]
2268:..\src/interruptions.c ****             break;
 7785              		.loc 1 2268 0
 7786 0ab2 5EE1     		b	.L485
 7787              	.L475:
2269:..\src/interruptions.c **** 
2270:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2271:..\src/interruptions.c ****             emg_counter_2++;
 7788              		.loc 1 2271 0
 7789 0ab4 4B4B     		ldr	r3, .L571+44
 7790 0ab6 1B88     		ldrh	r3, [r3]
 7791 0ab8 0133     		adds	r3, r3, #1
 7792 0aba 9AB2     		uxth	r2, r3
 7793 0abc 494B     		ldr	r3, .L571+44
 7794 0abe 1A80     		strh	r2, [r3]	@ movhi
2272:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7795              		.loc 1 2272 0
 7796 0ac0 484B     		ldr	r3, .L571+44
 7797 0ac2 1B88     		ldrh	r3, [r3]
 7798 0ac4 B3F5FA7F 		cmp	r3, #500
 7799 0ac8 40F04C81 		bne	.L553
2273:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7800              		.loc 1 2273 0
 7801 0acc 454B     		ldr	r3, .L571+44
 7802 0ace 0022     		movs	r2, #0
 7803 0ad0 1A80     		strh	r2, [r3]	@ movhi
2274:..\src/interruptions.c ****                 LED_control(1);
 7804              		.loc 1 2274 0
 7805 0ad2 0120     		movs	r0, #1
 7806 0ad4 FFF7FEFF 		bl	LED_control
2275:..\src/interruptions.c **** 
2276:..\src/interruptions.c ****                 if (interrupt_flag){
 7807              		.loc 1 2276 0
 7808 0ad8 3C4B     		ldr	r3, .L571+20
 7809 0ada 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7810 0adc 002B     		cmp	r3, #0
 7811 0ade 04D0     		beq	.L488
2277:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7812              		.loc 1 2277 0
 7813 0ae0 3A4B     		ldr	r3, .L571+20
 7814 0ae2 0022     		movs	r2, #0
 7815 0ae4 1A70     		strb	r2, [r3]
2278:..\src/interruptions.c ****                     interrupt_manager();
 7816              		.loc 1 2278 0
 7817 0ae6 FFF7FEFF 		bl	interrupt_manager
 7818              	.L488:
2279:..\src/interruptions.c ****                 }
2280:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 181


2281:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7819              		.loc 1 2281 0
 7820 0aea 3B4B     		ldr	r3, .L571+32
 7821 0aec 0322     		movs	r2, #3
 7822 0aee 1A70     		strb	r2, [r3]
2282:..\src/interruptions.c ****             }
2283:..\src/interruptions.c ****             break;
 7823              		.loc 1 2283 0
 7824 0af0 38E1     		b	.L553
 7825              	.L476:
2284:..\src/interruptions.c **** 
2285:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2286:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2287:..\src/interruptions.c ****             emg_counter_2++;
 7826              		.loc 1 2287 0
 7827 0af2 3C4B     		ldr	r3, .L571+44
 7828 0af4 1B88     		ldrh	r3, [r3]
 7829 0af6 0133     		adds	r3, r3, #1
 7830 0af8 9AB2     		uxth	r2, r3
 7831 0afa 3A4B     		ldr	r3, .L571+44
 7832 0afc 1A80     		strh	r2, [r3]	@ movhi
2288:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7833              		.loc 1 2288 0
 7834 0afe 2F4B     		ldr	r3, .L571+4
 7835 0b00 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7836 0b04 C3F10303 		rsb	r3, r3, #3
 7837 0b08 2D4A     		ldr	r2, .L571+8
 7838 0b0a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7839 0b0e 002B     		cmp	r3, #0
 7840 0b10 08DA     		bge	.L489
2289:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7841              		.loc 1 2289 0
 7842 0b12 2A4B     		ldr	r3, .L571+4
 7843 0b14 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7844 0b18 C3F10303 		rsb	r3, r3, #3
 7845 0b1c 284A     		ldr	r2, .L571+8
 7846 0b1e 0021     		movs	r1, #0
 7847 0b20 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7848              	.L489:
2290:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7849              		.loc 1 2290 0
 7850 0b24 254B     		ldr	r3, .L571+4
 7851 0b26 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7852 0b2a C3F10303 		rsb	r3, r3, #3
 7853 0b2e 244A     		ldr	r2, .L571+8
 7854 0b30 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7855 0b34 2949     		ldr	r1, .L571+36
 7856 0b36 1846     		mov	r0, r3
 7857 0b38 FFF7FEFF 		bl	filter
 7858 0b3c 0246     		mov	r2, r0
 7859 0b3e 224B     		ldr	r3, .L571+16
 7860 0b40 D3F8F831 		ldr	r3, [r3, #504]
 7861 0b44 1344     		add	r3, r3, r2
 7862 0b46 204A     		ldr	r2, .L571+16
 7863 0b48 C2F8F831 		str	r3, [r2, #504]
2291:..\src/interruptions.c **** 
2292:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 182


 7864              		.loc 1 2292 0
 7865 0b4c 1F4B     		ldr	r3, .L571+20
 7866 0b4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7867 0b50 002B     		cmp	r3, #0
 7868 0b52 04D0     		beq	.L490
2293:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7869              		.loc 1 2293 0
 7870 0b54 1D4B     		ldr	r3, .L571+20
 7871 0b56 0022     		movs	r2, #0
 7872 0b58 1A70     		strb	r2, [r3]
2294:..\src/interruptions.c ****                 interrupt_manager();
 7873              		.loc 1 2294 0
 7874 0b5a FFF7FEFF 		bl	interrupt_manager
 7875              	.L490:
2295:..\src/interruptions.c ****             }
2296:..\src/interruptions.c ****             
2297:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7876              		.loc 1 2297 0
 7877 0b5e 214B     		ldr	r3, .L571+44
 7878 0b60 1B88     		ldrh	r3, [r3]
 7879 0b62 B3F57A7F 		cmp	r3, #1000
 7880 0b66 40F0FF80 		bne	.L554
2298:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7881              		.loc 1 2298 0
 7882 0b6a 174B     		ldr	r3, .L571+16
 7883 0b6c D3F8F831 		ldr	r3, [r3, #504]
 7884 0b70 174A     		ldr	r2, .L571+24
 7885 0b72 A2FB0323 		umull	r2, r3, r2, r3
 7886 0b76 9B09     		lsrs	r3, r3, #6
 7887 0b78 134A     		ldr	r2, .L571+16
 7888 0b7a C2F8F831 		str	r3, [r2, #504]
2299:..\src/interruptions.c ****                 LED_control(0);
 7889              		.loc 1 2299 0
 7890 0b7e 0020     		movs	r0, #0
 7891 0b80 FFF7FEFF 		bl	LED_control
2300:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7892              		.loc 1 2300 0
 7893 0b84 174B     		ldr	r3, .L571+44
 7894 0b86 0022     		movs	r2, #0
 7895 0b88 1A80     		strh	r2, [r3]	@ movhi
2301:..\src/interruptions.c ****             
2302:..\src/interruptions.c ****                 if (interrupt_flag){
 7896              		.loc 1 2302 0
 7897 0b8a 104B     		ldr	r3, .L571+20
 7898 0b8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7899 0b8e 002B     		cmp	r3, #0
 7900 0b90 04D0     		beq	.L492
2303:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7901              		.loc 1 2303 0
 7902 0b92 0E4B     		ldr	r3, .L571+20
 7903 0b94 0022     		movs	r2, #0
 7904 0b96 1A70     		strb	r2, [r3]
2304:..\src/interruptions.c ****                     interrupt_manager();
 7905              		.loc 1 2304 0
 7906 0b98 FFF7FEFF 		bl	interrupt_manager
 7907              	.L492:
2305:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 183


2306:..\src/interruptions.c ****                 
2307:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7908              		.loc 1 2307 0
 7909 0b9c 0E4B     		ldr	r3, .L571+32
 7910 0b9e 0522     		movs	r2, #5
 7911 0ba0 1A70     		strb	r2, [r3]
2308:..\src/interruptions.c ****             }
2309:..\src/interruptions.c ****             break;
 7912              		.loc 1 2309 0
 7913 0ba2 E1E0     		b	.L554
 7914              	.L477:
2310:..\src/interruptions.c **** 
2311:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2312:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7915              		.loc 1 2312 0
 7916 0ba4 0B4B     		ldr	r3, .L571+28
 7917 0ba6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7918 0ba8 002B     		cmp	r3, #0
 7919 0baa 40F0DF80 		bne	.L555
2313:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7920              		.loc 1 2313 0
 7921 0bae 0A4B     		ldr	r3, .L571+32
 7922 0bb0 0222     		movs	r2, #2
 7923 0bb2 1A70     		strb	r2, [r3]
2314:..\src/interruptions.c ****             break;
 7924              		.loc 1 2314 0
 7925 0bb4 DAE0     		b	.L555
 7926              	.L572:
 7927 0bb6 00BF     		.align	2
 7928              	.L571:
 7929 0bb8 78010000 		.word	emg_counter_1.10645
 7930 0bbc 00000000 		.word	c_mem
 7931 0bc0 00000000 		.word	ADC_buf
 7932 0bc4 00000000 		.word	filt_emg
 7933 0bc8 00000000 		.word	g_mem
 7934 0bcc 00000000 		.word	interrupt_flag
 7935 0bd0 D34D6210 		.word	274877907
 7936 0bd4 00000000 		.word	emg_1_status
 7937 0bd8 00000000 		.word	emg_2_status
 7938 0bdc 08000000 		.word	filt_emg+8
 7939 0be0 00000000 		.word	g_adc_meas
 7940 0be4 7A010000 		.word	emg_counter_2.10646
 7941              	.L478:
2315:..\src/interruptions.c **** 
2316:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2317:..\src/interruptions.c ****             emg_counter_2++;
 7942              		.loc 1 2317 0
 7943 0be8 B04B     		ldr	r3, .L573
 7944 0bea 1B88     		ldrh	r3, [r3]
 7945 0bec 0133     		adds	r3, r3, #1
 7946 0bee 9AB2     		uxth	r2, r3
 7947 0bf0 AE4B     		ldr	r3, .L573
 7948 0bf2 1A80     		strh	r2, [r3]	@ movhi
2318:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7949              		.loc 1 2318 0
 7950 0bf4 AD4B     		ldr	r3, .L573
 7951 0bf6 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 184


 7952 0bf8 B3F5FA7F 		cmp	r3, #500
 7953 0bfc 40F0B880 		bne	.L556
2319:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7954              		.loc 1 2319 0
 7955 0c00 AA4B     		ldr	r3, .L573
 7956 0c02 0022     		movs	r2, #0
 7957 0c04 1A80     		strh	r2, [r3]	@ movhi
2320:..\src/interruptions.c ****                 
2321:..\src/interruptions.c ****                 if (interrupt_flag){
 7958              		.loc 1 2321 0
 7959 0c06 AA4B     		ldr	r3, .L573+4
 7960 0c08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7961 0c0a 002B     		cmp	r3, #0
 7962 0c0c 04D0     		beq	.L495
2322:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7963              		.loc 1 2322 0
 7964 0c0e A84B     		ldr	r3, .L573+4
 7965 0c10 0022     		movs	r2, #0
 7966 0c12 1A70     		strb	r2, [r3]
2323:..\src/interruptions.c ****                     interrupt_manager();
 7967              		.loc 1 2323 0
 7968 0c14 FFF7FEFF 		bl	interrupt_manager
 7969              	.L495:
2324:..\src/interruptions.c ****                 }
2325:..\src/interruptions.c ****                 
2326:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7970              		.loc 1 2326 0
 7971 0c18 A64B     		ldr	r3, .L573+8
 7972 0c1a 0022     		movs	r2, #0
 7973 0c1c 1A70     		strb	r2, [r3]
 7974 0c1e 93E0     		b	.L496
 7975              	.L500:
2327:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7976              		.loc 1 2327 0
 7977 0c20 A44B     		ldr	r3, .L573+8
 7978 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7979 0c24 1946     		mov	r1, r3
 7980 0c26 A44A     		ldr	r2, .L573+12
 7981 0c28 0B46     		mov	r3, r1
 7982 0c2a DB00     		lsls	r3, r3, #3
 7983 0c2c 5B1A     		subs	r3, r3, r1
 7984 0c2e 1B01     		lsls	r3, r3, #4
 7985 0c30 1344     		add	r3, r3, r2
 7986 0c32 03F58773 		add	r3, r3, #270
 7987 0c36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7988 0c38 022B     		cmp	r3, #2
 7989 0c3a 37D0     		beq	.L497
2328:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7990              		.loc 1 2328 0 discriminator 1
 7991 0c3c 9D4B     		ldr	r3, .L573+8
 7992 0c3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7993 0c40 1946     		mov	r1, r3
 7994 0c42 9D4A     		ldr	r2, .L573+12
 7995 0c44 0B46     		mov	r3, r1
 7996 0c46 DB00     		lsls	r3, r3, #3
 7997 0c48 5B1A     		subs	r3, r3, r1
 7998 0c4a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 185


 7999 0c4c 1344     		add	r3, r3, r2
 8000 0c4e 03F58773 		add	r3, r3, #270
 8001 0c52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2327:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8002              		.loc 1 2327 0 discriminator 1
 8003 0c54 032B     		cmp	r3, #3
 8004 0c56 29D0     		beq	.L497
2329:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8005              		.loc 1 2329 0
 8006 0c58 964B     		ldr	r3, .L573+8
 8007 0c5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8008 0c5c 1946     		mov	r1, r3
 8009 0c5e 964A     		ldr	r2, .L573+12
 8010 0c60 0B46     		mov	r3, r1
 8011 0c62 DB00     		lsls	r3, r3, #3
 8012 0c64 5B1A     		subs	r3, r3, r1
 8013 0c66 1B01     		lsls	r3, r3, #4
 8014 0c68 1344     		add	r3, r3, r2
 8015 0c6a 03F58773 		add	r3, r3, #270
 8016 0c6e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2328:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8017              		.loc 1 2328 0
 8018 0c70 042B     		cmp	r3, #4
 8019 0c72 1BD0     		beq	.L497
2330:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8020              		.loc 1 2330 0
 8021 0c74 8F4B     		ldr	r3, .L573+8
 8022 0c76 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8023 0c78 1946     		mov	r1, r3
 8024 0c7a 8F4A     		ldr	r2, .L573+12
 8025 0c7c 0B46     		mov	r3, r1
 8026 0c7e DB00     		lsls	r3, r3, #3
 8027 0c80 5B1A     		subs	r3, r3, r1
 8028 0c82 1B01     		lsls	r3, r3, #4
 8029 0c84 1344     		add	r3, r3, r2
 8030 0c86 03F58773 		add	r3, r3, #270
 8031 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2329:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8032              		.loc 1 2329 0
 8033 0c8c 052B     		cmp	r3, #5
 8034 0c8e 0DD0     		beq	.L497
2331:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 8035              		.loc 1 2331 0
 8036 0c90 884B     		ldr	r3, .L573+8
 8037 0c92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8038 0c94 1946     		mov	r1, r3
 8039 0c96 884A     		ldr	r2, .L573+12
 8040 0c98 0B46     		mov	r3, r1
 8041 0c9a DB00     		lsls	r3, r3, #3
 8042 0c9c 5B1A     		subs	r3, r3, r1
 8043 0c9e 1B01     		lsls	r3, r3, #4
 8044 0ca0 1344     		add	r3, r3, r2
 8045 0ca2 03F58773 		add	r3, r3, #270
 8046 0ca6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2330:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8047              		.loc 1 2330 0
 8048 0ca8 072B     		cmp	r3, #7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 186


 8049 0caa 47D1     		bne	.L498
 8050              	.L497:
2332:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 8051              		.loc 1 2332 0
 8052 0cac 814B     		ldr	r3, .L573+8
 8053 0cae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8054 0cb0 1946     		mov	r1, r3
 8055 0cb2 814A     		ldr	r2, .L573+12
 8056 0cb4 0B46     		mov	r3, r1
 8057 0cb6 DB00     		lsls	r3, r3, #3
 8058 0cb8 5B1A     		subs	r3, r3, r1
 8059 0cba 1B01     		lsls	r3, r3, #4
 8060 0cbc 1344     		add	r3, r3, r2
 8061 0cbe 03F20F13 		addw	r3, r3, #271
 8062 0cc2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8063 0cc4 002B     		cmp	r3, #0
 8064 0cc6 19D1     		bne	.L499
2333:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 8065              		.loc 1 2333 0
 8066 0cc8 7A4B     		ldr	r3, .L573+8
 8067 0cca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8068 0ccc 1846     		mov	r0, r3
 8069 0cce 794B     		ldr	r3, .L573+8
 8070 0cd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8071 0cd2 1946     		mov	r1, r3
 8072 0cd4 794A     		ldr	r2, .L573+16
 8073 0cd6 0B46     		mov	r3, r1
 8074 0cd8 DB00     		lsls	r3, r3, #3
 8075 0cda 5B1A     		subs	r3, r3, r1
 8076 0cdc 1B01     		lsls	r3, r3, #4
 8077 0cde 1344     		add	r3, r3, r2
 8078 0ce0 03F58873 		add	r3, r3, #272
 8079 0ce4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8080 0ce6 1946     		mov	r1, r3
 8081 0ce8 754A     		ldr	r2, .L573+20
 8082 0cea 3423     		movs	r3, #52
 8083 0cec 03FB01F3 		mul	r3, r3, r1
 8084 0cf0 1344     		add	r3, r3, r2
 8085 0cf2 1A68     		ldr	r2, [r3]
 8086 0cf4 7349     		ldr	r1, .L573+24
 8087 0cf6 0301     		lsls	r3, r0, #4
 8088 0cf8 0B44     		add	r3, r3, r1
 8089 0cfa 1A60     		str	r2, [r3]
 8090              	.L499:
2334:..\src/interruptions.c ****                         }
2335:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 8091              		.loc 1 2335 0
 8092 0cfc 6D4B     		ldr	r3, .L573+8
 8093 0cfe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8094 0d00 1846     		mov	r0, r3
 8095 0d02 6C4B     		ldr	r3, .L573+8
 8096 0d04 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8097 0d06 1946     		mov	r1, r3
 8098 0d08 6B4A     		ldr	r2, .L573+12
 8099 0d0a 0B46     		mov	r3, r1
 8100 0d0c DB00     		lsls	r3, r3, #3
 8101 0d0e 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 187


 8102 0d10 1B01     		lsls	r3, r3, #4
 8103 0d12 1344     		add	r3, r3, r2
 8104 0d14 E033     		adds	r3, r3, #224
 8105 0d16 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 8106 0d18 6A4A     		ldr	r2, .L573+24
 8107 0d1a 0301     		lsls	r3, r0, #4
 8108 0d1c 1344     		add	r3, r3, r2
 8109 0d1e 0C33     		adds	r3, r3, #12
 8110 0d20 0A46     		mov	r2, r1
 8111 0d22 1A70     		strb	r2, [r3]
2336:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 8112              		.loc 1 2336 0
 8113 0d24 634B     		ldr	r3, .L573+8
 8114 0d26 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 8115 0d28 624B     		ldr	r3, .L573+8
 8116 0d2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8117 0d2c 654A     		ldr	r2, .L573+24
 8118 0d2e 1B01     		lsls	r3, r3, #4
 8119 0d30 1344     		add	r3, r3, r2
 8120 0d32 0C33     		adds	r3, r3, #12
 8121 0d34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8122 0d36 1946     		mov	r1, r3
 8123 0d38 FFF7FEFF 		bl	enable_motor
 8124              	.L498:
2326:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8125              		.loc 1 2326 0 discriminator 2
 8126 0d3c 5D4B     		ldr	r3, .L573+8
 8127 0d3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8128 0d40 0133     		adds	r3, r3, #1
 8129 0d42 DAB2     		uxtb	r2, r3
 8130 0d44 5B4B     		ldr	r3, .L573+8
 8131 0d46 1A70     		strb	r2, [r3]
 8132              	.L496:
2326:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8133              		.loc 1 2326 0 is_stmt 0 discriminator 1
 8134 0d48 5A4B     		ldr	r3, .L573+8
 8135 0d4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8136 0d4c 012B     		cmp	r3, #1
 8137 0d4e 7FF667AF 		bls	.L500
2337:..\src/interruptions.c ****                     }
2338:..\src/interruptions.c ****                 }
2339:..\src/interruptions.c ****                     
2340:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8138              		.loc 1 2340 0 is_stmt 1
 8139 0d52 0020     		movs	r0, #0
 8140 0d54 FFF7FEFF 		bl	memStore
2341:..\src/interruptions.c ****                     
2342:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8141              		.loc 1 2342 0
 8142 0d58 5B4B     		ldr	r3, .L573+28
 8143 0d5a 0022     		movs	r2, #0
 8144 0d5c 1A70     		strb	r2, [r3]
2343:..\src/interruptions.c ****             }
2344:..\src/interruptions.c ****             break;
 8145              		.loc 1 2344 0
 8146 0d5e 07E0     		b	.L556
 8147              	.L552:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 188


2345:..\src/interruptions.c ****         default:
2346:..\src/interruptions.c ****             break;
 8148              		.loc 1 2346 0
 8149 0d60 00BF     		nop
 8150 0d62 06E0     		b	.L485
 8151              	.L553:
2283:..\src/interruptions.c **** 
 8152              		.loc 1 2283 0
 8153 0d64 00BF     		nop
 8154 0d66 04E0     		b	.L485
 8155              	.L554:
2309:..\src/interruptions.c **** 
 8156              		.loc 1 2309 0
 8157 0d68 00BF     		nop
 8158 0d6a 02E0     		b	.L485
 8159              	.L555:
2314:..\src/interruptions.c **** 
 8160              		.loc 1 2314 0
 8161 0d6c 00BF     		nop
 8162 0d6e 00E0     		b	.L485
 8163              	.L556:
2344:..\src/interruptions.c ****         default:
 8164              		.loc 1 2344 0
 8165 0d70 00BF     		nop
 8166              	.L485:
2347:..\src/interruptions.c ****     }
2348:..\src/interruptions.c ****         
2349:..\src/interruptions.c ****     if (interrupt_flag){
 8167              		.loc 1 2349 0
 8168 0d72 4F4B     		ldr	r3, .L573+4
 8169 0d74 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8170 0d76 002B     		cmp	r3, #0
 8171 0d78 04D0     		beq	.L501
2350:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8172              		.loc 1 2350 0
 8173 0d7a 4D4B     		ldr	r3, .L573+4
 8174 0d7c 0022     		movs	r2, #0
 8175 0d7e 1A70     		strb	r2, [r3]
2351:..\src/interruptions.c ****         interrupt_manager();
 8176              		.loc 1 2351 0
 8177 0d80 FFF7FEFF 		bl	interrupt_manager
 8178              	.L501:
2352:..\src/interruptions.c ****     }
2353:..\src/interruptions.c ****     
2354:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8179              		.loc 1 2354 0
 8180 0d84 4C4B     		ldr	r3, .L573+12
 8181 0d86 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8182 0d8a 062B     		cmp	r3, #6
 8183 0d8c 05D0     		beq	.L502
 8184              		.loc 1 2354 0 is_stmt 0 discriminator 1
 8185 0d8e 4A4B     		ldr	r3, .L573+12
 8186 0d90 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8187 0d94 062B     		cmp	r3, #6
 8188 0d96 40F0C881 		bne	.L503
 8189              	.L502:
2355:..\src/interruptions.c ****         // Read joystick
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 189


2356:..\src/interruptions.c ****         
2357:..\src/interruptions.c ****         switch (joy_UD_status) {
 8190              		.loc 1 2357 0 is_stmt 1
 8191 0d9a 4C4B     		ldr	r3, .L573+32
 8192 0d9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8193 0d9e 052B     		cmp	r3, #5
 8194 0da0 00F2E980 		bhi	.L504
 8195 0da4 01A2     		adr	r2, .L506
 8196 0da6 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8197 0daa 00BF     		.p2align 2
 8198              	.L506:
 8199 0dac C50D0000 		.word	.L505+1
 8200 0db0 630E0000 		.word	.L507+1
 8201 0db4 770E0000 		.word	.L508+1
 8202 0db8 E50E0000 		.word	.L509+1
 8203 0dbc 510F0000 		.word	.L510+1
 8204 0dc0 510F0000 		.word	.L510+1
 8205              		.p2align 1
 8206              	.L505:
2358:..\src/interruptions.c ****             case NORMAL:
2359:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8207              		.loc 1 2359 0
 8208 0dc4 424B     		ldr	r3, .L573+36
 8209 0dc6 B3F90430 		ldrsh	r3, [r3, #4]
 8210 0dca 7B60     		str	r3, [r7, #4]
2360:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2361:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8211              		.loc 1 2361 0
 8212 0dcc 414B     		ldr	r3, .L573+40
 8213 0dce 1B68     		ldr	r3, [r3]
 8214 0dd0 7A68     		ldr	r2, [r7, #4]
 8215 0dd2 D31A     		subs	r3, r2, r3
 8216 0dd4 1846     		mov	r0, r3
 8217 0dd6 FFF7FEFF 		bl	__aeabi_i2f
 8218 0dda 0446     		mov	r4, r0
 8219 0ddc 3D4B     		ldr	r3, .L573+40
 8220 0dde 1B68     		ldr	r3, [r3]
 8221 0de0 1846     		mov	r0, r3
 8222 0de2 FFF7FEFF 		bl	__aeabi_i2f
 8223 0de6 0346     		mov	r3, r0
 8224 0de8 1946     		mov	r1, r3
 8225 0dea 2046     		mov	r0, r4
 8226 0dec FFF7FEFF 		bl	__aeabi_fdiv
 8227 0df0 0346     		mov	r3, r0
 8228 0df2 1C46     		mov	r4, r3
 8229 0df4 304B     		ldr	r3, .L573+12
 8230 0df6 B3F8B632 		ldrh	r3, [r3, #694]
 8231 0dfa 1846     		mov	r0, r3
 8232 0dfc FFF7FEFF 		bl	__aeabi_i2f
 8233 0e00 0346     		mov	r3, r0
 8234 0e02 1946     		mov	r1, r3
 8235 0e04 2046     		mov	r0, r4
 8236 0e06 FFF7FEFF 		bl	__aeabi_fmul
 8237 0e0a 0346     		mov	r3, r0
 8238 0e0c 1846     		mov	r0, r3
 8239 0e0e FFF7FEFF 		bl	__aeabi_f2iz
 8240 0e12 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 190


 8241 0e14 7B60     		str	r3, [r7, #4]
2362:..\src/interruptions.c ****                 
2363:..\src/interruptions.c ****                 if (interrupt_flag){
 8242              		.loc 1 2363 0
 8243 0e16 264B     		ldr	r3, .L573+4
 8244 0e18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8245 0e1a 002B     		cmp	r3, #0
 8246 0e1c 04D0     		beq	.L511
2364:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8247              		.loc 1 2364 0
 8248 0e1e 244B     		ldr	r3, .L573+4
 8249 0e20 0022     		movs	r2, #0
 8250 0e22 1A70     		strb	r2, [r3]
2365:..\src/interruptions.c ****                     interrupt_manager();
 8251              		.loc 1 2365 0
 8252 0e24 FFF7FEFF 		bl	interrupt_manager
 8253              	.L511:
2366:..\src/interruptions.c ****                 }
2367:..\src/interruptions.c **** 
2368:..\src/interruptions.c ****                 //Saturation
2369:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8254              		.loc 1 2369 0
 8255 0e28 7B68     		ldr	r3, [r7, #4]
 8256 0e2a 13F5806F 		cmn	r3, #1024
 8257 0e2e 01DA     		bge	.L512
2370:..\src/interruptions.c ****                     i_aux = -1024;
 8258              		.loc 1 2370 0
 8259 0e30 294B     		ldr	r3, .L573+44
 8260 0e32 7B60     		str	r3, [r7, #4]
 8261              	.L512:
2371:..\src/interruptions.c ****                 if (i_aux > 1024)
 8262              		.loc 1 2371 0
 8263 0e34 7B68     		ldr	r3, [r7, #4]
 8264 0e36 B3F5806F 		cmp	r3, #1024
 8265 0e3a 02DD     		ble	.L513
2372:..\src/interruptions.c ****                     i_aux = 1024;
 8266              		.loc 1 2372 0
 8267 0e3c 4FF48063 		mov	r3, #1024
 8268 0e40 7B60     		str	r3, [r7, #4]
 8269              	.L513:
2373:..\src/interruptions.c **** 
2374:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8270              		.loc 1 2374 0
 8271 0e42 7B68     		ldr	r3, [r7, #4]
 8272 0e44 1BB2     		sxth	r3, r3
 8273 0e46 1A46     		mov	r2, r3
 8274 0e48 244B     		ldr	r3, .L573+48
 8275 0e4a 5A62     		str	r2, [r3, #36]
2375:..\src/interruptions.c **** 
2376:..\src/interruptions.c ****                 if (interrupt_flag){
 8276              		.loc 1 2376 0
 8277 0e4c 184B     		ldr	r3, .L573+4
 8278 0e4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8279 0e50 002B     		cmp	r3, #0
 8280 0e52 00F08980 		beq	.L557
2377:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8281              		.loc 1 2377 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 191


 8282 0e56 164B     		ldr	r3, .L573+4
 8283 0e58 0022     		movs	r2, #0
 8284 0e5a 1A70     		strb	r2, [r3]
2378:..\src/interruptions.c ****                     interrupt_manager();
 8285              		.loc 1 2378 0
 8286 0e5c FFF7FEFF 		bl	interrupt_manager
2379:..\src/interruptions.c ****                 }
2380:..\src/interruptions.c **** 
2381:..\src/interruptions.c ****             break;
 8287              		.loc 1 2381 0
 8288 0e60 82E0     		b	.L557
 8289              	.L507:
2382:..\src/interruptions.c **** 
2383:..\src/interruptions.c ****             case RESET: // reset variables
2384:..\src/interruptions.c ****                 UD_counter = 0;
 8290              		.loc 1 2384 0
 8291 0e62 1F4B     		ldr	r3, .L573+52
 8292 0e64 0022     		movs	r2, #0
 8293 0e66 1A80     		strh	r2, [r3]	@ movhi
2385:..\src/interruptions.c ****                 UD_mean_value = 0;
 8294              		.loc 1 2385 0
 8295 0e68 1A4B     		ldr	r3, .L573+40
 8296 0e6a 0022     		movs	r2, #0
 8297 0e6c 1A60     		str	r2, [r3]
2386:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8298              		.loc 1 2386 0
 8299 0e6e 174B     		ldr	r3, .L573+32
 8300 0e70 0422     		movs	r2, #4
 8301 0e72 1A70     		strb	r2, [r3]
2387:..\src/interruptions.c **** 
2388:..\src/interruptions.c ****             break;
 8302              		.loc 1 2388 0
 8303 0e74 7FE0     		b	.L504
 8304              	.L508:
2389:..\src/interruptions.c **** 
2390:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2391:..\src/interruptions.c ****                 UD_counter++;
 8305              		.loc 1 2391 0
 8306 0e76 1A4B     		ldr	r3, .L573+52
 8307 0e78 1B88     		ldrh	r3, [r3]
 8308 0e7a 0133     		adds	r3, r3, #1
 8309 0e7c 9AB2     		uxth	r2, r3
 8310 0e7e 184B     		ldr	r3, .L573+52
 8311 0e80 1A80     		strh	r2, [r3]	@ movhi
2392:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8312              		.loc 1 2392 0
 8313 0e82 174B     		ldr	r3, .L573+52
 8314 0e84 1B88     		ldrh	r3, [r3]
 8315 0e86 642B     		cmp	r3, #100
 8316 0e88 70D1     		bne	.L558
2393:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8317              		.loc 1 2393 0
 8318 0e8a 154B     		ldr	r3, .L573+52
 8319 0e8c 0022     		movs	r2, #0
 8320 0e8e 1A80     		strh	r2, [r3]	@ movhi
2394:..\src/interruptions.c **** 
2395:..\src/interruptions.c ****                     if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 192


 8321              		.loc 1 2395 0
 8322 0e90 074B     		ldr	r3, .L573+4
 8323 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8324 0e94 002B     		cmp	r3, #0
 8325 0e96 04D0     		beq	.L516
2396:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8326              		.loc 1 2396 0
 8327 0e98 054B     		ldr	r3, .L573+4
 8328 0e9a 0022     		movs	r2, #0
 8329 0e9c 1A70     		strb	r2, [r3]
2397:..\src/interruptions.c ****                         interrupt_manager();
 8330              		.loc 1 2397 0
 8331 0e9e FFF7FEFF 		bl	interrupt_manager
 8332              	.L516:
2398:..\src/interruptions.c ****                     }
2399:..\src/interruptions.c **** 
2400:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8333              		.loc 1 2400 0
 8334 0ea2 0A4B     		ldr	r3, .L573+32
 8335 0ea4 0322     		movs	r2, #3
 8336 0ea6 1A70     		strb	r2, [r3]
2401:..\src/interruptions.c ****                 }
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****             break;
 8337              		.loc 1 2403 0
 8338 0ea8 60E0     		b	.L558
 8339              	.L574:
 8340 0eaa 00BF     		.align	2
 8341              	.L573:
 8342 0eac 7A010000 		.word	emg_counter_2.10646
 8343 0eb0 00000000 		.word	interrupt_flag
 8344 0eb4 72010000 		.word	idx.10654
 8345 0eb8 00000000 		.word	c_mem
 8346 0ebc 00000000 		.word	g_mem
 8347 0ec0 00000000 		.word	g_meas
 8348 0ec4 00000000 		.word	g_ref
 8349 0ec8 00000000 		.word	emg_2_status
 8350 0ecc 00000000 		.word	joy_UD_status
 8351 0ed0 00000000 		.word	ADC_buf
 8352 0ed4 7C010000 		.word	UD_mean_value.10649
 8353 0ed8 00FCFFFF 		.word	-1024
 8354 0edc 00000000 		.word	g_adc_meas
 8355 0ee0 80010000 		.word	UD_counter.10647
 8356              	.L509:
2404:..\src/interruptions.c **** 
2405:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2406:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2407:..\src/interruptions.c ****                 UD_counter++;
 8357              		.loc 1 2407 0
 8358 0ee4 954B     		ldr	r3, .L575
 8359 0ee6 1B88     		ldrh	r3, [r3]
 8360 0ee8 0133     		adds	r3, r3, #1
 8361 0eea 9AB2     		uxth	r2, r3
 8362 0eec 934B     		ldr	r3, .L575
 8363 0eee 1A80     		strh	r2, [r3]	@ movhi
2408:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8364              		.loc 1 2408 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 193


 8365 0ef0 934B     		ldr	r3, .L575+4
 8366 0ef2 B3F90430 		ldrsh	r3, [r3, #4]
 8367 0ef6 1A46     		mov	r2, r3
 8368 0ef8 924B     		ldr	r3, .L575+8
 8369 0efa 1B68     		ldr	r3, [r3]
 8370 0efc 1344     		add	r3, r3, r2
 8371 0efe 914A     		ldr	r2, .L575+8
 8372 0f00 1360     		str	r3, [r2]
2409:..\src/interruptions.c **** 
2410:..\src/interruptions.c ****                 if (interrupt_flag){
 8373              		.loc 1 2410 0
 8374 0f02 914B     		ldr	r3, .L575+12
 8375 0f04 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8376 0f06 002B     		cmp	r3, #0
 8377 0f08 04D0     		beq	.L517
2411:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8378              		.loc 1 2411 0
 8379 0f0a 8F4B     		ldr	r3, .L575+12
 8380 0f0c 0022     		movs	r2, #0
 8381 0f0e 1A70     		strb	r2, [r3]
2412:..\src/interruptions.c ****                     interrupt_manager();
 8382              		.loc 1 2412 0
 8383 0f10 FFF7FEFF 		bl	interrupt_manager
 8384              	.L517:
2413:..\src/interruptions.c ****                 }
2414:..\src/interruptions.c **** 
2415:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8385              		.loc 1 2415 0
 8386 0f14 894B     		ldr	r3, .L575
 8387 0f16 1B88     		ldrh	r3, [r3]
 8388 0f18 C82B     		cmp	r3, #200
 8389 0f1a 29D1     		bne	.L559
2416:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8390              		.loc 1 2416 0
 8391 0f1c 894B     		ldr	r3, .L575+8
 8392 0f1e 1B68     		ldr	r3, [r3]
 8393 0f20 8A4A     		ldr	r2, .L575+16
 8394 0f22 82FB0312 		smull	r1, r2, r2, r3
 8395 0f26 9211     		asrs	r2, r2, #6
 8396 0f28 DB17     		asrs	r3, r3, #31
 8397 0f2a D31A     		subs	r3, r2, r3
 8398 0f2c 854A     		ldr	r2, .L575+8
 8399 0f2e 1360     		str	r3, [r2]
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****                     if (interrupt_flag){
 8400              		.loc 1 2418 0
 8401 0f30 854B     		ldr	r3, .L575+12
 8402 0f32 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8403 0f34 002B     		cmp	r3, #0
 8404 0f36 04D0     		beq	.L519
2419:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8405              		.loc 1 2419 0
 8406 0f38 834B     		ldr	r3, .L575+12
 8407 0f3a 0022     		movs	r2, #0
 8408 0f3c 1A70     		strb	r2, [r3]
2420:..\src/interruptions.c ****                         interrupt_manager();
 8409              		.loc 1 2420 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 194


 8410 0f3e FFF7FEFF 		bl	interrupt_manager
 8411              	.L519:
2421:..\src/interruptions.c ****                     }
2422:..\src/interruptions.c **** 
2423:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8412              		.loc 1 2423 0
 8413 0f42 7E4B     		ldr	r3, .L575
 8414 0f44 0022     		movs	r2, #0
 8415 0f46 1A80     		strh	r2, [r3]	@ movhi
2424:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8416              		.loc 1 2424 0
 8417 0f48 814B     		ldr	r3, .L575+20
 8418 0f4a 0022     		movs	r2, #0
 8419 0f4c 1A70     		strb	r2, [r3]
2425:..\src/interruptions.c ****                 }
2426:..\src/interruptions.c ****             break;
 8420              		.loc 1 2426 0
 8421 0f4e 0FE0     		b	.L559
 8422              	.L510:
2427:..\src/interruptions.c **** 
2428:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2429:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8423              		.loc 1 2429 0
 8424 0f50 804B     		ldr	r3, .L575+24
 8425 0f52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8426 0f54 002B     		cmp	r3, #0
 8427 0f56 0DD1     		bne	.L560
 8428              		.loc 1 2429 0 is_stmt 0 discriminator 1
 8429 0f58 7F4B     		ldr	r3, .L575+28
 8430 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8431 0f5c 002B     		cmp	r3, #0
 8432 0f5e 09D1     		bne	.L560
2430:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8433              		.loc 1 2430 0 is_stmt 1
 8434 0f60 7B4B     		ldr	r3, .L575+20
 8435 0f62 0222     		movs	r2, #2
 8436 0f64 1A70     		strb	r2, [r3]
2431:..\src/interruptions.c ****             break;
 8437              		.loc 1 2431 0
 8438 0f66 05E0     		b	.L560
 8439              	.L557:
2381:..\src/interruptions.c **** 
 8440              		.loc 1 2381 0
 8441 0f68 00BF     		nop
 8442 0f6a 04E0     		b	.L504
 8443              	.L558:
2403:..\src/interruptions.c **** 
 8444              		.loc 1 2403 0
 8445 0f6c 00BF     		nop
 8446 0f6e 02E0     		b	.L504
 8447              	.L559:
2426:..\src/interruptions.c **** 
 8448              		.loc 1 2426 0
 8449 0f70 00BF     		nop
 8450 0f72 00E0     		b	.L504
 8451              	.L560:
 8452              		.loc 1 2431 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 195


 8453 0f74 00BF     		nop
 8454              	.L504:
2432:..\src/interruptions.c ****         }
2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****         if (interrupt_flag){
 8455              		.loc 1 2434 0
 8456 0f76 744B     		ldr	r3, .L575+12
 8457 0f78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8458 0f7a 002B     		cmp	r3, #0
 8459 0f7c 04D0     		beq	.L521
2435:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8460              		.loc 1 2435 0
 8461 0f7e 724B     		ldr	r3, .L575+12
 8462 0f80 0022     		movs	r2, #0
 8463 0f82 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****             interrupt_manager();
 8464              		.loc 1 2436 0
 8465 0f84 FFF7FEFF 		bl	interrupt_manager
 8466              	.L521:
2437:..\src/interruptions.c ****         }
2438:..\src/interruptions.c ****             
2439:..\src/interruptions.c ****         switch (joy_LR_status) {
 8467              		.loc 1 2439 0
 8468 0f88 744B     		ldr	r3, .L575+32
 8469 0f8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8470 0f8c 052B     		cmp	r3, #5
 8471 0f8e 00F2C380 		bhi	.L522
 8472 0f92 01A2     		adr	r2, .L524
 8473 0f94 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8474              		.p2align 2
 8475              	.L524:
 8476 0f98 B10F0000 		.word	.L523+1
 8477 0f9c 4D100000 		.word	.L525+1
 8478 0fa0 61100000 		.word	.L526+1
 8479 0fa4 95100000 		.word	.L527+1
 8480 0fa8 EF100000 		.word	.L528+1
 8481 0fac EF100000 		.word	.L528+1
 8482              		.p2align 1
 8483              	.L523:
2440:..\src/interruptions.c ****             case NORMAL:
2441:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8484              		.loc 1 2441 0
 8485 0fb0 634B     		ldr	r3, .L575+4
 8486 0fb2 B3F90630 		ldrsh	r3, [r3, #6]
 8487 0fb6 7B60     		str	r3, [r7, #4]
2442:..\src/interruptions.c **** 
2443:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8488              		.loc 1 2443 0
 8489 0fb8 694B     		ldr	r3, .L575+36
 8490 0fba 1B68     		ldr	r3, [r3]
 8491 0fbc 7A68     		ldr	r2, [r7, #4]
 8492 0fbe D31A     		subs	r3, r2, r3
 8493 0fc0 1846     		mov	r0, r3
 8494 0fc2 FFF7FEFF 		bl	__aeabi_i2f
 8495 0fc6 0446     		mov	r4, r0
 8496 0fc8 654B     		ldr	r3, .L575+36
 8497 0fca 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 196


 8498 0fcc 1846     		mov	r0, r3
 8499 0fce FFF7FEFF 		bl	__aeabi_i2f
 8500 0fd2 0346     		mov	r3, r0
 8501 0fd4 1946     		mov	r1, r3
 8502 0fd6 2046     		mov	r0, r4
 8503 0fd8 FFF7FEFF 		bl	__aeabi_fdiv
 8504 0fdc 0346     		mov	r3, r0
 8505 0fde 1C46     		mov	r4, r3
 8506 0fe0 604B     		ldr	r3, .L575+40
 8507 0fe2 B3F8B432 		ldrh	r3, [r3, #692]
 8508 0fe6 1846     		mov	r0, r3
 8509 0fe8 FFF7FEFF 		bl	__aeabi_i2f
 8510 0fec 0346     		mov	r3, r0
 8511 0fee 1946     		mov	r1, r3
 8512 0ff0 2046     		mov	r0, r4
 8513 0ff2 FFF7FEFF 		bl	__aeabi_fmul
 8514 0ff6 0346     		mov	r3, r0
 8515 0ff8 1846     		mov	r0, r3
 8516 0ffa FFF7FEFF 		bl	__aeabi_f2iz
 8517 0ffe 0346     		mov	r3, r0
 8518 1000 7B60     		str	r3, [r7, #4]
2444:..\src/interruptions.c ****                 
2445:..\src/interruptions.c ****                 if (interrupt_flag){
 8519              		.loc 1 2445 0
 8520 1002 514B     		ldr	r3, .L575+12
 8521 1004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8522 1006 002B     		cmp	r3, #0
 8523 1008 04D0     		beq	.L529
2446:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8524              		.loc 1 2446 0
 8525 100a 4F4B     		ldr	r3, .L575+12
 8526 100c 0022     		movs	r2, #0
 8527 100e 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****                     interrupt_manager();
 8528              		.loc 1 2447 0
 8529 1010 FFF7FEFF 		bl	interrupt_manager
 8530              	.L529:
2448:..\src/interruptions.c ****                 }
2449:..\src/interruptions.c **** 
2450:..\src/interruptions.c ****                 //Saturation
2451:..\src/interruptions.c ****                 if (i_aux < -1024)
 8531              		.loc 1 2451 0
 8532 1014 7B68     		ldr	r3, [r7, #4]
 8533 1016 13F5806F 		cmn	r3, #1024
 8534 101a 01DA     		bge	.L530
2452:..\src/interruptions.c ****                     i_aux = -1024;
 8535              		.loc 1 2452 0
 8536 101c 524B     		ldr	r3, .L575+44
 8537 101e 7B60     		str	r3, [r7, #4]
 8538              	.L530:
2453:..\src/interruptions.c ****                 if (i_aux > 1024)
 8539              		.loc 1 2453 0
 8540 1020 7B68     		ldr	r3, [r7, #4]
 8541 1022 B3F5806F 		cmp	r3, #1024
 8542 1026 02DD     		ble	.L531
2454:..\src/interruptions.c ****                     i_aux = 1024;
 8543              		.loc 1 2454 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 197


 8544 1028 4FF48063 		mov	r3, #1024
 8545 102c 7B60     		str	r3, [r7, #4]
 8546              	.L531:
2455:..\src/interruptions.c **** 
2456:..\src/interruptions.c ****                 if (interrupt_flag){
 8547              		.loc 1 2456 0
 8548 102e 464B     		ldr	r3, .L575+12
 8549 1030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8550 1032 002B     		cmp	r3, #0
 8551 1034 04D0     		beq	.L532
2457:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8552              		.loc 1 2457 0
 8553 1036 444B     		ldr	r3, .L575+12
 8554 1038 0022     		movs	r2, #0
 8555 103a 1A70     		strb	r2, [r3]
2458:..\src/interruptions.c ****                     interrupt_manager();
 8556              		.loc 1 2458 0
 8557 103c FFF7FEFF 		bl	interrupt_manager
 8558              	.L532:
2459:..\src/interruptions.c ****                 }
2460:..\src/interruptions.c **** 
2461:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8559              		.loc 1 2461 0
 8560 1040 7B68     		ldr	r3, [r7, #4]
 8561 1042 1BB2     		sxth	r3, r3
 8562 1044 1A46     		mov	r2, r3
 8563 1046 494B     		ldr	r3, .L575+48
 8564 1048 1A62     		str	r2, [r3, #32]
2462:..\src/interruptions.c **** 
2463:..\src/interruptions.c ****             break;
 8565              		.loc 1 2463 0
 8566 104a 65E0     		b	.L522
 8567              	.L525:
2464:..\src/interruptions.c **** 
2465:..\src/interruptions.c ****             case RESET: // reset variables
2466:..\src/interruptions.c ****                 LR_counter = 0;
 8568              		.loc 1 2466 0
 8569 104c 484B     		ldr	r3, .L575+52
 8570 104e 0022     		movs	r2, #0
 8571 1050 1A80     		strh	r2, [r3]	@ movhi
2467:..\src/interruptions.c ****                 LR_mean_value = 0;
 8572              		.loc 1 2467 0
 8573 1052 434B     		ldr	r3, .L575+36
 8574 1054 0022     		movs	r2, #0
 8575 1056 1A60     		str	r2, [r3]
2468:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8576              		.loc 1 2468 0
 8577 1058 404B     		ldr	r3, .L575+32
 8578 105a 0422     		movs	r2, #4
 8579 105c 1A70     		strb	r2, [r3]
2469:..\src/interruptions.c ****             break;
 8580              		.loc 1 2469 0
 8581 105e 5BE0     		b	.L522
 8582              	.L526:
2470:..\src/interruptions.c **** 
2471:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2472:..\src/interruptions.c ****                 LR_counter++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 198


 8583              		.loc 1 2472 0
 8584 1060 434B     		ldr	r3, .L575+52
 8585 1062 1B88     		ldrh	r3, [r3]
 8586 1064 0133     		adds	r3, r3, #1
 8587 1066 9AB2     		uxth	r2, r3
 8588 1068 414B     		ldr	r3, .L575+52
 8589 106a 1A80     		strh	r2, [r3]	@ movhi
2473:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8590              		.loc 1 2473 0
 8591 106c 404B     		ldr	r3, .L575+52
 8592 106e 1B88     		ldrh	r3, [r3]
 8593 1070 642B     		cmp	r3, #100
 8594 1072 4CD1     		bne	.L561
2474:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8595              		.loc 1 2474 0
 8596 1074 3E4B     		ldr	r3, .L575+52
 8597 1076 0022     		movs	r2, #0
 8598 1078 1A80     		strh	r2, [r3]	@ movhi
2475:..\src/interruptions.c **** 
2476:..\src/interruptions.c ****                     if (interrupt_flag){
 8599              		.loc 1 2476 0
 8600 107a 334B     		ldr	r3, .L575+12
 8601 107c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8602 107e 002B     		cmp	r3, #0
 8603 1080 04D0     		beq	.L534
2477:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8604              		.loc 1 2477 0
 8605 1082 314B     		ldr	r3, .L575+12
 8606 1084 0022     		movs	r2, #0
 8607 1086 1A70     		strb	r2, [r3]
2478:..\src/interruptions.c ****                         interrupt_manager();
 8608              		.loc 1 2478 0
 8609 1088 FFF7FEFF 		bl	interrupt_manager
 8610              	.L534:
2479:..\src/interruptions.c ****                     }
2480:..\src/interruptions.c **** 
2481:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8611              		.loc 1 2481 0
 8612 108c 334B     		ldr	r3, .L575+32
 8613 108e 0322     		movs	r2, #3
 8614 1090 1A70     		strb	r2, [r3]
2482:..\src/interruptions.c ****                 }
2483:..\src/interruptions.c ****             break;
 8615              		.loc 1 2483 0
 8616 1092 3CE0     		b	.L561
 8617              	.L527:
2484:..\src/interruptions.c **** 
2485:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2486:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2487:..\src/interruptions.c ****                 LR_counter++;
 8618              		.loc 1 2487 0
 8619 1094 364B     		ldr	r3, .L575+52
 8620 1096 1B88     		ldrh	r3, [r3]
 8621 1098 0133     		adds	r3, r3, #1
 8622 109a 9AB2     		uxth	r2, r3
 8623 109c 344B     		ldr	r3, .L575+52
 8624 109e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 199


2488:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8625              		.loc 1 2488 0
 8626 10a0 274B     		ldr	r3, .L575+4
 8627 10a2 B3F90630 		ldrsh	r3, [r3, #6]
 8628 10a6 1A46     		mov	r2, r3
 8629 10a8 2D4B     		ldr	r3, .L575+36
 8630 10aa 1B68     		ldr	r3, [r3]
 8631 10ac 1344     		add	r3, r3, r2
 8632 10ae 2C4A     		ldr	r2, .L575+36
 8633 10b0 1360     		str	r3, [r2]
2489:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8634              		.loc 1 2489 0
 8635 10b2 2F4B     		ldr	r3, .L575+52
 8636 10b4 1B88     		ldrh	r3, [r3]
 8637 10b6 C82B     		cmp	r3, #200
 8638 10b8 2BD1     		bne	.L562
2490:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8639              		.loc 1 2490 0
 8640 10ba 294B     		ldr	r3, .L575+36
 8641 10bc 1B68     		ldr	r3, [r3]
 8642 10be 234A     		ldr	r2, .L575+16
 8643 10c0 82FB0312 		smull	r1, r2, r2, r3
 8644 10c4 9211     		asrs	r2, r2, #6
 8645 10c6 DB17     		asrs	r3, r3, #31
 8646 10c8 D31A     		subs	r3, r2, r3
 8647 10ca 254A     		ldr	r2, .L575+36
 8648 10cc 1360     		str	r3, [r2]
2491:..\src/interruptions.c ****                     
2492:..\src/interruptions.c ****                     if (interrupt_flag){
 8649              		.loc 1 2492 0
 8650 10ce 1E4B     		ldr	r3, .L575+12
 8651 10d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8652 10d2 002B     		cmp	r3, #0
 8653 10d4 04D0     		beq	.L536
2493:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8654              		.loc 1 2493 0
 8655 10d6 1C4B     		ldr	r3, .L575+12
 8656 10d8 0022     		movs	r2, #0
 8657 10da 1A70     		strb	r2, [r3]
2494:..\src/interruptions.c ****                         interrupt_manager();
 8658              		.loc 1 2494 0
 8659 10dc FFF7FEFF 		bl	interrupt_manager
 8660              	.L536:
2495:..\src/interruptions.c ****                     }
2496:..\src/interruptions.c **** 
2497:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8661              		.loc 1 2497 0
 8662 10e0 234B     		ldr	r3, .L575+52
 8663 10e2 0022     		movs	r2, #0
 8664 10e4 1A80     		strh	r2, [r3]	@ movhi
2498:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8665              		.loc 1 2498 0
 8666 10e6 1D4B     		ldr	r3, .L575+32
 8667 10e8 0022     		movs	r2, #0
 8668 10ea 1A70     		strb	r2, [r3]
2499:..\src/interruptions.c ****                 }
2500:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 200


 8669              		.loc 1 2500 0
 8670 10ec 11E0     		b	.L562
 8671              	.L528:
2501:..\src/interruptions.c **** 
2502:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2503:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8672              		.loc 1 2503 0
 8673 10ee 194B     		ldr	r3, .L575+24
 8674 10f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8675 10f2 002B     		cmp	r3, #0
 8676 10f4 0FD1     		bne	.L563
 8677              		.loc 1 2503 0 is_stmt 0 discriminator 1
 8678 10f6 184B     		ldr	r3, .L575+28
 8679 10f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8680 10fa 002B     		cmp	r3, #0
 8681 10fc 0BD1     		bne	.L563
 8682              		.loc 1 2503 0 discriminator 2
 8683 10fe 144B     		ldr	r3, .L575+20
 8684 1100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8685 1102 002B     		cmp	r3, #0
 8686 1104 07D1     		bne	.L563
2504:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8687              		.loc 1 2504 0 is_stmt 1
 8688 1106 154B     		ldr	r3, .L575+32
 8689 1108 0222     		movs	r2, #2
 8690 110a 1A70     		strb	r2, [r3]
2505:..\src/interruptions.c ****             break;
 8691              		.loc 1 2505 0
 8692 110c 03E0     		b	.L563
 8693              	.L561:
2483:..\src/interruptions.c **** 
 8694              		.loc 1 2483 0
 8695 110e 00BF     		nop
 8696 1110 02E0     		b	.L522
 8697              	.L562:
2500:..\src/interruptions.c **** 
 8698              		.loc 1 2500 0
 8699 1112 00BF     		nop
 8700 1114 00E0     		b	.L522
 8701              	.L563:
 8702              		.loc 1 2505 0
 8703 1116 00BF     		nop
 8704              	.L522:
2506:..\src/interruptions.c ****         }
2507:..\src/interruptions.c ****        
2508:..\src/interruptions.c ****         if (interrupt_flag){
 8705              		.loc 1 2508 0
 8706 1118 0B4B     		ldr	r3, .L575+12
 8707 111a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8708 111c 002B     		cmp	r3, #0
 8709 111e 04D0     		beq	.L503
2509:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8710              		.loc 1 2509 0
 8711 1120 094B     		ldr	r3, .L575+12
 8712 1122 0022     		movs	r2, #0
 8713 1124 1A70     		strb	r2, [r3]
2510:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 201


 8714              		.loc 1 2510 0
 8715 1126 FFF7FEFF 		bl	interrupt_manager
 8716              	.L503:
2511:..\src/interruptions.c ****         }
2512:..\src/interruptions.c ****     }
2513:..\src/interruptions.c ****     
2514:..\src/interruptions.c ****     // Read also EMG additional sensors port
2515:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8717              		.loc 1 2515 0
 8718 112a 124B     		ldr	r3, .L575+56
 8719 112c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8720 112e 062B     		cmp	r3, #6
 8721 1130 73D9     		bls	.L564
2516:..\src/interruptions.c ****         
2517:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8722              		.loc 1 2517 0
 8723 1132 114B     		ldr	r3, .L575+60
 8724 1134 0022     		movs	r2, #0
 8725 1136 1A70     		strb	r2, [r3]
 8726 1138 6BE0     		b	.L539
 8727              	.L576:
 8728 113a 00BF     		.align	2
 8729              	.L575:
 8730 113c 80010000 		.word	UD_counter.10647
 8731 1140 00000000 		.word	ADC_buf
 8732 1144 7C010000 		.word	UD_mean_value.10649
 8733 1148 00000000 		.word	interrupt_flag
 8734 114c 1F85EB51 		.word	1374389535
 8735 1150 00000000 		.word	joy_UD_status
 8736 1154 00000000 		.word	emg_1_status
 8737 1158 00000000 		.word	emg_2_status
 8738 115c 00000000 		.word	joy_LR_status
 8739 1160 84010000 		.word	LR_mean_value.10650
 8740 1164 00000000 		.word	c_mem
 8741 1168 00FCFFFF 		.word	-1024
 8742 116c 00000000 		.word	g_adc_meas
 8743 1170 88010000 		.word	LR_counter.10648
 8744 1174 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8745 1178 72010000 		.word	idx.10654
 8746              	.L546:
2518:..\src/interruptions.c ****             
2519:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8747              		.loc 1 2519 0
 8748 117c 294B     		ldr	r3, .L577
 8749 117e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8750 1180 0633     		adds	r3, r3, #6
 8751 1182 294A     		ldr	r2, .L577+4
 8752 1184 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8753 1188 7B60     		str	r3, [r7, #4]
2520:..\src/interruptions.c ****             if (i_aux < 0) 
 8754              		.loc 1 2520 0
 8755 118a 7B68     		ldr	r3, [r7, #4]
 8756 118c 002B     		cmp	r3, #0
 8757 118e 01DA     		bge	.L540
2521:..\src/interruptions.c ****                 i_aux = 0;
 8758              		.loc 1 2521 0
 8759 1190 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 202


 8760 1192 7B60     		str	r3, [r7, #4]
 8761              	.L540:
2522:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8762              		.loc 1 2522 0
 8763 1194 234B     		ldr	r3, .L577
 8764 1196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8765 1198 0233     		adds	r3, r3, #2
 8766 119a DB00     		lsls	r3, r3, #3
 8767 119c 234A     		ldr	r2, .L577+8
 8768 119e 1344     		add	r3, r3, r2
 8769 11a0 1946     		mov	r1, r3
 8770 11a2 7868     		ldr	r0, [r7, #4]
 8771 11a4 FFF7FEFF 		bl	filter
 8772 11a8 7860     		str	r0, [r7, #4]
2523:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8773              		.loc 1 2523 0
 8774 11aa 7B68     		ldr	r3, [r7, #4]
 8775 11ac 9B02     		lsls	r3, r3, #10
 8776 11ae 002B     		cmp	r3, #0
 8777 11b0 01DA     		bge	.L541
 8778 11b2 03F2FF33 		addw	r3, r3, #1023
 8779              	.L541:
 8780 11b6 9B12     		asrs	r3, r3, #10
 8781 11b8 7B60     		str	r3, [r7, #4]
2524:..\src/interruptions.c **** 
2525:..\src/interruptions.c ****             if (interrupt_flag){
 8782              		.loc 1 2525 0
 8783 11ba 1D4B     		ldr	r3, .L577+12
 8784 11bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8785 11be 002B     		cmp	r3, #0
 8786 11c0 04D0     		beq	.L542
2526:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8787              		.loc 1 2526 0
 8788 11c2 1B4B     		ldr	r3, .L577+12
 8789 11c4 0022     		movs	r2, #0
 8790 11c6 1A70     		strb	r2, [r3]
2527:..\src/interruptions.c ****                 interrupt_manager();
 8791              		.loc 1 2527 0
 8792 11c8 FFF7FEFF 		bl	interrupt_manager
 8793              	.L542:
2528:..\src/interruptions.c ****             }
2529:..\src/interruptions.c ****             //Saturation
2530:..\src/interruptions.c ****             if (i_aux < 0)
 8794              		.loc 1 2530 0
 8795 11cc 7B68     		ldr	r3, [r7, #4]
 8796 11ce 002B     		cmp	r3, #0
 8797 11d0 02DA     		bge	.L543
2531:..\src/interruptions.c ****                 i_aux = 0;
 8798              		.loc 1 2531 0
 8799 11d2 0023     		movs	r3, #0
 8800 11d4 7B60     		str	r3, [r7, #4]
 8801 11d6 06E0     		b	.L544
 8802              	.L543:
2532:..\src/interruptions.c ****             else 
2533:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8803              		.loc 1 2533 0
 8804 11d8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 203


 8805 11da B3F5806F 		cmp	r3, #1024
 8806 11de 02DD     		ble	.L544
2534:..\src/interruptions.c ****                     i_aux = 1024;
 8807              		.loc 1 2534 0
 8808 11e0 4FF48063 		mov	r3, #1024
 8809 11e4 7B60     		str	r3, [r7, #4]
 8810              	.L544:
2535:..\src/interruptions.c ****             
2536:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8811              		.loc 1 2536 0
 8812 11e6 0F4B     		ldr	r3, .L577
 8813 11e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8814 11ea 1249     		ldr	r1, .L577+16
 8815 11ec 0233     		adds	r3, r3, #2
 8816 11ee 7A68     		ldr	r2, [r7, #4]
 8817 11f0 41F82320 		str	r2, [r1, r3, lsl #2]
2537:..\src/interruptions.c **** 
2538:..\src/interruptions.c ****             if (interrupt_flag){
 8818              		.loc 1 2538 0
 8819 11f4 0E4B     		ldr	r3, .L577+12
 8820 11f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8821 11f8 002B     		cmp	r3, #0
 8822 11fa 04D0     		beq	.L545
2539:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8823              		.loc 1 2539 0
 8824 11fc 0C4B     		ldr	r3, .L577+12
 8825 11fe 0022     		movs	r2, #0
 8826 1200 1A70     		strb	r2, [r3]
2540:..\src/interruptions.c ****                 interrupt_manager();
 8827              		.loc 1 2540 0
 8828 1202 FFF7FEFF 		bl	interrupt_manager
 8829              	.L545:
2517:..\src/interruptions.c ****             
 8830              		.loc 1 2517 0 discriminator 2
 8831 1206 074B     		ldr	r3, .L577
 8832 1208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8833 120a 0133     		adds	r3, r3, #1
 8834 120c DAB2     		uxtb	r2, r3
 8835 120e 054B     		ldr	r3, .L577
 8836 1210 1A70     		strb	r2, [r3]
 8837              	.L539:
2517:..\src/interruptions.c ****             
 8838              		.loc 1 2517 0 is_stmt 0 discriminator 1
 8839 1212 044B     		ldr	r3, .L577
 8840 1214 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8841 1216 052B     		cmp	r3, #5
 8842 1218 B0D9     		bls	.L546
 8843              	.L564:
2541:..\src/interruptions.c ****             }
2542:..\src/interruptions.c ****         }
2543:..\src/interruptions.c ****     }
2544:..\src/interruptions.c ****     
2545:..\src/interruptions.c **** }
 8844              		.loc 1 2545 0 is_stmt 1
 8845 121a 00BF     		nop
 8846 121c 0C37     		adds	r7, r7, #12
 8847              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 204


 8848 121e BD46     		mov	sp, r7
 8849              		.cfi_def_cfa_register 13
 8850              		@ sp needed
 8851 1220 F0BD     		pop	{r4, r5, r6, r7, pc}
 8852              	.L578:
 8853 1222 00BF     		.align	2
 8854              	.L577:
 8855 1224 72010000 		.word	idx.10654
 8856 1228 00000000 		.word	ADC_buf
 8857 122c 00000000 		.word	filt_emg
 8858 1230 00000000 		.word	interrupt_flag
 8859 1234 00000000 		.word	g_adc_meas
 8860              		.cfi_endproc
 8861              	.LFE74:
 8862              		.size	analog_read_end, .-analog_read_end
 8863              		.section	.text.overcurrent_control,"ax",%progbits
 8864              		.align	2
 8865              		.global	overcurrent_control
 8866              		.thumb
 8867              		.thumb_func
 8868              		.type	overcurrent_control, %function
 8869              	overcurrent_control:
 8870              	.LFB75:
2546:..\src/interruptions.c **** 
2547:..\src/interruptions.c **** //==============================================================================
2548:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2549:..\src/interruptions.c **** //==============================================================================
2550:..\src/interruptions.c **** 
2551:..\src/interruptions.c **** void overcurrent_control() {
 8871              		.loc 1 2551 0
 8872              		.cfi_startproc
 8873              		@ args = 0, pretend = 0, frame = 8
 8874              		@ frame_needed = 1, uses_anonymous_args = 0
 8875              		@ link register save eliminated.
 8876 0000 80B4     		push	{r7}
 8877              		.cfi_def_cfa_offset 4
 8878              		.cfi_offset 7, -4
 8879 0002 83B0     		sub	sp, sp, #12
 8880              		.cfi_def_cfa_offset 16
 8881 0004 00AF     		add	r7, sp, #0
 8882              		.cfi_def_cfa_register 7
 8883              	.LBB11:
2552:..\src/interruptions.c ****     
2553:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8884              		.loc 1 2553 0
 8885 0006 0023     		movs	r3, #0
 8886 0008 FB71     		strb	r3, [r7, #7]
 8887 000a 6CE0     		b	.L580
 8888              	.L585:
2554:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8889              		.loc 1 2554 0
 8890 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8891 000e 3A49     		ldr	r1, .L587
 8892 0010 1346     		mov	r3, r2
 8893 0012 DB00     		lsls	r3, r3, #3
 8894 0014 9B1A     		subs	r3, r3, r2
 8895 0016 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 205


 8896 0018 0B44     		add	r3, r3, r1
 8897 001a 03F58673 		add	r3, r3, #268
 8898 001e B3F90030 		ldrsh	r3, [r3]
 8899 0022 002B     		cmp	r3, #0
 8900 0024 5CD0     		beq	.L581
 8901              	.LBB12:
2555:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8902              		.loc 1 2555 0
 8903 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8904 0028 3449     		ldr	r1, .L587+4
 8905 002a 1346     		mov	r3, r2
 8906 002c DB00     		lsls	r3, r3, #3
 8907 002e 9B1A     		subs	r3, r3, r2
 8908 0030 1B01     		lsls	r3, r3, #4
 8909 0032 0B44     		add	r3, r3, r1
 8910 0034 03F58873 		add	r3, r3, #272
 8911 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8912 003a 1946     		mov	r1, r3
 8913 003c 304A     		ldr	r2, .L587+8
 8914 003e 3423     		movs	r3, #52
 8915 0040 03FB01F3 		mul	r3, r3, r1
 8916 0044 1344     		add	r3, r3, r2
 8917 0046 0C33     		adds	r3, r3, #12
 8918 0048 1B68     		ldr	r3, [r3]
 8919 004a 3B60     		str	r3, [r7]
2556:..\src/interruptions.c ****             // check if the current is over the limit
2557:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2558:..\src/interruptions.c ****                 if (curr < 0){
 8920              		.loc 1 2558 0
 8921 004c 3B68     		ldr	r3, [r7]
 8922 004e 002B     		cmp	r3, #0
 8923 0050 02DA     		bge	.L582
2559:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8924              		.loc 1 2559 0
 8925 0052 3B68     		ldr	r3, [r7]
 8926 0054 5B42     		negs	r3, r3
 8927 0056 3B60     		str	r3, [r7]
 8928              	.L582:
2560:..\src/interruptions.c ****                 }
2561:..\src/interruptions.c ****          //   }
2562:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8929              		.loc 1 2562 0
 8930 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8931 005a 2749     		ldr	r1, .L587
 8932 005c 1346     		mov	r3, r2
 8933 005e DB00     		lsls	r3, r3, #3
 8934 0060 9B1A     		subs	r3, r3, r2
 8935 0062 1B01     		lsls	r3, r3, #4
 8936 0064 0B44     		add	r3, r3, r1
 8937 0066 03F58673 		add	r3, r3, #268
 8938 006a B3F90030 		ldrsh	r3, [r3]
 8939 006e 1A46     		mov	r2, r3
 8940 0070 3B68     		ldr	r3, [r7]
 8941 0072 9A42     		cmp	r2, r3
 8942 0074 09DA     		bge	.L583
2563:..\src/interruptions.c ****                 //decrease pwm_limit
2564:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 206


 8943              		.loc 1 2564 0
 8944 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8945 0078 224A     		ldr	r2, .L587+12
 8946 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8947 007e 013A     		subs	r2, r2, #1
 8948 0080 91B2     		uxth	r1, r2
 8949 0082 204A     		ldr	r2, .L587+12
 8950 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8951 0088 18E0     		b	.L586
 8952              	.L583:
2565:..\src/interruptions.c ****             // check if the current is in the safe zone
2566:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8953              		.loc 1 2566 0
 8954 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8955 008c 1A49     		ldr	r1, .L587
 8956 008e 1346     		mov	r3, r2
 8957 0090 DB00     		lsls	r3, r3, #3
 8958 0092 9B1A     		subs	r3, r3, r2
 8959 0094 1B01     		lsls	r3, r3, #4
 8960 0096 0B44     		add	r3, r3, r1
 8961 0098 03F58673 		add	r3, r3, #268
 8962 009c B3F90030 		ldrsh	r3, [r3]
 8963 00a0 A3F10A02 		sub	r2, r3, #10
 8964 00a4 3B68     		ldr	r3, [r7]
 8965 00a6 9A42     		cmp	r2, r3
 8966 00a8 08DD     		ble	.L586
2567:..\src/interruptions.c ****                 //increase pwm_limit
2568:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8967              		.loc 1 2568 0
 8968 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8969 00ac 154A     		ldr	r2, .L587+12
 8970 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8971 00b2 0132     		adds	r2, r2, #1
 8972 00b4 91B2     		uxth	r1, r2
 8973 00b6 134A     		ldr	r2, .L587+12
 8974 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8975              	.L586:
2569:..\src/interruptions.c ****             }
2570:..\src/interruptions.c **** 
2571:..\src/interruptions.c ****             // Bound pwm_limit
2572:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2573:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2574:..\src/interruptions.c ****             else 
2575:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8976              		.loc 1 2575 0
 8977 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8978 00be 114A     		ldr	r2, .L587+12
 8979 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8980 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8981 00c6 1049     		ldr	r1, .L587+16
 8982 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8983 00cc 9A42     		cmp	r2, r3
 8984 00ce 07D9     		bls	.L581
2576:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8985              		.loc 1 2576 0
 8986 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8987 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 207


 8988 00d4 0C49     		ldr	r1, .L587+16
 8989 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8990 00da 0A4A     		ldr	r2, .L587+12
 8991 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8992              	.L581:
 8993              	.LBE12:
2553:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8994              		.loc 1 2553 0 discriminator 2
 8995 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8996 00e2 0133     		adds	r3, r3, #1
 8997 00e4 FB71     		strb	r3, [r7, #7]
 8998              	.L580:
2553:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8999              		.loc 1 2553 0 is_stmt 0 discriminator 1
 9000 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9001 00e8 012B     		cmp	r3, #1
 9002 00ea 8FD9     		bls	.L585
 9003              	.LBE11:
2577:..\src/interruptions.c ****         }
2578:..\src/interruptions.c ****     }
2579:..\src/interruptions.c **** }
 9004              		.loc 1 2579 0 is_stmt 1
 9005 00ec 00BF     		nop
 9006 00ee 0C37     		adds	r7, r7, #12
 9007              		.cfi_def_cfa_offset 4
 9008 00f0 BD46     		mov	sp, r7
 9009              		.cfi_def_cfa_register 13
 9010              		@ sp needed
 9011 00f2 80BC     		pop	{r7}
 9012              		.cfi_restore 7
 9013              		.cfi_def_cfa_offset 0
 9014 00f4 7047     		bx	lr
 9015              	.L588:
 9016 00f6 00BF     		.align	2
 9017              	.L587:
 9018 00f8 00000000 		.word	c_mem
 9019 00fc 00000000 		.word	g_mem
 9020 0100 00000000 		.word	g_meas
 9021 0104 00000000 		.word	dev_pwm_limit
 9022 0108 00000000 		.word	dev_pwm_sat
 9023              		.cfi_endproc
 9024              	.LFE75:
 9025              		.size	overcurrent_control, .-overcurrent_control
 9026              		.section	.text.pwm_limit_search,"ax",%progbits
 9027              		.align	2
 9028              		.global	pwm_limit_search
 9029              		.thumb
 9030              		.thumb_func
 9031              		.type	pwm_limit_search, %function
 9032              	pwm_limit_search:
 9033              	.LFB76:
2580:..\src/interruptions.c **** 
2581:..\src/interruptions.c **** //==============================================================================
2582:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2583:..\src/interruptions.c **** //==============================================================================
2584:..\src/interruptions.c **** 
2585:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 208


 9034              		.loc 1 2585 0
 9035              		.cfi_startproc
 9036              		@ args = 0, pretend = 0, frame = 16
 9037              		@ frame_needed = 1, uses_anonymous_args = 0
 9038              		@ link register save eliminated.
 9039 0000 80B4     		push	{r7}
 9040              		.cfi_def_cfa_offset 4
 9041              		.cfi_offset 7, -4
 9042 0002 85B0     		sub	sp, sp, #20
 9043              		.cfi_def_cfa_offset 24
 9044 0004 00AF     		add	r7, sp, #0
 9045              		.cfi_def_cfa_register 7
 9046 0006 0346     		mov	r3, r0
 9047 0008 FB71     		strb	r3, [r7, #7]
2586:..\src/interruptions.c **** 
2587:..\src/interruptions.c ****     uint8 CYDATA index;
2588:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 9048              		.loc 1 2588 0
 9049 000a 46F28473 		movw	r3, #26500
 9050 000e FB81     		strh	r3, [r7, #14]	@ movhi
2589:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 9051              		.loc 1 2589 0
 9052 0010 42F6EC43 		movw	r3, #11500
 9053 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2590:..\src/interruptions.c ****     
2591:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 9054              		.loc 1 2591 0
 9055 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9056 0018 1F4A     		ldr	r2, .L596
 9057 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9058 001e FB89     		ldrh	r3, [r7, #14]
 9059 0020 9A42     		cmp	r2, r3
 9060 0022 05DD     		ble	.L590
2592:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 9061              		.loc 1 2592 0
 9062 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9063 0026 1D4A     		ldr	r2, .L596+4
 9064 0028 0021     		movs	r1, #0
 9065 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2593:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2594:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2595:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2596:..\src/interruptions.c ****         } else {
2597:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2598:..\src/interruptions.c ****         }
2599:..\src/interruptions.c ****     } else {
2600:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2601:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2602:..\src/interruptions.c ****     }
2603:..\src/interruptions.c **** }
 9066              		.loc 1 2603 0
 9067 002e 2EE0     		b	.L595
 9068              	.L590:
2593:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 9069              		.loc 1 2593 0
 9070 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9071 0032 194A     		ldr	r2, .L596
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 209


 9072 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9073 0038 BB89     		ldrh	r3, [r7, #12]
 9074 003a 9A42     		cmp	r2, r3
 9075 003c 17DA     		bge	.L592
2594:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 9076              		.loc 1 2594 0
 9077 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9078 0040 1749     		ldr	r1, .L596+8
 9079 0042 1346     		mov	r3, r2
 9080 0044 DB00     		lsls	r3, r3, #3
 9081 0046 9B1A     		subs	r3, r3, r2
 9082 0048 1B01     		lsls	r3, r3, #4
 9083 004a 0B44     		add	r3, r3, r1
 9084 004c E233     		adds	r3, r3, #226
 9085 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9086 0050 022B     		cmp	r3, #2
 9087 0052 06D1     		bne	.L593
2595:..\src/interruptions.c ****         } else {
 9088              		.loc 1 2595 0
 9089 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9090 0056 114A     		ldr	r2, .L596+4
 9091 0058 40F6A931 		movw	r1, #2985
 9092 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9093              		.loc 1 2603 0
 9094 0060 15E0     		b	.L595
 9095              	.L593:
2597:..\src/interruptions.c ****         }
 9096              		.loc 1 2597 0
 9097 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9098 0064 0D4A     		ldr	r2, .L596+4
 9099 0066 6421     		movs	r1, #100
 9100 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9101              		.loc 1 2603 0
 9102 006c 0FE0     		b	.L595
 9103              	.L592:
2600:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 9104              		.loc 1 2600 0
 9105 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9106 0070 094A     		ldr	r2, .L596
 9107 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9108 0076 BB89     		ldrh	r3, [r7, #12]
 9109 0078 D31A     		subs	r3, r2, r3
 9110 007a 5B12     		asrs	r3, r3, #9
 9111 007c FB72     		strb	r3, [r7, #11]
2601:..\src/interruptions.c ****     }
 9112              		.loc 1 2601 0
 9113 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9114 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9115 0082 0849     		ldr	r1, .L596+12
 9116 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9117 0086 91B2     		uxth	r1, r2
 9118 0088 044A     		ldr	r2, .L596+4
 9119 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9120              	.L595:
 9121              		.loc 1 2603 0
 9122 008e 00BF     		nop
 9123 0090 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 210


 9124              		.cfi_def_cfa_offset 4
 9125 0092 BD46     		mov	sp, r7
 9126              		.cfi_def_cfa_register 13
 9127              		@ sp needed
 9128 0094 80BC     		pop	{r7}
 9129              		.cfi_restore 7
 9130              		.cfi_def_cfa_offset 0
 9131 0096 7047     		bx	lr
 9132              	.L597:
 9133              		.align	2
 9134              	.L596:
 9135 0098 00000000 		.word	dev_tension
 9136 009c 00000000 		.word	dev_pwm_sat
 9137 00a0 00000000 		.word	c_mem
 9138 00a4 00000000 		.word	pwm_preload_values
 9139              		.cfi_endproc
 9140              	.LFE76:
 9141              		.size	pwm_limit_search, .-pwm_limit_search
 9142              		.section	.text.cycles_counter_update,"ax",%progbits
 9143              		.align	2
 9144              		.global	cycles_counter_update
 9145              		.thumb
 9146              		.thumb_func
 9147              		.type	cycles_counter_update, %function
 9148              	cycles_counter_update:
 9149              	.LFB77:
2604:..\src/interruptions.c **** 
2605:..\src/interruptions.c **** //==============================================================================
2606:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2607:..\src/interruptions.c **** //==============================================================================
2608:..\src/interruptions.c **** 
2609:..\src/interruptions.c **** void cycles_counter_update() {
 9150              		.loc 1 2609 0
 9151              		.cfi_startproc
 9152              		@ args = 0, pretend = 0, frame = 24
 9153              		@ frame_needed = 1, uses_anonymous_args = 0
 9154 0000 80B5     		push	{r7, lr}
 9155              		.cfi_def_cfa_offset 8
 9156              		.cfi_offset 7, -8
 9157              		.cfi_offset 14, -4
 9158 0002 86B0     		sub	sp, sp, #24
 9159              		.cfi_def_cfa_offset 32
 9160 0004 00AF     		add	r7, sp, #0
 9161              		.cfi_def_cfa_register 7
2610:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2611:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2612:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2613:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2614:..\src/interruptions.c ****     static int32 thr_pos = 0;
2615:..\src/interruptions.c ****     static int32 max_pos = 0;
2616:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2617:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9162              		.loc 1 2617 0
 9163 0006 0023     		movs	r3, #0
 9164 0008 FB60     		str	r3, [r7, #12]
 9165 000a 0023     		movs	r3, #0
 9166 000c BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 211


 9167 000e 0023     		movs	r3, #0
 9168 0010 3B61     		str	r3, [r7, #16]
2618:..\src/interruptions.c ****     int32 step;
2619:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2620:..\src/interruptions.c **** 
2621:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9169              		.loc 1 2621 0
 9170 0012 A34B     		ldr	r3, .L646
 9171 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9172 0018 1946     		mov	r1, r3
 9173 001a A24A     		ldr	r2, .L646+4
 9174 001c 3423     		movs	r3, #52
 9175 001e 03FB01F3 		mul	r3, r3, r1
 9176 0022 1344     		add	r3, r3, r2
 9177 0024 1A68     		ldr	r2, [r3]
 9178 0026 9E4B     		ldr	r3, .L646
 9179 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9180 002c 1846     		mov	r0, r3
 9181 002e 9C49     		ldr	r1, .L646
 9182 0030 0346     		mov	r3, r0
 9183 0032 5B00     		lsls	r3, r3, #1
 9184 0034 0344     		add	r3, r3, r0
 9185 0036 1B01     		lsls	r3, r3, #4
 9186 0038 0B44     		add	r3, r3, r1
 9187 003a 03F29513 		addw	r3, r3, #405
 9188 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9189 0040 42FA03F3 		asr	r3, r2, r3
 9190 0044 FB60     		str	r3, [r7, #12]
2622:..\src/interruptions.c ****         
2623:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2624:..\src/interruptions.c ****     switch (pos_cycle_status){
 9191              		.loc 1 2624 0
 9192 0046 984B     		ldr	r3, .L646+8
 9193 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9194 004a 012B     		cmp	r3, #1
 9195 004c 3AD0     		beq	.L600
 9196 004e 022B     		cmp	r3, #2
 9197 0050 6ED0     		beq	.L601
 9198 0052 002B     		cmp	r3, #0
 9199 0054 40F02181 		bne	.L599
2625:..\src/interruptions.c ****         case STATE_INACTIVE:
2626:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9200              		.loc 1 2626 0
 9201 0058 914B     		ldr	r3, .L646
 9202 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9203 005e 072B     		cmp	r3, #7
 9204 0060 04D0     		beq	.L603
 9205              		.loc 1 2626 0 is_stmt 0 discriminator 1
 9206 0062 924B     		ldr	r3, .L646+12
 9207 0064 93F90030 		ldrsb	r3, [r3]
 9208 0068 012B     		cmp	r3, #1
 9209 006a 0CD0     		beq	.L604
 9210              	.L603:
 9211              		.loc 1 2626 0 discriminator 3
 9212 006c 8C4B     		ldr	r3, .L646
 9213 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9214 0072 072B     		cmp	r3, #7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 212


 9215 0074 40F00E81 		bne	.L640
 9216              		.loc 1 2626 0 discriminator 4
 9217 0078 8C4B     		ldr	r3, .L646+12
 9218 007a 93F90030 		ldrsb	r3, [r3]
 9219 007e B3F1FF3F 		cmp	r3, #-1
 9220 0082 40F00781 		bne	.L640
 9221              	.L604:
2627:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9222              		.loc 1 2627 0 is_stmt 1
 9223 0086 8A4A     		ldr	r2, .L646+16
 9224 0088 FB68     		ldr	r3, [r7, #12]
 9225 008a 1360     		str	r3, [r2]
2628:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9226              		.loc 1 2628 0
 9227 008c 894B     		ldr	r3, .L646+20
 9228 008e 1A68     		ldr	r2, [r3]
 9229 0090 874B     		ldr	r3, .L646+16
 9230 0092 1B68     		ldr	r3, [r3]
 9231 0094 9A42     		cmp	r2, r3
 9232 0096 05DD     		ble	.L606
 9233              		.loc 1 2628 0 is_stmt 0 discriminator 1
 9234 0098 864B     		ldr	r3, .L646+20
 9235 009a 1A68     		ldr	r2, [r3]
 9236 009c 844B     		ldr	r3, .L646+16
 9237 009e 1B68     		ldr	r3, [r3]
 9238 00a0 D31A     		subs	r3, r2, r3
 9239 00a2 04E0     		b	.L607
 9240              	.L606:
 9241              		.loc 1 2628 0 discriminator 2
 9242 00a4 824B     		ldr	r3, .L646+16
 9243 00a6 1A68     		ldr	r2, [r3]
 9244 00a8 824B     		ldr	r3, .L646+20
 9245 00aa 1B68     		ldr	r3, [r3]
 9246 00ac D31A     		subs	r3, r2, r3
 9247              	.L607:
 9248              		.loc 1 2628 0 discriminator 4
 9249 00ae BB60     		str	r3, [r7, #8]
2629:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9250              		.loc 1 2629 0 is_stmt 1 discriminator 4
 9251 00b0 7B4B     		ldr	r3, .L646
 9252 00b2 5A6D     		ldr	r2, [r3, #84]
 9253 00b4 BB68     		ldr	r3, [r7, #8]
 9254 00b6 1344     		add	r3, r3, r2
 9255 00b8 794A     		ldr	r2, .L646
 9256 00ba 5365     		str	r3, [r2, #84]
2630:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9257              		.loc 1 2630 0 discriminator 4
 9258 00bc 7A4B     		ldr	r3, .L646+8
 9259 00be 0122     		movs	r2, #1
 9260 00c0 1A70     		strb	r2, [r3]
2631:..\src/interruptions.c ****             }
2632:..\src/interruptions.c ****             break;
 9261              		.loc 1 2632 0 discriminator 4
 9262 00c2 E7E0     		b	.L640
 9263              	.L600:
2633:..\src/interruptions.c ****         case STATE_ACTIVE:
2634:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 213


 9264              		.loc 1 2634 0
 9265 00c4 764B     		ldr	r3, .L646
 9266 00c6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9267 00ca 072B     		cmp	r3, #7
 9268 00cc 05D0     		beq	.L608
 9269              		.loc 1 2634 0 is_stmt 0 discriminator 1
 9270 00ce 774B     		ldr	r3, .L646+12
 9271 00d0 93F90030 		ldrsb	r3, [r3]
 9272 00d4 B3F1FF3F 		cmp	r3, #-1
 9273 00d8 0BD0     		beq	.L609
 9274              	.L608:
 9275              		.loc 1 2634 0 discriminator 3
 9276 00da 714B     		ldr	r3, .L646
 9277 00dc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9278 00e0 072B     		cmp	r3, #7
 9279 00e2 40F0D980 		bne	.L641
 9280              		.loc 1 2634 0 discriminator 4
 9281 00e6 714B     		ldr	r3, .L646+12
 9282 00e8 93F90030 		ldrsb	r3, [r3]
 9283 00ec 012B     		cmp	r3, #1
 9284 00ee 40F0D380 		bne	.L641
 9285              	.L609:
2635:..\src/interruptions.c ****                 max_pos = curr_pos;
 9286              		.loc 1 2635 0 is_stmt 1
 9287 00f2 704A     		ldr	r2, .L646+20
 9288 00f4 FB68     		ldr	r3, [r7, #12]
 9289 00f6 1360     		str	r3, [r2]
2636:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9290              		.loc 1 2636 0
 9291 00f8 6E4B     		ldr	r3, .L646+20
 9292 00fa 1A68     		ldr	r2, [r3]
 9293 00fc 6C4B     		ldr	r3, .L646+16
 9294 00fe 1B68     		ldr	r3, [r3]
 9295 0100 9A42     		cmp	r2, r3
 9296 0102 05DD     		ble	.L611
 9297              		.loc 1 2636 0 is_stmt 0 discriminator 1
 9298 0104 6B4B     		ldr	r3, .L646+20
 9299 0106 1A68     		ldr	r2, [r3]
 9300 0108 694B     		ldr	r3, .L646+16
 9301 010a 1B68     		ldr	r3, [r3]
 9302 010c D31A     		subs	r3, r2, r3
 9303 010e 04E0     		b	.L612
 9304              	.L611:
 9305              		.loc 1 2636 0 discriminator 2
 9306 0110 674B     		ldr	r3, .L646+16
 9307 0112 1A68     		ldr	r2, [r3]
 9308 0114 674B     		ldr	r3, .L646+20
 9309 0116 1B68     		ldr	r3, [r3]
 9310 0118 D31A     		subs	r3, r2, r3
 9311              	.L612:
 9312              		.loc 1 2636 0 discriminator 4
 9313 011a BB60     		str	r3, [r7, #8]
2637:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9314              		.loc 1 2637 0 is_stmt 1 discriminator 4
 9315 011c 604B     		ldr	r3, .L646
 9316 011e 5A6D     		ldr	r2, [r3, #84]
 9317 0120 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 214


 9318 0122 1344     		add	r3, r3, r2
 9319 0124 5E4A     		ldr	r2, .L646
 9320 0126 5365     		str	r3, [r2, #84]
2638:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9321              		.loc 1 2638 0 discriminator 4
 9322 0128 5F4B     		ldr	r3, .L646+8
 9323 012a 0222     		movs	r2, #2
 9324 012c 1A70     		strb	r2, [r3]
2639:..\src/interruptions.c ****             }
2640:..\src/interruptions.c ****             break;
 9325              		.loc 1 2640 0 discriminator 4
 9326 012e B3E0     		b	.L641
 9327              	.L601:
2641:..\src/interruptions.c ****         case COUNTER_INC:
2642:..\src/interruptions.c **** 
2643:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9328              		.loc 1 2643 0
 9329 0130 604B     		ldr	r3, .L646+20
 9330 0132 1A68     		ldr	r2, [r3]
 9331 0134 5E4B     		ldr	r3, .L646+16
 9332 0136 1B68     		ldr	r3, [r3]
 9333 0138 9A42     		cmp	r2, r3
 9334 013a 05DD     		ble	.L613
 9335              		.loc 1 2643 0 is_stmt 0 discriminator 1
 9336 013c 5D4B     		ldr	r3, .L646+20
 9337 013e 1A68     		ldr	r2, [r3]
 9338 0140 5B4B     		ldr	r3, .L646+16
 9339 0142 1B68     		ldr	r3, [r3]
 9340 0144 D31A     		subs	r3, r2, r3
 9341 0146 04E0     		b	.L614
 9342              	.L613:
 9343              		.loc 1 2643 0 discriminator 2
 9344 0148 594B     		ldr	r3, .L646+16
 9345 014a 1A68     		ldr	r2, [r3]
 9346 014c 594B     		ldr	r3, .L646+20
 9347 014e 1B68     		ldr	r3, [r3]
 9348 0150 D31A     		subs	r3, r2, r3
 9349              	.L614:
 9350              		.loc 1 2643 0 discriminator 4
 9351 0152 BB60     		str	r3, [r7, #8]
2644:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9352              		.loc 1 2644 0 is_stmt 1 discriminator 4
 9353 0154 584B     		ldr	r3, .L646+24
 9354 0156 1B68     		ldr	r3, [r3]
 9355 0158 BA68     		ldr	r2, [r7, #8]
 9356 015a 9A42     		cmp	r2, r3
 9357 015c 40F39680 		ble	.L615
2645:..\src/interruptions.c ****                 //update position histogram
2646:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9358              		.loc 1 2646 0
 9359 0160 4F4B     		ldr	r3, .L646
 9360 0162 D3F8E820 		ldr	r2, [r3, #232]
 9361 0166 4E4B     		ldr	r3, .L646
 9362 0168 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9363 016c 1846     		mov	r0, r3
 9364 016e 4C49     		ldr	r1, .L646
 9365 0170 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 215


 9366 0172 5B00     		lsls	r3, r3, #1
 9367 0174 0344     		add	r3, r3, r0
 9368 0176 1B01     		lsls	r3, r3, #4
 9369 0178 0B44     		add	r3, r3, r1
 9370 017a 03F29513 		addw	r3, r3, #405
 9371 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9372 0180 42FA03F3 		asr	r3, r2, r3
 9373 0184 4D4A     		ldr	r2, .L646+28
 9374 0186 82FB0312 		smull	r1, r2, r2, r3
 9375 018a 9210     		asrs	r2, r2, #2
 9376 018c DB17     		asrs	r3, r3, #31
 9377 018e D31A     		subs	r3, r2, r3
 9378 0190 7B60     		str	r3, [r7, #4]
2647:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9379              		.loc 1 2647 0
 9380 0192 474B     		ldr	r3, .L646+16
 9381 0194 1A68     		ldr	r2, [r3]
 9382 0196 7B68     		ldr	r3, [r7, #4]
 9383 0198 92FBF3F3 		sdiv	r3, r2, r3
 9384 019c FB70     		strb	r3, [r7, #3]
2648:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9385              		.loc 1 2648 0
 9386 019e 454B     		ldr	r3, .L646+20
 9387 01a0 1A68     		ldr	r2, [r3]
 9388 01a2 7B68     		ldr	r3, [r7, #4]
 9389 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9390 01a8 BB70     		strb	r3, [r7, #2]
2649:..\src/interruptions.c ****                 
2650:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2651:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9391              		.loc 1 2651 0
 9392 01aa BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9393 01ac FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9394 01ae 9342     		cmp	r3, r2
 9395 01b0 28BF     		it	cs
 9396 01b2 1346     		movcs	r3, r2
 9397 01b4 7B70     		strb	r3, [r7, #1]
2652:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9398              		.loc 1 2652 0
 9399 01b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9400 01b8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9401 01ba 9342     		cmp	r3, r2
 9402 01bc 38BF     		it	cc
 9403 01be 1346     		movcc	r3, r2
 9404 01c0 3B70     		strb	r3, [r7]
2653:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9405              		.loc 1 2653 0
 9406 01c2 7B78     		ldrb	r3, [r7, #1]
 9407 01c4 FB75     		strb	r3, [r7, #23]
 9408 01c6 0DE0     		b	.L616
 9409              	.L618:
2654:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2655:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9410              		.loc 1 2655 0 discriminator 4
 9411 01c8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9412 01ca FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9413 01cc 3449     		ldr	r1, .L646
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 216


 9414 01ce 0632     		adds	r2, r2, #6
 9415 01d0 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9416 01d4 0132     		adds	r2, r2, #1
 9417 01d6 3249     		ldr	r1, .L646
 9418 01d8 0633     		adds	r3, r3, #6
 9419 01da 41F82320 		str	r2, [r1, r3, lsl #2]
2653:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9420              		.loc 1 2653 0 discriminator 4
 9421 01de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9422 01e0 0133     		adds	r3, r3, #1
 9423 01e2 FB75     		strb	r3, [r7, #23]
 9424              	.L616:
2653:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9425              		.loc 1 2653 0 is_stmt 0 discriminator 1
 9426 01e4 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9427 01e6 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9428 01e8 9A42     		cmp	r2, r3
 9429 01ea 02D8     		bhi	.L617
2653:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9430              		.loc 1 2653 0 discriminator 3
 9431 01ec FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9432 01ee 092B     		cmp	r3, #9
 9433 01f0 EAD9     		bls	.L618
 9434              	.L617:
2656:..\src/interruptions.c ****                 }
2657:..\src/interruptions.c ****                 
2658:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2659:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9435              		.loc 1 2659 0 is_stmt 1
 9436 01f2 2B4B     		ldr	r3, .L646
 9437 01f4 B3F90C31 		ldrsh	r3, [r3, #268]
 9438 01f8 002B     		cmp	r3, #0
 9439 01fa 00DA     		bge	.L619
 9440 01fc 0333     		adds	r3, r3, #3
 9441              	.L619:
 9442 01fe 9B10     		asrs	r3, r3, #2
 9443 0200 1BB2     		sxth	r3, r3
 9444 0202 7B60     		str	r3, [r7, #4]
2660:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9445              		.loc 1 2660 0
 9446 0204 264B     		ldr	r3, .L646
 9447 0206 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9448 020a 012B     		cmp	r3, #1
 9449 020c 0CD1     		bne	.L620
2661:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9450              		.loc 1 2661 0
 9451 020e 244B     		ldr	r3, .L646
 9452 0210 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9453 0214 1946     		mov	r1, r3
 9454 0216 234A     		ldr	r2, .L646+4
 9455 0218 3423     		movs	r3, #52
 9456 021a 03FB01F3 		mul	r3, r3, r1
 9457 021e 1344     		add	r3, r3, r2
 9458 0220 1433     		adds	r3, r3, #20
 9459 0222 1B68     		ldr	r3, [r3]
 9460 0224 3B61     		str	r3, [r7, #16]
 9461 0226 0BE0     		b	.L621
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 217


 9462              	.L620:
2662:..\src/interruptions.c ****                 else
2663:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9463              		.loc 1 2663 0
 9464 0228 1D4B     		ldr	r3, .L646
 9465 022a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9466 022e 1946     		mov	r1, r3
 9467 0230 1C4A     		ldr	r2, .L646+4
 9468 0232 3423     		movs	r3, #52
 9469 0234 03FB01F3 		mul	r3, r3, r1
 9470 0238 1344     		add	r3, r3, r2
 9471 023a 0C33     		adds	r3, r3, #12
 9472 023c 1B68     		ldr	r3, [r3]
 9473 023e 3B61     		str	r3, [r7, #16]
 9474              	.L621:
2664:..\src/interruptions.c **** 
2665:..\src/interruptions.c ****                 if (curr_ref < 0){
 9475              		.loc 1 2665 0
 9476 0240 3B69     		ldr	r3, [r7, #16]
 9477 0242 002B     		cmp	r3, #0
 9478 0244 02DA     		bge	.L622
2666:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9479              		.loc 1 2666 0
 9480 0246 3B69     		ldr	r3, [r7, #16]
 9481 0248 5B42     		negs	r3, r3
 9482 024a 3B61     		str	r3, [r7, #16]
 9483              	.L622:
2667:..\src/interruptions.c ****                 }
2668:..\src/interruptions.c ****                 
2669:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9484              		.loc 1 2669 0
 9485 024c 144B     		ldr	r3, .L646
 9486 024e B3F90C31 		ldrsh	r3, [r3, #268]
 9487 0252 1A46     		mov	r2, r3
 9488 0254 3B69     		ldr	r3, [r7, #16]
 9489 0256 9A42     		cmp	r2, r3
 9490 0258 05DA     		bge	.L623
2670:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9491              		.loc 1 2670 0
 9492 025a 114B     		ldr	r3, .L646
 9493 025c DB6C     		ldr	r3, [r3, #76]
 9494 025e 0133     		adds	r3, r3, #1
 9495 0260 0F4A     		ldr	r2, .L646
 9496 0262 D364     		str	r3, [r2, #76]
 9497 0264 12E0     		b	.L615
 9498              	.L623:
2671:..\src/interruptions.c ****                 else
2672:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9499              		.loc 1 2672 0
 9500 0266 3A69     		ldr	r2, [r7, #16]
 9501 0268 7B68     		ldr	r3, [r7, #4]
 9502 026a 92FBF3F3 		sdiv	r3, r2, r3
 9503 026e DBB2     		uxtb	r3, r3
 9504 0270 3969     		ldr	r1, [r7, #16]
 9505 0272 7A68     		ldr	r2, [r7, #4]
 9506 0274 91FBF2F2 		sdiv	r2, r1, r2
 9507 0278 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 218


 9508 027a 0949     		ldr	r1, .L646
 9509 027c 1032     		adds	r2, r2, #16
 9510 027e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9511 0282 0132     		adds	r2, r2, #1
 9512 0284 0649     		ldr	r1, .L646
 9513 0286 1033     		adds	r3, r3, #16
 9514 0288 41F82320 		str	r2, [r1, r3, lsl #2]
 9515              	.L615:
2673:..\src/interruptions.c ****             }
2674:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9516              		.loc 1 2674 0
 9517 028c 064B     		ldr	r3, .L646+8
 9518 028e 0022     		movs	r2, #0
 9519 0290 1A70     		strb	r2, [r3]
2675:..\src/interruptions.c ****             break;
 9520              		.loc 1 2675 0
 9521 0292 02E0     		b	.L599
 9522              	.L640:
2632:..\src/interruptions.c ****         case STATE_ACTIVE:
 9523              		.loc 1 2632 0
 9524 0294 00BF     		nop
 9525 0296 00E0     		b	.L599
 9526              	.L641:
2640:..\src/interruptions.c ****         case COUNTER_INC:
 9527              		.loc 1 2640 0
 9528 0298 00BF     		nop
 9529              	.L599:
2676:..\src/interruptions.c ****     }
2677:..\src/interruptions.c ****     
2678:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2679:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9530              		.loc 1 2679 0
 9531 029a 0023     		movs	r3, #0
 9532 029c FB75     		strb	r3, [r7, #23]
 9533 029e 4FE0     		b	.L624
 9534              	.L647:
 9535              		.align	2
 9536              	.L646:
 9537 02a0 00000000 		.word	g_mem
 9538 02a4 00000000 		.word	g_meas
 9539 02a8 8A010000 		.word	pos_cycle_status.10725
 9540 02ac 00000000 		.word	pwm_sign
 9541 02b0 8C010000 		.word	thr_pos.10729
 9542 02b4 90010000 		.word	max_pos.10730
 9543 02b8 08000000 		.word	bin_threshold.10728
 9544 02bc 67666666 		.word	1717986919
 9545              	.L632:
2680:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9546              		.loc 1 2680 0
 9547 02c0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9548 02c2 4D4A     		ldr	r2, .L648
 9549 02c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9550 02c6 012B     		cmp	r3, #1
 9551 02c8 13D0     		beq	.L626
 9552 02ca 022B     		cmp	r3, #2
 9553 02cc 22D0     		beq	.L627
 9554 02ce 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 219


 9555 02d0 33D1     		bne	.L625
2681:..\src/interruptions.c ****             case STATE_INACTIVE:
2682:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9556              		.loc 1 2682 0
 9557 02d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9558 02d4 494A     		ldr	r2, .L648+4
 9559 02d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9560 02da FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9561 02dc 4849     		ldr	r1, .L648+8
 9562 02de F832     		adds	r2, r2, #248
 9563 02e0 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9564 02e4 9342     		cmp	r3, r2
 9565 02e6 25DD     		ble	.L642
2683:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9566              		.loc 1 2683 0
 9567 02e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9568 02ea 434A     		ldr	r2, .L648
 9569 02ec 0121     		movs	r1, #1
 9570 02ee D154     		strb	r1, [r2, r3]
2684:..\src/interruptions.c ****                 }
2685:..\src/interruptions.c ****                 break;
 9571              		.loc 1 2685 0
 9572 02f0 20E0     		b	.L642
 9573              	.L626:
2686:..\src/interruptions.c ****             case STATE_ACTIVE:
2687:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 9574              		.loc 1 2687 0
 9575 02f2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9576 02f4 414A     		ldr	r2, .L648+4
 9577 02f6 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9578 02fa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9579 02fc 4049     		ldr	r1, .L648+8
 9580 02fe F833     		adds	r3, r3, #248
 9581 0300 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9582 0304 0A3B     		subs	r3, r3, #10
 9583 0306 9A42     		cmp	r2, r3
 9584 0308 16DA     		bge	.L643
2688:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9585              		.loc 1 2688 0
 9586 030a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9587 030c 3A4A     		ldr	r2, .L648
 9588 030e 0221     		movs	r1, #2
 9589 0310 D154     		strb	r1, [r2, r3]
2689:..\src/interruptions.c ****                 }
2690:..\src/interruptions.c ****                 break;
 9590              		.loc 1 2690 0
 9591 0312 11E0     		b	.L643
 9592              	.L627:
2691:..\src/interruptions.c ****             case COUNTER_INC:
2692:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 9593              		.loc 1 2692 0
 9594 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9595 0316 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9596 0318 3949     		ldr	r1, .L648+8
 9597 031a 0432     		adds	r2, r2, #4
 9598 031c 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9599 0320 0132     		adds	r2, r2, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 220


 9600 0322 3749     		ldr	r1, .L648+8
 9601 0324 0433     		adds	r3, r3, #4
 9602 0326 41F82320 		str	r2, [r1, r3, lsl #2]
2693:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9603              		.loc 1 2693 0
 9604 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9605 032c 324A     		ldr	r2, .L648
 9606 032e 0021     		movs	r1, #0
 9607 0330 D154     		strb	r1, [r2, r3]
2694:..\src/interruptions.c ****                 break;
 9608              		.loc 1 2694 0
 9609 0332 02E0     		b	.L625
 9610              	.L642:
2685:..\src/interruptions.c ****             case STATE_ACTIVE:
 9611              		.loc 1 2685 0
 9612 0334 00BF     		nop
 9613 0336 00E0     		b	.L625
 9614              	.L643:
2690:..\src/interruptions.c ****             case COUNTER_INC:
 9615              		.loc 1 2690 0
 9616 0338 00BF     		nop
 9617              	.L625:
2679:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9618              		.loc 1 2679 0 discriminator 2
 9619 033a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9620 033c 0133     		adds	r3, r3, #1
 9621 033e FB75     		strb	r3, [r7, #23]
 9622              	.L624:
2679:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9623              		.loc 1 2679 0 is_stmt 0 discriminator 1
 9624 0340 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9625 0342 012B     		cmp	r3, #1
 9626 0344 07D8     		bhi	.L631
2679:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9627              		.loc 1 2679 0 discriminator 3
 9628 0346 2F4B     		ldr	r3, .L648+12
 9629 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9630 034a 002B     		cmp	r3, #0
 9631 034c 03D1     		bne	.L631
2679:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9632              		.loc 1 2679 0 discriminator 4
 9633 034e 2E4B     		ldr	r3, .L648+16
 9634 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9635 0352 002B     		cmp	r3, #0
 9636 0354 B4D0     		beq	.L632
 9637              	.L631:
2695:..\src/interruptions.c ****         }
2696:..\src/interruptions.c ****     }
2697:..\src/interruptions.c ****     
2698:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2699:..\src/interruptions.c ****     switch (rest_cycle_status){
 9638              		.loc 1 2699 0 is_stmt 1
 9639 0356 2D4B     		ldr	r3, .L648+20
 9640 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9641 035a 012B     		cmp	r3, #1
 9642 035c 11D0     		beq	.L634
 9643 035e 022B     		cmp	r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 221


 9644 0360 2AD0     		beq	.L635
 9645 0362 002B     		cmp	r3, #0
 9646 0364 42D1     		bne	.L633
2700:..\src/interruptions.c ****         case STATE_INACTIVE:
2701:..\src/interruptions.c ****             if (rest_enabled){
 9647              		.loc 1 2701 0
 9648 0366 2A4B     		ldr	r3, .L648+24
 9649 0368 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9650 036a 002B     		cmp	r3, #0
 9651 036c 3BD0     		beq	.L644
2702:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9652              		.loc 1 2702 0
 9653 036e FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9654 0372 0346     		mov	r3, r0
 9655 0374 1A46     		mov	r2, r3
 9656 0376 274B     		ldr	r3, .L648+28
 9657 0378 1A60     		str	r2, [r3]
2703:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9658              		.loc 1 2703 0
 9659 037a 244B     		ldr	r3, .L648+20
 9660 037c 0122     		movs	r2, #1
 9661 037e 1A70     		strb	r2, [r3]
2704:..\src/interruptions.c ****             }
2705:..\src/interruptions.c ****             break;
 9662              		.loc 1 2705 0
 9663 0380 31E0     		b	.L644
 9664              	.L634:
2706:..\src/interruptions.c ****         case STATE_ACTIVE:
2707:..\src/interruptions.c ****             if (!rest_enabled){
 9665              		.loc 1 2707 0
 9666 0382 234B     		ldr	r3, .L648+24
 9667 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9668 0386 002B     		cmp	r3, #0
 9669 0388 2FD1     		bne	.L645
2708:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9670              		.loc 1 2708 0
 9671 038a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9672 038e 0346     		mov	r3, r0
 9673 0390 1A46     		mov	r2, r3
 9674 0392 214B     		ldr	r3, .L648+32
 9675 0394 1A60     		str	r2, [r3]
2709:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9676              		.loc 1 2709 0
 9677 0396 1F4B     		ldr	r3, .L648+28
 9678 0398 1A68     		ldr	r2, [r3]
 9679 039a 1F4B     		ldr	r3, .L648+32
 9680 039c 1B68     		ldr	r3, [r3]
 9681 039e 9A42     		cmp	r2, r3
 9682 03a0 06D2     		bcs	.L639
2710:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9683              		.loc 1 2710 0
 9684 03a2 1C4B     		ldr	r3, .L648+28
 9685 03a4 1B68     		ldr	r3, [r3]
 9686 03a6 03F5BB53 		add	r3, r3, #5984
 9687 03aa 1033     		adds	r3, r3, #16
 9688 03ac 194A     		ldr	r2, .L648+28
 9689 03ae 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 222


 9690              	.L639:
2711:..\src/interruptions.c ****                 }
2712:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9691              		.loc 1 2712 0
 9692 03b0 164B     		ldr	r3, .L648+20
 9693 03b2 0222     		movs	r2, #2
 9694 03b4 1A70     		strb	r2, [r3]
2713:..\src/interruptions.c ****             }
2714:..\src/interruptions.c ****             break;
 9695              		.loc 1 2714 0
 9696 03b6 18E0     		b	.L645
 9697              	.L635:
2715:..\src/interruptions.c ****         case COUNTER_INC: 
2716:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9698              		.loc 1 2716 0
 9699 03b8 114B     		ldr	r3, .L648+8
 9700 03ba DA6D     		ldr	r2, [r3, #92]
 9701 03bc 154B     		ldr	r3, .L648+28
 9702 03be 1968     		ldr	r1, [r3]
 9703 03c0 154B     		ldr	r3, .L648+32
 9704 03c2 1B68     		ldr	r3, [r3]
 9705 03c4 CB1A     		subs	r3, r1, r3
 9706 03c6 1549     		ldr	r1, .L648+36
 9707 03c8 A1FB0313 		umull	r1, r3, r1, r3
 9708 03cc 1B09     		lsrs	r3, r3, #4
 9709 03ce 1344     		add	r3, r3, r2
 9710 03d0 0B4A     		ldr	r2, .L648+8
 9711 03d2 D365     		str	r3, [r2, #92]
2717:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9712              		.loc 1 2717 0
 9713 03d4 0A4B     		ldr	r3, .L648+8
 9714 03d6 1B6D     		ldr	r3, [r3, #80]
 9715 03d8 0133     		adds	r3, r3, #1
 9716 03da 094A     		ldr	r2, .L648+8
 9717 03dc 1365     		str	r3, [r2, #80]
2718:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9718              		.loc 1 2718 0
 9719 03de 0B4B     		ldr	r3, .L648+20
 9720 03e0 0022     		movs	r2, #0
 9721 03e2 1A70     		strb	r2, [r3]
2719:..\src/interruptions.c ****             break;
 9722              		.loc 1 2719 0
 9723 03e4 02E0     		b	.L633
 9724              	.L644:
2705:..\src/interruptions.c ****         case STATE_ACTIVE:
 9725              		.loc 1 2705 0
 9726 03e6 00BF     		nop
 9727 03e8 00E0     		b	.L633
 9728              	.L645:
2714:..\src/interruptions.c ****         case COUNTER_INC: 
 9729              		.loc 1 2714 0
 9730 03ea 00BF     		nop
 9731              	.L633:
2720:..\src/interruptions.c ****     }
2721:..\src/interruptions.c ****           
2722:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2723:..\src/interruptions.c ****     save_cycles_eeprom();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 223


 9732              		.loc 1 2723 0
 9733 03ec FFF7FEFF 		bl	save_cycles_eeprom
2724:..\src/interruptions.c ****     
2725:..\src/interruptions.c **** }
 9734              		.loc 1 2725 0
 9735 03f0 00BF     		nop
 9736 03f2 1837     		adds	r7, r7, #24
 9737              		.cfi_def_cfa_offset 8
 9738 03f4 BD46     		mov	sp, r7
 9739              		.cfi_def_cfa_register 13
 9740              		@ sp needed
 9741 03f6 80BD     		pop	{r7, pc}
 9742              	.L649:
 9743              		.align	2
 9744              	.L648:
 9745 03f8 94010000 		.word	emg_cycle_status.10726
 9746 03fc 00000000 		.word	g_adc_meas
 9747 0400 00000000 		.word	g_mem
 9748 0404 00000000 		.word	emg_1_status
 9749 0408 00000000 		.word	emg_2_status
 9750 040c 96010000 		.word	rest_cycle_status.10727
 9751 0410 00000000 		.word	rest_enabled
 9752 0414 98010000 		.word	timer_value_s.10740
 9753 0418 9C010000 		.word	timer_value_e.10741
 9754 041c 1F85EB51 		.word	1374389535
 9755              		.cfi_endproc
 9756              	.LFE77:
 9757              		.size	cycles_counter_update, .-cycles_counter_update
 9758              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9759              		.align	2
 9760              		.global	save_cycles_eeprom
 9761              		.thumb
 9762              		.thumb_func
 9763              		.type	save_cycles_eeprom, %function
 9764              	save_cycles_eeprom:
 9765              	.LFB78:
2726:..\src/interruptions.c **** 
2727:..\src/interruptions.c **** //==============================================================================
2728:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2729:..\src/interruptions.c **** //==============================================================================
2730:..\src/interruptions.c **** 
2731:..\src/interruptions.c **** void save_cycles_eeprom() {
 9766              		.loc 1 2731 0
 9767              		.cfi_startproc
 9768              		@ args = 0, pretend = 0, frame = 24
 9769              		@ frame_needed = 1, uses_anonymous_args = 0
 9770 0000 80B5     		push	{r7, lr}
 9771              		.cfi_def_cfa_offset 8
 9772              		.cfi_offset 7, -8
 9773              		.cfi_offset 14, -4
 9774 0002 86B0     		sub	sp, sp, #24
 9775              		.cfi_def_cfa_offset 32
 9776 0004 00AF     		add	r7, sp, #0
 9777              		.cfi_def_cfa_register 7
2732:..\src/interruptions.c **** 
2733:..\src/interruptions.c ****     cystatus status;
2734:..\src/interruptions.c ****     static uint8 row_number;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 224


2735:..\src/interruptions.c ****     uint8 row_start = 1;
 9778              		.loc 1 2735 0
 9779 0006 0123     		movs	r3, #1
 9780 0008 FB75     		strb	r3, [r7, #23]
2736:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 9781              		.loc 1 2736 0
 9782 000a 394B     		ldr	r3, .L666
 9783 000c 3B61     		str	r3, [r7, #16]
2737:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 9784              		.loc 1 2737 0
 9785 000e 394B     		ldr	r3, .L666+4
 9786 0010 FB60     		str	r3, [r7, #12]
2738:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9787              		.loc 1 2738 0
 9788 0012 FB7D     		ldrb	r3, [r7, #23]
 9789 0014 0433     		adds	r3, r3, #4
 9790 0016 FB72     		strb	r3, [r7, #11]
2739:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2740:..\src/interruptions.c **** 
2741:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2742:..\src/interruptions.c ****     switch(cycles_status) {
 9791              		.loc 1 2742 0
 9792 0018 374B     		ldr	r3, .L666+8
 9793 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9794 001c 042B     		cmp	r3, #4
 9795 001e 63D8     		bhi	.L662
 9796 0020 01A2     		adr	r2, .L653
 9797 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9798 0026 00BF     		.p2align 2
 9799              	.L653:
 9800 0028 3D000000 		.word	.L652+1
 9801 002c 5B000000 		.word	.L654+1
 9802 0030 8B000000 		.word	.L655+1
 9803 0034 C7000000 		.word	.L656+1
 9804 0038 DF000000 		.word	.L663+1
 9805              		.p2align 1
 9806              	.L652:
2743:..\src/interruptions.c ****         case PREPARE_DATA:
2744:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2745:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9807              		.loc 1 2745 0
 9808 003c 5022     		movs	r2, #80
 9809 003e 3969     		ldr	r1, [r7, #16]
 9810 0040 F868     		ldr	r0, [r7, #12]
 9811 0042 FFF7FEFF 		bl	memcpy
2746:..\src/interruptions.c ****             m_addr = addr_start;
 9812              		.loc 1 2746 0
 9813 0046 2D4A     		ldr	r2, .L666+12
 9814 0048 3B69     		ldr	r3, [r7, #16]
 9815 004a 1360     		str	r3, [r2]
2747:..\src/interruptions.c ****             row_number = row_start;
 9816              		.loc 1 2747 0
 9817 004c 2C4A     		ldr	r2, .L666+16
 9818 004e FB7D     		ldrb	r3, [r7, #23]
 9819 0050 1370     		strb	r3, [r2]
2748:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9820              		.loc 1 2748 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 225


 9821 0052 294B     		ldr	r3, .L666+8
 9822 0054 0122     		movs	r2, #1
 9823 0056 1A70     		strb	r2, [r3]
2749:..\src/interruptions.c ****             break;
 9824              		.loc 1 2749 0
 9825 0058 46E0     		b	.L651
 9826              	.L654:
2750:..\src/interruptions.c ****             
2751:..\src/interruptions.c ****         case WRITE_CYCLES:
2752:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9827              		.loc 1 2752 0
 9828 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2753:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9829              		.loc 1 2753 0
 9830 005e 274B     		ldr	r3, .L666+12
 9831 0060 1A68     		ldr	r2, [r3]
 9832 0062 274B     		ldr	r3, .L666+16
 9833 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9834 0066 1946     		mov	r1, r3
 9835 0068 1046     		mov	r0, r2
 9836 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9837 006e 7860     		str	r0, [r7, #4]
2754:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9838              		.loc 1 2754 0
 9839 0070 7B68     		ldr	r3, [r7, #4]
 9840 0072 072B     		cmp	r3, #7
 9841 0074 02D0     		beq	.L658
 9842              		.loc 1 2754 0 is_stmt 0 discriminator 1
 9843 0076 7B68     		ldr	r3, [r7, #4]
 9844 0078 002B     		cmp	r3, #0
 9845 007a 32D1     		bne	.L664
 9846              	.L658:
2755:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9847              		.loc 1 2755 0 is_stmt 1
 9848 007c 1E4B     		ldr	r3, .L666+8
 9849 007e 0222     		movs	r2, #2
 9850 0080 1A70     		strb	r2, [r3]
2756:..\src/interruptions.c ****                 can_write = FALSE;
 9851              		.loc 1 2756 0
 9852 0082 204B     		ldr	r3, .L666+20
 9853 0084 0022     		movs	r2, #0
 9854 0086 1A70     		strb	r2, [r3]
2757:..\src/interruptions.c ****             }
2758:..\src/interruptions.c ****             break;
 9855              		.loc 1 2758 0
 9856 0088 2BE0     		b	.L664
 9857              	.L655:
2759:..\src/interruptions.c ****             
2760:..\src/interruptions.c ****         case WAIT_QUERY:
2761:..\src/interruptions.c ****             status = EEPROM_Query();
 9858              		.loc 1 2761 0
 9859 008a FFF7FEFF 		bl	EEPROM_Query
 9860 008e 7860     		str	r0, [r7, #4]
2762:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9861              		.loc 1 2762 0
 9862 0090 7B68     		ldr	r3, [r7, #4]
 9863 0092 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 226


 9864 0094 27D1     		bne	.L665
2763:..\src/interruptions.c ****                 if (row_number < row_end) {
 9865              		.loc 1 2763 0
 9866 0096 1A4B     		ldr	r3, .L666+16
 9867 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9868 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9869 009c 9A42     		cmp	r2, r3
 9870 009e 0ED9     		bls	.L661
2764:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 9871              		.loc 1 2764 0
 9872 00a0 164B     		ldr	r3, .L666+12
 9873 00a2 1B68     		ldr	r3, [r3]
 9874 00a4 1033     		adds	r3, r3, #16
 9875 00a6 154A     		ldr	r2, .L666+12
 9876 00a8 1360     		str	r3, [r2]
2765:..\src/interruptions.c ****                     row_number = row_number + 1;
 9877              		.loc 1 2765 0
 9878 00aa 154B     		ldr	r3, .L666+16
 9879 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9880 00ae 0133     		adds	r3, r3, #1
 9881 00b0 DAB2     		uxtb	r2, r3
 9882 00b2 134B     		ldr	r3, .L666+16
 9883 00b4 1A70     		strb	r2, [r3]
2766:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 9884              		.loc 1 2766 0
 9885 00b6 104B     		ldr	r3, .L666+8
 9886 00b8 0122     		movs	r2, #1
 9887 00ba 1A70     		strb	r2, [r3]
2767:..\src/interruptions.c ****                 }
2768:..\src/interruptions.c ****                 else {
2769:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2770:..\src/interruptions.c ****                 }
2771:..\src/interruptions.c ****             }
2772:..\src/interruptions.c ****             break;
 9888              		.loc 1 2772 0
 9889 00bc 13E0     		b	.L665
 9890              	.L661:
2769:..\src/interruptions.c ****                 }
 9891              		.loc 1 2769 0
 9892 00be 0E4B     		ldr	r3, .L666+8
 9893 00c0 0322     		movs	r2, #3
 9894 00c2 1A70     		strb	r2, [r3]
 9895              		.loc 1 2772 0
 9896 00c4 0FE0     		b	.L665
 9897              	.L656:
2773:..\src/interruptions.c ****            
2774:..\src/interruptions.c ****         case WRITE_END:
2775:..\src/interruptions.c ****             can_write = TRUE;            
 9898              		.loc 1 2775 0
 9899 00c6 0F4B     		ldr	r3, .L666+20
 9900 00c8 0122     		movs	r2, #1
 9901 00ca 1A70     		strb	r2, [r3]
2776:..\src/interruptions.c ****             cycles_status = NONE;
 9902              		.loc 1 2776 0
 9903 00cc 0A4B     		ldr	r3, .L666+8
 9904 00ce 0422     		movs	r2, #4
 9905 00d0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 227


2777:..\src/interruptions.c ****             
2778:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2779:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 9906              		.loc 1 2779 0
 9907 00d2 5022     		movs	r2, #80
 9908 00d4 F968     		ldr	r1, [r7, #12]
 9909 00d6 3869     		ldr	r0, [r7, #16]
 9910 00d8 FFF7FEFF 		bl	memcpy
2780:..\src/interruptions.c ****             break;
 9911              		.loc 1 2780 0
 9912 00dc 04E0     		b	.L651
 9913              	.L663:
2781:..\src/interruptions.c ****             
2782:..\src/interruptions.c ****         case NONE:
2783:..\src/interruptions.c ****             break;
 9914              		.loc 1 2783 0
 9915 00de 00BF     		nop
 9916 00e0 02E0     		b	.L662
 9917              	.L664:
2758:..\src/interruptions.c ****             
 9918              		.loc 1 2758 0
 9919 00e2 00BF     		nop
 9920 00e4 00E0     		b	.L662
 9921              	.L665:
2772:..\src/interruptions.c ****            
 9922              		.loc 1 2772 0
 9923 00e6 00BF     		nop
 9924              	.L651:
 9925              	.L662:
2784:..\src/interruptions.c ****     }
2785:..\src/interruptions.c ****     
2786:..\src/interruptions.c **** }
 9926              		.loc 1 2786 0
 9927 00e8 00BF     		nop
 9928 00ea 1837     		adds	r7, r7, #24
 9929              		.cfi_def_cfa_offset 8
 9930 00ec BD46     		mov	sp, r7
 9931              		.cfi_def_cfa_register 13
 9932              		@ sp needed
 9933 00ee 80BD     		pop	{r7, pc}
 9934              	.L667:
 9935              		.align	2
 9936              	.L666:
 9937 00f0 10000000 		.word	g_mem+16
 9938 00f4 10000000 		.word	c_mem+16
 9939 00f8 00000000 		.word	cycles_status
 9940 00fc A0010000 		.word	m_addr.10768
 9941 0100 A4010000 		.word	row_number.10763
 9942 0104 00000000 		.word	can_write
 9943              		.cfi_endproc
 9944              	.LFE78:
 9945              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 9946              		.bss
 9947              	state.10447:
 9948 0000 00       		.space	1
 9949 0001 000000   		.align	2
 9950              	rx_queue.10451:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 228


 9951 0004 000000   		.space	3
 9952              	data_packet_length.10449:
 9953 0007 00       		.space	1
 9954              	data_packet_index.10448:
 9955 0008 00       		.space	1
 9956 0009 000000   		.align	2
 9957              	data_packet_buffer.10450:
 9958 000c 00000000 		.space	128
 9958      00000000 
 9958      00000000 
 9958      00000000 
 9958      00000000 
 9959              		.data
 9960              		.align	1
 9961              		.type	counter_calibration.10467, %object
 9962              		.size	counter_calibration.10467, 2
 9963              	counter_calibration.10467:
 9964 0000 0100     		.short	1
 9965              		.align	1
 9966              		.type	counter_tension_func.10468, %object
 9967              		.size	counter_tension_func.10468, 2
 9968              	counter_tension_func.10468:
 9969 0002 0100     		.short	1
 9970              		.bss
 9971              		.align	2
 9972              	current_emg.10493:
 9973 008c 0000     		.space	2
 9974              	fsm_state.10530:
 9975 008e 00       		.space	1
 9976 008f 00       		.align	2
 9977              	pos_error_sum.10557:
 9978 0090 00000000 		.space	4
 9979              		.align	2
 9980              	prev_pos_err.10559:
 9981 0094 00000000 		.space	4
 9982              	motor_dir.10562:
 9983 0098 00       		.space	1
 9984 0099 000000   		.align	2
 9985              	curr_error_sum.10558:
 9986 009c 00000000 		.space	4
 9987              		.align	2
 9988              	prev_curr_err.10560:
 9989 00a0 00000000 		.space	4
 9990              		.align	2
 9991              	prev_pwm.10561:
 9992 00a4 00000000 		.space	4
 9993              		.align	2
 9994              	position_counter.10563:
 9995 00a8 00000000 		.space	4
 9996              		.align	2
 9997              	pos_error_sum.10590:
 9998 00ac 00000000 		.space	8
 9998      00000000 
 9999              		.align	2
 10000              	prev_pos_err.10592:
 10001 00b4 00000000 		.space	8
 10001      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 229


 10002              		.align	2
 10003              	motor_dir.10595:
 10004 00bc 0000     		.space	2
 10005 00be 0000     		.align	2
 10006              	curr_error_sum.10591:
 10007 00c0 00000000 		.space	8
 10007      00000000 
 10008              		.align	2
 10009              	prev_curr_err.10593:
 10010 00c8 00000000 		.space	8
 10010      00000000 
 10011              		.align	2
 10012              	prev_pwm.10594:
 10013 00d0 00000000 		.space	8
 10013      00000000 
 10014              		.align	2
 10015              	position_counter.10596:
 10016 00d8 00000000 		.space	8
 10016      00000000 
 10017              		.align	2
 10018              	last_value_encoder.10619:
 10019 00e0 00000000 		.space	24
 10019      00000000 
 10019      00000000 
 10019      00000000 
 10019      00000000 
 10020              		.align	2
 10021              	comp_value_encoder.10620:
 10022 00f8 00000000 		.space	24
 10022      00000000 
 10022      00000000 
 10022      00000000 
 10022      00000000 
 10023              		.data
 10024              		.align	2
 10025              		.type	only_first_time.10622, %object
 10026              		.size	only_first_time.10622, 2
 10027              	only_first_time.10622:
 10028 0004 01       		.byte	1
 10029 0005 01       		.byte	1
 10030              		.bss
 10031              		.align	2
 10032              	error.10621:
 10033 0110 00000000 		.space	6
 10033      0000
 10034 0116 0000     		.align	2
 10035              	v_value.10626:
 10036 0118 00000000 		.space	24
 10036      00000000 
 10036      00000000 
 10036      00000000 
 10036      00000000 
 10037              		.align	2
 10038              	vv_value.10627:
 10039 0130 00000000 		.space	24
 10039      00000000 
 10039      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 230


 10039      00000000 
 10039      00000000 
 10040              		.align	2
 10041              	vvv_value.10628:
 10042 0148 00000000 		.space	24
 10042      00000000 
 10042      00000000 
 10042      00000000 
 10042      00000000 
 10043              		.align	2
 10044              	one_time_execute.10624:
 10045 0160 0000     		.space	2
 10046 0162 0000     		.align	2
 10047              	safe_startup_motor_activation.10623:
 10048 0164 0000     		.space	2
 10049 0166 0000     		.align	2
 10050              	count_startup_motor.10625:
 10051 0168 00000000 		.space	8
 10051      00000000 
 10052              		.data
 10053              		.type	first_tension_valid.10651, %object
 10054              		.size	first_tension_valid.10651, 1
 10055              	first_tension_valid.10651:
 10056 0006 01       		.byte	1
 10057              		.bss
 10058              		.align	1
 10059              	count.10652:
 10060 0170 0000     		.space	2
 10061              	idx.10654:
 10062 0172 00       		.space	1
 10063 0173 00       		.align	2
 10064              	v_count.10653:
 10065 0174 00000000 		.space	4
 10066              		.align	1
 10067              	emg_counter_1.10645:
 10068 0178 0000     		.space	2
 10069              		.align	1
 10070              	emg_counter_2.10646:
 10071 017a 0000     		.space	2
 10072              		.align	2
 10073              	UD_mean_value.10649:
 10074 017c 00000000 		.space	4
 10075              		.align	1
 10076              	UD_counter.10647:
 10077 0180 0000     		.space	2
 10078 0182 0000     		.align	2
 10079              	LR_mean_value.10650:
 10080 0184 00000000 		.space	4
 10081              		.align	1
 10082              	LR_counter.10648:
 10083 0188 0000     		.space	2
 10084              	pos_cycle_status.10725:
 10085 018a 00       		.space	1
 10086 018b 00       		.align	2
 10087              	thr_pos.10729:
 10088 018c 00000000 		.space	4
 10089              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 231


 10090              	max_pos.10730:
 10091 0190 00000000 		.space	4
 10092              		.data
 10093 0007 00       		.align	2
 10094              		.type	bin_threshold.10728, %object
 10095              		.size	bin_threshold.10728, 4
 10096              	bin_threshold.10728:
 10097 0008 FA000000 		.word	250
 10098              		.bss
 10099              		.align	2
 10100              	emg_cycle_status.10726:
 10101 0194 0000     		.space	2
 10102              	rest_cycle_status.10727:
 10103 0196 00       		.space	1
 10104 0197 00       		.align	2
 10105              	timer_value_s.10740:
 10106 0198 00000000 		.space	4
 10107              		.align	2
 10108              	timer_value_e.10741:
 10109 019c 00000000 		.space	4
 10110              		.align	2
 10111              	m_addr.10768:
 10112 01a0 00000000 		.space	4
 10113              	row_number.10763:
 10114 01a4 00       		.space	1
 10115              		.text
 10116              	.Letext0:
 10117              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10118              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10119              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10120              		.file 5 "..\\src\\commands.h"
 10121              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10122              		.file 7 "..\\src\\globals.h"
 10123              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10124              		.section	.debug_info,"",%progbits
 10125              	.Ldebug_info0:
 10126 0000 271B0000 		.4byte	0x1b27
 10127 0004 0400     		.2byte	0x4
 10128 0006 00000000 		.4byte	.Ldebug_abbrev0
 10129 000a 04       		.byte	0x4
 10130 000b 01       		.uleb128 0x1
 10131 000c 9E080000 		.4byte	.LASF342
 10132 0010 0C       		.byte	0xc
 10133 0011 A3100000 		.4byte	.LASF343
 10134 0015 00000000 		.4byte	.LASF344
 10135 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10136 001d 00000000 		.4byte	0
 10137 0021 00000000 		.4byte	.Ldebug_line0
 10138 0025 02       		.uleb128 0x2
 10139 0026 01       		.byte	0x1
 10140 0027 06       		.byte	0x6
 10141 0028 01040000 		.4byte	.LASF0
 10142 002c 02       		.uleb128 0x2
 10143 002d 01       		.byte	0x1
 10144 002e 08       		.byte	0x8
 10145 002f 7E040000 		.4byte	.LASF1
 10146 0033 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 232


 10147 0034 02       		.byte	0x2
 10148 0035 05       		.byte	0x5
 10149 0036 980E0000 		.4byte	.LASF2
 10150 003a 02       		.uleb128 0x2
 10151 003b 02       		.byte	0x2
 10152 003c 07       		.byte	0x7
 10153 003d 47100000 		.4byte	.LASF3
 10154 0041 03       		.uleb128 0x3
 10155 0042 39110000 		.4byte	.LASF9
 10156 0046 02       		.byte	0x2
 10157 0047 3F       		.byte	0x3f
 10158 0048 4C000000 		.4byte	0x4c
 10159 004c 02       		.uleb128 0x2
 10160 004d 04       		.byte	0x4
 10161 004e 05       		.byte	0x5
 10162 004f E1020000 		.4byte	.LASF4
 10163 0053 02       		.uleb128 0x2
 10164 0054 04       		.byte	0x4
 10165 0055 07       		.byte	0x7
 10166 0056 91070000 		.4byte	.LASF5
 10167 005a 02       		.uleb128 0x2
 10168 005b 08       		.byte	0x8
 10169 005c 05       		.byte	0x5
 10170 005d 64090000 		.4byte	.LASF6
 10171 0061 02       		.uleb128 0x2
 10172 0062 08       		.byte	0x8
 10173 0063 07       		.byte	0x7
 10174 0064 430C0000 		.4byte	.LASF7
 10175 0068 04       		.uleb128 0x4
 10176 0069 04       		.byte	0x4
 10177 006a 05       		.byte	0x5
 10178 006b 696E7400 		.ascii	"int\000"
 10179 006f 02       		.uleb128 0x2
 10180 0070 04       		.byte	0x4
 10181 0071 07       		.byte	0x7
 10182 0072 7A0A0000 		.4byte	.LASF8
 10183 0076 03       		.uleb128 0x3
 10184 0077 BE000000 		.4byte	.LASF10
 10185 007b 03       		.byte	0x3
 10186 007c 2C       		.byte	0x2c
 10187 007d 41000000 		.4byte	0x41
 10188 0081 05       		.uleb128 0x5
 10189 0082 720E0000 		.4byte	.LASF11
 10190 0086 04       		.byte	0x4
 10191 0087 E401     		.2byte	0x1e4
 10192 0089 2C000000 		.4byte	0x2c
 10193 008d 05       		.uleb128 0x5
 10194 008e 96110000 		.4byte	.LASF12
 10195 0092 04       		.byte	0x4
 10196 0093 E501     		.2byte	0x1e5
 10197 0095 3A000000 		.4byte	0x3a
 10198 0099 05       		.uleb128 0x5
 10199 009a E4000000 		.4byte	.LASF13
 10200 009e 04       		.byte	0x4
 10201 009f E601     		.2byte	0x1e6
 10202 00a1 53000000 		.4byte	0x53
 10203 00a5 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 233


 10204 00a6 C8010000 		.4byte	.LASF14
 10205 00aa 04       		.byte	0x4
 10206 00ab E701     		.2byte	0x1e7
 10207 00ad 25000000 		.4byte	0x25
 10208 00b1 05       		.uleb128 0x5
 10209 00b2 3F0F0000 		.4byte	.LASF15
 10210 00b6 04       		.byte	0x4
 10211 00b7 E801     		.2byte	0x1e8
 10212 00b9 33000000 		.4byte	0x33
 10213 00bd 05       		.uleb128 0x5
 10214 00be C6100000 		.4byte	.LASF16
 10215 00c2 04       		.byte	0x4
 10216 00c3 E901     		.2byte	0x1e9
 10217 00c5 4C000000 		.4byte	0x4c
 10218 00c9 05       		.uleb128 0x5
 10219 00ca 9D030000 		.4byte	.LASF17
 10220 00ce 04       		.byte	0x4
 10221 00cf EA01     		.2byte	0x1ea
 10222 00d1 D5000000 		.4byte	0xd5
 10223 00d5 02       		.uleb128 0x2
 10224 00d6 04       		.byte	0x4
 10225 00d7 04       		.byte	0x4
 10226 00d8 4C0A0000 		.4byte	.LASF18
 10227 00dc 02       		.uleb128 0x2
 10228 00dd 08       		.byte	0x8
 10229 00de 04       		.byte	0x4
 10230 00df A7090000 		.4byte	.LASF19
 10231 00e3 02       		.uleb128 0x2
 10232 00e4 01       		.byte	0x1
 10233 00e5 08       		.byte	0x8
 10234 00e6 10050000 		.4byte	.LASF20
 10235 00ea 05       		.uleb128 0x5
 10236 00eb B30A0000 		.4byte	.LASF21
 10237 00ef 04       		.byte	0x4
 10238 00f0 8602     		.2byte	0x286
 10239 00f2 53000000 		.4byte	0x53
 10240 00f6 05       		.uleb128 0x5
 10241 00f7 EE0C0000 		.4byte	.LASF22
 10242 00fb 04       		.byte	0x4
 10243 00fc 8E02     		.2byte	0x28e
 10244 00fe 02010000 		.4byte	0x102
 10245 0102 06       		.uleb128 0x6
 10246 0103 81000000 		.4byte	0x81
 10247 0107 02       		.uleb128 0x2
 10248 0108 08       		.byte	0x8
 10249 0109 04       		.byte	0x4
 10250 010a 520B0000 		.4byte	.LASF23
 10251 010e 02       		.uleb128 0x2
 10252 010f 04       		.byte	0x4
 10253 0110 07       		.byte	0x7
 10254 0111 50000000 		.4byte	.LASF24
 10255 0115 07       		.uleb128 0x7
 10256 0116 E3000000 		.4byte	0xe3
 10257 011a 25010000 		.4byte	0x125
 10258 011e 08       		.uleb128 0x8
 10259 011f 0E010000 		.4byte	0x10e
 10260 0123 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 234


 10261 0124 00       		.byte	0
 10262 0125 09       		.uleb128 0x9
 10263 0126 73110000 		.4byte	.LASF33
 10264 012a 01       		.byte	0x1
 10265 012b 2C000000 		.4byte	0x2c
 10266 012f 05       		.byte	0x5
 10267 0130 8E       		.byte	0x8e
 10268 0131 66010000 		.4byte	0x166
 10269 0135 0A       		.uleb128 0xa
 10270 0136 04070000 		.4byte	.LASF25
 10271 013a 00       		.byte	0
 10272 013b 0A       		.uleb128 0xa
 10273 013c BC0A0000 		.4byte	.LASF26
 10274 0140 01       		.byte	0x1
 10275 0141 0A       		.uleb128 0xa
 10276 0142 53020000 		.4byte	.LASF27
 10277 0146 02       		.byte	0x2
 10278 0147 0A       		.uleb128 0xa
 10279 0148 96010000 		.4byte	.LASF28
 10280 014c 03       		.byte	0x3
 10281 014d 0A       		.uleb128 0xa
 10282 014e 50010000 		.4byte	.LASF29
 10283 0152 04       		.byte	0x4
 10284 0153 0A       		.uleb128 0xa
 10285 0154 86000000 		.4byte	.LASF30
 10286 0158 05       		.byte	0x5
 10287 0159 0A       		.uleb128 0xa
 10288 015a E1070000 		.4byte	.LASF31
 10289 015e 06       		.byte	0x6
 10290 015f 0A       		.uleb128 0xa
 10291 0160 120E0000 		.4byte	.LASF32
 10292 0164 07       		.byte	0x7
 10293 0165 00       		.byte	0
 10294 0166 09       		.uleb128 0x9
 10295 0167 72090000 		.4byte	.LASF34
 10296 016b 01       		.byte	0x1
 10297 016c 2C000000 		.4byte	0x2c
 10298 0170 05       		.byte	0x5
 10299 0171 A2       		.byte	0xa2
 10300 0172 8F010000 		.4byte	0x18f
 10301 0176 0A       		.uleb128 0xa
 10302 0177 2B110000 		.4byte	.LASF35
 10303 017b 00       		.byte	0
 10304 017c 0A       		.uleb128 0xa
 10305 017d 7C080000 		.4byte	.LASF36
 10306 0181 01       		.byte	0x1
 10307 0182 0A       		.uleb128 0xa
 10308 0183 420B0000 		.4byte	.LASF37
 10309 0187 02       		.byte	0x2
 10310 0188 0A       		.uleb128 0xa
 10311 0189 74070000 		.4byte	.LASF38
 10312 018d 03       		.byte	0x3
 10313 018e 00       		.byte	0
 10314 018f 03       		.uleb128 0x3
 10315 0190 F6100000 		.4byte	.LASF39
 10316 0194 06       		.byte	0x6
 10317 0195 7E       		.byte	0x7e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 235


 10318 0196 9A010000 		.4byte	0x19a
 10319 019a 0B       		.uleb128 0xb
 10320 019b F6100000 		.4byte	.LASF39
 10321 019f 0C       		.uleb128 0xc
 10322 01a0 04       		.byte	0x4
 10323 01a1 8F010000 		.4byte	0x18f
 10324 01a5 0D       		.uleb128 0xd
 10325 01a6 2C090000 		.4byte	.LASF42
 10326 01aa 10       		.byte	0x10
 10327 01ab 07       		.byte	0x7
 10328 01ac E4       		.byte	0xe4
 10329 01ad E2010000 		.4byte	0x1e2
 10330 01b1 0E       		.uleb128 0xe
 10331 01b2 706F7300 		.ascii	"pos\000"
 10332 01b6 07       		.byte	0x7
 10333 01b7 E5       		.byte	0xe5
 10334 01b8 BD000000 		.4byte	0xbd
 10335 01bc 00       		.byte	0
 10336 01bd 0F       		.uleb128 0xf
 10337 01be 61080000 		.4byte	.LASF40
 10338 01c2 07       		.byte	0x7
 10339 01c3 E6       		.byte	0xe6
 10340 01c4 BD000000 		.4byte	0xbd
 10341 01c8 04       		.byte	0x4
 10342 01c9 0E       		.uleb128 0xe
 10343 01ca 70776D00 		.ascii	"pwm\000"
 10344 01ce 07       		.byte	0x7
 10345 01cf E7       		.byte	0xe7
 10346 01d0 BD000000 		.4byte	0xbd
 10347 01d4 08       		.byte	0x8
 10348 01d5 0F       		.uleb128 0xf
 10349 01d6 850C0000 		.4byte	.LASF41
 10350 01da 07       		.byte	0x7
 10351 01db E8       		.byte	0xe8
 10352 01dc 81000000 		.4byte	0x81
 10353 01e0 0C       		.byte	0xc
 10354 01e1 00       		.byte	0
 10355 01e2 0D       		.uleb128 0xd
 10356 01e3 D90D0000 		.4byte	.LASF43
 10357 01e7 34       		.byte	0x34
 10358 01e8 07       		.byte	0x7
 10359 01e9 EF       		.byte	0xef
 10360 01ea 43020000 		.4byte	0x243
 10361 01ee 0E       		.uleb128 0xe
 10362 01ef 706F7300 		.ascii	"pos\000"
 10363 01f3 07       		.byte	0x7
 10364 01f4 F0       		.byte	0xf0
 10365 01f5 43020000 		.4byte	0x243
 10366 01f9 00       		.byte	0
 10367 01fa 0F       		.uleb128 0xf
 10368 01fb 61080000 		.4byte	.LASF40
 10369 01ff 07       		.byte	0x7
 10370 0200 F1       		.byte	0xf1
 10371 0201 BD000000 		.4byte	0xbd
 10372 0205 0C       		.byte	0xc
 10373 0206 0F       		.uleb128 0xf
 10374 0207 760F0000 		.4byte	.LASF44
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 236


 10375 020b 07       		.byte	0x7
 10376 020c F2       		.byte	0xf2
 10377 020d BD000000 		.4byte	0xbd
 10378 0211 10       		.byte	0x10
 10379 0212 0F       		.uleb128 0xf
 10380 0213 D7070000 		.4byte	.LASF45
 10381 0217 07       		.byte	0x7
 10382 0218 F3       		.byte	0xf3
 10383 0219 BD000000 		.4byte	0xbd
 10384 021d 14       		.byte	0x14
 10385 021e 0E       		.uleb128 0xe
 10386 021f 726F7400 		.ascii	"rot\000"
 10387 0223 07       		.byte	0x7
 10388 0224 F4       		.byte	0xf4
 10389 0225 53020000 		.4byte	0x253
 10390 0229 18       		.byte	0x18
 10391 022a 0E       		.uleb128 0xe
 10392 022b 76656C00 		.ascii	"vel\000"
 10393 022f 07       		.byte	0x7
 10394 0230 F5       		.byte	0xf5
 10395 0231 43020000 		.4byte	0x243
 10396 0235 1C       		.byte	0x1c
 10397 0236 0E       		.uleb128 0xe
 10398 0237 61636300 		.ascii	"acc\000"
 10399 023b 07       		.byte	0x7
 10400 023c F6       		.byte	0xf6
 10401 023d 43020000 		.4byte	0x243
 10402 0241 28       		.byte	0x28
 10403 0242 00       		.byte	0
 10404 0243 07       		.uleb128 0x7
 10405 0244 BD000000 		.4byte	0xbd
 10406 0248 53020000 		.4byte	0x253
 10407 024c 08       		.uleb128 0x8
 10408 024d 0E010000 		.4byte	0x10e
 10409 0251 02       		.byte	0x2
 10410 0252 00       		.byte	0
 10411 0253 07       		.uleb128 0x7
 10412 0254 A5000000 		.4byte	0xa5
 10413 0258 63020000 		.4byte	0x263
 10414 025c 08       		.uleb128 0x8
 10415 025d 0E010000 		.4byte	0x10e
 10416 0261 02       		.byte	0x2
 10417 0262 00       		.byte	0
 10418 0263 0D       		.uleb128 0xd
 10419 0264 610A0000 		.4byte	.LASF46
 10420 0268 28       		.byte	0x28
 10421 0269 07       		.byte	0x7
 10422 026a F9       		.byte	0xf9
 10423 026b 94020000 		.4byte	0x294
 10424 026f 0E       		.uleb128 0xe
 10425 0270 656D6700 		.ascii	"emg\000"
 10426 0274 07       		.byte	0x7
 10427 0275 FA       		.byte	0xfa
 10428 0276 94020000 		.4byte	0x294
 10429 027a 00       		.byte	0
 10430 027b 0F       		.uleb128 0xf
 10431 027c 060B0000 		.4byte	.LASF47
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 237


 10432 0280 07       		.byte	0x7
 10433 0281 FB       		.byte	0xfb
 10434 0282 A4020000 		.4byte	0x2a4
 10435 0286 08       		.byte	0x8
 10436 0287 0F       		.uleb128 0xf
 10437 0288 B70E0000 		.4byte	.LASF48
 10438 028c 07       		.byte	0x7
 10439 028d FC       		.byte	0xfc
 10440 028e 94020000 		.4byte	0x294
 10441 0292 20       		.byte	0x20
 10442 0293 00       		.byte	0
 10443 0294 07       		.uleb128 0x7
 10444 0295 BD000000 		.4byte	0xbd
 10445 0299 A4020000 		.4byte	0x2a4
 10446 029d 08       		.uleb128 0x8
 10447 029e 0E010000 		.4byte	0x10e
 10448 02a2 01       		.byte	0x1
 10449 02a3 00       		.byte	0
 10450 02a4 07       		.uleb128 0x7
 10451 02a5 BD000000 		.4byte	0xbd
 10452 02a9 B4020000 		.4byte	0x2b4
 10453 02ad 08       		.uleb128 0x8
 10454 02ae 0E010000 		.4byte	0x10e
 10455 02b2 05       		.byte	0x5
 10456 02b3 00       		.byte	0
 10457 02b4 10       		.uleb128 0x10
 10458 02b5 DC000000 		.4byte	.LASF49
 10459 02b9 86       		.byte	0x86
 10460 02ba 07       		.byte	0x7
 10461 02bb 0701     		.2byte	0x107
 10462 02bd F6020000 		.4byte	0x2f6
 10463 02c1 11       		.uleb128 0x11
 10464 02c2 1C060000 		.4byte	.LASF50
 10465 02c6 07       		.byte	0x7
 10466 02c7 0801     		.2byte	0x108
 10467 02c9 F6020000 		.4byte	0x2f6
 10468 02cd 00       		.byte	0
 10469 02ce 11       		.uleb128 0x11
 10470 02cf 680C0000 		.4byte	.LASF51
 10471 02d3 07       		.byte	0x7
 10472 02d4 0901     		.2byte	0x109
 10473 02d6 B1000000 		.4byte	0xb1
 10474 02da 80       		.byte	0x80
 10475 02db 12       		.uleb128 0x12
 10476 02dc 696E6400 		.ascii	"ind\000"
 10477 02e0 07       		.byte	0x7
 10478 02e1 0A01     		.2byte	0x10a
 10479 02e3 B1000000 		.4byte	0xb1
 10480 02e7 82       		.byte	0x82
 10481 02e8 11       		.uleb128 0x11
 10482 02e9 26020000 		.4byte	.LASF52
 10483 02ed 07       		.byte	0x7
 10484 02ee 0B01     		.2byte	0x10b
 10485 02f0 81000000 		.4byte	0x81
 10486 02f4 84       		.byte	0x84
 10487 02f5 00       		.byte	0
 10488 02f6 07       		.uleb128 0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 238


 10489 02f7 81000000 		.4byte	0x81
 10490 02fb 06030000 		.4byte	0x306
 10491 02ff 08       		.uleb128 0x8
 10492 0300 0E010000 		.4byte	0x10e
 10493 0304 7F       		.byte	0x7f
 10494 0305 00       		.byte	0
 10495 0306 10       		.uleb128 0x10
 10496 0307 8A030000 		.4byte	.LASF53
 10497 030b 50       		.byte	0x50
 10498 030c 07       		.byte	0x7
 10499 030d 1401     		.2byte	0x114
 10500 030f 6F030000 		.4byte	0x36f
 10501 0313 11       		.uleb128 0x11
 10502 0314 BF030000 		.4byte	.LASF54
 10503 0318 07       		.byte	0x7
 10504 0319 1501     		.2byte	0x115
 10505 031b 6F030000 		.4byte	0x36f
 10506 031f 00       		.byte	0
 10507 0320 11       		.uleb128 0x11
 10508 0321 E3010000 		.4byte	.LASF55
 10509 0325 07       		.byte	0x7
 10510 0326 1601     		.2byte	0x116
 10511 0328 7F030000 		.4byte	0x37f
 10512 032c 08       		.byte	0x8
 10513 032d 11       		.uleb128 0x11
 10514 032e 350B0000 		.4byte	.LASF56
 10515 0332 07       		.byte	0x7
 10516 0333 1701     		.2byte	0x117
 10517 0335 8F030000 		.4byte	0x38f
 10518 0339 30       		.byte	0x30
 10519 033a 11       		.uleb128 0x11
 10520 033b 7A010000 		.4byte	.LASF57
 10521 033f 07       		.byte	0x7
 10522 0340 1801     		.2byte	0x118
 10523 0342 99000000 		.4byte	0x99
 10524 0346 40       		.byte	0x40
 10525 0347 11       		.uleb128 0x11
 10526 0348 43110000 		.4byte	.LASF58
 10527 034c 07       		.byte	0x7
 10528 034d 1901     		.2byte	0x119
 10529 034f 99000000 		.4byte	0x99
 10530 0353 44       		.byte	0x44
 10531 0354 11       		.uleb128 0x11
 10532 0355 AD070000 		.4byte	.LASF59
 10533 0359 07       		.byte	0x7
 10534 035a 1A01     		.2byte	0x11a
 10535 035c 99000000 		.4byte	0x99
 10536 0360 48       		.byte	0x48
 10537 0361 11       		.uleb128 0x11
 10538 0362 F5070000 		.4byte	.LASF60
 10539 0366 07       		.byte	0x7
 10540 0367 1B01     		.2byte	0x11b
 10541 0369 99000000 		.4byte	0x99
 10542 036d 4C       		.byte	0x4c
 10543 036e 00       		.byte	0
 10544 036f 07       		.uleb128 0x7
 10545 0370 99000000 		.4byte	0x99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 239


 10546 0374 7F030000 		.4byte	0x37f
 10547 0378 08       		.uleb128 0x8
 10548 0379 0E010000 		.4byte	0x10e
 10549 037d 01       		.byte	0x1
 10550 037e 00       		.byte	0
 10551 037f 07       		.uleb128 0x7
 10552 0380 99000000 		.4byte	0x99
 10553 0384 8F030000 		.4byte	0x38f
 10554 0388 08       		.uleb128 0x8
 10555 0389 0E010000 		.4byte	0x10e
 10556 038d 09       		.byte	0x9
 10557 038e 00       		.byte	0
 10558 038f 07       		.uleb128 0x7
 10559 0390 99000000 		.4byte	0x99
 10560 0394 9F030000 		.4byte	0x39f
 10561 0398 08       		.uleb128 0x8
 10562 0399 0E010000 		.4byte	0x10e
 10563 039d 03       		.byte	0x3
 10564 039e 00       		.byte	0
 10565 039f 10       		.uleb128 0x10
 10566 03a0 49020000 		.4byte	.LASF61
 10567 03a4 10       		.byte	0x10
 10568 03a5 07       		.byte	0x7
 10569 03a6 2201     		.2byte	0x122
 10570 03a8 2E040000 		.4byte	0x42e
 10571 03ac 12       		.uleb128 0x12
 10572 03ad 696400   		.ascii	"id\000"
 10573 03b0 07       		.byte	0x7
 10574 03b1 2301     		.2byte	0x123
 10575 03b3 81000000 		.4byte	0x81
 10576 03b7 00       		.byte	0
 10577 03b8 11       		.uleb128 0x11
 10578 03b9 D20E0000 		.4byte	.LASF62
 10579 03bd 07       		.byte	0x7
 10580 03be 2401     		.2byte	0x124
 10581 03c0 2E040000 		.4byte	0x42e
 10582 03c4 01       		.byte	0x1
 10583 03c5 11       		.uleb128 0x11
 10584 03c6 0E0F0000 		.4byte	.LASF63
 10585 03ca 07       		.byte	0x7
 10586 03cb 2501     		.2byte	0x125
 10587 03cd 2E040000 		.4byte	0x42e
 10588 03d1 04       		.byte	0x4
 10589 03d2 11       		.uleb128 0x11
 10590 03d3 D8040000 		.4byte	.LASF64
 10591 03d7 07       		.byte	0x7
 10592 03d8 2601     		.2byte	0x126
 10593 03da 81000000 		.4byte	0x81
 10594 03de 07       		.byte	0x7
 10595 03df 11       		.uleb128 0x11
 10596 03e0 13030000 		.4byte	.LASF65
 10597 03e4 07       		.byte	0x7
 10598 03e5 2701     		.2byte	0x127
 10599 03e7 81000000 		.4byte	0x81
 10600 03eb 08       		.byte	0x8
 10601 03ec 11       		.uleb128 0x11
 10602 03ed 6F020000 		.4byte	.LASF66
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 240


 10603 03f1 07       		.byte	0x7
 10604 03f2 2801     		.2byte	0x128
 10605 03f4 81000000 		.4byte	0x81
 10606 03f8 09       		.byte	0x9
 10607 03f9 11       		.uleb128 0x11
 10608 03fa 1B100000 		.4byte	.LASF67
 10609 03fe 07       		.byte	0x7
 10610 03ff 2901     		.2byte	0x129
 10611 0401 81000000 		.4byte	0x81
 10612 0405 0A       		.byte	0xa
 10613 0406 11       		.uleb128 0x11
 10614 0407 AF0F0000 		.4byte	.LASF68
 10615 040b 07       		.byte	0x7
 10616 040c 2A01     		.2byte	0x12a
 10617 040e 81000000 		.4byte	0x81
 10618 0412 0B       		.byte	0xb
 10619 0413 11       		.uleb128 0x11
 10620 0414 880D0000 		.4byte	.LASF69
 10621 0418 07       		.byte	0x7
 10622 0419 2B01     		.2byte	0x12b
 10623 041b 81000000 		.4byte	0x81
 10624 041f 0C       		.byte	0xc
 10625 0420 11       		.uleb128 0x11
 10626 0421 57030000 		.4byte	.LASF70
 10627 0425 07       		.byte	0x7
 10628 0426 2C01     		.2byte	0x12c
 10629 0428 2E040000 		.4byte	0x42e
 10630 042c 0D       		.byte	0xd
 10631 042d 00       		.byte	0
 10632 042e 07       		.uleb128 0x7
 10633 042f 81000000 		.4byte	0x81
 10634 0433 3E040000 		.4byte	0x43e
 10635 0437 08       		.uleb128 0x8
 10636 0438 0E010000 		.4byte	0x10e
 10637 043c 02       		.byte	0x2
 10638 043d 00       		.byte	0
 10639 043e 10       		.uleb128 0x10
 10640 043f E1100000 		.4byte	.LASF71
 10641 0443 70       		.byte	0x70
 10642 0444 07       		.byte	0x7
 10643 0445 3301     		.2byte	0x133
 10644 0447 B8050000 		.4byte	0x5b8
 10645 044b 12       		.uleb128 0x12
 10646 044c 6B5F7000 		.ascii	"k_p\000"
 10647 0450 07       		.byte	0x7
 10648 0451 3401     		.2byte	0x134
 10649 0453 BD000000 		.4byte	0xbd
 10650 0457 00       		.byte	0
 10651 0458 12       		.uleb128 0x12
 10652 0459 6B5F6900 		.ascii	"k_i\000"
 10653 045d 07       		.byte	0x7
 10654 045e 3501     		.2byte	0x135
 10655 0460 BD000000 		.4byte	0xbd
 10656 0464 04       		.byte	0x4
 10657 0465 12       		.uleb128 0x12
 10658 0466 6B5F6400 		.ascii	"k_d\000"
 10659 046a 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 241


 10660 046b 3601     		.2byte	0x136
 10661 046d BD000000 		.4byte	0xbd
 10662 0471 08       		.byte	0x8
 10663 0472 11       		.uleb128 0x11
 10664 0473 C10C0000 		.4byte	.LASF72
 10665 0477 07       		.byte	0x7
 10666 0478 3701     		.2byte	0x137
 10667 047a BD000000 		.4byte	0xbd
 10668 047e 0C       		.byte	0xc
 10669 047f 11       		.uleb128 0x11
 10670 0480 79050000 		.4byte	.LASF73
 10671 0484 07       		.byte	0x7
 10672 0485 3801     		.2byte	0x138
 10673 0487 BD000000 		.4byte	0xbd
 10674 048b 10       		.byte	0x10
 10675 048c 11       		.uleb128 0x11
 10676 048d 61050000 		.4byte	.LASF74
 10677 0491 07       		.byte	0x7
 10678 0492 3901     		.2byte	0x139
 10679 0494 BD000000 		.4byte	0xbd
 10680 0498 14       		.byte	0x14
 10681 0499 11       		.uleb128 0x11
 10682 049a 6F0F0000 		.4byte	.LASF75
 10683 049e 07       		.byte	0x7
 10684 049f 3A01     		.2byte	0x13a
 10685 04a1 BD000000 		.4byte	0xbd
 10686 04a5 18       		.byte	0x18
 10687 04a6 11       		.uleb128 0x11
 10688 04a7 15060000 		.4byte	.LASF76
 10689 04ab 07       		.byte	0x7
 10690 04ac 3B01     		.2byte	0x13b
 10691 04ae BD000000 		.4byte	0xbd
 10692 04b2 1C       		.byte	0x1c
 10693 04b3 11       		.uleb128 0x11
 10694 04b4 A20E0000 		.4byte	.LASF77
 10695 04b8 07       		.byte	0x7
 10696 04b9 3C01     		.2byte	0x13c
 10697 04bb BD000000 		.4byte	0xbd
 10698 04bf 20       		.byte	0x20
 10699 04c0 11       		.uleb128 0x11
 10700 04c1 23060000 		.4byte	.LASF78
 10701 04c5 07       		.byte	0x7
 10702 04c6 3D01     		.2byte	0x13d
 10703 04c8 BD000000 		.4byte	0xbd
 10704 04cc 24       		.byte	0x24
 10705 04cd 11       		.uleb128 0x11
 10706 04ce 5D070000 		.4byte	.LASF79
 10707 04d2 07       		.byte	0x7
 10708 04d3 3E01     		.2byte	0x13e
 10709 04d5 BD000000 		.4byte	0xbd
 10710 04d9 28       		.byte	0x28
 10711 04da 11       		.uleb128 0x11
 10712 04db BB110000 		.4byte	.LASF80
 10713 04df 07       		.byte	0x7
 10714 04e0 3F01     		.2byte	0x13f
 10715 04e2 BD000000 		.4byte	0xbd
 10716 04e6 2C       		.byte	0x2c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 242


 10717 04e7 11       		.uleb128 0x11
 10718 04e8 05080000 		.4byte	.LASF81
 10719 04ec 07       		.byte	0x7
 10720 04ed 4001     		.2byte	0x140
 10721 04ef 81000000 		.4byte	0x81
 10722 04f3 30       		.byte	0x30
 10723 04f4 11       		.uleb128 0x11
 10724 04f5 580F0000 		.4byte	.LASF82
 10725 04f9 07       		.byte	0x7
 10726 04fa 4101     		.2byte	0x141
 10727 04fc 81000000 		.4byte	0x81
 10728 0500 31       		.byte	0x31
 10729 0501 11       		.uleb128 0x11
 10730 0502 D30C0000 		.4byte	.LASF83
 10731 0506 07       		.byte	0x7
 10732 0507 4201     		.2byte	0x142
 10733 0509 81000000 		.4byte	0x81
 10734 050d 32       		.byte	0x32
 10735 050e 11       		.uleb128 0x11
 10736 050f FE100000 		.4byte	.LASF84
 10737 0513 07       		.byte	0x7
 10738 0514 4301     		.2byte	0x143
 10739 0516 81000000 		.4byte	0x81
 10740 051a 33       		.byte	0x33
 10741 051b 11       		.uleb128 0x11
 10742 051c FB000000 		.4byte	.LASF85
 10743 0520 07       		.byte	0x7
 10744 0521 4401     		.2byte	0x144
 10745 0523 BD000000 		.4byte	0xbd
 10746 0527 34       		.byte	0x34
 10747 0528 11       		.uleb128 0x11
 10748 0529 A9050000 		.4byte	.LASF86
 10749 052d 07       		.byte	0x7
 10750 052e 4501     		.2byte	0x145
 10751 0530 BD000000 		.4byte	0xbd
 10752 0534 38       		.byte	0x38
 10753 0535 11       		.uleb128 0x11
 10754 0536 1D0A0000 		.4byte	.LASF87
 10755 053a 07       		.byte	0x7
 10756 053b 4601     		.2byte	0x146
 10757 053d BD000000 		.4byte	0xbd
 10758 0541 3C       		.byte	0x3c
 10759 0542 11       		.uleb128 0x11
 10760 0543 15050000 		.4byte	.LASF88
 10761 0547 07       		.byte	0x7
 10762 0548 4701     		.2byte	0x147
 10763 054a BD000000 		.4byte	0xbd
 10764 054e 40       		.byte	0x40
 10765 054f 11       		.uleb128 0x11
 10766 0550 64010000 		.4byte	.LASF89
 10767 0554 07       		.byte	0x7
 10768 0555 4801     		.2byte	0x148
 10769 0557 B8050000 		.4byte	0x5b8
 10770 055b 44       		.byte	0x44
 10771 055c 11       		.uleb128 0x11
 10772 055d 65110000 		.4byte	.LASF90
 10773 0561 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 243


 10774 0562 4901     		.2byte	0x149
 10775 0564 B1000000 		.4byte	0xb1
 10776 0568 5C       		.byte	0x5c
 10777 0569 11       		.uleb128 0x11
 10778 056a 71080000 		.4byte	.LASF91
 10779 056e 07       		.byte	0x7
 10780 056f 4A01     		.2byte	0x14a
 10781 0571 81000000 		.4byte	0x81
 10782 0575 5E       		.byte	0x5e
 10783 0576 11       		.uleb128 0x11
 10784 0577 A60A0000 		.4byte	.LASF92
 10785 057b 07       		.byte	0x7
 10786 057c 4B01     		.2byte	0x14b
 10787 057e 81000000 		.4byte	0x81
 10788 0582 5F       		.byte	0x5f
 10789 0583 11       		.uleb128 0x11
 10790 0584 E3040000 		.4byte	.LASF93
 10791 0588 07       		.byte	0x7
 10792 0589 4C01     		.2byte	0x14c
 10793 058b 81000000 		.4byte	0x81
 10794 058f 60       		.byte	0x60
 10795 0590 11       		.uleb128 0x11
 10796 0591 50050000 		.4byte	.LASF94
 10797 0595 07       		.byte	0x7
 10798 0596 4D01     		.2byte	0x14d
 10799 0598 81000000 		.4byte	0x81
 10800 059c 61       		.byte	0x61
 10801 059d 11       		.uleb128 0x11
 10802 059e 8C040000 		.4byte	.LASF95
 10803 05a2 07       		.byte	0x7
 10804 05a3 4E01     		.2byte	0x14e
 10805 05a5 81000000 		.4byte	0x81
 10806 05a9 62       		.byte	0x62
 10807 05aa 11       		.uleb128 0x11
 10808 05ab 57030000 		.4byte	.LASF70
 10809 05af 07       		.byte	0x7
 10810 05b0 4F01     		.2byte	0x14f
 10811 05b2 C8050000 		.4byte	0x5c8
 10812 05b6 63       		.byte	0x63
 10813 05b7 00       		.byte	0
 10814 05b8 07       		.uleb128 0x7
 10815 05b9 D5000000 		.4byte	0xd5
 10816 05bd C8050000 		.4byte	0x5c8
 10817 05c1 08       		.uleb128 0x8
 10818 05c2 0E010000 		.4byte	0x10e
 10819 05c6 05       		.byte	0x5
 10820 05c7 00       		.byte	0
 10821 05c8 07       		.uleb128 0x7
 10822 05c9 81000000 		.4byte	0x81
 10823 05cd D8050000 		.4byte	0x5d8
 10824 05d1 08       		.uleb128 0x8
 10825 05d2 0E010000 		.4byte	0x10e
 10826 05d6 0C       		.byte	0xc
 10827 05d7 00       		.byte	0
 10828 05d8 10       		.uleb128 0x10
 10829 05d9 5A100000 		.4byte	.LASF96
 10830 05dd 30       		.byte	0x30
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 244


 10831 05de 07       		.byte	0x7
 10832 05df 5601     		.2byte	0x156
 10833 05e1 5B060000 		.4byte	0x65b
 10834 05e5 11       		.uleb128 0x11
 10835 05e6 D7090000 		.4byte	.LASF97
 10836 05ea 07       		.byte	0x7
 10837 05eb 5701     		.2byte	0x157
 10838 05ed 5B060000 		.4byte	0x65b
 10839 05f1 00       		.byte	0
 10840 05f2 12       		.uleb128 0x12
 10841 05f3 72657300 		.ascii	"res\000"
 10842 05f7 07       		.byte	0x7
 10843 05f8 5801     		.2byte	0x158
 10844 05fa 2E040000 		.4byte	0x42e
 10845 05fe 05       		.byte	0x5
 10846 05ff 11       		.uleb128 0x11
 10847 0600 31080000 		.4byte	.LASF98
 10848 0604 07       		.byte	0x7
 10849 0605 5901     		.2byte	0x159
 10850 0607 43020000 		.4byte	0x243
 10851 060b 08       		.byte	0x8
 10852 060c 11       		.uleb128 0x11
 10853 060d 72050000 		.4byte	.LASF99
 10854 0611 07       		.byte	0x7
 10855 0612 5A01     		.2byte	0x15a
 10856 0614 6B060000 		.4byte	0x66b
 10857 0618 14       		.byte	0x14
 10858 0619 11       		.uleb128 0x11
 10859 061a DA0B0000 		.4byte	.LASF100
 10860 061e 07       		.byte	0x7
 10861 061f 5B01     		.2byte	0x15b
 10862 0621 81000000 		.4byte	0x81
 10863 0625 20       		.byte	0x20
 10864 0626 11       		.uleb128 0x11
 10865 0627 2C020000 		.4byte	.LASF101
 10866 062b 07       		.byte	0x7
 10867 062c 5C01     		.2byte	0x15c
 10868 062e 2E040000 		.4byte	0x42e
 10869 0632 21       		.byte	0x21
 10870 0633 11       		.uleb128 0x11
 10871 0634 8B0B0000 		.4byte	.LASF102
 10872 0638 07       		.byte	0x7
 10873 0639 5D01     		.2byte	0x15d
 10874 063b A5000000 		.4byte	0xa5
 10875 063f 24       		.byte	0x24
 10876 0640 11       		.uleb128 0x11
 10877 0641 AA0D0000 		.4byte	.LASF103
 10878 0645 07       		.byte	0x7
 10879 0646 5E01     		.2byte	0x15e
 10880 0648 53020000 		.4byte	0x253
 10881 064c 25       		.byte	0x25
 10882 064d 11       		.uleb128 0x11
 10883 064e 57030000 		.4byte	.LASF70
 10884 0652 07       		.byte	0x7
 10885 0653 5F01     		.2byte	0x15f
 10886 0655 7B060000 		.4byte	0x67b
 10887 0659 28       		.byte	0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 245


 10888 065a 00       		.byte	0
 10889 065b 07       		.uleb128 0x7
 10890 065c 81000000 		.4byte	0x81
 10891 0660 6B060000 		.4byte	0x66b
 10892 0664 08       		.uleb128 0x8
 10893 0665 0E010000 		.4byte	0x10e
 10894 0669 04       		.byte	0x4
 10895 066a 00       		.byte	0
 10896 066b 07       		.uleb128 0x7
 10897 066c C9000000 		.4byte	0xc9
 10898 0670 7B060000 		.4byte	0x67b
 10899 0674 08       		.uleb128 0x8
 10900 0675 0E010000 		.4byte	0x10e
 10901 0679 02       		.byte	0x2
 10902 067a 00       		.byte	0
 10903 067b 07       		.uleb128 0x7
 10904 067c 81000000 		.4byte	0x81
 10905 0680 8B060000 		.4byte	0x68b
 10906 0684 08       		.uleb128 0x8
 10907 0685 0E010000 		.4byte	0x10e
 10908 0689 07       		.byte	0x7
 10909 068a 00       		.byte	0
 10910 068b 10       		.uleb128 0x10
 10911 068c DC010000 		.4byte	.LASF104
 10912 0690 10       		.byte	0x10
 10913 0691 07       		.byte	0x7
 10914 0692 6601     		.2byte	0x166
 10915 0694 DA060000 		.4byte	0x6da
 10916 0698 11       		.uleb128 0x11
 10917 0699 140B0000 		.4byte	.LASF105
 10918 069d 07       		.byte	0x7
 10919 069e 6701     		.2byte	0x167
 10920 06a0 DA060000 		.4byte	0x6da
 10921 06a4 00       		.byte	0
 10922 06a5 11       		.uleb128 0x11
 10923 06a6 57110000 		.4byte	.LASF106
 10924 06aa 07       		.byte	0x7
 10925 06ab 6801     		.2byte	0x168
 10926 06ad 6F030000 		.4byte	0x36f
 10927 06b1 04       		.byte	0x4
 10928 06b2 11       		.uleb128 0x11
 10929 06b3 BF050000 		.4byte	.LASF107
 10930 06b7 07       		.byte	0x7
 10931 06b8 6901     		.2byte	0x169
 10932 06ba EA060000 		.4byte	0x6ea
 10933 06be 0C       		.byte	0xc
 10934 06bf 11       		.uleb128 0x11
 10935 06c0 C40D0000 		.4byte	.LASF108
 10936 06c4 07       		.byte	0x7
 10937 06c5 6A01     		.2byte	0x16a
 10938 06c7 81000000 		.4byte	0x81
 10939 06cb 0E       		.byte	0xe
 10940 06cc 11       		.uleb128 0x11
 10941 06cd 3B040000 		.4byte	.LASF109
 10942 06d1 07       		.byte	0x7
 10943 06d2 6B01     		.2byte	0x16b
 10944 06d4 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 246


 10945 06d8 0F       		.byte	0xf
 10946 06d9 00       		.byte	0
 10947 06da 07       		.uleb128 0x7
 10948 06db 8D000000 		.4byte	0x8d
 10949 06df EA060000 		.4byte	0x6ea
 10950 06e3 08       		.uleb128 0x8
 10951 06e4 0E010000 		.4byte	0x10e
 10952 06e8 01       		.byte	0x1
 10953 06e9 00       		.byte	0
 10954 06ea 07       		.uleb128 0x7
 10955 06eb 81000000 		.4byte	0x81
 10956 06ef FA060000 		.4byte	0x6fa
 10957 06f3 08       		.uleb128 0x8
 10958 06f4 0E010000 		.4byte	0x10e
 10959 06f8 01       		.byte	0x1
 10960 06f9 00       		.byte	0
 10961 06fa 10       		.uleb128 0x10
 10962 06fb D00A0000 		.4byte	.LASF110
 10963 06ff 20       		.byte	0x20
 10964 0700 07       		.byte	0x7
 10965 0701 7201     		.2byte	0x172
 10966 0703 3C070000 		.4byte	0x73c
 10967 0707 11       		.uleb128 0x11
 10968 0708 9A020000 		.4byte	.LASF111
 10969 070c 07       		.byte	0x7
 10970 070d 7301     		.2byte	0x173
 10971 070f 81000000 		.4byte	0x81
 10972 0713 00       		.byte	0
 10973 0714 11       		.uleb128 0x11
 10974 0715 38100000 		.4byte	.LASF112
 10975 0719 07       		.byte	0x7
 10976 071a 7401     		.2byte	0x174
 10977 071c 81000000 		.4byte	0x81
 10978 0720 01       		.byte	0x1
 10979 0721 11       		.uleb128 0x11
 10980 0722 520A0000 		.4byte	.LASF113
 10981 0726 07       		.byte	0x7
 10982 0727 7501     		.2byte	0x175
 10983 0729 3C070000 		.4byte	0x73c
 10984 072d 02       		.byte	0x2
 10985 072e 11       		.uleb128 0x11
 10986 072f 57030000 		.4byte	.LASF70
 10987 0733 07       		.byte	0x7
 10988 0734 7601     		.2byte	0x176
 10989 0736 5B060000 		.4byte	0x65b
 10990 073a 1B       		.byte	0x1b
 10991 073b 00       		.byte	0
 10992 073c 07       		.uleb128 0x7
 10993 073d 81000000 		.4byte	0x81
 10994 0741 52070000 		.4byte	0x752
 10995 0745 08       		.uleb128 0x8
 10996 0746 0E010000 		.4byte	0x10e
 10997 074a 04       		.byte	0x4
 10998 074b 08       		.uleb128 0x8
 10999 074c 0E010000 		.4byte	0x10e
 11000 0750 04       		.byte	0x4
 11001 0751 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 247


 11002 0752 10       		.uleb128 0x10
 11003 0753 B70D0000 		.4byte	.LASF114
 11004 0757 20       		.byte	0x20
 11005 0758 07       		.byte	0x7
 11006 0759 7D01     		.2byte	0x17d
 11007 075b AE070000 		.4byte	0x7ae
 11008 075f 11       		.uleb128 0x11
 11009 0760 D00B0000 		.4byte	.LASF115
 11010 0764 07       		.byte	0x7
 11011 0765 7E01     		.2byte	0x17e
 11012 0767 AE070000 		.4byte	0x7ae
 11013 076b 00       		.byte	0
 11014 076c 11       		.uleb128 0x11
 11015 076d 450F0000 		.4byte	.LASF116
 11016 0771 07       		.byte	0x7
 11017 0772 7F01     		.2byte	0x17f
 11018 0774 81000000 		.4byte	0x81
 11019 0778 06       		.byte	0x6
 11020 0779 11       		.uleb128 0x11
 11021 077a 9E000000 		.4byte	.LASF117
 11022 077e 07       		.byte	0x7
 11023 077f 8001     		.2byte	0x180
 11024 0781 81000000 		.4byte	0x81
 11025 0785 07       		.byte	0x7
 11026 0786 11       		.uleb128 0x11
 11027 0787 FE050000 		.4byte	.LASF118
 11028 078b 07       		.byte	0x7
 11029 078c 8101     		.2byte	0x181
 11030 078e BE070000 		.4byte	0x7be
 11031 0792 08       		.byte	0x8
 11032 0793 11       		.uleb128 0x11
 11033 0794 A8020000 		.4byte	.LASF119
 11034 0798 07       		.byte	0x7
 11035 0799 8201     		.2byte	0x182
 11036 079b 81000000 		.4byte	0x81
 11037 079f 14       		.byte	0x14
 11038 07a0 11       		.uleb128 0x11
 11039 07a1 57030000 		.4byte	.LASF70
 11040 07a5 07       		.byte	0x7
 11041 07a6 8301     		.2byte	0x183
 11042 07a8 CE070000 		.4byte	0x7ce
 11043 07ac 15       		.byte	0x15
 11044 07ad 00       		.byte	0
 11045 07ae 07       		.uleb128 0x7
 11046 07af 81000000 		.4byte	0x81
 11047 07b3 BE070000 		.4byte	0x7be
 11048 07b7 08       		.uleb128 0x8
 11049 07b8 0E010000 		.4byte	0x10e
 11050 07bc 05       		.byte	0x5
 11051 07bd 00       		.byte	0
 11052 07be 07       		.uleb128 0x7
 11053 07bf 81000000 		.4byte	0x81
 11054 07c3 CE070000 		.4byte	0x7ce
 11055 07c7 08       		.uleb128 0x8
 11056 07c8 0E010000 		.4byte	0x10e
 11057 07cc 0B       		.byte	0xb
 11058 07cd 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 248


 11059 07ce 07       		.uleb128 0x7
 11060 07cf 81000000 		.4byte	0x81
 11061 07d3 DE070000 		.4byte	0x7de
 11062 07d7 08       		.uleb128 0x8
 11063 07d8 0E010000 		.4byte	0x10e
 11064 07dc 0A       		.byte	0xa
 11065 07dd 00       		.byte	0
 11066 07de 10       		.uleb128 0x10
 11067 07df A20D0000 		.4byte	.LASF120
 11068 07e3 20       		.byte	0x20
 11069 07e4 07       		.byte	0x7
 11070 07e5 8A01     		.2byte	0x18a
 11071 07e7 13080000 		.4byte	0x813
 11072 07eb 11       		.uleb128 0x11
 11073 07ec 0D040000 		.4byte	.LASF121
 11074 07f0 07       		.byte	0x7
 11075 07f1 8B01     		.2byte	0x18b
 11076 07f3 15010000 		.4byte	0x115
 11077 07f7 00       		.byte	0
 11078 07f8 11       		.uleb128 0x11
 11079 07f9 30030000 		.4byte	.LASF122
 11080 07fd 07       		.byte	0x7
 11081 07fe 8C01     		.2byte	0x18c
 11082 0800 8B060000 		.4byte	0x68b
 11083 0804 08       		.byte	0x8
 11084 0805 11       		.uleb128 0x11
 11085 0806 57030000 		.4byte	.LASF70
 11086 080a 07       		.byte	0x7
 11087 080b 8D01     		.2byte	0x18d
 11088 080d 7B060000 		.4byte	0x67b
 11089 0811 18       		.byte	0x18
 11090 0812 00       		.byte	0
 11091 0813 10       		.uleb128 0x10
 11092 0814 40090000 		.4byte	.LASF123
 11093 0818 10       		.byte	0x10
 11094 0819 07       		.byte	0x7
 11095 081a 9401     		.2byte	0x194
 11096 081c 62080000 		.4byte	0x862
 11097 0820 11       		.uleb128 0x11
 11098 0821 58080000 		.4byte	.LASF124
 11099 0825 07       		.byte	0x7
 11100 0826 9501     		.2byte	0x195
 11101 0828 BD000000 		.4byte	0xbd
 11102 082c 00       		.byte	0
 11103 082d 11       		.uleb128 0x11
 11104 082e 9D110000 		.4byte	.LASF125
 11105 0832 07       		.byte	0x7
 11106 0833 9601     		.2byte	0x196
 11107 0835 BD000000 		.4byte	0xbd
 11108 0839 04       		.byte	0x4
 11109 083a 11       		.uleb128 0x11
 11110 083b C9050000 		.4byte	.LASF126
 11111 083f 07       		.byte	0x7
 11112 0840 9701     		.2byte	0x197
 11113 0842 BD000000 		.4byte	0xbd
 11114 0846 08       		.byte	0x8
 11115 0847 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 249


 11116 0848 33070000 		.4byte	.LASF127
 11117 084c 07       		.byte	0x7
 11118 084d 9801     		.2byte	0x198
 11119 084f 81000000 		.4byte	0x81
 11120 0853 0C       		.byte	0xc
 11121 0854 11       		.uleb128 0x11
 11122 0855 57030000 		.4byte	.LASF70
 11123 0859 07       		.byte	0x7
 11124 085a 9901     		.2byte	0x199
 11125 085c 2E040000 		.4byte	0x42e
 11126 0860 0D       		.byte	0xd
 11127 0861 00       		.byte	0
 11128 0862 10       		.uleb128 0x10
 11129 0863 780E0000 		.4byte	.LASF128
 11130 0867 10       		.byte	0x10
 11131 0868 07       		.byte	0x7
 11132 0869 A001     		.2byte	0x1a0
 11133 086b A4080000 		.4byte	0x8a4
 11134 086f 11       		.uleb128 0x11
 11135 0870 46070000 		.4byte	.LASF129
 11136 0874 07       		.byte	0x7
 11137 0875 A101     		.2byte	0x1a1
 11138 0877 8D000000 		.4byte	0x8d
 11139 087b 00       		.byte	0
 11140 087c 11       		.uleb128 0x11
 11141 087d FF0D0000 		.4byte	.LASF130
 11142 0881 07       		.byte	0x7
 11143 0882 A201     		.2byte	0x1a2
 11144 0884 B1000000 		.4byte	0xb1
 11145 0888 02       		.byte	0x2
 11146 0889 11       		.uleb128 0x11
 11147 088a C8070000 		.4byte	.LASF131
 11148 088e 07       		.byte	0x7
 11149 088f A301     		.2byte	0x1a3
 11150 0891 DA060000 		.4byte	0x6da
 11151 0895 04       		.byte	0x4
 11152 0896 11       		.uleb128 0x11
 11153 0897 57030000 		.4byte	.LASF70
 11154 089b 07       		.byte	0x7
 11155 089c A401     		.2byte	0x1a4
 11156 089e 7B060000 		.4byte	0x67b
 11157 08a2 08       		.byte	0x8
 11158 08a3 00       		.byte	0
 11159 08a4 10       		.uleb128 0x10
 11160 08a5 87010000 		.4byte	.LASF132
 11161 08a9 10       		.byte	0x10
 11162 08aa 07       		.byte	0x7
 11163 08ab AB01     		.2byte	0x1ab
 11164 08ad D9080000 		.4byte	0x8d9
 11165 08b1 11       		.uleb128 0x11
 11166 08b2 4D0D0000 		.4byte	.LASF133
 11167 08b6 07       		.byte	0x7
 11168 08b7 AC01     		.2byte	0x1ac
 11169 08b9 81000000 		.4byte	0x81
 11170 08bd 00       		.byte	0
 11171 08be 11       		.uleb128 0x11
 11172 08bf 3E0A0000 		.4byte	.LASF134
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 250


 11173 08c3 07       		.byte	0x7
 11174 08c4 AD01     		.2byte	0x1ad
 11175 08c6 81000000 		.4byte	0x81
 11176 08ca 01       		.byte	0x1
 11177 08cb 11       		.uleb128 0x11
 11178 08cc 57030000 		.4byte	.LASF70
 11179 08d0 07       		.byte	0x7
 11180 08d1 AE01     		.2byte	0x1ae
 11181 08d3 D9080000 		.4byte	0x8d9
 11182 08d7 02       		.byte	0x2
 11183 08d8 00       		.byte	0
 11184 08d9 07       		.uleb128 0x7
 11185 08da 81000000 		.4byte	0x81
 11186 08de E9080000 		.4byte	0x8e9
 11187 08e2 08       		.uleb128 0x8
 11188 08e3 0E010000 		.4byte	0x10e
 11189 08e7 0D       		.byte	0xd
 11190 08e8 00       		.byte	0
 11191 08e9 10       		.uleb128 0x10
 11192 08ea 59090000 		.4byte	.LASF135
 11193 08ee 10       		.byte	0x10
 11194 08ef 07       		.byte	0x7
 11195 08f0 B501     		.2byte	0x1b5
 11196 08f2 2B090000 		.4byte	0x92b
 11197 08f6 11       		.uleb128 0x11
 11198 08f7 70100000 		.4byte	.LASF136
 11199 08fb 07       		.byte	0x7
 11200 08fc B601     		.2byte	0x1b6
 11201 08fe BD000000 		.4byte	0xbd
 11202 0902 00       		.byte	0
 11203 0903 11       		.uleb128 0x11
 11204 0904 1E070000 		.4byte	.LASF137
 11205 0908 07       		.byte	0x7
 11206 0909 B701     		.2byte	0x1b7
 11207 090b D5000000 		.4byte	0xd5
 11208 090f 04       		.byte	0x4
 11209 0910 11       		.uleb128 0x11
 11210 0911 050D0000 		.4byte	.LASF138
 11211 0915 07       		.byte	0x7
 11212 0916 B801     		.2byte	0x1b8
 11213 0918 D5000000 		.4byte	0xd5
 11214 091c 08       		.byte	0x8
 11215 091d 11       		.uleb128 0x11
 11216 091e 57030000 		.4byte	.LASF70
 11217 0922 07       		.byte	0x7
 11218 0923 B901     		.2byte	0x1b9
 11219 0925 2B090000 		.4byte	0x92b
 11220 0929 0C       		.byte	0xc
 11221 092a 00       		.byte	0
 11222 092b 07       		.uleb128 0x7
 11223 092c 81000000 		.4byte	0x81
 11224 0930 3B090000 		.4byte	0x93b
 11225 0934 08       		.uleb128 0x8
 11226 0935 0E010000 		.4byte	0x10e
 11227 0939 03       		.byte	0x3
 11228 093a 00       		.byte	0
 11229 093b 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 251


 11230 093c 11020000 		.4byte	.LASF139
 11231 0940 12       		.byte	0x12
 11232 0941 07       		.byte	0x7
 11233 0942 C001     		.2byte	0x1c0
 11234 0944 7D090000 		.4byte	0x97d
 11235 0948 11       		.uleb128 0x11
 11236 0949 86110000 		.4byte	.LASF140
 11237 094d 07       		.byte	0x7
 11238 094e C101     		.2byte	0x1c1
 11239 0950 81000000 		.4byte	0x81
 11240 0954 00       		.byte	0
 11241 0955 11       		.uleb128 0x11
 11242 0956 25100000 		.4byte	.LASF141
 11243 095a 07       		.byte	0x7
 11244 095b C201     		.2byte	0x1c2
 11245 095d DA060000 		.4byte	0x6da
 11246 0961 02       		.byte	0x2
 11247 0962 11       		.uleb128 0x11
 11248 0963 6A000000 		.4byte	.LASF142
 11249 0967 07       		.byte	0x7
 11250 0968 C301     		.2byte	0x1c3
 11251 096a 81000000 		.4byte	0x81
 11252 096e 06       		.byte	0x6
 11253 096f 11       		.uleb128 0x11
 11254 0970 57030000 		.4byte	.LASF70
 11255 0974 07       		.byte	0x7
 11256 0975 C401     		.2byte	0x1c4
 11257 0977 7D090000 		.4byte	0x97d
 11258 097b 07       		.byte	0x7
 11259 097c 00       		.byte	0
 11260 097d 07       		.uleb128 0x7
 11261 097e 81000000 		.4byte	0x81
 11262 0982 8D090000 		.4byte	0x98d
 11263 0986 08       		.uleb128 0x8
 11264 0987 0E010000 		.4byte	0x10e
 11265 098b 09       		.byte	0x9
 11266 098c 00       		.byte	0
 11267 098d 13       		.uleb128 0x13
 11268 098e 8B100000 		.4byte	.LASF143
 11269 0992 F402     		.2byte	0x2f4
 11270 0994 07       		.byte	0x7
 11271 0995 CD01     		.2byte	0x1cd
 11272 0997 720A0000 		.4byte	0xa72
 11273 099b 11       		.uleb128 0x11
 11274 099c A10A0000 		.4byte	.LASF144
 11275 09a0 07       		.byte	0x7
 11276 09a1 CF01     		.2byte	0x1cf
 11277 09a3 81000000 		.4byte	0x81
 11278 09a7 00       		.byte	0
 11279 09a8 11       		.uleb128 0x11
 11280 09a9 57030000 		.4byte	.LASF70
 11281 09ad 07       		.byte	0x7
 11282 09ae D001     		.2byte	0x1d0
 11283 09b0 720A0000 		.4byte	0xa72
 11284 09b4 01       		.byte	0x1
 11285 09b5 12       		.uleb128 0x12
 11286 09b6 636E7400 		.ascii	"cnt\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 252


 11287 09ba 07       		.byte	0x7
 11288 09bb D101     		.2byte	0x1d1
 11289 09bd 06030000 		.4byte	0x306
 11290 09c1 10       		.byte	0x10
 11291 09c2 11       		.uleb128 0x11
 11292 09c3 EA020000 		.4byte	.LASF145
 11293 09c7 07       		.byte	0x7
 11294 09c8 D201     		.2byte	0x1d2
 11295 09ca 820A0000 		.4byte	0xa82
 11296 09ce 60       		.byte	0x60
 11297 09cf 12       		.uleb128 0x12
 11298 09d0 64657600 		.ascii	"dev\000"
 11299 09d4 07       		.byte	0x7
 11300 09d5 D301     		.2byte	0x1d3
 11301 09d7 9F030000 		.4byte	0x39f
 11302 09db A0       		.byte	0xa0
 11303 09dc 11       		.uleb128 0x11
 11304 09dd C00E0000 		.4byte	.LASF146
 11305 09e1 07       		.byte	0x7
 11306 09e2 D401     		.2byte	0x1d4
 11307 09e4 920A0000 		.4byte	0xa92
 11308 09e8 B0       		.byte	0xb0
 11309 09e9 14       		.uleb128 0x14
 11310 09ea 656E6300 		.ascii	"enc\000"
 11311 09ee 07       		.byte	0x7
 11312 09ef D501     		.2byte	0x1d5
 11313 09f1 A20A0000 		.4byte	0xaa2
 11314 09f5 9001     		.2byte	0x190
 11315 09f7 14       		.uleb128 0x14
 11316 09f8 656D6700 		.ascii	"emg\000"
 11317 09fc 07       		.byte	0x7
 11318 09fd D601     		.2byte	0x1d6
 11319 09ff 8B060000 		.4byte	0x68b
 11320 0a03 F001     		.2byte	0x1f0
 11321 0a05 14       		.uleb128 0x14
 11322 0a06 696D7500 		.ascii	"imu\000"
 11323 0a0a 07       		.byte	0x7
 11324 0a0b D701     		.2byte	0x1d7
 11325 0a0d FA060000 		.4byte	0x6fa
 11326 0a11 0002     		.2byte	0x200
 11327 0a13 14       		.uleb128 0x14
 11328 0a14 65787000 		.ascii	"exp\000"
 11329 0a18 07       		.byte	0x7
 11330 0a19 D801     		.2byte	0x1d8
 11331 0a1b 52070000 		.4byte	0x752
 11332 0a1f 2002     		.2byte	0x220
 11333 0a21 15       		.uleb128 0x15
 11334 0a22 B9000000 		.4byte	.LASF147
 11335 0a26 07       		.byte	0x7
 11336 0a27 D901     		.2byte	0x1d9
 11337 0a29 B20A0000 		.4byte	0xab2
 11338 0a2d 4002     		.2byte	0x240
 11339 0a2f 14       		.uleb128 0x14
 11340 0a30 534800   		.ascii	"SH\000"
 11341 0a33 07       		.byte	0x7
 11342 0a34 DB01     		.2byte	0x1db
 11343 0a36 13080000 		.4byte	0x813
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 253


 11344 0a3a A002     		.2byte	0x2a0
 11345 0a3c 15       		.uleb128 0x15
 11346 0a3d F2000000 		.4byte	.LASF148
 11347 0a41 07       		.byte	0x7
 11348 0a42 DC01     		.2byte	0x1dc
 11349 0a44 62080000 		.4byte	0x862
 11350 0a48 B002     		.2byte	0x2b0
 11351 0a4a 14       		.uleb128 0x14
 11352 0a4b 4D5300   		.ascii	"MS\000"
 11353 0a4e 07       		.byte	0x7
 11354 0a4f DD01     		.2byte	0x1dd
 11355 0a51 A4080000 		.4byte	0x8a4
 11356 0a55 C002     		.2byte	0x2c0
 11357 0a57 14       		.uleb128 0x14
 11358 0a58 464200   		.ascii	"FB\000"
 11359 0a5b 07       		.byte	0x7
 11360 0a5c DE01     		.2byte	0x1de
 11361 0a5e E9080000 		.4byte	0x8e9
 11362 0a62 D002     		.2byte	0x2d0
 11363 0a64 14       		.uleb128 0x14
 11364 0a65 575200   		.ascii	"WR\000"
 11365 0a68 07       		.byte	0x7
 11366 0a69 DF01     		.2byte	0x1df
 11367 0a6b 3B090000 		.4byte	0x93b
 11368 0a6f E002     		.2byte	0x2e0
 11369 0a71 00       		.byte	0
 11370 0a72 07       		.uleb128 0x7
 11371 0a73 81000000 		.4byte	0x81
 11372 0a77 820A0000 		.4byte	0xa82
 11373 0a7b 08       		.uleb128 0x8
 11374 0a7c 0E010000 		.4byte	0x10e
 11375 0a80 0E       		.byte	0xe
 11376 0a81 00       		.byte	0
 11377 0a82 07       		.uleb128 0x7
 11378 0a83 81000000 		.4byte	0x81
 11379 0a87 920A0000 		.4byte	0xa92
 11380 0a8b 08       		.uleb128 0x8
 11381 0a8c 0E010000 		.4byte	0x10e
 11382 0a90 3F       		.byte	0x3f
 11383 0a91 00       		.byte	0
 11384 0a92 07       		.uleb128 0x7
 11385 0a93 3E040000 		.4byte	0x43e
 11386 0a97 A20A0000 		.4byte	0xaa2
 11387 0a9b 08       		.uleb128 0x8
 11388 0a9c 0E010000 		.4byte	0x10e
 11389 0aa0 01       		.byte	0x1
 11390 0aa1 00       		.byte	0
 11391 0aa2 07       		.uleb128 0x7
 11392 0aa3 D8050000 		.4byte	0x5d8
 11393 0aa7 B20A0000 		.4byte	0xab2
 11394 0aab 08       		.uleb128 0x8
 11395 0aac 0E010000 		.4byte	0x10e
 11396 0ab0 01       		.byte	0x1
 11397 0ab1 00       		.byte	0
 11398 0ab2 07       		.uleb128 0x7
 11399 0ab3 DE070000 		.4byte	0x7de
 11400 0ab7 C20A0000 		.4byte	0xac2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 254


 11401 0abb 08       		.uleb128 0x8
 11402 0abc 0E010000 		.4byte	0x10e
 11403 0ac0 02       		.byte	0x2
 11404 0ac1 00       		.byte	0
 11405 0ac2 10       		.uleb128 0x10
 11406 0ac3 6F0C0000 		.4byte	.LASF149
 11407 0ac7 28       		.byte	0x28
 11408 0ac8 07       		.byte	0x7
 11409 0ac9 EA01     		.2byte	0x1ea
 11410 0acb 1E0B0000 		.4byte	0xb1e
 11411 0acf 11       		.uleb128 0x11
 11412 0ad0 FD040000 		.4byte	.LASF150
 11413 0ad4 07       		.byte	0x7
 11414 0ad5 EB01     		.2byte	0x1eb
 11415 0ad7 81000000 		.4byte	0x81
 11416 0adb 00       		.byte	0
 11417 0adc 11       		.uleb128 0x11
 11418 0add 64030000 		.4byte	.LASF151
 11419 0ae1 07       		.byte	0x7
 11420 0ae2 EC01     		.2byte	0x1ec
 11421 0ae4 1E0B0000 		.4byte	0xb1e
 11422 0ae8 02       		.byte	0x2
 11423 0ae9 11       		.uleb128 0x11
 11424 0aea C50B0000 		.4byte	.LASF152
 11425 0aee 07       		.byte	0x7
 11426 0aef ED01     		.2byte	0x1ed
 11427 0af1 1E0B0000 		.4byte	0xb1e
 11428 0af5 08       		.byte	0x8
 11429 0af6 11       		.uleb128 0x11
 11430 0af7 7B0C0000 		.4byte	.LASF153
 11431 0afb 07       		.byte	0x7
 11432 0afc EE01     		.2byte	0x1ee
 11433 0afe 1E0B0000 		.4byte	0xb1e
 11434 0b02 0E       		.byte	0xe
 11435 0b03 11       		.uleb128 0x11
 11436 0b04 4D080000 		.4byte	.LASF154
 11437 0b08 07       		.byte	0x7
 11438 0b09 EF01     		.2byte	0x1ef
 11439 0b0b 2E0B0000 		.4byte	0xb2e
 11440 0b0f 14       		.byte	0x14
 11441 0b10 11       		.uleb128 0x11
 11442 0b11 FE010000 		.4byte	.LASF155
 11443 0b15 07       		.byte	0x7
 11444 0b16 F001     		.2byte	0x1f0
 11445 0b18 B1000000 		.4byte	0xb1
 11446 0b1c 24       		.byte	0x24
 11447 0b1d 00       		.byte	0
 11448 0b1e 07       		.uleb128 0x7
 11449 0b1f B1000000 		.4byte	0xb1
 11450 0b23 2E0B0000 		.4byte	0xb2e
 11451 0b27 08       		.uleb128 0x8
 11452 0b28 0E010000 		.4byte	0x10e
 11453 0b2c 02       		.byte	0x2
 11454 0b2d 00       		.byte	0
 11455 0b2e 07       		.uleb128 0x7
 11456 0b2f D5000000 		.4byte	0xd5
 11457 0b33 3E0B0000 		.4byte	0xb3e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 255


 11458 0b37 08       		.uleb128 0x8
 11459 0b38 0E010000 		.4byte	0x10e
 11460 0b3c 03       		.byte	0x3
 11461 0b3d 00       		.byte	0
 11462 0b3e 10       		.uleb128 0x10
 11463 0b3f A8110000 		.4byte	.LASF156
 11464 0b43 08       		.byte	0x8
 11465 0b44 07       		.byte	0x7
 11466 0b45 F701     		.2byte	0x1f7
 11467 0b47 660B0000 		.4byte	0xb66
 11468 0b4b 11       		.uleb128 0x11
 11469 0b4c B5050000 		.4byte	.LASF157
 11470 0b50 07       		.byte	0x7
 11471 0b51 F801     		.2byte	0x1f8
 11472 0b53 BD000000 		.4byte	0xbd
 11473 0b57 00       		.byte	0
 11474 0b58 11       		.uleb128 0x11
 11475 0b59 44020000 		.4byte	.LASF158
 11476 0b5d 07       		.byte	0x7
 11477 0b5e F901     		.2byte	0x1f9
 11478 0b60 BD000000 		.4byte	0xbd
 11479 0b64 04       		.byte	0x4
 11480 0b65 00       		.byte	0
 11481 0b66 10       		.uleb128 0x10
 11482 0b67 1E040000 		.4byte	.LASF159
 11483 0b6b 06       		.byte	0x6
 11484 0b6c 07       		.byte	0x7
 11485 0b6d 0002     		.2byte	0x200
 11486 0b6f A80B0000 		.4byte	0xba8
 11487 0b73 11       		.uleb128 0x11
 11488 0b74 89070000 		.4byte	.LASF160
 11489 0b78 07       		.byte	0x7
 11490 0b79 0102     		.2byte	0x201
 11491 0b7b 81000000 		.4byte	0x81
 11492 0b7f 00       		.byte	0
 11493 0b80 11       		.uleb128 0x11
 11494 0b81 C4110000 		.4byte	.LASF161
 11495 0b85 07       		.byte	0x7
 11496 0b86 0202     		.2byte	0x202
 11497 0b88 81000000 		.4byte	0x81
 11498 0b8c 01       		.byte	0x1
 11499 0b8d 11       		.uleb128 0x11
 11500 0b8e 42060000 		.4byte	.LASF162
 11501 0b92 07       		.byte	0x7
 11502 0b93 0302     		.2byte	0x203
 11503 0b95 B1000000 		.4byte	0xb1
 11504 0b99 02       		.byte	0x2
 11505 0b9a 11       		.uleb128 0x11
 11506 0b9b 110A0000 		.4byte	.LASF163
 11507 0b9f 07       		.byte	0x7
 11508 0ba0 0402     		.2byte	0x204
 11509 0ba2 B1000000 		.4byte	0xb1
 11510 0ba6 04       		.byte	0x4
 11511 0ba7 00       		.byte	0
 11512 0ba8 16       		.uleb128 0x16
 11513 0ba9 01       		.byte	0x1
 11514 0baa 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 256


 11515 0bae 07       		.byte	0x7
 11516 0baf 0802     		.2byte	0x208
 11517 0bb1 DA0B0000 		.4byte	0xbda
 11518 0bb5 0A       		.uleb128 0xa
 11519 0bb6 D2050000 		.4byte	.LASF164
 11520 0bba 00       		.byte	0
 11521 0bbb 0A       		.uleb128 0xa
 11522 0bbc 470D0000 		.4byte	.LASF165
 11523 0bc0 01       		.byte	0x1
 11524 0bc1 0A       		.uleb128 0xa
 11525 0bc2 5E0B0000 		.4byte	.LASF166
 11526 0bc6 02       		.byte	0x2
 11527 0bc7 0A       		.uleb128 0xa
 11528 0bc8 8D020000 		.4byte	.LASF167
 11529 0bcc 03       		.byte	0x3
 11530 0bcd 0A       		.uleb128 0xa
 11531 0bce 470A0000 		.4byte	.LASF168
 11532 0bd2 04       		.byte	0x4
 11533 0bd3 0A       		.uleb128 0xa
 11534 0bd4 E50C0000 		.4byte	.LASF169
 11535 0bd8 05       		.byte	0x5
 11536 0bd9 00       		.byte	0
 11537 0bda 05       		.uleb128 0x5
 11538 0bdb 67050000 		.4byte	.LASF170
 11539 0bdf 07       		.byte	0x7
 11540 0be0 1002     		.2byte	0x210
 11541 0be2 A80B0000 		.4byte	0xba8
 11542 0be6 16       		.uleb128 0x16
 11543 0be7 01       		.byte	0x1
 11544 0be8 2C000000 		.4byte	0x2c
 11545 0bec 07       		.byte	0x7
 11546 0bed 1202     		.2byte	0x212
 11547 0bef 120C0000 		.4byte	0xc12
 11548 0bf3 0A       		.uleb128 0xa
 11549 0bf4 F1010000 		.4byte	.LASF171
 11550 0bf8 00       		.byte	0
 11551 0bf9 0A       		.uleb128 0xa
 11552 0bfa BB070000 		.4byte	.LASF172
 11553 0bfe 01       		.byte	0x1
 11554 0bff 0A       		.uleb128 0xa
 11555 0c00 66080000 		.4byte	.LASF173
 11556 0c04 02       		.byte	0x2
 11557 0c05 0A       		.uleb128 0xa
 11558 0c06 CB030000 		.4byte	.LASF174
 11559 0c0a 03       		.byte	0x3
 11560 0c0b 0A       		.uleb128 0xa
 11561 0c0c 81110000 		.4byte	.LASF175
 11562 0c10 04       		.byte	0x4
 11563 0c11 00       		.byte	0
 11564 0c12 05       		.uleb128 0x5
 11565 0c13 310E0000 		.4byte	.LASF176
 11566 0c17 07       		.byte	0x7
 11567 0c18 1902     		.2byte	0x219
 11568 0c1a E60B0000 		.4byte	0xbe6
 11569 0c1e 17       		.uleb128 0x17
 11570 0c1f 90050000 		.4byte	.LASF177
 11571 0c23 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 257


 11572 0c24 62       		.byte	0x62
 11573 0c25 00000000 		.4byte	.LFB64
 11574 0c29 18000000 		.4byte	.LFE64-.LFB64
 11575 0c2d 01       		.uleb128 0x1
 11576 0c2e 9C       		.byte	0x9c
 11577 0c2f 17       		.uleb128 0x17
 11578 0c30 08100000 		.4byte	.LASF178
 11579 0c34 01       		.byte	0x1
 11580 0c35 6D       		.byte	0x6d
 11581 0c36 00000000 		.4byte	.LFB65
 11582 0c3a 20000000 		.4byte	.LFE65-.LFB65
 11583 0c3e 01       		.uleb128 0x1
 11584 0c3f 9C       		.byte	0x9c
 11585 0c40 18       		.uleb128 0x18
 11586 0c41 C5090000 		.4byte	.LASF210
 11587 0c45 01       		.byte	0x1
 11588 0c46 86       		.byte	0x86
 11589 0c47 00000000 		.4byte	.LFB66
 11590 0c4b F4010000 		.4byte	.LFE66-.LFB66
 11591 0c4f 01       		.uleb128 0x1
 11592 0c50 9C       		.byte	0x9c
 11593 0c51 D50C0000 		.4byte	0xcd5
 11594 0c55 19       		.uleb128 0x19
 11595 0c56 1F010000 		.4byte	.LASF179
 11596 0c5a 01       		.byte	0x1
 11597 0c5b 8B       		.byte	0x8b
 11598 0c5c 81000000 		.4byte	0x81
 11599 0c60 05       		.uleb128 0x5
 11600 0c61 03       		.byte	0x3
 11601 0c62 00000000 		.4byte	state.10447
 11602 0c66 19       		.uleb128 0x19
 11603 0c67 67060000 		.4byte	.LASF180
 11604 0c6b 01       		.byte	0x1
 11605 0c6c 8E       		.byte	0x8e
 11606 0c6d 81000000 		.4byte	0x81
 11607 0c71 05       		.uleb128 0x5
 11608 0c72 03       		.byte	0x3
 11609 0c73 08000000 		.4byte	data_packet_index.10448
 11610 0c77 19       		.uleb128 0x19
 11611 0c78 AE0C0000 		.4byte	.LASF181
 11612 0c7c 01       		.byte	0x1
 11613 0c7d 8F       		.byte	0x8f
 11614 0c7e 81000000 		.4byte	0x81
 11615 0c82 05       		.uleb128 0x5
 11616 0c83 03       		.byte	0x3
 11617 0c84 07000000 		.4byte	data_packet_length.10449
 11618 0c88 19       		.uleb128 0x19
 11619 0c89 79060000 		.4byte	.LASF182
 11620 0c8d 01       		.byte	0x1
 11621 0c8e 90       		.byte	0x90
 11622 0c8f F6020000 		.4byte	0x2f6
 11623 0c93 05       		.uleb128 0x5
 11624 0c94 03       		.byte	0x3
 11625 0c95 0C000000 		.4byte	data_packet_buffer.10450
 11626 0c99 19       		.uleb128 0x19
 11627 0c9a E30A0000 		.4byte	.LASF183
 11628 0c9e 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 258


 11629 0c9f 91       		.byte	0x91
 11630 0ca0 2E040000 		.4byte	0x42e
 11631 0ca4 05       		.uleb128 0x5
 11632 0ca5 03       		.byte	0x3
 11633 0ca6 04000000 		.4byte	rx_queue.10451
 11634 0caa 19       		.uleb128 0x19
 11635 0cab B6010000 		.4byte	.LASF184
 11636 0caf 01       		.byte	0x1
 11637 0cb0 94       		.byte	0x94
 11638 0cb1 81000000 		.4byte	0x81
 11639 0cb5 02       		.uleb128 0x2
 11640 0cb6 91       		.byte	0x91
 11641 0cb7 75       		.sleb128 -11
 11642 0cb8 19       		.uleb128 0x19
 11643 0cb9 2C060000 		.4byte	.LASF185
 11644 0cbd 01       		.byte	0x1
 11645 0cbe 95       		.byte	0x95
 11646 0cbf 81000000 		.4byte	0x81
 11647 0cc3 02       		.uleb128 0x2
 11648 0cc4 91       		.byte	0x91
 11649 0cc5 77       		.sleb128 -9
 11650 0cc6 19       		.uleb128 0x19
 11651 0cc7 66070000 		.4byte	.LASF186
 11652 0ccb 01       		.byte	0x1
 11653 0ccc 96       		.byte	0x96
 11654 0ccd 81000000 		.4byte	0x81
 11655 0cd1 02       		.uleb128 0x2
 11656 0cd2 91       		.byte	0x91
 11657 0cd3 76       		.sleb128 -10
 11658 0cd4 00       		.byte	0
 11659 0cd5 1A       		.uleb128 0x1a
 11660 0cd6 E00E0000 		.4byte	.LASF193
 11661 0cda 01       		.byte	0x1
 11662 0cdb 0C01     		.2byte	0x10c
 11663 0cdd 00000000 		.4byte	.LFB67
 11664 0ce1 24080000 		.4byte	.LFE67-.LFB67
 11665 0ce5 01       		.uleb128 0x1
 11666 0ce6 9C       		.byte	0x9c
 11667 0ce7 740D0000 		.4byte	0xd74
 11668 0ceb 1B       		.uleb128 0x1b
 11669 0cec A3060000 		.4byte	.LASF187
 11670 0cf0 01       		.byte	0x1
 11671 0cf1 0E01     		.2byte	0x10e
 11672 0cf3 8D000000 		.4byte	0x8d
 11673 0cf7 05       		.uleb128 0x5
 11674 0cf8 03       		.byte	0x3
 11675 0cf9 00000000 		.4byte	counter_calibration.10467
 11676 0cfd 1B       		.uleb128 0x1b
 11677 0cfe 190C0000 		.4byte	.LASF188
 11678 0d02 01       		.byte	0x1
 11679 0d03 0F01     		.2byte	0x10f
 11680 0d05 8D000000 		.4byte	0x8d
 11681 0d09 05       		.uleb128 0x5
 11682 0d0a 03       		.byte	0x3
 11683 0d0b 02000000 		.4byte	counter_tension_func.10468
 11684 0d0f 1B       		.uleb128 0x1b
 11685 0d10 CD010000 		.4byte	.LASF189
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 259


 11686 0d14 01       		.byte	0x1
 11687 0d15 1001     		.2byte	0x110
 11688 0d17 740D0000 		.4byte	0xd74
 11689 0d1b 03       		.uleb128 0x3
 11690 0d1c 91       		.byte	0x91
 11691 0d1d A86C     		.sleb128 -2520
 11692 0d1f 1B       		.uleb128 0x1b
 11693 0d20 FC0B0000 		.4byte	.LASF190
 11694 0d24 01       		.byte	0x1
 11695 0d25 1201     		.2byte	0x112
 11696 0d27 81000000 		.4byte	0x81
 11697 0d2b 02       		.uleb128 0x2
 11698 0d2c 91       		.byte	0x91
 11699 0d2d 6E       		.sleb128 -18
 11700 0d2e 1B       		.uleb128 0x1b
 11701 0d2f 82090000 		.4byte	.LASF191
 11702 0d33 01       		.byte	0x1
 11703 0d34 1301     		.2byte	0x113
 11704 0d36 81000000 		.4byte	0x81
 11705 0d3a 02       		.uleb128 0x2
 11706 0d3b 91       		.byte	0x91
 11707 0d3c 6D       		.sleb128 -19
 11708 0d3d 1C       		.uleb128 0x1c
 11709 0d3e 90010000 		.4byte	.LBB2
 11710 0d42 32010000 		.4byte	.LBE2-.LBB2
 11711 0d46 580D0000 		.4byte	0xd58
 11712 0d4a 1D       		.uleb128 0x1d
 11713 0d4b 6900     		.ascii	"i\000"
 11714 0d4d 01       		.byte	0x1
 11715 0d4e 4E01     		.2byte	0x14e
 11716 0d50 81000000 		.4byte	0x81
 11717 0d54 02       		.uleb128 0x2
 11718 0d55 91       		.byte	0x91
 11719 0d56 6F       		.sleb128 -17
 11720 0d57 00       		.byte	0
 11721 0d58 1E       		.uleb128 0x1e
 11722 0d59 56060000 		.4byte	.LBB3
 11723 0d5d 50000000 		.4byte	.LBE3-.LBB3
 11724 0d61 1B       		.uleb128 0x1b
 11725 0d62 F8020000 		.4byte	.LASF192
 11726 0d66 01       		.byte	0x1
 11727 0d67 4102     		.2byte	0x241
 11728 0d69 850D0000 		.4byte	0xd85
 11729 0d6d 04       		.uleb128 0x4
 11730 0d6e 91       		.byte	0x91
 11731 0d6f 90F77E   		.sleb128 -17520
 11732 0d72 00       		.byte	0
 11733 0d73 00       		.byte	0
 11734 0d74 07       		.uleb128 0x7
 11735 0d75 E3000000 		.4byte	0xe3
 11736 0d79 850D0000 		.4byte	0xd85
 11737 0d7d 1F       		.uleb128 0x1f
 11738 0d7e 0E010000 		.4byte	0x10e
 11739 0d82 C309     		.2byte	0x9c3
 11740 0d84 00       		.byte	0
 11741 0d85 07       		.uleb128 0x7
 11742 0d86 E3000000 		.4byte	0xe3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 260


 11743 0d8a 960D0000 		.4byte	0xd96
 11744 0d8e 1F       		.uleb128 0x1f
 11745 0d8f 0E010000 		.4byte	0x10e
 11746 0d93 973A     		.2byte	0x3a97
 11747 0d95 00       		.byte	0
 11748 0d96 1A       		.uleb128 0x1a
 11749 0d97 F30E0000 		.4byte	.LASF194
 11750 0d9b 01       		.byte	0x1
 11751 0d9c 8502     		.2byte	0x285
 11752 0d9e 00000000 		.4byte	.LFB68
 11753 0da2 CC050000 		.4byte	.LFE68-.LFB68
 11754 0da6 01       		.uleb128 0x1
 11755 0da7 9C       		.byte	0x9c
 11756 0da8 4C0E0000 		.4byte	0xe4c
 11757 0dac 20       		.uleb128 0x20
 11758 0dad 27080000 		.4byte	.LASF195
 11759 0db1 01       		.byte	0x1
 11760 0db2 8502     		.2byte	0x285
 11761 0db4 81000000 		.4byte	0x81
 11762 0db8 02       		.uleb128 0x2
 11763 0db9 91       		.byte	0x91
 11764 0dba 5F       		.sleb128 -33
 11765 0dbb 20       		.uleb128 0x20
 11766 0dbc 8C060000 		.4byte	.LASF196
 11767 0dc0 01       		.byte	0x1
 11768 0dc1 8502     		.2byte	0x285
 11769 0dc3 4C0E0000 		.4byte	0xe4c
 11770 0dc7 02       		.uleb128 0x2
 11771 0dc8 91       		.byte	0x91
 11772 0dc9 58       		.sleb128 -40
 11773 0dca 20       		.uleb128 0x20
 11774 0dcb BA100000 		.4byte	.LASF197
 11775 0dcf 01       		.byte	0x1
 11776 0dd0 8502     		.2byte	0x285
 11777 0dd2 4C0E0000 		.4byte	0xe4c
 11778 0dd6 02       		.uleb128 0x2
 11779 0dd7 91       		.byte	0x91
 11780 0dd8 54       		.sleb128 -44
 11781 0dd9 1B       		.uleb128 0x1b
 11782 0dda 03050000 		.4byte	.LASF198
 11783 0dde 01       		.byte	0x1
 11784 0ddf 8702     		.2byte	0x287
 11785 0de1 BD000000 		.4byte	0xbd
 11786 0de5 02       		.uleb128 0x2
 11787 0de6 91       		.byte	0x91
 11788 0de7 74       		.sleb128 -12
 11789 0de8 1B       		.uleb128 0x1b
 11790 0de9 27040000 		.4byte	.LASF199
 11791 0ded 01       		.byte	0x1
 11792 0dee 8802     		.2byte	0x288
 11793 0df0 BD000000 		.4byte	0xbd
 11794 0df4 02       		.uleb128 0x2
 11795 0df5 91       		.byte	0x91
 11796 0df6 68       		.sleb128 -24
 11797 0df7 1B       		.uleb128 0x1b
 11798 0df8 31040000 		.4byte	.LASF200
 11799 0dfc 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 261


 11800 0dfd 8802     		.2byte	0x288
 11801 0dff BD000000 		.4byte	0xbd
 11802 0e03 02       		.uleb128 0x2
 11803 0e04 91       		.byte	0x91
 11804 0e05 64       		.sleb128 -28
 11805 0e06 1D       		.uleb128 0x1d
 11806 0e07 4D4F5400 		.ascii	"MOT\000"
 11807 0e0b 01       		.byte	0x1
 11808 0e0c 8902     		.2byte	0x289
 11809 0e0e 520E0000 		.4byte	0xe52
 11810 0e12 02       		.uleb128 0x2
 11811 0e13 91       		.byte	0x91
 11812 0e14 70       		.sleb128 -16
 11813 0e15 1B       		.uleb128 0x1b
 11814 0e16 85100000 		.4byte	.LASF201
 11815 0e1a 01       		.byte	0x1
 11816 0e1b 8A02     		.2byte	0x28a
 11817 0e1d 81000000 		.4byte	0x81
 11818 0e21 02       		.uleb128 0x2
 11819 0e22 91       		.byte	0x91
 11820 0e23 6F       		.sleb128 -17
 11821 0e24 1B       		.uleb128 0x1b
 11822 0e25 D70A0000 		.4byte	.LASF202
 11823 0e29 01       		.byte	0x1
 11824 0e2a 8C02     		.2byte	0x28c
 11825 0e2c EA060000 		.4byte	0x6ea
 11826 0e30 05       		.uleb128 0x5
 11827 0e31 03       		.byte	0x3
 11828 0e32 8C000000 		.4byte	current_emg.10493
 11829 0e36 21       		.uleb128 0x21
 11830 0e37 00000000 		.4byte	.Ldebug_ranges0+0
 11831 0e3b 1B       		.uleb128 0x1b
 11832 0e3c 15010000 		.4byte	.LASF203
 11833 0e40 01       		.byte	0x1
 11834 0e41 B102     		.2byte	0x2b1
 11835 0e43 BD000000 		.4byte	0xbd
 11836 0e47 02       		.uleb128 0x2
 11837 0e48 91       		.byte	0x91
 11838 0e49 60       		.sleb128 -32
 11839 0e4a 00       		.byte	0
 11840 0e4b 00       		.byte	0
 11841 0e4c 0C       		.uleb128 0xc
 11842 0e4d 04       		.byte	0x4
 11843 0e4e A5010000 		.4byte	0x1a5
 11844 0e52 0C       		.uleb128 0xc
 11845 0e53 04       		.byte	0x4
 11846 0e54 3E040000 		.4byte	0x43e
 11847 0e58 22       		.uleb128 0x22
 11848 0e59 C90F0000 		.4byte	.LASF204
 11849 0e5d 01       		.byte	0x1
 11850 0e5e 6403     		.2byte	0x364
 11851 0e60 00000000 		.4byte	.LFB69
 11852 0e64 34030000 		.4byte	.LFE69-.LFB69
 11853 0e68 01       		.uleb128 0x1
 11854 0e69 9C       		.byte	0x9c
 11855 0e6a E80E0000 		.4byte	0xee8
 11856 0e6e 20       		.uleb128 0x20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 262


 11857 0e6f 27080000 		.4byte	.LASF195
 11858 0e73 01       		.byte	0x1
 11859 0e74 6403     		.2byte	0x364
 11860 0e76 81000000 		.4byte	0x81
 11861 0e7a 02       		.uleb128 0x2
 11862 0e7b 91       		.byte	0x91
 11863 0e7c 67       		.sleb128 -25
 11864 0e7d 20       		.uleb128 0x20
 11865 0e7e 8C060000 		.4byte	.LASF196
 11866 0e82 01       		.byte	0x1
 11867 0e83 6403     		.2byte	0x364
 11868 0e85 4C0E0000 		.4byte	0xe4c
 11869 0e89 02       		.uleb128 0x2
 11870 0e8a 91       		.byte	0x91
 11871 0e8b 60       		.sleb128 -32
 11872 0e8c 20       		.uleb128 0x20
 11873 0e8d BA100000 		.4byte	.LASF197
 11874 0e91 01       		.byte	0x1
 11875 0e92 6403     		.2byte	0x364
 11876 0e94 4C0E0000 		.4byte	0xe4c
 11877 0e98 02       		.uleb128 0x2
 11878 0e99 91       		.byte	0x91
 11879 0e9a 5C       		.sleb128 -36
 11880 0e9b 23       		.uleb128 0x23
 11881 0e9c 18000000 		.4byte	.Ldebug_ranges0+0x18
 11882 0ea0 C30E0000 		.4byte	0xec3
 11883 0ea4 1B       		.uleb128 0x1b
 11884 0ea5 15010000 		.4byte	.LASF203
 11885 0ea9 01       		.byte	0x1
 11886 0eaa 6B03     		.2byte	0x36b
 11887 0eac BD000000 		.4byte	0xbd
 11888 0eb0 02       		.uleb128 0x2
 11889 0eb1 91       		.byte	0x91
 11890 0eb2 74       		.sleb128 -12
 11891 0eb3 1B       		.uleb128 0x1b
 11892 0eb4 1C020000 		.4byte	.LASF205
 11893 0eb8 01       		.byte	0x1
 11894 0eb9 6C03     		.2byte	0x36c
 11895 0ebb BD000000 		.4byte	0xbd
 11896 0ebf 02       		.uleb128 0x2
 11897 0ec0 91       		.byte	0x91
 11898 0ec1 70       		.sleb128 -16
 11899 0ec2 00       		.byte	0
 11900 0ec3 21       		.uleb128 0x21
 11901 0ec4 30000000 		.4byte	.Ldebug_ranges0+0x30
 11902 0ec8 1B       		.uleb128 0x1b
 11903 0ec9 160D0000 		.4byte	.LASF206
 11904 0ecd 01       		.byte	0x1
 11905 0ece 9103     		.2byte	0x391
 11906 0ed0 BD000000 		.4byte	0xbd
 11907 0ed4 02       		.uleb128 0x2
 11908 0ed5 91       		.byte	0x91
 11909 0ed6 6C       		.sleb128 -20
 11910 0ed7 1B       		.uleb128 0x1b
 11911 0ed8 BD090000 		.4byte	.LASF207
 11912 0edc 01       		.byte	0x1
 11913 0edd 9203     		.2byte	0x392
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 263


 11914 0edf BD000000 		.4byte	0xbd
 11915 0ee3 02       		.uleb128 0x2
 11916 0ee4 91       		.byte	0x91
 11917 0ee5 68       		.sleb128 -24
 11918 0ee6 00       		.byte	0
 11919 0ee7 00       		.byte	0
 11920 0ee8 1A       		.uleb128 0x1a
 11921 0ee9 E9090000 		.4byte	.LASF208
 11922 0eed 01       		.byte	0x1
 11923 0eee BD03     		.2byte	0x3bd
 11924 0ef0 00000000 		.4byte	.LFB70
 11925 0ef4 B0010000 		.4byte	.LFE70-.LFB70
 11926 0ef8 01       		.uleb128 0x1
 11927 0ef9 9C       		.byte	0x9c
 11928 0efa 5C0F0000 		.4byte	0xf5c
 11929 0efe 20       		.uleb128 0x20
 11930 0eff 27080000 		.4byte	.LASF195
 11931 0f03 01       		.byte	0x1
 11932 0f04 BD03     		.2byte	0x3bd
 11933 0f06 81000000 		.4byte	0x81
 11934 0f0a 02       		.uleb128 0x2
 11935 0f0b 91       		.byte	0x91
 11936 0f0c 77       		.sleb128 -9
 11937 0f0d 20       		.uleb128 0x20
 11938 0f0e 8C060000 		.4byte	.LASF196
 11939 0f12 01       		.byte	0x1
 11940 0f13 BD03     		.2byte	0x3bd
 11941 0f15 4C0E0000 		.4byte	0xe4c
 11942 0f19 02       		.uleb128 0x2
 11943 0f1a 91       		.byte	0x91
 11944 0f1b 70       		.sleb128 -16
 11945 0f1c 20       		.uleb128 0x20
 11946 0f1d BA100000 		.4byte	.LASF197
 11947 0f21 01       		.byte	0x1
 11948 0f22 BD03     		.2byte	0x3bd
 11949 0f24 4C0E0000 		.4byte	0xe4c
 11950 0f28 02       		.uleb128 0x2
 11951 0f29 91       		.byte	0x91
 11952 0f2a 6C       		.sleb128 -20
 11953 0f2b 20       		.uleb128 0x20
 11954 0f2c 27040000 		.4byte	.LASF199
 11955 0f30 01       		.byte	0x1
 11956 0f31 BE03     		.2byte	0x3be
 11957 0f33 BD000000 		.4byte	0xbd
 11958 0f37 02       		.uleb128 0x2
 11959 0f38 91       		.byte	0x91
 11960 0f39 68       		.sleb128 -24
 11961 0f3a 20       		.uleb128 0x20
 11962 0f3b 31040000 		.4byte	.LASF200
 11963 0f3f 01       		.byte	0x1
 11964 0f40 BE03     		.2byte	0x3be
 11965 0f42 BD000000 		.4byte	0xbd
 11966 0f46 02       		.uleb128 0x2
 11967 0f47 91       		.byte	0x91
 11968 0f48 00       		.sleb128 0
 11969 0f49 1B       		.uleb128 0x1b
 11970 0f4a 390C0000 		.4byte	.LASF209
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 264


 11971 0f4e 01       		.byte	0x1
 11972 0f4f C103     		.2byte	0x3c1
 11973 0f51 81000000 		.4byte	0x81
 11974 0f55 05       		.uleb128 0x5
 11975 0f56 03       		.byte	0x3
 11976 0f57 8E000000 		.4byte	fsm_state.10530
 11977 0f5b 00       		.byte	0
 11978 0f5c 24       		.uleb128 0x24
 11979 0f5d D9050000 		.4byte	.LASF211
 11980 0f61 01       		.byte	0x1
 11981 0f62 F303     		.2byte	0x3f3
 11982 0f64 00000000 		.4byte	.LFB71
 11983 0f68 0C070000 		.4byte	.LFE71-.LFB71
 11984 0f6c 01       		.uleb128 0x1
 11985 0f6d 9C       		.byte	0x9c
 11986 0f6e 13110000 		.4byte	0x1113
 11987 0f72 1B       		.uleb128 0x1b
 11988 0f73 70010000 		.4byte	.LASF212
 11989 0f77 01       		.byte	0x1
 11990 0f78 F503     		.2byte	0x3f5
 11991 0f7a BD000000 		.4byte	0xbd
 11992 0f7e 02       		.uleb128 0x2
 11993 0f7f 91       		.byte	0x91
 11994 0f80 74       		.sleb128 -12
 11995 0f81 1B       		.uleb128 0x1b
 11996 0f82 BB0B0000 		.4byte	.LASF213
 11997 0f86 01       		.byte	0x1
 11998 0f87 F603     		.2byte	0x3f6
 11999 0f89 BD000000 		.4byte	0xbd
 12000 0f8d 03       		.uleb128 0x3
 12001 0f8e 91       		.byte	0x91
 12002 0f8f B07F     		.sleb128 -80
 12003 0f91 1B       		.uleb128 0x1b
 12004 0f92 960F0000 		.4byte	.LASF214
 12005 0f96 01       		.byte	0x1
 12006 0f97 F703     		.2byte	0x3f7
 12007 0f99 BD000000 		.4byte	0xbd
 12008 0f9d 03       		.uleb128 0x3
 12009 0f9e 91       		.byte	0x91
 12010 0f9f AC7F     		.sleb128 -84
 12011 0fa1 1B       		.uleb128 0x1b
 12012 0fa2 0E0B0000 		.4byte	.LASF215
 12013 0fa6 01       		.byte	0x1
 12014 0fa7 F803     		.2byte	0x3f8
 12015 0fa9 BD000000 		.4byte	0xbd
 12016 0fad 02       		.uleb128 0x2
 12017 0fae 91       		.byte	0x91
 12018 0faf 70       		.sleb128 -16
 12019 0fb0 1B       		.uleb128 0x1b
 12020 0fb1 FC0B0000 		.4byte	.LASF190
 12021 0fb5 01       		.byte	0x1
 12022 0fb6 FA03     		.2byte	0x3fa
 12023 0fb8 81000000 		.4byte	0x81
 12024 0fbc 02       		.uleb128 0x2
 12025 0fbd 91       		.byte	0x91
 12026 0fbe 6F       		.sleb128 -17
 12027 0fbf 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 265


 12028 0fc0 96030000 		.4byte	.LASF216
 12029 0fc4 01       		.byte	0x1
 12030 0fc5 FC03     		.2byte	0x3fc
 12031 0fc7 520E0000 		.4byte	0xe52
 12032 0fcb 02       		.uleb128 0x2
 12033 0fcc 91       		.byte	0x91
 12034 0fcd 68       		.sleb128 -24
 12035 0fce 1B       		.uleb128 0x1b
 12036 0fcf 0A030000 		.4byte	.LASF217
 12037 0fd3 01       		.byte	0x1
 12038 0fd4 FD03     		.2byte	0x3fd
 12039 0fd6 81000000 		.4byte	0x81
 12040 0fda 02       		.uleb128 0x2
 12041 0fdb 91       		.byte	0x91
 12042 0fdc 67       		.sleb128 -25
 12043 0fdd 1D       		.uleb128 0x1d
 12044 0fde 6B5F7000 		.ascii	"k_p\000"
 12045 0fe2 01       		.byte	0x1
 12046 0fe3 FF03     		.2byte	0x3ff
 12047 0fe5 BD000000 		.4byte	0xbd
 12048 0fe9 02       		.uleb128 0x2
 12049 0fea 91       		.byte	0x91
 12050 0feb 60       		.sleb128 -32
 12051 0fec 1D       		.uleb128 0x1d
 12052 0fed 6B5F6900 		.ascii	"k_i\000"
 12053 0ff1 01       		.byte	0x1
 12054 0ff2 0004     		.2byte	0x400
 12055 0ff4 BD000000 		.4byte	0xbd
 12056 0ff8 02       		.uleb128 0x2
 12057 0ff9 91       		.byte	0x91
 12058 0ffa 5C       		.sleb128 -36
 12059 0ffb 1D       		.uleb128 0x1d
 12060 0ffc 6B5F6400 		.ascii	"k_d\000"
 12061 1000 01       		.byte	0x1
 12062 1001 0104     		.2byte	0x401
 12063 1003 BD000000 		.4byte	0xbd
 12064 1007 02       		.uleb128 0x2
 12065 1008 91       		.byte	0x91
 12066 1009 58       		.sleb128 -40
 12067 100a 1B       		.uleb128 0x1b
 12068 100b C10C0000 		.4byte	.LASF72
 12069 100f 01       		.byte	0x1
 12070 1010 0304     		.2byte	0x403
 12071 1012 BD000000 		.4byte	0xbd
 12072 1016 02       		.uleb128 0x2
 12073 1017 91       		.byte	0x91
 12074 1018 54       		.sleb128 -44
 12075 1019 1B       		.uleb128 0x1b
 12076 101a 79050000 		.4byte	.LASF73
 12077 101e 01       		.byte	0x1
 12078 101f 0404     		.2byte	0x404
 12079 1021 BD000000 		.4byte	0xbd
 12080 1025 02       		.uleb128 0x2
 12081 1026 91       		.byte	0x91
 12082 1027 50       		.sleb128 -48
 12083 1028 1B       		.uleb128 0x1b
 12084 1029 61050000 		.4byte	.LASF74
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 266


 12085 102d 01       		.byte	0x1
 12086 102e 0504     		.2byte	0x405
 12087 1030 BD000000 		.4byte	0xbd
 12088 1034 02       		.uleb128 0x2
 12089 1035 91       		.byte	0x91
 12090 1036 4C       		.sleb128 -52
 12091 1037 1B       		.uleb128 0x1b
 12092 1038 6F0F0000 		.4byte	.LASF75
 12093 103c 01       		.byte	0x1
 12094 103d 0704     		.2byte	0x407
 12095 103f BD000000 		.4byte	0xbd
 12096 1043 02       		.uleb128 0x2
 12097 1044 91       		.byte	0x91
 12098 1045 48       		.sleb128 -56
 12099 1046 1B       		.uleb128 0x1b
 12100 1047 15060000 		.4byte	.LASF76
 12101 104b 01       		.byte	0x1
 12102 104c 0804     		.2byte	0x408
 12103 104e BD000000 		.4byte	0xbd
 12104 1052 02       		.uleb128 0x2
 12105 1053 91       		.byte	0x91
 12106 1054 44       		.sleb128 -60
 12107 1055 1B       		.uleb128 0x1b
 12108 1056 A20E0000 		.4byte	.LASF77
 12109 105a 01       		.byte	0x1
 12110 105b 0904     		.2byte	0x409
 12111 105d BD000000 		.4byte	0xbd
 12112 1061 02       		.uleb128 0x2
 12113 1062 91       		.byte	0x91
 12114 1063 40       		.sleb128 -64
 12115 1064 1B       		.uleb128 0x1b
 12116 1065 23060000 		.4byte	.LASF78
 12117 1069 01       		.byte	0x1
 12118 106a 0B04     		.2byte	0x40b
 12119 106c BD000000 		.4byte	0xbd
 12120 1070 03       		.uleb128 0x3
 12121 1071 91       		.byte	0x91
 12122 1072 BC7F     		.sleb128 -68
 12123 1074 1B       		.uleb128 0x1b
 12124 1075 5D070000 		.4byte	.LASF79
 12125 1079 01       		.byte	0x1
 12126 107a 0C04     		.2byte	0x40c
 12127 107c BD000000 		.4byte	0xbd
 12128 1080 03       		.uleb128 0x3
 12129 1081 91       		.byte	0x91
 12130 1082 B87F     		.sleb128 -72
 12131 1084 1B       		.uleb128 0x1b
 12132 1085 BB110000 		.4byte	.LASF80
 12133 1089 01       		.byte	0x1
 12134 108a 0D04     		.2byte	0x40d
 12135 108c BD000000 		.4byte	0xbd
 12136 1090 03       		.uleb128 0x3
 12137 1091 91       		.byte	0x91
 12138 1092 B47F     		.sleb128 -76
 12139 1094 1B       		.uleb128 0x1b
 12140 1095 F0050000 		.4byte	.LASF218
 12141 1099 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 267


 12142 109a 1104     		.2byte	0x411
 12143 109c BD000000 		.4byte	0xbd
 12144 10a0 05       		.uleb128 0x5
 12145 10a1 03       		.byte	0x3
 12146 10a2 90000000 		.4byte	pos_error_sum.10557
 12147 10a6 1B       		.uleb128 0x1b
 12148 10a7 6F040000 		.4byte	.LASF219
 12149 10ab 01       		.byte	0x1
 12150 10ac 1204     		.2byte	0x412
 12151 10ae BD000000 		.4byte	0xbd
 12152 10b2 05       		.uleb128 0x5
 12153 10b3 03       		.byte	0x3
 12154 10b4 9C000000 		.4byte	curr_error_sum.10558
 12155 10b8 1B       		.uleb128 0x1b
 12156 10b9 660B0000 		.4byte	.LASF220
 12157 10bd 01       		.byte	0x1
 12158 10be 1404     		.2byte	0x414
 12159 10c0 BD000000 		.4byte	0xbd
 12160 10c4 05       		.uleb128 0x5
 12161 10c5 03       		.byte	0x3
 12162 10c6 94000000 		.4byte	prev_pos_err.10559
 12163 10ca 1B       		.uleb128 0x1b
 12164 10cb A00C0000 		.4byte	.LASF221
 12165 10cf 01       		.byte	0x1
 12166 10d0 1504     		.2byte	0x415
 12167 10d2 BD000000 		.4byte	0xbd
 12168 10d6 05       		.uleb128 0x5
 12169 10d7 03       		.byte	0x3
 12170 10d8 A0000000 		.4byte	prev_curr_err.10560
 12171 10dc 1B       		.uleb128 0x1b
 12172 10dd 050F0000 		.4byte	.LASF222
 12173 10e1 01       		.byte	0x1
 12174 10e2 1604     		.2byte	0x416
 12175 10e4 BD000000 		.4byte	0xbd
 12176 10e8 05       		.uleb128 0x5
 12177 10e9 03       		.byte	0x3
 12178 10ea A4000000 		.4byte	prev_pwm.10561
 12179 10ee 1B       		.uleb128 0x1b
 12180 10ef 7F050000 		.4byte	.LASF223
 12181 10f3 01       		.byte	0x1
 12182 10f4 1804     		.2byte	0x418
 12183 10f6 81000000 		.4byte	0x81
 12184 10fa 05       		.uleb128 0x5
 12185 10fb 03       		.byte	0x3
 12186 10fc 98000000 		.4byte	motor_dir.10562
 12187 1100 1B       		.uleb128 0x1b
 12188 1101 48060000 		.4byte	.LASF224
 12189 1105 01       		.byte	0x1
 12190 1106 1904     		.2byte	0x419
 12191 1108 99000000 		.4byte	0x99
 12192 110c 05       		.uleb128 0x5
 12193 110d 03       		.byte	0x3
 12194 110e A8000000 		.4byte	position_counter.10563
 12195 1112 00       		.byte	0
 12196 1113 1A       		.uleb128 0x1a
 12197 1114 2B050000 		.4byte	.LASF225
 12198 1118 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 268


 12199 1119 2305     		.2byte	0x523
 12200 111b 00000000 		.4byte	.LFB72
 12201 111f 70090000 		.4byte	.LFE72-.LFB72
 12202 1123 01       		.uleb128 0x1
 12203 1124 9C       		.byte	0x9c
 12204 1125 CC120000 		.4byte	0x12cc
 12205 1129 25       		.uleb128 0x25
 12206 112a 69647800 		.ascii	"idx\000"
 12207 112e 01       		.byte	0x1
 12208 112f 2305     		.2byte	0x523
 12209 1131 81000000 		.4byte	0x81
 12210 1135 03       		.uleb128 0x3
 12211 1136 91       		.byte	0x91
 12212 1137 A77F     		.sleb128 -89
 12213 1139 1B       		.uleb128 0x1b
 12214 113a 70010000 		.4byte	.LASF212
 12215 113e 01       		.byte	0x1
 12216 113f 2505     		.2byte	0x525
 12217 1141 BD000000 		.4byte	0xbd
 12218 1145 02       		.uleb128 0x2
 12219 1146 91       		.byte	0x91
 12220 1147 6C       		.sleb128 -20
 12221 1148 1B       		.uleb128 0x1b
 12222 1149 BB0B0000 		.4byte	.LASF213
 12223 114d 01       		.byte	0x1
 12224 114e 2605     		.2byte	0x526
 12225 1150 BD000000 		.4byte	0xbd
 12226 1154 03       		.uleb128 0x3
 12227 1155 91       		.byte	0x91
 12228 1156 AC7F     		.sleb128 -84
 12229 1158 1B       		.uleb128 0x1b
 12230 1159 960F0000 		.4byte	.LASF214
 12231 115d 01       		.byte	0x1
 12232 115e 2705     		.2byte	0x527
 12233 1160 BD000000 		.4byte	0xbd
 12234 1164 03       		.uleb128 0x3
 12235 1165 91       		.byte	0x91
 12236 1166 A87F     		.sleb128 -88
 12237 1168 1B       		.uleb128 0x1b
 12238 1169 0E0B0000 		.4byte	.LASF215
 12239 116d 01       		.byte	0x1
 12240 116e 2805     		.2byte	0x528
 12241 1170 BD000000 		.4byte	0xbd
 12242 1174 02       		.uleb128 0x2
 12243 1175 91       		.byte	0x91
 12244 1176 68       		.sleb128 -24
 12245 1177 1D       		.uleb128 0x1d
 12246 1178 4D4F5400 		.ascii	"MOT\000"
 12247 117c 01       		.byte	0x1
 12248 117d 2A05     		.2byte	0x52a
 12249 117f 520E0000 		.4byte	0xe52
 12250 1183 02       		.uleb128 0x2
 12251 1184 91       		.byte	0x91
 12252 1185 64       		.sleb128 -28
 12253 1186 1B       		.uleb128 0x1b
 12254 1187 85100000 		.4byte	.LASF201
 12255 118b 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 269


 12256 118c 2B05     		.2byte	0x52b
 12257 118e 81000000 		.4byte	0x81
 12258 1192 02       		.uleb128 0x2
 12259 1193 91       		.byte	0x91
 12260 1194 63       		.sleb128 -29
 12261 1195 1D       		.uleb128 0x1d
 12262 1196 6B5F7000 		.ascii	"k_p\000"
 12263 119a 01       		.byte	0x1
 12264 119b 2D05     		.2byte	0x52d
 12265 119d BD000000 		.4byte	0xbd
 12266 11a1 02       		.uleb128 0x2
 12267 11a2 91       		.byte	0x91
 12268 11a3 5C       		.sleb128 -36
 12269 11a4 1D       		.uleb128 0x1d
 12270 11a5 6B5F6900 		.ascii	"k_i\000"
 12271 11a9 01       		.byte	0x1
 12272 11aa 2E05     		.2byte	0x52e
 12273 11ac BD000000 		.4byte	0xbd
 12274 11b0 02       		.uleb128 0x2
 12275 11b1 91       		.byte	0x91
 12276 11b2 58       		.sleb128 -40
 12277 11b3 1D       		.uleb128 0x1d
 12278 11b4 6B5F6400 		.ascii	"k_d\000"
 12279 11b8 01       		.byte	0x1
 12280 11b9 2F05     		.2byte	0x52f
 12281 11bb BD000000 		.4byte	0xbd
 12282 11bf 02       		.uleb128 0x2
 12283 11c0 91       		.byte	0x91
 12284 11c1 54       		.sleb128 -44
 12285 11c2 1B       		.uleb128 0x1b
 12286 11c3 C10C0000 		.4byte	.LASF72
 12287 11c7 01       		.byte	0x1
 12288 11c8 3105     		.2byte	0x531
 12289 11ca BD000000 		.4byte	0xbd
 12290 11ce 02       		.uleb128 0x2
 12291 11cf 91       		.byte	0x91
 12292 11d0 50       		.sleb128 -48
 12293 11d1 1B       		.uleb128 0x1b
 12294 11d2 79050000 		.4byte	.LASF73
 12295 11d6 01       		.byte	0x1
 12296 11d7 3205     		.2byte	0x532
 12297 11d9 BD000000 		.4byte	0xbd
 12298 11dd 02       		.uleb128 0x2
 12299 11de 91       		.byte	0x91
 12300 11df 4C       		.sleb128 -52
 12301 11e0 1B       		.uleb128 0x1b
 12302 11e1 61050000 		.4byte	.LASF74
 12303 11e5 01       		.byte	0x1
 12304 11e6 3305     		.2byte	0x533
 12305 11e8 BD000000 		.4byte	0xbd
 12306 11ec 02       		.uleb128 0x2
 12307 11ed 91       		.byte	0x91
 12308 11ee 48       		.sleb128 -56
 12309 11ef 1B       		.uleb128 0x1b
 12310 11f0 6F0F0000 		.4byte	.LASF75
 12311 11f4 01       		.byte	0x1
 12312 11f5 3505     		.2byte	0x535
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 270


 12313 11f7 BD000000 		.4byte	0xbd
 12314 11fb 02       		.uleb128 0x2
 12315 11fc 91       		.byte	0x91
 12316 11fd 44       		.sleb128 -60
 12317 11fe 1B       		.uleb128 0x1b
 12318 11ff 15060000 		.4byte	.LASF76
 12319 1203 01       		.byte	0x1
 12320 1204 3605     		.2byte	0x536
 12321 1206 BD000000 		.4byte	0xbd
 12322 120a 02       		.uleb128 0x2
 12323 120b 91       		.byte	0x91
 12324 120c 40       		.sleb128 -64
 12325 120d 1B       		.uleb128 0x1b
 12326 120e A20E0000 		.4byte	.LASF77
 12327 1212 01       		.byte	0x1
 12328 1213 3705     		.2byte	0x537
 12329 1215 BD000000 		.4byte	0xbd
 12330 1219 03       		.uleb128 0x3
 12331 121a 91       		.byte	0x91
 12332 121b BC7F     		.sleb128 -68
 12333 121d 1B       		.uleb128 0x1b
 12334 121e 23060000 		.4byte	.LASF78
 12335 1222 01       		.byte	0x1
 12336 1223 3905     		.2byte	0x539
 12337 1225 BD000000 		.4byte	0xbd
 12338 1229 03       		.uleb128 0x3
 12339 122a 91       		.byte	0x91
 12340 122b B87F     		.sleb128 -72
 12341 122d 1B       		.uleb128 0x1b
 12342 122e 5D070000 		.4byte	.LASF79
 12343 1232 01       		.byte	0x1
 12344 1233 3A05     		.2byte	0x53a
 12345 1235 BD000000 		.4byte	0xbd
 12346 1239 03       		.uleb128 0x3
 12347 123a 91       		.byte	0x91
 12348 123b B47F     		.sleb128 -76
 12349 123d 1B       		.uleb128 0x1b
 12350 123e BB110000 		.4byte	.LASF80
 12351 1242 01       		.byte	0x1
 12352 1243 3B05     		.2byte	0x53b
 12353 1245 BD000000 		.4byte	0xbd
 12354 1249 03       		.uleb128 0x3
 12355 124a 91       		.byte	0x91
 12356 124b B07F     		.sleb128 -80
 12357 124d 1B       		.uleb128 0x1b
 12358 124e F0050000 		.4byte	.LASF218
 12359 1252 01       		.byte	0x1
 12360 1253 3F05     		.2byte	0x53f
 12361 1255 94020000 		.4byte	0x294
 12362 1259 05       		.uleb128 0x5
 12363 125a 03       		.byte	0x3
 12364 125b AC000000 		.4byte	pos_error_sum.10590
 12365 125f 1B       		.uleb128 0x1b
 12366 1260 6F040000 		.4byte	.LASF219
 12367 1264 01       		.byte	0x1
 12368 1265 4005     		.2byte	0x540
 12369 1267 94020000 		.4byte	0x294
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 271


 12370 126b 05       		.uleb128 0x5
 12371 126c 03       		.byte	0x3
 12372 126d C0000000 		.4byte	curr_error_sum.10591
 12373 1271 1B       		.uleb128 0x1b
 12374 1272 660B0000 		.4byte	.LASF220
 12375 1276 01       		.byte	0x1
 12376 1277 4205     		.2byte	0x542
 12377 1279 94020000 		.4byte	0x294
 12378 127d 05       		.uleb128 0x5
 12379 127e 03       		.byte	0x3
 12380 127f B4000000 		.4byte	prev_pos_err.10592
 12381 1283 1B       		.uleb128 0x1b
 12382 1284 A00C0000 		.4byte	.LASF221
 12383 1288 01       		.byte	0x1
 12384 1289 4305     		.2byte	0x543
 12385 128b 94020000 		.4byte	0x294
 12386 128f 05       		.uleb128 0x5
 12387 1290 03       		.byte	0x3
 12388 1291 C8000000 		.4byte	prev_curr_err.10593
 12389 1295 1B       		.uleb128 0x1b
 12390 1296 050F0000 		.4byte	.LASF222
 12391 129a 01       		.byte	0x1
 12392 129b 4405     		.2byte	0x544
 12393 129d 94020000 		.4byte	0x294
 12394 12a1 05       		.uleb128 0x5
 12395 12a2 03       		.byte	0x3
 12396 12a3 D0000000 		.4byte	prev_pwm.10594
 12397 12a7 1B       		.uleb128 0x1b
 12398 12a8 7F050000 		.4byte	.LASF223
 12399 12ac 01       		.byte	0x1
 12400 12ad 4605     		.2byte	0x546
 12401 12af EA060000 		.4byte	0x6ea
 12402 12b3 05       		.uleb128 0x5
 12403 12b4 03       		.byte	0x3
 12404 12b5 BC000000 		.4byte	motor_dir.10595
 12405 12b9 1B       		.uleb128 0x1b
 12406 12ba 48060000 		.4byte	.LASF224
 12407 12be 01       		.byte	0x1
 12408 12bf 4705     		.2byte	0x547
 12409 12c1 6F030000 		.4byte	0x36f
 12410 12c5 05       		.uleb128 0x5
 12411 12c6 03       		.byte	0x3
 12412 12c7 D8000000 		.4byte	position_counter.10596
 12413 12cb 00       		.byte	0
 12414 12cc 1A       		.uleb128 0x1a
 12415 12cd A5030000 		.4byte	.LASF226
 12416 12d1 01       		.byte	0x1
 12417 12d2 A006     		.2byte	0x6a0
 12418 12d4 00000000 		.4byte	.LFB73
 12419 12d8 18080000 		.4byte	.LFE73-.LFB73
 12420 12dc 01       		.uleb128 0x1
 12421 12dd 9C       		.byte	0x9c
 12422 12de 54140000 		.4byte	0x1454
 12423 12e2 20       		.uleb128 0x20
 12424 12e3 EB000000 		.4byte	.LASF227
 12425 12e7 01       		.byte	0x1
 12426 12e8 A006     		.2byte	0x6a0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 272


 12427 12ea 81000000 		.4byte	0x81
 12428 12ee 03       		.uleb128 0x3
 12429 12ef 91       		.byte	0x91
 12430 12f0 BF7F     		.sleb128 -65
 12431 12f2 20       		.uleb128 0x20
 12432 12f3 FA0A0000 		.4byte	.LASF228
 12433 12f7 01       		.byte	0x1
 12434 12f8 A006     		.2byte	0x6a0
 12435 12fa 81000000 		.4byte	0x81
 12436 12fe 03       		.uleb128 0x3
 12437 12ff 91       		.byte	0x91
 12438 1300 BE7F     		.sleb128 -66
 12439 1302 1B       		.uleb128 0x1b
 12440 1303 18070000 		.4byte	.LASF229
 12441 1307 01       		.byte	0x1
 12442 1308 A206     		.2byte	0x6a2
 12443 130a 81000000 		.4byte	0x81
 12444 130e 02       		.uleb128 0x2
 12445 130f 91       		.byte	0x91
 12446 1310 67       		.sleb128 -25
 12447 1311 1D       		.uleb128 0x1d
 12448 1312 6A6A00   		.ascii	"jj\000"
 12449 1315 01       		.byte	0x1
 12450 1316 A506     		.2byte	0x6a5
 12451 1318 81000000 		.4byte	0x81
 12452 131c 02       		.uleb128 0x2
 12453 131d 91       		.byte	0x91
 12454 131e 66       		.sleb128 -26
 12455 131f 1B       		.uleb128 0x1b
 12456 1320 7E030000 		.4byte	.LASF230
 12457 1324 01       		.byte	0x1
 12458 1325 A706     		.2byte	0x6a7
 12459 1327 54140000 		.4byte	0x1454
 12460 132b 02       		.uleb128 0x2
 12461 132c 91       		.byte	0x91
 12462 132d 40       		.sleb128 -64
 12463 132e 1B       		.uleb128 0x1b
 12464 132f F60F0000 		.4byte	.LASF231
 12465 1333 01       		.byte	0x1
 12466 1334 A806     		.2byte	0x6a8
 12467 1336 B1000000 		.4byte	0xb1
 12468 133a 02       		.uleb128 0x2
 12469 133b 91       		.byte	0x91
 12470 133c 64       		.sleb128 -28
 12471 133d 1B       		.uleb128 0x1b
 12472 133e 8B0C0000 		.4byte	.LASF232
 12473 1342 01       		.byte	0x1
 12474 1343 A906     		.2byte	0x6a9
 12475 1345 BD000000 		.4byte	0xbd
 12476 1349 02       		.uleb128 0x2
 12477 134a 91       		.byte	0x91
 12478 134b 54       		.sleb128 -44
 12479 134c 1B       		.uleb128 0x1b
 12480 134d A90E0000 		.4byte	.LASF233
 12481 1351 01       		.byte	0x1
 12482 1352 AA06     		.2byte	0x6aa
 12483 1354 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 273


 12484 1358 02       		.uleb128 0x2
 12485 1359 91       		.byte	0x91
 12486 135a 60       		.sleb128 -32
 12487 135b 1B       		.uleb128 0x1b
 12488 135c B8040000 		.4byte	.LASF234
 12489 1360 01       		.byte	0x1
 12490 1361 AB06     		.2byte	0x6ab
 12491 1363 BD000000 		.4byte	0xbd
 12492 1367 02       		.uleb128 0x2
 12493 1368 91       		.byte	0x91
 12494 1369 4C       		.sleb128 -52
 12495 136a 1B       		.uleb128 0x1b
 12496 136b 840E0000 		.4byte	.LASF235
 12497 136f 01       		.byte	0x1
 12498 1370 AC06     		.2byte	0x6ac
 12499 1372 BD000000 		.4byte	0xbd
 12500 1376 02       		.uleb128 0x2
 12501 1377 91       		.byte	0x91
 12502 1378 50       		.sleb128 -48
 12503 1379 1B       		.uleb128 0x1b
 12504 137a 730B0000 		.4byte	.LASF236
 12505 137e 01       		.byte	0x1
 12506 137f AD06     		.2byte	0x6ad
 12507 1381 A5000000 		.4byte	0xa5
 12508 1385 02       		.uleb128 0x2
 12509 1386 91       		.byte	0x91
 12510 1387 5F       		.sleb128 -33
 12511 1388 1B       		.uleb128 0x1b
 12512 1389 060C0000 		.4byte	.LASF237
 12513 138d 01       		.byte	0x1
 12514 138e AF06     		.2byte	0x6af
 12515 1390 64140000 		.4byte	0x1464
 12516 1394 05       		.uleb128 0x5
 12517 1395 03       		.byte	0x3
 12518 1396 E0000000 		.4byte	last_value_encoder.10619
 12519 139a 1B       		.uleb128 0x1b
 12520 139b DA060000 		.4byte	.LASF238
 12521 139f 01       		.byte	0x1
 12522 13a0 B006     		.2byte	0x6b0
 12523 13a2 64140000 		.4byte	0x1464
 12524 13a6 05       		.uleb128 0x5
 12525 13a7 03       		.byte	0x3
 12526 13a8 F8000000 		.4byte	comp_value_encoder.10620
 12527 13ac 1B       		.uleb128 0x1b
 12528 13ad B9030000 		.4byte	.LASF239
 12529 13b1 01       		.byte	0x1
 12530 13b2 B106     		.2byte	0x6b1
 12531 13b4 7A140000 		.4byte	0x147a
 12532 13b8 05       		.uleb128 0x5
 12533 13b9 03       		.byte	0x3
 12534 13ba 10010000 		.4byte	error.10621
 12535 13be 1B       		.uleb128 0x1b
 12536 13bf 620E0000 		.4byte	.LASF240
 12537 13c3 01       		.byte	0x1
 12538 13c4 B306     		.2byte	0x6b3
 12539 13c6 EA060000 		.4byte	0x6ea
 12540 13ca 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 274


 12541 13cb 03       		.byte	0x3
 12542 13cc 04000000 		.4byte	only_first_time.10622
 12543 13d0 1B       		.uleb128 0x1b
 12544 13d1 39030000 		.4byte	.LASF241
 12545 13d5 01       		.byte	0x1
 12546 13d6 B406     		.2byte	0x6b4
 12547 13d8 EA060000 		.4byte	0x6ea
 12548 13dc 05       		.uleb128 0x5
 12549 13dd 03       		.byte	0x3
 12550 13de 64010000 		.4byte	safe_startup_motor_activation.10623
 12551 13e2 1B       		.uleb128 0x1b
 12552 13e3 CB000000 		.4byte	.LASF242
 12553 13e7 01       		.byte	0x1
 12554 13e8 B506     		.2byte	0x6b5
 12555 13ea EA060000 		.4byte	0x6ea
 12556 13ee 05       		.uleb128 0x5
 12557 13ef 03       		.byte	0x3
 12558 13f0 60010000 		.4byte	one_time_execute.10624
 12559 13f4 1B       		.uleb128 0x1b
 12560 13f5 2A0A0000 		.4byte	.LASF243
 12561 13f9 01       		.byte	0x1
 12562 13fa B606     		.2byte	0x6b6
 12563 13fc 6F030000 		.4byte	0x36f
 12564 1400 05       		.uleb128 0x5
 12565 1401 03       		.byte	0x3
 12566 1402 68010000 		.4byte	count_startup_motor.10625
 12567 1406 1B       		.uleb128 0x1b
 12568 1407 4B090000 		.4byte	.LASF244
 12569 140b 01       		.byte	0x1
 12570 140c B806     		.2byte	0x6b8
 12571 140e 64140000 		.4byte	0x1464
 12572 1412 05       		.uleb128 0x5
 12573 1413 03       		.byte	0x3
 12574 1414 18010000 		.4byte	v_value.10626
 12575 1418 1B       		.uleb128 0x1b
 12576 1419 B2110000 		.4byte	.LASF245
 12577 141d 01       		.byte	0x1
 12578 141e B906     		.2byte	0x6b9
 12579 1420 64140000 		.4byte	0x1464
 12580 1424 05       		.uleb128 0x5
 12581 1425 03       		.byte	0x3
 12582 1426 30010000 		.4byte	vv_value.10627
 12583 142a 1B       		.uleb128 0x1b
 12584 142b BE010000 		.4byte	.LASF246
 12585 142f 01       		.byte	0x1
 12586 1430 BA06     		.2byte	0x6ba
 12587 1432 64140000 		.4byte	0x1464
 12588 1436 05       		.uleb128 0x5
 12589 1437 03       		.byte	0x3
 12590 1438 48010000 		.4byte	vvv_value.10628
 12591 143c 1E       		.uleb128 0x1e
 12592 143d 98000000 		.4byte	.LBB10
 12593 1441 6A000000 		.4byte	.LBE10-.LBB10
 12594 1445 1D       		.uleb128 0x1d
 12595 1446 6A00     		.ascii	"j\000"
 12596 1448 01       		.byte	0x1
 12597 1449 CA06     		.2byte	0x6ca
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 275


 12598 144b 68000000 		.4byte	0x68
 12599 144f 02       		.uleb128 0x2
 12600 1450 91       		.byte	0x91
 12601 1451 58       		.sleb128 -40
 12602 1452 00       		.byte	0
 12603 1453 00       		.byte	0
 12604 1454 07       		.uleb128 0x7
 12605 1455 99000000 		.4byte	0x99
 12606 1459 64140000 		.4byte	0x1464
 12607 145d 08       		.uleb128 0x8
 12608 145e 0E010000 		.4byte	0x10e
 12609 1462 02       		.byte	0x2
 12610 1463 00       		.byte	0
 12611 1464 07       		.uleb128 0x7
 12612 1465 BD000000 		.4byte	0xbd
 12613 1469 7A140000 		.4byte	0x147a
 12614 146d 08       		.uleb128 0x8
 12615 146e 0E010000 		.4byte	0x10e
 12616 1472 01       		.byte	0x1
 12617 1473 08       		.uleb128 0x8
 12618 1474 0E010000 		.4byte	0x10e
 12619 1478 02       		.byte	0x2
 12620 1479 00       		.byte	0
 12621 147a 07       		.uleb128 0x7
 12622 147b 81000000 		.4byte	0x81
 12623 147f 90140000 		.4byte	0x1490
 12624 1483 08       		.uleb128 0x8
 12625 1484 0E010000 		.4byte	0x10e
 12626 1488 01       		.byte	0x1
 12627 1489 08       		.uleb128 0x8
 12628 148a 0E010000 		.4byte	0x10e
 12629 148e 02       		.byte	0x2
 12630 148f 00       		.byte	0
 12631 1490 24       		.uleb128 0x24
 12632 1491 5F0D0000 		.4byte	.LASF247
 12633 1495 01       		.byte	0x1
 12634 1496 7D07     		.2byte	0x77d
 12635 1498 00000000 		.4byte	.LFB74
 12636 149c 38120000 		.4byte	.LFE74-.LFB74
 12637 14a0 01       		.uleb128 0x1
 12638 14a1 9C       		.byte	0x9c
 12639 14a2 6A150000 		.4byte	0x156a
 12640 14a6 1B       		.uleb128 0x1b
 12641 14a7 FF0C0000 		.4byte	.LASF248
 12642 14ab 01       		.byte	0x1
 12643 14ac 9107     		.2byte	0x791
 12644 14ae BD000000 		.4byte	0xbd
 12645 14b2 02       		.uleb128 0x2
 12646 14b3 91       		.byte	0x91
 12647 14b4 64       		.sleb128 -28
 12648 14b5 1B       		.uleb128 0x1b
 12649 14b6 460E0000 		.4byte	.LASF249
 12650 14ba 01       		.byte	0x1
 12651 14bb 9307     		.2byte	0x793
 12652 14bd 8D000000 		.4byte	0x8d
 12653 14c1 05       		.uleb128 0x5
 12654 14c2 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 276


 12655 14c3 78010000 		.4byte	emg_counter_1.10645
 12656 14c7 1B       		.uleb128 0x1b
 12657 14c8 540E0000 		.4byte	.LASF250
 12658 14cc 01       		.byte	0x1
 12659 14cd 9407     		.2byte	0x794
 12660 14cf 8D000000 		.4byte	0x8d
 12661 14d3 05       		.uleb128 0x5
 12662 14d4 03       		.byte	0x3
 12663 14d5 7A010000 		.4byte	emg_counter_2.10646
 12664 14d9 1B       		.uleb128 0x1b
 12665 14da 82020000 		.4byte	.LASF251
 12666 14de 01       		.byte	0x1
 12667 14df 9507     		.2byte	0x795
 12668 14e1 8D000000 		.4byte	0x8d
 12669 14e5 05       		.uleb128 0x5
 12670 14e6 03       		.byte	0x3
 12671 14e7 80010000 		.4byte	UD_counter.10647
 12672 14eb 1B       		.uleb128 0x1b
 12673 14ec D5030000 		.4byte	.LASF252
 12674 14f0 01       		.byte	0x1
 12675 14f1 9607     		.2byte	0x796
 12676 14f3 8D000000 		.4byte	0x8d
 12677 14f7 05       		.uleb128 0x5
 12678 14f8 03       		.byte	0x3
 12679 14f9 88010000 		.4byte	LR_counter.10648
 12680 14fd 1B       		.uleb128 0x1b
 12681 14fe EC0A0000 		.4byte	.LASF253
 12682 1502 01       		.byte	0x1
 12683 1503 9707     		.2byte	0x797
 12684 1505 BD000000 		.4byte	0xbd
 12685 1509 05       		.uleb128 0x5
 12686 150a 03       		.byte	0x3
 12687 150b 7C010000 		.4byte	UD_mean_value.10649
 12688 150f 1B       		.uleb128 0x1b
 12689 1510 0B110000 		.4byte	.LASF254
 12690 1514 01       		.byte	0x1
 12691 1515 9807     		.2byte	0x798
 12692 1517 BD000000 		.4byte	0xbd
 12693 151b 05       		.uleb128 0x5
 12694 151c 03       		.byte	0x3
 12695 151d 84010000 		.4byte	LR_mean_value.10650
 12696 1521 1B       		.uleb128 0x1b
 12697 1522 C1020000 		.4byte	.LASF255
 12698 1526 01       		.byte	0x1
 12699 1527 9907     		.2byte	0x799
 12700 1529 81000000 		.4byte	0x81
 12701 152d 05       		.uleb128 0x5
 12702 152e 03       		.byte	0x3
 12703 152f 06000000 		.4byte	first_tension_valid.10651
 12704 1533 1B       		.uleb128 0x1b
 12705 1534 5B0A0000 		.4byte	.LASF256
 12706 1538 01       		.byte	0x1
 12707 1539 9B07     		.2byte	0x79b
 12708 153b 8D000000 		.4byte	0x8d
 12709 153f 05       		.uleb128 0x5
 12710 1540 03       		.byte	0x3
 12711 1541 70010000 		.4byte	count.10652
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 277


 12712 1545 1B       		.uleb128 0x1b
 12713 1546 AE010000 		.4byte	.LASF257
 12714 154a 01       		.byte	0x1
 12715 154b 9C07     		.2byte	0x79c
 12716 154d 99000000 		.4byte	0x99
 12717 1551 05       		.uleb128 0x5
 12718 1552 03       		.byte	0x3
 12719 1553 74010000 		.4byte	v_count.10653
 12720 1557 1D       		.uleb128 0x1d
 12721 1558 69647800 		.ascii	"idx\000"
 12722 155c 01       		.byte	0x1
 12723 155d 9D07     		.2byte	0x79d
 12724 155f 81000000 		.4byte	0x81
 12725 1563 05       		.uleb128 0x5
 12726 1564 03       		.byte	0x3
 12727 1565 72010000 		.4byte	idx.10654
 12728 1569 00       		.byte	0
 12729 156a 26       		.uleb128 0x26
 12730 156b 2A0D0000 		.4byte	.LASF258
 12731 156f 01       		.byte	0x1
 12732 1570 F709     		.2byte	0x9f7
 12733 1572 00000000 		.4byte	.LFB75
 12734 1576 0C010000 		.4byte	.LFE75-.LFB75
 12735 157a 01       		.uleb128 0x1
 12736 157b 9C       		.byte	0x9c
 12737 157c B1150000 		.4byte	0x15b1
 12738 1580 1E       		.uleb128 0x1e
 12739 1581 06000000 		.4byte	.LBB11
 12740 1585 E6000000 		.4byte	.LBE11-.LBB11
 12741 1589 1D       		.uleb128 0x1d
 12742 158a 6900     		.ascii	"i\000"
 12743 158c 01       		.byte	0x1
 12744 158d F909     		.2byte	0x9f9
 12745 158f 81000000 		.4byte	0x81
 12746 1593 02       		.uleb128 0x2
 12747 1594 91       		.byte	0x91
 12748 1595 77       		.sleb128 -9
 12749 1596 1E       		.uleb128 0x1e
 12750 1597 26000000 		.4byte	.LBB12
 12751 159b BA000000 		.4byte	.LBE12-.LBB12
 12752 159f 1B       		.uleb128 0x1b
 12753 15a0 61080000 		.4byte	.LASF40
 12754 15a4 01       		.byte	0x1
 12755 15a5 FB09     		.2byte	0x9fb
 12756 15a7 BD000000 		.4byte	0xbd
 12757 15ab 02       		.uleb128 0x2
 12758 15ac 91       		.byte	0x91
 12759 15ad 70       		.sleb128 -16
 12760 15ae 00       		.byte	0
 12761 15af 00       		.byte	0
 12762 15b0 00       		.byte	0
 12763 15b1 22       		.uleb128 0x22
 12764 15b2 F0030000 		.4byte	.LASF259
 12765 15b6 01       		.byte	0x1
 12766 15b7 190A     		.2byte	0xa19
 12767 15b9 00000000 		.4byte	.LFB76
 12768 15bd A8000000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 278


 12769 15c1 01       		.uleb128 0x1
 12770 15c2 9C       		.byte	0x9c
 12771 15c3 04160000 		.4byte	0x1604
 12772 15c7 20       		.uleb128 0x20
 12773 15c8 7C0B0000 		.4byte	.LASF260
 12774 15cc 01       		.byte	0x1
 12775 15cd 190A     		.2byte	0xa19
 12776 15cf 81000000 		.4byte	0x81
 12777 15d3 02       		.uleb128 0x2
 12778 15d4 91       		.byte	0x91
 12779 15d5 6F       		.sleb128 -17
 12780 15d6 1B       		.uleb128 0x1b
 12781 15d7 18070000 		.4byte	.LASF229
 12782 15db 01       		.byte	0x1
 12783 15dc 1B0A     		.2byte	0xa1b
 12784 15de 81000000 		.4byte	0x81
 12785 15e2 02       		.uleb128 0x2
 12786 15e3 91       		.byte	0x91
 12787 15e4 73       		.sleb128 -13
 12788 15e5 1B       		.uleb128 0x1b
 12789 15e6 F00B0000 		.4byte	.LASF261
 12790 15ea 01       		.byte	0x1
 12791 15eb 1C0A     		.2byte	0xa1c
 12792 15ed 8D000000 		.4byte	0x8d
 12793 15f1 02       		.uleb128 0x2
 12794 15f2 91       		.byte	0x91
 12795 15f3 76       		.sleb128 -10
 12796 15f4 1B       		.uleb128 0x1b
 12797 15f5 0B080000 		.4byte	.LASF262
 12798 15f9 01       		.byte	0x1
 12799 15fa 1D0A     		.2byte	0xa1d
 12800 15fc 8D000000 		.4byte	0x8d
 12801 1600 02       		.uleb128 0x2
 12802 1601 91       		.byte	0x91
 12803 1602 74       		.sleb128 -12
 12804 1603 00       		.byte	0
 12805 1604 24       		.uleb128 0x24
 12806 1605 88080000 		.4byte	.LASF263
 12807 1609 01       		.byte	0x1
 12808 160a 310A     		.2byte	0xa31
 12809 160c 00000000 		.4byte	.LFB77
 12810 1610 20040000 		.4byte	.LFE77-.LFB77
 12811 1614 01       		.uleb128 0x1
 12812 1615 9C       		.byte	0x9c
 12813 1616 30170000 		.4byte	0x1730
 12814 161a 1B       		.uleb128 0x1b
 12815 161b 59000000 		.4byte	.LASF264
 12816 161f 01       		.byte	0x1
 12817 1620 320A     		.2byte	0xa32
 12818 1622 81000000 		.4byte	0x81
 12819 1626 05       		.uleb128 0x5
 12820 1627 03       		.byte	0x3
 12821 1628 8A010000 		.4byte	pos_cycle_status.10725
 12822 162c 1B       		.uleb128 0x1b
 12823 162d 910D0000 		.4byte	.LASF265
 12824 1631 01       		.byte	0x1
 12825 1632 330A     		.2byte	0xa33
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 279


 12826 1634 EA060000 		.4byte	0x6ea
 12827 1638 05       		.uleb128 0x5
 12828 1639 03       		.byte	0x3
 12829 163a 94010000 		.4byte	emg_cycle_status.10726
 12830 163e 1B       		.uleb128 0x1b
 12831 163f B70F0000 		.4byte	.LASF266
 12832 1643 01       		.byte	0x1
 12833 1644 340A     		.2byte	0xa34
 12834 1646 81000000 		.4byte	0x81
 12835 164a 05       		.uleb128 0x5
 12836 164b 03       		.byte	0x3
 12837 164c 96010000 		.4byte	rest_cycle_status.10727
 12838 1650 1B       		.uleb128 0x1b
 12839 1651 22030000 		.4byte	.LASF267
 12840 1655 01       		.byte	0x1
 12841 1656 350A     		.2byte	0xa35
 12842 1658 BD000000 		.4byte	0xbd
 12843 165c 05       		.uleb128 0x5
 12844 165d 03       		.byte	0x3
 12845 165e 08000000 		.4byte	bin_threshold.10728
 12846 1662 1B       		.uleb128 0x1b
 12847 1663 09020000 		.4byte	.LASF268
 12848 1667 01       		.byte	0x1
 12849 1668 360A     		.2byte	0xa36
 12850 166a BD000000 		.4byte	0xbd
 12851 166e 05       		.uleb128 0x5
 12852 166f 03       		.byte	0x3
 12853 1670 8C010000 		.4byte	thr_pos.10729
 12854 1674 1B       		.uleb128 0x1b
 12855 1675 870A0000 		.4byte	.LASF269
 12856 1679 01       		.byte	0x1
 12857 167a 370A     		.2byte	0xa37
 12858 167c BD000000 		.4byte	0xbd
 12859 1680 05       		.uleb128 0x5
 12860 1681 03       		.byte	0x3
 12861 1682 90010000 		.4byte	max_pos.10730
 12862 1686 1D       		.uleb128 0x1d
 12863 1687 6900     		.ascii	"i\000"
 12864 1689 01       		.byte	0x1
 12865 168a 380A     		.2byte	0xa38
 12866 168c 81000000 		.4byte	0x81
 12867 1690 02       		.uleb128 0x2
 12868 1691 91       		.byte	0x91
 12869 1692 77       		.sleb128 -9
 12870 1693 1B       		.uleb128 0x1b
 12871 1694 89050000 		.4byte	.LASF270
 12872 1698 01       		.byte	0x1
 12873 1699 380A     		.2byte	0xa38
 12874 169b 81000000 		.4byte	0x81
 12875 169f 02       		.uleb128 0x2
 12876 16a0 91       		.byte	0x91
 12877 16a1 63       		.sleb128 -29
 12878 16a2 1B       		.uleb128 0x1b
 12879 16a3 3B010000 		.4byte	.LASF271
 12880 16a7 01       		.byte	0x1
 12881 16a8 380A     		.2byte	0xa38
 12882 16aa 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 280


 12883 16ae 02       		.uleb128 0x2
 12884 16af 91       		.byte	0x91
 12885 16b0 62       		.sleb128 -30
 12886 16b1 1B       		.uleb128 0x1b
 12887 16b2 F30C0000 		.4byte	.LASF272
 12888 16b6 01       		.byte	0x1
 12889 16b7 380A     		.2byte	0xa38
 12890 16b9 81000000 		.4byte	0x81
 12891 16bd 02       		.uleb128 0x2
 12892 16be 91       		.byte	0x91
 12893 16bf 61       		.sleb128 -31
 12894 16c0 1B       		.uleb128 0x1b
 12895 16c1 F90C0000 		.4byte	.LASF273
 12896 16c5 01       		.byte	0x1
 12897 16c6 380A     		.2byte	0xa38
 12898 16c8 81000000 		.4byte	0x81
 12899 16cc 02       		.uleb128 0x2
 12900 16cd 91       		.byte	0x91
 12901 16ce 60       		.sleb128 -32
 12902 16cf 1B       		.uleb128 0x1b
 12903 16d0 3E0D0000 		.4byte	.LASF274
 12904 16d4 01       		.byte	0x1
 12905 16d5 390A     		.2byte	0xa39
 12906 16d7 BD000000 		.4byte	0xbd
 12907 16db 02       		.uleb128 0x2
 12908 16dc 91       		.byte	0x91
 12909 16dd 6C       		.sleb128 -20
 12910 16de 1B       		.uleb128 0x1b
 12911 16df CF040000 		.4byte	.LASF275
 12912 16e3 01       		.byte	0x1
 12913 16e4 390A     		.2byte	0xa39
 12914 16e6 BD000000 		.4byte	0xbd
 12915 16ea 02       		.uleb128 0x2
 12916 16eb 91       		.byte	0x91
 12917 16ec 68       		.sleb128 -24
 12918 16ed 1B       		.uleb128 0x1b
 12919 16ee 8F0E0000 		.4byte	.LASF276
 12920 16f2 01       		.byte	0x1
 12921 16f3 390A     		.2byte	0xa39
 12922 16f5 BD000000 		.4byte	0xbd
 12923 16f9 02       		.uleb128 0x2
 12924 16fa 91       		.byte	0x91
 12925 16fb 70       		.sleb128 -16
 12926 16fc 1B       		.uleb128 0x1b
 12927 16fd 6A040000 		.4byte	.LASF277
 12928 1701 01       		.byte	0x1
 12929 1702 3A0A     		.2byte	0xa3a
 12930 1704 BD000000 		.4byte	0xbd
 12931 1708 02       		.uleb128 0x2
 12932 1709 91       		.byte	0x91
 12933 170a 64       		.sleb128 -28
 12934 170b 1B       		.uleb128 0x1b
 12935 170c BE060000 		.4byte	.LASF278
 12936 1710 01       		.byte	0x1
 12937 1711 3B0A     		.2byte	0xa3b
 12938 1713 99000000 		.4byte	0x99
 12939 1717 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 281


 12940 1718 03       		.byte	0x3
 12941 1719 98010000 		.4byte	timer_value_s.10740
 12942 171d 1B       		.uleb128 0x1b
 12943 171e 59060000 		.4byte	.LASF279
 12944 1722 01       		.byte	0x1
 12945 1723 3B0A     		.2byte	0xa3b
 12946 1725 99000000 		.4byte	0x99
 12947 1729 05       		.uleb128 0x5
 12948 172a 03       		.byte	0x3
 12949 172b 9C010000 		.4byte	timer_value_e.10741
 12950 172f 00       		.byte	0
 12951 1730 24       		.uleb128 0x24
 12952 1731 220B0000 		.4byte	.LASF280
 12953 1735 01       		.byte	0x1
 12954 1736 AB0A     		.2byte	0xaab
 12955 1738 00000000 		.4byte	.LFB78
 12956 173c 08010000 		.4byte	.LFE78-.LFB78
 12957 1740 01       		.uleb128 0x1
 12958 1741 9C       		.byte	0x9c
 12959 1742 B6170000 		.4byte	0x17b6
 12960 1746 1B       		.uleb128 0x1b
 12961 1747 8F0F0000 		.4byte	.LASF281
 12962 174b 01       		.byte	0x1
 12963 174c AD0A     		.2byte	0xaad
 12964 174e EA000000 		.4byte	0xea
 12965 1752 02       		.uleb128 0x2
 12966 1753 91       		.byte	0x91
 12967 1754 64       		.sleb128 -28
 12968 1755 1B       		.uleb128 0x1b
 12969 1756 1F0D0000 		.4byte	.LASF282
 12970 175a 01       		.byte	0x1
 12971 175b AE0A     		.2byte	0xaae
 12972 175d 81000000 		.4byte	0x81
 12973 1761 05       		.uleb128 0x5
 12974 1762 03       		.byte	0x3
 12975 1763 A4010000 		.4byte	row_number.10763
 12976 1767 1B       		.uleb128 0x1b
 12977 1768 A2040000 		.4byte	.LASF283
 12978 176c 01       		.byte	0x1
 12979 176d AF0A     		.2byte	0xaaf
 12980 176f 81000000 		.4byte	0x81
 12981 1773 02       		.uleb128 0x2
 12982 1774 91       		.byte	0x91
 12983 1775 77       		.sleb128 -9
 12984 1776 1B       		.uleb128 0x1b
 12985 1777 E10D0000 		.4byte	.LASF284
 12986 177b 01       		.byte	0x1
 12987 177c B00A     		.2byte	0xab0
 12988 177e B6170000 		.4byte	0x17b6
 12989 1782 02       		.uleb128 0x2
 12990 1783 91       		.byte	0x91
 12991 1784 70       		.sleb128 -16
 12992 1785 1B       		.uleb128 0x1b
 12993 1786 43010000 		.4byte	.LASF285
 12994 178a 01       		.byte	0x1
 12995 178b B10A     		.2byte	0xab1
 12996 178d B6170000 		.4byte	0x17b6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 282


 12997 1791 02       		.uleb128 0x2
 12998 1792 91       		.byte	0x91
 12999 1793 6C       		.sleb128 -20
 13000 1794 1B       		.uleb128 0x1b
 13001 1795 23110000 		.4byte	.LASF286
 13002 1799 01       		.byte	0x1
 13003 179a B20A     		.2byte	0xab2
 13004 179c 81000000 		.4byte	0x81
 13005 17a0 02       		.uleb128 0x2
 13006 17a1 91       		.byte	0x91
 13007 17a2 6B       		.sleb128 -21
 13008 17a3 1B       		.uleb128 0x1b
 13009 17a4 6D0A0000 		.4byte	.LASF287
 13010 17a8 01       		.byte	0x1
 13011 17a9 B30A     		.2byte	0xab3
 13012 17ab B6170000 		.4byte	0x17b6
 13013 17af 05       		.uleb128 0x5
 13014 17b0 03       		.byte	0x3
 13015 17b1 A0010000 		.4byte	m_addr.10768
 13016 17b5 00       		.byte	0
 13017 17b6 0C       		.uleb128 0xc
 13018 17b7 04       		.byte	0x4
 13019 17b8 81000000 		.4byte	0x81
 13020 17bc 07       		.uleb128 0x7
 13021 17bd CC170000 		.4byte	0x17cc
 13022 17c1 CC170000 		.4byte	0x17cc
 13023 17c5 08       		.uleb128 0x8
 13024 17c6 0E010000 		.4byte	0x10e
 13025 17ca 1C       		.byte	0x1c
 13026 17cb 00       		.byte	0
 13027 17cc 27       		.uleb128 0x27
 13028 17cd 81000000 		.4byte	0x81
 13029 17d1 19       		.uleb128 0x19
 13030 17d2 EC0D0000 		.4byte	.LASF288
 13031 17d6 01       		.byte	0x1
 13032 17d7 40       		.byte	0x40
 13033 17d8 E2170000 		.4byte	0x17e2
 13034 17dc 05       		.uleb128 0x5
 13035 17dd 03       		.byte	0x3
 13036 17de 00000000 		.4byte	pwm_preload_values
 13037 17e2 27       		.uleb128 0x27
 13038 17e3 BC170000 		.4byte	0x17bc
 13039 17e7 28       		.uleb128 0x28
 13040 17e8 260F0000 		.4byte	.LASF289
 13041 17ec 08       		.byte	0x8
 13042 17ed 1207     		.2byte	0x712
 13043 17ef F3170000 		.4byte	0x17f3
 13044 17f3 06       		.uleb128 0x6
 13045 17f4 76000000 		.4byte	0x76
 13046 17f8 07       		.uleb128 0x7
 13047 17f9 A5010000 		.4byte	0x1a5
 13048 17fd 08180000 		.4byte	0x1808
 13049 1801 08       		.uleb128 0x8
 13050 1802 0E010000 		.4byte	0x10e
 13051 1806 01       		.byte	0x1
 13052 1807 00       		.byte	0
 13053 1808 28       		.uleb128 0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 283


 13054 1809 FE060000 		.4byte	.LASF290
 13055 180d 07       		.byte	0x7
 13056 180e 1D02     		.2byte	0x21d
 13057 1810 F8170000 		.4byte	0x17f8
 13058 1814 28       		.uleb128 0x28
 13059 1815 C6040000 		.4byte	.LASF291
 13060 1819 07       		.byte	0x7
 13061 181a 1D02     		.2byte	0x21d
 13062 181c F8170000 		.4byte	0x17f8
 13063 1820 28       		.uleb128 0x28
 13064 1821 B20B0000 		.4byte	.LASF292
 13065 1825 07       		.byte	0x7
 13066 1826 1D02     		.2byte	0x21d
 13067 1828 F8170000 		.4byte	0x17f8
 13068 182c 07       		.uleb128 0x7
 13069 182d E2010000 		.4byte	0x1e2
 13070 1831 3C180000 		.4byte	0x183c
 13071 1835 08       		.uleb128 0x8
 13072 1836 0E010000 		.4byte	0x10e
 13073 183a 01       		.byte	0x1
 13074 183b 00       		.byte	0
 13075 183c 28       		.uleb128 0x28
 13076 183d B7060000 		.4byte	.LASF293
 13077 1841 07       		.byte	0x7
 13078 1842 1E02     		.2byte	0x21e
 13079 1844 2C180000 		.4byte	0x182c
 13080 1848 28       		.uleb128 0x28
 13081 1849 19110000 		.4byte	.LASF294
 13082 184d 07       		.byte	0x7
 13083 184e 1E02     		.2byte	0x21e
 13084 1850 2C180000 		.4byte	0x182c
 13085 1854 28       		.uleb128 0x28
 13086 1855 65100000 		.4byte	.LASF295
 13087 1859 07       		.byte	0x7
 13088 185a 1F02     		.2byte	0x21f
 13089 185c 63020000 		.4byte	0x263
 13090 1860 28       		.uleb128 0x28
 13091 1861 70030000 		.4byte	.LASF296
 13092 1865 07       		.byte	0x7
 13093 1866 1F02     		.2byte	0x21f
 13094 1868 63020000 		.4byte	0x263
 13095 186c 28       		.uleb128 0x28
 13096 186d C6000000 		.4byte	.LASF297
 13097 1871 07       		.byte	0x7
 13098 1872 2102     		.2byte	0x221
 13099 1874 B4020000 		.4byte	0x2b4
 13100 1878 28       		.uleb128 0x28
 13101 1879 400E0000 		.4byte	.LASF298
 13102 187d 07       		.byte	0x7
 13103 187e 2202     		.2byte	0x222
 13104 1880 8D090000 		.4byte	0x98d
 13105 1884 28       		.uleb128 0x28
 13106 1885 740A0000 		.4byte	.LASF299
 13107 1889 07       		.byte	0x7
 13108 188a 2202     		.2byte	0x222
 13109 188c 8D090000 		.4byte	0x98d
 13110 1890 28       		.uleb128 0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 284


 13111 1891 53090000 		.4byte	.LASF300
 13112 1895 07       		.byte	0x7
 13113 1896 2302     		.2byte	0x223
 13114 1898 660B0000 		.4byte	0xb66
 13115 189c 07       		.uleb128 0x7
 13116 189d 3E0B0000 		.4byte	0xb3e
 13117 18a1 AC180000 		.4byte	0x18ac
 13118 18a5 08       		.uleb128 0x8
 13119 18a6 0E010000 		.4byte	0x10e
 13120 18aa 01       		.byte	0x1
 13121 18ab 00       		.byte	0
 13122 18ac 28       		.uleb128 0x28
 13123 18ad 9E0B0000 		.4byte	.LASF301
 13124 18b1 07       		.byte	0x7
 13125 18b2 2402     		.2byte	0x224
 13126 18b4 9C180000 		.4byte	0x189c
 13127 18b8 28       		.uleb128 0x28
 13128 18b9 AE090000 		.4byte	.LASF302
 13129 18bd 07       		.byte	0x7
 13130 18be 2402     		.2byte	0x224
 13131 18c0 9C180000 		.4byte	0x189c
 13132 18c4 28       		.uleb128 0x28
 13133 18c5 840B0000 		.4byte	.LASF303
 13134 18c9 07       		.byte	0x7
 13135 18ca 2402     		.2byte	0x224
 13136 18cc 9C180000 		.4byte	0x189c
 13137 18d0 07       		.uleb128 0x7
 13138 18d1 3E0B0000 		.4byte	0xb3e
 13139 18d5 E0180000 		.4byte	0x18e0
 13140 18d9 08       		.uleb128 0x8
 13141 18da 0E010000 		.4byte	0x10e
 13142 18de 02       		.byte	0x2
 13143 18df 00       		.byte	0
 13144 18e0 28       		.uleb128 0x28
 13145 18e1 47050000 		.4byte	.LASF304
 13146 18e5 07       		.byte	0x7
 13147 18e6 2502     		.2byte	0x225
 13148 18e8 D0180000 		.4byte	0x18d0
 13149 18ec 07       		.uleb128 0x7
 13150 18ed 3E0B0000 		.4byte	0xb3e
 13151 18f1 FC180000 		.4byte	0x18fc
 13152 18f5 08       		.uleb128 0x8
 13153 18f6 0E010000 		.4byte	0x10e
 13154 18fa 07       		.byte	0x7
 13155 18fb 00       		.byte	0
 13156 18fc 28       		.uleb128 0x28
 13157 18fd D3010000 		.4byte	.LASF305
 13158 1901 07       		.byte	0x7
 13159 1902 2602     		.2byte	0x226
 13160 1904 EC180000 		.4byte	0x18ec
 13161 1908 28       		.uleb128 0x28
 13162 1909 D5020000 		.4byte	.LASF306
 13163 190d 07       		.byte	0x7
 13164 190e 2802     		.2byte	0x228
 13165 1910 8D000000 		.4byte	0x8d
 13166 1914 28       		.uleb128 0x28
 13167 1915 33090000 		.4byte	.LASF307
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 285


 13168 1919 07       		.byte	0x7
 13169 191a 2902     		.2byte	0x229
 13170 191c 8D000000 		.4byte	0x8d
 13171 1920 28       		.uleb128 0x28
 13172 1921 2E0C0000 		.4byte	.LASF308
 13173 1925 07       		.byte	0x7
 13174 1926 2A02     		.2byte	0x22a
 13175 1928 D5000000 		.4byte	0xd5
 13176 192c 28       		.uleb128 0x28
 13177 192d C70C0000 		.4byte	.LASF309
 13178 1931 07       		.byte	0x7
 13179 1932 2C02     		.2byte	0x22c
 13180 1934 94020000 		.4byte	0x294
 13181 1938 28       		.uleb128 0x28
 13182 1939 810F0000 		.4byte	.LASF310
 13183 193d 07       		.byte	0x7
 13184 193e 2D02     		.2byte	0x22d
 13185 1940 DA060000 		.4byte	0x6da
 13186 1944 28       		.uleb128 0x28
 13187 1945 C60E0000 		.4byte	.LASF311
 13188 1949 07       		.byte	0x7
 13189 194a 2E02     		.2byte	0x22e
 13190 194c DA060000 		.4byte	0x6da
 13191 1950 28       		.uleb128 0x28
 13192 1951 07060000 		.4byte	.LASF312
 13193 1955 07       		.byte	0x7
 13194 1956 2F02     		.2byte	0x22f
 13195 1958 94020000 		.4byte	0x294
 13196 195c 28       		.uleb128 0x28
 13197 195d 330F0000 		.4byte	.LASF313
 13198 1961 07       		.byte	0x7
 13199 1962 3002     		.2byte	0x230
 13200 1964 94020000 		.4byte	0x294
 13201 1968 28       		.uleb128 0x28
 13202 1969 95060000 		.4byte	.LASF314
 13203 196d 07       		.byte	0x7
 13204 196e 3202     		.2byte	0x232
 13205 1970 120C0000 		.4byte	0xc12
 13206 1974 28       		.uleb128 0x28
 13207 1975 F0040000 		.4byte	.LASF315
 13208 1979 07       		.byte	0x7
 13209 197a 3302     		.2byte	0x233
 13210 197c DA0B0000 		.4byte	0xbda
 13211 1980 28       		.uleb128 0x28
 13212 1981 46040000 		.4byte	.LASF316
 13213 1985 07       		.byte	0x7
 13214 1986 3402     		.2byte	0x234
 13215 1988 DA0B0000 		.4byte	0xbda
 13216 198c 28       		.uleb128 0x28
 13217 198d 5A0C0000 		.4byte	.LASF317
 13218 1991 07       		.byte	0x7
 13219 1992 3502     		.2byte	0x235
 13220 1994 DA0B0000 		.4byte	0xbda
 13221 1998 28       		.uleb128 0x28
 13222 1999 95100000 		.4byte	.LASF318
 13223 199d 07       		.byte	0x7
 13224 199e 3602     		.2byte	0x236
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 286


 13225 19a0 DA0B0000 		.4byte	0xbda
 13226 19a4 28       		.uleb128 0x28
 13227 19a5 37080000 		.4byte	.LASF319
 13228 19a9 07       		.byte	0x7
 13229 19aa 3902     		.2byte	0x239
 13230 19ac EA060000 		.4byte	0x6ea
 13231 19b0 28       		.uleb128 0x28
 13232 19b1 07010000 		.4byte	.LASF320
 13233 19b5 07       		.byte	0x7
 13234 19b6 3A02     		.2byte	0x23a
 13235 19b8 81000000 		.4byte	0x81
 13236 19bc 28       		.uleb128 0x28
 13237 19bd 5B040000 		.4byte	.LASF321
 13238 19c1 07       		.byte	0x7
 13239 19c2 3B02     		.2byte	0x23b
 13240 19c4 81000000 		.4byte	0x81
 13241 19c8 28       		.uleb128 0x28
 13242 19c9 25010000 		.4byte	.LASF322
 13243 19cd 07       		.byte	0x7
 13244 19ce 3C02     		.2byte	0x23c
 13245 19d0 81000000 		.4byte	0x81
 13246 19d4 28       		.uleb128 0x28
 13247 19d5 4D110000 		.4byte	.LASF323
 13248 19d9 07       		.byte	0x7
 13249 19da 3E02     		.2byte	0x23e
 13250 19dc 81000000 		.4byte	0x81
 13251 19e0 28       		.uleb128 0x28
 13252 19e1 A50B0000 		.4byte	.LASF324
 13253 19e5 07       		.byte	0x7
 13254 19e6 3F02     		.2byte	0x23f
 13255 19e8 81000000 		.4byte	0x81
 13256 19ec 28       		.uleb128 0x28
 13257 19ed AC040000 		.4byte	.LASF325
 13258 19f1 07       		.byte	0x7
 13259 19f2 4002     		.2byte	0x240
 13260 19f4 81000000 		.4byte	0x81
 13261 19f8 28       		.uleb128 0x28
 13262 19f9 17080000 		.4byte	.LASF326
 13263 19fd 07       		.byte	0x7
 13264 19fe 4102     		.2byte	0x241
 13265 1a00 81000000 		.4byte	0x81
 13266 1a04 28       		.uleb128 0x28
 13267 1a05 93090000 		.4byte	.LASF327
 13268 1a09 07       		.byte	0x7
 13269 1a0a 4202     		.2byte	0x242
 13270 1a0c 81000000 		.4byte	0x81
 13271 1a10 07       		.uleb128 0x7
 13272 1a11 B1000000 		.4byte	0xb1
 13273 1a15 201A0000 		.4byte	0x1a20
 13274 1a19 08       		.uleb128 0x8
 13275 1a1a 0E010000 		.4byte	0x10e
 13276 1a1e 0B       		.byte	0xb
 13277 1a1f 00       		.byte	0
 13278 1a20 28       		.uleb128 0x28
 13279 1a21 53040000 		.4byte	.LASF328
 13280 1a25 07       		.byte	0x7
 13281 1a26 4602     		.2byte	0x246
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 287


 13282 1a28 101A0000 		.4byte	0x1a10
 13283 1a2c 28       		.uleb128 0x28
 13284 1a2d CC100000 		.4byte	.LASF329
 13285 1a31 07       		.byte	0x7
 13286 1a32 4702     		.2byte	0x247
 13287 1a34 81000000 		.4byte	0x81
 13288 1a38 07       		.uleb128 0x7
 13289 1a39 A5000000 		.4byte	0xa5
 13290 1a3d 481A0000 		.4byte	0x1a48
 13291 1a41 08       		.uleb128 0x8
 13292 1a42 0E010000 		.4byte	0x10e
 13293 1a46 01       		.byte	0x1
 13294 1a47 00       		.byte	0
 13295 1a48 28       		.uleb128 0x28
 13296 1a49 22050000 		.4byte	.LASF330
 13297 1a4d 07       		.byte	0x7
 13298 1a4e 4A02     		.2byte	0x24a
 13299 1a50 381A0000 		.4byte	0x1a38
 13300 1a54 07       		.uleb128 0x7
 13301 1a55 99000000 		.4byte	0x99
 13302 1a59 6A1A0000 		.4byte	0x1a6a
 13303 1a5d 08       		.uleb128 0x8
 13304 1a5e 0E010000 		.4byte	0x10e
 13305 1a62 01       		.byte	0x1
 13306 1a63 08       		.uleb128 0x8
 13307 1a64 0E010000 		.4byte	0x10e
 13308 1a68 04       		.byte	0x4
 13309 1a69 00       		.byte	0
 13310 1a6a 28       		.uleb128 0x28
 13311 1a6b ED060000 		.4byte	.LASF331
 13312 1a6f 07       		.byte	0x7
 13313 1a70 4D02     		.2byte	0x24d
 13314 1a72 541A0000 		.4byte	0x1a54
 13315 1a76 28       		.uleb128 0x28
 13316 1a77 6F0D0000 		.4byte	.LASF332
 13317 1a7b 07       		.byte	0x7
 13318 1a7c 4E02     		.2byte	0x24e
 13319 1a7e EA060000 		.4byte	0x6ea
 13320 1a82 07       		.uleb128 0x7
 13321 1a83 8D000000 		.4byte	0x8d
 13322 1a87 981A0000 		.4byte	0x1a98
 13323 1a8b 08       		.uleb128 0x8
 13324 1a8c 0E010000 		.4byte	0x10e
 13325 1a90 01       		.byte	0x1
 13326 1a91 08       		.uleb128 0x8
 13327 1a92 0E010000 		.4byte	0x10e
 13328 1a96 04       		.byte	0x4
 13329 1a97 00       		.byte	0
 13330 1a98 28       		.uleb128 0x28
 13331 1a99 A10F0000 		.4byte	.LASF333
 13332 1a9d 07       		.byte	0x7
 13333 1a9e 4F02     		.2byte	0x24f
 13334 1aa0 821A0000 		.4byte	0x1a82
 13335 1aa4 07       		.uleb128 0x7
 13336 1aa5 81000000 		.4byte	0x81
 13337 1aa9 BA1A0000 		.4byte	0x1aba
 13338 1aad 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 288


 13339 1aae 0E010000 		.4byte	0x10e
 13340 1ab2 01       		.byte	0x1
 13341 1ab3 08       		.uleb128 0x8
 13342 1ab4 0E010000 		.4byte	0x10e
 13343 1ab8 04       		.byte	0x4
 13344 1ab9 00       		.byte	0
 13345 1aba 28       		.uleb128 0x28
 13346 1abb CC060000 		.4byte	.LASF334
 13347 1abf 07       		.byte	0x7
 13348 1ac0 5002     		.2byte	0x250
 13349 1ac2 A41A0000 		.4byte	0x1aa4
 13350 1ac6 28       		.uleb128 0x28
 13351 1ac7 E0030000 		.4byte	.LASF335
 13352 1acb 07       		.byte	0x7
 13353 1acc 5102     		.2byte	0x251
 13354 1ace EA060000 		.4byte	0x6ea
 13355 1ad2 28       		.uleb128 0x28
 13356 1ad3 8F0A0000 		.4byte	.LASF336
 13357 1ad7 07       		.byte	0x7
 13358 1ad8 5402     		.2byte	0x254
 13359 1ada BD000000 		.4byte	0xbd
 13360 1ade 28       		.uleb128 0x28
 13361 1adf EA050000 		.4byte	.LASF337
 13362 1ae3 07       		.byte	0x7
 13363 1ae4 5702     		.2byte	0x257
 13364 1ae6 9F010000 		.4byte	0x19f
 13365 1aea 28       		.uleb128 0x28
 13366 1aeb A3070000 		.4byte	.LASF338
 13367 1aef 07       		.byte	0x7
 13368 1af0 5A02     		.2byte	0x25a
 13369 1af2 9F010000 		.4byte	0x19f
 13370 1af6 07       		.uleb128 0x7
 13371 1af7 C20A0000 		.4byte	0xac2
 13372 1afb 061B0000 		.4byte	0x1b06
 13373 1aff 08       		.uleb128 0x8
 13374 1b00 0E010000 		.4byte	0x10e
 13375 1b04 04       		.byte	0x4
 13376 1b05 00       		.byte	0
 13377 1b06 28       		.uleb128 0x28
 13378 1b07 41050000 		.4byte	.LASF339
 13379 1b0b 07       		.byte	0x7
 13380 1b0c 6202     		.2byte	0x262
 13381 1b0e F61A0000 		.4byte	0x1af6
 13382 1b12 28       		.uleb128 0x28
 13383 1b13 39060000 		.4byte	.LASF340
 13384 1b17 07       		.byte	0x7
 13385 1b18 6202     		.2byte	0x262
 13386 1b1a F61A0000 		.4byte	0x1af6
 13387 1b1e 28       		.uleb128 0x28
 13388 1b1f EA100000 		.4byte	.LASF341
 13389 1b23 07       		.byte	0x7
 13390 1b24 6B02     		.2byte	0x26b
 13391 1b26 81000000 		.4byte	0x81
 13392 1b2a 00       		.byte	0
 13393              		.section	.debug_abbrev,"",%progbits
 13394              	.Ldebug_abbrev0:
 13395 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 289


 13396 0001 11       		.uleb128 0x11
 13397 0002 01       		.byte	0x1
 13398 0003 25       		.uleb128 0x25
 13399 0004 0E       		.uleb128 0xe
 13400 0005 13       		.uleb128 0x13
 13401 0006 0B       		.uleb128 0xb
 13402 0007 03       		.uleb128 0x3
 13403 0008 0E       		.uleb128 0xe
 13404 0009 1B       		.uleb128 0x1b
 13405 000a 0E       		.uleb128 0xe
 13406 000b 55       		.uleb128 0x55
 13407 000c 17       		.uleb128 0x17
 13408 000d 11       		.uleb128 0x11
 13409 000e 01       		.uleb128 0x1
 13410 000f 10       		.uleb128 0x10
 13411 0010 17       		.uleb128 0x17
 13412 0011 00       		.byte	0
 13413 0012 00       		.byte	0
 13414 0013 02       		.uleb128 0x2
 13415 0014 24       		.uleb128 0x24
 13416 0015 00       		.byte	0
 13417 0016 0B       		.uleb128 0xb
 13418 0017 0B       		.uleb128 0xb
 13419 0018 3E       		.uleb128 0x3e
 13420 0019 0B       		.uleb128 0xb
 13421 001a 03       		.uleb128 0x3
 13422 001b 0E       		.uleb128 0xe
 13423 001c 00       		.byte	0
 13424 001d 00       		.byte	0
 13425 001e 03       		.uleb128 0x3
 13426 001f 16       		.uleb128 0x16
 13427 0020 00       		.byte	0
 13428 0021 03       		.uleb128 0x3
 13429 0022 0E       		.uleb128 0xe
 13430 0023 3A       		.uleb128 0x3a
 13431 0024 0B       		.uleb128 0xb
 13432 0025 3B       		.uleb128 0x3b
 13433 0026 0B       		.uleb128 0xb
 13434 0027 49       		.uleb128 0x49
 13435 0028 13       		.uleb128 0x13
 13436 0029 00       		.byte	0
 13437 002a 00       		.byte	0
 13438 002b 04       		.uleb128 0x4
 13439 002c 24       		.uleb128 0x24
 13440 002d 00       		.byte	0
 13441 002e 0B       		.uleb128 0xb
 13442 002f 0B       		.uleb128 0xb
 13443 0030 3E       		.uleb128 0x3e
 13444 0031 0B       		.uleb128 0xb
 13445 0032 03       		.uleb128 0x3
 13446 0033 08       		.uleb128 0x8
 13447 0034 00       		.byte	0
 13448 0035 00       		.byte	0
 13449 0036 05       		.uleb128 0x5
 13450 0037 16       		.uleb128 0x16
 13451 0038 00       		.byte	0
 13452 0039 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 290


 13453 003a 0E       		.uleb128 0xe
 13454 003b 3A       		.uleb128 0x3a
 13455 003c 0B       		.uleb128 0xb
 13456 003d 3B       		.uleb128 0x3b
 13457 003e 05       		.uleb128 0x5
 13458 003f 49       		.uleb128 0x49
 13459 0040 13       		.uleb128 0x13
 13460 0041 00       		.byte	0
 13461 0042 00       		.byte	0
 13462 0043 06       		.uleb128 0x6
 13463 0044 35       		.uleb128 0x35
 13464 0045 00       		.byte	0
 13465 0046 49       		.uleb128 0x49
 13466 0047 13       		.uleb128 0x13
 13467 0048 00       		.byte	0
 13468 0049 00       		.byte	0
 13469 004a 07       		.uleb128 0x7
 13470 004b 01       		.uleb128 0x1
 13471 004c 01       		.byte	0x1
 13472 004d 49       		.uleb128 0x49
 13473 004e 13       		.uleb128 0x13
 13474 004f 01       		.uleb128 0x1
 13475 0050 13       		.uleb128 0x13
 13476 0051 00       		.byte	0
 13477 0052 00       		.byte	0
 13478 0053 08       		.uleb128 0x8
 13479 0054 21       		.uleb128 0x21
 13480 0055 00       		.byte	0
 13481 0056 49       		.uleb128 0x49
 13482 0057 13       		.uleb128 0x13
 13483 0058 2F       		.uleb128 0x2f
 13484 0059 0B       		.uleb128 0xb
 13485 005a 00       		.byte	0
 13486 005b 00       		.byte	0
 13487 005c 09       		.uleb128 0x9
 13488 005d 04       		.uleb128 0x4
 13489 005e 01       		.byte	0x1
 13490 005f 03       		.uleb128 0x3
 13491 0060 0E       		.uleb128 0xe
 13492 0061 0B       		.uleb128 0xb
 13493 0062 0B       		.uleb128 0xb
 13494 0063 49       		.uleb128 0x49
 13495 0064 13       		.uleb128 0x13
 13496 0065 3A       		.uleb128 0x3a
 13497 0066 0B       		.uleb128 0xb
 13498 0067 3B       		.uleb128 0x3b
 13499 0068 0B       		.uleb128 0xb
 13500 0069 01       		.uleb128 0x1
 13501 006a 13       		.uleb128 0x13
 13502 006b 00       		.byte	0
 13503 006c 00       		.byte	0
 13504 006d 0A       		.uleb128 0xa
 13505 006e 28       		.uleb128 0x28
 13506 006f 00       		.byte	0
 13507 0070 03       		.uleb128 0x3
 13508 0071 0E       		.uleb128 0xe
 13509 0072 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 291


 13510 0073 0B       		.uleb128 0xb
 13511 0074 00       		.byte	0
 13512 0075 00       		.byte	0
 13513 0076 0B       		.uleb128 0xb
 13514 0077 13       		.uleb128 0x13
 13515 0078 00       		.byte	0
 13516 0079 03       		.uleb128 0x3
 13517 007a 0E       		.uleb128 0xe
 13518 007b 3C       		.uleb128 0x3c
 13519 007c 19       		.uleb128 0x19
 13520 007d 00       		.byte	0
 13521 007e 00       		.byte	0
 13522 007f 0C       		.uleb128 0xc
 13523 0080 0F       		.uleb128 0xf
 13524 0081 00       		.byte	0
 13525 0082 0B       		.uleb128 0xb
 13526 0083 0B       		.uleb128 0xb
 13527 0084 49       		.uleb128 0x49
 13528 0085 13       		.uleb128 0x13
 13529 0086 00       		.byte	0
 13530 0087 00       		.byte	0
 13531 0088 0D       		.uleb128 0xd
 13532 0089 13       		.uleb128 0x13
 13533 008a 01       		.byte	0x1
 13534 008b 03       		.uleb128 0x3
 13535 008c 0E       		.uleb128 0xe
 13536 008d 0B       		.uleb128 0xb
 13537 008e 0B       		.uleb128 0xb
 13538 008f 3A       		.uleb128 0x3a
 13539 0090 0B       		.uleb128 0xb
 13540 0091 3B       		.uleb128 0x3b
 13541 0092 0B       		.uleb128 0xb
 13542 0093 01       		.uleb128 0x1
 13543 0094 13       		.uleb128 0x13
 13544 0095 00       		.byte	0
 13545 0096 00       		.byte	0
 13546 0097 0E       		.uleb128 0xe
 13547 0098 0D       		.uleb128 0xd
 13548 0099 00       		.byte	0
 13549 009a 03       		.uleb128 0x3
 13550 009b 08       		.uleb128 0x8
 13551 009c 3A       		.uleb128 0x3a
 13552 009d 0B       		.uleb128 0xb
 13553 009e 3B       		.uleb128 0x3b
 13554 009f 0B       		.uleb128 0xb
 13555 00a0 49       		.uleb128 0x49
 13556 00a1 13       		.uleb128 0x13
 13557 00a2 38       		.uleb128 0x38
 13558 00a3 0B       		.uleb128 0xb
 13559 00a4 00       		.byte	0
 13560 00a5 00       		.byte	0
 13561 00a6 0F       		.uleb128 0xf
 13562 00a7 0D       		.uleb128 0xd
 13563 00a8 00       		.byte	0
 13564 00a9 03       		.uleb128 0x3
 13565 00aa 0E       		.uleb128 0xe
 13566 00ab 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 292


 13567 00ac 0B       		.uleb128 0xb
 13568 00ad 3B       		.uleb128 0x3b
 13569 00ae 0B       		.uleb128 0xb
 13570 00af 49       		.uleb128 0x49
 13571 00b0 13       		.uleb128 0x13
 13572 00b1 38       		.uleb128 0x38
 13573 00b2 0B       		.uleb128 0xb
 13574 00b3 00       		.byte	0
 13575 00b4 00       		.byte	0
 13576 00b5 10       		.uleb128 0x10
 13577 00b6 13       		.uleb128 0x13
 13578 00b7 01       		.byte	0x1
 13579 00b8 03       		.uleb128 0x3
 13580 00b9 0E       		.uleb128 0xe
 13581 00ba 0B       		.uleb128 0xb
 13582 00bb 0B       		.uleb128 0xb
 13583 00bc 3A       		.uleb128 0x3a
 13584 00bd 0B       		.uleb128 0xb
 13585 00be 3B       		.uleb128 0x3b
 13586 00bf 05       		.uleb128 0x5
 13587 00c0 01       		.uleb128 0x1
 13588 00c1 13       		.uleb128 0x13
 13589 00c2 00       		.byte	0
 13590 00c3 00       		.byte	0
 13591 00c4 11       		.uleb128 0x11
 13592 00c5 0D       		.uleb128 0xd
 13593 00c6 00       		.byte	0
 13594 00c7 03       		.uleb128 0x3
 13595 00c8 0E       		.uleb128 0xe
 13596 00c9 3A       		.uleb128 0x3a
 13597 00ca 0B       		.uleb128 0xb
 13598 00cb 3B       		.uleb128 0x3b
 13599 00cc 05       		.uleb128 0x5
 13600 00cd 49       		.uleb128 0x49
 13601 00ce 13       		.uleb128 0x13
 13602 00cf 38       		.uleb128 0x38
 13603 00d0 0B       		.uleb128 0xb
 13604 00d1 00       		.byte	0
 13605 00d2 00       		.byte	0
 13606 00d3 12       		.uleb128 0x12
 13607 00d4 0D       		.uleb128 0xd
 13608 00d5 00       		.byte	0
 13609 00d6 03       		.uleb128 0x3
 13610 00d7 08       		.uleb128 0x8
 13611 00d8 3A       		.uleb128 0x3a
 13612 00d9 0B       		.uleb128 0xb
 13613 00da 3B       		.uleb128 0x3b
 13614 00db 05       		.uleb128 0x5
 13615 00dc 49       		.uleb128 0x49
 13616 00dd 13       		.uleb128 0x13
 13617 00de 38       		.uleb128 0x38
 13618 00df 0B       		.uleb128 0xb
 13619 00e0 00       		.byte	0
 13620 00e1 00       		.byte	0
 13621 00e2 13       		.uleb128 0x13
 13622 00e3 13       		.uleb128 0x13
 13623 00e4 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 293


 13624 00e5 03       		.uleb128 0x3
 13625 00e6 0E       		.uleb128 0xe
 13626 00e7 0B       		.uleb128 0xb
 13627 00e8 05       		.uleb128 0x5
 13628 00e9 3A       		.uleb128 0x3a
 13629 00ea 0B       		.uleb128 0xb
 13630 00eb 3B       		.uleb128 0x3b
 13631 00ec 05       		.uleb128 0x5
 13632 00ed 01       		.uleb128 0x1
 13633 00ee 13       		.uleb128 0x13
 13634 00ef 00       		.byte	0
 13635 00f0 00       		.byte	0
 13636 00f1 14       		.uleb128 0x14
 13637 00f2 0D       		.uleb128 0xd
 13638 00f3 00       		.byte	0
 13639 00f4 03       		.uleb128 0x3
 13640 00f5 08       		.uleb128 0x8
 13641 00f6 3A       		.uleb128 0x3a
 13642 00f7 0B       		.uleb128 0xb
 13643 00f8 3B       		.uleb128 0x3b
 13644 00f9 05       		.uleb128 0x5
 13645 00fa 49       		.uleb128 0x49
 13646 00fb 13       		.uleb128 0x13
 13647 00fc 38       		.uleb128 0x38
 13648 00fd 05       		.uleb128 0x5
 13649 00fe 00       		.byte	0
 13650 00ff 00       		.byte	0
 13651 0100 15       		.uleb128 0x15
 13652 0101 0D       		.uleb128 0xd
 13653 0102 00       		.byte	0
 13654 0103 03       		.uleb128 0x3
 13655 0104 0E       		.uleb128 0xe
 13656 0105 3A       		.uleb128 0x3a
 13657 0106 0B       		.uleb128 0xb
 13658 0107 3B       		.uleb128 0x3b
 13659 0108 05       		.uleb128 0x5
 13660 0109 49       		.uleb128 0x49
 13661 010a 13       		.uleb128 0x13
 13662 010b 38       		.uleb128 0x38
 13663 010c 05       		.uleb128 0x5
 13664 010d 00       		.byte	0
 13665 010e 00       		.byte	0
 13666 010f 16       		.uleb128 0x16
 13667 0110 04       		.uleb128 0x4
 13668 0111 01       		.byte	0x1
 13669 0112 0B       		.uleb128 0xb
 13670 0113 0B       		.uleb128 0xb
 13671 0114 49       		.uleb128 0x49
 13672 0115 13       		.uleb128 0x13
 13673 0116 3A       		.uleb128 0x3a
 13674 0117 0B       		.uleb128 0xb
 13675 0118 3B       		.uleb128 0x3b
 13676 0119 05       		.uleb128 0x5
 13677 011a 01       		.uleb128 0x1
 13678 011b 13       		.uleb128 0x13
 13679 011c 00       		.byte	0
 13680 011d 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 294


 13681 011e 17       		.uleb128 0x17
 13682 011f 2E       		.uleb128 0x2e
 13683 0120 00       		.byte	0
 13684 0121 3F       		.uleb128 0x3f
 13685 0122 19       		.uleb128 0x19
 13686 0123 03       		.uleb128 0x3
 13687 0124 0E       		.uleb128 0xe
 13688 0125 3A       		.uleb128 0x3a
 13689 0126 0B       		.uleb128 0xb
 13690 0127 3B       		.uleb128 0x3b
 13691 0128 0B       		.uleb128 0xb
 13692 0129 27       		.uleb128 0x27
 13693 012a 19       		.uleb128 0x19
 13694 012b 11       		.uleb128 0x11
 13695 012c 01       		.uleb128 0x1
 13696 012d 12       		.uleb128 0x12
 13697 012e 06       		.uleb128 0x6
 13698 012f 40       		.uleb128 0x40
 13699 0130 18       		.uleb128 0x18
 13700 0131 9742     		.uleb128 0x2117
 13701 0133 19       		.uleb128 0x19
 13702 0134 00       		.byte	0
 13703 0135 00       		.byte	0
 13704 0136 18       		.uleb128 0x18
 13705 0137 2E       		.uleb128 0x2e
 13706 0138 01       		.byte	0x1
 13707 0139 3F       		.uleb128 0x3f
 13708 013a 19       		.uleb128 0x19
 13709 013b 03       		.uleb128 0x3
 13710 013c 0E       		.uleb128 0xe
 13711 013d 3A       		.uleb128 0x3a
 13712 013e 0B       		.uleb128 0xb
 13713 013f 3B       		.uleb128 0x3b
 13714 0140 0B       		.uleb128 0xb
 13715 0141 11       		.uleb128 0x11
 13716 0142 01       		.uleb128 0x1
 13717 0143 12       		.uleb128 0x12
 13718 0144 06       		.uleb128 0x6
 13719 0145 40       		.uleb128 0x40
 13720 0146 18       		.uleb128 0x18
 13721 0147 9642     		.uleb128 0x2116
 13722 0149 19       		.uleb128 0x19
 13723 014a 01       		.uleb128 0x1
 13724 014b 13       		.uleb128 0x13
 13725 014c 00       		.byte	0
 13726 014d 00       		.byte	0
 13727 014e 19       		.uleb128 0x19
 13728 014f 34       		.uleb128 0x34
 13729 0150 00       		.byte	0
 13730 0151 03       		.uleb128 0x3
 13731 0152 0E       		.uleb128 0xe
 13732 0153 3A       		.uleb128 0x3a
 13733 0154 0B       		.uleb128 0xb
 13734 0155 3B       		.uleb128 0x3b
 13735 0156 0B       		.uleb128 0xb
 13736 0157 49       		.uleb128 0x49
 13737 0158 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 295


 13738 0159 02       		.uleb128 0x2
 13739 015a 18       		.uleb128 0x18
 13740 015b 00       		.byte	0
 13741 015c 00       		.byte	0
 13742 015d 1A       		.uleb128 0x1a
 13743 015e 2E       		.uleb128 0x2e
 13744 015f 01       		.byte	0x1
 13745 0160 3F       		.uleb128 0x3f
 13746 0161 19       		.uleb128 0x19
 13747 0162 03       		.uleb128 0x3
 13748 0163 0E       		.uleb128 0xe
 13749 0164 3A       		.uleb128 0x3a
 13750 0165 0B       		.uleb128 0xb
 13751 0166 3B       		.uleb128 0x3b
 13752 0167 05       		.uleb128 0x5
 13753 0168 27       		.uleb128 0x27
 13754 0169 19       		.uleb128 0x19
 13755 016a 11       		.uleb128 0x11
 13756 016b 01       		.uleb128 0x1
 13757 016c 12       		.uleb128 0x12
 13758 016d 06       		.uleb128 0x6
 13759 016e 40       		.uleb128 0x40
 13760 016f 18       		.uleb128 0x18
 13761 0170 9642     		.uleb128 0x2116
 13762 0172 19       		.uleb128 0x19
 13763 0173 01       		.uleb128 0x1
 13764 0174 13       		.uleb128 0x13
 13765 0175 00       		.byte	0
 13766 0176 00       		.byte	0
 13767 0177 1B       		.uleb128 0x1b
 13768 0178 34       		.uleb128 0x34
 13769 0179 00       		.byte	0
 13770 017a 03       		.uleb128 0x3
 13771 017b 0E       		.uleb128 0xe
 13772 017c 3A       		.uleb128 0x3a
 13773 017d 0B       		.uleb128 0xb
 13774 017e 3B       		.uleb128 0x3b
 13775 017f 05       		.uleb128 0x5
 13776 0180 49       		.uleb128 0x49
 13777 0181 13       		.uleb128 0x13
 13778 0182 02       		.uleb128 0x2
 13779 0183 18       		.uleb128 0x18
 13780 0184 00       		.byte	0
 13781 0185 00       		.byte	0
 13782 0186 1C       		.uleb128 0x1c
 13783 0187 0B       		.uleb128 0xb
 13784 0188 01       		.byte	0x1
 13785 0189 11       		.uleb128 0x11
 13786 018a 01       		.uleb128 0x1
 13787 018b 12       		.uleb128 0x12
 13788 018c 06       		.uleb128 0x6
 13789 018d 01       		.uleb128 0x1
 13790 018e 13       		.uleb128 0x13
 13791 018f 00       		.byte	0
 13792 0190 00       		.byte	0
 13793 0191 1D       		.uleb128 0x1d
 13794 0192 34       		.uleb128 0x34
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 296


 13795 0193 00       		.byte	0
 13796 0194 03       		.uleb128 0x3
 13797 0195 08       		.uleb128 0x8
 13798 0196 3A       		.uleb128 0x3a
 13799 0197 0B       		.uleb128 0xb
 13800 0198 3B       		.uleb128 0x3b
 13801 0199 05       		.uleb128 0x5
 13802 019a 49       		.uleb128 0x49
 13803 019b 13       		.uleb128 0x13
 13804 019c 02       		.uleb128 0x2
 13805 019d 18       		.uleb128 0x18
 13806 019e 00       		.byte	0
 13807 019f 00       		.byte	0
 13808 01a0 1E       		.uleb128 0x1e
 13809 01a1 0B       		.uleb128 0xb
 13810 01a2 01       		.byte	0x1
 13811 01a3 11       		.uleb128 0x11
 13812 01a4 01       		.uleb128 0x1
 13813 01a5 12       		.uleb128 0x12
 13814 01a6 06       		.uleb128 0x6
 13815 01a7 00       		.byte	0
 13816 01a8 00       		.byte	0
 13817 01a9 1F       		.uleb128 0x1f
 13818 01aa 21       		.uleb128 0x21
 13819 01ab 00       		.byte	0
 13820 01ac 49       		.uleb128 0x49
 13821 01ad 13       		.uleb128 0x13
 13822 01ae 2F       		.uleb128 0x2f
 13823 01af 05       		.uleb128 0x5
 13824 01b0 00       		.byte	0
 13825 01b1 00       		.byte	0
 13826 01b2 20       		.uleb128 0x20
 13827 01b3 05       		.uleb128 0x5
 13828 01b4 00       		.byte	0
 13829 01b5 03       		.uleb128 0x3
 13830 01b6 0E       		.uleb128 0xe
 13831 01b7 3A       		.uleb128 0x3a
 13832 01b8 0B       		.uleb128 0xb
 13833 01b9 3B       		.uleb128 0x3b
 13834 01ba 05       		.uleb128 0x5
 13835 01bb 49       		.uleb128 0x49
 13836 01bc 13       		.uleb128 0x13
 13837 01bd 02       		.uleb128 0x2
 13838 01be 18       		.uleb128 0x18
 13839 01bf 00       		.byte	0
 13840 01c0 00       		.byte	0
 13841 01c1 21       		.uleb128 0x21
 13842 01c2 0B       		.uleb128 0xb
 13843 01c3 01       		.byte	0x1
 13844 01c4 55       		.uleb128 0x55
 13845 01c5 17       		.uleb128 0x17
 13846 01c6 00       		.byte	0
 13847 01c7 00       		.byte	0
 13848 01c8 22       		.uleb128 0x22
 13849 01c9 2E       		.uleb128 0x2e
 13850 01ca 01       		.byte	0x1
 13851 01cb 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 297


 13852 01cc 19       		.uleb128 0x19
 13853 01cd 03       		.uleb128 0x3
 13854 01ce 0E       		.uleb128 0xe
 13855 01cf 3A       		.uleb128 0x3a
 13856 01d0 0B       		.uleb128 0xb
 13857 01d1 3B       		.uleb128 0x3b
 13858 01d2 05       		.uleb128 0x5
 13859 01d3 27       		.uleb128 0x27
 13860 01d4 19       		.uleb128 0x19
 13861 01d5 11       		.uleb128 0x11
 13862 01d6 01       		.uleb128 0x1
 13863 01d7 12       		.uleb128 0x12
 13864 01d8 06       		.uleb128 0x6
 13865 01d9 40       		.uleb128 0x40
 13866 01da 18       		.uleb128 0x18
 13867 01db 9742     		.uleb128 0x2117
 13868 01dd 19       		.uleb128 0x19
 13869 01de 01       		.uleb128 0x1
 13870 01df 13       		.uleb128 0x13
 13871 01e0 00       		.byte	0
 13872 01e1 00       		.byte	0
 13873 01e2 23       		.uleb128 0x23
 13874 01e3 0B       		.uleb128 0xb
 13875 01e4 01       		.byte	0x1
 13876 01e5 55       		.uleb128 0x55
 13877 01e6 17       		.uleb128 0x17
 13878 01e7 01       		.uleb128 0x1
 13879 01e8 13       		.uleb128 0x13
 13880 01e9 00       		.byte	0
 13881 01ea 00       		.byte	0
 13882 01eb 24       		.uleb128 0x24
 13883 01ec 2E       		.uleb128 0x2e
 13884 01ed 01       		.byte	0x1
 13885 01ee 3F       		.uleb128 0x3f
 13886 01ef 19       		.uleb128 0x19
 13887 01f0 03       		.uleb128 0x3
 13888 01f1 0E       		.uleb128 0xe
 13889 01f2 3A       		.uleb128 0x3a
 13890 01f3 0B       		.uleb128 0xb
 13891 01f4 3B       		.uleb128 0x3b
 13892 01f5 05       		.uleb128 0x5
 13893 01f6 11       		.uleb128 0x11
 13894 01f7 01       		.uleb128 0x1
 13895 01f8 12       		.uleb128 0x12
 13896 01f9 06       		.uleb128 0x6
 13897 01fa 40       		.uleb128 0x40
 13898 01fb 18       		.uleb128 0x18
 13899 01fc 9642     		.uleb128 0x2116
 13900 01fe 19       		.uleb128 0x19
 13901 01ff 01       		.uleb128 0x1
 13902 0200 13       		.uleb128 0x13
 13903 0201 00       		.byte	0
 13904 0202 00       		.byte	0
 13905 0203 25       		.uleb128 0x25
 13906 0204 05       		.uleb128 0x5
 13907 0205 00       		.byte	0
 13908 0206 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 298


 13909 0207 08       		.uleb128 0x8
 13910 0208 3A       		.uleb128 0x3a
 13911 0209 0B       		.uleb128 0xb
 13912 020a 3B       		.uleb128 0x3b
 13913 020b 05       		.uleb128 0x5
 13914 020c 49       		.uleb128 0x49
 13915 020d 13       		.uleb128 0x13
 13916 020e 02       		.uleb128 0x2
 13917 020f 18       		.uleb128 0x18
 13918 0210 00       		.byte	0
 13919 0211 00       		.byte	0
 13920 0212 26       		.uleb128 0x26
 13921 0213 2E       		.uleb128 0x2e
 13922 0214 01       		.byte	0x1
 13923 0215 3F       		.uleb128 0x3f
 13924 0216 19       		.uleb128 0x19
 13925 0217 03       		.uleb128 0x3
 13926 0218 0E       		.uleb128 0xe
 13927 0219 3A       		.uleb128 0x3a
 13928 021a 0B       		.uleb128 0xb
 13929 021b 3B       		.uleb128 0x3b
 13930 021c 05       		.uleb128 0x5
 13931 021d 11       		.uleb128 0x11
 13932 021e 01       		.uleb128 0x1
 13933 021f 12       		.uleb128 0x12
 13934 0220 06       		.uleb128 0x6
 13935 0221 40       		.uleb128 0x40
 13936 0222 18       		.uleb128 0x18
 13937 0223 9742     		.uleb128 0x2117
 13938 0225 19       		.uleb128 0x19
 13939 0226 01       		.uleb128 0x1
 13940 0227 13       		.uleb128 0x13
 13941 0228 00       		.byte	0
 13942 0229 00       		.byte	0
 13943 022a 27       		.uleb128 0x27
 13944 022b 26       		.uleb128 0x26
 13945 022c 00       		.byte	0
 13946 022d 49       		.uleb128 0x49
 13947 022e 13       		.uleb128 0x13
 13948 022f 00       		.byte	0
 13949 0230 00       		.byte	0
 13950 0231 28       		.uleb128 0x28
 13951 0232 34       		.uleb128 0x34
 13952 0233 00       		.byte	0
 13953 0234 03       		.uleb128 0x3
 13954 0235 0E       		.uleb128 0xe
 13955 0236 3A       		.uleb128 0x3a
 13956 0237 0B       		.uleb128 0xb
 13957 0238 3B       		.uleb128 0x3b
 13958 0239 05       		.uleb128 0x5
 13959 023a 49       		.uleb128 0x49
 13960 023b 13       		.uleb128 0x13
 13961 023c 3F       		.uleb128 0x3f
 13962 023d 19       		.uleb128 0x19
 13963 023e 3C       		.uleb128 0x3c
 13964 023f 19       		.uleb128 0x19
 13965 0240 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 299


 13966 0241 00       		.byte	0
 13967 0242 00       		.byte	0
 13968              		.section	.debug_aranges,"",%progbits
 13969 0000 8C000000 		.4byte	0x8c
 13970 0004 0200     		.2byte	0x2
 13971 0006 00000000 		.4byte	.Ldebug_info0
 13972 000a 04       		.byte	0x4
 13973 000b 00       		.byte	0
 13974 000c 0000     		.2byte	0
 13975 000e 0000     		.2byte	0
 13976 0010 00000000 		.4byte	.LFB64
 13977 0014 18000000 		.4byte	.LFE64-.LFB64
 13978 0018 00000000 		.4byte	.LFB65
 13979 001c 20000000 		.4byte	.LFE65-.LFB65
 13980 0020 00000000 		.4byte	.LFB66
 13981 0024 F4010000 		.4byte	.LFE66-.LFB66
 13982 0028 00000000 		.4byte	.LFB67
 13983 002c 24080000 		.4byte	.LFE67-.LFB67
 13984 0030 00000000 		.4byte	.LFB68
 13985 0034 CC050000 		.4byte	.LFE68-.LFB68
 13986 0038 00000000 		.4byte	.LFB69
 13987 003c 34030000 		.4byte	.LFE69-.LFB69
 13988 0040 00000000 		.4byte	.LFB70
 13989 0044 B0010000 		.4byte	.LFE70-.LFB70
 13990 0048 00000000 		.4byte	.LFB71
 13991 004c 0C070000 		.4byte	.LFE71-.LFB71
 13992 0050 00000000 		.4byte	.LFB72
 13993 0054 70090000 		.4byte	.LFE72-.LFB72
 13994 0058 00000000 		.4byte	.LFB73
 13995 005c 18080000 		.4byte	.LFE73-.LFB73
 13996 0060 00000000 		.4byte	.LFB74
 13997 0064 38120000 		.4byte	.LFE74-.LFB74
 13998 0068 00000000 		.4byte	.LFB75
 13999 006c 0C010000 		.4byte	.LFE75-.LFB75
 14000 0070 00000000 		.4byte	.LFB76
 14001 0074 A8000000 		.4byte	.LFE76-.LFB76
 14002 0078 00000000 		.4byte	.LFB77
 14003 007c 20040000 		.4byte	.LFE77-.LFB77
 14004 0080 00000000 		.4byte	.LFB78
 14005 0084 08010000 		.4byte	.LFE78-.LFB78
 14006 0088 00000000 		.4byte	0
 14007 008c 00000000 		.4byte	0
 14008              		.section	.debug_ranges,"",%progbits
 14009              	.Ldebug_ranges0:
 14010 0000 68010000 		.4byte	.LBB4
 14011 0004 AA010000 		.4byte	.LBE4
 14012 0008 AC010000 		.4byte	.LBB5
 14013 000c F2010000 		.4byte	.LBE5
 14014 0010 00000000 		.4byte	0
 14015 0014 00000000 		.4byte	0
 14016 0018 3A000000 		.4byte	.LBB6
 14017 001c 40010000 		.4byte	.LBE6
 14018 0020 42010000 		.4byte	.LBB7
 14019 0024 BC010000 		.4byte	.LBE7
 14020 0028 00000000 		.4byte	0
 14021 002c 00000000 		.4byte	0
 14022 0030 BE010000 		.4byte	.LBB8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 300


 14023 0034 20030000 		.4byte	.LBE8
 14024 0038 22030000 		.4byte	.LBB9
 14025 003c 24030000 		.4byte	.LBE9
 14026 0040 00000000 		.4byte	0
 14027 0044 00000000 		.4byte	0
 14028 0048 00000000 		.4byte	.LFB64
 14029 004c 18000000 		.4byte	.LFE64
 14030 0050 00000000 		.4byte	.LFB65
 14031 0054 20000000 		.4byte	.LFE65
 14032 0058 00000000 		.4byte	.LFB66
 14033 005c F4010000 		.4byte	.LFE66
 14034 0060 00000000 		.4byte	.LFB67
 14035 0064 24080000 		.4byte	.LFE67
 14036 0068 00000000 		.4byte	.LFB68
 14037 006c CC050000 		.4byte	.LFE68
 14038 0070 00000000 		.4byte	.LFB69
 14039 0074 34030000 		.4byte	.LFE69
 14040 0078 00000000 		.4byte	.LFB70
 14041 007c B0010000 		.4byte	.LFE70
 14042 0080 00000000 		.4byte	.LFB71
 14043 0084 0C070000 		.4byte	.LFE71
 14044 0088 00000000 		.4byte	.LFB72
 14045 008c 70090000 		.4byte	.LFE72
 14046 0090 00000000 		.4byte	.LFB73
 14047 0094 18080000 		.4byte	.LFE73
 14048 0098 00000000 		.4byte	.LFB74
 14049 009c 38120000 		.4byte	.LFE74
 14050 00a0 00000000 		.4byte	.LFB75
 14051 00a4 0C010000 		.4byte	.LFE75
 14052 00a8 00000000 		.4byte	.LFB76
 14053 00ac A8000000 		.4byte	.LFE76
 14054 00b0 00000000 		.4byte	.LFB77
 14055 00b4 20040000 		.4byte	.LFE77
 14056 00b8 00000000 		.4byte	.LFB78
 14057 00bc 08010000 		.4byte	.LFE78
 14058 00c0 00000000 		.4byte	0
 14059 00c4 00000000 		.4byte	0
 14060              		.section	.debug_line,"",%progbits
 14061              	.Ldebug_line0:
 14062 0000 DA0B0000 		.section	.debug_str,"MS",%progbits,1
 14062      0200AC01 
 14062      00000201 
 14062      FB0E0D00 
 14062      01010101 
 14063              	.LASF344:
 14064 0000 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GitHub\\SoftHandPRO-a"
 14064      73657273 
 14064      5C4D6174 
 14064      7469615C 
 14064      446F6375 
 14065 002e 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Generic.cydsn\000"
 14065      656E6572 
 14065      69632D46 
 14065      572D5053 
 14065      6F43355C 
 14066              	.LASF24:
 14067 0050 73697A65 		.ascii	"sizetype\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 301


 14067      74797065 
 14067      00
 14068              	.LASF264:
 14069 0059 706F735F 		.ascii	"pos_cycle_status\000"
 14069      6379636C 
 14069      655F7374 
 14069      61747573 
 14069      00
 14070              	.LASF142:
 14071 006a 77726973 		.ascii	"wrist_direction_association\000"
 14071      745F6469 
 14071      72656374 
 14071      696F6E5F 
 14071      6173736F 
 14072              	.LASF30:
 14073 0086 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14073      545F4D4F 
 14073      44455F45 
 14073      4D475F46 
 14073      4346535F 
 14074              	.LASF117:
 14075 009e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14075      5F414443 
 14075      5F73656E 
 14075      736F7273 
 14075      5F706F72 
 14076              	.LASF147:
 14077 00b9 75736572 		.ascii	"user\000"
 14077      00
 14078              	.LASF10:
 14079 00be 696E7433 		.ascii	"int32_t\000"
 14079      325F7400 
 14080              	.LASF297:
 14081 00c6 675F7278 		.ascii	"g_rx\000"
 14081      00
 14082              	.LASF242:
 14083 00cb 6F6E655F 		.ascii	"one_time_execute\000"
 14083      74696D65 
 14083      5F657865 
 14083      63757465 
 14083      00
 14084              	.LASF49:
 14085 00dc 73745F64 		.ascii	"st_data\000"
 14085      61746100 
 14086              	.LASF13:
 14087 00e4 75696E74 		.ascii	"uint32\000"
 14087      333200
 14088              	.LASF227:
 14089 00eb 6E5F6C69 		.ascii	"n_line\000"
 14089      6E6500
 14090              	.LASF148:
 14091 00f2 4A4F595F 		.ascii	"JOY_spec\000"
 14091      73706563 
 14091      00
 14092              	.LASF85:
 14093 00fb 706F735F 		.ascii	"pos_lim_inf\000"
 14093      6C696D5F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 302


 14093      696E6600 
 14094              	.LASF320:
 14095 0107 74656E73 		.ascii	"tension_valid\000"
 14095      696F6E5F 
 14095      76616C69 
 14095      6400
 14096              	.LASF203:
 14097 0115 6572725F 		.ascii	"err_joy_1\000"
 14097      6A6F795F 
 14097      3100
 14098              	.LASF179:
 14099 011f 73746174 		.ascii	"state\000"
 14099      6500
 14100              	.LASF322:
 14101 0125 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14101      65735F69 
 14101      6E746572 
 14101      72757074 
 14101      5F666C61 
 14102              	.LASF271:
 14103 013b 62696E5F 		.ascii	"bin_max\000"
 14103      6D617800 
 14104              	.LASF285:
 14105 0143 61646472 		.ascii	"addr_start_c\000"
 14105      5F737461 
 14105      72745F63 
 14105      00
 14106              	.LASF29:
 14107 0150 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14107      545F4D4F 
 14107      44455F45 
 14107      4D475F46 
 14107      43465300 
 14108              	.LASF89:
 14109 0164 63757272 		.ascii	"curr_lookup\000"
 14109      5F6C6F6F 
 14109      6B757000 
 14110              	.LASF212:
 14111 0170 70776D5F 		.ascii	"pwm_input\000"
 14111      696E7075 
 14111      7400
 14112              	.LASF57:
 14113 017a 72657374 		.ascii	"rest_counter\000"
 14113      5F636F75 
 14113      6E746572 
 14113      00
 14114              	.LASF132:
 14115 0187 73745F4D 		.ascii	"st_MASTER_spec\000"
 14115      41535445 
 14115      525F7370 
 14115      656300
 14116              	.LASF28:
 14117 0196 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14117      545F4D4F 
 14117      44455F45 
 14117      4D475F49 
 14117      4E544547 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 303


 14118              	.LASF257:
 14119 01ae 765F636F 		.ascii	"v_count\000"
 14119      756E7400 
 14120              	.LASF184:
 14121 01b6 72785F64 		.ascii	"rx_data\000"
 14121      61746100 
 14122              	.LASF246:
 14123 01be 7676765F 		.ascii	"vvv_value\000"
 14123      76616C75 
 14123      6500
 14124              	.LASF14:
 14125 01c8 696E7438 		.ascii	"int8\000"
 14125      00
 14126              	.LASF189:
 14127 01cd 696E666F 		.ascii	"info_\000"
 14127      5F00
 14128              	.LASF305:
 14129 01d3 66696C74 		.ascii	"filt_emg\000"
 14129      5F656D67 
 14129      00
 14130              	.LASF104:
 14131 01dc 73745F65 		.ascii	"st_emg\000"
 14131      6D6700
 14132              	.LASF55:
 14133 01e3 706F7369 		.ascii	"position_hist\000"
 14133      74696F6E 
 14133      5F686973 
 14133      7400
 14134              	.LASF171:
 14135 01f1 50524550 		.ascii	"PREPARE_DATA\000"
 14135      4152455F 
 14135      44415441 
 14135      00
 14136              	.LASF155:
 14137 01fe 74656D70 		.ascii	"temp_value\000"
 14137      5F76616C 
 14137      756500
 14138              	.LASF268:
 14139 0209 7468725F 		.ascii	"thr_pos\000"
 14139      706F7300 
 14140              	.LASF139:
 14141 0211 73745F57 		.ascii	"st_WR_spec\000"
 14141      525F7370 
 14141      656300
 14142              	.LASF205:
 14143 021c 6572725F 		.ascii	"err_joy_2\000"
 14143      6A6F795F 
 14143      3200
 14144              	.LASF52:
 14145 0226 72656164 		.ascii	"ready\000"
 14145      7900
 14146              	.LASF101:
 14147 022c 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14147      6964785F 
 14147      7573655F 
 14147      666F725F 
 14147      636F6E74 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 304


 14148              	.LASF158:
 14149 0244 6761696E 		.ascii	"gain\000"
 14149      00
 14150              	.LASF61:
 14151 0249 73745F64 		.ascii	"st_device\000"
 14151      65766963 
 14151      6500
 14152              	.LASF27:
 14153 0253 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14153      545F4D4F 
 14153      44455F45 
 14153      4D475F50 
 14153      524F504F 
 14154              	.LASF66:
 14155 026f 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14155      326E645F 
 14155      6D6F746F 
 14155      725F666C 
 14155      616700
 14156              	.LASF251:
 14157 0282 55445F63 		.ascii	"UD_counter\000"
 14157      6F756E74 
 14157      657200
 14158              	.LASF167:
 14159 028d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14159      414E445F 
 14159      4D45414E 
 14159      00
 14160              	.LASF111:
 14161 029a 72656164 		.ascii	"read_imu_flag\000"
 14161      5F696D75 
 14161      5F666C61 
 14161      6700
 14162              	.LASF119:
 14163 02a8 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14163      72645F45 
 14163      4D475F68 
 14163      6973746F 
 14163      72795F6F 
 14164              	.LASF255:
 14165 02c1 66697273 		.ascii	"first_tension_valid\000"
 14165      745F7465 
 14165      6E73696F 
 14165      6E5F7661 
 14165      6C696400 
 14166              	.LASF306:
 14167 02d5 74696D65 		.ascii	"timer_value\000"
 14167      725F7661 
 14167      6C756500 
 14168              	.LASF4:
 14169 02e1 6C6F6E67 		.ascii	"long int\000"
 14169      20696E74 
 14169      00
 14170              	.LASF145:
 14171 02ea 756E7573 		.ascii	"unused_bytes1\000"
 14171      65645F62 
 14171      79746573 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 305


 14171      3100
 14172              	.LASF192:
 14173 02f8 454D475F 		.ascii	"EMG_history_info_\000"
 14173      68697374 
 14173      6F72795F 
 14173      696E666F 
 14173      5F00
 14174              	.LASF217:
 14175 030a 53485F45 		.ascii	"SH_ENC_L\000"
 14175      4E435F4C 
 14175      00
 14176              	.LASF65:
 14177 0313 72657365 		.ascii	"reset_counters\000"
 14177      745F636F 
 14177      756E7465 
 14177      727300
 14178              	.LASF267:
 14179 0322 62696E5F 		.ascii	"bin_threshold\000"
 14179      74687265 
 14179      73686F6C 
 14179      6400
 14180              	.LASF122:
 14181 0330 75736572 		.ascii	"user_emg\000"
 14181      5F656D67 
 14181      00
 14182              	.LASF241:
 14183 0339 73616665 		.ascii	"safe_startup_motor_activation\000"
 14183      5F737461 
 14183      72747570 
 14183      5F6D6F74 
 14183      6F725F61 
 14184              	.LASF70:
 14185 0357 756E7573 		.ascii	"unused_bytes\000"
 14185      65645F62 
 14185      79746573 
 14185      00
 14186              	.LASF151:
 14187 0364 61636365 		.ascii	"accel_value\000"
 14187      6C5F7661 
 14187      6C756500 
 14188              	.LASF296:
 14189 0370 675F6164 		.ascii	"g_adc_measOld\000"
 14189      635F6D65 
 14189      61734F6C 
 14189      6400
 14190              	.LASF230:
 14191 037e 6175785F 		.ascii	"aux_encoder\000"
 14191      656E636F 
 14191      64657200 
 14192              	.LASF53:
 14193 038a 73745F63 		.ascii	"st_counters\000"
 14193      6F756E74 
 14193      65727300 
 14194              	.LASF216:
 14195 0396 53485F4D 		.ascii	"SH_MOT\000"
 14195      4F5400
 14196              	.LASF17:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 306


 14197 039d 666C6F61 		.ascii	"float32\000"
 14197      74333200 
 14198              	.LASF226:
 14199 03a5 656E636F 		.ascii	"encoder_reading_SPI\000"
 14199      6465725F 
 14199      72656164 
 14199      696E675F 
 14199      53504900 
 14200              	.LASF239:
 14201 03b9 6572726F 		.ascii	"error\000"
 14201      7200
 14202              	.LASF54:
 14203 03bf 656D675F 		.ascii	"emg_counter\000"
 14203      636F756E 
 14203      74657200 
 14204              	.LASF174:
 14205 03cb 57524954 		.ascii	"WRITE_END\000"
 14205      455F454E 
 14205      4400
 14206              	.LASF252:
 14207 03d5 4C525F63 		.ascii	"LR_counter\000"
 14207      6F756E74 
 14207      657200
 14208              	.LASF335:
 14209 03e0 706F735F 		.ascii	"pos_reconstruct\000"
 14209      7265636F 
 14209      6E737472 
 14209      75637400 
 14210              	.LASF259:
 14211 03f0 70776D5F 		.ascii	"pwm_limit_search\000"
 14211      6C696D69 
 14211      745F7365 
 14211      61726368 
 14211      00
 14212              	.LASF0:
 14213 0401 7369676E 		.ascii	"signed char\000"
 14213      65642063 
 14213      68617200 
 14214              	.LASF121:
 14215 040d 75736572 		.ascii	"user_code_string\000"
 14215      5F636F64 
 14215      655F7374 
 14215      72696E67 
 14215      00
 14216              	.LASF159:
 14217 041e 73745F63 		.ascii	"st_calib\000"
 14217      616C6962 
 14217      00
 14218              	.LASF199:
 14219 0427 6572725F 		.ascii	"err_emg_1\000"
 14219      656D675F 
 14219      3100
 14220              	.LASF200:
 14221 0431 6572725F 		.ascii	"err_emg_2\000"
 14221      656D675F 
 14221      3200
 14222              	.LASF109:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 307


 14223 043b 73776974 		.ascii	"switch_emg\000"
 14223      63685F65 
 14223      6D6700
 14224              	.LASF316:
 14225 0446 656D675F 		.ascii	"emg_2_status\000"
 14225      325F7374 
 14225      61747573 
 14225      00
 14226              	.LASF328:
 14227 0453 4144435F 		.ascii	"ADC_buf\000"
 14227      62756600 
 14228              	.LASF321:
 14229 045b 696E7465 		.ascii	"interrupt_flag\000"
 14229      72727570 
 14229      745F666C 
 14229      616700
 14230              	.LASF277:
 14231 046a 73746570 		.ascii	"step\000"
 14231      00
 14232              	.LASF219:
 14233 046f 63757272 		.ascii	"curr_error_sum\000"
 14233      5F657272 
 14233      6F725F73 
 14233      756D00
 14234              	.LASF1:
 14235 047e 756E7369 		.ascii	"unsigned char\000"
 14235      676E6564 
 14235      20636861 
 14235      7200
 14236              	.LASF95:
 14237 048c 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14237      72657665 
 14237      72735F6D 
 14237      6F746F72 
 14237      5F666C61 
 14238              	.LASF283:
 14239 04a2 726F775F 		.ascii	"row_start\000"
 14239      73746172 
 14239      7400
 14240              	.LASF325:
 14241 04ac 666F7263 		.ascii	"forced_open\000"
 14241      65645F6F 
 14241      70656E00 
 14242              	.LASF234:
 14243 04b8 73706565 		.ascii	"speed_encoder\000"
 14243      645F656E 
 14243      636F6465 
 14243      7200
 14244              	.LASF291:
 14245 04c6 675F7265 		.ascii	"g_refNew\000"
 14245      664E6577 
 14245      00
 14246              	.LASF275:
 14247 04cf 63757272 		.ascii	"curr_off\000"
 14247      5F6F6666 
 14247      00
 14248              	.LASF64:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 308


 14249 04d8 72696768 		.ascii	"right_left\000"
 14249      745F6C65 
 14249      667400
 14250              	.LASF93:
 14251 04e3 656E636F 		.ascii	"encoder_line\000"
 14251      6465725F 
 14251      6C696E65 
 14251      00
 14252              	.LASF315:
 14253 04f0 656D675F 		.ascii	"emg_1_status\000"
 14253      315F7374 
 14253      61747573 
 14253      00
 14254              	.LASF150:
 14255 04fd 666C6167 		.ascii	"flags\000"
 14255      7300
 14256              	.LASF198:
 14257 0503 68616E64 		.ascii	"handle_value\000"
 14257      6C655F76 
 14257      616C7565 
 14257      00
 14258              	.LASF20:
 14259 0510 63686172 		.ascii	"char\000"
 14259      00
 14260              	.LASF88:
 14261 0515 6D61785F 		.ascii	"max_step_pos\000"
 14261      73746570 
 14261      5F706F73 
 14261      00
 14262              	.LASF330:
 14263 0522 70776D5F 		.ascii	"pwm_sign\000"
 14263      7369676E 
 14263      00
 14264              	.LASF225:
 14265 052b 6D6F746F 		.ascii	"motor_control_generic\000"
 14265      725F636F 
 14265      6E74726F 
 14265      6C5F6765 
 14265      6E657269 
 14266              	.LASF339:
 14267 0541 675F696D 		.ascii	"g_imu\000"
 14267      7500
 14268              	.LASF304:
 14269 0547 66696C74 		.ascii	"filt_vel\000"
 14269      5F76656C 
 14269      00
 14270              	.LASF94:
 14271 0550 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14271      72617465 
 14271      5F6C696D 
 14271      69746572 
 14271      00
 14272              	.LASF74:
 14273 0561 6B5F645F 		.ascii	"k_d_c\000"
 14273      6300
 14274              	.LASF170:
 14275 0567 6164635F 		.ascii	"adc_status\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 309


 14275      73746174 
 14275      757300
 14276              	.LASF99:
 14277 0572 6D5F6D75 		.ascii	"m_mult\000"
 14277      6C7400
 14278              	.LASF73:
 14279 0579 6B5F695F 		.ascii	"k_i_c\000"
 14279      6300
 14280              	.LASF223:
 14281 057f 6D6F746F 		.ascii	"motor_dir\000"
 14281      725F6469 
 14281      7200
 14282              	.LASF270:
 14283 0589 62696E5F 		.ascii	"bin_st\000"
 14283      737400
 14284              	.LASF177:
 14285 0590 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14285      52533438 
 14285      355F5258 
 14285      5F457849 
 14285      6E746572 
 14286              	.LASF86:
 14287 05a9 706F735F 		.ascii	"pos_lim_sup\000"
 14287      6C696D5F 
 14287      73757000 
 14288              	.LASF157:
 14289 05b5 6F6C645F 		.ascii	"old_value\000"
 14289      76616C75 
 14289      6500
 14290              	.LASF107:
 14291 05bf 656D675F 		.ascii	"emg_speed\000"
 14291      73706565 
 14291      6400
 14292              	.LASF126:
 14293 05c9 72657374 		.ascii	"rest_vel\000"
 14293      5F76656C 
 14293      00
 14294              	.LASF164:
 14295 05d2 4E4F524D 		.ascii	"NORMAL\000"
 14295      414C00
 14296              	.LASF211:
 14297 05d9 6D6F746F 		.ascii	"motor_control_SH\000"
 14297      725F636F 
 14297      6E74726F 
 14297      6C5F5348 
 14297      00
 14298              	.LASF337:
 14299 05ea 7046696C 		.ascii	"pFile\000"
 14299      6500
 14300              	.LASF218:
 14301 05f0 706F735F 		.ascii	"pos_error_sum\000"
 14301      6572726F 
 14301      725F7375 
 14301      6D00
 14302              	.LASF118:
 14303 05fe 4144435F 		.ascii	"ADC_conf\000"
 14303      636F6E66 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 310


 14303      00
 14304              	.LASF312:
 14305 0607 6465765F 		.ascii	"dev_tension_f\000"
 14305      74656E73 
 14305      696F6E5F 
 14305      6600
 14306              	.LASF76:
 14307 0615 6B5F695F 		.ascii	"k_i_dl\000"
 14307      646C00
 14308              	.LASF50:
 14309 061c 62756666 		.ascii	"buffer\000"
 14309      657200
 14310              	.LASF78:
 14311 0623 6B5F705F 		.ascii	"k_p_c_dl\000"
 14311      635F646C 
 14311      00
 14312              	.LASF185:
 14313 062c 72785F64 		.ascii	"rx_data_type\000"
 14313      6174615F 
 14313      74797065 
 14313      00
 14314              	.LASF340:
 14315 0639 675F696D 		.ascii	"g_imuNew\000"
 14315      754E6577 
 14315      00
 14316              	.LASF162:
 14317 0642 73706565 		.ascii	"speed\000"
 14317      6400
 14318              	.LASF224:
 14319 0648 706F7369 		.ascii	"position_counter\000"
 14319      74696F6E 
 14319      5F636F75 
 14319      6E746572 
 14319      00
 14320              	.LASF279:
 14321 0659 74696D65 		.ascii	"timer_value_e\000"
 14321      725F7661 
 14321      6C75655F 
 14321      6500
 14322              	.LASF180:
 14323 0667 64617461 		.ascii	"data_packet_index\000"
 14323      5F706163 
 14323      6B65745F 
 14323      696E6465 
 14323      7800
 14324              	.LASF182:
 14325 0679 64617461 		.ascii	"data_packet_buffer\000"
 14325      5F706163 
 14325      6B65745F 
 14325      62756666 
 14325      657200
 14326              	.LASF196:
 14327 068c 73745F72 		.ascii	"st_ref_p\000"
 14327      65665F70 
 14327      00
 14328              	.LASF314:
 14329 0695 6379636C 		.ascii	"cycles_status\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 311


 14329      65735F73 
 14329      74617475 
 14329      7300
 14330              	.LASF187:
 14331 06a3 636F756E 		.ascii	"counter_calibration\000"
 14331      7465725F 
 14331      63616C69 
 14331      62726174 
 14331      696F6E00 
 14332              	.LASF293:
 14333 06b7 675F6D65 		.ascii	"g_meas\000"
 14333      617300
 14334              	.LASF278:
 14335 06be 74696D65 		.ascii	"timer_value_s\000"
 14335      725F7661 
 14335      6C75655F 
 14335      7300
 14336              	.LASF334:
 14337 06cc 456E636F 		.ascii	"Encoder_Check\000"
 14337      6465725F 
 14337      43686563 
 14337      6B00
 14338              	.LASF238:
 14339 06da 636F6D70 		.ascii	"comp_value_encoder\000"
 14339      5F76616C 
 14339      75655F65 
 14339      6E636F64 
 14339      657200
 14340              	.LASF331:
 14341 06ed 64617461 		.ascii	"data_encoder_raw\000"
 14341      5F656E63 
 14341      6F646572 
 14341      5F726177 
 14341      00
 14342              	.LASF290:
 14343 06fe 675F7265 		.ascii	"g_ref\000"
 14343      6600
 14344              	.LASF25:
 14345 0704 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14345      545F4D4F 
 14345      44455F45 
 14345      58544552 
 14345      4E414C00 
 14346              	.LASF229:
 14347 0718 696E6465 		.ascii	"index\000"
 14347      7800
 14348              	.LASF137:
 14349 071e 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14349      6D756D5F 
 14349      70726573 
 14349      73757265 
 14349      5F6B5061 
 14350              	.LASF127:
 14351 0733 72657374 		.ascii	"rest_position_flag\000"
 14351      5F706F73 
 14351      6974696F 
 14351      6E5F666C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 312


 14351      616700
 14352              	.LASF129:
 14353 0746 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14353      7469636B 
 14353      5F636C6F 
 14353      73757265 
 14353      5F737065 
 14354              	.LASF79:
 14355 075d 6B5F695F 		.ascii	"k_i_c_dl\000"
 14355      635F646C 
 14355      00
 14356              	.LASF186:
 14357 0766 7061636B 		.ascii	"package_count\000"
 14357      6167655F 
 14357      636F756E 
 14357      7400
 14358              	.LASF38:
 14359 0774 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14359      5F414E44 
 14359      5F504F53 
 14359      5F434F4E 
 14359      54524F4C 
 14360              	.LASF160:
 14361 0789 656E6162 		.ascii	"enabled\000"
 14361      6C656400 
 14362              	.LASF5:
 14363 0791 6C6F6E67 		.ascii	"long unsigned int\000"
 14363      20756E73 
 14363      69676E65 
 14363      6420696E 
 14363      7400
 14364              	.LASF338:
 14365 07a3 70454D47 		.ascii	"pEMGHFile\000"
 14365      4846696C 
 14365      6500
 14366              	.LASF59:
 14367 07ad 746F7461 		.ascii	"total_time_on\000"
 14367      6C5F7469 
 14367      6D655F6F 
 14367      6E00
 14368              	.LASF172:
 14369 07bb 57524954 		.ascii	"WRITE_CYCLES\000"
 14369      455F4359 
 14369      434C4553 
 14369      00
 14370              	.LASF131:
 14371 07c8 6A6F7973 		.ascii	"joystick_gains\000"
 14371      7469636B 
 14371      5F676169 
 14371      6E7300
 14372              	.LASF45:
 14373 07d7 686F6C64 		.ascii	"hold_curr\000"
 14373      5F637572 
 14373      7200
 14374              	.LASF31:
 14375 07e1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14375      545F4D4F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 313


 14375      44455F4A 
 14375      4F595354 
 14375      49434B00 
 14376              	.LASF60:
 14377 07f5 746F7461 		.ascii	"total_time_rest\000"
 14377      6C5F7469 
 14377      6D655F72 
 14377      65737400 
 14378              	.LASF81:
 14379 0805 61637469 		.ascii	"activ\000"
 14379      7600
 14380              	.LASF262:
 14381 080b 6D696E5F 		.ascii	"min_tension\000"
 14381      74656E73 
 14381      696F6E00 
 14382              	.LASF326:
 14383 0817 62617474 		.ascii	"battery_low_SoC\000"
 14383      6572795F 
 14383      6C6F775F 
 14383      536F4300 
 14384              	.LASF195:
 14385 0827 6D6F746F 		.ascii	"motor_idx\000"
 14385      725F6964 
 14385      7800
 14386              	.LASF98:
 14387 0831 6D5F6F66 		.ascii	"m_off\000"
 14387      6600
 14388              	.LASF319:
 14389 0837 72657365 		.ascii	"reset_last_value_flag\000"
 14389      745F6C61 
 14389      73745F76 
 14389      616C7565 
 14389      5F666C61 
 14390              	.LASF154:
 14391 084d 71756174 		.ascii	"quat_value\000"
 14391      5F76616C 
 14391      756500
 14392              	.LASF124:
 14393 0858 72657374 		.ascii	"rest_pos\000"
 14393      5F706F73 
 14393      00
 14394              	.LASF40:
 14395 0861 63757272 		.ascii	"curr\000"
 14395      00
 14396              	.LASF173:
 14397 0866 57414954 		.ascii	"WAIT_QUERY\000"
 14397      5F515545 
 14397      525900
 14398              	.LASF91:
 14399 0871 696E7075 		.ascii	"input_mode\000"
 14399      745F6D6F 
 14399      646500
 14400              	.LASF36:
 14401 087c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14401      524F4C5F 
 14401      50574D00 
 14402              	.LASF263:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 314


 14403 0888 6379636C 		.ascii	"cycles_counter_update\000"
 14403      65735F63 
 14403      6F756E74 
 14403      65725F75 
 14403      70646174 
 14404              	.LASF342:
 14405 089e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14405      43313120 
 14405      352E342E 
 14405      31203230 
 14405      31363036 
 14406 08d1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14406      20726576 
 14406      6973696F 
 14406      6E203233 
 14406      37373135 
 14407 0904 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14407      66756E63 
 14407      74696F6E 
 14407      2D736563 
 14407      74696F6E 
 14408              	.LASF42:
 14409 092c 73745F72 		.ascii	"st_ref\000"
 14409      656600
 14410              	.LASF307:
 14411 0933 74696D65 		.ascii	"timer_value0\000"
 14411      725F7661 
 14411      6C756530 
 14411      00
 14412              	.LASF123:
 14413 0940 73745F53 		.ascii	"st_SH_spec\000"
 14413      485F7370 
 14413      656300
 14414              	.LASF244:
 14415 094b 765F7661 		.ascii	"v_value\000"
 14415      6C756500 
 14416              	.LASF300:
 14417 0953 63616C69 		.ascii	"calib\000"
 14417      6200
 14418              	.LASF135:
 14419 0959 73745F46 		.ascii	"st_FB_spec\000"
 14419      425F7370 
 14419      656300
 14420              	.LASF6:
 14421 0964 6C6F6E67 		.ascii	"long long int\000"
 14421      206C6F6E 
 14421      6720696E 
 14421      7400
 14422              	.LASF34:
 14423 0972 53485F63 		.ascii	"SH_control_mode\000"
 14423      6F6E7472 
 14423      6F6C5F6D 
 14423      6F646500 
 14424              	.LASF191:
 14425 0982 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14425      4E445F4D 
 14425      4F544F52 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 315


 14425      5F494458 
 14425      00
 14426              	.LASF327:
 14427 0993 6368616E 		.ascii	"change_ext_ref_flag\000"
 14427      67655F65 
 14427      78745F72 
 14427      65665F66 
 14427      6C616700 
 14428              	.LASF19:
 14429 09a7 646F7562 		.ascii	"double\000"
 14429      6C6500
 14430              	.LASF302:
 14431 09ae 66696C74 		.ascii	"filt_curr_diff\000"
 14431      5F637572 
 14431      725F6469 
 14431      666600
 14432              	.LASF207:
 14433 09bd 706F735F 		.ascii	"pos_sum\000"
 14433      73756D00 
 14434              	.LASF210:
 14435 09c5 696E7465 		.ascii	"interrupt_manager\000"
 14435      72727570 
 14435      745F6D61 
 14435      6E616765 
 14435      7200
 14436              	.LASF97:
 14437 09d7 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14437      7261775F 
 14437      72656164 
 14437      5F636F6E 
 14437      6600
 14438              	.LASF208:
 14439 09e9 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14439      7574655F 
 14439      536F6674 
 14439      48616E64 
 14439      5F325F6D 
 14440              	.LASF163:
 14441 0a11 72657065 		.ascii	"repetitions\000"
 14441      74697469 
 14441      6F6E7300 
 14442              	.LASF87:
 14443 0a1d 6D61785F 		.ascii	"max_step_neg\000"
 14443      73746570 
 14443      5F6E6567 
 14443      00
 14444              	.LASF243:
 14445 0a2a 636F756E 		.ascii	"count_startup_motor\000"
 14445      745F7374 
 14445      61727475 
 14445      705F6D6F 
 14445      746F7200 
 14446              	.LASF134:
 14447 0a3e 736C6176 		.ascii	"slave_ID\000"
 14447      655F4944 
 14447      00
 14448              	.LASF168:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 316


 14449 0a47 57414954 		.ascii	"WAIT\000"
 14449      00
 14450              	.LASF18:
 14451 0a4c 666C6F61 		.ascii	"float\000"
 14451      7400
 14452              	.LASF113:
 14453 0a52 494D555F 		.ascii	"IMU_conf\000"
 14453      636F6E66 
 14453      00
 14454              	.LASF256:
 14455 0a5b 636F756E 		.ascii	"count\000"
 14455      7400
 14456              	.LASF46:
 14457 0a61 73745F61 		.ascii	"st_adc_meas\000"
 14457      64635F6D 
 14457      65617300 
 14458              	.LASF287:
 14459 0a6d 6D5F6164 		.ascii	"m_addr\000"
 14459      647200
 14460              	.LASF299:
 14461 0a74 635F6D65 		.ascii	"c_mem\000"
 14461      6D00
 14462              	.LASF8:
 14463 0a7a 756E7369 		.ascii	"unsigned int\000"
 14463      676E6564 
 14463      20696E74 
 14463      00
 14464              	.LASF269:
 14465 0a87 6D61785F 		.ascii	"max_pos\000"
 14465      706F7300 
 14466              	.LASF336:
 14467 0a8f 72657374 		.ascii	"rest_pos_curr_ref\000"
 14467      5F706F73 
 14467      5F637572 
 14467      725F7265 
 14467      6600
 14468              	.LASF144:
 14469 0aa1 666C6167 		.ascii	"flag\000"
 14469      00
 14470              	.LASF92:
 14471 0aa6 636F6E74 		.ascii	"control_mode\000"
 14471      726F6C5F 
 14471      6D6F6465 
 14471      00
 14472              	.LASF21:
 14473 0ab3 63797374 		.ascii	"cystatus\000"
 14473      61747573 
 14473      00
 14474              	.LASF26:
 14475 0abc 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14475      545F4D4F 
 14475      44455F45 
 14475      4E434F44 
 14475      45523300 
 14476              	.LASF110:
 14477 0ad0 73745F69 		.ascii	"st_imu\000"
 14477      6D7500
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 317


 14478              	.LASF202:
 14479 0ad7 63757272 		.ascii	"current_emg\000"
 14479      656E745F 
 14479      656D6700 
 14480              	.LASF183:
 14481 0ae3 72785F71 		.ascii	"rx_queue\000"
 14481      75657565 
 14481      00
 14482              	.LASF253:
 14483 0aec 55445F6D 		.ascii	"UD_mean_value\000"
 14483      65616E5F 
 14483      76616C75 
 14483      6500
 14484              	.LASF228:
 14485 0afa 6173736F 		.ascii	"assoc_motor\000"
 14485      635F6D6F 
 14485      746F7200 
 14486              	.LASF47:
 14487 0b06 6164645F 		.ascii	"add_emg\000"
 14487      656D6700 
 14488              	.LASF215:
 14489 0b0e 695F7265 		.ascii	"i_ref\000"
 14489      6600
 14490              	.LASF105:
 14491 0b14 656D675F 		.ascii	"emg_threshold\000"
 14491      74687265 
 14491      73686F6C 
 14491      6400
 14492              	.LASF280:
 14493 0b22 73617665 		.ascii	"save_cycles_eeprom\000"
 14493      5F637963 
 14493      6C65735F 
 14493      65657072 
 14493      6F6D00
 14494              	.LASF56:
 14495 0b35 63757272 		.ascii	"current_hist\000"
 14495      656E745F 
 14495      68697374 
 14495      00
 14496              	.LASF37:
 14497 0b42 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14497      524F4C5F 
 14497      43555252 
 14497      454E5400 
 14498              	.LASF23:
 14499 0b52 6C6F6E67 		.ascii	"long double\000"
 14499      20646F75 
 14499      626C6500 
 14500              	.LASF166:
 14501 0b5e 44495343 		.ascii	"DISCARD\000"
 14501      41524400 
 14502              	.LASF220:
 14503 0b66 70726576 		.ascii	"prev_pos_err\000"
 14503      5F706F73 
 14503      5F657272 
 14503      00
 14504              	.LASF236:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 318


 14505 0b73 696E6974 		.ascii	"init_rot\000"
 14505      5F726F74 
 14505      00
 14506              	.LASF260:
 14507 0b7c 6D6F745F 		.ascii	"mot_idx\000"
 14507      69647800 
 14508              	.LASF303:
 14509 0b84 66696C74 		.ascii	"filt_i\000"
 14509      5F6900
 14510              	.LASF102:
 14511 0b8b 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14511      725F6861 
 14511      6E646C65 
 14511      5F726174 
 14511      696F00
 14512              	.LASF301:
 14513 0b9e 66696C74 		.ascii	"filt_v\000"
 14513      5F7600
 14514              	.LASF324:
 14515 0ba5 72657374 		.ascii	"rest_enabled\000"
 14515      5F656E61 
 14515      626C6564 
 14515      00
 14516              	.LASF292:
 14517 0bb2 675F7265 		.ascii	"g_refOld\000"
 14517      664F6C64 
 14517      00
 14518              	.LASF213:
 14519 0bbb 706F735F 		.ascii	"pos_error\000"
 14519      6572726F 
 14519      7200
 14520              	.LASF152:
 14521 0bc5 6779726F 		.ascii	"gyro_value\000"
 14521      5F76616C 
 14521      756500
 14522              	.LASF115:
 14523 0bd0 63757272 		.ascii	"curr_time\000"
 14523      5F74696D 
 14523      6500
 14524              	.LASF100:
 14525 0bda 646F7562 		.ascii	"double_encoder_on_off\000"
 14525      6C655F65 
 14525      6E636F64 
 14525      65725F6F 
 14525      6E5F6F66 
 14526              	.LASF261:
 14527 0bf0 6D61785F 		.ascii	"max_tension\000"
 14527      74656E73 
 14527      696F6E00 
 14528              	.LASF190:
 14529 0bfc 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14529      525F4944 
 14529      5800
 14530              	.LASF237:
 14531 0c06 6C617374 		.ascii	"last_value_encoder\000"
 14531      5F76616C 
 14531      75655F65 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 319


 14531      6E636F64 
 14531      657200
 14532              	.LASF188:
 14533 0c19 636F756E 		.ascii	"counter_tension_func\000"
 14533      7465725F 
 14533      74656E73 
 14533      696F6E5F 
 14533      66756E63 
 14534              	.LASF308:
 14535 0c2e 6379636C 		.ascii	"cycle_time\000"
 14535      655F7469 
 14535      6D6500
 14536              	.LASF209:
 14537 0c39 66736D5F 		.ascii	"fsm_state\000"
 14537      73746174 
 14537      6500
 14538              	.LASF7:
 14539 0c43 6C6F6E67 		.ascii	"long long unsigned int\000"
 14539      206C6F6E 
 14539      6720756E 
 14539      7369676E 
 14539      65642069 
 14540              	.LASF317:
 14541 0c5a 6A6F795F 		.ascii	"joy_UD_status\000"
 14541      55445F73 
 14541      74617475 
 14541      7300
 14542              	.LASF51:
 14543 0c68 6C656E67 		.ascii	"length\000"
 14543      746800
 14544              	.LASF149:
 14545 0c6f 73745F69 		.ascii	"st_imu_data\000"
 14545      6D755F64 
 14545      61746100 
 14546              	.LASF153:
 14547 0c7b 6D61675F 		.ascii	"mag_value\000"
 14547      76616C75 
 14547      6500
 14548              	.LASF41:
 14549 0c85 6F6E6F66 		.ascii	"onoff\000"
 14549      6600
 14550              	.LASF232:
 14551 0c8b 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14551      76616C75 
 14551      655F656E 
 14551      636F6465 
 14551      725F3332 
 14552              	.LASF221:
 14553 0ca0 70726576 		.ascii	"prev_curr_err\000"
 14553      5F637572 
 14553      725F6572 
 14553      7200
 14554              	.LASF181:
 14555 0cae 64617461 		.ascii	"data_packet_length\000"
 14555      5F706163 
 14555      6B65745F 
 14555      6C656E67 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 320


 14555      746800
 14556              	.LASF72:
 14557 0cc1 6B5F705F 		.ascii	"k_p_c\000"
 14557      6300
 14558              	.LASF309:
 14559 0cc7 6465765F 		.ascii	"dev_tension\000"
 14559      74656E73 
 14559      696F6E00 
 14560              	.LASF83:
 14561 0cd3 6D6F746F 		.ascii	"motor_driver_type\000"
 14561      725F6472 
 14561      69766572 
 14561      5F747970 
 14561      6500
 14562              	.LASF169:
 14563 0ce5 57414954 		.ascii	"WAIT_EoC\000"
 14563      5F456F43 
 14563      00
 14564              	.LASF22:
 14565 0cee 72656738 		.ascii	"reg8\000"
 14565      00
 14566              	.LASF272:
 14567 0cf3 62696E5F 		.ascii	"bin_1\000"
 14567      3100
 14568              	.LASF273:
 14569 0cf9 62696E5F 		.ascii	"bin_2\000"
 14569      3200
 14570              	.LASF248:
 14571 0cff 695F6175 		.ascii	"i_aux\000"
 14571      7800
 14572              	.LASF138:
 14573 0d05 70726F70 		.ascii	"prop_err_fb_gain\000"
 14573      5F657272 
 14573      5F66625F 
 14573      6761696E 
 14573      00
 14574              	.LASF206:
 14575 0d16 706F735F 		.ascii	"pos_diff\000"
 14575      64696666 
 14575      00
 14576              	.LASF282:
 14577 0d1f 726F775F 		.ascii	"row_number\000"
 14577      6E756D62 
 14577      657200
 14578              	.LASF258:
 14579 0d2a 6F766572 		.ascii	"overcurrent_control\000"
 14579      63757272 
 14579      656E745F 
 14579      636F6E74 
 14579      726F6C00 
 14580              	.LASF274:
 14581 0d3e 63757272 		.ascii	"curr_pos\000"
 14581      5F706F73 
 14581      00
 14582              	.LASF165:
 14583 0d47 52455345 		.ascii	"RESET\000"
 14583      5400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 321


 14584              	.LASF133:
 14585 0d4d 736C6176 		.ascii	"slave_comm_active\000"
 14585      655F636F 
 14585      6D6D5F61 
 14585      63746976 
 14585      6500
 14586              	.LASF247:
 14587 0d5f 616E616C 		.ascii	"analog_read_end\000"
 14587      6F675F72 
 14587      6561645F 
 14587      656E6400 
 14588              	.LASF332:
 14589 0d6f 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 14589      636F6465 
 14589      725F4C69 
 14589      6E655F43 
 14589      6F6E6E65 
 14590              	.LASF69:
 14591 0d88 6465765F 		.ascii	"dev_type\000"
 14591      74797065 
 14591      00
 14592              	.LASF265:
 14593 0d91 656D675F 		.ascii	"emg_cycle_status\000"
 14593      6379636C 
 14593      655F7374 
 14593      61747573 
 14593      00
 14594              	.LASF120:
 14595 0da2 73745F75 		.ascii	"st_user\000"
 14595      73657200 
 14596              	.LASF103:
 14597 0daa 67656172 		.ascii	"gears_params\000"
 14597      735F7061 
 14597      72616D73 
 14597      00
 14598              	.LASF114:
 14599 0db7 73745F65 		.ascii	"st_expansion\000"
 14599      7870616E 
 14599      73696F6E 
 14599      00
 14600              	.LASF108:
 14601 0dc4 656D675F 		.ascii	"emg_calibration_flag\000"
 14601      63616C69 
 14601      62726174 
 14601      696F6E5F 
 14601      666C6167 
 14602              	.LASF43:
 14603 0dd9 73745F6D 		.ascii	"st_meas\000"
 14603      65617300 
 14604              	.LASF284:
 14605 0de1 61646472 		.ascii	"addr_start\000"
 14605      5F737461 
 14605      727400
 14606              	.LASF288:
 14607 0dec 70776D5F 		.ascii	"pwm_preload_values\000"
 14607      7072656C 
 14607      6F61645F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 322


 14607      76616C75 
 14607      657300
 14608              	.LASF130:
 14609 0dff 6A6F7973 		.ascii	"joystick_threshold\000"
 14609      7469636B 
 14609      5F746872 
 14609      6573686F 
 14609      6C6400
 14610              	.LASF32:
 14611 0e12 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14611      545F4D4F 
 14611      44455F45 
 14611      4D475F50 
 14611      524F504F 
 14612              	.LASF176:
 14613 0e31 636F756E 		.ascii	"counter_status\000"
 14613      7465725F 
 14613      73746174 
 14613      757300
 14614              	.LASF298:
 14615 0e40 675F6D65 		.ascii	"g_mem\000"
 14615      6D00
 14616              	.LASF249:
 14617 0e46 656D675F 		.ascii	"emg_counter_1\000"
 14617      636F756E 
 14617      7465725F 
 14617      3100
 14618              	.LASF250:
 14619 0e54 656D675F 		.ascii	"emg_counter_2\000"
 14619      636F756E 
 14619      7465725F 
 14619      3200
 14620              	.LASF240:
 14621 0e62 6F6E6C79 		.ascii	"only_first_time\000"
 14621      5F666972 
 14621      73745F74 
 14621      696D6500 
 14622              	.LASF11:
 14623 0e72 75696E74 		.ascii	"uint8\000"
 14623      3800
 14624              	.LASF128:
 14625 0e78 73745F4A 		.ascii	"st_JOY_spec\000"
 14625      4F595F73 
 14625      70656300 
 14626              	.LASF235:
 14627 0e84 76616C75 		.ascii	"value_diff\000"
 14627      655F6469 
 14627      666600
 14628              	.LASF276:
 14629 0e8f 63757272 		.ascii	"curr_ref\000"
 14629      5F726566 
 14629      00
 14630              	.LASF2:
 14631 0e98 73686F72 		.ascii	"short int\000"
 14631      7420696E 
 14631      7400
 14632              	.LASF77:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 323


 14633 0ea2 6B5F645F 		.ascii	"k_d_dl\000"
 14633      646C00
 14634              	.LASF233:
 14635 0ea9 76616C75 		.ascii	"value_encoder\000"
 14635      655F656E 
 14635      636F6465 
 14635      7200
 14636              	.LASF48:
 14637 0eb7 6A6F7973 		.ascii	"joystick\000"
 14637      7469636B 
 14637      00
 14638              	.LASF146:
 14639 0ec0 6D6F746F 		.ascii	"motor\000"
 14639      7200
 14640              	.LASF311:
 14641 0ec6 6465765F 		.ascii	"dev_pwm_sat\000"
 14641      70776D5F 
 14641      73617400 
 14642              	.LASF62:
 14643 0ed2 68775F6D 		.ascii	"hw_maint_date\000"
 14643      61696E74 
 14643      5F646174 
 14643      6500
 14644              	.LASF193:
 14645 0ee0 66756E63 		.ascii	"function_scheduler\000"
 14645      74696F6E 
 14645      5F736368 
 14645      6564756C 
 14645      657200
 14646              	.LASF194:
 14647 0ef3 636F6D70 		.ascii	"compute_reference\000"
 14647      7574655F 
 14647      72656665 
 14647      72656E63 
 14647      6500
 14648              	.LASF222:
 14649 0f05 70726576 		.ascii	"prev_pwm\000"
 14649      5F70776D 
 14649      00
 14650              	.LASF63:
 14651 0f0e 73746174 		.ascii	"stats_period_begin_date\000"
 14651      735F7065 
 14651      72696F64 
 14651      5F626567 
 14651      696E5F64 
 14652              	.LASF289:
 14653 0f26 49544D5F 		.ascii	"ITM_RxBuffer\000"
 14653      52784275 
 14653      66666572 
 14653      00
 14654              	.LASF313:
 14655 0f33 706F775F 		.ascii	"pow_tension\000"
 14655      74656E73 
 14655      696F6E00 
 14656              	.LASF15:
 14657 0f3f 696E7431 		.ascii	"int16\000"
 14657      3600
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 324


 14658              	.LASF116:
 14659 0f45 72656164 		.ascii	"read_exp_port_flag\000"
 14659      5F657870 
 14659      5F706F72 
 14659      745F666C 
 14659      616700
 14660              	.LASF82:
 14661 0f58 61637469 		.ascii	"activate_pwm_rescaling\000"
 14661      76617465 
 14661      5F70776D 
 14661      5F726573 
 14661      63616C69 
 14662              	.LASF75:
 14663 0f6f 6B5F705F 		.ascii	"k_p_dl\000"
 14663      646C00
 14664              	.LASF44:
 14665 0f76 65737469 		.ascii	"estim_curr\000"
 14665      6D5F6375 
 14665      727200
 14666              	.LASF310:
 14667 0f81 6465765F 		.ascii	"dev_pwm_limit\000"
 14667      70776D5F 
 14667      6C696D69 
 14667      7400
 14668              	.LASF281:
 14669 0f8f 73746174 		.ascii	"status\000"
 14669      757300
 14670              	.LASF214:
 14671 0f96 63757272 		.ascii	"curr_error\000"
 14671      5F657272 
 14671      6F7200
 14672              	.LASF333:
 14673 0fa1 456E636F 		.ascii	"Encoder_Value\000"
 14673      6465725F 
 14673      56616C75 
 14673      6500
 14674              	.LASF68:
 14675 0faf 75736572 		.ascii	"user_id\000"
 14675      5F696400 
 14676              	.LASF266:
 14677 0fb7 72657374 		.ascii	"rest_cycle_status\000"
 14677      5F637963 
 14677      6C655F73 
 14677      74617475 
 14677      7300
 14678              	.LASF204:
 14679 0fc9 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 14679      7574655F 
 14679      536F6674 
 14679      48616E64 
 14679      5F325F6D 
 14680              	.LASF231:
 14681 0ff6 746D705F 		.ascii	"tmp_value_encoder\000"
 14681      76616C75 
 14681      655F656E 
 14681      636F6465 
 14681      7200
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 325


 14682              	.LASF178:
 14683 1008 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 14683      4359434C 
 14683      45535F48 
 14683      616E646C 
 14683      657200
 14684              	.LASF67:
 14685 101b 62617564 		.ascii	"baud_rate\000"
 14685      5F726174 
 14685      6500
 14686              	.LASF141:
 14687 1025 66617374 		.ascii	"fast_act_threshold\000"
 14687      5F616374 
 14687      5F746872 
 14687      6573686F 
 14687      6C6400
 14688              	.LASF112:
 14689 1038 5350495F 		.ascii	"SPI_read_delay\000"
 14689      72656164 
 14689      5F64656C 
 14689      617900
 14690              	.LASF3:
 14691 1047 73686F72 		.ascii	"short unsigned int\000"
 14691      7420756E 
 14691      7369676E 
 14691      65642069 
 14691      6E7400
 14692              	.LASF96:
 14693 105a 73745F65 		.ascii	"st_encoder\000"
 14693      6E636F64 
 14693      657200
 14694              	.LASF295:
 14695 1065 675F6164 		.ascii	"g_adc_meas\000"
 14695      635F6D65 
 14695      617300
 14696              	.LASF136:
 14697 1070 6D61785F 		.ascii	"max_residual_current\000"
 14697      72657369 
 14697      6475616C 
 14697      5F637572 
 14697      72656E74 
 14698              	.LASF201:
 14699 1085 454E435F 		.ascii	"ENC_L\000"
 14699      4C00
 14700              	.LASF143:
 14701 108b 73745F65 		.ascii	"st_eeprom\000"
 14701      6570726F 
 14701      6D00
 14702              	.LASF318:
 14703 1095 6A6F795F 		.ascii	"joy_LR_status\000"
 14703      4C525F73 
 14703      74617475 
 14703      7300
 14704              	.LASF343:
 14705 10a3 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 14705      72635C69 
 14705      6E746572 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 326


 14705      72757074 
 14705      696F6E73 
 14706              	.LASF197:
 14707 10ba 73745F72 		.ascii	"st_refOld_p\000"
 14707      65664F6C 
 14707      645F7000 
 14708              	.LASF16:
 14709 10c6 696E7433 		.ascii	"int32\000"
 14709      3200
 14710              	.LASF329:
 14711 10cc 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 14711      4F465F41 
 14711      4E414C4F 
 14711      475F494E 
 14711      50555453 
 14712              	.LASF71:
 14713 10e1 73745F6D 		.ascii	"st_motor\000"
 14713      6F746F72 
 14713      00
 14714              	.LASF341:
 14715 10ea 6D617374 		.ascii	"master_mode\000"
 14715      65725F6D 
 14715      6F646500 
 14716              	.LASF39:
 14717 10f6 46535F46 		.ascii	"FS_FILE\000"
 14717      494C4500 
 14718              	.LASF84:
 14719 10fe 706F735F 		.ascii	"pos_lim_flag\000"
 14719      6C696D5F 
 14719      666C6167 
 14719      00
 14720              	.LASF254:
 14721 110b 4C525F6D 		.ascii	"LR_mean_value\000"
 14721      65616E5F 
 14721      76616C75 
 14721      6500
 14722              	.LASF294:
 14723 1119 675F6D65 		.ascii	"g_measOld\000"
 14723      61734F6C 
 14723      6400
 14724              	.LASF286:
 14725 1123 726F775F 		.ascii	"row_end\000"
 14725      656E6400 
 14726              	.LASF35:
 14727 112b 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 14727      524F4C5F 
 14727      414E474C 
 14727      4500
 14728              	.LASF9:
 14729 1139 5F5F696E 		.ascii	"__int32_t\000"
 14729      7433325F 
 14729      7400
 14730              	.LASF58:
 14731 1143 77697265 		.ascii	"wire_disp\000"
 14731      5F646973 
 14731      7000
 14732              	.LASF323:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cczDNQ4g.s 			page 327


 14733 114d 63616E5F 		.ascii	"can_write\000"
 14733      77726974 
 14733      6500
 14734              	.LASF106:
 14735 1157 656D675F 		.ascii	"emg_max_value\000"
 14735      6D61785F 
 14735      76616C75 
 14735      6500
 14736              	.LASF90:
 14737 1165 63757272 		.ascii	"current_limit\000"
 14737      656E745F 
 14737      6C696D69 
 14737      7400
 14738              	.LASF33:
 14739 1173 53485F69 		.ascii	"SH_input_mode\000"
 14739      6E707574 
 14739      5F6D6F64 
 14739      6500
 14740              	.LASF175:
 14741 1181 4E4F4E45 		.ascii	"NONE\000"
 14741      00
 14742              	.LASF140:
 14743 1186 61637469 		.ascii	"activation_mode\000"
 14743      76617469 
 14743      6F6E5F6D 
 14743      6F646500 
 14744              	.LASF12:
 14745 1196 75696E74 		.ascii	"uint16\000"
 14745      313600
 14746              	.LASF125:
 14747 119d 72657374 		.ascii	"rest_delay\000"
 14747      5F64656C 
 14747      617900
 14748              	.LASF156:
 14749 11a8 73745F66 		.ascii	"st_filter\000"
 14749      696C7465 
 14749      7200
 14750              	.LASF245:
 14751 11b2 76765F76 		.ascii	"vv_value\000"
 14751      616C7565 
 14751      00
 14752              	.LASF80:
 14753 11bb 6B5F645F 		.ascii	"k_d_c_dl\000"
 14753      635F646C 
 14753      00
 14754              	.LASF161:
 14755 11c4 64697265 		.ascii	"direction\000"
 14755      6374696F 
 14755      6E00
 14756              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
