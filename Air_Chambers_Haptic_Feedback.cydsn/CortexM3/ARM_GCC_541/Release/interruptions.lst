ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e E1E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 754B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D980 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 E3000000 		.word	.L12+1
 179 0034 31010000 		.word	.L13+1
 180 0038 9B010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6D4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6C4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6B4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 6A4B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 694A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 684B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 664B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 644B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 624B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 614B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5E4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 8


 225              		.loc 1 175 0
 226 007c 5D4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A780 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5B4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A280 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 584B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09D80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 98E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 249              		.loc 1 186 0
 250 00a2 554B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 0DD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 0AD0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b4 504B     		ldr	r3, .L31+8
 261 00b6 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 262 00ba 002B     		cmp	r3, #0
 263 00bc 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00be 4E4B     		ldr	r3, .L31+8
 266 00c0 93F8B132 		ldrb	r3, [r3, #689]	@ zero_extendqisi2
 267 00c4 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 9


 269 00c8 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00ca 0023     		movs	r3, #0
 273 00cc FB71     		strb	r3, [r7, #7]
 274 00ce 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00d0 0123     		movs	r3, #1
 278 00d2 FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d4 494B     		ldr	r3, .L31+12
 282 00d6 0022     		movs	r2, #0
 283 00d8 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00da 454B     		ldr	r3, .L31
 286 00dc 0222     		movs	r2, #2
 287 00de 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00e0 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00e2 464A     		ldr	r2, .L31+12
 293 00e4 7B79     		ldrb	r3, [r7, #5]
 294 00e6 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e8 444B     		ldr	r3, .L31+12
 297 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00ec 012B     		cmp	r3, #1
 299 00ee 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00f0 424B     		ldr	r3, .L31+12
 302 00f2 0022     		movs	r2, #0
 303 00f4 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 10


 305 00f6 3E4B     		ldr	r3, .L31
 306 00f8 0022     		movs	r2, #0
 307 00fa 1A70     		strb	r2, [r3]
 308 00fc 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fe 3F4B     		ldr	r3, .L31+12
 312 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0102 802B     		cmp	r3, #128
 314 0104 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0106 3D4B     		ldr	r3, .L31+12
 317 0108 0022     		movs	r2, #0
 318 010a 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 010c 384B     		ldr	r3, .L31
 321 010e 0022     		movs	r2, #0
 322 0110 1A70     		strb	r2, [r3]
 323 0112 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0114 3A4B     		ldr	r3, .L31+16
 327 0116 0022     		movs	r2, #0
 328 0118 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 011a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 011c 002B     		cmp	r3, #0
 332 011e 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 0120 334B     		ldr	r3, .L31
 335 0122 0322     		movs	r2, #3
 336 0124 1A70     		strb	r2, [r3]
 337 0126 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0128 314B     		ldr	r3, .L31
 341 012a 0422     		movs	r2, #4
 342 012c 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012e 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 0130 334B     		ldr	r3, .L31+16
 348 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0134 1946     		mov	r1, r3
 350 0136 334A     		ldr	r2, .L31+20
 351 0138 7B79     		ldrb	r3, [r7, #5]
 352 013a 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 013c 304B     		ldr	r3, .L31+16
 355 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 0140 0133     		adds	r3, r3, #1
 357 0142 DAB2     		uxtb	r2, r3
 358 0144 2E4B     		ldr	r3, .L31+16
 359 0146 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0148 2D4B     		ldr	r3, .L31+16
 362 014a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 014c 2B4B     		ldr	r3, .L31+12
 364 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 0150 9A42     		cmp	r2, r3
 366 0152 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0154 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0156 002B     		cmp	r3, #0
 370 0158 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 015a 284B     		ldr	r3, .L31+12
 373 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015e 1A46     		mov	r2, r3
 375 0160 2849     		ldr	r1, .L31+20
 376 0162 2948     		ldr	r0, .L31+24
 377 0164 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0168 244B     		ldr	r3, .L31+12
 380 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 016c 1AB2     		sxth	r2, r3
 382 016e 264B     		ldr	r3, .L31+24
 383 0170 A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0174 244B     		ldr	r3, .L31+24
 386 0176 0122     		movs	r2, #1
 387 0178 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 017c FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 0180 1F4B     		ldr	r3, .L31+16
 393 0182 0022     		movs	r2, #0
 394 0184 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0186 1D4B     		ldr	r3, .L31+12
 397 0188 0022     		movs	r2, #0
 398 018a 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 018c 184B     		ldr	r3, .L31
 401 018e 0022     		movs	r2, #0
 402 0190 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 0192 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0194 0133     		adds	r3, r3, #1
 406 0196 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0198 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 019a 184B     		ldr	r3, .L31+12
 412 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019e 013B     		subs	r3, r3, #1
 414 01a0 DAB2     		uxtb	r2, r3
 415 01a2 164B     		ldr	r3, .L31+12
 416 01a4 1A70     		strb	r2, [r3]
 417 01a6 154B     		ldr	r3, .L31+12
 418 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01aa 002B     		cmp	r3, #0
 420 01ac 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01ae 144B     		ldr	r3, .L31+16
 423 01b0 0022     		movs	r2, #0
 424 01b2 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b4 114B     		ldr	r3, .L31+12
 427 01b6 0022     		movs	r2, #0
 428 01b8 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01ba 0120     		movs	r0, #1
 431 01bc FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01c0 0020     		movs	r0, #0
 434 01c2 FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c6 0A4B     		ldr	r3, .L31
 437 01c8 0022     		movs	r2, #0
 438 01ca 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01ce 0133     		adds	r3, r3, #1
 442 01d0 BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01d2 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d4 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d8 0346     		mov	r3, r0
 450 01da 002B     		cmp	r3, #0
 451 01dc 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01de BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01e0 632B     		cmp	r3, #99
 455 01e2 7FF615AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e6 00BF     		nop
 459 01e8 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01ea BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01ec 80BD     		pop	{r7, pc}
 465              	.L32:
 466 01ee 00BF     		.align	2
 467              	.L31:
 468 01f0 00000000 		.word	state.10381
 469 01f4 04000000 		.word	rx_queue.10385
 470 01f8 00000000 		.word	c_mem
 471 01fc 07000000 		.word	data_packet_length.10383
 472 0200 08000000 		.word	data_packet_index.10382
 473 0204 0C000000 		.word	data_packet_buffer.10384
 474 0208 00000000 		.word	g_rx
 475              		.cfi_endproc
 476              	.LFE66:
 477              		.size	interrupt_manager, .-interrupt_manager
 478              		.global	__aeabi_i2f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 14


 479              		.global	__aeabi_fdiv
 480              		.section	.text.function_scheduler,"ax",%progbits
 481              		.align	2
 482              		.global	function_scheduler
 483              		.thumb
 484              		.thumb_func
 485              		.type	function_scheduler, %function
 486              	function_scheduler:
 487              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 1000 Hz
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 488              		.loc 1 268 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 2504
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492 0000 B0B5     		push	{r4, r5, r7, lr}
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 4, -16
 495              		.cfi_offset 5, -12
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 ADF6C81D 		subw	sp, sp, #2504
 499              		.cfi_def_cfa_offset 2520
 500 0006 00AF     		add	r7, sp, #0
 501              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 502              		.loc 1 272 0
 503 0008 3B46     		mov	r3, r7
 504 000a 0022     		movs	r2, #0
 505 000c 1A60     		str	r2, [r3]
 506 000e 0433     		adds	r3, r3, #4
 507 0010 4FF41C62 		mov	r2, #2496
 508 0014 0021     		movs	r1, #0
 509 0016 1846     		mov	r0, r3
 510 0018 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 511              		.loc 1 274 0
 512 001c 0023     		movs	r3, #0
 513 001e 87F8C639 		strb	r3, [r7, #2502]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 514              		.loc 1 275 0
 515 0022 0123     		movs	r3, #1
 516 0024 87F8C539 		strb	r3, [r7, #2501]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 15


 518 0028 0020     		movs	r0, #0
 519 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0032 0346     		mov	r3, r0
 523 0034 1A46     		mov	r2, r3
 524 0036 C74B     		ldr	r3, .L74
 525 0038 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 003a 0120     		movs	r0, #1
 528 003c FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0040 C54B     		ldr	r3, .L74+4
 531 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0044 002B     		cmp	r3, #0
 533 0046 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 0048 C34B     		ldr	r3, .L74+4
 536 004a 0022     		movs	r2, #0
 537 004c 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 004e FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0052 C24B     		ldr	r3, .L74+8
 543 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 0058 012B     		cmp	r3, #1
 545 005a 65D0     		beq	.L36
 546 005c 022B     		cmp	r3, #2
 547 005e 00F01C81 		beq	.L37
 548 0062 002B     		cmp	r3, #0
 549 0064 40F08381 		bne	.L35
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 550              		.loc 1 297 0
 551 0068 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 552 006c BB49     		ldr	r1, .L74+8
 553 006e 1346     		mov	r3, r2
 554 0070 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 16


 555 0072 9B1A     		subs	r3, r3, r2
 556 0074 1B01     		lsls	r3, r3, #4
 557 0076 0B44     		add	r3, r3, r1
 558 0078 03F58873 		add	r3, r3, #272
 559 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 560 007e 1A46     		mov	r2, r3
 561 0080 B74B     		ldr	r3, .L74+12
 562 0082 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 563 0084 002B     		cmp	r3, #0
 564 0086 25D0     		beq	.L39
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 565              		.loc 1 299 0
 566 0088 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 567 008c B349     		ldr	r1, .L74+8
 568 008e 1346     		mov	r3, r2
 569 0090 DB00     		lsls	r3, r3, #3
 570 0092 9B1A     		subs	r3, r3, r2
 571 0094 1B01     		lsls	r3, r3, #4
 572 0096 0B44     		add	r3, r3, r1
 573 0098 03F58873 		add	r3, r3, #272
 574 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 575 009e 1846     		mov	r0, r3
 576 00a0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 577              		.loc 1 301 0
 578 00a4 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 579 00a8 AC49     		ldr	r1, .L74+8
 580 00aa 1346     		mov	r3, r2
 581 00ac DB00     		lsls	r3, r3, #3
 582 00ae 9B1A     		subs	r3, r3, r2
 583 00b0 1B01     		lsls	r3, r3, #4
 584 00b2 0B44     		add	r3, r3, r1
 585 00b4 03F58873 		add	r3, r3, #272
 586 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 587 00ba 0021     		movs	r1, #0
 588 00bc 1846     		mov	r0, r3
 589 00be FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 590              		.loc 1 305 0
 591 00c2 A54B     		ldr	r3, .L74+4
 592 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 593 00c6 002B     		cmp	r3, #0
 594 00c8 04D0     		beq	.L39
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 595              		.loc 1 306 0
 596 00ca A34B     		ldr	r3, .L74+4
 597 00cc 0022     		movs	r2, #0
 598 00ce 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 599              		.loc 1 307 0
 600 00d0 FFF7FEFF 		bl	interrupt_manager
 601              	.L39:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 17


 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
 313:..\src/interruptions.c ****             motor_control_SH();
 602              		.loc 1 313 0
 603 00d4 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 604              		.loc 1 316 0
 605 00d8 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 606 00dc 9F49     		ldr	r1, .L74+8
 607 00de 1346     		mov	r3, r2
 608 00e0 DB00     		lsls	r3, r3, #3
 609 00e2 9B1A     		subs	r3, r3, r2
 610 00e4 1B01     		lsls	r3, r3, #4
 611 00e6 0B44     		add	r3, r3, r1
 612 00e8 03F58973 		add	r3, r3, #274
 613 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 614 00ee 012B     		cmp	r3, #1
 615 00f0 0FD1     		bne	.L40
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 616              		.loc 1 317 0
 617 00f2 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 618 00f6 9949     		ldr	r1, .L74+8
 619 00f8 1346     		mov	r3, r2
 620 00fa DB00     		lsls	r3, r3, #3
 621 00fc 9B1A     		subs	r3, r3, r2
 622 00fe 1B01     		lsls	r3, r3, #4
 623 0100 0B44     		add	r3, r3, r1
 624 0102 03F58773 		add	r3, r3, #270
 625 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 626 0108 002B     		cmp	r3, #0
 627 010a 02D1     		bne	.L40
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 628              		.loc 1 318 0
 629 010c 954B     		ldr	r3, .L74+16
 630 010e 0022     		movs	r2, #0
 631 0110 1A70     		strb	r2, [r3]
 632              	.L40:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 633              		.loc 1 324 0
 634 0112 914B     		ldr	r3, .L74+4
 635 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 636 0116 002B     		cmp	r3, #0
 637 0118 00F01881 		beq	.L71
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 638              		.loc 1 325 0
 639 011c 8E4B     		ldr	r3, .L74+4
 640 011e 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 18


 641 0120 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 642              		.loc 1 326 0
 643 0122 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 644              		.loc 1 328 0
 645 0126 11E1     		b	.L71
 646              	.L36:
 647              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 648              		.loc 1 333 0
 649 0128 0023     		movs	r3, #0
 650 012a 87F8C739 		strb	r3, [r7, #2503]
 651 012e 53E0     		b	.L42
 652              	.L47:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 653              		.loc 1 334 0
 654 0130 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 655 0134 8A4A     		ldr	r2, .L74+12
 656 0136 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 657 0138 002B     		cmp	r3, #0
 658 013a 48D0     		beq	.L43
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 659              		.loc 1 336 0
 660 013c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 661 0140 1846     		mov	r0, r3
 662 0142 FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 663              		.loc 1 338 0
 664 0146 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 665 014a 8449     		ldr	r1, .L74+8
 666 014c 1346     		mov	r3, r2
 667 014e DB00     		lsls	r3, r3, #3
 668 0150 9B1A     		subs	r3, r3, r2
 669 0152 1B01     		lsls	r3, r3, #4
 670 0154 0B44     		add	r3, r3, r1
 671 0156 03F58873 		add	r3, r3, #272
 672 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 673 015c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 674 0160 9A42     		cmp	r2, r3
 675 0162 08D1     		bne	.L44
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 676              		.loc 1 340 0
 677 0164 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 678 0168 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 679 016c 1146     		mov	r1, r2
 680 016e 1846     		mov	r0, r3
 681 0170 FFF7FEFF 		bl	encoder_reading_SPI
 682 0174 22E0     		b	.L45
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 19


 683              	.L44:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 684              		.loc 1 343 0
 685 0176 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 686 017a 7849     		ldr	r1, .L74+8
 687 017c 1346     		mov	r3, r2
 688 017e DB00     		lsls	r3, r3, #3
 689 0180 9B1A     		subs	r3, r3, r2
 690 0182 1B01     		lsls	r3, r3, #4
 691 0184 0B44     		add	r3, r3, r1
 692 0186 03F58873 		add	r3, r3, #272
 693 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 018c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 695 0190 9A42     		cmp	r2, r3
 696 0192 08D1     		bne	.L46
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 697              		.loc 1 345 0
 698 0194 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 699 0198 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 700 019c 1146     		mov	r1, r2
 701 019e 1846     		mov	r0, r3
 702 01a0 FFF7FEFF 		bl	encoder_reading_SPI
 703 01a4 0AE0     		b	.L45
 704              	.L46:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 705              		.loc 1 349 0
 706 01a6 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 707 01aa 6D4A     		ldr	r2, .L74+12
 708 01ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 709 01ae 1A46     		mov	r2, r3
 710 01b0 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 711 01b4 1946     		mov	r1, r3
 712 01b6 1046     		mov	r0, r2
 713 01b8 FFF7FEFF 		bl	ReadEncoderLine
 714              	.L45:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 715              		.loc 1 356 0
 716 01bc 664B     		ldr	r3, .L74+4
 717 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 718 01c0 002B     		cmp	r3, #0
 719 01c2 04D0     		beq	.L43
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 720              		.loc 1 357 0
 721 01c4 644B     		ldr	r3, .L74+4
 722 01c6 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 20


 723 01c8 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 724              		.loc 1 358 0
 725 01ca FFF7FEFF 		bl	interrupt_manager
 726              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 727              		.loc 1 333 0 discriminator 2
 728 01ce 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 729 01d2 0133     		adds	r3, r3, #1
 730 01d4 87F8C739 		strb	r3, [r7, #2503]
 731              	.L42:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 732              		.loc 1 333 0 is_stmt 0 discriminator 1
 733 01d8 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 734 01dc 012B     		cmp	r3, #1
 735 01de A7D9     		bls	.L47
 736              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 737              		.loc 1 366 0 is_stmt 1
 738 01e0 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 739 01e4 1846     		mov	r0, r3
 740 01e6 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 741              		.loc 1 369 0
 742 01ea 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 743 01ee 5B49     		ldr	r1, .L74+8
 744 01f0 1346     		mov	r3, r2
 745 01f2 DB00     		lsls	r3, r3, #3
 746 01f4 9B1A     		subs	r3, r3, r2
 747 01f6 1B01     		lsls	r3, r3, #4
 748 01f8 0B44     		add	r3, r3, r1
 749 01fa 03F58973 		add	r3, r3, #274
 750 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 751 0200 012B     		cmp	r3, #1
 752 0202 0FD1     		bne	.L48
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 753              		.loc 1 370 0
 754 0204 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 755 0208 5449     		ldr	r1, .L74+8
 756 020a 1346     		mov	r3, r2
 757 020c DB00     		lsls	r3, r3, #3
 758 020e 9B1A     		subs	r3, r3, r2
 759 0210 1B01     		lsls	r3, r3, #4
 760 0212 0B44     		add	r3, r3, r1
 761 0214 03F58773 		add	r3, r3, #270
 762 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 763 021a 002B     		cmp	r3, #0
 764 021c 02D1     		bne	.L48
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 21


 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 765              		.loc 1 371 0
 766 021e 514B     		ldr	r3, .L74+16
 767 0220 0022     		movs	r2, #0
 768 0222 1A70     		strb	r2, [r3]
 769              	.L48:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****             if (interrupt_flag){
 770              		.loc 1 377 0
 771 0224 4C4B     		ldr	r3, .L74+4
 772 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 773 0228 002B     		cmp	r3, #0
 774 022a 04D0     		beq	.L49
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 775              		.loc 1 378 0
 776 022c 4A4B     		ldr	r3, .L74+4
 777 022e 0022     		movs	r2, #0
 778 0230 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 779              		.loc 1 379 0
 780 0232 FFF7FEFF 		bl	interrupt_manager
 781              	.L49:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 782              		.loc 1 383 0
 783 0236 494B     		ldr	r3, .L74+8
 784 0238 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 785 023c 012B     		cmp	r3, #1
 786 023e 40F08780 		bne	.L72
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 787              		.loc 1 384 0
 788 0242 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 789 0246 1846     		mov	r0, r3
 790 0248 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 791              		.loc 1 387 0
 792 024c 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 793 0250 4249     		ldr	r1, .L74+8
 794 0252 1346     		mov	r3, r2
 795 0254 DB00     		lsls	r3, r3, #3
 796 0256 9B1A     		subs	r3, r3, r2
 797 0258 1B01     		lsls	r3, r3, #4
 798 025a 0B44     		add	r3, r3, r1
 799 025c 03F58973 		add	r3, r3, #274
 800 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 801 0262 012B     		cmp	r3, #1
 802 0264 0FD1     		bne	.L51
 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 803              		.loc 1 388 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 22


 804 0266 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 805 026a 3C49     		ldr	r1, .L74+8
 806 026c 1346     		mov	r3, r2
 807 026e DB00     		lsls	r3, r3, #3
 808 0270 9B1A     		subs	r3, r3, r2
 809 0272 1B01     		lsls	r3, r3, #4
 810 0274 0B44     		add	r3, r3, r1
 811 0276 03F58773 		add	r3, r3, #270
 812 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 813 027c 002B     		cmp	r3, #0
 814 027e 02D1     		bne	.L51
 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 815              		.loc 1 389 0
 816 0280 384B     		ldr	r3, .L74+16
 817 0282 0022     		movs	r2, #0
 818 0284 1A70     		strb	r2, [r3]
 819              	.L51:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 820              		.loc 1 395 0
 821 0286 344B     		ldr	r3, .L74+4
 822 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823 028a 002B     		cmp	r3, #0
 824 028c 60D0     		beq	.L72
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 825              		.loc 1 396 0
 826 028e 324B     		ldr	r3, .L74+4
 827 0290 0022     		movs	r2, #0
 828 0292 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 829              		.loc 1 397 0
 830 0294 FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 831              		.loc 1 400 0
 832 0298 5AE0     		b	.L72
 833              	.L37:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB:
 403:..\src/interruptions.c ****             
 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 834              		.loc 1 405 0
 835 029a 334B     		ldr	r3, .L74+20
 836 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 837 029e 002B     		cmp	r3, #0
 838 02a0 2FD0     		beq	.L52
 839              		.loc 1 405 0 is_stmt 0 discriminator 1
 840 02a2 2E4B     		ldr	r3, .L74+8
 841 02a4 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 842 02a8 002B     		cmp	r3, #0
 843 02aa 2AD0     		beq	.L52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 23


 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 air_chambers_control();
 844              		.loc 1 407 0 is_stmt 1
 845 02ac FFF7FEFF 		bl	air_chambers_control
 408:..\src/interruptions.c ****             
 409:..\src/interruptions.c ****                 // Check Interrupt 
 410:..\src/interruptions.c ****                 
 411:..\src/interruptions.c ****                 if (interrupt_flag){
 846              		.loc 1 411 0
 847 02b0 294B     		ldr	r3, .L74+4
 848 02b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 849 02b4 002B     		cmp	r3, #0
 850 02b6 04D0     		beq	.L53
 412:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 851              		.loc 1 412 0
 852 02b8 274B     		ldr	r3, .L74+4
 853 02ba 0022     		movs	r2, #0
 854 02bc 1A70     		strb	r2, [r3]
 413:..\src/interruptions.c ****                     interrupt_manager();
 855              		.loc 1 413 0
 856 02be FFF7FEFF 		bl	interrupt_manager
 857              	.L53:
 414:..\src/interruptions.c ****                 }
 415:..\src/interruptions.c ****                 
 416:..\src/interruptions.c ****                 // Drive slave with reference generated on second motor index
 417:..\src/interruptions.c ****                 // Use second motor structures and parameters, only to generate position reference 
 418:..\src/interruptions.c ****                 // IMPORTANT: configure second motor parameters with proper slave parameters
 419:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 858              		.loc 1 419 0
 859 02c2 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 860 02c6 1846     		mov	r0, r3
 861 02c8 FFF7FEFF 		bl	motor_control_generic
 420:..\src/interruptions.c ****                 
 421:..\src/interruptions.c ****                 // Check Interrupt 
 422:..\src/interruptions.c **** 
 423:..\src/interruptions.c ****                 if (interrupt_flag){
 862              		.loc 1 423 0
 863 02cc 224B     		ldr	r3, .L74+4
 864 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 02d0 002B     		cmp	r3, #0
 866 02d2 04D0     		beq	.L54
 424:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 867              		.loc 1 424 0
 868 02d4 204B     		ldr	r3, .L74+4
 869 02d6 0022     		movs	r2, #0
 870 02d8 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****                     interrupt_manager();
 871              		.loc 1 425 0
 872 02da FFF7FEFF 		bl	interrupt_manager
 873              	.L54:
 426:..\src/interruptions.c ****                 }
 427:..\src/interruptions.c ****                 
 428:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 874              		.loc 1 428 0
 875 02de 1F4B     		ldr	r3, .L74+8
 876 02e0 93F8B122 		ldrb	r2, [r3, #689]	@ zero_extendqisi2
 877 02e4 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 24


 878 02e8 1146     		mov	r1, r2
 879 02ea 1846     		mov	r0, r3
 880 02ec FFF7FEFF 		bl	drive_slave
 429:..\src/interruptions.c ****             
 430:..\src/interruptions.c ****                 // Check Interrupt 
 431:..\src/interruptions.c **** 
 432:..\src/interruptions.c ****                 if (interrupt_flag){
 881              		.loc 1 432 0
 882 02f0 194B     		ldr	r3, .L74+4
 883 02f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 02f4 002B     		cmp	r3, #0
 885 02f6 04D0     		beq	.L52
 433:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 886              		.loc 1 433 0
 887 02f8 174B     		ldr	r3, .L74+4
 888 02fa 0022     		movs	r2, #0
 889 02fc 1A70     		strb	r2, [r3]
 434:..\src/interruptions.c ****                     interrupt_manager();
 890              		.loc 1 434 0
 891 02fe FFF7FEFF 		bl	interrupt_manager
 892              	.L52:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****             }
 437:..\src/interruptions.c ****             if (!master_mode){
 893              		.loc 1 437 0
 894 0302 194B     		ldr	r3, .L74+20
 895 0304 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 896 0306 002B     		cmp	r3, #0
 897 0308 11D1     		bne	.L55
 438:..\src/interruptions.c ****                 
 439:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 898              		.loc 1 439 0
 899 030a 144B     		ldr	r3, .L74+8
 900 030c 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 901 0310 002B     		cmp	r3, #0
 902 0312 01D0     		beq	.L56
 440:..\src/interruptions.c ****                     // Stop feedback motors
 441:..\src/interruptions.c ****                     stop_feedback();
 903              		.loc 1 441 0
 904 0314 FFF7FEFF 		bl	stop_feedback
 905              	.L56:
 442:..\src/interruptions.c ****                 }
 443:..\src/interruptions.c ****                 // Disable slave or motors
 444:..\src/interruptions.c ****                 deactivate_slaves();
 906              		.loc 1 444 0
 907 0318 FFF7FEFF 		bl	deactivate_slaves
 445:..\src/interruptions.c ****                         
 446:..\src/interruptions.c ****                 // Check Interrupt 
 447:..\src/interruptions.c ****                 if (interrupt_flag){
 908              		.loc 1 447 0
 909 031c 0E4B     		ldr	r3, .L74+4
 910 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 911 0320 002B     		cmp	r3, #0
 912 0322 04D0     		beq	.L55
 448:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 913              		.loc 1 448 0
 914 0324 0C4B     		ldr	r3, .L74+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 25


 915 0326 0022     		movs	r2, #0
 916 0328 1A70     		strb	r2, [r3]
 449:..\src/interruptions.c ****                     interrupt_manager();
 917              		.loc 1 449 0
 918 032a FFF7FEFF 		bl	interrupt_manager
 919              	.L55:
 450:..\src/interruptions.c ****                 } 
 451:..\src/interruptions.c ****             }
 452:..\src/interruptions.c ****     
 453:..\src/interruptions.c ****             // Control MOTOR_IDX motor [PUMP] with PWM control
 454:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 920              		.loc 1 454 0
 921 032e 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 922 0332 1846     		mov	r0, r3
 923 0334 FFF7FEFF 		bl	motor_control_generic
 455:..\src/interruptions.c ****             
 456:..\src/interruptions.c ****             // Check Interrupt 
 457:..\src/interruptions.c **** 
 458:..\src/interruptions.c ****             if (interrupt_flag){
 924              		.loc 1 458 0
 925 0338 074B     		ldr	r3, .L74+4
 926 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 927 033c 002B     		cmp	r3, #0
 928 033e 15D0     		beq	.L73
 459:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 929              		.loc 1 459 0
 930 0340 054B     		ldr	r3, .L74+4
 931 0342 0022     		movs	r2, #0
 932 0344 1A70     		strb	r2, [r3]
 460:..\src/interruptions.c ****                 interrupt_manager();
 933              		.loc 1 460 0
 934 0346 FFF7FEFF 		bl	interrupt_manager
 461:..\src/interruptions.c ****             }
 462:..\src/interruptions.c ****             
 463:..\src/interruptions.c ****             break;
 935              		.loc 1 463 0
 936 034a 0FE0     		b	.L73
 937              	.L71:
 328:..\src/interruptions.c ****             
 938              		.loc 1 328 0
 939 034c 00BF     		nop
 940 034e 0EE0     		b	.L35
 941              	.L72:
 400:..\src/interruptions.c ****             
 942              		.loc 1 400 0
 943 0350 00BF     		nop
 944 0352 0CE0     		b	.L35
 945              	.L75:
 946              		.align	2
 947              	.L74:
 948 0354 00000000 		.word	timer_value0
 949 0358 00000000 		.word	interrupt_flag
 950 035c 00000000 		.word	c_mem
 951 0360 00000000 		.word	N_Encoder_Line_Connected
 952 0364 00000000 		.word	change_ext_ref_flag
 953 0368 00000000 		.word	master_mode
 954              	.L73:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 26


 955              		.loc 1 463 0
 956 036c 00BF     		nop
 957              	.L35:
 464:..\src/interruptions.c ****     }
 465:..\src/interruptions.c **** 
 466:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     analog_read_end();
 958              		.loc 1 468 0
 959 036e FFF7FEFF 		bl	analog_read_end
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     if (interrupt_flag){
 960              		.loc 1 470 0
 961 0372 834B     		ldr	r3, .L76
 962 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 963 0376 002B     		cmp	r3, #0
 964 0378 04D0     		beq	.L58
 471:..\src/interruptions.c ****         interrupt_flag = FALSE;
 965              		.loc 1 471 0
 966 037a 814B     		ldr	r3, .L76
 967 037c 0022     		movs	r2, #0
 968 037e 1A70     		strb	r2, [r3]
 472:..\src/interruptions.c ****         interrupt_manager();
 969              		.loc 1 472 0
 970 0380 FFF7FEFF 		bl	interrupt_manager
 971              	.L58:
 473:..\src/interruptions.c ****     }
 474:..\src/interruptions.c **** 
 475:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     overcurrent_control();
 972              		.loc 1 477 0
 973 0384 FFF7FEFF 		bl	overcurrent_control
 478:..\src/interruptions.c ****     
 479:..\src/interruptions.c ****     // Check Interrupt 
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     if (interrupt_flag){
 974              		.loc 1 481 0
 975 0388 7D4B     		ldr	r3, .L76
 976 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 977 038c 002B     		cmp	r3, #0
 978 038e 04D0     		beq	.L59
 482:..\src/interruptions.c ****         interrupt_flag = FALSE;
 979              		.loc 1 482 0
 980 0390 7B4B     		ldr	r3, .L76
 981 0392 0022     		movs	r2, #0
 982 0394 1A70     		strb	r2, [r3]
 483:..\src/interruptions.c ****         interrupt_manager();
 983              		.loc 1 483 0
 984 0396 FFF7FEFF 		bl	interrupt_manager
 985              	.L59:
 484:..\src/interruptions.c ****     }
 485:..\src/interruptions.c **** 
 486:..\src/interruptions.c ****     //---------------------------------- Calibration 
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 489:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 27


 986              		.loc 1 489 0
 987 039a 7A4B     		ldr	r3, .L76+4
 988 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 989 039e 012B     		cmp	r3, #1
 990 03a0 0ED1     		bne	.L60
 490:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 991              		.loc 1 490 0
 992 03a2 794B     		ldr	r3, .L76+8
 993 03a4 1B88     		ldrh	r3, [r3]
 994 03a6 0A2B     		cmp	r3, #10
 995 03a8 04D1     		bne	.L61
 491:..\src/interruptions.c ****             calibration();
 996              		.loc 1 491 0
 997 03aa FFF7FEFF 		bl	calibration
 492:..\src/interruptions.c ****             counter_calibration = 0;
 998              		.loc 1 492 0
 999 03ae 764B     		ldr	r3, .L76+8
 1000 03b0 0022     		movs	r2, #0
 1001 03b2 1A80     		strh	r2, [r3]	@ movhi
 1002              	.L61:
 493:..\src/interruptions.c ****         }
 494:..\src/interruptions.c ****         counter_calibration++;
 1003              		.loc 1 494 0
 1004 03b4 744B     		ldr	r3, .L76+8
 1005 03b6 1B88     		ldrh	r3, [r3]
 1006 03b8 0133     		adds	r3, r3, #1
 1007 03ba 9AB2     		uxth	r2, r3
 1008 03bc 724B     		ldr	r3, .L76+8
 1009 03be 1A80     		strh	r2, [r3]	@ movhi
 1010              	.L60:
 495:..\src/interruptions.c ****     }
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c ****     // Check Interrupt 
 498:..\src/interruptions.c ****     
 499:..\src/interruptions.c ****     if (interrupt_flag){
 1011              		.loc 1 499 0
 1012 03c0 6F4B     		ldr	r3, .L76
 1013 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 03c4 002B     		cmp	r3, #0
 1015 03c6 04D0     		beq	.L62
 500:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1016              		.loc 1 500 0
 1017 03c8 6D4B     		ldr	r3, .L76
 1018 03ca 0022     		movs	r2, #0
 1019 03cc 1A70     		strb	r2, [r3]
 501:..\src/interruptions.c ****         interrupt_manager();
 1020              		.loc 1 501 0
 1021 03ce FFF7FEFF 		bl	interrupt_manager
 1022              	.L62:
 502:..\src/interruptions.c ****     }
 503:..\src/interruptions.c ****     
 504:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1023              		.loc 1 504 0
 1024 03d2 6E4B     		ldr	r3, .L76+12
 1025 03d4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1026 03d8 002B     		cmp	r3, #0
 1027 03da 1CD1     		bne	.L63
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 28


 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****         //---------------------------------- Rest position check
 507:..\src/interruptions.c **** 
 508:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 509:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1028              		.loc 1 509 0
 1029 03dc 6B4B     		ldr	r3, .L76+12
 1030 03de 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1031 03e2 012B     		cmp	r3, #1
 1032 03e4 17D1     		bne	.L63
 510:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1033              		.loc 1 510 0
 1034 03e6 684B     		ldr	r3, .L76+8
 1035 03e8 1B88     		ldrh	r3, [r3]
 1036 03ea 0A2B     		cmp	r3, #10
 1037 03ec 04D1     		bne	.L64
 511:..\src/interruptions.c ****                     check_rest_position();
 1038              		.loc 1 511 0
 1039 03ee FFF7FEFF 		bl	check_rest_position
 512:..\src/interruptions.c ****                     counter_calibration = 0;
 1040              		.loc 1 512 0
 1041 03f2 654B     		ldr	r3, .L76+8
 1042 03f4 0022     		movs	r2, #0
 1043 03f6 1A80     		strh	r2, [r3]	@ movhi
 1044              	.L64:
 513:..\src/interruptions.c ****             }
 514:..\src/interruptions.c ****             counter_calibration++;
 1045              		.loc 1 514 0
 1046 03f8 634B     		ldr	r3, .L76+8
 1047 03fa 1B88     		ldrh	r3, [r3]
 1048 03fc 0133     		adds	r3, r3, #1
 1049 03fe 9AB2     		uxth	r2, r3
 1050 0400 614B     		ldr	r3, .L76+8
 1051 0402 1A80     		strh	r2, [r3]	@ movhi
 515:..\src/interruptions.c **** 
 516:..\src/interruptions.c ****             // Check Interrupt     
 517:..\src/interruptions.c ****             if (interrupt_flag){
 1052              		.loc 1 517 0
 1053 0404 5E4B     		ldr	r3, .L76
 1054 0406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1055 0408 002B     		cmp	r3, #0
 1056 040a 04D0     		beq	.L63
 518:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1057              		.loc 1 518 0
 1058 040c 5C4B     		ldr	r3, .L76
 1059 040e 0022     		movs	r2, #0
 1060 0410 1A70     		strb	r2, [r3]
 519:..\src/interruptions.c ****                 interrupt_manager();
 1061              		.loc 1 519 0
 1062 0412 FFF7FEFF 		bl	interrupt_manager
 1063              	.L63:
 520:..\src/interruptions.c ****             }
 521:..\src/interruptions.c ****         }
 522:..\src/interruptions.c ****         
 523:..\src/interruptions.c ****     }
 524:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 525:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 29


 526:..\src/interruptions.c ****     cycles_counter_update();
 1064              		.loc 1 526 0
 1065 0416 FFF7FEFF 		bl	cycles_counter_update
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****     // Check Cycles Interrupt 
 529:..\src/interruptions.c ****     
 530:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1066              		.loc 1 530 0
 1067 041a 5D4B     		ldr	r3, .L76+16
 1068 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 041e 002B     		cmp	r3, #0
 1070 0420 25D0     		beq	.L65
 531:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1071              		.loc 1 531 0
 1072 0422 5B4B     		ldr	r3, .L76+16
 1073 0424 0022     		movs	r2, #0
 1074 0426 1A70     		strb	r2, [r3]
 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 534:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 535:..\src/interruptions.c ****         if(can_write) {
 1075              		.loc 1 535 0
 1076 0428 5A4B     		ldr	r3, .L76+20
 1077 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1078 042c 002B     		cmp	r3, #0
 1079 042e 1ED0     		beq	.L65
 536:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1080              		.loc 1 536 0
 1081 0430 594B     		ldr	r3, .L76+24
 1082 0432 0022     		movs	r2, #0
 1083 0434 1A70     		strb	r2, [r3]
 537:..\src/interruptions.c ****             
 538:..\src/interruptions.c ****             //Update time variable
 539:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1084              		.loc 1 539 0
 1085 0436 594B     		ldr	r3, .L76+28
 1086 0438 9B6D     		ldr	r3, [r3, #88]
 1087 043a 7833     		adds	r3, r3, #120
 1088 043c 574A     		ldr	r2, .L76+28
 1089 043e 9365     		str	r3, [r2, #88]
 540:..\src/interruptions.c ****             
 541:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1090              		.loc 1 541 0
 1091 0440 524B     		ldr	r3, .L76+12
 1092 0442 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1093 0446 012B     		cmp	r3, #1
 1094 0448 11D1     		bne	.L65
 542:..\src/interruptions.c ****                 
 543:..\src/interruptions.c ****                 store_RTC_current_time();
 1095              		.loc 1 543 0
 1096 044a FFF7FEFF 		bl	store_RTC_current_time
 544:..\src/interruptions.c ****                 
 545:..\src/interruptions.c ****                 //Write in SD card
 546:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1097              		.loc 1 546 0
 1098 044e 3B46     		mov	r3, r7
 1099 0450 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 30


 1100 0452 FFF7FEFF 		bl	prepare_SD_info
 547:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1101              		.loc 1 547 0
 1102 0456 524B     		ldr	r3, .L76+32
 1103 0458 1C68     		ldr	r4, [r3]
 1104 045a 3B46     		mov	r3, r7
 1105 045c 1846     		mov	r0, r3
 1106 045e FFF7FEFF 		bl	strlen
 1107 0462 0246     		mov	r2, r0
 1108 0464 3B46     		mov	r3, r7
 1109 0466 1946     		mov	r1, r3
 1110 0468 2046     		mov	r0, r4
 1111 046a FFF7FEFF 		bl	FS_Write
 1112              	.L65:
 548:..\src/interruptions.c ****             }
 549:..\src/interruptions.c ****         }
 550:..\src/interruptions.c ****     }
 551:..\src/interruptions.c ****     
 552:..\src/interruptions.c ****     // Check Interrupt 
 553:..\src/interruptions.c ****     
 554:..\src/interruptions.c ****     if (interrupt_flag){
 1113              		.loc 1 554 0
 1114 046e 444B     		ldr	r3, .L76
 1115 0470 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1116 0472 002B     		cmp	r3, #0
 1117 0474 04D0     		beq	.L66
 555:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1118              		.loc 1 555 0
 1119 0476 424B     		ldr	r3, .L76
 1120 0478 0022     		movs	r2, #0
 1121 047a 1A70     		strb	r2, [r3]
 556:..\src/interruptions.c ****         interrupt_manager();
 1122              		.loc 1 556 0
 1123 047c FFF7FEFF 		bl	interrupt_manager
 1124              	.L66:
 557:..\src/interruptions.c ****     }
 558:..\src/interruptions.c ****     
 559:..\src/interruptions.c ****     
 560:..\src/interruptions.c ****     //---------------------------------- Check battery
 561:..\src/interruptions.c **** 
 562:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 563:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1125              		.loc 1 563 0
 1126 0480 484B     		ldr	r3, .L76+36
 1127 0482 1B88     		ldrh	r3, [r3]
 1128 0484 0A2B     		cmp	r3, #10
 1129 0486 04D1     		bne	.L67
 564:..\src/interruptions.c ****         battery_management();   
 1130              		.loc 1 564 0
 1131 0488 FFF7FEFF 		bl	battery_management
 565:..\src/interruptions.c ****         counter_tension_func = 0;
 1132              		.loc 1 565 0
 1133 048c 454B     		ldr	r3, .L76+36
 1134 048e 0022     		movs	r2, #0
 1135 0490 1A80     		strh	r2, [r3]	@ movhi
 1136              	.L67:
 566:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 31


 567:..\src/interruptions.c ****     counter_tension_func++;
 1137              		.loc 1 567 0
 1138 0492 444B     		ldr	r3, .L76+36
 1139 0494 1B88     		ldrh	r3, [r3]
 1140 0496 0133     		adds	r3, r3, #1
 1141 0498 9AB2     		uxth	r2, r3
 1142 049a 424B     		ldr	r3, .L76+36
 1143 049c 1A80     		strh	r2, [r3]	@ movhi
 568:..\src/interruptions.c **** 
 569:..\src/interruptions.c ****     // Check Interrupt 
 570:..\src/interruptions.c ****     
 571:..\src/interruptions.c ****     if (interrupt_flag){
 1144              		.loc 1 571 0
 1145 049e 384B     		ldr	r3, .L76
 1146 04a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1147 04a2 002B     		cmp	r3, #0
 1148 04a4 04D0     		beq	.L68
 572:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1149              		.loc 1 572 0
 1150 04a6 364B     		ldr	r3, .L76
 1151 04a8 0022     		movs	r2, #0
 1152 04aa 1A70     		strb	r2, [r3]
 573:..\src/interruptions.c ****         interrupt_manager();
 1153              		.loc 1 573 0
 1154 04ac FFF7FEFF 		bl	interrupt_manager
 1155              	.L68:
 574:..\src/interruptions.c ****     }
 575:..\src/interruptions.c ****    
 576:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 577:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1156              		.loc 1 577 0
 1157 04b0 364B     		ldr	r3, .L76+12
 1158 04b2 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1159 04b6 002B     		cmp	r3, #0
 1160 04b8 0AD0     		beq	.L69
 578:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1161              		.loc 1 578 0
 1162 04ba FFF7FEFF 		bl	ReadAllIMUs
 579:..\src/interruptions.c ****         
 580:..\src/interruptions.c ****         if (interrupt_flag){
 1163              		.loc 1 580 0
 1164 04be 304B     		ldr	r3, .L76
 1165 04c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1166 04c2 002B     		cmp	r3, #0
 1167 04c4 04D0     		beq	.L69
 581:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1168              		.loc 1 581 0
 1169 04c6 2E4B     		ldr	r3, .L76
 1170 04c8 0022     		movs	r2, #0
 1171 04ca 1A70     		strb	r2, [r3]
 582:..\src/interruptions.c ****             interrupt_manager();
 1172              		.loc 1 582 0
 1173 04cc FFF7FEFF 		bl	interrupt_manager
 1174              	.L69:
 583:..\src/interruptions.c ****         }
 584:..\src/interruptions.c ****     }
 585:..\src/interruptions.c ****    
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 32


 586:..\src/interruptions.c ****     //---------------------------------- Update States
 587:..\src/interruptions.c ****     
 588:..\src/interruptions.c ****     // Load k-1 state
 589:..\src/interruptions.c ****     memcpy( &g_emg_measOld, &g_emg_meas, sizeof(g_emg_meas) );
 1175              		.loc 1 589 0
 1176 04d0 354A     		ldr	r2, .L76+40
 1177 04d2 364B     		ldr	r3, .L76+44
 1178 04d4 1446     		mov	r4, r2
 1179 04d6 1D46     		mov	r5, r3
 1180 04d8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1181 04da 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1182 04dc 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1183 04e0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 590:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1184              		.loc 1 590 0
 1185 04e4 324A     		ldr	r2, .L76+48
 1186 04e6 334B     		ldr	r3, .L76+52
 1187 04e8 1046     		mov	r0, r2
 1188 04ea 1946     		mov	r1, r3
 1189 04ec 6823     		movs	r3, #104
 1190 04ee 1A46     		mov	r2, r3
 1191 04f0 FFF7FEFF 		bl	memcpy
 591:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1192              		.loc 1 591 0
 1193 04f4 304A     		ldr	r2, .L76+56
 1194 04f6 314B     		ldr	r3, .L76+60
 1195 04f8 1446     		mov	r4, r2
 1196 04fa 1D46     		mov	r5, r3
 1197 04fc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1198 04fe 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1199 0500 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1200 0504 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 592:..\src/interruptions.c **** 
 593:..\src/interruptions.c ****     // Load k+1 state        
 594:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1201              		.loc 1 594 0
 1202 0508 2C4A     		ldr	r2, .L76+60
 1203 050a 2D4B     		ldr	r3, .L76+64
 1204 050c 1446     		mov	r4, r2
 1205 050e 1D46     		mov	r5, r3
 1206 0510 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1207 0512 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1208 0514 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1209 0518 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 595:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1210              		.loc 1 595 0
 1211 051c 294A     		ldr	r2, .L76+68
 1212 051e 2A4B     		ldr	r3, .L76+72
 1213 0520 1046     		mov	r0, r2
 1214 0522 1946     		mov	r1, r3
 1215 0524 C823     		movs	r3, #200
 1216 0526 1A46     		mov	r2, r3
 1217 0528 FFF7FEFF 		bl	memcpy
 596:..\src/interruptions.c ****                 
 597:..\src/interruptions.c ****     if (interrupt_flag){
 1218              		.loc 1 597 0
 1219 052c 144B     		ldr	r3, .L76
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 33


 1220 052e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 0530 002B     		cmp	r3, #0
 1222 0532 04D0     		beq	.L70
 598:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1223              		.loc 1 598 0
 1224 0534 124B     		ldr	r3, .L76
 1225 0536 0022     		movs	r2, #0
 1226 0538 1A70     		strb	r2, [r3]
 599:..\src/interruptions.c ****         interrupt_manager();
 1227              		.loc 1 599 0
 1228 053a FFF7FEFF 		bl	interrupt_manager
 1229              	.L70:
 600:..\src/interruptions.c ****     }
 601:..\src/interruptions.c **** 
 602:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1230              		.loc 1 602 0
 1231 053e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1232 0542 0346     		mov	r3, r0
 1233 0544 1A46     		mov	r2, r3
 1234 0546 214B     		ldr	r3, .L76+76
 1235 0548 1A80     		strh	r2, [r3]	@ movhi
 603:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1236              		.loc 1 603 0
 1237 054a 214B     		ldr	r3, .L76+80
 1238 054c 1B88     		ldrh	r3, [r3]
 1239 054e 1A46     		mov	r2, r3
 1240 0550 1E4B     		ldr	r3, .L76+76
 1241 0552 1B88     		ldrh	r3, [r3]
 1242 0554 D31A     		subs	r3, r2, r3
 1243 0556 1846     		mov	r0, r3
 1244 0558 FFF7FEFF 		bl	__aeabi_i2f
 1245 055c 0346     		mov	r3, r0
 1246 055e 1D49     		ldr	r1, .L76+84
 1247 0560 1846     		mov	r0, r3
 1248 0562 FFF7FEFF 		bl	__aeabi_fdiv
 1249 0566 0346     		mov	r3, r0
 1250 0568 1A46     		mov	r2, r3
 1251 056a 1B4B     		ldr	r3, .L76+88
 1252 056c 1A60     		str	r2, [r3]	@ float
 604:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1253              		.loc 1 604 0
 1254 056e 0120     		movs	r0, #1
 1255 0570 FFF7FEFF 		bl	MY_TIMER_REG_Write
 605:..\src/interruptions.c **** 
 606:..\src/interruptions.c **** }
 1256              		.loc 1 606 0
 1257 0574 00BF     		nop
 1258 0576 07F6C817 		addw	r7, r7, #2504
 1259              		.cfi_def_cfa_offset 16
 1260 057a BD46     		mov	sp, r7
 1261              		.cfi_def_cfa_register 13
 1262              		@ sp needed
 1263 057c B0BD     		pop	{r4, r5, r7, pc}
 1264              	.L77:
 1265 057e 00BF     		.align	2
 1266              	.L76:
 1267 0580 00000000 		.word	interrupt_flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 34


 1268 0584 00000000 		.word	calib
 1269 0588 00000000 		.word	counter_calibration.10401
 1270 058c 00000000 		.word	c_mem
 1271 0590 00000000 		.word	cycles_interrupt_flag
 1272 0594 00000000 		.word	can_write
 1273 0598 00000000 		.word	cycles_status
 1274 059c 00000000 		.word	g_mem
 1275 05a0 00000000 		.word	pFile
 1276 05a4 02000000 		.word	counter_tension_func.10402
 1277 05a8 00000000 		.word	g_emg_measOld
 1278 05ac 00000000 		.word	g_emg_meas
 1279 05b0 00000000 		.word	g_measOld
 1280 05b4 00000000 		.word	g_meas
 1281 05b8 00000000 		.word	g_refOld
 1282 05bc 00000000 		.word	g_ref
 1283 05c0 00000000 		.word	g_refNew
 1284 05c4 00000000 		.word	g_imu
 1285 05c8 00000000 		.word	g_imuNew
 1286 05cc 00000000 		.word	timer_value
 1287 05d0 00000000 		.word	timer_value0
 1288 05d4 00247449 		.word	1232348160
 1289 05d8 00000000 		.word	cycle_time
 1290              		.cfi_endproc
 1291              	.LFE67:
 1292              		.size	function_scheduler, .-function_scheduler
 1293              		.section	.text.motor_control_SH,"ax",%progbits
 1294              		.align	2
 1295              		.global	motor_control_SH
 1296              		.thumb
 1297              		.thumb_func
 1298              		.type	motor_control_SH, %function
 1299              	motor_control_SH:
 1300              	.LFB68:
 607:..\src/interruptions.c **** 
 608:..\src/interruptions.c **** //==============================================================================
 609:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 610:..\src/interruptions.c **** //==============================================================================
 611:..\src/interruptions.c **** void motor_control_SH() {
 1301              		.loc 1 611 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 88
 1304              		@ frame_needed = 1, uses_anonymous_args = 0
 1305 0000 80B5     		push	{r7, lr}
 1306              		.cfi_def_cfa_offset 8
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 96B0     		sub	sp, sp, #88
 1310              		.cfi_def_cfa_offset 96
 1311 0004 00AF     		add	r7, sp, #0
 1312              		.cfi_def_cfa_register 7
 612:..\src/interruptions.c **** 
 613:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 1313              		.loc 1 613 0
 1314 0006 0023     		movs	r3, #0
 1315 0008 7B65     		str	r3, [r7, #84]
 614:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 615:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 35


 616:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 617:..\src/interruptions.c ****     int32 CYDATA handle_value;
 618:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 619:..\src/interruptions.c **** 
 620:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 1316              		.loc 1 620 0
 1317 000a 0023     		movs	r3, #0
 1318 000c 87F84B30 		strb	r3, [r7, #75]
 621:..\src/interruptions.c ****     
 622:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 1319              		.loc 1 622 0
 1320 0010 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 1321 0014 1346     		mov	r3, r2
 1322 0016 DB00     		lsls	r3, r3, #3
 1323 0018 9B1A     		subs	r3, r3, r2
 1324 001a 1B01     		lsls	r3, r3, #4
 1325 001c B033     		adds	r3, r3, #176
 1326 001e A34A     		ldr	r2, .L191
 1327 0020 1344     		add	r3, r3, r2
 1328 0022 7B64     		str	r3, [r7, #68]
 623:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 1329              		.loc 1 623 0
 1330 0024 7B6C     		ldr	r3, [r7, #68]
 1331 0026 93F86030 		ldrb	r3, [r3, #96]
 1332 002a 87F84330 		strb	r3, [r7, #67]
 624:..\src/interruptions.c ****     
 625:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 1333              		.loc 1 625 0
 1334 002e 7B6C     		ldr	r3, [r7, #68]
 1335 0030 1B68     		ldr	r3, [r3]
 1336 0032 FB63     		str	r3, [r7, #60]
 626:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 1337              		.loc 1 626 0
 1338 0034 7B6C     		ldr	r3, [r7, #68]
 1339 0036 5B68     		ldr	r3, [r3, #4]
 1340 0038 BB63     		str	r3, [r7, #56]
 627:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 1341              		.loc 1 627 0
 1342 003a 7B6C     		ldr	r3, [r7, #68]
 1343 003c 9B68     		ldr	r3, [r3, #8]
 1344 003e 7B63     		str	r3, [r7, #52]
 628:..\src/interruptions.c **** 
 629:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 1345              		.loc 1 629 0
 1346 0040 7B6C     		ldr	r3, [r7, #68]
 1347 0042 DB68     		ldr	r3, [r3, #12]
 1348 0044 3B63     		str	r3, [r7, #48]
 630:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 1349              		.loc 1 630 0
 1350 0046 7B6C     		ldr	r3, [r7, #68]
 1351 0048 1B69     		ldr	r3, [r3, #16]
 1352 004a FB62     		str	r3, [r7, #44]
 631:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 1353              		.loc 1 631 0
 1354 004c 7B6C     		ldr	r3, [r7, #68]
 1355 004e 5B69     		ldr	r3, [r3, #20]
 1356 0050 BB62     		str	r3, [r7, #40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 36


 632:..\src/interruptions.c **** 
 633:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 1357              		.loc 1 633 0
 1358 0052 7B6C     		ldr	r3, [r7, #68]
 1359 0054 9B69     		ldr	r3, [r3, #24]
 1360 0056 7B62     		str	r3, [r7, #36]
 634:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 1361              		.loc 1 634 0
 1362 0058 7B6C     		ldr	r3, [r7, #68]
 1363 005a DB69     		ldr	r3, [r3, #28]
 1364 005c 3B62     		str	r3, [r7, #32]
 635:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 1365              		.loc 1 635 0
 1366 005e 7B6C     		ldr	r3, [r7, #68]
 1367 0060 1B6A     		ldr	r3, [r3, #32]
 1368 0062 FB61     		str	r3, [r7, #28]
 636:..\src/interruptions.c ****     
 637:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 1369              		.loc 1 637 0
 1370 0064 7B6C     		ldr	r3, [r7, #68]
 1371 0066 5B6A     		ldr	r3, [r3, #36]
 1372 0068 BB61     		str	r3, [r7, #24]
 638:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 1373              		.loc 1 638 0
 1374 006a 7B6C     		ldr	r3, [r7, #68]
 1375 006c 9B6A     		ldr	r3, [r3, #40]
 1376 006e 7B61     		str	r3, [r7, #20]
 639:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 1377              		.loc 1 639 0
 1378 0070 7B6C     		ldr	r3, [r7, #68]
 1379 0072 DB6A     		ldr	r3, [r3, #44]
 1380 0074 3B61     		str	r3, [r7, #16]
 640:..\src/interruptions.c **** 
 641:..\src/interruptions.c ****     // Static Variables
 642:..\src/interruptions.c **** 
 643:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 644:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 645:..\src/interruptions.c ****     
 646:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 647:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 648:..\src/interruptions.c ****     static int32 prev_pwm;
 649:..\src/interruptions.c **** 
 650:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 651:..\src/interruptions.c ****     static uint32 position_counter = 0;
 652:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 653:..\src/interruptions.c ****                                     // 1 EMG 1
 654:..\src/interruptions.c ****                                     // 2 EMG 2
 655:..\src/interruptions.c ****                                     // wait for both to get down
 656:..\src/interruptions.c ****     
 657:..\src/interruptions.c **** 
 658:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1381              		.loc 1 658 0
 1382 0076 8E4B     		ldr	r3, .L191+4
 1383 0078 1B68     		ldr	r3, [r3]
 1384 007a 8C4A     		ldr	r2, .L191
 1385 007c B2F8F021 		ldrh	r2, [r2, #496]
 1386 0080 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 37


 1387 0082 FB60     		str	r3, [r7, #12]
 659:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1388              		.loc 1 659 0
 1389 0084 8A4B     		ldr	r3, .L191+4
 1390 0086 5B68     		ldr	r3, [r3, #4]
 1391 0088 884A     		ldr	r2, .L191
 1392 008a B2F8F221 		ldrh	r2, [r2, #498]
 1393 008e 9B1A     		subs	r3, r3, r2
 1394 0090 BB60     		str	r3, [r7, #8]
 660:..\src/interruptions.c **** 
 661:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
 662:..\src/interruptions.c ****     switch(SH_MOT->input_mode) {
 1395              		.loc 1 662 0
 1396 0092 7B6C     		ldr	r3, [r7, #68]
 1397 0094 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1398 0098 013B     		subs	r3, r3, #1
 1399 009a 052B     		cmp	r3, #5
 1400 009c 00F2C681 		bhi	.L183
 1401 00a0 01A2     		adr	r2, .L81
 1402 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1403 00a6 00BF     		.p2align 2
 1404              	.L81:
 1405 00a8 C1000000 		.word	.L80+1
 1406 00ac A3010000 		.word	.L82+1
 1407 00b0 0B020000 		.word	.L83+1
 1408 00b4 7B020000 		.word	.L84+1
 1409 00b8 53030000 		.word	.L85+1
 1410 00bc D1010000 		.word	.L86+1
 1411              		.p2align 1
 1412              	.L80:
 663:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 664:..\src/interruptions.c **** 
 665:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 666:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 667:..\src/interruptions.c ****             if (c_mem.enc[SH_ENC_L].double_encoder_on_off) 
 1413              		.loc 1 667 0
 1414 00c0 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1415 00c4 7949     		ldr	r1, .L191
 1416 00c6 1346     		mov	r3, r2
 1417 00c8 5B00     		lsls	r3, r3, #1
 1418 00ca 1344     		add	r3, r3, r2
 1419 00cc 1B01     		lsls	r3, r3, #4
 1420 00ce 0B44     		add	r3, r3, r1
 1421 00d0 03F5D873 		add	r3, r3, #432
 1422 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1423 00d6 002B     		cmp	r3, #0
 1424 00d8 1BD0     		beq	.L87
 668:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[2] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1425              		.loc 1 668 0
 1426 00da 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1427 00de 754A     		ldr	r2, .L191+8
 1428 00e0 3421     		movs	r1, #52
 1429 00e2 01FB03F3 		mul	r3, r1, r3
 1430 00e6 1344     		add	r3, r3, r2
 1431 00e8 0833     		adds	r3, r3, #8
 1432 00ea 1968     		ldr	r1, [r3]
 1433 00ec 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 38


 1434 00f0 6E48     		ldr	r0, .L191
 1435 00f2 1346     		mov	r3, r2
 1436 00f4 5B00     		lsls	r3, r3, #1
 1437 00f6 1344     		add	r3, r3, r2
 1438 00f8 1B01     		lsls	r3, r3, #4
 1439 00fa 0344     		add	r3, r3, r0
 1440 00fc 03F5DA73 		add	r3, r3, #436
 1441 0100 93F90030 		ldrsb	r3, [r3]
 1442 0104 03FB01F2 		mul	r2, r3, r1
 1443 0108 7B6C     		ldr	r3, [r7, #68]
 1444 010a 5B6B     		ldr	r3, [r3, #52]
 1445 010c 1344     		add	r3, r3, r2
 1446 010e FB64     		str	r3, [r7, #76]
 1447 0110 1AE0     		b	.L88
 1448              	.L87:
 669:..\src/interruptions.c ****             else
 670:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[1] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1449              		.loc 1 670 0
 1450 0112 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1451 0116 674A     		ldr	r2, .L191+8
 1452 0118 3421     		movs	r1, #52
 1453 011a 01FB03F3 		mul	r3, r1, r3
 1454 011e 1344     		add	r3, r3, r2
 1455 0120 0433     		adds	r3, r3, #4
 1456 0122 1968     		ldr	r1, [r3]
 1457 0124 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1458 0128 6048     		ldr	r0, .L191
 1459 012a 1346     		mov	r3, r2
 1460 012c 5B00     		lsls	r3, r3, #1
 1461 012e 1344     		add	r3, r3, r2
 1462 0130 1B01     		lsls	r3, r3, #4
 1463 0132 0344     		add	r3, r3, r0
 1464 0134 03F5DA73 		add	r3, r3, #436
 1465 0138 93F90030 		ldrsb	r3, [r3]
 1466 013c 03FB01F2 		mul	r2, r3, r1
 1467 0140 7B6C     		ldr	r3, [r7, #68]
 1468 0142 5B6B     		ldr	r3, [r3, #52]
 1469 0144 1344     		add	r3, r3, r2
 1470 0146 FB64     		str	r3, [r7, #76]
 1471              	.L88:
 671:..\src/interruptions.c ****             
 672:..\src/interruptions.c **** 
 673:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 674:..\src/interruptions.c ****             if (((handle_value - g_refOld[0].pos) > SH_MOT->max_step_pos) && (SH_MOT->max_step_pos 
 1472              		.loc 1 674 0
 1473 0148 5B4B     		ldr	r3, .L191+12
 1474 014a 1B68     		ldr	r3, [r3]
 1475 014c FA6C     		ldr	r2, [r7, #76]
 1476 014e D21A     		subs	r2, r2, r3
 1477 0150 7B6C     		ldr	r3, [r7, #68]
 1478 0152 1B6C     		ldr	r3, [r3, #64]
 1479 0154 9A42     		cmp	r2, r3
 1480 0156 0BDD     		ble	.L89
 1481              		.loc 1 674 0 is_stmt 0 discriminator 1
 1482 0158 7B6C     		ldr	r3, [r7, #68]
 1483 015a 1B6C     		ldr	r3, [r3, #64]
 1484 015c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 39


 1485 015e 07D0     		beq	.L89
 675:..\src/interruptions.c ****                 g_ref[0].pos += SH_MOT->max_step_pos;
 1486              		.loc 1 675 0 is_stmt 1
 1487 0160 564B     		ldr	r3, .L191+16
 1488 0162 1A68     		ldr	r2, [r3]
 1489 0164 7B6C     		ldr	r3, [r7, #68]
 1490 0166 1B6C     		ldr	r3, [r3, #64]
 1491 0168 1344     		add	r3, r3, r2
 1492 016a 544A     		ldr	r2, .L191+16
 1493 016c 1360     		str	r3, [r2]
 1494 016e 17E0     		b	.L90
 1495              	.L89:
 676:..\src/interruptions.c ****             else {
 677:..\src/interruptions.c ****                 if (((handle_value - g_refOld[0].pos) < SH_MOT->max_step_neg) && (SH_MOT->max_step_
 1496              		.loc 1 677 0
 1497 0170 514B     		ldr	r3, .L191+12
 1498 0172 1B68     		ldr	r3, [r3]
 1499 0174 FA6C     		ldr	r2, [r7, #76]
 1500 0176 D21A     		subs	r2, r2, r3
 1501 0178 7B6C     		ldr	r3, [r7, #68]
 1502 017a DB6B     		ldr	r3, [r3, #60]
 1503 017c 9A42     		cmp	r2, r3
 1504 017e 0BDA     		bge	.L91
 1505              		.loc 1 677 0 is_stmt 0 discriminator 1
 1506 0180 7B6C     		ldr	r3, [r7, #68]
 1507 0182 DB6B     		ldr	r3, [r3, #60]
 1508 0184 002B     		cmp	r3, #0
 1509 0186 07D0     		beq	.L91
 678:..\src/interruptions.c ****                     g_ref[0].pos += SH_MOT->max_step_neg;
 1510              		.loc 1 678 0 is_stmt 1
 1511 0188 4C4B     		ldr	r3, .L191+16
 1512 018a 1A68     		ldr	r2, [r3]
 1513 018c 7B6C     		ldr	r3, [r7, #68]
 1514 018e DB6B     		ldr	r3, [r3, #60]
 1515 0190 1344     		add	r3, r3, r2
 1516 0192 4A4A     		ldr	r2, .L191+16
 1517 0194 1360     		str	r3, [r2]
 1518 0196 03E0     		b	.L90
 1519              	.L91:
 679:..\src/interruptions.c ****                 else
 680:..\src/interruptions.c ****                     g_ref[0].pos = handle_value;
 1520              		.loc 1 680 0
 1521 0198 484A     		ldr	r2, .L191+16
 1522 019a FB6C     		ldr	r3, [r7, #76]
 1523 019c 1360     		str	r3, [r2]
 681:..\src/interruptions.c ****             }
 682:..\src/interruptions.c ****             break;
 1524              		.loc 1 682 0
 1525 019e 48E1     		b	.L92
 1526              	.L90:
 1527 01a0 47E1     		b	.L92
 1528              	.L82:
 683:..\src/interruptions.c ****             
 684:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 685:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1529              		.loc 1 685 0
 1530 01a2 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 40


 1531 01a4 002B     		cmp	r3, #0
 1532 01a6 0FDD     		ble	.L93
 686:..\src/interruptions.c ****                 g_ref[0].pos = (err_emg_1 * g_mem.motor[0].pos_lim_sup) / (1024 - c_mem.emg.emg_thr
 1533              		.loc 1 686 0
 1534 01a8 454B     		ldr	r3, .L191+20
 1535 01aa D3F8E830 		ldr	r3, [r3, #232]
 1536 01ae FA68     		ldr	r2, [r7, #12]
 1537 01b0 02FB03F2 		mul	r2, r2, r3
 1538 01b4 3D4B     		ldr	r3, .L191
 1539 01b6 B3F8F031 		ldrh	r3, [r3, #496]
 1540 01ba C3F58063 		rsb	r3, r3, #1024
 1541 01be 92FBF3F3 		sdiv	r3, r2, r3
 1542 01c2 3E4A     		ldr	r2, .L191+16
 1543 01c4 1360     		str	r3, [r2]
 687:..\src/interruptions.c ****             else
 688:..\src/interruptions.c ****                 g_ref[0].pos = 0;
 689:..\src/interruptions.c ****             break;
 1544              		.loc 1 689 0
 1545 01c6 34E1     		b	.L92
 1546              	.L93:
 688:..\src/interruptions.c ****             break;
 1547              		.loc 1 688 0
 1548 01c8 3C4B     		ldr	r3, .L191+16
 1549 01ca 0022     		movs	r2, #0
 1550 01cc 1A60     		str	r2, [r3]
 1551              		.loc 1 689 0
 1552 01ce 30E1     		b	.L92
 1553              	.L86:
 690:..\src/interruptions.c ****                 
 691:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 692:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1554              		.loc 1 692 0
 1555 01d0 FB68     		ldr	r3, [r7, #12]
 1556 01d2 002B     		cmp	r3, #0
 1557 01d4 13DD     		ble	.L95
 693:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup - (err_emg_1 * g_mem.motor[0].pos_lim_sup
 1558              		.loc 1 693 0
 1559 01d6 3A4B     		ldr	r3, .L191+20
 1560 01d8 D3F8E820 		ldr	r2, [r3, #232]
 1561 01dc 384B     		ldr	r3, .L191+20
 1562 01de D3F8E830 		ldr	r3, [r3, #232]
 1563 01e2 F968     		ldr	r1, [r7, #12]
 1564 01e4 01FB03F1 		mul	r1, r1, r3
 1565 01e8 304B     		ldr	r3, .L191
 1566 01ea B3F8F031 		ldrh	r3, [r3, #496]
 1567 01ee C3F58063 		rsb	r3, r3, #1024
 1568 01f2 91FBF3F3 		sdiv	r3, r1, r3
 1569 01f6 D31A     		subs	r3, r2, r3
 1570 01f8 304A     		ldr	r2, .L191+16
 1571 01fa 1360     		str	r3, [r2]
 694:..\src/interruptions.c ****             else
 695:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup;
 696:..\src/interruptions.c ****             break;
 1572              		.loc 1 696 0
 1573 01fc 19E1     		b	.L92
 1574              	.L95:
 695:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 41


 1575              		.loc 1 695 0
 1576 01fe 304B     		ldr	r3, .L191+20
 1577 0200 D3F8E830 		ldr	r3, [r3, #232]
 1578 0204 2D4A     		ldr	r2, .L191+16
 1579 0206 1360     		str	r3, [r2]
 1580              		.loc 1 696 0
 1581 0208 13E1     		b	.L92
 1582              	.L83:
 697:..\src/interruptions.c **** 
 698:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 699:..\src/interruptions.c ****             g_ref[0].pos = g_mem.motor[0].pos_lim_sup - g_refOld[0].pos;
 1583              		.loc 1 699 0
 1584 020a 2D4B     		ldr	r3, .L191+20
 1585 020c D3F8E820 		ldr	r2, [r3, #232]
 1586 0210 294B     		ldr	r3, .L191+12
 1587 0212 1B68     		ldr	r3, [r3]
 1588 0214 D31A     		subs	r3, r2, r3
 1589 0216 294A     		ldr	r2, .L191+16
 1590 0218 1360     		str	r3, [r2]
 700:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1591              		.loc 1 700 0
 1592 021a FB68     		ldr	r3, [r7, #12]
 1593 021c 002B     		cmp	r3, #0
 1594 021e 13DD     		ble	.L97
 701:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (1024
 1595              		.loc 1 701 0
 1596 0220 254B     		ldr	r3, .L191+12
 1597 0222 1A68     		ldr	r2, [r3]
 1598 0224 264B     		ldr	r3, .L191+20
 1599 0226 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1600 022a 1946     		mov	r1, r3
 1601 022c FB68     		ldr	r3, [r7, #12]
 1602 022e 03FB01F3 		mul	r3, r3, r1
 1603 0232 5900     		lsls	r1, r3, #1
 1604 0234 1D4B     		ldr	r3, .L191
 1605 0236 B3F8F031 		ldrh	r3, [r3, #496]
 1606 023a C3F58063 		rsb	r3, r3, #1024
 1607 023e 91FBF3F3 		sdiv	r3, r1, r3
 1608 0242 1344     		add	r3, r3, r2
 1609 0244 1D4A     		ldr	r2, .L191+16
 1610 0246 1360     		str	r3, [r2]
 1611              	.L97:
 702:..\src/interruptions.c ****             }
 703:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1612              		.loc 1 703 0
 1613 0248 BB68     		ldr	r3, [r7, #8]
 1614 024a 002B     		cmp	r3, #0
 1615 024c 40F3F080 		ble	.L184
 704:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (1024
 1616              		.loc 1 704 0
 1617 0250 194B     		ldr	r3, .L191+12
 1618 0252 1A68     		ldr	r2, [r3]
 1619 0254 1A4B     		ldr	r3, .L191+20
 1620 0256 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1621 025a 1946     		mov	r1, r3
 1622 025c BB68     		ldr	r3, [r7, #8]
 1623 025e 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 42


 1624 0262 5900     		lsls	r1, r3, #1
 1625 0264 114B     		ldr	r3, .L191
 1626 0266 B3F8F231 		ldrh	r3, [r3, #498]
 1627 026a C3F58063 		rsb	r3, r3, #1024
 1628 026e 91FBF3F3 		sdiv	r3, r1, r3
 1629 0272 D31A     		subs	r3, r2, r3
 1630 0274 114A     		ldr	r2, .L191+16
 1631 0276 1360     		str	r3, [r2]
 705:..\src/interruptions.c ****             }
 706:..\src/interruptions.c ****             break;
 1632              		.loc 1 706 0
 1633 0278 DAE0     		b	.L184
 1634              	.L84:
 707:..\src/interruptions.c **** 
 708:..\src/interruptions.c **** 
 709:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 710:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1635              		.loc 1 710 0
 1636 027a 0F4B     		ldr	r3, .L191+12
 1637 027c 1B68     		ldr	r3, [r3]
 1638 027e 0F4A     		ldr	r2, .L191+16
 1639 0280 1360     		str	r3, [r2]
 711:..\src/interruptions.c ****             switch (current_emg) {
 1640              		.loc 1 711 0
 1641 0282 104B     		ldr	r3, .L191+24
 1642 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1643 0286 012B     		cmp	r3, #1
 1644 0288 29D0     		beq	.L100
 1645 028a 022B     		cmp	r3, #2
 1646 028c 43D0     		beq	.L101
 1647 028e 002B     		cmp	r3, #0
 1648 0290 00D0     		beq	.L102
 712:..\src/interruptions.c ****                 case 0:
 713:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 714:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 715:..\src/interruptions.c ****                         current_emg = 1;
 716:..\src/interruptions.c ****                         break;
 717:..\src/interruptions.c ****                     }
 718:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 719:..\src/interruptions.c ****                         current_emg = 2;
 720:..\src/interruptions.c ****                         break;
 721:..\src/interruptions.c ****                     }
 722:..\src/interruptions.c ****                     break;
 723:..\src/interruptions.c **** 
 724:..\src/interruptions.c ****                 case 1:
 725:..\src/interruptions.c ****                     // EMG 1 is first
 726:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 727:..\src/interruptions.c ****                         current_emg = 0;
 728:..\src/interruptions.c ****                         break;
 729:..\src/interruptions.c ****                     }
 730:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (1024
 731:..\src/interruptions.c ****                     break;
 732:..\src/interruptions.c **** 
 733:..\src/interruptions.c ****                 case 2:
 734:..\src/interruptions.c ****                     // EMG 2 is first
 735:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 736:..\src/interruptions.c ****                         current_emg = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 43


 737:..\src/interruptions.c ****                         break;
 738:..\src/interruptions.c ****                     }
 739:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (1024
 740:..\src/interruptions.c ****                     break;
 741:..\src/interruptions.c **** 
 742:..\src/interruptions.c ****                 default:
 743:..\src/interruptions.c ****                     break;
 1649              		.loc 1 743 0
 1650 0292 5DE0     		b	.L104
 1651              	.L102:
 714:..\src/interruptions.c ****                         current_emg = 1;
 1652              		.loc 1 714 0
 1653 0294 FB68     		ldr	r3, [r7, #12]
 1654 0296 002B     		cmp	r3, #0
 1655 0298 16DD     		ble	.L103
 714:..\src/interruptions.c ****                         current_emg = 1;
 1656              		.loc 1 714 0 is_stmt 0 discriminator 1
 1657 029a FA68     		ldr	r2, [r7, #12]
 1658 029c BB68     		ldr	r3, [r7, #8]
 1659 029e 9A42     		cmp	r2, r3
 1660 02a0 12DD     		ble	.L103
 715:..\src/interruptions.c ****                         break;
 1661              		.loc 1 715 0 is_stmt 1
 1662 02a2 084B     		ldr	r3, .L191+24
 1663 02a4 0122     		movs	r2, #1
 1664 02a6 1A70     		strb	r2, [r3]
 716:..\src/interruptions.c ****                     }
 1665              		.loc 1 716 0
 1666 02a8 52E0     		b	.L104
 1667              	.L192:
 1668 02aa 00BF     		.align	2
 1669              	.L191:
 1670 02ac 00000000 		.word	c_mem
 1671 02b0 00000000 		.word	g_emg_meas
 1672 02b4 00000000 		.word	g_meas
 1673 02b8 00000000 		.word	g_refOld
 1674 02bc 00000000 		.word	g_ref
 1675 02c0 00000000 		.word	g_mem
 1676 02c4 8C000000 		.word	current_emg.10445
 1677              	.L103:
 718:..\src/interruptions.c ****                         current_emg = 2;
 1678              		.loc 1 718 0
 1679 02c8 BB68     		ldr	r3, [r7, #8]
 1680 02ca 002B     		cmp	r3, #0
 1681 02cc 3FDD     		ble	.L185
 718:..\src/interruptions.c ****                         current_emg = 2;
 1682              		.loc 1 718 0 is_stmt 0 discriminator 1
 1683 02ce BA68     		ldr	r2, [r7, #8]
 1684 02d0 FB68     		ldr	r3, [r7, #12]
 1685 02d2 9A42     		cmp	r2, r3
 1686 02d4 3BDD     		ble	.L185
 719:..\src/interruptions.c ****                         break;
 1687              		.loc 1 719 0 is_stmt 1
 1688 02d6 954B     		ldr	r3, .L193
 1689 02d8 0222     		movs	r2, #2
 1690 02da 1A70     		strb	r2, [r3]
 720:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 44


 1691              		.loc 1 720 0
 1692 02dc 38E0     		b	.L104
 1693              	.L100:
 726:..\src/interruptions.c ****                         current_emg = 0;
 1694              		.loc 1 726 0
 1695 02de FB68     		ldr	r3, [r7, #12]
 1696 02e0 002B     		cmp	r3, #0
 1697 02e2 03DA     		bge	.L106
 727:..\src/interruptions.c ****                         break;
 1698              		.loc 1 727 0
 1699 02e4 914B     		ldr	r3, .L193
 1700 02e6 0022     		movs	r2, #0
 1701 02e8 1A70     		strb	r2, [r3]
 728:..\src/interruptions.c ****                     }
 1702              		.loc 1 728 0
 1703 02ea 31E0     		b	.L104
 1704              	.L106:
 730:..\src/interruptions.c ****                     break;
 1705              		.loc 1 730 0
 1706 02ec 904B     		ldr	r3, .L193+4
 1707 02ee 1A68     		ldr	r2, [r3]
 1708 02f0 904B     		ldr	r3, .L193+8
 1709 02f2 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1710 02f6 1946     		mov	r1, r3
 1711 02f8 FB68     		ldr	r3, [r7, #12]
 1712 02fa 03FB01F3 		mul	r3, r3, r1
 1713 02fe 9900     		lsls	r1, r3, #2
 1714 0300 8D4B     		ldr	r3, .L193+12
 1715 0302 B3F8F031 		ldrh	r3, [r3, #496]
 1716 0306 C3F58063 		rsb	r3, r3, #1024
 1717 030a 91FBF3F3 		sdiv	r3, r1, r3
 1718 030e 1344     		add	r3, r3, r2
 1719 0310 8A4A     		ldr	r2, .L193+16
 1720 0312 1360     		str	r3, [r2]
 731:..\src/interruptions.c **** 
 1721              		.loc 1 731 0
 1722 0314 1CE0     		b	.L104
 1723              	.L101:
 735:..\src/interruptions.c ****                         current_emg = 0;
 1724              		.loc 1 735 0
 1725 0316 BB68     		ldr	r3, [r7, #8]
 1726 0318 002B     		cmp	r3, #0
 1727 031a 03DA     		bge	.L107
 736:..\src/interruptions.c ****                         break;
 1728              		.loc 1 736 0
 1729 031c 834B     		ldr	r3, .L193
 1730 031e 0022     		movs	r2, #0
 1731 0320 1A70     		strb	r2, [r3]
 737:..\src/interruptions.c ****                     }
 1732              		.loc 1 737 0
 1733 0322 15E0     		b	.L104
 1734              	.L107:
 739:..\src/interruptions.c ****                     break;
 1735              		.loc 1 739 0
 1736 0324 824B     		ldr	r3, .L193+4
 1737 0326 1A68     		ldr	r2, [r3]
 1738 0328 824B     		ldr	r3, .L193+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 45


 1739 032a 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1740 032e 1946     		mov	r1, r3
 1741 0330 BB68     		ldr	r3, [r7, #8]
 1742 0332 03FB01F3 		mul	r3, r3, r1
 1743 0336 9900     		lsls	r1, r3, #2
 1744 0338 7F4B     		ldr	r3, .L193+12
 1745 033a B3F8F231 		ldrh	r3, [r3, #498]
 1746 033e C3F58063 		rsb	r3, r3, #1024
 1747 0342 91FBF3F3 		sdiv	r3, r1, r3
 1748 0346 D31A     		subs	r3, r2, r3
 1749 0348 7C4A     		ldr	r2, .L193+16
 1750 034a 1360     		str	r3, [r2]
 740:..\src/interruptions.c **** 
 1751              		.loc 1 740 0
 1752 034c 00E0     		b	.L104
 1753              	.L185:
 722:..\src/interruptions.c **** 
 1754              		.loc 1 722 0
 1755 034e 00BF     		nop
 1756              	.L104:
 744:..\src/interruptions.c ****             }
 745:..\src/interruptions.c ****             break;
 1757              		.loc 1 745 0 discriminator 1
 1758 0350 6FE0     		b	.L92
 1759              	.L85:
 746:..\src/interruptions.c **** 
 747:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 748:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1760              		.loc 1 748 0
 1761 0352 774B     		ldr	r3, .L193+4
 1762 0354 1B68     		ldr	r3, [r3]
 1763 0356 794A     		ldr	r2, .L193+16
 1764 0358 1360     		str	r3, [r2]
 749:..\src/interruptions.c ****             switch (current_emg) {
 1765              		.loc 1 749 0
 1766 035a 744B     		ldr	r3, .L193
 1767 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1768 035e 012B     		cmp	r3, #1
 1769 0360 1AD0     		beq	.L109
 1770 0362 022B     		cmp	r3, #2
 1771 0364 3AD0     		beq	.L110
 1772 0366 002B     		cmp	r3, #0
 1773 0368 00D0     		beq	.L111
 750:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 751:..\src/interruptions.c ****                 case 0:
 752:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 753:..\src/interruptions.c ****                         current_emg = 1;
 754:..\src/interruptions.c ****                         break;
 755:..\src/interruptions.c ****                     }
 756:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 757:..\src/interruptions.c ****                         current_emg = 2;
 758:..\src/interruptions.c ****                         break;
 759:..\src/interruptions.c ****                     }
 760:..\src/interruptions.c ****                     break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                 // EMG 1 is first
 763:..\src/interruptions.c ****                 case 1:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 46


 764:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 765:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 766:..\src/interruptions.c ****                         current_emg = 0;
 767:..\src/interruptions.c ****                         break;
 768:..\src/interruptions.c ****                     }
 769:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 770:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 771:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 772:..\src/interruptions.c ****                     
 773:..\src/interruptions.c ****                     break;
 774:..\src/interruptions.c **** 
 775:..\src/interruptions.c ****                 // EMG 2 is first
 776:..\src/interruptions.c ****                 case 2:
 777:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 778:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 779:..\src/interruptions.c ****                         current_emg = 0;
 780:..\src/interruptions.c ****                         break;
 781:..\src/interruptions.c ****                     }
 782:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 783:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 784:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 785:..\src/interruptions.c ****                     }
 786:..\src/interruptions.c ****                     break;
 787:..\src/interruptions.c **** 
 788:..\src/interruptions.c ****                 default:
 789:..\src/interruptions.c ****                     break;
 1774              		.loc 1 789 0
 1775 036a 5EE0     		b	.L113
 1776              	.L111:
 752:..\src/interruptions.c ****                         current_emg = 1;
 1777              		.loc 1 752 0
 1778 036c FB68     		ldr	r3, [r7, #12]
 1779 036e 002B     		cmp	r3, #0
 1780 0370 07DD     		ble	.L112
 752:..\src/interruptions.c ****                         current_emg = 1;
 1781              		.loc 1 752 0 is_stmt 0 discriminator 1
 1782 0372 FA68     		ldr	r2, [r7, #12]
 1783 0374 BB68     		ldr	r3, [r7, #8]
 1784 0376 9A42     		cmp	r2, r3
 1785 0378 03DD     		ble	.L112
 753:..\src/interruptions.c ****                         break;
 1786              		.loc 1 753 0 is_stmt 1
 1787 037a 6C4B     		ldr	r3, .L193
 1788 037c 0122     		movs	r2, #1
 1789 037e 1A70     		strb	r2, [r3]
 754:..\src/interruptions.c ****                     }
 1790              		.loc 1 754 0
 1791 0380 53E0     		b	.L113
 1792              	.L112:
 756:..\src/interruptions.c ****                         current_emg = 2;
 1793              		.loc 1 756 0
 1794 0382 BB68     		ldr	r3, [r7, #8]
 1795 0384 002B     		cmp	r3, #0
 1796 0386 4BDD     		ble	.L186
 756:..\src/interruptions.c ****                         current_emg = 2;
 1797              		.loc 1 756 0 is_stmt 0 discriminator 1
 1798 0388 BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 47


 1799 038a FB68     		ldr	r3, [r7, #12]
 1800 038c 9A42     		cmp	r2, r3
 1801 038e 47DD     		ble	.L186
 757:..\src/interruptions.c ****                         break;
 1802              		.loc 1 757 0 is_stmt 1
 1803 0390 664B     		ldr	r3, .L193
 1804 0392 0222     		movs	r2, #2
 1805 0394 1A70     		strb	r2, [r3]
 758:..\src/interruptions.c ****                     }
 1806              		.loc 1 758 0
 1807 0396 48E0     		b	.L113
 1808              	.L109:
 765:..\src/interruptions.c ****                         current_emg = 0;
 1809              		.loc 1 765 0
 1810 0398 FB68     		ldr	r3, [r7, #12]
 1811 039a 002B     		cmp	r3, #0
 1812 039c 06DA     		bge	.L115
 765:..\src/interruptions.c ****                         current_emg = 0;
 1813              		.loc 1 765 0 is_stmt 0 discriminator 1
 1814 039e BB68     		ldr	r3, [r7, #8]
 1815 03a0 002B     		cmp	r3, #0
 1816 03a2 03DA     		bge	.L115
 766:..\src/interruptions.c ****                         break;
 1817              		.loc 1 766 0 is_stmt 1
 1818 03a4 614B     		ldr	r3, .L193
 1819 03a6 0022     		movs	r2, #0
 1820 03a8 1A70     		strb	r2, [r3]
 767:..\src/interruptions.c ****                     }
 1821              		.loc 1 767 0
 1822 03aa 3EE0     		b	.L113
 1823              	.L115:
 770:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 1824              		.loc 1 770 0
 1825 03ac FB68     		ldr	r3, [r7, #12]
 1826 03ae 002B     		cmp	r3, #0
 1827 03b0 38DD     		ble	.L187
 771:..\src/interruptions.c ****                     
 1828              		.loc 1 771 0
 1829 03b2 5F4B     		ldr	r3, .L193+4
 1830 03b4 1A68     		ldr	r2, [r3]
 1831 03b6 5F4B     		ldr	r3, .L193+8
 1832 03b8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1833 03bc 1946     		mov	r1, r3
 1834 03be FB68     		ldr	r3, [r7, #12]
 1835 03c0 03FB01F3 		mul	r3, r3, r1
 1836 03c4 9900     		lsls	r1, r3, #2
 1837 03c6 5C4B     		ldr	r3, .L193+12
 1838 03c8 B3F8F031 		ldrh	r3, [r3, #496]
 1839 03cc C3F58063 		rsb	r3, r3, #1024
 1840 03d0 91FBF3F3 		sdiv	r3, r1, r3
 1841 03d4 1344     		add	r3, r3, r2
 1842 03d6 594A     		ldr	r2, .L193+16
 1843 03d8 1360     		str	r3, [r2]
 773:..\src/interruptions.c **** 
 1844              		.loc 1 773 0
 1845 03da 23E0     		b	.L187
 1846              	.L110:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 48


 778:..\src/interruptions.c ****                         current_emg = 0;
 1847              		.loc 1 778 0
 1848 03dc FB68     		ldr	r3, [r7, #12]
 1849 03de 002B     		cmp	r3, #0
 1850 03e0 06DA     		bge	.L117
 778:..\src/interruptions.c ****                         current_emg = 0;
 1851              		.loc 1 778 0 is_stmt 0 discriminator 1
 1852 03e2 BB68     		ldr	r3, [r7, #8]
 1853 03e4 002B     		cmp	r3, #0
 1854 03e6 03DA     		bge	.L117
 779:..\src/interruptions.c ****                         break;
 1855              		.loc 1 779 0 is_stmt 1
 1856 03e8 504B     		ldr	r3, .L193
 1857 03ea 0022     		movs	r2, #0
 1858 03ec 1A70     		strb	r2, [r3]
 780:..\src/interruptions.c ****                     }
 1859              		.loc 1 780 0
 1860 03ee 1CE0     		b	.L113
 1861              	.L117:
 783:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 1862              		.loc 1 783 0
 1863 03f0 BB68     		ldr	r3, [r7, #8]
 1864 03f2 002B     		cmp	r3, #0
 1865 03f4 18DD     		ble	.L188
 784:..\src/interruptions.c ****                     }
 1866              		.loc 1 784 0
 1867 03f6 4E4B     		ldr	r3, .L193+4
 1868 03f8 1A68     		ldr	r2, [r3]
 1869 03fa 4F4B     		ldr	r3, .L193+12
 1870 03fc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1871 0400 1946     		mov	r1, r3
 1872 0402 BB68     		ldr	r3, [r7, #8]
 1873 0404 03FB01F3 		mul	r3, r3, r1
 1874 0408 9900     		lsls	r1, r3, #2
 1875 040a 4B4B     		ldr	r3, .L193+12
 1876 040c B3F8F231 		ldrh	r3, [r3, #498]
 1877 0410 C3F58063 		rsb	r3, r3, #1024
 1878 0414 91FBF3F3 		sdiv	r3, r1, r3
 1879 0418 D31A     		subs	r3, r2, r3
 1880 041a 484A     		ldr	r2, .L193+16
 1881 041c 1360     		str	r3, [r2]
 786:..\src/interruptions.c **** 
 1882              		.loc 1 786 0
 1883 041e 03E0     		b	.L188
 1884              	.L186:
 760:..\src/interruptions.c **** 
 1885              		.loc 1 760 0
 1886 0420 00BF     		nop
 1887 0422 06E0     		b	.L92
 1888              	.L187:
 773:..\src/interruptions.c **** 
 1889              		.loc 1 773 0
 1890 0424 00BF     		nop
 1891 0426 04E0     		b	.L92
 1892              	.L188:
 786:..\src/interruptions.c **** 
 1893              		.loc 1 786 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 49


 1894 0428 00BF     		nop
 1895              	.L113:
 790:..\src/interruptions.c ****             }
 791:..\src/interruptions.c ****             break;
 1896              		.loc 1 791 0 discriminator 3
 1897 042a 02E0     		b	.L92
 1898              	.L183:
 792:..\src/interruptions.c **** 
 793:..\src/interruptions.c ****         default:
 794:..\src/interruptions.c ****             break;
 1899              		.loc 1 794 0
 1900 042c 00BF     		nop
 1901 042e 00E0     		b	.L92
 1902              	.L184:
 706:..\src/interruptions.c **** 
 1903              		.loc 1 706 0
 1904 0430 00BF     		nop
 1905              	.L92:
 795:..\src/interruptions.c ****     }
 796:..\src/interruptions.c **** 
 797:..\src/interruptions.c ****     // Position limit saturation
 798:..\src/interruptions.c ****     if (SH_MOT->pos_lim_flag) {
 1906              		.loc 1 798 0
 1907 0432 7B6C     		ldr	r3, [r7, #68]
 1908 0434 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1909 0438 002B     		cmp	r3, #0
 1910 043a 13D0     		beq	.L119
 799:..\src/interruptions.c ****         if (g_ref[0].pos < SH_MOT->pos_lim_inf) 
 1911              		.loc 1 799 0
 1912 043c 3F4B     		ldr	r3, .L193+16
 1913 043e 1A68     		ldr	r2, [r3]
 1914 0440 7B6C     		ldr	r3, [r7, #68]
 1915 0442 5B6B     		ldr	r3, [r3, #52]
 1916 0444 9A42     		cmp	r2, r3
 1917 0446 03DA     		bge	.L120
 800:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_inf;
 1918              		.loc 1 800 0
 1919 0448 7B6C     		ldr	r3, [r7, #68]
 1920 044a 5B6B     		ldr	r3, [r3, #52]
 1921 044c 3B4A     		ldr	r2, .L193+16
 1922 044e 1360     		str	r3, [r2]
 1923              	.L120:
 801:..\src/interruptions.c ****         if (g_ref[0].pos > SH_MOT->pos_lim_sup) 
 1924              		.loc 1 801 0
 1925 0450 3A4B     		ldr	r3, .L193+16
 1926 0452 1A68     		ldr	r2, [r3]
 1927 0454 7B6C     		ldr	r3, [r7, #68]
 1928 0456 9B6B     		ldr	r3, [r3, #56]
 1929 0458 9A42     		cmp	r2, r3
 1930 045a 03DD     		ble	.L119
 802:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_sup;
 1931              		.loc 1 802 0
 1932 045c 7B6C     		ldr	r3, [r7, #68]
 1933 045e 9B6B     		ldr	r3, [r3, #56]
 1934 0460 364A     		ldr	r2, .L193+16
 1935 0462 1360     		str	r3, [r2]
 1936              	.L119:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 50


 803:..\src/interruptions.c ****     }
 804:..\src/interruptions.c ****     
 805:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1937              		.loc 1 805 0
 1938 0464 364B     		ldr	r3, .L193+20
 1939 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1940 0468 012B     		cmp	r3, #1
 1941 046a 02D1     		bne	.L121
 806:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 807:..\src/interruptions.c ****         g_ref[0].pos = 0;
 1942              		.loc 1 807 0
 1943 046c 334B     		ldr	r3, .L193+16
 1944 046e 0022     		movs	r2, #0
 1945 0470 1A60     		str	r2, [r3]
 1946              	.L121:
 808:..\src/interruptions.c ****     }
 809:..\src/interruptions.c ****         
 810:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1947              		.loc 1 810 0
 1948 0472 314B     		ldr	r3, .L193+12
 1949 0474 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1950 0478 012B     		cmp	r3, #1
 1951 047a 2AD1     		bne	.L122
 811:..\src/interruptions.c ****         if (rest_enabled == 1){
 1952              		.loc 1 811 0
 1953 047c 314B     		ldr	r3, .L193+24
 1954 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1955 0480 012B     		cmp	r3, #1
 1956 0482 03D1     		bne	.L123
 812:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 813:..\src/interruptions.c ****             g_ref[0].pos = rest_pos_curr_ref;
 1957              		.loc 1 813 0
 1958 0484 304B     		ldr	r3, .L193+28
 1959 0486 1B68     		ldr	r3, [r3]
 1960 0488 2C4A     		ldr	r2, .L193+16
 1961 048a 1360     		str	r3, [r2]
 1962              	.L123:
 814:..\src/interruptions.c ****         }
 815:..\src/interruptions.c ****         
 816:..\src/interruptions.c ****         if (forced_open == 1) {
 1963              		.loc 1 816 0
 1964 048c 2F4B     		ldr	r3, .L193+32
 1965 048e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1966 0490 012B     		cmp	r3, #1
 1967 0492 1ED1     		bne	.L122
 817:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 818:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1968              		.loc 1 818 0
 1969 0494 BB68     		ldr	r3, [r7, #8]
 1970 0496 002B     		cmp	r3, #0
 1971 0498 13DD     		ble	.L124
 819:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem.
 1972              		.loc 1 819 0
 1973 049a 264B     		ldr	r3, .L193+8
 1974 049c D3F8A022 		ldr	r2, [r3, #672]
 1975 04a0 244B     		ldr	r3, .L193+8
 1976 04a2 D3F8A032 		ldr	r3, [r3, #672]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 51


 1977 04a6 B968     		ldr	r1, [r7, #8]
 1978 04a8 01FB03F1 		mul	r1, r1, r3
 1979 04ac 224B     		ldr	r3, .L193+12
 1980 04ae B3F8F231 		ldrh	r3, [r3, #498]
 1981 04b2 C3F58063 		rsb	r3, r3, #1024
 1982 04b6 91FBF3F3 		sdiv	r3, r1, r3
 1983 04ba D31A     		subs	r3, r2, r3
 1984 04bc 1F4A     		ldr	r2, .L193+16
 1985 04be 1360     		str	r3, [r2]
 1986 04c0 07E0     		b	.L122
 1987              	.L124:
 820:..\src/interruptions.c ****             else {
 821:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos;
 1988              		.loc 1 821 0
 1989 04c2 1C4B     		ldr	r3, .L193+8
 1990 04c4 D3F8A032 		ldr	r3, [r3, #672]
 1991 04c8 1C4A     		ldr	r2, .L193+16
 1992 04ca 1360     		str	r3, [r2]
 822:..\src/interruptions.c ****                 forced_open = 0;
 1993              		.loc 1 822 0
 1994 04cc 1F4B     		ldr	r3, .L193+32
 1995 04ce 0022     		movs	r2, #0
 1996 04d0 1A70     		strb	r2, [r3]
 1997              	.L122:
 823:..\src/interruptions.c ****             }
 824:..\src/interruptions.c ****         }
 825:..\src/interruptions.c ****     }
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 1998              		.loc 1 827 0
 1999 04d2 7B6C     		ldr	r3, [r7, #68]
 2000 04d4 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2001 04d8 032B     		cmp	r3, #3
 2002 04da 00F2F781 		bhi	.L125
 2003 04de 01A2     		adr	r2, .L127
 2004 04e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2005              		.p2align 2
 2006              	.L127:
 2007 04e4 BB060000 		.word	.L126+1
 2008 04e8 91080000 		.word	.L128+1
 2009 04ec 65070000 		.word	.L129+1
 2010 04f0 F5040000 		.word	.L130+1
 2011              		.p2align 1
 2012              	.L130:
 828:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 829:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 830:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 2013              		.loc 1 830 0
 2014 04f4 114B     		ldr	r3, .L193+16
 2015 04f6 1A68     		ldr	r2, [r3]
 2016 04f8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2017 04fc 1449     		ldr	r1, .L193+36
 2018 04fe 3420     		movs	r0, #52
 2019 0500 00FB03F3 		mul	r3, r0, r3
 2020 0504 0B44     		add	r3, r3, r1
 2021 0506 1B68     		ldr	r3, [r3]
 2022 0508 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 52


 2023 050a 7B60     		str	r3, [r7, #4]
 831:..\src/interruptions.c **** 
 832:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2024              		.loc 1 832 0
 2025 050c 114B     		ldr	r3, .L193+40
 2026 050e 1A68     		ldr	r2, [r3]
 2027 0510 7B68     		ldr	r3, [r7, #4]
 2028 0512 1344     		add	r3, r3, r2
 2029 0514 0F4A     		ldr	r2, .L193+40
 2030 0516 1360     		str	r3, [r2]
 833:..\src/interruptions.c **** 
 834:..\src/interruptions.c ****             // error_sum saturation
 835:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2031              		.loc 1 835 0
 2032 0518 0E4B     		ldr	r3, .L193+40
 2033 051a 1B68     		ldr	r3, [r3]
 2034 051c 0E4A     		ldr	r2, .L193+44
 2035 051e 9342     		cmp	r3, r2
 2036 0520 1CDD     		ble	.L131
 836:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2037              		.loc 1 836 0
 2038 0522 0C4B     		ldr	r3, .L193+40
 2039 0524 0C4A     		ldr	r2, .L193+44
 2040 0526 1A60     		str	r2, [r3]
 2041 0528 20E0     		b	.L132
 2042              	.L194:
 2043 052a 00BF     		.align	2
 2044              	.L193:
 2045 052c 8C000000 		.word	current_emg.10445
 2046 0530 00000000 		.word	g_refOld
 2047 0534 00000000 		.word	g_mem
 2048 0538 00000000 		.word	c_mem
 2049 053c 00000000 		.word	g_ref
 2050 0540 00000000 		.word	battery_low_SoC
 2051 0544 00000000 		.word	rest_enabled
 2052 0548 00000000 		.word	rest_pos_curr_ref
 2053 054c 00000000 		.word	forced_open
 2054 0550 00000000 		.word	g_meas
 2055 0554 90000000 		.word	pos_error_sum.10438
 2056 0558 80F0FA02 		.word	50000000
 2057              	.L131:
 837:..\src/interruptions.c ****             else {
 838:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2058              		.loc 1 838 0
 2059 055c 8E4B     		ldr	r3, .L195
 2060 055e 1B68     		ldr	r3, [r3]
 2061 0560 8E4A     		ldr	r2, .L195+4
 2062 0562 9342     		cmp	r3, r2
 2063 0564 02DA     		bge	.L132
 839:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2064              		.loc 1 839 0
 2065 0566 8C4B     		ldr	r3, .L195
 2066 0568 8C4A     		ldr	r2, .L195+4
 2067 056a 1A60     		str	r2, [r3]
 2068              	.L132:
 840:..\src/interruptions.c ****             }
 841:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 53


 842:..\src/interruptions.c ****             // ------ position PID control ------
 843:..\src/interruptions.c **** 
 844:..\src/interruptions.c ****             i_ref = 0;
 2069              		.loc 1 844 0
 2070 056c 0023     		movs	r3, #0
 2071 056e 3B65     		str	r3, [r7, #80]
 845:..\src/interruptions.c ****             
 846:..\src/interruptions.c ****             // Proportional
 847:..\src/interruptions.c ****             if (k_p_dl != 0)
 2072              		.loc 1 847 0
 2073 0570 7B6A     		ldr	r3, [r7, #36]
 2074 0572 002B     		cmp	r3, #0
 2075 0574 07D0     		beq	.L133
 848:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2076              		.loc 1 848 0
 2077 0576 7B6A     		ldr	r3, [r7, #36]
 2078 0578 7A68     		ldr	r2, [r7, #4]
 2079 057a 02FB03F3 		mul	r3, r2, r3
 2080 057e 1B14     		asrs	r3, r3, #16
 2081 0580 3A6D     		ldr	r2, [r7, #80]
 2082 0582 1344     		add	r3, r3, r2
 2083 0584 3B65     		str	r3, [r7, #80]
 2084              	.L133:
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c ****             // Integral
 851:..\src/interruptions.c ****             if (k_i_dl != 0)
 2085              		.loc 1 851 0
 2086 0586 3B6A     		ldr	r3, [r7, #32]
 2087 0588 002B     		cmp	r3, #0
 2088 058a 08D0     		beq	.L134
 852:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2089              		.loc 1 852 0
 2090 058c 824B     		ldr	r3, .L195
 2091 058e 1B68     		ldr	r3, [r3]
 2092 0590 3A6A     		ldr	r2, [r7, #32]
 2093 0592 02FB03F3 		mul	r3, r2, r3
 2094 0596 1B14     		asrs	r3, r3, #16
 2095 0598 3A6D     		ldr	r2, [r7, #80]
 2096 059a 1344     		add	r3, r3, r2
 2097 059c 3B65     		str	r3, [r7, #80]
 2098              	.L134:
 853:..\src/interruptions.c **** 
 854:..\src/interruptions.c ****             // Derivative
 855:..\src/interruptions.c ****             if (k_d_dl != 0)
 2099              		.loc 1 855 0
 2100 059e FB69     		ldr	r3, [r7, #28]
 2101 05a0 002B     		cmp	r3, #0
 2102 05a2 0AD0     		beq	.L135
 856:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2103              		.loc 1 856 0
 2104 05a4 7E4B     		ldr	r3, .L195+8
 2105 05a6 1B68     		ldr	r3, [r3]
 2106 05a8 7A68     		ldr	r2, [r7, #4]
 2107 05aa D31A     		subs	r3, r2, r3
 2108 05ac FA69     		ldr	r2, [r7, #28]
 2109 05ae 02FB03F3 		mul	r3, r2, r3
 2110 05b2 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 54


 2111 05b4 3A6D     		ldr	r2, [r7, #80]
 2112 05b6 1344     		add	r3, r3, r2
 2113 05b8 3B65     		str	r3, [r7, #80]
 2114              	.L135:
 857:..\src/interruptions.c ****                         
 858:..\src/interruptions.c ****             // Update previous position
 859:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2115              		.loc 1 859 0
 2116 05ba 794A     		ldr	r2, .L195+8
 2117 05bc 7B68     		ldr	r3, [r7, #4]
 2118 05be 1360     		str	r3, [r2]
 860:..\src/interruptions.c **** 
 861:..\src/interruptions.c ****             // motor direction depends on i_ref
 862:..\src/interruptions.c ****             if (i_ref >= 0)
 2119              		.loc 1 862 0
 2120 05c0 3B6D     		ldr	r3, [r7, #80]
 2121 05c2 002B     		cmp	r3, #0
 2122 05c4 03DB     		blt	.L136
 863:..\src/interruptions.c ****                 motor_dir = TRUE;
 2123              		.loc 1 863 0
 2124 05c6 774B     		ldr	r3, .L195+12
 2125 05c8 0122     		movs	r2, #1
 2126 05ca 1A70     		strb	r2, [r3]
 2127 05cc 02E0     		b	.L137
 2128              	.L136:
 864:..\src/interruptions.c ****             else
 865:..\src/interruptions.c ****                 motor_dir = FALSE;
 2129              		.loc 1 865 0
 2130 05ce 754B     		ldr	r3, .L195+12
 2131 05d0 0022     		movs	r2, #0
 2132 05d2 1A70     		strb	r2, [r3]
 2133              	.L137:
 866:..\src/interruptions.c **** 
 867:..\src/interruptions.c ****             // saturate max current
 868:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2134              		.loc 1 868 0
 2135 05d4 7B6C     		ldr	r3, [r7, #68]
 2136 05d6 B3F95C30 		ldrsh	r3, [r3, #92]
 2137 05da 1A46     		mov	r2, r3
 2138 05dc 3B6D     		ldr	r3, [r7, #80]
 2139 05de 9A42     		cmp	r2, r3
 2140 05e0 04DA     		bge	.L138
 869:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2141              		.loc 1 869 0
 2142 05e2 7B6C     		ldr	r3, [r7, #68]
 2143 05e4 B3F95C30 		ldrsh	r3, [r3, #92]
 2144 05e8 3B65     		str	r3, [r7, #80]
 2145 05ea 0BE0     		b	.L139
 2146              	.L138:
 870:..\src/interruptions.c ****             else {
 871:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2147              		.loc 1 871 0
 2148 05ec 7B6C     		ldr	r3, [r7, #68]
 2149 05ee B3F95C30 		ldrsh	r3, [r3, #92]
 2150 05f2 5A42     		negs	r2, r3
 2151 05f4 3B6D     		ldr	r3, [r7, #80]
 2152 05f6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 55


 2153 05f8 04DD     		ble	.L139
 872:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2154              		.loc 1 872 0
 2155 05fa 7B6C     		ldr	r3, [r7, #68]
 2156 05fc B3F95C30 		ldrsh	r3, [r3, #92]
 2157 0600 5B42     		negs	r3, r3
 2158 0602 3B65     		str	r3, [r7, #80]
 2159              	.L139:
 873:..\src/interruptions.c ****         	}
 874:..\src/interruptions.c **** 
 875:..\src/interruptions.c ****             // current error and curr error sum
 876:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2160              		.loc 1 876 0
 2161 0604 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2162 0608 674A     		ldr	r2, .L195+16
 2163 060a 3421     		movs	r1, #52
 2164 060c 01FB03F3 		mul	r3, r1, r3
 2165 0610 1344     		add	r3, r3, r2
 2166 0612 0C33     		adds	r3, r3, #12
 2167 0614 1B68     		ldr	r3, [r3]
 2168 0616 3A6D     		ldr	r2, [r7, #80]
 2169 0618 D31A     		subs	r3, r2, r3
 2170 061a 3B60     		str	r3, [r7]
 877:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2171              		.loc 1 877 0
 2172 061c 634B     		ldr	r3, .L195+20
 2173 061e 1A68     		ldr	r2, [r3]
 2174 0620 3B68     		ldr	r3, [r7]
 2175 0622 1344     		add	r3, r3, r2
 2176 0624 614A     		ldr	r2, .L195+20
 2177 0626 1360     		str	r3, [r2]
 878:..\src/interruptions.c ****             
 879:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2178              		.loc 1 879 0
 2179 0628 604B     		ldr	r3, .L195+20
 2180 062a 1B68     		ldr	r3, [r3]
 2181 062c 604A     		ldr	r2, .L195+24
 2182 062e 9342     		cmp	r3, r2
 2183 0630 03DD     		ble	.L140
 880:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2184              		.loc 1 880 0
 2185 0632 5E4B     		ldr	r3, .L195+20
 2186 0634 5E4A     		ldr	r2, .L195+24
 2187 0636 1A60     		str	r2, [r3]
 2188 0638 07E0     		b	.L141
 2189              	.L140:
 881:..\src/interruptions.c ****             else {
 882:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2190              		.loc 1 882 0
 2191 063a 5C4B     		ldr	r3, .L195+20
 2192 063c 1B68     		ldr	r3, [r3]
 2193 063e 5D4A     		ldr	r2, .L195+28
 2194 0640 9342     		cmp	r3, r2
 2195 0642 02DA     		bge	.L141
 883:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2196              		.loc 1 883 0
 2197 0644 594B     		ldr	r3, .L195+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 56


 2198 0646 5B4A     		ldr	r2, .L195+28
 2199 0648 1A60     		str	r2, [r3]
 2200              	.L141:
 884:..\src/interruptions.c ****             }
 885:..\src/interruptions.c **** 
 886:..\src/interruptions.c ****             // ----- current PID control -----
 887:..\src/interruptions.c **** 
 888:..\src/interruptions.c ****             pwm_input = 0;
 2201              		.loc 1 888 0
 2202 064a 0023     		movs	r3, #0
 2203 064c 7B65     		str	r3, [r7, #84]
 889:..\src/interruptions.c **** 
 890:..\src/interruptions.c ****             // Proportional
 891:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2204              		.loc 1 891 0
 2205 064e BB69     		ldr	r3, [r7, #24]
 2206 0650 002B     		cmp	r3, #0
 2207 0652 07D0     		beq	.L142
 892:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2208              		.loc 1 892 0
 2209 0654 BB69     		ldr	r3, [r7, #24]
 2210 0656 3A68     		ldr	r2, [r7]
 2211 0658 02FB03F3 		mul	r3, r2, r3
 2212 065c 1B14     		asrs	r3, r3, #16
 2213 065e 7A6D     		ldr	r2, [r7, #84]
 2214 0660 1344     		add	r3, r3, r2
 2215 0662 7B65     		str	r3, [r7, #84]
 2216              	.L142:
 893:..\src/interruptions.c **** 
 894:..\src/interruptions.c ****             // Integral
 895:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2217              		.loc 1 895 0
 2218 0664 7B69     		ldr	r3, [r7, #20]
 2219 0666 002B     		cmp	r3, #0
 2220 0668 08D0     		beq	.L143
 896:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2221              		.loc 1 896 0
 2222 066a 504B     		ldr	r3, .L195+20
 2223 066c 1B68     		ldr	r3, [r3]
 2224 066e 7A69     		ldr	r2, [r7, #20]
 2225 0670 02FB03F3 		mul	r3, r2, r3
 2226 0674 1B14     		asrs	r3, r3, #16
 2227 0676 7A6D     		ldr	r2, [r7, #84]
 2228 0678 1344     		add	r3, r3, r2
 2229 067a 7B65     		str	r3, [r7, #84]
 2230              	.L143:
 897:..\src/interruptions.c **** 
 898:..\src/interruptions.c ****             // Derivative
 899:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2231              		.loc 1 899 0
 2232 067c 3B69     		ldr	r3, [r7, #16]
 2233 067e 002B     		cmp	r3, #0
 2234 0680 0AD0     		beq	.L144
 900:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2235              		.loc 1 900 0
 2236 0682 4D4B     		ldr	r3, .L195+32
 2237 0684 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 57


 2238 0686 3A68     		ldr	r2, [r7]
 2239 0688 D31A     		subs	r3, r2, r3
 2240 068a 3A69     		ldr	r2, [r7, #16]
 2241 068c 02FB03F3 		mul	r3, r2, r3
 2242 0690 1B14     		asrs	r3, r3, #16
 2243 0692 7A6D     		ldr	r2, [r7, #84]
 2244 0694 1344     		add	r3, r3, r2
 2245 0696 7B65     		str	r3, [r7, #84]
 2246              	.L144:
 901:..\src/interruptions.c **** 
 902:..\src/interruptions.c ****             // pwm_input saturation
 903:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2247              		.loc 1 903 0
 2248 0698 7B6D     		ldr	r3, [r7, #84]
 2249 069a 13F1640F 		cmn	r3, #100
 2250 069e 03DA     		bge	.L145
 904:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2251              		.loc 1 904 0
 2252 06a0 6FF06303 		mvn	r3, #99
 2253 06a4 7B65     		str	r3, [r7, #84]
 2254 06a6 04E0     		b	.L146
 2255              	.L145:
 905:..\src/interruptions.c ****             else {
 906:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2256              		.loc 1 906 0
 2257 06a8 7B6D     		ldr	r3, [r7, #84]
 2258 06aa 642B     		cmp	r3, #100
 2259 06ac 01DD     		ble	.L146
 907:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 2260              		.loc 1 907 0
 2261 06ae 6423     		movs	r3, #100
 2262 06b0 7B65     		str	r3, [r7, #84]
 2263              	.L146:
 908:..\src/interruptions.c ****             }
 909:..\src/interruptions.c **** 
 910:..\src/interruptions.c ****             // Update previous current
 911:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2264              		.loc 1 911 0
 2265 06b2 414A     		ldr	r2, .L195+32
 2266 06b4 3B68     		ldr	r3, [r7]
 2267 06b6 1360     		str	r3, [r2]
 912:..\src/interruptions.c **** 
 913:..\src/interruptions.c ****         break;
 2268              		.loc 1 913 0
 2269 06b8 08E1     		b	.L125
 2270              	.L126:
 914:..\src/interruptions.c **** 
 915:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 916:..\src/interruptions.c ****         case CONTROL_ANGLE:
 917:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 2271              		.loc 1 917 0
 2272 06ba 404B     		ldr	r3, .L195+36
 2273 06bc 1A68     		ldr	r2, [r3]
 2274 06be 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2275 06c2 3949     		ldr	r1, .L195+16
 2276 06c4 3420     		movs	r0, #52
 2277 06c6 00FB03F3 		mul	r3, r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 58


 2278 06ca 0B44     		add	r3, r3, r1
 2279 06cc 1B68     		ldr	r3, [r3]
 2280 06ce D31A     		subs	r3, r2, r3
 2281 06d0 7B60     		str	r3, [r7, #4]
 918:..\src/interruptions.c **** 
 919:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2282              		.loc 1 919 0
 2283 06d2 314B     		ldr	r3, .L195
 2284 06d4 1A68     		ldr	r2, [r3]
 2285 06d6 7B68     		ldr	r3, [r7, #4]
 2286 06d8 1344     		add	r3, r3, r2
 2287 06da 2F4A     		ldr	r2, .L195
 2288 06dc 1360     		str	r3, [r2]
 920:..\src/interruptions.c **** 
 921:..\src/interruptions.c ****             // anti-windup (for integral control)
 922:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2289              		.loc 1 922 0
 2290 06de 2E4B     		ldr	r3, .L195
 2291 06e0 1B68     		ldr	r3, [r3]
 2292 06e2 B3F57A7F 		cmp	r3, #1000
 2293 06e6 04DD     		ble	.L147
 923:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2294              		.loc 1 923 0
 2295 06e8 2B4B     		ldr	r3, .L195
 2296 06ea 4FF47A72 		mov	r2, #1000
 2297 06ee 1A60     		str	r2, [r3]
 2298 06f0 07E0     		b	.L148
 2299              	.L147:
 924:..\src/interruptions.c ****             else {
 925:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 2300              		.loc 1 925 0
 2301 06f2 294B     		ldr	r3, .L195
 2302 06f4 1B68     		ldr	r3, [r3]
 2303 06f6 13F57A7F 		cmn	r3, #1000
 2304 06fa 02DA     		bge	.L148
 926:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 2305              		.loc 1 926 0
 2306 06fc 264B     		ldr	r3, .L195
 2307 06fe 304A     		ldr	r2, .L195+40
 2308 0700 1A60     		str	r2, [r3]
 2309              	.L148:
 927:..\src/interruptions.c ****             }
 928:..\src/interruptions.c **** 
 929:..\src/interruptions.c ****             // Proportional
 930:..\src/interruptions.c ****             if (k_p != 0) 
 2310              		.loc 1 930 0
 2311 0702 FB6B     		ldr	r3, [r7, #60]
 2312 0704 002B     		cmp	r3, #0
 2313 0706 05D0     		beq	.L149
 931:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 2314              		.loc 1 931 0
 2315 0708 FB6B     		ldr	r3, [r7, #60]
 2316 070a 7A68     		ldr	r2, [r7, #4]
 2317 070c 02FB03F3 		mul	r3, r2, r3
 2318 0710 1B14     		asrs	r3, r3, #16
 2319 0712 7B65     		str	r3, [r7, #84]
 2320              	.L149:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 59


 932:..\src/interruptions.c ****             
 933:..\src/interruptions.c **** 
 934:..\src/interruptions.c ****             // Integral
 935:..\src/interruptions.c ****             if (k_i != 0) 
 2321              		.loc 1 935 0
 2322 0714 BB6B     		ldr	r3, [r7, #56]
 2323 0716 002B     		cmp	r3, #0
 2324 0718 08D0     		beq	.L150
 936:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 2325              		.loc 1 936 0
 2326 071a 1F4B     		ldr	r3, .L195
 2327 071c 1B68     		ldr	r3, [r3]
 2328 071e BA6B     		ldr	r2, [r7, #56]
 2329 0720 02FB03F3 		mul	r3, r2, r3
 2330 0724 1B14     		asrs	r3, r3, #16
 2331 0726 7A6D     		ldr	r2, [r7, #84]
 2332 0728 1344     		add	r3, r3, r2
 2333 072a 7B65     		str	r3, [r7, #84]
 2334              	.L150:
 937:..\src/interruptions.c ****             
 938:..\src/interruptions.c **** 
 939:..\src/interruptions.c ****             // Derivative
 940:..\src/interruptions.c ****             if (k_d != 0) 
 2335              		.loc 1 940 0
 2336 072c 7B6B     		ldr	r3, [r7, #52]
 2337 072e 002B     		cmp	r3, #0
 2338 0730 0AD0     		beq	.L151
 941:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2339              		.loc 1 941 0
 2340 0732 1B4B     		ldr	r3, .L195+8
 2341 0734 1B68     		ldr	r3, [r3]
 2342 0736 7A68     		ldr	r2, [r7, #4]
 2343 0738 D31A     		subs	r3, r2, r3
 2344 073a 7A6B     		ldr	r2, [r7, #52]
 2345 073c 02FB03F3 		mul	r3, r2, r3
 2346 0740 1B14     		asrs	r3, r3, #16
 2347 0742 7A6D     		ldr	r2, [r7, #84]
 2348 0744 1344     		add	r3, r3, r2
 2349 0746 7B65     		str	r3, [r7, #84]
 2350              	.L151:
 942:..\src/interruptions.c ****             
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c ****             // Update measure
 945:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2351              		.loc 1 945 0
 2352 0748 154A     		ldr	r2, .L195+8
 2353 074a 7B68     		ldr	r3, [r7, #4]
 2354 074c 1360     		str	r3, [r2]
 946:..\src/interruptions.c **** 
 947:..\src/interruptions.c ****             if (pwm_input > 0)
 2355              		.loc 1 947 0
 2356 074e 7B6D     		ldr	r3, [r7, #84]
 2357 0750 002B     		cmp	r3, #0
 2358 0752 03DD     		ble	.L152
 948:..\src/interruptions.c ****                 motor_dir = TRUE;
 2359              		.loc 1 948 0
 2360 0754 134B     		ldr	r3, .L195+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 60


 2361 0756 0122     		movs	r2, #1
 2362 0758 1A70     		strb	r2, [r3]
 949:..\src/interruptions.c ****             else
 950:..\src/interruptions.c ****                 motor_dir = FALSE;
 951:..\src/interruptions.c **** 
 952:..\src/interruptions.c ****         break;
 2363              		.loc 1 952 0
 2364 075a B7E0     		b	.L125
 2365              	.L152:
 950:..\src/interruptions.c **** 
 2366              		.loc 1 950 0
 2367 075c 114B     		ldr	r3, .L195+12
 2368 075e 0022     		movs	r2, #0
 2369 0760 1A70     		strb	r2, [r3]
 2370              		.loc 1 952 0
 2371 0762 B3E0     		b	.L125
 2372              	.L129:
 953:..\src/interruptions.c **** 
 954:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 955:..\src/interruptions.c ****         case CONTROL_CURRENT:
 956:..\src/interruptions.c ****             if(g_ref[0].onoff && tension_valid) {
 2373              		.loc 1 956 0
 2374 0764 154B     		ldr	r3, .L195+36
 2375 0766 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2376 0768 002B     		cmp	r3, #0
 2377 076a 00F0AC80 		beq	.L189
 2378              		.loc 1 956 0 is_stmt 0 discriminator 1
 2379 076e 154B     		ldr	r3, .L195+44
 2380 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2381 0772 002B     		cmp	r3, #0
 2382 0774 00F0A780 		beq	.L189
 957:..\src/interruptions.c ****                 
 958:..\src/interruptions.c ****                 i_ref = g_ref[0].curr;
 2383              		.loc 1 958 0 is_stmt 1
 2384 0778 104B     		ldr	r3, .L195+36
 2385 077a 5B68     		ldr	r3, [r3, #4]
 2386 077c 3B65     		str	r3, [r7, #80]
 959:..\src/interruptions.c **** 
 960:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 2387              		.loc 1 960 0
 2388 077e 7B6C     		ldr	r3, [r7, #68]
 2389 0780 B3F95C30 		ldrsh	r3, [r3, #92]
 2390 0784 1A46     		mov	r2, r3
 2391 0786 3B6D     		ldr	r3, [r7, #80]
 2392 0788 9A42     		cmp	r2, r3
 2393 078a 1DDA     		bge	.L155
 961:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 2394              		.loc 1 961 0
 2395 078c 7B6C     		ldr	r3, [r7, #68]
 2396 078e B3F95C30 		ldrsh	r3, [r3, #92]
 2397 0792 3B65     		str	r3, [r7, #80]
 2398 0794 24E0     		b	.L156
 2399              	.L196:
 2400 0796 00BF     		.align	2
 2401              	.L195:
 2402 0798 90000000 		.word	pos_error_sum.10438
 2403 079c 800F05FD 		.word	-50000000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 61


 2404 07a0 94000000 		.word	prev_pos_err.10440
 2405 07a4 98000000 		.word	motor_dir.10443
 2406 07a8 00000000 		.word	g_meas
 2407 07ac 9C000000 		.word	curr_error_sum.10439
 2408 07b0 A0860100 		.word	100000
 2409 07b4 6079FEFF 		.word	-100000
 2410 07b8 A0000000 		.word	prev_curr_err.10441
 2411 07bc 00000000 		.word	g_ref
 2412 07c0 18FCFFFF 		.word	-1000
 2413 07c4 00000000 		.word	tension_valid
 2414              	.L155:
 962:..\src/interruptions.c ****                 else {
 963:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 2415              		.loc 1 963 0
 2416 07c8 7B6C     		ldr	r3, [r7, #68]
 2417 07ca B3F95C30 		ldrsh	r3, [r3, #92]
 2418 07ce 5A42     		negs	r2, r3
 2419 07d0 3B6D     		ldr	r3, [r7, #80]
 2420 07d2 9A42     		cmp	r2, r3
 2421 07d4 04DD     		ble	.L156
 964:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 2422              		.loc 1 964 0
 2423 07d6 7B6C     		ldr	r3, [r7, #68]
 2424 07d8 B3F95C30 		ldrsh	r3, [r3, #92]
 2425 07dc 5B42     		negs	r3, r3
 2426 07de 3B65     		str	r3, [r7, #80]
 2427              	.L156:
 965:..\src/interruptions.c ****                 }
 966:..\src/interruptions.c ****                 
 967:..\src/interruptions.c ****                 // current error
 968:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 2428              		.loc 1 968 0
 2429 07e0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2430 07e4 A74A     		ldr	r2, .L197
 2431 07e6 3421     		movs	r1, #52
 2432 07e8 01FB03F3 		mul	r3, r1, r3
 2433 07ec 1344     		add	r3, r3, r2
 2434 07ee 0C33     		adds	r3, r3, #12
 2435 07f0 1B68     		ldr	r3, [r3]
 2436 07f2 3A6D     		ldr	r2, [r7, #80]
 2437 07f4 D31A     		subs	r3, r2, r3
 2438 07f6 3B60     		str	r3, [r7]
 969:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2439              		.loc 1 969 0
 2440 07f8 A34B     		ldr	r3, .L197+4
 2441 07fa 1A68     		ldr	r2, [r3]
 2442 07fc 3B68     		ldr	r3, [r7]
 2443 07fe 1344     		add	r3, r3, r2
 2444 0800 A14A     		ldr	r2, .L197+4
 2445 0802 1360     		str	r3, [r2]
 970:..\src/interruptions.c ****                 
 971:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2446              		.loc 1 971 0
 2447 0804 A04B     		ldr	r3, .L197+4
 2448 0806 1B68     		ldr	r3, [r3]
 2449 0808 A04A     		ldr	r2, .L197+8
 2450 080a 9342     		cmp	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 62


 2451 080c 03DD     		ble	.L157
 972:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2452              		.loc 1 972 0
 2453 080e 9E4B     		ldr	r3, .L197+4
 2454 0810 9E4A     		ldr	r2, .L197+8
 2455 0812 1A60     		str	r2, [r3]
 2456 0814 07E0     		b	.L158
 2457              	.L157:
 973:..\src/interruptions.c ****                 else {
 974:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2458              		.loc 1 974 0
 2459 0816 9C4B     		ldr	r3, .L197+4
 2460 0818 1B68     		ldr	r3, [r3]
 2461 081a 9D4A     		ldr	r2, .L197+12
 2462 081c 9342     		cmp	r3, r2
 2463 081e 02DA     		bge	.L158
 975:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2464              		.loc 1 975 0
 2465 0820 994B     		ldr	r3, .L197+4
 2466 0822 9B4A     		ldr	r2, .L197+12
 2467 0824 1A60     		str	r2, [r3]
 2468              	.L158:
 976:..\src/interruptions.c ****                 }
 977:..\src/interruptions.c **** 
 978:..\src/interruptions.c ****                 pwm_input = 0;
 2469              		.loc 1 978 0
 2470 0826 0023     		movs	r3, #0
 2471 0828 7B65     		str	r3, [r7, #84]
 979:..\src/interruptions.c **** 
 980:..\src/interruptions.c ****                 // Proportional
 981:..\src/interruptions.c ****                 if (k_p_c != 0)
 2472              		.loc 1 981 0
 2473 082a 3B6B     		ldr	r3, [r7, #48]
 2474 082c 002B     		cmp	r3, #0
 2475 082e 07D0     		beq	.L159
 982:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2476              		.loc 1 982 0
 2477 0830 3B6B     		ldr	r3, [r7, #48]
 2478 0832 3A68     		ldr	r2, [r7]
 2479 0834 02FB03F3 		mul	r3, r2, r3
 2480 0838 1B14     		asrs	r3, r3, #16
 2481 083a 7A6D     		ldr	r2, [r7, #84]
 2482 083c 1344     		add	r3, r3, r2
 2483 083e 7B65     		str	r3, [r7, #84]
 2484              	.L159:
 983:..\src/interruptions.c **** 
 984:..\src/interruptions.c ****                 // Integral
 985:..\src/interruptions.c ****                 if (k_i_c != 0)
 2485              		.loc 1 985 0
 2486 0840 FB6A     		ldr	r3, [r7, #44]
 2487 0842 002B     		cmp	r3, #0
 2488 0844 08D0     		beq	.L160
 986:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2489              		.loc 1 986 0
 2490 0846 904B     		ldr	r3, .L197+4
 2491 0848 1B68     		ldr	r3, [r3]
 2492 084a FA6A     		ldr	r2, [r7, #44]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 63


 2493 084c 02FB03F3 		mul	r3, r2, r3
 2494 0850 1B14     		asrs	r3, r3, #16
 2495 0852 7A6D     		ldr	r2, [r7, #84]
 2496 0854 1344     		add	r3, r3, r2
 2497 0856 7B65     		str	r3, [r7, #84]
 2498              	.L160:
 987:..\src/interruptions.c **** 
 988:..\src/interruptions.c ****                 // Derivative
 989:..\src/interruptions.c ****                 if (k_d_c != 0)
 2499              		.loc 1 989 0
 2500 0858 BB6A     		ldr	r3, [r7, #40]
 2501 085a 002B     		cmp	r3, #0
 2502 085c 0AD0     		beq	.L161
 990:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2503              		.loc 1 990 0
 2504 085e 8D4B     		ldr	r3, .L197+16
 2505 0860 1B68     		ldr	r3, [r3]
 2506 0862 3A68     		ldr	r2, [r7]
 2507 0864 D31A     		subs	r3, r2, r3
 2508 0866 BA6A     		ldr	r2, [r7, #40]
 2509 0868 02FB03F3 		mul	r3, r2, r3
 2510 086c 1B14     		asrs	r3, r3, #16
 2511 086e 7A6D     		ldr	r2, [r7, #84]
 2512 0870 1344     		add	r3, r3, r2
 2513 0872 7B65     		str	r3, [r7, #84]
 2514              	.L161:
 991:..\src/interruptions.c ****                 
 992:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2515              		.loc 1 992 0
 2516 0874 874A     		ldr	r2, .L197+16
 2517 0876 3B68     		ldr	r3, [r7]
 2518 0878 1360     		str	r3, [r2]
 993:..\src/interruptions.c ****                 
 994:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2519              		.loc 1 994 0
 2520 087a 7B6D     		ldr	r3, [r7, #84]
 2521 087c 002B     		cmp	r3, #0
 2522 087e 03DB     		blt	.L162
 995:..\src/interruptions.c ****                     motor_dir = TRUE;
 2523              		.loc 1 995 0
 2524 0880 854B     		ldr	r3, .L197+20
 2525 0882 0122     		movs	r2, #1
 2526 0884 1A70     		strb	r2, [r3]
 996:..\src/interruptions.c ****                 else
 997:..\src/interruptions.c ****                     motor_dir = FALSE;
 998:..\src/interruptions.c ****             }
 999:..\src/interruptions.c ****         break;
 2527              		.loc 1 999 0
 2528 0886 1EE0     		b	.L189
 2529              	.L162:
 997:..\src/interruptions.c ****             }
 2530              		.loc 1 997 0
 2531 0888 834B     		ldr	r3, .L197+20
 2532 088a 0022     		movs	r2, #0
 2533 088c 1A70     		strb	r2, [r3]
 2534              		.loc 1 999 0
 2535 088e 1AE0     		b	.L189
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 64


 2536              	.L128:
1000:..\src/interruptions.c ****         
1001:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1002:..\src/interruptions.c ****         case CONTROL_PWM:
1003:..\src/interruptions.c **** 
1004:..\src/interruptions.c ****             pwm_input = g_ref[0].pwm;
 2537              		.loc 1 1004 0
 2538 0890 824B     		ldr	r3, .L197+24
 2539 0892 9B68     		ldr	r3, [r3, #8]
 2540 0894 7B65     		str	r3, [r7, #84]
1005:..\src/interruptions.c **** 
1006:..\src/interruptions.c ****             if (pwm_input > 0) 
 2541              		.loc 1 1006 0
 2542 0896 7B6D     		ldr	r3, [r7, #84]
 2543 0898 002B     		cmp	r3, #0
 2544 089a 03DD     		ble	.L163
1007:..\src/interruptions.c ****                 motor_dir = TRUE;
 2545              		.loc 1 1007 0
 2546 089c 7E4B     		ldr	r3, .L197+20
 2547 089e 0122     		movs	r2, #1
 2548 08a0 1A70     		strb	r2, [r3]
 2549 08a2 02E0     		b	.L164
 2550              	.L163:
1008:..\src/interruptions.c ****             else 
1009:..\src/interruptions.c ****                 motor_dir = FALSE;
 2551              		.loc 1 1009 0
 2552 08a4 7C4B     		ldr	r3, .L197+20
 2553 08a6 0022     		movs	r2, #0
 2554 08a8 1A70     		strb	r2, [r3]
 2555              	.L164:
1010:..\src/interruptions.c ****             
1011:..\src/interruptions.c **** 
1012:..\src/interruptions.c ****             // pwm_input saturation
1013:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2556              		.loc 1 1013 0
 2557 08aa 7B6D     		ldr	r3, [r7, #84]
 2558 08ac 13F1640F 		cmn	r3, #100
 2559 08b0 03DA     		bge	.L165
1014:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2560              		.loc 1 1014 0
 2561 08b2 6FF06303 		mvn	r3, #99
 2562 08b6 7B65     		str	r3, [r7, #84]
1015:..\src/interruptions.c ****             else {
1016:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1017:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1018:..\src/interruptions.c ****         	}
1019:..\src/interruptions.c **** 
1020:..\src/interruptions.c ****         break;
 2563              		.loc 1 1020 0
 2564 08b8 07E0     		b	.L190
 2565              	.L165:
1016:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2566              		.loc 1 1016 0
 2567 08ba 7B6D     		ldr	r3, [r7, #84]
 2568 08bc 642B     		cmp	r3, #100
 2569 08be 04DD     		ble	.L190
1017:..\src/interruptions.c ****         	}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 65


 2570              		.loc 1 1017 0
 2571 08c0 6423     		movs	r3, #100
 2572 08c2 7B65     		str	r3, [r7, #84]
 2573              		.loc 1 1020 0
 2574 08c4 01E0     		b	.L190
 2575              	.L189:
 999:..\src/interruptions.c ****         
 2576              		.loc 1 999 0
 2577 08c6 00BF     		nop
 2578 08c8 00E0     		b	.L125
 2579              	.L190:
 2580              		.loc 1 1020 0
 2581 08ca 00BF     		nop
 2582              	.L125:
1021:..\src/interruptions.c ****             
1022:..\src/interruptions.c ****     }
1023:..\src/interruptions.c **** 
1024:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2583              		.loc 1 1026 0
 2584 08cc 7B6D     		ldr	r3, [r7, #84]
 2585 08ce 642B     		cmp	r3, #100
 2586 08d0 01DD     		ble	.L167
1027:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2587              		.loc 1 1027 0
 2588 08d2 6423     		movs	r3, #100
 2589 08d4 7B65     		str	r3, [r7, #84]
 2590              	.L167:
1028:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2591              		.loc 1 1028 0
 2592 08d6 7B6D     		ldr	r3, [r7, #84]
 2593 08d8 13F1640F 		cmn	r3, #100
 2594 08dc 02DA     		bge	.L168
1029:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2595              		.loc 1 1029 0
 2596 08de 6FF06303 		mvn	r3, #99
 2597 08e2 7B65     		str	r3, [r7, #84]
 2598              	.L168:
1030:..\src/interruptions.c **** 
1031:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 2599              		.loc 1 1031 0
 2600 08e4 7B6C     		ldr	r3, [r7, #68]
 2601 08e6 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2602 08ea 012B     		cmp	r3, #1
 2603 08ec 0DD0     		beq	.L169
1032:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 2604              		.loc 1 1032 0
 2605 08ee 7B6D     		ldr	r3, [r7, #84]
 2606 08f0 9B02     		lsls	r3, r3, #10
 2607 08f2 6B4A     		ldr	r2, .L197+28
 2608 08f4 82FB0312 		smull	r1, r2, r2, r3
 2609 08f8 5211     		asrs	r2, r2, #5
 2610 08fa DB17     		asrs	r3, r3, #31
 2611 08fc D31A     		subs	r3, r2, r3
 2612 08fe 694A     		ldr	r2, .L197+32
 2613 0900 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 66


 2614 0902 02FB03F3 		mul	r3, r2, r3
 2615 0906 9B12     		asrs	r3, r3, #10
 2616 0908 7B65     		str	r3, [r7, #84]
 2617              	.L169:
1033:..\src/interruptions.c ****  
1034:..\src/interruptions.c ****     //// RATE LIMITER ////
1035:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 2618              		.loc 1 1035 0
 2619 090a 674B     		ldr	r3, .L197+36
 2620 090c 1B68     		ldr	r3, [r3]
 2621 090e 7A6D     		ldr	r2, [r7, #84]
 2622 0910 D31A     		subs	r3, r2, r3
 2623 0912 7A6C     		ldr	r2, [r7, #68]
 2624 0914 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2625 0918 9342     		cmp	r3, r2
 2626 091a 08DD     		ble	.L170
1036:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 2627              		.loc 1 1036 0
 2628 091c 7B6C     		ldr	r3, [r7, #68]
 2629 091e 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2630 0922 1A46     		mov	r2, r3
 2631 0924 604B     		ldr	r3, .L197+36
 2632 0926 1B68     		ldr	r3, [r3]
 2633 0928 1344     		add	r3, r3, r2
 2634 092a 7B65     		str	r3, [r7, #84]
 2635 092c 10E0     		b	.L171
 2636              	.L170:
1037:..\src/interruptions.c ****     }
1038:..\src/interruptions.c ****     else {
1039:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 2637              		.loc 1 1039 0
 2638 092e 5E4B     		ldr	r3, .L197+36
 2639 0930 1B68     		ldr	r3, [r3]
 2640 0932 7A6D     		ldr	r2, [r7, #84]
 2641 0934 D21A     		subs	r2, r2, r3
 2642 0936 7B6C     		ldr	r3, [r7, #68]
 2643 0938 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2644 093c 5B42     		negs	r3, r3
 2645 093e 9A42     		cmp	r2, r3
 2646 0940 06DA     		bge	.L171
1040:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 2647              		.loc 1 1040 0
 2648 0942 594B     		ldr	r3, .L197+36
 2649 0944 1B68     		ldr	r3, [r3]
 2650 0946 7A6C     		ldr	r2, [r7, #68]
 2651 0948 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2652 094c 9B1A     		subs	r3, r3, r2
 2653 094e 7B65     		str	r3, [r7, #84]
 2654              	.L171:
1041:..\src/interruptions.c ****     }
1042:..\src/interruptions.c ****     
1043:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2655              		.loc 1 1043 0
 2656 0950 7B6D     		ldr	r3, [r7, #84]
 2657 0952 642B     		cmp	r3, #100
 2658 0954 01DD     		ble	.L172
1044:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 67


 2659              		.loc 1 1044 0
 2660 0956 6423     		movs	r3, #100
 2661 0958 7B65     		str	r3, [r7, #84]
 2662              	.L172:
1045:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2663              		.loc 1 1045 0
 2664 095a 7B6D     		ldr	r3, [r7, #84]
 2665 095c 13F1640F 		cmn	r3, #100
 2666 0960 02DA     		bge	.L173
1046:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2667              		.loc 1 1046 0
 2668 0962 6FF06303 		mvn	r3, #99
 2669 0966 7B65     		str	r3, [r7, #84]
 2670              	.L173:
1047:..\src/interruptions.c ****     
1048:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2671              		.loc 1 1048 0
 2672 0968 4F4A     		ldr	r2, .L197+36
 2673 096a 7B6D     		ldr	r3, [r7, #84]
 2674 096c 1360     		str	r3, [r2]
1049:..\src/interruptions.c **** 	
1050:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2675              		.loc 1 1050 0
 2676 096e 7B6D     		ldr	r3, [r7, #84]
 2677 0970 002B     		cmp	r3, #0
 2678 0972 01DB     		blt	.L174
 2679              		.loc 1 1050 0 is_stmt 0 discriminator 1
 2680 0974 0122     		movs	r2, #1
 2681 0976 01E0     		b	.L175
 2682              	.L174:
 2683              		.loc 1 1050 0 discriminator 2
 2684 0978 4FF0FF32 		mov	r2, #-1
 2685              	.L175:
 2686              		.loc 1 1050 0 discriminator 4
 2687 097c 4B4B     		ldr	r3, .L197+40
 2688 097e 1A70     		strb	r2, [r3]
1051:..\src/interruptions.c ****     
1052:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 2689              		.loc 1 1052 0 is_stmt 1 discriminator 4
 2690 0980 7B6C     		ldr	r3, [r7, #68]
 2691 0982 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 2692 0986 012B     		cmp	r3, #1
 2693 0988 40F09F80 		bne	.L176
1053:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1054:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 2694              		.loc 1 1054 0
 2695 098c 7B6C     		ldr	r3, [r7, #68]
 2696 098e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2697 0992 012B     		cmp	r3, #1
 2698 0994 00F09680 		beq	.L177
 2699              		.loc 1 1054 0 is_stmt 0 discriminator 1
 2700 0998 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2701 099c 444A     		ldr	r2, .L197+44
 2702 099e 3421     		movs	r1, #52
 2703 09a0 01FB03F3 		mul	r3, r1, r3
 2704 09a4 1344     		add	r3, r3, r2
 2705 09a6 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 68


 2706 09a8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2707 09ac 3549     		ldr	r1, .L197
 2708 09ae 3420     		movs	r0, #52
 2709 09b0 00FB03F3 		mul	r3, r0, r3
 2710 09b4 0B44     		add	r3, r3, r1
 2711 09b6 1B68     		ldr	r3, [r3]
 2712 09b8 D31A     		subs	r3, r2, r3
 2713 09ba 312B     		cmp	r3, #49
 2714 09bc 00F38280 		bgt	.L177
1055:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2715              		.loc 1 1055 0 is_stmt 1 discriminator 2
 2716 09c0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2717 09c4 3A4A     		ldr	r2, .L197+44
 2718 09c6 3421     		movs	r1, #52
 2719 09c8 01FB03F3 		mul	r3, r1, r3
 2720 09cc 1344     		add	r3, r3, r2
 2721 09ce 1A68     		ldr	r2, [r3]
 2722 09d0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2723 09d4 2B49     		ldr	r1, .L197
 2724 09d6 3420     		movs	r0, #52
 2725 09d8 00FB03F3 		mul	r3, r0, r3
 2726 09dc 0B44     		add	r3, r3, r1
 2727 09de 1B68     		ldr	r3, [r3]
 2728 09e0 D31A     		subs	r3, r2, r3
1054:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2729              		.loc 1 1054 0 discriminator 2
 2730 09e2 13F1310F 		cmn	r3, #49
 2731 09e6 6DDB     		blt	.L177
1056:..\src/interruptions.c ****             ((g_refOld[0].pos - g_ref[0].pos) < 100 && (g_refOld[0].pos - g_ref[0].pos) > -100) ) {
 2732              		.loc 1 1056 0
 2733 09e8 324B     		ldr	r3, .L197+48
 2734 09ea 1A68     		ldr	r2, [r3]
 2735 09ec 2B4B     		ldr	r3, .L197+24
 2736 09ee 1B68     		ldr	r3, [r3]
 2737 09f0 D31A     		subs	r3, r2, r3
1055:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2738              		.loc 1 1055 0
 2739 09f2 632B     		cmp	r3, #99
 2740 09f4 66DC     		bgt	.L177
 2741              		.loc 1 1056 0
 2742 09f6 2F4B     		ldr	r3, .L197+48
 2743 09f8 1A68     		ldr	r2, [r3]
 2744 09fa 284B     		ldr	r3, .L197+24
 2745 09fc 1B68     		ldr	r3, [r3]
 2746 09fe D31A     		subs	r3, r2, r3
 2747 0a00 13F1630F 		cmn	r3, #99
 2748 0a04 5EDB     		blt	.L177
1057:..\src/interruptions.c ****             position_counter++;
 2749              		.loc 1 1057 0
 2750 0a06 2C4B     		ldr	r3, .L197+52
 2751 0a08 1B68     		ldr	r3, [r3]
 2752 0a0a 0133     		adds	r3, r3, #1
 2753 0a0c 2A4A     		ldr	r2, .L197+52
 2754 0a0e 1360     		str	r3, [r2]
1058:..\src/interruptions.c ****             
1059:..\src/interruptions.c ****             if (position_counter >= 250) { 
 2755              		.loc 1 1059 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 69


 2756 0a10 294B     		ldr	r3, .L197+52
 2757 0a12 1B68     		ldr	r3, [r3]
 2758 0a14 F92B     		cmp	r3, #249
 2759 0a16 58D9     		bls	.L176
1060:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2760              		.loc 1 1060 0
 2761 0a18 7B6C     		ldr	r3, [r7, #68]
 2762 0a1a 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2763 0a1e 002B     		cmp	r3, #0
 2764 0a20 0DD1     		bne	.L179
 2765              		.loc 1 1060 0 is_stmt 0 discriminator 1
 2766 0a22 264B     		ldr	r3, .L197+56
 2767 0a24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2768 0a26 002B     		cmp	r3, #0
 2769 0a28 09D1     		bne	.L179
1061:..\src/interruptions.c ****                     g_refNew[0].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when USB input 
 2770              		.loc 1 1061 0 is_stmt 1
 2771 0a2a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2772 0a2e 154A     		ldr	r2, .L197
 2773 0a30 3421     		movs	r1, #52
 2774 0a32 01FB03F3 		mul	r3, r1, r3
 2775 0a36 1344     		add	r3, r3, r2
 2776 0a38 1B68     		ldr	r3, [r3]
 2777 0a3a 214A     		ldr	r2, .L197+60
 2778 0a3c 1360     		str	r3, [r2]
 2779              	.L179:
1062:..\src/interruptions.c ****                 }
1063:..\src/interruptions.c ****                 g_ref[0].pos = g_meas[SH_ENC_L].pos[0];
 2780              		.loc 1 1063 0
 2781 0a3e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2782 0a42 104A     		ldr	r2, .L197
 2783 0a44 3421     		movs	r1, #52
 2784 0a46 01FB03F3 		mul	r3, r1, r3
 2785 0a4a 1344     		add	r3, r3, r2
 2786 0a4c 1B68     		ldr	r3, [r3]
 2787 0a4e 134A     		ldr	r2, .L197+24
 2788 0a50 1360     		str	r3, [r2]
1064:..\src/interruptions.c ****                 
1065:..\src/interruptions.c ****                 if (position_counter == 250){
 2789              		.loc 1 1065 0
 2790 0a52 194B     		ldr	r3, .L197+52
 2791 0a54 1B68     		ldr	r3, [r3]
 2792 0a56 FA2B     		cmp	r3, #250
 2793 0a58 11D1     		bne	.L180
1066:..\src/interruptions.c ****                     // To do only once
1067:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 2794              		.loc 1 1067 0
 2795 0a5a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2796 0a5e 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2797 0a62 0849     		ldr	r1, .L197
 2798 0a64 3420     		movs	r0, #52
 2799 0a66 00FB02F2 		mul	r2, r0, r2
 2800 0a6a 0A44     		add	r2, r2, r1
 2801 0a6c 0C32     		adds	r2, r2, #12
 2802 0a6e 1268     		ldr	r2, [r2]
 2803 0a70 0449     		ldr	r1, .L197
 2804 0a72 3420     		movs	r0, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 70


 2805 0a74 00FB03F3 		mul	r3, r0, r3
 2806 0a78 0B44     		add	r3, r3, r1
 2807 0a7a 1433     		adds	r3, r3, #20
 2808 0a7c 1A60     		str	r2, [r3]
 2809              	.L180:
1068:..\src/interruptions.c ****                 }
1069:..\src/interruptions.c ****                 pwm_input = 0;            
 2810              		.loc 1 1069 0
 2811 0a7e 0023     		movs	r3, #0
 2812 0a80 7B65     		str	r3, [r7, #84]
1059:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2813              		.loc 1 1059 0
 2814 0a82 22E0     		b	.L176
 2815              	.L198:
 2816              		.align	2
 2817              	.L197:
 2818 0a84 00000000 		.word	g_meas
 2819 0a88 9C000000 		.word	curr_error_sum.10439
 2820 0a8c A0860100 		.word	100000
 2821 0a90 6079FEFF 		.word	-100000
 2822 0a94 A0000000 		.word	prev_curr_err.10441
 2823 0a98 98000000 		.word	motor_dir.10443
 2824 0a9c 00000000 		.word	g_ref
 2825 0aa0 1F85EB51 		.word	1374389535
 2826 0aa4 00000000 		.word	dev_pwm_limit
 2827 0aa8 A4000000 		.word	prev_pwm.10442
 2828 0aac 00000000 		.word	pwm_sign
 2829 0ab0 00000000 		.word	g_measOld
 2830 0ab4 00000000 		.word	g_refOld
 2831 0ab8 A8000000 		.word	position_counter.10444
 2832 0abc 00000000 		.word	change_ext_ref_flag
 2833 0ac0 00000000 		.word	g_refNew
 2834              	.L177:
1070:..\src/interruptions.c ****             }
1071:..\src/interruptions.c ****         }
1072:..\src/interruptions.c ****         else {
1073:..\src/interruptions.c ****             position_counter = 0;
 2835              		.loc 1 1073 0
 2836 0ac4 0C4B     		ldr	r3, .L199
 2837 0ac6 0022     		movs	r2, #0
 2838 0ac8 1A60     		str	r2, [r3]
 2839              	.L176:
1074:..\src/interruptions.c ****         }
1075:..\src/interruptions.c ****     }
1076:..\src/interruptions.c ****     
1077:..\src/interruptions.c ****     if (motor_dir)
 2840              		.loc 1 1077 0
 2841 0aca 0C4B     		ldr	r3, .L199+4
 2842 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2843 0ace 002B     		cmp	r3, #0
 2844 0ad0 03D0     		beq	.L181
1078:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 2845              		.loc 1 1078 0
 2846 0ad2 0120     		movs	r0, #1
 2847 0ad4 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2848 0ad8 02E0     		b	.L182
 2849              	.L181:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 71


1079:..\src/interruptions.c ****     else
1080:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 2850              		.loc 1 1080 0
 2851 0ada 0020     		movs	r0, #0
 2852 0adc FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2853              	.L182:
1081:..\src/interruptions.c **** 
1082:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 2854              		.loc 1 1082 0
 2855 0ae0 7B6D     		ldr	r3, [r7, #84]
 2856 0ae2 002B     		cmp	r3, #0
 2857 0ae4 B8BF     		it	lt
 2858 0ae6 5B42     		rsblt	r3, r3, #0
 2859 0ae8 DBB2     		uxtb	r3, r3
 2860 0aea 1846     		mov	r0, r3
 2861 0aec FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1083:..\src/interruptions.c **** }
 2862              		.loc 1 1083 0
 2863 0af0 00BF     		nop
 2864 0af2 5837     		adds	r7, r7, #88
 2865              		.cfi_def_cfa_offset 8
 2866 0af4 BD46     		mov	sp, r7
 2867              		.cfi_def_cfa_register 13
 2868              		@ sp needed
 2869 0af6 80BD     		pop	{r7, pc}
 2870              	.L200:
 2871              		.align	2
 2872              	.L199:
 2873 0af8 A8000000 		.word	position_counter.10444
 2874 0afc 98000000 		.word	motor_dir.10443
 2875              		.cfi_endproc
 2876              	.LFE68:
 2877              		.size	motor_control_SH, .-motor_control_SH
 2878              		.section	.text.motor_control_generic,"ax",%progbits
 2879              		.align	2
 2880              		.global	motor_control_generic
 2881              		.thumb
 2882              		.thumb_func
 2883              		.type	motor_control_generic, %function
 2884              	motor_control_generic:
 2885              	.LFB69:
1084:..\src/interruptions.c **** 
1085:..\src/interruptions.c **** //==============================================================================
1086:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1087:..\src/interruptions.c **** //==============================================================================
1088:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 2886              		.loc 1 1088 0
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 96
 2889              		@ frame_needed = 1, uses_anonymous_args = 0
 2890 0000 90B5     		push	{r4, r7, lr}
 2891              		.cfi_def_cfa_offset 12
 2892              		.cfi_offset 4, -12
 2893              		.cfi_offset 7, -8
 2894              		.cfi_offset 14, -4
 2895 0002 99B0     		sub	sp, sp, #100
 2896              		.cfi_def_cfa_offset 112
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 72


 2897 0004 00AF     		add	r7, sp, #0
 2898              		.cfi_def_cfa_register 7
 2899 0006 0346     		mov	r3, r0
 2900 0008 FB71     		strb	r3, [r7, #7]
1089:..\src/interruptions.c ****     
1090:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2901              		.loc 1 1090 0
 2902 000a 0023     		movs	r3, #0
 2903 000c FB65     		str	r3, [r7, #92]
1091:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1092:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1093:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1094:..\src/interruptions.c ****     int32 CYDATA handle_value;
1095:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
1096:..\src/interruptions.c **** 
1097:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 2904              		.loc 1 1097 0
 2905 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2906 0010 1346     		mov	r3, r2
 2907 0012 DB00     		lsls	r3, r3, #3
 2908 0014 9B1A     		subs	r3, r3, r2
 2909 0016 1B01     		lsls	r3, r3, #4
 2910 0018 B033     		adds	r3, r3, #176
 2911 001a A94A     		ldr	r2, .L319
 2912 001c 1344     		add	r3, r3, r2
 2913 001e 3B65     		str	r3, [r7, #80]
1098:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 2914              		.loc 1 1098 0
 2915 0020 3B6D     		ldr	r3, [r7, #80]
 2916 0022 93F86030 		ldrb	r3, [r3, #96]
 2917 0026 87F84F30 		strb	r3, [r7, #79]
1099:..\src/interruptions.c ****     
1100:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 2918              		.loc 1 1100 0
 2919 002a 3B6D     		ldr	r3, [r7, #80]
 2920 002c 1B68     		ldr	r3, [r3]
 2921 002e BB64     		str	r3, [r7, #72]
1101:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 2922              		.loc 1 1101 0
 2923 0030 3B6D     		ldr	r3, [r7, #80]
 2924 0032 5B68     		ldr	r3, [r3, #4]
 2925 0034 7B64     		str	r3, [r7, #68]
1102:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 2926              		.loc 1 1102 0
 2927 0036 3B6D     		ldr	r3, [r7, #80]
 2928 0038 9B68     		ldr	r3, [r3, #8]
 2929 003a 3B64     		str	r3, [r7, #64]
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 2930              		.loc 1 1104 0
 2931 003c 3B6D     		ldr	r3, [r7, #80]
 2932 003e DB68     		ldr	r3, [r3, #12]
 2933 0040 FB63     		str	r3, [r7, #60]
1105:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 2934              		.loc 1 1105 0
 2935 0042 3B6D     		ldr	r3, [r7, #80]
 2936 0044 1B69     		ldr	r3, [r3, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 73


 2937 0046 BB63     		str	r3, [r7, #56]
1106:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 2938              		.loc 1 1106 0
 2939 0048 3B6D     		ldr	r3, [r7, #80]
 2940 004a 5B69     		ldr	r3, [r3, #20]
 2941 004c 7B63     		str	r3, [r7, #52]
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 2942              		.loc 1 1108 0
 2943 004e 3B6D     		ldr	r3, [r7, #80]
 2944 0050 9B69     		ldr	r3, [r3, #24]
 2945 0052 3B63     		str	r3, [r7, #48]
1109:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 2946              		.loc 1 1109 0
 2947 0054 3B6D     		ldr	r3, [r7, #80]
 2948 0056 DB69     		ldr	r3, [r3, #28]
 2949 0058 FB62     		str	r3, [r7, #44]
1110:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 2950              		.loc 1 1110 0
 2951 005a 3B6D     		ldr	r3, [r7, #80]
 2952 005c 1B6A     		ldr	r3, [r3, #32]
 2953 005e BB62     		str	r3, [r7, #40]
1111:..\src/interruptions.c ****     
1112:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 2954              		.loc 1 1112 0
 2955 0060 3B6D     		ldr	r3, [r7, #80]
 2956 0062 5B6A     		ldr	r3, [r3, #36]
 2957 0064 7B62     		str	r3, [r7, #36]
1113:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 2958              		.loc 1 1113 0
 2959 0066 3B6D     		ldr	r3, [r7, #80]
 2960 0068 9B6A     		ldr	r3, [r3, #40]
 2961 006a 3B62     		str	r3, [r7, #32]
1114:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 2962              		.loc 1 1114 0
 2963 006c 3B6D     		ldr	r3, [r7, #80]
 2964 006e DB6A     		ldr	r3, [r3, #44]
 2965 0070 FB61     		str	r3, [r7, #28]
1115:..\src/interruptions.c **** 
1116:..\src/interruptions.c ****     // Static Variables
1117:..\src/interruptions.c **** 
1118:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1119:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1120:..\src/interruptions.c ****     
1121:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1122:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1123:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1124:..\src/interruptions.c **** 
1125:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1126:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1127:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
1128:..\src/interruptions.c ****                                                         // 1 EMG 1
1129:..\src/interruptions.c ****                                                         // 2 EMG 2
1130:..\src/interruptions.c ****                                                         // wait for both to get down
1131:..\src/interruptions.c ****     
1132:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 2966              		.loc 1 1132 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 74


 2967 0072 944B     		ldr	r3, .L319+4
 2968 0074 1B68     		ldr	r3, [r3]
 2969 0076 924A     		ldr	r2, .L319
 2970 0078 B2F8F021 		ldrh	r2, [r2, #496]
 2971 007c 9B1A     		subs	r3, r3, r2
 2972 007e BB61     		str	r3, [r7, #24]
1133:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 2973              		.loc 1 1133 0
 2974 0080 904B     		ldr	r3, .L319+4
 2975 0082 5B68     		ldr	r3, [r3, #4]
 2976 0084 8E4A     		ldr	r2, .L319
 2977 0086 B2F8F221 		ldrh	r2, [r2, #498]
 2978 008a 9B1A     		subs	r3, r3, r2
 2979 008c 7B61     		str	r3, [r7, #20]
1134:..\src/interruptions.c **** 
1135:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
1136:..\src/interruptions.c ****     switch(MOT->input_mode) {
 2980              		.loc 1 1136 0
 2981 008e 3B6D     		ldr	r3, [r7, #80]
 2982 0090 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2983 0094 013B     		subs	r3, r3, #1
 2984 0096 042B     		cmp	r3, #4
 2985 0098 00F20482 		bhi	.L310
 2986 009c 01A2     		adr	r2, .L204
 2987 009e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2988 00a2 00BF     		.p2align 2
 2989              	.L204:
 2990 00a4 B9000000 		.word	.L203+1
 2991 00a8 C5010000 		.word	.L205+1
 2992 00ac 0B020000 		.word	.L206+1
 2993 00b0 97020000 		.word	.L207+1
 2994 00b4 9D030000 		.word	.L208+1
 2995              		.p2align 1
 2996              	.L203:
1137:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
1138:..\src/interruptions.c **** 
1139:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
1140:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
1141:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 2997              		.loc 1 1141 0
 2998 00b8 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 2999 00bc 8049     		ldr	r1, .L319
 3000 00be 1346     		mov	r3, r2
 3001 00c0 5B00     		lsls	r3, r3, #1
 3002 00c2 1344     		add	r3, r3, r2
 3003 00c4 1B01     		lsls	r3, r3, #4
 3004 00c6 0B44     		add	r3, r3, r1
 3005 00c8 03F5D873 		add	r3, r3, #432
 3006 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3007 00ce 002B     		cmp	r3, #0
 3008 00d0 1BD0     		beq	.L209
1142:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 3009              		.loc 1 1142 0
 3010 00d2 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3011 00d6 7C4A     		ldr	r2, .L319+8
 3012 00d8 3421     		movs	r1, #52
 3013 00da 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 75


 3014 00de 1344     		add	r3, r3, r2
 3015 00e0 0833     		adds	r3, r3, #8
 3016 00e2 1968     		ldr	r1, [r3]
 3017 00e4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 3018 00e8 7548     		ldr	r0, .L319
 3019 00ea 1346     		mov	r3, r2
 3020 00ec 5B00     		lsls	r3, r3, #1
 3021 00ee 1344     		add	r3, r3, r2
 3022 00f0 1B01     		lsls	r3, r3, #4
 3023 00f2 0344     		add	r3, r3, r0
 3024 00f4 03F5DA73 		add	r3, r3, #436
 3025 00f8 93F90030 		ldrsb	r3, [r3]
 3026 00fc 03FB01F2 		mul	r2, r3, r1
 3027 0100 3B6D     		ldr	r3, [r7, #80]
 3028 0102 5B6B     		ldr	r3, [r3, #52]
 3029 0104 1344     		add	r3, r3, r2
 3030 0106 7B65     		str	r3, [r7, #84]
 3031 0108 1AE0     		b	.L210
 3032              	.L209:
1143:..\src/interruptions.c ****             else
1144:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 3033              		.loc 1 1144 0
 3034 010a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3035 010e 6E4A     		ldr	r2, .L319+8
 3036 0110 3421     		movs	r1, #52
 3037 0112 01FB03F3 		mul	r3, r1, r3
 3038 0116 1344     		add	r3, r3, r2
 3039 0118 0433     		adds	r3, r3, #4
 3040 011a 1968     		ldr	r1, [r3]
 3041 011c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 3042 0120 6748     		ldr	r0, .L319
 3043 0122 1346     		mov	r3, r2
 3044 0124 5B00     		lsls	r3, r3, #1
 3045 0126 1344     		add	r3, r3, r2
 3046 0128 1B01     		lsls	r3, r3, #4
 3047 012a 0344     		add	r3, r3, r0
 3048 012c 03F5DA73 		add	r3, r3, #436
 3049 0130 93F90030 		ldrsb	r3, [r3]
 3050 0134 03FB01F2 		mul	r2, r3, r1
 3051 0138 3B6D     		ldr	r3, [r7, #80]
 3052 013a 5B6B     		ldr	r3, [r3, #52]
 3053 013c 1344     		add	r3, r3, r2
 3054 013e 7B65     		str	r3, [r7, #84]
 3055              	.L210:
1145:..\src/interruptions.c ****             
1146:..\src/interruptions.c **** 
1147:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
1148:..\src/interruptions.c ****             if (((handle_value - g_refOld[idx].pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0
 3056              		.loc 1 1148 0
 3057 0140 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3058 0142 624A     		ldr	r2, .L319+12
 3059 0144 1B01     		lsls	r3, r3, #4
 3060 0146 1344     		add	r3, r3, r2
 3061 0148 1B68     		ldr	r3, [r3]
 3062 014a 7A6D     		ldr	r2, [r7, #84]
 3063 014c D21A     		subs	r2, r2, r3
 3064 014e 3B6D     		ldr	r3, [r7, #80]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 76


 3065 0150 1B6C     		ldr	r3, [r3, #64]
 3066 0152 9A42     		cmp	r2, r3
 3067 0154 11DD     		ble	.L211
 3068              		.loc 1 1148 0 is_stmt 0 discriminator 1
 3069 0156 3B6D     		ldr	r3, [r7, #80]
 3070 0158 1B6C     		ldr	r3, [r3, #64]
 3071 015a 002B     		cmp	r3, #0
 3072 015c 0DD0     		beq	.L211
1149:..\src/interruptions.c ****                 g_ref[idx].pos += MOT->max_step_pos;
 3073              		.loc 1 1149 0 is_stmt 1
 3074 015e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3075 0160 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3076 0162 5B49     		ldr	r1, .L319+16
 3077 0164 1201     		lsls	r2, r2, #4
 3078 0166 0A44     		add	r2, r2, r1
 3079 0168 1168     		ldr	r1, [r2]
 3080 016a 3A6D     		ldr	r2, [r7, #80]
 3081 016c 126C     		ldr	r2, [r2, #64]
 3082 016e 0A44     		add	r2, r2, r1
 3083 0170 5749     		ldr	r1, .L319+16
 3084 0172 1B01     		lsls	r3, r3, #4
 3085 0174 0B44     		add	r3, r3, r1
 3086 0176 1A60     		str	r2, [r3]
 3087 0178 23E0     		b	.L212
 3088              	.L211:
1150:..\src/interruptions.c ****             else {
1151:..\src/interruptions.c ****                 if (((handle_value - g_refOld[idx].pos) < MOT->max_step_neg) && (MOT->max_step_neg 
 3089              		.loc 1 1151 0
 3090 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3091 017c 534A     		ldr	r2, .L319+12
 3092 017e 1B01     		lsls	r3, r3, #4
 3093 0180 1344     		add	r3, r3, r2
 3094 0182 1B68     		ldr	r3, [r3]
 3095 0184 7A6D     		ldr	r2, [r7, #84]
 3096 0186 D21A     		subs	r2, r2, r3
 3097 0188 3B6D     		ldr	r3, [r7, #80]
 3098 018a DB6B     		ldr	r3, [r3, #60]
 3099 018c 9A42     		cmp	r2, r3
 3100 018e 11DA     		bge	.L213
 3101              		.loc 1 1151 0 is_stmt 0 discriminator 1
 3102 0190 3B6D     		ldr	r3, [r7, #80]
 3103 0192 DB6B     		ldr	r3, [r3, #60]
 3104 0194 002B     		cmp	r3, #0
 3105 0196 0DD0     		beq	.L213
1152:..\src/interruptions.c ****                     g_ref[idx].pos += MOT->max_step_neg;
 3106              		.loc 1 1152 0 is_stmt 1
 3107 0198 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3108 019a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3109 019c 4C49     		ldr	r1, .L319+16
 3110 019e 1201     		lsls	r2, r2, #4
 3111 01a0 0A44     		add	r2, r2, r1
 3112 01a2 1168     		ldr	r1, [r2]
 3113 01a4 3A6D     		ldr	r2, [r7, #80]
 3114 01a6 D26B     		ldr	r2, [r2, #60]
 3115 01a8 0A44     		add	r2, r2, r1
 3116 01aa 4949     		ldr	r1, .L319+16
 3117 01ac 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 77


 3118 01ae 0B44     		add	r3, r3, r1
 3119 01b0 1A60     		str	r2, [r3]
 3120 01b2 06E0     		b	.L212
 3121              	.L213:
1153:..\src/interruptions.c ****                 else
1154:..\src/interruptions.c ****                     g_ref[idx].pos = handle_value;
 3122              		.loc 1 1154 0
 3123 01b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3124 01b6 464A     		ldr	r2, .L319+16
 3125 01b8 1B01     		lsls	r3, r3, #4
 3126 01ba 1344     		add	r3, r3, r2
 3127 01bc 7A6D     		ldr	r2, [r7, #84]
 3128 01be 1A60     		str	r2, [r3]
1155:..\src/interruptions.c ****             }
1156:..\src/interruptions.c ****             break;
 3129              		.loc 1 1156 0
 3130 01c0 73E1     		b	.L214
 3131              	.L212:
 3132 01c2 72E1     		b	.L214
 3133              	.L205:
1157:..\src/interruptions.c ****             
1158:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
1159:..\src/interruptions.c ****             if (err_emg_1 > 0)
 3134              		.loc 1 1159 0
 3135 01c4 BB69     		ldr	r3, [r7, #24]
 3136 01c6 002B     		cmp	r3, #0
 3137 01c8 18DD     		ble	.L215
1160:..\src/interruptions.c ****                 g_ref[idx].pos = (err_emg_1 * g_mem.motor[idx].pos_lim_sup) / (1024 - c_mem.emg.emg
 3138              		.loc 1 1160 0
 3139 01ca F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 3140 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3141 01ce 4148     		ldr	r0, .L319+20
 3142 01d0 1346     		mov	r3, r2
 3143 01d2 DB00     		lsls	r3, r3, #3
 3144 01d4 9B1A     		subs	r3, r3, r2
 3145 01d6 1B01     		lsls	r3, r3, #4
 3146 01d8 0344     		add	r3, r3, r0
 3147 01da E833     		adds	r3, r3, #232
 3148 01dc 1B68     		ldr	r3, [r3]
 3149 01de BA69     		ldr	r2, [r7, #24]
 3150 01e0 02FB03F2 		mul	r2, r2, r3
 3151 01e4 364B     		ldr	r3, .L319
 3152 01e6 B3F8F031 		ldrh	r3, [r3, #496]
 3153 01ea C3F58063 		rsb	r3, r3, #1024
 3154 01ee 92FBF3F2 		sdiv	r2, r2, r3
 3155 01f2 3748     		ldr	r0, .L319+16
 3156 01f4 0B01     		lsls	r3, r1, #4
 3157 01f6 0344     		add	r3, r3, r0
 3158 01f8 1A60     		str	r2, [r3]
1161:..\src/interruptions.c ****             else
1162:..\src/interruptions.c ****                 g_ref[idx].pos = 0;
1163:..\src/interruptions.c ****             break;
 3159              		.loc 1 1163 0
 3160 01fa 56E1     		b	.L214
 3161              	.L215:
1162:..\src/interruptions.c ****             break;
 3162              		.loc 1 1162 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 78


 3163 01fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3164 01fe 344A     		ldr	r2, .L319+16
 3165 0200 1B01     		lsls	r3, r3, #4
 3166 0202 1344     		add	r3, r3, r2
 3167 0204 0022     		movs	r2, #0
 3168 0206 1A60     		str	r2, [r3]
 3169              		.loc 1 1163 0
 3170 0208 4FE1     		b	.L214
 3171              	.L206:
1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
1166:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3172              		.loc 1 1166 0
 3173 020a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3174 020c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3175 020e 2F49     		ldr	r1, .L319+12
 3176 0210 1201     		lsls	r2, r2, #4
 3177 0212 0A44     		add	r2, r2, r1
 3178 0214 1268     		ldr	r2, [r2]
 3179 0216 2E49     		ldr	r1, .L319+16
 3180 0218 1B01     		lsls	r3, r3, #4
 3181 021a 0B44     		add	r3, r3, r1
 3182 021c 1A60     		str	r2, [r3]
1167:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 3183              		.loc 1 1167 0
 3184 021e BB69     		ldr	r3, [r7, #24]
 3185 0220 002B     		cmp	r3, #0
 3186 0222 19DD     		ble	.L217
1168:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (
 3187              		.loc 1 1168 0
 3188 0224 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3189 0226 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3190 0228 2849     		ldr	r1, .L319+12
 3191 022a 1201     		lsls	r2, r2, #4
 3192 022c 0A44     		add	r2, r2, r1
 3193 022e 1168     		ldr	r1, [r2]
 3194 0230 284A     		ldr	r2, .L319+20
 3195 0232 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3196 0236 1046     		mov	r0, r2
 3197 0238 BA69     		ldr	r2, [r7, #24]
 3198 023a 02FB00F2 		mul	r2, r2, r0
 3199 023e 5000     		lsls	r0, r2, #1
 3200 0240 1F4A     		ldr	r2, .L319
 3201 0242 B2F8F021 		ldrh	r2, [r2, #496]
 3202 0246 C2F58062 		rsb	r2, r2, #1024
 3203 024a 90FBF2F2 		sdiv	r2, r0, r2
 3204 024e 0A44     		add	r2, r2, r1
 3205 0250 1F49     		ldr	r1, .L319+16
 3206 0252 1B01     		lsls	r3, r3, #4
 3207 0254 0B44     		add	r3, r3, r1
 3208 0256 1A60     		str	r2, [r3]
 3209              	.L217:
1169:..\src/interruptions.c ****             }
1170:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 3210              		.loc 1 1170 0
 3211 0258 7B69     		ldr	r3, [r7, #20]
 3212 025a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 79


 3213 025c 40F32481 		ble	.L311
1171:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (
 3214              		.loc 1 1171 0
 3215 0260 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3216 0262 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3217 0264 1949     		ldr	r1, .L319+12
 3218 0266 1201     		lsls	r2, r2, #4
 3219 0268 0A44     		add	r2, r2, r1
 3220 026a 1168     		ldr	r1, [r2]
 3221 026c 194A     		ldr	r2, .L319+20
 3222 026e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3223 0272 1046     		mov	r0, r2
 3224 0274 7A69     		ldr	r2, [r7, #20]
 3225 0276 02FB00F2 		mul	r2, r2, r0
 3226 027a 5000     		lsls	r0, r2, #1
 3227 027c 104A     		ldr	r2, .L319
 3228 027e B2F8F221 		ldrh	r2, [r2, #498]
 3229 0282 C2F58062 		rsb	r2, r2, #1024
 3230 0286 90FBF2F2 		sdiv	r2, r0, r2
 3231 028a 8A1A     		subs	r2, r1, r2
 3232 028c 1049     		ldr	r1, .L319+16
 3233 028e 1B01     		lsls	r3, r3, #4
 3234 0290 0B44     		add	r3, r3, r1
 3235 0292 1A60     		str	r2, [r3]
1172:..\src/interruptions.c ****             }
1173:..\src/interruptions.c ****             break;
 3236              		.loc 1 1173 0
 3237 0294 08E1     		b	.L311
 3238              	.L207:
1174:..\src/interruptions.c **** 
1175:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
1176:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3239              		.loc 1 1176 0
 3240 0296 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3241 0298 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3242 029a 0C49     		ldr	r1, .L319+12
 3243 029c 1201     		lsls	r2, r2, #4
 3244 029e 0A44     		add	r2, r2, r1
 3245 02a0 1268     		ldr	r2, [r2]
 3246 02a2 0B49     		ldr	r1, .L319+16
 3247 02a4 1B01     		lsls	r3, r3, #4
 3248 02a6 0B44     		add	r3, r3, r1
 3249 02a8 1A60     		str	r2, [r3]
1177:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3250              		.loc 1 1177 0
 3251 02aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3252 02ac 0A4A     		ldr	r2, .L319+24
 3253 02ae D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3254 02b0 012B     		cmp	r3, #1
 3255 02b2 2BD0     		beq	.L220
 3256 02b4 022B     		cmp	r3, #2
 3257 02b6 4CD0     		beq	.L221
 3258 02b8 002B     		cmp	r3, #0
 3259 02ba 0FD0     		beq	.L222
1178:..\src/interruptions.c ****                 case 0:
1179:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
1180:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 80


1181:..\src/interruptions.c ****                         current_emg[idx] = 1;
1182:..\src/interruptions.c ****                         break;
1183:..\src/interruptions.c ****                     }
1184:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1185:..\src/interruptions.c ****                         current_emg[idx] = 2;
1186:..\src/interruptions.c ****                         break;
1187:..\src/interruptions.c ****                     }
1188:..\src/interruptions.c ****                     break;
1189:..\src/interruptions.c **** 
1190:..\src/interruptions.c ****                 case 1:
1191:..\src/interruptions.c ****                     // EMG 1 is first
1192:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
1193:..\src/interruptions.c ****                         current_emg[idx] = 0;
1194:..\src/interruptions.c ****                         break;
1195:..\src/interruptions.c ****                     }
1196:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
1197:..\src/interruptions.c ****                     break;
1198:..\src/interruptions.c **** 
1199:..\src/interruptions.c ****                 case 2:
1200:..\src/interruptions.c ****                     // EMG 2 is first
1201:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
1202:..\src/interruptions.c ****                         current_emg[idx] = 0;
1203:..\src/interruptions.c ****                         break;
1204:..\src/interruptions.c ****                     }
1205:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (
1206:..\src/interruptions.c ****                     break;
1207:..\src/interruptions.c **** 
1208:..\src/interruptions.c ****                 default:
1209:..\src/interruptions.c ****                     break;
 3260              		.loc 1 1209 0
 3261 02bc 6DE0     		b	.L224
 3262              	.L320:
 3263 02be 00BF     		.align	2
 3264              	.L319:
 3265 02c0 00000000 		.word	c_mem
 3266 02c4 00000000 		.word	g_emg_meas
 3267 02c8 00000000 		.word	g_meas
 3268 02cc 00000000 		.word	g_refOld
 3269 02d0 00000000 		.word	g_ref
 3270 02d4 00000000 		.word	g_mem
 3271 02d8 AC000000 		.word	current_emg.10500
 3272              	.L222:
1180:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3273              		.loc 1 1180 0
 3274 02dc BB69     		ldr	r3, [r7, #24]
 3275 02de 002B     		cmp	r3, #0
 3276 02e0 08DD     		ble	.L223
1180:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3277              		.loc 1 1180 0 is_stmt 0 discriminator 1
 3278 02e2 BA69     		ldr	r2, [r7, #24]
 3279 02e4 7B69     		ldr	r3, [r7, #20]
 3280 02e6 9A42     		cmp	r2, r3
 3281 02e8 04DD     		ble	.L223
1181:..\src/interruptions.c ****                         break;
 3282              		.loc 1 1181 0 is_stmt 1
 3283 02ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3284 02ec A14A     		ldr	r2, .L321
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 81


 3285 02ee 0121     		movs	r1, #1
 3286 02f0 D154     		strb	r1, [r2, r3]
1182:..\src/interruptions.c ****                     }
 3287              		.loc 1 1182 0
 3288 02f2 52E0     		b	.L224
 3289              	.L223:
1184:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3290              		.loc 1 1184 0
 3291 02f4 7B69     		ldr	r3, [r7, #20]
 3292 02f6 002B     		cmp	r3, #0
 3293 02f8 4EDD     		ble	.L312
1184:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3294              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3295 02fa 7A69     		ldr	r2, [r7, #20]
 3296 02fc BB69     		ldr	r3, [r7, #24]
 3297 02fe 9A42     		cmp	r2, r3
 3298 0300 4ADD     		ble	.L312
1185:..\src/interruptions.c ****                         break;
 3299              		.loc 1 1185 0 is_stmt 1
 3300 0302 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3301 0304 9B4A     		ldr	r2, .L321
 3302 0306 0221     		movs	r1, #2
 3303 0308 D154     		strb	r1, [r2, r3]
1186:..\src/interruptions.c ****                     }
 3304              		.loc 1 1186 0
 3305 030a 46E0     		b	.L224
 3306              	.L220:
1192:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3307              		.loc 1 1192 0
 3308 030c BB69     		ldr	r3, [r7, #24]
 3309 030e 002B     		cmp	r3, #0
 3310 0310 04DA     		bge	.L226
1193:..\src/interruptions.c ****                         break;
 3311              		.loc 1 1193 0
 3312 0312 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3313 0314 974A     		ldr	r2, .L321
 3314 0316 0021     		movs	r1, #0
 3315 0318 D154     		strb	r1, [r2, r3]
1194:..\src/interruptions.c ****                     }
 3316              		.loc 1 1194 0
 3317 031a 3EE0     		b	.L224
 3318              	.L226:
1196:..\src/interruptions.c ****                     break;
 3319              		.loc 1 1196 0
 3320 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3321 031e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3322 0320 9549     		ldr	r1, .L321+4
 3323 0322 1201     		lsls	r2, r2, #4
 3324 0324 0A44     		add	r2, r2, r1
 3325 0326 1168     		ldr	r1, [r2]
 3326 0328 944A     		ldr	r2, .L321+8
 3327 032a 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3328 032e 1046     		mov	r0, r2
 3329 0330 BA69     		ldr	r2, [r7, #24]
 3330 0332 02FB00F2 		mul	r2, r2, r0
 3331 0336 9000     		lsls	r0, r2, #2
 3332 0338 914A     		ldr	r2, .L321+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 82


 3333 033a B2F8F021 		ldrh	r2, [r2, #496]
 3334 033e C2F58062 		rsb	r2, r2, #1024
 3335 0342 90FBF2F2 		sdiv	r2, r0, r2
 3336 0346 0A44     		add	r2, r2, r1
 3337 0348 8E49     		ldr	r1, .L321+16
 3338 034a 1B01     		lsls	r3, r3, #4
 3339 034c 0B44     		add	r3, r3, r1
 3340 034e 1A60     		str	r2, [r3]
1197:..\src/interruptions.c **** 
 3341              		.loc 1 1197 0
 3342 0350 23E0     		b	.L224
 3343              	.L221:
1201:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3344              		.loc 1 1201 0
 3345 0352 7B69     		ldr	r3, [r7, #20]
 3346 0354 002B     		cmp	r3, #0
 3347 0356 04DA     		bge	.L227
1202:..\src/interruptions.c ****                         break;
 3348              		.loc 1 1202 0
 3349 0358 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3350 035a 864A     		ldr	r2, .L321
 3351 035c 0021     		movs	r1, #0
 3352 035e D154     		strb	r1, [r2, r3]
1203:..\src/interruptions.c ****                     }
 3353              		.loc 1 1203 0
 3354 0360 1BE0     		b	.L224
 3355              	.L227:
1205:..\src/interruptions.c ****                     break;
 3356              		.loc 1 1205 0
 3357 0362 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3358 0364 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3359 0366 8449     		ldr	r1, .L321+4
 3360 0368 1201     		lsls	r2, r2, #4
 3361 036a 0A44     		add	r2, r2, r1
 3362 036c 1168     		ldr	r1, [r2]
 3363 036e 834A     		ldr	r2, .L321+8
 3364 0370 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3365 0374 1046     		mov	r0, r2
 3366 0376 7A69     		ldr	r2, [r7, #20]
 3367 0378 02FB00F2 		mul	r2, r2, r0
 3368 037c 9000     		lsls	r0, r2, #2
 3369 037e 804A     		ldr	r2, .L321+12
 3370 0380 B2F8F221 		ldrh	r2, [r2, #498]
 3371 0384 C2F58062 		rsb	r2, r2, #1024
 3372 0388 90FBF2F2 		sdiv	r2, r0, r2
 3373 038c 8A1A     		subs	r2, r1, r2
 3374 038e 7D49     		ldr	r1, .L321+16
 3375 0390 1B01     		lsls	r3, r3, #4
 3376 0392 0B44     		add	r3, r3, r1
 3377 0394 1A60     		str	r2, [r3]
1206:..\src/interruptions.c **** 
 3378              		.loc 1 1206 0
 3379 0396 00E0     		b	.L224
 3380              	.L312:
1188:..\src/interruptions.c **** 
 3381              		.loc 1 1188 0
 3382 0398 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 83


 3383              	.L224:
1210:..\src/interruptions.c ****             }
1211:..\src/interruptions.c ****             break;
 3384              		.loc 1 1211 0 discriminator 1
 3385 039a 86E0     		b	.L214
 3386              	.L208:
1212:..\src/interruptions.c **** 
1213:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
1214:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3387              		.loc 1 1214 0
 3388 039c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3389 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3390 03a0 7549     		ldr	r1, .L321+4
 3391 03a2 1201     		lsls	r2, r2, #4
 3392 03a4 0A44     		add	r2, r2, r1
 3393 03a6 1268     		ldr	r2, [r2]
 3394 03a8 7649     		ldr	r1, .L321+16
 3395 03aa 1B01     		lsls	r3, r3, #4
 3396 03ac 0B44     		add	r3, r3, r1
 3397 03ae 1A60     		str	r2, [r3]
1215:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3398              		.loc 1 1215 0
 3399 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3400 03b2 704A     		ldr	r2, .L321
 3401 03b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3402 03b6 012B     		cmp	r3, #1
 3403 03b8 1CD0     		beq	.L229
 3404 03ba 022B     		cmp	r3, #2
 3405 03bc 43D0     		beq	.L230
 3406 03be 002B     		cmp	r3, #0
 3407 03c0 00D0     		beq	.L231
1216:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
1217:..\src/interruptions.c ****                 case 0:
1218:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1219:..\src/interruptions.c ****                         current_emg[idx] = 1;
1220:..\src/interruptions.c ****                         break;
1221:..\src/interruptions.c ****                     }
1222:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1223:..\src/interruptions.c ****                         current_emg[idx] = 2;
1224:..\src/interruptions.c ****                         break;
1225:..\src/interruptions.c ****                     }
1226:..\src/interruptions.c ****                     break;
1227:..\src/interruptions.c **** 
1228:..\src/interruptions.c ****                 // EMG 1 is first
1229:..\src/interruptions.c ****                 case 1:
1230:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1231:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1232:..\src/interruptions.c ****                         current_emg[idx] = 0;
1233:..\src/interruptions.c ****                         break;
1234:..\src/interruptions.c ****                     }
1235:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1236:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
1237:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
1238:..\src/interruptions.c ****                     
1239:..\src/interruptions.c ****                     break;
1240:..\src/interruptions.c **** 
1241:..\src/interruptions.c ****                 // EMG 2 is first
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 84


1242:..\src/interruptions.c ****                 case 2:
1243:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1244:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1245:..\src/interruptions.c ****                         current_emg[idx] = 0;
1246:..\src/interruptions.c ****                         break;
1247:..\src/interruptions.c ****                     }
1248:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1249:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
1250:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
1251:..\src/interruptions.c ****                     }
1252:..\src/interruptions.c ****                     break;
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****                 default:
1255:..\src/interruptions.c ****                     break;
 3408              		.loc 1 1255 0
 3409 03c2 6EE0     		b	.L233
 3410              	.L231:
1218:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3411              		.loc 1 1218 0
 3412 03c4 BB69     		ldr	r3, [r7, #24]
 3413 03c6 002B     		cmp	r3, #0
 3414 03c8 08DD     		ble	.L232
1218:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3415              		.loc 1 1218 0 is_stmt 0 discriminator 1
 3416 03ca BA69     		ldr	r2, [r7, #24]
 3417 03cc 7B69     		ldr	r3, [r7, #20]
 3418 03ce 9A42     		cmp	r2, r3
 3419 03d0 04DD     		ble	.L232
1219:..\src/interruptions.c ****                         break;
 3420              		.loc 1 1219 0 is_stmt 1
 3421 03d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3422 03d4 674A     		ldr	r2, .L321
 3423 03d6 0121     		movs	r1, #1
 3424 03d8 D154     		strb	r1, [r2, r3]
1220:..\src/interruptions.c ****                     }
 3425              		.loc 1 1220 0
 3426 03da 62E0     		b	.L233
 3427              	.L232:
1222:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3428              		.loc 1 1222 0
 3429 03dc 7B69     		ldr	r3, [r7, #20]
 3430 03de 002B     		cmp	r3, #0
 3431 03e0 5ADD     		ble	.L313
1222:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3432              		.loc 1 1222 0 is_stmt 0 discriminator 1
 3433 03e2 7A69     		ldr	r2, [r7, #20]
 3434 03e4 BB69     		ldr	r3, [r7, #24]
 3435 03e6 9A42     		cmp	r2, r3
 3436 03e8 56DD     		ble	.L313
1223:..\src/interruptions.c ****                         break;
 3437              		.loc 1 1223 0 is_stmt 1
 3438 03ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3439 03ec 614A     		ldr	r2, .L321
 3440 03ee 0221     		movs	r1, #2
 3441 03f0 D154     		strb	r1, [r2, r3]
1224:..\src/interruptions.c ****                     }
 3442              		.loc 1 1224 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 85


 3443 03f2 56E0     		b	.L233
 3444              	.L229:
1231:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3445              		.loc 1 1231 0
 3446 03f4 BB69     		ldr	r3, [r7, #24]
 3447 03f6 002B     		cmp	r3, #0
 3448 03f8 07DA     		bge	.L235
1231:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3449              		.loc 1 1231 0 is_stmt 0 discriminator 1
 3450 03fa 7B69     		ldr	r3, [r7, #20]
 3451 03fc 002B     		cmp	r3, #0
 3452 03fe 04DA     		bge	.L235
1232:..\src/interruptions.c ****                         break;
 3453              		.loc 1 1232 0 is_stmt 1
 3454 0400 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3455 0402 5C4A     		ldr	r2, .L321
 3456 0404 0021     		movs	r1, #0
 3457 0406 D154     		strb	r1, [r2, r3]
1233:..\src/interruptions.c ****                     }
 3458              		.loc 1 1233 0
 3459 0408 4BE0     		b	.L233
 3460              	.L235:
1236:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
 3461              		.loc 1 1236 0
 3462 040a BB69     		ldr	r3, [r7, #24]
 3463 040c 002B     		cmp	r3, #0
 3464 040e 45DD     		ble	.L314
1237:..\src/interruptions.c ****                     
 3465              		.loc 1 1237 0
 3466 0410 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3467 0412 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3468 0414 5849     		ldr	r1, .L321+4
 3469 0416 1201     		lsls	r2, r2, #4
 3470 0418 0A44     		add	r2, r2, r1
 3471 041a 1168     		ldr	r1, [r2]
 3472 041c 574A     		ldr	r2, .L321+8
 3473 041e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3474 0422 1046     		mov	r0, r2
 3475 0424 BA69     		ldr	r2, [r7, #24]
 3476 0426 02FB00F2 		mul	r2, r2, r0
 3477 042a 9000     		lsls	r0, r2, #2
 3478 042c 544A     		ldr	r2, .L321+12
 3479 042e B2F8F021 		ldrh	r2, [r2, #496]
 3480 0432 C2F58062 		rsb	r2, r2, #1024
 3481 0436 90FBF2F2 		sdiv	r2, r0, r2
 3482 043a 0A44     		add	r2, r2, r1
 3483 043c 5149     		ldr	r1, .L321+16
 3484 043e 1B01     		lsls	r3, r3, #4
 3485 0440 0B44     		add	r3, r3, r1
 3486 0442 1A60     		str	r2, [r3]
1239:..\src/interruptions.c **** 
 3487              		.loc 1 1239 0
 3488 0444 2AE0     		b	.L314
 3489              	.L230:
1244:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3490              		.loc 1 1244 0
 3491 0446 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 86


 3492 0448 002B     		cmp	r3, #0
 3493 044a 07DA     		bge	.L237
1244:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3494              		.loc 1 1244 0 is_stmt 0 discriminator 1
 3495 044c 7B69     		ldr	r3, [r7, #20]
 3496 044e 002B     		cmp	r3, #0
 3497 0450 04DA     		bge	.L237
1245:..\src/interruptions.c ****                         break;
 3498              		.loc 1 1245 0 is_stmt 1
 3499 0452 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3500 0454 474A     		ldr	r2, .L321
 3501 0456 0021     		movs	r1, #0
 3502 0458 D154     		strb	r1, [r2, r3]
1246:..\src/interruptions.c ****                     }
 3503              		.loc 1 1246 0
 3504 045a 22E0     		b	.L233
 3505              	.L237:
1249:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
 3506              		.loc 1 1249 0
 3507 045c 7B69     		ldr	r3, [r7, #20]
 3508 045e 002B     		cmp	r3, #0
 3509 0460 1EDD     		ble	.L315
1250:..\src/interruptions.c ****                     }
 3510              		.loc 1 1250 0
 3511 0462 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3512 0464 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3513 0466 4449     		ldr	r1, .L321+4
 3514 0468 1201     		lsls	r2, r2, #4
 3515 046a 0A44     		add	r2, r2, r1
 3516 046c 1168     		ldr	r1, [r2]
 3517 046e 444A     		ldr	r2, .L321+12
 3518 0470 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3519 0474 1046     		mov	r0, r2
 3520 0476 7A69     		ldr	r2, [r7, #20]
 3521 0478 02FB00F2 		mul	r2, r2, r0
 3522 047c 9000     		lsls	r0, r2, #2
 3523 047e 404A     		ldr	r2, .L321+12
 3524 0480 B2F8F221 		ldrh	r2, [r2, #498]
 3525 0484 C2F58062 		rsb	r2, r2, #1024
 3526 0488 90FBF2F2 		sdiv	r2, r0, r2
 3527 048c 8A1A     		subs	r2, r1, r2
 3528 048e 3D49     		ldr	r1, .L321+16
 3529 0490 1B01     		lsls	r3, r3, #4
 3530 0492 0B44     		add	r3, r3, r1
 3531 0494 1A60     		str	r2, [r3]
1252:..\src/interruptions.c **** 
 3532              		.loc 1 1252 0
 3533 0496 03E0     		b	.L315
 3534              	.L313:
1226:..\src/interruptions.c **** 
 3535              		.loc 1 1226 0
 3536 0498 00BF     		nop
 3537 049a 06E0     		b	.L214
 3538              	.L314:
1239:..\src/interruptions.c **** 
 3539              		.loc 1 1239 0
 3540 049c 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 87


 3541 049e 04E0     		b	.L214
 3542              	.L315:
1252:..\src/interruptions.c **** 
 3543              		.loc 1 1252 0
 3544 04a0 00BF     		nop
 3545              	.L233:
1256:..\src/interruptions.c ****             }
1257:..\src/interruptions.c ****             break;
 3546              		.loc 1 1257 0 discriminator 3
 3547 04a2 02E0     		b	.L214
 3548              	.L310:
1258:..\src/interruptions.c **** 
1259:..\src/interruptions.c ****         default:
1260:..\src/interruptions.c ****             break;
 3549              		.loc 1 1260 0
 3550 04a4 00BF     		nop
 3551 04a6 00E0     		b	.L214
 3552              	.L311:
1173:..\src/interruptions.c **** 
 3553              		.loc 1 1173 0
 3554 04a8 00BF     		nop
 3555              	.L214:
1261:..\src/interruptions.c ****     }
1262:..\src/interruptions.c **** 
1263:..\src/interruptions.c ****     // Position limit saturation
1264:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 3556              		.loc 1 1264 0
 3557 04aa 3B6D     		ldr	r3, [r7, #80]
 3558 04ac 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 3559 04b0 002B     		cmp	r3, #0
 3560 04b2 1FD0     		beq	.L239
1265:..\src/interruptions.c ****         if (g_ref[idx].pos < MOT->pos_lim_inf) 
 3561              		.loc 1 1265 0
 3562 04b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3563 04b6 334A     		ldr	r2, .L321+16
 3564 04b8 1B01     		lsls	r3, r3, #4
 3565 04ba 1344     		add	r3, r3, r2
 3566 04bc 1A68     		ldr	r2, [r3]
 3567 04be 3B6D     		ldr	r3, [r7, #80]
 3568 04c0 5B6B     		ldr	r3, [r3, #52]
 3569 04c2 9A42     		cmp	r2, r3
 3570 04c4 06DA     		bge	.L240
1266:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_inf;
 3571              		.loc 1 1266 0
 3572 04c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3573 04c8 3A6D     		ldr	r2, [r7, #80]
 3574 04ca 526B     		ldr	r2, [r2, #52]
 3575 04cc 2D49     		ldr	r1, .L321+16
 3576 04ce 1B01     		lsls	r3, r3, #4
 3577 04d0 0B44     		add	r3, r3, r1
 3578 04d2 1A60     		str	r2, [r3]
 3579              	.L240:
1267:..\src/interruptions.c ****         if (g_ref[idx].pos > MOT->pos_lim_sup) 
 3580              		.loc 1 1267 0
 3581 04d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3582 04d6 2B4A     		ldr	r2, .L321+16
 3583 04d8 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 88


 3584 04da 1344     		add	r3, r3, r2
 3585 04dc 1A68     		ldr	r2, [r3]
 3586 04de 3B6D     		ldr	r3, [r7, #80]
 3587 04e0 9B6B     		ldr	r3, [r3, #56]
 3588 04e2 9A42     		cmp	r2, r3
 3589 04e4 06DD     		ble	.L239
1268:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_sup;
 3590              		.loc 1 1268 0
 3591 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3592 04e8 3A6D     		ldr	r2, [r7, #80]
 3593 04ea 926B     		ldr	r2, [r2, #56]
 3594 04ec 2549     		ldr	r1, .L321+16
 3595 04ee 1B01     		lsls	r3, r3, #4
 3596 04f0 0B44     		add	r3, r3, r1
 3597 04f2 1A60     		str	r2, [r3]
 3598              	.L239:
1269:..\src/interruptions.c ****     }
1270:..\src/interruptions.c ****     
1271:..\src/interruptions.c ****     // SAFETY
1272:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 3599              		.loc 1 1272 0
 3600 04f4 244B     		ldr	r3, .L321+20
 3601 04f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3602 04f8 012B     		cmp	r3, #1
 3603 04fa 05D1     		bne	.L241
1273:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
1274:..\src/interruptions.c ****         g_ref[idx].pos = 0;
 3604              		.loc 1 1274 0
 3605 04fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3606 04fe 214A     		ldr	r2, .L321+16
 3607 0500 1B01     		lsls	r3, r3, #4
 3608 0502 1344     		add	r3, r3, r2
 3609 0504 0022     		movs	r2, #0
 3610 0506 1A60     		str	r2, [r3]
 3611              	.L241:
1275:..\src/interruptions.c ****     }        
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3612              		.loc 1 1277 0
 3613 0508 3B6D     		ldr	r3, [r7, #80]
 3614 050a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3615 050e 032B     		cmp	r3, #3
 3616 0510 00F24F82 		bhi	.L242
 3617 0514 01A2     		adr	r2, .L244
 3618 0516 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3619 051a 00BF     		.p2align 2
 3620              	.L244:
 3621 051c 33070000 		.word	.L243+1
 3622 0520 6B090000 		.word	.L245+1
 3623 0524 39080000 		.word	.L246+1
 3624 0528 2D050000 		.word	.L247+1
 3625              		.p2align 1
 3626              	.L247:
1278:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1279:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1280:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3627              		.loc 1 1280 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 89


 3628 052c 154B     		ldr	r3, .L321+16
 3629 052e 1A68     		ldr	r2, [r3]
 3630 0530 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3631 0534 1549     		ldr	r1, .L321+24
 3632 0536 3420     		movs	r0, #52
 3633 0538 00FB03F3 		mul	r3, r0, r3
 3634 053c 0B44     		add	r3, r3, r1
 3635 053e 1B68     		ldr	r3, [r3]
 3636 0540 D31A     		subs	r3, r2, r3
 3637 0542 3B61     		str	r3, [r7, #16]
1281:..\src/interruptions.c **** 
1282:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3638              		.loc 1 1282 0
 3639 0544 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3640 0546 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3641 0548 1149     		ldr	r1, .L321+28
 3642 054a 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3643 054e 3A69     		ldr	r2, [r7, #16]
 3644 0550 0A44     		add	r2, r2, r1
 3645 0552 0F49     		ldr	r1, .L321+28
 3646 0554 41F82320 		str	r2, [r1, r3, lsl #2]
1283:..\src/interruptions.c **** 
1284:..\src/interruptions.c ****             // error_sum saturation
1285:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3647              		.loc 1 1285 0
 3648 0558 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3649 055a 0D4A     		ldr	r2, .L321+28
 3650 055c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3651 0560 0C4A     		ldr	r2, .L321+32
 3652 0562 9342     		cmp	r3, r2
 3653 0564 18DD     		ble	.L248
1286:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3654              		.loc 1 1286 0
 3655 0566 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3656 0568 094A     		ldr	r2, .L321+28
 3657 056a 0A49     		ldr	r1, .L321+32
 3658 056c 42F82310 		str	r1, [r2, r3, lsl #2]
 3659 0570 1EE0     		b	.L249
 3660              	.L322:
 3661 0572 00BF     		.align	2
 3662              	.L321:
 3663 0574 AC000000 		.word	current_emg.10500
 3664 0578 00000000 		.word	g_refOld
 3665 057c 00000000 		.word	g_mem
 3666 0580 00000000 		.word	c_mem
 3667 0584 00000000 		.word	g_ref
 3668 0588 00000000 		.word	battery_low_SoC
 3669 058c 00000000 		.word	g_meas
 3670 0590 B0000000 		.word	pos_error_sum.10493
 3671 0594 80F0FA02 		.word	50000000
 3672              	.L248:
1287:..\src/interruptions.c ****             else {
1288:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3673              		.loc 1 1288 0
 3674 0598 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3675 059a 9C4A     		ldr	r2, .L323
 3676 059c 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 90


 3677 05a0 9B4A     		ldr	r2, .L323+4
 3678 05a2 9342     		cmp	r3, r2
 3679 05a4 04DA     		bge	.L249
1289:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3680              		.loc 1 1289 0
 3681 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3682 05a8 984A     		ldr	r2, .L323
 3683 05aa 9949     		ldr	r1, .L323+4
 3684 05ac 42F82310 		str	r1, [r2, r3, lsl #2]
 3685              	.L249:
1290:..\src/interruptions.c ****             }
1291:..\src/interruptions.c ****             
1292:..\src/interruptions.c ****             // ------ position PID control ------
1293:..\src/interruptions.c **** 
1294:..\src/interruptions.c ****             i_ref = 0;
 3686              		.loc 1 1294 0
 3687 05b0 0023     		movs	r3, #0
 3688 05b2 BB65     		str	r3, [r7, #88]
1295:..\src/interruptions.c ****             
1296:..\src/interruptions.c ****             // Proportional
1297:..\src/interruptions.c ****             if (k_p_dl != 0)
 3689              		.loc 1 1297 0
 3690 05b4 3B6B     		ldr	r3, [r7, #48]
 3691 05b6 002B     		cmp	r3, #0
 3692 05b8 07D0     		beq	.L250
1298:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3693              		.loc 1 1298 0
 3694 05ba 3B6B     		ldr	r3, [r7, #48]
 3695 05bc 3A69     		ldr	r2, [r7, #16]
 3696 05be 02FB03F3 		mul	r3, r2, r3
 3697 05c2 1B14     		asrs	r3, r3, #16
 3698 05c4 BA6D     		ldr	r2, [r7, #88]
 3699 05c6 1344     		add	r3, r3, r2
 3700 05c8 BB65     		str	r3, [r7, #88]
 3701              	.L250:
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****             // Integral
1301:..\src/interruptions.c ****             if (k_i_dl != 0)
 3702              		.loc 1 1301 0
 3703 05ca FB6A     		ldr	r3, [r7, #44]
 3704 05cc 002B     		cmp	r3, #0
 3705 05ce 0AD0     		beq	.L251
1302:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3706              		.loc 1 1302 0
 3707 05d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3708 05d2 8E4A     		ldr	r2, .L323
 3709 05d4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3710 05d8 FA6A     		ldr	r2, [r7, #44]
 3711 05da 02FB03F3 		mul	r3, r2, r3
 3712 05de 1B14     		asrs	r3, r3, #16
 3713 05e0 BA6D     		ldr	r2, [r7, #88]
 3714 05e2 1344     		add	r3, r3, r2
 3715 05e4 BB65     		str	r3, [r7, #88]
 3716              	.L251:
1303:..\src/interruptions.c **** 
1304:..\src/interruptions.c ****             // Derivative
1305:..\src/interruptions.c ****             if (k_d_dl != 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 91


 3717              		.loc 1 1305 0
 3718 05e6 BB6A     		ldr	r3, [r7, #40]
 3719 05e8 002B     		cmp	r3, #0
 3720 05ea 0CD0     		beq	.L252
1306:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3721              		.loc 1 1306 0
 3722 05ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3723 05ee 894A     		ldr	r2, .L323+8
 3724 05f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3725 05f4 3A69     		ldr	r2, [r7, #16]
 3726 05f6 D31A     		subs	r3, r2, r3
 3727 05f8 BA6A     		ldr	r2, [r7, #40]
 3728 05fa 02FB03F3 		mul	r3, r2, r3
 3729 05fe 1B14     		asrs	r3, r3, #16
 3730 0600 BA6D     		ldr	r2, [r7, #88]
 3731 0602 1344     		add	r3, r3, r2
 3732 0604 BB65     		str	r3, [r7, #88]
 3733              	.L252:
1307:..\src/interruptions.c ****                         
1308:..\src/interruptions.c ****             // Update previous position
1309:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3734              		.loc 1 1309 0
 3735 0606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3736 0608 8249     		ldr	r1, .L323+8
 3737 060a 3A69     		ldr	r2, [r7, #16]
 3738 060c 41F82320 		str	r2, [r1, r3, lsl #2]
1310:..\src/interruptions.c **** 
1311:..\src/interruptions.c ****             // motor direction depends on i_ref
1312:..\src/interruptions.c ****             if (i_ref >= 0)
 3739              		.loc 1 1312 0
 3740 0610 BB6D     		ldr	r3, [r7, #88]
 3741 0612 002B     		cmp	r3, #0
 3742 0614 04DB     		blt	.L253
1313:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3743              		.loc 1 1313 0
 3744 0616 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3745 0618 7F4A     		ldr	r2, .L323+12
 3746 061a 0121     		movs	r1, #1
 3747 061c D154     		strb	r1, [r2, r3]
 3748 061e 03E0     		b	.L254
 3749              	.L253:
1314:..\src/interruptions.c ****             else
1315:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3750              		.loc 1 1315 0
 3751 0620 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3752 0622 7D4A     		ldr	r2, .L323+12
 3753 0624 0021     		movs	r1, #0
 3754 0626 D154     		strb	r1, [r2, r3]
 3755              	.L254:
1316:..\src/interruptions.c **** 
1317:..\src/interruptions.c ****             // saturate max current
1318:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3756              		.loc 1 1318 0
 3757 0628 3B6D     		ldr	r3, [r7, #80]
 3758 062a B3F95C30 		ldrsh	r3, [r3, #92]
 3759 062e 1A46     		mov	r2, r3
 3760 0630 BB6D     		ldr	r3, [r7, #88]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 92


 3761 0632 9A42     		cmp	r2, r3
 3762 0634 04DA     		bge	.L255
1319:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3763              		.loc 1 1319 0
 3764 0636 3B6D     		ldr	r3, [r7, #80]
 3765 0638 B3F95C30 		ldrsh	r3, [r3, #92]
 3766 063c BB65     		str	r3, [r7, #88]
 3767 063e 0BE0     		b	.L256
 3768              	.L255:
1320:..\src/interruptions.c ****             else {
1321:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3769              		.loc 1 1321 0
 3770 0640 3B6D     		ldr	r3, [r7, #80]
 3771 0642 B3F95C30 		ldrsh	r3, [r3, #92]
 3772 0646 5A42     		negs	r2, r3
 3773 0648 BB6D     		ldr	r3, [r7, #88]
 3774 064a 9A42     		cmp	r2, r3
 3775 064c 04DD     		ble	.L256
1322:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3776              		.loc 1 1322 0
 3777 064e 3B6D     		ldr	r3, [r7, #80]
 3778 0650 B3F95C30 		ldrsh	r3, [r3, #92]
 3779 0654 5B42     		negs	r3, r3
 3780 0656 BB65     		str	r3, [r7, #88]
 3781              	.L256:
1323:..\src/interruptions.c ****         	}
1324:..\src/interruptions.c **** 
1325:..\src/interruptions.c ****             // current error and curr error sum
1326:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3782              		.loc 1 1326 0
 3783 0658 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3784 065c 6F4A     		ldr	r2, .L323+16
 3785 065e 3421     		movs	r1, #52
 3786 0660 01FB03F3 		mul	r3, r1, r3
 3787 0664 1344     		add	r3, r3, r2
 3788 0666 0C33     		adds	r3, r3, #12
 3789 0668 1B68     		ldr	r3, [r3]
 3790 066a BA6D     		ldr	r2, [r7, #88]
 3791 066c D31A     		subs	r3, r2, r3
 3792 066e FB60     		str	r3, [r7, #12]
1327:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3793              		.loc 1 1327 0
 3794 0670 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3795 0672 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3796 0674 6A49     		ldr	r1, .L323+20
 3797 0676 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3798 067a FA68     		ldr	r2, [r7, #12]
 3799 067c 0A44     		add	r2, r2, r1
 3800 067e 6849     		ldr	r1, .L323+20
 3801 0680 41F82320 		str	r2, [r1, r3, lsl #2]
1328:..\src/interruptions.c ****             
1329:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3802              		.loc 1 1329 0
 3803 0684 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3804 0686 664A     		ldr	r2, .L323+20
 3805 0688 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3806 068c 654A     		ldr	r2, .L323+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 93


 3807 068e 9342     		cmp	r3, r2
 3808 0690 05DD     		ble	.L257
1330:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3809              		.loc 1 1330 0
 3810 0692 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3811 0694 624A     		ldr	r2, .L323+20
 3812 0696 6349     		ldr	r1, .L323+24
 3813 0698 42F82310 		str	r1, [r2, r3, lsl #2]
 3814 069c 0BE0     		b	.L258
 3815              	.L257:
1331:..\src/interruptions.c ****             else {
1332:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3816              		.loc 1 1332 0
 3817 069e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3818 06a0 5F4A     		ldr	r2, .L323+20
 3819 06a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3820 06a6 604A     		ldr	r2, .L323+28
 3821 06a8 9342     		cmp	r3, r2
 3822 06aa 04DA     		bge	.L258
1333:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3823              		.loc 1 1333 0
 3824 06ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3825 06ae 5C4A     		ldr	r2, .L323+20
 3826 06b0 5D49     		ldr	r1, .L323+28
 3827 06b2 42F82310 		str	r1, [r2, r3, lsl #2]
 3828              	.L258:
1334:..\src/interruptions.c ****             }
1335:..\src/interruptions.c **** 
1336:..\src/interruptions.c ****             // ----- current PID control -----
1337:..\src/interruptions.c **** 
1338:..\src/interruptions.c ****             pwm_input = 0;
 3829              		.loc 1 1338 0
 3830 06b6 0023     		movs	r3, #0
 3831 06b8 FB65     		str	r3, [r7, #92]
1339:..\src/interruptions.c **** 
1340:..\src/interruptions.c ****             // Proportional
1341:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3832              		.loc 1 1341 0
 3833 06ba 7B6A     		ldr	r3, [r7, #36]
 3834 06bc 002B     		cmp	r3, #0
 3835 06be 07D0     		beq	.L259
1342:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3836              		.loc 1 1342 0
 3837 06c0 7B6A     		ldr	r3, [r7, #36]
 3838 06c2 FA68     		ldr	r2, [r7, #12]
 3839 06c4 02FB03F3 		mul	r3, r2, r3
 3840 06c8 1B14     		asrs	r3, r3, #16
 3841 06ca FA6D     		ldr	r2, [r7, #92]
 3842 06cc 1344     		add	r3, r3, r2
 3843 06ce FB65     		str	r3, [r7, #92]
 3844              	.L259:
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****             // Integral
1345:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3845              		.loc 1 1345 0
 3846 06d0 3B6A     		ldr	r3, [r7, #32]
 3847 06d2 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 94


 3848 06d4 0AD0     		beq	.L260
1346:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3849              		.loc 1 1346 0
 3850 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3851 06d8 514A     		ldr	r2, .L323+20
 3852 06da 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3853 06de 3A6A     		ldr	r2, [r7, #32]
 3854 06e0 02FB03F3 		mul	r3, r2, r3
 3855 06e4 1B14     		asrs	r3, r3, #16
 3856 06e6 FA6D     		ldr	r2, [r7, #92]
 3857 06e8 1344     		add	r3, r3, r2
 3858 06ea FB65     		str	r3, [r7, #92]
 3859              	.L260:
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****             // Derivative
1349:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3860              		.loc 1 1349 0
 3861 06ec FB69     		ldr	r3, [r7, #28]
 3862 06ee 002B     		cmp	r3, #0
 3863 06f0 0CD0     		beq	.L261
1350:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3864              		.loc 1 1350 0
 3865 06f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3866 06f4 4D4A     		ldr	r2, .L323+32
 3867 06f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3868 06fa FA68     		ldr	r2, [r7, #12]
 3869 06fc D31A     		subs	r3, r2, r3
 3870 06fe FA69     		ldr	r2, [r7, #28]
 3871 0700 02FB03F3 		mul	r3, r2, r3
 3872 0704 1B14     		asrs	r3, r3, #16
 3873 0706 FA6D     		ldr	r2, [r7, #92]
 3874 0708 1344     		add	r3, r3, r2
 3875 070a FB65     		str	r3, [r7, #92]
 3876              	.L261:
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****             // pwm_input saturation
1353:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3877              		.loc 1 1353 0
 3878 070c FB6D     		ldr	r3, [r7, #92]
 3879 070e 13F1640F 		cmn	r3, #100
 3880 0712 03DA     		bge	.L262
1354:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3881              		.loc 1 1354 0
 3882 0714 6FF06303 		mvn	r3, #99
 3883 0718 FB65     		str	r3, [r7, #92]
 3884 071a 04E0     		b	.L263
 3885              	.L262:
1355:..\src/interruptions.c ****             else {
1356:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3886              		.loc 1 1356 0
 3887 071c FB6D     		ldr	r3, [r7, #92]
 3888 071e 642B     		cmp	r3, #100
 3889 0720 01DD     		ble	.L263
1357:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3890              		.loc 1 1357 0
 3891 0722 6423     		movs	r3, #100
 3892 0724 FB65     		str	r3, [r7, #92]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 95


 3893              	.L263:
1358:..\src/interruptions.c ****             }
1359:..\src/interruptions.c **** 
1360:..\src/interruptions.c ****             // Update previous current
1361:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3894              		.loc 1 1361 0
 3895 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3896 0728 4049     		ldr	r1, .L323+32
 3897 072a FA68     		ldr	r2, [r7, #12]
 3898 072c 41F82320 		str	r2, [r1, r3, lsl #2]
1362:..\src/interruptions.c **** 
1363:..\src/interruptions.c ****         break;
 3899              		.loc 1 1363 0
 3900 0730 3FE1     		b	.L242
 3901              	.L243:
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1366:..\src/interruptions.c ****         case CONTROL_ANGLE:
1367:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 3902              		.loc 1 1367 0
 3903 0732 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3904 0734 3E4A     		ldr	r2, .L323+36
 3905 0736 1B01     		lsls	r3, r3, #4
 3906 0738 1344     		add	r3, r3, r2
 3907 073a 1A68     		ldr	r2, [r3]
 3908 073c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3909 0740 3649     		ldr	r1, .L323+16
 3910 0742 3420     		movs	r0, #52
 3911 0744 00FB03F3 		mul	r3, r0, r3
 3912 0748 0B44     		add	r3, r3, r1
 3913 074a 1B68     		ldr	r3, [r3]
 3914 074c D31A     		subs	r3, r2, r3
 3915 074e 3B61     		str	r3, [r7, #16]
1368:..\src/interruptions.c **** 
1369:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3916              		.loc 1 1369 0
 3917 0750 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3918 0752 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3919 0754 2D49     		ldr	r1, .L323
 3920 0756 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3921 075a 3A69     		ldr	r2, [r7, #16]
 3922 075c 0A44     		add	r2, r2, r1
 3923 075e 2B49     		ldr	r1, .L323
 3924 0760 41F82320 		str	r2, [r1, r3, lsl #2]
1370:..\src/interruptions.c **** 
1371:..\src/interruptions.c ****             // anti-windup (for integral control)
1372:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 3925              		.loc 1 1372 0
 3926 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3927 0766 294A     		ldr	r2, .L323
 3928 0768 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3929 076c B3F57A7F 		cmp	r3, #1000
 3930 0770 06DD     		ble	.L264
1373:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 3931              		.loc 1 1373 0
 3932 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3933 0774 254A     		ldr	r2, .L323
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 96


 3934 0776 4FF47A71 		mov	r1, #1000
 3935 077a 42F82310 		str	r1, [r2, r3, lsl #2]
 3936 077e 0BE0     		b	.L265
 3937              	.L264:
1374:..\src/interruptions.c ****             else {
1375:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 3938              		.loc 1 1375 0
 3939 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3940 0782 224A     		ldr	r2, .L323
 3941 0784 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3942 0788 13F57A7F 		cmn	r3, #1000
 3943 078c 04DA     		bge	.L265
1376:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 3944              		.loc 1 1376 0
 3945 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3946 0790 1E4A     		ldr	r2, .L323
 3947 0792 2849     		ldr	r1, .L323+40
 3948 0794 42F82310 		str	r1, [r2, r3, lsl #2]
 3949              	.L265:
1377:..\src/interruptions.c ****             }
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****             // Proportional
1380:..\src/interruptions.c ****             if (k_p != 0) 
 3950              		.loc 1 1380 0
 3951 0798 BB6C     		ldr	r3, [r7, #72]
 3952 079a 002B     		cmp	r3, #0
 3953 079c 05D0     		beq	.L266
1381:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3954              		.loc 1 1381 0
 3955 079e BB6C     		ldr	r3, [r7, #72]
 3956 07a0 3A69     		ldr	r2, [r7, #16]
 3957 07a2 02FB03F3 		mul	r3, r2, r3
 3958 07a6 1B14     		asrs	r3, r3, #16
 3959 07a8 FB65     		str	r3, [r7, #92]
 3960              	.L266:
1382:..\src/interruptions.c ****             
1383:..\src/interruptions.c **** 
1384:..\src/interruptions.c ****             // Integral
1385:..\src/interruptions.c ****             if (k_i != 0) 
 3961              		.loc 1 1385 0
 3962 07aa 7B6C     		ldr	r3, [r7, #68]
 3963 07ac 002B     		cmp	r3, #0
 3964 07ae 0AD0     		beq	.L267
1386:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 3965              		.loc 1 1386 0
 3966 07b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3967 07b2 164A     		ldr	r2, .L323
 3968 07b4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3969 07b8 7A6C     		ldr	r2, [r7, #68]
 3970 07ba 02FB03F3 		mul	r3, r2, r3
 3971 07be 1B14     		asrs	r3, r3, #16
 3972 07c0 FA6D     		ldr	r2, [r7, #92]
 3973 07c2 1344     		add	r3, r3, r2
 3974 07c4 FB65     		str	r3, [r7, #92]
 3975              	.L267:
1387:..\src/interruptions.c ****             
1388:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 97


1389:..\src/interruptions.c ****             // Derivative
1390:..\src/interruptions.c ****             if (k_d != 0) 
 3976              		.loc 1 1390 0
 3977 07c6 3B6C     		ldr	r3, [r7, #64]
 3978 07c8 002B     		cmp	r3, #0
 3979 07ca 0CD0     		beq	.L268
1391:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 3980              		.loc 1 1391 0
 3981 07cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3982 07ce 114A     		ldr	r2, .L323+8
 3983 07d0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3984 07d4 3A69     		ldr	r2, [r7, #16]
 3985 07d6 D31A     		subs	r3, r2, r3
 3986 07d8 3A6C     		ldr	r2, [r7, #64]
 3987 07da 02FB03F3 		mul	r3, r2, r3
 3988 07de 1B14     		asrs	r3, r3, #16
 3989 07e0 FA6D     		ldr	r2, [r7, #92]
 3990 07e2 1344     		add	r3, r3, r2
 3991 07e4 FB65     		str	r3, [r7, #92]
 3992              	.L268:
1392:..\src/interruptions.c ****             
1393:..\src/interruptions.c **** 
1394:..\src/interruptions.c ****             // Update measure
1395:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3993              		.loc 1 1395 0
 3994 07e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3995 07e8 0A49     		ldr	r1, .L323+8
 3996 07ea 3A69     		ldr	r2, [r7, #16]
 3997 07ec 41F82320 		str	r2, [r1, r3, lsl #2]
1396:..\src/interruptions.c **** 
1397:..\src/interruptions.c ****             if (pwm_input > 0)
 3998              		.loc 1 1397 0
 3999 07f0 FB6D     		ldr	r3, [r7, #92]
 4000 07f2 002B     		cmp	r3, #0
 4001 07f4 04DD     		ble	.L269
1398:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4002              		.loc 1 1398 0
 4003 07f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4004 07f8 074A     		ldr	r2, .L323+12
 4005 07fa 0121     		movs	r1, #1
 4006 07fc D154     		strb	r1, [r2, r3]
1399:..\src/interruptions.c ****             else
1400:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1401:..\src/interruptions.c **** 
1402:..\src/interruptions.c ****         break;
 4007              		.loc 1 1402 0
 4008 07fe D8E0     		b	.L242
 4009              	.L269:
1400:..\src/interruptions.c **** 
 4010              		.loc 1 1400 0
 4011 0800 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4012 0802 054A     		ldr	r2, .L323+12
 4013 0804 0021     		movs	r1, #0
 4014 0806 D154     		strb	r1, [r2, r3]
 4015              		.loc 1 1402 0
 4016 0808 D3E0     		b	.L242
 4017              	.L324:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 98


 4018 080a 00BF     		.align	2
 4019              	.L323:
 4020 080c B0000000 		.word	pos_error_sum.10493
 4021 0810 800F05FD 		.word	-50000000
 4022 0814 B8000000 		.word	prev_pos_err.10495
 4023 0818 C0000000 		.word	motor_dir.10498
 4024 081c 00000000 		.word	g_meas
 4025 0820 C4000000 		.word	curr_error_sum.10494
 4026 0824 A0860100 		.word	100000
 4027 0828 6079FEFF 		.word	-100000
 4028 082c CC000000 		.word	prev_curr_err.10496
 4029 0830 00000000 		.word	g_ref
 4030 0834 18FCFFFF 		.word	-1000
 4031              	.L246:
1403:..\src/interruptions.c **** 
1404:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1405:..\src/interruptions.c ****         case CONTROL_CURRENT:
1406:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4032              		.loc 1 1406 0
 4033 0838 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4034 083a 8D4A     		ldr	r2, .L325
 4035 083c 1B01     		lsls	r3, r3, #4
 4036 083e 1344     		add	r3, r3, r2
 4037 0840 0C33     		adds	r3, r3, #12
 4038 0842 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4039 0844 002B     		cmp	r3, #0
 4040 0846 00F0B180 		beq	.L316
 4041              		.loc 1 1406 0 is_stmt 0 discriminator 1
 4042 084a 8A4B     		ldr	r3, .L325+4
 4043 084c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4044 084e 002B     		cmp	r3, #0
 4045 0850 00F0AC80 		beq	.L316
1407:..\src/interruptions.c ****                 
1408:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4046              		.loc 1 1408 0 is_stmt 1
 4047 0854 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4048 0856 864A     		ldr	r2, .L325
 4049 0858 1B01     		lsls	r3, r3, #4
 4050 085a 1344     		add	r3, r3, r2
 4051 085c 0433     		adds	r3, r3, #4
 4052 085e 1B68     		ldr	r3, [r3]
 4053 0860 BB65     		str	r3, [r7, #88]
1409:..\src/interruptions.c **** 
1410:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4054              		.loc 1 1410 0
 4055 0862 3B6D     		ldr	r3, [r7, #80]
 4056 0864 B3F95C30 		ldrsh	r3, [r3, #92]
 4057 0868 1A46     		mov	r2, r3
 4058 086a BB6D     		ldr	r3, [r7, #88]
 4059 086c 9A42     		cmp	r2, r3
 4060 086e 04DA     		bge	.L272
1411:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4061              		.loc 1 1411 0
 4062 0870 3B6D     		ldr	r3, [r7, #80]
 4063 0872 B3F95C30 		ldrsh	r3, [r3, #92]
 4064 0876 BB65     		str	r3, [r7, #88]
 4065 0878 0BE0     		b	.L273
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 99


 4066              	.L272:
1412:..\src/interruptions.c ****                 else {
1413:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4067              		.loc 1 1413 0
 4068 087a 3B6D     		ldr	r3, [r7, #80]
 4069 087c B3F95C30 		ldrsh	r3, [r3, #92]
 4070 0880 5A42     		negs	r2, r3
 4071 0882 BB6D     		ldr	r3, [r7, #88]
 4072 0884 9A42     		cmp	r2, r3
 4073 0886 04DD     		ble	.L273
1414:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4074              		.loc 1 1414 0
 4075 0888 3B6D     		ldr	r3, [r7, #80]
 4076 088a B3F95C30 		ldrsh	r3, [r3, #92]
 4077 088e 5B42     		negs	r3, r3
 4078 0890 BB65     		str	r3, [r7, #88]
 4079              	.L273:
1415:..\src/interruptions.c ****                 }
1416:..\src/interruptions.c ****                 
1417:..\src/interruptions.c ****                 // current error
1418:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4080              		.loc 1 1418 0
 4081 0892 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 4082 0896 784A     		ldr	r2, .L325+8
 4083 0898 3421     		movs	r1, #52
 4084 089a 01FB03F3 		mul	r3, r1, r3
 4085 089e 1344     		add	r3, r3, r2
 4086 08a0 0C33     		adds	r3, r3, #12
 4087 08a2 1B68     		ldr	r3, [r3]
 4088 08a4 BA6D     		ldr	r2, [r7, #88]
 4089 08a6 D31A     		subs	r3, r2, r3
 4090 08a8 FB60     		str	r3, [r7, #12]
1419:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4091              		.loc 1 1419 0
 4092 08aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4093 08ac FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4094 08ae 7349     		ldr	r1, .L325+12
 4095 08b0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4096 08b4 FA68     		ldr	r2, [r7, #12]
 4097 08b6 0A44     		add	r2, r2, r1
 4098 08b8 7049     		ldr	r1, .L325+12
 4099 08ba 41F82320 		str	r2, [r1, r3, lsl #2]
1420:..\src/interruptions.c ****                 
1421:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4100              		.loc 1 1421 0
 4101 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4102 08c0 6E4A     		ldr	r2, .L325+12
 4103 08c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4104 08c6 6E4A     		ldr	r2, .L325+16
 4105 08c8 9342     		cmp	r3, r2
 4106 08ca 05DD     		ble	.L274
1422:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4107              		.loc 1 1422 0
 4108 08cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4109 08ce 6B4A     		ldr	r2, .L325+12
 4110 08d0 6B49     		ldr	r1, .L325+16
 4111 08d2 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 100


 4112 08d6 0BE0     		b	.L275
 4113              	.L274:
1423:..\src/interruptions.c ****                 else {
1424:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4114              		.loc 1 1424 0
 4115 08d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4116 08da 684A     		ldr	r2, .L325+12
 4117 08dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4118 08e0 684A     		ldr	r2, .L325+20
 4119 08e2 9342     		cmp	r3, r2
 4120 08e4 04DA     		bge	.L275
1425:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4121              		.loc 1 1425 0
 4122 08e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4123 08e8 644A     		ldr	r2, .L325+12
 4124 08ea 6649     		ldr	r1, .L325+20
 4125 08ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4126              	.L275:
1426:..\src/interruptions.c ****                 }
1427:..\src/interruptions.c **** 
1428:..\src/interruptions.c ****                 pwm_input = 0;
 4127              		.loc 1 1428 0
 4128 08f0 0023     		movs	r3, #0
 4129 08f2 FB65     		str	r3, [r7, #92]
1429:..\src/interruptions.c **** 
1430:..\src/interruptions.c ****                 // Proportional
1431:..\src/interruptions.c ****                 if (k_p_c != 0)
 4130              		.loc 1 1431 0
 4131 08f4 FB6B     		ldr	r3, [r7, #60]
 4132 08f6 002B     		cmp	r3, #0
 4133 08f8 07D0     		beq	.L276
1432:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4134              		.loc 1 1432 0
 4135 08fa FB6B     		ldr	r3, [r7, #60]
 4136 08fc FA68     		ldr	r2, [r7, #12]
 4137 08fe 02FB03F3 		mul	r3, r2, r3
 4138 0902 1B14     		asrs	r3, r3, #16
 4139 0904 FA6D     		ldr	r2, [r7, #92]
 4140 0906 1344     		add	r3, r3, r2
 4141 0908 FB65     		str	r3, [r7, #92]
 4142              	.L276:
1433:..\src/interruptions.c **** 
1434:..\src/interruptions.c ****                 // Integral
1435:..\src/interruptions.c ****                 if (k_i_c != 0)
 4143              		.loc 1 1435 0
 4144 090a BB6B     		ldr	r3, [r7, #56]
 4145 090c 002B     		cmp	r3, #0
 4146 090e 0AD0     		beq	.L277
1436:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4147              		.loc 1 1436 0
 4148 0910 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4149 0912 5A4A     		ldr	r2, .L325+12
 4150 0914 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4151 0918 BA6B     		ldr	r2, [r7, #56]
 4152 091a 02FB03F3 		mul	r3, r2, r3
 4153 091e 1B14     		asrs	r3, r3, #16
 4154 0920 FA6D     		ldr	r2, [r7, #92]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 101


 4155 0922 1344     		add	r3, r3, r2
 4156 0924 FB65     		str	r3, [r7, #92]
 4157              	.L277:
1437:..\src/interruptions.c **** 
1438:..\src/interruptions.c ****                 // Derivative
1439:..\src/interruptions.c ****                 if (k_d_c != 0)
 4158              		.loc 1 1439 0
 4159 0926 7B6B     		ldr	r3, [r7, #52]
 4160 0928 002B     		cmp	r3, #0
 4161 092a 0CD0     		beq	.L278
1440:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4162              		.loc 1 1440 0
 4163 092c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4164 092e 564A     		ldr	r2, .L325+24
 4165 0930 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4166 0934 FA68     		ldr	r2, [r7, #12]
 4167 0936 D31A     		subs	r3, r2, r3
 4168 0938 7A6B     		ldr	r2, [r7, #52]
 4169 093a 02FB03F3 		mul	r3, r2, r3
 4170 093e 1B14     		asrs	r3, r3, #16
 4171 0940 FA6D     		ldr	r2, [r7, #92]
 4172 0942 1344     		add	r3, r3, r2
 4173 0944 FB65     		str	r3, [r7, #92]
 4174              	.L278:
1441:..\src/interruptions.c ****                 
1442:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4175              		.loc 1 1442 0
 4176 0946 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4177 0948 4F49     		ldr	r1, .L325+24
 4178 094a FA68     		ldr	r2, [r7, #12]
 4179 094c 41F82320 		str	r2, [r1, r3, lsl #2]
1443:..\src/interruptions.c ****                 
1444:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4180              		.loc 1 1444 0
 4181 0950 FB6D     		ldr	r3, [r7, #92]
 4182 0952 002B     		cmp	r3, #0
 4183 0954 04DB     		blt	.L279
1445:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4184              		.loc 1 1445 0
 4185 0956 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4186 0958 4C4A     		ldr	r2, .L325+28
 4187 095a 0121     		movs	r1, #1
 4188 095c D154     		strb	r1, [r2, r3]
1446:..\src/interruptions.c ****                 else
1447:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1448:..\src/interruptions.c ****             }
1449:..\src/interruptions.c ****         break;
 4189              		.loc 1 1449 0
 4190 095e 25E0     		b	.L316
 4191              	.L279:
1447:..\src/interruptions.c ****             }
 4192              		.loc 1 1447 0
 4193 0960 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4194 0962 4A4A     		ldr	r2, .L325+28
 4195 0964 0021     		movs	r1, #0
 4196 0966 D154     		strb	r1, [r2, r3]
 4197              		.loc 1 1449 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 102


 4198 0968 20E0     		b	.L316
 4199              	.L245:
1450:..\src/interruptions.c ****         
1451:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1452:..\src/interruptions.c ****         case CONTROL_PWM:
1453:..\src/interruptions.c **** 
1454:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4200              		.loc 1 1454 0
 4201 096a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4202 096c 404A     		ldr	r2, .L325
 4203 096e 1B01     		lsls	r3, r3, #4
 4204 0970 1344     		add	r3, r3, r2
 4205 0972 0833     		adds	r3, r3, #8
 4206 0974 1B68     		ldr	r3, [r3]
 4207 0976 FB65     		str	r3, [r7, #92]
1455:..\src/interruptions.c **** 
1456:..\src/interruptions.c ****             if (pwm_input > 0) 
 4208              		.loc 1 1456 0
 4209 0978 FB6D     		ldr	r3, [r7, #92]
 4210 097a 002B     		cmp	r3, #0
 4211 097c 04DD     		ble	.L280
1457:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4212              		.loc 1 1457 0
 4213 097e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4214 0980 424A     		ldr	r2, .L325+28
 4215 0982 0121     		movs	r1, #1
 4216 0984 D154     		strb	r1, [r2, r3]
 4217 0986 03E0     		b	.L281
 4218              	.L280:
1458:..\src/interruptions.c ****             else 
1459:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4219              		.loc 1 1459 0
 4220 0988 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4221 098a 404A     		ldr	r2, .L325+28
 4222 098c 0021     		movs	r1, #0
 4223 098e D154     		strb	r1, [r2, r3]
 4224              	.L281:
1460:..\src/interruptions.c ****             
1461:..\src/interruptions.c **** 
1462:..\src/interruptions.c ****             // pwm_input saturation
1463:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4225              		.loc 1 1463 0
 4226 0990 FB6D     		ldr	r3, [r7, #92]
 4227 0992 13F1640F 		cmn	r3, #100
 4228 0996 03DA     		bge	.L282
1464:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4229              		.loc 1 1464 0
 4230 0998 6FF06303 		mvn	r3, #99
 4231 099c FB65     		str	r3, [r7, #92]
1465:..\src/interruptions.c ****             else {
1466:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1467:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1468:..\src/interruptions.c ****         	}
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****         break;
 4232              		.loc 1 1470 0
 4233 099e 07E0     		b	.L317
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 103


 4234              	.L282:
1466:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4235              		.loc 1 1466 0
 4236 09a0 FB6D     		ldr	r3, [r7, #92]
 4237 09a2 642B     		cmp	r3, #100
 4238 09a4 04DD     		ble	.L317
1467:..\src/interruptions.c ****         	}
 4239              		.loc 1 1467 0
 4240 09a6 6423     		movs	r3, #100
 4241 09a8 FB65     		str	r3, [r7, #92]
 4242              		.loc 1 1470 0
 4243 09aa 01E0     		b	.L317
 4244              	.L316:
1449:..\src/interruptions.c ****         
 4245              		.loc 1 1449 0
 4246 09ac 00BF     		nop
 4247 09ae 00E0     		b	.L242
 4248              	.L317:
 4249              		.loc 1 1470 0
 4250 09b0 00BF     		nop
 4251              	.L242:
1471:..\src/interruptions.c ****             
1472:..\src/interruptions.c ****     }
1473:..\src/interruptions.c **** 
1474:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1475:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1476:..\src/interruptions.c **** 
1477:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4252              		.loc 1 1477 0
 4253 09b2 FB6D     		ldr	r3, [r7, #92]
 4254 09b4 642B     		cmp	r3, #100
 4255 09b6 01DD     		ble	.L284
1478:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4256              		.loc 1 1478 0
 4257 09b8 6423     		movs	r3, #100
 4258 09ba FB65     		str	r3, [r7, #92]
 4259              	.L284:
1479:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4260              		.loc 1 1479 0
 4261 09bc FB6D     		ldr	r3, [r7, #92]
 4262 09be 13F1640F 		cmn	r3, #100
 4263 09c2 02DA     		bge	.L285
1480:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4264              		.loc 1 1480 0
 4265 09c4 6FF06303 		mvn	r3, #99
 4266 09c8 FB65     		str	r3, [r7, #92]
 4267              	.L285:
1481:..\src/interruptions.c **** 
1482:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4268              		.loc 1 1482 0
 4269 09ca 3B6D     		ldr	r3, [r7, #80]
 4270 09cc 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4271 09d0 012B     		cmp	r3, #1
 4272 09d2 0DD0     		beq	.L286
1483:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4273              		.loc 1 1483 0
 4274 09d4 FB6D     		ldr	r3, [r7, #92]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 104


 4275 09d6 9B02     		lsls	r3, r3, #10
 4276 09d8 2D4A     		ldr	r2, .L325+32
 4277 09da 82FB0312 		smull	r1, r2, r2, r3
 4278 09de 5211     		asrs	r2, r2, #5
 4279 09e0 DB17     		asrs	r3, r3, #31
 4280 09e2 D31A     		subs	r3, r2, r3
 4281 09e4 2B4A     		ldr	r2, .L325+36
 4282 09e6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4283 09e8 02FB03F3 		mul	r3, r2, r3
 4284 09ec 9B12     		asrs	r3, r3, #10
 4285 09ee FB65     		str	r3, [r7, #92]
 4286              	.L286:
1484:..\src/interruptions.c ****  
1485:..\src/interruptions.c ****     //// RATE LIMITER ////
1486:..\src/interruptions.c ****        if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4287              		.loc 1 1486 0
 4288 09f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4289 09f2 294A     		ldr	r2, .L325+40
 4290 09f4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4291 09f8 FA6D     		ldr	r2, [r7, #92]
 4292 09fa D31A     		subs	r3, r2, r3
 4293 09fc 3A6D     		ldr	r2, [r7, #80]
 4294 09fe 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4295 0a02 9342     		cmp	r3, r2
 4296 0a04 09DD     		ble	.L287
1487:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4297              		.loc 1 1487 0
 4298 0a06 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4299 0a08 234A     		ldr	r2, .L325+40
 4300 0a0a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4301 0a0e 3A6D     		ldr	r2, [r7, #80]
 4302 0a10 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4303 0a14 1344     		add	r3, r3, r2
 4304 0a16 FB65     		str	r3, [r7, #92]
 4305 0a18 14E0     		b	.L288
 4306              	.L287:
1488:..\src/interruptions.c ****     }
1489:..\src/interruptions.c ****     else {
1490:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4307              		.loc 1 1490 0
 4308 0a1a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4309 0a1c 1E4A     		ldr	r2, .L325+40
 4310 0a1e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4311 0a22 FA6D     		ldr	r2, [r7, #92]
 4312 0a24 D21A     		subs	r2, r2, r3
 4313 0a26 3B6D     		ldr	r3, [r7, #80]
 4314 0a28 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4315 0a2c 5B42     		negs	r3, r3
 4316 0a2e 9A42     		cmp	r2, r3
 4317 0a30 08DA     		bge	.L288
1491:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4318              		.loc 1 1491 0
 4319 0a32 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4320 0a34 184A     		ldr	r2, .L325+40
 4321 0a36 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4322 0a3a 3A6D     		ldr	r2, [r7, #80]
 4323 0a3c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 105


 4324 0a40 9B1A     		subs	r3, r3, r2
 4325 0a42 FB65     		str	r3, [r7, #92]
 4326              	.L288:
1492:..\src/interruptions.c ****     }
1493:..\src/interruptions.c ****     
1494:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4327              		.loc 1 1494 0
 4328 0a44 FB6D     		ldr	r3, [r7, #92]
 4329 0a46 642B     		cmp	r3, #100
 4330 0a48 01DD     		ble	.L289
1495:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4331              		.loc 1 1495 0
 4332 0a4a 6423     		movs	r3, #100
 4333 0a4c FB65     		str	r3, [r7, #92]
 4334              	.L289:
1496:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4335              		.loc 1 1496 0
 4336 0a4e FB6D     		ldr	r3, [r7, #92]
 4337 0a50 13F1640F 		cmn	r3, #100
 4338 0a54 02DA     		bge	.L290
1497:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4339              		.loc 1 1497 0
 4340 0a56 6FF06303 		mvn	r3, #99
 4341 0a5a FB65     		str	r3, [r7, #92]
 4342              	.L290:
1498:..\src/interruptions.c ****     
1499:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4343              		.loc 1 1499 0
 4344 0a5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4345 0a5e 0E49     		ldr	r1, .L325+40
 4346 0a60 FA6D     		ldr	r2, [r7, #92]
 4347 0a62 41F82320 		str	r2, [r1, r3, lsl #2]
1500:..\src/interruptions.c **** 	
1501:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4348              		.loc 1 1501 0
 4349 0a66 FB6D     		ldr	r3, [r7, #92]
 4350 0a68 002B     		cmp	r3, #0
 4351 0a6a 17DB     		blt	.L291
 4352              		.loc 1 1501 0 is_stmt 0 discriminator 1
 4353 0a6c 0122     		movs	r2, #1
 4354 0a6e 17E0     		b	.L292
 4355              	.L326:
 4356              		.align	2
 4357              	.L325:
 4358 0a70 00000000 		.word	g_ref
 4359 0a74 00000000 		.word	tension_valid
 4360 0a78 00000000 		.word	g_meas
 4361 0a7c C4000000 		.word	curr_error_sum.10494
 4362 0a80 A0860100 		.word	100000
 4363 0a84 6079FEFF 		.word	-100000
 4364 0a88 CC000000 		.word	prev_curr_err.10496
 4365 0a8c C0000000 		.word	motor_dir.10498
 4366 0a90 1F85EB51 		.word	1374389535
 4367 0a94 00000000 		.word	dev_pwm_limit
 4368 0a98 D4000000 		.word	prev_pwm.10497
 4369              	.L291:
 4370              		.loc 1 1501 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 106


 4371 0a9c 4FF0FF32 		mov	r2, #-1
 4372              	.L292:
 4373              		.loc 1 1501 0 discriminator 4
 4374 0aa0 834B     		ldr	r3, .L327
 4375 0aa2 1A70     		strb	r2, [r3]
1502:..\src/interruptions.c ****     
1503:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4376              		.loc 1 1503 0 is_stmt 1 discriminator 4
 4377 0aa4 3B6D     		ldr	r3, [r7, #80]
 4378 0aa6 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4379 0aaa 012B     		cmp	r3, #1
 4380 0aac 40F0AA80 		bne	.L293
1504:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1505:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4381              		.loc 1 1505 0
 4382 0ab0 3B6D     		ldr	r3, [r7, #80]
 4383 0ab2 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4384 0ab6 012B     		cmp	r3, #1
 4385 0ab8 00F09F80 		beq	.L294
 4386              		.loc 1 1505 0 is_stmt 0 discriminator 1
 4387 0abc 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4388 0ac0 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4389 0ac2 7C48     		ldr	r0, .L327+4
 4390 0ac4 1346     		mov	r3, r2
 4391 0ac6 5B00     		lsls	r3, r3, #1
 4392 0ac8 1344     		add	r3, r3, r2
 4393 0aca 9B00     		lsls	r3, r3, #2
 4394 0acc 1344     		add	r3, r3, r2
 4395 0ace 0B44     		add	r3, r3, r1
 4396 0ad0 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4397 0ad4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4398 0ad8 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4399 0ada 774C     		ldr	r4, .L327+8
 4400 0adc 1346     		mov	r3, r2
 4401 0ade 5B00     		lsls	r3, r3, #1
 4402 0ae0 1344     		add	r3, r3, r2
 4403 0ae2 9B00     		lsls	r3, r3, #2
 4404 0ae4 1344     		add	r3, r3, r2
 4405 0ae6 0344     		add	r3, r3, r0
 4406 0ae8 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4407 0aec CB1A     		subs	r3, r1, r3
 4408 0aee 312B     		cmp	r3, #49
 4409 0af0 00F38380 		bgt	.L294
1506:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4410              		.loc 1 1506 0 is_stmt 1 discriminator 2
 4411 0af4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4412 0af8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4413 0afa 6E48     		ldr	r0, .L327+4
 4414 0afc 1346     		mov	r3, r2
 4415 0afe 5B00     		lsls	r3, r3, #1
 4416 0b00 1344     		add	r3, r3, r2
 4417 0b02 9B00     		lsls	r3, r3, #2
 4418 0b04 1344     		add	r3, r3, r2
 4419 0b06 0B44     		add	r3, r3, r1
 4420 0b08 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4421 0b0c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4422 0b10 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 107


 4423 0b12 694C     		ldr	r4, .L327+8
 4424 0b14 1346     		mov	r3, r2
 4425 0b16 5B00     		lsls	r3, r3, #1
 4426 0b18 1344     		add	r3, r3, r2
 4427 0b1a 9B00     		lsls	r3, r3, #2
 4428 0b1c 1344     		add	r3, r3, r2
 4429 0b1e 0344     		add	r3, r3, r0
 4430 0b20 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4431 0b24 CB1A     		subs	r3, r1, r3
1505:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4432              		.loc 1 1505 0 discriminator 2
 4433 0b26 13F1310F 		cmn	r3, #49
 4434 0b2a 66DB     		blt	.L294
1507:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4435              		.loc 1 1507 0
 4436 0b2c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4437 0b2e 634A     		ldr	r2, .L327+12
 4438 0b30 1B01     		lsls	r3, r3, #4
 4439 0b32 1344     		add	r3, r3, r2
 4440 0b34 1A68     		ldr	r2, [r3]
 4441 0b36 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4442 0b38 6149     		ldr	r1, .L327+16
 4443 0b3a 1B01     		lsls	r3, r3, #4
 4444 0b3c 0B44     		add	r3, r3, r1
 4445 0b3e 1B68     		ldr	r3, [r3]
 4446 0b40 D31A     		subs	r3, r2, r3
1506:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4447              		.loc 1 1506 0
 4448 0b42 632B     		cmp	r3, #99
 4449 0b44 59DC     		bgt	.L294
 4450              		.loc 1 1507 0
 4451 0b46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4452 0b48 5C4A     		ldr	r2, .L327+12
 4453 0b4a 1B01     		lsls	r3, r3, #4
 4454 0b4c 1344     		add	r3, r3, r2
 4455 0b4e 1A68     		ldr	r2, [r3]
 4456 0b50 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4457 0b52 5B49     		ldr	r1, .L327+16
 4458 0b54 1B01     		lsls	r3, r3, #4
 4459 0b56 0B44     		add	r3, r3, r1
 4460 0b58 1B68     		ldr	r3, [r3]
 4461 0b5a D31A     		subs	r3, r2, r3
 4462 0b5c 13F1630F 		cmn	r3, #99
 4463 0b60 4BDB     		blt	.L294
1508:..\src/interruptions.c ****             position_counter[idx]++;
 4464              		.loc 1 1508 0
 4465 0b62 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4466 0b64 574A     		ldr	r2, .L327+20
 4467 0b66 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4468 0b6a 0132     		adds	r2, r2, #1
 4469 0b6c 5549     		ldr	r1, .L327+20
 4470 0b6e 41F82320 		str	r2, [r1, r3, lsl #2]
1509:..\src/interruptions.c ****             
1510:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4471              		.loc 1 1510 0
 4472 0b72 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4473 0b74 534A     		ldr	r2, .L327+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 108


 4474 0b76 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4475 0b7a F92B     		cmp	r3, #249
 4476 0b7c 42D9     		bls	.L293
1511:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4477              		.loc 1 1511 0
 4478 0b7e 3B6D     		ldr	r3, [r7, #80]
 4479 0b80 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4480 0b84 002B     		cmp	r3, #0
 4481 0b86 10D1     		bne	.L296
 4482              		.loc 1 1511 0 is_stmt 0 discriminator 1
 4483 0b88 4F4B     		ldr	r3, .L327+24
 4484 0b8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4485 0b8c 002B     		cmp	r3, #0
 4486 0b8e 0CD1     		bne	.L296
1512:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4487              		.loc 1 1512 0 is_stmt 1
 4488 0b90 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4489 0b92 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4490 0b96 4849     		ldr	r1, .L327+8
 4491 0b98 3420     		movs	r0, #52
 4492 0b9a 00FB02F2 		mul	r2, r0, r2
 4493 0b9e 0A44     		add	r2, r2, r1
 4494 0ba0 1268     		ldr	r2, [r2]
 4495 0ba2 4A49     		ldr	r1, .L327+28
 4496 0ba4 1B01     		lsls	r3, r3, #4
 4497 0ba6 0B44     		add	r3, r3, r1
 4498 0ba8 1A60     		str	r2, [r3]
 4499              	.L296:
1513:..\src/interruptions.c ****                 }
1514:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4500              		.loc 1 1514 0
 4501 0baa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4502 0bac 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4503 0bb0 4149     		ldr	r1, .L327+8
 4504 0bb2 3420     		movs	r0, #52
 4505 0bb4 00FB02F2 		mul	r2, r0, r2
 4506 0bb8 0A44     		add	r2, r2, r1
 4507 0bba 1268     		ldr	r2, [r2]
 4508 0bbc 4049     		ldr	r1, .L327+16
 4509 0bbe 1B01     		lsls	r3, r3, #4
 4510 0bc0 0B44     		add	r3, r3, r1
 4511 0bc2 1A60     		str	r2, [r3]
1515:..\src/interruptions.c ****                 
1516:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4512              		.loc 1 1516 0
 4513 0bc4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4514 0bc6 3F4A     		ldr	r2, .L327+20
 4515 0bc8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4516 0bcc FA2B     		cmp	r3, #250
 4517 0bce 11D1     		bne	.L297
1517:..\src/interruptions.c ****                     // To do only once
1518:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4518              		.loc 1 1518 0
 4519 0bd0 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 4520 0bd4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4521 0bd8 3749     		ldr	r1, .L327+8
 4522 0bda 3420     		movs	r0, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 109


 4523 0bdc 00FB02F2 		mul	r2, r0, r2
 4524 0be0 0A44     		add	r2, r2, r1
 4525 0be2 0C32     		adds	r2, r2, #12
 4526 0be4 1268     		ldr	r2, [r2]
 4527 0be6 3449     		ldr	r1, .L327+8
 4528 0be8 3420     		movs	r0, #52
 4529 0bea 00FB03F3 		mul	r3, r0, r3
 4530 0bee 0B44     		add	r3, r3, r1
 4531 0bf0 1433     		adds	r3, r3, #20
 4532 0bf2 1A60     		str	r2, [r3]
 4533              	.L297:
1519:..\src/interruptions.c ****                 }
1520:..\src/interruptions.c ****                 pwm_input = 0;            
 4534              		.loc 1 1520 0
 4535 0bf4 0023     		movs	r3, #0
 4536 0bf6 FB65     		str	r3, [r7, #92]
1510:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4537              		.loc 1 1510 0
 4538 0bf8 04E0     		b	.L293
 4539              	.L294:
1521:..\src/interruptions.c ****             }
1522:..\src/interruptions.c ****         }
1523:..\src/interruptions.c ****         else {
1524:..\src/interruptions.c ****             position_counter[idx] = 0;
 4540              		.loc 1 1524 0
 4541 0bfa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4542 0bfc 314A     		ldr	r2, .L327+20
 4543 0bfe 0021     		movs	r1, #0
 4544 0c00 42F82310 		str	r1, [r2, r3, lsl #2]
 4545              	.L293:
1525:..\src/interruptions.c ****         }
1526:..\src/interruptions.c ****     }
1527:..\src/interruptions.c ****     
1528:..\src/interruptions.c ****     // Set motor direction and write pwm value
1529:..\src/interruptions.c ****     switch (idx) {
 4546              		.loc 1 1529 0
 4547 0c04 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4548 0c06 002B     		cmp	r3, #0
 4549 0c08 02D0     		beq	.L299
 4550 0c0a 012B     		cmp	r3, #1
 4551 0c0c 26D0     		beq	.L300
1530:..\src/interruptions.c ****         case 0:         // Motor 1
1531:..\src/interruptions.c ****             if (motor_dir[idx])
1532:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1533:..\src/interruptions.c ****             else
1534:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1535:..\src/interruptions.c ****             
1536:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1537:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1538:..\src/interruptions.c ****             }
1539:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1540:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1541:..\src/interruptions.c ****             }
1542:..\src/interruptions.c ****             
1543:..\src/interruptions.c ****             break;
1544:..\src/interruptions.c ****         case 1:         // Motor 2
1545:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 110


1546:..\src/interruptions.c ****             if (motor_dir[idx])
1547:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1548:..\src/interruptions.c ****             else
1549:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1550:..\src/interruptions.c ****             
1551:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1552:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1553:..\src/interruptions.c ****             }
1554:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1555:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1556:..\src/interruptions.c ****             }
1557:..\src/interruptions.c ****             
1558:..\src/interruptions.c ****             break;
1559:..\src/interruptions.c ****         default:
1560:..\src/interruptions.c ****             break;
 4552              		.loc 1 1560 0
 4553 0c0e 4BE0     		b	.L305
 4554              	.L299:
1531:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4555              		.loc 1 1531 0
 4556 0c10 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4557 0c12 2F4A     		ldr	r2, .L327+32
 4558 0c14 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4559 0c16 002B     		cmp	r3, #0
 4560 0c18 03D0     		beq	.L301
1532:..\src/interruptions.c ****             else
 4561              		.loc 1 1532 0
 4562 0c1a 0120     		movs	r0, #1
 4563 0c1c FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4564 0c20 02E0     		b	.L302
 4565              	.L301:
1534:..\src/interruptions.c ****             
 4566              		.loc 1 1534 0
 4567 0c22 0020     		movs	r0, #0
 4568 0c24 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4569              	.L302:
1536:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4570              		.loc 1 1536 0
 4571 0c28 3B6D     		ldr	r3, [r7, #80]
 4572 0c2a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4573 0c2e 012B     		cmp	r3, #1
 4574 0c30 0BD1     		bne	.L303
1537:..\src/interruptions.c ****             }
 4575              		.loc 1 1537 0
 4576 0c32 FB6D     		ldr	r3, [r7, #92]
 4577 0c34 002B     		cmp	r3, #0
 4578 0c36 B8BF     		it	lt
 4579 0c38 5B42     		rsblt	r3, r3, #0
 4580 0c3a DBB2     		uxtb	r3, r3
 4581 0c3c C3F16403 		rsb	r3, r3, #100
 4582 0c40 DBB2     		uxtb	r3, r3
 4583 0c42 1846     		mov	r0, r3
 4584 0c44 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1543:..\src/interruptions.c ****         case 1:         // Motor 2
 4585              		.loc 1 1543 0
 4586 0c48 2EE0     		b	.L305
 4587              	.L303:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 111


1540:..\src/interruptions.c ****             }
 4588              		.loc 1 1540 0
 4589 0c4a FB6D     		ldr	r3, [r7, #92]
 4590 0c4c 002B     		cmp	r3, #0
 4591 0c4e B8BF     		it	lt
 4592 0c50 5B42     		rsblt	r3, r3, #0
 4593 0c52 DBB2     		uxtb	r3, r3
 4594 0c54 1846     		mov	r0, r3
 4595 0c56 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1543:..\src/interruptions.c ****         case 1:         // Motor 2
 4596              		.loc 1 1543 0
 4597 0c5a 25E0     		b	.L305
 4598              	.L300:
1546:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4599              		.loc 1 1546 0
 4600 0c5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4601 0c5e 1C4A     		ldr	r2, .L327+32
 4602 0c60 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4603 0c62 002B     		cmp	r3, #0
 4604 0c64 03D0     		beq	.L306
1547:..\src/interruptions.c ****             else
 4605              		.loc 1 1547 0
 4606 0c66 0120     		movs	r0, #1
 4607 0c68 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4608 0c6c 02E0     		b	.L307
 4609              	.L306:
1549:..\src/interruptions.c ****             
 4610              		.loc 1 1549 0
 4611 0c6e 0020     		movs	r0, #0
 4612 0c70 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4613              	.L307:
1551:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4614              		.loc 1 1551 0
 4615 0c74 3B6D     		ldr	r3, [r7, #80]
 4616 0c76 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4617 0c7a 012B     		cmp	r3, #1
 4618 0c7c 0BD1     		bne	.L308
1552:..\src/interruptions.c ****             }
 4619              		.loc 1 1552 0
 4620 0c7e FB6D     		ldr	r3, [r7, #92]
 4621 0c80 002B     		cmp	r3, #0
 4622 0c82 B8BF     		it	lt
 4623 0c84 5B42     		rsblt	r3, r3, #0
 4624 0c86 DBB2     		uxtb	r3, r3
 4625 0c88 C3F16403 		rsb	r3, r3, #100
 4626 0c8c DBB2     		uxtb	r3, r3
 4627 0c8e 1846     		mov	r0, r3
 4628 0c90 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1558:..\src/interruptions.c ****         default:
 4629              		.loc 1 1558 0
 4630 0c94 07E0     		b	.L318
 4631              	.L308:
1555:..\src/interruptions.c ****             }
 4632              		.loc 1 1555 0
 4633 0c96 FB6D     		ldr	r3, [r7, #92]
 4634 0c98 002B     		cmp	r3, #0
 4635 0c9a B8BF     		it	lt
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 112


 4636 0c9c 5B42     		rsblt	r3, r3, #0
 4637 0c9e DBB2     		uxtb	r3, r3
 4638 0ca0 1846     		mov	r0, r3
 4639 0ca2 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4640              	.L318:
1558:..\src/interruptions.c ****         default:
 4641              		.loc 1 1558 0
 4642 0ca6 00BF     		nop
 4643              	.L305:
1561:..\src/interruptions.c ****     }
1562:..\src/interruptions.c ****     
1563:..\src/interruptions.c **** }
 4644              		.loc 1 1563 0
 4645 0ca8 00BF     		nop
 4646 0caa 6437     		adds	r7, r7, #100
 4647              		.cfi_def_cfa_offset 12
 4648 0cac BD46     		mov	sp, r7
 4649              		.cfi_def_cfa_register 13
 4650              		@ sp needed
 4651 0cae 90BD     		pop	{r4, r7, pc}
 4652              	.L328:
 4653              		.align	2
 4654              	.L327:
 4655 0cb0 00000000 		.word	pwm_sign
 4656 0cb4 00000000 		.word	g_measOld
 4657 0cb8 00000000 		.word	g_meas
 4658 0cbc 00000000 		.word	g_refOld
 4659 0cc0 00000000 		.word	g_ref
 4660 0cc4 DC000000 		.word	position_counter.10499
 4661 0cc8 00000000 		.word	change_ext_ref_flag
 4662 0ccc 00000000 		.word	g_refNew
 4663 0cd0 C0000000 		.word	motor_dir.10498
 4664              		.cfi_endproc
 4665              	.LFE69:
 4666              		.size	motor_control_generic, .-motor_control_generic
 4667              		.global	__aeabi_fcmpeq
 4668              		.global	__aeabi_fmul
 4669              		.global	__aeabi_f2iz
 4670              		.global	__aeabi_fcmplt
 4671              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4672              		.align	2
 4673              		.global	encoder_reading_SPI
 4674              		.thumb
 4675              		.thumb_func
 4676              		.type	encoder_reading_SPI, %function
 4677              	encoder_reading_SPI:
 4678              	.LFB70:
1564:..\src/interruptions.c **** 
1565:..\src/interruptions.c **** //==============================================================================
1566:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1567:..\src/interruptions.c **** //==============================================================================
1568:..\src/interruptions.c **** 
1569:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4679              		.loc 1 1569 0
 4680              		.cfi_startproc
 4681              		@ args = 0, pretend = 0, frame = 48
 4682              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 113


 4683 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4684              		.cfi_def_cfa_offset 20
 4685              		.cfi_offset 4, -20
 4686              		.cfi_offset 5, -16
 4687              		.cfi_offset 6, -12
 4688              		.cfi_offset 7, -8
 4689              		.cfi_offset 14, -4
 4690 0002 8FB0     		sub	sp, sp, #60
 4691              		.cfi_def_cfa_offset 80
 4692 0004 02AF     		add	r7, sp, #8
 4693              		.cfi_def_cfa 7, 72
 4694 0006 0346     		mov	r3, r0
 4695 0008 0A46     		mov	r2, r1
 4696 000a FB71     		strb	r3, [r7, #7]
 4697 000c 1346     		mov	r3, r2
 4698 000e BB71     		strb	r3, [r7, #6]
1570:..\src/interruptions.c **** 
1571:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4699              		.loc 1 1571 0
 4700 0010 0023     		movs	r3, #0
 4701 0012 87F82F30 		strb	r3, [r7, #47]
1572:..\src/interruptions.c ****     
1573:..\src/interruptions.c ****     // Encoder Variables  
1574:..\src/interruptions.c ****     uint8 jj;
1575:..\src/interruptions.c ****      
1576:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1577:..\src/interruptions.c ****     int16 tmp_value_encoder;
1578:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1579:..\src/interruptions.c ****     int32 value_encoder;
1580:..\src/interruptions.c ****     int32 speed_encoder;
1581:..\src/interruptions.c ****     int32 value_diff;
1582:..\src/interruptions.c **** 	int8 init_rot = 0;
 4702              		.loc 1 1582 0
 4703 0016 0023     		movs	r3, #0
 4704 0018 87F82730 		strb	r3, [r7, #39]
1583:..\src/interruptions.c **** 
1584:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1585:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1586:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1587:..\src/interruptions.c ****     
1588:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1589:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1590:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1591:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1592:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1593:..\src/interruptions.c **** 
1594:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1595:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1596:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1597:..\src/interruptions.c **** //    
1598:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4705              		.loc 1 1598 0
 4706 001c 8E4B     		ldr	r3, .L365
 4707 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4708 0020 002B     		cmp	r3, #0
 4709 0022 18D0     		beq	.L330
1599:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 114


 4710              		.loc 1 1599 0
 4711 0024 0323     		movs	r3, #3
 4712 0026 87F82E30 		strb	r3, [r7, #46]
 4713 002a 0AE0     		b	.L331
 4714              	.L332:
1600:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4715              		.loc 1 1600 0
 4716 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4717 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4718 0032 8A48     		ldr	r0, .L365+4
 4719 0034 1346     		mov	r3, r2
 4720 0036 5B00     		lsls	r3, r3, #1
 4721 0038 1344     		add	r3, r3, r2
 4722 003a 0B44     		add	r3, r3, r1
 4723 003c 0022     		movs	r2, #0
 4724 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4725              	.L331:
1599:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4726              		.loc 1 1599 0 discriminator 1
 4727 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4728 0046 5A1E     		subs	r2, r3, #1
 4729 0048 87F82E20 		strb	r2, [r7, #46]
 4730 004c 002B     		cmp	r3, #0
 4731 004e EDD1     		bne	.L332
1601:..\src/interruptions.c ****         
1602:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4732              		.loc 1 1602 0
 4733 0050 814B     		ldr	r3, .L365
 4734 0052 0022     		movs	r2, #0
 4735 0054 1A70     		strb	r2, [r3]
 4736              	.L330:
1603:..\src/interruptions.c ****     }
1604:..\src/interruptions.c **** 
1605:..\src/interruptions.c ****     //======================================================     reading sensors
1606:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4737              		.loc 1 1606 0
 4738 0056 0023     		movs	r3, #0
 4739 0058 87F82F30 		strb	r3, [r7, #47]
 4740 005c 0DE0     		b	.L333
 4741              	.L334:
1607:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4742              		.loc 1 1607 0 discriminator 3
 4743 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4744 0062 9B00     		lsls	r3, r3, #2
 4745 0064 07F13002 		add	r2, r7, #48
 4746 0068 1344     		add	r3, r3, r2
 4747 006a 0022     		movs	r2, #0
 4748 006c 43F8282C 		str	r2, [r3, #-40]
1606:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4749              		.loc 1 1606 0 discriminator 3
 4750 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4751 0074 0133     		adds	r3, r3, #1
 4752 0076 87F82F30 		strb	r3, [r7, #47]
 4753              	.L333:
1606:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4754              		.loc 1 1606 0 is_stmt 0 discriminator 1
 4755 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 115


 4756 007e 022B     		cmp	r3, #2
 4757 0080 EDD9     		bls	.L334
1608:..\src/interruptions.c ****     }   
1609:..\src/interruptions.c ****     
1610:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4758              		.loc 1 1610 0 is_stmt 1
 4759 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4760 0084 764A     		ldr	r2, .L365+8
 4761 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4762 0088 1A46     		mov	r2, r3
 4763 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4764 008c 1946     		mov	r1, r3
 4765 008e 1046     		mov	r0, r2
 4766 0090 FFF7FEFF 		bl	ReadEncoderLine
 4767              	.LBB3:
1611:..\src/interruptions.c ****                                                                         //CS1 for left hand
1612:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4768              		.loc 1 1612 0
 4769 0094 0023     		movs	r3, #0
 4770 0096 3B62     		str	r3, [r7, #32]
 4771 0098 2EE0     		b	.L335
 4772              	.L337:
1613:..\src/interruptions.c ****         
1614:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1615:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4773              		.loc 1 1615 0
 4774 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4775 009c 7149     		ldr	r1, .L365+12
 4776 009e 1346     		mov	r3, r2
 4777 00a0 5B00     		lsls	r3, r3, #1
 4778 00a2 1344     		add	r3, r3, r2
 4779 00a4 1B01     		lsls	r3, r3, #4
 4780 00a6 CA18     		adds	r2, r1, r3
 4781 00a8 3B6A     		ldr	r3, [r7, #32]
 4782 00aa 1344     		add	r3, r3, r2
 4783 00ac 03F2B113 		addw	r3, r3, #433
 4784 00b0 1B78     		ldrb	r3, [r3]
 4785 00b2 87F82F30 		strb	r3, [r7, #47]
1616:..\src/interruptions.c ****         
1617:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4786              		.loc 1 1617 0
 4787 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4788 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4789 00bc 6A48     		ldr	r0, .L365+16
 4790 00be 1346     		mov	r3, r2
 4791 00c0 9B00     		lsls	r3, r3, #2
 4792 00c2 1344     		add	r3, r3, r2
 4793 00c4 0344     		add	r3, r3, r0
 4794 00c6 0B44     		add	r3, r3, r1
 4795 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4796 00ca 0F2B     		cmp	r3, #15
 4797 00cc 11D9     		bls	.L336
1618:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4798              		.loc 1 1618 0
 4799 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4800 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4801 00d4 6548     		ldr	r0, .L365+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 116


 4802 00d6 1346     		mov	r3, r2
 4803 00d8 9B00     		lsls	r3, r3, #2
 4804 00da 1344     		add	r3, r3, r2
 4805 00dc 0B44     		add	r3, r3, r1
 4806 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4807 00e2 1A46     		mov	r2, r3
 4808 00e4 3B6A     		ldr	r3, [r7, #32]
 4809 00e6 9B00     		lsls	r3, r3, #2
 4810 00e8 07F13001 		add	r1, r7, #48
 4811 00ec 0B44     		add	r3, r3, r1
 4812 00ee 43F8282C 		str	r2, [r3, #-40]
 4813              	.L336:
1612:..\src/interruptions.c ****         
 4814              		.loc 1 1612 0 discriminator 2
 4815 00f2 3B6A     		ldr	r3, [r7, #32]
 4816 00f4 0133     		adds	r3, r3, #1
 4817 00f6 3B62     		str	r3, [r7, #32]
 4818              	.L335:
1612:..\src/interruptions.c ****         
 4819              		.loc 1 1612 0 is_stmt 0 discriminator 1
 4820 00f8 3B6A     		ldr	r3, [r7, #32]
 4821 00fa 022B     		cmp	r3, #2
 4822 00fc CDDD     		ble	.L337
 4823              	.LBE3:
1619:..\src/interruptions.c ****         }
1620:..\src/interruptions.c ****     }
1621:..\src/interruptions.c ****     
1622:..\src/interruptions.c ****     // S = SIGN BIT
1623:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1624:..\src/interruptions.c ****     // 0 = 0 BIT
1625:..\src/interruptions.c ****     // C = CONTROL BIT
1626:..\src/interruptions.c ****     
1627:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4824              		.loc 1 1627 0 is_stmt 1
 4825 00fe 0023     		movs	r3, #0
 4826 0100 87F82F30 		strb	r3, [r7, #47]
 4827 0104 33E3     		b	.L338
 4828              	.L358:
1628:..\src/interruptions.c ****         
1629:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4829              		.loc 1 1629 0
 4830 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 4831 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4832 010e 9B00     		lsls	r3, r3, #2
 4833 0110 07F13001 		add	r1, r7, #48
 4834 0114 0B44     		add	r3, r3, r1
 4835 0116 53F8283C 		ldr	r3, [r3, #-40]
 4836 011a 5549     		ldr	r1, .L365+24
 4837 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1630:..\src/interruptions.c ****         
1631:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4838              		.loc 1 1631 0
 4839 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4840 0124 9B00     		lsls	r3, r3, #2
 4841 0126 07F13002 		add	r2, r7, #48
 4842 012a 1344     		add	r3, r3, r2
 4843 012c 53F8283C 		ldr	r3, [r3, #-40]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 117


 4844 0130 99B2     		uxth	r1, r3
 4845 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4846 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4847 0138 4E4C     		ldr	r4, .L365+28
 4848 013a 1346     		mov	r3, r2
 4849 013c 5B00     		lsls	r3, r3, #1
 4850 013e 1344     		add	r3, r3, r2
 4851 0140 9B00     		lsls	r3, r3, #2
 4852 0142 0344     		add	r3, r3, r0
 4853 0144 6633     		adds	r3, r3, #102
 4854 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4855 014a 9BB2     		uxth	r3, r3
 4856 014c CB1A     		subs	r3, r1, r3
 4857 014e 9BB2     		uxth	r3, r3
 4858 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1632:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4859              		.loc 1 1632 0
 4860 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4861 0156 002B     		cmp	r3, #0
 4862 0158 04DA     		bge	.L339
1633:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4863              		.loc 1 1633 0
 4864 015a BB8D     		ldrh	r3, [r7, #44]
 4865 015c 03F58053 		add	r3, r3, #4096
 4866 0160 9BB2     		uxth	r3, r3
 4867 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4868              	.L339:
1634:..\src/interruptions.c ****         }       // Range [0, 4096]
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4869              		.loc 1 1636 0
 4870 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4871 0168 B3F5006F 		cmp	r3, #2048
 4872 016c 04DB     		blt	.L340
1637:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4873              		.loc 1 1637 0
 4874 016e BB8D     		ldrh	r3, [r7, #44]
 4875 0170 A3F58053 		sub	r3, r3, #4096
 4876 0174 9BB2     		uxth	r3, r3
 4877 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4878              	.L340:
1638:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1639:..\src/interruptions.c **** 
1640:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4879              		.loc 1 1640 0
 4880 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4881 017c 1B01     		lsls	r3, r3, #4
 4882 017e FB61     		str	r3, [r7, #28]
1641:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4883              		.loc 1 1641 0
 4884 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4885 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4886 0186 3C48     		ldr	r0, .L365+32
 4887 0188 1346     		mov	r3, r2
 4888 018a 5B00     		lsls	r3, r3, #1
 4889 018c 1344     		add	r3, r3, r2
 4890 018e 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 118


 4891 0190 FA69     		ldr	r2, [r7, #28]
 4892 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1642:..\src/interruptions.c **** 
1643:..\src/interruptions.c ****         // Initialize last_value_encoder
1644:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4893              		.loc 1 1644 0
 4894 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4895 0198 384A     		ldr	r2, .L365+36
 4896 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4897 019c 002B     		cmp	r3, #0
 4898 019e 12D0     		beq	.L341
1645:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4899              		.loc 1 1645 0
 4900 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4901 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4902 01a6 2D48     		ldr	r0, .L365+4
 4903 01a8 1346     		mov	r3, r2
 4904 01aa 5B00     		lsls	r3, r3, #1
 4905 01ac 1344     		add	r3, r3, r2
 4906 01ae 0B44     		add	r3, r3, r1
 4907 01b0 FA69     		ldr	r2, [r7, #28]
 4908 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1646:..\src/interruptions.c ****             if (index == 2)
 4909              		.loc 1 1646 0
 4910 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4911 01ba 022B     		cmp	r3, #2
 4912 01bc 03D1     		bne	.L341
1647:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 4913              		.loc 1 1647 0
 4914 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4915 01c0 2E4A     		ldr	r2, .L365+36
 4916 01c2 0021     		movs	r1, #0
 4917 01c4 D154     		strb	r1, [r2, r3]
 4918              	.L341:
1648:..\src/interruptions.c ****         }
1649:..\src/interruptions.c **** 
1650:..\src/interruptions.c ****         // Take care of rotations
1651:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 4919              		.loc 1 1651 0
 4920 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4921 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4922 01cc 2348     		ldr	r0, .L365+4
 4923 01ce 1346     		mov	r3, r2
 4924 01d0 5B00     		lsls	r3, r3, #1
 4925 01d2 1344     		add	r3, r3, r2
 4926 01d4 0B44     		add	r3, r3, r1
 4927 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4928 01da FA69     		ldr	r2, [r7, #28]
 4929 01dc D31A     		subs	r3, r2, r3
 4930 01de BB61     		str	r3, [r7, #24]
1652:..\src/interruptions.c **** 
1653:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1654:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1655:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1656:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1657:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1658:..\src/interruptions.c ****         //                                               |           |
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 119


1659:..\src/interruptions.c ****         //                                           24575           -24576
1660:..\src/interruptions.c ****         //                                               |___________|
1661:..\src/interruptions.c ****         //                                                   49152
1662:..\src/interruptions.c **** 
1663:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1664:..\src/interruptions.c ****         // and update the variable only if the difference between
1665:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1666:..\src/interruptions.c **** 
1667:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1668:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1669:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1670:..\src/interruptions.c **** 
1671:..\src/interruptions.c ****         if (value_diff > 49152)
 4931              		.loc 1 1671 0
 4932 01e0 BB69     		ldr	r3, [r7, #24]
 4933 01e2 B3F5404F 		cmp	r3, #49152
 4934 01e6 19DD     		ble	.L342
1672:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 4935              		.loc 1 1672 0
 4936 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4937 01ea 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4938 01ee 2448     		ldr	r0, .L365+40
 4939 01f0 3421     		movs	r1, #52
 4940 01f2 01FB02F1 		mul	r1, r1, r2
 4941 01f6 0144     		add	r1, r1, r0
 4942 01f8 1944     		add	r1, r1, r3
 4943 01fa 1831     		adds	r1, r1, #24
 4944 01fc 91F90010 		ldrsb	r1, [r1]
 4945 0200 C9B2     		uxtb	r1, r1
 4946 0202 0139     		subs	r1, r1, #1
 4947 0204 C9B2     		uxtb	r1, r1
 4948 0206 4CB2     		sxtb	r4, r1
 4949 0208 1D49     		ldr	r1, .L365+40
 4950 020a 3420     		movs	r0, #52
 4951 020c 00FB02F2 		mul	r2, r0, r2
 4952 0210 0A44     		add	r2, r2, r1
 4953 0212 1344     		add	r3, r3, r2
 4954 0214 1833     		adds	r3, r3, #24
 4955 0216 2246     		mov	r2, r4
 4956 0218 1A70     		strb	r2, [r3]
 4957 021a 5BE0     		b	.L343
 4958              	.L342:
1673:..\src/interruptions.c ****         else{ 
1674:..\src/interruptions.c ****             if (value_diff < -49152)
 4959              		.loc 1 1674 0
 4960 021c BB69     		ldr	r3, [r7, #24]
 4961 021e 13F5404F 		cmn	r3, #49152
 4962 0222 2FDA     		bge	.L344
1675:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 4963              		.loc 1 1675 0
 4964 0224 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4965 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4966 022a 1548     		ldr	r0, .L365+40
 4967 022c 3421     		movs	r1, #52
 4968 022e 01FB02F1 		mul	r1, r1, r2
 4969 0232 0144     		add	r1, r1, r0
 4970 0234 1944     		add	r1, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 120


 4971 0236 1831     		adds	r1, r1, #24
 4972 0238 91F90010 		ldrsb	r1, [r1]
 4973 023c C9B2     		uxtb	r1, r1
 4974 023e 0131     		adds	r1, r1, #1
 4975 0240 C9B2     		uxtb	r1, r1
 4976 0242 4CB2     		sxtb	r4, r1
 4977 0244 0E49     		ldr	r1, .L365+40
 4978 0246 3420     		movs	r0, #52
 4979 0248 00FB02F2 		mul	r2, r0, r2
 4980 024c 0A44     		add	r2, r2, r1
 4981 024e 1344     		add	r3, r3, r2
 4982 0250 1833     		adds	r3, r3, #24
 4983 0252 2246     		mov	r2, r4
 4984 0254 1A70     		strb	r2, [r3]
 4985 0256 3DE0     		b	.L343
 4986              	.L366:
 4987              		.align	2
 4988              	.L365:
 4989 0258 00000000 		.word	reset_last_value_flag
 4990 025c E4000000 		.word	last_value_encoder.10540
 4991 0260 00000000 		.word	N_Encoder_Line_Connected
 4992 0264 00000000 		.word	c_mem
 4993 0268 00000000 		.word	Encoder_Check
 4994 026c 00000000 		.word	Encoder_Value
 4995 0270 00000000 		.word	data_encoder_raw
 4996 0274 00000000 		.word	g_mem
 4997 0278 FC000000 		.word	comp_value_encoder.10541
 4998 027c 04000000 		.word	only_first_time.10543
 4999 0280 00000000 		.word	g_meas
 5000              	.L344:
1676:..\src/interruptions.c ****             else{
1677:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5001              		.loc 1 1677 0
 5002 0284 BB69     		ldr	r3, [r7, #24]
 5003 0286 002B     		cmp	r3, #0
 5004 0288 B8BF     		it	lt
 5005 028a 5B42     		rsblt	r3, r3, #0
 5006 028c B3F5804F 		cmp	r3, #16384
 5007 0290 20DD     		ble	.L343
1678:..\src/interruptions.c ****                     error[n_line][index]++;
 5008              		.loc 1 1678 0
 5009 0292 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5010 0294 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5011 0298 9B48     		ldr	r0, .L367
 5012 029a 1346     		mov	r3, r2
 5013 029c 5B00     		lsls	r3, r3, #1
 5014 029e 1344     		add	r3, r3, r2
 5015 02a0 0344     		add	r3, r3, r0
 5016 02a2 0B44     		add	r3, r3, r1
 5017 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5018 02a6 0133     		adds	r3, r3, #1
 5019 02a8 DCB2     		uxtb	r4, r3
 5020 02aa 9748     		ldr	r0, .L367
 5021 02ac 1346     		mov	r3, r2
 5022 02ae 5B00     		lsls	r3, r3, #1
 5023 02b0 1344     		add	r3, r3, r2
 5024 02b2 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 121


 5025 02b4 0B44     		add	r3, r3, r1
 5026 02b6 2246     		mov	r2, r4
 5027 02b8 1A70     		strb	r2, [r3]
1679:..\src/interruptions.c ****                                 
1680:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5028              		.loc 1 1680 0
 5029 02ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5030 02bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5031 02c0 9148     		ldr	r0, .L367
 5032 02c2 1346     		mov	r3, r2
 5033 02c4 5B00     		lsls	r3, r3, #1
 5034 02c6 1344     		add	r3, r3, r2
 5035 02c8 0344     		add	r3, r3, r0
 5036 02ca 0B44     		add	r3, r3, r1
 5037 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5038 02ce 092B     		cmp	r3, #9
 5039 02d0 40F28C82 		bls	.L364
 5040              	.L343:
1681:..\src/interruptions.c ****                         // Discard
1682:..\src/interruptions.c ****                         return;
1683:..\src/interruptions.c ****                 }
1684:..\src/interruptions.c ****             }
1685:..\src/interruptions.c ****         }
1686:..\src/interruptions.c **** 
1687:..\src/interruptions.c ****         error[n_line][index] = 0;
 5041              		.loc 1 1687 0
 5042 02d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5043 02d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5044 02da 8B48     		ldr	r0, .L367
 5045 02dc 1346     		mov	r3, r2
 5046 02de 5B00     		lsls	r3, r3, #1
 5047 02e0 1344     		add	r3, r3, r2
 5048 02e2 0344     		add	r3, r3, r0
 5049 02e4 0B44     		add	r3, r3, r1
 5050 02e6 0022     		movs	r2, #0
 5051 02e8 1A70     		strb	r2, [r3]
1688:..\src/interruptions.c ****         
1689:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5052              		.loc 1 1689 0
 5053 02ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5054 02ec 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5055 02f0 8648     		ldr	r0, .L367+4
 5056 02f2 1346     		mov	r3, r2
 5057 02f4 5B00     		lsls	r3, r3, #1
 5058 02f6 1344     		add	r3, r3, r2
 5059 02f8 0B44     		add	r3, r3, r1
 5060 02fa FA69     		ldr	r2, [r7, #28]
 5061 02fc 40F82320 		str	r2, [r0, r3, lsl #2]
1690:..\src/interruptions.c **** 
1691:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5062              		.loc 1 1691 0
 5063 0300 FB69     		ldr	r3, [r7, #28]
 5064 0302 BB62     		str	r3, [r7, #40]
1692:..\src/interruptions.c **** 
1693:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5065              		.loc 1 1693 0
 5066 0304 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 122


 5067 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5068 030a 8149     		ldr	r1, .L367+8
 5069 030c 3420     		movs	r0, #52
 5070 030e 00FB02F2 		mul	r2, r0, r2
 5071 0312 0A44     		add	r2, r2, r1
 5072 0314 1344     		add	r3, r3, r2
 5073 0316 1833     		adds	r3, r3, #24
 5074 0318 93F90030 		ldrsb	r3, [r3]
 5075 031c 1B04     		lsls	r3, r3, #16
 5076 031e BA6A     		ldr	r2, [r7, #40]
 5077 0320 1344     		add	r3, r3, r2
 5078 0322 BB62     		str	r3, [r7, #40]
1694:..\src/interruptions.c ****         
1695:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5079              		.loc 1 1695 0
 5080 0324 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5081 0326 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5082 032a 7A48     		ldr	r0, .L367+12
 5083 032c 1346     		mov	r3, r2
 5084 032e 5B00     		lsls	r3, r3, #1
 5085 0330 1344     		add	r3, r3, r2
 5086 0332 9B00     		lsls	r3, r3, #2
 5087 0334 0B44     		add	r3, r3, r1
 5088 0336 6833     		adds	r3, r3, #104
 5089 0338 9B00     		lsls	r3, r3, #2
 5090 033a 0344     		add	r3, r3, r0
 5091 033c 5B68     		ldr	r3, [r3, #4]	@ float
 5092 033e 4FF07E51 		mov	r1, #1065353216
 5093 0342 1846     		mov	r0, r3
 5094 0344 FFF7FEFF 		bl	__aeabi_fcmpeq
 5095 0348 0346     		mov	r3, r0
 5096 034a 002B     		cmp	r3, #0
 5097 034c 1AD1     		bne	.L346
1696:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5098              		.loc 1 1696 0
 5099 034e B86A     		ldr	r0, [r7, #40]
 5100 0350 FFF7FEFF 		bl	__aeabi_i2f
 5101 0354 0446     		mov	r4, r0
 5102 0356 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5103 0358 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5104 035c 6D48     		ldr	r0, .L367+12
 5105 035e 1346     		mov	r3, r2
 5106 0360 5B00     		lsls	r3, r3, #1
 5107 0362 1344     		add	r3, r3, r2
 5108 0364 9B00     		lsls	r3, r3, #2
 5109 0366 0B44     		add	r3, r3, r1
 5110 0368 6833     		adds	r3, r3, #104
 5111 036a 9B00     		lsls	r3, r3, #2
 5112 036c 0344     		add	r3, r3, r0
 5113 036e 5B68     		ldr	r3, [r3, #4]	@ float
 5114 0370 1946     		mov	r1, r3
 5115 0372 2046     		mov	r0, r4
 5116 0374 FFF7FEFF 		bl	__aeabi_fmul
 5117 0378 0346     		mov	r3, r0
 5118 037a 1846     		mov	r0, r3
 5119 037c FFF7FEFF 		bl	__aeabi_f2iz
 5120 0380 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 123


 5121 0382 BB62     		str	r3, [r7, #40]
 5122              	.L346:
1697:..\src/interruptions.c ****         }
1698:..\src/interruptions.c **** 
1699:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5123              		.loc 1 1699 0
 5124 0384 634B     		ldr	r3, .L367+12
 5125 0386 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5126 038a 002B     		cmp	r3, #0
 5127 038c 0BD1     		bne	.L348
1700:..\src/interruptions.c ****             // Right / Left hand turn
1701:..\src/interruptions.c ****             if (index == 0) {
 5128              		.loc 1 1701 0
 5129 038e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5130 0392 002B     		cmp	r3, #0
 5131 0394 07D1     		bne	.L348
1702:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5132              		.loc 1 1702 0
 5133 0396 5F4B     		ldr	r3, .L367+12
 5134 0398 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5135 039c 002B     		cmp	r3, #0
 5136 039e 02D1     		bne	.L348
1703:..\src/interruptions.c ****                     value_encoder *= -1;        
 5137              		.loc 1 1703 0
 5138 03a0 BB6A     		ldr	r3, [r7, #40]
 5139 03a2 5B42     		negs	r3, r3
 5140 03a4 BB62     		str	r3, [r7, #40]
 5141              	.L348:
1704:..\src/interruptions.c ****                 }
1705:..\src/interruptions.c ****             }
1706:..\src/interruptions.c ****         }
1707:..\src/interruptions.c ****  
1708:..\src/interruptions.c **** 
1709:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5142              		.loc 1 1709 0
 5143 03a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5144 03a8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5145 03ac 5848     		ldr	r0, .L367+8
 5146 03ae 1346     		mov	r3, r2
 5147 03b0 5B00     		lsls	r3, r3, #1
 5148 03b2 1344     		add	r3, r3, r2
 5149 03b4 9B00     		lsls	r3, r3, #2
 5150 03b6 1344     		add	r3, r3, r2
 5151 03b8 0B44     		add	r3, r3, r1
 5152 03ba BA6A     		ldr	r2, [r7, #40]
 5153 03bc 40F82320 		str	r2, [r0, r3, lsl #2]
1710:..\src/interruptions.c ****     
1711:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5154              		.loc 1 1711 0
 5155 03c0 BA6A     		ldr	r2, [r7, #40]
 5156 03c2 1346     		mov	r3, r2
 5157 03c4 9B00     		lsls	r3, r3, #2
 5158 03c6 1344     		add	r3, r3, r2
 5159 03c8 5B00     		lsls	r3, r3, #1
 5160 03ca 9918     		adds	r1, r3, r2
 5161 03cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5162 03ce 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 124


 5163 03d2 514C     		ldr	r4, .L367+16
 5164 03d4 1346     		mov	r3, r2
 5165 03d6 5B00     		lsls	r3, r3, #1
 5166 03d8 1344     		add	r3, r3, r2
 5167 03da 0344     		add	r3, r3, r0
 5168 03dc 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5169 03e0 6FF01102 		mvn	r2, #17
 5170 03e4 02FB03F3 		mul	r3, r2, r3
 5171 03e8 1944     		add	r1, r1, r3
 5172 03ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5173 03ec 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5174 03f0 4A4C     		ldr	r4, .L367+20
 5175 03f2 1346     		mov	r3, r2
 5176 03f4 5B00     		lsls	r3, r3, #1
 5177 03f6 1344     		add	r3, r3, r2
 5178 03f8 0344     		add	r3, r3, r0
 5179 03fa 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5180 03fe 1346     		mov	r3, r2
 5181 0400 DB00     		lsls	r3, r3, #3
 5182 0402 1344     		add	r3, r3, r2
 5183 0404 1944     		add	r1, r1, r3
 5184 0406 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5185 0408 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5186 040c 444C     		ldr	r4, .L367+24
 5187 040e 1346     		mov	r3, r2
 5188 0410 5B00     		lsls	r3, r3, #1
 5189 0412 1344     		add	r3, r3, r2
 5190 0414 0344     		add	r3, r3, r0
 5191 0416 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5192 041a 5B00     		lsls	r3, r3, #1
 5193 041c C81A     		subs	r0, r1, r3
 5194 041e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5195 0422 DB00     		lsls	r3, r3, #3
 5196 0424 3F4A     		ldr	r2, .L367+28
 5197 0426 1344     		add	r3, r3, r2
 5198 0428 1946     		mov	r1, r3
 5199 042a FFF7FEFF 		bl	filter
 5200 042e 0346     		mov	r3, r0
 5201 0430 1BB2     		sxth	r3, r3
 5202 0432 7B61     		str	r3, [r7, #20]
1712:..\src/interruptions.c **** 
1713:..\src/interruptions.c ****         //Update current speed
1714:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5203              		.loc 1 1714 0
 5204 0434 7869     		ldr	r0, [r7, #20]
 5205 0436 FFF7FEFF 		bl	__aeabi_i2f
 5206 043a 0446     		mov	r4, r0
 5207 043c 3A4B     		ldr	r3, .L367+32
 5208 043e 1B68     		ldr	r3, [r3]	@ float
 5209 0440 3A49     		ldr	r1, .L367+36
 5210 0442 1846     		mov	r0, r3
 5211 0444 FFF7FEFF 		bl	__aeabi_fmul
 5212 0448 0346     		mov	r3, r0
 5213 044a 1946     		mov	r1, r3
 5214 044c 2046     		mov	r0, r4
 5215 044e FFF7FEFF 		bl	__aeabi_fdiv
 5216 0452 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 125


 5217 0454 1846     		mov	r0, r3
 5218 0456 FFF7FEFF 		bl	__aeabi_f2iz
 5219 045a 0346     		mov	r3, r0
 5220 045c 7B61     		str	r3, [r7, #20]
1715:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5221              		.loc 1 1715 0
 5222 045e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5223 0460 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5224 0464 2A48     		ldr	r0, .L367+8
 5225 0466 1346     		mov	r3, r2
 5226 0468 5B00     		lsls	r3, r3, #1
 5227 046a 1344     		add	r3, r3, r2
 5228 046c 9B00     		lsls	r3, r3, #2
 5229 046e 1344     		add	r3, r3, r2
 5230 0470 0B44     		add	r3, r3, r1
 5231 0472 0633     		adds	r3, r3, #6
 5232 0474 9B00     		lsls	r3, r3, #2
 5233 0476 0344     		add	r3, r3, r0
 5234 0478 7A69     		ldr	r2, [r7, #20]
 5235 047a 5A60     		str	r2, [r3, #4]
1716:..\src/interruptions.c **** 
1717:..\src/interruptions.c ****         // update old velocity and acceleration values
1718:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5236              		.loc 1 1718 0
 5237 047c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5238 047e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5239 0482 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5240 0484 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5241 0488 244D     		ldr	r5, .L367+20
 5242 048a 0B46     		mov	r3, r1
 5243 048c 5B00     		lsls	r3, r3, #1
 5244 048e 0B44     		add	r3, r3, r1
 5245 0490 2344     		add	r3, r3, r4
 5246 0492 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5247 0496 224C     		ldr	r4, .L367+24
 5248 0498 1346     		mov	r3, r2
 5249 049a 5B00     		lsls	r3, r3, #1
 5250 049c 1344     		add	r3, r3, r2
 5251 049e 0344     		add	r3, r3, r0
 5252 04a0 44F82310 		str	r1, [r4, r3, lsl #2]
1719:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5253              		.loc 1 1719 0
 5254 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5255 04a6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5256 04aa F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5257 04ac 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5258 04b0 194D     		ldr	r5, .L367+16
 5259 04b2 0B46     		mov	r3, r1
 5260 04b4 5B00     		lsls	r3, r3, #1
 5261 04b6 0B44     		add	r3, r3, r1
 5262 04b8 2344     		add	r3, r3, r4
 5263 04ba 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5264 04be 174C     		ldr	r4, .L367+20
 5265 04c0 1346     		mov	r3, r2
 5266 04c2 5B00     		lsls	r3, r3, #1
 5267 04c4 1344     		add	r3, r3, r2
 5268 04c6 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 126


 5269 04c8 44F82310 		str	r1, [r4, r3, lsl #2]
1720:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5270              		.loc 1 1720 0
 5271 04cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5272 04ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5273 04d2 1148     		ldr	r0, .L367+16
 5274 04d4 1346     		mov	r3, r2
 5275 04d6 5B00     		lsls	r3, r3, #1
 5276 04d8 1344     		add	r3, r3, r2
 5277 04da 0B44     		add	r3, r3, r1
 5278 04dc BA6A     		ldr	r2, [r7, #40]
 5279 04de 40F82320 		str	r2, [r0, r3, lsl #2]
1721:..\src/interruptions.c **** 
1722:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1723:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5280              		.loc 1 1723 0
 5281 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5282 04e4 124A     		ldr	r2, .L367+40
 5283 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5284 04e8 002B     		cmp	r3, #0
 5285 04ea 40F03B81 		bne	.L349
1724:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5286              		.loc 1 1724 0
 5287 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5288 04f0 104A     		ldr	r2, .L367+44
 5289 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5290 04f4 212B     		cmp	r3, #33
 5291 04f6 1FD8     		bhi	.L350
1725:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5292              		.loc 1 1725 0
 5293 04f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5294 04fa 0E4A     		ldr	r2, .L367+44
 5295 04fc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5296 04fe 0132     		adds	r2, r2, #1
 5297 0500 D1B2     		uxtb	r1, r2
 5298 0502 0C4A     		ldr	r2, .L367+44
 5299 0504 D154     		strb	r1, [r2, r3]
 5300 0506 2DE1     		b	.L349
 5301              	.L368:
 5302              		.align	2
 5303              	.L367:
 5304 0508 14010000 		.word	error.10542
 5305 050c E4000000 		.word	last_value_encoder.10540
 5306 0510 00000000 		.word	g_meas
 5307 0514 00000000 		.word	c_mem
 5308 0518 1C010000 		.word	v_value.10548
 5309 051c 34010000 		.word	vv_value.10549
 5310 0520 4C010000 		.word	vvv_value.10550
 5311 0524 00000000 		.word	filt_vel
 5312 0528 00000000 		.word	cycle_time
 5313 052c 0000C040 		.word	1086324736
 5314 0530 64010000 		.word	pos_reconstruct.10547
 5315 0534 68010000 		.word	one_time_execute.10545
 5316              	.L350:
1726:..\src/interruptions.c ****             else {
1727:..\src/interruptions.c ****                 //Double encoder translation
1728:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 127


 5317              		.loc 1 1728 0
 5318 0538 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5319 053a AE49     		ldr	r1, .L369
 5320 053c 1346     		mov	r3, r2
 5321 053e 5B00     		lsls	r3, r3, #1
 5322 0540 1344     		add	r3, r3, r2
 5323 0542 1B01     		lsls	r3, r3, #4
 5324 0544 0B44     		add	r3, r3, r1
 5325 0546 03F5D873 		add	r3, r3, #432
 5326 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5327 054c 002B     		cmp	r3, #0
 5328 054e 5ED0     		beq	.L351
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5329              		.loc 1 1729 0
 5330 0550 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5331 0552 A949     		ldr	r1, .L369+4
 5332 0554 1346     		mov	r3, r2
 5333 0556 5B00     		lsls	r3, r3, #1
 5334 0558 1344     		add	r3, r3, r2
 5335 055a 9B00     		lsls	r3, r3, #2
 5336 055c 0B44     		add	r3, r3, r1
 5337 055e 1868     		ldr	r0, [r3]
 5338 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5339 0562 A549     		ldr	r1, .L369+4
 5340 0564 1346     		mov	r3, r2
 5341 0566 5B00     		lsls	r3, r3, #1
 5342 0568 1344     		add	r3, r3, r2
 5343 056a 9B00     		lsls	r3, r3, #2
 5344 056c 0B44     		add	r3, r3, r1
 5345 056e 0433     		adds	r3, r3, #4
 5346 0570 1C68     		ldr	r4, [r3]
1730:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5347              		.loc 1 1730 0
 5348 0572 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5349 0574 9F49     		ldr	r1, .L369
 5350 0576 1346     		mov	r3, r2
 5351 0578 5B00     		lsls	r3, r3, #1
 5352 057a 1344     		add	r3, r3, r2
 5353 057c 1B01     		lsls	r3, r3, #4
 5354 057e 0B44     		add	r3, r3, r1
 5355 0580 03F2B513 		addw	r3, r3, #437
 5356 0584 93F90030 		ldrsb	r3, [r3]
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5357              		.loc 1 1729 0
 5358 0588 1D46     		mov	r5, r3
 5359              		.loc 1 1730 0
 5360 058a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5361 058c 9949     		ldr	r1, .L369
 5362 058e 1346     		mov	r3, r2
 5363 0590 5B00     		lsls	r3, r3, #1
 5364 0592 1344     		add	r3, r3, r2
 5365 0594 1B01     		lsls	r3, r3, #4
 5366 0596 0B44     		add	r3, r3, r1
 5367 0598 03F5DB73 		add	r3, r3, #438
 5368 059c 93F90030 		ldrsb	r3, [r3]
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5369              		.loc 1 1729 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 128


 5370 05a0 1E46     		mov	r6, r3
 5371              		.loc 1 1730 0
 5372 05a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5373 05a4 9349     		ldr	r1, .L369
 5374 05a6 1346     		mov	r3, r2
 5375 05a8 5B00     		lsls	r3, r3, #1
 5376 05aa 1344     		add	r3, r3, r2
 5377 05ac 1B01     		lsls	r3, r3, #4
 5378 05ae 0B44     		add	r3, r3, r1
 5379 05b0 03F2B713 		addw	r3, r3, #439
 5380 05b4 93F90030 		ldrsb	r3, [r3]
1729:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5381              		.loc 1 1729 0
 5382 05b8 0093     		str	r3, [sp]
 5383 05ba 3346     		mov	r3, r6
 5384 05bc 2A46     		mov	r2, r5
 5385 05be 2146     		mov	r1, r4
 5386 05c0 FFF7FEFF 		bl	calc_turns_fcn
 5387 05c4 0346     		mov	r3, r0
 5388 05c6 87F82730 		strb	r3, [r7, #39]
1731:..\src/interruptions.c **** 
1732:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5389              		.loc 1 1732 0
 5390 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5391 05cc 8949     		ldr	r1, .L369
 5392 05ce 1346     		mov	r3, r2
 5393 05d0 5B00     		lsls	r3, r3, #1
 5394 05d2 1344     		add	r3, r3, r2
 5395 05d4 1B01     		lsls	r3, r3, #4
 5396 05d6 0B44     		add	r3, r3, r1
 5397 05d8 03F5D273 		add	r3, r3, #420
 5398 05dc 1B68     		ldr	r3, [r3]	@ float
 5399 05de 4FF00001 		mov	r1, #0
 5400 05e2 1846     		mov	r0, r3
 5401 05e4 FFF7FEFF 		bl	__aeabi_fcmplt
 5402 05e8 0346     		mov	r3, r0
 5403 05ea 002B     		cmp	r3, #0
 5404 05ec 05D0     		beq	.L352
1733:..\src/interruptions.c ****                         init_rot = -init_rot;
 5405              		.loc 1 1733 0
 5406 05ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5407 05f2 5B42     		negs	r3, r3
 5408 05f4 DBB2     		uxtb	r3, r3
 5409 05f6 87F82730 		strb	r3, [r7, #39]
 5410              	.L352:
1734:..\src/interruptions.c ****                     
1735:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5411              		.loc 1 1735 0
 5412 05fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5413 05fc 7F4A     		ldr	r2, .L369+8
 5414 05fe 3421     		movs	r1, #52
 5415 0600 01FB03F3 		mul	r3, r1, r3
 5416 0604 1344     		add	r3, r3, r2
 5417 0606 1833     		adds	r3, r3, #24
 5418 0608 97F82720 		ldrb	r2, [r7, #39]
 5419 060c 1A70     		strb	r2, [r3]
 5420              	.L351:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 129


1736:..\src/interruptions.c ****                 }    
1737:..\src/interruptions.c **** 
1738:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5421              		.loc 1 1738 0
 5422 060e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5423 0610 7849     		ldr	r1, .L369
 5424 0612 1346     		mov	r3, r2
 5425 0614 5B00     		lsls	r3, r3, #1
 5426 0616 1344     		add	r3, r3, r2
 5427 0618 1B01     		lsls	r3, r3, #4
 5428 061a 0B44     		add	r3, r3, r1
 5429 061c 03F5D273 		add	r3, r3, #420
 5430 0620 1B68     		ldr	r3, [r3]	@ float
 5431 0622 4FF07E51 		mov	r1, #1065353216
 5432 0626 1846     		mov	r0, r3
 5433 0628 FFF7FEFF 		bl	__aeabi_fcmpeq
 5434 062c 0346     		mov	r3, r0
 5435 062e 002B     		cmp	r3, #0
 5436 0630 22D1     		bne	.L354
1739:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5437              		.loc 1 1739 0
 5438 0632 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5439 0634 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5440 0636 714A     		ldr	r2, .L369+8
 5441 0638 3421     		movs	r1, #52
 5442 063a 01FB03F3 		mul	r3, r1, r3
 5443 063e 1344     		add	r3, r3, r2
 5444 0640 1B68     		ldr	r3, [r3]
 5445 0642 1846     		mov	r0, r3
 5446 0644 FFF7FEFF 		bl	__aeabi_i2f
 5447 0648 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5448 064a 6A49     		ldr	r1, .L369
 5449 064c 1346     		mov	r3, r2
 5450 064e 5B00     		lsls	r3, r3, #1
 5451 0650 1344     		add	r3, r3, r2
 5452 0652 1B01     		lsls	r3, r3, #4
 5453 0654 0B44     		add	r3, r3, r1
 5454 0656 03F5D273 		add	r3, r3, #420
 5455 065a 1B68     		ldr	r3, [r3]	@ float
 5456 065c 1946     		mov	r1, r3
 5457 065e FFF7FEFF 		bl	__aeabi_fdiv
 5458 0662 0346     		mov	r3, r0
 5459 0664 1846     		mov	r0, r3
 5460 0666 FFF7FEFF 		bl	__aeabi_f2iz
 5461 066a 0146     		mov	r1, r0
 5462 066c 634A     		ldr	r2, .L369+8
 5463 066e 3423     		movs	r3, #52
 5464 0670 03FB04F3 		mul	r3, r3, r4
 5465 0674 1344     		add	r3, r3, r2
 5466 0676 1960     		str	r1, [r3]
 5467              	.L354:
1740:..\src/interruptions.c ****                 
1741:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5468              		.loc 1 1741 0
 5469 0678 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5470 067a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5471 067c 5F49     		ldr	r1, .L369+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 130


 5472 067e 3420     		movs	r0, #52
 5473 0680 00FB02F2 		mul	r2, r0, r2
 5474 0684 0A44     		add	r2, r2, r1
 5475 0686 1168     		ldr	r1, [r2]
 5476 0688 97F92720 		ldrsb	r2, [r7, #39]
 5477 068c 1204     		lsls	r2, r2, #16
 5478 068e 0A44     		add	r2, r2, r1
 5479 0690 5A49     		ldr	r1, .L369+8
 5480 0692 3420     		movs	r0, #52
 5481 0694 00FB03F3 		mul	r3, r0, r3
 5482 0698 0B44     		add	r3, r3, r1
 5483 069a 1A60     		str	r2, [r3]
1742:..\src/interruptions.c ****             
1743:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5484              		.loc 1 1743 0
 5485 069c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5486 069e 5549     		ldr	r1, .L369
 5487 06a0 1346     		mov	r3, r2
 5488 06a2 5B00     		lsls	r3, r3, #1
 5489 06a4 1344     		add	r3, r3, r2
 5490 06a6 1B01     		lsls	r3, r3, #4
 5491 06a8 0B44     		add	r3, r3, r1
 5492 06aa 03F5D273 		add	r3, r3, #420
 5493 06ae 1B68     		ldr	r3, [r3]	@ float
 5494 06b0 4FF07E51 		mov	r1, #1065353216
 5495 06b4 1846     		mov	r0, r3
 5496 06b6 FFF7FEFF 		bl	__aeabi_fcmpeq
 5497 06ba 0346     		mov	r3, r0
 5498 06bc 002B     		cmp	r3, #0
 5499 06be 22D1     		bne	.L356
1744:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5500              		.loc 1 1744 0
 5501 06c0 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5502 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5503 06c4 4D4A     		ldr	r2, .L369+8
 5504 06c6 3421     		movs	r1, #52
 5505 06c8 01FB03F3 		mul	r3, r1, r3
 5506 06cc 1344     		add	r3, r3, r2
 5507 06ce 1B68     		ldr	r3, [r3]
 5508 06d0 1846     		mov	r0, r3
 5509 06d2 FFF7FEFF 		bl	__aeabi_i2f
 5510 06d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5511 06d8 4649     		ldr	r1, .L369
 5512 06da 1346     		mov	r3, r2
 5513 06dc 5B00     		lsls	r3, r3, #1
 5514 06de 1344     		add	r3, r3, r2
 5515 06e0 1B01     		lsls	r3, r3, #4
 5516 06e2 0B44     		add	r3, r3, r1
 5517 06e4 03F5D273 		add	r3, r3, #420
 5518 06e8 1B68     		ldr	r3, [r3]	@ float
 5519 06ea 1946     		mov	r1, r3
 5520 06ec FFF7FEFF 		bl	__aeabi_fmul
 5521 06f0 0346     		mov	r3, r0
 5522 06f2 1846     		mov	r0, r3
 5523 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 5524 06f8 0146     		mov	r1, r0
 5525 06fa 404A     		ldr	r2, .L369+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 131


 5526 06fc 3423     		movs	r3, #52
 5527 06fe 03FB04F3 		mul	r3, r3, r4
 5528 0702 1344     		add	r3, r3, r2
 5529 0704 1960     		str	r1, [r3]
 5530              	.L356:
1745:..\src/interruptions.c ****             
1746:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5531              		.loc 1 1746 0
 5532 0706 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5533 0708 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5534 070a 3C49     		ldr	r1, .L369+8
 5535 070c 3420     		movs	r0, #52
 5536 070e 00FB02F2 		mul	r2, r0, r2
 5537 0712 0A44     		add	r2, r2, r1
 5538 0714 1268     		ldr	r2, [r2]
 5539 0716 3A49     		ldr	r1, .L369+12
 5540 0718 1B01     		lsls	r3, r3, #4
 5541 071a 0B44     		add	r3, r3, r1
 5542 071c 1A60     		str	r2, [r3]
1747:..\src/interruptions.c **** 
1748:..\src/interruptions.c ****                 // If necessary activate motor
1749:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5543              		.loc 1 1749 0
 5544 071e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5545 0720 384A     		ldr	r2, .L369+16
 5546 0722 0121     		movs	r1, #1
 5547 0724 D154     		strb	r1, [r2, r3]
1750:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1751:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5548              		.loc 1 1751 0
 5549 0726 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5550 0728 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5551 072a 3248     		ldr	r0, .L369
 5552 072c 1346     		mov	r3, r2
 5553 072e DB00     		lsls	r3, r3, #3
 5554 0730 9B1A     		subs	r3, r3, r2
 5555 0732 1B01     		lsls	r3, r3, #4
 5556 0734 0344     		add	r3, r3, r0
 5557 0736 E033     		adds	r3, r3, #224
 5558 0738 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5559 073a 314A     		ldr	r2, .L369+12
 5560 073c 0B01     		lsls	r3, r1, #4
 5561 073e 1344     		add	r3, r3, r2
 5562 0740 0C33     		adds	r3, r3, #12
 5563 0742 0246     		mov	r2, r0
 5564 0744 1A70     		strb	r2, [r3]
1752:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5565              		.loc 1 1752 0
 5566 0746 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5567 0748 2D4A     		ldr	r2, .L369+12
 5568 074a 1B01     		lsls	r3, r3, #4
 5569 074c 1344     		add	r3, r3, r2
 5570 074e 0C33     		adds	r3, r3, #12
 5571 0750 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5572 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5573 0754 1146     		mov	r1, r2
 5574 0756 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 132


 5575 0758 FFF7FEFF 		bl	enable_motor
1753:..\src/interruptions.c ****                 
1754:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5576              		.loc 1 1754 0
 5577 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5578 075e 2A4A     		ldr	r2, .L369+20
 5579 0760 0121     		movs	r1, #1
 5580 0762 D154     		strb	r1, [r2, r3]
 5581              	.L349:
1627:..\src/interruptions.c ****         
 5582              		.loc 1 1627 0 discriminator 2
 5583 0764 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5584 0768 0133     		adds	r3, r3, #1
 5585 076a 87F82F30 		strb	r3, [r7, #47]
 5586              	.L338:
1627:..\src/interruptions.c ****         
 5587              		.loc 1 1627 0 is_stmt 0 discriminator 1
 5588 076e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5589 0772 022B     		cmp	r3, #2
 5590 0774 7FF6C7AC 		bls	.L358
1755:..\src/interruptions.c ****             }
1756:..\src/interruptions.c ****         }
1757:..\src/interruptions.c ****     } 
1758:..\src/interruptions.c **** 
1759:..\src/interruptions.c **** 	
1760:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1761:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5591              		.loc 1 1761 0 is_stmt 1
 5592 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5593 077a 224A     		ldr	r2, .L369+16
 5594 077c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5595 077e 002B     		cmp	r3, #0
 5596 0780 35D0     		beq	.L329
1762:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5597              		.loc 1 1762 0
 5598 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5599 0784 214A     		ldr	r2, .L369+24
 5600 0786 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5601 078a 0132     		adds	r2, r2, #1
 5602 078c 1F49     		ldr	r1, .L369+24
 5603 078e 41F82320 		str	r2, [r1, r3, lsl #2]
1763:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5604              		.loc 1 1763 0
 5605 0792 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5606 0794 1D4A     		ldr	r2, .L369+24
 5607 0796 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5608 079a B3F5FA5F 		cmp	r3, #8000
 5609 079e 26D3     		bcc	.L329
1764:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5610              		.loc 1 1764 0
 5611 07a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5612 07a2 174A     		ldr	r2, .L369+12
 5613 07a4 1B01     		lsls	r3, r3, #4
 5614 07a6 1344     		add	r3, r3, r2
 5615 07a8 0022     		movs	r2, #0
 5616 07aa 1A60     		str	r2, [r3]
1765:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 133


1766:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1767:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5617              		.loc 1 1767 0
 5618 07ac B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5619 07ae BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5620 07b0 1048     		ldr	r0, .L369
 5621 07b2 1346     		mov	r3, r2
 5622 07b4 DB00     		lsls	r3, r3, #3
 5623 07b6 9B1A     		subs	r3, r3, r2
 5624 07b8 1B01     		lsls	r3, r3, #4
 5625 07ba 0344     		add	r3, r3, r0
 5626 07bc E033     		adds	r3, r3, #224
 5627 07be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5628 07c0 0F4A     		ldr	r2, .L369+12
 5629 07c2 0B01     		lsls	r3, r1, #4
 5630 07c4 1344     		add	r3, r3, r2
 5631 07c6 0C33     		adds	r3, r3, #12
 5632 07c8 0246     		mov	r2, r0
 5633 07ca 1A70     		strb	r2, [r3]
1768:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 5634              		.loc 1 1768 0
 5635 07cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5636 07ce 0C4A     		ldr	r2, .L369+12
 5637 07d0 1B01     		lsls	r3, r3, #4
 5638 07d2 1344     		add	r3, r3, r2
 5639 07d4 0C33     		adds	r3, r3, #12
 5640 07d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5641 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5642 07da 1146     		mov	r1, r2
 5643 07dc 1846     		mov	r0, r3
 5644 07de FFF7FEFF 		bl	enable_motor
1769:..\src/interruptions.c ****                         
1770:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5645              		.loc 1 1770 0
 5646 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5647 07e4 074A     		ldr	r2, .L369+16
 5648 07e6 0021     		movs	r1, #0
 5649 07e8 D154     		strb	r1, [r2, r3]
 5650 07ea 00E0     		b	.L329
 5651              	.L364:
1682:..\src/interruptions.c ****                 }
 5652              		.loc 1 1682 0
 5653 07ec 00BF     		nop
 5654              	.L329:
1771:..\src/interruptions.c ****         }
1772:..\src/interruptions.c ****     }
1773:..\src/interruptions.c ****  
1774:..\src/interruptions.c **** }
 5655              		.loc 1 1774 0
 5656 07ee 3437     		adds	r7, r7, #52
 5657              		.cfi_def_cfa_offset 20
 5658 07f0 BD46     		mov	sp, r7
 5659              		.cfi_def_cfa_register 13
 5660              		@ sp needed
 5661 07f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5662              	.L370:
 5663              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 134


 5664              	.L369:
 5665 07f4 00000000 		.word	c_mem
 5666 07f8 FC000000 		.word	comp_value_encoder.10541
 5667 07fc 00000000 		.word	g_meas
 5668 0800 00000000 		.word	g_refNew
 5669 0804 6C010000 		.word	safe_startup_motor_activation.10544
 5670 0808 64010000 		.word	pos_reconstruct.10547
 5671 080c 70010000 		.word	count_startup_motor.10546
 5672              		.cfi_endproc
 5673              	.LFE70:
 5674              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 5675              		.global	__aeabi_f2d
 5676              		.global	__aeabi_ddiv
 5677              		.global	__aeabi_d2f
 5678              		.section	.text.analog_read_end,"ax",%progbits
 5679              		.align	2
 5680              		.global	analog_read_end
 5681              		.thumb
 5682              		.thumb_func
 5683              		.type	analog_read_end, %function
 5684              	analog_read_end:
 5685              	.LFB71:
1775:..\src/interruptions.c **** 
1776:..\src/interruptions.c **** //==============================================================================
1777:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1778:..\src/interruptions.c **** //==============================================================================
1779:..\src/interruptions.c **** 
1780:..\src/interruptions.c **** void analog_read_end() {
 5686              		.loc 1 1780 0
 5687              		.cfi_startproc
 5688              		@ args = 0, pretend = 0, frame = 8
 5689              		@ frame_needed = 1, uses_anonymous_args = 0
 5690 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5691              		.cfi_def_cfa_offset 20
 5692              		.cfi_offset 4, -20
 5693              		.cfi_offset 5, -16
 5694              		.cfi_offset 6, -12
 5695              		.cfi_offset 7, -8
 5696              		.cfi_offset 14, -4
 5697 0002 83B0     		sub	sp, sp, #12
 5698              		.cfi_def_cfa_offset 32
 5699 0004 00AF     		add	r7, sp, #0
 5700              		.cfi_def_cfa_register 7
1781:..\src/interruptions.c **** 
1782:..\src/interruptions.c ****     /* =========================================================================
1783:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1784:..\src/interruptions.c ****     /
1785:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1786:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1787:..\src/interruptions.c ****     /
1788:..\src/interruptions.c ****     /   Definition:
1789:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1790:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1791:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1792:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1793:..\src/interruptions.c ****     /
1794:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 135


1795:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1796:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1797:..\src/interruptions.c ****     /  =========================================================================
1798:..\src/interruptions.c ****     */
1799:..\src/interruptions.c **** 
1800:..\src/interruptions.c ****     int32 CYDATA i_aux;
1801:..\src/interruptions.c **** 
1802:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1803:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1804:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1805:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1806:..\src/interruptions.c ****     static uint16 count = 0;
1807:..\src/interruptions.c ****     static uint32 v_count = 0;
1808:..\src/interruptions.c ****     static uint8 idx = 0;
1809:..\src/interruptions.c ****     
1810:..\src/interruptions.c ****     // Wait for conversion end
1811:..\src/interruptions.c ****     
1812:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5701              		.loc 1 1812 0
 5702 0006 08E0     		b	.L372
 5703              	.L373:
1813:..\src/interruptions.c ****         
1814:..\src/interruptions.c ****         if (interrupt_flag){
 5704              		.loc 1 1814 0
 5705 0008 774B     		ldr	r3, .L486+8
 5706 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5707 000c 002B     		cmp	r3, #0
 5708 000e 04D0     		beq	.L372
1815:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5709              		.loc 1 1815 0
 5710 0010 754B     		ldr	r3, .L486+8
 5711 0012 0022     		movs	r2, #0
 5712 0014 1A70     		strb	r2, [r3]
1816:..\src/interruptions.c ****             interrupt_manager();
 5713              		.loc 1 1816 0
 5714 0016 FFF7FEFF 		bl	interrupt_manager
 5715              	.L372:
1812:..\src/interruptions.c ****         
 5716              		.loc 1 1812 0
 5717 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5718 001e 0346     		mov	r3, r0
 5719 0020 002B     		cmp	r3, #0
 5720 0022 F1D0     		beq	.L373
1817:..\src/interruptions.c ****         }
1818:..\src/interruptions.c ****     }
1819:..\src/interruptions.c ****     
1820:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1821:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 5721              		.loc 1 1821 0
 5722 0024 714B     		ldr	r3, .L486+12
 5723 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5724 002a 022B     		cmp	r3, #2
 5725 002c 34D1     		bne	.L374
1822:..\src/interruptions.c ****         // Read pressure in any case
1823:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
 5726              		.loc 1 1823 0
 5727 002e 704B     		ldr	r3, .L486+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 136


 5728 0030 B3F90030 		ldrsh	r3, [r3]
 5729 0034 A3F20463 		subw	r3, r3, #1540
 5730 0038 1846     		mov	r0, r3
 5731 003a FFF7FEFF 		bl	__aeabi_i2f
 5732 003e 0246     		mov	r2, r0
 5733 0040 6C4B     		ldr	r3, .L486+20
 5734 0042 1A60     		str	r2, [r3]	@ float
1824:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
 5735              		.loc 1 1824 0
 5736 0044 6B4B     		ldr	r3, .L486+20
 5737 0046 1B68     		ldr	r3, [r3]	@ float
 5738 0048 1846     		mov	r0, r3
 5739 004a FFF7FEFF 		bl	__aeabi_f2d
 5740 004e 4FF00002 		mov	r2, #0
 5741 0052 694B     		ldr	r3, .L486+24
 5742 0054 FFF7FEFF 		bl	__aeabi_ddiv
 5743 0058 0346     		mov	r3, r0
 5744 005a 0C46     		mov	r4, r1
 5745 005c 1846     		mov	r0, r3
 5746 005e 2146     		mov	r1, r4
 5747 0060 5FA3     		adr	r3, .L486
 5748 0062 D3E90023 		ldrd	r2, [r3]
 5749 0066 FFF7FEFF 		bl	__aeabi_ddiv
 5750 006a 0346     		mov	r3, r0
 5751 006c 0C46     		mov	r4, r1
 5752 006e 1846     		mov	r0, r3
 5753 0070 2146     		mov	r1, r4
 5754 0072 FFF7FEFF 		bl	__aeabi_d2f
 5755 0076 0246     		mov	r2, r0
 5756 0078 5E4B     		ldr	r3, .L486+20
 5757 007a 1A60     		str	r2, [r3]	@ float
1825:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
 5758              		.loc 1 1825 0
 5759 007c 5D4B     		ldr	r3, .L486+20
 5760 007e 1B68     		ldr	r3, [r3]	@ float
 5761 0080 4FF00001 		mov	r1, #0
 5762 0084 1846     		mov	r0, r3
 5763 0086 FFF7FEFF 		bl	__aeabi_fcmplt
 5764 008a 0346     		mov	r3, r0
 5765 008c 002B     		cmp	r3, #0
 5766 008e 03D0     		beq	.L374
 5767              		.loc 1 1825 0 is_stmt 0 discriminator 1
 5768 0090 584B     		ldr	r3, .L486+20
 5769 0092 4FF00002 		mov	r2, #0
 5770 0096 1A60     		str	r2, [r3]	@ float
 5771              	.L374:
1826:..\src/interruptions.c ****     }
1827:..\src/interruptions.c **** #endif
1828:..\src/interruptions.c ****  
1829:..\src/interruptions.c ****     // Convert tension read
1830:..\src/interruptions.c ****     if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 5772              		.loc 1 1830 0 is_stmt 1
 5773 0098 584B     		ldr	r3, .L486+28
 5774 009a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5775 009e 022B     		cmp	r3, #2
 5776 00a0 04D0     		beq	.L376
1831:..\src/interruptions.c ****         dev_tension[0] = 5000;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 137


 5777              		.loc 1 1831 0
 5778 00a2 574B     		ldr	r3, .L486+32
 5779 00a4 41F28832 		movw	r2, #5000
 5780 00a8 1A60     		str	r2, [r3]
 5781 00aa 0BE0     		b	.L377
 5782              	.L376:
1832:..\src/interruptions.c ****     }
1833:..\src/interruptions.c ****     else {
1834:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5783              		.loc 1 1834 0
 5784 00ac 504B     		ldr	r3, .L486+16
 5785 00ae B3F90030 		ldrsh	r3, [r3]
 5786 00b2 A3F25563 		subw	r3, r3, #1621
 5787 00b6 40F2C672 		movw	r2, #1990
 5788 00ba 02FB03F3 		mul	r3, r2, r3
 5789 00be DB11     		asrs	r3, r3, #7
 5790 00c0 4F4A     		ldr	r2, .L486+32
 5791 00c2 1360     		str	r3, [r2]
 5792              	.L377:
1835:..\src/interruptions.c ****     }
1836:..\src/interruptions.c ****     
1837:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1838:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5793              		.loc 1 1838 0
 5794 00c4 4F4B     		ldr	r3, .L486+36
 5795 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5796 00c8 042B     		cmp	r3, #4
 5797 00ca 0BD9     		bls	.L378
1839:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5798              		.loc 1 1839 0
 5799 00cc 484B     		ldr	r3, .L486+16
 5800 00ce B3F90830 		ldrsh	r3, [r3, #8]
 5801 00d2 A3F25563 		subw	r3, r3, #1621
 5802 00d6 40F2C672 		movw	r2, #1990
 5803 00da 02FB03F3 		mul	r3, r2, r3
 5804 00de DB11     		asrs	r3, r3, #7
 5805 00e0 474A     		ldr	r2, .L486+32
 5806 00e2 5360     		str	r3, [r2, #4]
 5807              	.L378:
1840:..\src/interruptions.c ****     }
1841:..\src/interruptions.c ****     
1842:..\src/interruptions.c ****     if (interrupt_flag){
 5808              		.loc 1 1842 0
 5809 00e4 404B     		ldr	r3, .L486+8
 5810 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5811 00e8 002B     		cmp	r3, #0
 5812 00ea 04D0     		beq	.L379
1843:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5813              		.loc 1 1843 0
 5814 00ec 3E4B     		ldr	r3, .L486+8
 5815 00ee 0022     		movs	r2, #0
 5816 00f0 1A70     		strb	r2, [r3]
1844:..\src/interruptions.c ****         interrupt_manager();
 5817              		.loc 1 1844 0
 5818 00f2 FFF7FEFF 		bl	interrupt_manager
 5819              	.L379:
1845:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 138


1846:..\src/interruptions.c ****     
1847:..\src/interruptions.c ****     // VOLTAGE READING
1848:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1849:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1850:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1851:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1852:..\src/interruptions.c ****     
1853:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 5820              		.loc 1 1853 0
 5821 00f6 444B     		ldr	r3, .L486+40
 5822 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5823 00fa 002B     		cmp	r3, #0
 5824 00fc 4DD0     		beq	.L380
 5825              		.loc 1 1853 0 is_stmt 0 discriminator 1
 5826 00fe 434B     		ldr	r3, .L486+44
 5827 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5828 0102 002B     		cmp	r3, #0
 5829 0104 49D0     		beq	.L380
1854:..\src/interruptions.c ****         count = count + 1;
 5830              		.loc 1 1854 0 is_stmt 1
 5831 0106 424B     		ldr	r3, .L486+48
 5832 0108 1B88     		ldrh	r3, [r3]
 5833 010a 0133     		adds	r3, r3, #1
 5834 010c 9AB2     		uxth	r2, r3
 5835 010e 404B     		ldr	r3, .L486+48
 5836 0110 1A80     		strh	r2, [r3]	@ movhi
1855:..\src/interruptions.c ****         
1856:..\src/interruptions.c ****         if (count == 1000){
 5837              		.loc 1 1856 0
 5838 0112 3F4B     		ldr	r3, .L486+48
 5839 0114 1B88     		ldrh	r3, [r3]
 5840 0116 B3F57A7F 		cmp	r3, #1000
 5841 011a 3ED1     		bne	.L380
1857:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5842              		.loc 1 1857 0
 5843 011c 3D4B     		ldr	r3, .L486+52
 5844 011e 0022     		movs	r2, #0
 5845 0120 1A70     		strb	r2, [r3]
 5846 0122 33E0     		b	.L381
 5847              	.L385:
1858:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5848              		.loc 1 1858 0
 5849 0124 3B4B     		ldr	r3, .L486+52
 5850 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5851 0128 1A46     		mov	r2, r3
 5852 012a 354B     		ldr	r3, .L486+32
 5853 012c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5854 0130 42F22732 		movw	r2, #8999
 5855 0134 9342     		cmp	r3, r2
 5856 0136 08DC     		bgt	.L382
1859:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5857              		.loc 1 1859 0
 5858 0138 364B     		ldr	r3, .L486+52
 5859 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5860 013c 1946     		mov	r1, r3
 5861 013e 364B     		ldr	r3, .L486+56
 5862 0140 4FF4FA52 		mov	r2, #8000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 139


 5863 0144 43F82120 		str	r2, [r3, r1, lsl #2]
 5864 0148 1AE0     		b	.L383
 5865              	.L382:
1860:..\src/interruptions.c ****                 }
1861:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1862:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5866              		.loc 1 1862 0
 5867 014a 324B     		ldr	r3, .L486+52
 5868 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5869 014e 1A46     		mov	r2, r3
 5870 0150 2B4B     		ldr	r3, .L486+32
 5871 0152 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5872 0156 43F2C722 		movw	r2, #12999
 5873 015a 9342     		cmp	r3, r2
 5874 015c 08DC     		bgt	.L384
1863:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5875              		.loc 1 1863 0
 5876 015e 2D4B     		ldr	r3, .L486+52
 5877 0160 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5878 0162 1946     		mov	r1, r3
 5879 0164 2C4B     		ldr	r3, .L486+56
 5880 0166 42F6E062 		movw	r2, #12000
 5881 016a 43F82120 		str	r2, [r3, r1, lsl #2]
 5882 016e 07E0     		b	.L383
 5883              	.L384:
1864:..\src/interruptions.c ****                     }
1865:..\src/interruptions.c ****                     else
1866:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5884              		.loc 1 1866 0
 5885 0170 284B     		ldr	r3, .L486+52
 5886 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5887 0174 1946     		mov	r1, r3
 5888 0176 284B     		ldr	r3, .L486+56
 5889 0178 45F6C052 		movw	r2, #24000
 5890 017c 43F82120 		str	r2, [r3, r1, lsl #2]
 5891              	.L383:
1857:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5892              		.loc 1 1857 0 discriminator 2
 5893 0180 244B     		ldr	r3, .L486+52
 5894 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5895 0184 0133     		adds	r3, r3, #1
 5896 0186 DAB2     		uxtb	r2, r3
 5897 0188 224B     		ldr	r3, .L486+52
 5898 018a 1A70     		strb	r2, [r3]
 5899              	.L381:
1857:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5900              		.loc 1 1857 0 is_stmt 0 discriminator 1
 5901 018c 214B     		ldr	r3, .L486+52
 5902 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5903 0190 012B     		cmp	r3, #1
 5904 0192 C7D9     		bls	.L385
1867:..\src/interruptions.c ****                 }
1868:..\src/interruptions.c ****             }
1869:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5905              		.loc 1 1869 0 is_stmt 1
 5906 0194 1C4B     		ldr	r3, .L486+40
 5907 0196 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 140


 5908 0198 1A70     		strb	r2, [r3]
 5909              	.L380:
1870:..\src/interruptions.c ****         }
1871:..\src/interruptions.c ****     }
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1874:..\src/interruptions.c **** 
1875:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 5910              		.loc 1 1875 0
 5911 019a 194B     		ldr	r3, .L486+32
 5912 019c 1B68     		ldr	r3, [r3]
 5913 019e 41F65732 		movw	r2, #6999
 5914 01a2 9342     		cmp	r3, r2
 5915 01a4 00F3E380 		bgt	.L386
 5916              		.loc 1 1875 0 is_stmt 0 discriminator 1
 5917 01a8 164B     		ldr	r3, .L486+36
 5918 01aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5919 01ac 042B     		cmp	r3, #4
 5920 01ae 06D9     		bls	.L387
 5921              		.loc 1 1875 0 discriminator 2
 5922 01b0 134B     		ldr	r3, .L486+32
 5923 01b2 5B68     		ldr	r3, [r3, #4]
 5924 01b4 41F65732 		movw	r2, #6999
 5925 01b8 9342     		cmp	r3, r2
 5926 01ba 00F3D880 		bgt	.L386
 5927              	.L387:
1876:..\src/interruptions.c ****         // PSoC is powered through uUSB
1877:..\src/interruptions.c ****         
1878:..\src/interruptions.c ****         tension_valid = FALSE;
 5928              		.loc 1 1878 0 is_stmt 1
 5929 01be 134B     		ldr	r3, .L486+44
 5930 01c0 0022     		movs	r2, #0
 5931 01c2 1A70     		strb	r2, [r3]
1879:..\src/interruptions.c ****             
1880:..\src/interruptions.c ****         if (interrupt_flag){
 5932              		.loc 1 1880 0
 5933 01c4 084B     		ldr	r3, .L486+8
 5934 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5935 01c8 002B     		cmp	r3, #0
 5936 01ca 04D0     		beq	.L388
1881:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5937              		.loc 1 1881 0
 5938 01cc 064B     		ldr	r3, .L486+8
 5939 01ce 0022     		movs	r2, #0
 5940 01d0 1A70     		strb	r2, [r3]
1882:..\src/interruptions.c ****             interrupt_manager();
 5941              		.loc 1 1882 0
 5942 01d2 FFF7FEFF 		bl	interrupt_manager
 5943              	.L388:
1883:..\src/interruptions.c ****         }
1884:..\src/interruptions.c ****         
1885:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5944              		.loc 1 1885 0
 5945 01d6 0F4B     		ldr	r3, .L486+52
 5946 01d8 0022     		movs	r2, #0
 5947 01da 1A70     		strb	r2, [r3]
 5948 01dc 92E0     		b	.L389
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 141


 5949              	.L487:
 5950 01de 00BF     		.align	3
 5951              	.L486:
 5952 01e0 FCA9F1D2 		.word	-755914244
 5953 01e4 4D62703F 		.word	1064329805
 5954 01e8 00000000 		.word	interrupt_flag
 5955 01ec 00000000 		.word	c_mem
 5956 01f0 00000000 		.word	ADC_buf
 5957 01f4 00000000 		.word	g_fb_meas
 5958 01f8 0000B040 		.word	1085276160
 5959 01fc 00000000 		.word	g_mem
 5960 0200 00000000 		.word	dev_tension
 5961 0204 00000000 		.word	NUM_OF_ANALOG_INPUTS
 5962 0208 06000000 		.word	first_tension_valid.10569
 5963 020c 00000000 		.word	tension_valid
 5964 0210 78010000 		.word	count.10570
 5965 0214 7A010000 		.word	idx.10572
 5966 0218 00000000 		.word	pow_tension
 5967              	.L392:
1886:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5968              		.loc 1 1886 0
 5969 021c 974B     		ldr	r3, .L488
 5970 021e 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 5971 0222 002B     		cmp	r3, #0
 5972 0224 4BD0     		beq	.L390
1887:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5973              		.loc 1 1887 0
 5974 0226 964B     		ldr	r3, .L488+4
 5975 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5976 022a 1946     		mov	r1, r3
 5977 022c 934A     		ldr	r2, .L488
 5978 022e 0B46     		mov	r3, r1
 5979 0230 DB00     		lsls	r3, r3, #3
 5980 0232 5B1A     		subs	r3, r3, r1
 5981 0234 1B01     		lsls	r3, r3, #4
 5982 0236 1344     		add	r3, r3, r2
 5983 0238 03F58773 		add	r3, r3, #270
 5984 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5985 023e 022B     		cmp	r3, #2
 5986 0240 29D0     		beq	.L391
1888:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5987              		.loc 1 1888 0 discriminator 1
 5988 0242 8F4B     		ldr	r3, .L488+4
 5989 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5990 0246 1946     		mov	r1, r3
 5991 0248 8C4A     		ldr	r2, .L488
 5992 024a 0B46     		mov	r3, r1
 5993 024c DB00     		lsls	r3, r3, #3
 5994 024e 5B1A     		subs	r3, r3, r1
 5995 0250 1B01     		lsls	r3, r3, #4
 5996 0252 1344     		add	r3, r3, r2
 5997 0254 03F58773 		add	r3, r3, #270
 5998 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1887:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5999              		.loc 1 1887 0 discriminator 1
 6000 025a 032B     		cmp	r3, #3
 6001 025c 1BD0     		beq	.L391
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 142


1889:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6002              		.loc 1 1889 0
 6003 025e 884B     		ldr	r3, .L488+4
 6004 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6005 0262 1946     		mov	r1, r3
 6006 0264 854A     		ldr	r2, .L488
 6007 0266 0B46     		mov	r3, r1
 6008 0268 DB00     		lsls	r3, r3, #3
 6009 026a 5B1A     		subs	r3, r3, r1
 6010 026c 1B01     		lsls	r3, r3, #4
 6011 026e 1344     		add	r3, r3, r2
 6012 0270 03F58773 		add	r3, r3, #270
 6013 0274 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1888:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6014              		.loc 1 1888 0
 6015 0276 042B     		cmp	r3, #4
 6016 0278 0DD0     		beq	.L391
1890:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 6017              		.loc 1 1890 0
 6018 027a 814B     		ldr	r3, .L488+4
 6019 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6020 027e 1946     		mov	r1, r3
 6021 0280 7E4A     		ldr	r2, .L488
 6022 0282 0B46     		mov	r3, r1
 6023 0284 DB00     		lsls	r3, r3, #3
 6024 0286 5B1A     		subs	r3, r3, r1
 6025 0288 1B01     		lsls	r3, r3, #4
 6026 028a 1344     		add	r3, r3, r2
 6027 028c 03F58773 		add	r3, r3, #270
 6028 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1889:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6029              		.loc 1 1889 0
 6030 0292 052B     		cmp	r3, #5
 6031 0294 13D1     		bne	.L390
 6032              	.L391:
1891:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6033              		.loc 1 1891 0
 6034 0296 7A4B     		ldr	r3, .L488+4
 6035 0298 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6036 029a 7A4A     		ldr	r2, .L488+8
 6037 029c 1B01     		lsls	r3, r3, #4
 6038 029e 1344     		add	r3, r3, r2
 6039 02a0 0C33     		adds	r3, r3, #12
 6040 02a2 0022     		movs	r2, #0
 6041 02a4 1A70     		strb	r2, [r3]
1892:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6042              		.loc 1 1892 0
 6043 02a6 764B     		ldr	r3, .L488+4
 6044 02a8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6045 02aa 754B     		ldr	r3, .L488+4
 6046 02ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6047 02ae 754A     		ldr	r2, .L488+8
 6048 02b0 1B01     		lsls	r3, r3, #4
 6049 02b2 1344     		add	r3, r3, r2
 6050 02b4 0C33     		adds	r3, r3, #12
 6051 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6052 02b8 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 143


 6053 02ba FFF7FEFF 		bl	enable_motor
 6054              	.L390:
1893:..\src/interruptions.c ****                     
1894:..\src/interruptions.c ****                 }
1895:..\src/interruptions.c ****             }
1896:..\src/interruptions.c **** 
1897:..\src/interruptions.c ****             // Assign dev_tension and reset current
1898:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6055              		.loc 1 1898 0 discriminator 2
 6056 02be 704B     		ldr	r3, .L488+4
 6057 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6058 02c2 1946     		mov	r1, r3
 6059 02c4 704B     		ldr	r3, .L488+12
 6060 02c6 41F28832 		movw	r2, #5000
 6061 02ca 43F82120 		str	r2, [r3, r1, lsl #2]
1899:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6062              		.loc 1 1899 0 discriminator 2
 6063 02ce 6C4B     		ldr	r3, .L488+4
 6064 02d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6065 02d2 1946     		mov	r1, r3
 6066 02d4 6D4A     		ldr	r2, .L488+16
 6067 02d6 0B46     		mov	r3, r1
 6068 02d8 DB00     		lsls	r3, r3, #3
 6069 02da 5B1A     		subs	r3, r3, r1
 6070 02dc 1B01     		lsls	r3, r3, #4
 6071 02de 1344     		add	r3, r3, r2
 6072 02e0 03F58873 		add	r3, r3, #272
 6073 02e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6074 02e6 1946     		mov	r1, r3
 6075 02e8 694A     		ldr	r2, .L488+20
 6076 02ea 3423     		movs	r3, #52
 6077 02ec 03FB01F3 		mul	r3, r3, r1
 6078 02f0 1344     		add	r3, r3, r2
 6079 02f2 0C33     		adds	r3, r3, #12
 6080 02f4 0022     		movs	r2, #0
 6081 02f6 1A60     		str	r2, [r3]
1885:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6082              		.loc 1 1885 0 discriminator 2
 6083 02f8 614B     		ldr	r3, .L488+4
 6084 02fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6085 02fc 0133     		adds	r3, r3, #1
 6086 02fe DAB2     		uxtb	r2, r3
 6087 0300 5F4B     		ldr	r3, .L488+4
 6088 0302 1A70     		strb	r2, [r3]
 6089              	.L389:
1885:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6090              		.loc 1 1885 0 is_stmt 0 discriminator 1
 6091 0304 5E4B     		ldr	r3, .L488+4
 6092 0306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6093 0308 012B     		cmp	r3, #1
 6094 030a 87D9     		bls	.L392
1900:..\src/interruptions.c ****         }
1901:..\src/interruptions.c ****         
1902:..\src/interruptions.c ****         // Reset emg
1903:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6095              		.loc 1 1903 0 is_stmt 1
 6096 030c 5C4B     		ldr	r3, .L488+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 144


 6097 030e 0022     		movs	r2, #0
 6098 0310 1A70     		strb	r2, [r3]
 6099 0312 0CE0     		b	.L393
 6100              	.L394:
1904:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6101              		.loc 1 1904 0 discriminator 3
 6102 0314 5A4B     		ldr	r3, .L488+4
 6103 0316 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6104 0318 1946     		mov	r1, r3
 6105 031a 5E4B     		ldr	r3, .L488+24
 6106 031c 0022     		movs	r2, #0
 6107 031e 43F82120 		str	r2, [r3, r1, lsl #2]
1903:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6108              		.loc 1 1903 0 discriminator 3
 6109 0322 574B     		ldr	r3, .L488+4
 6110 0324 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6111 0326 0133     		adds	r3, r3, #1
 6112 0328 DAB2     		uxtb	r2, r3
 6113 032a 554B     		ldr	r3, .L488+4
 6114 032c 1A70     		strb	r2, [r3]
 6115              	.L393:
1903:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 6116              		.loc 1 1903 0 is_stmt 0 discriminator 1
 6117 032e 544B     		ldr	r3, .L488+4
 6118 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6119 0332 012B     		cmp	r3, #1
 6120 0334 EED9     		bls	.L394
1905:..\src/interruptions.c ****         }
1906:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6121              		.loc 1 1906 0 is_stmt 1
 6122 0336 524B     		ldr	r3, .L488+4
 6123 0338 0022     		movs	r2, #0
 6124 033a 1A70     		strb	r2, [r3]
 6125 033c 0CE0     		b	.L395
 6126              	.L397:
1907:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6127              		.loc 1 1907 0 discriminator 4
 6128 033e 504B     		ldr	r3, .L488+4
 6129 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6130 0342 544A     		ldr	r2, .L488+24
 6131 0344 0233     		adds	r3, r3, #2
 6132 0346 0021     		movs	r1, #0
 6133 0348 42F82310 		str	r1, [r2, r3, lsl #2]
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6134              		.loc 1 1906 0 discriminator 4
 6135 034c 4C4B     		ldr	r3, .L488+4
 6136 034e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6137 0350 0133     		adds	r3, r3, #1
 6138 0352 DAB2     		uxtb	r2, r3
 6139 0354 4A4B     		ldr	r3, .L488+4
 6140 0356 1A70     		strb	r2, [r3]
 6141              	.L395:
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6142              		.loc 1 1906 0 is_stmt 0 discriminator 1
 6143 0358 484B     		ldr	r3, .L488
 6144 035a 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6145 035e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 145


 6146 0360 00F0E881 		beq	.L475
1906:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 6147              		.loc 1 1906 0 discriminator 3
 6148 0364 464B     		ldr	r3, .L488+4
 6149 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6150 0368 052B     		cmp	r3, #5
 6151 036a E8D9     		bls	.L397
1875:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6152              		.loc 1 1875 0 is_stmt 1
 6153 036c E2E1     		b	.L475
 6154              	.L386:
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****         
1910:..\src/interruptions.c ****     }
1911:..\src/interruptions.c ****     else {
1912:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1913:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1914:..\src/interruptions.c ****         
1915:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1916:..\src/interruptions.c ****         
1917:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6155              		.loc 1 1917 0
 6156 036e 4A4B     		ldr	r3, .L488+28
 6157 0370 1B68     		ldr	r3, [r3]
 6158 0372 B3F57A7F 		cmp	r3, #1000
 6159 0376 0DD1     		bne	.L399
 6160              		.loc 1 1917 0 is_stmt 0 discriminator 1
 6161 0378 484B     		ldr	r3, .L488+32
 6162 037a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6163 037c 002B     		cmp	r3, #0
 6164 037e 09D1     		bne	.L399
1918:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1919:..\src/interruptions.c ****             tension_valid = TRUE;   
 6165              		.loc 1 1919 0 is_stmt 1
 6166 0380 464B     		ldr	r3, .L488+32
 6167 0382 0122     		movs	r2, #1
 6168 0384 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****             count = 0;
 6169              		.loc 1 1920 0
 6170 0386 464B     		ldr	r3, .L488+36
 6171 0388 0022     		movs	r2, #0
 6172 038a 1A80     		strh	r2, [r3]	@ movhi
1921:..\src/interruptions.c ****             v_count = 0;
 6173              		.loc 1 1921 0
 6174 038c 424B     		ldr	r3, .L488+28
 6175 038e 0022     		movs	r2, #0
 6176 0390 1A60     		str	r2, [r3]
 6177 0392 2CE0     		b	.L400
 6178              	.L399:
1922:..\src/interruptions.c ****         }
1923:..\src/interruptions.c ****         else {  
1924:..\src/interruptions.c ****             // wait for battery voltage stabilization
1925:..\src/interruptions.c ****             if (v_count < 1000) {
 6179              		.loc 1 1925 0
 6180 0394 404B     		ldr	r3, .L488+28
 6181 0396 1B68     		ldr	r3, [r3]
 6182 0398 B3F57A7F 		cmp	r3, #1000
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 146


 6183 039c 04D2     		bcs	.L401
1926:..\src/interruptions.c ****                 v_count = v_count + 1;
 6184              		.loc 1 1926 0
 6185 039e 3E4B     		ldr	r3, .L488+28
 6186 03a0 1B68     		ldr	r3, [r3]
 6187 03a2 0133     		adds	r3, r3, #1
 6188 03a4 3C4A     		ldr	r2, .L488+28
 6189 03a6 1360     		str	r3, [r2]
 6190              	.L401:
1927:..\src/interruptions.c ****             }
1928:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6191              		.loc 1 1928 0
 6192 03a8 354B     		ldr	r3, .L488+4
 6193 03aa 0022     		movs	r2, #0
 6194 03ac 1A70     		strb	r2, [r3]
 6195 03ae 1AE0     		b	.L402
 6196              	.L403:
1929:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6197              		.loc 1 1929 0 discriminator 3
 6198 03b0 334B     		ldr	r3, .L488+4
 6199 03b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6200 03b4 1C46     		mov	r4, r3
 6201 03b6 324B     		ldr	r3, .L488+4
 6202 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6203 03ba 1A46     		mov	r2, r3
 6204 03bc 324B     		ldr	r3, .L488+12
 6205 03be 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6206 03c2 2F4B     		ldr	r3, .L488+4
 6207 03c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6208 03c6 DB00     		lsls	r3, r3, #3
 6209 03c8 364A     		ldr	r2, .L488+40
 6210 03ca 1344     		add	r3, r3, r2
 6211 03cc 1946     		mov	r1, r3
 6212 03ce FFF7FEFF 		bl	filter
 6213 03d2 0246     		mov	r2, r0
 6214 03d4 344B     		ldr	r3, .L488+44
 6215 03d6 43F82420 		str	r2, [r3, r4, lsl #2]
1928:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6216              		.loc 1 1928 0 discriminator 3
 6217 03da 294B     		ldr	r3, .L488+4
 6218 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6219 03de 0133     		adds	r3, r3, #1
 6220 03e0 DAB2     		uxtb	r2, r3
 6221 03e2 274B     		ldr	r3, .L488+4
 6222 03e4 1A70     		strb	r2, [r3]
 6223              	.L402:
1928:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6224              		.loc 1 1928 0 is_stmt 0 discriminator 1
 6225 03e6 264B     		ldr	r3, .L488+4
 6226 03e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6227 03ea 012B     		cmp	r3, #1
 6228 03ec E0D9     		bls	.L403
 6229              	.L400:
1930:..\src/interruptions.c ****             }
1931:..\src/interruptions.c ****         }
1932:..\src/interruptions.c **** 
1933:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 147


 6230              		.loc 1 1933 0 is_stmt 1
 6231 03ee 244B     		ldr	r3, .L488+4
 6232 03f0 0022     		movs	r2, #0
 6233 03f2 1A70     		strb	r2, [r3]
 6234 03f4 17E0     		b	.L404
 6235              	.L406:
1934:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6236              		.loc 1 1934 0
 6237 03f6 224B     		ldr	r3, .L488+4
 6238 03f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6239 03fa 1946     		mov	r1, r3
 6240 03fc 234A     		ldr	r2, .L488+16
 6241 03fe 0B46     		mov	r3, r1
 6242 0400 DB00     		lsls	r3, r3, #3
 6243 0402 5B1A     		subs	r3, r3, r1
 6244 0404 1B01     		lsls	r3, r3, #4
 6245 0406 1344     		add	r3, r3, r2
 6246 0408 E133     		adds	r3, r3, #225
 6247 040a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6248 040c 002B     		cmp	r3, #0
 6249 040e 04D0     		beq	.L405
1935:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6250              		.loc 1 1935 0
 6251 0410 1B4B     		ldr	r3, .L488+4
 6252 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6253 0414 1846     		mov	r0, r3
 6254 0416 FFF7FEFF 		bl	pwm_limit_search
 6255              	.L405:
1933:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6256              		.loc 1 1933 0 discriminator 2
 6257 041a 194B     		ldr	r3, .L488+4
 6258 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6259 041e 0133     		adds	r3, r3, #1
 6260 0420 DAB2     		uxtb	r2, r3
 6261 0422 174B     		ldr	r3, .L488+4
 6262 0424 1A70     		strb	r2, [r3]
 6263              	.L404:
1933:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6264              		.loc 1 1933 0 is_stmt 0 discriminator 1
 6265 0426 164B     		ldr	r3, .L488+4
 6266 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6267 042a 012B     		cmp	r3, #1
 6268 042c E3D9     		bls	.L406
1936:..\src/interruptions.c ****         }
1937:..\src/interruptions.c ****         
1938:..\src/interruptions.c ****         // Filter and Set currents
1939:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6269              		.loc 1 1939 0 is_stmt 1
 6270 042e 174B     		ldr	r3, .L488+16
 6271 0430 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6272 0434 002B     		cmp	r3, #0
 6273 0436 3FD1     		bne	.L407
1940:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6274              		.loc 1 1940 0
 6275 0438 144B     		ldr	r3, .L488+16
 6276 043a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6277 043e 1C46     		mov	r4, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 148


 6278 0440 1A4B     		ldr	r3, .L488+48
 6279 0442 B3F90230 		ldrsh	r3, [r3, #2]
 6280 0446 A3F5CE63 		sub	r3, r3, #1648
 6281 044a 45F66A02 		movw	r2, #22634
 6282 044e 02FB03F3 		mul	r3, r2, r3
 6283 0452 5B13     		asrs	r3, r3, #13
 6284 0454 1BB2     		sxth	r3, r3
 6285 0456 1A46     		mov	r2, r3
 6286 0458 154B     		ldr	r3, .L488+52
 6287 045a 93F90030 		ldrsb	r3, [r3]
 6288 045e 03FB02F3 		mul	r3, r3, r2
 6289 0462 1449     		ldr	r1, .L488+56
 6290 0464 1846     		mov	r0, r3
 6291 0466 FFF7FEFF 		bl	filter
 6292 046a 0146     		mov	r1, r0
 6293 046c 084A     		ldr	r2, .L488+20
 6294 046e 3423     		movs	r3, #52
 6295 0470 03FB04F3 		mul	r3, r3, r4
 6296 0474 1344     		add	r3, r3, r2
 6297 0476 0C33     		adds	r3, r3, #12
 6298 0478 1960     		str	r1, [r3]
 6299 047a 39E0     		b	.L408
 6300              	.L489:
 6301              		.align	2
 6302              	.L488:
 6303 047c 00000000 		.word	c_mem
 6304 0480 7A010000 		.word	idx.10572
 6305 0484 00000000 		.word	g_ref
 6306 0488 00000000 		.word	dev_tension
 6307 048c 00000000 		.word	g_mem
 6308 0490 00000000 		.word	g_meas
 6309 0494 00000000 		.word	g_emg_meas
 6310 0498 7C010000 		.word	v_count.10571
 6311 049c 00000000 		.word	tension_valid
 6312 04a0 78010000 		.word	count.10570
 6313 04a4 00000000 		.word	filt_v
 6314 04a8 00000000 		.word	dev_tension_f
 6315 04ac 00000000 		.word	ADC_buf
 6316 04b0 00000000 		.word	pwm_sign
 6317 04b4 00000000 		.word	filt_i
 6318              	.L407:
1941:..\src/interruptions.c ****         } else { // [GS]
1942:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6319              		.loc 1 1942 0
 6320 04b8 B64B     		ldr	r3, .L490
 6321 04ba 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6322 04be 1846     		mov	r0, r3
 6323 04c0 B54B     		ldr	r3, .L490+4
 6324 04c2 B3F90230 		ldrsh	r3, [r3, #2]
 6325 04c6 A3F26362 		subw	r2, r3, #1635
 6326 04ca 1346     		mov	r3, r2
 6327 04cc 1B01     		lsls	r3, r3, #4
 6328 04ce 9B1A     		subs	r3, r3, r2
 6329 04d0 5B01     		lsls	r3, r3, #5
 6330 04d2 1B11     		asrs	r3, r3, #4
 6331 04d4 1BB2     		sxth	r3, r3
 6332 04d6 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 149


 6333 04d8 B04B     		ldr	r3, .L490+8
 6334 04da 93F90030 		ldrsb	r3, [r3]
 6335 04de 03FB02F2 		mul	r2, r3, r2
 6336 04e2 AF49     		ldr	r1, .L490+12
 6337 04e4 3423     		movs	r3, #52
 6338 04e6 03FB00F3 		mul	r3, r3, r0
 6339 04ea 0B44     		add	r3, r3, r1
 6340 04ec 0C33     		adds	r3, r3, #12
 6341 04ee 1A60     		str	r2, [r3]
 6342              	.L408:
1943:..\src/interruptions.c ****         }  
1944:..\src/interruptions.c **** 
1945:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1946:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6343              		.loc 1 1946 0
 6344 04f0 A84B     		ldr	r3, .L490
 6345 04f2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6346 04f6 1D46     		mov	r5, r3
 6347 04f8 A64B     		ldr	r3, .L490
 6348 04fa 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6349 04fe 1946     		mov	r1, r3
 6350 0500 A74A     		ldr	r2, .L490+12
 6351 0502 3423     		movs	r3, #52
 6352 0504 03FB01F3 		mul	r3, r3, r1
 6353 0508 1344     		add	r3, r3, r2
 6354 050a 0C33     		adds	r3, r3, #12
 6355 050c 1C68     		ldr	r4, [r3]
 6356 050e A14B     		ldr	r3, .L490
 6357 0510 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6358 0514 1946     		mov	r1, r3
 6359 0516 A24A     		ldr	r2, .L490+12
 6360 0518 3423     		movs	r3, #52
 6361 051a 03FB01F3 		mul	r3, r3, r1
 6362 051e 1344     		add	r3, r3, r2
 6363 0520 1A68     		ldr	r2, [r3]
 6364 0522 9C4B     		ldr	r3, .L490
 6365 0524 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6366 0528 1846     		mov	r0, r3
 6367 052a 9A49     		ldr	r1, .L490
 6368 052c 0346     		mov	r3, r0
 6369 052e 5B00     		lsls	r3, r3, #1
 6370 0530 0344     		add	r3, r3, r0
 6371 0532 1B01     		lsls	r3, r3, #4
 6372 0534 0B44     		add	r3, r3, r1
 6373 0536 03F29513 		addw	r3, r3, #405
 6374 053a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6375 053c 42FA03F6 		asr	r6, r2, r3
 6376 0540 944B     		ldr	r3, .L490
 6377 0542 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6378 0546 1946     		mov	r1, r3
 6379 0548 954A     		ldr	r2, .L490+12
 6380 054a 3423     		movs	r3, #52
 6381 054c 03FB01F3 		mul	r3, r3, r1
 6382 0550 1344     		add	r3, r3, r2
 6383 0552 1C33     		adds	r3, r3, #28
 6384 0554 1A68     		ldr	r2, [r3]
 6385 0556 8F4B     		ldr	r3, .L490
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 150


 6386 0558 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6387 055c 1846     		mov	r0, r3
 6388 055e 8D49     		ldr	r1, .L490
 6389 0560 0346     		mov	r3, r0
 6390 0562 5B00     		lsls	r3, r3, #1
 6391 0564 0344     		add	r3, r3, r0
 6392 0566 1B01     		lsls	r3, r3, #4
 6393 0568 0B44     		add	r3, r3, r1
 6394 056a 03F29513 		addw	r3, r3, #405
 6395 056e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6396 0570 42FA03FE 		asr	lr, r2, r3
 6397 0574 8B4B     		ldr	r3, .L490+16
 6398 0576 1A68     		ldr	r2, [r3]
 6399 0578 864B     		ldr	r3, .L490
 6400 057a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6401 057e 1846     		mov	r0, r3
 6402 0580 8449     		ldr	r1, .L490
 6403 0582 0346     		mov	r3, r0
 6404 0584 5B00     		lsls	r3, r3, #1
 6405 0586 0344     		add	r3, r3, r0
 6406 0588 1B01     		lsls	r3, r3, #4
 6407 058a 0B44     		add	r3, r3, r1
 6408 058c 03F29513 		addw	r3, r3, #405
 6409 0590 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6410 0592 42FA03F3 		asr	r3, r2, r3
 6411 0596 7246     		mov	r2, lr
 6412 0598 3146     		mov	r1, r6
 6413 059a 0020     		movs	r0, #0
 6414 059c FFF7FEFF 		bl	curr_estim
 6415 05a0 0346     		mov	r3, r0
 6416 05a2 E31A     		subs	r3, r4, r3
 6417 05a4 8049     		ldr	r1, .L490+20
 6418 05a6 1846     		mov	r0, r3
 6419 05a8 FFF7FEFF 		bl	filter
 6420 05ac 0346     		mov	r3, r0
 6421 05ae 1BB2     		sxth	r3, r3
 6422 05b0 1946     		mov	r1, r3
 6423 05b2 7B4A     		ldr	r2, .L490+12
 6424 05b4 3423     		movs	r3, #52
 6425 05b6 03FB05F3 		mul	r3, r3, r5
 6426 05ba 1344     		add	r3, r3, r2
 6427 05bc 1033     		adds	r3, r3, #16
 6428 05be 1960     		str	r1, [r3]
1947:..\src/interruptions.c ****         
1948:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1949:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6429              		.loc 1 1949 0
 6430 05c0 7A4B     		ldr	r3, .L490+24
 6431 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6432 05c4 042B     		cmp	r3, #4
 6433 05c6 40F2AB80 		bls	.L409
1950:..\src/interruptions.c ****             // Filter and Set currents
1951:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6434              		.loc 1 1951 0
 6435 05ca 724B     		ldr	r3, .L490
 6436 05cc 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6437 05d0 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 151


 6438 05d2 21D1     		bne	.L410
1952:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6439              		.loc 1 1952 0
 6440 05d4 6F4B     		ldr	r3, .L490
 6441 05d6 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6442 05da 1C46     		mov	r4, r3
 6443 05dc 6E4B     		ldr	r3, .L490+4
 6444 05de B3F90A30 		ldrsh	r3, [r3, #10]
 6445 05e2 A3F5CE63 		sub	r3, r3, #1648
 6446 05e6 45F66A02 		movw	r2, #22634
 6447 05ea 02FB03F3 		mul	r3, r2, r3
 6448 05ee 5B13     		asrs	r3, r3, #13
 6449 05f0 1BB2     		sxth	r3, r3
 6450 05f2 1A46     		mov	r2, r3
 6451 05f4 694B     		ldr	r3, .L490+8
 6452 05f6 93F90030 		ldrsb	r3, [r3]
 6453 05fa 03FB02F3 		mul	r3, r3, r2
 6454 05fe 6C49     		ldr	r1, .L490+28
 6455 0600 1846     		mov	r0, r3
 6456 0602 FFF7FEFF 		bl	filter
 6457 0606 0146     		mov	r1, r0
 6458 0608 654A     		ldr	r2, .L490+12
 6459 060a 3423     		movs	r3, #52
 6460 060c 03FB04F3 		mul	r3, r3, r4
 6461 0610 1344     		add	r3, r3, r2
 6462 0612 0C33     		adds	r3, r3, #12
 6463 0614 1960     		str	r1, [r3]
 6464 0616 1BE0     		b	.L411
 6465              	.L410:
1953:..\src/interruptions.c ****             } else { // [GS]
1954:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6466              		.loc 1 1954 0
 6467 0618 5E4B     		ldr	r3, .L490
 6468 061a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6469 061e 1846     		mov	r0, r3
 6470 0620 5D4B     		ldr	r3, .L490+4
 6471 0622 B3F90A30 		ldrsh	r3, [r3, #10]
 6472 0626 A3F26362 		subw	r2, r3, #1635
 6473 062a 1346     		mov	r3, r2
 6474 062c 1B01     		lsls	r3, r3, #4
 6475 062e 9B1A     		subs	r3, r3, r2
 6476 0630 5B01     		lsls	r3, r3, #5
 6477 0632 1B11     		asrs	r3, r3, #4
 6478 0634 1BB2     		sxth	r3, r3
 6479 0636 1A46     		mov	r2, r3
 6480 0638 584B     		ldr	r3, .L490+8
 6481 063a 93F90030 		ldrsb	r3, [r3]
 6482 063e 03FB02F2 		mul	r2, r3, r2
 6483 0642 5749     		ldr	r1, .L490+12
 6484 0644 3423     		movs	r3, #52
 6485 0646 03FB00F3 		mul	r3, r3, r0
 6486 064a 0B44     		add	r3, r3, r1
 6487 064c 0C33     		adds	r3, r3, #12
 6488 064e 1A60     		str	r2, [r3]
 6489              	.L411:
1955:..\src/interruptions.c ****             }  
1956:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 152


1957:..\src/interruptions.c ****             
1958:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6490              		.loc 1 1958 0
 6491 0650 504B     		ldr	r3, .L490
 6492 0652 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6493 0656 1D46     		mov	r5, r3
 6494 0658 4E4B     		ldr	r3, .L490
 6495 065a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6496 065e 1946     		mov	r1, r3
 6497 0660 4F4A     		ldr	r2, .L490+12
 6498 0662 3423     		movs	r3, #52
 6499 0664 03FB01F3 		mul	r3, r3, r1
 6500 0668 1344     		add	r3, r3, r2
 6501 066a 0C33     		adds	r3, r3, #12
 6502 066c 1C68     		ldr	r4, [r3]
 6503 066e 494B     		ldr	r3, .L490
 6504 0670 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6505 0674 1946     		mov	r1, r3
 6506 0676 4A4A     		ldr	r2, .L490+12
 6507 0678 3423     		movs	r3, #52
 6508 067a 03FB01F3 		mul	r3, r3, r1
 6509 067e 1344     		add	r3, r3, r2
 6510 0680 1A68     		ldr	r2, [r3]
 6511 0682 444B     		ldr	r3, .L490
 6512 0684 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6513 0688 1846     		mov	r0, r3
 6514 068a 4249     		ldr	r1, .L490
 6515 068c 0346     		mov	r3, r0
 6516 068e 5B00     		lsls	r3, r3, #1
 6517 0690 0344     		add	r3, r3, r0
 6518 0692 1B01     		lsls	r3, r3, #4
 6519 0694 0B44     		add	r3, r3, r1
 6520 0696 03F29513 		addw	r3, r3, #405
 6521 069a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6522 069c 42FA03F6 		asr	r6, r2, r3
 6523 06a0 3C4B     		ldr	r3, .L490
 6524 06a2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6525 06a6 1946     		mov	r1, r3
 6526 06a8 3D4A     		ldr	r2, .L490+12
 6527 06aa 3423     		movs	r3, #52
 6528 06ac 03FB01F3 		mul	r3, r3, r1
 6529 06b0 1344     		add	r3, r3, r2
 6530 06b2 1C33     		adds	r3, r3, #28
 6531 06b4 1A68     		ldr	r2, [r3]
 6532 06b6 374B     		ldr	r3, .L490
 6533 06b8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6534 06bc 1846     		mov	r0, r3
 6535 06be 3549     		ldr	r1, .L490
 6536 06c0 0346     		mov	r3, r0
 6537 06c2 5B00     		lsls	r3, r3, #1
 6538 06c4 0344     		add	r3, r3, r0
 6539 06c6 1B01     		lsls	r3, r3, #4
 6540 06c8 0B44     		add	r3, r3, r1
 6541 06ca 03F29513 		addw	r3, r3, #405
 6542 06ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6543 06d0 42FA03FE 		asr	lr, r2, r3
 6544 06d4 334B     		ldr	r3, .L490+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 153


 6545 06d6 1A69     		ldr	r2, [r3, #16]
 6546 06d8 2E4B     		ldr	r3, .L490
 6547 06da 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6548 06de 1846     		mov	r0, r3
 6549 06e0 2C49     		ldr	r1, .L490
 6550 06e2 0346     		mov	r3, r0
 6551 06e4 5B00     		lsls	r3, r3, #1
 6552 06e6 0344     		add	r3, r3, r0
 6553 06e8 1B01     		lsls	r3, r3, #4
 6554 06ea 0B44     		add	r3, r3, r1
 6555 06ec 03F29513 		addw	r3, r3, #405
 6556 06f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6557 06f2 42FA03F3 		asr	r3, r2, r3
 6558 06f6 7246     		mov	r2, lr
 6559 06f8 3146     		mov	r1, r6
 6560 06fa 0120     		movs	r0, #1
 6561 06fc FFF7FEFF 		bl	curr_estim
 6562 0700 0346     		mov	r3, r0
 6563 0702 E31A     		subs	r3, r4, r3
 6564 0704 2B49     		ldr	r1, .L490+32
 6565 0706 1846     		mov	r0, r3
 6566 0708 FFF7FEFF 		bl	filter
 6567 070c 0346     		mov	r3, r0
 6568 070e 1BB2     		sxth	r3, r3
 6569 0710 1946     		mov	r1, r3
 6570 0712 234A     		ldr	r2, .L490+12
 6571 0714 3423     		movs	r3, #52
 6572 0716 03FB05F3 		mul	r3, r3, r5
 6573 071a 1344     		add	r3, r3, r2
 6574 071c 1033     		adds	r3, r3, #16
 6575 071e 1960     		str	r1, [r3]
 6576              	.L409:
1959:..\src/interruptions.c ****         }
1960:..\src/interruptions.c ****     
1961:..\src/interruptions.c ****         // Check Interrupt 
1962:..\src/interruptions.c ****     
1963:..\src/interruptions.c ****         if (interrupt_flag){
 6577              		.loc 1 1963 0
 6578 0720 254B     		ldr	r3, .L490+36
 6579 0722 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6580 0724 002B     		cmp	r3, #0
 6581 0726 06D0     		beq	.L398
1964:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6582              		.loc 1 1964 0
 6583 0728 234B     		ldr	r3, .L490+36
 6584 072a 0022     		movs	r2, #0
 6585 072c 1A70     		strb	r2, [r3]
1965:..\src/interruptions.c ****             interrupt_manager();
 6586              		.loc 1 1965 0
 6587 072e FFF7FEFF 		bl	interrupt_manager
 6588 0732 00E0     		b	.L398
 6589              	.L475:
1875:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6590              		.loc 1 1875 0
 6591 0734 00BF     		nop
 6592              	.L398:
1966:..\src/interruptions.c ****         }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 154


1967:..\src/interruptions.c **** 
1968:..\src/interruptions.c ****     }
1969:..\src/interruptions.c ****     
1970:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1971:..\src/interruptions.c ****         
1972:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1973:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6593              		.loc 1 1973 0
 6594 0736 214B     		ldr	r3, .L490+40
 6595 0738 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 6596 073c 002B     		cmp	r3, #0
 6597 073e 05D1     		bne	.L412
1974:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6598              		.loc 1 1974 0
 6599 0740 1F4B     		ldr	r3, .L490+44
 6600 0742 0022     		movs	r2, #0
 6601 0744 1A70     		strb	r2, [r3]
1975:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6602              		.loc 1 1975 0
 6603 0746 1F4B     		ldr	r3, .L490+48
 6604 0748 0022     		movs	r2, #0
 6605 074a 1A70     		strb	r2, [r3]
 6606              	.L412:
1976:..\src/interruptions.c ****     }
1977:..\src/interruptions.c **** 
1978:..\src/interruptions.c ****     // EMG 1 calibration state machine
1979:..\src/interruptions.c ****    
1980:..\src/interruptions.c ****     // Calibration state machine
1981:..\src/interruptions.c ****     switch(emg_1_status) {
 6607              		.loc 1 1981 0
 6608 074c 1C4B     		ldr	r3, .L490+44
 6609 074e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6610 0750 032B     		cmp	r3, #3
 6611 0752 00F2F680 		bhi	.L476
 6612 0756 01A2     		adr	r2, .L415
 6613 0758 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6614              		.p2align 2
 6615              	.L415:
 6616 075c 6D070000 		.word	.L414+1
 6617 0760 47080000 		.word	.L416+1
 6618 0764 5D080000 		.word	.L417+1
 6619 0768 99080000 		.word	.L418+1
 6620              		.p2align 1
 6621              	.L414:
1982:..\src/interruptions.c ****         case NORMAL: // normal execution
1983:..\src/interruptions.c ****             
1984:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 6622              		.loc 1 1984 0
 6623 076c 094B     		ldr	r3, .L490
 6624 076e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6625 0772 022B     		cmp	r3, #2
 6626 0774 28D0     		beq	.L419
1985:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6627              		.loc 1 1985 0
 6628 0776 114B     		ldr	r3, .L490+40
 6629 0778 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6630 077c 0233     		adds	r3, r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 155


 6631 077e 064A     		ldr	r2, .L490+4
 6632 0780 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6633 0784 A3F26763 		subw	r3, r3, #1639
 6634 0788 5722     		movs	r2, #87
 6635 078a 02FB03F3 		mul	r3, r2, r3
 6636 078e 5B11     		asrs	r3, r3, #5
 6637 0790 7B60     		str	r3, [r7, #4]
 6638 0792 21E0     		b	.L420
 6639              	.L491:
 6640              		.align	2
 6641              	.L490:
 6642 0794 00000000 		.word	g_mem
 6643 0798 00000000 		.word	ADC_buf
 6644 079c 00000000 		.word	pwm_sign
 6645 07a0 00000000 		.word	g_meas
 6646 07a4 00000000 		.word	g_ref
 6647 07a8 00000000 		.word	filt_curr_diff
 6648 07ac 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6649 07b0 08000000 		.word	filt_i+8
 6650 07b4 08000000 		.word	filt_curr_diff+8
 6651 07b8 00000000 		.word	interrupt_flag
 6652 07bc 00000000 		.word	c_mem
 6653 07c0 00000000 		.word	emg_1_status
 6654 07c4 00000000 		.word	emg_2_status
 6655              	.L419:
1986:..\src/interruptions.c ****             }
1987:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
1988:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 6656              		.loc 1 1988 0
 6657 07c8 AF4B     		ldr	r3, .L492
 6658 07ca 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6659 07ce 0233     		adds	r3, r3, #2
 6660 07d0 AE4A     		ldr	r2, .L492+4
 6661 07d2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6662 07d6 7B60     		str	r3, [r7, #4]
 6663              	.L420:
1989:..\src/interruptions.c ****             }
1990:..\src/interruptions.c ****             
1991:..\src/interruptions.c ****             if (i_aux < 0) 
 6664              		.loc 1 1991 0
 6665 07d8 7B68     		ldr	r3, [r7, #4]
 6666 07da 002B     		cmp	r3, #0
 6667 07dc 01DA     		bge	.L421
1992:..\src/interruptions.c ****                 i_aux = 0;
 6668              		.loc 1 1992 0
 6669 07de 0023     		movs	r3, #0
 6670 07e0 7B60     		str	r3, [r7, #4]
 6671              	.L421:
1993:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6672              		.loc 1 1993 0
 6673 07e2 AB49     		ldr	r1, .L492+8
 6674 07e4 7868     		ldr	r0, [r7, #4]
 6675 07e6 FFF7FEFF 		bl	filter
 6676 07ea 7860     		str	r0, [r7, #4]
1994:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6677              		.loc 1 1994 0
 6678 07ec 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 156


 6679 07ee 9B02     		lsls	r3, r3, #10
 6680 07f0 1A46     		mov	r2, r3
 6681 07f2 A84B     		ldr	r3, .L492+12
 6682 07f4 D3F8F431 		ldr	r3, [r3, #500]
 6683 07f8 B2FBF3F3 		udiv	r3, r2, r3
 6684 07fc 7B60     		str	r3, [r7, #4]
1995:..\src/interruptions.c **** 
1996:..\src/interruptions.c ****             if (interrupt_flag){
 6685              		.loc 1 1996 0
 6686 07fe A64B     		ldr	r3, .L492+16
 6687 0800 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6688 0802 002B     		cmp	r3, #0
 6689 0804 04D0     		beq	.L422
1997:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6690              		.loc 1 1997 0
 6691 0806 A44B     		ldr	r3, .L492+16
 6692 0808 0022     		movs	r2, #0
 6693 080a 1A70     		strb	r2, [r3]
1998:..\src/interruptions.c ****                 interrupt_manager();
 6694              		.loc 1 1998 0
 6695 080c FFF7FEFF 		bl	interrupt_manager
 6696              	.L422:
1999:..\src/interruptions.c ****             }
2000:..\src/interruptions.c ****             //Saturation
2001:..\src/interruptions.c ****             if (i_aux < 0)
 6697              		.loc 1 2001 0
 6698 0810 7B68     		ldr	r3, [r7, #4]
 6699 0812 002B     		cmp	r3, #0
 6700 0814 02DA     		bge	.L423
2002:..\src/interruptions.c ****                 i_aux = 0;
 6701              		.loc 1 2002 0
 6702 0816 0023     		movs	r3, #0
 6703 0818 7B60     		str	r3, [r7, #4]
 6704 081a 06E0     		b	.L424
 6705              	.L423:
2003:..\src/interruptions.c ****             else 
2004:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6706              		.loc 1 2004 0
 6707 081c 7B68     		ldr	r3, [r7, #4]
 6708 081e B3F5806F 		cmp	r3, #1024
 6709 0822 02DD     		ble	.L424
2005:..\src/interruptions.c ****                     i_aux = 1024;
 6710              		.loc 1 2005 0
 6711 0824 4FF48063 		mov	r3, #1024
 6712 0828 7B60     		str	r3, [r7, #4]
 6713              	.L424:
2006:..\src/interruptions.c ****             
2007:..\src/interruptions.c ****             g_emg_meas.emg[0] = i_aux;
 6714              		.loc 1 2007 0
 6715 082a 9C4A     		ldr	r2, .L492+20
 6716 082c 7B68     		ldr	r3, [r7, #4]
 6717 082e 1360     		str	r3, [r2]
2008:..\src/interruptions.c **** 
2009:..\src/interruptions.c ****             if (interrupt_flag){
 6718              		.loc 1 2009 0
 6719 0830 994B     		ldr	r3, .L492+16
 6720 0832 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 157


 6721 0834 002B     		cmp	r3, #0
 6722 0836 00F08680 		beq	.L477
2010:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6723              		.loc 1 2010 0
 6724 083a 974B     		ldr	r3, .L492+16
 6725 083c 0022     		movs	r2, #0
 6726 083e 1A70     		strb	r2, [r3]
2011:..\src/interruptions.c ****                 interrupt_manager();
 6727              		.loc 1 2011 0
 6728 0840 FFF7FEFF 		bl	interrupt_manager
2012:..\src/interruptions.c ****             }
2013:..\src/interruptions.c ****             
2014:..\src/interruptions.c ****             break;
 6729              		.loc 1 2014 0
 6730 0844 7FE0     		b	.L477
 6731              	.L416:
2015:..\src/interruptions.c **** 
2016:..\src/interruptions.c ****         case RESET: // reset variables
2017:..\src/interruptions.c ****             emg_counter_1 = 0;
 6732              		.loc 1 2017 0
 6733 0846 964B     		ldr	r3, .L492+24
 6734 0848 0022     		movs	r2, #0
 6735 084a 1A80     		strh	r2, [r3]	@ movhi
2018:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 6736              		.loc 1 2018 0
 6737 084c 914B     		ldr	r3, .L492+12
 6738 084e 0022     		movs	r2, #0
 6739 0850 C3F8F421 		str	r2, [r3, #500]
2019:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6740              		.loc 1 2019 0
 6741 0854 934B     		ldr	r3, .L492+28
 6742 0856 0222     		movs	r2, #2
 6743 0858 1A70     		strb	r2, [r3]
2020:..\src/interruptions.c ****             break;
 6744              		.loc 1 2020 0
 6745 085a 79E0     		b	.L426
 6746              	.L417:
2021:..\src/interruptions.c **** 
2022:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2023:..\src/interruptions.c ****             emg_counter_1++;
 6747              		.loc 1 2023 0
 6748 085c 904B     		ldr	r3, .L492+24
 6749 085e 1B88     		ldrh	r3, [r3]
 6750 0860 0133     		adds	r3, r3, #1
 6751 0862 9AB2     		uxth	r2, r3
 6752 0864 8E4B     		ldr	r3, .L492+24
 6753 0866 1A80     		strh	r2, [r3]	@ movhi
2024:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6754              		.loc 1 2024 0
 6755 0868 8D4B     		ldr	r3, .L492+24
 6756 086a 1B88     		ldrh	r3, [r3]
 6757 086c B3F5FA7F 		cmp	r3, #500
 6758 0870 6BD1     		bne	.L478
2025:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6759              		.loc 1 2025 0
 6760 0872 8B4B     		ldr	r3, .L492+24
 6761 0874 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 158


 6762 0876 1A80     		strh	r2, [r3]	@ movhi
2026:..\src/interruptions.c ****                 LED_control(1);
 6763              		.loc 1 2026 0
 6764 0878 0120     		movs	r0, #1
 6765 087a FFF7FEFF 		bl	LED_control
2027:..\src/interruptions.c **** 				
2028:..\src/interruptions.c ****                 if (interrupt_flag){
 6766              		.loc 1 2028 0
 6767 087e 864B     		ldr	r3, .L492+16
 6768 0880 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6769 0882 002B     		cmp	r3, #0
 6770 0884 04D0     		beq	.L428
2029:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6771              		.loc 1 2029 0
 6772 0886 844B     		ldr	r3, .L492+16
 6773 0888 0022     		movs	r2, #0
 6774 088a 1A70     		strb	r2, [r3]
2030:..\src/interruptions.c ****                     interrupt_manager();
 6775              		.loc 1 2030 0
 6776 088c FFF7FEFF 		bl	interrupt_manager
 6777              	.L428:
2031:..\src/interruptions.c ****                 }
2032:..\src/interruptions.c ****                 
2033:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 6778              		.loc 1 2033 0
 6779 0890 844B     		ldr	r3, .L492+28
 6780 0892 0322     		movs	r2, #3
 6781 0894 1A70     		strb	r2, [r3]
2034:..\src/interruptions.c ****             }
2035:..\src/interruptions.c ****             break;
 6782              		.loc 1 2035 0
 6783 0896 58E0     		b	.L478
 6784              	.L418:
2036:..\src/interruptions.c **** 
2037:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2038:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2039:..\src/interruptions.c ****             emg_counter_1++;
 6785              		.loc 1 2039 0
 6786 0898 814B     		ldr	r3, .L492+24
 6787 089a 1B88     		ldrh	r3, [r3]
 6788 089c 0133     		adds	r3, r3, #1
 6789 089e 9AB2     		uxth	r2, r3
 6790 08a0 7F4B     		ldr	r3, .L492+24
 6791 08a2 1A80     		strh	r2, [r3]	@ movhi
2040:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6792              		.loc 1 2040 0
 6793 08a4 784B     		ldr	r3, .L492
 6794 08a6 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6795 08aa 0233     		adds	r3, r3, #2
 6796 08ac 774A     		ldr	r2, .L492+4
 6797 08ae 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6798 08b2 002B     		cmp	r3, #0
 6799 08b4 07DA     		bge	.L429
2041:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 6800              		.loc 1 2041 0
 6801 08b6 744B     		ldr	r3, .L492
 6802 08b8 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 159


 6803 08bc 0233     		adds	r3, r3, #2
 6804 08be 734A     		ldr	r2, .L492+4
 6805 08c0 0021     		movs	r1, #0
 6806 08c2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6807              	.L429:
2042:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6808              		.loc 1 2042 0
 6809 08c6 704B     		ldr	r3, .L492
 6810 08c8 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6811 08cc 0233     		adds	r3, r3, #2
 6812 08ce 6F4A     		ldr	r2, .L492+4
 6813 08d0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6814 08d4 6E49     		ldr	r1, .L492+8
 6815 08d6 1846     		mov	r0, r3
 6816 08d8 FFF7FEFF 		bl	filter
 6817 08dc 0246     		mov	r2, r0
 6818 08de 6D4B     		ldr	r3, .L492+12
 6819 08e0 D3F8F431 		ldr	r3, [r3, #500]
 6820 08e4 1344     		add	r3, r3, r2
 6821 08e6 6B4A     		ldr	r2, .L492+12
 6822 08e8 C2F8F431 		str	r3, [r2, #500]
2043:..\src/interruptions.c ****             
2044:..\src/interruptions.c ****             if (interrupt_flag){
 6823              		.loc 1 2044 0
 6824 08ec 6A4B     		ldr	r3, .L492+16
 6825 08ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6826 08f0 002B     		cmp	r3, #0
 6827 08f2 04D0     		beq	.L430
2045:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6828              		.loc 1 2045 0
 6829 08f4 684B     		ldr	r3, .L492+16
 6830 08f6 0022     		movs	r2, #0
 6831 08f8 1A70     		strb	r2, [r3]
2046:..\src/interruptions.c ****                 interrupt_manager();
 6832              		.loc 1 2046 0
 6833 08fa FFF7FEFF 		bl	interrupt_manager
 6834              	.L430:
2047:..\src/interruptions.c ****             }
2048:..\src/interruptions.c ****             
2049:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6835              		.loc 1 2049 0
 6836 08fe 684B     		ldr	r3, .L492+24
 6837 0900 1B88     		ldrh	r3, [r3]
 6838 0902 B3F57A7F 		cmp	r3, #1000
 6839 0906 22D1     		bne	.L479
2050:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6840              		.loc 1 2050 0
 6841 0908 624B     		ldr	r3, .L492+12
 6842 090a D3F8F431 		ldr	r3, [r3, #500]
 6843 090e 664A     		ldr	r2, .L492+32
 6844 0910 A2FB0323 		umull	r2, r3, r2, r3
 6845 0914 9B09     		lsrs	r3, r3, #6
 6846 0916 5F4A     		ldr	r2, .L492+12
 6847 0918 C2F8F431 		str	r3, [r2, #500]
2051:..\src/interruptions.c **** 
2052:..\src/interruptions.c ****                 if (interrupt_flag){
 6848              		.loc 1 2052 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 160


 6849 091c 5E4B     		ldr	r3, .L492+16
 6850 091e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6851 0920 002B     		cmp	r3, #0
 6852 0922 04D0     		beq	.L432
2053:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6853              		.loc 1 2053 0
 6854 0924 5C4B     		ldr	r3, .L492+16
 6855 0926 0022     		movs	r2, #0
 6856 0928 1A70     		strb	r2, [r3]
2054:..\src/interruptions.c ****                     interrupt_manager();
 6857              		.loc 1 2054 0
 6858 092a FFF7FEFF 		bl	interrupt_manager
 6859              	.L432:
2055:..\src/interruptions.c ****                 }                    
2056:..\src/interruptions.c ****                 
2057:..\src/interruptions.c ****                 LED_control(0);
 6860              		.loc 1 2057 0
 6861 092e 0020     		movs	r0, #0
 6862 0930 FFF7FEFF 		bl	LED_control
2058:..\src/interruptions.c **** 				
2059:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6863              		.loc 1 2059 0
 6864 0934 5A4B     		ldr	r3, .L492+24
 6865 0936 0022     		movs	r2, #0
 6866 0938 1A80     		strh	r2, [r3]	@ movhi
2060:..\src/interruptions.c **** 
2061:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6867              		.loc 1 2061 0
 6868 093a 5A4B     		ldr	r3, .L492+28
 6869 093c 0022     		movs	r2, #0
 6870 093e 1A70     		strb	r2, [r3]
2062:..\src/interruptions.c ****             }
2063:..\src/interruptions.c ****             break;
 6871              		.loc 1 2063 0
 6872 0940 05E0     		b	.L479
 6873              	.L476:
2064:..\src/interruptions.c **** 
2065:..\src/interruptions.c ****         default:
2066:..\src/interruptions.c ****             break;
 6874              		.loc 1 2066 0
 6875 0942 00BF     		nop
 6876 0944 04E0     		b	.L426
 6877              	.L477:
2014:..\src/interruptions.c **** 
 6878              		.loc 1 2014 0
 6879 0946 00BF     		nop
 6880 0948 02E0     		b	.L426
 6881              	.L478:
2035:..\src/interruptions.c **** 
 6882              		.loc 1 2035 0
 6883 094a 00BF     		nop
 6884 094c 00E0     		b	.L426
 6885              	.L479:
2063:..\src/interruptions.c **** 
 6886              		.loc 1 2063 0
 6887 094e 00BF     		nop
 6888              	.L426:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 161


2067:..\src/interruptions.c ****     }
2068:..\src/interruptions.c **** 
2069:..\src/interruptions.c ****     if (interrupt_flag){
 6889              		.loc 1 2069 0
 6890 0950 514B     		ldr	r3, .L492+16
 6891 0952 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6892 0954 002B     		cmp	r3, #0
 6893 0956 04D0     		beq	.L433
2070:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6894              		.loc 1 2070 0
 6895 0958 4F4B     		ldr	r3, .L492+16
 6896 095a 0022     		movs	r2, #0
 6897 095c 1A70     		strb	r2, [r3]
2071:..\src/interruptions.c ****         interrupt_manager();
 6898              		.loc 1 2071 0
 6899 095e FFF7FEFF 		bl	interrupt_manager
 6900              	.L433:
2072:..\src/interruptions.c ****     }
2073:..\src/interruptions.c ****     // EMG 2 calibration state machine
2074:..\src/interruptions.c ****     switch(emg_2_status) {
 6901              		.loc 1 2074 0
 6902 0962 524B     		ldr	r3, .L492+36
 6903 0964 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6904 0966 052B     		cmp	r3, #5
 6905 0968 00F2B681 		bhi	.L480
 6906 096c 01A2     		adr	r2, .L436
 6907 096e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6908 0972 00BF     		.p2align 2
 6909              	.L436:
 6910 0974 8D090000 		.word	.L435+1
 6911 0978 230A0000 		.word	.L437+1
 6912 097c 4B0A0000 		.word	.L438+1
 6913 0980 B90A0000 		.word	.L439+1
 6914 0984 6B0B0000 		.word	.L440+1
 6915 0988 7D0B0000 		.word	.L441+1
 6916              		.p2align 1
 6917              	.L435:
2075:..\src/interruptions.c ****         case NORMAL: // normal execution
2076:..\src/interruptions.c ****         
2077:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB){
 6918              		.loc 1 2077 0
 6919 098c 414B     		ldr	r3, .L492+12
 6920 098e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6921 0992 022B     		cmp	r3, #2
 6922 0994 0FD0     		beq	.L442
2078:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6923              		.loc 1 2078 0
 6924 0996 3C4B     		ldr	r3, .L492
 6925 0998 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6926 099c C3F10303 		rsb	r3, r3, #3
 6927 09a0 3A4A     		ldr	r2, .L492+4
 6928 09a2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6929 09a6 A3F26763 		subw	r3, r3, #1639
 6930 09aa 5722     		movs	r2, #87
 6931 09ac 02FB03F3 		mul	r3, r2, r3
 6932 09b0 5B11     		asrs	r3, r3, #5
 6933 09b2 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 162


 6934 09b4 08E0     		b	.L443
 6935              	.L442:
2079:..\src/interruptions.c ****             }
2080:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2081:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 6936              		.loc 1 2081 0
 6937 09b6 344B     		ldr	r3, .L492
 6938 09b8 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6939 09bc C3F10303 		rsb	r3, r3, #3
 6940 09c0 324A     		ldr	r2, .L492+4
 6941 09c2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6942 09c6 7B60     		str	r3, [r7, #4]
 6943              	.L443:
2082:..\src/interruptions.c ****             }
2083:..\src/interruptions.c **** 
2084:..\src/interruptions.c ****             if (i_aux < 0)
 6944              		.loc 1 2084 0
 6945 09c8 7B68     		ldr	r3, [r7, #4]
 6946 09ca 002B     		cmp	r3, #0
 6947 09cc 01DA     		bge	.L444
2085:..\src/interruptions.c ****                 i_aux = 0;
 6948              		.loc 1 2085 0
 6949 09ce 0023     		movs	r3, #0
 6950 09d0 7B60     		str	r3, [r7, #4]
 6951              	.L444:
2086:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 6952              		.loc 1 2086 0
 6953 09d2 3749     		ldr	r1, .L492+40
 6954 09d4 7868     		ldr	r0, [r7, #4]
 6955 09d6 FFF7FEFF 		bl	filter
 6956 09da 7860     		str	r0, [r7, #4]
2087:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 6957              		.loc 1 2087 0
 6958 09dc 7B68     		ldr	r3, [r7, #4]
 6959 09de 9B02     		lsls	r3, r3, #10
 6960 09e0 1A46     		mov	r2, r3
 6961 09e2 2C4B     		ldr	r3, .L492+12
 6962 09e4 D3F8F831 		ldr	r3, [r3, #504]
 6963 09e8 B2FBF3F3 		udiv	r3, r2, r3
 6964 09ec 7B60     		str	r3, [r7, #4]
2088:..\src/interruptions.c **** 
2089:..\src/interruptions.c ****             if (interrupt_flag){
 6965              		.loc 1 2089 0
 6966 09ee 2A4B     		ldr	r3, .L492+16
 6967 09f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6968 09f2 002B     		cmp	r3, #0
 6969 09f4 04D0     		beq	.L445
2090:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6970              		.loc 1 2090 0
 6971 09f6 284B     		ldr	r3, .L492+16
 6972 09f8 0022     		movs	r2, #0
 6973 09fa 1A70     		strb	r2, [r3]
2091:..\src/interruptions.c ****                 interrupt_manager();
 6974              		.loc 1 2091 0
 6975 09fc FFF7FEFF 		bl	interrupt_manager
 6976              	.L445:
2092:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 163


2093:..\src/interruptions.c ****             
2094:..\src/interruptions.c ****             if (i_aux < 0) 
 6977              		.loc 1 2094 0
 6978 0a00 7B68     		ldr	r3, [r7, #4]
 6979 0a02 002B     		cmp	r3, #0
 6980 0a04 02DA     		bge	.L446
2095:..\src/interruptions.c ****                 i_aux = 0;
 6981              		.loc 1 2095 0
 6982 0a06 0023     		movs	r3, #0
 6983 0a08 7B60     		str	r3, [r7, #4]
 6984 0a0a 06E0     		b	.L447
 6985              	.L446:
2096:..\src/interruptions.c ****             else 
2097:..\src/interruptions.c ****                 if (i_aux > 1024)
 6986              		.loc 1 2097 0
 6987 0a0c 7B68     		ldr	r3, [r7, #4]
 6988 0a0e B3F5806F 		cmp	r3, #1024
 6989 0a12 02DD     		ble	.L447
2098:..\src/interruptions.c ****                     i_aux = 1024;
 6990              		.loc 1 2098 0
 6991 0a14 4FF48063 		mov	r3, #1024
 6992 0a18 7B60     		str	r3, [r7, #4]
 6993              	.L447:
2099:..\src/interruptions.c ****             
2100:..\src/interruptions.c ****             g_emg_meas.emg[1] = i_aux;
 6994              		.loc 1 2100 0
 6995 0a1a 204A     		ldr	r2, .L492+20
 6996 0a1c 7B68     		ldr	r3, [r7, #4]
 6997 0a1e 5360     		str	r3, [r2, #4]
2101:..\src/interruptions.c **** 
2102:..\src/interruptions.c ****             break;
 6998              		.loc 1 2102 0
 6999 0a20 63E1     		b	.L448
 7000              	.L437:
2103:..\src/interruptions.c **** 
2104:..\src/interruptions.c ****         case RESET: // reset variables
2105:..\src/interruptions.c ****             emg_counter_2 = 0;
 7001              		.loc 1 2105 0
 7002 0a22 244B     		ldr	r3, .L492+44
 7003 0a24 0022     		movs	r2, #0
 7004 0a26 1A80     		strh	r2, [r3]	@ movhi
2106:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7005              		.loc 1 2106 0
 7006 0a28 1A4B     		ldr	r3, .L492+12
 7007 0a2a 0022     		movs	r2, #0
 7008 0a2c C3F8F821 		str	r2, [r3, #504]
2107:..\src/interruptions.c **** 
2108:..\src/interruptions.c ****             if (interrupt_flag){
 7009              		.loc 1 2108 0
 7010 0a30 194B     		ldr	r3, .L492+16
 7011 0a32 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7012 0a34 002B     		cmp	r3, #0
 7013 0a36 04D0     		beq	.L449
2109:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7014              		.loc 1 2109 0
 7015 0a38 174B     		ldr	r3, .L492+16
 7016 0a3a 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 164


 7017 0a3c 1A70     		strb	r2, [r3]
2110:..\src/interruptions.c ****                 interrupt_manager();
 7018              		.loc 1 2110 0
 7019 0a3e FFF7FEFF 		bl	interrupt_manager
 7020              	.L449:
2111:..\src/interruptions.c ****             }
2112:..\src/interruptions.c ****             
2113:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7021              		.loc 1 2113 0
 7022 0a42 1A4B     		ldr	r3, .L492+36
 7023 0a44 0422     		movs	r2, #4
 7024 0a46 1A70     		strb	r2, [r3]
2114:..\src/interruptions.c ****             break;
 7025              		.loc 1 2114 0
 7026 0a48 4FE1     		b	.L448
 7027              	.L438:
2115:..\src/interruptions.c **** 
2116:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2117:..\src/interruptions.c ****             emg_counter_2++;
 7028              		.loc 1 2117 0
 7029 0a4a 1A4B     		ldr	r3, .L492+44
 7030 0a4c 1B88     		ldrh	r3, [r3]
 7031 0a4e 0133     		adds	r3, r3, #1
 7032 0a50 9AB2     		uxth	r2, r3
 7033 0a52 184B     		ldr	r3, .L492+44
 7034 0a54 1A80     		strh	r2, [r3]	@ movhi
2118:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7035              		.loc 1 2118 0
 7036 0a56 174B     		ldr	r3, .L492+44
 7037 0a58 1B88     		ldrh	r3, [r3]
 7038 0a5a B3F5FA7F 		cmp	r3, #500
 7039 0a5e 40F03D81 		bne	.L481
2119:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7040              		.loc 1 2119 0
 7041 0a62 144B     		ldr	r3, .L492+44
 7042 0a64 0022     		movs	r2, #0
 7043 0a66 1A80     		strh	r2, [r3]	@ movhi
2120:..\src/interruptions.c ****                 LED_control(1);
 7044              		.loc 1 2120 0
 7045 0a68 0120     		movs	r0, #1
 7046 0a6a FFF7FEFF 		bl	LED_control
2121:..\src/interruptions.c **** 
2122:..\src/interruptions.c ****                 if (interrupt_flag){
 7047              		.loc 1 2122 0
 7048 0a6e 0A4B     		ldr	r3, .L492+16
 7049 0a70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7050 0a72 002B     		cmp	r3, #0
 7051 0a74 04D0     		beq	.L451
2123:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7052              		.loc 1 2123 0
 7053 0a76 084B     		ldr	r3, .L492+16
 7054 0a78 0022     		movs	r2, #0
 7055 0a7a 1A70     		strb	r2, [r3]
2124:..\src/interruptions.c ****                     interrupt_manager();
 7056              		.loc 1 2124 0
 7057 0a7c FFF7FEFF 		bl	interrupt_manager
 7058              	.L451:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 165


2125:..\src/interruptions.c ****                 }
2126:..\src/interruptions.c ****                 
2127:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7059              		.loc 1 2127 0
 7060 0a80 0A4B     		ldr	r3, .L492+36
 7061 0a82 0322     		movs	r2, #3
 7062 0a84 1A70     		strb	r2, [r3]
2128:..\src/interruptions.c ****             }
2129:..\src/interruptions.c ****             break;
 7063              		.loc 1 2129 0
 7064 0a86 29E1     		b	.L481
 7065              	.L493:
 7066              		.align	2
 7067              	.L492:
 7068 0a88 00000000 		.word	c_mem
 7069 0a8c 00000000 		.word	ADC_buf
 7070 0a90 00000000 		.word	filt_emg
 7071 0a94 00000000 		.word	g_mem
 7072 0a98 00000000 		.word	interrupt_flag
 7073 0a9c 00000000 		.word	g_emg_meas
 7074 0aa0 80010000 		.word	emg_counter_1.10567
 7075 0aa4 00000000 		.word	emg_1_status
 7076 0aa8 D34D6210 		.word	274877907
 7077 0aac 00000000 		.word	emg_2_status
 7078 0ab0 08000000 		.word	filt_emg+8
 7079 0ab4 82010000 		.word	emg_counter_2.10568
 7080              	.L439:
2130:..\src/interruptions.c **** 
2131:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2132:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2133:..\src/interruptions.c ****             emg_counter_2++;
 7081              		.loc 1 2133 0
 7082 0ab8 AB4B     		ldr	r3, .L494
 7083 0aba 1B88     		ldrh	r3, [r3]
 7084 0abc 0133     		adds	r3, r3, #1
 7085 0abe 9AB2     		uxth	r2, r3
 7086 0ac0 A94B     		ldr	r3, .L494
 7087 0ac2 1A80     		strh	r2, [r3]	@ movhi
2134:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7088              		.loc 1 2134 0
 7089 0ac4 A94B     		ldr	r3, .L494+4
 7090 0ac6 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7091 0aca C3F10303 		rsb	r3, r3, #3
 7092 0ace A84A     		ldr	r2, .L494+8
 7093 0ad0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7094 0ad4 002B     		cmp	r3, #0
 7095 0ad6 08DA     		bge	.L452
2135:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7096              		.loc 1 2135 0
 7097 0ad8 A44B     		ldr	r3, .L494+4
 7098 0ada 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7099 0ade C3F10303 		rsb	r3, r3, #3
 7100 0ae2 A34A     		ldr	r2, .L494+8
 7101 0ae4 0021     		movs	r1, #0
 7102 0ae6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7103              	.L452:
2136:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 166


 7104              		.loc 1 2136 0
 7105 0aea A04B     		ldr	r3, .L494+4
 7106 0aec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7107 0af0 C3F10303 		rsb	r3, r3, #3
 7108 0af4 9E4A     		ldr	r2, .L494+8
 7109 0af6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7110 0afa 9E49     		ldr	r1, .L494+12
 7111 0afc 1846     		mov	r0, r3
 7112 0afe FFF7FEFF 		bl	filter
 7113 0b02 0246     		mov	r2, r0
 7114 0b04 9C4B     		ldr	r3, .L494+16
 7115 0b06 D3F8F831 		ldr	r3, [r3, #504]
 7116 0b0a 1344     		add	r3, r3, r2
 7117 0b0c 9A4A     		ldr	r2, .L494+16
 7118 0b0e C2F8F831 		str	r3, [r2, #504]
2137:..\src/interruptions.c **** 
2138:..\src/interruptions.c ****             if (interrupt_flag){
 7119              		.loc 1 2138 0
 7120 0b12 9A4B     		ldr	r3, .L494+20
 7121 0b14 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7122 0b16 002B     		cmp	r3, #0
 7123 0b18 04D0     		beq	.L453
2139:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7124              		.loc 1 2139 0
 7125 0b1a 984B     		ldr	r3, .L494+20
 7126 0b1c 0022     		movs	r2, #0
 7127 0b1e 1A70     		strb	r2, [r3]
2140:..\src/interruptions.c ****                 interrupt_manager();
 7128              		.loc 1 2140 0
 7129 0b20 FFF7FEFF 		bl	interrupt_manager
 7130              	.L453:
2141:..\src/interruptions.c ****             }
2142:..\src/interruptions.c ****             
2143:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7131              		.loc 1 2143 0
 7132 0b24 904B     		ldr	r3, .L494
 7133 0b26 1B88     		ldrh	r3, [r3]
 7134 0b28 B3F57A7F 		cmp	r3, #1000
 7135 0b2c 40F0D880 		bne	.L482
2144:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7136              		.loc 1 2144 0
 7137 0b30 914B     		ldr	r3, .L494+16
 7138 0b32 D3F8F831 		ldr	r3, [r3, #504]
 7139 0b36 924A     		ldr	r2, .L494+24
 7140 0b38 A2FB0323 		umull	r2, r3, r2, r3
 7141 0b3c 9B09     		lsrs	r3, r3, #6
 7142 0b3e 8E4A     		ldr	r2, .L494+16
 7143 0b40 C2F8F831 		str	r3, [r2, #504]
2145:..\src/interruptions.c ****                 LED_control(0);
 7144              		.loc 1 2145 0
 7145 0b44 0020     		movs	r0, #0
 7146 0b46 FFF7FEFF 		bl	LED_control
2146:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7147              		.loc 1 2146 0
 7148 0b4a 874B     		ldr	r3, .L494
 7149 0b4c 0022     		movs	r2, #0
 7150 0b4e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 167


2147:..\src/interruptions.c ****             
2148:..\src/interruptions.c ****                 if (interrupt_flag){
 7151              		.loc 1 2148 0
 7152 0b50 8A4B     		ldr	r3, .L494+20
 7153 0b52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7154 0b54 002B     		cmp	r3, #0
 7155 0b56 04D0     		beq	.L455
2149:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7156              		.loc 1 2149 0
 7157 0b58 884B     		ldr	r3, .L494+20
 7158 0b5a 0022     		movs	r2, #0
 7159 0b5c 1A70     		strb	r2, [r3]
2150:..\src/interruptions.c ****                     interrupt_manager();
 7160              		.loc 1 2150 0
 7161 0b5e FFF7FEFF 		bl	interrupt_manager
 7162              	.L455:
2151:..\src/interruptions.c ****                 }
2152:..\src/interruptions.c ****                 
2153:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7163              		.loc 1 2153 0
 7164 0b62 884B     		ldr	r3, .L494+28
 7165 0b64 0522     		movs	r2, #5
 7166 0b66 1A70     		strb	r2, [r3]
2154:..\src/interruptions.c ****             }
2155:..\src/interruptions.c ****             break;
 7167              		.loc 1 2155 0
 7168 0b68 BAE0     		b	.L482
 7169              	.L440:
2156:..\src/interruptions.c **** 
2157:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2158:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7170              		.loc 1 2158 0
 7171 0b6a 874B     		ldr	r3, .L494+32
 7172 0b6c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7173 0b6e 002B     		cmp	r3, #0
 7174 0b70 40F0B880 		bne	.L483
2159:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7175              		.loc 1 2159 0
 7176 0b74 834B     		ldr	r3, .L494+28
 7177 0b76 0222     		movs	r2, #2
 7178 0b78 1A70     		strb	r2, [r3]
2160:..\src/interruptions.c ****             break;
 7179              		.loc 1 2160 0
 7180 0b7a B3E0     		b	.L483
 7181              	.L441:
2161:..\src/interruptions.c **** 
2162:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2163:..\src/interruptions.c ****             emg_counter_2++;
 7182              		.loc 1 2163 0
 7183 0b7c 7A4B     		ldr	r3, .L494
 7184 0b7e 1B88     		ldrh	r3, [r3]
 7185 0b80 0133     		adds	r3, r3, #1
 7186 0b82 9AB2     		uxth	r2, r3
 7187 0b84 784B     		ldr	r3, .L494
 7188 0b86 1A80     		strh	r2, [r3]	@ movhi
2164:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7189              		.loc 1 2164 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 168


 7190 0b88 774B     		ldr	r3, .L494
 7191 0b8a 1B88     		ldrh	r3, [r3]
 7192 0b8c B3F5FA7F 		cmp	r3, #500
 7193 0b90 40F0AA80 		bne	.L484
2165:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7194              		.loc 1 2165 0
 7195 0b94 744B     		ldr	r3, .L494
 7196 0b96 0022     		movs	r2, #0
 7197 0b98 1A80     		strh	r2, [r3]	@ movhi
2166:..\src/interruptions.c ****                 
2167:..\src/interruptions.c ****                 if (interrupt_flag){
 7198              		.loc 1 2167 0
 7199 0b9a 784B     		ldr	r3, .L494+20
 7200 0b9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7201 0b9e 002B     		cmp	r3, #0
 7202 0ba0 04D0     		beq	.L458
2168:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7203              		.loc 1 2168 0
 7204 0ba2 764B     		ldr	r3, .L494+20
 7205 0ba4 0022     		movs	r2, #0
 7206 0ba6 1A70     		strb	r2, [r3]
2169:..\src/interruptions.c ****                     interrupt_manager();
 7207              		.loc 1 2169 0
 7208 0ba8 FFF7FEFF 		bl	interrupt_manager
 7209              	.L458:
2170:..\src/interruptions.c ****                 }
2171:..\src/interruptions.c ****                 
2172:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7210              		.loc 1 2172 0
 7211 0bac 774B     		ldr	r3, .L494+36
 7212 0bae 0022     		movs	r2, #0
 7213 0bb0 1A70     		strb	r2, [r3]
 7214 0bb2 85E0     		b	.L459
 7215              	.L463:
2173:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7216              		.loc 1 2173 0
 7217 0bb4 754B     		ldr	r3, .L494+36
 7218 0bb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7219 0bb8 1946     		mov	r1, r3
 7220 0bba 6C4A     		ldr	r2, .L494+4
 7221 0bbc 0B46     		mov	r3, r1
 7222 0bbe DB00     		lsls	r3, r3, #3
 7223 0bc0 5B1A     		subs	r3, r3, r1
 7224 0bc2 1B01     		lsls	r3, r3, #4
 7225 0bc4 1344     		add	r3, r3, r2
 7226 0bc6 03F58773 		add	r3, r3, #270
 7227 0bca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7228 0bcc 022B     		cmp	r3, #2
 7229 0bce 29D0     		beq	.L460
2174:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7230              		.loc 1 2174 0 discriminator 1
 7231 0bd0 6E4B     		ldr	r3, .L494+36
 7232 0bd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7233 0bd4 1946     		mov	r1, r3
 7234 0bd6 654A     		ldr	r2, .L494+4
 7235 0bd8 0B46     		mov	r3, r1
 7236 0bda DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 169


 7237 0bdc 5B1A     		subs	r3, r3, r1
 7238 0bde 1B01     		lsls	r3, r3, #4
 7239 0be0 1344     		add	r3, r3, r2
 7240 0be2 03F58773 		add	r3, r3, #270
 7241 0be6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2173:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7242              		.loc 1 2173 0 discriminator 1
 7243 0be8 032B     		cmp	r3, #3
 7244 0bea 1BD0     		beq	.L460
2175:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7245              		.loc 1 2175 0
 7246 0bec 674B     		ldr	r3, .L494+36
 7247 0bee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7248 0bf0 1946     		mov	r1, r3
 7249 0bf2 5E4A     		ldr	r2, .L494+4
 7250 0bf4 0B46     		mov	r3, r1
 7251 0bf6 DB00     		lsls	r3, r3, #3
 7252 0bf8 5B1A     		subs	r3, r3, r1
 7253 0bfa 1B01     		lsls	r3, r3, #4
 7254 0bfc 1344     		add	r3, r3, r2
 7255 0bfe 03F58773 		add	r3, r3, #270
 7256 0c02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2174:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7257              		.loc 1 2174 0
 7258 0c04 042B     		cmp	r3, #4
 7259 0c06 0DD0     		beq	.L460
2176:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 7260              		.loc 1 2176 0
 7261 0c08 604B     		ldr	r3, .L494+36
 7262 0c0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7263 0c0c 1946     		mov	r1, r3
 7264 0c0e 574A     		ldr	r2, .L494+4
 7265 0c10 0B46     		mov	r3, r1
 7266 0c12 DB00     		lsls	r3, r3, #3
 7267 0c14 5B1A     		subs	r3, r3, r1
 7268 0c16 1B01     		lsls	r3, r3, #4
 7269 0c18 1344     		add	r3, r3, r2
 7270 0c1a 03F58773 		add	r3, r3, #270
 7271 0c1e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2175:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7272              		.loc 1 2175 0
 7273 0c20 052B     		cmp	r3, #5
 7274 0c22 47D1     		bne	.L461
 7275              	.L460:
2177:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7276              		.loc 1 2177 0
 7277 0c24 594B     		ldr	r3, .L494+36
 7278 0c26 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7279 0c28 1946     		mov	r1, r3
 7280 0c2a 504A     		ldr	r2, .L494+4
 7281 0c2c 0B46     		mov	r3, r1
 7282 0c2e DB00     		lsls	r3, r3, #3
 7283 0c30 5B1A     		subs	r3, r3, r1
 7284 0c32 1B01     		lsls	r3, r3, #4
 7285 0c34 1344     		add	r3, r3, r2
 7286 0c36 03F20F13 		addw	r3, r3, #271
 7287 0c3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 170


 7288 0c3c 002B     		cmp	r3, #0
 7289 0c3e 19D1     		bne	.L462
2178:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7290              		.loc 1 2178 0
 7291 0c40 524B     		ldr	r3, .L494+36
 7292 0c42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7293 0c44 1846     		mov	r0, r3
 7294 0c46 514B     		ldr	r3, .L494+36
 7295 0c48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7296 0c4a 1946     		mov	r1, r3
 7297 0c4c 4A4A     		ldr	r2, .L494+16
 7298 0c4e 0B46     		mov	r3, r1
 7299 0c50 DB00     		lsls	r3, r3, #3
 7300 0c52 5B1A     		subs	r3, r3, r1
 7301 0c54 1B01     		lsls	r3, r3, #4
 7302 0c56 1344     		add	r3, r3, r2
 7303 0c58 03F58873 		add	r3, r3, #272
 7304 0c5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7305 0c5e 1946     		mov	r1, r3
 7306 0c60 4B4A     		ldr	r2, .L494+40
 7307 0c62 3423     		movs	r3, #52
 7308 0c64 03FB01F3 		mul	r3, r3, r1
 7309 0c68 1344     		add	r3, r3, r2
 7310 0c6a 1A68     		ldr	r2, [r3]
 7311 0c6c 4949     		ldr	r1, .L494+44
 7312 0c6e 0301     		lsls	r3, r0, #4
 7313 0c70 0B44     		add	r3, r3, r1
 7314 0c72 1A60     		str	r2, [r3]
 7315              	.L462:
2179:..\src/interruptions.c ****                         }
2180:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7316              		.loc 1 2180 0
 7317 0c74 454B     		ldr	r3, .L494+36
 7318 0c76 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7319 0c78 1846     		mov	r0, r3
 7320 0c7a 444B     		ldr	r3, .L494+36
 7321 0c7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7322 0c7e 1946     		mov	r1, r3
 7323 0c80 3A4A     		ldr	r2, .L494+4
 7324 0c82 0B46     		mov	r3, r1
 7325 0c84 DB00     		lsls	r3, r3, #3
 7326 0c86 5B1A     		subs	r3, r3, r1
 7327 0c88 1B01     		lsls	r3, r3, #4
 7328 0c8a 1344     		add	r3, r3, r2
 7329 0c8c E033     		adds	r3, r3, #224
 7330 0c8e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7331 0c90 404A     		ldr	r2, .L494+44
 7332 0c92 0301     		lsls	r3, r0, #4
 7333 0c94 1344     		add	r3, r3, r2
 7334 0c96 0C33     		adds	r3, r3, #12
 7335 0c98 0A46     		mov	r2, r1
 7336 0c9a 1A70     		strb	r2, [r3]
2181:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7337              		.loc 1 2181 0
 7338 0c9c 3B4B     		ldr	r3, .L494+36
 7339 0c9e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7340 0ca0 3A4B     		ldr	r3, .L494+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 171


 7341 0ca2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7342 0ca4 3B4A     		ldr	r2, .L494+44
 7343 0ca6 1B01     		lsls	r3, r3, #4
 7344 0ca8 1344     		add	r3, r3, r2
 7345 0caa 0C33     		adds	r3, r3, #12
 7346 0cac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7347 0cae 1946     		mov	r1, r3
 7348 0cb0 FFF7FEFF 		bl	enable_motor
 7349              	.L461:
2172:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7350              		.loc 1 2172 0 discriminator 2
 7351 0cb4 354B     		ldr	r3, .L494+36
 7352 0cb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7353 0cb8 0133     		adds	r3, r3, #1
 7354 0cba DAB2     		uxtb	r2, r3
 7355 0cbc 334B     		ldr	r3, .L494+36
 7356 0cbe 1A70     		strb	r2, [r3]
 7357              	.L459:
2172:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7358              		.loc 1 2172 0 is_stmt 0 discriminator 1
 7359 0cc0 324B     		ldr	r3, .L494+36
 7360 0cc2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7361 0cc4 012B     		cmp	r3, #1
 7362 0cc6 7FF675AF 		bls	.L463
2182:..\src/interruptions.c ****                     }
2183:..\src/interruptions.c ****                 }
2184:..\src/interruptions.c ****                     
2185:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7363              		.loc 1 2185 0 is_stmt 1
 7364 0cca 0020     		movs	r0, #0
 7365 0ccc FFF7FEFF 		bl	memStore
2186:..\src/interruptions.c ****                     
2187:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7366              		.loc 1 2187 0
 7367 0cd0 2C4B     		ldr	r3, .L494+28
 7368 0cd2 0022     		movs	r2, #0
 7369 0cd4 1A70     		strb	r2, [r3]
2188:..\src/interruptions.c ****             }
2189:..\src/interruptions.c ****             break;
 7370              		.loc 1 2189 0
 7371 0cd6 07E0     		b	.L484
 7372              	.L480:
2190:..\src/interruptions.c ****         default:
2191:..\src/interruptions.c ****             break;
 7373              		.loc 1 2191 0
 7374 0cd8 00BF     		nop
 7375 0cda 06E0     		b	.L448
 7376              	.L481:
2129:..\src/interruptions.c **** 
 7377              		.loc 1 2129 0
 7378 0cdc 00BF     		nop
 7379 0cde 04E0     		b	.L448
 7380              	.L482:
2155:..\src/interruptions.c **** 
 7381              		.loc 1 2155 0
 7382 0ce0 00BF     		nop
 7383 0ce2 02E0     		b	.L448
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 172


 7384              	.L483:
2160:..\src/interruptions.c **** 
 7385              		.loc 1 2160 0
 7386 0ce4 00BF     		nop
 7387 0ce6 00E0     		b	.L448
 7388              	.L484:
2189:..\src/interruptions.c ****         default:
 7389              		.loc 1 2189 0
 7390 0ce8 00BF     		nop
 7391              	.L448:
2192:..\src/interruptions.c ****     }
2193:..\src/interruptions.c ****         
2194:..\src/interruptions.c ****     if (interrupt_flag){
 7392              		.loc 1 2194 0
 7393 0cea 244B     		ldr	r3, .L494+20
 7394 0cec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7395 0cee 002B     		cmp	r3, #0
 7396 0cf0 04D0     		beq	.L464
2195:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7397              		.loc 1 2195 0
 7398 0cf2 224B     		ldr	r3, .L494+20
 7399 0cf4 0022     		movs	r2, #0
 7400 0cf6 1A70     		strb	r2, [r3]
2196:..\src/interruptions.c ****         interrupt_manager();
 7401              		.loc 1 2196 0
 7402 0cf8 FFF7FEFF 		bl	interrupt_manager
 7403              	.L464:
2197:..\src/interruptions.c ****     }
2198:..\src/interruptions.c ****     
2199:..\src/interruptions.c ****     // Read also EMG additional sensors port
2200:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 7404              		.loc 1 2200 0
 7405 0cfc 264B     		ldr	r3, .L494+48
 7406 0cfe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7407 0d00 062B     		cmp	r3, #6
 7408 0d02 6ED9     		bls	.L485
2201:..\src/interruptions.c ****         
2202:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 7409              		.loc 1 2202 0
 7410 0d04 214B     		ldr	r3, .L494+36
 7411 0d06 0022     		movs	r2, #0
 7412 0d08 1A70     		strb	r2, [r3]
 7413 0d0a 66E0     		b	.L466
 7414              	.L473:
2203:..\src/interruptions.c ****             
2204:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 7415              		.loc 1 2204 0
 7416 0d0c 1F4B     		ldr	r3, .L494+36
 7417 0d0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7418 0d10 0633     		adds	r3, r3, #6
 7419 0d12 174A     		ldr	r2, .L494+8
 7420 0d14 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7421 0d18 7B60     		str	r3, [r7, #4]
2205:..\src/interruptions.c ****             if (i_aux < 0) 
 7422              		.loc 1 2205 0
 7423 0d1a 7B68     		ldr	r3, [r7, #4]
 7424 0d1c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 173


 7425 0d1e 01DA     		bge	.L467
2206:..\src/interruptions.c ****                 i_aux = 0;
 7426              		.loc 1 2206 0
 7427 0d20 0023     		movs	r3, #0
 7428 0d22 7B60     		str	r3, [r7, #4]
 7429              	.L467:
2207:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 7430              		.loc 1 2207 0
 7431 0d24 194B     		ldr	r3, .L494+36
 7432 0d26 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7433 0d28 0233     		adds	r3, r3, #2
 7434 0d2a DB00     		lsls	r3, r3, #3
 7435 0d2c 1B4A     		ldr	r2, .L494+52
 7436 0d2e 1344     		add	r3, r3, r2
 7437 0d30 1946     		mov	r1, r3
 7438 0d32 7868     		ldr	r0, [r7, #4]
 7439 0d34 FFF7FEFF 		bl	filter
 7440 0d38 7860     		str	r0, [r7, #4]
2208:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 7441              		.loc 1 2208 0
 7442 0d3a 7B68     		ldr	r3, [r7, #4]
 7443 0d3c 9B02     		lsls	r3, r3, #10
 7444 0d3e 002B     		cmp	r3, #0
 7445 0d40 01DA     		bge	.L468
 7446 0d42 03F2FF33 		addw	r3, r3, #1023
 7447              	.L468:
 7448 0d46 9B12     		asrs	r3, r3, #10
 7449 0d48 7B60     		str	r3, [r7, #4]
2209:..\src/interruptions.c **** 
2210:..\src/interruptions.c ****             if (interrupt_flag){
 7450              		.loc 1 2210 0
 7451 0d4a 0C4B     		ldr	r3, .L494+20
 7452 0d4c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7453 0d4e 002B     		cmp	r3, #0
 7454 0d50 04D0     		beq	.L469
2211:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7455              		.loc 1 2211 0
 7456 0d52 0A4B     		ldr	r3, .L494+20
 7457 0d54 0022     		movs	r2, #0
 7458 0d56 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****                 interrupt_manager();
 7459              		.loc 1 2212 0
 7460 0d58 FFF7FEFF 		bl	interrupt_manager
 7461              	.L469:
2213:..\src/interruptions.c ****             }
2214:..\src/interruptions.c ****             //Saturation
2215:..\src/interruptions.c ****             if (i_aux < 0)
 7462              		.loc 1 2215 0
 7463 0d5c 7B68     		ldr	r3, [r7, #4]
 7464 0d5e 002B     		cmp	r3, #0
 7465 0d60 1EDA     		bge	.L470
2216:..\src/interruptions.c ****                 i_aux = 0;
 7466              		.loc 1 2216 0
 7467 0d62 0023     		movs	r3, #0
 7468 0d64 7B60     		str	r3, [r7, #4]
 7469 0d66 22E0     		b	.L471
 7470              	.L495:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 174


 7471              		.align	2
 7472              	.L494:
 7473 0d68 82010000 		.word	emg_counter_2.10568
 7474 0d6c 00000000 		.word	c_mem
 7475 0d70 00000000 		.word	ADC_buf
 7476 0d74 08000000 		.word	filt_emg+8
 7477 0d78 00000000 		.word	g_mem
 7478 0d7c 00000000 		.word	interrupt_flag
 7479 0d80 D34D6210 		.word	274877907
 7480 0d84 00000000 		.word	emg_2_status
 7481 0d88 00000000 		.word	emg_1_status
 7482 0d8c 7A010000 		.word	idx.10572
 7483 0d90 00000000 		.word	g_meas
 7484 0d94 00000000 		.word	g_ref
 7485 0d98 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7486 0d9c 00000000 		.word	filt_emg
 7487              	.L470:
2217:..\src/interruptions.c ****             else 
2218:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7488              		.loc 1 2218 0
 7489 0da0 7B68     		ldr	r3, [r7, #4]
 7490 0da2 B3F5806F 		cmp	r3, #1024
 7491 0da6 02DD     		ble	.L471
2219:..\src/interruptions.c ****                     i_aux = 1024;
 7492              		.loc 1 2219 0
 7493 0da8 4FF48063 		mov	r3, #1024
 7494 0dac 7B60     		str	r3, [r7, #4]
 7495              	.L471:
2220:..\src/interruptions.c ****             
2221:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = i_aux;
 7496              		.loc 1 2221 0
 7497 0dae 0F4B     		ldr	r3, .L496
 7498 0db0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7499 0db2 0F49     		ldr	r1, .L496+4
 7500 0db4 0233     		adds	r3, r3, #2
 7501 0db6 7A68     		ldr	r2, [r7, #4]
 7502 0db8 41F82320 		str	r2, [r1, r3, lsl #2]
2222:..\src/interruptions.c **** 
2223:..\src/interruptions.c ****             if (interrupt_flag){
 7503              		.loc 1 2223 0
 7504 0dbc 0D4B     		ldr	r3, .L496+8
 7505 0dbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7506 0dc0 002B     		cmp	r3, #0
 7507 0dc2 04D0     		beq	.L472
2224:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7508              		.loc 1 2224 0
 7509 0dc4 0B4B     		ldr	r3, .L496+8
 7510 0dc6 0022     		movs	r2, #0
 7511 0dc8 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****                 interrupt_manager();
 7512              		.loc 1 2225 0
 7513 0dca FFF7FEFF 		bl	interrupt_manager
 7514              	.L472:
2202:..\src/interruptions.c ****             
 7515              		.loc 1 2202 0 discriminator 2
 7516 0dce 074B     		ldr	r3, .L496
 7517 0dd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 175


 7518 0dd2 0133     		adds	r3, r3, #1
 7519 0dd4 DAB2     		uxtb	r2, r3
 7520 0dd6 054B     		ldr	r3, .L496
 7521 0dd8 1A70     		strb	r2, [r3]
 7522              	.L466:
2202:..\src/interruptions.c ****             
 7523              		.loc 1 2202 0 is_stmt 0 discriminator 1
 7524 0dda 044B     		ldr	r3, .L496
 7525 0ddc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7526 0dde 052B     		cmp	r3, #5
 7527 0de0 94D9     		bls	.L473
 7528              	.L485:
2226:..\src/interruptions.c ****             }
2227:..\src/interruptions.c ****         }
2228:..\src/interruptions.c ****     }
2229:..\src/interruptions.c ****     
2230:..\src/interruptions.c **** }
 7529              		.loc 1 2230 0 is_stmt 1
 7530 0de2 00BF     		nop
 7531 0de4 0C37     		adds	r7, r7, #12
 7532              		.cfi_def_cfa_offset 20
 7533 0de6 BD46     		mov	sp, r7
 7534              		.cfi_def_cfa_register 13
 7535              		@ sp needed
 7536 0de8 F0BD     		pop	{r4, r5, r6, r7, pc}
 7537              	.L497:
 7538 0dea 00BF     		.align	2
 7539              	.L496:
 7540 0dec 7A010000 		.word	idx.10572
 7541 0df0 00000000 		.word	g_emg_meas
 7542 0df4 00000000 		.word	interrupt_flag
 7543              		.cfi_endproc
 7544              	.LFE71:
 7545              		.size	analog_read_end, .-analog_read_end
 7546              		.section	.text.overcurrent_control,"ax",%progbits
 7547              		.align	2
 7548              		.global	overcurrent_control
 7549              		.thumb
 7550              		.thumb_func
 7551              		.type	overcurrent_control, %function
 7552              	overcurrent_control:
 7553              	.LFB72:
2231:..\src/interruptions.c **** 
2232:..\src/interruptions.c **** //==============================================================================
2233:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2234:..\src/interruptions.c **** //==============================================================================
2235:..\src/interruptions.c **** 
2236:..\src/interruptions.c **** void overcurrent_control() {
 7554              		.loc 1 2236 0
 7555              		.cfi_startproc
 7556              		@ args = 0, pretend = 0, frame = 8
 7557              		@ frame_needed = 1, uses_anonymous_args = 0
 7558              		@ link register save eliminated.
 7559 0000 80B4     		push	{r7}
 7560              		.cfi_def_cfa_offset 4
 7561              		.cfi_offset 7, -4
 7562 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 176


 7563              		.cfi_def_cfa_offset 16
 7564 0004 00AF     		add	r7, sp, #0
 7565              		.cfi_def_cfa_register 7
 7566              	.LBB4:
2237:..\src/interruptions.c ****     
2238:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 7567              		.loc 1 2238 0
 7568 0006 0023     		movs	r3, #0
 7569 0008 FB71     		strb	r3, [r7, #7]
 7570 000a 61E0     		b	.L499
 7571              	.L503:
2239:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7572              		.loc 1 2239 0
 7573 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7574 000e 3449     		ldr	r1, .L505
 7575 0010 1346     		mov	r3, r2
 7576 0012 DB00     		lsls	r3, r3, #3
 7577 0014 9B1A     		subs	r3, r3, r2
 7578 0016 1B01     		lsls	r3, r3, #4
 7579 0018 0B44     		add	r3, r3, r1
 7580 001a 03F58673 		add	r3, r3, #268
 7581 001e B3F90030 		ldrsh	r3, [r3]
 7582 0022 002B     		cmp	r3, #0
 7583 0024 51D0     		beq	.L500
2240:..\src/interruptions.c ****             // if the current is over the limit
2241:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 7584              		.loc 1 2241 0
 7585 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7586 0028 2E49     		ldr	r1, .L505+4
 7587 002a 1346     		mov	r3, r2
 7588 002c DB00     		lsls	r3, r3, #3
 7589 002e 9B1A     		subs	r3, r3, r2
 7590 0030 1B01     		lsls	r3, r3, #4
 7591 0032 0B44     		add	r3, r3, r1
 7592 0034 03F58873 		add	r3, r3, #272
 7593 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7594 003a 1946     		mov	r1, r3
 7595 003c 2A4A     		ldr	r2, .L505+8
 7596 003e 3423     		movs	r3, #52
 7597 0040 03FB01F3 		mul	r3, r3, r1
 7598 0044 1344     		add	r3, r3, r2
 7599 0046 0C33     		adds	r3, r3, #12
 7600 0048 1968     		ldr	r1, [r3]
 7601 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7602 004c 2448     		ldr	r0, .L505
 7603 004e 1346     		mov	r3, r2
 7604 0050 DB00     		lsls	r3, r3, #3
 7605 0052 9B1A     		subs	r3, r3, r2
 7606 0054 1B01     		lsls	r3, r3, #4
 7607 0056 0344     		add	r3, r3, r0
 7608 0058 03F58673 		add	r3, r3, #268
 7609 005c B3F90030 		ldrsh	r3, [r3]
 7610 0060 9942     		cmp	r1, r3
 7611 0062 07DD     		ble	.L501
2242:..\src/interruptions.c ****                 //decrease pwm_limit
2243:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 7612              		.loc 1 2243 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 177


 7613 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7614 0066 214A     		ldr	r2, .L505+12
 7615 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7616 006a 013A     		subs	r2, r2, #1
 7617 006c D1B2     		uxtb	r1, r2
 7618 006e 1F4A     		ldr	r2, .L505+12
 7619 0070 D154     		strb	r1, [r2, r3]
 7620 0072 1CE0     		b	.L504
 7621              	.L501:
2244:..\src/interruptions.c ****             // if the current is in the safe zone
2245:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 7622              		.loc 1 2245 0
 7623 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7624 0076 1C4A     		ldr	r2, .L505+8
 7625 0078 3421     		movs	r1, #52
 7626 007a 01FB03F3 		mul	r3, r1, r3
 7627 007e 1344     		add	r3, r3, r2
 7628 0080 0C33     		adds	r3, r3, #12
 7629 0082 1968     		ldr	r1, [r3]
 7630 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7631 0086 1648     		ldr	r0, .L505
 7632 0088 1346     		mov	r3, r2
 7633 008a DB00     		lsls	r3, r3, #3
 7634 008c 9B1A     		subs	r3, r3, r2
 7635 008e 1B01     		lsls	r3, r3, #4
 7636 0090 0344     		add	r3, r3, r0
 7637 0092 03F58673 		add	r3, r3, #268
 7638 0096 B3F90030 		ldrsh	r3, [r3]
 7639 009a 0A3B     		subs	r3, r3, #10
 7640 009c 9942     		cmp	r1, r3
 7641 009e 06DA     		bge	.L504
2246:..\src/interruptions.c ****                 //increase pwm_limit
2247:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 7642              		.loc 1 2247 0
 7643 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7644 00a2 124A     		ldr	r2, .L505+12
 7645 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7646 00a6 0132     		adds	r2, r2, #1
 7647 00a8 D1B2     		uxtb	r1, r2
 7648 00aa 104A     		ldr	r2, .L505+12
 7649 00ac D154     		strb	r1, [r2, r3]
 7650              	.L504:
2248:..\src/interruptions.c ****             }
2249:..\src/interruptions.c **** 
2250:..\src/interruptions.c ****             // Bound pwm_limit
2251:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2252:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2253:..\src/interruptions.c ****             else 
2254:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 7651              		.loc 1 2254 0
 7652 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7653 00b0 0E4A     		ldr	r2, .L505+12
 7654 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7655 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7656 00b6 0E49     		ldr	r1, .L505+16
 7657 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7658 00ba 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 178


 7659 00bc 05D9     		bls	.L500
2255:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 7660              		.loc 1 2255 0
 7661 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7662 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7663 00c2 0B49     		ldr	r1, .L505+16
 7664 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7665 00c6 094A     		ldr	r2, .L505+12
 7666 00c8 D154     		strb	r1, [r2, r3]
 7667              	.L500:
2238:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7668              		.loc 1 2238 0 discriminator 2
 7669 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7670 00cc 0133     		adds	r3, r3, #1
 7671 00ce FB71     		strb	r3, [r7, #7]
 7672              	.L499:
2238:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7673              		.loc 1 2238 0 is_stmt 0 discriminator 1
 7674 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7675 00d2 012B     		cmp	r3, #1
 7676 00d4 9AD9     		bls	.L503
 7677              	.LBE4:
2256:..\src/interruptions.c ****         }
2257:..\src/interruptions.c ****     }
2258:..\src/interruptions.c **** }
 7678              		.loc 1 2258 0 is_stmt 1
 7679 00d6 00BF     		nop
 7680 00d8 0C37     		adds	r7, r7, #12
 7681              		.cfi_def_cfa_offset 4
 7682 00da BD46     		mov	sp, r7
 7683              		.cfi_def_cfa_register 13
 7684              		@ sp needed
 7685 00dc 80BC     		pop	{r7}
 7686              		.cfi_restore 7
 7687              		.cfi_def_cfa_offset 0
 7688 00de 7047     		bx	lr
 7689              	.L506:
 7690              		.align	2
 7691              	.L505:
 7692 00e0 00000000 		.word	c_mem
 7693 00e4 00000000 		.word	g_mem
 7694 00e8 00000000 		.word	g_meas
 7695 00ec 00000000 		.word	dev_pwm_limit
 7696 00f0 00000000 		.word	dev_pwm_sat
 7697              		.cfi_endproc
 7698              	.LFE72:
 7699              		.size	overcurrent_control, .-overcurrent_control
 7700              		.section	.text.pwm_limit_search,"ax",%progbits
 7701              		.align	2
 7702              		.global	pwm_limit_search
 7703              		.thumb
 7704              		.thumb_func
 7705              		.type	pwm_limit_search, %function
 7706              	pwm_limit_search:
 7707              	.LFB73:
2259:..\src/interruptions.c **** 
2260:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 179


2261:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2262:..\src/interruptions.c **** //==============================================================================
2263:..\src/interruptions.c **** 
2264:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 7708              		.loc 1 2264 0
 7709              		.cfi_startproc
 7710              		@ args = 0, pretend = 0, frame = 16
 7711              		@ frame_needed = 1, uses_anonymous_args = 0
 7712              		@ link register save eliminated.
 7713 0000 80B4     		push	{r7}
 7714              		.cfi_def_cfa_offset 4
 7715              		.cfi_offset 7, -4
 7716 0002 85B0     		sub	sp, sp, #20
 7717              		.cfi_def_cfa_offset 24
 7718 0004 00AF     		add	r7, sp, #0
 7719              		.cfi_def_cfa_register 7
 7720 0006 0346     		mov	r3, r0
 7721 0008 FB71     		strb	r3, [r7, #7]
2265:..\src/interruptions.c **** 
2266:..\src/interruptions.c ****     uint8 CYDATA index;
2267:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 7722              		.loc 1 2267 0
 7723 000a 46F29C33 		movw	r3, #25500
 7724 000e FB81     		strh	r3, [r7, #14]	@ movhi
2268:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 7725              		.loc 1 2268 0
 7726 0010 42F6EC43 		movw	r3, #11500
 7727 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2269:..\src/interruptions.c ****     
2270:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 7728              		.loc 1 2270 0
 7729 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7730 0018 144A     		ldr	r2, .L512
 7731 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7732 001e FB89     		ldrh	r3, [r7, #14]
 7733 0020 9A42     		cmp	r2, r3
 7734 0022 04DD     		ble	.L508
2271:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 7735              		.loc 1 2271 0
 7736 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7737 0026 124A     		ldr	r2, .L512+4
 7738 0028 0021     		movs	r1, #0
 7739 002a D154     		strb	r1, [r2, r3]
2272:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2273:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2274:..\src/interruptions.c ****     } else {
2275:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2276:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2277:..\src/interruptions.c ****     }
2278:..\src/interruptions.c **** }
 7740              		.loc 1 2278 0
 7741 002c 19E0     		b	.L511
 7742              	.L508:
2272:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 7743              		.loc 1 2272 0
 7744 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7745 0030 0E4A     		ldr	r2, .L512
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 180


 7746 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7747 0036 BB89     		ldrh	r3, [r7, #12]
 7748 0038 9A42     		cmp	r2, r3
 7749 003a 04DA     		bge	.L510
2273:..\src/interruptions.c ****     } else {
 7750              		.loc 1 2273 0
 7751 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7752 003e 0C4A     		ldr	r2, .L512+4
 7753 0040 6421     		movs	r1, #100
 7754 0042 D154     		strb	r1, [r2, r3]
 7755              		.loc 1 2278 0
 7756 0044 0DE0     		b	.L511
 7757              	.L510:
2275:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 7758              		.loc 1 2275 0
 7759 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7760 0048 084A     		ldr	r2, .L512
 7761 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7762 004e BB89     		ldrh	r3, [r7, #12]
 7763 0050 D31A     		subs	r3, r2, r3
 7764 0052 5B12     		asrs	r3, r3, #9
 7765 0054 FB72     		strb	r3, [r7, #11]
2276:..\src/interruptions.c ****     }
 7766              		.loc 1 2276 0
 7767 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7768 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 7769 005a 0649     		ldr	r1, .L512+8
 7770 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7771 005e 044A     		ldr	r2, .L512+4
 7772 0060 D154     		strb	r1, [r2, r3]
 7773              	.L511:
 7774              		.loc 1 2278 0
 7775 0062 00BF     		nop
 7776 0064 1437     		adds	r7, r7, #20
 7777              		.cfi_def_cfa_offset 4
 7778 0066 BD46     		mov	sp, r7
 7779              		.cfi_def_cfa_register 13
 7780              		@ sp needed
 7781 0068 80BC     		pop	{r7}
 7782              		.cfi_restore 7
 7783              		.cfi_def_cfa_offset 0
 7784 006a 7047     		bx	lr
 7785              	.L513:
 7786              		.align	2
 7787              	.L512:
 7788 006c 00000000 		.word	dev_tension
 7789 0070 00000000 		.word	dev_pwm_sat
 7790 0074 00000000 		.word	pwm_preload_values
 7791              		.cfi_endproc
 7792              	.LFE73:
 7793              		.size	pwm_limit_search, .-pwm_limit_search
 7794              		.section	.text.cycles_counter_update,"ax",%progbits
 7795              		.align	2
 7796              		.global	cycles_counter_update
 7797              		.thumb
 7798              		.thumb_func
 7799              		.type	cycles_counter_update, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 181


 7800              	cycles_counter_update:
 7801              	.LFB74:
2279:..\src/interruptions.c **** 
2280:..\src/interruptions.c **** //==============================================================================
2281:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2282:..\src/interruptions.c **** //==============================================================================
2283:..\src/interruptions.c **** 
2284:..\src/interruptions.c **** void cycles_counter_update() {
 7802              		.loc 1 2284 0
 7803              		.cfi_startproc
 7804              		@ args = 0, pretend = 0, frame = 24
 7805              		@ frame_needed = 1, uses_anonymous_args = 0
 7806 0000 80B5     		push	{r7, lr}
 7807              		.cfi_def_cfa_offset 8
 7808              		.cfi_offset 7, -8
 7809              		.cfi_offset 14, -4
 7810 0002 86B0     		sub	sp, sp, #24
 7811              		.cfi_def_cfa_offset 32
 7812 0004 00AF     		add	r7, sp, #0
 7813              		.cfi_def_cfa_register 7
2285:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2286:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2287:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2288:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2289:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2290:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2291:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2292:..\src/interruptions.c ****     int32 step;
2293:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2294:..\src/interruptions.c **** 
2295:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 7814              		.loc 1 2295 0
 7815 0006 AB4B     		ldr	r3, .L560
 7816 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7817 000c 1946     		mov	r1, r3
 7818 000e AA4A     		ldr	r2, .L560+4
 7819 0010 3423     		movs	r3, #52
 7820 0012 03FB01F3 		mul	r3, r3, r1
 7821 0016 1344     		add	r3, r3, r2
 7822 0018 1A68     		ldr	r2, [r3]
 7823 001a A64B     		ldr	r3, .L560
 7824 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7825 0020 1846     		mov	r0, r3
 7826 0022 A449     		ldr	r1, .L560
 7827 0024 0346     		mov	r3, r0
 7828 0026 5B00     		lsls	r3, r3, #1
 7829 0028 0344     		add	r3, r3, r0
 7830 002a 1B01     		lsls	r3, r3, #4
 7831 002c 0B44     		add	r3, r3, r1
 7832 002e 03F29513 		addw	r3, r3, #405
 7833 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7834 0034 42FA03F3 		asr	r3, r2, r3
 7835 0038 FB60     		str	r3, [r7, #12]
2296:..\src/interruptions.c ****     
2297:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2298:..\src/interruptions.c ****     switch (pos_cycle_status){
 7836              		.loc 1 2298 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 182


 7837 003a A04B     		ldr	r3, .L560+8
 7838 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7839 003e 012B     		cmp	r3, #1
 7840 0040 3AD0     		beq	.L516
 7841 0042 022B     		cmp	r3, #2
 7842 0044 6ED0     		beq	.L517
 7843 0046 002B     		cmp	r3, #0
 7844 0048 40F01881 		bne	.L515
2299:..\src/interruptions.c ****         case STATE_INACTIVE:
2300:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 7845              		.loc 1 2300 0
 7846 004c 994B     		ldr	r3, .L560
 7847 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7848 0052 062B     		cmp	r3, #6
 7849 0054 04D0     		beq	.L519
 7850              		.loc 1 2300 0 is_stmt 0 discriminator 1
 7851 0056 9A4B     		ldr	r3, .L560+12
 7852 0058 93F90030 		ldrsb	r3, [r3]
 7853 005c 012B     		cmp	r3, #1
 7854 005e 0CD0     		beq	.L520
 7855              	.L519:
 7856              		.loc 1 2300 0 discriminator 3
 7857 0060 944B     		ldr	r3, .L560
 7858 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7859 0066 062B     		cmp	r3, #6
 7860 0068 40F00581 		bne	.L554
 7861              		.loc 1 2300 0 discriminator 4
 7862 006c 944B     		ldr	r3, .L560+12
 7863 006e 93F90030 		ldrsb	r3, [r3]
 7864 0072 B3F1FF3F 		cmp	r3, #-1
 7865 0076 40F0FE80 		bne	.L554
 7866              	.L520:
2301:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 7867              		.loc 1 2301 0 is_stmt 1
 7868 007a 924A     		ldr	r2, .L560+16
 7869 007c FB68     		ldr	r3, [r7, #12]
 7870 007e 1360     		str	r3, [r2]
2302:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7871              		.loc 1 2302 0
 7872 0080 914B     		ldr	r3, .L560+20
 7873 0082 1A68     		ldr	r2, [r3]
 7874 0084 8F4B     		ldr	r3, .L560+16
 7875 0086 1B68     		ldr	r3, [r3]
 7876 0088 9A42     		cmp	r2, r3
 7877 008a 05DD     		ble	.L522
 7878              		.loc 1 2302 0 is_stmt 0 discriminator 1
 7879 008c 8E4B     		ldr	r3, .L560+20
 7880 008e 1A68     		ldr	r2, [r3]
 7881 0090 8C4B     		ldr	r3, .L560+16
 7882 0092 1B68     		ldr	r3, [r3]
 7883 0094 D31A     		subs	r3, r2, r3
 7884 0096 04E0     		b	.L523
 7885              	.L522:
 7886              		.loc 1 2302 0 discriminator 2
 7887 0098 8A4B     		ldr	r3, .L560+16
 7888 009a 1A68     		ldr	r2, [r3]
 7889 009c 8A4B     		ldr	r3, .L560+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 183


 7890 009e 1B68     		ldr	r3, [r3]
 7891 00a0 D31A     		subs	r3, r2, r3
 7892              	.L523:
 7893              		.loc 1 2302 0 discriminator 4
 7894 00a2 BB60     		str	r3, [r7, #8]
2303:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 7895              		.loc 1 2303 0 is_stmt 1 discriminator 4
 7896 00a4 834B     		ldr	r3, .L560
 7897 00a6 5A6D     		ldr	r2, [r3, #84]
 7898 00a8 BB68     		ldr	r3, [r7, #8]
 7899 00aa 1344     		add	r3, r3, r2
 7900 00ac 814A     		ldr	r2, .L560
 7901 00ae 5365     		str	r3, [r2, #84]
2304:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 7902              		.loc 1 2304 0 discriminator 4
 7903 00b0 824B     		ldr	r3, .L560+8
 7904 00b2 0122     		movs	r2, #1
 7905 00b4 1A70     		strb	r2, [r3]
2305:..\src/interruptions.c ****             }
2306:..\src/interruptions.c ****             break;
 7906              		.loc 1 2306 0 discriminator 4
 7907 00b6 DEE0     		b	.L554
 7908              	.L516:
2307:..\src/interruptions.c ****         case STATE_ACTIVE:
2308:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 7909              		.loc 1 2308 0
 7910 00b8 7E4B     		ldr	r3, .L560
 7911 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7912 00be 062B     		cmp	r3, #6
 7913 00c0 05D0     		beq	.L524
 7914              		.loc 1 2308 0 is_stmt 0 discriminator 1
 7915 00c2 7F4B     		ldr	r3, .L560+12
 7916 00c4 93F90030 		ldrsb	r3, [r3]
 7917 00c8 B3F1FF3F 		cmp	r3, #-1
 7918 00cc 0BD0     		beq	.L525
 7919              	.L524:
 7920              		.loc 1 2308 0 discriminator 3
 7921 00ce 794B     		ldr	r3, .L560
 7922 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7923 00d4 062B     		cmp	r3, #6
 7924 00d6 40F0D080 		bne	.L555
 7925              		.loc 1 2308 0 discriminator 4
 7926 00da 794B     		ldr	r3, .L560+12
 7927 00dc 93F90030 		ldrsb	r3, [r3]
 7928 00e0 012B     		cmp	r3, #1
 7929 00e2 40F0CA80 		bne	.L555
 7930              	.L525:
2309:..\src/interruptions.c ****                 max_pos = curr_pos;
 7931              		.loc 1 2309 0 is_stmt 1
 7932 00e6 784A     		ldr	r2, .L560+20
 7933 00e8 FB68     		ldr	r3, [r7, #12]
 7934 00ea 1360     		str	r3, [r2]
2310:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7935              		.loc 1 2310 0
 7936 00ec 764B     		ldr	r3, .L560+20
 7937 00ee 1A68     		ldr	r2, [r3]
 7938 00f0 744B     		ldr	r3, .L560+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 184


 7939 00f2 1B68     		ldr	r3, [r3]
 7940 00f4 9A42     		cmp	r2, r3
 7941 00f6 05DD     		ble	.L527
 7942              		.loc 1 2310 0 is_stmt 0 discriminator 1
 7943 00f8 734B     		ldr	r3, .L560+20
 7944 00fa 1A68     		ldr	r2, [r3]
 7945 00fc 714B     		ldr	r3, .L560+16
 7946 00fe 1B68     		ldr	r3, [r3]
 7947 0100 D31A     		subs	r3, r2, r3
 7948 0102 04E0     		b	.L528
 7949              	.L527:
 7950              		.loc 1 2310 0 discriminator 2
 7951 0104 6F4B     		ldr	r3, .L560+16
 7952 0106 1A68     		ldr	r2, [r3]
 7953 0108 6F4B     		ldr	r3, .L560+20
 7954 010a 1B68     		ldr	r3, [r3]
 7955 010c D31A     		subs	r3, r2, r3
 7956              	.L528:
 7957              		.loc 1 2310 0 discriminator 4
 7958 010e BB60     		str	r3, [r7, #8]
2311:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 7959              		.loc 1 2311 0 is_stmt 1 discriminator 4
 7960 0110 684B     		ldr	r3, .L560
 7961 0112 5A6D     		ldr	r2, [r3, #84]
 7962 0114 BB68     		ldr	r3, [r7, #8]
 7963 0116 1344     		add	r3, r3, r2
 7964 0118 664A     		ldr	r2, .L560
 7965 011a 5365     		str	r3, [r2, #84]
2312:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 7966              		.loc 1 2312 0 discriminator 4
 7967 011c 674B     		ldr	r3, .L560+8
 7968 011e 0222     		movs	r2, #2
 7969 0120 1A70     		strb	r2, [r3]
2313:..\src/interruptions.c ****             }
2314:..\src/interruptions.c ****             break;
 7970              		.loc 1 2314 0 discriminator 4
 7971 0122 AAE0     		b	.L555
 7972              	.L517:
2315:..\src/interruptions.c ****         case COUNTER_INC:
2316:..\src/interruptions.c **** 
2317:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7973              		.loc 1 2317 0
 7974 0124 684B     		ldr	r3, .L560+20
 7975 0126 1A68     		ldr	r2, [r3]
 7976 0128 664B     		ldr	r3, .L560+16
 7977 012a 1B68     		ldr	r3, [r3]
 7978 012c 9A42     		cmp	r2, r3
 7979 012e 05DD     		ble	.L529
 7980              		.loc 1 2317 0 is_stmt 0 discriminator 1
 7981 0130 654B     		ldr	r3, .L560+20
 7982 0132 1A68     		ldr	r2, [r3]
 7983 0134 634B     		ldr	r3, .L560+16
 7984 0136 1B68     		ldr	r3, [r3]
 7985 0138 D31A     		subs	r3, r2, r3
 7986 013a 04E0     		b	.L530
 7987              	.L529:
 7988              		.loc 1 2317 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 185


 7989 013c 614B     		ldr	r3, .L560+16
 7990 013e 1A68     		ldr	r2, [r3]
 7991 0140 614B     		ldr	r3, .L560+20
 7992 0142 1B68     		ldr	r3, [r3]
 7993 0144 D31A     		subs	r3, r2, r3
 7994              	.L530:
 7995              		.loc 1 2317 0 discriminator 4
 7996 0146 BB60     		str	r3, [r7, #8]
2318:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 7997              		.loc 1 2318 0 is_stmt 1 discriminator 4
 7998 0148 604B     		ldr	r3, .L560+24
 7999 014a 1B68     		ldr	r3, [r3]
 8000 014c BA68     		ldr	r2, [r7, #8]
 8001 014e 9A42     		cmp	r2, r3
 8002 0150 40F38D80 		ble	.L531
2319:..\src/interruptions.c ****                 //update position histogram
2320:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 8003              		.loc 1 2320 0
 8004 0154 574B     		ldr	r3, .L560
 8005 0156 D3F8E820 		ldr	r2, [r3, #232]
 8006 015a 564B     		ldr	r3, .L560
 8007 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8008 0160 1846     		mov	r0, r3
 8009 0162 5449     		ldr	r1, .L560
 8010 0164 0346     		mov	r3, r0
 8011 0166 5B00     		lsls	r3, r3, #1
 8012 0168 0344     		add	r3, r3, r0
 8013 016a 1B01     		lsls	r3, r3, #4
 8014 016c 0B44     		add	r3, r3, r1
 8015 016e 03F29513 		addw	r3, r3, #405
 8016 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8017 0174 42FA03F3 		asr	r3, r2, r3
 8018 0178 554A     		ldr	r2, .L560+28
 8019 017a 82FB0312 		smull	r1, r2, r2, r3
 8020 017e 9210     		asrs	r2, r2, #2
 8021 0180 DB17     		asrs	r3, r3, #31
 8022 0182 D31A     		subs	r3, r2, r3
 8023 0184 7B60     		str	r3, [r7, #4]
2321:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 8024              		.loc 1 2321 0
 8025 0186 4F4B     		ldr	r3, .L560+16
 8026 0188 1A68     		ldr	r2, [r3]
 8027 018a 7B68     		ldr	r3, [r7, #4]
 8028 018c 92FBF3F3 		sdiv	r3, r2, r3
 8029 0190 FB70     		strb	r3, [r7, #3]
2322:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 8030              		.loc 1 2322 0
 8031 0192 4D4B     		ldr	r3, .L560+20
 8032 0194 1A68     		ldr	r2, [r3]
 8033 0196 7B68     		ldr	r3, [r7, #4]
 8034 0198 92FBF3F3 		sdiv	r3, r2, r3
 8035 019c BB70     		strb	r3, [r7, #2]
2323:..\src/interruptions.c ****                 
2324:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2325:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 8036              		.loc 1 2325 0
 8037 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 186


 8038 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 8039 01a2 9342     		cmp	r3, r2
 8040 01a4 28BF     		it	cs
 8041 01a6 1346     		movcs	r3, r2
 8042 01a8 7B70     		strb	r3, [r7, #1]
2326:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 8043              		.loc 1 2326 0
 8044 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 8045 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 8046 01ae 9342     		cmp	r3, r2
 8047 01b0 38BF     		it	cc
 8048 01b2 1346     		movcc	r3, r2
 8049 01b4 3B70     		strb	r3, [r7]
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8050              		.loc 1 2327 0
 8051 01b6 7B78     		ldrb	r3, [r7, #1]
 8052 01b8 FB75     		strb	r3, [r7, #23]
 8053 01ba 0DE0     		b	.L532
 8054              	.L533:
2328:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2329:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 8055              		.loc 1 2329 0 discriminator 3
 8056 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8057 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8058 01c0 3C49     		ldr	r1, .L560
 8059 01c2 0632     		adds	r2, r2, #6
 8060 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8061 01c8 0132     		adds	r2, r2, #1
 8062 01ca 3A49     		ldr	r1, .L560
 8063 01cc 0633     		adds	r3, r3, #6
 8064 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8065              		.loc 1 2327 0 discriminator 3
 8066 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8067 01d4 0133     		adds	r3, r3, #1
 8068 01d6 FB75     		strb	r3, [r7, #23]
 8069              	.L532:
2327:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8070              		.loc 1 2327 0 is_stmt 0 discriminator 1
 8071 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8072 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 8073 01dc 9A42     		cmp	r2, r3
 8074 01de EDD9     		bls	.L533
2330:..\src/interruptions.c ****                 }
2331:..\src/interruptions.c ****                 
2332:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2333:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 8075              		.loc 1 2333 0 is_stmt 1
 8076 01e0 344B     		ldr	r3, .L560
 8077 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 8078 01e6 002B     		cmp	r3, #0
 8079 01e8 00DA     		bge	.L534
 8080 01ea 0333     		adds	r3, r3, #3
 8081              	.L534:
 8082 01ec 9B10     		asrs	r3, r3, #2
 8083 01ee 1BB2     		sxth	r3, r3
 8084 01f0 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 187


2334:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 8085              		.loc 1 2334 0
 8086 01f2 304B     		ldr	r3, .L560
 8087 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 8088 01f8 012B     		cmp	r3, #1
 8089 01fa 0CD1     		bne	.L535
2335:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 8090              		.loc 1 2335 0
 8091 01fc 2D4B     		ldr	r3, .L560
 8092 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8093 0202 1946     		mov	r1, r3
 8094 0204 2C4A     		ldr	r2, .L560+4
 8095 0206 3423     		movs	r3, #52
 8096 0208 03FB01F3 		mul	r3, r3, r1
 8097 020c 1344     		add	r3, r3, r2
 8098 020e 1433     		adds	r3, r3, #20
 8099 0210 1B68     		ldr	r3, [r3]
 8100 0212 3B61     		str	r3, [r7, #16]
 8101 0214 0BE0     		b	.L536
 8102              	.L535:
2336:..\src/interruptions.c ****                 else
2337:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 8103              		.loc 1 2337 0
 8104 0216 274B     		ldr	r3, .L560
 8105 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8106 021c 1946     		mov	r1, r3
 8107 021e 264A     		ldr	r2, .L560+4
 8108 0220 3423     		movs	r3, #52
 8109 0222 03FB01F3 		mul	r3, r3, r1
 8110 0226 1344     		add	r3, r3, r2
 8111 0228 0C33     		adds	r3, r3, #12
 8112 022a 1B68     		ldr	r3, [r3]
 8113 022c 3B61     		str	r3, [r7, #16]
 8114              	.L536:
2338:..\src/interruptions.c ****                     
2339:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 8115              		.loc 1 2339 0
 8116 022e 214B     		ldr	r3, .L560
 8117 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 8118 0234 1A46     		mov	r2, r3
 8119 0236 3B69     		ldr	r3, [r7, #16]
 8120 0238 9A42     		cmp	r2, r3
 8121 023a 05DA     		bge	.L537
2340:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 8122              		.loc 1 2340 0
 8123 023c 1D4B     		ldr	r3, .L560
 8124 023e DB6C     		ldr	r3, [r3, #76]
 8125 0240 0133     		adds	r3, r3, #1
 8126 0242 1C4A     		ldr	r2, .L560
 8127 0244 D364     		str	r3, [r2, #76]
 8128 0246 12E0     		b	.L531
 8129              	.L537:
2341:..\src/interruptions.c ****                 else
2342:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 8130              		.loc 1 2342 0
 8131 0248 3A69     		ldr	r2, [r7, #16]
 8132 024a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 188


 8133 024c 92FBF3F3 		sdiv	r3, r2, r3
 8134 0250 DBB2     		uxtb	r3, r3
 8135 0252 3969     		ldr	r1, [r7, #16]
 8136 0254 7A68     		ldr	r2, [r7, #4]
 8137 0256 91FBF2F2 		sdiv	r2, r1, r2
 8138 025a D2B2     		uxtb	r2, r2
 8139 025c 1549     		ldr	r1, .L560
 8140 025e 1032     		adds	r2, r2, #16
 8141 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8142 0264 0132     		adds	r2, r2, #1
 8143 0266 1349     		ldr	r1, .L560
 8144 0268 1033     		adds	r3, r3, #16
 8145 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 8146              	.L531:
2343:..\src/interruptions.c ****             }
2344:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 8147              		.loc 1 2344 0
 8148 026e 134B     		ldr	r3, .L560+8
 8149 0270 0022     		movs	r2, #0
 8150 0272 1A70     		strb	r2, [r3]
2345:..\src/interruptions.c ****             break;
 8151              		.loc 1 2345 0
 8152 0274 02E0     		b	.L515
 8153              	.L554:
2306:..\src/interruptions.c ****         case STATE_ACTIVE:
 8154              		.loc 1 2306 0
 8155 0276 00BF     		nop
 8156 0278 00E0     		b	.L515
 8157              	.L555:
2314:..\src/interruptions.c ****         case COUNTER_INC:
 8158              		.loc 1 2314 0
 8159 027a 00BF     		nop
 8160              	.L515:
2346:..\src/interruptions.c ****     }
2347:..\src/interruptions.c ****     
2348:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2349:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 8161              		.loc 1 2349 0
 8162 027c 0023     		movs	r3, #0
 8163 027e FB75     		strb	r3, [r7, #23]
 8164 0280 53E0     		b	.L538
 8165              	.L546:
2350:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8166              		.loc 1 2350 0
 8167 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8168 0284 134A     		ldr	r2, .L560+32
 8169 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8170 0288 012B     		cmp	r3, #1
 8171 028a 27D0     		beq	.L540
 8172 028c 022B     		cmp	r3, #2
 8173 028e 36D0     		beq	.L541
 8174 0290 002B     		cmp	r3, #0
 8175 0292 47D1     		bne	.L539
2351:..\src/interruptions.c ****             case STATE_INACTIVE:
2352:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 8176              		.loc 1 2352 0
 8177 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 189


 8178 0296 104A     		ldr	r2, .L560+36
 8179 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 8180 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8181 029e 0549     		ldr	r1, .L560
 8182 02a0 F832     		adds	r2, r2, #248
 8183 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 8184 02a6 9342     		cmp	r3, r2
 8185 02a8 39DD     		ble	.L556
2353:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 8186              		.loc 1 2353 0
 8187 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8188 02ac 094A     		ldr	r2, .L560+32
 8189 02ae 0121     		movs	r1, #1
 8190 02b0 D154     		strb	r1, [r2, r3]
2354:..\src/interruptions.c ****                 }
2355:..\src/interruptions.c ****                 break;
 8191              		.loc 1 2355 0
 8192 02b2 34E0     		b	.L556
 8193              	.L561:
 8194              		.align	2
 8195              	.L560:
 8196 02b4 00000000 		.word	g_mem
 8197 02b8 00000000 		.word	g_meas
 8198 02bc 84010000 		.word	pos_cycle_status.10628
 8199 02c0 00000000 		.word	pwm_sign
 8200 02c4 88010000 		.word	thr_pos.10632
 8201 02c8 8C010000 		.word	max_pos.10633
 8202 02cc 08000000 		.word	bin_threshold.10631
 8203 02d0 67666666 		.word	1717986919
 8204 02d4 90010000 		.word	emg_cycle_status.10629
 8205 02d8 00000000 		.word	g_emg_meas
 8206              	.L540:
2356:..\src/interruptions.c ****             case STATE_ACTIVE:
2357:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 8207              		.loc 1 2357 0
 8208 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8209 02de 404A     		ldr	r2, .L562
 8210 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8211 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8212 02e6 3F49     		ldr	r1, .L562+4
 8213 02e8 F833     		adds	r3, r3, #248
 8214 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8215 02ee 0A3B     		subs	r3, r3, #10
 8216 02f0 9A42     		cmp	r2, r3
 8217 02f2 16DA     		bge	.L557
2358:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 8218              		.loc 1 2358 0
 8219 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8220 02f6 3C4A     		ldr	r2, .L562+8
 8221 02f8 0221     		movs	r1, #2
 8222 02fa D154     		strb	r1, [r2, r3]
2359:..\src/interruptions.c ****                 }
2360:..\src/interruptions.c ****                 break;
 8223              		.loc 1 2360 0
 8224 02fc 11E0     		b	.L557
 8225              	.L541:
2361:..\src/interruptions.c ****             case COUNTER_INC:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 190


2362:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 8226              		.loc 1 2362 0
 8227 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8228 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8229 0302 3849     		ldr	r1, .L562+4
 8230 0304 0432     		adds	r2, r2, #4
 8231 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8232 030a 0132     		adds	r2, r2, #1
 8233 030c 3549     		ldr	r1, .L562+4
 8234 030e 0433     		adds	r3, r3, #4
 8235 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2363:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 8236              		.loc 1 2363 0
 8237 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8238 0316 344A     		ldr	r2, .L562+8
 8239 0318 0021     		movs	r1, #0
 8240 031a D154     		strb	r1, [r2, r3]
2364:..\src/interruptions.c ****                 break;
 8241              		.loc 1 2364 0
 8242 031c 02E0     		b	.L539
 8243              	.L556:
2355:..\src/interruptions.c ****             case STATE_ACTIVE:
 8244              		.loc 1 2355 0
 8245 031e 00BF     		nop
 8246 0320 00E0     		b	.L539
 8247              	.L557:
2360:..\src/interruptions.c ****             case COUNTER_INC:
 8248              		.loc 1 2360 0
 8249 0322 00BF     		nop
 8250              	.L539:
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8251              		.loc 1 2349 0 discriminator 2
 8252 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8253 0326 0133     		adds	r3, r3, #1
 8254 0328 FB75     		strb	r3, [r7, #23]
 8255              	.L538:
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8256              		.loc 1 2349 0 is_stmt 0 discriminator 1
 8257 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8258 032c 012B     		cmp	r3, #1
 8259 032e 07D8     		bhi	.L545
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8260              		.loc 1 2349 0 discriminator 3
 8261 0330 2E4B     		ldr	r3, .L562+12
 8262 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8263 0334 002B     		cmp	r3, #0
 8264 0336 03D1     		bne	.L545
2349:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8265              		.loc 1 2349 0 discriminator 4
 8266 0338 2D4B     		ldr	r3, .L562+16
 8267 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8268 033c 002B     		cmp	r3, #0
 8269 033e A0D0     		beq	.L546
 8270              	.L545:
2365:..\src/interruptions.c ****         }
2366:..\src/interruptions.c ****     }
2367:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 191


2368:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2369:..\src/interruptions.c ****     switch (rest_cycle_status){
 8271              		.loc 1 2369 0 is_stmt 1
 8272 0340 2C4B     		ldr	r3, .L562+20
 8273 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8274 0344 012B     		cmp	r3, #1
 8275 0346 11D0     		beq	.L548
 8276 0348 022B     		cmp	r3, #2
 8277 034a 29D0     		beq	.L549
 8278 034c 002B     		cmp	r3, #0
 8279 034e 41D1     		bne	.L547
2370:..\src/interruptions.c ****         case STATE_INACTIVE:
2371:..\src/interruptions.c ****             if (rest_enabled){
 8280              		.loc 1 2371 0
 8281 0350 294B     		ldr	r3, .L562+24
 8282 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8283 0354 002B     		cmp	r3, #0
 8284 0356 3AD0     		beq	.L558
2372:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 8285              		.loc 1 2372 0
 8286 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8287 035c 0346     		mov	r3, r0
 8288 035e 1A46     		mov	r2, r3
 8289 0360 264B     		ldr	r3, .L562+28
 8290 0362 1A60     		str	r2, [r3]
2373:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8291              		.loc 1 2373 0
 8292 0364 234B     		ldr	r3, .L562+20
 8293 0366 0122     		movs	r2, #1
 8294 0368 1A70     		strb	r2, [r3]
2374:..\src/interruptions.c ****             }
2375:..\src/interruptions.c ****             break;
 8295              		.loc 1 2375 0
 8296 036a 30E0     		b	.L558
 8297              	.L548:
2376:..\src/interruptions.c ****         case STATE_ACTIVE:
2377:..\src/interruptions.c ****             if (!rest_enabled){
 8298              		.loc 1 2377 0
 8299 036c 224B     		ldr	r3, .L562+24
 8300 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8301 0370 002B     		cmp	r3, #0
 8302 0372 2ED1     		bne	.L559
2378:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8303              		.loc 1 2378 0
 8304 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8305 0378 0346     		mov	r3, r0
 8306 037a 1A46     		mov	r2, r3
 8307 037c 204B     		ldr	r3, .L562+32
 8308 037e 1A60     		str	r2, [r3]
2379:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8309              		.loc 1 2379 0
 8310 0380 1E4B     		ldr	r3, .L562+28
 8311 0382 1A68     		ldr	r2, [r3]
 8312 0384 1E4B     		ldr	r3, .L562+32
 8313 0386 1B68     		ldr	r3, [r3]
 8314 0388 9A42     		cmp	r2, r3
 8315 038a 05D2     		bcs	.L553
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 192


2380:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8316              		.loc 1 2380 0
 8317 038c 1B4B     		ldr	r3, .L562+28
 8318 038e 1B68     		ldr	r3, [r3]
 8319 0390 03F59663 		add	r3, r3, #1200
 8320 0394 194A     		ldr	r2, .L562+28
 8321 0396 1360     		str	r3, [r2]
 8322              	.L553:
2381:..\src/interruptions.c ****                 }
2382:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8323              		.loc 1 2382 0
 8324 0398 164B     		ldr	r3, .L562+20
 8325 039a 0222     		movs	r2, #2
 8326 039c 1A70     		strb	r2, [r3]
2383:..\src/interruptions.c ****             }
2384:..\src/interruptions.c ****             break;
 8327              		.loc 1 2384 0
 8328 039e 18E0     		b	.L559
 8329              	.L549:
2385:..\src/interruptions.c ****         case COUNTER_INC: 
2386:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8330              		.loc 1 2386 0
 8331 03a0 104B     		ldr	r3, .L562+4
 8332 03a2 DA6D     		ldr	r2, [r3, #92]
 8333 03a4 154B     		ldr	r3, .L562+28
 8334 03a6 1968     		ldr	r1, [r3]
 8335 03a8 154B     		ldr	r3, .L562+32
 8336 03aa 1B68     		ldr	r3, [r3]
 8337 03ac CB1A     		subs	r3, r1, r3
 8338 03ae 1549     		ldr	r1, .L562+36
 8339 03b0 A1FB0313 		umull	r1, r3, r1, r3
 8340 03b4 DB08     		lsrs	r3, r3, #3
 8341 03b6 1344     		add	r3, r3, r2
 8342 03b8 0A4A     		ldr	r2, .L562+4
 8343 03ba D365     		str	r3, [r2, #92]
2387:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8344              		.loc 1 2387 0
 8345 03bc 094B     		ldr	r3, .L562+4
 8346 03be 1B6D     		ldr	r3, [r3, #80]
 8347 03c0 0133     		adds	r3, r3, #1
 8348 03c2 084A     		ldr	r2, .L562+4
 8349 03c4 1365     		str	r3, [r2, #80]
2388:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8350              		.loc 1 2388 0
 8351 03c6 0B4B     		ldr	r3, .L562+20
 8352 03c8 0022     		movs	r2, #0
 8353 03ca 1A70     		strb	r2, [r3]
2389:..\src/interruptions.c ****             break;
 8354              		.loc 1 2389 0
 8355 03cc 02E0     		b	.L547
 8356              	.L558:
2375:..\src/interruptions.c ****         case STATE_ACTIVE:
 8357              		.loc 1 2375 0
 8358 03ce 00BF     		nop
 8359 03d0 00E0     		b	.L547
 8360              	.L559:
2384:..\src/interruptions.c ****         case COUNTER_INC: 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 193


 8361              		.loc 1 2384 0
 8362 03d2 00BF     		nop
 8363              	.L547:
2390:..\src/interruptions.c ****     }
2391:..\src/interruptions.c ****           
2392:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2393:..\src/interruptions.c ****     save_cycles_eeprom();
 8364              		.loc 1 2393 0
 8365 03d4 FFF7FEFF 		bl	save_cycles_eeprom
2394:..\src/interruptions.c ****     
2395:..\src/interruptions.c **** }
 8366              		.loc 1 2395 0
 8367 03d8 00BF     		nop
 8368 03da 1837     		adds	r7, r7, #24
 8369              		.cfi_def_cfa_offset 8
 8370 03dc BD46     		mov	sp, r7
 8371              		.cfi_def_cfa_register 13
 8372              		@ sp needed
 8373 03de 80BD     		pop	{r7, pc}
 8374              	.L563:
 8375              		.align	2
 8376              	.L562:
 8377 03e0 00000000 		.word	g_emg_meas
 8378 03e4 00000000 		.word	g_mem
 8379 03e8 90010000 		.word	emg_cycle_status.10629
 8380 03ec 00000000 		.word	emg_1_status
 8381 03f0 00000000 		.word	emg_2_status
 8382 03f4 92010000 		.word	rest_cycle_status.10630
 8383 03f8 00000000 		.word	rest_enabled
 8384 03fc 94010000 		.word	timer_value_s.10643
 8385 0400 98010000 		.word	timer_value_e.10644
 8386 0404 CDCCCCCC 		.word	-858993459
 8387              		.cfi_endproc
 8388              	.LFE74:
 8389              		.size	cycles_counter_update, .-cycles_counter_update
 8390              		.section	.text.save_cycles_eeprom,"ax",%progbits
 8391              		.align	2
 8392              		.global	save_cycles_eeprom
 8393              		.thumb
 8394              		.thumb_func
 8395              		.type	save_cycles_eeprom, %function
 8396              	save_cycles_eeprom:
 8397              	.LFB75:
2396:..\src/interruptions.c **** 
2397:..\src/interruptions.c **** //==============================================================================
2398:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2399:..\src/interruptions.c **** //==============================================================================
2400:..\src/interruptions.c **** 
2401:..\src/interruptions.c **** void save_cycles_eeprom() {
 8398              		.loc 1 2401 0
 8399              		.cfi_startproc
 8400              		@ args = 0, pretend = 0, frame = 24
 8401              		@ frame_needed = 1, uses_anonymous_args = 0
 8402 0000 80B5     		push	{r7, lr}
 8403              		.cfi_def_cfa_offset 8
 8404              		.cfi_offset 7, -8
 8405              		.cfi_offset 14, -4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 194


 8406 0002 86B0     		sub	sp, sp, #24
 8407              		.cfi_def_cfa_offset 32
 8408 0004 00AF     		add	r7, sp, #0
 8409              		.cfi_def_cfa_register 7
2402:..\src/interruptions.c **** 
2403:..\src/interruptions.c ****     cystatus status;
2404:..\src/interruptions.c ****     static uint8 row_number;
2405:..\src/interruptions.c ****     uint8 row_start = 1;
 8410              		.loc 1 2405 0
 8411 0006 0123     		movs	r3, #1
 8412 0008 FB75     		strb	r3, [r7, #23]
2406:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 8413              		.loc 1 2406 0
 8414 000a 394B     		ldr	r3, .L580
 8415 000c 3B61     		str	r3, [r7, #16]
2407:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 8416              		.loc 1 2407 0
 8417 000e 394B     		ldr	r3, .L580+4
 8418 0010 FB60     		str	r3, [r7, #12]
2408:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 8419              		.loc 1 2408 0
 8420 0012 FB7D     		ldrb	r3, [r7, #23]
 8421 0014 0433     		adds	r3, r3, #4
 8422 0016 FB72     		strb	r3, [r7, #11]
2409:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2410:..\src/interruptions.c **** 
2411:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2412:..\src/interruptions.c ****     switch(cycles_status) {
 8423              		.loc 1 2412 0
 8424 0018 374B     		ldr	r3, .L580+8
 8425 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8426 001c 042B     		cmp	r3, #4
 8427 001e 63D8     		bhi	.L576
 8428 0020 01A2     		adr	r2, .L567
 8429 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8430 0026 00BF     		.p2align 2
 8431              	.L567:
 8432 0028 3D000000 		.word	.L566+1
 8433 002c 5B000000 		.word	.L568+1
 8434 0030 8B000000 		.word	.L569+1
 8435 0034 C7000000 		.word	.L570+1
 8436 0038 DF000000 		.word	.L577+1
 8437              		.p2align 1
 8438              	.L566:
2413:..\src/interruptions.c ****         case PREPARE_DATA:
2414:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2415:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 8439              		.loc 1 2415 0
 8440 003c 5022     		movs	r2, #80
 8441 003e 3969     		ldr	r1, [r7, #16]
 8442 0040 F868     		ldr	r0, [r7, #12]
 8443 0042 FFF7FEFF 		bl	memcpy
2416:..\src/interruptions.c ****             m_addr = addr_start;
 8444              		.loc 1 2416 0
 8445 0046 2D4A     		ldr	r2, .L580+12
 8446 0048 3B69     		ldr	r3, [r7, #16]
 8447 004a 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 195


2417:..\src/interruptions.c ****             row_number = row_start;
 8448              		.loc 1 2417 0
 8449 004c 2C4A     		ldr	r2, .L580+16
 8450 004e FB7D     		ldrb	r3, [r7, #23]
 8451 0050 1370     		strb	r3, [r2]
2418:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 8452              		.loc 1 2418 0
 8453 0052 294B     		ldr	r3, .L580+8
 8454 0054 0122     		movs	r2, #1
 8455 0056 1A70     		strb	r2, [r3]
2419:..\src/interruptions.c ****             break;
 8456              		.loc 1 2419 0
 8457 0058 46E0     		b	.L565
 8458              	.L568:
2420:..\src/interruptions.c ****             
2421:..\src/interruptions.c ****         case WRITE_CYCLES:
2422:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 8459              		.loc 1 2422 0
 8460 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2423:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 8461              		.loc 1 2423 0
 8462 005e 274B     		ldr	r3, .L580+12
 8463 0060 1A68     		ldr	r2, [r3]
 8464 0062 274B     		ldr	r3, .L580+16
 8465 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8466 0066 1946     		mov	r1, r3
 8467 0068 1046     		mov	r0, r2
 8468 006a FFF7FEFF 		bl	EEPROM_StartWrite
 8469 006e 7860     		str	r0, [r7, #4]
2424:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 8470              		.loc 1 2424 0
 8471 0070 7B68     		ldr	r3, [r7, #4]
 8472 0072 072B     		cmp	r3, #7
 8473 0074 02D0     		beq	.L572
 8474              		.loc 1 2424 0 is_stmt 0 discriminator 1
 8475 0076 7B68     		ldr	r3, [r7, #4]
 8476 0078 002B     		cmp	r3, #0
 8477 007a 32D1     		bne	.L578
 8478              	.L572:
2425:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 8479              		.loc 1 2425 0 is_stmt 1
 8480 007c 1E4B     		ldr	r3, .L580+8
 8481 007e 0222     		movs	r2, #2
 8482 0080 1A70     		strb	r2, [r3]
2426:..\src/interruptions.c ****                 can_write = FALSE;
 8483              		.loc 1 2426 0
 8484 0082 204B     		ldr	r3, .L580+20
 8485 0084 0022     		movs	r2, #0
 8486 0086 1A70     		strb	r2, [r3]
2427:..\src/interruptions.c ****             }
2428:..\src/interruptions.c ****             break;
 8487              		.loc 1 2428 0
 8488 0088 2BE0     		b	.L578
 8489              	.L569:
2429:..\src/interruptions.c ****             
2430:..\src/interruptions.c ****         case WAIT_QUERY:
2431:..\src/interruptions.c ****             status = EEPROM_Query();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 196


 8490              		.loc 1 2431 0
 8491 008a FFF7FEFF 		bl	EEPROM_Query
 8492 008e 7860     		str	r0, [r7, #4]
2432:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 8493              		.loc 1 2432 0
 8494 0090 7B68     		ldr	r3, [r7, #4]
 8495 0092 002B     		cmp	r3, #0
 8496 0094 27D1     		bne	.L579
2433:..\src/interruptions.c ****                 if (row_number < row_end) {
 8497              		.loc 1 2433 0
 8498 0096 1A4B     		ldr	r3, .L580+16
 8499 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8500 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8501 009c 9A42     		cmp	r2, r3
 8502 009e 0ED9     		bls	.L575
2434:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 8503              		.loc 1 2434 0
 8504 00a0 164B     		ldr	r3, .L580+12
 8505 00a2 1B68     		ldr	r3, [r3]
 8506 00a4 1033     		adds	r3, r3, #16
 8507 00a6 154A     		ldr	r2, .L580+12
 8508 00a8 1360     		str	r3, [r2]
2435:..\src/interruptions.c ****                     row_number = row_number + 1;
 8509              		.loc 1 2435 0
 8510 00aa 154B     		ldr	r3, .L580+16
 8511 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8512 00ae 0133     		adds	r3, r3, #1
 8513 00b0 DAB2     		uxtb	r2, r3
 8514 00b2 134B     		ldr	r3, .L580+16
 8515 00b4 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 8516              		.loc 1 2436 0
 8517 00b6 104B     		ldr	r3, .L580+8
 8518 00b8 0122     		movs	r2, #1
 8519 00ba 1A70     		strb	r2, [r3]
2437:..\src/interruptions.c ****                 }
2438:..\src/interruptions.c ****                 else {
2439:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2440:..\src/interruptions.c ****                 }
2441:..\src/interruptions.c ****             }
2442:..\src/interruptions.c ****             break;
 8520              		.loc 1 2442 0
 8521 00bc 13E0     		b	.L579
 8522              	.L575:
2439:..\src/interruptions.c ****                 }
 8523              		.loc 1 2439 0
 8524 00be 0E4B     		ldr	r3, .L580+8
 8525 00c0 0322     		movs	r2, #3
 8526 00c2 1A70     		strb	r2, [r3]
 8527              		.loc 1 2442 0
 8528 00c4 0FE0     		b	.L579
 8529              	.L570:
2443:..\src/interruptions.c ****            
2444:..\src/interruptions.c ****         case WRITE_END:
2445:..\src/interruptions.c ****             can_write = TRUE;            
 8530              		.loc 1 2445 0
 8531 00c6 0F4B     		ldr	r3, .L580+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 197


 8532 00c8 0122     		movs	r2, #1
 8533 00ca 1A70     		strb	r2, [r3]
2446:..\src/interruptions.c ****             cycles_status = NONE;
 8534              		.loc 1 2446 0
 8535 00cc 0A4B     		ldr	r3, .L580+8
 8536 00ce 0422     		movs	r2, #4
 8537 00d0 1A70     		strb	r2, [r3]
2447:..\src/interruptions.c ****             
2448:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2449:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 8538              		.loc 1 2449 0
 8539 00d2 5022     		movs	r2, #80
 8540 00d4 F968     		ldr	r1, [r7, #12]
 8541 00d6 3869     		ldr	r0, [r7, #16]
 8542 00d8 FFF7FEFF 		bl	memcpy
2450:..\src/interruptions.c ****             break;
 8543              		.loc 1 2450 0
 8544 00dc 04E0     		b	.L565
 8545              	.L577:
2451:..\src/interruptions.c ****             
2452:..\src/interruptions.c ****         case NONE:
2453:..\src/interruptions.c ****             break;
 8546              		.loc 1 2453 0
 8547 00de 00BF     		nop
 8548 00e0 02E0     		b	.L576
 8549              	.L578:
2428:..\src/interruptions.c ****             
 8550              		.loc 1 2428 0
 8551 00e2 00BF     		nop
 8552 00e4 00E0     		b	.L576
 8553              	.L579:
2442:..\src/interruptions.c ****            
 8554              		.loc 1 2442 0
 8555 00e6 00BF     		nop
 8556              	.L565:
 8557              	.L576:
2454:..\src/interruptions.c ****     }
2455:..\src/interruptions.c ****     
2456:..\src/interruptions.c **** }
 8558              		.loc 1 2456 0
 8559 00e8 00BF     		nop
 8560 00ea 1837     		adds	r7, r7, #24
 8561              		.cfi_def_cfa_offset 8
 8562 00ec BD46     		mov	sp, r7
 8563              		.cfi_def_cfa_register 13
 8564              		@ sp needed
 8565 00ee 80BD     		pop	{r7, pc}
 8566              	.L581:
 8567              		.align	2
 8568              	.L580:
 8569 00f0 10000000 		.word	g_mem+16
 8570 00f4 10000000 		.word	c_mem+16
 8571 00f8 00000000 		.word	cycles_status
 8572 00fc 9C010000 		.word	m_addr.10671
 8573 0100 A0010000 		.word	row_number.10666
 8574 0104 00000000 		.word	can_write
 8575              		.cfi_endproc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 198


 8576              	.LFE75:
 8577              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 8578              		.bss
 8579              	state.10381:
 8580 0000 00       		.space	1
 8581 0001 000000   		.align	2
 8582              	rx_queue.10385:
 8583 0004 000000   		.space	3
 8584              	data_packet_length.10383:
 8585 0007 00       		.space	1
 8586              	data_packet_index.10382:
 8587 0008 00       		.space	1
 8588 0009 000000   		.align	2
 8589              	data_packet_buffer.10384:
 8590 000c 00000000 		.space	128
 8590      00000000 
 8590      00000000 
 8590      00000000 
 8590      00000000 
 8591              		.data
 8592              		.align	1
 8593              		.type	counter_calibration.10401, %object
 8594              		.size	counter_calibration.10401, 2
 8595              	counter_calibration.10401:
 8596 0000 0100     		.short	1
 8597              		.align	1
 8598              		.type	counter_tension_func.10402, %object
 8599              		.size	counter_tension_func.10402, 2
 8600              	counter_tension_func.10402:
 8601 0002 0100     		.short	1
 8602              		.bss
 8603              	current_emg.10445:
 8604 008c 00       		.space	1
 8605 008d 000000   		.align	2
 8606              	pos_error_sum.10438:
 8607 0090 00000000 		.space	4
 8608              		.align	2
 8609              	prev_pos_err.10440:
 8610 0094 00000000 		.space	4
 8611              	motor_dir.10443:
 8612 0098 00       		.space	1
 8613 0099 000000   		.align	2
 8614              	curr_error_sum.10439:
 8615 009c 00000000 		.space	4
 8616              		.align	2
 8617              	prev_curr_err.10441:
 8618 00a0 00000000 		.space	4
 8619              		.align	2
 8620              	prev_pwm.10442:
 8621 00a4 00000000 		.space	4
 8622              		.align	2
 8623              	position_counter.10444:
 8624 00a8 00000000 		.space	4
 8625              		.align	2
 8626              	current_emg.10500:
 8627 00ac 0000     		.space	2
 8628 00ae 0000     		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 199


 8629              	pos_error_sum.10493:
 8630 00b0 00000000 		.space	8
 8630      00000000 
 8631              		.align	2
 8632              	prev_pos_err.10495:
 8633 00b8 00000000 		.space	8
 8633      00000000 
 8634              		.align	2
 8635              	motor_dir.10498:
 8636 00c0 0000     		.space	2
 8637 00c2 0000     		.align	2
 8638              	curr_error_sum.10494:
 8639 00c4 00000000 		.space	8
 8639      00000000 
 8640              		.align	2
 8641              	prev_curr_err.10496:
 8642 00cc 00000000 		.space	8
 8642      00000000 
 8643              		.align	2
 8644              	prev_pwm.10497:
 8645 00d4 00000000 		.space	8
 8645      00000000 
 8646              		.align	2
 8647              	position_counter.10499:
 8648 00dc 00000000 		.space	8
 8648      00000000 
 8649              		.align	2
 8650              	last_value_encoder.10540:
 8651 00e4 00000000 		.space	24
 8651      00000000 
 8651      00000000 
 8651      00000000 
 8651      00000000 
 8652              		.align	2
 8653              	comp_value_encoder.10541:
 8654 00fc 00000000 		.space	24
 8654      00000000 
 8654      00000000 
 8654      00000000 
 8654      00000000 
 8655              		.data
 8656              		.align	2
 8657              		.type	only_first_time.10543, %object
 8658              		.size	only_first_time.10543, 2
 8659              	only_first_time.10543:
 8660 0004 01       		.byte	1
 8661 0005 01       		.byte	1
 8662              		.bss
 8663              		.align	2
 8664              	error.10542:
 8665 0114 00000000 		.space	6
 8665      0000
 8666 011a 0000     		.align	2
 8667              	v_value.10548:
 8668 011c 00000000 		.space	24
 8668      00000000 
 8668      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 200


 8668      00000000 
 8668      00000000 
 8669              		.align	2
 8670              	vv_value.10549:
 8671 0134 00000000 		.space	24
 8671      00000000 
 8671      00000000 
 8671      00000000 
 8671      00000000 
 8672              		.align	2
 8673              	vvv_value.10550:
 8674 014c 00000000 		.space	24
 8674      00000000 
 8674      00000000 
 8674      00000000 
 8674      00000000 
 8675              		.align	2
 8676              	pos_reconstruct.10547:
 8677 0164 0000     		.space	2
 8678 0166 0000     		.align	2
 8679              	one_time_execute.10545:
 8680 0168 0000     		.space	2
 8681 016a 0000     		.align	2
 8682              	safe_startup_motor_activation.10544:
 8683 016c 0000     		.space	2
 8684 016e 0000     		.align	2
 8685              	count_startup_motor.10546:
 8686 0170 00000000 		.space	8
 8686      00000000 
 8687              		.data
 8688              		.type	first_tension_valid.10569, %object
 8689              		.size	first_tension_valid.10569, 1
 8690              	first_tension_valid.10569:
 8691 0006 01       		.byte	1
 8692              		.bss
 8693              		.align	1
 8694              	count.10570:
 8695 0178 0000     		.space	2
 8696              	idx.10572:
 8697 017a 00       		.space	1
 8698 017b 00       		.align	2
 8699              	v_count.10571:
 8700 017c 00000000 		.space	4
 8701              		.align	1
 8702              	emg_counter_1.10567:
 8703 0180 0000     		.space	2
 8704              		.align	1
 8705              	emg_counter_2.10568:
 8706 0182 0000     		.space	2
 8707              	pos_cycle_status.10628:
 8708 0184 00       		.space	1
 8709 0185 000000   		.align	2
 8710              	thr_pos.10632:
 8711 0188 00000000 		.space	4
 8712              		.align	2
 8713              	max_pos.10633:
 8714 018c 00000000 		.space	4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 201


 8715              		.data
 8716 0007 00       		.align	2
 8717              		.type	bin_threshold.10631, %object
 8718              		.size	bin_threshold.10631, 4
 8719              	bin_threshold.10631:
 8720 0008 FA000000 		.word	250
 8721              		.bss
 8722              		.align	2
 8723              	emg_cycle_status.10629:
 8724 0190 0000     		.space	2
 8725              	rest_cycle_status.10630:
 8726 0192 00       		.space	1
 8727 0193 00       		.align	2
 8728              	timer_value_s.10643:
 8729 0194 00000000 		.space	4
 8730              		.align	2
 8731              	timer_value_e.10644:
 8732 0198 00000000 		.space	4
 8733              		.align	2
 8734              	m_addr.10671:
 8735 019c 00000000 		.space	4
 8736              	row_number.10666:
 8737 01a0 00       		.space	1
 8738              		.text
 8739              	.Letext0:
 8740              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8741              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8742              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8743              		.file 5 "..\\src\\commands.h"
 8744              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 8745              		.file 7 "..\\src\\globals.h"
 8746              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 8747              		.section	.debug_info,"",%progbits
 8748              	.Ldebug_info0:
 8749 0000 85180000 		.4byte	0x1885
 8750 0004 0400     		.2byte	0x4
 8751 0006 00000000 		.4byte	.Ldebug_abbrev0
 8752 000a 04       		.byte	0x4
 8753 000b 01       		.uleb128 0x1
 8754 000c E8070000 		.4byte	.LASF314
 8755 0010 0C       		.byte	0xc
 8756 0011 0E0F0000 		.4byte	.LASF315
 8757 0015 82060000 		.4byte	.LASF316
 8758 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8759 001d 00000000 		.4byte	0
 8760 0021 00000000 		.4byte	.Ldebug_line0
 8761 0025 02       		.uleb128 0x2
 8762 0026 01       		.byte	0x1
 8763 0027 06       		.byte	0x6
 8764 0028 34030000 		.4byte	.LASF0
 8765 002c 02       		.uleb128 0x2
 8766 002d 01       		.byte	0x1
 8767 002e 08       		.byte	0x8
 8768 002f B1030000 		.4byte	.LASF1
 8769 0033 02       		.uleb128 0x2
 8770 0034 02       		.byte	0x2
 8771 0035 05       		.byte	0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 202


 8772 0036 770D0000 		.4byte	.LASF2
 8773 003a 02       		.uleb128 0x2
 8774 003b 02       		.byte	0x2
 8775 003c 07       		.byte	0x7
 8776 003d CB0E0000 		.4byte	.LASF3
 8777 0041 03       		.uleb128 0x3
 8778 0042 810F0000 		.4byte	.LASF9
 8779 0046 02       		.byte	0x2
 8780 0047 3F       		.byte	0x3f
 8781 0048 4C000000 		.4byte	0x4c
 8782 004c 02       		.uleb128 0x2
 8783 004d 04       		.byte	0x4
 8784 004e 05       		.byte	0x5
 8785 004f 3F020000 		.4byte	.LASF4
 8786 0053 02       		.uleb128 0x2
 8787 0054 04       		.byte	0x4
 8788 0055 07       		.byte	0x7
 8789 0056 12070000 		.4byte	.LASF5
 8790 005a 02       		.uleb128 0x2
 8791 005b 08       		.byte	0x8
 8792 005c 05       		.byte	0x5
 8793 005d AE080000 		.4byte	.LASF6
 8794 0061 02       		.uleb128 0x2
 8795 0062 08       		.byte	0x8
 8796 0063 07       		.byte	0x7
 8797 0064 4E0B0000 		.4byte	.LASF7
 8798 0068 04       		.uleb128 0x4
 8799 0069 04       		.byte	0x4
 8800 006a 05       		.byte	0x5
 8801 006b 696E7400 		.ascii	"int\000"
 8802 006f 02       		.uleb128 0x2
 8803 0070 04       		.byte	0x4
 8804 0071 07       		.byte	0x7
 8805 0072 91090000 		.4byte	.LASF8
 8806 0076 03       		.uleb128 0x3
 8807 0077 52000000 		.4byte	.LASF10
 8808 007b 03       		.byte	0x3
 8809 007c 2C       		.byte	0x2c
 8810 007d 41000000 		.4byte	0x41
 8811 0081 05       		.uleb128 0x5
 8812 0082 5D0D0000 		.4byte	.LASF11
 8813 0086 04       		.byte	0x4
 8814 0087 E401     		.2byte	0x1e4
 8815 0089 2C000000 		.4byte	0x2c
 8816 008d 05       		.uleb128 0x5
 8817 008e CE0F0000 		.4byte	.LASF12
 8818 0092 04       		.byte	0x4
 8819 0093 E501     		.2byte	0x1e5
 8820 0095 3A000000 		.4byte	0x3a
 8821 0099 05       		.uleb128 0x5
 8822 009a 83000000 		.4byte	.LASF13
 8823 009e 04       		.byte	0x4
 8824 009f E601     		.2byte	0x1e6
 8825 00a1 53000000 		.4byte	0x53
 8826 00a5 05       		.uleb128 0x5
 8827 00a6 54010000 		.4byte	.LASF14
 8828 00aa 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 203


 8829 00ab E701     		.2byte	0x1e7
 8830 00ad 25000000 		.4byte	0x25
 8831 00b1 05       		.uleb128 0x5
 8832 00b2 030E0000 		.4byte	.LASF15
 8833 00b6 04       		.byte	0x4
 8834 00b7 E801     		.2byte	0x1e8
 8835 00b9 33000000 		.4byte	0x33
 8836 00bd 05       		.uleb128 0x5
 8837 00be 250F0000 		.4byte	.LASF16
 8838 00c2 04       		.byte	0x4
 8839 00c3 E901     		.2byte	0x1e9
 8840 00c5 4C000000 		.4byte	0x4c
 8841 00c9 05       		.uleb128 0x5
 8842 00ca DB020000 		.4byte	.LASF17
 8843 00ce 04       		.byte	0x4
 8844 00cf EA01     		.2byte	0x1ea
 8845 00d1 D5000000 		.4byte	0xd5
 8846 00d5 02       		.uleb128 0x2
 8847 00d6 04       		.byte	0x4
 8848 00d7 04       		.byte	0x4
 8849 00d8 66090000 		.4byte	.LASF18
 8850 00dc 02       		.uleb128 0x2
 8851 00dd 08       		.byte	0x8
 8852 00de 04       		.byte	0x4
 8853 00df F1080000 		.4byte	.LASF19
 8854 00e3 02       		.uleb128 0x2
 8855 00e4 01       		.byte	0x1
 8856 00e5 08       		.byte	0x8
 8857 00e6 4C040000 		.4byte	.LASF20
 8858 00ea 05       		.uleb128 0x5
 8859 00eb CA090000 		.4byte	.LASF21
 8860 00ef 04       		.byte	0x4
 8861 00f0 8602     		.2byte	0x286
 8862 00f2 53000000 		.4byte	0x53
 8863 00f6 05       		.uleb128 0x5
 8864 00f7 EB0B0000 		.4byte	.LASF22
 8865 00fb 04       		.byte	0x4
 8866 00fc 8E02     		.2byte	0x28e
 8867 00fe 02010000 		.4byte	0x102
 8868 0102 06       		.uleb128 0x6
 8869 0103 81000000 		.4byte	0x81
 8870 0107 02       		.uleb128 0x2
 8871 0108 08       		.byte	0x8
 8872 0109 04       		.byte	0x4
 8873 010a 5B0A0000 		.4byte	.LASF23
 8874 010e 02       		.uleb128 0x2
 8875 010f 04       		.byte	0x4
 8876 0110 07       		.byte	0x7
 8877 0111 00000000 		.4byte	.LASF24
 8878 0115 07       		.uleb128 0x7
 8879 0116 E3000000 		.4byte	0xe3
 8880 011a 25010000 		.4byte	0x125
 8881 011e 08       		.uleb128 0x8
 8882 011f 0E010000 		.4byte	0x10e
 8883 0123 07       		.byte	0x7
 8884 0124 00       		.byte	0
 8885 0125 09       		.uleb128 0x9
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 204


 8886 0126 BB0F0000 		.4byte	.LASF32
 8887 012a 01       		.byte	0x1
 8888 012b 2C000000 		.4byte	0x2c
 8889 012f 05       		.byte	0x5
 8890 0130 8B       		.byte	0x8b
 8891 0131 60010000 		.4byte	0x160
 8892 0135 0A       		.uleb128 0xa
 8893 0136 31060000 		.4byte	.LASF25
 8894 013a 00       		.byte	0
 8895 013b 0A       		.uleb128 0xa
 8896 013c D3090000 		.4byte	.LASF26
 8897 0140 01       		.byte	0x1
 8898 0141 0A       		.uleb128 0xa
 8899 0142 D5010000 		.4byte	.LASF27
 8900 0146 02       		.byte	0x2
 8901 0147 0A       		.uleb128 0xa
 8902 0148 22010000 		.4byte	.LASF28
 8903 014c 03       		.byte	0x3
 8904 014d 0A       		.uleb128 0xa
 8905 014e DC000000 		.4byte	.LASF29
 8906 0152 04       		.byte	0x4
 8907 0153 0A       		.uleb128 0xa
 8908 0154 1A000000 		.4byte	.LASF30
 8909 0158 05       		.byte	0x5
 8910 0159 0A       		.uleb128 0xa
 8911 015a F30C0000 		.4byte	.LASF31
 8912 015e 06       		.byte	0x6
 8913 015f 00       		.byte	0
 8914 0160 09       		.uleb128 0x9
 8915 0161 BC080000 		.4byte	.LASF33
 8916 0165 01       		.byte	0x1
 8917 0166 2C000000 		.4byte	0x2c
 8918 016a 05       		.byte	0x5
 8919 016b 9E       		.byte	0x9e
 8920 016c 89010000 		.4byte	0x189
 8921 0170 0A       		.uleb128 0xa
 8922 0171 730F0000 		.4byte	.LASF34
 8923 0175 00       		.byte	0
 8924 0176 0A       		.uleb128 0xa
 8925 0177 C6070000 		.4byte	.LASF35
 8926 017b 01       		.byte	0x1
 8927 017c 0A       		.uleb128 0xa
 8928 017d 4B0A0000 		.4byte	.LASF36
 8929 0181 02       		.byte	0x2
 8930 0182 0A       		.uleb128 0xa
 8931 0183 F5060000 		.4byte	.LASF37
 8932 0187 03       		.byte	0x3
 8933 0188 00       		.byte	0
 8934 0189 03       		.uleb128 0x3
 8935 018a 4C0F0000 		.4byte	.LASF38
 8936 018e 06       		.byte	0x6
 8937 018f 7E       		.byte	0x7e
 8938 0190 94010000 		.4byte	0x194
 8939 0194 0B       		.uleb128 0xb
 8940 0195 4C0F0000 		.4byte	.LASF38
 8941 0199 0C       		.uleb128 0xc
 8942 019a 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 205


 8943 019b 89010000 		.4byte	0x189
 8944 019f 0D       		.uleb128 0xd
 8945 01a0 76080000 		.4byte	.LASF41
 8946 01a4 10       		.byte	0x10
 8947 01a5 07       		.byte	0x7
 8948 01a6 D3       		.byte	0xd3
 8949 01a7 DC010000 		.4byte	0x1dc
 8950 01ab 0E       		.uleb128 0xe
 8951 01ac 706F7300 		.ascii	"pos\000"
 8952 01b0 07       		.byte	0x7
 8953 01b1 D4       		.byte	0xd4
 8954 01b2 BD000000 		.4byte	0xbd
 8955 01b6 00       		.byte	0
 8956 01b7 0F       		.uleb128 0xf
 8957 01b8 AB070000 		.4byte	.LASF39
 8958 01bc 07       		.byte	0x7
 8959 01bd D5       		.byte	0xd5
 8960 01be BD000000 		.4byte	0xbd
 8961 01c2 04       		.byte	0x4
 8962 01c3 0E       		.uleb128 0xe
 8963 01c4 70776D00 		.ascii	"pwm\000"
 8964 01c8 07       		.byte	0x7
 8965 01c9 D6       		.byte	0xd6
 8966 01ca BD000000 		.4byte	0xbd
 8967 01ce 08       		.byte	0x8
 8968 01cf 0F       		.uleb128 0xf
 8969 01d0 820B0000 		.4byte	.LASF40
 8970 01d4 07       		.byte	0x7
 8971 01d5 D7       		.byte	0xd7
 8972 01d6 81000000 		.4byte	0x81
 8973 01da 0C       		.byte	0xc
 8974 01db 00       		.byte	0
 8975 01dc 0D       		.uleb128 0xd
 8976 01dd CD0C0000 		.4byte	.LASF42
 8977 01e1 34       		.byte	0x34
 8978 01e2 07       		.byte	0x7
 8979 01e3 DE       		.byte	0xde
 8980 01e4 3D020000 		.4byte	0x23d
 8981 01e8 0E       		.uleb128 0xe
 8982 01e9 706F7300 		.ascii	"pos\000"
 8983 01ed 07       		.byte	0x7
 8984 01ee DF       		.byte	0xdf
 8985 01ef 3D020000 		.4byte	0x23d
 8986 01f3 00       		.byte	0
 8987 01f4 0F       		.uleb128 0xf
 8988 01f5 AB070000 		.4byte	.LASF39
 8989 01f9 07       		.byte	0x7
 8990 01fa E0       		.byte	0xe0
 8991 01fb BD000000 		.4byte	0xbd
 8992 01ff 0C       		.byte	0xc
 8993 0200 0F       		.uleb128 0xf
 8994 0201 3A0E0000 		.4byte	.LASF43
 8995 0205 07       		.byte	0x7
 8996 0206 E1       		.byte	0xe1
 8997 0207 BD000000 		.4byte	0xbd
 8998 020b 10       		.byte	0x10
 8999 020c 0F       		.uleb128 0xf
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 206


 9000 020d 3F070000 		.4byte	.LASF44
 9001 0211 07       		.byte	0x7
 9002 0212 E2       		.byte	0xe2
 9003 0213 BD000000 		.4byte	0xbd
 9004 0217 14       		.byte	0x14
 9005 0218 0E       		.uleb128 0xe
 9006 0219 726F7400 		.ascii	"rot\000"
 9007 021d 07       		.byte	0x7
 9008 021e E3       		.byte	0xe3
 9009 021f 4D020000 		.4byte	0x24d
 9010 0223 18       		.byte	0x18
 9011 0224 0E       		.uleb128 0xe
 9012 0225 76656C00 		.ascii	"vel\000"
 9013 0229 07       		.byte	0x7
 9014 022a E4       		.byte	0xe4
 9015 022b 3D020000 		.4byte	0x23d
 9016 022f 1C       		.byte	0x1c
 9017 0230 0E       		.uleb128 0xe
 9018 0231 61636300 		.ascii	"acc\000"
 9019 0235 07       		.byte	0x7
 9020 0236 E5       		.byte	0xe5
 9021 0237 3D020000 		.4byte	0x23d
 9022 023b 28       		.byte	0x28
 9023 023c 00       		.byte	0
 9024 023d 07       		.uleb128 0x7
 9025 023e BD000000 		.4byte	0xbd
 9026 0242 4D020000 		.4byte	0x24d
 9027 0246 08       		.uleb128 0x8
 9028 0247 0E010000 		.4byte	0x10e
 9029 024b 02       		.byte	0x2
 9030 024c 00       		.byte	0
 9031 024d 07       		.uleb128 0x7
 9032 024e A5000000 		.4byte	0xa5
 9033 0252 5D020000 		.4byte	0x25d
 9034 0256 08       		.uleb128 0x8
 9035 0257 0E010000 		.4byte	0x10e
 9036 025b 02       		.byte	0x2
 9037 025c 00       		.byte	0
 9038 025d 0D       		.uleb128 0xd
 9039 025e 8D0A0000 		.4byte	.LASF45
 9040 0262 20       		.byte	0x20
 9041 0263 07       		.byte	0x7
 9042 0264 E8       		.byte	0xe8
 9043 0265 82020000 		.4byte	0x282
 9044 0269 0E       		.uleb128 0xe
 9045 026a 656D6700 		.ascii	"emg\000"
 9046 026e 07       		.byte	0x7
 9047 026f E9       		.byte	0xe9
 9048 0270 82020000 		.4byte	0x282
 9049 0274 00       		.byte	0
 9050 0275 0F       		.uleb128 0xf
 9051 0276 0F0A0000 		.4byte	.LASF46
 9052 027a 07       		.byte	0x7
 9053 027b EA       		.byte	0xea
 9054 027c 92020000 		.4byte	0x292
 9055 0280 08       		.byte	0x8
 9056 0281 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 207


 9057 0282 07       		.uleb128 0x7
 9058 0283 BD000000 		.4byte	0xbd
 9059 0287 92020000 		.4byte	0x292
 9060 028b 08       		.uleb128 0x8
 9061 028c 0E010000 		.4byte	0x10e
 9062 0290 01       		.byte	0x1
 9063 0291 00       		.byte	0
 9064 0292 07       		.uleb128 0x7
 9065 0293 BD000000 		.4byte	0xbd
 9066 0297 A2020000 		.4byte	0x2a2
 9067 029b 08       		.uleb128 0x8
 9068 029c 0E010000 		.4byte	0x10e
 9069 02a0 05       		.byte	0x5
 9070 02a1 00       		.byte	0
 9071 02a2 0D       		.uleb128 0xd
 9072 02a3 9D040000 		.4byte	.LASF47
 9073 02a7 04       		.byte	0x4
 9074 02a8 07       		.byte	0x7
 9075 02a9 ED       		.byte	0xed
 9076 02aa BB020000 		.4byte	0x2bb
 9077 02ae 0F       		.uleb128 0xf
 9078 02af 43040000 		.4byte	.LASF48
 9079 02b3 07       		.byte	0x7
 9080 02b4 EE       		.byte	0xee
 9081 02b5 D5000000 		.4byte	0xd5
 9082 02b9 00       		.byte	0
 9083 02ba 00       		.byte	0
 9084 02bb 0D       		.uleb128 0xd
 9085 02bc 70000000 		.4byte	.LASF49
 9086 02c0 86       		.byte	0x86
 9087 02c1 07       		.byte	0x7
 9088 02c2 F5       		.byte	0xf5
 9089 02c3 F8020000 		.4byte	0x2f8
 9090 02c7 0F       		.uleb128 0xf
 9091 02c8 52050000 		.4byte	.LASF50
 9092 02cc 07       		.byte	0x7
 9093 02cd F6       		.byte	0xf6
 9094 02ce F8020000 		.4byte	0x2f8
 9095 02d2 00       		.byte	0
 9096 02d3 0F       		.uleb128 0xf
 9097 02d4 650B0000 		.4byte	.LASF51
 9098 02d8 07       		.byte	0x7
 9099 02d9 F7       		.byte	0xf7
 9100 02da B1000000 		.4byte	0xb1
 9101 02de 80       		.byte	0x80
 9102 02df 0E       		.uleb128 0xe
 9103 02e0 696E6400 		.ascii	"ind\000"
 9104 02e4 07       		.byte	0x7
 9105 02e5 F8       		.byte	0xf8
 9106 02e6 B1000000 		.4byte	0xb1
 9107 02ea 82       		.byte	0x82
 9108 02eb 0F       		.uleb128 0xf
 9109 02ec A8010000 		.4byte	.LASF52
 9110 02f0 07       		.byte	0x7
 9111 02f1 F9       		.byte	0xf9
 9112 02f2 81000000 		.4byte	0x81
 9113 02f6 84       		.byte	0x84
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 208


 9114 02f7 00       		.byte	0
 9115 02f8 07       		.uleb128 0x7
 9116 02f9 81000000 		.4byte	0x81
 9117 02fd 08030000 		.4byte	0x308
 9118 0301 08       		.uleb128 0x8
 9119 0302 0E010000 		.4byte	0x10e
 9120 0306 7F       		.byte	0x7f
 9121 0307 00       		.byte	0
 9122 0308 10       		.uleb128 0x10
 9123 0309 C8020000 		.4byte	.LASF53
 9124 030d 50       		.byte	0x50
 9125 030e 07       		.byte	0x7
 9126 030f 0201     		.2byte	0x102
 9127 0311 71030000 		.4byte	0x371
 9128 0315 11       		.uleb128 0x11
 9129 0316 FD020000 		.4byte	.LASF54
 9130 031a 07       		.byte	0x7
 9131 031b 0301     		.2byte	0x103
 9132 031d 71030000 		.4byte	0x371
 9133 0321 00       		.byte	0
 9134 0322 11       		.uleb128 0x11
 9135 0323 7A010000 		.4byte	.LASF55
 9136 0327 07       		.byte	0x7
 9137 0328 0401     		.2byte	0x104
 9138 032a 81030000 		.4byte	0x381
 9139 032e 08       		.byte	0x8
 9140 032f 11       		.uleb128 0x11
 9141 0330 3E0A0000 		.4byte	.LASF56
 9142 0334 07       		.byte	0x7
 9143 0335 0501     		.2byte	0x105
 9144 0337 91030000 		.4byte	0x391
 9145 033b 30       		.byte	0x30
 9146 033c 11       		.uleb128 0x11
 9147 033d 06010000 		.4byte	.LASF57
 9148 0341 07       		.byte	0x7
 9149 0342 0601     		.2byte	0x106
 9150 0344 99000000 		.4byte	0x99
 9151 0348 40       		.byte	0x40
 9152 0349 11       		.uleb128 0x11
 9153 034a 8B0F0000 		.4byte	.LASF58
 9154 034e 07       		.byte	0x7
 9155 034f 0701     		.2byte	0x107
 9156 0351 99000000 		.4byte	0x99
 9157 0355 44       		.byte	0x44
 9158 0356 11       		.uleb128 0x11
 9159 0357 24070000 		.4byte	.LASF59
 9160 035b 07       		.byte	0x7
 9161 035c 0801     		.2byte	0x108
 9162 035e 99000000 		.4byte	0x99
 9163 0362 48       		.byte	0x48
 9164 0363 11       		.uleb128 0x11
 9165 0364 49070000 		.4byte	.LASF60
 9166 0368 07       		.byte	0x7
 9167 0369 0901     		.2byte	0x109
 9168 036b 99000000 		.4byte	0x99
 9169 036f 4C       		.byte	0x4c
 9170 0370 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 209


 9171 0371 07       		.uleb128 0x7
 9172 0372 99000000 		.4byte	0x99
 9173 0376 81030000 		.4byte	0x381
 9174 037a 08       		.uleb128 0x8
 9175 037b 0E010000 		.4byte	0x10e
 9176 037f 01       		.byte	0x1
 9177 0380 00       		.byte	0
 9178 0381 07       		.uleb128 0x7
 9179 0382 99000000 		.4byte	0x99
 9180 0386 91030000 		.4byte	0x391
 9181 038a 08       		.uleb128 0x8
 9182 038b 0E010000 		.4byte	0x10e
 9183 038f 09       		.byte	0x9
 9184 0390 00       		.byte	0
 9185 0391 07       		.uleb128 0x7
 9186 0392 99000000 		.4byte	0x99
 9187 0396 A1030000 		.4byte	0x3a1
 9188 039a 08       		.uleb128 0x8
 9189 039b 0E010000 		.4byte	0x10e
 9190 039f 03       		.byte	0x3
 9191 03a0 00       		.byte	0
 9192 03a1 10       		.uleb128 0x10
 9193 03a2 CB010000 		.4byte	.LASF61
 9194 03a6 10       		.byte	0x10
 9195 03a7 07       		.byte	0x7
 9196 03a8 1001     		.2byte	0x110
 9197 03aa 30040000 		.4byte	0x430
 9198 03ae 12       		.uleb128 0x12
 9199 03af 696400   		.ascii	"id\000"
 9200 03b2 07       		.byte	0x7
 9201 03b3 1101     		.2byte	0x111
 9202 03b5 81000000 		.4byte	0x81
 9203 03b9 00       		.byte	0
 9204 03ba 11       		.uleb128 0x11
 9205 03bb A80D0000 		.4byte	.LASF62
 9206 03bf 07       		.byte	0x7
 9207 03c0 1201     		.2byte	0x112
 9208 03c2 30040000 		.4byte	0x430
 9209 03c6 01       		.byte	0x1
 9210 03c7 11       		.uleb128 0x11
 9211 03c8 D20D0000 		.4byte	.LASF63
 9212 03cc 07       		.byte	0x7
 9213 03cd 1301     		.2byte	0x113
 9214 03cf 30040000 		.4byte	0x430
 9215 03d3 04       		.byte	0x4
 9216 03d4 11       		.uleb128 0x11
 9217 03d5 0B040000 		.4byte	.LASF64
 9218 03d9 07       		.byte	0x7
 9219 03da 1401     		.2byte	0x114
 9220 03dc 81000000 		.4byte	0x81
 9221 03e0 07       		.byte	0x7
 9222 03e1 11       		.uleb128 0x11
 9223 03e2 5F020000 		.4byte	.LASF65
 9224 03e6 07       		.byte	0x7
 9225 03e7 1501     		.2byte	0x115
 9226 03e9 81000000 		.4byte	0x81
 9227 03ed 08       		.byte	0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 210


 9228 03ee 11       		.uleb128 0x11
 9229 03ef F1010000 		.4byte	.LASF66
 9230 03f3 07       		.byte	0x7
 9231 03f4 1601     		.2byte	0x116
 9232 03f6 81000000 		.4byte	0x81
 9233 03fa 09       		.byte	0x9
 9234 03fb 11       		.uleb128 0x11
 9235 03fc B20E0000 		.4byte	.LASF67
 9236 0400 07       		.byte	0x7
 9237 0401 1701     		.2byte	0x117
 9238 0403 81000000 		.4byte	0x81
 9239 0407 0A       		.byte	0xa
 9240 0408 11       		.uleb128 0x11
 9241 0409 730E0000 		.4byte	.LASF68
 9242 040d 07       		.byte	0x7
 9243 040e 1801     		.2byte	0x118
 9244 0410 81000000 		.4byte	0x81
 9245 0414 0B       		.byte	0xb
 9246 0415 11       		.uleb128 0x11
 9247 0416 7C0C0000 		.4byte	.LASF69
 9248 041a 07       		.byte	0x7
 9249 041b 1901     		.2byte	0x119
 9250 041d 81000000 		.4byte	0x81
 9251 0421 0C       		.byte	0xc
 9252 0422 11       		.uleb128 0x11
 9253 0423 A3020000 		.4byte	.LASF70
 9254 0427 07       		.byte	0x7
 9255 0428 1A01     		.2byte	0x11a
 9256 042a 30040000 		.4byte	0x430
 9257 042e 0D       		.byte	0xd
 9258 042f 00       		.byte	0
 9259 0430 07       		.uleb128 0x7
 9260 0431 81000000 		.4byte	0x81
 9261 0435 40040000 		.4byte	0x440
 9262 0439 08       		.uleb128 0x8
 9263 043a 0E010000 		.4byte	0x10e
 9264 043e 02       		.byte	0x2
 9265 043f 00       		.byte	0
 9266 0440 10       		.uleb128 0x10
 9267 0441 7B090000 		.4byte	.LASF71
 9268 0445 70       		.byte	0x70
 9269 0446 07       		.byte	0x7
 9270 0447 2101     		.2byte	0x121
 9271 0449 BA050000 		.4byte	0x5ba
 9272 044d 12       		.uleb128 0x12
 9273 044e 6B5F7000 		.ascii	"k_p\000"
 9274 0452 07       		.byte	0x7
 9275 0453 2201     		.2byte	0x122
 9276 0455 BD000000 		.4byte	0xbd
 9277 0459 00       		.byte	0
 9278 045a 12       		.uleb128 0x12
 9279 045b 6B5F6900 		.ascii	"k_i\000"
 9280 045f 07       		.byte	0x7
 9281 0460 2301     		.2byte	0x123
 9282 0462 BD000000 		.4byte	0xbd
 9283 0466 04       		.byte	0x4
 9284 0467 12       		.uleb128 0x12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 211


 9285 0468 6B5F6400 		.ascii	"k_d\000"
 9286 046c 07       		.byte	0x7
 9287 046d 2401     		.2byte	0x124
 9288 046f BD000000 		.4byte	0xbd
 9289 0473 08       		.byte	0x8
 9290 0474 11       		.uleb128 0x11
 9291 0475 BE0B0000 		.4byte	.LASF72
 9292 0479 07       		.byte	0x7
 9293 047a 2501     		.2byte	0x125
 9294 047c BD000000 		.4byte	0xbd
 9295 0480 0C       		.byte	0xc
 9296 0481 11       		.uleb128 0x11
 9297 0482 AF040000 		.4byte	.LASF73
 9298 0486 07       		.byte	0x7
 9299 0487 2601     		.2byte	0x126
 9300 0489 BD000000 		.4byte	0xbd
 9301 048d 10       		.byte	0x10
 9302 048e 11       		.uleb128 0x11
 9303 048f 97040000 		.4byte	.LASF74
 9304 0493 07       		.byte	0x7
 9305 0494 2701     		.2byte	0x127
 9306 0496 BD000000 		.4byte	0xbd
 9307 049a 14       		.byte	0x14
 9308 049b 11       		.uleb128 0x11
 9309 049c 330E0000 		.4byte	.LASF75
 9310 04a0 07       		.byte	0x7
 9311 04a1 2801     		.2byte	0x128
 9312 04a3 BD000000 		.4byte	0xbd
 9313 04a7 18       		.byte	0x18
 9314 04a8 11       		.uleb128 0x11
 9315 04a9 4B050000 		.4byte	.LASF76
 9316 04ad 07       		.byte	0x7
 9317 04ae 2901     		.2byte	0x129
 9318 04b0 BD000000 		.4byte	0xbd
 9319 04b4 1C       		.byte	0x1c
 9320 04b5 11       		.uleb128 0x11
 9321 04b6 810D0000 		.4byte	.LASF77
 9322 04ba 07       		.byte	0x7
 9323 04bb 2A01     		.2byte	0x12a
 9324 04bd BD000000 		.4byte	0xbd
 9325 04c1 20       		.byte	0x20
 9326 04c2 11       		.uleb128 0x11
 9327 04c3 59050000 		.4byte	.LASF78
 9328 04c7 07       		.byte	0x7
 9329 04c8 2B01     		.2byte	0x12b
 9330 04ca BD000000 		.4byte	0xbd
 9331 04ce 24       		.byte	0x24
 9332 04cf 11       		.uleb128 0x11
 9333 04d0 79060000 		.4byte	.LASF79
 9334 04d4 07       		.byte	0x7
 9335 04d5 2C01     		.2byte	0x12c
 9336 04d7 BD000000 		.4byte	0xbd
 9337 04db 28       		.byte	0x28
 9338 04dc 11       		.uleb128 0x11
 9339 04dd 01100000 		.4byte	.LASF80
 9340 04e1 07       		.byte	0x7
 9341 04e2 2D01     		.2byte	0x12d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 212


 9342 04e4 BD000000 		.4byte	0xbd
 9343 04e8 2C       		.byte	0x2c
 9344 04e9 11       		.uleb128 0x11
 9345 04ea 59070000 		.4byte	.LASF81
 9346 04ee 07       		.byte	0x7
 9347 04ef 2E01     		.2byte	0x12e
 9348 04f1 81000000 		.4byte	0x81
 9349 04f5 30       		.byte	0x30
 9350 04f6 11       		.uleb128 0x11
 9351 04f7 1C0E0000 		.4byte	.LASF82
 9352 04fb 07       		.byte	0x7
 9353 04fc 2F01     		.2byte	0x12f
 9354 04fe 81000000 		.4byte	0x81
 9355 0502 31       		.byte	0x31
 9356 0503 11       		.uleb128 0x11
 9357 0504 D00B0000 		.4byte	.LASF83
 9358 0508 07       		.byte	0x7
 9359 0509 3001     		.2byte	0x130
 9360 050b 81000000 		.4byte	0x81
 9361 050f 32       		.byte	0x32
 9362 0510 11       		.uleb128 0x11
 9363 0511 540F0000 		.4byte	.LASF84
 9364 0515 07       		.byte	0x7
 9365 0516 3101     		.2byte	0x131
 9366 0518 81000000 		.4byte	0x81
 9367 051c 33       		.byte	0x33
 9368 051d 11       		.uleb128 0x11
 9369 051e 91000000 		.4byte	.LASF85
 9370 0522 07       		.byte	0x7
 9371 0523 3201     		.2byte	0x132
 9372 0525 BD000000 		.4byte	0xbd
 9373 0529 34       		.byte	0x34
 9374 052a 11       		.uleb128 0x11
 9375 052b DF040000 		.4byte	.LASF86
 9376 052f 07       		.byte	0x7
 9377 0530 3301     		.2byte	0x133
 9378 0532 BD000000 		.4byte	0xbd
 9379 0536 38       		.byte	0x38
 9380 0537 11       		.uleb128 0x11
 9381 0538 37090000 		.4byte	.LASF87
 9382 053c 07       		.byte	0x7
 9383 053d 3401     		.2byte	0x134
 9384 053f BD000000 		.4byte	0xbd
 9385 0543 3C       		.byte	0x3c
 9386 0544 11       		.uleb128 0x11
 9387 0545 51040000 		.4byte	.LASF88
 9388 0549 07       		.byte	0x7
 9389 054a 3501     		.2byte	0x135
 9390 054c BD000000 		.4byte	0xbd
 9391 0550 40       		.byte	0x40
 9392 0551 11       		.uleb128 0x11
 9393 0552 F0000000 		.4byte	.LASF89
 9394 0556 07       		.byte	0x7
 9395 0557 3601     		.2byte	0x136
 9396 0559 BA050000 		.4byte	0x5ba
 9397 055d 44       		.byte	0x44
 9398 055e 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 213


 9399 055f AD0F0000 		.4byte	.LASF90
 9400 0563 07       		.byte	0x7
 9401 0564 3701     		.2byte	0x137
 9402 0566 B1000000 		.4byte	0xb1
 9403 056a 5C       		.byte	0x5c
 9404 056b 11       		.uleb128 0x11
 9405 056c BB070000 		.4byte	.LASF91
 9406 0570 07       		.byte	0x7
 9407 0571 3801     		.2byte	0x138
 9408 0573 81000000 		.4byte	0x81
 9409 0577 5E       		.byte	0x5e
 9410 0578 11       		.uleb128 0x11
 9411 0579 BD090000 		.4byte	.LASF92
 9412 057d 07       		.byte	0x7
 9413 057e 3901     		.2byte	0x139
 9414 0580 81000000 		.4byte	0x81
 9415 0584 5F       		.byte	0x5f
 9416 0585 11       		.uleb128 0x11
 9417 0586 16040000 		.4byte	.LASF93
 9418 058a 07       		.byte	0x7
 9419 058b 3A01     		.2byte	0x13a
 9420 058d 81000000 		.4byte	0x81
 9421 0591 60       		.byte	0x60
 9422 0592 11       		.uleb128 0x11
 9423 0593 86040000 		.4byte	.LASF94
 9424 0597 07       		.byte	0x7
 9425 0598 3B01     		.2byte	0x13b
 9426 059a 81000000 		.4byte	0x81
 9427 059e 61       		.byte	0x61
 9428 059f 11       		.uleb128 0x11
 9429 05a0 BF030000 		.4byte	.LASF95
 9430 05a4 07       		.byte	0x7
 9431 05a5 3C01     		.2byte	0x13c
 9432 05a7 81000000 		.4byte	0x81
 9433 05ab 62       		.byte	0x62
 9434 05ac 11       		.uleb128 0x11
 9435 05ad A3020000 		.4byte	.LASF70
 9436 05b1 07       		.byte	0x7
 9437 05b2 3D01     		.2byte	0x13d
 9438 05b4 CA050000 		.4byte	0x5ca
 9439 05b8 63       		.byte	0x63
 9440 05b9 00       		.byte	0
 9441 05ba 07       		.uleb128 0x7
 9442 05bb D5000000 		.4byte	0xd5
 9443 05bf CA050000 		.4byte	0x5ca
 9444 05c3 08       		.uleb128 0x8
 9445 05c4 0E010000 		.4byte	0x10e
 9446 05c8 05       		.byte	0x5
 9447 05c9 00       		.byte	0
 9448 05ca 07       		.uleb128 0x7
 9449 05cb 81000000 		.4byte	0x81
 9450 05cf DA050000 		.4byte	0x5da
 9451 05d3 08       		.uleb128 0x8
 9452 05d4 0E010000 		.4byte	0x10e
 9453 05d8 0C       		.byte	0xc
 9454 05d9 00       		.byte	0
 9455 05da 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 214


 9456 05db DE0E0000 		.4byte	.LASF96
 9457 05df 30       		.byte	0x30
 9458 05e0 07       		.byte	0x7
 9459 05e1 4401     		.2byte	0x144
 9460 05e3 5D060000 		.4byte	0x65d
 9461 05e7 11       		.uleb128 0x11
 9462 05e8 19090000 		.4byte	.LASF97
 9463 05ec 07       		.byte	0x7
 9464 05ed 4501     		.2byte	0x145
 9465 05ef 5D060000 		.4byte	0x65d
 9466 05f3 00       		.byte	0
 9467 05f4 12       		.uleb128 0x12
 9468 05f5 72657300 		.ascii	"res\000"
 9469 05f9 07       		.byte	0x7
 9470 05fa 4601     		.2byte	0x146
 9471 05fc 30040000 		.4byte	0x430
 9472 0600 05       		.byte	0x5
 9473 0601 11       		.uleb128 0x11
 9474 0602 7B070000 		.4byte	.LASF98
 9475 0606 07       		.byte	0x7
 9476 0607 4701     		.2byte	0x147
 9477 0609 3D020000 		.4byte	0x23d
 9478 060d 08       		.byte	0x8
 9479 060e 11       		.uleb128 0x11
 9480 060f A8040000 		.4byte	.LASF99
 9481 0613 07       		.byte	0x7
 9482 0614 4801     		.2byte	0x148
 9483 0616 6D060000 		.4byte	0x66d
 9484 061a 14       		.byte	0x14
 9485 061b 11       		.uleb128 0x11
 9486 061c EF0A0000 		.4byte	.LASF100
 9487 0620 07       		.byte	0x7
 9488 0621 4901     		.2byte	0x149
 9489 0623 81000000 		.4byte	0x81
 9490 0627 20       		.byte	0x20
 9491 0628 11       		.uleb128 0x11
 9492 0629 AE010000 		.4byte	.LASF101
 9493 062d 07       		.byte	0x7
 9494 062e 4A01     		.2byte	0x14a
 9495 0630 30040000 		.4byte	0x430
 9496 0634 21       		.byte	0x21
 9497 0635 11       		.uleb128 0x11
 9498 0636 A00A0000 		.4byte	.LASF102
 9499 063a 07       		.byte	0x7
 9500 063b 4B01     		.2byte	0x14b
 9501 063d A5000000 		.4byte	0xa5
 9502 0641 24       		.byte	0x24
 9503 0642 11       		.uleb128 0x11
 9504 0643 9E0C0000 		.4byte	.LASF103
 9505 0647 07       		.byte	0x7
 9506 0648 4C01     		.2byte	0x14c
 9507 064a 4D020000 		.4byte	0x24d
 9508 064e 25       		.byte	0x25
 9509 064f 11       		.uleb128 0x11
 9510 0650 A3020000 		.4byte	.LASF70
 9511 0654 07       		.byte	0x7
 9512 0655 4D01     		.2byte	0x14d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 215


 9513 0657 7D060000 		.4byte	0x67d
 9514 065b 28       		.byte	0x28
 9515 065c 00       		.byte	0
 9516 065d 07       		.uleb128 0x7
 9517 065e 81000000 		.4byte	0x81
 9518 0662 6D060000 		.4byte	0x66d
 9519 0666 08       		.uleb128 0x8
 9520 0667 0E010000 		.4byte	0x10e
 9521 066b 04       		.byte	0x4
 9522 066c 00       		.byte	0
 9523 066d 07       		.uleb128 0x7
 9524 066e C9000000 		.4byte	0xc9
 9525 0672 7D060000 		.4byte	0x67d
 9526 0676 08       		.uleb128 0x8
 9527 0677 0E010000 		.4byte	0x10e
 9528 067b 02       		.byte	0x2
 9529 067c 00       		.byte	0
 9530 067d 07       		.uleb128 0x7
 9531 067e 81000000 		.4byte	0x81
 9532 0682 8D060000 		.4byte	0x68d
 9533 0686 08       		.uleb128 0x8
 9534 0687 0E010000 		.4byte	0x10e
 9535 068b 07       		.byte	0x7
 9536 068c 00       		.byte	0
 9537 068d 10       		.uleb128 0x10
 9538 068e 73010000 		.4byte	.LASF104
 9539 0692 10       		.byte	0x10
 9540 0693 07       		.byte	0x7
 9541 0694 5401     		.2byte	0x154
 9542 0696 E9060000 		.4byte	0x6e9
 9543 069a 11       		.uleb128 0x11
 9544 069b 1D0A0000 		.4byte	.LASF105
 9545 069f 07       		.byte	0x7
 9546 06a0 5501     		.2byte	0x155
 9547 06a2 E9060000 		.4byte	0x6e9
 9548 06a6 00       		.byte	0
 9549 06a7 11       		.uleb128 0x11
 9550 06a8 9F0F0000 		.4byte	.LASF106
 9551 06ac 07       		.byte	0x7
 9552 06ad 5601     		.2byte	0x156
 9553 06af 71030000 		.4byte	0x371
 9554 06b3 04       		.byte	0x4
 9555 06b4 11       		.uleb128 0x11
 9556 06b5 F5040000 		.4byte	.LASF107
 9557 06b9 07       		.byte	0x7
 9558 06ba 5701     		.2byte	0x157
 9559 06bc 81000000 		.4byte	0x81
 9560 06c0 0C       		.byte	0xc
 9561 06c1 11       		.uleb128 0x11
 9562 06c2 B80C0000 		.4byte	.LASF108
 9563 06c6 07       		.byte	0x7
 9564 06c7 5801     		.2byte	0x158
 9565 06c9 81000000 		.4byte	0x81
 9566 06cd 0D       		.byte	0xd
 9567 06ce 11       		.uleb128 0x11
 9568 06cf 6E030000 		.4byte	.LASF109
 9569 06d3 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 216


 9570 06d4 5901     		.2byte	0x159
 9571 06d6 81000000 		.4byte	0x81
 9572 06da 0E       		.byte	0xe
 9573 06db 11       		.uleb128 0x11
 9574 06dc A3020000 		.4byte	.LASF70
 9575 06e0 07       		.byte	0x7
 9576 06e1 5A01     		.2byte	0x15a
 9577 06e3 F9060000 		.4byte	0x6f9
 9578 06e7 0F       		.byte	0xf
 9579 06e8 00       		.byte	0
 9580 06e9 07       		.uleb128 0x7
 9581 06ea 8D000000 		.4byte	0x8d
 9582 06ee F9060000 		.4byte	0x6f9
 9583 06f2 08       		.uleb128 0x8
 9584 06f3 0E010000 		.4byte	0x10e
 9585 06f7 01       		.byte	0x1
 9586 06f8 00       		.byte	0
 9587 06f9 07       		.uleb128 0x7
 9588 06fa 81000000 		.4byte	0x81
 9589 06fe 09070000 		.4byte	0x709
 9590 0702 08       		.uleb128 0x8
 9591 0703 0E010000 		.4byte	0x10e
 9592 0707 00       		.byte	0
 9593 0708 00       		.byte	0
 9594 0709 10       		.uleb128 0x10
 9595 070a E7090000 		.4byte	.LASF110
 9596 070e 20       		.byte	0x20
 9597 070f 07       		.byte	0x7
 9598 0710 6101     		.2byte	0x161
 9599 0712 4B070000 		.4byte	0x74b
 9600 0716 11       		.uleb128 0x11
 9601 0717 11020000 		.4byte	.LASF111
 9602 071b 07       		.byte	0x7
 9603 071c 6201     		.2byte	0x162
 9604 071e 81000000 		.4byte	0x81
 9605 0722 00       		.byte	0
 9606 0723 11       		.uleb128 0x11
 9607 0724 BC0E0000 		.4byte	.LASF112
 9608 0728 07       		.byte	0x7
 9609 0729 6301     		.2byte	0x163
 9610 072b 81000000 		.4byte	0x81
 9611 072f 01       		.byte	0x1
 9612 0730 11       		.uleb128 0x11
 9613 0731 6C090000 		.4byte	.LASF113
 9614 0735 07       		.byte	0x7
 9615 0736 6401     		.2byte	0x164
 9616 0738 4B070000 		.4byte	0x74b
 9617 073c 02       		.byte	0x2
 9618 073d 11       		.uleb128 0x11
 9619 073e A3020000 		.4byte	.LASF70
 9620 0742 07       		.byte	0x7
 9621 0743 6501     		.2byte	0x165
 9622 0745 5D060000 		.4byte	0x65d
 9623 0749 1B       		.byte	0x1b
 9624 074a 00       		.byte	0
 9625 074b 07       		.uleb128 0x7
 9626 074c 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 217


 9627 0750 61070000 		.4byte	0x761
 9628 0754 08       		.uleb128 0x8
 9629 0755 0E010000 		.4byte	0x10e
 9630 0759 04       		.byte	0x4
 9631 075a 08       		.uleb128 0x8
 9632 075b 0E010000 		.4byte	0x10e
 9633 075f 04       		.byte	0x4
 9634 0760 00       		.byte	0
 9635 0761 10       		.uleb128 0x10
 9636 0762 AB0C0000 		.4byte	.LASF114
 9637 0766 20       		.byte	0x20
 9638 0767 07       		.byte	0x7
 9639 0768 6C01     		.2byte	0x16c
 9640 076a B0070000 		.4byte	0x7b0
 9641 076e 11       		.uleb128 0x11
 9642 076f E50A0000 		.4byte	.LASF115
 9643 0773 07       		.byte	0x7
 9644 0774 6D01     		.2byte	0x16d
 9645 0776 B0070000 		.4byte	0x7b0
 9646 077a 00       		.byte	0
 9647 077b 11       		.uleb128 0x11
 9648 077c 090E0000 		.4byte	.LASF116
 9649 0780 07       		.byte	0x7
 9650 0781 6E01     		.2byte	0x16e
 9651 0783 81000000 		.4byte	0x81
 9652 0787 06       		.byte	0x6
 9653 0788 11       		.uleb128 0x11
 9654 0789 32000000 		.4byte	.LASF117
 9655 078d 07       		.byte	0x7
 9656 078e 6F01     		.2byte	0x16f
 9657 0790 81000000 		.4byte	0x81
 9658 0794 07       		.byte	0x7
 9659 0795 11       		.uleb128 0x11
 9660 0796 34050000 		.4byte	.LASF118
 9661 079a 07       		.byte	0x7
 9662 079b 7001     		.2byte	0x170
 9663 079d C0070000 		.4byte	0x7c0
 9664 07a1 08       		.byte	0x8
 9665 07a2 11       		.uleb128 0x11
 9666 07a3 A3020000 		.4byte	.LASF70
 9667 07a7 07       		.byte	0x7
 9668 07a8 7101     		.2byte	0x171
 9669 07aa C0070000 		.4byte	0x7c0
 9670 07ae 14       		.byte	0x14
 9671 07af 00       		.byte	0
 9672 07b0 07       		.uleb128 0x7
 9673 07b1 81000000 		.4byte	0x81
 9674 07b5 C0070000 		.4byte	0x7c0
 9675 07b9 08       		.uleb128 0x8
 9676 07ba 0E010000 		.4byte	0x10e
 9677 07be 05       		.byte	0x5
 9678 07bf 00       		.byte	0
 9679 07c0 07       		.uleb128 0x7
 9680 07c1 81000000 		.4byte	0x81
 9681 07c5 D0070000 		.4byte	0x7d0
 9682 07c9 08       		.uleb128 0x8
 9683 07ca 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 218


 9684 07ce 0B       		.byte	0xb
 9685 07cf 00       		.byte	0
 9686 07d0 10       		.uleb128 0x10
 9687 07d1 960C0000 		.4byte	.LASF119
 9688 07d5 20       		.byte	0x20
 9689 07d6 07       		.byte	0x7
 9690 07d7 7801     		.2byte	0x178
 9691 07d9 05080000 		.4byte	0x805
 9692 07dd 11       		.uleb128 0x11
 9693 07de 40030000 		.4byte	.LASF120
 9694 07e2 07       		.byte	0x7
 9695 07e3 7901     		.2byte	0x179
 9696 07e5 15010000 		.4byte	0x115
 9697 07e9 00       		.byte	0
 9698 07ea 11       		.uleb128 0x11
 9699 07eb 7C020000 		.4byte	.LASF121
 9700 07ef 07       		.byte	0x7
 9701 07f0 7A01     		.2byte	0x17a
 9702 07f2 8D060000 		.4byte	0x68d
 9703 07f6 08       		.byte	0x8
 9704 07f7 11       		.uleb128 0x11
 9705 07f8 A3020000 		.4byte	.LASF70
 9706 07fc 07       		.byte	0x7
 9707 07fd 7B01     		.2byte	0x17b
 9708 07ff 7D060000 		.4byte	0x67d
 9709 0803 18       		.byte	0x18
 9710 0804 00       		.byte	0
 9711 0805 10       		.uleb128 0x10
 9712 0806 8A080000 		.4byte	.LASF122
 9713 080a 10       		.byte	0x10
 9714 080b 07       		.byte	0x7
 9715 080c 8201     		.2byte	0x182
 9716 080e 54080000 		.4byte	0x854
 9717 0812 11       		.uleb128 0x11
 9718 0813 A2070000 		.4byte	.LASF123
 9719 0817 07       		.byte	0x7
 9720 0818 8301     		.2byte	0x183
 9721 081a BD000000 		.4byte	0xbd
 9722 081e 00       		.byte	0
 9723 081f 11       		.uleb128 0x11
 9724 0820 E30F0000 		.4byte	.LASF124
 9725 0824 07       		.byte	0x7
 9726 0825 8401     		.2byte	0x184
 9727 0827 BD000000 		.4byte	0xbd
 9728 082b 04       		.byte	0x4
 9729 082c 11       		.uleb128 0x11
 9730 082d FF040000 		.4byte	.LASF125
 9731 0831 07       		.byte	0x7
 9732 0832 8501     		.2byte	0x185
 9733 0834 BD000000 		.4byte	0xbd
 9734 0838 08       		.byte	0x8
 9735 0839 11       		.uleb128 0x11
 9736 083a 60060000 		.4byte	.LASF126
 9737 083e 07       		.byte	0x7
 9738 083f 8601     		.2byte	0x186
 9739 0841 81000000 		.4byte	0x81
 9740 0845 0C       		.byte	0xc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 219


 9741 0846 11       		.uleb128 0x11
 9742 0847 A3020000 		.4byte	.LASF70
 9743 084b 07       		.byte	0x7
 9744 084c 8701     		.2byte	0x187
 9745 084e 30040000 		.4byte	0x430
 9746 0852 0D       		.byte	0xd
 9747 0853 00       		.byte	0
 9748 0854 10       		.uleb128 0x10
 9749 0855 13010000 		.4byte	.LASF127
 9750 0859 10       		.byte	0x10
 9751 085a 07       		.byte	0x7
 9752 085b 8E01     		.2byte	0x18e
 9753 085d 89080000 		.4byte	0x889
 9754 0861 11       		.uleb128 0x11
 9755 0862 410C0000 		.4byte	.LASF128
 9756 0866 07       		.byte	0x7
 9757 0867 8F01     		.2byte	0x18f
 9758 0869 81000000 		.4byte	0x81
 9759 086d 00       		.byte	0
 9760 086e 11       		.uleb128 0x11
 9761 086f 58090000 		.4byte	.LASF129
 9762 0873 07       		.byte	0x7
 9763 0874 9001     		.2byte	0x190
 9764 0876 81000000 		.4byte	0x81
 9765 087a 01       		.byte	0x1
 9766 087b 11       		.uleb128 0x11
 9767 087c A3020000 		.4byte	.LASF70
 9768 0880 07       		.byte	0x7
 9769 0881 9101     		.2byte	0x191
 9770 0883 89080000 		.4byte	0x889
 9771 0887 02       		.byte	0x2
 9772 0888 00       		.byte	0
 9773 0889 07       		.uleb128 0x7
 9774 088a 81000000 		.4byte	0x81
 9775 088e 99080000 		.4byte	0x899
 9776 0892 08       		.uleb128 0x8
 9777 0893 0E010000 		.4byte	0x10e
 9778 0897 0D       		.byte	0xd
 9779 0898 00       		.byte	0
 9780 0899 10       		.uleb128 0x10
 9781 089a A3080000 		.4byte	.LASF130
 9782 089e 10       		.byte	0x10
 9783 089f 07       		.byte	0x7
 9784 08a0 9801     		.2byte	0x198
 9785 08a2 DB080000 		.4byte	0x8db
 9786 08a6 11       		.uleb128 0x11
 9787 08a7 E90E0000 		.4byte	.LASF131
 9788 08ab 07       		.byte	0x7
 9789 08ac 9901     		.2byte	0x199
 9790 08ae BD000000 		.4byte	0xbd
 9791 08b2 00       		.byte	0
 9792 08b3 11       		.uleb128 0x11
 9793 08b4 4B060000 		.4byte	.LASF132
 9794 08b8 07       		.byte	0x7
 9795 08b9 9A01     		.2byte	0x19a
 9796 08bb D5000000 		.4byte	0xd5
 9797 08bf 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 220


 9798 08c0 11       		.uleb128 0x11
 9799 08c1 020C0000 		.4byte	.LASF133
 9800 08c5 07       		.byte	0x7
 9801 08c6 9B01     		.2byte	0x19b
 9802 08c8 D5000000 		.4byte	0xd5
 9803 08cc 08       		.byte	0x8
 9804 08cd 11       		.uleb128 0x11
 9805 08ce A3020000 		.4byte	.LASF70
 9806 08d2 07       		.byte	0x7
 9807 08d3 9C01     		.2byte	0x19c
 9808 08d5 DB080000 		.4byte	0x8db
 9809 08d9 0C       		.byte	0xc
 9810 08da 00       		.byte	0
 9811 08db 07       		.uleb128 0x7
 9812 08dc 81000000 		.4byte	0x81
 9813 08e0 EB080000 		.4byte	0x8eb
 9814 08e4 08       		.uleb128 0x8
 9815 08e5 0E010000 		.4byte	0x10e
 9816 08e9 03       		.byte	0x3
 9817 08ea 00       		.byte	0
 9818 08eb 13       		.uleb128 0x13
 9819 08ec 040F0000 		.4byte	.LASF134
 9820 08f0 D002     		.2byte	0x2d0
 9821 08f2 07       		.byte	0x7
 9822 08f3 A501     		.2byte	0x1a5
 9823 08f5 B5090000 		.4byte	0x9b5
 9824 08f9 11       		.uleb128 0x11
 9825 08fa B8090000 		.4byte	.LASF135
 9826 08fe 07       		.byte	0x7
 9827 08ff A701     		.2byte	0x1a7
 9828 0901 81000000 		.4byte	0x81
 9829 0905 00       		.byte	0
 9830 0906 11       		.uleb128 0x11
 9831 0907 A3020000 		.4byte	.LASF70
 9832 090b 07       		.byte	0x7
 9833 090c A801     		.2byte	0x1a8
 9834 090e B5090000 		.4byte	0x9b5
 9835 0912 01       		.byte	0x1
 9836 0913 12       		.uleb128 0x12
 9837 0914 636E7400 		.ascii	"cnt\000"
 9838 0918 07       		.byte	0x7
 9839 0919 A901     		.2byte	0x1a9
 9840 091b 08030000 		.4byte	0x308
 9841 091f 10       		.byte	0x10
 9842 0920 11       		.uleb128 0x11
 9843 0921 48020000 		.4byte	.LASF136
 9844 0925 07       		.byte	0x7
 9845 0926 AA01     		.2byte	0x1aa
 9846 0928 C5090000 		.4byte	0x9c5
 9847 092c 60       		.byte	0x60
 9848 092d 12       		.uleb128 0x12
 9849 092e 64657600 		.ascii	"dev\000"
 9850 0932 07       		.byte	0x7
 9851 0933 AB01     		.2byte	0x1ab
 9852 0935 A1030000 		.4byte	0x3a1
 9853 0939 A0       		.byte	0xa0
 9854 093a 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 221


 9855 093b 960D0000 		.4byte	.LASF137
 9856 093f 07       		.byte	0x7
 9857 0940 AC01     		.2byte	0x1ac
 9858 0942 D5090000 		.4byte	0x9d5
 9859 0946 B0       		.byte	0xb0
 9860 0947 14       		.uleb128 0x14
 9861 0948 656E6300 		.ascii	"enc\000"
 9862 094c 07       		.byte	0x7
 9863 094d AD01     		.2byte	0x1ad
 9864 094f E5090000 		.4byte	0x9e5
 9865 0953 9001     		.2byte	0x190
 9866 0955 14       		.uleb128 0x14
 9867 0956 656D6700 		.ascii	"emg\000"
 9868 095a 07       		.byte	0x7
 9869 095b AE01     		.2byte	0x1ae
 9870 095d 8D060000 		.4byte	0x68d
 9871 0961 F001     		.2byte	0x1f0
 9872 0963 14       		.uleb128 0x14
 9873 0964 696D7500 		.ascii	"imu\000"
 9874 0968 07       		.byte	0x7
 9875 0969 AF01     		.2byte	0x1af
 9876 096b 09070000 		.4byte	0x709
 9877 096f 0002     		.2byte	0x200
 9878 0971 14       		.uleb128 0x14
 9879 0972 65787000 		.ascii	"exp\000"
 9880 0976 07       		.byte	0x7
 9881 0977 B001     		.2byte	0x1b0
 9882 0979 61070000 		.4byte	0x761
 9883 097d 2002     		.2byte	0x220
 9884 097f 15       		.uleb128 0x15
 9885 0980 4D000000 		.4byte	.LASF138
 9886 0984 07       		.byte	0x7
 9887 0985 B101     		.2byte	0x1b1
 9888 0987 F5090000 		.4byte	0x9f5
 9889 098b 4002     		.2byte	0x240
 9890 098d 14       		.uleb128 0x14
 9891 098e 534800   		.ascii	"SH\000"
 9892 0991 07       		.byte	0x7
 9893 0992 B301     		.2byte	0x1b3
 9894 0994 05080000 		.4byte	0x805
 9895 0998 A002     		.2byte	0x2a0
 9896 099a 14       		.uleb128 0x14
 9897 099b 4D5300   		.ascii	"MS\000"
 9898 099e 07       		.byte	0x7
 9899 099f B401     		.2byte	0x1b4
 9900 09a1 54080000 		.4byte	0x854
 9901 09a5 B002     		.2byte	0x2b0
 9902 09a7 14       		.uleb128 0x14
 9903 09a8 464200   		.ascii	"FB\000"
 9904 09ab 07       		.byte	0x7
 9905 09ac B501     		.2byte	0x1b5
 9906 09ae 99080000 		.4byte	0x899
 9907 09b2 C002     		.2byte	0x2c0
 9908 09b4 00       		.byte	0
 9909 09b5 07       		.uleb128 0x7
 9910 09b6 81000000 		.4byte	0x81
 9911 09ba C5090000 		.4byte	0x9c5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 222


 9912 09be 08       		.uleb128 0x8
 9913 09bf 0E010000 		.4byte	0x10e
 9914 09c3 0E       		.byte	0xe
 9915 09c4 00       		.byte	0
 9916 09c5 07       		.uleb128 0x7
 9917 09c6 81000000 		.4byte	0x81
 9918 09ca D5090000 		.4byte	0x9d5
 9919 09ce 08       		.uleb128 0x8
 9920 09cf 0E010000 		.4byte	0x10e
 9921 09d3 3F       		.byte	0x3f
 9922 09d4 00       		.byte	0
 9923 09d5 07       		.uleb128 0x7
 9924 09d6 40040000 		.4byte	0x440
 9925 09da E5090000 		.4byte	0x9e5
 9926 09de 08       		.uleb128 0x8
 9927 09df 0E010000 		.4byte	0x10e
 9928 09e3 01       		.byte	0x1
 9929 09e4 00       		.byte	0
 9930 09e5 07       		.uleb128 0x7
 9931 09e6 DA050000 		.4byte	0x5da
 9932 09ea F5090000 		.4byte	0x9f5
 9933 09ee 08       		.uleb128 0x8
 9934 09ef 0E010000 		.4byte	0x10e
 9935 09f3 01       		.byte	0x1
 9936 09f4 00       		.byte	0
 9937 09f5 07       		.uleb128 0x7
 9938 09f6 D0070000 		.4byte	0x7d0
 9939 09fa 050A0000 		.4byte	0xa05
 9940 09fe 08       		.uleb128 0x8
 9941 09ff 0E010000 		.4byte	0x10e
 9942 0a03 02       		.byte	0x2
 9943 0a04 00       		.byte	0
 9944 0a05 10       		.uleb128 0x10
 9945 0a06 6C0B0000 		.4byte	.LASF139
 9946 0a0a 28       		.byte	0x28
 9947 0a0b 07       		.byte	0x7
 9948 0a0c C101     		.2byte	0x1c1
 9949 0a0e 610A0000 		.4byte	0xa61
 9950 0a12 11       		.uleb128 0x11
 9951 0a13 30040000 		.4byte	.LASF140
 9952 0a17 07       		.byte	0x7
 9953 0a18 C201     		.2byte	0x1c2
 9954 0a1a 81000000 		.4byte	0x81
 9955 0a1e 00       		.byte	0
 9956 0a1f 11       		.uleb128 0x11
 9957 0a20 B0020000 		.4byte	.LASF141
 9958 0a24 07       		.byte	0x7
 9959 0a25 C301     		.2byte	0x1c3
 9960 0a27 610A0000 		.4byte	0xa61
 9961 0a2b 02       		.byte	0x2
 9962 0a2c 11       		.uleb128 0x11
 9963 0a2d DA0A0000 		.4byte	.LASF142
 9964 0a31 07       		.byte	0x7
 9965 0a32 C401     		.2byte	0x1c4
 9966 0a34 610A0000 		.4byte	0xa61
 9967 0a38 08       		.byte	0x8
 9968 0a39 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 223


 9969 0a3a 780B0000 		.4byte	.LASF143
 9970 0a3e 07       		.byte	0x7
 9971 0a3f C501     		.2byte	0x1c5
 9972 0a41 610A0000 		.4byte	0xa61
 9973 0a45 0E       		.byte	0xe
 9974 0a46 11       		.uleb128 0x11
 9975 0a47 97070000 		.4byte	.LASF144
 9976 0a4b 07       		.byte	0x7
 9977 0a4c C601     		.2byte	0x1c6
 9978 0a4e 710A0000 		.4byte	0xa71
 9979 0a52 14       		.byte	0x14
 9980 0a53 11       		.uleb128 0x11
 9981 0a54 95010000 		.4byte	.LASF145
 9982 0a58 07       		.byte	0x7
 9983 0a59 C701     		.2byte	0x1c7
 9984 0a5b B1000000 		.4byte	0xb1
 9985 0a5f 24       		.byte	0x24
 9986 0a60 00       		.byte	0
 9987 0a61 07       		.uleb128 0x7
 9988 0a62 B1000000 		.4byte	0xb1
 9989 0a66 710A0000 		.4byte	0xa71
 9990 0a6a 08       		.uleb128 0x8
 9991 0a6b 0E010000 		.4byte	0x10e
 9992 0a6f 02       		.byte	0x2
 9993 0a70 00       		.byte	0
 9994 0a71 07       		.uleb128 0x7
 9995 0a72 D5000000 		.4byte	0xd5
 9996 0a76 810A0000 		.4byte	0xa81
 9997 0a7a 08       		.uleb128 0x8
 9998 0a7b 0E010000 		.4byte	0x10e
 9999 0a7f 03       		.byte	0x3
 10000 0a80 00       		.byte	0
 10001 0a81 10       		.uleb128 0x10
 10002 0a82 EE0F0000 		.4byte	.LASF146
 10003 0a86 08       		.byte	0x8
 10004 0a87 07       		.byte	0x7
 10005 0a88 CE01     		.2byte	0x1ce
 10006 0a8a A90A0000 		.4byte	0xaa9
 10007 0a8e 11       		.uleb128 0x11
 10008 0a8f EB040000 		.4byte	.LASF147
 10009 0a93 07       		.byte	0x7
 10010 0a94 CF01     		.2byte	0x1cf
 10011 0a96 BD000000 		.4byte	0xbd
 10012 0a9a 00       		.byte	0
 10013 0a9b 11       		.uleb128 0x11
 10014 0a9c C6010000 		.4byte	.LASF148
 10015 0aa0 07       		.byte	0x7
 10016 0aa1 D001     		.2byte	0x1d0
 10017 0aa3 BD000000 		.4byte	0xbd
 10018 0aa7 04       		.byte	0x4
 10019 0aa8 00       		.byte	0
 10020 0aa9 10       		.uleb128 0x10
 10021 0aaa 51030000 		.4byte	.LASF149
 10022 0aae 06       		.byte	0x6
 10023 0aaf 07       		.byte	0x7
 10024 0ab0 D701     		.2byte	0x1d7
 10025 0ab2 EB0A0000 		.4byte	0xaeb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 224


 10026 0ab6 11       		.uleb128 0x11
 10027 0ab7 0A070000 		.4byte	.LASF150
 10028 0abb 07       		.byte	0x7
 10029 0abc D801     		.2byte	0x1d8
 10030 0abe 81000000 		.4byte	0x81
 10031 0ac2 00       		.byte	0
 10032 0ac3 11       		.uleb128 0x11
 10033 0ac4 0A100000 		.4byte	.LASF151
 10034 0ac8 07       		.byte	0x7
 10035 0ac9 D901     		.2byte	0x1d9
 10036 0acb 81000000 		.4byte	0x81
 10037 0acf 01       		.byte	0x1
 10038 0ad0 11       		.uleb128 0x11
 10039 0ad1 78050000 		.4byte	.LASF152
 10040 0ad5 07       		.byte	0x7
 10041 0ad6 DA01     		.2byte	0x1da
 10042 0ad8 B1000000 		.4byte	0xb1
 10043 0adc 02       		.byte	0x2
 10044 0add 11       		.uleb128 0x11
 10045 0ade 2B090000 		.4byte	.LASF153
 10046 0ae2 07       		.byte	0x7
 10047 0ae3 DB01     		.2byte	0x1db
 10048 0ae5 B1000000 		.4byte	0xb1
 10049 0ae9 04       		.byte	0x4
 10050 0aea 00       		.byte	0
 10051 0aeb 16       		.uleb128 0x16
 10052 0aec 01       		.byte	0x1
 10053 0aed 2C000000 		.4byte	0x2c
 10054 0af1 07       		.byte	0x7
 10055 0af2 DF01     		.2byte	0x1df
 10056 0af4 1D0B0000 		.4byte	0xb1d
 10057 0af8 0A       		.uleb128 0xa
 10058 0af9 08050000 		.4byte	.LASF154
 10059 0afd 00       		.byte	0
 10060 0afe 0A       		.uleb128 0xa
 10061 0aff 3B0C0000 		.4byte	.LASF155
 10062 0b03 01       		.byte	0x1
 10063 0b04 0A       		.uleb128 0xa
 10064 0b05 670A0000 		.4byte	.LASF156
 10065 0b09 02       		.byte	0x2
 10066 0b0a 0A       		.uleb128 0xa
 10067 0b0b 04020000 		.4byte	.LASF157
 10068 0b0f 03       		.byte	0x3
 10069 0b10 0A       		.uleb128 0xa
 10070 0b11 61090000 		.4byte	.LASF158
 10071 0b15 04       		.byte	0x4
 10072 0b16 0A       		.uleb128 0xa
 10073 0b17 E20B0000 		.4byte	.LASF159
 10074 0b1b 05       		.byte	0x5
 10075 0b1c 00       		.byte	0
 10076 0b1d 05       		.uleb128 0x5
 10077 0b1e 5F010000 		.4byte	.LASF160
 10078 0b22 07       		.byte	0x7
 10079 0b23 E701     		.2byte	0x1e7
 10080 0b25 EB0A0000 		.4byte	0xaeb
 10081 0b29 16       		.uleb128 0x16
 10082 0b2a 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 225


 10083 0b2b 2C000000 		.4byte	0x2c
 10084 0b2f 07       		.byte	0x7
 10085 0b30 E901     		.2byte	0x1e9
 10086 0b32 550B0000 		.4byte	0xb55
 10087 0b36 0A       		.uleb128 0xa
 10088 0b37 88010000 		.4byte	.LASF161
 10089 0b3b 00       		.byte	0
 10090 0b3c 0A       		.uleb128 0xa
 10091 0b3d 32070000 		.4byte	.LASF162
 10092 0b41 01       		.byte	0x1
 10093 0b42 0A       		.uleb128 0xa
 10094 0b43 B0070000 		.4byte	.LASF163
 10095 0b47 02       		.byte	0x2
 10096 0b48 0A       		.uleb128 0xa
 10097 0b49 09030000 		.4byte	.LASF164
 10098 0b4d 03       		.byte	0x3
 10099 0b4e 0A       		.uleb128 0xa
 10100 0b4f C90F0000 		.4byte	.LASF165
 10101 0b53 04       		.byte	0x4
 10102 0b54 00       		.byte	0
 10103 0b55 05       		.uleb128 0x5
 10104 0b56 1C0D0000 		.4byte	.LASF166
 10105 0b5a 07       		.byte	0x7
 10106 0b5b F001     		.2byte	0x1f0
 10107 0b5d 290B0000 		.4byte	0xb29
 10108 0b61 17       		.uleb128 0x17
 10109 0b62 C6040000 		.4byte	.LASF167
 10110 0b66 01       		.byte	0x1
 10111 0b67 62       		.byte	0x62
 10112 0b68 00000000 		.4byte	.LFB64
 10113 0b6c 18000000 		.4byte	.LFE64-.LFB64
 10114 0b70 01       		.uleb128 0x1
 10115 0b71 9C       		.byte	0x9c
 10116 0b72 17       		.uleb128 0x17
 10117 0b73 9F0E0000 		.4byte	.LASF168
 10118 0b77 01       		.byte	0x1
 10119 0b78 6D       		.byte	0x6d
 10120 0b79 00000000 		.4byte	.LFB65
 10121 0b7d 20000000 		.4byte	.LFE65-.LFB65
 10122 0b81 01       		.uleb128 0x1
 10123 0b82 9C       		.byte	0x9c
 10124 0b83 18       		.uleb128 0x18
 10125 0b84 07090000 		.4byte	.LASF182
 10126 0b88 01       		.byte	0x1
 10127 0b89 86       		.byte	0x86
 10128 0b8a 00000000 		.4byte	.LFB66
 10129 0b8e 0C020000 		.4byte	.LFE66-.LFB66
 10130 0b92 01       		.uleb128 0x1
 10131 0b93 9C       		.byte	0x9c
 10132 0b94 180C0000 		.4byte	0xc18
 10133 0b98 19       		.uleb128 0x19
 10134 0b99 AB000000 		.4byte	.LASF169
 10135 0b9d 01       		.byte	0x1
 10136 0b9e 8B       		.byte	0x8b
 10137 0b9f 81000000 		.4byte	0x81
 10138 0ba3 05       		.uleb128 0x5
 10139 0ba4 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 226


 10140 0ba5 00000000 		.4byte	state.10381
 10141 0ba9 19       		.uleb128 0x19
 10142 0baa 9D050000 		.4byte	.LASF170
 10143 0bae 01       		.byte	0x1
 10144 0baf 8E       		.byte	0x8e
 10145 0bb0 81000000 		.4byte	0x81
 10146 0bb4 05       		.uleb128 0x5
 10147 0bb5 03       		.byte	0x3
 10148 0bb6 08000000 		.4byte	data_packet_index.10382
 10149 0bba 19       		.uleb128 0x19
 10150 0bbb AB0B0000 		.4byte	.LASF171
 10151 0bbf 01       		.byte	0x1
 10152 0bc0 8F       		.byte	0x8f
 10153 0bc1 81000000 		.4byte	0x81
 10154 0bc5 05       		.uleb128 0x5
 10155 0bc6 03       		.byte	0x3
 10156 0bc7 07000000 		.4byte	data_packet_length.10383
 10157 0bcb 19       		.uleb128 0x19
 10158 0bcc AF050000 		.4byte	.LASF172
 10159 0bd0 01       		.byte	0x1
 10160 0bd1 90       		.byte	0x90
 10161 0bd2 F8020000 		.4byte	0x2f8
 10162 0bd6 05       		.uleb128 0x5
 10163 0bd7 03       		.byte	0x3
 10164 0bd8 0C000000 		.4byte	data_packet_buffer.10384
 10165 0bdc 19       		.uleb128 0x19
 10166 0bdd FA090000 		.4byte	.LASF173
 10167 0be1 01       		.byte	0x1
 10168 0be2 91       		.byte	0x91
 10169 0be3 30040000 		.4byte	0x430
 10170 0be7 05       		.uleb128 0x5
 10171 0be8 03       		.byte	0x3
 10172 0be9 04000000 		.4byte	rx_queue.10385
 10173 0bed 19       		.uleb128 0x19
 10174 0bee 42010000 		.4byte	.LASF174
 10175 0bf2 01       		.byte	0x1
 10176 0bf3 94       		.byte	0x94
 10177 0bf4 81000000 		.4byte	0x81
 10178 0bf8 02       		.uleb128 0x2
 10179 0bf9 91       		.byte	0x91
 10180 0bfa 75       		.sleb128 -11
 10181 0bfb 19       		.uleb128 0x19
 10182 0bfc 62050000 		.4byte	.LASF175
 10183 0c00 01       		.byte	0x1
 10184 0c01 95       		.byte	0x95
 10185 0c02 81000000 		.4byte	0x81
 10186 0c06 02       		.uleb128 0x2
 10187 0c07 91       		.byte	0x91
 10188 0c08 77       		.sleb128 -9
 10189 0c09 19       		.uleb128 0x19
 10190 0c0a E7060000 		.4byte	.LASF176
 10191 0c0e 01       		.byte	0x1
 10192 0c0f 96       		.byte	0x96
 10193 0c10 81000000 		.4byte	0x81
 10194 0c14 02       		.uleb128 0x2
 10195 0c15 91       		.byte	0x91
 10196 0c16 76       		.sleb128 -10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 227


 10197 0c17 00       		.byte	0
 10198 0c18 1A       		.uleb128 0x1a
 10199 0c19 B60D0000 		.4byte	.LASF201
 10200 0c1d 01       		.byte	0x1
 10201 0c1e 0C01     		.2byte	0x10c
 10202 0c20 00000000 		.4byte	.LFB67
 10203 0c24 DC050000 		.4byte	.LFE67-.LFB67
 10204 0c28 01       		.uleb128 0x1
 10205 0c29 9C       		.byte	0x9c
 10206 0c2a 980C0000 		.4byte	0xc98
 10207 0c2e 1B       		.uleb128 0x1b
 10208 0c2f D0050000 		.4byte	.LASF177
 10209 0c33 01       		.byte	0x1
 10210 0c34 0E01     		.2byte	0x10e
 10211 0c36 8D000000 		.4byte	0x8d
 10212 0c3a 05       		.uleb128 0x5
 10213 0c3b 03       		.byte	0x3
 10214 0c3c 00000000 		.4byte	counter_calibration.10401
 10215 0c40 1B       		.uleb128 0x1b
 10216 0c41 2E0B0000 		.4byte	.LASF178
 10217 0c45 01       		.byte	0x1
 10218 0c46 0F01     		.2byte	0x10f
 10219 0c48 8D000000 		.4byte	0x8d
 10220 0c4c 05       		.uleb128 0x5
 10221 0c4d 03       		.byte	0x3
 10222 0c4e 02000000 		.4byte	counter_tension_func.10402
 10223 0c52 1B       		.uleb128 0x1b
 10224 0c53 59010000 		.4byte	.LASF179
 10225 0c57 01       		.byte	0x1
 10226 0c58 1001     		.2byte	0x110
 10227 0c5a 980C0000 		.4byte	0xc98
 10228 0c5e 03       		.uleb128 0x3
 10229 0c5f 91       		.byte	0x91
 10230 0c60 A86C     		.sleb128 -2520
 10231 0c62 1B       		.uleb128 0x1b
 10232 0c63 110B0000 		.4byte	.LASF180
 10233 0c67 01       		.byte	0x1
 10234 0c68 1201     		.2byte	0x112
 10235 0c6a 81000000 		.4byte	0x81
 10236 0c6e 02       		.uleb128 0x2
 10237 0c6f 91       		.byte	0x91
 10238 0c70 6E       		.sleb128 -18
 10239 0c71 1B       		.uleb128 0x1b
 10240 0c72 CC080000 		.4byte	.LASF181
 10241 0c76 01       		.byte	0x1
 10242 0c77 1301     		.2byte	0x113
 10243 0c79 81000000 		.4byte	0x81
 10244 0c7d 02       		.uleb128 0x2
 10245 0c7e 91       		.byte	0x91
 10246 0c7f 6D       		.sleb128 -19
 10247 0c80 1C       		.uleb128 0x1c
 10248 0c81 28010000 		.4byte	.LBB2
 10249 0c85 B8000000 		.4byte	.LBE2-.LBB2
 10250 0c89 1D       		.uleb128 0x1d
 10251 0c8a 6900     		.ascii	"i\000"
 10252 0c8c 01       		.byte	0x1
 10253 0c8d 4D01     		.2byte	0x14d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 228


 10254 0c8f 81000000 		.4byte	0x81
 10255 0c93 02       		.uleb128 0x2
 10256 0c94 91       		.byte	0x91
 10257 0c95 6F       		.sleb128 -17
 10258 0c96 00       		.byte	0
 10259 0c97 00       		.byte	0
 10260 0c98 07       		.uleb128 0x7
 10261 0c99 E3000000 		.4byte	0xe3
 10262 0c9d A90C0000 		.4byte	0xca9
 10263 0ca1 1E       		.uleb128 0x1e
 10264 0ca2 0E010000 		.4byte	0x10e
 10265 0ca6 C309     		.2byte	0x9c3
 10266 0ca8 00       		.byte	0
 10267 0ca9 1F       		.uleb128 0x1f
 10268 0caa 0F050000 		.4byte	.LASF183
 10269 0cae 01       		.byte	0x1
 10270 0caf 6302     		.2byte	0x263
 10271 0cb1 00000000 		.4byte	.LFB68
 10272 0cb5 000B0000 		.4byte	.LFE68-.LFB68
 10273 0cb9 01       		.uleb128 0x1
 10274 0cba 9C       		.byte	0x9c
 10275 0cbb A20E0000 		.4byte	0xea2
 10276 0cbf 1B       		.uleb128 0x1b
 10277 0cc0 FC000000 		.4byte	.LASF184
 10278 0cc4 01       		.byte	0x1
 10279 0cc5 6502     		.2byte	0x265
 10280 0cc7 BD000000 		.4byte	0xbd
 10281 0ccb 02       		.uleb128 0x2
 10282 0ccc 91       		.byte	0x91
 10283 0ccd 74       		.sleb128 -12
 10284 0cce 1B       		.uleb128 0x1b
 10285 0ccf D00A0000 		.4byte	.LASF185
 10286 0cd3 01       		.byte	0x1
 10287 0cd4 6602     		.2byte	0x266
 10288 0cd6 BD000000 		.4byte	0xbd
 10289 0cda 03       		.uleb128 0x3
 10290 0cdb 91       		.byte	0x91
 10291 0cdc A47F     		.sleb128 -92
 10292 0cde 1B       		.uleb128 0x1b
 10293 0cdf 5A0E0000 		.4byte	.LASF186
 10294 0ce3 01       		.byte	0x1
 10295 0ce4 6702     		.2byte	0x267
 10296 0ce6 BD000000 		.4byte	0xbd
 10297 0cea 03       		.uleb128 0x3
 10298 0ceb 91       		.byte	0x91
 10299 0cec A07F     		.sleb128 -96
 10300 0cee 1B       		.uleb128 0x1b
 10301 0cef 170A0000 		.4byte	.LASF187
 10302 0cf3 01       		.byte	0x1
 10303 0cf4 6802     		.2byte	0x268
 10304 0cf6 BD000000 		.4byte	0xbd
 10305 0cfa 02       		.uleb128 0x2
 10306 0cfb 91       		.byte	0x91
 10307 0cfc 70       		.sleb128 -16
 10308 0cfd 1B       		.uleb128 0x1b
 10309 0cfe 36040000 		.4byte	.LASF188
 10310 0d02 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 229


 10311 0d03 6902     		.2byte	0x269
 10312 0d05 BD000000 		.4byte	0xbd
 10313 0d09 02       		.uleb128 0x2
 10314 0d0a 91       		.byte	0x91
 10315 0d0b 6C       		.sleb128 -20
 10316 0d0c 1B       		.uleb128 0x1b
 10317 0d0d 5A030000 		.4byte	.LASF189
 10318 0d11 01       		.byte	0x1
 10319 0d12 6A02     		.2byte	0x26a
 10320 0d14 BD000000 		.4byte	0xbd
 10321 0d18 03       		.uleb128 0x3
 10322 0d19 91       		.byte	0x91
 10323 0d1a AC7F     		.sleb128 -84
 10324 0d1c 1B       		.uleb128 0x1b
 10325 0d1d 64030000 		.4byte	.LASF190
 10326 0d21 01       		.byte	0x1
 10327 0d22 6A02     		.2byte	0x26a
 10328 0d24 BD000000 		.4byte	0xbd
 10329 0d28 03       		.uleb128 0x3
 10330 0d29 91       		.byte	0x91
 10331 0d2a A87F     		.sleb128 -88
 10332 0d2c 1B       		.uleb128 0x1b
 10333 0d2d 110B0000 		.4byte	.LASF180
 10334 0d31 01       		.byte	0x1
 10335 0d32 6C02     		.2byte	0x26c
 10336 0d34 81000000 		.4byte	0x81
 10337 0d38 02       		.uleb128 0x2
 10338 0d39 91       		.byte	0x91
 10339 0d3a 6B       		.sleb128 -21
 10340 0d3b 1B       		.uleb128 0x1b
 10341 0d3c D4020000 		.4byte	.LASF191
 10342 0d40 01       		.byte	0x1
 10343 0d41 6E02     		.2byte	0x26e
 10344 0d43 A20E0000 		.4byte	0xea2
 10345 0d47 02       		.uleb128 0x2
 10346 0d48 91       		.byte	0x91
 10347 0d49 64       		.sleb128 -28
 10348 0d4a 1B       		.uleb128 0x1b
 10349 0d4b 56020000 		.4byte	.LASF192
 10350 0d4f 01       		.byte	0x1
 10351 0d50 6F02     		.2byte	0x26f
 10352 0d52 81000000 		.4byte	0x81
 10353 0d56 02       		.uleb128 0x2
 10354 0d57 91       		.byte	0x91
 10355 0d58 63       		.sleb128 -29
 10356 0d59 1D       		.uleb128 0x1d
 10357 0d5a 6B5F7000 		.ascii	"k_p\000"
 10358 0d5e 01       		.byte	0x1
 10359 0d5f 7102     		.2byte	0x271
 10360 0d61 BD000000 		.4byte	0xbd
 10361 0d65 02       		.uleb128 0x2
 10362 0d66 91       		.byte	0x91
 10363 0d67 5C       		.sleb128 -36
 10364 0d68 1D       		.uleb128 0x1d
 10365 0d69 6B5F6900 		.ascii	"k_i\000"
 10366 0d6d 01       		.byte	0x1
 10367 0d6e 7202     		.2byte	0x272
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 230


 10368 0d70 BD000000 		.4byte	0xbd
 10369 0d74 02       		.uleb128 0x2
 10370 0d75 91       		.byte	0x91
 10371 0d76 58       		.sleb128 -40
 10372 0d77 1D       		.uleb128 0x1d
 10373 0d78 6B5F6400 		.ascii	"k_d\000"
 10374 0d7c 01       		.byte	0x1
 10375 0d7d 7302     		.2byte	0x273
 10376 0d7f BD000000 		.4byte	0xbd
 10377 0d83 02       		.uleb128 0x2
 10378 0d84 91       		.byte	0x91
 10379 0d85 54       		.sleb128 -44
 10380 0d86 1B       		.uleb128 0x1b
 10381 0d87 BE0B0000 		.4byte	.LASF72
 10382 0d8b 01       		.byte	0x1
 10383 0d8c 7502     		.2byte	0x275
 10384 0d8e BD000000 		.4byte	0xbd
 10385 0d92 02       		.uleb128 0x2
 10386 0d93 91       		.byte	0x91
 10387 0d94 50       		.sleb128 -48
 10388 0d95 1B       		.uleb128 0x1b
 10389 0d96 AF040000 		.4byte	.LASF73
 10390 0d9a 01       		.byte	0x1
 10391 0d9b 7602     		.2byte	0x276
 10392 0d9d BD000000 		.4byte	0xbd
 10393 0da1 02       		.uleb128 0x2
 10394 0da2 91       		.byte	0x91
 10395 0da3 4C       		.sleb128 -52
 10396 0da4 1B       		.uleb128 0x1b
 10397 0da5 97040000 		.4byte	.LASF74
 10398 0da9 01       		.byte	0x1
 10399 0daa 7702     		.2byte	0x277
 10400 0dac BD000000 		.4byte	0xbd
 10401 0db0 02       		.uleb128 0x2
 10402 0db1 91       		.byte	0x91
 10403 0db2 48       		.sleb128 -56
 10404 0db3 1B       		.uleb128 0x1b
 10405 0db4 330E0000 		.4byte	.LASF75
 10406 0db8 01       		.byte	0x1
 10407 0db9 7902     		.2byte	0x279
 10408 0dbb BD000000 		.4byte	0xbd
 10409 0dbf 02       		.uleb128 0x2
 10410 0dc0 91       		.byte	0x91
 10411 0dc1 44       		.sleb128 -60
 10412 0dc2 1B       		.uleb128 0x1b
 10413 0dc3 4B050000 		.4byte	.LASF76
 10414 0dc7 01       		.byte	0x1
 10415 0dc8 7A02     		.2byte	0x27a
 10416 0dca BD000000 		.4byte	0xbd
 10417 0dce 02       		.uleb128 0x2
 10418 0dcf 91       		.byte	0x91
 10419 0dd0 40       		.sleb128 -64
 10420 0dd1 1B       		.uleb128 0x1b
 10421 0dd2 810D0000 		.4byte	.LASF77
 10422 0dd6 01       		.byte	0x1
 10423 0dd7 7B02     		.2byte	0x27b
 10424 0dd9 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 231


 10425 0ddd 03       		.uleb128 0x3
 10426 0dde 91       		.byte	0x91
 10427 0ddf BC7F     		.sleb128 -68
 10428 0de1 1B       		.uleb128 0x1b
 10429 0de2 59050000 		.4byte	.LASF78
 10430 0de6 01       		.byte	0x1
 10431 0de7 7D02     		.2byte	0x27d
 10432 0de9 BD000000 		.4byte	0xbd
 10433 0ded 03       		.uleb128 0x3
 10434 0dee 91       		.byte	0x91
 10435 0def B87F     		.sleb128 -72
 10436 0df1 1B       		.uleb128 0x1b
 10437 0df2 79060000 		.4byte	.LASF79
 10438 0df6 01       		.byte	0x1
 10439 0df7 7E02     		.2byte	0x27e
 10440 0df9 BD000000 		.4byte	0xbd
 10441 0dfd 03       		.uleb128 0x3
 10442 0dfe 91       		.byte	0x91
 10443 0dff B47F     		.sleb128 -76
 10444 0e01 1B       		.uleb128 0x1b
 10445 0e02 01100000 		.4byte	.LASF80
 10446 0e06 01       		.byte	0x1
 10447 0e07 7F02     		.2byte	0x27f
 10448 0e09 BD000000 		.4byte	0xbd
 10449 0e0d 03       		.uleb128 0x3
 10450 0e0e 91       		.byte	0x91
 10451 0e0f B07F     		.sleb128 -80
 10452 0e11 1B       		.uleb128 0x1b
 10453 0e12 26050000 		.4byte	.LASF193
 10454 0e16 01       		.byte	0x1
 10455 0e17 8302     		.2byte	0x283
 10456 0e19 BD000000 		.4byte	0xbd
 10457 0e1d 05       		.uleb128 0x5
 10458 0e1e 03       		.byte	0x3
 10459 0e1f 90000000 		.4byte	pos_error_sum.10438
 10460 0e23 1B       		.uleb128 0x1b
 10461 0e24 A2030000 		.4byte	.LASF194
 10462 0e28 01       		.byte	0x1
 10463 0e29 8402     		.2byte	0x284
 10464 0e2b BD000000 		.4byte	0xbd
 10465 0e2f 05       		.uleb128 0x5
 10466 0e30 03       		.byte	0x3
 10467 0e31 9C000000 		.4byte	curr_error_sum.10439
 10468 0e35 1B       		.uleb128 0x1b
 10469 0e36 6F0A0000 		.4byte	.LASF195
 10470 0e3a 01       		.byte	0x1
 10471 0e3b 8602     		.2byte	0x286
 10472 0e3d BD000000 		.4byte	0xbd
 10473 0e41 05       		.uleb128 0x5
 10474 0e42 03       		.byte	0x3
 10475 0e43 94000000 		.4byte	prev_pos_err.10440
 10476 0e47 1B       		.uleb128 0x1b
 10477 0e48 9D0B0000 		.4byte	.LASF196
 10478 0e4c 01       		.byte	0x1
 10479 0e4d 8702     		.2byte	0x287
 10480 0e4f BD000000 		.4byte	0xbd
 10481 0e53 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 232


 10482 0e54 03       		.byte	0x3
 10483 0e55 A0000000 		.4byte	prev_curr_err.10441
 10484 0e59 1B       		.uleb128 0x1b
 10485 0e5a C90D0000 		.4byte	.LASF197
 10486 0e5e 01       		.byte	0x1
 10487 0e5f 8802     		.2byte	0x288
 10488 0e61 BD000000 		.4byte	0xbd
 10489 0e65 05       		.uleb128 0x5
 10490 0e66 03       		.byte	0x3
 10491 0e67 A4000000 		.4byte	prev_pwm.10442
 10492 0e6b 1B       		.uleb128 0x1b
 10493 0e6c B5040000 		.4byte	.LASF198
 10494 0e70 01       		.byte	0x1
 10495 0e71 8A02     		.2byte	0x28a
 10496 0e73 81000000 		.4byte	0x81
 10497 0e77 05       		.uleb128 0x5
 10498 0e78 03       		.byte	0x3
 10499 0e79 98000000 		.4byte	motor_dir.10443
 10500 0e7d 1B       		.uleb128 0x1b
 10501 0e7e 7E050000 		.4byte	.LASF199
 10502 0e82 01       		.byte	0x1
 10503 0e83 8B02     		.2byte	0x28b
 10504 0e85 99000000 		.4byte	0x99
 10505 0e89 05       		.uleb128 0x5
 10506 0e8a 03       		.byte	0x3
 10507 0e8b A8000000 		.4byte	position_counter.10444
 10508 0e8f 1B       		.uleb128 0x1b
 10509 0e90 EE090000 		.4byte	.LASF200
 10510 0e94 01       		.byte	0x1
 10511 0e95 8C02     		.2byte	0x28c
 10512 0e97 81000000 		.4byte	0x81
 10513 0e9b 05       		.uleb128 0x5
 10514 0e9c 03       		.byte	0x3
 10515 0e9d 8C000000 		.4byte	current_emg.10445
 10516 0ea1 00       		.byte	0
 10517 0ea2 0C       		.uleb128 0xc
 10518 0ea3 04       		.byte	0x4
 10519 0ea4 40040000 		.4byte	0x440
 10520 0ea8 1A       		.uleb128 0x1a
 10521 0ea9 67040000 		.4byte	.LASF202
 10522 0ead 01       		.byte	0x1
 10523 0eae 4004     		.2byte	0x440
 10524 0eb0 00000000 		.4byte	.LFB69
 10525 0eb4 D40C0000 		.4byte	.LFE69-.LFB69
 10526 0eb8 01       		.uleb128 0x1
 10527 0eb9 9C       		.byte	0x9c
 10528 0eba A3100000 		.4byte	0x10a3
 10529 0ebe 20       		.uleb128 0x20
 10530 0ebf 69647800 		.ascii	"idx\000"
 10531 0ec3 01       		.byte	0x1
 10532 0ec4 4004     		.2byte	0x440
 10533 0ec6 81000000 		.4byte	0x81
 10534 0eca 03       		.uleb128 0x3
 10535 0ecb 91       		.byte	0x91
 10536 0ecc 977F     		.sleb128 -105
 10537 0ece 1B       		.uleb128 0x1b
 10538 0ecf FC000000 		.4byte	.LASF184
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 233


 10539 0ed3 01       		.byte	0x1
 10540 0ed4 4204     		.2byte	0x442
 10541 0ed6 BD000000 		.4byte	0xbd
 10542 0eda 02       		.uleb128 0x2
 10543 0edb 91       		.byte	0x91
 10544 0edc 6C       		.sleb128 -20
 10545 0edd 1B       		.uleb128 0x1b
 10546 0ede D00A0000 		.4byte	.LASF185
 10547 0ee2 01       		.byte	0x1
 10548 0ee3 4304     		.2byte	0x443
 10549 0ee5 BD000000 		.4byte	0xbd
 10550 0ee9 03       		.uleb128 0x3
 10551 0eea 91       		.byte	0x91
 10552 0eeb A07F     		.sleb128 -96
 10553 0eed 1B       		.uleb128 0x1b
 10554 0eee 5A0E0000 		.4byte	.LASF186
 10555 0ef2 01       		.byte	0x1
 10556 0ef3 4404     		.2byte	0x444
 10557 0ef5 BD000000 		.4byte	0xbd
 10558 0ef9 03       		.uleb128 0x3
 10559 0efa 91       		.byte	0x91
 10560 0efb 9C7F     		.sleb128 -100
 10561 0efd 1B       		.uleb128 0x1b
 10562 0efe 170A0000 		.4byte	.LASF187
 10563 0f02 01       		.byte	0x1
 10564 0f03 4504     		.2byte	0x445
 10565 0f05 BD000000 		.4byte	0xbd
 10566 0f09 02       		.uleb128 0x2
 10567 0f0a 91       		.byte	0x91
 10568 0f0b 68       		.sleb128 -24
 10569 0f0c 1B       		.uleb128 0x1b
 10570 0f0d 36040000 		.4byte	.LASF188
 10571 0f11 01       		.byte	0x1
 10572 0f12 4604     		.2byte	0x446
 10573 0f14 BD000000 		.4byte	0xbd
 10574 0f18 02       		.uleb128 0x2
 10575 0f19 91       		.byte	0x91
 10576 0f1a 64       		.sleb128 -28
 10577 0f1b 1B       		.uleb128 0x1b
 10578 0f1c 5A030000 		.4byte	.LASF189
 10579 0f20 01       		.byte	0x1
 10580 0f21 4704     		.2byte	0x447
 10581 0f23 BD000000 		.4byte	0xbd
 10582 0f27 03       		.uleb128 0x3
 10583 0f28 91       		.byte	0x91
 10584 0f29 A87F     		.sleb128 -88
 10585 0f2b 1B       		.uleb128 0x1b
 10586 0f2c 64030000 		.4byte	.LASF190
 10587 0f30 01       		.byte	0x1
 10588 0f31 4704     		.2byte	0x447
 10589 0f33 BD000000 		.4byte	0xbd
 10590 0f37 03       		.uleb128 0x3
 10591 0f38 91       		.byte	0x91
 10592 0f39 A47F     		.sleb128 -92
 10593 0f3b 1D       		.uleb128 0x1d
 10594 0f3c 4D4F5400 		.ascii	"MOT\000"
 10595 0f40 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 234


 10596 0f41 4904     		.2byte	0x449
 10597 0f43 A20E0000 		.4byte	0xea2
 10598 0f47 02       		.uleb128 0x2
 10599 0f48 91       		.byte	0x91
 10600 0f49 60       		.sleb128 -32
 10601 0f4a 1B       		.uleb128 0x1b
 10602 0f4b FE0E0000 		.4byte	.LASF203
 10603 0f4f 01       		.byte	0x1
 10604 0f50 4A04     		.2byte	0x44a
 10605 0f52 81000000 		.4byte	0x81
 10606 0f56 02       		.uleb128 0x2
 10607 0f57 91       		.byte	0x91
 10608 0f58 5F       		.sleb128 -33
 10609 0f59 1D       		.uleb128 0x1d
 10610 0f5a 6B5F7000 		.ascii	"k_p\000"
 10611 0f5e 01       		.byte	0x1
 10612 0f5f 4C04     		.2byte	0x44c
 10613 0f61 BD000000 		.4byte	0xbd
 10614 0f65 02       		.uleb128 0x2
 10615 0f66 91       		.byte	0x91
 10616 0f67 58       		.sleb128 -40
 10617 0f68 1D       		.uleb128 0x1d
 10618 0f69 6B5F6900 		.ascii	"k_i\000"
 10619 0f6d 01       		.byte	0x1
 10620 0f6e 4D04     		.2byte	0x44d
 10621 0f70 BD000000 		.4byte	0xbd
 10622 0f74 02       		.uleb128 0x2
 10623 0f75 91       		.byte	0x91
 10624 0f76 54       		.sleb128 -44
 10625 0f77 1D       		.uleb128 0x1d
 10626 0f78 6B5F6400 		.ascii	"k_d\000"
 10627 0f7c 01       		.byte	0x1
 10628 0f7d 4E04     		.2byte	0x44e
 10629 0f7f BD000000 		.4byte	0xbd
 10630 0f83 02       		.uleb128 0x2
 10631 0f84 91       		.byte	0x91
 10632 0f85 50       		.sleb128 -48
 10633 0f86 1B       		.uleb128 0x1b
 10634 0f87 BE0B0000 		.4byte	.LASF72
 10635 0f8b 01       		.byte	0x1
 10636 0f8c 5004     		.2byte	0x450
 10637 0f8e BD000000 		.4byte	0xbd
 10638 0f92 02       		.uleb128 0x2
 10639 0f93 91       		.byte	0x91
 10640 0f94 4C       		.sleb128 -52
 10641 0f95 1B       		.uleb128 0x1b
 10642 0f96 AF040000 		.4byte	.LASF73
 10643 0f9a 01       		.byte	0x1
 10644 0f9b 5104     		.2byte	0x451
 10645 0f9d BD000000 		.4byte	0xbd
 10646 0fa1 02       		.uleb128 0x2
 10647 0fa2 91       		.byte	0x91
 10648 0fa3 48       		.sleb128 -56
 10649 0fa4 1B       		.uleb128 0x1b
 10650 0fa5 97040000 		.4byte	.LASF74
 10651 0fa9 01       		.byte	0x1
 10652 0faa 5204     		.2byte	0x452
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 235


 10653 0fac BD000000 		.4byte	0xbd
 10654 0fb0 02       		.uleb128 0x2
 10655 0fb1 91       		.byte	0x91
 10656 0fb2 44       		.sleb128 -60
 10657 0fb3 1B       		.uleb128 0x1b
 10658 0fb4 330E0000 		.4byte	.LASF75
 10659 0fb8 01       		.byte	0x1
 10660 0fb9 5404     		.2byte	0x454
 10661 0fbb BD000000 		.4byte	0xbd
 10662 0fbf 02       		.uleb128 0x2
 10663 0fc0 91       		.byte	0x91
 10664 0fc1 40       		.sleb128 -64
 10665 0fc2 1B       		.uleb128 0x1b
 10666 0fc3 4B050000 		.4byte	.LASF76
 10667 0fc7 01       		.byte	0x1
 10668 0fc8 5504     		.2byte	0x455
 10669 0fca BD000000 		.4byte	0xbd
 10670 0fce 03       		.uleb128 0x3
 10671 0fcf 91       		.byte	0x91
 10672 0fd0 BC7F     		.sleb128 -68
 10673 0fd2 1B       		.uleb128 0x1b
 10674 0fd3 810D0000 		.4byte	.LASF77
 10675 0fd7 01       		.byte	0x1
 10676 0fd8 5604     		.2byte	0x456
 10677 0fda BD000000 		.4byte	0xbd
 10678 0fde 03       		.uleb128 0x3
 10679 0fdf 91       		.byte	0x91
 10680 0fe0 B87F     		.sleb128 -72
 10681 0fe2 1B       		.uleb128 0x1b
 10682 0fe3 59050000 		.4byte	.LASF78
 10683 0fe7 01       		.byte	0x1
 10684 0fe8 5804     		.2byte	0x458
 10685 0fea BD000000 		.4byte	0xbd
 10686 0fee 03       		.uleb128 0x3
 10687 0fef 91       		.byte	0x91
 10688 0ff0 B47F     		.sleb128 -76
 10689 0ff2 1B       		.uleb128 0x1b
 10690 0ff3 79060000 		.4byte	.LASF79
 10691 0ff7 01       		.byte	0x1
 10692 0ff8 5904     		.2byte	0x459
 10693 0ffa BD000000 		.4byte	0xbd
 10694 0ffe 03       		.uleb128 0x3
 10695 0fff 91       		.byte	0x91
 10696 1000 B07F     		.sleb128 -80
 10697 1002 1B       		.uleb128 0x1b
 10698 1003 01100000 		.4byte	.LASF80
 10699 1007 01       		.byte	0x1
 10700 1008 5A04     		.2byte	0x45a
 10701 100a BD000000 		.4byte	0xbd
 10702 100e 03       		.uleb128 0x3
 10703 100f 91       		.byte	0x91
 10704 1010 AC7F     		.sleb128 -84
 10705 1012 1B       		.uleb128 0x1b
 10706 1013 26050000 		.4byte	.LASF193
 10707 1017 01       		.byte	0x1
 10708 1018 5E04     		.2byte	0x45e
 10709 101a 82020000 		.4byte	0x282
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 236


 10710 101e 05       		.uleb128 0x5
 10711 101f 03       		.byte	0x3
 10712 1020 B0000000 		.4byte	pos_error_sum.10493
 10713 1024 1B       		.uleb128 0x1b
 10714 1025 A2030000 		.4byte	.LASF194
 10715 1029 01       		.byte	0x1
 10716 102a 5F04     		.2byte	0x45f
 10717 102c 82020000 		.4byte	0x282
 10718 1030 05       		.uleb128 0x5
 10719 1031 03       		.byte	0x3
 10720 1032 C4000000 		.4byte	curr_error_sum.10494
 10721 1036 1B       		.uleb128 0x1b
 10722 1037 6F0A0000 		.4byte	.LASF195
 10723 103b 01       		.byte	0x1
 10724 103c 6104     		.2byte	0x461
 10725 103e 82020000 		.4byte	0x282
 10726 1042 05       		.uleb128 0x5
 10727 1043 03       		.byte	0x3
 10728 1044 B8000000 		.4byte	prev_pos_err.10495
 10729 1048 1B       		.uleb128 0x1b
 10730 1049 9D0B0000 		.4byte	.LASF196
 10731 104d 01       		.byte	0x1
 10732 104e 6204     		.2byte	0x462
 10733 1050 82020000 		.4byte	0x282
 10734 1054 05       		.uleb128 0x5
 10735 1055 03       		.byte	0x3
 10736 1056 CC000000 		.4byte	prev_curr_err.10496
 10737 105a 1B       		.uleb128 0x1b
 10738 105b C90D0000 		.4byte	.LASF197
 10739 105f 01       		.byte	0x1
 10740 1060 6304     		.2byte	0x463
 10741 1062 82020000 		.4byte	0x282
 10742 1066 05       		.uleb128 0x5
 10743 1067 03       		.byte	0x3
 10744 1068 D4000000 		.4byte	prev_pwm.10497
 10745 106c 1B       		.uleb128 0x1b
 10746 106d B5040000 		.4byte	.LASF198
 10747 1071 01       		.byte	0x1
 10748 1072 6504     		.2byte	0x465
 10749 1074 A3100000 		.4byte	0x10a3
 10750 1078 05       		.uleb128 0x5
 10751 1079 03       		.byte	0x3
 10752 107a C0000000 		.4byte	motor_dir.10498
 10753 107e 1B       		.uleb128 0x1b
 10754 107f 7E050000 		.4byte	.LASF199
 10755 1083 01       		.byte	0x1
 10756 1084 6604     		.2byte	0x466
 10757 1086 71030000 		.4byte	0x371
 10758 108a 05       		.uleb128 0x5
 10759 108b 03       		.byte	0x3
 10760 108c DC000000 		.4byte	position_counter.10499
 10761 1090 1B       		.uleb128 0x1b
 10762 1091 EE090000 		.4byte	.LASF200
 10763 1095 01       		.byte	0x1
 10764 1096 6704     		.2byte	0x467
 10765 1098 A3100000 		.4byte	0x10a3
 10766 109c 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 237


 10767 109d 03       		.byte	0x3
 10768 109e AC000000 		.4byte	current_emg.10500
 10769 10a2 00       		.byte	0
 10770 10a3 07       		.uleb128 0x7
 10771 10a4 81000000 		.4byte	0x81
 10772 10a8 B3100000 		.4byte	0x10b3
 10773 10ac 08       		.uleb128 0x8
 10774 10ad 0E010000 		.4byte	0x10e
 10775 10b1 01       		.byte	0x1
 10776 10b2 00       		.byte	0
 10777 10b3 1A       		.uleb128 0x1a
 10778 10b4 E3020000 		.4byte	.LASF204
 10779 10b8 01       		.byte	0x1
 10780 10b9 2106     		.2byte	0x621
 10781 10bb 00000000 		.4byte	.LFB70
 10782 10bf 10080000 		.4byte	.LFE70-.LFB70
 10783 10c3 01       		.uleb128 0x1
 10784 10c4 9C       		.byte	0x9c
 10785 10c5 4D120000 		.4byte	0x124d
 10786 10c9 21       		.uleb128 0x21
 10787 10ca 8A000000 		.4byte	.LASF205
 10788 10ce 01       		.byte	0x1
 10789 10cf 2106     		.2byte	0x621
 10790 10d1 81000000 		.4byte	0x81
 10791 10d5 03       		.uleb128 0x3
 10792 10d6 91       		.byte	0x91
 10793 10d7 BF7F     		.sleb128 -65
 10794 10d9 21       		.uleb128 0x21
 10795 10da 030A0000 		.4byte	.LASF206
 10796 10de 01       		.byte	0x1
 10797 10df 2106     		.2byte	0x621
 10798 10e1 81000000 		.4byte	0x81
 10799 10e5 03       		.uleb128 0x3
 10800 10e6 91       		.byte	0x91
 10801 10e7 BE7F     		.sleb128 -66
 10802 10e9 1B       		.uleb128 0x1b
 10803 10ea 45060000 		.4byte	.LASF207
 10804 10ee 01       		.byte	0x1
 10805 10ef 2306     		.2byte	0x623
 10806 10f1 81000000 		.4byte	0x81
 10807 10f5 02       		.uleb128 0x2
 10808 10f6 91       		.byte	0x91
 10809 10f7 67       		.sleb128 -25
 10810 10f8 1D       		.uleb128 0x1d
 10811 10f9 6A6A00   		.ascii	"jj\000"
 10812 10fc 01       		.byte	0x1
 10813 10fd 2606     		.2byte	0x626
 10814 10ff 81000000 		.4byte	0x81
 10815 1103 02       		.uleb128 0x2
 10816 1104 91       		.byte	0x91
 10817 1105 66       		.sleb128 -26
 10818 1106 1B       		.uleb128 0x1b
 10819 1107 BC020000 		.4byte	.LASF208
 10820 110b 01       		.byte	0x1
 10821 110c 2806     		.2byte	0x628
 10822 110e 4D120000 		.4byte	0x124d
 10823 1112 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 238


 10824 1113 91       		.byte	0x91
 10825 1114 40       		.sleb128 -64
 10826 1115 1B       		.uleb128 0x1b
 10827 1116 8D0E0000 		.4byte	.LASF209
 10828 111a 01       		.byte	0x1
 10829 111b 2906     		.2byte	0x629
 10830 111d B1000000 		.4byte	0xb1
 10831 1121 02       		.uleb128 0x2
 10832 1122 91       		.byte	0x91
 10833 1123 64       		.sleb128 -28
 10834 1124 1B       		.uleb128 0x1b
 10835 1125 880B0000 		.4byte	.LASF210
 10836 1129 01       		.byte	0x1
 10837 112a 2A06     		.2byte	0x62a
 10838 112c BD000000 		.4byte	0xbd
 10839 1130 02       		.uleb128 0x2
 10840 1131 91       		.byte	0x91
 10841 1132 54       		.sleb128 -44
 10842 1133 1B       		.uleb128 0x1b
 10843 1134 880D0000 		.4byte	.LASF211
 10844 1138 01       		.byte	0x1
 10845 1139 2B06     		.2byte	0x62b
 10846 113b BD000000 		.4byte	0xbd
 10847 113f 02       		.uleb128 0x2
 10848 1140 91       		.byte	0x91
 10849 1141 60       		.sleb128 -32
 10850 1142 1B       		.uleb128 0x1b
 10851 1143 EB030000 		.4byte	.LASF212
 10852 1147 01       		.byte	0x1
 10853 1148 2C06     		.2byte	0x62c
 10854 114a BD000000 		.4byte	0xbd
 10855 114e 02       		.uleb128 0x2
 10856 114f 91       		.byte	0x91
 10857 1150 4C       		.sleb128 -52
 10858 1151 1B       		.uleb128 0x1b
 10859 1152 630D0000 		.4byte	.LASF213
 10860 1156 01       		.byte	0x1
 10861 1157 2D06     		.2byte	0x62d
 10862 1159 BD000000 		.4byte	0xbd
 10863 115d 02       		.uleb128 0x2
 10864 115e 91       		.byte	0x91
 10865 115f 50       		.sleb128 -48
 10866 1160 1B       		.uleb128 0x1b
 10867 1161 7C0A0000 		.4byte	.LASF214
 10868 1165 01       		.byte	0x1
 10869 1166 2E06     		.2byte	0x62e
 10870 1168 A5000000 		.4byte	0xa5
 10871 116c 02       		.uleb128 0x2
 10872 116d 91       		.byte	0x91
 10873 116e 5F       		.sleb128 -33
 10874 116f 1B       		.uleb128 0x1b
 10875 1170 1B0B0000 		.4byte	.LASF215
 10876 1174 01       		.byte	0x1
 10877 1175 3006     		.2byte	0x630
 10878 1177 5D120000 		.4byte	0x125d
 10879 117b 05       		.uleb128 0x5
 10880 117c 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 239


 10881 117d E4000000 		.4byte	last_value_encoder.10540
 10882 1181 1B       		.uleb128 0x1b
 10883 1182 07060000 		.4byte	.LASF216
 10884 1186 01       		.byte	0x1
 10885 1187 3106     		.2byte	0x631
 10886 1189 5D120000 		.4byte	0x125d
 10887 118d 05       		.uleb128 0x5
 10888 118e 03       		.byte	0x3
 10889 118f FC000000 		.4byte	comp_value_encoder.10541
 10890 1193 1B       		.uleb128 0x1b
 10891 1194 F7020000 		.4byte	.LASF217
 10892 1198 01       		.byte	0x1
 10893 1199 3206     		.2byte	0x632
 10894 119b 73120000 		.4byte	0x1273
 10895 119f 05       		.uleb128 0x5
 10896 11a0 03       		.byte	0x3
 10897 11a1 14010000 		.4byte	error.10542
 10898 11a5 1B       		.uleb128 0x1b
 10899 11a6 4D0D0000 		.4byte	.LASF218
 10900 11aa 01       		.byte	0x1
 10901 11ab 3406     		.2byte	0x634
 10902 11ad A3100000 		.4byte	0x10a3
 10903 11b1 05       		.uleb128 0x5
 10904 11b2 03       		.byte	0x3
 10905 11b3 04000000 		.4byte	only_first_time.10543
 10906 11b7 1B       		.uleb128 0x1b
 10907 11b8 85020000 		.4byte	.LASF219
 10908 11bc 01       		.byte	0x1
 10909 11bd 3506     		.2byte	0x635
 10910 11bf A3100000 		.4byte	0x10a3
 10911 11c3 05       		.uleb128 0x5
 10912 11c4 03       		.byte	0x3
 10913 11c5 6C010000 		.4byte	safe_startup_motor_activation.10544
 10914 11c9 1B       		.uleb128 0x1b
 10915 11ca 5F000000 		.4byte	.LASF220
 10916 11ce 01       		.byte	0x1
 10917 11cf 3606     		.2byte	0x636
 10918 11d1 A3100000 		.4byte	0x10a3
 10919 11d5 05       		.uleb128 0x5
 10920 11d6 03       		.byte	0x3
 10921 11d7 68010000 		.4byte	one_time_execute.10545
 10922 11db 1B       		.uleb128 0x1b
 10923 11dc 44090000 		.4byte	.LASF221
 10924 11e0 01       		.byte	0x1
 10925 11e1 3706     		.2byte	0x637
 10926 11e3 71030000 		.4byte	0x371
 10927 11e7 05       		.uleb128 0x5
 10928 11e8 03       		.byte	0x3
 10929 11e9 70010000 		.4byte	count_startup_motor.10546
 10930 11ed 1B       		.uleb128 0x1b
 10931 11ee 13030000 		.4byte	.LASF222
 10932 11f2 01       		.byte	0x1
 10933 11f3 3806     		.2byte	0x638
 10934 11f5 A3100000 		.4byte	0x10a3
 10935 11f9 05       		.uleb128 0x5
 10936 11fa 03       		.byte	0x3
 10937 11fb 64010000 		.4byte	pos_reconstruct.10547
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 240


 10938 11ff 1B       		.uleb128 0x1b
 10939 1200 95080000 		.4byte	.LASF223
 10940 1204 01       		.byte	0x1
 10941 1205 3A06     		.2byte	0x63a
 10942 1207 5D120000 		.4byte	0x125d
 10943 120b 05       		.uleb128 0x5
 10944 120c 03       		.byte	0x3
 10945 120d 1C010000 		.4byte	v_value.10548
 10946 1211 1B       		.uleb128 0x1b
 10947 1212 F80F0000 		.4byte	.LASF224
 10948 1216 01       		.byte	0x1
 10949 1217 3B06     		.2byte	0x63b
 10950 1219 5D120000 		.4byte	0x125d
 10951 121d 05       		.uleb128 0x5
 10952 121e 03       		.byte	0x3
 10953 121f 34010000 		.4byte	vv_value.10549
 10954 1223 1B       		.uleb128 0x1b
 10955 1224 4A010000 		.4byte	.LASF225
 10956 1228 01       		.byte	0x1
 10957 1229 3C06     		.2byte	0x63c
 10958 122b 5D120000 		.4byte	0x125d
 10959 122f 05       		.uleb128 0x5
 10960 1230 03       		.byte	0x3
 10961 1231 4C010000 		.4byte	vvv_value.10550
 10962 1235 1C       		.uleb128 0x1c
 10963 1236 94000000 		.4byte	.LBB3
 10964 123a 6A000000 		.4byte	.LBE3-.LBB3
 10965 123e 1D       		.uleb128 0x1d
 10966 123f 6A00     		.ascii	"j\000"
 10967 1241 01       		.byte	0x1
 10968 1242 4C06     		.2byte	0x64c
 10969 1244 68000000 		.4byte	0x68
 10970 1248 02       		.uleb128 0x2
 10971 1249 91       		.byte	0x91
 10972 124a 58       		.sleb128 -40
 10973 124b 00       		.byte	0
 10974 124c 00       		.byte	0
 10975 124d 07       		.uleb128 0x7
 10976 124e 99000000 		.4byte	0x99
 10977 1252 5D120000 		.4byte	0x125d
 10978 1256 08       		.uleb128 0x8
 10979 1257 0E010000 		.4byte	0x10e
 10980 125b 02       		.byte	0x2
 10981 125c 00       		.byte	0
 10982 125d 07       		.uleb128 0x7
 10983 125e BD000000 		.4byte	0xbd
 10984 1262 73120000 		.4byte	0x1273
 10985 1266 08       		.uleb128 0x8
 10986 1267 0E010000 		.4byte	0x10e
 10987 126b 01       		.byte	0x1
 10988 126c 08       		.uleb128 0x8
 10989 126d 0E010000 		.4byte	0x10e
 10990 1271 02       		.byte	0x2
 10991 1272 00       		.byte	0
 10992 1273 07       		.uleb128 0x7
 10993 1274 81000000 		.4byte	0x81
 10994 1278 89120000 		.4byte	0x1289
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 241


 10995 127c 08       		.uleb128 0x8
 10996 127d 0E010000 		.4byte	0x10e
 10997 1281 01       		.byte	0x1
 10998 1282 08       		.uleb128 0x8
 10999 1283 0E010000 		.4byte	0x10e
 11000 1287 02       		.byte	0x2
 11001 1288 00       		.byte	0
 11002 1289 1F       		.uleb128 0x1f
 11003 128a 530C0000 		.4byte	.LASF226
 11004 128e 01       		.byte	0x1
 11005 128f F406     		.2byte	0x6f4
 11006 1291 00000000 		.4byte	.LFB71
 11007 1295 F80D0000 		.4byte	.LFE71-.LFB71
 11008 1299 01       		.uleb128 0x1
 11009 129a 9C       		.byte	0x9c
 11010 129b 1B130000 		.4byte	0x131b
 11011 129f 1B       		.uleb128 0x1b
 11012 12a0 FC0B0000 		.4byte	.LASF227
 11013 12a4 01       		.byte	0x1
 11014 12a5 0807     		.2byte	0x708
 11015 12a7 BD000000 		.4byte	0xbd
 11016 12ab 02       		.uleb128 0x2
 11017 12ac 91       		.byte	0x91
 11018 12ad 64       		.sleb128 -28
 11019 12ae 1B       		.uleb128 0x1b
 11020 12af 310D0000 		.4byte	.LASF228
 11021 12b3 01       		.byte	0x1
 11022 12b4 0A07     		.2byte	0x70a
 11023 12b6 8D000000 		.4byte	0x8d
 11024 12ba 05       		.uleb128 0x5
 11025 12bb 03       		.byte	0x3
 11026 12bc 80010000 		.4byte	emg_counter_1.10567
 11027 12c0 1B       		.uleb128 0x1b
 11028 12c1 3F0D0000 		.4byte	.LASF229
 11029 12c5 01       		.byte	0x1
 11030 12c6 0B07     		.2byte	0x70b
 11031 12c8 8D000000 		.4byte	0x8d
 11032 12cc 05       		.uleb128 0x5
 11033 12cd 03       		.byte	0x3
 11034 12ce 82010000 		.4byte	emg_counter_2.10568
 11035 12d2 1B       		.uleb128 0x1b
 11036 12d3 1F020000 		.4byte	.LASF230
 11037 12d7 01       		.byte	0x1
 11038 12d8 0C07     		.2byte	0x70c
 11039 12da 81000000 		.4byte	0x81
 11040 12de 05       		.uleb128 0x5
 11041 12df 03       		.byte	0x3
 11042 12e0 06000000 		.4byte	first_tension_valid.10569
 11043 12e4 1B       		.uleb128 0x1b
 11044 12e5 75090000 		.4byte	.LASF231
 11045 12e9 01       		.byte	0x1
 11046 12ea 0E07     		.2byte	0x70e
 11047 12ec 8D000000 		.4byte	0x8d
 11048 12f0 05       		.uleb128 0x5
 11049 12f1 03       		.byte	0x3
 11050 12f2 78010000 		.4byte	count.10570
 11051 12f6 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 242


 11052 12f7 3A010000 		.4byte	.LASF232
 11053 12fb 01       		.byte	0x1
 11054 12fc 0F07     		.2byte	0x70f
 11055 12fe 99000000 		.4byte	0x99
 11056 1302 05       		.uleb128 0x5
 11057 1303 03       		.byte	0x3
 11058 1304 7C010000 		.4byte	v_count.10571
 11059 1308 1D       		.uleb128 0x1d
 11060 1309 69647800 		.ascii	"idx\000"
 11061 130d 01       		.byte	0x1
 11062 130e 1007     		.2byte	0x710
 11063 1310 81000000 		.4byte	0x81
 11064 1314 05       		.uleb128 0x5
 11065 1315 03       		.byte	0x3
 11066 1316 7A010000 		.4byte	idx.10572
 11067 131a 00       		.byte	0
 11068 131b 22       		.uleb128 0x22
 11069 131c 1E0C0000 		.4byte	.LASF233
 11070 1320 01       		.byte	0x1
 11071 1321 BC08     		.2byte	0x8bc
 11072 1323 00000000 		.4byte	.LFB72
 11073 1327 F4000000 		.4byte	.LFE72-.LFB72
 11074 132b 01       		.uleb128 0x1
 11075 132c 9C       		.byte	0x9c
 11076 132d 49130000 		.4byte	0x1349
 11077 1331 1C       		.uleb128 0x1c
 11078 1332 06000000 		.4byte	.LBB4
 11079 1336 D0000000 		.4byte	.LBE4-.LBB4
 11080 133a 1D       		.uleb128 0x1d
 11081 133b 6900     		.ascii	"i\000"
 11082 133d 01       		.byte	0x1
 11083 133e BE08     		.2byte	0x8be
 11084 1340 81000000 		.4byte	0x81
 11085 1344 02       		.uleb128 0x2
 11086 1345 91       		.byte	0x91
 11087 1346 77       		.sleb128 -9
 11088 1347 00       		.byte	0
 11089 1348 00       		.byte	0
 11090 1349 23       		.uleb128 0x23
 11091 134a 23030000 		.4byte	.LASF234
 11092 134e 01       		.byte	0x1
 11093 134f D808     		.2byte	0x8d8
 11094 1351 00000000 		.4byte	.LFB73
 11095 1355 78000000 		.4byte	.LFE73-.LFB73
 11096 1359 01       		.uleb128 0x1
 11097 135a 9C       		.byte	0x9c
 11098 135b 9C130000 		.4byte	0x139c
 11099 135f 21       		.uleb128 0x21
 11100 1360 850A0000 		.4byte	.LASF235
 11101 1364 01       		.byte	0x1
 11102 1365 D808     		.2byte	0x8d8
 11103 1367 81000000 		.4byte	0x81
 11104 136b 02       		.uleb128 0x2
 11105 136c 91       		.byte	0x91
 11106 136d 6F       		.sleb128 -17
 11107 136e 1B       		.uleb128 0x1b
 11108 136f 45060000 		.4byte	.LASF207
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 243


 11109 1373 01       		.byte	0x1
 11110 1374 DA08     		.2byte	0x8da
 11111 1376 81000000 		.4byte	0x81
 11112 137a 02       		.uleb128 0x2
 11113 137b 91       		.byte	0x91
 11114 137c 73       		.sleb128 -13
 11115 137d 1B       		.uleb128 0x1b
 11116 137e 050B0000 		.4byte	.LASF236
 11117 1382 01       		.byte	0x1
 11118 1383 DB08     		.2byte	0x8db
 11119 1385 8D000000 		.4byte	0x8d
 11120 1389 02       		.uleb128 0x2
 11121 138a 91       		.byte	0x91
 11122 138b 76       		.sleb128 -10
 11123 138c 1B       		.uleb128 0x1b
 11124 138d 5F070000 		.4byte	.LASF237
 11125 1391 01       		.byte	0x1
 11126 1392 DC08     		.2byte	0x8dc
 11127 1394 8D000000 		.4byte	0x8d
 11128 1398 02       		.uleb128 0x2
 11129 1399 91       		.byte	0x91
 11130 139a 74       		.sleb128 -12
 11131 139b 00       		.byte	0
 11132 139c 1F       		.uleb128 0x1f
 11133 139d D2070000 		.4byte	.LASF238
 11134 13a1 01       		.byte	0x1
 11135 13a2 EC08     		.2byte	0x8ec
 11136 13a4 00000000 		.4byte	.LFB74
 11137 13a8 08040000 		.4byte	.LFE74-.LFB74
 11138 13ac 01       		.uleb128 0x1
 11139 13ad 9C       		.byte	0x9c
 11140 13ae C8140000 		.4byte	0x14c8
 11141 13b2 1B       		.uleb128 0x1b
 11142 13b3 09000000 		.4byte	.LASF239
 11143 13b7 01       		.byte	0x1
 11144 13b8 ED08     		.2byte	0x8ed
 11145 13ba 81000000 		.4byte	0x81
 11146 13be 05       		.uleb128 0x5
 11147 13bf 03       		.byte	0x3
 11148 13c0 84010000 		.4byte	pos_cycle_status.10628
 11149 13c4 1B       		.uleb128 0x1b
 11150 13c5 850C0000 		.4byte	.LASF240
 11151 13c9 01       		.byte	0x1
 11152 13ca EE08     		.2byte	0x8ee
 11153 13cc A3100000 		.4byte	0x10a3
 11154 13d0 05       		.uleb128 0x5
 11155 13d1 03       		.byte	0x3
 11156 13d2 90010000 		.4byte	emg_cycle_status.10629
 11157 13d6 1B       		.uleb128 0x1b
 11158 13d7 7B0E0000 		.4byte	.LASF241
 11159 13db 01       		.byte	0x1
 11160 13dc EF08     		.2byte	0x8ef
 11161 13de 81000000 		.4byte	0x81
 11162 13e2 05       		.uleb128 0x5
 11163 13e3 03       		.byte	0x3
 11164 13e4 92010000 		.4byte	rest_cycle_status.10630
 11165 13e8 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 244


 11166 13e9 6E020000 		.4byte	.LASF242
 11167 13ed 01       		.byte	0x1
 11168 13ee F008     		.2byte	0x8f0
 11169 13f0 BD000000 		.4byte	0xbd
 11170 13f4 05       		.uleb128 0x5
 11171 13f5 03       		.byte	0x3
 11172 13f6 08000000 		.4byte	bin_threshold.10631
 11173 13fa 1B       		.uleb128 0x1b
 11174 13fb A0010000 		.4byte	.LASF243
 11175 13ff 01       		.byte	0x1
 11176 1400 F108     		.2byte	0x8f1
 11177 1402 BD000000 		.4byte	0xbd
 11178 1406 05       		.uleb128 0x5
 11179 1407 03       		.byte	0x3
 11180 1408 88010000 		.4byte	thr_pos.10632
 11181 140c 1B       		.uleb128 0x1b
 11182 140d 9E090000 		.4byte	.LASF244
 11183 1411 01       		.byte	0x1
 11184 1412 F108     		.2byte	0x8f1
 11185 1414 BD000000 		.4byte	0xbd
 11186 1418 05       		.uleb128 0x5
 11187 1419 03       		.byte	0x3
 11188 141a 8C010000 		.4byte	max_pos.10633
 11189 141e 1D       		.uleb128 0x1d
 11190 141f 6900     		.ascii	"i\000"
 11191 1421 01       		.byte	0x1
 11192 1422 F208     		.2byte	0x8f2
 11193 1424 81000000 		.4byte	0x81
 11194 1428 02       		.uleb128 0x2
 11195 1429 91       		.byte	0x91
 11196 142a 77       		.sleb128 -9
 11197 142b 1B       		.uleb128 0x1b
 11198 142c BF040000 		.4byte	.LASF245
 11199 1430 01       		.byte	0x1
 11200 1431 F208     		.2byte	0x8f2
 11201 1433 81000000 		.4byte	0x81
 11202 1437 02       		.uleb128 0x2
 11203 1438 91       		.byte	0x91
 11204 1439 63       		.sleb128 -29
 11205 143a 1B       		.uleb128 0x1b
 11206 143b C7000000 		.4byte	.LASF246
 11207 143f 01       		.byte	0x1
 11208 1440 F208     		.2byte	0x8f2
 11209 1442 81000000 		.4byte	0x81
 11210 1446 02       		.uleb128 0x2
 11211 1447 91       		.byte	0x91
 11212 1448 62       		.sleb128 -30
 11213 1449 1B       		.uleb128 0x1b
 11214 144a F00B0000 		.4byte	.LASF247
 11215 144e 01       		.byte	0x1
 11216 144f F208     		.2byte	0x8f2
 11217 1451 81000000 		.4byte	0x81
 11218 1455 02       		.uleb128 0x2
 11219 1456 91       		.byte	0x91
 11220 1457 61       		.sleb128 -31
 11221 1458 1B       		.uleb128 0x1b
 11222 1459 F60B0000 		.4byte	.LASF248
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 245


 11223 145d 01       		.byte	0x1
 11224 145e F208     		.2byte	0x8f2
 11225 1460 81000000 		.4byte	0x81
 11226 1464 02       		.uleb128 0x2
 11227 1465 91       		.byte	0x91
 11228 1466 60       		.sleb128 -32
 11229 1467 1B       		.uleb128 0x1b
 11230 1468 320C0000 		.4byte	.LASF249
 11231 146c 01       		.byte	0x1
 11232 146d F308     		.2byte	0x8f3
 11233 146f BD000000 		.4byte	0xbd
 11234 1473 02       		.uleb128 0x2
 11235 1474 91       		.byte	0x91
 11236 1475 6C       		.sleb128 -20
 11237 1476 1B       		.uleb128 0x1b
 11238 1477 02040000 		.4byte	.LASF250
 11239 147b 01       		.byte	0x1
 11240 147c F308     		.2byte	0x8f3
 11241 147e BD000000 		.4byte	0xbd
 11242 1482 02       		.uleb128 0x2
 11243 1483 91       		.byte	0x91
 11244 1484 68       		.sleb128 -24
 11245 1485 1B       		.uleb128 0x1b
 11246 1486 6E0D0000 		.4byte	.LASF251
 11247 148a 01       		.byte	0x1
 11248 148b F308     		.2byte	0x8f3
 11249 148d BD000000 		.4byte	0xbd
 11250 1491 02       		.uleb128 0x2
 11251 1492 91       		.byte	0x91
 11252 1493 70       		.sleb128 -16
 11253 1494 1B       		.uleb128 0x1b
 11254 1495 9D030000 		.4byte	.LASF252
 11255 1499 01       		.byte	0x1
 11256 149a F408     		.2byte	0x8f4
 11257 149c BD000000 		.4byte	0xbd
 11258 14a0 02       		.uleb128 0x2
 11259 14a1 91       		.byte	0x91
 11260 14a2 64       		.sleb128 -28
 11261 14a3 1B       		.uleb128 0x1b
 11262 14a4 EB050000 		.4byte	.LASF253
 11263 14a8 01       		.byte	0x1
 11264 14a9 F508     		.2byte	0x8f5
 11265 14ab 99000000 		.4byte	0x99
 11266 14af 05       		.uleb128 0x5
 11267 14b0 03       		.byte	0x3
 11268 14b1 94010000 		.4byte	timer_value_s.10643
 11269 14b5 1B       		.uleb128 0x1b
 11270 14b6 8F050000 		.4byte	.LASF254
 11271 14ba 01       		.byte	0x1
 11272 14bb F508     		.2byte	0x8f5
 11273 14bd 99000000 		.4byte	0x99
 11274 14c1 05       		.uleb128 0x5
 11275 14c2 03       		.byte	0x3
 11276 14c3 98010000 		.4byte	timer_value_e.10644
 11277 14c7 00       		.byte	0
 11278 14c8 1F       		.uleb128 0x1f
 11279 14c9 2B0A0000 		.4byte	.LASF255
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 246


 11280 14cd 01       		.byte	0x1
 11281 14ce 6109     		.2byte	0x961
 11282 14d0 00000000 		.4byte	.LFB75
 11283 14d4 08010000 		.4byte	.LFE75-.LFB75
 11284 14d8 01       		.uleb128 0x1
 11285 14d9 9C       		.byte	0x9c
 11286 14da 4E150000 		.4byte	0x154e
 11287 14de 1B       		.uleb128 0x1b
 11288 14df 530E0000 		.4byte	.LASF256
 11289 14e3 01       		.byte	0x1
 11290 14e4 6309     		.2byte	0x963
 11291 14e6 EA000000 		.4byte	0xea
 11292 14ea 02       		.uleb128 0x2
 11293 14eb 91       		.byte	0x91
 11294 14ec 64       		.sleb128 -28
 11295 14ed 1B       		.uleb128 0x1b
 11296 14ee 130C0000 		.4byte	.LASF257
 11297 14f2 01       		.byte	0x1
 11298 14f3 6409     		.2byte	0x964
 11299 14f5 81000000 		.4byte	0x81
 11300 14f9 05       		.uleb128 0x5
 11301 14fa 03       		.byte	0x3
 11302 14fb A0010000 		.4byte	row_number.10666
 11303 14ff 1B       		.uleb128 0x1b
 11304 1500 D5030000 		.4byte	.LASF258
 11305 1504 01       		.byte	0x1
 11306 1505 6509     		.2byte	0x965
 11307 1507 81000000 		.4byte	0x81
 11308 150b 02       		.uleb128 0x2
 11309 150c 91       		.byte	0x91
 11310 150d 77       		.sleb128 -9
 11311 150e 1B       		.uleb128 0x1b
 11312 150f D50C0000 		.4byte	.LASF259
 11313 1513 01       		.byte	0x1
 11314 1514 6609     		.2byte	0x966
 11315 1516 4E150000 		.4byte	0x154e
 11316 151a 02       		.uleb128 0x2
 11317 151b 91       		.byte	0x91
 11318 151c 70       		.sleb128 -16
 11319 151d 1B       		.uleb128 0x1b
 11320 151e CF000000 		.4byte	.LASF260
 11321 1522 01       		.byte	0x1
 11322 1523 6709     		.2byte	0x967
 11323 1525 4E150000 		.4byte	0x154e
 11324 1529 02       		.uleb128 0x2
 11325 152a 91       		.byte	0x91
 11326 152b 6C       		.sleb128 -20
 11327 152c 1B       		.uleb128 0x1b
 11328 152d 6B0F0000 		.4byte	.LASF261
 11329 1531 01       		.byte	0x1
 11330 1532 6809     		.2byte	0x968
 11331 1534 81000000 		.4byte	0x81
 11332 1538 02       		.uleb128 0x2
 11333 1539 91       		.byte	0x91
 11334 153a 6B       		.sleb128 -21
 11335 153b 1B       		.uleb128 0x1b
 11336 153c 84090000 		.4byte	.LASF262
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 247


 11337 1540 01       		.byte	0x1
 11338 1541 6909     		.2byte	0x969
 11339 1543 4E150000 		.4byte	0x154e
 11340 1547 05       		.uleb128 0x5
 11341 1548 03       		.byte	0x3
 11342 1549 9C010000 		.4byte	m_addr.10671
 11343 154d 00       		.byte	0
 11344 154e 0C       		.uleb128 0xc
 11345 154f 04       		.byte	0x4
 11346 1550 81000000 		.4byte	0x81
 11347 1554 07       		.uleb128 0x7
 11348 1555 64150000 		.4byte	0x1564
 11349 1559 64150000 		.4byte	0x1564
 11350 155d 08       		.uleb128 0x8
 11351 155e 0E010000 		.4byte	0x10e
 11352 1562 1C       		.byte	0x1c
 11353 1563 00       		.byte	0
 11354 1564 24       		.uleb128 0x24
 11355 1565 81000000 		.4byte	0x81
 11356 1569 19       		.uleb128 0x19
 11357 156a E00C0000 		.4byte	.LASF263
 11358 156e 01       		.byte	0x1
 11359 156f 40       		.byte	0x40
 11360 1570 7A150000 		.4byte	0x157a
 11361 1574 05       		.uleb128 0x5
 11362 1575 03       		.byte	0x3
 11363 1576 00000000 		.4byte	pwm_preload_values
 11364 157a 24       		.uleb128 0x24
 11365 157b 54150000 		.4byte	0x1554
 11366 157f 25       		.uleb128 0x25
 11367 1580 EA0D0000 		.4byte	.LASF264
 11368 1584 08       		.byte	0x8
 11369 1585 1207     		.2byte	0x712
 11370 1587 8B150000 		.4byte	0x158b
 11371 158b 06       		.uleb128 0x6
 11372 158c 76000000 		.4byte	0x76
 11373 1590 07       		.uleb128 0x7
 11374 1591 9F010000 		.4byte	0x19f
 11375 1595 A0150000 		.4byte	0x15a0
 11376 1599 08       		.uleb128 0x8
 11377 159a 0E010000 		.4byte	0x10e
 11378 159e 01       		.byte	0x1
 11379 159f 00       		.byte	0
 11380 15a0 25       		.uleb128 0x25
 11381 15a1 2B060000 		.4byte	.LASF265
 11382 15a5 07       		.byte	0x7
 11383 15a6 F401     		.2byte	0x1f4
 11384 15a8 90150000 		.4byte	0x1590
 11385 15ac 25       		.uleb128 0x25
 11386 15ad F9030000 		.4byte	.LASF266
 11387 15b1 07       		.byte	0x7
 11388 15b2 F401     		.2byte	0x1f4
 11389 15b4 90150000 		.4byte	0x1590
 11390 15b8 25       		.uleb128 0x25
 11391 15b9 C70A0000 		.4byte	.LASF267
 11392 15bd 07       		.byte	0x7
 11393 15be F401     		.2byte	0x1f4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 248


 11394 15c0 90150000 		.4byte	0x1590
 11395 15c4 07       		.uleb128 0x7
 11396 15c5 DC010000 		.4byte	0x1dc
 11397 15c9 D4150000 		.4byte	0x15d4
 11398 15cd 08       		.uleb128 0x8
 11399 15ce 0E010000 		.4byte	0x10e
 11400 15d2 01       		.byte	0x1
 11401 15d3 00       		.byte	0
 11402 15d4 25       		.uleb128 0x25
 11403 15d5 E4050000 		.4byte	.LASF268
 11404 15d9 07       		.byte	0x7
 11405 15da F501     		.2byte	0x1f5
 11406 15dc C4150000 		.4byte	0x15c4
 11407 15e0 25       		.uleb128 0x25
 11408 15e1 610F0000 		.4byte	.LASF269
 11409 15e5 07       		.byte	0x7
 11410 15e6 F501     		.2byte	0x1f5
 11411 15e8 C4150000 		.4byte	0x15c4
 11412 15ec 25       		.uleb128 0x25
 11413 15ed 78000000 		.4byte	.LASF270
 11414 15f1 07       		.byte	0x7
 11415 15f2 F601     		.2byte	0x1f6
 11416 15f4 5D020000 		.4byte	0x25d
 11417 15f8 25       		.uleb128 0x25
 11418 15f9 D50F0000 		.4byte	.LASF271
 11419 15fd 07       		.byte	0x7
 11420 15fe F601     		.2byte	0x1f6
 11421 1600 5D020000 		.4byte	0x25d
 11422 1604 25       		.uleb128 0x25
 11423 1605 120D0000 		.4byte	.LASF272
 11424 1609 07       		.byte	0x7
 11425 160a F701     		.2byte	0x1f7
 11426 160c A2020000 		.4byte	0x2a2
 11427 1610 25       		.uleb128 0x25
 11428 1611 5A000000 		.4byte	.LASF273
 11429 1615 07       		.byte	0x7
 11430 1616 F801     		.2byte	0x1f8
 11431 1618 BB020000 		.4byte	0x2bb
 11432 161c 25       		.uleb128 0x25
 11433 161d 2B0D0000 		.4byte	.LASF274
 11434 1621 07       		.byte	0x7
 11435 1622 F901     		.2byte	0x1f9
 11436 1624 EB080000 		.4byte	0x8eb
 11437 1628 25       		.uleb128 0x25
 11438 1629 8B090000 		.4byte	.LASF275
 11439 162d 07       		.byte	0x7
 11440 162e F901     		.2byte	0x1f9
 11441 1630 EB080000 		.4byte	0x8eb
 11442 1634 25       		.uleb128 0x25
 11443 1635 9D080000 		.4byte	.LASF276
 11444 1639 07       		.byte	0x7
 11445 163a FA01     		.2byte	0x1fa
 11446 163c A90A0000 		.4byte	0xaa9
 11447 1640 07       		.uleb128 0x7
 11448 1641 810A0000 		.4byte	0xa81
 11449 1645 50160000 		.4byte	0x1650
 11450 1649 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 249


 11451 164a 0E010000 		.4byte	0x10e
 11452 164e 01       		.byte	0x1
 11453 164f 00       		.byte	0
 11454 1650 25       		.uleb128 0x25
 11455 1651 B30A0000 		.4byte	.LASF277
 11456 1655 07       		.byte	0x7
 11457 1656 FB01     		.2byte	0x1fb
 11458 1658 40160000 		.4byte	0x1640
 11459 165c 25       		.uleb128 0x25
 11460 165d F8080000 		.4byte	.LASF278
 11461 1661 07       		.byte	0x7
 11462 1662 FB01     		.2byte	0x1fb
 11463 1664 40160000 		.4byte	0x1640
 11464 1668 25       		.uleb128 0x25
 11465 1669 990A0000 		.4byte	.LASF279
 11466 166d 07       		.byte	0x7
 11467 166e FB01     		.2byte	0x1fb
 11468 1670 40160000 		.4byte	0x1640
 11469 1674 07       		.uleb128 0x7
 11470 1675 810A0000 		.4byte	0xa81
 11471 1679 84160000 		.4byte	0x1684
 11472 167d 08       		.uleb128 0x8
 11473 167e 0E010000 		.4byte	0x10e
 11474 1682 02       		.byte	0x2
 11475 1683 00       		.byte	0
 11476 1684 25       		.uleb128 0x25
 11477 1685 7D040000 		.4byte	.LASF280
 11478 1689 07       		.byte	0x7
 11479 168a FC01     		.2byte	0x1fc
 11480 168c 74160000 		.4byte	0x1674
 11481 1690 07       		.uleb128 0x7
 11482 1691 810A0000 		.4byte	0xa81
 11483 1695 A0160000 		.4byte	0x16a0
 11484 1699 08       		.uleb128 0x8
 11485 169a 0E010000 		.4byte	0x10e
 11486 169e 07       		.byte	0x7
 11487 169f 00       		.byte	0
 11488 16a0 25       		.uleb128 0x25
 11489 16a1 6A010000 		.4byte	.LASF281
 11490 16a5 07       		.byte	0x7
 11491 16a6 FD01     		.2byte	0x1fd
 11492 16a8 90160000 		.4byte	0x1690
 11493 16ac 25       		.uleb128 0x25
 11494 16ad 33020000 		.4byte	.LASF282
 11495 16b1 07       		.byte	0x7
 11496 16b2 FF01     		.2byte	0x1ff
 11497 16b4 8D000000 		.4byte	0x8d
 11498 16b8 25       		.uleb128 0x25
 11499 16b9 7D080000 		.4byte	.LASF283
 11500 16bd 07       		.byte	0x7
 11501 16be 0002     		.2byte	0x200
 11502 16c0 8D000000 		.4byte	0x8d
 11503 16c4 25       		.uleb128 0x25
 11504 16c5 430B0000 		.4byte	.LASF284
 11505 16c9 07       		.byte	0x7
 11506 16ca 0102     		.2byte	0x201
 11507 16cc D5000000 		.4byte	0xd5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 250


 11508 16d0 25       		.uleb128 0x25
 11509 16d1 C40B0000 		.4byte	.LASF285
 11510 16d5 07       		.byte	0x7
 11511 16d6 0302     		.2byte	0x203
 11512 16d8 82020000 		.4byte	0x282
 11513 16dc 25       		.uleb128 0x25
 11514 16dd 450E0000 		.4byte	.LASF286
 11515 16e1 07       		.byte	0x7
 11516 16e2 0402     		.2byte	0x204
 11517 16e4 A3100000 		.4byte	0x10a3
 11518 16e8 25       		.uleb128 0x25
 11519 16e9 9C0D0000 		.4byte	.LASF287
 11520 16ed 07       		.byte	0x7
 11521 16ee 0502     		.2byte	0x205
 11522 16f0 A3100000 		.4byte	0x10a3
 11523 16f4 25       		.uleb128 0x25
 11524 16f5 3D050000 		.4byte	.LASF288
 11525 16f9 07       		.byte	0x7
 11526 16fa 0602     		.2byte	0x206
 11527 16fc 82020000 		.4byte	0x282
 11528 1700 25       		.uleb128 0x25
 11529 1701 F70D0000 		.4byte	.LASF289
 11530 1705 07       		.byte	0x7
 11531 1706 0702     		.2byte	0x207
 11532 1708 82020000 		.4byte	0x282
 11533 170c 25       		.uleb128 0x25
 11534 170d C2050000 		.4byte	.LASF290
 11535 1711 07       		.byte	0x7
 11536 1712 0902     		.2byte	0x209
 11537 1714 550B0000 		.4byte	0xb55
 11538 1718 25       		.uleb128 0x25
 11539 1719 23040000 		.4byte	.LASF291
 11540 171d 07       		.byte	0x7
 11541 171e 0A02     		.2byte	0x20a
 11542 1720 1D0B0000 		.4byte	0xb1d
 11543 1724 25       		.uleb128 0x25
 11544 1725 79030000 		.4byte	.LASF292
 11545 1729 07       		.byte	0x7
 11546 172a 0B02     		.2byte	0x20b
 11547 172c 1D0B0000 		.4byte	0xb1d
 11548 1730 25       		.uleb128 0x25
 11549 1731 81070000 		.4byte	.LASF293
 11550 1735 07       		.byte	0x7
 11551 1736 0E02     		.2byte	0x20e
 11552 1738 81000000 		.4byte	0x81
 11553 173c 25       		.uleb128 0x25
 11554 173d 9D000000 		.4byte	.LASF294
 11555 1741 07       		.byte	0x7
 11556 1742 0F02     		.2byte	0x20f
 11557 1744 81000000 		.4byte	0x81
 11558 1748 25       		.uleb128 0x25
 11559 1749 8E030000 		.4byte	.LASF295
 11560 174d 07       		.byte	0x7
 11561 174e 1002     		.2byte	0x210
 11562 1750 81000000 		.4byte	0x81
 11563 1754 25       		.uleb128 0x25
 11564 1755 B1000000 		.4byte	.LASF296
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 251


 11565 1759 07       		.byte	0x7
 11566 175a 1102     		.2byte	0x211
 11567 175c 81000000 		.4byte	0x81
 11568 1760 25       		.uleb128 0x25
 11569 1761 950F0000 		.4byte	.LASF297
 11570 1765 07       		.byte	0x7
 11571 1766 1302     		.2byte	0x213
 11572 1768 81000000 		.4byte	0x81
 11573 176c 25       		.uleb128 0x25
 11574 176d BA0A0000 		.4byte	.LASF298
 11575 1771 07       		.byte	0x7
 11576 1772 1402     		.2byte	0x214
 11577 1774 81000000 		.4byte	0x81
 11578 1778 25       		.uleb128 0x25
 11579 1779 DF030000 		.4byte	.LASF299
 11580 177d 07       		.byte	0x7
 11581 177e 1502     		.2byte	0x215
 11582 1780 81000000 		.4byte	0x81
 11583 1784 25       		.uleb128 0x25
 11584 1785 6B070000 		.4byte	.LASF300
 11585 1789 07       		.byte	0x7
 11586 178a 1602     		.2byte	0x216
 11587 178c 81000000 		.4byte	0x81
 11588 1790 25       		.uleb128 0x25
 11589 1791 DD080000 		.4byte	.LASF301
 11590 1795 07       		.byte	0x7
 11591 1796 1702     		.2byte	0x217
 11592 1798 81000000 		.4byte	0x81
 11593 179c 07       		.uleb128 0x7
 11594 179d B1000000 		.4byte	0xb1
 11595 17a1 AC170000 		.4byte	0x17ac
 11596 17a5 08       		.uleb128 0x8
 11597 17a6 0E010000 		.4byte	0x10e
 11598 17aa 0B       		.byte	0xb
 11599 17ab 00       		.byte	0
 11600 17ac 25       		.uleb128 0x25
 11601 17ad 86030000 		.4byte	.LASF302
 11602 17b1 07       		.byte	0x7
 11603 17b2 1B02     		.2byte	0x21b
 11604 17b4 9C170000 		.4byte	0x179c
 11605 17b8 25       		.uleb128 0x25
 11606 17b9 2B0F0000 		.4byte	.LASF303
 11607 17bd 07       		.byte	0x7
 11608 17be 1C02     		.2byte	0x21c
 11609 17c0 81000000 		.4byte	0x81
 11610 17c4 25       		.uleb128 0x25
 11611 17c5 5E040000 		.4byte	.LASF304
 11612 17c9 07       		.byte	0x7
 11613 17ca 1F02     		.2byte	0x21f
 11614 17cc A5000000 		.4byte	0xa5
 11615 17d0 07       		.uleb128 0x7
 11616 17d1 99000000 		.4byte	0x99
 11617 17d5 E0170000 		.4byte	0x17e0
 11618 17d9 08       		.uleb128 0x8
 11619 17da 0E010000 		.4byte	0x10e
 11620 17de 04       		.byte	0x4
 11621 17df 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 252


 11622 17e0 25       		.uleb128 0x25
 11623 17e1 1A060000 		.4byte	.LASF305
 11624 17e5 07       		.byte	0x7
 11625 17e6 2202     		.2byte	0x222
 11626 17e8 D0170000 		.4byte	0x17d0
 11627 17ec 25       		.uleb128 0x25
 11628 17ed 630C0000 		.4byte	.LASF306
 11629 17f1 07       		.byte	0x7
 11630 17f2 2302     		.2byte	0x223
 11631 17f4 A3100000 		.4byte	0x10a3
 11632 17f8 07       		.uleb128 0x7
 11633 17f9 8D000000 		.4byte	0x8d
 11634 17fd 0E180000 		.4byte	0x180e
 11635 1801 08       		.uleb128 0x8
 11636 1802 0E010000 		.4byte	0x10e
 11637 1806 01       		.byte	0x1
 11638 1807 08       		.uleb128 0x8
 11639 1808 0E010000 		.4byte	0x10e
 11640 180c 04       		.byte	0x4
 11641 180d 00       		.byte	0
 11642 180e 25       		.uleb128 0x25
 11643 180f 650E0000 		.4byte	.LASF307
 11644 1813 07       		.byte	0x7
 11645 1814 2402     		.2byte	0x224
 11646 1816 F8170000 		.4byte	0x17f8
 11647 181a 07       		.uleb128 0x7
 11648 181b 81000000 		.4byte	0x81
 11649 181f 30180000 		.4byte	0x1830
 11650 1823 08       		.uleb128 0x8
 11651 1824 0E010000 		.4byte	0x10e
 11652 1828 01       		.byte	0x1
 11653 1829 08       		.uleb128 0x8
 11654 182a 0E010000 		.4byte	0x10e
 11655 182e 04       		.byte	0x4
 11656 182f 00       		.byte	0
 11657 1830 25       		.uleb128 0x25
 11658 1831 F9050000 		.4byte	.LASF308
 11659 1835 07       		.byte	0x7
 11660 1836 2502     		.2byte	0x225
 11661 1838 1A180000 		.4byte	0x181a
 11662 183c 25       		.uleb128 0x25
 11663 183d A6090000 		.4byte	.LASF309
 11664 1841 07       		.byte	0x7
 11665 1842 2802     		.2byte	0x228
 11666 1844 BD000000 		.4byte	0xbd
 11667 1848 25       		.uleb128 0x25
 11668 1849 20050000 		.4byte	.LASF310
 11669 184d 07       		.byte	0x7
 11670 184e 2B02     		.2byte	0x22b
 11671 1850 99010000 		.4byte	0x199
 11672 1854 07       		.uleb128 0x7
 11673 1855 050A0000 		.4byte	0xa05
 11674 1859 64180000 		.4byte	0x1864
 11675 185d 08       		.uleb128 0x8
 11676 185e 0E010000 		.4byte	0x10e
 11677 1862 04       		.byte	0x4
 11678 1863 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 253


 11679 1864 25       		.uleb128 0x25
 11680 1865 73060000 		.4byte	.LASF311
 11681 1869 07       		.byte	0x7
 11682 186a 3402     		.2byte	0x234
 11683 186c 54180000 		.4byte	0x1854
 11684 1870 25       		.uleb128 0x25
 11685 1871 6F050000 		.4byte	.LASF312
 11686 1875 07       		.byte	0x7
 11687 1876 3402     		.2byte	0x234
 11688 1878 54180000 		.4byte	0x1854
 11689 187c 25       		.uleb128 0x25
 11690 187d 400F0000 		.4byte	.LASF313
 11691 1881 07       		.byte	0x7
 11692 1882 3D02     		.2byte	0x23d
 11693 1884 81000000 		.4byte	0x81
 11694 1888 00       		.byte	0
 11695              		.section	.debug_abbrev,"",%progbits
 11696              	.Ldebug_abbrev0:
 11697 0000 01       		.uleb128 0x1
 11698 0001 11       		.uleb128 0x11
 11699 0002 01       		.byte	0x1
 11700 0003 25       		.uleb128 0x25
 11701 0004 0E       		.uleb128 0xe
 11702 0005 13       		.uleb128 0x13
 11703 0006 0B       		.uleb128 0xb
 11704 0007 03       		.uleb128 0x3
 11705 0008 0E       		.uleb128 0xe
 11706 0009 1B       		.uleb128 0x1b
 11707 000a 0E       		.uleb128 0xe
 11708 000b 55       		.uleb128 0x55
 11709 000c 17       		.uleb128 0x17
 11710 000d 11       		.uleb128 0x11
 11711 000e 01       		.uleb128 0x1
 11712 000f 10       		.uleb128 0x10
 11713 0010 17       		.uleb128 0x17
 11714 0011 00       		.byte	0
 11715 0012 00       		.byte	0
 11716 0013 02       		.uleb128 0x2
 11717 0014 24       		.uleb128 0x24
 11718 0015 00       		.byte	0
 11719 0016 0B       		.uleb128 0xb
 11720 0017 0B       		.uleb128 0xb
 11721 0018 3E       		.uleb128 0x3e
 11722 0019 0B       		.uleb128 0xb
 11723 001a 03       		.uleb128 0x3
 11724 001b 0E       		.uleb128 0xe
 11725 001c 00       		.byte	0
 11726 001d 00       		.byte	0
 11727 001e 03       		.uleb128 0x3
 11728 001f 16       		.uleb128 0x16
 11729 0020 00       		.byte	0
 11730 0021 03       		.uleb128 0x3
 11731 0022 0E       		.uleb128 0xe
 11732 0023 3A       		.uleb128 0x3a
 11733 0024 0B       		.uleb128 0xb
 11734 0025 3B       		.uleb128 0x3b
 11735 0026 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 254


 11736 0027 49       		.uleb128 0x49
 11737 0028 13       		.uleb128 0x13
 11738 0029 00       		.byte	0
 11739 002a 00       		.byte	0
 11740 002b 04       		.uleb128 0x4
 11741 002c 24       		.uleb128 0x24
 11742 002d 00       		.byte	0
 11743 002e 0B       		.uleb128 0xb
 11744 002f 0B       		.uleb128 0xb
 11745 0030 3E       		.uleb128 0x3e
 11746 0031 0B       		.uleb128 0xb
 11747 0032 03       		.uleb128 0x3
 11748 0033 08       		.uleb128 0x8
 11749 0034 00       		.byte	0
 11750 0035 00       		.byte	0
 11751 0036 05       		.uleb128 0x5
 11752 0037 16       		.uleb128 0x16
 11753 0038 00       		.byte	0
 11754 0039 03       		.uleb128 0x3
 11755 003a 0E       		.uleb128 0xe
 11756 003b 3A       		.uleb128 0x3a
 11757 003c 0B       		.uleb128 0xb
 11758 003d 3B       		.uleb128 0x3b
 11759 003e 05       		.uleb128 0x5
 11760 003f 49       		.uleb128 0x49
 11761 0040 13       		.uleb128 0x13
 11762 0041 00       		.byte	0
 11763 0042 00       		.byte	0
 11764 0043 06       		.uleb128 0x6
 11765 0044 35       		.uleb128 0x35
 11766 0045 00       		.byte	0
 11767 0046 49       		.uleb128 0x49
 11768 0047 13       		.uleb128 0x13
 11769 0048 00       		.byte	0
 11770 0049 00       		.byte	0
 11771 004a 07       		.uleb128 0x7
 11772 004b 01       		.uleb128 0x1
 11773 004c 01       		.byte	0x1
 11774 004d 49       		.uleb128 0x49
 11775 004e 13       		.uleb128 0x13
 11776 004f 01       		.uleb128 0x1
 11777 0050 13       		.uleb128 0x13
 11778 0051 00       		.byte	0
 11779 0052 00       		.byte	0
 11780 0053 08       		.uleb128 0x8
 11781 0054 21       		.uleb128 0x21
 11782 0055 00       		.byte	0
 11783 0056 49       		.uleb128 0x49
 11784 0057 13       		.uleb128 0x13
 11785 0058 2F       		.uleb128 0x2f
 11786 0059 0B       		.uleb128 0xb
 11787 005a 00       		.byte	0
 11788 005b 00       		.byte	0
 11789 005c 09       		.uleb128 0x9
 11790 005d 04       		.uleb128 0x4
 11791 005e 01       		.byte	0x1
 11792 005f 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 255


 11793 0060 0E       		.uleb128 0xe
 11794 0061 0B       		.uleb128 0xb
 11795 0062 0B       		.uleb128 0xb
 11796 0063 49       		.uleb128 0x49
 11797 0064 13       		.uleb128 0x13
 11798 0065 3A       		.uleb128 0x3a
 11799 0066 0B       		.uleb128 0xb
 11800 0067 3B       		.uleb128 0x3b
 11801 0068 0B       		.uleb128 0xb
 11802 0069 01       		.uleb128 0x1
 11803 006a 13       		.uleb128 0x13
 11804 006b 00       		.byte	0
 11805 006c 00       		.byte	0
 11806 006d 0A       		.uleb128 0xa
 11807 006e 28       		.uleb128 0x28
 11808 006f 00       		.byte	0
 11809 0070 03       		.uleb128 0x3
 11810 0071 0E       		.uleb128 0xe
 11811 0072 1C       		.uleb128 0x1c
 11812 0073 0B       		.uleb128 0xb
 11813 0074 00       		.byte	0
 11814 0075 00       		.byte	0
 11815 0076 0B       		.uleb128 0xb
 11816 0077 13       		.uleb128 0x13
 11817 0078 00       		.byte	0
 11818 0079 03       		.uleb128 0x3
 11819 007a 0E       		.uleb128 0xe
 11820 007b 3C       		.uleb128 0x3c
 11821 007c 19       		.uleb128 0x19
 11822 007d 00       		.byte	0
 11823 007e 00       		.byte	0
 11824 007f 0C       		.uleb128 0xc
 11825 0080 0F       		.uleb128 0xf
 11826 0081 00       		.byte	0
 11827 0082 0B       		.uleb128 0xb
 11828 0083 0B       		.uleb128 0xb
 11829 0084 49       		.uleb128 0x49
 11830 0085 13       		.uleb128 0x13
 11831 0086 00       		.byte	0
 11832 0087 00       		.byte	0
 11833 0088 0D       		.uleb128 0xd
 11834 0089 13       		.uleb128 0x13
 11835 008a 01       		.byte	0x1
 11836 008b 03       		.uleb128 0x3
 11837 008c 0E       		.uleb128 0xe
 11838 008d 0B       		.uleb128 0xb
 11839 008e 0B       		.uleb128 0xb
 11840 008f 3A       		.uleb128 0x3a
 11841 0090 0B       		.uleb128 0xb
 11842 0091 3B       		.uleb128 0x3b
 11843 0092 0B       		.uleb128 0xb
 11844 0093 01       		.uleb128 0x1
 11845 0094 13       		.uleb128 0x13
 11846 0095 00       		.byte	0
 11847 0096 00       		.byte	0
 11848 0097 0E       		.uleb128 0xe
 11849 0098 0D       		.uleb128 0xd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 256


 11850 0099 00       		.byte	0
 11851 009a 03       		.uleb128 0x3
 11852 009b 08       		.uleb128 0x8
 11853 009c 3A       		.uleb128 0x3a
 11854 009d 0B       		.uleb128 0xb
 11855 009e 3B       		.uleb128 0x3b
 11856 009f 0B       		.uleb128 0xb
 11857 00a0 49       		.uleb128 0x49
 11858 00a1 13       		.uleb128 0x13
 11859 00a2 38       		.uleb128 0x38
 11860 00a3 0B       		.uleb128 0xb
 11861 00a4 00       		.byte	0
 11862 00a5 00       		.byte	0
 11863 00a6 0F       		.uleb128 0xf
 11864 00a7 0D       		.uleb128 0xd
 11865 00a8 00       		.byte	0
 11866 00a9 03       		.uleb128 0x3
 11867 00aa 0E       		.uleb128 0xe
 11868 00ab 3A       		.uleb128 0x3a
 11869 00ac 0B       		.uleb128 0xb
 11870 00ad 3B       		.uleb128 0x3b
 11871 00ae 0B       		.uleb128 0xb
 11872 00af 49       		.uleb128 0x49
 11873 00b0 13       		.uleb128 0x13
 11874 00b1 38       		.uleb128 0x38
 11875 00b2 0B       		.uleb128 0xb
 11876 00b3 00       		.byte	0
 11877 00b4 00       		.byte	0
 11878 00b5 10       		.uleb128 0x10
 11879 00b6 13       		.uleb128 0x13
 11880 00b7 01       		.byte	0x1
 11881 00b8 03       		.uleb128 0x3
 11882 00b9 0E       		.uleb128 0xe
 11883 00ba 0B       		.uleb128 0xb
 11884 00bb 0B       		.uleb128 0xb
 11885 00bc 3A       		.uleb128 0x3a
 11886 00bd 0B       		.uleb128 0xb
 11887 00be 3B       		.uleb128 0x3b
 11888 00bf 05       		.uleb128 0x5
 11889 00c0 01       		.uleb128 0x1
 11890 00c1 13       		.uleb128 0x13
 11891 00c2 00       		.byte	0
 11892 00c3 00       		.byte	0
 11893 00c4 11       		.uleb128 0x11
 11894 00c5 0D       		.uleb128 0xd
 11895 00c6 00       		.byte	0
 11896 00c7 03       		.uleb128 0x3
 11897 00c8 0E       		.uleb128 0xe
 11898 00c9 3A       		.uleb128 0x3a
 11899 00ca 0B       		.uleb128 0xb
 11900 00cb 3B       		.uleb128 0x3b
 11901 00cc 05       		.uleb128 0x5
 11902 00cd 49       		.uleb128 0x49
 11903 00ce 13       		.uleb128 0x13
 11904 00cf 38       		.uleb128 0x38
 11905 00d0 0B       		.uleb128 0xb
 11906 00d1 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 257


 11907 00d2 00       		.byte	0
 11908 00d3 12       		.uleb128 0x12
 11909 00d4 0D       		.uleb128 0xd
 11910 00d5 00       		.byte	0
 11911 00d6 03       		.uleb128 0x3
 11912 00d7 08       		.uleb128 0x8
 11913 00d8 3A       		.uleb128 0x3a
 11914 00d9 0B       		.uleb128 0xb
 11915 00da 3B       		.uleb128 0x3b
 11916 00db 05       		.uleb128 0x5
 11917 00dc 49       		.uleb128 0x49
 11918 00dd 13       		.uleb128 0x13
 11919 00de 38       		.uleb128 0x38
 11920 00df 0B       		.uleb128 0xb
 11921 00e0 00       		.byte	0
 11922 00e1 00       		.byte	0
 11923 00e2 13       		.uleb128 0x13
 11924 00e3 13       		.uleb128 0x13
 11925 00e4 01       		.byte	0x1
 11926 00e5 03       		.uleb128 0x3
 11927 00e6 0E       		.uleb128 0xe
 11928 00e7 0B       		.uleb128 0xb
 11929 00e8 05       		.uleb128 0x5
 11930 00e9 3A       		.uleb128 0x3a
 11931 00ea 0B       		.uleb128 0xb
 11932 00eb 3B       		.uleb128 0x3b
 11933 00ec 05       		.uleb128 0x5
 11934 00ed 01       		.uleb128 0x1
 11935 00ee 13       		.uleb128 0x13
 11936 00ef 00       		.byte	0
 11937 00f0 00       		.byte	0
 11938 00f1 14       		.uleb128 0x14
 11939 00f2 0D       		.uleb128 0xd
 11940 00f3 00       		.byte	0
 11941 00f4 03       		.uleb128 0x3
 11942 00f5 08       		.uleb128 0x8
 11943 00f6 3A       		.uleb128 0x3a
 11944 00f7 0B       		.uleb128 0xb
 11945 00f8 3B       		.uleb128 0x3b
 11946 00f9 05       		.uleb128 0x5
 11947 00fa 49       		.uleb128 0x49
 11948 00fb 13       		.uleb128 0x13
 11949 00fc 38       		.uleb128 0x38
 11950 00fd 05       		.uleb128 0x5
 11951 00fe 00       		.byte	0
 11952 00ff 00       		.byte	0
 11953 0100 15       		.uleb128 0x15
 11954 0101 0D       		.uleb128 0xd
 11955 0102 00       		.byte	0
 11956 0103 03       		.uleb128 0x3
 11957 0104 0E       		.uleb128 0xe
 11958 0105 3A       		.uleb128 0x3a
 11959 0106 0B       		.uleb128 0xb
 11960 0107 3B       		.uleb128 0x3b
 11961 0108 05       		.uleb128 0x5
 11962 0109 49       		.uleb128 0x49
 11963 010a 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 258


 11964 010b 38       		.uleb128 0x38
 11965 010c 05       		.uleb128 0x5
 11966 010d 00       		.byte	0
 11967 010e 00       		.byte	0
 11968 010f 16       		.uleb128 0x16
 11969 0110 04       		.uleb128 0x4
 11970 0111 01       		.byte	0x1
 11971 0112 0B       		.uleb128 0xb
 11972 0113 0B       		.uleb128 0xb
 11973 0114 49       		.uleb128 0x49
 11974 0115 13       		.uleb128 0x13
 11975 0116 3A       		.uleb128 0x3a
 11976 0117 0B       		.uleb128 0xb
 11977 0118 3B       		.uleb128 0x3b
 11978 0119 05       		.uleb128 0x5
 11979 011a 01       		.uleb128 0x1
 11980 011b 13       		.uleb128 0x13
 11981 011c 00       		.byte	0
 11982 011d 00       		.byte	0
 11983 011e 17       		.uleb128 0x17
 11984 011f 2E       		.uleb128 0x2e
 11985 0120 00       		.byte	0
 11986 0121 3F       		.uleb128 0x3f
 11987 0122 19       		.uleb128 0x19
 11988 0123 03       		.uleb128 0x3
 11989 0124 0E       		.uleb128 0xe
 11990 0125 3A       		.uleb128 0x3a
 11991 0126 0B       		.uleb128 0xb
 11992 0127 3B       		.uleb128 0x3b
 11993 0128 0B       		.uleb128 0xb
 11994 0129 27       		.uleb128 0x27
 11995 012a 19       		.uleb128 0x19
 11996 012b 11       		.uleb128 0x11
 11997 012c 01       		.uleb128 0x1
 11998 012d 12       		.uleb128 0x12
 11999 012e 06       		.uleb128 0x6
 12000 012f 40       		.uleb128 0x40
 12001 0130 18       		.uleb128 0x18
 12002 0131 9742     		.uleb128 0x2117
 12003 0133 19       		.uleb128 0x19
 12004 0134 00       		.byte	0
 12005 0135 00       		.byte	0
 12006 0136 18       		.uleb128 0x18
 12007 0137 2E       		.uleb128 0x2e
 12008 0138 01       		.byte	0x1
 12009 0139 3F       		.uleb128 0x3f
 12010 013a 19       		.uleb128 0x19
 12011 013b 03       		.uleb128 0x3
 12012 013c 0E       		.uleb128 0xe
 12013 013d 3A       		.uleb128 0x3a
 12014 013e 0B       		.uleb128 0xb
 12015 013f 3B       		.uleb128 0x3b
 12016 0140 0B       		.uleb128 0xb
 12017 0141 11       		.uleb128 0x11
 12018 0142 01       		.uleb128 0x1
 12019 0143 12       		.uleb128 0x12
 12020 0144 06       		.uleb128 0x6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 259


 12021 0145 40       		.uleb128 0x40
 12022 0146 18       		.uleb128 0x18
 12023 0147 9642     		.uleb128 0x2116
 12024 0149 19       		.uleb128 0x19
 12025 014a 01       		.uleb128 0x1
 12026 014b 13       		.uleb128 0x13
 12027 014c 00       		.byte	0
 12028 014d 00       		.byte	0
 12029 014e 19       		.uleb128 0x19
 12030 014f 34       		.uleb128 0x34
 12031 0150 00       		.byte	0
 12032 0151 03       		.uleb128 0x3
 12033 0152 0E       		.uleb128 0xe
 12034 0153 3A       		.uleb128 0x3a
 12035 0154 0B       		.uleb128 0xb
 12036 0155 3B       		.uleb128 0x3b
 12037 0156 0B       		.uleb128 0xb
 12038 0157 49       		.uleb128 0x49
 12039 0158 13       		.uleb128 0x13
 12040 0159 02       		.uleb128 0x2
 12041 015a 18       		.uleb128 0x18
 12042 015b 00       		.byte	0
 12043 015c 00       		.byte	0
 12044 015d 1A       		.uleb128 0x1a
 12045 015e 2E       		.uleb128 0x2e
 12046 015f 01       		.byte	0x1
 12047 0160 3F       		.uleb128 0x3f
 12048 0161 19       		.uleb128 0x19
 12049 0162 03       		.uleb128 0x3
 12050 0163 0E       		.uleb128 0xe
 12051 0164 3A       		.uleb128 0x3a
 12052 0165 0B       		.uleb128 0xb
 12053 0166 3B       		.uleb128 0x3b
 12054 0167 05       		.uleb128 0x5
 12055 0168 27       		.uleb128 0x27
 12056 0169 19       		.uleb128 0x19
 12057 016a 11       		.uleb128 0x11
 12058 016b 01       		.uleb128 0x1
 12059 016c 12       		.uleb128 0x12
 12060 016d 06       		.uleb128 0x6
 12061 016e 40       		.uleb128 0x40
 12062 016f 18       		.uleb128 0x18
 12063 0170 9642     		.uleb128 0x2116
 12064 0172 19       		.uleb128 0x19
 12065 0173 01       		.uleb128 0x1
 12066 0174 13       		.uleb128 0x13
 12067 0175 00       		.byte	0
 12068 0176 00       		.byte	0
 12069 0177 1B       		.uleb128 0x1b
 12070 0178 34       		.uleb128 0x34
 12071 0179 00       		.byte	0
 12072 017a 03       		.uleb128 0x3
 12073 017b 0E       		.uleb128 0xe
 12074 017c 3A       		.uleb128 0x3a
 12075 017d 0B       		.uleb128 0xb
 12076 017e 3B       		.uleb128 0x3b
 12077 017f 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 260


 12078 0180 49       		.uleb128 0x49
 12079 0181 13       		.uleb128 0x13
 12080 0182 02       		.uleb128 0x2
 12081 0183 18       		.uleb128 0x18
 12082 0184 00       		.byte	0
 12083 0185 00       		.byte	0
 12084 0186 1C       		.uleb128 0x1c
 12085 0187 0B       		.uleb128 0xb
 12086 0188 01       		.byte	0x1
 12087 0189 11       		.uleb128 0x11
 12088 018a 01       		.uleb128 0x1
 12089 018b 12       		.uleb128 0x12
 12090 018c 06       		.uleb128 0x6
 12091 018d 00       		.byte	0
 12092 018e 00       		.byte	0
 12093 018f 1D       		.uleb128 0x1d
 12094 0190 34       		.uleb128 0x34
 12095 0191 00       		.byte	0
 12096 0192 03       		.uleb128 0x3
 12097 0193 08       		.uleb128 0x8
 12098 0194 3A       		.uleb128 0x3a
 12099 0195 0B       		.uleb128 0xb
 12100 0196 3B       		.uleb128 0x3b
 12101 0197 05       		.uleb128 0x5
 12102 0198 49       		.uleb128 0x49
 12103 0199 13       		.uleb128 0x13
 12104 019a 02       		.uleb128 0x2
 12105 019b 18       		.uleb128 0x18
 12106 019c 00       		.byte	0
 12107 019d 00       		.byte	0
 12108 019e 1E       		.uleb128 0x1e
 12109 019f 21       		.uleb128 0x21
 12110 01a0 00       		.byte	0
 12111 01a1 49       		.uleb128 0x49
 12112 01a2 13       		.uleb128 0x13
 12113 01a3 2F       		.uleb128 0x2f
 12114 01a4 05       		.uleb128 0x5
 12115 01a5 00       		.byte	0
 12116 01a6 00       		.byte	0
 12117 01a7 1F       		.uleb128 0x1f
 12118 01a8 2E       		.uleb128 0x2e
 12119 01a9 01       		.byte	0x1
 12120 01aa 3F       		.uleb128 0x3f
 12121 01ab 19       		.uleb128 0x19
 12122 01ac 03       		.uleb128 0x3
 12123 01ad 0E       		.uleb128 0xe
 12124 01ae 3A       		.uleb128 0x3a
 12125 01af 0B       		.uleb128 0xb
 12126 01b0 3B       		.uleb128 0x3b
 12127 01b1 05       		.uleb128 0x5
 12128 01b2 11       		.uleb128 0x11
 12129 01b3 01       		.uleb128 0x1
 12130 01b4 12       		.uleb128 0x12
 12131 01b5 06       		.uleb128 0x6
 12132 01b6 40       		.uleb128 0x40
 12133 01b7 18       		.uleb128 0x18
 12134 01b8 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 261


 12135 01ba 19       		.uleb128 0x19
 12136 01bb 01       		.uleb128 0x1
 12137 01bc 13       		.uleb128 0x13
 12138 01bd 00       		.byte	0
 12139 01be 00       		.byte	0
 12140 01bf 20       		.uleb128 0x20
 12141 01c0 05       		.uleb128 0x5
 12142 01c1 00       		.byte	0
 12143 01c2 03       		.uleb128 0x3
 12144 01c3 08       		.uleb128 0x8
 12145 01c4 3A       		.uleb128 0x3a
 12146 01c5 0B       		.uleb128 0xb
 12147 01c6 3B       		.uleb128 0x3b
 12148 01c7 05       		.uleb128 0x5
 12149 01c8 49       		.uleb128 0x49
 12150 01c9 13       		.uleb128 0x13
 12151 01ca 02       		.uleb128 0x2
 12152 01cb 18       		.uleb128 0x18
 12153 01cc 00       		.byte	0
 12154 01cd 00       		.byte	0
 12155 01ce 21       		.uleb128 0x21
 12156 01cf 05       		.uleb128 0x5
 12157 01d0 00       		.byte	0
 12158 01d1 03       		.uleb128 0x3
 12159 01d2 0E       		.uleb128 0xe
 12160 01d3 3A       		.uleb128 0x3a
 12161 01d4 0B       		.uleb128 0xb
 12162 01d5 3B       		.uleb128 0x3b
 12163 01d6 05       		.uleb128 0x5
 12164 01d7 49       		.uleb128 0x49
 12165 01d8 13       		.uleb128 0x13
 12166 01d9 02       		.uleb128 0x2
 12167 01da 18       		.uleb128 0x18
 12168 01db 00       		.byte	0
 12169 01dc 00       		.byte	0
 12170 01dd 22       		.uleb128 0x22
 12171 01de 2E       		.uleb128 0x2e
 12172 01df 01       		.byte	0x1
 12173 01e0 3F       		.uleb128 0x3f
 12174 01e1 19       		.uleb128 0x19
 12175 01e2 03       		.uleb128 0x3
 12176 01e3 0E       		.uleb128 0xe
 12177 01e4 3A       		.uleb128 0x3a
 12178 01e5 0B       		.uleb128 0xb
 12179 01e6 3B       		.uleb128 0x3b
 12180 01e7 05       		.uleb128 0x5
 12181 01e8 11       		.uleb128 0x11
 12182 01e9 01       		.uleb128 0x1
 12183 01ea 12       		.uleb128 0x12
 12184 01eb 06       		.uleb128 0x6
 12185 01ec 40       		.uleb128 0x40
 12186 01ed 18       		.uleb128 0x18
 12187 01ee 9742     		.uleb128 0x2117
 12188 01f0 19       		.uleb128 0x19
 12189 01f1 01       		.uleb128 0x1
 12190 01f2 13       		.uleb128 0x13
 12191 01f3 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 262


 12192 01f4 00       		.byte	0
 12193 01f5 23       		.uleb128 0x23
 12194 01f6 2E       		.uleb128 0x2e
 12195 01f7 01       		.byte	0x1
 12196 01f8 3F       		.uleb128 0x3f
 12197 01f9 19       		.uleb128 0x19
 12198 01fa 03       		.uleb128 0x3
 12199 01fb 0E       		.uleb128 0xe
 12200 01fc 3A       		.uleb128 0x3a
 12201 01fd 0B       		.uleb128 0xb
 12202 01fe 3B       		.uleb128 0x3b
 12203 01ff 05       		.uleb128 0x5
 12204 0200 27       		.uleb128 0x27
 12205 0201 19       		.uleb128 0x19
 12206 0202 11       		.uleb128 0x11
 12207 0203 01       		.uleb128 0x1
 12208 0204 12       		.uleb128 0x12
 12209 0205 06       		.uleb128 0x6
 12210 0206 40       		.uleb128 0x40
 12211 0207 18       		.uleb128 0x18
 12212 0208 9742     		.uleb128 0x2117
 12213 020a 19       		.uleb128 0x19
 12214 020b 01       		.uleb128 0x1
 12215 020c 13       		.uleb128 0x13
 12216 020d 00       		.byte	0
 12217 020e 00       		.byte	0
 12218 020f 24       		.uleb128 0x24
 12219 0210 26       		.uleb128 0x26
 12220 0211 00       		.byte	0
 12221 0212 49       		.uleb128 0x49
 12222 0213 13       		.uleb128 0x13
 12223 0214 00       		.byte	0
 12224 0215 00       		.byte	0
 12225 0216 25       		.uleb128 0x25
 12226 0217 34       		.uleb128 0x34
 12227 0218 00       		.byte	0
 12228 0219 03       		.uleb128 0x3
 12229 021a 0E       		.uleb128 0xe
 12230 021b 3A       		.uleb128 0x3a
 12231 021c 0B       		.uleb128 0xb
 12232 021d 3B       		.uleb128 0x3b
 12233 021e 05       		.uleb128 0x5
 12234 021f 49       		.uleb128 0x49
 12235 0220 13       		.uleb128 0x13
 12236 0221 3F       		.uleb128 0x3f
 12237 0222 19       		.uleb128 0x19
 12238 0223 3C       		.uleb128 0x3c
 12239 0224 19       		.uleb128 0x19
 12240 0225 00       		.byte	0
 12241 0226 00       		.byte	0
 12242 0227 00       		.byte	0
 12243              		.section	.debug_aranges,"",%progbits
 12244 0000 74000000 		.4byte	0x74
 12245 0004 0200     		.2byte	0x2
 12246 0006 00000000 		.4byte	.Ldebug_info0
 12247 000a 04       		.byte	0x4
 12248 000b 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 263


 12249 000c 0000     		.2byte	0
 12250 000e 0000     		.2byte	0
 12251 0010 00000000 		.4byte	.LFB64
 12252 0014 18000000 		.4byte	.LFE64-.LFB64
 12253 0018 00000000 		.4byte	.LFB65
 12254 001c 20000000 		.4byte	.LFE65-.LFB65
 12255 0020 00000000 		.4byte	.LFB66
 12256 0024 0C020000 		.4byte	.LFE66-.LFB66
 12257 0028 00000000 		.4byte	.LFB67
 12258 002c DC050000 		.4byte	.LFE67-.LFB67
 12259 0030 00000000 		.4byte	.LFB68
 12260 0034 000B0000 		.4byte	.LFE68-.LFB68
 12261 0038 00000000 		.4byte	.LFB69
 12262 003c D40C0000 		.4byte	.LFE69-.LFB69
 12263 0040 00000000 		.4byte	.LFB70
 12264 0044 10080000 		.4byte	.LFE70-.LFB70
 12265 0048 00000000 		.4byte	.LFB71
 12266 004c F80D0000 		.4byte	.LFE71-.LFB71
 12267 0050 00000000 		.4byte	.LFB72
 12268 0054 F4000000 		.4byte	.LFE72-.LFB72
 12269 0058 00000000 		.4byte	.LFB73
 12270 005c 78000000 		.4byte	.LFE73-.LFB73
 12271 0060 00000000 		.4byte	.LFB74
 12272 0064 08040000 		.4byte	.LFE74-.LFB74
 12273 0068 00000000 		.4byte	.LFB75
 12274 006c 08010000 		.4byte	.LFE75-.LFB75
 12275 0070 00000000 		.4byte	0
 12276 0074 00000000 		.4byte	0
 12277              		.section	.debug_ranges,"",%progbits
 12278              	.Ldebug_ranges0:
 12279 0000 00000000 		.4byte	.LFB64
 12280 0004 18000000 		.4byte	.LFE64
 12281 0008 00000000 		.4byte	.LFB65
 12282 000c 20000000 		.4byte	.LFE65
 12283 0010 00000000 		.4byte	.LFB66
 12284 0014 0C020000 		.4byte	.LFE66
 12285 0018 00000000 		.4byte	.LFB67
 12286 001c DC050000 		.4byte	.LFE67
 12287 0020 00000000 		.4byte	.LFB68
 12288 0024 000B0000 		.4byte	.LFE68
 12289 0028 00000000 		.4byte	.LFB69
 12290 002c D40C0000 		.4byte	.LFE69
 12291 0030 00000000 		.4byte	.LFB70
 12292 0034 10080000 		.4byte	.LFE70
 12293 0038 00000000 		.4byte	.LFB71
 12294 003c F80D0000 		.4byte	.LFE71
 12295 0040 00000000 		.4byte	.LFB72
 12296 0044 F4000000 		.4byte	.LFE72
 12297 0048 00000000 		.4byte	.LFB73
 12298 004c 78000000 		.4byte	.LFE73
 12299 0050 00000000 		.4byte	.LFB74
 12300 0054 08040000 		.4byte	.LFE74
 12301 0058 00000000 		.4byte	.LFB75
 12302 005c 08010000 		.4byte	.LFE75
 12303 0060 00000000 		.4byte	0
 12304 0064 00000000 		.4byte	0
 12305              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 264


 12306              	.Ldebug_line0:
 12307 0000 8B0A0000 		.section	.debug_str,"MS",%progbits,1
 12307      0200AC01 
 12307      00000201 
 12307      FB0E0D00 
 12307      01010101 
 12308              	.LASF24:
 12309 0000 73697A65 		.ascii	"sizetype\000"
 12309      74797065 
 12309      00
 12310              	.LASF239:
 12311 0009 706F735F 		.ascii	"pos_cycle_status\000"
 12311      6379636C 
 12311      655F7374 
 12311      61747573 
 12311      00
 12312              	.LASF30:
 12313 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 12313      545F4D4F 
 12313      44455F45 
 12313      4D475F46 
 12313      4346535F 
 12314              	.LASF117:
 12315 0032 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 12315      5F414443 
 12315      5F73656E 
 12315      736F7273 
 12315      5F706F72 
 12316              	.LASF138:
 12317 004d 75736572 		.ascii	"user\000"
 12317      00
 12318              	.LASF10:
 12319 0052 696E7433 		.ascii	"int32_t\000"
 12319      325F7400 
 12320              	.LASF273:
 12321 005a 675F7278 		.ascii	"g_rx\000"
 12321      00
 12322              	.LASF220:
 12323 005f 6F6E655F 		.ascii	"one_time_execute\000"
 12323      74696D65 
 12323      5F657865 
 12323      63757465 
 12323      00
 12324              	.LASF49:
 12325 0070 73745F64 		.ascii	"st_data\000"
 12325      61746100 
 12326              	.LASF270:
 12327 0078 675F656D 		.ascii	"g_emg_meas\000"
 12327      675F6D65 
 12327      617300
 12328              	.LASF13:
 12329 0083 75696E74 		.ascii	"uint32\000"
 12329      333200
 12330              	.LASF205:
 12331 008a 6E5F6C69 		.ascii	"n_line\000"
 12331      6E6500
 12332              	.LASF85:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 265


 12333 0091 706F735F 		.ascii	"pos_lim_inf\000"
 12333      6C696D5F 
 12333      696E6600 
 12334              	.LASF294:
 12335 009d 74656E73 		.ascii	"tension_valid\000"
 12335      696F6E5F 
 12335      76616C69 
 12335      6400
 12336              	.LASF169:
 12337 00ab 73746174 		.ascii	"state\000"
 12337      6500
 12338              	.LASF296:
 12339 00b1 6379636C 		.ascii	"cycles_interrupt_flag\000"
 12339      65735F69 
 12339      6E746572 
 12339      72757074 
 12339      5F666C61 
 12340              	.LASF246:
 12341 00c7 62696E5F 		.ascii	"bin_max\000"
 12341      6D617800 
 12342              	.LASF260:
 12343 00cf 61646472 		.ascii	"addr_start_c\000"
 12343      5F737461 
 12343      72745F63 
 12343      00
 12344              	.LASF29:
 12345 00dc 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 12345      545F4D4F 
 12345      44455F45 
 12345      4D475F46 
 12345      43465300 
 12346              	.LASF89:
 12347 00f0 63757272 		.ascii	"curr_lookup\000"
 12347      5F6C6F6F 
 12347      6B757000 
 12348              	.LASF184:
 12349 00fc 70776D5F 		.ascii	"pwm_input\000"
 12349      696E7075 
 12349      7400
 12350              	.LASF57:
 12351 0106 72657374 		.ascii	"rest_counter\000"
 12351      5F636F75 
 12351      6E746572 
 12351      00
 12352              	.LASF127:
 12353 0113 73745F4D 		.ascii	"st_MASTER_spec\000"
 12353      41535445 
 12353      525F7370 
 12353      656300
 12354              	.LASF28:
 12355 0122 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 12355      545F4D4F 
 12355      44455F45 
 12355      4D475F49 
 12355      4E544547 
 12356              	.LASF232:
 12357 013a 765F636F 		.ascii	"v_count\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 266


 12357      756E7400 
 12358              	.LASF174:
 12359 0142 72785F64 		.ascii	"rx_data\000"
 12359      61746100 
 12360              	.LASF225:
 12361 014a 7676765F 		.ascii	"vvv_value\000"
 12361      76616C75 
 12361      6500
 12362              	.LASF14:
 12363 0154 696E7438 		.ascii	"int8\000"
 12363      00
 12364              	.LASF179:
 12365 0159 696E666F 		.ascii	"info_\000"
 12365      5F00
 12366              	.LASF160:
 12367 015f 656D675F 		.ascii	"emg_status\000"
 12367      73746174 
 12367      757300
 12368              	.LASF281:
 12369 016a 66696C74 		.ascii	"filt_emg\000"
 12369      5F656D67 
 12369      00
 12370              	.LASF104:
 12371 0173 73745F65 		.ascii	"st_emg\000"
 12371      6D6700
 12372              	.LASF55:
 12373 017a 706F7369 		.ascii	"position_hist\000"
 12373      74696F6E 
 12373      5F686973 
 12373      7400
 12374              	.LASF161:
 12375 0188 50524550 		.ascii	"PREPARE_DATA\000"
 12375      4152455F 
 12375      44415441 
 12375      00
 12376              	.LASF145:
 12377 0195 74656D70 		.ascii	"temp_value\000"
 12377      5F76616C 
 12377      756500
 12378              	.LASF243:
 12379 01a0 7468725F 		.ascii	"thr_pos\000"
 12379      706F7300 
 12380              	.LASF52:
 12381 01a8 72656164 		.ascii	"ready\000"
 12381      7900
 12382              	.LASF101:
 12383 01ae 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 12383      6964785F 
 12383      7573655F 
 12383      666F725F 
 12383      636F6E74 
 12384              	.LASF148:
 12385 01c6 6761696E 		.ascii	"gain\000"
 12385      00
 12386              	.LASF61:
 12387 01cb 73745F64 		.ascii	"st_device\000"
 12387      65766963 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 267


 12387      6500
 12388              	.LASF27:
 12389 01d5 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 12389      545F4D4F 
 12389      44455F45 
 12389      4D475F50 
 12389      524F504F 
 12390              	.LASF66:
 12391 01f1 7573655F 		.ascii	"use_2nd_motor_flag\000"
 12391      326E645F 
 12391      6D6F746F 
 12391      725F666C 
 12391      616700
 12392              	.LASF157:
 12393 0204 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 12393      414E445F 
 12393      4D45414E 
 12393      00
 12394              	.LASF111:
 12395 0211 72656164 		.ascii	"read_imu_flag\000"
 12395      5F696D75 
 12395      5F666C61 
 12395      6700
 12396              	.LASF230:
 12397 021f 66697273 		.ascii	"first_tension_valid\000"
 12397      745F7465 
 12397      6E73696F 
 12397      6E5F7661 
 12397      6C696400 
 12398              	.LASF282:
 12399 0233 74696D65 		.ascii	"timer_value\000"
 12399      725F7661 
 12399      6C756500 
 12400              	.LASF4:
 12401 023f 6C6F6E67 		.ascii	"long int\000"
 12401      20696E74 
 12401      00
 12402              	.LASF136:
 12403 0248 756E7573 		.ascii	"unused_bytes1\000"
 12403      65645F62 
 12403      79746573 
 12403      3100
 12404              	.LASF192:
 12405 0256 53485F45 		.ascii	"SH_ENC_L\000"
 12405      4E435F4C 
 12405      00
 12406              	.LASF65:
 12407 025f 72657365 		.ascii	"reset_counters\000"
 12407      745F636F 
 12407      756E7465 
 12407      727300
 12408              	.LASF242:
 12409 026e 62696E5F 		.ascii	"bin_threshold\000"
 12409      74687265 
 12409      73686F6C 
 12409      6400
 12410              	.LASF121:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 268


 12411 027c 75736572 		.ascii	"user_emg\000"
 12411      5F656D67 
 12411      00
 12412              	.LASF219:
 12413 0285 73616665 		.ascii	"safe_startup_motor_activation\000"
 12413      5F737461 
 12413      72747570 
 12413      5F6D6F74 
 12413      6F725F61 
 12414              	.LASF70:
 12415 02a3 756E7573 		.ascii	"unused_bytes\000"
 12415      65645F62 
 12415      79746573 
 12415      00
 12416              	.LASF141:
 12417 02b0 61636365 		.ascii	"accel_value\000"
 12417      6C5F7661 
 12417      6C756500 
 12418              	.LASF208:
 12419 02bc 6175785F 		.ascii	"aux_encoder\000"
 12419      656E636F 
 12419      64657200 
 12420              	.LASF53:
 12421 02c8 73745F63 		.ascii	"st_counters\000"
 12421      6F756E74 
 12421      65727300 
 12422              	.LASF191:
 12423 02d4 53485F4D 		.ascii	"SH_MOT\000"
 12423      4F5400
 12424              	.LASF17:
 12425 02db 666C6F61 		.ascii	"float32\000"
 12425      74333200 
 12426              	.LASF204:
 12427 02e3 656E636F 		.ascii	"encoder_reading_SPI\000"
 12427      6465725F 
 12427      72656164 
 12427      696E675F 
 12427      53504900 
 12428              	.LASF217:
 12429 02f7 6572726F 		.ascii	"error\000"
 12429      7200
 12430              	.LASF54:
 12431 02fd 656D675F 		.ascii	"emg_counter\000"
 12431      636F756E 
 12431      74657200 
 12432              	.LASF164:
 12433 0309 57524954 		.ascii	"WRITE_END\000"
 12433      455F454E 
 12433      4400
 12434              	.LASF222:
 12435 0313 706F735F 		.ascii	"pos_reconstruct\000"
 12435      7265636F 
 12435      6E737472 
 12435      75637400 
 12436              	.LASF234:
 12437 0323 70776D5F 		.ascii	"pwm_limit_search\000"
 12437      6C696D69 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 269


 12437      745F7365 
 12437      61726368 
 12437      00
 12438              	.LASF0:
 12439 0334 7369676E 		.ascii	"signed char\000"
 12439      65642063 
 12439      68617200 
 12440              	.LASF120:
 12441 0340 75736572 		.ascii	"user_code_string\000"
 12441      5F636F64 
 12441      655F7374 
 12441      72696E67 
 12441      00
 12442              	.LASF149:
 12443 0351 73745F63 		.ascii	"st_calib\000"
 12443      616C6962 
 12443      00
 12444              	.LASF189:
 12445 035a 6572725F 		.ascii	"err_emg_1\000"
 12445      656D675F 
 12445      3100
 12446              	.LASF190:
 12447 0364 6572725F 		.ascii	"err_emg_2\000"
 12447      656D675F 
 12447      3200
 12448              	.LASF109:
 12449 036e 73776974 		.ascii	"switch_emg\000"
 12449      63685F65 
 12449      6D6700
 12450              	.LASF292:
 12451 0379 656D675F 		.ascii	"emg_2_status\000"
 12451      325F7374 
 12451      61747573 
 12451      00
 12452              	.LASF302:
 12453 0386 4144435F 		.ascii	"ADC_buf\000"
 12453      62756600 
 12454              	.LASF295:
 12455 038e 696E7465 		.ascii	"interrupt_flag\000"
 12455      72727570 
 12455      745F666C 
 12455      616700
 12456              	.LASF252:
 12457 039d 73746570 		.ascii	"step\000"
 12457      00
 12458              	.LASF194:
 12459 03a2 63757272 		.ascii	"curr_error_sum\000"
 12459      5F657272 
 12459      6F725F73 
 12459      756D00
 12460              	.LASF1:
 12461 03b1 756E7369 		.ascii	"unsigned char\000"
 12461      676E6564 
 12461      20636861 
 12461      7200
 12462              	.LASF95:
 12463 03bf 6E6F745F 		.ascii	"not_revers_motor_flag\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 270


 12463      72657665 
 12463      72735F6D 
 12463      6F746F72 
 12463      5F666C61 
 12464              	.LASF258:
 12465 03d5 726F775F 		.ascii	"row_start\000"
 12465      73746172 
 12465      7400
 12466              	.LASF299:
 12467 03df 666F7263 		.ascii	"forced_open\000"
 12467      65645F6F 
 12467      70656E00 
 12468              	.LASF212:
 12469 03eb 73706565 		.ascii	"speed_encoder\000"
 12469      645F656E 
 12469      636F6465 
 12469      7200
 12470              	.LASF266:
 12471 03f9 675F7265 		.ascii	"g_refNew\000"
 12471      664E6577 
 12471      00
 12472              	.LASF250:
 12473 0402 63757272 		.ascii	"curr_off\000"
 12473      5F6F6666 
 12473      00
 12474              	.LASF64:
 12475 040b 72696768 		.ascii	"right_left\000"
 12475      745F6C65 
 12475      667400
 12476              	.LASF93:
 12477 0416 656E636F 		.ascii	"encoder_line\000"
 12477      6465725F 
 12477      6C696E65 
 12477      00
 12478              	.LASF291:
 12479 0423 656D675F 		.ascii	"emg_1_status\000"
 12479      315F7374 
 12479      61747573 
 12479      00
 12480              	.LASF140:
 12481 0430 666C6167 		.ascii	"flags\000"
 12481      7300
 12482              	.LASF188:
 12483 0436 68616E64 		.ascii	"handle_value\000"
 12483      6C655F76 
 12483      616C7565 
 12483      00
 12484              	.LASF48:
 12485 0443 70726573 		.ascii	"pressure\000"
 12485      73757265 
 12485      00
 12486              	.LASF20:
 12487 044c 63686172 		.ascii	"char\000"
 12487      00
 12488              	.LASF88:
 12489 0451 6D61785F 		.ascii	"max_step_pos\000"
 12489      73746570 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 271


 12489      5F706F73 
 12489      00
 12490              	.LASF304:
 12491 045e 70776D5F 		.ascii	"pwm_sign\000"
 12491      7369676E 
 12491      00
 12492              	.LASF202:
 12493 0467 6D6F746F 		.ascii	"motor_control_generic\000"
 12493      725F636F 
 12493      6E74726F 
 12493      6C5F6765 
 12493      6E657269 
 12494              	.LASF280:
 12495 047d 66696C74 		.ascii	"filt_vel\000"
 12495      5F76656C 
 12495      00
 12496              	.LASF94:
 12497 0486 70776D5F 		.ascii	"pwm_rate_limiter\000"
 12497      72617465 
 12497      5F6C696D 
 12497      69746572 
 12497      00
 12498              	.LASF74:
 12499 0497 6B5F645F 		.ascii	"k_d_c\000"
 12499      6300
 12500              	.LASF47:
 12501 049d 73745F66 		.ascii	"st_fb_meas\000"
 12501      625F6D65 
 12501      617300
 12502              	.LASF99:
 12503 04a8 6D5F6D75 		.ascii	"m_mult\000"
 12503      6C7400
 12504              	.LASF73:
 12505 04af 6B5F695F 		.ascii	"k_i_c\000"
 12505      6300
 12506              	.LASF198:
 12507 04b5 6D6F746F 		.ascii	"motor_dir\000"
 12507      725F6469 
 12507      7200
 12508              	.LASF245:
 12509 04bf 62696E5F 		.ascii	"bin_st\000"
 12509      737400
 12510              	.LASF167:
 12511 04c6 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 12511      52533438 
 12511      355F5258 
 12511      5F457849 
 12511      6E746572 
 12512              	.LASF86:
 12513 04df 706F735F 		.ascii	"pos_lim_sup\000"
 12513      6C696D5F 
 12513      73757000 
 12514              	.LASF147:
 12515 04eb 6F6C645F 		.ascii	"old_value\000"
 12515      76616C75 
 12515      6500
 12516              	.LASF107:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 272


 12517 04f5 656D675F 		.ascii	"emg_speed\000"
 12517      73706565 
 12517      6400
 12518              	.LASF125:
 12519 04ff 72657374 		.ascii	"rest_vel\000"
 12519      5F76656C 
 12519      00
 12520              	.LASF154:
 12521 0508 4E4F524D 		.ascii	"NORMAL\000"
 12521      414C00
 12522              	.LASF183:
 12523 050f 6D6F746F 		.ascii	"motor_control_SH\000"
 12523      725F636F 
 12523      6E74726F 
 12523      6C5F5348 
 12523      00
 12524              	.LASF310:
 12525 0520 7046696C 		.ascii	"pFile\000"
 12525      6500
 12526              	.LASF193:
 12527 0526 706F735F 		.ascii	"pos_error_sum\000"
 12527      6572726F 
 12527      725F7375 
 12527      6D00
 12528              	.LASF118:
 12529 0534 4144435F 		.ascii	"ADC_conf\000"
 12529      636F6E66 
 12529      00
 12530              	.LASF288:
 12531 053d 6465765F 		.ascii	"dev_tension_f\000"
 12531      74656E73 
 12531      696F6E5F 
 12531      6600
 12532              	.LASF76:
 12533 054b 6B5F695F 		.ascii	"k_i_dl\000"
 12533      646C00
 12534              	.LASF50:
 12535 0552 62756666 		.ascii	"buffer\000"
 12535      657200
 12536              	.LASF78:
 12537 0559 6B5F705F 		.ascii	"k_p_c_dl\000"
 12537      635F646C 
 12537      00
 12538              	.LASF175:
 12539 0562 72785F64 		.ascii	"rx_data_type\000"
 12539      6174615F 
 12539      74797065 
 12539      00
 12540              	.LASF312:
 12541 056f 675F696D 		.ascii	"g_imuNew\000"
 12541      754E6577 
 12541      00
 12542              	.LASF152:
 12543 0578 73706565 		.ascii	"speed\000"
 12543      6400
 12544              	.LASF199:
 12545 057e 706F7369 		.ascii	"position_counter\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 273


 12545      74696F6E 
 12545      5F636F75 
 12545      6E746572 
 12545      00
 12546              	.LASF254:
 12547 058f 74696D65 		.ascii	"timer_value_e\000"
 12547      725F7661 
 12547      6C75655F 
 12547      6500
 12548              	.LASF170:
 12549 059d 64617461 		.ascii	"data_packet_index\000"
 12549      5F706163 
 12549      6B65745F 
 12549      696E6465 
 12549      7800
 12550              	.LASF172:
 12551 05af 64617461 		.ascii	"data_packet_buffer\000"
 12551      5F706163 
 12551      6B65745F 
 12551      62756666 
 12551      657200
 12552              	.LASF290:
 12553 05c2 6379636C 		.ascii	"cycles_status\000"
 12553      65735F73 
 12553      74617475 
 12553      7300
 12554              	.LASF177:
 12555 05d0 636F756E 		.ascii	"counter_calibration\000"
 12555      7465725F 
 12555      63616C69 
 12555      62726174 
 12555      696F6E00 
 12556              	.LASF268:
 12557 05e4 675F6D65 		.ascii	"g_meas\000"
 12557      617300
 12558              	.LASF253:
 12559 05eb 74696D65 		.ascii	"timer_value_s\000"
 12559      725F7661 
 12559      6C75655F 
 12559      7300
 12560              	.LASF308:
 12561 05f9 456E636F 		.ascii	"Encoder_Check\000"
 12561      6465725F 
 12561      43686563 
 12561      6B00
 12562              	.LASF216:
 12563 0607 636F6D70 		.ascii	"comp_value_encoder\000"
 12563      5F76616C 
 12563      75655F65 
 12563      6E636F64 
 12563      657200
 12564              	.LASF305:
 12565 061a 64617461 		.ascii	"data_encoder_raw\000"
 12565      5F656E63 
 12565      6F646572 
 12565      5F726177 
 12565      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 274


 12566              	.LASF265:
 12567 062b 675F7265 		.ascii	"g_ref\000"
 12567      6600
 12568              	.LASF25:
 12569 0631 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 12569      545F4D4F 
 12569      44455F45 
 12569      58544552 
 12569      4E414C00 
 12570              	.LASF207:
 12571 0645 696E6465 		.ascii	"index\000"
 12571      7800
 12572              	.LASF132:
 12573 064b 6D617869 		.ascii	"maximum_pressure_kPa\000"
 12573      6D756D5F 
 12573      70726573 
 12573      73757265 
 12573      5F6B5061 
 12574              	.LASF126:
 12575 0660 72657374 		.ascii	"rest_position_flag\000"
 12575      5F706F73 
 12575      6974696F 
 12575      6E5F666C 
 12575      616700
 12576              	.LASF311:
 12577 0673 675F696D 		.ascii	"g_imu\000"
 12577      7500
 12578              	.LASF79:
 12579 0679 6B5F695F 		.ascii	"k_i_c_dl\000"
 12579      635F646C 
 12579      00
 12580              	.LASF316:
 12581 0682 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 12581      73657273 
 12581      5C4D6174 
 12581      7469615C 
 12581      446F6375 
 12582 06b0 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Air_Chambers_Haptic_Feedback.c"
 12582      656E6572 
 12582      69632D46 
 12582      572D5053 
 12582      6F43355C 
 12583 06e2 7964736E 		.ascii	"ydsn\000"
 12583      00
 12584              	.LASF176:
 12585 06e7 7061636B 		.ascii	"package_count\000"
 12585      6167655F 
 12585      636F756E 
 12585      7400
 12586              	.LASF37:
 12587 06f5 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 12587      5F414E44 
 12587      5F504F53 
 12587      5F434F4E 
 12587      54524F4C 
 12588              	.LASF150:
 12589 070a 656E6162 		.ascii	"enabled\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 275


 12589      6C656400 
 12590              	.LASF5:
 12591 0712 6C6F6E67 		.ascii	"long unsigned int\000"
 12591      20756E73 
 12591      69676E65 
 12591      6420696E 
 12591      7400
 12592              	.LASF59:
 12593 0724 746F7461 		.ascii	"total_time_on\000"
 12593      6C5F7469 
 12593      6D655F6F 
 12593      6E00
 12594              	.LASF162:
 12595 0732 57524954 		.ascii	"WRITE_CYCLES\000"
 12595      455F4359 
 12595      434C4553 
 12595      00
 12596              	.LASF44:
 12597 073f 686F6C64 		.ascii	"hold_curr\000"
 12597      5F637572 
 12597      7200
 12598              	.LASF60:
 12599 0749 746F7461 		.ascii	"total_time_rest\000"
 12599      6C5F7469 
 12599      6D655F72 
 12599      65737400 
 12600              	.LASF81:
 12601 0759 61637469 		.ascii	"activ\000"
 12601      7600
 12602              	.LASF237:
 12603 075f 6D696E5F 		.ascii	"min_tension\000"
 12603      74656E73 
 12603      696F6E00 
 12604              	.LASF300:
 12605 076b 62617474 		.ascii	"battery_low_SoC\000"
 12605      6572795F 
 12605      6C6F775F 
 12605      536F4300 
 12606              	.LASF98:
 12607 077b 6D5F6F66 		.ascii	"m_off\000"
 12607      6600
 12608              	.LASF293:
 12609 0781 72657365 		.ascii	"reset_last_value_flag\000"
 12609      745F6C61 
 12609      73745F76 
 12609      616C7565 
 12609      5F666C61 
 12610              	.LASF144:
 12611 0797 71756174 		.ascii	"quat_value\000"
 12611      5F76616C 
 12611      756500
 12612              	.LASF123:
 12613 07a2 72657374 		.ascii	"rest_pos\000"
 12613      5F706F73 
 12613      00
 12614              	.LASF39:
 12615 07ab 63757272 		.ascii	"curr\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 276


 12615      00
 12616              	.LASF163:
 12617 07b0 57414954 		.ascii	"WAIT_QUERY\000"
 12617      5F515545 
 12617      525900
 12618              	.LASF91:
 12619 07bb 696E7075 		.ascii	"input_mode\000"
 12619      745F6D6F 
 12619      646500
 12620              	.LASF35:
 12621 07c6 434F4E54 		.ascii	"CONTROL_PWM\000"
 12621      524F4C5F 
 12621      50574D00 
 12622              	.LASF238:
 12623 07d2 6379636C 		.ascii	"cycles_counter_update\000"
 12623      65735F63 
 12623      6F756E74 
 12623      65725F75 
 12623      70646174 
 12624              	.LASF314:
 12625 07e8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12625      43313120 
 12625      352E342E 
 12625      31203230 
 12625      31363036 
 12626 081b 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 12626      20726576 
 12626      6973696F 
 12626      6E203233 
 12626      37373135 
 12627 084e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 12627      66756E63 
 12627      74696F6E 
 12627      2D736563 
 12627      74696F6E 
 12628              	.LASF41:
 12629 0876 73745F72 		.ascii	"st_ref\000"
 12629      656600
 12630              	.LASF283:
 12631 087d 74696D65 		.ascii	"timer_value0\000"
 12631      725F7661 
 12631      6C756530 
 12631      00
 12632              	.LASF122:
 12633 088a 73745F53 		.ascii	"st_SH_spec\000"
 12633      485F7370 
 12633      656300
 12634              	.LASF223:
 12635 0895 765F7661 		.ascii	"v_value\000"
 12635      6C756500 
 12636              	.LASF276:
 12637 089d 63616C69 		.ascii	"calib\000"
 12637      6200
 12638              	.LASF130:
 12639 08a3 73745F46 		.ascii	"st_FB_spec\000"
 12639      425F7370 
 12639      656300
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 277


 12640              	.LASF6:
 12641 08ae 6C6F6E67 		.ascii	"long long int\000"
 12641      206C6F6E 
 12641      6720696E 
 12641      7400
 12642              	.LASF33:
 12643 08bc 53485F63 		.ascii	"SH_control_mode\000"
 12643      6F6E7472 
 12643      6F6C5F6D 
 12643      6F646500 
 12644              	.LASF181:
 12645 08cc 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 12645      4E445F4D 
 12645      4F544F52 
 12645      5F494458 
 12645      00
 12646              	.LASF301:
 12647 08dd 6368616E 		.ascii	"change_ext_ref_flag\000"
 12647      67655F65 
 12647      78745F72 
 12647      65665F66 
 12647      6C616700 
 12648              	.LASF19:
 12649 08f1 646F7562 		.ascii	"double\000"
 12649      6C6500
 12650              	.LASF278:
 12651 08f8 66696C74 		.ascii	"filt_curr_diff\000"
 12651      5F637572 
 12651      725F6469 
 12651      666600
 12652              	.LASF182:
 12653 0907 696E7465 		.ascii	"interrupt_manager\000"
 12653      72727570 
 12653      745F6D61 
 12653      6E616765 
 12653      7200
 12654              	.LASF97:
 12655 0919 456E635F 		.ascii	"Enc_raw_read_conf\000"
 12655      7261775F 
 12655      72656164 
 12655      5F636F6E 
 12655      6600
 12656              	.LASF153:
 12657 092b 72657065 		.ascii	"repetitions\000"
 12657      74697469 
 12657      6F6E7300 
 12658              	.LASF87:
 12659 0937 6D61785F 		.ascii	"max_step_neg\000"
 12659      73746570 
 12659      5F6E6567 
 12659      00
 12660              	.LASF221:
 12661 0944 636F756E 		.ascii	"count_startup_motor\000"
 12661      745F7374 
 12661      61727475 
 12661      705F6D6F 
 12661      746F7200 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 278


 12662              	.LASF129:
 12663 0958 736C6176 		.ascii	"slave_ID\000"
 12663      655F4944 
 12663      00
 12664              	.LASF158:
 12665 0961 57414954 		.ascii	"WAIT\000"
 12665      00
 12666              	.LASF18:
 12667 0966 666C6F61 		.ascii	"float\000"
 12667      7400
 12668              	.LASF113:
 12669 096c 494D555F 		.ascii	"IMU_conf\000"
 12669      636F6E66 
 12669      00
 12670              	.LASF231:
 12671 0975 636F756E 		.ascii	"count\000"
 12671      7400
 12672              	.LASF71:
 12673 097b 73745F6D 		.ascii	"st_motor\000"
 12673      6F746F72 
 12673      00
 12674              	.LASF262:
 12675 0984 6D5F6164 		.ascii	"m_addr\000"
 12675      647200
 12676              	.LASF275:
 12677 098b 635F6D65 		.ascii	"c_mem\000"
 12677      6D00
 12678              	.LASF8:
 12679 0991 756E7369 		.ascii	"unsigned int\000"
 12679      676E6564 
 12679      20696E74 
 12679      00
 12680              	.LASF244:
 12681 099e 6D61785F 		.ascii	"max_pos\000"
 12681      706F7300 
 12682              	.LASF309:
 12683 09a6 72657374 		.ascii	"rest_pos_curr_ref\000"
 12683      5F706F73 
 12683      5F637572 
 12683      725F7265 
 12683      6600
 12684              	.LASF135:
 12685 09b8 666C6167 		.ascii	"flag\000"
 12685      00
 12686              	.LASF92:
 12687 09bd 636F6E74 		.ascii	"control_mode\000"
 12687      726F6C5F 
 12687      6D6F6465 
 12687      00
 12688              	.LASF21:
 12689 09ca 63797374 		.ascii	"cystatus\000"
 12689      61747573 
 12689      00
 12690              	.LASF26:
 12691 09d3 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 12691      545F4D4F 
 12691      44455F45 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 279


 12691      4E434F44 
 12691      45523300 
 12692              	.LASF110:
 12693 09e7 73745F69 		.ascii	"st_imu\000"
 12693      6D7500
 12694              	.LASF200:
 12695 09ee 63757272 		.ascii	"current_emg\000"
 12695      656E745F 
 12695      656D6700 
 12696              	.LASF173:
 12697 09fa 72785F71 		.ascii	"rx_queue\000"
 12697      75657565 
 12697      00
 12698              	.LASF206:
 12699 0a03 6173736F 		.ascii	"assoc_motor\000"
 12699      635F6D6F 
 12699      746F7200 
 12700              	.LASF46:
 12701 0a0f 6164645F 		.ascii	"add_emg\000"
 12701      656D6700 
 12702              	.LASF187:
 12703 0a17 695F7265 		.ascii	"i_ref\000"
 12703      6600
 12704              	.LASF105:
 12705 0a1d 656D675F 		.ascii	"emg_threshold\000"
 12705      74687265 
 12705      73686F6C 
 12705      6400
 12706              	.LASF255:
 12707 0a2b 73617665 		.ascii	"save_cycles_eeprom\000"
 12707      5F637963 
 12707      6C65735F 
 12707      65657072 
 12707      6F6D00
 12708              	.LASF56:
 12709 0a3e 63757272 		.ascii	"current_hist\000"
 12709      656E745F 
 12709      68697374 
 12709      00
 12710              	.LASF36:
 12711 0a4b 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 12711      524F4C5F 
 12711      43555252 
 12711      454E5400 
 12712              	.LASF23:
 12713 0a5b 6C6F6E67 		.ascii	"long double\000"
 12713      20646F75 
 12713      626C6500 
 12714              	.LASF156:
 12715 0a67 44495343 		.ascii	"DISCARD\000"
 12715      41524400 
 12716              	.LASF195:
 12717 0a6f 70726576 		.ascii	"prev_pos_err\000"
 12717      5F706F73 
 12717      5F657272 
 12717      00
 12718              	.LASF214:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 280


 12719 0a7c 696E6974 		.ascii	"init_rot\000"
 12719      5F726F74 
 12719      00
 12720              	.LASF235:
 12721 0a85 6D6F745F 		.ascii	"mot_idx\000"
 12721      69647800 
 12722              	.LASF45:
 12723 0a8d 73745F65 		.ascii	"st_emg_meas\000"
 12723      6D675F6D 
 12723      65617300 
 12724              	.LASF279:
 12725 0a99 66696C74 		.ascii	"filt_i\000"
 12725      5F6900
 12726              	.LASF102:
 12727 0aa0 6D6F746F 		.ascii	"motor_handle_ratio\000"
 12727      725F6861 
 12727      6E646C65 
 12727      5F726174 
 12727      696F00
 12728              	.LASF277:
 12729 0ab3 66696C74 		.ascii	"filt_v\000"
 12729      5F7600
 12730              	.LASF298:
 12731 0aba 72657374 		.ascii	"rest_enabled\000"
 12731      5F656E61 
 12731      626C6564 
 12731      00
 12732              	.LASF267:
 12733 0ac7 675F7265 		.ascii	"g_refOld\000"
 12733      664F6C64 
 12733      00
 12734              	.LASF185:
 12735 0ad0 706F735F 		.ascii	"pos_error\000"
 12735      6572726F 
 12735      7200
 12736              	.LASF142:
 12737 0ada 6779726F 		.ascii	"gyro_value\000"
 12737      5F76616C 
 12737      756500
 12738              	.LASF115:
 12739 0ae5 63757272 		.ascii	"curr_time\000"
 12739      5F74696D 
 12739      6500
 12740              	.LASF100:
 12741 0aef 646F7562 		.ascii	"double_encoder_on_off\000"
 12741      6C655F65 
 12741      6E636F64 
 12741      65725F6F 
 12741      6E5F6F66 
 12742              	.LASF236:
 12743 0b05 6D61785F 		.ascii	"max_tension\000"
 12743      74656E73 
 12743      696F6E00 
 12744              	.LASF180:
 12745 0b11 4D4F544F 		.ascii	"MOTOR_IDX\000"
 12745      525F4944 
 12745      5800
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 281


 12746              	.LASF215:
 12747 0b1b 6C617374 		.ascii	"last_value_encoder\000"
 12747      5F76616C 
 12747      75655F65 
 12747      6E636F64 
 12747      657200
 12748              	.LASF178:
 12749 0b2e 636F756E 		.ascii	"counter_tension_func\000"
 12749      7465725F 
 12749      74656E73 
 12749      696F6E5F 
 12749      66756E63 
 12750              	.LASF284:
 12751 0b43 6379636C 		.ascii	"cycle_time\000"
 12751      655F7469 
 12751      6D6500
 12752              	.LASF7:
 12753 0b4e 6C6F6E67 		.ascii	"long long unsigned int\000"
 12753      206C6F6E 
 12753      6720756E 
 12753      7369676E 
 12753      65642069 
 12754              	.LASF51:
 12755 0b65 6C656E67 		.ascii	"length\000"
 12755      746800
 12756              	.LASF139:
 12757 0b6c 73745F69 		.ascii	"st_imu_data\000"
 12757      6D755F64 
 12757      61746100 
 12758              	.LASF143:
 12759 0b78 6D61675F 		.ascii	"mag_value\000"
 12759      76616C75 
 12759      6500
 12760              	.LASF40:
 12761 0b82 6F6E6F66 		.ascii	"onoff\000"
 12761      6600
 12762              	.LASF210:
 12763 0b88 746D705F 		.ascii	"tmp_value_encoder_32\000"
 12763      76616C75 
 12763      655F656E 
 12763      636F6465 
 12763      725F3332 
 12764              	.LASF196:
 12765 0b9d 70726576 		.ascii	"prev_curr_err\000"
 12765      5F637572 
 12765      725F6572 
 12765      7200
 12766              	.LASF171:
 12767 0bab 64617461 		.ascii	"data_packet_length\000"
 12767      5F706163 
 12767      6B65745F 
 12767      6C656E67 
 12767      746800
 12768              	.LASF72:
 12769 0bbe 6B5F705F 		.ascii	"k_p_c\000"
 12769      6300
 12770              	.LASF285:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 282


 12771 0bc4 6465765F 		.ascii	"dev_tension\000"
 12771      74656E73 
 12771      696F6E00 
 12772              	.LASF83:
 12773 0bd0 6D6F746F 		.ascii	"motor_driver_type\000"
 12773      725F6472 
 12773      69766572 
 12773      5F747970 
 12773      6500
 12774              	.LASF159:
 12775 0be2 57414954 		.ascii	"WAIT_EoC\000"
 12775      5F456F43 
 12775      00
 12776              	.LASF22:
 12777 0beb 72656738 		.ascii	"reg8\000"
 12777      00
 12778              	.LASF247:
 12779 0bf0 62696E5F 		.ascii	"bin_1\000"
 12779      3100
 12780              	.LASF248:
 12781 0bf6 62696E5F 		.ascii	"bin_2\000"
 12781      3200
 12782              	.LASF227:
 12783 0bfc 695F6175 		.ascii	"i_aux\000"
 12783      7800
 12784              	.LASF133:
 12785 0c02 70726F70 		.ascii	"prop_err_fb_gain\000"
 12785      5F657272 
 12785      5F66625F 
 12785      6761696E 
 12785      00
 12786              	.LASF257:
 12787 0c13 726F775F 		.ascii	"row_number\000"
 12787      6E756D62 
 12787      657200
 12788              	.LASF233:
 12789 0c1e 6F766572 		.ascii	"overcurrent_control\000"
 12789      63757272 
 12789      656E745F 
 12789      636F6E74 
 12789      726F6C00 
 12790              	.LASF249:
 12791 0c32 63757272 		.ascii	"curr_pos\000"
 12791      5F706F73 
 12791      00
 12792              	.LASF155:
 12793 0c3b 52455345 		.ascii	"RESET\000"
 12793      5400
 12794              	.LASF128:
 12795 0c41 736C6176 		.ascii	"slave_comm_active\000"
 12795      655F636F 
 12795      6D6D5F61 
 12795      63746976 
 12795      6500
 12796              	.LASF226:
 12797 0c53 616E616C 		.ascii	"analog_read_end\000"
 12797      6F675F72 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 283


 12797      6561645F 
 12797      656E6400 
 12798              	.LASF306:
 12799 0c63 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 12799      636F6465 
 12799      725F4C69 
 12799      6E655F43 
 12799      6F6E6E65 
 12800              	.LASF69:
 12801 0c7c 6465765F 		.ascii	"dev_type\000"
 12801      74797065 
 12801      00
 12802              	.LASF240:
 12803 0c85 656D675F 		.ascii	"emg_cycle_status\000"
 12803      6379636C 
 12803      655F7374 
 12803      61747573 
 12803      00
 12804              	.LASF119:
 12805 0c96 73745F75 		.ascii	"st_user\000"
 12805      73657200 
 12806              	.LASF103:
 12807 0c9e 67656172 		.ascii	"gears_params\000"
 12807      735F7061 
 12807      72616D73 
 12807      00
 12808              	.LASF114:
 12809 0cab 73745F65 		.ascii	"st_expansion\000"
 12809      7870616E 
 12809      73696F6E 
 12809      00
 12810              	.LASF108:
 12811 0cb8 656D675F 		.ascii	"emg_calibration_flag\000"
 12811      63616C69 
 12811      62726174 
 12811      696F6E5F 
 12811      666C6167 
 12812              	.LASF42:
 12813 0ccd 73745F6D 		.ascii	"st_meas\000"
 12813      65617300 
 12814              	.LASF259:
 12815 0cd5 61646472 		.ascii	"addr_start\000"
 12815      5F737461 
 12815      727400
 12816              	.LASF263:
 12817 0ce0 70776D5F 		.ascii	"pwm_preload_values\000"
 12817      7072656C 
 12817      6F61645F 
 12817      76616C75 
 12817      657300
 12818              	.LASF31:
 12819 0cf3 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 12819      545F4D4F 
 12819      44455F45 
 12819      4D475F50 
 12819      524F504F 
 12820              	.LASF272:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 284


 12821 0d12 675F6662 		.ascii	"g_fb_meas\000"
 12821      5F6D6561 
 12821      7300
 12822              	.LASF166:
 12823 0d1c 636F756E 		.ascii	"counter_status\000"
 12823      7465725F 
 12823      73746174 
 12823      757300
 12824              	.LASF274:
 12825 0d2b 675F6D65 		.ascii	"g_mem\000"
 12825      6D00
 12826              	.LASF228:
 12827 0d31 656D675F 		.ascii	"emg_counter_1\000"
 12827      636F756E 
 12827      7465725F 
 12827      3100
 12828              	.LASF229:
 12829 0d3f 656D675F 		.ascii	"emg_counter_2\000"
 12829      636F756E 
 12829      7465725F 
 12829      3200
 12830              	.LASF218:
 12831 0d4d 6F6E6C79 		.ascii	"only_first_time\000"
 12831      5F666972 
 12831      73745F74 
 12831      696D6500 
 12832              	.LASF11:
 12833 0d5d 75696E74 		.ascii	"uint8\000"
 12833      3800
 12834              	.LASF213:
 12835 0d63 76616C75 		.ascii	"value_diff\000"
 12835      655F6469 
 12835      666600
 12836              	.LASF251:
 12837 0d6e 63757272 		.ascii	"curr_ref\000"
 12837      5F726566 
 12837      00
 12838              	.LASF2:
 12839 0d77 73686F72 		.ascii	"short int\000"
 12839      7420696E 
 12839      7400
 12840              	.LASF77:
 12841 0d81 6B5F645F 		.ascii	"k_d_dl\000"
 12841      646C00
 12842              	.LASF211:
 12843 0d88 76616C75 		.ascii	"value_encoder\000"
 12843      655F656E 
 12843      636F6465 
 12843      7200
 12844              	.LASF137:
 12845 0d96 6D6F746F 		.ascii	"motor\000"
 12845      7200
 12846              	.LASF287:
 12847 0d9c 6465765F 		.ascii	"dev_pwm_sat\000"
 12847      70776D5F 
 12847      73617400 
 12848              	.LASF62:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 285


 12849 0da8 68775F6D 		.ascii	"hw_maint_date\000"
 12849      61696E74 
 12849      5F646174 
 12849      6500
 12850              	.LASF201:
 12851 0db6 66756E63 		.ascii	"function_scheduler\000"
 12851      74696F6E 
 12851      5F736368 
 12851      6564756C 
 12851      657200
 12852              	.LASF197:
 12853 0dc9 70726576 		.ascii	"prev_pwm\000"
 12853      5F70776D 
 12853      00
 12854              	.LASF63:
 12855 0dd2 73746174 		.ascii	"stats_period_begin_date\000"
 12855      735F7065 
 12855      72696F64 
 12855      5F626567 
 12855      696E5F64 
 12856              	.LASF264:
 12857 0dea 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12857      52784275 
 12857      66666572 
 12857      00
 12858              	.LASF289:
 12859 0df7 706F775F 		.ascii	"pow_tension\000"
 12859      74656E73 
 12859      696F6E00 
 12860              	.LASF15:
 12861 0e03 696E7431 		.ascii	"int16\000"
 12861      3600
 12862              	.LASF116:
 12863 0e09 72656164 		.ascii	"read_exp_port_flag\000"
 12863      5F657870 
 12863      5F706F72 
 12863      745F666C 
 12863      616700
 12864              	.LASF82:
 12865 0e1c 61637469 		.ascii	"activate_pwm_rescaling\000"
 12865      76617465 
 12865      5F70776D 
 12865      5F726573 
 12865      63616C69 
 12866              	.LASF75:
 12867 0e33 6B5F705F 		.ascii	"k_p_dl\000"
 12867      646C00
 12868              	.LASF43:
 12869 0e3a 65737469 		.ascii	"estim_curr\000"
 12869      6D5F6375 
 12869      727200
 12870              	.LASF286:
 12871 0e45 6465765F 		.ascii	"dev_pwm_limit\000"
 12871      70776D5F 
 12871      6C696D69 
 12871      7400
 12872              	.LASF256:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 286


 12873 0e53 73746174 		.ascii	"status\000"
 12873      757300
 12874              	.LASF186:
 12875 0e5a 63757272 		.ascii	"curr_error\000"
 12875      5F657272 
 12875      6F7200
 12876              	.LASF307:
 12877 0e65 456E636F 		.ascii	"Encoder_Value\000"
 12877      6465725F 
 12877      56616C75 
 12877      6500
 12878              	.LASF68:
 12879 0e73 75736572 		.ascii	"user_id\000"
 12879      5F696400 
 12880              	.LASF241:
 12881 0e7b 72657374 		.ascii	"rest_cycle_status\000"
 12881      5F637963 
 12881      6C655F73 
 12881      74617475 
 12881      7300
 12882              	.LASF209:
 12883 0e8d 746D705F 		.ascii	"tmp_value_encoder\000"
 12883      76616C75 
 12883      655F656E 
 12883      636F6465 
 12883      7200
 12884              	.LASF168:
 12885 0e9f 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 12885      4359434C 
 12885      45535F48 
 12885      616E646C 
 12885      657200
 12886              	.LASF67:
 12887 0eb2 62617564 		.ascii	"baud_rate\000"
 12887      5F726174 
 12887      6500
 12888              	.LASF112:
 12889 0ebc 5350495F 		.ascii	"SPI_read_delay\000"
 12889      72656164 
 12889      5F64656C 
 12889      617900
 12890              	.LASF3:
 12891 0ecb 73686F72 		.ascii	"short unsigned int\000"
 12891      7420756E 
 12891      7369676E 
 12891      65642069 
 12891      6E7400
 12892              	.LASF96:
 12893 0ede 73745F65 		.ascii	"st_encoder\000"
 12893      6E636F64 
 12893      657200
 12894              	.LASF131:
 12895 0ee9 6D61785F 		.ascii	"max_residual_current\000"
 12895      72657369 
 12895      6475616C 
 12895      5F637572 
 12895      72656E74 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 287


 12896              	.LASF203:
 12897 0efe 454E435F 		.ascii	"ENC_L\000"
 12897      4C00
 12898              	.LASF134:
 12899 0f04 73745F65 		.ascii	"st_eeprom\000"
 12899      6570726F 
 12899      6D00
 12900              	.LASF315:
 12901 0f0e 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 12901      72635C69 
 12901      6E746572 
 12901      72757074 
 12901      696F6E73 
 12902              	.LASF16:
 12903 0f25 696E7433 		.ascii	"int32\000"
 12903      3200
 12904              	.LASF303:
 12905 0f2b 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 12905      4F465F41 
 12905      4E414C4F 
 12905      475F494E 
 12905      50555453 
 12906              	.LASF313:
 12907 0f40 6D617374 		.ascii	"master_mode\000"
 12907      65725F6D 
 12907      6F646500 
 12908              	.LASF38:
 12909 0f4c 46535F46 		.ascii	"FS_FILE\000"
 12909      494C4500 
 12910              	.LASF84:
 12911 0f54 706F735F 		.ascii	"pos_lim_flag\000"
 12911      6C696D5F 
 12911      666C6167 
 12911      00
 12912              	.LASF269:
 12913 0f61 675F6D65 		.ascii	"g_measOld\000"
 12913      61734F6C 
 12913      6400
 12914              	.LASF261:
 12915 0f6b 726F775F 		.ascii	"row_end\000"
 12915      656E6400 
 12916              	.LASF34:
 12917 0f73 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 12917      524F4C5F 
 12917      414E474C 
 12917      4500
 12918              	.LASF9:
 12919 0f81 5F5F696E 		.ascii	"__int32_t\000"
 12919      7433325F 
 12919      7400
 12920              	.LASF58:
 12921 0f8b 77697265 		.ascii	"wire_disp\000"
 12921      5F646973 
 12921      7000
 12922              	.LASF297:
 12923 0f95 63616E5F 		.ascii	"can_write\000"
 12923      77726974 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccUxgIpk.s 			page 288


 12923      6500
 12924              	.LASF106:
 12925 0f9f 656D675F 		.ascii	"emg_max_value\000"
 12925      6D61785F 
 12925      76616C75 
 12925      6500
 12926              	.LASF90:
 12927 0fad 63757272 		.ascii	"current_limit\000"
 12927      656E745F 
 12927      6C696D69 
 12927      7400
 12928              	.LASF32:
 12929 0fbb 53485F69 		.ascii	"SH_input_mode\000"
 12929      6E707574 
 12929      5F6D6F64 
 12929      6500
 12930              	.LASF165:
 12931 0fc9 4E4F4E45 		.ascii	"NONE\000"
 12931      00
 12932              	.LASF12:
 12933 0fce 75696E74 		.ascii	"uint16\000"
 12933      313600
 12934              	.LASF271:
 12935 0fd5 675F656D 		.ascii	"g_emg_measOld\000"
 12935      675F6D65 
 12935      61734F6C 
 12935      6400
 12936              	.LASF124:
 12937 0fe3 72657374 		.ascii	"rest_delay\000"
 12937      5F64656C 
 12937      617900
 12938              	.LASF146:
 12939 0fee 73745F66 		.ascii	"st_filter\000"
 12939      696C7465 
 12939      7200
 12940              	.LASF224:
 12941 0ff8 76765F76 		.ascii	"vv_value\000"
 12941      616C7565 
 12941      00
 12942              	.LASF80:
 12943 1001 6B5F645F 		.ascii	"k_d_c_dl\000"
 12943      635F646C 
 12943      00
 12944              	.LASF151:
 12945 100a 64697265 		.ascii	"direction\000"
 12945      6374696F 
 12945      6E00
 12946              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
