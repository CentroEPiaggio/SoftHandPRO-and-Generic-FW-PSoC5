ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SPI_ENCODER.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	SPI_ENCODER_rxBuffer,20,4
  20              		.comm	SPI_ENCODER_rxBufferFull,1,1
  21              		.comm	SPI_ENCODER_rxBufferRead,1,1
  22              		.comm	SPI_ENCODER_rxBufferWrite,1,1
  23              		.global	SPI_ENCODER_initVar
  24              		.bss
  25              		.type	SPI_ENCODER_initVar, %object
  26              		.size	SPI_ENCODER_initVar, 1
  27              	SPI_ENCODER_initVar:
  28 0000 00       		.space	1
  29              		.comm	SPI_ENCODER_swStatusTx,1,1
  30              		.comm	SPI_ENCODER_swStatusRx,1,1
  31              		.section	.text.SPI_ENCODER_Init,"ax",%progbits
  32              		.align	2
  33              		.global	SPI_ENCODER_Init
  34              		.thumb
  35              		.thumb_func
  36              		.type	SPI_ENCODER_Init, %function
  37              	SPI_ENCODER_Init:
  38              	.LFB0:
  39              		.file 1 "Generated_Source\\PSoC5\\SPI_ENCODER.c"
   1:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/SPI_ENCODER.c **** * File Name: SPI_ENCODER.c
   3:Generated_Source\PSoC5/SPI_ENCODER.c **** * Version 2.50
   4:Generated_Source\PSoC5/SPI_ENCODER.c **** *
   5:Generated_Source\PSoC5/SPI_ENCODER.c **** * Description:
   6:Generated_Source\PSoC5/SPI_ENCODER.c **** *  This file provides all API functionality of the SPI Master component.
   7:Generated_Source\PSoC5/SPI_ENCODER.c **** *
   8:Generated_Source\PSoC5/SPI_ENCODER.c **** * Note:
   9:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
  10:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  11:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
  12:Generated_Source\PSoC5/SPI_ENCODER.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/SPI_ENCODER.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/SPI_ENCODER.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/SPI_ENCODER.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  18:Generated_Source\PSoC5/SPI_ENCODER.c **** #include "SPI_ENCODER_PVT.h"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 2


  19:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  20:Generated_Source\PSoC5/SPI_ENCODER.c **** #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
  21:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint16 SPI_ENCODER_txBuffer[SPI_ENCODER_TX_BUFFER_SIZE];
  22:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_txBufferFull;
  23:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_txBufferRead;
  24:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_txBufferWrite;
  25:Generated_Source\PSoC5/SPI_ENCODER.c **** #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
  26:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  27:Generated_Source\PSoC5/SPI_ENCODER.c **** #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
  28:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint16 SPI_ENCODER_rxBuffer[SPI_ENCODER_RX_BUFFER_SIZE];
  29:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_rxBufferFull;
  30:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_rxBufferRead;
  31:Generated_Source\PSoC5/SPI_ENCODER.c ****     volatile uint8 SPI_ENCODER_rxBufferWrite;
  32:Generated_Source\PSoC5/SPI_ENCODER.c **** #endif /* (SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
  33:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  34:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8 SPI_ENCODER_initVar = 0u;
  35:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  36:Generated_Source\PSoC5/SPI_ENCODER.c **** volatile uint8 SPI_ENCODER_swStatusTx;
  37:Generated_Source\PSoC5/SPI_ENCODER.c **** volatile uint8 SPI_ENCODER_swStatusRx;
  38:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  39:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  40:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_Init
  42:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
  43:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  44:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
  45:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Inits/Restores default SPIM configuration provided with customizer.
  46:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  47:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
  48:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
  49:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  50:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
  51:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
  52:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  53:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
  54:Generated_Source\PSoC5/SPI_ENCODER.c **** *  When this function is called it initializes all of the necessary parameters
  55:Generated_Source\PSoC5/SPI_ENCODER.c **** *  for execution. i.e. setting the initial interrupt mask, configuring the
  56:Generated_Source\PSoC5/SPI_ENCODER.c **** *  interrupt service routine, configuring the bit-counter parameters and
  57:Generated_Source\PSoC5/SPI_ENCODER.c **** *  clearing the FIFO and Status Register.
  58:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  59:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
  60:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
  61:Generated_Source\PSoC5/SPI_ENCODER.c **** *
  62:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
  63:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_Init(void) 
  64:Generated_Source\PSoC5/SPI_ENCODER.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 0
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Initialize the Bit counter */
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 3


  66:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_COUNTER_PERIOD_REG = SPI_ENCODER_BITCTR_INIT;
  50              		.loc 1 66 0
  51 0004 124B     		ldr	r3, .L2
  52 0006 1F22     		movs	r2, #31
  53 0008 1A70     		strb	r2, [r3]
  67:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  68:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Init TX ISR  */
  69:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED)
  70:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntDisable         (SPI_ENCODER_TX_ISR_NUMBER);
  71:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntSetPriority     (SPI_ENCODER_TX_ISR_NUMBER,  SPI_ENCODER_TX_ISR_PRIORITY);
  72:Generated_Source\PSoC5/SPI_ENCODER.c ****         (void) CyIntSetVector(SPI_ENCODER_TX_ISR_NUMBER, &SPI_ENCODER_TX_ISR);
  73:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED) */
  74:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  75:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Init RX ISR  */
  76:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED)
  77:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntDisable         (SPI_ENCODER_RX_ISR_NUMBER);
  54              		.loc 1 77 0
  55 000a 124B     		ldr	r3, .L2+4
  56 000c 0422     		movs	r2, #4
  57 000e 1A60     		str	r2, [r3]
  78:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntSetPriority     (SPI_ENCODER_RX_ISR_NUMBER,  SPI_ENCODER_RX_ISR_PRIORITY);
  58              		.loc 1 78 0
  59 0010 0721     		movs	r1, #7
  60 0012 0220     		movs	r0, #2
  61 0014 FFF7FEFF 		bl	CyIntSetPriority
  79:Generated_Source\PSoC5/SPI_ENCODER.c ****         (void) CyIntSetVector(SPI_ENCODER_RX_ISR_NUMBER, &SPI_ENCODER_RX_ISR);
  62              		.loc 1 79 0
  63 0018 0F49     		ldr	r1, .L2+8
  64 001a 0220     		movs	r0, #2
  65 001c FFF7FEFF 		bl	CyIntSetVector
  80:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED) */
  81:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  82:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Clear any stray data from the RX and TX FIFO */
  83:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_ClearFIFO();
  66              		.loc 1 83 0
  67 0020 FFF7FEFF 		bl	SPI_ENCODER_ClearFIFO
  84:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  85:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
  86:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferFull  = 0u;
  68              		.loc 1 86 0
  69 0024 0D4B     		ldr	r3, .L2+12
  70 0026 0022     		movs	r2, #0
  71 0028 1A70     		strb	r2, [r3]
  87:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferRead  = 0u;
  72              		.loc 1 87 0
  73 002a 0D4B     		ldr	r3, .L2+16
  74 002c 0022     		movs	r2, #0
  75 002e 1A70     		strb	r2, [r3]
  88:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferWrite = 0u;
  76              		.loc 1 88 0
  77 0030 0C4B     		ldr	r3, .L2+20
  78 0032 0022     		movs	r2, #0
  79 0034 1A70     		strb	r2, [r3]
  89:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
  90:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  91:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
  92:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferFull  = 0u;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 4


  93:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferRead  = 0u;
  94:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferWrite = 0u;
  95:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
  96:Generated_Source\PSoC5/SPI_ENCODER.c **** 
  97:Generated_Source\PSoC5/SPI_ENCODER.c ****     (void) SPI_ENCODER_ReadTxStatus(); /* Clear Tx status and swStatusTx */
  80              		.loc 1 97 0
  81 0036 FFF7FEFF 		bl	SPI_ENCODER_ReadTxStatus
  98:Generated_Source\PSoC5/SPI_ENCODER.c ****     (void) SPI_ENCODER_ReadRxStatus(); /* Clear Rx status and swStatusRx */
  82              		.loc 1 98 0
  83 003a FFF7FEFF 		bl	SPI_ENCODER_ReadRxStatus
  99:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 100:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Configure TX and RX interrupt mask */
 101:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_TX_STATUS_MASK_REG = SPI_ENCODER_TX_INIT_INTERRUPTS_MASK;
  84              		.loc 1 101 0
  85 003e 0A4B     		ldr	r3, .L2+24
  86 0040 0022     		movs	r2, #0
  87 0042 1A70     		strb	r2, [r3]
 102:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_RX_STATUS_MASK_REG = SPI_ENCODER_RX_INIT_INTERRUPTS_MASK;
  88              		.loc 1 102 0
  89 0044 094B     		ldr	r3, .L2+28
  90 0046 2022     		movs	r2, #32
  91 0048 1A70     		strb	r2, [r3]
 103:Generated_Source\PSoC5/SPI_ENCODER.c **** }
  92              		.loc 1 103 0
  93 004a 00BF     		nop
  94 004c 80BD     		pop	{r7, pc}
  95              	.L3:
  96 004e 00BF     		.align	2
  97              	.L2:
  98 0050 8E640040 		.word	1073767566
  99 0054 80E100E0 		.word	-536813184
 100 0058 00000000 		.word	SPI_ENCODER_RX_ISR
 101 005c 00000000 		.word	SPI_ENCODER_rxBufferFull
 102 0060 00000000 		.word	SPI_ENCODER_rxBufferRead
 103 0064 00000000 		.word	SPI_ENCODER_rxBufferWrite
 104 0068 8F640040 		.word	1073767567
 105 006c 8C640040 		.word	1073767564
 106              		.cfi_endproc
 107              	.LFE0:
 108              		.size	SPI_ENCODER_Init, .-SPI_ENCODER_Init
 109              		.section	.text.SPI_ENCODER_Enable,"ax",%progbits
 110              		.align	2
 111              		.global	SPI_ENCODER_Enable
 112              		.thumb
 113              		.thumb_func
 114              		.type	SPI_ENCODER_Enable, %function
 115              	SPI_ENCODER_Enable:
 116              	.LFB1:
 104:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 105:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 106:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 107:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_Enable
 108:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 109:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 110:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 111:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable SPIM component.
 112:Generated_Source\PSoC5/SPI_ENCODER.c **** *
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 5


 113:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 114:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 115:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 116:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 117:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 118:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 119:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 120:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_Enable(void) 
 121:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 117              		.loc 1 121 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121 0000 80B5     		push	{r7, lr}
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 82B0     		sub	sp, sp, #8
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              		.cfi_def_cfa_register 7
 122:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 enableInterrupts;
 123:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 124:Generated_Source\PSoC5/SPI_ENCODER.c ****     enableInterrupts = CyEnterCriticalSection();
 129              		.loc 1 124 0
 130 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 131 000a 0346     		mov	r3, r0
 132 000c FB71     		strb	r3, [r7, #7]
 125:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_COUNTER_CONTROL_REG |= SPI_ENCODER_CNTR_ENABLE;
 133              		.loc 1 125 0
 134 000e 124A     		ldr	r2, .L5
 135 0010 114B     		ldr	r3, .L5
 136 0012 1B78     		ldrb	r3, [r3]
 137 0014 DBB2     		uxtb	r3, r3
 138 0016 43F02003 		orr	r3, r3, #32
 139 001a DBB2     		uxtb	r3, r3
 140 001c 1370     		strb	r3, [r2]
 126:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_TX_STATUS_ACTL_REG  |= SPI_ENCODER_INT_ENABLE;
 141              		.loc 1 126 0
 142 001e 0F4A     		ldr	r2, .L5+4
 143 0020 0E4B     		ldr	r3, .L5+4
 144 0022 1B78     		ldrb	r3, [r3]
 145 0024 DBB2     		uxtb	r3, r3
 146 0026 43F01003 		orr	r3, r3, #16
 147 002a DBB2     		uxtb	r3, r3
 148 002c 1370     		strb	r3, [r2]
 127:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_RX_STATUS_ACTL_REG  |= SPI_ENCODER_INT_ENABLE;
 149              		.loc 1 127 0
 150 002e 0C4A     		ldr	r2, .L5+8
 151 0030 0B4B     		ldr	r3, .L5+8
 152 0032 1B78     		ldrb	r3, [r3]
 153 0034 DBB2     		uxtb	r3, r3
 154 0036 43F01003 		orr	r3, r3, #16
 155 003a DBB2     		uxtb	r3, r3
 156 003c 1370     		strb	r3, [r2]
 128:Generated_Source\PSoC5/SPI_ENCODER.c ****     CyExitCriticalSection(enableInterrupts);
 157              		.loc 1 128 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 6


 158 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 159 0040 1846     		mov	r0, r3
 160 0042 FFF7FEFF 		bl	CyExitCriticalSection
 129:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 130:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_CLOCK)
 131:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_IntClock_Enable();
 132:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_CLOCK) */
 133:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 134:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_EnableTxInt();
 161              		.loc 1 134 0
 162 0046 FFF7FEFF 		bl	SPI_ENCODER_EnableTxInt
 135:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_EnableRxInt();
 163              		.loc 1 135 0
 164 004a FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
 136:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 165              		.loc 1 136 0
 166 004e 00BF     		nop
 167 0050 0837     		adds	r7, r7, #8
 168              		.cfi_def_cfa_offset 8
 169 0052 BD46     		mov	sp, r7
 170              		.cfi_def_cfa_register 13
 171              		@ sp needed
 172 0054 80BD     		pop	{r7, pc}
 173              	.L6:
 174 0056 00BF     		.align	2
 175              	.L5:
 176 0058 9E640040 		.word	1073767582
 177 005c 9F640040 		.word	1073767583
 178 0060 9C640040 		.word	1073767580
 179              		.cfi_endproc
 180              	.LFE1:
 181              		.size	SPI_ENCODER_Enable, .-SPI_ENCODER_Enable
 182              		.section	.text.SPI_ENCODER_Start,"ax",%progbits
 183              		.align	2
 184              		.global	SPI_ENCODER_Start
 185              		.thumb
 186              		.thumb_func
 187              		.type	SPI_ENCODER_Start, %function
 188              	SPI_ENCODER_Start:
 189              	.LFB2:
 137:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 138:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 139:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 140:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_Start
 141:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 142:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 143:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 144:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Initialize and Enable the SPI Master component.
 145:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 146:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 147:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 148:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 149:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 150:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 151:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 152:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 153:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_initVar - used to check initial configuration, modified on
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 7


 154:Generated_Source\PSoC5/SPI_ENCODER.c **** *  first function call.
 155:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 156:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 157:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable the clock input to enable operation.
 158:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 159:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 160:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 161:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 162:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 163:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_Start(void) 
 164:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 190              		.loc 1 164 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 00AF     		add	r7, sp, #0
 199              		.cfi_def_cfa_register 7
 165:Generated_Source\PSoC5/SPI_ENCODER.c ****     if(0u == SPI_ENCODER_initVar)
 200              		.loc 1 165 0
 201 0004 064B     		ldr	r3, .L9
 202 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 203 0008 002B     		cmp	r3, #0
 204 000a 04D1     		bne	.L8
 166:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 167:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_Init();
 205              		.loc 1 167 0
 206 000c FFF7FEFF 		bl	SPI_ENCODER_Init
 168:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_initVar = 1u;
 207              		.loc 1 168 0
 208 0010 034B     		ldr	r3, .L9
 209 0012 0122     		movs	r2, #1
 210 0014 1A70     		strb	r2, [r3]
 211              	.L8:
 169:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
 170:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 171:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_Enable();
 212              		.loc 1 171 0
 213 0016 FFF7FEFF 		bl	SPI_ENCODER_Enable
 172:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 214              		.loc 1 172 0
 215 001a 00BF     		nop
 216 001c 80BD     		pop	{r7, pc}
 217              	.L10:
 218 001e 00BF     		.align	2
 219              	.L9:
 220 0020 00000000 		.word	SPI_ENCODER_initVar
 221              		.cfi_endproc
 222              	.LFE2:
 223              		.size	SPI_ENCODER_Start, .-SPI_ENCODER_Start
 224              		.section	.text.SPI_ENCODER_Stop,"ax",%progbits
 225              		.align	2
 226              		.global	SPI_ENCODER_Stop
 227              		.thumb
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 8


 228              		.thumb_func
 229              		.type	SPI_ENCODER_Stop, %function
 230              	SPI_ENCODER_Stop:
 231              	.LFB3:
 173:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 174:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 175:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_Stop
 177:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 178:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 179:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 180:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable the SPI Master component.
 181:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 182:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 183:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 184:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 185:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 186:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 187:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 188:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 189:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable the clock input to enable operation.
 190:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 191:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 192:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_Stop(void) 
 193:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 232              		.loc 1 193 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 8
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              		.cfi_def_cfa_offset 8
 238              		.cfi_offset 7, -8
 239              		.cfi_offset 14, -4
 240 0002 82B0     		sub	sp, sp, #8
 241              		.cfi_def_cfa_offset 16
 242 0004 00AF     		add	r7, sp, #0
 243              		.cfi_def_cfa_register 7
 194:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 enableInterrupts;
 195:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 196:Generated_Source\PSoC5/SPI_ENCODER.c ****     enableInterrupts = CyEnterCriticalSection();
 244              		.loc 1 196 0
 245 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 246 000a 0346     		mov	r3, r0
 247 000c FB71     		strb	r3, [r7, #7]
 197:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_TX_STATUS_ACTL_REG &= ((uint8) ~SPI_ENCODER_INT_ENABLE);
 248              		.loc 1 197 0
 249 000e 0E4A     		ldr	r2, .L12
 250 0010 0D4B     		ldr	r3, .L12
 251 0012 1B78     		ldrb	r3, [r3]
 252 0014 DBB2     		uxtb	r3, r3
 253 0016 23F01003 		bic	r3, r3, #16
 254 001a DBB2     		uxtb	r3, r3
 255 001c 1370     		strb	r3, [r2]
 198:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_RX_STATUS_ACTL_REG &= ((uint8) ~SPI_ENCODER_INT_ENABLE);
 256              		.loc 1 198 0
 257 001e 0B4A     		ldr	r2, .L12+4
 258 0020 0A4B     		ldr	r3, .L12+4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 9


 259 0022 1B78     		ldrb	r3, [r3]
 260 0024 DBB2     		uxtb	r3, r3
 261 0026 23F01003 		bic	r3, r3, #16
 262 002a DBB2     		uxtb	r3, r3
 263 002c 1370     		strb	r3, [r2]
 199:Generated_Source\PSoC5/SPI_ENCODER.c ****     CyExitCriticalSection(enableInterrupts);
 264              		.loc 1 199 0
 265 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 266 0030 1846     		mov	r0, r3
 267 0032 FFF7FEFF 		bl	CyExitCriticalSection
 200:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 201:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_CLOCK)
 202:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_IntClock_Disable();
 203:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_CLOCK) */
 204:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 205:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_DisableTxInt();
 268              		.loc 1 205 0
 269 0036 FFF7FEFF 		bl	SPI_ENCODER_DisableTxInt
 206:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_DisableRxInt();
 270              		.loc 1 206 0
 271 003a FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
 207:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 272              		.loc 1 207 0
 273 003e 00BF     		nop
 274 0040 0837     		adds	r7, r7, #8
 275              		.cfi_def_cfa_offset 8
 276 0042 BD46     		mov	sp, r7
 277              		.cfi_def_cfa_register 13
 278              		@ sp needed
 279 0044 80BD     		pop	{r7, pc}
 280              	.L13:
 281 0046 00BF     		.align	2
 282              	.L12:
 283 0048 9F640040 		.word	1073767583
 284 004c 9C640040 		.word	1073767580
 285              		.cfi_endproc
 286              	.LFE3:
 287              		.size	SPI_ENCODER_Stop, .-SPI_ENCODER_Stop
 288              		.section	.text.SPI_ENCODER_EnableTxInt,"ax",%progbits
 289              		.align	2
 290              		.global	SPI_ENCODER_EnableTxInt
 291              		.thumb
 292              		.thumb_func
 293              		.type	SPI_ENCODER_EnableTxInt, %function
 294              	SPI_ENCODER_EnableTxInt:
 295              	.LFB4:
 208:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 209:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 210:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 211:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_EnableTxInt
 212:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 213:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 214:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 215:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable internal Tx interrupt generation.
 216:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 217:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 218:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 10


 219:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 220:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 221:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 222:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 223:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 224:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable the internal Tx interrupt output -or- the interrupt component itself.
 225:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 226:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 227:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_EnableTxInt(void) 
 228:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 296              		.loc 1 228 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301 0000 80B4     		push	{r7}
 302              		.cfi_def_cfa_offset 4
 303              		.cfi_offset 7, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 229:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED)
 230:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntEnable(SPI_ENCODER_TX_ISR_NUMBER);
 231:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED) */
 232:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 306              		.loc 1 232 0
 307 0004 00BF     		nop
 308 0006 BD46     		mov	sp, r7
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 0008 80BC     		pop	{r7}
 312              		.cfi_restore 7
 313              		.cfi_def_cfa_offset 0
 314 000a 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE4:
 317              		.size	SPI_ENCODER_EnableTxInt, .-SPI_ENCODER_EnableTxInt
 318              		.section	.text.SPI_ENCODER_EnableRxInt,"ax",%progbits
 319              		.align	2
 320              		.global	SPI_ENCODER_EnableRxInt
 321              		.thumb
 322              		.thumb_func
 323              		.type	SPI_ENCODER_EnableRxInt, %function
 324              	SPI_ENCODER_EnableRxInt:
 325              	.LFB5:
 233:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 234:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 235:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 236:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_EnableRxInt
 237:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 238:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 239:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 240:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable internal Rx interrupt generation.
 241:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 242:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 243:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 244:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 245:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 11


 246:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 247:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 248:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 249:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable the internal Rx interrupt output -or- the interrupt component itself.
 250:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 251:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 252:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_EnableRxInt(void) 
 253:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 326              		.loc 1 253 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331 0000 80B4     		push	{r7}
 332              		.cfi_def_cfa_offset 4
 333              		.cfi_offset 7, -4
 334 0002 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 254:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED)
 255:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntEnable(SPI_ENCODER_RX_ISR_NUMBER);
 336              		.loc 1 255 0
 337 0004 034B     		ldr	r3, .L16
 338 0006 0422     		movs	r2, #4
 339 0008 1A60     		str	r2, [r3]
 256:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED) */
 257:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 340              		.loc 1 257 0
 341 000a 00BF     		nop
 342 000c BD46     		mov	sp, r7
 343              		.cfi_def_cfa_register 13
 344              		@ sp needed
 345 000e 80BC     		pop	{r7}
 346              		.cfi_restore 7
 347              		.cfi_def_cfa_offset 0
 348 0010 7047     		bx	lr
 349              	.L17:
 350 0012 00BF     		.align	2
 351              	.L16:
 352 0014 00E100E0 		.word	-536813312
 353              		.cfi_endproc
 354              	.LFE5:
 355              		.size	SPI_ENCODER_EnableRxInt, .-SPI_ENCODER_EnableRxInt
 356              		.section	.text.SPI_ENCODER_DisableTxInt,"ax",%progbits
 357              		.align	2
 358              		.global	SPI_ENCODER_DisableTxInt
 359              		.thumb
 360              		.thumb_func
 361              		.type	SPI_ENCODER_DisableTxInt, %function
 362              	SPI_ENCODER_DisableTxInt:
 363              	.LFB6:
 258:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 259:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 260:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 261:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_DisableTxInt
 262:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 263:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 264:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 12


 265:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable internal Tx interrupt generation.
 266:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 267:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 268:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 269:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 270:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 271:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 272:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 273:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 274:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable the internal Tx interrupt output -or- the interrupt component itself.
 275:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 276:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 277:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_DisableTxInt(void) 
 278:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 364              		.loc 1 278 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369 0000 80B4     		push	{r7}
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 7, -4
 372 0002 00AF     		add	r7, sp, #0
 373              		.cfi_def_cfa_register 7
 279:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED)
 280:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntDisable(SPI_ENCODER_TX_ISR_NUMBER);
 281:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_TX_INT_ENABLED) */
 282:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 374              		.loc 1 282 0
 375 0004 00BF     		nop
 376 0006 BD46     		mov	sp, r7
 377              		.cfi_def_cfa_register 13
 378              		@ sp needed
 379 0008 80BC     		pop	{r7}
 380              		.cfi_restore 7
 381              		.cfi_def_cfa_offset 0
 382 000a 7047     		bx	lr
 383              		.cfi_endproc
 384              	.LFE6:
 385              		.size	SPI_ENCODER_DisableTxInt, .-SPI_ENCODER_DisableTxInt
 386              		.section	.text.SPI_ENCODER_DisableRxInt,"ax",%progbits
 387              		.align	2
 388              		.global	SPI_ENCODER_DisableRxInt
 389              		.thumb
 390              		.thumb_func
 391              		.type	SPI_ENCODER_DisableRxInt, %function
 392              	SPI_ENCODER_DisableRxInt:
 393              	.LFB7:
 283:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 284:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 285:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 286:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_DisableRxInt
 287:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 288:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 289:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 290:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable internal Rx interrupt generation.
 291:Generated_Source\PSoC5/SPI_ENCODER.c **** *
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 13


 292:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 293:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 294:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 295:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 296:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 297:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 298:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 299:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable the internal Rx interrupt output -or- the interrupt component itself.
 300:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 301:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 302:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_DisableRxInt(void) 
 303:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 394              		.loc 1 303 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399 0000 80B4     		push	{r7}
 400              		.cfi_def_cfa_offset 4
 401              		.cfi_offset 7, -4
 402 0002 00AF     		add	r7, sp, #0
 403              		.cfi_def_cfa_register 7
 304:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED)
 305:Generated_Source\PSoC5/SPI_ENCODER.c ****         CyIntDisable(SPI_ENCODER_RX_ISR_NUMBER);
 404              		.loc 1 305 0
 405 0004 034B     		ldr	r3, .L20
 406 0006 0422     		movs	r2, #4
 407 0008 1A60     		str	r2, [r3]
 306:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (0u != SPI_ENCODER_INTERNAL_RX_INT_ENABLED) */
 307:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 408              		.loc 1 307 0
 409 000a 00BF     		nop
 410 000c BD46     		mov	sp, r7
 411              		.cfi_def_cfa_register 13
 412              		@ sp needed
 413 000e 80BC     		pop	{r7}
 414              		.cfi_restore 7
 415              		.cfi_def_cfa_offset 0
 416 0010 7047     		bx	lr
 417              	.L21:
 418 0012 00BF     		.align	2
 419              	.L20:
 420 0014 80E100E0 		.word	-536813184
 421              		.cfi_endproc
 422              	.LFE7:
 423              		.size	SPI_ENCODER_DisableRxInt, .-SPI_ENCODER_DisableRxInt
 424              		.section	.text.SPI_ENCODER_SetTxInterruptMode,"ax",%progbits
 425              		.align	2
 426              		.global	SPI_ENCODER_SetTxInterruptMode
 427              		.thumb
 428              		.thumb_func
 429              		.type	SPI_ENCODER_SetTxInterruptMode, %function
 430              	SPI_ENCODER_SetTxInterruptMode:
 431              	.LFB8:
 308:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 309:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 310:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 14


 311:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_SetTxInterruptMode
 312:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 313:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 314:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 315:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Configure which status bits trigger an interrupt event.
 316:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 317:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 318:Generated_Source\PSoC5/SPI_ENCODER.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
 319:Generated_Source\PSoC5/SPI_ENCODER.c **** *  header file).
 320:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 321:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 322:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 323:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 324:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 325:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enables the output of specific status bits to the interrupt controller.
 326:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 327:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 328:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_SetTxInterruptMode(uint8 intSrc) 
 329:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 432              		.loc 1 329 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 8
 435              		@ frame_needed = 1, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437 0000 80B4     		push	{r7}
 438              		.cfi_def_cfa_offset 4
 439              		.cfi_offset 7, -4
 440 0002 83B0     		sub	sp, sp, #12
 441              		.cfi_def_cfa_offset 16
 442 0004 00AF     		add	r7, sp, #0
 443              		.cfi_def_cfa_register 7
 444 0006 0346     		mov	r3, r0
 445 0008 FB71     		strb	r3, [r7, #7]
 330:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_TX_STATUS_MASK_REG = intSrc;
 446              		.loc 1 330 0
 447 000a 044A     		ldr	r2, .L23
 448 000c FB79     		ldrb	r3, [r7, #7]
 449 000e 1370     		strb	r3, [r2]
 331:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 450              		.loc 1 331 0
 451 0010 00BF     		nop
 452 0012 0C37     		adds	r7, r7, #12
 453              		.cfi_def_cfa_offset 4
 454 0014 BD46     		mov	sp, r7
 455              		.cfi_def_cfa_register 13
 456              		@ sp needed
 457 0016 80BC     		pop	{r7}
 458              		.cfi_restore 7
 459              		.cfi_def_cfa_offset 0
 460 0018 7047     		bx	lr
 461              	.L24:
 462 001a 00BF     		.align	2
 463              	.L23:
 464 001c 8F640040 		.word	1073767567
 465              		.cfi_endproc
 466              	.LFE8:
 467              		.size	SPI_ENCODER_SetTxInterruptMode, .-SPI_ENCODER_SetTxInterruptMode
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 15


 468              		.section	.text.SPI_ENCODER_SetRxInterruptMode,"ax",%progbits
 469              		.align	2
 470              		.global	SPI_ENCODER_SetRxInterruptMode
 471              		.thumb
 472              		.thumb_func
 473              		.type	SPI_ENCODER_SetRxInterruptMode, %function
 474              	SPI_ENCODER_SetRxInterruptMode:
 475              	.LFB9:
 332:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 333:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 334:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 335:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_SetRxInterruptMode
 336:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 337:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 338:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 339:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Configure which status bits trigger an interrupt event.
 340:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 341:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 342:Generated_Source\PSoC5/SPI_ENCODER.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
 343:Generated_Source\PSoC5/SPI_ENCODER.c **** *  header file).
 344:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 345:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 346:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 347:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 348:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 349:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enables the output of specific status bits to the interrupt controller.
 350:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 351:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 352:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_SetRxInterruptMode(uint8 intSrc) 
 353:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 476              		.loc 1 353 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480              		@ link register save eliminated.
 481 0000 80B4     		push	{r7}
 482              		.cfi_def_cfa_offset 4
 483              		.cfi_offset 7, -4
 484 0002 83B0     		sub	sp, sp, #12
 485              		.cfi_def_cfa_offset 16
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 488 0006 0346     		mov	r3, r0
 489 0008 FB71     		strb	r3, [r7, #7]
 354:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_RX_STATUS_MASK_REG  = intSrc;
 490              		.loc 1 354 0
 491 000a 044A     		ldr	r2, .L26
 492 000c FB79     		ldrb	r3, [r7, #7]
 493 000e 1370     		strb	r3, [r2]
 355:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 494              		.loc 1 355 0
 495 0010 00BF     		nop
 496 0012 0C37     		adds	r7, r7, #12
 497              		.cfi_def_cfa_offset 4
 498 0014 BD46     		mov	sp, r7
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 16


 501 0016 80BC     		pop	{r7}
 502              		.cfi_restore 7
 503              		.cfi_def_cfa_offset 0
 504 0018 7047     		bx	lr
 505              	.L27:
 506 001a 00BF     		.align	2
 507              	.L26:
 508 001c 8C640040 		.word	1073767564
 509              		.cfi_endproc
 510              	.LFE9:
 511              		.size	SPI_ENCODER_SetRxInterruptMode, .-SPI_ENCODER_SetRxInterruptMode
 512              		.section	.text.SPI_ENCODER_ReadTxStatus,"ax",%progbits
 513              		.align	2
 514              		.global	SPI_ENCODER_ReadTxStatus
 515              		.thumb
 516              		.thumb_func
 517              		.type	SPI_ENCODER_ReadTxStatus, %function
 518              	SPI_ENCODER_ReadTxStatus:
 519              	.LFB10:
 356:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 357:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 358:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 359:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ReadTxStatus
 360:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 361:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 362:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 363:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Read the Tx status register for the component.
 364:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 365:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 366:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 367:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 368:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 369:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Contents of the Tx status register.
 370:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 371:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 372:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_swStatusTx - used to store in software status register,
 373:Generated_Source\PSoC5/SPI_ENCODER.c **** *  modified every function call - resets to zero.
 374:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 375:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 376:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Allows the user and the API to read the Tx status register for error
 377:Generated_Source\PSoC5/SPI_ENCODER.c **** *  detection and flow control.
 378:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 379:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 380:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear Tx status register of the component.
 381:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 382:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 383:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 384:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 385:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 386:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8 SPI_ENCODER_ReadTxStatus(void) 
 387:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 520              		.loc 1 387 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0000 80B4     		push	{r7}
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 17


 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 7, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              		.cfi_def_cfa_offset 16
 530 0004 00AF     		add	r7, sp, #0
 531              		.cfi_def_cfa_register 7
 388:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 tmpStatus;
 389:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 390:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
 391:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable TX interrupt to protect global veriables */
 392:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableTxInt();
 393:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 394:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus = SPI_ENCODER_GET_STATUS_TX(SPI_ENCODER_swStatusTx);
 395:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_swStatusTx = 0u;
 396:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 397:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableTxInt();
 398:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 399:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 400:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 401:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus = SPI_ENCODER_TX_STATUS_REG;
 532              		.loc 1 401 0
 533 0006 044B     		ldr	r3, .L30
 534 0008 1B78     		ldrb	r3, [r3]
 535 000a FB71     		strb	r3, [r7, #7]
 402:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 403:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
 404:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 405:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(tmpStatus);
 536              		.loc 1 405 0
 537 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 406:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 538              		.loc 1 406 0
 539 000e 1846     		mov	r0, r3
 540 0010 0C37     		adds	r7, r7, #12
 541              		.cfi_def_cfa_offset 4
 542 0012 BD46     		mov	sp, r7
 543              		.cfi_def_cfa_register 13
 544              		@ sp needed
 545 0014 80BC     		pop	{r7}
 546              		.cfi_restore 7
 547              		.cfi_def_cfa_offset 0
 548 0016 7047     		bx	lr
 549              	.L31:
 550              		.align	2
 551              	.L30:
 552 0018 6F640040 		.word	1073767535
 553              		.cfi_endproc
 554              	.LFE10:
 555              		.size	SPI_ENCODER_ReadTxStatus, .-SPI_ENCODER_ReadTxStatus
 556              		.section	.text.SPI_ENCODER_ReadRxStatus,"ax",%progbits
 557              		.align	2
 558              		.global	SPI_ENCODER_ReadRxStatus
 559              		.thumb
 560              		.thumb_func
 561              		.type	SPI_ENCODER_ReadRxStatus, %function
 562              	SPI_ENCODER_ReadRxStatus:
 563              	.LFB11:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 18


 407:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 408:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 409:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 410:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ReadRxStatus
 411:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 412:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 413:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 414:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Read the Rx status register for the component.
 415:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 416:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 417:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 418:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 419:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 420:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Contents of the Rx status register.
 421:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 422:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 423:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_swStatusRx - used to store in software Rx status register,
 424:Generated_Source\PSoC5/SPI_ENCODER.c **** *  modified every function call - resets to zero.
 425:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 426:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 427:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Allows the user and the API to read the Rx status register for error
 428:Generated_Source\PSoC5/SPI_ENCODER.c **** *  detection and flow control.
 429:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 430:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 431:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear Rx status register of the component.
 432:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 433:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 434:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 435:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 436:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 437:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8 SPI_ENCODER_ReadRxStatus(void) 
 438:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 564              		.loc 1 438 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 8
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568 0000 80B5     		push	{r7, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 82B0     		sub	sp, sp, #8
 573              		.cfi_def_cfa_offset 16
 574 0004 00AF     		add	r7, sp, #0
 575              		.cfi_def_cfa_register 7
 439:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 tmpStatus;
 440:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 441:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
 442:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable RX interrupt to protect global veriables */
 443:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableRxInt();
 576              		.loc 1 443 0
 577 0006 FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
 444:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 445:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus = SPI_ENCODER_GET_STATUS_RX(SPI_ENCODER_swStatusRx);
 578              		.loc 1 445 0
 579 000a 0A4B     		ldr	r3, .L34
 580 000c 1B78     		ldrb	r3, [r3]
 581 000e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 19


 582 0010 094B     		ldr	r3, .L34+4
 583 0012 1B78     		ldrb	r3, [r3]
 584 0014 DBB2     		uxtb	r3, r3
 585 0016 03F04003 		and	r3, r3, #64
 586 001a DBB2     		uxtb	r3, r3
 587 001c 1343     		orrs	r3, r3, r2
 588 001e FB71     		strb	r3, [r7, #7]
 446:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_swStatusRx = 0u;
 589              		.loc 1 446 0
 590 0020 054B     		ldr	r3, .L34+4
 591 0022 0022     		movs	r2, #0
 592 0024 1A70     		strb	r2, [r3]
 447:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 448:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableRxInt();
 593              		.loc 1 448 0
 594 0026 FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
 449:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 450:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 451:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 452:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus = SPI_ENCODER_RX_STATUS_REG;
 453:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 454:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
 455:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 456:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(tmpStatus);
 595              		.loc 1 456 0
 596 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 597              		.loc 1 457 0
 598 002c 1846     		mov	r0, r3
 599 002e 0837     		adds	r7, r7, #8
 600              		.cfi_def_cfa_offset 8
 601 0030 BD46     		mov	sp, r7
 602              		.cfi_def_cfa_register 13
 603              		@ sp needed
 604 0032 80BD     		pop	{r7, pc}
 605              	.L35:
 606              		.align	2
 607              	.L34:
 608 0034 6C640040 		.word	1073767532
 609 0038 00000000 		.word	SPI_ENCODER_swStatusRx
 610              		.cfi_endproc
 611              	.LFE11:
 612              		.size	SPI_ENCODER_ReadRxStatus, .-SPI_ENCODER_ReadRxStatus
 613              		.section	.text.SPI_ENCODER_WriteTxData,"ax",%progbits
 614              		.align	2
 615              		.global	SPI_ENCODER_WriteTxData
 616              		.thumb
 617              		.thumb_func
 618              		.type	SPI_ENCODER_WriteTxData, %function
 619              	SPI_ENCODER_WriteTxData:
 620              	.LFB12:
 458:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 459:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 460:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 461:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_WriteTxData
 462:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 463:Generated_Source\PSoC5/SPI_ENCODER.c **** *
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 20


 464:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 465:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Write a byte of data to be sent across the SPI.
 466:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 467:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 468:Generated_Source\PSoC5/SPI_ENCODER.c **** *  txDataByte: The data value to send across the SPI.
 469:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 470:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 471:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 472:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 473:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 474:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferWrite - used for the account of the bytes which
 475:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the TX software buffer, modified every function
 476:Generated_Source\PSoC5/SPI_ENCODER.c **** *  call if TX Software Buffer is used.
 477:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferRead - used for the account of the bytes which
 478:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the TX software buffer.
 479:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBuffer[SPI_ENCODER_TX_BUFFER_SIZE] - used to store
 480:Generated_Source\PSoC5/SPI_ENCODER.c **** *  data to sending, modified every function call if TX Software Buffer is used.
 481:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 482:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 483:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Allows the user to transmit any byte of data in a single transfer.
 484:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 485:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 486:Generated_Source\PSoC5/SPI_ENCODER.c **** *  If this function is called again before the previous byte is finished then
 487:Generated_Source\PSoC5/SPI_ENCODER.c **** *  the next byte will be appended to the transfer with no time between
 488:Generated_Source\PSoC5/SPI_ENCODER.c **** *  the byte transfers. Clear Tx status register of the component.
 489:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 490:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 491:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 492:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 493:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 494:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_WriteTxData(uint16 txData) 
 495:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 621              		.loc 1 495 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 8
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626 0000 80B4     		push	{r7}
 627              		.cfi_def_cfa_offset 4
 628              		.cfi_offset 7, -4
 629 0002 83B0     		sub	sp, sp, #12
 630              		.cfi_def_cfa_offset 16
 631 0004 00AF     		add	r7, sp, #0
 632              		.cfi_def_cfa_register 7
 633 0006 0346     		mov	r3, r0
 634 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 496:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
 497:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 498:Generated_Source\PSoC5/SPI_ENCODER.c ****         uint8 tempStatus;
 499:Generated_Source\PSoC5/SPI_ENCODER.c ****         uint8 tmpTxBufferRead;
 500:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 501:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Block if TX buffer is FULL: don't overwrite */
 502:Generated_Source\PSoC5/SPI_ENCODER.c ****         do
 503:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 504:Generated_Source\PSoC5/SPI_ENCODER.c ****             tmpTxBufferRead = SPI_ENCODER_txBufferRead;
 505:Generated_Source\PSoC5/SPI_ENCODER.c ****             if(0u == tmpTxBufferRead)
 506:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 21


 507:Generated_Source\PSoC5/SPI_ENCODER.c ****                 tmpTxBufferRead = (SPI_ENCODER_TX_BUFFER_SIZE - 1u);
 508:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 509:Generated_Source\PSoC5/SPI_ENCODER.c ****             else
 510:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
 511:Generated_Source\PSoC5/SPI_ENCODER.c ****                 tmpTxBufferRead--;
 512:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 513:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 514:Generated_Source\PSoC5/SPI_ENCODER.c ****         }while(tmpTxBufferRead == SPI_ENCODER_txBufferWrite);
 515:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 516:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable TX interrupt to protect global veriables */
 517:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableTxInt();
 518:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 519:Generated_Source\PSoC5/SPI_ENCODER.c ****         tempStatus = SPI_ENCODER_GET_STATUS_TX(SPI_ENCODER_swStatusTx);
 520:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_swStatusTx = tempStatus;
 521:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 522:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 523:Generated_Source\PSoC5/SPI_ENCODER.c ****         if((SPI_ENCODER_txBufferRead == SPI_ENCODER_txBufferWrite) &&
 524:Generated_Source\PSoC5/SPI_ENCODER.c ****            (0u != (SPI_ENCODER_swStatusTx & SPI_ENCODER_STS_TX_FIFO_NOT_FULL)))
 525:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 526:Generated_Source\PSoC5/SPI_ENCODER.c ****             /* Put data element into the TX FIFO */
 527:Generated_Source\PSoC5/SPI_ENCODER.c ****             CY_SET_REG16(SPI_ENCODER_TXDATA_PTR, txData);
 528:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 529:Generated_Source\PSoC5/SPI_ENCODER.c ****         else
 530:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 531:Generated_Source\PSoC5/SPI_ENCODER.c ****             /* Add to the TX software buffer */
 532:Generated_Source\PSoC5/SPI_ENCODER.c ****             SPI_ENCODER_txBufferWrite++;
 533:Generated_Source\PSoC5/SPI_ENCODER.c ****             if(SPI_ENCODER_txBufferWrite >= SPI_ENCODER_TX_BUFFER_SIZE)
 534:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
 535:Generated_Source\PSoC5/SPI_ENCODER.c ****                 SPI_ENCODER_txBufferWrite = 0u;
 536:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 537:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 538:Generated_Source\PSoC5/SPI_ENCODER.c ****             if(SPI_ENCODER_txBufferWrite == SPI_ENCODER_txBufferRead)
 539:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
 540:Generated_Source\PSoC5/SPI_ENCODER.c ****                 SPI_ENCODER_txBufferRead++;
 541:Generated_Source\PSoC5/SPI_ENCODER.c ****                 if(SPI_ENCODER_txBufferRead >= SPI_ENCODER_TX_BUFFER_SIZE)
 542:Generated_Source\PSoC5/SPI_ENCODER.c ****                 {
 543:Generated_Source\PSoC5/SPI_ENCODER.c ****                     SPI_ENCODER_txBufferRead = 0u;
 544:Generated_Source\PSoC5/SPI_ENCODER.c ****                 }
 545:Generated_Source\PSoC5/SPI_ENCODER.c ****                 SPI_ENCODER_txBufferFull = 1u;
 546:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 547:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 548:Generated_Source\PSoC5/SPI_ENCODER.c ****             SPI_ENCODER_txBuffer[SPI_ENCODER_txBufferWrite] = txData;
 549:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 550:Generated_Source\PSoC5/SPI_ENCODER.c ****             SPI_ENCODER_TX_STATUS_MASK_REG |= SPI_ENCODER_STS_TX_FIFO_NOT_FULL;
 551:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 552:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 553:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableTxInt();
 554:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 555:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 556:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Wait until TX FIFO has a place */
 557:Generated_Source\PSoC5/SPI_ENCODER.c ****         while(0u == (SPI_ENCODER_TX_STATUS_REG & SPI_ENCODER_STS_TX_FIFO_NOT_FULL))
 635              		.loc 1 557 0
 636 000a 00BF     		nop
 637              	.L37:
 638              		.loc 1 557 0 is_stmt 0 discriminator 1
 639 000c 074B     		ldr	r3, .L38
 640 000e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 22


 641 0010 DBB2     		uxtb	r3, r3
 642 0012 03F00403 		and	r3, r3, #4
 643 0016 002B     		cmp	r3, #0
 644 0018 F8D0     		beq	.L37
 558:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 559:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 560:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 561:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Put data element into the TX FIFO */
 562:Generated_Source\PSoC5/SPI_ENCODER.c ****         CY_SET_REG16(SPI_ENCODER_TXDATA_PTR, txData);
 645              		.loc 1 562 0 is_stmt 1
 646 001a 054A     		ldr	r2, .L38+4
 647 001c FB88     		ldrh	r3, [r7, #6]	@ movhi
 648 001e 1380     		strh	r3, [r2]	@ movhi
 563:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 564:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
 565:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 649              		.loc 1 565 0
 650 0020 00BF     		nop
 651 0022 0C37     		adds	r7, r7, #12
 652              		.cfi_def_cfa_offset 4
 653 0024 BD46     		mov	sp, r7
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 0026 80BC     		pop	{r7}
 657              		.cfi_restore 7
 658              		.cfi_def_cfa_offset 0
 659 0028 7047     		bx	lr
 660              	.L39:
 661 002a 00BF     		.align	2
 662              	.L38:
 663 002c 6F640040 		.word	1073767535
 664 0030 42640040 		.word	1073767490
 665              		.cfi_endproc
 666              	.LFE12:
 667              		.size	SPI_ENCODER_WriteTxData, .-SPI_ENCODER_WriteTxData
 668              		.section	.text.SPI_ENCODER_ReadRxData,"ax",%progbits
 669              		.align	2
 670              		.global	SPI_ENCODER_ReadRxData
 671              		.thumb
 672              		.thumb_func
 673              		.type	SPI_ENCODER_ReadRxData, %function
 674              	SPI_ENCODER_ReadRxData:
 675              	.LFB13:
 566:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 567:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 568:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 569:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ReadRxData
 570:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 571:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 572:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 573:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Read the next byte of data received across the SPI.
 574:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 575:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 576:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 577:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 578:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 579:Generated_Source\PSoC5/SPI_ENCODER.c **** *  The next byte of data read from the FIFO.
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 23


 580:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 581:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 582:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferWrite - used for the account of the bytes which
 583:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the RX software buffer.
 584:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferRead - used for the account of the bytes which
 585:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the RX software buffer, modified every function
 586:Generated_Source\PSoC5/SPI_ENCODER.c **** *  call if RX Software Buffer is used.
 587:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBuffer[SPI_ENCODER_RX_BUFFER_SIZE] - used to store
 588:Generated_Source\PSoC5/SPI_ENCODER.c **** *  received data.
 589:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 590:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 591:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Allows the user to read a byte of data received.
 592:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 593:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 594:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Will return invalid data if the FIFO is empty. The user should Call
 595:Generated_Source\PSoC5/SPI_ENCODER.c **** *  GetRxBufferSize() and if it returns a non-zero value then it is safe to call
 596:Generated_Source\PSoC5/SPI_ENCODER.c **** *  ReadByte() function.
 597:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 598:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 599:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 600:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 601:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 602:Generated_Source\PSoC5/SPI_ENCODER.c **** uint16 SPI_ENCODER_ReadRxData(void) 
 603:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 676              		.loc 1 603 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 8
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680 0000 80B5     		push	{r7, lr}
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 7, -8
 683              		.cfi_offset 14, -4
 684 0002 82B0     		sub	sp, sp, #8
 685              		.cfi_def_cfa_offset 16
 686 0004 00AF     		add	r7, sp, #0
 687              		.cfi_def_cfa_register 7
 604:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint16 rxData;
 605:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 606:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
 607:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 608:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable RX interrupt to protect global veriables */
 609:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableRxInt();
 688              		.loc 1 609 0
 689 0006 FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
 610:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 611:Generated_Source\PSoC5/SPI_ENCODER.c ****         if(SPI_ENCODER_rxBufferRead != SPI_ENCODER_rxBufferWrite)
 690              		.loc 1 611 0
 691 000a 174B     		ldr	r3, .L45
 692 000c 1B78     		ldrb	r3, [r3]
 693 000e DAB2     		uxtb	r2, r3
 694 0010 164B     		ldr	r3, .L45+4
 695 0012 1B78     		ldrb	r3, [r3]
 696 0014 DBB2     		uxtb	r3, r3
 697 0016 9A42     		cmp	r2, r3
 698 0018 17D0     		beq	.L41
 612:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 613:Generated_Source\PSoC5/SPI_ENCODER.c ****             if(0u == SPI_ENCODER_rxBufferFull)
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 24


 699              		.loc 1 613 0
 700 001a 154B     		ldr	r3, .L45+8
 701 001c 1B78     		ldrb	r3, [r3]
 702 001e DBB2     		uxtb	r3, r3
 703 0020 002B     		cmp	r3, #0
 704 0022 0FD1     		bne	.L42
 614:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
 615:Generated_Source\PSoC5/SPI_ENCODER.c ****                 SPI_ENCODER_rxBufferRead++;
 705              		.loc 1 615 0
 706 0024 104B     		ldr	r3, .L45
 707 0026 1B78     		ldrb	r3, [r3]
 708 0028 DBB2     		uxtb	r3, r3
 709 002a 0133     		adds	r3, r3, #1
 710 002c DAB2     		uxtb	r2, r3
 711 002e 0E4B     		ldr	r3, .L45
 712 0030 1A70     		strb	r2, [r3]
 616:Generated_Source\PSoC5/SPI_ENCODER.c ****                 if(SPI_ENCODER_rxBufferRead >= SPI_ENCODER_RX_BUFFER_SIZE)
 713              		.loc 1 616 0
 714 0032 0D4B     		ldr	r3, .L45
 715 0034 1B78     		ldrb	r3, [r3]
 716 0036 DBB2     		uxtb	r3, r3
 717 0038 092B     		cmp	r3, #9
 718 003a 06D9     		bls	.L41
 617:Generated_Source\PSoC5/SPI_ENCODER.c ****                 {
 618:Generated_Source\PSoC5/SPI_ENCODER.c ****                     SPI_ENCODER_rxBufferRead = 0u;
 719              		.loc 1 618 0
 720 003c 0A4B     		ldr	r3, .L45
 721 003e 0022     		movs	r2, #0
 722 0040 1A70     		strb	r2, [r3]
 723 0042 02E0     		b	.L41
 724              	.L42:
 619:Generated_Source\PSoC5/SPI_ENCODER.c ****                 }
 620:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 621:Generated_Source\PSoC5/SPI_ENCODER.c ****             else
 622:Generated_Source\PSoC5/SPI_ENCODER.c ****             {
 623:Generated_Source\PSoC5/SPI_ENCODER.c ****                 SPI_ENCODER_rxBufferFull = 0u;
 725              		.loc 1 623 0
 726 0044 0A4B     		ldr	r3, .L45+8
 727 0046 0022     		movs	r2, #0
 728 0048 1A70     		strb	r2, [r3]
 729              	.L41:
 624:Generated_Source\PSoC5/SPI_ENCODER.c ****             }
 625:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 626:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 627:Generated_Source\PSoC5/SPI_ENCODER.c ****         rxData = SPI_ENCODER_rxBuffer[SPI_ENCODER_rxBufferRead];
 730              		.loc 1 627 0
 731 004a 074B     		ldr	r3, .L45
 732 004c 1B78     		ldrb	r3, [r3]
 733 004e DBB2     		uxtb	r3, r3
 734 0050 1A46     		mov	r2, r3
 735 0052 084B     		ldr	r3, .L45+12
 736 0054 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 737 0058 FB80     		strh	r3, [r7, #6]	@ movhi
 628:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 629:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableRxInt();
 738              		.loc 1 629 0
 739 005a FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 25


 630:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 631:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 632:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 633:Generated_Source\PSoC5/SPI_ENCODER.c ****         rxData = CY_GET_REG16(SPI_ENCODER_RXDATA_PTR);
 634:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 635:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
 636:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 637:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(rxData);
 740              		.loc 1 637 0
 741 005e FB88     		ldrh	r3, [r7, #6]
 638:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 742              		.loc 1 638 0
 743 0060 1846     		mov	r0, r3
 744 0062 0837     		adds	r7, r7, #8
 745              		.cfi_def_cfa_offset 8
 746 0064 BD46     		mov	sp, r7
 747              		.cfi_def_cfa_register 13
 748              		@ sp needed
 749 0066 80BD     		pop	{r7, pc}
 750              	.L46:
 751              		.align	2
 752              	.L45:
 753 0068 00000000 		.word	SPI_ENCODER_rxBufferRead
 754 006c 00000000 		.word	SPI_ENCODER_rxBufferWrite
 755 0070 00000000 		.word	SPI_ENCODER_rxBufferFull
 756 0074 00000000 		.word	SPI_ENCODER_rxBuffer
 757              		.cfi_endproc
 758              	.LFE13:
 759              		.size	SPI_ENCODER_ReadRxData, .-SPI_ENCODER_ReadRxData
 760              		.section	.text.SPI_ENCODER_GetRxBufferSize,"ax",%progbits
 761              		.align	2
 762              		.global	SPI_ENCODER_GetRxBufferSize
 763              		.thumb
 764              		.thumb_func
 765              		.type	SPI_ENCODER_GetRxBufferSize, %function
 766              	SPI_ENCODER_GetRxBufferSize:
 767              	.LFB14:
 639:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 640:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 641:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 642:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_GetRxBufferSize
 643:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 644:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 645:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 646:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Returns the number of bytes/words of data currently held in the RX buffer.
 647:Generated_Source\PSoC5/SPI_ENCODER.c **** *  If RX Software Buffer not used then function return 0 if FIFO empty or 1 if
 648:Generated_Source\PSoC5/SPI_ENCODER.c **** *  FIFO not empty. In another case function return size of RX Software Buffer.
 649:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 650:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 651:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 652:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 653:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 654:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Integer count of the number of bytes/words in the RX buffer.
 655:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 656:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 657:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferWrite - used for the account of the bytes which
 658:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the RX software buffer.
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 26


 659:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferRead - used for the account of the bytes which
 660:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the RX software buffer.
 661:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 662:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 663:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear status register of the component.
 664:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 665:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 666:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8 SPI_ENCODER_GetRxBufferSize(void) 
 667:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 768              		.loc 1 667 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 8
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 80B5     		push	{r7, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 82B0     		sub	sp, sp, #8
 777              		.cfi_def_cfa_offset 16
 778 0004 00AF     		add	r7, sp, #0
 779              		.cfi_def_cfa_register 7
 668:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 size;
 669:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 670:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
 671:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 672:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable RX interrupt to protect global veriables */
 673:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableRxInt();
 780              		.loc 1 673 0
 781 0006 FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
 674:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 675:Generated_Source\PSoC5/SPI_ENCODER.c ****         if(SPI_ENCODER_rxBufferRead == SPI_ENCODER_rxBufferWrite)
 782              		.loc 1 675 0
 783 000a 164B     		ldr	r3, .L52
 784 000c 1B78     		ldrb	r3, [r3]
 785 000e DAB2     		uxtb	r2, r3
 786 0010 154B     		ldr	r3, .L52+4
 787 0012 1B78     		ldrb	r3, [r3]
 788 0014 DBB2     		uxtb	r3, r3
 789 0016 9A42     		cmp	r2, r3
 790 0018 02D1     		bne	.L48
 676:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 677:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = 0u;
 791              		.loc 1 677 0
 792 001a 0023     		movs	r3, #0
 793 001c FB71     		strb	r3, [r7, #7]
 794 001e 1AE0     		b	.L49
 795              	.L48:
 678:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 679:Generated_Source\PSoC5/SPI_ENCODER.c ****         else if(SPI_ENCODER_rxBufferRead < SPI_ENCODER_rxBufferWrite)
 796              		.loc 1 679 0
 797 0020 104B     		ldr	r3, .L52
 798 0022 1B78     		ldrb	r3, [r3]
 799 0024 DAB2     		uxtb	r2, r3
 800 0026 104B     		ldr	r3, .L52+4
 801 0028 1B78     		ldrb	r3, [r3]
 802 002a DBB2     		uxtb	r3, r3
 803 002c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 27


 804 002e 08D2     		bcs	.L50
 680:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 681:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = (SPI_ENCODER_rxBufferWrite - SPI_ENCODER_rxBufferRead);
 805              		.loc 1 681 0
 806 0030 0D4B     		ldr	r3, .L52+4
 807 0032 1B78     		ldrb	r3, [r3]
 808 0034 DAB2     		uxtb	r2, r3
 809 0036 0B4B     		ldr	r3, .L52
 810 0038 1B78     		ldrb	r3, [r3]
 811 003a DBB2     		uxtb	r3, r3
 812 003c D31A     		subs	r3, r2, r3
 813 003e FB71     		strb	r3, [r7, #7]
 814 0040 09E0     		b	.L49
 815              	.L50:
 682:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 683:Generated_Source\PSoC5/SPI_ENCODER.c ****         else
 684:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 685:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = (SPI_ENCODER_RX_BUFFER_SIZE - SPI_ENCODER_rxBufferRead) + SPI_ENCODER_rxBufferWr
 816              		.loc 1 685 0
 817 0042 094B     		ldr	r3, .L52+4
 818 0044 1B78     		ldrb	r3, [r3]
 819 0046 DAB2     		uxtb	r2, r3
 820 0048 064B     		ldr	r3, .L52
 821 004a 1B78     		ldrb	r3, [r3]
 822 004c DBB2     		uxtb	r3, r3
 823 004e D31A     		subs	r3, r2, r3
 824 0050 DBB2     		uxtb	r3, r3
 825 0052 0A33     		adds	r3, r3, #10
 826 0054 FB71     		strb	r3, [r7, #7]
 827              	.L49:
 686:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 687:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 688:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableRxInt();
 828              		.loc 1 688 0
 829 0056 FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
 689:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 690:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 691:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 692:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* We can only know if there is data in the RX FIFO */
 693:Generated_Source\PSoC5/SPI_ENCODER.c ****         size = (0u != (SPI_ENCODER_RX_STATUS_REG & SPI_ENCODER_STS_RX_FIFO_NOT_EMPTY)) ? 1u : 0u;
 694:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 695:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
 696:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 697:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(size);
 830              		.loc 1 697 0
 831 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 698:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 832              		.loc 1 698 0
 833 005c 1846     		mov	r0, r3
 834 005e 0837     		adds	r7, r7, #8
 835              		.cfi_def_cfa_offset 8
 836 0060 BD46     		mov	sp, r7
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 0062 80BD     		pop	{r7, pc}
 840              	.L53:
 841              		.align	2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 28


 842              	.L52:
 843 0064 00000000 		.word	SPI_ENCODER_rxBufferRead
 844 0068 00000000 		.word	SPI_ENCODER_rxBufferWrite
 845              		.cfi_endproc
 846              	.LFE14:
 847              		.size	SPI_ENCODER_GetRxBufferSize, .-SPI_ENCODER_GetRxBufferSize
 848              		.section	.text.SPI_ENCODER_GetTxBufferSize,"ax",%progbits
 849              		.align	2
 850              		.global	SPI_ENCODER_GetTxBufferSize
 851              		.thumb
 852              		.thumb_func
 853              		.type	SPI_ENCODER_GetTxBufferSize, %function
 854              	SPI_ENCODER_GetTxBufferSize:
 855              	.LFB15:
 699:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 700:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 701:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 702:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_GetTxBufferSize
 703:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 704:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 705:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 706:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Returns the number of bytes/words of data currently held in the TX buffer.
 707:Generated_Source\PSoC5/SPI_ENCODER.c **** *  If TX Software Buffer not used then function return 0 - if FIFO empty, 1 - if
 708:Generated_Source\PSoC5/SPI_ENCODER.c **** *  FIFO not full, 4 - if FIFO full. In another case function return size of TX
 709:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Software Buffer.
 710:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 711:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 712:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 713:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 714:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 715:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Integer count of the number of bytes/words in the TX buffer.
 716:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 717:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 718:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferWrite - used for the account of the bytes which
 719:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the TX software buffer.
 720:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferRead - used for the account of the bytes which
 721:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the TX software buffer.
 722:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 723:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 724:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear status register of the component.
 725:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 726:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 727:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8  SPI_ENCODER_GetTxBufferSize(void) 
 728:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 856              		.loc 1 728 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 8
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861 0000 80B4     		push	{r7}
 862              		.cfi_def_cfa_offset 4
 863              		.cfi_offset 7, -4
 864 0002 83B0     		sub	sp, sp, #12
 865              		.cfi_def_cfa_offset 16
 866 0004 00AF     		add	r7, sp, #0
 867              		.cfi_def_cfa_register 7
 729:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 size;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 29


 730:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 731:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
 732:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable TX interrupt to protect global veriables */
 733:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableTxInt();
 734:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 735:Generated_Source\PSoC5/SPI_ENCODER.c ****         if(SPI_ENCODER_txBufferRead == SPI_ENCODER_txBufferWrite)
 736:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 737:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = 0u;
 738:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 739:Generated_Source\PSoC5/SPI_ENCODER.c ****         else if(SPI_ENCODER_txBufferRead < SPI_ENCODER_txBufferWrite)
 740:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 741:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = (SPI_ENCODER_txBufferWrite - SPI_ENCODER_txBufferRead);
 742:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 743:Generated_Source\PSoC5/SPI_ENCODER.c ****         else
 744:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 745:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = (SPI_ENCODER_TX_BUFFER_SIZE - SPI_ENCODER_txBufferRead) + SPI_ENCODER_txBufferWr
 746:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 747:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 748:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableTxInt();
 749:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 750:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
 751:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 752:Generated_Source\PSoC5/SPI_ENCODER.c ****         size = SPI_ENCODER_TX_STATUS_REG;
 868              		.loc 1 752 0
 869 0006 0D4B     		ldr	r3, .L59
 870 0008 1B78     		ldrb	r3, [r3]
 871 000a FB71     		strb	r3, [r7, #7]
 753:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 754:Generated_Source\PSoC5/SPI_ENCODER.c ****         if(0u != (size & SPI_ENCODER_STS_TX_FIFO_EMPTY))
 872              		.loc 1 754 0
 873 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 874 000e 03F00203 		and	r3, r3, #2
 875 0012 002B     		cmp	r3, #0
 876 0014 02D0     		beq	.L55
 755:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 756:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = 0u;
 877              		.loc 1 756 0
 878 0016 0023     		movs	r3, #0
 879 0018 FB71     		strb	r3, [r7, #7]
 880 001a 09E0     		b	.L56
 881              	.L55:
 757:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 758:Generated_Source\PSoC5/SPI_ENCODER.c ****         else if(0u != (size & SPI_ENCODER_STS_TX_FIFO_NOT_FULL))
 882              		.loc 1 758 0
 883 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 884 001e 03F00403 		and	r3, r3, #4
 885 0022 002B     		cmp	r3, #0
 886 0024 02D0     		beq	.L57
 759:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 760:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = 1u;
 887              		.loc 1 760 0
 888 0026 0123     		movs	r3, #1
 889 0028 FB71     		strb	r3, [r7, #7]
 890 002a 01E0     		b	.L56
 891              	.L57:
 761:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 762:Generated_Source\PSoC5/SPI_ENCODER.c ****         else
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 30


 763:Generated_Source\PSoC5/SPI_ENCODER.c ****         {
 764:Generated_Source\PSoC5/SPI_ENCODER.c ****             size = SPI_ENCODER_FIFO_SIZE;
 892              		.loc 1 764 0
 893 002c 0423     		movs	r3, #4
 894 002e FB71     		strb	r3, [r7, #7]
 895              	.L56:
 765:Generated_Source\PSoC5/SPI_ENCODER.c ****         }
 766:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 767:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
 768:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 769:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(size);
 896              		.loc 1 769 0
 897 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 770:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 898              		.loc 1 770 0
 899 0032 1846     		mov	r0, r3
 900 0034 0C37     		adds	r7, r7, #12
 901              		.cfi_def_cfa_offset 4
 902 0036 BD46     		mov	sp, r7
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 0038 80BC     		pop	{r7}
 906              		.cfi_restore 7
 907              		.cfi_def_cfa_offset 0
 908 003a 7047     		bx	lr
 909              	.L60:
 910              		.align	2
 911              	.L59:
 912 003c 6F640040 		.word	1073767535
 913              		.cfi_endproc
 914              	.LFE15:
 915              		.size	SPI_ENCODER_GetTxBufferSize, .-SPI_ENCODER_GetTxBufferSize
 916              		.section	.text.SPI_ENCODER_ClearRxBuffer,"ax",%progbits
 917              		.align	2
 918              		.global	SPI_ENCODER_ClearRxBuffer
 919              		.thumb
 920              		.thumb_func
 921              		.type	SPI_ENCODER_ClearRxBuffer, %function
 922              	SPI_ENCODER_ClearRxBuffer:
 923              	.LFB16:
 771:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 772:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 773:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 774:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ClearRxBuffer
 775:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 776:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 777:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 778:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear the RX RAM buffer by setting the read and write pointers both to zero.
 779:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 780:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 781:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 782:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 783:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 784:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 785:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 786:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 787:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferWrite - used for the account of the bytes which
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 31


 788:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the RX software buffer, modified every function
 789:Generated_Source\PSoC5/SPI_ENCODER.c **** *  call - resets to zero.
 790:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_rxBufferRead - used for the account of the bytes which
 791:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the RX software buffer, modified every function call -
 792:Generated_Source\PSoC5/SPI_ENCODER.c **** *  resets to zero.
 793:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 794:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 795:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Setting the pointers to zero makes the system believe there is no data to
 796:Generated_Source\PSoC5/SPI_ENCODER.c **** *  read and writing will resume at address 0 overwriting any data that may have
 797:Generated_Source\PSoC5/SPI_ENCODER.c **** *  remained in the RAM.
 798:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 799:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 800:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Any received data not read from the RAM buffer will be lost when overwritten.
 801:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 802:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 803:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 804:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 805:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 806:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_ClearRxBuffer(void) 
 807:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 924              		.loc 1 807 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 1, uses_anonymous_args = 0
 928 0000 80B5     		push	{r7, lr}
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 7, -8
 931              		.cfi_offset 14, -4
 932 0002 00AF     		add	r7, sp, #0
 933              		.cfi_def_cfa_register 7
 808:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Clear Hardware RX FIFO */
 809:Generated_Source\PSoC5/SPI_ENCODER.c ****     while(0u !=(SPI_ENCODER_RX_STATUS_REG & SPI_ENCODER_STS_RX_FIFO_NOT_EMPTY))
 934              		.loc 1 809 0
 935 0004 01E0     		b	.L62
 936              	.L63:
 810:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 811:Generated_Source\PSoC5/SPI_ENCODER.c ****         (void) CY_GET_REG16(SPI_ENCODER_RXDATA_PTR);
 937              		.loc 1 811 0
 938 0006 0C4B     		ldr	r3, .L64
 939 0008 1B88     		ldrh	r3, [r3]	@ movhi
 940              	.L62:
 809:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 941              		.loc 1 809 0
 942 000a 0C4B     		ldr	r3, .L64+4
 943 000c 1B78     		ldrb	r3, [r3]
 944 000e DBB2     		uxtb	r3, r3
 945 0010 03F02003 		and	r3, r3, #32
 946 0014 002B     		cmp	r3, #0
 947 0016 F6D1     		bne	.L63
 812:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
 813:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 814:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
 815:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable RX interrupt to protect global veriables */
 816:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableRxInt();
 948              		.loc 1 816 0
 949 0018 FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
 817:Generated_Source\PSoC5/SPI_ENCODER.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 32


 818:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferFull  = 0u;
 950              		.loc 1 818 0
 951 001c 084B     		ldr	r3, .L64+8
 952 001e 0022     		movs	r2, #0
 953 0020 1A70     		strb	r2, [r3]
 819:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferRead  = 0u;
 954              		.loc 1 819 0
 955 0022 084B     		ldr	r3, .L64+12
 956 0024 0022     		movs	r2, #0
 957 0026 1A70     		strb	r2, [r3]
 820:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_rxBufferWrite = 0u;
 958              		.loc 1 820 0
 959 0028 074B     		ldr	r3, .L64+16
 960 002a 0022     		movs	r2, #0
 961 002c 1A70     		strb	r2, [r3]
 821:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 822:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableRxInt();
 962              		.loc 1 822 0
 963 002e FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
 823:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
 824:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 964              		.loc 1 824 0
 965 0032 00BF     		nop
 966 0034 80BD     		pop	{r7, pc}
 967              	.L65:
 968 0036 00BF     		.align	2
 969              	.L64:
 970 0038 52640040 		.word	1073767506
 971 003c 6C640040 		.word	1073767532
 972 0040 00000000 		.word	SPI_ENCODER_rxBufferFull
 973 0044 00000000 		.word	SPI_ENCODER_rxBufferRead
 974 0048 00000000 		.word	SPI_ENCODER_rxBufferWrite
 975              		.cfi_endproc
 976              	.LFE16:
 977              		.size	SPI_ENCODER_ClearRxBuffer, .-SPI_ENCODER_ClearRxBuffer
 978              		.section	.text.SPI_ENCODER_ClearTxBuffer,"ax",%progbits
 979              		.align	2
 980              		.global	SPI_ENCODER_ClearTxBuffer
 981              		.thumb
 982              		.thumb_func
 983              		.type	SPI_ENCODER_ClearTxBuffer, %function
 984              	SPI_ENCODER_ClearTxBuffer:
 985              	.LFB17:
 825:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 826:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 827:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 828:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ClearTxBuffer
 829:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 830:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 831:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 832:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear the TX RAM buffer by setting the read and write pointers both to zero.
 833:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 834:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 835:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 836:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 837:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 838:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 33


 839:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 840:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
 841:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferWrite - used for the account of the bytes which
 842:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been written down in the TX software buffer, modified every function
 843:Generated_Source\PSoC5/SPI_ENCODER.c **** *  call - resets to zero.
 844:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_txBufferRead - used for the account of the bytes which
 845:Generated_Source\PSoC5/SPI_ENCODER.c **** *  have been read from the TX software buffer, modified every function call -
 846:Generated_Source\PSoC5/SPI_ENCODER.c **** *  resets to zero.
 847:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 848:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
 849:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Setting the pointers to zero makes the system believe there is no data to
 850:Generated_Source\PSoC5/SPI_ENCODER.c **** *  read and writing will resume at address 0 overwriting any data that may have
 851:Generated_Source\PSoC5/SPI_ENCODER.c **** *  remained in the RAM.
 852:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 853:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 854:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Any data not yet transmitted from the RAM buffer will be lost when
 855:Generated_Source\PSoC5/SPI_ENCODER.c **** *  overwritten.
 856:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 857:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 858:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 859:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 860:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 861:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_ClearTxBuffer(void) 
 862:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 986              		.loc 1 862 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 82B0     		sub	sp, sp, #8
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 863:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 enableInterrupts;
 864:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 865:Generated_Source\PSoC5/SPI_ENCODER.c ****     enableInterrupts = CyEnterCriticalSection();
 998              		.loc 1 865 0
 999 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1000 000a 0346     		mov	r3, r0
 1001 000c FB71     		strb	r3, [r7, #7]
 866:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Clear TX FIFO */
 867:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_AUX_CONTROL_DP0_REG |= ((uint8)  SPI_ENCODER_TX_FIFO_CLR);
 1002              		.loc 1 867 0
 1003 000e 144A     		ldr	r2, .L67
 1004 0010 134B     		ldr	r3, .L67
 1005 0012 1B78     		ldrb	r3, [r3]
 1006 0014 DBB2     		uxtb	r3, r3
 1007 0016 43F00103 		orr	r3, r3, #1
 1008 001a DBB2     		uxtb	r3, r3
 1009 001c 1370     		strb	r3, [r2]
 868:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_AUX_CONTROL_DP0_REG &= ((uint8) ~SPI_ENCODER_TX_FIFO_CLR);
 1010              		.loc 1 868 0
 1011 001e 104A     		ldr	r2, .L67
 1012 0020 0F4B     		ldr	r3, .L67
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 34


 1013 0022 1B78     		ldrb	r3, [r3]
 1014 0024 DBB2     		uxtb	r3, r3
 1015 0026 23F00103 		bic	r3, r3, #1
 1016 002a DBB2     		uxtb	r3, r3
 1017 002c 1370     		strb	r3, [r2]
 869:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 870:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_USE_SECOND_DATAPATH)
 871:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Clear TX FIFO for 2nd Datapath */
 872:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_AUX_CONTROL_DP1_REG |= ((uint8)  SPI_ENCODER_TX_FIFO_CLR);
 1018              		.loc 1 872 0
 1019 002e 0D4A     		ldr	r2, .L67+4
 1020 0030 0C4B     		ldr	r3, .L67+4
 1021 0032 1B78     		ldrb	r3, [r3]
 1022 0034 DBB2     		uxtb	r3, r3
 1023 0036 43F00103 		orr	r3, r3, #1
 1024 003a DBB2     		uxtb	r3, r3
 1025 003c 1370     		strb	r3, [r2]
 873:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_AUX_CONTROL_DP1_REG &= ((uint8) ~SPI_ENCODER_TX_FIFO_CLR);
 1026              		.loc 1 873 0
 1027 003e 094A     		ldr	r2, .L67+4
 1028 0040 084B     		ldr	r3, .L67+4
 1029 0042 1B78     		ldrb	r3, [r3]
 1030 0044 DBB2     		uxtb	r3, r3
 1031 0046 23F00103 		bic	r3, r3, #1
 1032 004a DBB2     		uxtb	r3, r3
 1033 004c 1370     		strb	r3, [r2]
 874:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_USE_SECOND_DATAPATH) */
 875:Generated_Source\PSoC5/SPI_ENCODER.c ****     CyExitCriticalSection(enableInterrupts);
 1034              		.loc 1 875 0
 1035 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1036 0050 1846     		mov	r0, r3
 1037 0052 FFF7FEFF 		bl	CyExitCriticalSection
 876:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 877:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED)
 878:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Disable TX interrupt to protect global veriables */
 879:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableTxInt();
 880:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 881:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferFull  = 0u;
 882:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferRead  = 0u;
 883:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_txBufferWrite = 0u;
 884:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 885:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Buffer is EMPTY: disable TX FIFO NOT FULL interrupt */
 886:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_TX_STATUS_MASK_REG &= ((uint8) ~SPI_ENCODER_STS_TX_FIFO_NOT_FULL);
 887:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 888:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableTxInt();
 889:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED) */
 890:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1038              		.loc 1 890 0
 1039 0056 00BF     		nop
 1040 0058 0837     		adds	r7, r7, #8
 1041              		.cfi_def_cfa_offset 8
 1042 005a BD46     		mov	sp, r7
 1043              		.cfi_def_cfa_register 13
 1044              		@ sp needed
 1045 005c 80BD     		pop	{r7, pc}
 1046              	.L68:
 1047 005e 00BF     		.align	2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 35


 1048              	.L67:
 1049 0060 92640040 		.word	1073767570
 1050 0064 93640040 		.word	1073767571
 1051              		.cfi_endproc
 1052              	.LFE17:
 1053              		.size	SPI_ENCODER_ClearTxBuffer, .-SPI_ENCODER_ClearTxBuffer
 1054              		.section	.text.SPI_ENCODER_PutArray,"ax",%progbits
 1055              		.align	2
 1056              		.global	SPI_ENCODER_PutArray
 1057              		.thumb
 1058              		.thumb_func
 1059              		.type	SPI_ENCODER_PutArray, %function
 1060              	SPI_ENCODER_PutArray:
 1061              	.LFB18:
 891:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 892:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 893:Generated_Source\PSoC5/SPI_ENCODER.c **** #if(0u != SPI_ENCODER_BIDIRECTIONAL_MODE)
 894:Generated_Source\PSoC5/SPI_ENCODER.c ****     /*******************************************************************************
 895:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Function Name: SPI_ENCODER_TxEnable
 896:Generated_Source\PSoC5/SPI_ENCODER.c ****     ********************************************************************************
 897:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 898:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Summary:
 899:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  If the SPI master is configured to use a single bi-directional pin then this
 900:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  will set the bi-directional pin to transmit.
 901:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 902:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Parameters:
 903:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  None.
 904:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 905:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Return:
 906:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  None.
 907:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 908:Generated_Source\PSoC5/SPI_ENCODER.c ****     *******************************************************************************/
 909:Generated_Source\PSoC5/SPI_ENCODER.c ****     void SPI_ENCODER_TxEnable(void) 
 910:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 911:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_CONTROL_REG |= SPI_ENCODER_CTRL_TX_SIGNAL_EN;
 912:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
 913:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 914:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 915:Generated_Source\PSoC5/SPI_ENCODER.c ****     /*******************************************************************************
 916:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Function Name: SPI_ENCODER_TxDisable
 917:Generated_Source\PSoC5/SPI_ENCODER.c ****     ********************************************************************************
 918:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 919:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Summary:
 920:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  If the SPI master is configured to use a single bi-directional pin then this
 921:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  will set the bi-directional pin to receive.
 922:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 923:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Parameters:
 924:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  None.
 925:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 926:Generated_Source\PSoC5/SPI_ENCODER.c ****     * Return:
 927:Generated_Source\PSoC5/SPI_ENCODER.c ****     *  None.
 928:Generated_Source\PSoC5/SPI_ENCODER.c ****     *
 929:Generated_Source\PSoC5/SPI_ENCODER.c ****     *******************************************************************************/
 930:Generated_Source\PSoC5/SPI_ENCODER.c ****     void SPI_ENCODER_TxDisable(void) 
 931:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 932:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_CONTROL_REG &= ((uint8) ~SPI_ENCODER_CTRL_TX_SIGNAL_EN);
 933:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 36


 934:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 935:Generated_Source\PSoC5/SPI_ENCODER.c **** #endif /* (0u != SPI_ENCODER_BIDIRECTIONAL_MODE) */
 936:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 937:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 938:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 939:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_PutArray
 940:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 941:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 942:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 943:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Write available data from ROM/RAM to the TX buffer while space is available
 944:Generated_Source\PSoC5/SPI_ENCODER.c **** *  in the TX buffer. Keep trying until all data is passed to the TX buffer.
 945:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 946:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
 947:Generated_Source\PSoC5/SPI_ENCODER.c **** *  *buffer: Pointer to the location in RAM containing the data to send
 948:Generated_Source\PSoC5/SPI_ENCODER.c **** *  byteCount: The number of bytes to move to the transmit buffer.
 949:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 950:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 951:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 952:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 953:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 954:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Will stay in this routine until all data has been sent.  May get locked in
 955:Generated_Source\PSoC5/SPI_ENCODER.c **** *  this loop if data is not being initiated by the master if there is not
 956:Generated_Source\PSoC5/SPI_ENCODER.c **** *  enough room in the TX FIFO.
 957:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 958:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
 959:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
 960:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 961:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 962:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_PutArray(const uint16 buffer[], uint8 byteCount)
 963:Generated_Source\PSoC5/SPI_ENCODER.c ****                                                                           
 964:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1062              		.loc 1 964 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 16
 1065              		@ frame_needed = 1, uses_anonymous_args = 0
 1066 0000 80B5     		push	{r7, lr}
 1067              		.cfi_def_cfa_offset 8
 1068              		.cfi_offset 7, -8
 1069              		.cfi_offset 14, -4
 1070 0002 84B0     		sub	sp, sp, #16
 1071              		.cfi_def_cfa_offset 24
 1072 0004 00AF     		add	r7, sp, #0
 1073              		.cfi_def_cfa_register 7
 1074 0006 7860     		str	r0, [r7, #4]
 1075 0008 0B46     		mov	r3, r1
 1076 000a FB70     		strb	r3, [r7, #3]
 965:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 bufIndex;
 966:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 967:Generated_Source\PSoC5/SPI_ENCODER.c ****     bufIndex = 0u;
 1077              		.loc 1 967 0
 1078 000c 0023     		movs	r3, #0
 1079 000e FB73     		strb	r3, [r7, #15]
 968:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 969:Generated_Source\PSoC5/SPI_ENCODER.c ****     while(byteCount > 0u)
 1080              		.loc 1 969 0
 1081 0010 0DE0     		b	.L70
 1082              	.L71:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 37


 970:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 971:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_WriteTxData(buffer[bufIndex]);
 1083              		.loc 1 971 0
 1084 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1085 0014 5B00     		lsls	r3, r3, #1
 1086 0016 7A68     		ldr	r2, [r7, #4]
 1087 0018 1344     		add	r3, r3, r2
 1088 001a 1B88     		ldrh	r3, [r3]
 1089 001c 1846     		mov	r0, r3
 1090 001e FFF7FEFF 		bl	SPI_ENCODER_WriteTxData
 972:Generated_Source\PSoC5/SPI_ENCODER.c ****         bufIndex++;
 1091              		.loc 1 972 0
 1092 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1093 0024 0133     		adds	r3, r3, #1
 1094 0026 FB73     		strb	r3, [r7, #15]
 973:Generated_Source\PSoC5/SPI_ENCODER.c ****         byteCount--;
 1095              		.loc 1 973 0
 1096 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1097 002a 013B     		subs	r3, r3, #1
 1098 002c FB70     		strb	r3, [r7, #3]
 1099              	.L70:
 969:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 1100              		.loc 1 969 0
 1101 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1102 0030 002B     		cmp	r3, #0
 1103 0032 EED1     		bne	.L71
 974:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
 975:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1104              		.loc 1 975 0
 1105 0034 00BF     		nop
 1106 0036 1037     		adds	r7, r7, #16
 1107              		.cfi_def_cfa_offset 8
 1108 0038 BD46     		mov	sp, r7
 1109              		.cfi_def_cfa_register 13
 1110              		@ sp needed
 1111 003a 80BD     		pop	{r7, pc}
 1112              		.cfi_endproc
 1113              	.LFE18:
 1114              		.size	SPI_ENCODER_PutArray, .-SPI_ENCODER_PutArray
 1115              		.section	.text.SPI_ENCODER_ClearFIFO,"ax",%progbits
 1116              		.align	2
 1117              		.global	SPI_ENCODER_ClearFIFO
 1118              		.thumb
 1119              		.thumb_func
 1120              		.type	SPI_ENCODER_ClearFIFO, %function
 1121              	SPI_ENCODER_ClearFIFO:
 1122              	.LFB19:
 976:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 977:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 978:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
 979:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ClearFIFO
 980:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
 981:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 982:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
 983:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear the RX and TX FIFO's of all data for a fresh start.
 984:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 985:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 38


 986:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 987:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 988:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
 989:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
 990:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 991:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
 992:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear status register of the component.
 993:Generated_Source\PSoC5/SPI_ENCODER.c **** *
 994:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
 995:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_ClearFIFO(void) 
 996:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1123              		.loc 1 996 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 8
 1126              		@ frame_needed = 1, uses_anonymous_args = 0
 1127 0000 80B5     		push	{r7, lr}
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 1131 0002 82B0     		sub	sp, sp, #8
 1132              		.cfi_def_cfa_offset 16
 1133 0004 00AF     		add	r7, sp, #0
 1134              		.cfi_def_cfa_register 7
 997:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 enableInterrupts;
 998:Generated_Source\PSoC5/SPI_ENCODER.c **** 
 999:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Clear Hardware RX FIFO */
1000:Generated_Source\PSoC5/SPI_ENCODER.c ****     while(0u !=(SPI_ENCODER_RX_STATUS_REG & SPI_ENCODER_STS_RX_FIFO_NOT_EMPTY))
 1135              		.loc 1 1000 0
 1136 0006 01E0     		b	.L73
 1137              	.L74:
1001:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
1002:Generated_Source\PSoC5/SPI_ENCODER.c ****         (void) CY_GET_REG16(SPI_ENCODER_RXDATA_PTR);
 1138              		.loc 1 1002 0
 1139 0008 1A4B     		ldr	r3, .L75
 1140 000a 1B88     		ldrh	r3, [r3]	@ movhi
 1141              	.L73:
1000:Generated_Source\PSoC5/SPI_ENCODER.c ****     {
 1142              		.loc 1 1000 0
 1143 000c 1A4B     		ldr	r3, .L75+4
 1144 000e 1B78     		ldrb	r3, [r3]
 1145 0010 DBB2     		uxtb	r3, r3
 1146 0012 03F02003 		and	r3, r3, #32
 1147 0016 002B     		cmp	r3, #0
 1148 0018 F6D1     		bne	.L74
1003:Generated_Source\PSoC5/SPI_ENCODER.c ****     }
1004:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1005:Generated_Source\PSoC5/SPI_ENCODER.c ****     enableInterrupts = CyEnterCriticalSection();
 1149              		.loc 1 1005 0
 1150 001a FFF7FEFF 		bl	CyEnterCriticalSection
 1151 001e 0346     		mov	r3, r0
 1152 0020 FB71     		strb	r3, [r7, #7]
1006:Generated_Source\PSoC5/SPI_ENCODER.c ****     /* Clear TX FIFO */
1007:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_AUX_CONTROL_DP0_REG |= ((uint8)  SPI_ENCODER_TX_FIFO_CLR);
 1153              		.loc 1 1007 0
 1154 0022 164A     		ldr	r2, .L75+8
 1155 0024 154B     		ldr	r3, .L75+8
 1156 0026 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 39


 1157 0028 DBB2     		uxtb	r3, r3
 1158 002a 43F00103 		orr	r3, r3, #1
 1159 002e DBB2     		uxtb	r3, r3
 1160 0030 1370     		strb	r3, [r2]
1008:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_AUX_CONTROL_DP0_REG &= ((uint8) ~SPI_ENCODER_TX_FIFO_CLR);
 1161              		.loc 1 1008 0
 1162 0032 124A     		ldr	r2, .L75+8
 1163 0034 114B     		ldr	r3, .L75+8
 1164 0036 1B78     		ldrb	r3, [r3]
 1165 0038 DBB2     		uxtb	r3, r3
 1166 003a 23F00103 		bic	r3, r3, #1
 1167 003e DBB2     		uxtb	r3, r3
 1168 0040 1370     		strb	r3, [r2]
1009:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1010:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_USE_SECOND_DATAPATH)
1011:Generated_Source\PSoC5/SPI_ENCODER.c ****         /* Clear TX FIFO for 2nd Datapath */
1012:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_AUX_CONTROL_DP1_REG |= ((uint8)  SPI_ENCODER_TX_FIFO_CLR);
 1169              		.loc 1 1012 0
 1170 0042 0F4A     		ldr	r2, .L75+12
 1171 0044 0E4B     		ldr	r3, .L75+12
 1172 0046 1B78     		ldrb	r3, [r3]
 1173 0048 DBB2     		uxtb	r3, r3
 1174 004a 43F00103 		orr	r3, r3, #1
 1175 004e DBB2     		uxtb	r3, r3
 1176 0050 1370     		strb	r3, [r2]
1013:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_AUX_CONTROL_DP1_REG &= ((uint8) ~SPI_ENCODER_TX_FIFO_CLR);
 1177              		.loc 1 1013 0
 1178 0052 0B4A     		ldr	r2, .L75+12
 1179 0054 0A4B     		ldr	r3, .L75+12
 1180 0056 1B78     		ldrb	r3, [r3]
 1181 0058 DBB2     		uxtb	r3, r3
 1182 005a 23F00103 		bic	r3, r3, #1
 1183 005e DBB2     		uxtb	r3, r3
 1184 0060 1370     		strb	r3, [r2]
1014:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_USE_SECOND_DATAPATH) */
1015:Generated_Source\PSoC5/SPI_ENCODER.c ****     CyExitCriticalSection(enableInterrupts);
 1185              		.loc 1 1015 0
 1186 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1187 0064 1846     		mov	r0, r3
 1188 0066 FFF7FEFF 		bl	CyExitCriticalSection
1016:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1189              		.loc 1 1016 0
 1190 006a 00BF     		nop
 1191 006c 0837     		adds	r7, r7, #8
 1192              		.cfi_def_cfa_offset 8
 1193 006e BD46     		mov	sp, r7
 1194              		.cfi_def_cfa_register 13
 1195              		@ sp needed
 1196 0070 80BD     		pop	{r7, pc}
 1197              	.L76:
 1198 0072 00BF     		.align	2
 1199              	.L75:
 1200 0074 52640040 		.word	1073767506
 1201 0078 6C640040 		.word	1073767532
 1202 007c 92640040 		.word	1073767570
 1203 0080 93640040 		.word	1073767571
 1204              		.cfi_endproc
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 40


 1205              	.LFE19:
 1206              		.size	SPI_ENCODER_ClearFIFO, .-SPI_ENCODER_ClearFIFO
 1207              		.section	.text.SPI_ENCODER_EnableInt,"ax",%progbits
 1208              		.align	2
 1209              		.global	SPI_ENCODER_EnableInt
 1210              		.thumb
 1211              		.thumb_func
 1212              		.type	SPI_ENCODER_EnableInt, %function
 1213              	SPI_ENCODER_EnableInt:
 1214              	.LFB20:
1017:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1018:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1019:Generated_Source\PSoC5/SPI_ENCODER.c **** /* Following functions are for version Compatibility, they are obsolete.
1020:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Please do not use it in new projects.
1021:Generated_Source\PSoC5/SPI_ENCODER.c **** */
1022:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1023:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1024:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
1025:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_EnableInt
1026:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
1027:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1028:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
1029:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable internal interrupt generation.
1030:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1031:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
1032:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1033:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1034:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
1035:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1036:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1037:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
1038:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enable the internal interrupt output -or- the interrupt component itself.
1039:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1040:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
1041:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_EnableInt(void) 
1042:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1215              		.loc 1 1042 0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 0
 1218              		@ frame_needed = 1, uses_anonymous_args = 0
 1219 0000 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 0002 00AF     		add	r7, sp, #0
 1224              		.cfi_def_cfa_register 7
1043:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_EnableRxInt();
 1225              		.loc 1 1043 0
 1226 0004 FFF7FEFF 		bl	SPI_ENCODER_EnableRxInt
1044:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_EnableTxInt();
 1227              		.loc 1 1044 0
 1228 0008 FFF7FEFF 		bl	SPI_ENCODER_EnableTxInt
1045:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1229              		.loc 1 1045 0
 1230 000c 00BF     		nop
 1231 000e 80BD     		pop	{r7, pc}
 1232              		.cfi_endproc
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 41


 1233              	.LFE20:
 1234              		.size	SPI_ENCODER_EnableInt, .-SPI_ENCODER_EnableInt
 1235              		.section	.text.SPI_ENCODER_DisableInt,"ax",%progbits
 1236              		.align	2
 1237              		.global	SPI_ENCODER_DisableInt
 1238              		.thumb
 1239              		.thumb_func
 1240              		.type	SPI_ENCODER_DisableInt, %function
 1241              	SPI_ENCODER_DisableInt:
 1242              	.LFB21:
1046:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1047:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1048:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
1049:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_DisableInt
1050:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
1051:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1052:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
1053:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable internal interrupt generation.
1054:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1055:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
1056:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1057:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1058:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
1059:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1060:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1061:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
1062:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Disable the internal interrupt output -or- the interrupt component itself.
1063:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1064:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
1065:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_DisableInt(void) 
1066:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1243              		.loc 1 1066 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 1, uses_anonymous_args = 0
 1247 0000 80B5     		push	{r7, lr}
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 7, -8
 1250              		.cfi_offset 14, -4
 1251 0002 00AF     		add	r7, sp, #0
 1252              		.cfi_def_cfa_register 7
1067:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_DisableTxInt();
 1253              		.loc 1 1067 0
 1254 0004 FFF7FEFF 		bl	SPI_ENCODER_DisableTxInt
1068:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_DisableRxInt();
 1255              		.loc 1 1068 0
 1256 0008 FFF7FEFF 		bl	SPI_ENCODER_DisableRxInt
1069:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1257              		.loc 1 1069 0
 1258 000c 00BF     		nop
 1259 000e 80BD     		pop	{r7, pc}
 1260              		.cfi_endproc
 1261              	.LFE21:
 1262              		.size	SPI_ENCODER_DisableInt, .-SPI_ENCODER_DisableInt
 1263              		.section	.text.SPI_ENCODER_SetInterruptMode,"ax",%progbits
 1264              		.align	2
 1265              		.global	SPI_ENCODER_SetInterruptMode
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 42


 1266              		.thumb
 1267              		.thumb_func
 1268              		.type	SPI_ENCODER_SetInterruptMode, %function
 1269              	SPI_ENCODER_SetInterruptMode:
 1270              	.LFB22:
1070:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1071:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1072:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
1073:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_SetInterruptMode
1074:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
1075:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1076:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
1077:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Configure which status bits trigger an interrupt event.
1078:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1079:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
1080:Generated_Source\PSoC5/SPI_ENCODER.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
1081:Generated_Source\PSoC5/SPI_ENCODER.c **** *  header file).
1082:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1083:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
1084:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1085:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1086:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
1087:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Enables the output of specific status bits to the interrupt controller.
1088:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1089:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
1090:Generated_Source\PSoC5/SPI_ENCODER.c **** void SPI_ENCODER_SetInterruptMode(uint8 intSrc) 
1091:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1271              		.loc 1 1091 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 8
 1274              		@ frame_needed = 1, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276 0000 80B4     		push	{r7}
 1277              		.cfi_def_cfa_offset 4
 1278              		.cfi_offset 7, -4
 1279 0002 83B0     		sub	sp, sp, #12
 1280              		.cfi_def_cfa_offset 16
 1281 0004 00AF     		add	r7, sp, #0
 1282              		.cfi_def_cfa_register 7
 1283 0006 0346     		mov	r3, r0
 1284 0008 FB71     		strb	r3, [r7, #7]
1092:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_TX_STATUS_MASK_REG  = (intSrc & ((uint8) ~SPI_ENCODER_STS_SPI_IDLE));
 1285              		.loc 1 1092 0
 1286 000a 074A     		ldr	r2, .L80
 1287 000c FB79     		ldrb	r3, [r7, #7]
 1288 000e 23F01003 		bic	r3, r3, #16
 1289 0012 DBB2     		uxtb	r3, r3
 1290 0014 1370     		strb	r3, [r2]
1093:Generated_Source\PSoC5/SPI_ENCODER.c ****     SPI_ENCODER_RX_STATUS_MASK_REG  =  intSrc;
 1291              		.loc 1 1093 0
 1292 0016 054A     		ldr	r2, .L80+4
 1293 0018 FB79     		ldrb	r3, [r7, #7]
 1294 001a 1370     		strb	r3, [r2]
1094:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1295              		.loc 1 1094 0
 1296 001c 00BF     		nop
 1297 001e 0C37     		adds	r7, r7, #12
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 43


 1298              		.cfi_def_cfa_offset 4
 1299 0020 BD46     		mov	sp, r7
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 0022 80BC     		pop	{r7}
 1303              		.cfi_restore 7
 1304              		.cfi_def_cfa_offset 0
 1305 0024 7047     		bx	lr
 1306              	.L81:
 1307 0026 00BF     		.align	2
 1308              	.L80:
 1309 0028 8F640040 		.word	1073767567
 1310 002c 8C640040 		.word	1073767564
 1311              		.cfi_endproc
 1312              	.LFE22:
 1313              		.size	SPI_ENCODER_SetInterruptMode, .-SPI_ENCODER_SetInterruptMode
 1314              		.section	.text.SPI_ENCODER_ReadStatus,"ax",%progbits
 1315              		.align	2
 1316              		.global	SPI_ENCODER_ReadStatus
 1317              		.thumb
 1318              		.thumb_func
 1319              		.type	SPI_ENCODER_ReadStatus, %function
 1320              	SPI_ENCODER_ReadStatus:
 1321              	.LFB23:
1095:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1096:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1097:Generated_Source\PSoC5/SPI_ENCODER.c **** /*******************************************************************************
1098:Generated_Source\PSoC5/SPI_ENCODER.c **** * Function Name: SPI_ENCODER_ReadStatus
1099:Generated_Source\PSoC5/SPI_ENCODER.c **** ********************************************************************************
1100:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1101:Generated_Source\PSoC5/SPI_ENCODER.c **** * Summary:
1102:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Read the status register for the component.
1103:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1104:Generated_Source\PSoC5/SPI_ENCODER.c **** * Parameters:
1105:Generated_Source\PSoC5/SPI_ENCODER.c **** *  None.
1106:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1107:Generated_Source\PSoC5/SPI_ENCODER.c **** * Return:
1108:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Contents of the status register.
1109:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1110:Generated_Source\PSoC5/SPI_ENCODER.c **** * Global variables:
1111:Generated_Source\PSoC5/SPI_ENCODER.c **** *  SPI_ENCODER_swStatus - used to store in software status register,
1112:Generated_Source\PSoC5/SPI_ENCODER.c **** *  modified every function call - resets to zero.
1113:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1114:Generated_Source\PSoC5/SPI_ENCODER.c **** * Theory:
1115:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Allows the user and the API to read the status register for error detection
1116:Generated_Source\PSoC5/SPI_ENCODER.c **** *  and flow control.
1117:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1118:Generated_Source\PSoC5/SPI_ENCODER.c **** * Side Effects:
1119:Generated_Source\PSoC5/SPI_ENCODER.c **** *  Clear status register of the component.
1120:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1121:Generated_Source\PSoC5/SPI_ENCODER.c **** * Reentrant:
1122:Generated_Source\PSoC5/SPI_ENCODER.c **** *  No.
1123:Generated_Source\PSoC5/SPI_ENCODER.c **** *
1124:Generated_Source\PSoC5/SPI_ENCODER.c **** *******************************************************************************/
1125:Generated_Source\PSoC5/SPI_ENCODER.c **** uint8 SPI_ENCODER_ReadStatus(void) 
1126:Generated_Source\PSoC5/SPI_ENCODER.c **** {
 1322              		.loc 1 1126 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 44


 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 8
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326 0000 80B5     		push	{r7, lr}
 1327              		.cfi_def_cfa_offset 8
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330 0002 82B0     		sub	sp, sp, #8
 1331              		.cfi_def_cfa_offset 16
 1332 0004 00AF     		add	r7, sp, #0
 1333              		.cfi_def_cfa_register 7
1127:Generated_Source\PSoC5/SPI_ENCODER.c ****     uint8 tmpStatus;
1128:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1129:Generated_Source\PSoC5/SPI_ENCODER.c ****     #if(SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED || SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED)
1130:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1131:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_DisableInt();
 1334              		.loc 1 1131 0
 1335 0006 FFF7FEFF 		bl	SPI_ENCODER_DisableInt
1132:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1133:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus  = SPI_ENCODER_GET_STATUS_RX(SPI_ENCODER_swStatusRx);
 1336              		.loc 1 1133 0
 1337 000a 154B     		ldr	r3, .L84
 1338 000c 1B78     		ldrb	r3, [r3]
 1339 000e DAB2     		uxtb	r2, r3
 1340 0010 144B     		ldr	r3, .L84+4
 1341 0012 1B78     		ldrb	r3, [r3]
 1342 0014 DBB2     		uxtb	r3, r3
 1343 0016 03F04003 		and	r3, r3, #64
 1344 001a DBB2     		uxtb	r3, r3
 1345 001c 1343     		orrs	r3, r3, r2
 1346 001e FB71     		strb	r3, [r7, #7]
1134:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus |= SPI_ENCODER_GET_STATUS_TX(SPI_ENCODER_swStatusTx);
 1347              		.loc 1 1134 0
 1348 0020 114B     		ldr	r3, .L84+8
 1349 0022 1B78     		ldrb	r3, [r3]
 1350 0024 DAB2     		uxtb	r2, r3
 1351 0026 114B     		ldr	r3, .L84+12
 1352 0028 1B78     		ldrb	r3, [r3]
 1353 002a DBB2     		uxtb	r3, r3
 1354 002c 03F00903 		and	r3, r3, #9
 1355 0030 DBB2     		uxtb	r3, r3
 1356 0032 1343     		orrs	r3, r3, r2
 1357 0034 DAB2     		uxtb	r2, r3
 1358 0036 FB79     		ldrb	r3, [r7, #7]
 1359 0038 1343     		orrs	r3, r3, r2
 1360 003a FB71     		strb	r3, [r7, #7]
1135:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus &= ((uint8) ~SPI_ENCODER_STS_SPI_IDLE);
 1361              		.loc 1 1135 0
 1362 003c FB79     		ldrb	r3, [r7, #7]
 1363 003e 23F01003 		bic	r3, r3, #16
 1364 0042 FB71     		strb	r3, [r7, #7]
1136:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1137:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_swStatusTx = 0u;
 1365              		.loc 1 1137 0
 1366 0044 094B     		ldr	r3, .L84+12
 1367 0046 0022     		movs	r2, #0
 1368 0048 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 45


1138:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_swStatusRx = 0u;
 1369              		.loc 1 1138 0
 1370 004a 064B     		ldr	r3, .L84+4
 1371 004c 0022     		movs	r2, #0
 1372 004e 1A70     		strb	r2, [r3]
1139:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1140:Generated_Source\PSoC5/SPI_ENCODER.c ****         SPI_ENCODER_EnableInt();
 1373              		.loc 1 1140 0
 1374 0050 FFF7FEFF 		bl	SPI_ENCODER_EnableInt
1141:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1142:Generated_Source\PSoC5/SPI_ENCODER.c ****     #else
1143:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1144:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus  = SPI_ENCODER_RX_STATUS_REG;
1145:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus |= SPI_ENCODER_TX_STATUS_REG;
1146:Generated_Source\PSoC5/SPI_ENCODER.c ****         tmpStatus &= ((uint8) ~SPI_ENCODER_STS_SPI_IDLE);
1147:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1148:Generated_Source\PSoC5/SPI_ENCODER.c ****     #endif /* (SPI_ENCODER_TX_SOFTWARE_BUF_ENABLED || SPI_ENCODER_RX_SOFTWARE_BUF_ENABLED) */
1149:Generated_Source\PSoC5/SPI_ENCODER.c **** 
1150:Generated_Source\PSoC5/SPI_ENCODER.c ****     return(tmpStatus);
 1375              		.loc 1 1150 0
 1376 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1151:Generated_Source\PSoC5/SPI_ENCODER.c **** }
 1377              		.loc 1 1151 0
 1378 0056 1846     		mov	r0, r3
 1379 0058 0837     		adds	r7, r7, #8
 1380              		.cfi_def_cfa_offset 8
 1381 005a BD46     		mov	sp, r7
 1382              		.cfi_def_cfa_register 13
 1383              		@ sp needed
 1384 005c 80BD     		pop	{r7, pc}
 1385              	.L85:
 1386 005e 00BF     		.align	2
 1387              	.L84:
 1388 0060 6C640040 		.word	1073767532
 1389 0064 00000000 		.word	SPI_ENCODER_swStatusRx
 1390 0068 6F640040 		.word	1073767535
 1391 006c 00000000 		.word	SPI_ENCODER_swStatusTx
 1392              		.cfi_endproc
 1393              	.LFE23:
 1394              		.size	SPI_ENCODER_ReadStatus, .-SPI_ENCODER_ReadStatus
 1395              		.text
 1396              	.Letext0:
 1397              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1398              		.section	.debug_info,"",%progbits
 1399              	.Ldebug_info0:
 1400 0000 83040000 		.4byte	0x483
 1401 0004 0400     		.2byte	0x4
 1402 0006 00000000 		.4byte	.Ldebug_abbrev0
 1403 000a 04       		.byte	0x4
 1404 000b 01       		.uleb128 0x1
 1405 000c 70000000 		.4byte	.LASF60
 1406 0010 0C       		.byte	0xc
 1407 0011 AC030000 		.4byte	.LASF61
 1408 0015 17020000 		.4byte	.LASF62
 1409 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1410 001d 00000000 		.4byte	0
 1411 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 46


 1412 0025 02       		.uleb128 0x2
 1413 0026 01       		.byte	0x1
 1414 0027 06       		.byte	0x6
 1415 0028 75010000 		.4byte	.LASF0
 1416 002c 02       		.uleb128 0x2
 1417 002d 01       		.byte	0x1
 1418 002e 08       		.byte	0x8
 1419 002f 9E030000 		.4byte	.LASF1
 1420 0033 02       		.uleb128 0x2
 1421 0034 02       		.byte	0x2
 1422 0035 05       		.byte	0x5
 1423 0036 D1030000 		.4byte	.LASF2
 1424 003a 02       		.uleb128 0x2
 1425 003b 02       		.byte	0x2
 1426 003c 07       		.byte	0x7
 1427 003d B0020000 		.4byte	.LASF3
 1428 0041 02       		.uleb128 0x2
 1429 0042 04       		.byte	0x4
 1430 0043 05       		.byte	0x5
 1431 0044 92010000 		.4byte	.LASF4
 1432 0048 02       		.uleb128 0x2
 1433 0049 04       		.byte	0x4
 1434 004a 07       		.byte	0x7
 1435 004b 80020000 		.4byte	.LASF5
 1436 004f 02       		.uleb128 0x2
 1437 0050 08       		.byte	0x8
 1438 0051 05       		.byte	0x5
 1439 0052 67010000 		.4byte	.LASF6
 1440 0056 02       		.uleb128 0x2
 1441 0057 08       		.byte	0x8
 1442 0058 07       		.byte	0x7
 1443 0059 FE000000 		.4byte	.LASF7
 1444 005d 03       		.uleb128 0x3
 1445 005e 04       		.byte	0x4
 1446 005f 05       		.byte	0x5
 1447 0060 696E7400 		.ascii	"int\000"
 1448 0064 02       		.uleb128 0x2
 1449 0065 04       		.byte	0x4
 1450 0066 07       		.byte	0x7
 1451 0067 5C020000 		.4byte	.LASF8
 1452 006b 04       		.uleb128 0x4
 1453 006c D4010000 		.4byte	.LASF9
 1454 0070 02       		.byte	0x2
 1455 0071 E401     		.2byte	0x1e4
 1456 0073 2C000000 		.4byte	0x2c
 1457 0077 04       		.uleb128 0x4
 1458 0078 00000000 		.4byte	.LASF10
 1459 007c 02       		.byte	0x2
 1460 007d E501     		.2byte	0x1e5
 1461 007f 3A000000 		.4byte	0x3a
 1462 0083 04       		.uleb128 0x4
 1463 0084 F9010000 		.4byte	.LASF11
 1464 0088 02       		.byte	0x2
 1465 0089 E601     		.2byte	0x1e6
 1466 008b 48000000 		.4byte	0x48
 1467 008f 02       		.uleb128 0x2
 1468 0090 04       		.byte	0x4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 47


 1469 0091 04       		.byte	0x4
 1470 0092 93030000 		.4byte	.LASF12
 1471 0096 02       		.uleb128 0x2
 1472 0097 08       		.byte	0x8
 1473 0098 04       		.byte	0x4
 1474 0099 DA010000 		.4byte	.LASF13
 1475 009d 02       		.uleb128 0x2
 1476 009e 01       		.byte	0x1
 1477 009f 08       		.byte	0x8
 1478 00a0 0B040000 		.4byte	.LASF14
 1479 00a4 04       		.uleb128 0x4
 1480 00a5 99030000 		.4byte	.LASF15
 1481 00a9 02       		.byte	0x2
 1482 00aa 8E02     		.2byte	0x28e
 1483 00ac B0000000 		.4byte	0xb0
 1484 00b0 05       		.uleb128 0x5
 1485 00b1 6B000000 		.4byte	0x6b
 1486 00b5 04       		.uleb128 0x4
 1487 00b6 CE010000 		.4byte	.LASF16
 1488 00ba 02       		.byte	0x2
 1489 00bb 8F02     		.2byte	0x28f
 1490 00bd C1000000 		.4byte	0xc1
 1491 00c1 05       		.uleb128 0x5
 1492 00c2 77000000 		.4byte	0x77
 1493 00c6 04       		.uleb128 0x4
 1494 00c7 D3020000 		.4byte	.LASF17
 1495 00cb 02       		.byte	0x2
 1496 00cc 9002     		.2byte	0x290
 1497 00ce D2000000 		.4byte	0xd2
 1498 00d2 05       		.uleb128 0x5
 1499 00d3 83000000 		.4byte	0x83
 1500 00d7 02       		.uleb128 0x2
 1501 00d8 08       		.byte	0x8
 1502 00d9 04       		.byte	0x4
 1503 00da F9020000 		.4byte	.LASF18
 1504 00de 02       		.uleb128 0x2
 1505 00df 04       		.byte	0x4
 1506 00e0 07       		.byte	0x7
 1507 00e1 F0020000 		.4byte	.LASF19
 1508 00e5 06       		.uleb128 0x6
 1509 00e6 81010000 		.4byte	.LASF20
 1510 00ea 01       		.byte	0x1
 1511 00eb 3F       		.byte	0x3f
 1512 00ec 00000000 		.4byte	.LFB0
 1513 00f0 70000000 		.4byte	.LFE0-.LFB0
 1514 00f4 01       		.uleb128 0x1
 1515 00f5 9C       		.byte	0x9c
 1516 00f6 07       		.uleb128 0x7
 1517 00f7 05030000 		.4byte	.LASF22
 1518 00fb 01       		.byte	0x1
 1519 00fc 78       		.byte	0x78
 1520 00fd 00000000 		.4byte	.LFB1
 1521 0101 64000000 		.4byte	.LFE1-.LFB1
 1522 0105 01       		.uleb128 0x1
 1523 0106 9C       		.byte	0x9c
 1524 0107 1A010000 		.4byte	0x11a
 1525 010b 08       		.uleb128 0x8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 48


 1526 010c 8A040000 		.4byte	.LASF24
 1527 0110 01       		.byte	0x1
 1528 0111 7A       		.byte	0x7a
 1529 0112 6B000000 		.4byte	0x6b
 1530 0116 02       		.uleb128 0x2
 1531 0117 91       		.byte	0x91
 1532 0118 77       		.sleb128 -9
 1533 0119 00       		.byte	0
 1534 011a 06       		.uleb128 0x6
 1535 011b B4040000 		.4byte	.LASF21
 1536 011f 01       		.byte	0x1
 1537 0120 A3       		.byte	0xa3
 1538 0121 00000000 		.4byte	.LFB2
 1539 0125 24000000 		.4byte	.LFE2-.LFB2
 1540 0129 01       		.uleb128 0x1
 1541 012a 9C       		.byte	0x9c
 1542 012b 07       		.uleb128 0x7
 1543 012c 28040000 		.4byte	.LASF23
 1544 0130 01       		.byte	0x1
 1545 0131 C0       		.byte	0xc0
 1546 0132 00000000 		.4byte	.LFB3
 1547 0136 50000000 		.4byte	.LFE3-.LFB3
 1548 013a 01       		.uleb128 0x1
 1549 013b 9C       		.byte	0x9c
 1550 013c 4F010000 		.4byte	0x14f
 1551 0140 08       		.uleb128 0x8
 1552 0141 8A040000 		.4byte	.LASF24
 1553 0145 01       		.byte	0x1
 1554 0146 C2       		.byte	0xc2
 1555 0147 6B000000 		.4byte	0x6b
 1556 014b 02       		.uleb128 0x2
 1557 014c 91       		.byte	0x91
 1558 014d 77       		.sleb128 -9
 1559 014e 00       		.byte	0
 1560 014f 09       		.uleb128 0x9
 1561 0150 39000000 		.4byte	.LASF25
 1562 0154 01       		.byte	0x1
 1563 0155 E3       		.byte	0xe3
 1564 0156 00000000 		.4byte	.LFB4
 1565 015a 0C000000 		.4byte	.LFE4-.LFB4
 1566 015e 01       		.uleb128 0x1
 1567 015f 9C       		.byte	0x9c
 1568 0160 09       		.uleb128 0x9
 1569 0161 10040000 		.4byte	.LASF26
 1570 0165 01       		.byte	0x1
 1571 0166 FC       		.byte	0xfc
 1572 0167 00000000 		.4byte	.LFB5
 1573 016b 18000000 		.4byte	.LFE5-.LFB5
 1574 016f 01       		.uleb128 0x1
 1575 0170 9C       		.byte	0x9c
 1576 0171 0A       		.uleb128 0xa
 1577 0172 C6040000 		.4byte	.LASF27
 1578 0176 01       		.byte	0x1
 1579 0177 1501     		.2byte	0x115
 1580 0179 00000000 		.4byte	.LFB6
 1581 017d 0C000000 		.4byte	.LFE6-.LFB6
 1582 0181 01       		.uleb128 0x1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 49


 1583 0182 9C       		.byte	0x9c
 1584 0183 0A       		.uleb128 0xa
 1585 0184 34010000 		.4byte	.LASF28
 1586 0188 01       		.byte	0x1
 1587 0189 2E01     		.2byte	0x12e
 1588 018b 00000000 		.4byte	.LFB7
 1589 018f 18000000 		.4byte	.LFE7-.LFB7
 1590 0193 01       		.uleb128 0x1
 1591 0194 9C       		.byte	0x9c
 1592 0195 0B       		.uleb128 0xb
 1593 0196 51000000 		.4byte	.LASF29
 1594 019a 01       		.byte	0x1
 1595 019b 4801     		.2byte	0x148
 1596 019d 00000000 		.4byte	.LFB8
 1597 01a1 20000000 		.4byte	.LFE8-.LFB8
 1598 01a5 01       		.uleb128 0x1
 1599 01a6 9C       		.byte	0x9c
 1600 01a7 BB010000 		.4byte	0x1bb
 1601 01ab 0C       		.uleb128 0xc
 1602 01ac CC020000 		.4byte	.LASF31
 1603 01b0 01       		.byte	0x1
 1604 01b1 4801     		.2byte	0x148
 1605 01b3 6B000000 		.4byte	0x6b
 1606 01b7 02       		.uleb128 0x2
 1607 01b8 91       		.byte	0x91
 1608 01b9 77       		.sleb128 -9
 1609 01ba 00       		.byte	0
 1610 01bb 0B       		.uleb128 0xb
 1611 01bc EC030000 		.4byte	.LASF30
 1612 01c0 01       		.byte	0x1
 1613 01c1 6001     		.2byte	0x160
 1614 01c3 00000000 		.4byte	.LFB9
 1615 01c7 20000000 		.4byte	.LFE9-.LFB9
 1616 01cb 01       		.uleb128 0x1
 1617 01cc 9C       		.byte	0x9c
 1618 01cd E1010000 		.4byte	0x1e1
 1619 01d1 0C       		.uleb128 0xc
 1620 01d2 CC020000 		.4byte	.LASF31
 1621 01d6 01       		.byte	0x1
 1622 01d7 6001     		.2byte	0x160
 1623 01d9 6B000000 		.4byte	0x6b
 1624 01dd 02       		.uleb128 0x2
 1625 01de 91       		.byte	0x91
 1626 01df 77       		.sleb128 -9
 1627 01e0 00       		.byte	0
 1628 01e1 0D       		.uleb128 0xd
 1629 01e2 07000000 		.4byte	.LASF33
 1630 01e6 01       		.byte	0x1
 1631 01e7 8201     		.2byte	0x182
 1632 01e9 6B000000 		.4byte	0x6b
 1633 01ed 00000000 		.4byte	.LFB10
 1634 01f1 1C000000 		.4byte	.LFE10-.LFB10
 1635 01f5 01       		.uleb128 0x1
 1636 01f6 9C       		.byte	0x9c
 1637 01f7 0B020000 		.4byte	0x20b
 1638 01fb 0E       		.uleb128 0xe
 1639 01fc 2A010000 		.4byte	.LASF32
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 50


 1640 0200 01       		.byte	0x1
 1641 0201 8401     		.2byte	0x184
 1642 0203 6B000000 		.4byte	0x6b
 1643 0207 02       		.uleb128 0x2
 1644 0208 91       		.byte	0x91
 1645 0209 77       		.sleb128 -9
 1646 020a 00       		.byte	0
 1647 020b 0F       		.uleb128 0xf
 1648 020c 92020000 		.4byte	.LASF34
 1649 0210 01       		.byte	0x1
 1650 0211 B501     		.2byte	0x1b5
 1651 0213 6B000000 		.4byte	0x6b
 1652 0217 00000000 		.4byte	.LFB11
 1653 021b 3C000000 		.4byte	.LFE11-.LFB11
 1654 021f 01       		.uleb128 0x1
 1655 0220 9C       		.byte	0x9c
 1656 0221 35020000 		.4byte	0x235
 1657 0225 0E       		.uleb128 0xe
 1658 0226 2A010000 		.4byte	.LASF32
 1659 022a 01       		.byte	0x1
 1660 022b B701     		.2byte	0x1b7
 1661 022d 6B000000 		.4byte	0x6b
 1662 0231 02       		.uleb128 0x2
 1663 0232 91       		.byte	0x91
 1664 0233 77       		.sleb128 -9
 1665 0234 00       		.byte	0
 1666 0235 0B       		.uleb128 0xb
 1667 0236 E1010000 		.4byte	.LASF35
 1668 023a 01       		.byte	0x1
 1669 023b EE01     		.2byte	0x1ee
 1670 023d 00000000 		.4byte	.LFB12
 1671 0241 34000000 		.4byte	.LFE12-.LFB12
 1672 0245 01       		.uleb128 0x1
 1673 0246 9C       		.byte	0x9c
 1674 0247 5B020000 		.4byte	0x25b
 1675 024b 0C       		.uleb128 0xc
 1676 024c DF040000 		.4byte	.LASF36
 1677 0250 01       		.byte	0x1
 1678 0251 EE01     		.2byte	0x1ee
 1679 0253 77000000 		.4byte	0x77
 1680 0257 02       		.uleb128 0x2
 1681 0258 91       		.byte	0x91
 1682 0259 76       		.sleb128 -10
 1683 025a 00       		.byte	0
 1684 025b 0F       		.uleb128 0xf
 1685 025c 9B010000 		.4byte	.LASF37
 1686 0260 01       		.byte	0x1
 1687 0261 5A02     		.2byte	0x25a
 1688 0263 77000000 		.4byte	0x77
 1689 0267 00000000 		.4byte	.LFB13
 1690 026b 78000000 		.4byte	.LFE13-.LFB13
 1691 026f 01       		.uleb128 0x1
 1692 0270 9C       		.byte	0x9c
 1693 0271 85020000 		.4byte	0x285
 1694 0275 0E       		.uleb128 0xe
 1695 0276 E5030000 		.4byte	.LASF38
 1696 027a 01       		.byte	0x1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 51


 1697 027b 5C02     		.2byte	0x25c
 1698 027d 77000000 		.4byte	0x77
 1699 0281 02       		.uleb128 0x2
 1700 0282 91       		.byte	0x91
 1701 0283 76       		.sleb128 -10
 1702 0284 00       		.byte	0
 1703 0285 0F       		.uleb128 0xf
 1704 0286 B2010000 		.4byte	.LASF39
 1705 028a 01       		.byte	0x1
 1706 028b 9A02     		.2byte	0x29a
 1707 028d 6B000000 		.4byte	0x6b
 1708 0291 00000000 		.4byte	.LFB14
 1709 0295 6C000000 		.4byte	.LFE14-.LFB14
 1710 0299 01       		.uleb128 0x1
 1711 029a 9C       		.byte	0x9c
 1712 029b AF020000 		.4byte	0x2af
 1713 029f 0E       		.uleb128 0xe
 1714 02a0 AB020000 		.4byte	.LASF40
 1715 02a4 01       		.byte	0x1
 1716 02a5 9C02     		.2byte	0x29c
 1717 02a7 6B000000 		.4byte	0x6b
 1718 02ab 02       		.uleb128 0x2
 1719 02ac 91       		.byte	0x91
 1720 02ad 77       		.sleb128 -9
 1721 02ae 00       		.byte	0
 1722 02af 0D       		.uleb128 0xd
 1723 02b0 18030000 		.4byte	.LASF41
 1724 02b4 01       		.byte	0x1
 1725 02b5 D702     		.2byte	0x2d7
 1726 02b7 6B000000 		.4byte	0x6b
 1727 02bb 00000000 		.4byte	.LFB15
 1728 02bf 40000000 		.4byte	.LFE15-.LFB15
 1729 02c3 01       		.uleb128 0x1
 1730 02c4 9C       		.byte	0x9c
 1731 02c5 D9020000 		.4byte	0x2d9
 1732 02c9 0E       		.uleb128 0xe
 1733 02ca AB020000 		.4byte	.LASF40
 1734 02ce 01       		.byte	0x1
 1735 02cf D902     		.2byte	0x2d9
 1736 02d1 6B000000 		.4byte	0x6b
 1737 02d5 02       		.uleb128 0x2
 1738 02d6 91       		.byte	0x91
 1739 02d7 77       		.sleb128 -9
 1740 02d8 00       		.byte	0
 1741 02d9 10       		.uleb128 0x10
 1742 02da 56040000 		.4byte	.LASF42
 1743 02de 01       		.byte	0x1
 1744 02df 2603     		.2byte	0x326
 1745 02e1 00000000 		.4byte	.LFB16
 1746 02e5 4C000000 		.4byte	.LFE16-.LFB16
 1747 02e9 01       		.uleb128 0x1
 1748 02ea 9C       		.byte	0x9c
 1749 02eb 11       		.uleb128 0x11
 1750 02ec 70040000 		.4byte	.LASF43
 1751 02f0 01       		.byte	0x1
 1752 02f1 5D03     		.2byte	0x35d
 1753 02f3 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 52


 1754 02f7 68000000 		.4byte	.LFE17-.LFB17
 1755 02fb 01       		.uleb128 0x1
 1756 02fc 9C       		.byte	0x9c
 1757 02fd 11030000 		.4byte	0x311
 1758 0301 0E       		.uleb128 0xe
 1759 0302 8A040000 		.4byte	.LASF24
 1760 0306 01       		.byte	0x1
 1761 0307 5F03     		.2byte	0x35f
 1762 0309 6B000000 		.4byte	0x6b
 1763 030d 02       		.uleb128 0x2
 1764 030e 91       		.byte	0x91
 1765 030f 77       		.sleb128 -9
 1766 0310 00       		.byte	0
 1767 0311 11       		.uleb128 0x11
 1768 0312 34030000 		.4byte	.LASF44
 1769 0316 01       		.byte	0x1
 1770 0317 C203     		.2byte	0x3c2
 1771 0319 00000000 		.4byte	.LFB18
 1772 031d 3C000000 		.4byte	.LFE18-.LFB18
 1773 0321 01       		.uleb128 0x1
 1774 0322 9C       		.byte	0x9c
 1775 0323 55030000 		.4byte	0x355
 1776 0327 0C       		.uleb128 0xc
 1777 0328 39040000 		.4byte	.LASF45
 1778 032c 01       		.byte	0x1
 1779 032d C203     		.2byte	0x3c2
 1780 032f 55030000 		.4byte	0x355
 1781 0333 02       		.uleb128 0x2
 1782 0334 91       		.byte	0x91
 1783 0335 6C       		.sleb128 -20
 1784 0336 0C       		.uleb128 0xc
 1785 0337 DB030000 		.4byte	.LASF46
 1786 033b 01       		.byte	0x1
 1787 033c C203     		.2byte	0x3c2
 1788 033e 6B000000 		.4byte	0x6b
 1789 0342 02       		.uleb128 0x2
 1790 0343 91       		.byte	0x91
 1791 0344 6B       		.sleb128 -21
 1792 0345 0E       		.uleb128 0xe
 1793 0346 C3020000 		.4byte	.LASF47
 1794 034a 01       		.byte	0x1
 1795 034b C503     		.2byte	0x3c5
 1796 034d 6B000000 		.4byte	0x6b
 1797 0351 02       		.uleb128 0x2
 1798 0352 91       		.byte	0x91
 1799 0353 77       		.sleb128 -9
 1800 0354 00       		.byte	0
 1801 0355 12       		.uleb128 0x12
 1802 0356 04       		.byte	0x4
 1803 0357 5B030000 		.4byte	0x35b
 1804 035b 13       		.uleb128 0x13
 1805 035c 77000000 		.4byte	0x77
 1806 0360 11       		.uleb128 0x11
 1807 0361 40040000 		.4byte	.LASF48
 1808 0365 01       		.byte	0x1
 1809 0366 E303     		.2byte	0x3e3
 1810 0368 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 53


 1811 036c 84000000 		.4byte	.LFE19-.LFB19
 1812 0370 01       		.uleb128 0x1
 1813 0371 9C       		.byte	0x9c
 1814 0372 86030000 		.4byte	0x386
 1815 0376 0E       		.uleb128 0xe
 1816 0377 8A040000 		.4byte	.LASF24
 1817 037b 01       		.byte	0x1
 1818 037c E503     		.2byte	0x3e5
 1819 037e 6B000000 		.4byte	0x6b
 1820 0382 02       		.uleb128 0x2
 1821 0383 91       		.byte	0x91
 1822 0384 77       		.sleb128 -9
 1823 0385 00       		.byte	0
 1824 0386 10       		.uleb128 0x10
 1825 0387 60030000 		.4byte	.LASF49
 1826 038b 01       		.byte	0x1
 1827 038c 1104     		.2byte	0x411
 1828 038e 00000000 		.4byte	.LFB20
 1829 0392 10000000 		.4byte	.LFE20-.LFB20
 1830 0396 01       		.uleb128 0x1
 1831 0397 9C       		.byte	0x9c
 1832 0398 10       		.uleb128 0x10
 1833 0399 49030000 		.4byte	.LASF50
 1834 039d 01       		.byte	0x1
 1835 039e 2904     		.2byte	0x429
 1836 03a0 00000000 		.4byte	.LFB21
 1837 03a4 10000000 		.4byte	.LFE21-.LFB21
 1838 03a8 01       		.uleb128 0x1
 1839 03a9 9C       		.byte	0x9c
 1840 03aa 0B       		.uleb128 0xb
 1841 03ab 76030000 		.4byte	.LASF51
 1842 03af 01       		.byte	0x1
 1843 03b0 4204     		.2byte	0x442
 1844 03b2 00000000 		.4byte	.LFB22
 1845 03b6 30000000 		.4byte	.LFE22-.LFB22
 1846 03ba 01       		.uleb128 0x1
 1847 03bb 9C       		.byte	0x9c
 1848 03bc D0030000 		.4byte	0x3d0
 1849 03c0 0C       		.uleb128 0xc
 1850 03c1 CC020000 		.4byte	.LASF31
 1851 03c5 01       		.byte	0x1
 1852 03c6 4204     		.2byte	0x442
 1853 03c8 6B000000 		.4byte	0x6b
 1854 03cc 02       		.uleb128 0x2
 1855 03cd 91       		.byte	0x91
 1856 03ce 77       		.sleb128 -9
 1857 03cf 00       		.byte	0
 1858 03d0 0F       		.uleb128 0xf
 1859 03d1 69020000 		.4byte	.LASF52
 1860 03d5 01       		.byte	0x1
 1861 03d6 6504     		.2byte	0x465
 1862 03d8 6B000000 		.4byte	0x6b
 1863 03dc 00000000 		.4byte	.LFB23
 1864 03e0 70000000 		.4byte	.LFE23-.LFB23
 1865 03e4 01       		.uleb128 0x1
 1866 03e5 9C       		.byte	0x9c
 1867 03e6 FA030000 		.4byte	0x3fa
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 54


 1868 03ea 0E       		.uleb128 0xe
 1869 03eb 2A010000 		.4byte	.LASF32
 1870 03ef 01       		.byte	0x1
 1871 03f0 6704     		.2byte	0x467
 1872 03f2 6B000000 		.4byte	0x6b
 1873 03f6 02       		.uleb128 0x2
 1874 03f7 91       		.byte	0x91
 1875 03f8 77       		.sleb128 -9
 1876 03f9 00       		.byte	0
 1877 03fa 14       		.uleb128 0x14
 1878 03fb E6040000 		.4byte	.LASF53
 1879 03ff 01       		.byte	0x1
 1880 0400 22       		.byte	0x22
 1881 0401 6B000000 		.4byte	0x6b
 1882 0405 05       		.uleb128 0x5
 1883 0406 03       		.byte	0x3
 1884 0407 00000000 		.4byte	SPI_ENCODER_initVar
 1885 040b 14       		.uleb128 0x14
 1886 040c 00020000 		.4byte	.LASF54
 1887 0410 01       		.byte	0x1
 1888 0411 24       		.byte	0x24
 1889 0412 B0000000 		.4byte	0xb0
 1890 0416 05       		.uleb128 0x5
 1891 0417 03       		.byte	0x3
 1892 0418 00000000 		.4byte	SPI_ENCODER_swStatusTx
 1893 041c 14       		.uleb128 0x14
 1894 041d D9020000 		.4byte	.LASF55
 1895 0421 01       		.byte	0x1
 1896 0422 25       		.byte	0x25
 1897 0423 B0000000 		.4byte	0xb0
 1898 0427 05       		.uleb128 0x5
 1899 0428 03       		.byte	0x3
 1900 0429 00000000 		.4byte	SPI_ENCODER_swStatusRx
 1901 042d 15       		.uleb128 0x15
 1902 042e C1000000 		.4byte	0xc1
 1903 0432 3D040000 		.4byte	0x43d
 1904 0436 16       		.uleb128 0x16
 1905 0437 DE000000 		.4byte	0xde
 1906 043b 09       		.byte	0x9
 1907 043c 00       		.byte	0
 1908 043d 14       		.uleb128 0x14
 1909 043e 15010000 		.4byte	.LASF56
 1910 0442 01       		.byte	0x1
 1911 0443 1C       		.byte	0x1c
 1912 0444 4E040000 		.4byte	0x44e
 1913 0448 05       		.uleb128 0x5
 1914 0449 03       		.byte	0x3
 1915 044a 00000000 		.4byte	SPI_ENCODER_rxBuffer
 1916 044e 05       		.uleb128 0x5
 1917 044f 2D040000 		.4byte	0x42d
 1918 0453 14       		.uleb128 0x14
 1919 0454 20000000 		.4byte	.LASF57
 1920 0458 01       		.byte	0x1
 1921 0459 1E       		.byte	0x1e
 1922 045a B0000000 		.4byte	0xb0
 1923 045e 05       		.uleb128 0x5
 1924 045f 03       		.byte	0x3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 55


 1925 0460 00000000 		.4byte	SPI_ENCODER_rxBufferRead
 1926 0464 14       		.uleb128 0x14
 1927 0465 4D010000 		.4byte	.LASF58
 1928 0469 01       		.byte	0x1
 1929 046a 1F       		.byte	0x1f
 1930 046b B0000000 		.4byte	0xb0
 1931 046f 05       		.uleb128 0x5
 1932 0470 03       		.byte	0x3
 1933 0471 00000000 		.4byte	SPI_ENCODER_rxBufferWrite
 1934 0475 14       		.uleb128 0x14
 1935 0476 9B040000 		.4byte	.LASF59
 1936 047a 01       		.byte	0x1
 1937 047b 1D       		.byte	0x1d
 1938 047c B0000000 		.4byte	0xb0
 1939 0480 05       		.uleb128 0x5
 1940 0481 03       		.byte	0x3
 1941 0482 00000000 		.4byte	SPI_ENCODER_rxBufferFull
 1942 0486 00       		.byte	0
 1943              		.section	.debug_abbrev,"",%progbits
 1944              	.Ldebug_abbrev0:
 1945 0000 01       		.uleb128 0x1
 1946 0001 11       		.uleb128 0x11
 1947 0002 01       		.byte	0x1
 1948 0003 25       		.uleb128 0x25
 1949 0004 0E       		.uleb128 0xe
 1950 0005 13       		.uleb128 0x13
 1951 0006 0B       		.uleb128 0xb
 1952 0007 03       		.uleb128 0x3
 1953 0008 0E       		.uleb128 0xe
 1954 0009 1B       		.uleb128 0x1b
 1955 000a 0E       		.uleb128 0xe
 1956 000b 55       		.uleb128 0x55
 1957 000c 17       		.uleb128 0x17
 1958 000d 11       		.uleb128 0x11
 1959 000e 01       		.uleb128 0x1
 1960 000f 10       		.uleb128 0x10
 1961 0010 17       		.uleb128 0x17
 1962 0011 00       		.byte	0
 1963 0012 00       		.byte	0
 1964 0013 02       		.uleb128 0x2
 1965 0014 24       		.uleb128 0x24
 1966 0015 00       		.byte	0
 1967 0016 0B       		.uleb128 0xb
 1968 0017 0B       		.uleb128 0xb
 1969 0018 3E       		.uleb128 0x3e
 1970 0019 0B       		.uleb128 0xb
 1971 001a 03       		.uleb128 0x3
 1972 001b 0E       		.uleb128 0xe
 1973 001c 00       		.byte	0
 1974 001d 00       		.byte	0
 1975 001e 03       		.uleb128 0x3
 1976 001f 24       		.uleb128 0x24
 1977 0020 00       		.byte	0
 1978 0021 0B       		.uleb128 0xb
 1979 0022 0B       		.uleb128 0xb
 1980 0023 3E       		.uleb128 0x3e
 1981 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 56


 1982 0025 03       		.uleb128 0x3
 1983 0026 08       		.uleb128 0x8
 1984 0027 00       		.byte	0
 1985 0028 00       		.byte	0
 1986 0029 04       		.uleb128 0x4
 1987 002a 16       		.uleb128 0x16
 1988 002b 00       		.byte	0
 1989 002c 03       		.uleb128 0x3
 1990 002d 0E       		.uleb128 0xe
 1991 002e 3A       		.uleb128 0x3a
 1992 002f 0B       		.uleb128 0xb
 1993 0030 3B       		.uleb128 0x3b
 1994 0031 05       		.uleb128 0x5
 1995 0032 49       		.uleb128 0x49
 1996 0033 13       		.uleb128 0x13
 1997 0034 00       		.byte	0
 1998 0035 00       		.byte	0
 1999 0036 05       		.uleb128 0x5
 2000 0037 35       		.uleb128 0x35
 2001 0038 00       		.byte	0
 2002 0039 49       		.uleb128 0x49
 2003 003a 13       		.uleb128 0x13
 2004 003b 00       		.byte	0
 2005 003c 00       		.byte	0
 2006 003d 06       		.uleb128 0x6
 2007 003e 2E       		.uleb128 0x2e
 2008 003f 00       		.byte	0
 2009 0040 3F       		.uleb128 0x3f
 2010 0041 19       		.uleb128 0x19
 2011 0042 03       		.uleb128 0x3
 2012 0043 0E       		.uleb128 0xe
 2013 0044 3A       		.uleb128 0x3a
 2014 0045 0B       		.uleb128 0xb
 2015 0046 3B       		.uleb128 0x3b
 2016 0047 0B       		.uleb128 0xb
 2017 0048 27       		.uleb128 0x27
 2018 0049 19       		.uleb128 0x19
 2019 004a 11       		.uleb128 0x11
 2020 004b 01       		.uleb128 0x1
 2021 004c 12       		.uleb128 0x12
 2022 004d 06       		.uleb128 0x6
 2023 004e 40       		.uleb128 0x40
 2024 004f 18       		.uleb128 0x18
 2025 0050 9642     		.uleb128 0x2116
 2026 0052 19       		.uleb128 0x19
 2027 0053 00       		.byte	0
 2028 0054 00       		.byte	0
 2029 0055 07       		.uleb128 0x7
 2030 0056 2E       		.uleb128 0x2e
 2031 0057 01       		.byte	0x1
 2032 0058 3F       		.uleb128 0x3f
 2033 0059 19       		.uleb128 0x19
 2034 005a 03       		.uleb128 0x3
 2035 005b 0E       		.uleb128 0xe
 2036 005c 3A       		.uleb128 0x3a
 2037 005d 0B       		.uleb128 0xb
 2038 005e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 57


 2039 005f 0B       		.uleb128 0xb
 2040 0060 27       		.uleb128 0x27
 2041 0061 19       		.uleb128 0x19
 2042 0062 11       		.uleb128 0x11
 2043 0063 01       		.uleb128 0x1
 2044 0064 12       		.uleb128 0x12
 2045 0065 06       		.uleb128 0x6
 2046 0066 40       		.uleb128 0x40
 2047 0067 18       		.uleb128 0x18
 2048 0068 9642     		.uleb128 0x2116
 2049 006a 19       		.uleb128 0x19
 2050 006b 01       		.uleb128 0x1
 2051 006c 13       		.uleb128 0x13
 2052 006d 00       		.byte	0
 2053 006e 00       		.byte	0
 2054 006f 08       		.uleb128 0x8
 2055 0070 34       		.uleb128 0x34
 2056 0071 00       		.byte	0
 2057 0072 03       		.uleb128 0x3
 2058 0073 0E       		.uleb128 0xe
 2059 0074 3A       		.uleb128 0x3a
 2060 0075 0B       		.uleb128 0xb
 2061 0076 3B       		.uleb128 0x3b
 2062 0077 0B       		.uleb128 0xb
 2063 0078 49       		.uleb128 0x49
 2064 0079 13       		.uleb128 0x13
 2065 007a 02       		.uleb128 0x2
 2066 007b 18       		.uleb128 0x18
 2067 007c 00       		.byte	0
 2068 007d 00       		.byte	0
 2069 007e 09       		.uleb128 0x9
 2070 007f 2E       		.uleb128 0x2e
 2071 0080 00       		.byte	0
 2072 0081 3F       		.uleb128 0x3f
 2073 0082 19       		.uleb128 0x19
 2074 0083 03       		.uleb128 0x3
 2075 0084 0E       		.uleb128 0xe
 2076 0085 3A       		.uleb128 0x3a
 2077 0086 0B       		.uleb128 0xb
 2078 0087 3B       		.uleb128 0x3b
 2079 0088 0B       		.uleb128 0xb
 2080 0089 27       		.uleb128 0x27
 2081 008a 19       		.uleb128 0x19
 2082 008b 11       		.uleb128 0x11
 2083 008c 01       		.uleb128 0x1
 2084 008d 12       		.uleb128 0x12
 2085 008e 06       		.uleb128 0x6
 2086 008f 40       		.uleb128 0x40
 2087 0090 18       		.uleb128 0x18
 2088 0091 9742     		.uleb128 0x2117
 2089 0093 19       		.uleb128 0x19
 2090 0094 00       		.byte	0
 2091 0095 00       		.byte	0
 2092 0096 0A       		.uleb128 0xa
 2093 0097 2E       		.uleb128 0x2e
 2094 0098 00       		.byte	0
 2095 0099 3F       		.uleb128 0x3f
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 58


 2096 009a 19       		.uleb128 0x19
 2097 009b 03       		.uleb128 0x3
 2098 009c 0E       		.uleb128 0xe
 2099 009d 3A       		.uleb128 0x3a
 2100 009e 0B       		.uleb128 0xb
 2101 009f 3B       		.uleb128 0x3b
 2102 00a0 05       		.uleb128 0x5
 2103 00a1 27       		.uleb128 0x27
 2104 00a2 19       		.uleb128 0x19
 2105 00a3 11       		.uleb128 0x11
 2106 00a4 01       		.uleb128 0x1
 2107 00a5 12       		.uleb128 0x12
 2108 00a6 06       		.uleb128 0x6
 2109 00a7 40       		.uleb128 0x40
 2110 00a8 18       		.uleb128 0x18
 2111 00a9 9742     		.uleb128 0x2117
 2112 00ab 19       		.uleb128 0x19
 2113 00ac 00       		.byte	0
 2114 00ad 00       		.byte	0
 2115 00ae 0B       		.uleb128 0xb
 2116 00af 2E       		.uleb128 0x2e
 2117 00b0 01       		.byte	0x1
 2118 00b1 3F       		.uleb128 0x3f
 2119 00b2 19       		.uleb128 0x19
 2120 00b3 03       		.uleb128 0x3
 2121 00b4 0E       		.uleb128 0xe
 2122 00b5 3A       		.uleb128 0x3a
 2123 00b6 0B       		.uleb128 0xb
 2124 00b7 3B       		.uleb128 0x3b
 2125 00b8 05       		.uleb128 0x5
 2126 00b9 27       		.uleb128 0x27
 2127 00ba 19       		.uleb128 0x19
 2128 00bb 11       		.uleb128 0x11
 2129 00bc 01       		.uleb128 0x1
 2130 00bd 12       		.uleb128 0x12
 2131 00be 06       		.uleb128 0x6
 2132 00bf 40       		.uleb128 0x40
 2133 00c0 18       		.uleb128 0x18
 2134 00c1 9742     		.uleb128 0x2117
 2135 00c3 19       		.uleb128 0x19
 2136 00c4 01       		.uleb128 0x1
 2137 00c5 13       		.uleb128 0x13
 2138 00c6 00       		.byte	0
 2139 00c7 00       		.byte	0
 2140 00c8 0C       		.uleb128 0xc
 2141 00c9 05       		.uleb128 0x5
 2142 00ca 00       		.byte	0
 2143 00cb 03       		.uleb128 0x3
 2144 00cc 0E       		.uleb128 0xe
 2145 00cd 3A       		.uleb128 0x3a
 2146 00ce 0B       		.uleb128 0xb
 2147 00cf 3B       		.uleb128 0x3b
 2148 00d0 05       		.uleb128 0x5
 2149 00d1 49       		.uleb128 0x49
 2150 00d2 13       		.uleb128 0x13
 2151 00d3 02       		.uleb128 0x2
 2152 00d4 18       		.uleb128 0x18
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 59


 2153 00d5 00       		.byte	0
 2154 00d6 00       		.byte	0
 2155 00d7 0D       		.uleb128 0xd
 2156 00d8 2E       		.uleb128 0x2e
 2157 00d9 01       		.byte	0x1
 2158 00da 3F       		.uleb128 0x3f
 2159 00db 19       		.uleb128 0x19
 2160 00dc 03       		.uleb128 0x3
 2161 00dd 0E       		.uleb128 0xe
 2162 00de 3A       		.uleb128 0x3a
 2163 00df 0B       		.uleb128 0xb
 2164 00e0 3B       		.uleb128 0x3b
 2165 00e1 05       		.uleb128 0x5
 2166 00e2 27       		.uleb128 0x27
 2167 00e3 19       		.uleb128 0x19
 2168 00e4 49       		.uleb128 0x49
 2169 00e5 13       		.uleb128 0x13
 2170 00e6 11       		.uleb128 0x11
 2171 00e7 01       		.uleb128 0x1
 2172 00e8 12       		.uleb128 0x12
 2173 00e9 06       		.uleb128 0x6
 2174 00ea 40       		.uleb128 0x40
 2175 00eb 18       		.uleb128 0x18
 2176 00ec 9742     		.uleb128 0x2117
 2177 00ee 19       		.uleb128 0x19
 2178 00ef 01       		.uleb128 0x1
 2179 00f0 13       		.uleb128 0x13
 2180 00f1 00       		.byte	0
 2181 00f2 00       		.byte	0
 2182 00f3 0E       		.uleb128 0xe
 2183 00f4 34       		.uleb128 0x34
 2184 00f5 00       		.byte	0
 2185 00f6 03       		.uleb128 0x3
 2186 00f7 0E       		.uleb128 0xe
 2187 00f8 3A       		.uleb128 0x3a
 2188 00f9 0B       		.uleb128 0xb
 2189 00fa 3B       		.uleb128 0x3b
 2190 00fb 05       		.uleb128 0x5
 2191 00fc 49       		.uleb128 0x49
 2192 00fd 13       		.uleb128 0x13
 2193 00fe 02       		.uleb128 0x2
 2194 00ff 18       		.uleb128 0x18
 2195 0100 00       		.byte	0
 2196 0101 00       		.byte	0
 2197 0102 0F       		.uleb128 0xf
 2198 0103 2E       		.uleb128 0x2e
 2199 0104 01       		.byte	0x1
 2200 0105 3F       		.uleb128 0x3f
 2201 0106 19       		.uleb128 0x19
 2202 0107 03       		.uleb128 0x3
 2203 0108 0E       		.uleb128 0xe
 2204 0109 3A       		.uleb128 0x3a
 2205 010a 0B       		.uleb128 0xb
 2206 010b 3B       		.uleb128 0x3b
 2207 010c 05       		.uleb128 0x5
 2208 010d 27       		.uleb128 0x27
 2209 010e 19       		.uleb128 0x19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 60


 2210 010f 49       		.uleb128 0x49
 2211 0110 13       		.uleb128 0x13
 2212 0111 11       		.uleb128 0x11
 2213 0112 01       		.uleb128 0x1
 2214 0113 12       		.uleb128 0x12
 2215 0114 06       		.uleb128 0x6
 2216 0115 40       		.uleb128 0x40
 2217 0116 18       		.uleb128 0x18
 2218 0117 9642     		.uleb128 0x2116
 2219 0119 19       		.uleb128 0x19
 2220 011a 01       		.uleb128 0x1
 2221 011b 13       		.uleb128 0x13
 2222 011c 00       		.byte	0
 2223 011d 00       		.byte	0
 2224 011e 10       		.uleb128 0x10
 2225 011f 2E       		.uleb128 0x2e
 2226 0120 00       		.byte	0
 2227 0121 3F       		.uleb128 0x3f
 2228 0122 19       		.uleb128 0x19
 2229 0123 03       		.uleb128 0x3
 2230 0124 0E       		.uleb128 0xe
 2231 0125 3A       		.uleb128 0x3a
 2232 0126 0B       		.uleb128 0xb
 2233 0127 3B       		.uleb128 0x3b
 2234 0128 05       		.uleb128 0x5
 2235 0129 27       		.uleb128 0x27
 2236 012a 19       		.uleb128 0x19
 2237 012b 11       		.uleb128 0x11
 2238 012c 01       		.uleb128 0x1
 2239 012d 12       		.uleb128 0x12
 2240 012e 06       		.uleb128 0x6
 2241 012f 40       		.uleb128 0x40
 2242 0130 18       		.uleb128 0x18
 2243 0131 9642     		.uleb128 0x2116
 2244 0133 19       		.uleb128 0x19
 2245 0134 00       		.byte	0
 2246 0135 00       		.byte	0
 2247 0136 11       		.uleb128 0x11
 2248 0137 2E       		.uleb128 0x2e
 2249 0138 01       		.byte	0x1
 2250 0139 3F       		.uleb128 0x3f
 2251 013a 19       		.uleb128 0x19
 2252 013b 03       		.uleb128 0x3
 2253 013c 0E       		.uleb128 0xe
 2254 013d 3A       		.uleb128 0x3a
 2255 013e 0B       		.uleb128 0xb
 2256 013f 3B       		.uleb128 0x3b
 2257 0140 05       		.uleb128 0x5
 2258 0141 27       		.uleb128 0x27
 2259 0142 19       		.uleb128 0x19
 2260 0143 11       		.uleb128 0x11
 2261 0144 01       		.uleb128 0x1
 2262 0145 12       		.uleb128 0x12
 2263 0146 06       		.uleb128 0x6
 2264 0147 40       		.uleb128 0x40
 2265 0148 18       		.uleb128 0x18
 2266 0149 9642     		.uleb128 0x2116
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 61


 2267 014b 19       		.uleb128 0x19
 2268 014c 01       		.uleb128 0x1
 2269 014d 13       		.uleb128 0x13
 2270 014e 00       		.byte	0
 2271 014f 00       		.byte	0
 2272 0150 12       		.uleb128 0x12
 2273 0151 0F       		.uleb128 0xf
 2274 0152 00       		.byte	0
 2275 0153 0B       		.uleb128 0xb
 2276 0154 0B       		.uleb128 0xb
 2277 0155 49       		.uleb128 0x49
 2278 0156 13       		.uleb128 0x13
 2279 0157 00       		.byte	0
 2280 0158 00       		.byte	0
 2281 0159 13       		.uleb128 0x13
 2282 015a 26       		.uleb128 0x26
 2283 015b 00       		.byte	0
 2284 015c 49       		.uleb128 0x49
 2285 015d 13       		.uleb128 0x13
 2286 015e 00       		.byte	0
 2287 015f 00       		.byte	0
 2288 0160 14       		.uleb128 0x14
 2289 0161 34       		.uleb128 0x34
 2290 0162 00       		.byte	0
 2291 0163 03       		.uleb128 0x3
 2292 0164 0E       		.uleb128 0xe
 2293 0165 3A       		.uleb128 0x3a
 2294 0166 0B       		.uleb128 0xb
 2295 0167 3B       		.uleb128 0x3b
 2296 0168 0B       		.uleb128 0xb
 2297 0169 49       		.uleb128 0x49
 2298 016a 13       		.uleb128 0x13
 2299 016b 3F       		.uleb128 0x3f
 2300 016c 19       		.uleb128 0x19
 2301 016d 02       		.uleb128 0x2
 2302 016e 18       		.uleb128 0x18
 2303 016f 00       		.byte	0
 2304 0170 00       		.byte	0
 2305 0171 15       		.uleb128 0x15
 2306 0172 01       		.uleb128 0x1
 2307 0173 01       		.byte	0x1
 2308 0174 49       		.uleb128 0x49
 2309 0175 13       		.uleb128 0x13
 2310 0176 01       		.uleb128 0x1
 2311 0177 13       		.uleb128 0x13
 2312 0178 00       		.byte	0
 2313 0179 00       		.byte	0
 2314 017a 16       		.uleb128 0x16
 2315 017b 21       		.uleb128 0x21
 2316 017c 00       		.byte	0
 2317 017d 49       		.uleb128 0x49
 2318 017e 13       		.uleb128 0x13
 2319 017f 2F       		.uleb128 0x2f
 2320 0180 0B       		.uleb128 0xb
 2321 0181 00       		.byte	0
 2322 0182 00       		.byte	0
 2323 0183 00       		.byte	0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 62


 2324              		.section	.debug_aranges,"",%progbits
 2325 0000 D4000000 		.4byte	0xd4
 2326 0004 0200     		.2byte	0x2
 2327 0006 00000000 		.4byte	.Ldebug_info0
 2328 000a 04       		.byte	0x4
 2329 000b 00       		.byte	0
 2330 000c 0000     		.2byte	0
 2331 000e 0000     		.2byte	0
 2332 0010 00000000 		.4byte	.LFB0
 2333 0014 70000000 		.4byte	.LFE0-.LFB0
 2334 0018 00000000 		.4byte	.LFB1
 2335 001c 64000000 		.4byte	.LFE1-.LFB1
 2336 0020 00000000 		.4byte	.LFB2
 2337 0024 24000000 		.4byte	.LFE2-.LFB2
 2338 0028 00000000 		.4byte	.LFB3
 2339 002c 50000000 		.4byte	.LFE3-.LFB3
 2340 0030 00000000 		.4byte	.LFB4
 2341 0034 0C000000 		.4byte	.LFE4-.LFB4
 2342 0038 00000000 		.4byte	.LFB5
 2343 003c 18000000 		.4byte	.LFE5-.LFB5
 2344 0040 00000000 		.4byte	.LFB6
 2345 0044 0C000000 		.4byte	.LFE6-.LFB6
 2346 0048 00000000 		.4byte	.LFB7
 2347 004c 18000000 		.4byte	.LFE7-.LFB7
 2348 0050 00000000 		.4byte	.LFB8
 2349 0054 20000000 		.4byte	.LFE8-.LFB8
 2350 0058 00000000 		.4byte	.LFB9
 2351 005c 20000000 		.4byte	.LFE9-.LFB9
 2352 0060 00000000 		.4byte	.LFB10
 2353 0064 1C000000 		.4byte	.LFE10-.LFB10
 2354 0068 00000000 		.4byte	.LFB11
 2355 006c 3C000000 		.4byte	.LFE11-.LFB11
 2356 0070 00000000 		.4byte	.LFB12
 2357 0074 34000000 		.4byte	.LFE12-.LFB12
 2358 0078 00000000 		.4byte	.LFB13
 2359 007c 78000000 		.4byte	.LFE13-.LFB13
 2360 0080 00000000 		.4byte	.LFB14
 2361 0084 6C000000 		.4byte	.LFE14-.LFB14
 2362 0088 00000000 		.4byte	.LFB15
 2363 008c 40000000 		.4byte	.LFE15-.LFB15
 2364 0090 00000000 		.4byte	.LFB16
 2365 0094 4C000000 		.4byte	.LFE16-.LFB16
 2366 0098 00000000 		.4byte	.LFB17
 2367 009c 68000000 		.4byte	.LFE17-.LFB17
 2368 00a0 00000000 		.4byte	.LFB18
 2369 00a4 3C000000 		.4byte	.LFE18-.LFB18
 2370 00a8 00000000 		.4byte	.LFB19
 2371 00ac 84000000 		.4byte	.LFE19-.LFB19
 2372 00b0 00000000 		.4byte	.LFB20
 2373 00b4 10000000 		.4byte	.LFE20-.LFB20
 2374 00b8 00000000 		.4byte	.LFB21
 2375 00bc 10000000 		.4byte	.LFE21-.LFB21
 2376 00c0 00000000 		.4byte	.LFB22
 2377 00c4 30000000 		.4byte	.LFE22-.LFB22
 2378 00c8 00000000 		.4byte	.LFB23
 2379 00cc 70000000 		.4byte	.LFE23-.LFB23
 2380 00d0 00000000 		.4byte	0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 63


 2381 00d4 00000000 		.4byte	0
 2382              		.section	.debug_ranges,"",%progbits
 2383              	.Ldebug_ranges0:
 2384 0000 00000000 		.4byte	.LFB0
 2385 0004 70000000 		.4byte	.LFE0
 2386 0008 00000000 		.4byte	.LFB1
 2387 000c 64000000 		.4byte	.LFE1
 2388 0010 00000000 		.4byte	.LFB2
 2389 0014 24000000 		.4byte	.LFE2
 2390 0018 00000000 		.4byte	.LFB3
 2391 001c 50000000 		.4byte	.LFE3
 2392 0020 00000000 		.4byte	.LFB4
 2393 0024 0C000000 		.4byte	.LFE4
 2394 0028 00000000 		.4byte	.LFB5
 2395 002c 18000000 		.4byte	.LFE5
 2396 0030 00000000 		.4byte	.LFB6
 2397 0034 0C000000 		.4byte	.LFE6
 2398 0038 00000000 		.4byte	.LFB7
 2399 003c 18000000 		.4byte	.LFE7
 2400 0040 00000000 		.4byte	.LFB8
 2401 0044 20000000 		.4byte	.LFE8
 2402 0048 00000000 		.4byte	.LFB9
 2403 004c 20000000 		.4byte	.LFE9
 2404 0050 00000000 		.4byte	.LFB10
 2405 0054 1C000000 		.4byte	.LFE10
 2406 0058 00000000 		.4byte	.LFB11
 2407 005c 3C000000 		.4byte	.LFE11
 2408 0060 00000000 		.4byte	.LFB12
 2409 0064 34000000 		.4byte	.LFE12
 2410 0068 00000000 		.4byte	.LFB13
 2411 006c 78000000 		.4byte	.LFE13
 2412 0070 00000000 		.4byte	.LFB14
 2413 0074 6C000000 		.4byte	.LFE14
 2414 0078 00000000 		.4byte	.LFB15
 2415 007c 40000000 		.4byte	.LFE15
 2416 0080 00000000 		.4byte	.LFB16
 2417 0084 4C000000 		.4byte	.LFE16
 2418 0088 00000000 		.4byte	.LFB17
 2419 008c 68000000 		.4byte	.LFE17
 2420 0090 00000000 		.4byte	.LFB18
 2421 0094 3C000000 		.4byte	.LFE18
 2422 0098 00000000 		.4byte	.LFB19
 2423 009c 84000000 		.4byte	.LFE19
 2424 00a0 00000000 		.4byte	.LFB20
 2425 00a4 10000000 		.4byte	.LFE20
 2426 00a8 00000000 		.4byte	.LFB21
 2427 00ac 10000000 		.4byte	.LFE21
 2428 00b0 00000000 		.4byte	.LFB22
 2429 00b4 30000000 		.4byte	.LFE22
 2430 00b8 00000000 		.4byte	.LFB23
 2431 00bc 70000000 		.4byte	.LFE23
 2432 00c0 00000000 		.4byte	0
 2433 00c4 00000000 		.4byte	0
 2434              		.section	.debug_line,"",%progbits
 2435              	.Ldebug_line0:
 2436 0000 6A020000 		.section	.debug_str,"MS",%progbits,1
 2436      02004800 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 64


 2436      00000201 
 2436      FB0E0D00 
 2436      01010101 
 2437              	.LASF10:
 2438 0000 75696E74 		.ascii	"uint16\000"
 2438      313600
 2439              	.LASF33:
 2440 0007 5350495F 		.ascii	"SPI_ENCODER_ReadTxStatus\000"
 2440      454E434F 
 2440      4445525F 
 2440      52656164 
 2440      54785374 
 2441              	.LASF57:
 2442 0020 5350495F 		.ascii	"SPI_ENCODER_rxBufferRead\000"
 2442      454E434F 
 2442      4445525F 
 2442      72784275 
 2442      66666572 
 2443              	.LASF25:
 2444 0039 5350495F 		.ascii	"SPI_ENCODER_EnableTxInt\000"
 2444      454E434F 
 2444      4445525F 
 2444      456E6162 
 2444      6C655478 
 2445              	.LASF29:
 2446 0051 5350495F 		.ascii	"SPI_ENCODER_SetTxInterruptMode\000"
 2446      454E434F 
 2446      4445525F 
 2446      53657454 
 2446      78496E74 
 2447              	.LASF60:
 2448 0070 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2448      43313120 
 2448      352E342E 
 2448      31203230 
 2448      31363036 
 2449 00a3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2449      20726576 
 2449      6973696F 
 2449      6E203233 
 2449      37373135 
 2450 00d6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2450      66756E63 
 2450      74696F6E 
 2450      2D736563 
 2450      74696F6E 
 2451              	.LASF7:
 2452 00fe 6C6F6E67 		.ascii	"long long unsigned int\000"
 2452      206C6F6E 
 2452      6720756E 
 2452      7369676E 
 2452      65642069 
 2453              	.LASF56:
 2454 0115 5350495F 		.ascii	"SPI_ENCODER_rxBuffer\000"
 2454      454E434F 
 2454      4445525F 
 2454      72784275 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 65


 2454      66666572 
 2455              	.LASF32:
 2456 012a 746D7053 		.ascii	"tmpStatus\000"
 2456      74617475 
 2456      7300
 2457              	.LASF28:
 2458 0134 5350495F 		.ascii	"SPI_ENCODER_DisableRxInt\000"
 2458      454E434F 
 2458      4445525F 
 2458      44697361 
 2458      626C6552 
 2459              	.LASF58:
 2460 014d 5350495F 		.ascii	"SPI_ENCODER_rxBufferWrite\000"
 2460      454E434F 
 2460      4445525F 
 2460      72784275 
 2460      66666572 
 2461              	.LASF6:
 2462 0167 6C6F6E67 		.ascii	"long long int\000"
 2462      206C6F6E 
 2462      6720696E 
 2462      7400
 2463              	.LASF0:
 2464 0175 7369676E 		.ascii	"signed char\000"
 2464      65642063 
 2464      68617200 
 2465              	.LASF20:
 2466 0181 5350495F 		.ascii	"SPI_ENCODER_Init\000"
 2466      454E434F 
 2466      4445525F 
 2466      496E6974 
 2466      00
 2467              	.LASF4:
 2468 0192 6C6F6E67 		.ascii	"long int\000"
 2468      20696E74 
 2468      00
 2469              	.LASF37:
 2470 019b 5350495F 		.ascii	"SPI_ENCODER_ReadRxData\000"
 2470      454E434F 
 2470      4445525F 
 2470      52656164 
 2470      52784461 
 2471              	.LASF39:
 2472 01b2 5350495F 		.ascii	"SPI_ENCODER_GetRxBufferSize\000"
 2472      454E434F 
 2472      4445525F 
 2472      47657452 
 2472      78427566 
 2473              	.LASF16:
 2474 01ce 72656731 		.ascii	"reg16\000"
 2474      3600
 2475              	.LASF9:
 2476 01d4 75696E74 		.ascii	"uint8\000"
 2476      3800
 2477              	.LASF13:
 2478 01da 646F7562 		.ascii	"double\000"
 2478      6C6500
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 66


 2479              	.LASF35:
 2480 01e1 5350495F 		.ascii	"SPI_ENCODER_WriteTxData\000"
 2480      454E434F 
 2480      4445525F 
 2480      57726974 
 2480      65547844 
 2481              	.LASF11:
 2482 01f9 75696E74 		.ascii	"uint32\000"
 2482      333200
 2483              	.LASF54:
 2484 0200 5350495F 		.ascii	"SPI_ENCODER_swStatusTx\000"
 2484      454E434F 
 2484      4445525F 
 2484      73775374 
 2484      61747573 
 2485              	.LASF62:
 2486 0217 433A5C55 		.ascii	"C:\\Users\\MattiaCP\\Documents\\GITHUB\\SoftHand-PR"
 2486      73657273 
 2486      5C4D6174 
 2486      74696143 
 2486      505C446F 
 2487 0245 4F2D5053 		.ascii	"O-PSoC5\\firmware.cydsn\000"
 2487      6F43355C 
 2487      6669726D 
 2487      77617265 
 2487      2E637964 
 2488              	.LASF8:
 2489 025c 756E7369 		.ascii	"unsigned int\000"
 2489      676E6564 
 2489      20696E74 
 2489      00
 2490              	.LASF52:
 2491 0269 5350495F 		.ascii	"SPI_ENCODER_ReadStatus\000"
 2491      454E434F 
 2491      4445525F 
 2491      52656164 
 2491      53746174 
 2492              	.LASF5:
 2493 0280 6C6F6E67 		.ascii	"long unsigned int\000"
 2493      20756E73 
 2493      69676E65 
 2493      6420696E 
 2493      7400
 2494              	.LASF34:
 2495 0292 5350495F 		.ascii	"SPI_ENCODER_ReadRxStatus\000"
 2495      454E434F 
 2495      4445525F 
 2495      52656164 
 2495      52785374 
 2496              	.LASF40:
 2497 02ab 73697A65 		.ascii	"size\000"
 2497      00
 2498              	.LASF3:
 2499 02b0 73686F72 		.ascii	"short unsigned int\000"
 2499      7420756E 
 2499      7369676E 
 2499      65642069 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 67


 2499      6E7400
 2500              	.LASF47:
 2501 02c3 62756649 		.ascii	"bufIndex\000"
 2501      6E646578 
 2501      00
 2502              	.LASF31:
 2503 02cc 696E7453 		.ascii	"intSrc\000"
 2503      726300
 2504              	.LASF17:
 2505 02d3 72656733 		.ascii	"reg32\000"
 2505      3200
 2506              	.LASF55:
 2507 02d9 5350495F 		.ascii	"SPI_ENCODER_swStatusRx\000"
 2507      454E434F 
 2507      4445525F 
 2507      73775374 
 2507      61747573 
 2508              	.LASF19:
 2509 02f0 73697A65 		.ascii	"sizetype\000"
 2509      74797065 
 2509      00
 2510              	.LASF18:
 2511 02f9 6C6F6E67 		.ascii	"long double\000"
 2511      20646F75 
 2511      626C6500 
 2512              	.LASF22:
 2513 0305 5350495F 		.ascii	"SPI_ENCODER_Enable\000"
 2513      454E434F 
 2513      4445525F 
 2513      456E6162 
 2513      6C6500
 2514              	.LASF41:
 2515 0318 5350495F 		.ascii	"SPI_ENCODER_GetTxBufferSize\000"
 2515      454E434F 
 2515      4445525F 
 2515      47657454 
 2515      78427566 
 2516              	.LASF44:
 2517 0334 5350495F 		.ascii	"SPI_ENCODER_PutArray\000"
 2517      454E434F 
 2517      4445525F 
 2517      50757441 
 2517      72726179 
 2518              	.LASF50:
 2519 0349 5350495F 		.ascii	"SPI_ENCODER_DisableInt\000"
 2519      454E434F 
 2519      4445525F 
 2519      44697361 
 2519      626C6549 
 2520              	.LASF49:
 2521 0360 5350495F 		.ascii	"SPI_ENCODER_EnableInt\000"
 2521      454E434F 
 2521      4445525F 
 2521      456E6162 
 2521      6C65496E 
 2522              	.LASF51:
 2523 0376 5350495F 		.ascii	"SPI_ENCODER_SetInterruptMode\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 68


 2523      454E434F 
 2523      4445525F 
 2523      53657449 
 2523      6E746572 
 2524              	.LASF12:
 2525 0393 666C6F61 		.ascii	"float\000"
 2525      7400
 2526              	.LASF15:
 2527 0399 72656738 		.ascii	"reg8\000"
 2527      00
 2528              	.LASF1:
 2529 039e 756E7369 		.ascii	"unsigned char\000"
 2529      676E6564 
 2529      20636861 
 2529      7200
 2530              	.LASF61:
 2531 03ac 47656E65 		.ascii	"Generated_Source\\PSoC5\\SPI_ENCODER.c\000"
 2531      72617465 
 2531      645F536F 
 2531      75726365 
 2531      5C50536F 
 2532              	.LASF2:
 2533 03d1 73686F72 		.ascii	"short int\000"
 2533      7420696E 
 2533      7400
 2534              	.LASF46:
 2535 03db 62797465 		.ascii	"byteCount\000"
 2535      436F756E 
 2535      7400
 2536              	.LASF38:
 2537 03e5 72784461 		.ascii	"rxData\000"
 2537      746100
 2538              	.LASF30:
 2539 03ec 5350495F 		.ascii	"SPI_ENCODER_SetRxInterruptMode\000"
 2539      454E434F 
 2539      4445525F 
 2539      53657452 
 2539      78496E74 
 2540              	.LASF14:
 2541 040b 63686172 		.ascii	"char\000"
 2541      00
 2542              	.LASF26:
 2543 0410 5350495F 		.ascii	"SPI_ENCODER_EnableRxInt\000"
 2543      454E434F 
 2543      4445525F 
 2543      456E6162 
 2543      6C655278 
 2544              	.LASF23:
 2545 0428 5350495F 		.ascii	"SPI_ENCODER_Stop\000"
 2545      454E434F 
 2545      4445525F 
 2545      53746F70 
 2545      00
 2546              	.LASF45:
 2547 0439 62756666 		.ascii	"buffer\000"
 2547      657200
 2548              	.LASF48:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccIMkDni.s 			page 69


 2549 0440 5350495F 		.ascii	"SPI_ENCODER_ClearFIFO\000"
 2549      454E434F 
 2549      4445525F 
 2549      436C6561 
 2549      72464946 
 2550              	.LASF42:
 2551 0456 5350495F 		.ascii	"SPI_ENCODER_ClearRxBuffer\000"
 2551      454E434F 
 2551      4445525F 
 2551      436C6561 
 2551      72527842 
 2552              	.LASF43:
 2553 0470 5350495F 		.ascii	"SPI_ENCODER_ClearTxBuffer\000"
 2553      454E434F 
 2553      4445525F 
 2553      436C6561 
 2553      72547842 
 2554              	.LASF24:
 2555 048a 656E6162 		.ascii	"enableInterrupts\000"
 2555      6C65496E 
 2555      74657272 
 2555      75707473 
 2555      00
 2556              	.LASF59:
 2557 049b 5350495F 		.ascii	"SPI_ENCODER_rxBufferFull\000"
 2557      454E434F 
 2557      4445525F 
 2557      72784275 
 2557      66666572 
 2558              	.LASF21:
 2559 04b4 5350495F 		.ascii	"SPI_ENCODER_Start\000"
 2559      454E434F 
 2559      4445525F 
 2559      53746172 
 2559      7400
 2560              	.LASF27:
 2561 04c6 5350495F 		.ascii	"SPI_ENCODER_DisableTxInt\000"
 2561      454E434F 
 2561      4445525F 
 2561      44697361 
 2561      626C6554 
 2562              	.LASF36:
 2563 04df 74784461 		.ascii	"txData\000"
 2563      746100
 2564              	.LASF53:
 2565 04e6 5350495F 		.ascii	"SPI_ENCODER_initVar\000"
 2565      454E434F 
 2565      4445525F 
 2565      696E6974 
 2565      56617200 
 2566              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
