ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 185 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 185 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 186:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 186 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
 263 00b8 01E0     		b	.L19
 264              	.L18:
 187:..\src/interruptions.c ****                 else                //packet is for others
 188:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 188 0
 266 00ba 0123     		movs	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 9


 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 189:..\src/interruptions.c ****                 
 190:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 190 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 191:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 191 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 192:..\src/interruptions.c ****                 break;
 277              		.loc 1 192 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 193:..\src/interruptions.c **** 
 194:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 195:..\src/interruptions.c ****             case  WAIT_LENGTH:
 196:..\src/interruptions.c **** 
 197:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 197 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 198:..\src/interruptions.c ****                 // check validity of pack length
 199:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 199 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 200:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 200 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 201:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 201 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 202:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 202 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
 203:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 203 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 204:..\src/interruptions.c ****                     state = WAIT_START;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 10


 308              		.loc 1 204 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 205:..\src/interruptions.c ****                 } else {
 206:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 206 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     
 208:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 208 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 209:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 209 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 210:..\src/interruptions.c ****                     else
 211:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 211 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 212:..\src/interruptions.c ****                 }
 213:..\src/interruptions.c ****                 break;
 332              		.loc 1 213 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 214:..\src/interruptions.c **** 
 215:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 216:..\src/interruptions.c ****             case RECEIVE:
 217:..\src/interruptions.c **** 
 218:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 218 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 219:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 219 0
 343 0126 304B     		ldr	r3, .L31+16
 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 220:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 11


 221:..\src/interruptions.c ****                 // check end of transmission
 222:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 222 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 223:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 224:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 224 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 225:..\src/interruptions.c ****                         // copying data from buffer to global packet
 226:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 226 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 227:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 227 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 228:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 228 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 229:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 229 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 230:..\src/interruptions.c ****                     }
 231:..\src/interruptions.c ****                     
 232:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 232 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 233:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 233 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
 387 0174 1A70     		strb	r2, [r3]
 234:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 234 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 12


 235:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 235 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 236:..\src/interruptions.c ****                 
 237:..\src/interruptions.c ****                 }
 238:..\src/interruptions.c ****                 break;
 396              		.loc 1 238 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 239:..\src/interruptions.c **** 
 240:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 241:..\src/interruptions.c ****             case UNLOAD:
 242:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 242 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 243:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 243 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 244:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 244 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 245:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 245 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 246:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 246 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 247:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 247 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 248:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 248 0
 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 249:..\src/interruptions.c ****                 }
 250:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 13


 433              		.loc 1 250 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 251:..\src/interruptions.c ****         }
 252:..\src/interruptions.c ****     }
 253:..\src/interruptions.c **** }
 446              		.loc 1 253 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10356
 458 01dc 04000000 		.word	rx_queue.10360
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10358
 461 01e8 08000000 		.word	data_packet_index.10357
 462 01ec 0C000000 		.word	data_packet_buffer.10359
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fdiv
 469              		.section	.text.function_scheduler,"ax",%progbits
 470              		.align	2
 471              		.global	function_scheduler
 472              		.thumb
 473              		.thumb_func
 474              		.type	function_scheduler, %function
 475              	function_scheduler:
 476              	.LFB67:
 254:..\src/interruptions.c **** //==============================================================================
 255:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 256:..\src/interruptions.c **** //==============================================================================
 257:..\src/interruptions.c **** // Call all the function with the right frequency
 258:..\src/interruptions.c **** //==============================================================================
 259:..\src/interruptions.c **** // Base frequency 1000 Hz
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 14


 262:..\src/interruptions.c **** void function_scheduler(void) {
 477              		.loc 1 262 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 2504
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 B0B5     		push	{r4, r5, r7, lr}
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 ADF6C81D 		subw	sp, sp, #2504
 488              		.cfi_def_cfa_offset 2520
 489 0006 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 263:..\src/interruptions.c ****  
 264:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 265:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 266:..\src/interruptions.c ****     char info_[2500] = "";
 491              		.loc 1 266 0
 492 0008 3B46     		mov	r3, r7
 493 000a 0022     		movs	r2, #0
 494 000c 1A60     		str	r2, [r3]
 495 000e 0433     		adds	r3, r3, #4
 496 0010 4FF41C62 		mov	r2, #2496
 497 0014 0021     		movs	r1, #0
 498 0016 1846     		mov	r0, r3
 499 0018 FFF7FEFF 		bl	memset
 267:..\src/interruptions.c ****     
 268:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 500              		.loc 1 268 0
 501 001c 0023     		movs	r3, #0
 502 001e 87F8C639 		strb	r3, [r7, #2502]
 269:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 503              		.loc 1 269 0
 504 0022 0123     		movs	r3, #1
 505 0024 87F8C539 		strb	r3, [r7, #2501]
 270:..\src/interruptions.c ****     
 271:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 506              		.loc 1 271 0
 507 0028 0020     		movs	r0, #0
 508 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 272:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 509              		.loc 1 272 0
 510 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 511 0032 0346     		mov	r3, r0
 512 0034 1A46     		mov	r2, r3
 513 0036 594B     		ldr	r3, .L62
 514 0038 1A80     		strh	r2, [r3]	@ movhi
 273:..\src/interruptions.c **** 
 274:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 275:..\src/interruptions.c **** 
 276:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 515              		.loc 1 276 0
 516 003a 0120     		movs	r0, #1
 517 003c FFF7FEFF 		bl	ADC_SOC_Write
 277:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 15


 278:..\src/interruptions.c ****     // Check Interrupt 
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     if (interrupt_flag){
 518              		.loc 1 280 0
 519 0040 574B     		ldr	r3, .L62+4
 520 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0044 002B     		cmp	r3, #0
 522 0046 04D0     		beq	.L34
 281:..\src/interruptions.c ****         interrupt_flag = FALSE;
 523              		.loc 1 281 0
 524 0048 554B     		ldr	r3, .L62+4
 525 004a 0022     		movs	r2, #0
 526 004c 1A70     		strb	r2, [r3]
 282:..\src/interruptions.c ****         interrupt_manager();
 527              		.loc 1 282 0
 528 004e FFF7FEFF 		bl	interrupt_manager
 529              	.L34:
 283:..\src/interruptions.c ****     }
 284:..\src/interruptions.c ****     
 285:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){
 530              		.loc 1 285 0
 531 0052 544B     		ldr	r3, .L62+8
 532 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 533 0058 002B     		cmp	r3, #0
 534 005a 5FD1     		bne	.L35
 286:..\src/interruptions.c ****         
 287:..\src/interruptions.c ****         //---------------------------------- Get Encoders
 288:..\src/interruptions.c ****         
 289:..\src/interruptions.c ****         // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 290:..\src/interruptions.c ****         if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 535              		.loc 1 290 0
 536 005c 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 537 0060 5049     		ldr	r1, .L62+8
 538 0062 1346     		mov	r3, r2
 539 0064 DB00     		lsls	r3, r3, #3
 540 0066 9B1A     		subs	r3, r3, r2
 541 0068 1B01     		lsls	r3, r3, #4
 542 006a 0B44     		add	r3, r3, r1
 543 006c 03F58873 		add	r3, r3, #272
 544 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 545 0072 1A46     		mov	r2, r3
 546 0074 4C4B     		ldr	r3, .L62+12
 547 0076 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 548 0078 002B     		cmp	r3, #0
 549 007a 25D0     		beq	.L36
 291:..\src/interruptions.c ****             // Change CS only if there are attached encoders on the line
 292:..\src/interruptions.c ****             Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 550              		.loc 1 292 0
 551 007c 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 552 0080 4849     		ldr	r1, .L62+8
 553 0082 1346     		mov	r3, r2
 554 0084 DB00     		lsls	r3, r3, #3
 555 0086 9B1A     		subs	r3, r3, r2
 556 0088 1B01     		lsls	r3, r3, #4
 557 008a 0B44     		add	r3, r3, r1
 558 008c 03F58873 		add	r3, r3, #272
 559 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 16


 560 0092 1846     		mov	r0, r3
 561 0094 FFF7FEFF 		bl	Change_CS_EncoderLine
 293:..\src/interruptions.c ****             
 294:..\src/interruptions.c ****             encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 for 
 562              		.loc 1 294 0
 563 0098 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 564 009c 4149     		ldr	r1, .L62+8
 565 009e 1346     		mov	r3, r2
 566 00a0 DB00     		lsls	r3, r3, #3
 567 00a2 9B1A     		subs	r3, r3, r2
 568 00a4 1B01     		lsls	r3, r3, #4
 569 00a6 0B44     		add	r3, r3, r1
 570 00a8 03F58873 		add	r3, r3, #272
 571 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572 00ae 0021     		movs	r1, #0
 573 00b0 1846     		mov	r0, r3
 574 00b2 FFF7FEFF 		bl	encoder_reading_SPI
 295:..\src/interruptions.c **** 
 296:..\src/interruptions.c ****             // Check Interrupt     
 297:..\src/interruptions.c ****             
 298:..\src/interruptions.c ****             if (interrupt_flag){
 575              		.loc 1 298 0
 576 00b6 3A4B     		ldr	r3, .L62+4
 577 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 578 00ba 002B     		cmp	r3, #0
 579 00bc 04D0     		beq	.L36
 299:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 580              		.loc 1 299 0
 581 00be 384B     		ldr	r3, .L62+4
 582 00c0 0022     		movs	r2, #0
 583 00c2 1A70     		strb	r2, [r3]
 300:..\src/interruptions.c ****                 interrupt_manager();
 584              		.loc 1 300 0
 585 00c4 FFF7FEFF 		bl	interrupt_manager
 586              	.L36:
 301:..\src/interruptions.c ****             }
 302:..\src/interruptions.c ****         }
 303:..\src/interruptions.c ****         
 304:..\src/interruptions.c ****         //---------------------------------- Control SH Motor
 305:..\src/interruptions.c ****         
 306:..\src/interruptions.c ****         motor_control_SH();
 587              		.loc 1 306 0
 588 00c8 FFF7FEFF 		bl	motor_control_SH
 307:..\src/interruptions.c ****         
 308:..\src/interruptions.c ****         // Check external reference before processing other serial data and right after motor contr
 309:..\src/interruptions.c ****         if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 589              		.loc 1 309 0
 590 00cc 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 591 00d0 3449     		ldr	r1, .L62+8
 592 00d2 1346     		mov	r3, r2
 593 00d4 DB00     		lsls	r3, r3, #3
 594 00d6 9B1A     		subs	r3, r3, r2
 595 00d8 1B01     		lsls	r3, r3, #4
 596 00da 0B44     		add	r3, r3, r1
 597 00dc 03F58973 		add	r3, r3, #274
 598 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 599 00e2 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 17


 600 00e4 0FD1     		bne	.L37
 310:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 601              		.loc 1 310 0
 602 00e6 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 603 00ea 2E49     		ldr	r1, .L62+8
 604 00ec 1346     		mov	r3, r2
 605 00ee DB00     		lsls	r3, r3, #3
 606 00f0 9B1A     		subs	r3, r3, r2
 607 00f2 1B01     		lsls	r3, r3, #4
 608 00f4 0B44     		add	r3, r3, r1
 609 00f6 03F58773 		add	r3, r3, #270
 610 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 611 00fc 002B     		cmp	r3, #0
 612 00fe 02D1     		bne	.L37
 311:..\src/interruptions.c ****                 change_ext_ref_flag = FALSE;
 613              		.loc 1 311 0
 614 0100 2A4B     		ldr	r3, .L62+16
 615 0102 0022     		movs	r2, #0
 616 0104 1A70     		strb	r2, [r3]
 617              	.L37:
 312:..\src/interruptions.c ****             }   
 313:..\src/interruptions.c ****         }
 314:..\src/interruptions.c **** 
 315:..\src/interruptions.c ****         // Check Interrupt 
 316:..\src/interruptions.c **** 
 317:..\src/interruptions.c ****         if (interrupt_flag){
 618              		.loc 1 317 0
 619 0106 264B     		ldr	r3, .L62+4
 620 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621 010a 002B     		cmp	r3, #0
 622 010c 00F0C880 		beq	.L39
 318:..\src/interruptions.c ****             interrupt_flag = FALSE;
 623              		.loc 1 318 0
 624 0110 234B     		ldr	r3, .L62+4
 625 0112 0022     		movs	r2, #0
 626 0114 1A70     		strb	r2, [r3]
 319:..\src/interruptions.c ****             interrupt_manager();
 627              		.loc 1 319 0
 628 0116 FFF7FEFF 		bl	interrupt_manager
 629 011a C1E0     		b	.L39
 630              	.L35:
 631              	.LBB2:
 320:..\src/interruptions.c ****         }  
 321:..\src/interruptions.c ****     }
 322:..\src/interruptions.c ****     else {      // GENERIC device
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****         //---------------------------------- Get Encoders
 325:..\src/interruptions.c **** 
 326:..\src/interruptions.c ****         for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 632              		.loc 1 326 0
 633 011c 0023     		movs	r3, #0
 634 011e 87F8C739 		strb	r3, [r7, #2503]
 635 0122 5EE0     		b	.L40
 636              	.L45:
 327:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 637              		.loc 1 327 0
 638 0124 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 18


 639 0128 1F4A     		ldr	r2, .L62+12
 640 012a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 641 012c 002B     		cmp	r3, #0
 642 012e 53D0     		beq	.L41
 328:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 329:..\src/interruptions.c ****                 Change_CS_EncoderLine(i);
 643              		.loc 1 329 0
 644 0130 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 645 0134 1846     		mov	r0, r3
 646 0136 FFF7FEFF 		bl	Change_CS_EncoderLine
 330:..\src/interruptions.c ****                           
 331:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 647              		.loc 1 331 0
 648 013a 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 649 013e 1949     		ldr	r1, .L62+8
 650 0140 1346     		mov	r3, r2
 651 0142 DB00     		lsls	r3, r3, #3
 652 0144 9B1A     		subs	r3, r3, r2
 653 0146 1B01     		lsls	r3, r3, #4
 654 0148 0B44     		add	r3, r3, r1
 655 014a 03F58873 		add	r3, r3, #272
 656 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 657 0150 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 658 0154 9A42     		cmp	r2, r3
 659 0156 08D1     		bne	.L42
 332:..\src/interruptions.c ****                     // Check if the line is used to control motor or not
 333:..\src/interruptions.c ****                     encoder_reading_SPI(i, MOTOR_IDX); 
 660              		.loc 1 333 0
 661 0158 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 662 015c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 663 0160 1146     		mov	r1, r2
 664 0162 1846     		mov	r0, r3
 665 0164 FFF7FEFF 		bl	encoder_reading_SPI
 666 0168 2DE0     		b	.L43
 667              	.L42:
 334:..\src/interruptions.c ****                 }
 335:..\src/interruptions.c ****                 else {
 336:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 668              		.loc 1 336 0
 669 016a 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 670 016e 0D49     		ldr	r1, .L62+8
 671 0170 1346     		mov	r3, r2
 672 0172 DB00     		lsls	r3, r3, #3
 673 0174 9B1A     		subs	r3, r3, r2
 674 0176 1B01     		lsls	r3, r3, #4
 675 0178 0B44     		add	r3, r3, r1
 676 017a 03F58873 		add	r3, r3, #272
 677 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 0180 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 679 0184 9A42     		cmp	r2, r3
 680 0186 13D1     		bne	.L44
 337:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 338:..\src/interruptions.c ****                         encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 681              		.loc 1 338 0
 682 0188 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 683 018c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 684 0190 1146     		mov	r1, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 19


 685 0192 1846     		mov	r0, r3
 686 0194 FFF7FEFF 		bl	encoder_reading_SPI
 687 0198 15E0     		b	.L43
 688              	.L63:
 689 019a 00BF     		.align	2
 690              	.L62:
 691 019c 00000000 		.word	timer_value0
 692 01a0 00000000 		.word	interrupt_flag
 693 01a4 00000000 		.word	c_mem
 694 01a8 00000000 		.word	N_Encoder_Line_Connected
 695 01ac 00000000 		.word	change_ext_ref_flag
 696              	.L44:
 339:..\src/interruptions.c ****                     }
 340:..\src/interruptions.c ****                     else {
 341:..\src/interruptions.c ****                         // Get only raw encoder value
 342:..\src/interruptions.c ****                         ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 697              		.loc 1 342 0
 698 01b0 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 699 01b4 B74A     		ldr	r2, .L64
 700 01b6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 701 01b8 1A46     		mov	r2, r3
 702 01ba 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 703 01be 1946     		mov	r1, r3
 704 01c0 1046     		mov	r0, r2
 705 01c2 FFF7FEFF 		bl	ReadEncoderLine
 706              	.L43:
 343:..\src/interruptions.c ****                         // Values are stored in Encoder_Value[i] vector
 344:..\src/interruptions.c ****                     }
 345:..\src/interruptions.c ****                 }
 346:..\src/interruptions.c **** 
 347:..\src/interruptions.c ****                 // Check Interrupt     
 348:..\src/interruptions.c ****                 
 349:..\src/interruptions.c ****                 if (interrupt_flag){
 707              		.loc 1 349 0
 708 01c6 B44B     		ldr	r3, .L64+4
 709 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 710 01ca 002B     		cmp	r3, #0
 711 01cc 04D0     		beq	.L41
 350:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 712              		.loc 1 350 0
 713 01ce B24B     		ldr	r3, .L64+4
 714 01d0 0022     		movs	r2, #0
 715 01d2 1A70     		strb	r2, [r3]
 351:..\src/interruptions.c ****                     interrupt_manager();
 716              		.loc 1 351 0
 717 01d4 FFF7FEFF 		bl	interrupt_manager
 718              	.L41:
 326:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 719              		.loc 1 326 0 discriminator 2
 720 01d8 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 721 01dc 0133     		adds	r3, r3, #1
 722 01de 87F8C739 		strb	r3, [r7, #2503]
 723              	.L40:
 326:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 724              		.loc 1 326 0 is_stmt 0 discriminator 1
 725 01e2 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 726 01e6 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 20


 727 01e8 9CD9     		bls	.L45
 728              	.LBE2:
 352:..\src/interruptions.c ****                 }
 353:..\src/interruptions.c ****             }
 354:..\src/interruptions.c ****         } 
 355:..\src/interruptions.c ****         
 356:..\src/interruptions.c ****         //---------------------------------- Control Motor
 357:..\src/interruptions.c ****         
 358:..\src/interruptions.c ****         // Control MOTOR_IDX motor (always active) according to motor driver type
 359:..\src/interruptions.c ****         motor_control_generic(MOTOR_IDX);
 729              		.loc 1 359 0 is_stmt 1
 730 01ea 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 731 01ee 1846     		mov	r0, r3
 732 01f0 FFF7FEFF 		bl	motor_control_generic
 360:..\src/interruptions.c ****         
 361:..\src/interruptions.c ****         // Check external reference before processing other serial data and right after motor contr
 362:..\src/interruptions.c ****         if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 733              		.loc 1 362 0
 734 01f4 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 735 01f8 A849     		ldr	r1, .L64+8
 736 01fa 1346     		mov	r3, r2
 737 01fc DB00     		lsls	r3, r3, #3
 738 01fe 9B1A     		subs	r3, r3, r2
 739 0200 1B01     		lsls	r3, r3, #4
 740 0202 0B44     		add	r3, r3, r1
 741 0204 03F58973 		add	r3, r3, #274
 742 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 020a 012B     		cmp	r3, #1
 744 020c 0FD1     		bne	.L46
 363:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 745              		.loc 1 363 0
 746 020e 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 747 0212 A249     		ldr	r1, .L64+8
 748 0214 1346     		mov	r3, r2
 749 0216 DB00     		lsls	r3, r3, #3
 750 0218 9B1A     		subs	r3, r3, r2
 751 021a 1B01     		lsls	r3, r3, #4
 752 021c 0B44     		add	r3, r3, r1
 753 021e 03F58773 		add	r3, r3, #270
 754 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 755 0224 002B     		cmp	r3, #0
 756 0226 02D1     		bne	.L46
 364:..\src/interruptions.c ****                 change_ext_ref_flag = FALSE;
 757              		.loc 1 364 0
 758 0228 9D4B     		ldr	r3, .L64+12
 759 022a 0022     		movs	r2, #0
 760 022c 1A70     		strb	r2, [r3]
 761              	.L46:
 365:..\src/interruptions.c ****             }   
 366:..\src/interruptions.c ****         }
 367:..\src/interruptions.c ****         
 368:..\src/interruptions.c ****         // Check Interrupt 
 369:..\src/interruptions.c **** 
 370:..\src/interruptions.c ****         if (interrupt_flag){
 762              		.loc 1 370 0
 763 022e 9A4B     		ldr	r3, .L64+4
 764 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 21


 765 0232 002B     		cmp	r3, #0
 766 0234 04D0     		beq	.L47
 371:..\src/interruptions.c ****             interrupt_flag = FALSE;
 767              		.loc 1 371 0
 768 0236 984B     		ldr	r3, .L64+4
 769 0238 0022     		movs	r2, #0
 770 023a 1A70     		strb	r2, [r3]
 372:..\src/interruptions.c ****             interrupt_manager();
 771              		.loc 1 372 0
 772 023c FFF7FEFF 		bl	interrupt_manager
 773              	.L47:
 373:..\src/interruptions.c ****         }
 374:..\src/interruptions.c ****         
 375:..\src/interruptions.c ****         // Control 2nd motor (if necessary) according to motor driver type
 376:..\src/interruptions.c ****         if (c_mem.dev.use_2nd_motor_flag == TRUE){
 774              		.loc 1 376 0
 775 0240 964B     		ldr	r3, .L64+8
 776 0242 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 777 0246 012B     		cmp	r3, #1
 778 0248 2AD1     		bne	.L39
 377:..\src/interruptions.c ****             motor_control_generic(SECOND_MOTOR_IDX);
 779              		.loc 1 377 0
 780 024a 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 781 024e 1846     		mov	r0, r3
 782 0250 FFF7FEFF 		bl	motor_control_generic
 378:..\src/interruptions.c ****             
 379:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 380:..\src/interruptions.c ****             if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 783              		.loc 1 380 0
 784 0254 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 785 0258 9049     		ldr	r1, .L64+8
 786 025a 1346     		mov	r3, r2
 787 025c DB00     		lsls	r3, r3, #3
 788 025e 9B1A     		subs	r3, r3, r2
 789 0260 1B01     		lsls	r3, r3, #4
 790 0262 0B44     		add	r3, r3, r1
 791 0264 03F58973 		add	r3, r3, #274
 792 0268 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 793 026a 012B     		cmp	r3, #1
 794 026c 0FD1     		bne	.L48
 381:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 795              		.loc 1 381 0
 796 026e 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 797 0272 8A49     		ldr	r1, .L64+8
 798 0274 1346     		mov	r3, r2
 799 0276 DB00     		lsls	r3, r3, #3
 800 0278 9B1A     		subs	r3, r3, r2
 801 027a 1B01     		lsls	r3, r3, #4
 802 027c 0B44     		add	r3, r3, r1
 803 027e 03F58773 		add	r3, r3, #270
 804 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 805 0284 002B     		cmp	r3, #0
 806 0286 02D1     		bne	.L48
 382:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 807              		.loc 1 382 0
 808 0288 854B     		ldr	r3, .L64+12
 809 028a 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 22


 810 028c 1A70     		strb	r2, [r3]
 811              	.L48:
 383:..\src/interruptions.c ****                 }   
 384:..\src/interruptions.c ****             }
 385:..\src/interruptions.c ****             
 386:..\src/interruptions.c ****             // Check Interrupt 
 387:..\src/interruptions.c **** 
 388:..\src/interruptions.c ****             if (interrupt_flag){
 812              		.loc 1 388 0
 813 028e 824B     		ldr	r3, .L64+4
 814 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 0292 002B     		cmp	r3, #0
 816 0294 04D0     		beq	.L39
 389:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 817              		.loc 1 389 0
 818 0296 804B     		ldr	r3, .L64+4
 819 0298 0022     		movs	r2, #0
 820 029a 1A70     		strb	r2, [r3]
 390:..\src/interruptions.c ****                 interrupt_manager();
 821              		.loc 1 390 0
 822 029c FFF7FEFF 		bl	interrupt_manager
 823              	.L39:
 391:..\src/interruptions.c ****             }
 392:..\src/interruptions.c ****         }  
 393:..\src/interruptions.c ****     }
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 396:..\src/interruptions.c **** 
 397:..\src/interruptions.c ****     analog_read_end();
 824              		.loc 1 397 0
 825 02a0 FFF7FEFF 		bl	analog_read_end
 398:..\src/interruptions.c **** 
 399:..\src/interruptions.c ****     if (interrupt_flag){
 826              		.loc 1 399 0
 827 02a4 7C4B     		ldr	r3, .L64+4
 828 02a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 829 02a8 002B     		cmp	r3, #0
 830 02aa 04D0     		beq	.L49
 400:..\src/interruptions.c ****         interrupt_flag = FALSE;
 831              		.loc 1 400 0
 832 02ac 7A4B     		ldr	r3, .L64+4
 833 02ae 0022     		movs	r2, #0
 834 02b0 1A70     		strb	r2, [r3]
 401:..\src/interruptions.c ****         interrupt_manager();
 835              		.loc 1 401 0
 836 02b2 FFF7FEFF 		bl	interrupt_manager
 837              	.L49:
 402:..\src/interruptions.c ****     }
 403:..\src/interruptions.c **** 
 404:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 405:..\src/interruptions.c **** 
 406:..\src/interruptions.c ****     overcurrent_control();
 838              		.loc 1 406 0
 839 02b6 FFF7FEFF 		bl	overcurrent_control
 407:..\src/interruptions.c ****     
 408:..\src/interruptions.c ****     // Check Interrupt 
 409:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 23


 410:..\src/interruptions.c ****     if (interrupt_flag){
 840              		.loc 1 410 0
 841 02ba 774B     		ldr	r3, .L64+4
 842 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 843 02be 002B     		cmp	r3, #0
 844 02c0 04D0     		beq	.L50
 411:..\src/interruptions.c ****         interrupt_flag = FALSE;
 845              		.loc 1 411 0
 846 02c2 754B     		ldr	r3, .L64+4
 847 02c4 0022     		movs	r2, #0
 848 02c6 1A70     		strb	r2, [r3]
 412:..\src/interruptions.c ****         interrupt_manager();
 849              		.loc 1 412 0
 850 02c8 FFF7FEFF 		bl	interrupt_manager
 851              	.L50:
 413:..\src/interruptions.c ****     }
 414:..\src/interruptions.c **** 
 415:..\src/interruptions.c ****     //---------------------------------- Calibration 
 416:..\src/interruptions.c **** 
 417:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 418:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 852              		.loc 1 418 0
 853 02cc 754B     		ldr	r3, .L64+16
 854 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 02d0 012B     		cmp	r3, #1
 856 02d2 0ED1     		bne	.L51
 419:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 857              		.loc 1 419 0
 858 02d4 744B     		ldr	r3, .L64+20
 859 02d6 1B88     		ldrh	r3, [r3]
 860 02d8 0A2B     		cmp	r3, #10
 861 02da 04D1     		bne	.L52
 420:..\src/interruptions.c ****             calibration();
 862              		.loc 1 420 0
 863 02dc FFF7FEFF 		bl	calibration
 421:..\src/interruptions.c ****             counter_calibration = 0;
 864              		.loc 1 421 0
 865 02e0 714B     		ldr	r3, .L64+20
 866 02e2 0022     		movs	r2, #0
 867 02e4 1A80     		strh	r2, [r3]	@ movhi
 868              	.L52:
 422:..\src/interruptions.c ****         }
 423:..\src/interruptions.c ****         counter_calibration++;
 869              		.loc 1 423 0
 870 02e6 704B     		ldr	r3, .L64+20
 871 02e8 1B88     		ldrh	r3, [r3]
 872 02ea 0133     		adds	r3, r3, #1
 873 02ec 9AB2     		uxth	r2, r3
 874 02ee 6E4B     		ldr	r3, .L64+20
 875 02f0 1A80     		strh	r2, [r3]	@ movhi
 876              	.L51:
 424:..\src/interruptions.c ****     }
 425:..\src/interruptions.c **** 
 426:..\src/interruptions.c ****     // Check Interrupt 
 427:..\src/interruptions.c ****     
 428:..\src/interruptions.c ****     if (interrupt_flag){
 877              		.loc 1 428 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 24


 878 02f2 694B     		ldr	r3, .L64+4
 879 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 880 02f6 002B     		cmp	r3, #0
 881 02f8 04D0     		beq	.L53
 429:..\src/interruptions.c ****         interrupt_flag = FALSE;
 882              		.loc 1 429 0
 883 02fa 674B     		ldr	r3, .L64+4
 884 02fc 0022     		movs	r2, #0
 885 02fe 1A70     		strb	r2, [r3]
 430:..\src/interruptions.c ****         interrupt_manager();
 886              		.loc 1 430 0
 887 0300 FFF7FEFF 		bl	interrupt_manager
 888              	.L53:
 431:..\src/interruptions.c ****     }
 432:..\src/interruptions.c ****     
 433:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 889              		.loc 1 433 0
 890 0304 654B     		ldr	r3, .L64+8
 891 0306 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 892 030a 002B     		cmp	r3, #0
 893 030c 1CD1     		bne	.L54
 434:..\src/interruptions.c ****     
 435:..\src/interruptions.c ****         //---------------------------------- Rest position check
 436:..\src/interruptions.c **** 
 437:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 438:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 894              		.loc 1 438 0
 895 030e 634B     		ldr	r3, .L64+8
 896 0310 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 897 0314 012B     		cmp	r3, #1
 898 0316 17D1     		bne	.L54
 439:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 899              		.loc 1 439 0
 900 0318 634B     		ldr	r3, .L64+20
 901 031a 1B88     		ldrh	r3, [r3]
 902 031c 0A2B     		cmp	r3, #10
 903 031e 04D1     		bne	.L55
 440:..\src/interruptions.c ****                     check_rest_position();
 904              		.loc 1 440 0
 905 0320 FFF7FEFF 		bl	check_rest_position
 441:..\src/interruptions.c ****                     counter_calibration = 0;
 906              		.loc 1 441 0
 907 0324 604B     		ldr	r3, .L64+20
 908 0326 0022     		movs	r2, #0
 909 0328 1A80     		strh	r2, [r3]	@ movhi
 910              	.L55:
 442:..\src/interruptions.c ****             }
 443:..\src/interruptions.c ****             counter_calibration++;
 911              		.loc 1 443 0
 912 032a 5F4B     		ldr	r3, .L64+20
 913 032c 1B88     		ldrh	r3, [r3]
 914 032e 0133     		adds	r3, r3, #1
 915 0330 9AB2     		uxth	r2, r3
 916 0332 5D4B     		ldr	r3, .L64+20
 917 0334 1A80     		strh	r2, [r3]	@ movhi
 444:..\src/interruptions.c **** 
 445:..\src/interruptions.c ****             // Check Interrupt     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 25


 446:..\src/interruptions.c ****             if (interrupt_flag){
 918              		.loc 1 446 0
 919 0336 584B     		ldr	r3, .L64+4
 920 0338 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 921 033a 002B     		cmp	r3, #0
 922 033c 04D0     		beq	.L54
 447:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 923              		.loc 1 447 0
 924 033e 564B     		ldr	r3, .L64+4
 925 0340 0022     		movs	r2, #0
 926 0342 1A70     		strb	r2, [r3]
 448:..\src/interruptions.c ****                 interrupt_manager();
 927              		.loc 1 448 0
 928 0344 FFF7FEFF 		bl	interrupt_manager
 929              	.L54:
 449:..\src/interruptions.c ****             }
 450:..\src/interruptions.c ****         }
 451:..\src/interruptions.c ****         
 452:..\src/interruptions.c ****     }
 453:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 454:..\src/interruptions.c **** 
 455:..\src/interruptions.c ****     cycles_counter_update();
 930              		.loc 1 455 0
 931 0348 FFF7FEFF 		bl	cycles_counter_update
 456:..\src/interruptions.c **** 
 457:..\src/interruptions.c ****     // Check Cycles Interrupt 
 458:..\src/interruptions.c ****     
 459:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 932              		.loc 1 459 0
 933 034c 574B     		ldr	r3, .L64+24
 934 034e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 935 0350 002B     		cmp	r3, #0
 936 0352 25D0     		beq	.L56
 460:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 937              		.loc 1 460 0
 938 0354 554B     		ldr	r3, .L64+24
 939 0356 0022     		movs	r2, #0
 940 0358 1A70     		strb	r2, [r3]
 461:..\src/interruptions.c **** 
 462:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 463:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 464:..\src/interruptions.c ****         if(can_write) {
 941              		.loc 1 464 0
 942 035a 554B     		ldr	r3, .L64+28
 943 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 035e 002B     		cmp	r3, #0
 945 0360 1ED0     		beq	.L56
 465:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 946              		.loc 1 465 0
 947 0362 544B     		ldr	r3, .L64+32
 948 0364 0022     		movs	r2, #0
 949 0366 1A70     		strb	r2, [r3]
 466:..\src/interruptions.c ****             
 467:..\src/interruptions.c ****             //Update time variable
 468:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 950              		.loc 1 468 0
 951 0368 534B     		ldr	r3, .L64+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 26


 952 036a 9B6D     		ldr	r3, [r3, #88]
 953 036c 7833     		adds	r3, r3, #120
 954 036e 524A     		ldr	r2, .L64+36
 955 0370 9365     		str	r3, [r2, #88]
 469:..\src/interruptions.c ****             
 470:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 956              		.loc 1 470 0
 957 0372 4A4B     		ldr	r3, .L64+8
 958 0374 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 959 0378 012B     		cmp	r3, #1
 960 037a 11D1     		bne	.L56
 471:..\src/interruptions.c ****                 
 472:..\src/interruptions.c ****                 store_RTC_current_time();
 961              		.loc 1 472 0
 962 037c FFF7FEFF 		bl	store_RTC_current_time
 473:..\src/interruptions.c ****                 
 474:..\src/interruptions.c ****                 //Write in SD card
 475:..\src/interruptions.c ****                 prepare_SD_info(info_);
 963              		.loc 1 475 0
 964 0380 3B46     		mov	r3, r7
 965 0382 1846     		mov	r0, r3
 966 0384 FFF7FEFF 		bl	prepare_SD_info
 476:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 967              		.loc 1 476 0
 968 0388 4C4B     		ldr	r3, .L64+40
 969 038a 1C68     		ldr	r4, [r3]
 970 038c 3B46     		mov	r3, r7
 971 038e 1846     		mov	r0, r3
 972 0390 FFF7FEFF 		bl	strlen
 973 0394 0246     		mov	r2, r0
 974 0396 3B46     		mov	r3, r7
 975 0398 1946     		mov	r1, r3
 976 039a 2046     		mov	r0, r4
 977 039c FFF7FEFF 		bl	FS_Write
 978              	.L56:
 477:..\src/interruptions.c ****             }
 478:..\src/interruptions.c ****         }
 479:..\src/interruptions.c ****     }
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     // Check Interrupt 
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     if (interrupt_flag){
 979              		.loc 1 483 0
 980 03a0 3D4B     		ldr	r3, .L64+4
 981 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 03a4 002B     		cmp	r3, #0
 983 03a6 04D0     		beq	.L57
 484:..\src/interruptions.c ****         interrupt_flag = FALSE;
 984              		.loc 1 484 0
 985 03a8 3B4B     		ldr	r3, .L64+4
 986 03aa 0022     		movs	r2, #0
 987 03ac 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****         interrupt_manager();
 988              		.loc 1 485 0
 989 03ae FFF7FEFF 		bl	interrupt_manager
 990              	.L57:
 486:..\src/interruptions.c ****     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 27


 487:..\src/interruptions.c ****     
 488:..\src/interruptions.c ****     
 489:..\src/interruptions.c ****     //---------------------------------- Check battery
 490:..\src/interruptions.c **** 
 491:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 492:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 991              		.loc 1 492 0
 992 03b2 434B     		ldr	r3, .L64+44
 993 03b4 1B88     		ldrh	r3, [r3]
 994 03b6 0A2B     		cmp	r3, #10
 995 03b8 04D1     		bne	.L58
 493:..\src/interruptions.c ****         battery_management();   
 996              		.loc 1 493 0
 997 03ba FFF7FEFF 		bl	battery_management
 494:..\src/interruptions.c ****         counter_tension_func = 0;
 998              		.loc 1 494 0
 999 03be 404B     		ldr	r3, .L64+44
 1000 03c0 0022     		movs	r2, #0
 1001 03c2 1A80     		strh	r2, [r3]	@ movhi
 1002              	.L58:
 495:..\src/interruptions.c ****     }
 496:..\src/interruptions.c ****     counter_tension_func++;
 1003              		.loc 1 496 0
 1004 03c4 3E4B     		ldr	r3, .L64+44
 1005 03c6 1B88     		ldrh	r3, [r3]
 1006 03c8 0133     		adds	r3, r3, #1
 1007 03ca 9AB2     		uxth	r2, r3
 1008 03cc 3C4B     		ldr	r3, .L64+44
 1009 03ce 1A80     		strh	r2, [r3]	@ movhi
 497:..\src/interruptions.c **** 
 498:..\src/interruptions.c ****     // Check Interrupt 
 499:..\src/interruptions.c ****     
 500:..\src/interruptions.c ****     if (interrupt_flag){
 1010              		.loc 1 500 0
 1011 03d0 314B     		ldr	r3, .L64+4
 1012 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1013 03d4 002B     		cmp	r3, #0
 1014 03d6 04D0     		beq	.L59
 501:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1015              		.loc 1 501 0
 1016 03d8 2F4B     		ldr	r3, .L64+4
 1017 03da 0022     		movs	r2, #0
 1018 03dc 1A70     		strb	r2, [r3]
 502:..\src/interruptions.c ****         interrupt_manager();
 1019              		.loc 1 502 0
 1020 03de FFF7FEFF 		bl	interrupt_manager
 1021              	.L59:
 503:..\src/interruptions.c ****     }
 504:..\src/interruptions.c ****    
 505:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 506:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1022              		.loc 1 506 0
 1023 03e2 2E4B     		ldr	r3, .L64+8
 1024 03e4 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1025 03e8 002B     		cmp	r3, #0
 1026 03ea 0AD0     		beq	.L60
 507:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 28


 1027              		.loc 1 507 0
 1028 03ec FFF7FEFF 		bl	ReadAllIMUs
 508:..\src/interruptions.c ****         
 509:..\src/interruptions.c ****         if (interrupt_flag){
 1029              		.loc 1 509 0
 1030 03f0 294B     		ldr	r3, .L64+4
 1031 03f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1032 03f4 002B     		cmp	r3, #0
 1033 03f6 04D0     		beq	.L60
 510:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1034              		.loc 1 510 0
 1035 03f8 274B     		ldr	r3, .L64+4
 1036 03fa 0022     		movs	r2, #0
 1037 03fc 1A70     		strb	r2, [r3]
 511:..\src/interruptions.c ****             interrupt_manager();
 1038              		.loc 1 511 0
 1039 03fe FFF7FEFF 		bl	interrupt_manager
 1040              	.L60:
 512:..\src/interruptions.c ****         }
 513:..\src/interruptions.c ****     }
 514:..\src/interruptions.c ****    
 515:..\src/interruptions.c ****     //---------------------------------- Update States
 516:..\src/interruptions.c ****     
 517:..\src/interruptions.c ****     // Load k-1 state
 518:..\src/interruptions.c ****     memcpy( &g_emg_measOld, &g_emg_meas, sizeof(g_emg_meas) );
 1041              		.loc 1 518 0
 1042 0402 304A     		ldr	r2, .L64+48
 1043 0404 304B     		ldr	r3, .L64+52
 1044 0406 1446     		mov	r4, r2
 1045 0408 1D46     		mov	r5, r3
 1046 040a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1047 040c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1048 040e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1049 0412 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 519:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1050              		.loc 1 519 0
 1051 0416 2D4A     		ldr	r2, .L64+56
 1052 0418 2D4B     		ldr	r3, .L64+60
 1053 041a 1046     		mov	r0, r2
 1054 041c 1946     		mov	r1, r3
 1055 041e 6823     		movs	r3, #104
 1056 0420 1A46     		mov	r2, r3
 1057 0422 FFF7FEFF 		bl	memcpy
 520:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1058              		.loc 1 520 0
 1059 0426 2B4A     		ldr	r2, .L64+64
 1060 0428 2B4B     		ldr	r3, .L64+68
 1061 042a 1446     		mov	r4, r2
 1062 042c 1D46     		mov	r5, r3
 1063 042e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1064 0430 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1065 0432 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1066 0436 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 521:..\src/interruptions.c **** 
 522:..\src/interruptions.c ****     // Load k+1 state        
 523:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1067              		.loc 1 523 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 29


 1068 043a 274A     		ldr	r2, .L64+68
 1069 043c 274B     		ldr	r3, .L64+72
 1070 043e 1446     		mov	r4, r2
 1071 0440 1D46     		mov	r5, r3
 1072 0442 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1073 0444 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1074 0446 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1075 044a 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 524:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1076              		.loc 1 524 0
 1077 044e 244A     		ldr	r2, .L64+76
 1078 0450 244B     		ldr	r3, .L64+80
 1079 0452 1046     		mov	r0, r2
 1080 0454 1946     		mov	r1, r3
 1081 0456 C823     		movs	r3, #200
 1082 0458 1A46     		mov	r2, r3
 1083 045a FFF7FEFF 		bl	memcpy
 525:..\src/interruptions.c ****                 
 526:..\src/interruptions.c ****     if (interrupt_flag){
 1084              		.loc 1 526 0
 1085 045e 0E4B     		ldr	r3, .L64+4
 1086 0460 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 0462 002B     		cmp	r3, #0
 1088 0464 04D0     		beq	.L61
 527:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1089              		.loc 1 527 0
 1090 0466 0C4B     		ldr	r3, .L64+4
 1091 0468 0022     		movs	r2, #0
 1092 046a 1A70     		strb	r2, [r3]
 528:..\src/interruptions.c ****         interrupt_manager();
 1093              		.loc 1 528 0
 1094 046c FFF7FEFF 		bl	interrupt_manager
 1095              	.L61:
 529:..\src/interruptions.c ****     }
 530:..\src/interruptions.c **** 
 531:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1096              		.loc 1 531 0
 1097 0470 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1098 0474 0346     		mov	r3, r0
 1099 0476 1A46     		mov	r2, r3
 1100 0478 1B4B     		ldr	r3, .L64+84
 1101 047a 1A80     		strh	r2, [r3]	@ movhi
 532:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1102              		.loc 1 532 0
 1103 047c 1B4B     		ldr	r3, .L64+88
 1104 047e 1B88     		ldrh	r3, [r3]
 1105 0480 1A46     		mov	r2, r3
 1106 0482 194B     		ldr	r3, .L64+84
 1107 0484 1B88     		ldrh	r3, [r3]
 1108 0486 D31A     		subs	r3, r2, r3
 1109 0488 1846     		mov	r0, r3
 1110 048a FFF7FEFF 		bl	__aeabi_i2f
 1111 048e 0346     		mov	r3, r0
 1112 0490 2EE0     		b	.L65
 1113              	.L66:
 1114 0492 00BF     		.align	2
 1115              	.L64:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 30


 1116 0494 00000000 		.word	N_Encoder_Line_Connected
 1117 0498 00000000 		.word	interrupt_flag
 1118 049c 00000000 		.word	c_mem
 1119 04a0 00000000 		.word	change_ext_ref_flag
 1120 04a4 00000000 		.word	calib
 1121 04a8 00000000 		.word	counter_calibration.10376
 1122 04ac 00000000 		.word	cycles_interrupt_flag
 1123 04b0 00000000 		.word	can_write
 1124 04b4 00000000 		.word	cycles_status
 1125 04b8 00000000 		.word	g_mem
 1126 04bc 00000000 		.word	pFile
 1127 04c0 02000000 		.word	counter_tension_func.10377
 1128 04c4 00000000 		.word	g_emg_measOld
 1129 04c8 00000000 		.word	g_emg_meas
 1130 04cc 00000000 		.word	g_measOld
 1131 04d0 00000000 		.word	g_meas
 1132 04d4 00000000 		.word	g_refOld
 1133 04d8 00000000 		.word	g_ref
 1134 04dc 00000000 		.word	g_refNew
 1135 04e0 00000000 		.word	g_imu
 1136 04e4 00000000 		.word	g_imuNew
 1137 04e8 00000000 		.word	timer_value
 1138 04ec 00000000 		.word	timer_value0
 1139              	.L65:
 1140 04f0 0749     		ldr	r1, .L67
 1141 04f2 1846     		mov	r0, r3
 1142 04f4 FFF7FEFF 		bl	__aeabi_fdiv
 1143 04f8 0346     		mov	r3, r0
 1144 04fa 1A46     		mov	r2, r3
 1145 04fc 054B     		ldr	r3, .L67+4
 1146 04fe 1A60     		str	r2, [r3]	@ float
 533:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1147              		.loc 1 533 0
 1148 0500 0120     		movs	r0, #1
 1149 0502 FFF7FEFF 		bl	MY_TIMER_REG_Write
 534:..\src/interruptions.c **** 
 535:..\src/interruptions.c **** }
 1150              		.loc 1 535 0
 1151 0506 00BF     		nop
 1152 0508 07F6C817 		addw	r7, r7, #2504
 1153              		.cfi_def_cfa_offset 16
 1154 050c BD46     		mov	sp, r7
 1155              		.cfi_def_cfa_register 13
 1156              		@ sp needed
 1157 050e B0BD     		pop	{r4, r5, r7, pc}
 1158              	.L68:
 1159              		.align	2
 1160              	.L67:
 1161 0510 00247449 		.word	1232348160
 1162 0514 00000000 		.word	cycle_time
 1163              		.cfi_endproc
 1164              	.LFE67:
 1165              		.size	function_scheduler, .-function_scheduler
 1166              		.section	.text.motor_control_SH,"ax",%progbits
 1167              		.align	2
 1168              		.global	motor_control_SH
 1169              		.thumb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 31


 1170              		.thumb_func
 1171              		.type	motor_control_SH, %function
 1172              	motor_control_SH:
 1173              	.LFB68:
 536:..\src/interruptions.c **** 
 537:..\src/interruptions.c **** //==============================================================================
 538:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 539:..\src/interruptions.c **** //==============================================================================
 540:..\src/interruptions.c **** void motor_control_SH() {
 1174              		.loc 1 540 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 88
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178 0000 80B5     		push	{r7, lr}
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 96B0     		sub	sp, sp, #88
 1183              		.cfi_def_cfa_offset 96
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 541:..\src/interruptions.c **** 
 542:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 1186              		.loc 1 542 0
 1187 0006 0023     		movs	r3, #0
 1188 0008 7B65     		str	r3, [r7, #84]
 543:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 544:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 545:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 546:..\src/interruptions.c ****     int32 CYDATA handle_value;
 547:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 548:..\src/interruptions.c **** 
 549:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 1189              		.loc 1 549 0
 1190 000a 0023     		movs	r3, #0
 1191 000c 87F84B30 		strb	r3, [r7, #75]
 550:..\src/interruptions.c ****     
 551:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 1192              		.loc 1 551 0
 1193 0010 97F84B20 		ldrb	r2, [r7, #75]	@ zero_extendqisi2
 1194 0014 1346     		mov	r3, r2
 1195 0016 DB00     		lsls	r3, r3, #3
 1196 0018 9B1A     		subs	r3, r3, r2
 1197 001a 1B01     		lsls	r3, r3, #4
 1198 001c B033     		adds	r3, r3, #176
 1199 001e A34A     		ldr	r2, .L182
 1200 0020 1344     		add	r3, r3, r2
 1201 0022 7B64     		str	r3, [r7, #68]
 552:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 1202              		.loc 1 552 0
 1203 0024 7B6C     		ldr	r3, [r7, #68]
 1204 0026 93F86030 		ldrb	r3, [r3, #96]
 1205 002a 87F84330 		strb	r3, [r7, #67]
 553:..\src/interruptions.c ****     
 554:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 1206              		.loc 1 554 0
 1207 002e 7B6C     		ldr	r3, [r7, #68]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 32


 1208 0030 1B68     		ldr	r3, [r3]
 1209 0032 FB63     		str	r3, [r7, #60]
 555:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 1210              		.loc 1 555 0
 1211 0034 7B6C     		ldr	r3, [r7, #68]
 1212 0036 5B68     		ldr	r3, [r3, #4]
 1213 0038 BB63     		str	r3, [r7, #56]
 556:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 1214              		.loc 1 556 0
 1215 003a 7B6C     		ldr	r3, [r7, #68]
 1216 003c 9B68     		ldr	r3, [r3, #8]
 1217 003e 7B63     		str	r3, [r7, #52]
 557:..\src/interruptions.c **** 
 558:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 1218              		.loc 1 558 0
 1219 0040 7B6C     		ldr	r3, [r7, #68]
 1220 0042 DB68     		ldr	r3, [r3, #12]
 1221 0044 3B63     		str	r3, [r7, #48]
 559:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 1222              		.loc 1 559 0
 1223 0046 7B6C     		ldr	r3, [r7, #68]
 1224 0048 1B69     		ldr	r3, [r3, #16]
 1225 004a FB62     		str	r3, [r7, #44]
 560:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 1226              		.loc 1 560 0
 1227 004c 7B6C     		ldr	r3, [r7, #68]
 1228 004e 5B69     		ldr	r3, [r3, #20]
 1229 0050 BB62     		str	r3, [r7, #40]
 561:..\src/interruptions.c **** 
 562:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 1230              		.loc 1 562 0
 1231 0052 7B6C     		ldr	r3, [r7, #68]
 1232 0054 9B69     		ldr	r3, [r3, #24]
 1233 0056 7B62     		str	r3, [r7, #36]
 563:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 1234              		.loc 1 563 0
 1235 0058 7B6C     		ldr	r3, [r7, #68]
 1236 005a DB69     		ldr	r3, [r3, #28]
 1237 005c 3B62     		str	r3, [r7, #32]
 564:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 1238              		.loc 1 564 0
 1239 005e 7B6C     		ldr	r3, [r7, #68]
 1240 0060 1B6A     		ldr	r3, [r3, #32]
 1241 0062 FB61     		str	r3, [r7, #28]
 565:..\src/interruptions.c ****     
 566:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 1242              		.loc 1 566 0
 1243 0064 7B6C     		ldr	r3, [r7, #68]
 1244 0066 5B6A     		ldr	r3, [r3, #36]
 1245 0068 BB61     		str	r3, [r7, #24]
 567:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 1246              		.loc 1 567 0
 1247 006a 7B6C     		ldr	r3, [r7, #68]
 1248 006c 9B6A     		ldr	r3, [r3, #40]
 1249 006e 7B61     		str	r3, [r7, #20]
 568:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 1250              		.loc 1 568 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 33


 1251 0070 7B6C     		ldr	r3, [r7, #68]
 1252 0072 DB6A     		ldr	r3, [r3, #44]
 1253 0074 3B61     		str	r3, [r7, #16]
 569:..\src/interruptions.c **** 
 570:..\src/interruptions.c ****     // Static Variables
 571:..\src/interruptions.c **** 
 572:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 573:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 574:..\src/interruptions.c ****     
 575:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 576:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 577:..\src/interruptions.c ****     static int32 prev_pwm;
 578:..\src/interruptions.c **** 
 579:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 580:..\src/interruptions.c ****     static uint32 position_counter = 0;
 581:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 582:..\src/interruptions.c ****                                     // 1 EMG 1
 583:..\src/interruptions.c ****                                     // 2 EMG 2
 584:..\src/interruptions.c ****                                     // wait for both to get down
 585:..\src/interruptions.c ****     
 586:..\src/interruptions.c **** 
 587:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1254              		.loc 1 587 0
 1255 0076 8E4B     		ldr	r3, .L182+4
 1256 0078 1B68     		ldr	r3, [r3]
 1257 007a 8C4A     		ldr	r2, .L182
 1258 007c B2F8F021 		ldrh	r2, [r2, #496]
 1259 0080 9B1A     		subs	r3, r3, r2
 1260 0082 FB60     		str	r3, [r7, #12]
 588:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1261              		.loc 1 588 0
 1262 0084 8A4B     		ldr	r3, .L182+4
 1263 0086 5B68     		ldr	r3, [r3, #4]
 1264 0088 884A     		ldr	r2, .L182
 1265 008a B2F8F221 		ldrh	r2, [r2, #498]
 1266 008e 9B1A     		subs	r3, r3, r2
 1267 0090 BB60     		str	r3, [r7, #8]
 589:..\src/interruptions.c **** 
 590:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
 591:..\src/interruptions.c ****     switch(SH_MOT->input_mode) {
 1268              		.loc 1 591 0
 1269 0092 7B6C     		ldr	r3, [r7, #68]
 1270 0094 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1271 0098 013B     		subs	r3, r3, #1
 1272 009a 052B     		cmp	r3, #5
 1273 009c 00F2C681 		bhi	.L174
 1274 00a0 01A2     		adr	r2, .L72
 1275 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1276 00a6 00BF     		.p2align 2
 1277              	.L72:
 1278 00a8 C1000000 		.word	.L71+1
 1279 00ac A3010000 		.word	.L73+1
 1280 00b0 0B020000 		.word	.L74+1
 1281 00b4 7B020000 		.word	.L75+1
 1282 00b8 53030000 		.word	.L76+1
 1283 00bc D1010000 		.word	.L77+1
 1284              		.p2align 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 34


 1285              	.L71:
 592:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 593:..\src/interruptions.c **** 
 594:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 595:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 596:..\src/interruptions.c ****             if (c_mem.enc[SH_ENC_L].double_encoder_on_off) 
 1286              		.loc 1 596 0
 1287 00c0 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1288 00c4 7949     		ldr	r1, .L182
 1289 00c6 1346     		mov	r3, r2
 1290 00c8 5B00     		lsls	r3, r3, #1
 1291 00ca 1344     		add	r3, r3, r2
 1292 00cc 1B01     		lsls	r3, r3, #4
 1293 00ce 0B44     		add	r3, r3, r1
 1294 00d0 03F5D873 		add	r3, r3, #432
 1295 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1296 00d6 002B     		cmp	r3, #0
 1297 00d8 1BD0     		beq	.L78
 597:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[2] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1298              		.loc 1 597 0
 1299 00da 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1300 00de 754A     		ldr	r2, .L182+8
 1301 00e0 3421     		movs	r1, #52
 1302 00e2 01FB03F3 		mul	r3, r1, r3
 1303 00e6 1344     		add	r3, r3, r2
 1304 00e8 0833     		adds	r3, r3, #8
 1305 00ea 1968     		ldr	r1, [r3]
 1306 00ec 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1307 00f0 6E48     		ldr	r0, .L182
 1308 00f2 1346     		mov	r3, r2
 1309 00f4 5B00     		lsls	r3, r3, #1
 1310 00f6 1344     		add	r3, r3, r2
 1311 00f8 1B01     		lsls	r3, r3, #4
 1312 00fa 0344     		add	r3, r3, r0
 1313 00fc 03F5DA73 		add	r3, r3, #436
 1314 0100 93F90030 		ldrsb	r3, [r3]
 1315 0104 03FB01F2 		mul	r2, r3, r1
 1316 0108 7B6C     		ldr	r3, [r7, #68]
 1317 010a 5B6B     		ldr	r3, [r3, #52]
 1318 010c 1344     		add	r3, r3, r2
 1319 010e FB64     		str	r3, [r7, #76]
 1320 0110 1AE0     		b	.L79
 1321              	.L78:
 598:..\src/interruptions.c ****             else
 599:..\src/interruptions.c ****                 handle_value = (g_meas[SH_ENC_L].pos[1] * c_mem.enc[SH_ENC_L].motor_handle_ratio) +
 1322              		.loc 1 599 0
 1323 0112 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1324 0116 674A     		ldr	r2, .L182+8
 1325 0118 3421     		movs	r1, #52
 1326 011a 01FB03F3 		mul	r3, r1, r3
 1327 011e 1344     		add	r3, r3, r2
 1328 0120 0433     		adds	r3, r3, #4
 1329 0122 1968     		ldr	r1, [r3]
 1330 0124 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 1331 0128 6048     		ldr	r0, .L182
 1332 012a 1346     		mov	r3, r2
 1333 012c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 35


 1334 012e 1344     		add	r3, r3, r2
 1335 0130 1B01     		lsls	r3, r3, #4
 1336 0132 0344     		add	r3, r3, r0
 1337 0134 03F5DA73 		add	r3, r3, #436
 1338 0138 93F90030 		ldrsb	r3, [r3]
 1339 013c 03FB01F2 		mul	r2, r3, r1
 1340 0140 7B6C     		ldr	r3, [r7, #68]
 1341 0142 5B6B     		ldr	r3, [r3, #52]
 1342 0144 1344     		add	r3, r3, r2
 1343 0146 FB64     		str	r3, [r7, #76]
 1344              	.L79:
 600:..\src/interruptions.c ****             
 601:..\src/interruptions.c **** 
 602:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 603:..\src/interruptions.c ****             if (((handle_value - g_refOld[0].pos) > SH_MOT->max_step_pos) && (SH_MOT->max_step_pos 
 1345              		.loc 1 603 0
 1346 0148 5B4B     		ldr	r3, .L182+12
 1347 014a 1B68     		ldr	r3, [r3]
 1348 014c FA6C     		ldr	r2, [r7, #76]
 1349 014e D21A     		subs	r2, r2, r3
 1350 0150 7B6C     		ldr	r3, [r7, #68]
 1351 0152 1B6C     		ldr	r3, [r3, #64]
 1352 0154 9A42     		cmp	r2, r3
 1353 0156 0BDD     		ble	.L80
 1354              		.loc 1 603 0 is_stmt 0 discriminator 1
 1355 0158 7B6C     		ldr	r3, [r7, #68]
 1356 015a 1B6C     		ldr	r3, [r3, #64]
 1357 015c 002B     		cmp	r3, #0
 1358 015e 07D0     		beq	.L80
 604:..\src/interruptions.c ****                 g_ref[0].pos += SH_MOT->max_step_pos;
 1359              		.loc 1 604 0 is_stmt 1
 1360 0160 564B     		ldr	r3, .L182+16
 1361 0162 1A68     		ldr	r2, [r3]
 1362 0164 7B6C     		ldr	r3, [r7, #68]
 1363 0166 1B6C     		ldr	r3, [r3, #64]
 1364 0168 1344     		add	r3, r3, r2
 1365 016a 544A     		ldr	r2, .L182+16
 1366 016c 1360     		str	r3, [r2]
 1367 016e 17E0     		b	.L81
 1368              	.L80:
 605:..\src/interruptions.c ****             else {
 606:..\src/interruptions.c ****                 if (((handle_value - g_refOld[0].pos) < SH_MOT->max_step_neg) && (SH_MOT->max_step_
 1369              		.loc 1 606 0
 1370 0170 514B     		ldr	r3, .L182+12
 1371 0172 1B68     		ldr	r3, [r3]
 1372 0174 FA6C     		ldr	r2, [r7, #76]
 1373 0176 D21A     		subs	r2, r2, r3
 1374 0178 7B6C     		ldr	r3, [r7, #68]
 1375 017a DB6B     		ldr	r3, [r3, #60]
 1376 017c 9A42     		cmp	r2, r3
 1377 017e 0BDA     		bge	.L82
 1378              		.loc 1 606 0 is_stmt 0 discriminator 1
 1379 0180 7B6C     		ldr	r3, [r7, #68]
 1380 0182 DB6B     		ldr	r3, [r3, #60]
 1381 0184 002B     		cmp	r3, #0
 1382 0186 07D0     		beq	.L82
 607:..\src/interruptions.c ****                     g_ref[0].pos += SH_MOT->max_step_neg;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 36


 1383              		.loc 1 607 0 is_stmt 1
 1384 0188 4C4B     		ldr	r3, .L182+16
 1385 018a 1A68     		ldr	r2, [r3]
 1386 018c 7B6C     		ldr	r3, [r7, #68]
 1387 018e DB6B     		ldr	r3, [r3, #60]
 1388 0190 1344     		add	r3, r3, r2
 1389 0192 4A4A     		ldr	r2, .L182+16
 1390 0194 1360     		str	r3, [r2]
 1391 0196 03E0     		b	.L81
 1392              	.L82:
 608:..\src/interruptions.c ****                 else
 609:..\src/interruptions.c ****                     g_ref[0].pos = handle_value;
 1393              		.loc 1 609 0
 1394 0198 484A     		ldr	r2, .L182+16
 1395 019a FB6C     		ldr	r3, [r7, #76]
 1396 019c 1360     		str	r3, [r2]
 610:..\src/interruptions.c ****             }
 611:..\src/interruptions.c ****             break;
 1397              		.loc 1 611 0
 1398 019e 48E1     		b	.L83
 1399              	.L81:
 1400 01a0 47E1     		b	.L83
 1401              	.L73:
 612:..\src/interruptions.c ****             
 613:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 614:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1402              		.loc 1 614 0
 1403 01a2 FB68     		ldr	r3, [r7, #12]
 1404 01a4 002B     		cmp	r3, #0
 1405 01a6 0FDD     		ble	.L84
 615:..\src/interruptions.c ****                 g_ref[0].pos = (err_emg_1 * g_mem.motor[0].pos_lim_sup) / (1024 - c_mem.emg.emg_thr
 1406              		.loc 1 615 0
 1407 01a8 454B     		ldr	r3, .L182+20
 1408 01aa D3F8E830 		ldr	r3, [r3, #232]
 1409 01ae FA68     		ldr	r2, [r7, #12]
 1410 01b0 02FB03F2 		mul	r2, r2, r3
 1411 01b4 3D4B     		ldr	r3, .L182
 1412 01b6 B3F8F031 		ldrh	r3, [r3, #496]
 1413 01ba C3F58063 		rsb	r3, r3, #1024
 1414 01be 92FBF3F3 		sdiv	r3, r2, r3
 1415 01c2 3E4A     		ldr	r2, .L182+16
 1416 01c4 1360     		str	r3, [r2]
 616:..\src/interruptions.c ****             else
 617:..\src/interruptions.c ****                 g_ref[0].pos = 0;
 618:..\src/interruptions.c ****             break;
 1417              		.loc 1 618 0
 1418 01c6 34E1     		b	.L83
 1419              	.L84:
 617:..\src/interruptions.c ****             break;
 1420              		.loc 1 617 0
 1421 01c8 3C4B     		ldr	r3, .L182+16
 1422 01ca 0022     		movs	r2, #0
 1423 01cc 1A60     		str	r2, [r3]
 1424              		.loc 1 618 0
 1425 01ce 30E1     		b	.L83
 1426              	.L77:
 619:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 37


 620:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 621:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1427              		.loc 1 621 0
 1428 01d0 FB68     		ldr	r3, [r7, #12]
 1429 01d2 002B     		cmp	r3, #0
 1430 01d4 13DD     		ble	.L86
 622:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup - (err_emg_1 * g_mem.motor[0].pos_lim_sup
 1431              		.loc 1 622 0
 1432 01d6 3A4B     		ldr	r3, .L182+20
 1433 01d8 D3F8E820 		ldr	r2, [r3, #232]
 1434 01dc 384B     		ldr	r3, .L182+20
 1435 01de D3F8E830 		ldr	r3, [r3, #232]
 1436 01e2 F968     		ldr	r1, [r7, #12]
 1437 01e4 01FB03F1 		mul	r1, r1, r3
 1438 01e8 304B     		ldr	r3, .L182
 1439 01ea B3F8F031 		ldrh	r3, [r3, #496]
 1440 01ee C3F58063 		rsb	r3, r3, #1024
 1441 01f2 91FBF3F3 		sdiv	r3, r1, r3
 1442 01f6 D31A     		subs	r3, r2, r3
 1443 01f8 304A     		ldr	r2, .L182+16
 1444 01fa 1360     		str	r3, [r2]
 623:..\src/interruptions.c ****             else
 624:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.motor[0].pos_lim_sup;
 625:..\src/interruptions.c ****             break;
 1445              		.loc 1 625 0
 1446 01fc 19E1     		b	.L83
 1447              	.L86:
 624:..\src/interruptions.c ****             break;
 1448              		.loc 1 624 0
 1449 01fe 304B     		ldr	r3, .L182+20
 1450 0200 D3F8E830 		ldr	r3, [r3, #232]
 1451 0204 2D4A     		ldr	r2, .L182+16
 1452 0206 1360     		str	r3, [r2]
 1453              		.loc 1 625 0
 1454 0208 13E1     		b	.L83
 1455              	.L74:
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 628:..\src/interruptions.c ****             g_ref[0].pos = g_mem.motor[0].pos_lim_sup - g_refOld[0].pos;
 1456              		.loc 1 628 0
 1457 020a 2D4B     		ldr	r3, .L182+20
 1458 020c D3F8E820 		ldr	r2, [r3, #232]
 1459 0210 294B     		ldr	r3, .L182+12
 1460 0212 1B68     		ldr	r3, [r3]
 1461 0214 D31A     		subs	r3, r2, r3
 1462 0216 294A     		ldr	r2, .L182+16
 1463 0218 1360     		str	r3, [r2]
 629:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1464              		.loc 1 629 0
 1465 021a FB68     		ldr	r3, [r7, #12]
 1466 021c 002B     		cmp	r3, #0
 1467 021e 13DD     		ble	.L88
 630:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (1024
 1468              		.loc 1 630 0
 1469 0220 254B     		ldr	r3, .L182+12
 1470 0222 1A68     		ldr	r2, [r3]
 1471 0224 264B     		ldr	r3, .L182+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 38


 1472 0226 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1473 022a 1946     		mov	r1, r3
 1474 022c FB68     		ldr	r3, [r7, #12]
 1475 022e 03FB01F3 		mul	r3, r3, r1
 1476 0232 5900     		lsls	r1, r3, #1
 1477 0234 1D4B     		ldr	r3, .L182
 1478 0236 B3F8F031 		ldrh	r3, [r3, #496]
 1479 023a C3F58063 		rsb	r3, r3, #1024
 1480 023e 91FBF3F3 		sdiv	r3, r1, r3
 1481 0242 1344     		add	r3, r3, r2
 1482 0244 1D4A     		ldr	r2, .L182+16
 1483 0246 1360     		str	r3, [r2]
 1484              	.L88:
 631:..\src/interruptions.c ****             }
 632:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1485              		.loc 1 632 0
 1486 0248 BB68     		ldr	r3, [r7, #8]
 1487 024a 002B     		cmp	r3, #0
 1488 024c 40F3F080 		ble	.L175
 633:..\src/interruptions.c ****                 g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (1024
 1489              		.loc 1 633 0
 1490 0250 194B     		ldr	r3, .L182+12
 1491 0252 1A68     		ldr	r2, [r3]
 1492 0254 1A4B     		ldr	r3, .L182+20
 1493 0256 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1494 025a 1946     		mov	r1, r3
 1495 025c BB68     		ldr	r3, [r7, #8]
 1496 025e 03FB01F3 		mul	r3, r3, r1
 1497 0262 5900     		lsls	r1, r3, #1
 1498 0264 114B     		ldr	r3, .L182
 1499 0266 B3F8F231 		ldrh	r3, [r3, #498]
 1500 026a C3F58063 		rsb	r3, r3, #1024
 1501 026e 91FBF3F3 		sdiv	r3, r1, r3
 1502 0272 D31A     		subs	r3, r2, r3
 1503 0274 114A     		ldr	r2, .L182+16
 1504 0276 1360     		str	r3, [r2]
 634:..\src/interruptions.c ****             }
 635:..\src/interruptions.c ****             break;
 1505              		.loc 1 635 0
 1506 0278 DAE0     		b	.L175
 1507              	.L75:
 636:..\src/interruptions.c **** 
 637:..\src/interruptions.c **** 
 638:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 639:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1508              		.loc 1 639 0
 1509 027a 0F4B     		ldr	r3, .L182+12
 1510 027c 1B68     		ldr	r3, [r3]
 1511 027e 0F4A     		ldr	r2, .L182+16
 1512 0280 1360     		str	r3, [r2]
 640:..\src/interruptions.c ****             switch (current_emg) {
 1513              		.loc 1 640 0
 1514 0282 104B     		ldr	r3, .L182+24
 1515 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1516 0286 012B     		cmp	r3, #1
 1517 0288 29D0     		beq	.L91
 1518 028a 022B     		cmp	r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 39


 1519 028c 43D0     		beq	.L92
 1520 028e 002B     		cmp	r3, #0
 1521 0290 00D0     		beq	.L93
 641:..\src/interruptions.c ****                 case 0:
 642:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 643:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 644:..\src/interruptions.c ****                         current_emg = 1;
 645:..\src/interruptions.c ****                         break;
 646:..\src/interruptions.c ****                     }
 647:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 648:..\src/interruptions.c ****                         current_emg = 2;
 649:..\src/interruptions.c ****                         break;
 650:..\src/interruptions.c ****                     }
 651:..\src/interruptions.c ****                     break;
 652:..\src/interruptions.c **** 
 653:..\src/interruptions.c ****                 case 1:
 654:..\src/interruptions.c ****                     // EMG 1 is first
 655:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 656:..\src/interruptions.c ****                         current_emg = 0;
 657:..\src/interruptions.c ****                         break;
 658:..\src/interruptions.c ****                     }
 659:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (1024
 660:..\src/interruptions.c ****                     break;
 661:..\src/interruptions.c **** 
 662:..\src/interruptions.c ****                 case 2:
 663:..\src/interruptions.c ****                     // EMG 2 is first
 664:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 665:..\src/interruptions.c ****                         current_emg = 0;
 666:..\src/interruptions.c ****                         break;
 667:..\src/interruptions.c ****                     }
 668:..\src/interruptions.c ****                     g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (1024
 669:..\src/interruptions.c ****                     break;
 670:..\src/interruptions.c **** 
 671:..\src/interruptions.c ****                 default:
 672:..\src/interruptions.c ****                     break;
 1522              		.loc 1 672 0
 1523 0292 5DE0     		b	.L95
 1524              	.L93:
 643:..\src/interruptions.c ****                         current_emg = 1;
 1525              		.loc 1 643 0
 1526 0294 FB68     		ldr	r3, [r7, #12]
 1527 0296 002B     		cmp	r3, #0
 1528 0298 16DD     		ble	.L94
 643:..\src/interruptions.c ****                         current_emg = 1;
 1529              		.loc 1 643 0 is_stmt 0 discriminator 1
 1530 029a FA68     		ldr	r2, [r7, #12]
 1531 029c BB68     		ldr	r3, [r7, #8]
 1532 029e 9A42     		cmp	r2, r3
 1533 02a0 12DD     		ble	.L94
 644:..\src/interruptions.c ****                         break;
 1534              		.loc 1 644 0 is_stmt 1
 1535 02a2 084B     		ldr	r3, .L182+24
 1536 02a4 0122     		movs	r2, #1
 1537 02a6 1A70     		strb	r2, [r3]
 645:..\src/interruptions.c ****                     }
 1538              		.loc 1 645 0
 1539 02a8 52E0     		b	.L95
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 40


 1540              	.L183:
 1541 02aa 00BF     		.align	2
 1542              	.L182:
 1543 02ac 00000000 		.word	c_mem
 1544 02b0 00000000 		.word	g_emg_meas
 1545 02b4 00000000 		.word	g_meas
 1546 02b8 00000000 		.word	g_refOld
 1547 02bc 00000000 		.word	g_ref
 1548 02c0 00000000 		.word	g_mem
 1549 02c4 8C000000 		.word	current_emg.10416
 1550              	.L94:
 647:..\src/interruptions.c ****                         current_emg = 2;
 1551              		.loc 1 647 0
 1552 02c8 BB68     		ldr	r3, [r7, #8]
 1553 02ca 002B     		cmp	r3, #0
 1554 02cc 3FDD     		ble	.L176
 647:..\src/interruptions.c ****                         current_emg = 2;
 1555              		.loc 1 647 0 is_stmt 0 discriminator 1
 1556 02ce BA68     		ldr	r2, [r7, #8]
 1557 02d0 FB68     		ldr	r3, [r7, #12]
 1558 02d2 9A42     		cmp	r2, r3
 1559 02d4 3BDD     		ble	.L176
 648:..\src/interruptions.c ****                         break;
 1560              		.loc 1 648 0 is_stmt 1
 1561 02d6 954B     		ldr	r3, .L184
 1562 02d8 0222     		movs	r2, #2
 1563 02da 1A70     		strb	r2, [r3]
 649:..\src/interruptions.c ****                     }
 1564              		.loc 1 649 0
 1565 02dc 38E0     		b	.L95
 1566              	.L91:
 655:..\src/interruptions.c ****                         current_emg = 0;
 1567              		.loc 1 655 0
 1568 02de FB68     		ldr	r3, [r7, #12]
 1569 02e0 002B     		cmp	r3, #0
 1570 02e2 03DA     		bge	.L97
 656:..\src/interruptions.c ****                         break;
 1571              		.loc 1 656 0
 1572 02e4 914B     		ldr	r3, .L184
 1573 02e6 0022     		movs	r2, #0
 1574 02e8 1A70     		strb	r2, [r3]
 657:..\src/interruptions.c ****                     }
 1575              		.loc 1 657 0
 1576 02ea 31E0     		b	.L95
 1577              	.L97:
 659:..\src/interruptions.c ****                     break;
 1578              		.loc 1 659 0
 1579 02ec 904B     		ldr	r3, .L184+4
 1580 02ee 1A68     		ldr	r2, [r3]
 1581 02f0 904B     		ldr	r3, .L184+8
 1582 02f2 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1583 02f6 1946     		mov	r1, r3
 1584 02f8 FB68     		ldr	r3, [r7, #12]
 1585 02fa 03FB01F3 		mul	r3, r3, r1
 1586 02fe 9900     		lsls	r1, r3, #2
 1587 0300 8D4B     		ldr	r3, .L184+12
 1588 0302 B3F8F031 		ldrh	r3, [r3, #496]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 41


 1589 0306 C3F58063 		rsb	r3, r3, #1024
 1590 030a 91FBF3F3 		sdiv	r3, r1, r3
 1591 030e 1344     		add	r3, r3, r2
 1592 0310 8A4A     		ldr	r2, .L184+16
 1593 0312 1360     		str	r3, [r2]
 660:..\src/interruptions.c **** 
 1594              		.loc 1 660 0
 1595 0314 1CE0     		b	.L95
 1596              	.L92:
 664:..\src/interruptions.c ****                         current_emg = 0;
 1597              		.loc 1 664 0
 1598 0316 BB68     		ldr	r3, [r7, #8]
 1599 0318 002B     		cmp	r3, #0
 1600 031a 03DA     		bge	.L98
 665:..\src/interruptions.c ****                         break;
 1601              		.loc 1 665 0
 1602 031c 834B     		ldr	r3, .L184
 1603 031e 0022     		movs	r2, #0
 1604 0320 1A70     		strb	r2, [r3]
 666:..\src/interruptions.c ****                     }
 1605              		.loc 1 666 0
 1606 0322 15E0     		b	.L95
 1607              	.L98:
 668:..\src/interruptions.c ****                     break;
 1608              		.loc 1 668 0
 1609 0324 824B     		ldr	r3, .L184+4
 1610 0326 1A68     		ldr	r2, [r3]
 1611 0328 824B     		ldr	r3, .L184+8
 1612 032a 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1613 032e 1946     		mov	r1, r3
 1614 0330 BB68     		ldr	r3, [r7, #8]
 1615 0332 03FB01F3 		mul	r3, r3, r1
 1616 0336 9900     		lsls	r1, r3, #2
 1617 0338 7F4B     		ldr	r3, .L184+12
 1618 033a B3F8F231 		ldrh	r3, [r3, #498]
 1619 033e C3F58063 		rsb	r3, r3, #1024
 1620 0342 91FBF3F3 		sdiv	r3, r1, r3
 1621 0346 D31A     		subs	r3, r2, r3
 1622 0348 7C4A     		ldr	r2, .L184+16
 1623 034a 1360     		str	r3, [r2]
 669:..\src/interruptions.c **** 
 1624              		.loc 1 669 0
 1625 034c 00E0     		b	.L95
 1626              	.L176:
 651:..\src/interruptions.c **** 
 1627              		.loc 1 651 0
 1628 034e 00BF     		nop
 1629              	.L95:
 673:..\src/interruptions.c ****             }
 674:..\src/interruptions.c ****             break;
 1630              		.loc 1 674 0 discriminator 1
 1631 0350 6FE0     		b	.L83
 1632              	.L76:
 675:..\src/interruptions.c **** 
 676:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 677:..\src/interruptions.c ****             g_ref[0].pos = g_refOld[0].pos;
 1633              		.loc 1 677 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 42


 1634 0352 774B     		ldr	r3, .L184+4
 1635 0354 1B68     		ldr	r3, [r3]
 1636 0356 794A     		ldr	r2, .L184+16
 1637 0358 1360     		str	r3, [r2]
 678:..\src/interruptions.c ****             switch (current_emg) {
 1638              		.loc 1 678 0
 1639 035a 744B     		ldr	r3, .L184
 1640 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1641 035e 012B     		cmp	r3, #1
 1642 0360 1AD0     		beq	.L100
 1643 0362 022B     		cmp	r3, #2
 1644 0364 3AD0     		beq	.L101
 1645 0366 002B     		cmp	r3, #0
 1646 0368 00D0     		beq	.L102
 679:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 680:..\src/interruptions.c ****                 case 0:
 681:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 682:..\src/interruptions.c ****                         current_emg = 1;
 683:..\src/interruptions.c ****                         break;
 684:..\src/interruptions.c ****                     }
 685:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 686:..\src/interruptions.c ****                         current_emg = 2;
 687:..\src/interruptions.c ****                         break;
 688:..\src/interruptions.c ****                     }
 689:..\src/interruptions.c ****                     break;
 690:..\src/interruptions.c **** 
 691:..\src/interruptions.c ****                 // EMG 1 is first
 692:..\src/interruptions.c ****                 case 1:
 693:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 694:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 695:..\src/interruptions.c ****                         current_emg = 0;
 696:..\src/interruptions.c ****                         break;
 697:..\src/interruptions.c ****                     }
 698:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 699:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 700:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 701:..\src/interruptions.c ****                     
 702:..\src/interruptions.c ****                     break;
 703:..\src/interruptions.c **** 
 704:..\src/interruptions.c ****                 // EMG 2 is first
 705:..\src/interruptions.c ****                 case 2:
 706:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 707:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 708:..\src/interruptions.c ****                         current_emg = 0;
 709:..\src/interruptions.c ****                         break;
 710:..\src/interruptions.c ****                     }
 711:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 712:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 713:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 714:..\src/interruptions.c ****                     }
 715:..\src/interruptions.c ****                     break;
 716:..\src/interruptions.c **** 
 717:..\src/interruptions.c ****                 default:
 718:..\src/interruptions.c ****                     break;
 1647              		.loc 1 718 0
 1648 036a 5EE0     		b	.L104
 1649              	.L102:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 43


 681:..\src/interruptions.c ****                         current_emg = 1;
 1650              		.loc 1 681 0
 1651 036c FB68     		ldr	r3, [r7, #12]
 1652 036e 002B     		cmp	r3, #0
 1653 0370 07DD     		ble	.L103
 681:..\src/interruptions.c ****                         current_emg = 1;
 1654              		.loc 1 681 0 is_stmt 0 discriminator 1
 1655 0372 FA68     		ldr	r2, [r7, #12]
 1656 0374 BB68     		ldr	r3, [r7, #8]
 1657 0376 9A42     		cmp	r2, r3
 1658 0378 03DD     		ble	.L103
 682:..\src/interruptions.c ****                         break;
 1659              		.loc 1 682 0 is_stmt 1
 1660 037a 6C4B     		ldr	r3, .L184
 1661 037c 0122     		movs	r2, #1
 1662 037e 1A70     		strb	r2, [r3]
 683:..\src/interruptions.c ****                     }
 1663              		.loc 1 683 0
 1664 0380 53E0     		b	.L104
 1665              	.L103:
 685:..\src/interruptions.c ****                         current_emg = 2;
 1666              		.loc 1 685 0
 1667 0382 BB68     		ldr	r3, [r7, #8]
 1668 0384 002B     		cmp	r3, #0
 1669 0386 4BDD     		ble	.L177
 685:..\src/interruptions.c ****                         current_emg = 2;
 1670              		.loc 1 685 0 is_stmt 0 discriminator 1
 1671 0388 BA68     		ldr	r2, [r7, #8]
 1672 038a FB68     		ldr	r3, [r7, #12]
 1673 038c 9A42     		cmp	r2, r3
 1674 038e 47DD     		ble	.L177
 686:..\src/interruptions.c ****                         break;
 1675              		.loc 1 686 0 is_stmt 1
 1676 0390 664B     		ldr	r3, .L184
 1677 0392 0222     		movs	r2, #2
 1678 0394 1A70     		strb	r2, [r3]
 687:..\src/interruptions.c ****                     }
 1679              		.loc 1 687 0
 1680 0396 48E0     		b	.L104
 1681              	.L100:
 694:..\src/interruptions.c ****                         current_emg = 0;
 1682              		.loc 1 694 0
 1683 0398 FB68     		ldr	r3, [r7, #12]
 1684 039a 002B     		cmp	r3, #0
 1685 039c 06DA     		bge	.L106
 694:..\src/interruptions.c ****                         current_emg = 0;
 1686              		.loc 1 694 0 is_stmt 0 discriminator 1
 1687 039e BB68     		ldr	r3, [r7, #8]
 1688 03a0 002B     		cmp	r3, #0
 1689 03a2 03DA     		bge	.L106
 695:..\src/interruptions.c ****                         break;
 1690              		.loc 1 695 0 is_stmt 1
 1691 03a4 614B     		ldr	r3, .L184
 1692 03a6 0022     		movs	r2, #0
 1693 03a8 1A70     		strb	r2, [r3]
 696:..\src/interruptions.c ****                     }
 1694              		.loc 1 696 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 44


 1695 03aa 3EE0     		b	.L104
 1696              	.L106:
 699:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
 1697              		.loc 1 699 0
 1698 03ac FB68     		ldr	r3, [r7, #12]
 1699 03ae 002B     		cmp	r3, #0
 1700 03b0 38DD     		ble	.L178
 700:..\src/interruptions.c ****                     
 1701              		.loc 1 700 0
 1702 03b2 5F4B     		ldr	r3, .L184+4
 1703 03b4 1A68     		ldr	r2, [r3]
 1704 03b6 5F4B     		ldr	r3, .L184+8
 1705 03b8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1706 03bc 1946     		mov	r1, r3
 1707 03be FB68     		ldr	r3, [r7, #12]
 1708 03c0 03FB01F3 		mul	r3, r3, r1
 1709 03c4 9900     		lsls	r1, r3, #2
 1710 03c6 5C4B     		ldr	r3, .L184+12
 1711 03c8 B3F8F031 		ldrh	r3, [r3, #496]
 1712 03cc C3F58063 		rsb	r3, r3, #1024
 1713 03d0 91FBF3F3 		sdiv	r3, r1, r3
 1714 03d4 1344     		add	r3, r3, r2
 1715 03d6 594A     		ldr	r2, .L184+16
 1716 03d8 1360     		str	r3, [r2]
 702:..\src/interruptions.c **** 
 1717              		.loc 1 702 0
 1718 03da 23E0     		b	.L178
 1719              	.L101:
 707:..\src/interruptions.c ****                         current_emg = 0;
 1720              		.loc 1 707 0
 1721 03dc FB68     		ldr	r3, [r7, #12]
 1722 03de 002B     		cmp	r3, #0
 1723 03e0 06DA     		bge	.L108
 707:..\src/interruptions.c ****                         current_emg = 0;
 1724              		.loc 1 707 0 is_stmt 0 discriminator 1
 1725 03e2 BB68     		ldr	r3, [r7, #8]
 1726 03e4 002B     		cmp	r3, #0
 1727 03e6 03DA     		bge	.L108
 708:..\src/interruptions.c ****                         break;
 1728              		.loc 1 708 0 is_stmt 1
 1729 03e8 504B     		ldr	r3, .L184
 1730 03ea 0022     		movs	r2, #0
 1731 03ec 1A70     		strb	r2, [r3]
 709:..\src/interruptions.c ****                     }
 1732              		.loc 1 709 0
 1733 03ee 1CE0     		b	.L104
 1734              	.L108:
 712:..\src/interruptions.c ****                         g_ref[0].pos = g_refOld[0].pos - (err_emg_2 * c_mem.emg.emg_speed << 2) / (
 1735              		.loc 1 712 0
 1736 03f0 BB68     		ldr	r3, [r7, #8]
 1737 03f2 002B     		cmp	r3, #0
 1738 03f4 18DD     		ble	.L179
 713:..\src/interruptions.c ****                     }
 1739              		.loc 1 713 0
 1740 03f6 4E4B     		ldr	r3, .L184+4
 1741 03f8 1A68     		ldr	r2, [r3]
 1742 03fa 4F4B     		ldr	r3, .L184+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 45


 1743 03fc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1744 0400 1946     		mov	r1, r3
 1745 0402 BB68     		ldr	r3, [r7, #8]
 1746 0404 03FB01F3 		mul	r3, r3, r1
 1747 0408 9900     		lsls	r1, r3, #2
 1748 040a 4B4B     		ldr	r3, .L184+12
 1749 040c B3F8F231 		ldrh	r3, [r3, #498]
 1750 0410 C3F58063 		rsb	r3, r3, #1024
 1751 0414 91FBF3F3 		sdiv	r3, r1, r3
 1752 0418 D31A     		subs	r3, r2, r3
 1753 041a 484A     		ldr	r2, .L184+16
 1754 041c 1360     		str	r3, [r2]
 715:..\src/interruptions.c **** 
 1755              		.loc 1 715 0
 1756 041e 03E0     		b	.L179
 1757              	.L177:
 689:..\src/interruptions.c **** 
 1758              		.loc 1 689 0
 1759 0420 00BF     		nop
 1760 0422 06E0     		b	.L83
 1761              	.L178:
 702:..\src/interruptions.c **** 
 1762              		.loc 1 702 0
 1763 0424 00BF     		nop
 1764 0426 04E0     		b	.L83
 1765              	.L179:
 715:..\src/interruptions.c **** 
 1766              		.loc 1 715 0
 1767 0428 00BF     		nop
 1768              	.L104:
 719:..\src/interruptions.c ****             }
 720:..\src/interruptions.c ****             break;
 1769              		.loc 1 720 0 discriminator 3
 1770 042a 02E0     		b	.L83
 1771              	.L174:
 721:..\src/interruptions.c **** 
 722:..\src/interruptions.c ****         default:
 723:..\src/interruptions.c ****             break;
 1772              		.loc 1 723 0
 1773 042c 00BF     		nop
 1774 042e 00E0     		b	.L83
 1775              	.L175:
 635:..\src/interruptions.c **** 
 1776              		.loc 1 635 0
 1777 0430 00BF     		nop
 1778              	.L83:
 724:..\src/interruptions.c ****     }
 725:..\src/interruptions.c **** 
 726:..\src/interruptions.c ****     // Position limit saturation
 727:..\src/interruptions.c ****     if (SH_MOT->pos_lim_flag) {
 1779              		.loc 1 727 0
 1780 0432 7B6C     		ldr	r3, [r7, #68]
 1781 0434 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 1782 0438 002B     		cmp	r3, #0
 1783 043a 13D0     		beq	.L110
 728:..\src/interruptions.c ****         if (g_ref[0].pos < SH_MOT->pos_lim_inf) 
 1784              		.loc 1 728 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 46


 1785 043c 3F4B     		ldr	r3, .L184+16
 1786 043e 1A68     		ldr	r2, [r3]
 1787 0440 7B6C     		ldr	r3, [r7, #68]
 1788 0442 5B6B     		ldr	r3, [r3, #52]
 1789 0444 9A42     		cmp	r2, r3
 1790 0446 03DA     		bge	.L111
 729:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_inf;
 1791              		.loc 1 729 0
 1792 0448 7B6C     		ldr	r3, [r7, #68]
 1793 044a 5B6B     		ldr	r3, [r3, #52]
 1794 044c 3B4A     		ldr	r2, .L184+16
 1795 044e 1360     		str	r3, [r2]
 1796              	.L111:
 730:..\src/interruptions.c ****         if (g_ref[0].pos > SH_MOT->pos_lim_sup) 
 1797              		.loc 1 730 0
 1798 0450 3A4B     		ldr	r3, .L184+16
 1799 0452 1A68     		ldr	r2, [r3]
 1800 0454 7B6C     		ldr	r3, [r7, #68]
 1801 0456 9B6B     		ldr	r3, [r3, #56]
 1802 0458 9A42     		cmp	r2, r3
 1803 045a 03DD     		ble	.L110
 731:..\src/interruptions.c ****             g_ref[0].pos = SH_MOT->pos_lim_sup;
 1804              		.loc 1 731 0
 1805 045c 7B6C     		ldr	r3, [r7, #68]
 1806 045e 9B6B     		ldr	r3, [r3, #56]
 1807 0460 364A     		ldr	r2, .L184+16
 1808 0462 1360     		str	r3, [r2]
 1809              	.L110:
 732:..\src/interruptions.c ****     }
 733:..\src/interruptions.c ****     
 734:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 1810              		.loc 1 734 0
 1811 0464 364B     		ldr	r3, .L184+20
 1812 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1813 0468 012B     		cmp	r3, #1
 1814 046a 02D1     		bne	.L112
 735:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 736:..\src/interruptions.c ****         g_ref[0].pos = 0;
 1815              		.loc 1 736 0
 1816 046c 334B     		ldr	r3, .L184+16
 1817 046e 0022     		movs	r2, #0
 1818 0470 1A60     		str	r2, [r3]
 1819              	.L112:
 737:..\src/interruptions.c ****     }
 738:..\src/interruptions.c ****         
 739:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 1820              		.loc 1 739 0
 1821 0472 314B     		ldr	r3, .L184+12
 1822 0474 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1823 0478 012B     		cmp	r3, #1
 1824 047a 2AD1     		bne	.L113
 740:..\src/interruptions.c ****         if (rest_enabled == 1){
 1825              		.loc 1 740 0
 1826 047c 314B     		ldr	r3, .L184+24
 1827 047e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1828 0480 012B     		cmp	r3, #1
 1829 0482 03D1     		bne	.L114
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 47


 741:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 742:..\src/interruptions.c ****             g_ref[0].pos = rest_pos_curr_ref;
 1830              		.loc 1 742 0
 1831 0484 304B     		ldr	r3, .L184+28
 1832 0486 1B68     		ldr	r3, [r3]
 1833 0488 2C4A     		ldr	r2, .L184+16
 1834 048a 1360     		str	r3, [r2]
 1835              	.L114:
 743:..\src/interruptions.c ****         }
 744:..\src/interruptions.c ****         
 745:..\src/interruptions.c ****         if (forced_open == 1) {
 1836              		.loc 1 745 0
 1837 048c 2F4B     		ldr	r3, .L184+32
 1838 048e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1839 0490 012B     		cmp	r3, #1
 1840 0492 1ED1     		bne	.L113
 746:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 747:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1841              		.loc 1 747 0
 1842 0494 BB68     		ldr	r3, [r7, #8]
 1843 0496 002B     		cmp	r3, #0
 1844 0498 13DD     		ble	.L115
 748:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem.
 1845              		.loc 1 748 0
 1846 049a 264B     		ldr	r3, .L184+8
 1847 049c D3F8A022 		ldr	r2, [r3, #672]
 1848 04a0 244B     		ldr	r3, .L184+8
 1849 04a2 D3F8A032 		ldr	r3, [r3, #672]
 1850 04a6 B968     		ldr	r1, [r7, #8]
 1851 04a8 01FB03F1 		mul	r1, r1, r3
 1852 04ac 224B     		ldr	r3, .L184+12
 1853 04ae B3F8F231 		ldrh	r3, [r3, #498]
 1854 04b2 C3F58063 		rsb	r3, r3, #1024
 1855 04b6 91FBF3F3 		sdiv	r3, r1, r3
 1856 04ba D31A     		subs	r3, r2, r3
 1857 04bc 1F4A     		ldr	r2, .L184+16
 1858 04be 1360     		str	r3, [r2]
 1859 04c0 07E0     		b	.L113
 1860              	.L115:
 749:..\src/interruptions.c ****             else {
 750:..\src/interruptions.c ****                 g_ref[0].pos = g_mem.SH.rest_pos;
 1861              		.loc 1 750 0
 1862 04c2 1C4B     		ldr	r3, .L184+8
 1863 04c4 D3F8A032 		ldr	r3, [r3, #672]
 1864 04c8 1C4A     		ldr	r2, .L184+16
 1865 04ca 1360     		str	r3, [r2]
 751:..\src/interruptions.c ****                 forced_open = 0;
 1866              		.loc 1 751 0
 1867 04cc 1F4B     		ldr	r3, .L184+32
 1868 04ce 0022     		movs	r2, #0
 1869 04d0 1A70     		strb	r2, [r3]
 1870              	.L113:
 752:..\src/interruptions.c ****             }
 753:..\src/interruptions.c ****         }
 754:..\src/interruptions.c ****     }
 755:..\src/interruptions.c **** 
 756:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 48


 1871              		.loc 1 756 0
 1872 04d2 7B6C     		ldr	r3, [r7, #68]
 1873 04d4 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 1874 04d8 032B     		cmp	r3, #3
 1875 04da 00F2F781 		bhi	.L116
 1876 04de 01A2     		adr	r2, .L118
 1877 04e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1878              		.p2align 2
 1879              	.L118:
 1880 04e4 BB060000 		.word	.L117+1
 1881 04e8 91080000 		.word	.L119+1
 1882 04ec 65070000 		.word	.L120+1
 1883 04f0 F5040000 		.word	.L121+1
 1884              		.p2align 1
 1885              	.L121:
 757:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 758:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 759:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 1886              		.loc 1 759 0
 1887 04f4 114B     		ldr	r3, .L184+16
 1888 04f6 1A68     		ldr	r2, [r3]
 1889 04f8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 1890 04fc 1449     		ldr	r1, .L184+36
 1891 04fe 3420     		movs	r0, #52
 1892 0500 00FB03F3 		mul	r3, r0, r3
 1893 0504 0B44     		add	r3, r3, r1
 1894 0506 1B68     		ldr	r3, [r3]
 1895 0508 D31A     		subs	r3, r2, r3
 1896 050a 7B60     		str	r3, [r7, #4]
 760:..\src/interruptions.c **** 
 761:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1897              		.loc 1 761 0
 1898 050c 114B     		ldr	r3, .L184+40
 1899 050e 1A68     		ldr	r2, [r3]
 1900 0510 7B68     		ldr	r3, [r7, #4]
 1901 0512 1344     		add	r3, r3, r2
 1902 0514 0F4A     		ldr	r2, .L184+40
 1903 0516 1360     		str	r3, [r2]
 762:..\src/interruptions.c **** 
 763:..\src/interruptions.c ****             // error_sum saturation
 764:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 1904              		.loc 1 764 0
 1905 0518 0E4B     		ldr	r3, .L184+40
 1906 051a 1B68     		ldr	r3, [r3]
 1907 051c 0E4A     		ldr	r2, .L184+44
 1908 051e 9342     		cmp	r3, r2
 1909 0520 1CDD     		ble	.L122
 765:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 1910              		.loc 1 765 0
 1911 0522 0C4B     		ldr	r3, .L184+40
 1912 0524 0C4A     		ldr	r2, .L184+44
 1913 0526 1A60     		str	r2, [r3]
 1914 0528 20E0     		b	.L123
 1915              	.L185:
 1916 052a 00BF     		.align	2
 1917              	.L184:
 1918 052c 8C000000 		.word	current_emg.10416
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 49


 1919 0530 00000000 		.word	g_refOld
 1920 0534 00000000 		.word	g_mem
 1921 0538 00000000 		.word	c_mem
 1922 053c 00000000 		.word	g_ref
 1923 0540 00000000 		.word	battery_low_SoC
 1924 0544 00000000 		.word	rest_enabled
 1925 0548 00000000 		.word	rest_pos_curr_ref
 1926 054c 00000000 		.word	forced_open
 1927 0550 00000000 		.word	g_meas
 1928 0554 90000000 		.word	pos_error_sum.10409
 1929 0558 80F0FA02 		.word	50000000
 1930              	.L122:
 766:..\src/interruptions.c ****             else {
 767:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 1931              		.loc 1 767 0
 1932 055c 8E4B     		ldr	r3, .L186
 1933 055e 1B68     		ldr	r3, [r3]
 1934 0560 8E4A     		ldr	r2, .L186+4
 1935 0562 9342     		cmp	r3, r2
 1936 0564 02DA     		bge	.L123
 768:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 1937              		.loc 1 768 0
 1938 0566 8C4B     		ldr	r3, .L186
 1939 0568 8C4A     		ldr	r2, .L186+4
 1940 056a 1A60     		str	r2, [r3]
 1941              	.L123:
 769:..\src/interruptions.c ****             }
 770:..\src/interruptions.c ****             
 771:..\src/interruptions.c ****             // ------ position PID control ------
 772:..\src/interruptions.c **** 
 773:..\src/interruptions.c ****             i_ref = 0;
 1942              		.loc 1 773 0
 1943 056c 0023     		movs	r3, #0
 1944 056e 3B65     		str	r3, [r7, #80]
 774:..\src/interruptions.c ****             
 775:..\src/interruptions.c ****             // Proportional
 776:..\src/interruptions.c ****             if (k_p_dl != 0)
 1945              		.loc 1 776 0
 1946 0570 7B6A     		ldr	r3, [r7, #36]
 1947 0572 002B     		cmp	r3, #0
 1948 0574 07D0     		beq	.L124
 777:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 1949              		.loc 1 777 0
 1950 0576 7B6A     		ldr	r3, [r7, #36]
 1951 0578 7A68     		ldr	r2, [r7, #4]
 1952 057a 02FB03F3 		mul	r3, r2, r3
 1953 057e 1B14     		asrs	r3, r3, #16
 1954 0580 3A6D     		ldr	r2, [r7, #80]
 1955 0582 1344     		add	r3, r3, r2
 1956 0584 3B65     		str	r3, [r7, #80]
 1957              	.L124:
 778:..\src/interruptions.c **** 
 779:..\src/interruptions.c ****             // Integral
 780:..\src/interruptions.c ****             if (k_i_dl != 0)
 1958              		.loc 1 780 0
 1959 0586 3B6A     		ldr	r3, [r7, #32]
 1960 0588 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 50


 1961 058a 08D0     		beq	.L125
 781:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 1962              		.loc 1 781 0
 1963 058c 824B     		ldr	r3, .L186
 1964 058e 1B68     		ldr	r3, [r3]
 1965 0590 3A6A     		ldr	r2, [r7, #32]
 1966 0592 02FB03F3 		mul	r3, r2, r3
 1967 0596 1B14     		asrs	r3, r3, #16
 1968 0598 3A6D     		ldr	r2, [r7, #80]
 1969 059a 1344     		add	r3, r3, r2
 1970 059c 3B65     		str	r3, [r7, #80]
 1971              	.L125:
 782:..\src/interruptions.c **** 
 783:..\src/interruptions.c ****             // Derivative
 784:..\src/interruptions.c ****             if (k_d_dl != 0)
 1972              		.loc 1 784 0
 1973 059e FB69     		ldr	r3, [r7, #28]
 1974 05a0 002B     		cmp	r3, #0
 1975 05a2 0AD0     		beq	.L126
 785:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 1976              		.loc 1 785 0
 1977 05a4 7E4B     		ldr	r3, .L186+8
 1978 05a6 1B68     		ldr	r3, [r3]
 1979 05a8 7A68     		ldr	r2, [r7, #4]
 1980 05aa D31A     		subs	r3, r2, r3
 1981 05ac FA69     		ldr	r2, [r7, #28]
 1982 05ae 02FB03F3 		mul	r3, r2, r3
 1983 05b2 1B14     		asrs	r3, r3, #16
 1984 05b4 3A6D     		ldr	r2, [r7, #80]
 1985 05b6 1344     		add	r3, r3, r2
 1986 05b8 3B65     		str	r3, [r7, #80]
 1987              	.L126:
 786:..\src/interruptions.c ****                         
 787:..\src/interruptions.c ****             // Update previous position
 788:..\src/interruptions.c ****             prev_pos_err = pos_error;
 1988              		.loc 1 788 0
 1989 05ba 794A     		ldr	r2, .L186+8
 1990 05bc 7B68     		ldr	r3, [r7, #4]
 1991 05be 1360     		str	r3, [r2]
 789:..\src/interruptions.c **** 
 790:..\src/interruptions.c ****             // motor direction depends on i_ref
 791:..\src/interruptions.c ****             if (i_ref >= 0)
 1992              		.loc 1 791 0
 1993 05c0 3B6D     		ldr	r3, [r7, #80]
 1994 05c2 002B     		cmp	r3, #0
 1995 05c4 03DB     		blt	.L127
 792:..\src/interruptions.c ****                 motor_dir = TRUE;
 1996              		.loc 1 792 0
 1997 05c6 774B     		ldr	r3, .L186+12
 1998 05c8 0122     		movs	r2, #1
 1999 05ca 1A70     		strb	r2, [r3]
 2000 05cc 02E0     		b	.L128
 2001              	.L127:
 793:..\src/interruptions.c ****             else
 794:..\src/interruptions.c ****                 motor_dir = FALSE;
 2002              		.loc 1 794 0
 2003 05ce 754B     		ldr	r3, .L186+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 51


 2004 05d0 0022     		movs	r2, #0
 2005 05d2 1A70     		strb	r2, [r3]
 2006              	.L128:
 795:..\src/interruptions.c **** 
 796:..\src/interruptions.c ****             // saturate max current
 797:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2007              		.loc 1 797 0
 2008 05d4 7B6C     		ldr	r3, [r7, #68]
 2009 05d6 B3F95C30 		ldrsh	r3, [r3, #92]
 2010 05da 1A46     		mov	r2, r3
 2011 05dc 3B6D     		ldr	r3, [r7, #80]
 2012 05de 9A42     		cmp	r2, r3
 2013 05e0 04DA     		bge	.L129
 798:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2014              		.loc 1 798 0
 2015 05e2 7B6C     		ldr	r3, [r7, #68]
 2016 05e4 B3F95C30 		ldrsh	r3, [r3, #92]
 2017 05e8 3B65     		str	r3, [r7, #80]
 2018 05ea 0BE0     		b	.L130
 2019              	.L129:
 799:..\src/interruptions.c ****             else {
 800:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2020              		.loc 1 800 0
 2021 05ec 7B6C     		ldr	r3, [r7, #68]
 2022 05ee B3F95C30 		ldrsh	r3, [r3, #92]
 2023 05f2 5A42     		negs	r2, r3
 2024 05f4 3B6D     		ldr	r3, [r7, #80]
 2025 05f6 9A42     		cmp	r2, r3
 2026 05f8 04DD     		ble	.L130
 801:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2027              		.loc 1 801 0
 2028 05fa 7B6C     		ldr	r3, [r7, #68]
 2029 05fc B3F95C30 		ldrsh	r3, [r3, #92]
 2030 0600 5B42     		negs	r3, r3
 2031 0602 3B65     		str	r3, [r7, #80]
 2032              	.L130:
 802:..\src/interruptions.c ****         	}
 803:..\src/interruptions.c **** 
 804:..\src/interruptions.c ****             // current error and curr error sum
 805:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2033              		.loc 1 805 0
 2034 0604 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2035 0608 674A     		ldr	r2, .L186+16
 2036 060a 3421     		movs	r1, #52
 2037 060c 01FB03F3 		mul	r3, r1, r3
 2038 0610 1344     		add	r3, r3, r2
 2039 0612 0C33     		adds	r3, r3, #12
 2040 0614 1B68     		ldr	r3, [r3]
 2041 0616 3A6D     		ldr	r2, [r7, #80]
 2042 0618 D31A     		subs	r3, r2, r3
 2043 061a 3B60     		str	r3, [r7]
 806:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2044              		.loc 1 806 0
 2045 061c 634B     		ldr	r3, .L186+20
 2046 061e 1A68     		ldr	r2, [r3]
 2047 0620 3B68     		ldr	r3, [r7]
 2048 0622 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 52


 2049 0624 614A     		ldr	r2, .L186+20
 2050 0626 1360     		str	r3, [r2]
 807:..\src/interruptions.c ****             
 808:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2051              		.loc 1 808 0
 2052 0628 604B     		ldr	r3, .L186+20
 2053 062a 1B68     		ldr	r3, [r3]
 2054 062c 604A     		ldr	r2, .L186+24
 2055 062e 9342     		cmp	r3, r2
 2056 0630 03DD     		ble	.L131
 809:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2057              		.loc 1 809 0
 2058 0632 5E4B     		ldr	r3, .L186+20
 2059 0634 5E4A     		ldr	r2, .L186+24
 2060 0636 1A60     		str	r2, [r3]
 2061 0638 07E0     		b	.L132
 2062              	.L131:
 810:..\src/interruptions.c ****             else {
 811:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2063              		.loc 1 811 0
 2064 063a 5C4B     		ldr	r3, .L186+20
 2065 063c 1B68     		ldr	r3, [r3]
 2066 063e 5D4A     		ldr	r2, .L186+28
 2067 0640 9342     		cmp	r3, r2
 2068 0642 02DA     		bge	.L132
 812:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2069              		.loc 1 812 0
 2070 0644 594B     		ldr	r3, .L186+20
 2071 0646 5B4A     		ldr	r2, .L186+28
 2072 0648 1A60     		str	r2, [r3]
 2073              	.L132:
 813:..\src/interruptions.c ****             }
 814:..\src/interruptions.c **** 
 815:..\src/interruptions.c ****             // ----- current PID control -----
 816:..\src/interruptions.c **** 
 817:..\src/interruptions.c ****             pwm_input = 0;
 2074              		.loc 1 817 0
 2075 064a 0023     		movs	r3, #0
 2076 064c 7B65     		str	r3, [r7, #84]
 818:..\src/interruptions.c **** 
 819:..\src/interruptions.c ****             // Proportional
 820:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2077              		.loc 1 820 0
 2078 064e BB69     		ldr	r3, [r7, #24]
 2079 0650 002B     		cmp	r3, #0
 2080 0652 07D0     		beq	.L133
 821:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2081              		.loc 1 821 0
 2082 0654 BB69     		ldr	r3, [r7, #24]
 2083 0656 3A68     		ldr	r2, [r7]
 2084 0658 02FB03F3 		mul	r3, r2, r3
 2085 065c 1B14     		asrs	r3, r3, #16
 2086 065e 7A6D     		ldr	r2, [r7, #84]
 2087 0660 1344     		add	r3, r3, r2
 2088 0662 7B65     		str	r3, [r7, #84]
 2089              	.L133:
 822:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 53


 823:..\src/interruptions.c ****             // Integral
 824:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2090              		.loc 1 824 0
 2091 0664 7B69     		ldr	r3, [r7, #20]
 2092 0666 002B     		cmp	r3, #0
 2093 0668 08D0     		beq	.L134
 825:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2094              		.loc 1 825 0
 2095 066a 504B     		ldr	r3, .L186+20
 2096 066c 1B68     		ldr	r3, [r3]
 2097 066e 7A69     		ldr	r2, [r7, #20]
 2098 0670 02FB03F3 		mul	r3, r2, r3
 2099 0674 1B14     		asrs	r3, r3, #16
 2100 0676 7A6D     		ldr	r2, [r7, #84]
 2101 0678 1344     		add	r3, r3, r2
 2102 067a 7B65     		str	r3, [r7, #84]
 2103              	.L134:
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****             // Derivative
 828:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2104              		.loc 1 828 0
 2105 067c 3B69     		ldr	r3, [r7, #16]
 2106 067e 002B     		cmp	r3, #0
 2107 0680 0AD0     		beq	.L135
 829:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2108              		.loc 1 829 0
 2109 0682 4D4B     		ldr	r3, .L186+32
 2110 0684 1B68     		ldr	r3, [r3]
 2111 0686 3A68     		ldr	r2, [r7]
 2112 0688 D31A     		subs	r3, r2, r3
 2113 068a 3A69     		ldr	r2, [r7, #16]
 2114 068c 02FB03F3 		mul	r3, r2, r3
 2115 0690 1B14     		asrs	r3, r3, #16
 2116 0692 7A6D     		ldr	r2, [r7, #84]
 2117 0694 1344     		add	r3, r3, r2
 2118 0696 7B65     		str	r3, [r7, #84]
 2119              	.L135:
 830:..\src/interruptions.c **** 
 831:..\src/interruptions.c ****             // pwm_input saturation
 832:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2120              		.loc 1 832 0
 2121 0698 7B6D     		ldr	r3, [r7, #84]
 2122 069a 13F1640F 		cmn	r3, #100
 2123 069e 03DA     		bge	.L136
 833:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2124              		.loc 1 833 0
 2125 06a0 6FF06303 		mvn	r3, #99
 2126 06a4 7B65     		str	r3, [r7, #84]
 2127 06a6 04E0     		b	.L137
 2128              	.L136:
 834:..\src/interruptions.c ****             else {
 835:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2129              		.loc 1 835 0
 2130 06a8 7B6D     		ldr	r3, [r7, #84]
 2131 06aa 642B     		cmp	r3, #100
 2132 06ac 01DD     		ble	.L137
 836:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 54


 2133              		.loc 1 836 0
 2134 06ae 6423     		movs	r3, #100
 2135 06b0 7B65     		str	r3, [r7, #84]
 2136              	.L137:
 837:..\src/interruptions.c ****             }
 838:..\src/interruptions.c **** 
 839:..\src/interruptions.c ****             // Update previous current
 840:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2137              		.loc 1 840 0
 2138 06b2 414A     		ldr	r2, .L186+32
 2139 06b4 3B68     		ldr	r3, [r7]
 2140 06b6 1360     		str	r3, [r2]
 841:..\src/interruptions.c **** 
 842:..\src/interruptions.c ****         break;
 2141              		.loc 1 842 0
 2142 06b8 08E1     		b	.L116
 2143              	.L117:
 843:..\src/interruptions.c **** 
 844:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 845:..\src/interruptions.c ****         case CONTROL_ANGLE:
 846:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[SH_ENC_L].pos[0];
 2144              		.loc 1 846 0
 2145 06ba 404B     		ldr	r3, .L186+36
 2146 06bc 1A68     		ldr	r2, [r3]
 2147 06be 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2148 06c2 3949     		ldr	r1, .L186+16
 2149 06c4 3420     		movs	r0, #52
 2150 06c6 00FB03F3 		mul	r3, r0, r3
 2151 06ca 0B44     		add	r3, r3, r1
 2152 06cc 1B68     		ldr	r3, [r3]
 2153 06ce D31A     		subs	r3, r2, r3
 2154 06d0 7B60     		str	r3, [r7, #4]
 847:..\src/interruptions.c **** 
 848:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2155              		.loc 1 848 0
 2156 06d2 314B     		ldr	r3, .L186
 2157 06d4 1A68     		ldr	r2, [r3]
 2158 06d6 7B68     		ldr	r3, [r7, #4]
 2159 06d8 1344     		add	r3, r3, r2
 2160 06da 2F4A     		ldr	r2, .L186
 2161 06dc 1360     		str	r3, [r2]
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c ****             // anti-windup (for integral control)
 851:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2162              		.loc 1 851 0
 2163 06de 2E4B     		ldr	r3, .L186
 2164 06e0 1B68     		ldr	r3, [r3]
 2165 06e2 B3F57A7F 		cmp	r3, #1000
 2166 06e6 04DD     		ble	.L138
 852:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2167              		.loc 1 852 0
 2168 06e8 2B4B     		ldr	r3, .L186
 2169 06ea 4FF47A72 		mov	r2, #1000
 2170 06ee 1A60     		str	r2, [r3]
 2171 06f0 07E0     		b	.L139
 2172              	.L138:
 853:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 55


 854:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 2173              		.loc 1 854 0
 2174 06f2 294B     		ldr	r3, .L186
 2175 06f4 1B68     		ldr	r3, [r3]
 2176 06f6 13F57A7F 		cmn	r3, #1000
 2177 06fa 02DA     		bge	.L139
 855:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 2178              		.loc 1 855 0
 2179 06fc 264B     		ldr	r3, .L186
 2180 06fe 304A     		ldr	r2, .L186+40
 2181 0700 1A60     		str	r2, [r3]
 2182              	.L139:
 856:..\src/interruptions.c ****             }
 857:..\src/interruptions.c **** 
 858:..\src/interruptions.c ****             // Proportional
 859:..\src/interruptions.c ****             if (k_p != 0) 
 2183              		.loc 1 859 0
 2184 0702 FB6B     		ldr	r3, [r7, #60]
 2185 0704 002B     		cmp	r3, #0
 2186 0706 05D0     		beq	.L140
 860:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 2187              		.loc 1 860 0
 2188 0708 FB6B     		ldr	r3, [r7, #60]
 2189 070a 7A68     		ldr	r2, [r7, #4]
 2190 070c 02FB03F3 		mul	r3, r2, r3
 2191 0710 1B14     		asrs	r3, r3, #16
 2192 0712 7B65     		str	r3, [r7, #84]
 2193              	.L140:
 861:..\src/interruptions.c ****             
 862:..\src/interruptions.c **** 
 863:..\src/interruptions.c ****             // Integral
 864:..\src/interruptions.c ****             if (k_i != 0) 
 2194              		.loc 1 864 0
 2195 0714 BB6B     		ldr	r3, [r7, #56]
 2196 0716 002B     		cmp	r3, #0
 2197 0718 08D0     		beq	.L141
 865:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 2198              		.loc 1 865 0
 2199 071a 1F4B     		ldr	r3, .L186
 2200 071c 1B68     		ldr	r3, [r3]
 2201 071e BA6B     		ldr	r2, [r7, #56]
 2202 0720 02FB03F3 		mul	r3, r2, r3
 2203 0724 1B14     		asrs	r3, r3, #16
 2204 0726 7A6D     		ldr	r2, [r7, #84]
 2205 0728 1344     		add	r3, r3, r2
 2206 072a 7B65     		str	r3, [r7, #84]
 2207              	.L141:
 866:..\src/interruptions.c ****             
 867:..\src/interruptions.c **** 
 868:..\src/interruptions.c ****             // Derivative
 869:..\src/interruptions.c ****             if (k_d != 0) 
 2208              		.loc 1 869 0
 2209 072c 7B6B     		ldr	r3, [r7, #52]
 2210 072e 002B     		cmp	r3, #0
 2211 0730 0AD0     		beq	.L142
 870:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2212              		.loc 1 870 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 56


 2213 0732 1B4B     		ldr	r3, .L186+8
 2214 0734 1B68     		ldr	r3, [r3]
 2215 0736 7A68     		ldr	r2, [r7, #4]
 2216 0738 D31A     		subs	r3, r2, r3
 2217 073a 7A6B     		ldr	r2, [r7, #52]
 2218 073c 02FB03F3 		mul	r3, r2, r3
 2219 0740 1B14     		asrs	r3, r3, #16
 2220 0742 7A6D     		ldr	r2, [r7, #84]
 2221 0744 1344     		add	r3, r3, r2
 2222 0746 7B65     		str	r3, [r7, #84]
 2223              	.L142:
 871:..\src/interruptions.c ****             
 872:..\src/interruptions.c **** 
 873:..\src/interruptions.c ****             // Update measure
 874:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2224              		.loc 1 874 0
 2225 0748 154A     		ldr	r2, .L186+8
 2226 074a 7B68     		ldr	r3, [r7, #4]
 2227 074c 1360     		str	r3, [r2]
 875:..\src/interruptions.c **** 
 876:..\src/interruptions.c ****             if (pwm_input > 0)
 2228              		.loc 1 876 0
 2229 074e 7B6D     		ldr	r3, [r7, #84]
 2230 0750 002B     		cmp	r3, #0
 2231 0752 03DD     		ble	.L143
 877:..\src/interruptions.c ****                 motor_dir = TRUE;
 2232              		.loc 1 877 0
 2233 0754 134B     		ldr	r3, .L186+12
 2234 0756 0122     		movs	r2, #1
 2235 0758 1A70     		strb	r2, [r3]
 878:..\src/interruptions.c ****             else
 879:..\src/interruptions.c ****                 motor_dir = FALSE;
 880:..\src/interruptions.c **** 
 881:..\src/interruptions.c ****         break;
 2236              		.loc 1 881 0
 2237 075a B7E0     		b	.L116
 2238              	.L143:
 879:..\src/interruptions.c **** 
 2239              		.loc 1 879 0
 2240 075c 114B     		ldr	r3, .L186+12
 2241 075e 0022     		movs	r2, #0
 2242 0760 1A70     		strb	r2, [r3]
 2243              		.loc 1 881 0
 2244 0762 B3E0     		b	.L116
 2245              	.L120:
 882:..\src/interruptions.c **** 
 883:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 884:..\src/interruptions.c ****         case CONTROL_CURRENT:
 885:..\src/interruptions.c ****             if(g_ref[0].onoff && tension_valid) {
 2246              		.loc 1 885 0
 2247 0764 154B     		ldr	r3, .L186+36
 2248 0766 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2249 0768 002B     		cmp	r3, #0
 2250 076a 00F0AC80 		beq	.L180
 2251              		.loc 1 885 0 is_stmt 0 discriminator 1
 2252 076e 154B     		ldr	r3, .L186+44
 2253 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 57


 2254 0772 002B     		cmp	r3, #0
 2255 0774 00F0A780 		beq	.L180
 886:..\src/interruptions.c ****                 
 887:..\src/interruptions.c ****                 i_ref = g_ref[0].curr;
 2256              		.loc 1 887 0 is_stmt 1
 2257 0778 104B     		ldr	r3, .L186+36
 2258 077a 5B68     		ldr	r3, [r3, #4]
 2259 077c 3B65     		str	r3, [r7, #80]
 888:..\src/interruptions.c **** 
 889:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 2260              		.loc 1 889 0
 2261 077e 7B6C     		ldr	r3, [r7, #68]
 2262 0780 B3F95C30 		ldrsh	r3, [r3, #92]
 2263 0784 1A46     		mov	r2, r3
 2264 0786 3B6D     		ldr	r3, [r7, #80]
 2265 0788 9A42     		cmp	r2, r3
 2266 078a 1DDA     		bge	.L146
 890:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 2267              		.loc 1 890 0
 2268 078c 7B6C     		ldr	r3, [r7, #68]
 2269 078e B3F95C30 		ldrsh	r3, [r3, #92]
 2270 0792 3B65     		str	r3, [r7, #80]
 2271 0794 24E0     		b	.L147
 2272              	.L187:
 2273 0796 00BF     		.align	2
 2274              	.L186:
 2275 0798 90000000 		.word	pos_error_sum.10409
 2276 079c 800F05FD 		.word	-50000000
 2277 07a0 94000000 		.word	prev_pos_err.10411
 2278 07a4 98000000 		.word	motor_dir.10414
 2279 07a8 00000000 		.word	g_meas
 2280 07ac 9C000000 		.word	curr_error_sum.10410
 2281 07b0 A0860100 		.word	100000
 2282 07b4 6079FEFF 		.word	-100000
 2283 07b8 A0000000 		.word	prev_curr_err.10412
 2284 07bc 00000000 		.word	g_ref
 2285 07c0 18FCFFFF 		.word	-1000
 2286 07c4 00000000 		.word	tension_valid
 2287              	.L146:
 891:..\src/interruptions.c ****                 else {
 892:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 2288              		.loc 1 892 0
 2289 07c8 7B6C     		ldr	r3, [r7, #68]
 2290 07ca B3F95C30 		ldrsh	r3, [r3, #92]
 2291 07ce 5A42     		negs	r2, r3
 2292 07d0 3B6D     		ldr	r3, [r7, #80]
 2293 07d2 9A42     		cmp	r2, r3
 2294 07d4 04DD     		ble	.L147
 893:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 2295              		.loc 1 893 0
 2296 07d6 7B6C     		ldr	r3, [r7, #68]
 2297 07d8 B3F95C30 		ldrsh	r3, [r3, #92]
 2298 07dc 5B42     		negs	r3, r3
 2299 07de 3B65     		str	r3, [r7, #80]
 2300              	.L147:
 894:..\src/interruptions.c ****                 }
 895:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 58


 896:..\src/interruptions.c ****                 // current error
 897:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 2301              		.loc 1 897 0
 2302 07e0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2303 07e4 A74A     		ldr	r2, .L188
 2304 07e6 3421     		movs	r1, #52
 2305 07e8 01FB03F3 		mul	r3, r1, r3
 2306 07ec 1344     		add	r3, r3, r2
 2307 07ee 0C33     		adds	r3, r3, #12
 2308 07f0 1B68     		ldr	r3, [r3]
 2309 07f2 3A6D     		ldr	r2, [r7, #80]
 2310 07f4 D31A     		subs	r3, r2, r3
 2311 07f6 3B60     		str	r3, [r7]
 898:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2312              		.loc 1 898 0
 2313 07f8 A34B     		ldr	r3, .L188+4
 2314 07fa 1A68     		ldr	r2, [r3]
 2315 07fc 3B68     		ldr	r3, [r7]
 2316 07fe 1344     		add	r3, r3, r2
 2317 0800 A14A     		ldr	r2, .L188+4
 2318 0802 1360     		str	r3, [r2]
 899:..\src/interruptions.c ****                 
 900:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2319              		.loc 1 900 0
 2320 0804 A04B     		ldr	r3, .L188+4
 2321 0806 1B68     		ldr	r3, [r3]
 2322 0808 A04A     		ldr	r2, .L188+8
 2323 080a 9342     		cmp	r3, r2
 2324 080c 03DD     		ble	.L148
 901:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2325              		.loc 1 901 0
 2326 080e 9E4B     		ldr	r3, .L188+4
 2327 0810 9E4A     		ldr	r2, .L188+8
 2328 0812 1A60     		str	r2, [r3]
 2329 0814 07E0     		b	.L149
 2330              	.L148:
 902:..\src/interruptions.c ****                 else {
 903:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2331              		.loc 1 903 0
 2332 0816 9C4B     		ldr	r3, .L188+4
 2333 0818 1B68     		ldr	r3, [r3]
 2334 081a 9D4A     		ldr	r2, .L188+12
 2335 081c 9342     		cmp	r3, r2
 2336 081e 02DA     		bge	.L149
 904:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2337              		.loc 1 904 0
 2338 0820 994B     		ldr	r3, .L188+4
 2339 0822 9B4A     		ldr	r2, .L188+12
 2340 0824 1A60     		str	r2, [r3]
 2341              	.L149:
 905:..\src/interruptions.c ****                 }
 906:..\src/interruptions.c **** 
 907:..\src/interruptions.c ****                 pwm_input = 0;
 2342              		.loc 1 907 0
 2343 0826 0023     		movs	r3, #0
 2344 0828 7B65     		str	r3, [r7, #84]
 908:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 59


 909:..\src/interruptions.c ****                 // Proportional
 910:..\src/interruptions.c ****                 if (k_p_c != 0)
 2345              		.loc 1 910 0
 2346 082a 3B6B     		ldr	r3, [r7, #48]
 2347 082c 002B     		cmp	r3, #0
 2348 082e 07D0     		beq	.L150
 911:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2349              		.loc 1 911 0
 2350 0830 3B6B     		ldr	r3, [r7, #48]
 2351 0832 3A68     		ldr	r2, [r7]
 2352 0834 02FB03F3 		mul	r3, r2, r3
 2353 0838 1B14     		asrs	r3, r3, #16
 2354 083a 7A6D     		ldr	r2, [r7, #84]
 2355 083c 1344     		add	r3, r3, r2
 2356 083e 7B65     		str	r3, [r7, #84]
 2357              	.L150:
 912:..\src/interruptions.c **** 
 913:..\src/interruptions.c ****                 // Integral
 914:..\src/interruptions.c ****                 if (k_i_c != 0)
 2358              		.loc 1 914 0
 2359 0840 FB6A     		ldr	r3, [r7, #44]
 2360 0842 002B     		cmp	r3, #0
 2361 0844 08D0     		beq	.L151
 915:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2362              		.loc 1 915 0
 2363 0846 904B     		ldr	r3, .L188+4
 2364 0848 1B68     		ldr	r3, [r3]
 2365 084a FA6A     		ldr	r2, [r7, #44]
 2366 084c 02FB03F3 		mul	r3, r2, r3
 2367 0850 1B14     		asrs	r3, r3, #16
 2368 0852 7A6D     		ldr	r2, [r7, #84]
 2369 0854 1344     		add	r3, r3, r2
 2370 0856 7B65     		str	r3, [r7, #84]
 2371              	.L151:
 916:..\src/interruptions.c **** 
 917:..\src/interruptions.c ****                 // Derivative
 918:..\src/interruptions.c ****                 if (k_d_c != 0)
 2372              		.loc 1 918 0
 2373 0858 BB6A     		ldr	r3, [r7, #40]
 2374 085a 002B     		cmp	r3, #0
 2375 085c 0AD0     		beq	.L152
 919:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2376              		.loc 1 919 0
 2377 085e 8D4B     		ldr	r3, .L188+16
 2378 0860 1B68     		ldr	r3, [r3]
 2379 0862 3A68     		ldr	r2, [r7]
 2380 0864 D31A     		subs	r3, r2, r3
 2381 0866 BA6A     		ldr	r2, [r7, #40]
 2382 0868 02FB03F3 		mul	r3, r2, r3
 2383 086c 1B14     		asrs	r3, r3, #16
 2384 086e 7A6D     		ldr	r2, [r7, #84]
 2385 0870 1344     		add	r3, r3, r2
 2386 0872 7B65     		str	r3, [r7, #84]
 2387              	.L152:
 920:..\src/interruptions.c ****                 
 921:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2388              		.loc 1 921 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 60


 2389 0874 874A     		ldr	r2, .L188+16
 2390 0876 3B68     		ldr	r3, [r7]
 2391 0878 1360     		str	r3, [r2]
 922:..\src/interruptions.c ****                 
 923:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2392              		.loc 1 923 0
 2393 087a 7B6D     		ldr	r3, [r7, #84]
 2394 087c 002B     		cmp	r3, #0
 2395 087e 03DB     		blt	.L153
 924:..\src/interruptions.c ****                     motor_dir = TRUE;
 2396              		.loc 1 924 0
 2397 0880 854B     		ldr	r3, .L188+20
 2398 0882 0122     		movs	r2, #1
 2399 0884 1A70     		strb	r2, [r3]
 925:..\src/interruptions.c ****                 else
 926:..\src/interruptions.c ****                     motor_dir = FALSE;
 927:..\src/interruptions.c ****             }
 928:..\src/interruptions.c ****         break;
 2400              		.loc 1 928 0
 2401 0886 1EE0     		b	.L180
 2402              	.L153:
 926:..\src/interruptions.c ****             }
 2403              		.loc 1 926 0
 2404 0888 834B     		ldr	r3, .L188+20
 2405 088a 0022     		movs	r2, #0
 2406 088c 1A70     		strb	r2, [r3]
 2407              		.loc 1 928 0
 2408 088e 1AE0     		b	.L180
 2409              	.L119:
 929:..\src/interruptions.c ****         
 930:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
 931:..\src/interruptions.c ****         case CONTROL_PWM:
 932:..\src/interruptions.c **** 
 933:..\src/interruptions.c ****             pwm_input = g_ref[0].pwm;
 2410              		.loc 1 933 0
 2411 0890 824B     		ldr	r3, .L188+24
 2412 0892 9B68     		ldr	r3, [r3, #8]
 2413 0894 7B65     		str	r3, [r7, #84]
 934:..\src/interruptions.c **** 
 935:..\src/interruptions.c ****             if (pwm_input > 0) 
 2414              		.loc 1 935 0
 2415 0896 7B6D     		ldr	r3, [r7, #84]
 2416 0898 002B     		cmp	r3, #0
 2417 089a 03DD     		ble	.L154
 936:..\src/interruptions.c ****                 motor_dir = TRUE;
 2418              		.loc 1 936 0
 2419 089c 7E4B     		ldr	r3, .L188+20
 2420 089e 0122     		movs	r2, #1
 2421 08a0 1A70     		strb	r2, [r3]
 2422 08a2 02E0     		b	.L155
 2423              	.L154:
 937:..\src/interruptions.c ****             else 
 938:..\src/interruptions.c ****                 motor_dir = FALSE;
 2424              		.loc 1 938 0
 2425 08a4 7C4B     		ldr	r3, .L188+20
 2426 08a6 0022     		movs	r2, #0
 2427 08a8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 61


 2428              	.L155:
 939:..\src/interruptions.c ****             
 940:..\src/interruptions.c **** 
 941:..\src/interruptions.c ****             // pwm_input saturation
 942:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2429              		.loc 1 942 0
 2430 08aa 7B6D     		ldr	r3, [r7, #84]
 2431 08ac 13F1640F 		cmn	r3, #100
 2432 08b0 03DA     		bge	.L156
 943:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2433              		.loc 1 943 0
 2434 08b2 6FF06303 		mvn	r3, #99
 2435 08b6 7B65     		str	r3, [r7, #84]
 944:..\src/interruptions.c ****             else {
 945:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
 946:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 947:..\src/interruptions.c ****         	}
 948:..\src/interruptions.c **** 
 949:..\src/interruptions.c ****         break;
 2436              		.loc 1 949 0
 2437 08b8 07E0     		b	.L181
 2438              	.L156:
 945:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2439              		.loc 1 945 0
 2440 08ba 7B6D     		ldr	r3, [r7, #84]
 2441 08bc 642B     		cmp	r3, #100
 2442 08be 04DD     		ble	.L181
 946:..\src/interruptions.c ****         	}
 2443              		.loc 1 946 0
 2444 08c0 6423     		movs	r3, #100
 2445 08c2 7B65     		str	r3, [r7, #84]
 2446              		.loc 1 949 0
 2447 08c4 01E0     		b	.L181
 2448              	.L180:
 928:..\src/interruptions.c ****         
 2449              		.loc 1 928 0
 2450 08c6 00BF     		nop
 2451 08c8 00E0     		b	.L116
 2452              	.L181:
 2453              		.loc 1 949 0
 2454 08ca 00BF     		nop
 2455              	.L116:
 950:..\src/interruptions.c ****             
 951:..\src/interruptions.c ****     }
 952:..\src/interruptions.c **** 
 953:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
 954:..\src/interruptions.c **** 
 955:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2456              		.loc 1 955 0
 2457 08cc 7B6D     		ldr	r3, [r7, #84]
 2458 08ce 642B     		cmp	r3, #100
 2459 08d0 01DD     		ble	.L158
 956:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2460              		.loc 1 956 0
 2461 08d2 6423     		movs	r3, #100
 2462 08d4 7B65     		str	r3, [r7, #84]
 2463              	.L158:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 62


 957:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2464              		.loc 1 957 0
 2465 08d6 7B6D     		ldr	r3, [r7, #84]
 2466 08d8 13F1640F 		cmn	r3, #100
 2467 08dc 02DA     		bge	.L159
 958:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2468              		.loc 1 958 0
 2469 08de 6FF06303 		mvn	r3, #99
 2470 08e2 7B65     		str	r3, [r7, #84]
 2471              	.L159:
 959:..\src/interruptions.c **** 
 960:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 2472              		.loc 1 960 0
 2473 08e4 7B6C     		ldr	r3, [r7, #68]
 2474 08e6 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2475 08ea 012B     		cmp	r3, #1
 2476 08ec 0DD0     		beq	.L160
 961:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 2477              		.loc 1 961 0
 2478 08ee 7B6D     		ldr	r3, [r7, #84]
 2479 08f0 9B02     		lsls	r3, r3, #10
 2480 08f2 6B4A     		ldr	r2, .L188+28
 2481 08f4 82FB0312 		smull	r1, r2, r2, r3
 2482 08f8 5211     		asrs	r2, r2, #5
 2483 08fa DB17     		asrs	r3, r3, #31
 2484 08fc D31A     		subs	r3, r2, r3
 2485 08fe 694A     		ldr	r2, .L188+32
 2486 0900 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2487 0902 02FB03F3 		mul	r3, r2, r3
 2488 0906 9B12     		asrs	r3, r3, #10
 2489 0908 7B65     		str	r3, [r7, #84]
 2490              	.L160:
 962:..\src/interruptions.c ****  
 963:..\src/interruptions.c ****     //// RATE LIMITER ////
 964:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 2491              		.loc 1 964 0
 2492 090a 674B     		ldr	r3, .L188+36
 2493 090c 1B68     		ldr	r3, [r3]
 2494 090e 7A6D     		ldr	r2, [r7, #84]
 2495 0910 D31A     		subs	r3, r2, r3
 2496 0912 7A6C     		ldr	r2, [r7, #68]
 2497 0914 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2498 0918 9342     		cmp	r3, r2
 2499 091a 08DD     		ble	.L161
 965:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 2500              		.loc 1 965 0
 2501 091c 7B6C     		ldr	r3, [r7, #68]
 2502 091e 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2503 0922 1A46     		mov	r2, r3
 2504 0924 604B     		ldr	r3, .L188+36
 2505 0926 1B68     		ldr	r3, [r3]
 2506 0928 1344     		add	r3, r3, r2
 2507 092a 7B65     		str	r3, [r7, #84]
 2508 092c 10E0     		b	.L162
 2509              	.L161:
 966:..\src/interruptions.c ****     }
 967:..\src/interruptions.c ****     else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 63


 968:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 2510              		.loc 1 968 0
 2511 092e 5E4B     		ldr	r3, .L188+36
 2512 0930 1B68     		ldr	r3, [r3]
 2513 0932 7A6D     		ldr	r2, [r7, #84]
 2514 0934 D21A     		subs	r2, r2, r3
 2515 0936 7B6C     		ldr	r3, [r7, #68]
 2516 0938 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2517 093c 5B42     		negs	r3, r3
 2518 093e 9A42     		cmp	r2, r3
 2519 0940 06DA     		bge	.L162
 969:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 2520              		.loc 1 969 0
 2521 0942 594B     		ldr	r3, .L188+36
 2522 0944 1B68     		ldr	r3, [r3]
 2523 0946 7A6C     		ldr	r2, [r7, #68]
 2524 0948 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2525 094c 9B1A     		subs	r3, r3, r2
 2526 094e 7B65     		str	r3, [r7, #84]
 2527              	.L162:
 970:..\src/interruptions.c ****     }
 971:..\src/interruptions.c ****     
 972:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2528              		.loc 1 972 0
 2529 0950 7B6D     		ldr	r3, [r7, #84]
 2530 0952 642B     		cmp	r3, #100
 2531 0954 01DD     		ble	.L163
 973:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2532              		.loc 1 973 0
 2533 0956 6423     		movs	r3, #100
 2534 0958 7B65     		str	r3, [r7, #84]
 2535              	.L163:
 974:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2536              		.loc 1 974 0
 2537 095a 7B6D     		ldr	r3, [r7, #84]
 2538 095c 13F1640F 		cmn	r3, #100
 2539 0960 02DA     		bge	.L164
 975:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2540              		.loc 1 975 0
 2541 0962 6FF06303 		mvn	r3, #99
 2542 0966 7B65     		str	r3, [r7, #84]
 2543              	.L164:
 976:..\src/interruptions.c ****     
 977:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2544              		.loc 1 977 0
 2545 0968 4F4A     		ldr	r2, .L188+36
 2546 096a 7B6D     		ldr	r3, [r7, #84]
 2547 096c 1360     		str	r3, [r2]
 978:..\src/interruptions.c **** 	
 979:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2548              		.loc 1 979 0
 2549 096e 7B6D     		ldr	r3, [r7, #84]
 2550 0970 002B     		cmp	r3, #0
 2551 0972 01DB     		blt	.L165
 2552              		.loc 1 979 0 is_stmt 0 discriminator 1
 2553 0974 0122     		movs	r2, #1
 2554 0976 01E0     		b	.L166
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 64


 2555              	.L165:
 2556              		.loc 1 979 0 discriminator 2
 2557 0978 4FF0FF32 		mov	r2, #-1
 2558              	.L166:
 2559              		.loc 1 979 0 discriminator 4
 2560 097c 4B4B     		ldr	r3, .L188+40
 2561 097e 1A70     		strb	r2, [r3]
 980:..\src/interruptions.c ****     
 981:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 2562              		.loc 1 981 0 is_stmt 1 discriminator 4
 2563 0980 7B6C     		ldr	r3, [r7, #68]
 2564 0982 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 2565 0986 012B     		cmp	r3, #1
 2566 0988 40F09F80 		bne	.L167
 982:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
 983:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 2567              		.loc 1 983 0
 2568 098c 7B6C     		ldr	r3, [r7, #68]
 2569 098e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2570 0992 012B     		cmp	r3, #1
 2571 0994 00F09680 		beq	.L168
 2572              		.loc 1 983 0 is_stmt 0 discriminator 1
 2573 0998 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2574 099c 444A     		ldr	r2, .L188+44
 2575 099e 3421     		movs	r1, #52
 2576 09a0 01FB03F3 		mul	r3, r1, r3
 2577 09a4 1344     		add	r3, r3, r2
 2578 09a6 1A68     		ldr	r2, [r3]
 2579 09a8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2580 09ac 3549     		ldr	r1, .L188
 2581 09ae 3420     		movs	r0, #52
 2582 09b0 00FB03F3 		mul	r3, r0, r3
 2583 09b4 0B44     		add	r3, r3, r1
 2584 09b6 1B68     		ldr	r3, [r3]
 2585 09b8 D31A     		subs	r3, r2, r3
 2586 09ba 312B     		cmp	r3, #49
 2587 09bc 00F38280 		bgt	.L168
 984:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2588              		.loc 1 984 0 is_stmt 1 discriminator 2
 2589 09c0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2590 09c4 3A4A     		ldr	r2, .L188+44
 2591 09c6 3421     		movs	r1, #52
 2592 09c8 01FB03F3 		mul	r3, r1, r3
 2593 09cc 1344     		add	r3, r3, r2
 2594 09ce 1A68     		ldr	r2, [r3]
 2595 09d0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2596 09d4 2B49     		ldr	r1, .L188
 2597 09d6 3420     		movs	r0, #52
 2598 09d8 00FB03F3 		mul	r3, r0, r3
 2599 09dc 0B44     		add	r3, r3, r1
 2600 09de 1B68     		ldr	r3, [r3]
 2601 09e0 D31A     		subs	r3, r2, r3
 983:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2602              		.loc 1 983 0 discriminator 2
 2603 09e2 13F1310F 		cmn	r3, #49
 2604 09e6 6DDB     		blt	.L168
 985:..\src/interruptions.c ****             ((g_refOld[0].pos - g_ref[0].pos) < 100 && (g_refOld[0].pos - g_ref[0].pos) > -100) ) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 65


 2605              		.loc 1 985 0
 2606 09e8 324B     		ldr	r3, .L188+48
 2607 09ea 1A68     		ldr	r2, [r3]
 2608 09ec 2B4B     		ldr	r3, .L188+24
 2609 09ee 1B68     		ldr	r3, [r3]
 2610 09f0 D31A     		subs	r3, r2, r3
 984:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 2611              		.loc 1 984 0
 2612 09f2 632B     		cmp	r3, #99
 2613 09f4 66DC     		bgt	.L168
 2614              		.loc 1 985 0
 2615 09f6 2F4B     		ldr	r3, .L188+48
 2616 09f8 1A68     		ldr	r2, [r3]
 2617 09fa 284B     		ldr	r3, .L188+24
 2618 09fc 1B68     		ldr	r3, [r3]
 2619 09fe D31A     		subs	r3, r2, r3
 2620 0a00 13F1630F 		cmn	r3, #99
 2621 0a04 5EDB     		blt	.L168
 986:..\src/interruptions.c ****             position_counter++;
 2622              		.loc 1 986 0
 2623 0a06 2C4B     		ldr	r3, .L188+52
 2624 0a08 1B68     		ldr	r3, [r3]
 2625 0a0a 0133     		adds	r3, r3, #1
 2626 0a0c 2A4A     		ldr	r2, .L188+52
 2627 0a0e 1360     		str	r3, [r2]
 987:..\src/interruptions.c ****             
 988:..\src/interruptions.c ****             if (position_counter >= 250) { 
 2628              		.loc 1 988 0
 2629 0a10 294B     		ldr	r3, .L188+52
 2630 0a12 1B68     		ldr	r3, [r3]
 2631 0a14 F92B     		cmp	r3, #249
 2632 0a16 58D9     		bls	.L167
 989:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2633              		.loc 1 989 0
 2634 0a18 7B6C     		ldr	r3, [r7, #68]
 2635 0a1a 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2636 0a1e 002B     		cmp	r3, #0
 2637 0a20 0DD1     		bne	.L170
 2638              		.loc 1 989 0 is_stmt 0 discriminator 1
 2639 0a22 264B     		ldr	r3, .L188+56
 2640 0a24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2641 0a26 002B     		cmp	r3, #0
 2642 0a28 09D1     		bne	.L170
 990:..\src/interruptions.c ****                     g_refNew[0].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when USB input 
 2643              		.loc 1 990 0 is_stmt 1
 2644 0a2a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2645 0a2e 154A     		ldr	r2, .L188
 2646 0a30 3421     		movs	r1, #52
 2647 0a32 01FB03F3 		mul	r3, r1, r3
 2648 0a36 1344     		add	r3, r3, r2
 2649 0a38 1B68     		ldr	r3, [r3]
 2650 0a3a 214A     		ldr	r2, .L188+60
 2651 0a3c 1360     		str	r3, [r2]
 2652              	.L170:
 991:..\src/interruptions.c ****                 }
 992:..\src/interruptions.c ****                 g_ref[0].pos = g_meas[SH_ENC_L].pos[0];
 2653              		.loc 1 992 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 66


 2654 0a3e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2655 0a42 104A     		ldr	r2, .L188
 2656 0a44 3421     		movs	r1, #52
 2657 0a46 01FB03F3 		mul	r3, r1, r3
 2658 0a4a 1344     		add	r3, r3, r2
 2659 0a4c 1B68     		ldr	r3, [r3]
 2660 0a4e 134A     		ldr	r2, .L188+24
 2661 0a50 1360     		str	r3, [r2]
 993:..\src/interruptions.c ****                 
 994:..\src/interruptions.c ****                 if (position_counter == 250){
 2662              		.loc 1 994 0
 2663 0a52 194B     		ldr	r3, .L188+52
 2664 0a54 1B68     		ldr	r3, [r3]
 2665 0a56 FA2B     		cmp	r3, #250
 2666 0a58 11D1     		bne	.L171
 995:..\src/interruptions.c ****                     // To do only once
 996:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 2667              		.loc 1 996 0
 2668 0a5a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 2669 0a5e 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 2670 0a62 0849     		ldr	r1, .L188
 2671 0a64 3420     		movs	r0, #52
 2672 0a66 00FB02F2 		mul	r2, r0, r2
 2673 0a6a 0A44     		add	r2, r2, r1
 2674 0a6c 0C32     		adds	r2, r2, #12
 2675 0a6e 1268     		ldr	r2, [r2]
 2676 0a70 0449     		ldr	r1, .L188
 2677 0a72 3420     		movs	r0, #52
 2678 0a74 00FB03F3 		mul	r3, r0, r3
 2679 0a78 0B44     		add	r3, r3, r1
 2680 0a7a 1433     		adds	r3, r3, #20
 2681 0a7c 1A60     		str	r2, [r3]
 2682              	.L171:
 997:..\src/interruptions.c ****                 }
 998:..\src/interruptions.c ****                 pwm_input = 0;            
 2683              		.loc 1 998 0
 2684 0a7e 0023     		movs	r3, #0
 2685 0a80 7B65     		str	r3, [r7, #84]
 988:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2686              		.loc 1 988 0
 2687 0a82 22E0     		b	.L167
 2688              	.L189:
 2689              		.align	2
 2690              	.L188:
 2691 0a84 00000000 		.word	g_meas
 2692 0a88 9C000000 		.word	curr_error_sum.10410
 2693 0a8c A0860100 		.word	100000
 2694 0a90 6079FEFF 		.word	-100000
 2695 0a94 A0000000 		.word	prev_curr_err.10412
 2696 0a98 98000000 		.word	motor_dir.10414
 2697 0a9c 00000000 		.word	g_ref
 2698 0aa0 1F85EB51 		.word	1374389535
 2699 0aa4 00000000 		.word	dev_pwm_limit
 2700 0aa8 A4000000 		.word	prev_pwm.10413
 2701 0aac 00000000 		.word	pwm_sign
 2702 0ab0 00000000 		.word	g_measOld
 2703 0ab4 00000000 		.word	g_refOld
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 67


 2704 0ab8 A8000000 		.word	position_counter.10415
 2705 0abc 00000000 		.word	change_ext_ref_flag
 2706 0ac0 00000000 		.word	g_refNew
 2707              	.L168:
 999:..\src/interruptions.c ****             }
1000:..\src/interruptions.c ****         }
1001:..\src/interruptions.c ****         else {
1002:..\src/interruptions.c ****             position_counter = 0;
 2708              		.loc 1 1002 0
 2709 0ac4 0C4B     		ldr	r3, .L190
 2710 0ac6 0022     		movs	r2, #0
 2711 0ac8 1A60     		str	r2, [r3]
 2712              	.L167:
1003:..\src/interruptions.c ****         }
1004:..\src/interruptions.c ****     }
1005:..\src/interruptions.c ****     
1006:..\src/interruptions.c ****     if (motor_dir)
 2713              		.loc 1 1006 0
 2714 0aca 0C4B     		ldr	r3, .L190+4
 2715 0acc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2716 0ace 002B     		cmp	r3, #0
 2717 0ad0 03D0     		beq	.L172
1007:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 2718              		.loc 1 1007 0
 2719 0ad2 0120     		movs	r0, #1
 2720 0ad4 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2721 0ad8 02E0     		b	.L173
 2722              	.L172:
1008:..\src/interruptions.c ****     else
1009:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 2723              		.loc 1 1009 0
 2724 0ada 0020     		movs	r0, #0
 2725 0adc FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2726              	.L173:
1010:..\src/interruptions.c **** 
1011:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 2727              		.loc 1 1011 0
 2728 0ae0 7B6D     		ldr	r3, [r7, #84]
 2729 0ae2 002B     		cmp	r3, #0
 2730 0ae4 B8BF     		it	lt
 2731 0ae6 5B42     		rsblt	r3, r3, #0
 2732 0ae8 DBB2     		uxtb	r3, r3
 2733 0aea 1846     		mov	r0, r3
 2734 0aec FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1012:..\src/interruptions.c **** }
 2735              		.loc 1 1012 0
 2736 0af0 00BF     		nop
 2737 0af2 5837     		adds	r7, r7, #88
 2738              		.cfi_def_cfa_offset 8
 2739 0af4 BD46     		mov	sp, r7
 2740              		.cfi_def_cfa_register 13
 2741              		@ sp needed
 2742 0af6 80BD     		pop	{r7, pc}
 2743              	.L191:
 2744              		.align	2
 2745              	.L190:
 2746 0af8 A8000000 		.word	position_counter.10415
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 68


 2747 0afc 98000000 		.word	motor_dir.10414
 2748              		.cfi_endproc
 2749              	.LFE68:
 2750              		.size	motor_control_SH, .-motor_control_SH
 2751              		.section	.text.motor_control_generic,"ax",%progbits
 2752              		.align	2
 2753              		.global	motor_control_generic
 2754              		.thumb
 2755              		.thumb_func
 2756              		.type	motor_control_generic, %function
 2757              	motor_control_generic:
 2758              	.LFB69:
1013:..\src/interruptions.c **** 
1014:..\src/interruptions.c **** //==============================================================================
1015:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1016:..\src/interruptions.c **** //==============================================================================
1017:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 2759              		.loc 1 1017 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 96
 2762              		@ frame_needed = 1, uses_anonymous_args = 0
 2763 0000 90B5     		push	{r4, r7, lr}
 2764              		.cfi_def_cfa_offset 12
 2765              		.cfi_offset 4, -12
 2766              		.cfi_offset 7, -8
 2767              		.cfi_offset 14, -4
 2768 0002 99B0     		sub	sp, sp, #100
 2769              		.cfi_def_cfa_offset 112
 2770 0004 00AF     		add	r7, sp, #0
 2771              		.cfi_def_cfa_register 7
 2772 0006 0346     		mov	r3, r0
 2773 0008 FB71     		strb	r3, [r7, #7]
1018:..\src/interruptions.c ****     
1019:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2774              		.loc 1 1019 0
 2775 000a 0023     		movs	r3, #0
 2776 000c FB65     		str	r3, [r7, #92]
1020:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1021:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1022:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1023:..\src/interruptions.c ****     int32 CYDATA handle_value;
1024:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 2777              		.loc 1 1026 0
 2778 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2779 0010 1346     		mov	r3, r2
 2780 0012 DB00     		lsls	r3, r3, #3
 2781 0014 9B1A     		subs	r3, r3, r2
 2782 0016 1B01     		lsls	r3, r3, #4
 2783 0018 B033     		adds	r3, r3, #176
 2784 001a A94A     		ldr	r2, .L310
 2785 001c 1344     		add	r3, r3, r2
 2786 001e 3B65     		str	r3, [r7, #80]
1027:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 2787              		.loc 1 1027 0
 2788 0020 3B6D     		ldr	r3, [r7, #80]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 69


 2789 0022 93F86030 		ldrb	r3, [r3, #96]
 2790 0026 87F84F30 		strb	r3, [r7, #79]
1028:..\src/interruptions.c ****     
1029:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 2791              		.loc 1 1029 0
 2792 002a 3B6D     		ldr	r3, [r7, #80]
 2793 002c 1B68     		ldr	r3, [r3]
 2794 002e BB64     		str	r3, [r7, #72]
1030:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 2795              		.loc 1 1030 0
 2796 0030 3B6D     		ldr	r3, [r7, #80]
 2797 0032 5B68     		ldr	r3, [r3, #4]
 2798 0034 7B64     		str	r3, [r7, #68]
1031:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 2799              		.loc 1 1031 0
 2800 0036 3B6D     		ldr	r3, [r7, #80]
 2801 0038 9B68     		ldr	r3, [r3, #8]
 2802 003a 3B64     		str	r3, [r7, #64]
1032:..\src/interruptions.c **** 
1033:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 2803              		.loc 1 1033 0
 2804 003c 3B6D     		ldr	r3, [r7, #80]
 2805 003e DB68     		ldr	r3, [r3, #12]
 2806 0040 FB63     		str	r3, [r7, #60]
1034:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 2807              		.loc 1 1034 0
 2808 0042 3B6D     		ldr	r3, [r7, #80]
 2809 0044 1B69     		ldr	r3, [r3, #16]
 2810 0046 BB63     		str	r3, [r7, #56]
1035:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 2811              		.loc 1 1035 0
 2812 0048 3B6D     		ldr	r3, [r7, #80]
 2813 004a 5B69     		ldr	r3, [r3, #20]
 2814 004c 7B63     		str	r3, [r7, #52]
1036:..\src/interruptions.c **** 
1037:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 2815              		.loc 1 1037 0
 2816 004e 3B6D     		ldr	r3, [r7, #80]
 2817 0050 9B69     		ldr	r3, [r3, #24]
 2818 0052 3B63     		str	r3, [r7, #48]
1038:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 2819              		.loc 1 1038 0
 2820 0054 3B6D     		ldr	r3, [r7, #80]
 2821 0056 DB69     		ldr	r3, [r3, #28]
 2822 0058 FB62     		str	r3, [r7, #44]
1039:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 2823              		.loc 1 1039 0
 2824 005a 3B6D     		ldr	r3, [r7, #80]
 2825 005c 1B6A     		ldr	r3, [r3, #32]
 2826 005e BB62     		str	r3, [r7, #40]
1040:..\src/interruptions.c ****     
1041:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 2827              		.loc 1 1041 0
 2828 0060 3B6D     		ldr	r3, [r7, #80]
 2829 0062 5B6A     		ldr	r3, [r3, #36]
 2830 0064 7B62     		str	r3, [r7, #36]
1042:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 70


 2831              		.loc 1 1042 0
 2832 0066 3B6D     		ldr	r3, [r7, #80]
 2833 0068 9B6A     		ldr	r3, [r3, #40]
 2834 006a 3B62     		str	r3, [r7, #32]
1043:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 2835              		.loc 1 1043 0
 2836 006c 3B6D     		ldr	r3, [r7, #80]
 2837 006e DB6A     		ldr	r3, [r3, #44]
 2838 0070 FB61     		str	r3, [r7, #28]
1044:..\src/interruptions.c **** 
1045:..\src/interruptions.c ****     // Static Variables
1046:..\src/interruptions.c **** 
1047:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1048:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1049:..\src/interruptions.c ****     
1050:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1051:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1052:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1055:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1056:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
1057:..\src/interruptions.c ****                                                         // 1 EMG 1
1058:..\src/interruptions.c ****                                                         // 2 EMG 2
1059:..\src/interruptions.c ****                                                         // wait for both to get down
1060:..\src/interruptions.c ****     
1061:..\src/interruptions.c ****     err_emg_1 = g_emg_meas.emg[0] - c_mem.emg.emg_threshold[0];
 2839              		.loc 1 1061 0
 2840 0072 944B     		ldr	r3, .L310+4
 2841 0074 1B68     		ldr	r3, [r3]
 2842 0076 924A     		ldr	r2, .L310
 2843 0078 B2F8F021 		ldrh	r2, [r2, #496]
 2844 007c 9B1A     		subs	r3, r3, r2
 2845 007e BB61     		str	r3, [r7, #24]
1062:..\src/interruptions.c ****     err_emg_2 = g_emg_meas.emg[1] - c_mem.emg.emg_threshold[1];
 2846              		.loc 1 1062 0
 2847 0080 904B     		ldr	r3, .L310+4
 2848 0082 5B68     		ldr	r3, [r3, #4]
 2849 0084 8E4A     		ldr	r2, .L310
 2850 0086 B2F8F221 		ldrh	r2, [r2, #498]
 2851 008a 9B1A     		subs	r3, r3, r2
 2852 008c 7B61     		str	r3, [r7, #20]
1063:..\src/interruptions.c **** 
1064:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
1065:..\src/interruptions.c ****     switch(MOT->input_mode) {
 2853              		.loc 1 1065 0
 2854 008e 3B6D     		ldr	r3, [r7, #80]
 2855 0090 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 2856 0094 013B     		subs	r3, r3, #1
 2857 0096 042B     		cmp	r3, #4
 2858 0098 00F20482 		bhi	.L301
 2859 009c 01A2     		adr	r2, .L195
 2860 009e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2861 00a2 00BF     		.p2align 2
 2862              	.L195:
 2863 00a4 B9000000 		.word	.L194+1
 2864 00a8 C5010000 		.word	.L196+1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 71


 2865 00ac 0B020000 		.word	.L197+1
 2866 00b0 97020000 		.word	.L198+1
 2867 00b4 9D030000 		.word	.L199+1
 2868              		.p2align 1
 2869              	.L194:
1066:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
1067:..\src/interruptions.c **** 
1068:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
1069:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
1070:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 2870              		.loc 1 1070 0
 2871 00b8 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 2872 00bc 8049     		ldr	r1, .L310
 2873 00be 1346     		mov	r3, r2
 2874 00c0 5B00     		lsls	r3, r3, #1
 2875 00c2 1344     		add	r3, r3, r2
 2876 00c4 1B01     		lsls	r3, r3, #4
 2877 00c6 0B44     		add	r3, r3, r1
 2878 00c8 03F5D873 		add	r3, r3, #432
 2879 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2880 00ce 002B     		cmp	r3, #0
 2881 00d0 1BD0     		beq	.L200
1071:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 2882              		.loc 1 1071 0
 2883 00d2 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 2884 00d6 7C4A     		ldr	r2, .L310+8
 2885 00d8 3421     		movs	r1, #52
 2886 00da 01FB03F3 		mul	r3, r1, r3
 2887 00de 1344     		add	r3, r3, r2
 2888 00e0 0833     		adds	r3, r3, #8
 2889 00e2 1968     		ldr	r1, [r3]
 2890 00e4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 2891 00e8 7548     		ldr	r0, .L310
 2892 00ea 1346     		mov	r3, r2
 2893 00ec 5B00     		lsls	r3, r3, #1
 2894 00ee 1344     		add	r3, r3, r2
 2895 00f0 1B01     		lsls	r3, r3, #4
 2896 00f2 0344     		add	r3, r3, r0
 2897 00f4 03F5DA73 		add	r3, r3, #436
 2898 00f8 93F90030 		ldrsb	r3, [r3]
 2899 00fc 03FB01F2 		mul	r2, r3, r1
 2900 0100 3B6D     		ldr	r3, [r7, #80]
 2901 0102 5B6B     		ldr	r3, [r3, #52]
 2902 0104 1344     		add	r3, r3, r2
 2903 0106 7B65     		str	r3, [r7, #84]
 2904 0108 1AE0     		b	.L201
 2905              	.L200:
1072:..\src/interruptions.c ****             else
1073:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 2906              		.loc 1 1073 0
 2907 010a 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 2908 010e 6E4A     		ldr	r2, .L310+8
 2909 0110 3421     		movs	r1, #52
 2910 0112 01FB03F3 		mul	r3, r1, r3
 2911 0116 1344     		add	r3, r3, r2
 2912 0118 0433     		adds	r3, r3, #4
 2913 011a 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 72


 2914 011c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 2915 0120 6748     		ldr	r0, .L310
 2916 0122 1346     		mov	r3, r2
 2917 0124 5B00     		lsls	r3, r3, #1
 2918 0126 1344     		add	r3, r3, r2
 2919 0128 1B01     		lsls	r3, r3, #4
 2920 012a 0344     		add	r3, r3, r0
 2921 012c 03F5DA73 		add	r3, r3, #436
 2922 0130 93F90030 		ldrsb	r3, [r3]
 2923 0134 03FB01F2 		mul	r2, r3, r1
 2924 0138 3B6D     		ldr	r3, [r7, #80]
 2925 013a 5B6B     		ldr	r3, [r3, #52]
 2926 013c 1344     		add	r3, r3, r2
 2927 013e 7B65     		str	r3, [r7, #84]
 2928              	.L201:
1074:..\src/interruptions.c ****             
1075:..\src/interruptions.c **** 
1076:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
1077:..\src/interruptions.c ****             if (((handle_value - g_refOld[idx].pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0
 2929              		.loc 1 1077 0
 2930 0140 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2931 0142 624A     		ldr	r2, .L310+12
 2932 0144 1B01     		lsls	r3, r3, #4
 2933 0146 1344     		add	r3, r3, r2
 2934 0148 1B68     		ldr	r3, [r3]
 2935 014a 7A6D     		ldr	r2, [r7, #84]
 2936 014c D21A     		subs	r2, r2, r3
 2937 014e 3B6D     		ldr	r3, [r7, #80]
 2938 0150 1B6C     		ldr	r3, [r3, #64]
 2939 0152 9A42     		cmp	r2, r3
 2940 0154 11DD     		ble	.L202
 2941              		.loc 1 1077 0 is_stmt 0 discriminator 1
 2942 0156 3B6D     		ldr	r3, [r7, #80]
 2943 0158 1B6C     		ldr	r3, [r3, #64]
 2944 015a 002B     		cmp	r3, #0
 2945 015c 0DD0     		beq	.L202
1078:..\src/interruptions.c ****                 g_ref[idx].pos += MOT->max_step_pos;
 2946              		.loc 1 1078 0 is_stmt 1
 2947 015e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2948 0160 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2949 0162 5B49     		ldr	r1, .L310+16
 2950 0164 1201     		lsls	r2, r2, #4
 2951 0166 0A44     		add	r2, r2, r1
 2952 0168 1168     		ldr	r1, [r2]
 2953 016a 3A6D     		ldr	r2, [r7, #80]
 2954 016c 126C     		ldr	r2, [r2, #64]
 2955 016e 0A44     		add	r2, r2, r1
 2956 0170 5749     		ldr	r1, .L310+16
 2957 0172 1B01     		lsls	r3, r3, #4
 2958 0174 0B44     		add	r3, r3, r1
 2959 0176 1A60     		str	r2, [r3]
 2960 0178 23E0     		b	.L203
 2961              	.L202:
1079:..\src/interruptions.c ****             else {
1080:..\src/interruptions.c ****                 if (((handle_value - g_refOld[idx].pos) < MOT->max_step_neg) && (MOT->max_step_neg 
 2962              		.loc 1 1080 0
 2963 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 73


 2964 017c 534A     		ldr	r2, .L310+12
 2965 017e 1B01     		lsls	r3, r3, #4
 2966 0180 1344     		add	r3, r3, r2
 2967 0182 1B68     		ldr	r3, [r3]
 2968 0184 7A6D     		ldr	r2, [r7, #84]
 2969 0186 D21A     		subs	r2, r2, r3
 2970 0188 3B6D     		ldr	r3, [r7, #80]
 2971 018a DB6B     		ldr	r3, [r3, #60]
 2972 018c 9A42     		cmp	r2, r3
 2973 018e 11DA     		bge	.L204
 2974              		.loc 1 1080 0 is_stmt 0 discriminator 1
 2975 0190 3B6D     		ldr	r3, [r7, #80]
 2976 0192 DB6B     		ldr	r3, [r3, #60]
 2977 0194 002B     		cmp	r3, #0
 2978 0196 0DD0     		beq	.L204
1081:..\src/interruptions.c ****                     g_ref[idx].pos += MOT->max_step_neg;
 2979              		.loc 1 1081 0 is_stmt 1
 2980 0198 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2981 019a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2982 019c 4C49     		ldr	r1, .L310+16
 2983 019e 1201     		lsls	r2, r2, #4
 2984 01a0 0A44     		add	r2, r2, r1
 2985 01a2 1168     		ldr	r1, [r2]
 2986 01a4 3A6D     		ldr	r2, [r7, #80]
 2987 01a6 D26B     		ldr	r2, [r2, #60]
 2988 01a8 0A44     		add	r2, r2, r1
 2989 01aa 4949     		ldr	r1, .L310+16
 2990 01ac 1B01     		lsls	r3, r3, #4
 2991 01ae 0B44     		add	r3, r3, r1
 2992 01b0 1A60     		str	r2, [r3]
 2993 01b2 06E0     		b	.L203
 2994              	.L204:
1082:..\src/interruptions.c ****                 else
1083:..\src/interruptions.c ****                     g_ref[idx].pos = handle_value;
 2995              		.loc 1 1083 0
 2996 01b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2997 01b6 464A     		ldr	r2, .L310+16
 2998 01b8 1B01     		lsls	r3, r3, #4
 2999 01ba 1344     		add	r3, r3, r2
 3000 01bc 7A6D     		ldr	r2, [r7, #84]
 3001 01be 1A60     		str	r2, [r3]
1084:..\src/interruptions.c ****             }
1085:..\src/interruptions.c ****             break;
 3002              		.loc 1 1085 0
 3003 01c0 73E1     		b	.L205
 3004              	.L203:
 3005 01c2 72E1     		b	.L205
 3006              	.L196:
1086:..\src/interruptions.c ****             
1087:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
1088:..\src/interruptions.c ****             if (err_emg_1 > 0)
 3007              		.loc 1 1088 0
 3008 01c4 BB69     		ldr	r3, [r7, #24]
 3009 01c6 002B     		cmp	r3, #0
 3010 01c8 18DD     		ble	.L206
1089:..\src/interruptions.c ****                 g_ref[idx].pos = (err_emg_1 * g_mem.motor[idx].pos_lim_sup) / (1024 - c_mem.emg.emg
 3011              		.loc 1 1089 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 74


 3012 01ca F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 3013 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3014 01ce 4148     		ldr	r0, .L310+20
 3015 01d0 1346     		mov	r3, r2
 3016 01d2 DB00     		lsls	r3, r3, #3
 3017 01d4 9B1A     		subs	r3, r3, r2
 3018 01d6 1B01     		lsls	r3, r3, #4
 3019 01d8 0344     		add	r3, r3, r0
 3020 01da E833     		adds	r3, r3, #232
 3021 01dc 1B68     		ldr	r3, [r3]
 3022 01de BA69     		ldr	r2, [r7, #24]
 3023 01e0 02FB03F2 		mul	r2, r2, r3
 3024 01e4 364B     		ldr	r3, .L310
 3025 01e6 B3F8F031 		ldrh	r3, [r3, #496]
 3026 01ea C3F58063 		rsb	r3, r3, #1024
 3027 01ee 92FBF3F2 		sdiv	r2, r2, r3
 3028 01f2 3748     		ldr	r0, .L310+16
 3029 01f4 0B01     		lsls	r3, r1, #4
 3030 01f6 0344     		add	r3, r3, r0
 3031 01f8 1A60     		str	r2, [r3]
1090:..\src/interruptions.c ****             else
1091:..\src/interruptions.c ****                 g_ref[idx].pos = 0;
1092:..\src/interruptions.c ****             break;
 3032              		.loc 1 1092 0
 3033 01fa 56E1     		b	.L205
 3034              	.L206:
1091:..\src/interruptions.c ****             break;
 3035              		.loc 1 1091 0
 3036 01fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3037 01fe 344A     		ldr	r2, .L310+16
 3038 0200 1B01     		lsls	r3, r3, #4
 3039 0202 1344     		add	r3, r3, r2
 3040 0204 0022     		movs	r2, #0
 3041 0206 1A60     		str	r2, [r3]
 3042              		.loc 1 1092 0
 3043 0208 4FE1     		b	.L205
 3044              	.L197:
1093:..\src/interruptions.c **** 
1094:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
1095:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3045              		.loc 1 1095 0
 3046 020a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3047 020c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3048 020e 2F49     		ldr	r1, .L310+12
 3049 0210 1201     		lsls	r2, r2, #4
 3050 0212 0A44     		add	r2, r2, r1
 3051 0214 1268     		ldr	r2, [r2]
 3052 0216 2E49     		ldr	r1, .L310+16
 3053 0218 1B01     		lsls	r3, r3, #4
 3054 021a 0B44     		add	r3, r3, r1
 3055 021c 1A60     		str	r2, [r3]
1096:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 3056              		.loc 1 1096 0
 3057 021e BB69     		ldr	r3, [r7, #24]
 3058 0220 002B     		cmp	r3, #0
 3059 0222 19DD     		ble	.L208
1097:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * (int)g_mem.emg.emg_speed * 2) / (
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 75


 3060              		.loc 1 1097 0
 3061 0224 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3062 0226 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3063 0228 2849     		ldr	r1, .L310+12
 3064 022a 1201     		lsls	r2, r2, #4
 3065 022c 0A44     		add	r2, r2, r1
 3066 022e 1168     		ldr	r1, [r2]
 3067 0230 284A     		ldr	r2, .L310+20
 3068 0232 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3069 0236 1046     		mov	r0, r2
 3070 0238 BA69     		ldr	r2, [r7, #24]
 3071 023a 02FB00F2 		mul	r2, r2, r0
 3072 023e 5000     		lsls	r0, r2, #1
 3073 0240 1F4A     		ldr	r2, .L310
 3074 0242 B2F8F021 		ldrh	r2, [r2, #496]
 3075 0246 C2F58062 		rsb	r2, r2, #1024
 3076 024a 90FBF2F2 		sdiv	r2, r0, r2
 3077 024e 0A44     		add	r2, r2, r1
 3078 0250 1F49     		ldr	r1, .L310+16
 3079 0252 1B01     		lsls	r3, r3, #4
 3080 0254 0B44     		add	r3, r3, r1
 3081 0256 1A60     		str	r2, [r3]
 3082              	.L208:
1098:..\src/interruptions.c ****             }
1099:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 3083              		.loc 1 1099 0
 3084 0258 7B69     		ldr	r3, [r7, #20]
 3085 025a 002B     		cmp	r3, #0
 3086 025c 40F32481 		ble	.L302
1100:..\src/interruptions.c ****                 g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * (int)g_mem.emg.emg_speed * 2) / (
 3087              		.loc 1 1100 0
 3088 0260 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3089 0262 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3090 0264 1949     		ldr	r1, .L310+12
 3091 0266 1201     		lsls	r2, r2, #4
 3092 0268 0A44     		add	r2, r2, r1
 3093 026a 1168     		ldr	r1, [r2]
 3094 026c 194A     		ldr	r2, .L310+20
 3095 026e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3096 0272 1046     		mov	r0, r2
 3097 0274 7A69     		ldr	r2, [r7, #20]
 3098 0276 02FB00F2 		mul	r2, r2, r0
 3099 027a 5000     		lsls	r0, r2, #1
 3100 027c 104A     		ldr	r2, .L310
 3101 027e B2F8F221 		ldrh	r2, [r2, #498]
 3102 0282 C2F58062 		rsb	r2, r2, #1024
 3103 0286 90FBF2F2 		sdiv	r2, r0, r2
 3104 028a 8A1A     		subs	r2, r1, r2
 3105 028c 1049     		ldr	r1, .L310+16
 3106 028e 1B01     		lsls	r3, r3, #4
 3107 0290 0B44     		add	r3, r3, r1
 3108 0292 1A60     		str	r2, [r3]
1101:..\src/interruptions.c ****             }
1102:..\src/interruptions.c ****             break;
 3109              		.loc 1 1102 0
 3110 0294 08E1     		b	.L302
 3111              	.L198:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 76


1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
1105:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3112              		.loc 1 1105 0
 3113 0296 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3114 0298 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3115 029a 0C49     		ldr	r1, .L310+12
 3116 029c 1201     		lsls	r2, r2, #4
 3117 029e 0A44     		add	r2, r2, r1
 3118 02a0 1268     		ldr	r2, [r2]
 3119 02a2 0B49     		ldr	r1, .L310+16
 3120 02a4 1B01     		lsls	r3, r3, #4
 3121 02a6 0B44     		add	r3, r3, r1
 3122 02a8 1A60     		str	r2, [r3]
1106:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3123              		.loc 1 1106 0
 3124 02aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3125 02ac 0A4A     		ldr	r2, .L310+24
 3126 02ae D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3127 02b0 012B     		cmp	r3, #1
 3128 02b2 2BD0     		beq	.L211
 3129 02b4 022B     		cmp	r3, #2
 3130 02b6 4CD0     		beq	.L212
 3131 02b8 002B     		cmp	r3, #0
 3132 02ba 0FD0     		beq	.L213
1107:..\src/interruptions.c ****                 case 0:
1108:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
1109:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1110:..\src/interruptions.c ****                         current_emg[idx] = 1;
1111:..\src/interruptions.c ****                         break;
1112:..\src/interruptions.c ****                     }
1113:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1114:..\src/interruptions.c ****                         current_emg[idx] = 2;
1115:..\src/interruptions.c ****                         break;
1116:..\src/interruptions.c ****                     }
1117:..\src/interruptions.c ****                     break;
1118:..\src/interruptions.c **** 
1119:..\src/interruptions.c ****                 case 1:
1120:..\src/interruptions.c ****                     // EMG 1 is first
1121:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
1122:..\src/interruptions.c ****                         current_emg[idx] = 0;
1123:..\src/interruptions.c ****                         break;
1124:..\src/interruptions.c ****                     }
1125:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2) / (
1126:..\src/interruptions.c ****                     break;
1127:..\src/interruptions.c **** 
1128:..\src/interruptions.c ****                 case 2:
1129:..\src/interruptions.c ****                     // EMG 2 is first
1130:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
1131:..\src/interruptions.c ****                         current_emg[idx] = 0;
1132:..\src/interruptions.c ****                         break;
1133:..\src/interruptions.c ****                     }
1134:..\src/interruptions.c ****                     g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * g_mem.emg.emg_speed << 2) / (
1135:..\src/interruptions.c ****                     break;
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c ****                 default:
1138:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 77


 3133              		.loc 1 1138 0
 3134 02bc 6DE0     		b	.L215
 3135              	.L311:
 3136 02be 00BF     		.align	2
 3137              	.L310:
 3138 02c0 00000000 		.word	c_mem
 3139 02c4 00000000 		.word	g_emg_meas
 3140 02c8 00000000 		.word	g_meas
 3141 02cc 00000000 		.word	g_refOld
 3142 02d0 00000000 		.word	g_ref
 3143 02d4 00000000 		.word	g_mem
 3144 02d8 AC000000 		.word	current_emg.10471
 3145              	.L213:
1109:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3146              		.loc 1 1109 0
 3147 02dc BB69     		ldr	r3, [r7, #24]
 3148 02de 002B     		cmp	r3, #0
 3149 02e0 08DD     		ble	.L214
1109:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3150              		.loc 1 1109 0 is_stmt 0 discriminator 1
 3151 02e2 BA69     		ldr	r2, [r7, #24]
 3152 02e4 7B69     		ldr	r3, [r7, #20]
 3153 02e6 9A42     		cmp	r2, r3
 3154 02e8 04DD     		ble	.L214
1110:..\src/interruptions.c ****                         break;
 3155              		.loc 1 1110 0 is_stmt 1
 3156 02ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3157 02ec A14A     		ldr	r2, .L312
 3158 02ee 0121     		movs	r1, #1
 3159 02f0 D154     		strb	r1, [r2, r3]
1111:..\src/interruptions.c ****                     }
 3160              		.loc 1 1111 0
 3161 02f2 52E0     		b	.L215
 3162              	.L214:
1113:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3163              		.loc 1 1113 0
 3164 02f4 7B69     		ldr	r3, [r7, #20]
 3165 02f6 002B     		cmp	r3, #0
 3166 02f8 4EDD     		ble	.L303
1113:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3167              		.loc 1 1113 0 is_stmt 0 discriminator 1
 3168 02fa 7A69     		ldr	r2, [r7, #20]
 3169 02fc BB69     		ldr	r3, [r7, #24]
 3170 02fe 9A42     		cmp	r2, r3
 3171 0300 4ADD     		ble	.L303
1114:..\src/interruptions.c ****                         break;
 3172              		.loc 1 1114 0 is_stmt 1
 3173 0302 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3174 0304 9B4A     		ldr	r2, .L312
 3175 0306 0221     		movs	r1, #2
 3176 0308 D154     		strb	r1, [r2, r3]
1115:..\src/interruptions.c ****                     }
 3177              		.loc 1 1115 0
 3178 030a 46E0     		b	.L215
 3179              	.L211:
1121:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3180              		.loc 1 1121 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 78


 3181 030c BB69     		ldr	r3, [r7, #24]
 3182 030e 002B     		cmp	r3, #0
 3183 0310 04DA     		bge	.L217
1122:..\src/interruptions.c ****                         break;
 3184              		.loc 1 1122 0
 3185 0312 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3186 0314 974A     		ldr	r2, .L312
 3187 0316 0021     		movs	r1, #0
 3188 0318 D154     		strb	r1, [r2, r3]
1123:..\src/interruptions.c ****                     }
 3189              		.loc 1 1123 0
 3190 031a 3EE0     		b	.L215
 3191              	.L217:
1125:..\src/interruptions.c ****                     break;
 3192              		.loc 1 1125 0
 3193 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3194 031e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3195 0320 9549     		ldr	r1, .L312+4
 3196 0322 1201     		lsls	r2, r2, #4
 3197 0324 0A44     		add	r2, r2, r1
 3198 0326 1168     		ldr	r1, [r2]
 3199 0328 944A     		ldr	r2, .L312+8
 3200 032a 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3201 032e 1046     		mov	r0, r2
 3202 0330 BA69     		ldr	r2, [r7, #24]
 3203 0332 02FB00F2 		mul	r2, r2, r0
 3204 0336 9000     		lsls	r0, r2, #2
 3205 0338 914A     		ldr	r2, .L312+12
 3206 033a B2F8F021 		ldrh	r2, [r2, #496]
 3207 033e C2F58062 		rsb	r2, r2, #1024
 3208 0342 90FBF2F2 		sdiv	r2, r0, r2
 3209 0346 0A44     		add	r2, r2, r1
 3210 0348 8E49     		ldr	r1, .L312+16
 3211 034a 1B01     		lsls	r3, r3, #4
 3212 034c 0B44     		add	r3, r3, r1
 3213 034e 1A60     		str	r2, [r3]
1126:..\src/interruptions.c **** 
 3214              		.loc 1 1126 0
 3215 0350 23E0     		b	.L215
 3216              	.L212:
1130:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3217              		.loc 1 1130 0
 3218 0352 7B69     		ldr	r3, [r7, #20]
 3219 0354 002B     		cmp	r3, #0
 3220 0356 04DA     		bge	.L218
1131:..\src/interruptions.c ****                         break;
 3221              		.loc 1 1131 0
 3222 0358 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3223 035a 864A     		ldr	r2, .L312
 3224 035c 0021     		movs	r1, #0
 3225 035e D154     		strb	r1, [r2, r3]
1132:..\src/interruptions.c ****                     }
 3226              		.loc 1 1132 0
 3227 0360 1BE0     		b	.L215
 3228              	.L218:
1134:..\src/interruptions.c ****                     break;
 3229              		.loc 1 1134 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 79


 3230 0362 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3231 0364 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3232 0366 8449     		ldr	r1, .L312+4
 3233 0368 1201     		lsls	r2, r2, #4
 3234 036a 0A44     		add	r2, r2, r1
 3235 036c 1168     		ldr	r1, [r2]
 3236 036e 834A     		ldr	r2, .L312+8
 3237 0370 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3238 0374 1046     		mov	r0, r2
 3239 0376 7A69     		ldr	r2, [r7, #20]
 3240 0378 02FB00F2 		mul	r2, r2, r0
 3241 037c 9000     		lsls	r0, r2, #2
 3242 037e 804A     		ldr	r2, .L312+12
 3243 0380 B2F8F221 		ldrh	r2, [r2, #498]
 3244 0384 C2F58062 		rsb	r2, r2, #1024
 3245 0388 90FBF2F2 		sdiv	r2, r0, r2
 3246 038c 8A1A     		subs	r2, r1, r2
 3247 038e 7D49     		ldr	r1, .L312+16
 3248 0390 1B01     		lsls	r3, r3, #4
 3249 0392 0B44     		add	r3, r3, r1
 3250 0394 1A60     		str	r2, [r3]
1135:..\src/interruptions.c **** 
 3251              		.loc 1 1135 0
 3252 0396 00E0     		b	.L215
 3253              	.L303:
1117:..\src/interruptions.c **** 
 3254              		.loc 1 1117 0
 3255 0398 00BF     		nop
 3256              	.L215:
1139:..\src/interruptions.c ****             }
1140:..\src/interruptions.c ****             break;
 3257              		.loc 1 1140 0 discriminator 1
 3258 039a 86E0     		b	.L205
 3259              	.L199:
1141:..\src/interruptions.c **** 
1142:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
1143:..\src/interruptions.c ****             g_ref[idx].pos = g_refOld[idx].pos;
 3260              		.loc 1 1143 0
 3261 039c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3262 039e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3263 03a0 7549     		ldr	r1, .L312+4
 3264 03a2 1201     		lsls	r2, r2, #4
 3265 03a4 0A44     		add	r2, r2, r1
 3266 03a6 1268     		ldr	r2, [r2]
 3267 03a8 7649     		ldr	r1, .L312+16
 3268 03aa 1B01     		lsls	r3, r3, #4
 3269 03ac 0B44     		add	r3, r3, r1
 3270 03ae 1A60     		str	r2, [r3]
1144:..\src/interruptions.c ****             switch (current_emg[idx]) {
 3271              		.loc 1 1144 0
 3272 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3273 03b2 704A     		ldr	r2, .L312
 3274 03b4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3275 03b6 012B     		cmp	r3, #1
 3276 03b8 1CD0     		beq	.L220
 3277 03ba 022B     		cmp	r3, #2
 3278 03bc 43D0     		beq	.L221
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 80


 3279 03be 002B     		cmp	r3, #0
 3280 03c0 00D0     		beq	.L222
1145:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
1146:..\src/interruptions.c ****                 case 0:
1147:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1148:..\src/interruptions.c ****                         current_emg[idx] = 1;
1149:..\src/interruptions.c ****                         break;
1150:..\src/interruptions.c ****                     }
1151:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1152:..\src/interruptions.c ****                         current_emg[idx] = 2;
1153:..\src/interruptions.c ****                         break;
1154:..\src/interruptions.c ****                     }
1155:..\src/interruptions.c ****                     break;
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****                 // EMG 1 is first
1158:..\src/interruptions.c ****                 case 1:
1159:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1160:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1161:..\src/interruptions.c ****                         current_emg[idx] = 0;
1162:..\src/interruptions.c ****                         break;
1163:..\src/interruptions.c ****                     }
1164:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1165:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
1166:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
1167:..\src/interruptions.c ****                     
1168:..\src/interruptions.c ****                     break;
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****                 // EMG 2 is first
1171:..\src/interruptions.c ****                 case 2:
1172:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1173:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1174:..\src/interruptions.c ****                         current_emg[idx] = 0;
1175:..\src/interruptions.c ****                         break;
1176:..\src/interruptions.c ****                     }
1177:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1178:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
1179:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
1180:..\src/interruptions.c ****                     }
1181:..\src/interruptions.c ****                     break;
1182:..\src/interruptions.c **** 
1183:..\src/interruptions.c ****                 default:
1184:..\src/interruptions.c ****                     break;
 3281              		.loc 1 1184 0
 3282 03c2 6EE0     		b	.L224
 3283              	.L222:
1147:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3284              		.loc 1 1147 0
 3285 03c4 BB69     		ldr	r3, [r7, #24]
 3286 03c6 002B     		cmp	r3, #0
 3287 03c8 08DD     		ble	.L223
1147:..\src/interruptions.c ****                         current_emg[idx] = 1;
 3288              		.loc 1 1147 0 is_stmt 0 discriminator 1
 3289 03ca BA69     		ldr	r2, [r7, #24]
 3290 03cc 7B69     		ldr	r3, [r7, #20]
 3291 03ce 9A42     		cmp	r2, r3
 3292 03d0 04DD     		ble	.L223
1148:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 81


 3293              		.loc 1 1148 0 is_stmt 1
 3294 03d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3295 03d4 674A     		ldr	r2, .L312
 3296 03d6 0121     		movs	r1, #1
 3297 03d8 D154     		strb	r1, [r2, r3]
1149:..\src/interruptions.c ****                     }
 3298              		.loc 1 1149 0
 3299 03da 62E0     		b	.L224
 3300              	.L223:
1151:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3301              		.loc 1 1151 0
 3302 03dc 7B69     		ldr	r3, [r7, #20]
 3303 03de 002B     		cmp	r3, #0
 3304 03e0 5ADD     		ble	.L304
1151:..\src/interruptions.c ****                         current_emg[idx] = 2;
 3305              		.loc 1 1151 0 is_stmt 0 discriminator 1
 3306 03e2 7A69     		ldr	r2, [r7, #20]
 3307 03e4 BB69     		ldr	r3, [r7, #24]
 3308 03e6 9A42     		cmp	r2, r3
 3309 03e8 56DD     		ble	.L304
1152:..\src/interruptions.c ****                         break;
 3310              		.loc 1 1152 0 is_stmt 1
 3311 03ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3312 03ec 614A     		ldr	r2, .L312
 3313 03ee 0221     		movs	r1, #2
 3314 03f0 D154     		strb	r1, [r2, r3]
1153:..\src/interruptions.c ****                     }
 3315              		.loc 1 1153 0
 3316 03f2 56E0     		b	.L224
 3317              	.L220:
1160:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3318              		.loc 1 1160 0
 3319 03f4 BB69     		ldr	r3, [r7, #24]
 3320 03f6 002B     		cmp	r3, #0
 3321 03f8 07DA     		bge	.L226
1160:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3322              		.loc 1 1160 0 is_stmt 0 discriminator 1
 3323 03fa 7B69     		ldr	r3, [r7, #20]
 3324 03fc 002B     		cmp	r3, #0
 3325 03fe 04DA     		bge	.L226
1161:..\src/interruptions.c ****                         break;
 3326              		.loc 1 1161 0 is_stmt 1
 3327 0400 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3328 0402 5C4A     		ldr	r2, .L312
 3329 0404 0021     		movs	r1, #0
 3330 0406 D154     		strb	r1, [r2, r3]
1162:..\src/interruptions.c ****                     }
 3331              		.loc 1 1162 0
 3332 0408 4BE0     		b	.L224
 3333              	.L226:
1165:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos + (err_emg_1 * g_mem.emg.emg_speed << 2)
 3334              		.loc 1 1165 0
 3335 040a BB69     		ldr	r3, [r7, #24]
 3336 040c 002B     		cmp	r3, #0
 3337 040e 45DD     		ble	.L305
1166:..\src/interruptions.c ****                     
 3338              		.loc 1 1166 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 82


 3339 0410 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3340 0412 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3341 0414 5849     		ldr	r1, .L312+4
 3342 0416 1201     		lsls	r2, r2, #4
 3343 0418 0A44     		add	r2, r2, r1
 3344 041a 1168     		ldr	r1, [r2]
 3345 041c 574A     		ldr	r2, .L312+8
 3346 041e 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3347 0422 1046     		mov	r0, r2
 3348 0424 BA69     		ldr	r2, [r7, #24]
 3349 0426 02FB00F2 		mul	r2, r2, r0
 3350 042a 9000     		lsls	r0, r2, #2
 3351 042c 544A     		ldr	r2, .L312+12
 3352 042e B2F8F021 		ldrh	r2, [r2, #496]
 3353 0432 C2F58062 		rsb	r2, r2, #1024
 3354 0436 90FBF2F2 		sdiv	r2, r0, r2
 3355 043a 0A44     		add	r2, r2, r1
 3356 043c 5149     		ldr	r1, .L312+16
 3357 043e 1B01     		lsls	r3, r3, #4
 3358 0440 0B44     		add	r3, r3, r1
 3359 0442 1A60     		str	r2, [r3]
1168:..\src/interruptions.c **** 
 3360              		.loc 1 1168 0
 3361 0444 2AE0     		b	.L305
 3362              	.L221:
1173:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3363              		.loc 1 1173 0
 3364 0446 BB69     		ldr	r3, [r7, #24]
 3365 0448 002B     		cmp	r3, #0
 3366 044a 07DA     		bge	.L228
1173:..\src/interruptions.c ****                         current_emg[idx] = 0;
 3367              		.loc 1 1173 0 is_stmt 0 discriminator 1
 3368 044c 7B69     		ldr	r3, [r7, #20]
 3369 044e 002B     		cmp	r3, #0
 3370 0450 04DA     		bge	.L228
1174:..\src/interruptions.c ****                         break;
 3371              		.loc 1 1174 0 is_stmt 1
 3372 0452 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3373 0454 474A     		ldr	r2, .L312
 3374 0456 0021     		movs	r1, #0
 3375 0458 D154     		strb	r1, [r2, r3]
1175:..\src/interruptions.c ****                     }
 3376              		.loc 1 1175 0
 3377 045a 22E0     		b	.L224
 3378              	.L228:
1178:..\src/interruptions.c ****                         g_ref[idx].pos = g_refOld[idx].pos - (err_emg_2 * c_mem.emg.emg_speed << 2)
 3379              		.loc 1 1178 0
 3380 045c 7B69     		ldr	r3, [r7, #20]
 3381 045e 002B     		cmp	r3, #0
 3382 0460 1EDD     		ble	.L306
1179:..\src/interruptions.c ****                     }
 3383              		.loc 1 1179 0
 3384 0462 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3385 0464 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3386 0466 4449     		ldr	r1, .L312+4
 3387 0468 1201     		lsls	r2, r2, #4
 3388 046a 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 83


 3389 046c 1168     		ldr	r1, [r2]
 3390 046e 444A     		ldr	r2, .L312+12
 3391 0470 92F8FC21 		ldrb	r2, [r2, #508]	@ zero_extendqisi2
 3392 0474 1046     		mov	r0, r2
 3393 0476 7A69     		ldr	r2, [r7, #20]
 3394 0478 02FB00F2 		mul	r2, r2, r0
 3395 047c 9000     		lsls	r0, r2, #2
 3396 047e 404A     		ldr	r2, .L312+12
 3397 0480 B2F8F221 		ldrh	r2, [r2, #498]
 3398 0484 C2F58062 		rsb	r2, r2, #1024
 3399 0488 90FBF2F2 		sdiv	r2, r0, r2
 3400 048c 8A1A     		subs	r2, r1, r2
 3401 048e 3D49     		ldr	r1, .L312+16
 3402 0490 1B01     		lsls	r3, r3, #4
 3403 0492 0B44     		add	r3, r3, r1
 3404 0494 1A60     		str	r2, [r3]
1181:..\src/interruptions.c **** 
 3405              		.loc 1 1181 0
 3406 0496 03E0     		b	.L306
 3407              	.L304:
1155:..\src/interruptions.c **** 
 3408              		.loc 1 1155 0
 3409 0498 00BF     		nop
 3410 049a 06E0     		b	.L205
 3411              	.L305:
1168:..\src/interruptions.c **** 
 3412              		.loc 1 1168 0
 3413 049c 00BF     		nop
 3414 049e 04E0     		b	.L205
 3415              	.L306:
1181:..\src/interruptions.c **** 
 3416              		.loc 1 1181 0
 3417 04a0 00BF     		nop
 3418              	.L224:
1185:..\src/interruptions.c ****             }
1186:..\src/interruptions.c ****             break;
 3419              		.loc 1 1186 0 discriminator 3
 3420 04a2 02E0     		b	.L205
 3421              	.L301:
1187:..\src/interruptions.c **** 
1188:..\src/interruptions.c ****         default:
1189:..\src/interruptions.c ****             break;
 3422              		.loc 1 1189 0
 3423 04a4 00BF     		nop
 3424 04a6 00E0     		b	.L205
 3425              	.L302:
1102:..\src/interruptions.c **** 
 3426              		.loc 1 1102 0
 3427 04a8 00BF     		nop
 3428              	.L205:
1190:..\src/interruptions.c ****     }
1191:..\src/interruptions.c **** 
1192:..\src/interruptions.c ****     // Position limit saturation
1193:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 3429              		.loc 1 1193 0
 3430 04aa 3B6D     		ldr	r3, [r7, #80]
 3431 04ac 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 84


 3432 04b0 002B     		cmp	r3, #0
 3433 04b2 1FD0     		beq	.L230
1194:..\src/interruptions.c ****         if (g_ref[idx].pos < MOT->pos_lim_inf) 
 3434              		.loc 1 1194 0
 3435 04b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3436 04b6 334A     		ldr	r2, .L312+16
 3437 04b8 1B01     		lsls	r3, r3, #4
 3438 04ba 1344     		add	r3, r3, r2
 3439 04bc 1A68     		ldr	r2, [r3]
 3440 04be 3B6D     		ldr	r3, [r7, #80]
 3441 04c0 5B6B     		ldr	r3, [r3, #52]
 3442 04c2 9A42     		cmp	r2, r3
 3443 04c4 06DA     		bge	.L231
1195:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_inf;
 3444              		.loc 1 1195 0
 3445 04c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3446 04c8 3A6D     		ldr	r2, [r7, #80]
 3447 04ca 526B     		ldr	r2, [r2, #52]
 3448 04cc 2D49     		ldr	r1, .L312+16
 3449 04ce 1B01     		lsls	r3, r3, #4
 3450 04d0 0B44     		add	r3, r3, r1
 3451 04d2 1A60     		str	r2, [r3]
 3452              	.L231:
1196:..\src/interruptions.c ****         if (g_ref[idx].pos > MOT->pos_lim_sup) 
 3453              		.loc 1 1196 0
 3454 04d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3455 04d6 2B4A     		ldr	r2, .L312+16
 3456 04d8 1B01     		lsls	r3, r3, #4
 3457 04da 1344     		add	r3, r3, r2
 3458 04dc 1A68     		ldr	r2, [r3]
 3459 04de 3B6D     		ldr	r3, [r7, #80]
 3460 04e0 9B6B     		ldr	r3, [r3, #56]
 3461 04e2 9A42     		cmp	r2, r3
 3462 04e4 06DD     		ble	.L230
1197:..\src/interruptions.c ****             g_ref[idx].pos = MOT->pos_lim_sup;
 3463              		.loc 1 1197 0
 3464 04e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3465 04e8 3A6D     		ldr	r2, [r7, #80]
 3466 04ea 926B     		ldr	r2, [r2, #56]
 3467 04ec 2549     		ldr	r1, .L312+16
 3468 04ee 1B01     		lsls	r3, r3, #4
 3469 04f0 0B44     		add	r3, r3, r1
 3470 04f2 1A60     		str	r2, [r3]
 3471              	.L230:
1198:..\src/interruptions.c ****     }
1199:..\src/interruptions.c ****     
1200:..\src/interruptions.c ****     // SAFETY
1201:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 3472              		.loc 1 1201 0
 3473 04f4 244B     		ldr	r3, .L312+20
 3474 04f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3475 04f8 012B     		cmp	r3, #1
 3476 04fa 05D1     		bne	.L232
1202:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
1203:..\src/interruptions.c ****         g_ref[idx].pos = 0;
 3477              		.loc 1 1203 0
 3478 04fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 85


 3479 04fe 214A     		ldr	r2, .L312+16
 3480 0500 1B01     		lsls	r3, r3, #4
 3481 0502 1344     		add	r3, r3, r2
 3482 0504 0022     		movs	r2, #0
 3483 0506 1A60     		str	r2, [r3]
 3484              	.L232:
1204:..\src/interruptions.c ****     }        
1205:..\src/interruptions.c **** 
1206:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3485              		.loc 1 1206 0
 3486 0508 3B6D     		ldr	r3, [r7, #80]
 3487 050a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3488 050e 032B     		cmp	r3, #3
 3489 0510 00F24F82 		bhi	.L233
 3490 0514 01A2     		adr	r2, .L235
 3491 0516 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3492 051a 00BF     		.p2align 2
 3493              	.L235:
 3494 051c 33070000 		.word	.L234+1
 3495 0520 6B090000 		.word	.L236+1
 3496 0524 39080000 		.word	.L237+1
 3497 0528 2D050000 		.word	.L238+1
 3498              		.p2align 1
 3499              	.L238:
1207:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1208:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1209:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3500              		.loc 1 1209 0
 3501 052c 154B     		ldr	r3, .L312+16
 3502 052e 1A68     		ldr	r2, [r3]
 3503 0530 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3504 0534 1549     		ldr	r1, .L312+24
 3505 0536 3420     		movs	r0, #52
 3506 0538 00FB03F3 		mul	r3, r0, r3
 3507 053c 0B44     		add	r3, r3, r1
 3508 053e 1B68     		ldr	r3, [r3]
 3509 0540 D31A     		subs	r3, r2, r3
 3510 0542 3B61     		str	r3, [r7, #16]
1210:..\src/interruptions.c **** 
1211:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3511              		.loc 1 1211 0
 3512 0544 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3513 0546 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3514 0548 1149     		ldr	r1, .L312+28
 3515 054a 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3516 054e 3A69     		ldr	r2, [r7, #16]
 3517 0550 0A44     		add	r2, r2, r1
 3518 0552 0F49     		ldr	r1, .L312+28
 3519 0554 41F82320 		str	r2, [r1, r3, lsl #2]
1212:..\src/interruptions.c **** 
1213:..\src/interruptions.c ****             // error_sum saturation
1214:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3520              		.loc 1 1214 0
 3521 0558 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3522 055a 0D4A     		ldr	r2, .L312+28
 3523 055c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3524 0560 0C4A     		ldr	r2, .L312+32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 86


 3525 0562 9342     		cmp	r3, r2
 3526 0564 18DD     		ble	.L239
1215:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3527              		.loc 1 1215 0
 3528 0566 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3529 0568 094A     		ldr	r2, .L312+28
 3530 056a 0A49     		ldr	r1, .L312+32
 3531 056c 42F82310 		str	r1, [r2, r3, lsl #2]
 3532 0570 1EE0     		b	.L240
 3533              	.L313:
 3534 0572 00BF     		.align	2
 3535              	.L312:
 3536 0574 AC000000 		.word	current_emg.10471
 3537 0578 00000000 		.word	g_refOld
 3538 057c 00000000 		.word	g_mem
 3539 0580 00000000 		.word	c_mem
 3540 0584 00000000 		.word	g_ref
 3541 0588 00000000 		.word	battery_low_SoC
 3542 058c 00000000 		.word	g_meas
 3543 0590 B0000000 		.word	pos_error_sum.10464
 3544 0594 80F0FA02 		.word	50000000
 3545              	.L239:
1216:..\src/interruptions.c ****             else {
1217:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3546              		.loc 1 1217 0
 3547 0598 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3548 059a 9C4A     		ldr	r2, .L314
 3549 059c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3550 05a0 9B4A     		ldr	r2, .L314+4
 3551 05a2 9342     		cmp	r3, r2
 3552 05a4 04DA     		bge	.L240
1218:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3553              		.loc 1 1218 0
 3554 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3555 05a8 984A     		ldr	r2, .L314
 3556 05aa 9949     		ldr	r1, .L314+4
 3557 05ac 42F82310 		str	r1, [r2, r3, lsl #2]
 3558              	.L240:
1219:..\src/interruptions.c ****             }
1220:..\src/interruptions.c ****             
1221:..\src/interruptions.c ****             // ------ position PID control ------
1222:..\src/interruptions.c **** 
1223:..\src/interruptions.c ****             i_ref = 0;
 3559              		.loc 1 1223 0
 3560 05b0 0023     		movs	r3, #0
 3561 05b2 BB65     		str	r3, [r7, #88]
1224:..\src/interruptions.c ****             
1225:..\src/interruptions.c ****             // Proportional
1226:..\src/interruptions.c ****             if (k_p_dl != 0)
 3562              		.loc 1 1226 0
 3563 05b4 3B6B     		ldr	r3, [r7, #48]
 3564 05b6 002B     		cmp	r3, #0
 3565 05b8 07D0     		beq	.L241
1227:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3566              		.loc 1 1227 0
 3567 05ba 3B6B     		ldr	r3, [r7, #48]
 3568 05bc 3A69     		ldr	r2, [r7, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 87


 3569 05be 02FB03F3 		mul	r3, r2, r3
 3570 05c2 1B14     		asrs	r3, r3, #16
 3571 05c4 BA6D     		ldr	r2, [r7, #88]
 3572 05c6 1344     		add	r3, r3, r2
 3573 05c8 BB65     		str	r3, [r7, #88]
 3574              	.L241:
1228:..\src/interruptions.c **** 
1229:..\src/interruptions.c ****             // Integral
1230:..\src/interruptions.c ****             if (k_i_dl != 0)
 3575              		.loc 1 1230 0
 3576 05ca FB6A     		ldr	r3, [r7, #44]
 3577 05cc 002B     		cmp	r3, #0
 3578 05ce 0AD0     		beq	.L242
1231:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3579              		.loc 1 1231 0
 3580 05d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3581 05d2 8E4A     		ldr	r2, .L314
 3582 05d4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3583 05d8 FA6A     		ldr	r2, [r7, #44]
 3584 05da 02FB03F3 		mul	r3, r2, r3
 3585 05de 1B14     		asrs	r3, r3, #16
 3586 05e0 BA6D     		ldr	r2, [r7, #88]
 3587 05e2 1344     		add	r3, r3, r2
 3588 05e4 BB65     		str	r3, [r7, #88]
 3589              	.L242:
1232:..\src/interruptions.c **** 
1233:..\src/interruptions.c ****             // Derivative
1234:..\src/interruptions.c ****             if (k_d_dl != 0)
 3590              		.loc 1 1234 0
 3591 05e6 BB6A     		ldr	r3, [r7, #40]
 3592 05e8 002B     		cmp	r3, #0
 3593 05ea 0CD0     		beq	.L243
1235:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3594              		.loc 1 1235 0
 3595 05ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3596 05ee 894A     		ldr	r2, .L314+8
 3597 05f0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3598 05f4 3A69     		ldr	r2, [r7, #16]
 3599 05f6 D31A     		subs	r3, r2, r3
 3600 05f8 BA6A     		ldr	r2, [r7, #40]
 3601 05fa 02FB03F3 		mul	r3, r2, r3
 3602 05fe 1B14     		asrs	r3, r3, #16
 3603 0600 BA6D     		ldr	r2, [r7, #88]
 3604 0602 1344     		add	r3, r3, r2
 3605 0604 BB65     		str	r3, [r7, #88]
 3606              	.L243:
1236:..\src/interruptions.c ****                         
1237:..\src/interruptions.c ****             // Update previous position
1238:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3607              		.loc 1 1238 0
 3608 0606 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3609 0608 8249     		ldr	r1, .L314+8
 3610 060a 3A69     		ldr	r2, [r7, #16]
 3611 060c 41F82320 		str	r2, [r1, r3, lsl #2]
1239:..\src/interruptions.c **** 
1240:..\src/interruptions.c ****             // motor direction depends on i_ref
1241:..\src/interruptions.c ****             if (i_ref >= 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 88


 3612              		.loc 1 1241 0
 3613 0610 BB6D     		ldr	r3, [r7, #88]
 3614 0612 002B     		cmp	r3, #0
 3615 0614 04DB     		blt	.L244
1242:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3616              		.loc 1 1242 0
 3617 0616 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3618 0618 7F4A     		ldr	r2, .L314+12
 3619 061a 0121     		movs	r1, #1
 3620 061c D154     		strb	r1, [r2, r3]
 3621 061e 03E0     		b	.L245
 3622              	.L244:
1243:..\src/interruptions.c ****             else
1244:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3623              		.loc 1 1244 0
 3624 0620 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3625 0622 7D4A     		ldr	r2, .L314+12
 3626 0624 0021     		movs	r1, #0
 3627 0626 D154     		strb	r1, [r2, r3]
 3628              	.L245:
1245:..\src/interruptions.c **** 
1246:..\src/interruptions.c ****             // saturate max current
1247:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3629              		.loc 1 1247 0
 3630 0628 3B6D     		ldr	r3, [r7, #80]
 3631 062a B3F95C30 		ldrsh	r3, [r3, #92]
 3632 062e 1A46     		mov	r2, r3
 3633 0630 BB6D     		ldr	r3, [r7, #88]
 3634 0632 9A42     		cmp	r2, r3
 3635 0634 04DA     		bge	.L246
1248:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3636              		.loc 1 1248 0
 3637 0636 3B6D     		ldr	r3, [r7, #80]
 3638 0638 B3F95C30 		ldrsh	r3, [r3, #92]
 3639 063c BB65     		str	r3, [r7, #88]
 3640 063e 0BE0     		b	.L247
 3641              	.L246:
1249:..\src/interruptions.c ****             else {
1250:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3642              		.loc 1 1250 0
 3643 0640 3B6D     		ldr	r3, [r7, #80]
 3644 0642 B3F95C30 		ldrsh	r3, [r3, #92]
 3645 0646 5A42     		negs	r2, r3
 3646 0648 BB6D     		ldr	r3, [r7, #88]
 3647 064a 9A42     		cmp	r2, r3
 3648 064c 04DD     		ble	.L247
1251:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3649              		.loc 1 1251 0
 3650 064e 3B6D     		ldr	r3, [r7, #80]
 3651 0650 B3F95C30 		ldrsh	r3, [r3, #92]
 3652 0654 5B42     		negs	r3, r3
 3653 0656 BB65     		str	r3, [r7, #88]
 3654              	.L247:
1252:..\src/interruptions.c ****         	}
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****             // current error and curr error sum
1255:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 89


 3655              		.loc 1 1255 0
 3656 0658 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3657 065c 6F4A     		ldr	r2, .L314+16
 3658 065e 3421     		movs	r1, #52
 3659 0660 01FB03F3 		mul	r3, r1, r3
 3660 0664 1344     		add	r3, r3, r2
 3661 0666 0C33     		adds	r3, r3, #12
 3662 0668 1B68     		ldr	r3, [r3]
 3663 066a BA6D     		ldr	r2, [r7, #88]
 3664 066c D31A     		subs	r3, r2, r3
 3665 066e FB60     		str	r3, [r7, #12]
1256:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3666              		.loc 1 1256 0
 3667 0670 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3668 0672 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3669 0674 6A49     		ldr	r1, .L314+20
 3670 0676 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3671 067a FA68     		ldr	r2, [r7, #12]
 3672 067c 0A44     		add	r2, r2, r1
 3673 067e 6849     		ldr	r1, .L314+20
 3674 0680 41F82320 		str	r2, [r1, r3, lsl #2]
1257:..\src/interruptions.c ****             
1258:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3675              		.loc 1 1258 0
 3676 0684 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3677 0686 664A     		ldr	r2, .L314+20
 3678 0688 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3679 068c 654A     		ldr	r2, .L314+24
 3680 068e 9342     		cmp	r3, r2
 3681 0690 05DD     		ble	.L248
1259:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3682              		.loc 1 1259 0
 3683 0692 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3684 0694 624A     		ldr	r2, .L314+20
 3685 0696 6349     		ldr	r1, .L314+24
 3686 0698 42F82310 		str	r1, [r2, r3, lsl #2]
 3687 069c 0BE0     		b	.L249
 3688              	.L248:
1260:..\src/interruptions.c ****             else {
1261:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3689              		.loc 1 1261 0
 3690 069e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3691 06a0 5F4A     		ldr	r2, .L314+20
 3692 06a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3693 06a6 604A     		ldr	r2, .L314+28
 3694 06a8 9342     		cmp	r3, r2
 3695 06aa 04DA     		bge	.L249
1262:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3696              		.loc 1 1262 0
 3697 06ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3698 06ae 5C4A     		ldr	r2, .L314+20
 3699 06b0 5D49     		ldr	r1, .L314+28
 3700 06b2 42F82310 		str	r1, [r2, r3, lsl #2]
 3701              	.L249:
1263:..\src/interruptions.c ****             }
1264:..\src/interruptions.c **** 
1265:..\src/interruptions.c ****             // ----- current PID control -----
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 90


1266:..\src/interruptions.c **** 
1267:..\src/interruptions.c ****             pwm_input = 0;
 3702              		.loc 1 1267 0
 3703 06b6 0023     		movs	r3, #0
 3704 06b8 FB65     		str	r3, [r7, #92]
1268:..\src/interruptions.c **** 
1269:..\src/interruptions.c ****             // Proportional
1270:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3705              		.loc 1 1270 0
 3706 06ba 7B6A     		ldr	r3, [r7, #36]
 3707 06bc 002B     		cmp	r3, #0
 3708 06be 07D0     		beq	.L250
1271:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3709              		.loc 1 1271 0
 3710 06c0 7B6A     		ldr	r3, [r7, #36]
 3711 06c2 FA68     		ldr	r2, [r7, #12]
 3712 06c4 02FB03F3 		mul	r3, r2, r3
 3713 06c8 1B14     		asrs	r3, r3, #16
 3714 06ca FA6D     		ldr	r2, [r7, #92]
 3715 06cc 1344     		add	r3, r3, r2
 3716 06ce FB65     		str	r3, [r7, #92]
 3717              	.L250:
1272:..\src/interruptions.c **** 
1273:..\src/interruptions.c ****             // Integral
1274:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3718              		.loc 1 1274 0
 3719 06d0 3B6A     		ldr	r3, [r7, #32]
 3720 06d2 002B     		cmp	r3, #0
 3721 06d4 0AD0     		beq	.L251
1275:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3722              		.loc 1 1275 0
 3723 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3724 06d8 514A     		ldr	r2, .L314+20
 3725 06da 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3726 06de 3A6A     		ldr	r2, [r7, #32]
 3727 06e0 02FB03F3 		mul	r3, r2, r3
 3728 06e4 1B14     		asrs	r3, r3, #16
 3729 06e6 FA6D     		ldr	r2, [r7, #92]
 3730 06e8 1344     		add	r3, r3, r2
 3731 06ea FB65     		str	r3, [r7, #92]
 3732              	.L251:
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****             // Derivative
1278:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3733              		.loc 1 1278 0
 3734 06ec FB69     		ldr	r3, [r7, #28]
 3735 06ee 002B     		cmp	r3, #0
 3736 06f0 0CD0     		beq	.L252
1279:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3737              		.loc 1 1279 0
 3738 06f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3739 06f4 4D4A     		ldr	r2, .L314+32
 3740 06f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3741 06fa FA68     		ldr	r2, [r7, #12]
 3742 06fc D31A     		subs	r3, r2, r3
 3743 06fe FA69     		ldr	r2, [r7, #28]
 3744 0700 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 91


 3745 0704 1B14     		asrs	r3, r3, #16
 3746 0706 FA6D     		ldr	r2, [r7, #92]
 3747 0708 1344     		add	r3, r3, r2
 3748 070a FB65     		str	r3, [r7, #92]
 3749              	.L252:
1280:..\src/interruptions.c **** 
1281:..\src/interruptions.c ****             // pwm_input saturation
1282:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3750              		.loc 1 1282 0
 3751 070c FB6D     		ldr	r3, [r7, #92]
 3752 070e 13F1640F 		cmn	r3, #100
 3753 0712 03DA     		bge	.L253
1283:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3754              		.loc 1 1283 0
 3755 0714 6FF06303 		mvn	r3, #99
 3756 0718 FB65     		str	r3, [r7, #92]
 3757 071a 04E0     		b	.L254
 3758              	.L253:
1284:..\src/interruptions.c ****             else {
1285:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3759              		.loc 1 1285 0
 3760 071c FB6D     		ldr	r3, [r7, #92]
 3761 071e 642B     		cmp	r3, #100
 3762 0720 01DD     		ble	.L254
1286:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3763              		.loc 1 1286 0
 3764 0722 6423     		movs	r3, #100
 3765 0724 FB65     		str	r3, [r7, #92]
 3766              	.L254:
1287:..\src/interruptions.c ****             }
1288:..\src/interruptions.c **** 
1289:..\src/interruptions.c ****             // Update previous current
1290:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3767              		.loc 1 1290 0
 3768 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3769 0728 4049     		ldr	r1, .L314+32
 3770 072a FA68     		ldr	r2, [r7, #12]
 3771 072c 41F82320 		str	r2, [r1, r3, lsl #2]
1291:..\src/interruptions.c **** 
1292:..\src/interruptions.c ****         break;
 3772              		.loc 1 1292 0
 3773 0730 3FE1     		b	.L233
 3774              	.L234:
1293:..\src/interruptions.c **** 
1294:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1295:..\src/interruptions.c ****         case CONTROL_ANGLE:
1296:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 3775              		.loc 1 1296 0
 3776 0732 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3777 0734 3E4A     		ldr	r2, .L314+36
 3778 0736 1B01     		lsls	r3, r3, #4
 3779 0738 1344     		add	r3, r3, r2
 3780 073a 1A68     		ldr	r2, [r3]
 3781 073c 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3782 0740 3649     		ldr	r1, .L314+16
 3783 0742 3420     		movs	r0, #52
 3784 0744 00FB03F3 		mul	r3, r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 92


 3785 0748 0B44     		add	r3, r3, r1
 3786 074a 1B68     		ldr	r3, [r3]
 3787 074c D31A     		subs	r3, r2, r3
 3788 074e 3B61     		str	r3, [r7, #16]
1297:..\src/interruptions.c **** 
1298:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3789              		.loc 1 1298 0
 3790 0750 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3791 0752 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3792 0754 2D49     		ldr	r1, .L314
 3793 0756 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3794 075a 3A69     		ldr	r2, [r7, #16]
 3795 075c 0A44     		add	r2, r2, r1
 3796 075e 2B49     		ldr	r1, .L314
 3797 0760 41F82320 		str	r2, [r1, r3, lsl #2]
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****             // anti-windup (for integral control)
1301:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 3798              		.loc 1 1301 0
 3799 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3800 0766 294A     		ldr	r2, .L314
 3801 0768 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3802 076c B3F57A7F 		cmp	r3, #1000
 3803 0770 06DD     		ble	.L255
1302:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 3804              		.loc 1 1302 0
 3805 0772 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3806 0774 254A     		ldr	r2, .L314
 3807 0776 4FF47A71 		mov	r1, #1000
 3808 077a 42F82310 		str	r1, [r2, r3, lsl #2]
 3809 077e 0BE0     		b	.L256
 3810              	.L255:
1303:..\src/interruptions.c ****             else {
1304:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 3811              		.loc 1 1304 0
 3812 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3813 0782 224A     		ldr	r2, .L314
 3814 0784 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3815 0788 13F57A7F 		cmn	r3, #1000
 3816 078c 04DA     		bge	.L256
1305:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 3817              		.loc 1 1305 0
 3818 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3819 0790 1E4A     		ldr	r2, .L314
 3820 0792 2849     		ldr	r1, .L314+40
 3821 0794 42F82310 		str	r1, [r2, r3, lsl #2]
 3822              	.L256:
1306:..\src/interruptions.c ****             }
1307:..\src/interruptions.c **** 
1308:..\src/interruptions.c ****             // Proportional
1309:..\src/interruptions.c ****             if (k_p != 0) 
 3823              		.loc 1 1309 0
 3824 0798 BB6C     		ldr	r3, [r7, #72]
 3825 079a 002B     		cmp	r3, #0
 3826 079c 05D0     		beq	.L257
1310:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3827              		.loc 1 1310 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 93


 3828 079e BB6C     		ldr	r3, [r7, #72]
 3829 07a0 3A69     		ldr	r2, [r7, #16]
 3830 07a2 02FB03F3 		mul	r3, r2, r3
 3831 07a6 1B14     		asrs	r3, r3, #16
 3832 07a8 FB65     		str	r3, [r7, #92]
 3833              	.L257:
1311:..\src/interruptions.c ****             
1312:..\src/interruptions.c **** 
1313:..\src/interruptions.c ****             // Integral
1314:..\src/interruptions.c ****             if (k_i != 0) 
 3834              		.loc 1 1314 0
 3835 07aa 7B6C     		ldr	r3, [r7, #68]
 3836 07ac 002B     		cmp	r3, #0
 3837 07ae 0AD0     		beq	.L258
1315:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 3838              		.loc 1 1315 0
 3839 07b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3840 07b2 164A     		ldr	r2, .L314
 3841 07b4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3842 07b8 7A6C     		ldr	r2, [r7, #68]
 3843 07ba 02FB03F3 		mul	r3, r2, r3
 3844 07be 1B14     		asrs	r3, r3, #16
 3845 07c0 FA6D     		ldr	r2, [r7, #92]
 3846 07c2 1344     		add	r3, r3, r2
 3847 07c4 FB65     		str	r3, [r7, #92]
 3848              	.L258:
1316:..\src/interruptions.c ****             
1317:..\src/interruptions.c **** 
1318:..\src/interruptions.c ****             // Derivative
1319:..\src/interruptions.c ****             if (k_d != 0) 
 3849              		.loc 1 1319 0
 3850 07c6 3B6C     		ldr	r3, [r7, #64]
 3851 07c8 002B     		cmp	r3, #0
 3852 07ca 0CD0     		beq	.L259
1320:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 3853              		.loc 1 1320 0
 3854 07cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3855 07ce 114A     		ldr	r2, .L314+8
 3856 07d0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3857 07d4 3A69     		ldr	r2, [r7, #16]
 3858 07d6 D31A     		subs	r3, r2, r3
 3859 07d8 3A6C     		ldr	r2, [r7, #64]
 3860 07da 02FB03F3 		mul	r3, r2, r3
 3861 07de 1B14     		asrs	r3, r3, #16
 3862 07e0 FA6D     		ldr	r2, [r7, #92]
 3863 07e2 1344     		add	r3, r3, r2
 3864 07e4 FB65     		str	r3, [r7, #92]
 3865              	.L259:
1321:..\src/interruptions.c ****             
1322:..\src/interruptions.c **** 
1323:..\src/interruptions.c ****             // Update measure
1324:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3866              		.loc 1 1324 0
 3867 07e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3868 07e8 0A49     		ldr	r1, .L314+8
 3869 07ea 3A69     		ldr	r2, [r7, #16]
 3870 07ec 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 94


1325:..\src/interruptions.c **** 
1326:..\src/interruptions.c ****             if (pwm_input > 0)
 3871              		.loc 1 1326 0
 3872 07f0 FB6D     		ldr	r3, [r7, #92]
 3873 07f2 002B     		cmp	r3, #0
 3874 07f4 04DD     		ble	.L260
1327:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3875              		.loc 1 1327 0
 3876 07f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3877 07f8 074A     		ldr	r2, .L314+12
 3878 07fa 0121     		movs	r1, #1
 3879 07fc D154     		strb	r1, [r2, r3]
1328:..\src/interruptions.c ****             else
1329:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1330:..\src/interruptions.c **** 
1331:..\src/interruptions.c ****         break;
 3880              		.loc 1 1331 0
 3881 07fe D8E0     		b	.L233
 3882              	.L260:
1329:..\src/interruptions.c **** 
 3883              		.loc 1 1329 0
 3884 0800 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3885 0802 054A     		ldr	r2, .L314+12
 3886 0804 0021     		movs	r1, #0
 3887 0806 D154     		strb	r1, [r2, r3]
 3888              		.loc 1 1331 0
 3889 0808 D3E0     		b	.L233
 3890              	.L315:
 3891 080a 00BF     		.align	2
 3892              	.L314:
 3893 080c B0000000 		.word	pos_error_sum.10464
 3894 0810 800F05FD 		.word	-50000000
 3895 0814 B8000000 		.word	prev_pos_err.10466
 3896 0818 C0000000 		.word	motor_dir.10469
 3897 081c 00000000 		.word	g_meas
 3898 0820 C4000000 		.word	curr_error_sum.10465
 3899 0824 A0860100 		.word	100000
 3900 0828 6079FEFF 		.word	-100000
 3901 082c CC000000 		.word	prev_curr_err.10467
 3902 0830 00000000 		.word	g_ref
 3903 0834 18FCFFFF 		.word	-1000
 3904              	.L237:
1332:..\src/interruptions.c **** 
1333:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1334:..\src/interruptions.c ****         case CONTROL_CURRENT:
1335:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 3905              		.loc 1 1335 0
 3906 0838 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3907 083a 8D4A     		ldr	r2, .L316
 3908 083c 1B01     		lsls	r3, r3, #4
 3909 083e 1344     		add	r3, r3, r2
 3910 0840 0C33     		adds	r3, r3, #12
 3911 0842 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3912 0844 002B     		cmp	r3, #0
 3913 0846 00F0B180 		beq	.L307
 3914              		.loc 1 1335 0 is_stmt 0 discriminator 1
 3915 084a 8A4B     		ldr	r3, .L316+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 95


 3916 084c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3917 084e 002B     		cmp	r3, #0
 3918 0850 00F0AC80 		beq	.L307
1336:..\src/interruptions.c ****                 
1337:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 3919              		.loc 1 1337 0 is_stmt 1
 3920 0854 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3921 0856 864A     		ldr	r2, .L316
 3922 0858 1B01     		lsls	r3, r3, #4
 3923 085a 1344     		add	r3, r3, r2
 3924 085c 0433     		adds	r3, r3, #4
 3925 085e 1B68     		ldr	r3, [r3]
 3926 0860 BB65     		str	r3, [r7, #88]
1338:..\src/interruptions.c **** 
1339:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 3927              		.loc 1 1339 0
 3928 0862 3B6D     		ldr	r3, [r7, #80]
 3929 0864 B3F95C30 		ldrsh	r3, [r3, #92]
 3930 0868 1A46     		mov	r2, r3
 3931 086a BB6D     		ldr	r3, [r7, #88]
 3932 086c 9A42     		cmp	r2, r3
 3933 086e 04DA     		bge	.L263
1340:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 3934              		.loc 1 1340 0
 3935 0870 3B6D     		ldr	r3, [r7, #80]
 3936 0872 B3F95C30 		ldrsh	r3, [r3, #92]
 3937 0876 BB65     		str	r3, [r7, #88]
 3938 0878 0BE0     		b	.L264
 3939              	.L263:
1341:..\src/interruptions.c ****                 else {
1342:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 3940              		.loc 1 1342 0
 3941 087a 3B6D     		ldr	r3, [r7, #80]
 3942 087c B3F95C30 		ldrsh	r3, [r3, #92]
 3943 0880 5A42     		negs	r2, r3
 3944 0882 BB6D     		ldr	r3, [r7, #88]
 3945 0884 9A42     		cmp	r2, r3
 3946 0886 04DD     		ble	.L264
1343:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 3947              		.loc 1 1343 0
 3948 0888 3B6D     		ldr	r3, [r7, #80]
 3949 088a B3F95C30 		ldrsh	r3, [r3, #92]
 3950 088e 5B42     		negs	r3, r3
 3951 0890 BB65     		str	r3, [r7, #88]
 3952              	.L264:
1344:..\src/interruptions.c ****                 }
1345:..\src/interruptions.c ****                 
1346:..\src/interruptions.c ****                 // current error
1347:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 3953              		.loc 1 1347 0
 3954 0892 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 3955 0896 784A     		ldr	r2, .L316+8
 3956 0898 3421     		movs	r1, #52
 3957 089a 01FB03F3 		mul	r3, r1, r3
 3958 089e 1344     		add	r3, r3, r2
 3959 08a0 0C33     		adds	r3, r3, #12
 3960 08a2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 96


 3961 08a4 BA6D     		ldr	r2, [r7, #88]
 3962 08a6 D31A     		subs	r3, r2, r3
 3963 08a8 FB60     		str	r3, [r7, #12]
1348:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 3964              		.loc 1 1348 0
 3965 08aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3966 08ac FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3967 08ae 7349     		ldr	r1, .L316+12
 3968 08b0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3969 08b4 FA68     		ldr	r2, [r7, #12]
 3970 08b6 0A44     		add	r2, r2, r1
 3971 08b8 7049     		ldr	r1, .L316+12
 3972 08ba 41F82320 		str	r2, [r1, r3, lsl #2]
1349:..\src/interruptions.c ****                 
1350:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3973              		.loc 1 1350 0
 3974 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3975 08c0 6E4A     		ldr	r2, .L316+12
 3976 08c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3977 08c6 6E4A     		ldr	r2, .L316+16
 3978 08c8 9342     		cmp	r3, r2
 3979 08ca 05DD     		ble	.L265
1351:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3980              		.loc 1 1351 0
 3981 08cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3982 08ce 6B4A     		ldr	r2, .L316+12
 3983 08d0 6B49     		ldr	r1, .L316+16
 3984 08d2 42F82310 		str	r1, [r2, r3, lsl #2]
 3985 08d6 0BE0     		b	.L266
 3986              	.L265:
1352:..\src/interruptions.c ****                 else {
1353:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 3987              		.loc 1 1353 0
 3988 08d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3989 08da 684A     		ldr	r2, .L316+12
 3990 08dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3991 08e0 684A     		ldr	r2, .L316+20
 3992 08e2 9342     		cmp	r3, r2
 3993 08e4 04DA     		bge	.L266
1354:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3994              		.loc 1 1354 0
 3995 08e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3996 08e8 644A     		ldr	r2, .L316+12
 3997 08ea 6649     		ldr	r1, .L316+20
 3998 08ec 42F82310 		str	r1, [r2, r3, lsl #2]
 3999              	.L266:
1355:..\src/interruptions.c ****                 }
1356:..\src/interruptions.c **** 
1357:..\src/interruptions.c ****                 pwm_input = 0;
 4000              		.loc 1 1357 0
 4001 08f0 0023     		movs	r3, #0
 4002 08f2 FB65     		str	r3, [r7, #92]
1358:..\src/interruptions.c **** 
1359:..\src/interruptions.c ****                 // Proportional
1360:..\src/interruptions.c ****                 if (k_p_c != 0)
 4003              		.loc 1 1360 0
 4004 08f4 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 97


 4005 08f6 002B     		cmp	r3, #0
 4006 08f8 07D0     		beq	.L267
1361:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4007              		.loc 1 1361 0
 4008 08fa FB6B     		ldr	r3, [r7, #60]
 4009 08fc FA68     		ldr	r2, [r7, #12]
 4010 08fe 02FB03F3 		mul	r3, r2, r3
 4011 0902 1B14     		asrs	r3, r3, #16
 4012 0904 FA6D     		ldr	r2, [r7, #92]
 4013 0906 1344     		add	r3, r3, r2
 4014 0908 FB65     		str	r3, [r7, #92]
 4015              	.L267:
1362:..\src/interruptions.c **** 
1363:..\src/interruptions.c ****                 // Integral
1364:..\src/interruptions.c ****                 if (k_i_c != 0)
 4016              		.loc 1 1364 0
 4017 090a BB6B     		ldr	r3, [r7, #56]
 4018 090c 002B     		cmp	r3, #0
 4019 090e 0AD0     		beq	.L268
1365:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4020              		.loc 1 1365 0
 4021 0910 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4022 0912 5A4A     		ldr	r2, .L316+12
 4023 0914 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4024 0918 BA6B     		ldr	r2, [r7, #56]
 4025 091a 02FB03F3 		mul	r3, r2, r3
 4026 091e 1B14     		asrs	r3, r3, #16
 4027 0920 FA6D     		ldr	r2, [r7, #92]
 4028 0922 1344     		add	r3, r3, r2
 4029 0924 FB65     		str	r3, [r7, #92]
 4030              	.L268:
1366:..\src/interruptions.c **** 
1367:..\src/interruptions.c ****                 // Derivative
1368:..\src/interruptions.c ****                 if (k_d_c != 0)
 4031              		.loc 1 1368 0
 4032 0926 7B6B     		ldr	r3, [r7, #52]
 4033 0928 002B     		cmp	r3, #0
 4034 092a 0CD0     		beq	.L269
1369:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4035              		.loc 1 1369 0
 4036 092c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4037 092e 564A     		ldr	r2, .L316+24
 4038 0930 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4039 0934 FA68     		ldr	r2, [r7, #12]
 4040 0936 D31A     		subs	r3, r2, r3
 4041 0938 7A6B     		ldr	r2, [r7, #52]
 4042 093a 02FB03F3 		mul	r3, r2, r3
 4043 093e 1B14     		asrs	r3, r3, #16
 4044 0940 FA6D     		ldr	r2, [r7, #92]
 4045 0942 1344     		add	r3, r3, r2
 4046 0944 FB65     		str	r3, [r7, #92]
 4047              	.L269:
1370:..\src/interruptions.c ****                 
1371:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4048              		.loc 1 1371 0
 4049 0946 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4050 0948 4F49     		ldr	r1, .L316+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 98


 4051 094a FA68     		ldr	r2, [r7, #12]
 4052 094c 41F82320 		str	r2, [r1, r3, lsl #2]
1372:..\src/interruptions.c ****                 
1373:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4053              		.loc 1 1373 0
 4054 0950 FB6D     		ldr	r3, [r7, #92]
 4055 0952 002B     		cmp	r3, #0
 4056 0954 04DB     		blt	.L270
1374:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4057              		.loc 1 1374 0
 4058 0956 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4059 0958 4C4A     		ldr	r2, .L316+28
 4060 095a 0121     		movs	r1, #1
 4061 095c D154     		strb	r1, [r2, r3]
1375:..\src/interruptions.c ****                 else
1376:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1377:..\src/interruptions.c ****             }
1378:..\src/interruptions.c ****         break;
 4062              		.loc 1 1378 0
 4063 095e 25E0     		b	.L307
 4064              	.L270:
1376:..\src/interruptions.c ****             }
 4065              		.loc 1 1376 0
 4066 0960 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4067 0962 4A4A     		ldr	r2, .L316+28
 4068 0964 0021     		movs	r1, #0
 4069 0966 D154     		strb	r1, [r2, r3]
 4070              		.loc 1 1378 0
 4071 0968 20E0     		b	.L307
 4072              	.L236:
1379:..\src/interruptions.c ****         
1380:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1381:..\src/interruptions.c ****         case CONTROL_PWM:
1382:..\src/interruptions.c **** 
1383:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4073              		.loc 1 1383 0
 4074 096a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4075 096c 404A     		ldr	r2, .L316
 4076 096e 1B01     		lsls	r3, r3, #4
 4077 0970 1344     		add	r3, r3, r2
 4078 0972 0833     		adds	r3, r3, #8
 4079 0974 1B68     		ldr	r3, [r3]
 4080 0976 FB65     		str	r3, [r7, #92]
1384:..\src/interruptions.c **** 
1385:..\src/interruptions.c ****             if (pwm_input > 0) 
 4081              		.loc 1 1385 0
 4082 0978 FB6D     		ldr	r3, [r7, #92]
 4083 097a 002B     		cmp	r3, #0
 4084 097c 04DD     		ble	.L271
1386:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4085              		.loc 1 1386 0
 4086 097e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4087 0980 424A     		ldr	r2, .L316+28
 4088 0982 0121     		movs	r1, #1
 4089 0984 D154     		strb	r1, [r2, r3]
 4090 0986 03E0     		b	.L272
 4091              	.L271:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 99


1387:..\src/interruptions.c ****             else 
1388:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4092              		.loc 1 1388 0
 4093 0988 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4094 098a 404A     		ldr	r2, .L316+28
 4095 098c 0021     		movs	r1, #0
 4096 098e D154     		strb	r1, [r2, r3]
 4097              	.L272:
1389:..\src/interruptions.c ****             
1390:..\src/interruptions.c **** 
1391:..\src/interruptions.c ****             // pwm_input saturation
1392:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4098              		.loc 1 1392 0
 4099 0990 FB6D     		ldr	r3, [r7, #92]
 4100 0992 13F1640F 		cmn	r3, #100
 4101 0996 03DA     		bge	.L273
1393:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4102              		.loc 1 1393 0
 4103 0998 6FF06303 		mvn	r3, #99
 4104 099c FB65     		str	r3, [r7, #92]
1394:..\src/interruptions.c ****             else {
1395:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1396:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1397:..\src/interruptions.c ****         	}
1398:..\src/interruptions.c **** 
1399:..\src/interruptions.c ****         break;
 4105              		.loc 1 1399 0
 4106 099e 07E0     		b	.L308
 4107              	.L273:
1395:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4108              		.loc 1 1395 0
 4109 09a0 FB6D     		ldr	r3, [r7, #92]
 4110 09a2 642B     		cmp	r3, #100
 4111 09a4 04DD     		ble	.L308
1396:..\src/interruptions.c ****         	}
 4112              		.loc 1 1396 0
 4113 09a6 6423     		movs	r3, #100
 4114 09a8 FB65     		str	r3, [r7, #92]
 4115              		.loc 1 1399 0
 4116 09aa 01E0     		b	.L308
 4117              	.L307:
1378:..\src/interruptions.c ****         
 4118              		.loc 1 1378 0
 4119 09ac 00BF     		nop
 4120 09ae 00E0     		b	.L233
 4121              	.L308:
 4122              		.loc 1 1399 0
 4123 09b0 00BF     		nop
 4124              	.L233:
1400:..\src/interruptions.c ****             
1401:..\src/interruptions.c ****     }
1402:..\src/interruptions.c **** 
1403:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1404:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1405:..\src/interruptions.c **** 
1406:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4125              		.loc 1 1406 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 100


 4126 09b2 FB6D     		ldr	r3, [r7, #92]
 4127 09b4 642B     		cmp	r3, #100
 4128 09b6 01DD     		ble	.L275
1407:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4129              		.loc 1 1407 0
 4130 09b8 6423     		movs	r3, #100
 4131 09ba FB65     		str	r3, [r7, #92]
 4132              	.L275:
1408:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4133              		.loc 1 1408 0
 4134 09bc FB6D     		ldr	r3, [r7, #92]
 4135 09be 13F1640F 		cmn	r3, #100
 4136 09c2 02DA     		bge	.L276
1409:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4137              		.loc 1 1409 0
 4138 09c4 6FF06303 		mvn	r3, #99
 4139 09c8 FB65     		str	r3, [r7, #92]
 4140              	.L276:
1410:..\src/interruptions.c **** 
1411:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4141              		.loc 1 1411 0
 4142 09ca 3B6D     		ldr	r3, [r7, #80]
 4143 09cc 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4144 09d0 012B     		cmp	r3, #1
 4145 09d2 0DD0     		beq	.L277
1412:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4146              		.loc 1 1412 0
 4147 09d4 FB6D     		ldr	r3, [r7, #92]
 4148 09d6 9B02     		lsls	r3, r3, #10
 4149 09d8 2D4A     		ldr	r2, .L316+32
 4150 09da 82FB0312 		smull	r1, r2, r2, r3
 4151 09de 5211     		asrs	r2, r2, #5
 4152 09e0 DB17     		asrs	r3, r3, #31
 4153 09e2 D31A     		subs	r3, r2, r3
 4154 09e4 2B4A     		ldr	r2, .L316+36
 4155 09e6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4156 09e8 02FB03F3 		mul	r3, r2, r3
 4157 09ec 9B12     		asrs	r3, r3, #10
 4158 09ee FB65     		str	r3, [r7, #92]
 4159              	.L277:
1413:..\src/interruptions.c ****  
1414:..\src/interruptions.c ****     //// RATE LIMITER ////
1415:..\src/interruptions.c ****        if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4160              		.loc 1 1415 0
 4161 09f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4162 09f2 294A     		ldr	r2, .L316+40
 4163 09f4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4164 09f8 FA6D     		ldr	r2, [r7, #92]
 4165 09fa D31A     		subs	r3, r2, r3
 4166 09fc 3A6D     		ldr	r2, [r7, #80]
 4167 09fe 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4168 0a02 9342     		cmp	r3, r2
 4169 0a04 09DD     		ble	.L278
1416:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4170              		.loc 1 1416 0
 4171 0a06 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4172 0a08 234A     		ldr	r2, .L316+40
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 101


 4173 0a0a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4174 0a0e 3A6D     		ldr	r2, [r7, #80]
 4175 0a10 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4176 0a14 1344     		add	r3, r3, r2
 4177 0a16 FB65     		str	r3, [r7, #92]
 4178 0a18 14E0     		b	.L279
 4179              	.L278:
1417:..\src/interruptions.c ****     }
1418:..\src/interruptions.c ****     else {
1419:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4180              		.loc 1 1419 0
 4181 0a1a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4182 0a1c 1E4A     		ldr	r2, .L316+40
 4183 0a1e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4184 0a22 FA6D     		ldr	r2, [r7, #92]
 4185 0a24 D21A     		subs	r2, r2, r3
 4186 0a26 3B6D     		ldr	r3, [r7, #80]
 4187 0a28 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4188 0a2c 5B42     		negs	r3, r3
 4189 0a2e 9A42     		cmp	r2, r3
 4190 0a30 08DA     		bge	.L279
1420:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4191              		.loc 1 1420 0
 4192 0a32 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4193 0a34 184A     		ldr	r2, .L316+40
 4194 0a36 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4195 0a3a 3A6D     		ldr	r2, [r7, #80]
 4196 0a3c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4197 0a40 9B1A     		subs	r3, r3, r2
 4198 0a42 FB65     		str	r3, [r7, #92]
 4199              	.L279:
1421:..\src/interruptions.c ****     }
1422:..\src/interruptions.c ****     
1423:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4200              		.loc 1 1423 0
 4201 0a44 FB6D     		ldr	r3, [r7, #92]
 4202 0a46 642B     		cmp	r3, #100
 4203 0a48 01DD     		ble	.L280
1424:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4204              		.loc 1 1424 0
 4205 0a4a 6423     		movs	r3, #100
 4206 0a4c FB65     		str	r3, [r7, #92]
 4207              	.L280:
1425:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4208              		.loc 1 1425 0
 4209 0a4e FB6D     		ldr	r3, [r7, #92]
 4210 0a50 13F1640F 		cmn	r3, #100
 4211 0a54 02DA     		bge	.L281
1426:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4212              		.loc 1 1426 0
 4213 0a56 6FF06303 		mvn	r3, #99
 4214 0a5a FB65     		str	r3, [r7, #92]
 4215              	.L281:
1427:..\src/interruptions.c ****     
1428:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4216              		.loc 1 1428 0
 4217 0a5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 102


 4218 0a5e 0E49     		ldr	r1, .L316+40
 4219 0a60 FA6D     		ldr	r2, [r7, #92]
 4220 0a62 41F82320 		str	r2, [r1, r3, lsl #2]
1429:..\src/interruptions.c **** 	
1430:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4221              		.loc 1 1430 0
 4222 0a66 FB6D     		ldr	r3, [r7, #92]
 4223 0a68 002B     		cmp	r3, #0
 4224 0a6a 17DB     		blt	.L282
 4225              		.loc 1 1430 0 is_stmt 0 discriminator 1
 4226 0a6c 0122     		movs	r2, #1
 4227 0a6e 17E0     		b	.L283
 4228              	.L317:
 4229              		.align	2
 4230              	.L316:
 4231 0a70 00000000 		.word	g_ref
 4232 0a74 00000000 		.word	tension_valid
 4233 0a78 00000000 		.word	g_meas
 4234 0a7c C4000000 		.word	curr_error_sum.10465
 4235 0a80 A0860100 		.word	100000
 4236 0a84 6079FEFF 		.word	-100000
 4237 0a88 CC000000 		.word	prev_curr_err.10467
 4238 0a8c C0000000 		.word	motor_dir.10469
 4239 0a90 1F85EB51 		.word	1374389535
 4240 0a94 00000000 		.word	dev_pwm_limit
 4241 0a98 D4000000 		.word	prev_pwm.10468
 4242              	.L282:
 4243              		.loc 1 1430 0 discriminator 2
 4244 0a9c 4FF0FF32 		mov	r2, #-1
 4245              	.L283:
 4246              		.loc 1 1430 0 discriminator 4
 4247 0aa0 834B     		ldr	r3, .L318
 4248 0aa2 1A70     		strb	r2, [r3]
1431:..\src/interruptions.c ****     
1432:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4249              		.loc 1 1432 0 is_stmt 1 discriminator 4
 4250 0aa4 3B6D     		ldr	r3, [r7, #80]
 4251 0aa6 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4252 0aaa 012B     		cmp	r3, #1
 4253 0aac 40F0AA80 		bne	.L284
1433:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1434:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4254              		.loc 1 1434 0
 4255 0ab0 3B6D     		ldr	r3, [r7, #80]
 4256 0ab2 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4257 0ab6 012B     		cmp	r3, #1
 4258 0ab8 00F09F80 		beq	.L285
 4259              		.loc 1 1434 0 is_stmt 0 discriminator 1
 4260 0abc 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4261 0ac0 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4262 0ac2 7C48     		ldr	r0, .L318+4
 4263 0ac4 1346     		mov	r3, r2
 4264 0ac6 5B00     		lsls	r3, r3, #1
 4265 0ac8 1344     		add	r3, r3, r2
 4266 0aca 9B00     		lsls	r3, r3, #2
 4267 0acc 1344     		add	r3, r3, r2
 4268 0ace 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 103


 4269 0ad0 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4270 0ad4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4271 0ad8 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4272 0ada 774C     		ldr	r4, .L318+8
 4273 0adc 1346     		mov	r3, r2
 4274 0ade 5B00     		lsls	r3, r3, #1
 4275 0ae0 1344     		add	r3, r3, r2
 4276 0ae2 9B00     		lsls	r3, r3, #2
 4277 0ae4 1344     		add	r3, r3, r2
 4278 0ae6 0344     		add	r3, r3, r0
 4279 0ae8 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4280 0aec CB1A     		subs	r3, r1, r3
 4281 0aee 312B     		cmp	r3, #49
 4282 0af0 00F38380 		bgt	.L285
1435:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4283              		.loc 1 1435 0 is_stmt 1 discriminator 2
 4284 0af4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4285 0af8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4286 0afa 6E48     		ldr	r0, .L318+4
 4287 0afc 1346     		mov	r3, r2
 4288 0afe 5B00     		lsls	r3, r3, #1
 4289 0b00 1344     		add	r3, r3, r2
 4290 0b02 9B00     		lsls	r3, r3, #2
 4291 0b04 1344     		add	r3, r3, r2
 4292 0b06 0B44     		add	r3, r3, r1
 4293 0b08 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4294 0b0c 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4295 0b10 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4296 0b12 694C     		ldr	r4, .L318+8
 4297 0b14 1346     		mov	r3, r2
 4298 0b16 5B00     		lsls	r3, r3, #1
 4299 0b18 1344     		add	r3, r3, r2
 4300 0b1a 9B00     		lsls	r3, r3, #2
 4301 0b1c 1344     		add	r3, r3, r2
 4302 0b1e 0344     		add	r3, r3, r0
 4303 0b20 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4304 0b24 CB1A     		subs	r3, r1, r3
1434:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4305              		.loc 1 1434 0 discriminator 2
 4306 0b26 13F1310F 		cmn	r3, #49
 4307 0b2a 66DB     		blt	.L285
1436:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4308              		.loc 1 1436 0
 4309 0b2c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4310 0b2e 634A     		ldr	r2, .L318+12
 4311 0b30 1B01     		lsls	r3, r3, #4
 4312 0b32 1344     		add	r3, r3, r2
 4313 0b34 1A68     		ldr	r2, [r3]
 4314 0b36 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4315 0b38 6149     		ldr	r1, .L318+16
 4316 0b3a 1B01     		lsls	r3, r3, #4
 4317 0b3c 0B44     		add	r3, r3, r1
 4318 0b3e 1B68     		ldr	r3, [r3]
 4319 0b40 D31A     		subs	r3, r2, r3
1435:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4320              		.loc 1 1435 0
 4321 0b42 632B     		cmp	r3, #99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 104


 4322 0b44 59DC     		bgt	.L285
 4323              		.loc 1 1436 0
 4324 0b46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4325 0b48 5C4A     		ldr	r2, .L318+12
 4326 0b4a 1B01     		lsls	r3, r3, #4
 4327 0b4c 1344     		add	r3, r3, r2
 4328 0b4e 1A68     		ldr	r2, [r3]
 4329 0b50 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4330 0b52 5B49     		ldr	r1, .L318+16
 4331 0b54 1B01     		lsls	r3, r3, #4
 4332 0b56 0B44     		add	r3, r3, r1
 4333 0b58 1B68     		ldr	r3, [r3]
 4334 0b5a D31A     		subs	r3, r2, r3
 4335 0b5c 13F1630F 		cmn	r3, #99
 4336 0b60 4BDB     		blt	.L285
1437:..\src/interruptions.c ****             position_counter[idx]++;
 4337              		.loc 1 1437 0
 4338 0b62 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4339 0b64 574A     		ldr	r2, .L318+20
 4340 0b66 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4341 0b6a 0132     		adds	r2, r2, #1
 4342 0b6c 5549     		ldr	r1, .L318+20
 4343 0b6e 41F82320 		str	r2, [r1, r3, lsl #2]
1438:..\src/interruptions.c ****             
1439:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4344              		.loc 1 1439 0
 4345 0b72 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4346 0b74 534A     		ldr	r2, .L318+20
 4347 0b76 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4348 0b7a F92B     		cmp	r3, #249
 4349 0b7c 42D9     		bls	.L284
1440:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4350              		.loc 1 1440 0
 4351 0b7e 3B6D     		ldr	r3, [r7, #80]
 4352 0b80 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4353 0b84 002B     		cmp	r3, #0
 4354 0b86 10D1     		bne	.L287
 4355              		.loc 1 1440 0 is_stmt 0 discriminator 1
 4356 0b88 4F4B     		ldr	r3, .L318+24
 4357 0b8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4358 0b8c 002B     		cmp	r3, #0
 4359 0b8e 0CD1     		bne	.L287
1441:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4360              		.loc 1 1441 0 is_stmt 1
 4361 0b90 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4362 0b92 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4363 0b96 4849     		ldr	r1, .L318+8
 4364 0b98 3420     		movs	r0, #52
 4365 0b9a 00FB02F2 		mul	r2, r0, r2
 4366 0b9e 0A44     		add	r2, r2, r1
 4367 0ba0 1268     		ldr	r2, [r2]
 4368 0ba2 4A49     		ldr	r1, .L318+28
 4369 0ba4 1B01     		lsls	r3, r3, #4
 4370 0ba6 0B44     		add	r3, r3, r1
 4371 0ba8 1A60     		str	r2, [r3]
 4372              	.L287:
1442:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 105


1443:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4373              		.loc 1 1443 0
 4374 0baa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4375 0bac 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4376 0bb0 4149     		ldr	r1, .L318+8
 4377 0bb2 3420     		movs	r0, #52
 4378 0bb4 00FB02F2 		mul	r2, r0, r2
 4379 0bb8 0A44     		add	r2, r2, r1
 4380 0bba 1268     		ldr	r2, [r2]
 4381 0bbc 4049     		ldr	r1, .L318+16
 4382 0bbe 1B01     		lsls	r3, r3, #4
 4383 0bc0 0B44     		add	r3, r3, r1
 4384 0bc2 1A60     		str	r2, [r3]
1444:..\src/interruptions.c ****                 
1445:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4385              		.loc 1 1445 0
 4386 0bc4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4387 0bc6 3F4A     		ldr	r2, .L318+20
 4388 0bc8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4389 0bcc FA2B     		cmp	r3, #250
 4390 0bce 11D1     		bne	.L288
1446:..\src/interruptions.c ****                     // To do only once
1447:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4391              		.loc 1 1447 0
 4392 0bd0 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 4393 0bd4 97F84F20 		ldrb	r2, [r7, #79]	@ zero_extendqisi2
 4394 0bd8 3749     		ldr	r1, .L318+8
 4395 0bda 3420     		movs	r0, #52
 4396 0bdc 00FB02F2 		mul	r2, r0, r2
 4397 0be0 0A44     		add	r2, r2, r1
 4398 0be2 0C32     		adds	r2, r2, #12
 4399 0be4 1268     		ldr	r2, [r2]
 4400 0be6 3449     		ldr	r1, .L318+8
 4401 0be8 3420     		movs	r0, #52
 4402 0bea 00FB03F3 		mul	r3, r0, r3
 4403 0bee 0B44     		add	r3, r3, r1
 4404 0bf0 1433     		adds	r3, r3, #20
 4405 0bf2 1A60     		str	r2, [r3]
 4406              	.L288:
1448:..\src/interruptions.c ****                 }
1449:..\src/interruptions.c ****                 pwm_input = 0;            
 4407              		.loc 1 1449 0
 4408 0bf4 0023     		movs	r3, #0
 4409 0bf6 FB65     		str	r3, [r7, #92]
1439:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4410              		.loc 1 1439 0
 4411 0bf8 04E0     		b	.L284
 4412              	.L285:
1450:..\src/interruptions.c ****             }
1451:..\src/interruptions.c ****         }
1452:..\src/interruptions.c ****         else {
1453:..\src/interruptions.c ****             position_counter[idx] = 0;
 4413              		.loc 1 1453 0
 4414 0bfa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4415 0bfc 314A     		ldr	r2, .L318+20
 4416 0bfe 0021     		movs	r1, #0
 4417 0c00 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 106


 4418              	.L284:
1454:..\src/interruptions.c ****         }
1455:..\src/interruptions.c ****     }
1456:..\src/interruptions.c ****     
1457:..\src/interruptions.c ****     // Set motor direction and write pwm value
1458:..\src/interruptions.c ****     switch (idx) {
 4419              		.loc 1 1458 0
 4420 0c04 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4421 0c06 002B     		cmp	r3, #0
 4422 0c08 02D0     		beq	.L290
 4423 0c0a 012B     		cmp	r3, #1
 4424 0c0c 26D0     		beq	.L291
1459:..\src/interruptions.c ****         case 0:         // Motor 1
1460:..\src/interruptions.c ****             if (motor_dir[idx])
1461:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1462:..\src/interruptions.c ****             else
1463:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1464:..\src/interruptions.c ****             
1465:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1466:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1467:..\src/interruptions.c ****             }
1468:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1469:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1470:..\src/interruptions.c ****             }
1471:..\src/interruptions.c ****             
1472:..\src/interruptions.c ****             break;
1473:..\src/interruptions.c ****         case 1:         // Motor 2
1474:..\src/interruptions.c ****             
1475:..\src/interruptions.c ****             if (motor_dir[idx])
1476:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1477:..\src/interruptions.c ****             else
1478:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1479:..\src/interruptions.c ****             
1480:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1481:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1482:..\src/interruptions.c ****             }
1483:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1484:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1485:..\src/interruptions.c ****             }
1486:..\src/interruptions.c ****             
1487:..\src/interruptions.c ****             break;
1488:..\src/interruptions.c ****         default:
1489:..\src/interruptions.c ****             break;
 4425              		.loc 1 1489 0
 4426 0c0e 4BE0     		b	.L296
 4427              	.L290:
1460:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4428              		.loc 1 1460 0
 4429 0c10 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4430 0c12 2F4A     		ldr	r2, .L318+32
 4431 0c14 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4432 0c16 002B     		cmp	r3, #0
 4433 0c18 03D0     		beq	.L292
1461:..\src/interruptions.c ****             else
 4434              		.loc 1 1461 0
 4435 0c1a 0120     		movs	r0, #1
 4436 0c1c FFF7FEFF 		bl	MOTOR_DIR_1_Write
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 107


 4437 0c20 02E0     		b	.L293
 4438              	.L292:
1463:..\src/interruptions.c ****             
 4439              		.loc 1 1463 0
 4440 0c22 0020     		movs	r0, #0
 4441 0c24 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4442              	.L293:
1465:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4443              		.loc 1 1465 0
 4444 0c28 3B6D     		ldr	r3, [r7, #80]
 4445 0c2a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4446 0c2e 012B     		cmp	r3, #1
 4447 0c30 0BD1     		bne	.L294
1466:..\src/interruptions.c ****             }
 4448              		.loc 1 1466 0
 4449 0c32 FB6D     		ldr	r3, [r7, #92]
 4450 0c34 002B     		cmp	r3, #0
 4451 0c36 B8BF     		it	lt
 4452 0c38 5B42     		rsblt	r3, r3, #0
 4453 0c3a DBB2     		uxtb	r3, r3
 4454 0c3c C3F16403 		rsb	r3, r3, #100
 4455 0c40 DBB2     		uxtb	r3, r3
 4456 0c42 1846     		mov	r0, r3
 4457 0c44 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1472:..\src/interruptions.c ****         case 1:         // Motor 2
 4458              		.loc 1 1472 0
 4459 0c48 2EE0     		b	.L296
 4460              	.L294:
1469:..\src/interruptions.c ****             }
 4461              		.loc 1 1469 0
 4462 0c4a FB6D     		ldr	r3, [r7, #92]
 4463 0c4c 002B     		cmp	r3, #0
 4464 0c4e B8BF     		it	lt
 4465 0c50 5B42     		rsblt	r3, r3, #0
 4466 0c52 DBB2     		uxtb	r3, r3
 4467 0c54 1846     		mov	r0, r3
 4468 0c56 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1472:..\src/interruptions.c ****         case 1:         // Motor 2
 4469              		.loc 1 1472 0
 4470 0c5a 25E0     		b	.L296
 4471              	.L291:
1475:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4472              		.loc 1 1475 0
 4473 0c5c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4474 0c5e 1C4A     		ldr	r2, .L318+32
 4475 0c60 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4476 0c62 002B     		cmp	r3, #0
 4477 0c64 03D0     		beq	.L297
1476:..\src/interruptions.c ****             else
 4478              		.loc 1 1476 0
 4479 0c66 0120     		movs	r0, #1
 4480 0c68 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4481 0c6c 02E0     		b	.L298
 4482              	.L297:
1478:..\src/interruptions.c ****             
 4483              		.loc 1 1478 0
 4484 0c6e 0020     		movs	r0, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 108


 4485 0c70 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4486              	.L298:
1480:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4487              		.loc 1 1480 0
 4488 0c74 3B6D     		ldr	r3, [r7, #80]
 4489 0c76 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4490 0c7a 012B     		cmp	r3, #1
 4491 0c7c 0BD1     		bne	.L299
1481:..\src/interruptions.c ****             }
 4492              		.loc 1 1481 0
 4493 0c7e FB6D     		ldr	r3, [r7, #92]
 4494 0c80 002B     		cmp	r3, #0
 4495 0c82 B8BF     		it	lt
 4496 0c84 5B42     		rsblt	r3, r3, #0
 4497 0c86 DBB2     		uxtb	r3, r3
 4498 0c88 C3F16403 		rsb	r3, r3, #100
 4499 0c8c DBB2     		uxtb	r3, r3
 4500 0c8e 1846     		mov	r0, r3
 4501 0c90 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1487:..\src/interruptions.c ****         default:
 4502              		.loc 1 1487 0
 4503 0c94 07E0     		b	.L309
 4504              	.L299:
1484:..\src/interruptions.c ****             }
 4505              		.loc 1 1484 0
 4506 0c96 FB6D     		ldr	r3, [r7, #92]
 4507 0c98 002B     		cmp	r3, #0
 4508 0c9a B8BF     		it	lt
 4509 0c9c 5B42     		rsblt	r3, r3, #0
 4510 0c9e DBB2     		uxtb	r3, r3
 4511 0ca0 1846     		mov	r0, r3
 4512 0ca2 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4513              	.L309:
1487:..\src/interruptions.c ****         default:
 4514              		.loc 1 1487 0
 4515 0ca6 00BF     		nop
 4516              	.L296:
1490:..\src/interruptions.c ****     }
1491:..\src/interruptions.c ****     
1492:..\src/interruptions.c **** }
 4517              		.loc 1 1492 0
 4518 0ca8 00BF     		nop
 4519 0caa 6437     		adds	r7, r7, #100
 4520              		.cfi_def_cfa_offset 12
 4521 0cac BD46     		mov	sp, r7
 4522              		.cfi_def_cfa_register 13
 4523              		@ sp needed
 4524 0cae 90BD     		pop	{r4, r7, pc}
 4525              	.L319:
 4526              		.align	2
 4527              	.L318:
 4528 0cb0 00000000 		.word	pwm_sign
 4529 0cb4 00000000 		.word	g_measOld
 4530 0cb8 00000000 		.word	g_meas
 4531 0cbc 00000000 		.word	g_refOld
 4532 0cc0 00000000 		.word	g_ref
 4533 0cc4 DC000000 		.word	position_counter.10470
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 109


 4534 0cc8 00000000 		.word	change_ext_ref_flag
 4535 0ccc 00000000 		.word	g_refNew
 4536 0cd0 C0000000 		.word	motor_dir.10469
 4537              		.cfi_endproc
 4538              	.LFE69:
 4539              		.size	motor_control_generic, .-motor_control_generic
 4540              		.global	__aeabi_fcmpeq
 4541              		.global	__aeabi_fmul
 4542              		.global	__aeabi_f2iz
 4543              		.global	__aeabi_fcmplt
 4544              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4545              		.align	2
 4546              		.global	encoder_reading_SPI
 4547              		.thumb
 4548              		.thumb_func
 4549              		.type	encoder_reading_SPI, %function
 4550              	encoder_reading_SPI:
 4551              	.LFB70:
1493:..\src/interruptions.c **** 
1494:..\src/interruptions.c **** //==============================================================================
1495:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1496:..\src/interruptions.c **** //==============================================================================
1497:..\src/interruptions.c **** 
1498:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4552              		.loc 1 1498 0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 48
 4555              		@ frame_needed = 1, uses_anonymous_args = 0
 4556 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4557              		.cfi_def_cfa_offset 20
 4558              		.cfi_offset 4, -20
 4559              		.cfi_offset 5, -16
 4560              		.cfi_offset 6, -12
 4561              		.cfi_offset 7, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8FB0     		sub	sp, sp, #60
 4564              		.cfi_def_cfa_offset 80
 4565 0004 02AF     		add	r7, sp, #8
 4566              		.cfi_def_cfa 7, 72
 4567 0006 0346     		mov	r3, r0
 4568 0008 0A46     		mov	r2, r1
 4569 000a FB71     		strb	r3, [r7, #7]
 4570 000c 1346     		mov	r3, r2
 4571 000e BB71     		strb	r3, [r7, #6]
1499:..\src/interruptions.c **** 
1500:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4572              		.loc 1 1500 0
 4573 0010 0023     		movs	r3, #0
 4574 0012 87F82F30 		strb	r3, [r7, #47]
1501:..\src/interruptions.c ****     
1502:..\src/interruptions.c ****     // Encoder Variables  
1503:..\src/interruptions.c ****     uint8 jj;
1504:..\src/interruptions.c ****      
1505:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1506:..\src/interruptions.c ****     int16 tmp_value_encoder;
1507:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1508:..\src/interruptions.c ****     int32 value_encoder;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 110


1509:..\src/interruptions.c ****     int32 speed_encoder;
1510:..\src/interruptions.c ****     int32 value_diff;
1511:..\src/interruptions.c **** 	int8 init_rot = 0;
 4575              		.loc 1 1511 0
 4576 0016 0023     		movs	r3, #0
 4577 0018 87F82730 		strb	r3, [r7, #39]
1512:..\src/interruptions.c **** 
1513:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1514:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1515:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1516:..\src/interruptions.c ****     
1517:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1518:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1519:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1520:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1521:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1522:..\src/interruptions.c **** 
1523:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1524:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1525:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1526:..\src/interruptions.c **** //    
1527:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4578              		.loc 1 1527 0
 4579 001c 8E4B     		ldr	r3, .L356
 4580 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4581 0020 002B     		cmp	r3, #0
 4582 0022 18D0     		beq	.L321
1528:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4583              		.loc 1 1528 0
 4584 0024 0323     		movs	r3, #3
 4585 0026 87F82E30 		strb	r3, [r7, #46]
 4586 002a 0AE0     		b	.L322
 4587              	.L323:
1529:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4588              		.loc 1 1529 0
 4589 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4590 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4591 0032 8A48     		ldr	r0, .L356+4
 4592 0034 1346     		mov	r3, r2
 4593 0036 5B00     		lsls	r3, r3, #1
 4594 0038 1344     		add	r3, r3, r2
 4595 003a 0B44     		add	r3, r3, r1
 4596 003c 0022     		movs	r2, #0
 4597 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4598              	.L322:
1528:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4599              		.loc 1 1528 0 discriminator 1
 4600 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4601 0046 5A1E     		subs	r2, r3, #1
 4602 0048 87F82E20 		strb	r2, [r7, #46]
 4603 004c 002B     		cmp	r3, #0
 4604 004e EDD1     		bne	.L323
1530:..\src/interruptions.c ****         
1531:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4605              		.loc 1 1531 0
 4606 0050 814B     		ldr	r3, .L356
 4607 0052 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 111


 4608 0054 1A70     		strb	r2, [r3]
 4609              	.L321:
1532:..\src/interruptions.c ****     }
1533:..\src/interruptions.c **** 
1534:..\src/interruptions.c ****     //======================================================     reading sensors
1535:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4610              		.loc 1 1535 0
 4611 0056 0023     		movs	r3, #0
 4612 0058 87F82F30 		strb	r3, [r7, #47]
 4613 005c 0DE0     		b	.L324
 4614              	.L325:
1536:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4615              		.loc 1 1536 0 discriminator 3
 4616 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4617 0062 9B00     		lsls	r3, r3, #2
 4618 0064 07F13002 		add	r2, r7, #48
 4619 0068 1344     		add	r3, r3, r2
 4620 006a 0022     		movs	r2, #0
 4621 006c 43F8282C 		str	r2, [r3, #-40]
1535:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4622              		.loc 1 1535 0 discriminator 3
 4623 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4624 0074 0133     		adds	r3, r3, #1
 4625 0076 87F82F30 		strb	r3, [r7, #47]
 4626              	.L324:
1535:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4627              		.loc 1 1535 0 is_stmt 0 discriminator 1
 4628 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4629 007e 022B     		cmp	r3, #2
 4630 0080 EDD9     		bls	.L325
1537:..\src/interruptions.c ****     }   
1538:..\src/interruptions.c ****     
1539:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4631              		.loc 1 1539 0 is_stmt 1
 4632 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4633 0084 764A     		ldr	r2, .L356+8
 4634 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4635 0088 1A46     		mov	r2, r3
 4636 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4637 008c 1946     		mov	r1, r3
 4638 008e 1046     		mov	r0, r2
 4639 0090 FFF7FEFF 		bl	ReadEncoderLine
 4640              	.LBB3:
1540:..\src/interruptions.c ****                                                                         //CS1 for left hand
1541:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4641              		.loc 1 1541 0
 4642 0094 0023     		movs	r3, #0
 4643 0096 3B62     		str	r3, [r7, #32]
 4644 0098 2EE0     		b	.L326
 4645              	.L328:
1542:..\src/interruptions.c ****         
1543:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1544:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4646              		.loc 1 1544 0
 4647 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4648 009c 7149     		ldr	r1, .L356+12
 4649 009e 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 112


 4650 00a0 5B00     		lsls	r3, r3, #1
 4651 00a2 1344     		add	r3, r3, r2
 4652 00a4 1B01     		lsls	r3, r3, #4
 4653 00a6 CA18     		adds	r2, r1, r3
 4654 00a8 3B6A     		ldr	r3, [r7, #32]
 4655 00aa 1344     		add	r3, r3, r2
 4656 00ac 03F2B113 		addw	r3, r3, #433
 4657 00b0 1B78     		ldrb	r3, [r3]
 4658 00b2 87F82F30 		strb	r3, [r7, #47]
1545:..\src/interruptions.c ****         
1546:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4659              		.loc 1 1546 0
 4660 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4661 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4662 00bc 6A48     		ldr	r0, .L356+16
 4663 00be 1346     		mov	r3, r2
 4664 00c0 9B00     		lsls	r3, r3, #2
 4665 00c2 1344     		add	r3, r3, r2
 4666 00c4 0344     		add	r3, r3, r0
 4667 00c6 0B44     		add	r3, r3, r1
 4668 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4669 00ca 0F2B     		cmp	r3, #15
 4670 00cc 11D9     		bls	.L327
1547:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4671              		.loc 1 1547 0
 4672 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4673 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4674 00d4 6548     		ldr	r0, .L356+20
 4675 00d6 1346     		mov	r3, r2
 4676 00d8 9B00     		lsls	r3, r3, #2
 4677 00da 1344     		add	r3, r3, r2
 4678 00dc 0B44     		add	r3, r3, r1
 4679 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4680 00e2 1A46     		mov	r2, r3
 4681 00e4 3B6A     		ldr	r3, [r7, #32]
 4682 00e6 9B00     		lsls	r3, r3, #2
 4683 00e8 07F13001 		add	r1, r7, #48
 4684 00ec 0B44     		add	r3, r3, r1
 4685 00ee 43F8282C 		str	r2, [r3, #-40]
 4686              	.L327:
1541:..\src/interruptions.c ****         
 4687              		.loc 1 1541 0 discriminator 2
 4688 00f2 3B6A     		ldr	r3, [r7, #32]
 4689 00f4 0133     		adds	r3, r3, #1
 4690 00f6 3B62     		str	r3, [r7, #32]
 4691              	.L326:
1541:..\src/interruptions.c ****         
 4692              		.loc 1 1541 0 is_stmt 0 discriminator 1
 4693 00f8 3B6A     		ldr	r3, [r7, #32]
 4694 00fa 022B     		cmp	r3, #2
 4695 00fc CDDD     		ble	.L328
 4696              	.LBE3:
1548:..\src/interruptions.c ****         }
1549:..\src/interruptions.c ****     }
1550:..\src/interruptions.c ****     
1551:..\src/interruptions.c ****     // S = SIGN BIT
1552:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 113


1553:..\src/interruptions.c ****     // 0 = 0 BIT
1554:..\src/interruptions.c ****     // C = CONTROL BIT
1555:..\src/interruptions.c ****     
1556:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4697              		.loc 1 1556 0 is_stmt 1
 4698 00fe 0023     		movs	r3, #0
 4699 0100 87F82F30 		strb	r3, [r7, #47]
 4700 0104 33E3     		b	.L329
 4701              	.L349:
1557:..\src/interruptions.c ****         
1558:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4702              		.loc 1 1558 0
 4703 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 4704 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4705 010e 9B00     		lsls	r3, r3, #2
 4706 0110 07F13001 		add	r1, r7, #48
 4707 0114 0B44     		add	r3, r3, r1
 4708 0116 53F8283C 		ldr	r3, [r3, #-40]
 4709 011a 5549     		ldr	r1, .L356+24
 4710 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1559:..\src/interruptions.c ****         
1560:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4711              		.loc 1 1560 0
 4712 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4713 0124 9B00     		lsls	r3, r3, #2
 4714 0126 07F13002 		add	r2, r7, #48
 4715 012a 1344     		add	r3, r3, r2
 4716 012c 53F8283C 		ldr	r3, [r3, #-40]
 4717 0130 99B2     		uxth	r1, r3
 4718 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4719 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4720 0138 4E4C     		ldr	r4, .L356+28
 4721 013a 1346     		mov	r3, r2
 4722 013c 5B00     		lsls	r3, r3, #1
 4723 013e 1344     		add	r3, r3, r2
 4724 0140 9B00     		lsls	r3, r3, #2
 4725 0142 0344     		add	r3, r3, r0
 4726 0144 6633     		adds	r3, r3, #102
 4727 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4728 014a 9BB2     		uxth	r3, r3
 4729 014c CB1A     		subs	r3, r1, r3
 4730 014e 9BB2     		uxth	r3, r3
 4731 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1561:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4732              		.loc 1 1561 0
 4733 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4734 0156 002B     		cmp	r3, #0
 4735 0158 04DA     		bge	.L330
1562:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4736              		.loc 1 1562 0
 4737 015a BB8D     		ldrh	r3, [r7, #44]
 4738 015c 03F58053 		add	r3, r3, #4096
 4739 0160 9BB2     		uxth	r3, r3
 4740 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4741              	.L330:
1563:..\src/interruptions.c ****         }       // Range [0, 4096]
1564:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 114


1565:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4742              		.loc 1 1565 0
 4743 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4744 0168 B3F5006F 		cmp	r3, #2048
 4745 016c 04DB     		blt	.L331
1566:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4746              		.loc 1 1566 0
 4747 016e BB8D     		ldrh	r3, [r7, #44]
 4748 0170 A3F58053 		sub	r3, r3, #4096
 4749 0174 9BB2     		uxth	r3, r3
 4750 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4751              	.L331:
1567:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1568:..\src/interruptions.c **** 
1569:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4752              		.loc 1 1569 0
 4753 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4754 017c 1B01     		lsls	r3, r3, #4
 4755 017e FB61     		str	r3, [r7, #28]
1570:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4756              		.loc 1 1570 0
 4757 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4758 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4759 0186 3C48     		ldr	r0, .L356+32
 4760 0188 1346     		mov	r3, r2
 4761 018a 5B00     		lsls	r3, r3, #1
 4762 018c 1344     		add	r3, r3, r2
 4763 018e 0B44     		add	r3, r3, r1
 4764 0190 FA69     		ldr	r2, [r7, #28]
 4765 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1571:..\src/interruptions.c **** 
1572:..\src/interruptions.c ****         // Initialize last_value_encoder
1573:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4766              		.loc 1 1573 0
 4767 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4768 0198 384A     		ldr	r2, .L356+36
 4769 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4770 019c 002B     		cmp	r3, #0
 4771 019e 12D0     		beq	.L332
1574:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4772              		.loc 1 1574 0
 4773 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4774 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4775 01a6 2D48     		ldr	r0, .L356+4
 4776 01a8 1346     		mov	r3, r2
 4777 01aa 5B00     		lsls	r3, r3, #1
 4778 01ac 1344     		add	r3, r3, r2
 4779 01ae 0B44     		add	r3, r3, r1
 4780 01b0 FA69     		ldr	r2, [r7, #28]
 4781 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1575:..\src/interruptions.c ****             if (index == 2)
 4782              		.loc 1 1575 0
 4783 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4784 01ba 022B     		cmp	r3, #2
 4785 01bc 03D1     		bne	.L332
1576:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 4786              		.loc 1 1576 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 115


 4787 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4788 01c0 2E4A     		ldr	r2, .L356+36
 4789 01c2 0021     		movs	r1, #0
 4790 01c4 D154     		strb	r1, [r2, r3]
 4791              	.L332:
1577:..\src/interruptions.c ****         }
1578:..\src/interruptions.c **** 
1579:..\src/interruptions.c ****         // Take care of rotations
1580:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 4792              		.loc 1 1580 0
 4793 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4794 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4795 01cc 2348     		ldr	r0, .L356+4
 4796 01ce 1346     		mov	r3, r2
 4797 01d0 5B00     		lsls	r3, r3, #1
 4798 01d2 1344     		add	r3, r3, r2
 4799 01d4 0B44     		add	r3, r3, r1
 4800 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4801 01da FA69     		ldr	r2, [r7, #28]
 4802 01dc D31A     		subs	r3, r2, r3
 4803 01de BB61     		str	r3, [r7, #24]
1581:..\src/interruptions.c **** 
1582:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1583:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1584:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1585:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1586:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1587:..\src/interruptions.c ****         //                                               |           |
1588:..\src/interruptions.c ****         //                                           24575           -24576
1589:..\src/interruptions.c ****         //                                               |___________|
1590:..\src/interruptions.c ****         //                                                   49152
1591:..\src/interruptions.c **** 
1592:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1593:..\src/interruptions.c ****         // and update the variable only if the difference between
1594:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1595:..\src/interruptions.c **** 
1596:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1597:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1598:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1599:..\src/interruptions.c **** 
1600:..\src/interruptions.c ****         if (value_diff > 49152)
 4804              		.loc 1 1600 0
 4805 01e0 BB69     		ldr	r3, [r7, #24]
 4806 01e2 B3F5404F 		cmp	r3, #49152
 4807 01e6 19DD     		ble	.L333
1601:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 4808              		.loc 1 1601 0
 4809 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4810 01ea 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4811 01ee 2448     		ldr	r0, .L356+40
 4812 01f0 3421     		movs	r1, #52
 4813 01f2 01FB02F1 		mul	r1, r1, r2
 4814 01f6 0144     		add	r1, r1, r0
 4815 01f8 1944     		add	r1, r1, r3
 4816 01fa 1831     		adds	r1, r1, #24
 4817 01fc 91F90010 		ldrsb	r1, [r1]
 4818 0200 C9B2     		uxtb	r1, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 116


 4819 0202 0139     		subs	r1, r1, #1
 4820 0204 C9B2     		uxtb	r1, r1
 4821 0206 4CB2     		sxtb	r4, r1
 4822 0208 1D49     		ldr	r1, .L356+40
 4823 020a 3420     		movs	r0, #52
 4824 020c 00FB02F2 		mul	r2, r0, r2
 4825 0210 0A44     		add	r2, r2, r1
 4826 0212 1344     		add	r3, r3, r2
 4827 0214 1833     		adds	r3, r3, #24
 4828 0216 2246     		mov	r2, r4
 4829 0218 1A70     		strb	r2, [r3]
 4830 021a 5BE0     		b	.L334
 4831              	.L333:
1602:..\src/interruptions.c ****         else{ 
1603:..\src/interruptions.c ****             if (value_diff < -49152)
 4832              		.loc 1 1603 0
 4833 021c BB69     		ldr	r3, [r7, #24]
 4834 021e 13F5404F 		cmn	r3, #49152
 4835 0222 2FDA     		bge	.L335
1604:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 4836              		.loc 1 1604 0
 4837 0224 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4838 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4839 022a 1548     		ldr	r0, .L356+40
 4840 022c 3421     		movs	r1, #52
 4841 022e 01FB02F1 		mul	r1, r1, r2
 4842 0232 0144     		add	r1, r1, r0
 4843 0234 1944     		add	r1, r1, r3
 4844 0236 1831     		adds	r1, r1, #24
 4845 0238 91F90010 		ldrsb	r1, [r1]
 4846 023c C9B2     		uxtb	r1, r1
 4847 023e 0131     		adds	r1, r1, #1
 4848 0240 C9B2     		uxtb	r1, r1
 4849 0242 4CB2     		sxtb	r4, r1
 4850 0244 0E49     		ldr	r1, .L356+40
 4851 0246 3420     		movs	r0, #52
 4852 0248 00FB02F2 		mul	r2, r0, r2
 4853 024c 0A44     		add	r2, r2, r1
 4854 024e 1344     		add	r3, r3, r2
 4855 0250 1833     		adds	r3, r3, #24
 4856 0252 2246     		mov	r2, r4
 4857 0254 1A70     		strb	r2, [r3]
 4858 0256 3DE0     		b	.L334
 4859              	.L357:
 4860              		.align	2
 4861              	.L356:
 4862 0258 00000000 		.word	reset_last_value_flag
 4863 025c E4000000 		.word	last_value_encoder.10511
 4864 0260 00000000 		.word	N_Encoder_Line_Connected
 4865 0264 00000000 		.word	c_mem
 4866 0268 00000000 		.word	Encoder_Check
 4867 026c 00000000 		.word	Encoder_Value
 4868 0270 00000000 		.word	data_encoder_raw
 4869 0274 00000000 		.word	g_mem
 4870 0278 FC000000 		.word	comp_value_encoder.10512
 4871 027c 04000000 		.word	only_first_time.10514
 4872 0280 00000000 		.word	g_meas
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 117


 4873              	.L335:
1605:..\src/interruptions.c ****             else{
1606:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measure are too far
 4874              		.loc 1 1606 0
 4875 0284 BB69     		ldr	r3, [r7, #24]
 4876 0286 002B     		cmp	r3, #0
 4877 0288 B8BF     		it	lt
 4878 028a 5B42     		rsblt	r3, r3, #0
 4879 028c B3F5804F 		cmp	r3, #16384
 4880 0290 20DD     		ble	.L334
1607:..\src/interruptions.c ****                     error[n_line][index]++;
 4881              		.loc 1 1607 0
 4882 0292 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4883 0294 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4884 0298 9B48     		ldr	r0, .L358
 4885 029a 1346     		mov	r3, r2
 4886 029c 5B00     		lsls	r3, r3, #1
 4887 029e 1344     		add	r3, r3, r2
 4888 02a0 0344     		add	r3, r3, r0
 4889 02a2 0B44     		add	r3, r3, r1
 4890 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4891 02a6 0133     		adds	r3, r3, #1
 4892 02a8 DCB2     		uxtb	r4, r3
 4893 02aa 9748     		ldr	r0, .L358
 4894 02ac 1346     		mov	r3, r2
 4895 02ae 5B00     		lsls	r3, r3, #1
 4896 02b0 1344     		add	r3, r3, r2
 4897 02b2 0344     		add	r3, r3, r0
 4898 02b4 0B44     		add	r3, r3, r1
 4899 02b6 2246     		mov	r2, r4
 4900 02b8 1A70     		strb	r2, [r3]
1608:..\src/interruptions.c ****                                 
1609:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 4901              		.loc 1 1609 0
 4902 02ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4903 02bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4904 02c0 9148     		ldr	r0, .L358
 4905 02c2 1346     		mov	r3, r2
 4906 02c4 5B00     		lsls	r3, r3, #1
 4907 02c6 1344     		add	r3, r3, r2
 4908 02c8 0344     		add	r3, r3, r0
 4909 02ca 0B44     		add	r3, r3, r1
 4910 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4911 02ce 092B     		cmp	r3, #9
 4912 02d0 40F28C82 		bls	.L355
 4913              	.L334:
1610:..\src/interruptions.c ****                         // Discard
1611:..\src/interruptions.c ****                         return;
1612:..\src/interruptions.c ****                 }
1613:..\src/interruptions.c ****             }
1614:..\src/interruptions.c ****         }
1615:..\src/interruptions.c **** 
1616:..\src/interruptions.c ****         error[n_line][index] = 0;
 4914              		.loc 1 1616 0
 4915 02d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4916 02d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4917 02da 8B48     		ldr	r0, .L358
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 118


 4918 02dc 1346     		mov	r3, r2
 4919 02de 5B00     		lsls	r3, r3, #1
 4920 02e0 1344     		add	r3, r3, r2
 4921 02e2 0344     		add	r3, r3, r0
 4922 02e4 0B44     		add	r3, r3, r1
 4923 02e6 0022     		movs	r2, #0
 4924 02e8 1A70     		strb	r2, [r3]
1617:..\src/interruptions.c ****         
1618:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4925              		.loc 1 1618 0
 4926 02ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4927 02ec 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4928 02f0 8648     		ldr	r0, .L358+4
 4929 02f2 1346     		mov	r3, r2
 4930 02f4 5B00     		lsls	r3, r3, #1
 4931 02f6 1344     		add	r3, r3, r2
 4932 02f8 0B44     		add	r3, r3, r1
 4933 02fa FA69     		ldr	r2, [r7, #28]
 4934 02fc 40F82320 		str	r2, [r0, r3, lsl #2]
1619:..\src/interruptions.c **** 
1620:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 4935              		.loc 1 1620 0
 4936 0300 FB69     		ldr	r3, [r7, #28]
 4937 0302 BB62     		str	r3, [r7, #40]
1621:..\src/interruptions.c **** 
1622:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 4938              		.loc 1 1622 0
 4939 0304 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4940 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4941 030a 8149     		ldr	r1, .L358+8
 4942 030c 3420     		movs	r0, #52
 4943 030e 00FB02F2 		mul	r2, r0, r2
 4944 0312 0A44     		add	r2, r2, r1
 4945 0314 1344     		add	r3, r3, r2
 4946 0316 1833     		adds	r3, r3, #24
 4947 0318 93F90030 		ldrsb	r3, [r3]
 4948 031c 1B04     		lsls	r3, r3, #16
 4949 031e BA6A     		ldr	r2, [r7, #40]
 4950 0320 1344     		add	r3, r3, r2
 4951 0322 BB62     		str	r3, [r7, #40]
1623:..\src/interruptions.c ****         
1624:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 4952              		.loc 1 1624 0
 4953 0324 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4954 0326 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4955 032a 7A48     		ldr	r0, .L358+12
 4956 032c 1346     		mov	r3, r2
 4957 032e 5B00     		lsls	r3, r3, #1
 4958 0330 1344     		add	r3, r3, r2
 4959 0332 9B00     		lsls	r3, r3, #2
 4960 0334 0B44     		add	r3, r3, r1
 4961 0336 6833     		adds	r3, r3, #104
 4962 0338 9B00     		lsls	r3, r3, #2
 4963 033a 0344     		add	r3, r3, r0
 4964 033c 5B68     		ldr	r3, [r3, #4]	@ float
 4965 033e 4FF07E51 		mov	r1, #1065353216
 4966 0342 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 119


 4967 0344 FFF7FEFF 		bl	__aeabi_fcmpeq
 4968 0348 0346     		mov	r3, r0
 4969 034a 002B     		cmp	r3, #0
 4970 034c 1AD1     		bne	.L337
1625:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 4971              		.loc 1 1625 0
 4972 034e B86A     		ldr	r0, [r7, #40]
 4973 0350 FFF7FEFF 		bl	__aeabi_i2f
 4974 0354 0446     		mov	r4, r0
 4975 0356 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4976 0358 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4977 035c 6D48     		ldr	r0, .L358+12
 4978 035e 1346     		mov	r3, r2
 4979 0360 5B00     		lsls	r3, r3, #1
 4980 0362 1344     		add	r3, r3, r2
 4981 0364 9B00     		lsls	r3, r3, #2
 4982 0366 0B44     		add	r3, r3, r1
 4983 0368 6833     		adds	r3, r3, #104
 4984 036a 9B00     		lsls	r3, r3, #2
 4985 036c 0344     		add	r3, r3, r0
 4986 036e 5B68     		ldr	r3, [r3, #4]	@ float
 4987 0370 1946     		mov	r1, r3
 4988 0372 2046     		mov	r0, r4
 4989 0374 FFF7FEFF 		bl	__aeabi_fmul
 4990 0378 0346     		mov	r3, r0
 4991 037a 1846     		mov	r0, r3
 4992 037c FFF7FEFF 		bl	__aeabi_f2iz
 4993 0380 0346     		mov	r3, r0
 4994 0382 BB62     		str	r3, [r7, #40]
 4995              	.L337:
1626:..\src/interruptions.c ****         }
1627:..\src/interruptions.c **** 
1628:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 4996              		.loc 1 1628 0
 4997 0384 634B     		ldr	r3, .L358+12
 4998 0386 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 4999 038a 002B     		cmp	r3, #0
 5000 038c 0BD1     		bne	.L339
1629:..\src/interruptions.c ****             // Right / Left hand turn
1630:..\src/interruptions.c ****             if (index == 0) {
 5001              		.loc 1 1630 0
 5002 038e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5003 0392 002B     		cmp	r3, #0
 5004 0394 07D1     		bne	.L339
1631:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5005              		.loc 1 1631 0
 5006 0396 5F4B     		ldr	r3, .L358+12
 5007 0398 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5008 039c 002B     		cmp	r3, #0
 5009 039e 02D1     		bne	.L339
1632:..\src/interruptions.c ****                     value_encoder *= -1;        
 5010              		.loc 1 1632 0
 5011 03a0 BB6A     		ldr	r3, [r7, #40]
 5012 03a2 5B42     		negs	r3, r3
 5013 03a4 BB62     		str	r3, [r7, #40]
 5014              	.L339:
1633:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 120


1634:..\src/interruptions.c ****             }
1635:..\src/interruptions.c ****         }
1636:..\src/interruptions.c ****  
1637:..\src/interruptions.c **** 
1638:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5015              		.loc 1 1638 0
 5016 03a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5017 03a8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5018 03ac 5848     		ldr	r0, .L358+8
 5019 03ae 1346     		mov	r3, r2
 5020 03b0 5B00     		lsls	r3, r3, #1
 5021 03b2 1344     		add	r3, r3, r2
 5022 03b4 9B00     		lsls	r3, r3, #2
 5023 03b6 1344     		add	r3, r3, r2
 5024 03b8 0B44     		add	r3, r3, r1
 5025 03ba BA6A     		ldr	r2, [r7, #40]
 5026 03bc 40F82320 		str	r2, [r0, r3, lsl #2]
1639:..\src/interruptions.c ****     
1640:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5027              		.loc 1 1640 0
 5028 03c0 BA6A     		ldr	r2, [r7, #40]
 5029 03c2 1346     		mov	r3, r2
 5030 03c4 9B00     		lsls	r3, r3, #2
 5031 03c6 1344     		add	r3, r3, r2
 5032 03c8 5B00     		lsls	r3, r3, #1
 5033 03ca 9918     		adds	r1, r3, r2
 5034 03cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5035 03ce 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5036 03d2 514C     		ldr	r4, .L358+16
 5037 03d4 1346     		mov	r3, r2
 5038 03d6 5B00     		lsls	r3, r3, #1
 5039 03d8 1344     		add	r3, r3, r2
 5040 03da 0344     		add	r3, r3, r0
 5041 03dc 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5042 03e0 6FF01102 		mvn	r2, #17
 5043 03e4 02FB03F3 		mul	r3, r2, r3
 5044 03e8 1944     		add	r1, r1, r3
 5045 03ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5046 03ec 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5047 03f0 4A4C     		ldr	r4, .L358+20
 5048 03f2 1346     		mov	r3, r2
 5049 03f4 5B00     		lsls	r3, r3, #1
 5050 03f6 1344     		add	r3, r3, r2
 5051 03f8 0344     		add	r3, r3, r0
 5052 03fa 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5053 03fe 1346     		mov	r3, r2
 5054 0400 DB00     		lsls	r3, r3, #3
 5055 0402 1344     		add	r3, r3, r2
 5056 0404 1944     		add	r1, r1, r3
 5057 0406 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5058 0408 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5059 040c 444C     		ldr	r4, .L358+24
 5060 040e 1346     		mov	r3, r2
 5061 0410 5B00     		lsls	r3, r3, #1
 5062 0412 1344     		add	r3, r3, r2
 5063 0414 0344     		add	r3, r3, r0
 5064 0416 54F82330 		ldr	r3, [r4, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 121


 5065 041a 5B00     		lsls	r3, r3, #1
 5066 041c C81A     		subs	r0, r1, r3
 5067 041e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5068 0422 DB00     		lsls	r3, r3, #3
 5069 0424 3F4A     		ldr	r2, .L358+28
 5070 0426 1344     		add	r3, r3, r2
 5071 0428 1946     		mov	r1, r3
 5072 042a FFF7FEFF 		bl	filter
 5073 042e 0346     		mov	r3, r0
 5074 0430 1BB2     		sxth	r3, r3
 5075 0432 7B61     		str	r3, [r7, #20]
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c ****         //Update current speed
1643:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5076              		.loc 1 1643 0
 5077 0434 7869     		ldr	r0, [r7, #20]
 5078 0436 FFF7FEFF 		bl	__aeabi_i2f
 5079 043a 0446     		mov	r4, r0
 5080 043c 3A4B     		ldr	r3, .L358+32
 5081 043e 1B68     		ldr	r3, [r3]	@ float
 5082 0440 3A49     		ldr	r1, .L358+36
 5083 0442 1846     		mov	r0, r3
 5084 0444 FFF7FEFF 		bl	__aeabi_fmul
 5085 0448 0346     		mov	r3, r0
 5086 044a 1946     		mov	r1, r3
 5087 044c 2046     		mov	r0, r4
 5088 044e FFF7FEFF 		bl	__aeabi_fdiv
 5089 0452 0346     		mov	r3, r0
 5090 0454 1846     		mov	r0, r3
 5091 0456 FFF7FEFF 		bl	__aeabi_f2iz
 5092 045a 0346     		mov	r3, r0
 5093 045c 7B61     		str	r3, [r7, #20]
1644:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5094              		.loc 1 1644 0
 5095 045e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5096 0460 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5097 0464 2A48     		ldr	r0, .L358+8
 5098 0466 1346     		mov	r3, r2
 5099 0468 5B00     		lsls	r3, r3, #1
 5100 046a 1344     		add	r3, r3, r2
 5101 046c 9B00     		lsls	r3, r3, #2
 5102 046e 1344     		add	r3, r3, r2
 5103 0470 0B44     		add	r3, r3, r1
 5104 0472 0633     		adds	r3, r3, #6
 5105 0474 9B00     		lsls	r3, r3, #2
 5106 0476 0344     		add	r3, r3, r0
 5107 0478 7A69     		ldr	r2, [r7, #20]
 5108 047a 5A60     		str	r2, [r3, #4]
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c ****         // update old velocity and acceleration values
1647:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5109              		.loc 1 1647 0
 5110 047c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5111 047e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5112 0482 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5113 0484 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5114 0488 244D     		ldr	r5, .L358+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 122


 5115 048a 0B46     		mov	r3, r1
 5116 048c 5B00     		lsls	r3, r3, #1
 5117 048e 0B44     		add	r3, r3, r1
 5118 0490 2344     		add	r3, r3, r4
 5119 0492 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5120 0496 224C     		ldr	r4, .L358+24
 5121 0498 1346     		mov	r3, r2
 5122 049a 5B00     		lsls	r3, r3, #1
 5123 049c 1344     		add	r3, r3, r2
 5124 049e 0344     		add	r3, r3, r0
 5125 04a0 44F82310 		str	r1, [r4, r3, lsl #2]
1648:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5126              		.loc 1 1648 0
 5127 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5128 04a6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5129 04aa F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5130 04ac 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5131 04b0 194D     		ldr	r5, .L358+16
 5132 04b2 0B46     		mov	r3, r1
 5133 04b4 5B00     		lsls	r3, r3, #1
 5134 04b6 0B44     		add	r3, r3, r1
 5135 04b8 2344     		add	r3, r3, r4
 5136 04ba 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5137 04be 174C     		ldr	r4, .L358+20
 5138 04c0 1346     		mov	r3, r2
 5139 04c2 5B00     		lsls	r3, r3, #1
 5140 04c4 1344     		add	r3, r3, r2
 5141 04c6 0344     		add	r3, r3, r0
 5142 04c8 44F82310 		str	r1, [r4, r3, lsl #2]
1649:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5143              		.loc 1 1649 0
 5144 04cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5145 04ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5146 04d2 1148     		ldr	r0, .L358+16
 5147 04d4 1346     		mov	r3, r2
 5148 04d6 5B00     		lsls	r3, r3, #1
 5149 04d8 1344     		add	r3, r3, r2
 5150 04da 0B44     		add	r3, r3, r1
 5151 04dc BA6A     		ldr	r2, [r7, #40]
 5152 04de 40F82320 		str	r2, [r0, r3, lsl #2]
1650:..\src/interruptions.c **** 
1651:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1652:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5153              		.loc 1 1652 0
 5154 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5155 04e4 124A     		ldr	r2, .L358+40
 5156 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5157 04e8 002B     		cmp	r3, #0
 5158 04ea 40F03B81 		bne	.L340
1653:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5159              		.loc 1 1653 0
 5160 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5161 04f0 104A     		ldr	r2, .L358+44
 5162 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5163 04f4 212B     		cmp	r3, #33
 5164 04f6 1FD8     		bhi	.L341
1654:..\src/interruptions.c ****                 one_time_execute[n_line]++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 123


 5165              		.loc 1 1654 0
 5166 04f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5167 04fa 0E4A     		ldr	r2, .L358+44
 5168 04fc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5169 04fe 0132     		adds	r2, r2, #1
 5170 0500 D1B2     		uxtb	r1, r2
 5171 0502 0C4A     		ldr	r2, .L358+44
 5172 0504 D154     		strb	r1, [r2, r3]
 5173 0506 2DE1     		b	.L340
 5174              	.L359:
 5175              		.align	2
 5176              	.L358:
 5177 0508 14010000 		.word	error.10513
 5178 050c E4000000 		.word	last_value_encoder.10511
 5179 0510 00000000 		.word	g_meas
 5180 0514 00000000 		.word	c_mem
 5181 0518 1C010000 		.word	v_value.10519
 5182 051c 34010000 		.word	vv_value.10520
 5183 0520 4C010000 		.word	vvv_value.10521
 5184 0524 00000000 		.word	filt_vel
 5185 0528 00000000 		.word	cycle_time
 5186 052c 0000C040 		.word	1086324736
 5187 0530 64010000 		.word	pos_reconstruct.10518
 5188 0534 68010000 		.word	one_time_execute.10516
 5189              	.L341:
1655:..\src/interruptions.c ****             else {
1656:..\src/interruptions.c ****                 //Double encoder translation
1657:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5190              		.loc 1 1657 0
 5191 0538 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5192 053a AE49     		ldr	r1, .L360
 5193 053c 1346     		mov	r3, r2
 5194 053e 5B00     		lsls	r3, r3, #1
 5195 0540 1344     		add	r3, r3, r2
 5196 0542 1B01     		lsls	r3, r3, #4
 5197 0544 0B44     		add	r3, r3, r1
 5198 0546 03F5D873 		add	r3, r3, #432
 5199 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5200 054c 002B     		cmp	r3, #0
 5201 054e 5ED0     		beq	.L342
1658:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5202              		.loc 1 1658 0
 5203 0550 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5204 0552 A949     		ldr	r1, .L360+4
 5205 0554 1346     		mov	r3, r2
 5206 0556 5B00     		lsls	r3, r3, #1
 5207 0558 1344     		add	r3, r3, r2
 5208 055a 9B00     		lsls	r3, r3, #2
 5209 055c 0B44     		add	r3, r3, r1
 5210 055e 1868     		ldr	r0, [r3]
 5211 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5212 0562 A549     		ldr	r1, .L360+4
 5213 0564 1346     		mov	r3, r2
 5214 0566 5B00     		lsls	r3, r3, #1
 5215 0568 1344     		add	r3, r3, r2
 5216 056a 9B00     		lsls	r3, r3, #2
 5217 056c 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 124


 5218 056e 0433     		adds	r3, r3, #4
 5219 0570 1C68     		ldr	r4, [r3]
1659:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5220              		.loc 1 1659 0
 5221 0572 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5222 0574 9F49     		ldr	r1, .L360
 5223 0576 1346     		mov	r3, r2
 5224 0578 5B00     		lsls	r3, r3, #1
 5225 057a 1344     		add	r3, r3, r2
 5226 057c 1B01     		lsls	r3, r3, #4
 5227 057e 0B44     		add	r3, r3, r1
 5228 0580 03F2B513 		addw	r3, r3, #437
 5229 0584 93F90030 		ldrsb	r3, [r3]
1658:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5230              		.loc 1 1658 0
 5231 0588 1D46     		mov	r5, r3
 5232              		.loc 1 1659 0
 5233 058a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5234 058c 9949     		ldr	r1, .L360
 5235 058e 1346     		mov	r3, r2
 5236 0590 5B00     		lsls	r3, r3, #1
 5237 0592 1344     		add	r3, r3, r2
 5238 0594 1B01     		lsls	r3, r3, #4
 5239 0596 0B44     		add	r3, r3, r1
 5240 0598 03F5DB73 		add	r3, r3, #438
 5241 059c 93F90030 		ldrsb	r3, [r3]
1658:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5242              		.loc 1 1658 0
 5243 05a0 1E46     		mov	r6, r3
 5244              		.loc 1 1659 0
 5245 05a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5246 05a4 9349     		ldr	r1, .L360
 5247 05a6 1346     		mov	r3, r2
 5248 05a8 5B00     		lsls	r3, r3, #1
 5249 05aa 1344     		add	r3, r3, r2
 5250 05ac 1B01     		lsls	r3, r3, #4
 5251 05ae 0B44     		add	r3, r3, r1
 5252 05b0 03F2B713 		addw	r3, r3, #439
 5253 05b4 93F90030 		ldrsb	r3, [r3]
1658:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5254              		.loc 1 1658 0
 5255 05b8 0093     		str	r3, [sp]
 5256 05ba 3346     		mov	r3, r6
 5257 05bc 2A46     		mov	r2, r5
 5258 05be 2146     		mov	r1, r4
 5259 05c0 FFF7FEFF 		bl	calc_turns_fcn
 5260 05c4 0346     		mov	r3, r0
 5261 05c6 87F82730 		strb	r3, [r7, #39]
1660:..\src/interruptions.c **** 
1661:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5262              		.loc 1 1661 0
 5263 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5264 05cc 8949     		ldr	r1, .L360
 5265 05ce 1346     		mov	r3, r2
 5266 05d0 5B00     		lsls	r3, r3, #1
 5267 05d2 1344     		add	r3, r3, r2
 5268 05d4 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 125


 5269 05d6 0B44     		add	r3, r3, r1
 5270 05d8 03F5D273 		add	r3, r3, #420
 5271 05dc 1B68     		ldr	r3, [r3]	@ float
 5272 05de 4FF00001 		mov	r1, #0
 5273 05e2 1846     		mov	r0, r3
 5274 05e4 FFF7FEFF 		bl	__aeabi_fcmplt
 5275 05e8 0346     		mov	r3, r0
 5276 05ea 002B     		cmp	r3, #0
 5277 05ec 05D0     		beq	.L343
1662:..\src/interruptions.c ****                         init_rot = -init_rot;
 5278              		.loc 1 1662 0
 5279 05ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5280 05f2 5B42     		negs	r3, r3
 5281 05f4 DBB2     		uxtb	r3, r3
 5282 05f6 87F82730 		strb	r3, [r7, #39]
 5283              	.L343:
1663:..\src/interruptions.c ****                     
1664:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5284              		.loc 1 1664 0
 5285 05fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5286 05fc 7F4A     		ldr	r2, .L360+8
 5287 05fe 3421     		movs	r1, #52
 5288 0600 01FB03F3 		mul	r3, r1, r3
 5289 0604 1344     		add	r3, r3, r2
 5290 0606 1833     		adds	r3, r3, #24
 5291 0608 97F82720 		ldrb	r2, [r7, #39]
 5292 060c 1A70     		strb	r2, [r3]
 5293              	.L342:
1665:..\src/interruptions.c ****                 }    
1666:..\src/interruptions.c **** 
1667:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5294              		.loc 1 1667 0
 5295 060e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5296 0610 7849     		ldr	r1, .L360
 5297 0612 1346     		mov	r3, r2
 5298 0614 5B00     		lsls	r3, r3, #1
 5299 0616 1344     		add	r3, r3, r2
 5300 0618 1B01     		lsls	r3, r3, #4
 5301 061a 0B44     		add	r3, r3, r1
 5302 061c 03F5D273 		add	r3, r3, #420
 5303 0620 1B68     		ldr	r3, [r3]	@ float
 5304 0622 4FF07E51 		mov	r1, #1065353216
 5305 0626 1846     		mov	r0, r3
 5306 0628 FFF7FEFF 		bl	__aeabi_fcmpeq
 5307 062c 0346     		mov	r3, r0
 5308 062e 002B     		cmp	r3, #0
 5309 0630 22D1     		bne	.L345
1668:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5310              		.loc 1 1668 0
 5311 0632 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5312 0634 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5313 0636 714A     		ldr	r2, .L360+8
 5314 0638 3421     		movs	r1, #52
 5315 063a 01FB03F3 		mul	r3, r1, r3
 5316 063e 1344     		add	r3, r3, r2
 5317 0640 1B68     		ldr	r3, [r3]
 5318 0642 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 126


 5319 0644 FFF7FEFF 		bl	__aeabi_i2f
 5320 0648 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5321 064a 6A49     		ldr	r1, .L360
 5322 064c 1346     		mov	r3, r2
 5323 064e 5B00     		lsls	r3, r3, #1
 5324 0650 1344     		add	r3, r3, r2
 5325 0652 1B01     		lsls	r3, r3, #4
 5326 0654 0B44     		add	r3, r3, r1
 5327 0656 03F5D273 		add	r3, r3, #420
 5328 065a 1B68     		ldr	r3, [r3]	@ float
 5329 065c 1946     		mov	r1, r3
 5330 065e FFF7FEFF 		bl	__aeabi_fdiv
 5331 0662 0346     		mov	r3, r0
 5332 0664 1846     		mov	r0, r3
 5333 0666 FFF7FEFF 		bl	__aeabi_f2iz
 5334 066a 0146     		mov	r1, r0
 5335 066c 634A     		ldr	r2, .L360+8
 5336 066e 3423     		movs	r3, #52
 5337 0670 03FB04F3 		mul	r3, r3, r4
 5338 0674 1344     		add	r3, r3, r2
 5339 0676 1960     		str	r1, [r3]
 5340              	.L345:
1669:..\src/interruptions.c ****                 
1670:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5341              		.loc 1 1670 0
 5342 0678 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5343 067a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5344 067c 5F49     		ldr	r1, .L360+8
 5345 067e 3420     		movs	r0, #52
 5346 0680 00FB02F2 		mul	r2, r0, r2
 5347 0684 0A44     		add	r2, r2, r1
 5348 0686 1168     		ldr	r1, [r2]
 5349 0688 97F92720 		ldrsb	r2, [r7, #39]
 5350 068c 1204     		lsls	r2, r2, #16
 5351 068e 0A44     		add	r2, r2, r1
 5352 0690 5A49     		ldr	r1, .L360+8
 5353 0692 3420     		movs	r0, #52
 5354 0694 00FB03F3 		mul	r3, r0, r3
 5355 0698 0B44     		add	r3, r3, r1
 5356 069a 1A60     		str	r2, [r3]
1671:..\src/interruptions.c ****             
1672:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5357              		.loc 1 1672 0
 5358 069c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5359 069e 5549     		ldr	r1, .L360
 5360 06a0 1346     		mov	r3, r2
 5361 06a2 5B00     		lsls	r3, r3, #1
 5362 06a4 1344     		add	r3, r3, r2
 5363 06a6 1B01     		lsls	r3, r3, #4
 5364 06a8 0B44     		add	r3, r3, r1
 5365 06aa 03F5D273 		add	r3, r3, #420
 5366 06ae 1B68     		ldr	r3, [r3]	@ float
 5367 06b0 4FF07E51 		mov	r1, #1065353216
 5368 06b4 1846     		mov	r0, r3
 5369 06b6 FFF7FEFF 		bl	__aeabi_fcmpeq
 5370 06ba 0346     		mov	r3, r0
 5371 06bc 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 127


 5372 06be 22D1     		bne	.L347
1673:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5373              		.loc 1 1673 0
 5374 06c0 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5375 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5376 06c4 4D4A     		ldr	r2, .L360+8
 5377 06c6 3421     		movs	r1, #52
 5378 06c8 01FB03F3 		mul	r3, r1, r3
 5379 06cc 1344     		add	r3, r3, r2
 5380 06ce 1B68     		ldr	r3, [r3]
 5381 06d0 1846     		mov	r0, r3
 5382 06d2 FFF7FEFF 		bl	__aeabi_i2f
 5383 06d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5384 06d8 4649     		ldr	r1, .L360
 5385 06da 1346     		mov	r3, r2
 5386 06dc 5B00     		lsls	r3, r3, #1
 5387 06de 1344     		add	r3, r3, r2
 5388 06e0 1B01     		lsls	r3, r3, #4
 5389 06e2 0B44     		add	r3, r3, r1
 5390 06e4 03F5D273 		add	r3, r3, #420
 5391 06e8 1B68     		ldr	r3, [r3]	@ float
 5392 06ea 1946     		mov	r1, r3
 5393 06ec FFF7FEFF 		bl	__aeabi_fmul
 5394 06f0 0346     		mov	r3, r0
 5395 06f2 1846     		mov	r0, r3
 5396 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 5397 06f8 0146     		mov	r1, r0
 5398 06fa 404A     		ldr	r2, .L360+8
 5399 06fc 3423     		movs	r3, #52
 5400 06fe 03FB04F3 		mul	r3, r3, r4
 5401 0702 1344     		add	r3, r3, r2
 5402 0704 1960     		str	r1, [r3]
 5403              	.L347:
1674:..\src/interruptions.c ****             
1675:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5404              		.loc 1 1675 0
 5405 0706 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5406 0708 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5407 070a 3C49     		ldr	r1, .L360+8
 5408 070c 3420     		movs	r0, #52
 5409 070e 00FB02F2 		mul	r2, r0, r2
 5410 0712 0A44     		add	r2, r2, r1
 5411 0714 1268     		ldr	r2, [r2]
 5412 0716 3A49     		ldr	r1, .L360+12
 5413 0718 1B01     		lsls	r3, r3, #4
 5414 071a 0B44     		add	r3, r3, r1
 5415 071c 1A60     		str	r2, [r3]
1676:..\src/interruptions.c **** 
1677:..\src/interruptions.c ****                 // If necessary activate motor
1678:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5416              		.loc 1 1678 0
 5417 071e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5418 0720 384A     		ldr	r2, .L360+16
 5419 0722 0121     		movs	r1, #1
 5420 0724 D154     		strb	r1, [r2, r3]
1679:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1680:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 128


 5421              		.loc 1 1680 0
 5422 0726 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5423 0728 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5424 072a 3248     		ldr	r0, .L360
 5425 072c 1346     		mov	r3, r2
 5426 072e DB00     		lsls	r3, r3, #3
 5427 0730 9B1A     		subs	r3, r3, r2
 5428 0732 1B01     		lsls	r3, r3, #4
 5429 0734 0344     		add	r3, r3, r0
 5430 0736 E033     		adds	r3, r3, #224
 5431 0738 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5432 073a 314A     		ldr	r2, .L360+12
 5433 073c 0B01     		lsls	r3, r1, #4
 5434 073e 1344     		add	r3, r3, r2
 5435 0740 0C33     		adds	r3, r3, #12
 5436 0742 0246     		mov	r2, r0
 5437 0744 1A70     		strb	r2, [r3]
1681:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5438              		.loc 1 1681 0
 5439 0746 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5440 0748 2D4A     		ldr	r2, .L360+12
 5441 074a 1B01     		lsls	r3, r3, #4
 5442 074c 1344     		add	r3, r3, r2
 5443 074e 0C33     		adds	r3, r3, #12
 5444 0750 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5445 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5446 0754 1146     		mov	r1, r2
 5447 0756 1846     		mov	r0, r3
 5448 0758 FFF7FEFF 		bl	enable_motor
1682:..\src/interruptions.c ****                 
1683:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5449              		.loc 1 1683 0
 5450 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5451 075e 2A4A     		ldr	r2, .L360+20
 5452 0760 0121     		movs	r1, #1
 5453 0762 D154     		strb	r1, [r2, r3]
 5454              	.L340:
1556:..\src/interruptions.c ****         
 5455              		.loc 1 1556 0 discriminator 2
 5456 0764 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5457 0768 0133     		adds	r3, r3, #1
 5458 076a 87F82F30 		strb	r3, [r7, #47]
 5459              	.L329:
1556:..\src/interruptions.c ****         
 5460              		.loc 1 1556 0 is_stmt 0 discriminator 1
 5461 076e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5462 0772 022B     		cmp	r3, #2
 5463 0774 7FF6C7AC 		bls	.L349
1684:..\src/interruptions.c ****             }
1685:..\src/interruptions.c ****         }
1686:..\src/interruptions.c ****     } 
1687:..\src/interruptions.c **** 
1688:..\src/interruptions.c **** 	
1689:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1690:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5464              		.loc 1 1690 0 is_stmt 1
 5465 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 129


 5466 077a 224A     		ldr	r2, .L360+16
 5467 077c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5468 077e 002B     		cmp	r3, #0
 5469 0780 35D0     		beq	.L320
1691:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5470              		.loc 1 1691 0
 5471 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5472 0784 214A     		ldr	r2, .L360+24
 5473 0786 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5474 078a 0132     		adds	r2, r2, #1
 5475 078c 1F49     		ldr	r1, .L360+24
 5476 078e 41F82320 		str	r2, [r1, r3, lsl #2]
1692:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5477              		.loc 1 1692 0
 5478 0792 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5479 0794 1D4A     		ldr	r2, .L360+24
 5480 0796 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5481 079a B3F5FA5F 		cmp	r3, #8000
 5482 079e 26D3     		bcc	.L320
1693:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5483              		.loc 1 1693 0
 5484 07a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5485 07a2 174A     		ldr	r2, .L360+12
 5486 07a4 1B01     		lsls	r3, r3, #4
 5487 07a6 1344     		add	r3, r3, r2
 5488 07a8 0022     		movs	r2, #0
 5489 07aa 1A60     		str	r2, [r3]
1694:..\src/interruptions.c ****             
1695:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1696:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5490              		.loc 1 1696 0
 5491 07ac B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5492 07ae BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5493 07b0 1048     		ldr	r0, .L360
 5494 07b2 1346     		mov	r3, r2
 5495 07b4 DB00     		lsls	r3, r3, #3
 5496 07b6 9B1A     		subs	r3, r3, r2
 5497 07b8 1B01     		lsls	r3, r3, #4
 5498 07ba 0344     		add	r3, r3, r0
 5499 07bc E033     		adds	r3, r3, #224
 5500 07be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5501 07c0 0F4A     		ldr	r2, .L360+12
 5502 07c2 0B01     		lsls	r3, r1, #4
 5503 07c4 1344     		add	r3, r3, r2
 5504 07c6 0C33     		adds	r3, r3, #12
 5505 07c8 0246     		mov	r2, r0
 5506 07ca 1A70     		strb	r2, [r3]
1697:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 5507              		.loc 1 1697 0
 5508 07cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5509 07ce 0C4A     		ldr	r2, .L360+12
 5510 07d0 1B01     		lsls	r3, r3, #4
 5511 07d2 1344     		add	r3, r3, r2
 5512 07d4 0C33     		adds	r3, r3, #12
 5513 07d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5514 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5515 07da 1146     		mov	r1, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 130


 5516 07dc 1846     		mov	r0, r3
 5517 07de FFF7FEFF 		bl	enable_motor
1698:..\src/interruptions.c ****                         
1699:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5518              		.loc 1 1699 0
 5519 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5520 07e4 074A     		ldr	r2, .L360+16
 5521 07e6 0021     		movs	r1, #0
 5522 07e8 D154     		strb	r1, [r2, r3]
 5523 07ea 00E0     		b	.L320
 5524              	.L355:
1611:..\src/interruptions.c ****                 }
 5525              		.loc 1 1611 0
 5526 07ec 00BF     		nop
 5527              	.L320:
1700:..\src/interruptions.c ****         }
1701:..\src/interruptions.c ****     }
1702:..\src/interruptions.c ****  
1703:..\src/interruptions.c **** }
 5528              		.loc 1 1703 0
 5529 07ee 3437     		adds	r7, r7, #52
 5530              		.cfi_def_cfa_offset 20
 5531 07f0 BD46     		mov	sp, r7
 5532              		.cfi_def_cfa_register 13
 5533              		@ sp needed
 5534 07f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5535              	.L361:
 5536              		.align	2
 5537              	.L360:
 5538 07f4 00000000 		.word	c_mem
 5539 07f8 FC000000 		.word	comp_value_encoder.10512
 5540 07fc 00000000 		.word	g_meas
 5541 0800 00000000 		.word	g_refNew
 5542 0804 6C010000 		.word	safe_startup_motor_activation.10515
 5543 0808 64010000 		.word	pos_reconstruct.10518
 5544 080c 70010000 		.word	count_startup_motor.10517
 5545              		.cfi_endproc
 5546              	.LFE70:
 5547              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 5548              		.section	.text.analog_read_end,"ax",%progbits
 5549              		.align	2
 5550              		.global	analog_read_end
 5551              		.thumb
 5552              		.thumb_func
 5553              		.type	analog_read_end, %function
 5554              	analog_read_end:
 5555              	.LFB71:
1704:..\src/interruptions.c **** 
1705:..\src/interruptions.c **** //==============================================================================
1706:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1707:..\src/interruptions.c **** //==============================================================================
1708:..\src/interruptions.c **** 
1709:..\src/interruptions.c **** void analog_read_end() {
 5556              		.loc 1 1709 0
 5557              		.cfi_startproc
 5558              		@ args = 0, pretend = 0, frame = 8
 5559              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 131


 5560 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5561              		.cfi_def_cfa_offset 20
 5562              		.cfi_offset 4, -20
 5563              		.cfi_offset 5, -16
 5564              		.cfi_offset 6, -12
 5565              		.cfi_offset 7, -8
 5566              		.cfi_offset 14, -4
 5567 0002 83B0     		sub	sp, sp, #12
 5568              		.cfi_def_cfa_offset 32
 5569 0004 00AF     		add	r7, sp, #0
 5570              		.cfi_def_cfa_register 7
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****     /* =========================================================================
1712:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1713:..\src/interruptions.c ****     /
1714:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1715:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1716:..\src/interruptions.c ****     /
1717:..\src/interruptions.c ****     /   Definition:
1718:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1719:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1720:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1721:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1722:..\src/interruptions.c ****     /
1723:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1724:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1725:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1726:..\src/interruptions.c ****     /  =========================================================================
1727:..\src/interruptions.c ****     */
1728:..\src/interruptions.c **** 
1729:..\src/interruptions.c ****     int32 CYDATA i_aux;
1730:..\src/interruptions.c **** 
1731:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1732:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1733:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1734:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1735:..\src/interruptions.c ****     static uint16 count = 0;
1736:..\src/interruptions.c ****     static uint32 v_count = 0;
1737:..\src/interruptions.c ****     static uint8 idx = 0;
1738:..\src/interruptions.c ****     
1739:..\src/interruptions.c ****     // Wait for conversion end
1740:..\src/interruptions.c ****     
1741:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5571              		.loc 1 1741 0
 5572 0006 08E0     		b	.L363
 5573              	.L364:
1742:..\src/interruptions.c ****         
1743:..\src/interruptions.c ****         if (interrupt_flag){
 5574              		.loc 1 1743 0
 5575 0008 A74B     		ldr	r3, .L468
 5576 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5577 000c 002B     		cmp	r3, #0
 5578 000e 04D0     		beq	.L363
1744:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5579              		.loc 1 1744 0
 5580 0010 A54B     		ldr	r3, .L468
 5581 0012 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 132


 5582 0014 1A70     		strb	r2, [r3]
1745:..\src/interruptions.c ****             interrupt_manager();
 5583              		.loc 1 1745 0
 5584 0016 FFF7FEFF 		bl	interrupt_manager
 5585              	.L363:
1741:..\src/interruptions.c ****         
 5586              		.loc 1 1741 0
 5587 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5588 001e 0346     		mov	r3, r0
 5589 0020 002B     		cmp	r3, #0
 5590 0022 F1D0     		beq	.L364
1746:..\src/interruptions.c ****         }
1747:..\src/interruptions.c ****     }
1748:..\src/interruptions.c ****     
1749:..\src/interruptions.c ****     // Convert tension read
1750:..\src/interruptions.c ****     dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5591              		.loc 1 1750 0
 5592 0024 A14B     		ldr	r3, .L468+4
 5593 0026 B3F90030 		ldrsh	r3, [r3]
 5594 002a A3F25563 		subw	r3, r3, #1621
 5595 002e 40F2C672 		movw	r2, #1990
 5596 0032 02FB03F3 		mul	r3, r2, r3
 5597 0036 DB11     		asrs	r3, r3, #7
 5598 0038 9D4A     		ldr	r2, .L468+8
 5599 003a 1360     		str	r3, [r2]
1751:..\src/interruptions.c ****     
1752:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1753:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5600              		.loc 1 1753 0
 5601 003c 9D4B     		ldr	r3, .L468+12
 5602 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5603 0040 042B     		cmp	r3, #4
 5604 0042 0BD9     		bls	.L365
1754:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5605              		.loc 1 1754 0
 5606 0044 994B     		ldr	r3, .L468+4
 5607 0046 B3F90830 		ldrsh	r3, [r3, #8]
 5608 004a A3F25563 		subw	r3, r3, #1621
 5609 004e 40F2C672 		movw	r2, #1990
 5610 0052 02FB03F3 		mul	r3, r2, r3
 5611 0056 DB11     		asrs	r3, r3, #7
 5612 0058 954A     		ldr	r2, .L468+8
 5613 005a 5360     		str	r3, [r2, #4]
 5614              	.L365:
1755:..\src/interruptions.c ****     }
1756:..\src/interruptions.c ****     
1757:..\src/interruptions.c ****     if (interrupt_flag){
 5615              		.loc 1 1757 0
 5616 005c 924B     		ldr	r3, .L468
 5617 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5618 0060 002B     		cmp	r3, #0
 5619 0062 04D0     		beq	.L366
1758:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5620              		.loc 1 1758 0
 5621 0064 904B     		ldr	r3, .L468
 5622 0066 0022     		movs	r2, #0
 5623 0068 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 133


1759:..\src/interruptions.c ****         interrupt_manager();
 5624              		.loc 1 1759 0
 5625 006a FFF7FEFF 		bl	interrupt_manager
 5626              	.L366:
1760:..\src/interruptions.c ****     }
1761:..\src/interruptions.c ****     
1762:..\src/interruptions.c ****     // VOLTAGE READING
1763:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1764:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1765:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1766:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1767:..\src/interruptions.c ****     
1768:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 5627              		.loc 1 1768 0
 5628 006e 924B     		ldr	r3, .L468+16
 5629 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5630 0072 002B     		cmp	r3, #0
 5631 0074 4DD0     		beq	.L367
 5632              		.loc 1 1768 0 is_stmt 0 discriminator 1
 5633 0076 914B     		ldr	r3, .L468+20
 5634 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5635 007a 002B     		cmp	r3, #0
 5636 007c 49D0     		beq	.L367
1769:..\src/interruptions.c ****         count = count + 1;
 5637              		.loc 1 1769 0 is_stmt 1
 5638 007e 904B     		ldr	r3, .L468+24
 5639 0080 1B88     		ldrh	r3, [r3]
 5640 0082 0133     		adds	r3, r3, #1
 5641 0084 9AB2     		uxth	r2, r3
 5642 0086 8E4B     		ldr	r3, .L468+24
 5643 0088 1A80     		strh	r2, [r3]	@ movhi
1770:..\src/interruptions.c ****         
1771:..\src/interruptions.c ****         if (count == 1000){
 5644              		.loc 1 1771 0
 5645 008a 8D4B     		ldr	r3, .L468+24
 5646 008c 1B88     		ldrh	r3, [r3]
 5647 008e B3F57A7F 		cmp	r3, #1000
 5648 0092 3ED1     		bne	.L367
1772:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5649              		.loc 1 1772 0
 5650 0094 8B4B     		ldr	r3, .L468+28
 5651 0096 0022     		movs	r2, #0
 5652 0098 1A70     		strb	r2, [r3]
 5653 009a 33E0     		b	.L368
 5654              	.L372:
1773:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5655              		.loc 1 1773 0
 5656 009c 894B     		ldr	r3, .L468+28
 5657 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5658 00a0 1A46     		mov	r2, r3
 5659 00a2 834B     		ldr	r3, .L468+8
 5660 00a4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5661 00a8 42F22732 		movw	r2, #8999
 5662 00ac 9342     		cmp	r3, r2
 5663 00ae 08DC     		bgt	.L369
1774:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5664              		.loc 1 1774 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 134


 5665 00b0 844B     		ldr	r3, .L468+28
 5666 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5667 00b4 1946     		mov	r1, r3
 5668 00b6 844B     		ldr	r3, .L468+32
 5669 00b8 4FF4FA52 		mov	r2, #8000
 5670 00bc 43F82120 		str	r2, [r3, r1, lsl #2]
 5671 00c0 1AE0     		b	.L370
 5672              	.L369:
1775:..\src/interruptions.c ****                 }
1776:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1777:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5673              		.loc 1 1777 0
 5674 00c2 804B     		ldr	r3, .L468+28
 5675 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5676 00c6 1A46     		mov	r2, r3
 5677 00c8 794B     		ldr	r3, .L468+8
 5678 00ca 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5679 00ce 43F2C722 		movw	r2, #12999
 5680 00d2 9342     		cmp	r3, r2
 5681 00d4 08DC     		bgt	.L371
1778:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5682              		.loc 1 1778 0
 5683 00d6 7B4B     		ldr	r3, .L468+28
 5684 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5685 00da 1946     		mov	r1, r3
 5686 00dc 7A4B     		ldr	r3, .L468+32
 5687 00de 42F6E062 		movw	r2, #12000
 5688 00e2 43F82120 		str	r2, [r3, r1, lsl #2]
 5689 00e6 07E0     		b	.L370
 5690              	.L371:
1779:..\src/interruptions.c ****                     }
1780:..\src/interruptions.c ****                     else
1781:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5691              		.loc 1 1781 0
 5692 00e8 764B     		ldr	r3, .L468+28
 5693 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5694 00ec 1946     		mov	r1, r3
 5695 00ee 764B     		ldr	r3, .L468+32
 5696 00f0 45F6C052 		movw	r2, #24000
 5697 00f4 43F82120 		str	r2, [r3, r1, lsl #2]
 5698              	.L370:
1772:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5699              		.loc 1 1772 0 discriminator 2
 5700 00f8 724B     		ldr	r3, .L468+28
 5701 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5702 00fc 0133     		adds	r3, r3, #1
 5703 00fe DAB2     		uxtb	r2, r3
 5704 0100 704B     		ldr	r3, .L468+28
 5705 0102 1A70     		strb	r2, [r3]
 5706              	.L368:
1772:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5707              		.loc 1 1772 0 is_stmt 0 discriminator 1
 5708 0104 6F4B     		ldr	r3, .L468+28
 5709 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5710 0108 012B     		cmp	r3, #1
 5711 010a C7D9     		bls	.L372
1782:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 135


1783:..\src/interruptions.c ****             }
1784:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5712              		.loc 1 1784 0 is_stmt 1
 5713 010c 6A4B     		ldr	r3, .L468+16
 5714 010e 0022     		movs	r2, #0
 5715 0110 1A70     		strb	r2, [r3]
 5716              	.L367:
1785:..\src/interruptions.c ****         }
1786:..\src/interruptions.c ****     }
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1789:..\src/interruptions.c **** 
1790:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 5717              		.loc 1 1790 0
 5718 0112 674B     		ldr	r3, .L468+8
 5719 0114 1B68     		ldr	r3, [r3]
 5720 0116 41F65732 		movw	r2, #6999
 5721 011a 9342     		cmp	r3, r2
 5722 011c 00F3E080 		bgt	.L373
 5723              		.loc 1 1790 0 is_stmt 0 discriminator 1
 5724 0120 644B     		ldr	r3, .L468+12
 5725 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5726 0124 042B     		cmp	r3, #4
 5727 0126 06D9     		bls	.L374
 5728              		.loc 1 1790 0 discriminator 2
 5729 0128 614B     		ldr	r3, .L468+8
 5730 012a 5B68     		ldr	r3, [r3, #4]
 5731 012c 41F65732 		movw	r2, #6999
 5732 0130 9342     		cmp	r3, r2
 5733 0132 00F3D580 		bgt	.L373
 5734              	.L374:
1791:..\src/interruptions.c ****         // PSoC is powered through uUSB
1792:..\src/interruptions.c ****         
1793:..\src/interruptions.c ****         tension_valid = FALSE;
 5735              		.loc 1 1793 0 is_stmt 1
 5736 0136 614B     		ldr	r3, .L468+20
 5737 0138 0022     		movs	r2, #0
 5738 013a 1A70     		strb	r2, [r3]
1794:..\src/interruptions.c ****             
1795:..\src/interruptions.c ****         if (interrupt_flag){
 5739              		.loc 1 1795 0
 5740 013c 5A4B     		ldr	r3, .L468
 5741 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5742 0140 002B     		cmp	r3, #0
 5743 0142 04D0     		beq	.L375
1796:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5744              		.loc 1 1796 0
 5745 0144 584B     		ldr	r3, .L468
 5746 0146 0022     		movs	r2, #0
 5747 0148 1A70     		strb	r2, [r3]
1797:..\src/interruptions.c ****             interrupt_manager();
 5748              		.loc 1 1797 0
 5749 014a FFF7FEFF 		bl	interrupt_manager
 5750              	.L375:
1798:..\src/interruptions.c ****         }
1799:..\src/interruptions.c ****         
1800:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 136


 5751              		.loc 1 1800 0
 5752 014e 5D4B     		ldr	r3, .L468+28
 5753 0150 0022     		movs	r2, #0
 5754 0152 1A70     		strb	r2, [r3]
 5755 0154 73E0     		b	.L376
 5756              	.L379:
1801:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5757              		.loc 1 1801 0
 5758 0156 5D4B     		ldr	r3, .L468+36
 5759 0158 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 5760 015c 002B     		cmp	r3, #0
 5761 015e 4BD0     		beq	.L377
1802:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5762              		.loc 1 1802 0
 5763 0160 584B     		ldr	r3, .L468+28
 5764 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5765 0164 1946     		mov	r1, r3
 5766 0166 594A     		ldr	r2, .L468+36
 5767 0168 0B46     		mov	r3, r1
 5768 016a DB00     		lsls	r3, r3, #3
 5769 016c 5B1A     		subs	r3, r3, r1
 5770 016e 1B01     		lsls	r3, r3, #4
 5771 0170 1344     		add	r3, r3, r2
 5772 0172 03F58773 		add	r3, r3, #270
 5773 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5774 0178 022B     		cmp	r3, #2
 5775 017a 29D0     		beq	.L378
1803:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5776              		.loc 1 1803 0 discriminator 1
 5777 017c 514B     		ldr	r3, .L468+28
 5778 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5779 0180 1946     		mov	r1, r3
 5780 0182 524A     		ldr	r2, .L468+36
 5781 0184 0B46     		mov	r3, r1
 5782 0186 DB00     		lsls	r3, r3, #3
 5783 0188 5B1A     		subs	r3, r3, r1
 5784 018a 1B01     		lsls	r3, r3, #4
 5785 018c 1344     		add	r3, r3, r2
 5786 018e 03F58773 		add	r3, r3, #270
 5787 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1802:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5788              		.loc 1 1802 0 discriminator 1
 5789 0194 032B     		cmp	r3, #3
 5790 0196 1BD0     		beq	.L378
1804:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5791              		.loc 1 1804 0
 5792 0198 4A4B     		ldr	r3, .L468+28
 5793 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5794 019c 1946     		mov	r1, r3
 5795 019e 4B4A     		ldr	r2, .L468+36
 5796 01a0 0B46     		mov	r3, r1
 5797 01a2 DB00     		lsls	r3, r3, #3
 5798 01a4 5B1A     		subs	r3, r3, r1
 5799 01a6 1B01     		lsls	r3, r3, #4
 5800 01a8 1344     		add	r3, r3, r2
 5801 01aa 03F58773 		add	r3, r3, #270
 5802 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 137


1803:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5803              		.loc 1 1803 0
 5804 01b0 042B     		cmp	r3, #4
 5805 01b2 0DD0     		beq	.L378
1805:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 5806              		.loc 1 1805 0
 5807 01b4 434B     		ldr	r3, .L468+28
 5808 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5809 01b8 1946     		mov	r1, r3
 5810 01ba 444A     		ldr	r2, .L468+36
 5811 01bc 0B46     		mov	r3, r1
 5812 01be DB00     		lsls	r3, r3, #3
 5813 01c0 5B1A     		subs	r3, r3, r1
 5814 01c2 1B01     		lsls	r3, r3, #4
 5815 01c4 1344     		add	r3, r3, r2
 5816 01c6 03F58773 		add	r3, r3, #270
 5817 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1804:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5818              		.loc 1 1804 0
 5819 01cc 052B     		cmp	r3, #5
 5820 01ce 13D1     		bne	.L377
 5821              	.L378:
1806:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 5822              		.loc 1 1806 0
 5823 01d0 3C4B     		ldr	r3, .L468+28
 5824 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5825 01d4 3E4A     		ldr	r2, .L468+40
 5826 01d6 1B01     		lsls	r3, r3, #4
 5827 01d8 1344     		add	r3, r3, r2
 5828 01da 0C33     		adds	r3, r3, #12
 5829 01dc 0022     		movs	r2, #0
 5830 01de 1A70     		strb	r2, [r3]
1807:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 5831              		.loc 1 1807 0
 5832 01e0 384B     		ldr	r3, .L468+28
 5833 01e2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5834 01e4 374B     		ldr	r3, .L468+28
 5835 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5836 01e8 394A     		ldr	r2, .L468+40
 5837 01ea 1B01     		lsls	r3, r3, #4
 5838 01ec 1344     		add	r3, r3, r2
 5839 01ee 0C33     		adds	r3, r3, #12
 5840 01f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5841 01f2 1946     		mov	r1, r3
 5842 01f4 FFF7FEFF 		bl	enable_motor
 5843              	.L377:
1808:..\src/interruptions.c ****                     
1809:..\src/interruptions.c ****                 }
1810:..\src/interruptions.c ****             }
1811:..\src/interruptions.c **** 
1812:..\src/interruptions.c ****             // Assign dev_tension and reset current
1813:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 5844              		.loc 1 1813 0 discriminator 2
 5845 01f8 324B     		ldr	r3, .L468+28
 5846 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5847 01fc 1946     		mov	r1, r3
 5848 01fe 2C4B     		ldr	r3, .L468+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 138


 5849 0200 41F28832 		movw	r2, #5000
 5850 0204 43F82120 		str	r2, [r3, r1, lsl #2]
1814:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 5851              		.loc 1 1814 0 discriminator 2
 5852 0208 2E4B     		ldr	r3, .L468+28
 5853 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5854 020c 1946     		mov	r1, r3
 5855 020e 314A     		ldr	r2, .L468+44
 5856 0210 0B46     		mov	r3, r1
 5857 0212 DB00     		lsls	r3, r3, #3
 5858 0214 5B1A     		subs	r3, r3, r1
 5859 0216 1B01     		lsls	r3, r3, #4
 5860 0218 1344     		add	r3, r3, r2
 5861 021a 03F58873 		add	r3, r3, #272
 5862 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5863 0220 1946     		mov	r1, r3
 5864 0222 2D4A     		ldr	r2, .L468+48
 5865 0224 3423     		movs	r3, #52
 5866 0226 03FB01F3 		mul	r3, r3, r1
 5867 022a 1344     		add	r3, r3, r2
 5868 022c 0C33     		adds	r3, r3, #12
 5869 022e 0022     		movs	r2, #0
 5870 0230 1A60     		str	r2, [r3]
1800:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5871              		.loc 1 1800 0 discriminator 2
 5872 0232 244B     		ldr	r3, .L468+28
 5873 0234 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5874 0236 0133     		adds	r3, r3, #1
 5875 0238 DAB2     		uxtb	r2, r3
 5876 023a 224B     		ldr	r3, .L468+28
 5877 023c 1A70     		strb	r2, [r3]
 5878              	.L376:
1800:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5879              		.loc 1 1800 0 is_stmt 0 discriminator 1
 5880 023e 214B     		ldr	r3, .L468+28
 5881 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5882 0242 012B     		cmp	r3, #1
 5883 0244 87D9     		bls	.L379
1815:..\src/interruptions.c ****         }
1816:..\src/interruptions.c ****         
1817:..\src/interruptions.c ****         // Reset emg
1818:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 5884              		.loc 1 1818 0 is_stmt 1
 5885 0246 1F4B     		ldr	r3, .L468+28
 5886 0248 0022     		movs	r2, #0
 5887 024a 1A70     		strb	r2, [r3]
 5888 024c 0CE0     		b	.L380
 5889              	.L381:
1819:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 5890              		.loc 1 1819 0 discriminator 3
 5891 024e 1D4B     		ldr	r3, .L468+28
 5892 0250 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5893 0252 1946     		mov	r1, r3
 5894 0254 214B     		ldr	r3, .L468+52
 5895 0256 0022     		movs	r2, #0
 5896 0258 43F82120 		str	r2, [r3, r1, lsl #2]
1818:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 139


 5897              		.loc 1 1818 0 discriminator 3
 5898 025c 194B     		ldr	r3, .L468+28
 5899 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5900 0260 0133     		adds	r3, r3, #1
 5901 0262 DAB2     		uxtb	r2, r3
 5902 0264 174B     		ldr	r3, .L468+28
 5903 0266 1A70     		strb	r2, [r3]
 5904              	.L380:
1818:..\src/interruptions.c ****             g_emg_meas.emg[idx] = 0;
 5905              		.loc 1 1818 0 is_stmt 0 discriminator 1
 5906 0268 164B     		ldr	r3, .L468+28
 5907 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5908 026c 012B     		cmp	r3, #1
 5909 026e EED9     		bls	.L381
1820:..\src/interruptions.c ****         }
1821:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 5910              		.loc 1 1821 0 is_stmt 1
 5911 0270 144B     		ldr	r3, .L468+28
 5912 0272 0022     		movs	r2, #0
 5913 0274 1A70     		strb	r2, [r3]
 5914 0276 0CE0     		b	.L382
 5915              	.L384:
1822:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5916              		.loc 1 1822 0 discriminator 4
 5917 0278 124B     		ldr	r3, .L468+28
 5918 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5919 027c 174A     		ldr	r2, .L468+52
 5920 027e 0233     		adds	r3, r3, #2
 5921 0280 0021     		movs	r1, #0
 5922 0282 42F82310 		str	r1, [r2, r3, lsl #2]
1821:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5923              		.loc 1 1821 0 discriminator 4
 5924 0286 0F4B     		ldr	r3, .L468+28
 5925 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5926 028a 0133     		adds	r3, r3, #1
 5927 028c DAB2     		uxtb	r2, r3
 5928 028e 0D4B     		ldr	r3, .L468+28
 5929 0290 1A70     		strb	r2, [r3]
 5930              	.L382:
1821:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5931              		.loc 1 1821 0 is_stmt 0 discriminator 1
 5932 0292 0E4B     		ldr	r3, .L468+36
 5933 0294 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 5934 0298 002B     		cmp	r3, #0
 5935 029a 00F00782 		beq	.L457
1821:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = 0;
 5936              		.loc 1 1821 0 discriminator 3
 5937 029e 094B     		ldr	r3, .L468+28
 5938 02a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5939 02a2 052B     		cmp	r3, #5
 5940 02a4 E8D9     		bls	.L384
1790:..\src/interruptions.c ****         // PSoC is powered through uUSB
 5941              		.loc 1 1790 0 is_stmt 1
 5942 02a6 01E2     		b	.L457
 5943              	.L469:
 5944              		.align	2
 5945              	.L468:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 140


 5946 02a8 00000000 		.word	interrupt_flag
 5947 02ac 00000000 		.word	ADC_buf
 5948 02b0 00000000 		.word	dev_tension
 5949 02b4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 5950 02b8 06000000 		.word	first_tension_valid.10540
 5951 02bc 00000000 		.word	tension_valid
 5952 02c0 78010000 		.word	count.10541
 5953 02c4 7A010000 		.word	idx.10543
 5954 02c8 00000000 		.word	pow_tension
 5955 02cc 00000000 		.word	c_mem
 5956 02d0 00000000 		.word	g_ref
 5957 02d4 00000000 		.word	g_mem
 5958 02d8 00000000 		.word	g_meas
 5959 02dc 00000000 		.word	g_emg_meas
 5960              	.L373:
1823:..\src/interruptions.c ****         }
1824:..\src/interruptions.c ****         
1825:..\src/interruptions.c ****     }
1826:..\src/interruptions.c ****     else {
1827:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1828:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1829:..\src/interruptions.c ****         
1830:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1831:..\src/interruptions.c ****         
1832:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 5961              		.loc 1 1832 0
 5962 02e0 9B4B     		ldr	r3, .L470
 5963 02e2 1B68     		ldr	r3, [r3]
 5964 02e4 B3F57A7F 		cmp	r3, #1000
 5965 02e8 0DD1     		bne	.L386
 5966              		.loc 1 1832 0 is_stmt 0 discriminator 1
 5967 02ea 9A4B     		ldr	r3, .L470+4
 5968 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5969 02ee 002B     		cmp	r3, #0
 5970 02f0 09D1     		bne	.L386
1833:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1834:..\src/interruptions.c ****             tension_valid = TRUE;   
 5971              		.loc 1 1834 0 is_stmt 1
 5972 02f2 984B     		ldr	r3, .L470+4
 5973 02f4 0122     		movs	r2, #1
 5974 02f6 1A70     		strb	r2, [r3]
1835:..\src/interruptions.c ****             count = 0;
 5975              		.loc 1 1835 0
 5976 02f8 974B     		ldr	r3, .L470+8
 5977 02fa 0022     		movs	r2, #0
 5978 02fc 1A80     		strh	r2, [r3]	@ movhi
1836:..\src/interruptions.c ****             v_count = 0;
 5979              		.loc 1 1836 0
 5980 02fe 944B     		ldr	r3, .L470
 5981 0300 0022     		movs	r2, #0
 5982 0302 1A60     		str	r2, [r3]
 5983 0304 2CE0     		b	.L387
 5984              	.L386:
1837:..\src/interruptions.c ****         }
1838:..\src/interruptions.c ****         else {  
1839:..\src/interruptions.c ****             // wait for battery voltage stabilization
1840:..\src/interruptions.c ****             if (v_count < 1000) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 141


 5985              		.loc 1 1840 0
 5986 0306 924B     		ldr	r3, .L470
 5987 0308 1B68     		ldr	r3, [r3]
 5988 030a B3F57A7F 		cmp	r3, #1000
 5989 030e 04D2     		bcs	.L388
1841:..\src/interruptions.c ****                 v_count = v_count + 1;
 5990              		.loc 1 1841 0
 5991 0310 8F4B     		ldr	r3, .L470
 5992 0312 1B68     		ldr	r3, [r3]
 5993 0314 0133     		adds	r3, r3, #1
 5994 0316 8E4A     		ldr	r2, .L470
 5995 0318 1360     		str	r3, [r2]
 5996              	.L388:
1842:..\src/interruptions.c ****             }
1843:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5997              		.loc 1 1843 0
 5998 031a 904B     		ldr	r3, .L470+12
 5999 031c 0022     		movs	r2, #0
 6000 031e 1A70     		strb	r2, [r3]
 6001 0320 1AE0     		b	.L389
 6002              	.L390:
1844:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6003              		.loc 1 1844 0 discriminator 3
 6004 0322 8E4B     		ldr	r3, .L470+12
 6005 0324 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6006 0326 1C46     		mov	r4, r3
 6007 0328 8C4B     		ldr	r3, .L470+12
 6008 032a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6009 032c 1A46     		mov	r2, r3
 6010 032e 8C4B     		ldr	r3, .L470+16
 6011 0330 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6012 0334 894B     		ldr	r3, .L470+12
 6013 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6014 0338 DB00     		lsls	r3, r3, #3
 6015 033a 8A4A     		ldr	r2, .L470+20
 6016 033c 1344     		add	r3, r3, r2
 6017 033e 1946     		mov	r1, r3
 6018 0340 FFF7FEFF 		bl	filter
 6019 0344 0246     		mov	r2, r0
 6020 0346 884B     		ldr	r3, .L470+24
 6021 0348 43F82420 		str	r2, [r3, r4, lsl #2]
1843:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6022              		.loc 1 1843 0 discriminator 3
 6023 034c 834B     		ldr	r3, .L470+12
 6024 034e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6025 0350 0133     		adds	r3, r3, #1
 6026 0352 DAB2     		uxtb	r2, r3
 6027 0354 814B     		ldr	r3, .L470+12
 6028 0356 1A70     		strb	r2, [r3]
 6029              	.L389:
1843:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6030              		.loc 1 1843 0 is_stmt 0 discriminator 1
 6031 0358 804B     		ldr	r3, .L470+12
 6032 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6033 035c 012B     		cmp	r3, #1
 6034 035e E0D9     		bls	.L390
 6035              	.L387:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 142


1845:..\src/interruptions.c ****             }
1846:..\src/interruptions.c ****         }
1847:..\src/interruptions.c **** 
1848:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6036              		.loc 1 1848 0 is_stmt 1
 6037 0360 7E4B     		ldr	r3, .L470+12
 6038 0362 0022     		movs	r2, #0
 6039 0364 1A70     		strb	r2, [r3]
 6040 0366 17E0     		b	.L391
 6041              	.L393:
1849:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6042              		.loc 1 1849 0
 6043 0368 7C4B     		ldr	r3, .L470+12
 6044 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6045 036c 1946     		mov	r1, r3
 6046 036e 7F4A     		ldr	r2, .L470+28
 6047 0370 0B46     		mov	r3, r1
 6048 0372 DB00     		lsls	r3, r3, #3
 6049 0374 5B1A     		subs	r3, r3, r1
 6050 0376 1B01     		lsls	r3, r3, #4
 6051 0378 1344     		add	r3, r3, r2
 6052 037a E133     		adds	r3, r3, #225
 6053 037c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6054 037e 002B     		cmp	r3, #0
 6055 0380 04D0     		beq	.L392
1850:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6056              		.loc 1 1850 0
 6057 0382 764B     		ldr	r3, .L470+12
 6058 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6059 0386 1846     		mov	r0, r3
 6060 0388 FFF7FEFF 		bl	pwm_limit_search
 6061              	.L392:
1848:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6062              		.loc 1 1848 0 discriminator 2
 6063 038c 734B     		ldr	r3, .L470+12
 6064 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6065 0390 0133     		adds	r3, r3, #1
 6066 0392 DAB2     		uxtb	r2, r3
 6067 0394 714B     		ldr	r3, .L470+12
 6068 0396 1A70     		strb	r2, [r3]
 6069              	.L391:
1848:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6070              		.loc 1 1848 0 is_stmt 0 discriminator 1
 6071 0398 704B     		ldr	r3, .L470+12
 6072 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6073 039c 012B     		cmp	r3, #1
 6074 039e E3D9     		bls	.L393
1851:..\src/interruptions.c ****         }
1852:..\src/interruptions.c ****         
1853:..\src/interruptions.c ****         // Filter and Set currents
1854:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6075              		.loc 1 1854 0 is_stmt 1
 6076 03a0 724B     		ldr	r3, .L470+28
 6077 03a2 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6078 03a6 002B     		cmp	r3, #0
 6079 03a8 21D1     		bne	.L394
1855:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 143


 6080              		.loc 1 1855 0
 6081 03aa 704B     		ldr	r3, .L470+28
 6082 03ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6083 03b0 1C46     		mov	r4, r3
 6084 03b2 6F4B     		ldr	r3, .L470+32
 6085 03b4 B3F90230 		ldrsh	r3, [r3, #2]
 6086 03b8 A3F5CE63 		sub	r3, r3, #1648
 6087 03bc 45F66A02 		movw	r2, #22634
 6088 03c0 02FB03F3 		mul	r3, r2, r3
 6089 03c4 5B13     		asrs	r3, r3, #13
 6090 03c6 1BB2     		sxth	r3, r3
 6091 03c8 1A46     		mov	r2, r3
 6092 03ca 6A4B     		ldr	r3, .L470+36
 6093 03cc 93F90030 		ldrsb	r3, [r3]
 6094 03d0 03FB02F3 		mul	r3, r3, r2
 6095 03d4 6849     		ldr	r1, .L470+40
 6096 03d6 1846     		mov	r0, r3
 6097 03d8 FFF7FEFF 		bl	filter
 6098 03dc 0146     		mov	r1, r0
 6099 03de 674A     		ldr	r2, .L470+44
 6100 03e0 3423     		movs	r3, #52
 6101 03e2 03FB04F3 		mul	r3, r3, r4
 6102 03e6 1344     		add	r3, r3, r2
 6103 03e8 0C33     		adds	r3, r3, #12
 6104 03ea 1960     		str	r1, [r3]
 6105 03ec 1BE0     		b	.L395
 6106              	.L394:
1856:..\src/interruptions.c ****         } else { // [GS]
1857:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6107              		.loc 1 1857 0
 6108 03ee 5F4B     		ldr	r3, .L470+28
 6109 03f0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6110 03f4 1846     		mov	r0, r3
 6111 03f6 5E4B     		ldr	r3, .L470+32
 6112 03f8 B3F90230 		ldrsh	r3, [r3, #2]
 6113 03fc A3F26362 		subw	r2, r3, #1635
 6114 0400 1346     		mov	r3, r2
 6115 0402 1B01     		lsls	r3, r3, #4
 6116 0404 9B1A     		subs	r3, r3, r2
 6117 0406 5B01     		lsls	r3, r3, #5
 6118 0408 1B11     		asrs	r3, r3, #4
 6119 040a 1BB2     		sxth	r3, r3
 6120 040c 1A46     		mov	r2, r3
 6121 040e 594B     		ldr	r3, .L470+36
 6122 0410 93F90030 		ldrsb	r3, [r3]
 6123 0414 03FB02F2 		mul	r2, r3, r2
 6124 0418 5849     		ldr	r1, .L470+44
 6125 041a 3423     		movs	r3, #52
 6126 041c 03FB00F3 		mul	r3, r3, r0
 6127 0420 0B44     		add	r3, r3, r1
 6128 0422 0C33     		adds	r3, r3, #12
 6129 0424 1A60     		str	r2, [r3]
 6130              	.L395:
1858:..\src/interruptions.c ****         }  
1859:..\src/interruptions.c **** 
1860:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1861:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 144


 6131              		.loc 1 1861 0
 6132 0426 514B     		ldr	r3, .L470+28
 6133 0428 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6134 042c 1D46     		mov	r5, r3
 6135 042e 4F4B     		ldr	r3, .L470+28
 6136 0430 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6137 0434 1946     		mov	r1, r3
 6138 0436 514A     		ldr	r2, .L470+44
 6139 0438 3423     		movs	r3, #52
 6140 043a 03FB01F3 		mul	r3, r3, r1
 6141 043e 1344     		add	r3, r3, r2
 6142 0440 0C33     		adds	r3, r3, #12
 6143 0442 1C68     		ldr	r4, [r3]
 6144 0444 494B     		ldr	r3, .L470+28
 6145 0446 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6146 044a 1946     		mov	r1, r3
 6147 044c 4B4A     		ldr	r2, .L470+44
 6148 044e 3423     		movs	r3, #52
 6149 0450 03FB01F3 		mul	r3, r3, r1
 6150 0454 1344     		add	r3, r3, r2
 6151 0456 1A68     		ldr	r2, [r3]
 6152 0458 444B     		ldr	r3, .L470+28
 6153 045a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6154 045e 1846     		mov	r0, r3
 6155 0460 4249     		ldr	r1, .L470+28
 6156 0462 0346     		mov	r3, r0
 6157 0464 5B00     		lsls	r3, r3, #1
 6158 0466 0344     		add	r3, r3, r0
 6159 0468 1B01     		lsls	r3, r3, #4
 6160 046a 0B44     		add	r3, r3, r1
 6161 046c 03F29513 		addw	r3, r3, #405
 6162 0470 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6163 0472 42FA03F6 		asr	r6, r2, r3
 6164 0476 3D4B     		ldr	r3, .L470+28
 6165 0478 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6166 047c 1946     		mov	r1, r3
 6167 047e 3F4A     		ldr	r2, .L470+44
 6168 0480 3423     		movs	r3, #52
 6169 0482 03FB01F3 		mul	r3, r3, r1
 6170 0486 1344     		add	r3, r3, r2
 6171 0488 1C33     		adds	r3, r3, #28
 6172 048a 1A68     		ldr	r2, [r3]
 6173 048c 374B     		ldr	r3, .L470+28
 6174 048e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6175 0492 1846     		mov	r0, r3
 6176 0494 3549     		ldr	r1, .L470+28
 6177 0496 0346     		mov	r3, r0
 6178 0498 5B00     		lsls	r3, r3, #1
 6179 049a 0344     		add	r3, r3, r0
 6180 049c 1B01     		lsls	r3, r3, #4
 6181 049e 0B44     		add	r3, r3, r1
 6182 04a0 03F29513 		addw	r3, r3, #405
 6183 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6184 04a6 42FA03FE 		asr	lr, r2, r3
 6185 04aa 354B     		ldr	r3, .L470+48
 6186 04ac 1A68     		ldr	r2, [r3]
 6187 04ae 2F4B     		ldr	r3, .L470+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 145


 6188 04b0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6189 04b4 1846     		mov	r0, r3
 6190 04b6 2D49     		ldr	r1, .L470+28
 6191 04b8 0346     		mov	r3, r0
 6192 04ba 5B00     		lsls	r3, r3, #1
 6193 04bc 0344     		add	r3, r3, r0
 6194 04be 1B01     		lsls	r3, r3, #4
 6195 04c0 0B44     		add	r3, r3, r1
 6196 04c2 03F29513 		addw	r3, r3, #405
 6197 04c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6198 04c8 42FA03F3 		asr	r3, r2, r3
 6199 04cc 7246     		mov	r2, lr
 6200 04ce 3146     		mov	r1, r6
 6201 04d0 0020     		movs	r0, #0
 6202 04d2 FFF7FEFF 		bl	curr_estim
 6203 04d6 0346     		mov	r3, r0
 6204 04d8 E31A     		subs	r3, r4, r3
 6205 04da 2A49     		ldr	r1, .L470+52
 6206 04dc 1846     		mov	r0, r3
 6207 04de FFF7FEFF 		bl	filter
 6208 04e2 0346     		mov	r3, r0
 6209 04e4 1BB2     		sxth	r3, r3
 6210 04e6 1946     		mov	r1, r3
 6211 04e8 244A     		ldr	r2, .L470+44
 6212 04ea 3423     		movs	r3, #52
 6213 04ec 03FB05F3 		mul	r3, r3, r5
 6214 04f0 1344     		add	r3, r3, r2
 6215 04f2 1033     		adds	r3, r3, #16
 6216 04f4 1960     		str	r1, [r3]
1862:..\src/interruptions.c ****         
1863:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1864:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6217              		.loc 1 1864 0
 6218 04f6 244B     		ldr	r3, .L470+56
 6219 04f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6220 04fa 042B     		cmp	r3, #4
 6221 04fc 40F2CC80 		bls	.L396
1865:..\src/interruptions.c ****             // Filter and Set currents
1866:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6222              		.loc 1 1866 0
 6223 0500 1A4B     		ldr	r3, .L470+28
 6224 0502 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6225 0506 002B     		cmp	r3, #0
 6226 0508 42D1     		bne	.L397
1867:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6227              		.loc 1 1867 0
 6228 050a 184B     		ldr	r3, .L470+28
 6229 050c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6230 0510 1C46     		mov	r4, r3
 6231 0512 174B     		ldr	r3, .L470+32
 6232 0514 B3F90A30 		ldrsh	r3, [r3, #10]
 6233 0518 A3F5CE63 		sub	r3, r3, #1648
 6234 051c 45F66A02 		movw	r2, #22634
 6235 0520 02FB03F3 		mul	r3, r2, r3
 6236 0524 5B13     		asrs	r3, r3, #13
 6237 0526 1BB2     		sxth	r3, r3
 6238 0528 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 146


 6239 052a 124B     		ldr	r3, .L470+36
 6240 052c 93F90030 		ldrsb	r3, [r3]
 6241 0530 03FB02F3 		mul	r3, r3, r2
 6242 0534 1549     		ldr	r1, .L470+60
 6243 0536 1846     		mov	r0, r3
 6244 0538 FFF7FEFF 		bl	filter
 6245 053c 0146     		mov	r1, r0
 6246 053e 0F4A     		ldr	r2, .L470+44
 6247 0540 3423     		movs	r3, #52
 6248 0542 03FB04F3 		mul	r3, r3, r4
 6249 0546 1344     		add	r3, r3, r2
 6250 0548 0C33     		adds	r3, r3, #12
 6251 054a 1960     		str	r1, [r3]
 6252 054c 3CE0     		b	.L398
 6253              	.L471:
 6254 054e 00BF     		.align	2
 6255              	.L470:
 6256 0550 7C010000 		.word	v_count.10542
 6257 0554 00000000 		.word	tension_valid
 6258 0558 78010000 		.word	count.10541
 6259 055c 7A010000 		.word	idx.10543
 6260 0560 00000000 		.word	dev_tension
 6261 0564 00000000 		.word	filt_v
 6262 0568 00000000 		.word	dev_tension_f
 6263 056c 00000000 		.word	g_mem
 6264 0570 00000000 		.word	ADC_buf
 6265 0574 00000000 		.word	pwm_sign
 6266 0578 00000000 		.word	filt_i
 6267 057c 00000000 		.word	g_meas
 6268 0580 00000000 		.word	g_ref
 6269 0584 00000000 		.word	filt_curr_diff
 6270 0588 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6271 058c 08000000 		.word	filt_i+8
 6272              	.L397:
1868:..\src/interruptions.c ****             } else { // [GS]
1869:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6273              		.loc 1 1869 0
 6274 0590 B94B     		ldr	r3, .L472
 6275 0592 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6276 0596 1846     		mov	r0, r3
 6277 0598 B84B     		ldr	r3, .L472+4
 6278 059a B3F90A30 		ldrsh	r3, [r3, #10]
 6279 059e A3F26362 		subw	r2, r3, #1635
 6280 05a2 1346     		mov	r3, r2
 6281 05a4 1B01     		lsls	r3, r3, #4
 6282 05a6 9B1A     		subs	r3, r3, r2
 6283 05a8 5B01     		lsls	r3, r3, #5
 6284 05aa 1B11     		asrs	r3, r3, #4
 6285 05ac 1BB2     		sxth	r3, r3
 6286 05ae 1A46     		mov	r2, r3
 6287 05b0 B34B     		ldr	r3, .L472+8
 6288 05b2 93F90030 		ldrsb	r3, [r3]
 6289 05b6 03FB02F2 		mul	r2, r3, r2
 6290 05ba B249     		ldr	r1, .L472+12
 6291 05bc 3423     		movs	r3, #52
 6292 05be 03FB00F3 		mul	r3, r3, r0
 6293 05c2 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 147


 6294 05c4 0C33     		adds	r3, r3, #12
 6295 05c6 1A60     		str	r2, [r3]
 6296              	.L398:
1870:..\src/interruptions.c ****             }  
1871:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
1872:..\src/interruptions.c ****             
1873:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6297              		.loc 1 1873 0
 6298 05c8 AB4B     		ldr	r3, .L472
 6299 05ca 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6300 05ce 1D46     		mov	r5, r3
 6301 05d0 A94B     		ldr	r3, .L472
 6302 05d2 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6303 05d6 1946     		mov	r1, r3
 6304 05d8 AA4A     		ldr	r2, .L472+12
 6305 05da 3423     		movs	r3, #52
 6306 05dc 03FB01F3 		mul	r3, r3, r1
 6307 05e0 1344     		add	r3, r3, r2
 6308 05e2 0C33     		adds	r3, r3, #12
 6309 05e4 1C68     		ldr	r4, [r3]
 6310 05e6 A44B     		ldr	r3, .L472
 6311 05e8 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6312 05ec 1946     		mov	r1, r3
 6313 05ee A54A     		ldr	r2, .L472+12
 6314 05f0 3423     		movs	r3, #52
 6315 05f2 03FB01F3 		mul	r3, r3, r1
 6316 05f6 1344     		add	r3, r3, r2
 6317 05f8 1A68     		ldr	r2, [r3]
 6318 05fa 9F4B     		ldr	r3, .L472
 6319 05fc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6320 0600 1846     		mov	r0, r3
 6321 0602 9D49     		ldr	r1, .L472
 6322 0604 0346     		mov	r3, r0
 6323 0606 5B00     		lsls	r3, r3, #1
 6324 0608 0344     		add	r3, r3, r0
 6325 060a 1B01     		lsls	r3, r3, #4
 6326 060c 0B44     		add	r3, r3, r1
 6327 060e 03F29513 		addw	r3, r3, #405
 6328 0612 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6329 0614 42FA03F6 		asr	r6, r2, r3
 6330 0618 974B     		ldr	r3, .L472
 6331 061a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6332 061e 1946     		mov	r1, r3
 6333 0620 984A     		ldr	r2, .L472+12
 6334 0622 3423     		movs	r3, #52
 6335 0624 03FB01F3 		mul	r3, r3, r1
 6336 0628 1344     		add	r3, r3, r2
 6337 062a 1C33     		adds	r3, r3, #28
 6338 062c 1A68     		ldr	r2, [r3]
 6339 062e 924B     		ldr	r3, .L472
 6340 0630 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6341 0634 1846     		mov	r0, r3
 6342 0636 9049     		ldr	r1, .L472
 6343 0638 0346     		mov	r3, r0
 6344 063a 5B00     		lsls	r3, r3, #1
 6345 063c 0344     		add	r3, r3, r0
 6346 063e 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 148


 6347 0640 0B44     		add	r3, r3, r1
 6348 0642 03F29513 		addw	r3, r3, #405
 6349 0646 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6350 0648 42FA03FE 		asr	lr, r2, r3
 6351 064c 8E4B     		ldr	r3, .L472+16
 6352 064e 1A69     		ldr	r2, [r3, #16]
 6353 0650 894B     		ldr	r3, .L472
 6354 0652 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6355 0656 1846     		mov	r0, r3
 6356 0658 8749     		ldr	r1, .L472
 6357 065a 0346     		mov	r3, r0
 6358 065c 5B00     		lsls	r3, r3, #1
 6359 065e 0344     		add	r3, r3, r0
 6360 0660 1B01     		lsls	r3, r3, #4
 6361 0662 0B44     		add	r3, r3, r1
 6362 0664 03F29513 		addw	r3, r3, #405
 6363 0668 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6364 066a 42FA03F3 		asr	r3, r2, r3
 6365 066e 7246     		mov	r2, lr
 6366 0670 3146     		mov	r1, r6
 6367 0672 0120     		movs	r0, #1
 6368 0674 FFF7FEFF 		bl	curr_estim
 6369 0678 0346     		mov	r3, r0
 6370 067a E31A     		subs	r3, r4, r3
 6371 067c 8349     		ldr	r1, .L472+20
 6372 067e 1846     		mov	r0, r3
 6373 0680 FFF7FEFF 		bl	filter
 6374 0684 0346     		mov	r3, r0
 6375 0686 1BB2     		sxth	r3, r3
 6376 0688 1946     		mov	r1, r3
 6377 068a 7E4A     		ldr	r2, .L472+12
 6378 068c 3423     		movs	r3, #52
 6379 068e 03FB05F3 		mul	r3, r3, r5
 6380 0692 1344     		add	r3, r3, r2
 6381 0694 1033     		adds	r3, r3, #16
 6382 0696 1960     		str	r1, [r3]
 6383              	.L396:
1874:..\src/interruptions.c ****         }
1875:..\src/interruptions.c ****     
1876:..\src/interruptions.c ****         // Check Interrupt 
1877:..\src/interruptions.c ****     
1878:..\src/interruptions.c ****         if (interrupt_flag){
 6384              		.loc 1 1878 0
 6385 0698 7D4B     		ldr	r3, .L472+24
 6386 069a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6387 069c 002B     		cmp	r3, #0
 6388 069e 06D0     		beq	.L385
1879:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6389              		.loc 1 1879 0
 6390 06a0 7B4B     		ldr	r3, .L472+24
 6391 06a2 0022     		movs	r2, #0
 6392 06a4 1A70     		strb	r2, [r3]
1880:..\src/interruptions.c ****             interrupt_manager();
 6393              		.loc 1 1880 0
 6394 06a6 FFF7FEFF 		bl	interrupt_manager
 6395 06aa 00E0     		b	.L385
 6396              	.L457:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 149


1790:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6397              		.loc 1 1790 0
 6398 06ac 00BF     		nop
 6399              	.L385:
1881:..\src/interruptions.c ****         }
1882:..\src/interruptions.c **** 
1883:..\src/interruptions.c ****     }
1884:..\src/interruptions.c ****     
1885:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1886:..\src/interruptions.c ****         
1887:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1888:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6400              		.loc 1 1888 0
 6401 06ae 794B     		ldr	r3, .L472+28
 6402 06b0 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 6403 06b4 002B     		cmp	r3, #0
 6404 06b6 05D1     		bne	.L399
1889:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6405              		.loc 1 1889 0
 6406 06b8 774B     		ldr	r3, .L472+32
 6407 06ba 0022     		movs	r2, #0
 6408 06bc 1A70     		strb	r2, [r3]
1890:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6409              		.loc 1 1890 0
 6410 06be 774B     		ldr	r3, .L472+36
 6411 06c0 0022     		movs	r2, #0
 6412 06c2 1A70     		strb	r2, [r3]
 6413              	.L399:
1891:..\src/interruptions.c ****     }
1892:..\src/interruptions.c **** 
1893:..\src/interruptions.c ****     // EMG 1 calibration state machine
1894:..\src/interruptions.c ****    
1895:..\src/interruptions.c ****     // Calibration state machine
1896:..\src/interruptions.c ****     switch(emg_1_status) {
 6414              		.loc 1 1896 0
 6415 06c4 744B     		ldr	r3, .L472+32
 6416 06c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6417 06c8 032B     		cmp	r3, #3
 6418 06ca 00F2CE80 		bhi	.L458
 6419 06ce 01A2     		adr	r2, .L402
 6420 06d0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6421              		.p2align 2
 6422              	.L402:
 6423 06d4 E5060000 		.word	.L401+1
 6424 06d8 6F070000 		.word	.L403+1
 6425 06dc 85070000 		.word	.L404+1
 6426 06e0 C1070000 		.word	.L405+1
 6427              		.p2align 1
 6428              	.L401:
1897:..\src/interruptions.c ****         case NORMAL: // normal execution
1898:..\src/interruptions.c ****             i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range to 
 6429              		.loc 1 1898 0
 6430 06e4 6B4B     		ldr	r3, .L472+28
 6431 06e6 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6432 06ea 0233     		adds	r3, r3, #2
 6433 06ec 634A     		ldr	r2, .L472+4
 6434 06ee 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 150


 6435 06f2 A3F26763 		subw	r3, r3, #1639
 6436 06f6 5722     		movs	r2, #87
 6437 06f8 02FB03F3 		mul	r3, r2, r3
 6438 06fc 5B11     		asrs	r3, r3, #5
 6439 06fe 7B60     		str	r3, [r7, #4]
1899:..\src/interruptions.c ****             //i_aux = (int32)(ADC_buf[2 + c_mem.switch_emg]);
1900:..\src/interruptions.c ****             if (i_aux < 0) 
 6440              		.loc 1 1900 0
 6441 0700 7B68     		ldr	r3, [r7, #4]
 6442 0702 002B     		cmp	r3, #0
 6443 0704 01DA     		bge	.L406
1901:..\src/interruptions.c ****                 i_aux = 0;
 6444              		.loc 1 1901 0
 6445 0706 0023     		movs	r3, #0
 6446 0708 7B60     		str	r3, [r7, #4]
 6447              	.L406:
1902:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6448              		.loc 1 1902 0
 6449 070a 6549     		ldr	r1, .L472+40
 6450 070c 7868     		ldr	r0, [r7, #4]
 6451 070e FFF7FEFF 		bl	filter
 6452 0712 7860     		str	r0, [r7, #4]
1903:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6453              		.loc 1 1903 0
 6454 0714 7B68     		ldr	r3, [r7, #4]
 6455 0716 9B02     		lsls	r3, r3, #10
 6456 0718 1A46     		mov	r2, r3
 6457 071a 574B     		ldr	r3, .L472
 6458 071c D3F8F431 		ldr	r3, [r3, #500]
 6459 0720 B2FBF3F3 		udiv	r3, r2, r3
 6460 0724 7B60     		str	r3, [r7, #4]
1904:..\src/interruptions.c **** 
1905:..\src/interruptions.c ****             if (interrupt_flag){
 6461              		.loc 1 1905 0
 6462 0726 5A4B     		ldr	r3, .L472+24
 6463 0728 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6464 072a 002B     		cmp	r3, #0
 6465 072c 04D0     		beq	.L407
1906:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6466              		.loc 1 1906 0
 6467 072e 584B     		ldr	r3, .L472+24
 6468 0730 0022     		movs	r2, #0
 6469 0732 1A70     		strb	r2, [r3]
1907:..\src/interruptions.c ****                 interrupt_manager();
 6470              		.loc 1 1907 0
 6471 0734 FFF7FEFF 		bl	interrupt_manager
 6472              	.L407:
1908:..\src/interruptions.c ****             }
1909:..\src/interruptions.c ****             //Saturation
1910:..\src/interruptions.c ****             if (i_aux < 0)
 6473              		.loc 1 1910 0
 6474 0738 7B68     		ldr	r3, [r7, #4]
 6475 073a 002B     		cmp	r3, #0
 6476 073c 02DA     		bge	.L408
1911:..\src/interruptions.c ****                 i_aux = 0;
 6477              		.loc 1 1911 0
 6478 073e 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 151


 6479 0740 7B60     		str	r3, [r7, #4]
 6480 0742 06E0     		b	.L409
 6481              	.L408:
1912:..\src/interruptions.c ****             else 
1913:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6482              		.loc 1 1913 0
 6483 0744 7B68     		ldr	r3, [r7, #4]
 6484 0746 B3F5806F 		cmp	r3, #1024
 6485 074a 02DD     		ble	.L409
1914:..\src/interruptions.c ****                     i_aux = 1024;
 6486              		.loc 1 1914 0
 6487 074c 4FF48063 		mov	r3, #1024
 6488 0750 7B60     		str	r3, [r7, #4]
 6489              	.L409:
1915:..\src/interruptions.c ****             
1916:..\src/interruptions.c ****             g_emg_meas.emg[0] = i_aux;
 6490              		.loc 1 1916 0
 6491 0752 544A     		ldr	r2, .L472+44
 6492 0754 7B68     		ldr	r3, [r7, #4]
 6493 0756 1360     		str	r3, [r2]
1917:..\src/interruptions.c **** 
1918:..\src/interruptions.c ****             if (interrupt_flag){
 6494              		.loc 1 1918 0
 6495 0758 4D4B     		ldr	r3, .L472+24
 6496 075a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6497 075c 002B     		cmp	r3, #0
 6498 075e 00F08680 		beq	.L459
1919:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6499              		.loc 1 1919 0
 6500 0762 4B4B     		ldr	r3, .L472+24
 6501 0764 0022     		movs	r2, #0
 6502 0766 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****                 interrupt_manager();
 6503              		.loc 1 1920 0
 6504 0768 FFF7FEFF 		bl	interrupt_manager
1921:..\src/interruptions.c ****             }
1922:..\src/interruptions.c ****             
1923:..\src/interruptions.c ****             break;
 6505              		.loc 1 1923 0
 6506 076c 7FE0     		b	.L459
 6507              	.L403:
1924:..\src/interruptions.c **** 
1925:..\src/interruptions.c ****         case RESET: // reset variables
1926:..\src/interruptions.c ****             emg_counter_1 = 0;
 6508              		.loc 1 1926 0
 6509 076e 4E4B     		ldr	r3, .L472+48
 6510 0770 0022     		movs	r2, #0
 6511 0772 1A80     		strh	r2, [r3]	@ movhi
1927:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 6512              		.loc 1 1927 0
 6513 0774 404B     		ldr	r3, .L472
 6514 0776 0022     		movs	r2, #0
 6515 0778 C3F8F421 		str	r2, [r3, #500]
1928:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6516              		.loc 1 1928 0
 6517 077c 464B     		ldr	r3, .L472+32
 6518 077e 0222     		movs	r2, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 152


 6519 0780 1A70     		strb	r2, [r3]
1929:..\src/interruptions.c ****             break;
 6520              		.loc 1 1929 0
 6521 0782 96E0     		b	.L411
 6522              	.L404:
1930:..\src/interruptions.c **** 
1931:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1932:..\src/interruptions.c ****             emg_counter_1++;
 6523              		.loc 1 1932 0
 6524 0784 484B     		ldr	r3, .L472+48
 6525 0786 1B88     		ldrh	r3, [r3]
 6526 0788 0133     		adds	r3, r3, #1
 6527 078a 9AB2     		uxth	r2, r3
 6528 078c 464B     		ldr	r3, .L472+48
 6529 078e 1A80     		strh	r2, [r3]	@ movhi
1933:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6530              		.loc 1 1933 0
 6531 0790 454B     		ldr	r3, .L472+48
 6532 0792 1B88     		ldrh	r3, [r3]
 6533 0794 B3F5FA7F 		cmp	r3, #500
 6534 0798 6BD1     		bne	.L460
1934:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6535              		.loc 1 1934 0
 6536 079a 434B     		ldr	r3, .L472+48
 6537 079c 0022     		movs	r2, #0
 6538 079e 1A80     		strh	r2, [r3]	@ movhi
1935:..\src/interruptions.c ****                 LED_control(1);
 6539              		.loc 1 1935 0
 6540 07a0 0120     		movs	r0, #1
 6541 07a2 FFF7FEFF 		bl	LED_control
1936:..\src/interruptions.c **** 				
1937:..\src/interruptions.c ****                 if (interrupt_flag){
 6542              		.loc 1 1937 0
 6543 07a6 3A4B     		ldr	r3, .L472+24
 6544 07a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6545 07aa 002B     		cmp	r3, #0
 6546 07ac 04D0     		beq	.L413
1938:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6547              		.loc 1 1938 0
 6548 07ae 384B     		ldr	r3, .L472+24
 6549 07b0 0022     		movs	r2, #0
 6550 07b2 1A70     		strb	r2, [r3]
1939:..\src/interruptions.c ****                     interrupt_manager();
 6551              		.loc 1 1939 0
 6552 07b4 FFF7FEFF 		bl	interrupt_manager
 6553              	.L413:
1940:..\src/interruptions.c ****                 }
1941:..\src/interruptions.c ****                 
1942:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 6554              		.loc 1 1942 0
 6555 07b8 374B     		ldr	r3, .L472+32
 6556 07ba 0322     		movs	r2, #3
 6557 07bc 1A70     		strb	r2, [r3]
1943:..\src/interruptions.c ****             }
1944:..\src/interruptions.c ****             break;
 6558              		.loc 1 1944 0
 6559 07be 58E0     		b	.L460
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 153


 6560              	.L405:
1945:..\src/interruptions.c **** 
1946:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1947:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1948:..\src/interruptions.c ****             emg_counter_1++;
 6561              		.loc 1 1948 0
 6562 07c0 394B     		ldr	r3, .L472+48
 6563 07c2 1B88     		ldrh	r3, [r3]
 6564 07c4 0133     		adds	r3, r3, #1
 6565 07c6 9AB2     		uxth	r2, r3
 6566 07c8 374B     		ldr	r3, .L472+48
 6567 07ca 1A80     		strh	r2, [r3]	@ movhi
1949:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6568              		.loc 1 1949 0
 6569 07cc 314B     		ldr	r3, .L472+28
 6570 07ce 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6571 07d2 0233     		adds	r3, r3, #2
 6572 07d4 294A     		ldr	r2, .L472+4
 6573 07d6 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6574 07da 002B     		cmp	r3, #0
 6575 07dc 07DA     		bge	.L414
1950:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 6576              		.loc 1 1950 0
 6577 07de 2D4B     		ldr	r3, .L472+28
 6578 07e0 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6579 07e4 0233     		adds	r3, r3, #2
 6580 07e6 254A     		ldr	r2, .L472+4
 6581 07e8 0021     		movs	r1, #0
 6582 07ea 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6583              	.L414:
1951:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6584              		.loc 1 1951 0
 6585 07ee 294B     		ldr	r3, .L472+28
 6586 07f0 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6587 07f4 0233     		adds	r3, r3, #2
 6588 07f6 214A     		ldr	r2, .L472+4
 6589 07f8 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6590 07fc 2849     		ldr	r1, .L472+40
 6591 07fe 1846     		mov	r0, r3
 6592 0800 FFF7FEFF 		bl	filter
 6593 0804 0246     		mov	r2, r0
 6594 0806 1C4B     		ldr	r3, .L472
 6595 0808 D3F8F431 		ldr	r3, [r3, #500]
 6596 080c 1344     		add	r3, r3, r2
 6597 080e 1A4A     		ldr	r2, .L472
 6598 0810 C2F8F431 		str	r3, [r2, #500]
1952:..\src/interruptions.c ****             
1953:..\src/interruptions.c ****             if (interrupt_flag){
 6599              		.loc 1 1953 0
 6600 0814 1E4B     		ldr	r3, .L472+24
 6601 0816 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6602 0818 002B     		cmp	r3, #0
 6603 081a 04D0     		beq	.L415
1954:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6604              		.loc 1 1954 0
 6605 081c 1C4B     		ldr	r3, .L472+24
 6606 081e 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 154


 6607 0820 1A70     		strb	r2, [r3]
1955:..\src/interruptions.c ****                 interrupt_manager();
 6608              		.loc 1 1955 0
 6609 0822 FFF7FEFF 		bl	interrupt_manager
 6610              	.L415:
1956:..\src/interruptions.c ****             }
1957:..\src/interruptions.c ****             
1958:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6611              		.loc 1 1958 0
 6612 0826 204B     		ldr	r3, .L472+48
 6613 0828 1B88     		ldrh	r3, [r3]
 6614 082a B3F57A7F 		cmp	r3, #1000
 6615 082e 3FD1     		bne	.L461
1959:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6616              		.loc 1 1959 0
 6617 0830 114B     		ldr	r3, .L472
 6618 0832 D3F8F431 		ldr	r3, [r3, #500]
 6619 0836 1D4A     		ldr	r2, .L472+52
 6620 0838 A2FB0323 		umull	r2, r3, r2, r3
 6621 083c 9B09     		lsrs	r3, r3, #6
 6622 083e 0E4A     		ldr	r2, .L472
 6623 0840 C2F8F431 		str	r3, [r2, #500]
1960:..\src/interruptions.c **** 
1961:..\src/interruptions.c ****                 if (interrupt_flag){
 6624              		.loc 1 1961 0
 6625 0844 124B     		ldr	r3, .L472+24
 6626 0846 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6627 0848 002B     		cmp	r3, #0
 6628 084a 04D0     		beq	.L417
1962:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6629              		.loc 1 1962 0
 6630 084c 104B     		ldr	r3, .L472+24
 6631 084e 0022     		movs	r2, #0
 6632 0850 1A70     		strb	r2, [r3]
1963:..\src/interruptions.c ****                     interrupt_manager();
 6633              		.loc 1 1963 0
 6634 0852 FFF7FEFF 		bl	interrupt_manager
 6635              	.L417:
1964:..\src/interruptions.c ****                 }                    
1965:..\src/interruptions.c ****                 
1966:..\src/interruptions.c ****                 LED_control(0);
 6636              		.loc 1 1966 0
 6637 0856 0020     		movs	r0, #0
 6638 0858 FFF7FEFF 		bl	LED_control
1967:..\src/interruptions.c **** 				
1968:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6639              		.loc 1 1968 0
 6640 085c 124B     		ldr	r3, .L472+48
 6641 085e 0022     		movs	r2, #0
 6642 0860 1A80     		strh	r2, [r3]	@ movhi
1969:..\src/interruptions.c **** 
1970:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6643              		.loc 1 1970 0
 6644 0862 0D4B     		ldr	r3, .L472+32
 6645 0864 0022     		movs	r2, #0
 6646 0866 1A70     		strb	r2, [r3]
1971:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 155


1972:..\src/interruptions.c ****             break;
 6647              		.loc 1 1972 0
 6648 0868 22E0     		b	.L461
 6649              	.L458:
1973:..\src/interruptions.c **** 
1974:..\src/interruptions.c ****         default:
1975:..\src/interruptions.c ****             break;
 6650              		.loc 1 1975 0
 6651 086a 00BF     		nop
 6652 086c 21E0     		b	.L411
 6653              	.L459:
1923:..\src/interruptions.c **** 
 6654              		.loc 1 1923 0
 6655 086e 00BF     		nop
 6656 0870 1FE0     		b	.L411
 6657              	.L460:
1944:..\src/interruptions.c **** 
 6658              		.loc 1 1944 0
 6659 0872 00BF     		nop
 6660 0874 1DE0     		b	.L411
 6661              	.L473:
 6662 0876 00BF     		.align	2
 6663              	.L472:
 6664 0878 00000000 		.word	g_mem
 6665 087c 00000000 		.word	ADC_buf
 6666 0880 00000000 		.word	pwm_sign
 6667 0884 00000000 		.word	g_meas
 6668 0888 00000000 		.word	g_ref
 6669 088c 08000000 		.word	filt_curr_diff+8
 6670 0890 00000000 		.word	interrupt_flag
 6671 0894 00000000 		.word	c_mem
 6672 0898 00000000 		.word	emg_1_status
 6673 089c 00000000 		.word	emg_2_status
 6674 08a0 00000000 		.word	filt_emg
 6675 08a4 00000000 		.word	g_emg_meas
 6676 08a8 80010000 		.word	emg_counter_1.10538
 6677 08ac D34D6210 		.word	274877907
 6678              	.L461:
1972:..\src/interruptions.c **** 
 6679              		.loc 1 1972 0
 6680 08b0 00BF     		nop
 6681              	.L411:
1976:..\src/interruptions.c ****     }
1977:..\src/interruptions.c **** 
1978:..\src/interruptions.c ****     if (interrupt_flag){
 6682              		.loc 1 1978 0
 6683 08b2 854B     		ldr	r3, .L474
 6684 08b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6685 08b6 002B     		cmp	r3, #0
 6686 08b8 04D0     		beq	.L418
1979:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6687              		.loc 1 1979 0
 6688 08ba 834B     		ldr	r3, .L474
 6689 08bc 0022     		movs	r2, #0
 6690 08be 1A70     		strb	r2, [r3]
1980:..\src/interruptions.c ****         interrupt_manager();
 6691              		.loc 1 1980 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 156


 6692 08c0 FFF7FEFF 		bl	interrupt_manager
 6693              	.L418:
1981:..\src/interruptions.c ****     }
1982:..\src/interruptions.c ****     // EMG 2 calibration state machine
1983:..\src/interruptions.c ****     switch(emg_2_status) {
 6694              		.loc 1 1983 0
 6695 08c4 814B     		ldr	r3, .L474+4
 6696 08c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6697 08c8 052B     		cmp	r3, #5
 6698 08ca 00F2A581 		bhi	.L462
 6699 08ce 01A2     		adr	r2, .L421
 6700 08d0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6701              		.p2align 2
 6702              	.L421:
 6703 08d4 ED080000 		.word	.L420+1
 6704 08d8 65090000 		.word	.L422+1
 6705 08dc 8D090000 		.word	.L423+1
 6706 08e0 CB090000 		.word	.L424+1
 6707 08e4 7D0A0000 		.word	.L425+1
 6708 08e8 8F0A0000 		.word	.L426+1
 6709              		.p2align 1
 6710              	.L420:
1984:..\src/interruptions.c ****         case NORMAL: // normal execution
1985:..\src/interruptions.c ****             i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1640) * 87) >> 5;  //map range to 
 6711              		.loc 1 1985 0
 6712 08ec 784B     		ldr	r3, .L474+8
 6713 08ee 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6714 08f2 C3F10303 		rsb	r3, r3, #3
 6715 08f6 774A     		ldr	r2, .L474+12
 6716 08f8 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6717 08fc A3F5CD63 		sub	r3, r3, #1640
 6718 0900 5722     		movs	r2, #87
 6719 0902 02FB03F3 		mul	r3, r2, r3
 6720 0906 5B11     		asrs	r3, r3, #5
 6721 0908 7B60     		str	r3, [r7, #4]
1986:..\src/interruptions.c ****             //i_aux = (int32)(ADC_buf[3 - c_mem.switch_emg]);
1987:..\src/interruptions.c ****                 if (i_aux < 0)
 6722              		.loc 1 1987 0
 6723 090a 7B68     		ldr	r3, [r7, #4]
 6724 090c 002B     		cmp	r3, #0
 6725 090e 01DA     		bge	.L427
1988:..\src/interruptions.c ****                     i_aux = 0;
 6726              		.loc 1 1988 0
 6727 0910 0023     		movs	r3, #0
 6728 0912 7B60     		str	r3, [r7, #4]
 6729              	.L427:
1989:..\src/interruptions.c ****                 i_aux = filter(i_aux, &filt_emg[1]);
 6730              		.loc 1 1989 0
 6731 0914 7049     		ldr	r1, .L474+16
 6732 0916 7868     		ldr	r0, [r7, #4]
 6733 0918 FFF7FEFF 		bl	filter
 6734 091c 7860     		str	r0, [r7, #4]
1990:..\src/interruptions.c ****                 i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 6735              		.loc 1 1990 0
 6736 091e 7B68     		ldr	r3, [r7, #4]
 6737 0920 9B02     		lsls	r3, r3, #10
 6738 0922 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 157


 6739 0924 6D4B     		ldr	r3, .L474+20
 6740 0926 D3F8F831 		ldr	r3, [r3, #504]
 6741 092a B2FBF3F3 		udiv	r3, r2, r3
 6742 092e 7B60     		str	r3, [r7, #4]
1991:..\src/interruptions.c ****     
1992:..\src/interruptions.c ****                 if (interrupt_flag){
 6743              		.loc 1 1992 0
 6744 0930 654B     		ldr	r3, .L474
 6745 0932 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6746 0934 002B     		cmp	r3, #0
 6747 0936 04D0     		beq	.L428
1993:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6748              		.loc 1 1993 0
 6749 0938 634B     		ldr	r3, .L474
 6750 093a 0022     		movs	r2, #0
 6751 093c 1A70     		strb	r2, [r3]
1994:..\src/interruptions.c ****                     interrupt_manager();
 6752              		.loc 1 1994 0
 6753 093e FFF7FEFF 		bl	interrupt_manager
 6754              	.L428:
1995:..\src/interruptions.c ****                 }
1996:..\src/interruptions.c ****                 
1997:..\src/interruptions.c ****                 if (i_aux < 0) 
 6755              		.loc 1 1997 0
 6756 0942 7B68     		ldr	r3, [r7, #4]
 6757 0944 002B     		cmp	r3, #0
 6758 0946 02DA     		bge	.L429
1998:..\src/interruptions.c ****                     i_aux = 0;
 6759              		.loc 1 1998 0
 6760 0948 0023     		movs	r3, #0
 6761 094a 7B60     		str	r3, [r7, #4]
 6762 094c 06E0     		b	.L430
 6763              	.L429:
1999:..\src/interruptions.c ****                 else 
2000:..\src/interruptions.c ****                     if (i_aux > 1024)
 6764              		.loc 1 2000 0
 6765 094e 7B68     		ldr	r3, [r7, #4]
 6766 0950 B3F5806F 		cmp	r3, #1024
 6767 0954 02DD     		ble	.L430
2001:..\src/interruptions.c ****                         i_aux = 1024;
 6768              		.loc 1 2001 0
 6769 0956 4FF48063 		mov	r3, #1024
 6770 095a 7B60     		str	r3, [r7, #4]
 6771              	.L430:
2002:..\src/interruptions.c ****                 
2003:..\src/interruptions.c ****                 g_emg_meas.emg[1] = i_aux;
 6772              		.loc 1 2003 0
 6773 095c 604A     		ldr	r2, .L474+24
 6774 095e 7B68     		ldr	r3, [r7, #4]
 6775 0960 5360     		str	r3, [r2, #4]
2004:..\src/interruptions.c **** 
2005:..\src/interruptions.c ****             break;
 6776              		.loc 1 2005 0
 6777 0962 62E1     		b	.L431
 6778              	.L422:
2006:..\src/interruptions.c **** 
2007:..\src/interruptions.c ****         case RESET: // reset variables
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 158


2008:..\src/interruptions.c ****             emg_counter_2 = 0;
 6779              		.loc 1 2008 0
 6780 0964 5F4B     		ldr	r3, .L474+28
 6781 0966 0022     		movs	r2, #0
 6782 0968 1A80     		strh	r2, [r3]	@ movhi
2009:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 6783              		.loc 1 2009 0
 6784 096a 5C4B     		ldr	r3, .L474+20
 6785 096c 0022     		movs	r2, #0
 6786 096e C3F8F821 		str	r2, [r3, #504]
2010:..\src/interruptions.c **** 
2011:..\src/interruptions.c ****             if (interrupt_flag){
 6787              		.loc 1 2011 0
 6788 0972 554B     		ldr	r3, .L474
 6789 0974 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6790 0976 002B     		cmp	r3, #0
 6791 0978 04D0     		beq	.L432
2012:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6792              		.loc 1 2012 0
 6793 097a 534B     		ldr	r3, .L474
 6794 097c 0022     		movs	r2, #0
 6795 097e 1A70     		strb	r2, [r3]
2013:..\src/interruptions.c ****                 interrupt_manager();
 6796              		.loc 1 2013 0
 6797 0980 FFF7FEFF 		bl	interrupt_manager
 6798              	.L432:
2014:..\src/interruptions.c ****             }
2015:..\src/interruptions.c ****             
2016:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 6799              		.loc 1 2016 0
 6800 0984 514B     		ldr	r3, .L474+4
 6801 0986 0422     		movs	r2, #4
 6802 0988 1A70     		strb	r2, [r3]
2017:..\src/interruptions.c ****             break;
 6803              		.loc 1 2017 0
 6804 098a 4EE1     		b	.L431
 6805              	.L423:
2018:..\src/interruptions.c **** 
2019:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2020:..\src/interruptions.c ****             emg_counter_2++;
 6806              		.loc 1 2020 0
 6807 098c 554B     		ldr	r3, .L474+28
 6808 098e 1B88     		ldrh	r3, [r3]
 6809 0990 0133     		adds	r3, r3, #1
 6810 0992 9AB2     		uxth	r2, r3
 6811 0994 534B     		ldr	r3, .L474+28
 6812 0996 1A80     		strh	r2, [r3]	@ movhi
2021:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6813              		.loc 1 2021 0
 6814 0998 524B     		ldr	r3, .L474+28
 6815 099a 1B88     		ldrh	r3, [r3]
 6816 099c B3F5FA7F 		cmp	r3, #500
 6817 09a0 40F03C81 		bne	.L463
2022:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6818              		.loc 1 2022 0
 6819 09a4 4F4B     		ldr	r3, .L474+28
 6820 09a6 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 159


 6821 09a8 1A80     		strh	r2, [r3]	@ movhi
2023:..\src/interruptions.c ****                 LED_control(1);
 6822              		.loc 1 2023 0
 6823 09aa 0120     		movs	r0, #1
 6824 09ac FFF7FEFF 		bl	LED_control
2024:..\src/interruptions.c **** 
2025:..\src/interruptions.c ****                 if (interrupt_flag){
 6825              		.loc 1 2025 0
 6826 09b0 454B     		ldr	r3, .L474
 6827 09b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6828 09b4 002B     		cmp	r3, #0
 6829 09b6 04D0     		beq	.L434
2026:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6830              		.loc 1 2026 0
 6831 09b8 434B     		ldr	r3, .L474
 6832 09ba 0022     		movs	r2, #0
 6833 09bc 1A70     		strb	r2, [r3]
2027:..\src/interruptions.c ****                     interrupt_manager();
 6834              		.loc 1 2027 0
 6835 09be FFF7FEFF 		bl	interrupt_manager
 6836              	.L434:
2028:..\src/interruptions.c ****                 }
2029:..\src/interruptions.c ****                 
2030:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 6837              		.loc 1 2030 0
 6838 09c2 424B     		ldr	r3, .L474+4
 6839 09c4 0322     		movs	r2, #3
 6840 09c6 1A70     		strb	r2, [r3]
2031:..\src/interruptions.c ****             }
2032:..\src/interruptions.c ****             break;
 6841              		.loc 1 2032 0
 6842 09c8 28E1     		b	.L463
 6843              	.L424:
2033:..\src/interruptions.c **** 
2034:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2035:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2036:..\src/interruptions.c ****             emg_counter_2++;
 6844              		.loc 1 2036 0
 6845 09ca 464B     		ldr	r3, .L474+28
 6846 09cc 1B88     		ldrh	r3, [r3]
 6847 09ce 0133     		adds	r3, r3, #1
 6848 09d0 9AB2     		uxth	r2, r3
 6849 09d2 444B     		ldr	r3, .L474+28
 6850 09d4 1A80     		strh	r2, [r3]	@ movhi
2037:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 6851              		.loc 1 2037 0
 6852 09d6 3E4B     		ldr	r3, .L474+8
 6853 09d8 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6854 09dc C3F10303 		rsb	r3, r3, #3
 6855 09e0 3C4A     		ldr	r2, .L474+12
 6856 09e2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6857 09e6 002B     		cmp	r3, #0
 6858 09e8 08DA     		bge	.L435
2038:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 6859              		.loc 1 2038 0
 6860 09ea 394B     		ldr	r3, .L474+8
 6861 09ec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 160


 6862 09f0 C3F10303 		rsb	r3, r3, #3
 6863 09f4 374A     		ldr	r2, .L474+12
 6864 09f6 0021     		movs	r1, #0
 6865 09f8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6866              	.L435:
2039:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 6867              		.loc 1 2039 0
 6868 09fc 344B     		ldr	r3, .L474+8
 6869 09fe 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6870 0a02 C3F10303 		rsb	r3, r3, #3
 6871 0a06 334A     		ldr	r2, .L474+12
 6872 0a08 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6873 0a0c 3249     		ldr	r1, .L474+16
 6874 0a0e 1846     		mov	r0, r3
 6875 0a10 FFF7FEFF 		bl	filter
 6876 0a14 0246     		mov	r2, r0
 6877 0a16 314B     		ldr	r3, .L474+20
 6878 0a18 D3F8F831 		ldr	r3, [r3, #504]
 6879 0a1c 1344     		add	r3, r3, r2
 6880 0a1e 2F4A     		ldr	r2, .L474+20
 6881 0a20 C2F8F831 		str	r3, [r2, #504]
2040:..\src/interruptions.c **** 
2041:..\src/interruptions.c ****             if (interrupt_flag){
 6882              		.loc 1 2041 0
 6883 0a24 284B     		ldr	r3, .L474
 6884 0a26 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6885 0a28 002B     		cmp	r3, #0
 6886 0a2a 04D0     		beq	.L436
2042:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6887              		.loc 1 2042 0
 6888 0a2c 264B     		ldr	r3, .L474
 6889 0a2e 0022     		movs	r2, #0
 6890 0a30 1A70     		strb	r2, [r3]
2043:..\src/interruptions.c ****                 interrupt_manager();
 6891              		.loc 1 2043 0
 6892 0a32 FFF7FEFF 		bl	interrupt_manager
 6893              	.L436:
2044:..\src/interruptions.c ****             }
2045:..\src/interruptions.c ****             
2046:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 6894              		.loc 1 2046 0
 6895 0a36 2B4B     		ldr	r3, .L474+28
 6896 0a38 1B88     		ldrh	r3, [r3]
 6897 0a3a B3F57A7F 		cmp	r3, #1000
 6898 0a3e 40F0EF80 		bne	.L464
2047:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 6899              		.loc 1 2047 0
 6900 0a42 264B     		ldr	r3, .L474+20
 6901 0a44 D3F8F831 		ldr	r3, [r3, #504]
 6902 0a48 274A     		ldr	r2, .L474+32
 6903 0a4a A2FB0323 		umull	r2, r3, r2, r3
 6904 0a4e 9B09     		lsrs	r3, r3, #6
 6905 0a50 224A     		ldr	r2, .L474+20
 6906 0a52 C2F8F831 		str	r3, [r2, #504]
2048:..\src/interruptions.c ****                 LED_control(0);
 6907              		.loc 1 2048 0
 6908 0a56 0020     		movs	r0, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 161


 6909 0a58 FFF7FEFF 		bl	LED_control
2049:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6910              		.loc 1 2049 0
 6911 0a5c 214B     		ldr	r3, .L474+28
 6912 0a5e 0022     		movs	r2, #0
 6913 0a60 1A80     		strh	r2, [r3]	@ movhi
2050:..\src/interruptions.c ****             
2051:..\src/interruptions.c ****                 if (interrupt_flag){
 6914              		.loc 1 2051 0
 6915 0a62 194B     		ldr	r3, .L474
 6916 0a64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6917 0a66 002B     		cmp	r3, #0
 6918 0a68 04D0     		beq	.L438
2052:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6919              		.loc 1 2052 0
 6920 0a6a 174B     		ldr	r3, .L474
 6921 0a6c 0022     		movs	r2, #0
 6922 0a6e 1A70     		strb	r2, [r3]
2053:..\src/interruptions.c ****                     interrupt_manager();
 6923              		.loc 1 2053 0
 6924 0a70 FFF7FEFF 		bl	interrupt_manager
 6925              	.L438:
2054:..\src/interruptions.c ****                 }
2055:..\src/interruptions.c ****                 
2056:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 6926              		.loc 1 2056 0
 6927 0a74 154B     		ldr	r3, .L474+4
 6928 0a76 0522     		movs	r2, #5
 6929 0a78 1A70     		strb	r2, [r3]
2057:..\src/interruptions.c ****             }
2058:..\src/interruptions.c ****             break;
 6930              		.loc 1 2058 0
 6931 0a7a D1E0     		b	.L464
 6932              	.L425:
2059:..\src/interruptions.c **** 
2060:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2061:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 6933              		.loc 1 2061 0
 6934 0a7c 1B4B     		ldr	r3, .L474+36
 6935 0a7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6936 0a80 002B     		cmp	r3, #0
 6937 0a82 40F0CF80 		bne	.L465
2062:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 6938              		.loc 1 2062 0
 6939 0a86 114B     		ldr	r3, .L474+4
 6940 0a88 0222     		movs	r2, #2
 6941 0a8a 1A70     		strb	r2, [r3]
2063:..\src/interruptions.c ****             break;
 6942              		.loc 1 2063 0
 6943 0a8c CAE0     		b	.L465
 6944              	.L426:
2064:..\src/interruptions.c **** 
2065:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2066:..\src/interruptions.c ****             emg_counter_2++;
 6945              		.loc 1 2066 0
 6946 0a8e 154B     		ldr	r3, .L474+28
 6947 0a90 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 162


 6948 0a92 0133     		adds	r3, r3, #1
 6949 0a94 9AB2     		uxth	r2, r3
 6950 0a96 134B     		ldr	r3, .L474+28
 6951 0a98 1A80     		strh	r2, [r3]	@ movhi
2067:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6952              		.loc 1 2067 0
 6953 0a9a 124B     		ldr	r3, .L474+28
 6954 0a9c 1B88     		ldrh	r3, [r3]
 6955 0a9e B3F5FA7F 		cmp	r3, #500
 6956 0aa2 40F0C180 		bne	.L466
2068:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6957              		.loc 1 2068 0
 6958 0aa6 0F4B     		ldr	r3, .L474+28
 6959 0aa8 0022     		movs	r2, #0
 6960 0aaa 1A80     		strh	r2, [r3]	@ movhi
2069:..\src/interruptions.c ****                 
2070:..\src/interruptions.c ****                 if (interrupt_flag){
 6961              		.loc 1 2070 0
 6962 0aac 064B     		ldr	r3, .L474
 6963 0aae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6964 0ab0 002B     		cmp	r3, #0
 6965 0ab2 04D0     		beq	.L441
2071:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6966              		.loc 1 2071 0
 6967 0ab4 044B     		ldr	r3, .L474
 6968 0ab6 0022     		movs	r2, #0
 6969 0ab8 1A70     		strb	r2, [r3]
2072:..\src/interruptions.c ****                     interrupt_manager();
 6970              		.loc 1 2072 0
 6971 0aba FFF7FEFF 		bl	interrupt_manager
 6972              	.L441:
2073:..\src/interruptions.c ****                 }
2074:..\src/interruptions.c ****                 
2075:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6973              		.loc 1 2075 0
 6974 0abe 0C4B     		ldr	r3, .L474+40
 6975 0ac0 0022     		movs	r2, #0
 6976 0ac2 1A70     		strb	r2, [r3]
 6977 0ac4 9CE0     		b	.L442
 6978              	.L475:
 6979 0ac6 00BF     		.align	2
 6980              	.L474:
 6981 0ac8 00000000 		.word	interrupt_flag
 6982 0acc 00000000 		.word	emg_2_status
 6983 0ad0 00000000 		.word	c_mem
 6984 0ad4 00000000 		.word	ADC_buf
 6985 0ad8 08000000 		.word	filt_emg+8
 6986 0adc 00000000 		.word	g_mem
 6987 0ae0 00000000 		.word	g_emg_meas
 6988 0ae4 82010000 		.word	emg_counter_2.10539
 6989 0ae8 D34D6210 		.word	274877907
 6990 0aec 00000000 		.word	emg_1_status
 6991 0af0 7A010000 		.word	idx.10543
 6992              	.L446:
2076:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6993              		.loc 1 2076 0
 6994 0af4 7F4B     		ldr	r3, .L476
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 163


 6995 0af6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6996 0af8 1946     		mov	r1, r3
 6997 0afa 7F4A     		ldr	r2, .L476+4
 6998 0afc 0B46     		mov	r3, r1
 6999 0afe DB00     		lsls	r3, r3, #3
 7000 0b00 5B1A     		subs	r3, r3, r1
 7001 0b02 1B01     		lsls	r3, r3, #4
 7002 0b04 1344     		add	r3, r3, r2
 7003 0b06 03F58773 		add	r3, r3, #270
 7004 0b0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7005 0b0c 022B     		cmp	r3, #2
 7006 0b0e 29D0     		beq	.L443
2077:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7007              		.loc 1 2077 0 discriminator 1
 7008 0b10 784B     		ldr	r3, .L476
 7009 0b12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7010 0b14 1946     		mov	r1, r3
 7011 0b16 784A     		ldr	r2, .L476+4
 7012 0b18 0B46     		mov	r3, r1
 7013 0b1a DB00     		lsls	r3, r3, #3
 7014 0b1c 5B1A     		subs	r3, r3, r1
 7015 0b1e 1B01     		lsls	r3, r3, #4
 7016 0b20 1344     		add	r3, r3, r2
 7017 0b22 03F58773 		add	r3, r3, #270
 7018 0b26 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2076:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7019              		.loc 1 2076 0 discriminator 1
 7020 0b28 032B     		cmp	r3, #3
 7021 0b2a 1BD0     		beq	.L443
2078:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7022              		.loc 1 2078 0
 7023 0b2c 714B     		ldr	r3, .L476
 7024 0b2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7025 0b30 1946     		mov	r1, r3
 7026 0b32 714A     		ldr	r2, .L476+4
 7027 0b34 0B46     		mov	r3, r1
 7028 0b36 DB00     		lsls	r3, r3, #3
 7029 0b38 5B1A     		subs	r3, r3, r1
 7030 0b3a 1B01     		lsls	r3, r3, #4
 7031 0b3c 1344     		add	r3, r3, r2
 7032 0b3e 03F58773 		add	r3, r3, #270
 7033 0b42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2077:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7034              		.loc 1 2077 0
 7035 0b44 042B     		cmp	r3, #4
 7036 0b46 0DD0     		beq	.L443
2079:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 7037              		.loc 1 2079 0
 7038 0b48 6A4B     		ldr	r3, .L476
 7039 0b4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7040 0b4c 1946     		mov	r1, r3
 7041 0b4e 6A4A     		ldr	r2, .L476+4
 7042 0b50 0B46     		mov	r3, r1
 7043 0b52 DB00     		lsls	r3, r3, #3
 7044 0b54 5B1A     		subs	r3, r3, r1
 7045 0b56 1B01     		lsls	r3, r3, #4
 7046 0b58 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 164


 7047 0b5a 03F58773 		add	r3, r3, #270
 7048 0b5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2078:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7049              		.loc 1 2078 0
 7050 0b60 052B     		cmp	r3, #5
 7051 0b62 47D1     		bne	.L444
 7052              	.L443:
2080:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7053              		.loc 1 2080 0
 7054 0b64 634B     		ldr	r3, .L476
 7055 0b66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7056 0b68 1946     		mov	r1, r3
 7057 0b6a 634A     		ldr	r2, .L476+4
 7058 0b6c 0B46     		mov	r3, r1
 7059 0b6e DB00     		lsls	r3, r3, #3
 7060 0b70 5B1A     		subs	r3, r3, r1
 7061 0b72 1B01     		lsls	r3, r3, #4
 7062 0b74 1344     		add	r3, r3, r2
 7063 0b76 03F20F13 		addw	r3, r3, #271
 7064 0b7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7065 0b7c 002B     		cmp	r3, #0
 7066 0b7e 19D1     		bne	.L445
2081:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7067              		.loc 1 2081 0
 7068 0b80 5C4B     		ldr	r3, .L476
 7069 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7070 0b84 1846     		mov	r0, r3
 7071 0b86 5B4B     		ldr	r3, .L476
 7072 0b88 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7073 0b8a 1946     		mov	r1, r3
 7074 0b8c 5B4A     		ldr	r2, .L476+8
 7075 0b8e 0B46     		mov	r3, r1
 7076 0b90 DB00     		lsls	r3, r3, #3
 7077 0b92 5B1A     		subs	r3, r3, r1
 7078 0b94 1B01     		lsls	r3, r3, #4
 7079 0b96 1344     		add	r3, r3, r2
 7080 0b98 03F58873 		add	r3, r3, #272
 7081 0b9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7082 0b9e 1946     		mov	r1, r3
 7083 0ba0 574A     		ldr	r2, .L476+12
 7084 0ba2 3423     		movs	r3, #52
 7085 0ba4 03FB01F3 		mul	r3, r3, r1
 7086 0ba8 1344     		add	r3, r3, r2
 7087 0baa 1A68     		ldr	r2, [r3]
 7088 0bac 5549     		ldr	r1, .L476+16
 7089 0bae 0301     		lsls	r3, r0, #4
 7090 0bb0 0B44     		add	r3, r3, r1
 7091 0bb2 1A60     		str	r2, [r3]
 7092              	.L445:
2082:..\src/interruptions.c ****                         }
2083:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7093              		.loc 1 2083 0
 7094 0bb4 4F4B     		ldr	r3, .L476
 7095 0bb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7096 0bb8 1846     		mov	r0, r3
 7097 0bba 4E4B     		ldr	r3, .L476
 7098 0bbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 165


 7099 0bbe 1946     		mov	r1, r3
 7100 0bc0 4D4A     		ldr	r2, .L476+4
 7101 0bc2 0B46     		mov	r3, r1
 7102 0bc4 DB00     		lsls	r3, r3, #3
 7103 0bc6 5B1A     		subs	r3, r3, r1
 7104 0bc8 1B01     		lsls	r3, r3, #4
 7105 0bca 1344     		add	r3, r3, r2
 7106 0bcc E033     		adds	r3, r3, #224
 7107 0bce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7108 0bd0 4C4A     		ldr	r2, .L476+16
 7109 0bd2 0301     		lsls	r3, r0, #4
 7110 0bd4 1344     		add	r3, r3, r2
 7111 0bd6 0C33     		adds	r3, r3, #12
 7112 0bd8 0A46     		mov	r2, r1
 7113 0bda 1A70     		strb	r2, [r3]
2084:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7114              		.loc 1 2084 0
 7115 0bdc 454B     		ldr	r3, .L476
 7116 0bde 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7117 0be0 444B     		ldr	r3, .L476
 7118 0be2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7119 0be4 474A     		ldr	r2, .L476+16
 7120 0be6 1B01     		lsls	r3, r3, #4
 7121 0be8 1344     		add	r3, r3, r2
 7122 0bea 0C33     		adds	r3, r3, #12
 7123 0bec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7124 0bee 1946     		mov	r1, r3
 7125 0bf0 FFF7FEFF 		bl	enable_motor
 7126              	.L444:
2075:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7127              		.loc 1 2075 0 discriminator 2
 7128 0bf4 3F4B     		ldr	r3, .L476
 7129 0bf6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7130 0bf8 0133     		adds	r3, r3, #1
 7131 0bfa DAB2     		uxtb	r2, r3
 7132 0bfc 3D4B     		ldr	r3, .L476
 7133 0bfe 1A70     		strb	r2, [r3]
 7134              	.L442:
2075:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7135              		.loc 1 2075 0 is_stmt 0 discriminator 1
 7136 0c00 3C4B     		ldr	r3, .L476
 7137 0c02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7138 0c04 012B     		cmp	r3, #1
 7139 0c06 7FF675AF 		bls	.L446
2085:..\src/interruptions.c ****                     }
2086:..\src/interruptions.c ****                 }
2087:..\src/interruptions.c ****                     
2088:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7140              		.loc 1 2088 0 is_stmt 1
 7141 0c0a 0020     		movs	r0, #0
 7142 0c0c FFF7FEFF 		bl	memStore
2089:..\src/interruptions.c ****                     
2090:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7143              		.loc 1 2090 0
 7144 0c10 3D4B     		ldr	r3, .L476+20
 7145 0c12 0022     		movs	r2, #0
 7146 0c14 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 166


2091:..\src/interruptions.c ****             }
2092:..\src/interruptions.c ****             break;
 7147              		.loc 1 2092 0
 7148 0c16 07E0     		b	.L466
 7149              	.L462:
2093:..\src/interruptions.c ****         default:
2094:..\src/interruptions.c ****             break;
 7150              		.loc 1 2094 0
 7151 0c18 00BF     		nop
 7152 0c1a 06E0     		b	.L431
 7153              	.L463:
2032:..\src/interruptions.c **** 
 7154              		.loc 1 2032 0
 7155 0c1c 00BF     		nop
 7156 0c1e 04E0     		b	.L431
 7157              	.L464:
2058:..\src/interruptions.c **** 
 7158              		.loc 1 2058 0
 7159 0c20 00BF     		nop
 7160 0c22 02E0     		b	.L431
 7161              	.L465:
2063:..\src/interruptions.c **** 
 7162              		.loc 1 2063 0
 7163 0c24 00BF     		nop
 7164 0c26 00E0     		b	.L431
 7165              	.L466:
2092:..\src/interruptions.c ****         default:
 7166              		.loc 1 2092 0
 7167 0c28 00BF     		nop
 7168              	.L431:
2095:..\src/interruptions.c ****     }
2096:..\src/interruptions.c ****         
2097:..\src/interruptions.c ****     if (interrupt_flag){
 7169              		.loc 1 2097 0
 7170 0c2a 384B     		ldr	r3, .L476+24
 7171 0c2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7172 0c2e 002B     		cmp	r3, #0
 7173 0c30 04D0     		beq	.L447
2098:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7174              		.loc 1 2098 0
 7175 0c32 364B     		ldr	r3, .L476+24
 7176 0c34 0022     		movs	r2, #0
 7177 0c36 1A70     		strb	r2, [r3]
2099:..\src/interruptions.c ****         interrupt_manager();
 7178              		.loc 1 2099 0
 7179 0c38 FFF7FEFF 		bl	interrupt_manager
 7180              	.L447:
2100:..\src/interruptions.c ****     }
2101:..\src/interruptions.c ****     
2102:..\src/interruptions.c ****     // Read also EMG additional sensors port
2103:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 7181              		.loc 1 2103 0
 7182 0c3c 344B     		ldr	r3, .L476+28
 7183 0c3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7184 0c40 062B     		cmp	r3, #6
 7185 0c42 52D9     		bls	.L467
2104:..\src/interruptions.c ****         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 167


2105:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 7186              		.loc 1 2105 0
 7187 0c44 2B4B     		ldr	r3, .L476
 7188 0c46 0022     		movs	r2, #0
 7189 0c48 1A70     		strb	r2, [r3]
 7190 0c4a 4AE0     		b	.L449
 7191              	.L456:
2106:..\src/interruptions.c ****             
2107:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 7192              		.loc 1 2107 0
 7193 0c4c 294B     		ldr	r3, .L476
 7194 0c4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7195 0c50 0633     		adds	r3, r3, #6
 7196 0c52 304A     		ldr	r2, .L476+32
 7197 0c54 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7198 0c58 7B60     		str	r3, [r7, #4]
2108:..\src/interruptions.c ****             if (i_aux < 0) 
 7199              		.loc 1 2108 0
 7200 0c5a 7B68     		ldr	r3, [r7, #4]
 7201 0c5c 002B     		cmp	r3, #0
 7202 0c5e 01DA     		bge	.L450
2109:..\src/interruptions.c ****                 i_aux = 0;
 7203              		.loc 1 2109 0
 7204 0c60 0023     		movs	r3, #0
 7205 0c62 7B60     		str	r3, [r7, #4]
 7206              	.L450:
2110:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 7207              		.loc 1 2110 0
 7208 0c64 234B     		ldr	r3, .L476
 7209 0c66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7210 0c68 0233     		adds	r3, r3, #2
 7211 0c6a DB00     		lsls	r3, r3, #3
 7212 0c6c 2A4A     		ldr	r2, .L476+36
 7213 0c6e 1344     		add	r3, r3, r2
 7214 0c70 1946     		mov	r1, r3
 7215 0c72 7868     		ldr	r0, [r7, #4]
 7216 0c74 FFF7FEFF 		bl	filter
 7217 0c78 7860     		str	r0, [r7, #4]
2111:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 7218              		.loc 1 2111 0
 7219 0c7a 7B68     		ldr	r3, [r7, #4]
 7220 0c7c 9B02     		lsls	r3, r3, #10
 7221 0c7e 002B     		cmp	r3, #0
 7222 0c80 01DA     		bge	.L451
 7223 0c82 03F2FF33 		addw	r3, r3, #1023
 7224              	.L451:
 7225 0c86 9B12     		asrs	r3, r3, #10
 7226 0c88 7B60     		str	r3, [r7, #4]
2112:..\src/interruptions.c **** 
2113:..\src/interruptions.c ****             if (interrupt_flag){
 7227              		.loc 1 2113 0
 7228 0c8a 204B     		ldr	r3, .L476+24
 7229 0c8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7230 0c8e 002B     		cmp	r3, #0
 7231 0c90 04D0     		beq	.L452
2114:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7232              		.loc 1 2114 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 168


 7233 0c92 1E4B     		ldr	r3, .L476+24
 7234 0c94 0022     		movs	r2, #0
 7235 0c96 1A70     		strb	r2, [r3]
2115:..\src/interruptions.c ****                 interrupt_manager();
 7236              		.loc 1 2115 0
 7237 0c98 FFF7FEFF 		bl	interrupt_manager
 7238              	.L452:
2116:..\src/interruptions.c ****             }
2117:..\src/interruptions.c ****             //Saturation
2118:..\src/interruptions.c ****             if (i_aux < 0)
 7239              		.loc 1 2118 0
 7240 0c9c 7B68     		ldr	r3, [r7, #4]
 7241 0c9e 002B     		cmp	r3, #0
 7242 0ca0 02DA     		bge	.L453
2119:..\src/interruptions.c ****                 i_aux = 0;
 7243              		.loc 1 2119 0
 7244 0ca2 0023     		movs	r3, #0
 7245 0ca4 7B60     		str	r3, [r7, #4]
 7246 0ca6 06E0     		b	.L454
 7247              	.L453:
2120:..\src/interruptions.c ****             else 
2121:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7248              		.loc 1 2121 0
 7249 0ca8 7B68     		ldr	r3, [r7, #4]
 7250 0caa B3F5806F 		cmp	r3, #1024
 7251 0cae 02DD     		ble	.L454
2122:..\src/interruptions.c ****                     i_aux = 1024;
 7252              		.loc 1 2122 0
 7253 0cb0 4FF48063 		mov	r3, #1024
 7254 0cb4 7B60     		str	r3, [r7, #4]
 7255              	.L454:
2123:..\src/interruptions.c ****             
2124:..\src/interruptions.c ****             g_emg_meas.add_emg[idx] = i_aux;
 7256              		.loc 1 2124 0
 7257 0cb6 0F4B     		ldr	r3, .L476
 7258 0cb8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7259 0cba 1849     		ldr	r1, .L476+40
 7260 0cbc 0233     		adds	r3, r3, #2
 7261 0cbe 7A68     		ldr	r2, [r7, #4]
 7262 0cc0 41F82320 		str	r2, [r1, r3, lsl #2]
2125:..\src/interruptions.c **** 
2126:..\src/interruptions.c ****             if (interrupt_flag){
 7263              		.loc 1 2126 0
 7264 0cc4 114B     		ldr	r3, .L476+24
 7265 0cc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7266 0cc8 002B     		cmp	r3, #0
 7267 0cca 04D0     		beq	.L455
2127:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7268              		.loc 1 2127 0
 7269 0ccc 0F4B     		ldr	r3, .L476+24
 7270 0cce 0022     		movs	r2, #0
 7271 0cd0 1A70     		strb	r2, [r3]
2128:..\src/interruptions.c ****                 interrupt_manager();
 7272              		.loc 1 2128 0
 7273 0cd2 FFF7FEFF 		bl	interrupt_manager
 7274              	.L455:
2105:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 169


 7275              		.loc 1 2105 0 discriminator 2
 7276 0cd6 074B     		ldr	r3, .L476
 7277 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7278 0cda 0133     		adds	r3, r3, #1
 7279 0cdc DAB2     		uxtb	r2, r3
 7280 0cde 054B     		ldr	r3, .L476
 7281 0ce0 1A70     		strb	r2, [r3]
 7282              	.L449:
2105:..\src/interruptions.c ****             
 7283              		.loc 1 2105 0 is_stmt 0 discriminator 1
 7284 0ce2 044B     		ldr	r3, .L476
 7285 0ce4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7286 0ce6 052B     		cmp	r3, #5
 7287 0ce8 B0D9     		bls	.L456
 7288              	.L467:
2129:..\src/interruptions.c ****             }
2130:..\src/interruptions.c ****         }
2131:..\src/interruptions.c ****     }
2132:..\src/interruptions.c ****     
2133:..\src/interruptions.c **** }
 7289              		.loc 1 2133 0 is_stmt 1
 7290 0cea 00BF     		nop
 7291 0cec 0C37     		adds	r7, r7, #12
 7292              		.cfi_def_cfa_offset 20
 7293 0cee BD46     		mov	sp, r7
 7294              		.cfi_def_cfa_register 13
 7295              		@ sp needed
 7296 0cf0 F0BD     		pop	{r4, r5, r6, r7, pc}
 7297              	.L477:
 7298 0cf2 00BF     		.align	2
 7299              	.L476:
 7300 0cf4 7A010000 		.word	idx.10543
 7301 0cf8 00000000 		.word	c_mem
 7302 0cfc 00000000 		.word	g_mem
 7303 0d00 00000000 		.word	g_meas
 7304 0d04 00000000 		.word	g_ref
 7305 0d08 00000000 		.word	emg_2_status
 7306 0d0c 00000000 		.word	interrupt_flag
 7307 0d10 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7308 0d14 00000000 		.word	ADC_buf
 7309 0d18 00000000 		.word	filt_emg
 7310 0d1c 00000000 		.word	g_emg_meas
 7311              		.cfi_endproc
 7312              	.LFE71:
 7313              		.size	analog_read_end, .-analog_read_end
 7314              		.section	.text.overcurrent_control,"ax",%progbits
 7315              		.align	2
 7316              		.global	overcurrent_control
 7317              		.thumb
 7318              		.thumb_func
 7319              		.type	overcurrent_control, %function
 7320              	overcurrent_control:
 7321              	.LFB72:
2134:..\src/interruptions.c **** 
2135:..\src/interruptions.c **** //==============================================================================
2136:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2137:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 170


2138:..\src/interruptions.c **** 
2139:..\src/interruptions.c **** void overcurrent_control() {
 7322              		.loc 1 2139 0
 7323              		.cfi_startproc
 7324              		@ args = 0, pretend = 0, frame = 8
 7325              		@ frame_needed = 1, uses_anonymous_args = 0
 7326              		@ link register save eliminated.
 7327 0000 80B4     		push	{r7}
 7328              		.cfi_def_cfa_offset 4
 7329              		.cfi_offset 7, -4
 7330 0002 83B0     		sub	sp, sp, #12
 7331              		.cfi_def_cfa_offset 16
 7332 0004 00AF     		add	r7, sp, #0
 7333              		.cfi_def_cfa_register 7
 7334              	.LBB4:
2140:..\src/interruptions.c ****     
2141:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 7335              		.loc 1 2141 0
 7336 0006 0023     		movs	r3, #0
 7337 0008 FB71     		strb	r3, [r7, #7]
 7338 000a 61E0     		b	.L479
 7339              	.L483:
2142:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7340              		.loc 1 2142 0
 7341 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7342 000e 3449     		ldr	r1, .L485
 7343 0010 1346     		mov	r3, r2
 7344 0012 DB00     		lsls	r3, r3, #3
 7345 0014 9B1A     		subs	r3, r3, r2
 7346 0016 1B01     		lsls	r3, r3, #4
 7347 0018 0B44     		add	r3, r3, r1
 7348 001a 03F58673 		add	r3, r3, #268
 7349 001e B3F90030 		ldrsh	r3, [r3]
 7350 0022 002B     		cmp	r3, #0
 7351 0024 51D0     		beq	.L480
2143:..\src/interruptions.c ****             // if the current is over the limit
2144:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 7352              		.loc 1 2144 0
 7353 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7354 0028 2E49     		ldr	r1, .L485+4
 7355 002a 1346     		mov	r3, r2
 7356 002c DB00     		lsls	r3, r3, #3
 7357 002e 9B1A     		subs	r3, r3, r2
 7358 0030 1B01     		lsls	r3, r3, #4
 7359 0032 0B44     		add	r3, r3, r1
 7360 0034 03F58873 		add	r3, r3, #272
 7361 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7362 003a 1946     		mov	r1, r3
 7363 003c 2A4A     		ldr	r2, .L485+8
 7364 003e 3423     		movs	r3, #52
 7365 0040 03FB01F3 		mul	r3, r3, r1
 7366 0044 1344     		add	r3, r3, r2
 7367 0046 0C33     		adds	r3, r3, #12
 7368 0048 1968     		ldr	r1, [r3]
 7369 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7370 004c 2448     		ldr	r0, .L485
 7371 004e 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 171


 7372 0050 DB00     		lsls	r3, r3, #3
 7373 0052 9B1A     		subs	r3, r3, r2
 7374 0054 1B01     		lsls	r3, r3, #4
 7375 0056 0344     		add	r3, r3, r0
 7376 0058 03F58673 		add	r3, r3, #268
 7377 005c B3F90030 		ldrsh	r3, [r3]
 7378 0060 9942     		cmp	r1, r3
 7379 0062 07DD     		ble	.L481
2145:..\src/interruptions.c ****                 //decrease pwm_limit
2146:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 7380              		.loc 1 2146 0
 7381 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7382 0066 214A     		ldr	r2, .L485+12
 7383 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7384 006a 013A     		subs	r2, r2, #1
 7385 006c D1B2     		uxtb	r1, r2
 7386 006e 1F4A     		ldr	r2, .L485+12
 7387 0070 D154     		strb	r1, [r2, r3]
 7388 0072 1CE0     		b	.L484
 7389              	.L481:
2147:..\src/interruptions.c ****             // if the current is in the safe zone
2148:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 7390              		.loc 1 2148 0
 7391 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7392 0076 1C4A     		ldr	r2, .L485+8
 7393 0078 3421     		movs	r1, #52
 7394 007a 01FB03F3 		mul	r3, r1, r3
 7395 007e 1344     		add	r3, r3, r2
 7396 0080 0C33     		adds	r3, r3, #12
 7397 0082 1968     		ldr	r1, [r3]
 7398 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7399 0086 1648     		ldr	r0, .L485
 7400 0088 1346     		mov	r3, r2
 7401 008a DB00     		lsls	r3, r3, #3
 7402 008c 9B1A     		subs	r3, r3, r2
 7403 008e 1B01     		lsls	r3, r3, #4
 7404 0090 0344     		add	r3, r3, r0
 7405 0092 03F58673 		add	r3, r3, #268
 7406 0096 B3F90030 		ldrsh	r3, [r3]
 7407 009a 0A3B     		subs	r3, r3, #10
 7408 009c 9942     		cmp	r1, r3
 7409 009e 06DA     		bge	.L484
2149:..\src/interruptions.c ****                 //increase pwm_limit
2150:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 7410              		.loc 1 2150 0
 7411 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7412 00a2 124A     		ldr	r2, .L485+12
 7413 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7414 00a6 0132     		adds	r2, r2, #1
 7415 00a8 D1B2     		uxtb	r1, r2
 7416 00aa 104A     		ldr	r2, .L485+12
 7417 00ac D154     		strb	r1, [r2, r3]
 7418              	.L484:
2151:..\src/interruptions.c ****             }
2152:..\src/interruptions.c **** 
2153:..\src/interruptions.c ****             // Bound pwm_limit
2154:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 172


2155:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2156:..\src/interruptions.c ****             else 
2157:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 7419              		.loc 1 2157 0
 7420 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7421 00b0 0E4A     		ldr	r2, .L485+12
 7422 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7423 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7424 00b6 0E49     		ldr	r1, .L485+16
 7425 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7426 00ba 9A42     		cmp	r2, r3
 7427 00bc 05D9     		bls	.L480
2158:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 7428              		.loc 1 2158 0
 7429 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7430 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7431 00c2 0B49     		ldr	r1, .L485+16
 7432 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7433 00c6 094A     		ldr	r2, .L485+12
 7434 00c8 D154     		strb	r1, [r2, r3]
 7435              	.L480:
2141:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7436              		.loc 1 2141 0 discriminator 2
 7437 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7438 00cc 0133     		adds	r3, r3, #1
 7439 00ce FB71     		strb	r3, [r7, #7]
 7440              	.L479:
2141:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7441              		.loc 1 2141 0 is_stmt 0 discriminator 1
 7442 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7443 00d2 012B     		cmp	r3, #1
 7444 00d4 9AD9     		bls	.L483
 7445              	.LBE4:
2159:..\src/interruptions.c ****         }
2160:..\src/interruptions.c ****     }
2161:..\src/interruptions.c **** }
 7446              		.loc 1 2161 0 is_stmt 1
 7447 00d6 00BF     		nop
 7448 00d8 0C37     		adds	r7, r7, #12
 7449              		.cfi_def_cfa_offset 4
 7450 00da BD46     		mov	sp, r7
 7451              		.cfi_def_cfa_register 13
 7452              		@ sp needed
 7453 00dc 80BC     		pop	{r7}
 7454              		.cfi_restore 7
 7455              		.cfi_def_cfa_offset 0
 7456 00de 7047     		bx	lr
 7457              	.L486:
 7458              		.align	2
 7459              	.L485:
 7460 00e0 00000000 		.word	c_mem
 7461 00e4 00000000 		.word	g_mem
 7462 00e8 00000000 		.word	g_meas
 7463 00ec 00000000 		.word	dev_pwm_limit
 7464 00f0 00000000 		.word	dev_pwm_sat
 7465              		.cfi_endproc
 7466              	.LFE72:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 173


 7467              		.size	overcurrent_control, .-overcurrent_control
 7468              		.section	.text.pwm_limit_search,"ax",%progbits
 7469              		.align	2
 7470              		.global	pwm_limit_search
 7471              		.thumb
 7472              		.thumb_func
 7473              		.type	pwm_limit_search, %function
 7474              	pwm_limit_search:
 7475              	.LFB73:
2162:..\src/interruptions.c **** 
2163:..\src/interruptions.c **** //==============================================================================
2164:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2165:..\src/interruptions.c **** //==============================================================================
2166:..\src/interruptions.c **** 
2167:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 7476              		.loc 1 2167 0
 7477              		.cfi_startproc
 7478              		@ args = 0, pretend = 0, frame = 16
 7479              		@ frame_needed = 1, uses_anonymous_args = 0
 7480              		@ link register save eliminated.
 7481 0000 80B4     		push	{r7}
 7482              		.cfi_def_cfa_offset 4
 7483              		.cfi_offset 7, -4
 7484 0002 85B0     		sub	sp, sp, #20
 7485              		.cfi_def_cfa_offset 24
 7486 0004 00AF     		add	r7, sp, #0
 7487              		.cfi_def_cfa_register 7
 7488 0006 0346     		mov	r3, r0
 7489 0008 FB71     		strb	r3, [r7, #7]
2168:..\src/interruptions.c **** 
2169:..\src/interruptions.c ****     uint8 CYDATA index;
2170:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 7490              		.loc 1 2170 0
 7491 000a 46F29C33 		movw	r3, #25500
 7492 000e FB81     		strh	r3, [r7, #14]	@ movhi
2171:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 7493              		.loc 1 2171 0
 7494 0010 42F6EC43 		movw	r3, #11500
 7495 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2172:..\src/interruptions.c ****     
2173:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 7496              		.loc 1 2173 0
 7497 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7498 0018 144A     		ldr	r2, .L492
 7499 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7500 001e FB89     		ldrh	r3, [r7, #14]
 7501 0020 9A42     		cmp	r2, r3
 7502 0022 04DD     		ble	.L488
2174:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 7503              		.loc 1 2174 0
 7504 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7505 0026 124A     		ldr	r2, .L492+4
 7506 0028 0021     		movs	r1, #0
 7507 002a D154     		strb	r1, [r2, r3]
2175:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2176:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2177:..\src/interruptions.c ****     } else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 174


2178:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2179:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2180:..\src/interruptions.c ****     }
2181:..\src/interruptions.c **** }
 7508              		.loc 1 2181 0
 7509 002c 19E0     		b	.L491
 7510              	.L488:
2175:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 7511              		.loc 1 2175 0
 7512 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7513 0030 0E4A     		ldr	r2, .L492
 7514 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7515 0036 BB89     		ldrh	r3, [r7, #12]
 7516 0038 9A42     		cmp	r2, r3
 7517 003a 04DA     		bge	.L490
2176:..\src/interruptions.c ****     } else {
 7518              		.loc 1 2176 0
 7519 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7520 003e 0C4A     		ldr	r2, .L492+4
 7521 0040 6421     		movs	r1, #100
 7522 0042 D154     		strb	r1, [r2, r3]
 7523              		.loc 1 2181 0
 7524 0044 0DE0     		b	.L491
 7525              	.L490:
2178:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 7526              		.loc 1 2178 0
 7527 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7528 0048 084A     		ldr	r2, .L492
 7529 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7530 004e BB89     		ldrh	r3, [r7, #12]
 7531 0050 D31A     		subs	r3, r2, r3
 7532 0052 5B12     		asrs	r3, r3, #9
 7533 0054 FB72     		strb	r3, [r7, #11]
2179:..\src/interruptions.c ****     }
 7534              		.loc 1 2179 0
 7535 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7536 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 7537 005a 0649     		ldr	r1, .L492+8
 7538 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7539 005e 044A     		ldr	r2, .L492+4
 7540 0060 D154     		strb	r1, [r2, r3]
 7541              	.L491:
 7542              		.loc 1 2181 0
 7543 0062 00BF     		nop
 7544 0064 1437     		adds	r7, r7, #20
 7545              		.cfi_def_cfa_offset 4
 7546 0066 BD46     		mov	sp, r7
 7547              		.cfi_def_cfa_register 13
 7548              		@ sp needed
 7549 0068 80BC     		pop	{r7}
 7550              		.cfi_restore 7
 7551              		.cfi_def_cfa_offset 0
 7552 006a 7047     		bx	lr
 7553              	.L493:
 7554              		.align	2
 7555              	.L492:
 7556 006c 00000000 		.word	dev_tension
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 175


 7557 0070 00000000 		.word	dev_pwm_sat
 7558 0074 00000000 		.word	pwm_preload_values
 7559              		.cfi_endproc
 7560              	.LFE73:
 7561              		.size	pwm_limit_search, .-pwm_limit_search
 7562              		.section	.text.cycles_counter_update,"ax",%progbits
 7563              		.align	2
 7564              		.global	cycles_counter_update
 7565              		.thumb
 7566              		.thumb_func
 7567              		.type	cycles_counter_update, %function
 7568              	cycles_counter_update:
 7569              	.LFB74:
2182:..\src/interruptions.c **** 
2183:..\src/interruptions.c **** //==============================================================================
2184:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2185:..\src/interruptions.c **** //==============================================================================
2186:..\src/interruptions.c **** 
2187:..\src/interruptions.c **** void cycles_counter_update() {
 7570              		.loc 1 2187 0
 7571              		.cfi_startproc
 7572              		@ args = 0, pretend = 0, frame = 24
 7573              		@ frame_needed = 1, uses_anonymous_args = 0
 7574 0000 80B5     		push	{r7, lr}
 7575              		.cfi_def_cfa_offset 8
 7576              		.cfi_offset 7, -8
 7577              		.cfi_offset 14, -4
 7578 0002 86B0     		sub	sp, sp, #24
 7579              		.cfi_def_cfa_offset 32
 7580 0004 00AF     		add	r7, sp, #0
 7581              		.cfi_def_cfa_register 7
2188:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2189:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2190:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2191:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2192:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2193:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2194:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2195:..\src/interruptions.c ****     int32 step;
2196:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2197:..\src/interruptions.c **** 
2198:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 7582              		.loc 1 2198 0
 7583 0006 AB4B     		ldr	r3, .L540
 7584 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7585 000c 1946     		mov	r1, r3
 7586 000e AA4A     		ldr	r2, .L540+4
 7587 0010 3423     		movs	r3, #52
 7588 0012 03FB01F3 		mul	r3, r3, r1
 7589 0016 1344     		add	r3, r3, r2
 7590 0018 1A68     		ldr	r2, [r3]
 7591 001a A64B     		ldr	r3, .L540
 7592 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7593 0020 1846     		mov	r0, r3
 7594 0022 A449     		ldr	r1, .L540
 7595 0024 0346     		mov	r3, r0
 7596 0026 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 176


 7597 0028 0344     		add	r3, r3, r0
 7598 002a 1B01     		lsls	r3, r3, #4
 7599 002c 0B44     		add	r3, r3, r1
 7600 002e 03F29513 		addw	r3, r3, #405
 7601 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7602 0034 42FA03F3 		asr	r3, r2, r3
 7603 0038 FB60     		str	r3, [r7, #12]
2199:..\src/interruptions.c ****     
2200:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2201:..\src/interruptions.c ****     switch (pos_cycle_status){
 7604              		.loc 1 2201 0
 7605 003a A04B     		ldr	r3, .L540+8
 7606 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7607 003e 012B     		cmp	r3, #1
 7608 0040 3AD0     		beq	.L496
 7609 0042 022B     		cmp	r3, #2
 7610 0044 6ED0     		beq	.L497
 7611 0046 002B     		cmp	r3, #0
 7612 0048 40F01881 		bne	.L495
2202:..\src/interruptions.c ****         case STATE_INACTIVE:
2203:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 7613              		.loc 1 2203 0
 7614 004c 994B     		ldr	r3, .L540
 7615 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7616 0052 062B     		cmp	r3, #6
 7617 0054 04D0     		beq	.L499
 7618              		.loc 1 2203 0 is_stmt 0 discriminator 1
 7619 0056 9A4B     		ldr	r3, .L540+12
 7620 0058 93F90030 		ldrsb	r3, [r3]
 7621 005c 012B     		cmp	r3, #1
 7622 005e 0CD0     		beq	.L500
 7623              	.L499:
 7624              		.loc 1 2203 0 discriminator 3
 7625 0060 944B     		ldr	r3, .L540
 7626 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7627 0066 062B     		cmp	r3, #6
 7628 0068 40F00581 		bne	.L534
 7629              		.loc 1 2203 0 discriminator 4
 7630 006c 944B     		ldr	r3, .L540+12
 7631 006e 93F90030 		ldrsb	r3, [r3]
 7632 0072 B3F1FF3F 		cmp	r3, #-1
 7633 0076 40F0FE80 		bne	.L534
 7634              	.L500:
2204:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 7635              		.loc 1 2204 0 is_stmt 1
 7636 007a 924A     		ldr	r2, .L540+16
 7637 007c FB68     		ldr	r3, [r7, #12]
 7638 007e 1360     		str	r3, [r2]
2205:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7639              		.loc 1 2205 0
 7640 0080 914B     		ldr	r3, .L540+20
 7641 0082 1A68     		ldr	r2, [r3]
 7642 0084 8F4B     		ldr	r3, .L540+16
 7643 0086 1B68     		ldr	r3, [r3]
 7644 0088 9A42     		cmp	r2, r3
 7645 008a 05DD     		ble	.L502
 7646              		.loc 1 2205 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 177


 7647 008c 8E4B     		ldr	r3, .L540+20
 7648 008e 1A68     		ldr	r2, [r3]
 7649 0090 8C4B     		ldr	r3, .L540+16
 7650 0092 1B68     		ldr	r3, [r3]
 7651 0094 D31A     		subs	r3, r2, r3
 7652 0096 04E0     		b	.L503
 7653              	.L502:
 7654              		.loc 1 2205 0 discriminator 2
 7655 0098 8A4B     		ldr	r3, .L540+16
 7656 009a 1A68     		ldr	r2, [r3]
 7657 009c 8A4B     		ldr	r3, .L540+20
 7658 009e 1B68     		ldr	r3, [r3]
 7659 00a0 D31A     		subs	r3, r2, r3
 7660              	.L503:
 7661              		.loc 1 2205 0 discriminator 4
 7662 00a2 BB60     		str	r3, [r7, #8]
2206:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 7663              		.loc 1 2206 0 is_stmt 1 discriminator 4
 7664 00a4 834B     		ldr	r3, .L540
 7665 00a6 5A6D     		ldr	r2, [r3, #84]
 7666 00a8 BB68     		ldr	r3, [r7, #8]
 7667 00aa 1344     		add	r3, r3, r2
 7668 00ac 814A     		ldr	r2, .L540
 7669 00ae 5365     		str	r3, [r2, #84]
2207:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 7670              		.loc 1 2207 0 discriminator 4
 7671 00b0 824B     		ldr	r3, .L540+8
 7672 00b2 0122     		movs	r2, #1
 7673 00b4 1A70     		strb	r2, [r3]
2208:..\src/interruptions.c ****             }
2209:..\src/interruptions.c ****             break;
 7674              		.loc 1 2209 0 discriminator 4
 7675 00b6 DEE0     		b	.L534
 7676              	.L496:
2210:..\src/interruptions.c ****         case STATE_ACTIVE:
2211:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 7677              		.loc 1 2211 0
 7678 00b8 7E4B     		ldr	r3, .L540
 7679 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7680 00be 062B     		cmp	r3, #6
 7681 00c0 05D0     		beq	.L504
 7682              		.loc 1 2211 0 is_stmt 0 discriminator 1
 7683 00c2 7F4B     		ldr	r3, .L540+12
 7684 00c4 93F90030 		ldrsb	r3, [r3]
 7685 00c8 B3F1FF3F 		cmp	r3, #-1
 7686 00cc 0BD0     		beq	.L505
 7687              	.L504:
 7688              		.loc 1 2211 0 discriminator 3
 7689 00ce 794B     		ldr	r3, .L540
 7690 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7691 00d4 062B     		cmp	r3, #6
 7692 00d6 40F0D080 		bne	.L535
 7693              		.loc 1 2211 0 discriminator 4
 7694 00da 794B     		ldr	r3, .L540+12
 7695 00dc 93F90030 		ldrsb	r3, [r3]
 7696 00e0 012B     		cmp	r3, #1
 7697 00e2 40F0CA80 		bne	.L535
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 178


 7698              	.L505:
2212:..\src/interruptions.c ****                 max_pos = curr_pos;
 7699              		.loc 1 2212 0 is_stmt 1
 7700 00e6 784A     		ldr	r2, .L540+20
 7701 00e8 FB68     		ldr	r3, [r7, #12]
 7702 00ea 1360     		str	r3, [r2]
2213:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7703              		.loc 1 2213 0
 7704 00ec 764B     		ldr	r3, .L540+20
 7705 00ee 1A68     		ldr	r2, [r3]
 7706 00f0 744B     		ldr	r3, .L540+16
 7707 00f2 1B68     		ldr	r3, [r3]
 7708 00f4 9A42     		cmp	r2, r3
 7709 00f6 05DD     		ble	.L507
 7710              		.loc 1 2213 0 is_stmt 0 discriminator 1
 7711 00f8 734B     		ldr	r3, .L540+20
 7712 00fa 1A68     		ldr	r2, [r3]
 7713 00fc 714B     		ldr	r3, .L540+16
 7714 00fe 1B68     		ldr	r3, [r3]
 7715 0100 D31A     		subs	r3, r2, r3
 7716 0102 04E0     		b	.L508
 7717              	.L507:
 7718              		.loc 1 2213 0 discriminator 2
 7719 0104 6F4B     		ldr	r3, .L540+16
 7720 0106 1A68     		ldr	r2, [r3]
 7721 0108 6F4B     		ldr	r3, .L540+20
 7722 010a 1B68     		ldr	r3, [r3]
 7723 010c D31A     		subs	r3, r2, r3
 7724              	.L508:
 7725              		.loc 1 2213 0 discriminator 4
 7726 010e BB60     		str	r3, [r7, #8]
2214:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 7727              		.loc 1 2214 0 is_stmt 1 discriminator 4
 7728 0110 684B     		ldr	r3, .L540
 7729 0112 5A6D     		ldr	r2, [r3, #84]
 7730 0114 BB68     		ldr	r3, [r7, #8]
 7731 0116 1344     		add	r3, r3, r2
 7732 0118 664A     		ldr	r2, .L540
 7733 011a 5365     		str	r3, [r2, #84]
2215:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 7734              		.loc 1 2215 0 discriminator 4
 7735 011c 674B     		ldr	r3, .L540+8
 7736 011e 0222     		movs	r2, #2
 7737 0120 1A70     		strb	r2, [r3]
2216:..\src/interruptions.c ****             }
2217:..\src/interruptions.c ****             break;
 7738              		.loc 1 2217 0 discriminator 4
 7739 0122 AAE0     		b	.L535
 7740              	.L497:
2218:..\src/interruptions.c ****         case COUNTER_INC:
2219:..\src/interruptions.c **** 
2220:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 7741              		.loc 1 2220 0
 7742 0124 684B     		ldr	r3, .L540+20
 7743 0126 1A68     		ldr	r2, [r3]
 7744 0128 664B     		ldr	r3, .L540+16
 7745 012a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 179


 7746 012c 9A42     		cmp	r2, r3
 7747 012e 05DD     		ble	.L509
 7748              		.loc 1 2220 0 is_stmt 0 discriminator 1
 7749 0130 654B     		ldr	r3, .L540+20
 7750 0132 1A68     		ldr	r2, [r3]
 7751 0134 634B     		ldr	r3, .L540+16
 7752 0136 1B68     		ldr	r3, [r3]
 7753 0138 D31A     		subs	r3, r2, r3
 7754 013a 04E0     		b	.L510
 7755              	.L509:
 7756              		.loc 1 2220 0 discriminator 2
 7757 013c 614B     		ldr	r3, .L540+16
 7758 013e 1A68     		ldr	r2, [r3]
 7759 0140 614B     		ldr	r3, .L540+20
 7760 0142 1B68     		ldr	r3, [r3]
 7761 0144 D31A     		subs	r3, r2, r3
 7762              	.L510:
 7763              		.loc 1 2220 0 discriminator 4
 7764 0146 BB60     		str	r3, [r7, #8]
2221:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 7765              		.loc 1 2221 0 is_stmt 1 discriminator 4
 7766 0148 604B     		ldr	r3, .L540+24
 7767 014a 1B68     		ldr	r3, [r3]
 7768 014c BA68     		ldr	r2, [r7, #8]
 7769 014e 9A42     		cmp	r2, r3
 7770 0150 40F38D80 		ble	.L511
2222:..\src/interruptions.c ****                 //update position histogram
2223:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 7771              		.loc 1 2223 0
 7772 0154 574B     		ldr	r3, .L540
 7773 0156 D3F8E820 		ldr	r2, [r3, #232]
 7774 015a 564B     		ldr	r3, .L540
 7775 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7776 0160 1846     		mov	r0, r3
 7777 0162 5449     		ldr	r1, .L540
 7778 0164 0346     		mov	r3, r0
 7779 0166 5B00     		lsls	r3, r3, #1
 7780 0168 0344     		add	r3, r3, r0
 7781 016a 1B01     		lsls	r3, r3, #4
 7782 016c 0B44     		add	r3, r3, r1
 7783 016e 03F29513 		addw	r3, r3, #405
 7784 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7785 0174 42FA03F3 		asr	r3, r2, r3
 7786 0178 554A     		ldr	r2, .L540+28
 7787 017a 82FB0312 		smull	r1, r2, r2, r3
 7788 017e 9210     		asrs	r2, r2, #2
 7789 0180 DB17     		asrs	r3, r3, #31
 7790 0182 D31A     		subs	r3, r2, r3
 7791 0184 7B60     		str	r3, [r7, #4]
2224:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 7792              		.loc 1 2224 0
 7793 0186 4F4B     		ldr	r3, .L540+16
 7794 0188 1A68     		ldr	r2, [r3]
 7795 018a 7B68     		ldr	r3, [r7, #4]
 7796 018c 92FBF3F3 		sdiv	r3, r2, r3
 7797 0190 FB70     		strb	r3, [r7, #3]
2225:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 180


 7798              		.loc 1 2225 0
 7799 0192 4D4B     		ldr	r3, .L540+20
 7800 0194 1A68     		ldr	r2, [r3]
 7801 0196 7B68     		ldr	r3, [r7, #4]
 7802 0198 92FBF3F3 		sdiv	r3, r2, r3
 7803 019c BB70     		strb	r3, [r7, #2]
2226:..\src/interruptions.c ****                 
2227:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2228:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 7804              		.loc 1 2228 0
 7805 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 7806 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 7807 01a2 9342     		cmp	r3, r2
 7808 01a4 28BF     		it	cs
 7809 01a6 1346     		movcs	r3, r2
 7810 01a8 7B70     		strb	r3, [r7, #1]
2229:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 7811              		.loc 1 2229 0
 7812 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 7813 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 7814 01ae 9342     		cmp	r3, r2
 7815 01b0 38BF     		it	cc
 7816 01b2 1346     		movcc	r3, r2
 7817 01b4 3B70     		strb	r3, [r7]
2230:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7818              		.loc 1 2230 0
 7819 01b6 7B78     		ldrb	r3, [r7, #1]
 7820 01b8 FB75     		strb	r3, [r7, #23]
 7821 01ba 0DE0     		b	.L512
 7822              	.L513:
2231:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2232:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 7823              		.loc 1 2232 0 discriminator 3
 7824 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7825 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7826 01c0 3C49     		ldr	r1, .L540
 7827 01c2 0632     		adds	r2, r2, #6
 7828 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7829 01c8 0132     		adds	r2, r2, #1
 7830 01ca 3A49     		ldr	r1, .L540
 7831 01cc 0633     		adds	r3, r3, #6
 7832 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2230:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7833              		.loc 1 2230 0 discriminator 3
 7834 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7835 01d4 0133     		adds	r3, r3, #1
 7836 01d6 FB75     		strb	r3, [r7, #23]
 7837              	.L512:
2230:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 7838              		.loc 1 2230 0 is_stmt 0 discriminator 1
 7839 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7840 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 7841 01dc 9A42     		cmp	r2, r3
 7842 01de EDD9     		bls	.L513
2233:..\src/interruptions.c ****                 }
2234:..\src/interruptions.c ****                 
2235:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 181


2236:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 7843              		.loc 1 2236 0 is_stmt 1
 7844 01e0 344B     		ldr	r3, .L540
 7845 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 7846 01e6 002B     		cmp	r3, #0
 7847 01e8 00DA     		bge	.L514
 7848 01ea 0333     		adds	r3, r3, #3
 7849              	.L514:
 7850 01ec 9B10     		asrs	r3, r3, #2
 7851 01ee 1BB2     		sxth	r3, r3
 7852 01f0 7B60     		str	r3, [r7, #4]
2237:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 7853              		.loc 1 2237 0
 7854 01f2 304B     		ldr	r3, .L540
 7855 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 7856 01f8 012B     		cmp	r3, #1
 7857 01fa 0CD1     		bne	.L515
2238:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 7858              		.loc 1 2238 0
 7859 01fc 2D4B     		ldr	r3, .L540
 7860 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7861 0202 1946     		mov	r1, r3
 7862 0204 2C4A     		ldr	r2, .L540+4
 7863 0206 3423     		movs	r3, #52
 7864 0208 03FB01F3 		mul	r3, r3, r1
 7865 020c 1344     		add	r3, r3, r2
 7866 020e 1433     		adds	r3, r3, #20
 7867 0210 1B68     		ldr	r3, [r3]
 7868 0212 3B61     		str	r3, [r7, #16]
 7869 0214 0BE0     		b	.L516
 7870              	.L515:
2239:..\src/interruptions.c ****                 else
2240:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 7871              		.loc 1 2240 0
 7872 0216 274B     		ldr	r3, .L540
 7873 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7874 021c 1946     		mov	r1, r3
 7875 021e 264A     		ldr	r2, .L540+4
 7876 0220 3423     		movs	r3, #52
 7877 0222 03FB01F3 		mul	r3, r3, r1
 7878 0226 1344     		add	r3, r3, r2
 7879 0228 0C33     		adds	r3, r3, #12
 7880 022a 1B68     		ldr	r3, [r3]
 7881 022c 3B61     		str	r3, [r7, #16]
 7882              	.L516:
2241:..\src/interruptions.c ****                     
2242:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 7883              		.loc 1 2242 0
 7884 022e 214B     		ldr	r3, .L540
 7885 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 7886 0234 1A46     		mov	r2, r3
 7887 0236 3B69     		ldr	r3, [r7, #16]
 7888 0238 9A42     		cmp	r2, r3
 7889 023a 05DA     		bge	.L517
2243:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 7890              		.loc 1 2243 0
 7891 023c 1D4B     		ldr	r3, .L540
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 182


 7892 023e DB6C     		ldr	r3, [r3, #76]
 7893 0240 0133     		adds	r3, r3, #1
 7894 0242 1C4A     		ldr	r2, .L540
 7895 0244 D364     		str	r3, [r2, #76]
 7896 0246 12E0     		b	.L511
 7897              	.L517:
2244:..\src/interruptions.c ****                 else
2245:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 7898              		.loc 1 2245 0
 7899 0248 3A69     		ldr	r2, [r7, #16]
 7900 024a 7B68     		ldr	r3, [r7, #4]
 7901 024c 92FBF3F3 		sdiv	r3, r2, r3
 7902 0250 DBB2     		uxtb	r3, r3
 7903 0252 3969     		ldr	r1, [r7, #16]
 7904 0254 7A68     		ldr	r2, [r7, #4]
 7905 0256 91FBF2F2 		sdiv	r2, r1, r2
 7906 025a D2B2     		uxtb	r2, r2
 7907 025c 1549     		ldr	r1, .L540
 7908 025e 1032     		adds	r2, r2, #16
 7909 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 7910 0264 0132     		adds	r2, r2, #1
 7911 0266 1349     		ldr	r1, .L540
 7912 0268 1033     		adds	r3, r3, #16
 7913 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 7914              	.L511:
2246:..\src/interruptions.c ****             }
2247:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 7915              		.loc 1 2247 0
 7916 026e 134B     		ldr	r3, .L540+8
 7917 0270 0022     		movs	r2, #0
 7918 0272 1A70     		strb	r2, [r3]
2248:..\src/interruptions.c ****             break;
 7919              		.loc 1 2248 0
 7920 0274 02E0     		b	.L495
 7921              	.L534:
2209:..\src/interruptions.c ****         case STATE_ACTIVE:
 7922              		.loc 1 2209 0
 7923 0276 00BF     		nop
 7924 0278 00E0     		b	.L495
 7925              	.L535:
2217:..\src/interruptions.c ****         case COUNTER_INC:
 7926              		.loc 1 2217 0
 7927 027a 00BF     		nop
 7928              	.L495:
2249:..\src/interruptions.c ****     }
2250:..\src/interruptions.c ****     
2251:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2252:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 7929              		.loc 1 2252 0
 7930 027c 0023     		movs	r3, #0
 7931 027e FB75     		strb	r3, [r7, #23]
 7932 0280 53E0     		b	.L518
 7933              	.L526:
2253:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 7934              		.loc 1 2253 0
 7935 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7936 0284 134A     		ldr	r2, .L540+32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 183


 7937 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 7938 0288 012B     		cmp	r3, #1
 7939 028a 27D0     		beq	.L520
 7940 028c 022B     		cmp	r3, #2
 7941 028e 36D0     		beq	.L521
 7942 0290 002B     		cmp	r3, #0
 7943 0292 47D1     		bne	.L519
2254:..\src/interruptions.c ****             case STATE_INACTIVE:
2255:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 7944              		.loc 1 2255 0
 7945 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7946 0296 104A     		ldr	r2, .L540+36
 7947 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 7948 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7949 029e 0549     		ldr	r1, .L540
 7950 02a0 F832     		adds	r2, r2, #248
 7951 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 7952 02a6 9342     		cmp	r3, r2
 7953 02a8 39DD     		ble	.L536
2256:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 7954              		.loc 1 2256 0
 7955 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7956 02ac 094A     		ldr	r2, .L540+32
 7957 02ae 0121     		movs	r1, #1
 7958 02b0 D154     		strb	r1, [r2, r3]
2257:..\src/interruptions.c ****                 }
2258:..\src/interruptions.c ****                 break;
 7959              		.loc 1 2258 0
 7960 02b2 34E0     		b	.L536
 7961              	.L541:
 7962              		.align	2
 7963              	.L540:
 7964 02b4 00000000 		.word	g_mem
 7965 02b8 00000000 		.word	g_meas
 7966 02bc 84010000 		.word	pos_cycle_status.10599
 7967 02c0 00000000 		.word	pwm_sign
 7968 02c4 88010000 		.word	thr_pos.10603
 7969 02c8 8C010000 		.word	max_pos.10604
 7970 02cc 08000000 		.word	bin_threshold.10602
 7971 02d0 67666666 		.word	1717986919
 7972 02d4 90010000 		.word	emg_cycle_status.10600
 7973 02d8 00000000 		.word	g_emg_meas
 7974              	.L520:
2259:..\src/interruptions.c ****             case STATE_ACTIVE:
2260:..\src/interruptions.c ****                 if (g_emg_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 7975              		.loc 1 2260 0
 7976 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7977 02de 404A     		ldr	r2, .L542
 7978 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7979 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7980 02e6 3F49     		ldr	r1, .L542+4
 7981 02e8 F833     		adds	r3, r3, #248
 7982 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 7983 02ee 0A3B     		subs	r3, r3, #10
 7984 02f0 9A42     		cmp	r2, r3
 7985 02f2 16DA     		bge	.L537
2261:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 184


 7986              		.loc 1 2261 0
 7987 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7988 02f6 3C4A     		ldr	r2, .L542+8
 7989 02f8 0221     		movs	r1, #2
 7990 02fa D154     		strb	r1, [r2, r3]
2262:..\src/interruptions.c ****                 }
2263:..\src/interruptions.c ****                 break;
 7991              		.loc 1 2263 0
 7992 02fc 11E0     		b	.L537
 7993              	.L521:
2264:..\src/interruptions.c ****             case COUNTER_INC:
2265:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 7994              		.loc 1 2265 0
 7995 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 7996 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7997 0302 3849     		ldr	r1, .L542+4
 7998 0304 0432     		adds	r2, r2, #4
 7999 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8000 030a 0132     		adds	r2, r2, #1
 8001 030c 3549     		ldr	r1, .L542+4
 8002 030e 0433     		adds	r3, r3, #4
 8003 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2266:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 8004              		.loc 1 2266 0
 8005 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8006 0316 344A     		ldr	r2, .L542+8
 8007 0318 0021     		movs	r1, #0
 8008 031a D154     		strb	r1, [r2, r3]
2267:..\src/interruptions.c ****                 break;
 8009              		.loc 1 2267 0
 8010 031c 02E0     		b	.L519
 8011              	.L536:
2258:..\src/interruptions.c ****             case STATE_ACTIVE:
 8012              		.loc 1 2258 0
 8013 031e 00BF     		nop
 8014 0320 00E0     		b	.L519
 8015              	.L537:
2263:..\src/interruptions.c ****             case COUNTER_INC:
 8016              		.loc 1 2263 0
 8017 0322 00BF     		nop
 8018              	.L519:
2252:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8019              		.loc 1 2252 0 discriminator 2
 8020 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8021 0326 0133     		adds	r3, r3, #1
 8022 0328 FB75     		strb	r3, [r7, #23]
 8023              	.L518:
2252:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8024              		.loc 1 2252 0 is_stmt 0 discriminator 1
 8025 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8026 032c 012B     		cmp	r3, #1
 8027 032e 07D8     		bhi	.L525
2252:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8028              		.loc 1 2252 0 discriminator 3
 8029 0330 2E4B     		ldr	r3, .L542+12
 8030 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8031 0334 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 185


 8032 0336 03D1     		bne	.L525
2252:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8033              		.loc 1 2252 0 discriminator 4
 8034 0338 2D4B     		ldr	r3, .L542+16
 8035 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8036 033c 002B     		cmp	r3, #0
 8037 033e A0D0     		beq	.L526
 8038              	.L525:
2268:..\src/interruptions.c ****         }
2269:..\src/interruptions.c ****     }
2270:..\src/interruptions.c ****     
2271:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2272:..\src/interruptions.c ****     switch (rest_cycle_status){
 8039              		.loc 1 2272 0 is_stmt 1
 8040 0340 2C4B     		ldr	r3, .L542+20
 8041 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8042 0344 012B     		cmp	r3, #1
 8043 0346 11D0     		beq	.L528
 8044 0348 022B     		cmp	r3, #2
 8045 034a 29D0     		beq	.L529
 8046 034c 002B     		cmp	r3, #0
 8047 034e 41D1     		bne	.L527
2273:..\src/interruptions.c ****         case STATE_INACTIVE:
2274:..\src/interruptions.c ****             if (rest_enabled){
 8048              		.loc 1 2274 0
 8049 0350 294B     		ldr	r3, .L542+24
 8050 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8051 0354 002B     		cmp	r3, #0
 8052 0356 3AD0     		beq	.L538
2275:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 8053              		.loc 1 2275 0
 8054 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8055 035c 0346     		mov	r3, r0
 8056 035e 1A46     		mov	r2, r3
 8057 0360 264B     		ldr	r3, .L542+28
 8058 0362 1A60     		str	r2, [r3]
2276:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8059              		.loc 1 2276 0
 8060 0364 234B     		ldr	r3, .L542+20
 8061 0366 0122     		movs	r2, #1
 8062 0368 1A70     		strb	r2, [r3]
2277:..\src/interruptions.c ****             }
2278:..\src/interruptions.c ****             break;
 8063              		.loc 1 2278 0
 8064 036a 30E0     		b	.L538
 8065              	.L528:
2279:..\src/interruptions.c ****         case STATE_ACTIVE:
2280:..\src/interruptions.c ****             if (!rest_enabled){
 8066              		.loc 1 2280 0
 8067 036c 224B     		ldr	r3, .L542+24
 8068 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8069 0370 002B     		cmp	r3, #0
 8070 0372 2ED1     		bne	.L539
2281:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8071              		.loc 1 2281 0
 8072 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8073 0378 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 186


 8074 037a 1A46     		mov	r2, r3
 8075 037c 204B     		ldr	r3, .L542+32
 8076 037e 1A60     		str	r2, [r3]
2282:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8077              		.loc 1 2282 0
 8078 0380 1E4B     		ldr	r3, .L542+28
 8079 0382 1A68     		ldr	r2, [r3]
 8080 0384 1E4B     		ldr	r3, .L542+32
 8081 0386 1B68     		ldr	r3, [r3]
 8082 0388 9A42     		cmp	r2, r3
 8083 038a 05D2     		bcs	.L533
2283:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8084              		.loc 1 2283 0
 8085 038c 1B4B     		ldr	r3, .L542+28
 8086 038e 1B68     		ldr	r3, [r3]
 8087 0390 03F59663 		add	r3, r3, #1200
 8088 0394 194A     		ldr	r2, .L542+28
 8089 0396 1360     		str	r3, [r2]
 8090              	.L533:
2284:..\src/interruptions.c ****                 }
2285:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8091              		.loc 1 2285 0
 8092 0398 164B     		ldr	r3, .L542+20
 8093 039a 0222     		movs	r2, #2
 8094 039c 1A70     		strb	r2, [r3]
2286:..\src/interruptions.c ****             }
2287:..\src/interruptions.c ****             break;
 8095              		.loc 1 2287 0
 8096 039e 18E0     		b	.L539
 8097              	.L529:
2288:..\src/interruptions.c ****         case COUNTER_INC: 
2289:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8098              		.loc 1 2289 0
 8099 03a0 104B     		ldr	r3, .L542+4
 8100 03a2 DA6D     		ldr	r2, [r3, #92]
 8101 03a4 154B     		ldr	r3, .L542+28
 8102 03a6 1968     		ldr	r1, [r3]
 8103 03a8 154B     		ldr	r3, .L542+32
 8104 03aa 1B68     		ldr	r3, [r3]
 8105 03ac CB1A     		subs	r3, r1, r3
 8106 03ae 1549     		ldr	r1, .L542+36
 8107 03b0 A1FB0313 		umull	r1, r3, r1, r3
 8108 03b4 DB08     		lsrs	r3, r3, #3
 8109 03b6 1344     		add	r3, r3, r2
 8110 03b8 0A4A     		ldr	r2, .L542+4
 8111 03ba D365     		str	r3, [r2, #92]
2290:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8112              		.loc 1 2290 0
 8113 03bc 094B     		ldr	r3, .L542+4
 8114 03be 1B6D     		ldr	r3, [r3, #80]
 8115 03c0 0133     		adds	r3, r3, #1
 8116 03c2 084A     		ldr	r2, .L542+4
 8117 03c4 1365     		str	r3, [r2, #80]
2291:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8118              		.loc 1 2291 0
 8119 03c6 0B4B     		ldr	r3, .L542+20
 8120 03c8 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 187


 8121 03ca 1A70     		strb	r2, [r3]
2292:..\src/interruptions.c ****             break;
 8122              		.loc 1 2292 0
 8123 03cc 02E0     		b	.L527
 8124              	.L538:
2278:..\src/interruptions.c ****         case STATE_ACTIVE:
 8125              		.loc 1 2278 0
 8126 03ce 00BF     		nop
 8127 03d0 00E0     		b	.L527
 8128              	.L539:
2287:..\src/interruptions.c ****         case COUNTER_INC: 
 8129              		.loc 1 2287 0
 8130 03d2 00BF     		nop
 8131              	.L527:
2293:..\src/interruptions.c ****     }
2294:..\src/interruptions.c ****           
2295:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2296:..\src/interruptions.c ****     save_cycles_eeprom();
 8132              		.loc 1 2296 0
 8133 03d4 FFF7FEFF 		bl	save_cycles_eeprom
2297:..\src/interruptions.c ****     
2298:..\src/interruptions.c **** }
 8134              		.loc 1 2298 0
 8135 03d8 00BF     		nop
 8136 03da 1837     		adds	r7, r7, #24
 8137              		.cfi_def_cfa_offset 8
 8138 03dc BD46     		mov	sp, r7
 8139              		.cfi_def_cfa_register 13
 8140              		@ sp needed
 8141 03de 80BD     		pop	{r7, pc}
 8142              	.L543:
 8143              		.align	2
 8144              	.L542:
 8145 03e0 00000000 		.word	g_emg_meas
 8146 03e4 00000000 		.word	g_mem
 8147 03e8 90010000 		.word	emg_cycle_status.10600
 8148 03ec 00000000 		.word	emg_1_status
 8149 03f0 00000000 		.word	emg_2_status
 8150 03f4 92010000 		.word	rest_cycle_status.10601
 8151 03f8 00000000 		.word	rest_enabled
 8152 03fc 94010000 		.word	timer_value_s.10614
 8153 0400 98010000 		.word	timer_value_e.10615
 8154 0404 CDCCCCCC 		.word	-858993459
 8155              		.cfi_endproc
 8156              	.LFE74:
 8157              		.size	cycles_counter_update, .-cycles_counter_update
 8158              		.section	.text.save_cycles_eeprom,"ax",%progbits
 8159              		.align	2
 8160              		.global	save_cycles_eeprom
 8161              		.thumb
 8162              		.thumb_func
 8163              		.type	save_cycles_eeprom, %function
 8164              	save_cycles_eeprom:
 8165              	.LFB75:
2299:..\src/interruptions.c **** 
2300:..\src/interruptions.c **** //==============================================================================
2301:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 188


2302:..\src/interruptions.c **** //==============================================================================
2303:..\src/interruptions.c **** 
2304:..\src/interruptions.c **** void save_cycles_eeprom() {
 8166              		.loc 1 2304 0
 8167              		.cfi_startproc
 8168              		@ args = 0, pretend = 0, frame = 24
 8169              		@ frame_needed = 1, uses_anonymous_args = 0
 8170 0000 80B5     		push	{r7, lr}
 8171              		.cfi_def_cfa_offset 8
 8172              		.cfi_offset 7, -8
 8173              		.cfi_offset 14, -4
 8174 0002 86B0     		sub	sp, sp, #24
 8175              		.cfi_def_cfa_offset 32
 8176 0004 00AF     		add	r7, sp, #0
 8177              		.cfi_def_cfa_register 7
2305:..\src/interruptions.c **** 
2306:..\src/interruptions.c ****     cystatus status;
2307:..\src/interruptions.c ****     static uint8 row_number;
2308:..\src/interruptions.c ****     uint8 row_start = 1;
 8178              		.loc 1 2308 0
 8179 0006 0123     		movs	r3, #1
 8180 0008 FB75     		strb	r3, [r7, #23]
2309:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 8181              		.loc 1 2309 0
 8182 000a 394B     		ldr	r3, .L560
 8183 000c 3B61     		str	r3, [r7, #16]
2310:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 8184              		.loc 1 2310 0
 8185 000e 394B     		ldr	r3, .L560+4
 8186 0010 FB60     		str	r3, [r7, #12]
2311:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 8187              		.loc 1 2311 0
 8188 0012 FB7D     		ldrb	r3, [r7, #23]
 8189 0014 0433     		adds	r3, r3, #4
 8190 0016 FB72     		strb	r3, [r7, #11]
2312:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2313:..\src/interruptions.c **** 
2314:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2315:..\src/interruptions.c ****     switch(cycles_status) {
 8191              		.loc 1 2315 0
 8192 0018 374B     		ldr	r3, .L560+8
 8193 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8194 001c 042B     		cmp	r3, #4
 8195 001e 63D8     		bhi	.L556
 8196 0020 01A2     		adr	r2, .L547
 8197 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8198 0026 00BF     		.p2align 2
 8199              	.L547:
 8200 0028 3D000000 		.word	.L546+1
 8201 002c 5B000000 		.word	.L548+1
 8202 0030 8B000000 		.word	.L549+1
 8203 0034 C7000000 		.word	.L550+1
 8204 0038 DF000000 		.word	.L557+1
 8205              		.p2align 1
 8206              	.L546:
2316:..\src/interruptions.c ****         case PREPARE_DATA:
2317:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 189


2318:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 8207              		.loc 1 2318 0
 8208 003c 5022     		movs	r2, #80
 8209 003e 3969     		ldr	r1, [r7, #16]
 8210 0040 F868     		ldr	r0, [r7, #12]
 8211 0042 FFF7FEFF 		bl	memcpy
2319:..\src/interruptions.c ****             m_addr = addr_start;
 8212              		.loc 1 2319 0
 8213 0046 2D4A     		ldr	r2, .L560+12
 8214 0048 3B69     		ldr	r3, [r7, #16]
 8215 004a 1360     		str	r3, [r2]
2320:..\src/interruptions.c ****             row_number = row_start;
 8216              		.loc 1 2320 0
 8217 004c 2C4A     		ldr	r2, .L560+16
 8218 004e FB7D     		ldrb	r3, [r7, #23]
 8219 0050 1370     		strb	r3, [r2]
2321:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 8220              		.loc 1 2321 0
 8221 0052 294B     		ldr	r3, .L560+8
 8222 0054 0122     		movs	r2, #1
 8223 0056 1A70     		strb	r2, [r3]
2322:..\src/interruptions.c ****             break;
 8224              		.loc 1 2322 0
 8225 0058 46E0     		b	.L545
 8226              	.L548:
2323:..\src/interruptions.c ****             
2324:..\src/interruptions.c ****         case WRITE_CYCLES:
2325:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 8227              		.loc 1 2325 0
 8228 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2326:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 8229              		.loc 1 2326 0
 8230 005e 274B     		ldr	r3, .L560+12
 8231 0060 1A68     		ldr	r2, [r3]
 8232 0062 274B     		ldr	r3, .L560+16
 8233 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8234 0066 1946     		mov	r1, r3
 8235 0068 1046     		mov	r0, r2
 8236 006a FFF7FEFF 		bl	EEPROM_StartWrite
 8237 006e 7860     		str	r0, [r7, #4]
2327:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 8238              		.loc 1 2327 0
 8239 0070 7B68     		ldr	r3, [r7, #4]
 8240 0072 072B     		cmp	r3, #7
 8241 0074 02D0     		beq	.L552
 8242              		.loc 1 2327 0 is_stmt 0 discriminator 1
 8243 0076 7B68     		ldr	r3, [r7, #4]
 8244 0078 002B     		cmp	r3, #0
 8245 007a 32D1     		bne	.L558
 8246              	.L552:
2328:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 8247              		.loc 1 2328 0 is_stmt 1
 8248 007c 1E4B     		ldr	r3, .L560+8
 8249 007e 0222     		movs	r2, #2
 8250 0080 1A70     		strb	r2, [r3]
2329:..\src/interruptions.c ****                 can_write = FALSE;
 8251              		.loc 1 2329 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 190


 8252 0082 204B     		ldr	r3, .L560+20
 8253 0084 0022     		movs	r2, #0
 8254 0086 1A70     		strb	r2, [r3]
2330:..\src/interruptions.c ****             }
2331:..\src/interruptions.c ****             break;
 8255              		.loc 1 2331 0
 8256 0088 2BE0     		b	.L558
 8257              	.L549:
2332:..\src/interruptions.c ****             
2333:..\src/interruptions.c ****         case WAIT_QUERY:
2334:..\src/interruptions.c ****             status = EEPROM_Query();
 8258              		.loc 1 2334 0
 8259 008a FFF7FEFF 		bl	EEPROM_Query
 8260 008e 7860     		str	r0, [r7, #4]
2335:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 8261              		.loc 1 2335 0
 8262 0090 7B68     		ldr	r3, [r7, #4]
 8263 0092 002B     		cmp	r3, #0
 8264 0094 27D1     		bne	.L559
2336:..\src/interruptions.c ****                 if (row_number < row_end) {
 8265              		.loc 1 2336 0
 8266 0096 1A4B     		ldr	r3, .L560+16
 8267 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8268 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8269 009c 9A42     		cmp	r2, r3
 8270 009e 0ED9     		bls	.L555
2337:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 8271              		.loc 1 2337 0
 8272 00a0 164B     		ldr	r3, .L560+12
 8273 00a2 1B68     		ldr	r3, [r3]
 8274 00a4 1033     		adds	r3, r3, #16
 8275 00a6 154A     		ldr	r2, .L560+12
 8276 00a8 1360     		str	r3, [r2]
2338:..\src/interruptions.c ****                     row_number = row_number + 1;
 8277              		.loc 1 2338 0
 8278 00aa 154B     		ldr	r3, .L560+16
 8279 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8280 00ae 0133     		adds	r3, r3, #1
 8281 00b0 DAB2     		uxtb	r2, r3
 8282 00b2 134B     		ldr	r3, .L560+16
 8283 00b4 1A70     		strb	r2, [r3]
2339:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 8284              		.loc 1 2339 0
 8285 00b6 104B     		ldr	r3, .L560+8
 8286 00b8 0122     		movs	r2, #1
 8287 00ba 1A70     		strb	r2, [r3]
2340:..\src/interruptions.c ****                 }
2341:..\src/interruptions.c ****                 else {
2342:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2343:..\src/interruptions.c ****                 }
2344:..\src/interruptions.c ****             }
2345:..\src/interruptions.c ****             break;
 8288              		.loc 1 2345 0
 8289 00bc 13E0     		b	.L559
 8290              	.L555:
2342:..\src/interruptions.c ****                 }
 8291              		.loc 1 2342 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 191


 8292 00be 0E4B     		ldr	r3, .L560+8
 8293 00c0 0322     		movs	r2, #3
 8294 00c2 1A70     		strb	r2, [r3]
 8295              		.loc 1 2345 0
 8296 00c4 0FE0     		b	.L559
 8297              	.L550:
2346:..\src/interruptions.c ****            
2347:..\src/interruptions.c ****         case WRITE_END:
2348:..\src/interruptions.c ****             can_write = TRUE;            
 8298              		.loc 1 2348 0
 8299 00c6 0F4B     		ldr	r3, .L560+20
 8300 00c8 0122     		movs	r2, #1
 8301 00ca 1A70     		strb	r2, [r3]
2349:..\src/interruptions.c ****             cycles_status = NONE;
 8302              		.loc 1 2349 0
 8303 00cc 0A4B     		ldr	r3, .L560+8
 8304 00ce 0422     		movs	r2, #4
 8305 00d0 1A70     		strb	r2, [r3]
2350:..\src/interruptions.c ****             
2351:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2352:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 8306              		.loc 1 2352 0
 8307 00d2 5022     		movs	r2, #80
 8308 00d4 F968     		ldr	r1, [r7, #12]
 8309 00d6 3869     		ldr	r0, [r7, #16]
 8310 00d8 FFF7FEFF 		bl	memcpy
2353:..\src/interruptions.c ****             break;
 8311              		.loc 1 2353 0
 8312 00dc 04E0     		b	.L545
 8313              	.L557:
2354:..\src/interruptions.c ****             
2355:..\src/interruptions.c ****         case NONE:
2356:..\src/interruptions.c ****             break;
 8314              		.loc 1 2356 0
 8315 00de 00BF     		nop
 8316 00e0 02E0     		b	.L556
 8317              	.L558:
2331:..\src/interruptions.c ****             
 8318              		.loc 1 2331 0
 8319 00e2 00BF     		nop
 8320 00e4 00E0     		b	.L556
 8321              	.L559:
2345:..\src/interruptions.c ****            
 8322              		.loc 1 2345 0
 8323 00e6 00BF     		nop
 8324              	.L545:
 8325              	.L556:
2357:..\src/interruptions.c ****     }
2358:..\src/interruptions.c ****     
2359:..\src/interruptions.c **** }
 8326              		.loc 1 2359 0
 8327 00e8 00BF     		nop
 8328 00ea 1837     		adds	r7, r7, #24
 8329              		.cfi_def_cfa_offset 8
 8330 00ec BD46     		mov	sp, r7
 8331              		.cfi_def_cfa_register 13
 8332              		@ sp needed
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 192


 8333 00ee 80BD     		pop	{r7, pc}
 8334              	.L561:
 8335              		.align	2
 8336              	.L560:
 8337 00f0 10000000 		.word	g_mem+16
 8338 00f4 10000000 		.word	c_mem+16
 8339 00f8 00000000 		.word	cycles_status
 8340 00fc 9C010000 		.word	m_addr.10642
 8341 0100 A0010000 		.word	row_number.10637
 8342 0104 00000000 		.word	can_write
 8343              		.cfi_endproc
 8344              	.LFE75:
 8345              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 8346              		.bss
 8347              	state.10356:
 8348 0000 00       		.space	1
 8349 0001 000000   		.align	2
 8350              	rx_queue.10360:
 8351 0004 000000   		.space	3
 8352              	data_packet_length.10358:
 8353 0007 00       		.space	1
 8354              	data_packet_index.10357:
 8355 0008 00       		.space	1
 8356 0009 000000   		.align	2
 8357              	data_packet_buffer.10359:
 8358 000c 00000000 		.space	128
 8358      00000000 
 8358      00000000 
 8358      00000000 
 8358      00000000 
 8359              		.data
 8360              		.align	1
 8361              		.type	counter_calibration.10376, %object
 8362              		.size	counter_calibration.10376, 2
 8363              	counter_calibration.10376:
 8364 0000 0100     		.short	1
 8365              		.align	1
 8366              		.type	counter_tension_func.10377, %object
 8367              		.size	counter_tension_func.10377, 2
 8368              	counter_tension_func.10377:
 8369 0002 0100     		.short	1
 8370              		.bss
 8371              	current_emg.10416:
 8372 008c 00       		.space	1
 8373 008d 000000   		.align	2
 8374              	pos_error_sum.10409:
 8375 0090 00000000 		.space	4
 8376              		.align	2
 8377              	prev_pos_err.10411:
 8378 0094 00000000 		.space	4
 8379              	motor_dir.10414:
 8380 0098 00       		.space	1
 8381 0099 000000   		.align	2
 8382              	curr_error_sum.10410:
 8383 009c 00000000 		.space	4
 8384              		.align	2
 8385              	prev_curr_err.10412:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 193


 8386 00a0 00000000 		.space	4
 8387              		.align	2
 8388              	prev_pwm.10413:
 8389 00a4 00000000 		.space	4
 8390              		.align	2
 8391              	position_counter.10415:
 8392 00a8 00000000 		.space	4
 8393              		.align	2
 8394              	current_emg.10471:
 8395 00ac 0000     		.space	2
 8396 00ae 0000     		.align	2
 8397              	pos_error_sum.10464:
 8398 00b0 00000000 		.space	8
 8398      00000000 
 8399              		.align	2
 8400              	prev_pos_err.10466:
 8401 00b8 00000000 		.space	8
 8401      00000000 
 8402              		.align	2
 8403              	motor_dir.10469:
 8404 00c0 0000     		.space	2
 8405 00c2 0000     		.align	2
 8406              	curr_error_sum.10465:
 8407 00c4 00000000 		.space	8
 8407      00000000 
 8408              		.align	2
 8409              	prev_curr_err.10467:
 8410 00cc 00000000 		.space	8
 8410      00000000 
 8411              		.align	2
 8412              	prev_pwm.10468:
 8413 00d4 00000000 		.space	8
 8413      00000000 
 8414              		.align	2
 8415              	position_counter.10470:
 8416 00dc 00000000 		.space	8
 8416      00000000 
 8417              		.align	2
 8418              	last_value_encoder.10511:
 8419 00e4 00000000 		.space	24
 8419      00000000 
 8419      00000000 
 8419      00000000 
 8419      00000000 
 8420              		.align	2
 8421              	comp_value_encoder.10512:
 8422 00fc 00000000 		.space	24
 8422      00000000 
 8422      00000000 
 8422      00000000 
 8422      00000000 
 8423              		.data
 8424              		.align	2
 8425              		.type	only_first_time.10514, %object
 8426              		.size	only_first_time.10514, 2
 8427              	only_first_time.10514:
 8428 0004 01       		.byte	1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 194


 8429 0005 01       		.byte	1
 8430              		.bss
 8431              		.align	2
 8432              	error.10513:
 8433 0114 00000000 		.space	6
 8433      0000
 8434 011a 0000     		.align	2
 8435              	v_value.10519:
 8436 011c 00000000 		.space	24
 8436      00000000 
 8436      00000000 
 8436      00000000 
 8436      00000000 
 8437              		.align	2
 8438              	vv_value.10520:
 8439 0134 00000000 		.space	24
 8439      00000000 
 8439      00000000 
 8439      00000000 
 8439      00000000 
 8440              		.align	2
 8441              	vvv_value.10521:
 8442 014c 00000000 		.space	24
 8442      00000000 
 8442      00000000 
 8442      00000000 
 8442      00000000 
 8443              		.align	2
 8444              	pos_reconstruct.10518:
 8445 0164 0000     		.space	2
 8446 0166 0000     		.align	2
 8447              	one_time_execute.10516:
 8448 0168 0000     		.space	2
 8449 016a 0000     		.align	2
 8450              	safe_startup_motor_activation.10515:
 8451 016c 0000     		.space	2
 8452 016e 0000     		.align	2
 8453              	count_startup_motor.10517:
 8454 0170 00000000 		.space	8
 8454      00000000 
 8455              		.data
 8456              		.type	first_tension_valid.10540, %object
 8457              		.size	first_tension_valid.10540, 1
 8458              	first_tension_valid.10540:
 8459 0006 01       		.byte	1
 8460              		.bss
 8461              		.align	1
 8462              	count.10541:
 8463 0178 0000     		.space	2
 8464              	idx.10543:
 8465 017a 00       		.space	1
 8466 017b 00       		.align	2
 8467              	v_count.10542:
 8468 017c 00000000 		.space	4
 8469              		.align	1
 8470              	emg_counter_1.10538:
 8471 0180 0000     		.space	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 195


 8472              		.align	1
 8473              	emg_counter_2.10539:
 8474 0182 0000     		.space	2
 8475              	pos_cycle_status.10599:
 8476 0184 00       		.space	1
 8477 0185 000000   		.align	2
 8478              	thr_pos.10603:
 8479 0188 00000000 		.space	4
 8480              		.align	2
 8481              	max_pos.10604:
 8482 018c 00000000 		.space	4
 8483              		.data
 8484 0007 00       		.align	2
 8485              		.type	bin_threshold.10602, %object
 8486              		.size	bin_threshold.10602, 4
 8487              	bin_threshold.10602:
 8488 0008 FA000000 		.word	250
 8489              		.bss
 8490              		.align	2
 8491              	emg_cycle_status.10600:
 8492 0190 0000     		.space	2
 8493              	rest_cycle_status.10601:
 8494 0192 00       		.space	1
 8495 0193 00       		.align	2
 8496              	timer_value_s.10614:
 8497 0194 00000000 		.space	4
 8498              		.align	2
 8499              	timer_value_e.10615:
 8500 0198 00000000 		.space	4
 8501              		.align	2
 8502              	m_addr.10642:
 8503 019c 00000000 		.space	4
 8504              	row_number.10637:
 8505 01a0 00       		.space	1
 8506              		.text
 8507              	.Letext0:
 8508              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8509              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8510              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8511              		.file 5 "..\\src\\commands.h"
 8512              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 8513              		.file 7 "..\\src\\globals.h"
 8514              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 8515              		.section	.debug_info,"",%progbits
 8516              	.Ldebug_info0:
 8517 0000 9C170000 		.4byte	0x179c
 8518 0004 0400     		.2byte	0x4
 8519 0006 00000000 		.4byte	.Ldebug_abbrev0
 8520 000a 04       		.byte	0x4
 8521 000b 01       		.uleb128 0x1
 8522 000c 4B070000 		.4byte	.LASF303
 8523 0010 0C       		.byte	0xc
 8524 0011 700E0000 		.4byte	.LASF304
 8525 0015 250D0000 		.4byte	.LASF305
 8526 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8527 001d 00000000 		.4byte	0
 8528 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 196


 8529 0025 02       		.uleb128 0x2
 8530 0026 01       		.byte	0x1
 8531 0027 06       		.byte	0x6
 8532 0028 25030000 		.4byte	.LASF0
 8533 002c 02       		.uleb128 0x2
 8534 002d 01       		.byte	0x1
 8535 002e 08       		.byte	0x8
 8536 002f A2030000 		.4byte	.LASF1
 8537 0033 02       		.uleb128 0x2
 8538 0034 02       		.byte	0x2
 8539 0035 05       		.byte	0x5
 8540 0036 990C0000 		.4byte	.LASF2
 8541 003a 02       		.uleb128 0x2
 8542 003b 02       		.byte	0x2
 8543 003c 07       		.byte	0x7
 8544 003d 420E0000 		.4byte	.LASF3
 8545 0041 03       		.uleb128 0x3
 8546 0042 D70E0000 		.4byte	.LASF9
 8547 0046 02       		.byte	0x2
 8548 0047 3F       		.byte	0x3f
 8549 0048 4C000000 		.4byte	0x4c
 8550 004c 02       		.uleb128 0x2
 8551 004d 04       		.byte	0x4
 8552 004e 05       		.byte	0x5
 8553 004f 30020000 		.4byte	.LASF4
 8554 0053 02       		.uleb128 0x2
 8555 0054 04       		.byte	0x4
 8556 0055 07       		.byte	0x7
 8557 0056 75060000 		.4byte	.LASF5
 8558 005a 02       		.uleb128 0x2
 8559 005b 08       		.byte	0x8
 8560 005c 05       		.byte	0x5
 8561 005d 06080000 		.4byte	.LASF6
 8562 0061 02       		.uleb128 0x2
 8563 0062 08       		.byte	0x8
 8564 0063 07       		.byte	0x7
 8565 0064 9D0A0000 		.4byte	.LASF7
 8566 0068 04       		.uleb128 0x4
 8567 0069 04       		.byte	0x4
 8568 006a 05       		.byte	0x5
 8569 006b 696E7400 		.ascii	"int\000"
 8570 006f 02       		.uleb128 0x2
 8571 0070 04       		.byte	0x4
 8572 0071 07       		.byte	0x7
 8573 0072 E0080000 		.4byte	.LASF8
 8574 0076 03       		.uleb128 0x3
 8575 0077 52000000 		.4byte	.LASF10
 8576 007b 03       		.byte	0x3
 8577 007c 2C       		.byte	0x2c
 8578 007d 41000000 		.4byte	0x41
 8579 0081 05       		.uleb128 0x5
 8580 0082 7F0C0000 		.4byte	.LASF11
 8581 0086 04       		.byte	0x4
 8582 0087 E401     		.2byte	0x1e4
 8583 0089 2C000000 		.4byte	0x2c
 8584 008d 05       		.uleb128 0x5
 8585 008e 240F0000 		.4byte	.LASF12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 197


 8586 0092 04       		.byte	0x4
 8587 0093 E501     		.2byte	0x1e5
 8588 0095 3A000000 		.4byte	0x3a
 8589 0099 05       		.uleb128 0x5
 8590 009a 83000000 		.4byte	.LASF13
 8591 009e 04       		.byte	0x4
 8592 009f E601     		.2byte	0x1e6
 8593 00a1 53000000 		.4byte	0x53
 8594 00a5 05       		.uleb128 0x5
 8595 00a6 45010000 		.4byte	.LASF14
 8596 00aa 04       		.byte	0x4
 8597 00ab E701     		.2byte	0x1e7
 8598 00ad 25000000 		.4byte	0x25
 8599 00b1 05       		.uleb128 0x5
 8600 00b2 7A0D0000 		.4byte	.LASF15
 8601 00b6 04       		.byte	0x4
 8602 00b7 E801     		.2byte	0x1e8
 8603 00b9 33000000 		.4byte	0x33
 8604 00bd 05       		.uleb128 0x5
 8605 00be 870E0000 		.4byte	.LASF16
 8606 00c2 04       		.byte	0x4
 8607 00c3 E901     		.2byte	0x1e9
 8608 00c5 4C000000 		.4byte	0x4c
 8609 00c9 05       		.uleb128 0x5
 8610 00ca CC020000 		.4byte	.LASF17
 8611 00ce 04       		.byte	0x4
 8612 00cf EA01     		.2byte	0x1ea
 8613 00d1 D5000000 		.4byte	0xd5
 8614 00d5 02       		.uleb128 0x2
 8615 00d6 04       		.byte	0x4
 8616 00d7 04       		.byte	0x4
 8617 00d8 B5080000 		.4byte	.LASF18
 8618 00dc 02       		.uleb128 0x2
 8619 00dd 08       		.byte	0x8
 8620 00de 04       		.byte	0x4
 8621 00df 49080000 		.4byte	.LASF19
 8622 00e3 02       		.uleb128 0x2
 8623 00e4 01       		.byte	0x1
 8624 00e5 08       		.byte	0x8
 8625 00e6 34040000 		.4byte	.LASF20
 8626 00ea 05       		.uleb128 0x5
 8627 00eb 19090000 		.4byte	.LASF21
 8628 00ef 04       		.byte	0x4
 8629 00f0 8602     		.2byte	0x286
 8630 00f2 53000000 		.4byte	0x53
 8631 00f6 05       		.uleb128 0x5
 8632 00f7 3A0B0000 		.4byte	.LASF22
 8633 00fb 04       		.byte	0x4
 8634 00fc 8E02     		.2byte	0x28e
 8635 00fe 02010000 		.4byte	0x102
 8636 0102 06       		.uleb128 0x6
 8637 0103 81000000 		.4byte	0x81
 8638 0107 02       		.uleb128 0x2
 8639 0108 08       		.byte	0x8
 8640 0109 04       		.byte	0x4
 8641 010a AA090000 		.4byte	.LASF23
 8642 010e 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 198


 8643 010f 04       		.byte	0x4
 8644 0110 07       		.byte	0x7
 8645 0111 00000000 		.4byte	.LASF24
 8646 0115 07       		.uleb128 0x7
 8647 0116 E3000000 		.4byte	0xe3
 8648 011a 25010000 		.4byte	0x125
 8649 011e 08       		.uleb128 0x8
 8650 011f 0E010000 		.4byte	0x10e
 8651 0123 07       		.byte	0x7
 8652 0124 00       		.byte	0
 8653 0125 09       		.uleb128 0x9
 8654 0126 110F0000 		.4byte	.LASF32
 8655 012a 01       		.byte	0x1
 8656 012b 2C000000 		.4byte	0x2c
 8657 012f 05       		.byte	0x5
 8658 0130 8B       		.byte	0x8b
 8659 0131 60010000 		.4byte	0x160
 8660 0135 0A       		.uleb128 0xa
 8661 0136 0E060000 		.4byte	.LASF25
 8662 013a 00       		.byte	0
 8663 013b 0A       		.uleb128 0xa
 8664 013c 22090000 		.4byte	.LASF26
 8665 0140 01       		.byte	0x1
 8666 0141 0A       		.uleb128 0xa
 8667 0142 C6010000 		.4byte	.LASF27
 8668 0146 02       		.byte	0x2
 8669 0147 0A       		.uleb128 0xa
 8670 0148 13010000 		.4byte	.LASF28
 8671 014c 03       		.byte	0x3
 8672 014d 0A       		.uleb128 0xa
 8673 014e DC000000 		.4byte	.LASF29
 8674 0152 04       		.byte	0x4
 8675 0153 0A       		.uleb128 0xa
 8676 0154 1A000000 		.4byte	.LASF30
 8677 0158 05       		.byte	0x5
 8678 0159 0A       		.uleb128 0xa
 8679 015a 1F0C0000 		.4byte	.LASF31
 8680 015e 06       		.byte	0x6
 8681 015f 00       		.byte	0
 8682 0160 09       		.uleb128 0x9
 8683 0161 14080000 		.4byte	.LASF33
 8684 0165 01       		.byte	0x1
 8685 0166 2C000000 		.4byte	0x2c
 8686 016a 05       		.byte	0x5
 8687 016b 9E       		.byte	0x9e
 8688 016c 89010000 		.4byte	0x189
 8689 0170 0A       		.uleb128 0xa
 8690 0171 C90E0000 		.4byte	.LASF34
 8691 0175 00       		.byte	0
 8692 0176 0A       		.uleb128 0xa
 8693 0177 29070000 		.4byte	.LASF35
 8694 017b 01       		.byte	0x1
 8695 017c 0A       		.uleb128 0xa
 8696 017d 9A090000 		.4byte	.LASF36
 8697 0181 02       		.byte	0x2
 8698 0182 0A       		.uleb128 0xa
 8699 0183 58060000 		.4byte	.LASF37
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 199


 8700 0187 03       		.byte	0x3
 8701 0188 00       		.byte	0
 8702 0189 03       		.uleb128 0x3
 8703 018a A20E0000 		.4byte	.LASF38
 8704 018e 06       		.byte	0x6
 8705 018f 7E       		.byte	0x7e
 8706 0190 94010000 		.4byte	0x194
 8707 0194 0B       		.uleb128 0xb
 8708 0195 A20E0000 		.4byte	.LASF38
 8709 0199 0C       		.uleb128 0xc
 8710 019a 04       		.byte	0x4
 8711 019b 89010000 		.4byte	0x189
 8712 019f 0D       		.uleb128 0xd
 8713 01a0 D9070000 		.4byte	.LASF41
 8714 01a4 10       		.byte	0x10
 8715 01a5 07       		.byte	0x7
 8716 01a6 CE       		.byte	0xce
 8717 01a7 DC010000 		.4byte	0x1dc
 8718 01ab 0E       		.uleb128 0xe
 8719 01ac 706F7300 		.ascii	"pos\000"
 8720 01b0 07       		.byte	0x7
 8721 01b1 CF       		.byte	0xcf
 8722 01b2 BD000000 		.4byte	0xbd
 8723 01b6 00       		.byte	0
 8724 01b7 0F       		.uleb128 0xf
 8725 01b8 0E070000 		.4byte	.LASF39
 8726 01bc 07       		.byte	0x7
 8727 01bd D0       		.byte	0xd0
 8728 01be BD000000 		.4byte	0xbd
 8729 01c2 04       		.byte	0x4
 8730 01c3 0E       		.uleb128 0xe
 8731 01c4 70776D00 		.ascii	"pwm\000"
 8732 01c8 07       		.byte	0x7
 8733 01c9 D1       		.byte	0xd1
 8734 01ca BD000000 		.4byte	0xbd
 8735 01ce 08       		.byte	0x8
 8736 01cf 0F       		.uleb128 0xf
 8737 01d0 D10A0000 		.4byte	.LASF40
 8738 01d4 07       		.byte	0x7
 8739 01d5 D2       		.byte	0xd2
 8740 01d6 81000000 		.4byte	0x81
 8741 01da 0C       		.byte	0xc
 8742 01db 00       		.byte	0
 8743 01dc 0D       		.uleb128 0xd
 8744 01dd F90B0000 		.4byte	.LASF42
 8745 01e1 34       		.byte	0x34
 8746 01e2 07       		.byte	0x7
 8747 01e3 D9       		.byte	0xd9
 8748 01e4 3D020000 		.4byte	0x23d
 8749 01e8 0E       		.uleb128 0xe
 8750 01e9 706F7300 		.ascii	"pos\000"
 8751 01ed 07       		.byte	0x7
 8752 01ee DA       		.byte	0xda
 8753 01ef 3D020000 		.4byte	0x23d
 8754 01f3 00       		.byte	0
 8755 01f4 0F       		.uleb128 0xf
 8756 01f5 0E070000 		.4byte	.LASF39
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 200


 8757 01f9 07       		.byte	0x7
 8758 01fa DB       		.byte	0xdb
 8759 01fb BD000000 		.4byte	0xbd
 8760 01ff 0C       		.byte	0xc
 8761 0200 0F       		.uleb128 0xf
 8762 0201 B10D0000 		.4byte	.LASF43
 8763 0205 07       		.byte	0x7
 8764 0206 DC       		.byte	0xdc
 8765 0207 BD000000 		.4byte	0xbd
 8766 020b 10       		.byte	0x10
 8767 020c 0F       		.uleb128 0xf
 8768 020d A2060000 		.4byte	.LASF44
 8769 0211 07       		.byte	0x7
 8770 0212 DD       		.byte	0xdd
 8771 0213 BD000000 		.4byte	0xbd
 8772 0217 14       		.byte	0x14
 8773 0218 0E       		.uleb128 0xe
 8774 0219 726F7400 		.ascii	"rot\000"
 8775 021d 07       		.byte	0x7
 8776 021e DE       		.byte	0xde
 8777 021f 4D020000 		.4byte	0x24d
 8778 0223 18       		.byte	0x18
 8779 0224 0E       		.uleb128 0xe
 8780 0225 76656C00 		.ascii	"vel\000"
 8781 0229 07       		.byte	0x7
 8782 022a DF       		.byte	0xdf
 8783 022b 3D020000 		.4byte	0x23d
 8784 022f 1C       		.byte	0x1c
 8785 0230 0E       		.uleb128 0xe
 8786 0231 61636300 		.ascii	"acc\000"
 8787 0235 07       		.byte	0x7
 8788 0236 E0       		.byte	0xe0
 8789 0237 3D020000 		.4byte	0x23d
 8790 023b 28       		.byte	0x28
 8791 023c 00       		.byte	0
 8792 023d 07       		.uleb128 0x7
 8793 023e BD000000 		.4byte	0xbd
 8794 0242 4D020000 		.4byte	0x24d
 8795 0246 08       		.uleb128 0x8
 8796 0247 0E010000 		.4byte	0x10e
 8797 024b 02       		.byte	0x2
 8798 024c 00       		.byte	0
 8799 024d 07       		.uleb128 0x7
 8800 024e A5000000 		.4byte	0xa5
 8801 0252 5D020000 		.4byte	0x25d
 8802 0256 08       		.uleb128 0x8
 8803 0257 0E010000 		.4byte	0x10e
 8804 025b 02       		.byte	0x2
 8805 025c 00       		.byte	0
 8806 025d 0D       		.uleb128 0xd
 8807 025e DC090000 		.4byte	.LASF45
 8808 0262 20       		.byte	0x20
 8809 0263 07       		.byte	0x7
 8810 0264 E3       		.byte	0xe3
 8811 0265 82020000 		.4byte	0x282
 8812 0269 0E       		.uleb128 0xe
 8813 026a 656D6700 		.ascii	"emg\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 201


 8814 026e 07       		.byte	0x7
 8815 026f E4       		.byte	0xe4
 8816 0270 82020000 		.4byte	0x282
 8817 0274 00       		.byte	0
 8818 0275 0F       		.uleb128 0xf
 8819 0276 5E090000 		.4byte	.LASF46
 8820 027a 07       		.byte	0x7
 8821 027b E5       		.byte	0xe5
 8822 027c 92020000 		.4byte	0x292
 8823 0280 08       		.byte	0x8
 8824 0281 00       		.byte	0
 8825 0282 07       		.uleb128 0x7
 8826 0283 BD000000 		.4byte	0xbd
 8827 0287 92020000 		.4byte	0x292
 8828 028b 08       		.uleb128 0x8
 8829 028c 0E010000 		.4byte	0x10e
 8830 0290 01       		.byte	0x1
 8831 0291 00       		.byte	0
 8832 0292 07       		.uleb128 0x7
 8833 0293 BD000000 		.4byte	0xbd
 8834 0297 A2020000 		.4byte	0x2a2
 8835 029b 08       		.uleb128 0x8
 8836 029c 0E010000 		.4byte	0x10e
 8837 02a0 05       		.byte	0x5
 8838 02a1 00       		.byte	0
 8839 02a2 0D       		.uleb128 0xd
 8840 02a3 70000000 		.4byte	.LASF47
 8841 02a7 86       		.byte	0x86
 8842 02a8 07       		.byte	0x7
 8843 02a9 EC       		.byte	0xec
 8844 02aa DF020000 		.4byte	0x2df
 8845 02ae 0F       		.uleb128 0xf
 8846 02af 2F050000 		.4byte	.LASF48
 8847 02b3 07       		.byte	0x7
 8848 02b4 ED       		.byte	0xed
 8849 02b5 DF020000 		.4byte	0x2df
 8850 02b9 00       		.byte	0
 8851 02ba 0F       		.uleb128 0xf
 8852 02bb B40A0000 		.4byte	.LASF49
 8853 02bf 07       		.byte	0x7
 8854 02c0 EE       		.byte	0xee
 8855 02c1 B1000000 		.4byte	0xb1
 8856 02c5 80       		.byte	0x80
 8857 02c6 0E       		.uleb128 0xe
 8858 02c7 696E6400 		.ascii	"ind\000"
 8859 02cb 07       		.byte	0x7
 8860 02cc EF       		.byte	0xef
 8861 02cd B1000000 		.4byte	0xb1
 8862 02d1 82       		.byte	0x82
 8863 02d2 0F       		.uleb128 0xf
 8864 02d3 99010000 		.4byte	.LASF50
 8865 02d7 07       		.byte	0x7
 8866 02d8 F0       		.byte	0xf0
 8867 02d9 81000000 		.4byte	0x81
 8868 02dd 84       		.byte	0x84
 8869 02de 00       		.byte	0
 8870 02df 07       		.uleb128 0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 202


 8871 02e0 81000000 		.4byte	0x81
 8872 02e4 EF020000 		.4byte	0x2ef
 8873 02e8 08       		.uleb128 0x8
 8874 02e9 0E010000 		.4byte	0x10e
 8875 02ed 7F       		.byte	0x7f
 8876 02ee 00       		.byte	0
 8877 02ef 0D       		.uleb128 0xd
 8878 02f0 B9020000 		.4byte	.LASF51
 8879 02f4 50       		.byte	0x50
 8880 02f5 07       		.byte	0x7
 8881 02f6 F9       		.byte	0xf9
 8882 02f7 51030000 		.4byte	0x351
 8883 02fb 0F       		.uleb128 0xf
 8884 02fc EE020000 		.4byte	.LASF52
 8885 0300 07       		.byte	0x7
 8886 0301 FA       		.byte	0xfa
 8887 0302 51030000 		.4byte	0x351
 8888 0306 00       		.byte	0
 8889 0307 0F       		.uleb128 0xf
 8890 0308 6B010000 		.4byte	.LASF53
 8891 030c 07       		.byte	0x7
 8892 030d FB       		.byte	0xfb
 8893 030e 61030000 		.4byte	0x361
 8894 0312 08       		.byte	0x8
 8895 0313 0F       		.uleb128 0xf
 8896 0314 8D090000 		.4byte	.LASF54
 8897 0318 07       		.byte	0x7
 8898 0319 FC       		.byte	0xfc
 8899 031a 71030000 		.4byte	0x371
 8900 031e 30       		.byte	0x30
 8901 031f 0F       		.uleb128 0xf
 8902 0320 06010000 		.4byte	.LASF55
 8903 0324 07       		.byte	0x7
 8904 0325 FD       		.byte	0xfd
 8905 0326 99000000 		.4byte	0x99
 8906 032a 40       		.byte	0x40
 8907 032b 0F       		.uleb128 0xf
 8908 032c E10E0000 		.4byte	.LASF56
 8909 0330 07       		.byte	0x7
 8910 0331 FE       		.byte	0xfe
 8911 0332 99000000 		.4byte	0x99
 8912 0336 44       		.byte	0x44
 8913 0337 0F       		.uleb128 0xf
 8914 0338 87060000 		.4byte	.LASF57
 8915 033c 07       		.byte	0x7
 8916 033d FF       		.byte	0xff
 8917 033e 99000000 		.4byte	0x99
 8918 0342 48       		.byte	0x48
 8919 0343 10       		.uleb128 0x10
 8920 0344 AC060000 		.4byte	.LASF58
 8921 0348 07       		.byte	0x7
 8922 0349 0001     		.2byte	0x100
 8923 034b 99000000 		.4byte	0x99
 8924 034f 4C       		.byte	0x4c
 8925 0350 00       		.byte	0
 8926 0351 07       		.uleb128 0x7
 8927 0352 99000000 		.4byte	0x99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 203


 8928 0356 61030000 		.4byte	0x361
 8929 035a 08       		.uleb128 0x8
 8930 035b 0E010000 		.4byte	0x10e
 8931 035f 01       		.byte	0x1
 8932 0360 00       		.byte	0
 8933 0361 07       		.uleb128 0x7
 8934 0362 99000000 		.4byte	0x99
 8935 0366 71030000 		.4byte	0x371
 8936 036a 08       		.uleb128 0x8
 8937 036b 0E010000 		.4byte	0x10e
 8938 036f 09       		.byte	0x9
 8939 0370 00       		.byte	0
 8940 0371 07       		.uleb128 0x7
 8941 0372 99000000 		.4byte	0x99
 8942 0376 81030000 		.4byte	0x381
 8943 037a 08       		.uleb128 0x8
 8944 037b 0E010000 		.4byte	0x10e
 8945 037f 03       		.byte	0x3
 8946 0380 00       		.byte	0
 8947 0381 11       		.uleb128 0x11
 8948 0382 BC010000 		.4byte	.LASF59
 8949 0386 10       		.byte	0x10
 8950 0387 07       		.byte	0x7
 8951 0388 0701     		.2byte	0x107
 8952 038a 10040000 		.4byte	0x410
 8953 038e 12       		.uleb128 0x12
 8954 038f 696400   		.ascii	"id\000"
 8955 0392 07       		.byte	0x7
 8956 0393 0801     		.2byte	0x108
 8957 0395 81000000 		.4byte	0x81
 8958 0399 00       		.byte	0
 8959 039a 10       		.uleb128 0x10
 8960 039b CA0C0000 		.4byte	.LASF60
 8961 039f 07       		.byte	0x7
 8962 03a0 0901     		.2byte	0x109
 8963 03a2 10040000 		.4byte	0x410
 8964 03a6 01       		.byte	0x1
 8965 03a7 10       		.uleb128 0x10
 8966 03a8 F40C0000 		.4byte	.LASF61
 8967 03ac 07       		.byte	0x7
 8968 03ad 0A01     		.2byte	0x10a
 8969 03af 10040000 		.4byte	0x410
 8970 03b3 04       		.byte	0x4
 8971 03b4 10       		.uleb128 0x10
 8972 03b5 FC030000 		.4byte	.LASF62
 8973 03b9 07       		.byte	0x7
 8974 03ba 0B01     		.2byte	0x10b
 8975 03bc 81000000 		.4byte	0x81
 8976 03c0 07       		.byte	0x7
 8977 03c1 10       		.uleb128 0x10
 8978 03c2 50020000 		.4byte	.LASF63
 8979 03c6 07       		.byte	0x7
 8980 03c7 0C01     		.2byte	0x10c
 8981 03c9 81000000 		.4byte	0x81
 8982 03cd 08       		.byte	0x8
 8983 03ce 10       		.uleb128 0x10
 8984 03cf E2010000 		.4byte	.LASF64
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 204


 8985 03d3 07       		.byte	0x7
 8986 03d4 0D01     		.2byte	0x10d
 8987 03d6 81000000 		.4byte	0x81
 8988 03da 09       		.byte	0x9
 8989 03db 10       		.uleb128 0x10
 8990 03dc 290E0000 		.4byte	.LASF65
 8991 03e0 07       		.byte	0x7
 8992 03e1 0E01     		.2byte	0x10e
 8993 03e3 81000000 		.4byte	0x81
 8994 03e7 0A       		.byte	0xa
 8995 03e8 10       		.uleb128 0x10
 8996 03e9 EA0D0000 		.4byte	.LASF66
 8997 03ed 07       		.byte	0x7
 8998 03ee 0F01     		.2byte	0x10f
 8999 03f0 81000000 		.4byte	0x81
 9000 03f4 0B       		.byte	0xb
 9001 03f5 10       		.uleb128 0x10
 9002 03f6 A80B0000 		.4byte	.LASF67
 9003 03fa 07       		.byte	0x7
 9004 03fb 1001     		.2byte	0x110
 9005 03fd 81000000 		.4byte	0x81
 9006 0401 0C       		.byte	0xc
 9007 0402 10       		.uleb128 0x10
 9008 0403 94020000 		.4byte	.LASF68
 9009 0407 07       		.byte	0x7
 9010 0408 1101     		.2byte	0x111
 9011 040a 10040000 		.4byte	0x410
 9012 040e 0D       		.byte	0xd
 9013 040f 00       		.byte	0
 9014 0410 07       		.uleb128 0x7
 9015 0411 81000000 		.4byte	0x81
 9016 0415 20040000 		.4byte	0x420
 9017 0419 08       		.uleb128 0x8
 9018 041a 0E010000 		.4byte	0x10e
 9019 041e 02       		.byte	0x2
 9020 041f 00       		.byte	0
 9021 0420 11       		.uleb128 0x11
 9022 0421 CA080000 		.4byte	.LASF69
 9023 0425 70       		.byte	0x70
 9024 0426 07       		.byte	0x7
 9025 0427 1801     		.2byte	0x118
 9026 0429 9A050000 		.4byte	0x59a
 9027 042d 12       		.uleb128 0x12
 9028 042e 6B5F7000 		.ascii	"k_p\000"
 9029 0432 07       		.byte	0x7
 9030 0433 1901     		.2byte	0x119
 9031 0435 BD000000 		.4byte	0xbd
 9032 0439 00       		.byte	0
 9033 043a 12       		.uleb128 0x12
 9034 043b 6B5F6900 		.ascii	"k_i\000"
 9035 043f 07       		.byte	0x7
 9036 0440 1A01     		.2byte	0x11a
 9037 0442 BD000000 		.4byte	0xbd
 9038 0446 04       		.byte	0x4
 9039 0447 12       		.uleb128 0x12
 9040 0448 6B5F6400 		.ascii	"k_d\000"
 9041 044c 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 205


 9042 044d 1B01     		.2byte	0x11b
 9043 044f BD000000 		.4byte	0xbd
 9044 0453 08       		.byte	0x8
 9045 0454 10       		.uleb128 0x10
 9046 0455 0D0B0000 		.4byte	.LASF70
 9047 0459 07       		.byte	0x7
 9048 045a 1C01     		.2byte	0x11c
 9049 045c BD000000 		.4byte	0xbd
 9050 0460 0C       		.byte	0xc
 9051 0461 10       		.uleb128 0x10
 9052 0462 8C040000 		.4byte	.LASF71
 9053 0466 07       		.byte	0x7
 9054 0467 1D01     		.2byte	0x11d
 9055 0469 BD000000 		.4byte	0xbd
 9056 046d 10       		.byte	0x10
 9057 046e 10       		.uleb128 0x10
 9058 046f 7F040000 		.4byte	.LASF72
 9059 0473 07       		.byte	0x7
 9060 0474 1E01     		.2byte	0x11e
 9061 0476 BD000000 		.4byte	0xbd
 9062 047a 14       		.byte	0x14
 9063 047b 10       		.uleb128 0x10
 9064 047c AA0D0000 		.4byte	.LASF73
 9065 0480 07       		.byte	0x7
 9066 0481 1F01     		.2byte	0x11f
 9067 0483 BD000000 		.4byte	0xbd
 9068 0487 18       		.byte	0x18
 9069 0488 10       		.uleb128 0x10
 9070 0489 28050000 		.4byte	.LASF74
 9071 048d 07       		.byte	0x7
 9072 048e 2001     		.2byte	0x120
 9073 0490 BD000000 		.4byte	0xbd
 9074 0494 1C       		.byte	0x1c
 9075 0495 10       		.uleb128 0x10
 9076 0496 A30C0000 		.4byte	.LASF75
 9077 049a 07       		.byte	0x7
 9078 049b 2101     		.2byte	0x121
 9079 049d BD000000 		.4byte	0xbd
 9080 04a1 20       		.byte	0x20
 9081 04a2 10       		.uleb128 0x10
 9082 04a3 36050000 		.4byte	.LASF76
 9083 04a7 07       		.byte	0x7
 9084 04a8 2201     		.2byte	0x122
 9085 04aa BD000000 		.4byte	0xbd
 9086 04ae 24       		.byte	0x24
 9087 04af 10       		.uleb128 0x10
 9088 04b0 41060000 		.4byte	.LASF77
 9089 04b4 07       		.byte	0x7
 9090 04b5 2301     		.2byte	0x123
 9091 04b7 BD000000 		.4byte	0xbd
 9092 04bb 28       		.byte	0x28
 9093 04bc 10       		.uleb128 0x10
 9094 04bd 570F0000 		.4byte	.LASF78
 9095 04c1 07       		.byte	0x7
 9096 04c2 2401     		.2byte	0x124
 9097 04c4 BD000000 		.4byte	0xbd
 9098 04c8 2C       		.byte	0x2c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 206


 9099 04c9 10       		.uleb128 0x10
 9100 04ca BC060000 		.4byte	.LASF79
 9101 04ce 07       		.byte	0x7
 9102 04cf 2501     		.2byte	0x125
 9103 04d1 81000000 		.4byte	0x81
 9104 04d5 30       		.byte	0x30
 9105 04d6 10       		.uleb128 0x10
 9106 04d7 930D0000 		.4byte	.LASF80
 9107 04db 07       		.byte	0x7
 9108 04dc 2601     		.2byte	0x126
 9109 04de 81000000 		.4byte	0x81
 9110 04e2 31       		.byte	0x31
 9111 04e3 10       		.uleb128 0x10
 9112 04e4 1F0B0000 		.4byte	.LASF81
 9113 04e8 07       		.byte	0x7
 9114 04e9 2701     		.2byte	0x127
 9115 04eb 81000000 		.4byte	0x81
 9116 04ef 32       		.byte	0x32
 9117 04f0 10       		.uleb128 0x10
 9118 04f1 AA0E0000 		.4byte	.LASF82
 9119 04f5 07       		.byte	0x7
 9120 04f6 2801     		.2byte	0x128
 9121 04f8 81000000 		.4byte	0x81
 9122 04fc 33       		.byte	0x33
 9123 04fd 10       		.uleb128 0x10
 9124 04fe 91000000 		.4byte	.LASF83
 9125 0502 07       		.byte	0x7
 9126 0503 2901     		.2byte	0x129
 9127 0505 BD000000 		.4byte	0xbd
 9128 0509 34       		.byte	0x34
 9129 050a 10       		.uleb128 0x10
 9130 050b BC040000 		.4byte	.LASF84
 9131 050f 07       		.byte	0x7
 9132 0510 2A01     		.2byte	0x12a
 9133 0512 BD000000 		.4byte	0xbd
 9134 0516 38       		.byte	0x38
 9135 0517 10       		.uleb128 0x10
 9136 0518 8F080000 		.4byte	.LASF85
 9137 051c 07       		.byte	0x7
 9138 051d 2B01     		.2byte	0x12b
 9139 051f BD000000 		.4byte	0xbd
 9140 0523 3C       		.byte	0x3c
 9141 0524 10       		.uleb128 0x10
 9142 0525 39040000 		.4byte	.LASF86
 9143 0529 07       		.byte	0x7
 9144 052a 2C01     		.2byte	0x12c
 9145 052c BD000000 		.4byte	0xbd
 9146 0530 40       		.byte	0x40
 9147 0531 10       		.uleb128 0x10
 9148 0532 F0000000 		.4byte	.LASF87
 9149 0536 07       		.byte	0x7
 9150 0537 2D01     		.2byte	0x12d
 9151 0539 9A050000 		.4byte	0x59a
 9152 053d 44       		.byte	0x44
 9153 053e 10       		.uleb128 0x10
 9154 053f 030F0000 		.4byte	.LASF88
 9155 0543 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 207


 9156 0544 2E01     		.2byte	0x12e
 9157 0546 B1000000 		.4byte	0xb1
 9158 054a 5C       		.byte	0x5c
 9159 054b 10       		.uleb128 0x10
 9160 054c 1E070000 		.4byte	.LASF89
 9161 0550 07       		.byte	0x7
 9162 0551 2F01     		.2byte	0x12f
 9163 0553 81000000 		.4byte	0x81
 9164 0557 5E       		.byte	0x5e
 9165 0558 10       		.uleb128 0x10
 9166 0559 0C090000 		.4byte	.LASF90
 9167 055d 07       		.byte	0x7
 9168 055e 3001     		.2byte	0x130
 9169 0560 81000000 		.4byte	0x81
 9170 0564 5F       		.byte	0x5f
 9171 0565 10       		.uleb128 0x10
 9172 0566 07040000 		.4byte	.LASF91
 9173 056a 07       		.byte	0x7
 9174 056b 3101     		.2byte	0x131
 9175 056d 81000000 		.4byte	0x81
 9176 0571 60       		.byte	0x60
 9177 0572 10       		.uleb128 0x10
 9178 0573 6E040000 		.4byte	.LASF92
 9179 0577 07       		.byte	0x7
 9180 0578 3201     		.2byte	0x132
 9181 057a 81000000 		.4byte	0x81
 9182 057e 61       		.byte	0x61
 9183 057f 10       		.uleb128 0x10
 9184 0580 B0030000 		.4byte	.LASF93
 9185 0584 07       		.byte	0x7
 9186 0585 3301     		.2byte	0x133
 9187 0587 81000000 		.4byte	0x81
 9188 058b 62       		.byte	0x62
 9189 058c 10       		.uleb128 0x10
 9190 058d 94020000 		.4byte	.LASF68
 9191 0591 07       		.byte	0x7
 9192 0592 3401     		.2byte	0x134
 9193 0594 AA050000 		.4byte	0x5aa
 9194 0598 63       		.byte	0x63
 9195 0599 00       		.byte	0
 9196 059a 07       		.uleb128 0x7
 9197 059b D5000000 		.4byte	0xd5
 9198 059f AA050000 		.4byte	0x5aa
 9199 05a3 08       		.uleb128 0x8
 9200 05a4 0E010000 		.4byte	0x10e
 9201 05a8 05       		.byte	0x5
 9202 05a9 00       		.byte	0
 9203 05aa 07       		.uleb128 0x7
 9204 05ab 81000000 		.4byte	0x81
 9205 05af BA050000 		.4byte	0x5ba
 9206 05b3 08       		.uleb128 0x8
 9207 05b4 0E010000 		.4byte	0x10e
 9208 05b8 0C       		.byte	0xc
 9209 05b9 00       		.byte	0
 9210 05ba 11       		.uleb128 0x11
 9211 05bb 550E0000 		.4byte	.LASF94
 9212 05bf 30       		.byte	0x30
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 208


 9213 05c0 07       		.byte	0x7
 9214 05c1 3B01     		.2byte	0x13b
 9215 05c3 3D060000 		.4byte	0x63d
 9216 05c7 10       		.uleb128 0x10
 9217 05c8 71080000 		.4byte	.LASF95
 9218 05cc 07       		.byte	0x7
 9219 05cd 3C01     		.2byte	0x13c
 9220 05cf 3D060000 		.4byte	0x63d
 9221 05d3 00       		.byte	0
 9222 05d4 12       		.uleb128 0x12
 9223 05d5 72657300 		.ascii	"res\000"
 9224 05d9 07       		.byte	0x7
 9225 05da 3D01     		.2byte	0x13d
 9226 05dc 10040000 		.4byte	0x410
 9227 05e0 05       		.byte	0x5
 9228 05e1 10       		.uleb128 0x10
 9229 05e2 DE060000 		.4byte	.LASF96
 9230 05e6 07       		.byte	0x7
 9231 05e7 3E01     		.2byte	0x13e
 9232 05e9 3D020000 		.4byte	0x23d
 9233 05ed 08       		.byte	0x8
 9234 05ee 10       		.uleb128 0x10
 9235 05ef 85040000 		.4byte	.LASF97
 9236 05f3 07       		.byte	0x7
 9237 05f4 3F01     		.2byte	0x13f
 9238 05f6 4D060000 		.4byte	0x64d
 9239 05fa 14       		.byte	0x14
 9240 05fb 10       		.uleb128 0x10
 9241 05fc 3E0A0000 		.4byte	.LASF98
 9242 0600 07       		.byte	0x7
 9243 0601 4001     		.2byte	0x140
 9244 0603 81000000 		.4byte	0x81
 9245 0607 20       		.byte	0x20
 9246 0608 10       		.uleb128 0x10
 9247 0609 9F010000 		.4byte	.LASF99
 9248 060d 07       		.byte	0x7
 9249 060e 4101     		.2byte	0x141
 9250 0610 10040000 		.4byte	0x410
 9251 0614 21       		.byte	0x21
 9252 0615 10       		.uleb128 0x10
 9253 0616 EF090000 		.4byte	.LASF100
 9254 061a 07       		.byte	0x7
 9255 061b 4201     		.2byte	0x142
 9256 061d A5000000 		.4byte	0xa5
 9257 0621 24       		.byte	0x24
 9258 0622 10       		.uleb128 0x10
 9259 0623 CA0B0000 		.4byte	.LASF101
 9260 0627 07       		.byte	0x7
 9261 0628 4301     		.2byte	0x143
 9262 062a 4D020000 		.4byte	0x24d
 9263 062e 25       		.byte	0x25
 9264 062f 10       		.uleb128 0x10
 9265 0630 94020000 		.4byte	.LASF68
 9266 0634 07       		.byte	0x7
 9267 0635 4401     		.2byte	0x144
 9268 0637 5D060000 		.4byte	0x65d
 9269 063b 28       		.byte	0x28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 209


 9270 063c 00       		.byte	0
 9271 063d 07       		.uleb128 0x7
 9272 063e 81000000 		.4byte	0x81
 9273 0642 4D060000 		.4byte	0x64d
 9274 0646 08       		.uleb128 0x8
 9275 0647 0E010000 		.4byte	0x10e
 9276 064b 04       		.byte	0x4
 9277 064c 00       		.byte	0
 9278 064d 07       		.uleb128 0x7
 9279 064e C9000000 		.4byte	0xc9
 9280 0652 5D060000 		.4byte	0x65d
 9281 0656 08       		.uleb128 0x8
 9282 0657 0E010000 		.4byte	0x10e
 9283 065b 02       		.byte	0x2
 9284 065c 00       		.byte	0
 9285 065d 07       		.uleb128 0x7
 9286 065e 81000000 		.4byte	0x81
 9287 0662 6D060000 		.4byte	0x66d
 9288 0666 08       		.uleb128 0x8
 9289 0667 0E010000 		.4byte	0x10e
 9290 066b 07       		.byte	0x7
 9291 066c 00       		.byte	0
 9292 066d 11       		.uleb128 0x11
 9293 066e 64010000 		.4byte	.LASF102
 9294 0672 10       		.byte	0x10
 9295 0673 07       		.byte	0x7
 9296 0674 4B01     		.2byte	0x14b
 9297 0676 C9060000 		.4byte	0x6c9
 9298 067a 10       		.uleb128 0x10
 9299 067b 6C090000 		.4byte	.LASF103
 9300 067f 07       		.byte	0x7
 9301 0680 4C01     		.2byte	0x14c
 9302 0682 C9060000 		.4byte	0x6c9
 9303 0686 00       		.byte	0
 9304 0687 10       		.uleb128 0x10
 9305 0688 F50E0000 		.4byte	.LASF104
 9306 068c 07       		.byte	0x7
 9307 068d 4D01     		.2byte	0x14d
 9308 068f 51030000 		.4byte	0x351
 9309 0693 04       		.byte	0x4
 9310 0694 10       		.uleb128 0x10
 9311 0695 D2040000 		.4byte	.LASF105
 9312 0699 07       		.byte	0x7
 9313 069a 4E01     		.2byte	0x14e
 9314 069c 81000000 		.4byte	0x81
 9315 06a0 0C       		.byte	0xc
 9316 06a1 10       		.uleb128 0x10
 9317 06a2 E40B0000 		.4byte	.LASF106
 9318 06a6 07       		.byte	0x7
 9319 06a7 4F01     		.2byte	0x14f
 9320 06a9 81000000 		.4byte	0x81
 9321 06ad 0D       		.byte	0xd
 9322 06ae 10       		.uleb128 0x10
 9323 06af 5F030000 		.4byte	.LASF107
 9324 06b3 07       		.byte	0x7
 9325 06b4 5001     		.2byte	0x150
 9326 06b6 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 210


 9327 06ba 0E       		.byte	0xe
 9328 06bb 10       		.uleb128 0x10
 9329 06bc 94020000 		.4byte	.LASF68
 9330 06c0 07       		.byte	0x7
 9331 06c1 5101     		.2byte	0x151
 9332 06c3 D9060000 		.4byte	0x6d9
 9333 06c7 0F       		.byte	0xf
 9334 06c8 00       		.byte	0
 9335 06c9 07       		.uleb128 0x7
 9336 06ca 8D000000 		.4byte	0x8d
 9337 06ce D9060000 		.4byte	0x6d9
 9338 06d2 08       		.uleb128 0x8
 9339 06d3 0E010000 		.4byte	0x10e
 9340 06d7 01       		.byte	0x1
 9341 06d8 00       		.byte	0
 9342 06d9 07       		.uleb128 0x7
 9343 06da 81000000 		.4byte	0x81
 9344 06de E9060000 		.4byte	0x6e9
 9345 06e2 08       		.uleb128 0x8
 9346 06e3 0E010000 		.4byte	0x10e
 9347 06e7 00       		.byte	0
 9348 06e8 00       		.byte	0
 9349 06e9 11       		.uleb128 0x11
 9350 06ea 36090000 		.4byte	.LASF108
 9351 06ee 20       		.byte	0x20
 9352 06ef 07       		.byte	0x7
 9353 06f0 5801     		.2byte	0x158
 9354 06f2 2B070000 		.4byte	0x72b
 9355 06f6 10       		.uleb128 0x10
 9356 06f7 02020000 		.4byte	.LASF109
 9357 06fb 07       		.byte	0x7
 9358 06fc 5901     		.2byte	0x159
 9359 06fe 81000000 		.4byte	0x81
 9360 0702 00       		.byte	0
 9361 0703 10       		.uleb128 0x10
 9362 0704 330E0000 		.4byte	.LASF110
 9363 0708 07       		.byte	0x7
 9364 0709 5A01     		.2byte	0x15a
 9365 070b 81000000 		.4byte	0x81
 9366 070f 01       		.byte	0x1
 9367 0710 10       		.uleb128 0x10
 9368 0711 BB080000 		.4byte	.LASF111
 9369 0715 07       		.byte	0x7
 9370 0716 5B01     		.2byte	0x15b
 9371 0718 2B070000 		.4byte	0x72b
 9372 071c 02       		.byte	0x2
 9373 071d 10       		.uleb128 0x10
 9374 071e 94020000 		.4byte	.LASF68
 9375 0722 07       		.byte	0x7
 9376 0723 5C01     		.2byte	0x15c
 9377 0725 3D060000 		.4byte	0x63d
 9378 0729 1B       		.byte	0x1b
 9379 072a 00       		.byte	0
 9380 072b 07       		.uleb128 0x7
 9381 072c 81000000 		.4byte	0x81
 9382 0730 41070000 		.4byte	0x741
 9383 0734 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 211


 9384 0735 0E010000 		.4byte	0x10e
 9385 0739 04       		.byte	0x4
 9386 073a 08       		.uleb128 0x8
 9387 073b 0E010000 		.4byte	0x10e
 9388 073f 04       		.byte	0x4
 9389 0740 00       		.byte	0
 9390 0741 11       		.uleb128 0x11
 9391 0742 D70B0000 		.4byte	.LASF112
 9392 0746 20       		.byte	0x20
 9393 0747 07       		.byte	0x7
 9394 0748 6301     		.2byte	0x163
 9395 074a 90070000 		.4byte	0x790
 9396 074e 10       		.uleb128 0x10
 9397 074f 340A0000 		.4byte	.LASF113
 9398 0753 07       		.byte	0x7
 9399 0754 6401     		.2byte	0x164
 9400 0756 90070000 		.4byte	0x790
 9401 075a 00       		.byte	0
 9402 075b 10       		.uleb128 0x10
 9403 075c 800D0000 		.4byte	.LASF114
 9404 0760 07       		.byte	0x7
 9405 0761 6501     		.2byte	0x165
 9406 0763 81000000 		.4byte	0x81
 9407 0767 06       		.byte	0x6
 9408 0768 10       		.uleb128 0x10
 9409 0769 32000000 		.4byte	.LASF115
 9410 076d 07       		.byte	0x7
 9411 076e 6601     		.2byte	0x166
 9412 0770 81000000 		.4byte	0x81
 9413 0774 07       		.byte	0x7
 9414 0775 10       		.uleb128 0x10
 9415 0776 11050000 		.4byte	.LASF116
 9416 077a 07       		.byte	0x7
 9417 077b 6701     		.2byte	0x167
 9418 077d A0070000 		.4byte	0x7a0
 9419 0781 08       		.byte	0x8
 9420 0782 10       		.uleb128 0x10
 9421 0783 94020000 		.4byte	.LASF68
 9422 0787 07       		.byte	0x7
 9423 0788 6801     		.2byte	0x168
 9424 078a A0070000 		.4byte	0x7a0
 9425 078e 14       		.byte	0x14
 9426 078f 00       		.byte	0
 9427 0790 07       		.uleb128 0x7
 9428 0791 81000000 		.4byte	0x81
 9429 0795 A0070000 		.4byte	0x7a0
 9430 0799 08       		.uleb128 0x8
 9431 079a 0E010000 		.4byte	0x10e
 9432 079e 05       		.byte	0x5
 9433 079f 00       		.byte	0
 9434 07a0 07       		.uleb128 0x7
 9435 07a1 81000000 		.4byte	0x81
 9436 07a5 B0070000 		.4byte	0x7b0
 9437 07a9 08       		.uleb128 0x8
 9438 07aa 0E010000 		.4byte	0x10e
 9439 07ae 0B       		.byte	0xb
 9440 07af 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 212


 9441 07b0 11       		.uleb128 0x11
 9442 07b1 C20B0000 		.4byte	.LASF117
 9443 07b5 20       		.byte	0x20
 9444 07b6 07       		.byte	0x7
 9445 07b7 6F01     		.2byte	0x16f
 9446 07b9 E5070000 		.4byte	0x7e5
 9447 07bd 10       		.uleb128 0x10
 9448 07be 31030000 		.4byte	.LASF118
 9449 07c2 07       		.byte	0x7
 9450 07c3 7001     		.2byte	0x170
 9451 07c5 15010000 		.4byte	0x115
 9452 07c9 00       		.byte	0
 9453 07ca 10       		.uleb128 0x10
 9454 07cb 6D020000 		.4byte	.LASF119
 9455 07cf 07       		.byte	0x7
 9456 07d0 7101     		.2byte	0x171
 9457 07d2 6D060000 		.4byte	0x66d
 9458 07d6 08       		.byte	0x8
 9459 07d7 10       		.uleb128 0x10
 9460 07d8 94020000 		.4byte	.LASF68
 9461 07dc 07       		.byte	0x7
 9462 07dd 7201     		.2byte	0x172
 9463 07df 5D060000 		.4byte	0x65d
 9464 07e3 18       		.byte	0x18
 9465 07e4 00       		.byte	0
 9466 07e5 11       		.uleb128 0x11
 9467 07e6 ED070000 		.4byte	.LASF120
 9468 07ea 10       		.byte	0x10
 9469 07eb 07       		.byte	0x7
 9470 07ec 7901     		.2byte	0x179
 9471 07ee 34080000 		.4byte	0x834
 9472 07f2 10       		.uleb128 0x10
 9473 07f3 05070000 		.4byte	.LASF121
 9474 07f7 07       		.byte	0x7
 9475 07f8 7A01     		.2byte	0x17a
 9476 07fa BD000000 		.4byte	0xbd
 9477 07fe 00       		.byte	0
 9478 07ff 10       		.uleb128 0x10
 9479 0800 390F0000 		.4byte	.LASF122
 9480 0804 07       		.byte	0x7
 9481 0805 7B01     		.2byte	0x17b
 9482 0807 BD000000 		.4byte	0xbd
 9483 080b 04       		.byte	0x4
 9484 080c 10       		.uleb128 0x10
 9485 080d DC040000 		.4byte	.LASF123
 9486 0811 07       		.byte	0x7
 9487 0812 7C01     		.2byte	0x17c
 9488 0814 BD000000 		.4byte	0xbd
 9489 0818 08       		.byte	0x8
 9490 0819 10       		.uleb128 0x10
 9491 081a 28060000 		.4byte	.LASF124
 9492 081e 07       		.byte	0x7
 9493 081f 7D01     		.2byte	0x17d
 9494 0821 81000000 		.4byte	0x81
 9495 0825 0C       		.byte	0xc
 9496 0826 10       		.uleb128 0x10
 9497 0827 94020000 		.4byte	.LASF68
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 213


 9498 082b 07       		.byte	0x7
 9499 082c 7E01     		.2byte	0x17e
 9500 082e 10040000 		.4byte	0x410
 9501 0832 0D       		.byte	0xd
 9502 0833 00       		.byte	0
 9503 0834 13       		.uleb128 0x13
 9504 0835 660E0000 		.4byte	.LASF125
 9505 0839 B002     		.2byte	0x2b0
 9506 083b 07       		.byte	0x7
 9507 083c 8601     		.2byte	0x186
 9508 083e E4080000 		.4byte	0x8e4
 9509 0842 10       		.uleb128 0x10
 9510 0843 07090000 		.4byte	.LASF126
 9511 0847 07       		.byte	0x7
 9512 0848 8801     		.2byte	0x188
 9513 084a 81000000 		.4byte	0x81
 9514 084e 00       		.byte	0
 9515 084f 10       		.uleb128 0x10
 9516 0850 94020000 		.4byte	.LASF68
 9517 0854 07       		.byte	0x7
 9518 0855 8901     		.2byte	0x189
 9519 0857 E4080000 		.4byte	0x8e4
 9520 085b 01       		.byte	0x1
 9521 085c 12       		.uleb128 0x12
 9522 085d 636E7400 		.ascii	"cnt\000"
 9523 0861 07       		.byte	0x7
 9524 0862 8A01     		.2byte	0x18a
 9525 0864 EF020000 		.4byte	0x2ef
 9526 0868 10       		.byte	0x10
 9527 0869 10       		.uleb128 0x10
 9528 086a 39020000 		.4byte	.LASF127
 9529 086e 07       		.byte	0x7
 9530 086f 8B01     		.2byte	0x18b
 9531 0871 F4080000 		.4byte	0x8f4
 9532 0875 60       		.byte	0x60
 9533 0876 12       		.uleb128 0x12
 9534 0877 64657600 		.ascii	"dev\000"
 9535 087b 07       		.byte	0x7
 9536 087c 8C01     		.2byte	0x18c
 9537 087e 81030000 		.4byte	0x381
 9538 0882 A0       		.byte	0xa0
 9539 0883 10       		.uleb128 0x10
 9540 0884 B80C0000 		.4byte	.LASF128
 9541 0888 07       		.byte	0x7
 9542 0889 8D01     		.2byte	0x18d
 9543 088b 04090000 		.4byte	0x904
 9544 088f B0       		.byte	0xb0
 9545 0890 14       		.uleb128 0x14
 9546 0891 656E6300 		.ascii	"enc\000"
 9547 0895 07       		.byte	0x7
 9548 0896 8E01     		.2byte	0x18e
 9549 0898 14090000 		.4byte	0x914
 9550 089c 9001     		.2byte	0x190
 9551 089e 14       		.uleb128 0x14
 9552 089f 656D6700 		.ascii	"emg\000"
 9553 08a3 07       		.byte	0x7
 9554 08a4 8F01     		.2byte	0x18f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 214


 9555 08a6 6D060000 		.4byte	0x66d
 9556 08aa F001     		.2byte	0x1f0
 9557 08ac 14       		.uleb128 0x14
 9558 08ad 696D7500 		.ascii	"imu\000"
 9559 08b1 07       		.byte	0x7
 9560 08b2 9001     		.2byte	0x190
 9561 08b4 E9060000 		.4byte	0x6e9
 9562 08b8 0002     		.2byte	0x200
 9563 08ba 14       		.uleb128 0x14
 9564 08bb 65787000 		.ascii	"exp\000"
 9565 08bf 07       		.byte	0x7
 9566 08c0 9101     		.2byte	0x191
 9567 08c2 41070000 		.4byte	0x741
 9568 08c6 2002     		.2byte	0x220
 9569 08c8 15       		.uleb128 0x15
 9570 08c9 4D000000 		.4byte	.LASF129
 9571 08cd 07       		.byte	0x7
 9572 08ce 9201     		.2byte	0x192
 9573 08d0 24090000 		.4byte	0x924
 9574 08d4 4002     		.2byte	0x240
 9575 08d6 14       		.uleb128 0x14
 9576 08d7 534800   		.ascii	"SH\000"
 9577 08da 07       		.byte	0x7
 9578 08db 9401     		.2byte	0x194
 9579 08dd E5070000 		.4byte	0x7e5
 9580 08e1 A002     		.2byte	0x2a0
 9581 08e3 00       		.byte	0
 9582 08e4 07       		.uleb128 0x7
 9583 08e5 81000000 		.4byte	0x81
 9584 08e9 F4080000 		.4byte	0x8f4
 9585 08ed 08       		.uleb128 0x8
 9586 08ee 0E010000 		.4byte	0x10e
 9587 08f2 0E       		.byte	0xe
 9588 08f3 00       		.byte	0
 9589 08f4 07       		.uleb128 0x7
 9590 08f5 81000000 		.4byte	0x81
 9591 08f9 04090000 		.4byte	0x904
 9592 08fd 08       		.uleb128 0x8
 9593 08fe 0E010000 		.4byte	0x10e
 9594 0902 3F       		.byte	0x3f
 9595 0903 00       		.byte	0
 9596 0904 07       		.uleb128 0x7
 9597 0905 20040000 		.4byte	0x420
 9598 0909 14090000 		.4byte	0x914
 9599 090d 08       		.uleb128 0x8
 9600 090e 0E010000 		.4byte	0x10e
 9601 0912 01       		.byte	0x1
 9602 0913 00       		.byte	0
 9603 0914 07       		.uleb128 0x7
 9604 0915 BA050000 		.4byte	0x5ba
 9605 0919 24090000 		.4byte	0x924
 9606 091d 08       		.uleb128 0x8
 9607 091e 0E010000 		.4byte	0x10e
 9608 0922 01       		.byte	0x1
 9609 0923 00       		.byte	0
 9610 0924 07       		.uleb128 0x7
 9611 0925 B0070000 		.4byte	0x7b0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 215


 9612 0929 34090000 		.4byte	0x934
 9613 092d 08       		.uleb128 0x8
 9614 092e 0E010000 		.4byte	0x10e
 9615 0932 02       		.byte	0x2
 9616 0933 00       		.byte	0
 9617 0934 11       		.uleb128 0x11
 9618 0935 BB0A0000 		.4byte	.LASF130
 9619 0939 28       		.byte	0x28
 9620 093a 07       		.byte	0x7
 9621 093b A201     		.2byte	0x1a2
 9622 093d 90090000 		.4byte	0x990
 9623 0941 10       		.uleb128 0x10
 9624 0942 21040000 		.4byte	.LASF131
 9625 0946 07       		.byte	0x7
 9626 0947 A301     		.2byte	0x1a3
 9627 0949 81000000 		.4byte	0x81
 9628 094d 00       		.byte	0
 9629 094e 10       		.uleb128 0x10
 9630 094f A1020000 		.4byte	.LASF132
 9631 0953 07       		.byte	0x7
 9632 0954 A401     		.2byte	0x1a4
 9633 0956 90090000 		.4byte	0x990
 9634 095a 02       		.byte	0x2
 9635 095b 10       		.uleb128 0x10
 9636 095c 290A0000 		.4byte	.LASF133
 9637 0960 07       		.byte	0x7
 9638 0961 A501     		.2byte	0x1a5
 9639 0963 90090000 		.4byte	0x990
 9640 0967 08       		.byte	0x8
 9641 0968 10       		.uleb128 0x10
 9642 0969 C70A0000 		.4byte	.LASF134
 9643 096d 07       		.byte	0x7
 9644 096e A601     		.2byte	0x1a6
 9645 0970 90090000 		.4byte	0x990
 9646 0974 0E       		.byte	0xe
 9647 0975 10       		.uleb128 0x10
 9648 0976 FA060000 		.4byte	.LASF135
 9649 097a 07       		.byte	0x7
 9650 097b A701     		.2byte	0x1a7
 9651 097d A0090000 		.4byte	0x9a0
 9652 0981 14       		.byte	0x14
 9653 0982 10       		.uleb128 0x10
 9654 0983 86010000 		.4byte	.LASF136
 9655 0987 07       		.byte	0x7
 9656 0988 A801     		.2byte	0x1a8
 9657 098a B1000000 		.4byte	0xb1
 9658 098e 24       		.byte	0x24
 9659 098f 00       		.byte	0
 9660 0990 07       		.uleb128 0x7
 9661 0991 B1000000 		.4byte	0xb1
 9662 0995 A0090000 		.4byte	0x9a0
 9663 0999 08       		.uleb128 0x8
 9664 099a 0E010000 		.4byte	0x10e
 9665 099e 02       		.byte	0x2
 9666 099f 00       		.byte	0
 9667 09a0 07       		.uleb128 0x7
 9668 09a1 D5000000 		.4byte	0xd5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 216


 9669 09a5 B0090000 		.4byte	0x9b0
 9670 09a9 08       		.uleb128 0x8
 9671 09aa 0E010000 		.4byte	0x10e
 9672 09ae 03       		.byte	0x3
 9673 09af 00       		.byte	0
 9674 09b0 11       		.uleb128 0x11
 9675 09b1 440F0000 		.4byte	.LASF137
 9676 09b5 08       		.byte	0x8
 9677 09b6 07       		.byte	0x7
 9678 09b7 AF01     		.2byte	0x1af
 9679 09b9 D8090000 		.4byte	0x9d8
 9680 09bd 10       		.uleb128 0x10
 9681 09be C8040000 		.4byte	.LASF138
 9682 09c2 07       		.byte	0x7
 9683 09c3 B001     		.2byte	0x1b0
 9684 09c5 BD000000 		.4byte	0xbd
 9685 09c9 00       		.byte	0
 9686 09ca 10       		.uleb128 0x10
 9687 09cb B7010000 		.4byte	.LASF139
 9688 09cf 07       		.byte	0x7
 9689 09d0 B101     		.2byte	0x1b1
 9690 09d2 BD000000 		.4byte	0xbd
 9691 09d6 04       		.byte	0x4
 9692 09d7 00       		.byte	0
 9693 09d8 11       		.uleb128 0x11
 9694 09d9 42030000 		.4byte	.LASF140
 9695 09dd 06       		.byte	0x6
 9696 09de 07       		.byte	0x7
 9697 09df B801     		.2byte	0x1b8
 9698 09e1 1A0A0000 		.4byte	0xa1a
 9699 09e5 10       		.uleb128 0x10
 9700 09e6 6D060000 		.4byte	.LASF141
 9701 09ea 07       		.byte	0x7
 9702 09eb B901     		.2byte	0x1b9
 9703 09ed 81000000 		.4byte	0x81
 9704 09f1 00       		.byte	0
 9705 09f2 10       		.uleb128 0x10
 9706 09f3 600F0000 		.4byte	.LASF142
 9707 09f7 07       		.byte	0x7
 9708 09f8 BA01     		.2byte	0x1ba
 9709 09fa 81000000 		.4byte	0x81
 9710 09fe 01       		.byte	0x1
 9711 09ff 10       		.uleb128 0x10
 9712 0a00 55050000 		.4byte	.LASF143
 9713 0a04 07       		.byte	0x7
 9714 0a05 BB01     		.2byte	0x1bb
 9715 0a07 B1000000 		.4byte	0xb1
 9716 0a0b 02       		.byte	0x2
 9717 0a0c 10       		.uleb128 0x10
 9718 0a0d 83080000 		.4byte	.LASF144
 9719 0a11 07       		.byte	0x7
 9720 0a12 BC01     		.2byte	0x1bc
 9721 0a14 B1000000 		.4byte	0xb1
 9722 0a18 04       		.byte	0x4
 9723 0a19 00       		.byte	0
 9724 0a1a 16       		.uleb128 0x16
 9725 0a1b 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 217


 9726 0a1c 2C000000 		.4byte	0x2c
 9727 0a20 07       		.byte	0x7
 9728 0a21 C001     		.2byte	0x1c0
 9729 0a23 4C0A0000 		.4byte	0xa4c
 9730 0a27 0A       		.uleb128 0xa
 9731 0a28 E5040000 		.4byte	.LASF145
 9732 0a2c 00       		.byte	0
 9733 0a2d 0A       		.uleb128 0xa
 9734 0a2e 790B0000 		.4byte	.LASF146
 9735 0a32 01       		.byte	0x1
 9736 0a33 0A       		.uleb128 0xa
 9737 0a34 B6090000 		.4byte	.LASF147
 9738 0a38 02       		.byte	0x2
 9739 0a39 0A       		.uleb128 0xa
 9740 0a3a F5010000 		.4byte	.LASF148
 9741 0a3e 03       		.byte	0x3
 9742 0a3f 0A       		.uleb128 0xa
 9743 0a40 B0080000 		.4byte	.LASF149
 9744 0a44 04       		.byte	0x4
 9745 0a45 0A       		.uleb128 0xa
 9746 0a46 310B0000 		.4byte	.LASF150
 9747 0a4a 05       		.byte	0x5
 9748 0a4b 00       		.byte	0
 9749 0a4c 05       		.uleb128 0x5
 9750 0a4d 50010000 		.4byte	.LASF151
 9751 0a51 07       		.byte	0x7
 9752 0a52 C801     		.2byte	0x1c8
 9753 0a54 1A0A0000 		.4byte	0xa1a
 9754 0a58 16       		.uleb128 0x16
 9755 0a59 01       		.byte	0x1
 9756 0a5a 2C000000 		.4byte	0x2c
 9757 0a5e 07       		.byte	0x7
 9758 0a5f CA01     		.2byte	0x1ca
 9759 0a61 840A0000 		.4byte	0xa84
 9760 0a65 0A       		.uleb128 0xa
 9761 0a66 79010000 		.4byte	.LASF152
 9762 0a6a 00       		.byte	0
 9763 0a6b 0A       		.uleb128 0xa
 9764 0a6c 95060000 		.4byte	.LASF153
 9765 0a70 01       		.byte	0x1
 9766 0a71 0A       		.uleb128 0xa
 9767 0a72 13070000 		.4byte	.LASF154
 9768 0a76 02       		.byte	0x2
 9769 0a77 0A       		.uleb128 0xa
 9770 0a78 FA020000 		.4byte	.LASF155
 9771 0a7c 03       		.byte	0x3
 9772 0a7d 0A       		.uleb128 0xa
 9773 0a7e 1F0F0000 		.4byte	.LASF156
 9774 0a82 04       		.byte	0x4
 9775 0a83 00       		.byte	0
 9776 0a84 05       		.uleb128 0x5
 9777 0a85 3E0C0000 		.4byte	.LASF157
 9778 0a89 07       		.byte	0x7
 9779 0a8a D101     		.2byte	0x1d1
 9780 0a8c 580A0000 		.4byte	0xa58
 9781 0a90 17       		.uleb128 0x17
 9782 0a91 A3040000 		.4byte	.LASF158
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 218


 9783 0a95 01       		.byte	0x1
 9784 0a96 62       		.byte	0x62
 9785 0a97 00000000 		.4byte	.LFB64
 9786 0a9b 18000000 		.4byte	.LFE64-.LFB64
 9787 0a9f 01       		.uleb128 0x1
 9788 0aa0 9C       		.byte	0x9c
 9789 0aa1 17       		.uleb128 0x17
 9790 0aa2 160E0000 		.4byte	.LASF159
 9791 0aa6 01       		.byte	0x1
 9792 0aa7 6D       		.byte	0x6d
 9793 0aa8 00000000 		.4byte	.LFB65
 9794 0aac 20000000 		.4byte	.LFE65-.LFB65
 9795 0ab0 01       		.uleb128 0x1
 9796 0ab1 9C       		.byte	0x9c
 9797 0ab2 18       		.uleb128 0x18
 9798 0ab3 5F080000 		.4byte	.LASF173
 9799 0ab7 01       		.byte	0x1
 9800 0ab8 86       		.byte	0x86
 9801 0ab9 00000000 		.4byte	.LFB66
 9802 0abd F4010000 		.4byte	.LFE66-.LFB66
 9803 0ac1 01       		.uleb128 0x1
 9804 0ac2 9C       		.byte	0x9c
 9805 0ac3 470B0000 		.4byte	0xb47
 9806 0ac7 19       		.uleb128 0x19
 9807 0ac8 AB000000 		.4byte	.LASF160
 9808 0acc 01       		.byte	0x1
 9809 0acd 8B       		.byte	0x8b
 9810 0ace 81000000 		.4byte	0x81
 9811 0ad2 05       		.uleb128 0x5
 9812 0ad3 03       		.byte	0x3
 9813 0ad4 00000000 		.4byte	state.10356
 9814 0ad8 19       		.uleb128 0x19
 9815 0ad9 7A050000 		.4byte	.LASF161
 9816 0add 01       		.byte	0x1
 9817 0ade 8E       		.byte	0x8e
 9818 0adf 81000000 		.4byte	0x81
 9819 0ae3 05       		.uleb128 0x5
 9820 0ae4 03       		.byte	0x3
 9821 0ae5 08000000 		.4byte	data_packet_index.10357
 9822 0ae9 19       		.uleb128 0x19
 9823 0aea FA0A0000 		.4byte	.LASF162
 9824 0aee 01       		.byte	0x1
 9825 0aef 8F       		.byte	0x8f
 9826 0af0 81000000 		.4byte	0x81
 9827 0af4 05       		.uleb128 0x5
 9828 0af5 03       		.byte	0x3
 9829 0af6 07000000 		.4byte	data_packet_length.10358
 9830 0afa 19       		.uleb128 0x19
 9831 0afb 8C050000 		.4byte	.LASF163
 9832 0aff 01       		.byte	0x1
 9833 0b00 90       		.byte	0x90
 9834 0b01 DF020000 		.4byte	0x2df
 9835 0b05 05       		.uleb128 0x5
 9836 0b06 03       		.byte	0x3
 9837 0b07 0C000000 		.4byte	data_packet_buffer.10359
 9838 0b0b 19       		.uleb128 0x19
 9839 0b0c 49090000 		.4byte	.LASF164
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 219


 9840 0b10 01       		.byte	0x1
 9841 0b11 91       		.byte	0x91
 9842 0b12 10040000 		.4byte	0x410
 9843 0b16 05       		.uleb128 0x5
 9844 0b17 03       		.byte	0x3
 9845 0b18 04000000 		.4byte	rx_queue.10360
 9846 0b1c 19       		.uleb128 0x19
 9847 0b1d 33010000 		.4byte	.LASF165
 9848 0b21 01       		.byte	0x1
 9849 0b22 94       		.byte	0x94
 9850 0b23 81000000 		.4byte	0x81
 9851 0b27 02       		.uleb128 0x2
 9852 0b28 91       		.byte	0x91
 9853 0b29 75       		.sleb128 -11
 9854 0b2a 19       		.uleb128 0x19
 9855 0b2b 3F050000 		.4byte	.LASF166
 9856 0b2f 01       		.byte	0x1
 9857 0b30 95       		.byte	0x95
 9858 0b31 81000000 		.4byte	0x81
 9859 0b35 02       		.uleb128 0x2
 9860 0b36 91       		.byte	0x91
 9861 0b37 77       		.sleb128 -9
 9862 0b38 19       		.uleb128 0x19
 9863 0b39 4A060000 		.4byte	.LASF167
 9864 0b3d 01       		.byte	0x1
 9865 0b3e 96       		.byte	0x96
 9866 0b3f 81000000 		.4byte	0x81
 9867 0b43 02       		.uleb128 0x2
 9868 0b44 91       		.byte	0x91
 9869 0b45 76       		.sleb128 -10
 9870 0b46 00       		.byte	0
 9871 0b47 1A       		.uleb128 0x1a
 9872 0b48 D80C0000 		.4byte	.LASF192
 9873 0b4c 01       		.byte	0x1
 9874 0b4d 0601     		.2byte	0x106
 9875 0b4f 00000000 		.4byte	.LFB67
 9876 0b53 18050000 		.4byte	.LFE67-.LFB67
 9877 0b57 01       		.uleb128 0x1
 9878 0b58 9C       		.byte	0x9c
 9879 0b59 C70B0000 		.4byte	0xbc7
 9880 0b5d 1B       		.uleb128 0x1b
 9881 0b5e AD050000 		.4byte	.LASF168
 9882 0b62 01       		.byte	0x1
 9883 0b63 0801     		.2byte	0x108
 9884 0b65 8D000000 		.4byte	0x8d
 9885 0b69 05       		.uleb128 0x5
 9886 0b6a 03       		.byte	0x3
 9887 0b6b 00000000 		.4byte	counter_calibration.10376
 9888 0b6f 1B       		.uleb128 0x1b
 9889 0b70 7D0A0000 		.4byte	.LASF169
 9890 0b74 01       		.byte	0x1
 9891 0b75 0901     		.2byte	0x109
 9892 0b77 8D000000 		.4byte	0x8d
 9893 0b7b 05       		.uleb128 0x5
 9894 0b7c 03       		.byte	0x3
 9895 0b7d 02000000 		.4byte	counter_tension_func.10377
 9896 0b81 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 220


 9897 0b82 4A010000 		.4byte	.LASF170
 9898 0b86 01       		.byte	0x1
 9899 0b87 0A01     		.2byte	0x10a
 9900 0b89 C70B0000 		.4byte	0xbc7
 9901 0b8d 03       		.uleb128 0x3
 9902 0b8e 91       		.byte	0x91
 9903 0b8f A86C     		.sleb128 -2520
 9904 0b91 1B       		.uleb128 0x1b
 9905 0b92 600A0000 		.4byte	.LASF171
 9906 0b96 01       		.byte	0x1
 9907 0b97 0C01     		.2byte	0x10c
 9908 0b99 81000000 		.4byte	0x81
 9909 0b9d 02       		.uleb128 0x2
 9910 0b9e 91       		.byte	0x91
 9911 0b9f 6E       		.sleb128 -18
 9912 0ba0 1B       		.uleb128 0x1b
 9913 0ba1 24080000 		.4byte	.LASF172
 9914 0ba5 01       		.byte	0x1
 9915 0ba6 0D01     		.2byte	0x10d
 9916 0ba8 81000000 		.4byte	0x81
 9917 0bac 02       		.uleb128 0x2
 9918 0bad 91       		.byte	0x91
 9919 0bae 6D       		.sleb128 -19
 9920 0baf 1C       		.uleb128 0x1c
 9921 0bb0 1C010000 		.4byte	.LBB2
 9922 0bb4 CE000000 		.4byte	.LBE2-.LBB2
 9923 0bb8 1D       		.uleb128 0x1d
 9924 0bb9 6900     		.ascii	"i\000"
 9925 0bbb 01       		.byte	0x1
 9926 0bbc 4601     		.2byte	0x146
 9927 0bbe 81000000 		.4byte	0x81
 9928 0bc2 02       		.uleb128 0x2
 9929 0bc3 91       		.byte	0x91
 9930 0bc4 6F       		.sleb128 -17
 9931 0bc5 00       		.byte	0
 9932 0bc6 00       		.byte	0
 9933 0bc7 07       		.uleb128 0x7
 9934 0bc8 E3000000 		.4byte	0xe3
 9935 0bcc D80B0000 		.4byte	0xbd8
 9936 0bd0 1E       		.uleb128 0x1e
 9937 0bd1 0E010000 		.4byte	0x10e
 9938 0bd5 C309     		.2byte	0x9c3
 9939 0bd7 00       		.byte	0
 9940 0bd8 1F       		.uleb128 0x1f
 9941 0bd9 EC040000 		.4byte	.LASF174
 9942 0bdd 01       		.byte	0x1
 9943 0bde 1C02     		.2byte	0x21c
 9944 0be0 00000000 		.4byte	.LFB68
 9945 0be4 000B0000 		.4byte	.LFE68-.LFB68
 9946 0be8 01       		.uleb128 0x1
 9947 0be9 9C       		.byte	0x9c
 9948 0bea D10D0000 		.4byte	0xdd1
 9949 0bee 1B       		.uleb128 0x1b
 9950 0bef FC000000 		.4byte	.LASF175
 9951 0bf3 01       		.byte	0x1
 9952 0bf4 1E02     		.2byte	0x21e
 9953 0bf6 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 221


 9954 0bfa 02       		.uleb128 0x2
 9955 0bfb 91       		.byte	0x91
 9956 0bfc 74       		.sleb128 -12
 9957 0bfd 1B       		.uleb128 0x1b
 9958 0bfe 1F0A0000 		.4byte	.LASF176
 9959 0c02 01       		.byte	0x1
 9960 0c03 1F02     		.2byte	0x21f
 9961 0c05 BD000000 		.4byte	0xbd
 9962 0c09 03       		.uleb128 0x3
 9963 0c0a 91       		.byte	0x91
 9964 0c0b A47F     		.sleb128 -92
 9965 0c0d 1B       		.uleb128 0x1b
 9966 0c0e D10D0000 		.4byte	.LASF177
 9967 0c12 01       		.byte	0x1
 9968 0c13 2002     		.2byte	0x220
 9969 0c15 BD000000 		.4byte	0xbd
 9970 0c19 03       		.uleb128 0x3
 9971 0c1a 91       		.byte	0x91
 9972 0c1b A07F     		.sleb128 -96
 9973 0c1d 1B       		.uleb128 0x1b
 9974 0c1e 66090000 		.4byte	.LASF178
 9975 0c22 01       		.byte	0x1
 9976 0c23 2102     		.2byte	0x221
 9977 0c25 BD000000 		.4byte	0xbd
 9978 0c29 02       		.uleb128 0x2
 9979 0c2a 91       		.byte	0x91
 9980 0c2b 70       		.sleb128 -16
 9981 0c2c 1B       		.uleb128 0x1b
 9982 0c2d 27040000 		.4byte	.LASF179
 9983 0c31 01       		.byte	0x1
 9984 0c32 2202     		.2byte	0x222
 9985 0c34 BD000000 		.4byte	0xbd
 9986 0c38 02       		.uleb128 0x2
 9987 0c39 91       		.byte	0x91
 9988 0c3a 6C       		.sleb128 -20
 9989 0c3b 1B       		.uleb128 0x1b
 9990 0c3c 4B030000 		.4byte	.LASF180
 9991 0c40 01       		.byte	0x1
 9992 0c41 2302     		.2byte	0x223
 9993 0c43 BD000000 		.4byte	0xbd
 9994 0c47 03       		.uleb128 0x3
 9995 0c48 91       		.byte	0x91
 9996 0c49 AC7F     		.sleb128 -84
 9997 0c4b 1B       		.uleb128 0x1b
 9998 0c4c 55030000 		.4byte	.LASF181
 9999 0c50 01       		.byte	0x1
 10000 0c51 2302     		.2byte	0x223
 10001 0c53 BD000000 		.4byte	0xbd
 10002 0c57 03       		.uleb128 0x3
 10003 0c58 91       		.byte	0x91
 10004 0c59 A87F     		.sleb128 -88
 10005 0c5b 1B       		.uleb128 0x1b
 10006 0c5c 600A0000 		.4byte	.LASF171
 10007 0c60 01       		.byte	0x1
 10008 0c61 2502     		.2byte	0x225
 10009 0c63 81000000 		.4byte	0x81
 10010 0c67 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 222


 10011 0c68 91       		.byte	0x91
 10012 0c69 6B       		.sleb128 -21
 10013 0c6a 1B       		.uleb128 0x1b
 10014 0c6b C5020000 		.4byte	.LASF182
 10015 0c6f 01       		.byte	0x1
 10016 0c70 2702     		.2byte	0x227
 10017 0c72 D10D0000 		.4byte	0xdd1
 10018 0c76 02       		.uleb128 0x2
 10019 0c77 91       		.byte	0x91
 10020 0c78 64       		.sleb128 -28
 10021 0c79 1B       		.uleb128 0x1b
 10022 0c7a 47020000 		.4byte	.LASF183
 10023 0c7e 01       		.byte	0x1
 10024 0c7f 2802     		.2byte	0x228
 10025 0c81 81000000 		.4byte	0x81
 10026 0c85 02       		.uleb128 0x2
 10027 0c86 91       		.byte	0x91
 10028 0c87 63       		.sleb128 -29
 10029 0c88 1D       		.uleb128 0x1d
 10030 0c89 6B5F7000 		.ascii	"k_p\000"
 10031 0c8d 01       		.byte	0x1
 10032 0c8e 2A02     		.2byte	0x22a
 10033 0c90 BD000000 		.4byte	0xbd
 10034 0c94 02       		.uleb128 0x2
 10035 0c95 91       		.byte	0x91
 10036 0c96 5C       		.sleb128 -36
 10037 0c97 1D       		.uleb128 0x1d
 10038 0c98 6B5F6900 		.ascii	"k_i\000"
 10039 0c9c 01       		.byte	0x1
 10040 0c9d 2B02     		.2byte	0x22b
 10041 0c9f BD000000 		.4byte	0xbd
 10042 0ca3 02       		.uleb128 0x2
 10043 0ca4 91       		.byte	0x91
 10044 0ca5 58       		.sleb128 -40
 10045 0ca6 1D       		.uleb128 0x1d
 10046 0ca7 6B5F6400 		.ascii	"k_d\000"
 10047 0cab 01       		.byte	0x1
 10048 0cac 2C02     		.2byte	0x22c
 10049 0cae BD000000 		.4byte	0xbd
 10050 0cb2 02       		.uleb128 0x2
 10051 0cb3 91       		.byte	0x91
 10052 0cb4 54       		.sleb128 -44
 10053 0cb5 1B       		.uleb128 0x1b
 10054 0cb6 0D0B0000 		.4byte	.LASF70
 10055 0cba 01       		.byte	0x1
 10056 0cbb 2E02     		.2byte	0x22e
 10057 0cbd BD000000 		.4byte	0xbd
 10058 0cc1 02       		.uleb128 0x2
 10059 0cc2 91       		.byte	0x91
 10060 0cc3 50       		.sleb128 -48
 10061 0cc4 1B       		.uleb128 0x1b
 10062 0cc5 8C040000 		.4byte	.LASF71
 10063 0cc9 01       		.byte	0x1
 10064 0cca 2F02     		.2byte	0x22f
 10065 0ccc BD000000 		.4byte	0xbd
 10066 0cd0 02       		.uleb128 0x2
 10067 0cd1 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 223


 10068 0cd2 4C       		.sleb128 -52
 10069 0cd3 1B       		.uleb128 0x1b
 10070 0cd4 7F040000 		.4byte	.LASF72
 10071 0cd8 01       		.byte	0x1
 10072 0cd9 3002     		.2byte	0x230
 10073 0cdb BD000000 		.4byte	0xbd
 10074 0cdf 02       		.uleb128 0x2
 10075 0ce0 91       		.byte	0x91
 10076 0ce1 48       		.sleb128 -56
 10077 0ce2 1B       		.uleb128 0x1b
 10078 0ce3 AA0D0000 		.4byte	.LASF73
 10079 0ce7 01       		.byte	0x1
 10080 0ce8 3202     		.2byte	0x232
 10081 0cea BD000000 		.4byte	0xbd
 10082 0cee 02       		.uleb128 0x2
 10083 0cef 91       		.byte	0x91
 10084 0cf0 44       		.sleb128 -60
 10085 0cf1 1B       		.uleb128 0x1b
 10086 0cf2 28050000 		.4byte	.LASF74
 10087 0cf6 01       		.byte	0x1
 10088 0cf7 3302     		.2byte	0x233
 10089 0cf9 BD000000 		.4byte	0xbd
 10090 0cfd 02       		.uleb128 0x2
 10091 0cfe 91       		.byte	0x91
 10092 0cff 40       		.sleb128 -64
 10093 0d00 1B       		.uleb128 0x1b
 10094 0d01 A30C0000 		.4byte	.LASF75
 10095 0d05 01       		.byte	0x1
 10096 0d06 3402     		.2byte	0x234
 10097 0d08 BD000000 		.4byte	0xbd
 10098 0d0c 03       		.uleb128 0x3
 10099 0d0d 91       		.byte	0x91
 10100 0d0e BC7F     		.sleb128 -68
 10101 0d10 1B       		.uleb128 0x1b
 10102 0d11 36050000 		.4byte	.LASF76
 10103 0d15 01       		.byte	0x1
 10104 0d16 3602     		.2byte	0x236
 10105 0d18 BD000000 		.4byte	0xbd
 10106 0d1c 03       		.uleb128 0x3
 10107 0d1d 91       		.byte	0x91
 10108 0d1e B87F     		.sleb128 -72
 10109 0d20 1B       		.uleb128 0x1b
 10110 0d21 41060000 		.4byte	.LASF77
 10111 0d25 01       		.byte	0x1
 10112 0d26 3702     		.2byte	0x237
 10113 0d28 BD000000 		.4byte	0xbd
 10114 0d2c 03       		.uleb128 0x3
 10115 0d2d 91       		.byte	0x91
 10116 0d2e B47F     		.sleb128 -76
 10117 0d30 1B       		.uleb128 0x1b
 10118 0d31 570F0000 		.4byte	.LASF78
 10119 0d35 01       		.byte	0x1
 10120 0d36 3802     		.2byte	0x238
 10121 0d38 BD000000 		.4byte	0xbd
 10122 0d3c 03       		.uleb128 0x3
 10123 0d3d 91       		.byte	0x91
 10124 0d3e B07F     		.sleb128 -80
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 224


 10125 0d40 1B       		.uleb128 0x1b
 10126 0d41 03050000 		.4byte	.LASF184
 10127 0d45 01       		.byte	0x1
 10128 0d46 3C02     		.2byte	0x23c
 10129 0d48 BD000000 		.4byte	0xbd
 10130 0d4c 05       		.uleb128 0x5
 10131 0d4d 03       		.byte	0x3
 10132 0d4e 90000000 		.4byte	pos_error_sum.10409
 10133 0d52 1B       		.uleb128 0x1b
 10134 0d53 93030000 		.4byte	.LASF185
 10135 0d57 01       		.byte	0x1
 10136 0d58 3D02     		.2byte	0x23d
 10137 0d5a BD000000 		.4byte	0xbd
 10138 0d5e 05       		.uleb128 0x5
 10139 0d5f 03       		.byte	0x3
 10140 0d60 9C000000 		.4byte	curr_error_sum.10410
 10141 0d64 1B       		.uleb128 0x1b
 10142 0d65 BE090000 		.4byte	.LASF186
 10143 0d69 01       		.byte	0x1
 10144 0d6a 3F02     		.2byte	0x23f
 10145 0d6c BD000000 		.4byte	0xbd
 10146 0d70 05       		.uleb128 0x5
 10147 0d71 03       		.byte	0x3
 10148 0d72 94000000 		.4byte	prev_pos_err.10411
 10149 0d76 1B       		.uleb128 0x1b
 10150 0d77 EC0A0000 		.4byte	.LASF187
 10151 0d7b 01       		.byte	0x1
 10152 0d7c 4002     		.2byte	0x240
 10153 0d7e BD000000 		.4byte	0xbd
 10154 0d82 05       		.uleb128 0x5
 10155 0d83 03       		.byte	0x3
 10156 0d84 A0000000 		.4byte	prev_curr_err.10412
 10157 0d88 1B       		.uleb128 0x1b
 10158 0d89 EB0C0000 		.4byte	.LASF188
 10159 0d8d 01       		.byte	0x1
 10160 0d8e 4102     		.2byte	0x241
 10161 0d90 BD000000 		.4byte	0xbd
 10162 0d94 05       		.uleb128 0x5
 10163 0d95 03       		.byte	0x3
 10164 0d96 A4000000 		.4byte	prev_pwm.10413
 10165 0d9a 1B       		.uleb128 0x1b
 10166 0d9b 92040000 		.4byte	.LASF189
 10167 0d9f 01       		.byte	0x1
 10168 0da0 4302     		.2byte	0x243
 10169 0da2 81000000 		.4byte	0x81
 10170 0da6 05       		.uleb128 0x5
 10171 0da7 03       		.byte	0x3
 10172 0da8 98000000 		.4byte	motor_dir.10414
 10173 0dac 1B       		.uleb128 0x1b
 10174 0dad 5B050000 		.4byte	.LASF190
 10175 0db1 01       		.byte	0x1
 10176 0db2 4402     		.2byte	0x244
 10177 0db4 99000000 		.4byte	0x99
 10178 0db8 05       		.uleb128 0x5
 10179 0db9 03       		.byte	0x3
 10180 0dba A8000000 		.4byte	position_counter.10415
 10181 0dbe 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 225


 10182 0dbf 3D090000 		.4byte	.LASF191
 10183 0dc3 01       		.byte	0x1
 10184 0dc4 4502     		.2byte	0x245
 10185 0dc6 81000000 		.4byte	0x81
 10186 0dca 05       		.uleb128 0x5
 10187 0dcb 03       		.byte	0x3
 10188 0dcc 8C000000 		.4byte	current_emg.10416
 10189 0dd0 00       		.byte	0
 10190 0dd1 0C       		.uleb128 0xc
 10191 0dd2 04       		.byte	0x4
 10192 0dd3 20040000 		.4byte	0x420
 10193 0dd7 1A       		.uleb128 0x1a
 10194 0dd8 4F040000 		.4byte	.LASF193
 10195 0ddc 01       		.byte	0x1
 10196 0ddd F903     		.2byte	0x3f9
 10197 0ddf 00000000 		.4byte	.LFB69
 10198 0de3 D40C0000 		.4byte	.LFE69-.LFB69
 10199 0de7 01       		.uleb128 0x1
 10200 0de8 9C       		.byte	0x9c
 10201 0de9 D20F0000 		.4byte	0xfd2
 10202 0ded 20       		.uleb128 0x20
 10203 0dee 69647800 		.ascii	"idx\000"
 10204 0df2 01       		.byte	0x1
 10205 0df3 F903     		.2byte	0x3f9
 10206 0df5 81000000 		.4byte	0x81
 10207 0df9 03       		.uleb128 0x3
 10208 0dfa 91       		.byte	0x91
 10209 0dfb 977F     		.sleb128 -105
 10210 0dfd 1B       		.uleb128 0x1b
 10211 0dfe FC000000 		.4byte	.LASF175
 10212 0e02 01       		.byte	0x1
 10213 0e03 FB03     		.2byte	0x3fb
 10214 0e05 BD000000 		.4byte	0xbd
 10215 0e09 02       		.uleb128 0x2
 10216 0e0a 91       		.byte	0x91
 10217 0e0b 6C       		.sleb128 -20
 10218 0e0c 1B       		.uleb128 0x1b
 10219 0e0d 1F0A0000 		.4byte	.LASF176
 10220 0e11 01       		.byte	0x1
 10221 0e12 FC03     		.2byte	0x3fc
 10222 0e14 BD000000 		.4byte	0xbd
 10223 0e18 03       		.uleb128 0x3
 10224 0e19 91       		.byte	0x91
 10225 0e1a A07F     		.sleb128 -96
 10226 0e1c 1B       		.uleb128 0x1b
 10227 0e1d D10D0000 		.4byte	.LASF177
 10228 0e21 01       		.byte	0x1
 10229 0e22 FD03     		.2byte	0x3fd
 10230 0e24 BD000000 		.4byte	0xbd
 10231 0e28 03       		.uleb128 0x3
 10232 0e29 91       		.byte	0x91
 10233 0e2a 9C7F     		.sleb128 -100
 10234 0e2c 1B       		.uleb128 0x1b
 10235 0e2d 66090000 		.4byte	.LASF178
 10236 0e31 01       		.byte	0x1
 10237 0e32 FE03     		.2byte	0x3fe
 10238 0e34 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 226


 10239 0e38 02       		.uleb128 0x2
 10240 0e39 91       		.byte	0x91
 10241 0e3a 68       		.sleb128 -24
 10242 0e3b 1B       		.uleb128 0x1b
 10243 0e3c 27040000 		.4byte	.LASF179
 10244 0e40 01       		.byte	0x1
 10245 0e41 FF03     		.2byte	0x3ff
 10246 0e43 BD000000 		.4byte	0xbd
 10247 0e47 02       		.uleb128 0x2
 10248 0e48 91       		.byte	0x91
 10249 0e49 64       		.sleb128 -28
 10250 0e4a 1B       		.uleb128 0x1b
 10251 0e4b 4B030000 		.4byte	.LASF180
 10252 0e4f 01       		.byte	0x1
 10253 0e50 0004     		.2byte	0x400
 10254 0e52 BD000000 		.4byte	0xbd
 10255 0e56 03       		.uleb128 0x3
 10256 0e57 91       		.byte	0x91
 10257 0e58 A87F     		.sleb128 -88
 10258 0e5a 1B       		.uleb128 0x1b
 10259 0e5b 55030000 		.4byte	.LASF181
 10260 0e5f 01       		.byte	0x1
 10261 0e60 0004     		.2byte	0x400
 10262 0e62 BD000000 		.4byte	0xbd
 10263 0e66 03       		.uleb128 0x3
 10264 0e67 91       		.byte	0x91
 10265 0e68 A47F     		.sleb128 -92
 10266 0e6a 1D       		.uleb128 0x1d
 10267 0e6b 4D4F5400 		.ascii	"MOT\000"
 10268 0e6f 01       		.byte	0x1
 10269 0e70 0204     		.2byte	0x402
 10270 0e72 D10D0000 		.4byte	0xdd1
 10271 0e76 02       		.uleb128 0x2
 10272 0e77 91       		.byte	0x91
 10273 0e78 60       		.sleb128 -32
 10274 0e79 1B       		.uleb128 0x1b
 10275 0e7a 600E0000 		.4byte	.LASF194
 10276 0e7e 01       		.byte	0x1
 10277 0e7f 0304     		.2byte	0x403
 10278 0e81 81000000 		.4byte	0x81
 10279 0e85 02       		.uleb128 0x2
 10280 0e86 91       		.byte	0x91
 10281 0e87 5F       		.sleb128 -33
 10282 0e88 1D       		.uleb128 0x1d
 10283 0e89 6B5F7000 		.ascii	"k_p\000"
 10284 0e8d 01       		.byte	0x1
 10285 0e8e 0504     		.2byte	0x405
 10286 0e90 BD000000 		.4byte	0xbd
 10287 0e94 02       		.uleb128 0x2
 10288 0e95 91       		.byte	0x91
 10289 0e96 58       		.sleb128 -40
 10290 0e97 1D       		.uleb128 0x1d
 10291 0e98 6B5F6900 		.ascii	"k_i\000"
 10292 0e9c 01       		.byte	0x1
 10293 0e9d 0604     		.2byte	0x406
 10294 0e9f BD000000 		.4byte	0xbd
 10295 0ea3 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 227


 10296 0ea4 91       		.byte	0x91
 10297 0ea5 54       		.sleb128 -44
 10298 0ea6 1D       		.uleb128 0x1d
 10299 0ea7 6B5F6400 		.ascii	"k_d\000"
 10300 0eab 01       		.byte	0x1
 10301 0eac 0704     		.2byte	0x407
 10302 0eae BD000000 		.4byte	0xbd
 10303 0eb2 02       		.uleb128 0x2
 10304 0eb3 91       		.byte	0x91
 10305 0eb4 50       		.sleb128 -48
 10306 0eb5 1B       		.uleb128 0x1b
 10307 0eb6 0D0B0000 		.4byte	.LASF70
 10308 0eba 01       		.byte	0x1
 10309 0ebb 0904     		.2byte	0x409
 10310 0ebd BD000000 		.4byte	0xbd
 10311 0ec1 02       		.uleb128 0x2
 10312 0ec2 91       		.byte	0x91
 10313 0ec3 4C       		.sleb128 -52
 10314 0ec4 1B       		.uleb128 0x1b
 10315 0ec5 8C040000 		.4byte	.LASF71
 10316 0ec9 01       		.byte	0x1
 10317 0eca 0A04     		.2byte	0x40a
 10318 0ecc BD000000 		.4byte	0xbd
 10319 0ed0 02       		.uleb128 0x2
 10320 0ed1 91       		.byte	0x91
 10321 0ed2 48       		.sleb128 -56
 10322 0ed3 1B       		.uleb128 0x1b
 10323 0ed4 7F040000 		.4byte	.LASF72
 10324 0ed8 01       		.byte	0x1
 10325 0ed9 0B04     		.2byte	0x40b
 10326 0edb BD000000 		.4byte	0xbd
 10327 0edf 02       		.uleb128 0x2
 10328 0ee0 91       		.byte	0x91
 10329 0ee1 44       		.sleb128 -60
 10330 0ee2 1B       		.uleb128 0x1b
 10331 0ee3 AA0D0000 		.4byte	.LASF73
 10332 0ee7 01       		.byte	0x1
 10333 0ee8 0D04     		.2byte	0x40d
 10334 0eea BD000000 		.4byte	0xbd
 10335 0eee 02       		.uleb128 0x2
 10336 0eef 91       		.byte	0x91
 10337 0ef0 40       		.sleb128 -64
 10338 0ef1 1B       		.uleb128 0x1b
 10339 0ef2 28050000 		.4byte	.LASF74
 10340 0ef6 01       		.byte	0x1
 10341 0ef7 0E04     		.2byte	0x40e
 10342 0ef9 BD000000 		.4byte	0xbd
 10343 0efd 03       		.uleb128 0x3
 10344 0efe 91       		.byte	0x91
 10345 0eff BC7F     		.sleb128 -68
 10346 0f01 1B       		.uleb128 0x1b
 10347 0f02 A30C0000 		.4byte	.LASF75
 10348 0f06 01       		.byte	0x1
 10349 0f07 0F04     		.2byte	0x40f
 10350 0f09 BD000000 		.4byte	0xbd
 10351 0f0d 03       		.uleb128 0x3
 10352 0f0e 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 228


 10353 0f0f B87F     		.sleb128 -72
 10354 0f11 1B       		.uleb128 0x1b
 10355 0f12 36050000 		.4byte	.LASF76
 10356 0f16 01       		.byte	0x1
 10357 0f17 1104     		.2byte	0x411
 10358 0f19 BD000000 		.4byte	0xbd
 10359 0f1d 03       		.uleb128 0x3
 10360 0f1e 91       		.byte	0x91
 10361 0f1f B47F     		.sleb128 -76
 10362 0f21 1B       		.uleb128 0x1b
 10363 0f22 41060000 		.4byte	.LASF77
 10364 0f26 01       		.byte	0x1
 10365 0f27 1204     		.2byte	0x412
 10366 0f29 BD000000 		.4byte	0xbd
 10367 0f2d 03       		.uleb128 0x3
 10368 0f2e 91       		.byte	0x91
 10369 0f2f B07F     		.sleb128 -80
 10370 0f31 1B       		.uleb128 0x1b
 10371 0f32 570F0000 		.4byte	.LASF78
 10372 0f36 01       		.byte	0x1
 10373 0f37 1304     		.2byte	0x413
 10374 0f39 BD000000 		.4byte	0xbd
 10375 0f3d 03       		.uleb128 0x3
 10376 0f3e 91       		.byte	0x91
 10377 0f3f AC7F     		.sleb128 -84
 10378 0f41 1B       		.uleb128 0x1b
 10379 0f42 03050000 		.4byte	.LASF184
 10380 0f46 01       		.byte	0x1
 10381 0f47 1704     		.2byte	0x417
 10382 0f49 82020000 		.4byte	0x282
 10383 0f4d 05       		.uleb128 0x5
 10384 0f4e 03       		.byte	0x3
 10385 0f4f B0000000 		.4byte	pos_error_sum.10464
 10386 0f53 1B       		.uleb128 0x1b
 10387 0f54 93030000 		.4byte	.LASF185
 10388 0f58 01       		.byte	0x1
 10389 0f59 1804     		.2byte	0x418
 10390 0f5b 82020000 		.4byte	0x282
 10391 0f5f 05       		.uleb128 0x5
 10392 0f60 03       		.byte	0x3
 10393 0f61 C4000000 		.4byte	curr_error_sum.10465
 10394 0f65 1B       		.uleb128 0x1b
 10395 0f66 BE090000 		.4byte	.LASF186
 10396 0f6a 01       		.byte	0x1
 10397 0f6b 1A04     		.2byte	0x41a
 10398 0f6d 82020000 		.4byte	0x282
 10399 0f71 05       		.uleb128 0x5
 10400 0f72 03       		.byte	0x3
 10401 0f73 B8000000 		.4byte	prev_pos_err.10466
 10402 0f77 1B       		.uleb128 0x1b
 10403 0f78 EC0A0000 		.4byte	.LASF187
 10404 0f7c 01       		.byte	0x1
 10405 0f7d 1B04     		.2byte	0x41b
 10406 0f7f 82020000 		.4byte	0x282
 10407 0f83 05       		.uleb128 0x5
 10408 0f84 03       		.byte	0x3
 10409 0f85 CC000000 		.4byte	prev_curr_err.10467
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 229


 10410 0f89 1B       		.uleb128 0x1b
 10411 0f8a EB0C0000 		.4byte	.LASF188
 10412 0f8e 01       		.byte	0x1
 10413 0f8f 1C04     		.2byte	0x41c
 10414 0f91 82020000 		.4byte	0x282
 10415 0f95 05       		.uleb128 0x5
 10416 0f96 03       		.byte	0x3
 10417 0f97 D4000000 		.4byte	prev_pwm.10468
 10418 0f9b 1B       		.uleb128 0x1b
 10419 0f9c 92040000 		.4byte	.LASF189
 10420 0fa0 01       		.byte	0x1
 10421 0fa1 1E04     		.2byte	0x41e
 10422 0fa3 D20F0000 		.4byte	0xfd2
 10423 0fa7 05       		.uleb128 0x5
 10424 0fa8 03       		.byte	0x3
 10425 0fa9 C0000000 		.4byte	motor_dir.10469
 10426 0fad 1B       		.uleb128 0x1b
 10427 0fae 5B050000 		.4byte	.LASF190
 10428 0fb2 01       		.byte	0x1
 10429 0fb3 1F04     		.2byte	0x41f
 10430 0fb5 51030000 		.4byte	0x351
 10431 0fb9 05       		.uleb128 0x5
 10432 0fba 03       		.byte	0x3
 10433 0fbb DC000000 		.4byte	position_counter.10470
 10434 0fbf 1B       		.uleb128 0x1b
 10435 0fc0 3D090000 		.4byte	.LASF191
 10436 0fc4 01       		.byte	0x1
 10437 0fc5 2004     		.2byte	0x420
 10438 0fc7 D20F0000 		.4byte	0xfd2
 10439 0fcb 05       		.uleb128 0x5
 10440 0fcc 03       		.byte	0x3
 10441 0fcd AC000000 		.4byte	current_emg.10471
 10442 0fd1 00       		.byte	0
 10443 0fd2 07       		.uleb128 0x7
 10444 0fd3 81000000 		.4byte	0x81
 10445 0fd7 E20F0000 		.4byte	0xfe2
 10446 0fdb 08       		.uleb128 0x8
 10447 0fdc 0E010000 		.4byte	0x10e
 10448 0fe0 01       		.byte	0x1
 10449 0fe1 00       		.byte	0
 10450 0fe2 1A       		.uleb128 0x1a
 10451 0fe3 D4020000 		.4byte	.LASF195
 10452 0fe7 01       		.byte	0x1
 10453 0fe8 DA05     		.2byte	0x5da
 10454 0fea 00000000 		.4byte	.LFB70
 10455 0fee 10080000 		.4byte	.LFE70-.LFB70
 10456 0ff2 01       		.uleb128 0x1
 10457 0ff3 9C       		.byte	0x9c
 10458 0ff4 7C110000 		.4byte	0x117c
 10459 0ff8 21       		.uleb128 0x21
 10460 0ff9 8A000000 		.4byte	.LASF196
 10461 0ffd 01       		.byte	0x1
 10462 0ffe DA05     		.2byte	0x5da
 10463 1000 81000000 		.4byte	0x81
 10464 1004 03       		.uleb128 0x3
 10465 1005 91       		.byte	0x91
 10466 1006 BF7F     		.sleb128 -65
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 230


 10467 1008 21       		.uleb128 0x21
 10468 1009 52090000 		.4byte	.LASF197
 10469 100d 01       		.byte	0x1
 10470 100e DA05     		.2byte	0x5da
 10471 1010 81000000 		.4byte	0x81
 10472 1014 03       		.uleb128 0x3
 10473 1015 91       		.byte	0x91
 10474 1016 BE7F     		.sleb128 -66
 10475 1018 1B       		.uleb128 0x1b
 10476 1019 22060000 		.4byte	.LASF198
 10477 101d 01       		.byte	0x1
 10478 101e DC05     		.2byte	0x5dc
 10479 1020 81000000 		.4byte	0x81
 10480 1024 02       		.uleb128 0x2
 10481 1025 91       		.byte	0x91
 10482 1026 67       		.sleb128 -25
 10483 1027 1D       		.uleb128 0x1d
 10484 1028 6A6A00   		.ascii	"jj\000"
 10485 102b 01       		.byte	0x1
 10486 102c DF05     		.2byte	0x5df
 10487 102e 81000000 		.4byte	0x81
 10488 1032 02       		.uleb128 0x2
 10489 1033 91       		.byte	0x91
 10490 1034 66       		.sleb128 -26
 10491 1035 1B       		.uleb128 0x1b
 10492 1036 AD020000 		.4byte	.LASF199
 10493 103a 01       		.byte	0x1
 10494 103b E105     		.2byte	0x5e1
 10495 103d 7C110000 		.4byte	0x117c
 10496 1041 02       		.uleb128 0x2
 10497 1042 91       		.byte	0x91
 10498 1043 40       		.sleb128 -64
 10499 1044 1B       		.uleb128 0x1b
 10500 1045 040E0000 		.4byte	.LASF200
 10501 1049 01       		.byte	0x1
 10502 104a E205     		.2byte	0x5e2
 10503 104c B1000000 		.4byte	0xb1
 10504 1050 02       		.uleb128 0x2
 10505 1051 91       		.byte	0x91
 10506 1052 64       		.sleb128 -28
 10507 1053 1B       		.uleb128 0x1b
 10508 1054 D70A0000 		.4byte	.LASF201
 10509 1058 01       		.byte	0x1
 10510 1059 E305     		.2byte	0x5e3
 10511 105b BD000000 		.4byte	0xbd
 10512 105f 02       		.uleb128 0x2
 10513 1060 91       		.byte	0x91
 10514 1061 54       		.sleb128 -44
 10515 1062 1B       		.uleb128 0x1b
 10516 1063 AA0C0000 		.4byte	.LASF202
 10517 1067 01       		.byte	0x1
 10518 1068 E405     		.2byte	0x5e4
 10519 106a BD000000 		.4byte	0xbd
 10520 106e 02       		.uleb128 0x2
 10521 106f 91       		.byte	0x91
 10522 1070 60       		.sleb128 -32
 10523 1071 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 231


 10524 1072 DC030000 		.4byte	.LASF203
 10525 1076 01       		.byte	0x1
 10526 1077 E505     		.2byte	0x5e5
 10527 1079 BD000000 		.4byte	0xbd
 10528 107d 02       		.uleb128 0x2
 10529 107e 91       		.byte	0x91
 10530 107f 4C       		.sleb128 -52
 10531 1080 1B       		.uleb128 0x1b
 10532 1081 850C0000 		.4byte	.LASF204
 10533 1085 01       		.byte	0x1
 10534 1086 E605     		.2byte	0x5e6
 10535 1088 BD000000 		.4byte	0xbd
 10536 108c 02       		.uleb128 0x2
 10537 108d 91       		.byte	0x91
 10538 108e 50       		.sleb128 -48
 10539 108f 1B       		.uleb128 0x1b
 10540 1090 CB090000 		.4byte	.LASF205
 10541 1094 01       		.byte	0x1
 10542 1095 E705     		.2byte	0x5e7
 10543 1097 A5000000 		.4byte	0xa5
 10544 109b 02       		.uleb128 0x2
 10545 109c 91       		.byte	0x91
 10546 109d 5F       		.sleb128 -33
 10547 109e 1B       		.uleb128 0x1b
 10548 109f 6A0A0000 		.4byte	.LASF206
 10549 10a3 01       		.byte	0x1
 10550 10a4 E905     		.2byte	0x5e9
 10551 10a6 8C110000 		.4byte	0x118c
 10552 10aa 05       		.uleb128 0x5
 10553 10ab 03       		.byte	0x3
 10554 10ac E4000000 		.4byte	last_value_encoder.10511
 10555 10b0 1B       		.uleb128 0x1b
 10556 10b1 E4050000 		.4byte	.LASF207
 10557 10b5 01       		.byte	0x1
 10558 10b6 EA05     		.2byte	0x5ea
 10559 10b8 8C110000 		.4byte	0x118c
 10560 10bc 05       		.uleb128 0x5
 10561 10bd 03       		.byte	0x3
 10562 10be FC000000 		.4byte	comp_value_encoder.10512
 10563 10c2 1B       		.uleb128 0x1b
 10564 10c3 E8020000 		.4byte	.LASF208
 10565 10c7 01       		.byte	0x1
 10566 10c8 EB05     		.2byte	0x5eb
 10567 10ca A2110000 		.4byte	0x11a2
 10568 10ce 05       		.uleb128 0x5
 10569 10cf 03       		.byte	0x3
 10570 10d0 14010000 		.4byte	error.10513
 10571 10d4 1B       		.uleb128 0x1b
 10572 10d5 6F0C0000 		.4byte	.LASF209
 10573 10d9 01       		.byte	0x1
 10574 10da ED05     		.2byte	0x5ed
 10575 10dc D20F0000 		.4byte	0xfd2
 10576 10e0 05       		.uleb128 0x5
 10577 10e1 03       		.byte	0x3
 10578 10e2 04000000 		.4byte	only_first_time.10514
 10579 10e6 1B       		.uleb128 0x1b
 10580 10e7 76020000 		.4byte	.LASF210
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 232


 10581 10eb 01       		.byte	0x1
 10582 10ec EE05     		.2byte	0x5ee
 10583 10ee D20F0000 		.4byte	0xfd2
 10584 10f2 05       		.uleb128 0x5
 10585 10f3 03       		.byte	0x3
 10586 10f4 6C010000 		.4byte	safe_startup_motor_activation.10515
 10587 10f8 1B       		.uleb128 0x1b
 10588 10f9 5F000000 		.4byte	.LASF211
 10589 10fd 01       		.byte	0x1
 10590 10fe EF05     		.2byte	0x5ef
 10591 1100 D20F0000 		.4byte	0xfd2
 10592 1104 05       		.uleb128 0x5
 10593 1105 03       		.byte	0x3
 10594 1106 68010000 		.4byte	one_time_execute.10516
 10595 110a 1B       		.uleb128 0x1b
 10596 110b 9C080000 		.4byte	.LASF212
 10597 110f 01       		.byte	0x1
 10598 1110 F005     		.2byte	0x5f0
 10599 1112 51030000 		.4byte	0x351
 10600 1116 05       		.uleb128 0x5
 10601 1117 03       		.byte	0x3
 10602 1118 70010000 		.4byte	count_startup_motor.10517
 10603 111c 1B       		.uleb128 0x1b
 10604 111d 04030000 		.4byte	.LASF213
 10605 1121 01       		.byte	0x1
 10606 1122 F105     		.2byte	0x5f1
 10607 1124 D20F0000 		.4byte	0xfd2
 10608 1128 05       		.uleb128 0x5
 10609 1129 03       		.byte	0x3
 10610 112a 64010000 		.4byte	pos_reconstruct.10518
 10611 112e 1B       		.uleb128 0x1b
 10612 112f F8070000 		.4byte	.LASF214
 10613 1133 01       		.byte	0x1
 10614 1134 F305     		.2byte	0x5f3
 10615 1136 8C110000 		.4byte	0x118c
 10616 113a 05       		.uleb128 0x5
 10617 113b 03       		.byte	0x3
 10618 113c 1C010000 		.4byte	v_value.10519
 10619 1140 1B       		.uleb128 0x1b
 10620 1141 4E0F0000 		.4byte	.LASF215
 10621 1145 01       		.byte	0x1
 10622 1146 F405     		.2byte	0x5f4
 10623 1148 8C110000 		.4byte	0x118c
 10624 114c 05       		.uleb128 0x5
 10625 114d 03       		.byte	0x3
 10626 114e 34010000 		.4byte	vv_value.10520
 10627 1152 1B       		.uleb128 0x1b
 10628 1153 3B010000 		.4byte	.LASF216
 10629 1157 01       		.byte	0x1
 10630 1158 F505     		.2byte	0x5f5
 10631 115a 8C110000 		.4byte	0x118c
 10632 115e 05       		.uleb128 0x5
 10633 115f 03       		.byte	0x3
 10634 1160 4C010000 		.4byte	vvv_value.10521
 10635 1164 1C       		.uleb128 0x1c
 10636 1165 94000000 		.4byte	.LBB3
 10637 1169 6A000000 		.4byte	.LBE3-.LBB3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 233


 10638 116d 1D       		.uleb128 0x1d
 10639 116e 6A00     		.ascii	"j\000"
 10640 1170 01       		.byte	0x1
 10641 1171 0506     		.2byte	0x605
 10642 1173 68000000 		.4byte	0x68
 10643 1177 02       		.uleb128 0x2
 10644 1178 91       		.byte	0x91
 10645 1179 58       		.sleb128 -40
 10646 117a 00       		.byte	0
 10647 117b 00       		.byte	0
 10648 117c 07       		.uleb128 0x7
 10649 117d 99000000 		.4byte	0x99
 10650 1181 8C110000 		.4byte	0x118c
 10651 1185 08       		.uleb128 0x8
 10652 1186 0E010000 		.4byte	0x10e
 10653 118a 02       		.byte	0x2
 10654 118b 00       		.byte	0
 10655 118c 07       		.uleb128 0x7
 10656 118d BD000000 		.4byte	0xbd
 10657 1191 A2110000 		.4byte	0x11a2
 10658 1195 08       		.uleb128 0x8
 10659 1196 0E010000 		.4byte	0x10e
 10660 119a 01       		.byte	0x1
 10661 119b 08       		.uleb128 0x8
 10662 119c 0E010000 		.4byte	0x10e
 10663 11a0 02       		.byte	0x2
 10664 11a1 00       		.byte	0
 10665 11a2 07       		.uleb128 0x7
 10666 11a3 81000000 		.4byte	0x81
 10667 11a7 B8110000 		.4byte	0x11b8
 10668 11ab 08       		.uleb128 0x8
 10669 11ac 0E010000 		.4byte	0x10e
 10670 11b0 01       		.byte	0x1
 10671 11b1 08       		.uleb128 0x8
 10672 11b2 0E010000 		.4byte	0x10e
 10673 11b6 02       		.byte	0x2
 10674 11b7 00       		.byte	0
 10675 11b8 1F       		.uleb128 0x1f
 10676 11b9 7F0B0000 		.4byte	.LASF217
 10677 11bd 01       		.byte	0x1
 10678 11be AD06     		.2byte	0x6ad
 10679 11c0 00000000 		.4byte	.LFB71
 10680 11c4 200D0000 		.4byte	.LFE71-.LFB71
 10681 11c8 01       		.uleb128 0x1
 10682 11c9 9C       		.byte	0x9c
 10683 11ca 4A120000 		.4byte	0x124a
 10684 11ce 1B       		.uleb128 0x1b
 10685 11cf 4B0B0000 		.4byte	.LASF218
 10686 11d3 01       		.byte	0x1
 10687 11d4 C106     		.2byte	0x6c1
 10688 11d6 BD000000 		.4byte	0xbd
 10689 11da 02       		.uleb128 0x2
 10690 11db 91       		.byte	0x91
 10691 11dc 64       		.sleb128 -28
 10692 11dd 1B       		.uleb128 0x1b
 10693 11de 530C0000 		.4byte	.LASF219
 10694 11e2 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 234


 10695 11e3 C306     		.2byte	0x6c3
 10696 11e5 8D000000 		.4byte	0x8d
 10697 11e9 05       		.uleb128 0x5
 10698 11ea 03       		.byte	0x3
 10699 11eb 80010000 		.4byte	emg_counter_1.10538
 10700 11ef 1B       		.uleb128 0x1b
 10701 11f0 610C0000 		.4byte	.LASF220
 10702 11f4 01       		.byte	0x1
 10703 11f5 C406     		.2byte	0x6c4
 10704 11f7 8D000000 		.4byte	0x8d
 10705 11fb 05       		.uleb128 0x5
 10706 11fc 03       		.byte	0x3
 10707 11fd 82010000 		.4byte	emg_counter_2.10539
 10708 1201 1B       		.uleb128 0x1b
 10709 1202 10020000 		.4byte	.LASF221
 10710 1206 01       		.byte	0x1
 10711 1207 C506     		.2byte	0x6c5
 10712 1209 81000000 		.4byte	0x81
 10713 120d 05       		.uleb128 0x5
 10714 120e 03       		.byte	0x3
 10715 120f 06000000 		.4byte	first_tension_valid.10540
 10716 1213 1B       		.uleb128 0x1b
 10717 1214 C4080000 		.4byte	.LASF222
 10718 1218 01       		.byte	0x1
 10719 1219 C706     		.2byte	0x6c7
 10720 121b 8D000000 		.4byte	0x8d
 10721 121f 05       		.uleb128 0x5
 10722 1220 03       		.byte	0x3
 10723 1221 78010000 		.4byte	count.10541
 10724 1225 1B       		.uleb128 0x1b
 10725 1226 2B010000 		.4byte	.LASF223
 10726 122a 01       		.byte	0x1
 10727 122b C806     		.2byte	0x6c8
 10728 122d 99000000 		.4byte	0x99
 10729 1231 05       		.uleb128 0x5
 10730 1232 03       		.byte	0x3
 10731 1233 7C010000 		.4byte	v_count.10542
 10732 1237 1D       		.uleb128 0x1d
 10733 1238 69647800 		.ascii	"idx\000"
 10734 123c 01       		.byte	0x1
 10735 123d C906     		.2byte	0x6c9
 10736 123f 81000000 		.4byte	0x81
 10737 1243 05       		.uleb128 0x5
 10738 1244 03       		.byte	0x3
 10739 1245 7A010000 		.4byte	idx.10543
 10740 1249 00       		.byte	0
 10741 124a 22       		.uleb128 0x22
 10742 124b 5C0B0000 		.4byte	.LASF224
 10743 124f 01       		.byte	0x1
 10744 1250 5B08     		.2byte	0x85b
 10745 1252 00000000 		.4byte	.LFB72
 10746 1256 F4000000 		.4byte	.LFE72-.LFB72
 10747 125a 01       		.uleb128 0x1
 10748 125b 9C       		.byte	0x9c
 10749 125c 78120000 		.4byte	0x1278
 10750 1260 1C       		.uleb128 0x1c
 10751 1261 06000000 		.4byte	.LBB4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 235


 10752 1265 D0000000 		.4byte	.LBE4-.LBB4
 10753 1269 1D       		.uleb128 0x1d
 10754 126a 6900     		.ascii	"i\000"
 10755 126c 01       		.byte	0x1
 10756 126d 5D08     		.2byte	0x85d
 10757 126f 81000000 		.4byte	0x81
 10758 1273 02       		.uleb128 0x2
 10759 1274 91       		.byte	0x91
 10760 1275 77       		.sleb128 -9
 10761 1276 00       		.byte	0
 10762 1277 00       		.byte	0
 10763 1278 23       		.uleb128 0x23
 10764 1279 14030000 		.4byte	.LASF225
 10765 127d 01       		.byte	0x1
 10766 127e 7708     		.2byte	0x877
 10767 1280 00000000 		.4byte	.LFB73
 10768 1284 78000000 		.4byte	.LFE73-.LFB73
 10769 1288 01       		.uleb128 0x1
 10770 1289 9C       		.byte	0x9c
 10771 128a CB120000 		.4byte	0x12cb
 10772 128e 21       		.uleb128 0x21
 10773 128f D4090000 		.4byte	.LASF226
 10774 1293 01       		.byte	0x1
 10775 1294 7708     		.2byte	0x877
 10776 1296 81000000 		.4byte	0x81
 10777 129a 02       		.uleb128 0x2
 10778 129b 91       		.byte	0x91
 10779 129c 6F       		.sleb128 -17
 10780 129d 1B       		.uleb128 0x1b
 10781 129e 22060000 		.4byte	.LASF198
 10782 12a2 01       		.byte	0x1
 10783 12a3 7908     		.2byte	0x879
 10784 12a5 81000000 		.4byte	0x81
 10785 12a9 02       		.uleb128 0x2
 10786 12aa 91       		.byte	0x91
 10787 12ab 73       		.sleb128 -13
 10788 12ac 1B       		.uleb128 0x1b
 10789 12ad 540A0000 		.4byte	.LASF227
 10790 12b1 01       		.byte	0x1
 10791 12b2 7A08     		.2byte	0x87a
 10792 12b4 8D000000 		.4byte	0x8d
 10793 12b8 02       		.uleb128 0x2
 10794 12b9 91       		.byte	0x91
 10795 12ba 76       		.sleb128 -10
 10796 12bb 1B       		.uleb128 0x1b
 10797 12bc C2060000 		.4byte	.LASF228
 10798 12c0 01       		.byte	0x1
 10799 12c1 7B08     		.2byte	0x87b
 10800 12c3 8D000000 		.4byte	0x8d
 10801 12c7 02       		.uleb128 0x2
 10802 12c8 91       		.byte	0x91
 10803 12c9 74       		.sleb128 -12
 10804 12ca 00       		.byte	0
 10805 12cb 1F       		.uleb128 0x1f
 10806 12cc 35070000 		.4byte	.LASF229
 10807 12d0 01       		.byte	0x1
 10808 12d1 8B08     		.2byte	0x88b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 236


 10809 12d3 00000000 		.4byte	.LFB74
 10810 12d7 08040000 		.4byte	.LFE74-.LFB74
 10811 12db 01       		.uleb128 0x1
 10812 12dc 9C       		.byte	0x9c
 10813 12dd F7130000 		.4byte	0x13f7
 10814 12e1 1B       		.uleb128 0x1b
 10815 12e2 09000000 		.4byte	.LASF230
 10816 12e6 01       		.byte	0x1
 10817 12e7 8C08     		.2byte	0x88c
 10818 12e9 81000000 		.4byte	0x81
 10819 12ed 05       		.uleb128 0x5
 10820 12ee 03       		.byte	0x3
 10821 12ef 84010000 		.4byte	pos_cycle_status.10599
 10822 12f3 1B       		.uleb128 0x1b
 10823 12f4 B10B0000 		.4byte	.LASF231
 10824 12f8 01       		.byte	0x1
 10825 12f9 8D08     		.2byte	0x88d
 10826 12fb D20F0000 		.4byte	0xfd2
 10827 12ff 05       		.uleb128 0x5
 10828 1300 03       		.byte	0x3
 10829 1301 90010000 		.4byte	emg_cycle_status.10600
 10830 1305 1B       		.uleb128 0x1b
 10831 1306 F20D0000 		.4byte	.LASF232
 10832 130a 01       		.byte	0x1
 10833 130b 8E08     		.2byte	0x88e
 10834 130d 81000000 		.4byte	0x81
 10835 1311 05       		.uleb128 0x5
 10836 1312 03       		.byte	0x3
 10837 1313 92010000 		.4byte	rest_cycle_status.10601
 10838 1317 1B       		.uleb128 0x1b
 10839 1318 5F020000 		.4byte	.LASF233
 10840 131c 01       		.byte	0x1
 10841 131d 8F08     		.2byte	0x88f
 10842 131f BD000000 		.4byte	0xbd
 10843 1323 05       		.uleb128 0x5
 10844 1324 03       		.byte	0x3
 10845 1325 08000000 		.4byte	bin_threshold.10602
 10846 1329 1B       		.uleb128 0x1b
 10847 132a 91010000 		.4byte	.LASF234
 10848 132e 01       		.byte	0x1
 10849 132f 9008     		.2byte	0x890
 10850 1331 BD000000 		.4byte	0xbd
 10851 1335 05       		.uleb128 0x5
 10852 1336 03       		.byte	0x3
 10853 1337 88010000 		.4byte	thr_pos.10603
 10854 133b 1B       		.uleb128 0x1b
 10855 133c ED080000 		.4byte	.LASF235
 10856 1340 01       		.byte	0x1
 10857 1341 9008     		.2byte	0x890
 10858 1343 BD000000 		.4byte	0xbd
 10859 1347 05       		.uleb128 0x5
 10860 1348 03       		.byte	0x3
 10861 1349 8C010000 		.4byte	max_pos.10604
 10862 134d 1D       		.uleb128 0x1d
 10863 134e 6900     		.ascii	"i\000"
 10864 1350 01       		.byte	0x1
 10865 1351 9108     		.2byte	0x891
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 237


 10866 1353 81000000 		.4byte	0x81
 10867 1357 02       		.uleb128 0x2
 10868 1358 91       		.byte	0x91
 10869 1359 77       		.sleb128 -9
 10870 135a 1B       		.uleb128 0x1b
 10871 135b 9C040000 		.4byte	.LASF236
 10872 135f 01       		.byte	0x1
 10873 1360 9108     		.2byte	0x891
 10874 1362 81000000 		.4byte	0x81
 10875 1366 02       		.uleb128 0x2
 10876 1367 91       		.byte	0x91
 10877 1368 63       		.sleb128 -29
 10878 1369 1B       		.uleb128 0x1b
 10879 136a C7000000 		.4byte	.LASF237
 10880 136e 01       		.byte	0x1
 10881 136f 9108     		.2byte	0x891
 10882 1371 81000000 		.4byte	0x81
 10883 1375 02       		.uleb128 0x2
 10884 1376 91       		.byte	0x91
 10885 1377 62       		.sleb128 -30
 10886 1378 1B       		.uleb128 0x1b
 10887 1379 3F0B0000 		.4byte	.LASF238
 10888 137d 01       		.byte	0x1
 10889 137e 9108     		.2byte	0x891
 10890 1380 81000000 		.4byte	0x81
 10891 1384 02       		.uleb128 0x2
 10892 1385 91       		.byte	0x91
 10893 1386 61       		.sleb128 -31
 10894 1387 1B       		.uleb128 0x1b
 10895 1388 450B0000 		.4byte	.LASF239
 10896 138c 01       		.byte	0x1
 10897 138d 9108     		.2byte	0x891
 10898 138f 81000000 		.4byte	0x81
 10899 1393 02       		.uleb128 0x2
 10900 1394 91       		.byte	0x91
 10901 1395 60       		.sleb128 -32
 10902 1396 1B       		.uleb128 0x1b
 10903 1397 700B0000 		.4byte	.LASF240
 10904 139b 01       		.byte	0x1
 10905 139c 9208     		.2byte	0x892
 10906 139e BD000000 		.4byte	0xbd
 10907 13a2 02       		.uleb128 0x2
 10908 13a3 91       		.byte	0x91
 10909 13a4 6C       		.sleb128 -20
 10910 13a5 1B       		.uleb128 0x1b
 10911 13a6 F3030000 		.4byte	.LASF241
 10912 13aa 01       		.byte	0x1
 10913 13ab 9208     		.2byte	0x892
 10914 13ad BD000000 		.4byte	0xbd
 10915 13b1 02       		.uleb128 0x2
 10916 13b2 91       		.byte	0x91
 10917 13b3 68       		.sleb128 -24
 10918 13b4 1B       		.uleb128 0x1b
 10919 13b5 900C0000 		.4byte	.LASF242
 10920 13b9 01       		.byte	0x1
 10921 13ba 9208     		.2byte	0x892
 10922 13bc BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 238


 10923 13c0 02       		.uleb128 0x2
 10924 13c1 91       		.byte	0x91
 10925 13c2 70       		.sleb128 -16
 10926 13c3 1B       		.uleb128 0x1b
 10927 13c4 8E030000 		.4byte	.LASF243
 10928 13c8 01       		.byte	0x1
 10929 13c9 9308     		.2byte	0x893
 10930 13cb BD000000 		.4byte	0xbd
 10931 13cf 02       		.uleb128 0x2
 10932 13d0 91       		.byte	0x91
 10933 13d1 64       		.sleb128 -28
 10934 13d2 1B       		.uleb128 0x1b
 10935 13d3 C8050000 		.4byte	.LASF244
 10936 13d7 01       		.byte	0x1
 10937 13d8 9408     		.2byte	0x894
 10938 13da 99000000 		.4byte	0x99
 10939 13de 05       		.uleb128 0x5
 10940 13df 03       		.byte	0x3
 10941 13e0 94010000 		.4byte	timer_value_s.10614
 10942 13e4 1B       		.uleb128 0x1b
 10943 13e5 6C050000 		.4byte	.LASF245
 10944 13e9 01       		.byte	0x1
 10945 13ea 9408     		.2byte	0x894
 10946 13ec 99000000 		.4byte	0x99
 10947 13f0 05       		.uleb128 0x5
 10948 13f1 03       		.byte	0x3
 10949 13f2 98010000 		.4byte	timer_value_e.10615
 10950 13f6 00       		.byte	0
 10951 13f7 1F       		.uleb128 0x1f
 10952 13f8 7A090000 		.4byte	.LASF246
 10953 13fc 01       		.byte	0x1
 10954 13fd 0009     		.2byte	0x900
 10955 13ff 00000000 		.4byte	.LFB75
 10956 1403 08010000 		.4byte	.LFE75-.LFB75
 10957 1407 01       		.uleb128 0x1
 10958 1408 9C       		.byte	0x9c
 10959 1409 7D140000 		.4byte	0x147d
 10960 140d 1B       		.uleb128 0x1b
 10961 140e CA0D0000 		.4byte	.LASF247
 10962 1412 01       		.byte	0x1
 10963 1413 0209     		.2byte	0x902
 10964 1415 EA000000 		.4byte	0xea
 10965 1419 02       		.uleb128 0x2
 10966 141a 91       		.byte	0x91
 10967 141b 64       		.sleb128 -28
 10968 141c 1B       		.uleb128 0x1b
 10969 141d 510B0000 		.4byte	.LASF248
 10970 1421 01       		.byte	0x1
 10971 1422 0309     		.2byte	0x903
 10972 1424 81000000 		.4byte	0x81
 10973 1428 05       		.uleb128 0x5
 10974 1429 03       		.byte	0x3
 10975 142a A0010000 		.4byte	row_number.10637
 10976 142e 1B       		.uleb128 0x1b
 10977 142f C6030000 		.4byte	.LASF249
 10978 1433 01       		.byte	0x1
 10979 1434 0409     		.2byte	0x904
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 239


 10980 1436 81000000 		.4byte	0x81
 10981 143a 02       		.uleb128 0x2
 10982 143b 91       		.byte	0x91
 10983 143c 77       		.sleb128 -9
 10984 143d 1B       		.uleb128 0x1b
 10985 143e 010C0000 		.4byte	.LASF250
 10986 1442 01       		.byte	0x1
 10987 1443 0509     		.2byte	0x905
 10988 1445 7D140000 		.4byte	0x147d
 10989 1449 02       		.uleb128 0x2
 10990 144a 91       		.byte	0x91
 10991 144b 70       		.sleb128 -16
 10992 144c 1B       		.uleb128 0x1b
 10993 144d CF000000 		.4byte	.LASF251
 10994 1451 01       		.byte	0x1
 10995 1452 0609     		.2byte	0x906
 10996 1454 7D140000 		.4byte	0x147d
 10997 1458 02       		.uleb128 0x2
 10998 1459 91       		.byte	0x91
 10999 145a 6C       		.sleb128 -20
 11000 145b 1B       		.uleb128 0x1b
 11001 145c C10E0000 		.4byte	.LASF252
 11002 1460 01       		.byte	0x1
 11003 1461 0709     		.2byte	0x907
 11004 1463 81000000 		.4byte	0x81
 11005 1467 02       		.uleb128 0x2
 11006 1468 91       		.byte	0x91
 11007 1469 6B       		.sleb128 -21
 11008 146a 1B       		.uleb128 0x1b
 11009 146b D3080000 		.4byte	.LASF253
 11010 146f 01       		.byte	0x1
 11011 1470 0809     		.2byte	0x908
 11012 1472 7D140000 		.4byte	0x147d
 11013 1476 05       		.uleb128 0x5
 11014 1477 03       		.byte	0x3
 11015 1478 9C010000 		.4byte	m_addr.10642
 11016 147c 00       		.byte	0
 11017 147d 0C       		.uleb128 0xc
 11018 147e 04       		.byte	0x4
 11019 147f 81000000 		.4byte	0x81
 11020 1483 07       		.uleb128 0x7
 11021 1484 93140000 		.4byte	0x1493
 11022 1488 93140000 		.4byte	0x1493
 11023 148c 08       		.uleb128 0x8
 11024 148d 0E010000 		.4byte	0x10e
 11025 1491 1C       		.byte	0x1c
 11026 1492 00       		.byte	0
 11027 1493 24       		.uleb128 0x24
 11028 1494 81000000 		.4byte	0x81
 11029 1498 19       		.uleb128 0x19
 11030 1499 0C0C0000 		.4byte	.LASF254
 11031 149d 01       		.byte	0x1
 11032 149e 40       		.byte	0x40
 11033 149f A9140000 		.4byte	0x14a9
 11034 14a3 05       		.uleb128 0x5
 11035 14a4 03       		.byte	0x3
 11036 14a5 00000000 		.4byte	pwm_preload_values
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 240


 11037 14a9 24       		.uleb128 0x24
 11038 14aa 83140000 		.4byte	0x1483
 11039 14ae 25       		.uleb128 0x25
 11040 14af 0C0D0000 		.4byte	.LASF255
 11041 14b3 08       		.byte	0x8
 11042 14b4 1207     		.2byte	0x712
 11043 14b6 BA140000 		.4byte	0x14ba
 11044 14ba 06       		.uleb128 0x6
 11045 14bb 76000000 		.4byte	0x76
 11046 14bf 07       		.uleb128 0x7
 11047 14c0 9F010000 		.4byte	0x19f
 11048 14c4 CF140000 		.4byte	0x14cf
 11049 14c8 08       		.uleb128 0x8
 11050 14c9 0E010000 		.4byte	0x10e
 11051 14cd 01       		.byte	0x1
 11052 14ce 00       		.byte	0
 11053 14cf 25       		.uleb128 0x25
 11054 14d0 08060000 		.4byte	.LASF256
 11055 14d4 07       		.byte	0x7
 11056 14d5 D501     		.2byte	0x1d5
 11057 14d7 BF140000 		.4byte	0x14bf
 11058 14db 25       		.uleb128 0x25
 11059 14dc EA030000 		.4byte	.LASF257
 11060 14e0 07       		.byte	0x7
 11061 14e1 D501     		.2byte	0x1d5
 11062 14e3 BF140000 		.4byte	0x14bf
 11063 14e7 25       		.uleb128 0x25
 11064 14e8 160A0000 		.4byte	.LASF258
 11065 14ec 07       		.byte	0x7
 11066 14ed D501     		.2byte	0x1d5
 11067 14ef BF140000 		.4byte	0x14bf
 11068 14f3 07       		.uleb128 0x7
 11069 14f4 DC010000 		.4byte	0x1dc
 11070 14f8 03150000 		.4byte	0x1503
 11071 14fc 08       		.uleb128 0x8
 11072 14fd 0E010000 		.4byte	0x10e
 11073 1501 01       		.byte	0x1
 11074 1502 00       		.byte	0
 11075 1503 25       		.uleb128 0x25
 11076 1504 C1050000 		.4byte	.LASF259
 11077 1508 07       		.byte	0x7
 11078 1509 D601     		.2byte	0x1d6
 11079 150b F3140000 		.4byte	0x14f3
 11080 150f 25       		.uleb128 0x25
 11081 1510 B70E0000 		.4byte	.LASF260
 11082 1514 07       		.byte	0x7
 11083 1515 D601     		.2byte	0x1d6
 11084 1517 F3140000 		.4byte	0x14f3
 11085 151b 25       		.uleb128 0x25
 11086 151c 78000000 		.4byte	.LASF261
 11087 1520 07       		.byte	0x7
 11088 1521 D701     		.2byte	0x1d7
 11089 1523 5D020000 		.4byte	0x25d
 11090 1527 25       		.uleb128 0x25
 11091 1528 2B0F0000 		.4byte	.LASF262
 11092 152c 07       		.byte	0x7
 11093 152d D701     		.2byte	0x1d7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 241


 11094 152f 5D020000 		.4byte	0x25d
 11095 1533 25       		.uleb128 0x25
 11096 1534 5A000000 		.4byte	.LASF263
 11097 1538 07       		.byte	0x7
 11098 1539 D801     		.2byte	0x1d8
 11099 153b A2020000 		.4byte	0x2a2
 11100 153f 25       		.uleb128 0x25
 11101 1540 4D0C0000 		.4byte	.LASF264
 11102 1544 07       		.byte	0x7
 11103 1545 D901     		.2byte	0x1d9
 11104 1547 34080000 		.4byte	0x834
 11105 154b 25       		.uleb128 0x25
 11106 154c DA080000 		.4byte	.LASF265
 11107 1550 07       		.byte	0x7
 11108 1551 D901     		.2byte	0x1d9
 11109 1553 34080000 		.4byte	0x834
 11110 1557 25       		.uleb128 0x25
 11111 1558 00080000 		.4byte	.LASF266
 11112 155c 07       		.byte	0x7
 11113 155d DA01     		.2byte	0x1da
 11114 155f D8090000 		.4byte	0x9d8
 11115 1563 07       		.uleb128 0x7
 11116 1564 B0090000 		.4byte	0x9b0
 11117 1568 73150000 		.4byte	0x1573
 11118 156c 08       		.uleb128 0x8
 11119 156d 0E010000 		.4byte	0x10e
 11120 1571 01       		.byte	0x1
 11121 1572 00       		.byte	0
 11122 1573 25       		.uleb128 0x25
 11123 1574 020A0000 		.4byte	.LASF267
 11124 1578 07       		.byte	0x7
 11125 1579 DB01     		.2byte	0x1db
 11126 157b 63150000 		.4byte	0x1563
 11127 157f 25       		.uleb128 0x25
 11128 1580 50080000 		.4byte	.LASF268
 11129 1584 07       		.byte	0x7
 11130 1585 DB01     		.2byte	0x1db
 11131 1587 63150000 		.4byte	0x1563
 11132 158b 25       		.uleb128 0x25
 11133 158c E8090000 		.4byte	.LASF269
 11134 1590 07       		.byte	0x7
 11135 1591 DB01     		.2byte	0x1db
 11136 1593 63150000 		.4byte	0x1563
 11137 1597 07       		.uleb128 0x7
 11138 1598 B0090000 		.4byte	0x9b0
 11139 159c A7150000 		.4byte	0x15a7
 11140 15a0 08       		.uleb128 0x8
 11141 15a1 0E010000 		.4byte	0x10e
 11142 15a5 02       		.byte	0x2
 11143 15a6 00       		.byte	0
 11144 15a7 25       		.uleb128 0x25
 11145 15a8 65040000 		.4byte	.LASF270
 11146 15ac 07       		.byte	0x7
 11147 15ad DC01     		.2byte	0x1dc
 11148 15af 97150000 		.4byte	0x1597
 11149 15b3 07       		.uleb128 0x7
 11150 15b4 B0090000 		.4byte	0x9b0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 242


 11151 15b8 C3150000 		.4byte	0x15c3
 11152 15bc 08       		.uleb128 0x8
 11153 15bd 0E010000 		.4byte	0x10e
 11154 15c1 07       		.byte	0x7
 11155 15c2 00       		.byte	0
 11156 15c3 25       		.uleb128 0x25
 11157 15c4 5B010000 		.4byte	.LASF271
 11158 15c8 07       		.byte	0x7
 11159 15c9 DD01     		.2byte	0x1dd
 11160 15cb B3150000 		.4byte	0x15b3
 11161 15cf 25       		.uleb128 0x25
 11162 15d0 24020000 		.4byte	.LASF272
 11163 15d4 07       		.byte	0x7
 11164 15d5 DF01     		.2byte	0x1df
 11165 15d7 8D000000 		.4byte	0x8d
 11166 15db 25       		.uleb128 0x25
 11167 15dc E0070000 		.4byte	.LASF273
 11168 15e0 07       		.byte	0x7
 11169 15e1 E001     		.2byte	0x1e0
 11170 15e3 8D000000 		.4byte	0x8d
 11171 15e7 25       		.uleb128 0x25
 11172 15e8 920A0000 		.4byte	.LASF274
 11173 15ec 07       		.byte	0x7
 11174 15ed E101     		.2byte	0x1e1
 11175 15ef D5000000 		.4byte	0xd5
 11176 15f3 25       		.uleb128 0x25
 11177 15f4 130B0000 		.4byte	.LASF275
 11178 15f8 07       		.byte	0x7
 11179 15f9 E301     		.2byte	0x1e3
 11180 15fb 82020000 		.4byte	0x282
 11181 15ff 25       		.uleb128 0x25
 11182 1600 BC0D0000 		.4byte	.LASF276
 11183 1604 07       		.byte	0x7
 11184 1605 E401     		.2byte	0x1e4
 11185 1607 D20F0000 		.4byte	0xfd2
 11186 160b 25       		.uleb128 0x25
 11187 160c BE0C0000 		.4byte	.LASF277
 11188 1610 07       		.byte	0x7
 11189 1611 E501     		.2byte	0x1e5
 11190 1613 D20F0000 		.4byte	0xfd2
 11191 1617 25       		.uleb128 0x25
 11192 1618 1A050000 		.4byte	.LASF278
 11193 161c 07       		.byte	0x7
 11194 161d E601     		.2byte	0x1e6
 11195 161f 82020000 		.4byte	0x282
 11196 1623 25       		.uleb128 0x25
 11197 1624 190D0000 		.4byte	.LASF279
 11198 1628 07       		.byte	0x7
 11199 1629 E701     		.2byte	0x1e7
 11200 162b 82020000 		.4byte	0x282
 11201 162f 25       		.uleb128 0x25
 11202 1630 9F050000 		.4byte	.LASF280
 11203 1634 07       		.byte	0x7
 11204 1635 E901     		.2byte	0x1e9
 11205 1637 840A0000 		.4byte	0xa84
 11206 163b 25       		.uleb128 0x25
 11207 163c 14040000 		.4byte	.LASF281
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 243


 11208 1640 07       		.byte	0x7
 11209 1641 EA01     		.2byte	0x1ea
 11210 1643 4C0A0000 		.4byte	0xa4c
 11211 1647 25       		.uleb128 0x25
 11212 1648 6A030000 		.4byte	.LASF282
 11213 164c 07       		.byte	0x7
 11214 164d EB01     		.2byte	0x1eb
 11215 164f 4C0A0000 		.4byte	0xa4c
 11216 1653 25       		.uleb128 0x25
 11217 1654 E4060000 		.4byte	.LASF283
 11218 1658 07       		.byte	0x7
 11219 1659 EE01     		.2byte	0x1ee
 11220 165b 81000000 		.4byte	0x81
 11221 165f 25       		.uleb128 0x25
 11222 1660 9D000000 		.4byte	.LASF284
 11223 1664 07       		.byte	0x7
 11224 1665 EF01     		.2byte	0x1ef
 11225 1667 81000000 		.4byte	0x81
 11226 166b 25       		.uleb128 0x25
 11227 166c 7F030000 		.4byte	.LASF285
 11228 1670 07       		.byte	0x7
 11229 1671 F001     		.2byte	0x1f0
 11230 1673 81000000 		.4byte	0x81
 11231 1677 25       		.uleb128 0x25
 11232 1678 B1000000 		.4byte	.LASF286
 11233 167c 07       		.byte	0x7
 11234 167d F101     		.2byte	0x1f1
 11235 167f 81000000 		.4byte	0x81
 11236 1683 25       		.uleb128 0x25
 11237 1684 EB0E0000 		.4byte	.LASF287
 11238 1688 07       		.byte	0x7
 11239 1689 F301     		.2byte	0x1f3
 11240 168b 81000000 		.4byte	0x81
 11241 168f 25       		.uleb128 0x25
 11242 1690 090A0000 		.4byte	.LASF288
 11243 1694 07       		.byte	0x7
 11244 1695 F401     		.2byte	0x1f4
 11245 1697 81000000 		.4byte	0x81
 11246 169b 25       		.uleb128 0x25
 11247 169c D0030000 		.4byte	.LASF289
 11248 16a0 07       		.byte	0x7
 11249 16a1 F501     		.2byte	0x1f5
 11250 16a3 81000000 		.4byte	0x81
 11251 16a7 25       		.uleb128 0x25
 11252 16a8 CE060000 		.4byte	.LASF290
 11253 16ac 07       		.byte	0x7
 11254 16ad F601     		.2byte	0x1f6
 11255 16af 81000000 		.4byte	0x81
 11256 16b3 25       		.uleb128 0x25
 11257 16b4 35080000 		.4byte	.LASF291
 11258 16b8 07       		.byte	0x7
 11259 16b9 F701     		.2byte	0x1f7
 11260 16bb 81000000 		.4byte	0x81
 11261 16bf 07       		.uleb128 0x7
 11262 16c0 B1000000 		.4byte	0xb1
 11263 16c4 CF160000 		.4byte	0x16cf
 11264 16c8 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 244


 11265 16c9 0E010000 		.4byte	0x10e
 11266 16cd 0B       		.byte	0xb
 11267 16ce 00       		.byte	0
 11268 16cf 25       		.uleb128 0x25
 11269 16d0 77030000 		.4byte	.LASF292
 11270 16d4 07       		.byte	0x7
 11271 16d5 FB01     		.2byte	0x1fb
 11272 16d7 BF160000 		.4byte	0x16bf
 11273 16db 25       		.uleb128 0x25
 11274 16dc 8D0E0000 		.4byte	.LASF293
 11275 16e0 07       		.byte	0x7
 11276 16e1 FC01     		.2byte	0x1fc
 11277 16e3 81000000 		.4byte	0x81
 11278 16e7 25       		.uleb128 0x25
 11279 16e8 46040000 		.4byte	.LASF294
 11280 16ec 07       		.byte	0x7
 11281 16ed FF01     		.2byte	0x1ff
 11282 16ef A5000000 		.4byte	0xa5
 11283 16f3 07       		.uleb128 0x7
 11284 16f4 99000000 		.4byte	0x99
 11285 16f8 03170000 		.4byte	0x1703
 11286 16fc 08       		.uleb128 0x8
 11287 16fd 0E010000 		.4byte	0x10e
 11288 1701 04       		.byte	0x4
 11289 1702 00       		.byte	0
 11290 1703 25       		.uleb128 0x25
 11291 1704 F7050000 		.4byte	.LASF295
 11292 1708 07       		.byte	0x7
 11293 1709 0202     		.2byte	0x202
 11294 170b F3160000 		.4byte	0x16f3
 11295 170f 25       		.uleb128 0x25
 11296 1710 8F0B0000 		.4byte	.LASF296
 11297 1714 07       		.byte	0x7
 11298 1715 0302     		.2byte	0x203
 11299 1717 D20F0000 		.4byte	0xfd2
 11300 171b 07       		.uleb128 0x7
 11301 171c 8D000000 		.4byte	0x8d
 11302 1720 31170000 		.4byte	0x1731
 11303 1724 08       		.uleb128 0x8
 11304 1725 0E010000 		.4byte	0x10e
 11305 1729 01       		.byte	0x1
 11306 172a 08       		.uleb128 0x8
 11307 172b 0E010000 		.4byte	0x10e
 11308 172f 04       		.byte	0x4
 11309 1730 00       		.byte	0
 11310 1731 25       		.uleb128 0x25
 11311 1732 DC0D0000 		.4byte	.LASF297
 11312 1736 07       		.byte	0x7
 11313 1737 0402     		.2byte	0x204
 11314 1739 1B170000 		.4byte	0x171b
 11315 173d 07       		.uleb128 0x7
 11316 173e 81000000 		.4byte	0x81
 11317 1742 53170000 		.4byte	0x1753
 11318 1746 08       		.uleb128 0x8
 11319 1747 0E010000 		.4byte	0x10e
 11320 174b 01       		.byte	0x1
 11321 174c 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 245


 11322 174d 0E010000 		.4byte	0x10e
 11323 1751 04       		.byte	0x4
 11324 1752 00       		.byte	0
 11325 1753 25       		.uleb128 0x25
 11326 1754 D6050000 		.4byte	.LASF298
 11327 1758 07       		.byte	0x7
 11328 1759 0502     		.2byte	0x205
 11329 175b 3D170000 		.4byte	0x173d
 11330 175f 25       		.uleb128 0x25
 11331 1760 F5080000 		.4byte	.LASF299
 11332 1764 07       		.byte	0x7
 11333 1765 0802     		.2byte	0x208
 11334 1767 BD000000 		.4byte	0xbd
 11335 176b 25       		.uleb128 0x25
 11336 176c FD040000 		.4byte	.LASF300
 11337 1770 07       		.byte	0x7
 11338 1771 0B02     		.2byte	0x20b
 11339 1773 99010000 		.4byte	0x199
 11340 1777 07       		.uleb128 0x7
 11341 1778 34090000 		.4byte	0x934
 11342 177c 87170000 		.4byte	0x1787
 11343 1780 08       		.uleb128 0x8
 11344 1781 0E010000 		.4byte	0x10e
 11345 1785 04       		.byte	0x4
 11346 1786 00       		.byte	0
 11347 1787 25       		.uleb128 0x25
 11348 1788 3B060000 		.4byte	.LASF301
 11349 178c 07       		.byte	0x7
 11350 178d 1402     		.2byte	0x214
 11351 178f 77170000 		.4byte	0x1777
 11352 1793 25       		.uleb128 0x25
 11353 1794 4C050000 		.4byte	.LASF302
 11354 1798 07       		.byte	0x7
 11355 1799 1402     		.2byte	0x214
 11356 179b 77170000 		.4byte	0x1777
 11357 179f 00       		.byte	0
 11358              		.section	.debug_abbrev,"",%progbits
 11359              	.Ldebug_abbrev0:
 11360 0000 01       		.uleb128 0x1
 11361 0001 11       		.uleb128 0x11
 11362 0002 01       		.byte	0x1
 11363 0003 25       		.uleb128 0x25
 11364 0004 0E       		.uleb128 0xe
 11365 0005 13       		.uleb128 0x13
 11366 0006 0B       		.uleb128 0xb
 11367 0007 03       		.uleb128 0x3
 11368 0008 0E       		.uleb128 0xe
 11369 0009 1B       		.uleb128 0x1b
 11370 000a 0E       		.uleb128 0xe
 11371 000b 55       		.uleb128 0x55
 11372 000c 17       		.uleb128 0x17
 11373 000d 11       		.uleb128 0x11
 11374 000e 01       		.uleb128 0x1
 11375 000f 10       		.uleb128 0x10
 11376 0010 17       		.uleb128 0x17
 11377 0011 00       		.byte	0
 11378 0012 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 246


 11379 0013 02       		.uleb128 0x2
 11380 0014 24       		.uleb128 0x24
 11381 0015 00       		.byte	0
 11382 0016 0B       		.uleb128 0xb
 11383 0017 0B       		.uleb128 0xb
 11384 0018 3E       		.uleb128 0x3e
 11385 0019 0B       		.uleb128 0xb
 11386 001a 03       		.uleb128 0x3
 11387 001b 0E       		.uleb128 0xe
 11388 001c 00       		.byte	0
 11389 001d 00       		.byte	0
 11390 001e 03       		.uleb128 0x3
 11391 001f 16       		.uleb128 0x16
 11392 0020 00       		.byte	0
 11393 0021 03       		.uleb128 0x3
 11394 0022 0E       		.uleb128 0xe
 11395 0023 3A       		.uleb128 0x3a
 11396 0024 0B       		.uleb128 0xb
 11397 0025 3B       		.uleb128 0x3b
 11398 0026 0B       		.uleb128 0xb
 11399 0027 49       		.uleb128 0x49
 11400 0028 13       		.uleb128 0x13
 11401 0029 00       		.byte	0
 11402 002a 00       		.byte	0
 11403 002b 04       		.uleb128 0x4
 11404 002c 24       		.uleb128 0x24
 11405 002d 00       		.byte	0
 11406 002e 0B       		.uleb128 0xb
 11407 002f 0B       		.uleb128 0xb
 11408 0030 3E       		.uleb128 0x3e
 11409 0031 0B       		.uleb128 0xb
 11410 0032 03       		.uleb128 0x3
 11411 0033 08       		.uleb128 0x8
 11412 0034 00       		.byte	0
 11413 0035 00       		.byte	0
 11414 0036 05       		.uleb128 0x5
 11415 0037 16       		.uleb128 0x16
 11416 0038 00       		.byte	0
 11417 0039 03       		.uleb128 0x3
 11418 003a 0E       		.uleb128 0xe
 11419 003b 3A       		.uleb128 0x3a
 11420 003c 0B       		.uleb128 0xb
 11421 003d 3B       		.uleb128 0x3b
 11422 003e 05       		.uleb128 0x5
 11423 003f 49       		.uleb128 0x49
 11424 0040 13       		.uleb128 0x13
 11425 0041 00       		.byte	0
 11426 0042 00       		.byte	0
 11427 0043 06       		.uleb128 0x6
 11428 0044 35       		.uleb128 0x35
 11429 0045 00       		.byte	0
 11430 0046 49       		.uleb128 0x49
 11431 0047 13       		.uleb128 0x13
 11432 0048 00       		.byte	0
 11433 0049 00       		.byte	0
 11434 004a 07       		.uleb128 0x7
 11435 004b 01       		.uleb128 0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 247


 11436 004c 01       		.byte	0x1
 11437 004d 49       		.uleb128 0x49
 11438 004e 13       		.uleb128 0x13
 11439 004f 01       		.uleb128 0x1
 11440 0050 13       		.uleb128 0x13
 11441 0051 00       		.byte	0
 11442 0052 00       		.byte	0
 11443 0053 08       		.uleb128 0x8
 11444 0054 21       		.uleb128 0x21
 11445 0055 00       		.byte	0
 11446 0056 49       		.uleb128 0x49
 11447 0057 13       		.uleb128 0x13
 11448 0058 2F       		.uleb128 0x2f
 11449 0059 0B       		.uleb128 0xb
 11450 005a 00       		.byte	0
 11451 005b 00       		.byte	0
 11452 005c 09       		.uleb128 0x9
 11453 005d 04       		.uleb128 0x4
 11454 005e 01       		.byte	0x1
 11455 005f 03       		.uleb128 0x3
 11456 0060 0E       		.uleb128 0xe
 11457 0061 0B       		.uleb128 0xb
 11458 0062 0B       		.uleb128 0xb
 11459 0063 49       		.uleb128 0x49
 11460 0064 13       		.uleb128 0x13
 11461 0065 3A       		.uleb128 0x3a
 11462 0066 0B       		.uleb128 0xb
 11463 0067 3B       		.uleb128 0x3b
 11464 0068 0B       		.uleb128 0xb
 11465 0069 01       		.uleb128 0x1
 11466 006a 13       		.uleb128 0x13
 11467 006b 00       		.byte	0
 11468 006c 00       		.byte	0
 11469 006d 0A       		.uleb128 0xa
 11470 006e 28       		.uleb128 0x28
 11471 006f 00       		.byte	0
 11472 0070 03       		.uleb128 0x3
 11473 0071 0E       		.uleb128 0xe
 11474 0072 1C       		.uleb128 0x1c
 11475 0073 0B       		.uleb128 0xb
 11476 0074 00       		.byte	0
 11477 0075 00       		.byte	0
 11478 0076 0B       		.uleb128 0xb
 11479 0077 13       		.uleb128 0x13
 11480 0078 00       		.byte	0
 11481 0079 03       		.uleb128 0x3
 11482 007a 0E       		.uleb128 0xe
 11483 007b 3C       		.uleb128 0x3c
 11484 007c 19       		.uleb128 0x19
 11485 007d 00       		.byte	0
 11486 007e 00       		.byte	0
 11487 007f 0C       		.uleb128 0xc
 11488 0080 0F       		.uleb128 0xf
 11489 0081 00       		.byte	0
 11490 0082 0B       		.uleb128 0xb
 11491 0083 0B       		.uleb128 0xb
 11492 0084 49       		.uleb128 0x49
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 248


 11493 0085 13       		.uleb128 0x13
 11494 0086 00       		.byte	0
 11495 0087 00       		.byte	0
 11496 0088 0D       		.uleb128 0xd
 11497 0089 13       		.uleb128 0x13
 11498 008a 01       		.byte	0x1
 11499 008b 03       		.uleb128 0x3
 11500 008c 0E       		.uleb128 0xe
 11501 008d 0B       		.uleb128 0xb
 11502 008e 0B       		.uleb128 0xb
 11503 008f 3A       		.uleb128 0x3a
 11504 0090 0B       		.uleb128 0xb
 11505 0091 3B       		.uleb128 0x3b
 11506 0092 0B       		.uleb128 0xb
 11507 0093 01       		.uleb128 0x1
 11508 0094 13       		.uleb128 0x13
 11509 0095 00       		.byte	0
 11510 0096 00       		.byte	0
 11511 0097 0E       		.uleb128 0xe
 11512 0098 0D       		.uleb128 0xd
 11513 0099 00       		.byte	0
 11514 009a 03       		.uleb128 0x3
 11515 009b 08       		.uleb128 0x8
 11516 009c 3A       		.uleb128 0x3a
 11517 009d 0B       		.uleb128 0xb
 11518 009e 3B       		.uleb128 0x3b
 11519 009f 0B       		.uleb128 0xb
 11520 00a0 49       		.uleb128 0x49
 11521 00a1 13       		.uleb128 0x13
 11522 00a2 38       		.uleb128 0x38
 11523 00a3 0B       		.uleb128 0xb
 11524 00a4 00       		.byte	0
 11525 00a5 00       		.byte	0
 11526 00a6 0F       		.uleb128 0xf
 11527 00a7 0D       		.uleb128 0xd
 11528 00a8 00       		.byte	0
 11529 00a9 03       		.uleb128 0x3
 11530 00aa 0E       		.uleb128 0xe
 11531 00ab 3A       		.uleb128 0x3a
 11532 00ac 0B       		.uleb128 0xb
 11533 00ad 3B       		.uleb128 0x3b
 11534 00ae 0B       		.uleb128 0xb
 11535 00af 49       		.uleb128 0x49
 11536 00b0 13       		.uleb128 0x13
 11537 00b1 38       		.uleb128 0x38
 11538 00b2 0B       		.uleb128 0xb
 11539 00b3 00       		.byte	0
 11540 00b4 00       		.byte	0
 11541 00b5 10       		.uleb128 0x10
 11542 00b6 0D       		.uleb128 0xd
 11543 00b7 00       		.byte	0
 11544 00b8 03       		.uleb128 0x3
 11545 00b9 0E       		.uleb128 0xe
 11546 00ba 3A       		.uleb128 0x3a
 11547 00bb 0B       		.uleb128 0xb
 11548 00bc 3B       		.uleb128 0x3b
 11549 00bd 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 249


 11550 00be 49       		.uleb128 0x49
 11551 00bf 13       		.uleb128 0x13
 11552 00c0 38       		.uleb128 0x38
 11553 00c1 0B       		.uleb128 0xb
 11554 00c2 00       		.byte	0
 11555 00c3 00       		.byte	0
 11556 00c4 11       		.uleb128 0x11
 11557 00c5 13       		.uleb128 0x13
 11558 00c6 01       		.byte	0x1
 11559 00c7 03       		.uleb128 0x3
 11560 00c8 0E       		.uleb128 0xe
 11561 00c9 0B       		.uleb128 0xb
 11562 00ca 0B       		.uleb128 0xb
 11563 00cb 3A       		.uleb128 0x3a
 11564 00cc 0B       		.uleb128 0xb
 11565 00cd 3B       		.uleb128 0x3b
 11566 00ce 05       		.uleb128 0x5
 11567 00cf 01       		.uleb128 0x1
 11568 00d0 13       		.uleb128 0x13
 11569 00d1 00       		.byte	0
 11570 00d2 00       		.byte	0
 11571 00d3 12       		.uleb128 0x12
 11572 00d4 0D       		.uleb128 0xd
 11573 00d5 00       		.byte	0
 11574 00d6 03       		.uleb128 0x3
 11575 00d7 08       		.uleb128 0x8
 11576 00d8 3A       		.uleb128 0x3a
 11577 00d9 0B       		.uleb128 0xb
 11578 00da 3B       		.uleb128 0x3b
 11579 00db 05       		.uleb128 0x5
 11580 00dc 49       		.uleb128 0x49
 11581 00dd 13       		.uleb128 0x13
 11582 00de 38       		.uleb128 0x38
 11583 00df 0B       		.uleb128 0xb
 11584 00e0 00       		.byte	0
 11585 00e1 00       		.byte	0
 11586 00e2 13       		.uleb128 0x13
 11587 00e3 13       		.uleb128 0x13
 11588 00e4 01       		.byte	0x1
 11589 00e5 03       		.uleb128 0x3
 11590 00e6 0E       		.uleb128 0xe
 11591 00e7 0B       		.uleb128 0xb
 11592 00e8 05       		.uleb128 0x5
 11593 00e9 3A       		.uleb128 0x3a
 11594 00ea 0B       		.uleb128 0xb
 11595 00eb 3B       		.uleb128 0x3b
 11596 00ec 05       		.uleb128 0x5
 11597 00ed 01       		.uleb128 0x1
 11598 00ee 13       		.uleb128 0x13
 11599 00ef 00       		.byte	0
 11600 00f0 00       		.byte	0
 11601 00f1 14       		.uleb128 0x14
 11602 00f2 0D       		.uleb128 0xd
 11603 00f3 00       		.byte	0
 11604 00f4 03       		.uleb128 0x3
 11605 00f5 08       		.uleb128 0x8
 11606 00f6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 250


 11607 00f7 0B       		.uleb128 0xb
 11608 00f8 3B       		.uleb128 0x3b
 11609 00f9 05       		.uleb128 0x5
 11610 00fa 49       		.uleb128 0x49
 11611 00fb 13       		.uleb128 0x13
 11612 00fc 38       		.uleb128 0x38
 11613 00fd 05       		.uleb128 0x5
 11614 00fe 00       		.byte	0
 11615 00ff 00       		.byte	0
 11616 0100 15       		.uleb128 0x15
 11617 0101 0D       		.uleb128 0xd
 11618 0102 00       		.byte	0
 11619 0103 03       		.uleb128 0x3
 11620 0104 0E       		.uleb128 0xe
 11621 0105 3A       		.uleb128 0x3a
 11622 0106 0B       		.uleb128 0xb
 11623 0107 3B       		.uleb128 0x3b
 11624 0108 05       		.uleb128 0x5
 11625 0109 49       		.uleb128 0x49
 11626 010a 13       		.uleb128 0x13
 11627 010b 38       		.uleb128 0x38
 11628 010c 05       		.uleb128 0x5
 11629 010d 00       		.byte	0
 11630 010e 00       		.byte	0
 11631 010f 16       		.uleb128 0x16
 11632 0110 04       		.uleb128 0x4
 11633 0111 01       		.byte	0x1
 11634 0112 0B       		.uleb128 0xb
 11635 0113 0B       		.uleb128 0xb
 11636 0114 49       		.uleb128 0x49
 11637 0115 13       		.uleb128 0x13
 11638 0116 3A       		.uleb128 0x3a
 11639 0117 0B       		.uleb128 0xb
 11640 0118 3B       		.uleb128 0x3b
 11641 0119 05       		.uleb128 0x5
 11642 011a 01       		.uleb128 0x1
 11643 011b 13       		.uleb128 0x13
 11644 011c 00       		.byte	0
 11645 011d 00       		.byte	0
 11646 011e 17       		.uleb128 0x17
 11647 011f 2E       		.uleb128 0x2e
 11648 0120 00       		.byte	0
 11649 0121 3F       		.uleb128 0x3f
 11650 0122 19       		.uleb128 0x19
 11651 0123 03       		.uleb128 0x3
 11652 0124 0E       		.uleb128 0xe
 11653 0125 3A       		.uleb128 0x3a
 11654 0126 0B       		.uleb128 0xb
 11655 0127 3B       		.uleb128 0x3b
 11656 0128 0B       		.uleb128 0xb
 11657 0129 27       		.uleb128 0x27
 11658 012a 19       		.uleb128 0x19
 11659 012b 11       		.uleb128 0x11
 11660 012c 01       		.uleb128 0x1
 11661 012d 12       		.uleb128 0x12
 11662 012e 06       		.uleb128 0x6
 11663 012f 40       		.uleb128 0x40
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 251


 11664 0130 18       		.uleb128 0x18
 11665 0131 9742     		.uleb128 0x2117
 11666 0133 19       		.uleb128 0x19
 11667 0134 00       		.byte	0
 11668 0135 00       		.byte	0
 11669 0136 18       		.uleb128 0x18
 11670 0137 2E       		.uleb128 0x2e
 11671 0138 01       		.byte	0x1
 11672 0139 3F       		.uleb128 0x3f
 11673 013a 19       		.uleb128 0x19
 11674 013b 03       		.uleb128 0x3
 11675 013c 0E       		.uleb128 0xe
 11676 013d 3A       		.uleb128 0x3a
 11677 013e 0B       		.uleb128 0xb
 11678 013f 3B       		.uleb128 0x3b
 11679 0140 0B       		.uleb128 0xb
 11680 0141 11       		.uleb128 0x11
 11681 0142 01       		.uleb128 0x1
 11682 0143 12       		.uleb128 0x12
 11683 0144 06       		.uleb128 0x6
 11684 0145 40       		.uleb128 0x40
 11685 0146 18       		.uleb128 0x18
 11686 0147 9642     		.uleb128 0x2116
 11687 0149 19       		.uleb128 0x19
 11688 014a 01       		.uleb128 0x1
 11689 014b 13       		.uleb128 0x13
 11690 014c 00       		.byte	0
 11691 014d 00       		.byte	0
 11692 014e 19       		.uleb128 0x19
 11693 014f 34       		.uleb128 0x34
 11694 0150 00       		.byte	0
 11695 0151 03       		.uleb128 0x3
 11696 0152 0E       		.uleb128 0xe
 11697 0153 3A       		.uleb128 0x3a
 11698 0154 0B       		.uleb128 0xb
 11699 0155 3B       		.uleb128 0x3b
 11700 0156 0B       		.uleb128 0xb
 11701 0157 49       		.uleb128 0x49
 11702 0158 13       		.uleb128 0x13
 11703 0159 02       		.uleb128 0x2
 11704 015a 18       		.uleb128 0x18
 11705 015b 00       		.byte	0
 11706 015c 00       		.byte	0
 11707 015d 1A       		.uleb128 0x1a
 11708 015e 2E       		.uleb128 0x2e
 11709 015f 01       		.byte	0x1
 11710 0160 3F       		.uleb128 0x3f
 11711 0161 19       		.uleb128 0x19
 11712 0162 03       		.uleb128 0x3
 11713 0163 0E       		.uleb128 0xe
 11714 0164 3A       		.uleb128 0x3a
 11715 0165 0B       		.uleb128 0xb
 11716 0166 3B       		.uleb128 0x3b
 11717 0167 05       		.uleb128 0x5
 11718 0168 27       		.uleb128 0x27
 11719 0169 19       		.uleb128 0x19
 11720 016a 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 252


 11721 016b 01       		.uleb128 0x1
 11722 016c 12       		.uleb128 0x12
 11723 016d 06       		.uleb128 0x6
 11724 016e 40       		.uleb128 0x40
 11725 016f 18       		.uleb128 0x18
 11726 0170 9642     		.uleb128 0x2116
 11727 0172 19       		.uleb128 0x19
 11728 0173 01       		.uleb128 0x1
 11729 0174 13       		.uleb128 0x13
 11730 0175 00       		.byte	0
 11731 0176 00       		.byte	0
 11732 0177 1B       		.uleb128 0x1b
 11733 0178 34       		.uleb128 0x34
 11734 0179 00       		.byte	0
 11735 017a 03       		.uleb128 0x3
 11736 017b 0E       		.uleb128 0xe
 11737 017c 3A       		.uleb128 0x3a
 11738 017d 0B       		.uleb128 0xb
 11739 017e 3B       		.uleb128 0x3b
 11740 017f 05       		.uleb128 0x5
 11741 0180 49       		.uleb128 0x49
 11742 0181 13       		.uleb128 0x13
 11743 0182 02       		.uleb128 0x2
 11744 0183 18       		.uleb128 0x18
 11745 0184 00       		.byte	0
 11746 0185 00       		.byte	0
 11747 0186 1C       		.uleb128 0x1c
 11748 0187 0B       		.uleb128 0xb
 11749 0188 01       		.byte	0x1
 11750 0189 11       		.uleb128 0x11
 11751 018a 01       		.uleb128 0x1
 11752 018b 12       		.uleb128 0x12
 11753 018c 06       		.uleb128 0x6
 11754 018d 00       		.byte	0
 11755 018e 00       		.byte	0
 11756 018f 1D       		.uleb128 0x1d
 11757 0190 34       		.uleb128 0x34
 11758 0191 00       		.byte	0
 11759 0192 03       		.uleb128 0x3
 11760 0193 08       		.uleb128 0x8
 11761 0194 3A       		.uleb128 0x3a
 11762 0195 0B       		.uleb128 0xb
 11763 0196 3B       		.uleb128 0x3b
 11764 0197 05       		.uleb128 0x5
 11765 0198 49       		.uleb128 0x49
 11766 0199 13       		.uleb128 0x13
 11767 019a 02       		.uleb128 0x2
 11768 019b 18       		.uleb128 0x18
 11769 019c 00       		.byte	0
 11770 019d 00       		.byte	0
 11771 019e 1E       		.uleb128 0x1e
 11772 019f 21       		.uleb128 0x21
 11773 01a0 00       		.byte	0
 11774 01a1 49       		.uleb128 0x49
 11775 01a2 13       		.uleb128 0x13
 11776 01a3 2F       		.uleb128 0x2f
 11777 01a4 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 253


 11778 01a5 00       		.byte	0
 11779 01a6 00       		.byte	0
 11780 01a7 1F       		.uleb128 0x1f
 11781 01a8 2E       		.uleb128 0x2e
 11782 01a9 01       		.byte	0x1
 11783 01aa 3F       		.uleb128 0x3f
 11784 01ab 19       		.uleb128 0x19
 11785 01ac 03       		.uleb128 0x3
 11786 01ad 0E       		.uleb128 0xe
 11787 01ae 3A       		.uleb128 0x3a
 11788 01af 0B       		.uleb128 0xb
 11789 01b0 3B       		.uleb128 0x3b
 11790 01b1 05       		.uleb128 0x5
 11791 01b2 11       		.uleb128 0x11
 11792 01b3 01       		.uleb128 0x1
 11793 01b4 12       		.uleb128 0x12
 11794 01b5 06       		.uleb128 0x6
 11795 01b6 40       		.uleb128 0x40
 11796 01b7 18       		.uleb128 0x18
 11797 01b8 9642     		.uleb128 0x2116
 11798 01ba 19       		.uleb128 0x19
 11799 01bb 01       		.uleb128 0x1
 11800 01bc 13       		.uleb128 0x13
 11801 01bd 00       		.byte	0
 11802 01be 00       		.byte	0
 11803 01bf 20       		.uleb128 0x20
 11804 01c0 05       		.uleb128 0x5
 11805 01c1 00       		.byte	0
 11806 01c2 03       		.uleb128 0x3
 11807 01c3 08       		.uleb128 0x8
 11808 01c4 3A       		.uleb128 0x3a
 11809 01c5 0B       		.uleb128 0xb
 11810 01c6 3B       		.uleb128 0x3b
 11811 01c7 05       		.uleb128 0x5
 11812 01c8 49       		.uleb128 0x49
 11813 01c9 13       		.uleb128 0x13
 11814 01ca 02       		.uleb128 0x2
 11815 01cb 18       		.uleb128 0x18
 11816 01cc 00       		.byte	0
 11817 01cd 00       		.byte	0
 11818 01ce 21       		.uleb128 0x21
 11819 01cf 05       		.uleb128 0x5
 11820 01d0 00       		.byte	0
 11821 01d1 03       		.uleb128 0x3
 11822 01d2 0E       		.uleb128 0xe
 11823 01d3 3A       		.uleb128 0x3a
 11824 01d4 0B       		.uleb128 0xb
 11825 01d5 3B       		.uleb128 0x3b
 11826 01d6 05       		.uleb128 0x5
 11827 01d7 49       		.uleb128 0x49
 11828 01d8 13       		.uleb128 0x13
 11829 01d9 02       		.uleb128 0x2
 11830 01da 18       		.uleb128 0x18
 11831 01db 00       		.byte	0
 11832 01dc 00       		.byte	0
 11833 01dd 22       		.uleb128 0x22
 11834 01de 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 254


 11835 01df 01       		.byte	0x1
 11836 01e0 3F       		.uleb128 0x3f
 11837 01e1 19       		.uleb128 0x19
 11838 01e2 03       		.uleb128 0x3
 11839 01e3 0E       		.uleb128 0xe
 11840 01e4 3A       		.uleb128 0x3a
 11841 01e5 0B       		.uleb128 0xb
 11842 01e6 3B       		.uleb128 0x3b
 11843 01e7 05       		.uleb128 0x5
 11844 01e8 11       		.uleb128 0x11
 11845 01e9 01       		.uleb128 0x1
 11846 01ea 12       		.uleb128 0x12
 11847 01eb 06       		.uleb128 0x6
 11848 01ec 40       		.uleb128 0x40
 11849 01ed 18       		.uleb128 0x18
 11850 01ee 9742     		.uleb128 0x2117
 11851 01f0 19       		.uleb128 0x19
 11852 01f1 01       		.uleb128 0x1
 11853 01f2 13       		.uleb128 0x13
 11854 01f3 00       		.byte	0
 11855 01f4 00       		.byte	0
 11856 01f5 23       		.uleb128 0x23
 11857 01f6 2E       		.uleb128 0x2e
 11858 01f7 01       		.byte	0x1
 11859 01f8 3F       		.uleb128 0x3f
 11860 01f9 19       		.uleb128 0x19
 11861 01fa 03       		.uleb128 0x3
 11862 01fb 0E       		.uleb128 0xe
 11863 01fc 3A       		.uleb128 0x3a
 11864 01fd 0B       		.uleb128 0xb
 11865 01fe 3B       		.uleb128 0x3b
 11866 01ff 05       		.uleb128 0x5
 11867 0200 27       		.uleb128 0x27
 11868 0201 19       		.uleb128 0x19
 11869 0202 11       		.uleb128 0x11
 11870 0203 01       		.uleb128 0x1
 11871 0204 12       		.uleb128 0x12
 11872 0205 06       		.uleb128 0x6
 11873 0206 40       		.uleb128 0x40
 11874 0207 18       		.uleb128 0x18
 11875 0208 9742     		.uleb128 0x2117
 11876 020a 19       		.uleb128 0x19
 11877 020b 01       		.uleb128 0x1
 11878 020c 13       		.uleb128 0x13
 11879 020d 00       		.byte	0
 11880 020e 00       		.byte	0
 11881 020f 24       		.uleb128 0x24
 11882 0210 26       		.uleb128 0x26
 11883 0211 00       		.byte	0
 11884 0212 49       		.uleb128 0x49
 11885 0213 13       		.uleb128 0x13
 11886 0214 00       		.byte	0
 11887 0215 00       		.byte	0
 11888 0216 25       		.uleb128 0x25
 11889 0217 34       		.uleb128 0x34
 11890 0218 00       		.byte	0
 11891 0219 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 255


 11892 021a 0E       		.uleb128 0xe
 11893 021b 3A       		.uleb128 0x3a
 11894 021c 0B       		.uleb128 0xb
 11895 021d 3B       		.uleb128 0x3b
 11896 021e 05       		.uleb128 0x5
 11897 021f 49       		.uleb128 0x49
 11898 0220 13       		.uleb128 0x13
 11899 0221 3F       		.uleb128 0x3f
 11900 0222 19       		.uleb128 0x19
 11901 0223 3C       		.uleb128 0x3c
 11902 0224 19       		.uleb128 0x19
 11903 0225 00       		.byte	0
 11904 0226 00       		.byte	0
 11905 0227 00       		.byte	0
 11906              		.section	.debug_aranges,"",%progbits
 11907 0000 74000000 		.4byte	0x74
 11908 0004 0200     		.2byte	0x2
 11909 0006 00000000 		.4byte	.Ldebug_info0
 11910 000a 04       		.byte	0x4
 11911 000b 00       		.byte	0
 11912 000c 0000     		.2byte	0
 11913 000e 0000     		.2byte	0
 11914 0010 00000000 		.4byte	.LFB64
 11915 0014 18000000 		.4byte	.LFE64-.LFB64
 11916 0018 00000000 		.4byte	.LFB65
 11917 001c 20000000 		.4byte	.LFE65-.LFB65
 11918 0020 00000000 		.4byte	.LFB66
 11919 0024 F4010000 		.4byte	.LFE66-.LFB66
 11920 0028 00000000 		.4byte	.LFB67
 11921 002c 18050000 		.4byte	.LFE67-.LFB67
 11922 0030 00000000 		.4byte	.LFB68
 11923 0034 000B0000 		.4byte	.LFE68-.LFB68
 11924 0038 00000000 		.4byte	.LFB69
 11925 003c D40C0000 		.4byte	.LFE69-.LFB69
 11926 0040 00000000 		.4byte	.LFB70
 11927 0044 10080000 		.4byte	.LFE70-.LFB70
 11928 0048 00000000 		.4byte	.LFB71
 11929 004c 200D0000 		.4byte	.LFE71-.LFB71
 11930 0050 00000000 		.4byte	.LFB72
 11931 0054 F4000000 		.4byte	.LFE72-.LFB72
 11932 0058 00000000 		.4byte	.LFB73
 11933 005c 78000000 		.4byte	.LFE73-.LFB73
 11934 0060 00000000 		.4byte	.LFB74
 11935 0064 08040000 		.4byte	.LFE74-.LFB74
 11936 0068 00000000 		.4byte	.LFB75
 11937 006c 08010000 		.4byte	.LFE75-.LFB75
 11938 0070 00000000 		.4byte	0
 11939 0074 00000000 		.4byte	0
 11940              		.section	.debug_ranges,"",%progbits
 11941              	.Ldebug_ranges0:
 11942 0000 00000000 		.4byte	.LFB64
 11943 0004 18000000 		.4byte	.LFE64
 11944 0008 00000000 		.4byte	.LFB65
 11945 000c 20000000 		.4byte	.LFE65
 11946 0010 00000000 		.4byte	.LFB66
 11947 0014 F4010000 		.4byte	.LFE66
 11948 0018 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 256


 11949 001c 18050000 		.4byte	.LFE67
 11950 0020 00000000 		.4byte	.LFB68
 11951 0024 000B0000 		.4byte	.LFE68
 11952 0028 00000000 		.4byte	.LFB69
 11953 002c D40C0000 		.4byte	.LFE69
 11954 0030 00000000 		.4byte	.LFB70
 11955 0034 10080000 		.4byte	.LFE70
 11956 0038 00000000 		.4byte	.LFB71
 11957 003c 200D0000 		.4byte	.LFE71
 11958 0040 00000000 		.4byte	.LFB72
 11959 0044 F4000000 		.4byte	.LFE72
 11960 0048 00000000 		.4byte	.LFB73
 11961 004c 78000000 		.4byte	.LFE73
 11962 0050 00000000 		.4byte	.LFB74
 11963 0054 08040000 		.4byte	.LFE74
 11964 0058 00000000 		.4byte	.LFB75
 11965 005c 08010000 		.4byte	.LFE75
 11966 0060 00000000 		.4byte	0
 11967 0064 00000000 		.4byte	0
 11968              		.section	.debug_line,"",%progbits
 11969              	.Ldebug_line0:
 11970 0000 410A0000 		.section	.debug_str,"MS",%progbits,1
 11970      0200AC01 
 11970      00000201 
 11970      FB0E0D00 
 11970      01010101 
 11971              	.LASF24:
 11972 0000 73697A65 		.ascii	"sizetype\000"
 11972      74797065 
 11972      00
 11973              	.LASF230:
 11974 0009 706F735F 		.ascii	"pos_cycle_status\000"
 11974      6379636C 
 11974      655F7374 
 11974      61747573 
 11974      00
 11975              	.LASF30:
 11976 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 11976      545F4D4F 
 11976      44455F45 
 11976      4D475F46 
 11976      4346535F 
 11977              	.LASF115:
 11978 0032 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 11978      5F414443 
 11978      5F73656E 
 11978      736F7273 
 11978      5F706F72 
 11979              	.LASF129:
 11980 004d 75736572 		.ascii	"user\000"
 11980      00
 11981              	.LASF10:
 11982 0052 696E7433 		.ascii	"int32_t\000"
 11982      325F7400 
 11983              	.LASF263:
 11984 005a 675F7278 		.ascii	"g_rx\000"
 11984      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 257


 11985              	.LASF211:
 11986 005f 6F6E655F 		.ascii	"one_time_execute\000"
 11986      74696D65 
 11986      5F657865 
 11986      63757465 
 11986      00
 11987              	.LASF47:
 11988 0070 73745F64 		.ascii	"st_data\000"
 11988      61746100 
 11989              	.LASF261:
 11990 0078 675F656D 		.ascii	"g_emg_meas\000"
 11990      675F6D65 
 11990      617300
 11991              	.LASF13:
 11992 0083 75696E74 		.ascii	"uint32\000"
 11992      333200
 11993              	.LASF196:
 11994 008a 6E5F6C69 		.ascii	"n_line\000"
 11994      6E6500
 11995              	.LASF83:
 11996 0091 706F735F 		.ascii	"pos_lim_inf\000"
 11996      6C696D5F 
 11996      696E6600 
 11997              	.LASF284:
 11998 009d 74656E73 		.ascii	"tension_valid\000"
 11998      696F6E5F 
 11998      76616C69 
 11998      6400
 11999              	.LASF160:
 12000 00ab 73746174 		.ascii	"state\000"
 12000      6500
 12001              	.LASF286:
 12002 00b1 6379636C 		.ascii	"cycles_interrupt_flag\000"
 12002      65735F69 
 12002      6E746572 
 12002      72757074 
 12002      5F666C61 
 12003              	.LASF237:
 12004 00c7 62696E5F 		.ascii	"bin_max\000"
 12004      6D617800 
 12005              	.LASF251:
 12006 00cf 61646472 		.ascii	"addr_start_c\000"
 12006      5F737461 
 12006      72745F63 
 12006      00
 12007              	.LASF29:
 12008 00dc 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 12008      545F4D4F 
 12008      44455F45 
 12008      4D475F46 
 12008      43465300 
 12009              	.LASF87:
 12010 00f0 63757272 		.ascii	"curr_lookup\000"
 12010      5F6C6F6F 
 12010      6B757000 
 12011              	.LASF175:
 12012 00fc 70776D5F 		.ascii	"pwm_input\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 258


 12012      696E7075 
 12012      7400
 12013              	.LASF55:
 12014 0106 72657374 		.ascii	"rest_counter\000"
 12014      5F636F75 
 12014      6E746572 
 12014      00
 12015              	.LASF28:
 12016 0113 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 12016      545F4D4F 
 12016      44455F45 
 12016      4D475F49 
 12016      4E544547 
 12017              	.LASF223:
 12018 012b 765F636F 		.ascii	"v_count\000"
 12018      756E7400 
 12019              	.LASF165:
 12020 0133 72785F64 		.ascii	"rx_data\000"
 12020      61746100 
 12021              	.LASF216:
 12022 013b 7676765F 		.ascii	"vvv_value\000"
 12022      76616C75 
 12022      6500
 12023              	.LASF14:
 12024 0145 696E7438 		.ascii	"int8\000"
 12024      00
 12025              	.LASF170:
 12026 014a 696E666F 		.ascii	"info_\000"
 12026      5F00
 12027              	.LASF151:
 12028 0150 656D675F 		.ascii	"emg_status\000"
 12028      73746174 
 12028      757300
 12029              	.LASF271:
 12030 015b 66696C74 		.ascii	"filt_emg\000"
 12030      5F656D67 
 12030      00
 12031              	.LASF102:
 12032 0164 73745F65 		.ascii	"st_emg\000"
 12032      6D6700
 12033              	.LASF53:
 12034 016b 706F7369 		.ascii	"position_hist\000"
 12034      74696F6E 
 12034      5F686973 
 12034      7400
 12035              	.LASF152:
 12036 0179 50524550 		.ascii	"PREPARE_DATA\000"
 12036      4152455F 
 12036      44415441 
 12036      00
 12037              	.LASF136:
 12038 0186 74656D70 		.ascii	"temp_value\000"
 12038      5F76616C 
 12038      756500
 12039              	.LASF234:
 12040 0191 7468725F 		.ascii	"thr_pos\000"
 12040      706F7300 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 259


 12041              	.LASF50:
 12042 0199 72656164 		.ascii	"ready\000"
 12042      7900
 12043              	.LASF99:
 12044 019f 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 12044      6964785F 
 12044      7573655F 
 12044      666F725F 
 12044      636F6E74 
 12045              	.LASF139:
 12046 01b7 6761696E 		.ascii	"gain\000"
 12046      00
 12047              	.LASF59:
 12048 01bc 73745F64 		.ascii	"st_device\000"
 12048      65766963 
 12048      6500
 12049              	.LASF27:
 12050 01c6 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 12050      545F4D4F 
 12050      44455F45 
 12050      4D475F50 
 12050      524F504F 
 12051              	.LASF64:
 12052 01e2 7573655F 		.ascii	"use_2nd_motor_flag\000"
 12052      326E645F 
 12052      6D6F746F 
 12052      725F666C 
 12052      616700
 12053              	.LASF148:
 12054 01f5 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 12054      414E445F 
 12054      4D45414E 
 12054      00
 12055              	.LASF109:
 12056 0202 72656164 		.ascii	"read_imu_flag\000"
 12056      5F696D75 
 12056      5F666C61 
 12056      6700
 12057              	.LASF221:
 12058 0210 66697273 		.ascii	"first_tension_valid\000"
 12058      745F7465 
 12058      6E73696F 
 12058      6E5F7661 
 12058      6C696400 
 12059              	.LASF272:
 12060 0224 74696D65 		.ascii	"timer_value\000"
 12060      725F7661 
 12060      6C756500 
 12061              	.LASF4:
 12062 0230 6C6F6E67 		.ascii	"long int\000"
 12062      20696E74 
 12062      00
 12063              	.LASF127:
 12064 0239 756E7573 		.ascii	"unused_bytes1\000"
 12064      65645F62 
 12064      79746573 
 12064      3100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 260


 12065              	.LASF183:
 12066 0247 53485F45 		.ascii	"SH_ENC_L\000"
 12066      4E435F4C 
 12066      00
 12067              	.LASF63:
 12068 0250 72657365 		.ascii	"reset_counters\000"
 12068      745F636F 
 12068      756E7465 
 12068      727300
 12069              	.LASF233:
 12070 025f 62696E5F 		.ascii	"bin_threshold\000"
 12070      74687265 
 12070      73686F6C 
 12070      6400
 12071              	.LASF119:
 12072 026d 75736572 		.ascii	"user_emg\000"
 12072      5F656D67 
 12072      00
 12073              	.LASF210:
 12074 0276 73616665 		.ascii	"safe_startup_motor_activation\000"
 12074      5F737461 
 12074      72747570 
 12074      5F6D6F74 
 12074      6F725F61 
 12075              	.LASF68:
 12076 0294 756E7573 		.ascii	"unused_bytes\000"
 12076      65645F62 
 12076      79746573 
 12076      00
 12077              	.LASF132:
 12078 02a1 61636365 		.ascii	"accel_value\000"
 12078      6C5F7661 
 12078      6C756500 
 12079              	.LASF199:
 12080 02ad 6175785F 		.ascii	"aux_encoder\000"
 12080      656E636F 
 12080      64657200 
 12081              	.LASF51:
 12082 02b9 73745F63 		.ascii	"st_counters\000"
 12082      6F756E74 
 12082      65727300 
 12083              	.LASF182:
 12084 02c5 53485F4D 		.ascii	"SH_MOT\000"
 12084      4F5400
 12085              	.LASF17:
 12086 02cc 666C6F61 		.ascii	"float32\000"
 12086      74333200 
 12087              	.LASF195:
 12088 02d4 656E636F 		.ascii	"encoder_reading_SPI\000"
 12088      6465725F 
 12088      72656164 
 12088      696E675F 
 12088      53504900 
 12089              	.LASF208:
 12090 02e8 6572726F 		.ascii	"error\000"
 12090      7200
 12091              	.LASF52:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 261


 12092 02ee 656D675F 		.ascii	"emg_counter\000"
 12092      636F756E 
 12092      74657200 
 12093              	.LASF155:
 12094 02fa 57524954 		.ascii	"WRITE_END\000"
 12094      455F454E 
 12094      4400
 12095              	.LASF213:
 12096 0304 706F735F 		.ascii	"pos_reconstruct\000"
 12096      7265636F 
 12096      6E737472 
 12096      75637400 
 12097              	.LASF225:
 12098 0314 70776D5F 		.ascii	"pwm_limit_search\000"
 12098      6C696D69 
 12098      745F7365 
 12098      61726368 
 12098      00
 12099              	.LASF0:
 12100 0325 7369676E 		.ascii	"signed char\000"
 12100      65642063 
 12100      68617200 
 12101              	.LASF118:
 12102 0331 75736572 		.ascii	"user_code_string\000"
 12102      5F636F64 
 12102      655F7374 
 12102      72696E67 
 12102      00
 12103              	.LASF140:
 12104 0342 73745F63 		.ascii	"st_calib\000"
 12104      616C6962 
 12104      00
 12105              	.LASF180:
 12106 034b 6572725F 		.ascii	"err_emg_1\000"
 12106      656D675F 
 12106      3100
 12107              	.LASF181:
 12108 0355 6572725F 		.ascii	"err_emg_2\000"
 12108      656D675F 
 12108      3200
 12109              	.LASF107:
 12110 035f 73776974 		.ascii	"switch_emg\000"
 12110      63685F65 
 12110      6D6700
 12111              	.LASF282:
 12112 036a 656D675F 		.ascii	"emg_2_status\000"
 12112      325F7374 
 12112      61747573 
 12112      00
 12113              	.LASF292:
 12114 0377 4144435F 		.ascii	"ADC_buf\000"
 12114      62756600 
 12115              	.LASF285:
 12116 037f 696E7465 		.ascii	"interrupt_flag\000"
 12116      72727570 
 12116      745F666C 
 12116      616700
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 262


 12117              	.LASF243:
 12118 038e 73746570 		.ascii	"step\000"
 12118      00
 12119              	.LASF185:
 12120 0393 63757272 		.ascii	"curr_error_sum\000"
 12120      5F657272 
 12120      6F725F73 
 12120      756D00
 12121              	.LASF1:
 12122 03a2 756E7369 		.ascii	"unsigned char\000"
 12122      676E6564 
 12122      20636861 
 12122      7200
 12123              	.LASF93:
 12124 03b0 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 12124      72657665 
 12124      72735F6D 
 12124      6F746F72 
 12124      5F666C61 
 12125              	.LASF249:
 12126 03c6 726F775F 		.ascii	"row_start\000"
 12126      73746172 
 12126      7400
 12127              	.LASF289:
 12128 03d0 666F7263 		.ascii	"forced_open\000"
 12128      65645F6F 
 12128      70656E00 
 12129              	.LASF203:
 12130 03dc 73706565 		.ascii	"speed_encoder\000"
 12130      645F656E 
 12130      636F6465 
 12130      7200
 12131              	.LASF257:
 12132 03ea 675F7265 		.ascii	"g_refNew\000"
 12132      664E6577 
 12132      00
 12133              	.LASF241:
 12134 03f3 63757272 		.ascii	"curr_off\000"
 12134      5F6F6666 
 12134      00
 12135              	.LASF62:
 12136 03fc 72696768 		.ascii	"right_left\000"
 12136      745F6C65 
 12136      667400
 12137              	.LASF91:
 12138 0407 656E636F 		.ascii	"encoder_line\000"
 12138      6465725F 
 12138      6C696E65 
 12138      00
 12139              	.LASF281:
 12140 0414 656D675F 		.ascii	"emg_1_status\000"
 12140      315F7374 
 12140      61747573 
 12140      00
 12141              	.LASF131:
 12142 0421 666C6167 		.ascii	"flags\000"
 12142      7300
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 263


 12143              	.LASF179:
 12144 0427 68616E64 		.ascii	"handle_value\000"
 12144      6C655F76 
 12144      616C7565 
 12144      00
 12145              	.LASF20:
 12146 0434 63686172 		.ascii	"char\000"
 12146      00
 12147              	.LASF86:
 12148 0439 6D61785F 		.ascii	"max_step_pos\000"
 12148      73746570 
 12148      5F706F73 
 12148      00
 12149              	.LASF294:
 12150 0446 70776D5F 		.ascii	"pwm_sign\000"
 12150      7369676E 
 12150      00
 12151              	.LASF193:
 12152 044f 6D6F746F 		.ascii	"motor_control_generic\000"
 12152      725F636F 
 12152      6E74726F 
 12152      6C5F6765 
 12152      6E657269 
 12153              	.LASF270:
 12154 0465 66696C74 		.ascii	"filt_vel\000"
 12154      5F76656C 
 12154      00
 12155              	.LASF92:
 12156 046e 70776D5F 		.ascii	"pwm_rate_limiter\000"
 12156      72617465 
 12156      5F6C696D 
 12156      69746572 
 12156      00
 12157              	.LASF72:
 12158 047f 6B5F645F 		.ascii	"k_d_c\000"
 12158      6300
 12159              	.LASF97:
 12160 0485 6D5F6D75 		.ascii	"m_mult\000"
 12160      6C7400
 12161              	.LASF71:
 12162 048c 6B5F695F 		.ascii	"k_i_c\000"
 12162      6300
 12163              	.LASF189:
 12164 0492 6D6F746F 		.ascii	"motor_dir\000"
 12164      725F6469 
 12164      7200
 12165              	.LASF236:
 12166 049c 62696E5F 		.ascii	"bin_st\000"
 12166      737400
 12167              	.LASF158:
 12168 04a3 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 12168      52533438 
 12168      355F5258 
 12168      5F457849 
 12168      6E746572 
 12169              	.LASF84:
 12170 04bc 706F735F 		.ascii	"pos_lim_sup\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 264


 12170      6C696D5F 
 12170      73757000 
 12171              	.LASF138:
 12172 04c8 6F6C645F 		.ascii	"old_value\000"
 12172      76616C75 
 12172      6500
 12173              	.LASF105:
 12174 04d2 656D675F 		.ascii	"emg_speed\000"
 12174      73706565 
 12174      6400
 12175              	.LASF123:
 12176 04dc 72657374 		.ascii	"rest_vel\000"
 12176      5F76656C 
 12176      00
 12177              	.LASF145:
 12178 04e5 4E4F524D 		.ascii	"NORMAL\000"
 12178      414C00
 12179              	.LASF174:
 12180 04ec 6D6F746F 		.ascii	"motor_control_SH\000"
 12180      725F636F 
 12180      6E74726F 
 12180      6C5F5348 
 12180      00
 12181              	.LASF300:
 12182 04fd 7046696C 		.ascii	"pFile\000"
 12182      6500
 12183              	.LASF184:
 12184 0503 706F735F 		.ascii	"pos_error_sum\000"
 12184      6572726F 
 12184      725F7375 
 12184      6D00
 12185              	.LASF116:
 12186 0511 4144435F 		.ascii	"ADC_conf\000"
 12186      636F6E66 
 12186      00
 12187              	.LASF278:
 12188 051a 6465765F 		.ascii	"dev_tension_f\000"
 12188      74656E73 
 12188      696F6E5F 
 12188      6600
 12189              	.LASF74:
 12190 0528 6B5F695F 		.ascii	"k_i_dl\000"
 12190      646C00
 12191              	.LASF48:
 12192 052f 62756666 		.ascii	"buffer\000"
 12192      657200
 12193              	.LASF76:
 12194 0536 6B5F705F 		.ascii	"k_p_c_dl\000"
 12194      635F646C 
 12194      00
 12195              	.LASF166:
 12196 053f 72785F64 		.ascii	"rx_data_type\000"
 12196      6174615F 
 12196      74797065 
 12196      00
 12197              	.LASF302:
 12198 054c 675F696D 		.ascii	"g_imuNew\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 265


 12198      754E6577 
 12198      00
 12199              	.LASF143:
 12200 0555 73706565 		.ascii	"speed\000"
 12200      6400
 12201              	.LASF190:
 12202 055b 706F7369 		.ascii	"position_counter\000"
 12202      74696F6E 
 12202      5F636F75 
 12202      6E746572 
 12202      00
 12203              	.LASF245:
 12204 056c 74696D65 		.ascii	"timer_value_e\000"
 12204      725F7661 
 12204      6C75655F 
 12204      6500
 12205              	.LASF161:
 12206 057a 64617461 		.ascii	"data_packet_index\000"
 12206      5F706163 
 12206      6B65745F 
 12206      696E6465 
 12206      7800
 12207              	.LASF163:
 12208 058c 64617461 		.ascii	"data_packet_buffer\000"
 12208      5F706163 
 12208      6B65745F 
 12208      62756666 
 12208      657200
 12209              	.LASF280:
 12210 059f 6379636C 		.ascii	"cycles_status\000"
 12210      65735F73 
 12210      74617475 
 12210      7300
 12211              	.LASF168:
 12212 05ad 636F756E 		.ascii	"counter_calibration\000"
 12212      7465725F 
 12212      63616C69 
 12212      62726174 
 12212      696F6E00 
 12213              	.LASF259:
 12214 05c1 675F6D65 		.ascii	"g_meas\000"
 12214      617300
 12215              	.LASF244:
 12216 05c8 74696D65 		.ascii	"timer_value_s\000"
 12216      725F7661 
 12216      6C75655F 
 12216      7300
 12217              	.LASF298:
 12218 05d6 456E636F 		.ascii	"Encoder_Check\000"
 12218      6465725F 
 12218      43686563 
 12218      6B00
 12219              	.LASF207:
 12220 05e4 636F6D70 		.ascii	"comp_value_encoder\000"
 12220      5F76616C 
 12220      75655F65 
 12220      6E636F64 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 266


 12220      657200
 12221              	.LASF295:
 12222 05f7 64617461 		.ascii	"data_encoder_raw\000"
 12222      5F656E63 
 12222      6F646572 
 12222      5F726177 
 12222      00
 12223              	.LASF256:
 12224 0608 675F7265 		.ascii	"g_ref\000"
 12224      6600
 12225              	.LASF25:
 12226 060e 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 12226      545F4D4F 
 12226      44455F45 
 12226      58544552 
 12226      4E414C00 
 12227              	.LASF198:
 12228 0622 696E6465 		.ascii	"index\000"
 12228      7800
 12229              	.LASF124:
 12230 0628 72657374 		.ascii	"rest_position_flag\000"
 12230      5F706F73 
 12230      6974696F 
 12230      6E5F666C 
 12230      616700
 12231              	.LASF301:
 12232 063b 675F696D 		.ascii	"g_imu\000"
 12232      7500
 12233              	.LASF77:
 12234 0641 6B5F695F 		.ascii	"k_i_c_dl\000"
 12234      635F646C 
 12234      00
 12235              	.LASF167:
 12236 064a 7061636B 		.ascii	"package_count\000"
 12236      6167655F 
 12236      636F756E 
 12236      7400
 12237              	.LASF37:
 12238 0658 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 12238      5F414E44 
 12238      5F504F53 
 12238      5F434F4E 
 12238      54524F4C 
 12239              	.LASF141:
 12240 066d 656E6162 		.ascii	"enabled\000"
 12240      6C656400 
 12241              	.LASF5:
 12242 0675 6C6F6E67 		.ascii	"long unsigned int\000"
 12242      20756E73 
 12242      69676E65 
 12242      6420696E 
 12242      7400
 12243              	.LASF57:
 12244 0687 746F7461 		.ascii	"total_time_on\000"
 12244      6C5F7469 
 12244      6D655F6F 
 12244      6E00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 267


 12245              	.LASF153:
 12246 0695 57524954 		.ascii	"WRITE_CYCLES\000"
 12246      455F4359 
 12246      434C4553 
 12246      00
 12247              	.LASF44:
 12248 06a2 686F6C64 		.ascii	"hold_curr\000"
 12248      5F637572 
 12248      7200
 12249              	.LASF58:
 12250 06ac 746F7461 		.ascii	"total_time_rest\000"
 12250      6C5F7469 
 12250      6D655F72 
 12250      65737400 
 12251              	.LASF79:
 12252 06bc 61637469 		.ascii	"activ\000"
 12252      7600
 12253              	.LASF228:
 12254 06c2 6D696E5F 		.ascii	"min_tension\000"
 12254      74656E73 
 12254      696F6E00 
 12255              	.LASF290:
 12256 06ce 62617474 		.ascii	"battery_low_SoC\000"
 12256      6572795F 
 12256      6C6F775F 
 12256      536F4300 
 12257              	.LASF96:
 12258 06de 6D5F6F66 		.ascii	"m_off\000"
 12258      6600
 12259              	.LASF283:
 12260 06e4 72657365 		.ascii	"reset_last_value_flag\000"
 12260      745F6C61 
 12260      73745F76 
 12260      616C7565 
 12260      5F666C61 
 12261              	.LASF135:
 12262 06fa 71756174 		.ascii	"quat_value\000"
 12262      5F76616C 
 12262      756500
 12263              	.LASF121:
 12264 0705 72657374 		.ascii	"rest_pos\000"
 12264      5F706F73 
 12264      00
 12265              	.LASF39:
 12266 070e 63757272 		.ascii	"curr\000"
 12266      00
 12267              	.LASF154:
 12268 0713 57414954 		.ascii	"WAIT_QUERY\000"
 12268      5F515545 
 12268      525900
 12269              	.LASF89:
 12270 071e 696E7075 		.ascii	"input_mode\000"
 12270      745F6D6F 
 12270      646500
 12271              	.LASF35:
 12272 0729 434F4E54 		.ascii	"CONTROL_PWM\000"
 12272      524F4C5F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 268


 12272      50574D00 
 12273              	.LASF229:
 12274 0735 6379636C 		.ascii	"cycles_counter_update\000"
 12274      65735F63 
 12274      6F756E74 
 12274      65725F75 
 12274      70646174 
 12275              	.LASF303:
 12276 074b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12276      43313120 
 12276      352E342E 
 12276      31203230 
 12276      31363036 
 12277 077e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 12277      20726576 
 12277      6973696F 
 12277      6E203233 
 12277      37373135 
 12278 07b1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 12278      66756E63 
 12278      74696F6E 
 12278      2D736563 
 12278      74696F6E 
 12279              	.LASF41:
 12280 07d9 73745F72 		.ascii	"st_ref\000"
 12280      656600
 12281              	.LASF273:
 12282 07e0 74696D65 		.ascii	"timer_value0\000"
 12282      725F7661 
 12282      6C756530 
 12282      00
 12283              	.LASF120:
 12284 07ed 73745F53 		.ascii	"st_SH_spec\000"
 12284      485F7370 
 12284      656300
 12285              	.LASF214:
 12286 07f8 765F7661 		.ascii	"v_value\000"
 12286      6C756500 
 12287              	.LASF266:
 12288 0800 63616C69 		.ascii	"calib\000"
 12288      6200
 12289              	.LASF6:
 12290 0806 6C6F6E67 		.ascii	"long long int\000"
 12290      206C6F6E 
 12290      6720696E 
 12290      7400
 12291              	.LASF33:
 12292 0814 53485F63 		.ascii	"SH_control_mode\000"
 12292      6F6E7472 
 12292      6F6C5F6D 
 12292      6F646500 
 12293              	.LASF172:
 12294 0824 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 12294      4E445F4D 
 12294      4F544F52 
 12294      5F494458 
 12294      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 269


 12295              	.LASF291:
 12296 0835 6368616E 		.ascii	"change_ext_ref_flag\000"
 12296      67655F65 
 12296      78745F72 
 12296      65665F66 
 12296      6C616700 
 12297              	.LASF19:
 12298 0849 646F7562 		.ascii	"double\000"
 12298      6C6500
 12299              	.LASF268:
 12300 0850 66696C74 		.ascii	"filt_curr_diff\000"
 12300      5F637572 
 12300      725F6469 
 12300      666600
 12301              	.LASF173:
 12302 085f 696E7465 		.ascii	"interrupt_manager\000"
 12302      72727570 
 12302      745F6D61 
 12302      6E616765 
 12302      7200
 12303              	.LASF95:
 12304 0871 456E635F 		.ascii	"Enc_raw_read_conf\000"
 12304      7261775F 
 12304      72656164 
 12304      5F636F6E 
 12304      6600
 12305              	.LASF144:
 12306 0883 72657065 		.ascii	"repetitions\000"
 12306      74697469 
 12306      6F6E7300 
 12307              	.LASF85:
 12308 088f 6D61785F 		.ascii	"max_step_neg\000"
 12308      73746570 
 12308      5F6E6567 
 12308      00
 12309              	.LASF212:
 12310 089c 636F756E 		.ascii	"count_startup_motor\000"
 12310      745F7374 
 12310      61727475 
 12310      705F6D6F 
 12310      746F7200 
 12311              	.LASF149:
 12312 08b0 57414954 		.ascii	"WAIT\000"
 12312      00
 12313              	.LASF18:
 12314 08b5 666C6F61 		.ascii	"float\000"
 12314      7400
 12315              	.LASF111:
 12316 08bb 494D555F 		.ascii	"IMU_conf\000"
 12316      636F6E66 
 12316      00
 12317              	.LASF222:
 12318 08c4 636F756E 		.ascii	"count\000"
 12318      7400
 12319              	.LASF69:
 12320 08ca 73745F6D 		.ascii	"st_motor\000"
 12320      6F746F72 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 270


 12320      00
 12321              	.LASF253:
 12322 08d3 6D5F6164 		.ascii	"m_addr\000"
 12322      647200
 12323              	.LASF265:
 12324 08da 635F6D65 		.ascii	"c_mem\000"
 12324      6D00
 12325              	.LASF8:
 12326 08e0 756E7369 		.ascii	"unsigned int\000"
 12326      676E6564 
 12326      20696E74 
 12326      00
 12327              	.LASF235:
 12328 08ed 6D61785F 		.ascii	"max_pos\000"
 12328      706F7300 
 12329              	.LASF299:
 12330 08f5 72657374 		.ascii	"rest_pos_curr_ref\000"
 12330      5F706F73 
 12330      5F637572 
 12330      725F7265 
 12330      6600
 12331              	.LASF126:
 12332 0907 666C6167 		.ascii	"flag\000"
 12332      00
 12333              	.LASF90:
 12334 090c 636F6E74 		.ascii	"control_mode\000"
 12334      726F6C5F 
 12334      6D6F6465 
 12334      00
 12335              	.LASF21:
 12336 0919 63797374 		.ascii	"cystatus\000"
 12336      61747573 
 12336      00
 12337              	.LASF26:
 12338 0922 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 12338      545F4D4F 
 12338      44455F45 
 12338      4E434F44 
 12338      45523300 
 12339              	.LASF108:
 12340 0936 73745F69 		.ascii	"st_imu\000"
 12340      6D7500
 12341              	.LASF191:
 12342 093d 63757272 		.ascii	"current_emg\000"
 12342      656E745F 
 12342      656D6700 
 12343              	.LASF164:
 12344 0949 72785F71 		.ascii	"rx_queue\000"
 12344      75657565 
 12344      00
 12345              	.LASF197:
 12346 0952 6173736F 		.ascii	"assoc_motor\000"
 12346      635F6D6F 
 12346      746F7200 
 12347              	.LASF46:
 12348 095e 6164645F 		.ascii	"add_emg\000"
 12348      656D6700 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 271


 12349              	.LASF178:
 12350 0966 695F7265 		.ascii	"i_ref\000"
 12350      6600
 12351              	.LASF103:
 12352 096c 656D675F 		.ascii	"emg_threshold\000"
 12352      74687265 
 12352      73686F6C 
 12352      6400
 12353              	.LASF246:
 12354 097a 73617665 		.ascii	"save_cycles_eeprom\000"
 12354      5F637963 
 12354      6C65735F 
 12354      65657072 
 12354      6F6D00
 12355              	.LASF54:
 12356 098d 63757272 		.ascii	"current_hist\000"
 12356      656E745F 
 12356      68697374 
 12356      00
 12357              	.LASF36:
 12358 099a 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 12358      524F4C5F 
 12358      43555252 
 12358      454E5400 
 12359              	.LASF23:
 12360 09aa 6C6F6E67 		.ascii	"long double\000"
 12360      20646F75 
 12360      626C6500 
 12361              	.LASF147:
 12362 09b6 44495343 		.ascii	"DISCARD\000"
 12362      41524400 
 12363              	.LASF186:
 12364 09be 70726576 		.ascii	"prev_pos_err\000"
 12364      5F706F73 
 12364      5F657272 
 12364      00
 12365              	.LASF205:
 12366 09cb 696E6974 		.ascii	"init_rot\000"
 12366      5F726F74 
 12366      00
 12367              	.LASF226:
 12368 09d4 6D6F745F 		.ascii	"mot_idx\000"
 12368      69647800 
 12369              	.LASF45:
 12370 09dc 73745F65 		.ascii	"st_emg_meas\000"
 12370      6D675F6D 
 12370      65617300 
 12371              	.LASF269:
 12372 09e8 66696C74 		.ascii	"filt_i\000"
 12372      5F6900
 12373              	.LASF100:
 12374 09ef 6D6F746F 		.ascii	"motor_handle_ratio\000"
 12374      725F6861 
 12374      6E646C65 
 12374      5F726174 
 12374      696F00
 12375              	.LASF267:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 272


 12376 0a02 66696C74 		.ascii	"filt_v\000"
 12376      5F7600
 12377              	.LASF288:
 12378 0a09 72657374 		.ascii	"rest_enabled\000"
 12378      5F656E61 
 12378      626C6564 
 12378      00
 12379              	.LASF258:
 12380 0a16 675F7265 		.ascii	"g_refOld\000"
 12380      664F6C64 
 12380      00
 12381              	.LASF176:
 12382 0a1f 706F735F 		.ascii	"pos_error\000"
 12382      6572726F 
 12382      7200
 12383              	.LASF133:
 12384 0a29 6779726F 		.ascii	"gyro_value\000"
 12384      5F76616C 
 12384      756500
 12385              	.LASF113:
 12386 0a34 63757272 		.ascii	"curr_time\000"
 12386      5F74696D 
 12386      6500
 12387              	.LASF98:
 12388 0a3e 646F7562 		.ascii	"double_encoder_on_off\000"
 12388      6C655F65 
 12388      6E636F64 
 12388      65725F6F 
 12388      6E5F6F66 
 12389              	.LASF227:
 12390 0a54 6D61785F 		.ascii	"max_tension\000"
 12390      74656E73 
 12390      696F6E00 
 12391              	.LASF171:
 12392 0a60 4D4F544F 		.ascii	"MOTOR_IDX\000"
 12392      525F4944 
 12392      5800
 12393              	.LASF206:
 12394 0a6a 6C617374 		.ascii	"last_value_encoder\000"
 12394      5F76616C 
 12394      75655F65 
 12394      6E636F64 
 12394      657200
 12395              	.LASF169:
 12396 0a7d 636F756E 		.ascii	"counter_tension_func\000"
 12396      7465725F 
 12396      74656E73 
 12396      696F6E5F 
 12396      66756E63 
 12397              	.LASF274:
 12398 0a92 6379636C 		.ascii	"cycle_time\000"
 12398      655F7469 
 12398      6D6500
 12399              	.LASF7:
 12400 0a9d 6C6F6E67 		.ascii	"long long unsigned int\000"
 12400      206C6F6E 
 12400      6720756E 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 273


 12400      7369676E 
 12400      65642069 
 12401              	.LASF49:
 12402 0ab4 6C656E67 		.ascii	"length\000"
 12402      746800
 12403              	.LASF130:
 12404 0abb 73745F69 		.ascii	"st_imu_data\000"
 12404      6D755F64 
 12404      61746100 
 12405              	.LASF134:
 12406 0ac7 6D61675F 		.ascii	"mag_value\000"
 12406      76616C75 
 12406      6500
 12407              	.LASF40:
 12408 0ad1 6F6E6F66 		.ascii	"onoff\000"
 12408      6600
 12409              	.LASF201:
 12410 0ad7 746D705F 		.ascii	"tmp_value_encoder_32\000"
 12410      76616C75 
 12410      655F656E 
 12410      636F6465 
 12410      725F3332 
 12411              	.LASF187:
 12412 0aec 70726576 		.ascii	"prev_curr_err\000"
 12412      5F637572 
 12412      725F6572 
 12412      7200
 12413              	.LASF162:
 12414 0afa 64617461 		.ascii	"data_packet_length\000"
 12414      5F706163 
 12414      6B65745F 
 12414      6C656E67 
 12414      746800
 12415              	.LASF70:
 12416 0b0d 6B5F705F 		.ascii	"k_p_c\000"
 12416      6300
 12417              	.LASF275:
 12418 0b13 6465765F 		.ascii	"dev_tension\000"
 12418      74656E73 
 12418      696F6E00 
 12419              	.LASF81:
 12420 0b1f 6D6F746F 		.ascii	"motor_driver_type\000"
 12420      725F6472 
 12420      69766572 
 12420      5F747970 
 12420      6500
 12421              	.LASF150:
 12422 0b31 57414954 		.ascii	"WAIT_EoC\000"
 12422      5F456F43 
 12422      00
 12423              	.LASF22:
 12424 0b3a 72656738 		.ascii	"reg8\000"
 12424      00
 12425              	.LASF238:
 12426 0b3f 62696E5F 		.ascii	"bin_1\000"
 12426      3100
 12427              	.LASF239:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 274


 12428 0b45 62696E5F 		.ascii	"bin_2\000"
 12428      3200
 12429              	.LASF218:
 12430 0b4b 695F6175 		.ascii	"i_aux\000"
 12430      7800
 12431              	.LASF248:
 12432 0b51 726F775F 		.ascii	"row_number\000"
 12432      6E756D62 
 12432      657200
 12433              	.LASF224:
 12434 0b5c 6F766572 		.ascii	"overcurrent_control\000"
 12434      63757272 
 12434      656E745F 
 12434      636F6E74 
 12434      726F6C00 
 12435              	.LASF240:
 12436 0b70 63757272 		.ascii	"curr_pos\000"
 12436      5F706F73 
 12436      00
 12437              	.LASF146:
 12438 0b79 52455345 		.ascii	"RESET\000"
 12438      5400
 12439              	.LASF217:
 12440 0b7f 616E616C 		.ascii	"analog_read_end\000"
 12440      6F675F72 
 12440      6561645F 
 12440      656E6400 
 12441              	.LASF296:
 12442 0b8f 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 12442      636F6465 
 12442      725F4C69 
 12442      6E655F43 
 12442      6F6E6E65 
 12443              	.LASF67:
 12444 0ba8 6465765F 		.ascii	"dev_type\000"
 12444      74797065 
 12444      00
 12445              	.LASF231:
 12446 0bb1 656D675F 		.ascii	"emg_cycle_status\000"
 12446      6379636C 
 12446      655F7374 
 12446      61747573 
 12446      00
 12447              	.LASF117:
 12448 0bc2 73745F75 		.ascii	"st_user\000"
 12448      73657200 
 12449              	.LASF101:
 12450 0bca 67656172 		.ascii	"gears_params\000"
 12450      735F7061 
 12450      72616D73 
 12450      00
 12451              	.LASF112:
 12452 0bd7 73745F65 		.ascii	"st_expansion\000"
 12452      7870616E 
 12452      73696F6E 
 12452      00
 12453              	.LASF106:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 275


 12454 0be4 656D675F 		.ascii	"emg_calibration_flag\000"
 12454      63616C69 
 12454      62726174 
 12454      696F6E5F 
 12454      666C6167 
 12455              	.LASF42:
 12456 0bf9 73745F6D 		.ascii	"st_meas\000"
 12456      65617300 
 12457              	.LASF250:
 12458 0c01 61646472 		.ascii	"addr_start\000"
 12458      5F737461 
 12458      727400
 12459              	.LASF254:
 12460 0c0c 70776D5F 		.ascii	"pwm_preload_values\000"
 12460      7072656C 
 12460      6F61645F 
 12460      76616C75 
 12460      657300
 12461              	.LASF31:
 12462 0c1f 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 12462      545F4D4F 
 12462      44455F45 
 12462      4D475F50 
 12462      524F504F 
 12463              	.LASF157:
 12464 0c3e 636F756E 		.ascii	"counter_status\000"
 12464      7465725F 
 12464      73746174 
 12464      757300
 12465              	.LASF264:
 12466 0c4d 675F6D65 		.ascii	"g_mem\000"
 12466      6D00
 12467              	.LASF219:
 12468 0c53 656D675F 		.ascii	"emg_counter_1\000"
 12468      636F756E 
 12468      7465725F 
 12468      3100
 12469              	.LASF220:
 12470 0c61 656D675F 		.ascii	"emg_counter_2\000"
 12470      636F756E 
 12470      7465725F 
 12470      3200
 12471              	.LASF209:
 12472 0c6f 6F6E6C79 		.ascii	"only_first_time\000"
 12472      5F666972 
 12472      73745F74 
 12472      696D6500 
 12473              	.LASF11:
 12474 0c7f 75696E74 		.ascii	"uint8\000"
 12474      3800
 12475              	.LASF204:
 12476 0c85 76616C75 		.ascii	"value_diff\000"
 12476      655F6469 
 12476      666600
 12477              	.LASF242:
 12478 0c90 63757272 		.ascii	"curr_ref\000"
 12478      5F726566 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 276


 12478      00
 12479              	.LASF2:
 12480 0c99 73686F72 		.ascii	"short int\000"
 12480      7420696E 
 12480      7400
 12481              	.LASF75:
 12482 0ca3 6B5F645F 		.ascii	"k_d_dl\000"
 12482      646C00
 12483              	.LASF202:
 12484 0caa 76616C75 		.ascii	"value_encoder\000"
 12484      655F656E 
 12484      636F6465 
 12484      7200
 12485              	.LASF128:
 12486 0cb8 6D6F746F 		.ascii	"motor\000"
 12486      7200
 12487              	.LASF277:
 12488 0cbe 6465765F 		.ascii	"dev_pwm_sat\000"
 12488      70776D5F 
 12488      73617400 
 12489              	.LASF60:
 12490 0cca 68775F6D 		.ascii	"hw_maint_date\000"
 12490      61696E74 
 12490      5F646174 
 12490      6500
 12491              	.LASF192:
 12492 0cd8 66756E63 		.ascii	"function_scheduler\000"
 12492      74696F6E 
 12492      5F736368 
 12492      6564756C 
 12492      657200
 12493              	.LASF188:
 12494 0ceb 70726576 		.ascii	"prev_pwm\000"
 12494      5F70776D 
 12494      00
 12495              	.LASF61:
 12496 0cf4 73746174 		.ascii	"stats_period_begin_date\000"
 12496      735F7065 
 12496      72696F64 
 12496      5F626567 
 12496      696E5F64 
 12497              	.LASF255:
 12498 0d0c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12498      52784275 
 12498      66666572 
 12498      00
 12499              	.LASF279:
 12500 0d19 706F775F 		.ascii	"pow_tension\000"
 12500      74656E73 
 12500      696F6E00 
 12501              	.LASF305:
 12502 0d25 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 12502      73657273 
 12502      5C4D6174 
 12502      7469615C 
 12502      446F6375 
 12503 0d53 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\SoftHand_Pro.cydsn\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 277


 12503      656E6572 
 12503      69632D46 
 12503      572D5053 
 12503      6F43355C 
 12504              	.LASF15:
 12505 0d7a 696E7431 		.ascii	"int16\000"
 12505      3600
 12506              	.LASF114:
 12507 0d80 72656164 		.ascii	"read_exp_port_flag\000"
 12507      5F657870 
 12507      5F706F72 
 12507      745F666C 
 12507      616700
 12508              	.LASF80:
 12509 0d93 61637469 		.ascii	"activate_pwm_rescaling\000"
 12509      76617465 
 12509      5F70776D 
 12509      5F726573 
 12509      63616C69 
 12510              	.LASF73:
 12511 0daa 6B5F705F 		.ascii	"k_p_dl\000"
 12511      646C00
 12512              	.LASF43:
 12513 0db1 65737469 		.ascii	"estim_curr\000"
 12513      6D5F6375 
 12513      727200
 12514              	.LASF276:
 12515 0dbc 6465765F 		.ascii	"dev_pwm_limit\000"
 12515      70776D5F 
 12515      6C696D69 
 12515      7400
 12516              	.LASF247:
 12517 0dca 73746174 		.ascii	"status\000"
 12517      757300
 12518              	.LASF177:
 12519 0dd1 63757272 		.ascii	"curr_error\000"
 12519      5F657272 
 12519      6F7200
 12520              	.LASF297:
 12521 0ddc 456E636F 		.ascii	"Encoder_Value\000"
 12521      6465725F 
 12521      56616C75 
 12521      6500
 12522              	.LASF66:
 12523 0dea 75736572 		.ascii	"user_id\000"
 12523      5F696400 
 12524              	.LASF232:
 12525 0df2 72657374 		.ascii	"rest_cycle_status\000"
 12525      5F637963 
 12525      6C655F73 
 12525      74617475 
 12525      7300
 12526              	.LASF200:
 12527 0e04 746D705F 		.ascii	"tmp_value_encoder\000"
 12527      76616C75 
 12527      655F656E 
 12527      636F6465 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 278


 12527      7200
 12528              	.LASF159:
 12529 0e16 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 12529      4359434C 
 12529      45535F48 
 12529      616E646C 
 12529      657200
 12530              	.LASF65:
 12531 0e29 62617564 		.ascii	"baud_rate\000"
 12531      5F726174 
 12531      6500
 12532              	.LASF110:
 12533 0e33 5350495F 		.ascii	"SPI_read_delay\000"
 12533      72656164 
 12533      5F64656C 
 12533      617900
 12534              	.LASF3:
 12535 0e42 73686F72 		.ascii	"short unsigned int\000"
 12535      7420756E 
 12535      7369676E 
 12535      65642069 
 12535      6E7400
 12536              	.LASF94:
 12537 0e55 73745F65 		.ascii	"st_encoder\000"
 12537      6E636F64 
 12537      657200
 12538              	.LASF194:
 12539 0e60 454E435F 		.ascii	"ENC_L\000"
 12539      4C00
 12540              	.LASF125:
 12541 0e66 73745F65 		.ascii	"st_eeprom\000"
 12541      6570726F 
 12541      6D00
 12542              	.LASF304:
 12543 0e70 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 12543      72635C69 
 12543      6E746572 
 12543      72757074 
 12543      696F6E73 
 12544              	.LASF16:
 12545 0e87 696E7433 		.ascii	"int32\000"
 12545      3200
 12546              	.LASF293:
 12547 0e8d 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 12547      4F465F41 
 12547      4E414C4F 
 12547      475F494E 
 12547      50555453 
 12548              	.LASF38:
 12549 0ea2 46535F46 		.ascii	"FS_FILE\000"
 12549      494C4500 
 12550              	.LASF82:
 12551 0eaa 706F735F 		.ascii	"pos_lim_flag\000"
 12551      6C696D5F 
 12551      666C6167 
 12551      00
 12552              	.LASF260:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 279


 12553 0eb7 675F6D65 		.ascii	"g_measOld\000"
 12553      61734F6C 
 12553      6400
 12554              	.LASF252:
 12555 0ec1 726F775F 		.ascii	"row_end\000"
 12555      656E6400 
 12556              	.LASF34:
 12557 0ec9 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 12557      524F4C5F 
 12557      414E474C 
 12557      4500
 12558              	.LASF9:
 12559 0ed7 5F5F696E 		.ascii	"__int32_t\000"
 12559      7433325F 
 12559      7400
 12560              	.LASF56:
 12561 0ee1 77697265 		.ascii	"wire_disp\000"
 12561      5F646973 
 12561      7000
 12562              	.LASF287:
 12563 0eeb 63616E5F 		.ascii	"can_write\000"
 12563      77726974 
 12563      6500
 12564              	.LASF104:
 12565 0ef5 656D675F 		.ascii	"emg_max_value\000"
 12565      6D61785F 
 12565      76616C75 
 12565      6500
 12566              	.LASF88:
 12567 0f03 63757272 		.ascii	"current_limit\000"
 12567      656E745F 
 12567      6C696D69 
 12567      7400
 12568              	.LASF32:
 12569 0f11 53485F69 		.ascii	"SH_input_mode\000"
 12569      6E707574 
 12569      5F6D6F64 
 12569      6500
 12570              	.LASF156:
 12571 0f1f 4E4F4E45 		.ascii	"NONE\000"
 12571      00
 12572              	.LASF12:
 12573 0f24 75696E74 		.ascii	"uint16\000"
 12573      313600
 12574              	.LASF262:
 12575 0f2b 675F656D 		.ascii	"g_emg_measOld\000"
 12575      675F6D65 
 12575      61734F6C 
 12575      6400
 12576              	.LASF122:
 12577 0f39 72657374 		.ascii	"rest_delay\000"
 12577      5F64656C 
 12577      617900
 12578              	.LASF137:
 12579 0f44 73745F66 		.ascii	"st_filter\000"
 12579      696C7465 
 12579      7200
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccrKQI8c.s 			page 280


 12580              	.LASF215:
 12581 0f4e 76765F76 		.ascii	"vv_value\000"
 12581      616C7565 
 12581      00
 12582              	.LASF78:
 12583 0f57 6B5F645F 		.ascii	"k_d_c_dl\000"
 12583      635F646C 
 12583      00
 12584              	.LASF142:
 12585 0f60 64697265 		.ascii	"direction\000"
 12585      6374696F 
 12585      6E00
 12586              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
