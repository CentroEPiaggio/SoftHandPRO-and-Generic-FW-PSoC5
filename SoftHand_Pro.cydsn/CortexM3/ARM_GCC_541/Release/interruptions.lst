ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10462
 458 01dc 04000000 		.word	rx_queue.10466
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10464
 461 01e8 08000000 		.word	data_packet_index.10463
 462 01ec 0C000000 		.word	data_packet_buffer.10465
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 814B     		ldr	r3, .L80
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0054 7F4B     		ldr	r3, .L80+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 005c 7D4B     		ldr	r3, .L80+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0066 7C4B     		ldr	r3, .L80+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F24C82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 91010000 		.word	.L38+1
 552 0080 EF030000 		.word	.L39+1
 553 0084 EF030000 		.word	.L39+1
 554 0088 91010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 0096 7049     		ldr	r1, .L80+8
 562 0098 1346     		mov	r3, r2
 563 009a DB00     		lsls	r3, r3, #3
 564 009c 9B1A     		subs	r3, r3, r2
 565 009e 1B01     		lsls	r3, r3, #4
 566 00a0 0B44     		add	r3, r3, r1
 567 00a2 03F58873 		add	r3, r3, #272
 568 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 00a8 1A46     		mov	r2, r3
 570 00aa 6C4B     		ldr	r3, .L80+12
 571 00ac 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 572 00ae 002B     		cmp	r3, #0
 573 00b0 2BD0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 574              		.loc 1 299 0
 575 00b2 07F58843 		add	r3, r7, #17408
 576 00b6 03F15E03 		add	r3, r3, #94
 577 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 00bc 6649     		ldr	r1, .L80+8
 579 00be 1346     		mov	r3, r2
 580 00c0 DB00     		lsls	r3, r3, #3
 581 00c2 9B1A     		subs	r3, r3, r2
 582 00c4 1B01     		lsls	r3, r3, #4
 583 00c6 0B44     		add	r3, r3, r1
 584 00c8 03F58873 		add	r3, r3, #272
 585 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00ce 1846     		mov	r0, r3
 587 00d0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 588              		.loc 1 301 0
 589 00d4 07F58843 		add	r3, r7, #17408
 590 00d8 03F15E03 		add	r3, r3, #94
 591 00dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 592 00de 5E49     		ldr	r1, .L80+8
 593 00e0 1346     		mov	r3, r2
 594 00e2 DB00     		lsls	r3, r3, #3
 595 00e4 9B1A     		subs	r3, r3, r2
 596 00e6 1B01     		lsls	r3, r3, #4
 597 00e8 0B44     		add	r3, r3, r1
 598 00ea 03F58873 		add	r3, r3, #272
 599 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f0 0021     		movs	r1, #0
 601 00f2 1846     		mov	r0, r3
 602 00f4 FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 603              		.loc 1 305 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 17


 604 00f8 564B     		ldr	r3, .L80+4
 605 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 00fc 002B     		cmp	r3, #0
 607 00fe 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 608              		.loc 1 306 0
 609 0100 544B     		ldr	r3, .L80+4
 610 0102 0022     		movs	r2, #0
 611 0104 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 612              		.loc 1 307 0
 613 0106 FFF7FEFF 		bl	interrupt_manager
 614              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 615              		.loc 1 312 0
 616 010a 07F58843 		add	r3, r7, #17408
 617 010e 03F15E03 		add	r3, r3, #94
 618 0112 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 619 0114 5049     		ldr	r1, .L80+8
 620 0116 1346     		mov	r3, r2
 621 0118 DB00     		lsls	r3, r3, #3
 622 011a 9B1A     		subs	r3, r3, r2
 623 011c 1B01     		lsls	r3, r3, #4
 624 011e 0B44     		add	r3, r3, r1
 625 0120 03F58873 		add	r3, r3, #272
 626 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627 0126 1A46     		mov	r2, r3
 628 0128 4D4B     		ldr	r3, .L80+16
 629 012a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 630 012c 002B     		cmp	r3, #0
 631 012e 24D0     		beq	.L41
 313:..\src/interruptions.c ****                 motor_control_SH();
 632              		.loc 1 313 0
 633 0130 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****                 
 315:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 316:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 634              		.loc 1 316 0
 635 0134 07F58843 		add	r3, r7, #17408
 636 0138 03F15E03 		add	r3, r3, #94
 637 013c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 638 013e 4649     		ldr	r1, .L80+8
 639 0140 1346     		mov	r3, r2
 640 0142 DB00     		lsls	r3, r3, #3
 641 0144 9B1A     		subs	r3, r3, r2
 642 0146 1B01     		lsls	r3, r3, #4
 643 0148 0B44     		add	r3, r3, r1
 644 014a 03F58973 		add	r3, r3, #274
 645 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646 0150 012B     		cmp	r3, #1
 647 0152 12D1     		bne	.L41
 317:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 648              		.loc 1 317 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 18


 649 0154 07F58843 		add	r3, r7, #17408
 650 0158 03F15E03 		add	r3, r3, #94
 651 015c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 652 015e 3E49     		ldr	r1, .L80+8
 653 0160 1346     		mov	r3, r2
 654 0162 DB00     		lsls	r3, r3, #3
 655 0164 9B1A     		subs	r3, r3, r2
 656 0166 1B01     		lsls	r3, r3, #4
 657 0168 0B44     		add	r3, r3, r1
 658 016a 03F58773 		add	r3, r3, #270
 659 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 0170 002B     		cmp	r3, #0
 661 0172 02D1     		bne	.L41
 318:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 662              		.loc 1 318 0
 663 0174 3B4B     		ldr	r3, .L80+20
 664 0176 0022     		movs	r2, #0
 665 0178 1A70     		strb	r2, [r3]
 666              	.L41:
 319:..\src/interruptions.c ****                     }   
 320:..\src/interruptions.c ****                 }
 321:..\src/interruptions.c ****             }
 322:..\src/interruptions.c **** 
 323:..\src/interruptions.c ****             // Check Interrupt 
 324:..\src/interruptions.c **** 
 325:..\src/interruptions.c ****             if (interrupt_flag){
 667              		.loc 1 325 0
 668 017a 364B     		ldr	r3, .L80+4
 669 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 017e 002B     		cmp	r3, #0
 671 0180 00F0AF81 		beq	.L77
 326:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 672              		.loc 1 326 0
 673 0184 334B     		ldr	r3, .L80+4
 674 0186 0022     		movs	r2, #0
 675 0188 1A70     		strb	r2, [r3]
 327:..\src/interruptions.c ****                 interrupt_manager();
 676              		.loc 1 327 0
 677 018a FFF7FEFF 		bl	interrupt_manager
 328:..\src/interruptions.c ****             }
 329:..\src/interruptions.c ****             break;
 678              		.loc 1 329 0
 679 018e A8E1     		b	.L77
 680              	.L38:
 681              	.LBB2:
 330:..\src/interruptions.c ****             
 331:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 332:..\src/interruptions.c ****             
 333:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 334:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 682              		.loc 1 334 0
 683 0190 0023     		movs	r3, #0
 684 0192 07F58842 		add	r2, r7, #17408
 685 0196 02F15F02 		add	r2, r2, #95
 686 019a 1370     		strb	r3, [r2]
 687 019c 89E0     		b	.L43
 688              	.L48:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 19


 335:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 689              		.loc 1 335 0
 690 019e 07F58843 		add	r3, r7, #17408
 691 01a2 03F15F03 		add	r3, r3, #95
 692 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 01a8 2C4A     		ldr	r2, .L80+12
 694 01aa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 695 01ac 002B     		cmp	r3, #0
 696 01ae 75D0     		beq	.L44
 336:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 337:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 697              		.loc 1 337 0
 698 01b0 07F58843 		add	r3, r7, #17408
 699 01b4 03F15F03 		add	r3, r3, #95
 700 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 01ba 1846     		mov	r0, r3
 702 01bc FFF7FEFF 		bl	Change_CS_EncoderLine
 338:..\src/interruptions.c ****                               
 339:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 703              		.loc 1 339 0
 704 01c0 07F58843 		add	r3, r7, #17408
 705 01c4 03F15E03 		add	r3, r3, #94
 706 01c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 01ca 2349     		ldr	r1, .L80+8
 708 01cc 1346     		mov	r3, r2
 709 01ce DB00     		lsls	r3, r3, #3
 710 01d0 9B1A     		subs	r3, r3, r2
 711 01d2 1B01     		lsls	r3, r3, #4
 712 01d4 0B44     		add	r3, r3, r1
 713 01d6 03F58873 		add	r3, r3, #272
 714 01da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 715 01dc 07F58842 		add	r2, r7, #17408
 716 01e0 02F15F02 		add	r2, r2, #95
 717 01e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 718 01e6 9A42     		cmp	r2, r3
 719 01e8 0ED1     		bne	.L45
 340:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 341:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 720              		.loc 1 341 0
 721 01ea 07F58843 		add	r3, r7, #17408
 722 01ee 03F15E03 		add	r3, r3, #94
 723 01f2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 724 01f4 07F58843 		add	r3, r7, #17408
 725 01f8 03F15F03 		add	r3, r3, #95
 726 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01fe 1146     		mov	r1, r2
 728 0200 1846     		mov	r0, r3
 729 0202 FFF7FEFF 		bl	encoder_reading_SPI
 730 0206 40E0     		b	.L46
 731              	.L45:
 342:..\src/interruptions.c ****                     }
 343:..\src/interruptions.c ****                     else {
 344:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 732              		.loc 1 344 0
 733 0208 07F58843 		add	r3, r7, #17408
 734 020c 03F15D03 		add	r3, r3, #93
 735 0210 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 20


 736 0212 1149     		ldr	r1, .L80+8
 737 0214 1346     		mov	r3, r2
 738 0216 DB00     		lsls	r3, r3, #3
 739 0218 9B1A     		subs	r3, r3, r2
 740 021a 1B01     		lsls	r3, r3, #4
 741 021c 0B44     		add	r3, r3, r1
 742 021e 03F58873 		add	r3, r3, #272
 743 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 0224 07F58842 		add	r2, r7, #17408
 745 0228 02F15F02 		add	r2, r2, #95
 746 022c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 747 022e 9A42     		cmp	r2, r3
 748 0230 1AD1     		bne	.L47
 345:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 346:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 749              		.loc 1 346 0
 750 0232 07F58843 		add	r3, r7, #17408
 751 0236 03F15D03 		add	r3, r3, #93
 752 023a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 753 023c 07F58843 		add	r3, r7, #17408
 754 0240 03F15F03 		add	r3, r3, #95
 755 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 756 0246 1146     		mov	r1, r2
 757 0248 1846     		mov	r0, r3
 758 024a FFF7FEFF 		bl	encoder_reading_SPI
 759 024e 1CE0     		b	.L46
 760              	.L81:
 761              		.align	2
 762              	.L80:
 763 0250 00000000 		.word	timer_value0
 764 0254 00000000 		.word	interrupt_flag
 765 0258 00000000 		.word	c_mem
 766 025c 00000000 		.word	N_Encoder_Line_Connected
 767 0260 00000000 		.word	pos_reconstruct
 768 0264 00000000 		.word	change_ext_ref_flag
 769              	.L47:
 347:..\src/interruptions.c ****                         }
 348:..\src/interruptions.c ****                         else {
 349:..\src/interruptions.c ****                             // Get only raw encoder value
 350:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 770              		.loc 1 350 0
 771 0268 07F58843 		add	r3, r7, #17408
 772 026c 03F15F03 		add	r3, r3, #95
 773 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 0272 9E4A     		ldr	r2, .L82
 775 0274 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 776 0276 1A46     		mov	r2, r3
 777 0278 07F58843 		add	r3, r7, #17408
 778 027c 03F15F03 		add	r3, r3, #95
 779 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 780 0282 1946     		mov	r1, r3
 781 0284 1046     		mov	r0, r2
 782 0286 FFF7FEFF 		bl	ReadEncoderLine
 783              	.L46:
 351:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 352:..\src/interruptions.c ****                         }
 353:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 21


 354:..\src/interruptions.c **** 
 355:..\src/interruptions.c ****                     // Check Interrupt     
 356:..\src/interruptions.c ****                     
 357:..\src/interruptions.c ****                     if (interrupt_flag){
 784              		.loc 1 357 0
 785 028a 994B     		ldr	r3, .L82+4
 786 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 028e 002B     		cmp	r3, #0
 788 0290 04D0     		beq	.L44
 358:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 789              		.loc 1 358 0
 790 0292 974B     		ldr	r3, .L82+4
 791 0294 0022     		movs	r2, #0
 792 0296 1A70     		strb	r2, [r3]
 359:..\src/interruptions.c ****                         interrupt_manager();
 793              		.loc 1 359 0
 794 0298 FFF7FEFF 		bl	interrupt_manager
 795              	.L44:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 796              		.loc 1 334 0 discriminator 2
 797 029c 07F58843 		add	r3, r7, #17408
 798 02a0 03F15F03 		add	r3, r3, #95
 799 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 02a6 0133     		adds	r3, r3, #1
 801 02a8 07F58842 		add	r2, r7, #17408
 802 02ac 02F15F02 		add	r2, r2, #95
 803 02b0 1370     		strb	r3, [r2]
 804              	.L43:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 805              		.loc 1 334 0 is_stmt 0 discriminator 1
 806 02b2 07F58843 		add	r3, r7, #17408
 807 02b6 03F15F03 		add	r3, r3, #95
 808 02ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02bc 012B     		cmp	r3, #1
 810 02be 7FF66EAF 		bls	.L48
 811              	.LBE2:
 360:..\src/interruptions.c ****                     }
 361:..\src/interruptions.c ****                 }
 362:..\src/interruptions.c ****             } 
 363:..\src/interruptions.c ****             
 364:..\src/interruptions.c ****             //---------------------------------- Control Motor
 365:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 812              		.loc 1 365 0 is_stmt 1
 813 02c2 07F58843 		add	r3, r7, #17408
 814 02c6 03F15E03 		add	r3, r3, #94
 815 02ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 816 02cc 8949     		ldr	r1, .L82+8
 817 02ce 1346     		mov	r3, r2
 818 02d0 DB00     		lsls	r3, r3, #3
 819 02d2 9B1A     		subs	r3, r3, r2
 820 02d4 1B01     		lsls	r3, r3, #4
 821 02d6 0B44     		add	r3, r3, r1
 822 02d8 03F58873 		add	r3, r3, #272
 823 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 02de 1A46     		mov	r2, r3
 825 02e0 854B     		ldr	r3, .L82+12
 826 02e2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 22


 827 02e4 002B     		cmp	r3, #0
 828 02e6 2AD0     		beq	.L49
 366:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 367:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 829              		.loc 1 367 0
 830 02e8 07F58843 		add	r3, r7, #17408
 831 02ec 03F15E03 		add	r3, r3, #94
 832 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 02f2 1846     		mov	r0, r3
 834 02f4 FFF7FEFF 		bl	motor_control_generic
 368:..\src/interruptions.c ****                 
 369:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 835              		.loc 1 370 0
 836 02f8 07F58843 		add	r3, r7, #17408
 837 02fc 03F15E03 		add	r3, r3, #94
 838 0300 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 839 0302 7C49     		ldr	r1, .L82+8
 840 0304 1346     		mov	r3, r2
 841 0306 DB00     		lsls	r3, r3, #3
 842 0308 9B1A     		subs	r3, r3, r2
 843 030a 1B01     		lsls	r3, r3, #4
 844 030c 0B44     		add	r3, r3, r1
 845 030e 03F58973 		add	r3, r3, #274
 846 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847 0314 012B     		cmp	r3, #1
 848 0316 12D1     		bne	.L49
 371:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 849              		.loc 1 371 0
 850 0318 07F58843 		add	r3, r7, #17408
 851 031c 03F15E03 		add	r3, r3, #94
 852 0320 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 853 0322 7449     		ldr	r1, .L82+8
 854 0324 1346     		mov	r3, r2
 855 0326 DB00     		lsls	r3, r3, #3
 856 0328 9B1A     		subs	r3, r3, r2
 857 032a 1B01     		lsls	r3, r3, #4
 858 032c 0B44     		add	r3, r3, r1
 859 032e 03F58773 		add	r3, r3, #270
 860 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 861 0334 002B     		cmp	r3, #0
 862 0336 02D1     		bne	.L49
 372:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 863              		.loc 1 372 0
 864 0338 704B     		ldr	r3, .L82+16
 865 033a 0022     		movs	r2, #0
 866 033c 1A70     		strb	r2, [r3]
 867              	.L49:
 373:..\src/interruptions.c ****                     }   
 374:..\src/interruptions.c ****                 }
 375:..\src/interruptions.c ****                      
 376:..\src/interruptions.c ****                 
 377:..\src/interruptions.c ****             }
 378:..\src/interruptions.c ****             
 379:..\src/interruptions.c ****             // Check Interrupt 
 380:..\src/interruptions.c **** 
 381:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 23


 868              		.loc 1 381 0
 869 033e 6C4B     		ldr	r3, .L82+4
 870 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 871 0342 002B     		cmp	r3, #0
 872 0344 04D0     		beq	.L50
 382:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 873              		.loc 1 382 0
 874 0346 6A4B     		ldr	r3, .L82+4
 875 0348 0022     		movs	r2, #0
 876 034a 1A70     		strb	r2, [r3]
 383:..\src/interruptions.c ****                 interrupt_manager();
 877              		.loc 1 383 0
 878 034c FFF7FEFF 		bl	interrupt_manager
 879              	.L50:
 384:..\src/interruptions.c ****             }
 385:..\src/interruptions.c ****             
 386:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 387:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 880              		.loc 1 387 0
 881 0350 684B     		ldr	r3, .L82+8
 882 0352 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 883 0356 012B     		cmp	r3, #1
 884 0358 40F0C580 		bne	.L78
 388:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 885              		.loc 1 388 0
 886 035c 07F58843 		add	r3, r7, #17408
 887 0360 03F15D03 		add	r3, r3, #93
 888 0364 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 889 0366 6349     		ldr	r1, .L82+8
 890 0368 1346     		mov	r3, r2
 891 036a DB00     		lsls	r3, r3, #3
 892 036c 9B1A     		subs	r3, r3, r2
 893 036e 1B01     		lsls	r3, r3, #4
 894 0370 0B44     		add	r3, r3, r1
 895 0372 03F58873 		add	r3, r3, #272
 896 0376 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0378 1A46     		mov	r2, r3
 898 037a 5F4B     		ldr	r3, .L82+12
 899 037c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 900 037e 002B     		cmp	r3, #0
 901 0380 2AD0     		beq	.L52
 389:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 902              		.loc 1 389 0
 903 0382 07F58843 		add	r3, r7, #17408
 904 0386 03F15D03 		add	r3, r3, #93
 905 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 038c 1846     		mov	r0, r3
 907 038e FFF7FEFF 		bl	motor_control_generic
 390:..\src/interruptions.c ****                     
 391:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 392:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 908              		.loc 1 392 0
 909 0392 07F58843 		add	r3, r7, #17408
 910 0396 03F15D03 		add	r3, r3, #93
 911 039a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 912 039c 5549     		ldr	r1, .L82+8
 913 039e 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 24


 914 03a0 DB00     		lsls	r3, r3, #3
 915 03a2 9B1A     		subs	r3, r3, r2
 916 03a4 1B01     		lsls	r3, r3, #4
 917 03a6 0B44     		add	r3, r3, r1
 918 03a8 03F58973 		add	r3, r3, #274
 919 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 920 03ae 012B     		cmp	r3, #1
 921 03b0 12D1     		bne	.L52
 393:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 922              		.loc 1 393 0
 923 03b2 07F58843 		add	r3, r7, #17408
 924 03b6 03F15D03 		add	r3, r3, #93
 925 03ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 926 03bc 4D49     		ldr	r1, .L82+8
 927 03be 1346     		mov	r3, r2
 928 03c0 DB00     		lsls	r3, r3, #3
 929 03c2 9B1A     		subs	r3, r3, r2
 930 03c4 1B01     		lsls	r3, r3, #4
 931 03c6 0B44     		add	r3, r3, r1
 932 03c8 03F58773 		add	r3, r3, #270
 933 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934 03ce 002B     		cmp	r3, #0
 935 03d0 02D1     		bne	.L52
 394:..\src/interruptions.c ****                             change_ext_ref_flag = FALSE;
 936              		.loc 1 394 0
 937 03d2 4A4B     		ldr	r3, .L82+16
 938 03d4 0022     		movs	r2, #0
 939 03d6 1A70     		strb	r2, [r3]
 940              	.L52:
 395:..\src/interruptions.c ****                         }   
 396:..\src/interruptions.c ****                     }
 397:..\src/interruptions.c ****                     
 398:..\src/interruptions.c ****                   
 399:..\src/interruptions.c ****                 }
 400:..\src/interruptions.c ****                 // Check Interrupt 
 401:..\src/interruptions.c **** 
 402:..\src/interruptions.c ****                 if (interrupt_flag){
 941              		.loc 1 402 0
 942 03d8 454B     		ldr	r3, .L82+4
 943 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 03dc 002B     		cmp	r3, #0
 945 03de 00F08280 		beq	.L78
 403:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 946              		.loc 1 403 0
 947 03e2 434B     		ldr	r3, .L82+4
 948 03e4 0022     		movs	r2, #0
 949 03e6 1A70     		strb	r2, [r3]
 404:..\src/interruptions.c ****                     interrupt_manager();
 950              		.loc 1 404 0
 951 03e8 FFF7FEFF 		bl	interrupt_manager
 405:..\src/interruptions.c ****                 }
 406:..\src/interruptions.c ****             }  
 407:..\src/interruptions.c ****             break;
 952              		.loc 1 407 0
 953 03ec 7BE0     		b	.L78
 954              	.L39:
 408:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 25


 409:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 410:..\src/interruptions.c ****             
 411:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 412:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 955              		.loc 1 412 0
 956 03ee 444B     		ldr	r3, .L82+20
 957 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 958 03f2 002B     		cmp	r3, #0
 959 03f4 38D0     		beq	.L53
 960              		.loc 1 412 0 is_stmt 0 discriminator 1
 961 03f6 3F4B     		ldr	r3, .L82+8
 962 03f8 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 963 03fc 002B     		cmp	r3, #0
 964 03fe 33D0     		beq	.L53
 413:..\src/interruptions.c ****                 
 414:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 965              		.loc 1 414 0 is_stmt 1
 966 0400 3C4B     		ldr	r3, .L82+8
 967 0402 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 968 0406 022B     		cmp	r3, #2
 969 0408 08D1     		bne	.L54
 415:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 970              		.loc 1 415 0
 971 040a 07F58843 		add	r3, r7, #17408
 972 040e 03F15D03 		add	r3, r3, #93
 973 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 0414 1846     		mov	r0, r3
 975 0416 FFF7FEFF 		bl	air_chambers_control
 976 041a 07E0     		b	.L55
 977              	.L54:
 416:..\src/interruptions.c ****                 }
 417:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 418:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 978              		.loc 1 418 0
 979 041c 07F58843 		add	r3, r7, #17408
 980 0420 03F15D03 		add	r3, r3, #93
 981 0424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 0426 1846     		mov	r0, r3
 983 0428 FFF7FEFF 		bl	otbk_act_wrist_control
 984              	.L55:
 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c **** 
 421:..\src/interruptions.c ****                 // Check Interrupt 
 422:..\src/interruptions.c **** 
 423:..\src/interruptions.c ****                 if (interrupt_flag){
 985              		.loc 1 423 0
 986 042c 304B     		ldr	r3, .L82+4
 987 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0430 002B     		cmp	r3, #0
 989 0432 04D0     		beq	.L56
 424:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 990              		.loc 1 424 0
 991 0434 2E4B     		ldr	r3, .L82+4
 992 0436 0022     		movs	r2, #0
 993 0438 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****                     interrupt_manager();
 994              		.loc 1 425 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 26


 995 043a FFF7FEFF 		bl	interrupt_manager
 996              	.L56:
 426:..\src/interruptions.c ****                 }
 427:..\src/interruptions.c ****             
 428:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 997              		.loc 1 428 0
 998 043e 2D4B     		ldr	r3, .L82+8
 999 0440 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 1000 0444 07F58843 		add	r3, r7, #17408
 1001 0448 03F15D03 		add	r3, r3, #93
 1002 044c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 044e 1146     		mov	r1, r2
 1004 0450 1846     		mov	r0, r3
 1005 0452 FFF7FEFF 		bl	drive_slave
 429:..\src/interruptions.c ****             
 430:..\src/interruptions.c ****                 // Check Interrupt 
 431:..\src/interruptions.c **** 
 432:..\src/interruptions.c ****                 if (interrupt_flag){
 1006              		.loc 1 432 0
 1007 0456 264B     		ldr	r3, .L82+4
 1008 0458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 045a 002B     		cmp	r3, #0
 1010 045c 04D0     		beq	.L53
 433:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1011              		.loc 1 433 0
 1012 045e 244B     		ldr	r3, .L82+4
 1013 0460 0022     		movs	r2, #0
 1014 0462 1A70     		strb	r2, [r3]
 434:..\src/interruptions.c ****                     interrupt_manager();
 1015              		.loc 1 434 0
 1016 0464 FFF7FEFF 		bl	interrupt_manager
 1017              	.L53:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****             }
 437:..\src/interruptions.c ****             if (!master_mode){
 1018              		.loc 1 437 0
 1019 0468 254B     		ldr	r3, .L82+20
 1020 046a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 046c 002B     		cmp	r3, #0
 1022 046e 11D1     		bne	.L57
 438:..\src/interruptions.c ****                 
 439:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 1023              		.loc 1 439 0
 1024 0470 204B     		ldr	r3, .L82+8
 1025 0472 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 1026 0476 002B     		cmp	r3, #0
 1027 0478 01D0     		beq	.L58
 440:..\src/interruptions.c ****                     // Stop feedback motors
 441:..\src/interruptions.c ****                     stop_master_device();
 1028              		.loc 1 441 0
 1029 047a FFF7FEFF 		bl	stop_master_device
 1030              	.L58:
 442:..\src/interruptions.c ****                 }
 443:..\src/interruptions.c ****                 // Disable slave or motors
 444:..\src/interruptions.c ****                 deactivate_slaves();
 1031              		.loc 1 444 0
 1032 047e FFF7FEFF 		bl	deactivate_slaves
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 27


 445:..\src/interruptions.c ****                         
 446:..\src/interruptions.c ****                 // Check Interrupt 
 447:..\src/interruptions.c ****                 if (interrupt_flag){
 1033              		.loc 1 447 0
 1034 0482 1B4B     		ldr	r3, .L82+4
 1035 0484 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0486 002B     		cmp	r3, #0
 1037 0488 04D0     		beq	.L57
 448:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1038              		.loc 1 448 0
 1039 048a 194B     		ldr	r3, .L82+4
 1040 048c 0022     		movs	r2, #0
 1041 048e 1A70     		strb	r2, [r3]
 449:..\src/interruptions.c ****                     interrupt_manager();
 1042              		.loc 1 449 0
 1043 0490 FFF7FEFF 		bl	interrupt_manager
 1044              	.L57:
 450:..\src/interruptions.c ****                 } 
 451:..\src/interruptions.c ****             }
 452:..\src/interruptions.c ****     
 453:..\src/interruptions.c ****             // Control Master device main motor 
 454:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 455:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1045              		.loc 1 455 0
 1046 0494 07F58843 		add	r3, r7, #17408
 1047 0498 03F15E03 		add	r3, r3, #94
 1048 049c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049 049e 1846     		mov	r0, r3
 1050 04a0 FFF7FEFF 		bl	motor_control_generic
 456:..\src/interruptions.c ****                         
 457:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 458:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1051              		.loc 1 458 0
 1052 04a4 134B     		ldr	r3, .L82+8
 1053 04a6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1054 04aa 032B     		cmp	r3, #3
 1055 04ac 0FD1     		bne	.L59
 459:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1056              		.loc 1 459 0
 1057 04ae 154B     		ldr	r3, .L82+24
 1058 04b0 9B68     		ldr	r3, [r3, #8]
 1059 04b2 432B     		cmp	r3, #67
 1060 04b4 02DD     		ble	.L60
 460:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1061              		.loc 1 460 0
 1062 04b6 134B     		ldr	r3, .L82+24
 1063 04b8 4322     		movs	r2, #67
 1064 04ba 9A60     		str	r2, [r3, #8]
 1065              	.L60:
 461:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1066              		.loc 1 461 0
 1067 04bc 114B     		ldr	r3, .L82+24
 1068 04be 9B68     		ldr	r3, [r3, #8]
 1069 04c0 13F1430F 		cmn	r3, #67
 1070 04c4 03DA     		bge	.L59
 462:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1071              		.loc 1 462 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 28


 1072 04c6 0F4B     		ldr	r3, .L82+24
 1073 04c8 6FF04202 		mvn	r2, #66
 1074 04cc 9A60     		str	r2, [r3, #8]
 1075              	.L59:
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             // Check Interrupt 
 466:..\src/interruptions.c **** 
 467:..\src/interruptions.c ****             if (interrupt_flag){
 1076              		.loc 1 467 0
 1077 04ce 084B     		ldr	r3, .L82+4
 1078 04d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 04d2 002B     		cmp	r3, #0
 1080 04d4 18D0     		beq	.L79
 468:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1081              		.loc 1 468 0
 1082 04d6 064B     		ldr	r3, .L82+4
 1083 04d8 0022     		movs	r2, #0
 1084 04da 1A70     		strb	r2, [r3]
 469:..\src/interruptions.c ****                 interrupt_manager();
 1085              		.loc 1 469 0
 1086 04dc FFF7FEFF 		bl	interrupt_manager
 470:..\src/interruptions.c ****             }
 471:..\src/interruptions.c ****             
 472:..\src/interruptions.c ****             break;
 1087              		.loc 1 472 0
 1088 04e0 12E0     		b	.L79
 1089              	.L77:
 329:..\src/interruptions.c ****             
 1090              		.loc 1 329 0
 1091 04e2 00BF     		nop
 1092 04e4 11E0     		b	.L35
 1093              	.L78:
 407:..\src/interruptions.c ****             
 1094              		.loc 1 407 0
 1095 04e6 00BF     		nop
 1096 04e8 0FE0     		b	.L35
 1097              	.L83:
 1098 04ea 00BF     		.align	2
 1099              	.L82:
 1100 04ec 00000000 		.word	N_Encoder_Line_Connected
 1101 04f0 00000000 		.word	interrupt_flag
 1102 04f4 00000000 		.word	c_mem
 1103 04f8 00000000 		.word	pos_reconstruct
 1104 04fc 00000000 		.word	change_ext_ref_flag
 1105 0500 00000000 		.word	master_mode
 1106 0504 00000000 		.word	g_refNew
 1107              	.L79:
 1108              		.loc 1 472 0
 1109 0508 00BF     		nop
 1110              	.L35:
 473:..\src/interruptions.c ****     }
 474:..\src/interruptions.c **** 
 475:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     analog_read_end();
 1111              		.loc 1 477 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 29


 1112 050a FFF7FEFF 		bl	analog_read_end
 478:..\src/interruptions.c **** 
 479:..\src/interruptions.c ****     if (interrupt_flag){
 1113              		.loc 1 479 0
 1114 050e AB4B     		ldr	r3, .L84
 1115 0510 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1116 0512 002B     		cmp	r3, #0
 1117 0514 04D0     		beq	.L62
 480:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1118              		.loc 1 480 0
 1119 0516 A94B     		ldr	r3, .L84
 1120 0518 0022     		movs	r2, #0
 1121 051a 1A70     		strb	r2, [r3]
 481:..\src/interruptions.c ****         interrupt_manager();
 1122              		.loc 1 481 0
 1123 051c FFF7FEFF 		bl	interrupt_manager
 1124              	.L62:
 482:..\src/interruptions.c ****     }
 483:..\src/interruptions.c **** 
 484:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 485:..\src/interruptions.c **** 
 486:..\src/interruptions.c ****     overcurrent_control();
 1125              		.loc 1 486 0
 1126 0520 FFF7FEFF 		bl	overcurrent_control
 487:..\src/interruptions.c ****     
 488:..\src/interruptions.c ****     // Check Interrupt 
 489:..\src/interruptions.c ****     
 490:..\src/interruptions.c ****     if (interrupt_flag){
 1127              		.loc 1 490 0
 1128 0524 A54B     		ldr	r3, .L84
 1129 0526 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0528 002B     		cmp	r3, #0
 1131 052a 04D0     		beq	.L63
 491:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1132              		.loc 1 491 0
 1133 052c A34B     		ldr	r3, .L84
 1134 052e 0022     		movs	r2, #0
 1135 0530 1A70     		strb	r2, [r3]
 492:..\src/interruptions.c ****         interrupt_manager();
 1136              		.loc 1 492 0
 1137 0532 FFF7FEFF 		bl	interrupt_manager
 1138              	.L63:
 493:..\src/interruptions.c ****     }
 494:..\src/interruptions.c **** 
 495:..\src/interruptions.c ****     //---------------------------------- Calibration 
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 498:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1139              		.loc 1 498 0
 1140 0536 A24B     		ldr	r3, .L84+4
 1141 0538 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 053a 012B     		cmp	r3, #1
 1143 053c 0ED1     		bne	.L64
 499:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1144              		.loc 1 499 0
 1145 053e A14B     		ldr	r3, .L84+8
 1146 0540 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 30


 1147 0542 0A2B     		cmp	r3, #10
 1148 0544 04D1     		bne	.L65
 500:..\src/interruptions.c ****             calibration();
 1149              		.loc 1 500 0
 1150 0546 FFF7FEFF 		bl	calibration
 501:..\src/interruptions.c ****             counter_calibration = 0;
 1151              		.loc 1 501 0
 1152 054a 9E4B     		ldr	r3, .L84+8
 1153 054c 0022     		movs	r2, #0
 1154 054e 1A80     		strh	r2, [r3]	@ movhi
 1155              	.L65:
 502:..\src/interruptions.c ****         }
 503:..\src/interruptions.c ****         counter_calibration++;
 1156              		.loc 1 503 0
 1157 0550 9C4B     		ldr	r3, .L84+8
 1158 0552 1B88     		ldrh	r3, [r3]
 1159 0554 0133     		adds	r3, r3, #1
 1160 0556 9AB2     		uxth	r2, r3
 1161 0558 9A4B     		ldr	r3, .L84+8
 1162 055a 1A80     		strh	r2, [r3]	@ movhi
 1163              	.L64:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c **** 
 506:..\src/interruptions.c ****     // Check Interrupt 
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****     if (interrupt_flag){
 1164              		.loc 1 508 0
 1165 055c 974B     		ldr	r3, .L84
 1166 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 0560 002B     		cmp	r3, #0
 1168 0562 04D0     		beq	.L66
 509:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1169              		.loc 1 509 0
 1170 0564 954B     		ldr	r3, .L84
 1171 0566 0022     		movs	r2, #0
 1172 0568 1A70     		strb	r2, [r3]
 510:..\src/interruptions.c ****         interrupt_manager();
 1173              		.loc 1 510 0
 1174 056a FFF7FEFF 		bl	interrupt_manager
 1175              	.L66:
 511:..\src/interruptions.c ****     }
 512:..\src/interruptions.c ****     
 513:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1176              		.loc 1 513 0
 1177 056e 964B     		ldr	r3, .L84+12
 1178 0570 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1179 0574 002B     		cmp	r3, #0
 1180 0576 1CD1     		bne	.L67
 514:..\src/interruptions.c ****     
 515:..\src/interruptions.c ****         //---------------------------------- Rest position check
 516:..\src/interruptions.c **** 
 517:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 518:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1181              		.loc 1 518 0
 1182 0578 934B     		ldr	r3, .L84+12
 1183 057a 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1184 057e 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 31


 1185 0580 17D1     		bne	.L67
 519:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1186              		.loc 1 519 0
 1187 0582 904B     		ldr	r3, .L84+8
 1188 0584 1B88     		ldrh	r3, [r3]
 1189 0586 0A2B     		cmp	r3, #10
 1190 0588 04D1     		bne	.L68
 520:..\src/interruptions.c ****                     check_rest_position();
 1191              		.loc 1 520 0
 1192 058a FFF7FEFF 		bl	check_rest_position
 521:..\src/interruptions.c ****                     counter_calibration = 0;
 1193              		.loc 1 521 0
 1194 058e 8D4B     		ldr	r3, .L84+8
 1195 0590 0022     		movs	r2, #0
 1196 0592 1A80     		strh	r2, [r3]	@ movhi
 1197              	.L68:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****             counter_calibration++;
 1198              		.loc 1 523 0
 1199 0594 8B4B     		ldr	r3, .L84+8
 1200 0596 1B88     		ldrh	r3, [r3]
 1201 0598 0133     		adds	r3, r3, #1
 1202 059a 9AB2     		uxth	r2, r3
 1203 059c 894B     		ldr	r3, .L84+8
 1204 059e 1A80     		strh	r2, [r3]	@ movhi
 524:..\src/interruptions.c **** 
 525:..\src/interruptions.c ****             // Check Interrupt     
 526:..\src/interruptions.c ****             if (interrupt_flag){
 1205              		.loc 1 526 0
 1206 05a0 864B     		ldr	r3, .L84
 1207 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 05a4 002B     		cmp	r3, #0
 1209 05a6 04D0     		beq	.L67
 527:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1210              		.loc 1 527 0
 1211 05a8 844B     		ldr	r3, .L84
 1212 05aa 0022     		movs	r2, #0
 1213 05ac 1A70     		strb	r2, [r3]
 528:..\src/interruptions.c ****                 interrupt_manager();
 1214              		.loc 1 528 0
 1215 05ae FFF7FEFF 		bl	interrupt_manager
 1216              	.L67:
 529:..\src/interruptions.c ****             }
 530:..\src/interruptions.c ****         }
 531:..\src/interruptions.c ****         
 532:..\src/interruptions.c ****     }
 533:..\src/interruptions.c ****     
 534:..\src/interruptions.c ****      
 535:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 536:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1217              		.loc 1 536 0
 1218 05b2 854B     		ldr	r3, .L84+12
 1219 05b4 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1220 05b8 002B     		cmp	r3, #0
 1221 05ba 0AD0     		beq	.L69
 537:..\src/interruptions.c ****         
 538:..\src/interruptions.c ****         update_EMG_history();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 32


 1222              		.loc 1 538 0
 1223 05bc FFF7FEFF 		bl	update_EMG_history
 539:..\src/interruptions.c **** 
 540:..\src/interruptions.c ****         // Check Interrupt 
 541:..\src/interruptions.c **** 
 542:..\src/interruptions.c ****         if (interrupt_flag){
 1224              		.loc 1 542 0
 1225 05c0 7E4B     		ldr	r3, .L84
 1226 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1227 05c4 002B     		cmp	r3, #0
 1228 05c6 04D0     		beq	.L69
 543:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1229              		.loc 1 543 0
 1230 05c8 7C4B     		ldr	r3, .L84
 1231 05ca 0022     		movs	r2, #0
 1232 05cc 1A70     		strb	r2, [r3]
 544:..\src/interruptions.c ****             interrupt_manager();
 1233              		.loc 1 544 0
 1234 05ce FFF7FEFF 		bl	interrupt_manager
 1235              	.L69:
 545:..\src/interruptions.c ****         }
 546:..\src/interruptions.c ****     }
 547:..\src/interruptions.c **** 
 548:..\src/interruptions.c ****     
 549:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1236              		.loc 1 551 0
 1237 05d2 7D4B     		ldr	r3, .L84+12
 1238 05d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1239 05d8 1A46     		mov	r2, r3
 1240 05da 7C4B     		ldr	r3, .L84+16
 1241 05dc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1242 05de 002B     		cmp	r3, #0
 1243 05e0 01D0     		beq	.L70
 552:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 1244              		.loc 1 552 0
 1245 05e2 FFF7FEFF 		bl	cycles_counter_update
 1246              	.L70:
 553:..\src/interruptions.c ****     }
 554:..\src/interruptions.c **** 
 555:..\src/interruptions.c ****     // Check Cycles Interrupt 
 556:..\src/interruptions.c ****     
 557:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1247              		.loc 1 557 0
 1248 05e6 7A4B     		ldr	r3, .L84+20
 1249 05e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 05ea 002B     		cmp	r3, #0
 1251 05ec 5BD0     		beq	.L71
 558:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1252              		.loc 1 558 0
 1253 05ee 784B     		ldr	r3, .L84+20
 1254 05f0 0022     		movs	r2, #0
 1255 05f2 1A70     		strb	r2, [r3]
 559:..\src/interruptions.c **** 
 560:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 561:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 33


 562:..\src/interruptions.c ****         if(can_write) {
 1256              		.loc 1 562 0
 1257 05f4 774B     		ldr	r3, .L84+24
 1258 05f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1259 05f8 002B     		cmp	r3, #0
 1260 05fa 54D0     		beq	.L71
 563:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1261              		.loc 1 563 0
 1262 05fc 764B     		ldr	r3, .L84+28
 1263 05fe 0022     		movs	r2, #0
 1264 0600 1A70     		strb	r2, [r3]
 564:..\src/interruptions.c ****             
 565:..\src/interruptions.c ****             //Update time variable
 566:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 1265              		.loc 1 566 0
 1266 0602 764B     		ldr	r3, .L84+32
 1267 0604 9B6D     		ldr	r3, [r3, #88]
 1268 0606 7833     		adds	r3, r3, #120
 1269 0608 744A     		ldr	r2, .L84+32
 1270 060a 9365     		str	r3, [r2, #88]
 567:..\src/interruptions.c ****             
 568:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1271              		.loc 1 568 0
 1272 060c 6E4B     		ldr	r3, .L84+12
 1273 060e 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1274 0612 012B     		cmp	r3, #1
 1275 0614 47D1     		bne	.L71
 569:..\src/interruptions.c ****                 
 570:..\src/interruptions.c ****                 store_RTC_current_time();
 1276              		.loc 1 570 0
 1277 0616 FFF7FEFF 		bl	store_RTC_current_time
 571:..\src/interruptions.c ****                 
 572:..\src/interruptions.c ****                 //Write in SD card
 573:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1278              		.loc 1 573 0
 1279 061a 07F56A53 		add	r3, r7, #14976
 1280 061e 03F11803 		add	r3, r3, #24
 1281 0622 1846     		mov	r0, r3
 1282 0624 FFF7FEFF 		bl	prepare_SD_info
 574:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1283              		.loc 1 574 0
 1284 0628 6D4B     		ldr	r3, .L84+36
 1285 062a 1C68     		ldr	r4, [r3]
 1286 062c 07F56A53 		add	r3, r7, #14976
 1287 0630 03F11803 		add	r3, r3, #24
 1288 0634 1846     		mov	r0, r3
 1289 0636 FFF7FEFF 		bl	strlen
 1290 063a 0246     		mov	r2, r0
 1291 063c 07F56A53 		add	r3, r7, #14976
 1292 0640 03F11803 		add	r3, r3, #24
 1293 0644 1946     		mov	r1, r3
 1294 0646 2046     		mov	r0, r4
 1295 0648 FFF7FEFF 		bl	FS_Write
 575:..\src/interruptions.c ****                 
 576:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1296              		.loc 1 576 0
 1297 064c 5E4B     		ldr	r3, .L84+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 34


 1298 064e 93F83432 		ldrb	r3, [r3, #564]	@ zero_extendqisi2
 1299 0652 002B     		cmp	r3, #0
 1300 0654 27D0     		beq	.L71
 1301              	.LBB3:
 577:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1302              		.loc 1 577 0
 1303 0656 07F16003 		add	r3, r7, #96
 1304 065a 603B     		subs	r3, r3, #96
 1305 065c 0022     		movs	r2, #0
 1306 065e 1A60     		str	r2, [r3]
 1307 0660 0433     		adds	r3, r3, #4
 1308 0662 43F69422 		movw	r2, #14996
 1309 0666 0021     		movs	r1, #0
 1310 0668 1846     		mov	r0, r3
 1311 066a FFF7FEFF 		bl	memset
 578:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1312              		.loc 1 578 0
 1313 066e 5D4B     		ldr	r3, .L84+40
 1314 0670 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1315 0672 07F16003 		add	r3, r7, #96
 1316 0676 603B     		subs	r3, r3, #96
 1317 0678 1A70     		strb	r2, [r3]
 579:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1318              		.loc 1 579 0
 1319 067a 07F16003 		add	r3, r7, #96
 1320 067e 603B     		subs	r3, r3, #96
 1321 0680 1846     		mov	r0, r3
 1322 0682 FFF7FEFF 		bl	prepare_SD_EMG_history
 580:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1323              		.loc 1 580 0
 1324 0686 584B     		ldr	r3, .L84+44
 1325 0688 1C68     		ldr	r4, [r3]
 1326 068a 07F16003 		add	r3, r7, #96
 1327 068e 603B     		subs	r3, r3, #96
 1328 0690 1846     		mov	r0, r3
 1329 0692 FFF7FEFF 		bl	strlen
 1330 0696 0246     		mov	r2, r0
 1331 0698 07F16003 		add	r3, r7, #96
 1332 069c 603B     		subs	r3, r3, #96
 1333 069e 1946     		mov	r1, r3
 1334 06a0 2046     		mov	r0, r4
 1335 06a2 FFF7FEFF 		bl	FS_Write
 1336              	.L71:
 1337              	.LBE3:
 581:..\src/interruptions.c ****                 }
 582:..\src/interruptions.c ****             }
 583:..\src/interruptions.c ****         }
 584:..\src/interruptions.c ****     }
 585:..\src/interruptions.c ****     
 586:..\src/interruptions.c ****     // Check Interrupt 
 587:..\src/interruptions.c ****     
 588:..\src/interruptions.c ****     if (interrupt_flag){
 1338              		.loc 1 588 0
 1339 06a6 454B     		ldr	r3, .L84
 1340 06a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1341 06aa 002B     		cmp	r3, #0
 1342 06ac 04D0     		beq	.L72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 35


 589:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1343              		.loc 1 589 0
 1344 06ae 434B     		ldr	r3, .L84
 1345 06b0 0022     		movs	r2, #0
 1346 06b2 1A70     		strb	r2, [r3]
 590:..\src/interruptions.c ****         interrupt_manager();
 1347              		.loc 1 590 0
 1348 06b4 FFF7FEFF 		bl	interrupt_manager
 1349              	.L72:
 591:..\src/interruptions.c ****     }
 592:..\src/interruptions.c ****     
 593:..\src/interruptions.c ****     
 594:..\src/interruptions.c ****     //---------------------------------- Check battery
 595:..\src/interruptions.c **** 
 596:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 597:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1350              		.loc 1 597 0
 1351 06b8 4C4B     		ldr	r3, .L84+48
 1352 06ba 1B88     		ldrh	r3, [r3]
 1353 06bc 0A2B     		cmp	r3, #10
 1354 06be 04D1     		bne	.L73
 598:..\src/interruptions.c ****         battery_management();   
 1355              		.loc 1 598 0
 1356 06c0 FFF7FEFF 		bl	battery_management
 599:..\src/interruptions.c ****         counter_tension_func = 0;
 1357              		.loc 1 599 0
 1358 06c4 494B     		ldr	r3, .L84+48
 1359 06c6 0022     		movs	r2, #0
 1360 06c8 1A80     		strh	r2, [r3]	@ movhi
 1361              	.L73:
 600:..\src/interruptions.c ****     }
 601:..\src/interruptions.c ****     counter_tension_func++;
 1362              		.loc 1 601 0
 1363 06ca 484B     		ldr	r3, .L84+48
 1364 06cc 1B88     		ldrh	r3, [r3]
 1365 06ce 0133     		adds	r3, r3, #1
 1366 06d0 9AB2     		uxth	r2, r3
 1367 06d2 464B     		ldr	r3, .L84+48
 1368 06d4 1A80     		strh	r2, [r3]	@ movhi
 602:..\src/interruptions.c **** 
 603:..\src/interruptions.c ****     // Check Interrupt 
 604:..\src/interruptions.c ****     
 605:..\src/interruptions.c ****     if (interrupt_flag){
 1369              		.loc 1 605 0
 1370 06d6 394B     		ldr	r3, .L84
 1371 06d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 06da 002B     		cmp	r3, #0
 1373 06dc 04D0     		beq	.L74
 606:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1374              		.loc 1 606 0
 1375 06de 374B     		ldr	r3, .L84
 1376 06e0 0022     		movs	r2, #0
 1377 06e2 1A70     		strb	r2, [r3]
 607:..\src/interruptions.c ****         interrupt_manager();
 1378              		.loc 1 607 0
 1379 06e4 FFF7FEFF 		bl	interrupt_manager
 1380              	.L74:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 36


 608:..\src/interruptions.c ****     }
 609:..\src/interruptions.c ****    
 610:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 611:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1381              		.loc 1 611 0
 1382 06e8 374B     		ldr	r3, .L84+12
 1383 06ea 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1384 06ee 002B     		cmp	r3, #0
 1385 06f0 0AD0     		beq	.L75
 612:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1386              		.loc 1 612 0
 1387 06f2 FFF7FEFF 		bl	ReadAllIMUs
 613:..\src/interruptions.c ****         
 614:..\src/interruptions.c ****         if (interrupt_flag){
 1388              		.loc 1 614 0
 1389 06f6 314B     		ldr	r3, .L84
 1390 06f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1391 06fa 002B     		cmp	r3, #0
 1392 06fc 04D0     		beq	.L75
 615:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1393              		.loc 1 615 0
 1394 06fe 2F4B     		ldr	r3, .L84
 1395 0700 0022     		movs	r2, #0
 1396 0702 1A70     		strb	r2, [r3]
 616:..\src/interruptions.c ****             interrupt_manager();
 1397              		.loc 1 616 0
 1398 0704 FFF7FEFF 		bl	interrupt_manager
 1399              	.L75:
 617:..\src/interruptions.c ****         }
 618:..\src/interruptions.c ****     }
 619:..\src/interruptions.c ****    
 620:..\src/interruptions.c ****     //---------------------------------- Update States
 621:..\src/interruptions.c ****     
 622:..\src/interruptions.c ****     // Load k-1 state
 623:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1400              		.loc 1 623 0
 1401 0708 394A     		ldr	r2, .L84+52
 1402 070a 3A4B     		ldr	r3, .L84+56
 1403 070c 1446     		mov	r4, r2
 1404 070e 1D46     		mov	r5, r3
 1405 0710 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1406 0712 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1407 0714 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1408 0716 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1409 0718 95E80300 		ldmia	r5, {r0, r1}
 1410 071c 84E80300 		stmia	r4, {r0, r1}
 624:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1411              		.loc 1 624 0
 1412 0720 354A     		ldr	r2, .L84+60
 1413 0722 364B     		ldr	r3, .L84+64
 1414 0724 1046     		mov	r0, r2
 1415 0726 1946     		mov	r1, r3
 1416 0728 6823     		movs	r3, #104
 1417 072a 1A46     		mov	r2, r3
 1418 072c FFF7FEFF 		bl	memcpy
 625:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1419              		.loc 1 625 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 37


 1420 0730 334A     		ldr	r2, .L84+68
 1421 0732 344B     		ldr	r3, .L84+72
 1422 0734 1446     		mov	r4, r2
 1423 0736 1D46     		mov	r5, r3
 1424 0738 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1425 073a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1426 073c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1427 0740 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 626:..\src/interruptions.c **** 
 627:..\src/interruptions.c ****     // Load k+1 state        
 628:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1428              		.loc 1 628 0
 1429 0744 2F4A     		ldr	r2, .L84+72
 1430 0746 304B     		ldr	r3, .L84+76
 1431 0748 1446     		mov	r4, r2
 1432 074a 1D46     		mov	r5, r3
 1433 074c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1434 074e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1435 0750 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1436 0754 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 629:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1437              		.loc 1 629 0
 1438 0758 2C4A     		ldr	r2, .L84+80
 1439 075a 2D4B     		ldr	r3, .L84+84
 1440 075c 1046     		mov	r0, r2
 1441 075e 1946     		mov	r1, r3
 1442 0760 C823     		movs	r3, #200
 1443 0762 1A46     		mov	r2, r3
 1444 0764 FFF7FEFF 		bl	memcpy
 630:..\src/interruptions.c ****                 
 631:..\src/interruptions.c ****     if (interrupt_flag){
 1445              		.loc 1 631 0
 1446 0768 144B     		ldr	r3, .L84
 1447 076a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 076c 002B     		cmp	r3, #0
 1449 076e 04D0     		beq	.L76
 632:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1450              		.loc 1 632 0
 1451 0770 124B     		ldr	r3, .L84
 1452 0772 0022     		movs	r2, #0
 1453 0774 1A70     		strb	r2, [r3]
 633:..\src/interruptions.c ****         interrupt_manager();
 1454              		.loc 1 633 0
 1455 0776 FFF7FEFF 		bl	interrupt_manager
 1456              	.L76:
 634:..\src/interruptions.c ****     }
 635:..\src/interruptions.c **** 
 636:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1457              		.loc 1 636 0
 1458 077a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1459 077e 0346     		mov	r3, r0
 1460 0780 1A46     		mov	r2, r3
 1461 0782 244B     		ldr	r3, .L84+88
 1462 0784 1A80     		strh	r2, [r3]	@ movhi
 637:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1463              		.loc 1 637 0
 1464 0786 244B     		ldr	r3, .L84+92
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 38


 1465 0788 1B88     		ldrh	r3, [r3]
 1466 078a 1A46     		mov	r2, r3
 1467 078c 214B     		ldr	r3, .L84+88
 1468 078e 1B88     		ldrh	r3, [r3]
 1469 0790 D31A     		subs	r3, r2, r3
 1470 0792 1846     		mov	r0, r3
 1471 0794 FFF7FEFF 		bl	__aeabi_i2f
 1472 0798 0346     		mov	r3, r0
 1473 079a 2049     		ldr	r1, .L84+96
 1474 079c 1846     		mov	r0, r3
 1475 079e FFF7FEFF 		bl	__aeabi_fdiv
 1476 07a2 0346     		mov	r3, r0
 1477 07a4 1A46     		mov	r2, r3
 1478 07a6 1E4B     		ldr	r3, .L84+100
 1479 07a8 1A60     		str	r2, [r3]	@ float
 638:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1480              		.loc 1 638 0
 1481 07aa 0120     		movs	r0, #1
 1482 07ac FFF7FEFF 		bl	MY_TIMER_REG_Write
 639:..\src/interruptions.c **** 
 640:..\src/interruptions.c **** }
 1483              		.loc 1 640 0
 1484 07b0 00BF     		nop
 1485 07b2 07F58847 		add	r7, r7, #17408
 1486 07b6 6037     		adds	r7, r7, #96
 1487              		.cfi_def_cfa_offset 16
 1488 07b8 BD46     		mov	sp, r7
 1489              		.cfi_def_cfa_register 13
 1490              		@ sp needed
 1491 07ba B0BD     		pop	{r4, r5, r7, pc}
 1492              	.L85:
 1493              		.align	2
 1494              	.L84:
 1495 07bc 00000000 		.word	interrupt_flag
 1496 07c0 00000000 		.word	calib
 1497 07c4 00000000 		.word	counter_calibration.10482
 1498 07c8 00000000 		.word	c_mem
 1499 07cc 00000000 		.word	pos_reconstruct
 1500 07d0 00000000 		.word	cycles_interrupt_flag
 1501 07d4 00000000 		.word	can_write
 1502 07d8 00000000 		.word	cycles_status
 1503 07dc 00000000 		.word	g_mem
 1504 07e0 00000000 		.word	pFile
 1505 07e4 20000000 		.word	.LC0
 1506 07e8 00000000 		.word	pEMGHFile
 1507 07ec 02000000 		.word	counter_tension_func.10483
 1508 07f0 00000000 		.word	g_adc_measOld
 1509 07f4 00000000 		.word	g_adc_meas
 1510 07f8 00000000 		.word	g_measOld
 1511 07fc 00000000 		.word	g_meas
 1512 0800 00000000 		.word	g_refOld
 1513 0804 00000000 		.word	g_ref
 1514 0808 00000000 		.word	g_refNew
 1515 080c 00000000 		.word	g_imu
 1516 0810 00000000 		.word	g_imuNew
 1517 0814 00000000 		.word	timer_value
 1518 0818 00000000 		.word	timer_value0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 39


 1519 081c 00247449 		.word	1232348160
 1520 0820 00000000 		.word	cycle_time
 1521              		.cfi_endproc
 1522              	.LFE67:
 1523              		.size	function_scheduler, .-function_scheduler
 1524              		.section	.text.compute_reference,"ax",%progbits
 1525              		.align	2
 1526              		.global	compute_reference
 1527              		.thumb
 1528              		.thumb_func
 1529              		.type	compute_reference, %function
 1530              	compute_reference:
 1531              	.LFB68:
 641:..\src/interruptions.c **** 
 642:..\src/interruptions.c **** //==============================================================================
 643:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 644:..\src/interruptions.c **** //==============================================================================
 645:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1532              		.loc 1 645 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 40
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536 0000 80B5     		push	{r7, lr}
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 8CB0     		sub	sp, sp, #48
 1541              		.cfi_def_cfa_offset 56
 1542 0004 02AF     		add	r7, sp, #8
 1543              		.cfi_def_cfa 7, 48
 1544 0006 0346     		mov	r3, r0
 1545 0008 B960     		str	r1, [r7, #8]
 1546 000a 7A60     		str	r2, [r7, #4]
 1547 000c FB73     		strb	r3, [r7, #15]
 646:..\src/interruptions.c ****     
 647:..\src/interruptions.c ****     int32 CYDATA handle_value;
 648:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 649:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1548              		.loc 1 649 0
 1549 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1550 0010 1346     		mov	r3, r2
 1551 0012 DB00     		lsls	r3, r3, #3
 1552 0014 9B1A     		subs	r3, r3, r2
 1553 0016 1B01     		lsls	r3, r3, #4
 1554 0018 B033     		adds	r3, r3, #176
 1555 001a A74A     		ldr	r2, .L150
 1556 001c 1344     		add	r3, r3, r2
 1557 001e 3B62     		str	r3, [r7, #32]
 650:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1558              		.loc 1 650 0
 1559 0020 3B6A     		ldr	r3, [r7, #32]
 1560 0022 93F86030 		ldrb	r3, [r3, #96]
 1561 0026 FB77     		strb	r3, [r7, #31]
 651:..\src/interruptions.c ****     
 652:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 653:..\src/interruptions.c ****                                                         // 1 EMG 1
 654:..\src/interruptions.c ****                                                         // 2 EMG 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 40


 655:..\src/interruptions.c ****                                                         // wait for both to get down
 656:..\src/interruptions.c ****     
 657:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1562              		.loc 1 657 0
 1563 0028 A44B     		ldr	r3, .L150+4
 1564 002a 1B68     		ldr	r3, [r3]
 1565 002c A24A     		ldr	r2, .L150
 1566 002e B2F8F021 		ldrh	r2, [r2, #496]
 1567 0032 9B1A     		subs	r3, r3, r2
 1568 0034 BB61     		str	r3, [r7, #24]
 658:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1569              		.loc 1 658 0
 1570 0036 A14B     		ldr	r3, .L150+4
 1571 0038 5B68     		ldr	r3, [r3, #4]
 1572 003a 9F4A     		ldr	r2, .L150
 1573 003c B2F8F221 		ldrh	r2, [r2, #498]
 1574 0040 9B1A     		subs	r3, r3, r2
 1575 0042 7B61     		str	r3, [r7, #20]
 659:..\src/interruptions.c ****     
 660:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 661:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1576              		.loc 1 661 0
 1577 0044 3B6A     		ldr	r3, [r7, #32]
 1578 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1579 004a 013B     		subs	r3, r3, #1
 1580 004c 062B     		cmp	r3, #6
 1581 004e 00F25182 		bhi	.L142
 1582 0052 01A2     		adr	r2, .L89
 1583 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1584              		.p2align 2
 1585              	.L89:
 1586 0058 75000000 		.word	.L88+1
 1587 005c 21020000 		.word	.L90+1
 1588 0060 C9020000 		.word	.L91+1
 1589 0064 31030000 		.word	.L92+1
 1590 0068 11040000 		.word	.L93+1
 1591 006c 4D010000 		.word	.L94+1
 1592 0070 5B020000 		.word	.L95+1
 1593              		.p2align 1
 1594              	.L88:
 662:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 663:..\src/interruptions.c **** 
 664:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 665:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 666:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1595              		.loc 1 666 0
 1596 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1597 0076 9049     		ldr	r1, .L150
 1598 0078 1346     		mov	r3, r2
 1599 007a 5B00     		lsls	r3, r3, #1
 1600 007c 1344     		add	r3, r3, r2
 1601 007e 1B01     		lsls	r3, r3, #4
 1602 0080 0B44     		add	r3, r3, r1
 1603 0082 03F5D873 		add	r3, r3, #432
 1604 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1605 0088 002B     		cmp	r3, #0
 1606 008a 19D0     		beq	.L96
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 41


 667:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1607              		.loc 1 667 0
 1608 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1609 008e 8C4A     		ldr	r2, .L150+8
 1610 0090 3421     		movs	r1, #52
 1611 0092 01FB03F3 		mul	r3, r1, r3
 1612 0096 1344     		add	r3, r3, r2
 1613 0098 0833     		adds	r3, r3, #8
 1614 009a 1968     		ldr	r1, [r3]
 1615 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1616 009e 8648     		ldr	r0, .L150
 1617 00a0 1346     		mov	r3, r2
 1618 00a2 5B00     		lsls	r3, r3, #1
 1619 00a4 1344     		add	r3, r3, r2
 1620 00a6 1B01     		lsls	r3, r3, #4
 1621 00a8 0344     		add	r3, r3, r0
 1622 00aa 03F5DA73 		add	r3, r3, #436
 1623 00ae 93F90030 		ldrsb	r3, [r3]
 1624 00b2 03FB01F2 		mul	r2, r3, r1
 1625 00b6 3B6A     		ldr	r3, [r7, #32]
 1626 00b8 5B6B     		ldr	r3, [r3, #52]
 1627 00ba 1344     		add	r3, r3, r2
 1628 00bc 7B62     		str	r3, [r7, #36]
 1629 00be 18E0     		b	.L97
 1630              	.L96:
 668:..\src/interruptions.c ****             else
 669:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1631              		.loc 1 669 0
 1632 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1633 00c2 7F4A     		ldr	r2, .L150+8
 1634 00c4 3421     		movs	r1, #52
 1635 00c6 01FB03F3 		mul	r3, r1, r3
 1636 00ca 1344     		add	r3, r3, r2
 1637 00cc 0433     		adds	r3, r3, #4
 1638 00ce 1968     		ldr	r1, [r3]
 1639 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1640 00d2 7948     		ldr	r0, .L150
 1641 00d4 1346     		mov	r3, r2
 1642 00d6 5B00     		lsls	r3, r3, #1
 1643 00d8 1344     		add	r3, r3, r2
 1644 00da 1B01     		lsls	r3, r3, #4
 1645 00dc 0344     		add	r3, r3, r0
 1646 00de 03F5DA73 		add	r3, r3, #436
 1647 00e2 93F90030 		ldrsb	r3, [r3]
 1648 00e6 03FB01F2 		mul	r2, r3, r1
 1649 00ea 3B6A     		ldr	r3, [r7, #32]
 1650 00ec 5B6B     		ldr	r3, [r3, #52]
 1651 00ee 1344     		add	r3, r3, r2
 1652 00f0 7B62     		str	r3, [r7, #36]
 1653              	.L97:
 670:..\src/interruptions.c ****             
 671:..\src/interruptions.c **** 
 672:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 673:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1654              		.loc 1 673 0
 1655 00f2 7B68     		ldr	r3, [r7, #4]
 1656 00f4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 42


 1657 00f6 7A6A     		ldr	r2, [r7, #36]
 1658 00f8 D21A     		subs	r2, r2, r3
 1659 00fa 3B6A     		ldr	r3, [r7, #32]
 1660 00fc 1B6C     		ldr	r3, [r3, #64]
 1661 00fe 9A42     		cmp	r2, r3
 1662 0100 0BDD     		ble	.L98
 1663              		.loc 1 673 0 is_stmt 0 discriminator 1
 1664 0102 3B6A     		ldr	r3, [r7, #32]
 1665 0104 1B6C     		ldr	r3, [r3, #64]
 1666 0106 002B     		cmp	r3, #0
 1667 0108 07D0     		beq	.L98
 674:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1668              		.loc 1 674 0 is_stmt 1
 1669 010a BB68     		ldr	r3, [r7, #8]
 1670 010c 1A68     		ldr	r2, [r3]
 1671 010e 3B6A     		ldr	r3, [r7, #32]
 1672 0110 1B6C     		ldr	r3, [r3, #64]
 1673 0112 1A44     		add	r2, r2, r3
 1674 0114 BB68     		ldr	r3, [r7, #8]
 1675 0116 1A60     		str	r2, [r3]
 1676 0118 17E0     		b	.L99
 1677              	.L98:
 675:..\src/interruptions.c ****             else {
 676:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1678              		.loc 1 676 0
 1679 011a 7B68     		ldr	r3, [r7, #4]
 1680 011c 1B68     		ldr	r3, [r3]
 1681 011e 7A6A     		ldr	r2, [r7, #36]
 1682 0120 D21A     		subs	r2, r2, r3
 1683 0122 3B6A     		ldr	r3, [r7, #32]
 1684 0124 DB6B     		ldr	r3, [r3, #60]
 1685 0126 9A42     		cmp	r2, r3
 1686 0128 0BDA     		bge	.L100
 1687              		.loc 1 676 0 is_stmt 0 discriminator 1
 1688 012a 3B6A     		ldr	r3, [r7, #32]
 1689 012c DB6B     		ldr	r3, [r3, #60]
 1690 012e 002B     		cmp	r3, #0
 1691 0130 07D0     		beq	.L100
 677:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1692              		.loc 1 677 0 is_stmt 1
 1693 0132 BB68     		ldr	r3, [r7, #8]
 1694 0134 1A68     		ldr	r2, [r3]
 1695 0136 3B6A     		ldr	r3, [r7, #32]
 1696 0138 DB6B     		ldr	r3, [r3, #60]
 1697 013a 1A44     		add	r2, r2, r3
 1698 013c BB68     		ldr	r3, [r7, #8]
 1699 013e 1A60     		str	r2, [r3]
 1700 0140 03E0     		b	.L99
 1701              	.L100:
 678:..\src/interruptions.c ****                 else
 679:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1702              		.loc 1 679 0
 1703 0142 BB68     		ldr	r3, [r7, #8]
 1704 0144 7A6A     		ldr	r2, [r7, #36]
 1705 0146 1A60     		str	r2, [r3]
 680:..\src/interruptions.c ****             }
 681:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 43


 1706              		.loc 1 681 0
 1707 0148 DFE1     		b	.L101
 1708              	.L99:
 1709 014a DEE1     		b	.L101
 1710              	.L94:
 682:..\src/interruptions.c ****         
 683:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 684:..\src/interruptions.c ****             
 685:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1711              		.loc 1 685 0
 1712 014c 5A4B     		ldr	r3, .L150
 1713 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1714 0152 002B     		cmp	r3, #0
 1715 0154 57D1     		bne	.L102
 686:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 687:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1716              		.loc 1 687 0
 1717 0156 7B68     		ldr	r3, [r7, #4]
 1718 0158 1A68     		ldr	r2, [r3]
 1719 015a BB68     		ldr	r3, [r7, #8]
 1720 015c 1A60     		str	r2, [r3]
 688:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1721              		.loc 1 688 0
 1722 015e 574B     		ldr	r3, .L150+4
 1723 0160 1B6A     		ldr	r3, [r3, #32]
 1724 0162 B3F52F7F 		cmp	r3, #700
 1725 0166 45DC     		bgt	.L103
 1726              	.LBB4:
 689:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1727              		.loc 1 689 0
 1728 0168 544B     		ldr	r3, .L150+4
 1729 016a 1B6A     		ldr	r3, [r3, #32]
 1730 016c 524A     		ldr	r2, .L150
 1731 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1732 0172 9B1A     		subs	r3, r3, r2
 1733 0174 3B61     		str	r3, [r7, #16]
 690:..\src/interruptions.c **** 
 691:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1734              		.loc 1 691 0
 1735 0176 514B     		ldr	r3, .L150+4
 1736 0178 1B6A     		ldr	r3, [r3, #32]
 1737 017a 4F4A     		ldr	r2, .L150
 1738 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1739 0180 9342     		cmp	r3, r2
 1740 0182 13DD     		ble	.L104
 692:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1741              		.loc 1 692 0
 1742 0184 BB68     		ldr	r3, [r7, #8]
 1743 0186 1A68     		ldr	r2, [r3]
 1744 0188 4B4B     		ldr	r3, .L150
 1745 018a B3F8B032 		ldrh	r3, [r3, #688]
 1746 018e 1946     		mov	r1, r3
 1747 0190 3B69     		ldr	r3, [r7, #16]
 1748 0192 03FB01F1 		mul	r1, r3, r1
 1749 0196 484B     		ldr	r3, .L150
 1750 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1751 019c C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 44


 1752 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1753 01a4 1A44     		add	r2, r2, r3
 1754 01a6 BB68     		ldr	r3, [r7, #8]
 1755 01a8 1A60     		str	r2, [r3]
 1756              	.LBE4:
 693:..\src/interruptions.c ****                     }
 694:..\src/interruptions.c ****                     else {
 695:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 696:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 697:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 698:..\src/interruptions.c ****                         }
 699:..\src/interruptions.c ****                     }
 700:..\src/interruptions.c ****                 }
 701:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 702:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 703:..\src/interruptions.c ****                 }
 704:..\src/interruptions.c ****             }
 705:..\src/interruptions.c ****             else {
 706:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 707:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 708:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 709:..\src/interruptions.c ****                 }
 710:..\src/interruptions.c ****             }
 711:..\src/interruptions.c ****             break;
 1757              		.loc 1 711 0
 1758 01aa A5E1     		b	.L143
 1759              	.L104:
 1760              	.LBB5:
 695:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1761              		.loc 1 695 0
 1762 01ac 434B     		ldr	r3, .L150+4
 1763 01ae 1B6A     		ldr	r3, [r3, #32]
 1764 01b0 414A     		ldr	r2, .L150
 1765 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1766 01b6 1344     		add	r3, r3, r2
 1767 01b8 3B61     		str	r3, [r7, #16]
 696:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1768              		.loc 1 696 0
 1769 01ba 404B     		ldr	r3, .L150+4
 1770 01bc 1A6A     		ldr	r2, [r3, #32]
 1771 01be 3E4B     		ldr	r3, .L150
 1772 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1773 01c4 5B42     		negs	r3, r3
 1774 01c6 9A42     		cmp	r2, r3
 1775 01c8 80F29681 		bge	.L143
 697:..\src/interruptions.c ****                         }
 1776              		.loc 1 697 0
 1777 01cc BB68     		ldr	r3, [r7, #8]
 1778 01ce 1A68     		ldr	r2, [r3]
 1779 01d0 394B     		ldr	r3, .L150
 1780 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1781 01d6 1946     		mov	r1, r3
 1782 01d8 3B69     		ldr	r3, [r7, #16]
 1783 01da 03FB01F1 		mul	r1, r3, r1
 1784 01de 364B     		ldr	r3, .L150
 1785 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1786 01e4 C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 45


 1787 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1788 01ec 1A44     		add	r2, r2, r3
 1789 01ee BB68     		ldr	r3, [r7, #8]
 1790 01f0 1A60     		str	r2, [r3]
 1791              	.LBE5:
 1792              		.loc 1 711 0
 1793 01f2 81E1     		b	.L143
 1794              	.L103:
 702:..\src/interruptions.c ****                 }
 1795              		.loc 1 702 0
 1796 01f4 BB68     		ldr	r3, [r7, #8]
 1797 01f6 1B68     		ldr	r3, [r3]
 1798 01f8 324A     		ldr	r2, .L150+12
 1799 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1800 01fe 9A1A     		subs	r2, r3, r2
 1801 0200 BB68     		ldr	r3, [r7, #8]
 1802 0202 1A60     		str	r2, [r3]
 1803              		.loc 1 711 0
 1804 0204 78E1     		b	.L143
 1805              	.L102:
 707:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1806              		.loc 1 707 0
 1807 0206 2C4B     		ldr	r3, .L150
 1808 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1809 020c 042B     		cmp	r3, #4
 1810 020e 40F07381 		bne	.L143
 708:..\src/interruptions.c ****                 }
 1811              		.loc 1 708 0
 1812 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1813 0214 7A68     		ldr	r2, [r7, #4]
 1814 0216 B968     		ldr	r1, [r7, #8]
 1815 0218 1846     		mov	r0, r3
 1816 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1817              		.loc 1 711 0
 1818 021e 6BE1     		b	.L143
 1819              	.L90:
 712:..\src/interruptions.c ****             
 713:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 714:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1820              		.loc 1 714 0
 1821 0220 BB69     		ldr	r3, [r7, #24]
 1822 0222 002B     		cmp	r3, #0
 1823 0224 15DD     		ble	.L108
 715:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1824              		.loc 1 715 0
 1825 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1826 0228 2649     		ldr	r1, .L150+12
 1827 022a 1346     		mov	r3, r2
 1828 022c DB00     		lsls	r3, r3, #3
 1829 022e 9B1A     		subs	r3, r3, r2
 1830 0230 1B01     		lsls	r3, r3, #4
 1831 0232 0B44     		add	r3, r3, r1
 1832 0234 E833     		adds	r3, r3, #232
 1833 0236 1B68     		ldr	r3, [r3]
 1834 0238 BA69     		ldr	r2, [r7, #24]
 1835 023a 02FB03F2 		mul	r2, r2, r3
 1836 023e 1E4B     		ldr	r3, .L150
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 46


 1837 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1838 0244 C3F58063 		rsb	r3, r3, #1024
 1839 0248 92FBF3F2 		sdiv	r2, r2, r3
 1840 024c BB68     		ldr	r3, [r7, #8]
 1841 024e 1A60     		str	r2, [r3]
 716:..\src/interruptions.c ****             else
 717:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 718:..\src/interruptions.c ****             break;
 1842              		.loc 1 718 0
 1843 0250 5BE1     		b	.L101
 1844              	.L108:
 717:..\src/interruptions.c ****             break;
 1845              		.loc 1 717 0
 1846 0252 BB68     		ldr	r3, [r7, #8]
 1847 0254 0022     		movs	r2, #0
 1848 0256 1A60     		str	r2, [r3]
 1849              		.loc 1 718 0
 1850 0258 57E1     		b	.L101
 1851              	.L95:
 719:..\src/interruptions.c ****         
 720:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 721:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1852              		.loc 1 721 0
 1853 025a BB69     		ldr	r3, [r7, #24]
 1854 025c 002B     		cmp	r3, #0
 1855 025e 1FDD     		ble	.L110
 722:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1856              		.loc 1 722 0
 1857 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1858 0262 1849     		ldr	r1, .L150+12
 1859 0264 1346     		mov	r3, r2
 1860 0266 DB00     		lsls	r3, r3, #3
 1861 0268 9B1A     		subs	r3, r3, r2
 1862 026a 1B01     		lsls	r3, r3, #4
 1863 026c 0B44     		add	r3, r3, r1
 1864 026e E833     		adds	r3, r3, #232
 1865 0270 1968     		ldr	r1, [r3]
 1866 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1867 0274 1348     		ldr	r0, .L150+12
 1868 0276 1346     		mov	r3, r2
 1869 0278 DB00     		lsls	r3, r3, #3
 1870 027a 9B1A     		subs	r3, r3, r2
 1871 027c 1B01     		lsls	r3, r3, #4
 1872 027e 0344     		add	r3, r3, r0
 1873 0280 E833     		adds	r3, r3, #232
 1874 0282 1B68     		ldr	r3, [r3]
 1875 0284 BA69     		ldr	r2, [r7, #24]
 1876 0286 02FB03F2 		mul	r2, r2, r3
 1877 028a 0B4B     		ldr	r3, .L150
 1878 028c B3F8F031 		ldrh	r3, [r3, #496]
 1879 0290 C3F58063 		rsb	r3, r3, #1024
 1880 0294 92FBF3F3 		sdiv	r3, r2, r3
 1881 0298 CA1A     		subs	r2, r1, r3
 1882 029a BB68     		ldr	r3, [r7, #8]
 1883 029c 1A60     		str	r2, [r3]
 723:..\src/interruptions.c ****             else
 724:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 47


 725:..\src/interruptions.c ****             break;
 1884              		.loc 1 725 0
 1885 029e 34E1     		b	.L101
 1886              	.L110:
 724:..\src/interruptions.c ****             break;
 1887              		.loc 1 724 0
 1888 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1889 02a2 0849     		ldr	r1, .L150+12
 1890 02a4 1346     		mov	r3, r2
 1891 02a6 DB00     		lsls	r3, r3, #3
 1892 02a8 9B1A     		subs	r3, r3, r2
 1893 02aa 1B01     		lsls	r3, r3, #4
 1894 02ac 0B44     		add	r3, r3, r1
 1895 02ae E833     		adds	r3, r3, #232
 1896 02b0 1A68     		ldr	r2, [r3]
 1897 02b2 BB68     		ldr	r3, [r7, #8]
 1898 02b4 1A60     		str	r2, [r3]
 1899              		.loc 1 725 0
 1900 02b6 28E1     		b	.L101
 1901              	.L151:
 1902              		.align	2
 1903              	.L150:
 1904 02b8 00000000 		.word	c_mem
 1905 02bc 00000000 		.word	g_adc_meas
 1906 02c0 00000000 		.word	g_meas
 1907 02c4 00000000 		.word	g_mem
 1908              	.L91:
 726:..\src/interruptions.c **** 
 727:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 728:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1909              		.loc 1 728 0
 1910 02c8 7B68     		ldr	r3, [r7, #4]
 1911 02ca 1A68     		ldr	r2, [r3]
 1912 02cc BB68     		ldr	r3, [r7, #8]
 1913 02ce 1A60     		str	r2, [r3]
 729:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1914              		.loc 1 729 0
 1915 02d0 BB69     		ldr	r3, [r7, #24]
 1916 02d2 002B     		cmp	r3, #0
 1917 02d4 13DD     		ble	.L112
 730:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1918              		.loc 1 730 0
 1919 02d6 7B68     		ldr	r3, [r7, #4]
 1920 02d8 1A68     		ldr	r2, [r3]
 1921 02da 884B     		ldr	r3, .L152
 1922 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1923 02e0 1946     		mov	r1, r3
 1924 02e2 BB69     		ldr	r3, [r7, #24]
 1925 02e4 03FB01F3 		mul	r3, r3, r1
 1926 02e8 5900     		lsls	r1, r3, #1
 1927 02ea 854B     		ldr	r3, .L152+4
 1928 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1929 02f0 C3F58063 		rsb	r3, r3, #1024
 1930 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1931 02f8 1A44     		add	r2, r2, r3
 1932 02fa BB68     		ldr	r3, [r7, #8]
 1933 02fc 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 48


 1934              	.L112:
 731:..\src/interruptions.c ****             }
 732:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1935              		.loc 1 732 0
 1936 02fe 7B69     		ldr	r3, [r7, #20]
 1937 0300 002B     		cmp	r3, #0
 1938 0302 40F30181 		ble	.L144
 733:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1939              		.loc 1 733 0
 1940 0306 7B68     		ldr	r3, [r7, #4]
 1941 0308 1A68     		ldr	r2, [r3]
 1942 030a 7C4B     		ldr	r3, .L152
 1943 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1944 0310 1946     		mov	r1, r3
 1945 0312 7B69     		ldr	r3, [r7, #20]
 1946 0314 03FB01F3 		mul	r3, r3, r1
 1947 0318 5900     		lsls	r1, r3, #1
 1948 031a 794B     		ldr	r3, .L152+4
 1949 031c B3F8F231 		ldrh	r3, [r3, #498]
 1950 0320 C3F58063 		rsb	r3, r3, #1024
 1951 0324 91FBF3F3 		sdiv	r3, r1, r3
 1952 0328 D21A     		subs	r2, r2, r3
 1953 032a BB68     		ldr	r3, [r7, #8]
 1954 032c 1A60     		str	r2, [r3]
 734:..\src/interruptions.c ****             }
 735:..\src/interruptions.c ****             break;
 1955              		.loc 1 735 0
 1956 032e EBE0     		b	.L144
 1957              	.L92:
 736:..\src/interruptions.c **** 
 737:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 738:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1958              		.loc 1 738 0
 1959 0330 7B68     		ldr	r3, [r7, #4]
 1960 0332 1A68     		ldr	r2, [r3]
 1961 0334 BB68     		ldr	r3, [r7, #8]
 1962 0336 1A60     		str	r2, [r3]
 739:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1963              		.loc 1 739 0
 1964 0338 714B     		ldr	r3, .L152+4
 1965 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1966 033e 042B     		cmp	r3, #4
 1967 0340 5BD0     		beq	.L114
 740:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1968              		.loc 1 740 0
 1969 0342 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1970 0344 6F4A     		ldr	r2, .L152+8
 1971 0346 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1972 0348 012B     		cmp	r3, #1
 1973 034a 1CD0     		beq	.L116
 1974 034c 022B     		cmp	r3, #2
 1975 034e 37D0     		beq	.L117
 1976 0350 002B     		cmp	r3, #0
 1977 0352 00D0     		beq	.L118
 741:..\src/interruptions.c ****                     case 0:
 742:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 743:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 49


 744:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 745:..\src/interruptions.c ****                             break;
 746:..\src/interruptions.c ****                         }
 747:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 748:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 749:..\src/interruptions.c ****                             break;
 750:..\src/interruptions.c ****                         }
 751:..\src/interruptions.c ****                         break;
 752:..\src/interruptions.c **** 
 753:..\src/interruptions.c ****                     case 1:
 754:..\src/interruptions.c ****                         // EMG 1 is first
 755:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 756:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 757:..\src/interruptions.c ****                             break;
 758:..\src/interruptions.c ****                         }
 759:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 760:..\src/interruptions.c ****                         break;
 761:..\src/interruptions.c **** 
 762:..\src/interruptions.c ****                     case 2:
 763:..\src/interruptions.c ****                         // EMG 2 is first
 764:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 765:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 766:..\src/interruptions.c ****                             break;
 767:..\src/interruptions.c ****                         }
 768:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 769:..\src/interruptions.c ****                         break;
 770:..\src/interruptions.c **** 
 771:..\src/interruptions.c ****                     default:
 772:..\src/interruptions.c ****                         break;
 1978              		.loc 1 772 0
 1979 0354 5BE0     		b	.L124
 1980              	.L118:
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1981              		.loc 1 743 0
 1982 0356 BB69     		ldr	r3, [r7, #24]
 1983 0358 002B     		cmp	r3, #0
 1984 035a 08DD     		ble	.L119
 743:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1985              		.loc 1 743 0 is_stmt 0 discriminator 1
 1986 035c BA69     		ldr	r2, [r7, #24]
 1987 035e 7B69     		ldr	r3, [r7, #20]
 1988 0360 9A42     		cmp	r2, r3
 1989 0362 04DD     		ble	.L119
 744:..\src/interruptions.c ****                             break;
 1990              		.loc 1 744 0 is_stmt 1
 1991 0364 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1992 0366 674A     		ldr	r2, .L152+8
 1993 0368 0121     		movs	r1, #1
 1994 036a D154     		strb	r1, [r2, r3]
 745:..\src/interruptions.c ****                         }
 1995              		.loc 1 745 0
 1996 036c 4FE0     		b	.L124
 1997              	.L119:
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1998              		.loc 1 747 0
 1999 036e 7B69     		ldr	r3, [r7, #20]
 2000 0370 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 50


 2001 0372 4BDD     		ble	.L145
 747:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2002              		.loc 1 747 0 is_stmt 0 discriminator 1
 2003 0374 7A69     		ldr	r2, [r7, #20]
 2004 0376 BB69     		ldr	r3, [r7, #24]
 2005 0378 9A42     		cmp	r2, r3
 2006 037a 47DD     		ble	.L145
 748:..\src/interruptions.c ****                             break;
 2007              		.loc 1 748 0 is_stmt 1
 2008 037c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2009 037e 614A     		ldr	r2, .L152+8
 2010 0380 0221     		movs	r1, #2
 2011 0382 D154     		strb	r1, [r2, r3]
 749:..\src/interruptions.c ****                         }
 2012              		.loc 1 749 0
 2013 0384 43E0     		b	.L124
 2014              	.L116:
 755:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2015              		.loc 1 755 0
 2016 0386 BB69     		ldr	r3, [r7, #24]
 2017 0388 002B     		cmp	r3, #0
 2018 038a 04DA     		bge	.L122
 756:..\src/interruptions.c ****                             break;
 2019              		.loc 1 756 0
 2020 038c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2021 038e 5D4A     		ldr	r2, .L152+8
 2022 0390 0021     		movs	r1, #0
 2023 0392 D154     		strb	r1, [r2, r3]
 757:..\src/interruptions.c ****                         }
 2024              		.loc 1 757 0
 2025 0394 3BE0     		b	.L124
 2026              	.L122:
 759:..\src/interruptions.c ****                         break;
 2027              		.loc 1 759 0
 2028 0396 7B68     		ldr	r3, [r7, #4]
 2029 0398 1A68     		ldr	r2, [r3]
 2030 039a 584B     		ldr	r3, .L152
 2031 039c 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2032 03a0 1946     		mov	r1, r3
 2033 03a2 BB69     		ldr	r3, [r7, #24]
 2034 03a4 03FB01F3 		mul	r3, r3, r1
 2035 03a8 9900     		lsls	r1, r3, #2
 2036 03aa 554B     		ldr	r3, .L152+4
 2037 03ac B3F8F031 		ldrh	r3, [r3, #496]
 2038 03b0 C3F58063 		rsb	r3, r3, #1024
 2039 03b4 91FBF3F3 		sdiv	r3, r1, r3
 2040 03b8 1A44     		add	r2, r2, r3
 2041 03ba BB68     		ldr	r3, [r7, #8]
 2042 03bc 1A60     		str	r2, [r3]
 760:..\src/interruptions.c **** 
 2043              		.loc 1 760 0
 2044 03be 26E0     		b	.L124
 2045              	.L117:
 764:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2046              		.loc 1 764 0
 2047 03c0 7B69     		ldr	r3, [r7, #20]
 2048 03c2 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 51


 2049 03c4 04DA     		bge	.L123
 765:..\src/interruptions.c ****                             break;
 2050              		.loc 1 765 0
 2051 03c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2052 03c8 4E4A     		ldr	r2, .L152+8
 2053 03ca 0021     		movs	r1, #0
 2054 03cc D154     		strb	r1, [r2, r3]
 766:..\src/interruptions.c ****                         }
 2055              		.loc 1 766 0
 2056 03ce 1EE0     		b	.L124
 2057              	.L123:
 768:..\src/interruptions.c ****                         break;
 2058              		.loc 1 768 0
 2059 03d0 7B68     		ldr	r3, [r7, #4]
 2060 03d2 1A68     		ldr	r2, [r3]
 2061 03d4 494B     		ldr	r3, .L152
 2062 03d6 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2063 03da 1946     		mov	r1, r3
 2064 03dc 7B69     		ldr	r3, [r7, #20]
 2065 03de 03FB01F3 		mul	r3, r3, r1
 2066 03e2 9900     		lsls	r1, r3, #2
 2067 03e4 464B     		ldr	r3, .L152+4
 2068 03e6 B3F8F231 		ldrh	r3, [r3, #498]
 2069 03ea C3F58063 		rsb	r3, r3, #1024
 2070 03ee 91FBF3F3 		sdiv	r3, r1, r3
 2071 03f2 D21A     		subs	r2, r2, r3
 2072 03f4 BB68     		ldr	r3, [r7, #8]
 2073 03f6 1A60     		str	r2, [r3]
 769:..\src/interruptions.c **** 
 2074              		.loc 1 769 0
 2075 03f8 09E0     		b	.L124
 2076              	.L114:
 773:..\src/interruptions.c ****                 }
 774:..\src/interruptions.c ****             }
 775:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 776:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 777:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2077              		.loc 1 777 0
 2078 03fa F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2079 03fc 7B69     		ldr	r3, [r7, #20]
 2080 03fe 0093     		str	r3, [sp]
 2081 0400 BB69     		ldr	r3, [r7, #24]
 2082 0402 7A68     		ldr	r2, [r7, #4]
 2083 0404 B968     		ldr	r1, [r7, #8]
 2084 0406 FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 778:..\src/interruptions.c ****             }
 779:..\src/interruptions.c ****             break;
 2085              		.loc 1 779 0
 2086 040a 7EE0     		b	.L101
 2087              	.L145:
 751:..\src/interruptions.c **** 
 2088              		.loc 1 751 0
 2089 040c 00BF     		nop
 2090              	.L124:
 2091              		.loc 1 779 0 discriminator 5
 2092 040e 7CE0     		b	.L101
 2093              	.L93:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 52


 780:..\src/interruptions.c **** 
 781:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 782:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2094              		.loc 1 782 0
 2095 0410 7B68     		ldr	r3, [r7, #4]
 2096 0412 1A68     		ldr	r2, [r3]
 2097 0414 BB68     		ldr	r3, [r7, #8]
 2098 0416 1A60     		str	r2, [r3]
 783:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2099              		.loc 1 783 0
 2100 0418 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2101 041a 3A4A     		ldr	r2, .L152+8
 2102 041c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2103 041e 012B     		cmp	r3, #1
 2104 0420 1CD0     		beq	.L126
 2105 0422 022B     		cmp	r3, #2
 2106 0424 3DD0     		beq	.L127
 2107 0426 002B     		cmp	r3, #0
 2108 0428 00D0     		beq	.L128
 784:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 785:..\src/interruptions.c ****                 case 0:
 786:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 787:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 788:..\src/interruptions.c ****                         break;
 789:..\src/interruptions.c ****                     }
 790:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 791:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 792:..\src/interruptions.c ****                         break;
 793:..\src/interruptions.c ****                     }
 794:..\src/interruptions.c ****                     break;
 795:..\src/interruptions.c **** 
 796:..\src/interruptions.c ****                 // EMG 1 is first
 797:..\src/interruptions.c ****                 case 1:
 798:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 799:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 800:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 801:..\src/interruptions.c ****                         break;
 802:..\src/interruptions.c ****                     }
 803:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 804:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 805:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 806:..\src/interruptions.c ****                     
 807:..\src/interruptions.c ****                     break;
 808:..\src/interruptions.c **** 
 809:..\src/interruptions.c ****                 // EMG 2 is first
 810:..\src/interruptions.c ****                 case 2:
 811:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 812:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 813:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 814:..\src/interruptions.c ****                         break;
 815:..\src/interruptions.c ****                     }
 816:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 817:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 818:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 819:..\src/interruptions.c ****                     }
 820:..\src/interruptions.c ****                     break;
 821:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 53


 822:..\src/interruptions.c ****                 default:
 823:..\src/interruptions.c ****                     break;
 2109              		.loc 1 823 0
 2110 042a 62E0     		b	.L130
 2111              	.L128:
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2112              		.loc 1 786 0
 2113 042c BB69     		ldr	r3, [r7, #24]
 2114 042e 002B     		cmp	r3, #0
 2115 0430 08DD     		ble	.L129
 786:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2116              		.loc 1 786 0 is_stmt 0 discriminator 1
 2117 0432 BA69     		ldr	r2, [r7, #24]
 2118 0434 7B69     		ldr	r3, [r7, #20]
 2119 0436 9A42     		cmp	r2, r3
 2120 0438 04DD     		ble	.L129
 787:..\src/interruptions.c ****                         break;
 2121              		.loc 1 787 0 is_stmt 1
 2122 043a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2123 043c 314A     		ldr	r2, .L152+8
 2124 043e 0121     		movs	r1, #1
 2125 0440 D154     		strb	r1, [r2, r3]
 788:..\src/interruptions.c ****                     }
 2126              		.loc 1 788 0
 2127 0442 56E0     		b	.L130
 2128              	.L129:
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2129              		.loc 1 790 0
 2130 0444 7B69     		ldr	r3, [r7, #20]
 2131 0446 002B     		cmp	r3, #0
 2132 0448 4EDD     		ble	.L146
 790:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2133              		.loc 1 790 0 is_stmt 0 discriminator 1
 2134 044a 7A69     		ldr	r2, [r7, #20]
 2135 044c BB69     		ldr	r3, [r7, #24]
 2136 044e 9A42     		cmp	r2, r3
 2137 0450 4ADD     		ble	.L146
 791:..\src/interruptions.c ****                         break;
 2138              		.loc 1 791 0 is_stmt 1
 2139 0452 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2140 0454 2B4A     		ldr	r2, .L152+8
 2141 0456 0221     		movs	r1, #2
 2142 0458 D154     		strb	r1, [r2, r3]
 792:..\src/interruptions.c ****                     }
 2143              		.loc 1 792 0
 2144 045a 4AE0     		b	.L130
 2145              	.L126:
 799:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2146              		.loc 1 799 0
 2147 045c BB69     		ldr	r3, [r7, #24]
 2148 045e 002B     		cmp	r3, #0
 2149 0460 07DA     		bge	.L132
 799:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2150              		.loc 1 799 0 is_stmt 0 discriminator 1
 2151 0462 7B69     		ldr	r3, [r7, #20]
 2152 0464 002B     		cmp	r3, #0
 2153 0466 04DA     		bge	.L132
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 54


 800:..\src/interruptions.c ****                         break;
 2154              		.loc 1 800 0 is_stmt 1
 2155 0468 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2156 046a 264A     		ldr	r2, .L152+8
 2157 046c 0021     		movs	r1, #0
 2158 046e D154     		strb	r1, [r2, r3]
 801:..\src/interruptions.c ****                     }
 2159              		.loc 1 801 0
 2160 0470 3FE0     		b	.L130
 2161              	.L132:
 804:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2162              		.loc 1 804 0
 2163 0472 BB69     		ldr	r3, [r7, #24]
 2164 0474 002B     		cmp	r3, #0
 2165 0476 39DD     		ble	.L147
 805:..\src/interruptions.c ****                     
 2166              		.loc 1 805 0
 2167 0478 7B68     		ldr	r3, [r7, #4]
 2168 047a 1A68     		ldr	r2, [r3]
 2169 047c 1F4B     		ldr	r3, .L152
 2170 047e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2171 0482 1946     		mov	r1, r3
 2172 0484 BB69     		ldr	r3, [r7, #24]
 2173 0486 03FB01F3 		mul	r3, r3, r1
 2174 048a 9900     		lsls	r1, r3, #2
 2175 048c 1C4B     		ldr	r3, .L152+4
 2176 048e B3F8F031 		ldrh	r3, [r3, #496]
 2177 0492 C3F58063 		rsb	r3, r3, #1024
 2178 0496 91FBF3F3 		sdiv	r3, r1, r3
 2179 049a 1A44     		add	r2, r2, r3
 2180 049c BB68     		ldr	r3, [r7, #8]
 2181 049e 1A60     		str	r2, [r3]
 807:..\src/interruptions.c **** 
 2182              		.loc 1 807 0
 2183 04a0 24E0     		b	.L147
 2184              	.L127:
 812:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2185              		.loc 1 812 0
 2186 04a2 BB69     		ldr	r3, [r7, #24]
 2187 04a4 002B     		cmp	r3, #0
 2188 04a6 07DA     		bge	.L134
 812:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2189              		.loc 1 812 0 is_stmt 0 discriminator 1
 2190 04a8 7B69     		ldr	r3, [r7, #20]
 2191 04aa 002B     		cmp	r3, #0
 2192 04ac 04DA     		bge	.L134
 813:..\src/interruptions.c ****                         break;
 2193              		.loc 1 813 0 is_stmt 1
 2194 04ae FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2195 04b0 144A     		ldr	r2, .L152+8
 2196 04b2 0021     		movs	r1, #0
 2197 04b4 D154     		strb	r1, [r2, r3]
 814:..\src/interruptions.c ****                     }
 2198              		.loc 1 814 0
 2199 04b6 1CE0     		b	.L130
 2200              	.L134:
 817:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 55


 2201              		.loc 1 817 0
 2202 04b8 7B69     		ldr	r3, [r7, #20]
 2203 04ba 002B     		cmp	r3, #0
 2204 04bc 18DD     		ble	.L148
 818:..\src/interruptions.c ****                     }
 2205              		.loc 1 818 0
 2206 04be 7B68     		ldr	r3, [r7, #4]
 2207 04c0 1A68     		ldr	r2, [r3]
 2208 04c2 0F4B     		ldr	r3, .L152+4
 2209 04c4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2210 04c8 1946     		mov	r1, r3
 2211 04ca 7B69     		ldr	r3, [r7, #20]
 2212 04cc 03FB01F3 		mul	r3, r3, r1
 2213 04d0 9900     		lsls	r1, r3, #2
 2214 04d2 0B4B     		ldr	r3, .L152+4
 2215 04d4 B3F8F231 		ldrh	r3, [r3, #498]
 2216 04d8 C3F58063 		rsb	r3, r3, #1024
 2217 04dc 91FBF3F3 		sdiv	r3, r1, r3
 2218 04e0 D21A     		subs	r2, r2, r3
 2219 04e2 BB68     		ldr	r3, [r7, #8]
 2220 04e4 1A60     		str	r2, [r3]
 820:..\src/interruptions.c **** 
 2221              		.loc 1 820 0
 2222 04e6 03E0     		b	.L148
 2223              	.L146:
 794:..\src/interruptions.c **** 
 2224              		.loc 1 794 0
 2225 04e8 00BF     		nop
 2226 04ea 0EE0     		b	.L101
 2227              	.L147:
 807:..\src/interruptions.c **** 
 2228              		.loc 1 807 0
 2229 04ec 00BF     		nop
 2230 04ee 0CE0     		b	.L101
 2231              	.L148:
 820:..\src/interruptions.c **** 
 2232              		.loc 1 820 0
 2233 04f0 00BF     		nop
 2234              	.L130:
 824:..\src/interruptions.c ****             }
 825:..\src/interruptions.c ****             break;
 2235              		.loc 1 825 0 discriminator 6
 2236 04f2 0AE0     		b	.L101
 2237              	.L142:
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c ****         default:
 828:..\src/interruptions.c ****             break;
 2238              		.loc 1 828 0
 2239 04f4 00BF     		nop
 2240 04f6 08E0     		b	.L101
 2241              	.L143:
 711:..\src/interruptions.c ****             
 2242              		.loc 1 711 0
 2243 04f8 00BF     		nop
 2244 04fa 06E0     		b	.L101
 2245              	.L153:
 2246              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 56


 2247              	.L152:
 2248 04fc 00000000 		.word	g_mem
 2249 0500 00000000 		.word	c_mem
 2250 0504 8C000000 		.word	current_emg.10508
 2251              	.L144:
 735:..\src/interruptions.c **** 
 2252              		.loc 1 735 0
 2253 0508 00BF     		nop
 2254              	.L101:
 829:..\src/interruptions.c ****     }
 830:..\src/interruptions.c **** 
 831:..\src/interruptions.c ****     // Position limit saturation
 832:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2255              		.loc 1 832 0
 2256 050a 3B6A     		ldr	r3, [r7, #32]
 2257 050c 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2258 0510 002B     		cmp	r3, #0
 2259 0512 13D0     		beq	.L136
 833:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2260              		.loc 1 833 0
 2261 0514 BB68     		ldr	r3, [r7, #8]
 2262 0516 1A68     		ldr	r2, [r3]
 2263 0518 3B6A     		ldr	r3, [r7, #32]
 2264 051a 5B6B     		ldr	r3, [r3, #52]
 2265 051c 9A42     		cmp	r2, r3
 2266 051e 03DA     		bge	.L137
 834:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2267              		.loc 1 834 0
 2268 0520 3B6A     		ldr	r3, [r7, #32]
 2269 0522 5A6B     		ldr	r2, [r3, #52]
 2270 0524 BB68     		ldr	r3, [r7, #8]
 2271 0526 1A60     		str	r2, [r3]
 2272              	.L137:
 835:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2273              		.loc 1 835 0
 2274 0528 BB68     		ldr	r3, [r7, #8]
 2275 052a 1A68     		ldr	r2, [r3]
 2276 052c 3B6A     		ldr	r3, [r7, #32]
 2277 052e 9B6B     		ldr	r3, [r3, #56]
 2278 0530 9A42     		cmp	r2, r3
 2279 0532 03DD     		ble	.L136
 836:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2280              		.loc 1 836 0
 2281 0534 3B6A     		ldr	r3, [r7, #32]
 2282 0536 9A6B     		ldr	r2, [r3, #56]
 2283 0538 BB68     		ldr	r3, [r7, #8]
 2284 053a 1A60     		str	r2, [r3]
 2285              	.L136:
 837:..\src/interruptions.c ****     }
 838:..\src/interruptions.c ****     
 839:..\src/interruptions.c ****     // SAFETY
 840:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2286              		.loc 1 840 0
 2287 053c 1D4B     		ldr	r3, .L154
 2288 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2289 0540 012B     		cmp	r3, #1
 2290 0542 02D1     		bne	.L138
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 57


 841:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 842:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2291              		.loc 1 842 0
 2292 0544 BB68     		ldr	r3, [r7, #8]
 2293 0546 0022     		movs	r2, #0
 2294 0548 1A60     		str	r2, [r3]
 2295              	.L138:
 843:..\src/interruptions.c ****     }      
 844:..\src/interruptions.c ****     
 845:..\src/interruptions.c ****        
 846:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2296              		.loc 1 846 0
 2297 054a 1B4B     		ldr	r3, .L154+4
 2298 054c 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2299 0550 012B     		cmp	r3, #1
 2300 0552 2AD1     		bne	.L149
 847:..\src/interruptions.c ****         if (rest_enabled == 1){
 2301              		.loc 1 847 0
 2302 0554 194B     		ldr	r3, .L154+8
 2303 0556 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304 0558 012B     		cmp	r3, #1
 2305 055a 03D1     		bne	.L140
 848:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 849:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2306              		.loc 1 849 0
 2307 055c 184B     		ldr	r3, .L154+12
 2308 055e 1A68     		ldr	r2, [r3]
 2309 0560 BB68     		ldr	r3, [r7, #8]
 2310 0562 1A60     		str	r2, [r3]
 2311              	.L140:
 850:..\src/interruptions.c ****         }
 851:..\src/interruptions.c ****         
 852:..\src/interruptions.c ****         if (forced_open == 1) {
 2312              		.loc 1 852 0
 2313 0564 174B     		ldr	r3, .L154+16
 2314 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2315 0568 012B     		cmp	r3, #1
 2316 056a 1ED1     		bne	.L149
 853:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 854:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2317              		.loc 1 854 0
 2318 056c 7B69     		ldr	r3, [r7, #20]
 2319 056e 002B     		cmp	r3, #0
 2320 0570 13DD     		ble	.L141
 855:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2321              		.loc 1 855 0
 2322 0572 154B     		ldr	r3, .L154+20
 2323 0574 D3F8A022 		ldr	r2, [r3, #672]
 2324 0578 134B     		ldr	r3, .L154+20
 2325 057a D3F8A032 		ldr	r3, [r3, #672]
 2326 057e 7969     		ldr	r1, [r7, #20]
 2327 0580 01FB03F1 		mul	r1, r1, r3
 2328 0584 0C4B     		ldr	r3, .L154+4
 2329 0586 B3F8F231 		ldrh	r3, [r3, #498]
 2330 058a C3F58063 		rsb	r3, r3, #1024
 2331 058e 91FBF3F3 		sdiv	r3, r1, r3
 2332 0592 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 58


 2333 0594 BB68     		ldr	r3, [r7, #8]
 2334 0596 1A60     		str	r2, [r3]
 856:..\src/interruptions.c ****             else {
 857:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 858:..\src/interruptions.c ****                 forced_open = 0;
 859:..\src/interruptions.c ****             }
 860:..\src/interruptions.c ****         }
 861:..\src/interruptions.c ****     }
 862:..\src/interruptions.c **** }
 2335              		.loc 1 862 0
 2336 0598 07E0     		b	.L149
 2337              	.L141:
 857:..\src/interruptions.c ****                 forced_open = 0;
 2338              		.loc 1 857 0
 2339 059a 0B4B     		ldr	r3, .L154+20
 2340 059c D3F8A022 		ldr	r2, [r3, #672]
 2341 05a0 BB68     		ldr	r3, [r7, #8]
 2342 05a2 1A60     		str	r2, [r3]
 858:..\src/interruptions.c ****             }
 2343              		.loc 1 858 0
 2344 05a4 074B     		ldr	r3, .L154+16
 2345 05a6 0022     		movs	r2, #0
 2346 05a8 1A70     		strb	r2, [r3]
 2347              	.L149:
 2348              		.loc 1 862 0
 2349 05aa 00BF     		nop
 2350 05ac 2837     		adds	r7, r7, #40
 2351              		.cfi_def_cfa_offset 8
 2352 05ae BD46     		mov	sp, r7
 2353              		.cfi_def_cfa_register 13
 2354              		@ sp needed
 2355 05b0 80BD     		pop	{r7, pc}
 2356              	.L155:
 2357 05b2 00BF     		.align	2
 2358              	.L154:
 2359 05b4 00000000 		.word	battery_low_SoC
 2360 05b8 00000000 		.word	c_mem
 2361 05bc 00000000 		.word	rest_enabled
 2362 05c0 00000000 		.word	rest_pos_curr_ref
 2363 05c4 00000000 		.word	forced_open
 2364 05c8 00000000 		.word	g_mem
 2365              		.cfi_endproc
 2366              	.LFE68:
 2367              		.size	compute_reference, .-compute_reference
 2368              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2369              		.align	2
 2370              		.global	compute_SoftHand_2_motors_joystick_reference
 2371              		.thumb
 2372              		.thumb_func
 2373              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2374              	compute_SoftHand_2_motors_joystick_reference:
 2375              	.LFB69:
 863:..\src/interruptions.c **** 
 864:..\src/interruptions.c **** 
 865:..\src/interruptions.c **** //==============================================================================
 866:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 867:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 59


 868:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2376              		.loc 1 868 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 32
 2379              		@ frame_needed = 1, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 2381 0000 80B4     		push	{r7}
 2382              		.cfi_def_cfa_offset 4
 2383              		.cfi_offset 7, -4
 2384 0002 89B0     		sub	sp, sp, #36
 2385              		.cfi_def_cfa_offset 40
 2386 0004 00AF     		add	r7, sp, #0
 2387              		.cfi_def_cfa_register 7
 2388 0006 0346     		mov	r3, r0
 2389 0008 B960     		str	r1, [r7, #8]
 2390 000a 7A60     		str	r2, [r7, #4]
 2391 000c FB73     		strb	r3, [r7, #15]
 869:..\src/interruptions.c ****     
 870:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2392              		.loc 1 870 0
 2393 000e B04B     		ldr	r3, .L177
 2394 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2395 0014 062B     		cmp	r3, #6
 2396 0016 40F08581 		bne	.L175
 2397              		.loc 1 870 0 is_stmt 0 discriminator 1
 2398 001a AD4B     		ldr	r3, .L177
 2399 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2400 0020 062B     		cmp	r3, #6
 2401 0022 40F07F81 		bne	.L175
 871:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2402              		.loc 1 871 0 is_stmt 1
 2403 0026 7B68     		ldr	r3, [r7, #4]
 2404 0028 1A68     		ldr	r2, [r3]
 2405 002a BB68     		ldr	r3, [r7, #8]
 2406 002c 1A60     		str	r2, [r3]
 872:..\src/interruptions.c ****     
 873:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2407              		.loc 1 873 0
 2408 002e A94B     		ldr	r3, .L177+4
 2409 0030 1B6A     		ldr	r3, [r3, #32]
 2410 0032 B3F52F7F 		cmp	r3, #700
 2411 0036 00F3C280 		bgt	.L158
 2412              	.LBB6:
 874:..\src/interruptions.c ****              
 875:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2413              		.loc 1 875 0
 2414 003a 0023     		movs	r3, #0
 2415 003c FB61     		str	r3, [r7, #28]
 876:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2416              		.loc 1 876 0
 2417 003e 0023     		movs	r3, #0
 2418 0040 BB61     		str	r3, [r7, #24]
 877:..\src/interruptions.c ****         
 878:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2419              		.loc 1 878 0
 2420 0042 A44B     		ldr	r3, .L177+4
 2421 0044 1B6A     		ldr	r3, [r3, #32]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 60


 2422 0046 A24A     		ldr	r2, .L177
 2423 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2424 004c 9342     		cmp	r3, r2
 2425 004e 1ADD     		ble	.L159
 879:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2426              		.loc 1 879 0
 2427 0050 A04B     		ldr	r3, .L177+4
 2428 0052 1B6A     		ldr	r3, [r3, #32]
 2429 0054 9E4A     		ldr	r2, .L177
 2430 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2431 005a 9B1A     		subs	r3, r3, r2
 2432 005c FB61     		str	r3, [r7, #28]
 880:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2433              		.loc 1 880 0
 2434 005e BB68     		ldr	r3, [r7, #8]
 2435 0060 1A68     		ldr	r2, [r3]
 2436 0062 9B4B     		ldr	r3, .L177
 2437 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2438 0068 1946     		mov	r1, r3
 2439 006a FB69     		ldr	r3, [r7, #28]
 2440 006c 03FB01F1 		mul	r1, r3, r1
 2441 0070 974B     		ldr	r3, .L177
 2442 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2443 0076 C3F58063 		rsb	r3, r3, #1024
 2444 007a 91FBF3F3 		sdiv	r3, r1, r3
 2445 007e 1A44     		add	r2, r2, r3
 2446 0080 BB68     		ldr	r3, [r7, #8]
 2447 0082 1A60     		str	r2, [r3]
 2448 0084 21E0     		b	.L160
 2449              	.L159:
 881:..\src/interruptions.c ****             }
 882:..\src/interruptions.c ****             else {
 883:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2450              		.loc 1 883 0
 2451 0086 934B     		ldr	r3, .L177+4
 2452 0088 1A6A     		ldr	r2, [r3, #32]
 2453 008a 914B     		ldr	r3, .L177
 2454 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2455 0090 5B42     		negs	r3, r3
 2456 0092 9A42     		cmp	r2, r3
 2457 0094 19DA     		bge	.L160
 884:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2458              		.loc 1 884 0
 2459 0096 8F4B     		ldr	r3, .L177+4
 2460 0098 1B6A     		ldr	r3, [r3, #32]
 2461 009a 8D4A     		ldr	r2, .L177
 2462 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2463 00a0 1344     		add	r3, r3, r2
 2464 00a2 FB61     		str	r3, [r7, #28]
 885:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2465              		.loc 1 885 0
 2466 00a4 BB68     		ldr	r3, [r7, #8]
 2467 00a6 1A68     		ldr	r2, [r3]
 2468 00a8 894B     		ldr	r3, .L177
 2469 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2470 00ae 1946     		mov	r1, r3
 2471 00b0 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 61


 2472 00b2 03FB01F1 		mul	r1, r3, r1
 2473 00b6 864B     		ldr	r3, .L177
 2474 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
 2475 00bc C3F58063 		rsb	r3, r3, #1024
 2476 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2477 00c4 1A44     		add	r2, r2, r3
 2478 00c6 BB68     		ldr	r3, [r7, #8]
 2479 00c8 1A60     		str	r2, [r3]
 2480              	.L160:
 886:..\src/interruptions.c ****                 }
 887:..\src/interruptions.c ****             }
 888:..\src/interruptions.c **** 
 889:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2481              		.loc 1 889 0
 2482 00ca 824B     		ldr	r3, .L177+4
 2483 00cc 5B6A     		ldr	r3, [r3, #36]
 2484 00ce 804A     		ldr	r2, .L177
 2485 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2486 00d4 9342     		cmp	r3, r2
 2487 00d6 34DD     		ble	.L161
 890:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2488              		.loc 1 890 0
 2489 00d8 7E4B     		ldr	r3, .L177+4
 2490 00da 5B6A     		ldr	r3, [r3, #36]
 2491 00dc 7C4A     		ldr	r2, .L177
 2492 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2493 00e2 9B1A     		subs	r3, r3, r2
 2494 00e4 BB61     		str	r3, [r7, #24]
 891:..\src/interruptions.c ****                 if (motor_idx == 0){
 2495              		.loc 1 891 0
 2496 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2497 00e8 002B     		cmp	r3, #0
 2498 00ea 12D1     		bne	.L162
 892:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2499              		.loc 1 892 0
 2500 00ec BB68     		ldr	r3, [r7, #8]
 2501 00ee 1A68     		ldr	r2, [r3]
 2502 00f0 774B     		ldr	r3, .L177
 2503 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2504 00f6 1946     		mov	r1, r3
 2505 00f8 BB69     		ldr	r3, [r7, #24]
 2506 00fa 03FB01F1 		mul	r1, r3, r1
 2507 00fe 744B     		ldr	r3, .L177
 2508 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2509 0104 C3F58063 		rsb	r3, r3, #1024
 2510 0108 91FBF3F3 		sdiv	r3, r1, r3
 2511 010c 1A44     		add	r2, r2, r3
 2512 010e BB68     		ldr	r3, [r7, #8]
 2513 0110 1A60     		str	r2, [r3]
 2514              	.L162:
 893:..\src/interruptions.c ****                 }
 894:..\src/interruptions.c ****                 if (motor_idx == 1){
 2515              		.loc 1 894 0
 2516 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2517 0114 012B     		cmp	r3, #1
 2518 0116 40F00581 		bne	.L175
 895:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 62


 2519              		.loc 1 895 0
 2520 011a BB68     		ldr	r3, [r7, #8]
 2521 011c 1A68     		ldr	r2, [r3]
 2522 011e 6C4B     		ldr	r3, .L177
 2523 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2524 0124 1946     		mov	r1, r3
 2525 0126 BB69     		ldr	r3, [r7, #24]
 2526 0128 03FB01F1 		mul	r1, r3, r1
 2527 012c 684B     		ldr	r3, .L177
 2528 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2529 0132 C3F58063 		rsb	r3, r3, #1024
 2530 0136 91FBF3F3 		sdiv	r3, r1, r3
 2531 013a D21A     		subs	r2, r2, r3
 2532 013c BB68     		ldr	r3, [r7, #8]
 2533 013e 1A60     		str	r2, [r3]
 2534              	.LBE6:
 896:..\src/interruptions.c ****                 }          
 897:..\src/interruptions.c ****             }
 898:..\src/interruptions.c ****             else {
 899:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 900:..\src/interruptions.c ****                     
 901:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 902:..\src/interruptions.c ****                     if (motor_idx == 0){
 903:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 904:..\src/interruptions.c ****                     }
 905:..\src/interruptions.c ****                     if (motor_idx == 1){
 906:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 907:..\src/interruptions.c ****                     }
 908:..\src/interruptions.c ****                 }
 909:..\src/interruptions.c ****             }
 910:..\src/interruptions.c ****         }
 911:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 912:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 913:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 914:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 915:..\src/interruptions.c **** 
 916:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 917:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 918:..\src/interruptions.c ****                     if (motor_idx == 1){
 919:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 920:..\src/interruptions.c ****                     }
 921:..\src/interruptions.c ****                     if (motor_idx == 0){
 922:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 923:..\src/interruptions.c ****                     }                    
 924:..\src/interruptions.c ****                 }
 925:..\src/interruptions.c ****                 else {
 926:..\src/interruptions.c ****                     if (motor_idx == 0){
 927:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 928:..\src/interruptions.c ****                     }
 929:..\src/interruptions.c ****                     if (motor_idx == 1){
 930:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 931:..\src/interruptions.c ****                     }
 932:..\src/interruptions.c ****                 }
 933:..\src/interruptions.c ****                 
 934:..\src/interruptions.c ****             }
 935:..\src/interruptions.c ****             else {
 936:..\src/interruptions.c ****                 if(pos_sum > 0) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 63


 937:..\src/interruptions.c ****                     if (motor_idx == 0){
 938:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 939:..\src/interruptions.c ****                     }
 940:..\src/interruptions.c ****                     if (motor_idx == 1){
 941:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 942:..\src/interruptions.c ****                     }
 943:..\src/interruptions.c ****                     
 944:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 945:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 946:..\src/interruptions.c ****                     }
 947:..\src/interruptions.c ****                 }
 948:..\src/interruptions.c ****             }
 949:..\src/interruptions.c ****         }
 950:..\src/interruptions.c ****     }           
 951:..\src/interruptions.c **** }
 2535              		.loc 1 951 0
 2536 0140 F0E0     		b	.L175
 2537              	.L161:
 2538              	.LBB7:
 899:..\src/interruptions.c ****                     
 2539              		.loc 1 899 0
 2540 0142 644B     		ldr	r3, .L177+4
 2541 0144 5A6A     		ldr	r2, [r3, #36]
 2542 0146 624B     		ldr	r3, .L177
 2543 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2544 014c 5B42     		negs	r3, r3
 2545 014e 9A42     		cmp	r2, r3
 2546 0150 80F2E880 		bge	.L175
 901:..\src/interruptions.c ****                     if (motor_idx == 0){
 2547              		.loc 1 901 0
 2548 0154 5F4B     		ldr	r3, .L177+4
 2549 0156 5B6A     		ldr	r3, [r3, #36]
 2550 0158 5D4A     		ldr	r2, .L177
 2551 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2552 015e 1344     		add	r3, r3, r2
 2553 0160 BB61     		str	r3, [r7, #24]
 902:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2554              		.loc 1 902 0
 2555 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2556 0164 002B     		cmp	r3, #0
 2557 0166 12D1     		bne	.L165
 903:..\src/interruptions.c ****                     }
 2558              		.loc 1 903 0
 2559 0168 BB68     		ldr	r3, [r7, #8]
 2560 016a 1A68     		ldr	r2, [r3]
 2561 016c 584B     		ldr	r3, .L177
 2562 016e B3F8B032 		ldrh	r3, [r3, #688]
 2563 0172 1946     		mov	r1, r3
 2564 0174 BB69     		ldr	r3, [r7, #24]
 2565 0176 03FB01F1 		mul	r1, r3, r1
 2566 017a 554B     		ldr	r3, .L177
 2567 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2568 0180 C3F58063 		rsb	r3, r3, #1024
 2569 0184 91FBF3F3 		sdiv	r3, r1, r3
 2570 0188 1A44     		add	r2, r2, r3
 2571 018a BB68     		ldr	r3, [r7, #8]
 2572 018c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 64


 2573              	.L165:
 905:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2574              		.loc 1 905 0
 2575 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2576 0190 012B     		cmp	r3, #1
 2577 0192 40F0C780 		bne	.L175
 906:..\src/interruptions.c ****                     }
 2578              		.loc 1 906 0
 2579 0196 BB68     		ldr	r3, [r7, #8]
 2580 0198 1A68     		ldr	r2, [r3]
 2581 019a 4D4B     		ldr	r3, .L177
 2582 019c B3F8B032 		ldrh	r3, [r3, #688]
 2583 01a0 1946     		mov	r1, r3
 2584 01a2 BB69     		ldr	r3, [r7, #24]
 2585 01a4 03FB01F1 		mul	r1, r3, r1
 2586 01a8 494B     		ldr	r3, .L177
 2587 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2588 01ae C3F58063 		rsb	r3, r3, #1024
 2589 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2590 01b6 D21A     		subs	r2, r2, r3
 2591 01b8 BB68     		ldr	r3, [r7, #8]
 2592 01ba 1A60     		str	r2, [r3]
 2593              	.LBE7:
 2594              		.loc 1 951 0
 2595 01bc B2E0     		b	.L175
 2596              	.L158:
 2597              	.LBB8:
 913:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2598              		.loc 1 913 0
 2599 01be 444B     		ldr	r3, .L177
 2600 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2601 01c4 1946     		mov	r1, r3
 2602 01c6 444A     		ldr	r2, .L177+8
 2603 01c8 3423     		movs	r3, #52
 2604 01ca 03FB01F3 		mul	r3, r3, r1
 2605 01ce 1344     		add	r3, r3, r2
 2606 01d0 1A68     		ldr	r2, [r3]
 2607 01d2 3F4B     		ldr	r3, .L177
 2608 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2609 01d8 1846     		mov	r0, r3
 2610 01da 3F49     		ldr	r1, .L177+8
 2611 01dc 3423     		movs	r3, #52
 2612 01de 03FB00F3 		mul	r3, r3, r0
 2613 01e2 0B44     		add	r3, r3, r1
 2614 01e4 0433     		adds	r3, r3, #4
 2615 01e6 1B68     		ldr	r3, [r3]
 2616 01e8 D21A     		subs	r2, r2, r3
 2617 01ea 394B     		ldr	r3, .L177
 2618 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2619 01f0 1846     		mov	r0, r3
 2620 01f2 3749     		ldr	r1, .L177
 2621 01f4 0346     		mov	r3, r0
 2622 01f6 5B00     		lsls	r3, r3, #1
 2623 01f8 0344     		add	r3, r3, r0
 2624 01fa 1B01     		lsls	r3, r3, #4
 2625 01fc 0B44     		add	r3, r3, r1
 2626 01fe 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 65


 2627 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2628 0204 42FA03F3 		asr	r3, r2, r3
 2629 0208 7B61     		str	r3, [r7, #20]
 914:..\src/interruptions.c **** 
 2630              		.loc 1 914 0
 2631 020a 314B     		ldr	r3, .L177
 2632 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2633 0210 1946     		mov	r1, r3
 2634 0212 314A     		ldr	r2, .L177+8
 2635 0214 3423     		movs	r3, #52
 2636 0216 03FB01F3 		mul	r3, r3, r1
 2637 021a 1344     		add	r3, r3, r2
 2638 021c 1A68     		ldr	r2, [r3]
 2639 021e 2C4B     		ldr	r3, .L177
 2640 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2641 0224 1846     		mov	r0, r3
 2642 0226 2C49     		ldr	r1, .L177+8
 2643 0228 3423     		movs	r3, #52
 2644 022a 03FB00F3 		mul	r3, r3, r0
 2645 022e 0B44     		add	r3, r3, r1
 2646 0230 0433     		adds	r3, r3, #4
 2647 0232 1B68     		ldr	r3, [r3]
 2648 0234 1A44     		add	r2, r2, r3
 2649 0236 264B     		ldr	r3, .L177
 2650 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2651 023c 1846     		mov	r0, r3
 2652 023e 2449     		ldr	r1, .L177
 2653 0240 0346     		mov	r3, r0
 2654 0242 5B00     		lsls	r3, r3, #1
 2655 0244 0344     		add	r3, r3, r0
 2656 0246 1B01     		lsls	r3, r3, #4
 2657 0248 0B44     		add	r3, r3, r1
 2658 024a 03F29513 		addw	r3, r3, #405
 2659 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2660 0250 42FA03F3 		asr	r3, r2, r3
 2661 0254 3B61     		str	r3, [r7, #16]
 916:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2662              		.loc 1 916 0
 2663 0256 7B69     		ldr	r3, [r7, #20]
 2664 0258 B3F5FA7F 		cmp	r3, #500
 2665 025c 03DC     		bgt	.L166
 916:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2666              		.loc 1 916 0 is_stmt 0 discriminator 1
 2667 025e 7B69     		ldr	r3, [r7, #20]
 2668 0260 13F5FA7F 		cmn	r3, #500
 2669 0264 3ADA     		bge	.L167
 2670              	.L166:
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2671              		.loc 1 917 0 is_stmt 1
 2672 0266 7B69     		ldr	r3, [r7, #20]
 2673 0268 002B     		cmp	r3, #0
 2674 026a 18DB     		blt	.L168
 918:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2675              		.loc 1 918 0
 2676 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2677 026e 012B     		cmp	r3, #1
 2678 0270 07D1     		bne	.L169
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 66


 919:..\src/interruptions.c ****                     }
 2679              		.loc 1 919 0
 2680 0272 BB68     		ldr	r3, [r7, #8]
 2681 0274 1B68     		ldr	r3, [r3]
 2682 0276 164A     		ldr	r2, .L177
 2683 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2684 027c 1A44     		add	r2, r2, r3
 2685 027e BB68     		ldr	r3, [r7, #8]
 2686 0280 1A60     		str	r2, [r3]
 2687              	.L169:
 921:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2688              		.loc 1 921 0
 2689 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2690 0284 002B     		cmp	r3, #0
 2691 0286 4CD1     		bne	.L176
 922:..\src/interruptions.c ****                     }                    
 2692              		.loc 1 922 0
 2693 0288 BB68     		ldr	r3, [r7, #8]
 2694 028a 1B68     		ldr	r3, [r3]
 2695 028c 104A     		ldr	r2, .L177
 2696 028e B2F8B022 		ldrh	r2, [r2, #688]
 2697 0292 5208     		lsrs	r2, r2, #1
 2698 0294 92B2     		uxth	r2, r2
 2699 0296 9A1A     		subs	r2, r3, r2
 2700 0298 BB68     		ldr	r3, [r7, #8]
 2701 029a 1A60     		str	r2, [r3]
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2702              		.loc 1 917 0
 2703 029c 41E0     		b	.L176
 2704              	.L168:
 926:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2705              		.loc 1 926 0
 2706 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2707 02a0 002B     		cmp	r3, #0
 2708 02a2 07D1     		bne	.L172
 927:..\src/interruptions.c ****                     }
 2709              		.loc 1 927 0
 2710 02a4 BB68     		ldr	r3, [r7, #8]
 2711 02a6 1B68     		ldr	r3, [r3]
 2712 02a8 094A     		ldr	r2, .L177
 2713 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2714 02ae 1A44     		add	r2, r2, r3
 2715 02b0 BB68     		ldr	r3, [r7, #8]
 2716 02b2 1A60     		str	r2, [r3]
 2717              	.L172:
 929:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2718              		.loc 1 929 0
 2719 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2720 02b6 012B     		cmp	r3, #1
 2721 02b8 33D1     		bne	.L176
 930:..\src/interruptions.c ****                     }
 2722              		.loc 1 930 0
 2723 02ba BB68     		ldr	r3, [r7, #8]
 2724 02bc 1B68     		ldr	r3, [r3]
 2725 02be 044A     		ldr	r2, .L177
 2726 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2727 02c4 5208     		lsrs	r2, r2, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 67


 2728 02c6 92B2     		uxth	r2, r2
 2729 02c8 9A1A     		subs	r2, r3, r2
 2730 02ca BB68     		ldr	r3, [r7, #8]
 2731 02cc 1A60     		str	r2, [r3]
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2732              		.loc 1 917 0
 2733 02ce 28E0     		b	.L176
 2734              	.L178:
 2735              		.align	2
 2736              	.L177:
 2737 02d0 00000000 		.word	c_mem
 2738 02d4 00000000 		.word	g_adc_meas
 2739 02d8 00000000 		.word	g_meas
 2740              	.L167:
 936:..\src/interruptions.c ****                     if (motor_idx == 0){
 2741              		.loc 1 936 0
 2742 02dc 3B69     		ldr	r3, [r7, #16]
 2743 02de 002B     		cmp	r3, #0
 2744 02e0 20DD     		ble	.L175
 937:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2745              		.loc 1 937 0
 2746 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2747 02e4 002B     		cmp	r3, #0
 2748 02e6 08D1     		bne	.L173
 938:..\src/interruptions.c ****                     }
 2749              		.loc 1 938 0
 2750 02e8 BB68     		ldr	r3, [r7, #8]
 2751 02ea 1A68     		ldr	r2, [r3]
 2752 02ec 104B     		ldr	r3, .L179
 2753 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2754 02f2 5B00     		lsls	r3, r3, #1
 2755 02f4 D21A     		subs	r2, r2, r3
 2756 02f6 BB68     		ldr	r3, [r7, #8]
 2757 02f8 1A60     		str	r2, [r3]
 2758              	.L173:
 940:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2759              		.loc 1 940 0
 2760 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2761 02fc 012B     		cmp	r3, #1
 2762 02fe 08D1     		bne	.L174
 941:..\src/interruptions.c ****                     }
 2763              		.loc 1 941 0
 2764 0300 BB68     		ldr	r3, [r7, #8]
 2765 0302 1A68     		ldr	r2, [r3]
 2766 0304 0A4B     		ldr	r3, .L179
 2767 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2768 030a 5B00     		lsls	r3, r3, #1
 2769 030c D21A     		subs	r2, r2, r3
 2770 030e BB68     		ldr	r3, [r7, #8]
 2771 0310 1A60     		str	r2, [r3]
 2772              	.L174:
 944:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2773              		.loc 1 944 0
 2774 0312 BB68     		ldr	r3, [r7, #8]
 2775 0314 1B68     		ldr	r3, [r3]
 2776 0316 002B     		cmp	r3, #0
 2777 0318 04DA     		bge	.L175
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 68


 945:..\src/interruptions.c ****                     }
 2778              		.loc 1 945 0
 2779 031a BB68     		ldr	r3, [r7, #8]
 2780 031c 0022     		movs	r2, #0
 2781 031e 1A60     		str	r2, [r3]
 2782              	.LBE8:
 2783              		.loc 1 951 0
 2784 0320 00E0     		b	.L175
 2785              	.L176:
 2786              	.LBB9:
 917:..\src/interruptions.c ****                     if (motor_idx == 1){
 2787              		.loc 1 917 0
 2788 0322 00BF     		nop
 2789              	.L175:
 2790              	.LBE9:
 2791              		.loc 1 951 0
 2792 0324 00BF     		nop
 2793 0326 2437     		adds	r7, r7, #36
 2794              		.cfi_def_cfa_offset 4
 2795 0328 BD46     		mov	sp, r7
 2796              		.cfi_def_cfa_register 13
 2797              		@ sp needed
 2798 032a 80BC     		pop	{r7}
 2799              		.cfi_restore 7
 2800              		.cfi_def_cfa_offset 0
 2801 032c 7047     		bx	lr
 2802              	.L180:
 2803 032e 00BF     		.align	2
 2804              	.L179:
 2805 0330 00000000 		.word	c_mem
 2806              		.cfi_endproc
 2807              	.LFE69:
 2808              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2809              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2810              		.align	2
 2811              		.global	compute_SoftHand_2_motors_emg_reference
 2812              		.thumb
 2813              		.thumb_func
 2814              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2815              	compute_SoftHand_2_motors_emg_reference:
 2816              	.LFB70:
 952:..\src/interruptions.c **** 
 953:..\src/interruptions.c **** 
 954:..\src/interruptions.c **** //==============================================================================
 955:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 956:..\src/interruptions.c **** //==============================================================================
 957:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 958:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2817              		.loc 1 958 0
 2818              		.cfi_startproc
 2819              		@ args = 4, pretend = 0, frame = 16
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 0000 80B5     		push	{r7, lr}
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 7, -8
 2824              		.cfi_offset 14, -4
 2825 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 69


 2826              		.cfi_def_cfa_offset 24
 2827 0004 00AF     		add	r7, sp, #0
 2828              		.cfi_def_cfa_register 7
 2829 0006 B960     		str	r1, [r7, #8]
 2830 0008 7A60     		str	r2, [r7, #4]
 2831 000a 3B60     		str	r3, [r7]
 2832 000c 0346     		mov	r3, r0
 2833 000e FB73     		strb	r3, [r7, #15]
 959:..\src/interruptions.c ****     
 960:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 961:..\src/interruptions.c ****     static uint8 fsm_state;     
 962:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2834              		.loc 1 962 0
 2835 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2836 0012 002B     		cmp	r3, #0
 2837 0014 05D1     		bne	.L182
 963:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2838              		.loc 1 963 0
 2839 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2840 001a 0346     		mov	r3, r0
 2841 001c 1A46     		mov	r2, r3
 2842 001e 614B     		ldr	r3, .L197
 2843 0020 1A70     		strb	r2, [r3]
 2844              	.L182:
 964:..\src/interruptions.c ****     }
 965:..\src/interruptions.c ****        
 966:..\src/interruptions.c ****     switch (fsm_state){
 2845              		.loc 1 966 0
 2846 0022 604B     		ldr	r3, .L197
 2847 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2848 0026 032B     		cmp	r3, #3
 2849 0028 00F2B780 		bhi	.L194
 2850 002c 01A2     		adr	r2, .L185
 2851 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2852 0032 00BF     		.p2align 2
 2853              	.L185:
 2854 0034 45000000 		.word	.L184+1
 2855 0038 45000000 		.word	.L184+1
 2856 003c BF000000 		.word	.L186+1
 2857 0040 4F000000 		.word	.L187+1
 2858              		.p2align 1
 2859              	.L184:
 967:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 968:..\src/interruptions.c ****              
 969:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2860              		.loc 1 969 0
 2861 0044 7B68     		ldr	r3, [r7, #4]
 2862 0046 1A68     		ldr	r2, [r3]
 2863 0048 BB68     		ldr	r3, [r7, #8]
 2864 004a 1A60     		str	r2, [r3]
 970:..\src/interruptions.c ****     
 971:..\src/interruptions.c ****             break;
 2865              		.loc 1 971 0
 2866 004c A5E0     		b	.L183
 2867              	.L187:
 972:..\src/interruptions.c ****         
 973:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 70


 974:..\src/interruptions.c **** 
 975:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2868              		.loc 1 975 0
 2869 004e 3B68     		ldr	r3, [r7]
 2870 0050 002B     		cmp	r3, #0
 2871 0052 17DD     		ble	.L188
 2872              		.loc 1 975 0 is_stmt 0 discriminator 1
 2873 0054 3A68     		ldr	r2, [r7]
 2874 0056 BB69     		ldr	r3, [r7, #24]
 2875 0058 9A42     		cmp	r2, r3
 2876 005a 13DD     		ble	.L188
 976:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2877              		.loc 1 976 0 is_stmt 1
 2878 005c 7B68     		ldr	r3, [r7, #4]
 2879 005e 1A68     		ldr	r2, [r3]
 2880 0060 514B     		ldr	r3, .L197+4
 2881 0062 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2882 0066 1946     		mov	r1, r3
 2883 0068 3B68     		ldr	r3, [r7]
 2884 006a 03FB01F3 		mul	r3, r3, r1
 2885 006e 9900     		lsls	r1, r3, #2
 2886 0070 4E4B     		ldr	r3, .L197+8
 2887 0072 B3F8F031 		ldrh	r3, [r3, #496]
 2888 0076 C3F58063 		rsb	r3, r3, #1024
 2889 007a 91FBF3F3 		sdiv	r3, r1, r3
 2890 007e 1A44     		add	r2, r2, r3
 2891 0080 BB68     		ldr	r3, [r7, #8]
 2892 0082 1A60     		str	r2, [r3]
 2893              	.L188:
 977:..\src/interruptions.c ****             }
 978:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2894              		.loc 1 978 0
 2895 0084 BB69     		ldr	r3, [r7, #24]
 2896 0086 002B     		cmp	r3, #0
 2897 0088 40F38480 		ble	.L195
 2898              		.loc 1 978 0 is_stmt 0 discriminator 1
 2899 008c BA69     		ldr	r2, [r7, #24]
 2900 008e 3B68     		ldr	r3, [r7]
 2901 0090 9A42     		cmp	r2, r3
 2902 0092 7FDD     		ble	.L195
 979:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2903              		.loc 1 979 0 is_stmt 1
 2904 0094 7B68     		ldr	r3, [r7, #4]
 2905 0096 1A68     		ldr	r2, [r3]
 2906 0098 434B     		ldr	r3, .L197+4
 2907 009a 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2908 009e 1946     		mov	r1, r3
 2909 00a0 BB69     		ldr	r3, [r7, #24]
 2910 00a2 03FB01F3 		mul	r3, r3, r1
 2911 00a6 9900     		lsls	r1, r3, #2
 2912 00a8 404B     		ldr	r3, .L197+8
 2913 00aa B3F8F231 		ldrh	r3, [r3, #498]
 2914 00ae C3F58063 		rsb	r3, r3, #1024
 2915 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2916 00b6 D21A     		subs	r2, r2, r3
 2917 00b8 BB68     		ldr	r3, [r7, #8]
 2918 00ba 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 71


 980:..\src/interruptions.c ****             }
 981:..\src/interruptions.c ****             
 982:..\src/interruptions.c ****             break;
 2919              		.loc 1 982 0
 2920 00bc 6AE0     		b	.L195
 2921              	.L186:
 983:..\src/interruptions.c ****             
 984:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
 985:..\src/interruptions.c ****             
 986:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2922              		.loc 1 986 0
 2923 00be 3B68     		ldr	r3, [r7]
 2924 00c0 002B     		cmp	r3, #0
 2925 00c2 31DD     		ble	.L190
 2926              		.loc 1 986 0 is_stmt 0 discriminator 1
 2927 00c4 3A68     		ldr	r2, [r7]
 2928 00c6 BB69     		ldr	r3, [r7, #24]
 2929 00c8 9A42     		cmp	r2, r3
 2930 00ca 2DDD     		ble	.L190
 987:..\src/interruptions.c ****                 if (motor_idx == 0){
 2931              		.loc 1 987 0 is_stmt 1
 2932 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2933 00ce 002B     		cmp	r3, #0
 2934 00d0 13D1     		bne	.L191
 988:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2935              		.loc 1 988 0
 2936 00d2 7B68     		ldr	r3, [r7, #4]
 2937 00d4 1A68     		ldr	r2, [r3]
 2938 00d6 344B     		ldr	r3, .L197+4
 2939 00d8 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2940 00dc 1946     		mov	r1, r3
 2941 00de 3B68     		ldr	r3, [r7]
 2942 00e0 03FB01F3 		mul	r3, r3, r1
 2943 00e4 9900     		lsls	r1, r3, #2
 2944 00e6 314B     		ldr	r3, .L197+8
 2945 00e8 B3F8F031 		ldrh	r3, [r3, #496]
 2946 00ec C3F58063 		rsb	r3, r3, #1024
 2947 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2948 00f4 1A44     		add	r2, r2, r3
 2949 00f6 BB68     		ldr	r3, [r7, #8]
 2950 00f8 1A60     		str	r2, [r3]
 2951              	.L191:
 989:..\src/interruptions.c ****                 }
 990:..\src/interruptions.c ****                 if (motor_idx == 1){
 2952              		.loc 1 990 0
 2953 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2954 00fc 012B     		cmp	r3, #1
 2955 00fe 13D1     		bne	.L190
 991:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2956              		.loc 1 991 0
 2957 0100 7B68     		ldr	r3, [r7, #4]
 2958 0102 1A68     		ldr	r2, [r3]
 2959 0104 284B     		ldr	r3, .L197+4
 2960 0106 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 2961 010a 1946     		mov	r1, r3
 2962 010c 3B68     		ldr	r3, [r7]
 2963 010e 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 72


 2964 0112 9900     		lsls	r1, r3, #2
 2965 0114 254B     		ldr	r3, .L197+8
 2966 0116 B3F8F031 		ldrh	r3, [r3, #496]
 2967 011a C3F58063 		rsb	r3, r3, #1024
 2968 011e 91FBF3F3 		sdiv	r3, r1, r3
 2969 0122 D21A     		subs	r2, r2, r3
 2970 0124 BB68     		ldr	r3, [r7, #8]
 2971 0126 1A60     		str	r2, [r3]
 2972              	.L190:
 992:..\src/interruptions.c ****                 }   
 993:..\src/interruptions.c ****             }
 994:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2973              		.loc 1 994 0
 2974 0128 BB69     		ldr	r3, [r7, #24]
 2975 012a 002B     		cmp	r3, #0
 2976 012c 34DD     		ble	.L196
 2977              		.loc 1 994 0 is_stmt 0 discriminator 1
 2978 012e BA69     		ldr	r2, [r7, #24]
 2979 0130 3B68     		ldr	r3, [r7]
 2980 0132 9A42     		cmp	r2, r3
 2981 0134 30DD     		ble	.L196
 995:..\src/interruptions.c ****                 if (motor_idx == 0){
 2982              		.loc 1 995 0 is_stmt 1
 2983 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2984 0138 002B     		cmp	r3, #0
 2985 013a 13D1     		bne	.L193
 996:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2986              		.loc 1 996 0
 2987 013c 7B68     		ldr	r3, [r7, #4]
 2988 013e 1A68     		ldr	r2, [r3]
 2989 0140 194B     		ldr	r3, .L197+4
 2990 0142 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2991 0146 1946     		mov	r1, r3
 2992 0148 BB69     		ldr	r3, [r7, #24]
 2993 014a 03FB01F3 		mul	r3, r3, r1
 2994 014e 9900     		lsls	r1, r3, #2
 2995 0150 164B     		ldr	r3, .L197+8
 2996 0152 B3F8F231 		ldrh	r3, [r3, #498]
 2997 0156 C3F58063 		rsb	r3, r3, #1024
 2998 015a 91FBF3F3 		sdiv	r3, r1, r3
 2999 015e D21A     		subs	r2, r2, r3
 3000 0160 BB68     		ldr	r3, [r7, #8]
 3001 0162 1A60     		str	r2, [r3]
 3002              	.L193:
 997:..\src/interruptions.c ****                 }
 998:..\src/interruptions.c ****                 if (motor_idx == 1){
 3003              		.loc 1 998 0
 3004 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3005 0166 012B     		cmp	r3, #1
 3006 0168 16D1     		bne	.L196
 999:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3007              		.loc 1 999 0
 3008 016a 7B68     		ldr	r3, [r7, #4]
 3009 016c 1A68     		ldr	r2, [r3]
 3010 016e 0E4B     		ldr	r3, .L197+4
 3011 0170 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 3012 0174 1946     		mov	r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 73


 3013 0176 BB69     		ldr	r3, [r7, #24]
 3014 0178 03FB01F3 		mul	r3, r3, r1
 3015 017c 9900     		lsls	r1, r3, #2
 3016 017e 0B4B     		ldr	r3, .L197+8
 3017 0180 B3F8F231 		ldrh	r3, [r3, #498]
 3018 0184 C3F58063 		rsb	r3, r3, #1024
 3019 0188 91FBF3F3 		sdiv	r3, r1, r3
 3020 018c 1A44     		add	r2, r2, r3
 3021 018e BB68     		ldr	r3, [r7, #8]
 3022 0190 1A60     		str	r2, [r3]
1000:..\src/interruptions.c ****                 }
1001:..\src/interruptions.c ****             }
1002:..\src/interruptions.c ****             
1003:..\src/interruptions.c ****             break;
 3023              		.loc 1 1003 0
 3024 0192 01E0     		b	.L196
 3025              	.L195:
 982:..\src/interruptions.c ****             
 3026              		.loc 1 982 0
 3027 0194 00BF     		nop
 3028 0196 00E0     		b	.L194
 3029              	.L196:
 3030              		.loc 1 1003 0
 3031 0198 00BF     		nop
 3032              	.L183:
 3033              	.L194:
1004:..\src/interruptions.c ****     }
1005:..\src/interruptions.c ****  
1006:..\src/interruptions.c **** }
 3034              		.loc 1 1006 0
 3035 019a 00BF     		nop
 3036 019c 1037     		adds	r7, r7, #16
 3037              		.cfi_def_cfa_offset 8
 3038 019e BD46     		mov	sp, r7
 3039              		.cfi_def_cfa_register 13
 3040              		@ sp needed
 3041 01a0 80BD     		pop	{r7, pc}
 3042              	.L198:
 3043 01a2 00BF     		.align	2
 3044              	.L197:
 3045 01a4 8E000000 		.word	fsm_state.10545
 3046 01a8 00000000 		.word	g_mem
 3047 01ac 00000000 		.word	c_mem
 3048              		.cfi_endproc
 3049              	.LFE70:
 3050              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3051              		.section	.text.motor_control_SH,"ax",%progbits
 3052              		.align	2
 3053              		.global	motor_control_SH
 3054              		.thumb
 3055              		.thumb_func
 3056              		.type	motor_control_SH, %function
 3057              	motor_control_SH:
 3058              	.LFB71:
1007:..\src/interruptions.c **** 
1008:..\src/interruptions.c **** //==============================================================================
1009:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 74


1010:..\src/interruptions.c **** //==============================================================================
1011:..\src/interruptions.c **** void motor_control_SH() {
 3059              		.loc 1 1011 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 80
 3062              		@ frame_needed = 1, uses_anonymous_args = 0
 3063 0000 80B5     		push	{r7, lr}
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 7, -8
 3066              		.cfi_offset 14, -4
 3067 0002 94B0     		sub	sp, sp, #80
 3068              		.cfi_def_cfa_offset 88
 3069 0004 00AF     		add	r7, sp, #0
 3070              		.cfi_def_cfa_register 7
1012:..\src/interruptions.c **** 
1013:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3071              		.loc 1 1013 0
 3072 0006 0023     		movs	r3, #0
 3073 0008 FB64     		str	r3, [r7, #76]
1014:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1015:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1016:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1017:..\src/interruptions.c ****  
1018:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3074              		.loc 1 1018 0
 3075 000a 0023     		movs	r3, #0
 3076 000c 87F84730 		strb	r3, [r7, #71]
1019:..\src/interruptions.c ****     
1020:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3077              		.loc 1 1020 0
 3078 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3079 0014 1346     		mov	r3, r2
 3080 0016 DB00     		lsls	r3, r3, #3
 3081 0018 9B1A     		subs	r3, r3, r2
 3082 001a 1B01     		lsls	r3, r3, #4
 3083 001c B033     		adds	r3, r3, #176
 3084 001e 9D4A     		ldr	r2, .L260
 3085 0020 1344     		add	r3, r3, r2
 3086 0022 3B64     		str	r3, [r7, #64]
1021:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3087              		.loc 1 1021 0
 3088 0024 3B6C     		ldr	r3, [r7, #64]
 3089 0026 93F86030 		ldrb	r3, [r3, #96]
 3090 002a 87F83F30 		strb	r3, [r7, #63]
1022:..\src/interruptions.c ****     
1023:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3091              		.loc 1 1023 0
 3092 002e 3B6C     		ldr	r3, [r7, #64]
 3093 0030 1B68     		ldr	r3, [r3]
 3094 0032 BB63     		str	r3, [r7, #56]
1024:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3095              		.loc 1 1024 0
 3096 0034 3B6C     		ldr	r3, [r7, #64]
 3097 0036 5B68     		ldr	r3, [r3, #4]
 3098 0038 7B63     		str	r3, [r7, #52]
1025:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3099              		.loc 1 1025 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 75


 3100 003a 3B6C     		ldr	r3, [r7, #64]
 3101 003c 9B68     		ldr	r3, [r3, #8]
 3102 003e 3B63     		str	r3, [r7, #48]
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3103              		.loc 1 1027 0
 3104 0040 3B6C     		ldr	r3, [r7, #64]
 3105 0042 DB68     		ldr	r3, [r3, #12]
 3106 0044 FB62     		str	r3, [r7, #44]
1028:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3107              		.loc 1 1028 0
 3108 0046 3B6C     		ldr	r3, [r7, #64]
 3109 0048 1B69     		ldr	r3, [r3, #16]
 3110 004a BB62     		str	r3, [r7, #40]
1029:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3111              		.loc 1 1029 0
 3112 004c 3B6C     		ldr	r3, [r7, #64]
 3113 004e 5B69     		ldr	r3, [r3, #20]
 3114 0050 7B62     		str	r3, [r7, #36]
1030:..\src/interruptions.c **** 
1031:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3115              		.loc 1 1031 0
 3116 0052 3B6C     		ldr	r3, [r7, #64]
 3117 0054 9B69     		ldr	r3, [r3, #24]
 3118 0056 3B62     		str	r3, [r7, #32]
1032:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3119              		.loc 1 1032 0
 3120 0058 3B6C     		ldr	r3, [r7, #64]
 3121 005a DB69     		ldr	r3, [r3, #28]
 3122 005c FB61     		str	r3, [r7, #28]
1033:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3123              		.loc 1 1033 0
 3124 005e 3B6C     		ldr	r3, [r7, #64]
 3125 0060 1B6A     		ldr	r3, [r3, #32]
 3126 0062 BB61     		str	r3, [r7, #24]
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3127              		.loc 1 1035 0
 3128 0064 3B6C     		ldr	r3, [r7, #64]
 3129 0066 5B6A     		ldr	r3, [r3, #36]
 3130 0068 7B61     		str	r3, [r7, #20]
1036:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3131              		.loc 1 1036 0
 3132 006a 3B6C     		ldr	r3, [r7, #64]
 3133 006c 9B6A     		ldr	r3, [r3, #40]
 3134 006e 3B61     		str	r3, [r7, #16]
1037:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3135              		.loc 1 1037 0
 3136 0070 3B6C     		ldr	r3, [r7, #64]
 3137 0072 DB6A     		ldr	r3, [r3, #44]
 3138 0074 FB60     		str	r3, [r7, #12]
1038:..\src/interruptions.c **** 
1039:..\src/interruptions.c ****     // Static Variables
1040:..\src/interruptions.c **** 
1041:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1042:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1043:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 76


1044:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1045:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1046:..\src/interruptions.c ****     static int32 prev_pwm;
1047:..\src/interruptions.c **** 
1048:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1049:..\src/interruptions.c ****     static uint32 position_counter = 0;
1050:..\src/interruptions.c ****   
1051:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1052:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3139              		.loc 1 1052 0
 3140 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3141 007a 1B01     		lsls	r3, r3, #4
 3142 007c 864A     		ldr	r2, .L260+4
 3143 007e 9918     		adds	r1, r3, r2
 3144 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3145 0084 1B01     		lsls	r3, r3, #4
 3146 0086 854A     		ldr	r2, .L260+8
 3147 0088 1A44     		add	r2, r2, r3
 3148 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3149 008e 1846     		mov	r0, r3
 3150 0090 FFF7FEFF 		bl	compute_reference
1053:..\src/interruptions.c ****      
1054:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3151              		.loc 1 1054 0
 3152 0094 3B6C     		ldr	r3, [r7, #64]
 3153 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3154 009a 032B     		cmp	r3, #3
 3155 009c 00F2F781 		bhi	.L200
 3156 00a0 01A2     		adr	r2, .L202
 3157 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3158 00a6 00BF     		.p2align 2
 3159              	.L202:
 3160 00a8 55020000 		.word	.L201+1
 3161 00ac 49040000 		.word	.L203+1
 3162 00b0 3B030000 		.word	.L204+1
 3163 00b4 B9000000 		.word	.L205+1
 3164              		.p2align 1
 3165              	.L205:
1055:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1056:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1057:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3166              		.loc 1 1057 0
 3167 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3168 00bc 764A     		ldr	r2, .L260+4
 3169 00be 1B01     		lsls	r3, r3, #4
 3170 00c0 1344     		add	r3, r3, r2
 3171 00c2 1A68     		ldr	r2, [r3]
 3172 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3173 00c8 7549     		ldr	r1, .L260+12
 3174 00ca 3420     		movs	r0, #52
 3175 00cc 00FB03F3 		mul	r3, r0, r3
 3176 00d0 0B44     		add	r3, r3, r1
 3177 00d2 1B68     		ldr	r3, [r3]
 3178 00d4 D31A     		subs	r3, r2, r3
 3179 00d6 BB60     		str	r3, [r7, #8]
1058:..\src/interruptions.c **** 
1059:..\src/interruptions.c ****             pos_error_sum += pos_error;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 77


 3180              		.loc 1 1059 0
 3181 00d8 724B     		ldr	r3, .L260+16
 3182 00da 1A68     		ldr	r2, [r3]
 3183 00dc BB68     		ldr	r3, [r7, #8]
 3184 00de 1344     		add	r3, r3, r2
 3185 00e0 704A     		ldr	r2, .L260+16
 3186 00e2 1360     		str	r3, [r2]
1060:..\src/interruptions.c **** 
1061:..\src/interruptions.c ****             // error_sum saturation
1062:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3187              		.loc 1 1062 0
 3188 00e4 6F4B     		ldr	r3, .L260+16
 3189 00e6 1B68     		ldr	r3, [r3]
 3190 00e8 6F4A     		ldr	r2, .L260+20
 3191 00ea 9342     		cmp	r3, r2
 3192 00ec 03DD     		ble	.L206
1063:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3193              		.loc 1 1063 0
 3194 00ee 6D4B     		ldr	r3, .L260+16
 3195 00f0 6D4A     		ldr	r2, .L260+20
 3196 00f2 1A60     		str	r2, [r3]
 3197 00f4 07E0     		b	.L207
 3198              	.L206:
1064:..\src/interruptions.c ****             else {
1065:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3199              		.loc 1 1065 0
 3200 00f6 6B4B     		ldr	r3, .L260+16
 3201 00f8 1B68     		ldr	r3, [r3]
 3202 00fa 6C4A     		ldr	r2, .L260+24
 3203 00fc 9342     		cmp	r3, r2
 3204 00fe 02DA     		bge	.L207
1066:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3205              		.loc 1 1066 0
 3206 0100 684B     		ldr	r3, .L260+16
 3207 0102 6A4A     		ldr	r2, .L260+24
 3208 0104 1A60     		str	r2, [r3]
 3209              	.L207:
1067:..\src/interruptions.c ****             }
1068:..\src/interruptions.c ****             
1069:..\src/interruptions.c ****             // ------ position PID control ------
1070:..\src/interruptions.c **** 
1071:..\src/interruptions.c ****             i_ref = 0;
 3210              		.loc 1 1071 0
 3211 0106 0023     		movs	r3, #0
 3212 0108 BB64     		str	r3, [r7, #72]
1072:..\src/interruptions.c ****             
1073:..\src/interruptions.c ****             // Proportional
1074:..\src/interruptions.c ****             if (k_p_dl != 0)
 3213              		.loc 1 1074 0
 3214 010a 3B6A     		ldr	r3, [r7, #32]
 3215 010c 002B     		cmp	r3, #0
 3216 010e 07D0     		beq	.L208
1075:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3217              		.loc 1 1075 0
 3218 0110 3B6A     		ldr	r3, [r7, #32]
 3219 0112 BA68     		ldr	r2, [r7, #8]
 3220 0114 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 78


 3221 0118 1B14     		asrs	r3, r3, #16
 3222 011a BA6C     		ldr	r2, [r7, #72]
 3223 011c 1344     		add	r3, r3, r2
 3224 011e BB64     		str	r3, [r7, #72]
 3225              	.L208:
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****             // Integral
1078:..\src/interruptions.c ****             if (k_i_dl != 0)
 3226              		.loc 1 1078 0
 3227 0120 FB69     		ldr	r3, [r7, #28]
 3228 0122 002B     		cmp	r3, #0
 3229 0124 08D0     		beq	.L209
1079:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3230              		.loc 1 1079 0
 3231 0126 5F4B     		ldr	r3, .L260+16
 3232 0128 1B68     		ldr	r3, [r3]
 3233 012a FA69     		ldr	r2, [r7, #28]
 3234 012c 02FB03F3 		mul	r3, r2, r3
 3235 0130 1B14     		asrs	r3, r3, #16
 3236 0132 BA6C     		ldr	r2, [r7, #72]
 3237 0134 1344     		add	r3, r3, r2
 3238 0136 BB64     		str	r3, [r7, #72]
 3239              	.L209:
1080:..\src/interruptions.c **** 
1081:..\src/interruptions.c ****             // Derivative
1082:..\src/interruptions.c ****             if (k_d_dl != 0)
 3240              		.loc 1 1082 0
 3241 0138 BB69     		ldr	r3, [r7, #24]
 3242 013a 002B     		cmp	r3, #0
 3243 013c 0AD0     		beq	.L210
1083:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3244              		.loc 1 1083 0
 3245 013e 5C4B     		ldr	r3, .L260+28
 3246 0140 1B68     		ldr	r3, [r3]
 3247 0142 BA68     		ldr	r2, [r7, #8]
 3248 0144 D31A     		subs	r3, r2, r3
 3249 0146 BA69     		ldr	r2, [r7, #24]
 3250 0148 02FB03F3 		mul	r3, r2, r3
 3251 014c 1B14     		asrs	r3, r3, #16
 3252 014e BA6C     		ldr	r2, [r7, #72]
 3253 0150 1344     		add	r3, r3, r2
 3254 0152 BB64     		str	r3, [r7, #72]
 3255              	.L210:
1084:..\src/interruptions.c ****                         
1085:..\src/interruptions.c ****             // Update previous position
1086:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3256              		.loc 1 1086 0
 3257 0154 564A     		ldr	r2, .L260+28
 3258 0156 BB68     		ldr	r3, [r7, #8]
 3259 0158 1360     		str	r3, [r2]
1087:..\src/interruptions.c **** 
1088:..\src/interruptions.c ****             // motor direction depends on i_ref
1089:..\src/interruptions.c ****             if (i_ref >= 0)
 3260              		.loc 1 1089 0
 3261 015a BB6C     		ldr	r3, [r7, #72]
 3262 015c 002B     		cmp	r3, #0
 3263 015e 03DB     		blt	.L211
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 79


1090:..\src/interruptions.c ****                 motor_dir = TRUE;
 3264              		.loc 1 1090 0
 3265 0160 544B     		ldr	r3, .L260+32
 3266 0162 0122     		movs	r2, #1
 3267 0164 1A70     		strb	r2, [r3]
 3268 0166 02E0     		b	.L212
 3269              	.L211:
1091:..\src/interruptions.c ****             else
1092:..\src/interruptions.c ****                 motor_dir = FALSE;
 3270              		.loc 1 1092 0
 3271 0168 524B     		ldr	r3, .L260+32
 3272 016a 0022     		movs	r2, #0
 3273 016c 1A70     		strb	r2, [r3]
 3274              	.L212:
1093:..\src/interruptions.c **** 
1094:..\src/interruptions.c ****             // saturate max current
1095:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3275              		.loc 1 1095 0
 3276 016e 3B6C     		ldr	r3, [r7, #64]
 3277 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 3278 0174 1A46     		mov	r2, r3
 3279 0176 BB6C     		ldr	r3, [r7, #72]
 3280 0178 9A42     		cmp	r2, r3
 3281 017a 04DA     		bge	.L213
1096:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3282              		.loc 1 1096 0
 3283 017c 3B6C     		ldr	r3, [r7, #64]
 3284 017e B3F95C30 		ldrsh	r3, [r3, #92]
 3285 0182 BB64     		str	r3, [r7, #72]
 3286 0184 0BE0     		b	.L214
 3287              	.L213:
1097:..\src/interruptions.c ****             else {
1098:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3288              		.loc 1 1098 0
 3289 0186 3B6C     		ldr	r3, [r7, #64]
 3290 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 3291 018c 5A42     		negs	r2, r3
 3292 018e BB6C     		ldr	r3, [r7, #72]
 3293 0190 9A42     		cmp	r2, r3
 3294 0192 04DD     		ble	.L214
1099:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3295              		.loc 1 1099 0
 3296 0194 3B6C     		ldr	r3, [r7, #64]
 3297 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 3298 019a 5B42     		negs	r3, r3
 3299 019c BB64     		str	r3, [r7, #72]
 3300              	.L214:
1100:..\src/interruptions.c ****         	}
1101:..\src/interruptions.c **** 
1102:..\src/interruptions.c ****             // current error and curr error sum
1103:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3301              		.loc 1 1103 0
 3302 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3303 01a2 3F4A     		ldr	r2, .L260+12
 3304 01a4 3421     		movs	r1, #52
 3305 01a6 01FB03F3 		mul	r3, r1, r3
 3306 01aa 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 80


 3307 01ac 0C33     		adds	r3, r3, #12
 3308 01ae 1B68     		ldr	r3, [r3]
 3309 01b0 BA6C     		ldr	r2, [r7, #72]
 3310 01b2 D31A     		subs	r3, r2, r3
 3311 01b4 7B60     		str	r3, [r7, #4]
1104:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3312              		.loc 1 1104 0
 3313 01b6 404B     		ldr	r3, .L260+36
 3314 01b8 1A68     		ldr	r2, [r3]
 3315 01ba 7B68     		ldr	r3, [r7, #4]
 3316 01bc 1344     		add	r3, r3, r2
 3317 01be 3E4A     		ldr	r2, .L260+36
 3318 01c0 1360     		str	r3, [r2]
1105:..\src/interruptions.c ****             
1106:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3319              		.loc 1 1106 0
 3320 01c2 3D4B     		ldr	r3, .L260+36
 3321 01c4 1B68     		ldr	r3, [r3]
 3322 01c6 3D4A     		ldr	r2, .L260+40
 3323 01c8 9342     		cmp	r3, r2
 3324 01ca 03DD     		ble	.L215
1107:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3325              		.loc 1 1107 0
 3326 01cc 3A4B     		ldr	r3, .L260+36
 3327 01ce 3B4A     		ldr	r2, .L260+40
 3328 01d0 1A60     		str	r2, [r3]
 3329 01d2 07E0     		b	.L216
 3330              	.L215:
1108:..\src/interruptions.c ****             else {
1109:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3331              		.loc 1 1109 0
 3332 01d4 384B     		ldr	r3, .L260+36
 3333 01d6 1B68     		ldr	r3, [r3]
 3334 01d8 394A     		ldr	r2, .L260+44
 3335 01da 9342     		cmp	r3, r2
 3336 01dc 02DA     		bge	.L216
1110:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3337              		.loc 1 1110 0
 3338 01de 364B     		ldr	r3, .L260+36
 3339 01e0 374A     		ldr	r2, .L260+44
 3340 01e2 1A60     		str	r2, [r3]
 3341              	.L216:
1111:..\src/interruptions.c ****             }
1112:..\src/interruptions.c **** 
1113:..\src/interruptions.c ****             // ----- current PID control -----
1114:..\src/interruptions.c **** 
1115:..\src/interruptions.c ****             pwm_input = 0;
 3342              		.loc 1 1115 0
 3343 01e4 0023     		movs	r3, #0
 3344 01e6 FB64     		str	r3, [r7, #76]
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****             // Proportional
1118:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3345              		.loc 1 1118 0
 3346 01e8 7B69     		ldr	r3, [r7, #20]
 3347 01ea 002B     		cmp	r3, #0
 3348 01ec 07D0     		beq	.L217
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 81


1119:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3349              		.loc 1 1119 0
 3350 01ee 7B69     		ldr	r3, [r7, #20]
 3351 01f0 7A68     		ldr	r2, [r7, #4]
 3352 01f2 02FB03F3 		mul	r3, r2, r3
 3353 01f6 1B14     		asrs	r3, r3, #16
 3354 01f8 FA6C     		ldr	r2, [r7, #76]
 3355 01fa 1344     		add	r3, r3, r2
 3356 01fc FB64     		str	r3, [r7, #76]
 3357              	.L217:
1120:..\src/interruptions.c **** 
1121:..\src/interruptions.c ****             // Integral
1122:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3358              		.loc 1 1122 0
 3359 01fe 3B69     		ldr	r3, [r7, #16]
 3360 0200 002B     		cmp	r3, #0
 3361 0202 08D0     		beq	.L218
1123:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3362              		.loc 1 1123 0
 3363 0204 2C4B     		ldr	r3, .L260+36
 3364 0206 1B68     		ldr	r3, [r3]
 3365 0208 3A69     		ldr	r2, [r7, #16]
 3366 020a 02FB03F3 		mul	r3, r2, r3
 3367 020e 1B14     		asrs	r3, r3, #16
 3368 0210 FA6C     		ldr	r2, [r7, #76]
 3369 0212 1344     		add	r3, r3, r2
 3370 0214 FB64     		str	r3, [r7, #76]
 3371              	.L218:
1124:..\src/interruptions.c **** 
1125:..\src/interruptions.c ****             // Derivative
1126:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3372              		.loc 1 1126 0
 3373 0216 FB68     		ldr	r3, [r7, #12]
 3374 0218 002B     		cmp	r3, #0
 3375 021a 0AD0     		beq	.L219
1127:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3376              		.loc 1 1127 0
 3377 021c 294B     		ldr	r3, .L260+48
 3378 021e 1B68     		ldr	r3, [r3]
 3379 0220 7A68     		ldr	r2, [r7, #4]
 3380 0222 D31A     		subs	r3, r2, r3
 3381 0224 FA68     		ldr	r2, [r7, #12]
 3382 0226 02FB03F3 		mul	r3, r2, r3
 3383 022a 1B14     		asrs	r3, r3, #16
 3384 022c FA6C     		ldr	r2, [r7, #76]
 3385 022e 1344     		add	r3, r3, r2
 3386 0230 FB64     		str	r3, [r7, #76]
 3387              	.L219:
1128:..\src/interruptions.c **** 
1129:..\src/interruptions.c ****             // pwm_input saturation
1130:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3388              		.loc 1 1130 0
 3389 0232 FB6C     		ldr	r3, [r7, #76]
 3390 0234 13F1640F 		cmn	r3, #100
 3391 0238 03DA     		bge	.L220
1131:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3392              		.loc 1 1131 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 82


 3393 023a 6FF06303 		mvn	r3, #99
 3394 023e FB64     		str	r3, [r7, #76]
 3395 0240 04E0     		b	.L221
 3396              	.L220:
1132:..\src/interruptions.c ****             else {
1133:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3397              		.loc 1 1133 0
 3398 0242 FB6C     		ldr	r3, [r7, #76]
 3399 0244 642B     		cmp	r3, #100
 3400 0246 01DD     		ble	.L221
1134:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3401              		.loc 1 1134 0
 3402 0248 6423     		movs	r3, #100
 3403 024a FB64     		str	r3, [r7, #76]
 3404              	.L221:
1135:..\src/interruptions.c ****             }
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c ****             // Update previous current
1138:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3405              		.loc 1 1138 0
 3406 024c 1D4A     		ldr	r2, .L260+48
 3407 024e 7B68     		ldr	r3, [r7, #4]
 3408 0250 1360     		str	r3, [r2]
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****         break;
 3409              		.loc 1 1140 0
 3410 0252 1CE1     		b	.L200
 3411              	.L201:
1141:..\src/interruptions.c **** 
1142:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1143:..\src/interruptions.c ****         case CONTROL_ANGLE:
1144:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3412              		.loc 1 1144 0
 3413 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3414 0258 0F4A     		ldr	r2, .L260+4
 3415 025a 1B01     		lsls	r3, r3, #4
 3416 025c 1344     		add	r3, r3, r2
 3417 025e 1A68     		ldr	r2, [r3]
 3418 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3419 0264 0E49     		ldr	r1, .L260+12
 3420 0266 3420     		movs	r0, #52
 3421 0268 00FB03F3 		mul	r3, r0, r3
 3422 026c 0B44     		add	r3, r3, r1
 3423 026e 1B68     		ldr	r3, [r3]
 3424 0270 D31A     		subs	r3, r2, r3
 3425 0272 BB60     		str	r3, [r7, #8]
1145:..\src/interruptions.c **** 
1146:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3426              		.loc 1 1146 0
 3427 0274 0B4B     		ldr	r3, .L260+16
 3428 0276 1A68     		ldr	r2, [r3]
 3429 0278 BB68     		ldr	r3, [r7, #8]
 3430 027a 1344     		add	r3, r3, r2
 3431 027c 094A     		ldr	r2, .L260+16
 3432 027e 1360     		str	r3, [r2]
1147:..\src/interruptions.c **** 
1148:..\src/interruptions.c ****             // anti-windup (for integral control)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 83


1149:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3433              		.loc 1 1149 0
 3434 0280 084B     		ldr	r3, .L260+16
 3435 0282 1B68     		ldr	r3, [r3]
 3436 0284 B3F57A7F 		cmp	r3, #1000
 3437 0288 1EDD     		ble	.L222
1150:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3438              		.loc 1 1150 0
 3439 028a 064B     		ldr	r3, .L260+16
 3440 028c 4FF47A72 		mov	r2, #1000
 3441 0290 1A60     		str	r2, [r3]
 3442 0292 21E0     		b	.L223
 3443              	.L261:
 3444              		.align	2
 3445              	.L260:
 3446 0294 00000000 		.word	c_mem
 3447 0298 00000000 		.word	g_ref
 3448 029c 00000000 		.word	g_refOld
 3449 02a0 00000000 		.word	g_meas
 3450 02a4 90000000 		.word	pos_error_sum.10572
 3451 02a8 80F0FA02 		.word	50000000
 3452 02ac 800F05FD 		.word	-50000000
 3453 02b0 94000000 		.word	prev_pos_err.10574
 3454 02b4 98000000 		.word	motor_dir.10577
 3455 02b8 9C000000 		.word	curr_error_sum.10573
 3456 02bc A0860100 		.word	100000
 3457 02c0 6079FEFF 		.word	-100000
 3458 02c4 A0000000 		.word	prev_curr_err.10575
 3459              	.L222:
1151:..\src/interruptions.c ****             else {
1152:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3460              		.loc 1 1152 0
 3461 02c8 9D4B     		ldr	r3, .L262
 3462 02ca 1B68     		ldr	r3, [r3]
 3463 02cc 13F57A7F 		cmn	r3, #1000
 3464 02d0 02DA     		bge	.L223
1153:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3465              		.loc 1 1153 0
 3466 02d2 9B4B     		ldr	r3, .L262
 3467 02d4 9B4A     		ldr	r2, .L262+4
 3468 02d6 1A60     		str	r2, [r3]
 3469              	.L223:
1154:..\src/interruptions.c ****             }
1155:..\src/interruptions.c **** 
1156:..\src/interruptions.c ****             // Proportional
1157:..\src/interruptions.c ****             if (k_p != 0) 
 3470              		.loc 1 1157 0
 3471 02d8 BB6B     		ldr	r3, [r7, #56]
 3472 02da 002B     		cmp	r3, #0
 3473 02dc 05D0     		beq	.L224
1158:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3474              		.loc 1 1158 0
 3475 02de BB6B     		ldr	r3, [r7, #56]
 3476 02e0 BA68     		ldr	r2, [r7, #8]
 3477 02e2 02FB03F3 		mul	r3, r2, r3
 3478 02e6 1B14     		asrs	r3, r3, #16
 3479 02e8 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 84


 3480              	.L224:
1159:..\src/interruptions.c ****             
1160:..\src/interruptions.c **** 
1161:..\src/interruptions.c ****             // Integral
1162:..\src/interruptions.c ****             if (k_i != 0) 
 3481              		.loc 1 1162 0
 3482 02ea 7B6B     		ldr	r3, [r7, #52]
 3483 02ec 002B     		cmp	r3, #0
 3484 02ee 08D0     		beq	.L225
1163:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3485              		.loc 1 1163 0
 3486 02f0 934B     		ldr	r3, .L262
 3487 02f2 1B68     		ldr	r3, [r3]
 3488 02f4 7A6B     		ldr	r2, [r7, #52]
 3489 02f6 02FB03F3 		mul	r3, r2, r3
 3490 02fa 1B14     		asrs	r3, r3, #16
 3491 02fc FA6C     		ldr	r2, [r7, #76]
 3492 02fe 1344     		add	r3, r3, r2
 3493 0300 FB64     		str	r3, [r7, #76]
 3494              	.L225:
1164:..\src/interruptions.c ****             
1165:..\src/interruptions.c **** 
1166:..\src/interruptions.c ****             // Derivative
1167:..\src/interruptions.c ****             if (k_d != 0) 
 3495              		.loc 1 1167 0
 3496 0302 3B6B     		ldr	r3, [r7, #48]
 3497 0304 002B     		cmp	r3, #0
 3498 0306 0AD0     		beq	.L226
1168:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3499              		.loc 1 1168 0
 3500 0308 8F4B     		ldr	r3, .L262+8
 3501 030a 1B68     		ldr	r3, [r3]
 3502 030c BA68     		ldr	r2, [r7, #8]
 3503 030e D31A     		subs	r3, r2, r3
 3504 0310 3A6B     		ldr	r2, [r7, #48]
 3505 0312 02FB03F3 		mul	r3, r2, r3
 3506 0316 1B14     		asrs	r3, r3, #16
 3507 0318 FA6C     		ldr	r2, [r7, #76]
 3508 031a 1344     		add	r3, r3, r2
 3509 031c FB64     		str	r3, [r7, #76]
 3510              	.L226:
1169:..\src/interruptions.c ****             
1170:..\src/interruptions.c **** 
1171:..\src/interruptions.c ****             // Update measure
1172:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3511              		.loc 1 1172 0
 3512 031e 8A4A     		ldr	r2, .L262+8
 3513 0320 BB68     		ldr	r3, [r7, #8]
 3514 0322 1360     		str	r3, [r2]
1173:..\src/interruptions.c **** 
1174:..\src/interruptions.c ****             if (pwm_input > 0)
 3515              		.loc 1 1174 0
 3516 0324 FB6C     		ldr	r3, [r7, #76]
 3517 0326 002B     		cmp	r3, #0
 3518 0328 03DD     		ble	.L227
1175:..\src/interruptions.c ****                 motor_dir = TRUE;
 3519              		.loc 1 1175 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 85


 3520 032a 884B     		ldr	r3, .L262+12
 3521 032c 0122     		movs	r2, #1
 3522 032e 1A70     		strb	r2, [r3]
1176:..\src/interruptions.c ****             else
1177:..\src/interruptions.c ****                 motor_dir = FALSE;
1178:..\src/interruptions.c **** 
1179:..\src/interruptions.c ****         break;
 3523              		.loc 1 1179 0
 3524 0330 ADE0     		b	.L200
 3525              	.L227:
1177:..\src/interruptions.c **** 
 3526              		.loc 1 1177 0
 3527 0332 864B     		ldr	r3, .L262+12
 3528 0334 0022     		movs	r2, #0
 3529 0336 1A70     		strb	r2, [r3]
 3530              		.loc 1 1179 0
 3531 0338 A9E0     		b	.L200
 3532              	.L204:
1180:..\src/interruptions.c **** 
1181:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1182:..\src/interruptions.c ****         case CONTROL_CURRENT:
1183:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3533              		.loc 1 1183 0
 3534 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3535 033e 844A     		ldr	r2, .L262+16
 3536 0340 1B01     		lsls	r3, r3, #4
 3537 0342 1344     		add	r3, r3, r2
 3538 0344 0C33     		adds	r3, r3, #12
 3539 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3540 0348 002B     		cmp	r3, #0
 3541 034a 00F09D80 		beq	.L258
 3542              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3543 034e 814B     		ldr	r3, .L262+20
 3544 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3545 0352 002B     		cmp	r3, #0
 3546 0354 00F09880 		beq	.L258
1184:..\src/interruptions.c ****                 
1185:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3547              		.loc 1 1185 0 is_stmt 1
 3548 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3549 035c 7C4A     		ldr	r2, .L262+16
 3550 035e 1B01     		lsls	r3, r3, #4
 3551 0360 1344     		add	r3, r3, r2
 3552 0362 0433     		adds	r3, r3, #4
 3553 0364 1B68     		ldr	r3, [r3]
 3554 0366 BB64     		str	r3, [r7, #72]
1186:..\src/interruptions.c **** 
1187:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3555              		.loc 1 1187 0
 3556 0368 3B6C     		ldr	r3, [r7, #64]
 3557 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3558 036e 1A46     		mov	r2, r3
 3559 0370 BB6C     		ldr	r3, [r7, #72]
 3560 0372 9A42     		cmp	r2, r3
 3561 0374 04DA     		bge	.L230
1188:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3562              		.loc 1 1188 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 86


 3563 0376 3B6C     		ldr	r3, [r7, #64]
 3564 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3565 037c BB64     		str	r3, [r7, #72]
 3566 037e 0BE0     		b	.L231
 3567              	.L230:
1189:..\src/interruptions.c ****                 else {
1190:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3568              		.loc 1 1190 0
 3569 0380 3B6C     		ldr	r3, [r7, #64]
 3570 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3571 0386 5A42     		negs	r2, r3
 3572 0388 BB6C     		ldr	r3, [r7, #72]
 3573 038a 9A42     		cmp	r2, r3
 3574 038c 04DD     		ble	.L231
1191:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3575              		.loc 1 1191 0
 3576 038e 3B6C     		ldr	r3, [r7, #64]
 3577 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3578 0394 5B42     		negs	r3, r3
 3579 0396 BB64     		str	r3, [r7, #72]
 3580              	.L231:
1192:..\src/interruptions.c ****                 }
1193:..\src/interruptions.c ****                 
1194:..\src/interruptions.c ****                 // current error
1195:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3581              		.loc 1 1195 0
 3582 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3583 039c 6E4A     		ldr	r2, .L262+24
 3584 039e 3421     		movs	r1, #52
 3585 03a0 01FB03F3 		mul	r3, r1, r3
 3586 03a4 1344     		add	r3, r3, r2
 3587 03a6 0C33     		adds	r3, r3, #12
 3588 03a8 1B68     		ldr	r3, [r3]
 3589 03aa BA6C     		ldr	r2, [r7, #72]
 3590 03ac D31A     		subs	r3, r2, r3
 3591 03ae 7B60     		str	r3, [r7, #4]
1196:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3592              		.loc 1 1196 0
 3593 03b0 6A4B     		ldr	r3, .L262+28
 3594 03b2 1A68     		ldr	r2, [r3]
 3595 03b4 7B68     		ldr	r3, [r7, #4]
 3596 03b6 1344     		add	r3, r3, r2
 3597 03b8 684A     		ldr	r2, .L262+28
 3598 03ba 1360     		str	r3, [r2]
1197:..\src/interruptions.c ****                 
1198:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3599              		.loc 1 1198 0
 3600 03bc 674B     		ldr	r3, .L262+28
 3601 03be 1B68     		ldr	r3, [r3]
 3602 03c0 674A     		ldr	r2, .L262+32
 3603 03c2 9342     		cmp	r3, r2
 3604 03c4 03DD     		ble	.L232
1199:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3605              		.loc 1 1199 0
 3606 03c6 654B     		ldr	r3, .L262+28
 3607 03c8 654A     		ldr	r2, .L262+32
 3608 03ca 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 87


 3609 03cc 07E0     		b	.L233
 3610              	.L232:
1200:..\src/interruptions.c ****                 else {
1201:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3611              		.loc 1 1201 0
 3612 03ce 634B     		ldr	r3, .L262+28
 3613 03d0 1B68     		ldr	r3, [r3]
 3614 03d2 644A     		ldr	r2, .L262+36
 3615 03d4 9342     		cmp	r3, r2
 3616 03d6 02DA     		bge	.L233
1202:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3617              		.loc 1 1202 0
 3618 03d8 604B     		ldr	r3, .L262+28
 3619 03da 624A     		ldr	r2, .L262+36
 3620 03dc 1A60     		str	r2, [r3]
 3621              	.L233:
1203:..\src/interruptions.c ****                 }
1204:..\src/interruptions.c **** 
1205:..\src/interruptions.c ****                 pwm_input = 0;
 3622              		.loc 1 1205 0
 3623 03de 0023     		movs	r3, #0
 3624 03e0 FB64     		str	r3, [r7, #76]
1206:..\src/interruptions.c **** 
1207:..\src/interruptions.c ****                 // Proportional
1208:..\src/interruptions.c ****                 if (k_p_c != 0)
 3625              		.loc 1 1208 0
 3626 03e2 FB6A     		ldr	r3, [r7, #44]
 3627 03e4 002B     		cmp	r3, #0
 3628 03e6 07D0     		beq	.L234
1209:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3629              		.loc 1 1209 0
 3630 03e8 FB6A     		ldr	r3, [r7, #44]
 3631 03ea 7A68     		ldr	r2, [r7, #4]
 3632 03ec 02FB03F3 		mul	r3, r2, r3
 3633 03f0 1B14     		asrs	r3, r3, #16
 3634 03f2 FA6C     		ldr	r2, [r7, #76]
 3635 03f4 1344     		add	r3, r3, r2
 3636 03f6 FB64     		str	r3, [r7, #76]
 3637              	.L234:
1210:..\src/interruptions.c **** 
1211:..\src/interruptions.c ****                 // Integral
1212:..\src/interruptions.c ****                 if (k_i_c != 0)
 3638              		.loc 1 1212 0
 3639 03f8 BB6A     		ldr	r3, [r7, #40]
 3640 03fa 002B     		cmp	r3, #0
 3641 03fc 08D0     		beq	.L235
1213:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3642              		.loc 1 1213 0
 3643 03fe 574B     		ldr	r3, .L262+28
 3644 0400 1B68     		ldr	r3, [r3]
 3645 0402 BA6A     		ldr	r2, [r7, #40]
 3646 0404 02FB03F3 		mul	r3, r2, r3
 3647 0408 1B14     		asrs	r3, r3, #16
 3648 040a FA6C     		ldr	r2, [r7, #76]
 3649 040c 1344     		add	r3, r3, r2
 3650 040e FB64     		str	r3, [r7, #76]
 3651              	.L235:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 88


1214:..\src/interruptions.c **** 
1215:..\src/interruptions.c ****                 // Derivative
1216:..\src/interruptions.c ****                 if (k_d_c != 0)
 3652              		.loc 1 1216 0
 3653 0410 7B6A     		ldr	r3, [r7, #36]
 3654 0412 002B     		cmp	r3, #0
 3655 0414 0AD0     		beq	.L236
1217:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3656              		.loc 1 1217 0
 3657 0416 544B     		ldr	r3, .L262+40
 3658 0418 1B68     		ldr	r3, [r3]
 3659 041a 7A68     		ldr	r2, [r7, #4]
 3660 041c D31A     		subs	r3, r2, r3
 3661 041e 7A6A     		ldr	r2, [r7, #36]
 3662 0420 02FB03F3 		mul	r3, r2, r3
 3663 0424 1B14     		asrs	r3, r3, #16
 3664 0426 FA6C     		ldr	r2, [r7, #76]
 3665 0428 1344     		add	r3, r3, r2
 3666 042a FB64     		str	r3, [r7, #76]
 3667              	.L236:
1218:..\src/interruptions.c ****                 
1219:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3668              		.loc 1 1219 0
 3669 042c 4E4A     		ldr	r2, .L262+40
 3670 042e 7B68     		ldr	r3, [r7, #4]
 3671 0430 1360     		str	r3, [r2]
1220:..\src/interruptions.c ****                 
1221:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3672              		.loc 1 1221 0
 3673 0432 FB6C     		ldr	r3, [r7, #76]
 3674 0434 002B     		cmp	r3, #0
 3675 0436 03DB     		blt	.L237
1222:..\src/interruptions.c ****                     motor_dir = TRUE;
 3676              		.loc 1 1222 0
 3677 0438 444B     		ldr	r3, .L262+12
 3678 043a 0122     		movs	r2, #1
 3679 043c 1A70     		strb	r2, [r3]
1223:..\src/interruptions.c ****                 else
1224:..\src/interruptions.c ****                     motor_dir = FALSE;
1225:..\src/interruptions.c ****             }
1226:..\src/interruptions.c ****         break;
 3680              		.loc 1 1226 0
 3681 043e 23E0     		b	.L258
 3682              	.L237:
1224:..\src/interruptions.c ****             }
 3683              		.loc 1 1224 0
 3684 0440 424B     		ldr	r3, .L262+12
 3685 0442 0022     		movs	r2, #0
 3686 0444 1A70     		strb	r2, [r3]
 3687              		.loc 1 1226 0
 3688 0446 1FE0     		b	.L258
 3689              	.L203:
1227:..\src/interruptions.c ****         
1228:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1229:..\src/interruptions.c ****         case CONTROL_PWM:
1230:..\src/interruptions.c **** 
1231:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 89


 3690              		.loc 1 1231 0
 3691 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3692 044c 404A     		ldr	r2, .L262+16
 3693 044e 1B01     		lsls	r3, r3, #4
 3694 0450 1344     		add	r3, r3, r2
 3695 0452 0833     		adds	r3, r3, #8
 3696 0454 1B68     		ldr	r3, [r3]
 3697 0456 FB64     		str	r3, [r7, #76]
1232:..\src/interruptions.c **** 
1233:..\src/interruptions.c ****             if (pwm_input > 0) 
 3698              		.loc 1 1233 0
 3699 0458 FB6C     		ldr	r3, [r7, #76]
 3700 045a 002B     		cmp	r3, #0
 3701 045c 03DD     		ble	.L238
1234:..\src/interruptions.c ****                 motor_dir = TRUE;
 3702              		.loc 1 1234 0
 3703 045e 3B4B     		ldr	r3, .L262+12
 3704 0460 0122     		movs	r2, #1
 3705 0462 1A70     		strb	r2, [r3]
 3706 0464 02E0     		b	.L239
 3707              	.L238:
1235:..\src/interruptions.c ****             else 
1236:..\src/interruptions.c ****                 motor_dir = FALSE;
 3708              		.loc 1 1236 0
 3709 0466 394B     		ldr	r3, .L262+12
 3710 0468 0022     		movs	r2, #0
 3711 046a 1A70     		strb	r2, [r3]
 3712              	.L239:
1237:..\src/interruptions.c ****             
1238:..\src/interruptions.c **** 
1239:..\src/interruptions.c ****             // pwm_input saturation
1240:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3713              		.loc 1 1240 0
 3714 046c FB6C     		ldr	r3, [r7, #76]
 3715 046e 13F1640F 		cmn	r3, #100
 3716 0472 03DA     		bge	.L240
1241:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3717              		.loc 1 1241 0
 3718 0474 6FF06303 		mvn	r3, #99
 3719 0478 FB64     		str	r3, [r7, #76]
1242:..\src/interruptions.c ****             else {
1243:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1244:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1245:..\src/interruptions.c ****         	}
1246:..\src/interruptions.c **** 
1247:..\src/interruptions.c ****         break;
 3720              		.loc 1 1247 0
 3721 047a 07E0     		b	.L259
 3722              	.L240:
1243:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3723              		.loc 1 1243 0
 3724 047c FB6C     		ldr	r3, [r7, #76]
 3725 047e 642B     		cmp	r3, #100
 3726 0480 04DD     		ble	.L259
1244:..\src/interruptions.c ****         	}
 3727              		.loc 1 1244 0
 3728 0482 6423     		movs	r3, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 90


 3729 0484 FB64     		str	r3, [r7, #76]
 3730              		.loc 1 1247 0
 3731 0486 01E0     		b	.L259
 3732              	.L258:
1226:..\src/interruptions.c ****         
 3733              		.loc 1 1226 0
 3734 0488 00BF     		nop
 3735 048a 00E0     		b	.L200
 3736              	.L259:
 3737              		.loc 1 1247 0
 3738 048c 00BF     		nop
 3739              	.L200:
1248:..\src/interruptions.c ****             
1249:..\src/interruptions.c ****     }
1250:..\src/interruptions.c **** 
1251:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1252:..\src/interruptions.c **** 
1253:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3740              		.loc 1 1253 0
 3741 048e FB6C     		ldr	r3, [r7, #76]
 3742 0490 642B     		cmp	r3, #100
 3743 0492 01DD     		ble	.L242
1254:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3744              		.loc 1 1254 0
 3745 0494 6423     		movs	r3, #100
 3746 0496 FB64     		str	r3, [r7, #76]
 3747              	.L242:
1255:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3748              		.loc 1 1255 0
 3749 0498 FB6C     		ldr	r3, [r7, #76]
 3750 049a 13F1640F 		cmn	r3, #100
 3751 049e 02DA     		bge	.L243
1256:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3752              		.loc 1 1256 0
 3753 04a0 6FF06303 		mvn	r3, #99
 3754 04a4 FB64     		str	r3, [r7, #76]
 3755              	.L243:
1257:..\src/interruptions.c **** 
1258:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3756              		.loc 1 1258 0
 3757 04a6 3B6C     		ldr	r3, [r7, #64]
 3758 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3759 04ac 012B     		cmp	r3, #1
 3760 04ae 0DD0     		beq	.L244
1259:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3761              		.loc 1 1259 0
 3762 04b0 FB6C     		ldr	r3, [r7, #76]
 3763 04b2 9B02     		lsls	r3, r3, #10
 3764 04b4 2D4A     		ldr	r2, .L262+44
 3765 04b6 82FB0312 		smull	r1, r2, r2, r3
 3766 04ba 5211     		asrs	r2, r2, #5
 3767 04bc DB17     		asrs	r3, r3, #31
 3768 04be D31A     		subs	r3, r2, r3
 3769 04c0 2B4A     		ldr	r2, .L262+48
 3770 04c2 1288     		ldrh	r2, [r2]
 3771 04c4 02FB03F3 		mul	r3, r2, r3
 3772 04c8 9B12     		asrs	r3, r3, #10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 91


 3773 04ca FB64     		str	r3, [r7, #76]
 3774              	.L244:
1260:..\src/interruptions.c ****  
1261:..\src/interruptions.c ****     //// RATE LIMITER ////
1262:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3775              		.loc 1 1262 0
 3776 04cc 294B     		ldr	r3, .L262+52
 3777 04ce 1B68     		ldr	r3, [r3]
 3778 04d0 FA6C     		ldr	r2, [r7, #76]
 3779 04d2 D31A     		subs	r3, r2, r3
 3780 04d4 3A6C     		ldr	r2, [r7, #64]
 3781 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3782 04da 9342     		cmp	r3, r2
 3783 04dc 08DD     		ble	.L245
1263:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3784              		.loc 1 1263 0
 3785 04de 3B6C     		ldr	r3, [r7, #64]
 3786 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3787 04e4 1A46     		mov	r2, r3
 3788 04e6 234B     		ldr	r3, .L262+52
 3789 04e8 1B68     		ldr	r3, [r3]
 3790 04ea 1344     		add	r3, r3, r2
 3791 04ec FB64     		str	r3, [r7, #76]
 3792 04ee 10E0     		b	.L246
 3793              	.L245:
1264:..\src/interruptions.c ****     }
1265:..\src/interruptions.c ****     else {
1266:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3794              		.loc 1 1266 0
 3795 04f0 204B     		ldr	r3, .L262+52
 3796 04f2 1B68     		ldr	r3, [r3]
 3797 04f4 FA6C     		ldr	r2, [r7, #76]
 3798 04f6 D21A     		subs	r2, r2, r3
 3799 04f8 3B6C     		ldr	r3, [r7, #64]
 3800 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3801 04fe 5B42     		negs	r3, r3
 3802 0500 9A42     		cmp	r2, r3
 3803 0502 06DA     		bge	.L246
1267:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3804              		.loc 1 1267 0
 3805 0504 1B4B     		ldr	r3, .L262+52
 3806 0506 1B68     		ldr	r3, [r3]
 3807 0508 3A6C     		ldr	r2, [r7, #64]
 3808 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3809 050e 9B1A     		subs	r3, r3, r2
 3810 0510 FB64     		str	r3, [r7, #76]
 3811              	.L246:
1268:..\src/interruptions.c ****     }
1269:..\src/interruptions.c ****     
1270:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3812              		.loc 1 1270 0
 3813 0512 FB6C     		ldr	r3, [r7, #76]
 3814 0514 642B     		cmp	r3, #100
 3815 0516 01DD     		ble	.L247
1271:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3816              		.loc 1 1271 0
 3817 0518 6423     		movs	r3, #100
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 92


 3818 051a FB64     		str	r3, [r7, #76]
 3819              	.L247:
1272:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3820              		.loc 1 1272 0
 3821 051c FB6C     		ldr	r3, [r7, #76]
 3822 051e 13F1640F 		cmn	r3, #100
 3823 0522 02DA     		bge	.L248
1273:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3824              		.loc 1 1273 0
 3825 0524 6FF06303 		mvn	r3, #99
 3826 0528 FB64     		str	r3, [r7, #76]
 3827              	.L248:
1274:..\src/interruptions.c ****     
1275:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3828              		.loc 1 1275 0
 3829 052a 124A     		ldr	r2, .L262+52
 3830 052c FB6C     		ldr	r3, [r7, #76]
 3831 052e 1360     		str	r3, [r2]
1276:..\src/interruptions.c **** 	
1277:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3832              		.loc 1 1277 0
 3833 0530 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3834 0534 FA6C     		ldr	r2, [r7, #76]
 3835 0536 002A     		cmp	r2, #0
 3836 0538 1EDB     		blt	.L249
 3837              		.loc 1 1277 0 is_stmt 0 discriminator 1
 3838 053a 0121     		movs	r1, #1
 3839 053c 1EE0     		b	.L250
 3840              	.L263:
 3841 053e 00BF     		.align	2
 3842              	.L262:
 3843 0540 90000000 		.word	pos_error_sum.10572
 3844 0544 18FCFFFF 		.word	-1000
 3845 0548 94000000 		.word	prev_pos_err.10574
 3846 054c 98000000 		.word	motor_dir.10577
 3847 0550 00000000 		.word	g_ref
 3848 0554 00000000 		.word	tension_valid
 3849 0558 00000000 		.word	g_meas
 3850 055c 9C000000 		.word	curr_error_sum.10573
 3851 0560 A0860100 		.word	100000
 3852 0564 6079FEFF 		.word	-100000
 3853 0568 A0000000 		.word	prev_curr_err.10575
 3854 056c 1F85EB51 		.word	1374389535
 3855 0570 00000000 		.word	dev_pwm_limit
 3856 0574 A4000000 		.word	prev_pwm.10576
 3857              	.L249:
 3858              		.loc 1 1277 0 discriminator 2
 3859 0578 4FF0FF31 		mov	r1, #-1
 3860              	.L250:
 3861              		.loc 1 1277 0 discriminator 4
 3862 057c 5A4A     		ldr	r2, .L264
 3863 057e D154     		strb	r1, [r2, r3]
1278:..\src/interruptions.c ****     
1279:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3864              		.loc 1 1279 0 is_stmt 1 discriminator 4
 3865 0580 3B6C     		ldr	r3, [r7, #64]
 3866 0582 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 93


 3867 0586 012B     		cmp	r3, #1
 3868 0588 40F09680 		bne	.L251
1280:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1281:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3869              		.loc 1 1281 0
 3870 058c 3B6C     		ldr	r3, [r7, #64]
 3871 058e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3872 0592 012B     		cmp	r3, #1
 3873 0594 00F08D80 		beq	.L252
 3874              		.loc 1 1281 0 is_stmt 0 discriminator 1
 3875 0598 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3876 059c 534A     		ldr	r2, .L264+4
 3877 059e 3421     		movs	r1, #52
 3878 05a0 01FB03F3 		mul	r3, r1, r3
 3879 05a4 1344     		add	r3, r3, r2
 3880 05a6 1A68     		ldr	r2, [r3]
 3881 05a8 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3882 05ac 5049     		ldr	r1, .L264+8
 3883 05ae 3420     		movs	r0, #52
 3884 05b0 00FB03F3 		mul	r3, r0, r3
 3885 05b4 0B44     		add	r3, r3, r1
 3886 05b6 1B68     		ldr	r3, [r3]
 3887 05b8 D31A     		subs	r3, r2, r3
 3888 05ba 312B     		cmp	r3, #49
 3889 05bc 79DC     		bgt	.L252
1282:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3890              		.loc 1 1282 0 is_stmt 1 discriminator 2
 3891 05be 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3892 05c2 4A4A     		ldr	r2, .L264+4
 3893 05c4 3421     		movs	r1, #52
 3894 05c6 01FB03F3 		mul	r3, r1, r3
 3895 05ca 1344     		add	r3, r3, r2
 3896 05cc 1A68     		ldr	r2, [r3]
 3897 05ce 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3898 05d2 4749     		ldr	r1, .L264+8
 3899 05d4 3420     		movs	r0, #52
 3900 05d6 00FB03F3 		mul	r3, r0, r3
 3901 05da 0B44     		add	r3, r3, r1
 3902 05dc 1B68     		ldr	r3, [r3]
 3903 05de D31A     		subs	r3, r2, r3
1281:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3904              		.loc 1 1281 0 discriminator 2
 3905 05e0 13F1310F 		cmn	r3, #49
 3906 05e4 65DB     		blt	.L252
1283:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3907              		.loc 1 1283 0
 3908 05e6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3909 05ea 424A     		ldr	r2, .L264+12
 3910 05ec 1B01     		lsls	r3, r3, #4
 3911 05ee 1344     		add	r3, r3, r2
 3912 05f0 1A68     		ldr	r2, [r3]
 3913 05f2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3914 05f6 4049     		ldr	r1, .L264+16
 3915 05f8 1B01     		lsls	r3, r3, #4
 3916 05fa 0B44     		add	r3, r3, r1
 3917 05fc 1B68     		ldr	r3, [r3]
 3918 05fe D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 94


1282:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3919              		.loc 1 1282 0
 3920 0600 632B     		cmp	r3, #99
 3921 0602 56DC     		bgt	.L252
 3922              		.loc 1 1283 0
 3923 0604 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3924 0608 3A4A     		ldr	r2, .L264+12
 3925 060a 1B01     		lsls	r3, r3, #4
 3926 060c 1344     		add	r3, r3, r2
 3927 060e 1A68     		ldr	r2, [r3]
 3928 0610 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3929 0614 3849     		ldr	r1, .L264+16
 3930 0616 1B01     		lsls	r3, r3, #4
 3931 0618 0B44     		add	r3, r3, r1
 3932 061a 1B68     		ldr	r3, [r3]
 3933 061c D31A     		subs	r3, r2, r3
 3934 061e 13F1630F 		cmn	r3, #99
 3935 0622 46DB     		blt	.L252
1284:..\src/interruptions.c ****             position_counter++;
 3936              		.loc 1 1284 0
 3937 0624 354B     		ldr	r3, .L264+20
 3938 0626 1B68     		ldr	r3, [r3]
 3939 0628 0133     		adds	r3, r3, #1
 3940 062a 344A     		ldr	r2, .L264+20
 3941 062c 1360     		str	r3, [r2]
1285:..\src/interruptions.c ****             
1286:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3942              		.loc 1 1286 0
 3943 062e 334B     		ldr	r3, .L264+20
 3944 0630 1B68     		ldr	r3, [r3]
 3945 0632 F92B     		cmp	r3, #249
 3946 0634 40D9     		bls	.L251
1287:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3947              		.loc 1 1287 0
 3948 0636 3B6C     		ldr	r3, [r7, #64]
 3949 0638 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3950 063c 002B     		cmp	r3, #0
 3951 063e 11D1     		bne	.L254
 3952              		.loc 1 1287 0 is_stmt 0 discriminator 1
 3953 0640 2F4B     		ldr	r3, .L264+24
 3954 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3955 0644 002B     		cmp	r3, #0
 3956 0646 0DD1     		bne	.L254
1288:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3957              		.loc 1 1288 0 is_stmt 1
 3958 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3959 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3960 0650 2749     		ldr	r1, .L264+8
 3961 0652 3420     		movs	r0, #52
 3962 0654 00FB02F2 		mul	r2, r0, r2
 3963 0658 0A44     		add	r2, r2, r1
 3964 065a 1268     		ldr	r2, [r2]
 3965 065c 2949     		ldr	r1, .L264+28
 3966 065e 1B01     		lsls	r3, r3, #4
 3967 0660 0B44     		add	r3, r3, r1
 3968 0662 1A60     		str	r2, [r3]
 3969              	.L254:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 95


1289:..\src/interruptions.c ****                 }
1290:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3970              		.loc 1 1290 0
 3971 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3972 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3973 066c 2049     		ldr	r1, .L264+8
 3974 066e 3420     		movs	r0, #52
 3975 0670 00FB02F2 		mul	r2, r0, r2
 3976 0674 0A44     		add	r2, r2, r1
 3977 0676 1268     		ldr	r2, [r2]
 3978 0678 1F49     		ldr	r1, .L264+16
 3979 067a 1B01     		lsls	r3, r3, #4
 3980 067c 0B44     		add	r3, r3, r1
 3981 067e 1A60     		str	r2, [r3]
1291:..\src/interruptions.c ****                 
1292:..\src/interruptions.c ****                 if (position_counter == 250){
 3982              		.loc 1 1292 0
 3983 0680 1E4B     		ldr	r3, .L264+20
 3984 0682 1B68     		ldr	r3, [r3]
 3985 0684 FA2B     		cmp	r3, #250
 3986 0686 11D1     		bne	.L255
1293:..\src/interruptions.c ****                     // To do only once
1294:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3987              		.loc 1 1294 0
 3988 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3989 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3990 0690 1749     		ldr	r1, .L264+8
 3991 0692 3420     		movs	r0, #52
 3992 0694 00FB02F2 		mul	r2, r0, r2
 3993 0698 0A44     		add	r2, r2, r1
 3994 069a 0C32     		adds	r2, r2, #12
 3995 069c 1268     		ldr	r2, [r2]
 3996 069e 1449     		ldr	r1, .L264+8
 3997 06a0 3420     		movs	r0, #52
 3998 06a2 00FB03F3 		mul	r3, r0, r3
 3999 06a6 0B44     		add	r3, r3, r1
 4000 06a8 1433     		adds	r3, r3, #20
 4001 06aa 1A60     		str	r2, [r3]
 4002              	.L255:
1295:..\src/interruptions.c ****                 }
1296:..\src/interruptions.c ****                 pwm_input = 0;            
 4003              		.loc 1 1296 0
 4004 06ac 0023     		movs	r3, #0
 4005 06ae FB64     		str	r3, [r7, #76]
1286:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4006              		.loc 1 1286 0
 4007 06b0 02E0     		b	.L251
 4008              	.L252:
1297:..\src/interruptions.c ****             }
1298:..\src/interruptions.c ****         }
1299:..\src/interruptions.c ****         else {
1300:..\src/interruptions.c ****             position_counter = 0;
 4009              		.loc 1 1300 0
 4010 06b2 124B     		ldr	r3, .L264+20
 4011 06b4 0022     		movs	r2, #0
 4012 06b6 1A60     		str	r2, [r3]
 4013              	.L251:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 96


1301:..\src/interruptions.c ****         }
1302:..\src/interruptions.c ****     }
1303:..\src/interruptions.c ****     
1304:..\src/interruptions.c ****     if (motor_dir)
 4014              		.loc 1 1304 0
 4015 06b8 134B     		ldr	r3, .L264+32
 4016 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4017 06bc 002B     		cmp	r3, #0
 4018 06be 03D0     		beq	.L256
1305:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4019              		.loc 1 1305 0
 4020 06c0 0120     		movs	r0, #1
 4021 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4022 06c6 02E0     		b	.L257
 4023              	.L256:
1306:..\src/interruptions.c ****     else
1307:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4024              		.loc 1 1307 0
 4025 06c8 0020     		movs	r0, #0
 4026 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4027              	.L257:
1308:..\src/interruptions.c **** 
1309:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4028              		.loc 1 1309 0
 4029 06ce FB6C     		ldr	r3, [r7, #76]
 4030 06d0 002B     		cmp	r3, #0
 4031 06d2 B8BF     		it	lt
 4032 06d4 5B42     		rsblt	r3, r3, #0
 4033 06d6 DBB2     		uxtb	r3, r3
 4034 06d8 1846     		mov	r0, r3
 4035 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1310:..\src/interruptions.c **** }
 4036              		.loc 1 1310 0
 4037 06de 00BF     		nop
 4038 06e0 5037     		adds	r7, r7, #80
 4039              		.cfi_def_cfa_offset 8
 4040 06e2 BD46     		mov	sp, r7
 4041              		.cfi_def_cfa_register 13
 4042              		@ sp needed
 4043 06e4 80BD     		pop	{r7, pc}
 4044              	.L265:
 4045 06e6 00BF     		.align	2
 4046              	.L264:
 4047 06e8 00000000 		.word	pwm_sign
 4048 06ec 00000000 		.word	g_measOld
 4049 06f0 00000000 		.word	g_meas
 4050 06f4 00000000 		.word	g_refOld
 4051 06f8 00000000 		.word	g_ref
 4052 06fc A8000000 		.word	position_counter.10578
 4053 0700 00000000 		.word	change_ext_ref_flag
 4054 0704 00000000 		.word	g_refNew
 4055 0708 98000000 		.word	motor_dir.10577
 4056              		.cfi_endproc
 4057              	.LFE71:
 4058              		.size	motor_control_SH, .-motor_control_SH
 4059              		.section	.text.motor_control_generic,"ax",%progbits
 4060              		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 97


 4061              		.global	motor_control_generic
 4062              		.thumb
 4063              		.thumb_func
 4064              		.type	motor_control_generic, %function
 4065              	motor_control_generic:
 4066              	.LFB72:
1311:..\src/interruptions.c **** 
1312:..\src/interruptions.c **** //==============================================================================
1313:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1314:..\src/interruptions.c **** //==============================================================================
1315:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4067              		.loc 1 1315 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 80
 4070              		@ frame_needed = 1, uses_anonymous_args = 0
 4071 0000 90B5     		push	{r4, r7, lr}
 4072              		.cfi_def_cfa_offset 12
 4073              		.cfi_offset 4, -12
 4074              		.cfi_offset 7, -8
 4075              		.cfi_offset 14, -4
 4076 0002 95B0     		sub	sp, sp, #84
 4077              		.cfi_def_cfa_offset 96
 4078 0004 00AF     		add	r7, sp, #0
 4079              		.cfi_def_cfa_register 7
 4080 0006 0346     		mov	r3, r0
 4081 0008 FB71     		strb	r3, [r7, #7]
1316:..\src/interruptions.c ****     
1317:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4082              		.loc 1 1317 0
 4083 000a 0023     		movs	r3, #0
 4084 000c FB64     		str	r3, [r7, #76]
1318:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1319:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1320:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1321:..\src/interruptions.c **** 
1322:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4085              		.loc 1 1322 0
 4086 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4087 0010 1346     		mov	r3, r2
 4088 0012 DB00     		lsls	r3, r3, #3
 4089 0014 9B1A     		subs	r3, r3, r2
 4090 0016 1B01     		lsls	r3, r3, #4
 4091 0018 B033     		adds	r3, r3, #176
 4092 001a 9D4A     		ldr	r2, .L357
 4093 001c 1344     		add	r3, r3, r2
 4094 001e 7B64     		str	r3, [r7, #68]
1323:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4095              		.loc 1 1323 0
 4096 0020 7B6C     		ldr	r3, [r7, #68]
 4097 0022 93F86030 		ldrb	r3, [r3, #96]
 4098 0026 87F84330 		strb	r3, [r7, #67]
1324:..\src/interruptions.c ****     
1325:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4099              		.loc 1 1325 0
 4100 002a 7B6C     		ldr	r3, [r7, #68]
 4101 002c 1B68     		ldr	r3, [r3]
 4102 002e FB63     		str	r3, [r7, #60]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 98


1326:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4103              		.loc 1 1326 0
 4104 0030 7B6C     		ldr	r3, [r7, #68]
 4105 0032 5B68     		ldr	r3, [r3, #4]
 4106 0034 BB63     		str	r3, [r7, #56]
1327:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4107              		.loc 1 1327 0
 4108 0036 7B6C     		ldr	r3, [r7, #68]
 4109 0038 9B68     		ldr	r3, [r3, #8]
 4110 003a 7B63     		str	r3, [r7, #52]
1328:..\src/interruptions.c **** 
1329:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4111              		.loc 1 1329 0
 4112 003c 7B6C     		ldr	r3, [r7, #68]
 4113 003e DB68     		ldr	r3, [r3, #12]
 4114 0040 3B63     		str	r3, [r7, #48]
1330:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4115              		.loc 1 1330 0
 4116 0042 7B6C     		ldr	r3, [r7, #68]
 4117 0044 1B69     		ldr	r3, [r3, #16]
 4118 0046 FB62     		str	r3, [r7, #44]
1331:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4119              		.loc 1 1331 0
 4120 0048 7B6C     		ldr	r3, [r7, #68]
 4121 004a 5B69     		ldr	r3, [r3, #20]
 4122 004c BB62     		str	r3, [r7, #40]
1332:..\src/interruptions.c **** 
1333:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4123              		.loc 1 1333 0
 4124 004e 7B6C     		ldr	r3, [r7, #68]
 4125 0050 9B69     		ldr	r3, [r3, #24]
 4126 0052 7B62     		str	r3, [r7, #36]
1334:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4127              		.loc 1 1334 0
 4128 0054 7B6C     		ldr	r3, [r7, #68]
 4129 0056 DB69     		ldr	r3, [r3, #28]
 4130 0058 3B62     		str	r3, [r7, #32]
1335:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4131              		.loc 1 1335 0
 4132 005a 7B6C     		ldr	r3, [r7, #68]
 4133 005c 1B6A     		ldr	r3, [r3, #32]
 4134 005e FB61     		str	r3, [r7, #28]
1336:..\src/interruptions.c ****     
1337:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4135              		.loc 1 1337 0
 4136 0060 7B6C     		ldr	r3, [r7, #68]
 4137 0062 5B6A     		ldr	r3, [r3, #36]
 4138 0064 BB61     		str	r3, [r7, #24]
1338:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4139              		.loc 1 1338 0
 4140 0066 7B6C     		ldr	r3, [r7, #68]
 4141 0068 9B6A     		ldr	r3, [r3, #40]
 4142 006a 7B61     		str	r3, [r7, #20]
1339:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4143              		.loc 1 1339 0
 4144 006c 7B6C     		ldr	r3, [r7, #68]
 4145 006e DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 99


 4146 0070 3B61     		str	r3, [r7, #16]
1340:..\src/interruptions.c **** 
1341:..\src/interruptions.c ****     // Static Variables
1342:..\src/interruptions.c **** 
1343:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1344:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1345:..\src/interruptions.c ****     
1346:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1347:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1348:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1349:..\src/interruptions.c **** 
1350:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1351:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1352:..\src/interruptions.c **** 
1353:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1354:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4147              		.loc 1 1354 0
 4148 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4149 0074 1B01     		lsls	r3, r3, #4
 4150 0076 874A     		ldr	r2, .L357+4
 4151 0078 9918     		adds	r1, r3, r2
 4152 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4153 007c 1B01     		lsls	r3, r3, #4
 4154 007e 864A     		ldr	r2, .L357+8
 4155 0080 1A44     		add	r2, r2, r3
 4156 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4157 0084 1846     		mov	r0, r3
 4158 0086 FFF7FEFF 		bl	compute_reference
1355:..\src/interruptions.c ****     
1356:..\src/interruptions.c ****    
1357:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4159              		.loc 1 1357 0
 4160 008a 7B6C     		ldr	r3, [r7, #68]
 4161 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4162 0090 032B     		cmp	r3, #3
 4163 0092 00F28082 		bhi	.L267
 4164 0096 01A2     		adr	r2, .L269
 4165 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4166              		.p2align 2
 4167              	.L269:
 4168 009c ED020000 		.word	.L268+1
 4169 00a0 F7040000 		.word	.L270+1
 4170 00a4 C5030000 		.word	.L271+1
 4171 00a8 AD000000 		.word	.L272+1
 4172              		.p2align 1
 4173              	.L272:
1358:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1359:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1360:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4174              		.loc 1 1360 0
 4175 00ac 794B     		ldr	r3, .L357+4
 4176 00ae 1A68     		ldr	r2, [r3]
 4177 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4178 00b4 7949     		ldr	r1, .L357+12
 4179 00b6 3420     		movs	r0, #52
 4180 00b8 00FB03F3 		mul	r3, r0, r3
 4181 00bc 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 100


 4182 00be 1B68     		ldr	r3, [r3]
 4183 00c0 D31A     		subs	r3, r2, r3
 4184 00c2 FB60     		str	r3, [r7, #12]
1361:..\src/interruptions.c **** 
1362:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4185              		.loc 1 1362 0
 4186 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4187 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4188 00c8 7549     		ldr	r1, .L357+16
 4189 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4190 00ce FA68     		ldr	r2, [r7, #12]
 4191 00d0 0A44     		add	r2, r2, r1
 4192 00d2 7349     		ldr	r1, .L357+16
 4193 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1363:..\src/interruptions.c **** 
1364:..\src/interruptions.c ****             // error_sum saturation
1365:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4194              		.loc 1 1365 0
 4195 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4196 00da 714A     		ldr	r2, .L357+16
 4197 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4198 00e0 704A     		ldr	r2, .L357+20
 4199 00e2 9342     		cmp	r3, r2
 4200 00e4 05DD     		ble	.L273
1366:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4201              		.loc 1 1366 0
 4202 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4203 00e8 6D4A     		ldr	r2, .L357+16
 4204 00ea 6E49     		ldr	r1, .L357+20
 4205 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4206 00f0 0BE0     		b	.L274
 4207              	.L273:
1367:..\src/interruptions.c ****             else {
1368:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4208              		.loc 1 1368 0
 4209 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4210 00f4 6A4A     		ldr	r2, .L357+16
 4211 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4212 00fa 6B4A     		ldr	r2, .L357+24
 4213 00fc 9342     		cmp	r3, r2
 4214 00fe 04DA     		bge	.L274
1369:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4215              		.loc 1 1369 0
 4216 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4217 0102 674A     		ldr	r2, .L357+16
 4218 0104 6849     		ldr	r1, .L357+24
 4219 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4220              	.L274:
1370:..\src/interruptions.c ****             }
1371:..\src/interruptions.c ****             
1372:..\src/interruptions.c ****             // ------ position PID control ------
1373:..\src/interruptions.c **** 
1374:..\src/interruptions.c ****             i_ref = 0;
 4221              		.loc 1 1374 0
 4222 010a 0023     		movs	r3, #0
 4223 010c BB64     		str	r3, [r7, #72]
1375:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 101


1376:..\src/interruptions.c ****             // Proportional
1377:..\src/interruptions.c ****             if (k_p_dl != 0)
 4224              		.loc 1 1377 0
 4225 010e 7B6A     		ldr	r3, [r7, #36]
 4226 0110 002B     		cmp	r3, #0
 4227 0112 07D0     		beq	.L275
1378:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4228              		.loc 1 1378 0
 4229 0114 7B6A     		ldr	r3, [r7, #36]
 4230 0116 FA68     		ldr	r2, [r7, #12]
 4231 0118 02FB03F3 		mul	r3, r2, r3
 4232 011c 1B14     		asrs	r3, r3, #16
 4233 011e BA6C     		ldr	r2, [r7, #72]
 4234 0120 1344     		add	r3, r3, r2
 4235 0122 BB64     		str	r3, [r7, #72]
 4236              	.L275:
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             // Integral
1381:..\src/interruptions.c ****             if (k_i_dl != 0)
 4237              		.loc 1 1381 0
 4238 0124 3B6A     		ldr	r3, [r7, #32]
 4239 0126 002B     		cmp	r3, #0
 4240 0128 0AD0     		beq	.L276
1382:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4241              		.loc 1 1382 0
 4242 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4243 012c 5C4A     		ldr	r2, .L357+16
 4244 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4245 0132 3A6A     		ldr	r2, [r7, #32]
 4246 0134 02FB03F3 		mul	r3, r2, r3
 4247 0138 1B14     		asrs	r3, r3, #16
 4248 013a BA6C     		ldr	r2, [r7, #72]
 4249 013c 1344     		add	r3, r3, r2
 4250 013e BB64     		str	r3, [r7, #72]
 4251              	.L276:
1383:..\src/interruptions.c **** 
1384:..\src/interruptions.c ****             // Derivative
1385:..\src/interruptions.c ****             if (k_d_dl != 0)
 4252              		.loc 1 1385 0
 4253 0140 FB69     		ldr	r3, [r7, #28]
 4254 0142 002B     		cmp	r3, #0
 4255 0144 0CD0     		beq	.L277
1386:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4256              		.loc 1 1386 0
 4257 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4258 0148 584A     		ldr	r2, .L357+28
 4259 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4260 014e FA68     		ldr	r2, [r7, #12]
 4261 0150 D31A     		subs	r3, r2, r3
 4262 0152 FA69     		ldr	r2, [r7, #28]
 4263 0154 02FB03F3 		mul	r3, r2, r3
 4264 0158 1B14     		asrs	r3, r3, #16
 4265 015a BA6C     		ldr	r2, [r7, #72]
 4266 015c 1344     		add	r3, r3, r2
 4267 015e BB64     		str	r3, [r7, #72]
 4268              	.L277:
1387:..\src/interruptions.c ****                         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 102


1388:..\src/interruptions.c ****             // Update previous position
1389:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4269              		.loc 1 1389 0
 4270 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4271 0162 5249     		ldr	r1, .L357+28
 4272 0164 FA68     		ldr	r2, [r7, #12]
 4273 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1390:..\src/interruptions.c **** 
1391:..\src/interruptions.c ****             // motor direction depends on i_ref
1392:..\src/interruptions.c ****             if (i_ref >= 0)
 4274              		.loc 1 1392 0
 4275 016a BB6C     		ldr	r3, [r7, #72]
 4276 016c 002B     		cmp	r3, #0
 4277 016e 04DB     		blt	.L278
1393:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4278              		.loc 1 1393 0
 4279 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4280 0172 4F4A     		ldr	r2, .L357+32
 4281 0174 0121     		movs	r1, #1
 4282 0176 D154     		strb	r1, [r2, r3]
 4283 0178 03E0     		b	.L279
 4284              	.L278:
1394:..\src/interruptions.c ****             else
1395:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4285              		.loc 1 1395 0
 4286 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4287 017c 4C4A     		ldr	r2, .L357+32
 4288 017e 0021     		movs	r1, #0
 4289 0180 D154     		strb	r1, [r2, r3]
 4290              	.L279:
1396:..\src/interruptions.c **** 
1397:..\src/interruptions.c ****             // saturate max current
1398:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4291              		.loc 1 1398 0
 4292 0182 7B6C     		ldr	r3, [r7, #68]
 4293 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4294 0188 1A46     		mov	r2, r3
 4295 018a BB6C     		ldr	r3, [r7, #72]
 4296 018c 9A42     		cmp	r2, r3
 4297 018e 04DA     		bge	.L280
1399:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4298              		.loc 1 1399 0
 4299 0190 7B6C     		ldr	r3, [r7, #68]
 4300 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4301 0196 BB64     		str	r3, [r7, #72]
 4302 0198 0BE0     		b	.L281
 4303              	.L280:
1400:..\src/interruptions.c ****             else {
1401:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4304              		.loc 1 1401 0
 4305 019a 7B6C     		ldr	r3, [r7, #68]
 4306 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4307 01a0 5A42     		negs	r2, r3
 4308 01a2 BB6C     		ldr	r3, [r7, #72]
 4309 01a4 9A42     		cmp	r2, r3
 4310 01a6 04DD     		ble	.L281
1402:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 103


 4311              		.loc 1 1402 0
 4312 01a8 7B6C     		ldr	r3, [r7, #68]
 4313 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4314 01ae 5B42     		negs	r3, r3
 4315 01b0 BB64     		str	r3, [r7, #72]
 4316              	.L281:
1403:..\src/interruptions.c ****         	}
1404:..\src/interruptions.c **** 
1405:..\src/interruptions.c ****             // current error and curr error sum
1406:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4317              		.loc 1 1406 0
 4318 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4319 01b6 394A     		ldr	r2, .L357+12
 4320 01b8 3421     		movs	r1, #52
 4321 01ba 01FB03F3 		mul	r3, r1, r3
 4322 01be 1344     		add	r3, r3, r2
 4323 01c0 0C33     		adds	r3, r3, #12
 4324 01c2 1B68     		ldr	r3, [r3]
 4325 01c4 BA6C     		ldr	r2, [r7, #72]
 4326 01c6 D31A     		subs	r3, r2, r3
 4327 01c8 BB60     		str	r3, [r7, #8]
1407:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4328              		.loc 1 1407 0
 4329 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4330 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4331 01ce 3949     		ldr	r1, .L357+36
 4332 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4333 01d4 BA68     		ldr	r2, [r7, #8]
 4334 01d6 0A44     		add	r2, r2, r1
 4335 01d8 3649     		ldr	r1, .L357+36
 4336 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1408:..\src/interruptions.c ****             
1409:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4337              		.loc 1 1409 0
 4338 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4339 01e0 344A     		ldr	r2, .L357+36
 4340 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4341 01e6 344A     		ldr	r2, .L357+40
 4342 01e8 9342     		cmp	r3, r2
 4343 01ea 05DD     		ble	.L282
1410:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4344              		.loc 1 1410 0
 4345 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4346 01ee 314A     		ldr	r2, .L357+36
 4347 01f0 3149     		ldr	r1, .L357+40
 4348 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4349 01f6 0BE0     		b	.L283
 4350              	.L282:
1411:..\src/interruptions.c ****             else {
1412:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4351              		.loc 1 1412 0
 4352 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4353 01fa 2E4A     		ldr	r2, .L357+36
 4354 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4355 0200 2E4A     		ldr	r2, .L357+44
 4356 0202 9342     		cmp	r3, r2
 4357 0204 04DA     		bge	.L283
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 104


1413:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4358              		.loc 1 1413 0
 4359 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4360 0208 2A4A     		ldr	r2, .L357+36
 4361 020a 2C49     		ldr	r1, .L357+44
 4362 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4363              	.L283:
1414:..\src/interruptions.c ****             }
1415:..\src/interruptions.c **** 
1416:..\src/interruptions.c ****             // ----- current PID control -----
1417:..\src/interruptions.c **** 
1418:..\src/interruptions.c ****             pwm_input = 0;
 4364              		.loc 1 1418 0
 4365 0210 0023     		movs	r3, #0
 4366 0212 FB64     		str	r3, [r7, #76]
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****             // Proportional
1421:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4367              		.loc 1 1421 0
 4368 0214 BB69     		ldr	r3, [r7, #24]
 4369 0216 002B     		cmp	r3, #0
 4370 0218 07D0     		beq	.L284
1422:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4371              		.loc 1 1422 0
 4372 021a BB69     		ldr	r3, [r7, #24]
 4373 021c BA68     		ldr	r2, [r7, #8]
 4374 021e 02FB03F3 		mul	r3, r2, r3
 4375 0222 1B14     		asrs	r3, r3, #16
 4376 0224 FA6C     		ldr	r2, [r7, #76]
 4377 0226 1344     		add	r3, r3, r2
 4378 0228 FB64     		str	r3, [r7, #76]
 4379              	.L284:
1423:..\src/interruptions.c **** 
1424:..\src/interruptions.c ****             // Integral
1425:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4380              		.loc 1 1425 0
 4381 022a 7B69     		ldr	r3, [r7, #20]
 4382 022c 002B     		cmp	r3, #0
 4383 022e 0AD0     		beq	.L285
1426:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4384              		.loc 1 1426 0
 4385 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4386 0232 204A     		ldr	r2, .L357+36
 4387 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4388 0238 7A69     		ldr	r2, [r7, #20]
 4389 023a 02FB03F3 		mul	r3, r2, r3
 4390 023e 1B14     		asrs	r3, r3, #16
 4391 0240 FA6C     		ldr	r2, [r7, #76]
 4392 0242 1344     		add	r3, r3, r2
 4393 0244 FB64     		str	r3, [r7, #76]
 4394              	.L285:
1427:..\src/interruptions.c **** 
1428:..\src/interruptions.c ****             // Derivative
1429:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4395              		.loc 1 1429 0
 4396 0246 3B69     		ldr	r3, [r7, #16]
 4397 0248 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 105


 4398 024a 0CD0     		beq	.L286
1430:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4399              		.loc 1 1430 0
 4400 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4401 024e 1C4A     		ldr	r2, .L357+48
 4402 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4403 0254 BA68     		ldr	r2, [r7, #8]
 4404 0256 D31A     		subs	r3, r2, r3
 4405 0258 3A69     		ldr	r2, [r7, #16]
 4406 025a 02FB03F3 		mul	r3, r2, r3
 4407 025e 1B14     		asrs	r3, r3, #16
 4408 0260 FA6C     		ldr	r2, [r7, #76]
 4409 0262 1344     		add	r3, r3, r2
 4410 0264 FB64     		str	r3, [r7, #76]
 4411              	.L286:
1431:..\src/interruptions.c ****              
1432:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1433:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4412              		.loc 1 1433 0
 4413 0266 7B6C     		ldr	r3, [r7, #68]
 4414 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4415 026c 022B     		cmp	r3, #2
 4416 026e 2BD1     		bne	.L287
1434:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4417              		.loc 1 1434 0
 4418 0270 FB6C     		ldr	r3, [r7, #76]
 4419 0272 40F6A932 		movw	r2, #2985
 4420 0276 9342     		cmp	r3, r2
 4421 0278 02DD     		ble	.L288
1435:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4422              		.loc 1 1435 0
 4423 027a 40F6A933 		movw	r3, #2985
 4424 027e FB64     		str	r3, [r7, #76]
 4425              	.L288:
1436:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4426              		.loc 1 1436 0
 4427 0280 FB6C     		ldr	r3, [r7, #76]
 4428 0282 104A     		ldr	r2, .L357+52
 4429 0284 9342     		cmp	r3, r2
 4430 0286 2BDA     		bge	.L290
1437:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4431              		.loc 1 1437 0
 4432 0288 0E4B     		ldr	r3, .L357+52
 4433 028a FB64     		str	r3, [r7, #76]
 4434 028c 28E0     		b	.L290
 4435              	.L358:
 4436 028e 00BF     		.align	2
 4437              	.L357:
 4438 0290 00000000 		.word	c_mem
 4439 0294 00000000 		.word	g_ref
 4440 0298 00000000 		.word	g_refOld
 4441 029c 00000000 		.word	g_meas
 4442 02a0 AC000000 		.word	pos_error_sum.10605
 4443 02a4 80F0FA02 		.word	50000000
 4444 02a8 800F05FD 		.word	-50000000
 4445 02ac B4000000 		.word	prev_pos_err.10607
 4446 02b0 BC000000 		.word	motor_dir.10610
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 106


 4447 02b4 C0000000 		.word	curr_error_sum.10606
 4448 02b8 A0860100 		.word	100000
 4449 02bc 6079FEFF 		.word	-100000
 4450 02c0 C8000000 		.word	prev_curr_err.10608
 4451 02c4 57F4FFFF 		.word	-2985
 4452              	.L287:
1438:..\src/interruptions.c ****             }
1439:..\src/interruptions.c ****             else {
1440:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4453              		.loc 1 1440 0
 4454 02c8 FB6C     		ldr	r3, [r7, #76]
 4455 02ca 642B     		cmp	r3, #100
 4456 02cc 01DD     		ble	.L291
1441:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4457              		.loc 1 1441 0
 4458 02ce 6423     		movs	r3, #100
 4459 02d0 FB64     		str	r3, [r7, #76]
 4460              	.L291:
1442:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4461              		.loc 1 1442 0
 4462 02d2 FB6C     		ldr	r3, [r7, #76]
 4463 02d4 13F1640F 		cmn	r3, #100
 4464 02d8 02DA     		bge	.L290
1443:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4465              		.loc 1 1443 0
 4466 02da 6FF06303 		mvn	r3, #99
 4467 02de FB64     		str	r3, [r7, #76]
 4468              	.L290:
1444:..\src/interruptions.c ****             }
1445:..\src/interruptions.c **** 
1446:..\src/interruptions.c ****             // Update previous current
1447:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4469              		.loc 1 1447 0
 4470 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4471 02e2 A049     		ldr	r1, .L359
 4472 02e4 BA68     		ldr	r2, [r7, #8]
 4473 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1448:..\src/interruptions.c **** 
1449:..\src/interruptions.c ****         break;
 4474              		.loc 1 1449 0
 4475 02ea 54E1     		b	.L267
 4476              	.L268:
1450:..\src/interruptions.c **** 
1451:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1452:..\src/interruptions.c ****         case CONTROL_ANGLE:
1453:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4477              		.loc 1 1453 0
 4478 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4479 02ee 9E4A     		ldr	r2, .L359+4
 4480 02f0 1B01     		lsls	r3, r3, #4
 4481 02f2 1344     		add	r3, r3, r2
 4482 02f4 1A68     		ldr	r2, [r3]
 4483 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4484 02fa 9C49     		ldr	r1, .L359+8
 4485 02fc 3420     		movs	r0, #52
 4486 02fe 00FB03F3 		mul	r3, r0, r3
 4487 0302 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 107


 4488 0304 1B68     		ldr	r3, [r3]
 4489 0306 D31A     		subs	r3, r2, r3
 4490 0308 FB60     		str	r3, [r7, #12]
1454:..\src/interruptions.c **** 
1455:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4491              		.loc 1 1455 0
 4492 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4493 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4494 030e 9849     		ldr	r1, .L359+12
 4495 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4496 0314 FA68     		ldr	r2, [r7, #12]
 4497 0316 0A44     		add	r2, r2, r1
 4498 0318 9549     		ldr	r1, .L359+12
 4499 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1456:..\src/interruptions.c **** 
1457:..\src/interruptions.c ****             // anti-windup (for integral control)
1458:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4500              		.loc 1 1458 0
 4501 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4502 0320 934A     		ldr	r2, .L359+12
 4503 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4504 0326 B3F57A7F 		cmp	r3, #1000
 4505 032a 06DD     		ble	.L292
1459:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4506              		.loc 1 1459 0
 4507 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4508 032e 904A     		ldr	r2, .L359+12
 4509 0330 4FF47A71 		mov	r1, #1000
 4510 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4511 0338 0BE0     		b	.L293
 4512              	.L292:
1460:..\src/interruptions.c ****             else {
1461:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4513              		.loc 1 1461 0
 4514 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4515 033c 8C4A     		ldr	r2, .L359+12
 4516 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4517 0342 13F57A7F 		cmn	r3, #1000
 4518 0346 04DA     		bge	.L293
1462:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4519              		.loc 1 1462 0
 4520 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4521 034a 894A     		ldr	r2, .L359+12
 4522 034c 8949     		ldr	r1, .L359+16
 4523 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4524              	.L293:
1463:..\src/interruptions.c ****             }
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Proportional
1466:..\src/interruptions.c ****             if (k_p != 0) 
 4525              		.loc 1 1466 0
 4526 0352 FB6B     		ldr	r3, [r7, #60]
 4527 0354 002B     		cmp	r3, #0
 4528 0356 05D0     		beq	.L294
1467:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4529              		.loc 1 1467 0
 4530 0358 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 108


 4531 035a FA68     		ldr	r2, [r7, #12]
 4532 035c 02FB03F3 		mul	r3, r2, r3
 4533 0360 1B14     		asrs	r3, r3, #16
 4534 0362 FB64     		str	r3, [r7, #76]
 4535              	.L294:
1468:..\src/interruptions.c ****             
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****             // Integral
1471:..\src/interruptions.c ****             if (k_i != 0) 
 4536              		.loc 1 1471 0
 4537 0364 BB6B     		ldr	r3, [r7, #56]
 4538 0366 002B     		cmp	r3, #0
 4539 0368 0AD0     		beq	.L295
1472:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4540              		.loc 1 1472 0
 4541 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4542 036c 804A     		ldr	r2, .L359+12
 4543 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4544 0372 BA6B     		ldr	r2, [r7, #56]
 4545 0374 02FB03F3 		mul	r3, r2, r3
 4546 0378 1B14     		asrs	r3, r3, #16
 4547 037a FA6C     		ldr	r2, [r7, #76]
 4548 037c 1344     		add	r3, r3, r2
 4549 037e FB64     		str	r3, [r7, #76]
 4550              	.L295:
1473:..\src/interruptions.c ****             
1474:..\src/interruptions.c **** 
1475:..\src/interruptions.c ****             // Derivative
1476:..\src/interruptions.c ****             if (k_d != 0) 
 4551              		.loc 1 1476 0
 4552 0380 7B6B     		ldr	r3, [r7, #52]
 4553 0382 002B     		cmp	r3, #0
 4554 0384 0CD0     		beq	.L296
1477:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4555              		.loc 1 1477 0
 4556 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4557 0388 7B4A     		ldr	r2, .L359+20
 4558 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4559 038e FA68     		ldr	r2, [r7, #12]
 4560 0390 D31A     		subs	r3, r2, r3
 4561 0392 7A6B     		ldr	r2, [r7, #52]
 4562 0394 02FB03F3 		mul	r3, r2, r3
 4563 0398 1B14     		asrs	r3, r3, #16
 4564 039a FA6C     		ldr	r2, [r7, #76]
 4565 039c 1344     		add	r3, r3, r2
 4566 039e FB64     		str	r3, [r7, #76]
 4567              	.L296:
1478:..\src/interruptions.c ****             
1479:..\src/interruptions.c **** 
1480:..\src/interruptions.c ****             // Update measure
1481:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4568              		.loc 1 1481 0
 4569 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4570 03a2 7549     		ldr	r1, .L359+20
 4571 03a4 FA68     		ldr	r2, [r7, #12]
 4572 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1482:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 109


1483:..\src/interruptions.c ****             if (pwm_input > 0)
 4573              		.loc 1 1483 0
 4574 03aa FB6C     		ldr	r3, [r7, #76]
 4575 03ac 002B     		cmp	r3, #0
 4576 03ae 04DD     		ble	.L297
1484:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4577              		.loc 1 1484 0
 4578 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4579 03b2 724A     		ldr	r2, .L359+24
 4580 03b4 0121     		movs	r1, #1
 4581 03b6 D154     		strb	r1, [r2, r3]
1485:..\src/interruptions.c ****             else
1486:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1487:..\src/interruptions.c **** 
1488:..\src/interruptions.c ****         break;
 4582              		.loc 1 1488 0
 4583 03b8 EDE0     		b	.L267
 4584              	.L297:
1486:..\src/interruptions.c **** 
 4585              		.loc 1 1486 0
 4586 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4587 03bc 6F4A     		ldr	r2, .L359+24
 4588 03be 0021     		movs	r1, #0
 4589 03c0 D154     		strb	r1, [r2, r3]
 4590              		.loc 1 1488 0
 4591 03c2 E8E0     		b	.L267
 4592              	.L271:
1489:..\src/interruptions.c **** 
1490:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1491:..\src/interruptions.c ****         case CONTROL_CURRENT:
1492:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4593              		.loc 1 1492 0
 4594 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4595 03c6 684A     		ldr	r2, .L359+4
 4596 03c8 1B01     		lsls	r3, r3, #4
 4597 03ca 1344     		add	r3, r3, r2
 4598 03cc 0C33     		adds	r3, r3, #12
 4599 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4600 03d0 002B     		cmp	r3, #0
 4601 03d2 00F0C480 		beq	.L354
 4602              		.loc 1 1492 0 is_stmt 0 discriminator 1
 4603 03d6 6A4B     		ldr	r3, .L359+28
 4604 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4605 03da 002B     		cmp	r3, #0
 4606 03dc 00F0BF80 		beq	.L354
1493:..\src/interruptions.c ****                 
1494:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4607              		.loc 1 1494 0 is_stmt 1
 4608 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4609 03e2 614A     		ldr	r2, .L359+4
 4610 03e4 1B01     		lsls	r3, r3, #4
 4611 03e6 1344     		add	r3, r3, r2
 4612 03e8 0433     		adds	r3, r3, #4
 4613 03ea 1B68     		ldr	r3, [r3]
 4614 03ec BB64     		str	r3, [r7, #72]
1495:..\src/interruptions.c **** 
1496:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 110


 4615              		.loc 1 1496 0
 4616 03ee 7B6C     		ldr	r3, [r7, #68]
 4617 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4618 03f4 1A46     		mov	r2, r3
 4619 03f6 BB6C     		ldr	r3, [r7, #72]
 4620 03f8 9A42     		cmp	r2, r3
 4621 03fa 04DA     		bge	.L300
1497:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4622              		.loc 1 1497 0
 4623 03fc 7B6C     		ldr	r3, [r7, #68]
 4624 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4625 0402 BB64     		str	r3, [r7, #72]
 4626 0404 0BE0     		b	.L301
 4627              	.L300:
1498:..\src/interruptions.c ****                 else {
1499:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4628              		.loc 1 1499 0
 4629 0406 7B6C     		ldr	r3, [r7, #68]
 4630 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4631 040c 5A42     		negs	r2, r3
 4632 040e BB6C     		ldr	r3, [r7, #72]
 4633 0410 9A42     		cmp	r2, r3
 4634 0412 04DD     		ble	.L301
1500:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4635              		.loc 1 1500 0
 4636 0414 7B6C     		ldr	r3, [r7, #68]
 4637 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4638 041a 5B42     		negs	r3, r3
 4639 041c BB64     		str	r3, [r7, #72]
 4640              	.L301:
1501:..\src/interruptions.c ****                 }
1502:..\src/interruptions.c ****                 
1503:..\src/interruptions.c ****                 // current error
1504:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4641              		.loc 1 1504 0
 4642 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4643 0422 524A     		ldr	r2, .L359+8
 4644 0424 3421     		movs	r1, #52
 4645 0426 01FB03F3 		mul	r3, r1, r3
 4646 042a 1344     		add	r3, r3, r2
 4647 042c 0C33     		adds	r3, r3, #12
 4648 042e 1B68     		ldr	r3, [r3]
 4649 0430 BA6C     		ldr	r2, [r7, #72]
 4650 0432 D31A     		subs	r3, r2, r3
 4651 0434 BB60     		str	r3, [r7, #8]
1505:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4652              		.loc 1 1505 0
 4653 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4654 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4655 043a 5249     		ldr	r1, .L359+32
 4656 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4657 0440 BA68     		ldr	r2, [r7, #8]
 4658 0442 0A44     		add	r2, r2, r1
 4659 0444 4F49     		ldr	r1, .L359+32
 4660 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1506:..\src/interruptions.c ****                 
1507:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 111


 4661              		.loc 1 1507 0
 4662 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4663 044c 4D4A     		ldr	r2, .L359+32
 4664 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4665 0452 4D4A     		ldr	r2, .L359+36
 4666 0454 9342     		cmp	r3, r2
 4667 0456 05DD     		ble	.L302
1508:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4668              		.loc 1 1508 0
 4669 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4670 045a 4A4A     		ldr	r2, .L359+32
 4671 045c 4A49     		ldr	r1, .L359+36
 4672 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4673 0462 0BE0     		b	.L303
 4674              	.L302:
1509:..\src/interruptions.c ****                 else {
1510:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4675              		.loc 1 1510 0
 4676 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4677 0466 474A     		ldr	r2, .L359+32
 4678 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4679 046c 474A     		ldr	r2, .L359+40
 4680 046e 9342     		cmp	r3, r2
 4681 0470 04DA     		bge	.L303
1511:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4682              		.loc 1 1511 0
 4683 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4684 0474 434A     		ldr	r2, .L359+32
 4685 0476 4549     		ldr	r1, .L359+40
 4686 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4687              	.L303:
1512:..\src/interruptions.c ****                 }
1513:..\src/interruptions.c **** 
1514:..\src/interruptions.c ****                 pwm_input = 0;
 4688              		.loc 1 1514 0
 4689 047c 0023     		movs	r3, #0
 4690 047e FB64     		str	r3, [r7, #76]
1515:..\src/interruptions.c **** 
1516:..\src/interruptions.c ****                 // Proportional
1517:..\src/interruptions.c ****                 if (k_p_c != 0)
 4691              		.loc 1 1517 0
 4692 0480 3B6B     		ldr	r3, [r7, #48]
 4693 0482 002B     		cmp	r3, #0
 4694 0484 07D0     		beq	.L304
1518:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4695              		.loc 1 1518 0
 4696 0486 3B6B     		ldr	r3, [r7, #48]
 4697 0488 BA68     		ldr	r2, [r7, #8]
 4698 048a 02FB03F3 		mul	r3, r2, r3
 4699 048e 1B14     		asrs	r3, r3, #16
 4700 0490 FA6C     		ldr	r2, [r7, #76]
 4701 0492 1344     		add	r3, r3, r2
 4702 0494 FB64     		str	r3, [r7, #76]
 4703              	.L304:
1519:..\src/interruptions.c **** 
1520:..\src/interruptions.c ****                 // Integral
1521:..\src/interruptions.c ****                 if (k_i_c != 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 112


 4704              		.loc 1 1521 0
 4705 0496 FB6A     		ldr	r3, [r7, #44]
 4706 0498 002B     		cmp	r3, #0
 4707 049a 0AD0     		beq	.L305
1522:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4708              		.loc 1 1522 0
 4709 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4710 049e 394A     		ldr	r2, .L359+32
 4711 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4712 04a4 FA6A     		ldr	r2, [r7, #44]
 4713 04a6 02FB03F3 		mul	r3, r2, r3
 4714 04aa 1B14     		asrs	r3, r3, #16
 4715 04ac FA6C     		ldr	r2, [r7, #76]
 4716 04ae 1344     		add	r3, r3, r2
 4717 04b0 FB64     		str	r3, [r7, #76]
 4718              	.L305:
1523:..\src/interruptions.c **** 
1524:..\src/interruptions.c ****                 // Derivative
1525:..\src/interruptions.c ****                 if (k_d_c != 0)
 4719              		.loc 1 1525 0
 4720 04b2 BB6A     		ldr	r3, [r7, #40]
 4721 04b4 002B     		cmp	r3, #0
 4722 04b6 0CD0     		beq	.L306
1526:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4723              		.loc 1 1526 0
 4724 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4725 04ba 2A4A     		ldr	r2, .L359
 4726 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4727 04c0 BA68     		ldr	r2, [r7, #8]
 4728 04c2 D31A     		subs	r3, r2, r3
 4729 04c4 BA6A     		ldr	r2, [r7, #40]
 4730 04c6 02FB03F3 		mul	r3, r2, r3
 4731 04ca 1B14     		asrs	r3, r3, #16
 4732 04cc FA6C     		ldr	r2, [r7, #76]
 4733 04ce 1344     		add	r3, r3, r2
 4734 04d0 FB64     		str	r3, [r7, #76]
 4735              	.L306:
1527:..\src/interruptions.c ****                 
1528:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4736              		.loc 1 1528 0
 4737 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4738 04d4 2349     		ldr	r1, .L359
 4739 04d6 BA68     		ldr	r2, [r7, #8]
 4740 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1529:..\src/interruptions.c ****                 
1530:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4741              		.loc 1 1530 0
 4742 04dc FB6C     		ldr	r3, [r7, #76]
 4743 04de 002B     		cmp	r3, #0
 4744 04e0 04DB     		blt	.L307
1531:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4745              		.loc 1 1531 0
 4746 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4747 04e4 254A     		ldr	r2, .L359+24
 4748 04e6 0121     		movs	r1, #1
 4749 04e8 D154     		strb	r1, [r2, r3]
1532:..\src/interruptions.c ****                 else
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 113


1533:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1534:..\src/interruptions.c ****             }
1535:..\src/interruptions.c ****         break;
 4750              		.loc 1 1535 0
 4751 04ea 38E0     		b	.L354
 4752              	.L307:
1533:..\src/interruptions.c ****             }
 4753              		.loc 1 1533 0
 4754 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4755 04ee 234A     		ldr	r2, .L359+24
 4756 04f0 0021     		movs	r1, #0
 4757 04f2 D154     		strb	r1, [r2, r3]
 4758              		.loc 1 1535 0
 4759 04f4 33E0     		b	.L354
 4760              	.L270:
1536:..\src/interruptions.c ****         
1537:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1538:..\src/interruptions.c ****         case CONTROL_PWM:
1539:..\src/interruptions.c **** 
1540:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4761              		.loc 1 1540 0
 4762 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4763 04f8 1B4A     		ldr	r2, .L359+4
 4764 04fa 1B01     		lsls	r3, r3, #4
 4765 04fc 1344     		add	r3, r3, r2
 4766 04fe 0833     		adds	r3, r3, #8
 4767 0500 1B68     		ldr	r3, [r3]
 4768 0502 FB64     		str	r3, [r7, #76]
1541:..\src/interruptions.c **** 
1542:..\src/interruptions.c ****             if (pwm_input > 0) 
 4769              		.loc 1 1542 0
 4770 0504 FB6C     		ldr	r3, [r7, #76]
 4771 0506 002B     		cmp	r3, #0
 4772 0508 04DD     		ble	.L308
1543:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4773              		.loc 1 1543 0
 4774 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4775 050c 1B4A     		ldr	r2, .L359+24
 4776 050e 0121     		movs	r1, #1
 4777 0510 D154     		strb	r1, [r2, r3]
 4778 0512 03E0     		b	.L309
 4779              	.L308:
1544:..\src/interruptions.c ****             else 
1545:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4780              		.loc 1 1545 0
 4781 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4782 0516 194A     		ldr	r2, .L359+24
 4783 0518 0021     		movs	r1, #0
 4784 051a D154     		strb	r1, [r2, r3]
 4785              	.L309:
1546:..\src/interruptions.c ****             
1547:..\src/interruptions.c ****           
1548:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1549:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4786              		.loc 1 1549 0
 4787 051c 7B6C     		ldr	r3, [r7, #68]
 4788 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 114


 4789 0522 022B     		cmp	r3, #2
 4790 0524 0ED1     		bne	.L310
1550:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4791              		.loc 1 1550 0
 4792 0526 FB6C     		ldr	r3, [r7, #76]
 4793 0528 40F6A932 		movw	r2, #2985
 4794 052c 9342     		cmp	r3, r2
 4795 052e 02DD     		ble	.L311
1551:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4796              		.loc 1 1551 0
 4797 0530 40F6A933 		movw	r3, #2985
 4798 0534 FB64     		str	r3, [r7, #76]
 4799              	.L311:
1552:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4800              		.loc 1 1552 0
 4801 0536 FB6C     		ldr	r3, [r7, #76]
 4802 0538 154A     		ldr	r2, .L359+44
 4803 053a 9342     		cmp	r3, r2
 4804 053c 2ADA     		bge	.L355
1553:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4805              		.loc 1 1553 0
 4806 053e 144B     		ldr	r3, .L359+44
 4807 0540 FB64     		str	r3, [r7, #76]
1554:..\src/interruptions.c ****             }
1555:..\src/interruptions.c ****             else {
1556:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1557:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1558:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1559:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1560:..\src/interruptions.c ****             }
1561:..\src/interruptions.c **** 
1562:..\src/interruptions.c ****         break;
 4808              		.loc 1 1562 0
 4809 0542 27E0     		b	.L355
 4810              	.L310:
1556:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4811              		.loc 1 1556 0
 4812 0544 FB6C     		ldr	r3, [r7, #76]
 4813 0546 642B     		cmp	r3, #100
 4814 0548 01DD     		ble	.L314
1557:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4815              		.loc 1 1557 0
 4816 054a 6423     		movs	r3, #100
 4817 054c FB64     		str	r3, [r7, #76]
 4818              	.L314:
1558:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4819              		.loc 1 1558 0
 4820 054e FB6C     		ldr	r3, [r7, #76]
 4821 0550 13F1640F 		cmn	r3, #100
 4822 0554 1EDA     		bge	.L355
1559:..\src/interruptions.c ****             }
 4823              		.loc 1 1559 0
 4824 0556 6FF06303 		mvn	r3, #99
 4825 055a FB64     		str	r3, [r7, #76]
 4826              		.loc 1 1562 0
 4827 055c 1AE0     		b	.L355
 4828              	.L354:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 115


1535:..\src/interruptions.c ****         
 4829              		.loc 1 1535 0
 4830 055e 00BF     		nop
 4831 0560 19E0     		b	.L267
 4832              	.L360:
 4833 0562 00BF     		.align	2
 4834              	.L359:
 4835 0564 C8000000 		.word	prev_curr_err.10608
 4836 0568 00000000 		.word	g_ref
 4837 056c 00000000 		.word	g_meas
 4838 0570 AC000000 		.word	pos_error_sum.10605
 4839 0574 18FCFFFF 		.word	-1000
 4840 0578 B4000000 		.word	prev_pos_err.10607
 4841 057c BC000000 		.word	motor_dir.10610
 4842 0580 00000000 		.word	tension_valid
 4843 0584 C0000000 		.word	curr_error_sum.10606
 4844 0588 A0860100 		.word	100000
 4845 058c 6079FEFF 		.word	-100000
 4846 0590 57F4FFFF 		.word	-2985
 4847              	.L355:
 4848              		.loc 1 1562 0
 4849 0594 00BF     		nop
 4850              	.L267:
1563:..\src/interruptions.c ****             
1564:..\src/interruptions.c ****     }
1565:..\src/interruptions.c **** 
1566:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1567:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1568:..\src/interruptions.c **** 
1569:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1570:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4851              		.loc 1 1570 0
 4852 0596 7B6C     		ldr	r3, [r7, #68]
 4853 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4854 059c 022B     		cmp	r3, #2
 4855 059e 23D1     		bne	.L315
1571:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4856              		.loc 1 1571 0
 4857 05a0 FB6C     		ldr	r3, [r7, #76]
 4858 05a2 40F6A932 		movw	r2, #2985
 4859 05a6 9342     		cmp	r3, r2
 4860 05a8 02DD     		ble	.L316
1572:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4861              		.loc 1 1572 0
 4862 05aa 40F6A933 		movw	r3, #2985
 4863 05ae FB64     		str	r3, [r7, #76]
 4864              	.L316:
1573:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4865              		.loc 1 1573 0
 4866 05b0 FB6C     		ldr	r3, [r7, #76]
 4867 05b2 B34A     		ldr	r2, .L361
 4868 05b4 9342     		cmp	r3, r2
 4869 05b6 01DA     		bge	.L317
1574:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4870              		.loc 1 1574 0
 4871 05b8 B14B     		ldr	r3, .L361
 4872 05ba FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 116


 4873              	.L317:
1575:..\src/interruptions.c ****         
1576:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4874              		.loc 1 1576 0
 4875 05bc 7B6C     		ldr	r3, [r7, #68]
 4876 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4877 05c2 012B     		cmp	r3, #1
 4878 05c4 31D0     		beq	.L319
1577:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4879              		.loc 1 1577 0
 4880 05c6 FB6C     		ldr	r3, [r7, #76]
 4881 05c8 9B02     		lsls	r3, r3, #10
 4882 05ca AE4A     		ldr	r2, .L361+4
 4883 05cc 82FB0312 		smull	r1, r2, r2, r3
 4884 05d0 9211     		asrs	r2, r2, #6
 4885 05d2 DB17     		asrs	r3, r3, #31
 4886 05d4 D31A     		subs	r3, r2, r3
 4887 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4888 05d8 AB49     		ldr	r1, .L361+8
 4889 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4890 05de 02FB03F3 		mul	r3, r2, r3
 4891 05e2 9B12     		asrs	r3, r3, #10
 4892 05e4 FB64     		str	r3, [r7, #76]
 4893 05e6 20E0     		b	.L319
 4894              	.L315:
1578:..\src/interruptions.c ****     }
1579:..\src/interruptions.c ****     else {
1580:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4895              		.loc 1 1580 0
 4896 05e8 FB6C     		ldr	r3, [r7, #76]
 4897 05ea 642B     		cmp	r3, #100
 4898 05ec 01DD     		ble	.L320
1581:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4899              		.loc 1 1581 0
 4900 05ee 6423     		movs	r3, #100
 4901 05f0 FB64     		str	r3, [r7, #76]
 4902              	.L320:
1582:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4903              		.loc 1 1582 0
 4904 05f2 FB6C     		ldr	r3, [r7, #76]
 4905 05f4 13F1640F 		cmn	r3, #100
 4906 05f8 02DA     		bge	.L321
1583:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4907              		.loc 1 1583 0
 4908 05fa 6FF06303 		mvn	r3, #99
 4909 05fe FB64     		str	r3, [r7, #76]
 4910              	.L321:
1584:..\src/interruptions.c ****         
1585:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4911              		.loc 1 1585 0
 4912 0600 7B6C     		ldr	r3, [r7, #68]
 4913 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4914 0606 012B     		cmp	r3, #1
 4915 0608 0FD0     		beq	.L319
1586:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4916              		.loc 1 1586 0
 4917 060a FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 117


 4918 060c 9B02     		lsls	r3, r3, #10
 4919 060e 9F4A     		ldr	r2, .L361+12
 4920 0610 82FB0312 		smull	r1, r2, r2, r3
 4921 0614 5211     		asrs	r2, r2, #5
 4922 0616 DB17     		asrs	r3, r3, #31
 4923 0618 D31A     		subs	r3, r2, r3
 4924 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4925 061c 9A49     		ldr	r1, .L361+8
 4926 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4927 0622 02FB03F3 		mul	r3, r2, r3
 4928 0626 9B12     		asrs	r3, r3, #10
 4929 0628 FB64     		str	r3, [r7, #76]
 4930              	.L319:
1587:..\src/interruptions.c ****     }
1588:..\src/interruptions.c **** 
1589:..\src/interruptions.c ****     //// RATE LIMITER ////
1590:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4931              		.loc 1 1590 0
 4932 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4933 062c 984A     		ldr	r2, .L361+16
 4934 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4935 0632 FA6C     		ldr	r2, [r7, #76]
 4936 0634 D31A     		subs	r3, r2, r3
 4937 0636 7A6C     		ldr	r2, [r7, #68]
 4938 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4939 063c 9342     		cmp	r3, r2
 4940 063e 09DD     		ble	.L322
1591:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4941              		.loc 1 1591 0
 4942 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4943 0642 934A     		ldr	r2, .L361+16
 4944 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4945 0648 7A6C     		ldr	r2, [r7, #68]
 4946 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4947 064e 1344     		add	r3, r3, r2
 4948 0650 FB64     		str	r3, [r7, #76]
 4949 0652 14E0     		b	.L323
 4950              	.L322:
1592:..\src/interruptions.c ****     }
1593:..\src/interruptions.c ****     else {
1594:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4951              		.loc 1 1594 0
 4952 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4953 0656 8E4A     		ldr	r2, .L361+16
 4954 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4955 065c FA6C     		ldr	r2, [r7, #76]
 4956 065e D21A     		subs	r2, r2, r3
 4957 0660 7B6C     		ldr	r3, [r7, #68]
 4958 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4959 0666 5B42     		negs	r3, r3
 4960 0668 9A42     		cmp	r2, r3
 4961 066a 08DA     		bge	.L323
1595:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4962              		.loc 1 1595 0
 4963 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4964 066e 884A     		ldr	r2, .L361+16
 4965 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 118


 4966 0674 7A6C     		ldr	r2, [r7, #68]
 4967 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4968 067a 9B1A     		subs	r3, r3, r2
 4969 067c FB64     		str	r3, [r7, #76]
 4970              	.L323:
1596:..\src/interruptions.c ****     }
1597:..\src/interruptions.c ****    
1598:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1599:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4971              		.loc 1 1599 0
 4972 067e 7B6C     		ldr	r3, [r7, #68]
 4973 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4974 0684 022B     		cmp	r3, #2
 4975 0686 0ED1     		bne	.L324
1600:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4976              		.loc 1 1600 0
 4977 0688 FB6C     		ldr	r3, [r7, #76]
 4978 068a 40F6A932 		movw	r2, #2985
 4979 068e 9342     		cmp	r3, r2
 4980 0690 02DD     		ble	.L325
1601:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4981              		.loc 1 1601 0
 4982 0692 40F6A933 		movw	r3, #2985
 4983 0696 FB64     		str	r3, [r7, #76]
 4984              	.L325:
1602:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4985              		.loc 1 1602 0
 4986 0698 FB6C     		ldr	r3, [r7, #76]
 4987 069a 794A     		ldr	r2, .L361
 4988 069c 9342     		cmp	r3, r2
 4989 069e 0EDA     		bge	.L327
1603:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4990              		.loc 1 1603 0
 4991 06a0 774B     		ldr	r3, .L361
 4992 06a2 FB64     		str	r3, [r7, #76]
 4993 06a4 0BE0     		b	.L327
 4994              	.L324:
1604:..\src/interruptions.c ****     }
1605:..\src/interruptions.c ****     else {
1606:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4995              		.loc 1 1606 0
 4996 06a6 FB6C     		ldr	r3, [r7, #76]
 4997 06a8 642B     		cmp	r3, #100
 4998 06aa 01DD     		ble	.L328
1607:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4999              		.loc 1 1607 0
 5000 06ac 6423     		movs	r3, #100
 5001 06ae FB64     		str	r3, [r7, #76]
 5002              	.L328:
1608:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 5003              		.loc 1 1608 0
 5004 06b0 FB6C     		ldr	r3, [r7, #76]
 5005 06b2 13F1640F 		cmn	r3, #100
 5006 06b6 02DA     		bge	.L327
1609:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 5007              		.loc 1 1609 0
 5008 06b8 6FF06303 		mvn	r3, #99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 119


 5009 06bc FB64     		str	r3, [r7, #76]
 5010              	.L327:
1610:..\src/interruptions.c ****     }
1611:..\src/interruptions.c **** 
1612:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 5011              		.loc 1 1612 0
 5012 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5013 06c0 7349     		ldr	r1, .L361+16
 5014 06c2 FA6C     		ldr	r2, [r7, #76]
 5015 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1613:..\src/interruptions.c ****            
1614:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5016              		.loc 1 1614 0
 5017 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5018 06ca FA6C     		ldr	r2, [r7, #76]
 5019 06cc 002A     		cmp	r2, #0
 5020 06ce 01DB     		blt	.L329
 5021              		.loc 1 1614 0 is_stmt 0 discriminator 1
 5022 06d0 0121     		movs	r1, #1
 5023 06d2 01E0     		b	.L330
 5024              	.L329:
 5025              		.loc 1 1614 0 discriminator 2
 5026 06d4 4FF0FF31 		mov	r1, #-1
 5027              	.L330:
 5028              		.loc 1 1614 0 discriminator 4
 5029 06d8 6E4A     		ldr	r2, .L361+20
 5030 06da D154     		strb	r1, [r2, r3]
1615:..\src/interruptions.c ****     
1616:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 5031              		.loc 1 1616 0 is_stmt 1 discriminator 4
 5032 06dc 7B6C     		ldr	r3, [r7, #68]
 5033 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 5034 06e2 012B     		cmp	r3, #1
 5035 06e4 40F0AA80 		bne	.L331
1617:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1618:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 5036              		.loc 1 1618 0
 5037 06e8 7B6C     		ldr	r3, [r7, #68]
 5038 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5039 06ee 012B     		cmp	r3, #1
 5040 06f0 00F09F80 		beq	.L332
 5041              		.loc 1 1618 0 is_stmt 0 discriminator 1
 5042 06f4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5043 06f8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5044 06fa 6748     		ldr	r0, .L361+24
 5045 06fc 1346     		mov	r3, r2
 5046 06fe 5B00     		lsls	r3, r3, #1
 5047 0700 1344     		add	r3, r3, r2
 5048 0702 9B00     		lsls	r3, r3, #2
 5049 0704 1344     		add	r3, r3, r2
 5050 0706 0B44     		add	r3, r3, r1
 5051 0708 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5052 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5053 0710 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5054 0712 624C     		ldr	r4, .L361+28
 5055 0714 1346     		mov	r3, r2
 5056 0716 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 120


 5057 0718 1344     		add	r3, r3, r2
 5058 071a 9B00     		lsls	r3, r3, #2
 5059 071c 1344     		add	r3, r3, r2
 5060 071e 0344     		add	r3, r3, r0
 5061 0720 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5062 0724 CB1A     		subs	r3, r1, r3
 5063 0726 312B     		cmp	r3, #49
 5064 0728 00F38380 		bgt	.L332
1619:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5065              		.loc 1 1619 0 is_stmt 1 discriminator 2
 5066 072c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5067 0730 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5068 0732 5948     		ldr	r0, .L361+24
 5069 0734 1346     		mov	r3, r2
 5070 0736 5B00     		lsls	r3, r3, #1
 5071 0738 1344     		add	r3, r3, r2
 5072 073a 9B00     		lsls	r3, r3, #2
 5073 073c 1344     		add	r3, r3, r2
 5074 073e 0B44     		add	r3, r3, r1
 5075 0740 50F82310 		ldr	r1, [r0, r3, lsl #2]
 5076 0744 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5077 0748 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5078 074a 544C     		ldr	r4, .L361+28
 5079 074c 1346     		mov	r3, r2
 5080 074e 5B00     		lsls	r3, r3, #1
 5081 0750 1344     		add	r3, r3, r2
 5082 0752 9B00     		lsls	r3, r3, #2
 5083 0754 1344     		add	r3, r3, r2
 5084 0756 0344     		add	r3, r3, r0
 5085 0758 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5086 075c CB1A     		subs	r3, r1, r3
1618:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5087              		.loc 1 1618 0 discriminator 2
 5088 075e 13F1310F 		cmn	r3, #49
 5089 0762 66DB     		blt	.L332
1620:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 5090              		.loc 1 1620 0
 5091 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5092 0766 4E4A     		ldr	r2, .L361+32
 5093 0768 1B01     		lsls	r3, r3, #4
 5094 076a 1344     		add	r3, r3, r2
 5095 076c 1A68     		ldr	r2, [r3]
 5096 076e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5097 0770 4C49     		ldr	r1, .L361+36
 5098 0772 1B01     		lsls	r3, r3, #4
 5099 0774 0B44     		add	r3, r3, r1
 5100 0776 1B68     		ldr	r3, [r3]
 5101 0778 D31A     		subs	r3, r2, r3
1619:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 5102              		.loc 1 1619 0
 5103 077a 632B     		cmp	r3, #99
 5104 077c 59DC     		bgt	.L332
 5105              		.loc 1 1620 0
 5106 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5107 0780 474A     		ldr	r2, .L361+32
 5108 0782 1B01     		lsls	r3, r3, #4
 5109 0784 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 121


 5110 0786 1A68     		ldr	r2, [r3]
 5111 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5112 078a 4649     		ldr	r1, .L361+36
 5113 078c 1B01     		lsls	r3, r3, #4
 5114 078e 0B44     		add	r3, r3, r1
 5115 0790 1B68     		ldr	r3, [r3]
 5116 0792 D31A     		subs	r3, r2, r3
 5117 0794 13F1630F 		cmn	r3, #99
 5118 0798 4BDB     		blt	.L332
1621:..\src/interruptions.c ****             position_counter[idx]++;
 5119              		.loc 1 1621 0
 5120 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5121 079c 424A     		ldr	r2, .L361+40
 5122 079e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5123 07a2 0132     		adds	r2, r2, #1
 5124 07a4 4049     		ldr	r1, .L361+40
 5125 07a6 41F82320 		str	r2, [r1, r3, lsl #2]
1622:..\src/interruptions.c ****             
1623:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5126              		.loc 1 1623 0
 5127 07aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5128 07ac 3E4A     		ldr	r2, .L361+40
 5129 07ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5130 07b2 F92B     		cmp	r3, #249
 5131 07b4 42D9     		bls	.L331
1624:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5132              		.loc 1 1624 0
 5133 07b6 7B6C     		ldr	r3, [r7, #68]
 5134 07b8 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5135 07bc 002B     		cmp	r3, #0
 5136 07be 10D1     		bne	.L334
 5137              		.loc 1 1624 0 is_stmt 0 discriminator 1
 5138 07c0 3A4B     		ldr	r3, .L361+44
 5139 07c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5140 07c4 002B     		cmp	r3, #0
 5141 07c6 0CD1     		bne	.L334
1625:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5142              		.loc 1 1625 0 is_stmt 1
 5143 07c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5144 07ca 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5145 07ce 3349     		ldr	r1, .L361+28
 5146 07d0 3420     		movs	r0, #52
 5147 07d2 00FB02F2 		mul	r2, r0, r2
 5148 07d6 0A44     		add	r2, r2, r1
 5149 07d8 1268     		ldr	r2, [r2]
 5150 07da 3549     		ldr	r1, .L361+48
 5151 07dc 1B01     		lsls	r3, r3, #4
 5152 07de 0B44     		add	r3, r3, r1
 5153 07e0 1A60     		str	r2, [r3]
 5154              	.L334:
1626:..\src/interruptions.c ****                 }
1627:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5155              		.loc 1 1627 0
 5156 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5157 07e4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5158 07e8 2C49     		ldr	r1, .L361+28
 5159 07ea 3420     		movs	r0, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 122


 5160 07ec 00FB02F2 		mul	r2, r0, r2
 5161 07f0 0A44     		add	r2, r2, r1
 5162 07f2 1268     		ldr	r2, [r2]
 5163 07f4 2B49     		ldr	r1, .L361+36
 5164 07f6 1B01     		lsls	r3, r3, #4
 5165 07f8 0B44     		add	r3, r3, r1
 5166 07fa 1A60     		str	r2, [r3]
1628:..\src/interruptions.c ****                 
1629:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5167              		.loc 1 1629 0
 5168 07fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5169 07fe 2A4A     		ldr	r2, .L361+40
 5170 0800 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5171 0804 FA2B     		cmp	r3, #250
 5172 0806 11D1     		bne	.L335
1630:..\src/interruptions.c ****                     // To do only once
1631:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5173              		.loc 1 1631 0
 5174 0808 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5175 080c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5176 0810 2249     		ldr	r1, .L361+28
 5177 0812 3420     		movs	r0, #52
 5178 0814 00FB02F2 		mul	r2, r0, r2
 5179 0818 0A44     		add	r2, r2, r1
 5180 081a 0C32     		adds	r2, r2, #12
 5181 081c 1268     		ldr	r2, [r2]
 5182 081e 1F49     		ldr	r1, .L361+28
 5183 0820 3420     		movs	r0, #52
 5184 0822 00FB03F3 		mul	r3, r0, r3
 5185 0826 0B44     		add	r3, r3, r1
 5186 0828 1433     		adds	r3, r3, #20
 5187 082a 1A60     		str	r2, [r3]
 5188              	.L335:
1632:..\src/interruptions.c ****                 }
1633:..\src/interruptions.c ****                 pwm_input = 0;            
 5189              		.loc 1 1633 0
 5190 082c 0023     		movs	r3, #0
 5191 082e FB64     		str	r3, [r7, #76]
1623:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 5192              		.loc 1 1623 0
 5193 0830 04E0     		b	.L331
 5194              	.L332:
1634:..\src/interruptions.c ****             }
1635:..\src/interruptions.c ****         }
1636:..\src/interruptions.c ****         else {
1637:..\src/interruptions.c ****             position_counter[idx] = 0;
 5195              		.loc 1 1637 0
 5196 0832 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5197 0834 1C4A     		ldr	r2, .L361+40
 5198 0836 0021     		movs	r1, #0
 5199 0838 42F82310 		str	r1, [r2, r3, lsl #2]
 5200              	.L331:
1638:..\src/interruptions.c ****         }
1639:..\src/interruptions.c ****     }
1640:..\src/interruptions.c ****     
1641:..\src/interruptions.c ****     
1642:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 123


1643:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 5201              		.loc 1 1643 0
 5202 083c 7B6C     		ldr	r3, [r7, #68]
 5203 083e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5204 0842 022B     		cmp	r3, #2
 5205 0844 3BD1     		bne	.L336
1644:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1645:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 5206              		.loc 1 1645 0
 5207 0846 FB6C     		ldr	r3, [r7, #76]
 5208 0848 002B     		cmp	r3, #0
 5209 084a B8BF     		it	lt
 5210 084c 5B42     		rsblt	r3, r3, #0
 5211 084e 40F68C22 		movw	r2, #2700
 5212 0852 9342     		cmp	r3, r2
 5213 0854 07DD     		ble	.L337
1646:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 5214              		.loc 1 1646 0
 5215 0856 FB6C     		ldr	r3, [r7, #76]
 5216 0858 002B     		cmp	r3, #0
 5217 085a 02DB     		blt	.L338
 5218              		.loc 1 1646 0 is_stmt 0 discriminator 1
 5219 085c 40F68C23 		movw	r3, #2700
 5220 0860 00E0     		b	.L339
 5221              	.L338:
 5222              		.loc 1 1646 0 discriminator 2
 5223 0862 144B     		ldr	r3, .L361+52
 5224              	.L339:
 5225              		.loc 1 1646 0 discriminator 4
 5226 0864 FB64     		str	r3, [r7, #76]
 5227              	.L337:
1647:..\src/interruptions.c ****         }
1648:..\src/interruptions.c ****         
1649:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 5228              		.loc 1 1649 0 is_stmt 1
 5229 0866 FB6C     		ldr	r3, [r7, #76]
 5230 0868 13F1C70F 		cmn	r3, #199
 5231 086c 27DB     		blt	.L336
 5232              		.loc 1 1649 0 is_stmt 0 discriminator 1
 5233 086e FB6C     		ldr	r3, [r7, #76]
 5234 0870 C72B     		cmp	r3, #199
 5235 0872 24DC     		bgt	.L336
1650:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 5236              		.loc 1 1650 0 is_stmt 1
 5237 0874 FB6C     		ldr	r3, [r7, #76]
 5238 0876 002B     		cmp	r3, #0
 5239 0878 1EDB     		blt	.L340
 5240              		.loc 1 1650 0 is_stmt 0 discriminator 1
 5241 087a C823     		movs	r3, #200
 5242 087c 1EE0     		b	.L341
 5243              	.L362:
 5244 087e 00BF     		.align	2
 5245              	.L361:
 5246 0880 57F4FFFF 		.word	-2985
 5247 0884 81207D05 		.word	92086401
 5248 0888 00000000 		.word	dev_pwm_limit
 5249 088c 1F85EB51 		.word	1374389535
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 124


 5250 0890 D0000000 		.word	prev_pwm.10609
 5251 0894 00000000 		.word	pwm_sign
 5252 0898 00000000 		.word	g_measOld
 5253 089c 00000000 		.word	g_meas
 5254 08a0 00000000 		.word	g_refOld
 5255 08a4 00000000 		.word	g_ref
 5256 08a8 D8000000 		.word	position_counter.10611
 5257 08ac 00000000 		.word	change_ext_ref_flag
 5258 08b0 00000000 		.word	g_refNew
 5259 08b4 74F5FFFF 		.word	-2700
 5260              	.L340:
 5261              		.loc 1 1650 0 discriminator 2
 5262 08b8 6FF0C703 		mvn	r3, #199
 5263              	.L341:
 5264              		.loc 1 1650 0 discriminator 4
 5265 08bc FB64     		str	r3, [r7, #76]
 5266              	.L336:
1651:..\src/interruptions.c ****         }
1652:..\src/interruptions.c ****        
1653:..\src/interruptions.c ****     }
1654:..\src/interruptions.c ****     
1655:..\src/interruptions.c ****     // Set motor direction and write pwm value
1656:..\src/interruptions.c ****     switch (idx) {
 5267              		.loc 1 1656 0 is_stmt 1
 5268 08be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5269 08c0 002B     		cmp	r3, #0
 5270 08c2 02D0     		beq	.L343
 5271 08c4 012B     		cmp	r3, #1
 5272 08c6 26D0     		beq	.L344
1657:..\src/interruptions.c ****         case 0:         // Motor 1
1658:..\src/interruptions.c ****             if (motor_dir[idx])
1659:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1660:..\src/interruptions.c ****             else
1661:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1662:..\src/interruptions.c ****             
1663:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1664:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1665:..\src/interruptions.c ****             }
1666:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1667:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1668:..\src/interruptions.c ****             }
1669:..\src/interruptions.c ****             
1670:..\src/interruptions.c ****             break;
1671:..\src/interruptions.c ****         case 1:         // Motor 2
1672:..\src/interruptions.c ****             
1673:..\src/interruptions.c ****             if (motor_dir[idx])
1674:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1675:..\src/interruptions.c ****             else
1676:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1677:..\src/interruptions.c ****             
1678:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1679:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1680:..\src/interruptions.c ****             }
1681:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1682:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1683:..\src/interruptions.c ****             }
1684:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 125


1685:..\src/interruptions.c ****             break;
1686:..\src/interruptions.c ****         default:
1687:..\src/interruptions.c ****             break;
 5273              		.loc 1 1687 0
 5274 08c8 4BE0     		b	.L349
 5275              	.L343:
1658:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5276              		.loc 1 1658 0
 5277 08ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5278 08cc 274A     		ldr	r2, .L363
 5279 08ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5280 08d0 002B     		cmp	r3, #0
 5281 08d2 03D0     		beq	.L345
1659:..\src/interruptions.c ****             else
 5282              		.loc 1 1659 0
 5283 08d4 0120     		movs	r0, #1
 5284 08d6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5285 08da 02E0     		b	.L346
 5286              	.L345:
1661:..\src/interruptions.c ****             
 5287              		.loc 1 1661 0
 5288 08dc 0020     		movs	r0, #0
 5289 08de FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5290              	.L346:
1663:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 5291              		.loc 1 1663 0
 5292 08e2 7B6C     		ldr	r3, [r7, #68]
 5293 08e4 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5294 08e8 012B     		cmp	r3, #1
 5295 08ea 0BD1     		bne	.L347
1664:..\src/interruptions.c ****             }
 5296              		.loc 1 1664 0
 5297 08ec FB6C     		ldr	r3, [r7, #76]
 5298 08ee 002B     		cmp	r3, #0
 5299 08f0 B8BF     		it	lt
 5300 08f2 5B42     		rsblt	r3, r3, #0
 5301 08f4 DBB2     		uxtb	r3, r3
 5302 08f6 C3F16403 		rsb	r3, r3, #100
 5303 08fa DBB2     		uxtb	r3, r3
 5304 08fc 1846     		mov	r0, r3
 5305 08fe FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1670:..\src/interruptions.c ****         case 1:         // Motor 2
 5306              		.loc 1 1670 0
 5307 0902 2EE0     		b	.L349
 5308              	.L347:
1667:..\src/interruptions.c ****             }
 5309              		.loc 1 1667 0
 5310 0904 FB6C     		ldr	r3, [r7, #76]
 5311 0906 002B     		cmp	r3, #0
 5312 0908 B8BF     		it	lt
 5313 090a 5B42     		rsblt	r3, r3, #0
 5314 090c DBB2     		uxtb	r3, r3
 5315 090e 1846     		mov	r0, r3
 5316 0910 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1670:..\src/interruptions.c ****         case 1:         // Motor 2
 5317              		.loc 1 1670 0
 5318 0914 25E0     		b	.L349
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 126


 5319              	.L344:
1673:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5320              		.loc 1 1673 0
 5321 0916 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5322 0918 144A     		ldr	r2, .L363
 5323 091a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5324 091c 002B     		cmp	r3, #0
 5325 091e 03D0     		beq	.L350
1674:..\src/interruptions.c ****             else
 5326              		.loc 1 1674 0
 5327 0920 0120     		movs	r0, #1
 5328 0922 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5329 0926 02E0     		b	.L351
 5330              	.L350:
1676:..\src/interruptions.c ****             
 5331              		.loc 1 1676 0
 5332 0928 0020     		movs	r0, #0
 5333 092a FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5334              	.L351:
1678:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 5335              		.loc 1 1678 0
 5336 092e 7B6C     		ldr	r3, [r7, #68]
 5337 0930 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5338 0934 012B     		cmp	r3, #1
 5339 0936 0BD1     		bne	.L352
1679:..\src/interruptions.c ****             }
 5340              		.loc 1 1679 0
 5341 0938 FB6C     		ldr	r3, [r7, #76]
 5342 093a 002B     		cmp	r3, #0
 5343 093c B8BF     		it	lt
 5344 093e 5B42     		rsblt	r3, r3, #0
 5345 0940 DBB2     		uxtb	r3, r3
 5346 0942 C3F16403 		rsb	r3, r3, #100
 5347 0946 DBB2     		uxtb	r3, r3
 5348 0948 1846     		mov	r0, r3
 5349 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1685:..\src/interruptions.c ****         default:
 5350              		.loc 1 1685 0
 5351 094e 07E0     		b	.L356
 5352              	.L352:
1682:..\src/interruptions.c ****             }
 5353              		.loc 1 1682 0
 5354 0950 FB6C     		ldr	r3, [r7, #76]
 5355 0952 002B     		cmp	r3, #0
 5356 0954 B8BF     		it	lt
 5357 0956 5B42     		rsblt	r3, r3, #0
 5358 0958 DBB2     		uxtb	r3, r3
 5359 095a 1846     		mov	r0, r3
 5360 095c FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5361              	.L356:
1685:..\src/interruptions.c ****         default:
 5362              		.loc 1 1685 0
 5363 0960 00BF     		nop
 5364              	.L349:
1688:..\src/interruptions.c ****     }
1689:..\src/interruptions.c ****     
1690:..\src/interruptions.c **** }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 127


 5365              		.loc 1 1690 0
 5366 0962 00BF     		nop
 5367 0964 5437     		adds	r7, r7, #84
 5368              		.cfi_def_cfa_offset 12
 5369 0966 BD46     		mov	sp, r7
 5370              		.cfi_def_cfa_register 13
 5371              		@ sp needed
 5372 0968 90BD     		pop	{r4, r7, pc}
 5373              	.L364:
 5374 096a 00BF     		.align	2
 5375              	.L363:
 5376 096c BC000000 		.word	motor_dir.10610
 5377              		.cfi_endproc
 5378              	.LFE72:
 5379              		.size	motor_control_generic, .-motor_control_generic
 5380              		.global	__aeabi_fcmpeq
 5381              		.global	__aeabi_fmul
 5382              		.global	__aeabi_f2iz
 5383              		.global	__aeabi_fcmplt
 5384              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5385              		.align	2
 5386              		.global	encoder_reading_SPI
 5387              		.thumb
 5388              		.thumb_func
 5389              		.type	encoder_reading_SPI, %function
 5390              	encoder_reading_SPI:
 5391              	.LFB73:
1691:..\src/interruptions.c **** 
1692:..\src/interruptions.c **** //==============================================================================
1693:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1694:..\src/interruptions.c **** //==============================================================================
1695:..\src/interruptions.c **** 
1696:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5392              		.loc 1 1696 0
 5393              		.cfi_startproc
 5394              		@ args = 0, pretend = 0, frame = 48
 5395              		@ frame_needed = 1, uses_anonymous_args = 0
 5396 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5397              		.cfi_def_cfa_offset 20
 5398              		.cfi_offset 4, -20
 5399              		.cfi_offset 5, -16
 5400              		.cfi_offset 6, -12
 5401              		.cfi_offset 7, -8
 5402              		.cfi_offset 14, -4
 5403 0002 8FB0     		sub	sp, sp, #60
 5404              		.cfi_def_cfa_offset 80
 5405 0004 02AF     		add	r7, sp, #8
 5406              		.cfi_def_cfa 7, 72
 5407 0006 0346     		mov	r3, r0
 5408 0008 0A46     		mov	r2, r1
 5409 000a FB71     		strb	r3, [r7, #7]
 5410 000c 1346     		mov	r3, r2
 5411 000e BB71     		strb	r3, [r7, #6]
1697:..\src/interruptions.c **** 
1698:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5412              		.loc 1 1698 0
 5413 0010 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 128


 5414 0012 87F82F30 		strb	r3, [r7, #47]
1699:..\src/interruptions.c ****     
1700:..\src/interruptions.c ****     // Encoder Variables  
1701:..\src/interruptions.c ****     uint8 jj;
1702:..\src/interruptions.c ****      
1703:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1704:..\src/interruptions.c ****     int16 tmp_value_encoder;
1705:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1706:..\src/interruptions.c ****     int32 value_encoder;
1707:..\src/interruptions.c ****     int32 speed_encoder;
1708:..\src/interruptions.c ****     int32 value_diff;
1709:..\src/interruptions.c **** 	int8 init_rot = 0;
 5415              		.loc 1 1709 0
 5416 0016 0023     		movs	r3, #0
 5417 0018 87F82730 		strb	r3, [r7, #39]
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1712:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1713:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1714:..\src/interruptions.c ****     
1715:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1716:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1717:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1718:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1719:..\src/interruptions.c **** 
1720:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1721:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1722:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1723:..\src/interruptions.c ****     
1724:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5418              		.loc 1 1724 0
 5419 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5420 001e 924A     		ldr	r2, .L402
 5421 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5422 0022 002B     		cmp	r3, #0
 5423 0024 19D0     		beq	.L366
1725:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5424              		.loc 1 1725 0
 5425 0026 0323     		movs	r3, #3
 5426 0028 87F82E30 		strb	r3, [r7, #46]
 5427 002c 0AE0     		b	.L367
 5428              	.L368:
1726:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5429              		.loc 1 1726 0
 5430 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5431 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5432 0034 8D48     		ldr	r0, .L402+4
 5433 0036 1346     		mov	r3, r2
 5434 0038 5B00     		lsls	r3, r3, #1
 5435 003a 1344     		add	r3, r3, r2
 5436 003c 0B44     		add	r3, r3, r1
 5437 003e 0022     		movs	r2, #0
 5438 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5439              	.L367:
1725:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5440              		.loc 1 1725 0 discriminator 1
 5441 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 129


 5442 0048 5A1E     		subs	r2, r3, #1
 5443 004a 87F82E20 		strb	r2, [r7, #46]
 5444 004e 002B     		cmp	r3, #0
 5445 0050 EDD1     		bne	.L368
1727:..\src/interruptions.c ****         
1728:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5446              		.loc 1 1728 0
 5447 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5448 0054 844A     		ldr	r2, .L402
 5449 0056 0021     		movs	r1, #0
 5450 0058 D154     		strb	r1, [r2, r3]
 5451              	.L366:
1729:..\src/interruptions.c ****     }
1730:..\src/interruptions.c **** 
1731:..\src/interruptions.c ****     //======================================================     reading sensors
1732:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5452              		.loc 1 1732 0
 5453 005a 0023     		movs	r3, #0
 5454 005c 87F82F30 		strb	r3, [r7, #47]
 5455 0060 0DE0     		b	.L369
 5456              	.L370:
1733:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5457              		.loc 1 1733 0 discriminator 3
 5458 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5459 0066 9B00     		lsls	r3, r3, #2
 5460 0068 07F13002 		add	r2, r7, #48
 5461 006c 1344     		add	r3, r3, r2
 5462 006e 0022     		movs	r2, #0
 5463 0070 43F8282C 		str	r2, [r3, #-40]
1732:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5464              		.loc 1 1732 0 discriminator 3
 5465 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5466 0078 0133     		adds	r3, r3, #1
 5467 007a 87F82F30 		strb	r3, [r7, #47]
 5468              	.L369:
1732:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5469              		.loc 1 1732 0 is_stmt 0 discriminator 1
 5470 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5471 0082 022B     		cmp	r3, #2
 5472 0084 EDD9     		bls	.L370
1734:..\src/interruptions.c ****     }   
1735:..\src/interruptions.c ****     
1736:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5473              		.loc 1 1736 0 is_stmt 1
 5474 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5475 0088 794A     		ldr	r2, .L402+8
 5476 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5477 008c 1A46     		mov	r2, r3
 5478 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5479 0090 1946     		mov	r1, r3
 5480 0092 1046     		mov	r0, r2
 5481 0094 FFF7FEFF 		bl	ReadEncoderLine
 5482              	.LBB10:
1737:..\src/interruptions.c ****                                                                         //CS1 for left hand
1738:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5483              		.loc 1 1738 0
 5484 0098 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 130


 5485 009a 3B62     		str	r3, [r7, #32]
 5486 009c 2EE0     		b	.L371
 5487              	.L373:
1739:..\src/interruptions.c ****         
1740:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1741:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5488              		.loc 1 1741 0
 5489 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5490 00a0 7449     		ldr	r1, .L402+12
 5491 00a2 1346     		mov	r3, r2
 5492 00a4 5B00     		lsls	r3, r3, #1
 5493 00a6 1344     		add	r3, r3, r2
 5494 00a8 1B01     		lsls	r3, r3, #4
 5495 00aa CA18     		adds	r2, r1, r3
 5496 00ac 3B6A     		ldr	r3, [r7, #32]
 5497 00ae 1344     		add	r3, r3, r2
 5498 00b0 03F2B113 		addw	r3, r3, #433
 5499 00b4 1B78     		ldrb	r3, [r3]
 5500 00b6 87F82F30 		strb	r3, [r7, #47]
1742:..\src/interruptions.c ****         
1743:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5501              		.loc 1 1743 0
 5502 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5503 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5504 00c0 6D48     		ldr	r0, .L402+16
 5505 00c2 1346     		mov	r3, r2
 5506 00c4 9B00     		lsls	r3, r3, #2
 5507 00c6 1344     		add	r3, r3, r2
 5508 00c8 0344     		add	r3, r3, r0
 5509 00ca 0B44     		add	r3, r3, r1
 5510 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5511 00ce 0F2B     		cmp	r3, #15
 5512 00d0 11D9     		bls	.L372
1744:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5513              		.loc 1 1744 0
 5514 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5515 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5516 00d8 6848     		ldr	r0, .L402+20
 5517 00da 1346     		mov	r3, r2
 5518 00dc 9B00     		lsls	r3, r3, #2
 5519 00de 1344     		add	r3, r3, r2
 5520 00e0 0B44     		add	r3, r3, r1
 5521 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5522 00e6 1A46     		mov	r2, r3
 5523 00e8 3B6A     		ldr	r3, [r7, #32]
 5524 00ea 9B00     		lsls	r3, r3, #2
 5525 00ec 07F13001 		add	r1, r7, #48
 5526 00f0 0B44     		add	r3, r3, r1
 5527 00f2 43F8282C 		str	r2, [r3, #-40]
 5528              	.L372:
1738:..\src/interruptions.c ****         
 5529              		.loc 1 1738 0 discriminator 2
 5530 00f6 3B6A     		ldr	r3, [r7, #32]
 5531 00f8 0133     		adds	r3, r3, #1
 5532 00fa 3B62     		str	r3, [r7, #32]
 5533              	.L371:
1738:..\src/interruptions.c ****         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 131


 5534              		.loc 1 1738 0 is_stmt 0 discriminator 1
 5535 00fc 3B6A     		ldr	r3, [r7, #32]
 5536 00fe 022B     		cmp	r3, #2
 5537 0100 CDDD     		ble	.L373
 5538              	.LBE10:
1745:..\src/interruptions.c ****         }
1746:..\src/interruptions.c ****     }
1747:..\src/interruptions.c ****     
1748:..\src/interruptions.c ****     // S = SIGN BIT
1749:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1750:..\src/interruptions.c ****     // 0 = 0 BIT
1751:..\src/interruptions.c ****     // C = CONTROL BIT
1752:..\src/interruptions.c ****     
1753:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5539              		.loc 1 1753 0 is_stmt 1
 5540 0102 0023     		movs	r3, #0
 5541 0104 87F82F30 		strb	r3, [r7, #47]
 5542 0108 35E3     		b	.L374
 5543              	.L395:
1754:..\src/interruptions.c ****         
1755:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5544              		.loc 1 1755 0
 5545 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5546 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5547 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5548 0114 9B00     		lsls	r3, r3, #2
 5549 0116 07F13001 		add	r1, r7, #48
 5550 011a 0B44     		add	r3, r3, r1
 5551 011c 53F8281C 		ldr	r1, [r3, #-40]
 5552 0120 574C     		ldr	r4, .L402+24
 5553 0122 1346     		mov	r3, r2
 5554 0124 9B00     		lsls	r3, r3, #2
 5555 0126 1344     		add	r3, r3, r2
 5556 0128 0344     		add	r3, r3, r0
 5557 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1756:..\src/interruptions.c ****         
1757:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5558              		.loc 1 1757 0
 5559 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5560 0132 9B00     		lsls	r3, r3, #2
 5561 0134 07F13002 		add	r2, r7, #48
 5562 0138 1344     		add	r3, r3, r2
 5563 013a 53F8283C 		ldr	r3, [r3, #-40]
 5564 013e 99B2     		uxth	r1, r3
 5565 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5566 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5567 0146 4F4C     		ldr	r4, .L402+28
 5568 0148 1346     		mov	r3, r2
 5569 014a 5B00     		lsls	r3, r3, #1
 5570 014c 1344     		add	r3, r3, r2
 5571 014e 9B00     		lsls	r3, r3, #2
 5572 0150 0344     		add	r3, r3, r0
 5573 0152 6633     		adds	r3, r3, #102
 5574 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5575 0158 9BB2     		uxth	r3, r3
 5576 015a CB1A     		subs	r3, r1, r3
 5577 015c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 132


 5578 015e BB85     		strh	r3, [r7, #44]	@ movhi
1758:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5579              		.loc 1 1758 0
 5580 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5581 0164 002B     		cmp	r3, #0
 5582 0166 04DA     		bge	.L375
1759:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5583              		.loc 1 1759 0
 5584 0168 BB8D     		ldrh	r3, [r7, #44]
 5585 016a 03F58053 		add	r3, r3, #4096
 5586 016e 9BB2     		uxth	r3, r3
 5587 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5588              	.L375:
1760:..\src/interruptions.c ****         }       // Range [0, 4096]
1761:..\src/interruptions.c **** 
1762:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5589              		.loc 1 1762 0
 5590 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5591 0176 B3F5006F 		cmp	r3, #2048
 5592 017a 04DB     		blt	.L376
1763:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5593              		.loc 1 1763 0
 5594 017c BB8D     		ldrh	r3, [r7, #44]
 5595 017e A3F58053 		sub	r3, r3, #4096
 5596 0182 9BB2     		uxth	r3, r3
 5597 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5598              	.L376:
1764:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1765:..\src/interruptions.c **** 
1766:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5599              		.loc 1 1766 0
 5600 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5601 018a 1B01     		lsls	r3, r3, #4
 5602 018c FB61     		str	r3, [r7, #28]
1767:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5603              		.loc 1 1767 0
 5604 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5605 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5606 0194 3C48     		ldr	r0, .L402+32
 5607 0196 1346     		mov	r3, r2
 5608 0198 5B00     		lsls	r3, r3, #1
 5609 019a 1344     		add	r3, r3, r2
 5610 019c 0B44     		add	r3, r3, r1
 5611 019e FA69     		ldr	r2, [r7, #28]
 5612 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1768:..\src/interruptions.c **** 
1769:..\src/interruptions.c ****         // Initialize last_value_encoder
1770:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5613              		.loc 1 1770 0
 5614 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5615 01a6 394A     		ldr	r2, .L402+36
 5616 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5617 01aa 002B     		cmp	r3, #0
 5618 01ac 12D0     		beq	.L377
1771:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5619              		.loc 1 1771 0
 5620 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 133


 5621 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5622 01b4 2D48     		ldr	r0, .L402+4
 5623 01b6 1346     		mov	r3, r2
 5624 01b8 5B00     		lsls	r3, r3, #1
 5625 01ba 1344     		add	r3, r3, r2
 5626 01bc 0B44     		add	r3, r3, r1
 5627 01be FA69     		ldr	r2, [r7, #28]
 5628 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1772:..\src/interruptions.c ****             if (index == 2)
 5629              		.loc 1 1772 0
 5630 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5631 01c8 022B     		cmp	r3, #2
 5632 01ca 03D1     		bne	.L377
1773:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5633              		.loc 1 1773 0
 5634 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5635 01ce 2F4A     		ldr	r2, .L402+36
 5636 01d0 0021     		movs	r1, #0
 5637 01d2 D154     		strb	r1, [r2, r3]
 5638              	.L377:
1774:..\src/interruptions.c ****         }
1775:..\src/interruptions.c **** 
1776:..\src/interruptions.c ****         // Take care of rotations
1777:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5639              		.loc 1 1777 0
 5640 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5641 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5642 01da 2448     		ldr	r0, .L402+4
 5643 01dc 1346     		mov	r3, r2
 5644 01de 5B00     		lsls	r3, r3, #1
 5645 01e0 1344     		add	r3, r3, r2
 5646 01e2 0B44     		add	r3, r3, r1
 5647 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5648 01e8 FA69     		ldr	r2, [r7, #28]
 5649 01ea D31A     		subs	r3, r2, r3
 5650 01ec BB61     		str	r3, [r7, #24]
1778:..\src/interruptions.c **** 
1779:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1780:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1781:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1782:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1783:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1784:..\src/interruptions.c ****         //                                               |           |
1785:..\src/interruptions.c ****         //                                           24575           -24576
1786:..\src/interruptions.c ****         //                                               |___________|
1787:..\src/interruptions.c ****         //                                                   49152
1788:..\src/interruptions.c **** 
1789:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1790:..\src/interruptions.c ****         // and update the variable only if the difference between
1791:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1792:..\src/interruptions.c **** 
1793:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1794:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1795:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1796:..\src/interruptions.c **** 
1797:..\src/interruptions.c ****         if (value_diff > 49152)
 5651              		.loc 1 1797 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 134


 5652 01ee BB69     		ldr	r3, [r7, #24]
 5653 01f0 B3F5404F 		cmp	r3, #49152
 5654 01f4 19DD     		ble	.L378
1798:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5655              		.loc 1 1798 0
 5656 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5657 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5658 01fc 2448     		ldr	r0, .L402+40
 5659 01fe 3421     		movs	r1, #52
 5660 0200 01FB02F1 		mul	r1, r1, r2
 5661 0204 0144     		add	r1, r1, r0
 5662 0206 1944     		add	r1, r1, r3
 5663 0208 1831     		adds	r1, r1, #24
 5664 020a 91F90010 		ldrsb	r1, [r1]
 5665 020e C9B2     		uxtb	r1, r1
 5666 0210 0139     		subs	r1, r1, #1
 5667 0212 C9B2     		uxtb	r1, r1
 5668 0214 4CB2     		sxtb	r4, r1
 5669 0216 1E49     		ldr	r1, .L402+40
 5670 0218 3420     		movs	r0, #52
 5671 021a 00FB02F2 		mul	r2, r0, r2
 5672 021e 0A44     		add	r2, r2, r1
 5673 0220 1344     		add	r3, r3, r2
 5674 0222 1833     		adds	r3, r3, #24
 5675 0224 2246     		mov	r2, r4
 5676 0226 1A70     		strb	r2, [r3]
 5677 0228 5CE0     		b	.L379
 5678              	.L378:
1799:..\src/interruptions.c ****         else{ 
1800:..\src/interruptions.c ****             if (value_diff < -49152)
 5679              		.loc 1 1800 0
 5680 022a BB69     		ldr	r3, [r7, #24]
 5681 022c 13F5404F 		cmn	r3, #49152
 5682 0230 30DA     		bge	.L380
1801:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5683              		.loc 1 1801 0
 5684 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5685 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5686 0238 1548     		ldr	r0, .L402+40
 5687 023a 3421     		movs	r1, #52
 5688 023c 01FB02F1 		mul	r1, r1, r2
 5689 0240 0144     		add	r1, r1, r0
 5690 0242 1944     		add	r1, r1, r3
 5691 0244 1831     		adds	r1, r1, #24
 5692 0246 91F90010 		ldrsb	r1, [r1]
 5693 024a C9B2     		uxtb	r1, r1
 5694 024c 0131     		adds	r1, r1, #1
 5695 024e C9B2     		uxtb	r1, r1
 5696 0250 4CB2     		sxtb	r4, r1
 5697 0252 0F49     		ldr	r1, .L402+40
 5698 0254 3420     		movs	r0, #52
 5699 0256 00FB02F2 		mul	r2, r0, r2
 5700 025a 0A44     		add	r2, r2, r1
 5701 025c 1344     		add	r3, r3, r2
 5702 025e 1833     		adds	r3, r3, #24
 5703 0260 2246     		mov	r2, r4
 5704 0262 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 135


 5705 0264 3EE0     		b	.L379
 5706              	.L403:
 5707 0266 00BF     		.align	2
 5708              	.L402:
 5709 0268 00000000 		.word	reset_last_value_flag
 5710 026c E0000000 		.word	last_value_encoder.10634
 5711 0270 00000000 		.word	N_Encoder_Line_Connected
 5712 0274 00000000 		.word	c_mem
 5713 0278 00000000 		.word	Encoder_Check
 5714 027c 00000000 		.word	Encoder_Value
 5715 0280 00000000 		.word	data_encoder_raw
 5716 0284 00000000 		.word	g_mem
 5717 0288 F8000000 		.word	comp_value_encoder.10635
 5718 028c 04000000 		.word	only_first_time.10637
 5719 0290 00000000 		.word	g_meas
 5720              	.L380:
1802:..\src/interruptions.c ****             else{
1803:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5721              		.loc 1 1803 0
 5722 0294 BB69     		ldr	r3, [r7, #24]
 5723 0296 002B     		cmp	r3, #0
 5724 0298 B8BF     		it	lt
 5725 029a 5B42     		rsblt	r3, r3, #0
 5726 029c B3F5804F 		cmp	r3, #16384
 5727 02a0 20DD     		ble	.L379
1804:..\src/interruptions.c ****                     error[n_line][index]++;
 5728              		.loc 1 1804 0
 5729 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5730 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5731 02a8 9B48     		ldr	r0, .L404
 5732 02aa 1346     		mov	r3, r2
 5733 02ac 5B00     		lsls	r3, r3, #1
 5734 02ae 1344     		add	r3, r3, r2
 5735 02b0 0344     		add	r3, r3, r0
 5736 02b2 0B44     		add	r3, r3, r1
 5737 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5738 02b6 0133     		adds	r3, r3, #1
 5739 02b8 DCB2     		uxtb	r4, r3
 5740 02ba 9748     		ldr	r0, .L404
 5741 02bc 1346     		mov	r3, r2
 5742 02be 5B00     		lsls	r3, r3, #1
 5743 02c0 1344     		add	r3, r3, r2
 5744 02c2 0344     		add	r3, r3, r0
 5745 02c4 0B44     		add	r3, r3, r1
 5746 02c6 2246     		mov	r2, r4
 5747 02c8 1A70     		strb	r2, [r3]
1805:..\src/interruptions.c ****                                 
1806:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5748              		.loc 1 1806 0
 5749 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5750 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5751 02d0 9148     		ldr	r0, .L404
 5752 02d2 1346     		mov	r3, r2
 5753 02d4 5B00     		lsls	r3, r3, #1
 5754 02d6 1344     		add	r3, r3, r2
 5755 02d8 0344     		add	r3, r3, r0
 5756 02da 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 136


 5757 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5758 02de 092B     		cmp	r3, #9
 5759 02e0 40F28882 		bls	.L401
 5760              	.L379:
1807:..\src/interruptions.c ****                         // Discard
1808:..\src/interruptions.c ****                         return;
1809:..\src/interruptions.c ****                 }
1810:..\src/interruptions.c ****             }
1811:..\src/interruptions.c ****         }
1812:..\src/interruptions.c **** 
1813:..\src/interruptions.c ****         error[n_line][index] = 0;
 5761              		.loc 1 1813 0
 5762 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5763 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5764 02ea 8B48     		ldr	r0, .L404
 5765 02ec 1346     		mov	r3, r2
 5766 02ee 5B00     		lsls	r3, r3, #1
 5767 02f0 1344     		add	r3, r3, r2
 5768 02f2 0344     		add	r3, r3, r0
 5769 02f4 0B44     		add	r3, r3, r1
 5770 02f6 0022     		movs	r2, #0
 5771 02f8 1A70     		strb	r2, [r3]
1814:..\src/interruptions.c ****         
1815:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5772              		.loc 1 1815 0
 5773 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5774 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5775 0300 8648     		ldr	r0, .L404+4
 5776 0302 1346     		mov	r3, r2
 5777 0304 5B00     		lsls	r3, r3, #1
 5778 0306 1344     		add	r3, r3, r2
 5779 0308 0B44     		add	r3, r3, r1
 5780 030a FA69     		ldr	r2, [r7, #28]
 5781 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1816:..\src/interruptions.c **** 
1817:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5782              		.loc 1 1817 0
 5783 0310 FB69     		ldr	r3, [r7, #28]
 5784 0312 BB62     		str	r3, [r7, #40]
1818:..\src/interruptions.c **** 
1819:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5785              		.loc 1 1819 0
 5786 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5787 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5788 031a 8149     		ldr	r1, .L404+8
 5789 031c 3420     		movs	r0, #52
 5790 031e 00FB02F2 		mul	r2, r0, r2
 5791 0322 0A44     		add	r2, r2, r1
 5792 0324 1344     		add	r3, r3, r2
 5793 0326 1833     		adds	r3, r3, #24
 5794 0328 93F90030 		ldrsb	r3, [r3]
 5795 032c 1B04     		lsls	r3, r3, #16
 5796 032e BA6A     		ldr	r2, [r7, #40]
 5797 0330 1344     		add	r3, r3, r2
 5798 0332 BB62     		str	r3, [r7, #40]
1820:..\src/interruptions.c ****         
1821:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 137


 5799              		.loc 1 1821 0
 5800 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5801 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5802 033a 7A48     		ldr	r0, .L404+12
 5803 033c 1346     		mov	r3, r2
 5804 033e 5B00     		lsls	r3, r3, #1
 5805 0340 1344     		add	r3, r3, r2
 5806 0342 9B00     		lsls	r3, r3, #2
 5807 0344 0B44     		add	r3, r3, r1
 5808 0346 6833     		adds	r3, r3, #104
 5809 0348 9B00     		lsls	r3, r3, #2
 5810 034a 0344     		add	r3, r3, r0
 5811 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5812 034e 4FF07E51 		mov	r1, #1065353216
 5813 0352 1846     		mov	r0, r3
 5814 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5815 0358 0346     		mov	r3, r0
 5816 035a 002B     		cmp	r3, #0
 5817 035c 1AD1     		bne	.L382
1822:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5818              		.loc 1 1822 0
 5819 035e B86A     		ldr	r0, [r7, #40]
 5820 0360 FFF7FEFF 		bl	__aeabi_i2f
 5821 0364 0446     		mov	r4, r0
 5822 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5823 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5824 036c 6D48     		ldr	r0, .L404+12
 5825 036e 1346     		mov	r3, r2
 5826 0370 5B00     		lsls	r3, r3, #1
 5827 0372 1344     		add	r3, r3, r2
 5828 0374 9B00     		lsls	r3, r3, #2
 5829 0376 0B44     		add	r3, r3, r1
 5830 0378 6833     		adds	r3, r3, #104
 5831 037a 9B00     		lsls	r3, r3, #2
 5832 037c 0344     		add	r3, r3, r0
 5833 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5834 0380 1946     		mov	r1, r3
 5835 0382 2046     		mov	r0, r4
 5836 0384 FFF7FEFF 		bl	__aeabi_fmul
 5837 0388 0346     		mov	r3, r0
 5838 038a 1846     		mov	r0, r3
 5839 038c FFF7FEFF 		bl	__aeabi_f2iz
 5840 0390 0346     		mov	r3, r0
 5841 0392 BB62     		str	r3, [r7, #40]
 5842              	.L382:
1823:..\src/interruptions.c ****         }
1824:..\src/interruptions.c **** 
1825:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5843              		.loc 1 1825 0
 5844 0394 634B     		ldr	r3, .L404+12
 5845 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5846 039a 002B     		cmp	r3, #0
 5847 039c 0BD1     		bne	.L384
1826:..\src/interruptions.c ****             // Right / Left hand turn
1827:..\src/interruptions.c ****             if (index == 0) {
 5848              		.loc 1 1827 0
 5849 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 138


 5850 03a2 002B     		cmp	r3, #0
 5851 03a4 07D1     		bne	.L384
1828:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5852              		.loc 1 1828 0
 5853 03a6 5F4B     		ldr	r3, .L404+12
 5854 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5855 03ac 002B     		cmp	r3, #0
 5856 03ae 02D1     		bne	.L384
1829:..\src/interruptions.c ****                     value_encoder *= -1;        
 5857              		.loc 1 1829 0
 5858 03b0 BB6A     		ldr	r3, [r7, #40]
 5859 03b2 5B42     		negs	r3, r3
 5860 03b4 BB62     		str	r3, [r7, #40]
 5861              	.L384:
1830:..\src/interruptions.c ****                 }
1831:..\src/interruptions.c ****             }
1832:..\src/interruptions.c ****         } 
1833:..\src/interruptions.c ****         
1834:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5862              		.loc 1 1834 0
 5863 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5864 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5865 03bc 5848     		ldr	r0, .L404+8
 5866 03be 1346     		mov	r3, r2
 5867 03c0 5B00     		lsls	r3, r3, #1
 5868 03c2 1344     		add	r3, r3, r2
 5869 03c4 9B00     		lsls	r3, r3, #2
 5870 03c6 1344     		add	r3, r3, r2
 5871 03c8 0B44     		add	r3, r3, r1
 5872 03ca BA6A     		ldr	r2, [r7, #40]
 5873 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1835:..\src/interruptions.c ****     
1836:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5874              		.loc 1 1836 0
 5875 03d0 BA6A     		ldr	r2, [r7, #40]
 5876 03d2 1346     		mov	r3, r2
 5877 03d4 9B00     		lsls	r3, r3, #2
 5878 03d6 1344     		add	r3, r3, r2
 5879 03d8 5B00     		lsls	r3, r3, #1
 5880 03da 9918     		adds	r1, r3, r2
 5881 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5882 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5883 03e2 514C     		ldr	r4, .L404+16
 5884 03e4 1346     		mov	r3, r2
 5885 03e6 5B00     		lsls	r3, r3, #1
 5886 03e8 1344     		add	r3, r3, r2
 5887 03ea 0344     		add	r3, r3, r0
 5888 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5889 03f0 6FF01102 		mvn	r2, #17
 5890 03f4 02FB03F3 		mul	r3, r2, r3
 5891 03f8 1944     		add	r1, r1, r3
 5892 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5893 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5894 0400 4A4C     		ldr	r4, .L404+20
 5895 0402 1346     		mov	r3, r2
 5896 0404 5B00     		lsls	r3, r3, #1
 5897 0406 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 139


 5898 0408 0344     		add	r3, r3, r0
 5899 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5900 040e 1346     		mov	r3, r2
 5901 0410 DB00     		lsls	r3, r3, #3
 5902 0412 1344     		add	r3, r3, r2
 5903 0414 1944     		add	r1, r1, r3
 5904 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5905 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5906 041c 444C     		ldr	r4, .L404+24
 5907 041e 1346     		mov	r3, r2
 5908 0420 5B00     		lsls	r3, r3, #1
 5909 0422 1344     		add	r3, r3, r2
 5910 0424 0344     		add	r3, r3, r0
 5911 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5912 042a 5B00     		lsls	r3, r3, #1
 5913 042c C81A     		subs	r0, r1, r3
 5914 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5915 0432 DB00     		lsls	r3, r3, #3
 5916 0434 3F4A     		ldr	r2, .L404+28
 5917 0436 1344     		add	r3, r3, r2
 5918 0438 1946     		mov	r1, r3
 5919 043a FFF7FEFF 		bl	filter
 5920 043e 0346     		mov	r3, r0
 5921 0440 1BB2     		sxth	r3, r3
 5922 0442 7B61     		str	r3, [r7, #20]
1837:..\src/interruptions.c **** 
1838:..\src/interruptions.c ****         //Update current speed
1839:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5923              		.loc 1 1839 0
 5924 0444 7869     		ldr	r0, [r7, #20]
 5925 0446 FFF7FEFF 		bl	__aeabi_i2f
 5926 044a 0446     		mov	r4, r0
 5927 044c 3A4B     		ldr	r3, .L404+32
 5928 044e 1B68     		ldr	r3, [r3]	@ float
 5929 0450 3A49     		ldr	r1, .L404+36
 5930 0452 1846     		mov	r0, r3
 5931 0454 FFF7FEFF 		bl	__aeabi_fmul
 5932 0458 0346     		mov	r3, r0
 5933 045a 1946     		mov	r1, r3
 5934 045c 2046     		mov	r0, r4
 5935 045e FFF7FEFF 		bl	__aeabi_fdiv
 5936 0462 0346     		mov	r3, r0
 5937 0464 1846     		mov	r0, r3
 5938 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5939 046a 0346     		mov	r3, r0
 5940 046c 7B61     		str	r3, [r7, #20]
1840:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5941              		.loc 1 1840 0
 5942 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5943 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5944 0474 2A48     		ldr	r0, .L404+8
 5945 0476 1346     		mov	r3, r2
 5946 0478 5B00     		lsls	r3, r3, #1
 5947 047a 1344     		add	r3, r3, r2
 5948 047c 9B00     		lsls	r3, r3, #2
 5949 047e 1344     		add	r3, r3, r2
 5950 0480 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 140


 5951 0482 0633     		adds	r3, r3, #6
 5952 0484 9B00     		lsls	r3, r3, #2
 5953 0486 0344     		add	r3, r3, r0
 5954 0488 7A69     		ldr	r2, [r7, #20]
 5955 048a 5A60     		str	r2, [r3, #4]
1841:..\src/interruptions.c **** 
1842:..\src/interruptions.c ****         // update old velocity and acceleration values
1843:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5956              		.loc 1 1843 0
 5957 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5958 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5959 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5960 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5961 0498 244D     		ldr	r5, .L404+20
 5962 049a 0B46     		mov	r3, r1
 5963 049c 5B00     		lsls	r3, r3, #1
 5964 049e 0B44     		add	r3, r3, r1
 5965 04a0 2344     		add	r3, r3, r4
 5966 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5967 04a6 224C     		ldr	r4, .L404+24
 5968 04a8 1346     		mov	r3, r2
 5969 04aa 5B00     		lsls	r3, r3, #1
 5970 04ac 1344     		add	r3, r3, r2
 5971 04ae 0344     		add	r3, r3, r0
 5972 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1844:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5973              		.loc 1 1844 0
 5974 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5975 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5976 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5977 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5978 04c0 194D     		ldr	r5, .L404+16
 5979 04c2 0B46     		mov	r3, r1
 5980 04c4 5B00     		lsls	r3, r3, #1
 5981 04c6 0B44     		add	r3, r3, r1
 5982 04c8 2344     		add	r3, r3, r4
 5983 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5984 04ce 174C     		ldr	r4, .L404+20
 5985 04d0 1346     		mov	r3, r2
 5986 04d2 5B00     		lsls	r3, r3, #1
 5987 04d4 1344     		add	r3, r3, r2
 5988 04d6 0344     		add	r3, r3, r0
 5989 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1845:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5990              		.loc 1 1845 0
 5991 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5992 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5993 04e2 1148     		ldr	r0, .L404+16
 5994 04e4 1346     		mov	r3, r2
 5995 04e6 5B00     		lsls	r3, r3, #1
 5996 04e8 1344     		add	r3, r3, r2
 5997 04ea 0B44     		add	r3, r3, r1
 5998 04ec BA6A     		ldr	r2, [r7, #40]
 5999 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1846:..\src/interruptions.c **** 
1847:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1848:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 141


 6000              		.loc 1 1848 0
 6001 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6002 04f4 124A     		ldr	r2, .L404+40
 6003 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6004 04f8 002B     		cmp	r3, #0
 6005 04fa 40F03781 		bne	.L385
1849:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 6006              		.loc 1 1849 0
 6007 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6008 0500 104A     		ldr	r2, .L404+44
 6009 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6010 0504 352B     		cmp	r3, #53
 6011 0506 1FD8     		bhi	.L386
1850:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 6012              		.loc 1 1850 0
 6013 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6014 050a 0E4A     		ldr	r2, .L404+44
 6015 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 6016 050e 0132     		adds	r2, r2, #1
 6017 0510 D1B2     		uxtb	r1, r2
 6018 0512 0C4A     		ldr	r2, .L404+44
 6019 0514 D154     		strb	r1, [r2, r3]
 6020 0516 29E1     		b	.L385
 6021              	.L405:
 6022              		.align	2
 6023              	.L404:
 6024 0518 10010000 		.word	error.10636
 6025 051c E0000000 		.word	last_value_encoder.10634
 6026 0520 00000000 		.word	g_meas
 6027 0524 00000000 		.word	c_mem
 6028 0528 18010000 		.word	v_value.10641
 6029 052c 30010000 		.word	vv_value.10642
 6030 0530 48010000 		.word	vvv_value.10643
 6031 0534 00000000 		.word	filt_vel
 6032 0538 00000000 		.word	cycle_time
 6033 053c 0000C040 		.word	1086324736
 6034 0540 00000000 		.word	pos_reconstruct
 6035 0544 60010000 		.word	one_time_execute.10639
 6036              	.L386:
1851:..\src/interruptions.c ****             else {
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****                 //Double encoder translation
1854:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 6037              		.loc 1 1854 0
 6038 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6039 054a AC49     		ldr	r1, .L406
 6040 054c 1346     		mov	r3, r2
 6041 054e 5B00     		lsls	r3, r3, #1
 6042 0550 1344     		add	r3, r3, r2
 6043 0552 1B01     		lsls	r3, r3, #4
 6044 0554 0B44     		add	r3, r3, r1
 6045 0556 03F5D873 		add	r3, r3, #432
 6046 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6047 055c 002B     		cmp	r3, #0
 6048 055e 5ED0     		beq	.L387
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6049              		.loc 1 1855 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 142


 6050 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6051 0562 A749     		ldr	r1, .L406+4
 6052 0564 1346     		mov	r3, r2
 6053 0566 5B00     		lsls	r3, r3, #1
 6054 0568 1344     		add	r3, r3, r2
 6055 056a 9B00     		lsls	r3, r3, #2
 6056 056c 0B44     		add	r3, r3, r1
 6057 056e 1868     		ldr	r0, [r3]
 6058 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6059 0572 A349     		ldr	r1, .L406+4
 6060 0574 1346     		mov	r3, r2
 6061 0576 5B00     		lsls	r3, r3, #1
 6062 0578 1344     		add	r3, r3, r2
 6063 057a 9B00     		lsls	r3, r3, #2
 6064 057c 0B44     		add	r3, r3, r1
 6065 057e 0433     		adds	r3, r3, #4
 6066 0580 1C68     		ldr	r4, [r3]
1856:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 6067              		.loc 1 1856 0
 6068 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6069 0584 9D49     		ldr	r1, .L406
 6070 0586 1346     		mov	r3, r2
 6071 0588 5B00     		lsls	r3, r3, #1
 6072 058a 1344     		add	r3, r3, r2
 6073 058c 1B01     		lsls	r3, r3, #4
 6074 058e 0B44     		add	r3, r3, r1
 6075 0590 03F2B513 		addw	r3, r3, #437
 6076 0594 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6077              		.loc 1 1855 0
 6078 0598 1D46     		mov	r5, r3
 6079              		.loc 1 1856 0
 6080 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6081 059c 9749     		ldr	r1, .L406
 6082 059e 1346     		mov	r3, r2
 6083 05a0 5B00     		lsls	r3, r3, #1
 6084 05a2 1344     		add	r3, r3, r2
 6085 05a4 1B01     		lsls	r3, r3, #4
 6086 05a6 0B44     		add	r3, r3, r1
 6087 05a8 03F5DB73 		add	r3, r3, #438
 6088 05ac 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6089              		.loc 1 1855 0
 6090 05b0 1E46     		mov	r6, r3
 6091              		.loc 1 1856 0
 6092 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6093 05b4 9149     		ldr	r1, .L406
 6094 05b6 1346     		mov	r3, r2
 6095 05b8 5B00     		lsls	r3, r3, #1
 6096 05ba 1344     		add	r3, r3, r2
 6097 05bc 1B01     		lsls	r3, r3, #4
 6098 05be 0B44     		add	r3, r3, r1
 6099 05c0 03F2B713 		addw	r3, r3, #439
 6100 05c4 93F90030 		ldrsb	r3, [r3]
1855:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6101              		.loc 1 1855 0
 6102 05c8 0093     		str	r3, [sp]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 143


 6103 05ca 3346     		mov	r3, r6
 6104 05cc 2A46     		mov	r2, r5
 6105 05ce 2146     		mov	r1, r4
 6106 05d0 FFF7FEFF 		bl	calc_turns_fcn
 6107 05d4 0346     		mov	r3, r0
 6108 05d6 87F82730 		strb	r3, [r7, #39]
1857:..\src/interruptions.c **** 
1858:..\src/interruptions.c **** 
1859:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 6109              		.loc 1 1859 0
 6110 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6111 05dc 8749     		ldr	r1, .L406
 6112 05de 1346     		mov	r3, r2
 6113 05e0 5B00     		lsls	r3, r3, #1
 6114 05e2 1344     		add	r3, r3, r2
 6115 05e4 1B01     		lsls	r3, r3, #4
 6116 05e6 0B44     		add	r3, r3, r1
 6117 05e8 03F5D273 		add	r3, r3, #420
 6118 05ec 1B68     		ldr	r3, [r3]	@ float
 6119 05ee 4FF00001 		mov	r1, #0
 6120 05f2 1846     		mov	r0, r3
 6121 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 6122 05f8 0346     		mov	r3, r0
 6123 05fa 002B     		cmp	r3, #0
 6124 05fc 05D0     		beq	.L388
1860:..\src/interruptions.c ****                         init_rot = -init_rot;
 6125              		.loc 1 1860 0
 6126 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 6127 0602 5B42     		negs	r3, r3
 6128 0604 DBB2     		uxtb	r3, r3
 6129 0606 87F82730 		strb	r3, [r7, #39]
 6130              	.L388:
1861:..\src/interruptions.c ****                     
1862:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 6131              		.loc 1 1862 0
 6132 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6133 060c 7D4A     		ldr	r2, .L406+8
 6134 060e 3421     		movs	r1, #52
 6135 0610 01FB03F3 		mul	r3, r1, r3
 6136 0614 1344     		add	r3, r3, r2
 6137 0616 1833     		adds	r3, r3, #24
 6138 0618 97F82720 		ldrb	r2, [r7, #39]
 6139 061c 1A70     		strb	r2, [r3]
 6140              	.L387:
1863:..\src/interruptions.c ****                 }    
1864:..\src/interruptions.c **** 
1865:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 6141              		.loc 1 1865 0
 6142 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6143 0620 7649     		ldr	r1, .L406
 6144 0622 1346     		mov	r3, r2
 6145 0624 5B00     		lsls	r3, r3, #1
 6146 0626 1344     		add	r3, r3, r2
 6147 0628 1B01     		lsls	r3, r3, #4
 6148 062a 0B44     		add	r3, r3, r1
 6149 062c 03F5D273 		add	r3, r3, #420
 6150 0630 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 144


 6151 0632 4FF07E51 		mov	r1, #1065353216
 6152 0636 1846     		mov	r0, r3
 6153 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 6154 063c 0346     		mov	r3, r0
 6155 063e 002B     		cmp	r3, #0
 6156 0640 22D1     		bne	.L390
1866:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 6157              		.loc 1 1866 0
 6158 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6159 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6160 0646 6F4A     		ldr	r2, .L406+8
 6161 0648 3421     		movs	r1, #52
 6162 064a 01FB03F3 		mul	r3, r1, r3
 6163 064e 1344     		add	r3, r3, r2
 6164 0650 1B68     		ldr	r3, [r3]
 6165 0652 1846     		mov	r0, r3
 6166 0654 FFF7FEFF 		bl	__aeabi_i2f
 6167 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6168 065a 6849     		ldr	r1, .L406
 6169 065c 1346     		mov	r3, r2
 6170 065e 5B00     		lsls	r3, r3, #1
 6171 0660 1344     		add	r3, r3, r2
 6172 0662 1B01     		lsls	r3, r3, #4
 6173 0664 0B44     		add	r3, r3, r1
 6174 0666 03F5D273 		add	r3, r3, #420
 6175 066a 1B68     		ldr	r3, [r3]	@ float
 6176 066c 1946     		mov	r1, r3
 6177 066e FFF7FEFF 		bl	__aeabi_fdiv
 6178 0672 0346     		mov	r3, r0
 6179 0674 1846     		mov	r0, r3
 6180 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6181 067a 0146     		mov	r1, r0
 6182 067c 614A     		ldr	r2, .L406+8
 6183 067e 3423     		movs	r3, #52
 6184 0680 03FB04F3 		mul	r3, r3, r4
 6185 0684 1344     		add	r3, r3, r2
 6186 0686 1960     		str	r1, [r3]
 6187              	.L390:
1867:..\src/interruptions.c ****                 
1868:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6188              		.loc 1 1868 0
 6189 0688 97F92730 		ldrsb	r3, [r7, #39]
 6190 068c 1B04     		lsls	r3, r3, #16
 6191 068e BA6A     		ldr	r2, [r7, #40]
 6192 0690 1344     		add	r3, r3, r2
 6193 0692 BB62     		str	r3, [r7, #40]
1869:..\src/interruptions.c ****        
1870:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6194              		.loc 1 1870 0
 6195 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6196 0696 5949     		ldr	r1, .L406
 6197 0698 1346     		mov	r3, r2
 6198 069a 5B00     		lsls	r3, r3, #1
 6199 069c 1344     		add	r3, r3, r2
 6200 069e 1B01     		lsls	r3, r3, #4
 6201 06a0 0B44     		add	r3, r3, r1
 6202 06a2 03F5D273 		add	r3, r3, #420
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 145


 6203 06a6 1B68     		ldr	r3, [r3]	@ float
 6204 06a8 4FF07E51 		mov	r1, #1065353216
 6205 06ac 1846     		mov	r0, r3
 6206 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6207 06b2 0346     		mov	r3, r0
 6208 06b4 002B     		cmp	r3, #0
 6209 06b6 15D1     		bne	.L392
1871:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6210              		.loc 1 1871 0
 6211 06b8 B86A     		ldr	r0, [r7, #40]
 6212 06ba FFF7FEFF 		bl	__aeabi_i2f
 6213 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6214 06c0 4E49     		ldr	r1, .L406
 6215 06c2 1346     		mov	r3, r2
 6216 06c4 5B00     		lsls	r3, r3, #1
 6217 06c6 1344     		add	r3, r3, r2
 6218 06c8 1B01     		lsls	r3, r3, #4
 6219 06ca 0B44     		add	r3, r3, r1
 6220 06cc 03F5D273 		add	r3, r3, #420
 6221 06d0 1B68     		ldr	r3, [r3]	@ float
 6222 06d2 1946     		mov	r1, r3
 6223 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6224 06d8 0346     		mov	r3, r0
 6225 06da 1846     		mov	r0, r3
 6226 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6227 06e0 0346     		mov	r3, r0
 6228 06e2 BB62     		str	r3, [r7, #40]
 6229              	.L392:
1872:..\src/interruptions.c ****                 }
1873:..\src/interruptions.c **** 
1874:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6230              		.loc 1 1874 0
 6231 06e4 454B     		ldr	r3, .L406
 6232 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6233 06ea 002B     		cmp	r3, #0
 6234 06ec 07D1     		bne	.L394
1875:..\src/interruptions.c ****                     // Right / Left hand turn
1876:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6235              		.loc 1 1876 0
 6236 06ee 434B     		ldr	r3, .L406
 6237 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6238 06f4 002B     		cmp	r3, #0
 6239 06f6 02D1     		bne	.L394
1877:..\src/interruptions.c ****                         value_encoder *= -1;        
 6240              		.loc 1 1877 0
 6241 06f8 BB6A     		ldr	r3, [r7, #40]
 6242 06fa 5B42     		negs	r3, r3
 6243 06fc BB62     		str	r3, [r7, #40]
 6244              	.L394:
1878:..\src/interruptions.c ****                     }
1879:..\src/interruptions.c ****                 }
1880:..\src/interruptions.c ****          
1881:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6245              		.loc 1 1881 0
 6246 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6247 0700 404A     		ldr	r2, .L406+8
 6248 0702 3421     		movs	r1, #52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 146


 6249 0704 01FB03F3 		mul	r3, r1, r3
 6250 0708 1344     		add	r3, r3, r2
 6251 070a BA6A     		ldr	r2, [r7, #40]
 6252 070c 1A60     		str	r2, [r3]
1882:..\src/interruptions.c ****                 
1883:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6253              		.loc 1 1883 0
 6254 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6255 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6256 0712 3C49     		ldr	r1, .L406+8
 6257 0714 3420     		movs	r0, #52
 6258 0716 00FB02F2 		mul	r2, r0, r2
 6259 071a 0A44     		add	r2, r2, r1
 6260 071c 1268     		ldr	r2, [r2]
 6261 071e 3A49     		ldr	r1, .L406+12
 6262 0720 1B01     		lsls	r3, r3, #4
 6263 0722 0B44     		add	r3, r3, r1
 6264 0724 1A60     		str	r2, [r3]
1884:..\src/interruptions.c **** 
1885:..\src/interruptions.c ****                 // If necessary activate motor
1886:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6265              		.loc 1 1886 0
 6266 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6267 0728 384A     		ldr	r2, .L406+16
 6268 072a 0121     		movs	r1, #1
 6269 072c D154     		strb	r1, [r2, r3]
1887:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1888:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6270              		.loc 1 1888 0
 6271 072e B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6272 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6273 0732 3248     		ldr	r0, .L406
 6274 0734 1346     		mov	r3, r2
 6275 0736 DB00     		lsls	r3, r3, #3
 6276 0738 9B1A     		subs	r3, r3, r2
 6277 073a 1B01     		lsls	r3, r3, #4
 6278 073c 0344     		add	r3, r3, r0
 6279 073e E033     		adds	r3, r3, #224
 6280 0740 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6281 0742 314A     		ldr	r2, .L406+12
 6282 0744 0B01     		lsls	r3, r1, #4
 6283 0746 1344     		add	r3, r3, r2
 6284 0748 0C33     		adds	r3, r3, #12
 6285 074a 0246     		mov	r2, r0
 6286 074c 1A70     		strb	r2, [r3]
1889:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6287              		.loc 1 1889 0
 6288 074e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6289 0750 2D4A     		ldr	r2, .L406+12
 6290 0752 1B01     		lsls	r3, r3, #4
 6291 0754 1344     		add	r3, r3, r2
 6292 0756 0C33     		adds	r3, r3, #12
 6293 0758 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6294 075a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6295 075c 1146     		mov	r1, r2
 6296 075e 1846     		mov	r0, r3
 6297 0760 FFF7FEFF 		bl	enable_motor
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 147


1890:..\src/interruptions.c ****                 
1891:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6298              		.loc 1 1891 0
 6299 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6300 0766 2A4A     		ldr	r2, .L406+20
 6301 0768 0121     		movs	r1, #1
 6302 076a D154     		strb	r1, [r2, r3]
 6303              	.L385:
1753:..\src/interruptions.c ****         
 6304              		.loc 1 1753 0 discriminator 2
 6305 076c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6306 0770 0133     		adds	r3, r3, #1
 6307 0772 87F82F30 		strb	r3, [r7, #47]
 6308              	.L374:
1753:..\src/interruptions.c ****         
 6309              		.loc 1 1753 0 is_stmt 0 discriminator 1
 6310 0776 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6311 077a 022B     		cmp	r3, #2
 6312 077c 7FF6C5AC 		bls	.L395
1892:..\src/interruptions.c ****             }
1893:..\src/interruptions.c ****         }
1894:..\src/interruptions.c ****     } 
1895:..\src/interruptions.c **** 
1896:..\src/interruptions.c **** 	
1897:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1898:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6313              		.loc 1 1898 0 is_stmt 1
 6314 0780 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6315 0782 224A     		ldr	r2, .L406+16
 6316 0784 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6317 0786 002B     		cmp	r3, #0
 6318 0788 35D0     		beq	.L365
1899:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6319              		.loc 1 1899 0
 6320 078a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6321 078c 214A     		ldr	r2, .L406+24
 6322 078e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6323 0792 0132     		adds	r2, r2, #1
 6324 0794 1F49     		ldr	r1, .L406+24
 6325 0796 41F82320 		str	r2, [r1, r3, lsl #2]
1900:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6326              		.loc 1 1900 0
 6327 079a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6328 079c 1D4A     		ldr	r2, .L406+24
 6329 079e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6330 07a2 B3F5FA5F 		cmp	r3, #8000
 6331 07a6 26D3     		bcc	.L365
1901:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6332              		.loc 1 1901 0
 6333 07a8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6334 07aa 174A     		ldr	r2, .L406+12
 6335 07ac 1B01     		lsls	r3, r3, #4
 6336 07ae 1344     		add	r3, r3, r2
 6337 07b0 0022     		movs	r2, #0
 6338 07b2 1A60     		str	r2, [r3]
1902:..\src/interruptions.c ****             
1903:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 148


1904:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6339              		.loc 1 1904 0
 6340 07b4 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 6341 07b6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6342 07b8 1048     		ldr	r0, .L406
 6343 07ba 1346     		mov	r3, r2
 6344 07bc DB00     		lsls	r3, r3, #3
 6345 07be 9B1A     		subs	r3, r3, r2
 6346 07c0 1B01     		lsls	r3, r3, #4
 6347 07c2 0344     		add	r3, r3, r0
 6348 07c4 E033     		adds	r3, r3, #224
 6349 07c6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6350 07c8 0F4A     		ldr	r2, .L406+12
 6351 07ca 0B01     		lsls	r3, r1, #4
 6352 07cc 1344     		add	r3, r3, r2
 6353 07ce 0C33     		adds	r3, r3, #12
 6354 07d0 0246     		mov	r2, r0
 6355 07d2 1A70     		strb	r2, [r3]
1905:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6356              		.loc 1 1905 0
 6357 07d4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6358 07d6 0C4A     		ldr	r2, .L406+12
 6359 07d8 1B01     		lsls	r3, r3, #4
 6360 07da 1344     		add	r3, r3, r2
 6361 07dc 0C33     		adds	r3, r3, #12
 6362 07de 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6363 07e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6364 07e2 1146     		mov	r1, r2
 6365 07e4 1846     		mov	r0, r3
 6366 07e6 FFF7FEFF 		bl	enable_motor
1906:..\src/interruptions.c ****                         
1907:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6367              		.loc 1 1907 0
 6368 07ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6369 07ec 074A     		ldr	r2, .L406+16
 6370 07ee 0021     		movs	r1, #0
 6371 07f0 D154     		strb	r1, [r2, r3]
 6372 07f2 00E0     		b	.L365
 6373              	.L401:
1808:..\src/interruptions.c ****                 }
 6374              		.loc 1 1808 0
 6375 07f4 00BF     		nop
 6376              	.L365:
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     }
1910:..\src/interruptions.c ****  
1911:..\src/interruptions.c **** }
 6377              		.loc 1 1911 0
 6378 07f6 3437     		adds	r7, r7, #52
 6379              		.cfi_def_cfa_offset 20
 6380 07f8 BD46     		mov	sp, r7
 6381              		.cfi_def_cfa_register 13
 6382              		@ sp needed
 6383 07fa F0BD     		pop	{r4, r5, r6, r7, pc}
 6384              	.L407:
 6385              		.align	2
 6386              	.L406:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 149


 6387 07fc 00000000 		.word	c_mem
 6388 0800 F8000000 		.word	comp_value_encoder.10635
 6389 0804 00000000 		.word	g_meas
 6390 0808 00000000 		.word	g_refNew
 6391 080c 64010000 		.word	safe_startup_motor_activation.10638
 6392 0810 00000000 		.word	pos_reconstruct
 6393 0814 68010000 		.word	count_startup_motor.10640
 6394              		.cfi_endproc
 6395              	.LFE73:
 6396              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6397              		.section	.text.analog_read_end,"ax",%progbits
 6398              		.align	2
 6399              		.global	analog_read_end
 6400              		.thumb
 6401              		.thumb_func
 6402              		.type	analog_read_end, %function
 6403              	analog_read_end:
 6404              	.LFB74:
1912:..\src/interruptions.c **** 
1913:..\src/interruptions.c **** //==============================================================================
1914:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1915:..\src/interruptions.c **** //==============================================================================
1916:..\src/interruptions.c **** 
1917:..\src/interruptions.c **** void analog_read_end() {
 6405              		.loc 1 1917 0
 6406              		.cfi_startproc
 6407              		@ args = 0, pretend = 0, frame = 8
 6408              		@ frame_needed = 1, uses_anonymous_args = 0
 6409 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6410              		.cfi_def_cfa_offset 20
 6411              		.cfi_offset 4, -20
 6412              		.cfi_offset 5, -16
 6413              		.cfi_offset 6, -12
 6414              		.cfi_offset 7, -8
 6415              		.cfi_offset 14, -4
 6416 0002 83B0     		sub	sp, sp, #12
 6417              		.cfi_def_cfa_offset 32
 6418 0004 00AF     		add	r7, sp, #0
 6419              		.cfi_def_cfa_register 7
1918:..\src/interruptions.c **** 
1919:..\src/interruptions.c ****     /* =========================================================================
1920:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1921:..\src/interruptions.c ****     /
1922:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1923:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1924:..\src/interruptions.c ****     /
1925:..\src/interruptions.c ****     /   Definition:
1926:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1927:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1928:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1929:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1930:..\src/interruptions.c ****     /
1931:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1932:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1933:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1934:..\src/interruptions.c ****     /  =========================================================================
1935:..\src/interruptions.c ****     */
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 150


1936:..\src/interruptions.c **** 
1937:..\src/interruptions.c ****     int32 CYDATA i_aux;
1938:..\src/interruptions.c **** 
1939:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1940:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1941:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1942:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1943:..\src/interruptions.c ****     static int32 UD_mean_value;
1944:..\src/interruptions.c ****     static int32 LR_mean_value;
1945:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1946:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1947:..\src/interruptions.c ****     static uint16 count = 0;
1948:..\src/interruptions.c ****     static uint32 v_count = 0;
1949:..\src/interruptions.c ****     static uint8 idx = 0;
1950:..\src/interruptions.c ****     
1951:..\src/interruptions.c ****     
1952:..\src/interruptions.c ****     // Wait for conversion end
1953:..\src/interruptions.c ****     
1954:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6420              		.loc 1 1954 0
 6421 0006 08E0     		b	.L409
 6422              	.L410:
1955:..\src/interruptions.c ****         
1956:..\src/interruptions.c ****         if (interrupt_flag){
 6423              		.loc 1 1956 0
 6424 0008 AD4B     		ldr	r3, .L566
 6425 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6426 000c 002B     		cmp	r3, #0
 6427 000e 04D0     		beq	.L409
1957:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6428              		.loc 1 1957 0
 6429 0010 AB4B     		ldr	r3, .L566
 6430 0012 0022     		movs	r2, #0
 6431 0014 1A70     		strb	r2, [r3]
1958:..\src/interruptions.c ****             interrupt_manager();
 6432              		.loc 1 1958 0
 6433 0016 FFF7FEFF 		bl	interrupt_manager
 6434              	.L409:
1954:..\src/interruptions.c ****         
 6435              		.loc 1 1954 0
 6436 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6437 001e 0346     		mov	r3, r0
 6438 0020 002B     		cmp	r3, #0
 6439 0022 F1D0     		beq	.L410
1959:..\src/interruptions.c ****         }
1960:..\src/interruptions.c ****     }
1961:..\src/interruptions.c ****     
1962:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1963:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1964:..\src/interruptions.c ****         // Read pressure in any case
1965:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1966:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1967:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1968:..\src/interruptions.c ****     }
1969:..\src/interruptions.c **** #endif
1970:..\src/interruptions.c ****  
1971:..\src/interruptions.c ****     // Convert tension read
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 151


1972:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6440              		.loc 1 1972 0
 6441 0024 A74B     		ldr	r3, .L566+4
 6442 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6443 002a 022B     		cmp	r3, #2
 6444 002c 04D1     		bne	.L411
1973:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6445              		.loc 1 1973 0
 6446 002e A64B     		ldr	r3, .L566+8
 6447 0030 41F28832 		movw	r2, #5000
 6448 0034 1A60     		str	r2, [r3]
 6449 0036 0BE0     		b	.L412
 6450              	.L411:
1974:..\src/interruptions.c ****     }
1975:..\src/interruptions.c ****     else {
1976:..\src/interruptions.c ****         dev_tension[0] =  ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6451              		.loc 1 1976 0
 6452 0038 A44B     		ldr	r3, .L566+12
 6453 003a B3F90030 		ldrsh	r3, [r3]
 6454 003e A3F25563 		subw	r3, r3, #1621
 6455 0042 40F2C672 		movw	r2, #1990
 6456 0046 02FB03F3 		mul	r3, r2, r3
 6457 004a DB11     		asrs	r3, r3, #7
 6458 004c 9E4A     		ldr	r2, .L566+8
 6459 004e 1360     		str	r3, [r2]
 6460              	.L412:
1977:..\src/interruptions.c ****     }
1978:..\src/interruptions.c ****     
1979:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1980:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6461              		.loc 1 1980 0
 6462 0050 9F4B     		ldr	r3, .L566+16
 6463 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6464 0054 042B     		cmp	r3, #4
 6465 0056 0BD9     		bls	.L413
1981:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6466              		.loc 1 1981 0
 6467 0058 9C4B     		ldr	r3, .L566+12
 6468 005a B3F90830 		ldrsh	r3, [r3, #8]
 6469 005e A3F25563 		subw	r3, r3, #1621
 6470 0062 40F2C672 		movw	r2, #1990
 6471 0066 02FB03F3 		mul	r3, r2, r3
 6472 006a DB11     		asrs	r3, r3, #7
 6473 006c 964A     		ldr	r2, .L566+8
 6474 006e 5360     		str	r3, [r2, #4]
 6475              	.L413:
1982:..\src/interruptions.c ****     }
1983:..\src/interruptions.c ****     
1984:..\src/interruptions.c ****     if (interrupt_flag){
 6476              		.loc 1 1984 0
 6477 0070 934B     		ldr	r3, .L566
 6478 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6479 0074 002B     		cmp	r3, #0
 6480 0076 04D0     		beq	.L414
1985:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6481              		.loc 1 1985 0
 6482 0078 914B     		ldr	r3, .L566
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 152


 6483 007a 0022     		movs	r2, #0
 6484 007c 1A70     		strb	r2, [r3]
1986:..\src/interruptions.c ****         interrupt_manager();
 6485              		.loc 1 1986 0
 6486 007e FFF7FEFF 		bl	interrupt_manager
 6487              	.L414:
1987:..\src/interruptions.c ****     }
1988:..\src/interruptions.c ****     
1989:..\src/interruptions.c ****     // Update cycle power value
1990:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6488              		.loc 1 1990 0
 6489 0082 914B     		ldr	r3, .L566+8
 6490 0084 1B68     		ldr	r3, [r3]
 6491 0086 934A     		ldr	r2, .L566+20
 6492 0088 82FB0312 		smull	r1, r2, r2, r3
 6493 008c D211     		asrs	r2, r2, #7
 6494 008e DB17     		asrs	r3, r3, #31
 6495 0090 D31A     		subs	r3, r2, r3
 6496 0092 9149     		ldr	r1, .L566+24
 6497 0094 1846     		mov	r0, r3
 6498 0096 FFF7FEFF 		bl	filter
 6499 009a 0246     		mov	r2, r0
 6500 009c 8F4B     		ldr	r3, .L566+28
 6501 009e 1A60     		str	r2, [r3]
1991:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6502              		.loc 1 1991 0
 6503 00a0 8F4B     		ldr	r3, .L566+32
 6504 00a2 1B68     		ldr	r3, [r3]
 6505 00a4 002B     		cmp	r3, #0
 6506 00a6 08DA     		bge	.L415
 6507              		.loc 1 1991 0 is_stmt 0 discriminator 1
 6508 00a8 8C4B     		ldr	r3, .L566+28
 6509 00aa 1B68     		ldr	r3, [r3]
 6510 00ac 002B     		cmp	r3, #0
 6511 00ae 04DB     		blt	.L415
1992:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6512              		.loc 1 1992 0 is_stmt 1
 6513 00b0 844B     		ldr	r3, .L566+4
 6514 00b2 1B6E     		ldr	r3, [r3, #96]
 6515 00b4 0133     		adds	r3, r3, #1
 6516 00b6 834A     		ldr	r2, .L566+4
 6517 00b8 1366     		str	r3, [r2, #96]
 6518              	.L415:
1993:..\src/interruptions.c ****     }
1994:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6519              		.loc 1 1994 0
 6520 00ba 884B     		ldr	r3, .L566+28
 6521 00bc 1B68     		ldr	r3, [r3]
 6522 00be 884A     		ldr	r2, .L566+32
 6523 00c0 1360     		str	r3, [r2]
1995:..\src/interruptions.c ****   
1996:..\src/interruptions.c ****     
1997:..\src/interruptions.c ****     // VOLTAGE READING
1998:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1999:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
2000:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
2001:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 153


2002:..\src/interruptions.c ****     
2003:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6524              		.loc 1 2003 0
 6525 00c2 884B     		ldr	r3, .L566+36
 6526 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6527 00c6 002B     		cmp	r3, #0
 6528 00c8 4DD0     		beq	.L416
 6529              		.loc 1 2003 0 is_stmt 0 discriminator 1
 6530 00ca 874B     		ldr	r3, .L566+40
 6531 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6532 00ce 002B     		cmp	r3, #0
 6533 00d0 49D0     		beq	.L416
2004:..\src/interruptions.c ****         count = count + 1;
 6534              		.loc 1 2004 0 is_stmt 1
 6535 00d2 864B     		ldr	r3, .L566+44
 6536 00d4 1B88     		ldrh	r3, [r3]
 6537 00d6 0133     		adds	r3, r3, #1
 6538 00d8 9AB2     		uxth	r2, r3
 6539 00da 844B     		ldr	r3, .L566+44
 6540 00dc 1A80     		strh	r2, [r3]	@ movhi
2005:..\src/interruptions.c ****         
2006:..\src/interruptions.c ****         if (count == 1000){
 6541              		.loc 1 2006 0
 6542 00de 834B     		ldr	r3, .L566+44
 6543 00e0 1B88     		ldrh	r3, [r3]
 6544 00e2 B3F57A7F 		cmp	r3, #1000
 6545 00e6 3ED1     		bne	.L416
2007:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6546              		.loc 1 2007 0
 6547 00e8 814B     		ldr	r3, .L566+48
 6548 00ea 0022     		movs	r2, #0
 6549 00ec 1A70     		strb	r2, [r3]
 6550 00ee 33E0     		b	.L417
 6551              	.L421:
2008:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6552              		.loc 1 2008 0
 6553 00f0 7F4B     		ldr	r3, .L566+48
 6554 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6555 00f4 1A46     		mov	r2, r3
 6556 00f6 744B     		ldr	r3, .L566+8
 6557 00f8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6558 00fc 42F22732 		movw	r2, #8999
 6559 0100 9342     		cmp	r3, r2
 6560 0102 08DC     		bgt	.L418
2009:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6561              		.loc 1 2009 0
 6562 0104 7A4B     		ldr	r3, .L566+48
 6563 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6564 0108 1946     		mov	r1, r3
 6565 010a 7A4B     		ldr	r3, .L566+52
 6566 010c 4FF4FA52 		mov	r2, #8000
 6567 0110 43F82120 		str	r2, [r3, r1, lsl #2]
 6568 0114 1AE0     		b	.L419
 6569              	.L418:
2010:..\src/interruptions.c ****                 }
2011:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
2012:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 154


 6570              		.loc 1 2012 0
 6571 0116 764B     		ldr	r3, .L566+48
 6572 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6573 011a 1A46     		mov	r2, r3
 6574 011c 6A4B     		ldr	r3, .L566+8
 6575 011e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6576 0122 43F2C722 		movw	r2, #12999
 6577 0126 9342     		cmp	r3, r2
 6578 0128 08DC     		bgt	.L420
2013:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6579              		.loc 1 2013 0
 6580 012a 714B     		ldr	r3, .L566+48
 6581 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6582 012e 1946     		mov	r1, r3
 6583 0130 704B     		ldr	r3, .L566+52
 6584 0132 42F6E062 		movw	r2, #12000
 6585 0136 43F82120 		str	r2, [r3, r1, lsl #2]
 6586 013a 07E0     		b	.L419
 6587              	.L420:
2014:..\src/interruptions.c ****                     }
2015:..\src/interruptions.c ****                     else
2016:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6588              		.loc 1 2016 0
 6589 013c 6C4B     		ldr	r3, .L566+48
 6590 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6591 0140 1946     		mov	r1, r3
 6592 0142 6C4B     		ldr	r3, .L566+52
 6593 0144 45F6C052 		movw	r2, #24000
 6594 0148 43F82120 		str	r2, [r3, r1, lsl #2]
 6595              	.L419:
2007:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6596              		.loc 1 2007 0 discriminator 2
 6597 014c 684B     		ldr	r3, .L566+48
 6598 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6599 0150 0133     		adds	r3, r3, #1
 6600 0152 DAB2     		uxtb	r2, r3
 6601 0154 664B     		ldr	r3, .L566+48
 6602 0156 1A70     		strb	r2, [r3]
 6603              	.L417:
2007:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6604              		.loc 1 2007 0 is_stmt 0 discriminator 1
 6605 0158 654B     		ldr	r3, .L566+48
 6606 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6607 015c 012B     		cmp	r3, #1
 6608 015e C7D9     		bls	.L421
2017:..\src/interruptions.c ****                 }
2018:..\src/interruptions.c ****             }
2019:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6609              		.loc 1 2019 0 is_stmt 1
 6610 0160 604B     		ldr	r3, .L566+36
 6611 0162 0022     		movs	r2, #0
 6612 0164 1A70     		strb	r2, [r3]
 6613              	.L416:
2020:..\src/interruptions.c ****         }
2021:..\src/interruptions.c ****     }
2022:..\src/interruptions.c **** 
2023:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 155


2024:..\src/interruptions.c **** 
2025:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6614              		.loc 1 2025 0
 6615 0166 584B     		ldr	r3, .L566+8
 6616 0168 1B68     		ldr	r3, [r3]
 6617 016a 41F66312 		movw	r2, #6499
 6618 016e 9342     		cmp	r3, r2
 6619 0170 00F3F580 		bgt	.L422
 6620              		.loc 1 2025 0 is_stmt 0 discriminator 1
 6621 0174 564B     		ldr	r3, .L566+16
 6622 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6623 0178 042B     		cmp	r3, #4
 6624 017a 06D9     		bls	.L423
 6625              		.loc 1 2025 0 discriminator 2
 6626 017c 524B     		ldr	r3, .L566+8
 6627 017e 5B68     		ldr	r3, [r3, #4]
 6628 0180 41F66312 		movw	r2, #6499
 6629 0184 9342     		cmp	r3, r2
 6630 0186 00F3EA80 		bgt	.L422
 6631              	.L423:
2026:..\src/interruptions.c ****         // PSoC is powered through uUSB
2027:..\src/interruptions.c ****         
2028:..\src/interruptions.c ****         tension_valid = FALSE;
 6632              		.loc 1 2028 0 is_stmt 1
 6633 018a 574B     		ldr	r3, .L566+40
 6634 018c 0022     		movs	r2, #0
 6635 018e 1A70     		strb	r2, [r3]
2029:..\src/interruptions.c ****             
2030:..\src/interruptions.c ****         if (interrupt_flag){
 6636              		.loc 1 2030 0
 6637 0190 4B4B     		ldr	r3, .L566
 6638 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6639 0194 002B     		cmp	r3, #0
 6640 0196 04D0     		beq	.L424
2031:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6641              		.loc 1 2031 0
 6642 0198 494B     		ldr	r3, .L566
 6643 019a 0022     		movs	r2, #0
 6644 019c 1A70     		strb	r2, [r3]
2032:..\src/interruptions.c ****             interrupt_manager();
 6645              		.loc 1 2032 0
 6646 019e FFF7FEFF 		bl	interrupt_manager
 6647              	.L424:
2033:..\src/interruptions.c ****         }
2034:..\src/interruptions.c ****         
2035:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6648              		.loc 1 2035 0
 6649 01a2 534B     		ldr	r3, .L566+48
 6650 01a4 0022     		movs	r2, #0
 6651 01a6 1A70     		strb	r2, [r3]
 6652 01a8 81E0     		b	.L425
 6653              	.L428:
2036:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6654              		.loc 1 2036 0
 6655 01aa 534B     		ldr	r3, .L566+56
 6656 01ac 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6657 01b0 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 156


 6658 01b2 59D0     		beq	.L426
2037:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6659              		.loc 1 2037 0
 6660 01b4 4E4B     		ldr	r3, .L566+48
 6661 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6662 01b8 1946     		mov	r1, r3
 6663 01ba 4F4A     		ldr	r2, .L566+56
 6664 01bc 0B46     		mov	r3, r1
 6665 01be DB00     		lsls	r3, r3, #3
 6666 01c0 5B1A     		subs	r3, r3, r1
 6667 01c2 1B01     		lsls	r3, r3, #4
 6668 01c4 1344     		add	r3, r3, r2
 6669 01c6 03F58773 		add	r3, r3, #270
 6670 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6671 01cc 022B     		cmp	r3, #2
 6672 01ce 37D0     		beq	.L427
2038:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6673              		.loc 1 2038 0 discriminator 1
 6674 01d0 474B     		ldr	r3, .L566+48
 6675 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6676 01d4 1946     		mov	r1, r3
 6677 01d6 484A     		ldr	r2, .L566+56
 6678 01d8 0B46     		mov	r3, r1
 6679 01da DB00     		lsls	r3, r3, #3
 6680 01dc 5B1A     		subs	r3, r3, r1
 6681 01de 1B01     		lsls	r3, r3, #4
 6682 01e0 1344     		add	r3, r3, r2
 6683 01e2 03F58773 		add	r3, r3, #270
 6684 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2037:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6685              		.loc 1 2037 0 discriminator 1
 6686 01e8 032B     		cmp	r3, #3
 6687 01ea 29D0     		beq	.L427
2039:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6688              		.loc 1 2039 0
 6689 01ec 404B     		ldr	r3, .L566+48
 6690 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6691 01f0 1946     		mov	r1, r3
 6692 01f2 414A     		ldr	r2, .L566+56
 6693 01f4 0B46     		mov	r3, r1
 6694 01f6 DB00     		lsls	r3, r3, #3
 6695 01f8 5B1A     		subs	r3, r3, r1
 6696 01fa 1B01     		lsls	r3, r3, #4
 6697 01fc 1344     		add	r3, r3, r2
 6698 01fe 03F58773 		add	r3, r3, #270
 6699 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2038:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6700              		.loc 1 2038 0
 6701 0204 042B     		cmp	r3, #4
 6702 0206 1BD0     		beq	.L427
2040:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6703              		.loc 1 2040 0
 6704 0208 394B     		ldr	r3, .L566+48
 6705 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6706 020c 1946     		mov	r1, r3
 6707 020e 3A4A     		ldr	r2, .L566+56
 6708 0210 0B46     		mov	r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 157


 6709 0212 DB00     		lsls	r3, r3, #3
 6710 0214 5B1A     		subs	r3, r3, r1
 6711 0216 1B01     		lsls	r3, r3, #4
 6712 0218 1344     		add	r3, r3, r2
 6713 021a 03F58773 		add	r3, r3, #270
 6714 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2039:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6715              		.loc 1 2039 0
 6716 0220 052B     		cmp	r3, #5
 6717 0222 0DD0     		beq	.L427
2041:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6718              		.loc 1 2041 0
 6719 0224 324B     		ldr	r3, .L566+48
 6720 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6721 0228 1946     		mov	r1, r3
 6722 022a 334A     		ldr	r2, .L566+56
 6723 022c 0B46     		mov	r3, r1
 6724 022e DB00     		lsls	r3, r3, #3
 6725 0230 5B1A     		subs	r3, r3, r1
 6726 0232 1B01     		lsls	r3, r3, #4
 6727 0234 1344     		add	r3, r3, r2
 6728 0236 03F58773 		add	r3, r3, #270
 6729 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2040:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6730              		.loc 1 2040 0
 6731 023c 072B     		cmp	r3, #7
 6732 023e 13D1     		bne	.L426
 6733              	.L427:
2042:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6734              		.loc 1 2042 0
 6735 0240 2B4B     		ldr	r3, .L566+48
 6736 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6737 0244 2D4A     		ldr	r2, .L566+60
 6738 0246 1B01     		lsls	r3, r3, #4
 6739 0248 1344     		add	r3, r3, r2
 6740 024a 0C33     		adds	r3, r3, #12
 6741 024c 0022     		movs	r2, #0
 6742 024e 1A70     		strb	r2, [r3]
2043:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6743              		.loc 1 2043 0
 6744 0250 274B     		ldr	r3, .L566+48
 6745 0252 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6746 0254 264B     		ldr	r3, .L566+48
 6747 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6748 0258 284A     		ldr	r2, .L566+60
 6749 025a 1B01     		lsls	r3, r3, #4
 6750 025c 1344     		add	r3, r3, r2
 6751 025e 0C33     		adds	r3, r3, #12
 6752 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6753 0262 1946     		mov	r1, r3
 6754 0264 FFF7FEFF 		bl	enable_motor
 6755              	.L426:
2044:..\src/interruptions.c ****                     
2045:..\src/interruptions.c ****                 }
2046:..\src/interruptions.c ****             }
2047:..\src/interruptions.c **** 
2048:..\src/interruptions.c ****             // Assign dev_tension and reset current
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 158


2049:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6756              		.loc 1 2049 0 discriminator 2
 6757 0268 214B     		ldr	r3, .L566+48
 6758 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6759 026c 1946     		mov	r1, r3
 6760 026e 164B     		ldr	r3, .L566+8
 6761 0270 41F28832 		movw	r2, #5000
 6762 0274 43F82120 		str	r2, [r3, r1, lsl #2]
2050:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6763              		.loc 1 2050 0 discriminator 2
 6764 0278 1D4B     		ldr	r3, .L566+48
 6765 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6766 027c 1946     		mov	r1, r3
 6767 027e 114A     		ldr	r2, .L566+4
 6768 0280 0B46     		mov	r3, r1
 6769 0282 DB00     		lsls	r3, r3, #3
 6770 0284 5B1A     		subs	r3, r3, r1
 6771 0286 1B01     		lsls	r3, r3, #4
 6772 0288 1344     		add	r3, r3, r2
 6773 028a 03F58873 		add	r3, r3, #272
 6774 028e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6775 0290 1946     		mov	r1, r3
 6776 0292 1B4A     		ldr	r2, .L566+64
 6777 0294 3423     		movs	r3, #52
 6778 0296 03FB01F3 		mul	r3, r3, r1
 6779 029a 1344     		add	r3, r3, r2
 6780 029c 0C33     		adds	r3, r3, #12
 6781 029e 0022     		movs	r2, #0
 6782 02a0 1A60     		str	r2, [r3]
2035:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6783              		.loc 1 2035 0 discriminator 2
 6784 02a2 134B     		ldr	r3, .L566+48
 6785 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6786 02a6 0133     		adds	r3, r3, #1
 6787 02a8 DAB2     		uxtb	r2, r3
 6788 02aa 114B     		ldr	r3, .L566+48
 6789 02ac 1A70     		strb	r2, [r3]
 6790              	.L425:
2035:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6791              		.loc 1 2035 0 is_stmt 0 discriminator 1
 6792 02ae 104B     		ldr	r3, .L566+48
 6793 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6794 02b2 012B     		cmp	r3, #1
 6795 02b4 7FF679AF 		bls	.L428
2051:..\src/interruptions.c ****         }
2052:..\src/interruptions.c ****         
2053:..\src/interruptions.c ****         // Reset emg
2054:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6796              		.loc 1 2054 0 is_stmt 1
 6797 02b8 0D4B     		ldr	r3, .L566+48
 6798 02ba 0022     		movs	r2, #0
 6799 02bc 1A70     		strb	r2, [r3]
 6800 02be 2EE0     		b	.L429
 6801              	.L567:
 6802              		.align	2
 6803              	.L566:
 6804 02c0 00000000 		.word	interrupt_flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 159


 6805 02c4 00000000 		.word	g_mem
 6806 02c8 00000000 		.word	dev_tension
 6807 02cc 00000000 		.word	ADC_buf
 6808 02d0 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6809 02d4 F1197605 		.word	91625969
 6810 02d8 00000000 		.word	filt_detect_pc
 6811 02dc 00000000 		.word	detect_power_cycle
 6812 02e0 08000000 		.word	detect_power_cycle_prev.10667
 6813 02e4 0C000000 		.word	first_tension_valid.10666
 6814 02e8 00000000 		.word	tension_valid
 6815 02ec 70010000 		.word	count.10668
 6816 02f0 72010000 		.word	idx.10670
 6817 02f4 00000000 		.word	pow_tension
 6818 02f8 00000000 		.word	c_mem
 6819 02fc 00000000 		.word	g_ref
 6820 0300 00000000 		.word	g_meas
 6821              	.L430:
2055:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6822              		.loc 1 2055 0 discriminator 3
 6823 0304 6D4B     		ldr	r3, .L568
 6824 0306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6825 0308 1946     		mov	r1, r3
 6826 030a 6D4B     		ldr	r3, .L568+4
 6827 030c 0022     		movs	r2, #0
 6828 030e 43F82120 		str	r2, [r3, r1, lsl #2]
2054:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6829              		.loc 1 2054 0 discriminator 3
 6830 0312 6A4B     		ldr	r3, .L568
 6831 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6832 0316 0133     		adds	r3, r3, #1
 6833 0318 DAB2     		uxtb	r2, r3
 6834 031a 684B     		ldr	r3, .L568
 6835 031c 1A70     		strb	r2, [r3]
 6836              	.L429:
2054:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6837              		.loc 1 2054 0 is_stmt 0 discriminator 1
 6838 031e 674B     		ldr	r3, .L568
 6839 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6840 0322 012B     		cmp	r3, #1
 6841 0324 EED9     		bls	.L430
2056:..\src/interruptions.c ****         }
2057:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6842              		.loc 1 2057 0 is_stmt 1
 6843 0326 654B     		ldr	r3, .L568
 6844 0328 0022     		movs	r2, #0
 6845 032a 1A70     		strb	r2, [r3]
 6846 032c 0CE0     		b	.L431
 6847              	.L433:
2058:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6848              		.loc 1 2058 0 discriminator 4
 6849 032e 634B     		ldr	r3, .L568
 6850 0330 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6851 0332 634A     		ldr	r2, .L568+4
 6852 0334 0233     		adds	r3, r3, #2
 6853 0336 0021     		movs	r1, #0
 6854 0338 42F82310 		str	r1, [r2, r3, lsl #2]
2057:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 160


 6855              		.loc 1 2057 0 discriminator 4
 6856 033c 5F4B     		ldr	r3, .L568
 6857 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6858 0340 0133     		adds	r3, r3, #1
 6859 0342 DAB2     		uxtb	r2, r3
 6860 0344 5D4B     		ldr	r3, .L568
 6861 0346 1A70     		strb	r2, [r3]
 6862              	.L431:
2057:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6863              		.loc 1 2057 0 is_stmt 0 discriminator 1
 6864 0348 5E4B     		ldr	r3, .L568+8
 6865 034a 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6866 034e 002B     		cmp	r3, #0
 6867 0350 00F03582 		beq	.L548
2057:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6868              		.loc 1 2057 0 discriminator 3
 6869 0354 594B     		ldr	r3, .L568
 6870 0356 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6871 0358 052B     		cmp	r3, #5
 6872 035a E8D9     		bls	.L433
2025:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6873              		.loc 1 2025 0 is_stmt 1
 6874 035c 2FE2     		b	.L548
 6875              	.L422:
2059:..\src/interruptions.c ****         }
2060:..\src/interruptions.c ****         
2061:..\src/interruptions.c ****     }
2062:..\src/interruptions.c ****     else {
2063:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2064:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2065:..\src/interruptions.c ****         
2066:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2067:..\src/interruptions.c ****         
2068:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6876              		.loc 1 2068 0
 6877 035e 5A4B     		ldr	r3, .L568+12
 6878 0360 1B68     		ldr	r3, [r3]
 6879 0362 B3F57A7F 		cmp	r3, #1000
 6880 0366 0DD1     		bne	.L435
 6881              		.loc 1 2068 0 is_stmt 0 discriminator 1
 6882 0368 584B     		ldr	r3, .L568+16
 6883 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6884 036c 002B     		cmp	r3, #0
 6885 036e 09D1     		bne	.L435
2069:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2070:..\src/interruptions.c ****             tension_valid = TRUE;   
 6886              		.loc 1 2070 0 is_stmt 1
 6887 0370 564B     		ldr	r3, .L568+16
 6888 0372 0122     		movs	r2, #1
 6889 0374 1A70     		strb	r2, [r3]
2071:..\src/interruptions.c ****             count = 0;
 6890              		.loc 1 2071 0
 6891 0376 564B     		ldr	r3, .L568+20
 6892 0378 0022     		movs	r2, #0
 6893 037a 1A80     		strh	r2, [r3]	@ movhi
2072:..\src/interruptions.c ****             v_count = 0;            
 6894              		.loc 1 2072 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 161


 6895 037c 524B     		ldr	r3, .L568+12
 6896 037e 0022     		movs	r2, #0
 6897 0380 1A60     		str	r2, [r3]
 6898 0382 2CE0     		b	.L436
 6899              	.L435:
2073:..\src/interruptions.c ****         }
2074:..\src/interruptions.c ****         else {  
2075:..\src/interruptions.c ****             // wait for battery voltage stabilization
2076:..\src/interruptions.c ****             if (v_count < 1000) {
 6900              		.loc 1 2076 0
 6901 0384 504B     		ldr	r3, .L568+12
 6902 0386 1B68     		ldr	r3, [r3]
 6903 0388 B3F57A7F 		cmp	r3, #1000
 6904 038c 04D2     		bcs	.L437
2077:..\src/interruptions.c ****                 v_count = v_count + 1;
 6905              		.loc 1 2077 0
 6906 038e 4E4B     		ldr	r3, .L568+12
 6907 0390 1B68     		ldr	r3, [r3]
 6908 0392 0133     		adds	r3, r3, #1
 6909 0394 4C4A     		ldr	r2, .L568+12
 6910 0396 1360     		str	r3, [r2]
 6911              	.L437:
2078:..\src/interruptions.c ****             }
2079:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6912              		.loc 1 2079 0
 6913 0398 484B     		ldr	r3, .L568
 6914 039a 0022     		movs	r2, #0
 6915 039c 1A70     		strb	r2, [r3]
 6916 039e 1AE0     		b	.L438
 6917              	.L439:
2080:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6918              		.loc 1 2080 0 discriminator 3
 6919 03a0 464B     		ldr	r3, .L568
 6920 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6921 03a4 1C46     		mov	r4, r3
 6922 03a6 454B     		ldr	r3, .L568
 6923 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6924 03aa 1A46     		mov	r2, r3
 6925 03ac 494B     		ldr	r3, .L568+24
 6926 03ae 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6927 03b2 424B     		ldr	r3, .L568
 6928 03b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6929 03b6 DB00     		lsls	r3, r3, #3
 6930 03b8 474A     		ldr	r2, .L568+28
 6931 03ba 1344     		add	r3, r3, r2
 6932 03bc 1946     		mov	r1, r3
 6933 03be FFF7FEFF 		bl	filter
 6934 03c2 0246     		mov	r2, r0
 6935 03c4 454B     		ldr	r3, .L568+32
 6936 03c6 43F82420 		str	r2, [r3, r4, lsl #2]
2079:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6937              		.loc 1 2079 0 discriminator 3
 6938 03ca 3C4B     		ldr	r3, .L568
 6939 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6940 03ce 0133     		adds	r3, r3, #1
 6941 03d0 DAB2     		uxtb	r2, r3
 6942 03d2 3A4B     		ldr	r3, .L568
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 162


 6943 03d4 1A70     		strb	r2, [r3]
 6944              	.L438:
2079:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6945              		.loc 1 2079 0 is_stmt 0 discriminator 1
 6946 03d6 394B     		ldr	r3, .L568
 6947 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6948 03da 012B     		cmp	r3, #1
 6949 03dc E0D9     		bls	.L439
 6950              	.L436:
2081:..\src/interruptions.c ****             }
2082:..\src/interruptions.c ****         }
2083:..\src/interruptions.c **** 
2084:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6951              		.loc 1 2084 0 is_stmt 1
 6952 03de 374B     		ldr	r3, .L568
 6953 03e0 0022     		movs	r2, #0
 6954 03e2 1A70     		strb	r2, [r3]
 6955 03e4 17E0     		b	.L440
 6956              	.L442:
2085:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6957              		.loc 1 2085 0
 6958 03e6 354B     		ldr	r3, .L568
 6959 03e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6960 03ea 1946     		mov	r1, r3
 6961 03ec 3C4A     		ldr	r2, .L568+36
 6962 03ee 0B46     		mov	r3, r1
 6963 03f0 DB00     		lsls	r3, r3, #3
 6964 03f2 5B1A     		subs	r3, r3, r1
 6965 03f4 1B01     		lsls	r3, r3, #4
 6966 03f6 1344     		add	r3, r3, r2
 6967 03f8 E133     		adds	r3, r3, #225
 6968 03fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6969 03fc 002B     		cmp	r3, #0
 6970 03fe 04D0     		beq	.L441
2086:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6971              		.loc 1 2086 0
 6972 0400 2E4B     		ldr	r3, .L568
 6973 0402 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6974 0404 1846     		mov	r0, r3
 6975 0406 FFF7FEFF 		bl	pwm_limit_search
 6976              	.L441:
2084:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6977              		.loc 1 2084 0 discriminator 2
 6978 040a 2C4B     		ldr	r3, .L568
 6979 040c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6980 040e 0133     		adds	r3, r3, #1
 6981 0410 DAB2     		uxtb	r2, r3
 6982 0412 2A4B     		ldr	r3, .L568
 6983 0414 1A70     		strb	r2, [r3]
 6984              	.L440:
2084:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6985              		.loc 1 2084 0 is_stmt 0 discriminator 1
 6986 0416 294B     		ldr	r3, .L568
 6987 0418 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6988 041a 012B     		cmp	r3, #1
 6989 041c E3D9     		bls	.L442
2087:..\src/interruptions.c ****         }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 163


2088:..\src/interruptions.c ****         
2089:..\src/interruptions.c ****         // Filter and Set currents
2090:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6990              		.loc 1 2090 0 is_stmt 1
 6991 041e 304B     		ldr	r3, .L568+36
 6992 0420 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6993 0424 002B     		cmp	r3, #0
 6994 0426 21D1     		bne	.L443
2091:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6995              		.loc 1 2091 0
 6996 0428 2D4B     		ldr	r3, .L568+36
 6997 042a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6998 042e 1C46     		mov	r4, r3
 6999 0430 2C4B     		ldr	r3, .L568+40
 7000 0432 B3F90230 		ldrsh	r3, [r3, #2]
 7001 0436 A3F5CE63 		sub	r3, r3, #1648
 7002 043a 45F66A02 		movw	r2, #22634
 7003 043e 02FB03F3 		mul	r3, r2, r3
 7004 0442 5B13     		asrs	r3, r3, #13
 7005 0444 1BB2     		sxth	r3, r3
 7006 0446 1A46     		mov	r2, r3
 7007 0448 274B     		ldr	r3, .L568+44
 7008 044a 93F90030 		ldrsb	r3, [r3]
 7009 044e 03FB02F3 		mul	r3, r3, r2
 7010 0452 2649     		ldr	r1, .L568+48
 7011 0454 1846     		mov	r0, r3
 7012 0456 FFF7FEFF 		bl	filter
 7013 045a 0146     		mov	r1, r0
 7014 045c 244A     		ldr	r2, .L568+52
 7015 045e 3423     		movs	r3, #52
 7016 0460 03FB04F3 		mul	r3, r3, r4
 7017 0464 1344     		add	r3, r3, r2
 7018 0466 0C33     		adds	r3, r3, #12
 7019 0468 1960     		str	r1, [r3]
 7020 046a 5FE0     		b	.L444
 7021              	.L443:
2092:..\src/interruptions.c ****         } 
2093:..\src/interruptions.c ****         else {
2094:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 7022              		.loc 1 2094 0
 7023 046c 1C4B     		ldr	r3, .L568+36
 7024 046e 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 7025 0472 022B     		cmp	r3, #2
 7026 0474 3ED1     		bne	.L445
2095:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2096:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 7027              		.loc 1 2096 0
 7028 0476 1A4B     		ldr	r3, .L568+36
 7029 0478 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7030 047c 1C46     		mov	r4, r3
 7031 047e 194B     		ldr	r3, .L568+40
 7032 0480 B3F90230 		ldrsh	r3, [r3, #2]
 7033 0484 A3F28F63 		subw	r3, r3, #1679
 7034 0488 45F65072 		movw	r2, #24400
 7035 048c 02FB03F3 		mul	r3, r2, r3
 7036 0490 5B13     		asrs	r3, r3, #13
 7037 0492 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 164


 7038 0494 1A46     		mov	r2, r3
 7039 0496 144B     		ldr	r3, .L568+44
 7040 0498 93F90030 		ldrsb	r3, [r3]
 7041 049c 03FB02F3 		mul	r3, r3, r2
 7042 04a0 1249     		ldr	r1, .L568+48
 7043 04a2 1846     		mov	r0, r3
 7044 04a4 FFF7FEFF 		bl	filter
 7045 04a8 0146     		mov	r1, r0
 7046 04aa 114A     		ldr	r2, .L568+52
 7047 04ac 3423     		movs	r3, #52
 7048 04ae 03FB04F3 		mul	r3, r3, r4
 7049 04b2 1344     		add	r3, r3, r2
 7050 04b4 0C33     		adds	r3, r3, #12
 7051 04b6 1960     		str	r1, [r3]
 7052 04b8 38E0     		b	.L444
 7053              	.L569:
 7054 04ba 00BF     		.align	2
 7055              	.L568:
 7056 04bc 72010000 		.word	idx.10670
 7057 04c0 00000000 		.word	g_adc_meas
 7058 04c4 00000000 		.word	c_mem
 7059 04c8 74010000 		.word	v_count.10669
 7060 04cc 00000000 		.word	tension_valid
 7061 04d0 70010000 		.word	count.10668
 7062 04d4 00000000 		.word	dev_tension
 7063 04d8 00000000 		.word	filt_v
 7064 04dc 00000000 		.word	dev_tension_f
 7065 04e0 00000000 		.word	g_mem
 7066 04e4 00000000 		.word	ADC_buf
 7067 04e8 00000000 		.word	pwm_sign
 7068 04ec 00000000 		.word	filt_i
 7069 04f0 00000000 		.word	g_meas
 7070              	.L445:
2097:..\src/interruptions.c ****             } else { // [GS]
2098:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 7071              		.loc 1 2098 0
 7072 04f4 C04B     		ldr	r3, .L570
 7073 04f6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7074 04fa 1846     		mov	r0, r3
 7075 04fc BF4B     		ldr	r3, .L570+4
 7076 04fe B3F90230 		ldrsh	r3, [r3, #2]
 7077 0502 A3F26362 		subw	r2, r3, #1635
 7078 0506 1346     		mov	r3, r2
 7079 0508 1B01     		lsls	r3, r3, #4
 7080 050a 9B1A     		subs	r3, r3, r2
 7081 050c 5B01     		lsls	r3, r3, #5
 7082 050e 1B11     		asrs	r3, r3, #4
 7083 0510 1BB2     		sxth	r3, r3
 7084 0512 1A46     		mov	r2, r3
 7085 0514 BA4B     		ldr	r3, .L570+8
 7086 0516 93F90030 		ldrsb	r3, [r3]
 7087 051a 03FB02F2 		mul	r2, r3, r2
 7088 051e B949     		ldr	r1, .L570+12
 7089 0520 3423     		movs	r3, #52
 7090 0522 03FB00F3 		mul	r3, r3, r0
 7091 0526 0B44     		add	r3, r3, r1
 7092 0528 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 165


 7093 052a 1A60     		str	r2, [r3]
 7094              	.L444:
2099:..\src/interruptions.c ****             }
2100:..\src/interruptions.c ****         }
2101:..\src/interruptions.c ****         
2102:..\src/interruptions.c **** 
2103:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2104:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 7095              		.loc 1 2104 0
 7096 052c B24B     		ldr	r3, .L570
 7097 052e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7098 0532 1D46     		mov	r5, r3
 7099 0534 B04B     		ldr	r3, .L570
 7100 0536 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7101 053a 1946     		mov	r1, r3
 7102 053c B14A     		ldr	r2, .L570+12
 7103 053e 3423     		movs	r3, #52
 7104 0540 03FB01F3 		mul	r3, r3, r1
 7105 0544 1344     		add	r3, r3, r2
 7106 0546 0C33     		adds	r3, r3, #12
 7107 0548 1C68     		ldr	r4, [r3]
 7108 054a AB4B     		ldr	r3, .L570
 7109 054c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7110 0550 1946     		mov	r1, r3
 7111 0552 AC4A     		ldr	r2, .L570+12
 7112 0554 3423     		movs	r3, #52
 7113 0556 03FB01F3 		mul	r3, r3, r1
 7114 055a 1344     		add	r3, r3, r2
 7115 055c 1A68     		ldr	r2, [r3]
 7116 055e A64B     		ldr	r3, .L570
 7117 0560 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7118 0564 1846     		mov	r0, r3
 7119 0566 A449     		ldr	r1, .L570
 7120 0568 0346     		mov	r3, r0
 7121 056a 5B00     		lsls	r3, r3, #1
 7122 056c 0344     		add	r3, r3, r0
 7123 056e 1B01     		lsls	r3, r3, #4
 7124 0570 0B44     		add	r3, r3, r1
 7125 0572 03F29513 		addw	r3, r3, #405
 7126 0576 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7127 0578 42FA03F6 		asr	r6, r2, r3
 7128 057c 9E4B     		ldr	r3, .L570
 7129 057e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7130 0582 1946     		mov	r1, r3
 7131 0584 9F4A     		ldr	r2, .L570+12
 7132 0586 3423     		movs	r3, #52
 7133 0588 03FB01F3 		mul	r3, r3, r1
 7134 058c 1344     		add	r3, r3, r2
 7135 058e 1C33     		adds	r3, r3, #28
 7136 0590 1A68     		ldr	r2, [r3]
 7137 0592 994B     		ldr	r3, .L570
 7138 0594 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7139 0598 1846     		mov	r0, r3
 7140 059a 9749     		ldr	r1, .L570
 7141 059c 0346     		mov	r3, r0
 7142 059e 5B00     		lsls	r3, r3, #1
 7143 05a0 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 166


 7144 05a2 1B01     		lsls	r3, r3, #4
 7145 05a4 0B44     		add	r3, r3, r1
 7146 05a6 03F29513 		addw	r3, r3, #405
 7147 05aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7148 05ac 42FA03FE 		asr	lr, r2, r3
 7149 05b0 954B     		ldr	r3, .L570+16
 7150 05b2 1A68     		ldr	r2, [r3]
 7151 05b4 904B     		ldr	r3, .L570
 7152 05b6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7153 05ba 1846     		mov	r0, r3
 7154 05bc 8E49     		ldr	r1, .L570
 7155 05be 0346     		mov	r3, r0
 7156 05c0 5B00     		lsls	r3, r3, #1
 7157 05c2 0344     		add	r3, r3, r0
 7158 05c4 1B01     		lsls	r3, r3, #4
 7159 05c6 0B44     		add	r3, r3, r1
 7160 05c8 03F29513 		addw	r3, r3, #405
 7161 05cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7162 05ce 42FA03F3 		asr	r3, r2, r3
 7163 05d2 7246     		mov	r2, lr
 7164 05d4 3146     		mov	r1, r6
 7165 05d6 0020     		movs	r0, #0
 7166 05d8 FFF7FEFF 		bl	curr_estim
 7167 05dc 0346     		mov	r3, r0
 7168 05de E31A     		subs	r3, r4, r3
 7169 05e0 8A49     		ldr	r1, .L570+20
 7170 05e2 1846     		mov	r0, r3
 7171 05e4 FFF7FEFF 		bl	filter
 7172 05e8 0346     		mov	r3, r0
 7173 05ea 1BB2     		sxth	r3, r3
 7174 05ec 1946     		mov	r1, r3
 7175 05ee 854A     		ldr	r2, .L570+12
 7176 05f0 3423     		movs	r3, #52
 7177 05f2 03FB05F3 		mul	r3, r3, r5
 7178 05f6 1344     		add	r3, r3, r2
 7179 05f8 1033     		adds	r3, r3, #16
 7180 05fa 1960     		str	r1, [r3]
2105:..\src/interruptions.c ****         
2106:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2107:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7181              		.loc 1 2107 0
 7182 05fc 844B     		ldr	r3, .L570+24
 7183 05fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7184 0600 042B     		cmp	r3, #4
 7185 0602 40F2D280 		bls	.L446
2108:..\src/interruptions.c ****             // Filter and Set currents
2109:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 7186              		.loc 1 2109 0
 7187 0606 7C4B     		ldr	r3, .L570
 7188 0608 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7189 060c 002B     		cmp	r3, #0
 7190 060e 21D1     		bne	.L447
2110:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7191              		.loc 1 2110 0
 7192 0610 794B     		ldr	r3, .L570
 7193 0612 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7194 0616 1C46     		mov	r4, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 167


 7195 0618 784B     		ldr	r3, .L570+4
 7196 061a B3F90A30 		ldrsh	r3, [r3, #10]
 7197 061e A3F5CE63 		sub	r3, r3, #1648
 7198 0622 45F66A02 		movw	r2, #22634
 7199 0626 02FB03F3 		mul	r3, r2, r3
 7200 062a 5B13     		asrs	r3, r3, #13
 7201 062c 1BB2     		sxth	r3, r3
 7202 062e 1A46     		mov	r2, r3
 7203 0630 734B     		ldr	r3, .L570+8
 7204 0632 93F90130 		ldrsb	r3, [r3, #1]
 7205 0636 03FB02F3 		mul	r3, r3, r2
 7206 063a 7649     		ldr	r1, .L570+28
 7207 063c 1846     		mov	r0, r3
 7208 063e FFF7FEFF 		bl	filter
 7209 0642 0146     		mov	r1, r0
 7210 0644 6F4A     		ldr	r2, .L570+12
 7211 0646 3423     		movs	r3, #52
 7212 0648 03FB04F3 		mul	r3, r3, r4
 7213 064c 1344     		add	r3, r3, r2
 7214 064e 0C33     		adds	r3, r3, #12
 7215 0650 1960     		str	r1, [r3]
 7216 0652 42E0     		b	.L448
 7217              	.L447:
2111:..\src/interruptions.c ****             } 
2112:..\src/interruptions.c ****             else {
2113:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7218              		.loc 1 2113 0
 7219 0654 684B     		ldr	r3, .L570
 7220 0656 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 7221 065a 022B     		cmp	r3, #2
 7222 065c 21D1     		bne	.L449
2114:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2115:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7223              		.loc 1 2115 0
 7224 065e 664B     		ldr	r3, .L570
 7225 0660 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7226 0664 1C46     		mov	r4, r3
 7227 0666 654B     		ldr	r3, .L570+4
 7228 0668 B3F90A30 		ldrsh	r3, [r3, #10]
 7229 066c A3F28F63 		subw	r3, r3, #1679
 7230 0670 45F65072 		movw	r2, #24400
 7231 0674 02FB03F3 		mul	r3, r2, r3
 7232 0678 5B13     		asrs	r3, r3, #13
 7233 067a 1BB2     		sxth	r3, r3
 7234 067c 1A46     		mov	r2, r3
 7235 067e 604B     		ldr	r3, .L570+8
 7236 0680 93F90130 		ldrsb	r3, [r3, #1]
 7237 0684 03FB02F3 		mul	r3, r3, r2
 7238 0688 6249     		ldr	r1, .L570+28
 7239 068a 1846     		mov	r0, r3
 7240 068c FFF7FEFF 		bl	filter
 7241 0690 0146     		mov	r1, r0
 7242 0692 5C4A     		ldr	r2, .L570+12
 7243 0694 3423     		movs	r3, #52
 7244 0696 03FB04F3 		mul	r3, r3, r4
 7245 069a 1344     		add	r3, r3, r2
 7246 069c 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 168


 7247 069e 1960     		str	r1, [r3]
 7248 06a0 1BE0     		b	.L448
 7249              	.L449:
2116:..\src/interruptions.c ****                 } else { // [GS]
2117:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7250              		.loc 1 2117 0
 7251 06a2 554B     		ldr	r3, .L570
 7252 06a4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7253 06a8 1846     		mov	r0, r3
 7254 06aa 544B     		ldr	r3, .L570+4
 7255 06ac B3F90A30 		ldrsh	r3, [r3, #10]
 7256 06b0 A3F26362 		subw	r2, r3, #1635
 7257 06b4 1346     		mov	r3, r2
 7258 06b6 1B01     		lsls	r3, r3, #4
 7259 06b8 9B1A     		subs	r3, r3, r2
 7260 06ba 5B01     		lsls	r3, r3, #5
 7261 06bc 1B11     		asrs	r3, r3, #4
 7262 06be 1BB2     		sxth	r3, r3
 7263 06c0 1A46     		mov	r2, r3
 7264 06c2 4F4B     		ldr	r3, .L570+8
 7265 06c4 93F90130 		ldrsb	r3, [r3, #1]
 7266 06c8 03FB02F2 		mul	r2, r3, r2
 7267 06cc 4D49     		ldr	r1, .L570+12
 7268 06ce 3423     		movs	r3, #52
 7269 06d0 03FB00F3 		mul	r3, r3, r0
 7270 06d4 0B44     		add	r3, r3, r1
 7271 06d6 0C33     		adds	r3, r3, #12
 7272 06d8 1A60     		str	r2, [r3]
 7273              	.L448:
2118:..\src/interruptions.c ****                 }
2119:..\src/interruptions.c ****             }
2120:..\src/interruptions.c ****             
2121:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7274              		.loc 1 2121 0
 7275 06da 474B     		ldr	r3, .L570
 7276 06dc 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7277 06e0 1D46     		mov	r5, r3
 7278 06e2 454B     		ldr	r3, .L570
 7279 06e4 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7280 06e8 1946     		mov	r1, r3
 7281 06ea 464A     		ldr	r2, .L570+12
 7282 06ec 3423     		movs	r3, #52
 7283 06ee 03FB01F3 		mul	r3, r3, r1
 7284 06f2 1344     		add	r3, r3, r2
 7285 06f4 0C33     		adds	r3, r3, #12
 7286 06f6 1C68     		ldr	r4, [r3]
 7287 06f8 3F4B     		ldr	r3, .L570
 7288 06fa 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7289 06fe 1946     		mov	r1, r3
 7290 0700 404A     		ldr	r2, .L570+12
 7291 0702 3423     		movs	r3, #52
 7292 0704 03FB01F3 		mul	r3, r3, r1
 7293 0708 1344     		add	r3, r3, r2
 7294 070a 1A68     		ldr	r2, [r3]
 7295 070c 3A4B     		ldr	r3, .L570
 7296 070e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7297 0712 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 169


 7298 0714 3849     		ldr	r1, .L570
 7299 0716 0346     		mov	r3, r0
 7300 0718 5B00     		lsls	r3, r3, #1
 7301 071a 0344     		add	r3, r3, r0
 7302 071c 1B01     		lsls	r3, r3, #4
 7303 071e 0B44     		add	r3, r3, r1
 7304 0720 03F29513 		addw	r3, r3, #405
 7305 0724 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7306 0726 42FA03F6 		asr	r6, r2, r3
 7307 072a 334B     		ldr	r3, .L570
 7308 072c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7309 0730 1946     		mov	r1, r3
 7310 0732 344A     		ldr	r2, .L570+12
 7311 0734 3423     		movs	r3, #52
 7312 0736 03FB01F3 		mul	r3, r3, r1
 7313 073a 1344     		add	r3, r3, r2
 7314 073c 1C33     		adds	r3, r3, #28
 7315 073e 1A68     		ldr	r2, [r3]
 7316 0740 2D4B     		ldr	r3, .L570
 7317 0742 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7318 0746 1846     		mov	r0, r3
 7319 0748 2B49     		ldr	r1, .L570
 7320 074a 0346     		mov	r3, r0
 7321 074c 5B00     		lsls	r3, r3, #1
 7322 074e 0344     		add	r3, r3, r0
 7323 0750 1B01     		lsls	r3, r3, #4
 7324 0752 0B44     		add	r3, r3, r1
 7325 0754 03F29513 		addw	r3, r3, #405
 7326 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7327 075a 42FA03FE 		asr	lr, r2, r3
 7328 075e 2A4B     		ldr	r3, .L570+16
 7329 0760 1A69     		ldr	r2, [r3, #16]
 7330 0762 254B     		ldr	r3, .L570
 7331 0764 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 7332 0768 1846     		mov	r0, r3
 7333 076a 2349     		ldr	r1, .L570
 7334 076c 0346     		mov	r3, r0
 7335 076e 5B00     		lsls	r3, r3, #1
 7336 0770 0344     		add	r3, r3, r0
 7337 0772 1B01     		lsls	r3, r3, #4
 7338 0774 0B44     		add	r3, r3, r1
 7339 0776 03F29513 		addw	r3, r3, #405
 7340 077a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7341 077c 42FA03F3 		asr	r3, r2, r3
 7342 0780 7246     		mov	r2, lr
 7343 0782 3146     		mov	r1, r6
 7344 0784 0120     		movs	r0, #1
 7345 0786 FFF7FEFF 		bl	curr_estim
 7346 078a 0346     		mov	r3, r0
 7347 078c E31A     		subs	r3, r4, r3
 7348 078e 2249     		ldr	r1, .L570+32
 7349 0790 1846     		mov	r0, r3
 7350 0792 FFF7FEFF 		bl	filter
 7351 0796 0346     		mov	r3, r0
 7352 0798 1BB2     		sxth	r3, r3
 7353 079a 1946     		mov	r1, r3
 7354 079c 194A     		ldr	r2, .L570+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 170


 7355 079e 3423     		movs	r3, #52
 7356 07a0 03FB05F3 		mul	r3, r3, r5
 7357 07a4 1344     		add	r3, r3, r2
 7358 07a6 1033     		adds	r3, r3, #16
 7359 07a8 1960     		str	r1, [r3]
 7360              	.L446:
2122:..\src/interruptions.c ****         }
2123:..\src/interruptions.c ****     
2124:..\src/interruptions.c ****         // Check Interrupt 
2125:..\src/interruptions.c ****     
2126:..\src/interruptions.c ****         if (interrupt_flag){
 7361              		.loc 1 2126 0
 7362 07aa 1C4B     		ldr	r3, .L570+36
 7363 07ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7364 07ae 002B     		cmp	r3, #0
 7365 07b0 06D0     		beq	.L434
2127:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7366              		.loc 1 2127 0
 7367 07b2 1A4B     		ldr	r3, .L570+36
 7368 07b4 0022     		movs	r2, #0
 7369 07b6 1A70     		strb	r2, [r3]
2128:..\src/interruptions.c ****             interrupt_manager();
 7370              		.loc 1 2128 0
 7371 07b8 FFF7FEFF 		bl	interrupt_manager
 7372 07bc 00E0     		b	.L434
 7373              	.L548:
2025:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7374              		.loc 1 2025 0
 7375 07be 00BF     		nop
 7376              	.L434:
2129:..\src/interruptions.c ****         }
2130:..\src/interruptions.c **** 
2131:..\src/interruptions.c ****     }
2132:..\src/interruptions.c ****     
2133:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2134:..\src/interruptions.c ****         
2135:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2136:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7377              		.loc 1 2136 0
 7378 07c0 174B     		ldr	r3, .L570+40
 7379 07c2 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 7380 07c6 002B     		cmp	r3, #0
 7381 07c8 05D1     		bne	.L450
2137:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7382              		.loc 1 2137 0
 7383 07ca 164B     		ldr	r3, .L570+44
 7384 07cc 0022     		movs	r2, #0
 7385 07ce 1A70     		strb	r2, [r3]
2138:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7386              		.loc 1 2138 0
 7387 07d0 154B     		ldr	r3, .L570+48
 7388 07d2 0022     		movs	r2, #0
 7389 07d4 1A70     		strb	r2, [r3]
 7390              	.L450:
2139:..\src/interruptions.c ****     }
2140:..\src/interruptions.c **** 
2141:..\src/interruptions.c ****     // EMG 1 calibration state machine
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 171


2142:..\src/interruptions.c ****    
2143:..\src/interruptions.c ****     // Calibration state machine
2144:..\src/interruptions.c ****     switch(emg_1_status) {
 7391              		.loc 1 2144 0
 7392 07d6 134B     		ldr	r3, .L570+44
 7393 07d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7394 07da 032B     		cmp	r3, #3
 7395 07dc 00F2FC80 		bhi	.L549
 7396 07e0 01A2     		adr	r2, .L453
 7397 07e2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7398 07e6 00BF     		.p2align 2
 7399              	.L453:
 7400 07e8 2D080000 		.word	.L452+1
 7401 07ec DD080000 		.word	.L454+1
 7402 07f0 F3080000 		.word	.L455+1
 7403 07f4 2F090000 		.word	.L456+1
 7404              		.p2align 1
 7405              	.L571:
 7406              		.align	2
 7407              	.L570:
 7408 07f8 00000000 		.word	g_mem
 7409 07fc 00000000 		.word	ADC_buf
 7410 0800 00000000 		.word	pwm_sign
 7411 0804 00000000 		.word	g_meas
 7412 0808 00000000 		.word	g_ref
 7413 080c 00000000 		.word	filt_curr_diff
 7414 0810 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7415 0814 08000000 		.word	filt_i+8
 7416 0818 08000000 		.word	filt_curr_diff+8
 7417 081c 00000000 		.word	interrupt_flag
 7418 0820 00000000 		.word	c_mem
 7419 0824 00000000 		.word	emg_1_status
 7420 0828 00000000 		.word	emg_2_status
 7421              	.L452:
2145:..\src/interruptions.c ****         case NORMAL: // normal execution
2146:..\src/interruptions.c ****             
2147:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7422              		.loc 1 2147 0
 7423 082c AE4B     		ldr	r3, .L572
 7424 082e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7425 0832 022B     		cmp	r3, #2
 7426 0834 13D0     		beq	.L457
 7427              		.loc 1 2147 0 is_stmt 0 discriminator 1
 7428 0836 AC4B     		ldr	r3, .L572
 7429 0838 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7430 083c 032B     		cmp	r3, #3
 7431 083e 0ED0     		beq	.L457
2148:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7432              		.loc 1 2148 0 is_stmt 1
 7433 0840 AA4B     		ldr	r3, .L572+4
 7434 0842 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7435 0846 0233     		adds	r3, r3, #2
 7436 0848 A94A     		ldr	r2, .L572+8
 7437 084a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7438 084e A3F26763 		subw	r3, r3, #1639
 7439 0852 5722     		movs	r2, #87
 7440 0854 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 172


 7441 0858 5B11     		asrs	r3, r3, #5
 7442 085a 7B60     		str	r3, [r7, #4]
 7443 085c 07E0     		b	.L458
 7444              	.L457:
2149:..\src/interruptions.c ****             }
2150:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2151:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7445              		.loc 1 2151 0
 7446 085e A34B     		ldr	r3, .L572+4
 7447 0860 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7448 0864 0233     		adds	r3, r3, #2
 7449 0866 A24A     		ldr	r2, .L572+8
 7450 0868 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7451 086c 7B60     		str	r3, [r7, #4]
 7452              	.L458:
2152:..\src/interruptions.c ****             }
2153:..\src/interruptions.c ****             
2154:..\src/interruptions.c ****             if (i_aux < 0) 
 7453              		.loc 1 2154 0
 7454 086e 7B68     		ldr	r3, [r7, #4]
 7455 0870 002B     		cmp	r3, #0
 7456 0872 01DA     		bge	.L459
2155:..\src/interruptions.c ****                 i_aux = 0;
 7457              		.loc 1 2155 0
 7458 0874 0023     		movs	r3, #0
 7459 0876 7B60     		str	r3, [r7, #4]
 7460              	.L459:
2156:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7461              		.loc 1 2156 0
 7462 0878 9E49     		ldr	r1, .L572+12
 7463 087a 7868     		ldr	r0, [r7, #4]
 7464 087c FFF7FEFF 		bl	filter
 7465 0880 7860     		str	r0, [r7, #4]
2157:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7466              		.loc 1 2157 0
 7467 0882 7B68     		ldr	r3, [r7, #4]
 7468 0884 9B02     		lsls	r3, r3, #10
 7469 0886 1A46     		mov	r2, r3
 7470 0888 974B     		ldr	r3, .L572
 7471 088a D3F8F431 		ldr	r3, [r3, #500]
 7472 088e B2FBF3F3 		udiv	r3, r2, r3
 7473 0892 7B60     		str	r3, [r7, #4]
2158:..\src/interruptions.c **** 
2159:..\src/interruptions.c ****             if (interrupt_flag){
 7474              		.loc 1 2159 0
 7475 0894 984B     		ldr	r3, .L572+16
 7476 0896 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7477 0898 002B     		cmp	r3, #0
 7478 089a 04D0     		beq	.L460
2160:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7479              		.loc 1 2160 0
 7480 089c 964B     		ldr	r3, .L572+16
 7481 089e 0022     		movs	r2, #0
 7482 08a0 1A70     		strb	r2, [r3]
2161:..\src/interruptions.c ****                 interrupt_manager();
 7483              		.loc 1 2161 0
 7484 08a2 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 173


 7485              	.L460:
2162:..\src/interruptions.c ****             }
2163:..\src/interruptions.c ****             //Saturation
2164:..\src/interruptions.c ****             if (i_aux < 0)
 7486              		.loc 1 2164 0
 7487 08a6 7B68     		ldr	r3, [r7, #4]
 7488 08a8 002B     		cmp	r3, #0
 7489 08aa 02DA     		bge	.L461
2165:..\src/interruptions.c ****                 i_aux = 0;
 7490              		.loc 1 2165 0
 7491 08ac 0023     		movs	r3, #0
 7492 08ae 7B60     		str	r3, [r7, #4]
 7493 08b0 06E0     		b	.L462
 7494              	.L461:
2166:..\src/interruptions.c ****             else 
2167:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7495              		.loc 1 2167 0
 7496 08b2 7B68     		ldr	r3, [r7, #4]
 7497 08b4 B3F5806F 		cmp	r3, #1024
 7498 08b8 02DD     		ble	.L462
2168:..\src/interruptions.c ****                     i_aux = 1024;
 7499              		.loc 1 2168 0
 7500 08ba 4FF48063 		mov	r3, #1024
 7501 08be 7B60     		str	r3, [r7, #4]
 7502              	.L462:
2169:..\src/interruptions.c ****             
2170:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7503              		.loc 1 2170 0
 7504 08c0 8E4A     		ldr	r2, .L572+20
 7505 08c2 7B68     		ldr	r3, [r7, #4]
 7506 08c4 1360     		str	r3, [r2]
2171:..\src/interruptions.c **** 
2172:..\src/interruptions.c ****             if (interrupt_flag){
 7507              		.loc 1 2172 0
 7508 08c6 8C4B     		ldr	r3, .L572+16
 7509 08c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7510 08ca 002B     		cmp	r3, #0
 7511 08cc 00F08680 		beq	.L550
2173:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7512              		.loc 1 2173 0
 7513 08d0 894B     		ldr	r3, .L572+16
 7514 08d2 0022     		movs	r2, #0
 7515 08d4 1A70     		strb	r2, [r3]
2174:..\src/interruptions.c ****                 interrupt_manager();
 7516              		.loc 1 2174 0
 7517 08d6 FFF7FEFF 		bl	interrupt_manager
2175:..\src/interruptions.c ****             }
2176:..\src/interruptions.c ****             
2177:..\src/interruptions.c ****             break;
 7518              		.loc 1 2177 0
 7519 08da 7FE0     		b	.L550
 7520              	.L454:
2178:..\src/interruptions.c **** 
2179:..\src/interruptions.c ****         case RESET: // reset variables
2180:..\src/interruptions.c ****             emg_counter_1 = 0;
 7521              		.loc 1 2180 0
 7522 08dc 884B     		ldr	r3, .L572+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 174


 7523 08de 0022     		movs	r2, #0
 7524 08e0 1A80     		strh	r2, [r3]	@ movhi
2181:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7525              		.loc 1 2181 0
 7526 08e2 814B     		ldr	r3, .L572
 7527 08e4 0022     		movs	r2, #0
 7528 08e6 C3F8F421 		str	r2, [r3, #500]
2182:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7529              		.loc 1 2182 0
 7530 08ea 864B     		ldr	r3, .L572+28
 7531 08ec 0222     		movs	r2, #2
 7532 08ee 1A70     		strb	r2, [r3]
2183:..\src/interruptions.c ****             break;
 7533              		.loc 1 2183 0
 7534 08f0 79E0     		b	.L464
 7535              	.L455:
2184:..\src/interruptions.c **** 
2185:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2186:..\src/interruptions.c ****             emg_counter_1++;
 7536              		.loc 1 2186 0
 7537 08f2 834B     		ldr	r3, .L572+24
 7538 08f4 1B88     		ldrh	r3, [r3]
 7539 08f6 0133     		adds	r3, r3, #1
 7540 08f8 9AB2     		uxth	r2, r3
 7541 08fa 814B     		ldr	r3, .L572+24
 7542 08fc 1A80     		strh	r2, [r3]	@ movhi
2187:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7543              		.loc 1 2187 0
 7544 08fe 804B     		ldr	r3, .L572+24
 7545 0900 1B88     		ldrh	r3, [r3]
 7546 0902 B3F5FA7F 		cmp	r3, #500
 7547 0906 6BD1     		bne	.L551
2188:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7548              		.loc 1 2188 0
 7549 0908 7D4B     		ldr	r3, .L572+24
 7550 090a 0022     		movs	r2, #0
 7551 090c 1A80     		strh	r2, [r3]	@ movhi
2189:..\src/interruptions.c ****                 LED_control(1);
 7552              		.loc 1 2189 0
 7553 090e 0120     		movs	r0, #1
 7554 0910 FFF7FEFF 		bl	LED_control
2190:..\src/interruptions.c **** 				
2191:..\src/interruptions.c ****                 if (interrupt_flag){
 7555              		.loc 1 2191 0
 7556 0914 784B     		ldr	r3, .L572+16
 7557 0916 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7558 0918 002B     		cmp	r3, #0
 7559 091a 04D0     		beq	.L466
2192:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7560              		.loc 1 2192 0
 7561 091c 764B     		ldr	r3, .L572+16
 7562 091e 0022     		movs	r2, #0
 7563 0920 1A70     		strb	r2, [r3]
2193:..\src/interruptions.c ****                     interrupt_manager();
 7564              		.loc 1 2193 0
 7565 0922 FFF7FEFF 		bl	interrupt_manager
 7566              	.L466:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 175


2194:..\src/interruptions.c ****                 }
2195:..\src/interruptions.c ****                 
2196:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7567              		.loc 1 2196 0
 7568 0926 774B     		ldr	r3, .L572+28
 7569 0928 0322     		movs	r2, #3
 7570 092a 1A70     		strb	r2, [r3]
2197:..\src/interruptions.c ****             }
2198:..\src/interruptions.c ****             break;
 7571              		.loc 1 2198 0
 7572 092c 58E0     		b	.L551
 7573              	.L456:
2199:..\src/interruptions.c **** 
2200:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2201:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2202:..\src/interruptions.c ****             emg_counter_1++;
 7574              		.loc 1 2202 0
 7575 092e 744B     		ldr	r3, .L572+24
 7576 0930 1B88     		ldrh	r3, [r3]
 7577 0932 0133     		adds	r3, r3, #1
 7578 0934 9AB2     		uxth	r2, r3
 7579 0936 724B     		ldr	r3, .L572+24
 7580 0938 1A80     		strh	r2, [r3]	@ movhi
2203:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7581              		.loc 1 2203 0
 7582 093a 6C4B     		ldr	r3, .L572+4
 7583 093c 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7584 0940 0233     		adds	r3, r3, #2
 7585 0942 6B4A     		ldr	r2, .L572+8
 7586 0944 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7587 0948 002B     		cmp	r3, #0
 7588 094a 07DA     		bge	.L467
2204:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7589              		.loc 1 2204 0
 7590 094c 674B     		ldr	r3, .L572+4
 7591 094e 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7592 0952 0233     		adds	r3, r3, #2
 7593 0954 664A     		ldr	r2, .L572+8
 7594 0956 0021     		movs	r1, #0
 7595 0958 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7596              	.L467:
2205:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7597              		.loc 1 2205 0
 7598 095c 634B     		ldr	r3, .L572+4
 7599 095e 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7600 0962 0233     		adds	r3, r3, #2
 7601 0964 624A     		ldr	r2, .L572+8
 7602 0966 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7603 096a 6249     		ldr	r1, .L572+12
 7604 096c 1846     		mov	r0, r3
 7605 096e FFF7FEFF 		bl	filter
 7606 0972 0246     		mov	r2, r0
 7607 0974 5C4B     		ldr	r3, .L572
 7608 0976 D3F8F431 		ldr	r3, [r3, #500]
 7609 097a 1344     		add	r3, r3, r2
 7610 097c 5A4A     		ldr	r2, .L572
 7611 097e C2F8F431 		str	r3, [r2, #500]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 176


2206:..\src/interruptions.c ****             
2207:..\src/interruptions.c ****             if (interrupt_flag){
 7612              		.loc 1 2207 0
 7613 0982 5D4B     		ldr	r3, .L572+16
 7614 0984 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7615 0986 002B     		cmp	r3, #0
 7616 0988 04D0     		beq	.L468
2208:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7617              		.loc 1 2208 0
 7618 098a 5B4B     		ldr	r3, .L572+16
 7619 098c 0022     		movs	r2, #0
 7620 098e 1A70     		strb	r2, [r3]
2209:..\src/interruptions.c ****                 interrupt_manager();
 7621              		.loc 1 2209 0
 7622 0990 FFF7FEFF 		bl	interrupt_manager
 7623              	.L468:
2210:..\src/interruptions.c ****             }
2211:..\src/interruptions.c ****             
2212:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7624              		.loc 1 2212 0
 7625 0994 5A4B     		ldr	r3, .L572+24
 7626 0996 1B88     		ldrh	r3, [r3]
 7627 0998 B3F57A7F 		cmp	r3, #1000
 7628 099c 22D1     		bne	.L552
2213:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7629              		.loc 1 2213 0
 7630 099e 524B     		ldr	r3, .L572
 7631 09a0 D3F8F431 		ldr	r3, [r3, #500]
 7632 09a4 584A     		ldr	r2, .L572+32
 7633 09a6 A2FB0323 		umull	r2, r3, r2, r3
 7634 09aa 9B09     		lsrs	r3, r3, #6
 7635 09ac 4E4A     		ldr	r2, .L572
 7636 09ae C2F8F431 		str	r3, [r2, #500]
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****                 if (interrupt_flag){
 7637              		.loc 1 2215 0
 7638 09b2 514B     		ldr	r3, .L572+16
 7639 09b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7640 09b6 002B     		cmp	r3, #0
 7641 09b8 04D0     		beq	.L470
2216:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7642              		.loc 1 2216 0
 7643 09ba 4F4B     		ldr	r3, .L572+16
 7644 09bc 0022     		movs	r2, #0
 7645 09be 1A70     		strb	r2, [r3]
2217:..\src/interruptions.c ****                     interrupt_manager();
 7646              		.loc 1 2217 0
 7647 09c0 FFF7FEFF 		bl	interrupt_manager
 7648              	.L470:
2218:..\src/interruptions.c ****                 }                    
2219:..\src/interruptions.c ****                 
2220:..\src/interruptions.c ****                 LED_control(0);
 7649              		.loc 1 2220 0
 7650 09c4 0020     		movs	r0, #0
 7651 09c6 FFF7FEFF 		bl	LED_control
2221:..\src/interruptions.c **** 				
2222:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 177


 7652              		.loc 1 2222 0
 7653 09ca 4D4B     		ldr	r3, .L572+24
 7654 09cc 0022     		movs	r2, #0
 7655 09ce 1A80     		strh	r2, [r3]	@ movhi
2223:..\src/interruptions.c **** 
2224:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7656              		.loc 1 2224 0
 7657 09d0 4C4B     		ldr	r3, .L572+28
 7658 09d2 0022     		movs	r2, #0
 7659 09d4 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****             }
2226:..\src/interruptions.c ****             break;
 7660              		.loc 1 2226 0
 7661 09d6 05E0     		b	.L552
 7662              	.L549:
2227:..\src/interruptions.c **** 
2228:..\src/interruptions.c ****         default:
2229:..\src/interruptions.c ****             break;
 7663              		.loc 1 2229 0
 7664 09d8 00BF     		nop
 7665 09da 04E0     		b	.L464
 7666              	.L550:
2177:..\src/interruptions.c **** 
 7667              		.loc 1 2177 0
 7668 09dc 00BF     		nop
 7669 09de 02E0     		b	.L464
 7670              	.L551:
2198:..\src/interruptions.c **** 
 7671              		.loc 1 2198 0
 7672 09e0 00BF     		nop
 7673 09e2 00E0     		b	.L464
 7674              	.L552:
2226:..\src/interruptions.c **** 
 7675              		.loc 1 2226 0
 7676 09e4 00BF     		nop
 7677              	.L464:
2230:..\src/interruptions.c ****     }
2231:..\src/interruptions.c **** 
2232:..\src/interruptions.c ****     if (interrupt_flag){
 7678              		.loc 1 2232 0
 7679 09e6 444B     		ldr	r3, .L572+16
 7680 09e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7681 09ea 002B     		cmp	r3, #0
 7682 09ec 04D0     		beq	.L471
2233:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7683              		.loc 1 2233 0
 7684 09ee 424B     		ldr	r3, .L572+16
 7685 09f0 0022     		movs	r2, #0
 7686 09f2 1A70     		strb	r2, [r3]
2234:..\src/interruptions.c ****         interrupt_manager();
 7687              		.loc 1 2234 0
 7688 09f4 FFF7FEFF 		bl	interrupt_manager
 7689              	.L471:
2235:..\src/interruptions.c ****     }
2236:..\src/interruptions.c ****     // EMG 2 calibration state machine
2237:..\src/interruptions.c ****     switch(emg_2_status) {
 7690              		.loc 1 2237 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 178


 7691 09f8 444B     		ldr	r3, .L572+36
 7692 09fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7693 09fc 052B     		cmp	r3, #5
 7694 09fe 00F2C881 		bhi	.L553
 7695 0a02 01A2     		adr	r2, .L474
 7696 0a04 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7697              		.p2align 2
 7698              	.L474:
 7699 0a08 210A0000 		.word	.L473+1
 7700 0a0c C10A0000 		.word	.L475+1
 7701 0a10 190B0000 		.word	.L476+1
 7702 0a14 570B0000 		.word	.L477+1
 7703 0a18 090C0000 		.word	.L478+1
 7704 0a1c 1B0C0000 		.word	.L479+1
 7705              		.p2align 1
 7706              	.L473:
2238:..\src/interruptions.c ****         case NORMAL: // normal execution
2239:..\src/interruptions.c ****         
2240:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7707              		.loc 1 2240 0
 7708 0a20 314B     		ldr	r3, .L572
 7709 0a22 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7710 0a26 022B     		cmp	r3, #2
 7711 0a28 14D0     		beq	.L480
 7712              		.loc 1 2240 0 is_stmt 0 discriminator 1
 7713 0a2a 2F4B     		ldr	r3, .L572
 7714 0a2c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7715 0a30 032B     		cmp	r3, #3
 7716 0a32 0FD0     		beq	.L480
2241:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7717              		.loc 1 2241 0 is_stmt 1
 7718 0a34 2D4B     		ldr	r3, .L572+4
 7719 0a36 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7720 0a3a C3F10303 		rsb	r3, r3, #3
 7721 0a3e 2C4A     		ldr	r2, .L572+8
 7722 0a40 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7723 0a44 A3F26763 		subw	r3, r3, #1639
 7724 0a48 5722     		movs	r2, #87
 7725 0a4a 02FB03F3 		mul	r3, r2, r3
 7726 0a4e 5B11     		asrs	r3, r3, #5
 7727 0a50 7B60     		str	r3, [r7, #4]
 7728 0a52 08E0     		b	.L481
 7729              	.L480:
2242:..\src/interruptions.c ****             }
2243:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2244:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7730              		.loc 1 2244 0
 7731 0a54 254B     		ldr	r3, .L572+4
 7732 0a56 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7733 0a5a C3F10303 		rsb	r3, r3, #3
 7734 0a5e 244A     		ldr	r2, .L572+8
 7735 0a60 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7736 0a64 7B60     		str	r3, [r7, #4]
 7737              	.L481:
2245:..\src/interruptions.c ****             }
2246:..\src/interruptions.c **** 
2247:..\src/interruptions.c ****             if (i_aux < 0)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 179


 7738              		.loc 1 2247 0
 7739 0a66 7B68     		ldr	r3, [r7, #4]
 7740 0a68 002B     		cmp	r3, #0
 7741 0a6a 01DA     		bge	.L482
2248:..\src/interruptions.c ****                 i_aux = 0;
 7742              		.loc 1 2248 0
 7743 0a6c 0023     		movs	r3, #0
 7744 0a6e 7B60     		str	r3, [r7, #4]
 7745              	.L482:
2249:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7746              		.loc 1 2249 0
 7747 0a70 2749     		ldr	r1, .L572+40
 7748 0a72 7868     		ldr	r0, [r7, #4]
 7749 0a74 FFF7FEFF 		bl	filter
 7750 0a78 7860     		str	r0, [r7, #4]
2250:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7751              		.loc 1 2250 0
 7752 0a7a 7B68     		ldr	r3, [r7, #4]
 7753 0a7c 9B02     		lsls	r3, r3, #10
 7754 0a7e 1A46     		mov	r2, r3
 7755 0a80 194B     		ldr	r3, .L572
 7756 0a82 D3F8F831 		ldr	r3, [r3, #504]
 7757 0a86 B2FBF3F3 		udiv	r3, r2, r3
 7758 0a8a 7B60     		str	r3, [r7, #4]
2251:..\src/interruptions.c **** 
2252:..\src/interruptions.c ****             if (interrupt_flag){
 7759              		.loc 1 2252 0
 7760 0a8c 1A4B     		ldr	r3, .L572+16
 7761 0a8e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7762 0a90 002B     		cmp	r3, #0
 7763 0a92 04D0     		beq	.L483
2253:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7764              		.loc 1 2253 0
 7765 0a94 184B     		ldr	r3, .L572+16
 7766 0a96 0022     		movs	r2, #0
 7767 0a98 1A70     		strb	r2, [r3]
2254:..\src/interruptions.c ****                 interrupt_manager();
 7768              		.loc 1 2254 0
 7769 0a9a FFF7FEFF 		bl	interrupt_manager
 7770              	.L483:
2255:..\src/interruptions.c ****             }
2256:..\src/interruptions.c ****             
2257:..\src/interruptions.c ****             if (i_aux < 0) 
 7771              		.loc 1 2257 0
 7772 0a9e 7B68     		ldr	r3, [r7, #4]
 7773 0aa0 002B     		cmp	r3, #0
 7774 0aa2 02DA     		bge	.L484
2258:..\src/interruptions.c ****                 i_aux = 0;
 7775              		.loc 1 2258 0
 7776 0aa4 0023     		movs	r3, #0
 7777 0aa6 7B60     		str	r3, [r7, #4]
 7778 0aa8 06E0     		b	.L485
 7779              	.L484:
2259:..\src/interruptions.c ****             else 
2260:..\src/interruptions.c ****                 if (i_aux > 1024)
 7780              		.loc 1 2260 0
 7781 0aaa 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 180


 7782 0aac B3F5806F 		cmp	r3, #1024
 7783 0ab0 02DD     		ble	.L485
2261:..\src/interruptions.c ****                     i_aux = 1024;
 7784              		.loc 1 2261 0
 7785 0ab2 4FF48063 		mov	r3, #1024
 7786 0ab6 7B60     		str	r3, [r7, #4]
 7787              	.L485:
2262:..\src/interruptions.c ****             
2263:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7788              		.loc 1 2263 0
 7789 0ab8 104A     		ldr	r2, .L572+20
 7790 0aba 7B68     		ldr	r3, [r7, #4]
 7791 0abc 5360     		str	r3, [r2, #4]
2264:..\src/interruptions.c **** 
2265:..\src/interruptions.c ****             break;
 7792              		.loc 1 2265 0
 7793 0abe 8AE1     		b	.L486
 7794              	.L475:
2266:..\src/interruptions.c **** 
2267:..\src/interruptions.c ****         case RESET: // reset variables
2268:..\src/interruptions.c ****             emg_counter_2 = 0;
 7795              		.loc 1 2268 0
 7796 0ac0 144B     		ldr	r3, .L572+44
 7797 0ac2 0022     		movs	r2, #0
 7798 0ac4 1A80     		strh	r2, [r3]	@ movhi
2269:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7799              		.loc 1 2269 0
 7800 0ac6 084B     		ldr	r3, .L572
 7801 0ac8 0022     		movs	r2, #0
 7802 0aca C3F8F821 		str	r2, [r3, #504]
2270:..\src/interruptions.c **** 
2271:..\src/interruptions.c ****             if (interrupt_flag){
 7803              		.loc 1 2271 0
 7804 0ace 0A4B     		ldr	r3, .L572+16
 7805 0ad0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7806 0ad2 002B     		cmp	r3, #0
 7807 0ad4 04D0     		beq	.L487
2272:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7808              		.loc 1 2272 0
 7809 0ad6 084B     		ldr	r3, .L572+16
 7810 0ad8 0022     		movs	r2, #0
 7811 0ada 1A70     		strb	r2, [r3]
2273:..\src/interruptions.c ****                 interrupt_manager();
 7812              		.loc 1 2273 0
 7813 0adc FFF7FEFF 		bl	interrupt_manager
 7814              	.L487:
2274:..\src/interruptions.c ****             }
2275:..\src/interruptions.c ****             
2276:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7815              		.loc 1 2276 0
 7816 0ae0 0A4B     		ldr	r3, .L572+36
 7817 0ae2 0422     		movs	r2, #4
 7818 0ae4 1A70     		strb	r2, [r3]
2277:..\src/interruptions.c ****             break;
 7819              		.loc 1 2277 0
 7820 0ae6 76E1     		b	.L486
 7821              	.L573:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 181


 7822              		.align	2
 7823              	.L572:
 7824 0ae8 00000000 		.word	g_mem
 7825 0aec 00000000 		.word	c_mem
 7826 0af0 00000000 		.word	ADC_buf
 7827 0af4 00000000 		.word	filt_emg
 7828 0af8 00000000 		.word	interrupt_flag
 7829 0afc 00000000 		.word	g_adc_meas
 7830 0b00 78010000 		.word	emg_counter_1.10660
 7831 0b04 00000000 		.word	emg_1_status
 7832 0b08 D34D6210 		.word	274877907
 7833 0b0c 00000000 		.word	emg_2_status
 7834 0b10 08000000 		.word	filt_emg+8
 7835 0b14 7A010000 		.word	emg_counter_2.10661
 7836              	.L476:
2278:..\src/interruptions.c **** 
2279:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2280:..\src/interruptions.c ****             emg_counter_2++;
 7837              		.loc 1 2280 0
 7838 0b18 A24B     		ldr	r3, .L574
 7839 0b1a 1B88     		ldrh	r3, [r3]
 7840 0b1c 0133     		adds	r3, r3, #1
 7841 0b1e 9AB2     		uxth	r2, r3
 7842 0b20 A04B     		ldr	r3, .L574
 7843 0b22 1A80     		strh	r2, [r3]	@ movhi
2281:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7844              		.loc 1 2281 0
 7845 0b24 9F4B     		ldr	r3, .L574
 7846 0b26 1B88     		ldrh	r3, [r3]
 7847 0b28 B3F5FA7F 		cmp	r3, #500
 7848 0b2c 40F03381 		bne	.L554
2282:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7849              		.loc 1 2282 0
 7850 0b30 9C4B     		ldr	r3, .L574
 7851 0b32 0022     		movs	r2, #0
 7852 0b34 1A80     		strh	r2, [r3]	@ movhi
2283:..\src/interruptions.c ****                 LED_control(1);
 7853              		.loc 1 2283 0
 7854 0b36 0120     		movs	r0, #1
 7855 0b38 FFF7FEFF 		bl	LED_control
2284:..\src/interruptions.c **** 
2285:..\src/interruptions.c ****                 if (interrupt_flag){
 7856              		.loc 1 2285 0
 7857 0b3c 9A4B     		ldr	r3, .L574+4
 7858 0b3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7859 0b40 002B     		cmp	r3, #0
 7860 0b42 04D0     		beq	.L489
2286:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7861              		.loc 1 2286 0
 7862 0b44 984B     		ldr	r3, .L574+4
 7863 0b46 0022     		movs	r2, #0
 7864 0b48 1A70     		strb	r2, [r3]
2287:..\src/interruptions.c ****                     interrupt_manager();
 7865              		.loc 1 2287 0
 7866 0b4a FFF7FEFF 		bl	interrupt_manager
 7867              	.L489:
2288:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 182


2289:..\src/interruptions.c ****                 
2290:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7868              		.loc 1 2290 0
 7869 0b4e 974B     		ldr	r3, .L574+8
 7870 0b50 0322     		movs	r2, #3
 7871 0b52 1A70     		strb	r2, [r3]
2291:..\src/interruptions.c ****             }
2292:..\src/interruptions.c ****             break;
 7872              		.loc 1 2292 0
 7873 0b54 1FE1     		b	.L554
 7874              	.L477:
2293:..\src/interruptions.c **** 
2294:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2295:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2296:..\src/interruptions.c ****             emg_counter_2++;
 7875              		.loc 1 2296 0
 7876 0b56 934B     		ldr	r3, .L574
 7877 0b58 1B88     		ldrh	r3, [r3]
 7878 0b5a 0133     		adds	r3, r3, #1
 7879 0b5c 9AB2     		uxth	r2, r3
 7880 0b5e 914B     		ldr	r3, .L574
 7881 0b60 1A80     		strh	r2, [r3]	@ movhi
2297:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7882              		.loc 1 2297 0
 7883 0b62 934B     		ldr	r3, .L574+12
 7884 0b64 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7885 0b68 C3F10303 		rsb	r3, r3, #3
 7886 0b6c 914A     		ldr	r2, .L574+16
 7887 0b6e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7888 0b72 002B     		cmp	r3, #0
 7889 0b74 08DA     		bge	.L490
2298:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7890              		.loc 1 2298 0
 7891 0b76 8E4B     		ldr	r3, .L574+12
 7892 0b78 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7893 0b7c C3F10303 		rsb	r3, r3, #3
 7894 0b80 8C4A     		ldr	r2, .L574+16
 7895 0b82 0021     		movs	r1, #0
 7896 0b84 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7897              	.L490:
2299:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7898              		.loc 1 2299 0
 7899 0b88 894B     		ldr	r3, .L574+12
 7900 0b8a 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7901 0b8e C3F10303 		rsb	r3, r3, #3
 7902 0b92 884A     		ldr	r2, .L574+16
 7903 0b94 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7904 0b98 8749     		ldr	r1, .L574+20
 7905 0b9a 1846     		mov	r0, r3
 7906 0b9c FFF7FEFF 		bl	filter
 7907 0ba0 0246     		mov	r2, r0
 7908 0ba2 864B     		ldr	r3, .L574+24
 7909 0ba4 D3F8F831 		ldr	r3, [r3, #504]
 7910 0ba8 1344     		add	r3, r3, r2
 7911 0baa 844A     		ldr	r2, .L574+24
 7912 0bac C2F8F831 		str	r3, [r2, #504]
2300:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 183


2301:..\src/interruptions.c ****             if (interrupt_flag){
 7913              		.loc 1 2301 0
 7914 0bb0 7D4B     		ldr	r3, .L574+4
 7915 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7916 0bb4 002B     		cmp	r3, #0
 7917 0bb6 04D0     		beq	.L491
2302:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7918              		.loc 1 2302 0
 7919 0bb8 7B4B     		ldr	r3, .L574+4
 7920 0bba 0022     		movs	r2, #0
 7921 0bbc 1A70     		strb	r2, [r3]
2303:..\src/interruptions.c ****                 interrupt_manager();
 7922              		.loc 1 2303 0
 7923 0bbe FFF7FEFF 		bl	interrupt_manager
 7924              	.L491:
2304:..\src/interruptions.c ****             }
2305:..\src/interruptions.c ****             
2306:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7925              		.loc 1 2306 0
 7926 0bc2 784B     		ldr	r3, .L574
 7927 0bc4 1B88     		ldrh	r3, [r3]
 7928 0bc6 B3F57A7F 		cmp	r3, #1000
 7929 0bca 40F0E680 		bne	.L555
2307:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7930              		.loc 1 2307 0
 7931 0bce 7B4B     		ldr	r3, .L574+24
 7932 0bd0 D3F8F831 		ldr	r3, [r3, #504]
 7933 0bd4 7A4A     		ldr	r2, .L574+28
 7934 0bd6 A2FB0323 		umull	r2, r3, r2, r3
 7935 0bda 9B09     		lsrs	r3, r3, #6
 7936 0bdc 774A     		ldr	r2, .L574+24
 7937 0bde C2F8F831 		str	r3, [r2, #504]
2308:..\src/interruptions.c ****                 LED_control(0);
 7938              		.loc 1 2308 0
 7939 0be2 0020     		movs	r0, #0
 7940 0be4 FFF7FEFF 		bl	LED_control
2309:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7941              		.loc 1 2309 0
 7942 0be8 6E4B     		ldr	r3, .L574
 7943 0bea 0022     		movs	r2, #0
 7944 0bec 1A80     		strh	r2, [r3]	@ movhi
2310:..\src/interruptions.c ****             
2311:..\src/interruptions.c ****                 if (interrupt_flag){
 7945              		.loc 1 2311 0
 7946 0bee 6E4B     		ldr	r3, .L574+4
 7947 0bf0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7948 0bf2 002B     		cmp	r3, #0
 7949 0bf4 04D0     		beq	.L493
2312:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7950              		.loc 1 2312 0
 7951 0bf6 6C4B     		ldr	r3, .L574+4
 7952 0bf8 0022     		movs	r2, #0
 7953 0bfa 1A70     		strb	r2, [r3]
2313:..\src/interruptions.c ****                     interrupt_manager();
 7954              		.loc 1 2313 0
 7955 0bfc FFF7FEFF 		bl	interrupt_manager
 7956              	.L493:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 184


2314:..\src/interruptions.c ****                 }
2315:..\src/interruptions.c ****                 
2316:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7957              		.loc 1 2316 0
 7958 0c00 6A4B     		ldr	r3, .L574+8
 7959 0c02 0522     		movs	r2, #5
 7960 0c04 1A70     		strb	r2, [r3]
2317:..\src/interruptions.c ****             }
2318:..\src/interruptions.c ****             break;
 7961              		.loc 1 2318 0
 7962 0c06 C8E0     		b	.L555
 7963              	.L478:
2319:..\src/interruptions.c **** 
2320:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2321:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7964              		.loc 1 2321 0
 7965 0c08 6E4B     		ldr	r3, .L574+32
 7966 0c0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7967 0c0c 002B     		cmp	r3, #0
 7968 0c0e 40F0C680 		bne	.L556
2322:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7969              		.loc 1 2322 0
 7970 0c12 664B     		ldr	r3, .L574+8
 7971 0c14 0222     		movs	r2, #2
 7972 0c16 1A70     		strb	r2, [r3]
2323:..\src/interruptions.c ****             break;
 7973              		.loc 1 2323 0
 7974 0c18 C1E0     		b	.L556
 7975              	.L479:
2324:..\src/interruptions.c **** 
2325:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2326:..\src/interruptions.c ****             emg_counter_2++;
 7976              		.loc 1 2326 0
 7977 0c1a 624B     		ldr	r3, .L574
 7978 0c1c 1B88     		ldrh	r3, [r3]
 7979 0c1e 0133     		adds	r3, r3, #1
 7980 0c20 9AB2     		uxth	r2, r3
 7981 0c22 604B     		ldr	r3, .L574
 7982 0c24 1A80     		strh	r2, [r3]	@ movhi
2327:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7983              		.loc 1 2327 0
 7984 0c26 5F4B     		ldr	r3, .L574
 7985 0c28 1B88     		ldrh	r3, [r3]
 7986 0c2a B3F5FA7F 		cmp	r3, #500
 7987 0c2e 40F0D180 		bne	.L557
2328:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7988              		.loc 1 2328 0
 7989 0c32 5C4B     		ldr	r3, .L574
 7990 0c34 0022     		movs	r2, #0
 7991 0c36 1A80     		strh	r2, [r3]	@ movhi
2329:..\src/interruptions.c ****                 
2330:..\src/interruptions.c ****                 if (interrupt_flag){
 7992              		.loc 1 2330 0
 7993 0c38 5B4B     		ldr	r3, .L574+4
 7994 0c3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7995 0c3c 002B     		cmp	r3, #0
 7996 0c3e 04D0     		beq	.L496
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 185


2331:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7997              		.loc 1 2331 0
 7998 0c40 594B     		ldr	r3, .L574+4
 7999 0c42 0022     		movs	r2, #0
 8000 0c44 1A70     		strb	r2, [r3]
2332:..\src/interruptions.c ****                     interrupt_manager();
 8001              		.loc 1 2332 0
 8002 0c46 FFF7FEFF 		bl	interrupt_manager
 8003              	.L496:
2333:..\src/interruptions.c ****                 }
2334:..\src/interruptions.c ****                 
2335:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 8004              		.loc 1 2335 0
 8005 0c4a 5F4B     		ldr	r3, .L574+36
 8006 0c4c 0022     		movs	r2, #0
 8007 0c4e 1A70     		strb	r2, [r3]
 8008 0c50 93E0     		b	.L497
 8009              	.L501:
2336:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8010              		.loc 1 2336 0
 8011 0c52 5D4B     		ldr	r3, .L574+36
 8012 0c54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8013 0c56 1946     		mov	r1, r3
 8014 0c58 554A     		ldr	r2, .L574+12
 8015 0c5a 0B46     		mov	r3, r1
 8016 0c5c DB00     		lsls	r3, r3, #3
 8017 0c5e 5B1A     		subs	r3, r3, r1
 8018 0c60 1B01     		lsls	r3, r3, #4
 8019 0c62 1344     		add	r3, r3, r2
 8020 0c64 03F58773 		add	r3, r3, #270
 8021 0c68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8022 0c6a 022B     		cmp	r3, #2
 8023 0c6c 37D0     		beq	.L498
2337:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8024              		.loc 1 2337 0 discriminator 1
 8025 0c6e 564B     		ldr	r3, .L574+36
 8026 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8027 0c72 1946     		mov	r1, r3
 8028 0c74 4E4A     		ldr	r2, .L574+12
 8029 0c76 0B46     		mov	r3, r1
 8030 0c78 DB00     		lsls	r3, r3, #3
 8031 0c7a 5B1A     		subs	r3, r3, r1
 8032 0c7c 1B01     		lsls	r3, r3, #4
 8033 0c7e 1344     		add	r3, r3, r2
 8034 0c80 03F58773 		add	r3, r3, #270
 8035 0c84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2336:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8036              		.loc 1 2336 0 discriminator 1
 8037 0c86 032B     		cmp	r3, #3
 8038 0c88 29D0     		beq	.L498
2338:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8039              		.loc 1 2338 0
 8040 0c8a 4F4B     		ldr	r3, .L574+36
 8041 0c8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8042 0c8e 1946     		mov	r1, r3
 8043 0c90 474A     		ldr	r2, .L574+12
 8044 0c92 0B46     		mov	r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 186


 8045 0c94 DB00     		lsls	r3, r3, #3
 8046 0c96 5B1A     		subs	r3, r3, r1
 8047 0c98 1B01     		lsls	r3, r3, #4
 8048 0c9a 1344     		add	r3, r3, r2
 8049 0c9c 03F58773 		add	r3, r3, #270
 8050 0ca0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2337:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8051              		.loc 1 2337 0
 8052 0ca2 042B     		cmp	r3, #4
 8053 0ca4 1BD0     		beq	.L498
2339:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8054              		.loc 1 2339 0
 8055 0ca6 484B     		ldr	r3, .L574+36
 8056 0ca8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8057 0caa 1946     		mov	r1, r3
 8058 0cac 404A     		ldr	r2, .L574+12
 8059 0cae 0B46     		mov	r3, r1
 8060 0cb0 DB00     		lsls	r3, r3, #3
 8061 0cb2 5B1A     		subs	r3, r3, r1
 8062 0cb4 1B01     		lsls	r3, r3, #4
 8063 0cb6 1344     		add	r3, r3, r2
 8064 0cb8 03F58773 		add	r3, r3, #270
 8065 0cbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2338:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8066              		.loc 1 2338 0
 8067 0cbe 052B     		cmp	r3, #5
 8068 0cc0 0DD0     		beq	.L498
2340:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 8069              		.loc 1 2340 0
 8070 0cc2 414B     		ldr	r3, .L574+36
 8071 0cc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8072 0cc6 1946     		mov	r1, r3
 8073 0cc8 394A     		ldr	r2, .L574+12
 8074 0cca 0B46     		mov	r3, r1
 8075 0ccc DB00     		lsls	r3, r3, #3
 8076 0cce 5B1A     		subs	r3, r3, r1
 8077 0cd0 1B01     		lsls	r3, r3, #4
 8078 0cd2 1344     		add	r3, r3, r2
 8079 0cd4 03F58773 		add	r3, r3, #270
 8080 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2339:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8081              		.loc 1 2339 0
 8082 0cda 072B     		cmp	r3, #7
 8083 0cdc 47D1     		bne	.L499
 8084              	.L498:
2341:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 8085              		.loc 1 2341 0
 8086 0cde 3A4B     		ldr	r3, .L574+36
 8087 0ce0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8088 0ce2 1946     		mov	r1, r3
 8089 0ce4 324A     		ldr	r2, .L574+12
 8090 0ce6 0B46     		mov	r3, r1
 8091 0ce8 DB00     		lsls	r3, r3, #3
 8092 0cea 5B1A     		subs	r3, r3, r1
 8093 0cec 1B01     		lsls	r3, r3, #4
 8094 0cee 1344     		add	r3, r3, r2
 8095 0cf0 03F20F13 		addw	r3, r3, #271
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 187


 8096 0cf4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8097 0cf6 002B     		cmp	r3, #0
 8098 0cf8 19D1     		bne	.L500
2342:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 8099              		.loc 1 2342 0
 8100 0cfa 334B     		ldr	r3, .L574+36
 8101 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8102 0cfe 1846     		mov	r0, r3
 8103 0d00 314B     		ldr	r3, .L574+36
 8104 0d02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8105 0d04 1946     		mov	r1, r3
 8106 0d06 2D4A     		ldr	r2, .L574+24
 8107 0d08 0B46     		mov	r3, r1
 8108 0d0a DB00     		lsls	r3, r3, #3
 8109 0d0c 5B1A     		subs	r3, r3, r1
 8110 0d0e 1B01     		lsls	r3, r3, #4
 8111 0d10 1344     		add	r3, r3, r2
 8112 0d12 03F58873 		add	r3, r3, #272
 8113 0d16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8114 0d18 1946     		mov	r1, r3
 8115 0d1a 2C4A     		ldr	r2, .L574+40
 8116 0d1c 3423     		movs	r3, #52
 8117 0d1e 03FB01F3 		mul	r3, r3, r1
 8118 0d22 1344     		add	r3, r3, r2
 8119 0d24 1A68     		ldr	r2, [r3]
 8120 0d26 2A49     		ldr	r1, .L574+44
 8121 0d28 0301     		lsls	r3, r0, #4
 8122 0d2a 0B44     		add	r3, r3, r1
 8123 0d2c 1A60     		str	r2, [r3]
 8124              	.L500:
2343:..\src/interruptions.c ****                         }
2344:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 8125              		.loc 1 2344 0
 8126 0d2e 264B     		ldr	r3, .L574+36
 8127 0d30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8128 0d32 1846     		mov	r0, r3
 8129 0d34 244B     		ldr	r3, .L574+36
 8130 0d36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8131 0d38 1946     		mov	r1, r3
 8132 0d3a 1D4A     		ldr	r2, .L574+12
 8133 0d3c 0B46     		mov	r3, r1
 8134 0d3e DB00     		lsls	r3, r3, #3
 8135 0d40 5B1A     		subs	r3, r3, r1
 8136 0d42 1B01     		lsls	r3, r3, #4
 8137 0d44 1344     		add	r3, r3, r2
 8138 0d46 E033     		adds	r3, r3, #224
 8139 0d48 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 8140 0d4a 214A     		ldr	r2, .L574+44
 8141 0d4c 0301     		lsls	r3, r0, #4
 8142 0d4e 1344     		add	r3, r3, r2
 8143 0d50 0C33     		adds	r3, r3, #12
 8144 0d52 0A46     		mov	r2, r1
 8145 0d54 1A70     		strb	r2, [r3]
2345:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 8146              		.loc 1 2345 0
 8147 0d56 1C4B     		ldr	r3, .L574+36
 8148 0d58 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 188


 8149 0d5a 1B4B     		ldr	r3, .L574+36
 8150 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8151 0d5e 1C4A     		ldr	r2, .L574+44
 8152 0d60 1B01     		lsls	r3, r3, #4
 8153 0d62 1344     		add	r3, r3, r2
 8154 0d64 0C33     		adds	r3, r3, #12
 8155 0d66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8156 0d68 1946     		mov	r1, r3
 8157 0d6a FFF7FEFF 		bl	enable_motor
 8158              	.L499:
2335:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8159              		.loc 1 2335 0 discriminator 2
 8160 0d6e 164B     		ldr	r3, .L574+36
 8161 0d70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8162 0d72 0133     		adds	r3, r3, #1
 8163 0d74 DAB2     		uxtb	r2, r3
 8164 0d76 144B     		ldr	r3, .L574+36
 8165 0d78 1A70     		strb	r2, [r3]
 8166              	.L497:
2335:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8167              		.loc 1 2335 0 is_stmt 0 discriminator 1
 8168 0d7a 134B     		ldr	r3, .L574+36
 8169 0d7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8170 0d7e 012B     		cmp	r3, #1
 8171 0d80 7FF667AF 		bls	.L501
2346:..\src/interruptions.c ****                     }
2347:..\src/interruptions.c ****                 }
2348:..\src/interruptions.c ****                     
2349:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8172              		.loc 1 2349 0 is_stmt 1
 8173 0d84 0020     		movs	r0, #0
 8174 0d86 FFF7FEFF 		bl	memStore
2350:..\src/interruptions.c ****                     
2351:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8175              		.loc 1 2351 0
 8176 0d8a 084B     		ldr	r3, .L574+8
 8177 0d8c 0022     		movs	r2, #0
 8178 0d8e 1A70     		strb	r2, [r3]
2352:..\src/interruptions.c ****             }
2353:..\src/interruptions.c ****             break;
 8179              		.loc 1 2353 0
 8180 0d90 20E0     		b	.L557
 8181              	.L553:
2354:..\src/interruptions.c ****         default:
2355:..\src/interruptions.c ****             break;
 8182              		.loc 1 2355 0
 8183 0d92 00BF     		nop
 8184 0d94 1FE0     		b	.L486
 8185              	.L554:
2292:..\src/interruptions.c **** 
 8186              		.loc 1 2292 0
 8187 0d96 00BF     		nop
 8188 0d98 1DE0     		b	.L486
 8189              	.L555:
2318:..\src/interruptions.c **** 
 8190              		.loc 1 2318 0
 8191 0d9a 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 189


 8192 0d9c 1BE0     		b	.L486
 8193              	.L556:
2323:..\src/interruptions.c **** 
 8194              		.loc 1 2323 0
 8195 0d9e 00BF     		nop
 8196 0da0 19E0     		b	.L486
 8197              	.L575:
 8198 0da2 00BF     		.align	2
 8199              	.L574:
 8200 0da4 7A010000 		.word	emg_counter_2.10661
 8201 0da8 00000000 		.word	interrupt_flag
 8202 0dac 00000000 		.word	emg_2_status
 8203 0db0 00000000 		.word	c_mem
 8204 0db4 00000000 		.word	ADC_buf
 8205 0db8 08000000 		.word	filt_emg+8
 8206 0dbc 00000000 		.word	g_mem
 8207 0dc0 D34D6210 		.word	274877907
 8208 0dc4 00000000 		.word	emg_1_status
 8209 0dc8 72010000 		.word	idx.10670
 8210 0dcc 00000000 		.word	g_meas
 8211 0dd0 00000000 		.word	g_ref
 8212              	.L557:
2353:..\src/interruptions.c ****         default:
 8213              		.loc 1 2353 0
 8214 0dd4 00BF     		nop
 8215              	.L486:
2356:..\src/interruptions.c ****     }
2357:..\src/interruptions.c ****         
2358:..\src/interruptions.c ****     if (interrupt_flag){
 8216              		.loc 1 2358 0
 8217 0dd6 A74B     		ldr	r3, .L576
 8218 0dd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8219 0dda 002B     		cmp	r3, #0
 8220 0ddc 04D0     		beq	.L502
2359:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8221              		.loc 1 2359 0
 8222 0dde A54B     		ldr	r3, .L576
 8223 0de0 0022     		movs	r2, #0
 8224 0de2 1A70     		strb	r2, [r3]
2360:..\src/interruptions.c ****         interrupt_manager();
 8225              		.loc 1 2360 0
 8226 0de4 FFF7FEFF 		bl	interrupt_manager
 8227              	.L502:
2361:..\src/interruptions.c ****     }
2362:..\src/interruptions.c ****     
2363:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8228              		.loc 1 2363 0
 8229 0de8 A34B     		ldr	r3, .L576+4
 8230 0dea 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8231 0dee 062B     		cmp	r3, #6
 8232 0df0 05D0     		beq	.L503
 8233              		.loc 1 2363 0 is_stmt 0 discriminator 1
 8234 0df2 A14B     		ldr	r3, .L576+4
 8235 0df4 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 8236 0df8 062B     		cmp	r3, #6
 8237 0dfa 40F0C481 		bne	.L504
 8238              	.L503:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 190


2364:..\src/interruptions.c ****         // Read joystick
2365:..\src/interruptions.c ****         
2366:..\src/interruptions.c ****         switch (joy_UD_status) {
 8239              		.loc 1 2366 0 is_stmt 1
 8240 0dfe 9F4B     		ldr	r3, .L576+8
 8241 0e00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8242 0e02 052B     		cmp	r3, #5
 8243 0e04 00F2CB80 		bhi	.L505
 8244 0e08 01A2     		adr	r2, .L507
 8245 0e0a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8246 0e0e 00BF     		.p2align 2
 8247              	.L507:
 8248 0e10 290E0000 		.word	.L506+1
 8249 0e14 C50E0000 		.word	.L508+1
 8250 0e18 D90E0000 		.word	.L509+1
 8251 0e1c 0D0F0000 		.word	.L510+1
 8252 0e20 790F0000 		.word	.L511+1
 8253 0e24 790F0000 		.word	.L511+1
 8254              		.p2align 1
 8255              	.L506:
2367:..\src/interruptions.c ****             case NORMAL:
2368:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8256              		.loc 1 2368 0
 8257 0e28 954B     		ldr	r3, .L576+12
 8258 0e2a B3F90430 		ldrsh	r3, [r3, #4]
 8259 0e2e 7B60     		str	r3, [r7, #4]
2369:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2370:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8260              		.loc 1 2370 0
 8261 0e30 944B     		ldr	r3, .L576+16
 8262 0e32 1B68     		ldr	r3, [r3]
 8263 0e34 7A68     		ldr	r2, [r7, #4]
 8264 0e36 D31A     		subs	r3, r2, r3
 8265 0e38 1846     		mov	r0, r3
 8266 0e3a FFF7FEFF 		bl	__aeabi_i2f
 8267 0e3e 0446     		mov	r4, r0
 8268 0e40 904B     		ldr	r3, .L576+16
 8269 0e42 1B68     		ldr	r3, [r3]
 8270 0e44 1846     		mov	r0, r3
 8271 0e46 FFF7FEFF 		bl	__aeabi_i2f
 8272 0e4a 0346     		mov	r3, r0
 8273 0e4c 1946     		mov	r1, r3
 8274 0e4e 2046     		mov	r0, r4
 8275 0e50 FFF7FEFF 		bl	__aeabi_fdiv
 8276 0e54 0346     		mov	r3, r0
 8277 0e56 1C46     		mov	r4, r3
 8278 0e58 874B     		ldr	r3, .L576+4
 8279 0e5a B3F8B632 		ldrh	r3, [r3, #694]
 8280 0e5e 1846     		mov	r0, r3
 8281 0e60 FFF7FEFF 		bl	__aeabi_i2f
 8282 0e64 0346     		mov	r3, r0
 8283 0e66 1946     		mov	r1, r3
 8284 0e68 2046     		mov	r0, r4
 8285 0e6a FFF7FEFF 		bl	__aeabi_fmul
 8286 0e6e 0346     		mov	r3, r0
 8287 0e70 1846     		mov	r0, r3
 8288 0e72 FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 191


 8289 0e76 0346     		mov	r3, r0
 8290 0e78 7B60     		str	r3, [r7, #4]
2371:..\src/interruptions.c ****                 
2372:..\src/interruptions.c ****                 if (interrupt_flag){
 8291              		.loc 1 2372 0
 8292 0e7a 7E4B     		ldr	r3, .L576
 8293 0e7c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8294 0e7e 002B     		cmp	r3, #0
 8295 0e80 04D0     		beq	.L512
2373:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8296              		.loc 1 2373 0
 8297 0e82 7C4B     		ldr	r3, .L576
 8298 0e84 0022     		movs	r2, #0
 8299 0e86 1A70     		strb	r2, [r3]
2374:..\src/interruptions.c ****                     interrupt_manager();
 8300              		.loc 1 2374 0
 8301 0e88 FFF7FEFF 		bl	interrupt_manager
 8302              	.L512:
2375:..\src/interruptions.c ****                 }
2376:..\src/interruptions.c **** 
2377:..\src/interruptions.c ****                 //Saturation
2378:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8303              		.loc 1 2378 0
 8304 0e8c 7B68     		ldr	r3, [r7, #4]
 8305 0e8e 13F5806F 		cmn	r3, #1024
 8306 0e92 01DA     		bge	.L513
2379:..\src/interruptions.c ****                     i_aux = -1024;
 8307              		.loc 1 2379 0
 8308 0e94 7C4B     		ldr	r3, .L576+20
 8309 0e96 7B60     		str	r3, [r7, #4]
 8310              	.L513:
2380:..\src/interruptions.c ****                 if (i_aux > 1024)
 8311              		.loc 1 2380 0
 8312 0e98 7B68     		ldr	r3, [r7, #4]
 8313 0e9a B3F5806F 		cmp	r3, #1024
 8314 0e9e 02DD     		ble	.L514
2381:..\src/interruptions.c ****                     i_aux = 1024;
 8315              		.loc 1 2381 0
 8316 0ea0 4FF48063 		mov	r3, #1024
 8317 0ea4 7B60     		str	r3, [r7, #4]
 8318              	.L514:
2382:..\src/interruptions.c **** 
2383:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8319              		.loc 1 2383 0
 8320 0ea6 7B68     		ldr	r3, [r7, #4]
 8321 0ea8 1BB2     		sxth	r3, r3
 8322 0eaa 1A46     		mov	r2, r3
 8323 0eac 774B     		ldr	r3, .L576+24
 8324 0eae 5A62     		str	r2, [r3, #36]
2384:..\src/interruptions.c **** 
2385:..\src/interruptions.c ****                 if (interrupt_flag){
 8325              		.loc 1 2385 0
 8326 0eb0 704B     		ldr	r3, .L576
 8327 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8328 0eb4 002B     		cmp	r3, #0
 8329 0eb6 6BD0     		beq	.L558
2386:..\src/interruptions.c ****                     interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 192


 8330              		.loc 1 2386 0
 8331 0eb8 6E4B     		ldr	r3, .L576
 8332 0eba 0022     		movs	r2, #0
 8333 0ebc 1A70     		strb	r2, [r3]
2387:..\src/interruptions.c ****                     interrupt_manager();
 8334              		.loc 1 2387 0
 8335 0ebe FFF7FEFF 		bl	interrupt_manager
2388:..\src/interruptions.c ****                 }
2389:..\src/interruptions.c **** 
2390:..\src/interruptions.c ****             break;
 8336              		.loc 1 2390 0
 8337 0ec2 65E0     		b	.L558
 8338              	.L508:
2391:..\src/interruptions.c **** 
2392:..\src/interruptions.c ****             case RESET: // reset variables
2393:..\src/interruptions.c ****                 UD_counter = 0;
 8339              		.loc 1 2393 0
 8340 0ec4 724B     		ldr	r3, .L576+28
 8341 0ec6 0022     		movs	r2, #0
 8342 0ec8 1A80     		strh	r2, [r3]	@ movhi
2394:..\src/interruptions.c ****                 UD_mean_value = 0;
 8343              		.loc 1 2394 0
 8344 0eca 6E4B     		ldr	r3, .L576+16
 8345 0ecc 0022     		movs	r2, #0
 8346 0ece 1A60     		str	r2, [r3]
2395:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8347              		.loc 1 2395 0
 8348 0ed0 6A4B     		ldr	r3, .L576+8
 8349 0ed2 0422     		movs	r2, #4
 8350 0ed4 1A70     		strb	r2, [r3]
2396:..\src/interruptions.c **** 
2397:..\src/interruptions.c ****             break;
 8351              		.loc 1 2397 0
 8352 0ed6 62E0     		b	.L505
 8353              	.L509:
2398:..\src/interruptions.c **** 
2399:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2400:..\src/interruptions.c ****                 UD_counter++;
 8354              		.loc 1 2400 0
 8355 0ed8 6D4B     		ldr	r3, .L576+28
 8356 0eda 1B88     		ldrh	r3, [r3]
 8357 0edc 0133     		adds	r3, r3, #1
 8358 0ede 9AB2     		uxth	r2, r3
 8359 0ee0 6B4B     		ldr	r3, .L576+28
 8360 0ee2 1A80     		strh	r2, [r3]	@ movhi
2401:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8361              		.loc 1 2401 0
 8362 0ee4 6A4B     		ldr	r3, .L576+28
 8363 0ee6 1B88     		ldrh	r3, [r3]
 8364 0ee8 642B     		cmp	r3, #100
 8365 0eea 53D1     		bne	.L559
2402:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8366              		.loc 1 2402 0
 8367 0eec 684B     		ldr	r3, .L576+28
 8368 0eee 0022     		movs	r2, #0
 8369 0ef0 1A80     		strh	r2, [r3]	@ movhi
2403:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 193


2404:..\src/interruptions.c ****                     if (interrupt_flag){
 8370              		.loc 1 2404 0
 8371 0ef2 604B     		ldr	r3, .L576
 8372 0ef4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8373 0ef6 002B     		cmp	r3, #0
 8374 0ef8 04D0     		beq	.L517
2405:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8375              		.loc 1 2405 0
 8376 0efa 5E4B     		ldr	r3, .L576
 8377 0efc 0022     		movs	r2, #0
 8378 0efe 1A70     		strb	r2, [r3]
2406:..\src/interruptions.c ****                         interrupt_manager();
 8379              		.loc 1 2406 0
 8380 0f00 FFF7FEFF 		bl	interrupt_manager
 8381              	.L517:
2407:..\src/interruptions.c ****                     }
2408:..\src/interruptions.c **** 
2409:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8382              		.loc 1 2409 0
 8383 0f04 5D4B     		ldr	r3, .L576+8
 8384 0f06 0322     		movs	r2, #3
 8385 0f08 1A70     		strb	r2, [r3]
2410:..\src/interruptions.c ****                 }
2411:..\src/interruptions.c **** 
2412:..\src/interruptions.c ****             break;
 8386              		.loc 1 2412 0
 8387 0f0a 43E0     		b	.L559
 8388              	.L510:
2413:..\src/interruptions.c **** 
2414:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2415:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2416:..\src/interruptions.c ****                 UD_counter++;
 8389              		.loc 1 2416 0
 8390 0f0c 604B     		ldr	r3, .L576+28
 8391 0f0e 1B88     		ldrh	r3, [r3]
 8392 0f10 0133     		adds	r3, r3, #1
 8393 0f12 9AB2     		uxth	r2, r3
 8394 0f14 5E4B     		ldr	r3, .L576+28
 8395 0f16 1A80     		strh	r2, [r3]	@ movhi
2417:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8396              		.loc 1 2417 0
 8397 0f18 594B     		ldr	r3, .L576+12
 8398 0f1a B3F90430 		ldrsh	r3, [r3, #4]
 8399 0f1e 1A46     		mov	r2, r3
 8400 0f20 584B     		ldr	r3, .L576+16
 8401 0f22 1B68     		ldr	r3, [r3]
 8402 0f24 1344     		add	r3, r3, r2
 8403 0f26 574A     		ldr	r2, .L576+16
 8404 0f28 1360     		str	r3, [r2]
2418:..\src/interruptions.c **** 
2419:..\src/interruptions.c ****                 if (interrupt_flag){
 8405              		.loc 1 2419 0
 8406 0f2a 524B     		ldr	r3, .L576
 8407 0f2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8408 0f2e 002B     		cmp	r3, #0
 8409 0f30 04D0     		beq	.L518
2420:..\src/interruptions.c ****                     interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 194


 8410              		.loc 1 2420 0
 8411 0f32 504B     		ldr	r3, .L576
 8412 0f34 0022     		movs	r2, #0
 8413 0f36 1A70     		strb	r2, [r3]
2421:..\src/interruptions.c ****                     interrupt_manager();
 8414              		.loc 1 2421 0
 8415 0f38 FFF7FEFF 		bl	interrupt_manager
 8416              	.L518:
2422:..\src/interruptions.c ****                 }
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8417              		.loc 1 2424 0
 8418 0f3c 544B     		ldr	r3, .L576+28
 8419 0f3e 1B88     		ldrh	r3, [r3]
 8420 0f40 C82B     		cmp	r3, #200
 8421 0f42 29D1     		bne	.L560
2425:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8422              		.loc 1 2425 0
 8423 0f44 4F4B     		ldr	r3, .L576+16
 8424 0f46 1B68     		ldr	r3, [r3]
 8425 0f48 524A     		ldr	r2, .L576+32
 8426 0f4a 82FB0312 		smull	r1, r2, r2, r3
 8427 0f4e 9211     		asrs	r2, r2, #6
 8428 0f50 DB17     		asrs	r3, r3, #31
 8429 0f52 D31A     		subs	r3, r2, r3
 8430 0f54 4B4A     		ldr	r2, .L576+16
 8431 0f56 1360     		str	r3, [r2]
2426:..\src/interruptions.c **** 
2427:..\src/interruptions.c ****                     if (interrupt_flag){
 8432              		.loc 1 2427 0
 8433 0f58 464B     		ldr	r3, .L576
 8434 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8435 0f5c 002B     		cmp	r3, #0
 8436 0f5e 04D0     		beq	.L520
2428:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8437              		.loc 1 2428 0
 8438 0f60 444B     		ldr	r3, .L576
 8439 0f62 0022     		movs	r2, #0
 8440 0f64 1A70     		strb	r2, [r3]
2429:..\src/interruptions.c ****                         interrupt_manager();
 8441              		.loc 1 2429 0
 8442 0f66 FFF7FEFF 		bl	interrupt_manager
 8443              	.L520:
2430:..\src/interruptions.c ****                     }
2431:..\src/interruptions.c **** 
2432:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8444              		.loc 1 2432 0
 8445 0f6a 494B     		ldr	r3, .L576+28
 8446 0f6c 0022     		movs	r2, #0
 8447 0f6e 1A80     		strh	r2, [r3]	@ movhi
2433:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8448              		.loc 1 2433 0
 8449 0f70 424B     		ldr	r3, .L576+8
 8450 0f72 0022     		movs	r2, #0
 8451 0f74 1A70     		strb	r2, [r3]
2434:..\src/interruptions.c ****                 }
2435:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 195


 8452              		.loc 1 2435 0
 8453 0f76 0FE0     		b	.L560
 8454              	.L511:
2436:..\src/interruptions.c **** 
2437:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2438:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8455              		.loc 1 2438 0
 8456 0f78 474B     		ldr	r3, .L576+36
 8457 0f7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8458 0f7c 002B     		cmp	r3, #0
 8459 0f7e 0DD1     		bne	.L561
 8460              		.loc 1 2438 0 is_stmt 0 discriminator 1
 8461 0f80 464B     		ldr	r3, .L576+40
 8462 0f82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8463 0f84 002B     		cmp	r3, #0
 8464 0f86 09D1     		bne	.L561
2439:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8465              		.loc 1 2439 0 is_stmt 1
 8466 0f88 3C4B     		ldr	r3, .L576+8
 8467 0f8a 0222     		movs	r2, #2
 8468 0f8c 1A70     		strb	r2, [r3]
2440:..\src/interruptions.c ****             break;
 8469              		.loc 1 2440 0
 8470 0f8e 05E0     		b	.L561
 8471              	.L558:
2390:..\src/interruptions.c **** 
 8472              		.loc 1 2390 0
 8473 0f90 00BF     		nop
 8474 0f92 04E0     		b	.L505
 8475              	.L559:
2412:..\src/interruptions.c **** 
 8476              		.loc 1 2412 0
 8477 0f94 00BF     		nop
 8478 0f96 02E0     		b	.L505
 8479              	.L560:
2435:..\src/interruptions.c **** 
 8480              		.loc 1 2435 0
 8481 0f98 00BF     		nop
 8482 0f9a 00E0     		b	.L505
 8483              	.L561:
 8484              		.loc 1 2440 0
 8485 0f9c 00BF     		nop
 8486              	.L505:
2441:..\src/interruptions.c ****         }
2442:..\src/interruptions.c **** 
2443:..\src/interruptions.c ****         if (interrupt_flag){
 8487              		.loc 1 2443 0
 8488 0f9e 354B     		ldr	r3, .L576
 8489 0fa0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8490 0fa2 002B     		cmp	r3, #0
 8491 0fa4 04D0     		beq	.L522
2444:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8492              		.loc 1 2444 0
 8493 0fa6 334B     		ldr	r3, .L576
 8494 0fa8 0022     		movs	r2, #0
 8495 0faa 1A70     		strb	r2, [r3]
2445:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 196


 8496              		.loc 1 2445 0
 8497 0fac FFF7FEFF 		bl	interrupt_manager
 8498              	.L522:
2446:..\src/interruptions.c ****         }
2447:..\src/interruptions.c ****             
2448:..\src/interruptions.c ****         switch (joy_LR_status) {
 8499              		.loc 1 2448 0
 8500 0fb0 3B4B     		ldr	r3, .L576+44
 8501 0fb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8502 0fb4 052B     		cmp	r3, #5
 8503 0fb6 00F2DD80 		bhi	.L523
 8504 0fba 01A2     		adr	r2, .L525
 8505 0fbc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8506              		.p2align 2
 8507              	.L525:
 8508 0fc0 D90F0000 		.word	.L524+1
 8509 0fc4 A9100000 		.word	.L526+1
 8510 0fc8 BD100000 		.word	.L527+1
 8511 0fcc F1100000 		.word	.L528+1
 8512 0fd0 4B110000 		.word	.L529+1
 8513 0fd4 4B110000 		.word	.L529+1
 8514              		.p2align 1
 8515              	.L524:
2449:..\src/interruptions.c ****             case NORMAL:
2450:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8516              		.loc 1 2450 0
 8517 0fd8 294B     		ldr	r3, .L576+12
 8518 0fda B3F90630 		ldrsh	r3, [r3, #6]
 8519 0fde 7B60     		str	r3, [r7, #4]
2451:..\src/interruptions.c **** 
2452:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8520              		.loc 1 2452 0
 8521 0fe0 304B     		ldr	r3, .L576+48
 8522 0fe2 1B68     		ldr	r3, [r3]
 8523 0fe4 7A68     		ldr	r2, [r7, #4]
 8524 0fe6 D31A     		subs	r3, r2, r3
 8525 0fe8 1846     		mov	r0, r3
 8526 0fea FFF7FEFF 		bl	__aeabi_i2f
 8527 0fee 0446     		mov	r4, r0
 8528 0ff0 2C4B     		ldr	r3, .L576+48
 8529 0ff2 1B68     		ldr	r3, [r3]
 8530 0ff4 1846     		mov	r0, r3
 8531 0ff6 FFF7FEFF 		bl	__aeabi_i2f
 8532 0ffa 0346     		mov	r3, r0
 8533 0ffc 1946     		mov	r1, r3
 8534 0ffe 2046     		mov	r0, r4
 8535 1000 FFF7FEFF 		bl	__aeabi_fdiv
 8536 1004 0346     		mov	r3, r0
 8537 1006 1C46     		mov	r4, r3
 8538 1008 1B4B     		ldr	r3, .L576+4
 8539 100a B3F8B432 		ldrh	r3, [r3, #692]
 8540 100e 1846     		mov	r0, r3
 8541 1010 FFF7FEFF 		bl	__aeabi_i2f
 8542 1014 0346     		mov	r3, r0
 8543 1016 1946     		mov	r1, r3
 8544 1018 2046     		mov	r0, r4
 8545 101a FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 197


 8546 101e 0346     		mov	r3, r0
 8547 1020 1846     		mov	r0, r3
 8548 1022 FFF7FEFF 		bl	__aeabi_f2iz
 8549 1026 0346     		mov	r3, r0
 8550 1028 7B60     		str	r3, [r7, #4]
2453:..\src/interruptions.c ****                 
2454:..\src/interruptions.c ****                 if (interrupt_flag){
 8551              		.loc 1 2454 0
 8552 102a 124B     		ldr	r3, .L576
 8553 102c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8554 102e 002B     		cmp	r3, #0
 8555 1030 04D0     		beq	.L530
2455:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8556              		.loc 1 2455 0
 8557 1032 104B     		ldr	r3, .L576
 8558 1034 0022     		movs	r2, #0
 8559 1036 1A70     		strb	r2, [r3]
2456:..\src/interruptions.c ****                     interrupt_manager();
 8560              		.loc 1 2456 0
 8561 1038 FFF7FEFF 		bl	interrupt_manager
 8562              	.L530:
2457:..\src/interruptions.c ****                 }
2458:..\src/interruptions.c **** 
2459:..\src/interruptions.c ****                 //Saturation
2460:..\src/interruptions.c ****                 if (i_aux < -1024)
 8563              		.loc 1 2460 0
 8564 103c 7B68     		ldr	r3, [r7, #4]
 8565 103e 13F5806F 		cmn	r3, #1024
 8566 1042 01DA     		bge	.L531
2461:..\src/interruptions.c ****                     i_aux = -1024;
 8567              		.loc 1 2461 0
 8568 1044 104B     		ldr	r3, .L576+20
 8569 1046 7B60     		str	r3, [r7, #4]
 8570              	.L531:
2462:..\src/interruptions.c ****                 if (i_aux > 1024)
 8571              		.loc 1 2462 0
 8572 1048 7B68     		ldr	r3, [r7, #4]
 8573 104a B3F5806F 		cmp	r3, #1024
 8574 104e 02DD     		ble	.L532
2463:..\src/interruptions.c ****                     i_aux = 1024;
 8575              		.loc 1 2463 0
 8576 1050 4FF48063 		mov	r3, #1024
 8577 1054 7B60     		str	r3, [r7, #4]
 8578              	.L532:
2464:..\src/interruptions.c **** 
2465:..\src/interruptions.c ****                 if (interrupt_flag){
 8579              		.loc 1 2465 0
 8580 1056 074B     		ldr	r3, .L576
 8581 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8582 105a 002B     		cmp	r3, #0
 8583 105c 04D0     		beq	.L533
2466:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8584              		.loc 1 2466 0
 8585 105e 054B     		ldr	r3, .L576
 8586 1060 0022     		movs	r2, #0
 8587 1062 1A70     		strb	r2, [r3]
2467:..\src/interruptions.c ****                     interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 198


 8588              		.loc 1 2467 0
 8589 1064 FFF7FEFF 		bl	interrupt_manager
 8590              	.L533:
2468:..\src/interruptions.c ****                 }
2469:..\src/interruptions.c **** 
2470:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8591              		.loc 1 2470 0
 8592 1068 7B68     		ldr	r3, [r7, #4]
 8593 106a 1BB2     		sxth	r3, r3
 8594 106c 1A46     		mov	r2, r3
 8595 106e 074B     		ldr	r3, .L576+24
 8596 1070 1A62     		str	r2, [r3, #32]
2471:..\src/interruptions.c **** 
2472:..\src/interruptions.c ****             break;
 8597              		.loc 1 2472 0
 8598 1072 7FE0     		b	.L523
 8599              	.L577:
 8600              		.align	2
 8601              	.L576:
 8602 1074 00000000 		.word	interrupt_flag
 8603 1078 00000000 		.word	c_mem
 8604 107c 00000000 		.word	joy_UD_status
 8605 1080 00000000 		.word	ADC_buf
 8606 1084 7C010000 		.word	UD_mean_value.10664
 8607 1088 00FCFFFF 		.word	-1024
 8608 108c 00000000 		.word	g_adc_meas
 8609 1090 80010000 		.word	UD_counter.10662
 8610 1094 1F85EB51 		.word	1374389535
 8611 1098 00000000 		.word	emg_1_status
 8612 109c 00000000 		.word	emg_2_status
 8613 10a0 00000000 		.word	joy_LR_status
 8614 10a4 84010000 		.word	LR_mean_value.10665
 8615              	.L526:
2473:..\src/interruptions.c **** 
2474:..\src/interruptions.c ****             case RESET: // reset variables
2475:..\src/interruptions.c ****                 LR_counter = 0;
 8616              		.loc 1 2475 0
 8617 10a8 644B     		ldr	r3, .L578
 8618 10aa 0022     		movs	r2, #0
 8619 10ac 1A80     		strh	r2, [r3]	@ movhi
2476:..\src/interruptions.c ****                 LR_mean_value = 0;
 8620              		.loc 1 2476 0
 8621 10ae 644B     		ldr	r3, .L578+4
 8622 10b0 0022     		movs	r2, #0
 8623 10b2 1A60     		str	r2, [r3]
2477:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8624              		.loc 1 2477 0
 8625 10b4 634B     		ldr	r3, .L578+8
 8626 10b6 0422     		movs	r2, #4
 8627 10b8 1A70     		strb	r2, [r3]
2478:..\src/interruptions.c ****             break;
 8628              		.loc 1 2478 0
 8629 10ba 5BE0     		b	.L523
 8630              	.L527:
2479:..\src/interruptions.c **** 
2480:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2481:..\src/interruptions.c ****                 LR_counter++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 199


 8631              		.loc 1 2481 0
 8632 10bc 5F4B     		ldr	r3, .L578
 8633 10be 1B88     		ldrh	r3, [r3]
 8634 10c0 0133     		adds	r3, r3, #1
 8635 10c2 9AB2     		uxth	r2, r3
 8636 10c4 5D4B     		ldr	r3, .L578
 8637 10c6 1A80     		strh	r2, [r3]	@ movhi
2482:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8638              		.loc 1 2482 0
 8639 10c8 5C4B     		ldr	r3, .L578
 8640 10ca 1B88     		ldrh	r3, [r3]
 8641 10cc 642B     		cmp	r3, #100
 8642 10ce 4CD1     		bne	.L562
2483:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8643              		.loc 1 2483 0
 8644 10d0 5A4B     		ldr	r3, .L578
 8645 10d2 0022     		movs	r2, #0
 8646 10d4 1A80     		strh	r2, [r3]	@ movhi
2484:..\src/interruptions.c **** 
2485:..\src/interruptions.c ****                     if (interrupt_flag){
 8647              		.loc 1 2485 0
 8648 10d6 5C4B     		ldr	r3, .L578+12
 8649 10d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8650 10da 002B     		cmp	r3, #0
 8651 10dc 04D0     		beq	.L535
2486:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8652              		.loc 1 2486 0
 8653 10de 5A4B     		ldr	r3, .L578+12
 8654 10e0 0022     		movs	r2, #0
 8655 10e2 1A70     		strb	r2, [r3]
2487:..\src/interruptions.c ****                         interrupt_manager();
 8656              		.loc 1 2487 0
 8657 10e4 FFF7FEFF 		bl	interrupt_manager
 8658              	.L535:
2488:..\src/interruptions.c ****                     }
2489:..\src/interruptions.c **** 
2490:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8659              		.loc 1 2490 0
 8660 10e8 564B     		ldr	r3, .L578+8
 8661 10ea 0322     		movs	r2, #3
 8662 10ec 1A70     		strb	r2, [r3]
2491:..\src/interruptions.c ****                 }
2492:..\src/interruptions.c ****             break;
 8663              		.loc 1 2492 0
 8664 10ee 3CE0     		b	.L562
 8665              	.L528:
2493:..\src/interruptions.c **** 
2494:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2495:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2496:..\src/interruptions.c ****                 LR_counter++;
 8666              		.loc 1 2496 0
 8667 10f0 524B     		ldr	r3, .L578
 8668 10f2 1B88     		ldrh	r3, [r3]
 8669 10f4 0133     		adds	r3, r3, #1
 8670 10f6 9AB2     		uxth	r2, r3
 8671 10f8 504B     		ldr	r3, .L578
 8672 10fa 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 200


2497:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8673              		.loc 1 2497 0
 8674 10fc 534B     		ldr	r3, .L578+16
 8675 10fe B3F90630 		ldrsh	r3, [r3, #6]
 8676 1102 1A46     		mov	r2, r3
 8677 1104 4E4B     		ldr	r3, .L578+4
 8678 1106 1B68     		ldr	r3, [r3]
 8679 1108 1344     		add	r3, r3, r2
 8680 110a 4D4A     		ldr	r2, .L578+4
 8681 110c 1360     		str	r3, [r2]
2498:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8682              		.loc 1 2498 0
 8683 110e 4B4B     		ldr	r3, .L578
 8684 1110 1B88     		ldrh	r3, [r3]
 8685 1112 C82B     		cmp	r3, #200
 8686 1114 2BD1     		bne	.L563
2499:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8687              		.loc 1 2499 0
 8688 1116 4A4B     		ldr	r3, .L578+4
 8689 1118 1B68     		ldr	r3, [r3]
 8690 111a 4D4A     		ldr	r2, .L578+20
 8691 111c 82FB0312 		smull	r1, r2, r2, r3
 8692 1120 9211     		asrs	r2, r2, #6
 8693 1122 DB17     		asrs	r3, r3, #31
 8694 1124 D31A     		subs	r3, r2, r3
 8695 1126 464A     		ldr	r2, .L578+4
 8696 1128 1360     		str	r3, [r2]
2500:..\src/interruptions.c ****                     
2501:..\src/interruptions.c ****                     if (interrupt_flag){
 8697              		.loc 1 2501 0
 8698 112a 474B     		ldr	r3, .L578+12
 8699 112c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8700 112e 002B     		cmp	r3, #0
 8701 1130 04D0     		beq	.L537
2502:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8702              		.loc 1 2502 0
 8703 1132 454B     		ldr	r3, .L578+12
 8704 1134 0022     		movs	r2, #0
 8705 1136 1A70     		strb	r2, [r3]
2503:..\src/interruptions.c ****                         interrupt_manager();
 8706              		.loc 1 2503 0
 8707 1138 FFF7FEFF 		bl	interrupt_manager
 8708              	.L537:
2504:..\src/interruptions.c ****                     }
2505:..\src/interruptions.c **** 
2506:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8709              		.loc 1 2506 0
 8710 113c 3F4B     		ldr	r3, .L578
 8711 113e 0022     		movs	r2, #0
 8712 1140 1A80     		strh	r2, [r3]	@ movhi
2507:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8713              		.loc 1 2507 0
 8714 1142 404B     		ldr	r3, .L578+8
 8715 1144 0022     		movs	r2, #0
 8716 1146 1A70     		strb	r2, [r3]
2508:..\src/interruptions.c ****                 }
2509:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 201


 8717              		.loc 1 2509 0
 8718 1148 11E0     		b	.L563
 8719              	.L529:
2510:..\src/interruptions.c **** 
2511:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2512:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8720              		.loc 1 2512 0
 8721 114a 424B     		ldr	r3, .L578+24
 8722 114c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8723 114e 002B     		cmp	r3, #0
 8724 1150 0FD1     		bne	.L564
 8725              		.loc 1 2512 0 is_stmt 0 discriminator 1
 8726 1152 414B     		ldr	r3, .L578+28
 8727 1154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8728 1156 002B     		cmp	r3, #0
 8729 1158 0BD1     		bne	.L564
 8730              		.loc 1 2512 0 discriminator 2
 8731 115a 404B     		ldr	r3, .L578+32
 8732 115c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8733 115e 002B     		cmp	r3, #0
 8734 1160 07D1     		bne	.L564
2513:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8735              		.loc 1 2513 0 is_stmt 1
 8736 1162 384B     		ldr	r3, .L578+8
 8737 1164 0222     		movs	r2, #2
 8738 1166 1A70     		strb	r2, [r3]
2514:..\src/interruptions.c ****             break;
 8739              		.loc 1 2514 0
 8740 1168 03E0     		b	.L564
 8741              	.L562:
2492:..\src/interruptions.c **** 
 8742              		.loc 1 2492 0
 8743 116a 00BF     		nop
 8744 116c 02E0     		b	.L523
 8745              	.L563:
2509:..\src/interruptions.c **** 
 8746              		.loc 1 2509 0
 8747 116e 00BF     		nop
 8748 1170 00E0     		b	.L523
 8749              	.L564:
 8750              		.loc 1 2514 0
 8751 1172 00BF     		nop
 8752              	.L523:
2515:..\src/interruptions.c ****         }
2516:..\src/interruptions.c ****        
2517:..\src/interruptions.c ****         if (interrupt_flag){
 8753              		.loc 1 2517 0
 8754 1174 344B     		ldr	r3, .L578+12
 8755 1176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8756 1178 002B     		cmp	r3, #0
 8757 117a 04D0     		beq	.L504
2518:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8758              		.loc 1 2518 0
 8759 117c 324B     		ldr	r3, .L578+12
 8760 117e 0022     		movs	r2, #0
 8761 1180 1A70     		strb	r2, [r3]
2519:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 202


 8762              		.loc 1 2519 0
 8763 1182 FFF7FEFF 		bl	interrupt_manager
 8764              	.L504:
2520:..\src/interruptions.c ****         }
2521:..\src/interruptions.c ****     }
2522:..\src/interruptions.c ****     
2523:..\src/interruptions.c ****     // Read also EMG additional sensors port
2524:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8765              		.loc 1 2524 0
 8766 1186 364B     		ldr	r3, .L578+36
 8767 1188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8768 118a 062B     		cmp	r3, #6
 8769 118c 52D9     		bls	.L565
2525:..\src/interruptions.c ****         
2526:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8770              		.loc 1 2526 0
 8771 118e 354B     		ldr	r3, .L578+40
 8772 1190 0022     		movs	r2, #0
 8773 1192 1A70     		strb	r2, [r3]
 8774 1194 4AE0     		b	.L540
 8775              	.L547:
2527:..\src/interruptions.c ****             
2528:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8776              		.loc 1 2528 0
 8777 1196 334B     		ldr	r3, .L578+40
 8778 1198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8779 119a 0633     		adds	r3, r3, #6
 8780 119c 2B4A     		ldr	r2, .L578+16
 8781 119e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8782 11a2 7B60     		str	r3, [r7, #4]
2529:..\src/interruptions.c ****             if (i_aux < 0) 
 8783              		.loc 1 2529 0
 8784 11a4 7B68     		ldr	r3, [r7, #4]
 8785 11a6 002B     		cmp	r3, #0
 8786 11a8 01DA     		bge	.L541
2530:..\src/interruptions.c ****                 i_aux = 0;
 8787              		.loc 1 2530 0
 8788 11aa 0023     		movs	r3, #0
 8789 11ac 7B60     		str	r3, [r7, #4]
 8790              	.L541:
2531:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8791              		.loc 1 2531 0
 8792 11ae 2D4B     		ldr	r3, .L578+40
 8793 11b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8794 11b2 0233     		adds	r3, r3, #2
 8795 11b4 DB00     		lsls	r3, r3, #3
 8796 11b6 2C4A     		ldr	r2, .L578+44
 8797 11b8 1344     		add	r3, r3, r2
 8798 11ba 1946     		mov	r1, r3
 8799 11bc 7868     		ldr	r0, [r7, #4]
 8800 11be FFF7FEFF 		bl	filter
 8801 11c2 7860     		str	r0, [r7, #4]
2532:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8802              		.loc 1 2532 0
 8803 11c4 7B68     		ldr	r3, [r7, #4]
 8804 11c6 9B02     		lsls	r3, r3, #10
 8805 11c8 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 203


 8806 11ca 01DA     		bge	.L542
 8807 11cc 03F2FF33 		addw	r3, r3, #1023
 8808              	.L542:
 8809 11d0 9B12     		asrs	r3, r3, #10
 8810 11d2 7B60     		str	r3, [r7, #4]
2533:..\src/interruptions.c **** 
2534:..\src/interruptions.c ****             if (interrupt_flag){
 8811              		.loc 1 2534 0
 8812 11d4 1C4B     		ldr	r3, .L578+12
 8813 11d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8814 11d8 002B     		cmp	r3, #0
 8815 11da 04D0     		beq	.L543
2535:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8816              		.loc 1 2535 0
 8817 11dc 1A4B     		ldr	r3, .L578+12
 8818 11de 0022     		movs	r2, #0
 8819 11e0 1A70     		strb	r2, [r3]
2536:..\src/interruptions.c ****                 interrupt_manager();
 8820              		.loc 1 2536 0
 8821 11e2 FFF7FEFF 		bl	interrupt_manager
 8822              	.L543:
2537:..\src/interruptions.c ****             }
2538:..\src/interruptions.c ****             //Saturation
2539:..\src/interruptions.c ****             if (i_aux < 0)
 8823              		.loc 1 2539 0
 8824 11e6 7B68     		ldr	r3, [r7, #4]
 8825 11e8 002B     		cmp	r3, #0
 8826 11ea 02DA     		bge	.L544
2540:..\src/interruptions.c ****                 i_aux = 0;
 8827              		.loc 1 2540 0
 8828 11ec 0023     		movs	r3, #0
 8829 11ee 7B60     		str	r3, [r7, #4]
 8830 11f0 06E0     		b	.L545
 8831              	.L544:
2541:..\src/interruptions.c ****             else 
2542:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8832              		.loc 1 2542 0
 8833 11f2 7B68     		ldr	r3, [r7, #4]
 8834 11f4 B3F5806F 		cmp	r3, #1024
 8835 11f8 02DD     		ble	.L545
2543:..\src/interruptions.c ****                     i_aux = 1024;
 8836              		.loc 1 2543 0
 8837 11fa 4FF48063 		mov	r3, #1024
 8838 11fe 7B60     		str	r3, [r7, #4]
 8839              	.L545:
2544:..\src/interruptions.c ****             
2545:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8840              		.loc 1 2545 0
 8841 1200 184B     		ldr	r3, .L578+40
 8842 1202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8843 1204 1949     		ldr	r1, .L578+48
 8844 1206 0233     		adds	r3, r3, #2
 8845 1208 7A68     		ldr	r2, [r7, #4]
 8846 120a 41F82320 		str	r2, [r1, r3, lsl #2]
2546:..\src/interruptions.c **** 
2547:..\src/interruptions.c ****             if (interrupt_flag){
 8847              		.loc 1 2547 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 204


 8848 120e 0E4B     		ldr	r3, .L578+12
 8849 1210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8850 1212 002B     		cmp	r3, #0
 8851 1214 04D0     		beq	.L546
2548:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8852              		.loc 1 2548 0
 8853 1216 0C4B     		ldr	r3, .L578+12
 8854 1218 0022     		movs	r2, #0
 8855 121a 1A70     		strb	r2, [r3]
2549:..\src/interruptions.c ****                 interrupt_manager();
 8856              		.loc 1 2549 0
 8857 121c FFF7FEFF 		bl	interrupt_manager
 8858              	.L546:
2526:..\src/interruptions.c ****             
 8859              		.loc 1 2526 0 discriminator 2
 8860 1220 104B     		ldr	r3, .L578+40
 8861 1222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8862 1224 0133     		adds	r3, r3, #1
 8863 1226 DAB2     		uxtb	r2, r3
 8864 1228 0E4B     		ldr	r3, .L578+40
 8865 122a 1A70     		strb	r2, [r3]
 8866              	.L540:
2526:..\src/interruptions.c ****             
 8867              		.loc 1 2526 0 is_stmt 0 discriminator 1
 8868 122c 0D4B     		ldr	r3, .L578+40
 8869 122e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8870 1230 052B     		cmp	r3, #5
 8871 1232 B0D9     		bls	.L547
 8872              	.L565:
2550:..\src/interruptions.c ****             }
2551:..\src/interruptions.c ****         }
2552:..\src/interruptions.c ****     }
2553:..\src/interruptions.c ****     
2554:..\src/interruptions.c **** }
 8873              		.loc 1 2554 0 is_stmt 1
 8874 1234 00BF     		nop
 8875 1236 0C37     		adds	r7, r7, #12
 8876              		.cfi_def_cfa_offset 20
 8877 1238 BD46     		mov	sp, r7
 8878              		.cfi_def_cfa_register 13
 8879              		@ sp needed
 8880 123a F0BD     		pop	{r4, r5, r6, r7, pc}
 8881              	.L579:
 8882              		.align	2
 8883              	.L578:
 8884 123c 88010000 		.word	LR_counter.10663
 8885 1240 84010000 		.word	LR_mean_value.10665
 8886 1244 00000000 		.word	joy_LR_status
 8887 1248 00000000 		.word	interrupt_flag
 8888 124c 00000000 		.word	ADC_buf
 8889 1250 1F85EB51 		.word	1374389535
 8890 1254 00000000 		.word	emg_1_status
 8891 1258 00000000 		.word	emg_2_status
 8892 125c 00000000 		.word	joy_UD_status
 8893 1260 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8894 1264 72010000 		.word	idx.10670
 8895 1268 00000000 		.word	filt_emg
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 205


 8896 126c 00000000 		.word	g_adc_meas
 8897              		.cfi_endproc
 8898              	.LFE74:
 8899              		.size	analog_read_end, .-analog_read_end
 8900              		.section	.text.overcurrent_control,"ax",%progbits
 8901              		.align	2
 8902              		.global	overcurrent_control
 8903              		.thumb
 8904              		.thumb_func
 8905              		.type	overcurrent_control, %function
 8906              	overcurrent_control:
 8907              	.LFB75:
2555:..\src/interruptions.c **** 
2556:..\src/interruptions.c **** //==============================================================================
2557:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2558:..\src/interruptions.c **** //==============================================================================
2559:..\src/interruptions.c **** 
2560:..\src/interruptions.c **** void overcurrent_control() {
 8908              		.loc 1 2560 0
 8909              		.cfi_startproc
 8910              		@ args = 0, pretend = 0, frame = 8
 8911              		@ frame_needed = 1, uses_anonymous_args = 0
 8912              		@ link register save eliminated.
 8913 0000 80B4     		push	{r7}
 8914              		.cfi_def_cfa_offset 4
 8915              		.cfi_offset 7, -4
 8916 0002 83B0     		sub	sp, sp, #12
 8917              		.cfi_def_cfa_offset 16
 8918 0004 00AF     		add	r7, sp, #0
 8919              		.cfi_def_cfa_register 7
 8920              	.LBB11:
2561:..\src/interruptions.c ****     
2562:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8921              		.loc 1 2562 0
 8922 0006 0023     		movs	r3, #0
 8923 0008 FB71     		strb	r3, [r7, #7]
 8924 000a 6CE0     		b	.L581
 8925              	.L586:
2563:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8926              		.loc 1 2563 0
 8927 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8928 000e 3A49     		ldr	r1, .L588
 8929 0010 1346     		mov	r3, r2
 8930 0012 DB00     		lsls	r3, r3, #3
 8931 0014 9B1A     		subs	r3, r3, r2
 8932 0016 1B01     		lsls	r3, r3, #4
 8933 0018 0B44     		add	r3, r3, r1
 8934 001a 03F58673 		add	r3, r3, #268
 8935 001e B3F90030 		ldrsh	r3, [r3]
 8936 0022 002B     		cmp	r3, #0
 8937 0024 5CD0     		beq	.L582
 8938              	.LBB12:
2564:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8939              		.loc 1 2564 0
 8940 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8941 0028 3449     		ldr	r1, .L588+4
 8942 002a 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 206


 8943 002c DB00     		lsls	r3, r3, #3
 8944 002e 9B1A     		subs	r3, r3, r2
 8945 0030 1B01     		lsls	r3, r3, #4
 8946 0032 0B44     		add	r3, r3, r1
 8947 0034 03F58873 		add	r3, r3, #272
 8948 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8949 003a 1946     		mov	r1, r3
 8950 003c 304A     		ldr	r2, .L588+8
 8951 003e 3423     		movs	r3, #52
 8952 0040 03FB01F3 		mul	r3, r3, r1
 8953 0044 1344     		add	r3, r3, r2
 8954 0046 0C33     		adds	r3, r3, #12
 8955 0048 1B68     		ldr	r3, [r3]
 8956 004a 3B60     		str	r3, [r7]
2565:..\src/interruptions.c ****             // check if the current is over the limit
2566:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2567:..\src/interruptions.c ****                 if (curr < 0){
 8957              		.loc 1 2567 0
 8958 004c 3B68     		ldr	r3, [r7]
 8959 004e 002B     		cmp	r3, #0
 8960 0050 02DA     		bge	.L583
2568:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8961              		.loc 1 2568 0
 8962 0052 3B68     		ldr	r3, [r7]
 8963 0054 5B42     		negs	r3, r3
 8964 0056 3B60     		str	r3, [r7]
 8965              	.L583:
2569:..\src/interruptions.c ****                 }
2570:..\src/interruptions.c ****          //   }
2571:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8966              		.loc 1 2571 0
 8967 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8968 005a 2749     		ldr	r1, .L588
 8969 005c 1346     		mov	r3, r2
 8970 005e DB00     		lsls	r3, r3, #3
 8971 0060 9B1A     		subs	r3, r3, r2
 8972 0062 1B01     		lsls	r3, r3, #4
 8973 0064 0B44     		add	r3, r3, r1
 8974 0066 03F58673 		add	r3, r3, #268
 8975 006a B3F90030 		ldrsh	r3, [r3]
 8976 006e 1A46     		mov	r2, r3
 8977 0070 3B68     		ldr	r3, [r7]
 8978 0072 9A42     		cmp	r2, r3
 8979 0074 09DA     		bge	.L584
2572:..\src/interruptions.c ****                 //decrease pwm_limit
2573:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8980              		.loc 1 2573 0
 8981 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8982 0078 224A     		ldr	r2, .L588+12
 8983 007a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8984 007e 013A     		subs	r2, r2, #1
 8985 0080 91B2     		uxth	r1, r2
 8986 0082 204A     		ldr	r2, .L588+12
 8987 0084 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8988 0088 18E0     		b	.L587
 8989              	.L584:
2574:..\src/interruptions.c ****             // check if the current is in the safe zone
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 207


2575:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8990              		.loc 1 2575 0
 8991 008a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8992 008c 1A49     		ldr	r1, .L588
 8993 008e 1346     		mov	r3, r2
 8994 0090 DB00     		lsls	r3, r3, #3
 8995 0092 9B1A     		subs	r3, r3, r2
 8996 0094 1B01     		lsls	r3, r3, #4
 8997 0096 0B44     		add	r3, r3, r1
 8998 0098 03F58673 		add	r3, r3, #268
 8999 009c B3F90030 		ldrsh	r3, [r3]
 9000 00a0 A3F10A02 		sub	r2, r3, #10
 9001 00a4 3B68     		ldr	r3, [r7]
 9002 00a6 9A42     		cmp	r2, r3
 9003 00a8 08DD     		ble	.L587
2576:..\src/interruptions.c ****                 //increase pwm_limit
2577:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 9004              		.loc 1 2577 0
 9005 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9006 00ac 154A     		ldr	r2, .L588+12
 9007 00ae 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 9008 00b2 0132     		adds	r2, r2, #1
 9009 00b4 91B2     		uxth	r1, r2
 9010 00b6 134A     		ldr	r2, .L588+12
 9011 00b8 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9012              	.L587:
2578:..\src/interruptions.c ****             }
2579:..\src/interruptions.c **** 
2580:..\src/interruptions.c ****             // Bound pwm_limit
2581:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2582:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2583:..\src/interruptions.c ****             else 
2584:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 9013              		.loc 1 2584 0
 9014 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9015 00be 114A     		ldr	r2, .L588+12
 9016 00c0 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 9017 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9018 00c6 1049     		ldr	r1, .L588+16
 9019 00c8 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9020 00cc 9A42     		cmp	r2, r3
 9021 00ce 07D9     		bls	.L582
2585:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 9022              		.loc 1 2585 0
 9023 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9024 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9025 00d4 0C49     		ldr	r1, .L588+16
 9026 00d6 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 9027 00da 0A4A     		ldr	r2, .L588+12
 9028 00dc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9029              	.L582:
 9030              	.LBE12:
2562:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 9031              		.loc 1 2562 0 discriminator 2
 9032 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9033 00e2 0133     		adds	r3, r3, #1
 9034 00e4 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 208


 9035              	.L581:
2562:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 9036              		.loc 1 2562 0 is_stmt 0 discriminator 1
 9037 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9038 00e8 012B     		cmp	r3, #1
 9039 00ea 8FD9     		bls	.L586
 9040              	.LBE11:
2586:..\src/interruptions.c ****         }
2587:..\src/interruptions.c ****     }
2588:..\src/interruptions.c **** }
 9041              		.loc 1 2588 0 is_stmt 1
 9042 00ec 00BF     		nop
 9043 00ee 0C37     		adds	r7, r7, #12
 9044              		.cfi_def_cfa_offset 4
 9045 00f0 BD46     		mov	sp, r7
 9046              		.cfi_def_cfa_register 13
 9047              		@ sp needed
 9048 00f2 80BC     		pop	{r7}
 9049              		.cfi_restore 7
 9050              		.cfi_def_cfa_offset 0
 9051 00f4 7047     		bx	lr
 9052              	.L589:
 9053 00f6 00BF     		.align	2
 9054              	.L588:
 9055 00f8 00000000 		.word	c_mem
 9056 00fc 00000000 		.word	g_mem
 9057 0100 00000000 		.word	g_meas
 9058 0104 00000000 		.word	dev_pwm_limit
 9059 0108 00000000 		.word	dev_pwm_sat
 9060              		.cfi_endproc
 9061              	.LFE75:
 9062              		.size	overcurrent_control, .-overcurrent_control
 9063              		.section	.text.pwm_limit_search,"ax",%progbits
 9064              		.align	2
 9065              		.global	pwm_limit_search
 9066              		.thumb
 9067              		.thumb_func
 9068              		.type	pwm_limit_search, %function
 9069              	pwm_limit_search:
 9070              	.LFB76:
2589:..\src/interruptions.c **** 
2590:..\src/interruptions.c **** //==============================================================================
2591:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2592:..\src/interruptions.c **** //==============================================================================
2593:..\src/interruptions.c **** 
2594:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 9071              		.loc 1 2594 0
 9072              		.cfi_startproc
 9073              		@ args = 0, pretend = 0, frame = 16
 9074              		@ frame_needed = 1, uses_anonymous_args = 0
 9075              		@ link register save eliminated.
 9076 0000 80B4     		push	{r7}
 9077              		.cfi_def_cfa_offset 4
 9078              		.cfi_offset 7, -4
 9079 0002 85B0     		sub	sp, sp, #20
 9080              		.cfi_def_cfa_offset 24
 9081 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 209


 9082              		.cfi_def_cfa_register 7
 9083 0006 0346     		mov	r3, r0
 9084 0008 FB71     		strb	r3, [r7, #7]
2595:..\src/interruptions.c **** 
2596:..\src/interruptions.c ****     uint8 CYDATA index;
2597:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 9085              		.loc 1 2597 0
 9086 000a 46F28473 		movw	r3, #26500
 9087 000e FB81     		strh	r3, [r7, #14]	@ movhi
2598:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 9088              		.loc 1 2598 0
 9089 0010 42F6EC43 		movw	r3, #11500
 9090 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2599:..\src/interruptions.c ****     
2600:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 9091              		.loc 1 2600 0
 9092 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9093 0018 1F4A     		ldr	r2, .L597
 9094 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9095 001e FB89     		ldrh	r3, [r7, #14]
 9096 0020 9A42     		cmp	r2, r3
 9097 0022 05DD     		ble	.L591
2601:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 9098              		.loc 1 2601 0
 9099 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9100 0026 1D4A     		ldr	r2, .L597+4
 9101 0028 0021     		movs	r1, #0
 9102 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2602:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2603:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2604:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2605:..\src/interruptions.c ****         } else {
2606:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2607:..\src/interruptions.c ****         }
2608:..\src/interruptions.c ****     } else {
2609:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2610:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2611:..\src/interruptions.c ****     }
2612:..\src/interruptions.c **** }
 9103              		.loc 1 2612 0
 9104 002e 2EE0     		b	.L596
 9105              	.L591:
2602:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 9106              		.loc 1 2602 0
 9107 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9108 0032 194A     		ldr	r2, .L597
 9109 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9110 0038 BB89     		ldrh	r3, [r7, #12]
 9111 003a 9A42     		cmp	r2, r3
 9112 003c 17DA     		bge	.L593
2603:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 9113              		.loc 1 2603 0
 9114 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 9115 0040 1749     		ldr	r1, .L597+8
 9116 0042 1346     		mov	r3, r2
 9117 0044 DB00     		lsls	r3, r3, #3
 9118 0046 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 210


 9119 0048 1B01     		lsls	r3, r3, #4
 9120 004a 0B44     		add	r3, r3, r1
 9121 004c E233     		adds	r3, r3, #226
 9122 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9123 0050 022B     		cmp	r3, #2
 9124 0052 06D1     		bne	.L594
2604:..\src/interruptions.c ****         } else {
 9125              		.loc 1 2604 0
 9126 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9127 0056 114A     		ldr	r2, .L597+4
 9128 0058 40F6A931 		movw	r1, #2985
 9129 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9130              		.loc 1 2612 0
 9131 0060 15E0     		b	.L596
 9132              	.L594:
2606:..\src/interruptions.c ****         }
 9133              		.loc 1 2606 0
 9134 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9135 0064 0D4A     		ldr	r2, .L597+4
 9136 0066 6421     		movs	r1, #100
 9137 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9138              		.loc 1 2612 0
 9139 006c 0FE0     		b	.L596
 9140              	.L593:
2609:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 9141              		.loc 1 2609 0
 9142 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9143 0070 094A     		ldr	r2, .L597
 9144 0072 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9145 0076 BB89     		ldrh	r3, [r7, #12]
 9146 0078 D31A     		subs	r3, r2, r3
 9147 007a 5B12     		asrs	r3, r3, #9
 9148 007c FB72     		strb	r3, [r7, #11]
2610:..\src/interruptions.c ****     }
 9149              		.loc 1 2610 0
 9150 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9151 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9152 0082 0849     		ldr	r1, .L597+12
 9153 0084 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9154 0086 91B2     		uxth	r1, r2
 9155 0088 044A     		ldr	r2, .L597+4
 9156 008a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9157              	.L596:
 9158              		.loc 1 2612 0
 9159 008e 00BF     		nop
 9160 0090 1437     		adds	r7, r7, #20
 9161              		.cfi_def_cfa_offset 4
 9162 0092 BD46     		mov	sp, r7
 9163              		.cfi_def_cfa_register 13
 9164              		@ sp needed
 9165 0094 80BC     		pop	{r7}
 9166              		.cfi_restore 7
 9167              		.cfi_def_cfa_offset 0
 9168 0096 7047     		bx	lr
 9169              	.L598:
 9170              		.align	2
 9171              	.L597:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 211


 9172 0098 00000000 		.word	dev_tension
 9173 009c 00000000 		.word	dev_pwm_sat
 9174 00a0 00000000 		.word	c_mem
 9175 00a4 00000000 		.word	pwm_preload_values
 9176              		.cfi_endproc
 9177              	.LFE76:
 9178              		.size	pwm_limit_search, .-pwm_limit_search
 9179              		.global	__aeabi_ui2f
 9180              		.global	__aeabi_f2d
 9181              		.global	__aeabi_ddiv
 9182              		.global	__aeabi_dcmpgt
 9183              		.section	.text.cycles_counter_update,"ax",%progbits
 9184              		.align	2
 9185              		.global	cycles_counter_update
 9186              		.thumb
 9187              		.thumb_func
 9188              		.type	cycles_counter_update, %function
 9189              	cycles_counter_update:
 9190              	.LFB77:
2613:..\src/interruptions.c **** 
2614:..\src/interruptions.c **** //==============================================================================
2615:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2616:..\src/interruptions.c **** //==============================================================================
2617:..\src/interruptions.c **** 
2618:..\src/interruptions.c **** void cycles_counter_update() {
 9191              		.loc 1 2618 0
 9192              		.cfi_startproc
 9193              		@ args = 0, pretend = 0, frame = 24
 9194              		@ frame_needed = 1, uses_anonymous_args = 0
 9195 0000 90B5     		push	{r4, r7, lr}
 9196              		.cfi_def_cfa_offset 12
 9197              		.cfi_offset 4, -12
 9198              		.cfi_offset 7, -8
 9199              		.cfi_offset 14, -4
 9200 0002 87B0     		sub	sp, sp, #28
 9201              		.cfi_def_cfa_offset 40
 9202 0004 00AF     		add	r7, sp, #0
 9203              		.cfi_def_cfa_register 7
2619:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2620:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2621:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2622:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2623:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2624:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2625:..\src/interruptions.c ****     static int32 thr_pos = 0;
2626:..\src/interruptions.c ****     static int32 max_pos = 0;
2627:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2628:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9204              		.loc 1 2628 0
 9205 0006 0023     		movs	r3, #0
 9206 0008 FB60     		str	r3, [r7, #12]
 9207 000a 0023     		movs	r3, #0
 9208 000c BB60     		str	r3, [r7, #8]
 9209 000e 0023     		movs	r3, #0
 9210 0010 3B61     		str	r3, [r7, #16]
2629:..\src/interruptions.c ****     int32 step;
2630:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 212


2631:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2632:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2633:..\src/interruptions.c **** 
2634:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9211              		.loc 1 2634 0
 9212 0012 A64B     		ldr	r3, .L666
 9213 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9214 0018 1946     		mov	r1, r3
 9215 001a A54A     		ldr	r2, .L666+4
 9216 001c 3423     		movs	r3, #52
 9217 001e 03FB01F3 		mul	r3, r3, r1
 9218 0022 1344     		add	r3, r3, r2
 9219 0024 1A68     		ldr	r2, [r3]
 9220 0026 A14B     		ldr	r3, .L666
 9221 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9222 002c 1846     		mov	r0, r3
 9223 002e 9F49     		ldr	r1, .L666
 9224 0030 0346     		mov	r3, r0
 9225 0032 5B00     		lsls	r3, r3, #1
 9226 0034 0344     		add	r3, r3, r0
 9227 0036 1B01     		lsls	r3, r3, #4
 9228 0038 0B44     		add	r3, r3, r1
 9229 003a 03F29513 		addw	r3, r3, #405
 9230 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9231 0040 42FA03F3 		asr	r3, r2, r3
 9232 0044 FB60     		str	r3, [r7, #12]
2635:..\src/interruptions.c ****         
2636:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2637:..\src/interruptions.c ****     switch (pos_cycle_status){
 9233              		.loc 1 2637 0
 9234 0046 9B4B     		ldr	r3, .L666+8
 9235 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9236 004a 012B     		cmp	r3, #1
 9237 004c 3DD0     		beq	.L601
 9238 004e 022B     		cmp	r3, #2
 9239 0050 74D0     		beq	.L602
 9240 0052 002B     		cmp	r3, #0
 9241 0054 40F02781 		bne	.L600
2638:..\src/interruptions.c ****         case STATE_INACTIVE:
2639:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9242              		.loc 1 2639 0
 9243 0058 944B     		ldr	r3, .L666
 9244 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9245 005e 072B     		cmp	r3, #7
 9246 0060 04D0     		beq	.L604
 9247              		.loc 1 2639 0 is_stmt 0 discriminator 1
 9248 0062 954B     		ldr	r3, .L666+12
 9249 0064 93F90030 		ldrsb	r3, [r3]
 9250 0068 012B     		cmp	r3, #1
 9251 006a 0CD0     		beq	.L605
 9252              	.L604:
 9253              		.loc 1 2639 0 discriminator 3
 9254 006c 8F4B     		ldr	r3, .L666
 9255 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9256 0072 072B     		cmp	r3, #7
 9257 0074 40F01481 		bne	.L658
 9258              		.loc 1 2639 0 discriminator 4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 213


 9259 0078 8F4B     		ldr	r3, .L666+12
 9260 007a 93F90030 		ldrsb	r3, [r3]
 9261 007e B3F1FF3F 		cmp	r3, #-1
 9262 0082 40F00D81 		bne	.L658
 9263              	.L605:
2640:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9264              		.loc 1 2640 0 is_stmt 1
 9265 0086 8D4A     		ldr	r2, .L666+16
 9266 0088 FB68     		ldr	r3, [r7, #12]
 9267 008a 1360     		str	r3, [r2]
2641:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9268              		.loc 1 2641 0
 9269 008c 8C4B     		ldr	r3, .L666+20
 9270 008e 1A68     		ldr	r2, [r3]
 9271 0090 8A4B     		ldr	r3, .L666+16
 9272 0092 1B68     		ldr	r3, [r3]
 9273 0094 9A42     		cmp	r2, r3
 9274 0096 05DD     		ble	.L607
 9275              		.loc 1 2641 0 is_stmt 0 discriminator 1
 9276 0098 894B     		ldr	r3, .L666+20
 9277 009a 1A68     		ldr	r2, [r3]
 9278 009c 874B     		ldr	r3, .L666+16
 9279 009e 1B68     		ldr	r3, [r3]
 9280 00a0 D31A     		subs	r3, r2, r3
 9281 00a2 04E0     		b	.L608
 9282              	.L607:
 9283              		.loc 1 2641 0 discriminator 2
 9284 00a4 854B     		ldr	r3, .L666+16
 9285 00a6 1A68     		ldr	r2, [r3]
 9286 00a8 854B     		ldr	r3, .L666+20
 9287 00aa 1B68     		ldr	r3, [r3]
 9288 00ac D31A     		subs	r3, r2, r3
 9289              	.L608:
 9290              		.loc 1 2641 0 discriminator 4
 9291 00ae BB60     		str	r3, [r7, #8]
2642:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9292              		.loc 1 2642 0 is_stmt 1 discriminator 4
 9293 00b0 BB68     		ldr	r3, [r7, #8]
 9294 00b2 142B     		cmp	r3, #20
 9295 00b4 05DD     		ble	.L609
2643:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9296              		.loc 1 2643 0
 9297 00b6 7D4B     		ldr	r3, .L666
 9298 00b8 5A6D     		ldr	r2, [r3, #84]
 9299 00ba BB68     		ldr	r3, [r7, #8]
 9300 00bc 1344     		add	r3, r3, r2
 9301 00be 7B4A     		ldr	r2, .L666
 9302 00c0 5365     		str	r3, [r2, #84]
 9303              	.L609:
2644:..\src/interruptions.c ****                 }
2645:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9304              		.loc 1 2645 0
 9305 00c2 7C4B     		ldr	r3, .L666+8
 9306 00c4 0122     		movs	r2, #1
 9307 00c6 1A70     		strb	r2, [r3]
2646:..\src/interruptions.c ****             }
2647:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 214


 9308              		.loc 1 2647 0
 9309 00c8 EAE0     		b	.L658
 9310              	.L601:
2648:..\src/interruptions.c ****         case STATE_ACTIVE:
2649:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9311              		.loc 1 2649 0
 9312 00ca 784B     		ldr	r3, .L666
 9313 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9314 00d0 072B     		cmp	r3, #7
 9315 00d2 05D0     		beq	.L610
 9316              		.loc 1 2649 0 is_stmt 0 discriminator 1
 9317 00d4 784B     		ldr	r3, .L666+12
 9318 00d6 93F90030 		ldrsb	r3, [r3]
 9319 00da B3F1FF3F 		cmp	r3, #-1
 9320 00de 0BD0     		beq	.L611
 9321              	.L610:
 9322              		.loc 1 2649 0 discriminator 3
 9323 00e0 724B     		ldr	r3, .L666
 9324 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9325 00e6 072B     		cmp	r3, #7
 9326 00e8 40F0DC80 		bne	.L659
 9327              		.loc 1 2649 0 discriminator 4
 9328 00ec 724B     		ldr	r3, .L666+12
 9329 00ee 93F90030 		ldrsb	r3, [r3]
 9330 00f2 012B     		cmp	r3, #1
 9331 00f4 40F0D680 		bne	.L659
 9332              	.L611:
2650:..\src/interruptions.c ****                 max_pos = curr_pos;
 9333              		.loc 1 2650 0 is_stmt 1
 9334 00f8 714A     		ldr	r2, .L666+20
 9335 00fa FB68     		ldr	r3, [r7, #12]
 9336 00fc 1360     		str	r3, [r2]
2651:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9337              		.loc 1 2651 0
 9338 00fe 704B     		ldr	r3, .L666+20
 9339 0100 1A68     		ldr	r2, [r3]
 9340 0102 6E4B     		ldr	r3, .L666+16
 9341 0104 1B68     		ldr	r3, [r3]
 9342 0106 9A42     		cmp	r2, r3
 9343 0108 05DD     		ble	.L613
 9344              		.loc 1 2651 0 is_stmt 0 discriminator 1
 9345 010a 6D4B     		ldr	r3, .L666+20
 9346 010c 1A68     		ldr	r2, [r3]
 9347 010e 6B4B     		ldr	r3, .L666+16
 9348 0110 1B68     		ldr	r3, [r3]
 9349 0112 D31A     		subs	r3, r2, r3
 9350 0114 04E0     		b	.L614
 9351              	.L613:
 9352              		.loc 1 2651 0 discriminator 2
 9353 0116 694B     		ldr	r3, .L666+16
 9354 0118 1A68     		ldr	r2, [r3]
 9355 011a 694B     		ldr	r3, .L666+20
 9356 011c 1B68     		ldr	r3, [r3]
 9357 011e D31A     		subs	r3, r2, r3
 9358              	.L614:
 9359              		.loc 1 2651 0 discriminator 4
 9360 0120 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 215


2652:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9361              		.loc 1 2652 0 is_stmt 1 discriminator 4
 9362 0122 BB68     		ldr	r3, [r7, #8]
 9363 0124 142B     		cmp	r3, #20
 9364 0126 05DD     		ble	.L615
2653:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9365              		.loc 1 2653 0
 9366 0128 604B     		ldr	r3, .L666
 9367 012a 5A6D     		ldr	r2, [r3, #84]
 9368 012c BB68     		ldr	r3, [r7, #8]
 9369 012e 1344     		add	r3, r3, r2
 9370 0130 5E4A     		ldr	r2, .L666
 9371 0132 5365     		str	r3, [r2, #84]
 9372              	.L615:
2654:..\src/interruptions.c ****                 }
2655:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9373              		.loc 1 2655 0
 9374 0134 5F4B     		ldr	r3, .L666+8
 9375 0136 0222     		movs	r2, #2
 9376 0138 1A70     		strb	r2, [r3]
2656:..\src/interruptions.c ****             }
2657:..\src/interruptions.c ****             break;
 9377              		.loc 1 2657 0
 9378 013a B3E0     		b	.L659
 9379              	.L602:
2658:..\src/interruptions.c ****         case COUNTER_INC:
2659:..\src/interruptions.c **** 
2660:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9380              		.loc 1 2660 0
 9381 013c 604B     		ldr	r3, .L666+20
 9382 013e 1A68     		ldr	r2, [r3]
 9383 0140 5E4B     		ldr	r3, .L666+16
 9384 0142 1B68     		ldr	r3, [r3]
 9385 0144 9A42     		cmp	r2, r3
 9386 0146 05DD     		ble	.L616
 9387              		.loc 1 2660 0 is_stmt 0 discriminator 1
 9388 0148 5D4B     		ldr	r3, .L666+20
 9389 014a 1A68     		ldr	r2, [r3]
 9390 014c 5B4B     		ldr	r3, .L666+16
 9391 014e 1B68     		ldr	r3, [r3]
 9392 0150 D31A     		subs	r3, r2, r3
 9393 0152 04E0     		b	.L617
 9394              	.L616:
 9395              		.loc 1 2660 0 discriminator 2
 9396 0154 594B     		ldr	r3, .L666+16
 9397 0156 1A68     		ldr	r2, [r3]
 9398 0158 594B     		ldr	r3, .L666+20
 9399 015a 1B68     		ldr	r3, [r3]
 9400 015c D31A     		subs	r3, r2, r3
 9401              	.L617:
 9402              		.loc 1 2660 0 discriminator 4
 9403 015e BB60     		str	r3, [r7, #8]
2661:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9404              		.loc 1 2661 0 is_stmt 1 discriminator 4
 9405 0160 584B     		ldr	r3, .L666+24
 9406 0162 1B68     		ldr	r3, [r3]
 9407 0164 BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 216


 9408 0166 9A42     		cmp	r2, r3
 9409 0168 40F39680 		ble	.L618
2662:..\src/interruptions.c ****                 //update position histogram
2663:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9410              		.loc 1 2663 0
 9411 016c 4F4B     		ldr	r3, .L666
 9412 016e D3F8E820 		ldr	r2, [r3, #232]
 9413 0172 4E4B     		ldr	r3, .L666
 9414 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9415 0178 1846     		mov	r0, r3
 9416 017a 4C49     		ldr	r1, .L666
 9417 017c 0346     		mov	r3, r0
 9418 017e 5B00     		lsls	r3, r3, #1
 9419 0180 0344     		add	r3, r3, r0
 9420 0182 1B01     		lsls	r3, r3, #4
 9421 0184 0B44     		add	r3, r3, r1
 9422 0186 03F29513 		addw	r3, r3, #405
 9423 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9424 018c 42FA03F3 		asr	r3, r2, r3
 9425 0190 4D4A     		ldr	r2, .L666+28
 9426 0192 82FB0312 		smull	r1, r2, r2, r3
 9427 0196 9210     		asrs	r2, r2, #2
 9428 0198 DB17     		asrs	r3, r3, #31
 9429 019a D31A     		subs	r3, r2, r3
 9430 019c 7B60     		str	r3, [r7, #4]
2664:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9431              		.loc 1 2664 0
 9432 019e 474B     		ldr	r3, .L666+16
 9433 01a0 1A68     		ldr	r2, [r3]
 9434 01a2 7B68     		ldr	r3, [r7, #4]
 9435 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9436 01a8 FB70     		strb	r3, [r7, #3]
2665:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9437              		.loc 1 2665 0
 9438 01aa 454B     		ldr	r3, .L666+20
 9439 01ac 1A68     		ldr	r2, [r3]
 9440 01ae 7B68     		ldr	r3, [r7, #4]
 9441 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9442 01b4 BB70     		strb	r3, [r7, #2]
2666:..\src/interruptions.c ****                 
2667:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2668:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9443              		.loc 1 2668 0
 9444 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9445 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9446 01ba 9342     		cmp	r3, r2
 9447 01bc 28BF     		it	cs
 9448 01be 1346     		movcs	r3, r2
 9449 01c0 7B70     		strb	r3, [r7, #1]
2669:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9450              		.loc 1 2669 0
 9451 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9452 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9453 01c6 9342     		cmp	r3, r2
 9454 01c8 38BF     		it	cc
 9455 01ca 1346     		movcc	r3, r2
 9456 01cc 3B70     		strb	r3, [r7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 217


2670:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9457              		.loc 1 2670 0
 9458 01ce 7B78     		ldrb	r3, [r7, #1]
 9459 01d0 FB75     		strb	r3, [r7, #23]
 9460 01d2 0DE0     		b	.L619
 9461              	.L621:
2671:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2672:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9462              		.loc 1 2672 0 discriminator 4
 9463 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9464 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9465 01d8 3449     		ldr	r1, .L666
 9466 01da 0632     		adds	r2, r2, #6
 9467 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9468 01e0 0132     		adds	r2, r2, #1
 9469 01e2 3249     		ldr	r1, .L666
 9470 01e4 0633     		adds	r3, r3, #6
 9471 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2670:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9472              		.loc 1 2670 0 discriminator 4
 9473 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9474 01ec 0133     		adds	r3, r3, #1
 9475 01ee FB75     		strb	r3, [r7, #23]
 9476              	.L619:
2670:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9477              		.loc 1 2670 0 is_stmt 0 discriminator 1
 9478 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9479 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9480 01f4 9A42     		cmp	r2, r3
 9481 01f6 02D8     		bhi	.L620
2670:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9482              		.loc 1 2670 0 discriminator 3
 9483 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9484 01fa 092B     		cmp	r3, #9
 9485 01fc EAD9     		bls	.L621
 9486              	.L620:
2673:..\src/interruptions.c ****                 }
2674:..\src/interruptions.c ****                 
2675:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2676:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9487              		.loc 1 2676 0 is_stmt 1
 9488 01fe 2B4B     		ldr	r3, .L666
 9489 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9490 0204 002B     		cmp	r3, #0
 9491 0206 00DA     		bge	.L622
 9492 0208 0333     		adds	r3, r3, #3
 9493              	.L622:
 9494 020a 9B10     		asrs	r3, r3, #2
 9495 020c 1BB2     		sxth	r3, r3
 9496 020e 7B60     		str	r3, [r7, #4]
2677:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9497              		.loc 1 2677 0
 9498 0210 264B     		ldr	r3, .L666
 9499 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9500 0216 012B     		cmp	r3, #1
 9501 0218 0CD1     		bne	.L623
2678:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 218


 9502              		.loc 1 2678 0
 9503 021a 244B     		ldr	r3, .L666
 9504 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9505 0220 1946     		mov	r1, r3
 9506 0222 234A     		ldr	r2, .L666+4
 9507 0224 3423     		movs	r3, #52
 9508 0226 03FB01F3 		mul	r3, r3, r1
 9509 022a 1344     		add	r3, r3, r2
 9510 022c 1433     		adds	r3, r3, #20
 9511 022e 1B68     		ldr	r3, [r3]
 9512 0230 3B61     		str	r3, [r7, #16]
 9513 0232 0BE0     		b	.L624
 9514              	.L623:
2679:..\src/interruptions.c ****                 else
2680:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9515              		.loc 1 2680 0
 9516 0234 1D4B     		ldr	r3, .L666
 9517 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9518 023a 1946     		mov	r1, r3
 9519 023c 1C4A     		ldr	r2, .L666+4
 9520 023e 3423     		movs	r3, #52
 9521 0240 03FB01F3 		mul	r3, r3, r1
 9522 0244 1344     		add	r3, r3, r2
 9523 0246 0C33     		adds	r3, r3, #12
 9524 0248 1B68     		ldr	r3, [r3]
 9525 024a 3B61     		str	r3, [r7, #16]
 9526              	.L624:
2681:..\src/interruptions.c **** 
2682:..\src/interruptions.c ****                 if (curr_ref < 0){
 9527              		.loc 1 2682 0
 9528 024c 3B69     		ldr	r3, [r7, #16]
 9529 024e 002B     		cmp	r3, #0
 9530 0250 02DA     		bge	.L625
2683:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9531              		.loc 1 2683 0
 9532 0252 3B69     		ldr	r3, [r7, #16]
 9533 0254 5B42     		negs	r3, r3
 9534 0256 3B61     		str	r3, [r7, #16]
 9535              	.L625:
2684:..\src/interruptions.c ****                 }
2685:..\src/interruptions.c ****                 
2686:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9536              		.loc 1 2686 0
 9537 0258 144B     		ldr	r3, .L666
 9538 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9539 025e 1A46     		mov	r2, r3
 9540 0260 3B69     		ldr	r3, [r7, #16]
 9541 0262 9A42     		cmp	r2, r3
 9542 0264 05DA     		bge	.L626
2687:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9543              		.loc 1 2687 0
 9544 0266 114B     		ldr	r3, .L666
 9545 0268 DB6C     		ldr	r3, [r3, #76]
 9546 026a 0133     		adds	r3, r3, #1
 9547 026c 0F4A     		ldr	r2, .L666
 9548 026e D364     		str	r3, [r2, #76]
 9549 0270 12E0     		b	.L618
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 219


 9550              	.L626:
2688:..\src/interruptions.c ****                 else
2689:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9551              		.loc 1 2689 0
 9552 0272 3A69     		ldr	r2, [r7, #16]
 9553 0274 7B68     		ldr	r3, [r7, #4]
 9554 0276 92FBF3F3 		sdiv	r3, r2, r3
 9555 027a DBB2     		uxtb	r3, r3
 9556 027c 3969     		ldr	r1, [r7, #16]
 9557 027e 7A68     		ldr	r2, [r7, #4]
 9558 0280 91FBF2F2 		sdiv	r2, r1, r2
 9559 0284 D2B2     		uxtb	r2, r2
 9560 0286 0949     		ldr	r1, .L666
 9561 0288 1032     		adds	r2, r2, #16
 9562 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9563 028e 0132     		adds	r2, r2, #1
 9564 0290 0649     		ldr	r1, .L666
 9565 0292 1033     		adds	r3, r3, #16
 9566 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9567              	.L618:
2690:..\src/interruptions.c ****             }
2691:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9568              		.loc 1 2691 0
 9569 0298 064B     		ldr	r3, .L666+8
 9570 029a 0022     		movs	r2, #0
 9571 029c 1A70     		strb	r2, [r3]
2692:..\src/interruptions.c ****             break;
 9572              		.loc 1 2692 0
 9573 029e 02E0     		b	.L600
 9574              	.L658:
2647:..\src/interruptions.c ****         case STATE_ACTIVE:
 9575              		.loc 1 2647 0
 9576 02a0 00BF     		nop
 9577 02a2 00E0     		b	.L600
 9578              	.L659:
2657:..\src/interruptions.c ****         case COUNTER_INC:
 9579              		.loc 1 2657 0
 9580 02a4 00BF     		nop
 9581              	.L600:
2693:..\src/interruptions.c ****     }
2694:..\src/interruptions.c ****     
2695:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2696:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9582              		.loc 1 2696 0
 9583 02a6 0023     		movs	r3, #0
 9584 02a8 FB75     		strb	r3, [r7, #23]
 9585 02aa 64E0     		b	.L627
 9586              	.L667:
 9587              		.align	2
 9588              	.L666:
 9589 02ac 00000000 		.word	g_mem
 9590 02b0 00000000 		.word	g_meas
 9591 02b4 8A010000 		.word	pos_cycle_status.10741
 9592 02b8 00000000 		.word	pwm_sign
 9593 02bc 8C010000 		.word	thr_pos.10747
 9594 02c0 90010000 		.word	max_pos.10748
 9595 02c4 10000000 		.word	bin_threshold.10745
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 220


 9596 02c8 67666666 		.word	1717986919
 9597              	.L636:
2697:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9598              		.loc 1 2697 0
 9599 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9600 02ce A34A     		ldr	r2, .L668
 9601 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9602 02d2 012B     		cmp	r3, #1
 9603 02d4 18D0     		beq	.L629
 9604 02d6 022B     		cmp	r3, #2
 9605 02d8 37D0     		beq	.L630
 9606 02da 002B     		cmp	r3, #0
 9607 02dc 48D1     		bne	.L628
2698:..\src/interruptions.c ****             case STATE_INACTIVE:
2699:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9608              		.loc 1 2699 0
 9609 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9610 02e0 9F4A     		ldr	r2, .L668+4
 9611 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9612 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9613 02e8 9E49     		ldr	r1, .L668+8
 9614 02ea F832     		adds	r2, r2, #248
 9615 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9616 02f0 9342     		cmp	r3, r2
 9617 02f2 3ADD     		ble	.L660
2700:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9618              		.loc 1 2700 0
 9619 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9620 02f6 9C49     		ldr	r1, .L668+12
 9621 02f8 FA68     		ldr	r2, [r7, #12]
 9622 02fa 41F82320 		str	r2, [r1, r3, lsl #2]
2701:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9623              		.loc 1 2701 0
 9624 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9625 0300 964A     		ldr	r2, .L668
 9626 0302 0121     		movs	r1, #1
 9627 0304 D154     		strb	r1, [r2, r3]
2702:..\src/interruptions.c ****                 }
2703:..\src/interruptions.c ****                 break;
 9628              		.loc 1 2703 0
 9629 0306 30E0     		b	.L660
 9630              	.L629:
2704:..\src/interruptions.c ****             case STATE_ACTIVE:
2705:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9631              		.loc 1 2705 0
 9632 0308 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9633 030a 954A     		ldr	r2, .L668+4
 9634 030c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9635 0310 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9636 0312 9449     		ldr	r1, .L668+8
 9637 0314 F833     		adds	r3, r3, #248
 9638 0316 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9639 031a 0A3B     		subs	r3, r3, #10
 9640 031c 9A42     		cmp	r2, r3
 9641 031e 26DA     		bge	.L661
2706:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9642              		.loc 1 2706 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 221


 9643 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9644 0322 914A     		ldr	r2, .L668+12
 9645 0324 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9646 0328 FB68     		ldr	r3, [r7, #12]
 9647 032a D31A     		subs	r3, r2, r3
 9648 032c 002B     		cmp	r3, #0
 9649 032e B8BF     		it	lt
 9650 0330 5B42     		rsblt	r3, r3, #0
 9651 0332 C82B     		cmp	r3, #200
 9652 0334 04DD     		ble	.L634
2707:..\src/interruptions.c ****                         emg_cycle_status[i] = COUNTER_INC;
 9653              		.loc 1 2707 0
 9654 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9655 0338 884A     		ldr	r2, .L668
 9656 033a 0221     		movs	r1, #2
 9657 033c D154     		strb	r1, [r2, r3]
2708:..\src/interruptions.c ****                     }
2709:..\src/interruptions.c ****                     else {
2710:..\src/interruptions.c ****                         emg_cycle_status[i] = STATE_INACTIVE;
2711:..\src/interruptions.c ****                     }
2712:..\src/interruptions.c ****                 }
2713:..\src/interruptions.c ****                 break;
 9658              		.loc 1 2713 0
 9659 033e 16E0     		b	.L661
 9660              	.L634:
2710:..\src/interruptions.c ****                     }
 9661              		.loc 1 2710 0
 9662 0340 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9663 0342 864A     		ldr	r2, .L668
 9664 0344 0021     		movs	r1, #0
 9665 0346 D154     		strb	r1, [r2, r3]
 9666              		.loc 1 2713 0
 9667 0348 11E0     		b	.L661
 9668              	.L630:
2714:..\src/interruptions.c ****             case COUNTER_INC:
2715:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9669              		.loc 1 2715 0
 9670 034a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9671 034c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9672 034e 8549     		ldr	r1, .L668+8
 9673 0350 0432     		adds	r2, r2, #4
 9674 0352 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9675 0356 0132     		adds	r2, r2, #1
 9676 0358 8249     		ldr	r1, .L668+8
 9677 035a 0433     		adds	r3, r3, #4
 9678 035c 41F82320 		str	r2, [r1, r3, lsl #2]
2716:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9679              		.loc 1 2716 0
 9680 0360 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9681 0362 7E4A     		ldr	r2, .L668
 9682 0364 0021     		movs	r1, #0
 9683 0366 D154     		strb	r1, [r2, r3]
2717:..\src/interruptions.c ****                 break;
 9684              		.loc 1 2717 0
 9685 0368 02E0     		b	.L628
 9686              	.L660:
2703:..\src/interruptions.c ****             case STATE_ACTIVE:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 222


 9687              		.loc 1 2703 0
 9688 036a 00BF     		nop
 9689 036c 00E0     		b	.L628
 9690              	.L661:
2713:..\src/interruptions.c ****             case COUNTER_INC:
 9691              		.loc 1 2713 0
 9692 036e 00BF     		nop
 9693              	.L628:
2696:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9694              		.loc 1 2696 0 discriminator 2
 9695 0370 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9696 0372 0133     		adds	r3, r3, #1
 9697 0374 FB75     		strb	r3, [r7, #23]
 9698              	.L627:
2696:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9699              		.loc 1 2696 0 is_stmt 0 discriminator 1
 9700 0376 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9701 0378 012B     		cmp	r3, #1
 9702 037a 07D8     		bhi	.L635
2696:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9703              		.loc 1 2696 0 discriminator 3
 9704 037c 7B4B     		ldr	r3, .L668+16
 9705 037e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9706 0380 002B     		cmp	r3, #0
 9707 0382 03D1     		bne	.L635
2696:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9708              		.loc 1 2696 0 discriminator 4
 9709 0384 7A4B     		ldr	r3, .L668+20
 9710 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9711 0388 002B     		cmp	r3, #0
 9712 038a 9FD0     		beq	.L636
 9713              	.L635:
2718:..\src/interruptions.c ****         }
2719:..\src/interruptions.c ****     }
2720:..\src/interruptions.c ****     
2721:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2722:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9714              		.loc 1 2722 0 is_stmt 1
 9715 038c 0023     		movs	r3, #0
 9716 038e FB75     		strb	r3, [r7, #23]
 9717 0390 87E0     		b	.L637
 9718              	.L648:
2723:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9719              		.loc 1 2723 0
 9720 0392 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9721 0394 774A     		ldr	r2, .L668+24
 9722 0396 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9723 0398 012B     		cmp	r3, #1
 9724 039a 18D0     		beq	.L639
 9725 039c 022B     		cmp	r3, #2
 9726 039e 67D0     		beq	.L640
 9727 03a0 002B     		cmp	r3, #0
 9728 03a2 7BD1     		bne	.L638
2724:..\src/interruptions.c ****             case STATE_INACTIVE:
2725:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9729              		.loc 1 2725 0
 9730 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 223


 9731 03a6 6E4A     		ldr	r2, .L668+4
 9732 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9733 03ac 724B     		ldr	r3, .L668+28
 9734 03ae 1B68     		ldr	r3, [r3]
 9735 03b0 9A42     		cmp	r2, r3
 9736 03b2 70DD     		ble	.L662
2726:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9737              		.loc 1 2726 0
 9738 03b4 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9739 03b6 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9740 03ba 0346     		mov	r3, r0
 9741 03bc 1A46     		mov	r2, r3
 9742 03be 6F4B     		ldr	r3, .L668+32
 9743 03c0 43F82420 		str	r2, [r3, r4, lsl #2]
2727:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9744              		.loc 1 2727 0
 9745 03c4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9746 03c6 6B4A     		ldr	r2, .L668+24
 9747 03c8 0121     		movs	r1, #1
 9748 03ca D154     		strb	r1, [r2, r3]
2728:..\src/interruptions.c ****                 }
2729:..\src/interruptions.c ****                 break;
 9749              		.loc 1 2729 0
 9750 03cc 63E0     		b	.L662
 9751              	.L639:
2730:..\src/interruptions.c ****             case STATE_ACTIVE:
2731:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9752              		.loc 1 2731 0
 9753 03ce FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9754 03d0 634A     		ldr	r2, .L668+4
 9755 03d2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9756 03d6 684B     		ldr	r3, .L668+28
 9757 03d8 1B68     		ldr	r3, [r3]
 9758 03da 0A3B     		subs	r3, r3, #10
 9759 03dc 9A42     		cmp	r2, r3
 9760 03de 5CDA     		bge	.L663
2732:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9761              		.loc 1 2732 0
 9762 03e0 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9763 03e2 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9764 03e6 0346     		mov	r3, r0
 9765 03e8 1A46     		mov	r2, r3
 9766 03ea 654B     		ldr	r3, .L668+36
 9767 03ec 43F82420 		str	r2, [r3, r4, lsl #2]
2733:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9768              		.loc 1 2733 0
 9769 03f0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9770 03f2 624A     		ldr	r2, .L668+32
 9771 03f4 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9772 03f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9773 03fa 6149     		ldr	r1, .L668+36
 9774 03fc 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9775 0400 9A42     		cmp	r2, r3
 9776 0402 0AD2     		bcs	.L644
2734:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9777              		.loc 1 2734 0
 9778 0404 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 224


 9779 0406 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9780 0408 5C49     		ldr	r1, .L668+32
 9781 040a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9782 040e 03F5BB53 		add	r3, r3, #5984
 9783 0412 1033     		adds	r3, r3, #16
 9784 0414 5949     		ldr	r1, .L668+32
 9785 0416 41F82230 		str	r3, [r1, r2, lsl #2]
 9786              	.L644:
2735:..\src/interruptions.c ****                     }
2736:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 3.0){      //50 timers ti
 9787              		.loc 1 2736 0
 9788 041a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9789 041c 574A     		ldr	r2, .L668+32
 9790 041e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9791 0422 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9792 0424 5649     		ldr	r1, .L668+36
 9793 0426 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9794 042a D31A     		subs	r3, r2, r3
 9795 042c 1846     		mov	r0, r3
 9796 042e FFF7FEFF 		bl	__aeabi_ui2f
 9797 0432 0346     		mov	r3, r0
 9798 0434 1846     		mov	r0, r3
 9799 0436 FFF7FEFF 		bl	__aeabi_f2d
 9800 043a 4FF00002 		mov	r2, #0
 9801 043e 514B     		ldr	r3, .L668+40
 9802 0440 FFF7FEFF 		bl	__aeabi_ddiv
 9803 0444 0346     		mov	r3, r0
 9804 0446 0C46     		mov	r4, r1
 9805 0448 1846     		mov	r0, r3
 9806 044a 2146     		mov	r1, r4
 9807 044c 4FF00002 		mov	r2, #0
 9808 0450 4D4B     		ldr	r3, .L668+44
 9809 0452 FFF7FEFF 		bl	__aeabi_dcmpgt
 9810 0456 0346     		mov	r3, r0
 9811 0458 002B     		cmp	r3, #0
 9812 045a 04D0     		beq	.L657
2737:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9813              		.loc 1 2737 0
 9814 045c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9815 045e 454A     		ldr	r2, .L668+24
 9816 0460 0221     		movs	r1, #2
 9817 0462 D154     		strb	r1, [r2, r3]
2738:..\src/interruptions.c ****                     }
2739:..\src/interruptions.c ****                     else {
2740:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2741:..\src/interruptions.c ****                     }
2742:..\src/interruptions.c ****                 }
2743:..\src/interruptions.c ****                 break;
 9818              		.loc 1 2743 0
 9819 0464 19E0     		b	.L663
 9820              	.L657:
2740:..\src/interruptions.c ****                     }
 9821              		.loc 1 2740 0
 9822 0466 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9823 0468 424A     		ldr	r2, .L668+24
 9824 046a 0021     		movs	r1, #0
 9825 046c D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 225


 9826              		.loc 1 2743 0
 9827 046e 14E0     		b	.L663
 9828              	.L640:
2744:..\src/interruptions.c ****             case COUNTER_INC:
2745:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9829              		.loc 1 2745 0
 9830 0470 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9831 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9832 0474 3B4A     		ldr	r2, .L668+8
 9833 0476 1833     		adds	r3, r3, #24
 9834 0478 9B00     		lsls	r3, r3, #2
 9835 047a 1344     		add	r3, r3, r2
 9836 047c 5B68     		ldr	r3, [r3, #4]
 9837 047e 5A1C     		adds	r2, r3, #1
 9838 0480 3848     		ldr	r0, .L668+8
 9839 0482 01F11803 		add	r3, r1, #24
 9840 0486 9B00     		lsls	r3, r3, #2
 9841 0488 0344     		add	r3, r3, r0
 9842 048a 5A60     		str	r2, [r3, #4]
2746:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9843              		.loc 1 2746 0
 9844 048c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9845 048e 394A     		ldr	r2, .L668+24
 9846 0490 0021     		movs	r1, #0
 9847 0492 D154     		strb	r1, [r2, r3]
2747:..\src/interruptions.c ****                 break;
 9848              		.loc 1 2747 0
 9849 0494 02E0     		b	.L638
 9850              	.L662:
2729:..\src/interruptions.c ****             case STATE_ACTIVE:
 9851              		.loc 1 2729 0
 9852 0496 00BF     		nop
 9853 0498 00E0     		b	.L638
 9854              	.L663:
2743:..\src/interruptions.c ****             case COUNTER_INC:
 9855              		.loc 1 2743 0
 9856 049a 00BF     		nop
 9857              	.L638:
2722:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9858              		.loc 1 2722 0 discriminator 2
 9859 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9860 049e 0133     		adds	r3, r3, #1
 9861 04a0 FB75     		strb	r3, [r7, #23]
 9862              	.L637:
2722:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9863              		.loc 1 2722 0 is_stmt 0 discriminator 1
 9864 04a2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9865 04a4 012B     		cmp	r3, #1
 9866 04a6 08D8     		bhi	.L647
2722:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9867              		.loc 1 2722 0 discriminator 3
 9868 04a8 304B     		ldr	r3, .L668+16
 9869 04aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9870 04ac 002B     		cmp	r3, #0
 9871 04ae 04D1     		bne	.L647
2722:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9872              		.loc 1 2722 0 discriminator 4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 226


 9873 04b0 2F4B     		ldr	r3, .L668+20
 9874 04b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9875 04b4 002B     		cmp	r3, #0
 9876 04b6 3FF46CAF 		beq	.L648
 9877              	.L647:
2748:..\src/interruptions.c ****         }
2749:..\src/interruptions.c ****     }
2750:..\src/interruptions.c ****     
2751:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2752:..\src/interruptions.c ****     switch (rest_cycle_status){
 9878              		.loc 1 2752 0 is_stmt 1
 9879 04ba 344B     		ldr	r3, .L668+48
 9880 04bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9881 04be 012B     		cmp	r3, #1
 9882 04c0 11D0     		beq	.L650
 9883 04c2 022B     		cmp	r3, #2
 9884 04c4 2AD0     		beq	.L651
 9885 04c6 002B     		cmp	r3, #0
 9886 04c8 42D1     		bne	.L649
2753:..\src/interruptions.c ****         case STATE_INACTIVE:
2754:..\src/interruptions.c ****             if (rest_enabled){
 9887              		.loc 1 2754 0
 9888 04ca 314B     		ldr	r3, .L668+52
 9889 04cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9890 04ce 002B     		cmp	r3, #0
 9891 04d0 3BD0     		beq	.L664
2755:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9892              		.loc 1 2755 0
 9893 04d2 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9894 04d6 0346     		mov	r3, r0
 9895 04d8 1A46     		mov	r2, r3
 9896 04da 2E4B     		ldr	r3, .L668+56
 9897 04dc 1A60     		str	r2, [r3]
2756:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9898              		.loc 1 2756 0
 9899 04de 2B4B     		ldr	r3, .L668+48
 9900 04e0 0122     		movs	r2, #1
 9901 04e2 1A70     		strb	r2, [r3]
2757:..\src/interruptions.c ****             }
2758:..\src/interruptions.c ****             break;
 9902              		.loc 1 2758 0
 9903 04e4 31E0     		b	.L664
 9904              	.L650:
2759:..\src/interruptions.c ****         case STATE_ACTIVE:
2760:..\src/interruptions.c ****             if (!rest_enabled){
 9905              		.loc 1 2760 0
 9906 04e6 2A4B     		ldr	r3, .L668+52
 9907 04e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9908 04ea 002B     		cmp	r3, #0
 9909 04ec 2FD1     		bne	.L665
2761:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9910              		.loc 1 2761 0
 9911 04ee FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9912 04f2 0346     		mov	r3, r0
 9913 04f4 1A46     		mov	r2, r3
 9914 04f6 284B     		ldr	r3, .L668+60
 9915 04f8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 227


2762:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9916              		.loc 1 2762 0
 9917 04fa 264B     		ldr	r3, .L668+56
 9918 04fc 1A68     		ldr	r2, [r3]
 9919 04fe 264B     		ldr	r3, .L668+60
 9920 0500 1B68     		ldr	r3, [r3]
 9921 0502 9A42     		cmp	r2, r3
 9922 0504 06D2     		bcs	.L655
2763:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 9923              		.loc 1 2763 0
 9924 0506 234B     		ldr	r3, .L668+56
 9925 0508 1B68     		ldr	r3, [r3]
 9926 050a 03F5BB53 		add	r3, r3, #5984
 9927 050e 1033     		adds	r3, r3, #16
 9928 0510 204A     		ldr	r2, .L668+56
 9929 0512 1360     		str	r3, [r2]
 9930              	.L655:
2764:..\src/interruptions.c ****                 }
2765:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 9931              		.loc 1 2765 0
 9932 0514 1D4B     		ldr	r3, .L668+48
 9933 0516 0222     		movs	r2, #2
 9934 0518 1A70     		strb	r2, [r3]
2766:..\src/interruptions.c ****             }
2767:..\src/interruptions.c ****             break;
 9935              		.loc 1 2767 0
 9936 051a 18E0     		b	.L665
 9937              	.L651:
2768:..\src/interruptions.c ****         case COUNTER_INC: 
2769:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 9938              		.loc 1 2769 0
 9939 051c 114B     		ldr	r3, .L668+8
 9940 051e DA6D     		ldr	r2, [r3, #92]
 9941 0520 1C4B     		ldr	r3, .L668+56
 9942 0522 1968     		ldr	r1, [r3]
 9943 0524 1C4B     		ldr	r3, .L668+60
 9944 0526 1B68     		ldr	r3, [r3]
 9945 0528 CB1A     		subs	r3, r1, r3
 9946 052a 1C49     		ldr	r1, .L668+64
 9947 052c A1FB0313 		umull	r1, r3, r1, r3
 9948 0530 1B09     		lsrs	r3, r3, #4
 9949 0532 1344     		add	r3, r3, r2
 9950 0534 0B4A     		ldr	r2, .L668+8
 9951 0536 D365     		str	r3, [r2, #92]
2770:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 9952              		.loc 1 2770 0
 9953 0538 0A4B     		ldr	r3, .L668+8
 9954 053a 1B6D     		ldr	r3, [r3, #80]
 9955 053c 0133     		adds	r3, r3, #1
 9956 053e 094A     		ldr	r2, .L668+8
 9957 0540 1365     		str	r3, [r2, #80]
2771:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 9958              		.loc 1 2771 0
 9959 0542 124B     		ldr	r3, .L668+48
 9960 0544 0022     		movs	r2, #0
 9961 0546 1A70     		strb	r2, [r3]
2772:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 228


 9962              		.loc 1 2772 0
 9963 0548 02E0     		b	.L649
 9964              	.L664:
2758:..\src/interruptions.c ****         case STATE_ACTIVE:
 9965              		.loc 1 2758 0
 9966 054a 00BF     		nop
 9967 054c 00E0     		b	.L649
 9968              	.L665:
2767:..\src/interruptions.c ****         case COUNTER_INC: 
 9969              		.loc 1 2767 0
 9970 054e 00BF     		nop
 9971              	.L649:
2773:..\src/interruptions.c ****     }
2774:..\src/interruptions.c ****           
2775:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2776:..\src/interruptions.c ****     save_cycles_eeprom();
 9972              		.loc 1 2776 0
 9973 0550 FFF7FEFF 		bl	save_cycles_eeprom
2777:..\src/interruptions.c ****     
2778:..\src/interruptions.c **** }
 9974              		.loc 1 2778 0
 9975 0554 00BF     		nop
 9976 0556 1C37     		adds	r7, r7, #28
 9977              		.cfi_def_cfa_offset 12
 9978 0558 BD46     		mov	sp, r7
 9979              		.cfi_def_cfa_register 13
 9980              		@ sp needed
 9981 055a 90BD     		pop	{r4, r7, pc}
 9982              	.L669:
 9983              		.align	2
 9984              	.L668:
 9985 055c 94010000 		.word	emg_cycle_status.10742
 9986 0560 00000000 		.word	g_adc_meas
 9987 0564 00000000 		.word	g_mem
 9988 0568 98010000 		.word	start_emg_pos.10762
 9989 056c 00000000 		.word	emg_1_status
 9990 0570 00000000 		.word	emg_2_status
 9991 0574 A0010000 		.word	emg_excess_status.10743
 9992 0578 14000000 		.word	exc_act_thr.10746
 9993 057c A4010000 		.word	timer_exc_s.10760
 9994 0580 AC010000 		.word	timer_exc_e.10761
 9995 0584 00004940 		.word	1078525952
 9996 0588 00000840 		.word	1074266112
 9997 058c B4010000 		.word	rest_cycle_status.10744
 9998 0590 00000000 		.word	rest_enabled
 9999 0594 B8010000 		.word	timer_value_s.10758
 10000 0598 BC010000 		.word	timer_value_e.10759
 10001 059c 1F85EB51 		.word	1374389535
 10002              		.cfi_endproc
 10003              	.LFE77:
 10004              		.size	cycles_counter_update, .-cycles_counter_update
 10005              		.section	.text.save_cycles_eeprom,"ax",%progbits
 10006              		.align	2
 10007              		.global	save_cycles_eeprom
 10008              		.thumb
 10009              		.thumb_func
 10010              		.type	save_cycles_eeprom, %function
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 229


 10011              	save_cycles_eeprom:
 10012              	.LFB78:
2779:..\src/interruptions.c **** 
2780:..\src/interruptions.c **** //==============================================================================
2781:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2782:..\src/interruptions.c **** //==============================================================================
2783:..\src/interruptions.c **** 
2784:..\src/interruptions.c **** void save_cycles_eeprom() {
 10013              		.loc 1 2784 0
 10014              		.cfi_startproc
 10015              		@ args = 0, pretend = 0, frame = 24
 10016              		@ frame_needed = 1, uses_anonymous_args = 0
 10017 0000 80B5     		push	{r7, lr}
 10018              		.cfi_def_cfa_offset 8
 10019              		.cfi_offset 7, -8
 10020              		.cfi_offset 14, -4
 10021 0002 86B0     		sub	sp, sp, #24
 10022              		.cfi_def_cfa_offset 32
 10023 0004 00AF     		add	r7, sp, #0
 10024              		.cfi_def_cfa_register 7
2785:..\src/interruptions.c **** 
2786:..\src/interruptions.c ****     cystatus status;
2787:..\src/interruptions.c ****     static uint8 row_number;
2788:..\src/interruptions.c ****     uint8 row_start = 1;
 10025              		.loc 1 2788 0
 10026 0006 0123     		movs	r3, #1
 10027 0008 FB75     		strb	r3, [r7, #23]
2789:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 10028              		.loc 1 2789 0
 10029 000a 394B     		ldr	r3, .L686
 10030 000c 3B61     		str	r3, [r7, #16]
2790:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 10031              		.loc 1 2790 0
 10032 000e 394B     		ldr	r3, .L686+4
 10033 0010 FB60     		str	r3, [r7, #12]
2791:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 10034              		.loc 1 2791 0
 10035 0012 FB7D     		ldrb	r3, [r7, #23]
 10036 0014 0533     		adds	r3, r3, #5
 10037 0016 FB72     		strb	r3, [r7, #11]
2792:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2793:..\src/interruptions.c **** 
2794:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2795:..\src/interruptions.c ****     switch(cycles_status) {
 10038              		.loc 1 2795 0
 10039 0018 374B     		ldr	r3, .L686+8
 10040 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10041 001c 042B     		cmp	r3, #4
 10042 001e 63D8     		bhi	.L682
 10043 0020 01A2     		adr	r2, .L673
 10044 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 10045 0026 00BF     		.p2align 2
 10046              	.L673:
 10047 0028 3D000000 		.word	.L672+1
 10048 002c 5B000000 		.word	.L674+1
 10049 0030 8B000000 		.word	.L675+1
 10050 0034 C7000000 		.word	.L676+1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 230


 10051 0038 DF000000 		.word	.L683+1
 10052              		.p2align 1
 10053              	.L672:
2796:..\src/interruptions.c ****         case PREPARE_DATA:
2797:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2798:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 10054              		.loc 1 2798 0
 10055 003c 6022     		movs	r2, #96
 10056 003e 3969     		ldr	r1, [r7, #16]
 10057 0040 F868     		ldr	r0, [r7, #12]
 10058 0042 FFF7FEFF 		bl	memcpy
2799:..\src/interruptions.c ****             m_addr = addr_start;
 10059              		.loc 1 2799 0
 10060 0046 2D4A     		ldr	r2, .L686+12
 10061 0048 3B69     		ldr	r3, [r7, #16]
 10062 004a 1360     		str	r3, [r2]
2800:..\src/interruptions.c ****             row_number = row_start;
 10063              		.loc 1 2800 0
 10064 004c 2C4A     		ldr	r2, .L686+16
 10065 004e FB7D     		ldrb	r3, [r7, #23]
 10066 0050 1370     		strb	r3, [r2]
2801:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 10067              		.loc 1 2801 0
 10068 0052 294B     		ldr	r3, .L686+8
 10069 0054 0122     		movs	r2, #1
 10070 0056 1A70     		strb	r2, [r3]
2802:..\src/interruptions.c ****             break;
 10071              		.loc 1 2802 0
 10072 0058 46E0     		b	.L671
 10073              	.L674:
2803:..\src/interruptions.c ****             
2804:..\src/interruptions.c ****         case WRITE_CYCLES:
2805:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 10074              		.loc 1 2805 0
 10075 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2806:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 10076              		.loc 1 2806 0
 10077 005e 274B     		ldr	r3, .L686+12
 10078 0060 1A68     		ldr	r2, [r3]
 10079 0062 274B     		ldr	r3, .L686+16
 10080 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10081 0066 1946     		mov	r1, r3
 10082 0068 1046     		mov	r0, r2
 10083 006a FFF7FEFF 		bl	EEPROM_StartWrite
 10084 006e 7860     		str	r0, [r7, #4]
2807:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10085              		.loc 1 2807 0
 10086 0070 7B68     		ldr	r3, [r7, #4]
 10087 0072 072B     		cmp	r3, #7
 10088 0074 02D0     		beq	.L678
 10089              		.loc 1 2807 0 is_stmt 0 discriminator 1
 10090 0076 7B68     		ldr	r3, [r7, #4]
 10091 0078 002B     		cmp	r3, #0
 10092 007a 32D1     		bne	.L684
 10093              	.L678:
2808:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10094              		.loc 1 2808 0 is_stmt 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 231


 10095 007c 1E4B     		ldr	r3, .L686+8
 10096 007e 0222     		movs	r2, #2
 10097 0080 1A70     		strb	r2, [r3]
2809:..\src/interruptions.c ****                 can_write = FALSE;
 10098              		.loc 1 2809 0
 10099 0082 204B     		ldr	r3, .L686+20
 10100 0084 0022     		movs	r2, #0
 10101 0086 1A70     		strb	r2, [r3]
2810:..\src/interruptions.c ****             }
2811:..\src/interruptions.c ****             break;
 10102              		.loc 1 2811 0
 10103 0088 2BE0     		b	.L684
 10104              	.L675:
2812:..\src/interruptions.c ****             
2813:..\src/interruptions.c ****         case WAIT_QUERY:
2814:..\src/interruptions.c ****             status = EEPROM_Query();
 10105              		.loc 1 2814 0
 10106 008a FFF7FEFF 		bl	EEPROM_Query
 10107 008e 7860     		str	r0, [r7, #4]
2815:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10108              		.loc 1 2815 0
 10109 0090 7B68     		ldr	r3, [r7, #4]
 10110 0092 002B     		cmp	r3, #0
 10111 0094 27D1     		bne	.L685
2816:..\src/interruptions.c ****                 if (row_number < row_end) {
 10112              		.loc 1 2816 0
 10113 0096 1A4B     		ldr	r3, .L686+16
 10114 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10115 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10116 009c 9A42     		cmp	r2, r3
 10117 009e 0ED9     		bls	.L681
2817:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10118              		.loc 1 2817 0
 10119 00a0 164B     		ldr	r3, .L686+12
 10120 00a2 1B68     		ldr	r3, [r3]
 10121 00a4 1033     		adds	r3, r3, #16
 10122 00a6 154A     		ldr	r2, .L686+12
 10123 00a8 1360     		str	r3, [r2]
2818:..\src/interruptions.c ****                     row_number = row_number + 1;
 10124              		.loc 1 2818 0
 10125 00aa 154B     		ldr	r3, .L686+16
 10126 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10127 00ae 0133     		adds	r3, r3, #1
 10128 00b0 DAB2     		uxtb	r2, r3
 10129 00b2 134B     		ldr	r3, .L686+16
 10130 00b4 1A70     		strb	r2, [r3]
2819:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10131              		.loc 1 2819 0
 10132 00b6 104B     		ldr	r3, .L686+8
 10133 00b8 0122     		movs	r2, #1
 10134 00ba 1A70     		strb	r2, [r3]
2820:..\src/interruptions.c ****                 }
2821:..\src/interruptions.c ****                 else {
2822:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2823:..\src/interruptions.c ****                 }
2824:..\src/interruptions.c ****             }
2825:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 232


 10135              		.loc 1 2825 0
 10136 00bc 13E0     		b	.L685
 10137              	.L681:
2822:..\src/interruptions.c ****                 }
 10138              		.loc 1 2822 0
 10139 00be 0E4B     		ldr	r3, .L686+8
 10140 00c0 0322     		movs	r2, #3
 10141 00c2 1A70     		strb	r2, [r3]
 10142              		.loc 1 2825 0
 10143 00c4 0FE0     		b	.L685
 10144              	.L676:
2826:..\src/interruptions.c ****            
2827:..\src/interruptions.c ****         case WRITE_END:
2828:..\src/interruptions.c ****             can_write = TRUE;            
 10145              		.loc 1 2828 0
 10146 00c6 0F4B     		ldr	r3, .L686+20
 10147 00c8 0122     		movs	r2, #1
 10148 00ca 1A70     		strb	r2, [r3]
2829:..\src/interruptions.c ****             cycles_status = NONE;
 10149              		.loc 1 2829 0
 10150 00cc 0A4B     		ldr	r3, .L686+8
 10151 00ce 0422     		movs	r2, #4
 10152 00d0 1A70     		strb	r2, [r3]
2830:..\src/interruptions.c ****             
2831:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2832:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10153              		.loc 1 2832 0
 10154 00d2 6022     		movs	r2, #96
 10155 00d4 F968     		ldr	r1, [r7, #12]
 10156 00d6 3869     		ldr	r0, [r7, #16]
 10157 00d8 FFF7FEFF 		bl	memcpy
2833:..\src/interruptions.c ****             break;
 10158              		.loc 1 2833 0
 10159 00dc 04E0     		b	.L671
 10160              	.L683:
2834:..\src/interruptions.c ****             
2835:..\src/interruptions.c ****         case NONE:
2836:..\src/interruptions.c ****             break;
 10161              		.loc 1 2836 0
 10162 00de 00BF     		nop
 10163 00e0 02E0     		b	.L682
 10164              	.L684:
2811:..\src/interruptions.c ****             
 10165              		.loc 1 2811 0
 10166 00e2 00BF     		nop
 10167 00e4 00E0     		b	.L682
 10168              	.L685:
2825:..\src/interruptions.c ****            
 10169              		.loc 1 2825 0
 10170 00e6 00BF     		nop
 10171              	.L671:
 10172              	.L682:
2837:..\src/interruptions.c ****     }
2838:..\src/interruptions.c ****     
2839:..\src/interruptions.c **** }
 10173              		.loc 1 2839 0
 10174 00e8 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 233


 10175 00ea 1837     		adds	r7, r7, #24
 10176              		.cfi_def_cfa_offset 8
 10177 00ec BD46     		mov	sp, r7
 10178              		.cfi_def_cfa_register 13
 10179              		@ sp needed
 10180 00ee 80BD     		pop	{r7, pc}
 10181              	.L687:
 10182              		.align	2
 10183              	.L686:
 10184 00f0 10000000 		.word	g_mem+16
 10185 00f4 10000000 		.word	c_mem+16
 10186 00f8 00000000 		.word	cycles_status
 10187 00fc C0010000 		.word	m_addr.10796
 10188 0100 C4010000 		.word	row_number.10791
 10189 0104 00000000 		.word	can_write
 10190              		.cfi_endproc
 10191              	.LFE78:
 10192              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10193              		.bss
 10194              	state.10462:
 10195 0000 00       		.space	1
 10196 0001 000000   		.align	2
 10197              	rx_queue.10466:
 10198 0004 000000   		.space	3
 10199              	data_packet_length.10464:
 10200 0007 00       		.space	1
 10201              	data_packet_index.10463:
 10202 0008 00       		.space	1
 10203 0009 000000   		.align	2
 10204              	data_packet_buffer.10465:
 10205 000c 00000000 		.space	128
 10205      00000000 
 10205      00000000 
 10205      00000000 
 10205      00000000 
 10206              		.data
 10207              		.align	1
 10208              		.type	counter_calibration.10482, %object
 10209              		.size	counter_calibration.10482, 2
 10210              	counter_calibration.10482:
 10211 0000 0100     		.short	1
 10212              		.align	1
 10213              		.type	counter_tension_func.10483, %object
 10214              		.size	counter_tension_func.10483, 2
 10215              	counter_tension_func.10483:
 10216 0002 0100     		.short	1
 10217              		.bss
 10218              		.align	2
 10219              	current_emg.10508:
 10220 008c 0000     		.space	2
 10221              	fsm_state.10545:
 10222 008e 00       		.space	1
 10223 008f 00       		.align	2
 10224              	pos_error_sum.10572:
 10225 0090 00000000 		.space	4
 10226              		.align	2
 10227              	prev_pos_err.10574:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 234


 10228 0094 00000000 		.space	4
 10229              	motor_dir.10577:
 10230 0098 00       		.space	1
 10231 0099 000000   		.align	2
 10232              	curr_error_sum.10573:
 10233 009c 00000000 		.space	4
 10234              		.align	2
 10235              	prev_curr_err.10575:
 10236 00a0 00000000 		.space	4
 10237              		.align	2
 10238              	prev_pwm.10576:
 10239 00a4 00000000 		.space	4
 10240              		.align	2
 10241              	position_counter.10578:
 10242 00a8 00000000 		.space	4
 10243              		.align	2
 10244              	pos_error_sum.10605:
 10245 00ac 00000000 		.space	8
 10245      00000000 
 10246              		.align	2
 10247              	prev_pos_err.10607:
 10248 00b4 00000000 		.space	8
 10248      00000000 
 10249              		.align	2
 10250              	motor_dir.10610:
 10251 00bc 0000     		.space	2
 10252 00be 0000     		.align	2
 10253              	curr_error_sum.10606:
 10254 00c0 00000000 		.space	8
 10254      00000000 
 10255              		.align	2
 10256              	prev_curr_err.10608:
 10257 00c8 00000000 		.space	8
 10257      00000000 
 10258              		.align	2
 10259              	prev_pwm.10609:
 10260 00d0 00000000 		.space	8
 10260      00000000 
 10261              		.align	2
 10262              	position_counter.10611:
 10263 00d8 00000000 		.space	8
 10263      00000000 
 10264              		.align	2
 10265              	last_value_encoder.10634:
 10266 00e0 00000000 		.space	24
 10266      00000000 
 10266      00000000 
 10266      00000000 
 10266      00000000 
 10267              		.align	2
 10268              	comp_value_encoder.10635:
 10269 00f8 00000000 		.space	24
 10269      00000000 
 10269      00000000 
 10269      00000000 
 10269      00000000 
 10270              		.data
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 235


 10271              		.align	2
 10272              		.type	only_first_time.10637, %object
 10273              		.size	only_first_time.10637, 2
 10274              	only_first_time.10637:
 10275 0004 01       		.byte	1
 10276 0005 01       		.byte	1
 10277              		.bss
 10278              		.align	2
 10279              	error.10636:
 10280 0110 00000000 		.space	6
 10280      0000
 10281 0116 0000     		.align	2
 10282              	v_value.10641:
 10283 0118 00000000 		.space	24
 10283      00000000 
 10283      00000000 
 10283      00000000 
 10283      00000000 
 10284              		.align	2
 10285              	vv_value.10642:
 10286 0130 00000000 		.space	24
 10286      00000000 
 10286      00000000 
 10286      00000000 
 10286      00000000 
 10287              		.align	2
 10288              	vvv_value.10643:
 10289 0148 00000000 		.space	24
 10289      00000000 
 10289      00000000 
 10289      00000000 
 10289      00000000 
 10290              		.align	2
 10291              	one_time_execute.10639:
 10292 0160 0000     		.space	2
 10293 0162 0000     		.align	2
 10294              	safe_startup_motor_activation.10638:
 10295 0164 0000     		.space	2
 10296 0166 0000     		.align	2
 10297              	count_startup_motor.10640:
 10298 0168 00000000 		.space	8
 10298      00000000 
 10299              		.data
 10300 0006 0000     		.align	2
 10301              		.type	detect_power_cycle_prev.10667, %object
 10302              		.size	detect_power_cycle_prev.10667, 4
 10303              	detect_power_cycle_prev.10667:
 10304 0008 FDFFFFFF 		.word	-3
 10305              		.type	first_tension_valid.10666, %object
 10306              		.size	first_tension_valid.10666, 1
 10307              	first_tension_valid.10666:
 10308 000c 01       		.byte	1
 10309              		.bss
 10310              		.align	1
 10311              	count.10668:
 10312 0170 0000     		.space	2
 10313              	idx.10670:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 236


 10314 0172 00       		.space	1
 10315 0173 00       		.align	2
 10316              	v_count.10669:
 10317 0174 00000000 		.space	4
 10318              		.align	1
 10319              	emg_counter_1.10660:
 10320 0178 0000     		.space	2
 10321              		.align	1
 10322              	emg_counter_2.10661:
 10323 017a 0000     		.space	2
 10324              		.align	2
 10325              	UD_mean_value.10664:
 10326 017c 00000000 		.space	4
 10327              		.align	1
 10328              	UD_counter.10662:
 10329 0180 0000     		.space	2
 10330 0182 0000     		.align	2
 10331              	LR_mean_value.10665:
 10332 0184 00000000 		.space	4
 10333              		.align	1
 10334              	LR_counter.10663:
 10335 0188 0000     		.space	2
 10336              	pos_cycle_status.10741:
 10337 018a 00       		.space	1
 10338 018b 00       		.align	2
 10339              	thr_pos.10747:
 10340 018c 00000000 		.space	4
 10341              		.align	2
 10342              	max_pos.10748:
 10343 0190 00000000 		.space	4
 10344              		.data
 10345 000d 000000   		.align	2
 10346              		.type	bin_threshold.10745, %object
 10347              		.size	bin_threshold.10745, 4
 10348              	bin_threshold.10745:
 10349 0010 FA000000 		.word	250
 10350              		.bss
 10351              		.align	2
 10352              	emg_cycle_status.10742:
 10353 0194 0000     		.space	2
 10354 0196 0000     		.align	2
 10355              	start_emg_pos.10762:
 10356 0198 00000000 		.space	8
 10356      00000000 
 10357              		.align	2
 10358              	emg_excess_status.10743:
 10359 01a0 0000     		.space	2
 10360              		.data
 10361              		.align	2
 10362              		.type	exc_act_thr.10746, %object
 10363              		.size	exc_act_thr.10746, 4
 10364              	exc_act_thr.10746:
 10365 0014 D4030000 		.word	980
 10366              		.bss
 10367 01a2 0000     		.align	2
 10368              	timer_exc_s.10760:
 10369 01a4 00000000 		.space	8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 237


 10369      00000000 
 10370              		.align	2
 10371              	timer_exc_e.10761:
 10372 01ac 00000000 		.space	8
 10372      00000000 
 10373              	rest_cycle_status.10744:
 10374 01b4 00       		.space	1
 10375 01b5 000000   		.align	2
 10376              	timer_value_s.10758:
 10377 01b8 00000000 		.space	4
 10378              		.align	2
 10379              	timer_value_e.10759:
 10380 01bc 00000000 		.space	4
 10381              		.align	2
 10382              	m_addr.10796:
 10383 01c0 00000000 		.space	4
 10384              	row_number.10791:
 10385 01c4 00       		.space	1
 10386              		.text
 10387              	.Letext0:
 10388              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10389              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10390              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10391              		.file 5 "..\\src\\commands.h"
 10392              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10393              		.file 7 "..\\src\\globals.h"
 10394              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10395              		.section	.debug_info,"",%progbits
 10396              	.Ldebug_info0:
 10397 0000 D21B0000 		.4byte	0x1bd2
 10398 0004 0400     		.2byte	0x4
 10399 0006 00000000 		.4byte	.Ldebug_abbrev0
 10400 000a 04       		.byte	0x4
 10401 000b 01       		.uleb128 0x1
 10402 000c AE080000 		.4byte	.LASF352
 10403 0010 0C       		.byte	0xc
 10404 0011 FC100000 		.4byte	.LASF353
 10405 0015 B0110000 		.4byte	.LASF354
 10406 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10407 001d 00000000 		.4byte	0
 10408 0021 00000000 		.4byte	.Ldebug_line0
 10409 0025 02       		.uleb128 0x2
 10410 0026 01       		.byte	0x1
 10411 0027 06       		.byte	0x6
 10412 0028 F9030000 		.4byte	.LASF0
 10413 002c 02       		.uleb128 0x2
 10414 002d 01       		.byte	0x1
 10415 002e 08       		.byte	0x8
 10416 002f 76040000 		.4byte	.LASF1
 10417 0033 02       		.uleb128 0x2
 10418 0034 02       		.byte	0x2
 10419 0035 05       		.byte	0x5
 10420 0036 CD0E0000 		.4byte	.LASF2
 10421 003a 02       		.uleb128 0x2
 10422 003b 02       		.byte	0x2
 10423 003c 07       		.byte	0x7
 10424 003d A0100000 		.4byte	.LASF3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 238


 10425 0041 03       		.uleb128 0x3
 10426 0042 92110000 		.4byte	.LASF9
 10427 0046 02       		.byte	0x2
 10428 0047 3F       		.byte	0x3f
 10429 0048 4C000000 		.4byte	0x4c
 10430 004c 02       		.uleb128 0x2
 10431 004d 04       		.byte	0x4
 10432 004e 05       		.byte	0x5
 10433 004f D6020000 		.4byte	.LASF4
 10434 0053 02       		.uleb128 0x2
 10435 0054 04       		.byte	0x4
 10436 0055 07       		.byte	0x7
 10437 0056 AF070000 		.4byte	.LASF5
 10438 005a 02       		.uleb128 0x2
 10439 005b 08       		.byte	0x8
 10440 005c 05       		.byte	0x5
 10441 005d 74090000 		.4byte	.LASF6
 10442 0061 02       		.uleb128 0x2
 10443 0062 08       		.byte	0x8
 10444 0063 07       		.byte	0x7
 10445 0064 650C0000 		.4byte	.LASF7
 10446 0068 04       		.uleb128 0x4
 10447 0069 04       		.byte	0x4
 10448 006a 05       		.byte	0x5
 10449 006b 696E7400 		.ascii	"int\000"
 10450 006f 02       		.uleb128 0x2
 10451 0070 04       		.byte	0x4
 10452 0071 07       		.byte	0x7
 10453 0072 9C0A0000 		.4byte	.LASF8
 10454 0076 03       		.uleb128 0x3
 10455 0077 8B000000 		.4byte	.LASF10
 10456 007b 03       		.byte	0x3
 10457 007c 2C       		.byte	0x2c
 10458 007d 41000000 		.4byte	0x41
 10459 0081 05       		.uleb128 0x5
 10460 0082 A70E0000 		.4byte	.LASF11
 10461 0086 04       		.byte	0x4
 10462 0087 E401     		.2byte	0x1e4
 10463 0089 2C000000 		.4byte	0x2c
 10464 008d 05       		.uleb128 0x5
 10465 008e 44120000 		.4byte	.LASF12
 10466 0092 04       		.byte	0x4
 10467 0093 E501     		.2byte	0x1e5
 10468 0095 3A000000 		.4byte	0x3a
 10469 0099 05       		.uleb128 0x5
 10470 009a BF000000 		.4byte	.LASF13
 10471 009e 04       		.byte	0x4
 10472 009f E601     		.2byte	0x1e6
 10473 00a1 53000000 		.4byte	0x53
 10474 00a5 05       		.uleb128 0x5
 10475 00a6 A3010000 		.4byte	.LASF14
 10476 00aa 04       		.byte	0x4
 10477 00ab E701     		.2byte	0x1e7
 10478 00ad 25000000 		.4byte	0x25
 10479 00b1 05       		.uleb128 0x5
 10480 00b2 8C0F0000 		.4byte	.LASF15
 10481 00b6 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 239


 10482 00b7 E801     		.2byte	0x1e8
 10483 00b9 33000000 		.4byte	0x33
 10484 00bd 05       		.uleb128 0x5
 10485 00be 1F110000 		.4byte	.LASF16
 10486 00c2 04       		.byte	0x4
 10487 00c3 E901     		.2byte	0x1e9
 10488 00c5 4C000000 		.4byte	0x4c
 10489 00c9 05       		.uleb128 0x5
 10490 00ca A1030000 		.4byte	.LASF17
 10491 00ce 04       		.byte	0x4
 10492 00cf EA01     		.2byte	0x1ea
 10493 00d1 D5000000 		.4byte	0xd5
 10494 00d5 02       		.uleb128 0x2
 10495 00d6 04       		.byte	0x4
 10496 00d7 04       		.byte	0x4
 10497 00d8 5C0A0000 		.4byte	.LASF18
 10498 00dc 02       		.uleb128 0x2
 10499 00dd 08       		.byte	0x8
 10500 00de 04       		.byte	0x4
 10501 00df B7090000 		.4byte	.LASF19
 10502 00e3 02       		.uleb128 0x2
 10503 00e4 01       		.byte	0x1
 10504 00e5 08       		.byte	0x8
 10505 00e6 08050000 		.4byte	.LASF20
 10506 00ea 05       		.uleb128 0x5
 10507 00eb D50A0000 		.4byte	.LASF21
 10508 00ef 04       		.byte	0x4
 10509 00f0 8602     		.2byte	0x286
 10510 00f2 53000000 		.4byte	0x53
 10511 00f6 05       		.uleb128 0x5
 10512 00f7 230D0000 		.4byte	.LASF22
 10513 00fb 04       		.byte	0x4
 10514 00fc 8E02     		.2byte	0x28e
 10515 00fe 02010000 		.4byte	0x102
 10516 0102 06       		.uleb128 0x6
 10517 0103 81000000 		.4byte	0x81
 10518 0107 02       		.uleb128 0x2
 10519 0108 08       		.byte	0x8
 10520 0109 04       		.byte	0x4
 10521 010a 740B0000 		.4byte	.LASF23
 10522 010e 02       		.uleb128 0x2
 10523 010f 04       		.byte	0x4
 10524 0110 07       		.byte	0x7
 10525 0111 10000000 		.4byte	.LASF24
 10526 0115 07       		.uleb128 0x7
 10527 0116 E3000000 		.4byte	0xe3
 10528 011a 25010000 		.4byte	0x125
 10529 011e 08       		.uleb128 0x8
 10530 011f 0E010000 		.4byte	0x10e
 10531 0123 07       		.byte	0x7
 10532 0124 00       		.byte	0
 10533 0125 09       		.uleb128 0x9
 10534 0126 21120000 		.4byte	.LASF33
 10535 012a 01       		.byte	0x1
 10536 012b 2C000000 		.4byte	0x2c
 10537 012f 05       		.byte	0x5
 10538 0130 8F       		.byte	0x8f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 240


 10539 0131 66010000 		.4byte	0x166
 10540 0135 0A       		.uleb128 0xa
 10541 0136 22070000 		.4byte	.LASF25
 10542 013a 00       		.byte	0
 10543 013b 0A       		.uleb128 0xa
 10544 013c DE0A0000 		.4byte	.LASF26
 10545 0140 01       		.byte	0x1
 10546 0141 0A       		.uleb128 0xa
 10547 0142 2E020000 		.4byte	.LASF27
 10548 0146 02       		.byte	0x2
 10549 0147 0A       		.uleb128 0xa
 10550 0148 71010000 		.4byte	.LASF28
 10551 014c 03       		.byte	0x3
 10552 014d 0A       		.uleb128 0xa
 10553 014e 2B010000 		.4byte	.LASF29
 10554 0152 04       		.byte	0x4
 10555 0153 0A       		.uleb128 0xa
 10556 0154 53000000 		.4byte	.LASF30
 10557 0158 05       		.byte	0x5
 10558 0159 0A       		.uleb128 0xa
 10559 015a F1070000 		.4byte	.LASF31
 10560 015e 06       		.byte	0x6
 10561 015f 0A       		.uleb128 0xa
 10562 0160 470E0000 		.4byte	.LASF32
 10563 0164 07       		.byte	0x7
 10564 0165 00       		.byte	0
 10565 0166 09       		.uleb128 0x9
 10566 0167 82090000 		.4byte	.LASF34
 10567 016b 01       		.byte	0x1
 10568 016c 2C000000 		.4byte	0x2c
 10569 0170 05       		.byte	0x5
 10570 0171 A3       		.byte	0xa3
 10571 0172 8F010000 		.4byte	0x18f
 10572 0176 0A       		.uleb128 0xa
 10573 0177 84110000 		.4byte	.LASF35
 10574 017b 00       		.byte	0
 10575 017c 0A       		.uleb128 0xa
 10576 017d 8C080000 		.4byte	.LASF36
 10577 0181 01       		.byte	0x1
 10578 0182 0A       		.uleb128 0xa
 10579 0183 640B0000 		.4byte	.LASF37
 10580 0187 02       		.byte	0x2
 10581 0188 0A       		.uleb128 0xa
 10582 0189 92070000 		.4byte	.LASF38
 10583 018d 03       		.byte	0x3
 10584 018e 00       		.byte	0
 10585 018f 03       		.uleb128 0x3
 10586 0190 4F110000 		.4byte	.LASF39
 10587 0194 06       		.byte	0x6
 10588 0195 7E       		.byte	0x7e
 10589 0196 9A010000 		.4byte	0x19a
 10590 019a 0B       		.uleb128 0xb
 10591 019b 4F110000 		.4byte	.LASF39
 10592 019f 0C       		.uleb128 0xc
 10593 01a0 04       		.byte	0x4
 10594 01a1 8F010000 		.4byte	0x18f
 10595 01a5 0D       		.uleb128 0xd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 241


 10596 01a6 3C090000 		.4byte	.LASF42
 10597 01aa 10       		.byte	0x10
 10598 01ab 07       		.byte	0x7
 10599 01ac E5       		.byte	0xe5
 10600 01ad E2010000 		.4byte	0x1e2
 10601 01b1 0E       		.uleb128 0xe
 10602 01b2 706F7300 		.ascii	"pos\000"
 10603 01b6 07       		.byte	0x7
 10604 01b7 E6       		.byte	0xe6
 10605 01b8 BD000000 		.4byte	0xbd
 10606 01bc 00       		.byte	0
 10607 01bd 0F       		.uleb128 0xf
 10608 01be 71080000 		.4byte	.LASF40
 10609 01c2 07       		.byte	0x7
 10610 01c3 E7       		.byte	0xe7
 10611 01c4 BD000000 		.4byte	0xbd
 10612 01c8 04       		.byte	0x4
 10613 01c9 0E       		.uleb128 0xe
 10614 01ca 70776D00 		.ascii	"pwm\000"
 10615 01ce 07       		.byte	0x7
 10616 01cf E8       		.byte	0xe8
 10617 01d0 BD000000 		.4byte	0xbd
 10618 01d4 08       		.byte	0x8
 10619 01d5 0F       		.uleb128 0xf
 10620 01d6 BA0C0000 		.4byte	.LASF41
 10621 01da 07       		.byte	0x7
 10622 01db E9       		.byte	0xe9
 10623 01dc 81000000 		.4byte	0x81
 10624 01e0 0C       		.byte	0xc
 10625 01e1 00       		.byte	0
 10626 01e2 0D       		.uleb128 0xd
 10627 01e3 0E0E0000 		.4byte	.LASF43
 10628 01e7 34       		.byte	0x34
 10629 01e8 07       		.byte	0x7
 10630 01e9 F0       		.byte	0xf0
 10631 01ea 43020000 		.4byte	0x243
 10632 01ee 0E       		.uleb128 0xe
 10633 01ef 706F7300 		.ascii	"pos\000"
 10634 01f3 07       		.byte	0x7
 10635 01f4 F1       		.byte	0xf1
 10636 01f5 43020000 		.4byte	0x243
 10637 01f9 00       		.byte	0
 10638 01fa 0F       		.uleb128 0xf
 10639 01fb 71080000 		.4byte	.LASF40
 10640 01ff 07       		.byte	0x7
 10641 0200 F2       		.byte	0xf2
 10642 0201 BD000000 		.4byte	0xbd
 10643 0205 0C       		.byte	0xc
 10644 0206 0F       		.uleb128 0xf
 10645 0207 CF0F0000 		.4byte	.LASF44
 10646 020b 07       		.byte	0x7
 10647 020c F3       		.byte	0xf3
 10648 020d BD000000 		.4byte	0xbd
 10649 0211 10       		.byte	0x10
 10650 0212 0F       		.uleb128 0xf
 10651 0213 E7070000 		.4byte	.LASF45
 10652 0217 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 242


 10653 0218 F4       		.byte	0xf4
 10654 0219 BD000000 		.4byte	0xbd
 10655 021d 14       		.byte	0x14
 10656 021e 0E       		.uleb128 0xe
 10657 021f 726F7400 		.ascii	"rot\000"
 10658 0223 07       		.byte	0x7
 10659 0224 F5       		.byte	0xf5
 10660 0225 53020000 		.4byte	0x253
 10661 0229 18       		.byte	0x18
 10662 022a 0E       		.uleb128 0xe
 10663 022b 76656C00 		.ascii	"vel\000"
 10664 022f 07       		.byte	0x7
 10665 0230 F6       		.byte	0xf6
 10666 0231 43020000 		.4byte	0x243
 10667 0235 1C       		.byte	0x1c
 10668 0236 0E       		.uleb128 0xe
 10669 0237 61636300 		.ascii	"acc\000"
 10670 023b 07       		.byte	0x7
 10671 023c F7       		.byte	0xf7
 10672 023d 43020000 		.4byte	0x243
 10673 0241 28       		.byte	0x28
 10674 0242 00       		.byte	0
 10675 0243 07       		.uleb128 0x7
 10676 0244 BD000000 		.4byte	0xbd
 10677 0248 53020000 		.4byte	0x253
 10678 024c 08       		.uleb128 0x8
 10679 024d 0E010000 		.4byte	0x10e
 10680 0251 02       		.byte	0x2
 10681 0252 00       		.byte	0
 10682 0253 07       		.uleb128 0x7
 10683 0254 A5000000 		.4byte	0xa5
 10684 0258 63020000 		.4byte	0x263
 10685 025c 08       		.uleb128 0x8
 10686 025d 0E010000 		.4byte	0x10e
 10687 0261 02       		.byte	0x2
 10688 0262 00       		.byte	0
 10689 0263 0D       		.uleb128 0xd
 10690 0264 710A0000 		.4byte	.LASF46
 10691 0268 28       		.byte	0x28
 10692 0269 07       		.byte	0x7
 10693 026a FA       		.byte	0xfa
 10694 026b 94020000 		.4byte	0x294
 10695 026f 0E       		.uleb128 0xe
 10696 0270 656D6700 		.ascii	"emg\000"
 10697 0274 07       		.byte	0x7
 10698 0275 FB       		.byte	0xfb
 10699 0276 94020000 		.4byte	0x294
 10700 027a 00       		.byte	0
 10701 027b 0F       		.uleb128 0xf
 10702 027c 280B0000 		.4byte	.LASF47
 10703 0280 07       		.byte	0x7
 10704 0281 FC       		.byte	0xfc
 10705 0282 A4020000 		.4byte	0x2a4
 10706 0286 08       		.byte	0x8
 10707 0287 0F       		.uleb128 0xf
 10708 0288 EC0E0000 		.4byte	.LASF48
 10709 028c 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 243


 10710 028d FD       		.byte	0xfd
 10711 028e 94020000 		.4byte	0x294
 10712 0292 20       		.byte	0x20
 10713 0293 00       		.byte	0
 10714 0294 07       		.uleb128 0x7
 10715 0295 BD000000 		.4byte	0xbd
 10716 0299 A4020000 		.4byte	0x2a4
 10717 029d 08       		.uleb128 0x8
 10718 029e 0E010000 		.4byte	0x10e
 10719 02a2 01       		.byte	0x1
 10720 02a3 00       		.byte	0
 10721 02a4 07       		.uleb128 0x7
 10722 02a5 BD000000 		.4byte	0xbd
 10723 02a9 B4020000 		.4byte	0x2b4
 10724 02ad 08       		.uleb128 0x8
 10725 02ae 0E010000 		.4byte	0x10e
 10726 02b2 05       		.byte	0x5
 10727 02b3 00       		.byte	0
 10728 02b4 10       		.uleb128 0x10
 10729 02b5 A9000000 		.4byte	.LASF49
 10730 02b9 86       		.byte	0x86
 10731 02ba 07       		.byte	0x7
 10732 02bb 0801     		.2byte	0x108
 10733 02bd F6020000 		.4byte	0x2f6
 10734 02c1 11       		.uleb128 0x11
 10735 02c2 2C060000 		.4byte	.LASF50
 10736 02c6 07       		.byte	0x7
 10737 02c7 0901     		.2byte	0x109
 10738 02c9 F6020000 		.4byte	0x2f6
 10739 02cd 00       		.byte	0
 10740 02ce 11       		.uleb128 0x11
 10741 02cf 9D0C0000 		.4byte	.LASF51
 10742 02d3 07       		.byte	0x7
 10743 02d4 0A01     		.2byte	0x10a
 10744 02d6 B1000000 		.4byte	0xb1
 10745 02da 80       		.byte	0x80
 10746 02db 12       		.uleb128 0x12
 10747 02dc 696E6400 		.ascii	"ind\000"
 10748 02e0 07       		.byte	0x7
 10749 02e1 0B01     		.2byte	0x10b
 10750 02e3 B1000000 		.4byte	0xb1
 10751 02e7 82       		.byte	0x82
 10752 02e8 11       		.uleb128 0x11
 10753 02e9 01020000 		.4byte	.LASF52
 10754 02ed 07       		.byte	0x7
 10755 02ee 0C01     		.2byte	0x10c
 10756 02f0 81000000 		.4byte	0x81
 10757 02f4 84       		.byte	0x84
 10758 02f5 00       		.byte	0
 10759 02f6 07       		.uleb128 0x7
 10760 02f7 81000000 		.4byte	0x81
 10761 02fb 06030000 		.4byte	0x306
 10762 02ff 08       		.uleb128 0x8
 10763 0300 0E010000 		.4byte	0x10e
 10764 0304 7F       		.byte	0x7f
 10765 0305 00       		.byte	0
 10766 0306 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 244


 10767 0307 7F030000 		.4byte	.LASF53
 10768 030b 60       		.byte	0x60
 10769 030c 07       		.byte	0x7
 10770 030d 1501     		.2byte	0x115
 10771 030f 96030000 		.4byte	0x396
 10772 0313 11       		.uleb128 0x11
 10773 0314 00000000 		.4byte	.LASF54
 10774 0318 07       		.byte	0x7
 10775 0319 1601     		.2byte	0x116
 10776 031b 96030000 		.4byte	0x396
 10777 031f 00       		.byte	0
 10778 0320 11       		.uleb128 0x11
 10779 0321 BE010000 		.4byte	.LASF55
 10780 0325 07       		.byte	0x7
 10781 0326 1701     		.2byte	0x117
 10782 0328 A6030000 		.4byte	0x3a6
 10783 032c 08       		.byte	0x8
 10784 032d 11       		.uleb128 0x11
 10785 032e 570B0000 		.4byte	.LASF56
 10786 0332 07       		.byte	0x7
 10787 0333 1801     		.2byte	0x118
 10788 0335 B6030000 		.4byte	0x3b6
 10789 0339 30       		.byte	0x30
 10790 033a 11       		.uleb128 0x11
 10791 033b 55010000 		.4byte	.LASF57
 10792 033f 07       		.byte	0x7
 10793 0340 1901     		.2byte	0x119
 10794 0342 99000000 		.4byte	0x99
 10795 0346 40       		.byte	0x40
 10796 0347 11       		.uleb128 0x11
 10797 0348 9C110000 		.4byte	.LASF58
 10798 034c 07       		.byte	0x7
 10799 034d 1A01     		.2byte	0x11a
 10800 034f 99000000 		.4byte	0x99
 10801 0353 44       		.byte	0x44
 10802 0354 11       		.uleb128 0x11
 10803 0355 B1000000 		.4byte	.LASF59
 10804 0359 07       		.byte	0x7
 10805 035a 1B01     		.2byte	0x11b
 10806 035c 99000000 		.4byte	0x99
 10807 0360 48       		.byte	0x48
 10808 0361 11       		.uleb128 0x11
 10809 0362 05080000 		.4byte	.LASF60
 10810 0366 07       		.byte	0x7
 10811 0367 1C01     		.2byte	0x11c
 10812 0369 99000000 		.4byte	0x99
 10813 036d 4C       		.byte	0x4c
 10814 036e 11       		.uleb128 0x11
 10815 036f 19000000 		.4byte	.LASF61
 10816 0373 07       		.byte	0x7
 10817 0374 1D01     		.2byte	0x11d
 10818 0376 99000000 		.4byte	0x99
 10819 037a 50       		.byte	0x50
 10820 037b 11       		.uleb128 0x11
 10821 037c 68020000 		.4byte	.LASF62
 10822 0380 07       		.byte	0x7
 10823 0381 1E01     		.2byte	0x11e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 245


 10824 0383 96030000 		.4byte	0x396
 10825 0387 54       		.byte	0x54
 10826 0388 11       		.uleb128 0x11
 10827 0389 4C030000 		.4byte	.LASF63
 10828 038d 07       		.byte	0x7
 10829 038e 1F01     		.2byte	0x11f
 10830 0390 C6030000 		.4byte	0x3c6
 10831 0394 5C       		.byte	0x5c
 10832 0395 00       		.byte	0
 10833 0396 07       		.uleb128 0x7
 10834 0397 99000000 		.4byte	0x99
 10835 039b A6030000 		.4byte	0x3a6
 10836 039f 08       		.uleb128 0x8
 10837 03a0 0E010000 		.4byte	0x10e
 10838 03a4 01       		.byte	0x1
 10839 03a5 00       		.byte	0
 10840 03a6 07       		.uleb128 0x7
 10841 03a7 99000000 		.4byte	0x99
 10842 03ab B6030000 		.4byte	0x3b6
 10843 03af 08       		.uleb128 0x8
 10844 03b0 0E010000 		.4byte	0x10e
 10845 03b4 09       		.byte	0x9
 10846 03b5 00       		.byte	0
 10847 03b6 07       		.uleb128 0x7
 10848 03b7 99000000 		.4byte	0x99
 10849 03bb C6030000 		.4byte	0x3c6
 10850 03bf 08       		.uleb128 0x8
 10851 03c0 0E010000 		.4byte	0x10e
 10852 03c4 03       		.byte	0x3
 10853 03c5 00       		.byte	0
 10854 03c6 07       		.uleb128 0x7
 10855 03c7 81000000 		.4byte	0x81
 10856 03cb D6030000 		.4byte	0x3d6
 10857 03cf 08       		.uleb128 0x8
 10858 03d0 0E010000 		.4byte	0x10e
 10859 03d4 03       		.byte	0x3
 10860 03d5 00       		.byte	0
 10861 03d6 10       		.uleb128 0x10
 10862 03d7 24020000 		.4byte	.LASF64
 10863 03db 10       		.byte	0x10
 10864 03dc 07       		.byte	0x7
 10865 03dd 2601     		.2byte	0x126
 10866 03df 65040000 		.4byte	0x465
 10867 03e3 12       		.uleb128 0x12
 10868 03e4 696400   		.ascii	"id\000"
 10869 03e7 07       		.byte	0x7
 10870 03e8 2701     		.2byte	0x127
 10871 03ea 81000000 		.4byte	0x81
 10872 03ee 00       		.byte	0
 10873 03ef 11       		.uleb128 0x11
 10874 03f0 070F0000 		.4byte	.LASF65
 10875 03f4 07       		.byte	0x7
 10876 03f5 2801     		.2byte	0x128
 10877 03f7 65040000 		.4byte	0x465
 10878 03fb 01       		.byte	0x1
 10879 03fc 11       		.uleb128 0x11
 10880 03fd 430F0000 		.4byte	.LASF66
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 246


 10881 0401 07       		.byte	0x7
 10882 0402 2901     		.2byte	0x129
 10883 0404 65040000 		.4byte	0x465
 10884 0408 04       		.byte	0x4
 10885 0409 11       		.uleb128 0x11
 10886 040a D0040000 		.4byte	.LASF67
 10887 040e 07       		.byte	0x7
 10888 040f 2A01     		.2byte	0x12a
 10889 0411 81000000 		.4byte	0x81
 10890 0415 07       		.byte	0x7
 10891 0416 11       		.uleb128 0x11
 10892 0417 08030000 		.4byte	.LASF68
 10893 041b 07       		.byte	0x7
 10894 041c 2B01     		.2byte	0x12b
 10895 041e 81000000 		.4byte	0x81
 10896 0422 08       		.byte	0x8
 10897 0423 11       		.uleb128 0x11
 10898 0424 4A020000 		.4byte	.LASF69
 10899 0428 07       		.byte	0x7
 10900 0429 2C01     		.2byte	0x12c
 10901 042b 81000000 		.4byte	0x81
 10902 042f 09       		.byte	0x9
 10903 0430 11       		.uleb128 0x11
 10904 0431 74100000 		.4byte	.LASF70
 10905 0435 07       		.byte	0x7
 10906 0436 2D01     		.2byte	0x12d
 10907 0438 81000000 		.4byte	0x81
 10908 043c 0A       		.byte	0xa
 10909 043d 11       		.uleb128 0x11
 10910 043e 08100000 		.4byte	.LASF71
 10911 0442 07       		.byte	0x7
 10912 0443 2E01     		.2byte	0x12e
 10913 0445 81000000 		.4byte	0x81
 10914 0449 0B       		.byte	0xb
 10915 044a 11       		.uleb128 0x11
 10916 044b BD0D0000 		.4byte	.LASF72
 10917 044f 07       		.byte	0x7
 10918 0450 2F01     		.2byte	0x12f
 10919 0452 81000000 		.4byte	0x81
 10920 0456 0C       		.byte	0xc
 10921 0457 11       		.uleb128 0x11
 10922 0458 4C030000 		.4byte	.LASF63
 10923 045c 07       		.byte	0x7
 10924 045d 3001     		.2byte	0x130
 10925 045f 65040000 		.4byte	0x465
 10926 0463 0D       		.byte	0xd
 10927 0464 00       		.byte	0
 10928 0465 07       		.uleb128 0x7
 10929 0466 81000000 		.4byte	0x81
 10930 046a 75040000 		.4byte	0x475
 10931 046e 08       		.uleb128 0x8
 10932 046f 0E010000 		.4byte	0x10e
 10933 0473 02       		.byte	0x2
 10934 0474 00       		.byte	0
 10935 0475 10       		.uleb128 0x10
 10936 0476 3A110000 		.4byte	.LASF73
 10937 047a 70       		.byte	0x70
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 247


 10938 047b 07       		.byte	0x7
 10939 047c 3701     		.2byte	0x137
 10940 047e EF050000 		.4byte	0x5ef
 10941 0482 12       		.uleb128 0x12
 10942 0483 6B5F7000 		.ascii	"k_p\000"
 10943 0487 07       		.byte	0x7
 10944 0488 3801     		.2byte	0x138
 10945 048a BD000000 		.4byte	0xbd
 10946 048e 00       		.byte	0
 10947 048f 12       		.uleb128 0x12
 10948 0490 6B5F6900 		.ascii	"k_i\000"
 10949 0494 07       		.byte	0x7
 10950 0495 3901     		.2byte	0x139
 10951 0497 BD000000 		.4byte	0xbd
 10952 049b 04       		.byte	0x4
 10953 049c 12       		.uleb128 0x12
 10954 049d 6B5F6400 		.ascii	"k_d\000"
 10955 04a1 07       		.byte	0x7
 10956 04a2 3A01     		.2byte	0x13a
 10957 04a4 BD000000 		.4byte	0xbd
 10958 04a8 08       		.byte	0x8
 10959 04a9 11       		.uleb128 0x11
 10960 04aa F60C0000 		.4byte	.LASF74
 10961 04ae 07       		.byte	0x7
 10962 04af 3B01     		.2byte	0x13b
 10963 04b1 BD000000 		.4byte	0xbd
 10964 04b5 0C       		.byte	0xc
 10965 04b6 11       		.uleb128 0x11
 10966 04b7 89050000 		.4byte	.LASF75
 10967 04bb 07       		.byte	0x7
 10968 04bc 3C01     		.2byte	0x13c
 10969 04be BD000000 		.4byte	0xbd
 10970 04c2 10       		.byte	0x10
 10971 04c3 11       		.uleb128 0x11
 10972 04c4 71050000 		.4byte	.LASF76
 10973 04c8 07       		.byte	0x7
 10974 04c9 3D01     		.2byte	0x13d
 10975 04cb BD000000 		.4byte	0xbd
 10976 04cf 14       		.byte	0x14
 10977 04d0 11       		.uleb128 0x11
 10978 04d1 C80F0000 		.4byte	.LASF77
 10979 04d5 07       		.byte	0x7
 10980 04d6 3E01     		.2byte	0x13e
 10981 04d8 BD000000 		.4byte	0xbd
 10982 04dc 18       		.byte	0x18
 10983 04dd 11       		.uleb128 0x11
 10984 04de 25060000 		.4byte	.LASF78
 10985 04e2 07       		.byte	0x7
 10986 04e3 3F01     		.2byte	0x13f
 10987 04e5 BD000000 		.4byte	0xbd
 10988 04e9 1C       		.byte	0x1c
 10989 04ea 11       		.uleb128 0x11
 10990 04eb D70E0000 		.4byte	.LASF79
 10991 04ef 07       		.byte	0x7
 10992 04f0 4001     		.2byte	0x140
 10993 04f2 BD000000 		.4byte	0xbd
 10994 04f6 20       		.byte	0x20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 248


 10995 04f7 11       		.uleb128 0x11
 10996 04f8 33060000 		.4byte	.LASF80
 10997 04fc 07       		.byte	0x7
 10998 04fd 4101     		.2byte	0x141
 10999 04ff BD000000 		.4byte	0xbd
 11000 0503 24       		.byte	0x24
 11001 0504 11       		.uleb128 0x11
 11002 0505 7B070000 		.4byte	.LASF81
 11003 0509 07       		.byte	0x7
 11004 050a 4201     		.2byte	0x142
 11005 050c BD000000 		.4byte	0xbd
 11006 0510 28       		.byte	0x28
 11007 0511 11       		.uleb128 0x11
 11008 0512 69120000 		.4byte	.LASF82
 11009 0516 07       		.byte	0x7
 11010 0517 4301     		.2byte	0x143
 11011 0519 BD000000 		.4byte	0xbd
 11012 051d 2C       		.byte	0x2c
 11013 051e 11       		.uleb128 0x11
 11014 051f 15080000 		.4byte	.LASF83
 11015 0523 07       		.byte	0x7
 11016 0524 4401     		.2byte	0x144
 11017 0526 81000000 		.4byte	0x81
 11018 052a 30       		.byte	0x30
 11019 052b 11       		.uleb128 0x11
 11020 052c B10F0000 		.4byte	.LASF84
 11021 0530 07       		.byte	0x7
 11022 0531 4501     		.2byte	0x145
 11023 0533 81000000 		.4byte	0x81
 11024 0537 31       		.byte	0x31
 11025 0538 11       		.uleb128 0x11
 11026 0539 080D0000 		.4byte	.LASF85
 11027 053d 07       		.byte	0x7
 11028 053e 4601     		.2byte	0x146
 11029 0540 81000000 		.4byte	0x81
 11030 0544 32       		.byte	0x32
 11031 0545 11       		.uleb128 0x11
 11032 0546 57110000 		.4byte	.LASF86
 11033 054a 07       		.byte	0x7
 11034 054b 4701     		.2byte	0x147
 11035 054d 81000000 		.4byte	0x81
 11036 0551 33       		.byte	0x33
 11037 0552 11       		.uleb128 0x11
 11038 0553 D6000000 		.4byte	.LASF87
 11039 0557 07       		.byte	0x7
 11040 0558 4801     		.2byte	0x148
 11041 055a BD000000 		.4byte	0xbd
 11042 055e 34       		.byte	0x34
 11043 055f 11       		.uleb128 0x11
 11044 0560 B9050000 		.4byte	.LASF88
 11045 0564 07       		.byte	0x7
 11046 0565 4901     		.2byte	0x149
 11047 0567 BD000000 		.4byte	0xbd
 11048 056b 38       		.byte	0x38
 11049 056c 11       		.uleb128 0x11
 11050 056d 2D0A0000 		.4byte	.LASF89
 11051 0571 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 249


 11052 0572 4A01     		.2byte	0x14a
 11053 0574 BD000000 		.4byte	0xbd
 11054 0578 3C       		.byte	0x3c
 11055 0579 11       		.uleb128 0x11
 11056 057a 25050000 		.4byte	.LASF90
 11057 057e 07       		.byte	0x7
 11058 057f 4B01     		.2byte	0x14b
 11059 0581 BD000000 		.4byte	0xbd
 11060 0585 40       		.byte	0x40
 11061 0586 11       		.uleb128 0x11
 11062 0587 3F010000 		.4byte	.LASF91
 11063 058b 07       		.byte	0x7
 11064 058c 4C01     		.2byte	0x14c
 11065 058e EF050000 		.4byte	0x5ef
 11066 0592 44       		.byte	0x44
 11067 0593 11       		.uleb128 0x11
 11068 0594 13120000 		.4byte	.LASF92
 11069 0598 07       		.byte	0x7
 11070 0599 4D01     		.2byte	0x14d
 11071 059b B1000000 		.4byte	0xb1
 11072 059f 5C       		.byte	0x5c
 11073 05a0 11       		.uleb128 0x11
 11074 05a1 81080000 		.4byte	.LASF93
 11075 05a5 07       		.byte	0x7
 11076 05a6 4E01     		.2byte	0x14e
 11077 05a8 81000000 		.4byte	0x81
 11078 05ac 5E       		.byte	0x5e
 11079 05ad 11       		.uleb128 0x11
 11080 05ae C80A0000 		.4byte	.LASF94
 11081 05b2 07       		.byte	0x7
 11082 05b3 4F01     		.2byte	0x14f
 11083 05b5 81000000 		.4byte	0x81
 11084 05b9 5F       		.byte	0x5f
 11085 05ba 11       		.uleb128 0x11
 11086 05bb DB040000 		.4byte	.LASF95
 11087 05bf 07       		.byte	0x7
 11088 05c0 5001     		.2byte	0x150
 11089 05c2 81000000 		.4byte	0x81
 11090 05c6 60       		.byte	0x60
 11091 05c7 11       		.uleb128 0x11
 11092 05c8 60050000 		.4byte	.LASF96
 11093 05cc 07       		.byte	0x7
 11094 05cd 5101     		.2byte	0x151
 11095 05cf 81000000 		.4byte	0x81
 11096 05d3 61       		.byte	0x61
 11097 05d4 11       		.uleb128 0x11
 11098 05d5 84040000 		.4byte	.LASF97
 11099 05d9 07       		.byte	0x7
 11100 05da 5201     		.2byte	0x152
 11101 05dc 81000000 		.4byte	0x81
 11102 05e0 62       		.byte	0x62
 11103 05e1 11       		.uleb128 0x11
 11104 05e2 4C030000 		.4byte	.LASF63
 11105 05e6 07       		.byte	0x7
 11106 05e7 5301     		.2byte	0x153
 11107 05e9 FF050000 		.4byte	0x5ff
 11108 05ed 63       		.byte	0x63
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 250


 11109 05ee 00       		.byte	0
 11110 05ef 07       		.uleb128 0x7
 11111 05f0 D5000000 		.4byte	0xd5
 11112 05f4 FF050000 		.4byte	0x5ff
 11113 05f8 08       		.uleb128 0x8
 11114 05f9 0E010000 		.4byte	0x10e
 11115 05fd 05       		.byte	0x5
 11116 05fe 00       		.byte	0
 11117 05ff 07       		.uleb128 0x7
 11118 0600 81000000 		.4byte	0x81
 11119 0604 0F060000 		.4byte	0x60f
 11120 0608 08       		.uleb128 0x8
 11121 0609 0E010000 		.4byte	0x10e
 11122 060d 0C       		.byte	0xc
 11123 060e 00       		.byte	0
 11124 060f 10       		.uleb128 0x10
 11125 0610 B3100000 		.4byte	.LASF98
 11126 0614 30       		.byte	0x30
 11127 0615 07       		.byte	0x7
 11128 0616 5A01     		.2byte	0x15a
 11129 0618 92060000 		.4byte	0x692
 11130 061c 11       		.uleb128 0x11
 11131 061d E7090000 		.4byte	.LASF99
 11132 0621 07       		.byte	0x7
 11133 0622 5B01     		.2byte	0x15b
 11134 0624 92060000 		.4byte	0x692
 11135 0628 00       		.byte	0
 11136 0629 12       		.uleb128 0x12
 11137 062a 72657300 		.ascii	"res\000"
 11138 062e 07       		.byte	0x7
 11139 062f 5C01     		.2byte	0x15c
 11140 0631 65040000 		.4byte	0x465
 11141 0635 05       		.byte	0x5
 11142 0636 11       		.uleb128 0x11
 11143 0637 41080000 		.4byte	.LASF100
 11144 063b 07       		.byte	0x7
 11145 063c 5D01     		.2byte	0x15d
 11146 063e 43020000 		.4byte	0x243
 11147 0642 08       		.byte	0x8
 11148 0643 11       		.uleb128 0x11
 11149 0644 82050000 		.4byte	.LASF101
 11150 0648 07       		.byte	0x7
 11151 0649 5E01     		.2byte	0x15e
 11152 064b A2060000 		.4byte	0x6a2
 11153 064f 14       		.byte	0x14
 11154 0650 11       		.uleb128 0x11
 11155 0651 FC0B0000 		.4byte	.LASF102
 11156 0655 07       		.byte	0x7
 11157 0656 5F01     		.2byte	0x15f
 11158 0658 81000000 		.4byte	0x81
 11159 065c 20       		.byte	0x20
 11160 065d 11       		.uleb128 0x11
 11161 065e 07020000 		.4byte	.LASF103
 11162 0662 07       		.byte	0x7
 11163 0663 6001     		.2byte	0x160
 11164 0665 65040000 		.4byte	0x465
 11165 0669 21       		.byte	0x21
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 251


 11166 066a 11       		.uleb128 0x11
 11167 066b AD0B0000 		.4byte	.LASF104
 11168 066f 07       		.byte	0x7
 11169 0670 6101     		.2byte	0x161
 11170 0672 A5000000 		.4byte	0xa5
 11171 0676 24       		.byte	0x24
 11172 0677 11       		.uleb128 0x11
 11173 0678 DF0D0000 		.4byte	.LASF105
 11174 067c 07       		.byte	0x7
 11175 067d 6201     		.2byte	0x162
 11176 067f 53020000 		.4byte	0x253
 11177 0683 25       		.byte	0x25
 11178 0684 11       		.uleb128 0x11
 11179 0685 4C030000 		.4byte	.LASF63
 11180 0689 07       		.byte	0x7
 11181 068a 6301     		.2byte	0x163
 11182 068c B2060000 		.4byte	0x6b2
 11183 0690 28       		.byte	0x28
 11184 0691 00       		.byte	0
 11185 0692 07       		.uleb128 0x7
 11186 0693 81000000 		.4byte	0x81
 11187 0697 A2060000 		.4byte	0x6a2
 11188 069b 08       		.uleb128 0x8
 11189 069c 0E010000 		.4byte	0x10e
 11190 06a0 04       		.byte	0x4
 11191 06a1 00       		.byte	0
 11192 06a2 07       		.uleb128 0x7
 11193 06a3 C9000000 		.4byte	0xc9
 11194 06a7 B2060000 		.4byte	0x6b2
 11195 06ab 08       		.uleb128 0x8
 11196 06ac 0E010000 		.4byte	0x10e
 11197 06b0 02       		.byte	0x2
 11198 06b1 00       		.byte	0
 11199 06b2 07       		.uleb128 0x7
 11200 06b3 81000000 		.4byte	0x81
 11201 06b7 C2060000 		.4byte	0x6c2
 11202 06bb 08       		.uleb128 0x8
 11203 06bc 0E010000 		.4byte	0x10e
 11204 06c0 07       		.byte	0x7
 11205 06c1 00       		.byte	0
 11206 06c2 10       		.uleb128 0x10
 11207 06c3 B7010000 		.4byte	.LASF106
 11208 06c7 10       		.byte	0x10
 11209 06c8 07       		.byte	0x7
 11210 06c9 6A01     		.2byte	0x16a
 11211 06cb 11070000 		.4byte	0x711
 11212 06cf 11       		.uleb128 0x11
 11213 06d0 360B0000 		.4byte	.LASF107
 11214 06d4 07       		.byte	0x7
 11215 06d5 6B01     		.2byte	0x16b
 11216 06d7 11070000 		.4byte	0x711
 11217 06db 00       		.byte	0
 11218 06dc 11       		.uleb128 0x11
 11219 06dd 05120000 		.4byte	.LASF108
 11220 06e1 07       		.byte	0x7
 11221 06e2 6C01     		.2byte	0x16c
 11222 06e4 96030000 		.4byte	0x396
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 252


 11223 06e8 04       		.byte	0x4
 11224 06e9 11       		.uleb128 0x11
 11225 06ea CF050000 		.4byte	.LASF109
 11226 06ee 07       		.byte	0x7
 11227 06ef 6D01     		.2byte	0x16d
 11228 06f1 21070000 		.4byte	0x721
 11229 06f5 0C       		.byte	0xc
 11230 06f6 11       		.uleb128 0x11
 11231 06f7 F90D0000 		.4byte	.LASF110
 11232 06fb 07       		.byte	0x7
 11233 06fc 6E01     		.2byte	0x16e
 11234 06fe 81000000 		.4byte	0x81
 11235 0702 0E       		.byte	0xe
 11236 0703 11       		.uleb128 0x11
 11237 0704 33040000 		.4byte	.LASF111
 11238 0708 07       		.byte	0x7
 11239 0709 6F01     		.2byte	0x16f
 11240 070b 81000000 		.4byte	0x81
 11241 070f 0F       		.byte	0xf
 11242 0710 00       		.byte	0
 11243 0711 07       		.uleb128 0x7
 11244 0712 8D000000 		.4byte	0x8d
 11245 0716 21070000 		.4byte	0x721
 11246 071a 08       		.uleb128 0x8
 11247 071b 0E010000 		.4byte	0x10e
 11248 071f 01       		.byte	0x1
 11249 0720 00       		.byte	0
 11250 0721 07       		.uleb128 0x7
 11251 0722 81000000 		.4byte	0x81
 11252 0726 31070000 		.4byte	0x731
 11253 072a 08       		.uleb128 0x8
 11254 072b 0E010000 		.4byte	0x10e
 11255 072f 01       		.byte	0x1
 11256 0730 00       		.byte	0
 11257 0731 10       		.uleb128 0x10
 11258 0732 F20A0000 		.4byte	.LASF112
 11259 0736 20       		.byte	0x20
 11260 0737 07       		.byte	0x7
 11261 0738 7601     		.2byte	0x176
 11262 073a 73070000 		.4byte	0x773
 11263 073e 11       		.uleb128 0x11
 11264 073f 8F020000 		.4byte	.LASF113
 11265 0743 07       		.byte	0x7
 11266 0744 7701     		.2byte	0x177
 11267 0746 81000000 		.4byte	0x81
 11268 074a 00       		.byte	0
 11269 074b 11       		.uleb128 0x11
 11270 074c 91100000 		.4byte	.LASF114
 11271 0750 07       		.byte	0x7
 11272 0751 7801     		.2byte	0x178
 11273 0753 81000000 		.4byte	0x81
 11274 0757 01       		.byte	0x1
 11275 0758 11       		.uleb128 0x11
 11276 0759 620A0000 		.4byte	.LASF115
 11277 075d 07       		.byte	0x7
 11278 075e 7901     		.2byte	0x179
 11279 0760 73070000 		.4byte	0x773
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 253


 11280 0764 02       		.byte	0x2
 11281 0765 11       		.uleb128 0x11
 11282 0766 4C030000 		.4byte	.LASF63
 11283 076a 07       		.byte	0x7
 11284 076b 7A01     		.2byte	0x17a
 11285 076d 92060000 		.4byte	0x692
 11286 0771 1B       		.byte	0x1b
 11287 0772 00       		.byte	0
 11288 0773 07       		.uleb128 0x7
 11289 0774 81000000 		.4byte	0x81
 11290 0778 89070000 		.4byte	0x789
 11291 077c 08       		.uleb128 0x8
 11292 077d 0E010000 		.4byte	0x10e
 11293 0781 04       		.byte	0x4
 11294 0782 08       		.uleb128 0x8
 11295 0783 0E010000 		.4byte	0x10e
 11296 0787 04       		.byte	0x4
 11297 0788 00       		.byte	0
 11298 0789 10       		.uleb128 0x10
 11299 078a EC0D0000 		.4byte	.LASF116
 11300 078e 20       		.byte	0x20
 11301 078f 07       		.byte	0x7
 11302 0790 8101     		.2byte	0x181
 11303 0792 E5070000 		.4byte	0x7e5
 11304 0796 11       		.uleb128 0x11
 11305 0797 F20B0000 		.4byte	.LASF117
 11306 079b 07       		.byte	0x7
 11307 079c 8201     		.2byte	0x182
 11308 079e E5070000 		.4byte	0x7e5
 11309 07a2 00       		.byte	0
 11310 07a3 11       		.uleb128 0x11
 11311 07a4 920F0000 		.4byte	.LASF118
 11312 07a8 07       		.byte	0x7
 11313 07a9 8301     		.2byte	0x183
 11314 07ab 81000000 		.4byte	0x81
 11315 07af 06       		.byte	0x6
 11316 07b0 11       		.uleb128 0x11
 11317 07b1 6B000000 		.4byte	.LASF119
 11318 07b5 07       		.byte	0x7
 11319 07b6 8401     		.2byte	0x184
 11320 07b8 81000000 		.4byte	0x81
 11321 07bc 07       		.byte	0x7
 11322 07bd 11       		.uleb128 0x11
 11323 07be 0E060000 		.4byte	.LASF120
 11324 07c2 07       		.byte	0x7
 11325 07c3 8501     		.2byte	0x185
 11326 07c5 F5070000 		.4byte	0x7f5
 11327 07c9 08       		.byte	0x8
 11328 07ca 11       		.uleb128 0x11
 11329 07cb 9D020000 		.4byte	.LASF121
 11330 07cf 07       		.byte	0x7
 11331 07d0 8601     		.2byte	0x186
 11332 07d2 81000000 		.4byte	0x81
 11333 07d6 14       		.byte	0x14
 11334 07d7 11       		.uleb128 0x11
 11335 07d8 4C030000 		.4byte	.LASF63
 11336 07dc 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 254


 11337 07dd 8701     		.2byte	0x187
 11338 07df 05080000 		.4byte	0x805
 11339 07e3 15       		.byte	0x15
 11340 07e4 00       		.byte	0
 11341 07e5 07       		.uleb128 0x7
 11342 07e6 81000000 		.4byte	0x81
 11343 07ea F5070000 		.4byte	0x7f5
 11344 07ee 08       		.uleb128 0x8
 11345 07ef 0E010000 		.4byte	0x10e
 11346 07f3 05       		.byte	0x5
 11347 07f4 00       		.byte	0
 11348 07f5 07       		.uleb128 0x7
 11349 07f6 81000000 		.4byte	0x81
 11350 07fa 05080000 		.4byte	0x805
 11351 07fe 08       		.uleb128 0x8
 11352 07ff 0E010000 		.4byte	0x10e
 11353 0803 0B       		.byte	0xb
 11354 0804 00       		.byte	0
 11355 0805 07       		.uleb128 0x7
 11356 0806 81000000 		.4byte	0x81
 11357 080a 15080000 		.4byte	0x815
 11358 080e 08       		.uleb128 0x8
 11359 080f 0E010000 		.4byte	0x10e
 11360 0813 0A       		.byte	0xa
 11361 0814 00       		.byte	0
 11362 0815 10       		.uleb128 0x10
 11363 0816 D70D0000 		.4byte	.LASF122
 11364 081a 20       		.byte	0x20
 11365 081b 07       		.byte	0x7
 11366 081c 8E01     		.2byte	0x18e
 11367 081e 4A080000 		.4byte	0x84a
 11368 0822 11       		.uleb128 0x11
 11369 0823 05040000 		.4byte	.LASF123
 11370 0827 07       		.byte	0x7
 11371 0828 8F01     		.2byte	0x18f
 11372 082a 15010000 		.4byte	0x115
 11373 082e 00       		.byte	0
 11374 082f 11       		.uleb128 0x11
 11375 0830 25030000 		.4byte	.LASF124
 11376 0834 07       		.byte	0x7
 11377 0835 9001     		.2byte	0x190
 11378 0837 C2060000 		.4byte	0x6c2
 11379 083b 08       		.byte	0x8
 11380 083c 11       		.uleb128 0x11
 11381 083d 4C030000 		.4byte	.LASF63
 11382 0841 07       		.byte	0x7
 11383 0842 9101     		.2byte	0x191
 11384 0844 B2060000 		.4byte	0x6b2
 11385 0848 18       		.byte	0x18
 11386 0849 00       		.byte	0
 11387 084a 10       		.uleb128 0x10
 11388 084b 50090000 		.4byte	.LASF125
 11389 084f 10       		.byte	0x10
 11390 0850 07       		.byte	0x7
 11391 0851 9801     		.2byte	0x198
 11392 0853 99080000 		.4byte	0x899
 11393 0857 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 255


 11394 0858 68080000 		.4byte	.LASF126
 11395 085c 07       		.byte	0x7
 11396 085d 9901     		.2byte	0x199
 11397 085f BD000000 		.4byte	0xbd
 11398 0863 00       		.byte	0
 11399 0864 11       		.uleb128 0x11
 11400 0865 4B120000 		.4byte	.LASF127
 11401 0869 07       		.byte	0x7
 11402 086a 9A01     		.2byte	0x19a
 11403 086c BD000000 		.4byte	0xbd
 11404 0870 04       		.byte	0x4
 11405 0871 11       		.uleb128 0x11
 11406 0872 D9050000 		.4byte	.LASF128
 11407 0876 07       		.byte	0x7
 11408 0877 9B01     		.2byte	0x19b
 11409 0879 BD000000 		.4byte	0xbd
 11410 087d 08       		.byte	0x8
 11411 087e 11       		.uleb128 0x11
 11412 087f 51070000 		.4byte	.LASF129
 11413 0883 07       		.byte	0x7
 11414 0884 9C01     		.2byte	0x19c
 11415 0886 81000000 		.4byte	0x81
 11416 088a 0C       		.byte	0xc
 11417 088b 11       		.uleb128 0x11
 11418 088c 4C030000 		.4byte	.LASF63
 11419 0890 07       		.byte	0x7
 11420 0891 9D01     		.2byte	0x19d
 11421 0893 65040000 		.4byte	0x465
 11422 0897 0D       		.byte	0xd
 11423 0898 00       		.byte	0
 11424 0899 10       		.uleb128 0x10
 11425 089a AD0E0000 		.4byte	.LASF130
 11426 089e 10       		.byte	0x10
 11427 089f 07       		.byte	0x7
 11428 08a0 A401     		.2byte	0x1a4
 11429 08a2 DB080000 		.4byte	0x8db
 11430 08a6 11       		.uleb128 0x11
 11431 08a7 64070000 		.4byte	.LASF131
 11432 08ab 07       		.byte	0x7
 11433 08ac A501     		.2byte	0x1a5
 11434 08ae 8D000000 		.4byte	0x8d
 11435 08b2 00       		.byte	0
 11436 08b3 11       		.uleb128 0x11
 11437 08b4 340E0000 		.4byte	.LASF132
 11438 08b8 07       		.byte	0x7
 11439 08b9 A601     		.2byte	0x1a6
 11440 08bb B1000000 		.4byte	0xb1
 11441 08bf 02       		.byte	0x2
 11442 08c0 11       		.uleb128 0x11
 11443 08c1 D8070000 		.4byte	.LASF133
 11444 08c5 07       		.byte	0x7
 11445 08c6 A701     		.2byte	0x1a7
 11446 08c8 11070000 		.4byte	0x711
 11447 08cc 04       		.byte	0x4
 11448 08cd 11       		.uleb128 0x11
 11449 08ce 4C030000 		.4byte	.LASF63
 11450 08d2 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 256


 11451 08d3 A801     		.2byte	0x1a8
 11452 08d5 B2060000 		.4byte	0x6b2
 11453 08d9 08       		.byte	0x8
 11454 08da 00       		.byte	0
 11455 08db 10       		.uleb128 0x10
 11456 08dc 62010000 		.4byte	.LASF134
 11457 08e0 10       		.byte	0x10
 11458 08e1 07       		.byte	0x7
 11459 08e2 AF01     		.2byte	0x1af
 11460 08e4 10090000 		.4byte	0x910
 11461 08e8 11       		.uleb128 0x11
 11462 08e9 820D0000 		.4byte	.LASF135
 11463 08ed 07       		.byte	0x7
 11464 08ee B001     		.2byte	0x1b0
 11465 08f0 81000000 		.4byte	0x81
 11466 08f4 00       		.byte	0
 11467 08f5 11       		.uleb128 0x11
 11468 08f6 4E0A0000 		.4byte	.LASF136
 11469 08fa 07       		.byte	0x7
 11470 08fb B101     		.2byte	0x1b1
 11471 08fd 81000000 		.4byte	0x81
 11472 0901 01       		.byte	0x1
 11473 0902 11       		.uleb128 0x11
 11474 0903 4C030000 		.4byte	.LASF63
 11475 0907 07       		.byte	0x7
 11476 0908 B201     		.2byte	0x1b2
 11477 090a 10090000 		.4byte	0x910
 11478 090e 02       		.byte	0x2
 11479 090f 00       		.byte	0
 11480 0910 07       		.uleb128 0x7
 11481 0911 81000000 		.4byte	0x81
 11482 0915 20090000 		.4byte	0x920
 11483 0919 08       		.uleb128 0x8
 11484 091a 0E010000 		.4byte	0x10e
 11485 091e 0D       		.byte	0xd
 11486 091f 00       		.byte	0
 11487 0920 10       		.uleb128 0x10
 11488 0921 69090000 		.4byte	.LASF137
 11489 0925 10       		.byte	0x10
 11490 0926 07       		.byte	0x7
 11491 0927 B901     		.2byte	0x1b9
 11492 0929 62090000 		.4byte	0x962
 11493 092d 11       		.uleb128 0x11
 11494 092e C9100000 		.4byte	.LASF138
 11495 0932 07       		.byte	0x7
 11496 0933 BA01     		.2byte	0x1ba
 11497 0935 BD000000 		.4byte	0xbd
 11498 0939 00       		.byte	0
 11499 093a 11       		.uleb128 0x11
 11500 093b 3C070000 		.4byte	.LASF139
 11501 093f 07       		.byte	0x7
 11502 0940 BB01     		.2byte	0x1bb
 11503 0942 D5000000 		.4byte	0xd5
 11504 0946 04       		.byte	0x4
 11505 0947 11       		.uleb128 0x11
 11506 0948 3A0D0000 		.4byte	.LASF140
 11507 094c 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 257


 11508 094d BC01     		.2byte	0x1bc
 11509 094f D5000000 		.4byte	0xd5
 11510 0953 08       		.byte	0x8
 11511 0954 11       		.uleb128 0x11
 11512 0955 4C030000 		.4byte	.LASF63
 11513 0959 07       		.byte	0x7
 11514 095a BD01     		.2byte	0x1bd
 11515 095c C6030000 		.4byte	0x3c6
 11516 0960 0C       		.byte	0xc
 11517 0961 00       		.byte	0
 11518 0962 10       		.uleb128 0x10
 11519 0963 EC010000 		.4byte	.LASF141
 11520 0967 12       		.byte	0x12
 11521 0968 07       		.byte	0x7
 11522 0969 C401     		.2byte	0x1c4
 11523 096b A4090000 		.4byte	0x9a4
 11524 096f 11       		.uleb128 0x11
 11525 0970 34120000 		.4byte	.LASF142
 11526 0974 07       		.byte	0x7
 11527 0975 C501     		.2byte	0x1c5
 11528 0977 81000000 		.4byte	0x81
 11529 097b 00       		.byte	0
 11530 097c 11       		.uleb128 0x11
 11531 097d 7E100000 		.4byte	.LASF143
 11532 0981 07       		.byte	0x7
 11533 0982 C601     		.2byte	0x1c6
 11534 0984 11070000 		.4byte	0x711
 11535 0988 02       		.byte	0x2
 11536 0989 11       		.uleb128 0x11
 11537 098a 37000000 		.4byte	.LASF144
 11538 098e 07       		.byte	0x7
 11539 098f C701     		.2byte	0x1c7
 11540 0991 81000000 		.4byte	0x81
 11541 0995 06       		.byte	0x6
 11542 0996 11       		.uleb128 0x11
 11543 0997 4C030000 		.4byte	.LASF63
 11544 099b 07       		.byte	0x7
 11545 099c C801     		.2byte	0x1c8
 11546 099e A4090000 		.4byte	0x9a4
 11547 09a2 07       		.byte	0x7
 11548 09a3 00       		.byte	0
 11549 09a4 07       		.uleb128 0x7
 11550 09a5 81000000 		.4byte	0x81
 11551 09a9 B4090000 		.4byte	0x9b4
 11552 09ad 08       		.uleb128 0x8
 11553 09ae 0E010000 		.4byte	0x10e
 11554 09b2 09       		.byte	0x9
 11555 09b3 00       		.byte	0
 11556 09b4 13       		.uleb128 0x13
 11557 09b5 E4100000 		.4byte	.LASF145
 11558 09b9 F402     		.2byte	0x2f4
 11559 09bb 07       		.byte	0x7
 11560 09bc D101     		.2byte	0x1d1
 11561 09be 990A0000 		.4byte	0xa99
 11562 09c2 11       		.uleb128 0x11
 11563 09c3 C30A0000 		.4byte	.LASF146
 11564 09c7 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 258


 11565 09c8 D301     		.2byte	0x1d3
 11566 09ca 81000000 		.4byte	0x81
 11567 09ce 00       		.byte	0
 11568 09cf 11       		.uleb128 0x11
 11569 09d0 4C030000 		.4byte	.LASF63
 11570 09d4 07       		.byte	0x7
 11571 09d5 D401     		.2byte	0x1d4
 11572 09d7 990A0000 		.4byte	0xa99
 11573 09db 01       		.byte	0x1
 11574 09dc 12       		.uleb128 0x12
 11575 09dd 636E7400 		.ascii	"cnt\000"
 11576 09e1 07       		.byte	0x7
 11577 09e2 D501     		.2byte	0x1d5
 11578 09e4 06030000 		.4byte	0x306
 11579 09e8 10       		.byte	0x10
 11580 09e9 11       		.uleb128 0x11
 11581 09ea DF020000 		.4byte	.LASF147
 11582 09ee 07       		.byte	0x7
 11583 09ef D601     		.2byte	0x1d6
 11584 09f1 A90A0000 		.4byte	0xaa9
 11585 09f5 70       		.byte	0x70
 11586 09f6 12       		.uleb128 0x12
 11587 09f7 64657600 		.ascii	"dev\000"
 11588 09fb 07       		.byte	0x7
 11589 09fc D701     		.2byte	0x1d7
 11590 09fe D6030000 		.4byte	0x3d6
 11591 0a02 A0       		.byte	0xa0
 11592 0a03 11       		.uleb128 0x11
 11593 0a04 F50E0000 		.4byte	.LASF148
 11594 0a08 07       		.byte	0x7
 11595 0a09 D801     		.2byte	0x1d8
 11596 0a0b B90A0000 		.4byte	0xab9
 11597 0a0f B0       		.byte	0xb0
 11598 0a10 14       		.uleb128 0x14
 11599 0a11 656E6300 		.ascii	"enc\000"
 11600 0a15 07       		.byte	0x7
 11601 0a16 D901     		.2byte	0x1d9
 11602 0a18 C90A0000 		.4byte	0xac9
 11603 0a1c 9001     		.2byte	0x190
 11604 0a1e 14       		.uleb128 0x14
 11605 0a1f 656D6700 		.ascii	"emg\000"
 11606 0a23 07       		.byte	0x7
 11607 0a24 DA01     		.2byte	0x1da
 11608 0a26 C2060000 		.4byte	0x6c2
 11609 0a2a F001     		.2byte	0x1f0
 11610 0a2c 14       		.uleb128 0x14
 11611 0a2d 696D7500 		.ascii	"imu\000"
 11612 0a31 07       		.byte	0x7
 11613 0a32 DB01     		.2byte	0x1db
 11614 0a34 31070000 		.4byte	0x731
 11615 0a38 0002     		.2byte	0x200
 11616 0a3a 14       		.uleb128 0x14
 11617 0a3b 65787000 		.ascii	"exp\000"
 11618 0a3f 07       		.byte	0x7
 11619 0a40 DC01     		.2byte	0x1dc
 11620 0a42 89070000 		.4byte	0x789
 11621 0a46 2002     		.2byte	0x220
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 259


 11622 0a48 15       		.uleb128 0x15
 11623 0a49 86000000 		.4byte	.LASF149
 11624 0a4d 07       		.byte	0x7
 11625 0a4e DD01     		.2byte	0x1dd
 11626 0a50 D90A0000 		.4byte	0xad9
 11627 0a54 4002     		.2byte	0x240
 11628 0a56 14       		.uleb128 0x14
 11629 0a57 534800   		.ascii	"SH\000"
 11630 0a5a 07       		.byte	0x7
 11631 0a5b DF01     		.2byte	0x1df
 11632 0a5d 4A080000 		.4byte	0x84a
 11633 0a61 A002     		.2byte	0x2a0
 11634 0a63 15       		.uleb128 0x15
 11635 0a64 CD000000 		.4byte	.LASF150
 11636 0a68 07       		.byte	0x7
 11637 0a69 E001     		.2byte	0x1e0
 11638 0a6b 99080000 		.4byte	0x899
 11639 0a6f B002     		.2byte	0x2b0
 11640 0a71 14       		.uleb128 0x14
 11641 0a72 4D5300   		.ascii	"MS\000"
 11642 0a75 07       		.byte	0x7
 11643 0a76 E101     		.2byte	0x1e1
 11644 0a78 DB080000 		.4byte	0x8db
 11645 0a7c C002     		.2byte	0x2c0
 11646 0a7e 14       		.uleb128 0x14
 11647 0a7f 464200   		.ascii	"FB\000"
 11648 0a82 07       		.byte	0x7
 11649 0a83 E201     		.2byte	0x1e2
 11650 0a85 20090000 		.4byte	0x920
 11651 0a89 D002     		.2byte	0x2d0
 11652 0a8b 14       		.uleb128 0x14
 11653 0a8c 575200   		.ascii	"WR\000"
 11654 0a8f 07       		.byte	0x7
 11655 0a90 E301     		.2byte	0x1e3
 11656 0a92 62090000 		.4byte	0x962
 11657 0a96 E002     		.2byte	0x2e0
 11658 0a98 00       		.byte	0
 11659 0a99 07       		.uleb128 0x7
 11660 0a9a 81000000 		.4byte	0x81
 11661 0a9e A90A0000 		.4byte	0xaa9
 11662 0aa2 08       		.uleb128 0x8
 11663 0aa3 0E010000 		.4byte	0x10e
 11664 0aa7 0E       		.byte	0xe
 11665 0aa8 00       		.byte	0
 11666 0aa9 07       		.uleb128 0x7
 11667 0aaa 81000000 		.4byte	0x81
 11668 0aae B90A0000 		.4byte	0xab9
 11669 0ab2 08       		.uleb128 0x8
 11670 0ab3 0E010000 		.4byte	0x10e
 11671 0ab7 2F       		.byte	0x2f
 11672 0ab8 00       		.byte	0
 11673 0ab9 07       		.uleb128 0x7
 11674 0aba 75040000 		.4byte	0x475
 11675 0abe C90A0000 		.4byte	0xac9
 11676 0ac2 08       		.uleb128 0x8
 11677 0ac3 0E010000 		.4byte	0x10e
 11678 0ac7 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 260


 11679 0ac8 00       		.byte	0
 11680 0ac9 07       		.uleb128 0x7
 11681 0aca 0F060000 		.4byte	0x60f
 11682 0ace D90A0000 		.4byte	0xad9
 11683 0ad2 08       		.uleb128 0x8
 11684 0ad3 0E010000 		.4byte	0x10e
 11685 0ad7 01       		.byte	0x1
 11686 0ad8 00       		.byte	0
 11687 0ad9 07       		.uleb128 0x7
 11688 0ada 15080000 		.4byte	0x815
 11689 0ade E90A0000 		.4byte	0xae9
 11690 0ae2 08       		.uleb128 0x8
 11691 0ae3 0E010000 		.4byte	0x10e
 11692 0ae7 02       		.byte	0x2
 11693 0ae8 00       		.byte	0
 11694 0ae9 10       		.uleb128 0x10
 11695 0aea A40C0000 		.4byte	.LASF151
 11696 0aee 28       		.byte	0x28
 11697 0aef 07       		.byte	0x7
 11698 0af0 EE01     		.2byte	0x1ee
 11699 0af2 450B0000 		.4byte	0xb45
 11700 0af6 11       		.uleb128 0x11
 11701 0af7 F5040000 		.4byte	.LASF152
 11702 0afb 07       		.byte	0x7
 11703 0afc EF01     		.2byte	0x1ef
 11704 0afe 81000000 		.4byte	0x81
 11705 0b02 00       		.byte	0
 11706 0b03 11       		.uleb128 0x11
 11707 0b04 59030000 		.4byte	.LASF153
 11708 0b08 07       		.byte	0x7
 11709 0b09 F001     		.2byte	0x1f0
 11710 0b0b 450B0000 		.4byte	0xb45
 11711 0b0f 02       		.byte	0x2
 11712 0b10 11       		.uleb128 0x11
 11713 0b11 E70B0000 		.4byte	.LASF154
 11714 0b15 07       		.byte	0x7
 11715 0b16 F101     		.2byte	0x1f1
 11716 0b18 450B0000 		.4byte	0xb45
 11717 0b1c 08       		.byte	0x8
 11718 0b1d 11       		.uleb128 0x11
 11719 0b1e B00C0000 		.4byte	.LASF155
 11720 0b22 07       		.byte	0x7
 11721 0b23 F201     		.2byte	0x1f2
 11722 0b25 450B0000 		.4byte	0xb45
 11723 0b29 0E       		.byte	0xe
 11724 0b2a 11       		.uleb128 0x11
 11725 0b2b 5D080000 		.4byte	.LASF156
 11726 0b2f 07       		.byte	0x7
 11727 0b30 F301     		.2byte	0x1f3
 11728 0b32 550B0000 		.4byte	0xb55
 11729 0b36 14       		.byte	0x14
 11730 0b37 11       		.uleb128 0x11
 11731 0b38 D9010000 		.4byte	.LASF157
 11732 0b3c 07       		.byte	0x7
 11733 0b3d F401     		.2byte	0x1f4
 11734 0b3f B1000000 		.4byte	0xb1
 11735 0b43 24       		.byte	0x24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 261


 11736 0b44 00       		.byte	0
 11737 0b45 07       		.uleb128 0x7
 11738 0b46 B1000000 		.4byte	0xb1
 11739 0b4a 550B0000 		.4byte	0xb55
 11740 0b4e 08       		.uleb128 0x8
 11741 0b4f 0E010000 		.4byte	0x10e
 11742 0b53 02       		.byte	0x2
 11743 0b54 00       		.byte	0
 11744 0b55 07       		.uleb128 0x7
 11745 0b56 D5000000 		.4byte	0xd5
 11746 0b5a 650B0000 		.4byte	0xb65
 11747 0b5e 08       		.uleb128 0x8
 11748 0b5f 0E010000 		.4byte	0x10e
 11749 0b63 03       		.byte	0x3
 11750 0b64 00       		.byte	0
 11751 0b65 10       		.uleb128 0x10
 11752 0b66 56120000 		.4byte	.LASF158
 11753 0b6a 08       		.byte	0x8
 11754 0b6b 07       		.byte	0x7
 11755 0b6c FB01     		.2byte	0x1fb
 11756 0b6e 8D0B0000 		.4byte	0xb8d
 11757 0b72 11       		.uleb128 0x11
 11758 0b73 C5050000 		.4byte	.LASF159
 11759 0b77 07       		.byte	0x7
 11760 0b78 FC01     		.2byte	0x1fc
 11761 0b7a BD000000 		.4byte	0xbd
 11762 0b7e 00       		.byte	0
 11763 0b7f 11       		.uleb128 0x11
 11764 0b80 1F020000 		.4byte	.LASF160
 11765 0b84 07       		.byte	0x7
 11766 0b85 FD01     		.2byte	0x1fd
 11767 0b87 BD000000 		.4byte	0xbd
 11768 0b8b 04       		.byte	0x4
 11769 0b8c 00       		.byte	0
 11770 0b8d 10       		.uleb128 0x10
 11771 0b8e 16040000 		.4byte	.LASF161
 11772 0b92 06       		.byte	0x6
 11773 0b93 07       		.byte	0x7
 11774 0b94 0402     		.2byte	0x204
 11775 0b96 CF0B0000 		.4byte	0xbcf
 11776 0b9a 11       		.uleb128 0x11
 11777 0b9b A7070000 		.4byte	.LASF162
 11778 0b9f 07       		.byte	0x7
 11779 0ba0 0502     		.2byte	0x205
 11780 0ba2 81000000 		.4byte	0x81
 11781 0ba6 00       		.byte	0
 11782 0ba7 11       		.uleb128 0x11
 11783 0ba8 72120000 		.4byte	.LASF163
 11784 0bac 07       		.byte	0x7
 11785 0bad 0602     		.2byte	0x206
 11786 0baf 81000000 		.4byte	0x81
 11787 0bb3 01       		.byte	0x1
 11788 0bb4 11       		.uleb128 0x11
 11789 0bb5 52060000 		.4byte	.LASF164
 11790 0bb9 07       		.byte	0x7
 11791 0bba 0702     		.2byte	0x207
 11792 0bbc B1000000 		.4byte	0xb1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 262


 11793 0bc0 02       		.byte	0x2
 11794 0bc1 11       		.uleb128 0x11
 11795 0bc2 210A0000 		.4byte	.LASF165
 11796 0bc6 07       		.byte	0x7
 11797 0bc7 0802     		.2byte	0x208
 11798 0bc9 B1000000 		.4byte	0xb1
 11799 0bcd 04       		.byte	0x4
 11800 0bce 00       		.byte	0
 11801 0bcf 16       		.uleb128 0x16
 11802 0bd0 01       		.byte	0x1
 11803 0bd1 2C000000 		.4byte	0x2c
 11804 0bd5 07       		.byte	0x7
 11805 0bd6 0C02     		.2byte	0x20c
 11806 0bd8 010C0000 		.4byte	0xc01
 11807 0bdc 0A       		.uleb128 0xa
 11808 0bdd E2050000 		.4byte	.LASF166
 11809 0be1 00       		.byte	0
 11810 0be2 0A       		.uleb128 0xa
 11811 0be3 7C0D0000 		.4byte	.LASF167
 11812 0be7 01       		.byte	0x1
 11813 0be8 0A       		.uleb128 0xa
 11814 0be9 800B0000 		.4byte	.LASF168
 11815 0bed 02       		.byte	0x2
 11816 0bee 0A       		.uleb128 0xa
 11817 0bef 82020000 		.4byte	.LASF169
 11818 0bf3 03       		.byte	0x3
 11819 0bf4 0A       		.uleb128 0xa
 11820 0bf5 570A0000 		.4byte	.LASF170
 11821 0bf9 04       		.byte	0x4
 11822 0bfa 0A       		.uleb128 0xa
 11823 0bfb 1A0D0000 		.4byte	.LASF171
 11824 0bff 05       		.byte	0x5
 11825 0c00 00       		.byte	0
 11826 0c01 05       		.uleb128 0x5
 11827 0c02 77050000 		.4byte	.LASF172
 11828 0c06 07       		.byte	0x7
 11829 0c07 1402     		.2byte	0x214
 11830 0c09 CF0B0000 		.4byte	0xbcf
 11831 0c0d 16       		.uleb128 0x16
 11832 0c0e 01       		.byte	0x1
 11833 0c0f 2C000000 		.4byte	0x2c
 11834 0c13 07       		.byte	0x7
 11835 0c14 1602     		.2byte	0x216
 11836 0c16 390C0000 		.4byte	0xc39
 11837 0c1a 0A       		.uleb128 0xa
 11838 0c1b CC010000 		.4byte	.LASF173
 11839 0c1f 00       		.byte	0
 11840 0c20 0A       		.uleb128 0xa
 11841 0c21 CB070000 		.4byte	.LASF174
 11842 0c25 01       		.byte	0x1
 11843 0c26 0A       		.uleb128 0xa
 11844 0c27 76080000 		.4byte	.LASF175
 11845 0c2b 02       		.byte	0x2
 11846 0c2c 0A       		.uleb128 0xa
 11847 0c2d C3030000 		.4byte	.LASF176
 11848 0c31 03       		.byte	0x3
 11849 0c32 0A       		.uleb128 0xa
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 263


 11850 0c33 2F120000 		.4byte	.LASF177
 11851 0c37 04       		.byte	0x4
 11852 0c38 00       		.byte	0
 11853 0c39 05       		.uleb128 0x5
 11854 0c3a 660E0000 		.4byte	.LASF178
 11855 0c3e 07       		.byte	0x7
 11856 0c3f 1D02     		.2byte	0x21d
 11857 0c41 0D0C0000 		.4byte	0xc0d
 11858 0c45 17       		.uleb128 0x17
 11859 0c46 A0050000 		.4byte	.LASF179
 11860 0c4a 01       		.byte	0x1
 11861 0c4b 62       		.byte	0x62
 11862 0c4c 00000000 		.4byte	.LFB64
 11863 0c50 18000000 		.4byte	.LFE64-.LFB64
 11864 0c54 01       		.uleb128 0x1
 11865 0c55 9C       		.byte	0x9c
 11866 0c56 17       		.uleb128 0x17
 11867 0c57 61100000 		.4byte	.LASF180
 11868 0c5b 01       		.byte	0x1
 11869 0c5c 6D       		.byte	0x6d
 11870 0c5d 00000000 		.4byte	.LFB65
 11871 0c61 20000000 		.4byte	.LFE65-.LFB65
 11872 0c65 01       		.uleb128 0x1
 11873 0c66 9C       		.byte	0x9c
 11874 0c67 18       		.uleb128 0x18
 11875 0c68 D5090000 		.4byte	.LASF212
 11876 0c6c 01       		.byte	0x1
 11877 0c6d 86       		.byte	0x86
 11878 0c6e 00000000 		.4byte	.LFB66
 11879 0c72 F4010000 		.4byte	.LFE66-.LFB66
 11880 0c76 01       		.uleb128 0x1
 11881 0c77 9C       		.byte	0x9c
 11882 0c78 FC0C0000 		.4byte	0xcfc
 11883 0c7c 19       		.uleb128 0x19
 11884 0c7d FA000000 		.4byte	.LASF181
 11885 0c81 01       		.byte	0x1
 11886 0c82 8B       		.byte	0x8b
 11887 0c83 81000000 		.4byte	0x81
 11888 0c87 05       		.uleb128 0x5
 11889 0c88 03       		.byte	0x3
 11890 0c89 00000000 		.4byte	state.10462
 11891 0c8d 19       		.uleb128 0x19
 11892 0c8e 77060000 		.4byte	.LASF182
 11893 0c92 01       		.byte	0x1
 11894 0c93 8E       		.byte	0x8e
 11895 0c94 81000000 		.4byte	0x81
 11896 0c98 05       		.uleb128 0x5
 11897 0c99 03       		.byte	0x3
 11898 0c9a 08000000 		.4byte	data_packet_index.10463
 11899 0c9e 19       		.uleb128 0x19
 11900 0c9f E30C0000 		.4byte	.LASF183
 11901 0ca3 01       		.byte	0x1
 11902 0ca4 8F       		.byte	0x8f
 11903 0ca5 81000000 		.4byte	0x81
 11904 0ca9 05       		.uleb128 0x5
 11905 0caa 03       		.byte	0x3
 11906 0cab 07000000 		.4byte	data_packet_length.10464
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 264


 11907 0caf 19       		.uleb128 0x19
 11908 0cb0 89060000 		.4byte	.LASF184
 11909 0cb4 01       		.byte	0x1
 11910 0cb5 90       		.byte	0x90
 11911 0cb6 F6020000 		.4byte	0x2f6
 11912 0cba 05       		.uleb128 0x5
 11913 0cbb 03       		.byte	0x3
 11914 0cbc 0C000000 		.4byte	data_packet_buffer.10465
 11915 0cc0 19       		.uleb128 0x19
 11916 0cc1 050B0000 		.4byte	.LASF185
 11917 0cc5 01       		.byte	0x1
 11918 0cc6 91       		.byte	0x91
 11919 0cc7 65040000 		.4byte	0x465
 11920 0ccb 05       		.uleb128 0x5
 11921 0ccc 03       		.byte	0x3
 11922 0ccd 04000000 		.4byte	rx_queue.10466
 11923 0cd1 19       		.uleb128 0x19
 11924 0cd2 91010000 		.4byte	.LASF186
 11925 0cd6 01       		.byte	0x1
 11926 0cd7 94       		.byte	0x94
 11927 0cd8 81000000 		.4byte	0x81
 11928 0cdc 02       		.uleb128 0x2
 11929 0cdd 91       		.byte	0x91
 11930 0cde 75       		.sleb128 -11
 11931 0cdf 19       		.uleb128 0x19
 11932 0ce0 3C060000 		.4byte	.LASF187
 11933 0ce4 01       		.byte	0x1
 11934 0ce5 95       		.byte	0x95
 11935 0ce6 81000000 		.4byte	0x81
 11936 0cea 02       		.uleb128 0x2
 11937 0ceb 91       		.byte	0x91
 11938 0cec 77       		.sleb128 -9
 11939 0ced 19       		.uleb128 0x19
 11940 0cee 84070000 		.4byte	.LASF188
 11941 0cf2 01       		.byte	0x1
 11942 0cf3 96       		.byte	0x96
 11943 0cf4 81000000 		.4byte	0x81
 11944 0cf8 02       		.uleb128 0x2
 11945 0cf9 91       		.byte	0x91
 11946 0cfa 76       		.sleb128 -10
 11947 0cfb 00       		.byte	0
 11948 0cfc 1A       		.uleb128 0x1a
 11949 0cfd 150F0000 		.4byte	.LASF195
 11950 0d01 01       		.byte	0x1
 11951 0d02 0C01     		.2byte	0x10c
 11952 0d04 00000000 		.4byte	.LFB67
 11953 0d08 24080000 		.4byte	.LFE67-.LFB67
 11954 0d0c 01       		.uleb128 0x1
 11955 0d0d 9C       		.byte	0x9c
 11956 0d0e 9B0D0000 		.4byte	0xd9b
 11957 0d12 1B       		.uleb128 0x1b
 11958 0d13 B3060000 		.4byte	.LASF189
 11959 0d17 01       		.byte	0x1
 11960 0d18 0E01     		.2byte	0x10e
 11961 0d1a 8D000000 		.4byte	0x8d
 11962 0d1e 05       		.uleb128 0x5
 11963 0d1f 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 265


 11964 0d20 00000000 		.4byte	counter_calibration.10482
 11965 0d24 1B       		.uleb128 0x1b
 11966 0d25 3B0C0000 		.4byte	.LASF190
 11967 0d29 01       		.byte	0x1
 11968 0d2a 0F01     		.2byte	0x10f
 11969 0d2c 8D000000 		.4byte	0x8d
 11970 0d30 05       		.uleb128 0x5
 11971 0d31 03       		.byte	0x3
 11972 0d32 02000000 		.4byte	counter_tension_func.10483
 11973 0d36 1B       		.uleb128 0x1b
 11974 0d37 A8010000 		.4byte	.LASF191
 11975 0d3b 01       		.byte	0x1
 11976 0d3c 1001     		.2byte	0x110
 11977 0d3e 9B0D0000 		.4byte	0xd9b
 11978 0d42 03       		.uleb128 0x3
 11979 0d43 91       		.byte	0x91
 11980 0d44 A86C     		.sleb128 -2520
 11981 0d46 1B       		.uleb128 0x1b
 11982 0d47 1E0C0000 		.4byte	.LASF192
 11983 0d4b 01       		.byte	0x1
 11984 0d4c 1201     		.2byte	0x112
 11985 0d4e 81000000 		.4byte	0x81
 11986 0d52 02       		.uleb128 0x2
 11987 0d53 91       		.byte	0x91
 11988 0d54 6E       		.sleb128 -18
 11989 0d55 1B       		.uleb128 0x1b
 11990 0d56 92090000 		.4byte	.LASF193
 11991 0d5a 01       		.byte	0x1
 11992 0d5b 1301     		.2byte	0x113
 11993 0d5d 81000000 		.4byte	0x81
 11994 0d61 02       		.uleb128 0x2
 11995 0d62 91       		.byte	0x91
 11996 0d63 6D       		.sleb128 -19
 11997 0d64 1C       		.uleb128 0x1c
 11998 0d65 90010000 		.4byte	.LBB2
 11999 0d69 32010000 		.4byte	.LBE2-.LBB2
 12000 0d6d 7F0D0000 		.4byte	0xd7f
 12001 0d71 1D       		.uleb128 0x1d
 12002 0d72 6900     		.ascii	"i\000"
 12003 0d74 01       		.byte	0x1
 12004 0d75 4E01     		.2byte	0x14e
 12005 0d77 81000000 		.4byte	0x81
 12006 0d7b 02       		.uleb128 0x2
 12007 0d7c 91       		.byte	0x91
 12008 0d7d 6F       		.sleb128 -17
 12009 0d7e 00       		.byte	0
 12010 0d7f 1E       		.uleb128 0x1e
 12011 0d80 56060000 		.4byte	.LBB3
 12012 0d84 50000000 		.4byte	.LBE3-.LBB3
 12013 0d88 1B       		.uleb128 0x1b
 12014 0d89 ED020000 		.4byte	.LASF194
 12015 0d8d 01       		.byte	0x1
 12016 0d8e 4102     		.2byte	0x241
 12017 0d90 AC0D0000 		.4byte	0xdac
 12018 0d94 04       		.uleb128 0x4
 12019 0d95 91       		.byte	0x91
 12020 0d96 90F77E   		.sleb128 -17520
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 266


 12021 0d99 00       		.byte	0
 12022 0d9a 00       		.byte	0
 12023 0d9b 07       		.uleb128 0x7
 12024 0d9c E3000000 		.4byte	0xe3
 12025 0da0 AC0D0000 		.4byte	0xdac
 12026 0da4 1F       		.uleb128 0x1f
 12027 0da5 0E010000 		.4byte	0x10e
 12028 0da9 C309     		.2byte	0x9c3
 12029 0dab 00       		.byte	0
 12030 0dac 07       		.uleb128 0x7
 12031 0dad E3000000 		.4byte	0xe3
 12032 0db1 BD0D0000 		.4byte	0xdbd
 12033 0db5 1F       		.uleb128 0x1f
 12034 0db6 0E010000 		.4byte	0x10e
 12035 0dba 973A     		.2byte	0x3a97
 12036 0dbc 00       		.byte	0
 12037 0dbd 1A       		.uleb128 0x1a
 12038 0dbe 280F0000 		.4byte	.LASF196
 12039 0dc2 01       		.byte	0x1
 12040 0dc3 8502     		.2byte	0x285
 12041 0dc5 00000000 		.4byte	.LFB68
 12042 0dc9 CC050000 		.4byte	.LFE68-.LFB68
 12043 0dcd 01       		.uleb128 0x1
 12044 0dce 9C       		.byte	0x9c
 12045 0dcf 730E0000 		.4byte	0xe73
 12046 0dd3 20       		.uleb128 0x20
 12047 0dd4 37080000 		.4byte	.LASF197
 12048 0dd8 01       		.byte	0x1
 12049 0dd9 8502     		.2byte	0x285
 12050 0ddb 81000000 		.4byte	0x81
 12051 0ddf 02       		.uleb128 0x2
 12052 0de0 91       		.byte	0x91
 12053 0de1 5F       		.sleb128 -33
 12054 0de2 20       		.uleb128 0x20
 12055 0de3 9C060000 		.4byte	.LASF198
 12056 0de7 01       		.byte	0x1
 12057 0de8 8502     		.2byte	0x285
 12058 0dea 730E0000 		.4byte	0xe73
 12059 0dee 02       		.uleb128 0x2
 12060 0def 91       		.byte	0x91
 12061 0df0 58       		.sleb128 -40
 12062 0df1 20       		.uleb128 0x20
 12063 0df2 13110000 		.4byte	.LASF199
 12064 0df6 01       		.byte	0x1
 12065 0df7 8502     		.2byte	0x285
 12066 0df9 730E0000 		.4byte	0xe73
 12067 0dfd 02       		.uleb128 0x2
 12068 0dfe 91       		.byte	0x91
 12069 0dff 54       		.sleb128 -44
 12070 0e00 1B       		.uleb128 0x1b
 12071 0e01 FB040000 		.4byte	.LASF200
 12072 0e05 01       		.byte	0x1
 12073 0e06 8702     		.2byte	0x287
 12074 0e08 BD000000 		.4byte	0xbd
 12075 0e0c 02       		.uleb128 0x2
 12076 0e0d 91       		.byte	0x91
 12077 0e0e 74       		.sleb128 -12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 267


 12078 0e0f 1B       		.uleb128 0x1b
 12079 0e10 1F040000 		.4byte	.LASF201
 12080 0e14 01       		.byte	0x1
 12081 0e15 8802     		.2byte	0x288
 12082 0e17 BD000000 		.4byte	0xbd
 12083 0e1b 02       		.uleb128 0x2
 12084 0e1c 91       		.byte	0x91
 12085 0e1d 68       		.sleb128 -24
 12086 0e1e 1B       		.uleb128 0x1b
 12087 0e1f 29040000 		.4byte	.LASF202
 12088 0e23 01       		.byte	0x1
 12089 0e24 8802     		.2byte	0x288
 12090 0e26 BD000000 		.4byte	0xbd
 12091 0e2a 02       		.uleb128 0x2
 12092 0e2b 91       		.byte	0x91
 12093 0e2c 64       		.sleb128 -28
 12094 0e2d 1D       		.uleb128 0x1d
 12095 0e2e 4D4F5400 		.ascii	"MOT\000"
 12096 0e32 01       		.byte	0x1
 12097 0e33 8902     		.2byte	0x289
 12098 0e35 790E0000 		.4byte	0xe79
 12099 0e39 02       		.uleb128 0x2
 12100 0e3a 91       		.byte	0x91
 12101 0e3b 70       		.sleb128 -16
 12102 0e3c 1B       		.uleb128 0x1b
 12103 0e3d DE100000 		.4byte	.LASF203
 12104 0e41 01       		.byte	0x1
 12105 0e42 8A02     		.2byte	0x28a
 12106 0e44 81000000 		.4byte	0x81
 12107 0e48 02       		.uleb128 0x2
 12108 0e49 91       		.byte	0x91
 12109 0e4a 6F       		.sleb128 -17
 12110 0e4b 1B       		.uleb128 0x1b
 12111 0e4c F90A0000 		.4byte	.LASF204
 12112 0e50 01       		.byte	0x1
 12113 0e51 8C02     		.2byte	0x28c
 12114 0e53 21070000 		.4byte	0x721
 12115 0e57 05       		.uleb128 0x5
 12116 0e58 03       		.byte	0x3
 12117 0e59 8C000000 		.4byte	current_emg.10508
 12118 0e5d 21       		.uleb128 0x21
 12119 0e5e 00000000 		.4byte	.Ldebug_ranges0+0
 12120 0e62 1B       		.uleb128 0x1b
 12121 0e63 F0000000 		.4byte	.LASF205
 12122 0e67 01       		.byte	0x1
 12123 0e68 B102     		.2byte	0x2b1
 12124 0e6a BD000000 		.4byte	0xbd
 12125 0e6e 02       		.uleb128 0x2
 12126 0e6f 91       		.byte	0x91
 12127 0e70 60       		.sleb128 -32
 12128 0e71 00       		.byte	0
 12129 0e72 00       		.byte	0
 12130 0e73 0C       		.uleb128 0xc
 12131 0e74 04       		.byte	0x4
 12132 0e75 A5010000 		.4byte	0x1a5
 12133 0e79 0C       		.uleb128 0xc
 12134 0e7a 04       		.byte	0x4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 268


 12135 0e7b 75040000 		.4byte	0x475
 12136 0e7f 22       		.uleb128 0x22
 12137 0e80 22100000 		.4byte	.LASF206
 12138 0e84 01       		.byte	0x1
 12139 0e85 6403     		.2byte	0x364
 12140 0e87 00000000 		.4byte	.LFB69
 12141 0e8b 34030000 		.4byte	.LFE69-.LFB69
 12142 0e8f 01       		.uleb128 0x1
 12143 0e90 9C       		.byte	0x9c
 12144 0e91 0F0F0000 		.4byte	0xf0f
 12145 0e95 20       		.uleb128 0x20
 12146 0e96 37080000 		.4byte	.LASF197
 12147 0e9a 01       		.byte	0x1
 12148 0e9b 6403     		.2byte	0x364
 12149 0e9d 81000000 		.4byte	0x81
 12150 0ea1 02       		.uleb128 0x2
 12151 0ea2 91       		.byte	0x91
 12152 0ea3 67       		.sleb128 -25
 12153 0ea4 20       		.uleb128 0x20
 12154 0ea5 9C060000 		.4byte	.LASF198
 12155 0ea9 01       		.byte	0x1
 12156 0eaa 6403     		.2byte	0x364
 12157 0eac 730E0000 		.4byte	0xe73
 12158 0eb0 02       		.uleb128 0x2
 12159 0eb1 91       		.byte	0x91
 12160 0eb2 60       		.sleb128 -32
 12161 0eb3 20       		.uleb128 0x20
 12162 0eb4 13110000 		.4byte	.LASF199
 12163 0eb8 01       		.byte	0x1
 12164 0eb9 6403     		.2byte	0x364
 12165 0ebb 730E0000 		.4byte	0xe73
 12166 0ebf 02       		.uleb128 0x2
 12167 0ec0 91       		.byte	0x91
 12168 0ec1 5C       		.sleb128 -36
 12169 0ec2 23       		.uleb128 0x23
 12170 0ec3 18000000 		.4byte	.Ldebug_ranges0+0x18
 12171 0ec7 EA0E0000 		.4byte	0xeea
 12172 0ecb 1B       		.uleb128 0x1b
 12173 0ecc F0000000 		.4byte	.LASF205
 12174 0ed0 01       		.byte	0x1
 12175 0ed1 6B03     		.2byte	0x36b
 12176 0ed3 BD000000 		.4byte	0xbd
 12177 0ed7 02       		.uleb128 0x2
 12178 0ed8 91       		.byte	0x91
 12179 0ed9 74       		.sleb128 -12
 12180 0eda 1B       		.uleb128 0x1b
 12181 0edb F7010000 		.4byte	.LASF207
 12182 0edf 01       		.byte	0x1
 12183 0ee0 6C03     		.2byte	0x36c
 12184 0ee2 BD000000 		.4byte	0xbd
 12185 0ee6 02       		.uleb128 0x2
 12186 0ee7 91       		.byte	0x91
 12187 0ee8 70       		.sleb128 -16
 12188 0ee9 00       		.byte	0
 12189 0eea 21       		.uleb128 0x21
 12190 0eeb 30000000 		.4byte	.Ldebug_ranges0+0x30
 12191 0eef 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 269


 12192 0ef0 4B0D0000 		.4byte	.LASF208
 12193 0ef4 01       		.byte	0x1
 12194 0ef5 9103     		.2byte	0x391
 12195 0ef7 BD000000 		.4byte	0xbd
 12196 0efb 02       		.uleb128 0x2
 12197 0efc 91       		.byte	0x91
 12198 0efd 6C       		.sleb128 -20
 12199 0efe 1B       		.uleb128 0x1b
 12200 0eff CD090000 		.4byte	.LASF209
 12201 0f03 01       		.byte	0x1
 12202 0f04 9203     		.2byte	0x392
 12203 0f06 BD000000 		.4byte	0xbd
 12204 0f0a 02       		.uleb128 0x2
 12205 0f0b 91       		.byte	0x91
 12206 0f0c 68       		.sleb128 -24
 12207 0f0d 00       		.byte	0
 12208 0f0e 00       		.byte	0
 12209 0f0f 1A       		.uleb128 0x1a
 12210 0f10 F9090000 		.4byte	.LASF210
 12211 0f14 01       		.byte	0x1
 12212 0f15 BD03     		.2byte	0x3bd
 12213 0f17 00000000 		.4byte	.LFB70
 12214 0f1b B0010000 		.4byte	.LFE70-.LFB70
 12215 0f1f 01       		.uleb128 0x1
 12216 0f20 9C       		.byte	0x9c
 12217 0f21 830F0000 		.4byte	0xf83
 12218 0f25 20       		.uleb128 0x20
 12219 0f26 37080000 		.4byte	.LASF197
 12220 0f2a 01       		.byte	0x1
 12221 0f2b BD03     		.2byte	0x3bd
 12222 0f2d 81000000 		.4byte	0x81
 12223 0f31 02       		.uleb128 0x2
 12224 0f32 91       		.byte	0x91
 12225 0f33 77       		.sleb128 -9
 12226 0f34 20       		.uleb128 0x20
 12227 0f35 9C060000 		.4byte	.LASF198
 12228 0f39 01       		.byte	0x1
 12229 0f3a BD03     		.2byte	0x3bd
 12230 0f3c 730E0000 		.4byte	0xe73
 12231 0f40 02       		.uleb128 0x2
 12232 0f41 91       		.byte	0x91
 12233 0f42 70       		.sleb128 -16
 12234 0f43 20       		.uleb128 0x20
 12235 0f44 13110000 		.4byte	.LASF199
 12236 0f48 01       		.byte	0x1
 12237 0f49 BD03     		.2byte	0x3bd
 12238 0f4b 730E0000 		.4byte	0xe73
 12239 0f4f 02       		.uleb128 0x2
 12240 0f50 91       		.byte	0x91
 12241 0f51 6C       		.sleb128 -20
 12242 0f52 20       		.uleb128 0x20
 12243 0f53 1F040000 		.4byte	.LASF201
 12244 0f57 01       		.byte	0x1
 12245 0f58 BE03     		.2byte	0x3be
 12246 0f5a BD000000 		.4byte	0xbd
 12247 0f5e 02       		.uleb128 0x2
 12248 0f5f 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 270


 12249 0f60 68       		.sleb128 -24
 12250 0f61 20       		.uleb128 0x20
 12251 0f62 29040000 		.4byte	.LASF202
 12252 0f66 01       		.byte	0x1
 12253 0f67 BE03     		.2byte	0x3be
 12254 0f69 BD000000 		.4byte	0xbd
 12255 0f6d 02       		.uleb128 0x2
 12256 0f6e 91       		.byte	0x91
 12257 0f6f 00       		.sleb128 0
 12258 0f70 1B       		.uleb128 0x1b
 12259 0f71 5B0C0000 		.4byte	.LASF211
 12260 0f75 01       		.byte	0x1
 12261 0f76 C103     		.2byte	0x3c1
 12262 0f78 81000000 		.4byte	0x81
 12263 0f7c 05       		.uleb128 0x5
 12264 0f7d 03       		.byte	0x3
 12265 0f7e 8E000000 		.4byte	fsm_state.10545
 12266 0f82 00       		.byte	0
 12267 0f83 24       		.uleb128 0x24
 12268 0f84 E9050000 		.4byte	.LASF213
 12269 0f88 01       		.byte	0x1
 12270 0f89 F303     		.2byte	0x3f3
 12271 0f8b 00000000 		.4byte	.LFB71
 12272 0f8f 0C070000 		.4byte	.LFE71-.LFB71
 12273 0f93 01       		.uleb128 0x1
 12274 0f94 9C       		.byte	0x9c
 12275 0f95 3A110000 		.4byte	0x113a
 12276 0f99 1B       		.uleb128 0x1b
 12277 0f9a 4B010000 		.4byte	.LASF214
 12278 0f9e 01       		.byte	0x1
 12279 0f9f F503     		.2byte	0x3f5
 12280 0fa1 BD000000 		.4byte	0xbd
 12281 0fa5 02       		.uleb128 0x2
 12282 0fa6 91       		.byte	0x91
 12283 0fa7 74       		.sleb128 -12
 12284 0fa8 1B       		.uleb128 0x1b
 12285 0fa9 DD0B0000 		.4byte	.LASF215
 12286 0fad 01       		.byte	0x1
 12287 0fae F603     		.2byte	0x3f6
 12288 0fb0 BD000000 		.4byte	0xbd
 12289 0fb4 03       		.uleb128 0x3
 12290 0fb5 91       		.byte	0x91
 12291 0fb6 B07F     		.sleb128 -80
 12292 0fb8 1B       		.uleb128 0x1b
 12293 0fb9 EF0F0000 		.4byte	.LASF216
 12294 0fbd 01       		.byte	0x1
 12295 0fbe F703     		.2byte	0x3f7
 12296 0fc0 BD000000 		.4byte	0xbd
 12297 0fc4 03       		.uleb128 0x3
 12298 0fc5 91       		.byte	0x91
 12299 0fc6 AC7F     		.sleb128 -84
 12300 0fc8 1B       		.uleb128 0x1b
 12301 0fc9 300B0000 		.4byte	.LASF217
 12302 0fcd 01       		.byte	0x1
 12303 0fce F803     		.2byte	0x3f8
 12304 0fd0 BD000000 		.4byte	0xbd
 12305 0fd4 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 271


 12306 0fd5 91       		.byte	0x91
 12307 0fd6 70       		.sleb128 -16
 12308 0fd7 1B       		.uleb128 0x1b
 12309 0fd8 1E0C0000 		.4byte	.LASF192
 12310 0fdc 01       		.byte	0x1
 12311 0fdd FA03     		.2byte	0x3fa
 12312 0fdf 81000000 		.4byte	0x81
 12313 0fe3 02       		.uleb128 0x2
 12314 0fe4 91       		.byte	0x91
 12315 0fe5 6F       		.sleb128 -17
 12316 0fe6 1B       		.uleb128 0x1b
 12317 0fe7 8B030000 		.4byte	.LASF218
 12318 0feb 01       		.byte	0x1
 12319 0fec FC03     		.2byte	0x3fc
 12320 0fee 790E0000 		.4byte	0xe79
 12321 0ff2 02       		.uleb128 0x2
 12322 0ff3 91       		.byte	0x91
 12323 0ff4 68       		.sleb128 -24
 12324 0ff5 1B       		.uleb128 0x1b
 12325 0ff6 FF020000 		.4byte	.LASF219
 12326 0ffa 01       		.byte	0x1
 12327 0ffb FD03     		.2byte	0x3fd
 12328 0ffd 81000000 		.4byte	0x81
 12329 1001 02       		.uleb128 0x2
 12330 1002 91       		.byte	0x91
 12331 1003 67       		.sleb128 -25
 12332 1004 1D       		.uleb128 0x1d
 12333 1005 6B5F7000 		.ascii	"k_p\000"
 12334 1009 01       		.byte	0x1
 12335 100a FF03     		.2byte	0x3ff
 12336 100c BD000000 		.4byte	0xbd
 12337 1010 02       		.uleb128 0x2
 12338 1011 91       		.byte	0x91
 12339 1012 60       		.sleb128 -32
 12340 1013 1D       		.uleb128 0x1d
 12341 1014 6B5F6900 		.ascii	"k_i\000"
 12342 1018 01       		.byte	0x1
 12343 1019 0004     		.2byte	0x400
 12344 101b BD000000 		.4byte	0xbd
 12345 101f 02       		.uleb128 0x2
 12346 1020 91       		.byte	0x91
 12347 1021 5C       		.sleb128 -36
 12348 1022 1D       		.uleb128 0x1d
 12349 1023 6B5F6400 		.ascii	"k_d\000"
 12350 1027 01       		.byte	0x1
 12351 1028 0104     		.2byte	0x401
 12352 102a BD000000 		.4byte	0xbd
 12353 102e 02       		.uleb128 0x2
 12354 102f 91       		.byte	0x91
 12355 1030 58       		.sleb128 -40
 12356 1031 1B       		.uleb128 0x1b
 12357 1032 F60C0000 		.4byte	.LASF74
 12358 1036 01       		.byte	0x1
 12359 1037 0304     		.2byte	0x403
 12360 1039 BD000000 		.4byte	0xbd
 12361 103d 02       		.uleb128 0x2
 12362 103e 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 272


 12363 103f 54       		.sleb128 -44
 12364 1040 1B       		.uleb128 0x1b
 12365 1041 89050000 		.4byte	.LASF75
 12366 1045 01       		.byte	0x1
 12367 1046 0404     		.2byte	0x404
 12368 1048 BD000000 		.4byte	0xbd
 12369 104c 02       		.uleb128 0x2
 12370 104d 91       		.byte	0x91
 12371 104e 50       		.sleb128 -48
 12372 104f 1B       		.uleb128 0x1b
 12373 1050 71050000 		.4byte	.LASF76
 12374 1054 01       		.byte	0x1
 12375 1055 0504     		.2byte	0x405
 12376 1057 BD000000 		.4byte	0xbd
 12377 105b 02       		.uleb128 0x2
 12378 105c 91       		.byte	0x91
 12379 105d 4C       		.sleb128 -52
 12380 105e 1B       		.uleb128 0x1b
 12381 105f C80F0000 		.4byte	.LASF77
 12382 1063 01       		.byte	0x1
 12383 1064 0704     		.2byte	0x407
 12384 1066 BD000000 		.4byte	0xbd
 12385 106a 02       		.uleb128 0x2
 12386 106b 91       		.byte	0x91
 12387 106c 48       		.sleb128 -56
 12388 106d 1B       		.uleb128 0x1b
 12389 106e 25060000 		.4byte	.LASF78
 12390 1072 01       		.byte	0x1
 12391 1073 0804     		.2byte	0x408
 12392 1075 BD000000 		.4byte	0xbd
 12393 1079 02       		.uleb128 0x2
 12394 107a 91       		.byte	0x91
 12395 107b 44       		.sleb128 -60
 12396 107c 1B       		.uleb128 0x1b
 12397 107d D70E0000 		.4byte	.LASF79
 12398 1081 01       		.byte	0x1
 12399 1082 0904     		.2byte	0x409
 12400 1084 BD000000 		.4byte	0xbd
 12401 1088 02       		.uleb128 0x2
 12402 1089 91       		.byte	0x91
 12403 108a 40       		.sleb128 -64
 12404 108b 1B       		.uleb128 0x1b
 12405 108c 33060000 		.4byte	.LASF80
 12406 1090 01       		.byte	0x1
 12407 1091 0B04     		.2byte	0x40b
 12408 1093 BD000000 		.4byte	0xbd
 12409 1097 03       		.uleb128 0x3
 12410 1098 91       		.byte	0x91
 12411 1099 BC7F     		.sleb128 -68
 12412 109b 1B       		.uleb128 0x1b
 12413 109c 7B070000 		.4byte	.LASF81
 12414 10a0 01       		.byte	0x1
 12415 10a1 0C04     		.2byte	0x40c
 12416 10a3 BD000000 		.4byte	0xbd
 12417 10a7 03       		.uleb128 0x3
 12418 10a8 91       		.byte	0x91
 12419 10a9 B87F     		.sleb128 -72
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 273


 12420 10ab 1B       		.uleb128 0x1b
 12421 10ac 69120000 		.4byte	.LASF82
 12422 10b0 01       		.byte	0x1
 12423 10b1 0D04     		.2byte	0x40d
 12424 10b3 BD000000 		.4byte	0xbd
 12425 10b7 03       		.uleb128 0x3
 12426 10b8 91       		.byte	0x91
 12427 10b9 B47F     		.sleb128 -76
 12428 10bb 1B       		.uleb128 0x1b
 12429 10bc 00060000 		.4byte	.LASF220
 12430 10c0 01       		.byte	0x1
 12431 10c1 1104     		.2byte	0x411
 12432 10c3 BD000000 		.4byte	0xbd
 12433 10c7 05       		.uleb128 0x5
 12434 10c8 03       		.byte	0x3
 12435 10c9 90000000 		.4byte	pos_error_sum.10572
 12436 10cd 1B       		.uleb128 0x1b
 12437 10ce 67040000 		.4byte	.LASF221
 12438 10d2 01       		.byte	0x1
 12439 10d3 1204     		.2byte	0x412
 12440 10d5 BD000000 		.4byte	0xbd
 12441 10d9 05       		.uleb128 0x5
 12442 10da 03       		.byte	0x3
 12443 10db 9C000000 		.4byte	curr_error_sum.10573
 12444 10df 1B       		.uleb128 0x1b
 12445 10e0 880B0000 		.4byte	.LASF222
 12446 10e4 01       		.byte	0x1
 12447 10e5 1404     		.2byte	0x414
 12448 10e7 BD000000 		.4byte	0xbd
 12449 10eb 05       		.uleb128 0x5
 12450 10ec 03       		.byte	0x3
 12451 10ed 94000000 		.4byte	prev_pos_err.10574
 12452 10f1 1B       		.uleb128 0x1b
 12453 10f2 D50C0000 		.4byte	.LASF223
 12454 10f6 01       		.byte	0x1
 12455 10f7 1504     		.2byte	0x415
 12456 10f9 BD000000 		.4byte	0xbd
 12457 10fd 05       		.uleb128 0x5
 12458 10fe 03       		.byte	0x3
 12459 10ff A0000000 		.4byte	prev_curr_err.10575
 12460 1103 1B       		.uleb128 0x1b
 12461 1104 3A0F0000 		.4byte	.LASF224
 12462 1108 01       		.byte	0x1
 12463 1109 1604     		.2byte	0x416
 12464 110b BD000000 		.4byte	0xbd
 12465 110f 05       		.uleb128 0x5
 12466 1110 03       		.byte	0x3
 12467 1111 A4000000 		.4byte	prev_pwm.10576
 12468 1115 1B       		.uleb128 0x1b
 12469 1116 8F050000 		.4byte	.LASF225
 12470 111a 01       		.byte	0x1
 12471 111b 1804     		.2byte	0x418
 12472 111d 81000000 		.4byte	0x81
 12473 1121 05       		.uleb128 0x5
 12474 1122 03       		.byte	0x3
 12475 1123 98000000 		.4byte	motor_dir.10577
 12476 1127 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 274


 12477 1128 58060000 		.4byte	.LASF226
 12478 112c 01       		.byte	0x1
 12479 112d 1904     		.2byte	0x419
 12480 112f 99000000 		.4byte	0x99
 12481 1133 05       		.uleb128 0x5
 12482 1134 03       		.byte	0x3
 12483 1135 A8000000 		.4byte	position_counter.10578
 12484 1139 00       		.byte	0
 12485 113a 1A       		.uleb128 0x1a
 12486 113b 3B050000 		.4byte	.LASF227
 12487 113f 01       		.byte	0x1
 12488 1140 2305     		.2byte	0x523
 12489 1142 00000000 		.4byte	.LFB72
 12490 1146 70090000 		.4byte	.LFE72-.LFB72
 12491 114a 01       		.uleb128 0x1
 12492 114b 9C       		.byte	0x9c
 12493 114c F3120000 		.4byte	0x12f3
 12494 1150 25       		.uleb128 0x25
 12495 1151 69647800 		.ascii	"idx\000"
 12496 1155 01       		.byte	0x1
 12497 1156 2305     		.2byte	0x523
 12498 1158 81000000 		.4byte	0x81
 12499 115c 03       		.uleb128 0x3
 12500 115d 91       		.byte	0x91
 12501 115e A77F     		.sleb128 -89
 12502 1160 1B       		.uleb128 0x1b
 12503 1161 4B010000 		.4byte	.LASF214
 12504 1165 01       		.byte	0x1
 12505 1166 2505     		.2byte	0x525
 12506 1168 BD000000 		.4byte	0xbd
 12507 116c 02       		.uleb128 0x2
 12508 116d 91       		.byte	0x91
 12509 116e 6C       		.sleb128 -20
 12510 116f 1B       		.uleb128 0x1b
 12511 1170 DD0B0000 		.4byte	.LASF215
 12512 1174 01       		.byte	0x1
 12513 1175 2605     		.2byte	0x526
 12514 1177 BD000000 		.4byte	0xbd
 12515 117b 03       		.uleb128 0x3
 12516 117c 91       		.byte	0x91
 12517 117d AC7F     		.sleb128 -84
 12518 117f 1B       		.uleb128 0x1b
 12519 1180 EF0F0000 		.4byte	.LASF216
 12520 1184 01       		.byte	0x1
 12521 1185 2705     		.2byte	0x527
 12522 1187 BD000000 		.4byte	0xbd
 12523 118b 03       		.uleb128 0x3
 12524 118c 91       		.byte	0x91
 12525 118d A87F     		.sleb128 -88
 12526 118f 1B       		.uleb128 0x1b
 12527 1190 300B0000 		.4byte	.LASF217
 12528 1194 01       		.byte	0x1
 12529 1195 2805     		.2byte	0x528
 12530 1197 BD000000 		.4byte	0xbd
 12531 119b 02       		.uleb128 0x2
 12532 119c 91       		.byte	0x91
 12533 119d 68       		.sleb128 -24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 275


 12534 119e 1D       		.uleb128 0x1d
 12535 119f 4D4F5400 		.ascii	"MOT\000"
 12536 11a3 01       		.byte	0x1
 12537 11a4 2A05     		.2byte	0x52a
 12538 11a6 790E0000 		.4byte	0xe79
 12539 11aa 02       		.uleb128 0x2
 12540 11ab 91       		.byte	0x91
 12541 11ac 64       		.sleb128 -28
 12542 11ad 1B       		.uleb128 0x1b
 12543 11ae DE100000 		.4byte	.LASF203
 12544 11b2 01       		.byte	0x1
 12545 11b3 2B05     		.2byte	0x52b
 12546 11b5 81000000 		.4byte	0x81
 12547 11b9 02       		.uleb128 0x2
 12548 11ba 91       		.byte	0x91
 12549 11bb 63       		.sleb128 -29
 12550 11bc 1D       		.uleb128 0x1d
 12551 11bd 6B5F7000 		.ascii	"k_p\000"
 12552 11c1 01       		.byte	0x1
 12553 11c2 2D05     		.2byte	0x52d
 12554 11c4 BD000000 		.4byte	0xbd
 12555 11c8 02       		.uleb128 0x2
 12556 11c9 91       		.byte	0x91
 12557 11ca 5C       		.sleb128 -36
 12558 11cb 1D       		.uleb128 0x1d
 12559 11cc 6B5F6900 		.ascii	"k_i\000"
 12560 11d0 01       		.byte	0x1
 12561 11d1 2E05     		.2byte	0x52e
 12562 11d3 BD000000 		.4byte	0xbd
 12563 11d7 02       		.uleb128 0x2
 12564 11d8 91       		.byte	0x91
 12565 11d9 58       		.sleb128 -40
 12566 11da 1D       		.uleb128 0x1d
 12567 11db 6B5F6400 		.ascii	"k_d\000"
 12568 11df 01       		.byte	0x1
 12569 11e0 2F05     		.2byte	0x52f
 12570 11e2 BD000000 		.4byte	0xbd
 12571 11e6 02       		.uleb128 0x2
 12572 11e7 91       		.byte	0x91
 12573 11e8 54       		.sleb128 -44
 12574 11e9 1B       		.uleb128 0x1b
 12575 11ea F60C0000 		.4byte	.LASF74
 12576 11ee 01       		.byte	0x1
 12577 11ef 3105     		.2byte	0x531
 12578 11f1 BD000000 		.4byte	0xbd
 12579 11f5 02       		.uleb128 0x2
 12580 11f6 91       		.byte	0x91
 12581 11f7 50       		.sleb128 -48
 12582 11f8 1B       		.uleb128 0x1b
 12583 11f9 89050000 		.4byte	.LASF75
 12584 11fd 01       		.byte	0x1
 12585 11fe 3205     		.2byte	0x532
 12586 1200 BD000000 		.4byte	0xbd
 12587 1204 02       		.uleb128 0x2
 12588 1205 91       		.byte	0x91
 12589 1206 4C       		.sleb128 -52
 12590 1207 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 276


 12591 1208 71050000 		.4byte	.LASF76
 12592 120c 01       		.byte	0x1
 12593 120d 3305     		.2byte	0x533
 12594 120f BD000000 		.4byte	0xbd
 12595 1213 02       		.uleb128 0x2
 12596 1214 91       		.byte	0x91
 12597 1215 48       		.sleb128 -56
 12598 1216 1B       		.uleb128 0x1b
 12599 1217 C80F0000 		.4byte	.LASF77
 12600 121b 01       		.byte	0x1
 12601 121c 3505     		.2byte	0x535
 12602 121e BD000000 		.4byte	0xbd
 12603 1222 02       		.uleb128 0x2
 12604 1223 91       		.byte	0x91
 12605 1224 44       		.sleb128 -60
 12606 1225 1B       		.uleb128 0x1b
 12607 1226 25060000 		.4byte	.LASF78
 12608 122a 01       		.byte	0x1
 12609 122b 3605     		.2byte	0x536
 12610 122d BD000000 		.4byte	0xbd
 12611 1231 02       		.uleb128 0x2
 12612 1232 91       		.byte	0x91
 12613 1233 40       		.sleb128 -64
 12614 1234 1B       		.uleb128 0x1b
 12615 1235 D70E0000 		.4byte	.LASF79
 12616 1239 01       		.byte	0x1
 12617 123a 3705     		.2byte	0x537
 12618 123c BD000000 		.4byte	0xbd
 12619 1240 03       		.uleb128 0x3
 12620 1241 91       		.byte	0x91
 12621 1242 BC7F     		.sleb128 -68
 12622 1244 1B       		.uleb128 0x1b
 12623 1245 33060000 		.4byte	.LASF80
 12624 1249 01       		.byte	0x1
 12625 124a 3905     		.2byte	0x539
 12626 124c BD000000 		.4byte	0xbd
 12627 1250 03       		.uleb128 0x3
 12628 1251 91       		.byte	0x91
 12629 1252 B87F     		.sleb128 -72
 12630 1254 1B       		.uleb128 0x1b
 12631 1255 7B070000 		.4byte	.LASF81
 12632 1259 01       		.byte	0x1
 12633 125a 3A05     		.2byte	0x53a
 12634 125c BD000000 		.4byte	0xbd
 12635 1260 03       		.uleb128 0x3
 12636 1261 91       		.byte	0x91
 12637 1262 B47F     		.sleb128 -76
 12638 1264 1B       		.uleb128 0x1b
 12639 1265 69120000 		.4byte	.LASF82
 12640 1269 01       		.byte	0x1
 12641 126a 3B05     		.2byte	0x53b
 12642 126c BD000000 		.4byte	0xbd
 12643 1270 03       		.uleb128 0x3
 12644 1271 91       		.byte	0x91
 12645 1272 B07F     		.sleb128 -80
 12646 1274 1B       		.uleb128 0x1b
 12647 1275 00060000 		.4byte	.LASF220
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 277


 12648 1279 01       		.byte	0x1
 12649 127a 3F05     		.2byte	0x53f
 12650 127c 94020000 		.4byte	0x294
 12651 1280 05       		.uleb128 0x5
 12652 1281 03       		.byte	0x3
 12653 1282 AC000000 		.4byte	pos_error_sum.10605
 12654 1286 1B       		.uleb128 0x1b
 12655 1287 67040000 		.4byte	.LASF221
 12656 128b 01       		.byte	0x1
 12657 128c 4005     		.2byte	0x540
 12658 128e 94020000 		.4byte	0x294
 12659 1292 05       		.uleb128 0x5
 12660 1293 03       		.byte	0x3
 12661 1294 C0000000 		.4byte	curr_error_sum.10606
 12662 1298 1B       		.uleb128 0x1b
 12663 1299 880B0000 		.4byte	.LASF222
 12664 129d 01       		.byte	0x1
 12665 129e 4205     		.2byte	0x542
 12666 12a0 94020000 		.4byte	0x294
 12667 12a4 05       		.uleb128 0x5
 12668 12a5 03       		.byte	0x3
 12669 12a6 B4000000 		.4byte	prev_pos_err.10607
 12670 12aa 1B       		.uleb128 0x1b
 12671 12ab D50C0000 		.4byte	.LASF223
 12672 12af 01       		.byte	0x1
 12673 12b0 4305     		.2byte	0x543
 12674 12b2 94020000 		.4byte	0x294
 12675 12b6 05       		.uleb128 0x5
 12676 12b7 03       		.byte	0x3
 12677 12b8 C8000000 		.4byte	prev_curr_err.10608
 12678 12bc 1B       		.uleb128 0x1b
 12679 12bd 3A0F0000 		.4byte	.LASF224
 12680 12c1 01       		.byte	0x1
 12681 12c2 4405     		.2byte	0x544
 12682 12c4 94020000 		.4byte	0x294
 12683 12c8 05       		.uleb128 0x5
 12684 12c9 03       		.byte	0x3
 12685 12ca D0000000 		.4byte	prev_pwm.10609
 12686 12ce 1B       		.uleb128 0x1b
 12687 12cf 8F050000 		.4byte	.LASF225
 12688 12d3 01       		.byte	0x1
 12689 12d4 4605     		.2byte	0x546
 12690 12d6 21070000 		.4byte	0x721
 12691 12da 05       		.uleb128 0x5
 12692 12db 03       		.byte	0x3
 12693 12dc BC000000 		.4byte	motor_dir.10610
 12694 12e0 1B       		.uleb128 0x1b
 12695 12e1 58060000 		.4byte	.LASF226
 12696 12e5 01       		.byte	0x1
 12697 12e6 4705     		.2byte	0x547
 12698 12e8 96030000 		.4byte	0x396
 12699 12ec 05       		.uleb128 0x5
 12700 12ed 03       		.byte	0x3
 12701 12ee D8000000 		.4byte	position_counter.10611
 12702 12f2 00       		.byte	0
 12703 12f3 1A       		.uleb128 0x1a
 12704 12f4 A9030000 		.4byte	.LASF228
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 278


 12705 12f8 01       		.byte	0x1
 12706 12f9 A006     		.2byte	0x6a0
 12707 12fb 00000000 		.4byte	.LFB73
 12708 12ff 18080000 		.4byte	.LFE73-.LFB73
 12709 1303 01       		.uleb128 0x1
 12710 1304 9C       		.byte	0x9c
 12711 1305 7B140000 		.4byte	0x147b
 12712 1309 20       		.uleb128 0x20
 12713 130a C6000000 		.4byte	.LASF229
 12714 130e 01       		.byte	0x1
 12715 130f A006     		.2byte	0x6a0
 12716 1311 81000000 		.4byte	0x81
 12717 1315 03       		.uleb128 0x3
 12718 1316 91       		.byte	0x91
 12719 1317 BF7F     		.sleb128 -65
 12720 1319 20       		.uleb128 0x20
 12721 131a 1C0B0000 		.4byte	.LASF230
 12722 131e 01       		.byte	0x1
 12723 131f A006     		.2byte	0x6a0
 12724 1321 81000000 		.4byte	0x81
 12725 1325 03       		.uleb128 0x3
 12726 1326 91       		.byte	0x91
 12727 1327 BE7F     		.sleb128 -66
 12728 1329 1B       		.uleb128 0x1b
 12729 132a 36070000 		.4byte	.LASF231
 12730 132e 01       		.byte	0x1
 12731 132f A206     		.2byte	0x6a2
 12732 1331 81000000 		.4byte	0x81
 12733 1335 02       		.uleb128 0x2
 12734 1336 91       		.byte	0x91
 12735 1337 67       		.sleb128 -25
 12736 1338 1D       		.uleb128 0x1d
 12737 1339 6A6A00   		.ascii	"jj\000"
 12738 133c 01       		.byte	0x1
 12739 133d A506     		.2byte	0x6a5
 12740 133f 81000000 		.4byte	0x81
 12741 1343 02       		.uleb128 0x2
 12742 1344 91       		.byte	0x91
 12743 1345 66       		.sleb128 -26
 12744 1346 1B       		.uleb128 0x1b
 12745 1347 73030000 		.4byte	.LASF232
 12746 134b 01       		.byte	0x1
 12747 134c A706     		.2byte	0x6a7
 12748 134e 7B140000 		.4byte	0x147b
 12749 1352 02       		.uleb128 0x2
 12750 1353 91       		.byte	0x91
 12751 1354 40       		.sleb128 -64
 12752 1355 1B       		.uleb128 0x1b
 12753 1356 4F100000 		.4byte	.LASF233
 12754 135a 01       		.byte	0x1
 12755 135b A806     		.2byte	0x6a8
 12756 135d B1000000 		.4byte	0xb1
 12757 1361 02       		.uleb128 0x2
 12758 1362 91       		.byte	0x91
 12759 1363 64       		.sleb128 -28
 12760 1364 1B       		.uleb128 0x1b
 12761 1365 C00C0000 		.4byte	.LASF234
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 279


 12762 1369 01       		.byte	0x1
 12763 136a A906     		.2byte	0x6a9
 12764 136c BD000000 		.4byte	0xbd
 12765 1370 02       		.uleb128 0x2
 12766 1371 91       		.byte	0x91
 12767 1372 54       		.sleb128 -44
 12768 1373 1B       		.uleb128 0x1b
 12769 1374 DE0E0000 		.4byte	.LASF235
 12770 1378 01       		.byte	0x1
 12771 1379 AA06     		.2byte	0x6aa
 12772 137b BD000000 		.4byte	0xbd
 12773 137f 02       		.uleb128 0x2
 12774 1380 91       		.byte	0x91
 12775 1381 60       		.sleb128 -32
 12776 1382 1B       		.uleb128 0x1b
 12777 1383 B0040000 		.4byte	.LASF236
 12778 1387 01       		.byte	0x1
 12779 1388 AB06     		.2byte	0x6ab
 12780 138a BD000000 		.4byte	0xbd
 12781 138e 02       		.uleb128 0x2
 12782 138f 91       		.byte	0x91
 12783 1390 4C       		.sleb128 -52
 12784 1391 1B       		.uleb128 0x1b
 12785 1392 B90E0000 		.4byte	.LASF237
 12786 1396 01       		.byte	0x1
 12787 1397 AC06     		.2byte	0x6ac
 12788 1399 BD000000 		.4byte	0xbd
 12789 139d 02       		.uleb128 0x2
 12790 139e 91       		.byte	0x91
 12791 139f 50       		.sleb128 -48
 12792 13a0 1B       		.uleb128 0x1b
 12793 13a1 950B0000 		.4byte	.LASF238
 12794 13a5 01       		.byte	0x1
 12795 13a6 AD06     		.2byte	0x6ad
 12796 13a8 A5000000 		.4byte	0xa5
 12797 13ac 02       		.uleb128 0x2
 12798 13ad 91       		.byte	0x91
 12799 13ae 5F       		.sleb128 -33
 12800 13af 1B       		.uleb128 0x1b
 12801 13b0 280C0000 		.4byte	.LASF239
 12802 13b4 01       		.byte	0x1
 12803 13b5 AF06     		.2byte	0x6af
 12804 13b7 8B140000 		.4byte	0x148b
 12805 13bb 05       		.uleb128 0x5
 12806 13bc 03       		.byte	0x3
 12807 13bd E0000000 		.4byte	last_value_encoder.10634
 12808 13c1 1B       		.uleb128 0x1b
 12809 13c2 EA060000 		.4byte	.LASF240
 12810 13c6 01       		.byte	0x1
 12811 13c7 B006     		.2byte	0x6b0
 12812 13c9 8B140000 		.4byte	0x148b
 12813 13cd 05       		.uleb128 0x5
 12814 13ce 03       		.byte	0x3
 12815 13cf F8000000 		.4byte	comp_value_encoder.10635
 12816 13d3 1B       		.uleb128 0x1b
 12817 13d4 BD030000 		.4byte	.LASF241
 12818 13d8 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 280


 12819 13d9 B106     		.2byte	0x6b1
 12820 13db A1140000 		.4byte	0x14a1
 12821 13df 05       		.uleb128 0x5
 12822 13e0 03       		.byte	0x3
 12823 13e1 10010000 		.4byte	error.10636
 12824 13e5 1B       		.uleb128 0x1b
 12825 13e6 970E0000 		.4byte	.LASF242
 12826 13ea 01       		.byte	0x1
 12827 13eb B306     		.2byte	0x6b3
 12828 13ed 21070000 		.4byte	0x721
 12829 13f1 05       		.uleb128 0x5
 12830 13f2 03       		.byte	0x3
 12831 13f3 04000000 		.4byte	only_first_time.10637
 12832 13f7 1B       		.uleb128 0x1b
 12833 13f8 2E030000 		.4byte	.LASF243
 12834 13fc 01       		.byte	0x1
 12835 13fd B406     		.2byte	0x6b4
 12836 13ff 21070000 		.4byte	0x721
 12837 1403 05       		.uleb128 0x5
 12838 1404 03       		.byte	0x3
 12839 1405 64010000 		.4byte	safe_startup_motor_activation.10638
 12840 1409 1B       		.uleb128 0x1b
 12841 140a 98000000 		.4byte	.LASF244
 12842 140e 01       		.byte	0x1
 12843 140f B506     		.2byte	0x6b5
 12844 1411 21070000 		.4byte	0x721
 12845 1415 05       		.uleb128 0x5
 12846 1416 03       		.byte	0x3
 12847 1417 60010000 		.4byte	one_time_execute.10639
 12848 141b 1B       		.uleb128 0x1b
 12849 141c 3A0A0000 		.4byte	.LASF245
 12850 1420 01       		.byte	0x1
 12851 1421 B606     		.2byte	0x6b6
 12852 1423 96030000 		.4byte	0x396
 12853 1427 05       		.uleb128 0x5
 12854 1428 03       		.byte	0x3
 12855 1429 68010000 		.4byte	count_startup_motor.10640
 12856 142d 1B       		.uleb128 0x1b
 12857 142e 5B090000 		.4byte	.LASF246
 12858 1432 01       		.byte	0x1
 12859 1433 B806     		.2byte	0x6b8
 12860 1435 8B140000 		.4byte	0x148b
 12861 1439 05       		.uleb128 0x5
 12862 143a 03       		.byte	0x3
 12863 143b 18010000 		.4byte	v_value.10641
 12864 143f 1B       		.uleb128 0x1b
 12865 1440 60120000 		.4byte	.LASF247
 12866 1444 01       		.byte	0x1
 12867 1445 B906     		.2byte	0x6b9
 12868 1447 8B140000 		.4byte	0x148b
 12869 144b 05       		.uleb128 0x5
 12870 144c 03       		.byte	0x3
 12871 144d 30010000 		.4byte	vv_value.10642
 12872 1451 1B       		.uleb128 0x1b
 12873 1452 99010000 		.4byte	.LASF248
 12874 1456 01       		.byte	0x1
 12875 1457 BA06     		.2byte	0x6ba
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 281


 12876 1459 8B140000 		.4byte	0x148b
 12877 145d 05       		.uleb128 0x5
 12878 145e 03       		.byte	0x3
 12879 145f 48010000 		.4byte	vvv_value.10643
 12880 1463 1E       		.uleb128 0x1e
 12881 1464 98000000 		.4byte	.LBB10
 12882 1468 6A000000 		.4byte	.LBE10-.LBB10
 12883 146c 1D       		.uleb128 0x1d
 12884 146d 6A00     		.ascii	"j\000"
 12885 146f 01       		.byte	0x1
 12886 1470 CA06     		.2byte	0x6ca
 12887 1472 68000000 		.4byte	0x68
 12888 1476 02       		.uleb128 0x2
 12889 1477 91       		.byte	0x91
 12890 1478 58       		.sleb128 -40
 12891 1479 00       		.byte	0
 12892 147a 00       		.byte	0
 12893 147b 07       		.uleb128 0x7
 12894 147c 99000000 		.4byte	0x99
 12895 1480 8B140000 		.4byte	0x148b
 12896 1484 08       		.uleb128 0x8
 12897 1485 0E010000 		.4byte	0x10e
 12898 1489 02       		.byte	0x2
 12899 148a 00       		.byte	0
 12900 148b 07       		.uleb128 0x7
 12901 148c BD000000 		.4byte	0xbd
 12902 1490 A1140000 		.4byte	0x14a1
 12903 1494 08       		.uleb128 0x8
 12904 1495 0E010000 		.4byte	0x10e
 12905 1499 01       		.byte	0x1
 12906 149a 08       		.uleb128 0x8
 12907 149b 0E010000 		.4byte	0x10e
 12908 149f 02       		.byte	0x2
 12909 14a0 00       		.byte	0
 12910 14a1 07       		.uleb128 0x7
 12911 14a2 81000000 		.4byte	0x81
 12912 14a6 B7140000 		.4byte	0x14b7
 12913 14aa 08       		.uleb128 0x8
 12914 14ab 0E010000 		.4byte	0x10e
 12915 14af 01       		.byte	0x1
 12916 14b0 08       		.uleb128 0x8
 12917 14b1 0E010000 		.4byte	0x10e
 12918 14b5 02       		.byte	0x2
 12919 14b6 00       		.byte	0
 12920 14b7 24       		.uleb128 0x24
 12921 14b8 940D0000 		.4byte	.LASF249
 12922 14bc 01       		.byte	0x1
 12923 14bd 7D07     		.2byte	0x77d
 12924 14bf 00000000 		.4byte	.LFB74
 12925 14c3 70120000 		.4byte	.LFE74-.LFB74
 12926 14c7 01       		.uleb128 0x1
 12927 14c8 9C       		.byte	0x9c
 12928 14c9 A3150000 		.4byte	0x15a3
 12929 14cd 1B       		.uleb128 0x1b
 12930 14ce 340D0000 		.4byte	.LASF250
 12931 14d2 01       		.byte	0x1
 12932 14d3 9107     		.2byte	0x791
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 282


 12933 14d5 BD000000 		.4byte	0xbd
 12934 14d9 02       		.uleb128 0x2
 12935 14da 91       		.byte	0x91
 12936 14db 64       		.sleb128 -28
 12937 14dc 1B       		.uleb128 0x1b
 12938 14dd 7B0E0000 		.4byte	.LASF251
 12939 14e1 01       		.byte	0x1
 12940 14e2 9307     		.2byte	0x793
 12941 14e4 8D000000 		.4byte	0x8d
 12942 14e8 05       		.uleb128 0x5
 12943 14e9 03       		.byte	0x3
 12944 14ea 78010000 		.4byte	emg_counter_1.10660
 12945 14ee 1B       		.uleb128 0x1b
 12946 14ef 890E0000 		.4byte	.LASF252
 12947 14f3 01       		.byte	0x1
 12948 14f4 9407     		.2byte	0x794
 12949 14f6 8D000000 		.4byte	0x8d
 12950 14fa 05       		.uleb128 0x5
 12951 14fb 03       		.byte	0x3
 12952 14fc 7A010000 		.4byte	emg_counter_2.10661
 12953 1500 1B       		.uleb128 0x1b
 12954 1501 5D020000 		.4byte	.LASF253
 12955 1505 01       		.byte	0x1
 12956 1506 9507     		.2byte	0x795
 12957 1508 8D000000 		.4byte	0x8d
 12958 150c 05       		.uleb128 0x5
 12959 150d 03       		.byte	0x3
 12960 150e 80010000 		.4byte	UD_counter.10662
 12961 1512 1B       		.uleb128 0x1b
 12962 1513 CD030000 		.4byte	.LASF254
 12963 1517 01       		.byte	0x1
 12964 1518 9607     		.2byte	0x796
 12965 151a 8D000000 		.4byte	0x8d
 12966 151e 05       		.uleb128 0x5
 12967 151f 03       		.byte	0x3
 12968 1520 88010000 		.4byte	LR_counter.10663
 12969 1524 1B       		.uleb128 0x1b
 12970 1525 0E0B0000 		.4byte	.LASF255
 12971 1529 01       		.byte	0x1
 12972 152a 9707     		.2byte	0x797
 12973 152c BD000000 		.4byte	0xbd
 12974 1530 05       		.uleb128 0x5
 12975 1531 03       		.byte	0x3
 12976 1532 7C010000 		.4byte	UD_mean_value.10664
 12977 1536 1B       		.uleb128 0x1b
 12978 1537 64110000 		.4byte	.LASF256
 12979 153b 01       		.byte	0x1
 12980 153c 9807     		.2byte	0x798
 12981 153e BD000000 		.4byte	0xbd
 12982 1542 05       		.uleb128 0x5
 12983 1543 03       		.byte	0x3
 12984 1544 84010000 		.4byte	LR_mean_value.10665
 12985 1548 1B       		.uleb128 0x1b
 12986 1549 B6020000 		.4byte	.LASF257
 12987 154d 01       		.byte	0x1
 12988 154e 9907     		.2byte	0x799
 12989 1550 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 283


 12990 1554 05       		.uleb128 0x5
 12991 1555 03       		.byte	0x3
 12992 1556 0C000000 		.4byte	first_tension_valid.10666
 12993 155a 1B       		.uleb128 0x1b
 12994 155b 0D050000 		.4byte	.LASF258
 12995 155f 01       		.byte	0x1
 12996 1560 9A07     		.2byte	0x79a
 12997 1562 BD000000 		.4byte	0xbd
 12998 1566 05       		.uleb128 0x5
 12999 1567 03       		.byte	0x3
 13000 1568 08000000 		.4byte	detect_power_cycle_prev.10667
 13001 156c 1B       		.uleb128 0x1b
 13002 156d 6B0A0000 		.4byte	.LASF259
 13003 1571 01       		.byte	0x1
 13004 1572 9B07     		.2byte	0x79b
 13005 1574 8D000000 		.4byte	0x8d
 13006 1578 05       		.uleb128 0x5
 13007 1579 03       		.byte	0x3
 13008 157a 70010000 		.4byte	count.10668
 13009 157e 1B       		.uleb128 0x1b
 13010 157f 89010000 		.4byte	.LASF260
 13011 1583 01       		.byte	0x1
 13012 1584 9C07     		.2byte	0x79c
 13013 1586 99000000 		.4byte	0x99
 13014 158a 05       		.uleb128 0x5
 13015 158b 03       		.byte	0x3
 13016 158c 74010000 		.4byte	v_count.10669
 13017 1590 1D       		.uleb128 0x1d
 13018 1591 69647800 		.ascii	"idx\000"
 13019 1595 01       		.byte	0x1
 13020 1596 9D07     		.2byte	0x79d
 13021 1598 81000000 		.4byte	0x81
 13022 159c 05       		.uleb128 0x5
 13023 159d 03       		.byte	0x3
 13024 159e 72010000 		.4byte	idx.10670
 13025 15a2 00       		.byte	0
 13026 15a3 26       		.uleb128 0x26
 13027 15a4 5F0D0000 		.4byte	.LASF261
 13028 15a8 01       		.byte	0x1
 13029 15a9 000A     		.2byte	0xa00
 13030 15ab 00000000 		.4byte	.LFB75
 13031 15af 0C010000 		.4byte	.LFE75-.LFB75
 13032 15b3 01       		.uleb128 0x1
 13033 15b4 9C       		.byte	0x9c
 13034 15b5 EA150000 		.4byte	0x15ea
 13035 15b9 1E       		.uleb128 0x1e
 13036 15ba 06000000 		.4byte	.LBB11
 13037 15be E6000000 		.4byte	.LBE11-.LBB11
 13038 15c2 1D       		.uleb128 0x1d
 13039 15c3 6900     		.ascii	"i\000"
 13040 15c5 01       		.byte	0x1
 13041 15c6 020A     		.2byte	0xa02
 13042 15c8 81000000 		.4byte	0x81
 13043 15cc 02       		.uleb128 0x2
 13044 15cd 91       		.byte	0x91
 13045 15ce 77       		.sleb128 -9
 13046 15cf 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 284


 13047 15d0 26000000 		.4byte	.LBB12
 13048 15d4 BA000000 		.4byte	.LBE12-.LBB12
 13049 15d8 1B       		.uleb128 0x1b
 13050 15d9 71080000 		.4byte	.LASF40
 13051 15dd 01       		.byte	0x1
 13052 15de 040A     		.2byte	0xa04
 13053 15e0 BD000000 		.4byte	0xbd
 13054 15e4 02       		.uleb128 0x2
 13055 15e5 91       		.byte	0x91
 13056 15e6 70       		.sleb128 -16
 13057 15e7 00       		.byte	0
 13058 15e8 00       		.byte	0
 13059 15e9 00       		.byte	0
 13060 15ea 22       		.uleb128 0x22
 13061 15eb E8030000 		.4byte	.LASF262
 13062 15ef 01       		.byte	0x1
 13063 15f0 220A     		.2byte	0xa22
 13064 15f2 00000000 		.4byte	.LFB76
 13065 15f6 A8000000 		.4byte	.LFE76-.LFB76
 13066 15fa 01       		.uleb128 0x1
 13067 15fb 9C       		.byte	0x9c
 13068 15fc 3D160000 		.4byte	0x163d
 13069 1600 20       		.uleb128 0x20
 13070 1601 9E0B0000 		.4byte	.LASF263
 13071 1605 01       		.byte	0x1
 13072 1606 220A     		.2byte	0xa22
 13073 1608 81000000 		.4byte	0x81
 13074 160c 02       		.uleb128 0x2
 13075 160d 91       		.byte	0x91
 13076 160e 6F       		.sleb128 -17
 13077 160f 1B       		.uleb128 0x1b
 13078 1610 36070000 		.4byte	.LASF231
 13079 1614 01       		.byte	0x1
 13080 1615 240A     		.2byte	0xa24
 13081 1617 81000000 		.4byte	0x81
 13082 161b 02       		.uleb128 0x2
 13083 161c 91       		.byte	0x91
 13084 161d 73       		.sleb128 -13
 13085 161e 1B       		.uleb128 0x1b
 13086 161f 120C0000 		.4byte	.LASF264
 13087 1623 01       		.byte	0x1
 13088 1624 250A     		.2byte	0xa25
 13089 1626 8D000000 		.4byte	0x8d
 13090 162a 02       		.uleb128 0x2
 13091 162b 91       		.byte	0x91
 13092 162c 76       		.sleb128 -10
 13093 162d 1B       		.uleb128 0x1b
 13094 162e 1B080000 		.4byte	.LASF265
 13095 1632 01       		.byte	0x1
 13096 1633 260A     		.2byte	0xa26
 13097 1635 8D000000 		.4byte	0x8d
 13098 1639 02       		.uleb128 0x2
 13099 163a 91       		.byte	0x91
 13100 163b 74       		.sleb128 -12
 13101 163c 00       		.byte	0
 13102 163d 24       		.uleb128 0x24
 13103 163e 98080000 		.4byte	.LASF266
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 285


 13104 1642 01       		.byte	0x1
 13105 1643 3A0A     		.2byte	0xa3a
 13106 1645 00000000 		.4byte	.LFB77
 13107 1649 A0050000 		.4byte	.LFE77-.LFB77
 13108 164d 01       		.uleb128 0x1
 13109 164e 9C       		.byte	0x9c
 13110 164f C3170000 		.4byte	0x17c3
 13111 1653 1B       		.uleb128 0x1b
 13112 1654 26000000 		.4byte	.LASF267
 13113 1658 01       		.byte	0x1
 13114 1659 3B0A     		.2byte	0xa3b
 13115 165b 81000000 		.4byte	0x81
 13116 165f 05       		.uleb128 0x5
 13117 1660 03       		.byte	0x3
 13118 1661 8A010000 		.4byte	pos_cycle_status.10741
 13119 1665 1B       		.uleb128 0x1b
 13120 1666 C60D0000 		.4byte	.LASF268
 13121 166a 01       		.byte	0x1
 13122 166b 3C0A     		.2byte	0xa3c
 13123 166d 21070000 		.4byte	0x721
 13124 1671 05       		.uleb128 0x5
 13125 1672 03       		.byte	0x3
 13126 1673 94010000 		.4byte	emg_cycle_status.10742
 13127 1677 1B       		.uleb128 0x1b
 13128 1678 7D0A0000 		.4byte	.LASF269
 13129 167c 01       		.byte	0x1
 13130 167d 3D0A     		.2byte	0xa3d
 13131 167f 21070000 		.4byte	0x721
 13132 1683 05       		.uleb128 0x5
 13133 1684 03       		.byte	0x3
 13134 1685 A0010000 		.4byte	emg_excess_status.10743
 13135 1689 1B       		.uleb128 0x1b
 13136 168a 10100000 		.4byte	.LASF270
 13137 168e 01       		.byte	0x1
 13138 168f 3E0A     		.2byte	0xa3e
 13139 1691 81000000 		.4byte	0x81
 13140 1695 05       		.uleb128 0x5
 13141 1696 03       		.byte	0x3
 13142 1697 B4010000 		.4byte	rest_cycle_status.10744
 13143 169b 1B       		.uleb128 0x1b
 13144 169c 17030000 		.4byte	.LASF271
 13145 16a0 01       		.byte	0x1
 13146 16a1 3F0A     		.2byte	0xa3f
 13147 16a3 BD000000 		.4byte	0xbd
 13148 16a7 05       		.uleb128 0x5
 13149 16a8 03       		.byte	0x3
 13150 16a9 10000000 		.4byte	bin_threshold.10745
 13151 16ad 1B       		.uleb128 0x1b
 13152 16ae A50F0000 		.4byte	.LASF272
 13153 16b2 01       		.byte	0x1
 13154 16b3 400A     		.2byte	0xa40
 13155 16b5 BD000000 		.4byte	0xbd
 13156 16b9 05       		.uleb128 0x5
 13157 16ba 03       		.byte	0x3
 13158 16bb 14000000 		.4byte	exc_act_thr.10746
 13159 16bf 1B       		.uleb128 0x1b
 13160 16c0 E4010000 		.4byte	.LASF273
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 286


 13161 16c4 01       		.byte	0x1
 13162 16c5 410A     		.2byte	0xa41
 13163 16c7 BD000000 		.4byte	0xbd
 13164 16cb 05       		.uleb128 0x5
 13165 16cc 03       		.byte	0x3
 13166 16cd 8C010000 		.4byte	thr_pos.10747
 13167 16d1 1B       		.uleb128 0x1b
 13168 16d2 A90A0000 		.4byte	.LASF274
 13169 16d6 01       		.byte	0x1
 13170 16d7 420A     		.2byte	0xa42
 13171 16d9 BD000000 		.4byte	0xbd
 13172 16dd 05       		.uleb128 0x5
 13173 16de 03       		.byte	0x3
 13174 16df 90010000 		.4byte	max_pos.10748
 13175 16e3 1D       		.uleb128 0x1d
 13176 16e4 6900     		.ascii	"i\000"
 13177 16e6 01       		.byte	0x1
 13178 16e7 430A     		.2byte	0xa43
 13179 16e9 81000000 		.4byte	0x81
 13180 16ed 02       		.uleb128 0x2
 13181 16ee 91       		.byte	0x91
 13182 16ef 6F       		.sleb128 -17
 13183 16f0 1B       		.uleb128 0x1b
 13184 16f1 99050000 		.4byte	.LASF275
 13185 16f5 01       		.byte	0x1
 13186 16f6 430A     		.2byte	0xa43
 13187 16f8 81000000 		.4byte	0x81
 13188 16fc 02       		.uleb128 0x2
 13189 16fd 91       		.byte	0x91
 13190 16fe 5B       		.sleb128 -37
 13191 16ff 1B       		.uleb128 0x1b
 13192 1700 16010000 		.4byte	.LASF276
 13193 1704 01       		.byte	0x1
 13194 1705 430A     		.2byte	0xa43
 13195 1707 81000000 		.4byte	0x81
 13196 170b 02       		.uleb128 0x2
 13197 170c 91       		.byte	0x91
 13198 170d 5A       		.sleb128 -38
 13199 170e 1B       		.uleb128 0x1b
 13200 170f 280D0000 		.4byte	.LASF277
 13201 1713 01       		.byte	0x1
 13202 1714 430A     		.2byte	0xa43
 13203 1716 81000000 		.4byte	0x81
 13204 171a 02       		.uleb128 0x2
 13205 171b 91       		.byte	0x91
 13206 171c 59       		.sleb128 -39
 13207 171d 1B       		.uleb128 0x1b
 13208 171e 2E0D0000 		.4byte	.LASF278
 13209 1722 01       		.byte	0x1
 13210 1723 430A     		.2byte	0xa43
 13211 1725 81000000 		.4byte	0x81
 13212 1729 02       		.uleb128 0x2
 13213 172a 91       		.byte	0x91
 13214 172b 58       		.sleb128 -40
 13215 172c 1B       		.uleb128 0x1b
 13216 172d 730D0000 		.4byte	.LASF279
 13217 1731 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 287


 13218 1732 440A     		.2byte	0xa44
 13219 1734 BD000000 		.4byte	0xbd
 13220 1738 02       		.uleb128 0x2
 13221 1739 91       		.byte	0x91
 13222 173a 64       		.sleb128 -28
 13223 173b 1B       		.uleb128 0x1b
 13224 173c C7040000 		.4byte	.LASF280
 13225 1740 01       		.byte	0x1
 13226 1741 440A     		.2byte	0xa44
 13227 1743 BD000000 		.4byte	0xbd
 13228 1747 02       		.uleb128 0x2
 13229 1748 91       		.byte	0x91
 13230 1749 60       		.sleb128 -32
 13231 174a 1B       		.uleb128 0x1b
 13232 174b C40E0000 		.4byte	.LASF281
 13233 174f 01       		.byte	0x1
 13234 1750 440A     		.2byte	0xa44
 13235 1752 BD000000 		.4byte	0xbd
 13236 1756 02       		.uleb128 0x2
 13237 1757 91       		.byte	0x91
 13238 1758 68       		.sleb128 -24
 13239 1759 1B       		.uleb128 0x1b
 13240 175a 62040000 		.4byte	.LASF282
 13241 175e 01       		.byte	0x1
 13242 175f 450A     		.2byte	0xa45
 13243 1761 BD000000 		.4byte	0xbd
 13244 1765 02       		.uleb128 0x2
 13245 1766 91       		.byte	0x91
 13246 1767 5C       		.sleb128 -36
 13247 1768 1B       		.uleb128 0x1b
 13248 1769 CE060000 		.4byte	.LASF283
 13249 176d 01       		.byte	0x1
 13250 176e 460A     		.2byte	0xa46
 13251 1770 99000000 		.4byte	0x99
 13252 1774 05       		.uleb128 0x5
 13253 1775 03       		.byte	0x3
 13254 1776 B8010000 		.4byte	timer_value_s.10758
 13255 177a 1B       		.uleb128 0x1b
 13256 177b 69060000 		.4byte	.LASF284
 13257 177f 01       		.byte	0x1
 13258 1780 460A     		.2byte	0xa46
 13259 1782 99000000 		.4byte	0x99
 13260 1786 05       		.uleb128 0x5
 13261 1787 03       		.byte	0x3
 13262 1788 BC010000 		.4byte	timer_value_e.10759
 13263 178c 1B       		.uleb128 0x1b
 13264 178d 800F0000 		.4byte	.LASF285
 13265 1791 01       		.byte	0x1
 13266 1792 470A     		.2byte	0xa47
 13267 1794 96030000 		.4byte	0x396
 13268 1798 05       		.uleb128 0x5
 13269 1799 03       		.byte	0x3
 13270 179a A4010000 		.4byte	timer_exc_s.10760
 13271 179e 1B       		.uleb128 0x1b
 13272 179f 5B0F0000 		.4byte	.LASF286
 13273 17a3 01       		.byte	0x1
 13274 17a4 470A     		.2byte	0xa47
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 288


 13275 17a6 96030000 		.4byte	0x396
 13276 17aa 05       		.uleb128 0x5
 13277 17ab 03       		.byte	0x3
 13278 17ac AC010000 		.4byte	timer_exc_e.10761
 13279 17b0 1B       		.uleb128 0x1b
 13280 17b1 FD060000 		.4byte	.LASF287
 13281 17b5 01       		.byte	0x1
 13282 17b6 480A     		.2byte	0xa48
 13283 17b8 94020000 		.4byte	0x294
 13284 17bc 05       		.uleb128 0x5
 13285 17bd 03       		.byte	0x3
 13286 17be 98010000 		.4byte	start_emg_pos.10762
 13287 17c2 00       		.byte	0
 13288 17c3 24       		.uleb128 0x24
 13289 17c4 440B0000 		.4byte	.LASF288
 13290 17c8 01       		.byte	0x1
 13291 17c9 E00A     		.2byte	0xae0
 13292 17cb 00000000 		.4byte	.LFB78
 13293 17cf 08010000 		.4byte	.LFE78-.LFB78
 13294 17d3 01       		.uleb128 0x1
 13295 17d4 9C       		.byte	0x9c
 13296 17d5 49180000 		.4byte	0x1849
 13297 17d9 1B       		.uleb128 0x1b
 13298 17da E80F0000 		.4byte	.LASF289
 13299 17de 01       		.byte	0x1
 13300 17df E20A     		.2byte	0xae2
 13301 17e1 EA000000 		.4byte	0xea
 13302 17e5 02       		.uleb128 0x2
 13303 17e6 91       		.byte	0x91
 13304 17e7 64       		.sleb128 -28
 13305 17e8 1B       		.uleb128 0x1b
 13306 17e9 540D0000 		.4byte	.LASF290
 13307 17ed 01       		.byte	0x1
 13308 17ee E30A     		.2byte	0xae3
 13309 17f0 81000000 		.4byte	0x81
 13310 17f4 05       		.uleb128 0x5
 13311 17f5 03       		.byte	0x3
 13312 17f6 C4010000 		.4byte	row_number.10791
 13313 17fa 1B       		.uleb128 0x1b
 13314 17fb 9A040000 		.4byte	.LASF291
 13315 17ff 01       		.byte	0x1
 13316 1800 E40A     		.2byte	0xae4
 13317 1802 81000000 		.4byte	0x81
 13318 1806 02       		.uleb128 0x2
 13319 1807 91       		.byte	0x91
 13320 1808 77       		.sleb128 -9
 13321 1809 1B       		.uleb128 0x1b
 13322 180a 160E0000 		.4byte	.LASF292
 13323 180e 01       		.byte	0x1
 13324 180f E50A     		.2byte	0xae5
 13325 1811 49180000 		.4byte	0x1849
 13326 1815 02       		.uleb128 0x2
 13327 1816 91       		.byte	0x91
 13328 1817 70       		.sleb128 -16
 13329 1818 1B       		.uleb128 0x1b
 13330 1819 1E010000 		.4byte	.LASF293
 13331 181d 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 289


 13332 181e E60A     		.2byte	0xae6
 13333 1820 49180000 		.4byte	0x1849
 13334 1824 02       		.uleb128 0x2
 13335 1825 91       		.byte	0x91
 13336 1826 6C       		.sleb128 -20
 13337 1827 1B       		.uleb128 0x1b
 13338 1828 7C110000 		.4byte	.LASF294
 13339 182c 01       		.byte	0x1
 13340 182d E70A     		.2byte	0xae7
 13341 182f 81000000 		.4byte	0x81
 13342 1833 02       		.uleb128 0x2
 13343 1834 91       		.byte	0x91
 13344 1835 6B       		.sleb128 -21
 13345 1836 1B       		.uleb128 0x1b
 13346 1837 8F0A0000 		.4byte	.LASF295
 13347 183b 01       		.byte	0x1
 13348 183c E80A     		.2byte	0xae8
 13349 183e 49180000 		.4byte	0x1849
 13350 1842 05       		.uleb128 0x5
 13351 1843 03       		.byte	0x3
 13352 1844 C0010000 		.4byte	m_addr.10796
 13353 1848 00       		.byte	0
 13354 1849 0C       		.uleb128 0xc
 13355 184a 04       		.byte	0x4
 13356 184b 81000000 		.4byte	0x81
 13357 184f 07       		.uleb128 0x7
 13358 1850 5F180000 		.4byte	0x185f
 13359 1854 5F180000 		.4byte	0x185f
 13360 1858 08       		.uleb128 0x8
 13361 1859 0E010000 		.4byte	0x10e
 13362 185d 1C       		.byte	0x1c
 13363 185e 00       		.byte	0
 13364 185f 27       		.uleb128 0x27
 13365 1860 81000000 		.4byte	0x81
 13366 1864 19       		.uleb128 0x19
 13367 1865 210E0000 		.4byte	.LASF296
 13368 1869 01       		.byte	0x1
 13369 186a 40       		.byte	0x40
 13370 186b 75180000 		.4byte	0x1875
 13371 186f 05       		.uleb128 0x5
 13372 1870 03       		.byte	0x3
 13373 1871 00000000 		.4byte	pwm_preload_values
 13374 1875 27       		.uleb128 0x27
 13375 1876 4F180000 		.4byte	0x184f
 13376 187a 28       		.uleb128 0x28
 13377 187b 670F0000 		.4byte	.LASF297
 13378 187f 08       		.byte	0x8
 13379 1880 1207     		.2byte	0x712
 13380 1882 86180000 		.4byte	0x1886
 13381 1886 06       		.uleb128 0x6
 13382 1887 76000000 		.4byte	0x76
 13383 188b 07       		.uleb128 0x7
 13384 188c A5010000 		.4byte	0x1a5
 13385 1890 9B180000 		.4byte	0x189b
 13386 1894 08       		.uleb128 0x8
 13387 1895 0E010000 		.4byte	0x10e
 13388 1899 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 290


 13389 189a 00       		.byte	0
 13390 189b 28       		.uleb128 0x28
 13391 189c 1C070000 		.4byte	.LASF298
 13392 18a0 07       		.byte	0x7
 13393 18a1 2102     		.2byte	0x221
 13394 18a3 8B180000 		.4byte	0x188b
 13395 18a7 28       		.uleb128 0x28
 13396 18a8 BE040000 		.4byte	.LASF299
 13397 18ac 07       		.byte	0x7
 13398 18ad 2102     		.2byte	0x221
 13399 18af 8B180000 		.4byte	0x188b
 13400 18b3 28       		.uleb128 0x28
 13401 18b4 D40B0000 		.4byte	.LASF300
 13402 18b8 07       		.byte	0x7
 13403 18b9 2102     		.2byte	0x221
 13404 18bb 8B180000 		.4byte	0x188b
 13405 18bf 07       		.uleb128 0x7
 13406 18c0 E2010000 		.4byte	0x1e2
 13407 18c4 CF180000 		.4byte	0x18cf
 13408 18c8 08       		.uleb128 0x8
 13409 18c9 0E010000 		.4byte	0x10e
 13410 18cd 01       		.byte	0x1
 13411 18ce 00       		.byte	0
 13412 18cf 28       		.uleb128 0x28
 13413 18d0 C7060000 		.4byte	.LASF301
 13414 18d4 07       		.byte	0x7
 13415 18d5 2202     		.2byte	0x222
 13416 18d7 BF180000 		.4byte	0x18bf
 13417 18db 28       		.uleb128 0x28
 13418 18dc 72110000 		.4byte	.LASF302
 13419 18e0 07       		.byte	0x7
 13420 18e1 2202     		.2byte	0x222
 13421 18e3 BF180000 		.4byte	0x18bf
 13422 18e7 28       		.uleb128 0x28
 13423 18e8 BE100000 		.4byte	.LASF303
 13424 18ec 07       		.byte	0x7
 13425 18ed 2302     		.2byte	0x223
 13426 18ef 63020000 		.4byte	0x263
 13427 18f3 28       		.uleb128 0x28
 13428 18f4 65030000 		.4byte	.LASF304
 13429 18f8 07       		.byte	0x7
 13430 18f9 2302     		.2byte	0x223
 13431 18fb 63020000 		.4byte	0x263
 13432 18ff 28       		.uleb128 0x28
 13433 1900 93000000 		.4byte	.LASF305
 13434 1904 07       		.byte	0x7
 13435 1905 2502     		.2byte	0x225
 13436 1907 B4020000 		.4byte	0x2b4
 13437 190b 28       		.uleb128 0x28
 13438 190c 750E0000 		.4byte	.LASF306
 13439 1910 07       		.byte	0x7
 13440 1911 2602     		.2byte	0x226
 13441 1913 B4090000 		.4byte	0x9b4
 13442 1917 28       		.uleb128 0x28
 13443 1918 960A0000 		.4byte	.LASF307
 13444 191c 07       		.byte	0x7
 13445 191d 2602     		.2byte	0x226
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 291


 13446 191f B4090000 		.4byte	0x9b4
 13447 1923 28       		.uleb128 0x28
 13448 1924 63090000 		.4byte	.LASF308
 13449 1928 07       		.byte	0x7
 13450 1929 2702     		.2byte	0x227
 13451 192b 8D0B0000 		.4byte	0xb8d
 13452 192f 07       		.uleb128 0x7
 13453 1930 650B0000 		.4byte	0xb65
 13454 1934 3F190000 		.4byte	0x193f
 13455 1938 08       		.uleb128 0x8
 13456 1939 0E010000 		.4byte	0x10e
 13457 193d 01       		.byte	0x1
 13458 193e 00       		.byte	0
 13459 193f 28       		.uleb128 0x28
 13460 1940 C00B0000 		.4byte	.LASF309
 13461 1944 07       		.byte	0x7
 13462 1945 2802     		.2byte	0x228
 13463 1947 2F190000 		.4byte	0x192f
 13464 194b 28       		.uleb128 0x28
 13465 194c BE090000 		.4byte	.LASF310
 13466 1950 07       		.byte	0x7
 13467 1951 2802     		.2byte	0x228
 13468 1953 2F190000 		.4byte	0x192f
 13469 1957 28       		.uleb128 0x28
 13470 1958 A60B0000 		.4byte	.LASF311
 13471 195c 07       		.byte	0x7
 13472 195d 2802     		.2byte	0x228
 13473 195f 2F190000 		.4byte	0x192f
 13474 1963 07       		.uleb128 0x7
 13475 1964 650B0000 		.4byte	0xb65
 13476 1968 73190000 		.4byte	0x1973
 13477 196c 08       		.uleb128 0x8
 13478 196d 0E010000 		.4byte	0x10e
 13479 1971 02       		.byte	0x2
 13480 1972 00       		.byte	0
 13481 1973 28       		.uleb128 0x28
 13482 1974 57050000 		.4byte	.LASF312
 13483 1978 07       		.byte	0x7
 13484 1979 2902     		.2byte	0x229
 13485 197b 63190000 		.4byte	0x1963
 13486 197f 07       		.uleb128 0x7
 13487 1980 650B0000 		.4byte	0xb65
 13488 1984 8F190000 		.4byte	0x198f
 13489 1988 08       		.uleb128 0x8
 13490 1989 0E010000 		.4byte	0x10e
 13491 198d 07       		.byte	0x7
 13492 198e 00       		.byte	0
 13493 198f 28       		.uleb128 0x28
 13494 1990 AE010000 		.4byte	.LASF313
 13495 1994 07       		.byte	0x7
 13496 1995 2A02     		.2byte	0x22a
 13497 1997 7F190000 		.4byte	0x197f
 13498 199b 28       		.uleb128 0x28
 13499 199c 92030000 		.4byte	.LASF314
 13500 19a0 07       		.byte	0x7
 13501 19a1 2B02     		.2byte	0x22b
 13502 19a3 650B0000 		.4byte	0xb65
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 292


 13503 19a7 28       		.uleb128 0x28
 13504 19a8 CA020000 		.4byte	.LASF315
 13505 19ac 07       		.byte	0x7
 13506 19ad 2D02     		.2byte	0x22d
 13507 19af 8D000000 		.4byte	0x8d
 13508 19b3 28       		.uleb128 0x28
 13509 19b4 43090000 		.4byte	.LASF316
 13510 19b8 07       		.byte	0x7
 13511 19b9 2E02     		.2byte	0x22e
 13512 19bb 8D000000 		.4byte	0x8d
 13513 19bf 28       		.uleb128 0x28
 13514 19c0 500C0000 		.4byte	.LASF317
 13515 19c4 07       		.byte	0x7
 13516 19c5 2F02     		.2byte	0x22f
 13517 19c7 D5000000 		.4byte	0xd5
 13518 19cb 28       		.uleb128 0x28
 13519 19cc FC0C0000 		.4byte	.LASF318
 13520 19d0 07       		.byte	0x7
 13521 19d1 3102     		.2byte	0x231
 13522 19d3 94020000 		.4byte	0x294
 13523 19d7 28       		.uleb128 0x28
 13524 19d8 DA0F0000 		.4byte	.LASF319
 13525 19dc 07       		.byte	0x7
 13526 19dd 3202     		.2byte	0x232
 13527 19df 11070000 		.4byte	0x711
 13528 19e3 28       		.uleb128 0x28
 13529 19e4 FB0E0000 		.4byte	.LASF320
 13530 19e8 07       		.byte	0x7
 13531 19e9 3302     		.2byte	0x233
 13532 19eb 11070000 		.4byte	0x711
 13533 19ef 28       		.uleb128 0x28
 13534 19f0 17060000 		.4byte	.LASF321
 13535 19f4 07       		.byte	0x7
 13536 19f5 3402     		.2byte	0x234
 13537 19f7 94020000 		.4byte	0x294
 13538 19fb 28       		.uleb128 0x28
 13539 19fc 740F0000 		.4byte	.LASF322
 13540 1a00 07       		.byte	0x7
 13541 1a01 3502     		.2byte	0x235
 13542 1a03 94020000 		.4byte	0x294
 13543 1a07 28       		.uleb128 0x28
 13544 1a08 7C0C0000 		.4byte	.LASF323
 13545 1a0c 07       		.byte	0x7
 13546 1a0d 3602     		.2byte	0x236
 13547 1a0f BD000000 		.4byte	0xbd
 13548 1a13 28       		.uleb128 0x28
 13549 1a14 A5060000 		.4byte	.LASF324
 13550 1a18 07       		.byte	0x7
 13551 1a19 3802     		.2byte	0x238
 13552 1a1b 390C0000 		.4byte	0xc39
 13553 1a1f 28       		.uleb128 0x28
 13554 1a20 E8040000 		.4byte	.LASF325
 13555 1a24 07       		.byte	0x7
 13556 1a25 3902     		.2byte	0x239
 13557 1a27 010C0000 		.4byte	0xc01
 13558 1a2b 28       		.uleb128 0x28
 13559 1a2c 3E040000 		.4byte	.LASF326
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 293


 13560 1a30 07       		.byte	0x7
 13561 1a31 3A02     		.2byte	0x23a
 13562 1a33 010C0000 		.4byte	0xc01
 13563 1a37 28       		.uleb128 0x28
 13564 1a38 8F0C0000 		.4byte	.LASF327
 13565 1a3c 07       		.byte	0x7
 13566 1a3d 3B02     		.2byte	0x23b
 13567 1a3f 010C0000 		.4byte	0xc01
 13568 1a43 28       		.uleb128 0x28
 13569 1a44 EE100000 		.4byte	.LASF328
 13570 1a48 07       		.byte	0x7
 13571 1a49 3C02     		.2byte	0x23c
 13572 1a4b 010C0000 		.4byte	0xc01
 13573 1a4f 28       		.uleb128 0x28
 13574 1a50 47080000 		.4byte	.LASF329
 13575 1a54 07       		.byte	0x7
 13576 1a55 3F02     		.2byte	0x23f
 13577 1a57 21070000 		.4byte	0x721
 13578 1a5b 28       		.uleb128 0x28
 13579 1a5c E2000000 		.4byte	.LASF330
 13580 1a60 07       		.byte	0x7
 13581 1a61 4002     		.2byte	0x240
 13582 1a63 81000000 		.4byte	0x81
 13583 1a67 28       		.uleb128 0x28
 13584 1a68 53040000 		.4byte	.LASF331
 13585 1a6c 07       		.byte	0x7
 13586 1a6d 4102     		.2byte	0x241
 13587 1a6f 81000000 		.4byte	0x81
 13588 1a73 28       		.uleb128 0x28
 13589 1a74 00010000 		.4byte	.LASF332
 13590 1a78 07       		.byte	0x7
 13591 1a79 4202     		.2byte	0x242
 13592 1a7b 81000000 		.4byte	0x81
 13593 1a7f 28       		.uleb128 0x28
 13594 1a80 A6110000 		.4byte	.LASF333
 13595 1a84 07       		.byte	0x7
 13596 1a85 4402     		.2byte	0x244
 13597 1a87 81000000 		.4byte	0x81
 13598 1a8b 28       		.uleb128 0x28
 13599 1a8c C70B0000 		.4byte	.LASF334
 13600 1a90 07       		.byte	0x7
 13601 1a91 4502     		.2byte	0x245
 13602 1a93 81000000 		.4byte	0x81
 13603 1a97 28       		.uleb128 0x28
 13604 1a98 A4040000 		.4byte	.LASF335
 13605 1a9c 07       		.byte	0x7
 13606 1a9d 4602     		.2byte	0x246
 13607 1a9f 81000000 		.4byte	0x81
 13608 1aa3 28       		.uleb128 0x28
 13609 1aa4 27080000 		.4byte	.LASF336
 13610 1aa8 07       		.byte	0x7
 13611 1aa9 4702     		.2byte	0x247
 13612 1aab 81000000 		.4byte	0x81
 13613 1aaf 28       		.uleb128 0x28
 13614 1ab0 A3090000 		.4byte	.LASF337
 13615 1ab4 07       		.byte	0x7
 13616 1ab5 4802     		.2byte	0x248
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 294


 13617 1ab7 81000000 		.4byte	0x81
 13618 1abb 07       		.uleb128 0x7
 13619 1abc B1000000 		.4byte	0xb1
 13620 1ac0 CB1A0000 		.4byte	0x1acb
 13621 1ac4 08       		.uleb128 0x8
 13622 1ac5 0E010000 		.4byte	0x10e
 13623 1ac9 0B       		.byte	0xb
 13624 1aca 00       		.byte	0
 13625 1acb 28       		.uleb128 0x28
 13626 1acc 4B040000 		.4byte	.LASF338
 13627 1ad0 07       		.byte	0x7
 13628 1ad1 4C02     		.2byte	0x24c
 13629 1ad3 BB1A0000 		.4byte	0x1abb
 13630 1ad7 28       		.uleb128 0x28
 13631 1ad8 25110000 		.4byte	.LASF339
 13632 1adc 07       		.byte	0x7
 13633 1add 4D02     		.2byte	0x24d
 13634 1adf 81000000 		.4byte	0x81
 13635 1ae3 07       		.uleb128 0x7
 13636 1ae4 A5000000 		.4byte	0xa5
 13637 1ae8 F31A0000 		.4byte	0x1af3
 13638 1aec 08       		.uleb128 0x8
 13639 1aed 0E010000 		.4byte	0x10e
 13640 1af1 01       		.byte	0x1
 13641 1af2 00       		.byte	0
 13642 1af3 28       		.uleb128 0x28
 13643 1af4 32050000 		.4byte	.LASF340
 13644 1af8 07       		.byte	0x7
 13645 1af9 5002     		.2byte	0x250
 13646 1afb E31A0000 		.4byte	0x1ae3
 13647 1aff 07       		.uleb128 0x7
 13648 1b00 99000000 		.4byte	0x99
 13649 1b04 151B0000 		.4byte	0x1b15
 13650 1b08 08       		.uleb128 0x8
 13651 1b09 0E010000 		.4byte	0x10e
 13652 1b0d 01       		.byte	0x1
 13653 1b0e 08       		.uleb128 0x8
 13654 1b0f 0E010000 		.4byte	0x10e
 13655 1b13 04       		.byte	0x4
 13656 1b14 00       		.byte	0
 13657 1b15 28       		.uleb128 0x28
 13658 1b16 0B070000 		.4byte	.LASF341
 13659 1b1a 07       		.byte	0x7
 13660 1b1b 5302     		.2byte	0x253
 13661 1b1d FF1A0000 		.4byte	0x1aff
 13662 1b21 28       		.uleb128 0x28
 13663 1b22 A40D0000 		.4byte	.LASF342
 13664 1b26 07       		.byte	0x7
 13665 1b27 5402     		.2byte	0x254
 13666 1b29 21070000 		.4byte	0x721
 13667 1b2d 07       		.uleb128 0x7
 13668 1b2e 8D000000 		.4byte	0x8d
 13669 1b32 431B0000 		.4byte	0x1b43
 13670 1b36 08       		.uleb128 0x8
 13671 1b37 0E010000 		.4byte	0x10e
 13672 1b3b 01       		.byte	0x1
 13673 1b3c 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 295


 13674 1b3d 0E010000 		.4byte	0x10e
 13675 1b41 04       		.byte	0x4
 13676 1b42 00       		.byte	0
 13677 1b43 28       		.uleb128 0x28
 13678 1b44 FA0F0000 		.4byte	.LASF343
 13679 1b48 07       		.byte	0x7
 13680 1b49 5502     		.2byte	0x255
 13681 1b4b 2D1B0000 		.4byte	0x1b2d
 13682 1b4f 07       		.uleb128 0x7
 13683 1b50 81000000 		.4byte	0x81
 13684 1b54 651B0000 		.4byte	0x1b65
 13685 1b58 08       		.uleb128 0x8
 13686 1b59 0E010000 		.4byte	0x10e
 13687 1b5d 01       		.byte	0x1
 13688 1b5e 08       		.uleb128 0x8
 13689 1b5f 0E010000 		.4byte	0x10e
 13690 1b63 04       		.byte	0x4
 13691 1b64 00       		.byte	0
 13692 1b65 28       		.uleb128 0x28
 13693 1b66 DC060000 		.4byte	.LASF344
 13694 1b6a 07       		.byte	0x7
 13695 1b6b 5602     		.2byte	0x256
 13696 1b6d 4F1B0000 		.4byte	0x1b4f
 13697 1b71 28       		.uleb128 0x28
 13698 1b72 D8030000 		.4byte	.LASF345
 13699 1b76 07       		.byte	0x7
 13700 1b77 5702     		.2byte	0x257
 13701 1b79 21070000 		.4byte	0x721
 13702 1b7d 28       		.uleb128 0x28
 13703 1b7e B10A0000 		.4byte	.LASF346
 13704 1b82 07       		.byte	0x7
 13705 1b83 5A02     		.2byte	0x25a
 13706 1b85 BD000000 		.4byte	0xbd
 13707 1b89 28       		.uleb128 0x28
 13708 1b8a FA050000 		.4byte	.LASF347
 13709 1b8e 07       		.byte	0x7
 13710 1b8f 5D02     		.2byte	0x25d
 13711 1b91 9F010000 		.4byte	0x19f
 13712 1b95 28       		.uleb128 0x28
 13713 1b96 C1070000 		.4byte	.LASF348
 13714 1b9a 07       		.byte	0x7
 13715 1b9b 6002     		.2byte	0x260
 13716 1b9d 9F010000 		.4byte	0x19f
 13717 1ba1 07       		.uleb128 0x7
 13718 1ba2 E90A0000 		.4byte	0xae9
 13719 1ba6 B11B0000 		.4byte	0x1bb1
 13720 1baa 08       		.uleb128 0x8
 13721 1bab 0E010000 		.4byte	0x10e
 13722 1baf 04       		.byte	0x4
 13723 1bb0 00       		.byte	0
 13724 1bb1 28       		.uleb128 0x28
 13725 1bb2 51050000 		.4byte	.LASF349
 13726 1bb6 07       		.byte	0x7
 13727 1bb7 6902     		.2byte	0x269
 13728 1bb9 A11B0000 		.4byte	0x1ba1
 13729 1bbd 28       		.uleb128 0x28
 13730 1bbe 49060000 		.4byte	.LASF350
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 296


 13731 1bc2 07       		.byte	0x7
 13732 1bc3 6902     		.2byte	0x269
 13733 1bc5 A11B0000 		.4byte	0x1ba1
 13734 1bc9 28       		.uleb128 0x28
 13735 1bca 43110000 		.4byte	.LASF351
 13736 1bce 07       		.byte	0x7
 13737 1bcf 7202     		.2byte	0x272
 13738 1bd1 81000000 		.4byte	0x81
 13739 1bd5 00       		.byte	0
 13740              		.section	.debug_abbrev,"",%progbits
 13741              	.Ldebug_abbrev0:
 13742 0000 01       		.uleb128 0x1
 13743 0001 11       		.uleb128 0x11
 13744 0002 01       		.byte	0x1
 13745 0003 25       		.uleb128 0x25
 13746 0004 0E       		.uleb128 0xe
 13747 0005 13       		.uleb128 0x13
 13748 0006 0B       		.uleb128 0xb
 13749 0007 03       		.uleb128 0x3
 13750 0008 0E       		.uleb128 0xe
 13751 0009 1B       		.uleb128 0x1b
 13752 000a 0E       		.uleb128 0xe
 13753 000b 55       		.uleb128 0x55
 13754 000c 17       		.uleb128 0x17
 13755 000d 11       		.uleb128 0x11
 13756 000e 01       		.uleb128 0x1
 13757 000f 10       		.uleb128 0x10
 13758 0010 17       		.uleb128 0x17
 13759 0011 00       		.byte	0
 13760 0012 00       		.byte	0
 13761 0013 02       		.uleb128 0x2
 13762 0014 24       		.uleb128 0x24
 13763 0015 00       		.byte	0
 13764 0016 0B       		.uleb128 0xb
 13765 0017 0B       		.uleb128 0xb
 13766 0018 3E       		.uleb128 0x3e
 13767 0019 0B       		.uleb128 0xb
 13768 001a 03       		.uleb128 0x3
 13769 001b 0E       		.uleb128 0xe
 13770 001c 00       		.byte	0
 13771 001d 00       		.byte	0
 13772 001e 03       		.uleb128 0x3
 13773 001f 16       		.uleb128 0x16
 13774 0020 00       		.byte	0
 13775 0021 03       		.uleb128 0x3
 13776 0022 0E       		.uleb128 0xe
 13777 0023 3A       		.uleb128 0x3a
 13778 0024 0B       		.uleb128 0xb
 13779 0025 3B       		.uleb128 0x3b
 13780 0026 0B       		.uleb128 0xb
 13781 0027 49       		.uleb128 0x49
 13782 0028 13       		.uleb128 0x13
 13783 0029 00       		.byte	0
 13784 002a 00       		.byte	0
 13785 002b 04       		.uleb128 0x4
 13786 002c 24       		.uleb128 0x24
 13787 002d 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 297


 13788 002e 0B       		.uleb128 0xb
 13789 002f 0B       		.uleb128 0xb
 13790 0030 3E       		.uleb128 0x3e
 13791 0031 0B       		.uleb128 0xb
 13792 0032 03       		.uleb128 0x3
 13793 0033 08       		.uleb128 0x8
 13794 0034 00       		.byte	0
 13795 0035 00       		.byte	0
 13796 0036 05       		.uleb128 0x5
 13797 0037 16       		.uleb128 0x16
 13798 0038 00       		.byte	0
 13799 0039 03       		.uleb128 0x3
 13800 003a 0E       		.uleb128 0xe
 13801 003b 3A       		.uleb128 0x3a
 13802 003c 0B       		.uleb128 0xb
 13803 003d 3B       		.uleb128 0x3b
 13804 003e 05       		.uleb128 0x5
 13805 003f 49       		.uleb128 0x49
 13806 0040 13       		.uleb128 0x13
 13807 0041 00       		.byte	0
 13808 0042 00       		.byte	0
 13809 0043 06       		.uleb128 0x6
 13810 0044 35       		.uleb128 0x35
 13811 0045 00       		.byte	0
 13812 0046 49       		.uleb128 0x49
 13813 0047 13       		.uleb128 0x13
 13814 0048 00       		.byte	0
 13815 0049 00       		.byte	0
 13816 004a 07       		.uleb128 0x7
 13817 004b 01       		.uleb128 0x1
 13818 004c 01       		.byte	0x1
 13819 004d 49       		.uleb128 0x49
 13820 004e 13       		.uleb128 0x13
 13821 004f 01       		.uleb128 0x1
 13822 0050 13       		.uleb128 0x13
 13823 0051 00       		.byte	0
 13824 0052 00       		.byte	0
 13825 0053 08       		.uleb128 0x8
 13826 0054 21       		.uleb128 0x21
 13827 0055 00       		.byte	0
 13828 0056 49       		.uleb128 0x49
 13829 0057 13       		.uleb128 0x13
 13830 0058 2F       		.uleb128 0x2f
 13831 0059 0B       		.uleb128 0xb
 13832 005a 00       		.byte	0
 13833 005b 00       		.byte	0
 13834 005c 09       		.uleb128 0x9
 13835 005d 04       		.uleb128 0x4
 13836 005e 01       		.byte	0x1
 13837 005f 03       		.uleb128 0x3
 13838 0060 0E       		.uleb128 0xe
 13839 0061 0B       		.uleb128 0xb
 13840 0062 0B       		.uleb128 0xb
 13841 0063 49       		.uleb128 0x49
 13842 0064 13       		.uleb128 0x13
 13843 0065 3A       		.uleb128 0x3a
 13844 0066 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 298


 13845 0067 3B       		.uleb128 0x3b
 13846 0068 0B       		.uleb128 0xb
 13847 0069 01       		.uleb128 0x1
 13848 006a 13       		.uleb128 0x13
 13849 006b 00       		.byte	0
 13850 006c 00       		.byte	0
 13851 006d 0A       		.uleb128 0xa
 13852 006e 28       		.uleb128 0x28
 13853 006f 00       		.byte	0
 13854 0070 03       		.uleb128 0x3
 13855 0071 0E       		.uleb128 0xe
 13856 0072 1C       		.uleb128 0x1c
 13857 0073 0B       		.uleb128 0xb
 13858 0074 00       		.byte	0
 13859 0075 00       		.byte	0
 13860 0076 0B       		.uleb128 0xb
 13861 0077 13       		.uleb128 0x13
 13862 0078 00       		.byte	0
 13863 0079 03       		.uleb128 0x3
 13864 007a 0E       		.uleb128 0xe
 13865 007b 3C       		.uleb128 0x3c
 13866 007c 19       		.uleb128 0x19
 13867 007d 00       		.byte	0
 13868 007e 00       		.byte	0
 13869 007f 0C       		.uleb128 0xc
 13870 0080 0F       		.uleb128 0xf
 13871 0081 00       		.byte	0
 13872 0082 0B       		.uleb128 0xb
 13873 0083 0B       		.uleb128 0xb
 13874 0084 49       		.uleb128 0x49
 13875 0085 13       		.uleb128 0x13
 13876 0086 00       		.byte	0
 13877 0087 00       		.byte	0
 13878 0088 0D       		.uleb128 0xd
 13879 0089 13       		.uleb128 0x13
 13880 008a 01       		.byte	0x1
 13881 008b 03       		.uleb128 0x3
 13882 008c 0E       		.uleb128 0xe
 13883 008d 0B       		.uleb128 0xb
 13884 008e 0B       		.uleb128 0xb
 13885 008f 3A       		.uleb128 0x3a
 13886 0090 0B       		.uleb128 0xb
 13887 0091 3B       		.uleb128 0x3b
 13888 0092 0B       		.uleb128 0xb
 13889 0093 01       		.uleb128 0x1
 13890 0094 13       		.uleb128 0x13
 13891 0095 00       		.byte	0
 13892 0096 00       		.byte	0
 13893 0097 0E       		.uleb128 0xe
 13894 0098 0D       		.uleb128 0xd
 13895 0099 00       		.byte	0
 13896 009a 03       		.uleb128 0x3
 13897 009b 08       		.uleb128 0x8
 13898 009c 3A       		.uleb128 0x3a
 13899 009d 0B       		.uleb128 0xb
 13900 009e 3B       		.uleb128 0x3b
 13901 009f 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 299


 13902 00a0 49       		.uleb128 0x49
 13903 00a1 13       		.uleb128 0x13
 13904 00a2 38       		.uleb128 0x38
 13905 00a3 0B       		.uleb128 0xb
 13906 00a4 00       		.byte	0
 13907 00a5 00       		.byte	0
 13908 00a6 0F       		.uleb128 0xf
 13909 00a7 0D       		.uleb128 0xd
 13910 00a8 00       		.byte	0
 13911 00a9 03       		.uleb128 0x3
 13912 00aa 0E       		.uleb128 0xe
 13913 00ab 3A       		.uleb128 0x3a
 13914 00ac 0B       		.uleb128 0xb
 13915 00ad 3B       		.uleb128 0x3b
 13916 00ae 0B       		.uleb128 0xb
 13917 00af 49       		.uleb128 0x49
 13918 00b0 13       		.uleb128 0x13
 13919 00b1 38       		.uleb128 0x38
 13920 00b2 0B       		.uleb128 0xb
 13921 00b3 00       		.byte	0
 13922 00b4 00       		.byte	0
 13923 00b5 10       		.uleb128 0x10
 13924 00b6 13       		.uleb128 0x13
 13925 00b7 01       		.byte	0x1
 13926 00b8 03       		.uleb128 0x3
 13927 00b9 0E       		.uleb128 0xe
 13928 00ba 0B       		.uleb128 0xb
 13929 00bb 0B       		.uleb128 0xb
 13930 00bc 3A       		.uleb128 0x3a
 13931 00bd 0B       		.uleb128 0xb
 13932 00be 3B       		.uleb128 0x3b
 13933 00bf 05       		.uleb128 0x5
 13934 00c0 01       		.uleb128 0x1
 13935 00c1 13       		.uleb128 0x13
 13936 00c2 00       		.byte	0
 13937 00c3 00       		.byte	0
 13938 00c4 11       		.uleb128 0x11
 13939 00c5 0D       		.uleb128 0xd
 13940 00c6 00       		.byte	0
 13941 00c7 03       		.uleb128 0x3
 13942 00c8 0E       		.uleb128 0xe
 13943 00c9 3A       		.uleb128 0x3a
 13944 00ca 0B       		.uleb128 0xb
 13945 00cb 3B       		.uleb128 0x3b
 13946 00cc 05       		.uleb128 0x5
 13947 00cd 49       		.uleb128 0x49
 13948 00ce 13       		.uleb128 0x13
 13949 00cf 38       		.uleb128 0x38
 13950 00d0 0B       		.uleb128 0xb
 13951 00d1 00       		.byte	0
 13952 00d2 00       		.byte	0
 13953 00d3 12       		.uleb128 0x12
 13954 00d4 0D       		.uleb128 0xd
 13955 00d5 00       		.byte	0
 13956 00d6 03       		.uleb128 0x3
 13957 00d7 08       		.uleb128 0x8
 13958 00d8 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 300


 13959 00d9 0B       		.uleb128 0xb
 13960 00da 3B       		.uleb128 0x3b
 13961 00db 05       		.uleb128 0x5
 13962 00dc 49       		.uleb128 0x49
 13963 00dd 13       		.uleb128 0x13
 13964 00de 38       		.uleb128 0x38
 13965 00df 0B       		.uleb128 0xb
 13966 00e0 00       		.byte	0
 13967 00e1 00       		.byte	0
 13968 00e2 13       		.uleb128 0x13
 13969 00e3 13       		.uleb128 0x13
 13970 00e4 01       		.byte	0x1
 13971 00e5 03       		.uleb128 0x3
 13972 00e6 0E       		.uleb128 0xe
 13973 00e7 0B       		.uleb128 0xb
 13974 00e8 05       		.uleb128 0x5
 13975 00e9 3A       		.uleb128 0x3a
 13976 00ea 0B       		.uleb128 0xb
 13977 00eb 3B       		.uleb128 0x3b
 13978 00ec 05       		.uleb128 0x5
 13979 00ed 01       		.uleb128 0x1
 13980 00ee 13       		.uleb128 0x13
 13981 00ef 00       		.byte	0
 13982 00f0 00       		.byte	0
 13983 00f1 14       		.uleb128 0x14
 13984 00f2 0D       		.uleb128 0xd
 13985 00f3 00       		.byte	0
 13986 00f4 03       		.uleb128 0x3
 13987 00f5 08       		.uleb128 0x8
 13988 00f6 3A       		.uleb128 0x3a
 13989 00f7 0B       		.uleb128 0xb
 13990 00f8 3B       		.uleb128 0x3b
 13991 00f9 05       		.uleb128 0x5
 13992 00fa 49       		.uleb128 0x49
 13993 00fb 13       		.uleb128 0x13
 13994 00fc 38       		.uleb128 0x38
 13995 00fd 05       		.uleb128 0x5
 13996 00fe 00       		.byte	0
 13997 00ff 00       		.byte	0
 13998 0100 15       		.uleb128 0x15
 13999 0101 0D       		.uleb128 0xd
 14000 0102 00       		.byte	0
 14001 0103 03       		.uleb128 0x3
 14002 0104 0E       		.uleb128 0xe
 14003 0105 3A       		.uleb128 0x3a
 14004 0106 0B       		.uleb128 0xb
 14005 0107 3B       		.uleb128 0x3b
 14006 0108 05       		.uleb128 0x5
 14007 0109 49       		.uleb128 0x49
 14008 010a 13       		.uleb128 0x13
 14009 010b 38       		.uleb128 0x38
 14010 010c 05       		.uleb128 0x5
 14011 010d 00       		.byte	0
 14012 010e 00       		.byte	0
 14013 010f 16       		.uleb128 0x16
 14014 0110 04       		.uleb128 0x4
 14015 0111 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 301


 14016 0112 0B       		.uleb128 0xb
 14017 0113 0B       		.uleb128 0xb
 14018 0114 49       		.uleb128 0x49
 14019 0115 13       		.uleb128 0x13
 14020 0116 3A       		.uleb128 0x3a
 14021 0117 0B       		.uleb128 0xb
 14022 0118 3B       		.uleb128 0x3b
 14023 0119 05       		.uleb128 0x5
 14024 011a 01       		.uleb128 0x1
 14025 011b 13       		.uleb128 0x13
 14026 011c 00       		.byte	0
 14027 011d 00       		.byte	0
 14028 011e 17       		.uleb128 0x17
 14029 011f 2E       		.uleb128 0x2e
 14030 0120 00       		.byte	0
 14031 0121 3F       		.uleb128 0x3f
 14032 0122 19       		.uleb128 0x19
 14033 0123 03       		.uleb128 0x3
 14034 0124 0E       		.uleb128 0xe
 14035 0125 3A       		.uleb128 0x3a
 14036 0126 0B       		.uleb128 0xb
 14037 0127 3B       		.uleb128 0x3b
 14038 0128 0B       		.uleb128 0xb
 14039 0129 27       		.uleb128 0x27
 14040 012a 19       		.uleb128 0x19
 14041 012b 11       		.uleb128 0x11
 14042 012c 01       		.uleb128 0x1
 14043 012d 12       		.uleb128 0x12
 14044 012e 06       		.uleb128 0x6
 14045 012f 40       		.uleb128 0x40
 14046 0130 18       		.uleb128 0x18
 14047 0131 9742     		.uleb128 0x2117
 14048 0133 19       		.uleb128 0x19
 14049 0134 00       		.byte	0
 14050 0135 00       		.byte	0
 14051 0136 18       		.uleb128 0x18
 14052 0137 2E       		.uleb128 0x2e
 14053 0138 01       		.byte	0x1
 14054 0139 3F       		.uleb128 0x3f
 14055 013a 19       		.uleb128 0x19
 14056 013b 03       		.uleb128 0x3
 14057 013c 0E       		.uleb128 0xe
 14058 013d 3A       		.uleb128 0x3a
 14059 013e 0B       		.uleb128 0xb
 14060 013f 3B       		.uleb128 0x3b
 14061 0140 0B       		.uleb128 0xb
 14062 0141 11       		.uleb128 0x11
 14063 0142 01       		.uleb128 0x1
 14064 0143 12       		.uleb128 0x12
 14065 0144 06       		.uleb128 0x6
 14066 0145 40       		.uleb128 0x40
 14067 0146 18       		.uleb128 0x18
 14068 0147 9642     		.uleb128 0x2116
 14069 0149 19       		.uleb128 0x19
 14070 014a 01       		.uleb128 0x1
 14071 014b 13       		.uleb128 0x13
 14072 014c 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 302


 14073 014d 00       		.byte	0
 14074 014e 19       		.uleb128 0x19
 14075 014f 34       		.uleb128 0x34
 14076 0150 00       		.byte	0
 14077 0151 03       		.uleb128 0x3
 14078 0152 0E       		.uleb128 0xe
 14079 0153 3A       		.uleb128 0x3a
 14080 0154 0B       		.uleb128 0xb
 14081 0155 3B       		.uleb128 0x3b
 14082 0156 0B       		.uleb128 0xb
 14083 0157 49       		.uleb128 0x49
 14084 0158 13       		.uleb128 0x13
 14085 0159 02       		.uleb128 0x2
 14086 015a 18       		.uleb128 0x18
 14087 015b 00       		.byte	0
 14088 015c 00       		.byte	0
 14089 015d 1A       		.uleb128 0x1a
 14090 015e 2E       		.uleb128 0x2e
 14091 015f 01       		.byte	0x1
 14092 0160 3F       		.uleb128 0x3f
 14093 0161 19       		.uleb128 0x19
 14094 0162 03       		.uleb128 0x3
 14095 0163 0E       		.uleb128 0xe
 14096 0164 3A       		.uleb128 0x3a
 14097 0165 0B       		.uleb128 0xb
 14098 0166 3B       		.uleb128 0x3b
 14099 0167 05       		.uleb128 0x5
 14100 0168 27       		.uleb128 0x27
 14101 0169 19       		.uleb128 0x19
 14102 016a 11       		.uleb128 0x11
 14103 016b 01       		.uleb128 0x1
 14104 016c 12       		.uleb128 0x12
 14105 016d 06       		.uleb128 0x6
 14106 016e 40       		.uleb128 0x40
 14107 016f 18       		.uleb128 0x18
 14108 0170 9642     		.uleb128 0x2116
 14109 0172 19       		.uleb128 0x19
 14110 0173 01       		.uleb128 0x1
 14111 0174 13       		.uleb128 0x13
 14112 0175 00       		.byte	0
 14113 0176 00       		.byte	0
 14114 0177 1B       		.uleb128 0x1b
 14115 0178 34       		.uleb128 0x34
 14116 0179 00       		.byte	0
 14117 017a 03       		.uleb128 0x3
 14118 017b 0E       		.uleb128 0xe
 14119 017c 3A       		.uleb128 0x3a
 14120 017d 0B       		.uleb128 0xb
 14121 017e 3B       		.uleb128 0x3b
 14122 017f 05       		.uleb128 0x5
 14123 0180 49       		.uleb128 0x49
 14124 0181 13       		.uleb128 0x13
 14125 0182 02       		.uleb128 0x2
 14126 0183 18       		.uleb128 0x18
 14127 0184 00       		.byte	0
 14128 0185 00       		.byte	0
 14129 0186 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 303


 14130 0187 0B       		.uleb128 0xb
 14131 0188 01       		.byte	0x1
 14132 0189 11       		.uleb128 0x11
 14133 018a 01       		.uleb128 0x1
 14134 018b 12       		.uleb128 0x12
 14135 018c 06       		.uleb128 0x6
 14136 018d 01       		.uleb128 0x1
 14137 018e 13       		.uleb128 0x13
 14138 018f 00       		.byte	0
 14139 0190 00       		.byte	0
 14140 0191 1D       		.uleb128 0x1d
 14141 0192 34       		.uleb128 0x34
 14142 0193 00       		.byte	0
 14143 0194 03       		.uleb128 0x3
 14144 0195 08       		.uleb128 0x8
 14145 0196 3A       		.uleb128 0x3a
 14146 0197 0B       		.uleb128 0xb
 14147 0198 3B       		.uleb128 0x3b
 14148 0199 05       		.uleb128 0x5
 14149 019a 49       		.uleb128 0x49
 14150 019b 13       		.uleb128 0x13
 14151 019c 02       		.uleb128 0x2
 14152 019d 18       		.uleb128 0x18
 14153 019e 00       		.byte	0
 14154 019f 00       		.byte	0
 14155 01a0 1E       		.uleb128 0x1e
 14156 01a1 0B       		.uleb128 0xb
 14157 01a2 01       		.byte	0x1
 14158 01a3 11       		.uleb128 0x11
 14159 01a4 01       		.uleb128 0x1
 14160 01a5 12       		.uleb128 0x12
 14161 01a6 06       		.uleb128 0x6
 14162 01a7 00       		.byte	0
 14163 01a8 00       		.byte	0
 14164 01a9 1F       		.uleb128 0x1f
 14165 01aa 21       		.uleb128 0x21
 14166 01ab 00       		.byte	0
 14167 01ac 49       		.uleb128 0x49
 14168 01ad 13       		.uleb128 0x13
 14169 01ae 2F       		.uleb128 0x2f
 14170 01af 05       		.uleb128 0x5
 14171 01b0 00       		.byte	0
 14172 01b1 00       		.byte	0
 14173 01b2 20       		.uleb128 0x20
 14174 01b3 05       		.uleb128 0x5
 14175 01b4 00       		.byte	0
 14176 01b5 03       		.uleb128 0x3
 14177 01b6 0E       		.uleb128 0xe
 14178 01b7 3A       		.uleb128 0x3a
 14179 01b8 0B       		.uleb128 0xb
 14180 01b9 3B       		.uleb128 0x3b
 14181 01ba 05       		.uleb128 0x5
 14182 01bb 49       		.uleb128 0x49
 14183 01bc 13       		.uleb128 0x13
 14184 01bd 02       		.uleb128 0x2
 14185 01be 18       		.uleb128 0x18
 14186 01bf 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 304


 14187 01c0 00       		.byte	0
 14188 01c1 21       		.uleb128 0x21
 14189 01c2 0B       		.uleb128 0xb
 14190 01c3 01       		.byte	0x1
 14191 01c4 55       		.uleb128 0x55
 14192 01c5 17       		.uleb128 0x17
 14193 01c6 00       		.byte	0
 14194 01c7 00       		.byte	0
 14195 01c8 22       		.uleb128 0x22
 14196 01c9 2E       		.uleb128 0x2e
 14197 01ca 01       		.byte	0x1
 14198 01cb 3F       		.uleb128 0x3f
 14199 01cc 19       		.uleb128 0x19
 14200 01cd 03       		.uleb128 0x3
 14201 01ce 0E       		.uleb128 0xe
 14202 01cf 3A       		.uleb128 0x3a
 14203 01d0 0B       		.uleb128 0xb
 14204 01d1 3B       		.uleb128 0x3b
 14205 01d2 05       		.uleb128 0x5
 14206 01d3 27       		.uleb128 0x27
 14207 01d4 19       		.uleb128 0x19
 14208 01d5 11       		.uleb128 0x11
 14209 01d6 01       		.uleb128 0x1
 14210 01d7 12       		.uleb128 0x12
 14211 01d8 06       		.uleb128 0x6
 14212 01d9 40       		.uleb128 0x40
 14213 01da 18       		.uleb128 0x18
 14214 01db 9742     		.uleb128 0x2117
 14215 01dd 19       		.uleb128 0x19
 14216 01de 01       		.uleb128 0x1
 14217 01df 13       		.uleb128 0x13
 14218 01e0 00       		.byte	0
 14219 01e1 00       		.byte	0
 14220 01e2 23       		.uleb128 0x23
 14221 01e3 0B       		.uleb128 0xb
 14222 01e4 01       		.byte	0x1
 14223 01e5 55       		.uleb128 0x55
 14224 01e6 17       		.uleb128 0x17
 14225 01e7 01       		.uleb128 0x1
 14226 01e8 13       		.uleb128 0x13
 14227 01e9 00       		.byte	0
 14228 01ea 00       		.byte	0
 14229 01eb 24       		.uleb128 0x24
 14230 01ec 2E       		.uleb128 0x2e
 14231 01ed 01       		.byte	0x1
 14232 01ee 3F       		.uleb128 0x3f
 14233 01ef 19       		.uleb128 0x19
 14234 01f0 03       		.uleb128 0x3
 14235 01f1 0E       		.uleb128 0xe
 14236 01f2 3A       		.uleb128 0x3a
 14237 01f3 0B       		.uleb128 0xb
 14238 01f4 3B       		.uleb128 0x3b
 14239 01f5 05       		.uleb128 0x5
 14240 01f6 11       		.uleb128 0x11
 14241 01f7 01       		.uleb128 0x1
 14242 01f8 12       		.uleb128 0x12
 14243 01f9 06       		.uleb128 0x6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 305


 14244 01fa 40       		.uleb128 0x40
 14245 01fb 18       		.uleb128 0x18
 14246 01fc 9642     		.uleb128 0x2116
 14247 01fe 19       		.uleb128 0x19
 14248 01ff 01       		.uleb128 0x1
 14249 0200 13       		.uleb128 0x13
 14250 0201 00       		.byte	0
 14251 0202 00       		.byte	0
 14252 0203 25       		.uleb128 0x25
 14253 0204 05       		.uleb128 0x5
 14254 0205 00       		.byte	0
 14255 0206 03       		.uleb128 0x3
 14256 0207 08       		.uleb128 0x8
 14257 0208 3A       		.uleb128 0x3a
 14258 0209 0B       		.uleb128 0xb
 14259 020a 3B       		.uleb128 0x3b
 14260 020b 05       		.uleb128 0x5
 14261 020c 49       		.uleb128 0x49
 14262 020d 13       		.uleb128 0x13
 14263 020e 02       		.uleb128 0x2
 14264 020f 18       		.uleb128 0x18
 14265 0210 00       		.byte	0
 14266 0211 00       		.byte	0
 14267 0212 26       		.uleb128 0x26
 14268 0213 2E       		.uleb128 0x2e
 14269 0214 01       		.byte	0x1
 14270 0215 3F       		.uleb128 0x3f
 14271 0216 19       		.uleb128 0x19
 14272 0217 03       		.uleb128 0x3
 14273 0218 0E       		.uleb128 0xe
 14274 0219 3A       		.uleb128 0x3a
 14275 021a 0B       		.uleb128 0xb
 14276 021b 3B       		.uleb128 0x3b
 14277 021c 05       		.uleb128 0x5
 14278 021d 11       		.uleb128 0x11
 14279 021e 01       		.uleb128 0x1
 14280 021f 12       		.uleb128 0x12
 14281 0220 06       		.uleb128 0x6
 14282 0221 40       		.uleb128 0x40
 14283 0222 18       		.uleb128 0x18
 14284 0223 9742     		.uleb128 0x2117
 14285 0225 19       		.uleb128 0x19
 14286 0226 01       		.uleb128 0x1
 14287 0227 13       		.uleb128 0x13
 14288 0228 00       		.byte	0
 14289 0229 00       		.byte	0
 14290 022a 27       		.uleb128 0x27
 14291 022b 26       		.uleb128 0x26
 14292 022c 00       		.byte	0
 14293 022d 49       		.uleb128 0x49
 14294 022e 13       		.uleb128 0x13
 14295 022f 00       		.byte	0
 14296 0230 00       		.byte	0
 14297 0231 28       		.uleb128 0x28
 14298 0232 34       		.uleb128 0x34
 14299 0233 00       		.byte	0
 14300 0234 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 306


 14301 0235 0E       		.uleb128 0xe
 14302 0236 3A       		.uleb128 0x3a
 14303 0237 0B       		.uleb128 0xb
 14304 0238 3B       		.uleb128 0x3b
 14305 0239 05       		.uleb128 0x5
 14306 023a 49       		.uleb128 0x49
 14307 023b 13       		.uleb128 0x13
 14308 023c 3F       		.uleb128 0x3f
 14309 023d 19       		.uleb128 0x19
 14310 023e 3C       		.uleb128 0x3c
 14311 023f 19       		.uleb128 0x19
 14312 0240 00       		.byte	0
 14313 0241 00       		.byte	0
 14314 0242 00       		.byte	0
 14315              		.section	.debug_aranges,"",%progbits
 14316 0000 8C000000 		.4byte	0x8c
 14317 0004 0200     		.2byte	0x2
 14318 0006 00000000 		.4byte	.Ldebug_info0
 14319 000a 04       		.byte	0x4
 14320 000b 00       		.byte	0
 14321 000c 0000     		.2byte	0
 14322 000e 0000     		.2byte	0
 14323 0010 00000000 		.4byte	.LFB64
 14324 0014 18000000 		.4byte	.LFE64-.LFB64
 14325 0018 00000000 		.4byte	.LFB65
 14326 001c 20000000 		.4byte	.LFE65-.LFB65
 14327 0020 00000000 		.4byte	.LFB66
 14328 0024 F4010000 		.4byte	.LFE66-.LFB66
 14329 0028 00000000 		.4byte	.LFB67
 14330 002c 24080000 		.4byte	.LFE67-.LFB67
 14331 0030 00000000 		.4byte	.LFB68
 14332 0034 CC050000 		.4byte	.LFE68-.LFB68
 14333 0038 00000000 		.4byte	.LFB69
 14334 003c 34030000 		.4byte	.LFE69-.LFB69
 14335 0040 00000000 		.4byte	.LFB70
 14336 0044 B0010000 		.4byte	.LFE70-.LFB70
 14337 0048 00000000 		.4byte	.LFB71
 14338 004c 0C070000 		.4byte	.LFE71-.LFB71
 14339 0050 00000000 		.4byte	.LFB72
 14340 0054 70090000 		.4byte	.LFE72-.LFB72
 14341 0058 00000000 		.4byte	.LFB73
 14342 005c 18080000 		.4byte	.LFE73-.LFB73
 14343 0060 00000000 		.4byte	.LFB74
 14344 0064 70120000 		.4byte	.LFE74-.LFB74
 14345 0068 00000000 		.4byte	.LFB75
 14346 006c 0C010000 		.4byte	.LFE75-.LFB75
 14347 0070 00000000 		.4byte	.LFB76
 14348 0074 A8000000 		.4byte	.LFE76-.LFB76
 14349 0078 00000000 		.4byte	.LFB77
 14350 007c A0050000 		.4byte	.LFE77-.LFB77
 14351 0080 00000000 		.4byte	.LFB78
 14352 0084 08010000 		.4byte	.LFE78-.LFB78
 14353 0088 00000000 		.4byte	0
 14354 008c 00000000 		.4byte	0
 14355              		.section	.debug_ranges,"",%progbits
 14356              	.Ldebug_ranges0:
 14357 0000 68010000 		.4byte	.LBB4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 307


 14358 0004 AA010000 		.4byte	.LBE4
 14359 0008 AC010000 		.4byte	.LBB5
 14360 000c F2010000 		.4byte	.LBE5
 14361 0010 00000000 		.4byte	0
 14362 0014 00000000 		.4byte	0
 14363 0018 3A000000 		.4byte	.LBB6
 14364 001c 40010000 		.4byte	.LBE6
 14365 0020 42010000 		.4byte	.LBB7
 14366 0024 BC010000 		.4byte	.LBE7
 14367 0028 00000000 		.4byte	0
 14368 002c 00000000 		.4byte	0
 14369 0030 BE010000 		.4byte	.LBB8
 14370 0034 20030000 		.4byte	.LBE8
 14371 0038 22030000 		.4byte	.LBB9
 14372 003c 24030000 		.4byte	.LBE9
 14373 0040 00000000 		.4byte	0
 14374 0044 00000000 		.4byte	0
 14375 0048 00000000 		.4byte	.LFB64
 14376 004c 18000000 		.4byte	.LFE64
 14377 0050 00000000 		.4byte	.LFB65
 14378 0054 20000000 		.4byte	.LFE65
 14379 0058 00000000 		.4byte	.LFB66
 14380 005c F4010000 		.4byte	.LFE66
 14381 0060 00000000 		.4byte	.LFB67
 14382 0064 24080000 		.4byte	.LFE67
 14383 0068 00000000 		.4byte	.LFB68
 14384 006c CC050000 		.4byte	.LFE68
 14385 0070 00000000 		.4byte	.LFB69
 14386 0074 34030000 		.4byte	.LFE69
 14387 0078 00000000 		.4byte	.LFB70
 14388 007c B0010000 		.4byte	.LFE70
 14389 0080 00000000 		.4byte	.LFB71
 14390 0084 0C070000 		.4byte	.LFE71
 14391 0088 00000000 		.4byte	.LFB72
 14392 008c 70090000 		.4byte	.LFE72
 14393 0090 00000000 		.4byte	.LFB73
 14394 0094 18080000 		.4byte	.LFE73
 14395 0098 00000000 		.4byte	.LFB74
 14396 009c 70120000 		.4byte	.LFE74
 14397 00a0 00000000 		.4byte	.LFB75
 14398 00a4 0C010000 		.4byte	.LFE75
 14399 00a8 00000000 		.4byte	.LFB76
 14400 00ac A8000000 		.4byte	.LFE76
 14401 00b0 00000000 		.4byte	.LFB77
 14402 00b4 A0050000 		.4byte	.LFE77
 14403 00b8 00000000 		.4byte	.LFB78
 14404 00bc 08010000 		.4byte	.LFE78
 14405 00c0 00000000 		.4byte	0
 14406 00c4 00000000 		.4byte	0
 14407              		.section	.debug_line,"",%progbits
 14408              	.Ldebug_line0:
 14409 0000 140C0000 		.section	.debug_str,"MS",%progbits,1
 14409      0200AC01 
 14409      00000201 
 14409      FB0E0D00 
 14409      01010101 
 14410              	.LASF54:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 308


 14411 0000 656D675F 		.ascii	"emg_act_counter\000"
 14411      6163745F 
 14411      636F756E 
 14411      74657200 
 14412              	.LASF24:
 14413 0010 73697A65 		.ascii	"sizetype\000"
 14413      74797065 
 14413      00
 14414              	.LASF61:
 14415 0019 706F7765 		.ascii	"power_cycles\000"
 14415      725F6379 
 14415      636C6573 
 14415      00
 14416              	.LASF267:
 14417 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14417      6379636C 
 14417      655F7374 
 14417      61747573 
 14417      00
 14418              	.LASF144:
 14419 0037 77726973 		.ascii	"wrist_direction_association\000"
 14419      745F6469 
 14419      72656374 
 14419      696F6E5F 
 14419      6173736F 
 14420              	.LASF30:
 14421 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14421      545F4D4F 
 14421      44455F45 
 14421      4D475F46 
 14421      4346535F 
 14422              	.LASF119:
 14423 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14423      5F414443 
 14423      5F73656E 
 14423      736F7273 
 14423      5F706F72 
 14424              	.LASF149:
 14425 0086 75736572 		.ascii	"user\000"
 14425      00
 14426              	.LASF10:
 14427 008b 696E7433 		.ascii	"int32_t\000"
 14427      325F7400 
 14428              	.LASF305:
 14429 0093 675F7278 		.ascii	"g_rx\000"
 14429      00
 14430              	.LASF244:
 14431 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14431      74696D65 
 14431      5F657865 
 14431      63757465 
 14431      00
 14432              	.LASF49:
 14433 00a9 73745F64 		.ascii	"st_data\000"
 14433      61746100 
 14434              	.LASF59:
 14435 00b1 746F7461 		.ascii	"total_runtime\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 309


 14435      6C5F7275 
 14435      6E74696D 
 14435      6500
 14436              	.LASF13:
 14437 00bf 75696E74 		.ascii	"uint32\000"
 14437      333200
 14438              	.LASF229:
 14439 00c6 6E5F6C69 		.ascii	"n_line\000"
 14439      6E6500
 14440              	.LASF150:
 14441 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14441      73706563 
 14441      00
 14442              	.LASF87:
 14443 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14443      6C696D5F 
 14443      696E6600 
 14444              	.LASF330:
 14445 00e2 74656E73 		.ascii	"tension_valid\000"
 14445      696F6E5F 
 14445      76616C69 
 14445      6400
 14446              	.LASF205:
 14447 00f0 6572725F 		.ascii	"err_joy_1\000"
 14447      6A6F795F 
 14447      3100
 14448              	.LASF181:
 14449 00fa 73746174 		.ascii	"state\000"
 14449      6500
 14450              	.LASF332:
 14451 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14451      65735F69 
 14451      6E746572 
 14451      72757074 
 14451      5F666C61 
 14452              	.LASF276:
 14453 0116 62696E5F 		.ascii	"bin_max\000"
 14453      6D617800 
 14454              	.LASF293:
 14455 011e 61646472 		.ascii	"addr_start_c\000"
 14455      5F737461 
 14455      72745F63 
 14455      00
 14456              	.LASF29:
 14457 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14457      545F4D4F 
 14457      44455F45 
 14457      4D475F46 
 14457      43465300 
 14458              	.LASF91:
 14459 013f 63757272 		.ascii	"curr_lookup\000"
 14459      5F6C6F6F 
 14459      6B757000 
 14460              	.LASF214:
 14461 014b 70776D5F 		.ascii	"pwm_input\000"
 14461      696E7075 
 14461      7400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 310


 14462              	.LASF57:
 14463 0155 72657374 		.ascii	"rest_counter\000"
 14463      5F636F75 
 14463      6E746572 
 14463      00
 14464              	.LASF134:
 14465 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14465      41535445 
 14465      525F7370 
 14465      656300
 14466              	.LASF28:
 14467 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14467      545F4D4F 
 14467      44455F45 
 14467      4D475F49 
 14467      4E544547 
 14468              	.LASF260:
 14469 0189 765F636F 		.ascii	"v_count\000"
 14469      756E7400 
 14470              	.LASF186:
 14471 0191 72785F64 		.ascii	"rx_data\000"
 14471      61746100 
 14472              	.LASF248:
 14473 0199 7676765F 		.ascii	"vvv_value\000"
 14473      76616C75 
 14473      6500
 14474              	.LASF14:
 14475 01a3 696E7438 		.ascii	"int8\000"
 14475      00
 14476              	.LASF191:
 14477 01a8 696E666F 		.ascii	"info_\000"
 14477      5F00
 14478              	.LASF313:
 14479 01ae 66696C74 		.ascii	"filt_emg\000"
 14479      5F656D67 
 14479      00
 14480              	.LASF106:
 14481 01b7 73745F65 		.ascii	"st_emg\000"
 14481      6D6700
 14482              	.LASF55:
 14483 01be 706F7369 		.ascii	"position_hist\000"
 14483      74696F6E 
 14483      5F686973 
 14483      7400
 14484              	.LASF173:
 14485 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14485      4152455F 
 14485      44415441 
 14485      00
 14486              	.LASF157:
 14487 01d9 74656D70 		.ascii	"temp_value\000"
 14487      5F76616C 
 14487      756500
 14488              	.LASF273:
 14489 01e4 7468725F 		.ascii	"thr_pos\000"
 14489      706F7300 
 14490              	.LASF141:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 311


 14491 01ec 73745F57 		.ascii	"st_WR_spec\000"
 14491      525F7370 
 14491      656300
 14492              	.LASF207:
 14493 01f7 6572725F 		.ascii	"err_joy_2\000"
 14493      6A6F795F 
 14493      3200
 14494              	.LASF52:
 14495 0201 72656164 		.ascii	"ready\000"
 14495      7900
 14496              	.LASF103:
 14497 0207 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14497      6964785F 
 14497      7573655F 
 14497      666F725F 
 14497      636F6E74 
 14498              	.LASF160:
 14499 021f 6761696E 		.ascii	"gain\000"
 14499      00
 14500              	.LASF64:
 14501 0224 73745F64 		.ascii	"st_device\000"
 14501      65766963 
 14501      6500
 14502              	.LASF27:
 14503 022e 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14503      545F4D4F 
 14503      44455F45 
 14503      4D475F50 
 14503      524F504F 
 14504              	.LASF69:
 14505 024a 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14505      326E645F 
 14505      6D6F746F 
 14505      725F666C 
 14505      616700
 14506              	.LASF253:
 14507 025d 55445F63 		.ascii	"UD_counter\000"
 14507      6F756E74 
 14507      657200
 14508              	.LASF62:
 14509 0268 65786365 		.ascii	"excessive_signal_activity\000"
 14509      73736976 
 14509      655F7369 
 14509      676E616C 
 14509      5F616374 
 14510              	.LASF169:
 14511 0282 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14511      414E445F 
 14511      4D45414E 
 14511      00
 14512              	.LASF113:
 14513 028f 72656164 		.ascii	"read_imu_flag\000"
 14513      5F696D75 
 14513      5F666C61 
 14513      6700
 14514              	.LASF121:
 14515 029d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 312


 14515      72645F45 
 14515      4D475F68 
 14515      6973746F 
 14515      72795F6F 
 14516              	.LASF257:
 14517 02b6 66697273 		.ascii	"first_tension_valid\000"
 14517      745F7465 
 14517      6E73696F 
 14517      6E5F7661 
 14517      6C696400 
 14518              	.LASF315:
 14519 02ca 74696D65 		.ascii	"timer_value\000"
 14519      725F7661 
 14519      6C756500 
 14520              	.LASF4:
 14521 02d6 6C6F6E67 		.ascii	"long int\000"
 14521      20696E74 
 14521      00
 14522              	.LASF147:
 14523 02df 756E7573 		.ascii	"unused_bytes1\000"
 14523      65645F62 
 14523      79746573 
 14523      3100
 14524              	.LASF194:
 14525 02ed 454D475F 		.ascii	"EMG_history_info_\000"
 14525      68697374 
 14525      6F72795F 
 14525      696E666F 
 14525      5F00
 14526              	.LASF219:
 14527 02ff 53485F45 		.ascii	"SH_ENC_L\000"
 14527      4E435F4C 
 14527      00
 14528              	.LASF68:
 14529 0308 72657365 		.ascii	"reset_counters\000"
 14529      745F636F 
 14529      756E7465 
 14529      727300
 14530              	.LASF271:
 14531 0317 62696E5F 		.ascii	"bin_threshold\000"
 14531      74687265 
 14531      73686F6C 
 14531      6400
 14532              	.LASF124:
 14533 0325 75736572 		.ascii	"user_emg\000"
 14533      5F656D67 
 14533      00
 14534              	.LASF243:
 14535 032e 73616665 		.ascii	"safe_startup_motor_activation\000"
 14535      5F737461 
 14535      72747570 
 14535      5F6D6F74 
 14535      6F725F61 
 14536              	.LASF63:
 14537 034c 756E7573 		.ascii	"unused_bytes\000"
 14537      65645F62 
 14537      79746573 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 313


 14537      00
 14538              	.LASF153:
 14539 0359 61636365 		.ascii	"accel_value\000"
 14539      6C5F7661 
 14539      6C756500 
 14540              	.LASF304:
 14541 0365 675F6164 		.ascii	"g_adc_measOld\000"
 14541      635F6D65 
 14541      61734F6C 
 14541      6400
 14542              	.LASF232:
 14543 0373 6175785F 		.ascii	"aux_encoder\000"
 14543      656E636F 
 14543      64657200 
 14544              	.LASF53:
 14545 037f 73745F63 		.ascii	"st_counters\000"
 14545      6F756E74 
 14545      65727300 
 14546              	.LASF218:
 14547 038b 53485F4D 		.ascii	"SH_MOT\000"
 14547      4F5400
 14548              	.LASF314:
 14549 0392 66696C74 		.ascii	"filt_detect_pc\000"
 14549      5F646574 
 14549      6563745F 
 14549      706300
 14550              	.LASF17:
 14551 03a1 666C6F61 		.ascii	"float32\000"
 14551      74333200 
 14552              	.LASF228:
 14553 03a9 656E636F 		.ascii	"encoder_reading_SPI\000"
 14553      6465725F 
 14553      72656164 
 14553      696E675F 
 14553      53504900 
 14554              	.LASF241:
 14555 03bd 6572726F 		.ascii	"error\000"
 14555      7200
 14556              	.LASF176:
 14557 03c3 57524954 		.ascii	"WRITE_END\000"
 14557      455F454E 
 14557      4400
 14558              	.LASF254:
 14559 03cd 4C525F63 		.ascii	"LR_counter\000"
 14559      6F756E74 
 14559      657200
 14560              	.LASF345:
 14561 03d8 706F735F 		.ascii	"pos_reconstruct\000"
 14561      7265636F 
 14561      6E737472 
 14561      75637400 
 14562              	.LASF262:
 14563 03e8 70776D5F 		.ascii	"pwm_limit_search\000"
 14563      6C696D69 
 14563      745F7365 
 14563      61726368 
 14563      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 314


 14564              	.LASF0:
 14565 03f9 7369676E 		.ascii	"signed char\000"
 14565      65642063 
 14565      68617200 
 14566              	.LASF123:
 14567 0405 75736572 		.ascii	"user_code_string\000"
 14567      5F636F64 
 14567      655F7374 
 14567      72696E67 
 14567      00
 14568              	.LASF161:
 14569 0416 73745F63 		.ascii	"st_calib\000"
 14569      616C6962 
 14569      00
 14570              	.LASF201:
 14571 041f 6572725F 		.ascii	"err_emg_1\000"
 14571      656D675F 
 14571      3100
 14572              	.LASF202:
 14573 0429 6572725F 		.ascii	"err_emg_2\000"
 14573      656D675F 
 14573      3200
 14574              	.LASF111:
 14575 0433 73776974 		.ascii	"switch_emg\000"
 14575      63685F65 
 14575      6D6700
 14576              	.LASF326:
 14577 043e 656D675F 		.ascii	"emg_2_status\000"
 14577      325F7374 
 14577      61747573 
 14577      00
 14578              	.LASF338:
 14579 044b 4144435F 		.ascii	"ADC_buf\000"
 14579      62756600 
 14580              	.LASF331:
 14581 0453 696E7465 		.ascii	"interrupt_flag\000"
 14581      72727570 
 14581      745F666C 
 14581      616700
 14582              	.LASF282:
 14583 0462 73746570 		.ascii	"step\000"
 14583      00
 14584              	.LASF221:
 14585 0467 63757272 		.ascii	"curr_error_sum\000"
 14585      5F657272 
 14585      6F725F73 
 14585      756D00
 14586              	.LASF1:
 14587 0476 756E7369 		.ascii	"unsigned char\000"
 14587      676E6564 
 14587      20636861 
 14587      7200
 14588              	.LASF97:
 14589 0484 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14589      72657665 
 14589      72735F6D 
 14589      6F746F72 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 315


 14589      5F666C61 
 14590              	.LASF291:
 14591 049a 726F775F 		.ascii	"row_start\000"
 14591      73746172 
 14591      7400
 14592              	.LASF335:
 14593 04a4 666F7263 		.ascii	"forced_open\000"
 14593      65645F6F 
 14593      70656E00 
 14594              	.LASF236:
 14595 04b0 73706565 		.ascii	"speed_encoder\000"
 14595      645F656E 
 14595      636F6465 
 14595      7200
 14596              	.LASF299:
 14597 04be 675F7265 		.ascii	"g_refNew\000"
 14597      664E6577 
 14597      00
 14598              	.LASF280:
 14599 04c7 63757272 		.ascii	"curr_off\000"
 14599      5F6F6666 
 14599      00
 14600              	.LASF67:
 14601 04d0 72696768 		.ascii	"right_left\000"
 14601      745F6C65 
 14601      667400
 14602              	.LASF95:
 14603 04db 656E636F 		.ascii	"encoder_line\000"
 14603      6465725F 
 14603      6C696E65 
 14603      00
 14604              	.LASF325:
 14605 04e8 656D675F 		.ascii	"emg_1_status\000"
 14605      315F7374 
 14605      61747573 
 14605      00
 14606              	.LASF152:
 14607 04f5 666C6167 		.ascii	"flags\000"
 14607      7300
 14608              	.LASF200:
 14609 04fb 68616E64 		.ascii	"handle_value\000"
 14609      6C655F76 
 14609      616C7565 
 14609      00
 14610              	.LASF20:
 14611 0508 63686172 		.ascii	"char\000"
 14611      00
 14612              	.LASF258:
 14613 050d 64657465 		.ascii	"detect_power_cycle_prev\000"
 14613      63745F70 
 14613      6F776572 
 14613      5F637963 
 14613      6C655F70 
 14614              	.LASF90:
 14615 0525 6D61785F 		.ascii	"max_step_pos\000"
 14615      73746570 
 14615      5F706F73 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 316


 14615      00
 14616              	.LASF340:
 14617 0532 70776D5F 		.ascii	"pwm_sign\000"
 14617      7369676E 
 14617      00
 14618              	.LASF227:
 14619 053b 6D6F746F 		.ascii	"motor_control_generic\000"
 14619      725F636F 
 14619      6E74726F 
 14619      6C5F6765 
 14619      6E657269 
 14620              	.LASF349:
 14621 0551 675F696D 		.ascii	"g_imu\000"
 14621      7500
 14622              	.LASF312:
 14623 0557 66696C74 		.ascii	"filt_vel\000"
 14623      5F76656C 
 14623      00
 14624              	.LASF96:
 14625 0560 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14625      72617465 
 14625      5F6C696D 
 14625      69746572 
 14625      00
 14626              	.LASF76:
 14627 0571 6B5F645F 		.ascii	"k_d_c\000"
 14627      6300
 14628              	.LASF172:
 14629 0577 6164635F 		.ascii	"adc_status\000"
 14629      73746174 
 14629      757300
 14630              	.LASF101:
 14631 0582 6D5F6D75 		.ascii	"m_mult\000"
 14631      6C7400
 14632              	.LASF75:
 14633 0589 6B5F695F 		.ascii	"k_i_c\000"
 14633      6300
 14634              	.LASF225:
 14635 058f 6D6F746F 		.ascii	"motor_dir\000"
 14635      725F6469 
 14635      7200
 14636              	.LASF275:
 14637 0599 62696E5F 		.ascii	"bin_st\000"
 14637      737400
 14638              	.LASF179:
 14639 05a0 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14639      52533438 
 14639      355F5258 
 14639      5F457849 
 14639      6E746572 
 14640              	.LASF88:
 14641 05b9 706F735F 		.ascii	"pos_lim_sup\000"
 14641      6C696D5F 
 14641      73757000 
 14642              	.LASF159:
 14643 05c5 6F6C645F 		.ascii	"old_value\000"
 14643      76616C75 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 317


 14643      6500
 14644              	.LASF109:
 14645 05cf 656D675F 		.ascii	"emg_speed\000"
 14645      73706565 
 14645      6400
 14646              	.LASF128:
 14647 05d9 72657374 		.ascii	"rest_vel\000"
 14647      5F76656C 
 14647      00
 14648              	.LASF166:
 14649 05e2 4E4F524D 		.ascii	"NORMAL\000"
 14649      414C00
 14650              	.LASF213:
 14651 05e9 6D6F746F 		.ascii	"motor_control_SH\000"
 14651      725F636F 
 14651      6E74726F 
 14651      6C5F5348 
 14651      00
 14652              	.LASF347:
 14653 05fa 7046696C 		.ascii	"pFile\000"
 14653      6500
 14654              	.LASF220:
 14655 0600 706F735F 		.ascii	"pos_error_sum\000"
 14655      6572726F 
 14655      725F7375 
 14655      6D00
 14656              	.LASF120:
 14657 060e 4144435F 		.ascii	"ADC_conf\000"
 14657      636F6E66 
 14657      00
 14658              	.LASF321:
 14659 0617 6465765F 		.ascii	"dev_tension_f\000"
 14659      74656E73 
 14659      696F6E5F 
 14659      6600
 14660              	.LASF78:
 14661 0625 6B5F695F 		.ascii	"k_i_dl\000"
 14661      646C00
 14662              	.LASF50:
 14663 062c 62756666 		.ascii	"buffer\000"
 14663      657200
 14664              	.LASF80:
 14665 0633 6B5F705F 		.ascii	"k_p_c_dl\000"
 14665      635F646C 
 14665      00
 14666              	.LASF187:
 14667 063c 72785F64 		.ascii	"rx_data_type\000"
 14667      6174615F 
 14667      74797065 
 14667      00
 14668              	.LASF350:
 14669 0649 675F696D 		.ascii	"g_imuNew\000"
 14669      754E6577 
 14669      00
 14670              	.LASF164:
 14671 0652 73706565 		.ascii	"speed\000"
 14671      6400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 318


 14672              	.LASF226:
 14673 0658 706F7369 		.ascii	"position_counter\000"
 14673      74696F6E 
 14673      5F636F75 
 14673      6E746572 
 14673      00
 14674              	.LASF284:
 14675 0669 74696D65 		.ascii	"timer_value_e\000"
 14675      725F7661 
 14675      6C75655F 
 14675      6500
 14676              	.LASF182:
 14677 0677 64617461 		.ascii	"data_packet_index\000"
 14677      5F706163 
 14677      6B65745F 
 14677      696E6465 
 14677      7800
 14678              	.LASF184:
 14679 0689 64617461 		.ascii	"data_packet_buffer\000"
 14679      5F706163 
 14679      6B65745F 
 14679      62756666 
 14679      657200
 14680              	.LASF198:
 14681 069c 73745F72 		.ascii	"st_ref_p\000"
 14681      65665F70 
 14681      00
 14682              	.LASF324:
 14683 06a5 6379636C 		.ascii	"cycles_status\000"
 14683      65735F73 
 14683      74617475 
 14683      7300
 14684              	.LASF189:
 14685 06b3 636F756E 		.ascii	"counter_calibration\000"
 14685      7465725F 
 14685      63616C69 
 14685      62726174 
 14685      696F6E00 
 14686              	.LASF301:
 14687 06c7 675F6D65 		.ascii	"g_meas\000"
 14687      617300
 14688              	.LASF283:
 14689 06ce 74696D65 		.ascii	"timer_value_s\000"
 14689      725F7661 
 14689      6C75655F 
 14689      7300
 14690              	.LASF344:
 14691 06dc 456E636F 		.ascii	"Encoder_Check\000"
 14691      6465725F 
 14691      43686563 
 14691      6B00
 14692              	.LASF240:
 14693 06ea 636F6D70 		.ascii	"comp_value_encoder\000"
 14693      5F76616C 
 14693      75655F65 
 14693      6E636F64 
 14693      657200
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 319


 14694              	.LASF287:
 14695 06fd 73746172 		.ascii	"start_emg_pos\000"
 14695      745F656D 
 14695      675F706F 
 14695      7300
 14696              	.LASF341:
 14697 070b 64617461 		.ascii	"data_encoder_raw\000"
 14697      5F656E63 
 14697      6F646572 
 14697      5F726177 
 14697      00
 14698              	.LASF298:
 14699 071c 675F7265 		.ascii	"g_ref\000"
 14699      6600
 14700              	.LASF25:
 14701 0722 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14701      545F4D4F 
 14701      44455F45 
 14701      58544552 
 14701      4E414C00 
 14702              	.LASF231:
 14703 0736 696E6465 		.ascii	"index\000"
 14703      7800
 14704              	.LASF139:
 14705 073c 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14705      6D756D5F 
 14705      70726573 
 14705      73757265 
 14705      5F6B5061 
 14706              	.LASF129:
 14707 0751 72657374 		.ascii	"rest_position_flag\000"
 14707      5F706F73 
 14707      6974696F 
 14707      6E5F666C 
 14707      616700
 14708              	.LASF131:
 14709 0764 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14709      7469636B 
 14709      5F636C6F 
 14709      73757265 
 14709      5F737065 
 14710              	.LASF81:
 14711 077b 6B5F695F 		.ascii	"k_i_c_dl\000"
 14711      635F646C 
 14711      00
 14712              	.LASF188:
 14713 0784 7061636B 		.ascii	"package_count\000"
 14713      6167655F 
 14713      636F756E 
 14713      7400
 14714              	.LASF38:
 14715 0792 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14715      5F414E44 
 14715      5F504F53 
 14715      5F434F4E 
 14715      54524F4C 
 14716              	.LASF162:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 320


 14717 07a7 656E6162 		.ascii	"enabled\000"
 14717      6C656400 
 14718              	.LASF5:
 14719 07af 6C6F6E67 		.ascii	"long unsigned int\000"
 14719      20756E73 
 14719      69676E65 
 14719      6420696E 
 14719      7400
 14720              	.LASF348:
 14721 07c1 70454D47 		.ascii	"pEMGHFile\000"
 14721      4846696C 
 14721      6500
 14722              	.LASF174:
 14723 07cb 57524954 		.ascii	"WRITE_CYCLES\000"
 14723      455F4359 
 14723      434C4553 
 14723      00
 14724              	.LASF133:
 14725 07d8 6A6F7973 		.ascii	"joystick_gains\000"
 14725      7469636B 
 14725      5F676169 
 14725      6E7300
 14726              	.LASF45:
 14727 07e7 686F6C64 		.ascii	"hold_curr\000"
 14727      5F637572 
 14727      7200
 14728              	.LASF31:
 14729 07f1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14729      545F4D4F 
 14729      44455F4A 
 14729      4F595354 
 14729      49434B00 
 14730              	.LASF60:
 14731 0805 746F7461 		.ascii	"total_time_rest\000"
 14731      6C5F7469 
 14731      6D655F72 
 14731      65737400 
 14732              	.LASF83:
 14733 0815 61637469 		.ascii	"activ\000"
 14733      7600
 14734              	.LASF265:
 14735 081b 6D696E5F 		.ascii	"min_tension\000"
 14735      74656E73 
 14735      696F6E00 
 14736              	.LASF336:
 14737 0827 62617474 		.ascii	"battery_low_SoC\000"
 14737      6572795F 
 14737      6C6F775F 
 14737      536F4300 
 14738              	.LASF197:
 14739 0837 6D6F746F 		.ascii	"motor_idx\000"
 14739      725F6964 
 14739      7800
 14740              	.LASF100:
 14741 0841 6D5F6F66 		.ascii	"m_off\000"
 14741      6600
 14742              	.LASF329:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 321


 14743 0847 72657365 		.ascii	"reset_last_value_flag\000"
 14743      745F6C61 
 14743      73745F76 
 14743      616C7565 
 14743      5F666C61 
 14744              	.LASF156:
 14745 085d 71756174 		.ascii	"quat_value\000"
 14745      5F76616C 
 14745      756500
 14746              	.LASF126:
 14747 0868 72657374 		.ascii	"rest_pos\000"
 14747      5F706F73 
 14747      00
 14748              	.LASF40:
 14749 0871 63757272 		.ascii	"curr\000"
 14749      00
 14750              	.LASF175:
 14751 0876 57414954 		.ascii	"WAIT_QUERY\000"
 14751      5F515545 
 14751      525900
 14752              	.LASF93:
 14753 0881 696E7075 		.ascii	"input_mode\000"
 14753      745F6D6F 
 14753      646500
 14754              	.LASF36:
 14755 088c 434F4E54 		.ascii	"CONTROL_PWM\000"
 14755      524F4C5F 
 14755      50574D00 
 14756              	.LASF266:
 14757 0898 6379636C 		.ascii	"cycles_counter_update\000"
 14757      65735F63 
 14757      6F756E74 
 14757      65725F75 
 14757      70646174 
 14758              	.LASF352:
 14759 08ae 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14759      43313120 
 14759      352E342E 
 14759      31203230 
 14759      31363036 
 14760 08e1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14760      20726576 
 14760      6973696F 
 14760      6E203233 
 14760      37373135 
 14761 0914 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14761      66756E63 
 14761      74696F6E 
 14761      2D736563 
 14761      74696F6E 
 14762              	.LASF42:
 14763 093c 73745F72 		.ascii	"st_ref\000"
 14763      656600
 14764              	.LASF316:
 14765 0943 74696D65 		.ascii	"timer_value0\000"
 14765      725F7661 
 14765      6C756530 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 322


 14765      00
 14766              	.LASF125:
 14767 0950 73745F53 		.ascii	"st_SH_spec\000"
 14767      485F7370 
 14767      656300
 14768              	.LASF246:
 14769 095b 765F7661 		.ascii	"v_value\000"
 14769      6C756500 
 14770              	.LASF308:
 14771 0963 63616C69 		.ascii	"calib\000"
 14771      6200
 14772              	.LASF137:
 14773 0969 73745F46 		.ascii	"st_FB_spec\000"
 14773      425F7370 
 14773      656300
 14774              	.LASF6:
 14775 0974 6C6F6E67 		.ascii	"long long int\000"
 14775      206C6F6E 
 14775      6720696E 
 14775      7400
 14776              	.LASF34:
 14777 0982 53485F63 		.ascii	"SH_control_mode\000"
 14777      6F6E7472 
 14777      6F6C5F6D 
 14777      6F646500 
 14778              	.LASF193:
 14779 0992 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14779      4E445F4D 
 14779      4F544F52 
 14779      5F494458 
 14779      00
 14780              	.LASF337:
 14781 09a3 6368616E 		.ascii	"change_ext_ref_flag\000"
 14781      67655F65 
 14781      78745F72 
 14781      65665F66 
 14781      6C616700 
 14782              	.LASF19:
 14783 09b7 646F7562 		.ascii	"double\000"
 14783      6C6500
 14784              	.LASF310:
 14785 09be 66696C74 		.ascii	"filt_curr_diff\000"
 14785      5F637572 
 14785      725F6469 
 14785      666600
 14786              	.LASF209:
 14787 09cd 706F735F 		.ascii	"pos_sum\000"
 14787      73756D00 
 14788              	.LASF212:
 14789 09d5 696E7465 		.ascii	"interrupt_manager\000"
 14789      72727570 
 14789      745F6D61 
 14789      6E616765 
 14789      7200
 14790              	.LASF99:
 14791 09e7 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14791      7261775F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 323


 14791      72656164 
 14791      5F636F6E 
 14791      6600
 14792              	.LASF210:
 14793 09f9 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14793      7574655F 
 14793      536F6674 
 14793      48616E64 
 14793      5F325F6D 
 14794              	.LASF165:
 14795 0a21 72657065 		.ascii	"repetitions\000"
 14795      74697469 
 14795      6F6E7300 
 14796              	.LASF89:
 14797 0a2d 6D61785F 		.ascii	"max_step_neg\000"
 14797      73746570 
 14797      5F6E6567 
 14797      00
 14798              	.LASF245:
 14799 0a3a 636F756E 		.ascii	"count_startup_motor\000"
 14799      745F7374 
 14799      61727475 
 14799      705F6D6F 
 14799      746F7200 
 14800              	.LASF136:
 14801 0a4e 736C6176 		.ascii	"slave_ID\000"
 14801      655F4944 
 14801      00
 14802              	.LASF170:
 14803 0a57 57414954 		.ascii	"WAIT\000"
 14803      00
 14804              	.LASF18:
 14805 0a5c 666C6F61 		.ascii	"float\000"
 14805      7400
 14806              	.LASF115:
 14807 0a62 494D555F 		.ascii	"IMU_conf\000"
 14807      636F6E66 
 14807      00
 14808              	.LASF259:
 14809 0a6b 636F756E 		.ascii	"count\000"
 14809      7400
 14810              	.LASF46:
 14811 0a71 73745F61 		.ascii	"st_adc_meas\000"
 14811      64635F6D 
 14811      65617300 
 14812              	.LASF269:
 14813 0a7d 656D675F 		.ascii	"emg_excess_status\000"
 14813      65786365 
 14813      73735F73 
 14813      74617475 
 14813      7300
 14814              	.LASF295:
 14815 0a8f 6D5F6164 		.ascii	"m_addr\000"
 14815      647200
 14816              	.LASF307:
 14817 0a96 635F6D65 		.ascii	"c_mem\000"
 14817      6D00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 324


 14818              	.LASF8:
 14819 0a9c 756E7369 		.ascii	"unsigned int\000"
 14819      676E6564 
 14819      20696E74 
 14819      00
 14820              	.LASF274:
 14821 0aa9 6D61785F 		.ascii	"max_pos\000"
 14821      706F7300 
 14822              	.LASF346:
 14823 0ab1 72657374 		.ascii	"rest_pos_curr_ref\000"
 14823      5F706F73 
 14823      5F637572 
 14823      725F7265 
 14823      6600
 14824              	.LASF146:
 14825 0ac3 666C6167 		.ascii	"flag\000"
 14825      00
 14826              	.LASF94:
 14827 0ac8 636F6E74 		.ascii	"control_mode\000"
 14827      726F6C5F 
 14827      6D6F6465 
 14827      00
 14828              	.LASF21:
 14829 0ad5 63797374 		.ascii	"cystatus\000"
 14829      61747573 
 14829      00
 14830              	.LASF26:
 14831 0ade 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14831      545F4D4F 
 14831      44455F45 
 14831      4E434F44 
 14831      45523300 
 14832              	.LASF112:
 14833 0af2 73745F69 		.ascii	"st_imu\000"
 14833      6D7500
 14834              	.LASF204:
 14835 0af9 63757272 		.ascii	"current_emg\000"
 14835      656E745F 
 14835      656D6700 
 14836              	.LASF185:
 14837 0b05 72785F71 		.ascii	"rx_queue\000"
 14837      75657565 
 14837      00
 14838              	.LASF255:
 14839 0b0e 55445F6D 		.ascii	"UD_mean_value\000"
 14839      65616E5F 
 14839      76616C75 
 14839      6500
 14840              	.LASF230:
 14841 0b1c 6173736F 		.ascii	"assoc_motor\000"
 14841      635F6D6F 
 14841      746F7200 
 14842              	.LASF47:
 14843 0b28 6164645F 		.ascii	"add_emg\000"
 14843      656D6700 
 14844              	.LASF217:
 14845 0b30 695F7265 		.ascii	"i_ref\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 325


 14845      6600
 14846              	.LASF107:
 14847 0b36 656D675F 		.ascii	"emg_threshold\000"
 14847      74687265 
 14847      73686F6C 
 14847      6400
 14848              	.LASF288:
 14849 0b44 73617665 		.ascii	"save_cycles_eeprom\000"
 14849      5F637963 
 14849      6C65735F 
 14849      65657072 
 14849      6F6D00
 14850              	.LASF56:
 14851 0b57 63757272 		.ascii	"current_hist\000"
 14851      656E745F 
 14851      68697374 
 14851      00
 14852              	.LASF37:
 14853 0b64 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14853      524F4C5F 
 14853      43555252 
 14853      454E5400 
 14854              	.LASF23:
 14855 0b74 6C6F6E67 		.ascii	"long double\000"
 14855      20646F75 
 14855      626C6500 
 14856              	.LASF168:
 14857 0b80 44495343 		.ascii	"DISCARD\000"
 14857      41524400 
 14858              	.LASF222:
 14859 0b88 70726576 		.ascii	"prev_pos_err\000"
 14859      5F706F73 
 14859      5F657272 
 14859      00
 14860              	.LASF238:
 14861 0b95 696E6974 		.ascii	"init_rot\000"
 14861      5F726F74 
 14861      00
 14862              	.LASF263:
 14863 0b9e 6D6F745F 		.ascii	"mot_idx\000"
 14863      69647800 
 14864              	.LASF311:
 14865 0ba6 66696C74 		.ascii	"filt_i\000"
 14865      5F6900
 14866              	.LASF104:
 14867 0bad 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14867      725F6861 
 14867      6E646C65 
 14867      5F726174 
 14867      696F00
 14868              	.LASF309:
 14869 0bc0 66696C74 		.ascii	"filt_v\000"
 14869      5F7600
 14870              	.LASF334:
 14871 0bc7 72657374 		.ascii	"rest_enabled\000"
 14871      5F656E61 
 14871      626C6564 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 326


 14871      00
 14872              	.LASF300:
 14873 0bd4 675F7265 		.ascii	"g_refOld\000"
 14873      664F6C64 
 14873      00
 14874              	.LASF215:
 14875 0bdd 706F735F 		.ascii	"pos_error\000"
 14875      6572726F 
 14875      7200
 14876              	.LASF154:
 14877 0be7 6779726F 		.ascii	"gyro_value\000"
 14877      5F76616C 
 14877      756500
 14878              	.LASF117:
 14879 0bf2 63757272 		.ascii	"curr_time\000"
 14879      5F74696D 
 14879      6500
 14880              	.LASF102:
 14881 0bfc 646F7562 		.ascii	"double_encoder_on_off\000"
 14881      6C655F65 
 14881      6E636F64 
 14881      65725F6F 
 14881      6E5F6F66 
 14882              	.LASF264:
 14883 0c12 6D61785F 		.ascii	"max_tension\000"
 14883      74656E73 
 14883      696F6E00 
 14884              	.LASF192:
 14885 0c1e 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14885      525F4944 
 14885      5800
 14886              	.LASF239:
 14887 0c28 6C617374 		.ascii	"last_value_encoder\000"
 14887      5F76616C 
 14887      75655F65 
 14887      6E636F64 
 14887      657200
 14888              	.LASF190:
 14889 0c3b 636F756E 		.ascii	"counter_tension_func\000"
 14889      7465725F 
 14889      74656E73 
 14889      696F6E5F 
 14889      66756E63 
 14890              	.LASF317:
 14891 0c50 6379636C 		.ascii	"cycle_time\000"
 14891      655F7469 
 14891      6D6500
 14892              	.LASF211:
 14893 0c5b 66736D5F 		.ascii	"fsm_state\000"
 14893      73746174 
 14893      6500
 14894              	.LASF7:
 14895 0c65 6C6F6E67 		.ascii	"long long unsigned int\000"
 14895      206C6F6E 
 14895      6720756E 
 14895      7369676E 
 14895      65642069 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 327


 14896              	.LASF323:
 14897 0c7c 64657465 		.ascii	"detect_power_cycle\000"
 14897      63745F70 
 14897      6F776572 
 14897      5F637963 
 14897      6C6500
 14898              	.LASF327:
 14899 0c8f 6A6F795F 		.ascii	"joy_UD_status\000"
 14899      55445F73 
 14899      74617475 
 14899      7300
 14900              	.LASF51:
 14901 0c9d 6C656E67 		.ascii	"length\000"
 14901      746800
 14902              	.LASF151:
 14903 0ca4 73745F69 		.ascii	"st_imu_data\000"
 14903      6D755F64 
 14903      61746100 
 14904              	.LASF155:
 14905 0cb0 6D61675F 		.ascii	"mag_value\000"
 14905      76616C75 
 14905      6500
 14906              	.LASF41:
 14907 0cba 6F6E6F66 		.ascii	"onoff\000"
 14907      6600
 14908              	.LASF234:
 14909 0cc0 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14909      76616C75 
 14909      655F656E 
 14909      636F6465 
 14909      725F3332 
 14910              	.LASF223:
 14911 0cd5 70726576 		.ascii	"prev_curr_err\000"
 14911      5F637572 
 14911      725F6572 
 14911      7200
 14912              	.LASF183:
 14913 0ce3 64617461 		.ascii	"data_packet_length\000"
 14913      5F706163 
 14913      6B65745F 
 14913      6C656E67 
 14913      746800
 14914              	.LASF74:
 14915 0cf6 6B5F705F 		.ascii	"k_p_c\000"
 14915      6300
 14916              	.LASF318:
 14917 0cfc 6465765F 		.ascii	"dev_tension\000"
 14917      74656E73 
 14917      696F6E00 
 14918              	.LASF85:
 14919 0d08 6D6F746F 		.ascii	"motor_driver_type\000"
 14919      725F6472 
 14919      69766572 
 14919      5F747970 
 14919      6500
 14920              	.LASF171:
 14921 0d1a 57414954 		.ascii	"WAIT_EoC\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 328


 14921      5F456F43 
 14921      00
 14922              	.LASF22:
 14923 0d23 72656738 		.ascii	"reg8\000"
 14923      00
 14924              	.LASF277:
 14925 0d28 62696E5F 		.ascii	"bin_1\000"
 14925      3100
 14926              	.LASF278:
 14927 0d2e 62696E5F 		.ascii	"bin_2\000"
 14927      3200
 14928              	.LASF250:
 14929 0d34 695F6175 		.ascii	"i_aux\000"
 14929      7800
 14930              	.LASF140:
 14931 0d3a 70726F70 		.ascii	"prop_err_fb_gain\000"
 14931      5F657272 
 14931      5F66625F 
 14931      6761696E 
 14931      00
 14932              	.LASF208:
 14933 0d4b 706F735F 		.ascii	"pos_diff\000"
 14933      64696666 
 14933      00
 14934              	.LASF290:
 14935 0d54 726F775F 		.ascii	"row_number\000"
 14935      6E756D62 
 14935      657200
 14936              	.LASF261:
 14937 0d5f 6F766572 		.ascii	"overcurrent_control\000"
 14937      63757272 
 14937      656E745F 
 14937      636F6E74 
 14937      726F6C00 
 14938              	.LASF279:
 14939 0d73 63757272 		.ascii	"curr_pos\000"
 14939      5F706F73 
 14939      00
 14940              	.LASF167:
 14941 0d7c 52455345 		.ascii	"RESET\000"
 14941      5400
 14942              	.LASF135:
 14943 0d82 736C6176 		.ascii	"slave_comm_active\000"
 14943      655F636F 
 14943      6D6D5F61 
 14943      63746976 
 14943      6500
 14944              	.LASF249:
 14945 0d94 616E616C 		.ascii	"analog_read_end\000"
 14945      6F675F72 
 14945      6561645F 
 14945      656E6400 
 14946              	.LASF342:
 14947 0da4 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 14947      636F6465 
 14947      725F4C69 
 14947      6E655F43 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 329


 14947      6F6E6E65 
 14948              	.LASF72:
 14949 0dbd 6465765F 		.ascii	"dev_type\000"
 14949      74797065 
 14949      00
 14950              	.LASF268:
 14951 0dc6 656D675F 		.ascii	"emg_cycle_status\000"
 14951      6379636C 
 14951      655F7374 
 14951      61747573 
 14951      00
 14952              	.LASF122:
 14953 0dd7 73745F75 		.ascii	"st_user\000"
 14953      73657200 
 14954              	.LASF105:
 14955 0ddf 67656172 		.ascii	"gears_params\000"
 14955      735F7061 
 14955      72616D73 
 14955      00
 14956              	.LASF116:
 14957 0dec 73745F65 		.ascii	"st_expansion\000"
 14957      7870616E 
 14957      73696F6E 
 14957      00
 14958              	.LASF110:
 14959 0df9 656D675F 		.ascii	"emg_calibration_flag\000"
 14959      63616C69 
 14959      62726174 
 14959      696F6E5F 
 14959      666C6167 
 14960              	.LASF43:
 14961 0e0e 73745F6D 		.ascii	"st_meas\000"
 14961      65617300 
 14962              	.LASF292:
 14963 0e16 61646472 		.ascii	"addr_start\000"
 14963      5F737461 
 14963      727400
 14964              	.LASF296:
 14965 0e21 70776D5F 		.ascii	"pwm_preload_values\000"
 14965      7072656C 
 14965      6F61645F 
 14965      76616C75 
 14965      657300
 14966              	.LASF132:
 14967 0e34 6A6F7973 		.ascii	"joystick_threshold\000"
 14967      7469636B 
 14967      5F746872 
 14967      6573686F 
 14967      6C6400
 14968              	.LASF32:
 14969 0e47 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 14969      545F4D4F 
 14969      44455F45 
 14969      4D475F50 
 14969      524F504F 
 14970              	.LASF178:
 14971 0e66 636F756E 		.ascii	"counter_status\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 330


 14971      7465725F 
 14971      73746174 
 14971      757300
 14972              	.LASF306:
 14973 0e75 675F6D65 		.ascii	"g_mem\000"
 14973      6D00
 14974              	.LASF251:
 14975 0e7b 656D675F 		.ascii	"emg_counter_1\000"
 14975      636F756E 
 14975      7465725F 
 14975      3100
 14976              	.LASF252:
 14977 0e89 656D675F 		.ascii	"emg_counter_2\000"
 14977      636F756E 
 14977      7465725F 
 14977      3200
 14978              	.LASF242:
 14979 0e97 6F6E6C79 		.ascii	"only_first_time\000"
 14979      5F666972 
 14979      73745F74 
 14979      696D6500 
 14980              	.LASF11:
 14981 0ea7 75696E74 		.ascii	"uint8\000"
 14981      3800
 14982              	.LASF130:
 14983 0ead 73745F4A 		.ascii	"st_JOY_spec\000"
 14983      4F595F73 
 14983      70656300 
 14984              	.LASF237:
 14985 0eb9 76616C75 		.ascii	"value_diff\000"
 14985      655F6469 
 14985      666600
 14986              	.LASF281:
 14987 0ec4 63757272 		.ascii	"curr_ref\000"
 14987      5F726566 
 14987      00
 14988              	.LASF2:
 14989 0ecd 73686F72 		.ascii	"short int\000"
 14989      7420696E 
 14989      7400
 14990              	.LASF79:
 14991 0ed7 6B5F645F 		.ascii	"k_d_dl\000"
 14991      646C00
 14992              	.LASF235:
 14993 0ede 76616C75 		.ascii	"value_encoder\000"
 14993      655F656E 
 14993      636F6465 
 14993      7200
 14994              	.LASF48:
 14995 0eec 6A6F7973 		.ascii	"joystick\000"
 14995      7469636B 
 14995      00
 14996              	.LASF148:
 14997 0ef5 6D6F746F 		.ascii	"motor\000"
 14997      7200
 14998              	.LASF320:
 14999 0efb 6465765F 		.ascii	"dev_pwm_sat\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 331


 14999      70776D5F 
 14999      73617400 
 15000              	.LASF65:
 15001 0f07 68775F6D 		.ascii	"hw_maint_date\000"
 15001      61696E74 
 15001      5F646174 
 15001      6500
 15002              	.LASF195:
 15003 0f15 66756E63 		.ascii	"function_scheduler\000"
 15003      74696F6E 
 15003      5F736368 
 15003      6564756C 
 15003      657200
 15004              	.LASF196:
 15005 0f28 636F6D70 		.ascii	"compute_reference\000"
 15005      7574655F 
 15005      72656665 
 15005      72656E63 
 15005      6500
 15006              	.LASF224:
 15007 0f3a 70726576 		.ascii	"prev_pwm\000"
 15007      5F70776D 
 15007      00
 15008              	.LASF66:
 15009 0f43 73746174 		.ascii	"stats_period_begin_date\000"
 15009      735F7065 
 15009      72696F64 
 15009      5F626567 
 15009      696E5F64 
 15010              	.LASF286:
 15011 0f5b 74696D65 		.ascii	"timer_exc_e\000"
 15011      725F6578 
 15011      635F6500 
 15012              	.LASF297:
 15013 0f67 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15013      52784275 
 15013      66666572 
 15013      00
 15014              	.LASF322:
 15015 0f74 706F775F 		.ascii	"pow_tension\000"
 15015      74656E73 
 15015      696F6E00 
 15016              	.LASF285:
 15017 0f80 74696D65 		.ascii	"timer_exc_s\000"
 15017      725F6578 
 15017      635F7300 
 15018              	.LASF15:
 15019 0f8c 696E7431 		.ascii	"int16\000"
 15019      3600
 15020              	.LASF118:
 15021 0f92 72656164 		.ascii	"read_exp_port_flag\000"
 15021      5F657870 
 15021      5F706F72 
 15021      745F666C 
 15021      616700
 15022              	.LASF272:
 15023 0fa5 6578635F 		.ascii	"exc_act_thr\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 332


 15023      6163745F 
 15023      74687200 
 15024              	.LASF84:
 15025 0fb1 61637469 		.ascii	"activate_pwm_rescaling\000"
 15025      76617465 
 15025      5F70776D 
 15025      5F726573 
 15025      63616C69 
 15026              	.LASF77:
 15027 0fc8 6B5F705F 		.ascii	"k_p_dl\000"
 15027      646C00
 15028              	.LASF44:
 15029 0fcf 65737469 		.ascii	"estim_curr\000"
 15029      6D5F6375 
 15029      727200
 15030              	.LASF319:
 15031 0fda 6465765F 		.ascii	"dev_pwm_limit\000"
 15031      70776D5F 
 15031      6C696D69 
 15031      7400
 15032              	.LASF289:
 15033 0fe8 73746174 		.ascii	"status\000"
 15033      757300
 15034              	.LASF216:
 15035 0fef 63757272 		.ascii	"curr_error\000"
 15035      5F657272 
 15035      6F7200
 15036              	.LASF343:
 15037 0ffa 456E636F 		.ascii	"Encoder_Value\000"
 15037      6465725F 
 15037      56616C75 
 15037      6500
 15038              	.LASF71:
 15039 1008 75736572 		.ascii	"user_id\000"
 15039      5F696400 
 15040              	.LASF270:
 15041 1010 72657374 		.ascii	"rest_cycle_status\000"
 15041      5F637963 
 15041      6C655F73 
 15041      74617475 
 15041      7300
 15042              	.LASF206:
 15043 1022 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15043      7574655F 
 15043      536F6674 
 15043      48616E64 
 15043      5F325F6D 
 15044              	.LASF233:
 15045 104f 746D705F 		.ascii	"tmp_value_encoder\000"
 15045      76616C75 
 15045      655F656E 
 15045      636F6465 
 15045      7200
 15046              	.LASF180:
 15047 1061 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15047      4359434C 
 15047      45535F48 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 333


 15047      616E646C 
 15047      657200
 15048              	.LASF70:
 15049 1074 62617564 		.ascii	"baud_rate\000"
 15049      5F726174 
 15049      6500
 15050              	.LASF143:
 15051 107e 66617374 		.ascii	"fast_act_threshold\000"
 15051      5F616374 
 15051      5F746872 
 15051      6573686F 
 15051      6C6400
 15052              	.LASF114:
 15053 1091 5350495F 		.ascii	"SPI_read_delay\000"
 15053      72656164 
 15053      5F64656C 
 15053      617900
 15054              	.LASF3:
 15055 10a0 73686F72 		.ascii	"short unsigned int\000"
 15055      7420756E 
 15055      7369676E 
 15055      65642069 
 15055      6E7400
 15056              	.LASF98:
 15057 10b3 73745F65 		.ascii	"st_encoder\000"
 15057      6E636F64 
 15057      657200
 15058              	.LASF303:
 15059 10be 675F6164 		.ascii	"g_adc_meas\000"
 15059      635F6D65 
 15059      617300
 15060              	.LASF138:
 15061 10c9 6D61785F 		.ascii	"max_residual_current\000"
 15061      72657369 
 15061      6475616C 
 15061      5F637572 
 15061      72656E74 
 15062              	.LASF203:
 15063 10de 454E435F 		.ascii	"ENC_L\000"
 15063      4C00
 15064              	.LASF145:
 15065 10e4 73745F65 		.ascii	"st_eeprom\000"
 15065      6570726F 
 15065      6D00
 15066              	.LASF328:
 15067 10ee 6A6F795F 		.ascii	"joy_LR_status\000"
 15067      4C525F73 
 15067      74617475 
 15067      7300
 15068              	.LASF353:
 15069 10fc 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15069      72635C69 
 15069      6E746572 
 15069      72757074 
 15069      696F6E73 
 15070              	.LASF199:
 15071 1113 73745F72 		.ascii	"st_refOld_p\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 334


 15071      65664F6C 
 15071      645F7000 
 15072              	.LASF16:
 15073 111f 696E7433 		.ascii	"int32\000"
 15073      3200
 15074              	.LASF339:
 15075 1125 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15075      4F465F41 
 15075      4E414C4F 
 15075      475F494E 
 15075      50555453 
 15076              	.LASF73:
 15077 113a 73745F6D 		.ascii	"st_motor\000"
 15077      6F746F72 
 15077      00
 15078              	.LASF351:
 15079 1143 6D617374 		.ascii	"master_mode\000"
 15079      65725F6D 
 15079      6F646500 
 15080              	.LASF39:
 15081 114f 46535F46 		.ascii	"FS_FILE\000"
 15081      494C4500 
 15082              	.LASF86:
 15083 1157 706F735F 		.ascii	"pos_lim_flag\000"
 15083      6C696D5F 
 15083      666C6167 
 15083      00
 15084              	.LASF256:
 15085 1164 4C525F6D 		.ascii	"LR_mean_value\000"
 15085      65616E5F 
 15085      76616C75 
 15085      6500
 15086              	.LASF302:
 15087 1172 675F6D65 		.ascii	"g_measOld\000"
 15087      61734F6C 
 15087      6400
 15088              	.LASF294:
 15089 117c 726F775F 		.ascii	"row_end\000"
 15089      656E6400 
 15090              	.LASF35:
 15091 1184 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15091      524F4C5F 
 15091      414E474C 
 15091      4500
 15092              	.LASF9:
 15093 1192 5F5F696E 		.ascii	"__int32_t\000"
 15093      7433325F 
 15093      7400
 15094              	.LASF58:
 15095 119c 77697265 		.ascii	"wire_disp\000"
 15095      5F646973 
 15095      7000
 15096              	.LASF333:
 15097 11a6 63616E5F 		.ascii	"can_write\000"
 15097      77726974 
 15097      6500
 15098              	.LASF354:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 335


 15099 11b0 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GitHub\\SoftHandPRO-a"
 15099      73657273 
 15099      5C4D6174 
 15099      7469615C 
 15099      446F6375 
 15100 11de 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\SoftHand_Pro.cydsn\000"
 15100      656E6572 
 15100      69632D46 
 15100      572D5053 
 15100      6F43355C 
 15101              	.LASF108:
 15102 1205 656D675F 		.ascii	"emg_max_value\000"
 15102      6D61785F 
 15102      76616C75 
 15102      6500
 15103              	.LASF92:
 15104 1213 63757272 		.ascii	"current_limit\000"
 15104      656E745F 
 15104      6C696D69 
 15104      7400
 15105              	.LASF33:
 15106 1221 53485F69 		.ascii	"SH_input_mode\000"
 15106      6E707574 
 15106      5F6D6F64 
 15106      6500
 15107              	.LASF177:
 15108 122f 4E4F4E45 		.ascii	"NONE\000"
 15108      00
 15109              	.LASF142:
 15110 1234 61637469 		.ascii	"activation_mode\000"
 15110      76617469 
 15110      6F6E5F6D 
 15110      6F646500 
 15111              	.LASF12:
 15112 1244 75696E74 		.ascii	"uint16\000"
 15112      313600
 15113              	.LASF127:
 15114 124b 72657374 		.ascii	"rest_delay\000"
 15114      5F64656C 
 15114      617900
 15115              	.LASF158:
 15116 1256 73745F66 		.ascii	"st_filter\000"
 15116      696C7465 
 15116      7200
 15117              	.LASF247:
 15118 1260 76765F76 		.ascii	"vv_value\000"
 15118      616C7565 
 15118      00
 15119              	.LASF82:
 15120 1269 6B5F645F 		.ascii	"k_d_c_dl\000"
 15120      635F646C 
 15120      00
 15121              	.LASF163:
 15122 1272 64697265 		.ascii	"direction\000"
 15122      6374696F 
 15122      6E00
 15123              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\ccIGZg7Y.s 			page 336


