ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10410
 458 01dc 04000000 		.word	rx_queue.10414
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10412
 461 01e8 08000000 		.word	data_packet_index.10411
 462 01ec 0C000000 		.word	data_packet_buffer.10413
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fdiv
 469              		.section	.text.function_scheduler,"ax",%progbits
 470              		.align	2
 471              		.global	function_scheduler
 472              		.thumb
 473              		.thumb_func
 474              		.type	function_scheduler, %function
 475              	function_scheduler:
 476              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 14


 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 1000 Hz
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 477              		.loc 1 268 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 2504
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 B0B5     		push	{r4, r5, r7, lr}
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 ADF6C81D 		subw	sp, sp, #2504
 488              		.cfi_def_cfa_offset 2520
 489 0006 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 491              		.loc 1 272 0
 492 0008 3B46     		mov	r3, r7
 493 000a 0022     		movs	r2, #0
 494 000c 1A60     		str	r2, [r3]
 495 000e 0433     		adds	r3, r3, #4
 496 0010 4FF41C62 		mov	r2, #2496
 497 0014 0021     		movs	r1, #0
 498 0016 1846     		mov	r0, r3
 499 0018 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 500              		.loc 1 274 0
 501 001c 0023     		movs	r3, #0
 502 001e 87F8C639 		strb	r3, [r7, #2502]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 503              		.loc 1 275 0
 504 0022 0123     		movs	r3, #1
 505 0024 87F8C539 		strb	r3, [r7, #2501]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 506              		.loc 1 277 0
 507 0028 0020     		movs	r0, #0
 508 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 509              		.loc 1 278 0
 510 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 511 0032 0346     		mov	r3, r0
 512 0034 1A46     		mov	r2, r3
 513 0036 A64B     		ldr	r3, .L78
 514 0038 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 15


 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 515              		.loc 1 282 0
 516 003a 0120     		movs	r0, #1
 517 003c FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 518              		.loc 1 286 0
 519 0040 A44B     		ldr	r3, .L78+4
 520 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0044 002B     		cmp	r3, #0
 522 0046 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 523              		.loc 1 287 0
 524 0048 A24B     		ldr	r3, .L78+4
 525 004a 0022     		movs	r2, #0
 526 004c 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 527              		.loc 1 288 0
 528 004e FFF7FEFF 		bl	interrupt_manager
 529              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 530              		.loc 1 291 0
 531 0052 A14B     		ldr	r3, .L78+8
 532 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 533 0058 032B     		cmp	r3, #3
 534 005a 00F2AC81 		bhi	.L35
 535 005e 01A2     		adr	r2, .L37
 536 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 537              		.p2align 2
 538              	.L37:
 539 0064 75000000 		.word	.L36+1
 540 0068 35010000 		.word	.L38+1
 541 006c A9020000 		.word	.L39+1
 542 0070 A9020000 		.word	.L39+1
 543              		.p2align 1
 544              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 545              		.loc 1 297 0
 546 0074 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 547 0078 9749     		ldr	r1, .L78+8
 548 007a 1346     		mov	r3, r2
 549 007c DB00     		lsls	r3, r3, #3
 550 007e 9B1A     		subs	r3, r3, r2
 551 0080 1B01     		lsls	r3, r3, #4
 552 0082 0B44     		add	r3, r3, r1
 553 0084 03F58873 		add	r3, r3, #272
 554 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 16


 555 008a 1A46     		mov	r2, r3
 556 008c 934B     		ldr	r3, .L78+12
 557 008e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 558 0090 002B     		cmp	r3, #0
 559 0092 25D0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 560              		.loc 1 299 0
 561 0094 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 562 0098 8F49     		ldr	r1, .L78+8
 563 009a 1346     		mov	r3, r2
 564 009c DB00     		lsls	r3, r3, #3
 565 009e 9B1A     		subs	r3, r3, r2
 566 00a0 1B01     		lsls	r3, r3, #4
 567 00a2 0B44     		add	r3, r3, r1
 568 00a4 03F58873 		add	r3, r3, #272
 569 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 570 00aa 1846     		mov	r0, r3
 571 00ac FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 572              		.loc 1 301 0
 573 00b0 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 574 00b4 8849     		ldr	r1, .L78+8
 575 00b6 1346     		mov	r3, r2
 576 00b8 DB00     		lsls	r3, r3, #3
 577 00ba 9B1A     		subs	r3, r3, r2
 578 00bc 1B01     		lsls	r3, r3, #4
 579 00be 0B44     		add	r3, r3, r1
 580 00c0 03F58873 		add	r3, r3, #272
 581 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 00c6 0021     		movs	r1, #0
 583 00c8 1846     		mov	r0, r3
 584 00ca FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 585              		.loc 1 305 0
 586 00ce 814B     		ldr	r3, .L78+4
 587 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 00d2 002B     		cmp	r3, #0
 589 00d4 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 590              		.loc 1 306 0
 591 00d6 7F4B     		ldr	r3, .L78+4
 592 00d8 0022     		movs	r2, #0
 593 00da 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 594              		.loc 1 307 0
 595 00dc FFF7FEFF 		bl	interrupt_manager
 596              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 17


 313:..\src/interruptions.c ****             motor_control_SH();
 597              		.loc 1 313 0
 598 00e0 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 599              		.loc 1 316 0
 600 00e4 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 601 00e8 7B49     		ldr	r1, .L78+8
 602 00ea 1346     		mov	r3, r2
 603 00ec DB00     		lsls	r3, r3, #3
 604 00ee 9B1A     		subs	r3, r3, r2
 605 00f0 1B01     		lsls	r3, r3, #4
 606 00f2 0B44     		add	r3, r3, r1
 607 00f4 03F58973 		add	r3, r3, #274
 608 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 609 00fa 012B     		cmp	r3, #1
 610 00fc 0FD1     		bne	.L41
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 611              		.loc 1 317 0
 612 00fe 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 613 0102 7549     		ldr	r1, .L78+8
 614 0104 1346     		mov	r3, r2
 615 0106 DB00     		lsls	r3, r3, #3
 616 0108 9B1A     		subs	r3, r3, r2
 617 010a 1B01     		lsls	r3, r3, #4
 618 010c 0B44     		add	r3, r3, r1
 619 010e 03F58773 		add	r3, r3, #270
 620 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621 0114 002B     		cmp	r3, #0
 622 0116 02D1     		bne	.L41
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 623              		.loc 1 318 0
 624 0118 714B     		ldr	r3, .L78+16
 625 011a 0022     		movs	r2, #0
 626 011c 1A70     		strb	r2, [r3]
 627              	.L41:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 628              		.loc 1 324 0
 629 011e 6D4B     		ldr	r3, .L78+4
 630 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 631 0122 002B     		cmp	r3, #0
 632 0124 00F03A81 		beq	.L75
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 633              		.loc 1 325 0
 634 0128 6A4B     		ldr	r3, .L78+4
 635 012a 0022     		movs	r2, #0
 636 012c 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 637              		.loc 1 326 0
 638 012e FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 18


 328:..\src/interruptions.c ****             break;
 639              		.loc 1 328 0
 640 0132 33E1     		b	.L75
 641              	.L38:
 642              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 643              		.loc 1 333 0
 644 0134 0023     		movs	r3, #0
 645 0136 87F8C739 		strb	r3, [r7, #2503]
 646 013a 53E0     		b	.L43
 647              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 648              		.loc 1 334 0
 649 013c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 650 0140 664A     		ldr	r2, .L78+12
 651 0142 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 652 0144 002B     		cmp	r3, #0
 653 0146 48D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 654              		.loc 1 336 0
 655 0148 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 656 014c 1846     		mov	r0, r3
 657 014e FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 658              		.loc 1 338 0
 659 0152 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 660 0156 6049     		ldr	r1, .L78+8
 661 0158 1346     		mov	r3, r2
 662 015a DB00     		lsls	r3, r3, #3
 663 015c 9B1A     		subs	r3, r3, r2
 664 015e 1B01     		lsls	r3, r3, #4
 665 0160 0B44     		add	r3, r3, r1
 666 0162 03F58873 		add	r3, r3, #272
 667 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 668 0168 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 669 016c 9A42     		cmp	r2, r3
 670 016e 08D1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 671              		.loc 1 340 0
 672 0170 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 673 0174 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 674 0178 1146     		mov	r1, r2
 675 017a 1846     		mov	r0, r3
 676 017c FFF7FEFF 		bl	encoder_reading_SPI
 677 0180 22E0     		b	.L46
 678              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 679              		.loc 1 343 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 19


 680 0182 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 681 0186 5449     		ldr	r1, .L78+8
 682 0188 1346     		mov	r3, r2
 683 018a DB00     		lsls	r3, r3, #3
 684 018c 9B1A     		subs	r3, r3, r2
 685 018e 1B01     		lsls	r3, r3, #4
 686 0190 0B44     		add	r3, r3, r1
 687 0192 03F58873 		add	r3, r3, #272
 688 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 689 0198 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 690 019c 9A42     		cmp	r2, r3
 691 019e 08D1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 692              		.loc 1 345 0
 693 01a0 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 694 01a4 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 695 01a8 1146     		mov	r1, r2
 696 01aa 1846     		mov	r0, r3
 697 01ac FFF7FEFF 		bl	encoder_reading_SPI
 698 01b0 0AE0     		b	.L46
 699              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 700              		.loc 1 349 0
 701 01b2 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 702 01b6 494A     		ldr	r2, .L78+12
 703 01b8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 704 01ba 1A46     		mov	r2, r3
 705 01bc 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 706 01c0 1946     		mov	r1, r3
 707 01c2 1046     		mov	r0, r2
 708 01c4 FFF7FEFF 		bl	ReadEncoderLine
 709              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 710              		.loc 1 356 0
 711 01c8 424B     		ldr	r3, .L78+4
 712 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 713 01cc 002B     		cmp	r3, #0
 714 01ce 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 715              		.loc 1 357 0
 716 01d0 404B     		ldr	r3, .L78+4
 717 01d2 0022     		movs	r2, #0
 718 01d4 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 719              		.loc 1 358 0
 720 01d6 FFF7FEFF 		bl	interrupt_manager
 721              	.L44:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 20


 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 722              		.loc 1 333 0 discriminator 2
 723 01da 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 724 01de 0133     		adds	r3, r3, #1
 725 01e0 87F8C739 		strb	r3, [r7, #2503]
 726              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 727              		.loc 1 333 0 is_stmt 0 discriminator 1
 728 01e4 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 729 01e8 012B     		cmp	r3, #1
 730 01ea A7D9     		bls	.L48
 731              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 732              		.loc 1 366 0 is_stmt 1
 733 01ec 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 734 01f0 1846     		mov	r0, r3
 735 01f2 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 736              		.loc 1 369 0
 737 01f6 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 738 01fa 3749     		ldr	r1, .L78+8
 739 01fc 1346     		mov	r3, r2
 740 01fe DB00     		lsls	r3, r3, #3
 741 0200 9B1A     		subs	r3, r3, r2
 742 0202 1B01     		lsls	r3, r3, #4
 743 0204 0B44     		add	r3, r3, r1
 744 0206 03F58973 		add	r3, r3, #274
 745 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 746 020c 012B     		cmp	r3, #1
 747 020e 0FD1     		bne	.L49
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 748              		.loc 1 370 0
 749 0210 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 750 0214 3049     		ldr	r1, .L78+8
 751 0216 1346     		mov	r3, r2
 752 0218 DB00     		lsls	r3, r3, #3
 753 021a 9B1A     		subs	r3, r3, r2
 754 021c 1B01     		lsls	r3, r3, #4
 755 021e 0B44     		add	r3, r3, r1
 756 0220 03F58773 		add	r3, r3, #270
 757 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 758 0226 002B     		cmp	r3, #0
 759 0228 02D1     		bne	.L49
 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 760              		.loc 1 371 0
 761 022a 2D4B     		ldr	r3, .L78+16
 762 022c 0022     		movs	r2, #0
 763 022e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 21


 764              	.L49:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****             if (interrupt_flag){
 765              		.loc 1 377 0
 766 0230 284B     		ldr	r3, .L78+4
 767 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 768 0234 002B     		cmp	r3, #0
 769 0236 04D0     		beq	.L50
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 770              		.loc 1 378 0
 771 0238 264B     		ldr	r3, .L78+4
 772 023a 0022     		movs	r2, #0
 773 023c 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 774              		.loc 1 379 0
 775 023e FFF7FEFF 		bl	interrupt_manager
 776              	.L50:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 777              		.loc 1 383 0
 778 0242 254B     		ldr	r3, .L78+8
 779 0244 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 780 0248 012B     		cmp	r3, #1
 781 024a 40F0A980 		bne	.L76
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 782              		.loc 1 384 0
 783 024e 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 784 0252 1846     		mov	r0, r3
 785 0254 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 786              		.loc 1 387 0
 787 0258 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 788 025c 1E49     		ldr	r1, .L78+8
 789 025e 1346     		mov	r3, r2
 790 0260 DB00     		lsls	r3, r3, #3
 791 0262 9B1A     		subs	r3, r3, r2
 792 0264 1B01     		lsls	r3, r3, #4
 793 0266 0B44     		add	r3, r3, r1
 794 0268 03F58973 		add	r3, r3, #274
 795 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 026e 012B     		cmp	r3, #1
 797 0270 0FD1     		bne	.L52
 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 798              		.loc 1 388 0
 799 0272 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 800 0276 1849     		ldr	r1, .L78+8
 801 0278 1346     		mov	r3, r2
 802 027a DB00     		lsls	r3, r3, #3
 803 027c 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 22


 804 027e 1B01     		lsls	r3, r3, #4
 805 0280 0B44     		add	r3, r3, r1
 806 0282 03F58773 		add	r3, r3, #270
 807 0286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 808 0288 002B     		cmp	r3, #0
 809 028a 02D1     		bne	.L52
 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 810              		.loc 1 389 0
 811 028c 144B     		ldr	r3, .L78+16
 812 028e 0022     		movs	r2, #0
 813 0290 1A70     		strb	r2, [r3]
 814              	.L52:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 815              		.loc 1 395 0
 816 0292 104B     		ldr	r3, .L78+4
 817 0294 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 818 0296 002B     		cmp	r3, #0
 819 0298 00F08280 		beq	.L76
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 820              		.loc 1 396 0
 821 029c 0D4B     		ldr	r3, .L78+4
 822 029e 0022     		movs	r2, #0
 823 02a0 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 824              		.loc 1 397 0
 825 02a2 FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 826              		.loc 1 400 0
 827 02a6 7BE0     		b	.L76
 828              	.L39:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 403:..\src/interruptions.c ****             
 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 829              		.loc 1 405 0
 830 02a8 0E4B     		ldr	r3, .L78+20
 831 02aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 832 02ac 002B     		cmp	r3, #0
 833 02ae 3BD0     		beq	.L53
 834              		.loc 1 405 0 is_stmt 0 discriminator 1
 835 02b0 094B     		ldr	r3, .L78+8
 836 02b2 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 837 02b6 002B     		cmp	r3, #0
 838 02b8 36D0     		beq	.L53
 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 839              		.loc 1 407 0 is_stmt 1
 840 02ba 074B     		ldr	r3, .L78+8
 841 02bc 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 23


 842 02c0 022B     		cmp	r3, #2
 843 02c2 11D1     		bne	.L54
 408:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 844              		.loc 1 408 0
 845 02c4 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 846 02c8 1846     		mov	r0, r3
 847 02ca FFF7FEFF 		bl	air_chambers_control
 848 02ce 10E0     		b	.L55
 849              	.L79:
 850              		.align	2
 851              	.L78:
 852 02d0 00000000 		.word	timer_value0
 853 02d4 00000000 		.word	interrupt_flag
 854 02d8 00000000 		.word	c_mem
 855 02dc 00000000 		.word	N_Encoder_Line_Connected
 856 02e0 00000000 		.word	change_ext_ref_flag
 857 02e4 00000000 		.word	master_mode
 858              	.L54:
 409:..\src/interruptions.c ****                 }
 410:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 411:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 859              		.loc 1 411 0
 860 02e8 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 861 02ec 1846     		mov	r0, r3
 862 02ee FFF7FEFF 		bl	otbk_act_wrist_control
 863              	.L55:
 412:..\src/interruptions.c ****                 }
 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****                 // Check Interrupt 
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****                 if (interrupt_flag){
 864              		.loc 1 416 0
 865 02f2 2C4B     		ldr	r3, .L80
 866 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 867 02f6 002B     		cmp	r3, #0
 868 02f8 04D0     		beq	.L56
 417:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 869              		.loc 1 417 0
 870 02fa 2A4B     		ldr	r3, .L80
 871 02fc 0022     		movs	r2, #0
 872 02fe 1A70     		strb	r2, [r3]
 418:..\src/interruptions.c ****                     interrupt_manager();
 873              		.loc 1 418 0
 874 0300 FFF7FEFF 		bl	interrupt_manager
 875              	.L56:
 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c ****             
 421:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 876              		.loc 1 421 0
 877 0304 284B     		ldr	r3, .L80+4
 878 0306 93F8B122 		ldrb	r2, [r3, #689]	@ zero_extendqisi2
 879 030a 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 880 030e 1146     		mov	r1, r2
 881 0310 1846     		mov	r0, r3
 882 0312 FFF7FEFF 		bl	drive_slave
 422:..\src/interruptions.c ****             
 423:..\src/interruptions.c ****                 // Check Interrupt 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 24


 424:..\src/interruptions.c **** 
 425:..\src/interruptions.c ****                 if (interrupt_flag){
 883              		.loc 1 425 0
 884 0316 234B     		ldr	r3, .L80
 885 0318 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 886 031a 002B     		cmp	r3, #0
 887 031c 04D0     		beq	.L53
 426:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 888              		.loc 1 426 0
 889 031e 214B     		ldr	r3, .L80
 890 0320 0022     		movs	r2, #0
 891 0322 1A70     		strb	r2, [r3]
 427:..\src/interruptions.c ****                     interrupt_manager();
 892              		.loc 1 427 0
 893 0324 FFF7FEFF 		bl	interrupt_manager
 894              	.L53:
 428:..\src/interruptions.c ****                 }
 429:..\src/interruptions.c ****             }
 430:..\src/interruptions.c ****             if (!master_mode){
 895              		.loc 1 430 0
 896 0328 204B     		ldr	r3, .L80+8
 897 032a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 898 032c 002B     		cmp	r3, #0
 899 032e 11D1     		bne	.L57
 431:..\src/interruptions.c ****                 
 432:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 900              		.loc 1 432 0
 901 0330 1D4B     		ldr	r3, .L80+4
 902 0332 93F8B032 		ldrb	r3, [r3, #688]	@ zero_extendqisi2
 903 0336 002B     		cmp	r3, #0
 904 0338 01D0     		beq	.L58
 433:..\src/interruptions.c ****                     // Stop feedback motors
 434:..\src/interruptions.c ****                     stop_master_device();
 905              		.loc 1 434 0
 906 033a FFF7FEFF 		bl	stop_master_device
 907              	.L58:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****                 // Disable slave or motors
 437:..\src/interruptions.c ****                 deactivate_slaves();
 908              		.loc 1 437 0
 909 033e FFF7FEFF 		bl	deactivate_slaves
 438:..\src/interruptions.c ****                         
 439:..\src/interruptions.c ****                 // Check Interrupt 
 440:..\src/interruptions.c ****                 if (interrupt_flag){
 910              		.loc 1 440 0
 911 0342 184B     		ldr	r3, .L80
 912 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 913 0346 002B     		cmp	r3, #0
 914 0348 04D0     		beq	.L57
 441:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 915              		.loc 1 441 0
 916 034a 164B     		ldr	r3, .L80
 917 034c 0022     		movs	r2, #0
 918 034e 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****                     interrupt_manager();
 919              		.loc 1 442 0
 920 0350 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 25


 921              	.L57:
 443:..\src/interruptions.c ****                 } 
 444:..\src/interruptions.c ****             }
 445:..\src/interruptions.c ****     
 446:..\src/interruptions.c ****             // Control Master device main motor 
 447:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 448:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 922              		.loc 1 448 0
 923 0354 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 924 0358 1846     		mov	r0, r3
 925 035a FFF7FEFF 		bl	motor_control_generic
 449:..\src/interruptions.c ****                         
 450:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 451:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 926              		.loc 1 451 0
 927 035e 124B     		ldr	r3, .L80+4
 928 0360 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 929 0364 032B     		cmp	r3, #3
 930 0366 0FD1     		bne	.L59
 452:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 931              		.loc 1 452 0
 932 0368 114B     		ldr	r3, .L80+12
 933 036a 9B68     		ldr	r3, [r3, #8]
 934 036c 432B     		cmp	r3, #67
 935 036e 02DD     		ble	.L60
 453:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 936              		.loc 1 453 0
 937 0370 0F4B     		ldr	r3, .L80+12
 938 0372 4322     		movs	r2, #67
 939 0374 9A60     		str	r2, [r3, #8]
 940              	.L60:
 454:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 941              		.loc 1 454 0
 942 0376 0E4B     		ldr	r3, .L80+12
 943 0378 9B68     		ldr	r3, [r3, #8]
 944 037a 13F1430F 		cmn	r3, #67
 945 037e 03DA     		bge	.L59
 455:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 946              		.loc 1 455 0
 947 0380 0B4B     		ldr	r3, .L80+12
 948 0382 6FF04202 		mvn	r2, #66
 949 0386 9A60     		str	r2, [r3, #8]
 950              	.L59:
 456:..\src/interruptions.c ****             }
 457:..\src/interruptions.c ****             
 458:..\src/interruptions.c ****             // Check Interrupt 
 459:..\src/interruptions.c **** 
 460:..\src/interruptions.c ****             if (interrupt_flag){
 951              		.loc 1 460 0
 952 0388 064B     		ldr	r3, .L80
 953 038a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 954 038c 002B     		cmp	r3, #0
 955 038e 11D0     		beq	.L77
 461:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 956              		.loc 1 461 0
 957 0390 044B     		ldr	r3, .L80
 958 0392 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 26


 959 0394 1A70     		strb	r2, [r3]
 462:..\src/interruptions.c ****                 interrupt_manager();
 960              		.loc 1 462 0
 961 0396 FFF7FEFF 		bl	interrupt_manager
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             break;
 962              		.loc 1 465 0
 963 039a 0BE0     		b	.L77
 964              	.L75:
 328:..\src/interruptions.c ****             
 965              		.loc 1 328 0
 966 039c 00BF     		nop
 967 039e 0AE0     		b	.L35
 968              	.L76:
 400:..\src/interruptions.c ****             
 969              		.loc 1 400 0
 970 03a0 00BF     		nop
 971 03a2 08E0     		b	.L35
 972              	.L81:
 973              		.align	2
 974              	.L80:
 975 03a4 00000000 		.word	interrupt_flag
 976 03a8 00000000 		.word	c_mem
 977 03ac 00000000 		.word	master_mode
 978 03b0 00000000 		.word	g_refNew
 979              	.L77:
 980              		.loc 1 465 0
 981 03b4 00BF     		nop
 982              	.L35:
 466:..\src/interruptions.c ****     }
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     analog_read_end();
 983              		.loc 1 470 0
 984 03b6 FFF7FEFF 		bl	analog_read_end
 471:..\src/interruptions.c **** 
 472:..\src/interruptions.c ****     if (interrupt_flag){
 985              		.loc 1 472 0
 986 03ba 844B     		ldr	r3, .L82
 987 03bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 03be 002B     		cmp	r3, #0
 989 03c0 04D0     		beq	.L62
 473:..\src/interruptions.c ****         interrupt_flag = FALSE;
 990              		.loc 1 473 0
 991 03c2 824B     		ldr	r3, .L82
 992 03c4 0022     		movs	r2, #0
 993 03c6 1A70     		strb	r2, [r3]
 474:..\src/interruptions.c ****         interrupt_manager();
 994              		.loc 1 474 0
 995 03c8 FFF7FEFF 		bl	interrupt_manager
 996              	.L62:
 475:..\src/interruptions.c ****     }
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 478:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 27


 479:..\src/interruptions.c ****     overcurrent_control();
 997              		.loc 1 479 0
 998 03cc FFF7FEFF 		bl	overcurrent_control
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     // Check Interrupt 
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     if (interrupt_flag){
 999              		.loc 1 483 0
 1000 03d0 7E4B     		ldr	r3, .L82
 1001 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1002 03d4 002B     		cmp	r3, #0
 1003 03d6 04D0     		beq	.L63
 484:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1004              		.loc 1 484 0
 1005 03d8 7C4B     		ldr	r3, .L82
 1006 03da 0022     		movs	r2, #0
 1007 03dc 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****         interrupt_manager();
 1008              		.loc 1 485 0
 1009 03de FFF7FEFF 		bl	interrupt_manager
 1010              	.L63:
 486:..\src/interruptions.c ****     }
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     //---------------------------------- Calibration 
 489:..\src/interruptions.c **** 
 490:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 491:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1011              		.loc 1 491 0
 1012 03e2 7B4B     		ldr	r3, .L82+4
 1013 03e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 03e6 012B     		cmp	r3, #1
 1015 03e8 0ED1     		bne	.L64
 492:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1016              		.loc 1 492 0
 1017 03ea 7A4B     		ldr	r3, .L82+8
 1018 03ec 1B88     		ldrh	r3, [r3]
 1019 03ee 0A2B     		cmp	r3, #10
 1020 03f0 04D1     		bne	.L65
 493:..\src/interruptions.c ****             calibration();
 1021              		.loc 1 493 0
 1022 03f2 FFF7FEFF 		bl	calibration
 494:..\src/interruptions.c ****             counter_calibration = 0;
 1023              		.loc 1 494 0
 1024 03f6 774B     		ldr	r3, .L82+8
 1025 03f8 0022     		movs	r2, #0
 1026 03fa 1A80     		strh	r2, [r3]	@ movhi
 1027              	.L65:
 495:..\src/interruptions.c ****         }
 496:..\src/interruptions.c ****         counter_calibration++;
 1028              		.loc 1 496 0
 1029 03fc 754B     		ldr	r3, .L82+8
 1030 03fe 1B88     		ldrh	r3, [r3]
 1031 0400 0133     		adds	r3, r3, #1
 1032 0402 9AB2     		uxth	r2, r3
 1033 0404 734B     		ldr	r3, .L82+8
 1034 0406 1A80     		strh	r2, [r3]	@ movhi
 1035              	.L64:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 28


 497:..\src/interruptions.c ****     }
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****     // Check Interrupt 
 500:..\src/interruptions.c ****     
 501:..\src/interruptions.c ****     if (interrupt_flag){
 1036              		.loc 1 501 0
 1037 0408 704B     		ldr	r3, .L82
 1038 040a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 040c 002B     		cmp	r3, #0
 1040 040e 04D0     		beq	.L66
 502:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1041              		.loc 1 502 0
 1042 0410 6E4B     		ldr	r3, .L82
 1043 0412 0022     		movs	r2, #0
 1044 0414 1A70     		strb	r2, [r3]
 503:..\src/interruptions.c ****         interrupt_manager();
 1045              		.loc 1 503 0
 1046 0416 FFF7FEFF 		bl	interrupt_manager
 1047              	.L66:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1048              		.loc 1 506 0
 1049 041a 6F4B     		ldr	r3, .L82+12
 1050 041c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1051 0420 002B     		cmp	r3, #0
 1052 0422 1CD1     		bne	.L67
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****         //---------------------------------- Rest position check
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 511:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1053              		.loc 1 511 0
 1054 0424 6C4B     		ldr	r3, .L82+12
 1055 0426 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1056 042a 012B     		cmp	r3, #1
 1057 042c 17D1     		bne	.L67
 512:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1058              		.loc 1 512 0
 1059 042e 694B     		ldr	r3, .L82+8
 1060 0430 1B88     		ldrh	r3, [r3]
 1061 0432 0A2B     		cmp	r3, #10
 1062 0434 04D1     		bne	.L68
 513:..\src/interruptions.c ****                     check_rest_position();
 1063              		.loc 1 513 0
 1064 0436 FFF7FEFF 		bl	check_rest_position
 514:..\src/interruptions.c ****                     counter_calibration = 0;
 1065              		.loc 1 514 0
 1066 043a 664B     		ldr	r3, .L82+8
 1067 043c 0022     		movs	r2, #0
 1068 043e 1A80     		strh	r2, [r3]	@ movhi
 1069              	.L68:
 515:..\src/interruptions.c ****             }
 516:..\src/interruptions.c ****             counter_calibration++;
 1070              		.loc 1 516 0
 1071 0440 644B     		ldr	r3, .L82+8
 1072 0442 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 29


 1073 0444 0133     		adds	r3, r3, #1
 1074 0446 9AB2     		uxth	r2, r3
 1075 0448 624B     		ldr	r3, .L82+8
 1076 044a 1A80     		strh	r2, [r3]	@ movhi
 517:..\src/interruptions.c **** 
 518:..\src/interruptions.c ****             // Check Interrupt     
 519:..\src/interruptions.c ****             if (interrupt_flag){
 1077              		.loc 1 519 0
 1078 044c 5F4B     		ldr	r3, .L82
 1079 044e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1080 0450 002B     		cmp	r3, #0
 1081 0452 04D0     		beq	.L67
 520:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1082              		.loc 1 520 0
 1083 0454 5D4B     		ldr	r3, .L82
 1084 0456 0022     		movs	r2, #0
 1085 0458 1A70     		strb	r2, [r3]
 521:..\src/interruptions.c ****                 interrupt_manager();
 1086              		.loc 1 521 0
 1087 045a FFF7FEFF 		bl	interrupt_manager
 1088              	.L67:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****         }
 524:..\src/interruptions.c ****         
 525:..\src/interruptions.c ****     }
 526:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****     cycles_counter_update();
 1089              		.loc 1 528 0
 1090 045e FFF7FEFF 		bl	cycles_counter_update
 529:..\src/interruptions.c **** 
 530:..\src/interruptions.c ****     // Check Cycles Interrupt 
 531:..\src/interruptions.c ****     
 532:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1091              		.loc 1 532 0
 1092 0462 5E4B     		ldr	r3, .L82+16
 1093 0464 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1094 0466 002B     		cmp	r3, #0
 1095 0468 25D0     		beq	.L69
 533:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1096              		.loc 1 533 0
 1097 046a 5C4B     		ldr	r3, .L82+16
 1098 046c 0022     		movs	r2, #0
 1099 046e 1A70     		strb	r2, [r3]
 534:..\src/interruptions.c **** 
 535:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 536:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 537:..\src/interruptions.c ****         if(can_write) {
 1100              		.loc 1 537 0
 1101 0470 5B4B     		ldr	r3, .L82+20
 1102 0472 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1103 0474 002B     		cmp	r3, #0
 1104 0476 1ED0     		beq	.L69
 538:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1105              		.loc 1 538 0
 1106 0478 5A4B     		ldr	r3, .L82+24
 1107 047a 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 30


 1108 047c 1A70     		strb	r2, [r3]
 539:..\src/interruptions.c ****             
 540:..\src/interruptions.c ****             //Update time variable
 541:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1109              		.loc 1 541 0
 1110 047e 5A4B     		ldr	r3, .L82+28
 1111 0480 9B6D     		ldr	r3, [r3, #88]
 1112 0482 7833     		adds	r3, r3, #120
 1113 0484 584A     		ldr	r2, .L82+28
 1114 0486 9365     		str	r3, [r2, #88]
 542:..\src/interruptions.c ****             
 543:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1115              		.loc 1 543 0
 1116 0488 534B     		ldr	r3, .L82+12
 1117 048a 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1118 048e 012B     		cmp	r3, #1
 1119 0490 11D1     		bne	.L69
 544:..\src/interruptions.c ****                 
 545:..\src/interruptions.c ****                 store_RTC_current_time();
 1120              		.loc 1 545 0
 1121 0492 FFF7FEFF 		bl	store_RTC_current_time
 546:..\src/interruptions.c ****                 
 547:..\src/interruptions.c ****                 //Write in SD card
 548:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1122              		.loc 1 548 0
 1123 0496 3B46     		mov	r3, r7
 1124 0498 1846     		mov	r0, r3
 1125 049a FFF7FEFF 		bl	prepare_SD_info
 549:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1126              		.loc 1 549 0
 1127 049e 534B     		ldr	r3, .L82+32
 1128 04a0 1C68     		ldr	r4, [r3]
 1129 04a2 3B46     		mov	r3, r7
 1130 04a4 1846     		mov	r0, r3
 1131 04a6 FFF7FEFF 		bl	strlen
 1132 04aa 0246     		mov	r2, r0
 1133 04ac 3B46     		mov	r3, r7
 1134 04ae 1946     		mov	r1, r3
 1135 04b0 2046     		mov	r0, r4
 1136 04b2 FFF7FEFF 		bl	FS_Write
 1137              	.L69:
 550:..\src/interruptions.c ****             }
 551:..\src/interruptions.c ****         }
 552:..\src/interruptions.c ****     }
 553:..\src/interruptions.c ****     
 554:..\src/interruptions.c ****     // Check Interrupt 
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****     if (interrupt_flag){
 1138              		.loc 1 556 0
 1139 04b6 454B     		ldr	r3, .L82
 1140 04b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1141 04ba 002B     		cmp	r3, #0
 1142 04bc 04D0     		beq	.L70
 557:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1143              		.loc 1 557 0
 1144 04be 434B     		ldr	r3, .L82
 1145 04c0 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 31


 1146 04c2 1A70     		strb	r2, [r3]
 558:..\src/interruptions.c ****         interrupt_manager();
 1147              		.loc 1 558 0
 1148 04c4 FFF7FEFF 		bl	interrupt_manager
 1149              	.L70:
 559:..\src/interruptions.c ****     }
 560:..\src/interruptions.c ****     
 561:..\src/interruptions.c ****     
 562:..\src/interruptions.c ****     //---------------------------------- Check battery
 563:..\src/interruptions.c **** 
 564:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 565:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1150              		.loc 1 565 0
 1151 04c8 494B     		ldr	r3, .L82+36
 1152 04ca 1B88     		ldrh	r3, [r3]
 1153 04cc 0A2B     		cmp	r3, #10
 1154 04ce 04D1     		bne	.L71
 566:..\src/interruptions.c ****         battery_management();   
 1155              		.loc 1 566 0
 1156 04d0 FFF7FEFF 		bl	battery_management
 567:..\src/interruptions.c ****         counter_tension_func = 0;
 1157              		.loc 1 567 0
 1158 04d4 464B     		ldr	r3, .L82+36
 1159 04d6 0022     		movs	r2, #0
 1160 04d8 1A80     		strh	r2, [r3]	@ movhi
 1161              	.L71:
 568:..\src/interruptions.c ****     }
 569:..\src/interruptions.c ****     counter_tension_func++;
 1162              		.loc 1 569 0
 1163 04da 454B     		ldr	r3, .L82+36
 1164 04dc 1B88     		ldrh	r3, [r3]
 1165 04de 0133     		adds	r3, r3, #1
 1166 04e0 9AB2     		uxth	r2, r3
 1167 04e2 434B     		ldr	r3, .L82+36
 1168 04e4 1A80     		strh	r2, [r3]	@ movhi
 570:..\src/interruptions.c **** 
 571:..\src/interruptions.c ****     // Check Interrupt 
 572:..\src/interruptions.c ****     
 573:..\src/interruptions.c ****     if (interrupt_flag){
 1169              		.loc 1 573 0
 1170 04e6 394B     		ldr	r3, .L82
 1171 04e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1172 04ea 002B     		cmp	r3, #0
 1173 04ec 04D0     		beq	.L72
 574:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1174              		.loc 1 574 0
 1175 04ee 374B     		ldr	r3, .L82
 1176 04f0 0022     		movs	r2, #0
 1177 04f2 1A70     		strb	r2, [r3]
 575:..\src/interruptions.c ****         interrupt_manager();
 1178              		.loc 1 575 0
 1179 04f4 FFF7FEFF 		bl	interrupt_manager
 1180              	.L72:
 576:..\src/interruptions.c ****     }
 577:..\src/interruptions.c ****    
 578:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 579:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 32


 1181              		.loc 1 579 0
 1182 04f8 374B     		ldr	r3, .L82+12
 1183 04fa 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1184 04fe 002B     		cmp	r3, #0
 1185 0500 0AD0     		beq	.L73
 580:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1186              		.loc 1 580 0
 1187 0502 FFF7FEFF 		bl	ReadAllIMUs
 581:..\src/interruptions.c ****         
 582:..\src/interruptions.c ****         if (interrupt_flag){
 1188              		.loc 1 582 0
 1189 0506 314B     		ldr	r3, .L82
 1190 0508 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1191 050a 002B     		cmp	r3, #0
 1192 050c 04D0     		beq	.L73
 583:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1193              		.loc 1 583 0
 1194 050e 2F4B     		ldr	r3, .L82
 1195 0510 0022     		movs	r2, #0
 1196 0512 1A70     		strb	r2, [r3]
 584:..\src/interruptions.c ****             interrupt_manager();
 1197              		.loc 1 584 0
 1198 0514 FFF7FEFF 		bl	interrupt_manager
 1199              	.L73:
 585:..\src/interruptions.c ****         }
 586:..\src/interruptions.c ****     }
 587:..\src/interruptions.c ****    
 588:..\src/interruptions.c ****     //---------------------------------- Update States
 589:..\src/interruptions.c ****     
 590:..\src/interruptions.c ****     // Load k-1 state
 591:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1200              		.loc 1 591 0
 1201 0518 364A     		ldr	r2, .L82+40
 1202 051a 374B     		ldr	r3, .L82+44
 1203 051c 1446     		mov	r4, r2
 1204 051e 1D46     		mov	r5, r3
 1205 0520 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1206 0522 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1207 0524 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1208 0526 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1209 0528 95E80300 		ldmia	r5, {r0, r1}
 1210 052c 84E80300 		stmia	r4, {r0, r1}
 592:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1211              		.loc 1 592 0
 1212 0530 324A     		ldr	r2, .L82+48
 1213 0532 334B     		ldr	r3, .L82+52
 1214 0534 1046     		mov	r0, r2
 1215 0536 1946     		mov	r1, r3
 1216 0538 6823     		movs	r3, #104
 1217 053a 1A46     		mov	r2, r3
 1218 053c FFF7FEFF 		bl	memcpy
 593:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1219              		.loc 1 593 0
 1220 0540 304A     		ldr	r2, .L82+56
 1221 0542 314B     		ldr	r3, .L82+60
 1222 0544 1446     		mov	r4, r2
 1223 0546 1D46     		mov	r5, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 33


 1224 0548 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1225 054a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1226 054c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1227 0550 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 594:..\src/interruptions.c **** 
 595:..\src/interruptions.c ****     // Load k+1 state        
 596:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1228              		.loc 1 596 0
 1229 0554 2C4A     		ldr	r2, .L82+60
 1230 0556 2D4B     		ldr	r3, .L82+64
 1231 0558 1446     		mov	r4, r2
 1232 055a 1D46     		mov	r5, r3
 1233 055c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1234 055e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1235 0560 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1236 0564 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 597:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1237              		.loc 1 597 0
 1238 0568 294A     		ldr	r2, .L82+68
 1239 056a 2A4B     		ldr	r3, .L82+72
 1240 056c 1046     		mov	r0, r2
 1241 056e 1946     		mov	r1, r3
 1242 0570 C823     		movs	r3, #200
 1243 0572 1A46     		mov	r2, r3
 1244 0574 FFF7FEFF 		bl	memcpy
 598:..\src/interruptions.c ****                 
 599:..\src/interruptions.c ****     if (interrupt_flag){
 1245              		.loc 1 599 0
 1246 0578 144B     		ldr	r3, .L82
 1247 057a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1248 057c 002B     		cmp	r3, #0
 1249 057e 04D0     		beq	.L74
 600:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1250              		.loc 1 600 0
 1251 0580 124B     		ldr	r3, .L82
 1252 0582 0022     		movs	r2, #0
 1253 0584 1A70     		strb	r2, [r3]
 601:..\src/interruptions.c ****         interrupt_manager();
 1254              		.loc 1 601 0
 1255 0586 FFF7FEFF 		bl	interrupt_manager
 1256              	.L74:
 602:..\src/interruptions.c ****     }
 603:..\src/interruptions.c **** 
 604:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1257              		.loc 1 604 0
 1258 058a FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1259 058e 0346     		mov	r3, r0
 1260 0590 1A46     		mov	r2, r3
 1261 0592 214B     		ldr	r3, .L82+76
 1262 0594 1A80     		strh	r2, [r3]	@ movhi
 605:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1263              		.loc 1 605 0
 1264 0596 214B     		ldr	r3, .L82+80
 1265 0598 1B88     		ldrh	r3, [r3]
 1266 059a 1A46     		mov	r2, r3
 1267 059c 1E4B     		ldr	r3, .L82+76
 1268 059e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 34


 1269 05a0 D31A     		subs	r3, r2, r3
 1270 05a2 1846     		mov	r0, r3
 1271 05a4 FFF7FEFF 		bl	__aeabi_i2f
 1272 05a8 0346     		mov	r3, r0
 1273 05aa 1D49     		ldr	r1, .L82+84
 1274 05ac 1846     		mov	r0, r3
 1275 05ae FFF7FEFF 		bl	__aeabi_fdiv
 1276 05b2 0346     		mov	r3, r0
 1277 05b4 1A46     		mov	r2, r3
 1278 05b6 1B4B     		ldr	r3, .L82+88
 1279 05b8 1A60     		str	r2, [r3]	@ float
 606:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1280              		.loc 1 606 0
 1281 05ba 0120     		movs	r0, #1
 1282 05bc FFF7FEFF 		bl	MY_TIMER_REG_Write
 607:..\src/interruptions.c **** 
 608:..\src/interruptions.c **** }
 1283              		.loc 1 608 0
 1284 05c0 00BF     		nop
 1285 05c2 07F6C817 		addw	r7, r7, #2504
 1286              		.cfi_def_cfa_offset 16
 1287 05c6 BD46     		mov	sp, r7
 1288              		.cfi_def_cfa_register 13
 1289              		@ sp needed
 1290 05c8 B0BD     		pop	{r4, r5, r7, pc}
 1291              	.L83:
 1292 05ca 00BF     		.align	2
 1293              	.L82:
 1294 05cc 00000000 		.word	interrupt_flag
 1295 05d0 00000000 		.word	calib
 1296 05d4 00000000 		.word	counter_calibration.10430
 1297 05d8 00000000 		.word	c_mem
 1298 05dc 00000000 		.word	cycles_interrupt_flag
 1299 05e0 00000000 		.word	can_write
 1300 05e4 00000000 		.word	cycles_status
 1301 05e8 00000000 		.word	g_mem
 1302 05ec 00000000 		.word	pFile
 1303 05f0 02000000 		.word	counter_tension_func.10431
 1304 05f4 00000000 		.word	g_adc_measOld
 1305 05f8 00000000 		.word	g_adc_meas
 1306 05fc 00000000 		.word	g_measOld
 1307 0600 00000000 		.word	g_meas
 1308 0604 00000000 		.word	g_refOld
 1309 0608 00000000 		.word	g_ref
 1310 060c 00000000 		.word	g_refNew
 1311 0610 00000000 		.word	g_imu
 1312 0614 00000000 		.word	g_imuNew
 1313 0618 00000000 		.word	timer_value
 1314 061c 00000000 		.word	timer_value0
 1315 0620 00247449 		.word	1232348160
 1316 0624 00000000 		.word	cycle_time
 1317              		.cfi_endproc
 1318              	.LFE67:
 1319              		.size	function_scheduler, .-function_scheduler
 1320              		.section	.text.compute_reference,"ax",%progbits
 1321              		.align	2
 1322              		.global	compute_reference
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 35


 1323              		.thumb
 1324              		.thumb_func
 1325              		.type	compute_reference, %function
 1326              	compute_reference:
 1327              	.LFB68:
 609:..\src/interruptions.c **** 
 610:..\src/interruptions.c **** //==============================================================================
 611:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 612:..\src/interruptions.c **** //==============================================================================
 613:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1328              		.loc 1 613 0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 40
 1331              		@ frame_needed = 1, uses_anonymous_args = 0
 1332 0000 80B5     		push	{r7, lr}
 1333              		.cfi_def_cfa_offset 8
 1334              		.cfi_offset 7, -8
 1335              		.cfi_offset 14, -4
 1336 0002 8AB0     		sub	sp, sp, #40
 1337              		.cfi_def_cfa_offset 48
 1338 0004 00AF     		add	r7, sp, #0
 1339              		.cfi_def_cfa_register 7
 1340 0006 0346     		mov	r3, r0
 1341 0008 B960     		str	r1, [r7, #8]
 1342 000a 7A60     		str	r2, [r7, #4]
 1343 000c FB73     		strb	r3, [r7, #15]
 614:..\src/interruptions.c ****     
 615:..\src/interruptions.c ****     int32 CYDATA handle_value;
 616:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 617:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1344              		.loc 1 617 0
 1345 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1346 0010 1346     		mov	r3, r2
 1347 0012 DB00     		lsls	r3, r3, #3
 1348 0014 9B1A     		subs	r3, r3, r2
 1349 0016 1B01     		lsls	r3, r3, #4
 1350 0018 B033     		adds	r3, r3, #176
 1351 001a A74A     		ldr	r2, .L146
 1352 001c 1344     		add	r3, r3, r2
 1353 001e 3B62     		str	r3, [r7, #32]
 618:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1354              		.loc 1 618 0
 1355 0020 3B6A     		ldr	r3, [r7, #32]
 1356 0022 93F86030 		ldrb	r3, [r3, #96]
 1357 0026 FB77     		strb	r3, [r7, #31]
 619:..\src/interruptions.c ****     
 620:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 621:..\src/interruptions.c ****                                                         // 1 EMG 1
 622:..\src/interruptions.c ****                                                         // 2 EMG 2
 623:..\src/interruptions.c ****                                                         // wait for both to get down
 624:..\src/interruptions.c ****     
 625:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1358              		.loc 1 625 0
 1359 0028 A44B     		ldr	r3, .L146+4
 1360 002a 1B68     		ldr	r3, [r3]
 1361 002c A24A     		ldr	r2, .L146
 1362 002e B2F8F021 		ldrh	r2, [r2, #496]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 36


 1363 0032 9B1A     		subs	r3, r3, r2
 1364 0034 BB61     		str	r3, [r7, #24]
 626:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1365              		.loc 1 626 0
 1366 0036 A14B     		ldr	r3, .L146+4
 1367 0038 5B68     		ldr	r3, [r3, #4]
 1368 003a 9F4A     		ldr	r2, .L146
 1369 003c B2F8F221 		ldrh	r2, [r2, #498]
 1370 0040 9B1A     		subs	r3, r3, r2
 1371 0042 7B61     		str	r3, [r7, #20]
 627:..\src/interruptions.c ****     
 628:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 629:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1372              		.loc 1 629 0
 1373 0044 3B6A     		ldr	r3, [r7, #32]
 1374 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1375 004a 013B     		subs	r3, r3, #1
 1376 004c 062B     		cmp	r3, #6
 1377 004e 00F24382 		bhi	.L138
 1378 0052 01A2     		adr	r2, .L87
 1379 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1380              		.p2align 2
 1381              	.L87:
 1382 0058 75000000 		.word	.L86+1
 1383 005c 21020000 		.word	.L88+1
 1384 0060 C9020000 		.word	.L89+1
 1385 0064 31030000 		.word	.L90+1
 1386 0068 F5030000 		.word	.L91+1
 1387 006c 4D010000 		.word	.L92+1
 1388 0070 5B020000 		.word	.L93+1
 1389              		.p2align 1
 1390              	.L86:
 630:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 631:..\src/interruptions.c **** 
 632:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 633:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 634:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1391              		.loc 1 634 0
 1392 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1393 0076 9049     		ldr	r1, .L146
 1394 0078 1346     		mov	r3, r2
 1395 007a 5B00     		lsls	r3, r3, #1
 1396 007c 1344     		add	r3, r3, r2
 1397 007e 1B01     		lsls	r3, r3, #4
 1398 0080 0B44     		add	r3, r3, r1
 1399 0082 03F5D873 		add	r3, r3, #432
 1400 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1401 0088 002B     		cmp	r3, #0
 1402 008a 19D0     		beq	.L94
 635:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1403              		.loc 1 635 0
 1404 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1405 008e 8C4A     		ldr	r2, .L146+8
 1406 0090 3421     		movs	r1, #52
 1407 0092 01FB03F3 		mul	r3, r1, r3
 1408 0096 1344     		add	r3, r3, r2
 1409 0098 0833     		adds	r3, r3, #8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 37


 1410 009a 1968     		ldr	r1, [r3]
 1411 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1412 009e 8648     		ldr	r0, .L146
 1413 00a0 1346     		mov	r3, r2
 1414 00a2 5B00     		lsls	r3, r3, #1
 1415 00a4 1344     		add	r3, r3, r2
 1416 00a6 1B01     		lsls	r3, r3, #4
 1417 00a8 0344     		add	r3, r3, r0
 1418 00aa 03F5DA73 		add	r3, r3, #436
 1419 00ae 93F90030 		ldrsb	r3, [r3]
 1420 00b2 03FB01F2 		mul	r2, r3, r1
 1421 00b6 3B6A     		ldr	r3, [r7, #32]
 1422 00b8 5B6B     		ldr	r3, [r3, #52]
 1423 00ba 1344     		add	r3, r3, r2
 1424 00bc 7B62     		str	r3, [r7, #36]
 1425 00be 18E0     		b	.L95
 1426              	.L94:
 636:..\src/interruptions.c ****             else
 637:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1427              		.loc 1 637 0
 1428 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1429 00c2 7F4A     		ldr	r2, .L146+8
 1430 00c4 3421     		movs	r1, #52
 1431 00c6 01FB03F3 		mul	r3, r1, r3
 1432 00ca 1344     		add	r3, r3, r2
 1433 00cc 0433     		adds	r3, r3, #4
 1434 00ce 1968     		ldr	r1, [r3]
 1435 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1436 00d2 7948     		ldr	r0, .L146
 1437 00d4 1346     		mov	r3, r2
 1438 00d6 5B00     		lsls	r3, r3, #1
 1439 00d8 1344     		add	r3, r3, r2
 1440 00da 1B01     		lsls	r3, r3, #4
 1441 00dc 0344     		add	r3, r3, r0
 1442 00de 03F5DA73 		add	r3, r3, #436
 1443 00e2 93F90030 		ldrsb	r3, [r3]
 1444 00e6 03FB01F2 		mul	r2, r3, r1
 1445 00ea 3B6A     		ldr	r3, [r7, #32]
 1446 00ec 5B6B     		ldr	r3, [r3, #52]
 1447 00ee 1344     		add	r3, r3, r2
 1448 00f0 7B62     		str	r3, [r7, #36]
 1449              	.L95:
 638:..\src/interruptions.c ****             
 639:..\src/interruptions.c **** 
 640:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 641:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1450              		.loc 1 641 0
 1451 00f2 7B68     		ldr	r3, [r7, #4]
 1452 00f4 1B68     		ldr	r3, [r3]
 1453 00f6 7A6A     		ldr	r2, [r7, #36]
 1454 00f8 D21A     		subs	r2, r2, r3
 1455 00fa 3B6A     		ldr	r3, [r7, #32]
 1456 00fc 1B6C     		ldr	r3, [r3, #64]
 1457 00fe 9A42     		cmp	r2, r3
 1458 0100 0BDD     		ble	.L96
 1459              		.loc 1 641 0 is_stmt 0 discriminator 1
 1460 0102 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 38


 1461 0104 1B6C     		ldr	r3, [r3, #64]
 1462 0106 002B     		cmp	r3, #0
 1463 0108 07D0     		beq	.L96
 642:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1464              		.loc 1 642 0 is_stmt 1
 1465 010a BB68     		ldr	r3, [r7, #8]
 1466 010c 1A68     		ldr	r2, [r3]
 1467 010e 3B6A     		ldr	r3, [r7, #32]
 1468 0110 1B6C     		ldr	r3, [r3, #64]
 1469 0112 1A44     		add	r2, r2, r3
 1470 0114 BB68     		ldr	r3, [r7, #8]
 1471 0116 1A60     		str	r2, [r3]
 1472 0118 17E0     		b	.L97
 1473              	.L96:
 643:..\src/interruptions.c ****             else {
 644:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1474              		.loc 1 644 0
 1475 011a 7B68     		ldr	r3, [r7, #4]
 1476 011c 1B68     		ldr	r3, [r3]
 1477 011e 7A6A     		ldr	r2, [r7, #36]
 1478 0120 D21A     		subs	r2, r2, r3
 1479 0122 3B6A     		ldr	r3, [r7, #32]
 1480 0124 DB6B     		ldr	r3, [r3, #60]
 1481 0126 9A42     		cmp	r2, r3
 1482 0128 0BDA     		bge	.L98
 1483              		.loc 1 644 0 is_stmt 0 discriminator 1
 1484 012a 3B6A     		ldr	r3, [r7, #32]
 1485 012c DB6B     		ldr	r3, [r3, #60]
 1486 012e 002B     		cmp	r3, #0
 1487 0130 07D0     		beq	.L98
 645:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1488              		.loc 1 645 0 is_stmt 1
 1489 0132 BB68     		ldr	r3, [r7, #8]
 1490 0134 1A68     		ldr	r2, [r3]
 1491 0136 3B6A     		ldr	r3, [r7, #32]
 1492 0138 DB6B     		ldr	r3, [r3, #60]
 1493 013a 1A44     		add	r2, r2, r3
 1494 013c BB68     		ldr	r3, [r7, #8]
 1495 013e 1A60     		str	r2, [r3]
 1496 0140 03E0     		b	.L97
 1497              	.L98:
 646:..\src/interruptions.c ****                 else
 647:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1498              		.loc 1 647 0
 1499 0142 BB68     		ldr	r3, [r7, #8]
 1500 0144 7A6A     		ldr	r2, [r7, #36]
 1501 0146 1A60     		str	r2, [r3]
 648:..\src/interruptions.c ****             }
 649:..\src/interruptions.c ****             break;
 1502              		.loc 1 649 0
 1503 0148 D1E1     		b	.L99
 1504              	.L97:
 1505 014a D0E1     		b	.L99
 1506              	.L92:
 650:..\src/interruptions.c ****         
 651:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 652:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 39


 653:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1507              		.loc 1 653 0
 1508 014c 5A4B     		ldr	r3, .L146
 1509 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1510 0152 002B     		cmp	r3, #0
 1511 0154 57D1     		bne	.L100
 654:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 655:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1512              		.loc 1 655 0
 1513 0156 7B68     		ldr	r3, [r7, #4]
 1514 0158 1A68     		ldr	r2, [r3]
 1515 015a BB68     		ldr	r3, [r7, #8]
 1516 015c 1A60     		str	r2, [r3]
 656:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 900)) {
 1517              		.loc 1 656 0
 1518 015e 574B     		ldr	r3, .L146+4
 1519 0160 1B6A     		ldr	r3, [r3, #32]
 1520 0162 B3F5617F 		cmp	r3, #900
 1521 0166 45DC     		bgt	.L101
 1522              	.LBB3:
 657:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1523              		.loc 1 657 0
 1524 0168 544B     		ldr	r3, .L146+4
 1525 016a 1B6A     		ldr	r3, [r3, #32]
 1526 016c 524A     		ldr	r2, .L146
 1527 016e B2F9E422 		ldrsh	r2, [r2, #740]
 1528 0172 9B1A     		subs	r3, r3, r2
 1529 0174 3B61     		str	r3, [r7, #16]
 658:..\src/interruptions.c **** 
 659:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1530              		.loc 1 659 0
 1531 0176 514B     		ldr	r3, .L146+4
 1532 0178 1B6A     		ldr	r3, [r3, #32]
 1533 017a 4F4A     		ldr	r2, .L146
 1534 017c B2F9E422 		ldrsh	r2, [r2, #740]
 1535 0180 9342     		cmp	r3, r2
 1536 0182 13DD     		ble	.L102
 660:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1537              		.loc 1 660 0
 1538 0184 BB68     		ldr	r3, [r7, #8]
 1539 0186 1A68     		ldr	r2, [r3]
 1540 0188 4B4B     		ldr	r3, .L146
 1541 018a B3F8E232 		ldrh	r3, [r3, #738]
 1542 018e 1946     		mov	r1, r3
 1543 0190 3B69     		ldr	r3, [r7, #16]
 1544 0192 03FB01F1 		mul	r1, r3, r1
 1545 0196 484B     		ldr	r3, .L146
 1546 0198 B3F9E432 		ldrsh	r3, [r3, #740]
 1547 019c C3F58063 		rsb	r3, r3, #1024
 1548 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1549 01a4 1A44     		add	r2, r2, r3
 1550 01a6 BB68     		ldr	r3, [r7, #8]
 1551 01a8 1A60     		str	r2, [r3]
 1552              	.LBE3:
 661:..\src/interruptions.c ****                     }
 662:..\src/interruptions.c ****                     else {
 663:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 40


 664:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 665:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 666:..\src/interruptions.c ****                         }
 667:..\src/interruptions.c ****                     }
 668:..\src/interruptions.c ****                 }
 669:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 670:..\src/interruptions.c ****                     st_ref_p->pos -= g_mem.JOY_spec.joystick_closure_speed;
 671:..\src/interruptions.c ****                 }
 672:..\src/interruptions.c ****             }
 673:..\src/interruptions.c ****             else {
 674:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 675:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 676:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 677:..\src/interruptions.c ****                 }
 678:..\src/interruptions.c ****             }
 679:..\src/interruptions.c ****             break;
 1553              		.loc 1 679 0
 1554 01aa 97E1     		b	.L139
 1555              	.L102:
 1556              	.LBB4:
 663:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1557              		.loc 1 663 0
 1558 01ac 434B     		ldr	r3, .L146+4
 1559 01ae 1B6A     		ldr	r3, [r3, #32]
 1560 01b0 414A     		ldr	r2, .L146
 1561 01b2 B2F9E422 		ldrsh	r2, [r2, #740]
 1562 01b6 1344     		add	r3, r3, r2
 1563 01b8 3B61     		str	r3, [r7, #16]
 664:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1564              		.loc 1 664 0
 1565 01ba 404B     		ldr	r3, .L146+4
 1566 01bc 1A6A     		ldr	r2, [r3, #32]
 1567 01be 3E4B     		ldr	r3, .L146
 1568 01c0 B3F9E432 		ldrsh	r3, [r3, #740]
 1569 01c4 5B42     		negs	r3, r3
 1570 01c6 9A42     		cmp	r2, r3
 1571 01c8 80F28881 		bge	.L139
 665:..\src/interruptions.c ****                         }
 1572              		.loc 1 665 0
 1573 01cc BB68     		ldr	r3, [r7, #8]
 1574 01ce 1A68     		ldr	r2, [r3]
 1575 01d0 394B     		ldr	r3, .L146
 1576 01d2 B3F8E232 		ldrh	r3, [r3, #738]
 1577 01d6 1946     		mov	r1, r3
 1578 01d8 3B69     		ldr	r3, [r7, #16]
 1579 01da 03FB01F1 		mul	r1, r3, r1
 1580 01de 364B     		ldr	r3, .L146
 1581 01e0 B3F9E432 		ldrsh	r3, [r3, #740]
 1582 01e4 C3F58063 		rsb	r3, r3, #1024
 1583 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1584 01ec 1A44     		add	r2, r2, r3
 1585 01ee BB68     		ldr	r3, [r7, #8]
 1586 01f0 1A60     		str	r2, [r3]
 1587              	.LBE4:
 1588              		.loc 1 679 0
 1589 01f2 73E1     		b	.L139
 1590              	.L101:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 41


 670:..\src/interruptions.c ****                 }
 1591              		.loc 1 670 0
 1592 01f4 BB68     		ldr	r3, [r7, #8]
 1593 01f6 1B68     		ldr	r3, [r3]
 1594 01f8 324A     		ldr	r2, .L146+12
 1595 01fa B2F8E222 		ldrh	r2, [r2, #738]
 1596 01fe 9A1A     		subs	r2, r3, r2
 1597 0200 BB68     		ldr	r3, [r7, #8]
 1598 0202 1A60     		str	r2, [r3]
 1599              		.loc 1 679 0
 1600 0204 6AE1     		b	.L139
 1601              	.L100:
 675:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1602              		.loc 1 675 0
 1603 0206 2C4B     		ldr	r3, .L146
 1604 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1605 020c 042B     		cmp	r3, #4
 1606 020e 40F06581 		bne	.L139
 676:..\src/interruptions.c ****                 }
 1607              		.loc 1 676 0
 1608 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1609 0214 7A68     		ldr	r2, [r7, #4]
 1610 0216 B968     		ldr	r1, [r7, #8]
 1611 0218 1846     		mov	r0, r3
 1612 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1613              		.loc 1 679 0
 1614 021e 5DE1     		b	.L139
 1615              	.L88:
 680:..\src/interruptions.c ****             
 681:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 682:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1616              		.loc 1 682 0
 1617 0220 BB69     		ldr	r3, [r7, #24]
 1618 0222 002B     		cmp	r3, #0
 1619 0224 15DD     		ble	.L106
 683:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1620              		.loc 1 683 0
 1621 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1622 0228 2649     		ldr	r1, .L146+12
 1623 022a 1346     		mov	r3, r2
 1624 022c DB00     		lsls	r3, r3, #3
 1625 022e 9B1A     		subs	r3, r3, r2
 1626 0230 1B01     		lsls	r3, r3, #4
 1627 0232 0B44     		add	r3, r3, r1
 1628 0234 E833     		adds	r3, r3, #232
 1629 0236 1B68     		ldr	r3, [r3]
 1630 0238 BA69     		ldr	r2, [r7, #24]
 1631 023a 02FB03F2 		mul	r2, r2, r3
 1632 023e 1E4B     		ldr	r3, .L146
 1633 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1634 0244 C3F58063 		rsb	r3, r3, #1024
 1635 0248 92FBF3F2 		sdiv	r2, r2, r3
 1636 024c BB68     		ldr	r3, [r7, #8]
 1637 024e 1A60     		str	r2, [r3]
 684:..\src/interruptions.c ****             else
 685:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 686:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 42


 1638              		.loc 1 686 0
 1639 0250 4DE1     		b	.L99
 1640              	.L106:
 685:..\src/interruptions.c ****             break;
 1641              		.loc 1 685 0
 1642 0252 BB68     		ldr	r3, [r7, #8]
 1643 0254 0022     		movs	r2, #0
 1644 0256 1A60     		str	r2, [r3]
 1645              		.loc 1 686 0
 1646 0258 49E1     		b	.L99
 1647              	.L93:
 687:..\src/interruptions.c ****         
 688:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 689:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1648              		.loc 1 689 0
 1649 025a BB69     		ldr	r3, [r7, #24]
 1650 025c 002B     		cmp	r3, #0
 1651 025e 1FDD     		ble	.L108
 690:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1652              		.loc 1 690 0
 1653 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1654 0262 1849     		ldr	r1, .L146+12
 1655 0264 1346     		mov	r3, r2
 1656 0266 DB00     		lsls	r3, r3, #3
 1657 0268 9B1A     		subs	r3, r3, r2
 1658 026a 1B01     		lsls	r3, r3, #4
 1659 026c 0B44     		add	r3, r3, r1
 1660 026e E833     		adds	r3, r3, #232
 1661 0270 1968     		ldr	r1, [r3]
 1662 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1663 0274 1348     		ldr	r0, .L146+12
 1664 0276 1346     		mov	r3, r2
 1665 0278 DB00     		lsls	r3, r3, #3
 1666 027a 9B1A     		subs	r3, r3, r2
 1667 027c 1B01     		lsls	r3, r3, #4
 1668 027e 0344     		add	r3, r3, r0
 1669 0280 E833     		adds	r3, r3, #232
 1670 0282 1B68     		ldr	r3, [r3]
 1671 0284 BA69     		ldr	r2, [r7, #24]
 1672 0286 02FB03F2 		mul	r2, r2, r3
 1673 028a 0B4B     		ldr	r3, .L146
 1674 028c B3F8F031 		ldrh	r3, [r3, #496]
 1675 0290 C3F58063 		rsb	r3, r3, #1024
 1676 0294 92FBF3F3 		sdiv	r3, r2, r3
 1677 0298 CA1A     		subs	r2, r1, r3
 1678 029a BB68     		ldr	r3, [r7, #8]
 1679 029c 1A60     		str	r2, [r3]
 691:..\src/interruptions.c ****             else
 692:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 693:..\src/interruptions.c ****             break;
 1680              		.loc 1 693 0
 1681 029e 26E1     		b	.L99
 1682              	.L108:
 692:..\src/interruptions.c ****             break;
 1683              		.loc 1 692 0
 1684 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1685 02a2 0849     		ldr	r1, .L146+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 43


 1686 02a4 1346     		mov	r3, r2
 1687 02a6 DB00     		lsls	r3, r3, #3
 1688 02a8 9B1A     		subs	r3, r3, r2
 1689 02aa 1B01     		lsls	r3, r3, #4
 1690 02ac 0B44     		add	r3, r3, r1
 1691 02ae E833     		adds	r3, r3, #232
 1692 02b0 1A68     		ldr	r2, [r3]
 1693 02b2 BB68     		ldr	r3, [r7, #8]
 1694 02b4 1A60     		str	r2, [r3]
 1695              		.loc 1 693 0
 1696 02b6 1AE1     		b	.L99
 1697              	.L147:
 1698              		.align	2
 1699              	.L146:
 1700 02b8 00000000 		.word	c_mem
 1701 02bc 00000000 		.word	g_adc_meas
 1702 02c0 00000000 		.word	g_meas
 1703 02c4 00000000 		.word	g_mem
 1704              	.L89:
 694:..\src/interruptions.c **** 
 695:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 696:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1705              		.loc 1 696 0
 1706 02c8 7B68     		ldr	r3, [r7, #4]
 1707 02ca 1A68     		ldr	r2, [r3]
 1708 02cc BB68     		ldr	r3, [r7, #8]
 1709 02ce 1A60     		str	r2, [r3]
 697:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1710              		.loc 1 697 0
 1711 02d0 BB69     		ldr	r3, [r7, #24]
 1712 02d2 002B     		cmp	r3, #0
 1713 02d4 13DD     		ble	.L110
 698:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1714              		.loc 1 698 0
 1715 02d6 7B68     		ldr	r3, [r7, #4]
 1716 02d8 1A68     		ldr	r2, [r3]
 1717 02da 814B     		ldr	r3, .L148
 1718 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1719 02e0 1946     		mov	r1, r3
 1720 02e2 BB69     		ldr	r3, [r7, #24]
 1721 02e4 03FB01F3 		mul	r3, r3, r1
 1722 02e8 5900     		lsls	r1, r3, #1
 1723 02ea 7E4B     		ldr	r3, .L148+4
 1724 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1725 02f0 C3F58063 		rsb	r3, r3, #1024
 1726 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1727 02f8 1A44     		add	r2, r2, r3
 1728 02fa BB68     		ldr	r3, [r7, #8]
 1729 02fc 1A60     		str	r2, [r3]
 1730              	.L110:
 699:..\src/interruptions.c ****             }
 700:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1731              		.loc 1 700 0
 1732 02fe 7B69     		ldr	r3, [r7, #20]
 1733 0300 002B     		cmp	r3, #0
 1734 0302 40F3F380 		ble	.L140
 701:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 44


 1735              		.loc 1 701 0
 1736 0306 7B68     		ldr	r3, [r7, #4]
 1737 0308 1A68     		ldr	r2, [r3]
 1738 030a 754B     		ldr	r3, .L148
 1739 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1740 0310 1946     		mov	r1, r3
 1741 0312 7B69     		ldr	r3, [r7, #20]
 1742 0314 03FB01F3 		mul	r3, r3, r1
 1743 0318 5900     		lsls	r1, r3, #1
 1744 031a 724B     		ldr	r3, .L148+4
 1745 031c B3F8F231 		ldrh	r3, [r3, #498]
 1746 0320 C3F58063 		rsb	r3, r3, #1024
 1747 0324 91FBF3F3 		sdiv	r3, r1, r3
 1748 0328 D21A     		subs	r2, r2, r3
 1749 032a BB68     		ldr	r3, [r7, #8]
 1750 032c 1A60     		str	r2, [r3]
 702:..\src/interruptions.c ****             }
 703:..\src/interruptions.c ****             break;
 1751              		.loc 1 703 0
 1752 032e DDE0     		b	.L140
 1753              	.L90:
 704:..\src/interruptions.c **** 
 705:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 706:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1754              		.loc 1 706 0
 1755 0330 7B68     		ldr	r3, [r7, #4]
 1756 0332 1A68     		ldr	r2, [r3]
 1757 0334 BB68     		ldr	r3, [r7, #8]
 1758 0336 1A60     		str	r2, [r3]
 707:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1759              		.loc 1 707 0
 1760 0338 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1761 033a 6B4A     		ldr	r2, .L148+8
 1762 033c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1763 033e 012B     		cmp	r3, #1
 1764 0340 1CD0     		beq	.L113
 1765 0342 022B     		cmp	r3, #2
 1766 0344 37D0     		beq	.L114
 1767 0346 002B     		cmp	r3, #0
 1768 0348 00D0     		beq	.L115
 708:..\src/interruptions.c ****                 case 0:
 709:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 710:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 711:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 712:..\src/interruptions.c ****                         break;
 713:..\src/interruptions.c ****                     }
 714:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 715:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 716:..\src/interruptions.c ****                         break;
 717:..\src/interruptions.c ****                     }
 718:..\src/interruptions.c ****                     break;
 719:..\src/interruptions.c **** 
 720:..\src/interruptions.c ****                 case 1:
 721:..\src/interruptions.c ****                     // EMG 1 is first
 722:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 723:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 724:..\src/interruptions.c ****                         break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 45


 725:..\src/interruptions.c ****                     }
 726:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 727:..\src/interruptions.c ****                     break;
 728:..\src/interruptions.c **** 
 729:..\src/interruptions.c ****                 case 2:
 730:..\src/interruptions.c ****                     // EMG 2 is first
 731:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 732:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 733:..\src/interruptions.c ****                         break;
 734:..\src/interruptions.c ****                     }
 735:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 736:..\src/interruptions.c ****                     break;
 737:..\src/interruptions.c **** 
 738:..\src/interruptions.c ****                 default:
 739:..\src/interruptions.c ****                     break;
 1769              		.loc 1 739 0
 1770 034a 52E0     		b	.L117
 1771              	.L115:
 710:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1772              		.loc 1 710 0
 1773 034c BB69     		ldr	r3, [r7, #24]
 1774 034e 002B     		cmp	r3, #0
 1775 0350 08DD     		ble	.L116
 710:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1776              		.loc 1 710 0 is_stmt 0 discriminator 1
 1777 0352 BA69     		ldr	r2, [r7, #24]
 1778 0354 7B69     		ldr	r3, [r7, #20]
 1779 0356 9A42     		cmp	r2, r3
 1780 0358 04DD     		ble	.L116
 711:..\src/interruptions.c ****                         break;
 1781              		.loc 1 711 0 is_stmt 1
 1782 035a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1783 035c 624A     		ldr	r2, .L148+8
 1784 035e 0121     		movs	r1, #1
 1785 0360 D154     		strb	r1, [r2, r3]
 712:..\src/interruptions.c ****                     }
 1786              		.loc 1 712 0
 1787 0362 46E0     		b	.L117
 1788              	.L116:
 714:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1789              		.loc 1 714 0
 1790 0364 7B69     		ldr	r3, [r7, #20]
 1791 0366 002B     		cmp	r3, #0
 1792 0368 42DD     		ble	.L141
 714:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1793              		.loc 1 714 0 is_stmt 0 discriminator 1
 1794 036a 7A69     		ldr	r2, [r7, #20]
 1795 036c BB69     		ldr	r3, [r7, #24]
 1796 036e 9A42     		cmp	r2, r3
 1797 0370 3EDD     		ble	.L141
 715:..\src/interruptions.c ****                         break;
 1798              		.loc 1 715 0 is_stmt 1
 1799 0372 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1800 0374 5C4A     		ldr	r2, .L148+8
 1801 0376 0221     		movs	r1, #2
 1802 0378 D154     		strb	r1, [r2, r3]
 716:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 46


 1803              		.loc 1 716 0
 1804 037a 3AE0     		b	.L117
 1805              	.L113:
 722:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1806              		.loc 1 722 0
 1807 037c BB69     		ldr	r3, [r7, #24]
 1808 037e 002B     		cmp	r3, #0
 1809 0380 04DA     		bge	.L119
 723:..\src/interruptions.c ****                         break;
 1810              		.loc 1 723 0
 1811 0382 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1812 0384 584A     		ldr	r2, .L148+8
 1813 0386 0021     		movs	r1, #0
 1814 0388 D154     		strb	r1, [r2, r3]
 724:..\src/interruptions.c ****                     }
 1815              		.loc 1 724 0
 1816 038a 32E0     		b	.L117
 1817              	.L119:
 726:..\src/interruptions.c ****                     break;
 1818              		.loc 1 726 0
 1819 038c 7B68     		ldr	r3, [r7, #4]
 1820 038e 1A68     		ldr	r2, [r3]
 1821 0390 534B     		ldr	r3, .L148
 1822 0392 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1823 0396 1946     		mov	r1, r3
 1824 0398 BB69     		ldr	r3, [r7, #24]
 1825 039a 03FB01F3 		mul	r3, r3, r1
 1826 039e 9900     		lsls	r1, r3, #2
 1827 03a0 504B     		ldr	r3, .L148+4
 1828 03a2 B3F8F031 		ldrh	r3, [r3, #496]
 1829 03a6 C3F58063 		rsb	r3, r3, #1024
 1830 03aa 91FBF3F3 		sdiv	r3, r1, r3
 1831 03ae 1A44     		add	r2, r2, r3
 1832 03b0 BB68     		ldr	r3, [r7, #8]
 1833 03b2 1A60     		str	r2, [r3]
 727:..\src/interruptions.c **** 
 1834              		.loc 1 727 0
 1835 03b4 1DE0     		b	.L117
 1836              	.L114:
 731:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1837              		.loc 1 731 0
 1838 03b6 7B69     		ldr	r3, [r7, #20]
 1839 03b8 002B     		cmp	r3, #0
 1840 03ba 04DA     		bge	.L120
 732:..\src/interruptions.c ****                         break;
 1841              		.loc 1 732 0
 1842 03bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1843 03be 4A4A     		ldr	r2, .L148+8
 1844 03c0 0021     		movs	r1, #0
 1845 03c2 D154     		strb	r1, [r2, r3]
 733:..\src/interruptions.c ****                     }
 1846              		.loc 1 733 0
 1847 03c4 15E0     		b	.L117
 1848              	.L120:
 735:..\src/interruptions.c ****                     break;
 1849              		.loc 1 735 0
 1850 03c6 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 47


 1851 03c8 1A68     		ldr	r2, [r3]
 1852 03ca 454B     		ldr	r3, .L148
 1853 03cc 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1854 03d0 1946     		mov	r1, r3
 1855 03d2 7B69     		ldr	r3, [r7, #20]
 1856 03d4 03FB01F3 		mul	r3, r3, r1
 1857 03d8 9900     		lsls	r1, r3, #2
 1858 03da 424B     		ldr	r3, .L148+4
 1859 03dc B3F8F231 		ldrh	r3, [r3, #498]
 1860 03e0 C3F58063 		rsb	r3, r3, #1024
 1861 03e4 91FBF3F3 		sdiv	r3, r1, r3
 1862 03e8 D21A     		subs	r2, r2, r3
 1863 03ea BB68     		ldr	r3, [r7, #8]
 1864 03ec 1A60     		str	r2, [r3]
 736:..\src/interruptions.c **** 
 1865              		.loc 1 736 0
 1866 03ee 00E0     		b	.L117
 1867              	.L141:
 718:..\src/interruptions.c **** 
 1868              		.loc 1 718 0
 1869 03f0 00BF     		nop
 1870              	.L117:
 740:..\src/interruptions.c ****             }
 741:..\src/interruptions.c ****             break;
 1871              		.loc 1 741 0 discriminator 3
 1872 03f2 7CE0     		b	.L99
 1873              	.L91:
 742:..\src/interruptions.c **** 
 743:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 744:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1874              		.loc 1 744 0
 1875 03f4 7B68     		ldr	r3, [r7, #4]
 1876 03f6 1A68     		ldr	r2, [r3]
 1877 03f8 BB68     		ldr	r3, [r7, #8]
 1878 03fa 1A60     		str	r2, [r3]
 745:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1879              		.loc 1 745 0
 1880 03fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1881 03fe 3A4A     		ldr	r2, .L148+8
 1882 0400 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1883 0402 012B     		cmp	r3, #1
 1884 0404 1CD0     		beq	.L122
 1885 0406 022B     		cmp	r3, #2
 1886 0408 3DD0     		beq	.L123
 1887 040a 002B     		cmp	r3, #0
 1888 040c 00D0     		beq	.L124
 746:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 747:..\src/interruptions.c ****                 case 0:
 748:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 749:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 750:..\src/interruptions.c ****                         break;
 751:..\src/interruptions.c ****                     }
 752:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 753:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 754:..\src/interruptions.c ****                         break;
 755:..\src/interruptions.c ****                     }
 756:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 48


 757:..\src/interruptions.c **** 
 758:..\src/interruptions.c ****                 // EMG 1 is first
 759:..\src/interruptions.c ****                 case 1:
 760:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 761:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 762:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 763:..\src/interruptions.c ****                         break;
 764:..\src/interruptions.c ****                     }
 765:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 766:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 767:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 768:..\src/interruptions.c ****                     
 769:..\src/interruptions.c ****                     break;
 770:..\src/interruptions.c **** 
 771:..\src/interruptions.c ****                 // EMG 2 is first
 772:..\src/interruptions.c ****                 case 2:
 773:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 774:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 775:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 776:..\src/interruptions.c ****                         break;
 777:..\src/interruptions.c ****                     }
 778:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 779:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 780:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 781:..\src/interruptions.c ****                     }
 782:..\src/interruptions.c ****                     break;
 783:..\src/interruptions.c **** 
 784:..\src/interruptions.c ****                 default:
 785:..\src/interruptions.c ****                     break;
 1889              		.loc 1 785 0
 1890 040e 62E0     		b	.L126
 1891              	.L124:
 748:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1892              		.loc 1 748 0
 1893 0410 BB69     		ldr	r3, [r7, #24]
 1894 0412 002B     		cmp	r3, #0
 1895 0414 08DD     		ble	.L125
 748:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1896              		.loc 1 748 0 is_stmt 0 discriminator 1
 1897 0416 BA69     		ldr	r2, [r7, #24]
 1898 0418 7B69     		ldr	r3, [r7, #20]
 1899 041a 9A42     		cmp	r2, r3
 1900 041c 04DD     		ble	.L125
 749:..\src/interruptions.c ****                         break;
 1901              		.loc 1 749 0 is_stmt 1
 1902 041e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1903 0420 314A     		ldr	r2, .L148+8
 1904 0422 0121     		movs	r1, #1
 1905 0424 D154     		strb	r1, [r2, r3]
 750:..\src/interruptions.c ****                     }
 1906              		.loc 1 750 0
 1907 0426 56E0     		b	.L126
 1908              	.L125:
 752:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1909              		.loc 1 752 0
 1910 0428 7B69     		ldr	r3, [r7, #20]
 1911 042a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 49


 1912 042c 4EDD     		ble	.L142
 752:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1913              		.loc 1 752 0 is_stmt 0 discriminator 1
 1914 042e 7A69     		ldr	r2, [r7, #20]
 1915 0430 BB69     		ldr	r3, [r7, #24]
 1916 0432 9A42     		cmp	r2, r3
 1917 0434 4ADD     		ble	.L142
 753:..\src/interruptions.c ****                         break;
 1918              		.loc 1 753 0 is_stmt 1
 1919 0436 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1920 0438 2B4A     		ldr	r2, .L148+8
 1921 043a 0221     		movs	r1, #2
 1922 043c D154     		strb	r1, [r2, r3]
 754:..\src/interruptions.c ****                     }
 1923              		.loc 1 754 0
 1924 043e 4AE0     		b	.L126
 1925              	.L122:
 761:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1926              		.loc 1 761 0
 1927 0440 BB69     		ldr	r3, [r7, #24]
 1928 0442 002B     		cmp	r3, #0
 1929 0444 07DA     		bge	.L128
 761:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1930              		.loc 1 761 0 is_stmt 0 discriminator 1
 1931 0446 7B69     		ldr	r3, [r7, #20]
 1932 0448 002B     		cmp	r3, #0
 1933 044a 04DA     		bge	.L128
 762:..\src/interruptions.c ****                         break;
 1934              		.loc 1 762 0 is_stmt 1
 1935 044c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1936 044e 264A     		ldr	r2, .L148+8
 1937 0450 0021     		movs	r1, #0
 1938 0452 D154     		strb	r1, [r2, r3]
 763:..\src/interruptions.c ****                     }
 1939              		.loc 1 763 0
 1940 0454 3FE0     		b	.L126
 1941              	.L128:
 766:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 1942              		.loc 1 766 0
 1943 0456 BB69     		ldr	r3, [r7, #24]
 1944 0458 002B     		cmp	r3, #0
 1945 045a 39DD     		ble	.L143
 767:..\src/interruptions.c ****                     
 1946              		.loc 1 767 0
 1947 045c 7B68     		ldr	r3, [r7, #4]
 1948 045e 1A68     		ldr	r2, [r3]
 1949 0460 1F4B     		ldr	r3, .L148
 1950 0462 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1951 0466 1946     		mov	r1, r3
 1952 0468 BB69     		ldr	r3, [r7, #24]
 1953 046a 03FB01F3 		mul	r3, r3, r1
 1954 046e 9900     		lsls	r1, r3, #2
 1955 0470 1C4B     		ldr	r3, .L148+4
 1956 0472 B3F8F031 		ldrh	r3, [r3, #496]
 1957 0476 C3F58063 		rsb	r3, r3, #1024
 1958 047a 91FBF3F3 		sdiv	r3, r1, r3
 1959 047e 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 50


 1960 0480 BB68     		ldr	r3, [r7, #8]
 1961 0482 1A60     		str	r2, [r3]
 769:..\src/interruptions.c **** 
 1962              		.loc 1 769 0
 1963 0484 24E0     		b	.L143
 1964              	.L123:
 774:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1965              		.loc 1 774 0
 1966 0486 BB69     		ldr	r3, [r7, #24]
 1967 0488 002B     		cmp	r3, #0
 1968 048a 07DA     		bge	.L130
 774:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1969              		.loc 1 774 0 is_stmt 0 discriminator 1
 1970 048c 7B69     		ldr	r3, [r7, #20]
 1971 048e 002B     		cmp	r3, #0
 1972 0490 04DA     		bge	.L130
 775:..\src/interruptions.c ****                         break;
 1973              		.loc 1 775 0 is_stmt 1
 1974 0492 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1975 0494 144A     		ldr	r2, .L148+8
 1976 0496 0021     		movs	r1, #0
 1977 0498 D154     		strb	r1, [r2, r3]
 776:..\src/interruptions.c ****                     }
 1978              		.loc 1 776 0
 1979 049a 1CE0     		b	.L126
 1980              	.L130:
 779:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 1981              		.loc 1 779 0
 1982 049c 7B69     		ldr	r3, [r7, #20]
 1983 049e 002B     		cmp	r3, #0
 1984 04a0 18DD     		ble	.L144
 780:..\src/interruptions.c ****                     }
 1985              		.loc 1 780 0
 1986 04a2 7B68     		ldr	r3, [r7, #4]
 1987 04a4 1A68     		ldr	r2, [r3]
 1988 04a6 0F4B     		ldr	r3, .L148+4
 1989 04a8 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1990 04ac 1946     		mov	r1, r3
 1991 04ae 7B69     		ldr	r3, [r7, #20]
 1992 04b0 03FB01F3 		mul	r3, r3, r1
 1993 04b4 9900     		lsls	r1, r3, #2
 1994 04b6 0B4B     		ldr	r3, .L148+4
 1995 04b8 B3F8F231 		ldrh	r3, [r3, #498]
 1996 04bc C3F58063 		rsb	r3, r3, #1024
 1997 04c0 91FBF3F3 		sdiv	r3, r1, r3
 1998 04c4 D21A     		subs	r2, r2, r3
 1999 04c6 BB68     		ldr	r3, [r7, #8]
 2000 04c8 1A60     		str	r2, [r3]
 782:..\src/interruptions.c **** 
 2001              		.loc 1 782 0
 2002 04ca 03E0     		b	.L144
 2003              	.L142:
 756:..\src/interruptions.c **** 
 2004              		.loc 1 756 0
 2005 04cc 00BF     		nop
 2006 04ce 0EE0     		b	.L99
 2007              	.L143:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 51


 769:..\src/interruptions.c **** 
 2008              		.loc 1 769 0
 2009 04d0 00BF     		nop
 2010 04d2 0CE0     		b	.L99
 2011              	.L144:
 782:..\src/interruptions.c **** 
 2012              		.loc 1 782 0
 2013 04d4 00BF     		nop
 2014              	.L126:
 786:..\src/interruptions.c ****             }
 787:..\src/interruptions.c ****             break;
 2015              		.loc 1 787 0 discriminator 5
 2016 04d6 0AE0     		b	.L99
 2017              	.L138:
 788:..\src/interruptions.c **** 
 789:..\src/interruptions.c ****         default:
 790:..\src/interruptions.c ****             break;
 2018              		.loc 1 790 0
 2019 04d8 00BF     		nop
 2020 04da 08E0     		b	.L99
 2021              	.L139:
 679:..\src/interruptions.c ****             
 2022              		.loc 1 679 0
 2023 04dc 00BF     		nop
 2024 04de 06E0     		b	.L99
 2025              	.L149:
 2026              		.align	2
 2027              	.L148:
 2028 04e0 00000000 		.word	g_mem
 2029 04e4 00000000 		.word	c_mem
 2030 04e8 8C000000 		.word	current_emg.10454
 2031              	.L140:
 703:..\src/interruptions.c **** 
 2032              		.loc 1 703 0
 2033 04ec 00BF     		nop
 2034              	.L99:
 791:..\src/interruptions.c ****     }
 792:..\src/interruptions.c **** 
 793:..\src/interruptions.c ****     // Position limit saturation
 794:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2035              		.loc 1 794 0
 2036 04ee 3B6A     		ldr	r3, [r7, #32]
 2037 04f0 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2038 04f4 002B     		cmp	r3, #0
 2039 04f6 13D0     		beq	.L132
 795:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2040              		.loc 1 795 0
 2041 04f8 BB68     		ldr	r3, [r7, #8]
 2042 04fa 1A68     		ldr	r2, [r3]
 2043 04fc 3B6A     		ldr	r3, [r7, #32]
 2044 04fe 5B6B     		ldr	r3, [r3, #52]
 2045 0500 9A42     		cmp	r2, r3
 2046 0502 03DA     		bge	.L133
 796:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2047              		.loc 1 796 0
 2048 0504 3B6A     		ldr	r3, [r7, #32]
 2049 0506 5A6B     		ldr	r2, [r3, #52]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 52


 2050 0508 BB68     		ldr	r3, [r7, #8]
 2051 050a 1A60     		str	r2, [r3]
 2052              	.L133:
 797:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2053              		.loc 1 797 0
 2054 050c BB68     		ldr	r3, [r7, #8]
 2055 050e 1A68     		ldr	r2, [r3]
 2056 0510 3B6A     		ldr	r3, [r7, #32]
 2057 0512 9B6B     		ldr	r3, [r3, #56]
 2058 0514 9A42     		cmp	r2, r3
 2059 0516 03DD     		ble	.L132
 798:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2060              		.loc 1 798 0
 2061 0518 3B6A     		ldr	r3, [r7, #32]
 2062 051a 9A6B     		ldr	r2, [r3, #56]
 2063 051c BB68     		ldr	r3, [r7, #8]
 2064 051e 1A60     		str	r2, [r3]
 2065              	.L132:
 799:..\src/interruptions.c ****     }
 800:..\src/interruptions.c ****     
 801:..\src/interruptions.c ****     // SAFETY
 802:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2066              		.loc 1 802 0
 2067 0520 1D4B     		ldr	r3, .L150
 2068 0522 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2069 0524 012B     		cmp	r3, #1
 2070 0526 02D1     		bne	.L134
 803:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 804:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2071              		.loc 1 804 0
 2072 0528 BB68     		ldr	r3, [r7, #8]
 2073 052a 0022     		movs	r2, #0
 2074 052c 1A60     		str	r2, [r3]
 2075              	.L134:
 805:..\src/interruptions.c ****     }      
 806:..\src/interruptions.c ****     
 807:..\src/interruptions.c ****        
 808:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2076              		.loc 1 808 0
 2077 052e 1B4B     		ldr	r3, .L150+4
 2078 0530 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2079 0534 012B     		cmp	r3, #1
 2080 0536 2AD1     		bne	.L145
 809:..\src/interruptions.c ****         if (rest_enabled == 1){
 2081              		.loc 1 809 0
 2082 0538 194B     		ldr	r3, .L150+8
 2083 053a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2084 053c 012B     		cmp	r3, #1
 2085 053e 03D1     		bne	.L136
 810:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 811:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2086              		.loc 1 811 0
 2087 0540 184B     		ldr	r3, .L150+12
 2088 0542 1A68     		ldr	r2, [r3]
 2089 0544 BB68     		ldr	r3, [r7, #8]
 2090 0546 1A60     		str	r2, [r3]
 2091              	.L136:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 53


 812:..\src/interruptions.c ****         }
 813:..\src/interruptions.c ****         
 814:..\src/interruptions.c ****         if (forced_open == 1) {
 2092              		.loc 1 814 0
 2093 0548 174B     		ldr	r3, .L150+16
 2094 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2095 054c 012B     		cmp	r3, #1
 2096 054e 1ED1     		bne	.L145
 815:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 816:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2097              		.loc 1 816 0
 2098 0550 7B69     		ldr	r3, [r7, #20]
 2099 0552 002B     		cmp	r3, #0
 2100 0554 13DD     		ble	.L137
 817:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2101              		.loc 1 817 0
 2102 0556 154B     		ldr	r3, .L150+20
 2103 0558 D3F8A022 		ldr	r2, [r3, #672]
 2104 055c 134B     		ldr	r3, .L150+20
 2105 055e D3F8A032 		ldr	r3, [r3, #672]
 2106 0562 7969     		ldr	r1, [r7, #20]
 2107 0564 01FB03F1 		mul	r1, r1, r3
 2108 0568 0C4B     		ldr	r3, .L150+4
 2109 056a B3F8F231 		ldrh	r3, [r3, #498]
 2110 056e C3F58063 		rsb	r3, r3, #1024
 2111 0572 91FBF3F3 		sdiv	r3, r1, r3
 2112 0576 D21A     		subs	r2, r2, r3
 2113 0578 BB68     		ldr	r3, [r7, #8]
 2114 057a 1A60     		str	r2, [r3]
 818:..\src/interruptions.c ****             else {
 819:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 820:..\src/interruptions.c ****                 forced_open = 0;
 821:..\src/interruptions.c ****             }
 822:..\src/interruptions.c ****         }
 823:..\src/interruptions.c ****     }
 824:..\src/interruptions.c **** }
 2115              		.loc 1 824 0
 2116 057c 07E0     		b	.L145
 2117              	.L137:
 819:..\src/interruptions.c ****                 forced_open = 0;
 2118              		.loc 1 819 0
 2119 057e 0B4B     		ldr	r3, .L150+20
 2120 0580 D3F8A022 		ldr	r2, [r3, #672]
 2121 0584 BB68     		ldr	r3, [r7, #8]
 2122 0586 1A60     		str	r2, [r3]
 820:..\src/interruptions.c ****             }
 2123              		.loc 1 820 0
 2124 0588 074B     		ldr	r3, .L150+16
 2125 058a 0022     		movs	r2, #0
 2126 058c 1A70     		strb	r2, [r3]
 2127              	.L145:
 2128              		.loc 1 824 0
 2129 058e 00BF     		nop
 2130 0590 2837     		adds	r7, r7, #40
 2131              		.cfi_def_cfa_offset 8
 2132 0592 BD46     		mov	sp, r7
 2133              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 54


 2134              		@ sp needed
 2135 0594 80BD     		pop	{r7, pc}
 2136              	.L151:
 2137 0596 00BF     		.align	2
 2138              	.L150:
 2139 0598 00000000 		.word	battery_low_SoC
 2140 059c 00000000 		.word	c_mem
 2141 05a0 00000000 		.word	rest_enabled
 2142 05a4 00000000 		.word	rest_pos_curr_ref
 2143 05a8 00000000 		.word	forced_open
 2144 05ac 00000000 		.word	g_mem
 2145              		.cfi_endproc
 2146              	.LFE68:
 2147              		.size	compute_reference, .-compute_reference
 2148              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2149              		.align	2
 2150              		.global	compute_SoftHand_2_motors_joystick_reference
 2151              		.thumb
 2152              		.thumb_func
 2153              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2154              	compute_SoftHand_2_motors_joystick_reference:
 2155              	.LFB69:
 825:..\src/interruptions.c **** 
 826:..\src/interruptions.c **** 
 827:..\src/interruptions.c **** //==============================================================================
 828:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 829:..\src/interruptions.c **** //==============================================================================
 830:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2156              		.loc 1 830 0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 16
 2159              		@ frame_needed = 1, uses_anonymous_args = 0
 2160              		@ link register save eliminated.
 2161 0000 80B4     		push	{r7}
 2162              		.cfi_def_cfa_offset 4
 2163              		.cfi_offset 7, -4
 2164 0002 85B0     		sub	sp, sp, #20
 2165              		.cfi_def_cfa_offset 24
 2166 0004 00AF     		add	r7, sp, #0
 2167              		.cfi_def_cfa_register 7
 2168 0006 0346     		mov	r3, r0
 2169 0008 B960     		str	r1, [r7, #8]
 2170 000a 7A60     		str	r2, [r7, #4]
 2171 000c FB73     		strb	r3, [r7, #15]
 831:..\src/interruptions.c ****     
 832:..\src/interruptions.c ****                 
 833:..\src/interruptions.c ****             // Operates as handle input with single motor devices
 834:..\src/interruptions.c ****             /*
 835:..\src/interruptions.c ****                     case INPUT_MODE_JOYSTICK:
 836:..\src/interruptions.c **** 
 837:..\src/interruptions.c ****             err_joy_1 = 0;
 838:..\src/interruptions.c ****             err_joy_2 = 0;
 839:..\src/interruptions.c ****             if(!(g_meas.joystick[0] > 900)) {
 840:..\src/interruptions.c ****                 err_joy_1 = g_meas.joystick[0] - g_mem.joystick_threshold;
 841:..\src/interruptions.c **** 
 842:..\src/interruptions.c ****                  
 843:..\src/interruptions.c ****                 if(g_meas.joystick[0] > g_mem.joystick_threshold) {     //both motors wind the wire
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 55


 844:..\src/interruptions.c ****                     g_refNew.pos[0] += ((int32) err_joy_1 * g_mem.closure_speed) / (1024 - g_mem.jo
 845:..\src/interruptions.c ****                     g_refNew.pos[1] += ((int32) err_joy_1 * g_mem.closure_speed) / (1024 - g_mem.jo
 846:..\src/interruptions.c ****                 }
 847:..\src/interruptions.c ****                 else {
 848:..\src/interruptions.c ****                     err_joy_1 = g_meas.joystick[0] + g_mem.joystick_threshold;
 849:..\src/interruptions.c ****                     //if (err_joy_1 < 0) {
 850:..\src/interruptions.c ****                     if(g_meas.joystick[0] < -g_mem.joystick_threshold) {  //both motors unroll the 
 851:..\src/interruptions.c ****                         g_refNew.pos[0] += ((int32) err_joy_1 * g_mem.closure_speed) / (1024 - g_me
 852:..\src/interruptions.c ****                         g_refNew.pos[1] += ((int32) err_joy_1 * g_mem.closure_speed) / (1024 - g_me
 853:..\src/interruptions.c **** 
 854:..\src/interruptions.c ****                        
 855:..\src/interruptions.c ****                     }
 856:..\src/interruptions.c ****                 }
 857:..\src/interruptions.c **** 
 858:..\src/interruptions.c ****                 err_joy_2 = g_meas.joystick[1] - g_mem.joystick_threshold;
 859:..\src/interruptions.c ****                
 860:..\src/interruptions.c ****                 if(g_meas.joystick[1] > g_mem.joystick_threshold) {    //The wire is winded around 
 861:..\src/interruptions.c ****                     g_refNew.pos[0] += ((int32) err_joy_2 * g_mem.closure_speed) / (1024 - g_mem.jo
 862:..\src/interruptions.c ****                     g_refNew.pos[1] -= ((int32) err_joy_2 * g_mem.closure_speed) / (1024 - g_mem.jo
 863:..\src/interruptions.c ****                 
 864:..\src/interruptions.c ****                     
 865:..\src/interruptions.c ****                 }
 866:..\src/interruptions.c ****                 else {
 867:..\src/interruptions.c ****                     err_joy_2 = g_meas.joystick[1] + g_mem.joystick_threshold;
 868:..\src/interruptions.c ****                     
 869:..\src/interruptions.c ****                     if(g_meas.joystick[1] < -g_mem.joystick_threshold) {  //The wire is unwinded fr
 870:..\src/interruptions.c ****                         g_refNew.pos[0] += ((int32) err_joy_2 * g_mem.closure_speed) / (1024 - g_me
 871:..\src/interruptions.c ****                         g_refNew.pos[1] -= ((int32) err_joy_2 * g_mem.closure_speed) / (1024 - g_me
 872:..\src/interruptions.c **** 
 873:..\src/interruptions.c ****                         
 874:..\src/interruptions.c ****                     }
 875:..\src/interruptions.c ****                 }
 876:..\src/interruptions.c ****             }
 877:..\src/interruptions.c **** 
 878:..\src/interruptions.c ****             else {  //The button is pressed and the hand is opened firstly making the position diff
 879:..\src/interruptions.c ****                     //equal to zero, then the position sum is gradually set to zero 
 880:..\src/interruptions.c ****                 pos_diff = (g_meas.pos[0] - g_meas.pos[1]) >> c_mem.res[0];
 881:..\src/interruptions.c ****                 pos_sum = (g_meas.pos[0] + g_meas.pos[1]) >> c_mem.res[0];
 882:..\src/interruptions.c **** 
 883:..\src/interruptions.c ****                 if(abs(pos_diff) > 500) {
 884:..\src/interruptions.c ****                     if(SIGN(pos_diff) == 1) {
 885:..\src/interruptions.c ****                         g_refNew.pos[1] += g_mem.closure_speed;
 886:..\src/interruptions.c ****                         g_refNew.pos[0] -= g_mem.closure_speed / 2;
 887:..\src/interruptions.c ****                     }
 888:..\src/interruptions.c ****                     else {
 889:..\src/interruptions.c ****                         g_refNew.pos[0] += g_mem.closure_speed;
 890:..\src/interruptions.c ****                         g_refNew.pos[1] -= g_mem.closure_speed / 2;
 891:..\src/interruptions.c ****                     }
 892:..\src/interruptions.c ****                     
 893:..\src/interruptions.c ****                 }
 894:..\src/interruptions.c ****                 else {
 895:..\src/interruptions.c ****                     if(pos_sum > 0) {
 896:..\src/interruptions.c ****                         g_refNew.pos[0] -= g_mem.closure_speed * 2;
 897:..\src/interruptions.c ****                         g_refNew.pos[1] -= g_mem.closure_speed * 2;
 898:..\src/interruptions.c ****                         if(g_refNew.pos[0] < 0)
 899:..\src/interruptions.c ****                             g_refNew.pos[0] = 0;
 900:..\src/interruptions.c ****                         if(g_refNew.pos[1] < 0);
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 56


 901:..\src/interruptions.c ****                             g_refNew.pos[1] = 0;
 902:..\src/interruptions.c ****                     }
 903:..\src/interruptions.c ****                 }
 904:..\src/interruptions.c ****             }
 905:..\src/interruptions.c ****         
 906:..\src/interruptions.c ****         break;
 907:..\src/interruptions.c ****             */
 908:..\src/interruptions.c ****             
 909:..\src/interruptions.c **** }
 2172              		.loc 1 909 0
 2173 000e 00BF     		nop
 2174 0010 1437     		adds	r7, r7, #20
 2175              		.cfi_def_cfa_offset 4
 2176 0012 BD46     		mov	sp, r7
 2177              		.cfi_def_cfa_register 13
 2178              		@ sp needed
 2179 0014 80BC     		pop	{r7}
 2180              		.cfi_restore 7
 2181              		.cfi_def_cfa_offset 0
 2182 0016 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE69:
 2185              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2186              		.section	.text.motor_control_SH,"ax",%progbits
 2187              		.align	2
 2188              		.global	motor_control_SH
 2189              		.thumb
 2190              		.thumb_func
 2191              		.type	motor_control_SH, %function
 2192              	motor_control_SH:
 2193              	.LFB70:
 910:..\src/interruptions.c **** 
 911:..\src/interruptions.c **** //==============================================================================
 912:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 913:..\src/interruptions.c **** //==============================================================================
 914:..\src/interruptions.c **** void motor_control_SH() {
 2194              		.loc 1 914 0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 80
 2197              		@ frame_needed = 1, uses_anonymous_args = 0
 2198 0000 80B5     		push	{r7, lr}
 2199              		.cfi_def_cfa_offset 8
 2200              		.cfi_offset 7, -8
 2201              		.cfi_offset 14, -4
 2202 0002 94B0     		sub	sp, sp, #80
 2203              		.cfi_def_cfa_offset 88
 2204 0004 00AF     		add	r7, sp, #0
 2205              		.cfi_def_cfa_register 7
 915:..\src/interruptions.c **** 
 916:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 2206              		.loc 1 916 0
 2207 0006 0023     		movs	r3, #0
 2208 0008 FB64     		str	r3, [r7, #76]
 917:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 918:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 919:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 920:..\src/interruptions.c ****  
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 57


 921:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 2209              		.loc 1 921 0
 2210 000a 0023     		movs	r3, #0
 2211 000c 87F84730 		strb	r3, [r7, #71]
 922:..\src/interruptions.c ****     
 923:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 2212              		.loc 1 923 0
 2213 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 2214 0014 1346     		mov	r3, r2
 2215 0016 DB00     		lsls	r3, r3, #3
 2216 0018 9B1A     		subs	r3, r3, r2
 2217 001a 1B01     		lsls	r3, r3, #4
 2218 001c B033     		adds	r3, r3, #176
 2219 001e 9D4A     		ldr	r2, .L214
 2220 0020 1344     		add	r3, r3, r2
 2221 0022 3B64     		str	r3, [r7, #64]
 924:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 2222              		.loc 1 924 0
 2223 0024 3B6C     		ldr	r3, [r7, #64]
 2224 0026 93F86030 		ldrb	r3, [r3, #96]
 2225 002a 87F83F30 		strb	r3, [r7, #63]
 925:..\src/interruptions.c ****     
 926:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 2226              		.loc 1 926 0
 2227 002e 3B6C     		ldr	r3, [r7, #64]
 2228 0030 1B68     		ldr	r3, [r3]
 2229 0032 BB63     		str	r3, [r7, #56]
 927:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 2230              		.loc 1 927 0
 2231 0034 3B6C     		ldr	r3, [r7, #64]
 2232 0036 5B68     		ldr	r3, [r3, #4]
 2233 0038 7B63     		str	r3, [r7, #52]
 928:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 2234              		.loc 1 928 0
 2235 003a 3B6C     		ldr	r3, [r7, #64]
 2236 003c 9B68     		ldr	r3, [r3, #8]
 2237 003e 3B63     		str	r3, [r7, #48]
 929:..\src/interruptions.c **** 
 930:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 2238              		.loc 1 930 0
 2239 0040 3B6C     		ldr	r3, [r7, #64]
 2240 0042 DB68     		ldr	r3, [r3, #12]
 2241 0044 FB62     		str	r3, [r7, #44]
 931:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 2242              		.loc 1 931 0
 2243 0046 3B6C     		ldr	r3, [r7, #64]
 2244 0048 1B69     		ldr	r3, [r3, #16]
 2245 004a BB62     		str	r3, [r7, #40]
 932:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 2246              		.loc 1 932 0
 2247 004c 3B6C     		ldr	r3, [r7, #64]
 2248 004e 5B69     		ldr	r3, [r3, #20]
 2249 0050 7B62     		str	r3, [r7, #36]
 933:..\src/interruptions.c **** 
 934:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 2250              		.loc 1 934 0
 2251 0052 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 58


 2252 0054 9B69     		ldr	r3, [r3, #24]
 2253 0056 3B62     		str	r3, [r7, #32]
 935:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 2254              		.loc 1 935 0
 2255 0058 3B6C     		ldr	r3, [r7, #64]
 2256 005a DB69     		ldr	r3, [r3, #28]
 2257 005c FB61     		str	r3, [r7, #28]
 936:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 2258              		.loc 1 936 0
 2259 005e 3B6C     		ldr	r3, [r7, #64]
 2260 0060 1B6A     		ldr	r3, [r3, #32]
 2261 0062 BB61     		str	r3, [r7, #24]
 937:..\src/interruptions.c ****     
 938:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 2262              		.loc 1 938 0
 2263 0064 3B6C     		ldr	r3, [r7, #64]
 2264 0066 5B6A     		ldr	r3, [r3, #36]
 2265 0068 7B61     		str	r3, [r7, #20]
 939:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 2266              		.loc 1 939 0
 2267 006a 3B6C     		ldr	r3, [r7, #64]
 2268 006c 9B6A     		ldr	r3, [r3, #40]
 2269 006e 3B61     		str	r3, [r7, #16]
 940:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 2270              		.loc 1 940 0
 2271 0070 3B6C     		ldr	r3, [r7, #64]
 2272 0072 DB6A     		ldr	r3, [r3, #44]
 2273 0074 FB60     		str	r3, [r7, #12]
 941:..\src/interruptions.c **** 
 942:..\src/interruptions.c ****     // Static Variables
 943:..\src/interruptions.c **** 
 944:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 945:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 946:..\src/interruptions.c ****     
 947:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 948:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 949:..\src/interruptions.c ****     static int32 prev_pwm;
 950:..\src/interruptions.c **** 
 951:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 952:..\src/interruptions.c ****     static uint32 position_counter = 0;
 953:..\src/interruptions.c ****   
 954:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 955:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 2274              		.loc 1 955 0
 2275 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2276 007a 1B01     		lsls	r3, r3, #4
 2277 007c 864A     		ldr	r2, .L214+4
 2278 007e 9918     		adds	r1, r3, r2
 2279 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2280 0084 1B01     		lsls	r3, r3, #4
 2281 0086 854A     		ldr	r2, .L214+8
 2282 0088 1A44     		add	r2, r2, r3
 2283 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2284 008e 1846     		mov	r0, r3
 2285 0090 FFF7FEFF 		bl	compute_reference
 956:..\src/interruptions.c ****      
 957:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 59


 2286              		.loc 1 957 0
 2287 0094 3B6C     		ldr	r3, [r7, #64]
 2288 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2289 009a 032B     		cmp	r3, #3
 2290 009c 00F2F781 		bhi	.L154
 2291 00a0 01A2     		adr	r2, .L156
 2292 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2293 00a6 00BF     		.p2align 2
 2294              	.L156:
 2295 00a8 55020000 		.word	.L155+1
 2296 00ac 49040000 		.word	.L157+1
 2297 00b0 3B030000 		.word	.L158+1
 2298 00b4 B9000000 		.word	.L159+1
 2299              		.p2align 1
 2300              	.L159:
 958:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 959:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 960:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2301              		.loc 1 960 0
 2302 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2303 00bc 764A     		ldr	r2, .L214+4
 2304 00be 1B01     		lsls	r3, r3, #4
 2305 00c0 1344     		add	r3, r3, r2
 2306 00c2 1A68     		ldr	r2, [r3]
 2307 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2308 00c8 7549     		ldr	r1, .L214+12
 2309 00ca 3420     		movs	r0, #52
 2310 00cc 00FB03F3 		mul	r3, r0, r3
 2311 00d0 0B44     		add	r3, r3, r1
 2312 00d2 1B68     		ldr	r3, [r3]
 2313 00d4 D31A     		subs	r3, r2, r3
 2314 00d6 BB60     		str	r3, [r7, #8]
 961:..\src/interruptions.c **** 
 962:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2315              		.loc 1 962 0
 2316 00d8 724B     		ldr	r3, .L214+16
 2317 00da 1A68     		ldr	r2, [r3]
 2318 00dc BB68     		ldr	r3, [r7, #8]
 2319 00de 1344     		add	r3, r3, r2
 2320 00e0 704A     		ldr	r2, .L214+16
 2321 00e2 1360     		str	r3, [r2]
 963:..\src/interruptions.c **** 
 964:..\src/interruptions.c ****             // error_sum saturation
 965:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2322              		.loc 1 965 0
 2323 00e4 6F4B     		ldr	r3, .L214+16
 2324 00e6 1B68     		ldr	r3, [r3]
 2325 00e8 6F4A     		ldr	r2, .L214+20
 2326 00ea 9342     		cmp	r3, r2
 2327 00ec 03DD     		ble	.L160
 966:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2328              		.loc 1 966 0
 2329 00ee 6D4B     		ldr	r3, .L214+16
 2330 00f0 6D4A     		ldr	r2, .L214+20
 2331 00f2 1A60     		str	r2, [r3]
 2332 00f4 07E0     		b	.L161
 2333              	.L160:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 60


 967:..\src/interruptions.c ****             else {
 968:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2334              		.loc 1 968 0
 2335 00f6 6B4B     		ldr	r3, .L214+16
 2336 00f8 1B68     		ldr	r3, [r3]
 2337 00fa 6C4A     		ldr	r2, .L214+24
 2338 00fc 9342     		cmp	r3, r2
 2339 00fe 02DA     		bge	.L161
 969:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2340              		.loc 1 969 0
 2341 0100 684B     		ldr	r3, .L214+16
 2342 0102 6A4A     		ldr	r2, .L214+24
 2343 0104 1A60     		str	r2, [r3]
 2344              	.L161:
 970:..\src/interruptions.c ****             }
 971:..\src/interruptions.c ****             
 972:..\src/interruptions.c ****             // ------ position PID control ------
 973:..\src/interruptions.c **** 
 974:..\src/interruptions.c ****             i_ref = 0;
 2345              		.loc 1 974 0
 2346 0106 0023     		movs	r3, #0
 2347 0108 BB64     		str	r3, [r7, #72]
 975:..\src/interruptions.c ****             
 976:..\src/interruptions.c ****             // Proportional
 977:..\src/interruptions.c ****             if (k_p_dl != 0)
 2348              		.loc 1 977 0
 2349 010a 3B6A     		ldr	r3, [r7, #32]
 2350 010c 002B     		cmp	r3, #0
 2351 010e 07D0     		beq	.L162
 978:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2352              		.loc 1 978 0
 2353 0110 3B6A     		ldr	r3, [r7, #32]
 2354 0112 BA68     		ldr	r2, [r7, #8]
 2355 0114 02FB03F3 		mul	r3, r2, r3
 2356 0118 1B14     		asrs	r3, r3, #16
 2357 011a BA6C     		ldr	r2, [r7, #72]
 2358 011c 1344     		add	r3, r3, r2
 2359 011e BB64     		str	r3, [r7, #72]
 2360              	.L162:
 979:..\src/interruptions.c **** 
 980:..\src/interruptions.c ****             // Integral
 981:..\src/interruptions.c ****             if (k_i_dl != 0)
 2361              		.loc 1 981 0
 2362 0120 FB69     		ldr	r3, [r7, #28]
 2363 0122 002B     		cmp	r3, #0
 2364 0124 08D0     		beq	.L163
 982:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2365              		.loc 1 982 0
 2366 0126 5F4B     		ldr	r3, .L214+16
 2367 0128 1B68     		ldr	r3, [r3]
 2368 012a FA69     		ldr	r2, [r7, #28]
 2369 012c 02FB03F3 		mul	r3, r2, r3
 2370 0130 1B14     		asrs	r3, r3, #16
 2371 0132 BA6C     		ldr	r2, [r7, #72]
 2372 0134 1344     		add	r3, r3, r2
 2373 0136 BB64     		str	r3, [r7, #72]
 2374              	.L163:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 61


 983:..\src/interruptions.c **** 
 984:..\src/interruptions.c ****             // Derivative
 985:..\src/interruptions.c ****             if (k_d_dl != 0)
 2375              		.loc 1 985 0
 2376 0138 BB69     		ldr	r3, [r7, #24]
 2377 013a 002B     		cmp	r3, #0
 2378 013c 0AD0     		beq	.L164
 986:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2379              		.loc 1 986 0
 2380 013e 5C4B     		ldr	r3, .L214+28
 2381 0140 1B68     		ldr	r3, [r3]
 2382 0142 BA68     		ldr	r2, [r7, #8]
 2383 0144 D31A     		subs	r3, r2, r3
 2384 0146 BA69     		ldr	r2, [r7, #24]
 2385 0148 02FB03F3 		mul	r3, r2, r3
 2386 014c 1B14     		asrs	r3, r3, #16
 2387 014e BA6C     		ldr	r2, [r7, #72]
 2388 0150 1344     		add	r3, r3, r2
 2389 0152 BB64     		str	r3, [r7, #72]
 2390              	.L164:
 987:..\src/interruptions.c ****                         
 988:..\src/interruptions.c ****             // Update previous position
 989:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2391              		.loc 1 989 0
 2392 0154 564A     		ldr	r2, .L214+28
 2393 0156 BB68     		ldr	r3, [r7, #8]
 2394 0158 1360     		str	r3, [r2]
 990:..\src/interruptions.c **** 
 991:..\src/interruptions.c ****             // motor direction depends on i_ref
 992:..\src/interruptions.c ****             if (i_ref >= 0)
 2395              		.loc 1 992 0
 2396 015a BB6C     		ldr	r3, [r7, #72]
 2397 015c 002B     		cmp	r3, #0
 2398 015e 03DB     		blt	.L165
 993:..\src/interruptions.c ****                 motor_dir = TRUE;
 2399              		.loc 1 993 0
 2400 0160 544B     		ldr	r3, .L214+32
 2401 0162 0122     		movs	r2, #1
 2402 0164 1A70     		strb	r2, [r3]
 2403 0166 02E0     		b	.L166
 2404              	.L165:
 994:..\src/interruptions.c ****             else
 995:..\src/interruptions.c ****                 motor_dir = FALSE;
 2405              		.loc 1 995 0
 2406 0168 524B     		ldr	r3, .L214+32
 2407 016a 0022     		movs	r2, #0
 2408 016c 1A70     		strb	r2, [r3]
 2409              	.L166:
 996:..\src/interruptions.c **** 
 997:..\src/interruptions.c ****             // saturate max current
 998:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2410              		.loc 1 998 0
 2411 016e 3B6C     		ldr	r3, [r7, #64]
 2412 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 2413 0174 1A46     		mov	r2, r3
 2414 0176 BB6C     		ldr	r3, [r7, #72]
 2415 0178 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 62


 2416 017a 04DA     		bge	.L167
 999:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2417              		.loc 1 999 0
 2418 017c 3B6C     		ldr	r3, [r7, #64]
 2419 017e B3F95C30 		ldrsh	r3, [r3, #92]
 2420 0182 BB64     		str	r3, [r7, #72]
 2421 0184 0BE0     		b	.L168
 2422              	.L167:
1000:..\src/interruptions.c ****             else {
1001:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2423              		.loc 1 1001 0
 2424 0186 3B6C     		ldr	r3, [r7, #64]
 2425 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 2426 018c 5A42     		negs	r2, r3
 2427 018e BB6C     		ldr	r3, [r7, #72]
 2428 0190 9A42     		cmp	r2, r3
 2429 0192 04DD     		ble	.L168
1002:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2430              		.loc 1 1002 0
 2431 0194 3B6C     		ldr	r3, [r7, #64]
 2432 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 2433 019a 5B42     		negs	r3, r3
 2434 019c BB64     		str	r3, [r7, #72]
 2435              	.L168:
1003:..\src/interruptions.c ****         	}
1004:..\src/interruptions.c **** 
1005:..\src/interruptions.c ****             // current error and curr error sum
1006:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2436              		.loc 1 1006 0
 2437 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2438 01a2 3F4A     		ldr	r2, .L214+12
 2439 01a4 3421     		movs	r1, #52
 2440 01a6 01FB03F3 		mul	r3, r1, r3
 2441 01aa 1344     		add	r3, r3, r2
 2442 01ac 0C33     		adds	r3, r3, #12
 2443 01ae 1B68     		ldr	r3, [r3]
 2444 01b0 BA6C     		ldr	r2, [r7, #72]
 2445 01b2 D31A     		subs	r3, r2, r3
 2446 01b4 7B60     		str	r3, [r7, #4]
1007:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2447              		.loc 1 1007 0
 2448 01b6 404B     		ldr	r3, .L214+36
 2449 01b8 1A68     		ldr	r2, [r3]
 2450 01ba 7B68     		ldr	r3, [r7, #4]
 2451 01bc 1344     		add	r3, r3, r2
 2452 01be 3E4A     		ldr	r2, .L214+36
 2453 01c0 1360     		str	r3, [r2]
1008:..\src/interruptions.c ****             
1009:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2454              		.loc 1 1009 0
 2455 01c2 3D4B     		ldr	r3, .L214+36
 2456 01c4 1B68     		ldr	r3, [r3]
 2457 01c6 3D4A     		ldr	r2, .L214+40
 2458 01c8 9342     		cmp	r3, r2
 2459 01ca 03DD     		ble	.L169
1010:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2460              		.loc 1 1010 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 63


 2461 01cc 3A4B     		ldr	r3, .L214+36
 2462 01ce 3B4A     		ldr	r2, .L214+40
 2463 01d0 1A60     		str	r2, [r3]
 2464 01d2 07E0     		b	.L170
 2465              	.L169:
1011:..\src/interruptions.c ****             else {
1012:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2466              		.loc 1 1012 0
 2467 01d4 384B     		ldr	r3, .L214+36
 2468 01d6 1B68     		ldr	r3, [r3]
 2469 01d8 394A     		ldr	r2, .L214+44
 2470 01da 9342     		cmp	r3, r2
 2471 01dc 02DA     		bge	.L170
1013:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2472              		.loc 1 1013 0
 2473 01de 364B     		ldr	r3, .L214+36
 2474 01e0 374A     		ldr	r2, .L214+44
 2475 01e2 1A60     		str	r2, [r3]
 2476              	.L170:
1014:..\src/interruptions.c ****             }
1015:..\src/interruptions.c **** 
1016:..\src/interruptions.c ****             // ----- current PID control -----
1017:..\src/interruptions.c **** 
1018:..\src/interruptions.c ****             pwm_input = 0;
 2477              		.loc 1 1018 0
 2478 01e4 0023     		movs	r3, #0
 2479 01e6 FB64     		str	r3, [r7, #76]
1019:..\src/interruptions.c **** 
1020:..\src/interruptions.c ****             // Proportional
1021:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2480              		.loc 1 1021 0
 2481 01e8 7B69     		ldr	r3, [r7, #20]
 2482 01ea 002B     		cmp	r3, #0
 2483 01ec 07D0     		beq	.L171
1022:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2484              		.loc 1 1022 0
 2485 01ee 7B69     		ldr	r3, [r7, #20]
 2486 01f0 7A68     		ldr	r2, [r7, #4]
 2487 01f2 02FB03F3 		mul	r3, r2, r3
 2488 01f6 1B14     		asrs	r3, r3, #16
 2489 01f8 FA6C     		ldr	r2, [r7, #76]
 2490 01fa 1344     		add	r3, r3, r2
 2491 01fc FB64     		str	r3, [r7, #76]
 2492              	.L171:
1023:..\src/interruptions.c **** 
1024:..\src/interruptions.c ****             // Integral
1025:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2493              		.loc 1 1025 0
 2494 01fe 3B69     		ldr	r3, [r7, #16]
 2495 0200 002B     		cmp	r3, #0
 2496 0202 08D0     		beq	.L172
1026:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2497              		.loc 1 1026 0
 2498 0204 2C4B     		ldr	r3, .L214+36
 2499 0206 1B68     		ldr	r3, [r3]
 2500 0208 3A69     		ldr	r2, [r7, #16]
 2501 020a 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 64


 2502 020e 1B14     		asrs	r3, r3, #16
 2503 0210 FA6C     		ldr	r2, [r7, #76]
 2504 0212 1344     		add	r3, r3, r2
 2505 0214 FB64     		str	r3, [r7, #76]
 2506              	.L172:
1027:..\src/interruptions.c **** 
1028:..\src/interruptions.c ****             // Derivative
1029:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2507              		.loc 1 1029 0
 2508 0216 FB68     		ldr	r3, [r7, #12]
 2509 0218 002B     		cmp	r3, #0
 2510 021a 0AD0     		beq	.L173
1030:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2511              		.loc 1 1030 0
 2512 021c 294B     		ldr	r3, .L214+48
 2513 021e 1B68     		ldr	r3, [r3]
 2514 0220 7A68     		ldr	r2, [r7, #4]
 2515 0222 D31A     		subs	r3, r2, r3
 2516 0224 FA68     		ldr	r2, [r7, #12]
 2517 0226 02FB03F3 		mul	r3, r2, r3
 2518 022a 1B14     		asrs	r3, r3, #16
 2519 022c FA6C     		ldr	r2, [r7, #76]
 2520 022e 1344     		add	r3, r3, r2
 2521 0230 FB64     		str	r3, [r7, #76]
 2522              	.L173:
1031:..\src/interruptions.c **** 
1032:..\src/interruptions.c ****             // pwm_input saturation
1033:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2523              		.loc 1 1033 0
 2524 0232 FB6C     		ldr	r3, [r7, #76]
 2525 0234 13F1640F 		cmn	r3, #100
 2526 0238 03DA     		bge	.L174
1034:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2527              		.loc 1 1034 0
 2528 023a 6FF06303 		mvn	r3, #99
 2529 023e FB64     		str	r3, [r7, #76]
 2530 0240 04E0     		b	.L175
 2531              	.L174:
1035:..\src/interruptions.c ****             else {
1036:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2532              		.loc 1 1036 0
 2533 0242 FB6C     		ldr	r3, [r7, #76]
 2534 0244 642B     		cmp	r3, #100
 2535 0246 01DD     		ble	.L175
1037:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 2536              		.loc 1 1037 0
 2537 0248 6423     		movs	r3, #100
 2538 024a FB64     		str	r3, [r7, #76]
 2539              	.L175:
1038:..\src/interruptions.c ****             }
1039:..\src/interruptions.c **** 
1040:..\src/interruptions.c ****             // Update previous current
1041:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2540              		.loc 1 1041 0
 2541 024c 1D4A     		ldr	r2, .L214+48
 2542 024e 7B68     		ldr	r3, [r7, #4]
 2543 0250 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 65


1042:..\src/interruptions.c **** 
1043:..\src/interruptions.c ****         break;
 2544              		.loc 1 1043 0
 2545 0252 1CE1     		b	.L154
 2546              	.L155:
1044:..\src/interruptions.c **** 
1045:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1046:..\src/interruptions.c ****         case CONTROL_ANGLE:
1047:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2547              		.loc 1 1047 0
 2548 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2549 0258 0F4A     		ldr	r2, .L214+4
 2550 025a 1B01     		lsls	r3, r3, #4
 2551 025c 1344     		add	r3, r3, r2
 2552 025e 1A68     		ldr	r2, [r3]
 2553 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2554 0264 0E49     		ldr	r1, .L214+12
 2555 0266 3420     		movs	r0, #52
 2556 0268 00FB03F3 		mul	r3, r0, r3
 2557 026c 0B44     		add	r3, r3, r1
 2558 026e 1B68     		ldr	r3, [r3]
 2559 0270 D31A     		subs	r3, r2, r3
 2560 0272 BB60     		str	r3, [r7, #8]
1048:..\src/interruptions.c **** 
1049:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2561              		.loc 1 1049 0
 2562 0274 0B4B     		ldr	r3, .L214+16
 2563 0276 1A68     		ldr	r2, [r3]
 2564 0278 BB68     		ldr	r3, [r7, #8]
 2565 027a 1344     		add	r3, r3, r2
 2566 027c 094A     		ldr	r2, .L214+16
 2567 027e 1360     		str	r3, [r2]
1050:..\src/interruptions.c **** 
1051:..\src/interruptions.c ****             // anti-windup (for integral control)
1052:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2568              		.loc 1 1052 0
 2569 0280 084B     		ldr	r3, .L214+16
 2570 0282 1B68     		ldr	r3, [r3]
 2571 0284 B3F57A7F 		cmp	r3, #1000
 2572 0288 1EDD     		ble	.L176
1053:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2573              		.loc 1 1053 0
 2574 028a 064B     		ldr	r3, .L214+16
 2575 028c 4FF47A72 		mov	r2, #1000
 2576 0290 1A60     		str	r2, [r3]
 2577 0292 21E0     		b	.L177
 2578              	.L215:
 2579              		.align	2
 2580              	.L214:
 2581 0294 00000000 		.word	c_mem
 2582 0298 00000000 		.word	g_ref
 2583 029c 00000000 		.word	g_refOld
 2584 02a0 00000000 		.word	g_meas
 2585 02a4 90000000 		.word	pos_error_sum.10501
 2586 02a8 80F0FA02 		.word	50000000
 2587 02ac 800F05FD 		.word	-50000000
 2588 02b0 94000000 		.word	prev_pos_err.10503
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 66


 2589 02b4 98000000 		.word	motor_dir.10506
 2590 02b8 9C000000 		.word	curr_error_sum.10502
 2591 02bc A0860100 		.word	100000
 2592 02c0 6079FEFF 		.word	-100000
 2593 02c4 A0000000 		.word	prev_curr_err.10504
 2594              	.L176:
1054:..\src/interruptions.c ****             else {
1055:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 2595              		.loc 1 1055 0
 2596 02c8 9C4B     		ldr	r3, .L216
 2597 02ca 1B68     		ldr	r3, [r3]
 2598 02cc 13F57A7F 		cmn	r3, #1000
 2599 02d0 02DA     		bge	.L177
1056:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 2600              		.loc 1 1056 0
 2601 02d2 9A4B     		ldr	r3, .L216
 2602 02d4 9A4A     		ldr	r2, .L216+4
 2603 02d6 1A60     		str	r2, [r3]
 2604              	.L177:
1057:..\src/interruptions.c ****             }
1058:..\src/interruptions.c **** 
1059:..\src/interruptions.c ****             // Proportional
1060:..\src/interruptions.c ****             if (k_p != 0) 
 2605              		.loc 1 1060 0
 2606 02d8 BB6B     		ldr	r3, [r7, #56]
 2607 02da 002B     		cmp	r3, #0
 2608 02dc 05D0     		beq	.L178
1061:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 2609              		.loc 1 1061 0
 2610 02de BB6B     		ldr	r3, [r7, #56]
 2611 02e0 BA68     		ldr	r2, [r7, #8]
 2612 02e2 02FB03F3 		mul	r3, r2, r3
 2613 02e6 1B14     		asrs	r3, r3, #16
 2614 02e8 FB64     		str	r3, [r7, #76]
 2615              	.L178:
1062:..\src/interruptions.c ****             
1063:..\src/interruptions.c **** 
1064:..\src/interruptions.c ****             // Integral
1065:..\src/interruptions.c ****             if (k_i != 0) 
 2616              		.loc 1 1065 0
 2617 02ea 7B6B     		ldr	r3, [r7, #52]
 2618 02ec 002B     		cmp	r3, #0
 2619 02ee 08D0     		beq	.L179
1066:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 2620              		.loc 1 1066 0
 2621 02f0 924B     		ldr	r3, .L216
 2622 02f2 1B68     		ldr	r3, [r3]
 2623 02f4 7A6B     		ldr	r2, [r7, #52]
 2624 02f6 02FB03F3 		mul	r3, r2, r3
 2625 02fa 1B14     		asrs	r3, r3, #16
 2626 02fc FA6C     		ldr	r2, [r7, #76]
 2627 02fe 1344     		add	r3, r3, r2
 2628 0300 FB64     		str	r3, [r7, #76]
 2629              	.L179:
1067:..\src/interruptions.c ****             
1068:..\src/interruptions.c **** 
1069:..\src/interruptions.c ****             // Derivative
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 67


1070:..\src/interruptions.c ****             if (k_d != 0) 
 2630              		.loc 1 1070 0
 2631 0302 3B6B     		ldr	r3, [r7, #48]
 2632 0304 002B     		cmp	r3, #0
 2633 0306 0AD0     		beq	.L180
1071:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2634              		.loc 1 1071 0
 2635 0308 8E4B     		ldr	r3, .L216+8
 2636 030a 1B68     		ldr	r3, [r3]
 2637 030c BA68     		ldr	r2, [r7, #8]
 2638 030e D31A     		subs	r3, r2, r3
 2639 0310 3A6B     		ldr	r2, [r7, #48]
 2640 0312 02FB03F3 		mul	r3, r2, r3
 2641 0316 1B14     		asrs	r3, r3, #16
 2642 0318 FA6C     		ldr	r2, [r7, #76]
 2643 031a 1344     		add	r3, r3, r2
 2644 031c FB64     		str	r3, [r7, #76]
 2645              	.L180:
1072:..\src/interruptions.c ****             
1073:..\src/interruptions.c **** 
1074:..\src/interruptions.c ****             // Update measure
1075:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2646              		.loc 1 1075 0
 2647 031e 894A     		ldr	r2, .L216+8
 2648 0320 BB68     		ldr	r3, [r7, #8]
 2649 0322 1360     		str	r3, [r2]
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****             if (pwm_input > 0)
 2650              		.loc 1 1077 0
 2651 0324 FB6C     		ldr	r3, [r7, #76]
 2652 0326 002B     		cmp	r3, #0
 2653 0328 03DD     		ble	.L181
1078:..\src/interruptions.c ****                 motor_dir = TRUE;
 2654              		.loc 1 1078 0
 2655 032a 874B     		ldr	r3, .L216+12
 2656 032c 0122     		movs	r2, #1
 2657 032e 1A70     		strb	r2, [r3]
1079:..\src/interruptions.c ****             else
1080:..\src/interruptions.c ****                 motor_dir = FALSE;
1081:..\src/interruptions.c **** 
1082:..\src/interruptions.c ****         break;
 2658              		.loc 1 1082 0
 2659 0330 ADE0     		b	.L154
 2660              	.L181:
1080:..\src/interruptions.c **** 
 2661              		.loc 1 1080 0
 2662 0332 854B     		ldr	r3, .L216+12
 2663 0334 0022     		movs	r2, #0
 2664 0336 1A70     		strb	r2, [r3]
 2665              		.loc 1 1082 0
 2666 0338 A9E0     		b	.L154
 2667              	.L158:
1083:..\src/interruptions.c **** 
1084:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1085:..\src/interruptions.c ****         case CONTROL_CURRENT:
1086:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 2668              		.loc 1 1086 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 68


 2669 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2670 033e 834A     		ldr	r2, .L216+16
 2671 0340 1B01     		lsls	r3, r3, #4
 2672 0342 1344     		add	r3, r3, r2
 2673 0344 0C33     		adds	r3, r3, #12
 2674 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2675 0348 002B     		cmp	r3, #0
 2676 034a 00F09D80 		beq	.L212
 2677              		.loc 1 1086 0 is_stmt 0 discriminator 1
 2678 034e 804B     		ldr	r3, .L216+20
 2679 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2680 0352 002B     		cmp	r3, #0
 2681 0354 00F09880 		beq	.L212
1087:..\src/interruptions.c ****                 
1088:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 2682              		.loc 1 1088 0 is_stmt 1
 2683 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2684 035c 7B4A     		ldr	r2, .L216+16
 2685 035e 1B01     		lsls	r3, r3, #4
 2686 0360 1344     		add	r3, r3, r2
 2687 0362 0433     		adds	r3, r3, #4
 2688 0364 1B68     		ldr	r3, [r3]
 2689 0366 BB64     		str	r3, [r7, #72]
1089:..\src/interruptions.c **** 
1090:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 2690              		.loc 1 1090 0
 2691 0368 3B6C     		ldr	r3, [r7, #64]
 2692 036a B3F95C30 		ldrsh	r3, [r3, #92]
 2693 036e 1A46     		mov	r2, r3
 2694 0370 BB6C     		ldr	r3, [r7, #72]
 2695 0372 9A42     		cmp	r2, r3
 2696 0374 04DA     		bge	.L184
1091:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 2697              		.loc 1 1091 0
 2698 0376 3B6C     		ldr	r3, [r7, #64]
 2699 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 2700 037c BB64     		str	r3, [r7, #72]
 2701 037e 0BE0     		b	.L185
 2702              	.L184:
1092:..\src/interruptions.c ****                 else {
1093:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 2703              		.loc 1 1093 0
 2704 0380 3B6C     		ldr	r3, [r7, #64]
 2705 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 2706 0386 5A42     		negs	r2, r3
 2707 0388 BB6C     		ldr	r3, [r7, #72]
 2708 038a 9A42     		cmp	r2, r3
 2709 038c 04DD     		ble	.L185
1094:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 2710              		.loc 1 1094 0
 2711 038e 3B6C     		ldr	r3, [r7, #64]
 2712 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 2713 0394 5B42     		negs	r3, r3
 2714 0396 BB64     		str	r3, [r7, #72]
 2715              	.L185:
1095:..\src/interruptions.c ****                 }
1096:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 69


1097:..\src/interruptions.c ****                 // current error
1098:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 2716              		.loc 1 1098 0
 2717 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2718 039c 6D4A     		ldr	r2, .L216+24
 2719 039e 3421     		movs	r1, #52
 2720 03a0 01FB03F3 		mul	r3, r1, r3
 2721 03a4 1344     		add	r3, r3, r2
 2722 03a6 0C33     		adds	r3, r3, #12
 2723 03a8 1B68     		ldr	r3, [r3]
 2724 03aa BA6C     		ldr	r2, [r7, #72]
 2725 03ac D31A     		subs	r3, r2, r3
 2726 03ae 7B60     		str	r3, [r7, #4]
1099:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2727              		.loc 1 1099 0
 2728 03b0 694B     		ldr	r3, .L216+28
 2729 03b2 1A68     		ldr	r2, [r3]
 2730 03b4 7B68     		ldr	r3, [r7, #4]
 2731 03b6 1344     		add	r3, r3, r2
 2732 03b8 674A     		ldr	r2, .L216+28
 2733 03ba 1360     		str	r3, [r2]
1100:..\src/interruptions.c ****                 
1101:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2734              		.loc 1 1101 0
 2735 03bc 664B     		ldr	r3, .L216+28
 2736 03be 1B68     		ldr	r3, [r3]
 2737 03c0 664A     		ldr	r2, .L216+32
 2738 03c2 9342     		cmp	r3, r2
 2739 03c4 03DD     		ble	.L186
1102:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2740              		.loc 1 1102 0
 2741 03c6 644B     		ldr	r3, .L216+28
 2742 03c8 644A     		ldr	r2, .L216+32
 2743 03ca 1A60     		str	r2, [r3]
 2744 03cc 07E0     		b	.L187
 2745              	.L186:
1103:..\src/interruptions.c ****                 else {
1104:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2746              		.loc 1 1104 0
 2747 03ce 624B     		ldr	r3, .L216+28
 2748 03d0 1B68     		ldr	r3, [r3]
 2749 03d2 634A     		ldr	r2, .L216+36
 2750 03d4 9342     		cmp	r3, r2
 2751 03d6 02DA     		bge	.L187
1105:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2752              		.loc 1 1105 0
 2753 03d8 5F4B     		ldr	r3, .L216+28
 2754 03da 614A     		ldr	r2, .L216+36
 2755 03dc 1A60     		str	r2, [r3]
 2756              	.L187:
1106:..\src/interruptions.c ****                 }
1107:..\src/interruptions.c **** 
1108:..\src/interruptions.c ****                 pwm_input = 0;
 2757              		.loc 1 1108 0
 2758 03de 0023     		movs	r3, #0
 2759 03e0 FB64     		str	r3, [r7, #76]
1109:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 70


1110:..\src/interruptions.c ****                 // Proportional
1111:..\src/interruptions.c ****                 if (k_p_c != 0)
 2760              		.loc 1 1111 0
 2761 03e2 FB6A     		ldr	r3, [r7, #44]
 2762 03e4 002B     		cmp	r3, #0
 2763 03e6 07D0     		beq	.L188
1112:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2764              		.loc 1 1112 0
 2765 03e8 FB6A     		ldr	r3, [r7, #44]
 2766 03ea 7A68     		ldr	r2, [r7, #4]
 2767 03ec 02FB03F3 		mul	r3, r2, r3
 2768 03f0 1B14     		asrs	r3, r3, #16
 2769 03f2 FA6C     		ldr	r2, [r7, #76]
 2770 03f4 1344     		add	r3, r3, r2
 2771 03f6 FB64     		str	r3, [r7, #76]
 2772              	.L188:
1113:..\src/interruptions.c **** 
1114:..\src/interruptions.c ****                 // Integral
1115:..\src/interruptions.c ****                 if (k_i_c != 0)
 2773              		.loc 1 1115 0
 2774 03f8 BB6A     		ldr	r3, [r7, #40]
 2775 03fa 002B     		cmp	r3, #0
 2776 03fc 08D0     		beq	.L189
1116:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2777              		.loc 1 1116 0
 2778 03fe 564B     		ldr	r3, .L216+28
 2779 0400 1B68     		ldr	r3, [r3]
 2780 0402 BA6A     		ldr	r2, [r7, #40]
 2781 0404 02FB03F3 		mul	r3, r2, r3
 2782 0408 1B14     		asrs	r3, r3, #16
 2783 040a FA6C     		ldr	r2, [r7, #76]
 2784 040c 1344     		add	r3, r3, r2
 2785 040e FB64     		str	r3, [r7, #76]
 2786              	.L189:
1117:..\src/interruptions.c **** 
1118:..\src/interruptions.c ****                 // Derivative
1119:..\src/interruptions.c ****                 if (k_d_c != 0)
 2787              		.loc 1 1119 0
 2788 0410 7B6A     		ldr	r3, [r7, #36]
 2789 0412 002B     		cmp	r3, #0
 2790 0414 0AD0     		beq	.L190
1120:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2791              		.loc 1 1120 0
 2792 0416 534B     		ldr	r3, .L216+40
 2793 0418 1B68     		ldr	r3, [r3]
 2794 041a 7A68     		ldr	r2, [r7, #4]
 2795 041c D31A     		subs	r3, r2, r3
 2796 041e 7A6A     		ldr	r2, [r7, #36]
 2797 0420 02FB03F3 		mul	r3, r2, r3
 2798 0424 1B14     		asrs	r3, r3, #16
 2799 0426 FA6C     		ldr	r2, [r7, #76]
 2800 0428 1344     		add	r3, r3, r2
 2801 042a FB64     		str	r3, [r7, #76]
 2802              	.L190:
1121:..\src/interruptions.c ****                 
1122:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2803              		.loc 1 1122 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 71


 2804 042c 4D4A     		ldr	r2, .L216+40
 2805 042e 7B68     		ldr	r3, [r7, #4]
 2806 0430 1360     		str	r3, [r2]
1123:..\src/interruptions.c ****                 
1124:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2807              		.loc 1 1124 0
 2808 0432 FB6C     		ldr	r3, [r7, #76]
 2809 0434 002B     		cmp	r3, #0
 2810 0436 03DB     		blt	.L191
1125:..\src/interruptions.c ****                     motor_dir = TRUE;
 2811              		.loc 1 1125 0
 2812 0438 434B     		ldr	r3, .L216+12
 2813 043a 0122     		movs	r2, #1
 2814 043c 1A70     		strb	r2, [r3]
1126:..\src/interruptions.c ****                 else
1127:..\src/interruptions.c ****                     motor_dir = FALSE;
1128:..\src/interruptions.c ****             }
1129:..\src/interruptions.c ****         break;
 2815              		.loc 1 1129 0
 2816 043e 23E0     		b	.L212
 2817              	.L191:
1127:..\src/interruptions.c ****             }
 2818              		.loc 1 1127 0
 2819 0440 414B     		ldr	r3, .L216+12
 2820 0442 0022     		movs	r2, #0
 2821 0444 1A70     		strb	r2, [r3]
 2822              		.loc 1 1129 0
 2823 0446 1FE0     		b	.L212
 2824              	.L157:
1130:..\src/interruptions.c ****         
1131:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1132:..\src/interruptions.c ****         case CONTROL_PWM:
1133:..\src/interruptions.c **** 
1134:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 2825              		.loc 1 1134 0
 2826 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2827 044c 3F4A     		ldr	r2, .L216+16
 2828 044e 1B01     		lsls	r3, r3, #4
 2829 0450 1344     		add	r3, r3, r2
 2830 0452 0833     		adds	r3, r3, #8
 2831 0454 1B68     		ldr	r3, [r3]
 2832 0456 FB64     		str	r3, [r7, #76]
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****             if (pwm_input > 0) 
 2833              		.loc 1 1136 0
 2834 0458 FB6C     		ldr	r3, [r7, #76]
 2835 045a 002B     		cmp	r3, #0
 2836 045c 03DD     		ble	.L192
1137:..\src/interruptions.c ****                 motor_dir = TRUE;
 2837              		.loc 1 1137 0
 2838 045e 3A4B     		ldr	r3, .L216+12
 2839 0460 0122     		movs	r2, #1
 2840 0462 1A70     		strb	r2, [r3]
 2841 0464 02E0     		b	.L193
 2842              	.L192:
1138:..\src/interruptions.c ****             else 
1139:..\src/interruptions.c ****                 motor_dir = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 72


 2843              		.loc 1 1139 0
 2844 0466 384B     		ldr	r3, .L216+12
 2845 0468 0022     		movs	r2, #0
 2846 046a 1A70     		strb	r2, [r3]
 2847              	.L193:
1140:..\src/interruptions.c ****             
1141:..\src/interruptions.c **** 
1142:..\src/interruptions.c ****             // pwm_input saturation
1143:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2848              		.loc 1 1143 0
 2849 046c FB6C     		ldr	r3, [r7, #76]
 2850 046e 13F1640F 		cmn	r3, #100
 2851 0472 03DA     		bge	.L194
1144:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2852              		.loc 1 1144 0
 2853 0474 6FF06303 		mvn	r3, #99
 2854 0478 FB64     		str	r3, [r7, #76]
1145:..\src/interruptions.c ****             else {
1146:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1147:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1148:..\src/interruptions.c ****         	}
1149:..\src/interruptions.c **** 
1150:..\src/interruptions.c ****         break;
 2855              		.loc 1 1150 0
 2856 047a 07E0     		b	.L213
 2857              	.L194:
1146:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2858              		.loc 1 1146 0
 2859 047c FB6C     		ldr	r3, [r7, #76]
 2860 047e 642B     		cmp	r3, #100
 2861 0480 04DD     		ble	.L213
1147:..\src/interruptions.c ****         	}
 2862              		.loc 1 1147 0
 2863 0482 6423     		movs	r3, #100
 2864 0484 FB64     		str	r3, [r7, #76]
 2865              		.loc 1 1150 0
 2866 0486 01E0     		b	.L213
 2867              	.L212:
1129:..\src/interruptions.c ****         
 2868              		.loc 1 1129 0
 2869 0488 00BF     		nop
 2870 048a 00E0     		b	.L154
 2871              	.L213:
 2872              		.loc 1 1150 0
 2873 048c 00BF     		nop
 2874              	.L154:
1151:..\src/interruptions.c ****             
1152:..\src/interruptions.c ****     }
1153:..\src/interruptions.c **** 
1154:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1155:..\src/interruptions.c **** 
1156:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2875              		.loc 1 1156 0
 2876 048e FB6C     		ldr	r3, [r7, #76]
 2877 0490 642B     		cmp	r3, #100
 2878 0492 01DD     		ble	.L196
1157:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 73


 2879              		.loc 1 1157 0
 2880 0494 6423     		movs	r3, #100
 2881 0496 FB64     		str	r3, [r7, #76]
 2882              	.L196:
1158:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2883              		.loc 1 1158 0
 2884 0498 FB6C     		ldr	r3, [r7, #76]
 2885 049a 13F1640F 		cmn	r3, #100
 2886 049e 02DA     		bge	.L197
1159:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2887              		.loc 1 1159 0
 2888 04a0 6FF06303 		mvn	r3, #99
 2889 04a4 FB64     		str	r3, [r7, #76]
 2890              	.L197:
1160:..\src/interruptions.c **** 
1161:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 2891              		.loc 1 1161 0
 2892 04a6 3B6C     		ldr	r3, [r7, #64]
 2893 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2894 04ac 012B     		cmp	r3, #1
 2895 04ae 0DD0     		beq	.L198
1162:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 2896              		.loc 1 1162 0
 2897 04b0 FB6C     		ldr	r3, [r7, #76]
 2898 04b2 9B02     		lsls	r3, r3, #10
 2899 04b4 2C4A     		ldr	r2, .L216+44
 2900 04b6 82FB0312 		smull	r1, r2, r2, r3
 2901 04ba 5211     		asrs	r2, r2, #5
 2902 04bc DB17     		asrs	r3, r3, #31
 2903 04be D31A     		subs	r3, r2, r3
 2904 04c0 2A4A     		ldr	r2, .L216+48
 2905 04c2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2906 04c4 02FB03F3 		mul	r3, r2, r3
 2907 04c8 9B12     		asrs	r3, r3, #10
 2908 04ca FB64     		str	r3, [r7, #76]
 2909              	.L198:
1163:..\src/interruptions.c ****  
1164:..\src/interruptions.c ****     //// RATE LIMITER ////
1165:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 2910              		.loc 1 1165 0
 2911 04cc 284B     		ldr	r3, .L216+52
 2912 04ce 1B68     		ldr	r3, [r3]
 2913 04d0 FA6C     		ldr	r2, [r7, #76]
 2914 04d2 D31A     		subs	r3, r2, r3
 2915 04d4 3A6C     		ldr	r2, [r7, #64]
 2916 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2917 04da 9342     		cmp	r3, r2
 2918 04dc 08DD     		ble	.L199
1166:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 2919              		.loc 1 1166 0
 2920 04de 3B6C     		ldr	r3, [r7, #64]
 2921 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2922 04e4 1A46     		mov	r2, r3
 2923 04e6 224B     		ldr	r3, .L216+52
 2924 04e8 1B68     		ldr	r3, [r3]
 2925 04ea 1344     		add	r3, r3, r2
 2926 04ec FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 74


 2927 04ee 10E0     		b	.L200
 2928              	.L199:
1167:..\src/interruptions.c ****     }
1168:..\src/interruptions.c ****     else {
1169:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 2929              		.loc 1 1169 0
 2930 04f0 1F4B     		ldr	r3, .L216+52
 2931 04f2 1B68     		ldr	r3, [r3]
 2932 04f4 FA6C     		ldr	r2, [r7, #76]
 2933 04f6 D21A     		subs	r2, r2, r3
 2934 04f8 3B6C     		ldr	r3, [r7, #64]
 2935 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 2936 04fe 5B42     		negs	r3, r3
 2937 0500 9A42     		cmp	r2, r3
 2938 0502 06DA     		bge	.L200
1170:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 2939              		.loc 1 1170 0
 2940 0504 1A4B     		ldr	r3, .L216+52
 2941 0506 1B68     		ldr	r3, [r3]
 2942 0508 3A6C     		ldr	r2, [r7, #64]
 2943 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 2944 050e 9B1A     		subs	r3, r3, r2
 2945 0510 FB64     		str	r3, [r7, #76]
 2946              	.L200:
1171:..\src/interruptions.c ****     }
1172:..\src/interruptions.c ****     
1173:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2947              		.loc 1 1173 0
 2948 0512 FB6C     		ldr	r3, [r7, #76]
 2949 0514 642B     		cmp	r3, #100
 2950 0516 01DD     		ble	.L201
1174:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2951              		.loc 1 1174 0
 2952 0518 6423     		movs	r3, #100
 2953 051a FB64     		str	r3, [r7, #76]
 2954              	.L201:
1175:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2955              		.loc 1 1175 0
 2956 051c FB6C     		ldr	r3, [r7, #76]
 2957 051e 13F1640F 		cmn	r3, #100
 2958 0522 02DA     		bge	.L202
1176:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2959              		.loc 1 1176 0
 2960 0524 6FF06303 		mvn	r3, #99
 2961 0528 FB64     		str	r3, [r7, #76]
 2962              	.L202:
1177:..\src/interruptions.c ****     
1178:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2963              		.loc 1 1178 0
 2964 052a 114A     		ldr	r2, .L216+52
 2965 052c FB6C     		ldr	r3, [r7, #76]
 2966 052e 1360     		str	r3, [r2]
1179:..\src/interruptions.c **** 	
1180:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2967              		.loc 1 1180 0
 2968 0530 FB6C     		ldr	r3, [r7, #76]
 2969 0532 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 75


 2970 0534 1EDB     		blt	.L203
 2971              		.loc 1 1180 0 is_stmt 0 discriminator 1
 2972 0536 0122     		movs	r2, #1
 2973 0538 1EE0     		b	.L204
 2974              	.L217:
 2975 053a 00BF     		.align	2
 2976              	.L216:
 2977 053c 90000000 		.word	pos_error_sum.10501
 2978 0540 18FCFFFF 		.word	-1000
 2979 0544 94000000 		.word	prev_pos_err.10503
 2980 0548 98000000 		.word	motor_dir.10506
 2981 054c 00000000 		.word	g_ref
 2982 0550 00000000 		.word	tension_valid
 2983 0554 00000000 		.word	g_meas
 2984 0558 9C000000 		.word	curr_error_sum.10502
 2985 055c A0860100 		.word	100000
 2986 0560 6079FEFF 		.word	-100000
 2987 0564 A0000000 		.word	prev_curr_err.10504
 2988 0568 1F85EB51 		.word	1374389535
 2989 056c 00000000 		.word	dev_pwm_limit
 2990 0570 A4000000 		.word	prev_pwm.10505
 2991              	.L203:
 2992              		.loc 1 1180 0 discriminator 2
 2993 0574 4FF0FF32 		mov	r2, #-1
 2994              	.L204:
 2995              		.loc 1 1180 0 discriminator 4
 2996 0578 5A4B     		ldr	r3, .L218
 2997 057a 1A70     		strb	r2, [r3]
1181:..\src/interruptions.c ****     
1182:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 2998              		.loc 1 1182 0 is_stmt 1 discriminator 4
 2999 057c 3B6C     		ldr	r3, [r7, #64]
 3000 057e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3001 0582 012B     		cmp	r3, #1
 3002 0584 40F09680 		bne	.L205
1183:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1184:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3003              		.loc 1 1184 0
 3004 0588 3B6C     		ldr	r3, [r7, #64]
 3005 058a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3006 058e 012B     		cmp	r3, #1
 3007 0590 00F08D80 		beq	.L206
 3008              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3009 0594 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3010 0598 534A     		ldr	r2, .L218+4
 3011 059a 3421     		movs	r1, #52
 3012 059c 01FB03F3 		mul	r3, r1, r3
 3013 05a0 1344     		add	r3, r3, r2
 3014 05a2 1A68     		ldr	r2, [r3]
 3015 05a4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3016 05a8 5049     		ldr	r1, .L218+8
 3017 05aa 3420     		movs	r0, #52
 3018 05ac 00FB03F3 		mul	r3, r0, r3
 3019 05b0 0B44     		add	r3, r3, r1
 3020 05b2 1B68     		ldr	r3, [r3]
 3021 05b4 D31A     		subs	r3, r2, r3
 3022 05b6 312B     		cmp	r3, #49
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 76


 3023 05b8 79DC     		bgt	.L206
1185:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3024              		.loc 1 1185 0 is_stmt 1 discriminator 2
 3025 05ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3026 05be 4A4A     		ldr	r2, .L218+4
 3027 05c0 3421     		movs	r1, #52
 3028 05c2 01FB03F3 		mul	r3, r1, r3
 3029 05c6 1344     		add	r3, r3, r2
 3030 05c8 1A68     		ldr	r2, [r3]
 3031 05ca 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3032 05ce 4749     		ldr	r1, .L218+8
 3033 05d0 3420     		movs	r0, #52
 3034 05d2 00FB03F3 		mul	r3, r0, r3
 3035 05d6 0B44     		add	r3, r3, r1
 3036 05d8 1B68     		ldr	r3, [r3]
 3037 05da D31A     		subs	r3, r2, r3
1184:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3038              		.loc 1 1184 0 discriminator 2
 3039 05dc 13F1310F 		cmn	r3, #49
 3040 05e0 65DB     		blt	.L206
1186:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3041              		.loc 1 1186 0
 3042 05e2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3043 05e6 424A     		ldr	r2, .L218+12
 3044 05e8 1B01     		lsls	r3, r3, #4
 3045 05ea 1344     		add	r3, r3, r2
 3046 05ec 1A68     		ldr	r2, [r3]
 3047 05ee 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3048 05f2 4049     		ldr	r1, .L218+16
 3049 05f4 1B01     		lsls	r3, r3, #4
 3050 05f6 0B44     		add	r3, r3, r1
 3051 05f8 1B68     		ldr	r3, [r3]
 3052 05fa D31A     		subs	r3, r2, r3
1185:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3053              		.loc 1 1185 0
 3054 05fc 632B     		cmp	r3, #99
 3055 05fe 56DC     		bgt	.L206
 3056              		.loc 1 1186 0
 3057 0600 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3058 0604 3A4A     		ldr	r2, .L218+12
 3059 0606 1B01     		lsls	r3, r3, #4
 3060 0608 1344     		add	r3, r3, r2
 3061 060a 1A68     		ldr	r2, [r3]
 3062 060c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3063 0610 3849     		ldr	r1, .L218+16
 3064 0612 1B01     		lsls	r3, r3, #4
 3065 0614 0B44     		add	r3, r3, r1
 3066 0616 1B68     		ldr	r3, [r3]
 3067 0618 D31A     		subs	r3, r2, r3
 3068 061a 13F1630F 		cmn	r3, #99
 3069 061e 46DB     		blt	.L206
1187:..\src/interruptions.c ****             position_counter++;
 3070              		.loc 1 1187 0
 3071 0620 354B     		ldr	r3, .L218+20
 3072 0622 1B68     		ldr	r3, [r3]
 3073 0624 0133     		adds	r3, r3, #1
 3074 0626 344A     		ldr	r2, .L218+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 77


 3075 0628 1360     		str	r3, [r2]
1188:..\src/interruptions.c ****             
1189:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3076              		.loc 1 1189 0
 3077 062a 334B     		ldr	r3, .L218+20
 3078 062c 1B68     		ldr	r3, [r3]
 3079 062e F92B     		cmp	r3, #249
 3080 0630 40D9     		bls	.L205
1190:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3081              		.loc 1 1190 0
 3082 0632 3B6C     		ldr	r3, [r7, #64]
 3083 0634 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3084 0638 002B     		cmp	r3, #0
 3085 063a 11D1     		bne	.L208
 3086              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3087 063c 2F4B     		ldr	r3, .L218+24
 3088 063e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3089 0640 002B     		cmp	r3, #0
 3090 0642 0DD1     		bne	.L208
1191:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3091              		.loc 1 1191 0 is_stmt 1
 3092 0644 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3093 0648 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3094 064c 2749     		ldr	r1, .L218+8
 3095 064e 3420     		movs	r0, #52
 3096 0650 00FB02F2 		mul	r2, r0, r2
 3097 0654 0A44     		add	r2, r2, r1
 3098 0656 1268     		ldr	r2, [r2]
 3099 0658 2949     		ldr	r1, .L218+28
 3100 065a 1B01     		lsls	r3, r3, #4
 3101 065c 0B44     		add	r3, r3, r1
 3102 065e 1A60     		str	r2, [r3]
 3103              	.L208:
1192:..\src/interruptions.c ****                 }
1193:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3104              		.loc 1 1193 0
 3105 0660 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3106 0664 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3107 0668 2049     		ldr	r1, .L218+8
 3108 066a 3420     		movs	r0, #52
 3109 066c 00FB02F2 		mul	r2, r0, r2
 3110 0670 0A44     		add	r2, r2, r1
 3111 0672 1268     		ldr	r2, [r2]
 3112 0674 1F49     		ldr	r1, .L218+16
 3113 0676 1B01     		lsls	r3, r3, #4
 3114 0678 0B44     		add	r3, r3, r1
 3115 067a 1A60     		str	r2, [r3]
1194:..\src/interruptions.c ****                 
1195:..\src/interruptions.c ****                 if (position_counter == 250){
 3116              		.loc 1 1195 0
 3117 067c 1E4B     		ldr	r3, .L218+20
 3118 067e 1B68     		ldr	r3, [r3]
 3119 0680 FA2B     		cmp	r3, #250
 3120 0682 11D1     		bne	.L209
1196:..\src/interruptions.c ****                     // To do only once
1197:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3121              		.loc 1 1197 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 78


 3122 0684 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3123 0688 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3124 068c 1749     		ldr	r1, .L218+8
 3125 068e 3420     		movs	r0, #52
 3126 0690 00FB02F2 		mul	r2, r0, r2
 3127 0694 0A44     		add	r2, r2, r1
 3128 0696 0C32     		adds	r2, r2, #12
 3129 0698 1268     		ldr	r2, [r2]
 3130 069a 1449     		ldr	r1, .L218+8
 3131 069c 3420     		movs	r0, #52
 3132 069e 00FB03F3 		mul	r3, r0, r3
 3133 06a2 0B44     		add	r3, r3, r1
 3134 06a4 1433     		adds	r3, r3, #20
 3135 06a6 1A60     		str	r2, [r3]
 3136              	.L209:
1198:..\src/interruptions.c ****                 }
1199:..\src/interruptions.c ****                 pwm_input = 0;            
 3137              		.loc 1 1199 0
 3138 06a8 0023     		movs	r3, #0
 3139 06aa FB64     		str	r3, [r7, #76]
1189:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3140              		.loc 1 1189 0
 3141 06ac 02E0     		b	.L205
 3142              	.L206:
1200:..\src/interruptions.c ****             }
1201:..\src/interruptions.c ****         }
1202:..\src/interruptions.c ****         else {
1203:..\src/interruptions.c ****             position_counter = 0;
 3143              		.loc 1 1203 0
 3144 06ae 124B     		ldr	r3, .L218+20
 3145 06b0 0022     		movs	r2, #0
 3146 06b2 1A60     		str	r2, [r3]
 3147              	.L205:
1204:..\src/interruptions.c ****         }
1205:..\src/interruptions.c ****     }
1206:..\src/interruptions.c ****     
1207:..\src/interruptions.c ****     if (motor_dir)
 3148              		.loc 1 1207 0
 3149 06b4 134B     		ldr	r3, .L218+32
 3150 06b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3151 06b8 002B     		cmp	r3, #0
 3152 06ba 03D0     		beq	.L210
1208:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3153              		.loc 1 1208 0
 3154 06bc 0120     		movs	r0, #1
 3155 06be FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3156 06c2 02E0     		b	.L211
 3157              	.L210:
1209:..\src/interruptions.c ****     else
1210:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 3158              		.loc 1 1210 0
 3159 06c4 0020     		movs	r0, #0
 3160 06c6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3161              	.L211:
1211:..\src/interruptions.c **** 
1212:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3162              		.loc 1 1212 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 79


 3163 06ca FB6C     		ldr	r3, [r7, #76]
 3164 06cc 002B     		cmp	r3, #0
 3165 06ce B8BF     		it	lt
 3166 06d0 5B42     		rsblt	r3, r3, #0
 3167 06d2 DBB2     		uxtb	r3, r3
 3168 06d4 1846     		mov	r0, r3
 3169 06d6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1213:..\src/interruptions.c **** }
 3170              		.loc 1 1213 0
 3171 06da 00BF     		nop
 3172 06dc 5037     		adds	r7, r7, #80
 3173              		.cfi_def_cfa_offset 8
 3174 06de BD46     		mov	sp, r7
 3175              		.cfi_def_cfa_register 13
 3176              		@ sp needed
 3177 06e0 80BD     		pop	{r7, pc}
 3178              	.L219:
 3179 06e2 00BF     		.align	2
 3180              	.L218:
 3181 06e4 00000000 		.word	pwm_sign
 3182 06e8 00000000 		.word	g_measOld
 3183 06ec 00000000 		.word	g_meas
 3184 06f0 00000000 		.word	g_refOld
 3185 06f4 00000000 		.word	g_ref
 3186 06f8 A8000000 		.word	position_counter.10507
 3187 06fc 00000000 		.word	change_ext_ref_flag
 3188 0700 00000000 		.word	g_refNew
 3189 0704 98000000 		.word	motor_dir.10506
 3190              		.cfi_endproc
 3191              	.LFE70:
 3192              		.size	motor_control_SH, .-motor_control_SH
 3193              		.section	.text.motor_control_generic,"ax",%progbits
 3194              		.align	2
 3195              		.global	motor_control_generic
 3196              		.thumb
 3197              		.thumb_func
 3198              		.type	motor_control_generic, %function
 3199              	motor_control_generic:
 3200              	.LFB71:
1214:..\src/interruptions.c **** 
1215:..\src/interruptions.c **** //==============================================================================
1216:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1217:..\src/interruptions.c **** //==============================================================================
1218:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 3201              		.loc 1 1218 0
 3202              		.cfi_startproc
 3203              		@ args = 0, pretend = 0, frame = 80
 3204              		@ frame_needed = 1, uses_anonymous_args = 0
 3205 0000 90B5     		push	{r4, r7, lr}
 3206              		.cfi_def_cfa_offset 12
 3207              		.cfi_offset 4, -12
 3208              		.cfi_offset 7, -8
 3209              		.cfi_offset 14, -4
 3210 0002 95B0     		sub	sp, sp, #84
 3211              		.cfi_def_cfa_offset 96
 3212 0004 00AF     		add	r7, sp, #0
 3213              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 80


 3214 0006 0346     		mov	r3, r0
 3215 0008 FB71     		strb	r3, [r7, #7]
1219:..\src/interruptions.c ****     
1220:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3216              		.loc 1 1220 0
 3217 000a 0023     		movs	r3, #0
 3218 000c FB64     		str	r3, [r7, #76]
1221:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1222:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1223:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1224:..\src/interruptions.c **** 
1225:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 3219              		.loc 1 1225 0
 3220 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3221 0010 1346     		mov	r3, r2
 3222 0012 DB00     		lsls	r3, r3, #3
 3223 0014 9B1A     		subs	r3, r3, r2
 3224 0016 1B01     		lsls	r3, r3, #4
 3225 0018 B033     		adds	r3, r3, #176
 3226 001a 9C4A     		ldr	r2, .L292
 3227 001c 1344     		add	r3, r3, r2
 3228 001e 7B64     		str	r3, [r7, #68]
1226:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 3229              		.loc 1 1226 0
 3230 0020 7B6C     		ldr	r3, [r7, #68]
 3231 0022 93F86030 		ldrb	r3, [r3, #96]
 3232 0026 87F84330 		strb	r3, [r7, #67]
1227:..\src/interruptions.c ****     
1228:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 3233              		.loc 1 1228 0
 3234 002a 7B6C     		ldr	r3, [r7, #68]
 3235 002c 1B68     		ldr	r3, [r3]
 3236 002e FB63     		str	r3, [r7, #60]
1229:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 3237              		.loc 1 1229 0
 3238 0030 7B6C     		ldr	r3, [r7, #68]
 3239 0032 5B68     		ldr	r3, [r3, #4]
 3240 0034 BB63     		str	r3, [r7, #56]
1230:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 3241              		.loc 1 1230 0
 3242 0036 7B6C     		ldr	r3, [r7, #68]
 3243 0038 9B68     		ldr	r3, [r3, #8]
 3244 003a 7B63     		str	r3, [r7, #52]
1231:..\src/interruptions.c **** 
1232:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 3245              		.loc 1 1232 0
 3246 003c 7B6C     		ldr	r3, [r7, #68]
 3247 003e DB68     		ldr	r3, [r3, #12]
 3248 0040 3B63     		str	r3, [r7, #48]
1233:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 3249              		.loc 1 1233 0
 3250 0042 7B6C     		ldr	r3, [r7, #68]
 3251 0044 1B69     		ldr	r3, [r3, #16]
 3252 0046 FB62     		str	r3, [r7, #44]
1234:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 3253              		.loc 1 1234 0
 3254 0048 7B6C     		ldr	r3, [r7, #68]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 81


 3255 004a 5B69     		ldr	r3, [r3, #20]
 3256 004c BB62     		str	r3, [r7, #40]
1235:..\src/interruptions.c **** 
1236:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 3257              		.loc 1 1236 0
 3258 004e 7B6C     		ldr	r3, [r7, #68]
 3259 0050 9B69     		ldr	r3, [r3, #24]
 3260 0052 7B62     		str	r3, [r7, #36]
1237:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 3261              		.loc 1 1237 0
 3262 0054 7B6C     		ldr	r3, [r7, #68]
 3263 0056 DB69     		ldr	r3, [r3, #28]
 3264 0058 3B62     		str	r3, [r7, #32]
1238:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 3265              		.loc 1 1238 0
 3266 005a 7B6C     		ldr	r3, [r7, #68]
 3267 005c 1B6A     		ldr	r3, [r3, #32]
 3268 005e FB61     		str	r3, [r7, #28]
1239:..\src/interruptions.c ****     
1240:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 3269              		.loc 1 1240 0
 3270 0060 7B6C     		ldr	r3, [r7, #68]
 3271 0062 5B6A     		ldr	r3, [r3, #36]
 3272 0064 BB61     		str	r3, [r7, #24]
1241:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 3273              		.loc 1 1241 0
 3274 0066 7B6C     		ldr	r3, [r7, #68]
 3275 0068 9B6A     		ldr	r3, [r3, #40]
 3276 006a 7B61     		str	r3, [r7, #20]
1242:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 3277              		.loc 1 1242 0
 3278 006c 7B6C     		ldr	r3, [r7, #68]
 3279 006e DB6A     		ldr	r3, [r3, #44]
 3280 0070 3B61     		str	r3, [r7, #16]
1243:..\src/interruptions.c **** 
1244:..\src/interruptions.c ****     // Static Variables
1245:..\src/interruptions.c **** 
1246:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1247:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1248:..\src/interruptions.c ****     
1249:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1250:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1251:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1252:..\src/interruptions.c **** 
1253:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1254:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1255:..\src/interruptions.c **** 
1256:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1257:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 3281              		.loc 1 1257 0
 3282 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3283 0074 1B01     		lsls	r3, r3, #4
 3284 0076 864A     		ldr	r2, .L292+4
 3285 0078 9918     		adds	r1, r3, r2
 3286 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3287 007c 1B01     		lsls	r3, r3, #4
 3288 007e 854A     		ldr	r2, .L292+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 82


 3289 0080 1A44     		add	r2, r2, r3
 3290 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3291 0084 1846     		mov	r0, r3
 3292 0086 FFF7FEFF 		bl	compute_reference
1258:..\src/interruptions.c ****     
1259:..\src/interruptions.c ****    
1260:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3293              		.loc 1 1260 0
 3294 008a 7B6C     		ldr	r3, [r7, #68]
 3295 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3296 0090 032B     		cmp	r3, #3
 3297 0092 00F25482 		bhi	.L221
 3298 0096 01A2     		adr	r2, .L223
 3299 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3300              		.p2align 2
 3301              	.L223:
 3302 009c C1020000 		.word	.L222+1
 3303 00a0 CB040000 		.word	.L224+1
 3304 00a4 99030000 		.word	.L225+1
 3305 00a8 AD000000 		.word	.L226+1
 3306              		.p2align 1
 3307              	.L226:
1261:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1262:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1263:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3308              		.loc 1 1263 0
 3309 00ac 784B     		ldr	r3, .L292+4
 3310 00ae 1A68     		ldr	r2, [r3]
 3311 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3312 00b4 7849     		ldr	r1, .L292+12
 3313 00b6 3420     		movs	r0, #52
 3314 00b8 00FB03F3 		mul	r3, r0, r3
 3315 00bc 0B44     		add	r3, r3, r1
 3316 00be 1B68     		ldr	r3, [r3]
 3317 00c0 D31A     		subs	r3, r2, r3
 3318 00c2 FB60     		str	r3, [r7, #12]
1264:..\src/interruptions.c **** 
1265:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3319              		.loc 1 1265 0
 3320 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3321 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3322 00c8 7449     		ldr	r1, .L292+16
 3323 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3324 00ce FA68     		ldr	r2, [r7, #12]
 3325 00d0 0A44     		add	r2, r2, r1
 3326 00d2 7249     		ldr	r1, .L292+16
 3327 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1266:..\src/interruptions.c **** 
1267:..\src/interruptions.c ****             // error_sum saturation
1268:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 3328              		.loc 1 1268 0
 3329 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3330 00da 704A     		ldr	r2, .L292+16
 3331 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3332 00e0 6F4A     		ldr	r2, .L292+20
 3333 00e2 9342     		cmp	r3, r2
 3334 00e4 05DD     		ble	.L227
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 83


1269:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3335              		.loc 1 1269 0
 3336 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3337 00e8 6C4A     		ldr	r2, .L292+16
 3338 00ea 6D49     		ldr	r1, .L292+20
 3339 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 3340 00f0 0BE0     		b	.L228
 3341              	.L227:
1270:..\src/interruptions.c ****             else {
1271:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3342              		.loc 1 1271 0
 3343 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3344 00f4 694A     		ldr	r2, .L292+16
 3345 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3346 00fa 6A4A     		ldr	r2, .L292+24
 3347 00fc 9342     		cmp	r3, r2
 3348 00fe 04DA     		bge	.L228
1272:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3349              		.loc 1 1272 0
 3350 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3351 0102 664A     		ldr	r2, .L292+16
 3352 0104 6749     		ldr	r1, .L292+24
 3353 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 3354              	.L228:
1273:..\src/interruptions.c ****             }
1274:..\src/interruptions.c ****             
1275:..\src/interruptions.c ****             // ------ position PID control ------
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****             i_ref = 0;
 3355              		.loc 1 1277 0
 3356 010a 0023     		movs	r3, #0
 3357 010c BB64     		str	r3, [r7, #72]
1278:..\src/interruptions.c ****             
1279:..\src/interruptions.c ****             // Proportional
1280:..\src/interruptions.c ****             if (k_p_dl != 0)
 3358              		.loc 1 1280 0
 3359 010e 7B6A     		ldr	r3, [r7, #36]
 3360 0110 002B     		cmp	r3, #0
 3361 0112 07D0     		beq	.L229
1281:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3362              		.loc 1 1281 0
 3363 0114 7B6A     		ldr	r3, [r7, #36]
 3364 0116 FA68     		ldr	r2, [r7, #12]
 3365 0118 02FB03F3 		mul	r3, r2, r3
 3366 011c 1B14     		asrs	r3, r3, #16
 3367 011e BA6C     		ldr	r2, [r7, #72]
 3368 0120 1344     		add	r3, r3, r2
 3369 0122 BB64     		str	r3, [r7, #72]
 3370              	.L229:
1282:..\src/interruptions.c **** 
1283:..\src/interruptions.c ****             // Integral
1284:..\src/interruptions.c ****             if (k_i_dl != 0)
 3371              		.loc 1 1284 0
 3372 0124 3B6A     		ldr	r3, [r7, #32]
 3373 0126 002B     		cmp	r3, #0
 3374 0128 0AD0     		beq	.L230
1285:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 84


 3375              		.loc 1 1285 0
 3376 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3377 012c 5B4A     		ldr	r2, .L292+16
 3378 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3379 0132 3A6A     		ldr	r2, [r7, #32]
 3380 0134 02FB03F3 		mul	r3, r2, r3
 3381 0138 1B14     		asrs	r3, r3, #16
 3382 013a BA6C     		ldr	r2, [r7, #72]
 3383 013c 1344     		add	r3, r3, r2
 3384 013e BB64     		str	r3, [r7, #72]
 3385              	.L230:
1286:..\src/interruptions.c **** 
1287:..\src/interruptions.c ****             // Derivative
1288:..\src/interruptions.c ****             if (k_d_dl != 0)
 3386              		.loc 1 1288 0
 3387 0140 FB69     		ldr	r3, [r7, #28]
 3388 0142 002B     		cmp	r3, #0
 3389 0144 0CD0     		beq	.L231
1289:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3390              		.loc 1 1289 0
 3391 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3392 0148 574A     		ldr	r2, .L292+28
 3393 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3394 014e FA68     		ldr	r2, [r7, #12]
 3395 0150 D31A     		subs	r3, r2, r3
 3396 0152 FA69     		ldr	r2, [r7, #28]
 3397 0154 02FB03F3 		mul	r3, r2, r3
 3398 0158 1B14     		asrs	r3, r3, #16
 3399 015a BA6C     		ldr	r2, [r7, #72]
 3400 015c 1344     		add	r3, r3, r2
 3401 015e BB64     		str	r3, [r7, #72]
 3402              	.L231:
1290:..\src/interruptions.c ****                         
1291:..\src/interruptions.c ****             // Update previous position
1292:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3403              		.loc 1 1292 0
 3404 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3405 0162 5149     		ldr	r1, .L292+28
 3406 0164 FA68     		ldr	r2, [r7, #12]
 3407 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1293:..\src/interruptions.c **** 
1294:..\src/interruptions.c ****             // motor direction depends on i_ref
1295:..\src/interruptions.c ****             if (i_ref >= 0)
 3408              		.loc 1 1295 0
 3409 016a BB6C     		ldr	r3, [r7, #72]
 3410 016c 002B     		cmp	r3, #0
 3411 016e 04DB     		blt	.L232
1296:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3412              		.loc 1 1296 0
 3413 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3414 0172 4E4A     		ldr	r2, .L292+32
 3415 0174 0121     		movs	r1, #1
 3416 0176 D154     		strb	r1, [r2, r3]
 3417 0178 03E0     		b	.L233
 3418              	.L232:
1297:..\src/interruptions.c ****             else
1298:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 85


 3419              		.loc 1 1298 0
 3420 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3421 017c 4B4A     		ldr	r2, .L292+32
 3422 017e 0021     		movs	r1, #0
 3423 0180 D154     		strb	r1, [r2, r3]
 3424              	.L233:
1299:..\src/interruptions.c **** 
1300:..\src/interruptions.c ****             // saturate max current
1301:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3425              		.loc 1 1301 0
 3426 0182 7B6C     		ldr	r3, [r7, #68]
 3427 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3428 0188 1A46     		mov	r2, r3
 3429 018a BB6C     		ldr	r3, [r7, #72]
 3430 018c 9A42     		cmp	r2, r3
 3431 018e 04DA     		bge	.L234
1302:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3432              		.loc 1 1302 0
 3433 0190 7B6C     		ldr	r3, [r7, #68]
 3434 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3435 0196 BB64     		str	r3, [r7, #72]
 3436 0198 0BE0     		b	.L235
 3437              	.L234:
1303:..\src/interruptions.c ****             else {
1304:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3438              		.loc 1 1304 0
 3439 019a 7B6C     		ldr	r3, [r7, #68]
 3440 019c B3F95C30 		ldrsh	r3, [r3, #92]
 3441 01a0 5A42     		negs	r2, r3
 3442 01a2 BB6C     		ldr	r3, [r7, #72]
 3443 01a4 9A42     		cmp	r2, r3
 3444 01a6 04DD     		ble	.L235
1305:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3445              		.loc 1 1305 0
 3446 01a8 7B6C     		ldr	r3, [r7, #68]
 3447 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 3448 01ae 5B42     		negs	r3, r3
 3449 01b0 BB64     		str	r3, [r7, #72]
 3450              	.L235:
1306:..\src/interruptions.c ****         	}
1307:..\src/interruptions.c **** 
1308:..\src/interruptions.c ****             // current error and curr error sum
1309:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3451              		.loc 1 1309 0
 3452 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3453 01b6 384A     		ldr	r2, .L292+12
 3454 01b8 3421     		movs	r1, #52
 3455 01ba 01FB03F3 		mul	r3, r1, r3
 3456 01be 1344     		add	r3, r3, r2
 3457 01c0 0C33     		adds	r3, r3, #12
 3458 01c2 1B68     		ldr	r3, [r3]
 3459 01c4 BA6C     		ldr	r2, [r7, #72]
 3460 01c6 D31A     		subs	r3, r2, r3
 3461 01c8 BB60     		str	r3, [r7, #8]
1310:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3462              		.loc 1 1310 0
 3463 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 86


 3464 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3465 01ce 3849     		ldr	r1, .L292+36
 3466 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3467 01d4 BA68     		ldr	r2, [r7, #8]
 3468 01d6 0A44     		add	r2, r2, r1
 3469 01d8 3549     		ldr	r1, .L292+36
 3470 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1311:..\src/interruptions.c ****             
1312:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3471              		.loc 1 1312 0
 3472 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3473 01e0 334A     		ldr	r2, .L292+36
 3474 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3475 01e6 334A     		ldr	r2, .L292+40
 3476 01e8 9342     		cmp	r3, r2
 3477 01ea 05DD     		ble	.L236
1313:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3478              		.loc 1 1313 0
 3479 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3480 01ee 304A     		ldr	r2, .L292+36
 3481 01f0 3049     		ldr	r1, .L292+40
 3482 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 3483 01f6 0BE0     		b	.L237
 3484              	.L236:
1314:..\src/interruptions.c ****             else {
1315:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3485              		.loc 1 1315 0
 3486 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3487 01fa 2D4A     		ldr	r2, .L292+36
 3488 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3489 0200 2D4A     		ldr	r2, .L292+44
 3490 0202 9342     		cmp	r3, r2
 3491 0204 04DA     		bge	.L237
1316:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3492              		.loc 1 1316 0
 3493 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3494 0208 294A     		ldr	r2, .L292+36
 3495 020a 2B49     		ldr	r1, .L292+44
 3496 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 3497              	.L237:
1317:..\src/interruptions.c ****             }
1318:..\src/interruptions.c **** 
1319:..\src/interruptions.c ****             // ----- current PID control -----
1320:..\src/interruptions.c **** 
1321:..\src/interruptions.c ****             pwm_input = 0;
 3498              		.loc 1 1321 0
 3499 0210 0023     		movs	r3, #0
 3500 0212 FB64     		str	r3, [r7, #76]
1322:..\src/interruptions.c **** 
1323:..\src/interruptions.c ****             // Proportional
1324:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3501              		.loc 1 1324 0
 3502 0214 BB69     		ldr	r3, [r7, #24]
 3503 0216 002B     		cmp	r3, #0
 3504 0218 07D0     		beq	.L238
1325:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3505              		.loc 1 1325 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 87


 3506 021a BB69     		ldr	r3, [r7, #24]
 3507 021c BA68     		ldr	r2, [r7, #8]
 3508 021e 02FB03F3 		mul	r3, r2, r3
 3509 0222 1B14     		asrs	r3, r3, #16
 3510 0224 FA6C     		ldr	r2, [r7, #76]
 3511 0226 1344     		add	r3, r3, r2
 3512 0228 FB64     		str	r3, [r7, #76]
 3513              	.L238:
1326:..\src/interruptions.c **** 
1327:..\src/interruptions.c ****             // Integral
1328:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3514              		.loc 1 1328 0
 3515 022a 7B69     		ldr	r3, [r7, #20]
 3516 022c 002B     		cmp	r3, #0
 3517 022e 0AD0     		beq	.L239
1329:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3518              		.loc 1 1329 0
 3519 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3520 0232 1F4A     		ldr	r2, .L292+36
 3521 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3522 0238 7A69     		ldr	r2, [r7, #20]
 3523 023a 02FB03F3 		mul	r3, r2, r3
 3524 023e 1B14     		asrs	r3, r3, #16
 3525 0240 FA6C     		ldr	r2, [r7, #76]
 3526 0242 1344     		add	r3, r3, r2
 3527 0244 FB64     		str	r3, [r7, #76]
 3528              	.L239:
1330:..\src/interruptions.c **** 
1331:..\src/interruptions.c ****             // Derivative
1332:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3529              		.loc 1 1332 0
 3530 0246 3B69     		ldr	r3, [r7, #16]
 3531 0248 002B     		cmp	r3, #0
 3532 024a 0CD0     		beq	.L240
1333:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3533              		.loc 1 1333 0
 3534 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3535 024e 1B4A     		ldr	r2, .L292+48
 3536 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3537 0254 BA68     		ldr	r2, [r7, #8]
 3538 0256 D31A     		subs	r3, r2, r3
 3539 0258 3A69     		ldr	r2, [r7, #16]
 3540 025a 02FB03F3 		mul	r3, r2, r3
 3541 025e 1B14     		asrs	r3, r3, #16
 3542 0260 FA6C     		ldr	r2, [r7, #76]
 3543 0262 1344     		add	r3, r3, r2
 3544 0264 FB64     		str	r3, [r7, #76]
 3545              	.L240:
1334:..\src/interruptions.c **** 
1335:..\src/interruptions.c ****             // pwm_input saturation
1336:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3546              		.loc 1 1336 0
 3547 0266 FB6C     		ldr	r3, [r7, #76]
 3548 0268 13F1640F 		cmn	r3, #100
 3549 026c 03DA     		bge	.L241
1337:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3550              		.loc 1 1337 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 88


 3551 026e 6FF06303 		mvn	r3, #99
 3552 0272 FB64     		str	r3, [r7, #76]
 3553 0274 04E0     		b	.L242
 3554              	.L241:
1338:..\src/interruptions.c ****             else {
1339:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3555              		.loc 1 1339 0
 3556 0276 FB6C     		ldr	r3, [r7, #76]
 3557 0278 642B     		cmp	r3, #100
 3558 027a 01DD     		ble	.L242
1340:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3559              		.loc 1 1340 0
 3560 027c 6423     		movs	r3, #100
 3561 027e FB64     		str	r3, [r7, #76]
 3562              	.L242:
1341:..\src/interruptions.c ****             }
1342:..\src/interruptions.c **** 
1343:..\src/interruptions.c ****             // Update previous current
1344:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3563              		.loc 1 1344 0
 3564 0280 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3565 0282 0E49     		ldr	r1, .L292+48
 3566 0284 BA68     		ldr	r2, [r7, #8]
 3567 0286 41F82320 		str	r2, [r1, r3, lsl #2]
1345:..\src/interruptions.c **** 
1346:..\src/interruptions.c ****         break;
 3568              		.loc 1 1346 0
 3569 028a 58E1     		b	.L221
 3570              	.L293:
 3571              		.align	2
 3572              	.L292:
 3573 028c 00000000 		.word	c_mem
 3574 0290 00000000 		.word	g_ref
 3575 0294 00000000 		.word	g_refOld
 3576 0298 00000000 		.word	g_meas
 3577 029c AC000000 		.word	pos_error_sum.10534
 3578 02a0 80F0FA02 		.word	50000000
 3579 02a4 800F05FD 		.word	-50000000
 3580 02a8 B4000000 		.word	prev_pos_err.10536
 3581 02ac BC000000 		.word	motor_dir.10539
 3582 02b0 C0000000 		.word	curr_error_sum.10535
 3583 02b4 A0860100 		.word	100000
 3584 02b8 6079FEFF 		.word	-100000
 3585 02bc C8000000 		.word	prev_curr_err.10537
 3586              	.L222:
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1349:..\src/interruptions.c ****         case CONTROL_ANGLE:
1350:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 3587              		.loc 1 1350 0
 3588 02c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3589 02c2 934A     		ldr	r2, .L294
 3590 02c4 1B01     		lsls	r3, r3, #4
 3591 02c6 1344     		add	r3, r3, r2
 3592 02c8 1A68     		ldr	r2, [r3]
 3593 02ca 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3594 02ce 9149     		ldr	r1, .L294+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 89


 3595 02d0 3420     		movs	r0, #52
 3596 02d2 00FB03F3 		mul	r3, r0, r3
 3597 02d6 0B44     		add	r3, r3, r1
 3598 02d8 1B68     		ldr	r3, [r3]
 3599 02da D31A     		subs	r3, r2, r3
 3600 02dc FB60     		str	r3, [r7, #12]
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3601              		.loc 1 1352 0
 3602 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3603 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3604 02e2 8D49     		ldr	r1, .L294+8
 3605 02e4 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3606 02e8 FA68     		ldr	r2, [r7, #12]
 3607 02ea 0A44     		add	r2, r2, r1
 3608 02ec 8A49     		ldr	r1, .L294+8
 3609 02ee 41F82320 		str	r2, [r1, r3, lsl #2]
1353:..\src/interruptions.c **** 
1354:..\src/interruptions.c ****             // anti-windup (for integral control)
1355:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 3610              		.loc 1 1355 0
 3611 02f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3612 02f4 884A     		ldr	r2, .L294+8
 3613 02f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3614 02fa B3F57A7F 		cmp	r3, #1000
 3615 02fe 06DD     		ble	.L243
1356:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 3616              		.loc 1 1356 0
 3617 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3618 0302 854A     		ldr	r2, .L294+8
 3619 0304 4FF47A71 		mov	r1, #1000
 3620 0308 42F82310 		str	r1, [r2, r3, lsl #2]
 3621 030c 0BE0     		b	.L244
 3622              	.L243:
1357:..\src/interruptions.c ****             else {
1358:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 3623              		.loc 1 1358 0
 3624 030e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3625 0310 814A     		ldr	r2, .L294+8
 3626 0312 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3627 0316 13F57A7F 		cmn	r3, #1000
 3628 031a 04DA     		bge	.L244
1359:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 3629              		.loc 1 1359 0
 3630 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3631 031e 7E4A     		ldr	r2, .L294+8
 3632 0320 7E49     		ldr	r1, .L294+12
 3633 0322 42F82310 		str	r1, [r2, r3, lsl #2]
 3634              	.L244:
1360:..\src/interruptions.c ****             }
1361:..\src/interruptions.c **** 
1362:..\src/interruptions.c ****             // Proportional
1363:..\src/interruptions.c ****             if (k_p != 0) 
 3635              		.loc 1 1363 0
 3636 0326 FB6B     		ldr	r3, [r7, #60]
 3637 0328 002B     		cmp	r3, #0
 3638 032a 05D0     		beq	.L245
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 90


1364:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3639              		.loc 1 1364 0
 3640 032c FB6B     		ldr	r3, [r7, #60]
 3641 032e FA68     		ldr	r2, [r7, #12]
 3642 0330 02FB03F3 		mul	r3, r2, r3
 3643 0334 1B14     		asrs	r3, r3, #16
 3644 0336 FB64     		str	r3, [r7, #76]
 3645              	.L245:
1365:..\src/interruptions.c ****             
1366:..\src/interruptions.c **** 
1367:..\src/interruptions.c ****             // Integral
1368:..\src/interruptions.c ****             if (k_i != 0) 
 3646              		.loc 1 1368 0
 3647 0338 BB6B     		ldr	r3, [r7, #56]
 3648 033a 002B     		cmp	r3, #0
 3649 033c 0AD0     		beq	.L246
1369:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 3650              		.loc 1 1369 0
 3651 033e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3652 0340 754A     		ldr	r2, .L294+8
 3653 0342 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3654 0346 BA6B     		ldr	r2, [r7, #56]
 3655 0348 02FB03F3 		mul	r3, r2, r3
 3656 034c 1B14     		asrs	r3, r3, #16
 3657 034e FA6C     		ldr	r2, [r7, #76]
 3658 0350 1344     		add	r3, r3, r2
 3659 0352 FB64     		str	r3, [r7, #76]
 3660              	.L246:
1370:..\src/interruptions.c ****             
1371:..\src/interruptions.c **** 
1372:..\src/interruptions.c ****             // Derivative
1373:..\src/interruptions.c ****             if (k_d != 0) 
 3661              		.loc 1 1373 0
 3662 0354 7B6B     		ldr	r3, [r7, #52]
 3663 0356 002B     		cmp	r3, #0
 3664 0358 0CD0     		beq	.L247
1374:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 3665              		.loc 1 1374 0
 3666 035a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3667 035c 704A     		ldr	r2, .L294+16
 3668 035e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3669 0362 FA68     		ldr	r2, [r7, #12]
 3670 0364 D31A     		subs	r3, r2, r3
 3671 0366 7A6B     		ldr	r2, [r7, #52]
 3672 0368 02FB03F3 		mul	r3, r2, r3
 3673 036c 1B14     		asrs	r3, r3, #16
 3674 036e FA6C     		ldr	r2, [r7, #76]
 3675 0370 1344     		add	r3, r3, r2
 3676 0372 FB64     		str	r3, [r7, #76]
 3677              	.L247:
1375:..\src/interruptions.c ****             
1376:..\src/interruptions.c **** 
1377:..\src/interruptions.c ****             // Update measure
1378:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3678              		.loc 1 1378 0
 3679 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3680 0376 6A49     		ldr	r1, .L294+16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 91


 3681 0378 FA68     		ldr	r2, [r7, #12]
 3682 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1379:..\src/interruptions.c **** 
1380:..\src/interruptions.c ****             if (pwm_input > 0)
 3683              		.loc 1 1380 0
 3684 037e FB6C     		ldr	r3, [r7, #76]
 3685 0380 002B     		cmp	r3, #0
 3686 0382 04DD     		ble	.L248
1381:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3687              		.loc 1 1381 0
 3688 0384 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3689 0386 674A     		ldr	r2, .L294+20
 3690 0388 0121     		movs	r1, #1
 3691 038a D154     		strb	r1, [r2, r3]
1382:..\src/interruptions.c ****             else
1383:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1384:..\src/interruptions.c **** 
1385:..\src/interruptions.c ****         break;
 3692              		.loc 1 1385 0
 3693 038c D7E0     		b	.L221
 3694              	.L248:
1383:..\src/interruptions.c **** 
 3695              		.loc 1 1383 0
 3696 038e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3697 0390 644A     		ldr	r2, .L294+20
 3698 0392 0021     		movs	r1, #0
 3699 0394 D154     		strb	r1, [r2, r3]
 3700              		.loc 1 1385 0
 3701 0396 D2E0     		b	.L221
 3702              	.L225:
1386:..\src/interruptions.c **** 
1387:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1388:..\src/interruptions.c ****         case CONTROL_CURRENT:
1389:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 3703              		.loc 1 1389 0
 3704 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3705 039a 5D4A     		ldr	r2, .L294
 3706 039c 1B01     		lsls	r3, r3, #4
 3707 039e 1344     		add	r3, r3, r2
 3708 03a0 0C33     		adds	r3, r3, #12
 3709 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3710 03a4 002B     		cmp	r3, #0
 3711 03a6 00F0B180 		beq	.L289
 3712              		.loc 1 1389 0 is_stmt 0 discriminator 1
 3713 03aa 5F4B     		ldr	r3, .L294+24
 3714 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3715 03ae 002B     		cmp	r3, #0
 3716 03b0 00F0AC80 		beq	.L289
1390:..\src/interruptions.c ****                 
1391:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 3717              		.loc 1 1391 0 is_stmt 1
 3718 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3719 03b6 564A     		ldr	r2, .L294
 3720 03b8 1B01     		lsls	r3, r3, #4
 3721 03ba 1344     		add	r3, r3, r2
 3722 03bc 0433     		adds	r3, r3, #4
 3723 03be 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 92


 3724 03c0 BB64     		str	r3, [r7, #72]
1392:..\src/interruptions.c **** 
1393:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 3725              		.loc 1 1393 0
 3726 03c2 7B6C     		ldr	r3, [r7, #68]
 3727 03c4 B3F95C30 		ldrsh	r3, [r3, #92]
 3728 03c8 1A46     		mov	r2, r3
 3729 03ca BB6C     		ldr	r3, [r7, #72]
 3730 03cc 9A42     		cmp	r2, r3
 3731 03ce 04DA     		bge	.L251
1394:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 3732              		.loc 1 1394 0
 3733 03d0 7B6C     		ldr	r3, [r7, #68]
 3734 03d2 B3F95C30 		ldrsh	r3, [r3, #92]
 3735 03d6 BB64     		str	r3, [r7, #72]
 3736 03d8 0BE0     		b	.L252
 3737              	.L251:
1395:..\src/interruptions.c ****                 else {
1396:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 3738              		.loc 1 1396 0
 3739 03da 7B6C     		ldr	r3, [r7, #68]
 3740 03dc B3F95C30 		ldrsh	r3, [r3, #92]
 3741 03e0 5A42     		negs	r2, r3
 3742 03e2 BB6C     		ldr	r3, [r7, #72]
 3743 03e4 9A42     		cmp	r2, r3
 3744 03e6 04DD     		ble	.L252
1397:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 3745              		.loc 1 1397 0
 3746 03e8 7B6C     		ldr	r3, [r7, #68]
 3747 03ea B3F95C30 		ldrsh	r3, [r3, #92]
 3748 03ee 5B42     		negs	r3, r3
 3749 03f0 BB64     		str	r3, [r7, #72]
 3750              	.L252:
1398:..\src/interruptions.c ****                 }
1399:..\src/interruptions.c ****                 
1400:..\src/interruptions.c ****                 // current error
1401:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 3751              		.loc 1 1401 0
 3752 03f2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3753 03f6 474A     		ldr	r2, .L294+4
 3754 03f8 3421     		movs	r1, #52
 3755 03fa 01FB03F3 		mul	r3, r1, r3
 3756 03fe 1344     		add	r3, r3, r2
 3757 0400 0C33     		adds	r3, r3, #12
 3758 0402 1B68     		ldr	r3, [r3]
 3759 0404 BA6C     		ldr	r2, [r7, #72]
 3760 0406 D31A     		subs	r3, r2, r3
 3761 0408 BB60     		str	r3, [r7, #8]
1402:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 3762              		.loc 1 1402 0
 3763 040a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3764 040c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3765 040e 4749     		ldr	r1, .L294+28
 3766 0410 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3767 0414 BA68     		ldr	r2, [r7, #8]
 3768 0416 0A44     		add	r2, r2, r1
 3769 0418 4449     		ldr	r1, .L294+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 93


 3770 041a 41F82320 		str	r2, [r1, r3, lsl #2]
1403:..\src/interruptions.c ****                 
1404:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3771              		.loc 1 1404 0
 3772 041e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3773 0420 424A     		ldr	r2, .L294+28
 3774 0422 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3775 0426 424A     		ldr	r2, .L294+32
 3776 0428 9342     		cmp	r3, r2
 3777 042a 05DD     		ble	.L253
1405:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3778              		.loc 1 1405 0
 3779 042c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3780 042e 3F4A     		ldr	r2, .L294+28
 3781 0430 3F49     		ldr	r1, .L294+32
 3782 0432 42F82310 		str	r1, [r2, r3, lsl #2]
 3783 0436 0BE0     		b	.L254
 3784              	.L253:
1406:..\src/interruptions.c ****                 else {
1407:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 3785              		.loc 1 1407 0
 3786 0438 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3787 043a 3C4A     		ldr	r2, .L294+28
 3788 043c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3789 0440 3C4A     		ldr	r2, .L294+36
 3790 0442 9342     		cmp	r3, r2
 3791 0444 04DA     		bge	.L254
1408:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3792              		.loc 1 1408 0
 3793 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3794 0448 384A     		ldr	r2, .L294+28
 3795 044a 3A49     		ldr	r1, .L294+36
 3796 044c 42F82310 		str	r1, [r2, r3, lsl #2]
 3797              	.L254:
1409:..\src/interruptions.c ****                 }
1410:..\src/interruptions.c **** 
1411:..\src/interruptions.c ****                 pwm_input = 0;
 3798              		.loc 1 1411 0
 3799 0450 0023     		movs	r3, #0
 3800 0452 FB64     		str	r3, [r7, #76]
1412:..\src/interruptions.c **** 
1413:..\src/interruptions.c ****                 // Proportional
1414:..\src/interruptions.c ****                 if (k_p_c != 0)
 3801              		.loc 1 1414 0
 3802 0454 3B6B     		ldr	r3, [r7, #48]
 3803 0456 002B     		cmp	r3, #0
 3804 0458 07D0     		beq	.L255
1415:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3805              		.loc 1 1415 0
 3806 045a 3B6B     		ldr	r3, [r7, #48]
 3807 045c BA68     		ldr	r2, [r7, #8]
 3808 045e 02FB03F3 		mul	r3, r2, r3
 3809 0462 1B14     		asrs	r3, r3, #16
 3810 0464 FA6C     		ldr	r2, [r7, #76]
 3811 0466 1344     		add	r3, r3, r2
 3812 0468 FB64     		str	r3, [r7, #76]
 3813              	.L255:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 94


1416:..\src/interruptions.c **** 
1417:..\src/interruptions.c ****                 // Integral
1418:..\src/interruptions.c ****                 if (k_i_c != 0)
 3814              		.loc 1 1418 0
 3815 046a FB6A     		ldr	r3, [r7, #44]
 3816 046c 002B     		cmp	r3, #0
 3817 046e 0AD0     		beq	.L256
1419:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 3818              		.loc 1 1419 0
 3819 0470 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3820 0472 2E4A     		ldr	r2, .L294+28
 3821 0474 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3822 0478 FA6A     		ldr	r2, [r7, #44]
 3823 047a 02FB03F3 		mul	r3, r2, r3
 3824 047e 1B14     		asrs	r3, r3, #16
 3825 0480 FA6C     		ldr	r2, [r7, #76]
 3826 0482 1344     		add	r3, r3, r2
 3827 0484 FB64     		str	r3, [r7, #76]
 3828              	.L256:
1420:..\src/interruptions.c **** 
1421:..\src/interruptions.c ****                 // Derivative
1422:..\src/interruptions.c ****                 if (k_d_c != 0)
 3829              		.loc 1 1422 0
 3830 0486 BB6A     		ldr	r3, [r7, #40]
 3831 0488 002B     		cmp	r3, #0
 3832 048a 0CD0     		beq	.L257
1423:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 3833              		.loc 1 1423 0
 3834 048c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3835 048e 2A4A     		ldr	r2, .L294+40
 3836 0490 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3837 0494 BA68     		ldr	r2, [r7, #8]
 3838 0496 D31A     		subs	r3, r2, r3
 3839 0498 BA6A     		ldr	r2, [r7, #40]
 3840 049a 02FB03F3 		mul	r3, r2, r3
 3841 049e 1B14     		asrs	r3, r3, #16
 3842 04a0 FA6C     		ldr	r2, [r7, #76]
 3843 04a2 1344     		add	r3, r3, r2
 3844 04a4 FB64     		str	r3, [r7, #76]
 3845              	.L257:
1424:..\src/interruptions.c ****                 
1425:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 3846              		.loc 1 1425 0
 3847 04a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3848 04a8 2349     		ldr	r1, .L294+40
 3849 04aa BA68     		ldr	r2, [r7, #8]
 3850 04ac 41F82320 		str	r2, [r1, r3, lsl #2]
1426:..\src/interruptions.c ****                 
1427:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3851              		.loc 1 1427 0
 3852 04b0 FB6C     		ldr	r3, [r7, #76]
 3853 04b2 002B     		cmp	r3, #0
 3854 04b4 04DB     		blt	.L258
1428:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 3855              		.loc 1 1428 0
 3856 04b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3857 04b8 1A4A     		ldr	r2, .L294+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 95


 3858 04ba 0121     		movs	r1, #1
 3859 04bc D154     		strb	r1, [r2, r3]
1429:..\src/interruptions.c ****                 else
1430:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1431:..\src/interruptions.c ****             }
1432:..\src/interruptions.c ****         break;
 3860              		.loc 1 1432 0
 3861 04be 25E0     		b	.L289
 3862              	.L258:
1430:..\src/interruptions.c ****             }
 3863              		.loc 1 1430 0
 3864 04c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3865 04c2 184A     		ldr	r2, .L294+20
 3866 04c4 0021     		movs	r1, #0
 3867 04c6 D154     		strb	r1, [r2, r3]
 3868              		.loc 1 1432 0
 3869 04c8 20E0     		b	.L289
 3870              	.L224:
1433:..\src/interruptions.c ****         
1434:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1435:..\src/interruptions.c ****         case CONTROL_PWM:
1436:..\src/interruptions.c **** 
1437:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 3871              		.loc 1 1437 0
 3872 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3873 04cc 104A     		ldr	r2, .L294
 3874 04ce 1B01     		lsls	r3, r3, #4
 3875 04d0 1344     		add	r3, r3, r2
 3876 04d2 0833     		adds	r3, r3, #8
 3877 04d4 1B68     		ldr	r3, [r3]
 3878 04d6 FB64     		str	r3, [r7, #76]
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****             if (pwm_input > 0) 
 3879              		.loc 1 1439 0
 3880 04d8 FB6C     		ldr	r3, [r7, #76]
 3881 04da 002B     		cmp	r3, #0
 3882 04dc 04DD     		ble	.L259
1440:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3883              		.loc 1 1440 0
 3884 04de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3885 04e0 104A     		ldr	r2, .L294+20
 3886 04e2 0121     		movs	r1, #1
 3887 04e4 D154     		strb	r1, [r2, r3]
 3888 04e6 03E0     		b	.L260
 3889              	.L259:
1441:..\src/interruptions.c ****             else 
1442:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3890              		.loc 1 1442 0
 3891 04e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3892 04ea 0E4A     		ldr	r2, .L294+20
 3893 04ec 0021     		movs	r1, #0
 3894 04ee D154     		strb	r1, [r2, r3]
 3895              	.L260:
1443:..\src/interruptions.c ****             
1444:..\src/interruptions.c **** 
1445:..\src/interruptions.c ****             // pwm_input saturation
1446:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 96


 3896              		.loc 1 1446 0
 3897 04f0 FB6C     		ldr	r3, [r7, #76]
 3898 04f2 13F1640F 		cmn	r3, #100
 3899 04f6 03DA     		bge	.L261
1447:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3900              		.loc 1 1447 0
 3901 04f8 6FF06303 		mvn	r3, #99
 3902 04fc FB64     		str	r3, [r7, #76]
1448:..\src/interruptions.c ****             else {
1449:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1450:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1451:..\src/interruptions.c ****         	}
1452:..\src/interruptions.c **** 
1453:..\src/interruptions.c ****         break;
 3903              		.loc 1 1453 0
 3904 04fe 1DE0     		b	.L290
 3905              	.L261:
1449:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 3906              		.loc 1 1449 0
 3907 0500 FB6C     		ldr	r3, [r7, #76]
 3908 0502 642B     		cmp	r3, #100
 3909 0504 1ADD     		ble	.L290
1450:..\src/interruptions.c ****         	}
 3910              		.loc 1 1450 0
 3911 0506 6423     		movs	r3, #100
 3912 0508 FB64     		str	r3, [r7, #76]
 3913              		.loc 1 1453 0
 3914 050a 17E0     		b	.L290
 3915              	.L289:
1432:..\src/interruptions.c ****         
 3916              		.loc 1 1432 0
 3917 050c 00BF     		nop
 3918 050e 16E0     		b	.L221
 3919              	.L295:
 3920              		.align	2
 3921              	.L294:
 3922 0510 00000000 		.word	g_ref
 3923 0514 00000000 		.word	g_meas
 3924 0518 AC000000 		.word	pos_error_sum.10534
 3925 051c 18FCFFFF 		.word	-1000
 3926 0520 B4000000 		.word	prev_pos_err.10536
 3927 0524 BC000000 		.word	motor_dir.10539
 3928 0528 00000000 		.word	tension_valid
 3929 052c C0000000 		.word	curr_error_sum.10535
 3930 0530 A0860100 		.word	100000
 3931 0534 6079FEFF 		.word	-100000
 3932 0538 C8000000 		.word	prev_curr_err.10537
 3933              	.L290:
 3934              		.loc 1 1453 0
 3935 053c 00BF     		nop
 3936              	.L221:
1454:..\src/interruptions.c ****             
1455:..\src/interruptions.c ****     }
1456:..\src/interruptions.c **** 
1457:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1458:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1459:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 97


1460:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3937              		.loc 1 1460 0
 3938 053e FB6C     		ldr	r3, [r7, #76]
 3939 0540 642B     		cmp	r3, #100
 3940 0542 01DD     		ble	.L263
1461:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3941              		.loc 1 1461 0
 3942 0544 6423     		movs	r3, #100
 3943 0546 FB64     		str	r3, [r7, #76]
 3944              	.L263:
1462:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3945              		.loc 1 1462 0
 3946 0548 FB6C     		ldr	r3, [r7, #76]
 3947 054a 13F1640F 		cmn	r3, #100
 3948 054e 02DA     		bge	.L264
1463:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3949              		.loc 1 1463 0
 3950 0550 6FF06303 		mvn	r3, #99
 3951 0554 FB64     		str	r3, [r7, #76]
 3952              	.L264:
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 3953              		.loc 1 1465 0
 3954 0556 7B6C     		ldr	r3, [r7, #68]
 3955 0558 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3956 055c 012B     		cmp	r3, #1
 3957 055e 0DD0     		beq	.L265
1466:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 3958              		.loc 1 1466 0
 3959 0560 FB6C     		ldr	r3, [r7, #76]
 3960 0562 9B02     		lsls	r3, r3, #10
 3961 0564 AA4A     		ldr	r2, .L296
 3962 0566 82FB0312 		smull	r1, r2, r2, r3
 3963 056a 5211     		asrs	r2, r2, #5
 3964 056c DB17     		asrs	r3, r3, #31
 3965 056e D31A     		subs	r3, r2, r3
 3966 0570 A84A     		ldr	r2, .L296+4
 3967 0572 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3968 0574 02FB03F3 		mul	r3, r2, r3
 3969 0578 9B12     		asrs	r3, r3, #10
 3970 057a FB64     		str	r3, [r7, #76]
 3971              	.L265:
1467:..\src/interruptions.c ****  
1468:..\src/interruptions.c ****     //// RATE LIMITER ////
1469:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 3972              		.loc 1 1469 0
 3973 057c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3974 057e A64A     		ldr	r2, .L296+8
 3975 0580 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3976 0584 FA6C     		ldr	r2, [r7, #76]
 3977 0586 D31A     		subs	r3, r2, r3
 3978 0588 7A6C     		ldr	r2, [r7, #68]
 3979 058a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3980 058e 9342     		cmp	r3, r2
 3981 0590 09DD     		ble	.L266
1470:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 3982              		.loc 1 1470 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 98


 3983 0592 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3984 0594 A04A     		ldr	r2, .L296+8
 3985 0596 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3986 059a 7A6C     		ldr	r2, [r7, #68]
 3987 059c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3988 05a0 1344     		add	r3, r3, r2
 3989 05a2 FB64     		str	r3, [r7, #76]
 3990 05a4 14E0     		b	.L267
 3991              	.L266:
1471:..\src/interruptions.c ****     }
1472:..\src/interruptions.c ****     else {
1473:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 3992              		.loc 1 1473 0
 3993 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3994 05a8 9B4A     		ldr	r2, .L296+8
 3995 05aa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3996 05ae FA6C     		ldr	r2, [r7, #76]
 3997 05b0 D21A     		subs	r2, r2, r3
 3998 05b2 7B6C     		ldr	r3, [r7, #68]
 3999 05b4 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4000 05b8 5B42     		negs	r3, r3
 4001 05ba 9A42     		cmp	r2, r3
 4002 05bc 08DA     		bge	.L267
1474:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4003              		.loc 1 1474 0
 4004 05be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4005 05c0 954A     		ldr	r2, .L296+8
 4006 05c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4007 05c6 7A6C     		ldr	r2, [r7, #68]
 4008 05c8 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4009 05cc 9B1A     		subs	r3, r3, r2
 4010 05ce FB64     		str	r3, [r7, #76]
 4011              	.L267:
1475:..\src/interruptions.c ****     }
1476:..\src/interruptions.c ****     
1477:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4012              		.loc 1 1477 0
 4013 05d0 FB6C     		ldr	r3, [r7, #76]
 4014 05d2 642B     		cmp	r3, #100
 4015 05d4 01DD     		ble	.L268
1478:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4016              		.loc 1 1478 0
 4017 05d6 6423     		movs	r3, #100
 4018 05d8 FB64     		str	r3, [r7, #76]
 4019              	.L268:
1479:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4020              		.loc 1 1479 0
 4021 05da FB6C     		ldr	r3, [r7, #76]
 4022 05dc 13F1640F 		cmn	r3, #100
 4023 05e0 02DA     		bge	.L269
1480:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4024              		.loc 1 1480 0
 4025 05e2 6FF06303 		mvn	r3, #99
 4026 05e6 FB64     		str	r3, [r7, #76]
 4027              	.L269:
1481:..\src/interruptions.c ****     
1482:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 99


 4028              		.loc 1 1482 0
 4029 05e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4030 05ea 8B49     		ldr	r1, .L296+8
 4031 05ec FA6C     		ldr	r2, [r7, #76]
 4032 05ee 41F82320 		str	r2, [r1, r3, lsl #2]
1483:..\src/interruptions.c **** 	
1484:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4033              		.loc 1 1484 0
 4034 05f2 FB6C     		ldr	r3, [r7, #76]
 4035 05f4 002B     		cmp	r3, #0
 4036 05f6 01DB     		blt	.L270
 4037              		.loc 1 1484 0 is_stmt 0 discriminator 1
 4038 05f8 0122     		movs	r2, #1
 4039 05fa 01E0     		b	.L271
 4040              	.L270:
 4041              		.loc 1 1484 0 discriminator 2
 4042 05fc 4FF0FF32 		mov	r2, #-1
 4043              	.L271:
 4044              		.loc 1 1484 0 discriminator 4
 4045 0600 864B     		ldr	r3, .L296+12
 4046 0602 1A70     		strb	r2, [r3]
1485:..\src/interruptions.c ****     
1486:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4047              		.loc 1 1486 0 is_stmt 1 discriminator 4
 4048 0604 7B6C     		ldr	r3, [r7, #68]
 4049 0606 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4050 060a 012B     		cmp	r3, #1
 4051 060c 40F0AA80 		bne	.L272
1487:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1488:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4052              		.loc 1 1488 0
 4053 0610 7B6C     		ldr	r3, [r7, #68]
 4054 0612 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4055 0616 012B     		cmp	r3, #1
 4056 0618 00F09F80 		beq	.L273
 4057              		.loc 1 1488 0 is_stmt 0 discriminator 1
 4058 061c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4059 0620 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4060 0622 7F48     		ldr	r0, .L296+16
 4061 0624 1346     		mov	r3, r2
 4062 0626 5B00     		lsls	r3, r3, #1
 4063 0628 1344     		add	r3, r3, r2
 4064 062a 9B00     		lsls	r3, r3, #2
 4065 062c 1344     		add	r3, r3, r2
 4066 062e 0B44     		add	r3, r3, r1
 4067 0630 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4068 0634 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4069 0638 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4070 063a 7A4C     		ldr	r4, .L296+20
 4071 063c 1346     		mov	r3, r2
 4072 063e 5B00     		lsls	r3, r3, #1
 4073 0640 1344     		add	r3, r3, r2
 4074 0642 9B00     		lsls	r3, r3, #2
 4075 0644 1344     		add	r3, r3, r2
 4076 0646 0344     		add	r3, r3, r0
 4077 0648 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4078 064c CB1A     		subs	r3, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 100


 4079 064e 312B     		cmp	r3, #49
 4080 0650 00F38380 		bgt	.L273
1489:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4081              		.loc 1 1489 0 is_stmt 1 discriminator 2
 4082 0654 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4083 0658 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4084 065a 7148     		ldr	r0, .L296+16
 4085 065c 1346     		mov	r3, r2
 4086 065e 5B00     		lsls	r3, r3, #1
 4087 0660 1344     		add	r3, r3, r2
 4088 0662 9B00     		lsls	r3, r3, #2
 4089 0664 1344     		add	r3, r3, r2
 4090 0666 0B44     		add	r3, r3, r1
 4091 0668 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4092 066c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4093 0670 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4094 0672 6C4C     		ldr	r4, .L296+20
 4095 0674 1346     		mov	r3, r2
 4096 0676 5B00     		lsls	r3, r3, #1
 4097 0678 1344     		add	r3, r3, r2
 4098 067a 9B00     		lsls	r3, r3, #2
 4099 067c 1344     		add	r3, r3, r2
 4100 067e 0344     		add	r3, r3, r0
 4101 0680 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4102 0684 CB1A     		subs	r3, r1, r3
1488:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4103              		.loc 1 1488 0 discriminator 2
 4104 0686 13F1310F 		cmn	r3, #49
 4105 068a 66DB     		blt	.L273
1490:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4106              		.loc 1 1490 0
 4107 068c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4108 068e 664A     		ldr	r2, .L296+24
 4109 0690 1B01     		lsls	r3, r3, #4
 4110 0692 1344     		add	r3, r3, r2
 4111 0694 1A68     		ldr	r2, [r3]
 4112 0696 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4113 0698 6449     		ldr	r1, .L296+28
 4114 069a 1B01     		lsls	r3, r3, #4
 4115 069c 0B44     		add	r3, r3, r1
 4116 069e 1B68     		ldr	r3, [r3]
 4117 06a0 D31A     		subs	r3, r2, r3
1489:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4118              		.loc 1 1489 0
 4119 06a2 632B     		cmp	r3, #99
 4120 06a4 59DC     		bgt	.L273
 4121              		.loc 1 1490 0
 4122 06a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4123 06a8 5F4A     		ldr	r2, .L296+24
 4124 06aa 1B01     		lsls	r3, r3, #4
 4125 06ac 1344     		add	r3, r3, r2
 4126 06ae 1A68     		ldr	r2, [r3]
 4127 06b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4128 06b2 5E49     		ldr	r1, .L296+28
 4129 06b4 1B01     		lsls	r3, r3, #4
 4130 06b6 0B44     		add	r3, r3, r1
 4131 06b8 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 101


 4132 06ba D31A     		subs	r3, r2, r3
 4133 06bc 13F1630F 		cmn	r3, #99
 4134 06c0 4BDB     		blt	.L273
1491:..\src/interruptions.c ****             position_counter[idx]++;
 4135              		.loc 1 1491 0
 4136 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4137 06c4 5A4A     		ldr	r2, .L296+32
 4138 06c6 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4139 06ca 0132     		adds	r2, r2, #1
 4140 06cc 5849     		ldr	r1, .L296+32
 4141 06ce 41F82320 		str	r2, [r1, r3, lsl #2]
1492:..\src/interruptions.c ****             
1493:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4142              		.loc 1 1493 0
 4143 06d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4144 06d4 564A     		ldr	r2, .L296+32
 4145 06d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4146 06da F92B     		cmp	r3, #249
 4147 06dc 42D9     		bls	.L272
1494:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4148              		.loc 1 1494 0
 4149 06de 7B6C     		ldr	r3, [r7, #68]
 4150 06e0 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4151 06e4 002B     		cmp	r3, #0
 4152 06e6 10D1     		bne	.L275
 4153              		.loc 1 1494 0 is_stmt 0 discriminator 1
 4154 06e8 524B     		ldr	r3, .L296+36
 4155 06ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4156 06ec 002B     		cmp	r3, #0
 4157 06ee 0CD1     		bne	.L275
1495:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4158              		.loc 1 1495 0 is_stmt 1
 4159 06f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4160 06f2 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4161 06f6 4B49     		ldr	r1, .L296+20
 4162 06f8 3420     		movs	r0, #52
 4163 06fa 00FB02F2 		mul	r2, r0, r2
 4164 06fe 0A44     		add	r2, r2, r1
 4165 0700 1268     		ldr	r2, [r2]
 4166 0702 4D49     		ldr	r1, .L296+40
 4167 0704 1B01     		lsls	r3, r3, #4
 4168 0706 0B44     		add	r3, r3, r1
 4169 0708 1A60     		str	r2, [r3]
 4170              	.L275:
1496:..\src/interruptions.c ****                 }
1497:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4171              		.loc 1 1497 0
 4172 070a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4173 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4174 0710 4449     		ldr	r1, .L296+20
 4175 0712 3420     		movs	r0, #52
 4176 0714 00FB02F2 		mul	r2, r0, r2
 4177 0718 0A44     		add	r2, r2, r1
 4178 071a 1268     		ldr	r2, [r2]
 4179 071c 4349     		ldr	r1, .L296+28
 4180 071e 1B01     		lsls	r3, r3, #4
 4181 0720 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 102


 4182 0722 1A60     		str	r2, [r3]
1498:..\src/interruptions.c ****                 
1499:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4183              		.loc 1 1499 0
 4184 0724 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4185 0726 424A     		ldr	r2, .L296+32
 4186 0728 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4187 072c FA2B     		cmp	r3, #250
 4188 072e 11D1     		bne	.L276
1500:..\src/interruptions.c ****                     // To do only once
1501:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4189              		.loc 1 1501 0
 4190 0730 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4191 0734 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4192 0738 3A49     		ldr	r1, .L296+20
 4193 073a 3420     		movs	r0, #52
 4194 073c 00FB02F2 		mul	r2, r0, r2
 4195 0740 0A44     		add	r2, r2, r1
 4196 0742 0C32     		adds	r2, r2, #12
 4197 0744 1268     		ldr	r2, [r2]
 4198 0746 3749     		ldr	r1, .L296+20
 4199 0748 3420     		movs	r0, #52
 4200 074a 00FB03F3 		mul	r3, r0, r3
 4201 074e 0B44     		add	r3, r3, r1
 4202 0750 1433     		adds	r3, r3, #20
 4203 0752 1A60     		str	r2, [r3]
 4204              	.L276:
1502:..\src/interruptions.c ****                 }
1503:..\src/interruptions.c ****                 pwm_input = 0;            
 4205              		.loc 1 1503 0
 4206 0754 0023     		movs	r3, #0
 4207 0756 FB64     		str	r3, [r7, #76]
1493:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4208              		.loc 1 1493 0
 4209 0758 04E0     		b	.L272
 4210              	.L273:
1504:..\src/interruptions.c ****             }
1505:..\src/interruptions.c ****         }
1506:..\src/interruptions.c ****         else {
1507:..\src/interruptions.c ****             position_counter[idx] = 0;
 4211              		.loc 1 1507 0
 4212 075a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4213 075c 344A     		ldr	r2, .L296+32
 4214 075e 0021     		movs	r1, #0
 4215 0760 42F82310 		str	r1, [r2, r3, lsl #2]
 4216              	.L272:
1508:..\src/interruptions.c ****         }
1509:..\src/interruptions.c ****     }
1510:..\src/interruptions.c ****     
1511:..\src/interruptions.c ****     // Set motor direction and write pwm value
1512:..\src/interruptions.c ****     switch (idx) {
 4217              		.loc 1 1512 0
 4218 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4219 0766 002B     		cmp	r3, #0
 4220 0768 02D0     		beq	.L278
 4221 076a 012B     		cmp	r3, #1
 4222 076c 26D0     		beq	.L279
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 103


1513:..\src/interruptions.c ****         case 0:         // Motor 1
1514:..\src/interruptions.c ****             if (motor_dir[idx])
1515:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1516:..\src/interruptions.c ****             else
1517:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1518:..\src/interruptions.c ****             
1519:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1520:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1521:..\src/interruptions.c ****             }
1522:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1523:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1524:..\src/interruptions.c ****             }
1525:..\src/interruptions.c ****             
1526:..\src/interruptions.c ****             break;
1527:..\src/interruptions.c ****         case 1:         // Motor 2
1528:..\src/interruptions.c ****             
1529:..\src/interruptions.c ****             if (motor_dir[idx])
1530:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1531:..\src/interruptions.c ****             else
1532:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1533:..\src/interruptions.c ****             
1534:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1535:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1536:..\src/interruptions.c ****             }
1537:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1538:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1539:..\src/interruptions.c ****             }
1540:..\src/interruptions.c ****             
1541:..\src/interruptions.c ****             break;
1542:..\src/interruptions.c ****         default:
1543:..\src/interruptions.c ****             break;
 4223              		.loc 1 1543 0
 4224 076e 4BE0     		b	.L284
 4225              	.L278:
1514:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4226              		.loc 1 1514 0
 4227 0770 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4228 0772 324A     		ldr	r2, .L296+44
 4229 0774 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4230 0776 002B     		cmp	r3, #0
 4231 0778 03D0     		beq	.L280
1515:..\src/interruptions.c ****             else
 4232              		.loc 1 1515 0
 4233 077a 0120     		movs	r0, #1
 4234 077c FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4235 0780 02E0     		b	.L281
 4236              	.L280:
1517:..\src/interruptions.c ****             
 4237              		.loc 1 1517 0
 4238 0782 0020     		movs	r0, #0
 4239 0784 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4240              	.L281:
1519:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4241              		.loc 1 1519 0
 4242 0788 7B6C     		ldr	r3, [r7, #68]
 4243 078a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4244 078e 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 104


 4245 0790 0BD1     		bne	.L282
1520:..\src/interruptions.c ****             }
 4246              		.loc 1 1520 0
 4247 0792 FB6C     		ldr	r3, [r7, #76]
 4248 0794 002B     		cmp	r3, #0
 4249 0796 B8BF     		it	lt
 4250 0798 5B42     		rsblt	r3, r3, #0
 4251 079a DBB2     		uxtb	r3, r3
 4252 079c C3F16403 		rsb	r3, r3, #100
 4253 07a0 DBB2     		uxtb	r3, r3
 4254 07a2 1846     		mov	r0, r3
 4255 07a4 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1526:..\src/interruptions.c ****         case 1:         // Motor 2
 4256              		.loc 1 1526 0
 4257 07a8 2EE0     		b	.L284
 4258              	.L282:
1523:..\src/interruptions.c ****             }
 4259              		.loc 1 1523 0
 4260 07aa FB6C     		ldr	r3, [r7, #76]
 4261 07ac 002B     		cmp	r3, #0
 4262 07ae B8BF     		it	lt
 4263 07b0 5B42     		rsblt	r3, r3, #0
 4264 07b2 DBB2     		uxtb	r3, r3
 4265 07b4 1846     		mov	r0, r3
 4266 07b6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1526:..\src/interruptions.c ****         case 1:         // Motor 2
 4267              		.loc 1 1526 0
 4268 07ba 25E0     		b	.L284
 4269              	.L279:
1529:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4270              		.loc 1 1529 0
 4271 07bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4272 07be 1F4A     		ldr	r2, .L296+44
 4273 07c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4274 07c2 002B     		cmp	r3, #0
 4275 07c4 03D0     		beq	.L285
1530:..\src/interruptions.c ****             else
 4276              		.loc 1 1530 0
 4277 07c6 0120     		movs	r0, #1
 4278 07c8 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4279 07cc 02E0     		b	.L286
 4280              	.L285:
1532:..\src/interruptions.c ****             
 4281              		.loc 1 1532 0
 4282 07ce 0020     		movs	r0, #0
 4283 07d0 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4284              	.L286:
1534:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4285              		.loc 1 1534 0
 4286 07d4 7B6C     		ldr	r3, [r7, #68]
 4287 07d6 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4288 07da 012B     		cmp	r3, #1
 4289 07dc 0BD1     		bne	.L287
1535:..\src/interruptions.c ****             }
 4290              		.loc 1 1535 0
 4291 07de FB6C     		ldr	r3, [r7, #76]
 4292 07e0 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 105


 4293 07e2 B8BF     		it	lt
 4294 07e4 5B42     		rsblt	r3, r3, #0
 4295 07e6 DBB2     		uxtb	r3, r3
 4296 07e8 C3F16403 		rsb	r3, r3, #100
 4297 07ec DBB2     		uxtb	r3, r3
 4298 07ee 1846     		mov	r0, r3
 4299 07f0 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1541:..\src/interruptions.c ****         default:
 4300              		.loc 1 1541 0
 4301 07f4 07E0     		b	.L291
 4302              	.L287:
1538:..\src/interruptions.c ****             }
 4303              		.loc 1 1538 0
 4304 07f6 FB6C     		ldr	r3, [r7, #76]
 4305 07f8 002B     		cmp	r3, #0
 4306 07fa B8BF     		it	lt
 4307 07fc 5B42     		rsblt	r3, r3, #0
 4308 07fe DBB2     		uxtb	r3, r3
 4309 0800 1846     		mov	r0, r3
 4310 0802 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4311              	.L291:
1541:..\src/interruptions.c ****         default:
 4312              		.loc 1 1541 0
 4313 0806 00BF     		nop
 4314              	.L284:
1544:..\src/interruptions.c ****     }
1545:..\src/interruptions.c ****     
1546:..\src/interruptions.c **** }
 4315              		.loc 1 1546 0
 4316 0808 00BF     		nop
 4317 080a 5437     		adds	r7, r7, #84
 4318              		.cfi_def_cfa_offset 12
 4319 080c BD46     		mov	sp, r7
 4320              		.cfi_def_cfa_register 13
 4321              		@ sp needed
 4322 080e 90BD     		pop	{r4, r7, pc}
 4323              	.L297:
 4324              		.align	2
 4325              	.L296:
 4326 0810 1F85EB51 		.word	1374389535
 4327 0814 00000000 		.word	dev_pwm_limit
 4328 0818 D0000000 		.word	prev_pwm.10538
 4329 081c 00000000 		.word	pwm_sign
 4330 0820 00000000 		.word	g_measOld
 4331 0824 00000000 		.word	g_meas
 4332 0828 00000000 		.word	g_refOld
 4333 082c 00000000 		.word	g_ref
 4334 0830 D8000000 		.word	position_counter.10540
 4335 0834 00000000 		.word	change_ext_ref_flag
 4336 0838 00000000 		.word	g_refNew
 4337 083c BC000000 		.word	motor_dir.10539
 4338              		.cfi_endproc
 4339              	.LFE71:
 4340              		.size	motor_control_generic, .-motor_control_generic
 4341              		.global	__aeabi_fcmpeq
 4342              		.global	__aeabi_fmul
 4343              		.global	__aeabi_f2iz
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 106


 4344              		.global	__aeabi_fcmplt
 4345              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4346              		.align	2
 4347              		.global	encoder_reading_SPI
 4348              		.thumb
 4349              		.thumb_func
 4350              		.type	encoder_reading_SPI, %function
 4351              	encoder_reading_SPI:
 4352              	.LFB72:
1547:..\src/interruptions.c **** 
1548:..\src/interruptions.c **** //==============================================================================
1549:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1550:..\src/interruptions.c **** //==============================================================================
1551:..\src/interruptions.c **** 
1552:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4353              		.loc 1 1552 0
 4354              		.cfi_startproc
 4355              		@ args = 0, pretend = 0, frame = 48
 4356              		@ frame_needed = 1, uses_anonymous_args = 0
 4357 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4358              		.cfi_def_cfa_offset 20
 4359              		.cfi_offset 4, -20
 4360              		.cfi_offset 5, -16
 4361              		.cfi_offset 6, -12
 4362              		.cfi_offset 7, -8
 4363              		.cfi_offset 14, -4
 4364 0002 8FB0     		sub	sp, sp, #60
 4365              		.cfi_def_cfa_offset 80
 4366 0004 02AF     		add	r7, sp, #8
 4367              		.cfi_def_cfa 7, 72
 4368 0006 0346     		mov	r3, r0
 4369 0008 0A46     		mov	r2, r1
 4370 000a FB71     		strb	r3, [r7, #7]
 4371 000c 1346     		mov	r3, r2
 4372 000e BB71     		strb	r3, [r7, #6]
1553:..\src/interruptions.c **** 
1554:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4373              		.loc 1 1554 0
 4374 0010 0023     		movs	r3, #0
 4375 0012 87F82F30 		strb	r3, [r7, #47]
1555:..\src/interruptions.c ****     
1556:..\src/interruptions.c ****     // Encoder Variables  
1557:..\src/interruptions.c ****     uint8 jj;
1558:..\src/interruptions.c ****      
1559:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1560:..\src/interruptions.c ****     int16 tmp_value_encoder;
1561:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1562:..\src/interruptions.c ****     int32 value_encoder;
1563:..\src/interruptions.c ****     int32 speed_encoder;
1564:..\src/interruptions.c ****     int32 value_diff;
1565:..\src/interruptions.c **** 	int8 init_rot = 0;
 4376              		.loc 1 1565 0
 4377 0016 0023     		movs	r3, #0
 4378 0018 87F82730 		strb	r3, [r7, #39]
1566:..\src/interruptions.c **** 
1567:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1568:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 107


1569:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1570:..\src/interruptions.c ****     
1571:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1572:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1573:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1574:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1575:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1576:..\src/interruptions.c **** 
1577:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1578:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1579:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1580:..\src/interruptions.c **** //    
1581:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4379              		.loc 1 1581 0
 4380 001c 8E4B     		ldr	r3, .L334
 4381 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4382 0020 002B     		cmp	r3, #0
 4383 0022 18D0     		beq	.L299
1582:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4384              		.loc 1 1582 0
 4385 0024 0323     		movs	r3, #3
 4386 0026 87F82E30 		strb	r3, [r7, #46]
 4387 002a 0AE0     		b	.L300
 4388              	.L301:
1583:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4389              		.loc 1 1583 0
 4390 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4391 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4392 0032 8A48     		ldr	r0, .L334+4
 4393 0034 1346     		mov	r3, r2
 4394 0036 5B00     		lsls	r3, r3, #1
 4395 0038 1344     		add	r3, r3, r2
 4396 003a 0B44     		add	r3, r3, r1
 4397 003c 0022     		movs	r2, #0
 4398 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4399              	.L300:
1582:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4400              		.loc 1 1582 0 discriminator 1
 4401 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4402 0046 5A1E     		subs	r2, r3, #1
 4403 0048 87F82E20 		strb	r2, [r7, #46]
 4404 004c 002B     		cmp	r3, #0
 4405 004e EDD1     		bne	.L301
1584:..\src/interruptions.c ****         
1585:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4406              		.loc 1 1585 0
 4407 0050 814B     		ldr	r3, .L334
 4408 0052 0022     		movs	r2, #0
 4409 0054 1A70     		strb	r2, [r3]
 4410              	.L299:
1586:..\src/interruptions.c ****     }
1587:..\src/interruptions.c **** 
1588:..\src/interruptions.c ****     //======================================================     reading sensors
1589:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4411              		.loc 1 1589 0
 4412 0056 0023     		movs	r3, #0
 4413 0058 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 108


 4414 005c 0DE0     		b	.L302
 4415              	.L303:
1590:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4416              		.loc 1 1590 0 discriminator 3
 4417 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4418 0062 9B00     		lsls	r3, r3, #2
 4419 0064 07F13002 		add	r2, r7, #48
 4420 0068 1344     		add	r3, r3, r2
 4421 006a 0022     		movs	r2, #0
 4422 006c 43F8282C 		str	r2, [r3, #-40]
1589:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4423              		.loc 1 1589 0 discriminator 3
 4424 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4425 0074 0133     		adds	r3, r3, #1
 4426 0076 87F82F30 		strb	r3, [r7, #47]
 4427              	.L302:
1589:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4428              		.loc 1 1589 0 is_stmt 0 discriminator 1
 4429 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4430 007e 022B     		cmp	r3, #2
 4431 0080 EDD9     		bls	.L303
1591:..\src/interruptions.c ****     }   
1592:..\src/interruptions.c ****     
1593:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4432              		.loc 1 1593 0 is_stmt 1
 4433 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4434 0084 764A     		ldr	r2, .L334+8
 4435 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4436 0088 1A46     		mov	r2, r3
 4437 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4438 008c 1946     		mov	r1, r3
 4439 008e 1046     		mov	r0, r2
 4440 0090 FFF7FEFF 		bl	ReadEncoderLine
 4441              	.LBB5:
1594:..\src/interruptions.c ****                                                                         //CS1 for left hand
1595:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4442              		.loc 1 1595 0
 4443 0094 0023     		movs	r3, #0
 4444 0096 3B62     		str	r3, [r7, #32]
 4445 0098 2EE0     		b	.L304
 4446              	.L306:
1596:..\src/interruptions.c ****         
1597:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1598:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4447              		.loc 1 1598 0
 4448 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4449 009c 7149     		ldr	r1, .L334+12
 4450 009e 1346     		mov	r3, r2
 4451 00a0 5B00     		lsls	r3, r3, #1
 4452 00a2 1344     		add	r3, r3, r2
 4453 00a4 1B01     		lsls	r3, r3, #4
 4454 00a6 CA18     		adds	r2, r1, r3
 4455 00a8 3B6A     		ldr	r3, [r7, #32]
 4456 00aa 1344     		add	r3, r3, r2
 4457 00ac 03F2B113 		addw	r3, r3, #433
 4458 00b0 1B78     		ldrb	r3, [r3]
 4459 00b2 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 109


1599:..\src/interruptions.c ****         
1600:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4460              		.loc 1 1600 0
 4461 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4462 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4463 00bc 6A48     		ldr	r0, .L334+16
 4464 00be 1346     		mov	r3, r2
 4465 00c0 9B00     		lsls	r3, r3, #2
 4466 00c2 1344     		add	r3, r3, r2
 4467 00c4 0344     		add	r3, r3, r0
 4468 00c6 0B44     		add	r3, r3, r1
 4469 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4470 00ca 0F2B     		cmp	r3, #15
 4471 00cc 11D9     		bls	.L305
1601:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4472              		.loc 1 1601 0
 4473 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4474 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4475 00d4 6548     		ldr	r0, .L334+20
 4476 00d6 1346     		mov	r3, r2
 4477 00d8 9B00     		lsls	r3, r3, #2
 4478 00da 1344     		add	r3, r3, r2
 4479 00dc 0B44     		add	r3, r3, r1
 4480 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4481 00e2 1A46     		mov	r2, r3
 4482 00e4 3B6A     		ldr	r3, [r7, #32]
 4483 00e6 9B00     		lsls	r3, r3, #2
 4484 00e8 07F13001 		add	r1, r7, #48
 4485 00ec 0B44     		add	r3, r3, r1
 4486 00ee 43F8282C 		str	r2, [r3, #-40]
 4487              	.L305:
1595:..\src/interruptions.c ****         
 4488              		.loc 1 1595 0 discriminator 2
 4489 00f2 3B6A     		ldr	r3, [r7, #32]
 4490 00f4 0133     		adds	r3, r3, #1
 4491 00f6 3B62     		str	r3, [r7, #32]
 4492              	.L304:
1595:..\src/interruptions.c ****         
 4493              		.loc 1 1595 0 is_stmt 0 discriminator 1
 4494 00f8 3B6A     		ldr	r3, [r7, #32]
 4495 00fa 022B     		cmp	r3, #2
 4496 00fc CDDD     		ble	.L306
 4497              	.LBE5:
1602:..\src/interruptions.c ****         }
1603:..\src/interruptions.c ****     }
1604:..\src/interruptions.c ****     
1605:..\src/interruptions.c ****     // S = SIGN BIT
1606:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1607:..\src/interruptions.c ****     // 0 = 0 BIT
1608:..\src/interruptions.c ****     // C = CONTROL BIT
1609:..\src/interruptions.c ****     
1610:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4498              		.loc 1 1610 0 is_stmt 1
 4499 00fe 0023     		movs	r3, #0
 4500 0100 87F82F30 		strb	r3, [r7, #47]
 4501 0104 33E3     		b	.L307
 4502              	.L327:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 110


1611:..\src/interruptions.c ****         
1612:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4503              		.loc 1 1612 0
 4504 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 4505 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4506 010e 9B00     		lsls	r3, r3, #2
 4507 0110 07F13001 		add	r1, r7, #48
 4508 0114 0B44     		add	r3, r3, r1
 4509 0116 53F8283C 		ldr	r3, [r3, #-40]
 4510 011a 5549     		ldr	r1, .L334+24
 4511 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1613:..\src/interruptions.c ****         
1614:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4512              		.loc 1 1614 0
 4513 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4514 0124 9B00     		lsls	r3, r3, #2
 4515 0126 07F13002 		add	r2, r7, #48
 4516 012a 1344     		add	r3, r3, r2
 4517 012c 53F8283C 		ldr	r3, [r3, #-40]
 4518 0130 99B2     		uxth	r1, r3
 4519 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4520 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4521 0138 4E4C     		ldr	r4, .L334+28
 4522 013a 1346     		mov	r3, r2
 4523 013c 5B00     		lsls	r3, r3, #1
 4524 013e 1344     		add	r3, r3, r2
 4525 0140 9B00     		lsls	r3, r3, #2
 4526 0142 0344     		add	r3, r3, r0
 4527 0144 6633     		adds	r3, r3, #102
 4528 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4529 014a 9BB2     		uxth	r3, r3
 4530 014c CB1A     		subs	r3, r1, r3
 4531 014e 9BB2     		uxth	r3, r3
 4532 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1615:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4533              		.loc 1 1615 0
 4534 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4535 0156 002B     		cmp	r3, #0
 4536 0158 04DA     		bge	.L308
1616:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4537              		.loc 1 1616 0
 4538 015a BB8D     		ldrh	r3, [r7, #44]
 4539 015c 03F58053 		add	r3, r3, #4096
 4540 0160 9BB2     		uxth	r3, r3
 4541 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4542              	.L308:
1617:..\src/interruptions.c ****         }       // Range [0, 4096]
1618:..\src/interruptions.c **** 
1619:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4543              		.loc 1 1619 0
 4544 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4545 0168 B3F5006F 		cmp	r3, #2048
 4546 016c 04DB     		blt	.L309
1620:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4547              		.loc 1 1620 0
 4548 016e BB8D     		ldrh	r3, [r7, #44]
 4549 0170 A3F58053 		sub	r3, r3, #4096
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 111


 4550 0174 9BB2     		uxth	r3, r3
 4551 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4552              	.L309:
1621:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1622:..\src/interruptions.c **** 
1623:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4553              		.loc 1 1623 0
 4554 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4555 017c 1B01     		lsls	r3, r3, #4
 4556 017e FB61     		str	r3, [r7, #28]
1624:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4557              		.loc 1 1624 0
 4558 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4559 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4560 0186 3C48     		ldr	r0, .L334+32
 4561 0188 1346     		mov	r3, r2
 4562 018a 5B00     		lsls	r3, r3, #1
 4563 018c 1344     		add	r3, r3, r2
 4564 018e 0B44     		add	r3, r3, r1
 4565 0190 FA69     		ldr	r2, [r7, #28]
 4566 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1625:..\src/interruptions.c **** 
1626:..\src/interruptions.c ****         // Initialize last_value_encoder
1627:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4567              		.loc 1 1627 0
 4568 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4569 0198 384A     		ldr	r2, .L334+36
 4570 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4571 019c 002B     		cmp	r3, #0
 4572 019e 12D0     		beq	.L310
1628:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4573              		.loc 1 1628 0
 4574 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4575 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4576 01a6 2D48     		ldr	r0, .L334+4
 4577 01a8 1346     		mov	r3, r2
 4578 01aa 5B00     		lsls	r3, r3, #1
 4579 01ac 1344     		add	r3, r3, r2
 4580 01ae 0B44     		add	r3, r3, r1
 4581 01b0 FA69     		ldr	r2, [r7, #28]
 4582 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1629:..\src/interruptions.c ****             if (index == 2)
 4583              		.loc 1 1629 0
 4584 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4585 01ba 022B     		cmp	r3, #2
 4586 01bc 03D1     		bne	.L310
1630:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 4587              		.loc 1 1630 0
 4588 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4589 01c0 2E4A     		ldr	r2, .L334+36
 4590 01c2 0021     		movs	r1, #0
 4591 01c4 D154     		strb	r1, [r2, r3]
 4592              	.L310:
1631:..\src/interruptions.c ****         }
1632:..\src/interruptions.c **** 
1633:..\src/interruptions.c ****         // Take care of rotations
1634:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 112


 4593              		.loc 1 1634 0
 4594 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4595 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4596 01cc 2348     		ldr	r0, .L334+4
 4597 01ce 1346     		mov	r3, r2
 4598 01d0 5B00     		lsls	r3, r3, #1
 4599 01d2 1344     		add	r3, r3, r2
 4600 01d4 0B44     		add	r3, r3, r1
 4601 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 4602 01da FA69     		ldr	r2, [r7, #28]
 4603 01dc D31A     		subs	r3, r2, r3
 4604 01de BB61     		str	r3, [r7, #24]
1635:..\src/interruptions.c **** 
1636:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1637:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1638:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1639:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1640:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1641:..\src/interruptions.c ****         //                                               |           |
1642:..\src/interruptions.c ****         //                                           24575           -24576
1643:..\src/interruptions.c ****         //                                               |___________|
1644:..\src/interruptions.c ****         //                                                   49152
1645:..\src/interruptions.c **** 
1646:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1647:..\src/interruptions.c ****         // and update the variable only if the difference between
1648:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1649:..\src/interruptions.c **** 
1650:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1651:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1652:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1653:..\src/interruptions.c **** 
1654:..\src/interruptions.c ****         if (value_diff > 49152)
 4605              		.loc 1 1654 0
 4606 01e0 BB69     		ldr	r3, [r7, #24]
 4607 01e2 B3F5404F 		cmp	r3, #49152
 4608 01e6 19DD     		ble	.L311
1655:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 4609              		.loc 1 1655 0
 4610 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4611 01ea 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4612 01ee 2448     		ldr	r0, .L334+40
 4613 01f0 3421     		movs	r1, #52
 4614 01f2 01FB02F1 		mul	r1, r1, r2
 4615 01f6 0144     		add	r1, r1, r0
 4616 01f8 1944     		add	r1, r1, r3
 4617 01fa 1831     		adds	r1, r1, #24
 4618 01fc 91F90010 		ldrsb	r1, [r1]
 4619 0200 C9B2     		uxtb	r1, r1
 4620 0202 0139     		subs	r1, r1, #1
 4621 0204 C9B2     		uxtb	r1, r1
 4622 0206 4CB2     		sxtb	r4, r1
 4623 0208 1D49     		ldr	r1, .L334+40
 4624 020a 3420     		movs	r0, #52
 4625 020c 00FB02F2 		mul	r2, r0, r2
 4626 0210 0A44     		add	r2, r2, r1
 4627 0212 1344     		add	r3, r3, r2
 4628 0214 1833     		adds	r3, r3, #24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 113


 4629 0216 2246     		mov	r2, r4
 4630 0218 1A70     		strb	r2, [r3]
 4631 021a 5BE0     		b	.L312
 4632              	.L311:
1656:..\src/interruptions.c ****         else{ 
1657:..\src/interruptions.c ****             if (value_diff < -49152)
 4633              		.loc 1 1657 0
 4634 021c BB69     		ldr	r3, [r7, #24]
 4635 021e 13F5404F 		cmn	r3, #49152
 4636 0222 2FDA     		bge	.L313
1658:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 4637              		.loc 1 1658 0
 4638 0224 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4639 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4640 022a 1548     		ldr	r0, .L334+40
 4641 022c 3421     		movs	r1, #52
 4642 022e 01FB02F1 		mul	r1, r1, r2
 4643 0232 0144     		add	r1, r1, r0
 4644 0234 1944     		add	r1, r1, r3
 4645 0236 1831     		adds	r1, r1, #24
 4646 0238 91F90010 		ldrsb	r1, [r1]
 4647 023c C9B2     		uxtb	r1, r1
 4648 023e 0131     		adds	r1, r1, #1
 4649 0240 C9B2     		uxtb	r1, r1
 4650 0242 4CB2     		sxtb	r4, r1
 4651 0244 0E49     		ldr	r1, .L334+40
 4652 0246 3420     		movs	r0, #52
 4653 0248 00FB02F2 		mul	r2, r0, r2
 4654 024c 0A44     		add	r2, r2, r1
 4655 024e 1344     		add	r3, r3, r2
 4656 0250 1833     		adds	r3, r3, #24
 4657 0252 2246     		mov	r2, r4
 4658 0254 1A70     		strb	r2, [r3]
 4659 0256 3DE0     		b	.L312
 4660              	.L335:
 4661              		.align	2
 4662              	.L334:
 4663 0258 00000000 		.word	reset_last_value_flag
 4664 025c E0000000 		.word	last_value_encoder.10563
 4665 0260 00000000 		.word	N_Encoder_Line_Connected
 4666 0264 00000000 		.word	c_mem
 4667 0268 00000000 		.word	Encoder_Check
 4668 026c 00000000 		.word	Encoder_Value
 4669 0270 00000000 		.word	data_encoder_raw
 4670 0274 00000000 		.word	g_mem
 4671 0278 F8000000 		.word	comp_value_encoder.10564
 4672 027c 04000000 		.word	only_first_time.10566
 4673 0280 00000000 		.word	g_meas
 4674              	.L313:
1659:..\src/interruptions.c ****             else{
1660:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 4675              		.loc 1 1660 0
 4676 0284 BB69     		ldr	r3, [r7, #24]
 4677 0286 002B     		cmp	r3, #0
 4678 0288 B8BF     		it	lt
 4679 028a 5B42     		rsblt	r3, r3, #0
 4680 028c B3F5804F 		cmp	r3, #16384
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 114


 4681 0290 20DD     		ble	.L312
1661:..\src/interruptions.c ****                     error[n_line][index]++;
 4682              		.loc 1 1661 0
 4683 0292 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4684 0294 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4685 0298 9B48     		ldr	r0, .L336
 4686 029a 1346     		mov	r3, r2
 4687 029c 5B00     		lsls	r3, r3, #1
 4688 029e 1344     		add	r3, r3, r2
 4689 02a0 0344     		add	r3, r3, r0
 4690 02a2 0B44     		add	r3, r3, r1
 4691 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4692 02a6 0133     		adds	r3, r3, #1
 4693 02a8 DCB2     		uxtb	r4, r3
 4694 02aa 9748     		ldr	r0, .L336
 4695 02ac 1346     		mov	r3, r2
 4696 02ae 5B00     		lsls	r3, r3, #1
 4697 02b0 1344     		add	r3, r3, r2
 4698 02b2 0344     		add	r3, r3, r0
 4699 02b4 0B44     		add	r3, r3, r1
 4700 02b6 2246     		mov	r2, r4
 4701 02b8 1A70     		strb	r2, [r3]
1662:..\src/interruptions.c ****                                 
1663:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 4702              		.loc 1 1663 0
 4703 02ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4704 02bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4705 02c0 9148     		ldr	r0, .L336
 4706 02c2 1346     		mov	r3, r2
 4707 02c4 5B00     		lsls	r3, r3, #1
 4708 02c6 1344     		add	r3, r3, r2
 4709 02c8 0344     		add	r3, r3, r0
 4710 02ca 0B44     		add	r3, r3, r1
 4711 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4712 02ce 092B     		cmp	r3, #9
 4713 02d0 40F28C82 		bls	.L333
 4714              	.L312:
1664:..\src/interruptions.c ****                         // Discard
1665:..\src/interruptions.c ****                         return;
1666:..\src/interruptions.c ****                 }
1667:..\src/interruptions.c ****             }
1668:..\src/interruptions.c ****         }
1669:..\src/interruptions.c **** 
1670:..\src/interruptions.c ****         error[n_line][index] = 0;
 4715              		.loc 1 1670 0
 4716 02d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4717 02d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4718 02da 8B48     		ldr	r0, .L336
 4719 02dc 1346     		mov	r3, r2
 4720 02de 5B00     		lsls	r3, r3, #1
 4721 02e0 1344     		add	r3, r3, r2
 4722 02e2 0344     		add	r3, r3, r0
 4723 02e4 0B44     		add	r3, r3, r1
 4724 02e6 0022     		movs	r2, #0
 4725 02e8 1A70     		strb	r2, [r3]
1671:..\src/interruptions.c ****         
1672:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 115


 4726              		.loc 1 1672 0
 4727 02ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4728 02ec 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4729 02f0 8648     		ldr	r0, .L336+4
 4730 02f2 1346     		mov	r3, r2
 4731 02f4 5B00     		lsls	r3, r3, #1
 4732 02f6 1344     		add	r3, r3, r2
 4733 02f8 0B44     		add	r3, r3, r1
 4734 02fa FA69     		ldr	r2, [r7, #28]
 4735 02fc 40F82320 		str	r2, [r0, r3, lsl #2]
1673:..\src/interruptions.c **** 
1674:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 4736              		.loc 1 1674 0
 4737 0300 FB69     		ldr	r3, [r7, #28]
 4738 0302 BB62     		str	r3, [r7, #40]
1675:..\src/interruptions.c **** 
1676:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 4739              		.loc 1 1676 0
 4740 0304 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4741 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4742 030a 8149     		ldr	r1, .L336+8
 4743 030c 3420     		movs	r0, #52
 4744 030e 00FB02F2 		mul	r2, r0, r2
 4745 0312 0A44     		add	r2, r2, r1
 4746 0314 1344     		add	r3, r3, r2
 4747 0316 1833     		adds	r3, r3, #24
 4748 0318 93F90030 		ldrsb	r3, [r3]
 4749 031c 1B04     		lsls	r3, r3, #16
 4750 031e BA6A     		ldr	r2, [r7, #40]
 4751 0320 1344     		add	r3, r3, r2
 4752 0322 BB62     		str	r3, [r7, #40]
1677:..\src/interruptions.c ****         
1678:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 4753              		.loc 1 1678 0
 4754 0324 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4755 0326 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4756 032a 7A48     		ldr	r0, .L336+12
 4757 032c 1346     		mov	r3, r2
 4758 032e 5B00     		lsls	r3, r3, #1
 4759 0330 1344     		add	r3, r3, r2
 4760 0332 9B00     		lsls	r3, r3, #2
 4761 0334 0B44     		add	r3, r3, r1
 4762 0336 6833     		adds	r3, r3, #104
 4763 0338 9B00     		lsls	r3, r3, #2
 4764 033a 0344     		add	r3, r3, r0
 4765 033c 5B68     		ldr	r3, [r3, #4]	@ float
 4766 033e 4FF07E51 		mov	r1, #1065353216
 4767 0342 1846     		mov	r0, r3
 4768 0344 FFF7FEFF 		bl	__aeabi_fcmpeq
 4769 0348 0346     		mov	r3, r0
 4770 034a 002B     		cmp	r3, #0
 4771 034c 1AD1     		bne	.L315
1679:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 4772              		.loc 1 1679 0
 4773 034e B86A     		ldr	r0, [r7, #40]
 4774 0350 FFF7FEFF 		bl	__aeabi_i2f
 4775 0354 0446     		mov	r4, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 116


 4776 0356 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4777 0358 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4778 035c 6D48     		ldr	r0, .L336+12
 4779 035e 1346     		mov	r3, r2
 4780 0360 5B00     		lsls	r3, r3, #1
 4781 0362 1344     		add	r3, r3, r2
 4782 0364 9B00     		lsls	r3, r3, #2
 4783 0366 0B44     		add	r3, r3, r1
 4784 0368 6833     		adds	r3, r3, #104
 4785 036a 9B00     		lsls	r3, r3, #2
 4786 036c 0344     		add	r3, r3, r0
 4787 036e 5B68     		ldr	r3, [r3, #4]	@ float
 4788 0370 1946     		mov	r1, r3
 4789 0372 2046     		mov	r0, r4
 4790 0374 FFF7FEFF 		bl	__aeabi_fmul
 4791 0378 0346     		mov	r3, r0
 4792 037a 1846     		mov	r0, r3
 4793 037c FFF7FEFF 		bl	__aeabi_f2iz
 4794 0380 0346     		mov	r3, r0
 4795 0382 BB62     		str	r3, [r7, #40]
 4796              	.L315:
1680:..\src/interruptions.c ****         }
1681:..\src/interruptions.c **** 
1682:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 4797              		.loc 1 1682 0
 4798 0384 634B     		ldr	r3, .L336+12
 4799 0386 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 4800 038a 002B     		cmp	r3, #0
 4801 038c 0BD1     		bne	.L317
1683:..\src/interruptions.c ****             // Right / Left hand turn
1684:..\src/interruptions.c ****             if (index == 0) {
 4802              		.loc 1 1684 0
 4803 038e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4804 0392 002B     		cmp	r3, #0
 4805 0394 07D1     		bne	.L317
1685:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 4806              		.loc 1 1685 0
 4807 0396 5F4B     		ldr	r3, .L336+12
 4808 0398 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 4809 039c 002B     		cmp	r3, #0
 4810 039e 02D1     		bne	.L317
1686:..\src/interruptions.c ****                     value_encoder *= -1;        
 4811              		.loc 1 1686 0
 4812 03a0 BB6A     		ldr	r3, [r7, #40]
 4813 03a2 5B42     		negs	r3, r3
 4814 03a4 BB62     		str	r3, [r7, #40]
 4815              	.L317:
1687:..\src/interruptions.c ****                 }
1688:..\src/interruptions.c ****             }
1689:..\src/interruptions.c ****         }
1690:..\src/interruptions.c ****  
1691:..\src/interruptions.c **** 
1692:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 4816              		.loc 1 1692 0
 4817 03a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4818 03a8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4819 03ac 5848     		ldr	r0, .L336+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 117


 4820 03ae 1346     		mov	r3, r2
 4821 03b0 5B00     		lsls	r3, r3, #1
 4822 03b2 1344     		add	r3, r3, r2
 4823 03b4 9B00     		lsls	r3, r3, #2
 4824 03b6 1344     		add	r3, r3, r2
 4825 03b8 0B44     		add	r3, r3, r1
 4826 03ba BA6A     		ldr	r2, [r7, #40]
 4827 03bc 40F82320 		str	r2, [r0, r3, lsl #2]
1693:..\src/interruptions.c ****     
1694:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 4828              		.loc 1 1694 0
 4829 03c0 BA6A     		ldr	r2, [r7, #40]
 4830 03c2 1346     		mov	r3, r2
 4831 03c4 9B00     		lsls	r3, r3, #2
 4832 03c6 1344     		add	r3, r3, r2
 4833 03c8 5B00     		lsls	r3, r3, #1
 4834 03ca 9918     		adds	r1, r3, r2
 4835 03cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4836 03ce 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4837 03d2 514C     		ldr	r4, .L336+16
 4838 03d4 1346     		mov	r3, r2
 4839 03d6 5B00     		lsls	r3, r3, #1
 4840 03d8 1344     		add	r3, r3, r2
 4841 03da 0344     		add	r3, r3, r0
 4842 03dc 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4843 03e0 6FF01102 		mvn	r2, #17
 4844 03e4 02FB03F3 		mul	r3, r2, r3
 4845 03e8 1944     		add	r1, r1, r3
 4846 03ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4847 03ec 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4848 03f0 4A4C     		ldr	r4, .L336+20
 4849 03f2 1346     		mov	r3, r2
 4850 03f4 5B00     		lsls	r3, r3, #1
 4851 03f6 1344     		add	r3, r3, r2
 4852 03f8 0344     		add	r3, r3, r0
 4853 03fa 54F82320 		ldr	r2, [r4, r3, lsl #2]
 4854 03fe 1346     		mov	r3, r2
 4855 0400 DB00     		lsls	r3, r3, #3
 4856 0402 1344     		add	r3, r3, r2
 4857 0404 1944     		add	r1, r1, r3
 4858 0406 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4859 0408 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4860 040c 444C     		ldr	r4, .L336+24
 4861 040e 1346     		mov	r3, r2
 4862 0410 5B00     		lsls	r3, r3, #1
 4863 0412 1344     		add	r3, r3, r2
 4864 0414 0344     		add	r3, r3, r0
 4865 0416 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4866 041a 5B00     		lsls	r3, r3, #1
 4867 041c C81A     		subs	r0, r1, r3
 4868 041e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4869 0422 DB00     		lsls	r3, r3, #3
 4870 0424 3F4A     		ldr	r2, .L336+28
 4871 0426 1344     		add	r3, r3, r2
 4872 0428 1946     		mov	r1, r3
 4873 042a FFF7FEFF 		bl	filter
 4874 042e 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 118


 4875 0430 1BB2     		sxth	r3, r3
 4876 0432 7B61     		str	r3, [r7, #20]
1695:..\src/interruptions.c **** 
1696:..\src/interruptions.c ****         //Update current speed
1697:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 4877              		.loc 1 1697 0
 4878 0434 7869     		ldr	r0, [r7, #20]
 4879 0436 FFF7FEFF 		bl	__aeabi_i2f
 4880 043a 0446     		mov	r4, r0
 4881 043c 3A4B     		ldr	r3, .L336+32
 4882 043e 1B68     		ldr	r3, [r3]	@ float
 4883 0440 3A49     		ldr	r1, .L336+36
 4884 0442 1846     		mov	r0, r3
 4885 0444 FFF7FEFF 		bl	__aeabi_fmul
 4886 0448 0346     		mov	r3, r0
 4887 044a 1946     		mov	r1, r3
 4888 044c 2046     		mov	r0, r4
 4889 044e FFF7FEFF 		bl	__aeabi_fdiv
 4890 0452 0346     		mov	r3, r0
 4891 0454 1846     		mov	r0, r3
 4892 0456 FFF7FEFF 		bl	__aeabi_f2iz
 4893 045a 0346     		mov	r3, r0
 4894 045c 7B61     		str	r3, [r7, #20]
1698:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 4895              		.loc 1 1698 0
 4896 045e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4897 0460 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4898 0464 2A48     		ldr	r0, .L336+8
 4899 0466 1346     		mov	r3, r2
 4900 0468 5B00     		lsls	r3, r3, #1
 4901 046a 1344     		add	r3, r3, r2
 4902 046c 9B00     		lsls	r3, r3, #2
 4903 046e 1344     		add	r3, r3, r2
 4904 0470 0B44     		add	r3, r3, r1
 4905 0472 0633     		adds	r3, r3, #6
 4906 0474 9B00     		lsls	r3, r3, #2
 4907 0476 0344     		add	r3, r3, r0
 4908 0478 7A69     		ldr	r2, [r7, #20]
 4909 047a 5A60     		str	r2, [r3, #4]
1699:..\src/interruptions.c **** 
1700:..\src/interruptions.c ****         // update old velocity and acceleration values
1701:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 4910              		.loc 1 1701 0
 4911 047c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4912 047e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4913 0482 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4914 0484 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 4915 0488 244D     		ldr	r5, .L336+20
 4916 048a 0B46     		mov	r3, r1
 4917 048c 5B00     		lsls	r3, r3, #1
 4918 048e 0B44     		add	r3, r3, r1
 4919 0490 2344     		add	r3, r3, r4
 4920 0492 55F82310 		ldr	r1, [r5, r3, lsl #2]
 4921 0496 224C     		ldr	r4, .L336+24
 4922 0498 1346     		mov	r3, r2
 4923 049a 5B00     		lsls	r3, r3, #1
 4924 049c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 119


 4925 049e 0344     		add	r3, r3, r0
 4926 04a0 44F82310 		str	r1, [r4, r3, lsl #2]
1702:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 4927              		.loc 1 1702 0
 4928 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4929 04a6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4930 04aa F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4931 04ac 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 4932 04b0 194D     		ldr	r5, .L336+16
 4933 04b2 0B46     		mov	r3, r1
 4934 04b4 5B00     		lsls	r3, r3, #1
 4935 04b6 0B44     		add	r3, r3, r1
 4936 04b8 2344     		add	r3, r3, r4
 4937 04ba 55F82310 		ldr	r1, [r5, r3, lsl #2]
 4938 04be 174C     		ldr	r4, .L336+20
 4939 04c0 1346     		mov	r3, r2
 4940 04c2 5B00     		lsls	r3, r3, #1
 4941 04c4 1344     		add	r3, r3, r2
 4942 04c6 0344     		add	r3, r3, r0
 4943 04c8 44F82310 		str	r1, [r4, r3, lsl #2]
1703:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 4944              		.loc 1 1703 0
 4945 04cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4946 04ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4947 04d2 1148     		ldr	r0, .L336+16
 4948 04d4 1346     		mov	r3, r2
 4949 04d6 5B00     		lsls	r3, r3, #1
 4950 04d8 1344     		add	r3, r3, r2
 4951 04da 0B44     		add	r3, r3, r1
 4952 04dc BA6A     		ldr	r2, [r7, #40]
 4953 04de 40F82320 		str	r2, [r0, r3, lsl #2]
1704:..\src/interruptions.c **** 
1705:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1706:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 4954              		.loc 1 1706 0
 4955 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4956 04e4 124A     		ldr	r2, .L336+40
 4957 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4958 04e8 002B     		cmp	r3, #0
 4959 04ea 40F03B81 		bne	.L318
1707:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 4960              		.loc 1 1707 0
 4961 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4962 04f0 104A     		ldr	r2, .L336+44
 4963 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4964 04f4 212B     		cmp	r3, #33
 4965 04f6 1FD8     		bhi	.L319
1708:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 4966              		.loc 1 1708 0
 4967 04f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4968 04fa 0E4A     		ldr	r2, .L336+44
 4969 04fc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4970 04fe 0132     		adds	r2, r2, #1
 4971 0500 D1B2     		uxtb	r1, r2
 4972 0502 0C4A     		ldr	r2, .L336+44
 4973 0504 D154     		strb	r1, [r2, r3]
 4974 0506 2DE1     		b	.L318
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 120


 4975              	.L337:
 4976              		.align	2
 4977              	.L336:
 4978 0508 10010000 		.word	error.10565
 4979 050c E0000000 		.word	last_value_encoder.10563
 4980 0510 00000000 		.word	g_meas
 4981 0514 00000000 		.word	c_mem
 4982 0518 18010000 		.word	v_value.10571
 4983 051c 30010000 		.word	vv_value.10572
 4984 0520 48010000 		.word	vvv_value.10573
 4985 0524 00000000 		.word	filt_vel
 4986 0528 00000000 		.word	cycle_time
 4987 052c 0000C040 		.word	1086324736
 4988 0530 60010000 		.word	pos_reconstruct.10570
 4989 0534 64010000 		.word	one_time_execute.10568
 4990              	.L319:
1709:..\src/interruptions.c ****             else {
1710:..\src/interruptions.c ****                 //Double encoder translation
1711:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 4991              		.loc 1 1711 0
 4992 0538 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4993 053a AE49     		ldr	r1, .L338
 4994 053c 1346     		mov	r3, r2
 4995 053e 5B00     		lsls	r3, r3, #1
 4996 0540 1344     		add	r3, r3, r2
 4997 0542 1B01     		lsls	r3, r3, #4
 4998 0544 0B44     		add	r3, r3, r1
 4999 0546 03F5D873 		add	r3, r3, #432
 5000 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5001 054c 002B     		cmp	r3, #0
 5002 054e 5ED0     		beq	.L320
1712:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5003              		.loc 1 1712 0
 5004 0550 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5005 0552 A949     		ldr	r1, .L338+4
 5006 0554 1346     		mov	r3, r2
 5007 0556 5B00     		lsls	r3, r3, #1
 5008 0558 1344     		add	r3, r3, r2
 5009 055a 9B00     		lsls	r3, r3, #2
 5010 055c 0B44     		add	r3, r3, r1
 5011 055e 1868     		ldr	r0, [r3]
 5012 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5013 0562 A549     		ldr	r1, .L338+4
 5014 0564 1346     		mov	r3, r2
 5015 0566 5B00     		lsls	r3, r3, #1
 5016 0568 1344     		add	r3, r3, r2
 5017 056a 9B00     		lsls	r3, r3, #2
 5018 056c 0B44     		add	r3, r3, r1
 5019 056e 0433     		adds	r3, r3, #4
 5020 0570 1C68     		ldr	r4, [r3]
1713:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5021              		.loc 1 1713 0
 5022 0572 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5023 0574 9F49     		ldr	r1, .L338
 5024 0576 1346     		mov	r3, r2
 5025 0578 5B00     		lsls	r3, r3, #1
 5026 057a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 121


 5027 057c 1B01     		lsls	r3, r3, #4
 5028 057e 0B44     		add	r3, r3, r1
 5029 0580 03F2B513 		addw	r3, r3, #437
 5030 0584 93F90030 		ldrsb	r3, [r3]
1712:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5031              		.loc 1 1712 0
 5032 0588 1D46     		mov	r5, r3
 5033              		.loc 1 1713 0
 5034 058a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5035 058c 9949     		ldr	r1, .L338
 5036 058e 1346     		mov	r3, r2
 5037 0590 5B00     		lsls	r3, r3, #1
 5038 0592 1344     		add	r3, r3, r2
 5039 0594 1B01     		lsls	r3, r3, #4
 5040 0596 0B44     		add	r3, r3, r1
 5041 0598 03F5DB73 		add	r3, r3, #438
 5042 059c 93F90030 		ldrsb	r3, [r3]
1712:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5043              		.loc 1 1712 0
 5044 05a0 1E46     		mov	r6, r3
 5045              		.loc 1 1713 0
 5046 05a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5047 05a4 9349     		ldr	r1, .L338
 5048 05a6 1346     		mov	r3, r2
 5049 05a8 5B00     		lsls	r3, r3, #1
 5050 05aa 1344     		add	r3, r3, r2
 5051 05ac 1B01     		lsls	r3, r3, #4
 5052 05ae 0B44     		add	r3, r3, r1
 5053 05b0 03F2B713 		addw	r3, r3, #439
 5054 05b4 93F90030 		ldrsb	r3, [r3]
1712:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5055              		.loc 1 1712 0
 5056 05b8 0093     		str	r3, [sp]
 5057 05ba 3346     		mov	r3, r6
 5058 05bc 2A46     		mov	r2, r5
 5059 05be 2146     		mov	r1, r4
 5060 05c0 FFF7FEFF 		bl	calc_turns_fcn
 5061 05c4 0346     		mov	r3, r0
 5062 05c6 87F82730 		strb	r3, [r7, #39]
1714:..\src/interruptions.c **** 
1715:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5063              		.loc 1 1715 0
 5064 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5065 05cc 8949     		ldr	r1, .L338
 5066 05ce 1346     		mov	r3, r2
 5067 05d0 5B00     		lsls	r3, r3, #1
 5068 05d2 1344     		add	r3, r3, r2
 5069 05d4 1B01     		lsls	r3, r3, #4
 5070 05d6 0B44     		add	r3, r3, r1
 5071 05d8 03F5D273 		add	r3, r3, #420
 5072 05dc 1B68     		ldr	r3, [r3]	@ float
 5073 05de 4FF00001 		mov	r1, #0
 5074 05e2 1846     		mov	r0, r3
 5075 05e4 FFF7FEFF 		bl	__aeabi_fcmplt
 5076 05e8 0346     		mov	r3, r0
 5077 05ea 002B     		cmp	r3, #0
 5078 05ec 05D0     		beq	.L321
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 122


1716:..\src/interruptions.c ****                         init_rot = -init_rot;
 5079              		.loc 1 1716 0
 5080 05ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5081 05f2 5B42     		negs	r3, r3
 5082 05f4 DBB2     		uxtb	r3, r3
 5083 05f6 87F82730 		strb	r3, [r7, #39]
 5084              	.L321:
1717:..\src/interruptions.c ****                     
1718:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5085              		.loc 1 1718 0
 5086 05fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5087 05fc 7F4A     		ldr	r2, .L338+8
 5088 05fe 3421     		movs	r1, #52
 5089 0600 01FB03F3 		mul	r3, r1, r3
 5090 0604 1344     		add	r3, r3, r2
 5091 0606 1833     		adds	r3, r3, #24
 5092 0608 97F82720 		ldrb	r2, [r7, #39]
 5093 060c 1A70     		strb	r2, [r3]
 5094              	.L320:
1719:..\src/interruptions.c ****                 }    
1720:..\src/interruptions.c **** 
1721:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5095              		.loc 1 1721 0
 5096 060e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5097 0610 7849     		ldr	r1, .L338
 5098 0612 1346     		mov	r3, r2
 5099 0614 5B00     		lsls	r3, r3, #1
 5100 0616 1344     		add	r3, r3, r2
 5101 0618 1B01     		lsls	r3, r3, #4
 5102 061a 0B44     		add	r3, r3, r1
 5103 061c 03F5D273 		add	r3, r3, #420
 5104 0620 1B68     		ldr	r3, [r3]	@ float
 5105 0622 4FF07E51 		mov	r1, #1065353216
 5106 0626 1846     		mov	r0, r3
 5107 0628 FFF7FEFF 		bl	__aeabi_fcmpeq
 5108 062c 0346     		mov	r3, r0
 5109 062e 002B     		cmp	r3, #0
 5110 0630 22D1     		bne	.L323
1722:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5111              		.loc 1 1722 0
 5112 0632 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5113 0634 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5114 0636 714A     		ldr	r2, .L338+8
 5115 0638 3421     		movs	r1, #52
 5116 063a 01FB03F3 		mul	r3, r1, r3
 5117 063e 1344     		add	r3, r3, r2
 5118 0640 1B68     		ldr	r3, [r3]
 5119 0642 1846     		mov	r0, r3
 5120 0644 FFF7FEFF 		bl	__aeabi_i2f
 5121 0648 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5122 064a 6A49     		ldr	r1, .L338
 5123 064c 1346     		mov	r3, r2
 5124 064e 5B00     		lsls	r3, r3, #1
 5125 0650 1344     		add	r3, r3, r2
 5126 0652 1B01     		lsls	r3, r3, #4
 5127 0654 0B44     		add	r3, r3, r1
 5128 0656 03F5D273 		add	r3, r3, #420
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 123


 5129 065a 1B68     		ldr	r3, [r3]	@ float
 5130 065c 1946     		mov	r1, r3
 5131 065e FFF7FEFF 		bl	__aeabi_fdiv
 5132 0662 0346     		mov	r3, r0
 5133 0664 1846     		mov	r0, r3
 5134 0666 FFF7FEFF 		bl	__aeabi_f2iz
 5135 066a 0146     		mov	r1, r0
 5136 066c 634A     		ldr	r2, .L338+8
 5137 066e 3423     		movs	r3, #52
 5138 0670 03FB04F3 		mul	r3, r3, r4
 5139 0674 1344     		add	r3, r3, r2
 5140 0676 1960     		str	r1, [r3]
 5141              	.L323:
1723:..\src/interruptions.c ****                 
1724:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5142              		.loc 1 1724 0
 5143 0678 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5144 067a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5145 067c 5F49     		ldr	r1, .L338+8
 5146 067e 3420     		movs	r0, #52
 5147 0680 00FB02F2 		mul	r2, r0, r2
 5148 0684 0A44     		add	r2, r2, r1
 5149 0686 1168     		ldr	r1, [r2]
 5150 0688 97F92720 		ldrsb	r2, [r7, #39]
 5151 068c 1204     		lsls	r2, r2, #16
 5152 068e 0A44     		add	r2, r2, r1
 5153 0690 5A49     		ldr	r1, .L338+8
 5154 0692 3420     		movs	r0, #52
 5155 0694 00FB03F3 		mul	r3, r0, r3
 5156 0698 0B44     		add	r3, r3, r1
 5157 069a 1A60     		str	r2, [r3]
1725:..\src/interruptions.c ****             
1726:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5158              		.loc 1 1726 0
 5159 069c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5160 069e 5549     		ldr	r1, .L338
 5161 06a0 1346     		mov	r3, r2
 5162 06a2 5B00     		lsls	r3, r3, #1
 5163 06a4 1344     		add	r3, r3, r2
 5164 06a6 1B01     		lsls	r3, r3, #4
 5165 06a8 0B44     		add	r3, r3, r1
 5166 06aa 03F5D273 		add	r3, r3, #420
 5167 06ae 1B68     		ldr	r3, [r3]	@ float
 5168 06b0 4FF07E51 		mov	r1, #1065353216
 5169 06b4 1846     		mov	r0, r3
 5170 06b6 FFF7FEFF 		bl	__aeabi_fcmpeq
 5171 06ba 0346     		mov	r3, r0
 5172 06bc 002B     		cmp	r3, #0
 5173 06be 22D1     		bne	.L325
1727:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
 5174              		.loc 1 1727 0
 5175 06c0 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5176 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5177 06c4 4D4A     		ldr	r2, .L338+8
 5178 06c6 3421     		movs	r1, #52
 5179 06c8 01FB03F3 		mul	r3, r1, r3
 5180 06cc 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 124


 5181 06ce 1B68     		ldr	r3, [r3]
 5182 06d0 1846     		mov	r0, r3
 5183 06d2 FFF7FEFF 		bl	__aeabi_i2f
 5184 06d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5185 06d8 4649     		ldr	r1, .L338
 5186 06da 1346     		mov	r3, r2
 5187 06dc 5B00     		lsls	r3, r3, #1
 5188 06de 1344     		add	r3, r3, r2
 5189 06e0 1B01     		lsls	r3, r3, #4
 5190 06e2 0B44     		add	r3, r3, r1
 5191 06e4 03F5D273 		add	r3, r3, #420
 5192 06e8 1B68     		ldr	r3, [r3]	@ float
 5193 06ea 1946     		mov	r1, r3
 5194 06ec FFF7FEFF 		bl	__aeabi_fmul
 5195 06f0 0346     		mov	r3, r0
 5196 06f2 1846     		mov	r0, r3
 5197 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 5198 06f8 0146     		mov	r1, r0
 5199 06fa 404A     		ldr	r2, .L338+8
 5200 06fc 3423     		movs	r3, #52
 5201 06fe 03FB04F3 		mul	r3, r3, r4
 5202 0702 1344     		add	r3, r3, r2
 5203 0704 1960     		str	r1, [r3]
 5204              	.L325:
1728:..\src/interruptions.c ****             
1729:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5205              		.loc 1 1729 0
 5206 0706 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5207 0708 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5208 070a 3C49     		ldr	r1, .L338+8
 5209 070c 3420     		movs	r0, #52
 5210 070e 00FB02F2 		mul	r2, r0, r2
 5211 0712 0A44     		add	r2, r2, r1
 5212 0714 1268     		ldr	r2, [r2]
 5213 0716 3A49     		ldr	r1, .L338+12
 5214 0718 1B01     		lsls	r3, r3, #4
 5215 071a 0B44     		add	r3, r3, r1
 5216 071c 1A60     		str	r2, [r3]
1730:..\src/interruptions.c **** 
1731:..\src/interruptions.c ****                 // If necessary activate motor
1732:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5217              		.loc 1 1732 0
 5218 071e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5219 0720 384A     		ldr	r2, .L338+16
 5220 0722 0121     		movs	r1, #1
 5221 0724 D154     		strb	r1, [r2, r3]
1733:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1734:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5222              		.loc 1 1734 0
 5223 0726 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5224 0728 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5225 072a 3248     		ldr	r0, .L338
 5226 072c 1346     		mov	r3, r2
 5227 072e DB00     		lsls	r3, r3, #3
 5228 0730 9B1A     		subs	r3, r3, r2
 5229 0732 1B01     		lsls	r3, r3, #4
 5230 0734 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 125


 5231 0736 E033     		adds	r3, r3, #224
 5232 0738 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5233 073a 314A     		ldr	r2, .L338+12
 5234 073c 0B01     		lsls	r3, r1, #4
 5235 073e 1344     		add	r3, r3, r2
 5236 0740 0C33     		adds	r3, r3, #12
 5237 0742 0246     		mov	r2, r0
 5238 0744 1A70     		strb	r2, [r3]
1735:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5239              		.loc 1 1735 0
 5240 0746 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5241 0748 2D4A     		ldr	r2, .L338+12
 5242 074a 1B01     		lsls	r3, r3, #4
 5243 074c 1344     		add	r3, r3, r2
 5244 074e 0C33     		adds	r3, r3, #12
 5245 0750 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5246 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5247 0754 1146     		mov	r1, r2
 5248 0756 1846     		mov	r0, r3
 5249 0758 FFF7FEFF 		bl	enable_motor
1736:..\src/interruptions.c ****                 
1737:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5250              		.loc 1 1737 0
 5251 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5252 075e 2A4A     		ldr	r2, .L338+20
 5253 0760 0121     		movs	r1, #1
 5254 0762 D154     		strb	r1, [r2, r3]
 5255              	.L318:
1610:..\src/interruptions.c ****         
 5256              		.loc 1 1610 0 discriminator 2
 5257 0764 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5258 0768 0133     		adds	r3, r3, #1
 5259 076a 87F82F30 		strb	r3, [r7, #47]
 5260              	.L307:
1610:..\src/interruptions.c ****         
 5261              		.loc 1 1610 0 is_stmt 0 discriminator 1
 5262 076e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5263 0772 022B     		cmp	r3, #2
 5264 0774 7FF6C7AC 		bls	.L327
1738:..\src/interruptions.c ****             }
1739:..\src/interruptions.c ****         }
1740:..\src/interruptions.c ****     } 
1741:..\src/interruptions.c **** 
1742:..\src/interruptions.c **** 	
1743:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1744:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5265              		.loc 1 1744 0 is_stmt 1
 5266 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5267 077a 224A     		ldr	r2, .L338+16
 5268 077c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5269 077e 002B     		cmp	r3, #0
 5270 0780 35D0     		beq	.L298
1745:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5271              		.loc 1 1745 0
 5272 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5273 0784 214A     		ldr	r2, .L338+24
 5274 0786 52F82320 		ldr	r2, [r2, r3, lsl #2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 126


 5275 078a 0132     		adds	r2, r2, #1
 5276 078c 1F49     		ldr	r1, .L338+24
 5277 078e 41F82320 		str	r2, [r1, r3, lsl #2]
1746:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5278              		.loc 1 1746 0
 5279 0792 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5280 0794 1D4A     		ldr	r2, .L338+24
 5281 0796 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5282 079a B3F5FA5F 		cmp	r3, #8000
 5283 079e 26D3     		bcc	.L298
1747:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5284              		.loc 1 1747 0
 5285 07a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5286 07a2 174A     		ldr	r2, .L338+12
 5287 07a4 1B01     		lsls	r3, r3, #4
 5288 07a6 1344     		add	r3, r3, r2
 5289 07a8 0022     		movs	r2, #0
 5290 07aa 1A60     		str	r2, [r3]
1748:..\src/interruptions.c ****             
1749:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1750:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5291              		.loc 1 1750 0
 5292 07ac B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5293 07ae BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5294 07b0 1048     		ldr	r0, .L338
 5295 07b2 1346     		mov	r3, r2
 5296 07b4 DB00     		lsls	r3, r3, #3
 5297 07b6 9B1A     		subs	r3, r3, r2
 5298 07b8 1B01     		lsls	r3, r3, #4
 5299 07ba 0344     		add	r3, r3, r0
 5300 07bc E033     		adds	r3, r3, #224
 5301 07be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5302 07c0 0F4A     		ldr	r2, .L338+12
 5303 07c2 0B01     		lsls	r3, r1, #4
 5304 07c4 1344     		add	r3, r3, r2
 5305 07c6 0C33     		adds	r3, r3, #12
 5306 07c8 0246     		mov	r2, r0
 5307 07ca 1A70     		strb	r2, [r3]
1751:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 5308              		.loc 1 1751 0
 5309 07cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5310 07ce 0C4A     		ldr	r2, .L338+12
 5311 07d0 1B01     		lsls	r3, r3, #4
 5312 07d2 1344     		add	r3, r3, r2
 5313 07d4 0C33     		adds	r3, r3, #12
 5314 07d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5315 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5316 07da 1146     		mov	r1, r2
 5317 07dc 1846     		mov	r0, r3
 5318 07de FFF7FEFF 		bl	enable_motor
1752:..\src/interruptions.c ****                         
1753:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5319              		.loc 1 1753 0
 5320 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5321 07e4 074A     		ldr	r2, .L338+16
 5322 07e6 0021     		movs	r1, #0
 5323 07e8 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 127


 5324 07ea 00E0     		b	.L298
 5325              	.L333:
1665:..\src/interruptions.c ****                 }
 5326              		.loc 1 1665 0
 5327 07ec 00BF     		nop
 5328              	.L298:
1754:..\src/interruptions.c ****         }
1755:..\src/interruptions.c ****     }
1756:..\src/interruptions.c ****  
1757:..\src/interruptions.c **** }
 5329              		.loc 1 1757 0
 5330 07ee 3437     		adds	r7, r7, #52
 5331              		.cfi_def_cfa_offset 20
 5332 07f0 BD46     		mov	sp, r7
 5333              		.cfi_def_cfa_register 13
 5334              		@ sp needed
 5335 07f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5336              	.L339:
 5337              		.align	2
 5338              	.L338:
 5339 07f4 00000000 		.word	c_mem
 5340 07f8 F8000000 		.word	comp_value_encoder.10564
 5341 07fc 00000000 		.word	g_meas
 5342 0800 00000000 		.word	g_refNew
 5343 0804 68010000 		.word	safe_startup_motor_activation.10567
 5344 0808 60010000 		.word	pos_reconstruct.10570
 5345 080c 6C010000 		.word	count_startup_motor.10569
 5346              		.cfi_endproc
 5347              	.LFE72:
 5348              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 5349              		.section	.text.analog_read_end,"ax",%progbits
 5350              		.align	2
 5351              		.global	analog_read_end
 5352              		.thumb
 5353              		.thumb_func
 5354              		.type	analog_read_end, %function
 5355              	analog_read_end:
 5356              	.LFB73:
1758:..\src/interruptions.c **** 
1759:..\src/interruptions.c **** //==============================================================================
1760:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1761:..\src/interruptions.c **** //==============================================================================
1762:..\src/interruptions.c **** 
1763:..\src/interruptions.c **** void analog_read_end() {
 5357              		.loc 1 1763 0
 5358              		.cfi_startproc
 5359              		@ args = 0, pretend = 0, frame = 8
 5360              		@ frame_needed = 1, uses_anonymous_args = 0
 5361 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5362              		.cfi_def_cfa_offset 20
 5363              		.cfi_offset 4, -20
 5364              		.cfi_offset 5, -16
 5365              		.cfi_offset 6, -12
 5366              		.cfi_offset 7, -8
 5367              		.cfi_offset 14, -4
 5368 0002 83B0     		sub	sp, sp, #12
 5369              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 128


 5370 0004 00AF     		add	r7, sp, #0
 5371              		.cfi_def_cfa_register 7
1764:..\src/interruptions.c **** 
1765:..\src/interruptions.c ****     /* =========================================================================
1766:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1767:..\src/interruptions.c ****     /
1768:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1769:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1770:..\src/interruptions.c ****     /
1771:..\src/interruptions.c ****     /   Definition:
1772:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1773:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1774:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1775:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1776:..\src/interruptions.c ****     /
1777:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1778:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1779:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1780:..\src/interruptions.c ****     /  =========================================================================
1781:..\src/interruptions.c ****     */
1782:..\src/interruptions.c **** 
1783:..\src/interruptions.c ****     int32 CYDATA i_aux;
1784:..\src/interruptions.c **** 
1785:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1786:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1787:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1788:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1789:..\src/interruptions.c ****     static int32 UD_mean_value;
1790:..\src/interruptions.c ****     static int32 LR_mean_value;
1791:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1792:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1793:..\src/interruptions.c ****     static uint16 count = 0;
1794:..\src/interruptions.c ****     static uint32 v_count = 0;
1795:..\src/interruptions.c ****     static uint8 idx = 0;
1796:..\src/interruptions.c ****     
1797:..\src/interruptions.c ****     // Wait for conversion end
1798:..\src/interruptions.c ****     
1799:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5372              		.loc 1 1799 0
 5373 0006 08E0     		b	.L341
 5374              	.L342:
1800:..\src/interruptions.c ****         
1801:..\src/interruptions.c ****         if (interrupt_flag){
 5375              		.loc 1 1801 0
 5376 0008 A84B     		ldr	r3, .L495
 5377 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5378 000c 002B     		cmp	r3, #0
 5379 000e 04D0     		beq	.L341
1802:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5380              		.loc 1 1802 0
 5381 0010 A64B     		ldr	r3, .L495
 5382 0012 0022     		movs	r2, #0
 5383 0014 1A70     		strb	r2, [r3]
1803:..\src/interruptions.c ****             interrupt_manager();
 5384              		.loc 1 1803 0
 5385 0016 FFF7FEFF 		bl	interrupt_manager
 5386              	.L341:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 129


1799:..\src/interruptions.c ****         
 5387              		.loc 1 1799 0
 5388 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5389 001e 0346     		mov	r3, r0
 5390 0020 002B     		cmp	r3, #0
 5391 0022 F1D0     		beq	.L342
1804:..\src/interruptions.c ****         }
1805:..\src/interruptions.c ****     }
1806:..\src/interruptions.c ****     
1807:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1808:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1809:..\src/interruptions.c ****         // Read pressure in any case
1810:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1811:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1812:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1813:..\src/interruptions.c ****     }
1814:..\src/interruptions.c **** #endif
1815:..\src/interruptions.c ****  
1816:..\src/interruptions.c ****     // Convert tension read
1817:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 5392              		.loc 1 1817 0
 5393 0024 A24B     		ldr	r3, .L495+4
 5394 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5395 002a 022B     		cmp	r3, #2
 5396 002c 04D1     		bne	.L343
1818:..\src/interruptions.c ****         dev_tension[0] = 5000;
 5397              		.loc 1 1818 0
 5398 002e A14B     		ldr	r3, .L495+8
 5399 0030 41F28832 		movw	r2, #5000
 5400 0034 1A60     		str	r2, [r3]
 5401 0036 0BE0     		b	.L344
 5402              	.L343:
1819:..\src/interruptions.c ****     }
1820:..\src/interruptions.c ****     else {
1821:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5403              		.loc 1 1821 0
 5404 0038 9F4B     		ldr	r3, .L495+12
 5405 003a B3F90030 		ldrsh	r3, [r3]
 5406 003e A3F25563 		subw	r3, r3, #1621
 5407 0042 40F2C672 		movw	r2, #1990
 5408 0046 02FB03F3 		mul	r3, r2, r3
 5409 004a DB11     		asrs	r3, r3, #7
 5410 004c 994A     		ldr	r2, .L495+8
 5411 004e 1360     		str	r3, [r2]
 5412              	.L344:
1822:..\src/interruptions.c ****     }
1823:..\src/interruptions.c ****     
1824:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1825:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5413              		.loc 1 1825 0
 5414 0050 9A4B     		ldr	r3, .L495+16
 5415 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5416 0054 042B     		cmp	r3, #4
 5417 0056 0BD9     		bls	.L345
1826:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5418              		.loc 1 1826 0
 5419 0058 974B     		ldr	r3, .L495+12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 130


 5420 005a B3F90830 		ldrsh	r3, [r3, #8]
 5421 005e A3F25563 		subw	r3, r3, #1621
 5422 0062 40F2C672 		movw	r2, #1990
 5423 0066 02FB03F3 		mul	r3, r2, r3
 5424 006a DB11     		asrs	r3, r3, #7
 5425 006c 914A     		ldr	r2, .L495+8
 5426 006e 5360     		str	r3, [r2, #4]
 5427              	.L345:
1827:..\src/interruptions.c ****     }
1828:..\src/interruptions.c ****     
1829:..\src/interruptions.c ****     if (interrupt_flag){
 5428              		.loc 1 1829 0
 5429 0070 8E4B     		ldr	r3, .L495
 5430 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5431 0074 002B     		cmp	r3, #0
 5432 0076 04D0     		beq	.L346
1830:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5433              		.loc 1 1830 0
 5434 0078 8C4B     		ldr	r3, .L495
 5435 007a 0022     		movs	r2, #0
 5436 007c 1A70     		strb	r2, [r3]
1831:..\src/interruptions.c ****         interrupt_manager();
 5437              		.loc 1 1831 0
 5438 007e FFF7FEFF 		bl	interrupt_manager
 5439              	.L346:
1832:..\src/interruptions.c ****     }
1833:..\src/interruptions.c ****     
1834:..\src/interruptions.c ****     // VOLTAGE READING
1835:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1836:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1837:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1838:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1839:..\src/interruptions.c ****     
1840:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 5440              		.loc 1 1840 0
 5441 0082 8F4B     		ldr	r3, .L495+20
 5442 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5443 0086 002B     		cmp	r3, #0
 5444 0088 4DD0     		beq	.L347
 5445              		.loc 1 1840 0 is_stmt 0 discriminator 1
 5446 008a 8E4B     		ldr	r3, .L495+24
 5447 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5448 008e 002B     		cmp	r3, #0
 5449 0090 49D0     		beq	.L347
1841:..\src/interruptions.c ****         count = count + 1;
 5450              		.loc 1 1841 0 is_stmt 1
 5451 0092 8D4B     		ldr	r3, .L495+28
 5452 0094 1B88     		ldrh	r3, [r3]
 5453 0096 0133     		adds	r3, r3, #1
 5454 0098 9AB2     		uxth	r2, r3
 5455 009a 8B4B     		ldr	r3, .L495+28
 5456 009c 1A80     		strh	r2, [r3]	@ movhi
1842:..\src/interruptions.c ****         
1843:..\src/interruptions.c ****         if (count == 1000){
 5457              		.loc 1 1843 0
 5458 009e 8A4B     		ldr	r3, .L495+28
 5459 00a0 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 131


 5460 00a2 B3F57A7F 		cmp	r3, #1000
 5461 00a6 3ED1     		bne	.L347
1844:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5462              		.loc 1 1844 0
 5463 00a8 884B     		ldr	r3, .L495+32
 5464 00aa 0022     		movs	r2, #0
 5465 00ac 1A70     		strb	r2, [r3]
 5466 00ae 33E0     		b	.L348
 5467              	.L352:
1845:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5468              		.loc 1 1845 0
 5469 00b0 864B     		ldr	r3, .L495+32
 5470 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5471 00b4 1A46     		mov	r2, r3
 5472 00b6 7F4B     		ldr	r3, .L495+8
 5473 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5474 00bc 42F22732 		movw	r2, #8999
 5475 00c0 9342     		cmp	r3, r2
 5476 00c2 08DC     		bgt	.L349
1846:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5477              		.loc 1 1846 0
 5478 00c4 814B     		ldr	r3, .L495+32
 5479 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5480 00c8 1946     		mov	r1, r3
 5481 00ca 814B     		ldr	r3, .L495+36
 5482 00cc 4FF4FA52 		mov	r2, #8000
 5483 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 5484 00d4 1AE0     		b	.L350
 5485              	.L349:
1847:..\src/interruptions.c ****                 }
1848:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1849:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5486              		.loc 1 1849 0
 5487 00d6 7D4B     		ldr	r3, .L495+32
 5488 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5489 00da 1A46     		mov	r2, r3
 5490 00dc 754B     		ldr	r3, .L495+8
 5491 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5492 00e2 43F2C722 		movw	r2, #12999
 5493 00e6 9342     		cmp	r3, r2
 5494 00e8 08DC     		bgt	.L351
1850:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5495              		.loc 1 1850 0
 5496 00ea 784B     		ldr	r3, .L495+32
 5497 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5498 00ee 1946     		mov	r1, r3
 5499 00f0 774B     		ldr	r3, .L495+36
 5500 00f2 42F6E062 		movw	r2, #12000
 5501 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 5502 00fa 07E0     		b	.L350
 5503              	.L351:
1851:..\src/interruptions.c ****                     }
1852:..\src/interruptions.c ****                     else
1853:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5504              		.loc 1 1853 0
 5505 00fc 734B     		ldr	r3, .L495+32
 5506 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 132


 5507 0100 1946     		mov	r1, r3
 5508 0102 734B     		ldr	r3, .L495+36
 5509 0104 45F6C052 		movw	r2, #24000
 5510 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 5511              	.L350:
1844:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5512              		.loc 1 1844 0 discriminator 2
 5513 010c 6F4B     		ldr	r3, .L495+32
 5514 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5515 0110 0133     		adds	r3, r3, #1
 5516 0112 DAB2     		uxtb	r2, r3
 5517 0114 6D4B     		ldr	r3, .L495+32
 5518 0116 1A70     		strb	r2, [r3]
 5519              	.L348:
1844:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5520              		.loc 1 1844 0 is_stmt 0 discriminator 1
 5521 0118 6C4B     		ldr	r3, .L495+32
 5522 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5523 011c 012B     		cmp	r3, #1
 5524 011e C7D9     		bls	.L352
1854:..\src/interruptions.c ****                 }
1855:..\src/interruptions.c ****             }
1856:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5525              		.loc 1 1856 0 is_stmt 1
 5526 0120 674B     		ldr	r3, .L495+20
 5527 0122 0022     		movs	r2, #0
 5528 0124 1A70     		strb	r2, [r3]
 5529              	.L347:
1857:..\src/interruptions.c ****         }
1858:..\src/interruptions.c ****     }
1859:..\src/interruptions.c **** 
1860:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1861:..\src/interruptions.c **** 
1862:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 5530              		.loc 1 1862 0
 5531 0126 634B     		ldr	r3, .L495+8
 5532 0128 1B68     		ldr	r3, [r3]
 5533 012a 41F65732 		movw	r2, #6999
 5534 012e 9342     		cmp	r3, r2
 5535 0130 00F3F080 		bgt	.L353
 5536              		.loc 1 1862 0 is_stmt 0 discriminator 1
 5537 0134 614B     		ldr	r3, .L495+16
 5538 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5539 0138 042B     		cmp	r3, #4
 5540 013a 06D9     		bls	.L354
 5541              		.loc 1 1862 0 discriminator 2
 5542 013c 5D4B     		ldr	r3, .L495+8
 5543 013e 5B68     		ldr	r3, [r3, #4]
 5544 0140 41F65732 		movw	r2, #6999
 5545 0144 9342     		cmp	r3, r2
 5546 0146 00F3E580 		bgt	.L353
 5547              	.L354:
1863:..\src/interruptions.c ****         // PSoC is powered through uUSB
1864:..\src/interruptions.c ****         
1865:..\src/interruptions.c ****         tension_valid = FALSE;
 5548              		.loc 1 1865 0 is_stmt 1
 5549 014a 5E4B     		ldr	r3, .L495+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 133


 5550 014c 0022     		movs	r2, #0
 5551 014e 1A70     		strb	r2, [r3]
1866:..\src/interruptions.c ****             
1867:..\src/interruptions.c ****         if (interrupt_flag){
 5552              		.loc 1 1867 0
 5553 0150 564B     		ldr	r3, .L495
 5554 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5555 0154 002B     		cmp	r3, #0
 5556 0156 04D0     		beq	.L355
1868:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5557              		.loc 1 1868 0
 5558 0158 544B     		ldr	r3, .L495
 5559 015a 0022     		movs	r2, #0
 5560 015c 1A70     		strb	r2, [r3]
1869:..\src/interruptions.c ****             interrupt_manager();
 5561              		.loc 1 1869 0
 5562 015e FFF7FEFF 		bl	interrupt_manager
 5563              	.L355:
1870:..\src/interruptions.c ****         }
1871:..\src/interruptions.c ****         
1872:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5564              		.loc 1 1872 0
 5565 0162 5A4B     		ldr	r3, .L495+32
 5566 0164 0022     		movs	r2, #0
 5567 0166 1A70     		strb	r2, [r3]
 5568 0168 81E0     		b	.L356
 5569              	.L359:
1873:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5570              		.loc 1 1873 0
 5571 016a 5A4B     		ldr	r3, .L495+40
 5572 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 5573 0170 002B     		cmp	r3, #0
 5574 0172 59D0     		beq	.L357
1874:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5575              		.loc 1 1874 0
 5576 0174 554B     		ldr	r3, .L495+32
 5577 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5578 0178 1946     		mov	r1, r3
 5579 017a 564A     		ldr	r2, .L495+40
 5580 017c 0B46     		mov	r3, r1
 5581 017e DB00     		lsls	r3, r3, #3
 5582 0180 5B1A     		subs	r3, r3, r1
 5583 0182 1B01     		lsls	r3, r3, #4
 5584 0184 1344     		add	r3, r3, r2
 5585 0186 03F58773 		add	r3, r3, #270
 5586 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5587 018c 022B     		cmp	r3, #2
 5588 018e 37D0     		beq	.L358
1875:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5589              		.loc 1 1875 0 discriminator 1
 5590 0190 4E4B     		ldr	r3, .L495+32
 5591 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5592 0194 1946     		mov	r1, r3
 5593 0196 4F4A     		ldr	r2, .L495+40
 5594 0198 0B46     		mov	r3, r1
 5595 019a DB00     		lsls	r3, r3, #3
 5596 019c 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 134


 5597 019e 1B01     		lsls	r3, r3, #4
 5598 01a0 1344     		add	r3, r3, r2
 5599 01a2 03F58773 		add	r3, r3, #270
 5600 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1874:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5601              		.loc 1 1874 0 discriminator 1
 5602 01a8 032B     		cmp	r3, #3
 5603 01aa 29D0     		beq	.L358
1876:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5604              		.loc 1 1876 0
 5605 01ac 474B     		ldr	r3, .L495+32
 5606 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5607 01b0 1946     		mov	r1, r3
 5608 01b2 484A     		ldr	r2, .L495+40
 5609 01b4 0B46     		mov	r3, r1
 5610 01b6 DB00     		lsls	r3, r3, #3
 5611 01b8 5B1A     		subs	r3, r3, r1
 5612 01ba 1B01     		lsls	r3, r3, #4
 5613 01bc 1344     		add	r3, r3, r2
 5614 01be 03F58773 		add	r3, r3, #270
 5615 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1875:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 5616              		.loc 1 1875 0
 5617 01c4 042B     		cmp	r3, #4
 5618 01c6 1BD0     		beq	.L358
1877:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 5619              		.loc 1 1877 0
 5620 01c8 404B     		ldr	r3, .L495+32
 5621 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5622 01cc 1946     		mov	r1, r3
 5623 01ce 414A     		ldr	r2, .L495+40
 5624 01d0 0B46     		mov	r3, r1
 5625 01d2 DB00     		lsls	r3, r3, #3
 5626 01d4 5B1A     		subs	r3, r3, r1
 5627 01d6 1B01     		lsls	r3, r3, #4
 5628 01d8 1344     		add	r3, r3, r2
 5629 01da 03F58773 		add	r3, r3, #270
 5630 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1876:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 5631              		.loc 1 1876 0
 5632 01e0 052B     		cmp	r3, #5
 5633 01e2 0DD0     		beq	.L358
1878:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 5634              		.loc 1 1878 0
 5635 01e4 394B     		ldr	r3, .L495+32
 5636 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5637 01e8 1946     		mov	r1, r3
 5638 01ea 3A4A     		ldr	r2, .L495+40
 5639 01ec 0B46     		mov	r3, r1
 5640 01ee DB00     		lsls	r3, r3, #3
 5641 01f0 5B1A     		subs	r3, r3, r1
 5642 01f2 1B01     		lsls	r3, r3, #4
 5643 01f4 1344     		add	r3, r3, r2
 5644 01f6 03F58773 		add	r3, r3, #270
 5645 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1877:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 5646              		.loc 1 1877 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 135


 5647 01fc 072B     		cmp	r3, #7
 5648 01fe 13D1     		bne	.L357
 5649              	.L358:
1879:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 5650              		.loc 1 1879 0
 5651 0200 324B     		ldr	r3, .L495+32
 5652 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5653 0204 344A     		ldr	r2, .L495+44
 5654 0206 1B01     		lsls	r3, r3, #4
 5655 0208 1344     		add	r3, r3, r2
 5656 020a 0C33     		adds	r3, r3, #12
 5657 020c 0022     		movs	r2, #0
 5658 020e 1A70     		strb	r2, [r3]
1880:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 5659              		.loc 1 1880 0
 5660 0210 2E4B     		ldr	r3, .L495+32
 5661 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5662 0214 2D4B     		ldr	r3, .L495+32
 5663 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5664 0218 2F4A     		ldr	r2, .L495+44
 5665 021a 1B01     		lsls	r3, r3, #4
 5666 021c 1344     		add	r3, r3, r2
 5667 021e 0C33     		adds	r3, r3, #12
 5668 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5669 0222 1946     		mov	r1, r3
 5670 0224 FFF7FEFF 		bl	enable_motor
 5671              	.L357:
1881:..\src/interruptions.c ****                     
1882:..\src/interruptions.c ****                 }
1883:..\src/interruptions.c ****             }
1884:..\src/interruptions.c **** 
1885:..\src/interruptions.c ****             // Assign dev_tension and reset current
1886:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 5672              		.loc 1 1886 0 discriminator 2
 5673 0228 284B     		ldr	r3, .L495+32
 5674 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5675 022c 1946     		mov	r1, r3
 5676 022e 214B     		ldr	r3, .L495+8
 5677 0230 41F28832 		movw	r2, #5000
 5678 0234 43F82120 		str	r2, [r3, r1, lsl #2]
1887:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 5679              		.loc 1 1887 0 discriminator 2
 5680 0238 244B     		ldr	r3, .L495+32
 5681 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5682 023c 1946     		mov	r1, r3
 5683 023e 1C4A     		ldr	r2, .L495+4
 5684 0240 0B46     		mov	r3, r1
 5685 0242 DB00     		lsls	r3, r3, #3
 5686 0244 5B1A     		subs	r3, r3, r1
 5687 0246 1B01     		lsls	r3, r3, #4
 5688 0248 1344     		add	r3, r3, r2
 5689 024a 03F58873 		add	r3, r3, #272
 5690 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5691 0250 1946     		mov	r1, r3
 5692 0252 224A     		ldr	r2, .L495+48
 5693 0254 3423     		movs	r3, #52
 5694 0256 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 136


 5695 025a 1344     		add	r3, r3, r2
 5696 025c 0C33     		adds	r3, r3, #12
 5697 025e 0022     		movs	r2, #0
 5698 0260 1A60     		str	r2, [r3]
1872:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5699              		.loc 1 1872 0 discriminator 2
 5700 0262 1A4B     		ldr	r3, .L495+32
 5701 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5702 0266 0133     		adds	r3, r3, #1
 5703 0268 DAB2     		uxtb	r2, r3
 5704 026a 184B     		ldr	r3, .L495+32
 5705 026c 1A70     		strb	r2, [r3]
 5706              	.L356:
1872:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5707              		.loc 1 1872 0 is_stmt 0 discriminator 1
 5708 026e 174B     		ldr	r3, .L495+32
 5709 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5710 0272 012B     		cmp	r3, #1
 5711 0274 7FF679AF 		bls	.L359
1888:..\src/interruptions.c ****         }
1889:..\src/interruptions.c ****         
1890:..\src/interruptions.c ****         // Reset emg
1891:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 5712              		.loc 1 1891 0 is_stmt 1
 5713 0278 144B     		ldr	r3, .L495+32
 5714 027a 0022     		movs	r2, #0
 5715 027c 1A70     		strb	r2, [r3]
 5716 027e 0CE0     		b	.L360
 5717              	.L361:
1892:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 5718              		.loc 1 1892 0 discriminator 3
 5719 0280 124B     		ldr	r3, .L495+32
 5720 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5721 0284 1946     		mov	r1, r3
 5722 0286 164B     		ldr	r3, .L495+52
 5723 0288 0022     		movs	r2, #0
 5724 028a 43F82120 		str	r2, [r3, r1, lsl #2]
1891:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 5725              		.loc 1 1891 0 discriminator 3
 5726 028e 0F4B     		ldr	r3, .L495+32
 5727 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5728 0292 0133     		adds	r3, r3, #1
 5729 0294 DAB2     		uxtb	r2, r3
 5730 0296 0D4B     		ldr	r3, .L495+32
 5731 0298 1A70     		strb	r2, [r3]
 5732              	.L360:
1891:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 5733              		.loc 1 1891 0 is_stmt 0 discriminator 1
 5734 029a 0C4B     		ldr	r3, .L495+32
 5735 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5736 029e 012B     		cmp	r3, #1
 5737 02a0 EED9     		bls	.L361
1893:..\src/interruptions.c ****         }
1894:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 5738              		.loc 1 1894 0 is_stmt 1
 5739 02a2 0A4B     		ldr	r3, .L495+32
 5740 02a4 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 137


 5741 02a6 1A70     		strb	r2, [r3]
 5742 02a8 29E0     		b	.L362
 5743              	.L496:
 5744 02aa 00BF     		.align	2
 5745              	.L495:
 5746 02ac 00000000 		.word	interrupt_flag
 5747 02b0 00000000 		.word	g_mem
 5748 02b4 00000000 		.word	dev_tension
 5749 02b8 00000000 		.word	ADC_buf
 5750 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 5751 02c0 06000000 		.word	first_tension_valid.10596
 5752 02c4 00000000 		.word	tension_valid
 5753 02c8 74010000 		.word	count.10597
 5754 02cc 76010000 		.word	idx.10599
 5755 02d0 00000000 		.word	pow_tension
 5756 02d4 00000000 		.word	c_mem
 5757 02d8 00000000 		.word	g_ref
 5758 02dc 00000000 		.word	g_meas
 5759 02e0 00000000 		.word	g_adc_meas
 5760              	.L364:
1895:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 5761              		.loc 1 1895 0 discriminator 4
 5762 02e4 A74B     		ldr	r3, .L497
 5763 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5764 02e8 A74A     		ldr	r2, .L497+4
 5765 02ea 0233     		adds	r3, r3, #2
 5766 02ec 0021     		movs	r1, #0
 5767 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
1894:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 5768              		.loc 1 1894 0 discriminator 4
 5769 02f2 A44B     		ldr	r3, .L497
 5770 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5771 02f6 0133     		adds	r3, r3, #1
 5772 02f8 DAB2     		uxtb	r2, r3
 5773 02fa A24B     		ldr	r3, .L497
 5774 02fc 1A70     		strb	r2, [r3]
 5775              	.L362:
1894:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 5776              		.loc 1 1894 0 is_stmt 0 discriminator 1
 5777 02fe A34B     		ldr	r3, .L497+8
 5778 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 5779 0304 002B     		cmp	r3, #0
 5780 0306 00F0EF81 		beq	.L477
1894:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 5781              		.loc 1 1894 0 discriminator 3
 5782 030a 9E4B     		ldr	r3, .L497
 5783 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5784 030e 052B     		cmp	r3, #5
 5785 0310 E8D9     		bls	.L364
1862:..\src/interruptions.c ****         // PSoC is powered through uUSB
 5786              		.loc 1 1862 0 is_stmt 1
 5787 0312 E9E1     		b	.L477
 5788              	.L353:
1896:..\src/interruptions.c ****         }
1897:..\src/interruptions.c ****         
1898:..\src/interruptions.c ****     }
1899:..\src/interruptions.c ****     else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 138


1900:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1901:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1902:..\src/interruptions.c ****         
1903:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1904:..\src/interruptions.c ****         
1905:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 5789              		.loc 1 1905 0
 5790 0314 9E4B     		ldr	r3, .L497+12
 5791 0316 1B68     		ldr	r3, [r3]
 5792 0318 B3F57A7F 		cmp	r3, #1000
 5793 031c 0DD1     		bne	.L366
 5794              		.loc 1 1905 0 is_stmt 0 discriminator 1
 5795 031e 9D4B     		ldr	r3, .L497+16
 5796 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5797 0322 002B     		cmp	r3, #0
 5798 0324 09D1     		bne	.L366
1906:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1907:..\src/interruptions.c ****             tension_valid = TRUE;   
 5799              		.loc 1 1907 0 is_stmt 1
 5800 0326 9B4B     		ldr	r3, .L497+16
 5801 0328 0122     		movs	r2, #1
 5802 032a 1A70     		strb	r2, [r3]
1908:..\src/interruptions.c ****             count = 0;
 5803              		.loc 1 1908 0
 5804 032c 9A4B     		ldr	r3, .L497+20
 5805 032e 0022     		movs	r2, #0
 5806 0330 1A80     		strh	r2, [r3]	@ movhi
1909:..\src/interruptions.c ****             v_count = 0;
 5807              		.loc 1 1909 0
 5808 0332 974B     		ldr	r3, .L497+12
 5809 0334 0022     		movs	r2, #0
 5810 0336 1A60     		str	r2, [r3]
 5811 0338 2CE0     		b	.L367
 5812              	.L366:
1910:..\src/interruptions.c ****         }
1911:..\src/interruptions.c ****         else {  
1912:..\src/interruptions.c ****             // wait for battery voltage stabilization
1913:..\src/interruptions.c ****             if (v_count < 1000) {
 5813              		.loc 1 1913 0
 5814 033a 954B     		ldr	r3, .L497+12
 5815 033c 1B68     		ldr	r3, [r3]
 5816 033e B3F57A7F 		cmp	r3, #1000
 5817 0342 04D2     		bcs	.L368
1914:..\src/interruptions.c ****                 v_count = v_count + 1;
 5818              		.loc 1 1914 0
 5819 0344 924B     		ldr	r3, .L497+12
 5820 0346 1B68     		ldr	r3, [r3]
 5821 0348 0133     		adds	r3, r3, #1
 5822 034a 914A     		ldr	r2, .L497+12
 5823 034c 1360     		str	r3, [r2]
 5824              	.L368:
1915:..\src/interruptions.c ****             }
1916:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5825              		.loc 1 1916 0
 5826 034e 8D4B     		ldr	r3, .L497
 5827 0350 0022     		movs	r2, #0
 5828 0352 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 139


 5829 0354 1AE0     		b	.L369
 5830              	.L370:
1917:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5831              		.loc 1 1917 0 discriminator 3
 5832 0356 8B4B     		ldr	r3, .L497
 5833 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5834 035a 1C46     		mov	r4, r3
 5835 035c 894B     		ldr	r3, .L497
 5836 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5837 0360 1A46     		mov	r2, r3
 5838 0362 8E4B     		ldr	r3, .L497+24
 5839 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 5840 0368 864B     		ldr	r3, .L497
 5841 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5842 036c DB00     		lsls	r3, r3, #3
 5843 036e 8C4A     		ldr	r2, .L497+28
 5844 0370 1344     		add	r3, r3, r2
 5845 0372 1946     		mov	r1, r3
 5846 0374 FFF7FEFF 		bl	filter
 5847 0378 0246     		mov	r2, r0
 5848 037a 8A4B     		ldr	r3, .L497+32
 5849 037c 43F82420 		str	r2, [r3, r4, lsl #2]
1916:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5850              		.loc 1 1916 0 discriminator 3
 5851 0380 804B     		ldr	r3, .L497
 5852 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5853 0384 0133     		adds	r3, r3, #1
 5854 0386 DAB2     		uxtb	r2, r3
 5855 0388 7E4B     		ldr	r3, .L497
 5856 038a 1A70     		strb	r2, [r3]
 5857              	.L369:
1916:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 5858              		.loc 1 1916 0 is_stmt 0 discriminator 1
 5859 038c 7D4B     		ldr	r3, .L497
 5860 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5861 0390 012B     		cmp	r3, #1
 5862 0392 E0D9     		bls	.L370
 5863              	.L367:
1918:..\src/interruptions.c ****             }
1919:..\src/interruptions.c ****         }
1920:..\src/interruptions.c **** 
1921:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5864              		.loc 1 1921 0 is_stmt 1
 5865 0394 7B4B     		ldr	r3, .L497
 5866 0396 0022     		movs	r2, #0
 5867 0398 1A70     		strb	r2, [r3]
 5868 039a 17E0     		b	.L371
 5869              	.L373:
1922:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 5870              		.loc 1 1922 0
 5871 039c 794B     		ldr	r3, .L497
 5872 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5873 03a0 1946     		mov	r1, r3
 5874 03a2 814A     		ldr	r2, .L497+36
 5875 03a4 0B46     		mov	r3, r1
 5876 03a6 DB00     		lsls	r3, r3, #3
 5877 03a8 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 140


 5878 03aa 1B01     		lsls	r3, r3, #4
 5879 03ac 1344     		add	r3, r3, r2
 5880 03ae E133     		adds	r3, r3, #225
 5881 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5882 03b2 002B     		cmp	r3, #0
 5883 03b4 04D0     		beq	.L372
1923:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 5884              		.loc 1 1923 0
 5885 03b6 734B     		ldr	r3, .L497
 5886 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5887 03ba 1846     		mov	r0, r3
 5888 03bc FFF7FEFF 		bl	pwm_limit_search
 5889              	.L372:
1921:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 5890              		.loc 1 1921 0 discriminator 2
 5891 03c0 704B     		ldr	r3, .L497
 5892 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5893 03c4 0133     		adds	r3, r3, #1
 5894 03c6 DAB2     		uxtb	r2, r3
 5895 03c8 6E4B     		ldr	r3, .L497
 5896 03ca 1A70     		strb	r2, [r3]
 5897              	.L371:
1921:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 5898              		.loc 1 1921 0 is_stmt 0 discriminator 1
 5899 03cc 6D4B     		ldr	r3, .L497
 5900 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5901 03d0 012B     		cmp	r3, #1
 5902 03d2 E3D9     		bls	.L373
1924:..\src/interruptions.c ****         }
1925:..\src/interruptions.c ****         
1926:..\src/interruptions.c ****         // Filter and Set currents
1927:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 5903              		.loc 1 1927 0 is_stmt 1
 5904 03d4 744B     		ldr	r3, .L497+36
 5905 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 5906 03da 002B     		cmp	r3, #0
 5907 03dc 21D1     		bne	.L374
1928:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 5908              		.loc 1 1928 0
 5909 03de 724B     		ldr	r3, .L497+36
 5910 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5911 03e4 1C46     		mov	r4, r3
 5912 03e6 714B     		ldr	r3, .L497+40
 5913 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 5914 03ec A3F5CE63 		sub	r3, r3, #1648
 5915 03f0 45F66A02 		movw	r2, #22634
 5916 03f4 02FB03F3 		mul	r3, r2, r3
 5917 03f8 5B13     		asrs	r3, r3, #13
 5918 03fa 1BB2     		sxth	r3, r3
 5919 03fc 1A46     		mov	r2, r3
 5920 03fe 6C4B     		ldr	r3, .L497+44
 5921 0400 93F90030 		ldrsb	r3, [r3]
 5922 0404 03FB02F3 		mul	r3, r3, r2
 5923 0408 6A49     		ldr	r1, .L497+48
 5924 040a 1846     		mov	r0, r3
 5925 040c FFF7FEFF 		bl	filter
 5926 0410 0146     		mov	r1, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 141


 5927 0412 694A     		ldr	r2, .L497+52
 5928 0414 3423     		movs	r3, #52
 5929 0416 03FB04F3 		mul	r3, r3, r4
 5930 041a 1344     		add	r3, r3, r2
 5931 041c 0C33     		adds	r3, r3, #12
 5932 041e 1960     		str	r1, [r3]
 5933 0420 1BE0     		b	.L375
 5934              	.L374:
1929:..\src/interruptions.c ****         } else { // [GS]
1930:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 5935              		.loc 1 1930 0
 5936 0422 614B     		ldr	r3, .L497+36
 5937 0424 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5938 0428 1846     		mov	r0, r3
 5939 042a 604B     		ldr	r3, .L497+40
 5940 042c B3F90230 		ldrsh	r3, [r3, #2]
 5941 0430 A3F26362 		subw	r2, r3, #1635
 5942 0434 1346     		mov	r3, r2
 5943 0436 1B01     		lsls	r3, r3, #4
 5944 0438 9B1A     		subs	r3, r3, r2
 5945 043a 5B01     		lsls	r3, r3, #5
 5946 043c 1B11     		asrs	r3, r3, #4
 5947 043e 1BB2     		sxth	r3, r3
 5948 0440 1A46     		mov	r2, r3
 5949 0442 5B4B     		ldr	r3, .L497+44
 5950 0444 93F90030 		ldrsb	r3, [r3]
 5951 0448 03FB02F2 		mul	r2, r3, r2
 5952 044c 5A49     		ldr	r1, .L497+52
 5953 044e 3423     		movs	r3, #52
 5954 0450 03FB00F3 		mul	r3, r3, r0
 5955 0454 0B44     		add	r3, r3, r1
 5956 0456 0C33     		adds	r3, r3, #12
 5957 0458 1A60     		str	r2, [r3]
 5958              	.L375:
1931:..\src/interruptions.c ****         }  
1932:..\src/interruptions.c **** 
1933:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1934:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 5959              		.loc 1 1934 0
 5960 045a 534B     		ldr	r3, .L497+36
 5961 045c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5962 0460 1D46     		mov	r5, r3
 5963 0462 514B     		ldr	r3, .L497+36
 5964 0464 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5965 0468 1946     		mov	r1, r3
 5966 046a 534A     		ldr	r2, .L497+52
 5967 046c 3423     		movs	r3, #52
 5968 046e 03FB01F3 		mul	r3, r3, r1
 5969 0472 1344     		add	r3, r3, r2
 5970 0474 0C33     		adds	r3, r3, #12
 5971 0476 1C68     		ldr	r4, [r3]
 5972 0478 4B4B     		ldr	r3, .L497+36
 5973 047a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5974 047e 1946     		mov	r1, r3
 5975 0480 4D4A     		ldr	r2, .L497+52
 5976 0482 3423     		movs	r3, #52
 5977 0484 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 142


 5978 0488 1344     		add	r3, r3, r2
 5979 048a 1A68     		ldr	r2, [r3]
 5980 048c 464B     		ldr	r3, .L497+36
 5981 048e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5982 0492 1846     		mov	r0, r3
 5983 0494 4449     		ldr	r1, .L497+36
 5984 0496 0346     		mov	r3, r0
 5985 0498 5B00     		lsls	r3, r3, #1
 5986 049a 0344     		add	r3, r3, r0
 5987 049c 1B01     		lsls	r3, r3, #4
 5988 049e 0B44     		add	r3, r3, r1
 5989 04a0 03F29513 		addw	r3, r3, #405
 5990 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5991 04a6 42FA03F6 		asr	r6, r2, r3
 5992 04aa 3F4B     		ldr	r3, .L497+36
 5993 04ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 5994 04b0 1946     		mov	r1, r3
 5995 04b2 414A     		ldr	r2, .L497+52
 5996 04b4 3423     		movs	r3, #52
 5997 04b6 03FB01F3 		mul	r3, r3, r1
 5998 04ba 1344     		add	r3, r3, r2
 5999 04bc 1C33     		adds	r3, r3, #28
 6000 04be 1A68     		ldr	r2, [r3]
 6001 04c0 394B     		ldr	r3, .L497+36
 6002 04c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6003 04c6 1846     		mov	r0, r3
 6004 04c8 3749     		ldr	r1, .L497+36
 6005 04ca 0346     		mov	r3, r0
 6006 04cc 5B00     		lsls	r3, r3, #1
 6007 04ce 0344     		add	r3, r3, r0
 6008 04d0 1B01     		lsls	r3, r3, #4
 6009 04d2 0B44     		add	r3, r3, r1
 6010 04d4 03F29513 		addw	r3, r3, #405
 6011 04d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6012 04da 42FA03FE 		asr	lr, r2, r3
 6013 04de 374B     		ldr	r3, .L497+56
 6014 04e0 1A68     		ldr	r2, [r3]
 6015 04e2 314B     		ldr	r3, .L497+36
 6016 04e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6017 04e8 1846     		mov	r0, r3
 6018 04ea 2F49     		ldr	r1, .L497+36
 6019 04ec 0346     		mov	r3, r0
 6020 04ee 5B00     		lsls	r3, r3, #1
 6021 04f0 0344     		add	r3, r3, r0
 6022 04f2 1B01     		lsls	r3, r3, #4
 6023 04f4 0B44     		add	r3, r3, r1
 6024 04f6 03F29513 		addw	r3, r3, #405
 6025 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6026 04fc 42FA03F3 		asr	r3, r2, r3
 6027 0500 7246     		mov	r2, lr
 6028 0502 3146     		mov	r1, r6
 6029 0504 0020     		movs	r0, #0
 6030 0506 FFF7FEFF 		bl	curr_estim
 6031 050a 0346     		mov	r3, r0
 6032 050c E31A     		subs	r3, r4, r3
 6033 050e 2C49     		ldr	r1, .L497+60
 6034 0510 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 143


 6035 0512 FFF7FEFF 		bl	filter
 6036 0516 0346     		mov	r3, r0
 6037 0518 1BB2     		sxth	r3, r3
 6038 051a 1946     		mov	r1, r3
 6039 051c 264A     		ldr	r2, .L497+52
 6040 051e 3423     		movs	r3, #52
 6041 0520 03FB05F3 		mul	r3, r3, r5
 6042 0524 1344     		add	r3, r3, r2
 6043 0526 1033     		adds	r3, r3, #16
 6044 0528 1960     		str	r1, [r3]
1935:..\src/interruptions.c ****         
1936:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1937:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6045              		.loc 1 1937 0
 6046 052a 264B     		ldr	r3, .L497+64
 6047 052c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6048 052e 042B     		cmp	r3, #4
 6049 0530 40F2D080 		bls	.L376
1938:..\src/interruptions.c ****             // Filter and Set currents
1939:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6050              		.loc 1 1939 0
 6051 0534 1C4B     		ldr	r3, .L497+36
 6052 0536 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6053 053a 002B     		cmp	r3, #0
 6054 053c 46D1     		bne	.L377
1940:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6055              		.loc 1 1940 0
 6056 053e 1A4B     		ldr	r3, .L497+36
 6057 0540 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6058 0544 1C46     		mov	r4, r3
 6059 0546 194B     		ldr	r3, .L497+40
 6060 0548 B3F90A30 		ldrsh	r3, [r3, #10]
 6061 054c A3F5CE63 		sub	r3, r3, #1648
 6062 0550 45F66A02 		movw	r2, #22634
 6063 0554 02FB03F3 		mul	r3, r2, r3
 6064 0558 5B13     		asrs	r3, r3, #13
 6065 055a 1BB2     		sxth	r3, r3
 6066 055c 1A46     		mov	r2, r3
 6067 055e 144B     		ldr	r3, .L497+44
 6068 0560 93F90030 		ldrsb	r3, [r3]
 6069 0564 03FB02F3 		mul	r3, r3, r2
 6070 0568 1749     		ldr	r1, .L497+68
 6071 056a 1846     		mov	r0, r3
 6072 056c FFF7FEFF 		bl	filter
 6073 0570 0146     		mov	r1, r0
 6074 0572 114A     		ldr	r2, .L497+52
 6075 0574 3423     		movs	r3, #52
 6076 0576 03FB04F3 		mul	r3, r3, r4
 6077 057a 1344     		add	r3, r3, r2
 6078 057c 0C33     		adds	r3, r3, #12
 6079 057e 1960     		str	r1, [r3]
 6080 0580 40E0     		b	.L378
 6081              	.L498:
 6082 0582 00BF     		.align	2
 6083              	.L497:
 6084 0584 76010000 		.word	idx.10599
 6085 0588 00000000 		.word	g_adc_meas
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 144


 6086 058c 00000000 		.word	c_mem
 6087 0590 78010000 		.word	v_count.10598
 6088 0594 00000000 		.word	tension_valid
 6089 0598 74010000 		.word	count.10597
 6090 059c 00000000 		.word	dev_tension
 6091 05a0 00000000 		.word	filt_v
 6092 05a4 00000000 		.word	dev_tension_f
 6093 05a8 00000000 		.word	g_mem
 6094 05ac 00000000 		.word	ADC_buf
 6095 05b0 00000000 		.word	pwm_sign
 6096 05b4 00000000 		.word	filt_i
 6097 05b8 00000000 		.word	g_meas
 6098 05bc 00000000 		.word	g_ref
 6099 05c0 00000000 		.word	filt_curr_diff
 6100 05c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6101 05c8 08000000 		.word	filt_i+8
 6102              	.L377:
1941:..\src/interruptions.c ****             } else { // [GS]
1942:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6103              		.loc 1 1942 0
 6104 05cc 954B     		ldr	r3, .L499
 6105 05ce 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6106 05d2 1846     		mov	r0, r3
 6107 05d4 944B     		ldr	r3, .L499+4
 6108 05d6 B3F90A30 		ldrsh	r3, [r3, #10]
 6109 05da A3F26362 		subw	r2, r3, #1635
 6110 05de 1346     		mov	r3, r2
 6111 05e0 1B01     		lsls	r3, r3, #4
 6112 05e2 9B1A     		subs	r3, r3, r2
 6113 05e4 5B01     		lsls	r3, r3, #5
 6114 05e6 1B11     		asrs	r3, r3, #4
 6115 05e8 1BB2     		sxth	r3, r3
 6116 05ea 1A46     		mov	r2, r3
 6117 05ec 8F4B     		ldr	r3, .L499+8
 6118 05ee 93F90030 		ldrsb	r3, [r3]
 6119 05f2 03FB02F2 		mul	r2, r3, r2
 6120 05f6 8E49     		ldr	r1, .L499+12
 6121 05f8 3423     		movs	r3, #52
 6122 05fa 03FB00F3 		mul	r3, r3, r0
 6123 05fe 0B44     		add	r3, r3, r1
 6124 0600 0C33     		adds	r3, r3, #12
 6125 0602 1A60     		str	r2, [r3]
 6126              	.L378:
1943:..\src/interruptions.c ****             }  
1944:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
1945:..\src/interruptions.c ****             
1946:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6127              		.loc 1 1946 0
 6128 0604 874B     		ldr	r3, .L499
 6129 0606 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6130 060a 1D46     		mov	r5, r3
 6131 060c 854B     		ldr	r3, .L499
 6132 060e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6133 0612 1946     		mov	r1, r3
 6134 0614 864A     		ldr	r2, .L499+12
 6135 0616 3423     		movs	r3, #52
 6136 0618 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 145


 6137 061c 1344     		add	r3, r3, r2
 6138 061e 0C33     		adds	r3, r3, #12
 6139 0620 1C68     		ldr	r4, [r3]
 6140 0622 804B     		ldr	r3, .L499
 6141 0624 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6142 0628 1946     		mov	r1, r3
 6143 062a 814A     		ldr	r2, .L499+12
 6144 062c 3423     		movs	r3, #52
 6145 062e 03FB01F3 		mul	r3, r3, r1
 6146 0632 1344     		add	r3, r3, r2
 6147 0634 1A68     		ldr	r2, [r3]
 6148 0636 7B4B     		ldr	r3, .L499
 6149 0638 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6150 063c 1846     		mov	r0, r3
 6151 063e 7949     		ldr	r1, .L499
 6152 0640 0346     		mov	r3, r0
 6153 0642 5B00     		lsls	r3, r3, #1
 6154 0644 0344     		add	r3, r3, r0
 6155 0646 1B01     		lsls	r3, r3, #4
 6156 0648 0B44     		add	r3, r3, r1
 6157 064a 03F29513 		addw	r3, r3, #405
 6158 064e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6159 0650 42FA03F6 		asr	r6, r2, r3
 6160 0654 734B     		ldr	r3, .L499
 6161 0656 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6162 065a 1946     		mov	r1, r3
 6163 065c 744A     		ldr	r2, .L499+12
 6164 065e 3423     		movs	r3, #52
 6165 0660 03FB01F3 		mul	r3, r3, r1
 6166 0664 1344     		add	r3, r3, r2
 6167 0666 1C33     		adds	r3, r3, #28
 6168 0668 1A68     		ldr	r2, [r3]
 6169 066a 6E4B     		ldr	r3, .L499
 6170 066c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6171 0670 1846     		mov	r0, r3
 6172 0672 6C49     		ldr	r1, .L499
 6173 0674 0346     		mov	r3, r0
 6174 0676 5B00     		lsls	r3, r3, #1
 6175 0678 0344     		add	r3, r3, r0
 6176 067a 1B01     		lsls	r3, r3, #4
 6177 067c 0B44     		add	r3, r3, r1
 6178 067e 03F29513 		addw	r3, r3, #405
 6179 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6180 0684 42FA03FE 		asr	lr, r2, r3
 6181 0688 6A4B     		ldr	r3, .L499+16
 6182 068a 1A69     		ldr	r2, [r3, #16]
 6183 068c 654B     		ldr	r3, .L499
 6184 068e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6185 0692 1846     		mov	r0, r3
 6186 0694 6349     		ldr	r1, .L499
 6187 0696 0346     		mov	r3, r0
 6188 0698 5B00     		lsls	r3, r3, #1
 6189 069a 0344     		add	r3, r3, r0
 6190 069c 1B01     		lsls	r3, r3, #4
 6191 069e 0B44     		add	r3, r3, r1
 6192 06a0 03F29513 		addw	r3, r3, #405
 6193 06a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 146


 6194 06a6 42FA03F3 		asr	r3, r2, r3
 6195 06aa 7246     		mov	r2, lr
 6196 06ac 3146     		mov	r1, r6
 6197 06ae 0120     		movs	r0, #1
 6198 06b0 FFF7FEFF 		bl	curr_estim
 6199 06b4 0346     		mov	r3, r0
 6200 06b6 E31A     		subs	r3, r4, r3
 6201 06b8 5F49     		ldr	r1, .L499+20
 6202 06ba 1846     		mov	r0, r3
 6203 06bc FFF7FEFF 		bl	filter
 6204 06c0 0346     		mov	r3, r0
 6205 06c2 1BB2     		sxth	r3, r3
 6206 06c4 1946     		mov	r1, r3
 6207 06c6 5A4A     		ldr	r2, .L499+12
 6208 06c8 3423     		movs	r3, #52
 6209 06ca 03FB05F3 		mul	r3, r3, r5
 6210 06ce 1344     		add	r3, r3, r2
 6211 06d0 1033     		adds	r3, r3, #16
 6212 06d2 1960     		str	r1, [r3]
 6213              	.L376:
1947:..\src/interruptions.c ****         }
1948:..\src/interruptions.c ****     
1949:..\src/interruptions.c ****         // Check Interrupt 
1950:..\src/interruptions.c ****     
1951:..\src/interruptions.c ****         if (interrupt_flag){
 6214              		.loc 1 1951 0
 6215 06d4 594B     		ldr	r3, .L499+24
 6216 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6217 06d8 002B     		cmp	r3, #0
 6218 06da 06D0     		beq	.L365
1952:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6219              		.loc 1 1952 0
 6220 06dc 574B     		ldr	r3, .L499+24
 6221 06de 0022     		movs	r2, #0
 6222 06e0 1A70     		strb	r2, [r3]
1953:..\src/interruptions.c ****             interrupt_manager();
 6223              		.loc 1 1953 0
 6224 06e2 FFF7FEFF 		bl	interrupt_manager
 6225 06e6 00E0     		b	.L365
 6226              	.L477:
1862:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6227              		.loc 1 1862 0
 6228 06e8 00BF     		nop
 6229              	.L365:
1954:..\src/interruptions.c ****         }
1955:..\src/interruptions.c **** 
1956:..\src/interruptions.c ****     }
1957:..\src/interruptions.c ****     
1958:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1959:..\src/interruptions.c ****         
1960:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1961:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6230              		.loc 1 1961 0
 6231 06ea 554B     		ldr	r3, .L499+28
 6232 06ec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6233 06f0 002B     		cmp	r3, #0
 6234 06f2 05D1     		bne	.L379
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 147


1962:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6235              		.loc 1 1962 0
 6236 06f4 534B     		ldr	r3, .L499+32
 6237 06f6 0022     		movs	r2, #0
 6238 06f8 1A70     		strb	r2, [r3]
1963:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6239              		.loc 1 1963 0
 6240 06fa 534B     		ldr	r3, .L499+36
 6241 06fc 0022     		movs	r2, #0
 6242 06fe 1A70     		strb	r2, [r3]
 6243              	.L379:
1964:..\src/interruptions.c ****     }
1965:..\src/interruptions.c **** 
1966:..\src/interruptions.c ****     // EMG 1 calibration state machine
1967:..\src/interruptions.c ****    
1968:..\src/interruptions.c ****     // Calibration state machine
1969:..\src/interruptions.c ****     switch(emg_1_status) {
 6244              		.loc 1 1969 0
 6245 0700 504B     		ldr	r3, .L499+32
 6246 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6247 0704 032B     		cmp	r3, #3
 6248 0706 00F2FC80 		bhi	.L478
 6249 070a 01A2     		adr	r2, .L382
 6250 070c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6251              		.p2align 2
 6252              	.L382:
 6253 0710 21070000 		.word	.L381+1
 6254 0714 D1070000 		.word	.L383+1
 6255 0718 E7070000 		.word	.L384+1
 6256 071c 59080000 		.word	.L385+1
 6257              		.p2align 1
 6258              	.L381:
1970:..\src/interruptions.c ****         case NORMAL: // normal execution
1971:..\src/interruptions.c ****             
1972:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 6259              		.loc 1 1972 0
 6260 0720 404B     		ldr	r3, .L499
 6261 0722 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6262 0726 022B     		cmp	r3, #2
 6263 0728 13D0     		beq	.L386
 6264              		.loc 1 1972 0 is_stmt 0 discriminator 1
 6265 072a 3E4B     		ldr	r3, .L499
 6266 072c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6267 0730 032B     		cmp	r3, #3
 6268 0732 0ED0     		beq	.L386
1973:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6269              		.loc 1 1973 0 is_stmt 1
 6270 0734 424B     		ldr	r3, .L499+28
 6271 0736 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6272 073a 0233     		adds	r3, r3, #2
 6273 073c 3A4A     		ldr	r2, .L499+4
 6274 073e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6275 0742 A3F26763 		subw	r3, r3, #1639
 6276 0746 5722     		movs	r2, #87
 6277 0748 02FB03F3 		mul	r3, r2, r3
 6278 074c 5B11     		asrs	r3, r3, #5
 6279 074e 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 148


 6280 0750 07E0     		b	.L387
 6281              	.L386:
1974:..\src/interruptions.c ****             }
1975:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
1976:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 6282              		.loc 1 1976 0
 6283 0752 3B4B     		ldr	r3, .L499+28
 6284 0754 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6285 0758 0233     		adds	r3, r3, #2
 6286 075a 334A     		ldr	r2, .L499+4
 6287 075c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6288 0760 7B60     		str	r3, [r7, #4]
 6289              	.L387:
1977:..\src/interruptions.c ****             }
1978:..\src/interruptions.c ****             
1979:..\src/interruptions.c ****             if (i_aux < 0) 
 6290              		.loc 1 1979 0
 6291 0762 7B68     		ldr	r3, [r7, #4]
 6292 0764 002B     		cmp	r3, #0
 6293 0766 01DA     		bge	.L388
1980:..\src/interruptions.c ****                 i_aux = 0;
 6294              		.loc 1 1980 0
 6295 0768 0023     		movs	r3, #0
 6296 076a 7B60     		str	r3, [r7, #4]
 6297              	.L388:
1981:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6298              		.loc 1 1981 0
 6299 076c 3749     		ldr	r1, .L499+40
 6300 076e 7868     		ldr	r0, [r7, #4]
 6301 0770 FFF7FEFF 		bl	filter
 6302 0774 7860     		str	r0, [r7, #4]
1982:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6303              		.loc 1 1982 0
 6304 0776 7B68     		ldr	r3, [r7, #4]
 6305 0778 9B02     		lsls	r3, r3, #10
 6306 077a 1A46     		mov	r2, r3
 6307 077c 294B     		ldr	r3, .L499
 6308 077e D3F8F431 		ldr	r3, [r3, #500]
 6309 0782 B2FBF3F3 		udiv	r3, r2, r3
 6310 0786 7B60     		str	r3, [r7, #4]
1983:..\src/interruptions.c **** 
1984:..\src/interruptions.c ****             if (interrupt_flag){
 6311              		.loc 1 1984 0
 6312 0788 2C4B     		ldr	r3, .L499+24
 6313 078a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6314 078c 002B     		cmp	r3, #0
 6315 078e 04D0     		beq	.L389
1985:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6316              		.loc 1 1985 0
 6317 0790 2A4B     		ldr	r3, .L499+24
 6318 0792 0022     		movs	r2, #0
 6319 0794 1A70     		strb	r2, [r3]
1986:..\src/interruptions.c ****                 interrupt_manager();
 6320              		.loc 1 1986 0
 6321 0796 FFF7FEFF 		bl	interrupt_manager
 6322              	.L389:
1987:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 149


1988:..\src/interruptions.c ****             //Saturation
1989:..\src/interruptions.c ****             if (i_aux < 0)
 6323              		.loc 1 1989 0
 6324 079a 7B68     		ldr	r3, [r7, #4]
 6325 079c 002B     		cmp	r3, #0
 6326 079e 02DA     		bge	.L390
1990:..\src/interruptions.c ****                 i_aux = 0;
 6327              		.loc 1 1990 0
 6328 07a0 0023     		movs	r3, #0
 6329 07a2 7B60     		str	r3, [r7, #4]
 6330 07a4 06E0     		b	.L391
 6331              	.L390:
1991:..\src/interruptions.c ****             else 
1992:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6332              		.loc 1 1992 0
 6333 07a6 7B68     		ldr	r3, [r7, #4]
 6334 07a8 B3F5806F 		cmp	r3, #1024
 6335 07ac 02DD     		ble	.L391
1993:..\src/interruptions.c ****                     i_aux = 1024;
 6336              		.loc 1 1993 0
 6337 07ae 4FF48063 		mov	r3, #1024
 6338 07b2 7B60     		str	r3, [r7, #4]
 6339              	.L391:
1994:..\src/interruptions.c ****             
1995:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 6340              		.loc 1 1995 0
 6341 07b4 264A     		ldr	r2, .L499+44
 6342 07b6 7B68     		ldr	r3, [r7, #4]
 6343 07b8 1360     		str	r3, [r2]
1996:..\src/interruptions.c **** 
1997:..\src/interruptions.c ****             if (interrupt_flag){
 6344              		.loc 1 1997 0
 6345 07ba 204B     		ldr	r3, .L499+24
 6346 07bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6347 07be 002B     		cmp	r3, #0
 6348 07c0 00F0A180 		beq	.L479
1998:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6349              		.loc 1 1998 0
 6350 07c4 1D4B     		ldr	r3, .L499+24
 6351 07c6 0022     		movs	r2, #0
 6352 07c8 1A70     		strb	r2, [r3]
1999:..\src/interruptions.c ****                 interrupt_manager();
 6353              		.loc 1 1999 0
 6354 07ca FFF7FEFF 		bl	interrupt_manager
2000:..\src/interruptions.c ****             }
2001:..\src/interruptions.c ****             
2002:..\src/interruptions.c ****             break;
 6355              		.loc 1 2002 0
 6356 07ce 9AE0     		b	.L479
 6357              	.L383:
2003:..\src/interruptions.c **** 
2004:..\src/interruptions.c ****         case RESET: // reset variables
2005:..\src/interruptions.c ****             emg_counter_1 = 0;
 6358              		.loc 1 2005 0
 6359 07d0 204B     		ldr	r3, .L499+48
 6360 07d2 0022     		movs	r2, #0
 6361 07d4 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 150


2006:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 6362              		.loc 1 2006 0
 6363 07d6 134B     		ldr	r3, .L499
 6364 07d8 0022     		movs	r2, #0
 6365 07da C3F8F421 		str	r2, [r3, #500]
2007:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6366              		.loc 1 2007 0
 6367 07de 194B     		ldr	r3, .L499+32
 6368 07e0 0222     		movs	r2, #2
 6369 07e2 1A70     		strb	r2, [r3]
2008:..\src/interruptions.c ****             break;
 6370              		.loc 1 2008 0
 6371 07e4 94E0     		b	.L393
 6372              	.L384:
2009:..\src/interruptions.c **** 
2010:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2011:..\src/interruptions.c ****             emg_counter_1++;
 6373              		.loc 1 2011 0
 6374 07e6 1B4B     		ldr	r3, .L499+48
 6375 07e8 1B88     		ldrh	r3, [r3]
 6376 07ea 0133     		adds	r3, r3, #1
 6377 07ec 9AB2     		uxth	r2, r3
 6378 07ee 194B     		ldr	r3, .L499+48
 6379 07f0 1A80     		strh	r2, [r3]	@ movhi
2012:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6380              		.loc 1 2012 0
 6381 07f2 184B     		ldr	r3, .L499+48
 6382 07f4 1B88     		ldrh	r3, [r3]
 6383 07f6 B3F5FA7F 		cmp	r3, #500
 6384 07fa 40F08680 		bne	.L480
2013:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6385              		.loc 1 2013 0
 6386 07fe 154B     		ldr	r3, .L499+48
 6387 0800 0022     		movs	r2, #0
 6388 0802 1A80     		strh	r2, [r3]	@ movhi
2014:..\src/interruptions.c ****                 LED_control(1);
 6389              		.loc 1 2014 0
 6390 0804 0120     		movs	r0, #1
 6391 0806 FFF7FEFF 		bl	LED_control
2015:..\src/interruptions.c **** 				
2016:..\src/interruptions.c ****                 if (interrupt_flag){
 6392              		.loc 1 2016 0
 6393 080a 0C4B     		ldr	r3, .L499+24
 6394 080c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6395 080e 002B     		cmp	r3, #0
 6396 0810 04D0     		beq	.L395
2017:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6397              		.loc 1 2017 0
 6398 0812 0A4B     		ldr	r3, .L499+24
 6399 0814 0022     		movs	r2, #0
 6400 0816 1A70     		strb	r2, [r3]
2018:..\src/interruptions.c ****                     interrupt_manager();
 6401              		.loc 1 2018 0
 6402 0818 FFF7FEFF 		bl	interrupt_manager
 6403              	.L395:
2019:..\src/interruptions.c ****                 }
2020:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 151


2021:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 6404              		.loc 1 2021 0
 6405 081c 094B     		ldr	r3, .L499+32
 6406 081e 0322     		movs	r2, #3
 6407 0820 1A70     		strb	r2, [r3]
2022:..\src/interruptions.c ****             }
2023:..\src/interruptions.c ****             break;
 6408              		.loc 1 2023 0
 6409 0822 72E0     		b	.L480
 6410              	.L500:
 6411              		.align	2
 6412              	.L499:
 6413 0824 00000000 		.word	g_mem
 6414 0828 00000000 		.word	ADC_buf
 6415 082c 00000000 		.word	pwm_sign
 6416 0830 00000000 		.word	g_meas
 6417 0834 00000000 		.word	g_ref
 6418 0838 08000000 		.word	filt_curr_diff+8
 6419 083c 00000000 		.word	interrupt_flag
 6420 0840 00000000 		.word	c_mem
 6421 0844 00000000 		.word	emg_1_status
 6422 0848 00000000 		.word	emg_2_status
 6423 084c 00000000 		.word	filt_emg
 6424 0850 00000000 		.word	g_adc_meas
 6425 0854 7C010000 		.word	emg_counter_1.10590
 6426              	.L385:
2024:..\src/interruptions.c **** 
2025:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2026:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2027:..\src/interruptions.c ****             emg_counter_1++;
 6427              		.loc 1 2027 0
 6428 0858 AF4B     		ldr	r3, .L501
 6429 085a 1B88     		ldrh	r3, [r3]
 6430 085c 0133     		adds	r3, r3, #1
 6431 085e 9AB2     		uxth	r2, r3
 6432 0860 AD4B     		ldr	r3, .L501
 6433 0862 1A80     		strh	r2, [r3]	@ movhi
2028:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6434              		.loc 1 2028 0
 6435 0864 AD4B     		ldr	r3, .L501+4
 6436 0866 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6437 086a 0233     		adds	r3, r3, #2
 6438 086c AC4A     		ldr	r2, .L501+8
 6439 086e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6440 0872 002B     		cmp	r3, #0
 6441 0874 07DA     		bge	.L396
2029:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 6442              		.loc 1 2029 0
 6443 0876 A94B     		ldr	r3, .L501+4
 6444 0878 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6445 087c 0233     		adds	r3, r3, #2
 6446 087e A84A     		ldr	r2, .L501+8
 6447 0880 0021     		movs	r1, #0
 6448 0882 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6449              	.L396:
2030:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6450              		.loc 1 2030 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 152


 6451 0886 A54B     		ldr	r3, .L501+4
 6452 0888 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6453 088c 0233     		adds	r3, r3, #2
 6454 088e A44A     		ldr	r2, .L501+8
 6455 0890 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6456 0894 A349     		ldr	r1, .L501+12
 6457 0896 1846     		mov	r0, r3
 6458 0898 FFF7FEFF 		bl	filter
 6459 089c 0246     		mov	r2, r0
 6460 089e A24B     		ldr	r3, .L501+16
 6461 08a0 D3F8F431 		ldr	r3, [r3, #500]
 6462 08a4 1344     		add	r3, r3, r2
 6463 08a6 A04A     		ldr	r2, .L501+16
 6464 08a8 C2F8F431 		str	r3, [r2, #500]
2031:..\src/interruptions.c ****             
2032:..\src/interruptions.c ****             if (interrupt_flag){
 6465              		.loc 1 2032 0
 6466 08ac 9F4B     		ldr	r3, .L501+20
 6467 08ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6468 08b0 002B     		cmp	r3, #0
 6469 08b2 04D0     		beq	.L397
2033:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6470              		.loc 1 2033 0
 6471 08b4 9D4B     		ldr	r3, .L501+20
 6472 08b6 0022     		movs	r2, #0
 6473 08b8 1A70     		strb	r2, [r3]
2034:..\src/interruptions.c ****                 interrupt_manager();
 6474              		.loc 1 2034 0
 6475 08ba FFF7FEFF 		bl	interrupt_manager
 6476              	.L397:
2035:..\src/interruptions.c ****             }
2036:..\src/interruptions.c ****             
2037:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6477              		.loc 1 2037 0
 6478 08be 964B     		ldr	r3, .L501
 6479 08c0 1B88     		ldrh	r3, [r3]
 6480 08c2 B3F57A7F 		cmp	r3, #1000
 6481 08c6 22D1     		bne	.L481
2038:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6482              		.loc 1 2038 0
 6483 08c8 974B     		ldr	r3, .L501+16
 6484 08ca D3F8F431 		ldr	r3, [r3, #500]
 6485 08ce 984A     		ldr	r2, .L501+24
 6486 08d0 A2FB0323 		umull	r2, r3, r2, r3
 6487 08d4 9B09     		lsrs	r3, r3, #6
 6488 08d6 944A     		ldr	r2, .L501+16
 6489 08d8 C2F8F431 		str	r3, [r2, #500]
2039:..\src/interruptions.c **** 
2040:..\src/interruptions.c ****                 if (interrupt_flag){
 6490              		.loc 1 2040 0
 6491 08dc 934B     		ldr	r3, .L501+20
 6492 08de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6493 08e0 002B     		cmp	r3, #0
 6494 08e2 04D0     		beq	.L399
2041:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6495              		.loc 1 2041 0
 6496 08e4 914B     		ldr	r3, .L501+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 153


 6497 08e6 0022     		movs	r2, #0
 6498 08e8 1A70     		strb	r2, [r3]
2042:..\src/interruptions.c ****                     interrupt_manager();
 6499              		.loc 1 2042 0
 6500 08ea FFF7FEFF 		bl	interrupt_manager
 6501              	.L399:
2043:..\src/interruptions.c ****                 }                    
2044:..\src/interruptions.c ****                 
2045:..\src/interruptions.c ****                 LED_control(0);
 6502              		.loc 1 2045 0
 6503 08ee 0020     		movs	r0, #0
 6504 08f0 FFF7FEFF 		bl	LED_control
2046:..\src/interruptions.c **** 				
2047:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6505              		.loc 1 2047 0
 6506 08f4 884B     		ldr	r3, .L501
 6507 08f6 0022     		movs	r2, #0
 6508 08f8 1A80     		strh	r2, [r3]	@ movhi
2048:..\src/interruptions.c **** 
2049:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6509              		.loc 1 2049 0
 6510 08fa 8E4B     		ldr	r3, .L501+28
 6511 08fc 0022     		movs	r2, #0
 6512 08fe 1A70     		strb	r2, [r3]
2050:..\src/interruptions.c ****             }
2051:..\src/interruptions.c ****             break;
 6513              		.loc 1 2051 0
 6514 0900 05E0     		b	.L481
 6515              	.L478:
2052:..\src/interruptions.c **** 
2053:..\src/interruptions.c ****         default:
2054:..\src/interruptions.c ****             break;
 6516              		.loc 1 2054 0
 6517 0902 00BF     		nop
 6518 0904 04E0     		b	.L393
 6519              	.L479:
2002:..\src/interruptions.c **** 
 6520              		.loc 1 2002 0
 6521 0906 00BF     		nop
 6522 0908 02E0     		b	.L393
 6523              	.L480:
2023:..\src/interruptions.c **** 
 6524              		.loc 1 2023 0
 6525 090a 00BF     		nop
 6526 090c 00E0     		b	.L393
 6527              	.L481:
2051:..\src/interruptions.c **** 
 6528              		.loc 1 2051 0
 6529 090e 00BF     		nop
 6530              	.L393:
2055:..\src/interruptions.c ****     }
2056:..\src/interruptions.c **** 
2057:..\src/interruptions.c ****     if (interrupt_flag){
 6531              		.loc 1 2057 0
 6532 0910 864B     		ldr	r3, .L501+20
 6533 0912 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6534 0914 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 154


 6535 0916 04D0     		beq	.L400
2058:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6536              		.loc 1 2058 0
 6537 0918 844B     		ldr	r3, .L501+20
 6538 091a 0022     		movs	r2, #0
 6539 091c 1A70     		strb	r2, [r3]
2059:..\src/interruptions.c ****         interrupt_manager();
 6540              		.loc 1 2059 0
 6541 091e FFF7FEFF 		bl	interrupt_manager
 6542              	.L400:
2060:..\src/interruptions.c ****     }
2061:..\src/interruptions.c ****     // EMG 2 calibration state machine
2062:..\src/interruptions.c ****     switch(emg_2_status) {
 6543              		.loc 1 2062 0
 6544 0922 854B     		ldr	r3, .L501+32
 6545 0924 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6546 0926 052B     		cmp	r3, #5
 6547 0928 00F2CA81 		bhi	.L482
 6548 092c 01A2     		adr	r2, .L403
 6549 092e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6550 0932 00BF     		.p2align 2
 6551              	.L403:
 6552 0934 4D090000 		.word	.L402+1
 6553 0938 ED090000 		.word	.L404+1
 6554 093c 150A0000 		.word	.L405+1
 6555 0940 530A0000 		.word	.L406+1
 6556 0944 050B0000 		.word	.L407+1
 6557 0948 490B0000 		.word	.L408+1
 6558              		.p2align 1
 6559              	.L402:
2063:..\src/interruptions.c ****         case NORMAL: // normal execution
2064:..\src/interruptions.c ****         
2065:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 6560              		.loc 1 2065 0
 6561 094c 764B     		ldr	r3, .L501+16
 6562 094e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6563 0952 022B     		cmp	r3, #2
 6564 0954 14D0     		beq	.L409
 6565              		.loc 1 2065 0 is_stmt 0 discriminator 1
 6566 0956 744B     		ldr	r3, .L501+16
 6567 0958 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6568 095c 032B     		cmp	r3, #3
 6569 095e 0FD0     		beq	.L409
2066:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6570              		.loc 1 2066 0 is_stmt 1
 6571 0960 6E4B     		ldr	r3, .L501+4
 6572 0962 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6573 0966 C3F10303 		rsb	r3, r3, #3
 6574 096a 6D4A     		ldr	r2, .L501+8
 6575 096c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6576 0970 A3F26763 		subw	r3, r3, #1639
 6577 0974 5722     		movs	r2, #87
 6578 0976 02FB03F3 		mul	r3, r2, r3
 6579 097a 5B11     		asrs	r3, r3, #5
 6580 097c 7B60     		str	r3, [r7, #4]
 6581 097e 08E0     		b	.L410
 6582              	.L409:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 155


2067:..\src/interruptions.c ****             }
2068:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2069:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 6583              		.loc 1 2069 0
 6584 0980 664B     		ldr	r3, .L501+4
 6585 0982 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6586 0986 C3F10303 		rsb	r3, r3, #3
 6587 098a 654A     		ldr	r2, .L501+8
 6588 098c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6589 0990 7B60     		str	r3, [r7, #4]
 6590              	.L410:
2070:..\src/interruptions.c ****             }
2071:..\src/interruptions.c **** 
2072:..\src/interruptions.c ****             if (i_aux < 0)
 6591              		.loc 1 2072 0
 6592 0992 7B68     		ldr	r3, [r7, #4]
 6593 0994 002B     		cmp	r3, #0
 6594 0996 01DA     		bge	.L411
2073:..\src/interruptions.c ****                 i_aux = 0;
 6595              		.loc 1 2073 0
 6596 0998 0023     		movs	r3, #0
 6597 099a 7B60     		str	r3, [r7, #4]
 6598              	.L411:
2074:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 6599              		.loc 1 2074 0
 6600 099c 6749     		ldr	r1, .L501+36
 6601 099e 7868     		ldr	r0, [r7, #4]
 6602 09a0 FFF7FEFF 		bl	filter
 6603 09a4 7860     		str	r0, [r7, #4]
2075:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 6604              		.loc 1 2075 0
 6605 09a6 7B68     		ldr	r3, [r7, #4]
 6606 09a8 9B02     		lsls	r3, r3, #10
 6607 09aa 1A46     		mov	r2, r3
 6608 09ac 5E4B     		ldr	r3, .L501+16
 6609 09ae D3F8F831 		ldr	r3, [r3, #504]
 6610 09b2 B2FBF3F3 		udiv	r3, r2, r3
 6611 09b6 7B60     		str	r3, [r7, #4]
2076:..\src/interruptions.c **** 
2077:..\src/interruptions.c ****             if (interrupt_flag){
 6612              		.loc 1 2077 0
 6613 09b8 5C4B     		ldr	r3, .L501+20
 6614 09ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6615 09bc 002B     		cmp	r3, #0
 6616 09be 04D0     		beq	.L412
2078:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6617              		.loc 1 2078 0
 6618 09c0 5A4B     		ldr	r3, .L501+20
 6619 09c2 0022     		movs	r2, #0
 6620 09c4 1A70     		strb	r2, [r3]
2079:..\src/interruptions.c ****                 interrupt_manager();
 6621              		.loc 1 2079 0
 6622 09c6 FFF7FEFF 		bl	interrupt_manager
 6623              	.L412:
2080:..\src/interruptions.c ****             }
2081:..\src/interruptions.c ****             
2082:..\src/interruptions.c ****             if (i_aux < 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 156


 6624              		.loc 1 2082 0
 6625 09ca 7B68     		ldr	r3, [r7, #4]
 6626 09cc 002B     		cmp	r3, #0
 6627 09ce 02DA     		bge	.L413
2083:..\src/interruptions.c ****                 i_aux = 0;
 6628              		.loc 1 2083 0
 6629 09d0 0023     		movs	r3, #0
 6630 09d2 7B60     		str	r3, [r7, #4]
 6631 09d4 06E0     		b	.L414
 6632              	.L413:
2084:..\src/interruptions.c ****             else 
2085:..\src/interruptions.c ****                 if (i_aux > 1024)
 6633              		.loc 1 2085 0
 6634 09d6 7B68     		ldr	r3, [r7, #4]
 6635 09d8 B3F5806F 		cmp	r3, #1024
 6636 09dc 02DD     		ble	.L414
2086:..\src/interruptions.c ****                     i_aux = 1024;
 6637              		.loc 1 2086 0
 6638 09de 4FF48063 		mov	r3, #1024
 6639 09e2 7B60     		str	r3, [r7, #4]
 6640              	.L414:
2087:..\src/interruptions.c ****             
2088:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 6641              		.loc 1 2088 0
 6642 09e4 564A     		ldr	r2, .L501+40
 6643 09e6 7B68     		ldr	r3, [r7, #4]
 6644 09e8 5360     		str	r3, [r2, #4]
2089:..\src/interruptions.c **** 
2090:..\src/interruptions.c ****             break;
 6645              		.loc 1 2090 0
 6646 09ea 72E1     		b	.L415
 6647              	.L404:
2091:..\src/interruptions.c **** 
2092:..\src/interruptions.c ****         case RESET: // reset variables
2093:..\src/interruptions.c ****             emg_counter_2 = 0;
 6648              		.loc 1 2093 0
 6649 09ec 554B     		ldr	r3, .L501+44
 6650 09ee 0022     		movs	r2, #0
 6651 09f0 1A80     		strh	r2, [r3]	@ movhi
2094:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 6652              		.loc 1 2094 0
 6653 09f2 4D4B     		ldr	r3, .L501+16
 6654 09f4 0022     		movs	r2, #0
 6655 09f6 C3F8F821 		str	r2, [r3, #504]
2095:..\src/interruptions.c **** 
2096:..\src/interruptions.c ****             if (interrupt_flag){
 6656              		.loc 1 2096 0
 6657 09fa 4C4B     		ldr	r3, .L501+20
 6658 09fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6659 09fe 002B     		cmp	r3, #0
 6660 0a00 04D0     		beq	.L416
2097:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6661              		.loc 1 2097 0
 6662 0a02 4A4B     		ldr	r3, .L501+20
 6663 0a04 0022     		movs	r2, #0
 6664 0a06 1A70     		strb	r2, [r3]
2098:..\src/interruptions.c ****                 interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 157


 6665              		.loc 1 2098 0
 6666 0a08 FFF7FEFF 		bl	interrupt_manager
 6667              	.L416:
2099:..\src/interruptions.c ****             }
2100:..\src/interruptions.c ****             
2101:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 6668              		.loc 1 2101 0
 6669 0a0c 4A4B     		ldr	r3, .L501+32
 6670 0a0e 0422     		movs	r2, #4
 6671 0a10 1A70     		strb	r2, [r3]
2102:..\src/interruptions.c ****             break;
 6672              		.loc 1 2102 0
 6673 0a12 5EE1     		b	.L415
 6674              	.L405:
2103:..\src/interruptions.c **** 
2104:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2105:..\src/interruptions.c ****             emg_counter_2++;
 6675              		.loc 1 2105 0
 6676 0a14 4B4B     		ldr	r3, .L501+44
 6677 0a16 1B88     		ldrh	r3, [r3]
 6678 0a18 0133     		adds	r3, r3, #1
 6679 0a1a 9AB2     		uxth	r2, r3
 6680 0a1c 494B     		ldr	r3, .L501+44
 6681 0a1e 1A80     		strh	r2, [r3]	@ movhi
2106:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6682              		.loc 1 2106 0
 6683 0a20 484B     		ldr	r3, .L501+44
 6684 0a22 1B88     		ldrh	r3, [r3]
 6685 0a24 B3F5FA7F 		cmp	r3, #500
 6686 0a28 40F04C81 		bne	.L483
2107:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6687              		.loc 1 2107 0
 6688 0a2c 454B     		ldr	r3, .L501+44
 6689 0a2e 0022     		movs	r2, #0
 6690 0a30 1A80     		strh	r2, [r3]	@ movhi
2108:..\src/interruptions.c ****                 LED_control(1);
 6691              		.loc 1 2108 0
 6692 0a32 0120     		movs	r0, #1
 6693 0a34 FFF7FEFF 		bl	LED_control
2109:..\src/interruptions.c **** 
2110:..\src/interruptions.c ****                 if (interrupt_flag){
 6694              		.loc 1 2110 0
 6695 0a38 3C4B     		ldr	r3, .L501+20
 6696 0a3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6697 0a3c 002B     		cmp	r3, #0
 6698 0a3e 04D0     		beq	.L418
2111:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6699              		.loc 1 2111 0
 6700 0a40 3A4B     		ldr	r3, .L501+20
 6701 0a42 0022     		movs	r2, #0
 6702 0a44 1A70     		strb	r2, [r3]
2112:..\src/interruptions.c ****                     interrupt_manager();
 6703              		.loc 1 2112 0
 6704 0a46 FFF7FEFF 		bl	interrupt_manager
 6705              	.L418:
2113:..\src/interruptions.c ****                 }
2114:..\src/interruptions.c ****                 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 158


2115:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 6706              		.loc 1 2115 0
 6707 0a4a 3B4B     		ldr	r3, .L501+32
 6708 0a4c 0322     		movs	r2, #3
 6709 0a4e 1A70     		strb	r2, [r3]
2116:..\src/interruptions.c ****             }
2117:..\src/interruptions.c ****             break;
 6710              		.loc 1 2117 0
 6711 0a50 38E1     		b	.L483
 6712              	.L406:
2118:..\src/interruptions.c **** 
2119:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2120:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2121:..\src/interruptions.c ****             emg_counter_2++;
 6713              		.loc 1 2121 0
 6714 0a52 3C4B     		ldr	r3, .L501+44
 6715 0a54 1B88     		ldrh	r3, [r3]
 6716 0a56 0133     		adds	r3, r3, #1
 6717 0a58 9AB2     		uxth	r2, r3
 6718 0a5a 3A4B     		ldr	r3, .L501+44
 6719 0a5c 1A80     		strh	r2, [r3]	@ movhi
2122:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 6720              		.loc 1 2122 0
 6721 0a5e 2F4B     		ldr	r3, .L501+4
 6722 0a60 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6723 0a64 C3F10303 		rsb	r3, r3, #3
 6724 0a68 2D4A     		ldr	r2, .L501+8
 6725 0a6a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6726 0a6e 002B     		cmp	r3, #0
 6727 0a70 08DA     		bge	.L419
2123:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 6728              		.loc 1 2123 0
 6729 0a72 2A4B     		ldr	r3, .L501+4
 6730 0a74 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6731 0a78 C3F10303 		rsb	r3, r3, #3
 6732 0a7c 284A     		ldr	r2, .L501+8
 6733 0a7e 0021     		movs	r1, #0
 6734 0a80 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6735              	.L419:
2124:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 6736              		.loc 1 2124 0
 6737 0a84 254B     		ldr	r3, .L501+4
 6738 0a86 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6739 0a8a C3F10303 		rsb	r3, r3, #3
 6740 0a8e 244A     		ldr	r2, .L501+8
 6741 0a90 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6742 0a94 2949     		ldr	r1, .L501+36
 6743 0a96 1846     		mov	r0, r3
 6744 0a98 FFF7FEFF 		bl	filter
 6745 0a9c 0246     		mov	r2, r0
 6746 0a9e 224B     		ldr	r3, .L501+16
 6747 0aa0 D3F8F831 		ldr	r3, [r3, #504]
 6748 0aa4 1344     		add	r3, r3, r2
 6749 0aa6 204A     		ldr	r2, .L501+16
 6750 0aa8 C2F8F831 		str	r3, [r2, #504]
2125:..\src/interruptions.c **** 
2126:..\src/interruptions.c ****             if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 159


 6751              		.loc 1 2126 0
 6752 0aac 1F4B     		ldr	r3, .L501+20
 6753 0aae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6754 0ab0 002B     		cmp	r3, #0
 6755 0ab2 04D0     		beq	.L420
2127:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6756              		.loc 1 2127 0
 6757 0ab4 1D4B     		ldr	r3, .L501+20
 6758 0ab6 0022     		movs	r2, #0
 6759 0ab8 1A70     		strb	r2, [r3]
2128:..\src/interruptions.c ****                 interrupt_manager();
 6760              		.loc 1 2128 0
 6761 0aba FFF7FEFF 		bl	interrupt_manager
 6762              	.L420:
2129:..\src/interruptions.c ****             }
2130:..\src/interruptions.c ****             
2131:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 6763              		.loc 1 2131 0
 6764 0abe 214B     		ldr	r3, .L501+44
 6765 0ac0 1B88     		ldrh	r3, [r3]
 6766 0ac2 B3F57A7F 		cmp	r3, #1000
 6767 0ac6 40F0FF80 		bne	.L484
2132:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 6768              		.loc 1 2132 0
 6769 0aca 174B     		ldr	r3, .L501+16
 6770 0acc D3F8F831 		ldr	r3, [r3, #504]
 6771 0ad0 174A     		ldr	r2, .L501+24
 6772 0ad2 A2FB0323 		umull	r2, r3, r2, r3
 6773 0ad6 9B09     		lsrs	r3, r3, #6
 6774 0ad8 134A     		ldr	r2, .L501+16
 6775 0ada C2F8F831 		str	r3, [r2, #504]
2133:..\src/interruptions.c ****                 LED_control(0);
 6776              		.loc 1 2133 0
 6777 0ade 0020     		movs	r0, #0
 6778 0ae0 FFF7FEFF 		bl	LED_control
2134:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6779              		.loc 1 2134 0
 6780 0ae4 174B     		ldr	r3, .L501+44
 6781 0ae6 0022     		movs	r2, #0
 6782 0ae8 1A80     		strh	r2, [r3]	@ movhi
2135:..\src/interruptions.c ****             
2136:..\src/interruptions.c ****                 if (interrupt_flag){
 6783              		.loc 1 2136 0
 6784 0aea 104B     		ldr	r3, .L501+20
 6785 0aec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6786 0aee 002B     		cmp	r3, #0
 6787 0af0 04D0     		beq	.L422
2137:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6788              		.loc 1 2137 0
 6789 0af2 0E4B     		ldr	r3, .L501+20
 6790 0af4 0022     		movs	r2, #0
 6791 0af6 1A70     		strb	r2, [r3]
2138:..\src/interruptions.c ****                     interrupt_manager();
 6792              		.loc 1 2138 0
 6793 0af8 FFF7FEFF 		bl	interrupt_manager
 6794              	.L422:
2139:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 160


2140:..\src/interruptions.c ****                 
2141:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 6795              		.loc 1 2141 0
 6796 0afc 0E4B     		ldr	r3, .L501+32
 6797 0afe 0522     		movs	r2, #5
 6798 0b00 1A70     		strb	r2, [r3]
2142:..\src/interruptions.c ****             }
2143:..\src/interruptions.c ****             break;
 6799              		.loc 1 2143 0
 6800 0b02 E1E0     		b	.L484
 6801              	.L407:
2144:..\src/interruptions.c **** 
2145:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2146:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 6802              		.loc 1 2146 0
 6803 0b04 0B4B     		ldr	r3, .L501+28
 6804 0b06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6805 0b08 002B     		cmp	r3, #0
 6806 0b0a 40F0DF80 		bne	.L485
2147:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 6807              		.loc 1 2147 0
 6808 0b0e 0A4B     		ldr	r3, .L501+32
 6809 0b10 0222     		movs	r2, #2
 6810 0b12 1A70     		strb	r2, [r3]
2148:..\src/interruptions.c ****             break;
 6811              		.loc 1 2148 0
 6812 0b14 DAE0     		b	.L485
 6813              	.L502:
 6814 0b16 00BF     		.align	2
 6815              	.L501:
 6816 0b18 7C010000 		.word	emg_counter_1.10590
 6817 0b1c 00000000 		.word	c_mem
 6818 0b20 00000000 		.word	ADC_buf
 6819 0b24 00000000 		.word	filt_emg
 6820 0b28 00000000 		.word	g_mem
 6821 0b2c 00000000 		.word	interrupt_flag
 6822 0b30 D34D6210 		.word	274877907
 6823 0b34 00000000 		.word	emg_1_status
 6824 0b38 00000000 		.word	emg_2_status
 6825 0b3c 08000000 		.word	filt_emg+8
 6826 0b40 00000000 		.word	g_adc_meas
 6827 0b44 7E010000 		.word	emg_counter_2.10591
 6828              	.L408:
2149:..\src/interruptions.c **** 
2150:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2151:..\src/interruptions.c ****             emg_counter_2++;
 6829              		.loc 1 2151 0
 6830 0b48 B04B     		ldr	r3, .L503
 6831 0b4a 1B88     		ldrh	r3, [r3]
 6832 0b4c 0133     		adds	r3, r3, #1
 6833 0b4e 9AB2     		uxth	r2, r3
 6834 0b50 AE4B     		ldr	r3, .L503
 6835 0b52 1A80     		strh	r2, [r3]	@ movhi
2152:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 6836              		.loc 1 2152 0
 6837 0b54 AD4B     		ldr	r3, .L503
 6838 0b56 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 161


 6839 0b58 B3F5FA7F 		cmp	r3, #500
 6840 0b5c 40F0B880 		bne	.L486
2153:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 6841              		.loc 1 2153 0
 6842 0b60 AA4B     		ldr	r3, .L503
 6843 0b62 0022     		movs	r2, #0
 6844 0b64 1A80     		strh	r2, [r3]	@ movhi
2154:..\src/interruptions.c ****                 
2155:..\src/interruptions.c ****                 if (interrupt_flag){
 6845              		.loc 1 2155 0
 6846 0b66 AA4B     		ldr	r3, .L503+4
 6847 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6848 0b6a 002B     		cmp	r3, #0
 6849 0b6c 04D0     		beq	.L425
2156:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6850              		.loc 1 2156 0
 6851 0b6e A84B     		ldr	r3, .L503+4
 6852 0b70 0022     		movs	r2, #0
 6853 0b72 1A70     		strb	r2, [r3]
2157:..\src/interruptions.c ****                     interrupt_manager();
 6854              		.loc 1 2157 0
 6855 0b74 FFF7FEFF 		bl	interrupt_manager
 6856              	.L425:
2158:..\src/interruptions.c ****                 }
2159:..\src/interruptions.c ****                 
2160:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6857              		.loc 1 2160 0
 6858 0b78 A64B     		ldr	r3, .L503+8
 6859 0b7a 0022     		movs	r2, #0
 6860 0b7c 1A70     		strb	r2, [r3]
 6861 0b7e 93E0     		b	.L426
 6862              	.L430:
2161:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6863              		.loc 1 2161 0
 6864 0b80 A44B     		ldr	r3, .L503+8
 6865 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6866 0b84 1946     		mov	r1, r3
 6867 0b86 A44A     		ldr	r2, .L503+12
 6868 0b88 0B46     		mov	r3, r1
 6869 0b8a DB00     		lsls	r3, r3, #3
 6870 0b8c 5B1A     		subs	r3, r3, r1
 6871 0b8e 1B01     		lsls	r3, r3, #4
 6872 0b90 1344     		add	r3, r3, r2
 6873 0b92 03F58773 		add	r3, r3, #270
 6874 0b96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6875 0b98 022B     		cmp	r3, #2
 6876 0b9a 37D0     		beq	.L427
2162:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6877              		.loc 1 2162 0 discriminator 1
 6878 0b9c 9D4B     		ldr	r3, .L503+8
 6879 0b9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6880 0ba0 1946     		mov	r1, r3
 6881 0ba2 9D4A     		ldr	r2, .L503+12
 6882 0ba4 0B46     		mov	r3, r1
 6883 0ba6 DB00     		lsls	r3, r3, #3
 6884 0ba8 5B1A     		subs	r3, r3, r1
 6885 0baa 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 162


 6886 0bac 1344     		add	r3, r3, r2
 6887 0bae 03F58773 		add	r3, r3, #270
 6888 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2161:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6889              		.loc 1 2161 0 discriminator 1
 6890 0bb4 032B     		cmp	r3, #3
 6891 0bb6 29D0     		beq	.L427
2163:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6892              		.loc 1 2163 0
 6893 0bb8 964B     		ldr	r3, .L503+8
 6894 0bba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6895 0bbc 1946     		mov	r1, r3
 6896 0bbe 964A     		ldr	r2, .L503+12
 6897 0bc0 0B46     		mov	r3, r1
 6898 0bc2 DB00     		lsls	r3, r3, #3
 6899 0bc4 5B1A     		subs	r3, r3, r1
 6900 0bc6 1B01     		lsls	r3, r3, #4
 6901 0bc8 1344     		add	r3, r3, r2
 6902 0bca 03F58773 		add	r3, r3, #270
 6903 0bce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2162:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6904              		.loc 1 2162 0
 6905 0bd0 042B     		cmp	r3, #4
 6906 0bd2 1BD0     		beq	.L427
2164:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6907              		.loc 1 2164 0
 6908 0bd4 8F4B     		ldr	r3, .L503+8
 6909 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6910 0bd8 1946     		mov	r1, r3
 6911 0bda 8F4A     		ldr	r2, .L503+12
 6912 0bdc 0B46     		mov	r3, r1
 6913 0bde DB00     		lsls	r3, r3, #3
 6914 0be0 5B1A     		subs	r3, r3, r1
 6915 0be2 1B01     		lsls	r3, r3, #4
 6916 0be4 1344     		add	r3, r3, r2
 6917 0be6 03F58773 		add	r3, r3, #270
 6918 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2163:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6919              		.loc 1 2163 0
 6920 0bec 052B     		cmp	r3, #5
 6921 0bee 0DD0     		beq	.L427
2165:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6922              		.loc 1 2165 0
 6923 0bf0 884B     		ldr	r3, .L503+8
 6924 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6925 0bf4 1946     		mov	r1, r3
 6926 0bf6 884A     		ldr	r2, .L503+12
 6927 0bf8 0B46     		mov	r3, r1
 6928 0bfa DB00     		lsls	r3, r3, #3
 6929 0bfc 5B1A     		subs	r3, r3, r1
 6930 0bfe 1B01     		lsls	r3, r3, #4
 6931 0c00 1344     		add	r3, r3, r2
 6932 0c02 03F58773 		add	r3, r3, #270
 6933 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2164:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6934              		.loc 1 2164 0
 6935 0c08 072B     		cmp	r3, #7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 163


 6936 0c0a 47D1     		bne	.L428
 6937              	.L427:
2166:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 6938              		.loc 1 2166 0
 6939 0c0c 814B     		ldr	r3, .L503+8
 6940 0c0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6941 0c10 1946     		mov	r1, r3
 6942 0c12 814A     		ldr	r2, .L503+12
 6943 0c14 0B46     		mov	r3, r1
 6944 0c16 DB00     		lsls	r3, r3, #3
 6945 0c18 5B1A     		subs	r3, r3, r1
 6946 0c1a 1B01     		lsls	r3, r3, #4
 6947 0c1c 1344     		add	r3, r3, r2
 6948 0c1e 03F20F13 		addw	r3, r3, #271
 6949 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6950 0c24 002B     		cmp	r3, #0
 6951 0c26 19D1     		bne	.L429
2167:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 6952              		.loc 1 2167 0
 6953 0c28 7A4B     		ldr	r3, .L503+8
 6954 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6955 0c2c 1846     		mov	r0, r3
 6956 0c2e 794B     		ldr	r3, .L503+8
 6957 0c30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6958 0c32 1946     		mov	r1, r3
 6959 0c34 794A     		ldr	r2, .L503+16
 6960 0c36 0B46     		mov	r3, r1
 6961 0c38 DB00     		lsls	r3, r3, #3
 6962 0c3a 5B1A     		subs	r3, r3, r1
 6963 0c3c 1B01     		lsls	r3, r3, #4
 6964 0c3e 1344     		add	r3, r3, r2
 6965 0c40 03F58873 		add	r3, r3, #272
 6966 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6967 0c46 1946     		mov	r1, r3
 6968 0c48 754A     		ldr	r2, .L503+20
 6969 0c4a 3423     		movs	r3, #52
 6970 0c4c 03FB01F3 		mul	r3, r3, r1
 6971 0c50 1344     		add	r3, r3, r2
 6972 0c52 1A68     		ldr	r2, [r3]
 6973 0c54 7349     		ldr	r1, .L503+24
 6974 0c56 0301     		lsls	r3, r0, #4
 6975 0c58 0B44     		add	r3, r3, r1
 6976 0c5a 1A60     		str	r2, [r3]
 6977              	.L429:
2168:..\src/interruptions.c ****                         }
2169:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 6978              		.loc 1 2169 0
 6979 0c5c 6D4B     		ldr	r3, .L503+8
 6980 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6981 0c60 1846     		mov	r0, r3
 6982 0c62 6C4B     		ldr	r3, .L503+8
 6983 0c64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6984 0c66 1946     		mov	r1, r3
 6985 0c68 6B4A     		ldr	r2, .L503+12
 6986 0c6a 0B46     		mov	r3, r1
 6987 0c6c DB00     		lsls	r3, r3, #3
 6988 0c6e 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 164


 6989 0c70 1B01     		lsls	r3, r3, #4
 6990 0c72 1344     		add	r3, r3, r2
 6991 0c74 E033     		adds	r3, r3, #224
 6992 0c76 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6993 0c78 6A4A     		ldr	r2, .L503+24
 6994 0c7a 0301     		lsls	r3, r0, #4
 6995 0c7c 1344     		add	r3, r3, r2
 6996 0c7e 0C33     		adds	r3, r3, #12
 6997 0c80 0A46     		mov	r2, r1
 6998 0c82 1A70     		strb	r2, [r3]
2170:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 6999              		.loc 1 2170 0
 7000 0c84 634B     		ldr	r3, .L503+8
 7001 0c86 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7002 0c88 624B     		ldr	r3, .L503+8
 7003 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7004 0c8c 654A     		ldr	r2, .L503+24
 7005 0c8e 1B01     		lsls	r3, r3, #4
 7006 0c90 1344     		add	r3, r3, r2
 7007 0c92 0C33     		adds	r3, r3, #12
 7008 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7009 0c96 1946     		mov	r1, r3
 7010 0c98 FFF7FEFF 		bl	enable_motor
 7011              	.L428:
2160:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7012              		.loc 1 2160 0 discriminator 2
 7013 0c9c 5D4B     		ldr	r3, .L503+8
 7014 0c9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7015 0ca0 0133     		adds	r3, r3, #1
 7016 0ca2 DAB2     		uxtb	r2, r3
 7017 0ca4 5B4B     		ldr	r3, .L503+8
 7018 0ca6 1A70     		strb	r2, [r3]
 7019              	.L426:
2160:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7020              		.loc 1 2160 0 is_stmt 0 discriminator 1
 7021 0ca8 5A4B     		ldr	r3, .L503+8
 7022 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7023 0cac 012B     		cmp	r3, #1
 7024 0cae 7FF667AF 		bls	.L430
2171:..\src/interruptions.c ****                     }
2172:..\src/interruptions.c ****                 }
2173:..\src/interruptions.c ****                     
2174:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7025              		.loc 1 2174 0 is_stmt 1
 7026 0cb2 0020     		movs	r0, #0
 7027 0cb4 FFF7FEFF 		bl	memStore
2175:..\src/interruptions.c ****                     
2176:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7028              		.loc 1 2176 0
 7029 0cb8 5B4B     		ldr	r3, .L503+28
 7030 0cba 0022     		movs	r2, #0
 7031 0cbc 1A70     		strb	r2, [r3]
2177:..\src/interruptions.c ****             }
2178:..\src/interruptions.c ****             break;
 7032              		.loc 1 2178 0
 7033 0cbe 07E0     		b	.L486
 7034              	.L482:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 165


2179:..\src/interruptions.c ****         default:
2180:..\src/interruptions.c ****             break;
 7035              		.loc 1 2180 0
 7036 0cc0 00BF     		nop
 7037 0cc2 06E0     		b	.L415
 7038              	.L483:
2117:..\src/interruptions.c **** 
 7039              		.loc 1 2117 0
 7040 0cc4 00BF     		nop
 7041 0cc6 04E0     		b	.L415
 7042              	.L484:
2143:..\src/interruptions.c **** 
 7043              		.loc 1 2143 0
 7044 0cc8 00BF     		nop
 7045 0cca 02E0     		b	.L415
 7046              	.L485:
2148:..\src/interruptions.c **** 
 7047              		.loc 1 2148 0
 7048 0ccc 00BF     		nop
 7049 0cce 00E0     		b	.L415
 7050              	.L486:
2178:..\src/interruptions.c ****         default:
 7051              		.loc 1 2178 0
 7052 0cd0 00BF     		nop
 7053              	.L415:
2181:..\src/interruptions.c ****     }
2182:..\src/interruptions.c ****         
2183:..\src/interruptions.c ****     if (interrupt_flag){
 7054              		.loc 1 2183 0
 7055 0cd2 4F4B     		ldr	r3, .L503+4
 7056 0cd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7057 0cd6 002B     		cmp	r3, #0
 7058 0cd8 04D0     		beq	.L431
2184:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7059              		.loc 1 2184 0
 7060 0cda 4D4B     		ldr	r3, .L503+4
 7061 0cdc 0022     		movs	r2, #0
 7062 0cde 1A70     		strb	r2, [r3]
2185:..\src/interruptions.c ****         interrupt_manager();
 7063              		.loc 1 2185 0
 7064 0ce0 FFF7FEFF 		bl	interrupt_manager
 7065              	.L431:
2186:..\src/interruptions.c ****     }
2187:..\src/interruptions.c ****     
2188:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 7066              		.loc 1 2188 0
 7067 0ce4 4C4B     		ldr	r3, .L503+12
 7068 0ce6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7069 0cea 062B     		cmp	r3, #6
 7070 0cec 05D0     		beq	.L432
 7071              		.loc 1 2188 0 is_stmt 0 discriminator 1
 7072 0cee 4A4B     		ldr	r3, .L503+12
 7073 0cf0 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7074 0cf4 062B     		cmp	r3, #6
 7075 0cf6 40F0C881 		bne	.L433
 7076              	.L432:
2189:..\src/interruptions.c ****         // Read joystick
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 166


2190:..\src/interruptions.c ****         
2191:..\src/interruptions.c ****         switch (joy_UD_status) {
 7077              		.loc 1 2191 0 is_stmt 1
 7078 0cfa 4C4B     		ldr	r3, .L503+32
 7079 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7080 0cfe 052B     		cmp	r3, #5
 7081 0d00 00F2E980 		bhi	.L434
 7082 0d04 01A2     		adr	r2, .L436
 7083 0d06 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7084 0d0a 00BF     		.p2align 2
 7085              	.L436:
 7086 0d0c 250D0000 		.word	.L435+1
 7087 0d10 C30D0000 		.word	.L437+1
 7088 0d14 D70D0000 		.word	.L438+1
 7089 0d18 450E0000 		.word	.L439+1
 7090 0d1c B10E0000 		.word	.L440+1
 7091 0d20 B10E0000 		.word	.L440+1
 7092              		.p2align 1
 7093              	.L435:
2192:..\src/interruptions.c ****             case NORMAL:
2193:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 7094              		.loc 1 2193 0
 7095 0d24 424B     		ldr	r3, .L503+36
 7096 0d26 B3F90430 		ldrsh	r3, [r3, #4]
 7097 0d2a 7B60     		str	r3, [r7, #4]
2194:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2195:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 7098              		.loc 1 2195 0
 7099 0d2c 414B     		ldr	r3, .L503+40
 7100 0d2e 1B68     		ldr	r3, [r3]
 7101 0d30 7A68     		ldr	r2, [r7, #4]
 7102 0d32 D31A     		subs	r3, r2, r3
 7103 0d34 1846     		mov	r0, r3
 7104 0d36 FFF7FEFF 		bl	__aeabi_i2f
 7105 0d3a 0446     		mov	r4, r0
 7106 0d3c 3D4B     		ldr	r3, .L503+40
 7107 0d3e 1B68     		ldr	r3, [r3]
 7108 0d40 1846     		mov	r0, r3
 7109 0d42 FFF7FEFF 		bl	__aeabi_i2f
 7110 0d46 0346     		mov	r3, r0
 7111 0d48 1946     		mov	r1, r3
 7112 0d4a 2046     		mov	r0, r4
 7113 0d4c FFF7FEFF 		bl	__aeabi_fdiv
 7114 0d50 0346     		mov	r3, r0
 7115 0d52 1C46     		mov	r4, r3
 7116 0d54 304B     		ldr	r3, .L503+12
 7117 0d56 B3F8E832 		ldrh	r3, [r3, #744]
 7118 0d5a 1846     		mov	r0, r3
 7119 0d5c FFF7FEFF 		bl	__aeabi_i2f
 7120 0d60 0346     		mov	r3, r0
 7121 0d62 1946     		mov	r1, r3
 7122 0d64 2046     		mov	r0, r4
 7123 0d66 FFF7FEFF 		bl	__aeabi_fmul
 7124 0d6a 0346     		mov	r3, r0
 7125 0d6c 1846     		mov	r0, r3
 7126 0d6e FFF7FEFF 		bl	__aeabi_f2iz
 7127 0d72 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 167


 7128 0d74 7B60     		str	r3, [r7, #4]
2196:..\src/interruptions.c ****                 
2197:..\src/interruptions.c ****                 if (interrupt_flag){
 7129              		.loc 1 2197 0
 7130 0d76 264B     		ldr	r3, .L503+4
 7131 0d78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7132 0d7a 002B     		cmp	r3, #0
 7133 0d7c 04D0     		beq	.L441
2198:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7134              		.loc 1 2198 0
 7135 0d7e 244B     		ldr	r3, .L503+4
 7136 0d80 0022     		movs	r2, #0
 7137 0d82 1A70     		strb	r2, [r3]
2199:..\src/interruptions.c ****                     interrupt_manager();
 7138              		.loc 1 2199 0
 7139 0d84 FFF7FEFF 		bl	interrupt_manager
 7140              	.L441:
2200:..\src/interruptions.c ****                 }
2201:..\src/interruptions.c **** 
2202:..\src/interruptions.c ****                 //Saturation
2203:..\src/interruptions.c ****                 if (i_aux < -1024) 
 7141              		.loc 1 2203 0
 7142 0d88 7B68     		ldr	r3, [r7, #4]
 7143 0d8a 13F5806F 		cmn	r3, #1024
 7144 0d8e 01DA     		bge	.L442
2204:..\src/interruptions.c ****                     i_aux = -1024;
 7145              		.loc 1 2204 0
 7146 0d90 294B     		ldr	r3, .L503+44
 7147 0d92 7B60     		str	r3, [r7, #4]
 7148              	.L442:
2205:..\src/interruptions.c ****                 if (i_aux > 1024)
 7149              		.loc 1 2205 0
 7150 0d94 7B68     		ldr	r3, [r7, #4]
 7151 0d96 B3F5806F 		cmp	r3, #1024
 7152 0d9a 02DD     		ble	.L443
2206:..\src/interruptions.c ****                     i_aux = 1024;
 7153              		.loc 1 2206 0
 7154 0d9c 4FF48063 		mov	r3, #1024
 7155 0da0 7B60     		str	r3, [r7, #4]
 7156              	.L443:
2207:..\src/interruptions.c **** 
2208:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 7157              		.loc 1 2208 0
 7158 0da2 7B68     		ldr	r3, [r7, #4]
 7159 0da4 1BB2     		sxth	r3, r3
 7160 0da6 1A46     		mov	r2, r3
 7161 0da8 244B     		ldr	r3, .L503+48
 7162 0daa 5A62     		str	r2, [r3, #36]
2209:..\src/interruptions.c **** 
2210:..\src/interruptions.c ****                 if (interrupt_flag){
 7163              		.loc 1 2210 0
 7164 0dac 184B     		ldr	r3, .L503+4
 7165 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7166 0db0 002B     		cmp	r3, #0
 7167 0db2 00F08980 		beq	.L487
2211:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7168              		.loc 1 2211 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 168


 7169 0db6 164B     		ldr	r3, .L503+4
 7170 0db8 0022     		movs	r2, #0
 7171 0dba 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****                     interrupt_manager();
 7172              		.loc 1 2212 0
 7173 0dbc FFF7FEFF 		bl	interrupt_manager
2213:..\src/interruptions.c ****                 }
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****             break;
 7174              		.loc 1 2215 0
 7175 0dc0 82E0     		b	.L487
 7176              	.L437:
2216:..\src/interruptions.c **** 
2217:..\src/interruptions.c ****             case RESET: // reset variables
2218:..\src/interruptions.c ****                 UD_counter = 0;
 7177              		.loc 1 2218 0
 7178 0dc2 1F4B     		ldr	r3, .L503+52
 7179 0dc4 0022     		movs	r2, #0
 7180 0dc6 1A80     		strh	r2, [r3]	@ movhi
2219:..\src/interruptions.c ****                 UD_mean_value = 0;
 7181              		.loc 1 2219 0
 7182 0dc8 1A4B     		ldr	r3, .L503+40
 7183 0dca 0022     		movs	r2, #0
 7184 0dcc 1A60     		str	r2, [r3]
2220:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 7185              		.loc 1 2220 0
 7186 0dce 174B     		ldr	r3, .L503+32
 7187 0dd0 0422     		movs	r2, #4
 7188 0dd2 1A70     		strb	r2, [r3]
2221:..\src/interruptions.c **** 
2222:..\src/interruptions.c ****             break;
 7189              		.loc 1 2222 0
 7190 0dd4 7FE0     		b	.L434
 7191              	.L438:
2223:..\src/interruptions.c **** 
2224:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2225:..\src/interruptions.c ****                 UD_counter++;
 7192              		.loc 1 2225 0
 7193 0dd6 1A4B     		ldr	r3, .L503+52
 7194 0dd8 1B88     		ldrh	r3, [r3]
 7195 0dda 0133     		adds	r3, r3, #1
 7196 0ddc 9AB2     		uxth	r2, r3
 7197 0dde 184B     		ldr	r3, .L503+52
 7198 0de0 1A80     		strh	r2, [r3]	@ movhi
2226:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 7199              		.loc 1 2226 0
 7200 0de2 174B     		ldr	r3, .L503+52
 7201 0de4 1B88     		ldrh	r3, [r3]
 7202 0de6 642B     		cmp	r3, #100
 7203 0de8 70D1     		bne	.L488
2227:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 7204              		.loc 1 2227 0
 7205 0dea 154B     		ldr	r3, .L503+52
 7206 0dec 0022     		movs	r2, #0
 7207 0dee 1A80     		strh	r2, [r3]	@ movhi
2228:..\src/interruptions.c **** 
2229:..\src/interruptions.c ****                     if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 169


 7208              		.loc 1 2229 0
 7209 0df0 074B     		ldr	r3, .L503+4
 7210 0df2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7211 0df4 002B     		cmp	r3, #0
 7212 0df6 04D0     		beq	.L446
2230:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7213              		.loc 1 2230 0
 7214 0df8 054B     		ldr	r3, .L503+4
 7215 0dfa 0022     		movs	r2, #0
 7216 0dfc 1A70     		strb	r2, [r3]
2231:..\src/interruptions.c ****                         interrupt_manager();
 7217              		.loc 1 2231 0
 7218 0dfe FFF7FEFF 		bl	interrupt_manager
 7219              	.L446:
2232:..\src/interruptions.c ****                     }
2233:..\src/interruptions.c **** 
2234:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 7220              		.loc 1 2234 0
 7221 0e02 0A4B     		ldr	r3, .L503+32
 7222 0e04 0322     		movs	r2, #3
 7223 0e06 1A70     		strb	r2, [r3]
2235:..\src/interruptions.c ****                 }
2236:..\src/interruptions.c **** 
2237:..\src/interruptions.c ****             break;
 7224              		.loc 1 2237 0
 7225 0e08 60E0     		b	.L488
 7226              	.L504:
 7227 0e0a 00BF     		.align	2
 7228              	.L503:
 7229 0e0c 7E010000 		.word	emg_counter_2.10591
 7230 0e10 00000000 		.word	interrupt_flag
 7231 0e14 76010000 		.word	idx.10599
 7232 0e18 00000000 		.word	c_mem
 7233 0e1c 00000000 		.word	g_mem
 7234 0e20 00000000 		.word	g_meas
 7235 0e24 00000000 		.word	g_ref
 7236 0e28 00000000 		.word	emg_2_status
 7237 0e2c 00000000 		.word	joy_UD_status
 7238 0e30 00000000 		.word	ADC_buf
 7239 0e34 80010000 		.word	UD_mean_value.10594
 7240 0e38 00FCFFFF 		.word	-1024
 7241 0e3c 00000000 		.word	g_adc_meas
 7242 0e40 84010000 		.word	UD_counter.10592
 7243              	.L439:
2238:..\src/interruptions.c **** 
2239:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2240:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2241:..\src/interruptions.c ****                 UD_counter++;
 7244              		.loc 1 2241 0
 7245 0e44 954B     		ldr	r3, .L505
 7246 0e46 1B88     		ldrh	r3, [r3]
 7247 0e48 0133     		adds	r3, r3, #1
 7248 0e4a 9AB2     		uxth	r2, r3
 7249 0e4c 934B     		ldr	r3, .L505
 7250 0e4e 1A80     		strh	r2, [r3]	@ movhi
2242:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 7251              		.loc 1 2242 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 170


 7252 0e50 934B     		ldr	r3, .L505+4
 7253 0e52 B3F90430 		ldrsh	r3, [r3, #4]
 7254 0e56 1A46     		mov	r2, r3
 7255 0e58 924B     		ldr	r3, .L505+8
 7256 0e5a 1B68     		ldr	r3, [r3]
 7257 0e5c 1344     		add	r3, r3, r2
 7258 0e5e 914A     		ldr	r2, .L505+8
 7259 0e60 1360     		str	r3, [r2]
2243:..\src/interruptions.c **** 
2244:..\src/interruptions.c ****                 if (interrupt_flag){
 7260              		.loc 1 2244 0
 7261 0e62 914B     		ldr	r3, .L505+12
 7262 0e64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7263 0e66 002B     		cmp	r3, #0
 7264 0e68 04D0     		beq	.L447
2245:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7265              		.loc 1 2245 0
 7266 0e6a 8F4B     		ldr	r3, .L505+12
 7267 0e6c 0022     		movs	r2, #0
 7268 0e6e 1A70     		strb	r2, [r3]
2246:..\src/interruptions.c ****                     interrupt_manager();
 7269              		.loc 1 2246 0
 7270 0e70 FFF7FEFF 		bl	interrupt_manager
 7271              	.L447:
2247:..\src/interruptions.c ****                 }
2248:..\src/interruptions.c **** 
2249:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 7272              		.loc 1 2249 0
 7273 0e74 894B     		ldr	r3, .L505
 7274 0e76 1B88     		ldrh	r3, [r3]
 7275 0e78 C82B     		cmp	r3, #200
 7276 0e7a 29D1     		bne	.L489
2250:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 7277              		.loc 1 2250 0
 7278 0e7c 894B     		ldr	r3, .L505+8
 7279 0e7e 1B68     		ldr	r3, [r3]
 7280 0e80 8A4A     		ldr	r2, .L505+16
 7281 0e82 82FB0312 		smull	r1, r2, r2, r3
 7282 0e86 9211     		asrs	r2, r2, #6
 7283 0e88 DB17     		asrs	r3, r3, #31
 7284 0e8a D31A     		subs	r3, r2, r3
 7285 0e8c 854A     		ldr	r2, .L505+8
 7286 0e8e 1360     		str	r3, [r2]
2251:..\src/interruptions.c **** 
2252:..\src/interruptions.c ****                     if (interrupt_flag){
 7287              		.loc 1 2252 0
 7288 0e90 854B     		ldr	r3, .L505+12
 7289 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7290 0e94 002B     		cmp	r3, #0
 7291 0e96 04D0     		beq	.L449
2253:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7292              		.loc 1 2253 0
 7293 0e98 834B     		ldr	r3, .L505+12
 7294 0e9a 0022     		movs	r2, #0
 7295 0e9c 1A70     		strb	r2, [r3]
2254:..\src/interruptions.c ****                         interrupt_manager();
 7296              		.loc 1 2254 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 171


 7297 0e9e FFF7FEFF 		bl	interrupt_manager
 7298              	.L449:
2255:..\src/interruptions.c ****                     }
2256:..\src/interruptions.c **** 
2257:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 7299              		.loc 1 2257 0
 7300 0ea2 7E4B     		ldr	r3, .L505
 7301 0ea4 0022     		movs	r2, #0
 7302 0ea6 1A80     		strh	r2, [r3]	@ movhi
2258:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 7303              		.loc 1 2258 0
 7304 0ea8 814B     		ldr	r3, .L505+20
 7305 0eaa 0022     		movs	r2, #0
 7306 0eac 1A70     		strb	r2, [r3]
2259:..\src/interruptions.c ****                 }
2260:..\src/interruptions.c ****             break;
 7307              		.loc 1 2260 0
 7308 0eae 0FE0     		b	.L489
 7309              	.L440:
2261:..\src/interruptions.c **** 
2262:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2263:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 7310              		.loc 1 2263 0
 7311 0eb0 804B     		ldr	r3, .L505+24
 7312 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7313 0eb4 002B     		cmp	r3, #0
 7314 0eb6 0DD1     		bne	.L490
 7315              		.loc 1 2263 0 is_stmt 0 discriminator 1
 7316 0eb8 7F4B     		ldr	r3, .L505+28
 7317 0eba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7318 0ebc 002B     		cmp	r3, #0
 7319 0ebe 09D1     		bne	.L490
2264:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 7320              		.loc 1 2264 0 is_stmt 1
 7321 0ec0 7B4B     		ldr	r3, .L505+20
 7322 0ec2 0222     		movs	r2, #2
 7323 0ec4 1A70     		strb	r2, [r3]
2265:..\src/interruptions.c ****             break;
 7324              		.loc 1 2265 0
 7325 0ec6 05E0     		b	.L490
 7326              	.L487:
2215:..\src/interruptions.c **** 
 7327              		.loc 1 2215 0
 7328 0ec8 00BF     		nop
 7329 0eca 04E0     		b	.L434
 7330              	.L488:
2237:..\src/interruptions.c **** 
 7331              		.loc 1 2237 0
 7332 0ecc 00BF     		nop
 7333 0ece 02E0     		b	.L434
 7334              	.L489:
2260:..\src/interruptions.c **** 
 7335              		.loc 1 2260 0
 7336 0ed0 00BF     		nop
 7337 0ed2 00E0     		b	.L434
 7338              	.L490:
 7339              		.loc 1 2265 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 172


 7340 0ed4 00BF     		nop
 7341              	.L434:
2266:..\src/interruptions.c ****         }
2267:..\src/interruptions.c **** 
2268:..\src/interruptions.c ****         if (interrupt_flag){
 7342              		.loc 1 2268 0
 7343 0ed6 744B     		ldr	r3, .L505+12
 7344 0ed8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7345 0eda 002B     		cmp	r3, #0
 7346 0edc 04D0     		beq	.L451
2269:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7347              		.loc 1 2269 0
 7348 0ede 724B     		ldr	r3, .L505+12
 7349 0ee0 0022     		movs	r2, #0
 7350 0ee2 1A70     		strb	r2, [r3]
2270:..\src/interruptions.c ****             interrupt_manager();
 7351              		.loc 1 2270 0
 7352 0ee4 FFF7FEFF 		bl	interrupt_manager
 7353              	.L451:
2271:..\src/interruptions.c ****         }
2272:..\src/interruptions.c ****             
2273:..\src/interruptions.c ****         switch (joy_LR_status) {
 7354              		.loc 1 2273 0
 7355 0ee8 744B     		ldr	r3, .L505+32
 7356 0eea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7357 0eec 052B     		cmp	r3, #5
 7358 0eee 00F2C380 		bhi	.L452
 7359 0ef2 01A2     		adr	r2, .L454
 7360 0ef4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7361              		.p2align 2
 7362              	.L454:
 7363 0ef8 110F0000 		.word	.L453+1
 7364 0efc AD0F0000 		.word	.L455+1
 7365 0f00 C10F0000 		.word	.L456+1
 7366 0f04 F50F0000 		.word	.L457+1
 7367 0f08 4F100000 		.word	.L458+1
 7368 0f0c 4F100000 		.word	.L458+1
 7369              		.p2align 1
 7370              	.L453:
2274:..\src/interruptions.c ****             case NORMAL:
2275:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 7371              		.loc 1 2275 0
 7372 0f10 634B     		ldr	r3, .L505+4
 7373 0f12 B3F90630 		ldrsh	r3, [r3, #6]
 7374 0f16 7B60     		str	r3, [r7, #4]
2276:..\src/interruptions.c **** 
2277:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 7375              		.loc 1 2277 0
 7376 0f18 694B     		ldr	r3, .L505+36
 7377 0f1a 1B68     		ldr	r3, [r3]
 7378 0f1c 7A68     		ldr	r2, [r7, #4]
 7379 0f1e D31A     		subs	r3, r2, r3
 7380 0f20 1846     		mov	r0, r3
 7381 0f22 FFF7FEFF 		bl	__aeabi_i2f
 7382 0f26 0446     		mov	r4, r0
 7383 0f28 654B     		ldr	r3, .L505+36
 7384 0f2a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 173


 7385 0f2c 1846     		mov	r0, r3
 7386 0f2e FFF7FEFF 		bl	__aeabi_i2f
 7387 0f32 0346     		mov	r3, r0
 7388 0f34 1946     		mov	r1, r3
 7389 0f36 2046     		mov	r0, r4
 7390 0f38 FFF7FEFF 		bl	__aeabi_fdiv
 7391 0f3c 0346     		mov	r3, r0
 7392 0f3e 1C46     		mov	r4, r3
 7393 0f40 604B     		ldr	r3, .L505+40
 7394 0f42 B3F8E632 		ldrh	r3, [r3, #742]
 7395 0f46 1846     		mov	r0, r3
 7396 0f48 FFF7FEFF 		bl	__aeabi_i2f
 7397 0f4c 0346     		mov	r3, r0
 7398 0f4e 1946     		mov	r1, r3
 7399 0f50 2046     		mov	r0, r4
 7400 0f52 FFF7FEFF 		bl	__aeabi_fmul
 7401 0f56 0346     		mov	r3, r0
 7402 0f58 1846     		mov	r0, r3
 7403 0f5a FFF7FEFF 		bl	__aeabi_f2iz
 7404 0f5e 0346     		mov	r3, r0
 7405 0f60 7B60     		str	r3, [r7, #4]
2278:..\src/interruptions.c ****                 
2279:..\src/interruptions.c ****                 if (interrupt_flag){
 7406              		.loc 1 2279 0
 7407 0f62 514B     		ldr	r3, .L505+12
 7408 0f64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7409 0f66 002B     		cmp	r3, #0
 7410 0f68 04D0     		beq	.L459
2280:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7411              		.loc 1 2280 0
 7412 0f6a 4F4B     		ldr	r3, .L505+12
 7413 0f6c 0022     		movs	r2, #0
 7414 0f6e 1A70     		strb	r2, [r3]
2281:..\src/interruptions.c ****                     interrupt_manager();
 7415              		.loc 1 2281 0
 7416 0f70 FFF7FEFF 		bl	interrupt_manager
 7417              	.L459:
2282:..\src/interruptions.c ****                 }
2283:..\src/interruptions.c **** 
2284:..\src/interruptions.c ****                 //Saturation
2285:..\src/interruptions.c ****                 if (i_aux < -1024)
 7418              		.loc 1 2285 0
 7419 0f74 7B68     		ldr	r3, [r7, #4]
 7420 0f76 13F5806F 		cmn	r3, #1024
 7421 0f7a 01DA     		bge	.L460
2286:..\src/interruptions.c ****                     i_aux = -1024;
 7422              		.loc 1 2286 0
 7423 0f7c 524B     		ldr	r3, .L505+44
 7424 0f7e 7B60     		str	r3, [r7, #4]
 7425              	.L460:
2287:..\src/interruptions.c ****                 if (i_aux > 1024)
 7426              		.loc 1 2287 0
 7427 0f80 7B68     		ldr	r3, [r7, #4]
 7428 0f82 B3F5806F 		cmp	r3, #1024
 7429 0f86 02DD     		ble	.L461
2288:..\src/interruptions.c ****                     i_aux = 1024;
 7430              		.loc 1 2288 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 174


 7431 0f88 4FF48063 		mov	r3, #1024
 7432 0f8c 7B60     		str	r3, [r7, #4]
 7433              	.L461:
2289:..\src/interruptions.c **** 
2290:..\src/interruptions.c ****                 if (interrupt_flag){
 7434              		.loc 1 2290 0
 7435 0f8e 464B     		ldr	r3, .L505+12
 7436 0f90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7437 0f92 002B     		cmp	r3, #0
 7438 0f94 04D0     		beq	.L462
2291:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7439              		.loc 1 2291 0
 7440 0f96 444B     		ldr	r3, .L505+12
 7441 0f98 0022     		movs	r2, #0
 7442 0f9a 1A70     		strb	r2, [r3]
2292:..\src/interruptions.c ****                     interrupt_manager();
 7443              		.loc 1 2292 0
 7444 0f9c FFF7FEFF 		bl	interrupt_manager
 7445              	.L462:
2293:..\src/interruptions.c ****                 }
2294:..\src/interruptions.c **** 
2295:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 7446              		.loc 1 2295 0
 7447 0fa0 7B68     		ldr	r3, [r7, #4]
 7448 0fa2 1BB2     		sxth	r3, r3
 7449 0fa4 1A46     		mov	r2, r3
 7450 0fa6 494B     		ldr	r3, .L505+48
 7451 0fa8 1A62     		str	r2, [r3, #32]
2296:..\src/interruptions.c **** 
2297:..\src/interruptions.c ****             break;
 7452              		.loc 1 2297 0
 7453 0faa 65E0     		b	.L452
 7454              	.L455:
2298:..\src/interruptions.c **** 
2299:..\src/interruptions.c ****             case RESET: // reset variables
2300:..\src/interruptions.c ****                 LR_counter = 0;
 7455              		.loc 1 2300 0
 7456 0fac 484B     		ldr	r3, .L505+52
 7457 0fae 0022     		movs	r2, #0
 7458 0fb0 1A80     		strh	r2, [r3]	@ movhi
2301:..\src/interruptions.c ****                 LR_mean_value = 0;
 7459              		.loc 1 2301 0
 7460 0fb2 434B     		ldr	r3, .L505+36
 7461 0fb4 0022     		movs	r2, #0
 7462 0fb6 1A60     		str	r2, [r3]
2302:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 7463              		.loc 1 2302 0
 7464 0fb8 404B     		ldr	r3, .L505+32
 7465 0fba 0422     		movs	r2, #4
 7466 0fbc 1A70     		strb	r2, [r3]
2303:..\src/interruptions.c ****             break;
 7467              		.loc 1 2303 0
 7468 0fbe 5BE0     		b	.L452
 7469              	.L456:
2304:..\src/interruptions.c **** 
2305:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2306:..\src/interruptions.c ****                 LR_counter++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 175


 7470              		.loc 1 2306 0
 7471 0fc0 434B     		ldr	r3, .L505+52
 7472 0fc2 1B88     		ldrh	r3, [r3]
 7473 0fc4 0133     		adds	r3, r3, #1
 7474 0fc6 9AB2     		uxth	r2, r3
 7475 0fc8 414B     		ldr	r3, .L505+52
 7476 0fca 1A80     		strh	r2, [r3]	@ movhi
2307:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 7477              		.loc 1 2307 0
 7478 0fcc 404B     		ldr	r3, .L505+52
 7479 0fce 1B88     		ldrh	r3, [r3]
 7480 0fd0 642B     		cmp	r3, #100
 7481 0fd2 4CD1     		bne	.L491
2308:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 7482              		.loc 1 2308 0
 7483 0fd4 3E4B     		ldr	r3, .L505+52
 7484 0fd6 0022     		movs	r2, #0
 7485 0fd8 1A80     		strh	r2, [r3]	@ movhi
2309:..\src/interruptions.c **** 
2310:..\src/interruptions.c ****                     if (interrupt_flag){
 7486              		.loc 1 2310 0
 7487 0fda 334B     		ldr	r3, .L505+12
 7488 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7489 0fde 002B     		cmp	r3, #0
 7490 0fe0 04D0     		beq	.L464
2311:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7491              		.loc 1 2311 0
 7492 0fe2 314B     		ldr	r3, .L505+12
 7493 0fe4 0022     		movs	r2, #0
 7494 0fe6 1A70     		strb	r2, [r3]
2312:..\src/interruptions.c ****                         interrupt_manager();
 7495              		.loc 1 2312 0
 7496 0fe8 FFF7FEFF 		bl	interrupt_manager
 7497              	.L464:
2313:..\src/interruptions.c ****                     }
2314:..\src/interruptions.c **** 
2315:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 7498              		.loc 1 2315 0
 7499 0fec 334B     		ldr	r3, .L505+32
 7500 0fee 0322     		movs	r2, #3
 7501 0ff0 1A70     		strb	r2, [r3]
2316:..\src/interruptions.c ****                 }
2317:..\src/interruptions.c ****             break;
 7502              		.loc 1 2317 0
 7503 0ff2 3CE0     		b	.L491
 7504              	.L457:
2318:..\src/interruptions.c **** 
2319:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2320:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2321:..\src/interruptions.c ****                 LR_counter++;
 7505              		.loc 1 2321 0
 7506 0ff4 364B     		ldr	r3, .L505+52
 7507 0ff6 1B88     		ldrh	r3, [r3]
 7508 0ff8 0133     		adds	r3, r3, #1
 7509 0ffa 9AB2     		uxth	r2, r3
 7510 0ffc 344B     		ldr	r3, .L505+52
 7511 0ffe 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 176


2322:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 7512              		.loc 1 2322 0
 7513 1000 274B     		ldr	r3, .L505+4
 7514 1002 B3F90630 		ldrsh	r3, [r3, #6]
 7515 1006 1A46     		mov	r2, r3
 7516 1008 2D4B     		ldr	r3, .L505+36
 7517 100a 1B68     		ldr	r3, [r3]
 7518 100c 1344     		add	r3, r3, r2
 7519 100e 2C4A     		ldr	r2, .L505+36
 7520 1010 1360     		str	r3, [r2]
2323:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 7521              		.loc 1 2323 0
 7522 1012 2F4B     		ldr	r3, .L505+52
 7523 1014 1B88     		ldrh	r3, [r3]
 7524 1016 C82B     		cmp	r3, #200
 7525 1018 2BD1     		bne	.L492
2324:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 7526              		.loc 1 2324 0
 7527 101a 294B     		ldr	r3, .L505+36
 7528 101c 1B68     		ldr	r3, [r3]
 7529 101e 234A     		ldr	r2, .L505+16
 7530 1020 82FB0312 		smull	r1, r2, r2, r3
 7531 1024 9211     		asrs	r2, r2, #6
 7532 1026 DB17     		asrs	r3, r3, #31
 7533 1028 D31A     		subs	r3, r2, r3
 7534 102a 254A     		ldr	r2, .L505+36
 7535 102c 1360     		str	r3, [r2]
2325:..\src/interruptions.c ****                     
2326:..\src/interruptions.c ****                     if (interrupt_flag){
 7536              		.loc 1 2326 0
 7537 102e 1E4B     		ldr	r3, .L505+12
 7538 1030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7539 1032 002B     		cmp	r3, #0
 7540 1034 04D0     		beq	.L466
2327:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7541              		.loc 1 2327 0
 7542 1036 1C4B     		ldr	r3, .L505+12
 7543 1038 0022     		movs	r2, #0
 7544 103a 1A70     		strb	r2, [r3]
2328:..\src/interruptions.c ****                         interrupt_manager();
 7545              		.loc 1 2328 0
 7546 103c FFF7FEFF 		bl	interrupt_manager
 7547              	.L466:
2329:..\src/interruptions.c ****                     }
2330:..\src/interruptions.c **** 
2331:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 7548              		.loc 1 2331 0
 7549 1040 234B     		ldr	r3, .L505+52
 7550 1042 0022     		movs	r2, #0
 7551 1044 1A80     		strh	r2, [r3]	@ movhi
2332:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 7552              		.loc 1 2332 0
 7553 1046 1D4B     		ldr	r3, .L505+32
 7554 1048 0022     		movs	r2, #0
 7555 104a 1A70     		strb	r2, [r3]
2333:..\src/interruptions.c ****                 }
2334:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 177


 7556              		.loc 1 2334 0
 7557 104c 11E0     		b	.L492
 7558              	.L458:
2335:..\src/interruptions.c **** 
2336:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2337:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 7559              		.loc 1 2337 0
 7560 104e 194B     		ldr	r3, .L505+24
 7561 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7562 1052 002B     		cmp	r3, #0
 7563 1054 0FD1     		bne	.L493
 7564              		.loc 1 2337 0 is_stmt 0 discriminator 1
 7565 1056 184B     		ldr	r3, .L505+28
 7566 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7567 105a 002B     		cmp	r3, #0
 7568 105c 0BD1     		bne	.L493
 7569              		.loc 1 2337 0 discriminator 2
 7570 105e 144B     		ldr	r3, .L505+20
 7571 1060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7572 1062 002B     		cmp	r3, #0
 7573 1064 07D1     		bne	.L493
2338:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 7574              		.loc 1 2338 0 is_stmt 1
 7575 1066 154B     		ldr	r3, .L505+32
 7576 1068 0222     		movs	r2, #2
 7577 106a 1A70     		strb	r2, [r3]
2339:..\src/interruptions.c ****             break;
 7578              		.loc 1 2339 0
 7579 106c 03E0     		b	.L493
 7580              	.L491:
2317:..\src/interruptions.c **** 
 7581              		.loc 1 2317 0
 7582 106e 00BF     		nop
 7583 1070 02E0     		b	.L452
 7584              	.L492:
2334:..\src/interruptions.c **** 
 7585              		.loc 1 2334 0
 7586 1072 00BF     		nop
 7587 1074 00E0     		b	.L452
 7588              	.L493:
 7589              		.loc 1 2339 0
 7590 1076 00BF     		nop
 7591              	.L452:
2340:..\src/interruptions.c ****         }
2341:..\src/interruptions.c ****        
2342:..\src/interruptions.c ****         if (interrupt_flag){
 7592              		.loc 1 2342 0
 7593 1078 0B4B     		ldr	r3, .L505+12
 7594 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7595 107c 002B     		cmp	r3, #0
 7596 107e 04D0     		beq	.L433
2343:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7597              		.loc 1 2343 0
 7598 1080 094B     		ldr	r3, .L505+12
 7599 1082 0022     		movs	r2, #0
 7600 1084 1A70     		strb	r2, [r3]
2344:..\src/interruptions.c ****             interrupt_manager();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 178


 7601              		.loc 1 2344 0
 7602 1086 FFF7FEFF 		bl	interrupt_manager
 7603              	.L433:
2345:..\src/interruptions.c ****         }
2346:..\src/interruptions.c ****     }
2347:..\src/interruptions.c ****     
2348:..\src/interruptions.c ****     // Read also EMG additional sensors port
2349:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 7604              		.loc 1 2349 0
 7605 108a 124B     		ldr	r3, .L505+56
 7606 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7607 108e 062B     		cmp	r3, #6
 7608 1090 73D9     		bls	.L494
2350:..\src/interruptions.c ****         
2351:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 7609              		.loc 1 2351 0
 7610 1092 114B     		ldr	r3, .L505+60
 7611 1094 0022     		movs	r2, #0
 7612 1096 1A70     		strb	r2, [r3]
 7613 1098 6BE0     		b	.L469
 7614              	.L506:
 7615 109a 00BF     		.align	2
 7616              	.L505:
 7617 109c 84010000 		.word	UD_counter.10592
 7618 10a0 00000000 		.word	ADC_buf
 7619 10a4 80010000 		.word	UD_mean_value.10594
 7620 10a8 00000000 		.word	interrupt_flag
 7621 10ac 1F85EB51 		.word	1374389535
 7622 10b0 00000000 		.word	joy_UD_status
 7623 10b4 00000000 		.word	emg_1_status
 7624 10b8 00000000 		.word	emg_2_status
 7625 10bc 00000000 		.word	joy_LR_status
 7626 10c0 88010000 		.word	LR_mean_value.10595
 7627 10c4 00000000 		.word	c_mem
 7628 10c8 00FCFFFF 		.word	-1024
 7629 10cc 00000000 		.word	g_adc_meas
 7630 10d0 8C010000 		.word	LR_counter.10593
 7631 10d4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7632 10d8 76010000 		.word	idx.10599
 7633              	.L476:
2352:..\src/interruptions.c ****             
2353:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 7634              		.loc 1 2353 0
 7635 10dc 294B     		ldr	r3, .L507
 7636 10de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7637 10e0 0633     		adds	r3, r3, #6
 7638 10e2 294A     		ldr	r2, .L507+4
 7639 10e4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7640 10e8 7B60     		str	r3, [r7, #4]
2354:..\src/interruptions.c ****             if (i_aux < 0) 
 7641              		.loc 1 2354 0
 7642 10ea 7B68     		ldr	r3, [r7, #4]
 7643 10ec 002B     		cmp	r3, #0
 7644 10ee 01DA     		bge	.L470
2355:..\src/interruptions.c ****                 i_aux = 0;
 7645              		.loc 1 2355 0
 7646 10f0 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 179


 7647 10f2 7B60     		str	r3, [r7, #4]
 7648              	.L470:
2356:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 7649              		.loc 1 2356 0
 7650 10f4 234B     		ldr	r3, .L507
 7651 10f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7652 10f8 0233     		adds	r3, r3, #2
 7653 10fa DB00     		lsls	r3, r3, #3
 7654 10fc 234A     		ldr	r2, .L507+8
 7655 10fe 1344     		add	r3, r3, r2
 7656 1100 1946     		mov	r1, r3
 7657 1102 7868     		ldr	r0, [r7, #4]
 7658 1104 FFF7FEFF 		bl	filter
 7659 1108 7860     		str	r0, [r7, #4]
2357:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 7660              		.loc 1 2357 0
 7661 110a 7B68     		ldr	r3, [r7, #4]
 7662 110c 9B02     		lsls	r3, r3, #10
 7663 110e 002B     		cmp	r3, #0
 7664 1110 01DA     		bge	.L471
 7665 1112 03F2FF33 		addw	r3, r3, #1023
 7666              	.L471:
 7667 1116 9B12     		asrs	r3, r3, #10
 7668 1118 7B60     		str	r3, [r7, #4]
2358:..\src/interruptions.c **** 
2359:..\src/interruptions.c ****             if (interrupt_flag){
 7669              		.loc 1 2359 0
 7670 111a 1D4B     		ldr	r3, .L507+12
 7671 111c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7672 111e 002B     		cmp	r3, #0
 7673 1120 04D0     		beq	.L472
2360:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7674              		.loc 1 2360 0
 7675 1122 1B4B     		ldr	r3, .L507+12
 7676 1124 0022     		movs	r2, #0
 7677 1126 1A70     		strb	r2, [r3]
2361:..\src/interruptions.c ****                 interrupt_manager();
 7678              		.loc 1 2361 0
 7679 1128 FFF7FEFF 		bl	interrupt_manager
 7680              	.L472:
2362:..\src/interruptions.c ****             }
2363:..\src/interruptions.c ****             //Saturation
2364:..\src/interruptions.c ****             if (i_aux < 0)
 7681              		.loc 1 2364 0
 7682 112c 7B68     		ldr	r3, [r7, #4]
 7683 112e 002B     		cmp	r3, #0
 7684 1130 02DA     		bge	.L473
2365:..\src/interruptions.c ****                 i_aux = 0;
 7685              		.loc 1 2365 0
 7686 1132 0023     		movs	r3, #0
 7687 1134 7B60     		str	r3, [r7, #4]
 7688 1136 06E0     		b	.L474
 7689              	.L473:
2366:..\src/interruptions.c ****             else 
2367:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7690              		.loc 1 2367 0
 7691 1138 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 180


 7692 113a B3F5806F 		cmp	r3, #1024
 7693 113e 02DD     		ble	.L474
2368:..\src/interruptions.c ****                     i_aux = 1024;
 7694              		.loc 1 2368 0
 7695 1140 4FF48063 		mov	r3, #1024
 7696 1144 7B60     		str	r3, [r7, #4]
 7697              	.L474:
2369:..\src/interruptions.c ****             
2370:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 7698              		.loc 1 2370 0
 7699 1146 0F4B     		ldr	r3, .L507
 7700 1148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7701 114a 1249     		ldr	r1, .L507+16
 7702 114c 0233     		adds	r3, r3, #2
 7703 114e 7A68     		ldr	r2, [r7, #4]
 7704 1150 41F82320 		str	r2, [r1, r3, lsl #2]
2371:..\src/interruptions.c **** 
2372:..\src/interruptions.c ****             if (interrupt_flag){
 7705              		.loc 1 2372 0
 7706 1154 0E4B     		ldr	r3, .L507+12
 7707 1156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7708 1158 002B     		cmp	r3, #0
 7709 115a 04D0     		beq	.L475
2373:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7710              		.loc 1 2373 0
 7711 115c 0C4B     		ldr	r3, .L507+12
 7712 115e 0022     		movs	r2, #0
 7713 1160 1A70     		strb	r2, [r3]
2374:..\src/interruptions.c ****                 interrupt_manager();
 7714              		.loc 1 2374 0
 7715 1162 FFF7FEFF 		bl	interrupt_manager
 7716              	.L475:
2351:..\src/interruptions.c ****             
 7717              		.loc 1 2351 0 discriminator 2
 7718 1166 074B     		ldr	r3, .L507
 7719 1168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7720 116a 0133     		adds	r3, r3, #1
 7721 116c DAB2     		uxtb	r2, r3
 7722 116e 054B     		ldr	r3, .L507
 7723 1170 1A70     		strb	r2, [r3]
 7724              	.L469:
2351:..\src/interruptions.c ****             
 7725              		.loc 1 2351 0 is_stmt 0 discriminator 1
 7726 1172 044B     		ldr	r3, .L507
 7727 1174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7728 1176 052B     		cmp	r3, #5
 7729 1178 B0D9     		bls	.L476
 7730              	.L494:
2375:..\src/interruptions.c ****             }
2376:..\src/interruptions.c ****         }
2377:..\src/interruptions.c ****     }
2378:..\src/interruptions.c ****     
2379:..\src/interruptions.c **** }
 7731              		.loc 1 2379 0 is_stmt 1
 7732 117a 00BF     		nop
 7733 117c 0C37     		adds	r7, r7, #12
 7734              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 181


 7735 117e BD46     		mov	sp, r7
 7736              		.cfi_def_cfa_register 13
 7737              		@ sp needed
 7738 1180 F0BD     		pop	{r4, r5, r6, r7, pc}
 7739              	.L508:
 7740 1182 00BF     		.align	2
 7741              	.L507:
 7742 1184 76010000 		.word	idx.10599
 7743 1188 00000000 		.word	ADC_buf
 7744 118c 00000000 		.word	filt_emg
 7745 1190 00000000 		.word	interrupt_flag
 7746 1194 00000000 		.word	g_adc_meas
 7747              		.cfi_endproc
 7748              	.LFE73:
 7749              		.size	analog_read_end, .-analog_read_end
 7750              		.section	.text.overcurrent_control,"ax",%progbits
 7751              		.align	2
 7752              		.global	overcurrent_control
 7753              		.thumb
 7754              		.thumb_func
 7755              		.type	overcurrent_control, %function
 7756              	overcurrent_control:
 7757              	.LFB74:
2380:..\src/interruptions.c **** 
2381:..\src/interruptions.c **** //==============================================================================
2382:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2383:..\src/interruptions.c **** //==============================================================================
2384:..\src/interruptions.c **** 
2385:..\src/interruptions.c **** void overcurrent_control() {
 7758              		.loc 1 2385 0
 7759              		.cfi_startproc
 7760              		@ args = 0, pretend = 0, frame = 8
 7761              		@ frame_needed = 1, uses_anonymous_args = 0
 7762              		@ link register save eliminated.
 7763 0000 80B4     		push	{r7}
 7764              		.cfi_def_cfa_offset 4
 7765              		.cfi_offset 7, -4
 7766 0002 83B0     		sub	sp, sp, #12
 7767              		.cfi_def_cfa_offset 16
 7768 0004 00AF     		add	r7, sp, #0
 7769              		.cfi_def_cfa_register 7
 7770              	.LBB6:
2386:..\src/interruptions.c ****     
2387:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 7771              		.loc 1 2387 0
 7772 0006 0023     		movs	r3, #0
 7773 0008 FB71     		strb	r3, [r7, #7]
 7774 000a 61E0     		b	.L510
 7775              	.L514:
2388:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7776              		.loc 1 2388 0
 7777 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7778 000e 3449     		ldr	r1, .L516
 7779 0010 1346     		mov	r3, r2
 7780 0012 DB00     		lsls	r3, r3, #3
 7781 0014 9B1A     		subs	r3, r3, r2
 7782 0016 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 182


 7783 0018 0B44     		add	r3, r3, r1
 7784 001a 03F58673 		add	r3, r3, #268
 7785 001e B3F90030 		ldrsh	r3, [r3]
 7786 0022 002B     		cmp	r3, #0
 7787 0024 51D0     		beq	.L511
2389:..\src/interruptions.c ****             // if the current is over the limit
2390:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 7788              		.loc 1 2390 0
 7789 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7790 0028 2E49     		ldr	r1, .L516+4
 7791 002a 1346     		mov	r3, r2
 7792 002c DB00     		lsls	r3, r3, #3
 7793 002e 9B1A     		subs	r3, r3, r2
 7794 0030 1B01     		lsls	r3, r3, #4
 7795 0032 0B44     		add	r3, r3, r1
 7796 0034 03F58873 		add	r3, r3, #272
 7797 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7798 003a 1946     		mov	r1, r3
 7799 003c 2A4A     		ldr	r2, .L516+8
 7800 003e 3423     		movs	r3, #52
 7801 0040 03FB01F3 		mul	r3, r3, r1
 7802 0044 1344     		add	r3, r3, r2
 7803 0046 0C33     		adds	r3, r3, #12
 7804 0048 1968     		ldr	r1, [r3]
 7805 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7806 004c 2448     		ldr	r0, .L516
 7807 004e 1346     		mov	r3, r2
 7808 0050 DB00     		lsls	r3, r3, #3
 7809 0052 9B1A     		subs	r3, r3, r2
 7810 0054 1B01     		lsls	r3, r3, #4
 7811 0056 0344     		add	r3, r3, r0
 7812 0058 03F58673 		add	r3, r3, #268
 7813 005c B3F90030 		ldrsh	r3, [r3]
 7814 0060 9942     		cmp	r1, r3
 7815 0062 07DD     		ble	.L512
2391:..\src/interruptions.c ****                 //decrease pwm_limit
2392:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 7816              		.loc 1 2392 0
 7817 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7818 0066 214A     		ldr	r2, .L516+12
 7819 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7820 006a 013A     		subs	r2, r2, #1
 7821 006c D1B2     		uxtb	r1, r2
 7822 006e 1F4A     		ldr	r2, .L516+12
 7823 0070 D154     		strb	r1, [r2, r3]
 7824 0072 1CE0     		b	.L515
 7825              	.L512:
2393:..\src/interruptions.c ****             // if the current is in the safe zone
2394:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 7826              		.loc 1 2394 0
 7827 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7828 0076 1C4A     		ldr	r2, .L516+8
 7829 0078 3421     		movs	r1, #52
 7830 007a 01FB03F3 		mul	r3, r1, r3
 7831 007e 1344     		add	r3, r3, r2
 7832 0080 0C33     		adds	r3, r3, #12
 7833 0082 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 183


 7834 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7835 0086 1648     		ldr	r0, .L516
 7836 0088 1346     		mov	r3, r2
 7837 008a DB00     		lsls	r3, r3, #3
 7838 008c 9B1A     		subs	r3, r3, r2
 7839 008e 1B01     		lsls	r3, r3, #4
 7840 0090 0344     		add	r3, r3, r0
 7841 0092 03F58673 		add	r3, r3, #268
 7842 0096 B3F90030 		ldrsh	r3, [r3]
 7843 009a 0A3B     		subs	r3, r3, #10
 7844 009c 9942     		cmp	r1, r3
 7845 009e 06DA     		bge	.L515
2395:..\src/interruptions.c ****                 //increase pwm_limit
2396:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 7846              		.loc 1 2396 0
 7847 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7848 00a2 124A     		ldr	r2, .L516+12
 7849 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7850 00a6 0132     		adds	r2, r2, #1
 7851 00a8 D1B2     		uxtb	r1, r2
 7852 00aa 104A     		ldr	r2, .L516+12
 7853 00ac D154     		strb	r1, [r2, r3]
 7854              	.L515:
2397:..\src/interruptions.c ****             }
2398:..\src/interruptions.c **** 
2399:..\src/interruptions.c ****             // Bound pwm_limit
2400:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2401:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2402:..\src/interruptions.c ****             else 
2403:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 7855              		.loc 1 2403 0
 7856 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7857 00b0 0E4A     		ldr	r2, .L516+12
 7858 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 7859 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7860 00b6 0E49     		ldr	r1, .L516+16
 7861 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7862 00ba 9A42     		cmp	r2, r3
 7863 00bc 05D9     		bls	.L511
2404:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 7864              		.loc 1 2404 0
 7865 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7866 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 7867 00c2 0B49     		ldr	r1, .L516+16
 7868 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7869 00c6 094A     		ldr	r2, .L516+12
 7870 00c8 D154     		strb	r1, [r2, r3]
 7871              	.L511:
2387:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7872              		.loc 1 2387 0 discriminator 2
 7873 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7874 00cc 0133     		adds	r3, r3, #1
 7875 00ce FB71     		strb	r3, [r7, #7]
 7876              	.L510:
2387:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 7877              		.loc 1 2387 0 is_stmt 0 discriminator 1
 7878 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 184


 7879 00d2 012B     		cmp	r3, #1
 7880 00d4 9AD9     		bls	.L514
 7881              	.LBE6:
2405:..\src/interruptions.c ****         }
2406:..\src/interruptions.c ****     }
2407:..\src/interruptions.c **** }
 7882              		.loc 1 2407 0 is_stmt 1
 7883 00d6 00BF     		nop
 7884 00d8 0C37     		adds	r7, r7, #12
 7885              		.cfi_def_cfa_offset 4
 7886 00da BD46     		mov	sp, r7
 7887              		.cfi_def_cfa_register 13
 7888              		@ sp needed
 7889 00dc 80BC     		pop	{r7}
 7890              		.cfi_restore 7
 7891              		.cfi_def_cfa_offset 0
 7892 00de 7047     		bx	lr
 7893              	.L517:
 7894              		.align	2
 7895              	.L516:
 7896 00e0 00000000 		.word	c_mem
 7897 00e4 00000000 		.word	g_mem
 7898 00e8 00000000 		.word	g_meas
 7899 00ec 00000000 		.word	dev_pwm_limit
 7900 00f0 00000000 		.word	dev_pwm_sat
 7901              		.cfi_endproc
 7902              	.LFE74:
 7903              		.size	overcurrent_control, .-overcurrent_control
 7904              		.section	.text.pwm_limit_search,"ax",%progbits
 7905              		.align	2
 7906              		.global	pwm_limit_search
 7907              		.thumb
 7908              		.thumb_func
 7909              		.type	pwm_limit_search, %function
 7910              	pwm_limit_search:
 7911              	.LFB75:
2408:..\src/interruptions.c **** 
2409:..\src/interruptions.c **** //==============================================================================
2410:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2411:..\src/interruptions.c **** //==============================================================================
2412:..\src/interruptions.c **** 
2413:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 7912              		.loc 1 2413 0
 7913              		.cfi_startproc
 7914              		@ args = 0, pretend = 0, frame = 16
 7915              		@ frame_needed = 1, uses_anonymous_args = 0
 7916              		@ link register save eliminated.
 7917 0000 80B4     		push	{r7}
 7918              		.cfi_def_cfa_offset 4
 7919              		.cfi_offset 7, -4
 7920 0002 85B0     		sub	sp, sp, #20
 7921              		.cfi_def_cfa_offset 24
 7922 0004 00AF     		add	r7, sp, #0
 7923              		.cfi_def_cfa_register 7
 7924 0006 0346     		mov	r3, r0
 7925 0008 FB71     		strb	r3, [r7, #7]
2414:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 185


2415:..\src/interruptions.c ****     uint8 CYDATA index;
2416:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 7926              		.loc 1 2416 0
 7927 000a 46F29C33 		movw	r3, #25500
 7928 000e FB81     		strh	r3, [r7, #14]	@ movhi
2417:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 7929              		.loc 1 2417 0
 7930 0010 42F6EC43 		movw	r3, #11500
 7931 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2418:..\src/interruptions.c ****     
2419:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 7932              		.loc 1 2419 0
 7933 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7934 0018 144A     		ldr	r2, .L523
 7935 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7936 001e FB89     		ldrh	r3, [r7, #14]
 7937 0020 9A42     		cmp	r2, r3
 7938 0022 04DD     		ble	.L519
2420:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 7939              		.loc 1 2420 0
 7940 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7941 0026 124A     		ldr	r2, .L523+4
 7942 0028 0021     		movs	r1, #0
 7943 002a D154     		strb	r1, [r2, r3]
2421:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2422:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2423:..\src/interruptions.c ****     } else {
2424:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2425:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2426:..\src/interruptions.c ****     }
2427:..\src/interruptions.c **** }
 7944              		.loc 1 2427 0
 7945 002c 19E0     		b	.L522
 7946              	.L519:
2421:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 7947              		.loc 1 2421 0
 7948 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7949 0030 0E4A     		ldr	r2, .L523
 7950 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7951 0036 BB89     		ldrh	r3, [r7, #12]
 7952 0038 9A42     		cmp	r2, r3
 7953 003a 04DA     		bge	.L521
2422:..\src/interruptions.c ****     } else {
 7954              		.loc 1 2422 0
 7955 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7956 003e 0C4A     		ldr	r2, .L523+4
 7957 0040 6421     		movs	r1, #100
 7958 0042 D154     		strb	r1, [r2, r3]
 7959              		.loc 1 2427 0
 7960 0044 0DE0     		b	.L522
 7961              	.L521:
2424:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 7962              		.loc 1 2424 0
 7963 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7964 0048 084A     		ldr	r2, .L523
 7965 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 7966 004e BB89     		ldrh	r3, [r7, #12]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 186


 7967 0050 D31A     		subs	r3, r2, r3
 7968 0052 5B12     		asrs	r3, r3, #9
 7969 0054 FB72     		strb	r3, [r7, #11]
2425:..\src/interruptions.c ****     }
 7970              		.loc 1 2425 0
 7971 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7972 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 7973 005a 0649     		ldr	r1, .L523+8
 7974 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7975 005e 044A     		ldr	r2, .L523+4
 7976 0060 D154     		strb	r1, [r2, r3]
 7977              	.L522:
 7978              		.loc 1 2427 0
 7979 0062 00BF     		nop
 7980 0064 1437     		adds	r7, r7, #20
 7981              		.cfi_def_cfa_offset 4
 7982 0066 BD46     		mov	sp, r7
 7983              		.cfi_def_cfa_register 13
 7984              		@ sp needed
 7985 0068 80BC     		pop	{r7}
 7986              		.cfi_restore 7
 7987              		.cfi_def_cfa_offset 0
 7988 006a 7047     		bx	lr
 7989              	.L524:
 7990              		.align	2
 7991              	.L523:
 7992 006c 00000000 		.word	dev_tension
 7993 0070 00000000 		.word	dev_pwm_sat
 7994 0074 00000000 		.word	pwm_preload_values
 7995              		.cfi_endproc
 7996              	.LFE75:
 7997              		.size	pwm_limit_search, .-pwm_limit_search
 7998              		.section	.text.cycles_counter_update,"ax",%progbits
 7999              		.align	2
 8000              		.global	cycles_counter_update
 8001              		.thumb
 8002              		.thumb_func
 8003              		.type	cycles_counter_update, %function
 8004              	cycles_counter_update:
 8005              	.LFB76:
2428:..\src/interruptions.c **** 
2429:..\src/interruptions.c **** //==============================================================================
2430:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2431:..\src/interruptions.c **** //==============================================================================
2432:..\src/interruptions.c **** 
2433:..\src/interruptions.c **** void cycles_counter_update() {
 8006              		.loc 1 2433 0
 8007              		.cfi_startproc
 8008              		@ args = 0, pretend = 0, frame = 24
 8009              		@ frame_needed = 1, uses_anonymous_args = 0
 8010 0000 80B5     		push	{r7, lr}
 8011              		.cfi_def_cfa_offset 8
 8012              		.cfi_offset 7, -8
 8013              		.cfi_offset 14, -4
 8014 0002 86B0     		sub	sp, sp, #24
 8015              		.cfi_def_cfa_offset 32
 8016 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 187


 8017              		.cfi_def_cfa_register 7
2434:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2435:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2436:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2437:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2438:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2439:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2440:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2441:..\src/interruptions.c ****     int32 step;
2442:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2443:..\src/interruptions.c **** 
2444:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8018              		.loc 1 2444 0
 8019 0006 AB4B     		ldr	r3, .L571
 8020 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8021 000c 1946     		mov	r1, r3
 8022 000e AA4A     		ldr	r2, .L571+4
 8023 0010 3423     		movs	r3, #52
 8024 0012 03FB01F3 		mul	r3, r3, r1
 8025 0016 1344     		add	r3, r3, r2
 8026 0018 1A68     		ldr	r2, [r3]
 8027 001a A64B     		ldr	r3, .L571
 8028 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8029 0020 1846     		mov	r0, r3
 8030 0022 A449     		ldr	r1, .L571
 8031 0024 0346     		mov	r3, r0
 8032 0026 5B00     		lsls	r3, r3, #1
 8033 0028 0344     		add	r3, r3, r0
 8034 002a 1B01     		lsls	r3, r3, #4
 8035 002c 0B44     		add	r3, r3, r1
 8036 002e 03F29513 		addw	r3, r3, #405
 8037 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8038 0034 42FA03F3 		asr	r3, r2, r3
 8039 0038 FB60     		str	r3, [r7, #12]
2445:..\src/interruptions.c ****     
2446:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2447:..\src/interruptions.c ****     switch (pos_cycle_status){
 8040              		.loc 1 2447 0
 8041 003a A04B     		ldr	r3, .L571+8
 8042 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8043 003e 012B     		cmp	r3, #1
 8044 0040 3AD0     		beq	.L527
 8045 0042 022B     		cmp	r3, #2
 8046 0044 6ED0     		beq	.L528
 8047 0046 002B     		cmp	r3, #0
 8048 0048 40F01881 		bne	.L526
2448:..\src/interruptions.c ****         case STATE_INACTIVE:
2449:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 8049              		.loc 1 2449 0
 8050 004c 994B     		ldr	r3, .L571
 8051 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8052 0052 072B     		cmp	r3, #7
 8053 0054 04D0     		beq	.L530
 8054              		.loc 1 2449 0 is_stmt 0 discriminator 1
 8055 0056 9A4B     		ldr	r3, .L571+12
 8056 0058 93F90030 		ldrsb	r3, [r3]
 8057 005c 012B     		cmp	r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 188


 8058 005e 0CD0     		beq	.L531
 8059              	.L530:
 8060              		.loc 1 2449 0 discriminator 3
 8061 0060 944B     		ldr	r3, .L571
 8062 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8063 0066 072B     		cmp	r3, #7
 8064 0068 40F00581 		bne	.L565
 8065              		.loc 1 2449 0 discriminator 4
 8066 006c 944B     		ldr	r3, .L571+12
 8067 006e 93F90030 		ldrsb	r3, [r3]
 8068 0072 B3F1FF3F 		cmp	r3, #-1
 8069 0076 40F0FE80 		bne	.L565
 8070              	.L531:
2450:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 8071              		.loc 1 2450 0 is_stmt 1
 8072 007a 924A     		ldr	r2, .L571+16
 8073 007c FB68     		ldr	r3, [r7, #12]
 8074 007e 1360     		str	r3, [r2]
2451:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8075              		.loc 1 2451 0
 8076 0080 914B     		ldr	r3, .L571+20
 8077 0082 1A68     		ldr	r2, [r3]
 8078 0084 8F4B     		ldr	r3, .L571+16
 8079 0086 1B68     		ldr	r3, [r3]
 8080 0088 9A42     		cmp	r2, r3
 8081 008a 05DD     		ble	.L533
 8082              		.loc 1 2451 0 is_stmt 0 discriminator 1
 8083 008c 8E4B     		ldr	r3, .L571+20
 8084 008e 1A68     		ldr	r2, [r3]
 8085 0090 8C4B     		ldr	r3, .L571+16
 8086 0092 1B68     		ldr	r3, [r3]
 8087 0094 D31A     		subs	r3, r2, r3
 8088 0096 04E0     		b	.L534
 8089              	.L533:
 8090              		.loc 1 2451 0 discriminator 2
 8091 0098 8A4B     		ldr	r3, .L571+16
 8092 009a 1A68     		ldr	r2, [r3]
 8093 009c 8A4B     		ldr	r3, .L571+20
 8094 009e 1B68     		ldr	r3, [r3]
 8095 00a0 D31A     		subs	r3, r2, r3
 8096              	.L534:
 8097              		.loc 1 2451 0 discriminator 4
 8098 00a2 BB60     		str	r3, [r7, #8]
2452:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 8099              		.loc 1 2452 0 is_stmt 1 discriminator 4
 8100 00a4 834B     		ldr	r3, .L571
 8101 00a6 5A6D     		ldr	r2, [r3, #84]
 8102 00a8 BB68     		ldr	r3, [r7, #8]
 8103 00aa 1344     		add	r3, r3, r2
 8104 00ac 814A     		ldr	r2, .L571
 8105 00ae 5365     		str	r3, [r2, #84]
2453:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 8106              		.loc 1 2453 0 discriminator 4
 8107 00b0 824B     		ldr	r3, .L571+8
 8108 00b2 0122     		movs	r2, #1
 8109 00b4 1A70     		strb	r2, [r3]
2454:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 189


2455:..\src/interruptions.c ****             break;
 8110              		.loc 1 2455 0 discriminator 4
 8111 00b6 DEE0     		b	.L565
 8112              	.L527:
2456:..\src/interruptions.c ****         case STATE_ACTIVE:
2457:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 8113              		.loc 1 2457 0
 8114 00b8 7E4B     		ldr	r3, .L571
 8115 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8116 00be 072B     		cmp	r3, #7
 8117 00c0 05D0     		beq	.L535
 8118              		.loc 1 2457 0 is_stmt 0 discriminator 1
 8119 00c2 7F4B     		ldr	r3, .L571+12
 8120 00c4 93F90030 		ldrsb	r3, [r3]
 8121 00c8 B3F1FF3F 		cmp	r3, #-1
 8122 00cc 0BD0     		beq	.L536
 8123              	.L535:
 8124              		.loc 1 2457 0 discriminator 3
 8125 00ce 794B     		ldr	r3, .L571
 8126 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8127 00d4 072B     		cmp	r3, #7
 8128 00d6 40F0D080 		bne	.L566
 8129              		.loc 1 2457 0 discriminator 4
 8130 00da 794B     		ldr	r3, .L571+12
 8131 00dc 93F90030 		ldrsb	r3, [r3]
 8132 00e0 012B     		cmp	r3, #1
 8133 00e2 40F0CA80 		bne	.L566
 8134              	.L536:
2458:..\src/interruptions.c ****                 max_pos = curr_pos;
 8135              		.loc 1 2458 0 is_stmt 1
 8136 00e6 784A     		ldr	r2, .L571+20
 8137 00e8 FB68     		ldr	r3, [r7, #12]
 8138 00ea 1360     		str	r3, [r2]
2459:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8139              		.loc 1 2459 0
 8140 00ec 764B     		ldr	r3, .L571+20
 8141 00ee 1A68     		ldr	r2, [r3]
 8142 00f0 744B     		ldr	r3, .L571+16
 8143 00f2 1B68     		ldr	r3, [r3]
 8144 00f4 9A42     		cmp	r2, r3
 8145 00f6 05DD     		ble	.L538
 8146              		.loc 1 2459 0 is_stmt 0 discriminator 1
 8147 00f8 734B     		ldr	r3, .L571+20
 8148 00fa 1A68     		ldr	r2, [r3]
 8149 00fc 714B     		ldr	r3, .L571+16
 8150 00fe 1B68     		ldr	r3, [r3]
 8151 0100 D31A     		subs	r3, r2, r3
 8152 0102 04E0     		b	.L539
 8153              	.L538:
 8154              		.loc 1 2459 0 discriminator 2
 8155 0104 6F4B     		ldr	r3, .L571+16
 8156 0106 1A68     		ldr	r2, [r3]
 8157 0108 6F4B     		ldr	r3, .L571+20
 8158 010a 1B68     		ldr	r3, [r3]
 8159 010c D31A     		subs	r3, r2, r3
 8160              	.L539:
 8161              		.loc 1 2459 0 discriminator 4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 190


 8162 010e BB60     		str	r3, [r7, #8]
2460:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 8163              		.loc 1 2460 0 is_stmt 1 discriminator 4
 8164 0110 684B     		ldr	r3, .L571
 8165 0112 5A6D     		ldr	r2, [r3, #84]
 8166 0114 BB68     		ldr	r3, [r7, #8]
 8167 0116 1344     		add	r3, r3, r2
 8168 0118 664A     		ldr	r2, .L571
 8169 011a 5365     		str	r3, [r2, #84]
2461:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 8170              		.loc 1 2461 0 discriminator 4
 8171 011c 674B     		ldr	r3, .L571+8
 8172 011e 0222     		movs	r2, #2
 8173 0120 1A70     		strb	r2, [r3]
2462:..\src/interruptions.c ****             }
2463:..\src/interruptions.c ****             break;
 8174              		.loc 1 2463 0 discriminator 4
 8175 0122 AAE0     		b	.L566
 8176              	.L528:
2464:..\src/interruptions.c ****         case COUNTER_INC:
2465:..\src/interruptions.c **** 
2466:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8177              		.loc 1 2466 0
 8178 0124 684B     		ldr	r3, .L571+20
 8179 0126 1A68     		ldr	r2, [r3]
 8180 0128 664B     		ldr	r3, .L571+16
 8181 012a 1B68     		ldr	r3, [r3]
 8182 012c 9A42     		cmp	r2, r3
 8183 012e 05DD     		ble	.L540
 8184              		.loc 1 2466 0 is_stmt 0 discriminator 1
 8185 0130 654B     		ldr	r3, .L571+20
 8186 0132 1A68     		ldr	r2, [r3]
 8187 0134 634B     		ldr	r3, .L571+16
 8188 0136 1B68     		ldr	r3, [r3]
 8189 0138 D31A     		subs	r3, r2, r3
 8190 013a 04E0     		b	.L541
 8191              	.L540:
 8192              		.loc 1 2466 0 discriminator 2
 8193 013c 614B     		ldr	r3, .L571+16
 8194 013e 1A68     		ldr	r2, [r3]
 8195 0140 614B     		ldr	r3, .L571+20
 8196 0142 1B68     		ldr	r3, [r3]
 8197 0144 D31A     		subs	r3, r2, r3
 8198              	.L541:
 8199              		.loc 1 2466 0 discriminator 4
 8200 0146 BB60     		str	r3, [r7, #8]
2467:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 8201              		.loc 1 2467 0 is_stmt 1 discriminator 4
 8202 0148 604B     		ldr	r3, .L571+24
 8203 014a 1B68     		ldr	r3, [r3]
 8204 014c BA68     		ldr	r2, [r7, #8]
 8205 014e 9A42     		cmp	r2, r3
 8206 0150 40F38D80 		ble	.L542
2468:..\src/interruptions.c ****                 //update position histogram
2469:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 8207              		.loc 1 2469 0
 8208 0154 574B     		ldr	r3, .L571
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 191


 8209 0156 D3F8E820 		ldr	r2, [r3, #232]
 8210 015a 564B     		ldr	r3, .L571
 8211 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8212 0160 1846     		mov	r0, r3
 8213 0162 5449     		ldr	r1, .L571
 8214 0164 0346     		mov	r3, r0
 8215 0166 5B00     		lsls	r3, r3, #1
 8216 0168 0344     		add	r3, r3, r0
 8217 016a 1B01     		lsls	r3, r3, #4
 8218 016c 0B44     		add	r3, r3, r1
 8219 016e 03F29513 		addw	r3, r3, #405
 8220 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8221 0174 42FA03F3 		asr	r3, r2, r3
 8222 0178 554A     		ldr	r2, .L571+28
 8223 017a 82FB0312 		smull	r1, r2, r2, r3
 8224 017e 9210     		asrs	r2, r2, #2
 8225 0180 DB17     		asrs	r3, r3, #31
 8226 0182 D31A     		subs	r3, r2, r3
 8227 0184 7B60     		str	r3, [r7, #4]
2470:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 8228              		.loc 1 2470 0
 8229 0186 4F4B     		ldr	r3, .L571+16
 8230 0188 1A68     		ldr	r2, [r3]
 8231 018a 7B68     		ldr	r3, [r7, #4]
 8232 018c 92FBF3F3 		sdiv	r3, r2, r3
 8233 0190 FB70     		strb	r3, [r7, #3]
2471:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 8234              		.loc 1 2471 0
 8235 0192 4D4B     		ldr	r3, .L571+20
 8236 0194 1A68     		ldr	r2, [r3]
 8237 0196 7B68     		ldr	r3, [r7, #4]
 8238 0198 92FBF3F3 		sdiv	r3, r2, r3
 8239 019c BB70     		strb	r3, [r7, #2]
2472:..\src/interruptions.c ****                 
2473:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2474:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 8240              		.loc 1 2474 0
 8241 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 8242 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 8243 01a2 9342     		cmp	r3, r2
 8244 01a4 28BF     		it	cs
 8245 01a6 1346     		movcs	r3, r2
 8246 01a8 7B70     		strb	r3, [r7, #1]
2475:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 8247              		.loc 1 2475 0
 8248 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 8249 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 8250 01ae 9342     		cmp	r3, r2
 8251 01b0 38BF     		it	cc
 8252 01b2 1346     		movcc	r3, r2
 8253 01b4 3B70     		strb	r3, [r7]
2476:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8254              		.loc 1 2476 0
 8255 01b6 7B78     		ldrb	r3, [r7, #1]
 8256 01b8 FB75     		strb	r3, [r7, #23]
 8257 01ba 0DE0     		b	.L543
 8258              	.L544:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 192


2477:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2478:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 8259              		.loc 1 2478 0 discriminator 3
 8260 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8261 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8262 01c0 3C49     		ldr	r1, .L571
 8263 01c2 0632     		adds	r2, r2, #6
 8264 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8265 01c8 0132     		adds	r2, r2, #1
 8266 01ca 3A49     		ldr	r1, .L571
 8267 01cc 0633     		adds	r3, r3, #6
 8268 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2476:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8269              		.loc 1 2476 0 discriminator 3
 8270 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8271 01d4 0133     		adds	r3, r3, #1
 8272 01d6 FB75     		strb	r3, [r7, #23]
 8273              	.L543:
2476:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8274              		.loc 1 2476 0 is_stmt 0 discriminator 1
 8275 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8276 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 8277 01dc 9A42     		cmp	r2, r3
 8278 01de EDD9     		bls	.L544
2479:..\src/interruptions.c ****                 }
2480:..\src/interruptions.c ****                 
2481:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2482:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 8279              		.loc 1 2482 0 is_stmt 1
 8280 01e0 344B     		ldr	r3, .L571
 8281 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 8282 01e6 002B     		cmp	r3, #0
 8283 01e8 00DA     		bge	.L545
 8284 01ea 0333     		adds	r3, r3, #3
 8285              	.L545:
 8286 01ec 9B10     		asrs	r3, r3, #2
 8287 01ee 1BB2     		sxth	r3, r3
 8288 01f0 7B60     		str	r3, [r7, #4]
2483:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 8289              		.loc 1 2483 0
 8290 01f2 304B     		ldr	r3, .L571
 8291 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 8292 01f8 012B     		cmp	r3, #1
 8293 01fa 0CD1     		bne	.L546
2484:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 8294              		.loc 1 2484 0
 8295 01fc 2D4B     		ldr	r3, .L571
 8296 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8297 0202 1946     		mov	r1, r3
 8298 0204 2C4A     		ldr	r2, .L571+4
 8299 0206 3423     		movs	r3, #52
 8300 0208 03FB01F3 		mul	r3, r3, r1
 8301 020c 1344     		add	r3, r3, r2
 8302 020e 1433     		adds	r3, r3, #20
 8303 0210 1B68     		ldr	r3, [r3]
 8304 0212 3B61     		str	r3, [r7, #16]
 8305 0214 0BE0     		b	.L547
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 193


 8306              	.L546:
2485:..\src/interruptions.c ****                 else
2486:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 8307              		.loc 1 2486 0
 8308 0216 274B     		ldr	r3, .L571
 8309 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8310 021c 1946     		mov	r1, r3
 8311 021e 264A     		ldr	r2, .L571+4
 8312 0220 3423     		movs	r3, #52
 8313 0222 03FB01F3 		mul	r3, r3, r1
 8314 0226 1344     		add	r3, r3, r2
 8315 0228 0C33     		adds	r3, r3, #12
 8316 022a 1B68     		ldr	r3, [r3]
 8317 022c 3B61     		str	r3, [r7, #16]
 8318              	.L547:
2487:..\src/interruptions.c ****                     
2488:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 8319              		.loc 1 2488 0
 8320 022e 214B     		ldr	r3, .L571
 8321 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 8322 0234 1A46     		mov	r2, r3
 8323 0236 3B69     		ldr	r3, [r7, #16]
 8324 0238 9A42     		cmp	r2, r3
 8325 023a 05DA     		bge	.L548
2489:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 8326              		.loc 1 2489 0
 8327 023c 1D4B     		ldr	r3, .L571
 8328 023e DB6C     		ldr	r3, [r3, #76]
 8329 0240 0133     		adds	r3, r3, #1
 8330 0242 1C4A     		ldr	r2, .L571
 8331 0244 D364     		str	r3, [r2, #76]
 8332 0246 12E0     		b	.L542
 8333              	.L548:
2490:..\src/interruptions.c ****                 else
2491:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 8334              		.loc 1 2491 0
 8335 0248 3A69     		ldr	r2, [r7, #16]
 8336 024a 7B68     		ldr	r3, [r7, #4]
 8337 024c 92FBF3F3 		sdiv	r3, r2, r3
 8338 0250 DBB2     		uxtb	r3, r3
 8339 0252 3969     		ldr	r1, [r7, #16]
 8340 0254 7A68     		ldr	r2, [r7, #4]
 8341 0256 91FBF2F2 		sdiv	r2, r1, r2
 8342 025a D2B2     		uxtb	r2, r2
 8343 025c 1549     		ldr	r1, .L571
 8344 025e 1032     		adds	r2, r2, #16
 8345 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8346 0264 0132     		adds	r2, r2, #1
 8347 0266 1349     		ldr	r1, .L571
 8348 0268 1033     		adds	r3, r3, #16
 8349 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 8350              	.L542:
2492:..\src/interruptions.c ****             }
2493:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 8351              		.loc 1 2493 0
 8352 026e 134B     		ldr	r3, .L571+8
 8353 0270 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 194


 8354 0272 1A70     		strb	r2, [r3]
2494:..\src/interruptions.c ****             break;
 8355              		.loc 1 2494 0
 8356 0274 02E0     		b	.L526
 8357              	.L565:
2455:..\src/interruptions.c ****         case STATE_ACTIVE:
 8358              		.loc 1 2455 0
 8359 0276 00BF     		nop
 8360 0278 00E0     		b	.L526
 8361              	.L566:
2463:..\src/interruptions.c ****         case COUNTER_INC:
 8362              		.loc 1 2463 0
 8363 027a 00BF     		nop
 8364              	.L526:
2495:..\src/interruptions.c ****     }
2496:..\src/interruptions.c ****     
2497:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2498:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 8365              		.loc 1 2498 0
 8366 027c 0023     		movs	r3, #0
 8367 027e FB75     		strb	r3, [r7, #23]
 8368 0280 53E0     		b	.L549
 8369              	.L557:
2499:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8370              		.loc 1 2499 0
 8371 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8372 0284 134A     		ldr	r2, .L571+32
 8373 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8374 0288 012B     		cmp	r3, #1
 8375 028a 27D0     		beq	.L551
 8376 028c 022B     		cmp	r3, #2
 8377 028e 36D0     		beq	.L552
 8378 0290 002B     		cmp	r3, #0
 8379 0292 47D1     		bne	.L550
2500:..\src/interruptions.c ****             case STATE_INACTIVE:
2501:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 8380              		.loc 1 2501 0
 8381 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8382 0296 104A     		ldr	r2, .L571+36
 8383 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 8384 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8385 029e 0549     		ldr	r1, .L571
 8386 02a0 F832     		adds	r2, r2, #248
 8387 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 8388 02a6 9342     		cmp	r3, r2
 8389 02a8 39DD     		ble	.L567
2502:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 8390              		.loc 1 2502 0
 8391 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8392 02ac 094A     		ldr	r2, .L571+32
 8393 02ae 0121     		movs	r1, #1
 8394 02b0 D154     		strb	r1, [r2, r3]
2503:..\src/interruptions.c ****                 }
2504:..\src/interruptions.c ****                 break;
 8395              		.loc 1 2504 0
 8396 02b2 34E0     		b	.L567
 8397              	.L572:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 195


 8398              		.align	2
 8399              	.L571:
 8400 02b4 00000000 		.word	g_mem
 8401 02b8 00000000 		.word	g_meas
 8402 02bc 8E010000 		.word	pos_cycle_status.10669
 8403 02c0 00000000 		.word	pwm_sign
 8404 02c4 90010000 		.word	thr_pos.10673
 8405 02c8 94010000 		.word	max_pos.10674
 8406 02cc 08000000 		.word	bin_threshold.10672
 8407 02d0 67666666 		.word	1717986919
 8408 02d4 98010000 		.word	emg_cycle_status.10670
 8409 02d8 00000000 		.word	g_adc_meas
 8410              	.L551:
2505:..\src/interruptions.c ****             case STATE_ACTIVE:
2506:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 8411              		.loc 1 2506 0
 8412 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8413 02de 404A     		ldr	r2, .L573
 8414 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8415 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8416 02e6 3F49     		ldr	r1, .L573+4
 8417 02e8 F833     		adds	r3, r3, #248
 8418 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8419 02ee 0A3B     		subs	r3, r3, #10
 8420 02f0 9A42     		cmp	r2, r3
 8421 02f2 16DA     		bge	.L568
2507:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 8422              		.loc 1 2507 0
 8423 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8424 02f6 3C4A     		ldr	r2, .L573+8
 8425 02f8 0221     		movs	r1, #2
 8426 02fa D154     		strb	r1, [r2, r3]
2508:..\src/interruptions.c ****                 }
2509:..\src/interruptions.c ****                 break;
 8427              		.loc 1 2509 0
 8428 02fc 11E0     		b	.L568
 8429              	.L552:
2510:..\src/interruptions.c ****             case COUNTER_INC:
2511:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 8430              		.loc 1 2511 0
 8431 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8432 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8433 0302 3849     		ldr	r1, .L573+4
 8434 0304 0432     		adds	r2, r2, #4
 8435 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8436 030a 0132     		adds	r2, r2, #1
 8437 030c 3549     		ldr	r1, .L573+4
 8438 030e 0433     		adds	r3, r3, #4
 8439 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2512:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 8440              		.loc 1 2512 0
 8441 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8442 0316 344A     		ldr	r2, .L573+8
 8443 0318 0021     		movs	r1, #0
 8444 031a D154     		strb	r1, [r2, r3]
2513:..\src/interruptions.c ****                 break;
 8445              		.loc 1 2513 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 196


 8446 031c 02E0     		b	.L550
 8447              	.L567:
2504:..\src/interruptions.c ****             case STATE_ACTIVE:
 8448              		.loc 1 2504 0
 8449 031e 00BF     		nop
 8450 0320 00E0     		b	.L550
 8451              	.L568:
2509:..\src/interruptions.c ****             case COUNTER_INC:
 8452              		.loc 1 2509 0
 8453 0322 00BF     		nop
 8454              	.L550:
2498:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8455              		.loc 1 2498 0 discriminator 2
 8456 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8457 0326 0133     		adds	r3, r3, #1
 8458 0328 FB75     		strb	r3, [r7, #23]
 8459              	.L549:
2498:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8460              		.loc 1 2498 0 is_stmt 0 discriminator 1
 8461 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8462 032c 012B     		cmp	r3, #1
 8463 032e 07D8     		bhi	.L556
2498:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8464              		.loc 1 2498 0 discriminator 3
 8465 0330 2E4B     		ldr	r3, .L573+12
 8466 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8467 0334 002B     		cmp	r3, #0
 8468 0336 03D1     		bne	.L556
2498:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8469              		.loc 1 2498 0 discriminator 4
 8470 0338 2D4B     		ldr	r3, .L573+16
 8471 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8472 033c 002B     		cmp	r3, #0
 8473 033e A0D0     		beq	.L557
 8474              	.L556:
2514:..\src/interruptions.c ****         }
2515:..\src/interruptions.c ****     }
2516:..\src/interruptions.c ****     
2517:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2518:..\src/interruptions.c ****     switch (rest_cycle_status){
 8475              		.loc 1 2518 0 is_stmt 1
 8476 0340 2C4B     		ldr	r3, .L573+20
 8477 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8478 0344 012B     		cmp	r3, #1
 8479 0346 11D0     		beq	.L559
 8480 0348 022B     		cmp	r3, #2
 8481 034a 29D0     		beq	.L560
 8482 034c 002B     		cmp	r3, #0
 8483 034e 41D1     		bne	.L558
2519:..\src/interruptions.c ****         case STATE_INACTIVE:
2520:..\src/interruptions.c ****             if (rest_enabled){
 8484              		.loc 1 2520 0
 8485 0350 294B     		ldr	r3, .L573+24
 8486 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8487 0354 002B     		cmp	r3, #0
 8488 0356 3AD0     		beq	.L569
2521:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 197


 8489              		.loc 1 2521 0
 8490 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8491 035c 0346     		mov	r3, r0
 8492 035e 1A46     		mov	r2, r3
 8493 0360 264B     		ldr	r3, .L573+28
 8494 0362 1A60     		str	r2, [r3]
2522:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8495              		.loc 1 2522 0
 8496 0364 234B     		ldr	r3, .L573+20
 8497 0366 0122     		movs	r2, #1
 8498 0368 1A70     		strb	r2, [r3]
2523:..\src/interruptions.c ****             }
2524:..\src/interruptions.c ****             break;
 8499              		.loc 1 2524 0
 8500 036a 30E0     		b	.L569
 8501              	.L559:
2525:..\src/interruptions.c ****         case STATE_ACTIVE:
2526:..\src/interruptions.c ****             if (!rest_enabled){
 8502              		.loc 1 2526 0
 8503 036c 224B     		ldr	r3, .L573+24
 8504 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8505 0370 002B     		cmp	r3, #0
 8506 0372 2ED1     		bne	.L570
2527:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8507              		.loc 1 2527 0
 8508 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8509 0378 0346     		mov	r3, r0
 8510 037a 1A46     		mov	r2, r3
 8511 037c 204B     		ldr	r3, .L573+32
 8512 037e 1A60     		str	r2, [r3]
2528:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8513              		.loc 1 2528 0
 8514 0380 1E4B     		ldr	r3, .L573+28
 8515 0382 1A68     		ldr	r2, [r3]
 8516 0384 1E4B     		ldr	r3, .L573+32
 8517 0386 1B68     		ldr	r3, [r3]
 8518 0388 9A42     		cmp	r2, r3
 8519 038a 05D2     		bcs	.L564
2529:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8520              		.loc 1 2529 0
 8521 038c 1B4B     		ldr	r3, .L573+28
 8522 038e 1B68     		ldr	r3, [r3]
 8523 0390 03F59663 		add	r3, r3, #1200
 8524 0394 194A     		ldr	r2, .L573+28
 8525 0396 1360     		str	r3, [r2]
 8526              	.L564:
2530:..\src/interruptions.c ****                 }
2531:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8527              		.loc 1 2531 0
 8528 0398 164B     		ldr	r3, .L573+20
 8529 039a 0222     		movs	r2, #2
 8530 039c 1A70     		strb	r2, [r3]
2532:..\src/interruptions.c ****             }
2533:..\src/interruptions.c ****             break;
 8531              		.loc 1 2533 0
 8532 039e 18E0     		b	.L570
 8533              	.L560:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 198


2534:..\src/interruptions.c ****         case COUNTER_INC: 
2535:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8534              		.loc 1 2535 0
 8535 03a0 104B     		ldr	r3, .L573+4
 8536 03a2 DA6D     		ldr	r2, [r3, #92]
 8537 03a4 154B     		ldr	r3, .L573+28
 8538 03a6 1968     		ldr	r1, [r3]
 8539 03a8 154B     		ldr	r3, .L573+32
 8540 03aa 1B68     		ldr	r3, [r3]
 8541 03ac CB1A     		subs	r3, r1, r3
 8542 03ae 1549     		ldr	r1, .L573+36
 8543 03b0 A1FB0313 		umull	r1, r3, r1, r3
 8544 03b4 DB08     		lsrs	r3, r3, #3
 8545 03b6 1344     		add	r3, r3, r2
 8546 03b8 0A4A     		ldr	r2, .L573+4
 8547 03ba D365     		str	r3, [r2, #92]
2536:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8548              		.loc 1 2536 0
 8549 03bc 094B     		ldr	r3, .L573+4
 8550 03be 1B6D     		ldr	r3, [r3, #80]
 8551 03c0 0133     		adds	r3, r3, #1
 8552 03c2 084A     		ldr	r2, .L573+4
 8553 03c4 1365     		str	r3, [r2, #80]
2537:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8554              		.loc 1 2537 0
 8555 03c6 0B4B     		ldr	r3, .L573+20
 8556 03c8 0022     		movs	r2, #0
 8557 03ca 1A70     		strb	r2, [r3]
2538:..\src/interruptions.c ****             break;
 8558              		.loc 1 2538 0
 8559 03cc 02E0     		b	.L558
 8560              	.L569:
2524:..\src/interruptions.c ****         case STATE_ACTIVE:
 8561              		.loc 1 2524 0
 8562 03ce 00BF     		nop
 8563 03d0 00E0     		b	.L558
 8564              	.L570:
2533:..\src/interruptions.c ****         case COUNTER_INC: 
 8565              		.loc 1 2533 0
 8566 03d2 00BF     		nop
 8567              	.L558:
2539:..\src/interruptions.c ****     }
2540:..\src/interruptions.c ****           
2541:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2542:..\src/interruptions.c ****     save_cycles_eeprom();
 8568              		.loc 1 2542 0
 8569 03d4 FFF7FEFF 		bl	save_cycles_eeprom
2543:..\src/interruptions.c ****     
2544:..\src/interruptions.c **** }
 8570              		.loc 1 2544 0
 8571 03d8 00BF     		nop
 8572 03da 1837     		adds	r7, r7, #24
 8573              		.cfi_def_cfa_offset 8
 8574 03dc BD46     		mov	sp, r7
 8575              		.cfi_def_cfa_register 13
 8576              		@ sp needed
 8577 03de 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 199


 8578              	.L574:
 8579              		.align	2
 8580              	.L573:
 8581 03e0 00000000 		.word	g_adc_meas
 8582 03e4 00000000 		.word	g_mem
 8583 03e8 98010000 		.word	emg_cycle_status.10670
 8584 03ec 00000000 		.word	emg_1_status
 8585 03f0 00000000 		.word	emg_2_status
 8586 03f4 9A010000 		.word	rest_cycle_status.10671
 8587 03f8 00000000 		.word	rest_enabled
 8588 03fc 9C010000 		.word	timer_value_s.10684
 8589 0400 A0010000 		.word	timer_value_e.10685
 8590 0404 CDCCCCCC 		.word	-858993459
 8591              		.cfi_endproc
 8592              	.LFE76:
 8593              		.size	cycles_counter_update, .-cycles_counter_update
 8594              		.section	.text.save_cycles_eeprom,"ax",%progbits
 8595              		.align	2
 8596              		.global	save_cycles_eeprom
 8597              		.thumb
 8598              		.thumb_func
 8599              		.type	save_cycles_eeprom, %function
 8600              	save_cycles_eeprom:
 8601              	.LFB77:
2545:..\src/interruptions.c **** 
2546:..\src/interruptions.c **** //==============================================================================
2547:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2548:..\src/interruptions.c **** //==============================================================================
2549:..\src/interruptions.c **** 
2550:..\src/interruptions.c **** void save_cycles_eeprom() {
 8602              		.loc 1 2550 0
 8603              		.cfi_startproc
 8604              		@ args = 0, pretend = 0, frame = 24
 8605              		@ frame_needed = 1, uses_anonymous_args = 0
 8606 0000 80B5     		push	{r7, lr}
 8607              		.cfi_def_cfa_offset 8
 8608              		.cfi_offset 7, -8
 8609              		.cfi_offset 14, -4
 8610 0002 86B0     		sub	sp, sp, #24
 8611              		.cfi_def_cfa_offset 32
 8612 0004 00AF     		add	r7, sp, #0
 8613              		.cfi_def_cfa_register 7
2551:..\src/interruptions.c **** 
2552:..\src/interruptions.c ****     cystatus status;
2553:..\src/interruptions.c ****     static uint8 row_number;
2554:..\src/interruptions.c ****     uint8 row_start = 1;
 8614              		.loc 1 2554 0
 8615 0006 0123     		movs	r3, #1
 8616 0008 FB75     		strb	r3, [r7, #23]
2555:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
 8617              		.loc 1 2555 0
 8618 000a 394B     		ldr	r3, .L591
 8619 000c 3B61     		str	r3, [r7, #16]
2556:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 8620              		.loc 1 2556 0
 8621 000e 394B     		ldr	r3, .L591+4
 8622 0010 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 200


2557:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 8623              		.loc 1 2557 0
 8624 0012 FB7D     		ldrb	r3, [r7, #23]
 8625 0014 0433     		adds	r3, r3, #4
 8626 0016 FB72     		strb	r3, [r7, #11]
2558:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2559:..\src/interruptions.c **** 
2560:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2561:..\src/interruptions.c ****     switch(cycles_status) {
 8627              		.loc 1 2561 0
 8628 0018 374B     		ldr	r3, .L591+8
 8629 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8630 001c 042B     		cmp	r3, #4
 8631 001e 63D8     		bhi	.L587
 8632 0020 01A2     		adr	r2, .L578
 8633 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8634 0026 00BF     		.p2align 2
 8635              	.L578:
 8636 0028 3D000000 		.word	.L577+1
 8637 002c 5B000000 		.word	.L579+1
 8638 0030 8B000000 		.word	.L580+1
 8639 0034 C7000000 		.word	.L581+1
 8640 0038 DF000000 		.word	.L588+1
 8641              		.p2align 1
 8642              	.L577:
2562:..\src/interruptions.c ****         case PREPARE_DATA:
2563:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2564:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 8643              		.loc 1 2564 0
 8644 003c 5022     		movs	r2, #80
 8645 003e 3969     		ldr	r1, [r7, #16]
 8646 0040 F868     		ldr	r0, [r7, #12]
 8647 0042 FFF7FEFF 		bl	memcpy
2565:..\src/interruptions.c ****             m_addr = addr_start;
 8648              		.loc 1 2565 0
 8649 0046 2D4A     		ldr	r2, .L591+12
 8650 0048 3B69     		ldr	r3, [r7, #16]
 8651 004a 1360     		str	r3, [r2]
2566:..\src/interruptions.c ****             row_number = row_start;
 8652              		.loc 1 2566 0
 8653 004c 2C4A     		ldr	r2, .L591+16
 8654 004e FB7D     		ldrb	r3, [r7, #23]
 8655 0050 1370     		strb	r3, [r2]
2567:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 8656              		.loc 1 2567 0
 8657 0052 294B     		ldr	r3, .L591+8
 8658 0054 0122     		movs	r2, #1
 8659 0056 1A70     		strb	r2, [r3]
2568:..\src/interruptions.c ****             break;
 8660              		.loc 1 2568 0
 8661 0058 46E0     		b	.L576
 8662              	.L579:
2569:..\src/interruptions.c ****             
2570:..\src/interruptions.c ****         case WRITE_CYCLES:
2571:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 8663              		.loc 1 2571 0
 8664 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 201


2572:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 8665              		.loc 1 2572 0
 8666 005e 274B     		ldr	r3, .L591+12
 8667 0060 1A68     		ldr	r2, [r3]
 8668 0062 274B     		ldr	r3, .L591+16
 8669 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8670 0066 1946     		mov	r1, r3
 8671 0068 1046     		mov	r0, r2
 8672 006a FFF7FEFF 		bl	EEPROM_StartWrite
 8673 006e 7860     		str	r0, [r7, #4]
2573:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 8674              		.loc 1 2573 0
 8675 0070 7B68     		ldr	r3, [r7, #4]
 8676 0072 072B     		cmp	r3, #7
 8677 0074 02D0     		beq	.L583
 8678              		.loc 1 2573 0 is_stmt 0 discriminator 1
 8679 0076 7B68     		ldr	r3, [r7, #4]
 8680 0078 002B     		cmp	r3, #0
 8681 007a 32D1     		bne	.L589
 8682              	.L583:
2574:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 8683              		.loc 1 2574 0 is_stmt 1
 8684 007c 1E4B     		ldr	r3, .L591+8
 8685 007e 0222     		movs	r2, #2
 8686 0080 1A70     		strb	r2, [r3]
2575:..\src/interruptions.c ****                 can_write = FALSE;
 8687              		.loc 1 2575 0
 8688 0082 204B     		ldr	r3, .L591+20
 8689 0084 0022     		movs	r2, #0
 8690 0086 1A70     		strb	r2, [r3]
2576:..\src/interruptions.c ****             }
2577:..\src/interruptions.c ****             break;
 8691              		.loc 1 2577 0
 8692 0088 2BE0     		b	.L589
 8693              	.L580:
2578:..\src/interruptions.c ****             
2579:..\src/interruptions.c ****         case WAIT_QUERY:
2580:..\src/interruptions.c ****             status = EEPROM_Query();
 8694              		.loc 1 2580 0
 8695 008a FFF7FEFF 		bl	EEPROM_Query
 8696 008e 7860     		str	r0, [r7, #4]
2581:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 8697              		.loc 1 2581 0
 8698 0090 7B68     		ldr	r3, [r7, #4]
 8699 0092 002B     		cmp	r3, #0
 8700 0094 27D1     		bne	.L590
2582:..\src/interruptions.c ****                 if (row_number < row_end) {
 8701              		.loc 1 2582 0
 8702 0096 1A4B     		ldr	r3, .L591+16
 8703 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8704 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8705 009c 9A42     		cmp	r2, r3
 8706 009e 0ED9     		bls	.L586
2583:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 8707              		.loc 1 2583 0
 8708 00a0 164B     		ldr	r3, .L591+12
 8709 00a2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 202


 8710 00a4 1033     		adds	r3, r3, #16
 8711 00a6 154A     		ldr	r2, .L591+12
 8712 00a8 1360     		str	r3, [r2]
2584:..\src/interruptions.c ****                     row_number = row_number + 1;
 8713              		.loc 1 2584 0
 8714 00aa 154B     		ldr	r3, .L591+16
 8715 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8716 00ae 0133     		adds	r3, r3, #1
 8717 00b0 DAB2     		uxtb	r2, r3
 8718 00b2 134B     		ldr	r3, .L591+16
 8719 00b4 1A70     		strb	r2, [r3]
2585:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 8720              		.loc 1 2585 0
 8721 00b6 104B     		ldr	r3, .L591+8
 8722 00b8 0122     		movs	r2, #1
 8723 00ba 1A70     		strb	r2, [r3]
2586:..\src/interruptions.c ****                 }
2587:..\src/interruptions.c ****                 else {
2588:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2589:..\src/interruptions.c ****                 }
2590:..\src/interruptions.c ****             }
2591:..\src/interruptions.c ****             break;
 8724              		.loc 1 2591 0
 8725 00bc 13E0     		b	.L590
 8726              	.L586:
2588:..\src/interruptions.c ****                 }
 8727              		.loc 1 2588 0
 8728 00be 0E4B     		ldr	r3, .L591+8
 8729 00c0 0322     		movs	r2, #3
 8730 00c2 1A70     		strb	r2, [r3]
 8731              		.loc 1 2591 0
 8732 00c4 0FE0     		b	.L590
 8733              	.L581:
2592:..\src/interruptions.c ****            
2593:..\src/interruptions.c ****         case WRITE_END:
2594:..\src/interruptions.c ****             can_write = TRUE;            
 8734              		.loc 1 2594 0
 8735 00c6 0F4B     		ldr	r3, .L591+20
 8736 00c8 0122     		movs	r2, #1
 8737 00ca 1A70     		strb	r2, [r3]
2595:..\src/interruptions.c ****             cycles_status = NONE;
 8738              		.loc 1 2595 0
 8739 00cc 0A4B     		ldr	r3, .L591+8
 8740 00ce 0422     		movs	r2, #4
 8741 00d0 1A70     		strb	r2, [r3]
2596:..\src/interruptions.c ****             
2597:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2598:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 8742              		.loc 1 2598 0
 8743 00d2 5022     		movs	r2, #80
 8744 00d4 F968     		ldr	r1, [r7, #12]
 8745 00d6 3869     		ldr	r0, [r7, #16]
 8746 00d8 FFF7FEFF 		bl	memcpy
2599:..\src/interruptions.c ****             break;
 8747              		.loc 1 2599 0
 8748 00dc 04E0     		b	.L576
 8749              	.L588:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 203


2600:..\src/interruptions.c ****             
2601:..\src/interruptions.c ****         case NONE:
2602:..\src/interruptions.c ****             break;
 8750              		.loc 1 2602 0
 8751 00de 00BF     		nop
 8752 00e0 02E0     		b	.L587
 8753              	.L589:
2577:..\src/interruptions.c ****             
 8754              		.loc 1 2577 0
 8755 00e2 00BF     		nop
 8756 00e4 00E0     		b	.L587
 8757              	.L590:
2591:..\src/interruptions.c ****            
 8758              		.loc 1 2591 0
 8759 00e6 00BF     		nop
 8760              	.L576:
 8761              	.L587:
2603:..\src/interruptions.c ****     }
2604:..\src/interruptions.c ****     
2605:..\src/interruptions.c **** }
 8762              		.loc 1 2605 0
 8763 00e8 00BF     		nop
 8764 00ea 1837     		adds	r7, r7, #24
 8765              		.cfi_def_cfa_offset 8
 8766 00ec BD46     		mov	sp, r7
 8767              		.cfi_def_cfa_register 13
 8768              		@ sp needed
 8769 00ee 80BD     		pop	{r7, pc}
 8770              	.L592:
 8771              		.align	2
 8772              	.L591:
 8773 00f0 10000000 		.word	g_mem+16
 8774 00f4 10000000 		.word	c_mem+16
 8775 00f8 00000000 		.word	cycles_status
 8776 00fc A4010000 		.word	m_addr.10712
 8777 0100 A8010000 		.word	row_number.10707
 8778 0104 00000000 		.word	can_write
 8779              		.cfi_endproc
 8780              	.LFE77:
 8781              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 8782              		.bss
 8783              	state.10410:
 8784 0000 00       		.space	1
 8785 0001 000000   		.align	2
 8786              	rx_queue.10414:
 8787 0004 000000   		.space	3
 8788              	data_packet_length.10412:
 8789 0007 00       		.space	1
 8790              	data_packet_index.10411:
 8791 0008 00       		.space	1
 8792 0009 000000   		.align	2
 8793              	data_packet_buffer.10413:
 8794 000c 00000000 		.space	128
 8794      00000000 
 8794      00000000 
 8794      00000000 
 8794      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 204


 8795              		.data
 8796              		.align	1
 8797              		.type	counter_calibration.10430, %object
 8798              		.size	counter_calibration.10430, 2
 8799              	counter_calibration.10430:
 8800 0000 0100     		.short	1
 8801              		.align	1
 8802              		.type	counter_tension_func.10431, %object
 8803              		.size	counter_tension_func.10431, 2
 8804              	counter_tension_func.10431:
 8805 0002 0100     		.short	1
 8806              		.bss
 8807              		.align	2
 8808              	current_emg.10454:
 8809 008c 0000     		.space	2
 8810 008e 0000     		.align	2
 8811              	pos_error_sum.10501:
 8812 0090 00000000 		.space	4
 8813              		.align	2
 8814              	prev_pos_err.10503:
 8815 0094 00000000 		.space	4
 8816              	motor_dir.10506:
 8817 0098 00       		.space	1
 8818 0099 000000   		.align	2
 8819              	curr_error_sum.10502:
 8820 009c 00000000 		.space	4
 8821              		.align	2
 8822              	prev_curr_err.10504:
 8823 00a0 00000000 		.space	4
 8824              		.align	2
 8825              	prev_pwm.10505:
 8826 00a4 00000000 		.space	4
 8827              		.align	2
 8828              	position_counter.10507:
 8829 00a8 00000000 		.space	4
 8830              		.align	2
 8831              	pos_error_sum.10534:
 8832 00ac 00000000 		.space	8
 8832      00000000 
 8833              		.align	2
 8834              	prev_pos_err.10536:
 8835 00b4 00000000 		.space	8
 8835      00000000 
 8836              		.align	2
 8837              	motor_dir.10539:
 8838 00bc 0000     		.space	2
 8839 00be 0000     		.align	2
 8840              	curr_error_sum.10535:
 8841 00c0 00000000 		.space	8
 8841      00000000 
 8842              		.align	2
 8843              	prev_curr_err.10537:
 8844 00c8 00000000 		.space	8
 8844      00000000 
 8845              		.align	2
 8846              	prev_pwm.10538:
 8847 00d0 00000000 		.space	8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 205


 8847      00000000 
 8848              		.align	2
 8849              	position_counter.10540:
 8850 00d8 00000000 		.space	8
 8850      00000000 
 8851              		.align	2
 8852              	last_value_encoder.10563:
 8853 00e0 00000000 		.space	24
 8853      00000000 
 8853      00000000 
 8853      00000000 
 8853      00000000 
 8854              		.align	2
 8855              	comp_value_encoder.10564:
 8856 00f8 00000000 		.space	24
 8856      00000000 
 8856      00000000 
 8856      00000000 
 8856      00000000 
 8857              		.data
 8858              		.align	2
 8859              		.type	only_first_time.10566, %object
 8860              		.size	only_first_time.10566, 2
 8861              	only_first_time.10566:
 8862 0004 01       		.byte	1
 8863 0005 01       		.byte	1
 8864              		.bss
 8865              		.align	2
 8866              	error.10565:
 8867 0110 00000000 		.space	6
 8867      0000
 8868 0116 0000     		.align	2
 8869              	v_value.10571:
 8870 0118 00000000 		.space	24
 8870      00000000 
 8870      00000000 
 8870      00000000 
 8870      00000000 
 8871              		.align	2
 8872              	vv_value.10572:
 8873 0130 00000000 		.space	24
 8873      00000000 
 8873      00000000 
 8873      00000000 
 8873      00000000 
 8874              		.align	2
 8875              	vvv_value.10573:
 8876 0148 00000000 		.space	24
 8876      00000000 
 8876      00000000 
 8876      00000000 
 8876      00000000 
 8877              		.align	2
 8878              	pos_reconstruct.10570:
 8879 0160 0000     		.space	2
 8880 0162 0000     		.align	2
 8881              	one_time_execute.10568:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 206


 8882 0164 0000     		.space	2
 8883 0166 0000     		.align	2
 8884              	safe_startup_motor_activation.10567:
 8885 0168 0000     		.space	2
 8886 016a 0000     		.align	2
 8887              	count_startup_motor.10569:
 8888 016c 00000000 		.space	8
 8888      00000000 
 8889              		.data
 8890              		.type	first_tension_valid.10596, %object
 8891              		.size	first_tension_valid.10596, 1
 8892              	first_tension_valid.10596:
 8893 0006 01       		.byte	1
 8894              		.bss
 8895              		.align	1
 8896              	count.10597:
 8897 0174 0000     		.space	2
 8898              	idx.10599:
 8899 0176 00       		.space	1
 8900 0177 00       		.align	2
 8901              	v_count.10598:
 8902 0178 00000000 		.space	4
 8903              		.align	1
 8904              	emg_counter_1.10590:
 8905 017c 0000     		.space	2
 8906              		.align	1
 8907              	emg_counter_2.10591:
 8908 017e 0000     		.space	2
 8909              		.align	2
 8910              	UD_mean_value.10594:
 8911 0180 00000000 		.space	4
 8912              		.align	1
 8913              	UD_counter.10592:
 8914 0184 0000     		.space	2
 8915 0186 0000     		.align	2
 8916              	LR_mean_value.10595:
 8917 0188 00000000 		.space	4
 8918              		.align	1
 8919              	LR_counter.10593:
 8920 018c 0000     		.space	2
 8921              	pos_cycle_status.10669:
 8922 018e 00       		.space	1
 8923 018f 00       		.align	2
 8924              	thr_pos.10673:
 8925 0190 00000000 		.space	4
 8926              		.align	2
 8927              	max_pos.10674:
 8928 0194 00000000 		.space	4
 8929              		.data
 8930 0007 00       		.align	2
 8931              		.type	bin_threshold.10672, %object
 8932              		.size	bin_threshold.10672, 4
 8933              	bin_threshold.10672:
 8934 0008 FA000000 		.word	250
 8935              		.bss
 8936              		.align	2
 8937              	emg_cycle_status.10670:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 207


 8938 0198 0000     		.space	2
 8939              	rest_cycle_status.10671:
 8940 019a 00       		.space	1
 8941 019b 00       		.align	2
 8942              	timer_value_s.10684:
 8943 019c 00000000 		.space	4
 8944              		.align	2
 8945              	timer_value_e.10685:
 8946 01a0 00000000 		.space	4
 8947              		.align	2
 8948              	m_addr.10712:
 8949 01a4 00000000 		.space	4
 8950              	row_number.10707:
 8951 01a8 00       		.space	1
 8952              		.text
 8953              	.Letext0:
 8954              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8955              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8956              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8957              		.file 5 "..\\src\\commands.h"
 8958              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 8959              		.file 7 "..\\src\\globals.h"
 8960              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 8961              		.section	.debug_info,"",%progbits
 8962              	.Ldebug_info0:
 8963 0000 E5190000 		.4byte	0x19e5
 8964 0004 0400     		.2byte	0x4
 8965 0006 00000000 		.4byte	.Ldebug_abbrev0
 8966 000a 04       		.byte	0x4
 8967 000b 01       		.uleb128 0x1
 8968 000c 0F080000 		.4byte	.LASF334
 8969 0010 0C       		.byte	0xc
 8970 0011 35100000 		.4byte	.LASF335
 8971 0015 7C0E0000 		.4byte	.LASF336
 8972 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 8973 001d 00000000 		.4byte	0
 8974 0021 00000000 		.4byte	.Ldebug_line0
 8975 0025 02       		.uleb128 0x2
 8976 0026 01       		.byte	0x1
 8977 0027 06       		.byte	0x6
 8978 0028 86030000 		.4byte	.LASF0
 8979 002c 02       		.uleb128 0x2
 8980 002d 01       		.byte	0x1
 8981 002e 08       		.byte	0x8
 8982 002f 03040000 		.4byte	.LASF1
 8983 0033 02       		.uleb128 0x2
 8984 0034 02       		.byte	0x2
 8985 0035 05       		.byte	0x5
 8986 0036 D50D0000 		.4byte	.LASF2
 8987 003a 02       		.uleb128 0x2
 8988 003b 02       		.byte	0x2
 8989 003c 07       		.byte	0x7
 8990 003d D90F0000 		.4byte	.LASF3
 8991 0041 03       		.uleb128 0x3
 8992 0042 CB100000 		.4byte	.LASF9
 8993 0046 02       		.byte	0x2
 8994 0047 3F       		.byte	0x3f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 208


 8995 0048 4C000000 		.4byte	0x4c
 8996 004c 02       		.uleb128 0x2
 8997 004d 04       		.byte	0x4
 8998 004e 05       		.byte	0x5
 8999 004f 6E020000 		.4byte	.LASF4
 9000 0053 02       		.uleb128 0x2
 9001 0054 04       		.byte	0x4
 9002 0055 07       		.byte	0x7
 9003 0056 16070000 		.4byte	.LASF5
 9004 005a 02       		.uleb128 0x2
 9005 005b 08       		.byte	0x8
 9006 005c 05       		.byte	0x5
 9007 005d D5080000 		.4byte	.LASF6
 9008 0061 02       		.uleb128 0x2
 9009 0062 08       		.byte	0x8
 9010 0063 07       		.byte	0x7
 9011 0064 890B0000 		.4byte	.LASF7
 9012 0068 04       		.uleb128 0x4
 9013 0069 04       		.byte	0x4
 9014 006a 05       		.byte	0x5
 9015 006b 696E7400 		.ascii	"int\000"
 9016 006f 02       		.uleb128 0x2
 9017 0070 04       		.byte	0x4
 9018 0071 07       		.byte	0x7
 9019 0072 BB090000 		.4byte	.LASF8
 9020 0076 03       		.uleb128 0x3
 9021 0077 6E000000 		.4byte	.LASF10
 9022 007b 03       		.byte	0x3
 9023 007c 2C       		.byte	0x2c
 9024 007d 41000000 		.4byte	0x41
 9025 0081 05       		.uleb128 0x5
 9026 0082 AF0D0000 		.4byte	.LASF11
 9027 0086 04       		.byte	0x4
 9028 0087 E401     		.2byte	0x1e4
 9029 0089 2C000000 		.4byte	0x2c
 9030 008d 05       		.uleb128 0x5
 9031 008e 18110000 		.4byte	.LASF12
 9032 0092 04       		.byte	0x4
 9033 0093 E501     		.2byte	0x1e5
 9034 0095 3A000000 		.4byte	0x3a
 9035 0099 05       		.uleb128 0x5
 9036 009a 94000000 		.4byte	.LASF13
 9037 009e 04       		.byte	0x4
 9038 009f E601     		.2byte	0x1e6
 9039 00a1 53000000 		.4byte	0x53
 9040 00a5 05       		.uleb128 0x5
 9041 00a6 78010000 		.4byte	.LASF14
 9042 00aa 04       		.byte	0x4
 9043 00ab E701     		.2byte	0x1e7
 9044 00ad 25000000 		.4byte	0x25
 9045 00b1 05       		.uleb128 0x5
 9046 00b2 D10E0000 		.4byte	.LASF15
 9047 00b6 04       		.byte	0x4
 9048 00b7 E801     		.2byte	0x1e8
 9049 00b9 33000000 		.4byte	0x33
 9050 00bd 05       		.uleb128 0x5
 9051 00be 58100000 		.4byte	.LASF16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 209


 9052 00c2 04       		.byte	0x4
 9053 00c3 E901     		.2byte	0x1e9
 9054 00c5 4C000000 		.4byte	0x4c
 9055 00c9 05       		.uleb128 0x5
 9056 00ca 22030000 		.4byte	.LASF17
 9057 00ce 04       		.byte	0x4
 9058 00cf EA01     		.2byte	0x1ea
 9059 00d1 D5000000 		.4byte	0xd5
 9060 00d5 02       		.uleb128 0x2
 9061 00d6 04       		.byte	0x4
 9062 00d7 04       		.byte	0x4
 9063 00d8 8D090000 		.4byte	.LASF18
 9064 00dc 02       		.uleb128 0x2
 9065 00dd 08       		.byte	0x8
 9066 00de 04       		.byte	0x4
 9067 00df 18090000 		.4byte	.LASF19
 9068 00e3 02       		.uleb128 0x2
 9069 00e4 01       		.byte	0x1
 9070 00e5 08       		.byte	0x8
 9071 00e6 95040000 		.4byte	.LASF20
 9072 00ea 05       		.uleb128 0x5
 9073 00eb F4090000 		.4byte	.LASF21
 9074 00ef 04       		.byte	0x4
 9075 00f0 8602     		.2byte	0x286
 9076 00f2 53000000 		.4byte	0x53
 9077 00f6 05       		.uleb128 0x5
 9078 00f7 340C0000 		.4byte	.LASF22
 9079 00fb 04       		.byte	0x4
 9080 00fc 8E02     		.2byte	0x28e
 9081 00fe 02010000 		.4byte	0x102
 9082 0102 06       		.uleb128 0x6
 9083 0103 81000000 		.4byte	0x81
 9084 0107 02       		.uleb128 0x2
 9085 0108 08       		.byte	0x8
 9086 0109 04       		.byte	0x4
 9087 010a A20A0000 		.4byte	.LASF23
 9088 010e 02       		.uleb128 0x2
 9089 010f 04       		.byte	0x4
 9090 0110 07       		.byte	0x7
 9091 0111 00000000 		.4byte	.LASF24
 9092 0115 07       		.uleb128 0x7
 9093 0116 E3000000 		.4byte	0xe3
 9094 011a 25010000 		.4byte	0x125
 9095 011e 08       		.uleb128 0x8
 9096 011f 0E010000 		.4byte	0x10e
 9097 0123 07       		.byte	0x7
 9098 0124 00       		.byte	0
 9099 0125 09       		.uleb128 0x9
 9100 0126 05110000 		.4byte	.LASF33
 9101 012a 01       		.byte	0x1
 9102 012b 2C000000 		.4byte	0x2c
 9103 012f 05       		.byte	0x5
 9104 0130 8D       		.byte	0x8d
 9105 0131 66010000 		.4byte	0x166
 9106 0135 0A       		.uleb128 0xa
 9107 0136 89060000 		.4byte	.LASF25
 9108 013a 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 210


 9109 013b 0A       		.uleb128 0xa
 9110 013c FD090000 		.4byte	.LASF26
 9111 0140 01       		.byte	0x1
 9112 0141 0A       		.uleb128 0xa
 9113 0142 F9010000 		.4byte	.LASF27
 9114 0146 02       		.byte	0x2
 9115 0147 0A       		.uleb128 0xa
 9116 0148 46010000 		.4byte	.LASF28
 9117 014c 03       		.byte	0x3
 9118 014d 0A       		.uleb128 0xa
 9119 014e 00010000 		.4byte	.LASF29
 9120 0152 04       		.byte	0x4
 9121 0153 0A       		.uleb128 0xa
 9122 0154 36000000 		.4byte	.LASF30
 9123 0158 05       		.byte	0x5
 9124 0159 0A       		.uleb128 0xa
 9125 015a 5C070000 		.4byte	.LASF31
 9126 015e 06       		.byte	0x6
 9127 015f 0A       		.uleb128 0xa
 9128 0160 4F0D0000 		.4byte	.LASF32
 9129 0164 07       		.byte	0x7
 9130 0165 00       		.byte	0
 9131 0166 09       		.uleb128 0x9
 9132 0167 E3080000 		.4byte	.LASF34
 9133 016b 01       		.byte	0x1
 9134 016c 2C000000 		.4byte	0x2c
 9135 0170 05       		.byte	0x5
 9136 0171 A1       		.byte	0xa1
 9137 0172 8F010000 		.4byte	0x18f
 9138 0176 0A       		.uleb128 0xa
 9139 0177 BD100000 		.4byte	.LASF35
 9140 017b 00       		.byte	0
 9141 017c 0A       		.uleb128 0xa
 9142 017d ED070000 		.4byte	.LASF36
 9143 0181 01       		.byte	0x1
 9144 0182 0A       		.uleb128 0xa
 9145 0183 920A0000 		.4byte	.LASF37
 9146 0187 02       		.byte	0x2
 9147 0188 0A       		.uleb128 0xa
 9148 0189 F9060000 		.4byte	.LASF38
 9149 018d 03       		.byte	0x3
 9150 018e 00       		.byte	0
 9151 018f 03       		.uleb128 0x3
 9152 0190 88100000 		.4byte	.LASF39
 9153 0194 06       		.byte	0x6
 9154 0195 7E       		.byte	0x7e
 9155 0196 9A010000 		.4byte	0x19a
 9156 019a 0B       		.uleb128 0xb
 9157 019b 88100000 		.4byte	.LASF39
 9158 019f 0C       		.uleb128 0xc
 9159 01a0 04       		.byte	0x4
 9160 01a1 8F010000 		.4byte	0x18f
 9161 01a5 0D       		.uleb128 0xd
 9162 01a6 9D080000 		.4byte	.LASF42
 9163 01aa 10       		.byte	0x10
 9164 01ab 07       		.byte	0x7
 9165 01ac E1       		.byte	0xe1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 211


 9166 01ad E2010000 		.4byte	0x1e2
 9167 01b1 0E       		.uleb128 0xe
 9168 01b2 706F7300 		.ascii	"pos\000"
 9169 01b6 07       		.byte	0x7
 9170 01b7 E2       		.byte	0xe2
 9171 01b8 BD000000 		.4byte	0xbd
 9172 01bc 00       		.byte	0
 9173 01bd 0F       		.uleb128 0xf
 9174 01be D2070000 		.4byte	.LASF40
 9175 01c2 07       		.byte	0x7
 9176 01c3 E3       		.byte	0xe3
 9177 01c4 BD000000 		.4byte	0xbd
 9178 01c8 04       		.byte	0x4
 9179 01c9 0E       		.uleb128 0xe
 9180 01ca 70776D00 		.ascii	"pwm\000"
 9181 01ce 07       		.byte	0x7
 9182 01cf E4       		.byte	0xe4
 9183 01d0 BD000000 		.4byte	0xbd
 9184 01d4 08       		.byte	0x8
 9185 01d5 0F       		.uleb128 0xf
 9186 01d6 CB0B0000 		.4byte	.LASF41
 9187 01da 07       		.byte	0x7
 9188 01db E5       		.byte	0xe5
 9189 01dc 81000000 		.4byte	0x81
 9190 01e0 0C       		.byte	0xc
 9191 01e1 00       		.byte	0
 9192 01e2 0D       		.uleb128 0xd
 9193 01e3 160D0000 		.4byte	.LASF43
 9194 01e7 34       		.byte	0x34
 9195 01e8 07       		.byte	0x7
 9196 01e9 EC       		.byte	0xec
 9197 01ea 43020000 		.4byte	0x243
 9198 01ee 0E       		.uleb128 0xe
 9199 01ef 706F7300 		.ascii	"pos\000"
 9200 01f3 07       		.byte	0x7
 9201 01f4 ED       		.byte	0xed
 9202 01f5 43020000 		.4byte	0x243
 9203 01f9 00       		.byte	0
 9204 01fa 0F       		.uleb128 0xf
 9205 01fb D2070000 		.4byte	.LASF40
 9206 01ff 07       		.byte	0x7
 9207 0200 EE       		.byte	0xee
 9208 0201 BD000000 		.4byte	0xbd
 9209 0205 0C       		.byte	0xc
 9210 0206 0F       		.uleb128 0xf
 9211 0207 080F0000 		.4byte	.LASF44
 9212 020b 07       		.byte	0x7
 9213 020c EF       		.byte	0xef
 9214 020d BD000000 		.4byte	0xbd
 9215 0211 10       		.byte	0x10
 9216 0212 0F       		.uleb128 0xf
 9217 0213 52070000 		.4byte	.LASF45
 9218 0217 07       		.byte	0x7
 9219 0218 F0       		.byte	0xf0
 9220 0219 BD000000 		.4byte	0xbd
 9221 021d 14       		.byte	0x14
 9222 021e 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 212


 9223 021f 726F7400 		.ascii	"rot\000"
 9224 0223 07       		.byte	0x7
 9225 0224 F1       		.byte	0xf1
 9226 0225 53020000 		.4byte	0x253
 9227 0229 18       		.byte	0x18
 9228 022a 0E       		.uleb128 0xe
 9229 022b 76656C00 		.ascii	"vel\000"
 9230 022f 07       		.byte	0x7
 9231 0230 F2       		.byte	0xf2
 9232 0231 43020000 		.4byte	0x243
 9233 0235 1C       		.byte	0x1c
 9234 0236 0E       		.uleb128 0xe
 9235 0237 61636300 		.ascii	"acc\000"
 9236 023b 07       		.byte	0x7
 9237 023c F3       		.byte	0xf3
 9238 023d 43020000 		.4byte	0x243
 9239 0241 28       		.byte	0x28
 9240 0242 00       		.byte	0
 9241 0243 07       		.uleb128 0x7
 9242 0244 BD000000 		.4byte	0xbd
 9243 0248 53020000 		.4byte	0x253
 9244 024c 08       		.uleb128 0x8
 9245 024d 0E010000 		.4byte	0x10e
 9246 0251 02       		.byte	0x2
 9247 0252 00       		.byte	0
 9248 0253 07       		.uleb128 0x7
 9249 0254 A5000000 		.4byte	0xa5
 9250 0258 63020000 		.4byte	0x263
 9251 025c 08       		.uleb128 0x8
 9252 025d 0E010000 		.4byte	0x10e
 9253 0261 02       		.byte	0x2
 9254 0262 00       		.byte	0
 9255 0263 0D       		.uleb128 0xd
 9256 0264 A2090000 		.4byte	.LASF46
 9257 0268 28       		.byte	0x28
 9258 0269 07       		.byte	0x7
 9259 026a F6       		.byte	0xf6
 9260 026b 94020000 		.4byte	0x294
 9261 026f 0E       		.uleb128 0xe
 9262 0270 656D6700 		.ascii	"emg\000"
 9263 0274 07       		.byte	0x7
 9264 0275 F7       		.byte	0xf7
 9265 0276 94020000 		.4byte	0x294
 9266 027a 00       		.byte	0
 9267 027b 0F       		.uleb128 0xf
 9268 027c 560A0000 		.4byte	.LASF47
 9269 0280 07       		.byte	0x7
 9270 0281 F8       		.byte	0xf8
 9271 0282 A4020000 		.4byte	0x2a4
 9272 0286 08       		.byte	0x8
 9273 0287 0F       		.uleb128 0xf
 9274 0288 F40D0000 		.4byte	.LASF48
 9275 028c 07       		.byte	0x7
 9276 028d F9       		.byte	0xf9
 9277 028e 94020000 		.4byte	0x294
 9278 0292 20       		.byte	0x20
 9279 0293 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 213


 9280 0294 07       		.uleb128 0x7
 9281 0295 BD000000 		.4byte	0xbd
 9282 0299 A4020000 		.4byte	0x2a4
 9283 029d 08       		.uleb128 0x8
 9284 029e 0E010000 		.4byte	0x10e
 9285 02a2 01       		.byte	0x1
 9286 02a3 00       		.byte	0
 9287 02a4 07       		.uleb128 0x7
 9288 02a5 BD000000 		.4byte	0xbd
 9289 02a9 B4020000 		.4byte	0x2b4
 9290 02ad 08       		.uleb128 0x8
 9291 02ae 0E010000 		.4byte	0x10e
 9292 02b2 05       		.byte	0x5
 9293 02b3 00       		.byte	0
 9294 02b4 10       		.uleb128 0x10
 9295 02b5 8C000000 		.4byte	.LASF49
 9296 02b9 86       		.byte	0x86
 9297 02ba 07       		.byte	0x7
 9298 02bb 0401     		.2byte	0x104
 9299 02bd F6020000 		.4byte	0x2f6
 9300 02c1 11       		.uleb128 0x11
 9301 02c2 A1050000 		.4byte	.LASF50
 9302 02c6 07       		.byte	0x7
 9303 02c7 0501     		.2byte	0x105
 9304 02c9 F6020000 		.4byte	0x2f6
 9305 02cd 00       		.byte	0
 9306 02ce 11       		.uleb128 0x11
 9307 02cf AE0B0000 		.4byte	.LASF51
 9308 02d3 07       		.byte	0x7
 9309 02d4 0601     		.2byte	0x106
 9310 02d6 B1000000 		.4byte	0xb1
 9311 02da 80       		.byte	0x80
 9312 02db 12       		.uleb128 0x12
 9313 02dc 696E6400 		.ascii	"ind\000"
 9314 02e0 07       		.byte	0x7
 9315 02e1 0701     		.2byte	0x107
 9316 02e3 B1000000 		.4byte	0xb1
 9317 02e7 82       		.byte	0x82
 9318 02e8 11       		.uleb128 0x11
 9319 02e9 CC010000 		.4byte	.LASF52
 9320 02ed 07       		.byte	0x7
 9321 02ee 0801     		.2byte	0x108
 9322 02f0 81000000 		.4byte	0x81
 9323 02f4 84       		.byte	0x84
 9324 02f5 00       		.byte	0
 9325 02f6 07       		.uleb128 0x7
 9326 02f7 81000000 		.4byte	0x81
 9327 02fb 06030000 		.4byte	0x306
 9328 02ff 08       		.uleb128 0x8
 9329 0300 0E010000 		.4byte	0x10e
 9330 0304 7F       		.byte	0x7f
 9331 0305 00       		.byte	0
 9332 0306 10       		.uleb128 0x10
 9333 0307 0F030000 		.4byte	.LASF53
 9334 030b 50       		.byte	0x50
 9335 030c 07       		.byte	0x7
 9336 030d 1101     		.2byte	0x111
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 214


 9337 030f 6F030000 		.4byte	0x36f
 9338 0313 11       		.uleb128 0x11
 9339 0314 44030000 		.4byte	.LASF54
 9340 0318 07       		.byte	0x7
 9341 0319 1201     		.2byte	0x112
 9342 031b 6F030000 		.4byte	0x36f
 9343 031f 00       		.byte	0
 9344 0320 11       		.uleb128 0x11
 9345 0321 93010000 		.4byte	.LASF55
 9346 0325 07       		.byte	0x7
 9347 0326 1301     		.2byte	0x113
 9348 0328 7F030000 		.4byte	0x37f
 9349 032c 08       		.byte	0x8
 9350 032d 11       		.uleb128 0x11
 9351 032e 850A0000 		.4byte	.LASF56
 9352 0332 07       		.byte	0x7
 9353 0333 1401     		.2byte	0x114
 9354 0335 8F030000 		.4byte	0x38f
 9355 0339 30       		.byte	0x30
 9356 033a 11       		.uleb128 0x11
 9357 033b 2A010000 		.4byte	.LASF57
 9358 033f 07       		.byte	0x7
 9359 0340 1501     		.2byte	0x115
 9360 0342 99000000 		.4byte	0x99
 9361 0346 40       		.byte	0x40
 9362 0347 11       		.uleb128 0x11
 9363 0348 D5100000 		.4byte	.LASF58
 9364 034c 07       		.byte	0x7
 9365 034d 1601     		.2byte	0x116
 9366 034f 99000000 		.4byte	0x99
 9367 0353 44       		.byte	0x44
 9368 0354 11       		.uleb128 0x11
 9369 0355 28070000 		.4byte	.LASF59
 9370 0359 07       		.byte	0x7
 9371 035a 1701     		.2byte	0x117
 9372 035c 99000000 		.4byte	0x99
 9373 0360 48       		.byte	0x48
 9374 0361 11       		.uleb128 0x11
 9375 0362 70070000 		.4byte	.LASF60
 9376 0366 07       		.byte	0x7
 9377 0367 1801     		.2byte	0x118
 9378 0369 99000000 		.4byte	0x99
 9379 036d 4C       		.byte	0x4c
 9380 036e 00       		.byte	0
 9381 036f 07       		.uleb128 0x7
 9382 0370 99000000 		.4byte	0x99
 9383 0374 7F030000 		.4byte	0x37f
 9384 0378 08       		.uleb128 0x8
 9385 0379 0E010000 		.4byte	0x10e
 9386 037d 01       		.byte	0x1
 9387 037e 00       		.byte	0
 9388 037f 07       		.uleb128 0x7
 9389 0380 99000000 		.4byte	0x99
 9390 0384 8F030000 		.4byte	0x38f
 9391 0388 08       		.uleb128 0x8
 9392 0389 0E010000 		.4byte	0x10e
 9393 038d 09       		.byte	0x9
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 215


 9394 038e 00       		.byte	0
 9395 038f 07       		.uleb128 0x7
 9396 0390 99000000 		.4byte	0x99
 9397 0394 9F030000 		.4byte	0x39f
 9398 0398 08       		.uleb128 0x8
 9399 0399 0E010000 		.4byte	0x10e
 9400 039d 03       		.byte	0x3
 9401 039e 00       		.byte	0
 9402 039f 10       		.uleb128 0x10
 9403 03a0 EF010000 		.4byte	.LASF61
 9404 03a4 10       		.byte	0x10
 9405 03a5 07       		.byte	0x7
 9406 03a6 1F01     		.2byte	0x11f
 9407 03a8 2E040000 		.4byte	0x42e
 9408 03ac 12       		.uleb128 0x12
 9409 03ad 696400   		.ascii	"id\000"
 9410 03b0 07       		.byte	0x7
 9411 03b1 2001     		.2byte	0x120
 9412 03b3 81000000 		.4byte	0x81
 9413 03b7 00       		.byte	0
 9414 03b8 11       		.uleb128 0x11
 9415 03b9 0F0E0000 		.4byte	.LASF62
 9416 03bd 07       		.byte	0x7
 9417 03be 2101     		.2byte	0x121
 9418 03c0 2E040000 		.4byte	0x42e
 9419 03c4 01       		.byte	0x1
 9420 03c5 11       		.uleb128 0x11
 9421 03c6 4B0E0000 		.4byte	.LASF63
 9422 03ca 07       		.byte	0x7
 9423 03cb 2201     		.2byte	0x122
 9424 03cd 2E040000 		.4byte	0x42e
 9425 03d1 04       		.byte	0x4
 9426 03d2 11       		.uleb128 0x11
 9427 03d3 5D040000 		.4byte	.LASF64
 9428 03d7 07       		.byte	0x7
 9429 03d8 2301     		.2byte	0x123
 9430 03da 81000000 		.4byte	0x81
 9431 03de 07       		.byte	0x7
 9432 03df 11       		.uleb128 0x11
 9433 03e0 98020000 		.4byte	.LASF65
 9434 03e4 07       		.byte	0x7
 9435 03e5 2401     		.2byte	0x124
 9436 03e7 81000000 		.4byte	0x81
 9437 03eb 08       		.byte	0x8
 9438 03ec 11       		.uleb128 0x11
 9439 03ed 15020000 		.4byte	.LASF66
 9440 03f1 07       		.byte	0x7
 9441 03f2 2501     		.2byte	0x125
 9442 03f4 81000000 		.4byte	0x81
 9443 03f8 09       		.byte	0x9
 9444 03f9 11       		.uleb128 0x11
 9445 03fa AD0F0000 		.4byte	.LASF67
 9446 03fe 07       		.byte	0x7
 9447 03ff 2601     		.2byte	0x126
 9448 0401 81000000 		.4byte	0x81
 9449 0405 0A       		.byte	0xa
 9450 0406 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 216


 9451 0407 410F0000 		.4byte	.LASF68
 9452 040b 07       		.byte	0x7
 9453 040c 2701     		.2byte	0x127
 9454 040e 81000000 		.4byte	0x81
 9455 0412 0B       		.byte	0xb
 9456 0413 11       		.uleb128 0x11
 9457 0414 C50C0000 		.4byte	.LASF69
 9458 0418 07       		.byte	0x7
 9459 0419 2801     		.2byte	0x128
 9460 041b 81000000 		.4byte	0x81
 9461 041f 0C       		.byte	0xc
 9462 0420 11       		.uleb128 0x11
 9463 0421 DC020000 		.4byte	.LASF70
 9464 0425 07       		.byte	0x7
 9465 0426 2901     		.2byte	0x129
 9466 0428 2E040000 		.4byte	0x42e
 9467 042c 0D       		.byte	0xd
 9468 042d 00       		.byte	0
 9469 042e 07       		.uleb128 0x7
 9470 042f 81000000 		.4byte	0x81
 9471 0433 3E040000 		.4byte	0x43e
 9472 0437 08       		.uleb128 0x8
 9473 0438 0E010000 		.4byte	0x10e
 9474 043c 02       		.byte	0x2
 9475 043d 00       		.byte	0
 9476 043e 10       		.uleb128 0x10
 9477 043f 73100000 		.4byte	.LASF71
 9478 0443 70       		.byte	0x70
 9479 0444 07       		.byte	0x7
 9480 0445 3001     		.2byte	0x130
 9481 0447 B8050000 		.4byte	0x5b8
 9482 044b 12       		.uleb128 0x12
 9483 044c 6B5F7000 		.ascii	"k_p\000"
 9484 0450 07       		.byte	0x7
 9485 0451 3101     		.2byte	0x131
 9486 0453 BD000000 		.4byte	0xbd
 9487 0457 00       		.byte	0
 9488 0458 12       		.uleb128 0x12
 9489 0459 6B5F6900 		.ascii	"k_i\000"
 9490 045d 07       		.byte	0x7
 9491 045e 3201     		.2byte	0x132
 9492 0460 BD000000 		.4byte	0xbd
 9493 0464 04       		.byte	0x4
 9494 0465 12       		.uleb128 0x12
 9495 0466 6B5F6400 		.ascii	"k_d\000"
 9496 046a 07       		.byte	0x7
 9497 046b 3301     		.2byte	0x133
 9498 046d BD000000 		.4byte	0xbd
 9499 0471 08       		.byte	0x8
 9500 0472 11       		.uleb128 0x11
 9501 0473 070C0000 		.4byte	.LASF72
 9502 0477 07       		.byte	0x7
 9503 0478 3401     		.2byte	0x134
 9504 047a BD000000 		.4byte	0xbd
 9505 047e 0C       		.byte	0xc
 9506 047f 11       		.uleb128 0x11
 9507 0480 FE040000 		.4byte	.LASF73
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 217


 9508 0484 07       		.byte	0x7
 9509 0485 3501     		.2byte	0x135
 9510 0487 BD000000 		.4byte	0xbd
 9511 048b 10       		.byte	0x10
 9512 048c 11       		.uleb128 0x11
 9513 048d E6040000 		.4byte	.LASF74
 9514 0491 07       		.byte	0x7
 9515 0492 3601     		.2byte	0x136
 9516 0494 BD000000 		.4byte	0xbd
 9517 0498 14       		.byte	0x14
 9518 0499 11       		.uleb128 0x11
 9519 049a 010F0000 		.4byte	.LASF75
 9520 049e 07       		.byte	0x7
 9521 049f 3701     		.2byte	0x137
 9522 04a1 BD000000 		.4byte	0xbd
 9523 04a5 18       		.byte	0x18
 9524 04a6 11       		.uleb128 0x11
 9525 04a7 9A050000 		.4byte	.LASF76
 9526 04ab 07       		.byte	0x7
 9527 04ac 3801     		.2byte	0x138
 9528 04ae BD000000 		.4byte	0xbd
 9529 04b2 1C       		.byte	0x1c
 9530 04b3 11       		.uleb128 0x11
 9531 04b4 DF0D0000 		.4byte	.LASF77
 9532 04b8 07       		.byte	0x7
 9533 04b9 3901     		.2byte	0x139
 9534 04bb BD000000 		.4byte	0xbd
 9535 04bf 20       		.byte	0x20
 9536 04c0 11       		.uleb128 0x11
 9537 04c1 A8050000 		.4byte	.LASF78
 9538 04c5 07       		.byte	0x7
 9539 04c6 3A01     		.2byte	0x13a
 9540 04c8 BD000000 		.4byte	0xbd
 9541 04cc 24       		.byte	0x24
 9542 04cd 11       		.uleb128 0x11
 9543 04ce E2060000 		.4byte	.LASF79
 9544 04d2 07       		.byte	0x7
 9545 04d3 3B01     		.2byte	0x13b
 9546 04d5 BD000000 		.4byte	0xbd
 9547 04d9 28       		.byte	0x28
 9548 04da 11       		.uleb128 0x11
 9549 04db 3D110000 		.4byte	.LASF80
 9550 04df 07       		.byte	0x7
 9551 04e0 3C01     		.2byte	0x13c
 9552 04e2 BD000000 		.4byte	0xbd
 9553 04e6 2C       		.byte	0x2c
 9554 04e7 11       		.uleb128 0x11
 9555 04e8 80070000 		.4byte	.LASF81
 9556 04ec 07       		.byte	0x7
 9557 04ed 3D01     		.2byte	0x13d
 9558 04ef 81000000 		.4byte	0x81
 9559 04f3 30       		.byte	0x30
 9560 04f4 11       		.uleb128 0x11
 9561 04f5 EA0E0000 		.4byte	.LASF82
 9562 04f9 07       		.byte	0x7
 9563 04fa 3E01     		.2byte	0x13e
 9564 04fc 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 218


 9565 0500 31       		.byte	0x31
 9566 0501 11       		.uleb128 0x11
 9567 0502 190C0000 		.4byte	.LASF83
 9568 0506 07       		.byte	0x7
 9569 0507 3F01     		.2byte	0x13f
 9570 0509 81000000 		.4byte	0x81
 9571 050d 32       		.byte	0x32
 9572 050e 11       		.uleb128 0x11
 9573 050f 90100000 		.4byte	.LASF84
 9574 0513 07       		.byte	0x7
 9575 0514 4001     		.2byte	0x140
 9576 0516 81000000 		.4byte	0x81
 9577 051a 33       		.byte	0x33
 9578 051b 11       		.uleb128 0x11
 9579 051c AB000000 		.4byte	.LASF85
 9580 0520 07       		.byte	0x7
 9581 0521 4101     		.2byte	0x141
 9582 0523 BD000000 		.4byte	0xbd
 9583 0527 34       		.byte	0x34
 9584 0528 11       		.uleb128 0x11
 9585 0529 2E050000 		.4byte	.LASF86
 9586 052d 07       		.byte	0x7
 9587 052e 4201     		.2byte	0x142
 9588 0530 BD000000 		.4byte	0xbd
 9589 0534 38       		.byte	0x38
 9590 0535 11       		.uleb128 0x11
 9591 0536 5E090000 		.4byte	.LASF87
 9592 053a 07       		.byte	0x7
 9593 053b 4301     		.2byte	0x143
 9594 053d BD000000 		.4byte	0xbd
 9595 0541 3C       		.byte	0x3c
 9596 0542 11       		.uleb128 0x11
 9597 0543 9A040000 		.4byte	.LASF88
 9598 0547 07       		.byte	0x7
 9599 0548 4401     		.2byte	0x144
 9600 054a BD000000 		.4byte	0xbd
 9601 054e 40       		.byte	0x40
 9602 054f 11       		.uleb128 0x11
 9603 0550 14010000 		.4byte	.LASF89
 9604 0554 07       		.byte	0x7
 9605 0555 4501     		.2byte	0x145
 9606 0557 B8050000 		.4byte	0x5b8
 9607 055b 44       		.byte	0x44
 9608 055c 11       		.uleb128 0x11
 9609 055d F7100000 		.4byte	.LASF90
 9610 0561 07       		.byte	0x7
 9611 0562 4601     		.2byte	0x146
 9612 0564 B1000000 		.4byte	0xb1
 9613 0568 5C       		.byte	0x5c
 9614 0569 11       		.uleb128 0x11
 9615 056a E2070000 		.4byte	.LASF91
 9616 056e 07       		.byte	0x7
 9617 056f 4701     		.2byte	0x147
 9618 0571 81000000 		.4byte	0x81
 9619 0575 5E       		.byte	0x5e
 9620 0576 11       		.uleb128 0x11
 9621 0577 E7090000 		.4byte	.LASF92
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 219


 9622 057b 07       		.byte	0x7
 9623 057c 4801     		.2byte	0x148
 9624 057e 81000000 		.4byte	0x81
 9625 0582 5F       		.byte	0x5f
 9626 0583 11       		.uleb128 0x11
 9627 0584 68040000 		.4byte	.LASF93
 9628 0588 07       		.byte	0x7
 9629 0589 4901     		.2byte	0x149
 9630 058b 81000000 		.4byte	0x81
 9631 058f 60       		.byte	0x60
 9632 0590 11       		.uleb128 0x11
 9633 0591 D5040000 		.4byte	.LASF94
 9634 0595 07       		.byte	0x7
 9635 0596 4A01     		.2byte	0x14a
 9636 0598 81000000 		.4byte	0x81
 9637 059c 61       		.byte	0x61
 9638 059d 11       		.uleb128 0x11
 9639 059e 11040000 		.4byte	.LASF95
 9640 05a2 07       		.byte	0x7
 9641 05a3 4B01     		.2byte	0x14b
 9642 05a5 81000000 		.4byte	0x81
 9643 05a9 62       		.byte	0x62
 9644 05aa 11       		.uleb128 0x11
 9645 05ab DC020000 		.4byte	.LASF70
 9646 05af 07       		.byte	0x7
 9647 05b0 4C01     		.2byte	0x14c
 9648 05b2 C8050000 		.4byte	0x5c8
 9649 05b6 63       		.byte	0x63
 9650 05b7 00       		.byte	0
 9651 05b8 07       		.uleb128 0x7
 9652 05b9 D5000000 		.4byte	0xd5
 9653 05bd C8050000 		.4byte	0x5c8
 9654 05c1 08       		.uleb128 0x8
 9655 05c2 0E010000 		.4byte	0x10e
 9656 05c6 05       		.byte	0x5
 9657 05c7 00       		.byte	0
 9658 05c8 07       		.uleb128 0x7
 9659 05c9 81000000 		.4byte	0x81
 9660 05cd D8050000 		.4byte	0x5d8
 9661 05d1 08       		.uleb128 0x8
 9662 05d2 0E010000 		.4byte	0x10e
 9663 05d6 0C       		.byte	0xc
 9664 05d7 00       		.byte	0
 9665 05d8 10       		.uleb128 0x10
 9666 05d9 EC0F0000 		.4byte	.LASF96
 9667 05dd 30       		.byte	0x30
 9668 05de 07       		.byte	0x7
 9669 05df 5301     		.2byte	0x153
 9670 05e1 5B060000 		.4byte	0x65b
 9671 05e5 11       		.uleb128 0x11
 9672 05e6 40090000 		.4byte	.LASF97
 9673 05ea 07       		.byte	0x7
 9674 05eb 5401     		.2byte	0x154
 9675 05ed 5B060000 		.4byte	0x65b
 9676 05f1 00       		.byte	0
 9677 05f2 12       		.uleb128 0x12
 9678 05f3 72657300 		.ascii	"res\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 220


 9679 05f7 07       		.byte	0x7
 9680 05f8 5501     		.2byte	0x155
 9681 05fa 2E040000 		.4byte	0x42e
 9682 05fe 05       		.byte	0x5
 9683 05ff 11       		.uleb128 0x11
 9684 0600 A2070000 		.4byte	.LASF98
 9685 0604 07       		.byte	0x7
 9686 0605 5601     		.2byte	0x156
 9687 0607 43020000 		.4byte	0x243
 9688 060b 08       		.byte	0x8
 9689 060c 11       		.uleb128 0x11
 9690 060d F7040000 		.4byte	.LASF99
 9691 0611 07       		.byte	0x7
 9692 0612 5701     		.2byte	0x157
 9693 0614 6B060000 		.4byte	0x66b
 9694 0618 14       		.byte	0x14
 9695 0619 11       		.uleb128 0x11
 9696 061a 2A0B0000 		.4byte	.LASF100
 9697 061e 07       		.byte	0x7
 9698 061f 5801     		.2byte	0x158
 9699 0621 81000000 		.4byte	0x81
 9700 0625 20       		.byte	0x20
 9701 0626 11       		.uleb128 0x11
 9702 0627 D2010000 		.4byte	.LASF101
 9703 062b 07       		.byte	0x7
 9704 062c 5901     		.2byte	0x159
 9705 062e 2E040000 		.4byte	0x42e
 9706 0632 21       		.byte	0x21
 9707 0633 11       		.uleb128 0x11
 9708 0634 DB0A0000 		.4byte	.LASF102
 9709 0638 07       		.byte	0x7
 9710 0639 5A01     		.2byte	0x15a
 9711 063b A5000000 		.4byte	0xa5
 9712 063f 24       		.byte	0x24
 9713 0640 11       		.uleb128 0x11
 9714 0641 E70C0000 		.4byte	.LASF103
 9715 0645 07       		.byte	0x7
 9716 0646 5B01     		.2byte	0x15b
 9717 0648 53020000 		.4byte	0x253
 9718 064c 25       		.byte	0x25
 9719 064d 11       		.uleb128 0x11
 9720 064e DC020000 		.4byte	.LASF70
 9721 0652 07       		.byte	0x7
 9722 0653 5C01     		.2byte	0x15c
 9723 0655 7B060000 		.4byte	0x67b
 9724 0659 28       		.byte	0x28
 9725 065a 00       		.byte	0
 9726 065b 07       		.uleb128 0x7
 9727 065c 81000000 		.4byte	0x81
 9728 0660 6B060000 		.4byte	0x66b
 9729 0664 08       		.uleb128 0x8
 9730 0665 0E010000 		.4byte	0x10e
 9731 0669 04       		.byte	0x4
 9732 066a 00       		.byte	0
 9733 066b 07       		.uleb128 0x7
 9734 066c C9000000 		.4byte	0xc9
 9735 0670 7B060000 		.4byte	0x67b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 221


 9736 0674 08       		.uleb128 0x8
 9737 0675 0E010000 		.4byte	0x10e
 9738 0679 02       		.byte	0x2
 9739 067a 00       		.byte	0
 9740 067b 07       		.uleb128 0x7
 9741 067c 81000000 		.4byte	0x81
 9742 0680 8B060000 		.4byte	0x68b
 9743 0684 08       		.uleb128 0x8
 9744 0685 0E010000 		.4byte	0x10e
 9745 0689 07       		.byte	0x7
 9746 068a 00       		.byte	0
 9747 068b 10       		.uleb128 0x10
 9748 068c 8C010000 		.4byte	.LASF104
 9749 0690 10       		.byte	0x10
 9750 0691 07       		.byte	0x7
 9751 0692 6301     		.2byte	0x163
 9752 0694 DA060000 		.4byte	0x6da
 9753 0698 11       		.uleb128 0x11
 9754 0699 640A0000 		.4byte	.LASF105
 9755 069d 07       		.byte	0x7
 9756 069e 6401     		.2byte	0x164
 9757 06a0 DA060000 		.4byte	0x6da
 9758 06a4 00       		.byte	0
 9759 06a5 11       		.uleb128 0x11
 9760 06a6 E9100000 		.4byte	.LASF106
 9761 06aa 07       		.byte	0x7
 9762 06ab 6501     		.2byte	0x165
 9763 06ad 6F030000 		.4byte	0x36f
 9764 06b1 04       		.byte	0x4
 9765 06b2 11       		.uleb128 0x11
 9766 06b3 44050000 		.4byte	.LASF107
 9767 06b7 07       		.byte	0x7
 9768 06b8 6601     		.2byte	0x166
 9769 06ba EA060000 		.4byte	0x6ea
 9770 06be 0C       		.byte	0xc
 9771 06bf 11       		.uleb128 0x11
 9772 06c0 010D0000 		.4byte	.LASF108
 9773 06c4 07       		.byte	0x7
 9774 06c5 6701     		.2byte	0x167
 9775 06c7 81000000 		.4byte	0x81
 9776 06cb 0E       		.byte	0xe
 9777 06cc 11       		.uleb128 0x11
 9778 06cd C0030000 		.4byte	.LASF109
 9779 06d1 07       		.byte	0x7
 9780 06d2 6801     		.2byte	0x168
 9781 06d4 81000000 		.4byte	0x81
 9782 06d8 0F       		.byte	0xf
 9783 06d9 00       		.byte	0
 9784 06da 07       		.uleb128 0x7
 9785 06db 8D000000 		.4byte	0x8d
 9786 06df EA060000 		.4byte	0x6ea
 9787 06e3 08       		.uleb128 0x8
 9788 06e4 0E010000 		.4byte	0x10e
 9789 06e8 01       		.byte	0x1
 9790 06e9 00       		.byte	0
 9791 06ea 07       		.uleb128 0x7
 9792 06eb 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 222


 9793 06ef FA060000 		.4byte	0x6fa
 9794 06f3 08       		.uleb128 0x8
 9795 06f4 0E010000 		.4byte	0x10e
 9796 06f8 01       		.byte	0x1
 9797 06f9 00       		.byte	0
 9798 06fa 10       		.uleb128 0x10
 9799 06fb 110A0000 		.4byte	.LASF110
 9800 06ff 20       		.byte	0x20
 9801 0700 07       		.byte	0x7
 9802 0701 6F01     		.2byte	0x16f
 9803 0703 3C070000 		.4byte	0x73c
 9804 0707 11       		.uleb128 0x11
 9805 0708 40020000 		.4byte	.LASF111
 9806 070c 07       		.byte	0x7
 9807 070d 7001     		.2byte	0x170
 9808 070f 81000000 		.4byte	0x81
 9809 0713 00       		.byte	0
 9810 0714 11       		.uleb128 0x11
 9811 0715 CA0F0000 		.4byte	.LASF112
 9812 0719 07       		.byte	0x7
 9813 071a 7101     		.2byte	0x171
 9814 071c 81000000 		.4byte	0x81
 9815 0720 01       		.byte	0x1
 9816 0721 11       		.uleb128 0x11
 9817 0722 93090000 		.4byte	.LASF113
 9818 0726 07       		.byte	0x7
 9819 0727 7201     		.2byte	0x172
 9820 0729 3C070000 		.4byte	0x73c
 9821 072d 02       		.byte	0x2
 9822 072e 11       		.uleb128 0x11
 9823 072f DC020000 		.4byte	.LASF70
 9824 0733 07       		.byte	0x7
 9825 0734 7301     		.2byte	0x173
 9826 0736 5B060000 		.4byte	0x65b
 9827 073a 1B       		.byte	0x1b
 9828 073b 00       		.byte	0
 9829 073c 07       		.uleb128 0x7
 9830 073d 81000000 		.4byte	0x81
 9831 0741 52070000 		.4byte	0x752
 9832 0745 08       		.uleb128 0x8
 9833 0746 0E010000 		.4byte	0x10e
 9834 074a 04       		.byte	0x4
 9835 074b 08       		.uleb128 0x8
 9836 074c 0E010000 		.4byte	0x10e
 9837 0750 04       		.byte	0x4
 9838 0751 00       		.byte	0
 9839 0752 10       		.uleb128 0x10
 9840 0753 F40C0000 		.4byte	.LASF114
 9841 0757 20       		.byte	0x20
 9842 0758 07       		.byte	0x7
 9843 0759 7A01     		.2byte	0x17a
 9844 075b A1070000 		.4byte	0x7a1
 9845 075f 11       		.uleb128 0x11
 9846 0760 200B0000 		.4byte	.LASF115
 9847 0764 07       		.byte	0x7
 9848 0765 7B01     		.2byte	0x17b
 9849 0767 A1070000 		.4byte	0x7a1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 223


 9850 076b 00       		.byte	0
 9851 076c 11       		.uleb128 0x11
 9852 076d D70E0000 		.4byte	.LASF116
 9853 0771 07       		.byte	0x7
 9854 0772 7C01     		.2byte	0x17c
 9855 0774 81000000 		.4byte	0x81
 9856 0778 06       		.byte	0x6
 9857 0779 11       		.uleb128 0x11
 9858 077a 4E000000 		.4byte	.LASF117
 9859 077e 07       		.byte	0x7
 9860 077f 7D01     		.2byte	0x17d
 9861 0781 81000000 		.4byte	0x81
 9862 0785 07       		.byte	0x7
 9863 0786 11       		.uleb128 0x11
 9864 0787 83050000 		.4byte	.LASF118
 9865 078b 07       		.byte	0x7
 9866 078c 7E01     		.2byte	0x17e
 9867 078e B1070000 		.4byte	0x7b1
 9868 0792 08       		.byte	0x8
 9869 0793 11       		.uleb128 0x11
 9870 0794 DC020000 		.4byte	.LASF70
 9871 0798 07       		.byte	0x7
 9872 0799 7F01     		.2byte	0x17f
 9873 079b B1070000 		.4byte	0x7b1
 9874 079f 14       		.byte	0x14
 9875 07a0 00       		.byte	0
 9876 07a1 07       		.uleb128 0x7
 9877 07a2 81000000 		.4byte	0x81
 9878 07a6 B1070000 		.4byte	0x7b1
 9879 07aa 08       		.uleb128 0x8
 9880 07ab 0E010000 		.4byte	0x10e
 9881 07af 05       		.byte	0x5
 9882 07b0 00       		.byte	0
 9883 07b1 07       		.uleb128 0x7
 9884 07b2 81000000 		.4byte	0x81
 9885 07b6 C1070000 		.4byte	0x7c1
 9886 07ba 08       		.uleb128 0x8
 9887 07bb 0E010000 		.4byte	0x10e
 9888 07bf 0B       		.byte	0xb
 9889 07c0 00       		.byte	0
 9890 07c1 10       		.uleb128 0x10
 9891 07c2 DF0C0000 		.4byte	.LASF119
 9892 07c6 20       		.byte	0x20
 9893 07c7 07       		.byte	0x7
 9894 07c8 8601     		.2byte	0x186
 9895 07ca F6070000 		.4byte	0x7f6
 9896 07ce 11       		.uleb128 0x11
 9897 07cf 92030000 		.4byte	.LASF120
 9898 07d3 07       		.byte	0x7
 9899 07d4 8701     		.2byte	0x187
 9900 07d6 15010000 		.4byte	0x115
 9901 07da 00       		.byte	0
 9902 07db 11       		.uleb128 0x11
 9903 07dc B5020000 		.4byte	.LASF121
 9904 07e0 07       		.byte	0x7
 9905 07e1 8801     		.2byte	0x188
 9906 07e3 8B060000 		.4byte	0x68b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 224


 9907 07e7 08       		.byte	0x8
 9908 07e8 11       		.uleb128 0x11
 9909 07e9 DC020000 		.4byte	.LASF70
 9910 07ed 07       		.byte	0x7
 9911 07ee 8901     		.2byte	0x189
 9912 07f0 7B060000 		.4byte	0x67b
 9913 07f4 18       		.byte	0x18
 9914 07f5 00       		.byte	0
 9915 07f6 10       		.uleb128 0x10
 9916 07f7 B1080000 		.4byte	.LASF122
 9917 07fb 10       		.byte	0x10
 9918 07fc 07       		.byte	0x7
 9919 07fd 9001     		.2byte	0x190
 9920 07ff 45080000 		.4byte	0x845
 9921 0803 11       		.uleb128 0x11
 9922 0804 C9070000 		.4byte	.LASF123
 9923 0808 07       		.byte	0x7
 9924 0809 9101     		.2byte	0x191
 9925 080b BD000000 		.4byte	0xbd
 9926 080f 00       		.byte	0
 9927 0810 11       		.uleb128 0x11
 9928 0811 1F110000 		.4byte	.LASF124
 9929 0815 07       		.byte	0x7
 9930 0816 9201     		.2byte	0x192
 9931 0818 BD000000 		.4byte	0xbd
 9932 081c 04       		.byte	0x4
 9933 081d 11       		.uleb128 0x11
 9934 081e 4E050000 		.4byte	.LASF125
 9935 0822 07       		.byte	0x7
 9936 0823 9301     		.2byte	0x193
 9937 0825 BD000000 		.4byte	0xbd
 9938 0829 08       		.byte	0x8
 9939 082a 11       		.uleb128 0x11
 9940 082b B8060000 		.4byte	.LASF126
 9941 082f 07       		.byte	0x7
 9942 0830 9401     		.2byte	0x194
 9943 0832 81000000 		.4byte	0x81
 9944 0836 0C       		.byte	0xc
 9945 0837 11       		.uleb128 0x11
 9946 0838 DC020000 		.4byte	.LASF70
 9947 083c 07       		.byte	0x7
 9948 083d 9501     		.2byte	0x195
 9949 083f 2E040000 		.4byte	0x42e
 9950 0843 0D       		.byte	0xd
 9951 0844 00       		.byte	0
 9952 0845 10       		.uleb128 0x10
 9953 0846 37010000 		.4byte	.LASF127
 9954 084a 10       		.byte	0x10
 9955 084b 07       		.byte	0x7
 9956 084c 9C01     		.2byte	0x19c
 9957 084e 7A080000 		.4byte	0x87a
 9958 0852 11       		.uleb128 0x11
 9959 0853 8A0C0000 		.4byte	.LASF128
 9960 0857 07       		.byte	0x7
 9961 0858 9D01     		.2byte	0x19d
 9962 085a 81000000 		.4byte	0x81
 9963 085e 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 225


 9964 085f 11       		.uleb128 0x11
 9965 0860 7F090000 		.4byte	.LASF129
 9966 0864 07       		.byte	0x7
 9967 0865 9E01     		.2byte	0x19e
 9968 0867 81000000 		.4byte	0x81
 9969 086b 01       		.byte	0x1
 9970 086c 11       		.uleb128 0x11
 9971 086d DC020000 		.4byte	.LASF70
 9972 0871 07       		.byte	0x7
 9973 0872 9F01     		.2byte	0x19f
 9974 0874 7A080000 		.4byte	0x87a
 9975 0878 02       		.byte	0x2
 9976 0879 00       		.byte	0
 9977 087a 07       		.uleb128 0x7
 9978 087b 81000000 		.4byte	0x81
 9979 087f 8A080000 		.4byte	0x88a
 9980 0883 08       		.uleb128 0x8
 9981 0884 0E010000 		.4byte	0x10e
 9982 0888 0D       		.byte	0xd
 9983 0889 00       		.byte	0
 9984 088a 10       		.uleb128 0x10
 9985 088b CA080000 		.4byte	.LASF130
 9986 088f 10       		.byte	0x10
 9987 0890 07       		.byte	0x7
 9988 0891 A601     		.2byte	0x1a6
 9989 0893 CC080000 		.4byte	0x8cc
 9990 0897 11       		.uleb128 0x11
 9991 0898 02100000 		.4byte	.LASF131
 9992 089c 07       		.byte	0x7
 9993 089d A701     		.2byte	0x1a7
 9994 089f BD000000 		.4byte	0xbd
 9995 08a3 00       		.byte	0
 9996 08a4 11       		.uleb128 0x11
 9997 08a5 A3060000 		.4byte	.LASF132
 9998 08a9 07       		.byte	0x7
 9999 08aa A801     		.2byte	0x1a8
 10000 08ac D5000000 		.4byte	0xd5
 10001 08b0 04       		.byte	0x4
 10002 08b1 11       		.uleb128 0x11
 10003 08b2 4B0C0000 		.4byte	.LASF133
 10004 08b6 07       		.byte	0x7
 10005 08b7 A901     		.2byte	0x1a9
 10006 08b9 D5000000 		.4byte	0xd5
 10007 08bd 08       		.byte	0x8
 10008 08be 11       		.uleb128 0x11
 10009 08bf DC020000 		.4byte	.LASF70
 10010 08c3 07       		.byte	0x7
 10011 08c4 AA01     		.2byte	0x1aa
 10012 08c6 CC080000 		.4byte	0x8cc
 10013 08ca 0C       		.byte	0xc
 10014 08cb 00       		.byte	0
 10015 08cc 07       		.uleb128 0x7
 10016 08cd 81000000 		.4byte	0x81
 10017 08d1 DC080000 		.4byte	0x8dc
 10018 08d5 08       		.uleb128 0x8
 10019 08d6 0E010000 		.4byte	0x10e
 10020 08da 03       		.byte	0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 226


 10021 08db 00       		.byte	0
 10022 08dc 10       		.uleb128 0x10
 10023 08dd C1010000 		.4byte	.LASF134
 10024 08e1 12       		.byte	0x12
 10025 08e2 07       		.byte	0x7
 10026 08e3 B101     		.2byte	0x1b1
 10027 08e5 1E090000 		.4byte	0x91e
 10028 08e9 11       		.uleb128 0x11
 10029 08ea 3B0A0000 		.4byte	.LASF135
 10030 08ee 07       		.byte	0x7
 10031 08ef B201     		.2byte	0x1b2
 10032 08f1 81000000 		.4byte	0x81
 10033 08f5 00       		.byte	0
 10034 08f6 11       		.uleb128 0x11
 10035 08f7 B70F0000 		.4byte	.LASF136
 10036 08fb 07       		.byte	0x7
 10037 08fc B301     		.2byte	0x1b3
 10038 08fe DA060000 		.4byte	0x6da
 10039 0902 02       		.byte	0x2
 10040 0903 11       		.uleb128 0x11
 10041 0904 1A000000 		.4byte	.LASF137
 10042 0908 07       		.byte	0x7
 10043 0909 B401     		.2byte	0x1b4
 10044 090b 81000000 		.4byte	0x81
 10045 090f 06       		.byte	0x6
 10046 0910 11       		.uleb128 0x11
 10047 0911 DC020000 		.4byte	.LASF70
 10048 0915 07       		.byte	0x7
 10049 0916 B501     		.2byte	0x1b5
 10050 0918 1E090000 		.4byte	0x91e
 10051 091c 07       		.byte	0x7
 10052 091d 00       		.byte	0
 10053 091e 07       		.uleb128 0x7
 10054 091f 81000000 		.4byte	0x81
 10055 0923 2E090000 		.4byte	0x92e
 10056 0927 08       		.uleb128 0x8
 10057 0928 0E010000 		.4byte	0x10e
 10058 092c 09       		.byte	0x9
 10059 092d 00       		.byte	0
 10060 092e 10       		.uleb128 0x10
 10061 092f B50D0000 		.4byte	.LASF138
 10062 0933 10       		.byte	0x10
 10063 0934 07       		.byte	0x7
 10064 0935 BC01     		.2byte	0x1bc
 10065 0937 70090000 		.4byte	0x970
 10066 093b 11       		.uleb128 0x11
 10067 093c CB060000 		.4byte	.LASF139
 10068 0940 07       		.byte	0x7
 10069 0941 BD01     		.2byte	0x1bd
 10070 0943 8D000000 		.4byte	0x8d
 10071 0947 00       		.byte	0
 10072 0948 11       		.uleb128 0x11
 10073 0949 3C0D0000 		.4byte	.LASF140
 10074 094d 07       		.byte	0x7
 10075 094e BE01     		.2byte	0x1be
 10076 0950 B1000000 		.4byte	0xb1
 10077 0954 02       		.byte	0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 227


 10078 0955 11       		.uleb128 0x11
 10079 0956 43070000 		.4byte	.LASF141
 10080 095a 07       		.byte	0x7
 10081 095b BF01     		.2byte	0x1bf
 10082 095d DA060000 		.4byte	0x6da
 10083 0961 04       		.byte	0x4
 10084 0962 11       		.uleb128 0x11
 10085 0963 DC020000 		.4byte	.LASF70
 10086 0967 07       		.byte	0x7
 10087 0968 C001     		.2byte	0x1c0
 10088 096a 7B060000 		.4byte	0x67b
 10089 096e 08       		.byte	0x8
 10090 096f 00       		.byte	0
 10091 0970 13       		.uleb128 0x13
 10092 0971 1D100000 		.4byte	.LASF142
 10093 0975 F402     		.2byte	0x2f4
 10094 0977 07       		.byte	0x7
 10095 0978 C801     		.2byte	0x1c8
 10096 097a 550A0000 		.4byte	0xa55
 10097 097e 11       		.uleb128 0x11
 10098 097f E2090000 		.4byte	.LASF143
 10099 0983 07       		.byte	0x7
 10100 0984 CA01     		.2byte	0x1ca
 10101 0986 81000000 		.4byte	0x81
 10102 098a 00       		.byte	0
 10103 098b 11       		.uleb128 0x11
 10104 098c DC020000 		.4byte	.LASF70
 10105 0990 07       		.byte	0x7
 10106 0991 CB01     		.2byte	0x1cb
 10107 0993 550A0000 		.4byte	0xa55
 10108 0997 01       		.byte	0x1
 10109 0998 12       		.uleb128 0x12
 10110 0999 636E7400 		.ascii	"cnt\000"
 10111 099d 07       		.byte	0x7
 10112 099e CC01     		.2byte	0x1cc
 10113 09a0 06030000 		.4byte	0x306
 10114 09a4 10       		.byte	0x10
 10115 09a5 11       		.uleb128 0x11
 10116 09a6 77020000 		.4byte	.LASF144
 10117 09aa 07       		.byte	0x7
 10118 09ab CD01     		.2byte	0x1cd
 10119 09ad 650A0000 		.4byte	0xa65
 10120 09b1 60       		.byte	0x60
 10121 09b2 12       		.uleb128 0x12
 10122 09b3 64657600 		.ascii	"dev\000"
 10123 09b7 07       		.byte	0x7
 10124 09b8 CE01     		.2byte	0x1ce
 10125 09ba 9F030000 		.4byte	0x39f
 10126 09be A0       		.byte	0xa0
 10127 09bf 11       		.uleb128 0x11
 10128 09c0 FD0D0000 		.4byte	.LASF145
 10129 09c4 07       		.byte	0x7
 10130 09c5 CF01     		.2byte	0x1cf
 10131 09c7 750A0000 		.4byte	0xa75
 10132 09cb B0       		.byte	0xb0
 10133 09cc 14       		.uleb128 0x14
 10134 09cd 656E6300 		.ascii	"enc\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 228


 10135 09d1 07       		.byte	0x7
 10136 09d2 D001     		.2byte	0x1d0
 10137 09d4 850A0000 		.4byte	0xa85
 10138 09d8 9001     		.2byte	0x190
 10139 09da 14       		.uleb128 0x14
 10140 09db 656D6700 		.ascii	"emg\000"
 10141 09df 07       		.byte	0x7
 10142 09e0 D101     		.2byte	0x1d1
 10143 09e2 8B060000 		.4byte	0x68b
 10144 09e6 F001     		.2byte	0x1f0
 10145 09e8 14       		.uleb128 0x14
 10146 09e9 696D7500 		.ascii	"imu\000"
 10147 09ed 07       		.byte	0x7
 10148 09ee D201     		.2byte	0x1d2
 10149 09f0 FA060000 		.4byte	0x6fa
 10150 09f4 0002     		.2byte	0x200
 10151 09f6 14       		.uleb128 0x14
 10152 09f7 65787000 		.ascii	"exp\000"
 10153 09fb 07       		.byte	0x7
 10154 09fc D301     		.2byte	0x1d3
 10155 09fe 52070000 		.4byte	0x752
 10156 0a02 2002     		.2byte	0x220
 10157 0a04 15       		.uleb128 0x15
 10158 0a05 69000000 		.4byte	.LASF146
 10159 0a09 07       		.byte	0x7
 10160 0a0a D401     		.2byte	0x1d4
 10161 0a0c 950A0000 		.4byte	0xa95
 10162 0a10 4002     		.2byte	0x240
 10163 0a12 14       		.uleb128 0x14
 10164 0a13 534800   		.ascii	"SH\000"
 10165 0a16 07       		.byte	0x7
 10166 0a17 D601     		.2byte	0x1d6
 10167 0a19 F6070000 		.4byte	0x7f6
 10168 0a1d A002     		.2byte	0x2a0
 10169 0a1f 14       		.uleb128 0x14
 10170 0a20 4D5300   		.ascii	"MS\000"
 10171 0a23 07       		.byte	0x7
 10172 0a24 D701     		.2byte	0x1d7
 10173 0a26 45080000 		.4byte	0x845
 10174 0a2a B002     		.2byte	0x2b0
 10175 0a2c 14       		.uleb128 0x14
 10176 0a2d 464200   		.ascii	"FB\000"
 10177 0a30 07       		.byte	0x7
 10178 0a31 D801     		.2byte	0x1d8
 10179 0a33 8A080000 		.4byte	0x88a
 10180 0a37 C002     		.2byte	0x2c0
 10181 0a39 14       		.uleb128 0x14
 10182 0a3a 575200   		.ascii	"WR\000"
 10183 0a3d 07       		.byte	0x7
 10184 0a3e D901     		.2byte	0x1d9
 10185 0a40 DC080000 		.4byte	0x8dc
 10186 0a44 D002     		.2byte	0x2d0
 10187 0a46 15       		.uleb128 0x15
 10188 0a47 A2000000 		.4byte	.LASF147
 10189 0a4b 07       		.byte	0x7
 10190 0a4c DA01     		.2byte	0x1da
 10191 0a4e 2E090000 		.4byte	0x92e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 229


 10192 0a52 E202     		.2byte	0x2e2
 10193 0a54 00       		.byte	0
 10194 0a55 07       		.uleb128 0x7
 10195 0a56 81000000 		.4byte	0x81
 10196 0a5a 650A0000 		.4byte	0xa65
 10197 0a5e 08       		.uleb128 0x8
 10198 0a5f 0E010000 		.4byte	0x10e
 10199 0a63 0E       		.byte	0xe
 10200 0a64 00       		.byte	0
 10201 0a65 07       		.uleb128 0x7
 10202 0a66 81000000 		.4byte	0x81
 10203 0a6a 750A0000 		.4byte	0xa75
 10204 0a6e 08       		.uleb128 0x8
 10205 0a6f 0E010000 		.4byte	0x10e
 10206 0a73 3F       		.byte	0x3f
 10207 0a74 00       		.byte	0
 10208 0a75 07       		.uleb128 0x7
 10209 0a76 3E040000 		.4byte	0x43e
 10210 0a7a 850A0000 		.4byte	0xa85
 10211 0a7e 08       		.uleb128 0x8
 10212 0a7f 0E010000 		.4byte	0x10e
 10213 0a83 01       		.byte	0x1
 10214 0a84 00       		.byte	0
 10215 0a85 07       		.uleb128 0x7
 10216 0a86 D8050000 		.4byte	0x5d8
 10217 0a8a 950A0000 		.4byte	0xa95
 10218 0a8e 08       		.uleb128 0x8
 10219 0a8f 0E010000 		.4byte	0x10e
 10220 0a93 01       		.byte	0x1
 10221 0a94 00       		.byte	0
 10222 0a95 07       		.uleb128 0x7
 10223 0a96 C1070000 		.4byte	0x7c1
 10224 0a9a A50A0000 		.4byte	0xaa5
 10225 0a9e 08       		.uleb128 0x8
 10226 0a9f 0E010000 		.4byte	0x10e
 10227 0aa3 02       		.byte	0x2
 10228 0aa4 00       		.byte	0
 10229 0aa5 10       		.uleb128 0x10
 10230 0aa6 B50B0000 		.4byte	.LASF148
 10231 0aaa 28       		.byte	0x28
 10232 0aab 07       		.byte	0x7
 10233 0aac E501     		.2byte	0x1e5
 10234 0aae 010B0000 		.4byte	0xb01
 10235 0ab2 11       		.uleb128 0x11
 10236 0ab3 82040000 		.4byte	.LASF149
 10237 0ab7 07       		.byte	0x7
 10238 0ab8 E601     		.2byte	0x1e6
 10239 0aba 81000000 		.4byte	0x81
 10240 0abe 00       		.byte	0
 10241 0abf 11       		.uleb128 0x11
 10242 0ac0 E9020000 		.4byte	.LASF150
 10243 0ac4 07       		.byte	0x7
 10244 0ac5 E701     		.2byte	0x1e7
 10245 0ac7 010B0000 		.4byte	0xb01
 10246 0acb 02       		.byte	0x2
 10247 0acc 11       		.uleb128 0x11
 10248 0acd 150B0000 		.4byte	.LASF151
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 230


 10249 0ad1 07       		.byte	0x7
 10250 0ad2 E801     		.2byte	0x1e8
 10251 0ad4 010B0000 		.4byte	0xb01
 10252 0ad8 08       		.byte	0x8
 10253 0ad9 11       		.uleb128 0x11
 10254 0ada C10B0000 		.4byte	.LASF152
 10255 0ade 07       		.byte	0x7
 10256 0adf E901     		.2byte	0x1e9
 10257 0ae1 010B0000 		.4byte	0xb01
 10258 0ae5 0E       		.byte	0xe
 10259 0ae6 11       		.uleb128 0x11
 10260 0ae7 BE070000 		.4byte	.LASF153
 10261 0aeb 07       		.byte	0x7
 10262 0aec EA01     		.2byte	0x1ea
 10263 0aee 110B0000 		.4byte	0xb11
 10264 0af2 14       		.byte	0x14
 10265 0af3 11       		.uleb128 0x11
 10266 0af4 AE010000 		.4byte	.LASF154
 10267 0af8 07       		.byte	0x7
 10268 0af9 EB01     		.2byte	0x1eb
 10269 0afb B1000000 		.4byte	0xb1
 10270 0aff 24       		.byte	0x24
 10271 0b00 00       		.byte	0
 10272 0b01 07       		.uleb128 0x7
 10273 0b02 B1000000 		.4byte	0xb1
 10274 0b06 110B0000 		.4byte	0xb11
 10275 0b0a 08       		.uleb128 0x8
 10276 0b0b 0E010000 		.4byte	0x10e
 10277 0b0f 02       		.byte	0x2
 10278 0b10 00       		.byte	0
 10279 0b11 07       		.uleb128 0x7
 10280 0b12 D5000000 		.4byte	0xd5
 10281 0b16 210B0000 		.4byte	0xb21
 10282 0b1a 08       		.uleb128 0x8
 10283 0b1b 0E010000 		.4byte	0x10e
 10284 0b1f 03       		.byte	0x3
 10285 0b20 00       		.byte	0
 10286 0b21 10       		.uleb128 0x10
 10287 0b22 2A110000 		.4byte	.LASF155
 10288 0b26 08       		.byte	0x8
 10289 0b27 07       		.byte	0x7
 10290 0b28 F201     		.2byte	0x1f2
 10291 0b2a 490B0000 		.4byte	0xb49
 10292 0b2e 11       		.uleb128 0x11
 10293 0b2f 3A050000 		.4byte	.LASF156
 10294 0b33 07       		.byte	0x7
 10295 0b34 F301     		.2byte	0x1f3
 10296 0b36 BD000000 		.4byte	0xbd
 10297 0b3a 00       		.byte	0
 10298 0b3b 11       		.uleb128 0x11
 10299 0b3c EA010000 		.4byte	.LASF157
 10300 0b40 07       		.byte	0x7
 10301 0b41 F401     		.2byte	0x1f4
 10302 0b43 BD000000 		.4byte	0xbd
 10303 0b47 04       		.byte	0x4
 10304 0b48 00       		.byte	0
 10305 0b49 10       		.uleb128 0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 231


 10306 0b4a A3030000 		.4byte	.LASF158
 10307 0b4e 06       		.byte	0x6
 10308 0b4f 07       		.byte	0x7
 10309 0b50 FB01     		.2byte	0x1fb
 10310 0b52 8B0B0000 		.4byte	0xb8b
 10311 0b56 11       		.uleb128 0x11
 10312 0b57 0E070000 		.4byte	.LASF159
 10313 0b5b 07       		.byte	0x7
 10314 0b5c FC01     		.2byte	0x1fc
 10315 0b5e 81000000 		.4byte	0x81
 10316 0b62 00       		.byte	0
 10317 0b63 11       		.uleb128 0x11
 10318 0b64 46110000 		.4byte	.LASF160
 10319 0b68 07       		.byte	0x7
 10320 0b69 FD01     		.2byte	0x1fd
 10321 0b6b 81000000 		.4byte	0x81
 10322 0b6f 01       		.byte	0x1
 10323 0b70 11       		.uleb128 0x11
 10324 0b71 C7050000 		.4byte	.LASF161
 10325 0b75 07       		.byte	0x7
 10326 0b76 FE01     		.2byte	0x1fe
 10327 0b78 B1000000 		.4byte	0xb1
 10328 0b7c 02       		.byte	0x2
 10329 0b7d 11       		.uleb128 0x11
 10330 0b7e 52090000 		.4byte	.LASF162
 10331 0b82 07       		.byte	0x7
 10332 0b83 FF01     		.2byte	0x1ff
 10333 0b85 B1000000 		.4byte	0xb1
 10334 0b89 04       		.byte	0x4
 10335 0b8a 00       		.byte	0
 10336 0b8b 16       		.uleb128 0x16
 10337 0b8c 01       		.byte	0x1
 10338 0b8d 2C000000 		.4byte	0x2c
 10339 0b91 07       		.byte	0x7
 10340 0b92 0302     		.2byte	0x203
 10341 0b94 BD0B0000 		.4byte	0xbbd
 10342 0b98 0A       		.uleb128 0xa
 10343 0b99 57050000 		.4byte	.LASF163
 10344 0b9d 00       		.byte	0
 10345 0b9e 0A       		.uleb128 0xa
 10346 0b9f 840C0000 		.4byte	.LASF164
 10347 0ba3 01       		.byte	0x1
 10348 0ba4 0A       		.uleb128 0xa
 10349 0ba5 AE0A0000 		.4byte	.LASF165
 10350 0ba9 02       		.byte	0x2
 10351 0baa 0A       		.uleb128 0xa
 10352 0bab 33020000 		.4byte	.LASF166
 10353 0baf 03       		.byte	0x3
 10354 0bb0 0A       		.uleb128 0xa
 10355 0bb1 88090000 		.4byte	.LASF167
 10356 0bb5 04       		.byte	0x4
 10357 0bb6 0A       		.uleb128 0xa
 10358 0bb7 2B0C0000 		.4byte	.LASF168
 10359 0bbb 05       		.byte	0x5
 10360 0bbc 00       		.byte	0
 10361 0bbd 05       		.uleb128 0x5
 10362 0bbe EC040000 		.4byte	.LASF169
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 232


 10363 0bc2 07       		.byte	0x7
 10364 0bc3 0B02     		.2byte	0x20b
 10365 0bc5 8B0B0000 		.4byte	0xb8b
 10366 0bc9 16       		.uleb128 0x16
 10367 0bca 01       		.byte	0x1
 10368 0bcb 2C000000 		.4byte	0x2c
 10369 0bcf 07       		.byte	0x7
 10370 0bd0 0D02     		.2byte	0x20d
 10371 0bd2 F50B0000 		.4byte	0xbf5
 10372 0bd6 0A       		.uleb128 0xa
 10373 0bd7 A1010000 		.4byte	.LASF170
 10374 0bdb 00       		.byte	0
 10375 0bdc 0A       		.uleb128 0xa
 10376 0bdd 36070000 		.4byte	.LASF171
 10377 0be1 01       		.byte	0x1
 10378 0be2 0A       		.uleb128 0xa
 10379 0be3 D7070000 		.4byte	.LASF172
 10380 0be7 02       		.byte	0x2
 10381 0be8 0A       		.uleb128 0xa
 10382 0be9 50030000 		.4byte	.LASF173
 10383 0bed 03       		.byte	0x3
 10384 0bee 0A       		.uleb128 0xa
 10385 0bef 13110000 		.4byte	.LASF174
 10386 0bf3 04       		.byte	0x4
 10387 0bf4 00       		.byte	0
 10388 0bf5 05       		.uleb128 0x5
 10389 0bf6 6E0D0000 		.4byte	.LASF175
 10390 0bfa 07       		.byte	0x7
 10391 0bfb 1402     		.2byte	0x214
 10392 0bfd C90B0000 		.4byte	0xbc9
 10393 0c01 17       		.uleb128 0x17
 10394 0c02 15050000 		.4byte	.LASF176
 10395 0c06 01       		.byte	0x1
 10396 0c07 62       		.byte	0x62
 10397 0c08 00000000 		.4byte	.LFB64
 10398 0c0c 18000000 		.4byte	.LFE64-.LFB64
 10399 0c10 01       		.uleb128 0x1
 10400 0c11 9C       		.byte	0x9c
 10401 0c12 17       		.uleb128 0x17
 10402 0c13 9A0F0000 		.4byte	.LASF177
 10403 0c17 01       		.byte	0x1
 10404 0c18 6D       		.byte	0x6d
 10405 0c19 00000000 		.4byte	.LFB65
 10406 0c1d 20000000 		.4byte	.LFE65-.LFB65
 10407 0c21 01       		.uleb128 0x1
 10408 0c22 9C       		.byte	0x9c
 10409 0c23 18       		.uleb128 0x18
 10410 0c24 2E090000 		.4byte	.LASF203
 10411 0c28 01       		.byte	0x1
 10412 0c29 86       		.byte	0x86
 10413 0c2a 00000000 		.4byte	.LFB66
 10414 0c2e F4010000 		.4byte	.LFE66-.LFB66
 10415 0c32 01       		.uleb128 0x1
 10416 0c33 9C       		.byte	0x9c
 10417 0c34 B80C0000 		.4byte	0xcb8
 10418 0c38 19       		.uleb128 0x19
 10419 0c39 CF000000 		.4byte	.LASF178
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 233


 10420 0c3d 01       		.byte	0x1
 10421 0c3e 8B       		.byte	0x8b
 10422 0c3f 81000000 		.4byte	0x81
 10423 0c43 05       		.uleb128 0x5
 10424 0c44 03       		.byte	0x3
 10425 0c45 00000000 		.4byte	state.10410
 10426 0c49 19       		.uleb128 0x19
 10427 0c4a EC050000 		.4byte	.LASF179
 10428 0c4e 01       		.byte	0x1
 10429 0c4f 8E       		.byte	0x8e
 10430 0c50 81000000 		.4byte	0x81
 10431 0c54 05       		.uleb128 0x5
 10432 0c55 03       		.byte	0x3
 10433 0c56 08000000 		.4byte	data_packet_index.10411
 10434 0c5a 19       		.uleb128 0x19
 10435 0c5b F40B0000 		.4byte	.LASF180
 10436 0c5f 01       		.byte	0x1
 10437 0c60 8F       		.byte	0x8f
 10438 0c61 81000000 		.4byte	0x81
 10439 0c65 05       		.uleb128 0x5
 10440 0c66 03       		.byte	0x3
 10441 0c67 07000000 		.4byte	data_packet_length.10412
 10442 0c6b 19       		.uleb128 0x19
 10443 0c6c FE050000 		.4byte	.LASF181
 10444 0c70 01       		.byte	0x1
 10445 0c71 90       		.byte	0x90
 10446 0c72 F6020000 		.4byte	0x2f6
 10447 0c76 05       		.uleb128 0x5
 10448 0c77 03       		.byte	0x3
 10449 0c78 0C000000 		.4byte	data_packet_buffer.10413
 10450 0c7c 19       		.uleb128 0x19
 10451 0c7d 240A0000 		.4byte	.LASF182
 10452 0c81 01       		.byte	0x1
 10453 0c82 91       		.byte	0x91
 10454 0c83 2E040000 		.4byte	0x42e
 10455 0c87 05       		.uleb128 0x5
 10456 0c88 03       		.byte	0x3
 10457 0c89 04000000 		.4byte	rx_queue.10414
 10458 0c8d 19       		.uleb128 0x19
 10459 0c8e 66010000 		.4byte	.LASF183
 10460 0c92 01       		.byte	0x1
 10461 0c93 94       		.byte	0x94
 10462 0c94 81000000 		.4byte	0x81
 10463 0c98 02       		.uleb128 0x2
 10464 0c99 91       		.byte	0x91
 10465 0c9a 75       		.sleb128 -11
 10466 0c9b 19       		.uleb128 0x19
 10467 0c9c B1050000 		.4byte	.LASF184
 10468 0ca0 01       		.byte	0x1
 10469 0ca1 95       		.byte	0x95
 10470 0ca2 81000000 		.4byte	0x81
 10471 0ca6 02       		.uleb128 0x2
 10472 0ca7 91       		.byte	0x91
 10473 0ca8 77       		.sleb128 -9
 10474 0ca9 19       		.uleb128 0x19
 10475 0caa EB060000 		.4byte	.LASF185
 10476 0cae 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 234


 10477 0caf 96       		.byte	0x96
 10478 0cb0 81000000 		.4byte	0x81
 10479 0cb4 02       		.uleb128 0x2
 10480 0cb5 91       		.byte	0x91
 10481 0cb6 76       		.sleb128 -10
 10482 0cb7 00       		.byte	0
 10483 0cb8 1A       		.uleb128 0x1a
 10484 0cb9 1D0E0000 		.4byte	.LASF191
 10485 0cbd 01       		.byte	0x1
 10486 0cbe 0C01     		.2byte	0x10c
 10487 0cc0 00000000 		.4byte	.LFB67
 10488 0cc4 28060000 		.4byte	.LFE67-.LFB67
 10489 0cc8 01       		.uleb128 0x1
 10490 0cc9 9C       		.byte	0x9c
 10491 0cca 380D0000 		.4byte	0xd38
 10492 0cce 1B       		.uleb128 0x1b
 10493 0ccf 28060000 		.4byte	.LASF186
 10494 0cd3 01       		.byte	0x1
 10495 0cd4 0E01     		.2byte	0x10e
 10496 0cd6 8D000000 		.4byte	0x8d
 10497 0cda 05       		.uleb128 0x5
 10498 0cdb 03       		.byte	0x3
 10499 0cdc 00000000 		.4byte	counter_calibration.10430
 10500 0ce0 1B       		.uleb128 0x1b
 10501 0ce1 690B0000 		.4byte	.LASF187
 10502 0ce5 01       		.byte	0x1
 10503 0ce6 0F01     		.2byte	0x10f
 10504 0ce8 8D000000 		.4byte	0x8d
 10505 0cec 05       		.uleb128 0x5
 10506 0ced 03       		.byte	0x3
 10507 0cee 02000000 		.4byte	counter_tension_func.10431
 10508 0cf2 1B       		.uleb128 0x1b
 10509 0cf3 7D010000 		.4byte	.LASF188
 10510 0cf7 01       		.byte	0x1
 10511 0cf8 1001     		.2byte	0x110
 10512 0cfa 380D0000 		.4byte	0xd38
 10513 0cfe 03       		.uleb128 0x3
 10514 0cff 91       		.byte	0x91
 10515 0d00 A86C     		.sleb128 -2520
 10516 0d02 1B       		.uleb128 0x1b
 10517 0d03 4C0B0000 		.4byte	.LASF189
 10518 0d07 01       		.byte	0x1
 10519 0d08 1201     		.2byte	0x112
 10520 0d0a 81000000 		.4byte	0x81
 10521 0d0e 02       		.uleb128 0x2
 10522 0d0f 91       		.byte	0x91
 10523 0d10 6E       		.sleb128 -18
 10524 0d11 1B       		.uleb128 0x1b
 10525 0d12 F3080000 		.4byte	.LASF190
 10526 0d16 01       		.byte	0x1
 10527 0d17 1301     		.2byte	0x113
 10528 0d19 81000000 		.4byte	0x81
 10529 0d1d 02       		.uleb128 0x2
 10530 0d1e 91       		.byte	0x91
 10531 0d1f 6D       		.sleb128 -19
 10532 0d20 1C       		.uleb128 0x1c
 10533 0d21 34010000 		.4byte	.LBB2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 235


 10534 0d25 B8000000 		.4byte	.LBE2-.LBB2
 10535 0d29 1D       		.uleb128 0x1d
 10536 0d2a 6900     		.ascii	"i\000"
 10537 0d2c 01       		.byte	0x1
 10538 0d2d 4D01     		.2byte	0x14d
 10539 0d2f 81000000 		.4byte	0x81
 10540 0d33 02       		.uleb128 0x2
 10541 0d34 91       		.byte	0x91
 10542 0d35 6F       		.sleb128 -17
 10543 0d36 00       		.byte	0
 10544 0d37 00       		.byte	0
 10545 0d38 07       		.uleb128 0x7
 10546 0d39 E3000000 		.4byte	0xe3
 10547 0d3d 490D0000 		.4byte	0xd49
 10548 0d41 1E       		.uleb128 0x1e
 10549 0d42 0E010000 		.4byte	0x10e
 10550 0d46 C309     		.2byte	0x9c3
 10551 0d48 00       		.byte	0
 10552 0d49 1A       		.uleb128 0x1a
 10553 0d4a 300E0000 		.4byte	.LASF192
 10554 0d4e 01       		.byte	0x1
 10555 0d4f 6502     		.2byte	0x265
 10556 0d51 00000000 		.4byte	.LFB68
 10557 0d55 B0050000 		.4byte	.LFE68-.LFB68
 10558 0d59 01       		.uleb128 0x1
 10559 0d5a 9C       		.byte	0x9c
 10560 0d5b FF0D0000 		.4byte	0xdff
 10561 0d5f 1F       		.uleb128 0x1f
 10562 0d60 85020000 		.4byte	.LASF193
 10563 0d64 01       		.byte	0x1
 10564 0d65 6502     		.2byte	0x265
 10565 0d67 81000000 		.4byte	0x81
 10566 0d6b 02       		.uleb128 0x2
 10567 0d6c 91       		.byte	0x91
 10568 0d6d 5F       		.sleb128 -33
 10569 0d6e 1F       		.uleb128 0x1f
 10570 0d6f 11060000 		.4byte	.LASF194
 10571 0d73 01       		.byte	0x1
 10572 0d74 6502     		.2byte	0x265
 10573 0d76 FF0D0000 		.4byte	0xdff
 10574 0d7a 02       		.uleb128 0x2
 10575 0d7b 91       		.byte	0x91
 10576 0d7c 58       		.sleb128 -40
 10577 0d7d 1F       		.uleb128 0x1f
 10578 0d7e 4C100000 		.4byte	.LASF195
 10579 0d82 01       		.byte	0x1
 10580 0d83 6502     		.2byte	0x265
 10581 0d85 FF0D0000 		.4byte	0xdff
 10582 0d89 02       		.uleb128 0x2
 10583 0d8a 91       		.byte	0x91
 10584 0d8b 54       		.sleb128 -44
 10585 0d8c 1B       		.uleb128 0x1b
 10586 0d8d 88040000 		.4byte	.LASF196
 10587 0d91 01       		.byte	0x1
 10588 0d92 6702     		.2byte	0x267
 10589 0d94 BD000000 		.4byte	0xbd
 10590 0d98 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 236


 10591 0d99 91       		.byte	0x91
 10592 0d9a 74       		.sleb128 -12
 10593 0d9b 1B       		.uleb128 0x1b
 10594 0d9c AC030000 		.4byte	.LASF197
 10595 0da0 01       		.byte	0x1
 10596 0da1 6802     		.2byte	0x268
 10597 0da3 BD000000 		.4byte	0xbd
 10598 0da7 02       		.uleb128 0x2
 10599 0da8 91       		.byte	0x91
 10600 0da9 68       		.sleb128 -24
 10601 0daa 1B       		.uleb128 0x1b
 10602 0dab B6030000 		.4byte	.LASF198
 10603 0daf 01       		.byte	0x1
 10604 0db0 6802     		.2byte	0x268
 10605 0db2 BD000000 		.4byte	0xbd
 10606 0db6 02       		.uleb128 0x2
 10607 0db7 91       		.byte	0x91
 10608 0db8 64       		.sleb128 -28
 10609 0db9 1D       		.uleb128 0x1d
 10610 0dba 4D4F5400 		.ascii	"MOT\000"
 10611 0dbe 01       		.byte	0x1
 10612 0dbf 6902     		.2byte	0x269
 10613 0dc1 050E0000 		.4byte	0xe05
 10614 0dc5 02       		.uleb128 0x2
 10615 0dc6 91       		.byte	0x91
 10616 0dc7 70       		.sleb128 -16
 10617 0dc8 1B       		.uleb128 0x1b
 10618 0dc9 17100000 		.4byte	.LASF199
 10619 0dcd 01       		.byte	0x1
 10620 0dce 6A02     		.2byte	0x26a
 10621 0dd0 81000000 		.4byte	0x81
 10622 0dd4 02       		.uleb128 0x2
 10623 0dd5 91       		.byte	0x91
 10624 0dd6 6F       		.sleb128 -17
 10625 0dd7 1B       		.uleb128 0x1b
 10626 0dd8 180A0000 		.4byte	.LASF200
 10627 0ddc 01       		.byte	0x1
 10628 0ddd 6C02     		.2byte	0x26c
 10629 0ddf EA060000 		.4byte	0x6ea
 10630 0de3 05       		.uleb128 0x5
 10631 0de4 03       		.byte	0x3
 10632 0de5 8C000000 		.4byte	current_emg.10454
 10633 0de9 20       		.uleb128 0x20
 10634 0dea 00000000 		.4byte	.Ldebug_ranges0+0
 10635 0dee 1B       		.uleb128 0x1b
 10636 0def C5000000 		.4byte	.LASF201
 10637 0df3 01       		.byte	0x1
 10638 0df4 9102     		.2byte	0x291
 10639 0df6 BD000000 		.4byte	0xbd
 10640 0dfa 02       		.uleb128 0x2
 10641 0dfb 91       		.byte	0x91
 10642 0dfc 60       		.sleb128 -32
 10643 0dfd 00       		.byte	0
 10644 0dfe 00       		.byte	0
 10645 0dff 0C       		.uleb128 0xc
 10646 0e00 04       		.byte	0x4
 10647 0e01 A5010000 		.4byte	0x1a5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 237


 10648 0e05 0C       		.uleb128 0xc
 10649 0e06 04       		.byte	0x4
 10650 0e07 3E040000 		.4byte	0x43e
 10651 0e0b 21       		.uleb128 0x21
 10652 0e0c 5B0F0000 		.4byte	.LASF202
 10653 0e10 01       		.byte	0x1
 10654 0e11 3E03     		.2byte	0x33e
 10655 0e13 00000000 		.4byte	.LFB69
 10656 0e17 18000000 		.4byte	.LFE69-.LFB69
 10657 0e1b 01       		.uleb128 0x1
 10658 0e1c 9C       		.byte	0x9c
 10659 0e1d 4F0E0000 		.4byte	0xe4f
 10660 0e21 1F       		.uleb128 0x1f
 10661 0e22 85020000 		.4byte	.LASF193
 10662 0e26 01       		.byte	0x1
 10663 0e27 3E03     		.2byte	0x33e
 10664 0e29 81000000 		.4byte	0x81
 10665 0e2d 02       		.uleb128 0x2
 10666 0e2e 91       		.byte	0x91
 10667 0e2f 77       		.sleb128 -9
 10668 0e30 1F       		.uleb128 0x1f
 10669 0e31 11060000 		.4byte	.LASF194
 10670 0e35 01       		.byte	0x1
 10671 0e36 3E03     		.2byte	0x33e
 10672 0e38 FF0D0000 		.4byte	0xdff
 10673 0e3c 02       		.uleb128 0x2
 10674 0e3d 91       		.byte	0x91
 10675 0e3e 70       		.sleb128 -16
 10676 0e3f 1F       		.uleb128 0x1f
 10677 0e40 4C100000 		.4byte	.LASF195
 10678 0e44 01       		.byte	0x1
 10679 0e45 3E03     		.2byte	0x33e
 10680 0e47 FF0D0000 		.4byte	0xdff
 10681 0e4b 02       		.uleb128 0x2
 10682 0e4c 91       		.byte	0x91
 10683 0e4d 6C       		.sleb128 -20
 10684 0e4e 00       		.byte	0
 10685 0e4f 22       		.uleb128 0x22
 10686 0e50 5E050000 		.4byte	.LASF204
 10687 0e54 01       		.byte	0x1
 10688 0e55 9203     		.2byte	0x392
 10689 0e57 00000000 		.4byte	.LFB70
 10690 0e5b 08070000 		.4byte	.LFE70-.LFB70
 10691 0e5f 01       		.uleb128 0x1
 10692 0e60 9C       		.byte	0x9c
 10693 0e61 06100000 		.4byte	0x1006
 10694 0e65 1B       		.uleb128 0x1b
 10695 0e66 20010000 		.4byte	.LASF205
 10696 0e6a 01       		.byte	0x1
 10697 0e6b 9403     		.2byte	0x394
 10698 0e6d BD000000 		.4byte	0xbd
 10699 0e71 02       		.uleb128 0x2
 10700 0e72 91       		.byte	0x91
 10701 0e73 74       		.sleb128 -12
 10702 0e74 1B       		.uleb128 0x1b
 10703 0e75 0B0B0000 		.4byte	.LASF206
 10704 0e79 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 238


 10705 0e7a 9503     		.2byte	0x395
 10706 0e7c BD000000 		.4byte	0xbd
 10707 0e80 03       		.uleb128 0x3
 10708 0e81 91       		.byte	0x91
 10709 0e82 B07F     		.sleb128 -80
 10710 0e84 1B       		.uleb128 0x1b
 10711 0e85 280F0000 		.4byte	.LASF207
 10712 0e89 01       		.byte	0x1
 10713 0e8a 9603     		.2byte	0x396
 10714 0e8c BD000000 		.4byte	0xbd
 10715 0e90 03       		.uleb128 0x3
 10716 0e91 91       		.byte	0x91
 10717 0e92 AC7F     		.sleb128 -84
 10718 0e94 1B       		.uleb128 0x1b
 10719 0e95 5E0A0000 		.4byte	.LASF208
 10720 0e99 01       		.byte	0x1
 10721 0e9a 9703     		.2byte	0x397
 10722 0e9c BD000000 		.4byte	0xbd
 10723 0ea0 02       		.uleb128 0x2
 10724 0ea1 91       		.byte	0x91
 10725 0ea2 70       		.sleb128 -16
 10726 0ea3 1B       		.uleb128 0x1b
 10727 0ea4 4C0B0000 		.4byte	.LASF189
 10728 0ea8 01       		.byte	0x1
 10729 0ea9 9903     		.2byte	0x399
 10730 0eab 81000000 		.4byte	0x81
 10731 0eaf 02       		.uleb128 0x2
 10732 0eb0 91       		.byte	0x91
 10733 0eb1 6F       		.sleb128 -17
 10734 0eb2 1B       		.uleb128 0x1b
 10735 0eb3 1B030000 		.4byte	.LASF209
 10736 0eb7 01       		.byte	0x1
 10737 0eb8 9B03     		.2byte	0x39b
 10738 0eba 050E0000 		.4byte	0xe05
 10739 0ebe 02       		.uleb128 0x2
 10740 0ebf 91       		.byte	0x91
 10741 0ec0 68       		.sleb128 -24
 10742 0ec1 1B       		.uleb128 0x1b
 10743 0ec2 8F020000 		.4byte	.LASF210
 10744 0ec6 01       		.byte	0x1
 10745 0ec7 9C03     		.2byte	0x39c
 10746 0ec9 81000000 		.4byte	0x81
 10747 0ecd 02       		.uleb128 0x2
 10748 0ece 91       		.byte	0x91
 10749 0ecf 67       		.sleb128 -25
 10750 0ed0 1D       		.uleb128 0x1d
 10751 0ed1 6B5F7000 		.ascii	"k_p\000"
 10752 0ed5 01       		.byte	0x1
 10753 0ed6 9E03     		.2byte	0x39e
 10754 0ed8 BD000000 		.4byte	0xbd
 10755 0edc 02       		.uleb128 0x2
 10756 0edd 91       		.byte	0x91
 10757 0ede 60       		.sleb128 -32
 10758 0edf 1D       		.uleb128 0x1d
 10759 0ee0 6B5F6900 		.ascii	"k_i\000"
 10760 0ee4 01       		.byte	0x1
 10761 0ee5 9F03     		.2byte	0x39f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 239


 10762 0ee7 BD000000 		.4byte	0xbd
 10763 0eeb 02       		.uleb128 0x2
 10764 0eec 91       		.byte	0x91
 10765 0eed 5C       		.sleb128 -36
 10766 0eee 1D       		.uleb128 0x1d
 10767 0eef 6B5F6400 		.ascii	"k_d\000"
 10768 0ef3 01       		.byte	0x1
 10769 0ef4 A003     		.2byte	0x3a0
 10770 0ef6 BD000000 		.4byte	0xbd
 10771 0efa 02       		.uleb128 0x2
 10772 0efb 91       		.byte	0x91
 10773 0efc 58       		.sleb128 -40
 10774 0efd 1B       		.uleb128 0x1b
 10775 0efe 070C0000 		.4byte	.LASF72
 10776 0f02 01       		.byte	0x1
 10777 0f03 A203     		.2byte	0x3a2
 10778 0f05 BD000000 		.4byte	0xbd
 10779 0f09 02       		.uleb128 0x2
 10780 0f0a 91       		.byte	0x91
 10781 0f0b 54       		.sleb128 -44
 10782 0f0c 1B       		.uleb128 0x1b
 10783 0f0d FE040000 		.4byte	.LASF73
 10784 0f11 01       		.byte	0x1
 10785 0f12 A303     		.2byte	0x3a3
 10786 0f14 BD000000 		.4byte	0xbd
 10787 0f18 02       		.uleb128 0x2
 10788 0f19 91       		.byte	0x91
 10789 0f1a 50       		.sleb128 -48
 10790 0f1b 1B       		.uleb128 0x1b
 10791 0f1c E6040000 		.4byte	.LASF74
 10792 0f20 01       		.byte	0x1
 10793 0f21 A403     		.2byte	0x3a4
 10794 0f23 BD000000 		.4byte	0xbd
 10795 0f27 02       		.uleb128 0x2
 10796 0f28 91       		.byte	0x91
 10797 0f29 4C       		.sleb128 -52
 10798 0f2a 1B       		.uleb128 0x1b
 10799 0f2b 010F0000 		.4byte	.LASF75
 10800 0f2f 01       		.byte	0x1
 10801 0f30 A603     		.2byte	0x3a6
 10802 0f32 BD000000 		.4byte	0xbd
 10803 0f36 02       		.uleb128 0x2
 10804 0f37 91       		.byte	0x91
 10805 0f38 48       		.sleb128 -56
 10806 0f39 1B       		.uleb128 0x1b
 10807 0f3a 9A050000 		.4byte	.LASF76
 10808 0f3e 01       		.byte	0x1
 10809 0f3f A703     		.2byte	0x3a7
 10810 0f41 BD000000 		.4byte	0xbd
 10811 0f45 02       		.uleb128 0x2
 10812 0f46 91       		.byte	0x91
 10813 0f47 44       		.sleb128 -60
 10814 0f48 1B       		.uleb128 0x1b
 10815 0f49 DF0D0000 		.4byte	.LASF77
 10816 0f4d 01       		.byte	0x1
 10817 0f4e A803     		.2byte	0x3a8
 10818 0f50 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 240


 10819 0f54 02       		.uleb128 0x2
 10820 0f55 91       		.byte	0x91
 10821 0f56 40       		.sleb128 -64
 10822 0f57 1B       		.uleb128 0x1b
 10823 0f58 A8050000 		.4byte	.LASF78
 10824 0f5c 01       		.byte	0x1
 10825 0f5d AA03     		.2byte	0x3aa
 10826 0f5f BD000000 		.4byte	0xbd
 10827 0f63 03       		.uleb128 0x3
 10828 0f64 91       		.byte	0x91
 10829 0f65 BC7F     		.sleb128 -68
 10830 0f67 1B       		.uleb128 0x1b
 10831 0f68 E2060000 		.4byte	.LASF79
 10832 0f6c 01       		.byte	0x1
 10833 0f6d AB03     		.2byte	0x3ab
 10834 0f6f BD000000 		.4byte	0xbd
 10835 0f73 03       		.uleb128 0x3
 10836 0f74 91       		.byte	0x91
 10837 0f75 B87F     		.sleb128 -72
 10838 0f77 1B       		.uleb128 0x1b
 10839 0f78 3D110000 		.4byte	.LASF80
 10840 0f7c 01       		.byte	0x1
 10841 0f7d AC03     		.2byte	0x3ac
 10842 0f7f BD000000 		.4byte	0xbd
 10843 0f83 03       		.uleb128 0x3
 10844 0f84 91       		.byte	0x91
 10845 0f85 B47F     		.sleb128 -76
 10846 0f87 1B       		.uleb128 0x1b
 10847 0f88 75050000 		.4byte	.LASF211
 10848 0f8c 01       		.byte	0x1
 10849 0f8d B003     		.2byte	0x3b0
 10850 0f8f BD000000 		.4byte	0xbd
 10851 0f93 05       		.uleb128 0x5
 10852 0f94 03       		.byte	0x3
 10853 0f95 90000000 		.4byte	pos_error_sum.10501
 10854 0f99 1B       		.uleb128 0x1b
 10855 0f9a F4030000 		.4byte	.LASF212
 10856 0f9e 01       		.byte	0x1
 10857 0f9f B103     		.2byte	0x3b1
 10858 0fa1 BD000000 		.4byte	0xbd
 10859 0fa5 05       		.uleb128 0x5
 10860 0fa6 03       		.byte	0x3
 10861 0fa7 9C000000 		.4byte	curr_error_sum.10502
 10862 0fab 1B       		.uleb128 0x1b
 10863 0fac B60A0000 		.4byte	.LASF213
 10864 0fb0 01       		.byte	0x1
 10865 0fb1 B303     		.2byte	0x3b3
 10866 0fb3 BD000000 		.4byte	0xbd
 10867 0fb7 05       		.uleb128 0x5
 10868 0fb8 03       		.byte	0x3
 10869 0fb9 94000000 		.4byte	prev_pos_err.10503
 10870 0fbd 1B       		.uleb128 0x1b
 10871 0fbe E60B0000 		.4byte	.LASF214
 10872 0fc2 01       		.byte	0x1
 10873 0fc3 B403     		.2byte	0x3b4
 10874 0fc5 BD000000 		.4byte	0xbd
 10875 0fc9 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 241


 10876 0fca 03       		.byte	0x3
 10877 0fcb A0000000 		.4byte	prev_curr_err.10504
 10878 0fcf 1B       		.uleb128 0x1b
 10879 0fd0 420E0000 		.4byte	.LASF215
 10880 0fd4 01       		.byte	0x1
 10881 0fd5 B503     		.2byte	0x3b5
 10882 0fd7 BD000000 		.4byte	0xbd
 10883 0fdb 05       		.uleb128 0x5
 10884 0fdc 03       		.byte	0x3
 10885 0fdd A4000000 		.4byte	prev_pwm.10505
 10886 0fe1 1B       		.uleb128 0x1b
 10887 0fe2 04050000 		.4byte	.LASF216
 10888 0fe6 01       		.byte	0x1
 10889 0fe7 B703     		.2byte	0x3b7
 10890 0fe9 81000000 		.4byte	0x81
 10891 0fed 05       		.uleb128 0x5
 10892 0fee 03       		.byte	0x3
 10893 0fef 98000000 		.4byte	motor_dir.10506
 10894 0ff3 1B       		.uleb128 0x1b
 10895 0ff4 CD050000 		.4byte	.LASF217
 10896 0ff8 01       		.byte	0x1
 10897 0ff9 B803     		.2byte	0x3b8
 10898 0ffb 99000000 		.4byte	0x99
 10899 0fff 05       		.uleb128 0x5
 10900 1000 03       		.byte	0x3
 10901 1001 A8000000 		.4byte	position_counter.10507
 10902 1005 00       		.byte	0
 10903 1006 1A       		.uleb128 0x1a
 10904 1007 B0040000 		.4byte	.LASF218
 10905 100b 01       		.byte	0x1
 10906 100c C204     		.2byte	0x4c2
 10907 100e 00000000 		.4byte	.LFB71
 10908 1012 40080000 		.4byte	.LFE71-.LFB71
 10909 1016 01       		.uleb128 0x1
 10910 1017 9C       		.byte	0x9c
 10911 1018 BF110000 		.4byte	0x11bf
 10912 101c 23       		.uleb128 0x23
 10913 101d 69647800 		.ascii	"idx\000"
 10914 1021 01       		.byte	0x1
 10915 1022 C204     		.2byte	0x4c2
 10916 1024 81000000 		.4byte	0x81
 10917 1028 03       		.uleb128 0x3
 10918 1029 91       		.byte	0x91
 10919 102a A77F     		.sleb128 -89
 10920 102c 1B       		.uleb128 0x1b
 10921 102d 20010000 		.4byte	.LASF205
 10922 1031 01       		.byte	0x1
 10923 1032 C404     		.2byte	0x4c4
 10924 1034 BD000000 		.4byte	0xbd
 10925 1038 02       		.uleb128 0x2
 10926 1039 91       		.byte	0x91
 10927 103a 6C       		.sleb128 -20
 10928 103b 1B       		.uleb128 0x1b
 10929 103c 0B0B0000 		.4byte	.LASF206
 10930 1040 01       		.byte	0x1
 10931 1041 C504     		.2byte	0x4c5
 10932 1043 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 242


 10933 1047 03       		.uleb128 0x3
 10934 1048 91       		.byte	0x91
 10935 1049 AC7F     		.sleb128 -84
 10936 104b 1B       		.uleb128 0x1b
 10937 104c 280F0000 		.4byte	.LASF207
 10938 1050 01       		.byte	0x1
 10939 1051 C604     		.2byte	0x4c6
 10940 1053 BD000000 		.4byte	0xbd
 10941 1057 03       		.uleb128 0x3
 10942 1058 91       		.byte	0x91
 10943 1059 A87F     		.sleb128 -88
 10944 105b 1B       		.uleb128 0x1b
 10945 105c 5E0A0000 		.4byte	.LASF208
 10946 1060 01       		.byte	0x1
 10947 1061 C704     		.2byte	0x4c7
 10948 1063 BD000000 		.4byte	0xbd
 10949 1067 02       		.uleb128 0x2
 10950 1068 91       		.byte	0x91
 10951 1069 68       		.sleb128 -24
 10952 106a 1D       		.uleb128 0x1d
 10953 106b 4D4F5400 		.ascii	"MOT\000"
 10954 106f 01       		.byte	0x1
 10955 1070 C904     		.2byte	0x4c9
 10956 1072 050E0000 		.4byte	0xe05
 10957 1076 02       		.uleb128 0x2
 10958 1077 91       		.byte	0x91
 10959 1078 64       		.sleb128 -28
 10960 1079 1B       		.uleb128 0x1b
 10961 107a 17100000 		.4byte	.LASF199
 10962 107e 01       		.byte	0x1
 10963 107f CA04     		.2byte	0x4ca
 10964 1081 81000000 		.4byte	0x81
 10965 1085 02       		.uleb128 0x2
 10966 1086 91       		.byte	0x91
 10967 1087 63       		.sleb128 -29
 10968 1088 1D       		.uleb128 0x1d
 10969 1089 6B5F7000 		.ascii	"k_p\000"
 10970 108d 01       		.byte	0x1
 10971 108e CC04     		.2byte	0x4cc
 10972 1090 BD000000 		.4byte	0xbd
 10973 1094 02       		.uleb128 0x2
 10974 1095 91       		.byte	0x91
 10975 1096 5C       		.sleb128 -36
 10976 1097 1D       		.uleb128 0x1d
 10977 1098 6B5F6900 		.ascii	"k_i\000"
 10978 109c 01       		.byte	0x1
 10979 109d CD04     		.2byte	0x4cd
 10980 109f BD000000 		.4byte	0xbd
 10981 10a3 02       		.uleb128 0x2
 10982 10a4 91       		.byte	0x91
 10983 10a5 58       		.sleb128 -40
 10984 10a6 1D       		.uleb128 0x1d
 10985 10a7 6B5F6400 		.ascii	"k_d\000"
 10986 10ab 01       		.byte	0x1
 10987 10ac CE04     		.2byte	0x4ce
 10988 10ae BD000000 		.4byte	0xbd
 10989 10b2 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 243


 10990 10b3 91       		.byte	0x91
 10991 10b4 54       		.sleb128 -44
 10992 10b5 1B       		.uleb128 0x1b
 10993 10b6 070C0000 		.4byte	.LASF72
 10994 10ba 01       		.byte	0x1
 10995 10bb D004     		.2byte	0x4d0
 10996 10bd BD000000 		.4byte	0xbd
 10997 10c1 02       		.uleb128 0x2
 10998 10c2 91       		.byte	0x91
 10999 10c3 50       		.sleb128 -48
 11000 10c4 1B       		.uleb128 0x1b
 11001 10c5 FE040000 		.4byte	.LASF73
 11002 10c9 01       		.byte	0x1
 11003 10ca D104     		.2byte	0x4d1
 11004 10cc BD000000 		.4byte	0xbd
 11005 10d0 02       		.uleb128 0x2
 11006 10d1 91       		.byte	0x91
 11007 10d2 4C       		.sleb128 -52
 11008 10d3 1B       		.uleb128 0x1b
 11009 10d4 E6040000 		.4byte	.LASF74
 11010 10d8 01       		.byte	0x1
 11011 10d9 D204     		.2byte	0x4d2
 11012 10db BD000000 		.4byte	0xbd
 11013 10df 02       		.uleb128 0x2
 11014 10e0 91       		.byte	0x91
 11015 10e1 48       		.sleb128 -56
 11016 10e2 1B       		.uleb128 0x1b
 11017 10e3 010F0000 		.4byte	.LASF75
 11018 10e7 01       		.byte	0x1
 11019 10e8 D404     		.2byte	0x4d4
 11020 10ea BD000000 		.4byte	0xbd
 11021 10ee 02       		.uleb128 0x2
 11022 10ef 91       		.byte	0x91
 11023 10f0 44       		.sleb128 -60
 11024 10f1 1B       		.uleb128 0x1b
 11025 10f2 9A050000 		.4byte	.LASF76
 11026 10f6 01       		.byte	0x1
 11027 10f7 D504     		.2byte	0x4d5
 11028 10f9 BD000000 		.4byte	0xbd
 11029 10fd 02       		.uleb128 0x2
 11030 10fe 91       		.byte	0x91
 11031 10ff 40       		.sleb128 -64
 11032 1100 1B       		.uleb128 0x1b
 11033 1101 DF0D0000 		.4byte	.LASF77
 11034 1105 01       		.byte	0x1
 11035 1106 D604     		.2byte	0x4d6
 11036 1108 BD000000 		.4byte	0xbd
 11037 110c 03       		.uleb128 0x3
 11038 110d 91       		.byte	0x91
 11039 110e BC7F     		.sleb128 -68
 11040 1110 1B       		.uleb128 0x1b
 11041 1111 A8050000 		.4byte	.LASF78
 11042 1115 01       		.byte	0x1
 11043 1116 D804     		.2byte	0x4d8
 11044 1118 BD000000 		.4byte	0xbd
 11045 111c 03       		.uleb128 0x3
 11046 111d 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 244


 11047 111e B87F     		.sleb128 -72
 11048 1120 1B       		.uleb128 0x1b
 11049 1121 E2060000 		.4byte	.LASF79
 11050 1125 01       		.byte	0x1
 11051 1126 D904     		.2byte	0x4d9
 11052 1128 BD000000 		.4byte	0xbd
 11053 112c 03       		.uleb128 0x3
 11054 112d 91       		.byte	0x91
 11055 112e B47F     		.sleb128 -76
 11056 1130 1B       		.uleb128 0x1b
 11057 1131 3D110000 		.4byte	.LASF80
 11058 1135 01       		.byte	0x1
 11059 1136 DA04     		.2byte	0x4da
 11060 1138 BD000000 		.4byte	0xbd
 11061 113c 03       		.uleb128 0x3
 11062 113d 91       		.byte	0x91
 11063 113e B07F     		.sleb128 -80
 11064 1140 1B       		.uleb128 0x1b
 11065 1141 75050000 		.4byte	.LASF211
 11066 1145 01       		.byte	0x1
 11067 1146 DE04     		.2byte	0x4de
 11068 1148 94020000 		.4byte	0x294
 11069 114c 05       		.uleb128 0x5
 11070 114d 03       		.byte	0x3
 11071 114e AC000000 		.4byte	pos_error_sum.10534
 11072 1152 1B       		.uleb128 0x1b
 11073 1153 F4030000 		.4byte	.LASF212
 11074 1157 01       		.byte	0x1
 11075 1158 DF04     		.2byte	0x4df
 11076 115a 94020000 		.4byte	0x294
 11077 115e 05       		.uleb128 0x5
 11078 115f 03       		.byte	0x3
 11079 1160 C0000000 		.4byte	curr_error_sum.10535
 11080 1164 1B       		.uleb128 0x1b
 11081 1165 B60A0000 		.4byte	.LASF213
 11082 1169 01       		.byte	0x1
 11083 116a E104     		.2byte	0x4e1
 11084 116c 94020000 		.4byte	0x294
 11085 1170 05       		.uleb128 0x5
 11086 1171 03       		.byte	0x3
 11087 1172 B4000000 		.4byte	prev_pos_err.10536
 11088 1176 1B       		.uleb128 0x1b
 11089 1177 E60B0000 		.4byte	.LASF214
 11090 117b 01       		.byte	0x1
 11091 117c E204     		.2byte	0x4e2
 11092 117e 94020000 		.4byte	0x294
 11093 1182 05       		.uleb128 0x5
 11094 1183 03       		.byte	0x3
 11095 1184 C8000000 		.4byte	prev_curr_err.10537
 11096 1188 1B       		.uleb128 0x1b
 11097 1189 420E0000 		.4byte	.LASF215
 11098 118d 01       		.byte	0x1
 11099 118e E304     		.2byte	0x4e3
 11100 1190 94020000 		.4byte	0x294
 11101 1194 05       		.uleb128 0x5
 11102 1195 03       		.byte	0x3
 11103 1196 D0000000 		.4byte	prev_pwm.10538
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 245


 11104 119a 1B       		.uleb128 0x1b
 11105 119b 04050000 		.4byte	.LASF216
 11106 119f 01       		.byte	0x1
 11107 11a0 E504     		.2byte	0x4e5
 11108 11a2 EA060000 		.4byte	0x6ea
 11109 11a6 05       		.uleb128 0x5
 11110 11a7 03       		.byte	0x3
 11111 11a8 BC000000 		.4byte	motor_dir.10539
 11112 11ac 1B       		.uleb128 0x1b
 11113 11ad CD050000 		.4byte	.LASF217
 11114 11b1 01       		.byte	0x1
 11115 11b2 E604     		.2byte	0x4e6
 11116 11b4 6F030000 		.4byte	0x36f
 11117 11b8 05       		.uleb128 0x5
 11118 11b9 03       		.byte	0x3
 11119 11ba D8000000 		.4byte	position_counter.10540
 11120 11be 00       		.byte	0
 11121 11bf 1A       		.uleb128 0x1a
 11122 11c0 2A030000 		.4byte	.LASF219
 11123 11c4 01       		.byte	0x1
 11124 11c5 1006     		.2byte	0x610
 11125 11c7 00000000 		.4byte	.LFB72
 11126 11cb 10080000 		.4byte	.LFE72-.LFB72
 11127 11cf 01       		.uleb128 0x1
 11128 11d0 9C       		.byte	0x9c
 11129 11d1 59130000 		.4byte	0x1359
 11130 11d5 1F       		.uleb128 0x1f
 11131 11d6 9B000000 		.4byte	.LASF220
 11132 11da 01       		.byte	0x1
 11133 11db 1006     		.2byte	0x610
 11134 11dd 81000000 		.4byte	0x81
 11135 11e1 03       		.uleb128 0x3
 11136 11e2 91       		.byte	0x91
 11137 11e3 BF7F     		.sleb128 -65
 11138 11e5 1F       		.uleb128 0x1f
 11139 11e6 4A0A0000 		.4byte	.LASF221
 11140 11ea 01       		.byte	0x1
 11141 11eb 1006     		.2byte	0x610
 11142 11ed 81000000 		.4byte	0x81
 11143 11f1 03       		.uleb128 0x3
 11144 11f2 91       		.byte	0x91
 11145 11f3 BE7F     		.sleb128 -66
 11146 11f5 1B       		.uleb128 0x1b
 11147 11f6 9D060000 		.4byte	.LASF222
 11148 11fa 01       		.byte	0x1
 11149 11fb 1206     		.2byte	0x612
 11150 11fd 81000000 		.4byte	0x81
 11151 1201 02       		.uleb128 0x2
 11152 1202 91       		.byte	0x91
 11153 1203 67       		.sleb128 -25
 11154 1204 1D       		.uleb128 0x1d
 11155 1205 6A6A00   		.ascii	"jj\000"
 11156 1208 01       		.byte	0x1
 11157 1209 1506     		.2byte	0x615
 11158 120b 81000000 		.4byte	0x81
 11159 120f 02       		.uleb128 0x2
 11160 1210 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 246


 11161 1211 66       		.sleb128 -26
 11162 1212 1B       		.uleb128 0x1b
 11163 1213 03030000 		.4byte	.LASF223
 11164 1217 01       		.byte	0x1
 11165 1218 1706     		.2byte	0x617
 11166 121a 59130000 		.4byte	0x1359
 11167 121e 02       		.uleb128 0x2
 11168 121f 91       		.byte	0x91
 11169 1220 40       		.sleb128 -64
 11170 1221 1B       		.uleb128 0x1b
 11171 1222 880F0000 		.4byte	.LASF224
 11172 1226 01       		.byte	0x1
 11173 1227 1806     		.2byte	0x618
 11174 1229 B1000000 		.4byte	0xb1
 11175 122d 02       		.uleb128 0x2
 11176 122e 91       		.byte	0x91
 11177 122f 64       		.sleb128 -28
 11178 1230 1B       		.uleb128 0x1b
 11179 1231 D10B0000 		.4byte	.LASF225
 11180 1235 01       		.byte	0x1
 11181 1236 1906     		.2byte	0x619
 11182 1238 BD000000 		.4byte	0xbd
 11183 123c 02       		.uleb128 0x2
 11184 123d 91       		.byte	0x91
 11185 123e 54       		.sleb128 -44
 11186 123f 1B       		.uleb128 0x1b
 11187 1240 E60D0000 		.4byte	.LASF226
 11188 1244 01       		.byte	0x1
 11189 1245 1A06     		.2byte	0x61a
 11190 1247 BD000000 		.4byte	0xbd
 11191 124b 02       		.uleb128 0x2
 11192 124c 91       		.byte	0x91
 11193 124d 60       		.sleb128 -32
 11194 124e 1B       		.uleb128 0x1b
 11195 124f 3D040000 		.4byte	.LASF227
 11196 1253 01       		.byte	0x1
 11197 1254 1B06     		.2byte	0x61b
 11198 1256 BD000000 		.4byte	0xbd
 11199 125a 02       		.uleb128 0x2
 11200 125b 91       		.byte	0x91
 11201 125c 4C       		.sleb128 -52
 11202 125d 1B       		.uleb128 0x1b
 11203 125e C10D0000 		.4byte	.LASF228
 11204 1262 01       		.byte	0x1
 11205 1263 1C06     		.2byte	0x61c
 11206 1265 BD000000 		.4byte	0xbd
 11207 1269 02       		.uleb128 0x2
 11208 126a 91       		.byte	0x91
 11209 126b 50       		.sleb128 -48
 11210 126c 1B       		.uleb128 0x1b
 11211 126d C30A0000 		.4byte	.LASF229
 11212 1271 01       		.byte	0x1
 11213 1272 1D06     		.2byte	0x61d
 11214 1274 A5000000 		.4byte	0xa5
 11215 1278 02       		.uleb128 0x2
 11216 1279 91       		.byte	0x91
 11217 127a 5F       		.sleb128 -33
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 247


 11218 127b 1B       		.uleb128 0x1b
 11219 127c 560B0000 		.4byte	.LASF230
 11220 1280 01       		.byte	0x1
 11221 1281 1F06     		.2byte	0x61f
 11222 1283 69130000 		.4byte	0x1369
 11223 1287 05       		.uleb128 0x5
 11224 1288 03       		.byte	0x3
 11225 1289 E0000000 		.4byte	last_value_encoder.10563
 11226 128d 1B       		.uleb128 0x1b
 11227 128e 5F060000 		.4byte	.LASF231
 11228 1292 01       		.byte	0x1
 11229 1293 2006     		.2byte	0x620
 11230 1295 69130000 		.4byte	0x1369
 11231 1299 05       		.uleb128 0x5
 11232 129a 03       		.byte	0x3
 11233 129b F8000000 		.4byte	comp_value_encoder.10564
 11234 129f 1B       		.uleb128 0x1b
 11235 12a0 3E030000 		.4byte	.LASF232
 11236 12a4 01       		.byte	0x1
 11237 12a5 2106     		.2byte	0x621
 11238 12a7 7F130000 		.4byte	0x137f
 11239 12ab 05       		.uleb128 0x5
 11240 12ac 03       		.byte	0x3
 11241 12ad 10010000 		.4byte	error.10565
 11242 12b1 1B       		.uleb128 0x1b
 11243 12b2 9F0D0000 		.4byte	.LASF233
 11244 12b6 01       		.byte	0x1
 11245 12b7 2306     		.2byte	0x623
 11246 12b9 EA060000 		.4byte	0x6ea
 11247 12bd 05       		.uleb128 0x5
 11248 12be 03       		.byte	0x3
 11249 12bf 04000000 		.4byte	only_first_time.10566
 11250 12c3 1B       		.uleb128 0x1b
 11251 12c4 BE020000 		.4byte	.LASF234
 11252 12c8 01       		.byte	0x1
 11253 12c9 2406     		.2byte	0x624
 11254 12cb EA060000 		.4byte	0x6ea
 11255 12cf 05       		.uleb128 0x5
 11256 12d0 03       		.byte	0x3
 11257 12d1 68010000 		.4byte	safe_startup_motor_activation.10567
 11258 12d5 1B       		.uleb128 0x1b
 11259 12d6 7B000000 		.4byte	.LASF235
 11260 12da 01       		.byte	0x1
 11261 12db 2506     		.2byte	0x625
 11262 12dd EA060000 		.4byte	0x6ea
 11263 12e1 05       		.uleb128 0x5
 11264 12e2 03       		.byte	0x3
 11265 12e3 64010000 		.4byte	one_time_execute.10568
 11266 12e7 1B       		.uleb128 0x1b
 11267 12e8 6B090000 		.4byte	.LASF236
 11268 12ec 01       		.byte	0x1
 11269 12ed 2606     		.2byte	0x626
 11270 12ef 6F030000 		.4byte	0x36f
 11271 12f3 05       		.uleb128 0x5
 11272 12f4 03       		.byte	0x3
 11273 12f5 6C010000 		.4byte	count_startup_motor.10569
 11274 12f9 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 248


 11275 12fa 65030000 		.4byte	.LASF237
 11276 12fe 01       		.byte	0x1
 11277 12ff 2706     		.2byte	0x627
 11278 1301 EA060000 		.4byte	0x6ea
 11279 1305 05       		.uleb128 0x5
 11280 1306 03       		.byte	0x3
 11281 1307 60010000 		.4byte	pos_reconstruct.10570
 11282 130b 1B       		.uleb128 0x1b
 11283 130c BC080000 		.4byte	.LASF238
 11284 1310 01       		.byte	0x1
 11285 1311 2906     		.2byte	0x629
 11286 1313 69130000 		.4byte	0x1369
 11287 1317 05       		.uleb128 0x5
 11288 1318 03       		.byte	0x3
 11289 1319 18010000 		.4byte	v_value.10571
 11290 131d 1B       		.uleb128 0x1b
 11291 131e 34110000 		.4byte	.LASF239
 11292 1322 01       		.byte	0x1
 11293 1323 2A06     		.2byte	0x62a
 11294 1325 69130000 		.4byte	0x1369
 11295 1329 05       		.uleb128 0x5
 11296 132a 03       		.byte	0x3
 11297 132b 30010000 		.4byte	vv_value.10572
 11298 132f 1B       		.uleb128 0x1b
 11299 1330 6E010000 		.4byte	.LASF240
 11300 1334 01       		.byte	0x1
 11301 1335 2B06     		.2byte	0x62b
 11302 1337 69130000 		.4byte	0x1369
 11303 133b 05       		.uleb128 0x5
 11304 133c 03       		.byte	0x3
 11305 133d 48010000 		.4byte	vvv_value.10573
 11306 1341 1C       		.uleb128 0x1c
 11307 1342 94000000 		.4byte	.LBB5
 11308 1346 6A000000 		.4byte	.LBE5-.LBB5
 11309 134a 1D       		.uleb128 0x1d
 11310 134b 6A00     		.ascii	"j\000"
 11311 134d 01       		.byte	0x1
 11312 134e 3B06     		.2byte	0x63b
 11313 1350 68000000 		.4byte	0x68
 11314 1354 02       		.uleb128 0x2
 11315 1355 91       		.byte	0x91
 11316 1356 58       		.sleb128 -40
 11317 1357 00       		.byte	0
 11318 1358 00       		.byte	0
 11319 1359 07       		.uleb128 0x7
 11320 135a 99000000 		.4byte	0x99
 11321 135e 69130000 		.4byte	0x1369
 11322 1362 08       		.uleb128 0x8
 11323 1363 0E010000 		.4byte	0x10e
 11324 1367 02       		.byte	0x2
 11325 1368 00       		.byte	0
 11326 1369 07       		.uleb128 0x7
 11327 136a BD000000 		.4byte	0xbd
 11328 136e 7F130000 		.4byte	0x137f
 11329 1372 08       		.uleb128 0x8
 11330 1373 0E010000 		.4byte	0x10e
 11331 1377 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 249


 11332 1378 08       		.uleb128 0x8
 11333 1379 0E010000 		.4byte	0x10e
 11334 137d 02       		.byte	0x2
 11335 137e 00       		.byte	0
 11336 137f 07       		.uleb128 0x7
 11337 1380 81000000 		.4byte	0x81
 11338 1384 95130000 		.4byte	0x1395
 11339 1388 08       		.uleb128 0x8
 11340 1389 0E010000 		.4byte	0x10e
 11341 138d 01       		.byte	0x1
 11342 138e 08       		.uleb128 0x8
 11343 138f 0E010000 		.4byte	0x10e
 11344 1393 02       		.byte	0x2
 11345 1394 00       		.byte	0
 11346 1395 22       		.uleb128 0x22
 11347 1396 9C0C0000 		.4byte	.LASF241
 11348 139a 01       		.byte	0x1
 11349 139b E306     		.2byte	0x6e3
 11350 139d 00000000 		.4byte	.LFB73
 11351 13a1 98110000 		.4byte	.LFE73-.LFB73
 11352 13a5 01       		.uleb128 0x1
 11353 13a6 9C       		.byte	0x9c
 11354 13a7 6F140000 		.4byte	0x146f
 11355 13ab 1B       		.uleb128 0x1b
 11356 13ac 450C0000 		.4byte	.LASF242
 11357 13b0 01       		.byte	0x1
 11358 13b1 F706     		.2byte	0x6f7
 11359 13b3 BD000000 		.4byte	0xbd
 11360 13b7 02       		.uleb128 0x2
 11361 13b8 91       		.byte	0x91
 11362 13b9 64       		.sleb128 -28
 11363 13ba 1B       		.uleb128 0x1b
 11364 13bb 830D0000 		.4byte	.LASF243
 11365 13bf 01       		.byte	0x1
 11366 13c0 F906     		.2byte	0x6f9
 11367 13c2 8D000000 		.4byte	0x8d
 11368 13c6 05       		.uleb128 0x5
 11369 13c7 03       		.byte	0x3
 11370 13c8 7C010000 		.4byte	emg_counter_1.10590
 11371 13cc 1B       		.uleb128 0x1b
 11372 13cd 910D0000 		.4byte	.LASF244
 11373 13d1 01       		.byte	0x1
 11374 13d2 FA06     		.2byte	0x6fa
 11375 13d4 8D000000 		.4byte	0x8d
 11376 13d8 05       		.uleb128 0x5
 11377 13d9 03       		.byte	0x3
 11378 13da 7E010000 		.4byte	emg_counter_2.10591
 11379 13de 1B       		.uleb128 0x1b
 11380 13df 28020000 		.4byte	.LASF245
 11381 13e3 01       		.byte	0x1
 11382 13e4 FB06     		.2byte	0x6fb
 11383 13e6 8D000000 		.4byte	0x8d
 11384 13ea 05       		.uleb128 0x5
 11385 13eb 03       		.byte	0x3
 11386 13ec 84010000 		.4byte	UD_counter.10592
 11387 13f0 1B       		.uleb128 0x1b
 11388 13f1 5A030000 		.4byte	.LASF246
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 250


 11389 13f5 01       		.byte	0x1
 11390 13f6 FC06     		.2byte	0x6fc
 11391 13f8 8D000000 		.4byte	0x8d
 11392 13fc 05       		.uleb128 0x5
 11393 13fd 03       		.byte	0x3
 11394 13fe 8C010000 		.4byte	LR_counter.10593
 11395 1402 1B       		.uleb128 0x1b
 11396 1403 2D0A0000 		.4byte	.LASF247
 11397 1407 01       		.byte	0x1
 11398 1408 FD06     		.2byte	0x6fd
 11399 140a BD000000 		.4byte	0xbd
 11400 140e 05       		.uleb128 0x5
 11401 140f 03       		.byte	0x3
 11402 1410 80010000 		.4byte	UD_mean_value.10594
 11403 1414 1B       		.uleb128 0x1b
 11404 1415 9D100000 		.4byte	.LASF248
 11405 1419 01       		.byte	0x1
 11406 141a FE06     		.2byte	0x6fe
 11407 141c BD000000 		.4byte	0xbd
 11408 1420 05       		.uleb128 0x5
 11409 1421 03       		.byte	0x3
 11410 1422 88010000 		.4byte	LR_mean_value.10595
 11411 1426 1B       		.uleb128 0x1b
 11412 1427 4E020000 		.4byte	.LASF249
 11413 142b 01       		.byte	0x1
 11414 142c FF06     		.2byte	0x6ff
 11415 142e 81000000 		.4byte	0x81
 11416 1432 05       		.uleb128 0x5
 11417 1433 03       		.byte	0x3
 11418 1434 06000000 		.4byte	first_tension_valid.10596
 11419 1438 1B       		.uleb128 0x1b
 11420 1439 9C090000 		.4byte	.LASF250
 11421 143d 01       		.byte	0x1
 11422 143e 0107     		.2byte	0x701
 11423 1440 8D000000 		.4byte	0x8d
 11424 1444 05       		.uleb128 0x5
 11425 1445 03       		.byte	0x3
 11426 1446 74010000 		.4byte	count.10597
 11427 144a 1B       		.uleb128 0x1b
 11428 144b 5E010000 		.4byte	.LASF251
 11429 144f 01       		.byte	0x1
 11430 1450 0207     		.2byte	0x702
 11431 1452 99000000 		.4byte	0x99
 11432 1456 05       		.uleb128 0x5
 11433 1457 03       		.byte	0x3
 11434 1458 78010000 		.4byte	v_count.10598
 11435 145c 1D       		.uleb128 0x1d
 11436 145d 69647800 		.ascii	"idx\000"
 11437 1461 01       		.byte	0x1
 11438 1462 0307     		.2byte	0x703
 11439 1464 81000000 		.4byte	0x81
 11440 1468 05       		.uleb128 0x5
 11441 1469 03       		.byte	0x3
 11442 146a 76010000 		.4byte	idx.10599
 11443 146e 00       		.byte	0
 11444 146f 24       		.uleb128 0x24
 11445 1470 670C0000 		.4byte	.LASF252
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 251


 11446 1474 01       		.byte	0x1
 11447 1475 5109     		.2byte	0x951
 11448 1477 00000000 		.4byte	.LFB74
 11449 147b F4000000 		.4byte	.LFE74-.LFB74
 11450 147f 01       		.uleb128 0x1
 11451 1480 9C       		.byte	0x9c
 11452 1481 9D140000 		.4byte	0x149d
 11453 1485 1C       		.uleb128 0x1c
 11454 1486 06000000 		.4byte	.LBB6
 11455 148a D0000000 		.4byte	.LBE6-.LBB6
 11456 148e 1D       		.uleb128 0x1d
 11457 148f 6900     		.ascii	"i\000"
 11458 1491 01       		.byte	0x1
 11459 1492 5309     		.2byte	0x953
 11460 1494 81000000 		.4byte	0x81
 11461 1498 02       		.uleb128 0x2
 11462 1499 91       		.byte	0x91
 11463 149a 77       		.sleb128 -9
 11464 149b 00       		.byte	0
 11465 149c 00       		.byte	0
 11466 149d 21       		.uleb128 0x21
 11467 149e 75030000 		.4byte	.LASF253
 11468 14a2 01       		.byte	0x1
 11469 14a3 6D09     		.2byte	0x96d
 11470 14a5 00000000 		.4byte	.LFB75
 11471 14a9 78000000 		.4byte	.LFE75-.LFB75
 11472 14ad 01       		.uleb128 0x1
 11473 14ae 9C       		.byte	0x9c
 11474 14af F0140000 		.4byte	0x14f0
 11475 14b3 1F       		.uleb128 0x1f
 11476 14b4 CC0A0000 		.4byte	.LASF254
 11477 14b8 01       		.byte	0x1
 11478 14b9 6D09     		.2byte	0x96d
 11479 14bb 81000000 		.4byte	0x81
 11480 14bf 02       		.uleb128 0x2
 11481 14c0 91       		.byte	0x91
 11482 14c1 6F       		.sleb128 -17
 11483 14c2 1B       		.uleb128 0x1b
 11484 14c3 9D060000 		.4byte	.LASF222
 11485 14c7 01       		.byte	0x1
 11486 14c8 6F09     		.2byte	0x96f
 11487 14ca 81000000 		.4byte	0x81
 11488 14ce 02       		.uleb128 0x2
 11489 14cf 91       		.byte	0x91
 11490 14d0 73       		.sleb128 -13
 11491 14d1 1B       		.uleb128 0x1b
 11492 14d2 400B0000 		.4byte	.LASF255
 11493 14d6 01       		.byte	0x1
 11494 14d7 7009     		.2byte	0x970
 11495 14d9 8D000000 		.4byte	0x8d
 11496 14dd 02       		.uleb128 0x2
 11497 14de 91       		.byte	0x91
 11498 14df 76       		.sleb128 -10
 11499 14e0 1B       		.uleb128 0x1b
 11500 14e1 86070000 		.4byte	.LASF256
 11501 14e5 01       		.byte	0x1
 11502 14e6 7109     		.2byte	0x971
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 252


 11503 14e8 8D000000 		.4byte	0x8d
 11504 14ec 02       		.uleb128 0x2
 11505 14ed 91       		.byte	0x91
 11506 14ee 74       		.sleb128 -12
 11507 14ef 00       		.byte	0
 11508 14f0 22       		.uleb128 0x22
 11509 14f1 F9070000 		.4byte	.LASF257
 11510 14f5 01       		.byte	0x1
 11511 14f6 8109     		.2byte	0x981
 11512 14f8 00000000 		.4byte	.LFB76
 11513 14fc 08040000 		.4byte	.LFE76-.LFB76
 11514 1500 01       		.uleb128 0x1
 11515 1501 9C       		.byte	0x9c
 11516 1502 1C160000 		.4byte	0x161c
 11517 1506 1B       		.uleb128 0x1b
 11518 1507 09000000 		.4byte	.LASF258
 11519 150b 01       		.byte	0x1
 11520 150c 8209     		.2byte	0x982
 11521 150e 81000000 		.4byte	0x81
 11522 1512 05       		.uleb128 0x5
 11523 1513 03       		.byte	0x3
 11524 1514 8E010000 		.4byte	pos_cycle_status.10669
 11525 1518 1B       		.uleb128 0x1b
 11526 1519 CE0C0000 		.4byte	.LASF259
 11527 151d 01       		.byte	0x1
 11528 151e 8309     		.2byte	0x983
 11529 1520 EA060000 		.4byte	0x6ea
 11530 1524 05       		.uleb128 0x5
 11531 1525 03       		.byte	0x3
 11532 1526 98010000 		.4byte	emg_cycle_status.10670
 11533 152a 1B       		.uleb128 0x1b
 11534 152b 490F0000 		.4byte	.LASF260
 11535 152f 01       		.byte	0x1
 11536 1530 8409     		.2byte	0x984
 11537 1532 81000000 		.4byte	0x81
 11538 1536 05       		.uleb128 0x5
 11539 1537 03       		.byte	0x3
 11540 1538 9A010000 		.4byte	rest_cycle_status.10671
 11541 153c 1B       		.uleb128 0x1b
 11542 153d A7020000 		.4byte	.LASF261
 11543 1541 01       		.byte	0x1
 11544 1542 8509     		.2byte	0x985
 11545 1544 BD000000 		.4byte	0xbd
 11546 1548 05       		.uleb128 0x5
 11547 1549 03       		.byte	0x3
 11548 154a 08000000 		.4byte	bin_threshold.10672
 11549 154e 1B       		.uleb128 0x1b
 11550 154f B9010000 		.4byte	.LASF262
 11551 1553 01       		.byte	0x1
 11552 1554 8609     		.2byte	0x986
 11553 1556 BD000000 		.4byte	0xbd
 11554 155a 05       		.uleb128 0x5
 11555 155b 03       		.byte	0x3
 11556 155c 90010000 		.4byte	thr_pos.10673
 11557 1560 1B       		.uleb128 0x1b
 11558 1561 C8090000 		.4byte	.LASF263
 11559 1565 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 253


 11560 1566 8609     		.2byte	0x986
 11561 1568 BD000000 		.4byte	0xbd
 11562 156c 05       		.uleb128 0x5
 11563 156d 03       		.byte	0x3
 11564 156e 94010000 		.4byte	max_pos.10674
 11565 1572 1D       		.uleb128 0x1d
 11566 1573 6900     		.ascii	"i\000"
 11567 1575 01       		.byte	0x1
 11568 1576 8709     		.2byte	0x987
 11569 1578 81000000 		.4byte	0x81
 11570 157c 02       		.uleb128 0x2
 11571 157d 91       		.byte	0x91
 11572 157e 77       		.sleb128 -9
 11573 157f 1B       		.uleb128 0x1b
 11574 1580 0E050000 		.4byte	.LASF264
 11575 1584 01       		.byte	0x1
 11576 1585 8709     		.2byte	0x987
 11577 1587 81000000 		.4byte	0x81
 11578 158b 02       		.uleb128 0x2
 11579 158c 91       		.byte	0x91
 11580 158d 63       		.sleb128 -29
 11581 158e 1B       		.uleb128 0x1b
 11582 158f EB000000 		.4byte	.LASF265
 11583 1593 01       		.byte	0x1
 11584 1594 8709     		.2byte	0x987
 11585 1596 81000000 		.4byte	0x81
 11586 159a 02       		.uleb128 0x2
 11587 159b 91       		.byte	0x91
 11588 159c 62       		.sleb128 -30
 11589 159d 1B       		.uleb128 0x1b
 11590 159e 390C0000 		.4byte	.LASF266
 11591 15a2 01       		.byte	0x1
 11592 15a3 8709     		.2byte	0x987
 11593 15a5 81000000 		.4byte	0x81
 11594 15a9 02       		.uleb128 0x2
 11595 15aa 91       		.byte	0x91
 11596 15ab 61       		.sleb128 -31
 11597 15ac 1B       		.uleb128 0x1b
 11598 15ad 3F0C0000 		.4byte	.LASF267
 11599 15b1 01       		.byte	0x1
 11600 15b2 8709     		.2byte	0x987
 11601 15b4 81000000 		.4byte	0x81
 11602 15b8 02       		.uleb128 0x2
 11603 15b9 91       		.byte	0x91
 11604 15ba 60       		.sleb128 -32
 11605 15bb 1B       		.uleb128 0x1b
 11606 15bc 7B0C0000 		.4byte	.LASF268
 11607 15c0 01       		.byte	0x1
 11608 15c1 8809     		.2byte	0x988
 11609 15c3 BD000000 		.4byte	0xbd
 11610 15c7 02       		.uleb128 0x2
 11611 15c8 91       		.byte	0x91
 11612 15c9 6C       		.sleb128 -20
 11613 15ca 1B       		.uleb128 0x1b
 11614 15cb 54040000 		.4byte	.LASF269
 11615 15cf 01       		.byte	0x1
 11616 15d0 8809     		.2byte	0x988
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 254


 11617 15d2 BD000000 		.4byte	0xbd
 11618 15d6 02       		.uleb128 0x2
 11619 15d7 91       		.byte	0x91
 11620 15d8 68       		.sleb128 -24
 11621 15d9 1B       		.uleb128 0x1b
 11622 15da CC0D0000 		.4byte	.LASF270
 11623 15de 01       		.byte	0x1
 11624 15df 8809     		.2byte	0x988
 11625 15e1 BD000000 		.4byte	0xbd
 11626 15e5 02       		.uleb128 0x2
 11627 15e6 91       		.byte	0x91
 11628 15e7 70       		.sleb128 -16
 11629 15e8 1B       		.uleb128 0x1b
 11630 15e9 EF030000 		.4byte	.LASF271
 11631 15ed 01       		.byte	0x1
 11632 15ee 8909     		.2byte	0x989
 11633 15f0 BD000000 		.4byte	0xbd
 11634 15f4 02       		.uleb128 0x2
 11635 15f5 91       		.byte	0x91
 11636 15f6 64       		.sleb128 -28
 11637 15f7 1B       		.uleb128 0x1b
 11638 15f8 43060000 		.4byte	.LASF272
 11639 15fc 01       		.byte	0x1
 11640 15fd 8A09     		.2byte	0x98a
 11641 15ff 99000000 		.4byte	0x99
 11642 1603 05       		.uleb128 0x5
 11643 1604 03       		.byte	0x3
 11644 1605 9C010000 		.4byte	timer_value_s.10684
 11645 1609 1B       		.uleb128 0x1b
 11646 160a DE050000 		.4byte	.LASF273
 11647 160e 01       		.byte	0x1
 11648 160f 8A09     		.2byte	0x98a
 11649 1611 99000000 		.4byte	0x99
 11650 1615 05       		.uleb128 0x5
 11651 1616 03       		.byte	0x3
 11652 1617 A0010000 		.4byte	timer_value_e.10685
 11653 161b 00       		.byte	0
 11654 161c 22       		.uleb128 0x22
 11655 161d 720A0000 		.4byte	.LASF274
 11656 1621 01       		.byte	0x1
 11657 1622 F609     		.2byte	0x9f6
 11658 1624 00000000 		.4byte	.LFB77
 11659 1628 08010000 		.4byte	.LFE77-.LFB77
 11660 162c 01       		.uleb128 0x1
 11661 162d 9C       		.byte	0x9c
 11662 162e A2160000 		.4byte	0x16a2
 11663 1632 1B       		.uleb128 0x1b
 11664 1633 210F0000 		.4byte	.LASF275
 11665 1637 01       		.byte	0x1
 11666 1638 F809     		.2byte	0x9f8
 11667 163a EA000000 		.4byte	0xea
 11668 163e 02       		.uleb128 0x2
 11669 163f 91       		.byte	0x91
 11670 1640 64       		.sleb128 -28
 11671 1641 1B       		.uleb128 0x1b
 11672 1642 5C0C0000 		.4byte	.LASF276
 11673 1646 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 255


 11674 1647 F909     		.2byte	0x9f9
 11675 1649 81000000 		.4byte	0x81
 11676 164d 05       		.uleb128 0x5
 11677 164e 03       		.byte	0x3
 11678 164f A8010000 		.4byte	row_number.10707
 11679 1653 1B       		.uleb128 0x1b
 11680 1654 27040000 		.4byte	.LASF277
 11681 1658 01       		.byte	0x1
 11682 1659 FA09     		.2byte	0x9fa
 11683 165b 81000000 		.4byte	0x81
 11684 165f 02       		.uleb128 0x2
 11685 1660 91       		.byte	0x91
 11686 1661 77       		.sleb128 -9
 11687 1662 1B       		.uleb128 0x1b
 11688 1663 1E0D0000 		.4byte	.LASF278
 11689 1667 01       		.byte	0x1
 11690 1668 FB09     		.2byte	0x9fb
 11691 166a A2160000 		.4byte	0x16a2
 11692 166e 02       		.uleb128 0x2
 11693 166f 91       		.byte	0x91
 11694 1670 70       		.sleb128 -16
 11695 1671 1B       		.uleb128 0x1b
 11696 1672 F3000000 		.4byte	.LASF279
 11697 1676 01       		.byte	0x1
 11698 1677 FC09     		.2byte	0x9fc
 11699 1679 A2160000 		.4byte	0x16a2
 11700 167d 02       		.uleb128 0x2
 11701 167e 91       		.byte	0x91
 11702 167f 6C       		.sleb128 -20
 11703 1680 1B       		.uleb128 0x1b
 11704 1681 B5100000 		.4byte	.LASF280
 11705 1685 01       		.byte	0x1
 11706 1686 FD09     		.2byte	0x9fd
 11707 1688 81000000 		.4byte	0x81
 11708 168c 02       		.uleb128 0x2
 11709 168d 91       		.byte	0x91
 11710 168e 6B       		.sleb128 -21
 11711 168f 1B       		.uleb128 0x1b
 11712 1690 AE090000 		.4byte	.LASF281
 11713 1694 01       		.byte	0x1
 11714 1695 FE09     		.2byte	0x9fe
 11715 1697 A2160000 		.4byte	0x16a2
 11716 169b 05       		.uleb128 0x5
 11717 169c 03       		.byte	0x3
 11718 169d A4010000 		.4byte	m_addr.10712
 11719 16a1 00       		.byte	0
 11720 16a2 0C       		.uleb128 0xc
 11721 16a3 04       		.byte	0x4
 11722 16a4 81000000 		.4byte	0x81
 11723 16a8 07       		.uleb128 0x7
 11724 16a9 B8160000 		.4byte	0x16b8
 11725 16ad B8160000 		.4byte	0x16b8
 11726 16b1 08       		.uleb128 0x8
 11727 16b2 0E010000 		.4byte	0x10e
 11728 16b6 1C       		.byte	0x1c
 11729 16b7 00       		.byte	0
 11730 16b8 25       		.uleb128 0x25
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 256


 11731 16b9 81000000 		.4byte	0x81
 11732 16bd 19       		.uleb128 0x19
 11733 16be 290D0000 		.4byte	.LASF282
 11734 16c2 01       		.byte	0x1
 11735 16c3 40       		.byte	0x40
 11736 16c4 CE160000 		.4byte	0x16ce
 11737 16c8 05       		.uleb128 0x5
 11738 16c9 03       		.byte	0x3
 11739 16ca 00000000 		.4byte	pwm_preload_values
 11740 16ce 25       		.uleb128 0x25
 11741 16cf A8160000 		.4byte	0x16a8
 11742 16d3 26       		.uleb128 0x26
 11743 16d4 630E0000 		.4byte	.LASF283
 11744 16d8 08       		.byte	0x8
 11745 16d9 1207     		.2byte	0x712
 11746 16db DF160000 		.4byte	0x16df
 11747 16df 06       		.uleb128 0x6
 11748 16e0 76000000 		.4byte	0x76
 11749 16e4 07       		.uleb128 0x7
 11750 16e5 A5010000 		.4byte	0x1a5
 11751 16e9 F4160000 		.4byte	0x16f4
 11752 16ed 08       		.uleb128 0x8
 11753 16ee 0E010000 		.4byte	0x10e
 11754 16f2 01       		.byte	0x1
 11755 16f3 00       		.byte	0
 11756 16f4 26       		.uleb128 0x26
 11757 16f5 83060000 		.4byte	.LASF284
 11758 16f9 07       		.byte	0x7
 11759 16fa 1802     		.2byte	0x218
 11760 16fc E4160000 		.4byte	0x16e4
 11761 1700 26       		.uleb128 0x26
 11762 1701 4B040000 		.4byte	.LASF285
 11763 1705 07       		.byte	0x7
 11764 1706 1802     		.2byte	0x218
 11765 1708 E4160000 		.4byte	0x16e4
 11766 170c 26       		.uleb128 0x26
 11767 170d 020B0000 		.4byte	.LASF286
 11768 1711 07       		.byte	0x7
 11769 1712 1802     		.2byte	0x218
 11770 1714 E4160000 		.4byte	0x16e4
 11771 1718 07       		.uleb128 0x7
 11772 1719 E2010000 		.4byte	0x1e2
 11773 171d 28170000 		.4byte	0x1728
 11774 1721 08       		.uleb128 0x8
 11775 1722 0E010000 		.4byte	0x10e
 11776 1726 01       		.byte	0x1
 11777 1727 00       		.byte	0
 11778 1728 26       		.uleb128 0x26
 11779 1729 3C060000 		.4byte	.LASF287
 11780 172d 07       		.byte	0x7
 11781 172e 1902     		.2byte	0x219
 11782 1730 18170000 		.4byte	0x1718
 11783 1734 26       		.uleb128 0x26
 11784 1735 AB100000 		.4byte	.LASF288
 11785 1739 07       		.byte	0x7
 11786 173a 1902     		.2byte	0x219
 11787 173c 18170000 		.4byte	0x1718
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 257


 11788 1740 26       		.uleb128 0x26
 11789 1741 F70F0000 		.4byte	.LASF289
 11790 1745 07       		.byte	0x7
 11791 1746 1A02     		.2byte	0x21a
 11792 1748 63020000 		.4byte	0x263
 11793 174c 26       		.uleb128 0x26
 11794 174d F5020000 		.4byte	.LASF290
 11795 1751 07       		.byte	0x7
 11796 1752 1A02     		.2byte	0x21a
 11797 1754 63020000 		.4byte	0x263
 11798 1758 26       		.uleb128 0x26
 11799 1759 76000000 		.4byte	.LASF291
 11800 175d 07       		.byte	0x7
 11801 175e 1C02     		.2byte	0x21c
 11802 1760 B4020000 		.4byte	0x2b4
 11803 1764 26       		.uleb128 0x26
 11804 1765 7D0D0000 		.4byte	.LASF292
 11805 1769 07       		.byte	0x7
 11806 176a 1D02     		.2byte	0x21d
 11807 176c 70090000 		.4byte	0x970
 11808 1770 26       		.uleb128 0x26
 11809 1771 B5090000 		.4byte	.LASF293
 11810 1775 07       		.byte	0x7
 11811 1776 1D02     		.2byte	0x21d
 11812 1778 70090000 		.4byte	0x970
 11813 177c 26       		.uleb128 0x26
 11814 177d C4080000 		.4byte	.LASF294
 11815 1781 07       		.byte	0x7
 11816 1782 1E02     		.2byte	0x21e
 11817 1784 490B0000 		.4byte	0xb49
 11818 1788 07       		.uleb128 0x7
 11819 1789 210B0000 		.4byte	0xb21
 11820 178d 98170000 		.4byte	0x1798
 11821 1791 08       		.uleb128 0x8
 11822 1792 0E010000 		.4byte	0x10e
 11823 1796 01       		.byte	0x1
 11824 1797 00       		.byte	0
 11825 1798 26       		.uleb128 0x26
 11826 1799 EE0A0000 		.4byte	.LASF295
 11827 179d 07       		.byte	0x7
 11828 179e 1F02     		.2byte	0x21f
 11829 17a0 88170000 		.4byte	0x1788
 11830 17a4 26       		.uleb128 0x26
 11831 17a5 1F090000 		.4byte	.LASF296
 11832 17a9 07       		.byte	0x7
 11833 17aa 1F02     		.2byte	0x21f
 11834 17ac 88170000 		.4byte	0x1788
 11835 17b0 26       		.uleb128 0x26
 11836 17b1 D40A0000 		.4byte	.LASF297
 11837 17b5 07       		.byte	0x7
 11838 17b6 1F02     		.2byte	0x21f
 11839 17b8 88170000 		.4byte	0x1788
 11840 17bc 07       		.uleb128 0x7
 11841 17bd 210B0000 		.4byte	0xb21
 11842 17c1 CC170000 		.4byte	0x17cc
 11843 17c5 08       		.uleb128 0x8
 11844 17c6 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 258


 11845 17ca 02       		.byte	0x2
 11846 17cb 00       		.byte	0
 11847 17cc 26       		.uleb128 0x26
 11848 17cd CC040000 		.4byte	.LASF298
 11849 17d1 07       		.byte	0x7
 11850 17d2 2002     		.2byte	0x220
 11851 17d4 BC170000 		.4byte	0x17bc
 11852 17d8 07       		.uleb128 0x7
 11853 17d9 210B0000 		.4byte	0xb21
 11854 17dd E8170000 		.4byte	0x17e8
 11855 17e1 08       		.uleb128 0x8
 11856 17e2 0E010000 		.4byte	0x10e
 11857 17e6 07       		.byte	0x7
 11858 17e7 00       		.byte	0
 11859 17e8 26       		.uleb128 0x26
 11860 17e9 83010000 		.4byte	.LASF299
 11861 17ed 07       		.byte	0x7
 11862 17ee 2102     		.2byte	0x221
 11863 17f0 D8170000 		.4byte	0x17d8
 11864 17f4 26       		.uleb128 0x26
 11865 17f5 62020000 		.4byte	.LASF300
 11866 17f9 07       		.byte	0x7
 11867 17fa 2302     		.2byte	0x223
 11868 17fc 8D000000 		.4byte	0x8d
 11869 1800 26       		.uleb128 0x26
 11870 1801 A4080000 		.4byte	.LASF301
 11871 1805 07       		.byte	0x7
 11872 1806 2402     		.2byte	0x224
 11873 1808 8D000000 		.4byte	0x8d
 11874 180c 26       		.uleb128 0x26
 11875 180d 7E0B0000 		.4byte	.LASF302
 11876 1811 07       		.byte	0x7
 11877 1812 2502     		.2byte	0x225
 11878 1814 D5000000 		.4byte	0xd5
 11879 1818 26       		.uleb128 0x26
 11880 1819 0D0C0000 		.4byte	.LASF303
 11881 181d 07       		.byte	0x7
 11882 181e 2702     		.2byte	0x227
 11883 1820 94020000 		.4byte	0x294
 11884 1824 26       		.uleb128 0x26
 11885 1825 130F0000 		.4byte	.LASF304
 11886 1829 07       		.byte	0x7
 11887 182a 2802     		.2byte	0x228
 11888 182c EA060000 		.4byte	0x6ea
 11889 1830 26       		.uleb128 0x26
 11890 1831 030E0000 		.4byte	.LASF305
 11891 1835 07       		.byte	0x7
 11892 1836 2902     		.2byte	0x229
 11893 1838 EA060000 		.4byte	0x6ea
 11894 183c 26       		.uleb128 0x26
 11895 183d 8C050000 		.4byte	.LASF306
 11896 1841 07       		.byte	0x7
 11897 1842 2A02     		.2byte	0x22a
 11898 1844 94020000 		.4byte	0x294
 11899 1848 26       		.uleb128 0x26
 11900 1849 700E0000 		.4byte	.LASF307
 11901 184d 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 259


 11902 184e 2B02     		.2byte	0x22b
 11903 1850 94020000 		.4byte	0x294
 11904 1854 26       		.uleb128 0x26
 11905 1855 1A060000 		.4byte	.LASF308
 11906 1859 07       		.byte	0x7
 11907 185a 2D02     		.2byte	0x22d
 11908 185c F50B0000 		.4byte	0xbf5
 11909 1860 26       		.uleb128 0x26
 11910 1861 75040000 		.4byte	.LASF309
 11911 1865 07       		.byte	0x7
 11912 1866 2E02     		.2byte	0x22e
 11913 1868 BD0B0000 		.4byte	0xbbd
 11914 186c 26       		.uleb128 0x26
 11915 186d CB030000 		.4byte	.LASF310
 11916 1871 07       		.byte	0x7
 11917 1872 2F02     		.2byte	0x22f
 11918 1874 BD0B0000 		.4byte	0xbbd
 11919 1878 26       		.uleb128 0x26
 11920 1879 A00B0000 		.4byte	.LASF311
 11921 187d 07       		.byte	0x7
 11922 187e 3002     		.2byte	0x230
 11923 1880 BD0B0000 		.4byte	0xbbd
 11924 1884 26       		.uleb128 0x26
 11925 1885 27100000 		.4byte	.LASF312
 11926 1889 07       		.byte	0x7
 11927 188a 3102     		.2byte	0x231
 11928 188c BD0B0000 		.4byte	0xbbd
 11929 1890 26       		.uleb128 0x26
 11930 1891 A8070000 		.4byte	.LASF313
 11931 1895 07       		.byte	0x7
 11932 1896 3402     		.2byte	0x234
 11933 1898 81000000 		.4byte	0x81
 11934 189c 26       		.uleb128 0x26
 11935 189d B7000000 		.4byte	.LASF314
 11936 18a1 07       		.byte	0x7
 11937 18a2 3502     		.2byte	0x235
 11938 18a4 81000000 		.4byte	0x81
 11939 18a8 26       		.uleb128 0x26
 11940 18a9 E0030000 		.4byte	.LASF315
 11941 18ad 07       		.byte	0x7
 11942 18ae 3602     		.2byte	0x236
 11943 18b0 81000000 		.4byte	0x81
 11944 18b4 26       		.uleb128 0x26
 11945 18b5 D5000000 		.4byte	.LASF316
 11946 18b9 07       		.byte	0x7
 11947 18ba 3702     		.2byte	0x237
 11948 18bc 81000000 		.4byte	0x81
 11949 18c0 26       		.uleb128 0x26
 11950 18c1 DF100000 		.4byte	.LASF317
 11951 18c5 07       		.byte	0x7
 11952 18c6 3902     		.2byte	0x239
 11953 18c8 81000000 		.4byte	0x81
 11954 18cc 26       		.uleb128 0x26
 11955 18cd F50A0000 		.4byte	.LASF318
 11956 18d1 07       		.byte	0x7
 11957 18d2 3A02     		.2byte	0x23a
 11958 18d4 81000000 		.4byte	0x81
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 260


 11959 18d8 26       		.uleb128 0x26
 11960 18d9 31040000 		.4byte	.LASF319
 11961 18dd 07       		.byte	0x7
 11962 18de 3B02     		.2byte	0x23b
 11963 18e0 81000000 		.4byte	0x81
 11964 18e4 26       		.uleb128 0x26
 11965 18e5 92070000 		.4byte	.LASF320
 11966 18e9 07       		.byte	0x7
 11967 18ea 3C02     		.2byte	0x23c
 11968 18ec 81000000 		.4byte	0x81
 11969 18f0 26       		.uleb128 0x26
 11970 18f1 04090000 		.4byte	.LASF321
 11971 18f5 07       		.byte	0x7
 11972 18f6 3D02     		.2byte	0x23d
 11973 18f8 81000000 		.4byte	0x81
 11974 18fc 07       		.uleb128 0x7
 11975 18fd B1000000 		.4byte	0xb1
 11976 1901 0C190000 		.4byte	0x190c
 11977 1905 08       		.uleb128 0x8
 11978 1906 0E010000 		.4byte	0x10e
 11979 190a 0B       		.byte	0xb
 11980 190b 00       		.byte	0
 11981 190c 26       		.uleb128 0x26
 11982 190d D8030000 		.4byte	.LASF322
 11983 1911 07       		.byte	0x7
 11984 1912 4102     		.2byte	0x241
 11985 1914 FC180000 		.4byte	0x18fc
 11986 1918 26       		.uleb128 0x26
 11987 1919 5E100000 		.4byte	.LASF323
 11988 191d 07       		.byte	0x7
 11989 191e 4202     		.2byte	0x242
 11990 1920 81000000 		.4byte	0x81
 11991 1924 26       		.uleb128 0x26
 11992 1925 A7040000 		.4byte	.LASF324
 11993 1929 07       		.byte	0x7
 11994 192a 4502     		.2byte	0x245
 11995 192c A5000000 		.4byte	0xa5
 11996 1930 07       		.uleb128 0x7
 11997 1931 99000000 		.4byte	0x99
 11998 1935 40190000 		.4byte	0x1940
 11999 1939 08       		.uleb128 0x8
 12000 193a 0E010000 		.4byte	0x10e
 12001 193e 04       		.byte	0x4
 12002 193f 00       		.byte	0
 12003 1940 26       		.uleb128 0x26
 12004 1941 72060000 		.4byte	.LASF325
 12005 1945 07       		.byte	0x7
 12006 1946 4802     		.2byte	0x248
 12007 1948 30190000 		.4byte	0x1930
 12008 194c 26       		.uleb128 0x26
 12009 194d AC0C0000 		.4byte	.LASF326
 12010 1951 07       		.byte	0x7
 12011 1952 4902     		.2byte	0x249
 12012 1954 EA060000 		.4byte	0x6ea
 12013 1958 07       		.uleb128 0x7
 12014 1959 8D000000 		.4byte	0x8d
 12015 195d 6E190000 		.4byte	0x196e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 261


 12016 1961 08       		.uleb128 0x8
 12017 1962 0E010000 		.4byte	0x10e
 12018 1966 01       		.byte	0x1
 12019 1967 08       		.uleb128 0x8
 12020 1968 0E010000 		.4byte	0x10e
 12021 196c 04       		.byte	0x4
 12022 196d 00       		.byte	0
 12023 196e 26       		.uleb128 0x26
 12024 196f 330F0000 		.4byte	.LASF327
 12025 1973 07       		.byte	0x7
 12026 1974 4A02     		.2byte	0x24a
 12027 1976 58190000 		.4byte	0x1958
 12028 197a 07       		.uleb128 0x7
 12029 197b 81000000 		.4byte	0x81
 12030 197f 90190000 		.4byte	0x1990
 12031 1983 08       		.uleb128 0x8
 12032 1984 0E010000 		.4byte	0x10e
 12033 1988 01       		.byte	0x1
 12034 1989 08       		.uleb128 0x8
 12035 198a 0E010000 		.4byte	0x10e
 12036 198e 04       		.byte	0x4
 12037 198f 00       		.byte	0
 12038 1990 26       		.uleb128 0x26
 12039 1991 51060000 		.4byte	.LASF328
 12040 1995 07       		.byte	0x7
 12041 1996 4B02     		.2byte	0x24b
 12042 1998 7A190000 		.4byte	0x197a
 12043 199c 26       		.uleb128 0x26
 12044 199d D0090000 		.4byte	.LASF329
 12045 19a1 07       		.byte	0x7
 12046 19a2 4E02     		.2byte	0x24e
 12047 19a4 BD000000 		.4byte	0xbd
 12048 19a8 26       		.uleb128 0x26
 12049 19a9 6F050000 		.4byte	.LASF330
 12050 19ad 07       		.byte	0x7
 12051 19ae 5102     		.2byte	0x251
 12052 19b0 9F010000 		.4byte	0x19f
 12053 19b4 07       		.uleb128 0x7
 12054 19b5 A50A0000 		.4byte	0xaa5
 12055 19b9 C4190000 		.4byte	0x19c4
 12056 19bd 08       		.uleb128 0x8
 12057 19be 0E010000 		.4byte	0x10e
 12058 19c2 04       		.byte	0x4
 12059 19c3 00       		.byte	0
 12060 19c4 26       		.uleb128 0x26
 12061 19c5 C6040000 		.4byte	.LASF331
 12062 19c9 07       		.byte	0x7
 12063 19ca 5A02     		.2byte	0x25a
 12064 19cc B4190000 		.4byte	0x19b4
 12065 19d0 26       		.uleb128 0x26
 12066 19d1 BE050000 		.4byte	.LASF332
 12067 19d5 07       		.byte	0x7
 12068 19d6 5A02     		.2byte	0x25a
 12069 19d8 B4190000 		.4byte	0x19b4
 12070 19dc 26       		.uleb128 0x26
 12071 19dd 7C100000 		.4byte	.LASF333
 12072 19e1 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 262


 12073 19e2 6302     		.2byte	0x263
 12074 19e4 81000000 		.4byte	0x81
 12075 19e8 00       		.byte	0
 12076              		.section	.debug_abbrev,"",%progbits
 12077              	.Ldebug_abbrev0:
 12078 0000 01       		.uleb128 0x1
 12079 0001 11       		.uleb128 0x11
 12080 0002 01       		.byte	0x1
 12081 0003 25       		.uleb128 0x25
 12082 0004 0E       		.uleb128 0xe
 12083 0005 13       		.uleb128 0x13
 12084 0006 0B       		.uleb128 0xb
 12085 0007 03       		.uleb128 0x3
 12086 0008 0E       		.uleb128 0xe
 12087 0009 1B       		.uleb128 0x1b
 12088 000a 0E       		.uleb128 0xe
 12089 000b 55       		.uleb128 0x55
 12090 000c 17       		.uleb128 0x17
 12091 000d 11       		.uleb128 0x11
 12092 000e 01       		.uleb128 0x1
 12093 000f 10       		.uleb128 0x10
 12094 0010 17       		.uleb128 0x17
 12095 0011 00       		.byte	0
 12096 0012 00       		.byte	0
 12097 0013 02       		.uleb128 0x2
 12098 0014 24       		.uleb128 0x24
 12099 0015 00       		.byte	0
 12100 0016 0B       		.uleb128 0xb
 12101 0017 0B       		.uleb128 0xb
 12102 0018 3E       		.uleb128 0x3e
 12103 0019 0B       		.uleb128 0xb
 12104 001a 03       		.uleb128 0x3
 12105 001b 0E       		.uleb128 0xe
 12106 001c 00       		.byte	0
 12107 001d 00       		.byte	0
 12108 001e 03       		.uleb128 0x3
 12109 001f 16       		.uleb128 0x16
 12110 0020 00       		.byte	0
 12111 0021 03       		.uleb128 0x3
 12112 0022 0E       		.uleb128 0xe
 12113 0023 3A       		.uleb128 0x3a
 12114 0024 0B       		.uleb128 0xb
 12115 0025 3B       		.uleb128 0x3b
 12116 0026 0B       		.uleb128 0xb
 12117 0027 49       		.uleb128 0x49
 12118 0028 13       		.uleb128 0x13
 12119 0029 00       		.byte	0
 12120 002a 00       		.byte	0
 12121 002b 04       		.uleb128 0x4
 12122 002c 24       		.uleb128 0x24
 12123 002d 00       		.byte	0
 12124 002e 0B       		.uleb128 0xb
 12125 002f 0B       		.uleb128 0xb
 12126 0030 3E       		.uleb128 0x3e
 12127 0031 0B       		.uleb128 0xb
 12128 0032 03       		.uleb128 0x3
 12129 0033 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 263


 12130 0034 00       		.byte	0
 12131 0035 00       		.byte	0
 12132 0036 05       		.uleb128 0x5
 12133 0037 16       		.uleb128 0x16
 12134 0038 00       		.byte	0
 12135 0039 03       		.uleb128 0x3
 12136 003a 0E       		.uleb128 0xe
 12137 003b 3A       		.uleb128 0x3a
 12138 003c 0B       		.uleb128 0xb
 12139 003d 3B       		.uleb128 0x3b
 12140 003e 05       		.uleb128 0x5
 12141 003f 49       		.uleb128 0x49
 12142 0040 13       		.uleb128 0x13
 12143 0041 00       		.byte	0
 12144 0042 00       		.byte	0
 12145 0043 06       		.uleb128 0x6
 12146 0044 35       		.uleb128 0x35
 12147 0045 00       		.byte	0
 12148 0046 49       		.uleb128 0x49
 12149 0047 13       		.uleb128 0x13
 12150 0048 00       		.byte	0
 12151 0049 00       		.byte	0
 12152 004a 07       		.uleb128 0x7
 12153 004b 01       		.uleb128 0x1
 12154 004c 01       		.byte	0x1
 12155 004d 49       		.uleb128 0x49
 12156 004e 13       		.uleb128 0x13
 12157 004f 01       		.uleb128 0x1
 12158 0050 13       		.uleb128 0x13
 12159 0051 00       		.byte	0
 12160 0052 00       		.byte	0
 12161 0053 08       		.uleb128 0x8
 12162 0054 21       		.uleb128 0x21
 12163 0055 00       		.byte	0
 12164 0056 49       		.uleb128 0x49
 12165 0057 13       		.uleb128 0x13
 12166 0058 2F       		.uleb128 0x2f
 12167 0059 0B       		.uleb128 0xb
 12168 005a 00       		.byte	0
 12169 005b 00       		.byte	0
 12170 005c 09       		.uleb128 0x9
 12171 005d 04       		.uleb128 0x4
 12172 005e 01       		.byte	0x1
 12173 005f 03       		.uleb128 0x3
 12174 0060 0E       		.uleb128 0xe
 12175 0061 0B       		.uleb128 0xb
 12176 0062 0B       		.uleb128 0xb
 12177 0063 49       		.uleb128 0x49
 12178 0064 13       		.uleb128 0x13
 12179 0065 3A       		.uleb128 0x3a
 12180 0066 0B       		.uleb128 0xb
 12181 0067 3B       		.uleb128 0x3b
 12182 0068 0B       		.uleb128 0xb
 12183 0069 01       		.uleb128 0x1
 12184 006a 13       		.uleb128 0x13
 12185 006b 00       		.byte	0
 12186 006c 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 264


 12187 006d 0A       		.uleb128 0xa
 12188 006e 28       		.uleb128 0x28
 12189 006f 00       		.byte	0
 12190 0070 03       		.uleb128 0x3
 12191 0071 0E       		.uleb128 0xe
 12192 0072 1C       		.uleb128 0x1c
 12193 0073 0B       		.uleb128 0xb
 12194 0074 00       		.byte	0
 12195 0075 00       		.byte	0
 12196 0076 0B       		.uleb128 0xb
 12197 0077 13       		.uleb128 0x13
 12198 0078 00       		.byte	0
 12199 0079 03       		.uleb128 0x3
 12200 007a 0E       		.uleb128 0xe
 12201 007b 3C       		.uleb128 0x3c
 12202 007c 19       		.uleb128 0x19
 12203 007d 00       		.byte	0
 12204 007e 00       		.byte	0
 12205 007f 0C       		.uleb128 0xc
 12206 0080 0F       		.uleb128 0xf
 12207 0081 00       		.byte	0
 12208 0082 0B       		.uleb128 0xb
 12209 0083 0B       		.uleb128 0xb
 12210 0084 49       		.uleb128 0x49
 12211 0085 13       		.uleb128 0x13
 12212 0086 00       		.byte	0
 12213 0087 00       		.byte	0
 12214 0088 0D       		.uleb128 0xd
 12215 0089 13       		.uleb128 0x13
 12216 008a 01       		.byte	0x1
 12217 008b 03       		.uleb128 0x3
 12218 008c 0E       		.uleb128 0xe
 12219 008d 0B       		.uleb128 0xb
 12220 008e 0B       		.uleb128 0xb
 12221 008f 3A       		.uleb128 0x3a
 12222 0090 0B       		.uleb128 0xb
 12223 0091 3B       		.uleb128 0x3b
 12224 0092 0B       		.uleb128 0xb
 12225 0093 01       		.uleb128 0x1
 12226 0094 13       		.uleb128 0x13
 12227 0095 00       		.byte	0
 12228 0096 00       		.byte	0
 12229 0097 0E       		.uleb128 0xe
 12230 0098 0D       		.uleb128 0xd
 12231 0099 00       		.byte	0
 12232 009a 03       		.uleb128 0x3
 12233 009b 08       		.uleb128 0x8
 12234 009c 3A       		.uleb128 0x3a
 12235 009d 0B       		.uleb128 0xb
 12236 009e 3B       		.uleb128 0x3b
 12237 009f 0B       		.uleb128 0xb
 12238 00a0 49       		.uleb128 0x49
 12239 00a1 13       		.uleb128 0x13
 12240 00a2 38       		.uleb128 0x38
 12241 00a3 0B       		.uleb128 0xb
 12242 00a4 00       		.byte	0
 12243 00a5 00       		.byte	0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 265


 12244 00a6 0F       		.uleb128 0xf
 12245 00a7 0D       		.uleb128 0xd
 12246 00a8 00       		.byte	0
 12247 00a9 03       		.uleb128 0x3
 12248 00aa 0E       		.uleb128 0xe
 12249 00ab 3A       		.uleb128 0x3a
 12250 00ac 0B       		.uleb128 0xb
 12251 00ad 3B       		.uleb128 0x3b
 12252 00ae 0B       		.uleb128 0xb
 12253 00af 49       		.uleb128 0x49
 12254 00b0 13       		.uleb128 0x13
 12255 00b1 38       		.uleb128 0x38
 12256 00b2 0B       		.uleb128 0xb
 12257 00b3 00       		.byte	0
 12258 00b4 00       		.byte	0
 12259 00b5 10       		.uleb128 0x10
 12260 00b6 13       		.uleb128 0x13
 12261 00b7 01       		.byte	0x1
 12262 00b8 03       		.uleb128 0x3
 12263 00b9 0E       		.uleb128 0xe
 12264 00ba 0B       		.uleb128 0xb
 12265 00bb 0B       		.uleb128 0xb
 12266 00bc 3A       		.uleb128 0x3a
 12267 00bd 0B       		.uleb128 0xb
 12268 00be 3B       		.uleb128 0x3b
 12269 00bf 05       		.uleb128 0x5
 12270 00c0 01       		.uleb128 0x1
 12271 00c1 13       		.uleb128 0x13
 12272 00c2 00       		.byte	0
 12273 00c3 00       		.byte	0
 12274 00c4 11       		.uleb128 0x11
 12275 00c5 0D       		.uleb128 0xd
 12276 00c6 00       		.byte	0
 12277 00c7 03       		.uleb128 0x3
 12278 00c8 0E       		.uleb128 0xe
 12279 00c9 3A       		.uleb128 0x3a
 12280 00ca 0B       		.uleb128 0xb
 12281 00cb 3B       		.uleb128 0x3b
 12282 00cc 05       		.uleb128 0x5
 12283 00cd 49       		.uleb128 0x49
 12284 00ce 13       		.uleb128 0x13
 12285 00cf 38       		.uleb128 0x38
 12286 00d0 0B       		.uleb128 0xb
 12287 00d1 00       		.byte	0
 12288 00d2 00       		.byte	0
 12289 00d3 12       		.uleb128 0x12
 12290 00d4 0D       		.uleb128 0xd
 12291 00d5 00       		.byte	0
 12292 00d6 03       		.uleb128 0x3
 12293 00d7 08       		.uleb128 0x8
 12294 00d8 3A       		.uleb128 0x3a
 12295 00d9 0B       		.uleb128 0xb
 12296 00da 3B       		.uleb128 0x3b
 12297 00db 05       		.uleb128 0x5
 12298 00dc 49       		.uleb128 0x49
 12299 00dd 13       		.uleb128 0x13
 12300 00de 38       		.uleb128 0x38
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 266


 12301 00df 0B       		.uleb128 0xb
 12302 00e0 00       		.byte	0
 12303 00e1 00       		.byte	0
 12304 00e2 13       		.uleb128 0x13
 12305 00e3 13       		.uleb128 0x13
 12306 00e4 01       		.byte	0x1
 12307 00e5 03       		.uleb128 0x3
 12308 00e6 0E       		.uleb128 0xe
 12309 00e7 0B       		.uleb128 0xb
 12310 00e8 05       		.uleb128 0x5
 12311 00e9 3A       		.uleb128 0x3a
 12312 00ea 0B       		.uleb128 0xb
 12313 00eb 3B       		.uleb128 0x3b
 12314 00ec 05       		.uleb128 0x5
 12315 00ed 01       		.uleb128 0x1
 12316 00ee 13       		.uleb128 0x13
 12317 00ef 00       		.byte	0
 12318 00f0 00       		.byte	0
 12319 00f1 14       		.uleb128 0x14
 12320 00f2 0D       		.uleb128 0xd
 12321 00f3 00       		.byte	0
 12322 00f4 03       		.uleb128 0x3
 12323 00f5 08       		.uleb128 0x8
 12324 00f6 3A       		.uleb128 0x3a
 12325 00f7 0B       		.uleb128 0xb
 12326 00f8 3B       		.uleb128 0x3b
 12327 00f9 05       		.uleb128 0x5
 12328 00fa 49       		.uleb128 0x49
 12329 00fb 13       		.uleb128 0x13
 12330 00fc 38       		.uleb128 0x38
 12331 00fd 05       		.uleb128 0x5
 12332 00fe 00       		.byte	0
 12333 00ff 00       		.byte	0
 12334 0100 15       		.uleb128 0x15
 12335 0101 0D       		.uleb128 0xd
 12336 0102 00       		.byte	0
 12337 0103 03       		.uleb128 0x3
 12338 0104 0E       		.uleb128 0xe
 12339 0105 3A       		.uleb128 0x3a
 12340 0106 0B       		.uleb128 0xb
 12341 0107 3B       		.uleb128 0x3b
 12342 0108 05       		.uleb128 0x5
 12343 0109 49       		.uleb128 0x49
 12344 010a 13       		.uleb128 0x13
 12345 010b 38       		.uleb128 0x38
 12346 010c 05       		.uleb128 0x5
 12347 010d 00       		.byte	0
 12348 010e 00       		.byte	0
 12349 010f 16       		.uleb128 0x16
 12350 0110 04       		.uleb128 0x4
 12351 0111 01       		.byte	0x1
 12352 0112 0B       		.uleb128 0xb
 12353 0113 0B       		.uleb128 0xb
 12354 0114 49       		.uleb128 0x49
 12355 0115 13       		.uleb128 0x13
 12356 0116 3A       		.uleb128 0x3a
 12357 0117 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 267


 12358 0118 3B       		.uleb128 0x3b
 12359 0119 05       		.uleb128 0x5
 12360 011a 01       		.uleb128 0x1
 12361 011b 13       		.uleb128 0x13
 12362 011c 00       		.byte	0
 12363 011d 00       		.byte	0
 12364 011e 17       		.uleb128 0x17
 12365 011f 2E       		.uleb128 0x2e
 12366 0120 00       		.byte	0
 12367 0121 3F       		.uleb128 0x3f
 12368 0122 19       		.uleb128 0x19
 12369 0123 03       		.uleb128 0x3
 12370 0124 0E       		.uleb128 0xe
 12371 0125 3A       		.uleb128 0x3a
 12372 0126 0B       		.uleb128 0xb
 12373 0127 3B       		.uleb128 0x3b
 12374 0128 0B       		.uleb128 0xb
 12375 0129 27       		.uleb128 0x27
 12376 012a 19       		.uleb128 0x19
 12377 012b 11       		.uleb128 0x11
 12378 012c 01       		.uleb128 0x1
 12379 012d 12       		.uleb128 0x12
 12380 012e 06       		.uleb128 0x6
 12381 012f 40       		.uleb128 0x40
 12382 0130 18       		.uleb128 0x18
 12383 0131 9742     		.uleb128 0x2117
 12384 0133 19       		.uleb128 0x19
 12385 0134 00       		.byte	0
 12386 0135 00       		.byte	0
 12387 0136 18       		.uleb128 0x18
 12388 0137 2E       		.uleb128 0x2e
 12389 0138 01       		.byte	0x1
 12390 0139 3F       		.uleb128 0x3f
 12391 013a 19       		.uleb128 0x19
 12392 013b 03       		.uleb128 0x3
 12393 013c 0E       		.uleb128 0xe
 12394 013d 3A       		.uleb128 0x3a
 12395 013e 0B       		.uleb128 0xb
 12396 013f 3B       		.uleb128 0x3b
 12397 0140 0B       		.uleb128 0xb
 12398 0141 11       		.uleb128 0x11
 12399 0142 01       		.uleb128 0x1
 12400 0143 12       		.uleb128 0x12
 12401 0144 06       		.uleb128 0x6
 12402 0145 40       		.uleb128 0x40
 12403 0146 18       		.uleb128 0x18
 12404 0147 9642     		.uleb128 0x2116
 12405 0149 19       		.uleb128 0x19
 12406 014a 01       		.uleb128 0x1
 12407 014b 13       		.uleb128 0x13
 12408 014c 00       		.byte	0
 12409 014d 00       		.byte	0
 12410 014e 19       		.uleb128 0x19
 12411 014f 34       		.uleb128 0x34
 12412 0150 00       		.byte	0
 12413 0151 03       		.uleb128 0x3
 12414 0152 0E       		.uleb128 0xe
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 268


 12415 0153 3A       		.uleb128 0x3a
 12416 0154 0B       		.uleb128 0xb
 12417 0155 3B       		.uleb128 0x3b
 12418 0156 0B       		.uleb128 0xb
 12419 0157 49       		.uleb128 0x49
 12420 0158 13       		.uleb128 0x13
 12421 0159 02       		.uleb128 0x2
 12422 015a 18       		.uleb128 0x18
 12423 015b 00       		.byte	0
 12424 015c 00       		.byte	0
 12425 015d 1A       		.uleb128 0x1a
 12426 015e 2E       		.uleb128 0x2e
 12427 015f 01       		.byte	0x1
 12428 0160 3F       		.uleb128 0x3f
 12429 0161 19       		.uleb128 0x19
 12430 0162 03       		.uleb128 0x3
 12431 0163 0E       		.uleb128 0xe
 12432 0164 3A       		.uleb128 0x3a
 12433 0165 0B       		.uleb128 0xb
 12434 0166 3B       		.uleb128 0x3b
 12435 0167 05       		.uleb128 0x5
 12436 0168 27       		.uleb128 0x27
 12437 0169 19       		.uleb128 0x19
 12438 016a 11       		.uleb128 0x11
 12439 016b 01       		.uleb128 0x1
 12440 016c 12       		.uleb128 0x12
 12441 016d 06       		.uleb128 0x6
 12442 016e 40       		.uleb128 0x40
 12443 016f 18       		.uleb128 0x18
 12444 0170 9642     		.uleb128 0x2116
 12445 0172 19       		.uleb128 0x19
 12446 0173 01       		.uleb128 0x1
 12447 0174 13       		.uleb128 0x13
 12448 0175 00       		.byte	0
 12449 0176 00       		.byte	0
 12450 0177 1B       		.uleb128 0x1b
 12451 0178 34       		.uleb128 0x34
 12452 0179 00       		.byte	0
 12453 017a 03       		.uleb128 0x3
 12454 017b 0E       		.uleb128 0xe
 12455 017c 3A       		.uleb128 0x3a
 12456 017d 0B       		.uleb128 0xb
 12457 017e 3B       		.uleb128 0x3b
 12458 017f 05       		.uleb128 0x5
 12459 0180 49       		.uleb128 0x49
 12460 0181 13       		.uleb128 0x13
 12461 0182 02       		.uleb128 0x2
 12462 0183 18       		.uleb128 0x18
 12463 0184 00       		.byte	0
 12464 0185 00       		.byte	0
 12465 0186 1C       		.uleb128 0x1c
 12466 0187 0B       		.uleb128 0xb
 12467 0188 01       		.byte	0x1
 12468 0189 11       		.uleb128 0x11
 12469 018a 01       		.uleb128 0x1
 12470 018b 12       		.uleb128 0x12
 12471 018c 06       		.uleb128 0x6
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 269


 12472 018d 00       		.byte	0
 12473 018e 00       		.byte	0
 12474 018f 1D       		.uleb128 0x1d
 12475 0190 34       		.uleb128 0x34
 12476 0191 00       		.byte	0
 12477 0192 03       		.uleb128 0x3
 12478 0193 08       		.uleb128 0x8
 12479 0194 3A       		.uleb128 0x3a
 12480 0195 0B       		.uleb128 0xb
 12481 0196 3B       		.uleb128 0x3b
 12482 0197 05       		.uleb128 0x5
 12483 0198 49       		.uleb128 0x49
 12484 0199 13       		.uleb128 0x13
 12485 019a 02       		.uleb128 0x2
 12486 019b 18       		.uleb128 0x18
 12487 019c 00       		.byte	0
 12488 019d 00       		.byte	0
 12489 019e 1E       		.uleb128 0x1e
 12490 019f 21       		.uleb128 0x21
 12491 01a0 00       		.byte	0
 12492 01a1 49       		.uleb128 0x49
 12493 01a2 13       		.uleb128 0x13
 12494 01a3 2F       		.uleb128 0x2f
 12495 01a4 05       		.uleb128 0x5
 12496 01a5 00       		.byte	0
 12497 01a6 00       		.byte	0
 12498 01a7 1F       		.uleb128 0x1f
 12499 01a8 05       		.uleb128 0x5
 12500 01a9 00       		.byte	0
 12501 01aa 03       		.uleb128 0x3
 12502 01ab 0E       		.uleb128 0xe
 12503 01ac 3A       		.uleb128 0x3a
 12504 01ad 0B       		.uleb128 0xb
 12505 01ae 3B       		.uleb128 0x3b
 12506 01af 05       		.uleb128 0x5
 12507 01b0 49       		.uleb128 0x49
 12508 01b1 13       		.uleb128 0x13
 12509 01b2 02       		.uleb128 0x2
 12510 01b3 18       		.uleb128 0x18
 12511 01b4 00       		.byte	0
 12512 01b5 00       		.byte	0
 12513 01b6 20       		.uleb128 0x20
 12514 01b7 0B       		.uleb128 0xb
 12515 01b8 01       		.byte	0x1
 12516 01b9 55       		.uleb128 0x55
 12517 01ba 17       		.uleb128 0x17
 12518 01bb 00       		.byte	0
 12519 01bc 00       		.byte	0
 12520 01bd 21       		.uleb128 0x21
 12521 01be 2E       		.uleb128 0x2e
 12522 01bf 01       		.byte	0x1
 12523 01c0 3F       		.uleb128 0x3f
 12524 01c1 19       		.uleb128 0x19
 12525 01c2 03       		.uleb128 0x3
 12526 01c3 0E       		.uleb128 0xe
 12527 01c4 3A       		.uleb128 0x3a
 12528 01c5 0B       		.uleb128 0xb
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 270


 12529 01c6 3B       		.uleb128 0x3b
 12530 01c7 05       		.uleb128 0x5
 12531 01c8 27       		.uleb128 0x27
 12532 01c9 19       		.uleb128 0x19
 12533 01ca 11       		.uleb128 0x11
 12534 01cb 01       		.uleb128 0x1
 12535 01cc 12       		.uleb128 0x12
 12536 01cd 06       		.uleb128 0x6
 12537 01ce 40       		.uleb128 0x40
 12538 01cf 18       		.uleb128 0x18
 12539 01d0 9742     		.uleb128 0x2117
 12540 01d2 19       		.uleb128 0x19
 12541 01d3 01       		.uleb128 0x1
 12542 01d4 13       		.uleb128 0x13
 12543 01d5 00       		.byte	0
 12544 01d6 00       		.byte	0
 12545 01d7 22       		.uleb128 0x22
 12546 01d8 2E       		.uleb128 0x2e
 12547 01d9 01       		.byte	0x1
 12548 01da 3F       		.uleb128 0x3f
 12549 01db 19       		.uleb128 0x19
 12550 01dc 03       		.uleb128 0x3
 12551 01dd 0E       		.uleb128 0xe
 12552 01de 3A       		.uleb128 0x3a
 12553 01df 0B       		.uleb128 0xb
 12554 01e0 3B       		.uleb128 0x3b
 12555 01e1 05       		.uleb128 0x5
 12556 01e2 11       		.uleb128 0x11
 12557 01e3 01       		.uleb128 0x1
 12558 01e4 12       		.uleb128 0x12
 12559 01e5 06       		.uleb128 0x6
 12560 01e6 40       		.uleb128 0x40
 12561 01e7 18       		.uleb128 0x18
 12562 01e8 9642     		.uleb128 0x2116
 12563 01ea 19       		.uleb128 0x19
 12564 01eb 01       		.uleb128 0x1
 12565 01ec 13       		.uleb128 0x13
 12566 01ed 00       		.byte	0
 12567 01ee 00       		.byte	0
 12568 01ef 23       		.uleb128 0x23
 12569 01f0 05       		.uleb128 0x5
 12570 01f1 00       		.byte	0
 12571 01f2 03       		.uleb128 0x3
 12572 01f3 08       		.uleb128 0x8
 12573 01f4 3A       		.uleb128 0x3a
 12574 01f5 0B       		.uleb128 0xb
 12575 01f6 3B       		.uleb128 0x3b
 12576 01f7 05       		.uleb128 0x5
 12577 01f8 49       		.uleb128 0x49
 12578 01f9 13       		.uleb128 0x13
 12579 01fa 02       		.uleb128 0x2
 12580 01fb 18       		.uleb128 0x18
 12581 01fc 00       		.byte	0
 12582 01fd 00       		.byte	0
 12583 01fe 24       		.uleb128 0x24
 12584 01ff 2E       		.uleb128 0x2e
 12585 0200 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 271


 12586 0201 3F       		.uleb128 0x3f
 12587 0202 19       		.uleb128 0x19
 12588 0203 03       		.uleb128 0x3
 12589 0204 0E       		.uleb128 0xe
 12590 0205 3A       		.uleb128 0x3a
 12591 0206 0B       		.uleb128 0xb
 12592 0207 3B       		.uleb128 0x3b
 12593 0208 05       		.uleb128 0x5
 12594 0209 11       		.uleb128 0x11
 12595 020a 01       		.uleb128 0x1
 12596 020b 12       		.uleb128 0x12
 12597 020c 06       		.uleb128 0x6
 12598 020d 40       		.uleb128 0x40
 12599 020e 18       		.uleb128 0x18
 12600 020f 9742     		.uleb128 0x2117
 12601 0211 19       		.uleb128 0x19
 12602 0212 01       		.uleb128 0x1
 12603 0213 13       		.uleb128 0x13
 12604 0214 00       		.byte	0
 12605 0215 00       		.byte	0
 12606 0216 25       		.uleb128 0x25
 12607 0217 26       		.uleb128 0x26
 12608 0218 00       		.byte	0
 12609 0219 49       		.uleb128 0x49
 12610 021a 13       		.uleb128 0x13
 12611 021b 00       		.byte	0
 12612 021c 00       		.byte	0
 12613 021d 26       		.uleb128 0x26
 12614 021e 34       		.uleb128 0x34
 12615 021f 00       		.byte	0
 12616 0220 03       		.uleb128 0x3
 12617 0221 0E       		.uleb128 0xe
 12618 0222 3A       		.uleb128 0x3a
 12619 0223 0B       		.uleb128 0xb
 12620 0224 3B       		.uleb128 0x3b
 12621 0225 05       		.uleb128 0x5
 12622 0226 49       		.uleb128 0x49
 12623 0227 13       		.uleb128 0x13
 12624 0228 3F       		.uleb128 0x3f
 12625 0229 19       		.uleb128 0x19
 12626 022a 3C       		.uleb128 0x3c
 12627 022b 19       		.uleb128 0x19
 12628 022c 00       		.byte	0
 12629 022d 00       		.byte	0
 12630 022e 00       		.byte	0
 12631              		.section	.debug_aranges,"",%progbits
 12632 0000 84000000 		.4byte	0x84
 12633 0004 0200     		.2byte	0x2
 12634 0006 00000000 		.4byte	.Ldebug_info0
 12635 000a 04       		.byte	0x4
 12636 000b 00       		.byte	0
 12637 000c 0000     		.2byte	0
 12638 000e 0000     		.2byte	0
 12639 0010 00000000 		.4byte	.LFB64
 12640 0014 18000000 		.4byte	.LFE64-.LFB64
 12641 0018 00000000 		.4byte	.LFB65
 12642 001c 20000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 272


 12643 0020 00000000 		.4byte	.LFB66
 12644 0024 F4010000 		.4byte	.LFE66-.LFB66
 12645 0028 00000000 		.4byte	.LFB67
 12646 002c 28060000 		.4byte	.LFE67-.LFB67
 12647 0030 00000000 		.4byte	.LFB68
 12648 0034 B0050000 		.4byte	.LFE68-.LFB68
 12649 0038 00000000 		.4byte	.LFB69
 12650 003c 18000000 		.4byte	.LFE69-.LFB69
 12651 0040 00000000 		.4byte	.LFB70
 12652 0044 08070000 		.4byte	.LFE70-.LFB70
 12653 0048 00000000 		.4byte	.LFB71
 12654 004c 40080000 		.4byte	.LFE71-.LFB71
 12655 0050 00000000 		.4byte	.LFB72
 12656 0054 10080000 		.4byte	.LFE72-.LFB72
 12657 0058 00000000 		.4byte	.LFB73
 12658 005c 98110000 		.4byte	.LFE73-.LFB73
 12659 0060 00000000 		.4byte	.LFB74
 12660 0064 F4000000 		.4byte	.LFE74-.LFB74
 12661 0068 00000000 		.4byte	.LFB75
 12662 006c 78000000 		.4byte	.LFE75-.LFB75
 12663 0070 00000000 		.4byte	.LFB76
 12664 0074 08040000 		.4byte	.LFE76-.LFB76
 12665 0078 00000000 		.4byte	.LFB77
 12666 007c 08010000 		.4byte	.LFE77-.LFB77
 12667 0080 00000000 		.4byte	0
 12668 0084 00000000 		.4byte	0
 12669              		.section	.debug_ranges,"",%progbits
 12670              	.Ldebug_ranges0:
 12671 0000 68010000 		.4byte	.LBB3
 12672 0004 AA010000 		.4byte	.LBE3
 12673 0008 AC010000 		.4byte	.LBB4
 12674 000c F2010000 		.4byte	.LBE4
 12675 0010 00000000 		.4byte	0
 12676 0014 00000000 		.4byte	0
 12677 0018 00000000 		.4byte	.LFB64
 12678 001c 18000000 		.4byte	.LFE64
 12679 0020 00000000 		.4byte	.LFB65
 12680 0024 20000000 		.4byte	.LFE65
 12681 0028 00000000 		.4byte	.LFB66
 12682 002c F4010000 		.4byte	.LFE66
 12683 0030 00000000 		.4byte	.LFB67
 12684 0034 28060000 		.4byte	.LFE67
 12685 0038 00000000 		.4byte	.LFB68
 12686 003c B0050000 		.4byte	.LFE68
 12687 0040 00000000 		.4byte	.LFB69
 12688 0044 18000000 		.4byte	.LFE69
 12689 0048 00000000 		.4byte	.LFB70
 12690 004c 08070000 		.4byte	.LFE70
 12691 0050 00000000 		.4byte	.LFB71
 12692 0054 40080000 		.4byte	.LFE71
 12693 0058 00000000 		.4byte	.LFB72
 12694 005c 10080000 		.4byte	.LFE72
 12695 0060 00000000 		.4byte	.LFB73
 12696 0064 98110000 		.4byte	.LFE73
 12697 0068 00000000 		.4byte	.LFB74
 12698 006c F4000000 		.4byte	.LFE74
 12699 0070 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 273


 12700 0074 78000000 		.4byte	.LFE75
 12701 0078 00000000 		.4byte	.LFB76
 12702 007c 08040000 		.4byte	.LFE76
 12703 0080 00000000 		.4byte	.LFB77
 12704 0084 08010000 		.4byte	.LFE77
 12705 0088 00000000 		.4byte	0
 12706 008c 00000000 		.4byte	0
 12707              		.section	.debug_line,"",%progbits
 12708              	.Ldebug_line0:
 12709 0000 B10A0000 		.section	.debug_str,"MS",%progbits,1
 12709      0200AC01 
 12709      00000201 
 12709      FB0E0D00 
 12709      01010101 
 12710              	.LASF24:
 12711 0000 73697A65 		.ascii	"sizetype\000"
 12711      74797065 
 12711      00
 12712              	.LASF258:
 12713 0009 706F735F 		.ascii	"pos_cycle_status\000"
 12713      6379636C 
 12713      655F7374 
 12713      61747573 
 12713      00
 12714              	.LASF137:
 12715 001a 77726973 		.ascii	"wrist_direction_association\000"
 12715      745F6469 
 12715      72656374 
 12715      696F6E5F 
 12715      6173736F 
 12716              	.LASF30:
 12717 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 12717      545F4D4F 
 12717      44455F45 
 12717      4D475F46 
 12717      4346535F 
 12718              	.LASF117:
 12719 004e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 12719      5F414443 
 12719      5F73656E 
 12719      736F7273 
 12719      5F706F72 
 12720              	.LASF146:
 12721 0069 75736572 		.ascii	"user\000"
 12721      00
 12722              	.LASF10:
 12723 006e 696E7433 		.ascii	"int32_t\000"
 12723      325F7400 
 12724              	.LASF291:
 12725 0076 675F7278 		.ascii	"g_rx\000"
 12725      00
 12726              	.LASF235:
 12727 007b 6F6E655F 		.ascii	"one_time_execute\000"
 12727      74696D65 
 12727      5F657865 
 12727      63757465 
 12727      00
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 274


 12728              	.LASF49:
 12729 008c 73745F64 		.ascii	"st_data\000"
 12729      61746100 
 12730              	.LASF13:
 12731 0094 75696E74 		.ascii	"uint32\000"
 12731      333200
 12732              	.LASF220:
 12733 009b 6E5F6C69 		.ascii	"n_line\000"
 12733      6E6500
 12734              	.LASF147:
 12735 00a2 4A4F595F 		.ascii	"JOY_spec\000"
 12735      73706563 
 12735      00
 12736              	.LASF85:
 12737 00ab 706F735F 		.ascii	"pos_lim_inf\000"
 12737      6C696D5F 
 12737      696E6600 
 12738              	.LASF314:
 12739 00b7 74656E73 		.ascii	"tension_valid\000"
 12739      696F6E5F 
 12739      76616C69 
 12739      6400
 12740              	.LASF201:
 12741 00c5 6572725F 		.ascii	"err_joy_1\000"
 12741      6A6F795F 
 12741      3100
 12742              	.LASF178:
 12743 00cf 73746174 		.ascii	"state\000"
 12743      6500
 12744              	.LASF316:
 12745 00d5 6379636C 		.ascii	"cycles_interrupt_flag\000"
 12745      65735F69 
 12745      6E746572 
 12745      72757074 
 12745      5F666C61 
 12746              	.LASF265:
 12747 00eb 62696E5F 		.ascii	"bin_max\000"
 12747      6D617800 
 12748              	.LASF279:
 12749 00f3 61646472 		.ascii	"addr_start_c\000"
 12749      5F737461 
 12749      72745F63 
 12749      00
 12750              	.LASF29:
 12751 0100 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 12751      545F4D4F 
 12751      44455F45 
 12751      4D475F46 
 12751      43465300 
 12752              	.LASF89:
 12753 0114 63757272 		.ascii	"curr_lookup\000"
 12753      5F6C6F6F 
 12753      6B757000 
 12754              	.LASF205:
 12755 0120 70776D5F 		.ascii	"pwm_input\000"
 12755      696E7075 
 12755      7400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 275


 12756              	.LASF57:
 12757 012a 72657374 		.ascii	"rest_counter\000"
 12757      5F636F75 
 12757      6E746572 
 12757      00
 12758              	.LASF127:
 12759 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 12759      41535445 
 12759      525F7370 
 12759      656300
 12760              	.LASF28:
 12761 0146 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 12761      545F4D4F 
 12761      44455F45 
 12761      4D475F49 
 12761      4E544547 
 12762              	.LASF251:
 12763 015e 765F636F 		.ascii	"v_count\000"
 12763      756E7400 
 12764              	.LASF183:
 12765 0166 72785F64 		.ascii	"rx_data\000"
 12765      61746100 
 12766              	.LASF240:
 12767 016e 7676765F 		.ascii	"vvv_value\000"
 12767      76616C75 
 12767      6500
 12768              	.LASF14:
 12769 0178 696E7438 		.ascii	"int8\000"
 12769      00
 12770              	.LASF188:
 12771 017d 696E666F 		.ascii	"info_\000"
 12771      5F00
 12772              	.LASF299:
 12773 0183 66696C74 		.ascii	"filt_emg\000"
 12773      5F656D67 
 12773      00
 12774              	.LASF104:
 12775 018c 73745F65 		.ascii	"st_emg\000"
 12775      6D6700
 12776              	.LASF55:
 12777 0193 706F7369 		.ascii	"position_hist\000"
 12777      74696F6E 
 12777      5F686973 
 12777      7400
 12778              	.LASF170:
 12779 01a1 50524550 		.ascii	"PREPARE_DATA\000"
 12779      4152455F 
 12779      44415441 
 12779      00
 12780              	.LASF154:
 12781 01ae 74656D70 		.ascii	"temp_value\000"
 12781      5F76616C 
 12781      756500
 12782              	.LASF262:
 12783 01b9 7468725F 		.ascii	"thr_pos\000"
 12783      706F7300 
 12784              	.LASF134:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 276


 12785 01c1 73745F57 		.ascii	"st_WR_spec\000"
 12785      525F7370 
 12785      656300
 12786              	.LASF52:
 12787 01cc 72656164 		.ascii	"ready\000"
 12787      7900
 12788              	.LASF101:
 12789 01d2 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 12789      6964785F 
 12789      7573655F 
 12789      666F725F 
 12789      636F6E74 
 12790              	.LASF157:
 12791 01ea 6761696E 		.ascii	"gain\000"
 12791      00
 12792              	.LASF61:
 12793 01ef 73745F64 		.ascii	"st_device\000"
 12793      65766963 
 12793      6500
 12794              	.LASF27:
 12795 01f9 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 12795      545F4D4F 
 12795      44455F45 
 12795      4D475F50 
 12795      524F504F 
 12796              	.LASF66:
 12797 0215 7573655F 		.ascii	"use_2nd_motor_flag\000"
 12797      326E645F 
 12797      6D6F746F 
 12797      725F666C 
 12797      616700
 12798              	.LASF245:
 12799 0228 55445F63 		.ascii	"UD_counter\000"
 12799      6F756E74 
 12799      657200
 12800              	.LASF166:
 12801 0233 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 12801      414E445F 
 12801      4D45414E 
 12801      00
 12802              	.LASF111:
 12803 0240 72656164 		.ascii	"read_imu_flag\000"
 12803      5F696D75 
 12803      5F666C61 
 12803      6700
 12804              	.LASF249:
 12805 024e 66697273 		.ascii	"first_tension_valid\000"
 12805      745F7465 
 12805      6E73696F 
 12805      6E5F7661 
 12805      6C696400 
 12806              	.LASF300:
 12807 0262 74696D65 		.ascii	"timer_value\000"
 12807      725F7661 
 12807      6C756500 
 12808              	.LASF4:
 12809 026e 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 277


 12809      20696E74 
 12809      00
 12810              	.LASF144:
 12811 0277 756E7573 		.ascii	"unused_bytes1\000"
 12811      65645F62 
 12811      79746573 
 12811      3100
 12812              	.LASF193:
 12813 0285 6D6F746F 		.ascii	"motor_idx\000"
 12813      725F6964 
 12813      7800
 12814              	.LASF210:
 12815 028f 53485F45 		.ascii	"SH_ENC_L\000"
 12815      4E435F4C 
 12815      00
 12816              	.LASF65:
 12817 0298 72657365 		.ascii	"reset_counters\000"
 12817      745F636F 
 12817      756E7465 
 12817      727300
 12818              	.LASF261:
 12819 02a7 62696E5F 		.ascii	"bin_threshold\000"
 12819      74687265 
 12819      73686F6C 
 12819      6400
 12820              	.LASF121:
 12821 02b5 75736572 		.ascii	"user_emg\000"
 12821      5F656D67 
 12821      00
 12822              	.LASF234:
 12823 02be 73616665 		.ascii	"safe_startup_motor_activation\000"
 12823      5F737461 
 12823      72747570 
 12823      5F6D6F74 
 12823      6F725F61 
 12824              	.LASF70:
 12825 02dc 756E7573 		.ascii	"unused_bytes\000"
 12825      65645F62 
 12825      79746573 
 12825      00
 12826              	.LASF150:
 12827 02e9 61636365 		.ascii	"accel_value\000"
 12827      6C5F7661 
 12827      6C756500 
 12828              	.LASF290:
 12829 02f5 675F6164 		.ascii	"g_adc_measOld\000"
 12829      635F6D65 
 12829      61734F6C 
 12829      6400
 12830              	.LASF223:
 12831 0303 6175785F 		.ascii	"aux_encoder\000"
 12831      656E636F 
 12831      64657200 
 12832              	.LASF53:
 12833 030f 73745F63 		.ascii	"st_counters\000"
 12833      6F756E74 
 12833      65727300 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 278


 12834              	.LASF209:
 12835 031b 53485F4D 		.ascii	"SH_MOT\000"
 12835      4F5400
 12836              	.LASF17:
 12837 0322 666C6F61 		.ascii	"float32\000"
 12837      74333200 
 12838              	.LASF219:
 12839 032a 656E636F 		.ascii	"encoder_reading_SPI\000"
 12839      6465725F 
 12839      72656164 
 12839      696E675F 
 12839      53504900 
 12840              	.LASF232:
 12841 033e 6572726F 		.ascii	"error\000"
 12841      7200
 12842              	.LASF54:
 12843 0344 656D675F 		.ascii	"emg_counter\000"
 12843      636F756E 
 12843      74657200 
 12844              	.LASF173:
 12845 0350 57524954 		.ascii	"WRITE_END\000"
 12845      455F454E 
 12845      4400
 12846              	.LASF246:
 12847 035a 4C525F63 		.ascii	"LR_counter\000"
 12847      6F756E74 
 12847      657200
 12848              	.LASF237:
 12849 0365 706F735F 		.ascii	"pos_reconstruct\000"
 12849      7265636F 
 12849      6E737472 
 12849      75637400 
 12850              	.LASF253:
 12851 0375 70776D5F 		.ascii	"pwm_limit_search\000"
 12851      6C696D69 
 12851      745F7365 
 12851      61726368 
 12851      00
 12852              	.LASF0:
 12853 0386 7369676E 		.ascii	"signed char\000"
 12853      65642063 
 12853      68617200 
 12854              	.LASF120:
 12855 0392 75736572 		.ascii	"user_code_string\000"
 12855      5F636F64 
 12855      655F7374 
 12855      72696E67 
 12855      00
 12856              	.LASF158:
 12857 03a3 73745F63 		.ascii	"st_calib\000"
 12857      616C6962 
 12857      00
 12858              	.LASF197:
 12859 03ac 6572725F 		.ascii	"err_emg_1\000"
 12859      656D675F 
 12859      3100
 12860              	.LASF198:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 279


 12861 03b6 6572725F 		.ascii	"err_emg_2\000"
 12861      656D675F 
 12861      3200
 12862              	.LASF109:
 12863 03c0 73776974 		.ascii	"switch_emg\000"
 12863      63685F65 
 12863      6D6700
 12864              	.LASF310:
 12865 03cb 656D675F 		.ascii	"emg_2_status\000"
 12865      325F7374 
 12865      61747573 
 12865      00
 12866              	.LASF322:
 12867 03d8 4144435F 		.ascii	"ADC_buf\000"
 12867      62756600 
 12868              	.LASF315:
 12869 03e0 696E7465 		.ascii	"interrupt_flag\000"
 12869      72727570 
 12869      745F666C 
 12869      616700
 12870              	.LASF271:
 12871 03ef 73746570 		.ascii	"step\000"
 12871      00
 12872              	.LASF212:
 12873 03f4 63757272 		.ascii	"curr_error_sum\000"
 12873      5F657272 
 12873      6F725F73 
 12873      756D00
 12874              	.LASF1:
 12875 0403 756E7369 		.ascii	"unsigned char\000"
 12875      676E6564 
 12875      20636861 
 12875      7200
 12876              	.LASF95:
 12877 0411 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 12877      72657665 
 12877      72735F6D 
 12877      6F746F72 
 12877      5F666C61 
 12878              	.LASF277:
 12879 0427 726F775F 		.ascii	"row_start\000"
 12879      73746172 
 12879      7400
 12880              	.LASF319:
 12881 0431 666F7263 		.ascii	"forced_open\000"
 12881      65645F6F 
 12881      70656E00 
 12882              	.LASF227:
 12883 043d 73706565 		.ascii	"speed_encoder\000"
 12883      645F656E 
 12883      636F6465 
 12883      7200
 12884              	.LASF285:
 12885 044b 675F7265 		.ascii	"g_refNew\000"
 12885      664E6577 
 12885      00
 12886              	.LASF269:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 280


 12887 0454 63757272 		.ascii	"curr_off\000"
 12887      5F6F6666 
 12887      00
 12888              	.LASF64:
 12889 045d 72696768 		.ascii	"right_left\000"
 12889      745F6C65 
 12889      667400
 12890              	.LASF93:
 12891 0468 656E636F 		.ascii	"encoder_line\000"
 12891      6465725F 
 12891      6C696E65 
 12891      00
 12892              	.LASF309:
 12893 0475 656D675F 		.ascii	"emg_1_status\000"
 12893      315F7374 
 12893      61747573 
 12893      00
 12894              	.LASF149:
 12895 0482 666C6167 		.ascii	"flags\000"
 12895      7300
 12896              	.LASF196:
 12897 0488 68616E64 		.ascii	"handle_value\000"
 12897      6C655F76 
 12897      616C7565 
 12897      00
 12898              	.LASF20:
 12899 0495 63686172 		.ascii	"char\000"
 12899      00
 12900              	.LASF88:
 12901 049a 6D61785F 		.ascii	"max_step_pos\000"
 12901      73746570 
 12901      5F706F73 
 12901      00
 12902              	.LASF324:
 12903 04a7 70776D5F 		.ascii	"pwm_sign\000"
 12903      7369676E 
 12903      00
 12904              	.LASF218:
 12905 04b0 6D6F746F 		.ascii	"motor_control_generic\000"
 12905      725F636F 
 12905      6E74726F 
 12905      6C5F6765 
 12905      6E657269 
 12906              	.LASF331:
 12907 04c6 675F696D 		.ascii	"g_imu\000"
 12907      7500
 12908              	.LASF298:
 12909 04cc 66696C74 		.ascii	"filt_vel\000"
 12909      5F76656C 
 12909      00
 12910              	.LASF94:
 12911 04d5 70776D5F 		.ascii	"pwm_rate_limiter\000"
 12911      72617465 
 12911      5F6C696D 
 12911      69746572 
 12911      00
 12912              	.LASF74:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 281


 12913 04e6 6B5F645F 		.ascii	"k_d_c\000"
 12913      6300
 12914              	.LASF169:
 12915 04ec 6164635F 		.ascii	"adc_status\000"
 12915      73746174 
 12915      757300
 12916              	.LASF99:
 12917 04f7 6D5F6D75 		.ascii	"m_mult\000"
 12917      6C7400
 12918              	.LASF73:
 12919 04fe 6B5F695F 		.ascii	"k_i_c\000"
 12919      6300
 12920              	.LASF216:
 12921 0504 6D6F746F 		.ascii	"motor_dir\000"
 12921      725F6469 
 12921      7200
 12922              	.LASF264:
 12923 050e 62696E5F 		.ascii	"bin_st\000"
 12923      737400
 12924              	.LASF176:
 12925 0515 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 12925      52533438 
 12925      355F5258 
 12925      5F457849 
 12925      6E746572 
 12926              	.LASF86:
 12927 052e 706F735F 		.ascii	"pos_lim_sup\000"
 12927      6C696D5F 
 12927      73757000 
 12928              	.LASF156:
 12929 053a 6F6C645F 		.ascii	"old_value\000"
 12929      76616C75 
 12929      6500
 12930              	.LASF107:
 12931 0544 656D675F 		.ascii	"emg_speed\000"
 12931      73706565 
 12931      6400
 12932              	.LASF125:
 12933 054e 72657374 		.ascii	"rest_vel\000"
 12933      5F76656C 
 12933      00
 12934              	.LASF163:
 12935 0557 4E4F524D 		.ascii	"NORMAL\000"
 12935      414C00
 12936              	.LASF204:
 12937 055e 6D6F746F 		.ascii	"motor_control_SH\000"
 12937      725F636F 
 12937      6E74726F 
 12937      6C5F5348 
 12937      00
 12938              	.LASF330:
 12939 056f 7046696C 		.ascii	"pFile\000"
 12939      6500
 12940              	.LASF211:
 12941 0575 706F735F 		.ascii	"pos_error_sum\000"
 12941      6572726F 
 12941      725F7375 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 282


 12941      6D00
 12942              	.LASF118:
 12943 0583 4144435F 		.ascii	"ADC_conf\000"
 12943      636F6E66 
 12943      00
 12944              	.LASF306:
 12945 058c 6465765F 		.ascii	"dev_tension_f\000"
 12945      74656E73 
 12945      696F6E5F 
 12945      6600
 12946              	.LASF76:
 12947 059a 6B5F695F 		.ascii	"k_i_dl\000"
 12947      646C00
 12948              	.LASF50:
 12949 05a1 62756666 		.ascii	"buffer\000"
 12949      657200
 12950              	.LASF78:
 12951 05a8 6B5F705F 		.ascii	"k_p_c_dl\000"
 12951      635F646C 
 12951      00
 12952              	.LASF184:
 12953 05b1 72785F64 		.ascii	"rx_data_type\000"
 12953      6174615F 
 12953      74797065 
 12953      00
 12954              	.LASF332:
 12955 05be 675F696D 		.ascii	"g_imuNew\000"
 12955      754E6577 
 12955      00
 12956              	.LASF161:
 12957 05c7 73706565 		.ascii	"speed\000"
 12957      6400
 12958              	.LASF217:
 12959 05cd 706F7369 		.ascii	"position_counter\000"
 12959      74696F6E 
 12959      5F636F75 
 12959      6E746572 
 12959      00
 12960              	.LASF273:
 12961 05de 74696D65 		.ascii	"timer_value_e\000"
 12961      725F7661 
 12961      6C75655F 
 12961      6500
 12962              	.LASF179:
 12963 05ec 64617461 		.ascii	"data_packet_index\000"
 12963      5F706163 
 12963      6B65745F 
 12963      696E6465 
 12963      7800
 12964              	.LASF181:
 12965 05fe 64617461 		.ascii	"data_packet_buffer\000"
 12965      5F706163 
 12965      6B65745F 
 12965      62756666 
 12965      657200
 12966              	.LASF194:
 12967 0611 73745F72 		.ascii	"st_ref_p\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 283


 12967      65665F70 
 12967      00
 12968              	.LASF308:
 12969 061a 6379636C 		.ascii	"cycles_status\000"
 12969      65735F73 
 12969      74617475 
 12969      7300
 12970              	.LASF186:
 12971 0628 636F756E 		.ascii	"counter_calibration\000"
 12971      7465725F 
 12971      63616C69 
 12971      62726174 
 12971      696F6E00 
 12972              	.LASF287:
 12973 063c 675F6D65 		.ascii	"g_meas\000"
 12973      617300
 12974              	.LASF272:
 12975 0643 74696D65 		.ascii	"timer_value_s\000"
 12975      725F7661 
 12975      6C75655F 
 12975      7300
 12976              	.LASF328:
 12977 0651 456E636F 		.ascii	"Encoder_Check\000"
 12977      6465725F 
 12977      43686563 
 12977      6B00
 12978              	.LASF231:
 12979 065f 636F6D70 		.ascii	"comp_value_encoder\000"
 12979      5F76616C 
 12979      75655F65 
 12979      6E636F64 
 12979      657200
 12980              	.LASF325:
 12981 0672 64617461 		.ascii	"data_encoder_raw\000"
 12981      5F656E63 
 12981      6F646572 
 12981      5F726177 
 12981      00
 12982              	.LASF284:
 12983 0683 675F7265 		.ascii	"g_ref\000"
 12983      6600
 12984              	.LASF25:
 12985 0689 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 12985      545F4D4F 
 12985      44455F45 
 12985      58544552 
 12985      4E414C00 
 12986              	.LASF222:
 12987 069d 696E6465 		.ascii	"index\000"
 12987      7800
 12988              	.LASF132:
 12989 06a3 6D617869 		.ascii	"maximum_pressure_kPa\000"
 12989      6D756D5F 
 12989      70726573 
 12989      73757265 
 12989      5F6B5061 
 12990              	.LASF126:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 284


 12991 06b8 72657374 		.ascii	"rest_position_flag\000"
 12991      5F706F73 
 12991      6974696F 
 12991      6E5F666C 
 12991      616700
 12992              	.LASF139:
 12993 06cb 6A6F7973 		.ascii	"joystick_closure_speed\000"
 12993      7469636B 
 12993      5F636C6F 
 12993      73757265 
 12993      5F737065 
 12994              	.LASF79:
 12995 06e2 6B5F695F 		.ascii	"k_i_c_dl\000"
 12995      635F646C 
 12995      00
 12996              	.LASF185:
 12997 06eb 7061636B 		.ascii	"package_count\000"
 12997      6167655F 
 12997      636F756E 
 12997      7400
 12998              	.LASF38:
 12999 06f9 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 12999      5F414E44 
 12999      5F504F53 
 12999      5F434F4E 
 12999      54524F4C 
 13000              	.LASF159:
 13001 070e 656E6162 		.ascii	"enabled\000"
 13001      6C656400 
 13002              	.LASF5:
 13003 0716 6C6F6E67 		.ascii	"long unsigned int\000"
 13003      20756E73 
 13003      69676E65 
 13003      6420696E 
 13003      7400
 13004              	.LASF59:
 13005 0728 746F7461 		.ascii	"total_time_on\000"
 13005      6C5F7469 
 13005      6D655F6F 
 13005      6E00
 13006              	.LASF171:
 13007 0736 57524954 		.ascii	"WRITE_CYCLES\000"
 13007      455F4359 
 13007      434C4553 
 13007      00
 13008              	.LASF141:
 13009 0743 6A6F7973 		.ascii	"joystick_gains\000"
 13009      7469636B 
 13009      5F676169 
 13009      6E7300
 13010              	.LASF45:
 13011 0752 686F6C64 		.ascii	"hold_curr\000"
 13011      5F637572 
 13011      7200
 13012              	.LASF31:
 13013 075c 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 13013      545F4D4F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 285


 13013      44455F4A 
 13013      4F595354 
 13013      49434B00 
 13014              	.LASF60:
 13015 0770 746F7461 		.ascii	"total_time_rest\000"
 13015      6C5F7469 
 13015      6D655F72 
 13015      65737400 
 13016              	.LASF81:
 13017 0780 61637469 		.ascii	"activ\000"
 13017      7600
 13018              	.LASF256:
 13019 0786 6D696E5F 		.ascii	"min_tension\000"
 13019      74656E73 
 13019      696F6E00 
 13020              	.LASF320:
 13021 0792 62617474 		.ascii	"battery_low_SoC\000"
 13021      6572795F 
 13021      6C6F775F 
 13021      536F4300 
 13022              	.LASF98:
 13023 07a2 6D5F6F66 		.ascii	"m_off\000"
 13023      6600
 13024              	.LASF313:
 13025 07a8 72657365 		.ascii	"reset_last_value_flag\000"
 13025      745F6C61 
 13025      73745F76 
 13025      616C7565 
 13025      5F666C61 
 13026              	.LASF153:
 13027 07be 71756174 		.ascii	"quat_value\000"
 13027      5F76616C 
 13027      756500
 13028              	.LASF123:
 13029 07c9 72657374 		.ascii	"rest_pos\000"
 13029      5F706F73 
 13029      00
 13030              	.LASF40:
 13031 07d2 63757272 		.ascii	"curr\000"
 13031      00
 13032              	.LASF172:
 13033 07d7 57414954 		.ascii	"WAIT_QUERY\000"
 13033      5F515545 
 13033      525900
 13034              	.LASF91:
 13035 07e2 696E7075 		.ascii	"input_mode\000"
 13035      745F6D6F 
 13035      646500
 13036              	.LASF36:
 13037 07ed 434F4E54 		.ascii	"CONTROL_PWM\000"
 13037      524F4C5F 
 13037      50574D00 
 13038              	.LASF257:
 13039 07f9 6379636C 		.ascii	"cycles_counter_update\000"
 13039      65735F63 
 13039      6F756E74 
 13039      65725F75 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 286


 13039      70646174 
 13040              	.LASF334:
 13041 080f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 13041      43313120 
 13041      352E342E 
 13041      31203230 
 13041      31363036 
 13042 0842 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 13042      20726576 
 13042      6973696F 
 13042      6E203233 
 13042      37373135 
 13043 0875 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 13043      66756E63 
 13043      74696F6E 
 13043      2D736563 
 13043      74696F6E 
 13044              	.LASF42:
 13045 089d 73745F72 		.ascii	"st_ref\000"
 13045      656600
 13046              	.LASF301:
 13047 08a4 74696D65 		.ascii	"timer_value0\000"
 13047      725F7661 
 13047      6C756530 
 13047      00
 13048              	.LASF122:
 13049 08b1 73745F53 		.ascii	"st_SH_spec\000"
 13049      485F7370 
 13049      656300
 13050              	.LASF238:
 13051 08bc 765F7661 		.ascii	"v_value\000"
 13051      6C756500 
 13052              	.LASF294:
 13053 08c4 63616C69 		.ascii	"calib\000"
 13053      6200
 13054              	.LASF130:
 13055 08ca 73745F46 		.ascii	"st_FB_spec\000"
 13055      425F7370 
 13055      656300
 13056              	.LASF6:
 13057 08d5 6C6F6E67 		.ascii	"long long int\000"
 13057      206C6F6E 
 13057      6720696E 
 13057      7400
 13058              	.LASF34:
 13059 08e3 53485F63 		.ascii	"SH_control_mode\000"
 13059      6F6E7472 
 13059      6F6C5F6D 
 13059      6F646500 
 13060              	.LASF190:
 13061 08f3 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 13061      4E445F4D 
 13061      4F544F52 
 13061      5F494458 
 13061      00
 13062              	.LASF321:
 13063 0904 6368616E 		.ascii	"change_ext_ref_flag\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 287


 13063      67655F65 
 13063      78745F72 
 13063      65665F66 
 13063      6C616700 
 13064              	.LASF19:
 13065 0918 646F7562 		.ascii	"double\000"
 13065      6C6500
 13066              	.LASF296:
 13067 091f 66696C74 		.ascii	"filt_curr_diff\000"
 13067      5F637572 
 13067      725F6469 
 13067      666600
 13068              	.LASF203:
 13069 092e 696E7465 		.ascii	"interrupt_manager\000"
 13069      72727570 
 13069      745F6D61 
 13069      6E616765 
 13069      7200
 13070              	.LASF97:
 13071 0940 456E635F 		.ascii	"Enc_raw_read_conf\000"
 13071      7261775F 
 13071      72656164 
 13071      5F636F6E 
 13071      6600
 13072              	.LASF162:
 13073 0952 72657065 		.ascii	"repetitions\000"
 13073      74697469 
 13073      6F6E7300 
 13074              	.LASF87:
 13075 095e 6D61785F 		.ascii	"max_step_neg\000"
 13075      73746570 
 13075      5F6E6567 
 13075      00
 13076              	.LASF236:
 13077 096b 636F756E 		.ascii	"count_startup_motor\000"
 13077      745F7374 
 13077      61727475 
 13077      705F6D6F 
 13077      746F7200 
 13078              	.LASF129:
 13079 097f 736C6176 		.ascii	"slave_ID\000"
 13079      655F4944 
 13079      00
 13080              	.LASF167:
 13081 0988 57414954 		.ascii	"WAIT\000"
 13081      00
 13082              	.LASF18:
 13083 098d 666C6F61 		.ascii	"float\000"
 13083      7400
 13084              	.LASF113:
 13085 0993 494D555F 		.ascii	"IMU_conf\000"
 13085      636F6E66 
 13085      00
 13086              	.LASF250:
 13087 099c 636F756E 		.ascii	"count\000"
 13087      7400
 13088              	.LASF46:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 288


 13089 09a2 73745F61 		.ascii	"st_adc_meas\000"
 13089      64635F6D 
 13089      65617300 
 13090              	.LASF281:
 13091 09ae 6D5F6164 		.ascii	"m_addr\000"
 13091      647200
 13092              	.LASF293:
 13093 09b5 635F6D65 		.ascii	"c_mem\000"
 13093      6D00
 13094              	.LASF8:
 13095 09bb 756E7369 		.ascii	"unsigned int\000"
 13095      676E6564 
 13095      20696E74 
 13095      00
 13096              	.LASF263:
 13097 09c8 6D61785F 		.ascii	"max_pos\000"
 13097      706F7300 
 13098              	.LASF329:
 13099 09d0 72657374 		.ascii	"rest_pos_curr_ref\000"
 13099      5F706F73 
 13099      5F637572 
 13099      725F7265 
 13099      6600
 13100              	.LASF143:
 13101 09e2 666C6167 		.ascii	"flag\000"
 13101      00
 13102              	.LASF92:
 13103 09e7 636F6E74 		.ascii	"control_mode\000"
 13103      726F6C5F 
 13103      6D6F6465 
 13103      00
 13104              	.LASF21:
 13105 09f4 63797374 		.ascii	"cystatus\000"
 13105      61747573 
 13105      00
 13106              	.LASF26:
 13107 09fd 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 13107      545F4D4F 
 13107      44455F45 
 13107      4E434F44 
 13107      45523300 
 13108              	.LASF110:
 13109 0a11 73745F69 		.ascii	"st_imu\000"
 13109      6D7500
 13110              	.LASF200:
 13111 0a18 63757272 		.ascii	"current_emg\000"
 13111      656E745F 
 13111      656D6700 
 13112              	.LASF182:
 13113 0a24 72785F71 		.ascii	"rx_queue\000"
 13113      75657565 
 13113      00
 13114              	.LASF247:
 13115 0a2d 55445F6D 		.ascii	"UD_mean_value\000"
 13115      65616E5F 
 13115      76616C75 
 13115      6500
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 289


 13116              	.LASF135:
 13117 0a3b 77726973 		.ascii	"wrist_act_mode\000"
 13117      745F6163 
 13117      745F6D6F 
 13117      646500
 13118              	.LASF221:
 13119 0a4a 6173736F 		.ascii	"assoc_motor\000"
 13119      635F6D6F 
 13119      746F7200 
 13120              	.LASF47:
 13121 0a56 6164645F 		.ascii	"add_emg\000"
 13121      656D6700 
 13122              	.LASF208:
 13123 0a5e 695F7265 		.ascii	"i_ref\000"
 13123      6600
 13124              	.LASF105:
 13125 0a64 656D675F 		.ascii	"emg_threshold\000"
 13125      74687265 
 13125      73686F6C 
 13125      6400
 13126              	.LASF274:
 13127 0a72 73617665 		.ascii	"save_cycles_eeprom\000"
 13127      5F637963 
 13127      6C65735F 
 13127      65657072 
 13127      6F6D00
 13128              	.LASF56:
 13129 0a85 63757272 		.ascii	"current_hist\000"
 13129      656E745F 
 13129      68697374 
 13129      00
 13130              	.LASF37:
 13131 0a92 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 13131      524F4C5F 
 13131      43555252 
 13131      454E5400 
 13132              	.LASF23:
 13133 0aa2 6C6F6E67 		.ascii	"long double\000"
 13133      20646F75 
 13133      626C6500 
 13134              	.LASF165:
 13135 0aae 44495343 		.ascii	"DISCARD\000"
 13135      41524400 
 13136              	.LASF213:
 13137 0ab6 70726576 		.ascii	"prev_pos_err\000"
 13137      5F706F73 
 13137      5F657272 
 13137      00
 13138              	.LASF229:
 13139 0ac3 696E6974 		.ascii	"init_rot\000"
 13139      5F726F74 
 13139      00
 13140              	.LASF254:
 13141 0acc 6D6F745F 		.ascii	"mot_idx\000"
 13141      69647800 
 13142              	.LASF297:
 13143 0ad4 66696C74 		.ascii	"filt_i\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 290


 13143      5F6900
 13144              	.LASF102:
 13145 0adb 6D6F746F 		.ascii	"motor_handle_ratio\000"
 13145      725F6861 
 13145      6E646C65 
 13145      5F726174 
 13145      696F00
 13146              	.LASF295:
 13147 0aee 66696C74 		.ascii	"filt_v\000"
 13147      5F7600
 13148              	.LASF318:
 13149 0af5 72657374 		.ascii	"rest_enabled\000"
 13149      5F656E61 
 13149      626C6564 
 13149      00
 13150              	.LASF286:
 13151 0b02 675F7265 		.ascii	"g_refOld\000"
 13151      664F6C64 
 13151      00
 13152              	.LASF206:
 13153 0b0b 706F735F 		.ascii	"pos_error\000"
 13153      6572726F 
 13153      7200
 13154              	.LASF151:
 13155 0b15 6779726F 		.ascii	"gyro_value\000"
 13155      5F76616C 
 13155      756500
 13156              	.LASF115:
 13157 0b20 63757272 		.ascii	"curr_time\000"
 13157      5F74696D 
 13157      6500
 13158              	.LASF100:
 13159 0b2a 646F7562 		.ascii	"double_encoder_on_off\000"
 13159      6C655F65 
 13159      6E636F64 
 13159      65725F6F 
 13159      6E5F6F66 
 13160              	.LASF255:
 13161 0b40 6D61785F 		.ascii	"max_tension\000"
 13161      74656E73 
 13161      696F6E00 
 13162              	.LASF189:
 13163 0b4c 4D4F544F 		.ascii	"MOTOR_IDX\000"
 13163      525F4944 
 13163      5800
 13164              	.LASF230:
 13165 0b56 6C617374 		.ascii	"last_value_encoder\000"
 13165      5F76616C 
 13165      75655F65 
 13165      6E636F64 
 13165      657200
 13166              	.LASF187:
 13167 0b69 636F756E 		.ascii	"counter_tension_func\000"
 13167      7465725F 
 13167      74656E73 
 13167      696F6E5F 
 13167      66756E63 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 291


 13168              	.LASF302:
 13169 0b7e 6379636C 		.ascii	"cycle_time\000"
 13169      655F7469 
 13169      6D6500
 13170              	.LASF7:
 13171 0b89 6C6F6E67 		.ascii	"long long unsigned int\000"
 13171      206C6F6E 
 13171      6720756E 
 13171      7369676E 
 13171      65642069 
 13172              	.LASF311:
 13173 0ba0 6A6F795F 		.ascii	"joy_UD_status\000"
 13173      55445F73 
 13173      74617475 
 13173      7300
 13174              	.LASF51:
 13175 0bae 6C656E67 		.ascii	"length\000"
 13175      746800
 13176              	.LASF148:
 13177 0bb5 73745F69 		.ascii	"st_imu_data\000"
 13177      6D755F64 
 13177      61746100 
 13178              	.LASF152:
 13179 0bc1 6D61675F 		.ascii	"mag_value\000"
 13179      76616C75 
 13179      6500
 13180              	.LASF41:
 13181 0bcb 6F6E6F66 		.ascii	"onoff\000"
 13181      6600
 13182              	.LASF225:
 13183 0bd1 746D705F 		.ascii	"tmp_value_encoder_32\000"
 13183      76616C75 
 13183      655F656E 
 13183      636F6465 
 13183      725F3332 
 13184              	.LASF214:
 13185 0be6 70726576 		.ascii	"prev_curr_err\000"
 13185      5F637572 
 13185      725F6572 
 13185      7200
 13186              	.LASF180:
 13187 0bf4 64617461 		.ascii	"data_packet_length\000"
 13187      5F706163 
 13187      6B65745F 
 13187      6C656E67 
 13187      746800
 13188              	.LASF72:
 13189 0c07 6B5F705F 		.ascii	"k_p_c\000"
 13189      6300
 13190              	.LASF303:
 13191 0c0d 6465765F 		.ascii	"dev_tension\000"
 13191      74656E73 
 13191      696F6E00 
 13192              	.LASF83:
 13193 0c19 6D6F746F 		.ascii	"motor_driver_type\000"
 13193      725F6472 
 13193      69766572 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 292


 13193      5F747970 
 13193      6500
 13194              	.LASF168:
 13195 0c2b 57414954 		.ascii	"WAIT_EoC\000"
 13195      5F456F43 
 13195      00
 13196              	.LASF22:
 13197 0c34 72656738 		.ascii	"reg8\000"
 13197      00
 13198              	.LASF266:
 13199 0c39 62696E5F 		.ascii	"bin_1\000"
 13199      3100
 13200              	.LASF267:
 13201 0c3f 62696E5F 		.ascii	"bin_2\000"
 13201      3200
 13202              	.LASF242:
 13203 0c45 695F6175 		.ascii	"i_aux\000"
 13203      7800
 13204              	.LASF133:
 13205 0c4b 70726F70 		.ascii	"prop_err_fb_gain\000"
 13205      5F657272 
 13205      5F66625F 
 13205      6761696E 
 13205      00
 13206              	.LASF276:
 13207 0c5c 726F775F 		.ascii	"row_number\000"
 13207      6E756D62 
 13207      657200
 13208              	.LASF252:
 13209 0c67 6F766572 		.ascii	"overcurrent_control\000"
 13209      63757272 
 13209      656E745F 
 13209      636F6E74 
 13209      726F6C00 
 13210              	.LASF268:
 13211 0c7b 63757272 		.ascii	"curr_pos\000"
 13211      5F706F73 
 13211      00
 13212              	.LASF164:
 13213 0c84 52455345 		.ascii	"RESET\000"
 13213      5400
 13214              	.LASF128:
 13215 0c8a 736C6176 		.ascii	"slave_comm_active\000"
 13215      655F636F 
 13215      6D6D5F61 
 13215      63746976 
 13215      6500
 13216              	.LASF241:
 13217 0c9c 616E616C 		.ascii	"analog_read_end\000"
 13217      6F675F72 
 13217      6561645F 
 13217      656E6400 
 13218              	.LASF326:
 13219 0cac 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 13219      636F6465 
 13219      725F4C69 
 13219      6E655F43 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 293


 13219      6F6E6E65 
 13220              	.LASF69:
 13221 0cc5 6465765F 		.ascii	"dev_type\000"
 13221      74797065 
 13221      00
 13222              	.LASF259:
 13223 0cce 656D675F 		.ascii	"emg_cycle_status\000"
 13223      6379636C 
 13223      655F7374 
 13223      61747573 
 13223      00
 13224              	.LASF119:
 13225 0cdf 73745F75 		.ascii	"st_user\000"
 13225      73657200 
 13226              	.LASF103:
 13227 0ce7 67656172 		.ascii	"gears_params\000"
 13227      735F7061 
 13227      72616D73 
 13227      00
 13228              	.LASF114:
 13229 0cf4 73745F65 		.ascii	"st_expansion\000"
 13229      7870616E 
 13229      73696F6E 
 13229      00
 13230              	.LASF108:
 13231 0d01 656D675F 		.ascii	"emg_calibration_flag\000"
 13231      63616C69 
 13231      62726174 
 13231      696F6E5F 
 13231      666C6167 
 13232              	.LASF43:
 13233 0d16 73745F6D 		.ascii	"st_meas\000"
 13233      65617300 
 13234              	.LASF278:
 13235 0d1e 61646472 		.ascii	"addr_start\000"
 13235      5F737461 
 13235      727400
 13236              	.LASF282:
 13237 0d29 70776D5F 		.ascii	"pwm_preload_values\000"
 13237      7072656C 
 13237      6F61645F 
 13237      76616C75 
 13237      657300
 13238              	.LASF140:
 13239 0d3c 6A6F7973 		.ascii	"joystick_threshold\000"
 13239      7469636B 
 13239      5F746872 
 13239      6573686F 
 13239      6C6400
 13240              	.LASF32:
 13241 0d4f 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 13241      545F4D4F 
 13241      44455F45 
 13241      4D475F50 
 13241      524F504F 
 13242              	.LASF175:
 13243 0d6e 636F756E 		.ascii	"counter_status\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 294


 13243      7465725F 
 13243      73746174 
 13243      757300
 13244              	.LASF292:
 13245 0d7d 675F6D65 		.ascii	"g_mem\000"
 13245      6D00
 13246              	.LASF243:
 13247 0d83 656D675F 		.ascii	"emg_counter_1\000"
 13247      636F756E 
 13247      7465725F 
 13247      3100
 13248              	.LASF244:
 13249 0d91 656D675F 		.ascii	"emg_counter_2\000"
 13249      636F756E 
 13249      7465725F 
 13249      3200
 13250              	.LASF233:
 13251 0d9f 6F6E6C79 		.ascii	"only_first_time\000"
 13251      5F666972 
 13251      73745F74 
 13251      696D6500 
 13252              	.LASF11:
 13253 0daf 75696E74 		.ascii	"uint8\000"
 13253      3800
 13254              	.LASF138:
 13255 0db5 73745F4A 		.ascii	"st_JOY_spec\000"
 13255      4F595F73 
 13255      70656300 
 13256              	.LASF228:
 13257 0dc1 76616C75 		.ascii	"value_diff\000"
 13257      655F6469 
 13257      666600
 13258              	.LASF270:
 13259 0dcc 63757272 		.ascii	"curr_ref\000"
 13259      5F726566 
 13259      00
 13260              	.LASF2:
 13261 0dd5 73686F72 		.ascii	"short int\000"
 13261      7420696E 
 13261      7400
 13262              	.LASF77:
 13263 0ddf 6B5F645F 		.ascii	"k_d_dl\000"
 13263      646C00
 13264              	.LASF226:
 13265 0de6 76616C75 		.ascii	"value_encoder\000"
 13265      655F656E 
 13265      636F6465 
 13265      7200
 13266              	.LASF48:
 13267 0df4 6A6F7973 		.ascii	"joystick\000"
 13267      7469636B 
 13267      00
 13268              	.LASF145:
 13269 0dfd 6D6F746F 		.ascii	"motor\000"
 13269      7200
 13270              	.LASF305:
 13271 0e03 6465765F 		.ascii	"dev_pwm_sat\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 295


 13271      70776D5F 
 13271      73617400 
 13272              	.LASF62:
 13273 0e0f 68775F6D 		.ascii	"hw_maint_date\000"
 13273      61696E74 
 13273      5F646174 
 13273      6500
 13274              	.LASF191:
 13275 0e1d 66756E63 		.ascii	"function_scheduler\000"
 13275      74696F6E 
 13275      5F736368 
 13275      6564756C 
 13275      657200
 13276              	.LASF192:
 13277 0e30 636F6D70 		.ascii	"compute_reference\000"
 13277      7574655F 
 13277      72656665 
 13277      72656E63 
 13277      6500
 13278              	.LASF215:
 13279 0e42 70726576 		.ascii	"prev_pwm\000"
 13279      5F70776D 
 13279      00
 13280              	.LASF63:
 13281 0e4b 73746174 		.ascii	"stats_period_begin_date\000"
 13281      735F7065 
 13281      72696F64 
 13281      5F626567 
 13281      696E5F64 
 13282              	.LASF283:
 13283 0e63 49544D5F 		.ascii	"ITM_RxBuffer\000"
 13283      52784275 
 13283      66666572 
 13283      00
 13284              	.LASF307:
 13285 0e70 706F775F 		.ascii	"pow_tension\000"
 13285      74656E73 
 13285      696F6E00 
 13286              	.LASF336:
 13287 0e7c 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 13287      73657273 
 13287      5C4D6174 
 13287      7469615C 
 13287      446F6375 
 13288 0eaa 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\SoftHand_Pro.cydsn\000"
 13288      656E6572 
 13288      69632D46 
 13288      572D5053 
 13288      6F43355C 
 13289              	.LASF15:
 13290 0ed1 696E7431 		.ascii	"int16\000"
 13290      3600
 13291              	.LASF116:
 13292 0ed7 72656164 		.ascii	"read_exp_port_flag\000"
 13292      5F657870 
 13292      5F706F72 
 13292      745F666C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 296


 13292      616700
 13293              	.LASF82:
 13294 0eea 61637469 		.ascii	"activate_pwm_rescaling\000"
 13294      76617465 
 13294      5F70776D 
 13294      5F726573 
 13294      63616C69 
 13295              	.LASF75:
 13296 0f01 6B5F705F 		.ascii	"k_p_dl\000"
 13296      646C00
 13297              	.LASF44:
 13298 0f08 65737469 		.ascii	"estim_curr\000"
 13298      6D5F6375 
 13298      727200
 13299              	.LASF304:
 13300 0f13 6465765F 		.ascii	"dev_pwm_limit\000"
 13300      70776D5F 
 13300      6C696D69 
 13300      7400
 13301              	.LASF275:
 13302 0f21 73746174 		.ascii	"status\000"
 13302      757300
 13303              	.LASF207:
 13304 0f28 63757272 		.ascii	"curr_error\000"
 13304      5F657272 
 13304      6F7200
 13305              	.LASF327:
 13306 0f33 456E636F 		.ascii	"Encoder_Value\000"
 13306      6465725F 
 13306      56616C75 
 13306      6500
 13307              	.LASF68:
 13308 0f41 75736572 		.ascii	"user_id\000"
 13308      5F696400 
 13309              	.LASF260:
 13310 0f49 72657374 		.ascii	"rest_cycle_status\000"
 13310      5F637963 
 13310      6C655F73 
 13310      74617475 
 13310      7300
 13311              	.LASF202:
 13312 0f5b 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 13312      7574655F 
 13312      536F6674 
 13312      48616E64 
 13312      5F325F6D 
 13313              	.LASF224:
 13314 0f88 746D705F 		.ascii	"tmp_value_encoder\000"
 13314      76616C75 
 13314      655F656E 
 13314      636F6465 
 13314      7200
 13315              	.LASF177:
 13316 0f9a 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 13316      4359434C 
 13316      45535F48 
 13316      616E646C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 297


 13316      657200
 13317              	.LASF67:
 13318 0fad 62617564 		.ascii	"baud_rate\000"
 13318      5F726174 
 13318      6500
 13319              	.LASF136:
 13320 0fb7 66617374 		.ascii	"fast_act_threshold\000"
 13320      5F616374 
 13320      5F746872 
 13320      6573686F 
 13320      6C6400
 13321              	.LASF112:
 13322 0fca 5350495F 		.ascii	"SPI_read_delay\000"
 13322      72656164 
 13322      5F64656C 
 13322      617900
 13323              	.LASF3:
 13324 0fd9 73686F72 		.ascii	"short unsigned int\000"
 13324      7420756E 
 13324      7369676E 
 13324      65642069 
 13324      6E7400
 13325              	.LASF96:
 13326 0fec 73745F65 		.ascii	"st_encoder\000"
 13326      6E636F64 
 13326      657200
 13327              	.LASF289:
 13328 0ff7 675F6164 		.ascii	"g_adc_meas\000"
 13328      635F6D65 
 13328      617300
 13329              	.LASF131:
 13330 1002 6D61785F 		.ascii	"max_residual_current\000"
 13330      72657369 
 13330      6475616C 
 13330      5F637572 
 13330      72656E74 
 13331              	.LASF199:
 13332 1017 454E435F 		.ascii	"ENC_L\000"
 13332      4C00
 13333              	.LASF142:
 13334 101d 73745F65 		.ascii	"st_eeprom\000"
 13334      6570726F 
 13334      6D00
 13335              	.LASF312:
 13336 1027 6A6F795F 		.ascii	"joy_LR_status\000"
 13336      4C525F73 
 13336      74617475 
 13336      7300
 13337              	.LASF335:
 13338 1035 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 13338      72635C69 
 13338      6E746572 
 13338      72757074 
 13338      696F6E73 
 13339              	.LASF195:
 13340 104c 73745F72 		.ascii	"st_refOld_p\000"
 13340      65664F6C 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 298


 13340      645F7000 
 13341              	.LASF16:
 13342 1058 696E7433 		.ascii	"int32\000"
 13342      3200
 13343              	.LASF323:
 13344 105e 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 13344      4F465F41 
 13344      4E414C4F 
 13344      475F494E 
 13344      50555453 
 13345              	.LASF71:
 13346 1073 73745F6D 		.ascii	"st_motor\000"
 13346      6F746F72 
 13346      00
 13347              	.LASF333:
 13348 107c 6D617374 		.ascii	"master_mode\000"
 13348      65725F6D 
 13348      6F646500 
 13349              	.LASF39:
 13350 1088 46535F46 		.ascii	"FS_FILE\000"
 13350      494C4500 
 13351              	.LASF84:
 13352 1090 706F735F 		.ascii	"pos_lim_flag\000"
 13352      6C696D5F 
 13352      666C6167 
 13352      00
 13353              	.LASF248:
 13354 109d 4C525F6D 		.ascii	"LR_mean_value\000"
 13354      65616E5F 
 13354      76616C75 
 13354      6500
 13355              	.LASF288:
 13356 10ab 675F6D65 		.ascii	"g_measOld\000"
 13356      61734F6C 
 13356      6400
 13357              	.LASF280:
 13358 10b5 726F775F 		.ascii	"row_end\000"
 13358      656E6400 
 13359              	.LASF35:
 13360 10bd 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 13360      524F4C5F 
 13360      414E474C 
 13360      4500
 13361              	.LASF9:
 13362 10cb 5F5F696E 		.ascii	"__int32_t\000"
 13362      7433325F 
 13362      7400
 13363              	.LASF58:
 13364 10d5 77697265 		.ascii	"wire_disp\000"
 13364      5F646973 
 13364      7000
 13365              	.LASF317:
 13366 10df 63616E5F 		.ascii	"can_write\000"
 13366      77726974 
 13366      6500
 13367              	.LASF106:
 13368 10e9 656D675F 		.ascii	"emg_max_value\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cclAPrfh.s 			page 299


 13368      6D61785F 
 13368      76616C75 
 13368      6500
 13369              	.LASF90:
 13370 10f7 63757272 		.ascii	"current_limit\000"
 13370      656E745F 
 13370      6C696D69 
 13370      7400
 13371              	.LASF33:
 13372 1105 53485F69 		.ascii	"SH_input_mode\000"
 13372      6E707574 
 13372      5F6D6F64 
 13372      6500
 13373              	.LASF174:
 13374 1113 4E4F4E45 		.ascii	"NONE\000"
 13374      00
 13375              	.LASF12:
 13376 1118 75696E74 		.ascii	"uint16\000"
 13376      313600
 13377              	.LASF124:
 13378 111f 72657374 		.ascii	"rest_delay\000"
 13378      5F64656C 
 13378      617900
 13379              	.LASF155:
 13380 112a 73745F66 		.ascii	"st_filter\000"
 13380      696C7465 
 13380      7200
 13381              	.LASF239:
 13382 1134 76765F76 		.ascii	"vv_value\000"
 13382      616C7565 
 13382      00
 13383              	.LASF80:
 13384 113d 6B5F645F 		.ascii	"k_d_c_dl\000"
 13384      635F646C 
 13384      00
 13385              	.LASF160:
 13386 1146 64697265 		.ascii	"direction\000"
 13386      6374696F 
 13386      6E00
 13387              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
