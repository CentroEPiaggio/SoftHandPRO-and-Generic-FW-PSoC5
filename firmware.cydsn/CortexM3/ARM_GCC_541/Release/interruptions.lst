ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** #include "command_processing.h"
  49:..\src/interruptions.c **** #include "SPI_functions.h"
  50:..\src/interruptions.c **** #include "globals.h"
  51:..\src/interruptions.c **** #include "utils.h"
  52:..\src/interruptions.c **** 
  53:..\src/interruptions.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 3


  54:..\src/interruptions.c **** //==============================================================================
  55:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  56:..\src/interruptions.c **** //==============================================================================
  57:..\src/interruptions.c **** // Processing RS-485 data frame:
  58:..\src/interruptions.c **** //
  59:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  60:..\src/interruptions.c **** // - 1:     Waits for ID;
  61:..\src/interruptions.c **** // - 2:     Data length;
  62:..\src/interruptions.c **** // - 3:     Receive all bytes;
  63:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  64:..\src/interruptions.c **** //
  65:..\src/interruptions.c **** //==============================================================================
  66:..\src/interruptions.c **** 
  67:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  68:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  69:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  70:..\src/interruptions.c ****                                               83,
  71:..\src/interruptions.c ****                                               78,
  72:..\src/interruptions.c ****                                               76,
  73:..\src/interruptions.c ****                                               74,
  74:..\src/interruptions.c ****                                               72,    //5 (14000)
  75:..\src/interruptions.c ****                                               70,
  76:..\src/interruptions.c ****                                               68,
  77:..\src/interruptions.c ****                                               67,
  78:..\src/interruptions.c ****                                               65,
  79:..\src/interruptions.c ****                                               64,    //10 (16500)
  80:..\src/interruptions.c ****                                               63,
  81:..\src/interruptions.c ****                                               62,
  82:..\src/interruptions.c ****                                               61,
  83:..\src/interruptions.c ****                                               60,
  84:..\src/interruptions.c ****                                               59,    //15 (19000)
  85:..\src/interruptions.c ****                                               58,
  86:..\src/interruptions.c ****                                               57,
  87:..\src/interruptions.c ****                                               56,
  88:..\src/interruptions.c ****                                               56,
  89:..\src/interruptions.c ****                                               55,    //20 (21500)
  90:..\src/interruptions.c ****                                               54,
  91:..\src/interruptions.c ****                                               54,
  92:..\src/interruptions.c ****                                               53,
  93:..\src/interruptions.c ****                                               52,
  94:..\src/interruptions.c ****                                               52,    //25 (24000)
  95:..\src/interruptions.c ****                                               52,
  96:..\src/interruptions.c ****                                               51,
  97:..\src/interruptions.c ****                                               51};   //28 (25500)
  98:..\src/interruptions.c **** 
  99:..\src/interruptions.c **** //==============================================================================
 100:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
 101:..\src/interruptions.c **** //==============================================================================
 102:..\src/interruptions.c **** 
 103:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 103 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 4


  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
 104:..\src/interruptions.c **** 
 105:..\src/interruptions.c ****     // Set RS485 flag
 106:..\src/interruptions.c ****     
 107:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 107 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 108:..\src/interruptions.c ****      
 109:..\src/interruptions.c **** }
  76              		.loc 1 109 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c **** //==============================================================================
 112:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 113:..\src/interruptions.c **** //==============================================================================
 114:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 114 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 115:..\src/interruptions.c **** 
 116:..\src/interruptions.c ****     // Set cycles interrupt flag
 117:..\src/interruptions.c ****     
 118:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 118 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 5


 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 119:..\src/interruptions.c ****     
 120:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
 114              		.loc 1 120 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 121:..\src/interruptions.c **** 
 122:..\src/interruptions.c **** }
 117              		.loc 1 122 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 62640040 		.word	1073767522
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 123:..\src/interruptions.c **** 
 124:..\src/interruptions.c **** //==============================================================================
 125:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 126:..\src/interruptions.c **** //==============================================================================
 127:..\src/interruptions.c **** // Manage interrupt from RS485 
 128:..\src/interruptions.c **** //==============================================================================
 129:..\src/interruptions.c **** // Processing RS-485 data frame:
 130:..\src/interruptions.c **** //
 131:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 132:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 133:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 134:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 135:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 136:..\src/interruptions.c **** //
 137:..\src/interruptions.c **** //==============================================================================
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 139 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 6


 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 140:..\src/interruptions.c **** 
 141:..\src/interruptions.c ****     
 142:..\src/interruptions.c ****     //===========================================     local variables definition
 143:..\src/interruptions.c **** 
 144:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 145:..\src/interruptions.c ****     
 146:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 147:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 148:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 149:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 150:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 151:..\src/interruptions.c ****     //-------------------------------------------------
 152:..\src/interruptions.c **** 
 153:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 154:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 154 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 155:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 155 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****     //======================================================     receive routine
 158:..\src/interruptions.c ****     
 159:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 6)){
 160              		.loc 1 159 0
 161 000e D5E0     		b	.L8
 162              	.L28:
 160:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 161:..\src/interruptions.c **** 
 162:..\src/interruptions.c ****         // Get next char
 163:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 163 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 164:..\src/interruptions.c ****         
 165:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 165 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CD80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 7


 178 0030 CB000000 		.word	.L12+1
 179 0034 19010000 		.word	.L13+1
 180 0038 83010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
 166:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 167:..\src/interruptions.c ****             case WAIT_START:
 168:..\src/interruptions.c ****             
 169:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 169 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 170:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 170 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 171:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 171 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 172:..\src/interruptions.c ****                 
 173:..\src/interruptions.c ****                 // Check for header configuration package
 174:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 174 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 174 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 175:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 175 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 176:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 176 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 177:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 177 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 178:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 178 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 8


 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 179:..\src/interruptions.c ****                 }else
 180:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
 225              		.loc 1 180 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09B80 		bne	.L8
 181:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 181 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 180:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 180 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09680 		bne	.L8
 182:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 182 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 181:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 181 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09180 		bne	.L8
 183:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 183 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 184:..\src/interruptions.c ****                 break;
 246              		.loc 1 184 0
 247 00a0 8CE0     		b	.L8
 248              	.L11:
 185:..\src/interruptions.c **** 
 186:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 187:..\src/interruptions.c ****             case  WAIT_ID:
 188:..\src/interruptions.c **** 
 189:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 190:..\src/interruptions.c ****                 if (rx_data == c_mem.id || rx_data == 0)
 249              		.loc 1 190 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 252 00a6 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00a8 9A42     		cmp	r2, r3
 254 00aa 02D0     		beq	.L17
 255              		.loc 1 190 0 is_stmt 0 discriminator 1
 256 00ac 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00ae 002B     		cmp	r3, #0
 258 00b0 02D1     		bne	.L18
 259              	.L17:
 191:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 191 0 is_stmt 1
 261 00b2 0023     		movs	r3, #0
 262 00b4 FB71     		strb	r3, [r7, #7]
 263 00b6 01E0     		b	.L19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 9


 264              	.L18:
 192:..\src/interruptions.c ****                 else                //packet is for others
 193:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 193 0
 266 00b8 0123     		movs	r3, #1
 267 00ba FB71     		strb	r3, [r7, #7]
 268              	.L19:
 194:..\src/interruptions.c ****                 
 195:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 195 0
 270 00bc 494B     		ldr	r3, .L31+12
 271 00be 0022     		movs	r2, #0
 272 00c0 1A70     		strb	r2, [r3]
 196:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 196 0
 274 00c2 454B     		ldr	r3, .L31
 275 00c4 0222     		movs	r2, #2
 276 00c6 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 break;
 277              		.loc 1 197 0
 278 00c8 78E0     		b	.L8
 279              	.L12:
 198:..\src/interruptions.c **** 
 199:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 200:..\src/interruptions.c ****             case  WAIT_LENGTH:
 201:..\src/interruptions.c **** 
 202:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 202 0
 281 00ca 464A     		ldr	r2, .L31+12
 282 00cc 7B79     		ldrb	r3, [r7, #5]
 283 00ce 1370     		strb	r3, [r2]
 203:..\src/interruptions.c ****                 // check validity of pack length
 204:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 204 0
 285 00d0 444B     		ldr	r3, .L31+12
 286 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d4 012B     		cmp	r3, #1
 288 00d6 06D8     		bhi	.L20
 205:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 205 0
 290 00d8 424B     		ldr	r3, .L31+12
 291 00da 0022     		movs	r2, #0
 292 00dc 1A70     		strb	r2, [r3]
 206:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 206 0
 294 00de 3E4B     		ldr	r3, .L31
 295 00e0 0022     		movs	r2, #0
 296 00e2 1A70     		strb	r2, [r3]
 297 00e4 6AE0     		b	.L8
 298              	.L20:
 207:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 207 0
 300 00e6 3F4B     		ldr	r3, .L31+12
 301 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ea 802B     		cmp	r3, #128
 303 00ec 06D9     		bls	.L22
 208:..\src/interruptions.c ****                     data_packet_length = 0;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 10


 304              		.loc 1 208 0
 305 00ee 3D4B     		ldr	r3, .L31+12
 306 00f0 0022     		movs	r2, #0
 307 00f2 1A70     		strb	r2, [r3]
 209:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 209 0
 309 00f4 384B     		ldr	r3, .L31
 310 00f6 0022     		movs	r2, #0
 311 00f8 1A70     		strb	r2, [r3]
 312 00fa 5FE0     		b	.L8
 313              	.L22:
 210:..\src/interruptions.c ****                 } else {
 211:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 211 0
 315 00fc 3A4B     		ldr	r3, .L31+16
 316 00fe 0022     		movs	r2, #0
 317 0100 1A70     		strb	r2, [r3]
 212:..\src/interruptions.c ****                     
 213:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 213 0
 319 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0104 002B     		cmp	r3, #0
 321 0106 03D1     		bne	.L23
 214:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 214 0
 323 0108 334B     		ldr	r3, .L31
 324 010a 0322     		movs	r2, #3
 325 010c 1A70     		strb	r2, [r3]
 326 010e 55E0     		b	.L8
 327              	.L23:
 215:..\src/interruptions.c ****                     else
 216:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 216 0
 329 0110 314B     		ldr	r3, .L31
 330 0112 0422     		movs	r2, #4
 331 0114 1A70     		strb	r2, [r3]
 217:..\src/interruptions.c ****                 }
 218:..\src/interruptions.c ****                 break;
 332              		.loc 1 218 0
 333 0116 51E0     		b	.L8
 334              	.L13:
 219:..\src/interruptions.c **** 
 220:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 221:..\src/interruptions.c ****             case RECEIVE:
 222:..\src/interruptions.c **** 
 223:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 223 0
 336 0118 334B     		ldr	r3, .L31+16
 337 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011c 1946     		mov	r1, r3
 339 011e 334A     		ldr	r2, .L31+20
 340 0120 7B79     		ldrb	r3, [r7, #5]
 341 0122 5354     		strb	r3, [r2, r1]
 224:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 224 0
 343 0124 304B     		ldr	r3, .L31+16
 344 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 11


 345 0128 0133     		adds	r3, r3, #1
 346 012a DAB2     		uxtb	r2, r3
 347 012c 2E4B     		ldr	r3, .L31+16
 348 012e 1A70     		strb	r2, [r3]
 225:..\src/interruptions.c ****                 
 226:..\src/interruptions.c ****                 // check end of transmission
 227:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 227 0
 350 0130 2D4B     		ldr	r3, .L31+16
 351 0132 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0134 2B4B     		ldr	r3, .L31+12
 353 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 0138 9A42     		cmp	r2, r3
 355 013a 3FD3     		bcc	.L8
 228:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 229:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 229 0
 357 013c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 013e 002B     		cmp	r3, #0
 359 0140 12D1     		bne	.L25
 230:..\src/interruptions.c ****                         // copying data from buffer to global packet
 231:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 231 0
 361 0142 284B     		ldr	r3, .L31+12
 362 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0146 1A46     		mov	r2, r3
 364 0148 2849     		ldr	r1, .L31+20
 365 014a 2948     		ldr	r0, .L31+24
 366 014c FFF7FEFF 		bl	memcpy
 232:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 232 0
 368 0150 244B     		ldr	r3, .L31+12
 369 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0154 1AB2     		sxth	r2, r3
 371 0156 264B     		ldr	r3, .L31+24
 372 0158 A3F88020 		strh	r2, [r3, #128]	@ movhi
 233:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 233 0
 374 015c 244B     		ldr	r3, .L31+24
 375 015e 0122     		movs	r2, #1
 376 0160 83F88420 		strb	r2, [r3, #132]
 234:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 234 0
 378 0164 FFF7FEFF 		bl	commProcess
 379              	.L25:
 235:..\src/interruptions.c ****                     }
 236:..\src/interruptions.c ****                     
 237:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 237 0
 381 0168 1F4B     		ldr	r3, .L31+16
 382 016a 0022     		movs	r2, #0
 383 016c 1A70     		strb	r2, [r3]
 238:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 238 0
 385 016e 1D4B     		ldr	r3, .L31+12
 386 0170 0022     		movs	r2, #0
 387 0172 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 12


 239:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 239 0
 389 0174 184B     		ldr	r3, .L31
 390 0176 0022     		movs	r2, #0
 391 0178 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 240 0
 393 017a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017c 0133     		adds	r3, r3, #1
 395 017e BB71     		strb	r3, [r7, #6]
 241:..\src/interruptions.c ****                 
 242:..\src/interruptions.c ****                 }
 243:..\src/interruptions.c ****                 break;
 396              		.loc 1 243 0
 397 0180 1CE0     		b	.L8
 398              	.L14:
 244:..\src/interruptions.c **** 
 245:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 246:..\src/interruptions.c ****             case UNLOAD:
 247:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 247 0
 400 0182 184B     		ldr	r3, .L31+12
 401 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0186 013B     		subs	r3, r3, #1
 403 0188 DAB2     		uxtb	r2, r3
 404 018a 164B     		ldr	r3, .L31+12
 405 018c 1A70     		strb	r2, [r3]
 406 018e 154B     		ldr	r3, .L31+12
 407 0190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0192 002B     		cmp	r3, #0
 409 0194 11D1     		bne	.L30
 248:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 248 0
 411 0196 144B     		ldr	r3, .L31+16
 412 0198 0022     		movs	r2, #0
 413 019a 1A70     		strb	r2, [r3]
 249:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 249 0
 415 019c 114B     		ldr	r3, .L31+12
 416 019e 0022     		movs	r2, #0
 417 01a0 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 250 0
 419 01a2 0120     		movs	r0, #1
 420 01a4 FFF7FEFF 		bl	RS485_CTS_Write
 251:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 251 0
 422 01a8 0020     		movs	r0, #0
 423 01aa FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 252 0
 425 01ae 0A4B     		ldr	r3, .L31
 426 01b0 0022     		movs	r2, #0
 427 01b2 1A70     		strb	r2, [r3]
 253:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 253 0
 429 01b4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 13


 430 01b6 0133     		adds	r3, r3, #1
 431 01b8 BB71     		strb	r3, [r7, #6]
 432              	.L30:
 254:..\src/interruptions.c ****                 }
 255:..\src/interruptions.c ****                 break;
 433              		.loc 1 255 0
 434 01ba 00BF     		nop
 435              	.L8:
 159:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 436              		.loc 1 159 0
 437 01bc FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c0 0346     		mov	r3, r0
 439 01c2 002B     		cmp	r3, #0
 440 01c4 03D0     		beq	.L29
 159:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 441              		.loc 1 159 0 is_stmt 0 discriminator 1
 442 01c6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01c8 052B     		cmp	r3, #5
 444 01ca 7FF621AF 		bls	.L28
 445              	.L29:
 256:..\src/interruptions.c ****         }
 257:..\src/interruptions.c ****     }
 258:..\src/interruptions.c **** }
 446              		.loc 1 258 0 is_stmt 1
 447 01ce 00BF     		nop
 448 01d0 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d2 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d4 80BD     		pop	{r7, pc}
 454              	.L32:
 455 01d6 00BF     		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10043
 458 01dc 04000000 		.word	rx_queue.10047
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10045
 461 01e8 08000000 		.word	data_packet_index.10044
 462 01ec 0C000000 		.word	data_packet_buffer.10046
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_ui2d
 468              		.global	__aeabi_ddiv
 469              		.global	__aeabi_d2f
 470              		.section	.text.function_scheduler,"ax",%progbits
 471              		.align	2
 472              		.global	function_scheduler
 473              		.thumb
 474              		.thumb_func
 475              		.type	function_scheduler, %function
 476              	function_scheduler:
 477              	.LFB67:
 259:..\src/interruptions.c **** //==============================================================================
 260:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 14


 261:..\src/interruptions.c **** //==============================================================================
 262:..\src/interruptions.c **** // Call all the function with the right frequency
 263:..\src/interruptions.c **** //==============================================================================
 264:..\src/interruptions.c **** // Base frequency 1000 Hz
 265:..\src/interruptions.c **** //==============================================================================
 266:..\src/interruptions.c **** 
 267:..\src/interruptions.c **** void function_scheduler(void) {
 478              		.loc 1 267 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 2504
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 B0B5     		push	{r4, r5, r7, lr}
 483              		.cfi_def_cfa_offset 16
 484              		.cfi_offset 4, -16
 485              		.cfi_offset 5, -12
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 ADF6C81D 		subw	sp, sp, #2504
 489              		.cfi_def_cfa_offset 2520
 490 0006 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 268:..\src/interruptions.c ****  
 269:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 270:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     CYBIT write_cycles = FALSE;
 492              		.loc 1 271 0
 493 0008 0023     		movs	r3, #0
 494 000a 87F8C739 		strb	r3, [r7, #2503]
 272:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 495              		.loc 1 272 0
 496 000e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 497 0012 0246     		mov	r2, r0
 498 0014 C14B     		ldr	r3, .L51
 499 0016 1A60     		str	r2, [r3]
 273:..\src/interruptions.c ****     uint8 rtc_data;
 274:..\src/interruptions.c ****     char info_[2500] = "";
 500              		.loc 1 274 0
 501 0018 3B46     		mov	r3, r7
 502 001a 0022     		movs	r2, #0
 503 001c 1A60     		str	r2, [r3]
 504 001e 0433     		adds	r3, r3, #4
 505 0020 4FF41C62 		mov	r2, #2496
 506 0024 0021     		movs	r1, #0
 507 0026 1846     		mov	r0, r3
 508 0028 FFF7FEFF 		bl	memset
 275:..\src/interruptions.c **** 
 276:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 277:..\src/interruptions.c **** 
 278:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 509              		.loc 1 278 0
 510 002c 0120     		movs	r0, #1
 511 002e FFF7FEFF 		bl	ADC_SOC_Write
 279:..\src/interruptions.c ****     
 280:..\src/interruptions.c ****     // Check Interrupt 
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     if (interrupt_flag){
 512              		.loc 1 282 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 15


 513 0032 BB4B     		ldr	r3, .L51+4
 514 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515 0036 002B     		cmp	r3, #0
 516 0038 07D0     		beq	.L34
 283:..\src/interruptions.c ****         interrupt_flag = FALSE;
 517              		.loc 1 283 0
 518 003a B94B     		ldr	r3, .L51+4
 519 003c 0022     		movs	r2, #0
 520 003e 1A70     		strb	r2, [r3]
 284:..\src/interruptions.c ****         interrupt_manager();
 521              		.loc 1 284 0
 522 0040 FFF7FEFF 		bl	interrupt_manager
 285:..\src/interruptions.c ****         write_cycles = TRUE;
 523              		.loc 1 285 0
 524 0044 0123     		movs	r3, #1
 525 0046 87F8C739 		strb	r3, [r7, #2503]
 526              	.L34:
 286:..\src/interruptions.c ****     }
 287:..\src/interruptions.c **** 
 288:..\src/interruptions.c ****     //---------------------------------- Get Encoders
 289:..\src/interruptions.c **** 
 290:..\src/interruptions.c ****     encoder_reading_SPI(); 
 527              		.loc 1 290 0
 528 004a FFF7FEFF 		bl	encoder_reading_SPI
 291:..\src/interruptions.c ****     
 292:..\src/interruptions.c ****     // Check Interrupt     
 293:..\src/interruptions.c ****     
 294:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 294 0
 530 004e B44B     		ldr	r3, .L51+4
 531 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0052 002B     		cmp	r3, #0
 533 0054 07D0     		beq	.L35
 295:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 295 0
 535 0056 B24B     		ldr	r3, .L51+4
 536 0058 0022     		movs	r2, #0
 537 005a 1A70     		strb	r2, [r3]
 296:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 296 0
 539 005c FFF7FEFF 		bl	interrupt_manager
 297:..\src/interruptions.c ****         write_cycles = TRUE;
 540              		.loc 1 297 0
 541 0060 0123     		movs	r3, #1
 542 0062 87F8C739 		strb	r3, [r7, #2503]
 543              	.L35:
 298:..\src/interruptions.c ****     }
 299:..\src/interruptions.c **** 
 300:..\src/interruptions.c ****     //---------------------------------- Control Motor
 301:..\src/interruptions.c ****    
 302:..\src/interruptions.c ****     motor_control();
 544              		.loc 1 302 0
 545 0066 FFF7FEFF 		bl	motor_control
 303:..\src/interruptions.c **** 
 304:..\src/interruptions.c ****     // Check Interrupt 
 305:..\src/interruptions.c **** 
 306:..\src/interruptions.c ****     if (interrupt_flag){
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 16


 546              		.loc 1 306 0
 547 006a AD4B     		ldr	r3, .L51+4
 548 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 549 006e 002B     		cmp	r3, #0
 550 0070 07D0     		beq	.L36
 307:..\src/interruptions.c ****         interrupt_flag = FALSE;
 551              		.loc 1 307 0
 552 0072 AB4B     		ldr	r3, .L51+4
 553 0074 0022     		movs	r2, #0
 554 0076 1A70     		strb	r2, [r3]
 308:..\src/interruptions.c ****         interrupt_manager();
 555              		.loc 1 308 0
 556 0078 FFF7FEFF 		bl	interrupt_manager
 309:..\src/interruptions.c ****         write_cycles = TRUE;
 557              		.loc 1 309 0
 558 007c 0123     		movs	r3, #1
 559 007e 87F8C739 		strb	r3, [r7, #2503]
 560              	.L36:
 310:..\src/interruptions.c ****     }
 311:..\src/interruptions.c **** 
 312:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 313:..\src/interruptions.c **** 
 314:..\src/interruptions.c ****     analog_read_end();
 561              		.loc 1 314 0
 562 0082 FFF7FEFF 		bl	analog_read_end
 315:..\src/interruptions.c **** 
 316:..\src/interruptions.c ****     if (interrupt_flag){
 563              		.loc 1 316 0
 564 0086 A64B     		ldr	r3, .L51+4
 565 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 566 008a 002B     		cmp	r3, #0
 567 008c 07D0     		beq	.L37
 317:..\src/interruptions.c ****         interrupt_flag = FALSE;
 568              		.loc 1 317 0
 569 008e A44B     		ldr	r3, .L51+4
 570 0090 0022     		movs	r2, #0
 571 0092 1A70     		strb	r2, [r3]
 318:..\src/interruptions.c ****         interrupt_manager();
 572              		.loc 1 318 0
 573 0094 FFF7FEFF 		bl	interrupt_manager
 319:..\src/interruptions.c ****         write_cycles = TRUE;
 574              		.loc 1 319 0
 575 0098 0123     		movs	r3, #1
 576 009a 87F8C739 		strb	r3, [r7, #2503]
 577              	.L37:
 320:..\src/interruptions.c ****     }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****     overcurrent_control();
 578              		.loc 1 324 0
 579 009e FFF7FEFF 		bl	overcurrent_control
 325:..\src/interruptions.c ****     
 326:..\src/interruptions.c ****     // Check Interrupt 
 327:..\src/interruptions.c ****     
 328:..\src/interruptions.c ****     if (interrupt_flag){
 580              		.loc 1 328 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 17


 581 00a2 9F4B     		ldr	r3, .L51+4
 582 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 583 00a6 002B     		cmp	r3, #0
 584 00a8 07D0     		beq	.L38
 329:..\src/interruptions.c ****         interrupt_flag = FALSE;
 585              		.loc 1 329 0
 586 00aa 9D4B     		ldr	r3, .L51+4
 587 00ac 0022     		movs	r2, #0
 588 00ae 1A70     		strb	r2, [r3]
 330:..\src/interruptions.c ****         interrupt_manager();
 589              		.loc 1 330 0
 590 00b0 FFF7FEFF 		bl	interrupt_manager
 331:..\src/interruptions.c ****         write_cycles = TRUE;
 591              		.loc 1 331 0
 592 00b4 0123     		movs	r3, #1
 593 00b6 87F8C739 		strb	r3, [r7, #2503]
 594              	.L38:
 332:..\src/interruptions.c ****     }
 333:..\src/interruptions.c **** 
 334:..\src/interruptions.c ****     //---------------------------------- Calibration 
 335:..\src/interruptions.c **** 
 336:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 337:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 595              		.loc 1 337 0
 596 00ba 9A4B     		ldr	r3, .L51+8
 597 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 598 00be 012B     		cmp	r3, #1
 599 00c0 0ED1     		bne	.L39
 338:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 600              		.loc 1 338 0
 601 00c2 994B     		ldr	r3, .L51+12
 602 00c4 1B88     		ldrh	r3, [r3]
 603 00c6 0A2B     		cmp	r3, #10
 604 00c8 04D1     		bne	.L40
 339:..\src/interruptions.c ****             calibration();
 605              		.loc 1 339 0
 606 00ca FFF7FEFF 		bl	calibration
 340:..\src/interruptions.c ****             counter_calibration = 0;
 607              		.loc 1 340 0
 608 00ce 964B     		ldr	r3, .L51+12
 609 00d0 0022     		movs	r2, #0
 610 00d2 1A80     		strh	r2, [r3]	@ movhi
 611              	.L40:
 341:..\src/interruptions.c ****         }
 342:..\src/interruptions.c ****         counter_calibration++;
 612              		.loc 1 342 0
 613 00d4 944B     		ldr	r3, .L51+12
 614 00d6 1B88     		ldrh	r3, [r3]
 615 00d8 0133     		adds	r3, r3, #1
 616 00da 9AB2     		uxth	r2, r3
 617 00dc 924B     		ldr	r3, .L51+12
 618 00de 1A80     		strh	r2, [r3]	@ movhi
 619              	.L39:
 343:..\src/interruptions.c ****     }
 344:..\src/interruptions.c **** 
 345:..\src/interruptions.c ****     // Check Interrupt 
 346:..\src/interruptions.c ****     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 18


 347:..\src/interruptions.c ****     if (interrupt_flag){
 620              		.loc 1 347 0
 621 00e0 8F4B     		ldr	r3, .L51+4
 622 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 623 00e4 002B     		cmp	r3, #0
 624 00e6 07D0     		beq	.L41
 348:..\src/interruptions.c ****         interrupt_flag = FALSE;
 625              		.loc 1 348 0
 626 00e8 8D4B     		ldr	r3, .L51+4
 627 00ea 0022     		movs	r2, #0
 628 00ec 1A70     		strb	r2, [r3]
 349:..\src/interruptions.c ****         interrupt_manager();
 629              		.loc 1 349 0
 630 00ee FFF7FEFF 		bl	interrupt_manager
 350:..\src/interruptions.c ****         write_cycles = TRUE;
 631              		.loc 1 350 0
 632 00f2 0123     		movs	r3, #1
 633 00f4 87F8C739 		strb	r3, [r7, #2503]
 634              	.L41:
 351:..\src/interruptions.c ****     }
 352:..\src/interruptions.c ****     
 353:..\src/interruptions.c ****      
 354:..\src/interruptions.c ****     //---------------------------------- Rest position check
 355:..\src/interruptions.c ****     
 356:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 357:..\src/interruptions.c ****     if (c_mem.rest_position_flag == TRUE){
 635              		.loc 1 357 0
 636 00f8 8C4B     		ldr	r3, .L51+16
 637 00fa 93F8A430 		ldrb	r3, [r3, #164]	@ zero_extendqisi2
 638 00fe 012B     		cmp	r3, #1
 639 0100 1AD1     		bne	.L42
 358:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 640              		.loc 1 358 0
 641 0102 894B     		ldr	r3, .L51+12
 642 0104 1B88     		ldrh	r3, [r3]
 643 0106 0A2B     		cmp	r3, #10
 644 0108 04D1     		bne	.L43
 359:..\src/interruptions.c ****                 check_rest_position();
 645              		.loc 1 359 0
 646 010a FFF7FEFF 		bl	check_rest_position
 360:..\src/interruptions.c ****                 counter_calibration = 0;
 647              		.loc 1 360 0
 648 010e 864B     		ldr	r3, .L51+12
 649 0110 0022     		movs	r2, #0
 650 0112 1A80     		strh	r2, [r3]	@ movhi
 651              	.L43:
 361:..\src/interruptions.c ****         }
 362:..\src/interruptions.c ****         counter_calibration++;
 652              		.loc 1 362 0
 653 0114 844B     		ldr	r3, .L51+12
 654 0116 1B88     		ldrh	r3, [r3]
 655 0118 0133     		adds	r3, r3, #1
 656 011a 9AB2     		uxth	r2, r3
 657 011c 824B     		ldr	r3, .L51+12
 658 011e 1A80     		strh	r2, [r3]	@ movhi
 363:..\src/interruptions.c **** 
 364:..\src/interruptions.c ****         // Check Interrupt     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 19


 365:..\src/interruptions.c ****         if (interrupt_flag){
 659              		.loc 1 365 0
 660 0120 7F4B     		ldr	r3, .L51+4
 661 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 662 0124 002B     		cmp	r3, #0
 663 0126 07D0     		beq	.L42
 366:..\src/interruptions.c ****             interrupt_flag = FALSE;
 664              		.loc 1 366 0
 665 0128 7D4B     		ldr	r3, .L51+4
 666 012a 0022     		movs	r2, #0
 667 012c 1A70     		strb	r2, [r3]
 367:..\src/interruptions.c ****             interrupt_manager();
 668              		.loc 1 367 0
 669 012e FFF7FEFF 		bl	interrupt_manager
 368:..\src/interruptions.c **** 			write_cycles = TRUE;
 670              		.loc 1 368 0
 671 0132 0123     		movs	r3, #1
 672 0134 87F8C739 		strb	r3, [r7, #2503]
 673              	.L42:
 369:..\src/interruptions.c ****         }
 370:..\src/interruptions.c ****     }
 371:..\src/interruptions.c ****     
 372:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 373:..\src/interruptions.c **** 
 374:..\src/interruptions.c ****     cycles_counter_update();
 674              		.loc 1 374 0
 675 0138 FFF7FEFF 		bl	cycles_counter_update
 375:..\src/interruptions.c **** 
 376:..\src/interruptions.c ****     // Check Cycles Interrupt 
 377:..\src/interruptions.c ****     
 378:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 676              		.loc 1 378 0
 677 013c 7C4B     		ldr	r3, .L51+20
 678 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 679 0140 002B     		cmp	r3, #0
 680 0142 00F0C180 		beq	.L44
 379:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 681              		.loc 1 379 0
 682 0146 7A4B     		ldr	r3, .L51+20
 683 0148 0022     		movs	r2, #0
 684 014a 1A70     		strb	r2, [r3]
 380:..\src/interruptions.c **** 
 381:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 382:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 383:..\src/interruptions.c ****         if(can_write) {
 685              		.loc 1 383 0
 686 014c 794B     		ldr	r3, .L51+24
 687 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 688 0150 002B     		cmp	r3, #0
 689 0152 00F0B980 		beq	.L44
 384:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 690              		.loc 1 384 0
 691 0156 784B     		ldr	r3, .L51+28
 692 0158 0022     		movs	r2, #0
 693 015a 1A70     		strb	r2, [r3]
 385:..\src/interruptions.c ****             
 386:..\src/interruptions.c ****             //Update time variable
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 20


 387:..\src/interruptions.c ****             g_mem.total_time_on = g_mem.total_time_on + 120;  // Add 120 seconds.
 694              		.loc 1 387 0
 695 015c 774B     		ldr	r3, .L51+32
 696 015e D3F80831 		ldr	r3, [r3, #264]
 697 0162 7833     		adds	r3, r3, #120
 698 0164 754A     		ldr	r2, .L51+32
 699 0166 C2F80831 		str	r3, [r2, #264]
 388:..\src/interruptions.c ****             
 389:..\src/interruptions.c ****             if (c_mem.read_exp_port_flag == EXP_SD_RTC) {
 700              		.loc 1 389 0
 701 016a 704B     		ldr	r3, .L51+16
 702 016c 93F8A830 		ldrb	r3, [r3, #168]	@ zero_extendqisi2
 703 0170 012B     		cmp	r3, #1
 704 0172 40F0A980 		bne	.L44
 390:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_DATE_RD);
 705              		.loc 1 390 0
 706 0176 8720     		movs	r0, #135
 707 0178 FFF7FEFF 		bl	DS1302_read
 708 017c 0346     		mov	r3, r0
 709 017e 87F8C639 		strb	r3, [r7, #2502]
 391:..\src/interruptions.c ****                 g_mem.curr_time[0] = (rtc_data/16) * 10 + rtc_data%16;
 710              		.loc 1 391 0
 711 0182 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 712 0186 1B09     		lsrs	r3, r3, #4
 713 0188 DBB2     		uxtb	r3, r3
 714 018a 1A46     		mov	r2, r3
 715 018c 9200     		lsls	r2, r2, #2
 716 018e 1344     		add	r3, r3, r2
 717 0190 5B00     		lsls	r3, r3, #1
 718 0192 DAB2     		uxtb	r2, r3
 719 0194 97F8C639 		ldrb	r3, [r7, #2502]
 720 0198 03F00F03 		and	r3, r3, #15
 721 019c DBB2     		uxtb	r3, r3
 722 019e 1344     		add	r3, r3, r2
 723 01a0 DAB2     		uxtb	r2, r3
 724 01a2 664B     		ldr	r3, .L51+32
 725 01a4 83F81021 		strb	r2, [r3, #272]
 392:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_MONTH_RD);
 726              		.loc 1 392 0
 727 01a8 8920     		movs	r0, #137
 728 01aa FFF7FEFF 		bl	DS1302_read
 729 01ae 0346     		mov	r3, r0
 730 01b0 87F8C639 		strb	r3, [r7, #2502]
 393:..\src/interruptions.c ****                 g_mem.curr_time[1] = (rtc_data/16) * 10 + rtc_data%16;
 731              		.loc 1 393 0
 732 01b4 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 733 01b8 1B09     		lsrs	r3, r3, #4
 734 01ba DBB2     		uxtb	r3, r3
 735 01bc 1A46     		mov	r2, r3
 736 01be 9200     		lsls	r2, r2, #2
 737 01c0 1344     		add	r3, r3, r2
 738 01c2 5B00     		lsls	r3, r3, #1
 739 01c4 DAB2     		uxtb	r2, r3
 740 01c6 97F8C639 		ldrb	r3, [r7, #2502]
 741 01ca 03F00F03 		and	r3, r3, #15
 742 01ce DBB2     		uxtb	r3, r3
 743 01d0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 21


 744 01d2 DAB2     		uxtb	r2, r3
 745 01d4 594B     		ldr	r3, .L51+32
 746 01d6 83F81121 		strb	r2, [r3, #273]
 394:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_YEAR_RD);
 747              		.loc 1 394 0
 748 01da 8D20     		movs	r0, #141
 749 01dc FFF7FEFF 		bl	DS1302_read
 750 01e0 0346     		mov	r3, r0
 751 01e2 87F8C639 		strb	r3, [r7, #2502]
 395:..\src/interruptions.c ****                 g_mem.curr_time[2] = (rtc_data/16) * 10 + rtc_data%16;
 752              		.loc 1 395 0
 753 01e6 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 754 01ea 1B09     		lsrs	r3, r3, #4
 755 01ec DBB2     		uxtb	r3, r3
 756 01ee 1A46     		mov	r2, r3
 757 01f0 9200     		lsls	r2, r2, #2
 758 01f2 1344     		add	r3, r3, r2
 759 01f4 5B00     		lsls	r3, r3, #1
 760 01f6 DAB2     		uxtb	r2, r3
 761 01f8 97F8C639 		ldrb	r3, [r7, #2502]
 762 01fc 03F00F03 		and	r3, r3, #15
 763 0200 DBB2     		uxtb	r3, r3
 764 0202 1344     		add	r3, r3, r2
 765 0204 DAB2     		uxtb	r2, r3
 766 0206 4D4B     		ldr	r3, .L51+32
 767 0208 83F81221 		strb	r2, [r3, #274]
 396:..\src/interruptions.c **** 
 397:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_HOUR_RD);
 768              		.loc 1 397 0
 769 020c 8520     		movs	r0, #133
 770 020e FFF7FEFF 		bl	DS1302_read
 771 0212 0346     		mov	r3, r0
 772 0214 87F8C639 		strb	r3, [r7, #2502]
 398:..\src/interruptions.c ****                 g_mem.curr_time[3] = (rtc_data/16) * 10 + rtc_data%16;
 773              		.loc 1 398 0
 774 0218 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 775 021c 1B09     		lsrs	r3, r3, #4
 776 021e DBB2     		uxtb	r3, r3
 777 0220 1A46     		mov	r2, r3
 778 0222 9200     		lsls	r2, r2, #2
 779 0224 1344     		add	r3, r3, r2
 780 0226 5B00     		lsls	r3, r3, #1
 781 0228 DAB2     		uxtb	r2, r3
 782 022a 97F8C639 		ldrb	r3, [r7, #2502]
 783 022e 03F00F03 		and	r3, r3, #15
 784 0232 DBB2     		uxtb	r3, r3
 785 0234 1344     		add	r3, r3, r2
 786 0236 DAB2     		uxtb	r2, r3
 787 0238 404B     		ldr	r3, .L51+32
 788 023a 83F81321 		strb	r2, [r3, #275]
 399:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_MINUTES_RD);
 789              		.loc 1 399 0
 790 023e 8320     		movs	r0, #131
 791 0240 FFF7FEFF 		bl	DS1302_read
 792 0244 0346     		mov	r3, r0
 793 0246 87F8C639 		strb	r3, [r7, #2502]
 400:..\src/interruptions.c ****                 g_mem.curr_time[4] = (rtc_data/16) * 10 + rtc_data%16;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 22


 794              		.loc 1 400 0
 795 024a 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 796 024e 1B09     		lsrs	r3, r3, #4
 797 0250 DBB2     		uxtb	r3, r3
 798 0252 1A46     		mov	r2, r3
 799 0254 9200     		lsls	r2, r2, #2
 800 0256 1344     		add	r3, r3, r2
 801 0258 5B00     		lsls	r3, r3, #1
 802 025a DAB2     		uxtb	r2, r3
 803 025c 97F8C639 		ldrb	r3, [r7, #2502]
 804 0260 03F00F03 		and	r3, r3, #15
 805 0264 DBB2     		uxtb	r3, r3
 806 0266 1344     		add	r3, r3, r2
 807 0268 DAB2     		uxtb	r2, r3
 808 026a 344B     		ldr	r3, .L51+32
 809 026c 83F81421 		strb	r2, [r3, #276]
 401:..\src/interruptions.c ****                 rtc_data = DS1302_read(DS1302_SECONDS_RD);
 810              		.loc 1 401 0
 811 0270 8120     		movs	r0, #129
 812 0272 FFF7FEFF 		bl	DS1302_read
 813 0276 0346     		mov	r3, r0
 814 0278 87F8C639 		strb	r3, [r7, #2502]
 402:..\src/interruptions.c ****                 g_mem.curr_time[5] = (rtc_data/16) * 10 + rtc_data%16;
 815              		.loc 1 402 0
 816 027c 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 817 0280 1B09     		lsrs	r3, r3, #4
 818 0282 DBB2     		uxtb	r3, r3
 819 0284 1A46     		mov	r2, r3
 820 0286 9200     		lsls	r2, r2, #2
 821 0288 1344     		add	r3, r3, r2
 822 028a 5B00     		lsls	r3, r3, #1
 823 028c DAB2     		uxtb	r2, r3
 824 028e 97F8C639 		ldrb	r3, [r7, #2502]
 825 0292 03F00F03 		and	r3, r3, #15
 826 0296 DBB2     		uxtb	r3, r3
 827 0298 1344     		add	r3, r3, r2
 828 029a DAB2     		uxtb	r2, r3
 829 029c 274B     		ldr	r3, .L51+32
 830 029e 83F81521 		strb	r2, [r3, #277]
 403:..\src/interruptions.c ****                 
 404:..\src/interruptions.c ****                 //Write in SD card
 405:..\src/interruptions.c ****                 prepare_counter_info(info_);
 831              		.loc 1 405 0
 832 02a2 3B46     		mov	r3, r7
 833 02a4 1846     		mov	r0, r3
 834 02a6 FFF7FEFF 		bl	prepare_counter_info
 406:..\src/interruptions.c ****                 write_bytes = FS_Write(pFile, info_, strlen(info_));
 835              		.loc 1 406 0
 836 02aa 254B     		ldr	r3, .L51+36
 837 02ac 1C68     		ldr	r4, [r3]
 838 02ae 3B46     		mov	r3, r7
 839 02b0 1846     		mov	r0, r3
 840 02b2 FFF7FEFF 		bl	strlen
 841 02b6 0246     		mov	r2, r0
 842 02b8 3B46     		mov	r3, r7
 843 02ba 1946     		mov	r1, r3
 844 02bc 2046     		mov	r0, r4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 23


 845 02be FFF7FEFF 		bl	FS_Write
 846 02c2 0246     		mov	r2, r0
 847 02c4 1F4B     		ldr	r3, .L51+40
 848 02c6 1A60     		str	r2, [r3]
 849              	.L44:
 407:..\src/interruptions.c ****             }
 408:..\src/interruptions.c ****         }
 409:..\src/interruptions.c ****     }
 410:..\src/interruptions.c ****     
 411:..\src/interruptions.c ****     // Check Interrupt 
 412:..\src/interruptions.c ****     
 413:..\src/interruptions.c ****     if (interrupt_flag){
 850              		.loc 1 413 0
 851 02c8 154B     		ldr	r3, .L51+4
 852 02ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 853 02cc 002B     		cmp	r3, #0
 854 02ce 04D0     		beq	.L45
 414:..\src/interruptions.c ****         interrupt_flag = FALSE;
 855              		.loc 1 414 0
 856 02d0 134B     		ldr	r3, .L51+4
 857 02d2 0022     		movs	r2, #0
 858 02d4 1A70     		strb	r2, [r3]
 415:..\src/interruptions.c ****         interrupt_manager();
 859              		.loc 1 415 0
 860 02d6 FFF7FEFF 		bl	interrupt_manager
 861              	.L45:
 416:..\src/interruptions.c ****     }
 417:..\src/interruptions.c ****     
 418:..\src/interruptions.c ****     
 419:..\src/interruptions.c ****     //---------------------------------- Check battery
 420:..\src/interruptions.c **** 
 421:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 422:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 862              		.loc 1 422 0
 863 02da 1B4B     		ldr	r3, .L51+44
 864 02dc 1B88     		ldrh	r3, [r3]
 865 02de 0A2B     		cmp	r3, #10
 866 02e0 04D1     		bne	.L46
 423:..\src/interruptions.c ****         battery_management();   
 867              		.loc 1 423 0
 868 02e2 FFF7FEFF 		bl	battery_management
 424:..\src/interruptions.c ****         counter_tension_func = 0;
 869              		.loc 1 424 0
 870 02e6 184B     		ldr	r3, .L51+44
 871 02e8 0022     		movs	r2, #0
 872 02ea 1A80     		strh	r2, [r3]	@ movhi
 873              	.L46:
 425:..\src/interruptions.c ****     }
 426:..\src/interruptions.c ****     counter_tension_func++;
 874              		.loc 1 426 0
 875 02ec 164B     		ldr	r3, .L51+44
 876 02ee 1B88     		ldrh	r3, [r3]
 877 02f0 0133     		adds	r3, r3, #1
 878 02f2 9AB2     		uxth	r2, r3
 879 02f4 144B     		ldr	r3, .L51+44
 880 02f6 1A80     		strh	r2, [r3]	@ movhi
 427:..\src/interruptions.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 24


 428:..\src/interruptions.c ****     // Check Interrupt 
 429:..\src/interruptions.c ****     
 430:..\src/interruptions.c ****     if (interrupt_flag){
 881              		.loc 1 430 0
 882 02f8 094B     		ldr	r3, .L51+4
 883 02fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 884 02fc 002B     		cmp	r3, #0
 885 02fe 07D0     		beq	.L47
 431:..\src/interruptions.c ****         interrupt_flag = FALSE;
 886              		.loc 1 431 0
 887 0300 074B     		ldr	r3, .L51+4
 888 0302 0022     		movs	r2, #0
 889 0304 1A70     		strb	r2, [r3]
 432:..\src/interruptions.c ****         interrupt_manager();
 890              		.loc 1 432 0
 891 0306 FFF7FEFF 		bl	interrupt_manager
 433:..\src/interruptions.c ****         write_cycles = TRUE;
 892              		.loc 1 433 0
 893 030a 0123     		movs	r3, #1
 894 030c 87F8C739 		strb	r3, [r7, #2503]
 895              	.L47:
 434:..\src/interruptions.c ****     }
 435:..\src/interruptions.c ****    
 436:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 437:..\src/interruptions.c ****     if (c_mem.read_imu_flag) {
 896              		.loc 1 437 0
 897 0310 064B     		ldr	r3, .L51+16
 898 0312 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 899 0316 002B     		cmp	r3, #0
 900 0318 23D0     		beq	.L48
 901 031a 17E0     		b	.L52
 902              	.L53:
 903              		.align	2
 904              	.L51:
 905 031c 00000000 		.word	timer_value0
 906 0320 00000000 		.word	interrupt_flag
 907 0324 00000000 		.word	calib
 908 0328 00000000 		.word	counter_calibration.10063
 909 032c 00000000 		.word	c_mem
 910 0330 00000000 		.word	cycles_interrupt_flag
 911 0334 00000000 		.word	can_write
 912 0338 00000000 		.word	cycles_status
 913 033c 00000000 		.word	g_mem
 914 0340 00000000 		.word	pFile
 915 0344 00000000 		.word	write_bytes
 916 0348 02000000 		.word	counter_tension_func.10064
 917              	.L52:
 438:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 918              		.loc 1 438 0
 919 034c FFF7FEFF 		bl	ReadAllIMUs
 439:..\src/interruptions.c ****         
 440:..\src/interruptions.c ****         if (interrupt_flag){
 920              		.loc 1 440 0
 921 0350 334B     		ldr	r3, .L54+8
 922 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 923 0354 002B     		cmp	r3, #0
 924 0356 04D0     		beq	.L48
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 25


 441:..\src/interruptions.c ****             interrupt_flag = FALSE;
 925              		.loc 1 441 0
 926 0358 314B     		ldr	r3, .L54+8
 927 035a 0022     		movs	r2, #0
 928 035c 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****             interrupt_manager();
 929              		.loc 1 442 0
 930 035e FFF7FEFF 		bl	interrupt_manager
 931              	.L48:
 443:..\src/interruptions.c ****         }
 444:..\src/interruptions.c ****     }
 445:..\src/interruptions.c ****     
 446:..\src/interruptions.c ****     //---------------------------------- Update States
 447:..\src/interruptions.c ****     
 448:..\src/interruptions.c ****     // Load k-1 state
 449:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 932              		.loc 1 449 0
 933 0362 304A     		ldr	r2, .L54+12
 934 0364 304B     		ldr	r3, .L54+16
 935 0366 1446     		mov	r4, r2
 936 0368 1D46     		mov	r5, r3
 937 036a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 938 036c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 939 036e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 940 0370 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 941 0372 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 942 0374 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 943 0376 95E80300 		ldmia	r5, {r0, r1}
 944 037a 84E80300 		stmia	r4, {r0, r1}
 450:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 945              		.loc 1 450 0
 946 037e 2B4A     		ldr	r2, .L54+20
 947 0380 2B4B     		ldr	r3, .L54+24
 948 0382 1446     		mov	r4, r2
 949 0384 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 950 0386 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 451:..\src/interruptions.c **** 
 452:..\src/interruptions.c ****     // Load k+1 state        
 453:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 951              		.loc 1 453 0
 952 038a 294A     		ldr	r2, .L54+24
 953 038c 294B     		ldr	r3, .L54+28
 954 038e 1446     		mov	r4, r2
 955 0390 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 956 0392 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 454:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 957              		.loc 1 454 0
 958 0396 284A     		ldr	r2, .L54+32
 959 0398 284B     		ldr	r3, .L54+36
 960 039a 1046     		mov	r0, r2
 961 039c 1946     		mov	r1, r3
 962 039e 7823     		movs	r3, #120
 963 03a0 1A46     		mov	r2, r3
 964 03a2 FFF7FEFF 		bl	memcpy
 455:..\src/interruptions.c ****                 
 456:..\src/interruptions.c ****     if (interrupt_flag){
 965              		.loc 1 456 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 26


 966 03a6 1E4B     		ldr	r3, .L54+8
 967 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 03aa 002B     		cmp	r3, #0
 969 03ac 07D0     		beq	.L49
 457:..\src/interruptions.c ****         interrupt_flag = FALSE;
 970              		.loc 1 457 0
 971 03ae 1C4B     		ldr	r3, .L54+8
 972 03b0 0022     		movs	r2, #0
 973 03b2 1A70     		strb	r2, [r3]
 458:..\src/interruptions.c ****         interrupt_manager();
 974              		.loc 1 458 0
 975 03b4 FFF7FEFF 		bl	interrupt_manager
 459:..\src/interruptions.c ****         write_cycles = TRUE;
 976              		.loc 1 459 0
 977 03b8 0123     		movs	r3, #1
 978 03ba 87F8C739 		strb	r3, [r7, #2503]
 979              	.L49:
 460:..\src/interruptions.c ****     }
 461:..\src/interruptions.c **** 
 462:..\src/interruptions.c ****     if (c_mem.input_mode == INPUT_MODE_EXTERNAL) {
 980              		.loc 1 462 0
 981 03be 204B     		ldr	r3, .L54+40
 982 03c0 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 983 03c4 002B     		cmp	r3, #0
 984 03c6 02D1     		bne	.L50
 463:..\src/interruptions.c ****         change_ext_ref_flag = FALSE;
 985              		.loc 1 463 0
 986 03c8 1E4B     		ldr	r3, .L54+44
 987 03ca 0022     		movs	r2, #0
 988 03cc 1A70     		strb	r2, [r3]
 989              	.L50:
 464:..\src/interruptions.c ****     }
 465:..\src/interruptions.c ****     
 466:..\src/interruptions.c ****     timer_value = (uint32)MY_TIMER_ReadCounter();
 990              		.loc 1 466 0
 991 03ce FFF7FEFF 		bl	MY_TIMER_ReadCounter
 992 03d2 0246     		mov	r2, r0
 993 03d4 1C4B     		ldr	r3, .L54+48
 994 03d6 1A60     		str	r2, [r3]
 467:..\src/interruptions.c ****     cycle_time = (float)((timer_value0 - timer_value)/1000000.0);
 995              		.loc 1 467 0
 996 03d8 1C4B     		ldr	r3, .L54+52
 997 03da 1A68     		ldr	r2, [r3]
 998 03dc 1A4B     		ldr	r3, .L54+48
 999 03de 1B68     		ldr	r3, [r3]
 1000 03e0 D31A     		subs	r3, r2, r3
 1001 03e2 1846     		mov	r0, r3
 1002 03e4 FFF7FEFF 		bl	__aeabi_ui2d
 1003 03e8 0BA3     		adr	r3, .L54
 1004 03ea D3E90023 		ldrd	r2, [r3]
 1005 03ee FFF7FEFF 		bl	__aeabi_ddiv
 1006 03f2 0346     		mov	r3, r0
 1007 03f4 0C46     		mov	r4, r1
 1008 03f6 1846     		mov	r0, r3
 1009 03f8 2146     		mov	r1, r4
 1010 03fa FFF7FEFF 		bl	__aeabi_d2f
 1011 03fe 0246     		mov	r2, r0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 27


 1012 0400 134B     		ldr	r3, .L54+56
 1013 0402 1A60     		str	r2, [r3]	@ float
 468:..\src/interruptions.c ****     MY_TIMER_WriteCounter(5000000);
 1014              		.loc 1 468 0
 1015 0404 1348     		ldr	r0, .L54+60
 1016 0406 FFF7FEFF 		bl	MY_TIMER_WriteCounter
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c **** }
 1017              		.loc 1 470 0
 1018 040a 00BF     		nop
 1019 040c 07F6C817 		addw	r7, r7, #2504
 1020              		.cfi_def_cfa_offset 16
 1021 0410 BD46     		mov	sp, r7
 1022              		.cfi_def_cfa_register 13
 1023              		@ sp needed
 1024 0412 B0BD     		pop	{r4, r5, r7, pc}
 1025              	.L55:
 1026 0414 AFF30080 		.align	3
 1027              	.L54:
 1028 0418 00000000 		.word	0
 1029 041c 80842E41 		.word	1093567616
 1030 0420 00000000 		.word	interrupt_flag
 1031 0424 00000000 		.word	g_measOld
 1032 0428 00000000 		.word	g_meas
 1033 042c 00000000 		.word	g_refOld
 1034 0430 00000000 		.word	g_ref
 1035 0434 00000000 		.word	g_refNew
 1036 0438 00000000 		.word	g_imu
 1037 043c 00000000 		.word	g_imuNew
 1038 0440 00000000 		.word	c_mem
 1039 0444 00000000 		.word	change_ext_ref_flag
 1040 0448 00000000 		.word	timer_value
 1041 044c 00000000 		.word	timer_value0
 1042 0450 00000000 		.word	cycle_time
 1043 0454 404B4C00 		.word	5000000
 1044              		.cfi_endproc
 1045              	.LFE67:
 1046              		.size	function_scheduler, .-function_scheduler
 1047              		.section	.text.motor_control,"ax",%progbits
 1048              		.align	2
 1049              		.global	motor_control
 1050              		.thumb
 1051              		.thumb_func
 1052              		.type	motor_control, %function
 1053              	motor_control:
 1054              	.LFB68:
 471:..\src/interruptions.c **** 
 472:..\src/interruptions.c **** //==============================================================================
 473:..\src/interruptions.c **** //                                                                 MOTOR CONTROL
 474:..\src/interruptions.c **** //==============================================================================
 475:..\src/interruptions.c **** 
 476:..\src/interruptions.c **** void motor_control() {
 1055              		.loc 1 476 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 80
 1058              		@ frame_needed = 1, uses_anonymous_args = 0
 1059 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 28


 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 94B0     		sub	sp, sp, #80
 1064              		.cfi_def_cfa_offset 88
 1065 0004 00AF     		add	r7, sp, #0
 1066              		.cfi_def_cfa_register 7
 477:..\src/interruptions.c **** 
 478:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 1067              		.loc 1 478 0
 1068 0006 0023     		movs	r3, #0
 1069 0008 FB64     		str	r3, [r7, #76]
 479:..\src/interruptions.c **** 
 480:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 481:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 482:..\src/interruptions.c **** 
 483:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 484:..\src/interruptions.c ****     int32 CYDATA handle_value;
 485:..\src/interruptions.c **** 
 486:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     int32 CYDATA k_p = c_mem.k_p;  
 1070              		.loc 1 488 0
 1071 000a 9B4B     		ldr	r3, .L169
 1072 000c 5B68     		ldr	r3, [r3, #4]
 1073 000e FB63     		str	r3, [r7, #60]
 489:..\src/interruptions.c ****     int32 CYDATA k_i = c_mem.k_i; 
 1074              		.loc 1 489 0
 1075 0010 994B     		ldr	r3, .L169
 1076 0012 9B68     		ldr	r3, [r3, #8]
 1077 0014 BB63     		str	r3, [r7, #56]
 490:..\src/interruptions.c ****     int32 CYDATA k_d = c_mem.k_d; 
 1078              		.loc 1 490 0
 1079 0016 984B     		ldr	r3, .L169
 1080 0018 DB68     		ldr	r3, [r3, #12]
 1081 001a 7B63     		str	r3, [r7, #52]
 491:..\src/interruptions.c **** 
 492:..\src/interruptions.c ****     int32 CYDATA k_p_c = c_mem.k_p_c;  
 1082              		.loc 1 492 0
 1083 001c 964B     		ldr	r3, .L169
 1084 001e 1B69     		ldr	r3, [r3, #16]
 1085 0020 3B63     		str	r3, [r7, #48]
 493:..\src/interruptions.c ****     int32 CYDATA k_i_c = c_mem.k_i_c; 
 1086              		.loc 1 493 0
 1087 0022 954B     		ldr	r3, .L169
 1088 0024 5B69     		ldr	r3, [r3, #20]
 1089 0026 FB62     		str	r3, [r7, #44]
 494:..\src/interruptions.c ****     int32 CYDATA k_d_c = c_mem.k_d_c;   
 1090              		.loc 1 494 0
 1091 0028 934B     		ldr	r3, .L169
 1092 002a 9B69     		ldr	r3, [r3, #24]
 1093 002c BB62     		str	r3, [r7, #40]
 495:..\src/interruptions.c **** 
 496:..\src/interruptions.c ****     int32 CYDATA k_p_dl = c_mem.k_p_dl;  
 1094              		.loc 1 496 0
 1095 002e 924B     		ldr	r3, .L169
 1096 0030 DB69     		ldr	r3, [r3, #28]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 29


 1097 0032 7B62     		str	r3, [r7, #36]
 497:..\src/interruptions.c ****     int32 CYDATA k_i_dl = c_mem.k_i_dl; 
 1098              		.loc 1 497 0
 1099 0034 904B     		ldr	r3, .L169
 1100 0036 1B6A     		ldr	r3, [r3, #32]
 1101 0038 3B62     		str	r3, [r7, #32]
 498:..\src/interruptions.c ****     int32 CYDATA k_d_dl = c_mem.k_d_dl;
 1102              		.loc 1 498 0
 1103 003a 8F4B     		ldr	r3, .L169
 1104 003c 5B6A     		ldr	r3, [r3, #36]
 1105 003e FB61     		str	r3, [r7, #28]
 499:..\src/interruptions.c ****     
 500:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = c_mem.k_p_c_dl;  
 1106              		.loc 1 500 0
 1107 0040 8D4B     		ldr	r3, .L169
 1108 0042 9B6A     		ldr	r3, [r3, #40]
 1109 0044 BB61     		str	r3, [r7, #24]
 501:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = c_mem.k_i_c_dl; 
 1110              		.loc 1 501 0
 1111 0046 8C4B     		ldr	r3, .L169
 1112 0048 DB6A     		ldr	r3, [r3, #44]
 1113 004a 7B61     		str	r3, [r7, #20]
 502:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = c_mem.k_d_c_dl;   
 1114              		.loc 1 502 0
 1115 004c 8A4B     		ldr	r3, .L169
 1116 004e 1B6B     		ldr	r3, [r3, #48]
 1117 0050 3B61     		str	r3, [r7, #16]
 503:..\src/interruptions.c **** 
 504:..\src/interruptions.c ****     // Static Variables
 505:..\src/interruptions.c **** 
 506:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 507:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 508:..\src/interruptions.c ****     
 509:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 510:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 511:..\src/interruptions.c ****     static int32 prev_pwm;
 512:..\src/interruptions.c **** 
 513:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 514:..\src/interruptions.c ****     static uint32 position_counter = 0;
 515:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 516:..\src/interruptions.c ****                                     // 1 EMG 1
 517:..\src/interruptions.c ****                                     // 2 EMG 2
 518:..\src/interruptions.c ****                                     // wait for both to get down
 519:..\src/interruptions.c ****     
 520:..\src/interruptions.c **** 
 521:..\src/interruptions.c ****     err_emg_1 = g_meas.emg[0] - c_mem.emg_threshold[0];
 1118              		.loc 1 521 0
 1119 0052 8A4B     		ldr	r3, .L169+4
 1120 0054 9B69     		ldr	r3, [r3, #24]
 1121 0056 884A     		ldr	r2, .L169
 1122 0058 B2F86A20 		ldrh	r2, [r2, #106]
 1123 005c 9B1A     		subs	r3, r3, r2
 1124 005e FB60     		str	r3, [r7, #12]
 522:..\src/interruptions.c ****     err_emg_2 = g_meas.emg[1] - c_mem.emg_threshold[1];
 1125              		.loc 1 522 0
 1126 0060 864B     		ldr	r3, .L169+4
 1127 0062 DB69     		ldr	r3, [r3, #28]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 30


 1128 0064 844A     		ldr	r2, .L169
 1129 0066 B2F86C20 		ldrh	r2, [r2, #108]
 1130 006a 9B1A     		subs	r3, r3, r2
 1131 006c BB60     		str	r3, [r7, #8]
 523:..\src/interruptions.c **** 
 524:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
 525:..\src/interruptions.c ****     switch(c_mem.input_mode) {
 1132              		.loc 1 525 0
 1133 006e 824B     		ldr	r3, .L169
 1134 0070 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 1135 0074 013B     		subs	r3, r3, #1
 1136 0076 042B     		cmp	r3, #4
 1137 0078 00F27781 		bhi	.L161
 1138 007c 01A2     		adr	r2, .L59
 1139 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1140 0082 00BF     		.p2align 2
 1141              	.L59:
 1142 0084 99000000 		.word	.L58+1
 1143 0088 2B010000 		.word	.L60+1
 1144 008c 57010000 		.word	.L61+1
 1145 0090 BF010000 		.word	.L62+1
 1146 0094 91020000 		.word	.L63+1
 1147              		.p2align 1
 1148              	.L58:
 526:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 529:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 530:..\src/interruptions.c ****             if (c_mem.double_encoder_on_off) 
 1149              		.loc 1 530 0
 1150 0098 774B     		ldr	r3, .L169
 1151 009a 93F87930 		ldrb	r3, [r3, #121]	@ zero_extendqisi2
 1152 009e 002B     		cmp	r3, #0
 1153 00a0 0BD0     		beq	.L64
 531:..\src/interruptions.c ****                 handle_value = (g_meas.pos[2] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
 1154              		.loc 1 531 0
 1155 00a2 764B     		ldr	r3, .L169+4
 1156 00a4 9B68     		ldr	r3, [r3, #8]
 1157 00a6 744A     		ldr	r2, .L169
 1158 00a8 92F97A20 		ldrsb	r2, [r2, #122]
 1159 00ac 02FB03F2 		mul	r2, r2, r3
 1160 00b0 734B     		ldr	r3, .L169+8
 1161 00b2 9B6D     		ldr	r3, [r3, #88]
 1162 00b4 1344     		add	r3, r3, r2
 1163 00b6 3B64     		str	r3, [r7, #64]
 1164 00b8 0AE0     		b	.L65
 1165              	.L64:
 532:..\src/interruptions.c ****             else
 533:..\src/interruptions.c ****                 handle_value = (g_meas.pos[1] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
 1166              		.loc 1 533 0
 1167 00ba 704B     		ldr	r3, .L169+4
 1168 00bc 5B68     		ldr	r3, [r3, #4]
 1169 00be 6E4A     		ldr	r2, .L169
 1170 00c0 92F97A20 		ldrsb	r2, [r2, #122]
 1171 00c4 02FB03F2 		mul	r2, r2, r3
 1172 00c8 6D4B     		ldr	r3, .L169+8
 1173 00ca 9B6D     		ldr	r3, [r3, #88]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 31


 1174 00cc 1344     		add	r3, r3, r2
 1175 00ce 3B64     		str	r3, [r7, #64]
 1176              	.L65:
 534:..\src/interruptions.c ****             
 535:..\src/interruptions.c **** 
 536:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 537:..\src/interruptions.c ****             if (((handle_value - g_refOld.pos) > c_mem.max_step_pos) && (c_mem.max_step_pos != 0))
 1177              		.loc 1 537 0
 1178 00d0 6C4B     		ldr	r3, .L169+12
 1179 00d2 1B68     		ldr	r3, [r3]
 1180 00d4 3A6C     		ldr	r2, [r7, #64]
 1181 00d6 D21A     		subs	r2, r2, r3
 1182 00d8 674B     		ldr	r3, .L169
 1183 00da 5B6E     		ldr	r3, [r3, #100]
 1184 00dc 9A42     		cmp	r2, r3
 1185 00de 0BDD     		ble	.L66
 1186              		.loc 1 537 0 is_stmt 0 discriminator 1
 1187 00e0 654B     		ldr	r3, .L169
 1188 00e2 5B6E     		ldr	r3, [r3, #100]
 1189 00e4 002B     		cmp	r3, #0
 1190 00e6 07D0     		beq	.L66
 538:..\src/interruptions.c ****                 g_ref.pos += c_mem.max_step_pos;
 1191              		.loc 1 538 0 is_stmt 1
 1192 00e8 674B     		ldr	r3, .L169+16
 1193 00ea 1A68     		ldr	r2, [r3]
 1194 00ec 624B     		ldr	r3, .L169
 1195 00ee 5B6E     		ldr	r3, [r3, #100]
 1196 00f0 1344     		add	r3, r3, r2
 1197 00f2 654A     		ldr	r2, .L169+16
 1198 00f4 1360     		str	r3, [r2]
 1199 00f6 17E0     		b	.L67
 1200              	.L66:
 539:..\src/interruptions.c ****             else {
 540:..\src/interruptions.c ****                 if (((handle_value - g_refOld.pos) < c_mem.max_step_neg) && (c_mem.max_step_neg != 
 1201              		.loc 1 540 0
 1202 00f8 624B     		ldr	r3, .L169+12
 1203 00fa 1B68     		ldr	r3, [r3]
 1204 00fc 3A6C     		ldr	r2, [r7, #64]
 1205 00fe D21A     		subs	r2, r2, r3
 1206 0100 5D4B     		ldr	r3, .L169
 1207 0102 1B6E     		ldr	r3, [r3, #96]
 1208 0104 9A42     		cmp	r2, r3
 1209 0106 0BDA     		bge	.L68
 1210              		.loc 1 540 0 is_stmt 0 discriminator 1
 1211 0108 5B4B     		ldr	r3, .L169
 1212 010a 1B6E     		ldr	r3, [r3, #96]
 1213 010c 002B     		cmp	r3, #0
 1214 010e 07D0     		beq	.L68
 541:..\src/interruptions.c ****                     g_ref.pos += c_mem.max_step_neg;
 1215              		.loc 1 541 0 is_stmt 1
 1216 0110 5D4B     		ldr	r3, .L169+16
 1217 0112 1A68     		ldr	r2, [r3]
 1218 0114 584B     		ldr	r3, .L169
 1219 0116 1B6E     		ldr	r3, [r3, #96]
 1220 0118 1344     		add	r3, r3, r2
 1221 011a 5B4A     		ldr	r2, .L169+16
 1222 011c 1360     		str	r3, [r2]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 32


 1223 011e 03E0     		b	.L67
 1224              	.L68:
 542:..\src/interruptions.c ****                 else
 543:..\src/interruptions.c ****                     g_ref.pos = handle_value;
 1225              		.loc 1 543 0
 1226 0120 594A     		ldr	r2, .L169+16
 1227 0122 3B6C     		ldr	r3, [r7, #64]
 1228 0124 1360     		str	r3, [r2]
 544:..\src/interruptions.c ****             }
 545:..\src/interruptions.c ****             break;
 1229              		.loc 1 545 0
 1230 0126 23E1     		b	.L69
 1231              	.L67:
 1232 0128 22E1     		b	.L69
 1233              	.L60:
 546:..\src/interruptions.c ****             
 547:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 548:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1234              		.loc 1 548 0
 1235 012a FB68     		ldr	r3, [r7, #12]
 1236 012c 002B     		cmp	r3, #0
 1237 012e 0EDD     		ble	.L70
 549:..\src/interruptions.c ****                 g_ref.pos = (err_emg_1 * g_mem.pos_lim_sup) / (1024 - c_mem.emg_threshold[0]);
 1238              		.loc 1 549 0
 1239 0130 534B     		ldr	r3, .L169+8
 1240 0132 DB6D     		ldr	r3, [r3, #92]
 1241 0134 FA68     		ldr	r2, [r7, #12]
 1242 0136 02FB03F2 		mul	r2, r2, r3
 1243 013a 4F4B     		ldr	r3, .L169
 1244 013c B3F86A30 		ldrh	r3, [r3, #106]
 1245 0140 C3F58063 		rsb	r3, r3, #1024
 1246 0144 92FBF3F3 		sdiv	r3, r2, r3
 1247 0148 4F4A     		ldr	r2, .L169+16
 1248 014a 1360     		str	r3, [r2]
 550:..\src/interruptions.c ****             else
 551:..\src/interruptions.c ****                 g_ref.pos = 0;
 552:..\src/interruptions.c ****             break;
 1249              		.loc 1 552 0
 1250 014c 10E1     		b	.L69
 1251              	.L70:
 551:..\src/interruptions.c ****             break;
 1252              		.loc 1 551 0
 1253 014e 4E4B     		ldr	r3, .L169+16
 1254 0150 0022     		movs	r2, #0
 1255 0152 1A60     		str	r2, [r3]
 1256              		.loc 1 552 0
 1257 0154 0CE1     		b	.L69
 1258              	.L61:
 553:..\src/interruptions.c **** 
 554:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 555:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1259              		.loc 1 555 0
 1260 0156 4B4B     		ldr	r3, .L169+12
 1261 0158 1B68     		ldr	r3, [r3]
 1262 015a 4B4A     		ldr	r2, .L169+16
 1263 015c 1360     		str	r3, [r2]
 556:..\src/interruptions.c ****             if (err_emg_1 > 0) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 33


 1264              		.loc 1 556 0
 1265 015e FB68     		ldr	r3, [r7, #12]
 1266 0160 002B     		cmp	r3, #0
 1267 0162 13DD     		ble	.L72
 557:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos + (err_emg_1 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
 1268              		.loc 1 557 0
 1269 0164 474B     		ldr	r3, .L169+12
 1270 0166 1A68     		ldr	r2, [r3]
 1271 0168 454B     		ldr	r3, .L169+8
 1272 016a 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1273 016e 1946     		mov	r1, r3
 1274 0170 FB68     		ldr	r3, [r7, #12]
 1275 0172 03FB01F3 		mul	r3, r3, r1
 1276 0176 5900     		lsls	r1, r3, #1
 1277 0178 3F4B     		ldr	r3, .L169
 1278 017a B3F86A30 		ldrh	r3, [r3, #106]
 1279 017e C3F58063 		rsb	r3, r3, #1024
 1280 0182 91FBF3F3 		sdiv	r3, r1, r3
 1281 0186 1344     		add	r3, r3, r2
 1282 0188 3F4A     		ldr	r2, .L169+16
 1283 018a 1360     		str	r3, [r2]
 1284              	.L72:
 558:..\src/interruptions.c ****             }
 559:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1285              		.loc 1 559 0
 1286 018c BB68     		ldr	r3, [r7, #8]
 1287 018e 002B     		cmp	r3, #0
 1288 0190 40F3ED80 		ble	.L162
 560:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos - (err_emg_2 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
 1289              		.loc 1 560 0
 1290 0194 3B4B     		ldr	r3, .L169+12
 1291 0196 1A68     		ldr	r2, [r3]
 1292 0198 394B     		ldr	r3, .L169+8
 1293 019a 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1294 019e 1946     		mov	r1, r3
 1295 01a0 BB68     		ldr	r3, [r7, #8]
 1296 01a2 03FB01F3 		mul	r3, r3, r1
 1297 01a6 5900     		lsls	r1, r3, #1
 1298 01a8 334B     		ldr	r3, .L169
 1299 01aa B3F86C30 		ldrh	r3, [r3, #108]
 1300 01ae C3F58063 		rsb	r3, r3, #1024
 1301 01b2 91FBF3F3 		sdiv	r3, r1, r3
 1302 01b6 D31A     		subs	r3, r2, r3
 1303 01b8 334A     		ldr	r2, .L169+16
 1304 01ba 1360     		str	r3, [r2]
 561:..\src/interruptions.c ****             }
 562:..\src/interruptions.c ****             break;
 1305              		.loc 1 562 0
 1306 01bc D7E0     		b	.L162
 1307              	.L62:
 563:..\src/interruptions.c **** 
 564:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 565:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1308              		.loc 1 565 0
 1309 01be 314B     		ldr	r3, .L169+12
 1310 01c0 1B68     		ldr	r3, [r3]
 1311 01c2 314A     		ldr	r2, .L169+16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 34


 1312 01c4 1360     		str	r3, [r2]
 566:..\src/interruptions.c ****             switch (current_emg) {
 1313              		.loc 1 566 0
 1314 01c6 314B     		ldr	r3, .L169+20
 1315 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1316 01ca 012B     		cmp	r3, #1
 1317 01cc 1AD0     		beq	.L75
 1318 01ce 022B     		cmp	r3, #2
 1319 01d0 34D0     		beq	.L76
 1320 01d2 002B     		cmp	r3, #0
 1321 01d4 00D0     		beq	.L77
 567:..\src/interruptions.c ****                 case 0:
 568:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 569:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 570:..\src/interruptions.c ****                         current_emg = 1;
 571:..\src/interruptions.c ****                         break;
 572:..\src/interruptions.c ****                     }
 573:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 574:..\src/interruptions.c ****                         current_emg = 2;
 575:..\src/interruptions.c ****                         break;
 576:..\src/interruptions.c ****                     }
 577:..\src/interruptions.c ****                     break;
 578:..\src/interruptions.c **** 
 579:..\src/interruptions.c ****                 case 1:
 580:..\src/interruptions.c ****                     // EMG 1 is first
 581:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 582:..\src/interruptions.c ****                         current_emg = 0;
 583:..\src/interruptions.c ****                         break;
 584:..\src/interruptions.c ****                     }
 585:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_mem.e
 586:..\src/interruptions.c ****                     break;
 587:..\src/interruptions.c **** 
 588:..\src/interruptions.c ****                 case 2:
 589:..\src/interruptions.c ****                     // EMG 2 is first
 590:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 591:..\src/interruptions.c ****                         current_emg = 0;
 592:..\src/interruptions.c ****                         break;
 593:..\src/interruptions.c ****                     }
 594:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos - (err_emg_2 * g_mem.emg_speed << 2) / (1024 - c_mem.e
 595:..\src/interruptions.c ****                     break;
 596:..\src/interruptions.c **** 
 597:..\src/interruptions.c ****                 default:
 598:..\src/interruptions.c ****                     break;
 1322              		.loc 1 598 0
 1323 01d6 4EE0     		b	.L79
 1324              	.L77:
 569:..\src/interruptions.c ****                         current_emg = 1;
 1325              		.loc 1 569 0
 1326 01d8 FB68     		ldr	r3, [r7, #12]
 1327 01da 002B     		cmp	r3, #0
 1328 01dc 07DD     		ble	.L78
 569:..\src/interruptions.c ****                         current_emg = 1;
 1329              		.loc 1 569 0 is_stmt 0 discriminator 1
 1330 01de FA68     		ldr	r2, [r7, #12]
 1331 01e0 BB68     		ldr	r3, [r7, #8]
 1332 01e2 9A42     		cmp	r2, r3
 1333 01e4 03DD     		ble	.L78
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 35


 570:..\src/interruptions.c ****                         break;
 1334              		.loc 1 570 0 is_stmt 1
 1335 01e6 294B     		ldr	r3, .L169+20
 1336 01e8 0122     		movs	r2, #1
 1337 01ea 1A70     		strb	r2, [r3]
 571:..\src/interruptions.c ****                     }
 1338              		.loc 1 571 0
 1339 01ec 43E0     		b	.L79
 1340              	.L78:
 573:..\src/interruptions.c ****                         current_emg = 2;
 1341              		.loc 1 573 0
 1342 01ee BB68     		ldr	r3, [r7, #8]
 1343 01f0 002B     		cmp	r3, #0
 1344 01f2 3FDD     		ble	.L163
 573:..\src/interruptions.c ****                         current_emg = 2;
 1345              		.loc 1 573 0 is_stmt 0 discriminator 1
 1346 01f4 BA68     		ldr	r2, [r7, #8]
 1347 01f6 FB68     		ldr	r3, [r7, #12]
 1348 01f8 9A42     		cmp	r2, r3
 1349 01fa 3BDD     		ble	.L163
 574:..\src/interruptions.c ****                         break;
 1350              		.loc 1 574 0 is_stmt 1
 1351 01fc 234B     		ldr	r3, .L169+20
 1352 01fe 0222     		movs	r2, #2
 1353 0200 1A70     		strb	r2, [r3]
 575:..\src/interruptions.c ****                     }
 1354              		.loc 1 575 0
 1355 0202 38E0     		b	.L79
 1356              	.L75:
 581:..\src/interruptions.c ****                         current_emg = 0;
 1357              		.loc 1 581 0
 1358 0204 FB68     		ldr	r3, [r7, #12]
 1359 0206 002B     		cmp	r3, #0
 1360 0208 03DA     		bge	.L81
 582:..\src/interruptions.c ****                         break;
 1361              		.loc 1 582 0
 1362 020a 204B     		ldr	r3, .L169+20
 1363 020c 0022     		movs	r2, #0
 1364 020e 1A70     		strb	r2, [r3]
 583:..\src/interruptions.c ****                     }
 1365              		.loc 1 583 0
 1366 0210 31E0     		b	.L79
 1367              	.L81:
 585:..\src/interruptions.c ****                     break;
 1368              		.loc 1 585 0
 1369 0212 1C4B     		ldr	r3, .L169+12
 1370 0214 1A68     		ldr	r2, [r3]
 1371 0216 1A4B     		ldr	r3, .L169+8
 1372 0218 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1373 021c 1946     		mov	r1, r3
 1374 021e FB68     		ldr	r3, [r7, #12]
 1375 0220 03FB01F3 		mul	r3, r3, r1
 1376 0224 9900     		lsls	r1, r3, #2
 1377 0226 144B     		ldr	r3, .L169
 1378 0228 B3F86A30 		ldrh	r3, [r3, #106]
 1379 022c C3F58063 		rsb	r3, r3, #1024
 1380 0230 91FBF3F3 		sdiv	r3, r1, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 36


 1381 0234 1344     		add	r3, r3, r2
 1382 0236 144A     		ldr	r2, .L169+16
 1383 0238 1360     		str	r3, [r2]
 586:..\src/interruptions.c **** 
 1384              		.loc 1 586 0
 1385 023a 1CE0     		b	.L79
 1386              	.L76:
 590:..\src/interruptions.c ****                         current_emg = 0;
 1387              		.loc 1 590 0
 1388 023c BB68     		ldr	r3, [r7, #8]
 1389 023e 002B     		cmp	r3, #0
 1390 0240 03DA     		bge	.L82
 591:..\src/interruptions.c ****                         break;
 1391              		.loc 1 591 0
 1392 0242 124B     		ldr	r3, .L169+20
 1393 0244 0022     		movs	r2, #0
 1394 0246 1A70     		strb	r2, [r3]
 592:..\src/interruptions.c ****                     }
 1395              		.loc 1 592 0
 1396 0248 15E0     		b	.L79
 1397              	.L82:
 594:..\src/interruptions.c ****                     break;
 1398              		.loc 1 594 0
 1399 024a 0E4B     		ldr	r3, .L169+12
 1400 024c 1A68     		ldr	r2, [r3]
 1401 024e 0C4B     		ldr	r3, .L169+8
 1402 0250 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1403 0254 1946     		mov	r1, r3
 1404 0256 BB68     		ldr	r3, [r7, #8]
 1405 0258 03FB01F3 		mul	r3, r3, r1
 1406 025c 9900     		lsls	r1, r3, #2
 1407 025e 064B     		ldr	r3, .L169
 1408 0260 B3F86C30 		ldrh	r3, [r3, #108]
 1409 0264 C3F58063 		rsb	r3, r3, #1024
 1410 0268 91FBF3F3 		sdiv	r3, r1, r3
 1411 026c D31A     		subs	r3, r2, r3
 1412 026e 064A     		ldr	r2, .L169+16
 1413 0270 1360     		str	r3, [r2]
 595:..\src/interruptions.c **** 
 1414              		.loc 1 595 0
 1415 0272 00E0     		b	.L79
 1416              	.L163:
 577:..\src/interruptions.c **** 
 1417              		.loc 1 577 0
 1418 0274 00BF     		nop
 1419              	.L79:
 599:..\src/interruptions.c ****             }
 600:..\src/interruptions.c ****             break;
 1420              		.loc 1 600 0 discriminator 1
 1421 0276 7BE0     		b	.L69
 1422              	.L170:
 1423              		.align	2
 1424              	.L169:
 1425 0278 00000000 		.word	c_mem
 1426 027c 00000000 		.word	g_meas
 1427 0280 00000000 		.word	g_mem
 1428 0284 00000000 		.word	g_refOld
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 37


 1429 0288 00000000 		.word	g_ref
 1430 028c 8C000000 		.word	current_emg.10096
 1431              	.L63:
 601:..\src/interruptions.c **** 
 602:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 603:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1432              		.loc 1 603 0
 1433 0290 974B     		ldr	r3, .L171
 1434 0292 1B68     		ldr	r3, [r3]
 1435 0294 974A     		ldr	r2, .L171+4
 1436 0296 1360     		str	r3, [r2]
 604:..\src/interruptions.c ****             switch (current_emg) {
 1437              		.loc 1 604 0
 1438 0298 974B     		ldr	r3, .L171+8
 1439 029a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1440 029c 012B     		cmp	r3, #1
 1441 029e 1AD0     		beq	.L84
 1442 02a0 022B     		cmp	r3, #2
 1443 02a2 3AD0     		beq	.L85
 1444 02a4 002B     		cmp	r3, #0
 1445 02a6 00D0     		beq	.L86
 605:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 606:..\src/interruptions.c ****                 case 0:
 607:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 608:..\src/interruptions.c ****                         current_emg = 1;
 609:..\src/interruptions.c ****                         break;
 610:..\src/interruptions.c ****                     }
 611:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 612:..\src/interruptions.c ****                         current_emg = 2;
 613:..\src/interruptions.c ****                         break;
 614:..\src/interruptions.c ****                     }
 615:..\src/interruptions.c ****                     break;
 616:..\src/interruptions.c **** 
 617:..\src/interruptions.c ****                 // EMG 1 is first
 618:..\src/interruptions.c ****                 case 1:
 619:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 620:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 621:..\src/interruptions.c ****                         current_emg = 0;
 622:..\src/interruptions.c ****                         break;
 623:..\src/interruptions.c ****                     }
 624:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 625:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 626:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_m
 627:..\src/interruptions.c ****                     
 628:..\src/interruptions.c ****                     break;
 629:..\src/interruptions.c **** 
 630:..\src/interruptions.c ****                 // EMG 2 is first
 631:..\src/interruptions.c ****                 case 2:
 632:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 633:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 634:..\src/interruptions.c ****                         current_emg = 0;
 635:..\src/interruptions.c ****                         break;
 636:..\src/interruptions.c ****                     }
 637:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 638:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 639:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_m
 640:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 38


 641:..\src/interruptions.c ****                     break;
 642:..\src/interruptions.c **** 
 643:..\src/interruptions.c ****                 default:
 644:..\src/interruptions.c ****                     break;
 1446              		.loc 1 644 0
 1447 02a8 5EE0     		b	.L88
 1448              	.L86:
 607:..\src/interruptions.c ****                         current_emg = 1;
 1449              		.loc 1 607 0
 1450 02aa FB68     		ldr	r3, [r7, #12]
 1451 02ac 002B     		cmp	r3, #0
 1452 02ae 07DD     		ble	.L87
 607:..\src/interruptions.c ****                         current_emg = 1;
 1453              		.loc 1 607 0 is_stmt 0 discriminator 1
 1454 02b0 FA68     		ldr	r2, [r7, #12]
 1455 02b2 BB68     		ldr	r3, [r7, #8]
 1456 02b4 9A42     		cmp	r2, r3
 1457 02b6 03DD     		ble	.L87
 608:..\src/interruptions.c ****                         break;
 1458              		.loc 1 608 0 is_stmt 1
 1459 02b8 8F4B     		ldr	r3, .L171+8
 1460 02ba 0122     		movs	r2, #1
 1461 02bc 1A70     		strb	r2, [r3]
 609:..\src/interruptions.c ****                     }
 1462              		.loc 1 609 0
 1463 02be 53E0     		b	.L88
 1464              	.L87:
 611:..\src/interruptions.c ****                         current_emg = 2;
 1465              		.loc 1 611 0
 1466 02c0 BB68     		ldr	r3, [r7, #8]
 1467 02c2 002B     		cmp	r3, #0
 1468 02c4 4BDD     		ble	.L164
 611:..\src/interruptions.c ****                         current_emg = 2;
 1469              		.loc 1 611 0 is_stmt 0 discriminator 1
 1470 02c6 BA68     		ldr	r2, [r7, #8]
 1471 02c8 FB68     		ldr	r3, [r7, #12]
 1472 02ca 9A42     		cmp	r2, r3
 1473 02cc 47DD     		ble	.L164
 612:..\src/interruptions.c ****                         break;
 1474              		.loc 1 612 0 is_stmt 1
 1475 02ce 8A4B     		ldr	r3, .L171+8
 1476 02d0 0222     		movs	r2, #2
 1477 02d2 1A70     		strb	r2, [r3]
 613:..\src/interruptions.c ****                     }
 1478              		.loc 1 613 0
 1479 02d4 48E0     		b	.L88
 1480              	.L84:
 620:..\src/interruptions.c ****                         current_emg = 0;
 1481              		.loc 1 620 0
 1482 02d6 FB68     		ldr	r3, [r7, #12]
 1483 02d8 002B     		cmp	r3, #0
 1484 02da 06DA     		bge	.L90
 620:..\src/interruptions.c ****                         current_emg = 0;
 1485              		.loc 1 620 0 is_stmt 0 discriminator 1
 1486 02dc BB68     		ldr	r3, [r7, #8]
 1487 02de 002B     		cmp	r3, #0
 1488 02e0 03DA     		bge	.L90
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 39


 621:..\src/interruptions.c ****                         break;
 1489              		.loc 1 621 0 is_stmt 1
 1490 02e2 854B     		ldr	r3, .L171+8
 1491 02e4 0022     		movs	r2, #0
 1492 02e6 1A70     		strb	r2, [r3]
 622:..\src/interruptions.c ****                     }
 1493              		.loc 1 622 0
 1494 02e8 3EE0     		b	.L88
 1495              	.L90:
 625:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_m
 1496              		.loc 1 625 0
 1497 02ea FB68     		ldr	r3, [r7, #12]
 1498 02ec 002B     		cmp	r3, #0
 1499 02ee 38DD     		ble	.L165
 626:..\src/interruptions.c ****                     
 1500              		.loc 1 626 0
 1501 02f0 7F4B     		ldr	r3, .L171
 1502 02f2 1A68     		ldr	r2, [r3]
 1503 02f4 814B     		ldr	r3, .L171+12
 1504 02f6 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1505 02fa 1946     		mov	r1, r3
 1506 02fc FB68     		ldr	r3, [r7, #12]
 1507 02fe 03FB01F3 		mul	r3, r3, r1
 1508 0302 9900     		lsls	r1, r3, #2
 1509 0304 7E4B     		ldr	r3, .L171+16
 1510 0306 B3F86A30 		ldrh	r3, [r3, #106]
 1511 030a C3F58063 		rsb	r3, r3, #1024
 1512 030e 91FBF3F3 		sdiv	r3, r1, r3
 1513 0312 1344     		add	r3, r3, r2
 1514 0314 774A     		ldr	r2, .L171+4
 1515 0316 1360     		str	r3, [r2]
 628:..\src/interruptions.c **** 
 1516              		.loc 1 628 0
 1517 0318 23E0     		b	.L165
 1518              	.L85:
 633:..\src/interruptions.c ****                         current_emg = 0;
 1519              		.loc 1 633 0
 1520 031a FB68     		ldr	r3, [r7, #12]
 1521 031c 002B     		cmp	r3, #0
 1522 031e 06DA     		bge	.L92
 633:..\src/interruptions.c ****                         current_emg = 0;
 1523              		.loc 1 633 0 is_stmt 0 discriminator 1
 1524 0320 BB68     		ldr	r3, [r7, #8]
 1525 0322 002B     		cmp	r3, #0
 1526 0324 03DA     		bge	.L92
 634:..\src/interruptions.c ****                         break;
 1527              		.loc 1 634 0 is_stmt 1
 1528 0326 744B     		ldr	r3, .L171+8
 1529 0328 0022     		movs	r2, #0
 1530 032a 1A70     		strb	r2, [r3]
 635:..\src/interruptions.c ****                     }
 1531              		.loc 1 635 0
 1532 032c 1CE0     		b	.L88
 1533              	.L92:
 638:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_m
 1534              		.loc 1 638 0
 1535 032e BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 40


 1536 0330 002B     		cmp	r3, #0
 1537 0332 18DD     		ble	.L166
 639:..\src/interruptions.c ****                     }
 1538              		.loc 1 639 0
 1539 0334 6E4B     		ldr	r3, .L171
 1540 0336 1A68     		ldr	r2, [r3]
 1541 0338 714B     		ldr	r3, .L171+16
 1542 033a 93F87830 		ldrb	r3, [r3, #120]	@ zero_extendqisi2
 1543 033e 1946     		mov	r1, r3
 1544 0340 BB68     		ldr	r3, [r7, #8]
 1545 0342 03FB01F3 		mul	r3, r3, r1
 1546 0346 9900     		lsls	r1, r3, #2
 1547 0348 6D4B     		ldr	r3, .L171+16
 1548 034a B3F86C30 		ldrh	r3, [r3, #108]
 1549 034e C3F58063 		rsb	r3, r3, #1024
 1550 0352 91FBF3F3 		sdiv	r3, r1, r3
 1551 0356 D31A     		subs	r3, r2, r3
 1552 0358 664A     		ldr	r2, .L171+4
 1553 035a 1360     		str	r3, [r2]
 641:..\src/interruptions.c **** 
 1554              		.loc 1 641 0
 1555 035c 03E0     		b	.L166
 1556              	.L164:
 615:..\src/interruptions.c **** 
 1557              		.loc 1 615 0
 1558 035e 00BF     		nop
 1559 0360 06E0     		b	.L69
 1560              	.L165:
 628:..\src/interruptions.c **** 
 1561              		.loc 1 628 0
 1562 0362 00BF     		nop
 1563 0364 04E0     		b	.L69
 1564              	.L166:
 641:..\src/interruptions.c **** 
 1565              		.loc 1 641 0
 1566 0366 00BF     		nop
 1567              	.L88:
 645:..\src/interruptions.c ****             }
 646:..\src/interruptions.c ****             break;
 1568              		.loc 1 646 0 discriminator 3
 1569 0368 02E0     		b	.L69
 1570              	.L161:
 647:..\src/interruptions.c **** 
 648:..\src/interruptions.c ****         default:
 649:..\src/interruptions.c ****             break;
 1571              		.loc 1 649 0
 1572 036a 00BF     		nop
 1573 036c 00E0     		b	.L69
 1574              	.L162:
 562:..\src/interruptions.c **** 
 1575              		.loc 1 562 0
 1576 036e 00BF     		nop
 1577              	.L69:
 650:..\src/interruptions.c ****     }
 651:..\src/interruptions.c **** 
 652:..\src/interruptions.c ****     // Position limit saturation
 653:..\src/interruptions.c ****     if (c_mem.pos_lim_flag) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 41


 1578              		.loc 1 653 0
 1579 0370 634B     		ldr	r3, .L171+16
 1580 0372 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 1581 0376 002B     		cmp	r3, #0
 1582 0378 13D0     		beq	.L94
 654:..\src/interruptions.c ****         if (g_ref.pos < c_mem.pos_lim_inf) 
 1583              		.loc 1 654 0
 1584 037a 5E4B     		ldr	r3, .L171+4
 1585 037c 1A68     		ldr	r2, [r3]
 1586 037e 604B     		ldr	r3, .L171+16
 1587 0380 9B6D     		ldr	r3, [r3, #88]
 1588 0382 9A42     		cmp	r2, r3
 1589 0384 03DA     		bge	.L95
 655:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_inf;
 1590              		.loc 1 655 0
 1591 0386 5E4B     		ldr	r3, .L171+16
 1592 0388 9B6D     		ldr	r3, [r3, #88]
 1593 038a 5A4A     		ldr	r2, .L171+4
 1594 038c 1360     		str	r3, [r2]
 1595              	.L95:
 656:..\src/interruptions.c ****         if (g_ref.pos > c_mem.pos_lim_sup) 
 1596              		.loc 1 656 0
 1597 038e 594B     		ldr	r3, .L171+4
 1598 0390 1A68     		ldr	r2, [r3]
 1599 0392 5B4B     		ldr	r3, .L171+16
 1600 0394 DB6D     		ldr	r3, [r3, #92]
 1601 0396 9A42     		cmp	r2, r3
 1602 0398 03DD     		ble	.L94
 657:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_sup;
 1603              		.loc 1 657 0
 1604 039a 594B     		ldr	r3, .L171+16
 1605 039c DB6D     		ldr	r3, [r3, #92]
 1606 039e 554A     		ldr	r2, .L171+4
 1607 03a0 1360     		str	r3, [r2]
 1608              	.L94:
 658:..\src/interruptions.c ****     }
 659:..\src/interruptions.c ****     
 660:..\src/interruptions.c ****     if (battery_low_SoC == 1) {
 1609              		.loc 1 660 0
 1610 03a2 584B     		ldr	r3, .L171+20
 1611 03a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1612 03a6 012B     		cmp	r3, #1
 1613 03a8 02D1     		bne	.L96
 661:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 662:..\src/interruptions.c ****         g_ref.pos = 0;
 1614              		.loc 1 662 0
 1615 03aa 524B     		ldr	r3, .L171+4
 1616 03ac 0022     		movs	r2, #0
 1617 03ae 1A60     		str	r2, [r3]
 1618              	.L96:
 663:..\src/interruptions.c ****     }
 664:..\src/interruptions.c ****         
 665:..\src/interruptions.c ****     if (c_mem.rest_position_flag == TRUE) {
 1619              		.loc 1 665 0
 1620 03b0 534B     		ldr	r3, .L171+16
 1621 03b2 93F8A430 		ldrb	r3, [r3, #164]	@ zero_extendqisi2
 1622 03b6 012B     		cmp	r3, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 42


 1623 03b8 2AD1     		bne	.L97
 666:..\src/interruptions.c ****         if (rest_enabled == 1){
 1624              		.loc 1 666 0
 1625 03ba 534B     		ldr	r3, .L171+24
 1626 03bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1627 03be 012B     		cmp	r3, #1
 1628 03c0 03D1     		bne	.L98
 667:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 668:..\src/interruptions.c ****             g_ref.pos = rest_pos_curr_ref;
 1629              		.loc 1 668 0
 1630 03c2 524B     		ldr	r3, .L171+28
 1631 03c4 1B68     		ldr	r3, [r3]
 1632 03c6 4B4A     		ldr	r2, .L171+4
 1633 03c8 1360     		str	r3, [r2]
 1634              	.L98:
 669:..\src/interruptions.c ****         }
 670:..\src/interruptions.c ****         
 671:..\src/interruptions.c ****         if (forced_open == 1) {
 1635              		.loc 1 671 0
 1636 03ca 514B     		ldr	r3, .L171+32
 1637 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1638 03ce 012B     		cmp	r3, #1
 1639 03d0 1ED1     		bne	.L97
 672:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 673:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1640              		.loc 1 673 0
 1641 03d2 BB68     		ldr	r3, [r7, #8]
 1642 03d4 002B     		cmp	r3, #0
 1643 03d6 13DD     		ble	.L99
 674:..\src/interruptions.c ****                 g_ref.pos = g_mem.rest_pos - (err_emg_2 * g_mem.rest_pos) / (1024 - c_mem.emg_thres
 1644              		.loc 1 674 0
 1645 03d8 484B     		ldr	r3, .L171+12
 1646 03da D3F89820 		ldr	r2, [r3, #152]
 1647 03de 474B     		ldr	r3, .L171+12
 1648 03e0 D3F89830 		ldr	r3, [r3, #152]
 1649 03e4 B968     		ldr	r1, [r7, #8]
 1650 03e6 01FB03F1 		mul	r1, r1, r3
 1651 03ea 454B     		ldr	r3, .L171+16
 1652 03ec B3F86C30 		ldrh	r3, [r3, #108]
 1653 03f0 C3F58063 		rsb	r3, r3, #1024
 1654 03f4 91FBF3F3 		sdiv	r3, r1, r3
 1655 03f8 D31A     		subs	r3, r2, r3
 1656 03fa 3E4A     		ldr	r2, .L171+4
 1657 03fc 1360     		str	r3, [r2]
 1658 03fe 07E0     		b	.L97
 1659              	.L99:
 675:..\src/interruptions.c ****             else {
 676:..\src/interruptions.c ****                 g_ref.pos = g_mem.rest_pos;
 1660              		.loc 1 676 0
 1661 0400 3E4B     		ldr	r3, .L171+12
 1662 0402 D3F89830 		ldr	r3, [r3, #152]
 1663 0406 3B4A     		ldr	r2, .L171+4
 1664 0408 1360     		str	r3, [r2]
 677:..\src/interruptions.c ****                 forced_open = 0;
 1665              		.loc 1 677 0
 1666 040a 414B     		ldr	r3, .L171+32
 1667 040c 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 43


 1668 040e 1A70     		strb	r2, [r3]
 1669              	.L97:
 678:..\src/interruptions.c ****             }
 679:..\src/interruptions.c ****         }
 680:..\src/interruptions.c ****     }
 681:..\src/interruptions.c **** 
 682:..\src/interruptions.c ****     switch(c_mem.control_mode) {
 1670              		.loc 1 682 0
 1671 0410 3B4B     		ldr	r3, .L171+16
 1672 0412 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 1673 0416 032B     		cmp	r3, #3
 1674 0418 00F2E481 		bhi	.L100
 1675 041c 01A2     		adr	r2, .L102
 1676 041e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1677 0422 00BF     		.p2align 2
 1678              	.L102:
 1679 0424 ED050000 		.word	.L101+1
 1680 0428 77070000 		.word	.L103+1
 1681 042c 8B060000 		.word	.L104+1
 1682 0430 35040000 		.word	.L105+1
 1683              		.p2align 1
 1684              	.L105:
 683:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 684:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 685:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
 1685              		.loc 1 685 0
 1686 0434 2F4B     		ldr	r3, .L171+4
 1687 0436 1A68     		ldr	r2, [r3]
 1688 0438 364B     		ldr	r3, .L171+36
 1689 043a 1B68     		ldr	r3, [r3]
 1690 043c D31A     		subs	r3, r2, r3
 1691 043e BB64     		str	r3, [r7, #72]
 686:..\src/interruptions.c **** 
 687:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1692              		.loc 1 687 0
 1693 0440 354B     		ldr	r3, .L171+40
 1694 0442 1A68     		ldr	r2, [r3]
 1695 0444 BB6C     		ldr	r3, [r7, #72]
 1696 0446 1344     		add	r3, r3, r2
 1697 0448 334A     		ldr	r2, .L171+40
 1698 044a 1360     		str	r3, [r2]
 688:..\src/interruptions.c **** 
 689:..\src/interruptions.c ****             // error_sum saturation
 690:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 1699              		.loc 1 690 0
 1700 044c 324B     		ldr	r3, .L171+40
 1701 044e 1B68     		ldr	r3, [r3]
 1702 0450 324A     		ldr	r2, .L171+44
 1703 0452 9342     		cmp	r3, r2
 1704 0454 03DD     		ble	.L106
 691:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 1705              		.loc 1 691 0
 1706 0456 304B     		ldr	r3, .L171+40
 1707 0458 304A     		ldr	r2, .L171+44
 1708 045a 1A60     		str	r2, [r3]
 1709 045c 07E0     		b	.L107
 1710              	.L106:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 44


 692:..\src/interruptions.c ****             else {
 693:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 1711              		.loc 1 693 0
 1712 045e 2E4B     		ldr	r3, .L171+40
 1713 0460 1B68     		ldr	r3, [r3]
 1714 0462 2F4A     		ldr	r2, .L171+48
 1715 0464 9342     		cmp	r3, r2
 1716 0466 02DA     		bge	.L107
 694:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 1717              		.loc 1 694 0
 1718 0468 2B4B     		ldr	r3, .L171+40
 1719 046a 2D4A     		ldr	r2, .L171+48
 1720 046c 1A60     		str	r2, [r3]
 1721              	.L107:
 695:..\src/interruptions.c ****             }
 696:..\src/interruptions.c ****             
 697:..\src/interruptions.c ****             // ------ position PID control ------
 698:..\src/interruptions.c **** 
 699:..\src/interruptions.c ****             i_ref = 0;
 1722              		.loc 1 699 0
 1723 046e 0023     		movs	r3, #0
 1724 0470 7B64     		str	r3, [r7, #68]
 700:..\src/interruptions.c ****             
 701:..\src/interruptions.c ****             // Proportional
 702:..\src/interruptions.c ****             if (k_p_dl != 0)
 1725              		.loc 1 702 0
 1726 0472 7B6A     		ldr	r3, [r7, #36]
 1727 0474 002B     		cmp	r3, #0
 1728 0476 07D0     		beq	.L108
 703:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 1729              		.loc 1 703 0
 1730 0478 7B6A     		ldr	r3, [r7, #36]
 1731 047a BA6C     		ldr	r2, [r7, #72]
 1732 047c 02FB03F3 		mul	r3, r2, r3
 1733 0480 1B14     		asrs	r3, r3, #16
 1734 0482 7A6C     		ldr	r2, [r7, #68]
 1735 0484 1344     		add	r3, r3, r2
 1736 0486 7B64     		str	r3, [r7, #68]
 1737              	.L108:
 704:..\src/interruptions.c **** 
 705:..\src/interruptions.c ****             // Integral
 706:..\src/interruptions.c ****             if (k_i_dl != 0)
 1738              		.loc 1 706 0
 1739 0488 3B6A     		ldr	r3, [r7, #32]
 1740 048a 002B     		cmp	r3, #0
 1741 048c 08D0     		beq	.L109
 707:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 1742              		.loc 1 707 0
 1743 048e 224B     		ldr	r3, .L171+40
 1744 0490 1B68     		ldr	r3, [r3]
 1745 0492 3A6A     		ldr	r2, [r7, #32]
 1746 0494 02FB03F3 		mul	r3, r2, r3
 1747 0498 1B14     		asrs	r3, r3, #16
 1748 049a 7A6C     		ldr	r2, [r7, #68]
 1749 049c 1344     		add	r3, r3, r2
 1750 049e 7B64     		str	r3, [r7, #68]
 1751              	.L109:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 45


 708:..\src/interruptions.c **** 
 709:..\src/interruptions.c ****             // Derivative
 710:..\src/interruptions.c ****             if (k_d_dl != 0)
 1752              		.loc 1 710 0
 1753 04a0 FB69     		ldr	r3, [r7, #28]
 1754 04a2 002B     		cmp	r3, #0
 1755 04a4 0AD0     		beq	.L110
 711:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 1756              		.loc 1 711 0
 1757 04a6 1F4B     		ldr	r3, .L171+52
 1758 04a8 1B68     		ldr	r3, [r3]
 1759 04aa BA6C     		ldr	r2, [r7, #72]
 1760 04ac D31A     		subs	r3, r2, r3
 1761 04ae FA69     		ldr	r2, [r7, #28]
 1762 04b0 02FB03F3 		mul	r3, r2, r3
 1763 04b4 1B14     		asrs	r3, r3, #16
 1764 04b6 7A6C     		ldr	r2, [r7, #68]
 1765 04b8 1344     		add	r3, r3, r2
 1766 04ba 7B64     		str	r3, [r7, #68]
 1767              	.L110:
 712:..\src/interruptions.c ****                         
 713:..\src/interruptions.c ****             // Update previous position
 714:..\src/interruptions.c ****             prev_pos_err = pos_error;
 1768              		.loc 1 714 0
 1769 04bc 194A     		ldr	r2, .L171+52
 1770 04be BB6C     		ldr	r3, [r7, #72]
 1771 04c0 1360     		str	r3, [r2]
 715:..\src/interruptions.c **** 
 716:..\src/interruptions.c ****             // motor direction depends on i_ref
 717:..\src/interruptions.c ****             if (i_ref >= 0)
 1772              		.loc 1 717 0
 1773 04c2 7B6C     		ldr	r3, [r7, #68]
 1774 04c4 002B     		cmp	r3, #0
 1775 04c6 03DB     		blt	.L111
 718:..\src/interruptions.c ****                 motor_dir = TRUE;
 1776              		.loc 1 718 0
 1777 04c8 174B     		ldr	r3, .L171+56
 1778 04ca 0122     		movs	r2, #1
 1779 04cc 1A70     		strb	r2, [r3]
 1780 04ce 02E0     		b	.L112
 1781              	.L111:
 719:..\src/interruptions.c ****             else
 720:..\src/interruptions.c ****                 motor_dir = FALSE;
 1782              		.loc 1 720 0
 1783 04d0 154B     		ldr	r3, .L171+56
 1784 04d2 0022     		movs	r2, #0
 1785 04d4 1A70     		strb	r2, [r3]
 1786              	.L112:
 721:..\src/interruptions.c **** 
 722:..\src/interruptions.c ****             // saturate max current
 723:..\src/interruptions.c ****             if (i_ref > c_mem.current_limit)
 1787              		.loc 1 723 0
 1788 04d6 0A4B     		ldr	r3, .L171+16
 1789 04d8 B3F96830 		ldrsh	r3, [r3, #104]
 1790 04dc 1A46     		mov	r2, r3
 1791 04de 7B6C     		ldr	r3, [r7, #68]
 1792 04e0 9A42     		cmp	r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 46


 1793 04e2 23DA     		bge	.L113
 724:..\src/interruptions.c ****                 i_ref = c_mem.current_limit;
 1794              		.loc 1 724 0
 1795 04e4 064B     		ldr	r3, .L171+16
 1796 04e6 B3F96830 		ldrsh	r3, [r3, #104]
 1797 04ea 7B64     		str	r3, [r7, #68]
 1798 04ec 2AE0     		b	.L114
 1799              	.L172:
 1800 04ee 00BF     		.align	2
 1801              	.L171:
 1802 04f0 00000000 		.word	g_refOld
 1803 04f4 00000000 		.word	g_ref
 1804 04f8 8C000000 		.word	current_emg.10096
 1805 04fc 00000000 		.word	g_mem
 1806 0500 00000000 		.word	c_mem
 1807 0504 00000000 		.word	battery_low_SoC
 1808 0508 00000000 		.word	rest_enabled
 1809 050c 00000000 		.word	rest_pos_curr_ref
 1810 0510 00000000 		.word	forced_open
 1811 0514 00000000 		.word	g_meas
 1812 0518 90000000 		.word	pos_error_sum.10089
 1813 051c 80F0FA02 		.word	50000000
 1814 0520 800F05FD 		.word	-50000000
 1815 0524 94000000 		.word	prev_pos_err.10091
 1816 0528 98000000 		.word	motor_dir.10094
 1817              	.L113:
 725:..\src/interruptions.c ****             else {
 726:..\src/interruptions.c ****                 if (i_ref < -c_mem.current_limit)
 1818              		.loc 1 726 0
 1819 052c 974B     		ldr	r3, .L173
 1820 052e B3F96830 		ldrsh	r3, [r3, #104]
 1821 0532 5A42     		negs	r2, r3
 1822 0534 7B6C     		ldr	r3, [r7, #68]
 1823 0536 9A42     		cmp	r2, r3
 1824 0538 04DD     		ble	.L114
 727:..\src/interruptions.c ****                     i_ref = -c_mem.current_limit;
 1825              		.loc 1 727 0
 1826 053a 944B     		ldr	r3, .L173
 1827 053c B3F96830 		ldrsh	r3, [r3, #104]
 1828 0540 5B42     		negs	r3, r3
 1829 0542 7B64     		str	r3, [r7, #68]
 1830              	.L114:
 728:..\src/interruptions.c ****         	}
 729:..\src/interruptions.c **** 
 730:..\src/interruptions.c ****             // current error and curr error sum
 731:..\src/interruptions.c ****             curr_error = i_ref - g_meas.curr;
 1831              		.loc 1 731 0
 1832 0544 924B     		ldr	r3, .L173+4
 1833 0546 DB68     		ldr	r3, [r3, #12]
 1834 0548 7A6C     		ldr	r2, [r7, #68]
 1835 054a D31A     		subs	r3, r2, r3
 1836 054c 7B60     		str	r3, [r7, #4]
 732:..\src/interruptions.c ****             curr_error_sum += curr_error;
 1837              		.loc 1 732 0
 1838 054e 914B     		ldr	r3, .L173+8
 1839 0550 1A68     		ldr	r2, [r3]
 1840 0552 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 47


 1841 0554 1344     		add	r3, r3, r2
 1842 0556 8F4A     		ldr	r2, .L173+8
 1843 0558 1360     		str	r3, [r2]
 733:..\src/interruptions.c ****             
 734:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 1844              		.loc 1 734 0
 1845 055a 8E4B     		ldr	r3, .L173+8
 1846 055c 1B68     		ldr	r3, [r3]
 1847 055e 8E4A     		ldr	r2, .L173+12
 1848 0560 9342     		cmp	r3, r2
 1849 0562 03DD     		ble	.L115
 735:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 1850              		.loc 1 735 0
 1851 0564 8B4B     		ldr	r3, .L173+8
 1852 0566 8C4A     		ldr	r2, .L173+12
 1853 0568 1A60     		str	r2, [r3]
 1854 056a 07E0     		b	.L116
 1855              	.L115:
 736:..\src/interruptions.c ****             else {
 737:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 1856              		.loc 1 737 0
 1857 056c 894B     		ldr	r3, .L173+8
 1858 056e 1B68     		ldr	r3, [r3]
 1859 0570 8A4A     		ldr	r2, .L173+16
 1860 0572 9342     		cmp	r3, r2
 1861 0574 02DA     		bge	.L116
 738:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 1862              		.loc 1 738 0
 1863 0576 874B     		ldr	r3, .L173+8
 1864 0578 884A     		ldr	r2, .L173+16
 1865 057a 1A60     		str	r2, [r3]
 1866              	.L116:
 739:..\src/interruptions.c ****             }
 740:..\src/interruptions.c **** 
 741:..\src/interruptions.c ****             // ----- current PID control -----
 742:..\src/interruptions.c **** 
 743:..\src/interruptions.c ****             pwm_input = 0;
 1867              		.loc 1 743 0
 1868 057c 0023     		movs	r3, #0
 1869 057e FB64     		str	r3, [r7, #76]
 744:..\src/interruptions.c **** 
 745:..\src/interruptions.c ****             // Proportional
 746:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 1870              		.loc 1 746 0
 1871 0580 BB69     		ldr	r3, [r7, #24]
 1872 0582 002B     		cmp	r3, #0
 1873 0584 07D0     		beq	.L117
 747:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 1874              		.loc 1 747 0
 1875 0586 BB69     		ldr	r3, [r7, #24]
 1876 0588 7A68     		ldr	r2, [r7, #4]
 1877 058a 02FB03F3 		mul	r3, r2, r3
 1878 058e 1B14     		asrs	r3, r3, #16
 1879 0590 FA6C     		ldr	r2, [r7, #76]
 1880 0592 1344     		add	r3, r3, r2
 1881 0594 FB64     		str	r3, [r7, #76]
 1882              	.L117:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 48


 748:..\src/interruptions.c **** 
 749:..\src/interruptions.c ****             // Integral
 750:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 1883              		.loc 1 750 0
 1884 0596 7B69     		ldr	r3, [r7, #20]
 1885 0598 002B     		cmp	r3, #0
 1886 059a 08D0     		beq	.L118
 751:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 1887              		.loc 1 751 0
 1888 059c 7D4B     		ldr	r3, .L173+8
 1889 059e 1B68     		ldr	r3, [r3]
 1890 05a0 7A69     		ldr	r2, [r7, #20]
 1891 05a2 02FB03F3 		mul	r3, r2, r3
 1892 05a6 1B14     		asrs	r3, r3, #16
 1893 05a8 FA6C     		ldr	r2, [r7, #76]
 1894 05aa 1344     		add	r3, r3, r2
 1895 05ac FB64     		str	r3, [r7, #76]
 1896              	.L118:
 752:..\src/interruptions.c **** 
 753:..\src/interruptions.c ****             // Derivative
 754:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 1897              		.loc 1 754 0
 1898 05ae 3B69     		ldr	r3, [r7, #16]
 1899 05b0 002B     		cmp	r3, #0
 1900 05b2 0AD0     		beq	.L119
 755:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 1901              		.loc 1 755 0
 1902 05b4 7A4B     		ldr	r3, .L173+20
 1903 05b6 1B68     		ldr	r3, [r3]
 1904 05b8 7A68     		ldr	r2, [r7, #4]
 1905 05ba D31A     		subs	r3, r2, r3
 1906 05bc 3A69     		ldr	r2, [r7, #16]
 1907 05be 02FB03F3 		mul	r3, r2, r3
 1908 05c2 1B14     		asrs	r3, r3, #16
 1909 05c4 FA6C     		ldr	r2, [r7, #76]
 1910 05c6 1344     		add	r3, r3, r2
 1911 05c8 FB64     		str	r3, [r7, #76]
 1912              	.L119:
 756:..\src/interruptions.c **** 
 757:..\src/interruptions.c ****             // pwm_input saturation
 758:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 1913              		.loc 1 758 0
 1914 05ca FB6C     		ldr	r3, [r7, #76]
 1915 05cc 13F1640F 		cmn	r3, #100
 1916 05d0 03DA     		bge	.L120
 759:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 1917              		.loc 1 759 0
 1918 05d2 6FF06303 		mvn	r3, #99
 1919 05d6 FB64     		str	r3, [r7, #76]
 1920 05d8 04E0     		b	.L121
 1921              	.L120:
 760:..\src/interruptions.c ****             else {
 761:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 1922              		.loc 1 761 0
 1923 05da FB6C     		ldr	r3, [r7, #76]
 1924 05dc 642B     		cmp	r3, #100
 1925 05de 01DD     		ble	.L121
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 49


 762:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 1926              		.loc 1 762 0
 1927 05e0 6423     		movs	r3, #100
 1928 05e2 FB64     		str	r3, [r7, #76]
 1929              	.L121:
 763:..\src/interruptions.c ****             }
 764:..\src/interruptions.c **** 
 765:..\src/interruptions.c ****             // Update previous current
 766:..\src/interruptions.c ****             prev_curr_err = curr_error;
 1930              		.loc 1 766 0
 1931 05e4 6E4A     		ldr	r2, .L173+20
 1932 05e6 7B68     		ldr	r3, [r7, #4]
 1933 05e8 1360     		str	r3, [r2]
 767:..\src/interruptions.c **** 
 768:..\src/interruptions.c ****         break;
 1934              		.loc 1 768 0
 1935 05ea FBE0     		b	.L100
 1936              	.L101:
 769:..\src/interruptions.c **** 
 770:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 771:..\src/interruptions.c ****         case CONTROL_ANGLE:
 772:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
 1937              		.loc 1 772 0
 1938 05ec 6D4B     		ldr	r3, .L173+24
 1939 05ee 1A68     		ldr	r2, [r3]
 1940 05f0 674B     		ldr	r3, .L173+4
 1941 05f2 1B68     		ldr	r3, [r3]
 1942 05f4 D31A     		subs	r3, r2, r3
 1943 05f6 BB64     		str	r3, [r7, #72]
 773:..\src/interruptions.c **** 
 774:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1944              		.loc 1 774 0
 1945 05f8 6B4B     		ldr	r3, .L173+28
 1946 05fa 1A68     		ldr	r2, [r3]
 1947 05fc BB6C     		ldr	r3, [r7, #72]
 1948 05fe 1344     		add	r3, r3, r2
 1949 0600 694A     		ldr	r2, .L173+28
 1950 0602 1360     		str	r3, [r2]
 775:..\src/interruptions.c **** 
 776:..\src/interruptions.c ****             // anti-windup (for integral control)
 777:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 1951              		.loc 1 777 0
 1952 0604 684B     		ldr	r3, .L173+28
 1953 0606 1B68     		ldr	r3, [r3]
 1954 0608 B3F57A7F 		cmp	r3, #1000
 1955 060c 04DD     		ble	.L122
 778:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 1956              		.loc 1 778 0
 1957 060e 664B     		ldr	r3, .L173+28
 1958 0610 4FF47A72 		mov	r2, #1000
 1959 0614 1A60     		str	r2, [r3]
 1960 0616 07E0     		b	.L123
 1961              	.L122:
 779:..\src/interruptions.c ****             else {
 780:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 1962              		.loc 1 780 0
 1963 0618 634B     		ldr	r3, .L173+28
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 50


 1964 061a 1B68     		ldr	r3, [r3]
 1965 061c 13F57A7F 		cmn	r3, #1000
 1966 0620 02DA     		bge	.L123
 781:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 1967              		.loc 1 781 0
 1968 0622 614B     		ldr	r3, .L173+28
 1969 0624 614A     		ldr	r2, .L173+32
 1970 0626 1A60     		str	r2, [r3]
 1971              	.L123:
 782:..\src/interruptions.c ****             }
 783:..\src/interruptions.c **** 
 784:..\src/interruptions.c ****             // Proportional
 785:..\src/interruptions.c ****             if (k_p != 0) 
 1972              		.loc 1 785 0
 1973 0628 FB6B     		ldr	r3, [r7, #60]
 1974 062a 002B     		cmp	r3, #0
 1975 062c 05D0     		beq	.L124
 786:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 1976              		.loc 1 786 0
 1977 062e FB6B     		ldr	r3, [r7, #60]
 1978 0630 BA6C     		ldr	r2, [r7, #72]
 1979 0632 02FB03F3 		mul	r3, r2, r3
 1980 0636 1B14     		asrs	r3, r3, #16
 1981 0638 FB64     		str	r3, [r7, #76]
 1982              	.L124:
 787:..\src/interruptions.c ****             
 788:..\src/interruptions.c **** 
 789:..\src/interruptions.c ****             // Integral
 790:..\src/interruptions.c ****             if (k_i != 0) 
 1983              		.loc 1 790 0
 1984 063a BB6B     		ldr	r3, [r7, #56]
 1985 063c 002B     		cmp	r3, #0
 1986 063e 08D0     		beq	.L125
 791:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 1987              		.loc 1 791 0
 1988 0640 594B     		ldr	r3, .L173+28
 1989 0642 1B68     		ldr	r3, [r3]
 1990 0644 BA6B     		ldr	r2, [r7, #56]
 1991 0646 02FB03F3 		mul	r3, r2, r3
 1992 064a 1B14     		asrs	r3, r3, #16
 1993 064c FA6C     		ldr	r2, [r7, #76]
 1994 064e 1344     		add	r3, r3, r2
 1995 0650 FB64     		str	r3, [r7, #76]
 1996              	.L125:
 792:..\src/interruptions.c ****             
 793:..\src/interruptions.c **** 
 794:..\src/interruptions.c ****             // Derivative
 795:..\src/interruptions.c ****             if (k_d != 0) 
 1997              		.loc 1 795 0
 1998 0652 7B6B     		ldr	r3, [r7, #52]
 1999 0654 002B     		cmp	r3, #0
 2000 0656 0AD0     		beq	.L126
 796:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 2001              		.loc 1 796 0
 2002 0658 554B     		ldr	r3, .L173+36
 2003 065a 1B68     		ldr	r3, [r3]
 2004 065c BA6C     		ldr	r2, [r7, #72]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 51


 2005 065e D31A     		subs	r3, r2, r3
 2006 0660 7A6B     		ldr	r2, [r7, #52]
 2007 0662 02FB03F3 		mul	r3, r2, r3
 2008 0666 1B14     		asrs	r3, r3, #16
 2009 0668 FA6C     		ldr	r2, [r7, #76]
 2010 066a 1344     		add	r3, r3, r2
 2011 066c FB64     		str	r3, [r7, #76]
 2012              	.L126:
 797:..\src/interruptions.c ****             
 798:..\src/interruptions.c **** 
 799:..\src/interruptions.c ****             // Update measure
 800:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2013              		.loc 1 800 0
 2014 066e 504A     		ldr	r2, .L173+36
 2015 0670 BB6C     		ldr	r3, [r7, #72]
 2016 0672 1360     		str	r3, [r2]
 801:..\src/interruptions.c **** 
 802:..\src/interruptions.c ****             if (pwm_input > 0)
 2017              		.loc 1 802 0
 2018 0674 FB6C     		ldr	r3, [r7, #76]
 2019 0676 002B     		cmp	r3, #0
 2020 0678 03DD     		ble	.L127
 803:..\src/interruptions.c ****                 motor_dir = TRUE;
 2021              		.loc 1 803 0
 2022 067a 4E4B     		ldr	r3, .L173+40
 2023 067c 0122     		movs	r2, #1
 2024 067e 1A70     		strb	r2, [r3]
 804:..\src/interruptions.c ****             else
 805:..\src/interruptions.c ****                 motor_dir = FALSE;
 806:..\src/interruptions.c **** 
 807:..\src/interruptions.c ****         break;
 2025              		.loc 1 807 0
 2026 0680 B0E0     		b	.L100
 2027              	.L127:
 805:..\src/interruptions.c **** 
 2028              		.loc 1 805 0
 2029 0682 4C4B     		ldr	r3, .L173+40
 2030 0684 0022     		movs	r2, #0
 2031 0686 1A70     		strb	r2, [r3]
 2032              		.loc 1 807 0
 2033 0688 ACE0     		b	.L100
 2034              	.L104:
 808:..\src/interruptions.c **** 
 809:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 810:..\src/interruptions.c ****         case CONTROL_CURRENT:
 811:..\src/interruptions.c ****             if(g_ref.onoff && tension_valid) {
 2035              		.loc 1 811 0
 2036 068a 464B     		ldr	r3, .L173+24
 2037 068c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2038 068e 002B     		cmp	r3, #0
 2039 0690 00F0A580 		beq	.L167
 2040              		.loc 1 811 0 is_stmt 0 discriminator 1
 2041 0694 484B     		ldr	r3, .L173+44
 2042 0696 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2043 0698 002B     		cmp	r3, #0
 2044 069a 00F0A080 		beq	.L167
 812:..\src/interruptions.c ****                 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 52


 813:..\src/interruptions.c ****                 i_ref = g_ref.curr;
 2045              		.loc 1 813 0 is_stmt 1
 2046 069e 414B     		ldr	r3, .L173+24
 2047 06a0 5B68     		ldr	r3, [r3, #4]
 2048 06a2 7B64     		str	r3, [r7, #68]
 814:..\src/interruptions.c **** 
 815:..\src/interruptions.c ****                 if (i_ref > c_mem.current_limit) 
 2049              		.loc 1 815 0
 2050 06a4 394B     		ldr	r3, .L173
 2051 06a6 B3F96830 		ldrsh	r3, [r3, #104]
 2052 06aa 1A46     		mov	r2, r3
 2053 06ac 7B6C     		ldr	r3, [r7, #68]
 2054 06ae 9A42     		cmp	r2, r3
 2055 06b0 04DA     		bge	.L130
 816:..\src/interruptions.c ****                     i_ref = c_mem.current_limit;
 2056              		.loc 1 816 0
 2057 06b2 364B     		ldr	r3, .L173
 2058 06b4 B3F96830 		ldrsh	r3, [r3, #104]
 2059 06b8 7B64     		str	r3, [r7, #68]
 2060 06ba 0BE0     		b	.L131
 2061              	.L130:
 817:..\src/interruptions.c ****                 else {
 818:..\src/interruptions.c ****                     if (i_ref < -c_mem.current_limit)
 2062              		.loc 1 818 0
 2063 06bc 334B     		ldr	r3, .L173
 2064 06be B3F96830 		ldrsh	r3, [r3, #104]
 2065 06c2 5A42     		negs	r2, r3
 2066 06c4 7B6C     		ldr	r3, [r7, #68]
 2067 06c6 9A42     		cmp	r2, r3
 2068 06c8 04DD     		ble	.L131
 819:..\src/interruptions.c ****                         i_ref = -c_mem.current_limit;
 2069              		.loc 1 819 0
 2070 06ca 304B     		ldr	r3, .L173
 2071 06cc B3F96830 		ldrsh	r3, [r3, #104]
 2072 06d0 5B42     		negs	r3, r3
 2073 06d2 7B64     		str	r3, [r7, #68]
 2074              	.L131:
 820:..\src/interruptions.c ****                 }
 821:..\src/interruptions.c ****                 
 822:..\src/interruptions.c ****                 // current error
 823:..\src/interruptions.c ****                 curr_error = i_ref - g_meas.curr;            
 2075              		.loc 1 823 0
 2076 06d4 2E4B     		ldr	r3, .L173+4
 2077 06d6 DB68     		ldr	r3, [r3, #12]
 2078 06d8 7A6C     		ldr	r2, [r7, #68]
 2079 06da D31A     		subs	r3, r2, r3
 2080 06dc 7B60     		str	r3, [r7, #4]
 824:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 2081              		.loc 1 824 0
 2082 06de 2D4B     		ldr	r3, .L173+8
 2083 06e0 1A68     		ldr	r2, [r3]
 2084 06e2 7B68     		ldr	r3, [r7, #4]
 2085 06e4 1344     		add	r3, r3, r2
 2086 06e6 2B4A     		ldr	r2, .L173+8
 2087 06e8 1360     		str	r3, [r2]
 825:..\src/interruptions.c ****                 
 826:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 53


 2088              		.loc 1 826 0
 2089 06ea 2A4B     		ldr	r3, .L173+8
 2090 06ec 1B68     		ldr	r3, [r3]
 2091 06ee 2A4A     		ldr	r2, .L173+12
 2092 06f0 9342     		cmp	r3, r2
 2093 06f2 03DD     		ble	.L132
 827:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2094              		.loc 1 827 0
 2095 06f4 274B     		ldr	r3, .L173+8
 2096 06f6 284A     		ldr	r2, .L173+12
 2097 06f8 1A60     		str	r2, [r3]
 2098 06fa 07E0     		b	.L133
 2099              	.L132:
 828:..\src/interruptions.c ****                 else {
 829:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 2100              		.loc 1 829 0
 2101 06fc 254B     		ldr	r3, .L173+8
 2102 06fe 1B68     		ldr	r3, [r3]
 2103 0700 264A     		ldr	r2, .L173+16
 2104 0702 9342     		cmp	r3, r2
 2105 0704 02DA     		bge	.L133
 830:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2106              		.loc 1 830 0
 2107 0706 234B     		ldr	r3, .L173+8
 2108 0708 244A     		ldr	r2, .L173+16
 2109 070a 1A60     		str	r2, [r3]
 2110              	.L133:
 831:..\src/interruptions.c ****                 }
 832:..\src/interruptions.c **** 
 833:..\src/interruptions.c ****                 pwm_input = 0;
 2111              		.loc 1 833 0
 2112 070c 0023     		movs	r3, #0
 2113 070e FB64     		str	r3, [r7, #76]
 834:..\src/interruptions.c **** 
 835:..\src/interruptions.c ****                 // Proportional
 836:..\src/interruptions.c ****                 if (k_p_c != 0)
 2114              		.loc 1 836 0
 2115 0710 3B6B     		ldr	r3, [r7, #48]
 2116 0712 002B     		cmp	r3, #0
 2117 0714 07D0     		beq	.L134
 837:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 2118              		.loc 1 837 0
 2119 0716 3B6B     		ldr	r3, [r7, #48]
 2120 0718 7A68     		ldr	r2, [r7, #4]
 2121 071a 02FB03F3 		mul	r3, r2, r3
 2122 071e 1B14     		asrs	r3, r3, #16
 2123 0720 FA6C     		ldr	r2, [r7, #76]
 2124 0722 1344     		add	r3, r3, r2
 2125 0724 FB64     		str	r3, [r7, #76]
 2126              	.L134:
 838:..\src/interruptions.c **** 
 839:..\src/interruptions.c ****                 // Integral
 840:..\src/interruptions.c ****                 if (k_i_c != 0)
 2127              		.loc 1 840 0
 2128 0726 FB6A     		ldr	r3, [r7, #44]
 2129 0728 002B     		cmp	r3, #0
 2130 072a 08D0     		beq	.L135
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 54


 841:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 2131              		.loc 1 841 0
 2132 072c 194B     		ldr	r3, .L173+8
 2133 072e 1B68     		ldr	r3, [r3]
 2134 0730 FA6A     		ldr	r2, [r7, #44]
 2135 0732 02FB03F3 		mul	r3, r2, r3
 2136 0736 1B14     		asrs	r3, r3, #16
 2137 0738 FA6C     		ldr	r2, [r7, #76]
 2138 073a 1344     		add	r3, r3, r2
 2139 073c FB64     		str	r3, [r7, #76]
 2140              	.L135:
 842:..\src/interruptions.c **** 
 843:..\src/interruptions.c ****                 // Derivative
 844:..\src/interruptions.c ****                 if (k_d_c != 0)
 2141              		.loc 1 844 0
 2142 073e BB6A     		ldr	r3, [r7, #40]
 2143 0740 002B     		cmp	r3, #0
 2144 0742 0AD0     		beq	.L136
 845:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 2145              		.loc 1 845 0
 2146 0744 164B     		ldr	r3, .L173+20
 2147 0746 1B68     		ldr	r3, [r3]
 2148 0748 7A68     		ldr	r2, [r7, #4]
 2149 074a D31A     		subs	r3, r2, r3
 2150 074c BA6A     		ldr	r2, [r7, #40]
 2151 074e 02FB03F3 		mul	r3, r2, r3
 2152 0752 1B14     		asrs	r3, r3, #16
 2153 0754 FA6C     		ldr	r2, [r7, #76]
 2154 0756 1344     		add	r3, r3, r2
 2155 0758 FB64     		str	r3, [r7, #76]
 2156              	.L136:
 846:..\src/interruptions.c ****                 
 847:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2157              		.loc 1 847 0
 2158 075a 114A     		ldr	r2, .L173+20
 2159 075c 7B68     		ldr	r3, [r7, #4]
 2160 075e 1360     		str	r3, [r2]
 848:..\src/interruptions.c ****                 
 849:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2161              		.loc 1 849 0
 2162 0760 FB6C     		ldr	r3, [r7, #76]
 2163 0762 002B     		cmp	r3, #0
 2164 0764 03DB     		blt	.L137
 850:..\src/interruptions.c ****                     motor_dir = TRUE;
 2165              		.loc 1 850 0
 2166 0766 134B     		ldr	r3, .L173+40
 2167 0768 0122     		movs	r2, #1
 2168 076a 1A70     		strb	r2, [r3]
 851:..\src/interruptions.c ****                 else
 852:..\src/interruptions.c ****                     motor_dir = FALSE;
 853:..\src/interruptions.c ****             }
 854:..\src/interruptions.c ****         break;
 2169              		.loc 1 854 0
 2170 076c 37E0     		b	.L167
 2171              	.L137:
 852:..\src/interruptions.c ****             }
 2172              		.loc 1 852 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 55


 2173 076e 114B     		ldr	r3, .L173+40
 2174 0770 0022     		movs	r2, #0
 2175 0772 1A70     		strb	r2, [r3]
 2176              		.loc 1 854 0
 2177 0774 33E0     		b	.L167
 2178              	.L103:
 855:..\src/interruptions.c ****         
 856:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
 857:..\src/interruptions.c ****         case CONTROL_PWM:
 858:..\src/interruptions.c **** 
 859:..\src/interruptions.c ****             pwm_input = g_ref.pwm;
 2179              		.loc 1 859 0
 2180 0776 0B4B     		ldr	r3, .L173+24
 2181 0778 9B68     		ldr	r3, [r3, #8]
 2182 077a FB64     		str	r3, [r7, #76]
 860:..\src/interruptions.c **** 
 861:..\src/interruptions.c ****             if (pwm_input > 0) 
 2183              		.loc 1 861 0
 2184 077c FB6C     		ldr	r3, [r7, #76]
 2185 077e 002B     		cmp	r3, #0
 2186 0780 1CDD     		ble	.L138
 862:..\src/interruptions.c ****                 motor_dir = TRUE;
 2187              		.loc 1 862 0
 2188 0782 0C4B     		ldr	r3, .L173+40
 2189 0784 0122     		movs	r2, #1
 2190 0786 1A70     		strb	r2, [r3]
 2191 0788 1BE0     		b	.L139
 2192              	.L174:
 2193 078a 00BF     		.align	2
 2194              	.L173:
 2195 078c 00000000 		.word	c_mem
 2196 0790 00000000 		.word	g_meas
 2197 0794 9C000000 		.word	curr_error_sum.10090
 2198 0798 A0860100 		.word	100000
 2199 079c 6079FEFF 		.word	-100000
 2200 07a0 A0000000 		.word	prev_curr_err.10092
 2201 07a4 00000000 		.word	g_ref
 2202 07a8 90000000 		.word	pos_error_sum.10089
 2203 07ac 18FCFFFF 		.word	-1000
 2204 07b0 94000000 		.word	prev_pos_err.10091
 2205 07b4 98000000 		.word	motor_dir.10094
 2206 07b8 00000000 		.word	tension_valid
 2207              	.L138:
 863:..\src/interruptions.c ****             else 
 864:..\src/interruptions.c ****                 motor_dir = FALSE;
 2208              		.loc 1 864 0
 2209 07bc 664B     		ldr	r3, .L175
 2210 07be 0022     		movs	r2, #0
 2211 07c0 1A70     		strb	r2, [r3]
 2212              	.L139:
 865:..\src/interruptions.c ****             
 866:..\src/interruptions.c **** 
 867:..\src/interruptions.c ****             // pwm_input saturation
 868:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2213              		.loc 1 868 0
 2214 07c2 FB6C     		ldr	r3, [r7, #76]
 2215 07c4 13F1640F 		cmn	r3, #100
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 56


 2216 07c8 03DA     		bge	.L140
 869:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2217              		.loc 1 869 0
 2218 07ca 6FF06303 		mvn	r3, #99
 2219 07ce FB64     		str	r3, [r7, #76]
 870:..\src/interruptions.c ****             else {
 871:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
 872:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 873:..\src/interruptions.c ****         	}
 874:..\src/interruptions.c **** 
 875:..\src/interruptions.c ****         break;
 2220              		.loc 1 875 0
 2221 07d0 07E0     		b	.L168
 2222              	.L140:
 871:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2223              		.loc 1 871 0
 2224 07d2 FB6C     		ldr	r3, [r7, #76]
 2225 07d4 642B     		cmp	r3, #100
 2226 07d6 04DD     		ble	.L168
 872:..\src/interruptions.c ****         	}
 2227              		.loc 1 872 0
 2228 07d8 6423     		movs	r3, #100
 2229 07da FB64     		str	r3, [r7, #76]
 2230              		.loc 1 875 0
 2231 07dc 01E0     		b	.L168
 2232              	.L167:
 854:..\src/interruptions.c ****         
 2233              		.loc 1 854 0
 2234 07de 00BF     		nop
 2235 07e0 00E0     		b	.L100
 2236              	.L168:
 2237              		.loc 1 875 0
 2238 07e2 00BF     		nop
 2239              	.L100:
 876:..\src/interruptions.c ****             
 877:..\src/interruptions.c ****     }
 878:..\src/interruptions.c **** 
 879:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
 880:..\src/interruptions.c **** 
 881:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2240              		.loc 1 881 0
 2241 07e4 FB6C     		ldr	r3, [r7, #76]
 2242 07e6 642B     		cmp	r3, #100
 2243 07e8 01DD     		ble	.L142
 882:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2244              		.loc 1 882 0
 2245 07ea 6423     		movs	r3, #100
 2246 07ec FB64     		str	r3, [r7, #76]
 2247              	.L142:
 883:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2248              		.loc 1 883 0
 2249 07ee FB6C     		ldr	r3, [r7, #76]
 2250 07f0 13F1640F 		cmn	r3, #100
 2251 07f4 02DA     		bge	.L143
 884:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2252              		.loc 1 884 0
 2253 07f6 6FF06303 		mvn	r3, #99
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 57


 2254 07fa FB64     		str	r3, [r7, #76]
 2255              	.L143:
 885:..\src/interruptions.c **** 
 886:..\src/interruptions.c ****     if (c_mem.control_mode != CONTROL_PWM) 
 2256              		.loc 1 886 0
 2257 07fc 574B     		ldr	r3, .L175+4
 2258 07fe 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2259 0802 012B     		cmp	r3, #1
 2260 0804 0DD0     		beq	.L144
 887:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
 2261              		.loc 1 887 0
 2262 0806 FB6C     		ldr	r3, [r7, #76]
 2263 0808 9B02     		lsls	r3, r3, #10
 2264 080a 554A     		ldr	r2, .L175+8
 2265 080c 82FB0312 		smull	r1, r2, r2, r3
 2266 0810 5211     		asrs	r2, r2, #5
 2267 0812 DB17     		asrs	r3, r3, #31
 2268 0814 D31A     		subs	r3, r2, r3
 2269 0816 534A     		ldr	r2, .L175+12
 2270 0818 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2271 081a 02FB03F3 		mul	r3, r2, r3
 2272 081e 9B12     		asrs	r3, r3, #10
 2273 0820 FB64     		str	r3, [r7, #76]
 2274              	.L144:
 888:..\src/interruptions.c ****  
 889:..\src/interruptions.c ****     //// RATE LIMITER ////
 890:..\src/interruptions.c ****     if(SIGN(pwm_input-prev_pwm) == SIGN(pos_error))
 2275              		.loc 1 890 0
 2276 0822 514B     		ldr	r3, .L175+16
 2277 0824 1B68     		ldr	r3, [r3]
 2278 0826 FA6C     		ldr	r2, [r7, #76]
 2279 0828 D31A     		subs	r3, r2, r3
 2280 082a 002B     		cmp	r3, #0
 2281 082c 01DB     		blt	.L145
 2282              		.loc 1 890 0 is_stmt 0 discriminator 1
 2283 082e 0122     		movs	r2, #1
 2284 0830 01E0     		b	.L146
 2285              	.L145:
 2286              		.loc 1 890 0 discriminator 2
 2287 0832 4FF0FF32 		mov	r2, #-1
 2288              	.L146:
 2289              		.loc 1 890 0 discriminator 4
 2290 0836 BB6C     		ldr	r3, [r7, #72]
 2291 0838 002B     		cmp	r3, #0
 2292 083a 01DB     		blt	.L147
 2293              		.loc 1 890 0 discriminator 5
 2294 083c 0123     		movs	r3, #1
 2295 083e 01E0     		b	.L148
 2296              	.L147:
 2297              		.loc 1 890 0 discriminator 6
 2298 0840 4FF0FF33 		mov	r3, #-1
 2299              	.L148:
 2300              		.loc 1 890 0 discriminator 8
 2301 0844 9A42     		cmp	r2, r3
 2302 0846 14D1     		bne	.L149
 891:..\src/interruptions.c ****     {
 892:..\src/interruptions.c ****         if((pwm_input-prev_pwm) > PWM_RATE_LIMITER_MAX)
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 58


 2303              		.loc 1 892 0 is_stmt 1
 2304 0848 474B     		ldr	r3, .L175+16
 2305 084a 1B68     		ldr	r3, [r3]
 2306 084c FA6C     		ldr	r2, [r7, #76]
 2307 084e D31A     		subs	r3, r2, r3
 2308 0850 012B     		cmp	r3, #1
 2309 0852 03DD     		ble	.L150
 893:..\src/interruptions.c ****             pwm_input =  prev_pwm + PWM_RATE_LIMITER_MAX;
 2310              		.loc 1 893 0
 2311 0854 444B     		ldr	r3, .L175+16
 2312 0856 1B68     		ldr	r3, [r3]
 2313 0858 0133     		adds	r3, r3, #1
 2314 085a FB64     		str	r3, [r7, #76]
 2315              	.L150:
 894:..\src/interruptions.c ****     
 895:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -PWM_RATE_LIMITER_MAX)
 2316              		.loc 1 895 0
 2317 085c 424B     		ldr	r3, .L175+16
 2318 085e 1B68     		ldr	r3, [r3]
 2319 0860 FA6C     		ldr	r2, [r7, #76]
 2320 0862 D31A     		subs	r3, r2, r3
 2321 0864 B3F1FF3F 		cmp	r3, #-1
 2322 0868 03DA     		bge	.L149
 896:..\src/interruptions.c ****             pwm_input =  prev_pwm - PWM_RATE_LIMITER_MAX;
 2323              		.loc 1 896 0
 2324 086a 3F4B     		ldr	r3, .L175+16
 2325 086c 1B68     		ldr	r3, [r3]
 2326 086e 013B     		subs	r3, r3, #1
 2327 0870 FB64     		str	r3, [r7, #76]
 2328              	.L149:
 897:..\src/interruptions.c ****     }
 898:..\src/interruptions.c ****     
 899:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2329              		.loc 1 899 0
 2330 0872 FB6C     		ldr	r3, [r7, #76]
 2331 0874 642B     		cmp	r3, #100
 2332 0876 01DD     		ble	.L151
 900:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2333              		.loc 1 900 0
 2334 0878 6423     		movs	r3, #100
 2335 087a FB64     		str	r3, [r7, #76]
 2336              	.L151:
 901:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2337              		.loc 1 901 0
 2338 087c FB6C     		ldr	r3, [r7, #76]
 2339 087e 13F1640F 		cmn	r3, #100
 2340 0882 02DA     		bge	.L152
 902:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2341              		.loc 1 902 0
 2342 0884 6FF06303 		mvn	r3, #99
 2343 0888 FB64     		str	r3, [r7, #76]
 2344              	.L152:
 903:..\src/interruptions.c ****     
 904:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2345              		.loc 1 904 0
 2346 088a 374A     		ldr	r2, .L175+16
 2347 088c FB6C     		ldr	r3, [r7, #76]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 59


 2348 088e 1360     		str	r3, [r2]
 905:..\src/interruptions.c **** 	
 906:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2349              		.loc 1 906 0
 2350 0890 FB6C     		ldr	r3, [r7, #76]
 2351 0892 002B     		cmp	r3, #0
 2352 0894 01DB     		blt	.L153
 2353              		.loc 1 906 0 is_stmt 0 discriminator 1
 2354 0896 0122     		movs	r2, #1
 2355 0898 01E0     		b	.L154
 2356              	.L153:
 2357              		.loc 1 906 0 discriminator 2
 2358 089a 4FF0FF32 		mov	r2, #-1
 2359              	.L154:
 2360              		.loc 1 906 0 discriminator 4
 2361 089e 334B     		ldr	r3, .L175+20
 2362 08a0 1A70     		strb	r2, [r3]
 907:..\src/interruptions.c ****     
 908:..\src/interruptions.c ****     // Block motor with pwm = 0 to exploit not reversible motor behaviour 
 909:..\src/interruptions.c **** 	if ( c_mem.control_mode != CONTROL_PWM && ((g_measOld.pos[0]-g_meas.pos[0]) < 50 && (g_measOld.pos
 2363              		.loc 1 909 0 is_stmt 1 discriminator 4
 2364 08a2 2E4B     		ldr	r3, .L175+4
 2365 08a4 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2366 08a8 012B     		cmp	r3, #1
 2367 08aa 3AD0     		beq	.L155
 2368              		.loc 1 909 0 is_stmt 0 discriminator 1
 2369 08ac 304B     		ldr	r3, .L175+24
 2370 08ae 1A68     		ldr	r2, [r3]
 2371 08b0 304B     		ldr	r3, .L175+28
 2372 08b2 1B68     		ldr	r3, [r3]
 2373 08b4 D31A     		subs	r3, r2, r3
 2374 08b6 312B     		cmp	r3, #49
 2375 08b8 33DC     		bgt	.L155
 2376              		.loc 1 909 0 discriminator 2
 2377 08ba 2D4B     		ldr	r3, .L175+24
 2378 08bc 1A68     		ldr	r2, [r3]
 2379 08be 2D4B     		ldr	r3, .L175+28
 2380 08c0 1B68     		ldr	r3, [r3]
 2381 08c2 D31A     		subs	r3, r2, r3
 2382 08c4 13F1310F 		cmn	r3, #49
 2383 08c8 2BDB     		blt	.L155
 2384              		.loc 1 909 0 discriminator 3
 2385 08ca 2B4B     		ldr	r3, .L175+32
 2386 08cc 1A68     		ldr	r2, [r3]
 2387 08ce 2B4B     		ldr	r3, .L175+36
 2388 08d0 1B68     		ldr	r3, [r3]
 2389 08d2 D31A     		subs	r3, r2, r3
 2390 08d4 632B     		cmp	r3, #99
 2391 08d6 24DC     		bgt	.L155
 2392              		.loc 1 909 0 discriminator 4
 2393 08d8 274B     		ldr	r3, .L175+32
 2394 08da 1A68     		ldr	r2, [r3]
 2395 08dc 274B     		ldr	r3, .L175+36
 2396 08de 1B68     		ldr	r3, [r3]
 2397 08e0 D31A     		subs	r3, r2, r3
 2398 08e2 13F1630F 		cmn	r3, #99
 2399 08e6 1CDB     		blt	.L155
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 60


 910:..\src/interruptions.c ****         position_counter++;
 2400              		.loc 1 910 0 is_stmt 1
 2401 08e8 254B     		ldr	r3, .L175+40
 2402 08ea 1B68     		ldr	r3, [r3]
 2403 08ec 0133     		adds	r3, r3, #1
 2404 08ee 244A     		ldr	r2, .L175+40
 2405 08f0 1360     		str	r3, [r2]
 911:..\src/interruptions.c ****         
 912:..\src/interruptions.c ****         if (position_counter > 250) { 
 2406              		.loc 1 912 0
 2407 08f2 234B     		ldr	r3, .L175+40
 2408 08f4 1B68     		ldr	r3, [r3]
 2409 08f6 FA2B     		cmp	r3, #250
 2410 08f8 16D9     		bls	.L158
 913:..\src/interruptions.c ****             if (c_mem.input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2411              		.loc 1 913 0
 2412 08fa 184B     		ldr	r3, .L175+4
 2413 08fc 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 2414 0900 002B     		cmp	r3, #0
 2415 0902 07D1     		bne	.L157
 2416              		.loc 1 913 0 is_stmt 0 discriminator 1
 2417 0904 1F4B     		ldr	r3, .L175+44
 2418 0906 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2419 0908 002B     		cmp	r3, #0
 2420 090a 03D1     		bne	.L157
 914:..\src/interruptions.c ****                 g_refNew.pos = g_meas.pos[0];       // Needed only when USB input mode is used, sin
 2421              		.loc 1 914 0 is_stmt 1
 2422 090c 194B     		ldr	r3, .L175+28
 2423 090e 1B68     		ldr	r3, [r3]
 2424 0910 1D4A     		ldr	r2, .L175+48
 2425 0912 1360     		str	r3, [r2]
 2426              	.L157:
 915:..\src/interruptions.c ****             }
 916:..\src/interruptions.c ****             g_ref.pos = g_meas.pos[0];
 2427              		.loc 1 916 0
 2428 0914 174B     		ldr	r3, .L175+28
 2429 0916 1B68     		ldr	r3, [r3]
 2430 0918 184A     		ldr	r2, .L175+36
 2431 091a 1360     		str	r3, [r2]
 917:..\src/interruptions.c ****             pwm_input = 0;            
 2432              		.loc 1 917 0
 2433 091c 0023     		movs	r3, #0
 2434 091e FB64     		str	r3, [r7, #76]
 912:..\src/interruptions.c ****             if (c_mem.input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2435              		.loc 1 912 0
 2436 0920 02E0     		b	.L158
 2437              	.L155:
 918:..\src/interruptions.c ****         }
 919:..\src/interruptions.c ****     }
 920:..\src/interruptions.c ****     else {
 921:..\src/interruptions.c ****         position_counter = 0;
 2438              		.loc 1 921 0
 2439 0922 174B     		ldr	r3, .L175+40
 2440 0924 0022     		movs	r2, #0
 2441 0926 1A60     		str	r2, [r3]
 2442              	.L158:
 922:..\src/interruptions.c ****     }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 61


 923:..\src/interruptions.c ****     
 924:..\src/interruptions.c ****     if (motor_dir)
 2443              		.loc 1 924 0
 2444 0928 0B4B     		ldr	r3, .L175
 2445 092a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2446 092c 002B     		cmp	r3, #0
 2447 092e 03D0     		beq	.L159
 925:..\src/interruptions.c ****         MOTOR_DIR_Write(0x01);
 2448              		.loc 1 925 0
 2449 0930 0120     		movs	r0, #1
 2450 0932 FFF7FEFF 		bl	MOTOR_DIR_Write
 2451 0936 02E0     		b	.L160
 2452              	.L159:
 926:..\src/interruptions.c ****     else
 927:..\src/interruptions.c ****         MOTOR_DIR_Write(0x00);
 2453              		.loc 1 927 0
 2454 0938 0020     		movs	r0, #0
 2455 093a FFF7FEFF 		bl	MOTOR_DIR_Write
 2456              	.L160:
 928:..\src/interruptions.c **** 
 929:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare(abs(pwm_input));
 2457              		.loc 1 929 0
 2458 093e FB6C     		ldr	r3, [r7, #76]
 2459 0940 002B     		cmp	r3, #0
 2460 0942 B8BF     		it	lt
 2461 0944 5B42     		rsblt	r3, r3, #0
 2462 0946 DBB2     		uxtb	r3, r3
 2463 0948 1846     		mov	r0, r3
 2464 094a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare
 930:..\src/interruptions.c **** }
 2465              		.loc 1 930 0
 2466 094e 00BF     		nop
 2467 0950 5037     		adds	r7, r7, #80
 2468              		.cfi_def_cfa_offset 8
 2469 0952 BD46     		mov	sp, r7
 2470              		.cfi_def_cfa_register 13
 2471              		@ sp needed
 2472 0954 80BD     		pop	{r7, pc}
 2473              	.L176:
 2474 0956 00BF     		.align	2
 2475              	.L175:
 2476 0958 98000000 		.word	motor_dir.10094
 2477 095c 00000000 		.word	c_mem
 2478 0960 1F85EB51 		.word	1374389535
 2479 0964 00000000 		.word	dev_pwm_limit
 2480 0968 A4000000 		.word	prev_pwm.10093
 2481 096c 00000000 		.word	pwm_sign
 2482 0970 00000000 		.word	g_measOld
 2483 0974 00000000 		.word	g_meas
 2484 0978 00000000 		.word	g_refOld
 2485 097c 00000000 		.word	g_ref
 2486 0980 A8000000 		.word	position_counter.10095
 2487 0984 00000000 		.word	change_ext_ref_flag
 2488 0988 00000000 		.word	g_refNew
 2489              		.cfi_endproc
 2490              	.LFE68:
 2491              		.size	motor_control, .-motor_control
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 62


 2492              		.global	__aeabi_fcmpeq
 2493              		.global	__aeabi_i2f
 2494              		.global	__aeabi_fmul
 2495              		.global	__aeabi_f2iz
 2496              		.global	__aeabi_fdiv
 2497              		.global	__aeabi_fcmplt
 2498              		.section	.text.encoder_reading_SPI,"ax",%progbits
 2499              		.align	2
 2500              		.global	encoder_reading_SPI
 2501              		.thumb
 2502              		.thumb_func
 2503              		.type	encoder_reading_SPI, %function
 2504              	encoder_reading_SPI:
 2505              	.LFB69:
 931:..\src/interruptions.c **** 
 932:..\src/interruptions.c **** //==============================================================================
 933:..\src/interruptions.c **** //                                                           ENCODER READING SPI
 934:..\src/interruptions.c **** //==============================================================================
 935:..\src/interruptions.c **** 
 936:..\src/interruptions.c **** void encoder_reading_SPI() {
 2506              		.loc 1 936 0
 2507              		.cfi_startproc
 2508              		@ args = 0, pretend = 0, frame = 40
 2509              		@ frame_needed = 1, uses_anonymous_args = 0
 2510 0000 90B5     		push	{r4, r7, lr}
 2511              		.cfi_def_cfa_offset 12
 2512              		.cfi_offset 4, -12
 2513              		.cfi_offset 7, -8
 2514              		.cfi_offset 14, -4
 2515 0002 8BB0     		sub	sp, sp, #44
 2516              		.cfi_def_cfa_offset 56
 2517 0004 00AF     		add	r7, sp, #0
 2518              		.cfi_def_cfa_register 7
 937:..\src/interruptions.c **** 
 938:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 2519              		.loc 1 938 0
 2520 0006 0023     		movs	r3, #0
 2521 0008 87F82730 		strb	r3, [r7, #39]
 939:..\src/interruptions.c ****     int32 aux_encoders[N_ENCODERS];
 940:..\src/interruptions.c ****     
 941:..\src/interruptions.c ****     // Encoder Variables  
 942:..\src/interruptions.c ****     uint8 jj;
 943:..\src/interruptions.c ****      
 944:..\src/interruptions.c ****     int16 tmp_value_encoder;
 945:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
 946:..\src/interruptions.c ****     int32 value_encoder;
 947:..\src/interruptions.c ****     int32 speed_encoder;
 948:..\src/interruptions.c ****     int32 value_diff;
 949:..\src/interruptions.c **** 	int8 init_rot = 0;
 2522              		.loc 1 949 0
 2523 000c 0023     		movs	r3, #0
 2524 000e FB77     		strb	r3, [r7, #31]
 950:..\src/interruptions.c **** 
 951:..\src/interruptions.c ****     static int32 last_value_encoder[NUM_OF_SENSORS];
 952:..\src/interruptions.c ****     static int32 comp_value_encoder[NUM_OF_SENSORS];
 953:..\src/interruptions.c ****     static uint8 error[NUM_OF_SENSORS];
 954:..\src/interruptions.c ****     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 63


 955:..\src/interruptions.c ****     static CYBIT only_first_time = TRUE;
 956:..\src/interruptions.c **** //    static CYBIT safe_startup_motor_activation = FALSE;
 957:..\src/interruptions.c ****     static uint8 one_time_execute = 0;
 958:..\src/interruptions.c **** //    static uint32 count_startup_motor = 0;
 959:..\src/interruptions.c ****     static CYBIT pos_reconstruct = FALSE;
 960:..\src/interruptions.c **** 
 961:..\src/interruptions.c ****     static int32 v_value[N_ENCODERS];   //last value for velocity
 962:..\src/interruptions.c ****     static int32 vv_value[N_ENCODERS];  //last last value for velocity
 963:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODERS];  //last last last value for velocity
 964:..\src/interruptions.c ****     
 965:..\src/interruptions.c ****     if (reset_last_value_flag) {
 2525              		.loc 1 965 0
 2526 0010 684B     		ldr	r3, .L209
 2527 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2528 0014 002B     		cmp	r3, #0
 2529 0016 13D0     		beq	.L178
 966:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 2530              		.loc 1 966 0
 2531 0018 0323     		movs	r3, #3
 2532 001a 87F82630 		strb	r3, [r7, #38]
 2533 001e 05E0     		b	.L179
 2534              	.L180:
 967:..\src/interruptions.c ****             last_value_encoder[jj] = 0;
 2535              		.loc 1 967 0
 2536 0020 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2537 0024 644A     		ldr	r2, .L209+4
 2538 0026 0021     		movs	r1, #0
 2539 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 2540              	.L179:
 966:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 2541              		.loc 1 966 0 discriminator 1
 2542 002c 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2543 0030 5A1E     		subs	r2, r3, #1
 2544 0032 87F82620 		strb	r2, [r7, #38]
 2545 0036 002B     		cmp	r3, #0
 2546 0038 F2D1     		bne	.L180
 968:..\src/interruptions.c ****         
 969:..\src/interruptions.c ****         reset_last_value_flag = 0;
 2547              		.loc 1 969 0
 2548 003a 5E4B     		ldr	r3, .L209
 2549 003c 0022     		movs	r2, #0
 2550 003e 1A70     		strb	r2, [r3]
 2551              	.L178:
 970:..\src/interruptions.c ****     }
 971:..\src/interruptions.c **** 
 972:..\src/interruptions.c ****     //======================================================     reading sensors
 973:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 2552              		.loc 1 973 0
 2553 0040 0023     		movs	r3, #0
 2554 0042 87F82730 		strb	r3, [r7, #39]
 2555 0046 0DE0     		b	.L181
 2556              	.L182:
 974:..\src/interruptions.c ****         aux_encoders[index] = 0;
 2557              		.loc 1 974 0 discriminator 3
 2558 0048 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2559 004c 9B00     		lsls	r3, r3, #2
 2560 004e 07F12802 		add	r2, r7, #40
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 64


 2561 0052 1344     		add	r3, r3, r2
 2562 0054 0022     		movs	r2, #0
 2563 0056 43F8242C 		str	r2, [r3, #-36]
 973:..\src/interruptions.c ****         aux_encoders[index] = 0;
 2564              		.loc 1 973 0 discriminator 3
 2565 005a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2566 005e 0133     		adds	r3, r3, #1
 2567 0060 87F82730 		strb	r3, [r7, #39]
 2568              	.L181:
 973:..\src/interruptions.c ****         aux_encoders[index] = 0;
 2569              		.loc 1 973 0 is_stmt 0 discriminator 1
 2570 0064 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2571 0068 022B     		cmp	r3, #2
 2572 006a EDD9     		bls	.L182
 975:..\src/interruptions.c ****     }   
 976:..\src/interruptions.c ****     
 977:..\src/interruptions.c ****     // encoder_read(&aux_encoders[0]);
 978:..\src/interruptions.c ****     aux_encoders[0] = (SHIFTREG_ENC_2_ReadData() >> 1) & 0x3FFFF;
 2573              		.loc 1 978 0 is_stmt 1
 2574 006c FFF7FEFF 		bl	SHIFTREG_ENC_2_ReadData
 2575 0070 0346     		mov	r3, r0
 2576 0072 5B08     		lsrs	r3, r3, #1
 2577 0074 C3F31103 		ubfx	r3, r3, #0, #18
 2578 0078 7B60     		str	r3, [r7, #4]
 979:..\src/interruptions.c **** //    aux_encoders[0] = (Enc_buf[0] ) & 0x00FFF;
 980:..\src/interruptions.c ****     aux_encoders[0] = (aux_encoders[0] & 0x3FFC0) >> 6;   // 00000000000000[20] XXXXXXXXXXXX[12]
 2579              		.loc 1 980 0
 2580 007a 7B68     		ldr	r3, [r7, #4]
 2581 007c 9B11     		asrs	r3, r3, #6
 2582 007e C3F30B03 		ubfx	r3, r3, #0, #12
 2583 0082 7B60     		str	r3, [r7, #4]
 981:..\src/interruptions.c ****     data_encoder_raw[0] = aux_encoders[0];
 2584              		.loc 1 981 0
 2585 0084 7B68     		ldr	r3, [r7, #4]
 2586 0086 1A46     		mov	r2, r3
 2587 0088 4C4B     		ldr	r3, .L209+8
 2588 008a 1A60     		str	r2, [r3]
 982:..\src/interruptions.c **** //    aux_encoders[1] = ((uint32)SHIFTREG_ENC_1_ReadData() >> 1) & 0x0FFFF;
 983:..\src/interruptions.c **** //    aux_encoders[1] = (aux_encoders[1] & 0x3FFC0) >> 6;   // 00000000000000[20] XXXXXXXXXXXX[12]
 984:..\src/interruptions.c **** //    data_encoder_raw[1] = aux_encoders[1];
 985:..\src/interruptions.c ****     aux_encoders[1] = (SHIFTREG_ENC_3_ReadData() >> 1) & 0x3FFFF;
 2589              		.loc 1 985 0
 2590 008c FFF7FEFF 		bl	SHIFTREG_ENC_3_ReadData
 2591 0090 0346     		mov	r3, r0
 2592 0092 5B08     		lsrs	r3, r3, #1
 2593 0094 C3F31103 		ubfx	r3, r3, #0, #18
 2594 0098 BB60     		str	r3, [r7, #8]
 986:..\src/interruptions.c ****     aux_encoders[1] = (aux_encoders[1] & 0x3FFC0) >> 6;   // 00000000000000[20] XXXXXXXXXXXX[12]
 2595              		.loc 1 986 0
 2596 009a BB68     		ldr	r3, [r7, #8]
 2597 009c 9B11     		asrs	r3, r3, #6
 2598 009e C3F30B03 		ubfx	r3, r3, #0, #12
 2599 00a2 BB60     		str	r3, [r7, #8]
 987:..\src/interruptions.c ****     data_encoder_raw[1] = aux_encoders[1];
 2600              		.loc 1 987 0
 2601 00a4 BB68     		ldr	r3, [r7, #8]
 2602 00a6 1A46     		mov	r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 65


 2603 00a8 444B     		ldr	r3, .L209+8
 2604 00aa 5A60     		str	r2, [r3, #4]
 988:..\src/interruptions.c ****     aux_encoders[2] = (SHIFTREG_ENC_1_ReadData() >> 1) & 0x3FFFF;
 2605              		.loc 1 988 0
 2606 00ac FFF7FEFF 		bl	SHIFTREG_ENC_1_ReadData
 2607 00b0 0346     		mov	r3, r0
 2608 00b2 5B08     		lsrs	r3, r3, #1
 2609 00b4 C3F31103 		ubfx	r3, r3, #0, #18
 2610 00b8 FB60     		str	r3, [r7, #12]
 989:..\src/interruptions.c ****     aux_encoders[2] = (aux_encoders[2] & 0x3FFC0) >> 6;   // 00000000000000[20] XXXXXXXXXXXX[12]
 2611              		.loc 1 989 0
 2612 00ba FB68     		ldr	r3, [r7, #12]
 2613 00bc 9B11     		asrs	r3, r3, #6
 2614 00be C3F30B03 		ubfx	r3, r3, #0, #12
 2615 00c2 FB60     		str	r3, [r7, #12]
 990:..\src/interruptions.c ****     data_encoder_raw[2] = aux_encoders[2];
 2616              		.loc 1 990 0
 2617 00c4 FB68     		ldr	r3, [r7, #12]
 2618 00c6 1A46     		mov	r2, r3
 2619 00c8 3C4B     		ldr	r3, .L209+8
 2620 00ca 9A60     		str	r2, [r3, #8]
 991:..\src/interruptions.c ****         
 992:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 2621              		.loc 1 992 0
 2622 00cc 0023     		movs	r3, #0
 2623 00ce 87F82730 		strb	r3, [r7, #39]
 2624 00d2 C4E1     		b	.L183
 2625              	.L203:
 993:..\src/interruptions.c ****           
 994:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoders[index] - (uint16)g_mem.m_off[index]);
 2626              		.loc 1 994 0
 2627 00d4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2628 00d8 9B00     		lsls	r3, r3, #2
 2629 00da 07F12802 		add	r2, r7, #40
 2630 00de 1344     		add	r3, r3, r2
 2631 00e0 53F8243C 		ldr	r3, [r3, #-36]
 2632 00e4 9AB2     		uxth	r2, r3
 2633 00e6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2634 00ea 3549     		ldr	r1, .L209+12
 2635 00ec 0E33     		adds	r3, r3, #14
 2636 00ee 9B00     		lsls	r3, r3, #2
 2637 00f0 0B44     		add	r3, r3, r1
 2638 00f2 5B68     		ldr	r3, [r3, #4]
 2639 00f4 9BB2     		uxth	r3, r3
 2640 00f6 D31A     		subs	r3, r2, r3
 2641 00f8 9BB2     		uxth	r3, r3
 2642 00fa BB84     		strh	r3, [r7, #36]	@ movhi
 995:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 2643              		.loc 1 995 0
 2644 00fc B7F92430 		ldrsh	r3, [r7, #36]
 2645 0100 002B     		cmp	r3, #0
 2646 0102 04DA     		bge	.L184
 996:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 2647              		.loc 1 996 0
 2648 0104 BB8C     		ldrh	r3, [r7, #36]
 2649 0106 03F58053 		add	r3, r3, #4096
 2650 010a 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 66


 2651 010c BB84     		strh	r3, [r7, #36]	@ movhi
 2652              	.L184:
 997:..\src/interruptions.c ****         }       // Range [0, 4096]
 998:..\src/interruptions.c **** 
 999:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 2653              		.loc 1 999 0
 2654 010e B7F92430 		ldrsh	r3, [r7, #36]
 2655 0112 B3F5006F 		cmp	r3, #2048
 2656 0116 04DB     		blt	.L185
1000:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 2657              		.loc 1 1000 0
 2658 0118 BB8C     		ldrh	r3, [r7, #36]
 2659 011a A3F58053 		sub	r3, r3, #4096
 2660 011e 9BB2     		uxth	r3, r3
 2661 0120 BB84     		strh	r3, [r7, #36]	@ movhi
 2662              	.L185:
1001:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1002:..\src/interruptions.c **** 
1003:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 2663              		.loc 1 1003 0
 2664 0122 B7F92430 		ldrsh	r3, [r7, #36]
 2665 0126 1B01     		lsls	r3, r3, #4
 2666 0128 BB61     		str	r3, [r7, #24]
1004:..\src/interruptions.c ****         comp_value_encoder[index] = tmp_value_encoder_32;
 2667              		.loc 1 1004 0
 2668 012a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2669 012e 2549     		ldr	r1, .L209+16
 2670 0130 BA69     		ldr	r2, [r7, #24]
 2671 0132 41F82320 		str	r2, [r1, r3, lsl #2]
1005:..\src/interruptions.c **** 
1006:..\src/interruptions.c ****         // Initialize last_value_encoder
1007:..\src/interruptions.c ****         if (only_first_time) {
 2672              		.loc 1 1007 0
 2673 0136 244B     		ldr	r3, .L209+20
 2674 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2675 013a 002B     		cmp	r3, #0
 2676 013c 0CD0     		beq	.L186
1008:..\src/interruptions.c ****             last_value_encoder[index] = tmp_value_encoder_32;
 2677              		.loc 1 1008 0
 2678 013e 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2679 0142 1D49     		ldr	r1, .L209+4
 2680 0144 BA69     		ldr	r2, [r7, #24]
 2681 0146 41F82320 		str	r2, [r1, r3, lsl #2]
1009:..\src/interruptions.c ****             if (index == 2)
 2682              		.loc 1 1009 0
 2683 014a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2684 014e 022B     		cmp	r3, #2
 2685 0150 02D1     		bne	.L186
1010:..\src/interruptions.c ****                 only_first_time = 0;
 2686              		.loc 1 1010 0
 2687 0152 1D4B     		ldr	r3, .L209+20
 2688 0154 0022     		movs	r2, #0
 2689 0156 1A70     		strb	r2, [r3]
 2690              	.L186:
1011:..\src/interruptions.c ****         }
1012:..\src/interruptions.c **** 
1013:..\src/interruptions.c ****         // Take care of rotations
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 67


1014:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[index];     // worst case SSSSSSSSSS
 2691              		.loc 1 1014 0
 2692 0158 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2693 015c 164A     		ldr	r2, .L209+4
 2694 015e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2695 0162 BA69     		ldr	r2, [r7, #24]
 2696 0164 D31A     		subs	r3, r2, r3
 2697 0166 7B61     		str	r3, [r7, #20]
1015:..\src/interruptions.c **** 
1016:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1017:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1018:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1019:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1020:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1021:..\src/interruptions.c ****         //                                               |           |
1022:..\src/interruptions.c ****         //                                           24575           -24576
1023:..\src/interruptions.c ****         //                                               |___________|
1024:..\src/interruptions.c ****         //                                                   49152
1025:..\src/interruptions.c **** 
1026:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1027:..\src/interruptions.c ****         // and update the variable only if the difference between
1028:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1029:..\src/interruptions.c **** 
1030:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1031:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1032:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1033:..\src/interruptions.c **** 
1034:..\src/interruptions.c ****         if (value_diff > 49152)
 2698              		.loc 1 1034 0
 2699 0168 7B69     		ldr	r3, [r7, #20]
 2700 016a B3F5404F 		cmp	r3, #49152
 2701 016e 0EDD     		ble	.L187
1035:..\src/interruptions.c ****             g_meas.rot[index]--;
 2702              		.loc 1 1035 0
 2703 0170 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2704 0174 154A     		ldr	r2, .L209+24
 2705 0176 1A44     		add	r2, r2, r3
 2706 0178 92F91420 		ldrsb	r2, [r2, #20]
 2707 017c D2B2     		uxtb	r2, r2
 2708 017e 013A     		subs	r2, r2, #1
 2709 0180 D2B2     		uxtb	r2, r2
 2710 0182 51B2     		sxtb	r1, r2
 2711 0184 114A     		ldr	r2, .L209+24
 2712 0186 1344     		add	r3, r3, r2
 2713 0188 0A46     		mov	r2, r1
 2714 018a 1A75     		strb	r2, [r3, #20]
 2715 018c 36E0     		b	.L188
 2716              	.L187:
1036:..\src/interruptions.c ****         else{ 
1037:..\src/interruptions.c ****             if (value_diff < -49152)
 2717              		.loc 1 1037 0
 2718 018e 7B69     		ldr	r3, [r7, #20]
 2719 0190 13F5404F 		cmn	r3, #49152
 2720 0194 1CDA     		bge	.L189
1038:..\src/interruptions.c ****                 g_meas.rot[index]++;
 2721              		.loc 1 1038 0
 2722 0196 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 68


 2723 019a 0C4A     		ldr	r2, .L209+24
 2724 019c 1A44     		add	r2, r2, r3
 2725 019e 92F91420 		ldrsb	r2, [r2, #20]
 2726 01a2 D2B2     		uxtb	r2, r2
 2727 01a4 0132     		adds	r2, r2, #1
 2728 01a6 D2B2     		uxtb	r2, r2
 2729 01a8 51B2     		sxtb	r1, r2
 2730 01aa 084A     		ldr	r2, .L209+24
 2731 01ac 1344     		add	r3, r3, r2
 2732 01ae 0A46     		mov	r2, r1
 2733 01b0 1A75     		strb	r2, [r3, #20]
 2734 01b2 23E0     		b	.L188
 2735              	.L210:
 2736              		.align	2
 2737              	.L209:
 2738 01b4 00000000 		.word	reset_last_value_flag
 2739 01b8 AC000000 		.word	last_value_encoder.10130
 2740 01bc 00000000 		.word	data_encoder_raw
 2741 01c0 00000000 		.word	g_mem
 2742 01c4 B8000000 		.word	comp_value_encoder.10131
 2743 01c8 04000000 		.word	only_first_time.10133
 2744 01cc 00000000 		.word	g_meas
 2745              	.L189:
1039:..\src/interruptions.c ****             else{
1040:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measure are too far
 2746              		.loc 1 1040 0
 2747 01d0 7B69     		ldr	r3, [r7, #20]
 2748 01d2 002B     		cmp	r3, #0
 2749 01d4 B8BF     		it	lt
 2750 01d6 5B42     		rsblt	r3, r3, #0
 2751 01d8 B3F5804F 		cmp	r3, #16384
 2752 01dc 0EDD     		ble	.L188
1041:..\src/interruptions.c ****                     error[index]++;
 2753              		.loc 1 1041 0
 2754 01de 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2755 01e2 A44A     		ldr	r2, .L211
 2756 01e4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2757 01e6 0132     		adds	r2, r2, #1
 2758 01e8 D1B2     		uxtb	r1, r2
 2759 01ea A24A     		ldr	r2, .L211
 2760 01ec D154     		strb	r1, [r2, r3]
1042:..\src/interruptions.c ****                                 
1043:..\src/interruptions.c ****                     if (error[index] < 10)
 2761              		.loc 1 1043 0
 2762 01ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2763 01f2 A04A     		ldr	r2, .L211
 2764 01f4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2765 01f6 092B     		cmp	r3, #9
 2766 01f8 40F23781 		bls	.L208
 2767              	.L188:
1044:..\src/interruptions.c ****                         // Discard
1045:..\src/interruptions.c ****                         return;
1046:..\src/interruptions.c ****                 }
1047:..\src/interruptions.c ****             }
1048:..\src/interruptions.c ****         }
1049:..\src/interruptions.c **** 
1050:..\src/interruptions.c ****         error[index] = 0;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 69


 2768              		.loc 1 1050 0
 2769 01fc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2770 0200 9C4A     		ldr	r2, .L211
 2771 0202 0021     		movs	r1, #0
 2772 0204 D154     		strb	r1, [r2, r3]
1051:..\src/interruptions.c ****         
1052:..\src/interruptions.c ****         last_value_encoder[index] = tmp_value_encoder_32;
 2773              		.loc 1 1052 0
 2774 0206 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2775 020a 9B49     		ldr	r1, .L211+4
 2776 020c BA69     		ldr	r2, [r7, #24]
 2777 020e 41F82320 		str	r2, [r1, r3, lsl #2]
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 2778              		.loc 1 1054 0
 2779 0212 BB69     		ldr	r3, [r7, #24]
 2780 0214 3B62     		str	r3, [r7, #32]
1055:..\src/interruptions.c **** 
1056:..\src/interruptions.c ****         value_encoder += ((int32)g_meas.rot[index] << 16);    
 2781              		.loc 1 1056 0
 2782 0216 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2783 021a 984A     		ldr	r2, .L211+8
 2784 021c 1344     		add	r3, r3, r2
 2785 021e 93F91430 		ldrsb	r3, [r3, #20]
 2786 0222 1B04     		lsls	r3, r3, #16
 2787 0224 3A6A     		ldr	r2, [r7, #32]
 2788 0226 1344     		add	r3, r3, r2
 2789 0228 3B62     		str	r3, [r7, #32]
1057:..\src/interruptions.c ****         
1058:..\src/interruptions.c ****         if (c_mem.m_mult[index] != 1.0) {
 2790              		.loc 1 1058 0
 2791 022a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2792 022e 944A     		ldr	r2, .L211+12
 2793 0230 1233     		adds	r3, r3, #18
 2794 0232 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2795 0236 4FF07E51 		mov	r1, #1065353216
 2796 023a 1846     		mov	r0, r3
 2797 023c FFF7FEFF 		bl	__aeabi_fcmpeq
 2798 0240 0346     		mov	r3, r0
 2799 0242 002B     		cmp	r3, #0
 2800 0244 11D1     		bne	.L191
1059:..\src/interruptions.c ****             value_encoder *= c_mem.m_mult[index];
 2801              		.loc 1 1059 0
 2802 0246 386A     		ldr	r0, [r7, #32]
 2803 0248 FFF7FEFF 		bl	__aeabi_i2f
 2804 024c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2805 0250 8B4A     		ldr	r2, .L211+12
 2806 0252 1233     		adds	r3, r3, #18
 2807 0254 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2808 0258 1946     		mov	r1, r3
 2809 025a FFF7FEFF 		bl	__aeabi_fmul
 2810 025e 0346     		mov	r3, r0
 2811 0260 1846     		mov	r0, r3
 2812 0262 FFF7FEFF 		bl	__aeabi_f2iz
 2813 0266 0346     		mov	r3, r0
 2814 0268 3B62     		str	r3, [r7, #32]
 2815              	.L191:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 70


1060:..\src/interruptions.c ****         }
1061:..\src/interruptions.c ****         
1062:..\src/interruptions.c ****         // Right / Left hand turn
1063:..\src/interruptions.c ****         if (index == 0) {
 2816              		.loc 1 1063 0
 2817 026a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2818 026e 002B     		cmp	r3, #0
 2819 0270 07D1     		bne	.L193
1064:..\src/interruptions.c ****             if (c_mem.right_left == RIGHT_HAND){
 2820              		.loc 1 1064 0
 2821 0272 834B     		ldr	r3, .L211+12
 2822 0274 93F8A630 		ldrb	r3, [r3, #166]	@ zero_extendqisi2
 2823 0278 002B     		cmp	r3, #0
 2824 027a 02D1     		bne	.L193
1065:..\src/interruptions.c ****                 value_encoder *= -1;        
 2825              		.loc 1 1065 0
 2826 027c 3B6A     		ldr	r3, [r7, #32]
 2827 027e 5B42     		negs	r3, r3
 2828 0280 3B62     		str	r3, [r7, #32]
 2829              	.L193:
1066:..\src/interruptions.c ****             }
1067:..\src/interruptions.c ****         }
1068:..\src/interruptions.c ****         
1069:..\src/interruptions.c ****         g_meas.pos[index] = value_encoder;
 2830              		.loc 1 1069 0
 2831 0282 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2832 0286 7D49     		ldr	r1, .L211+8
 2833 0288 3A6A     		ldr	r2, [r7, #32]
 2834 028a 41F82320 		str	r2, [r1, r3, lsl #2]
1070:..\src/interruptions.c ****     
1071:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[index] + 9 * vv_value[index] 
 2835              		.loc 1 1071 0
 2836 028e 3A6A     		ldr	r2, [r7, #32]
 2837 0290 1346     		mov	r3, r2
 2838 0292 9B00     		lsls	r3, r3, #2
 2839 0294 1344     		add	r3, r3, r2
 2840 0296 5B00     		lsls	r3, r3, #1
 2841 0298 1A44     		add	r2, r2, r3
 2842 029a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2843 029e 7949     		ldr	r1, .L211+16
 2844 02a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2845 02a4 6FF01101 		mvn	r1, #17
 2846 02a8 01FB03F3 		mul	r3, r1, r3
 2847 02ac D118     		adds	r1, r2, r3
 2848 02ae 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2849 02b2 754A     		ldr	r2, .L211+20
 2850 02b4 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2851 02b8 1346     		mov	r3, r2
 2852 02ba DB00     		lsls	r3, r3, #3
 2853 02bc 1344     		add	r3, r3, r2
 2854 02be CA18     		adds	r2, r1, r3
 2855 02c0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2856 02c4 7149     		ldr	r1, .L211+24
 2857 02c6 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2858 02ca 5B00     		lsls	r3, r3, #1
 2859 02cc D01A     		subs	r0, r2, r3
 2860 02ce 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 71


 2861 02d2 DB00     		lsls	r3, r3, #3
 2862 02d4 6E4A     		ldr	r2, .L211+28
 2863 02d6 1344     		add	r3, r3, r2
 2864 02d8 1946     		mov	r1, r3
 2865 02da FFF7FEFF 		bl	filter
 2866 02de 0346     		mov	r3, r0
 2867 02e0 1BB2     		sxth	r3, r3
 2868 02e2 3B61     		str	r3, [r7, #16]
1072:..\src/interruptions.c **** 
1073:..\src/interruptions.c ****         //Update current speed
1074:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 2869              		.loc 1 1074 0
 2870 02e4 3869     		ldr	r0, [r7, #16]
 2871 02e6 FFF7FEFF 		bl	__aeabi_i2f
 2872 02ea 0446     		mov	r4, r0
 2873 02ec 694B     		ldr	r3, .L211+32
 2874 02ee 1B68     		ldr	r3, [r3]	@ float
 2875 02f0 6949     		ldr	r1, .L211+36
 2876 02f2 1846     		mov	r0, r3
 2877 02f4 FFF7FEFF 		bl	__aeabi_fmul
 2878 02f8 0346     		mov	r3, r0
 2879 02fa 1946     		mov	r1, r3
 2880 02fc 2046     		mov	r0, r4
 2881 02fe FFF7FEFF 		bl	__aeabi_fdiv
 2882 0302 0346     		mov	r3, r0
 2883 0304 1846     		mov	r0, r3
 2884 0306 FFF7FEFF 		bl	__aeabi_f2iz
 2885 030a 0346     		mov	r3, r0
 2886 030c 3B61     		str	r3, [r7, #16]
1075:..\src/interruptions.c ****         g_meas.vel[index] = speed_encoder;
 2887              		.loc 1 1075 0
 2888 030e 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2889 0312 5A49     		ldr	r1, .L211+8
 2890 0314 0833     		adds	r3, r3, #8
 2891 0316 3A69     		ldr	r2, [r7, #16]
 2892 0318 41F82320 		str	r2, [r1, r3, lsl #2]
1076:..\src/interruptions.c **** 
1077:..\src/interruptions.c ****         // update old velocity and acceleration values
1078:..\src/interruptions.c ****         vvv_value[index] = vv_value[index];
 2893              		.loc 1 1078 0
 2894 031c 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2895 0320 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 2896 0324 5849     		ldr	r1, .L211+20
 2897 0326 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2898 032a 5849     		ldr	r1, .L211+24
 2899 032c 41F82320 		str	r2, [r1, r3, lsl #2]
1079:..\src/interruptions.c ****         vv_value[index] = v_value[index];
 2900              		.loc 1 1079 0
 2901 0330 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2902 0334 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 2903 0338 5249     		ldr	r1, .L211+16
 2904 033a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2905 033e 5249     		ldr	r1, .L211+20
 2906 0340 41F82320 		str	r2, [r1, r3, lsl #2]
1080:..\src/interruptions.c ****         v_value[index] = value_encoder;
 2907              		.loc 1 1080 0
 2908 0344 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 72


 2909 0348 4E49     		ldr	r1, .L211+16
 2910 034a 3A6A     		ldr	r2, [r7, #32]
 2911 034c 41F82320 		str	r2, [r1, r3, lsl #2]
1081:..\src/interruptions.c **** 
1082:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1083:..\src/interruptions.c ****         if (pos_reconstruct == FALSE){
 2912              		.loc 1 1083 0
 2913 0350 524B     		ldr	r3, .L211+40
 2914 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2915 0354 002B     		cmp	r3, #0
 2916 0356 7DD1     		bne	.L194
1084:..\src/interruptions.c ****             if (one_time_execute < 34) 
 2917              		.loc 1 1084 0
 2918 0358 514B     		ldr	r3, .L211+44
 2919 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2920 035c 212B     		cmp	r3, #33
 2921 035e 06D8     		bhi	.L195
1085:..\src/interruptions.c ****                 one_time_execute++;
 2922              		.loc 1 1085 0
 2923 0360 4F4B     		ldr	r3, .L211+44
 2924 0362 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2925 0364 0133     		adds	r3, r3, #1
 2926 0366 DAB2     		uxtb	r2, r3
 2927 0368 4D4B     		ldr	r3, .L211+44
 2928 036a 1A70     		strb	r2, [r3]
 2929 036c 72E0     		b	.L194
 2930              	.L195:
1086:..\src/interruptions.c ****             else {
1087:..\src/interruptions.c ****                 //Double encoder translation
1088:..\src/interruptions.c ****                 if (c_mem.double_encoder_on_off){
 2931              		.loc 1 1088 0
 2932 036e 444B     		ldr	r3, .L211+12
 2933 0370 93F87930 		ldrb	r3, [r3, #121]	@ zero_extendqisi2
 2934 0374 002B     		cmp	r3, #0
 2935 0376 1AD0     		beq	.L196
1089:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[0],comp_value_encoder[1]);
 2936              		.loc 1 1089 0
 2937 0378 4A4B     		ldr	r3, .L211+48
 2938 037a 1A68     		ldr	r2, [r3]
 2939 037c 494B     		ldr	r3, .L211+48
 2940 037e 5B68     		ldr	r3, [r3, #4]
 2941 0380 1946     		mov	r1, r3
 2942 0382 1046     		mov	r0, r2
 2943 0384 FFF7FEFF 		bl	calc_turns_fcn
 2944 0388 0346     		mov	r3, r0
 2945 038a FB77     		strb	r3, [r7, #31]
1090:..\src/interruptions.c ****                     if (c_mem.m_mult[0] < 0)
 2946              		.loc 1 1090 0
 2947 038c 3C4B     		ldr	r3, .L211+12
 2948 038e 9B6C     		ldr	r3, [r3, #72]	@ float
 2949 0390 4FF00001 		mov	r1, #0
 2950 0394 1846     		mov	r0, r3
 2951 0396 FFF7FEFF 		bl	__aeabi_fcmplt
 2952 039a 0346     		mov	r3, r0
 2953 039c 002B     		cmp	r3, #0
 2954 039e 03D0     		beq	.L197
1091:..\src/interruptions.c ****                         init_rot = -init_rot;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 73


 2955              		.loc 1 1091 0
 2956 03a0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2957 03a2 5B42     		negs	r3, r3
 2958 03a4 DBB2     		uxtb	r3, r3
 2959 03a6 FB77     		strb	r3, [r7, #31]
 2960              	.L197:
1092:..\src/interruptions.c ****                     
1093:..\src/interruptions.c ****                     g_meas.rot[0] = (int8)init_rot;
 2961              		.loc 1 1093 0
 2962 03a8 344A     		ldr	r2, .L211+8
 2963 03aa FB7F     		ldrb	r3, [r7, #31]
 2964 03ac 1375     		strb	r3, [r2, #20]
 2965              	.L196:
1094:..\src/interruptions.c ****                 }    
1095:..\src/interruptions.c **** 
1096:..\src/interruptions.c ****                 if (c_mem.m_mult[0] != 1.0)
 2966              		.loc 1 1096 0
 2967 03ae 344B     		ldr	r3, .L211+12
 2968 03b0 9B6C     		ldr	r3, [r3, #72]	@ float
 2969 03b2 4FF07E51 		mov	r1, #1065353216
 2970 03b6 1846     		mov	r0, r3
 2971 03b8 FFF7FEFF 		bl	__aeabi_fcmpeq
 2972 03bc 0346     		mov	r3, r0
 2973 03be 002B     		cmp	r3, #0
 2974 03c0 12D1     		bne	.L199
1097:..\src/interruptions.c ****                     g_meas.pos[0] /= c_mem.m_mult[0];
 2975              		.loc 1 1097 0
 2976 03c2 2E4B     		ldr	r3, .L211+8
 2977 03c4 1B68     		ldr	r3, [r3]
 2978 03c6 1846     		mov	r0, r3
 2979 03c8 FFF7FEFF 		bl	__aeabi_i2f
 2980 03cc 0246     		mov	r2, r0
 2981 03ce 2C4B     		ldr	r3, .L211+12
 2982 03d0 9B6C     		ldr	r3, [r3, #72]	@ float
 2983 03d2 1946     		mov	r1, r3
 2984 03d4 1046     		mov	r0, r2
 2985 03d6 FFF7FEFF 		bl	__aeabi_fdiv
 2986 03da 0346     		mov	r3, r0
 2987 03dc 1846     		mov	r0, r3
 2988 03de FFF7FEFF 		bl	__aeabi_f2iz
 2989 03e2 0246     		mov	r2, r0
 2990 03e4 254B     		ldr	r3, .L211+8
 2991 03e6 1A60     		str	r2, [r3]
 2992              	.L199:
1098:..\src/interruptions.c ****                 
1099:..\src/interruptions.c ****                 g_meas.pos[0] += (int32)(init_rot << 16);
 2993              		.loc 1 1099 0
 2994 03e8 244B     		ldr	r3, .L211+8
 2995 03ea 1A68     		ldr	r2, [r3]
 2996 03ec 97F91F30 		ldrsb	r3, [r7, #31]
 2997 03f0 1B04     		lsls	r3, r3, #16
 2998 03f2 1344     		add	r3, r3, r2
 2999 03f4 214A     		ldr	r2, .L211+8
 3000 03f6 1360     		str	r3, [r2]
1100:..\src/interruptions.c ****             
1101:..\src/interruptions.c ****                 if (c_mem.m_mult[0] != 1.0)
 3001              		.loc 1 1101 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 74


 3002 03f8 214B     		ldr	r3, .L211+12
 3003 03fa 9B6C     		ldr	r3, [r3, #72]	@ float
 3004 03fc 4FF07E51 		mov	r1, #1065353216
 3005 0400 1846     		mov	r0, r3
 3006 0402 FFF7FEFF 		bl	__aeabi_fcmpeq
 3007 0406 0346     		mov	r3, r0
 3008 0408 002B     		cmp	r3, #0
 3009 040a 12D1     		bne	.L201
1102:..\src/interruptions.c ****                     g_meas.pos[0] *= c_mem.m_mult[0];
 3010              		.loc 1 1102 0
 3011 040c 1B4B     		ldr	r3, .L211+8
 3012 040e 1B68     		ldr	r3, [r3]
 3013 0410 1846     		mov	r0, r3
 3014 0412 FFF7FEFF 		bl	__aeabi_i2f
 3015 0416 0246     		mov	r2, r0
 3016 0418 194B     		ldr	r3, .L211+12
 3017 041a 9B6C     		ldr	r3, [r3, #72]	@ float
 3018 041c 1946     		mov	r1, r3
 3019 041e 1046     		mov	r0, r2
 3020 0420 FFF7FEFF 		bl	__aeabi_fmul
 3021 0424 0346     		mov	r3, r0
 3022 0426 1846     		mov	r0, r3
 3023 0428 FFF7FEFF 		bl	__aeabi_f2iz
 3024 042c 0246     		mov	r2, r0
 3025 042e 134B     		ldr	r3, .L211+8
 3026 0430 1A60     		str	r2, [r3]
 3027              	.L201:
1103:..\src/interruptions.c ****             
1104:..\src/interruptions.c ****                 g_refNew.pos = g_meas.pos[0];
 3028              		.loc 1 1104 0
 3029 0432 124B     		ldr	r3, .L211+8
 3030 0434 1B68     		ldr	r3, [r3]
 3031 0436 1C4A     		ldr	r2, .L211+52
 3032 0438 1360     		str	r3, [r2]
1105:..\src/interruptions.c **** 
1106:..\src/interruptions.c ****                 // If necessary activate motor
1107:..\src/interruptions.c ****     			//safe_startup_motor_activation = TRUE;
1108:..\src/interruptions.c ****                 g_refNew.onoff = c_mem.activ;
 3033              		.loc 1 1108 0
 3034 043a 114B     		ldr	r3, .L211+12
 3035 043c 93F83420 		ldrb	r2, [r3, #52]	@ zero_extendqisi2
 3036 0440 194B     		ldr	r3, .L211+52
 3037 0442 1A73     		strb	r2, [r3, #12]
1109:..\src/interruptions.c ****                 MOTOR_ON_OFF_Write(g_refNew.onoff);
 3038              		.loc 1 1109 0
 3039 0444 184B     		ldr	r3, .L211+52
 3040 0446 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3041 0448 1846     		mov	r0, r3
 3042 044a FFF7FEFF 		bl	MOTOR_ON_OFF_Write
1110:..\src/interruptions.c ****                 //MOTOR_ON_OFF_Write(g_ref.onoff);
1111:..\src/interruptions.c ****                 
1112:..\src/interruptions.c ****                 pos_reconstruct = TRUE;
 3043              		.loc 1 1112 0
 3044 044e 134B     		ldr	r3, .L211+40
 3045 0450 0122     		movs	r2, #1
 3046 0452 1A70     		strb	r2, [r3]
 3047              	.L194:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 75


 992:..\src/interruptions.c ****           
 3048              		.loc 1 992 0 discriminator 2
 3049 0454 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3050 0458 0133     		adds	r3, r3, #1
 3051 045a 87F82730 		strb	r3, [r7, #39]
 3052              	.L183:
 992:..\src/interruptions.c ****           
 3053              		.loc 1 992 0 is_stmt 0 discriminator 1
 3054 045e 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3055 0462 022B     		cmp	r3, #2
 3056 0464 7FF636AE 		bls	.L203
 3057 0468 00E0     		b	.L177
 3058              	.L208:
1045:..\src/interruptions.c ****                 }
 3059              		.loc 1 1045 0 is_stmt 1
 3060 046a 00BF     		nop
 3061              	.L177:
1113:..\src/interruptions.c ****             }
1114:..\src/interruptions.c ****         }
1115:..\src/interruptions.c ****     } 
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c **** /*	
1118:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1119:..\src/interruptions.c ****     if (safe_startup_motor_activation){
1120:..\src/interruptions.c ****         count_startup_motor++;
1121:..\src/interruptions.c ****         if (count_startup_motor >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                          
1122:..\src/interruptions.c ****             g_refNew.pos = 0;
1123:..\src/interruptions.c ****             
1124:..\src/interruptions.c ****             g_refNew.onoff = c_mem.activ;
1125:..\src/interruptions.c ****             MOTOR_ON_OFF_Write(g_refNew.onoff);
1126:..\src/interruptions.c ****             
1127:..\src/interruptions.c ****             safe_startup_motor_activation = FALSE;
1128:..\src/interruptions.c ****         }
1129:..\src/interruptions.c ****     }
1130:..\src/interruptions.c **** */ 
1131:..\src/interruptions.c **** }
 3062              		.loc 1 1131 0
 3063 046c 2C37     		adds	r7, r7, #44
 3064              		.cfi_def_cfa_offset 12
 3065 046e BD46     		mov	sp, r7
 3066              		.cfi_def_cfa_register 13
 3067              		@ sp needed
 3068 0470 90BD     		pop	{r4, r7, pc}
 3069              	.L212:
 3070 0472 00BF     		.align	2
 3071              	.L211:
 3072 0474 C4000000 		.word	error.10132
 3073 0478 AC000000 		.word	last_value_encoder.10130
 3074 047c 00000000 		.word	g_meas
 3075 0480 00000000 		.word	c_mem
 3076 0484 C8000000 		.word	v_value.10136
 3077 0488 D4000000 		.word	vv_value.10137
 3078 048c E0000000 		.word	vvv_value.10138
 3079 0490 00000000 		.word	filt_vel
 3080 0494 00000000 		.word	cycle_time
 3081 0498 0000C040 		.word	1086324736
 3082 049c EC000000 		.word	pos_reconstruct.10135
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 76


 3083 04a0 ED000000 		.word	one_time_execute.10134
 3084 04a4 B8000000 		.word	comp_value_encoder.10131
 3085 04a8 00000000 		.word	g_refNew
 3086              		.cfi_endproc
 3087              	.LFE69:
 3088              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 3089              		.section	.text.analog_read_end,"ax",%progbits
 3090              		.align	2
 3091              		.global	analog_read_end
 3092              		.thumb
 3093              		.thumb_func
 3094              		.type	analog_read_end, %function
 3095              	analog_read_end:
 3096              	.LFB70:
1132:..\src/interruptions.c **** 
1133:..\src/interruptions.c **** //==============================================================================
1134:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1135:..\src/interruptions.c **** //==============================================================================
1136:..\src/interruptions.c **** 
1137:..\src/interruptions.c **** void analog_read_end() {
 3097              		.loc 1 1137 0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 8
 3100              		@ frame_needed = 1, uses_anonymous_args = 0
 3101 0000 90B5     		push	{r4, r7, lr}
 3102              		.cfi_def_cfa_offset 12
 3103              		.cfi_offset 4, -12
 3104              		.cfi_offset 7, -8
 3105              		.cfi_offset 14, -4
 3106 0002 83B0     		sub	sp, sp, #12
 3107              		.cfi_def_cfa_offset 24
 3108 0004 00AF     		add	r7, sp, #0
 3109              		.cfi_def_cfa_register 7
1138:..\src/interruptions.c **** 
1139:..\src/interruptions.c ****     /* =========================================================================
1140:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1141:..\src/interruptions.c ****     /
1142:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1143:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1144:..\src/interruptions.c ****     /
1145:..\src/interruptions.c ****     /   Definition:
1146:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1147:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1148:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1149:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1150:..\src/interruptions.c ****     /
1151:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1152:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1153:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1154:..\src/interruptions.c ****     /  =========================================================================
1155:..\src/interruptions.c ****     */
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****     int32 CYDATA i_aux;
1158:..\src/interruptions.c **** 
1159:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1160:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1161:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 77


1162:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1163:..\src/interruptions.c ****     static uint16 count = 0;
1164:..\src/interruptions.c ****     static uint32 v_count = 0;
1165:..\src/interruptions.c ****     
1166:..\src/interruptions.c ****     // Wait for conversion end
1167:..\src/interruptions.c ****     
1168:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 3110              		.loc 1 1168 0
 3111 0006 08E0     		b	.L214
 3112              	.L215:
1169:..\src/interruptions.c ****         
1170:..\src/interruptions.c ****         if (interrupt_flag){
 3113              		.loc 1 1170 0
 3114 0008 9A4B     		ldr	r3, .L288
 3115 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3116 000c 002B     		cmp	r3, #0
 3117 000e 04D0     		beq	.L214
1171:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3118              		.loc 1 1171 0
 3119 0010 984B     		ldr	r3, .L288
 3120 0012 0022     		movs	r2, #0
 3121 0014 1A70     		strb	r2, [r3]
1172:..\src/interruptions.c ****             interrupt_manager();
 3122              		.loc 1 1172 0
 3123 0016 FFF7FEFF 		bl	interrupt_manager
 3124              	.L214:
1168:..\src/interruptions.c ****         
 3125              		.loc 1 1168 0
 3126 001a FFF7FEFF 		bl	ADC_STATUS_Read
 3127 001e 0346     		mov	r3, r0
 3128 0020 002B     		cmp	r3, #0
 3129 0022 F1D0     		beq	.L215
1173:..\src/interruptions.c ****         }
1174:..\src/interruptions.c ****     }
1175:..\src/interruptions.c ****     
1176:..\src/interruptions.c ****     // Convert tension read
1177:..\src/interruptions.c ****     dev_tension = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 3130              		.loc 1 1177 0
 3131 0024 944B     		ldr	r3, .L288+4
 3132 0026 B3F90030 		ldrsh	r3, [r3]
 3133 002a A3F25563 		subw	r3, r3, #1621
 3134 002e 40F2C672 		movw	r2, #1990
 3135 0032 02FB03F3 		mul	r3, r2, r3
 3136 0036 DB11     		asrs	r3, r3, #7
 3137 0038 904A     		ldr	r2, .L288+8
 3138 003a 1360     		str	r3, [r2]
1178:..\src/interruptions.c ****     
1179:..\src/interruptions.c ****     if (interrupt_flag){
 3139              		.loc 1 1179 0
 3140 003c 8D4B     		ldr	r3, .L288
 3141 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3142 0040 002B     		cmp	r3, #0
 3143 0042 04D0     		beq	.L216
1180:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 3144              		.loc 1 1180 0
 3145 0044 8B4B     		ldr	r3, .L288
 3146 0046 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 78


 3147 0048 1A70     		strb	r2, [r3]
1181:..\src/interruptions.c ****         interrupt_manager();
 3148              		.loc 1 1181 0
 3149 004a FFF7FEFF 		bl	interrupt_manager
 3150              	.L216:
1182:..\src/interruptions.c ****     }
1183:..\src/interruptions.c ****     
1184:..\src/interruptions.c ****     // VOLTAGE READING
1185:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1186:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1187:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1188:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1189:..\src/interruptions.c ****     
1190:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 3151              		.loc 1 1190 0
 3152 004e 8C4B     		ldr	r3, .L288+12
 3153 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3154 0052 002B     		cmp	r3, #0
 3155 0054 2BD0     		beq	.L217
 3156              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3157 0056 8B4B     		ldr	r3, .L288+16
 3158 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3159 005a 002B     		cmp	r3, #0
 3160 005c 27D0     		beq	.L217
1191:..\src/interruptions.c ****         count = count + 1;
 3161              		.loc 1 1191 0 is_stmt 1
 3162 005e 8A4B     		ldr	r3, .L288+20
 3163 0060 1B88     		ldrh	r3, [r3]
 3164 0062 0133     		adds	r3, r3, #1
 3165 0064 9AB2     		uxth	r2, r3
 3166 0066 884B     		ldr	r3, .L288+20
 3167 0068 1A80     		strh	r2, [r3]	@ movhi
1192:..\src/interruptions.c ****         
1193:..\src/interruptions.c ****         if (count == 1000){
 3168              		.loc 1 1193 0
 3169 006a 874B     		ldr	r3, .L288+20
 3170 006c 1B88     		ldrh	r3, [r3]
 3171 006e B3F57A7F 		cmp	r3, #1000
 3172 0072 1CD1     		bne	.L217
1194:..\src/interruptions.c ****             if (dev_tension < 9000) {   // 8 V case
 3173              		.loc 1 1194 0
 3174 0074 814B     		ldr	r3, .L288+8
 3175 0076 1B68     		ldr	r3, [r3]
 3176 0078 42F22732 		movw	r2, #8999
 3177 007c 9342     		cmp	r3, r2
 3178 007e 04DC     		bgt	.L218
1195:..\src/interruptions.c ****                 pow_tension = 8000;
 3179              		.loc 1 1195 0
 3180 0080 824B     		ldr	r3, .L288+24
 3181 0082 4FF4FA52 		mov	r2, #8000
 3182 0086 1A60     		str	r2, [r3]
 3183 0088 0EE0     		b	.L219
 3184              	.L218:
1196:..\src/interruptions.c ****             }
1197:..\src/interruptions.c ****             else {      // 12 V - 24 V cases
1198:..\src/interruptions.c ****                 if (dev_tension < 13000) {
 3185              		.loc 1 1198 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 79


 3186 008a 7C4B     		ldr	r3, .L288+8
 3187 008c 1B68     		ldr	r3, [r3]
 3188 008e 43F2C722 		movw	r2, #12999
 3189 0092 9342     		cmp	r3, r2
 3190 0094 04DC     		bgt	.L220
1199:..\src/interruptions.c ****                     pow_tension = 12000;
 3191              		.loc 1 1199 0
 3192 0096 7D4B     		ldr	r3, .L288+24
 3193 0098 42F6E062 		movw	r2, #12000
 3194 009c 1A60     		str	r2, [r3]
 3195 009e 03E0     		b	.L219
 3196              	.L220:
1200:..\src/interruptions.c ****                 }
1201:..\src/interruptions.c ****                 else
1202:..\src/interruptions.c ****                     pow_tension = 24000;
 3197              		.loc 1 1202 0
 3198 00a0 7A4B     		ldr	r3, .L288+24
 3199 00a2 45F6C052 		movw	r2, #24000
 3200 00a6 1A60     		str	r2, [r3]
 3201              	.L219:
1203:..\src/interruptions.c ****             }
1204:..\src/interruptions.c **** 
1205:..\src/interruptions.c ****             first_tension_valid = FALSE;
 3202              		.loc 1 1205 0
 3203 00a8 754B     		ldr	r3, .L288+12
 3204 00aa 0022     		movs	r2, #0
 3205 00ac 1A70     		strb	r2, [r3]
 3206              	.L217:
1206:..\src/interruptions.c ****         }
1207:..\src/interruptions.c ****     }
1208:..\src/interruptions.c **** 
1209:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1210:..\src/interruptions.c **** 
1211:..\src/interruptions.c ****     if (dev_tension < 7000) {       // Voltage reading (Low voltage condition)
 3207              		.loc 1 1211 0
 3208 00ae 734B     		ldr	r3, .L288+8
 3209 00b0 1B68     		ldr	r3, [r3]
 3210 00b2 41F65732 		movw	r2, #6999
 3211 00b6 9342     		cmp	r3, r2
 3212 00b8 3ADC     		bgt	.L221
1212:..\src/interruptions.c ****         // PSoC is powered through uUSB
1213:..\src/interruptions.c ****         
1214:..\src/interruptions.c ****         tension_valid = FALSE;
 3213              		.loc 1 1214 0
 3214 00ba 724B     		ldr	r3, .L288+16
 3215 00bc 0022     		movs	r2, #0
 3216 00be 1A70     		strb	r2, [r3]
1215:..\src/interruptions.c ****             
1216:..\src/interruptions.c ****         if (interrupt_flag){
 3217              		.loc 1 1216 0
 3218 00c0 6C4B     		ldr	r3, .L288
 3219 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3220 00c4 002B     		cmp	r3, #0
 3221 00c6 04D0     		beq	.L222
1217:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3222              		.loc 1 1217 0
 3223 00c8 6A4B     		ldr	r3, .L288
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 80


 3224 00ca 0022     		movs	r2, #0
 3225 00cc 1A70     		strb	r2, [r3]
1218:..\src/interruptions.c ****             interrupt_manager();
 3226              		.loc 1 1218 0
 3227 00ce FFF7FEFF 		bl	interrupt_manager
 3228              	.L222:
1219:..\src/interruptions.c ****         }
1220:..\src/interruptions.c ****         
1221:..\src/interruptions.c ****         if (c_mem.emg_calibration_flag) {
 3229              		.loc 1 1221 0
 3230 00d2 6F4B     		ldr	r3, .L288+28
 3231 00d4 93F86E30 		ldrb	r3, [r3, #110]	@ zero_extendqisi2
 3232 00d8 002B     		cmp	r3, #0
 3233 00da 1BD0     		beq	.L223
1222:..\src/interruptions.c ****             if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3234              		.loc 1 1222 0
 3235 00dc 6C4B     		ldr	r3, .L288+28
 3236 00de 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 3237 00e2 022B     		cmp	r3, #2
 3238 00e4 0ED0     		beq	.L224
1223:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3239              		.loc 1 1223 0 discriminator 1
 3240 00e6 6A4B     		ldr	r3, .L288+28
 3241 00e8 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1222:..\src/interruptions.c ****             if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3242              		.loc 1 1222 0 discriminator 1
 3243 00ec 032B     		cmp	r3, #3
 3244 00ee 09D0     		beq	.L224
1224:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3245              		.loc 1 1224 0
 3246 00f0 674B     		ldr	r3, .L288+28
 3247 00f2 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1223:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3248              		.loc 1 1223 0
 3249 00f6 042B     		cmp	r3, #4
 3250 00f8 04D0     		beq	.L224
1225:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 3251              		.loc 1 1225 0
 3252 00fa 654B     		ldr	r3, .L288+28
 3253 00fc 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1224:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3254              		.loc 1 1224 0
 3255 0100 052B     		cmp	r3, #5
 3256 0102 07D1     		bne	.L223
 3257              	.L224:
1226:..\src/interruptions.c ****                 g_ref.onoff = 0x00;
 3258              		.loc 1 1226 0
 3259 0104 634B     		ldr	r3, .L288+32
 3260 0106 0022     		movs	r2, #0
 3261 0108 1A73     		strb	r2, [r3, #12]
1227:..\src/interruptions.c ****                 MOTOR_ON_OFF_Write(g_ref.onoff);
 3262              		.loc 1 1227 0
 3263 010a 624B     		ldr	r3, .L288+32
 3264 010c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3265 010e 1846     		mov	r0, r3
 3266 0110 FFF7FEFF 		bl	MOTOR_ON_OFF_Write
 3267              	.L223:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 81


1228:..\src/interruptions.c ****             }
1229:..\src/interruptions.c ****         }
1230:..\src/interruptions.c ****         
1231:..\src/interruptions.c ****         // Assign dev_tension     
1232:..\src/interruptions.c ****         dev_tension = 5000;
 3268              		.loc 1 1232 0
 3269 0114 594B     		ldr	r3, .L288+8
 3270 0116 41F28832 		movw	r2, #5000
 3271 011a 1A60     		str	r2, [r3]
1233:..\src/interruptions.c **** 
1234:..\src/interruptions.c ****         // Reset current
1235:..\src/interruptions.c ****         g_meas.curr = 0;
 3272              		.loc 1 1235 0
 3273 011c 5E4B     		ldr	r3, .L288+36
 3274 011e 0022     		movs	r2, #0
 3275 0120 DA60     		str	r2, [r3, #12]
1236:..\src/interruptions.c **** 
1237:..\src/interruptions.c ****         // Reset emg
1238:..\src/interruptions.c ****         g_meas.emg[0] = 0;
 3276              		.loc 1 1238 0
 3277 0122 5D4B     		ldr	r3, .L288+36
 3278 0124 0022     		movs	r2, #0
 3279 0126 9A61     		str	r2, [r3, #24]
1239:..\src/interruptions.c ****         g_meas.emg[1] = 0;
 3280              		.loc 1 1239 0
 3281 0128 5B4B     		ldr	r3, .L288+36
 3282 012a 0022     		movs	r2, #0
 3283 012c DA61     		str	r2, [r3, #28]
 3284 012e 71E0     		b	.L225
 3285              	.L221:
1240:..\src/interruptions.c ****         
1241:..\src/interruptions.c ****     }
1242:..\src/interruptions.c ****     else {
1243:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1244:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1245:..\src/interruptions.c ****         
1246:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1247:..\src/interruptions.c ****         
1248:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 3286              		.loc 1 1248 0
 3287 0130 5A4B     		ldr	r3, .L288+40
 3288 0132 1B68     		ldr	r3, [r3]
 3289 0134 B3F57A7F 		cmp	r3, #1000
 3290 0138 0DD1     		bne	.L226
 3291              		.loc 1 1248 0 is_stmt 0 discriminator 1
 3292 013a 524B     		ldr	r3, .L288+16
 3293 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3294 013e 002B     		cmp	r3, #0
 3295 0140 09D1     		bne	.L226
1249:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1250:..\src/interruptions.c ****             tension_valid = TRUE;   
 3296              		.loc 1 1250 0 is_stmt 1
 3297 0142 504B     		ldr	r3, .L288+16
 3298 0144 0122     		movs	r2, #1
 3299 0146 1A70     		strb	r2, [r3]
1251:..\src/interruptions.c ****             count = 0;
 3300              		.loc 1 1251 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 82


 3301 0148 4F4B     		ldr	r3, .L288+20
 3302 014a 0022     		movs	r2, #0
 3303 014c 1A80     		strh	r2, [r3]	@ movhi
1252:..\src/interruptions.c ****             v_count = 0;
 3304              		.loc 1 1252 0
 3305 014e 534B     		ldr	r3, .L288+40
 3306 0150 0022     		movs	r2, #0
 3307 0152 1A60     		str	r2, [r3]
 3308 0154 12E0     		b	.L227
 3309              	.L226:
1253:..\src/interruptions.c ****         }
1254:..\src/interruptions.c ****         else {  
1255:..\src/interruptions.c ****             // wait for battery voltage stabilization
1256:..\src/interruptions.c ****             if (v_count < 1000) {
 3310              		.loc 1 1256 0
 3311 0156 514B     		ldr	r3, .L288+40
 3312 0158 1B68     		ldr	r3, [r3]
 3313 015a B3F57A7F 		cmp	r3, #1000
 3314 015e 04D2     		bcs	.L228
1257:..\src/interruptions.c ****                 v_count = v_count + 1;
 3315              		.loc 1 1257 0
 3316 0160 4E4B     		ldr	r3, .L288+40
 3317 0162 1B68     		ldr	r3, [r3]
 3318 0164 0133     		adds	r3, r3, #1
 3319 0166 4D4A     		ldr	r2, .L288+40
 3320 0168 1360     		str	r3, [r2]
 3321              	.L228:
1258:..\src/interruptions.c ****             }
1259:..\src/interruptions.c ****             dev_tension_f = filter(dev_tension, &filt_v);
 3322              		.loc 1 1259 0
 3323 016a 444B     		ldr	r3, .L288+8
 3324 016c 1B68     		ldr	r3, [r3]
 3325 016e 4C49     		ldr	r1, .L288+44
 3326 0170 1846     		mov	r0, r3
 3327 0172 FFF7FEFF 		bl	filter
 3328 0176 0246     		mov	r2, r0
 3329 0178 4A4B     		ldr	r3, .L288+48
 3330 017a 1A60     		str	r2, [r3]
 3331              	.L227:
1260:..\src/interruptions.c ****         }
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****         if(g_mem.activate_pwm_rescaling)        //pwm rescaling is activated
 3332              		.loc 1 1262 0
 3333 017c 4A4B     		ldr	r3, .L288+52
 3334 017e 93F87B30 		ldrb	r3, [r3, #123]	@ zero_extendqisi2
 3335 0182 002B     		cmp	r3, #0
 3336 0184 01D0     		beq	.L229
1263:..\src/interruptions.c ****             pwm_limit_search();                 //only for 12V motor
 3337              		.loc 1 1263 0
 3338 0186 FFF7FEFF 		bl	pwm_limit_search
 3339              	.L229:
1264:..\src/interruptions.c **** 
1265:..\src/interruptions.c ****         // Filter and Set currents
1266:..\src/interruptions.c ****         g_meas.curr = filter((int16) (((int32)(ADC_buf[1] - 1648) * 22634) >> 13) * pwm_sign, &filt
 3340              		.loc 1 1266 0
 3341 018a 3B4B     		ldr	r3, .L288+4
 3342 018c B3F90230 		ldrsh	r3, [r3, #2]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 83


 3343 0190 A3F5CE63 		sub	r3, r3, #1648
 3344 0194 45F66A02 		movw	r2, #22634
 3345 0198 02FB03F3 		mul	r3, r2, r3
 3346 019c 5B13     		asrs	r3, r3, #13
 3347 019e 1BB2     		sxth	r3, r3
 3348 01a0 1A46     		mov	r2, r3
 3349 01a2 424B     		ldr	r3, .L288+56
 3350 01a4 93F90030 		ldrsb	r3, [r3]
 3351 01a8 03FB02F3 		mul	r3, r3, r2
 3352 01ac 4049     		ldr	r1, .L288+60
 3353 01ae 1846     		mov	r0, r3
 3354 01b0 FFF7FEFF 		bl	filter
 3355 01b4 0246     		mov	r2, r0
 3356 01b6 384B     		ldr	r3, .L288+36
 3357 01b8 DA60     		str	r2, [r3, #12]
1267:..\src/interruptions.c ****         
1268:..\src/interruptions.c **** 		// Calculate current estimation and put it in the second part of the current measurement array;
1269:..\src/interruptions.c **** 		g_meas.estim_curr = (int16) filter(((int32) g_meas.curr) - curr_estim(g_meas.pos[0] >> g_mem.res[
 3358              		.loc 1 1269 0
 3359 01ba 374B     		ldr	r3, .L288+36
 3360 01bc DC68     		ldr	r4, [r3, #12]
 3361 01be 364B     		ldr	r3, .L288+36
 3362 01c0 1B68     		ldr	r3, [r3]
 3363 01c2 394A     		ldr	r2, .L288+52
 3364 01c4 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 3365 01c8 43FA02F0 		asr	r0, r3, r2
 3366 01cc 324B     		ldr	r3, .L288+36
 3367 01ce 1B6A     		ldr	r3, [r3, #32]
 3368 01d0 354A     		ldr	r2, .L288+52
 3369 01d2 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 3370 01d6 43FA02F1 		asr	r1, r3, r2
 3371 01da 2E4B     		ldr	r3, .L288+32
 3372 01dc 1B68     		ldr	r3, [r3]
 3373 01de 324A     		ldr	r2, .L288+52
 3374 01e0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 3375 01e4 1341     		asrs	r3, r3, r2
 3376 01e6 1A46     		mov	r2, r3
 3377 01e8 FFF7FEFF 		bl	curr_estim
 3378 01ec 0346     		mov	r3, r0
 3379 01ee E31A     		subs	r3, r4, r3
 3380 01f0 3049     		ldr	r1, .L288+64
 3381 01f2 1846     		mov	r0, r3
 3382 01f4 FFF7FEFF 		bl	filter
 3383 01f8 0346     		mov	r3, r0
 3384 01fa 1BB2     		sxth	r3, r3
 3385 01fc 1A46     		mov	r2, r3
 3386 01fe 264B     		ldr	r3, .L288+36
 3387 0200 1A61     		str	r2, [r3, #16]
1270:..\src/interruptions.c **** 
1271:..\src/interruptions.c ****         // Check Interrupt 
1272:..\src/interruptions.c ****     
1273:..\src/interruptions.c ****         if (interrupt_flag){
 3388              		.loc 1 1273 0
 3389 0202 1C4B     		ldr	r3, .L288
 3390 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3391 0206 002B     		cmp	r3, #0
 3392 0208 04D0     		beq	.L225
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 84


1274:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3393              		.loc 1 1274 0
 3394 020a 1A4B     		ldr	r3, .L288
 3395 020c 0022     		movs	r2, #0
 3396 020e 1A70     		strb	r2, [r3]
1275:..\src/interruptions.c ****             interrupt_manager();
 3397              		.loc 1 1275 0
 3398 0210 FFF7FEFF 		bl	interrupt_manager
 3399              	.L225:
1276:..\src/interruptions.c ****         }
1277:..\src/interruptions.c **** 
1278:..\src/interruptions.c ****     }
1279:..\src/interruptions.c ****     
1280:..\src/interruptions.c ****     // Read EMG (if necessary)
1281:..\src/interruptions.c ****     if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3400              		.loc 1 1281 0
 3401 0214 1E4B     		ldr	r3, .L288+28
 3402 0216 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 3403 021a 022B     		cmp	r3, #2
 3404 021c 0FD0     		beq	.L230
1282:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3405              		.loc 1 1282 0 discriminator 1
 3406 021e 1C4B     		ldr	r3, .L288+28
 3407 0220 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1281:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3408              		.loc 1 1281 0 discriminator 1
 3409 0224 032B     		cmp	r3, #3
 3410 0226 0AD0     		beq	.L230
1283:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3411              		.loc 1 1283 0
 3412 0228 194B     		ldr	r3, .L288+28
 3413 022a 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1282:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3414              		.loc 1 1282 0
 3415 022e 042B     		cmp	r3, #4
 3416 0230 05D0     		beq	.L230
1284:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 3417              		.loc 1 1284 0
 3418 0232 174B     		ldr	r3, .L288+28
 3419 0234 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1283:..\src/interruptions.c ****         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3420              		.loc 1 1283 0
 3421 0238 052B     		cmp	r3, #5
 3422 023a 40F05C82 		bne	.L278
 3423              	.L230:
1285:..\src/interruptions.c ****         
1286:..\src/interruptions.c ****         // if calibration is not needed go to "normal execution"
1287:..\src/interruptions.c ****         if (!c_mem.emg_calibration_flag){
 3424              		.loc 1 1287 0
 3425 023e 144B     		ldr	r3, .L288+28
 3426 0240 93F86E30 		ldrb	r3, [r3, #110]	@ zero_extendqisi2
 3427 0244 002B     		cmp	r3, #0
 3428 0246 05D1     		bne	.L232
1288:..\src/interruptions.c ****             emg_1_status = NORMAL; // normal execution
 3429              		.loc 1 1288 0
 3430 0248 1B4B     		ldr	r3, .L288+68
 3431 024a 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 85


 3432 024c 1A70     		strb	r2, [r3]
1289:..\src/interruptions.c ****             emg_2_status = NORMAL; // normal execution
 3433              		.loc 1 1289 0
 3434 024e 1B4B     		ldr	r3, .L288+72
 3435 0250 0022     		movs	r2, #0
 3436 0252 1A70     		strb	r2, [r3]
 3437              	.L232:
1290:..\src/interruptions.c ****         }
1291:..\src/interruptions.c **** 
1292:..\src/interruptions.c ****         // EMG 1 calibration state machine
1293:..\src/interruptions.c ****        
1294:..\src/interruptions.c ****         // Calibration state machine
1295:..\src/interruptions.c ****         switch(emg_1_status) {
 3438              		.loc 1 1295 0
 3439 0254 184B     		ldr	r3, .L288+68
 3440 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3441 0258 032B     		cmp	r3, #3
 3442 025a 00F2EE80 		bhi	.L279
 3443 025e 01A2     		adr	r2, .L235
 3444 0260 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3445              		.p2align 2
 3446              	.L235:
 3447 0264 C1020000 		.word	.L234+1
 3448 0268 49030000 		.word	.L236+1
 3449 026c 5D030000 		.word	.L237+1
 3450 0270 99030000 		.word	.L238+1
 3451              		.p2align 1
 3452              	.L289:
 3453              		.align	2
 3454              	.L288:
 3455 0274 00000000 		.word	interrupt_flag
 3456 0278 00000000 		.word	ADC_buf
 3457 027c 00000000 		.word	dev_tension
 3458 0280 05000000 		.word	first_tension_valid.10153
 3459 0284 00000000 		.word	tension_valid
 3460 0288 EE000000 		.word	count.10154
 3461 028c 00000000 		.word	pow_tension
 3462 0290 00000000 		.word	c_mem
 3463 0294 00000000 		.word	g_ref
 3464 0298 00000000 		.word	g_meas
 3465 029c F0000000 		.word	v_count.10155
 3466 02a0 00000000 		.word	filt_v
 3467 02a4 00000000 		.word	dev_tension_f
 3468 02a8 00000000 		.word	g_mem
 3469 02ac 00000000 		.word	pwm_sign
 3470 02b0 00000000 		.word	filt_i
 3471 02b4 00000000 		.word	filt_curr_diff
 3472 02b8 00000000 		.word	emg_1_status
 3473 02bc 00000000 		.word	emg_2_status
 3474              	.L234:
1296:..\src/interruptions.c ****             case NORMAL: // normal execution
1297:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.switch_emg] - 1639) * 87) >> 5;  //map range to 
 3475              		.loc 1 1297 0
 3476 02c0 A74B     		ldr	r3, .L290
 3477 02c2 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3478 02c6 0233     		adds	r3, r3, #2
 3479 02c8 A64A     		ldr	r2, .L290+4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 86


 3480 02ca 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3481 02ce A3F26763 		subw	r3, r3, #1639
 3482 02d2 5722     		movs	r2, #87
 3483 02d4 02FB03F3 		mul	r3, r2, r3
 3484 02d8 5B11     		asrs	r3, r3, #5
 3485 02da 7B60     		str	r3, [r7, #4]
1298:..\src/interruptions.c ****                 //i_aux = (int32)(ADC_buf[2 + c_mem.switch_emg]);
1299:..\src/interruptions.c ****                 if (i_aux < 0) 
 3486              		.loc 1 1299 0
 3487 02dc 7B68     		ldr	r3, [r7, #4]
 3488 02de 002B     		cmp	r3, #0
 3489 02e0 01DA     		bge	.L239
1300:..\src/interruptions.c ****                     i_aux = 0;
 3490              		.loc 1 1300 0
 3491 02e2 0023     		movs	r3, #0
 3492 02e4 7B60     		str	r3, [r7, #4]
 3493              	.L239:
1301:..\src/interruptions.c ****                 i_aux = filter(i_aux, &filt_emg1);
 3494              		.loc 1 1301 0
 3495 02e6 A049     		ldr	r1, .L290+8
 3496 02e8 7868     		ldr	r0, [r7, #4]
 3497 02ea FFF7FEFF 		bl	filter
 3498 02ee 7860     		str	r0, [r7, #4]
1302:..\src/interruptions.c ****                 i_aux = (i_aux << 10) / g_mem.emg_max_value[0];
 3499              		.loc 1 1302 0
 3500 02f0 7B68     		ldr	r3, [r7, #4]
 3501 02f2 9B02     		lsls	r3, r3, #10
 3502 02f4 1A46     		mov	r2, r3
 3503 02f6 9D4B     		ldr	r3, .L290+12
 3504 02f8 1B6F     		ldr	r3, [r3, #112]
 3505 02fa B2FBF3F3 		udiv	r3, r2, r3
 3506 02fe 7B60     		str	r3, [r7, #4]
1303:..\src/interruptions.c ****     
1304:..\src/interruptions.c ****                 if (interrupt_flag){
 3507              		.loc 1 1304 0
 3508 0300 9B4B     		ldr	r3, .L290+16
 3509 0302 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3510 0304 002B     		cmp	r3, #0
 3511 0306 04D0     		beq	.L240
1305:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3512              		.loc 1 1305 0
 3513 0308 994B     		ldr	r3, .L290+16
 3514 030a 0022     		movs	r2, #0
 3515 030c 1A70     		strb	r2, [r3]
1306:..\src/interruptions.c ****                     interrupt_manager();
 3516              		.loc 1 1306 0
 3517 030e FFF7FEFF 		bl	interrupt_manager
 3518              	.L240:
1307:..\src/interruptions.c ****                 }
1308:..\src/interruptions.c ****                 //Saturation
1309:..\src/interruptions.c ****                 if (i_aux < 0)
 3519              		.loc 1 1309 0
 3520 0312 7B68     		ldr	r3, [r7, #4]
 3521 0314 002B     		cmp	r3, #0
 3522 0316 02DA     		bge	.L241
1310:..\src/interruptions.c ****                     i_aux = 0;
 3523              		.loc 1 1310 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 87


 3524 0318 0023     		movs	r3, #0
 3525 031a 7B60     		str	r3, [r7, #4]
 3526 031c 06E0     		b	.L242
 3527              	.L241:
1311:..\src/interruptions.c ****                 else 
1312:..\src/interruptions.c ****                     if (i_aux > 1024) 
 3528              		.loc 1 1312 0
 3529 031e 7B68     		ldr	r3, [r7, #4]
 3530 0320 B3F5806F 		cmp	r3, #1024
 3531 0324 02DD     		ble	.L242
1313:..\src/interruptions.c ****                         i_aux = 1024;
 3532              		.loc 1 1313 0
 3533 0326 4FF48063 		mov	r3, #1024
 3534 032a 7B60     		str	r3, [r7, #4]
 3535              	.L242:
1314:..\src/interruptions.c ****                 
1315:..\src/interruptions.c ****                 g_meas.emg[0] = i_aux;
 3536              		.loc 1 1315 0
 3537 032c 914A     		ldr	r2, .L290+20
 3538 032e 7B68     		ldr	r3, [r7, #4]
 3539 0330 9361     		str	r3, [r2, #24]
1316:..\src/interruptions.c ****     
1317:..\src/interruptions.c ****                 if (interrupt_flag){
 3540              		.loc 1 1317 0
 3541 0332 8F4B     		ldr	r3, .L290+16
 3542 0334 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3543 0336 002B     		cmp	r3, #0
 3544 0338 00F08180 		beq	.L280
1318:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3545              		.loc 1 1318 0
 3546 033c 8C4B     		ldr	r3, .L290+16
 3547 033e 0022     		movs	r2, #0
 3548 0340 1A70     		strb	r2, [r3]
1319:..\src/interruptions.c ****                     interrupt_manager();
 3549              		.loc 1 1319 0
 3550 0342 FFF7FEFF 		bl	interrupt_manager
1320:..\src/interruptions.c ****                 }
1321:..\src/interruptions.c ****                 
1322:..\src/interruptions.c ****                 break;
 3551              		.loc 1 1322 0
 3552 0346 7AE0     		b	.L280
 3553              	.L236:
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****             case RESET: // reset variables
1325:..\src/interruptions.c ****                 emg_counter_1 = 0;
 3554              		.loc 1 1325 0
 3555 0348 8B4B     		ldr	r3, .L290+24
 3556 034a 0022     		movs	r2, #0
 3557 034c 1A80     		strh	r2, [r3]	@ movhi
1326:..\src/interruptions.c ****                 g_mem.emg_max_value[0] = 0;
 3558              		.loc 1 1326 0
 3559 034e 874B     		ldr	r3, .L290+12
 3560 0350 0022     		movs	r2, #0
 3561 0352 1A67     		str	r2, [r3, #112]
1327:..\src/interruptions.c ****                 emg_1_status = DISCARD; // goto next status  
 3562              		.loc 1 1327 0
 3563 0354 894B     		ldr	r3, .L290+28
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 88


 3564 0356 0222     		movs	r2, #2
 3565 0358 1A70     		strb	r2, [r3]
1328:..\src/interruptions.c ****                 break;
 3566              		.loc 1 1328 0
 3567 035a 75E0     		b	.L244
 3568              	.L237:
1329:..\src/interruptions.c **** 
1330:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1331:..\src/interruptions.c ****                 emg_counter_1++;
 3569              		.loc 1 1331 0
 3570 035c 864B     		ldr	r3, .L290+24
 3571 035e 1B88     		ldrh	r3, [r3]
 3572 0360 0133     		adds	r3, r3, #1
 3573 0362 9AB2     		uxth	r2, r3
 3574 0364 844B     		ldr	r3, .L290+24
 3575 0366 1A80     		strh	r2, [r3]	@ movhi
1332:..\src/interruptions.c ****                 if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 3576              		.loc 1 1332 0
 3577 0368 834B     		ldr	r3, .L290+24
 3578 036a 1B88     		ldrh	r3, [r3]
 3579 036c B3F5FA7F 		cmp	r3, #500
 3580 0370 67D1     		bne	.L281
1333:..\src/interruptions.c ****                     emg_counter_1 = 0;          // reset counter
 3581              		.loc 1 1333 0
 3582 0372 814B     		ldr	r3, .L290+24
 3583 0374 0022     		movs	r2, #0
 3584 0376 1A80     		strh	r2, [r3]	@ movhi
1334:..\src/interruptions.c ****                     LED_control(1);
 3585              		.loc 1 1334 0
 3586 0378 0120     		movs	r0, #1
 3587 037a FFF7FEFF 		bl	LED_control
1335:..\src/interruptions.c **** 					
1336:..\src/interruptions.c ****                     if (interrupt_flag){
 3588              		.loc 1 1336 0
 3589 037e 7C4B     		ldr	r3, .L290+16
 3590 0380 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3591 0382 002B     		cmp	r3, #0
 3592 0384 04D0     		beq	.L246
1337:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3593              		.loc 1 1337 0
 3594 0386 7A4B     		ldr	r3, .L290+16
 3595 0388 0022     		movs	r2, #0
 3596 038a 1A70     		strb	r2, [r3]
1338:..\src/interruptions.c ****                         interrupt_manager();
 3597              		.loc 1 1338 0
 3598 038c FFF7FEFF 		bl	interrupt_manager
 3599              	.L246:
1339:..\src/interruptions.c ****                     }
1340:..\src/interruptions.c ****                     
1341:..\src/interruptions.c ****                     emg_1_status = SUM_AND_MEAN;    // sum and mean status
 3600              		.loc 1 1341 0
 3601 0390 7A4B     		ldr	r3, .L290+28
 3602 0392 0322     		movs	r2, #3
 3603 0394 1A70     		strb	r2, [r3]
1342:..\src/interruptions.c ****                 }
1343:..\src/interruptions.c ****                 break;
 3604              		.loc 1 1343 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 89


 3605 0396 54E0     		b	.L281
 3606              	.L238:
1344:..\src/interruptions.c **** 
1345:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1346:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1347:..\src/interruptions.c ****                 emg_counter_1++;
 3607              		.loc 1 1347 0
 3608 0398 774B     		ldr	r3, .L290+24
 3609 039a 1B88     		ldrh	r3, [r3]
 3610 039c 0133     		adds	r3, r3, #1
 3611 039e 9AB2     		uxth	r2, r3
 3612 03a0 754B     		ldr	r3, .L290+24
 3613 03a2 1A80     		strh	r2, [r3]	@ movhi
1348:..\src/interruptions.c ****                 if (ADC_buf[2 + c_mem.switch_emg] < 0) 
 3614              		.loc 1 1348 0
 3615 03a4 6E4B     		ldr	r3, .L290
 3616 03a6 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3617 03aa 0233     		adds	r3, r3, #2
 3618 03ac 6D4A     		ldr	r2, .L290+4
 3619 03ae 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3620 03b2 002B     		cmp	r3, #0
 3621 03b4 07DA     		bge	.L247
1349:..\src/interruptions.c ****                     ADC_buf[2 + c_mem.switch_emg] = 0;
 3622              		.loc 1 1349 0
 3623 03b6 6A4B     		ldr	r3, .L290
 3624 03b8 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3625 03bc 0233     		adds	r3, r3, #2
 3626 03be 694A     		ldr	r2, .L290+4
 3627 03c0 0021     		movs	r1, #0
 3628 03c2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 3629              	.L247:
1350:..\src/interruptions.c ****                 g_mem.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.switch_emg], &filt_emg1);
 3630              		.loc 1 1350 0
 3631 03c6 664B     		ldr	r3, .L290
 3632 03c8 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3633 03cc 0233     		adds	r3, r3, #2
 3634 03ce 654A     		ldr	r2, .L290+4
 3635 03d0 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3636 03d4 6449     		ldr	r1, .L290+8
 3637 03d6 1846     		mov	r0, r3
 3638 03d8 FFF7FEFF 		bl	filter
 3639 03dc 0246     		mov	r2, r0
 3640 03de 634B     		ldr	r3, .L290+12
 3641 03e0 1B6F     		ldr	r3, [r3, #112]
 3642 03e2 1344     		add	r3, r3, r2
 3643 03e4 614A     		ldr	r2, .L290+12
 3644 03e6 1367     		str	r3, [r2, #112]
1351:..\src/interruptions.c ****                 
1352:..\src/interruptions.c ****                 if (interrupt_flag){
 3645              		.loc 1 1352 0
 3646 03e8 614B     		ldr	r3, .L290+16
 3647 03ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3648 03ec 002B     		cmp	r3, #0
 3649 03ee 04D0     		beq	.L248
1353:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3650              		.loc 1 1353 0
 3651 03f0 5F4B     		ldr	r3, .L290+16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 90


 3652 03f2 0022     		movs	r2, #0
 3653 03f4 1A70     		strb	r2, [r3]
1354:..\src/interruptions.c ****                     interrupt_manager();
 3654              		.loc 1 1354 0
 3655 03f6 FFF7FEFF 		bl	interrupt_manager
 3656              	.L248:
1355:..\src/interruptions.c ****                 }
1356:..\src/interruptions.c ****                 
1357:..\src/interruptions.c ****                 if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 3657              		.loc 1 1357 0
 3658 03fa 5F4B     		ldr	r3, .L290+24
 3659 03fc 1B88     		ldrh	r3, [r3]
 3660 03fe B3F57A7F 		cmp	r3, #1000
 3661 0402 20D1     		bne	.L282
1358:..\src/interruptions.c ****                     g_mem.emg_max_value[0] = g_mem.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // calc
 3662              		.loc 1 1358 0
 3663 0404 594B     		ldr	r3, .L290+12
 3664 0406 1B6F     		ldr	r3, [r3, #112]
 3665 0408 5D4A     		ldr	r2, .L290+32
 3666 040a A2FB0323 		umull	r2, r3, r2, r3
 3667 040e 9B09     		lsrs	r3, r3, #6
 3668 0410 564A     		ldr	r2, .L290+12
 3669 0412 1367     		str	r3, [r2, #112]
1359:..\src/interruptions.c ****     
1360:..\src/interruptions.c ****                     if (interrupt_flag){
 3670              		.loc 1 1360 0
 3671 0414 564B     		ldr	r3, .L290+16
 3672 0416 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3673 0418 002B     		cmp	r3, #0
 3674 041a 04D0     		beq	.L250
1361:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3675              		.loc 1 1361 0
 3676 041c 544B     		ldr	r3, .L290+16
 3677 041e 0022     		movs	r2, #0
 3678 0420 1A70     		strb	r2, [r3]
1362:..\src/interruptions.c ****                         interrupt_manager();
 3679              		.loc 1 1362 0
 3680 0422 FFF7FEFF 		bl	interrupt_manager
 3681              	.L250:
1363:..\src/interruptions.c ****                     }                    
1364:..\src/interruptions.c ****                     
1365:..\src/interruptions.c ****                     LED_control(0);
 3682              		.loc 1 1365 0
 3683 0426 0020     		movs	r0, #0
 3684 0428 FFF7FEFF 		bl	LED_control
1366:..\src/interruptions.c **** 					
1367:..\src/interruptions.c ****                     emg_counter_1 = 0;          // reset counter
 3685              		.loc 1 1367 0
 3686 042c 524B     		ldr	r3, .L290+24
 3687 042e 0022     		movs	r2, #0
 3688 0430 1A80     		strh	r2, [r3]	@ movhi
1368:..\src/interruptions.c **** 
1369:..\src/interruptions.c ****                     emg_1_status = NORMAL;      // goto normal execution
 3689              		.loc 1 1369 0
 3690 0432 524B     		ldr	r3, .L290+28
 3691 0434 0022     		movs	r2, #0
 3692 0436 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 91


1370:..\src/interruptions.c ****                 }
1371:..\src/interruptions.c ****                 break;
 3693              		.loc 1 1371 0
 3694 0438 05E0     		b	.L282
 3695              	.L279:
1372:..\src/interruptions.c **** 
1373:..\src/interruptions.c ****             default:
1374:..\src/interruptions.c ****                 break;
 3696              		.loc 1 1374 0
 3697 043a 00BF     		nop
 3698 043c 04E0     		b	.L244
 3699              	.L280:
1322:..\src/interruptions.c **** 
 3700              		.loc 1 1322 0
 3701 043e 00BF     		nop
 3702 0440 02E0     		b	.L244
 3703              	.L281:
1343:..\src/interruptions.c **** 
 3704              		.loc 1 1343 0
 3705 0442 00BF     		nop
 3706 0444 00E0     		b	.L244
 3707              	.L282:
1371:..\src/interruptions.c **** 
 3708              		.loc 1 1371 0
 3709 0446 00BF     		nop
 3710              	.L244:
1375:..\src/interruptions.c ****         }
1376:..\src/interruptions.c ****     
1377:..\src/interruptions.c ****         if (interrupt_flag){
 3711              		.loc 1 1377 0
 3712 0448 494B     		ldr	r3, .L290+16
 3713 044a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3714 044c 002B     		cmp	r3, #0
 3715 044e 04D0     		beq	.L251
1378:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3716              		.loc 1 1378 0
 3717 0450 474B     		ldr	r3, .L290+16
 3718 0452 0022     		movs	r2, #0
 3719 0454 1A70     		strb	r2, [r3]
1379:..\src/interruptions.c ****             interrupt_manager();
 3720              		.loc 1 1379 0
 3721 0456 FFF7FEFF 		bl	interrupt_manager
 3722              	.L251:
1380:..\src/interruptions.c ****         }
1381:..\src/interruptions.c ****         // EMG 2 calibration state machine
1382:..\src/interruptions.c ****         switch(emg_2_status) {
 3723              		.loc 1 1382 0
 3724 045a 4A4B     		ldr	r3, .L290+36
 3725 045c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3726 045e 052B     		cmp	r3, #5
 3727 0460 00F23781 		bhi	.L283
 3728 0464 01A2     		adr	r2, .L254
 3729 0466 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3730 046a 00BF     		.p2align 2
 3731              	.L254:
 3732 046c 85040000 		.word	.L253+1
 3733 0470 FB040000 		.word	.L255+1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 92


 3734 0474 21050000 		.word	.L256+1
 3735 0478 91050000 		.word	.L257+1
 3736 047c 39060000 		.word	.L258+1
 3737 0480 49060000 		.word	.L259+1
 3738              		.p2align 1
 3739              	.L253:
1383:..\src/interruptions.c ****             case NORMAL: // normal execution
1384:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.switch_emg] - 1640) * 87) >> 5;  //map range to 
 3740              		.loc 1 1384 0
 3741 0484 364B     		ldr	r3, .L290
 3742 0486 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3743 048a C3F10303 		rsb	r3, r3, #3
 3744 048e 354A     		ldr	r2, .L290+4
 3745 0490 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3746 0494 A3F5CD63 		sub	r3, r3, #1640
 3747 0498 5722     		movs	r2, #87
 3748 049a 02FB03F3 		mul	r3, r2, r3
 3749 049e 5B11     		asrs	r3, r3, #5
 3750 04a0 7B60     		str	r3, [r7, #4]
1385:..\src/interruptions.c ****                 //i_aux = (int32)(ADC_buf[3 - c_mem.switch_emg]);
1386:..\src/interruptions.c ****                     if (i_aux < 0)
 3751              		.loc 1 1386 0
 3752 04a2 7B68     		ldr	r3, [r7, #4]
 3753 04a4 002B     		cmp	r3, #0
 3754 04a6 01DA     		bge	.L260
1387:..\src/interruptions.c ****                         i_aux = 0;
 3755              		.loc 1 1387 0
 3756 04a8 0023     		movs	r3, #0
 3757 04aa 7B60     		str	r3, [r7, #4]
 3758              	.L260:
1388:..\src/interruptions.c ****                     i_aux = filter(i_aux, &filt_emg2);
 3759              		.loc 1 1388 0
 3760 04ac 3649     		ldr	r1, .L290+40
 3761 04ae 7868     		ldr	r0, [r7, #4]
 3762 04b0 FFF7FEFF 		bl	filter
 3763 04b4 7860     		str	r0, [r7, #4]
1389:..\src/interruptions.c ****                     i_aux = (i_aux << 10) / g_mem.emg_max_value[1];
 3764              		.loc 1 1389 0
 3765 04b6 7B68     		ldr	r3, [r7, #4]
 3766 04b8 9B02     		lsls	r3, r3, #10
 3767 04ba 1A46     		mov	r2, r3
 3768 04bc 2B4B     		ldr	r3, .L290+12
 3769 04be 5B6F     		ldr	r3, [r3, #116]
 3770 04c0 B2FBF3F3 		udiv	r3, r2, r3
 3771 04c4 7B60     		str	r3, [r7, #4]
1390:..\src/interruptions.c ****         
1391:..\src/interruptions.c ****                     if (interrupt_flag){
 3772              		.loc 1 1391 0
 3773 04c6 2A4B     		ldr	r3, .L290+16
 3774 04c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3775 04ca 002B     		cmp	r3, #0
 3776 04cc 04D0     		beq	.L261
1392:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3777              		.loc 1 1392 0
 3778 04ce 284B     		ldr	r3, .L290+16
 3779 04d0 0022     		movs	r2, #0
 3780 04d2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 93


1393:..\src/interruptions.c ****                         interrupt_manager();
 3781              		.loc 1 1393 0
 3782 04d4 FFF7FEFF 		bl	interrupt_manager
 3783              	.L261:
1394:..\src/interruptions.c ****                     }
1395:..\src/interruptions.c ****                     
1396:..\src/interruptions.c ****                     if (i_aux < 0) 
 3784              		.loc 1 1396 0
 3785 04d8 7B68     		ldr	r3, [r7, #4]
 3786 04da 002B     		cmp	r3, #0
 3787 04dc 02DA     		bge	.L262
1397:..\src/interruptions.c ****                         i_aux = 0;
 3788              		.loc 1 1397 0
 3789 04de 0023     		movs	r3, #0
 3790 04e0 7B60     		str	r3, [r7, #4]
 3791 04e2 06E0     		b	.L263
 3792              	.L262:
1398:..\src/interruptions.c ****                     else 
1399:..\src/interruptions.c ****                         if (i_aux > 1024)
 3793              		.loc 1 1399 0
 3794 04e4 7B68     		ldr	r3, [r7, #4]
 3795 04e6 B3F5806F 		cmp	r3, #1024
 3796 04ea 02DD     		ble	.L263
1400:..\src/interruptions.c ****                             i_aux = 1024;
 3797              		.loc 1 1400 0
 3798 04ec 4FF48063 		mov	r3, #1024
 3799 04f0 7B60     		str	r3, [r7, #4]
 3800              	.L263:
1401:..\src/interruptions.c ****                     
1402:..\src/interruptions.c ****                     g_meas.emg[1] = i_aux;
 3801              		.loc 1 1402 0
 3802 04f2 204A     		ldr	r2, .L290+20
 3803 04f4 7B68     		ldr	r3, [r7, #4]
 3804 04f6 D361     		str	r3, [r2, #28]
1403:..\src/interruptions.c **** 
1404:..\src/interruptions.c ****                 break;
 3805              		.loc 1 1404 0
 3806 04f8 F4E0     		b	.L264
 3807              	.L255:
1405:..\src/interruptions.c **** 
1406:..\src/interruptions.c ****             case RESET: // reset variables
1407:..\src/interruptions.c ****                 emg_counter_2 = 0;
 3808              		.loc 1 1407 0
 3809 04fa 244B     		ldr	r3, .L290+44
 3810 04fc 0022     		movs	r2, #0
 3811 04fe 1A80     		strh	r2, [r3]	@ movhi
1408:..\src/interruptions.c ****                 g_mem.emg_max_value[1] = 0;
 3812              		.loc 1 1408 0
 3813 0500 1A4B     		ldr	r3, .L290+12
 3814 0502 0022     		movs	r2, #0
 3815 0504 5A67     		str	r2, [r3, #116]
1409:..\src/interruptions.c ****     
1410:..\src/interruptions.c ****                 if (interrupt_flag){
 3816              		.loc 1 1410 0
 3817 0506 1A4B     		ldr	r3, .L290+16
 3818 0508 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3819 050a 002B     		cmp	r3, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 94


 3820 050c 04D0     		beq	.L265
1411:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3821              		.loc 1 1411 0
 3822 050e 184B     		ldr	r3, .L290+16
 3823 0510 0022     		movs	r2, #0
 3824 0512 1A70     		strb	r2, [r3]
1412:..\src/interruptions.c ****                     interrupt_manager();
 3825              		.loc 1 1412 0
 3826 0514 FFF7FEFF 		bl	interrupt_manager
 3827              	.L265:
1413:..\src/interruptions.c ****                 }
1414:..\src/interruptions.c ****                 
1415:..\src/interruptions.c ****                 emg_2_status = WAIT; // wait for EMG 1 calibration
 3828              		.loc 1 1415 0
 3829 0518 1A4B     		ldr	r3, .L290+36
 3830 051a 0422     		movs	r2, #4
 3831 051c 1A70     		strb	r2, [r3]
1416:..\src/interruptions.c ****                 break;
 3832              		.loc 1 1416 0
 3833 051e E1E0     		b	.L264
 3834              	.L256:
1417:..\src/interruptions.c **** 
1418:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1419:..\src/interruptions.c ****                 emg_counter_2++;
 3835              		.loc 1 1419 0
 3836 0520 1A4B     		ldr	r3, .L290+44
 3837 0522 1B88     		ldrh	r3, [r3]
 3838 0524 0133     		adds	r3, r3, #1
 3839 0526 9AB2     		uxth	r2, r3
 3840 0528 184B     		ldr	r3, .L290+44
 3841 052a 1A80     		strh	r2, [r3]	@ movhi
1420:..\src/interruptions.c ****                 if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 3842              		.loc 1 1420 0
 3843 052c 174B     		ldr	r3, .L290+44
 3844 052e 1B88     		ldrh	r3, [r3]
 3845 0530 B3F5FA7F 		cmp	r3, #500
 3846 0534 40F0CF80 		bne	.L284
1421:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 3847              		.loc 1 1421 0
 3848 0538 144B     		ldr	r3, .L290+44
 3849 053a 0022     		movs	r2, #0
 3850 053c 1A80     		strh	r2, [r3]	@ movhi
1422:..\src/interruptions.c ****                     LED_control(1);
 3851              		.loc 1 1422 0
 3852 053e 0120     		movs	r0, #1
 3853 0540 FFF7FEFF 		bl	LED_control
1423:..\src/interruptions.c ****     
1424:..\src/interruptions.c ****                     if (interrupt_flag){
 3854              		.loc 1 1424 0
 3855 0544 0A4B     		ldr	r3, .L290+16
 3856 0546 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3857 0548 002B     		cmp	r3, #0
 3858 054a 04D0     		beq	.L267
1425:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3859              		.loc 1 1425 0
 3860 054c 084B     		ldr	r3, .L290+16
 3861 054e 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 95


 3862 0550 1A70     		strb	r2, [r3]
1426:..\src/interruptions.c ****                         interrupt_manager();
 3863              		.loc 1 1426 0
 3864 0552 FFF7FEFF 		bl	interrupt_manager
 3865              	.L267:
1427:..\src/interruptions.c ****                     }
1428:..\src/interruptions.c ****                     
1429:..\src/interruptions.c ****                     emg_2_status = SUM_AND_MEAN;           // sum and mean status
 3866              		.loc 1 1429 0
 3867 0556 0B4B     		ldr	r3, .L290+36
 3868 0558 0322     		movs	r2, #3
 3869 055a 1A70     		strb	r2, [r3]
1430:..\src/interruptions.c ****                 }
1431:..\src/interruptions.c ****                 break;
 3870              		.loc 1 1431 0
 3871 055c BBE0     		b	.L284
 3872              	.L291:
 3873 055e 00BF     		.align	2
 3874              	.L290:
 3875 0560 00000000 		.word	c_mem
 3876 0564 00000000 		.word	ADC_buf
 3877 0568 00000000 		.word	filt_emg1
 3878 056c 00000000 		.word	g_mem
 3879 0570 00000000 		.word	interrupt_flag
 3880 0574 00000000 		.word	g_meas
 3881 0578 F4000000 		.word	emg_counter_1.10151
 3882 057c 00000000 		.word	emg_1_status
 3883 0580 D34D6210 		.word	274877907
 3884 0584 00000000 		.word	emg_2_status
 3885 0588 00000000 		.word	filt_emg2
 3886 058c F6000000 		.word	emg_counter_2.10152
 3887              	.L257:
1432:..\src/interruptions.c **** 
1433:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1434:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1435:..\src/interruptions.c ****                 emg_counter_2++;
 3888              		.loc 1 1435 0
 3889 0590 5B4B     		ldr	r3, .L292
 3890 0592 1B88     		ldrh	r3, [r3]
 3891 0594 0133     		adds	r3, r3, #1
 3892 0596 9AB2     		uxth	r2, r3
 3893 0598 594B     		ldr	r3, .L292
 3894 059a 1A80     		strh	r2, [r3]	@ movhi
1436:..\src/interruptions.c ****                 if (ADC_buf[3 - c_mem.switch_emg] < 0)
 3895              		.loc 1 1436 0
 3896 059c 594B     		ldr	r3, .L292+4
 3897 059e 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3898 05a2 C3F10303 		rsb	r3, r3, #3
 3899 05a6 584A     		ldr	r2, .L292+8
 3900 05a8 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3901 05ac 002B     		cmp	r3, #0
 3902 05ae 08DA     		bge	.L268
1437:..\src/interruptions.c ****                     ADC_buf[3 - c_mem.switch_emg] = 0;
 3903              		.loc 1 1437 0
 3904 05b0 544B     		ldr	r3, .L292+4
 3905 05b2 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3906 05b6 C3F10303 		rsb	r3, r3, #3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 96


 3907 05ba 534A     		ldr	r2, .L292+8
 3908 05bc 0021     		movs	r1, #0
 3909 05be 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 3910              	.L268:
1438:..\src/interruptions.c ****                 g_mem.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.switch_emg], &filt_emg2);
 3911              		.loc 1 1438 0
 3912 05c2 504B     		ldr	r3, .L292+4
 3913 05c4 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 3914 05c8 C3F10303 		rsb	r3, r3, #3
 3915 05cc 4E4A     		ldr	r2, .L292+8
 3916 05ce 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3917 05d2 4E49     		ldr	r1, .L292+12
 3918 05d4 1846     		mov	r0, r3
 3919 05d6 FFF7FEFF 		bl	filter
 3920 05da 0246     		mov	r2, r0
 3921 05dc 4C4B     		ldr	r3, .L292+16
 3922 05de 5B6F     		ldr	r3, [r3, #116]
 3923 05e0 1344     		add	r3, r3, r2
 3924 05e2 4B4A     		ldr	r2, .L292+16
 3925 05e4 5367     		str	r3, [r2, #116]
1439:..\src/interruptions.c ****     
1440:..\src/interruptions.c ****                 if (interrupt_flag){
 3926              		.loc 1 1440 0
 3927 05e6 4B4B     		ldr	r3, .L292+20
 3928 05e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3929 05ea 002B     		cmp	r3, #0
 3930 05ec 04D0     		beq	.L269
1441:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3931              		.loc 1 1441 0
 3932 05ee 494B     		ldr	r3, .L292+20
 3933 05f0 0022     		movs	r2, #0
 3934 05f2 1A70     		strb	r2, [r3]
1442:..\src/interruptions.c ****                     interrupt_manager();
 3935              		.loc 1 1442 0
 3936 05f4 FFF7FEFF 		bl	interrupt_manager
 3937              	.L269:
1443:..\src/interruptions.c ****                 }
1444:..\src/interruptions.c ****                 
1445:..\src/interruptions.c ****                 if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 3938              		.loc 1 1445 0
 3939 05f8 414B     		ldr	r3, .L292
 3940 05fa 1B88     		ldrh	r3, [r3]
 3941 05fc B3F57A7F 		cmp	r3, #1000
 3942 0600 6BD1     		bne	.L285
1446:..\src/interruptions.c ****                     g_mem.emg_max_value[1] = g_mem.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // calc
 3943              		.loc 1 1446 0
 3944 0602 434B     		ldr	r3, .L292+16
 3945 0604 5B6F     		ldr	r3, [r3, #116]
 3946 0606 444A     		ldr	r2, .L292+24
 3947 0608 A2FB0323 		umull	r2, r3, r2, r3
 3948 060c 9B09     		lsrs	r3, r3, #6
 3949 060e 404A     		ldr	r2, .L292+16
 3950 0610 5367     		str	r3, [r2, #116]
1447:..\src/interruptions.c ****                     LED_control(0);
 3951              		.loc 1 1447 0
 3952 0612 0020     		movs	r0, #0
 3953 0614 FFF7FEFF 		bl	LED_control
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 97


1448:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 3954              		.loc 1 1448 0
 3955 0618 394B     		ldr	r3, .L292
 3956 061a 0022     		movs	r2, #0
 3957 061c 1A80     		strh	r2, [r3]	@ movhi
1449:..\src/interruptions.c ****                 
1450:..\src/interruptions.c ****                     if (interrupt_flag){
 3958              		.loc 1 1450 0
 3959 061e 3D4B     		ldr	r3, .L292+20
 3960 0620 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3961 0622 002B     		cmp	r3, #0
 3962 0624 04D0     		beq	.L271
1451:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3963              		.loc 1 1451 0
 3964 0626 3B4B     		ldr	r3, .L292+20
 3965 0628 0022     		movs	r2, #0
 3966 062a 1A70     		strb	r2, [r3]
1452:..\src/interruptions.c ****                         interrupt_manager();
 3967              		.loc 1 1452 0
 3968 062c FFF7FEFF 		bl	interrupt_manager
 3969              	.L271:
1453:..\src/interruptions.c ****                     }
1454:..\src/interruptions.c ****                     
1455:..\src/interruptions.c ****                     emg_2_status = WAIT_EoC;    // goto end of calibration wait
 3970              		.loc 1 1455 0
 3971 0630 3A4B     		ldr	r3, .L292+28
 3972 0632 0522     		movs	r2, #5
 3973 0634 1A70     		strb	r2, [r3]
1456:..\src/interruptions.c ****                 }
1457:..\src/interruptions.c ****                 break;
 3974              		.loc 1 1457 0
 3975 0636 50E0     		b	.L285
 3976              	.L258:
1458:..\src/interruptions.c **** 
1459:..\src/interruptions.c ****             case WAIT: // wait for EMG calibration to be done
1460:..\src/interruptions.c ****                 if (emg_1_status == NORMAL)
 3977              		.loc 1 1460 0
 3978 0638 394B     		ldr	r3, .L292+32
 3979 063a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3980 063c 002B     		cmp	r3, #0
 3981 063e 4ED1     		bne	.L286
1461:..\src/interruptions.c ****                     emg_2_status = DISCARD;           // goto discard sample
 3982              		.loc 1 1461 0
 3983 0640 364B     		ldr	r3, .L292+28
 3984 0642 0222     		movs	r2, #2
 3985 0644 1A70     		strb	r2, [r3]
1462:..\src/interruptions.c ****                 break;
 3986              		.loc 1 1462 0
 3987 0646 4AE0     		b	.L286
 3988              	.L259:
1463:..\src/interruptions.c **** 
1464:..\src/interruptions.c ****             case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reaso
1465:..\src/interruptions.c ****                 emg_counter_2++;
 3989              		.loc 1 1465 0
 3990 0648 2D4B     		ldr	r3, .L292
 3991 064a 1B88     		ldrh	r3, [r3]
 3992 064c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 98


 3993 064e 9AB2     		uxth	r2, r3
 3994 0650 2B4B     		ldr	r3, .L292
 3995 0652 1A80     		strh	r2, [r3]	@ movhi
1466:..\src/interruptions.c ****                 if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 3996              		.loc 1 1466 0
 3997 0654 2A4B     		ldr	r3, .L292
 3998 0656 1B88     		ldrh	r3, [r3]
 3999 0658 B3F5FA7F 		cmp	r3, #500
 4000 065c 41D1     		bne	.L287
1467:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 4001              		.loc 1 1467 0
 4002 065e 284B     		ldr	r3, .L292
 4003 0660 0022     		movs	r2, #0
 4004 0662 1A80     		strh	r2, [r3]	@ movhi
1468:..\src/interruptions.c ****                     
1469:..\src/interruptions.c ****                     if (interrupt_flag){
 4005              		.loc 1 1469 0
 4006 0664 2B4B     		ldr	r3, .L292+20
 4007 0666 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4008 0668 002B     		cmp	r3, #0
 4009 066a 04D0     		beq	.L274
1470:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 4010              		.loc 1 1470 0
 4011 066c 294B     		ldr	r3, .L292+20
 4012 066e 0022     		movs	r2, #0
 4013 0670 1A70     		strb	r2, [r3]
1471:..\src/interruptions.c ****                         interrupt_manager();
 4014              		.loc 1 1471 0
 4015 0672 FFF7FEFF 		bl	interrupt_manager
 4016              	.L274:
1472:..\src/interruptions.c ****                     }
1473:..\src/interruptions.c ****                     
1474:..\src/interruptions.c ****                     // if EMG control mode active, activate motor accordingly with startup value
1475:..\src/interruptions.c ****                     if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 4017              		.loc 1 1475 0
 4018 0676 234B     		ldr	r3, .L292+4
 4019 0678 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 4020 067c 022B     		cmp	r3, #2
 4021 067e 0ED0     		beq	.L275
1476:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4022              		.loc 1 1476 0 discriminator 1
 4023 0680 204B     		ldr	r3, .L292+4
 4024 0682 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1475:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4025              		.loc 1 1475 0 discriminator 1
 4026 0686 032B     		cmp	r3, #3
 4027 0688 09D0     		beq	.L275
1477:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 4028              		.loc 1 1477 0
 4029 068a 1E4B     		ldr	r3, .L292+4
 4030 068c 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1476:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4031              		.loc 1 1476 0
 4032 0690 042B     		cmp	r3, #4
 4033 0692 04D0     		beq	.L275
1478:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 4034              		.loc 1 1478 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 99


 4035 0694 1B4B     		ldr	r3, .L292+4
 4036 0696 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
1477:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 4037              		.loc 1 1477 0
 4038 069a 052B     		cmp	r3, #5
 4039 069c 12D1     		bne	.L276
 4040              	.L275:
1479:..\src/interruptions.c ****                         if (c_mem.control_mode == CONTROL_ANGLE) {
 4041              		.loc 1 1479 0
 4042 069e 194B     		ldr	r3, .L292+4
 4043 06a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 4044 06a4 002B     		cmp	r3, #0
 4045 06a6 03D1     		bne	.L277
1480:..\src/interruptions.c ****                             g_ref.pos = g_meas.pos[0];
 4046              		.loc 1 1480 0
 4047 06a8 1E4B     		ldr	r3, .L292+36
 4048 06aa 1B68     		ldr	r3, [r3]
 4049 06ac 1E4A     		ldr	r2, .L292+40
 4050 06ae 1360     		str	r3, [r2]
 4051              	.L277:
1481:..\src/interruptions.c ****                         }
1482:..\src/interruptions.c ****                         g_ref.onoff = c_mem.activ;
 4052              		.loc 1 1482 0
 4053 06b0 144B     		ldr	r3, .L292+4
 4054 06b2 93F83420 		ldrb	r2, [r3, #52]	@ zero_extendqisi2
 4055 06b6 1C4B     		ldr	r3, .L292+40
 4056 06b8 1A73     		strb	r2, [r3, #12]
1483:..\src/interruptions.c ****                         MOTOR_ON_OFF_Write(g_ref.onoff);
 4057              		.loc 1 1483 0
 4058 06ba 1B4B     		ldr	r3, .L292+40
 4059 06bc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4060 06be 1846     		mov	r0, r3
 4061 06c0 FFF7FEFF 		bl	MOTOR_ON_OFF_Write
 4062              	.L276:
1484:..\src/interruptions.c ****                     }
1485:..\src/interruptions.c ****                         
1486:..\src/interruptions.c ****                     memStore(0);        // Store emg_max_value
 4063              		.loc 1 1486 0
 4064 06c4 0020     		movs	r0, #0
 4065 06c6 FFF7FEFF 		bl	memStore
1487:..\src/interruptions.c ****                         
1488:..\src/interruptions.c ****                     emg_2_status = NORMAL;           // goto normal execution
 4066              		.loc 1 1488 0
 4067 06ca 144B     		ldr	r3, .L292+28
 4068 06cc 0022     		movs	r2, #0
 4069 06ce 1A70     		strb	r2, [r3]
1489:..\src/interruptions.c ****                 }
1490:..\src/interruptions.c ****                 break;
 4070              		.loc 1 1490 0
 4071 06d0 07E0     		b	.L287
 4072              	.L283:
1491:..\src/interruptions.c ****             default:
1492:..\src/interruptions.c ****                 break;
 4073              		.loc 1 1492 0
 4074 06d2 00BF     		nop
 4075 06d4 06E0     		b	.L264
 4076              	.L284:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 100


1431:..\src/interruptions.c **** 
 4077              		.loc 1 1431 0
 4078 06d6 00BF     		nop
 4079 06d8 04E0     		b	.L264
 4080              	.L285:
1457:..\src/interruptions.c **** 
 4081              		.loc 1 1457 0
 4082 06da 00BF     		nop
 4083 06dc 02E0     		b	.L264
 4084              	.L286:
1462:..\src/interruptions.c **** 
 4085              		.loc 1 1462 0
 4086 06de 00BF     		nop
 4087 06e0 00E0     		b	.L264
 4088              	.L287:
1490:..\src/interruptions.c ****             default:
 4089              		.loc 1 1490 0
 4090 06e2 00BF     		nop
 4091              	.L264:
1493:..\src/interruptions.c ****         }
1494:..\src/interruptions.c ****             
1495:..\src/interruptions.c ****         if (interrupt_flag){
 4092              		.loc 1 1495 0
 4093 06e4 0B4B     		ldr	r3, .L292+20
 4094 06e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4095 06e8 002B     		cmp	r3, #0
 4096 06ea 04D0     		beq	.L278
1496:..\src/interruptions.c ****             interrupt_flag = FALSE;
 4097              		.loc 1 1496 0
 4098 06ec 094B     		ldr	r3, .L292+20
 4099 06ee 0022     		movs	r2, #0
 4100 06f0 1A70     		strb	r2, [r3]
1497:..\src/interruptions.c ****             interrupt_manager();
 4101              		.loc 1 1497 0
 4102 06f2 FFF7FEFF 		bl	interrupt_manager
 4103              	.L278:
1498:..\src/interruptions.c ****         }
1499:..\src/interruptions.c ****     }
1500:..\src/interruptions.c **** }
 4104              		.loc 1 1500 0
 4105 06f6 00BF     		nop
 4106 06f8 0C37     		adds	r7, r7, #12
 4107              		.cfi_def_cfa_offset 12
 4108 06fa BD46     		mov	sp, r7
 4109              		.cfi_def_cfa_register 13
 4110              		@ sp needed
 4111 06fc 90BD     		pop	{r4, r7, pc}
 4112              	.L293:
 4113 06fe 00BF     		.align	2
 4114              	.L292:
 4115 0700 F6000000 		.word	emg_counter_2.10152
 4116 0704 00000000 		.word	c_mem
 4117 0708 00000000 		.word	ADC_buf
 4118 070c 00000000 		.word	filt_emg2
 4119 0710 00000000 		.word	g_mem
 4120 0714 00000000 		.word	interrupt_flag
 4121 0718 D34D6210 		.word	274877907
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 101


 4122 071c 00000000 		.word	emg_2_status
 4123 0720 00000000 		.word	emg_1_status
 4124 0724 00000000 		.word	g_meas
 4125 0728 00000000 		.word	g_ref
 4126              		.cfi_endproc
 4127              	.LFE70:
 4128              		.size	analog_read_end, .-analog_read_end
 4129              		.section	.text.overcurrent_control,"ax",%progbits
 4130              		.align	2
 4131              		.global	overcurrent_control
 4132              		.thumb
 4133              		.thumb_func
 4134              		.type	overcurrent_control, %function
 4135              	overcurrent_control:
 4136              	.LFB71:
1501:..\src/interruptions.c **** 
1502:..\src/interruptions.c **** //==============================================================================
1503:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
1504:..\src/interruptions.c **** //==============================================================================
1505:..\src/interruptions.c **** 
1506:..\src/interruptions.c **** void overcurrent_control() {
 4137              		.loc 1 1506 0
 4138              		.cfi_startproc
 4139              		@ args = 0, pretend = 0, frame = 0
 4140              		@ frame_needed = 1, uses_anonymous_args = 0
 4141              		@ link register save eliminated.
 4142 0000 80B4     		push	{r7}
 4143              		.cfi_def_cfa_offset 4
 4144              		.cfi_offset 7, -4
 4145 0002 00AF     		add	r7, sp, #0
 4146              		.cfi_def_cfa_register 7
1507:..\src/interruptions.c ****     if (c_mem.current_limit != 0) {
 4147              		.loc 1 1507 0
 4148 0004 174B     		ldr	r3, .L300
 4149 0006 B3F96830 		ldrsh	r3, [r3, #104]
 4150 000a 002B     		cmp	r3, #0
 4151 000c 25D0     		beq	.L299
1508:..\src/interruptions.c ****         // if the current is over the limit
1509:..\src/interruptions.c ****         if (g_meas.curr > c_mem.current_limit) {
 4152              		.loc 1 1509 0
 4153 000e 164B     		ldr	r3, .L300+4
 4154 0010 DB68     		ldr	r3, [r3, #12]
 4155 0012 144A     		ldr	r2, .L300
 4156 0014 B2F96820 		ldrsh	r2, [r2, #104]
 4157 0018 9342     		cmp	r3, r2
 4158 001a 06DD     		ble	.L296
1510:..\src/interruptions.c ****             //decrease pwm_limit
1511:..\src/interruptions.c ****             dev_pwm_limit--;
 4159              		.loc 1 1511 0
 4160 001c 134B     		ldr	r3, .L300+8
 4161 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4162 0020 013B     		subs	r3, r3, #1
 4163 0022 DAB2     		uxtb	r2, r3
 4164 0024 114B     		ldr	r3, .L300+8
 4165 0026 1A70     		strb	r2, [r3]
 4166 0028 0DE0     		b	.L298
 4167              	.L296:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 102


1512:..\src/interruptions.c ****         // if the current is in the safe zone
1513:..\src/interruptions.c ****         } else if (g_meas.curr < (c_mem.current_limit - CURRENT_HYSTERESIS)) {
 4168              		.loc 1 1513 0
 4169 002a 0F4B     		ldr	r3, .L300+4
 4170 002c DA68     		ldr	r2, [r3, #12]
 4171 002e 0D4B     		ldr	r3, .L300
 4172 0030 B3F96830 		ldrsh	r3, [r3, #104]
 4173 0034 0A3B     		subs	r3, r3, #10
 4174 0036 9A42     		cmp	r2, r3
 4175 0038 05DA     		bge	.L298
1514:..\src/interruptions.c ****             //increase pwm_limit
1515:..\src/interruptions.c ****             dev_pwm_limit++;
 4176              		.loc 1 1515 0
 4177 003a 0C4B     		ldr	r3, .L300+8
 4178 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4179 003e 0133     		adds	r3, r3, #1
 4180 0040 DAB2     		uxtb	r2, r3
 4181 0042 0A4B     		ldr	r3, .L300+8
 4182 0044 1A70     		strb	r2, [r3]
 4183              	.L298:
1516:..\src/interruptions.c ****         }
1517:..\src/interruptions.c **** 
1518:..\src/interruptions.c ****         // Bound pwm_limit
1519:..\src/interruptions.c ****         if (dev_pwm_limit < 0) 
1520:..\src/interruptions.c ****             dev_pwm_limit = 0;
1521:..\src/interruptions.c ****         else 
1522:..\src/interruptions.c ****             if (dev_pwm_limit > dev_pwm_sat) 
 4184              		.loc 1 1522 0
 4185 0046 094B     		ldr	r3, .L300+8
 4186 0048 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4187 004a 094B     		ldr	r3, .L300+12
 4188 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4189 004e 9A42     		cmp	r2, r3
 4190 0050 03D9     		bls	.L299
1523:..\src/interruptions.c ****                 dev_pwm_limit = dev_pwm_sat;
 4191              		.loc 1 1523 0
 4192 0052 074B     		ldr	r3, .L300+12
 4193 0054 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4194 0056 054B     		ldr	r3, .L300+8
 4195 0058 1A70     		strb	r2, [r3]
 4196              	.L299:
1524:..\src/interruptions.c ****     }
1525:..\src/interruptions.c **** }
 4197              		.loc 1 1525 0
 4198 005a 00BF     		nop
 4199 005c BD46     		mov	sp, r7
 4200              		.cfi_def_cfa_register 13
 4201              		@ sp needed
 4202 005e 80BC     		pop	{r7}
 4203              		.cfi_restore 7
 4204              		.cfi_def_cfa_offset 0
 4205 0060 7047     		bx	lr
 4206              	.L301:
 4207 0062 00BF     		.align	2
 4208              	.L300:
 4209 0064 00000000 		.word	c_mem
 4210 0068 00000000 		.word	g_meas
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 103


 4211 006c 00000000 		.word	dev_pwm_limit
 4212 0070 00000000 		.word	dev_pwm_sat
 4213              		.cfi_endproc
 4214              	.LFE71:
 4215              		.size	overcurrent_control, .-overcurrent_control
 4216              		.section	.text.pwm_limit_search,"ax",%progbits
 4217              		.align	2
 4218              		.global	pwm_limit_search
 4219              		.thumb
 4220              		.thumb_func
 4221              		.type	pwm_limit_search, %function
 4222              	pwm_limit_search:
 4223              	.LFB72:
1526:..\src/interruptions.c **** 
1527:..\src/interruptions.c **** //==============================================================================
1528:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
1529:..\src/interruptions.c **** //==============================================================================
1530:..\src/interruptions.c **** 
1531:..\src/interruptions.c **** void pwm_limit_search() {
 4224              		.loc 1 1531 0
 4225              		.cfi_startproc
 4226              		@ args = 0, pretend = 0, frame = 8
 4227              		@ frame_needed = 1, uses_anonymous_args = 0
 4228              		@ link register save eliminated.
 4229 0000 80B4     		push	{r7}
 4230              		.cfi_def_cfa_offset 4
 4231              		.cfi_offset 7, -4
 4232 0002 83B0     		sub	sp, sp, #12
 4233              		.cfi_def_cfa_offset 16
 4234 0004 00AF     		add	r7, sp, #0
 4235              		.cfi_def_cfa_register 7
1532:..\src/interruptions.c **** 
1533:..\src/interruptions.c ****     uint8 CYDATA index;
1534:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 4236              		.loc 1 1534 0
 4237 0006 46F29C33 		movw	r3, #25500
 4238 000a FB80     		strh	r3, [r7, #6]	@ movhi
1535:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 4239              		.loc 1 1535 0
 4240 000c 42F6EC43 		movw	r3, #11500
 4241 0010 BB80     		strh	r3, [r7, #4]	@ movhi
1536:..\src/interruptions.c ****     
1537:..\src/interruptions.c ****     if (dev_tension > max_tension) {
 4242              		.loc 1 1537 0
 4243 0012 FA88     		ldrh	r2, [r7, #6]
 4244 0014 104B     		ldr	r3, .L307
 4245 0016 1B68     		ldr	r3, [r3]
 4246 0018 9A42     		cmp	r2, r3
 4247 001a 03DA     		bge	.L303
1538:..\src/interruptions.c ****         dev_pwm_sat = 0;
 4248              		.loc 1 1538 0
 4249 001c 0F4B     		ldr	r3, .L307+4
 4250 001e 0022     		movs	r2, #0
 4251 0020 1A70     		strb	r2, [r3]
1539:..\src/interruptions.c ****     } else if (dev_tension < min_tension) {
1540:..\src/interruptions.c ****         dev_pwm_sat = 100;
1541:..\src/interruptions.c ****     } else {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 104


1542:..\src/interruptions.c ****         index = (uint8)((dev_tension - min_tension) >> 9);
1543:..\src/interruptions.c ****         dev_pwm_sat = pwm_preload_values[index];
1544:..\src/interruptions.c ****     }
1545:..\src/interruptions.c **** }
 4252              		.loc 1 1545 0
 4253 0022 13E0     		b	.L306
 4254              	.L303:
1539:..\src/interruptions.c ****     } else if (dev_tension < min_tension) {
 4255              		.loc 1 1539 0
 4256 0024 BA88     		ldrh	r2, [r7, #4]
 4257 0026 0C4B     		ldr	r3, .L307
 4258 0028 1B68     		ldr	r3, [r3]
 4259 002a 9A42     		cmp	r2, r3
 4260 002c 03DD     		ble	.L305
1540:..\src/interruptions.c ****     } else {
 4261              		.loc 1 1540 0
 4262 002e 0B4B     		ldr	r3, .L307+4
 4263 0030 6422     		movs	r2, #100
 4264 0032 1A70     		strb	r2, [r3]
 4265              		.loc 1 1545 0
 4266 0034 0AE0     		b	.L306
 4267              	.L305:
1542:..\src/interruptions.c ****         dev_pwm_sat = pwm_preload_values[index];
 4268              		.loc 1 1542 0
 4269 0036 084B     		ldr	r3, .L307
 4270 0038 1A68     		ldr	r2, [r3]
 4271 003a BB88     		ldrh	r3, [r7, #4]
 4272 003c D31A     		subs	r3, r2, r3
 4273 003e 5B12     		asrs	r3, r3, #9
 4274 0040 FB70     		strb	r3, [r7, #3]
1543:..\src/interruptions.c ****     }
 4275              		.loc 1 1543 0
 4276 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4277 0044 064A     		ldr	r2, .L307+8
 4278 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4279 0048 044B     		ldr	r3, .L307+4
 4280 004a 1A70     		strb	r2, [r3]
 4281              	.L306:
 4282              		.loc 1 1545 0
 4283 004c 00BF     		nop
 4284 004e 0C37     		adds	r7, r7, #12
 4285              		.cfi_def_cfa_offset 4
 4286 0050 BD46     		mov	sp, r7
 4287              		.cfi_def_cfa_register 13
 4288              		@ sp needed
 4289 0052 80BC     		pop	{r7}
 4290              		.cfi_restore 7
 4291              		.cfi_def_cfa_offset 0
 4292 0054 7047     		bx	lr
 4293              	.L308:
 4294 0056 00BF     		.align	2
 4295              	.L307:
 4296 0058 00000000 		.word	dev_tension
 4297 005c 00000000 		.word	dev_pwm_sat
 4298 0060 00000000 		.word	pwm_preload_values
 4299              		.cfi_endproc
 4300              	.LFE72:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 105


 4301              		.size	pwm_limit_search, .-pwm_limit_search
 4302              		.section	.text.cycles_counter_update,"ax",%progbits
 4303              		.align	2
 4304              		.global	cycles_counter_update
 4305              		.thumb
 4306              		.thumb_func
 4307              		.type	cycles_counter_update, %function
 4308              	cycles_counter_update:
 4309              	.LFB73:
1546:..\src/interruptions.c **** 
1547:..\src/interruptions.c **** //==============================================================================
1548:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
1549:..\src/interruptions.c **** //==============================================================================
1550:..\src/interruptions.c **** 
1551:..\src/interruptions.c **** void cycles_counter_update() {
 4310              		.loc 1 1551 0
 4311              		.cfi_startproc
 4312              		@ args = 0, pretend = 0, frame = 24
 4313              		@ frame_needed = 1, uses_anonymous_args = 0
 4314 0000 80B5     		push	{r7, lr}
 4315              		.cfi_def_cfa_offset 8
 4316              		.cfi_offset 7, -8
 4317              		.cfi_offset 14, -4
 4318 0002 86B0     		sub	sp, sp, #24
 4319              		.cfi_def_cfa_offset 32
 4320 0004 00AF     		add	r7, sp, #0
 4321              		.cfi_def_cfa_register 7
1552:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
1553:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
1554:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
1555:..\src/interruptions.c ****     static int32 bin_threshold = 250;
1556:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
1557:..\src/interruptions.c ****     uint8 i, bin_st, bin_max;
1558:..\src/interruptions.c ****     int32 curr_pos, curr_off;
1559:..\src/interruptions.c ****     int32 step;
1560:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
1561:..\src/interruptions.c **** 
1562:..\src/interruptions.c ****     curr_pos = (int32)(g_meas.pos[0] >> g_mem.res[0]);
 4322              		.loc 1 1562 0
 4323 0006 9C4B     		ldr	r3, .L349
 4324 0008 1B68     		ldr	r3, [r3]
 4325 000a 9C4A     		ldr	r2, .L349+4
 4326 000c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 4327 0010 1341     		asrs	r3, r3, r2
 4328 0012 3B61     		str	r3, [r7, #16]
1563:..\src/interruptions.c ****     
1564:..\src/interruptions.c ****     // State machine - Evaluate position counter update
1565:..\src/interruptions.c ****     switch (pos_cycle_status){
 4329              		.loc 1 1565 0
 4330 0014 9A4B     		ldr	r3, .L349+8
 4331 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4332 0018 012B     		cmp	r3, #1
 4333 001a 2BD0     		beq	.L311
 4334 001c 022B     		cmp	r3, #2
 4335 001e 51D0     		beq	.L312
 4336 0020 002B     		cmp	r3, #0
 4337 0022 40F0C880 		bne	.L310
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 106


1566:..\src/interruptions.c ****         case STATE_INACTIVE:
1567:..\src/interruptions.c ****             if (pwm_sign == 1){
 4338              		.loc 1 1567 0
 4339 0026 974B     		ldr	r3, .L349+12
 4340 0028 93F90030 		ldrsb	r3, [r3]
 4341 002c 012B     		cmp	r3, #1
 4342 002e 40F0BF80 		bne	.L343
1568:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 4343              		.loc 1 1568 0
 4344 0032 954A     		ldr	r2, .L349+16
 4345 0034 3B69     		ldr	r3, [r7, #16]
 4346 0036 1360     		str	r3, [r2]
1569:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4347              		.loc 1 1569 0
 4348 0038 944B     		ldr	r3, .L349+20
 4349 003a 1A68     		ldr	r2, [r3]
 4350 003c 924B     		ldr	r3, .L349+16
 4351 003e 1B68     		ldr	r3, [r3]
 4352 0040 9A42     		cmp	r2, r3
 4353 0042 05DD     		ble	.L315
 4354              		.loc 1 1569 0 is_stmt 0 discriminator 1
 4355 0044 914B     		ldr	r3, .L349+20
 4356 0046 1A68     		ldr	r2, [r3]
 4357 0048 8F4B     		ldr	r3, .L349+16
 4358 004a 1B68     		ldr	r3, [r3]
 4359 004c D31A     		subs	r3, r2, r3
 4360 004e 04E0     		b	.L316
 4361              	.L315:
 4362              		.loc 1 1569 0 discriminator 2
 4363 0050 8D4B     		ldr	r3, .L349+16
 4364 0052 1A68     		ldr	r2, [r3]
 4365 0054 8D4B     		ldr	r3, .L349+20
 4366 0056 1B68     		ldr	r3, [r3]
 4367 0058 D31A     		subs	r3, r2, r3
 4368              	.L316:
 4369              		.loc 1 1569 0 discriminator 4
 4370 005a FB60     		str	r3, [r7, #12]
1570:..\src/interruptions.c ****                 g_mem.wire_disp = g_mem.wire_disp + curr_off;     //sum opening track
 4371              		.loc 1 1570 0 is_stmt 1 discriminator 4
 4372 005c 874B     		ldr	r3, .L349+4
 4373 005e D3F80421 		ldr	r2, [r3, #260]
 4374 0062 FB68     		ldr	r3, [r7, #12]
 4375 0064 1344     		add	r3, r3, r2
 4376 0066 854A     		ldr	r2, .L349+4
 4377 0068 C2F80431 		str	r3, [r2, #260]
1571:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 4378              		.loc 1 1571 0 discriminator 4
 4379 006c 844B     		ldr	r3, .L349+8
 4380 006e 0122     		movs	r2, #1
 4381 0070 1A70     		strb	r2, [r3]
1572:..\src/interruptions.c ****             }
1573:..\src/interruptions.c ****             break;
 4382              		.loc 1 1573 0 discriminator 4
 4383 0072 9DE0     		b	.L343
 4384              	.L311:
1574:..\src/interruptions.c ****         case STATE_ACTIVE:
1575:..\src/interruptions.c ****             if (pwm_sign == -1){
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 107


 4385              		.loc 1 1575 0
 4386 0074 834B     		ldr	r3, .L349+12
 4387 0076 93F90030 		ldrsb	r3, [r3]
 4388 007a B3F1FF3F 		cmp	r3, #-1
 4389 007e 40F09980 		bne	.L344
1576:..\src/interruptions.c ****                 max_pos = curr_pos;
 4390              		.loc 1 1576 0
 4391 0082 824A     		ldr	r2, .L349+20
 4392 0084 3B69     		ldr	r3, [r7, #16]
 4393 0086 1360     		str	r3, [r2]
1577:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4394              		.loc 1 1577 0
 4395 0088 804B     		ldr	r3, .L349+20
 4396 008a 1A68     		ldr	r2, [r3]
 4397 008c 7E4B     		ldr	r3, .L349+16
 4398 008e 1B68     		ldr	r3, [r3]
 4399 0090 9A42     		cmp	r2, r3
 4400 0092 05DD     		ble	.L318
 4401              		.loc 1 1577 0 is_stmt 0 discriminator 1
 4402 0094 7D4B     		ldr	r3, .L349+20
 4403 0096 1A68     		ldr	r2, [r3]
 4404 0098 7B4B     		ldr	r3, .L349+16
 4405 009a 1B68     		ldr	r3, [r3]
 4406 009c D31A     		subs	r3, r2, r3
 4407 009e 04E0     		b	.L319
 4408              	.L318:
 4409              		.loc 1 1577 0 discriminator 2
 4410 00a0 794B     		ldr	r3, .L349+16
 4411 00a2 1A68     		ldr	r2, [r3]
 4412 00a4 794B     		ldr	r3, .L349+20
 4413 00a6 1B68     		ldr	r3, [r3]
 4414 00a8 D31A     		subs	r3, r2, r3
 4415              	.L319:
 4416              		.loc 1 1577 0 discriminator 4
 4417 00aa FB60     		str	r3, [r7, #12]
1578:..\src/interruptions.c ****                 g_mem.wire_disp = g_mem.wire_disp + curr_off;     //sum closure track
 4418              		.loc 1 1578 0 is_stmt 1 discriminator 4
 4419 00ac 734B     		ldr	r3, .L349+4
 4420 00ae D3F80421 		ldr	r2, [r3, #260]
 4421 00b2 FB68     		ldr	r3, [r7, #12]
 4422 00b4 1344     		add	r3, r3, r2
 4423 00b6 714A     		ldr	r2, .L349+4
 4424 00b8 C2F80431 		str	r3, [r2, #260]
1579:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 4425              		.loc 1 1579 0 discriminator 4
 4426 00bc 704B     		ldr	r3, .L349+8
 4427 00be 0222     		movs	r2, #2
 4428 00c0 1A70     		strb	r2, [r3]
1580:..\src/interruptions.c ****             }
1581:..\src/interruptions.c ****             break;
 4429              		.loc 1 1581 0 discriminator 4
 4430 00c2 77E0     		b	.L344
 4431              	.L312:
1582:..\src/interruptions.c ****         case COUNTER_INC:
1583:..\src/interruptions.c **** 
1584:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4432              		.loc 1 1584 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 108


 4433 00c4 714B     		ldr	r3, .L349+20
 4434 00c6 1A68     		ldr	r2, [r3]
 4435 00c8 6F4B     		ldr	r3, .L349+16
 4436 00ca 1B68     		ldr	r3, [r3]
 4437 00cc 9A42     		cmp	r2, r3
 4438 00ce 05DD     		ble	.L320
 4439              		.loc 1 1584 0 is_stmt 0 discriminator 1
 4440 00d0 6E4B     		ldr	r3, .L349+20
 4441 00d2 1A68     		ldr	r2, [r3]
 4442 00d4 6C4B     		ldr	r3, .L349+16
 4443 00d6 1B68     		ldr	r3, [r3]
 4444 00d8 D31A     		subs	r3, r2, r3
 4445 00da 04E0     		b	.L321
 4446              	.L320:
 4447              		.loc 1 1584 0 discriminator 2
 4448 00dc 6A4B     		ldr	r3, .L349+16
 4449 00de 1A68     		ldr	r2, [r3]
 4450 00e0 6A4B     		ldr	r3, .L349+20
 4451 00e2 1B68     		ldr	r3, [r3]
 4452 00e4 D31A     		subs	r3, r2, r3
 4453              	.L321:
 4454              		.loc 1 1584 0 discriminator 4
 4455 00e6 FB60     		str	r3, [r7, #12]
1585:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 4456              		.loc 1 1585 0 is_stmt 1 discriminator 4
 4457 00e8 694B     		ldr	r3, .L349+24
 4458 00ea 1B68     		ldr	r3, [r3]
 4459 00ec FA68     		ldr	r2, [r7, #12]
 4460 00ee 9A42     		cmp	r2, r3
 4461 00f0 5ADD     		ble	.L322
1586:..\src/interruptions.c ****                 //update position histogram
1587:..\src/interruptions.c ****                 step = ((int32)(g_mem.pos_lim_sup >> g_mem.res[0]) / 10);
 4462              		.loc 1 1587 0
 4463 00f2 624B     		ldr	r3, .L349+4
 4464 00f4 DB6D     		ldr	r3, [r3, #92]
 4465 00f6 614A     		ldr	r2, .L349+4
 4466 00f8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 4467 00fc 1341     		asrs	r3, r3, r2
 4468 00fe 654A     		ldr	r2, .L349+28
 4469 0100 82FB0312 		smull	r1, r2, r2, r3
 4470 0104 9210     		asrs	r2, r2, #2
 4471 0106 DB17     		asrs	r3, r3, #31
 4472 0108 D31A     		subs	r3, r2, r3
 4473 010a BB60     		str	r3, [r7, #8]
1588:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 4474              		.loc 1 1588 0
 4475 010c 5E4B     		ldr	r3, .L349+16
 4476 010e 1A68     		ldr	r2, [r3]
 4477 0110 BB68     		ldr	r3, [r7, #8]
 4478 0112 92FBF3F3 		sdiv	r3, r2, r3
 4479 0116 FB71     		strb	r3, [r7, #7]
1589:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 4480              		.loc 1 1589 0
 4481 0118 5C4B     		ldr	r3, .L349+20
 4482 011a 1A68     		ldr	r2, [r3]
 4483 011c BB68     		ldr	r3, [r7, #8]
 4484 011e 92FBF3F3 		sdiv	r3, r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 109


 4485 0122 BB71     		strb	r3, [r7, #6]
1590:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4486              		.loc 1 1590 0
 4487 0124 FB79     		ldrb	r3, [r7, #7]
 4488 0126 FB75     		strb	r3, [r7, #23]
 4489 0128 0DE0     		b	.L323
 4490              	.L324:
1591:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while closing
1592:..\src/interruptions.c ****                     g_mem.position_hist[i] = g_mem.position_hist[i] + 1;
 4491              		.loc 1 1592 0 discriminator 3
 4492 012a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4493 012c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4494 012e 5349     		ldr	r1, .L349+4
 4495 0130 3232     		adds	r2, r2, #50
 4496 0132 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4497 0136 0132     		adds	r2, r2, #1
 4498 0138 5049     		ldr	r1, .L349+4
 4499 013a 3233     		adds	r3, r3, #50
 4500 013c 41F82320 		str	r2, [r1, r3, lsl #2]
1590:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4501              		.loc 1 1590 0 discriminator 3
 4502 0140 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4503 0142 0133     		adds	r3, r3, #1
 4504 0144 FB75     		strb	r3, [r7, #23]
 4505              	.L323:
1590:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4506              		.loc 1 1590 0 is_stmt 0 discriminator 1
 4507 0146 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4508 0148 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4509 014a 9A42     		cmp	r2, r3
 4510 014c EDD9     		bls	.L324
1593:..\src/interruptions.c ****                 }
1594:..\src/interruptions.c ****                 
1595:..\src/interruptions.c ****                 //update current histogram
1596:..\src/interruptions.c ****                 step = ((int32)(g_mem.current_limit) / 4);
 4511              		.loc 1 1596 0 is_stmt 1
 4512 014e 4B4B     		ldr	r3, .L349+4
 4513 0150 B3F96830 		ldrsh	r3, [r3, #104]
 4514 0154 002B     		cmp	r3, #0
 4515 0156 00DA     		bge	.L325
 4516 0158 0333     		adds	r3, r3, #3
 4517              	.L325:
 4518 015a 9B10     		asrs	r3, r3, #2
 4519 015c 1BB2     		sxth	r3, r3
 4520 015e BB60     		str	r3, [r7, #8]
1597:..\src/interruptions.c ****                 if (g_meas.curr > g_mem.current_limit)
 4521              		.loc 1 1597 0
 4522 0160 454B     		ldr	r3, .L349
 4523 0162 DB68     		ldr	r3, [r3, #12]
 4524 0164 454A     		ldr	r2, .L349+4
 4525 0166 B2F96820 		ldrsh	r2, [r2, #104]
 4526 016a 9342     		cmp	r3, r2
 4527 016c 07DD     		ble	.L326
1598:..\src/interruptions.c ****                     g_mem.current_hist[3] = g_mem.current_hist[3] + 1; 
 4528              		.loc 1 1598 0
 4529 016e 434B     		ldr	r3, .L349+4
 4530 0170 D3F8FC30 		ldr	r3, [r3, #252]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 110


 4531 0174 0133     		adds	r3, r3, #1
 4532 0176 414A     		ldr	r2, .L349+4
 4533 0178 C2F8FC30 		str	r3, [r2, #252]
 4534 017c 14E0     		b	.L322
 4535              	.L326:
1599:..\src/interruptions.c ****                 else
1600:..\src/interruptions.c ****                     g_mem.current_hist[(uint8)(g_meas.curr/step)] = g_mem.current_hist[(uint8)(g_me
 4536              		.loc 1 1600 0
 4537 017e 3E4B     		ldr	r3, .L349
 4538 0180 DA68     		ldr	r2, [r3, #12]
 4539 0182 BB68     		ldr	r3, [r7, #8]
 4540 0184 92FBF3F3 		sdiv	r3, r2, r3
 4541 0188 DBB2     		uxtb	r3, r3
 4542 018a 3B4A     		ldr	r2, .L349
 4543 018c D168     		ldr	r1, [r2, #12]
 4544 018e BA68     		ldr	r2, [r7, #8]
 4545 0190 91FBF2F2 		sdiv	r2, r1, r2
 4546 0194 D2B2     		uxtb	r2, r2
 4547 0196 3949     		ldr	r1, .L349+4
 4548 0198 3C32     		adds	r2, r2, #60
 4549 019a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4550 019e 0132     		adds	r2, r2, #1
 4551 01a0 3649     		ldr	r1, .L349+4
 4552 01a2 3C33     		adds	r3, r3, #60
 4553 01a4 41F82320 		str	r2, [r1, r3, lsl #2]
 4554              	.L322:
1601:..\src/interruptions.c ****             }
1602:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 4555              		.loc 1 1602 0
 4556 01a8 354B     		ldr	r3, .L349+8
 4557 01aa 0022     		movs	r2, #0
 4558 01ac 1A70     		strb	r2, [r3]
1603:..\src/interruptions.c ****             break;
 4559              		.loc 1 1603 0
 4560 01ae 02E0     		b	.L310
 4561              	.L343:
1573:..\src/interruptions.c ****         case STATE_ACTIVE:
 4562              		.loc 1 1573 0
 4563 01b0 00BF     		nop
 4564 01b2 00E0     		b	.L310
 4565              	.L344:
1581:..\src/interruptions.c ****         case COUNTER_INC:
 4566              		.loc 1 1581 0
 4567 01b4 00BF     		nop
 4568              	.L310:
1604:..\src/interruptions.c ****     }
1605:..\src/interruptions.c ****     
1606:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
1607:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 4569              		.loc 1 1607 0
 4570 01b6 0023     		movs	r3, #0
 4571 01b8 FB75     		strb	r3, [r7, #23]
 4572 01ba 3CE0     		b	.L327
 4573              	.L335:
1608:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4574              		.loc 1 1608 0
 4575 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 111


 4576 01be 364A     		ldr	r2, .L349+32
 4577 01c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4578 01c2 012B     		cmp	r3, #1
 4579 01c4 15D0     		beq	.L329
 4580 01c6 022B     		cmp	r3, #2
 4581 01c8 1FD0     		beq	.L330
 4582 01ca 002B     		cmp	r3, #0
 4583 01cc 30D1     		bne	.L328
1609:..\src/interruptions.c ****             case STATE_INACTIVE:
1610:..\src/interruptions.c ****                 if (g_meas.emg[i] > g_mem.emg_threshold[i]){
 4584              		.loc 1 1610 0
 4585 01ce FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4586 01d0 294A     		ldr	r2, .L349
 4587 01d2 0633     		adds	r3, r3, #6
 4588 01d4 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4589 01d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4590 01da 2849     		ldr	r1, .L349+4
 4591 01dc 3433     		adds	r3, r3, #52
 4592 01de 5B00     		lsls	r3, r3, #1
 4593 01e0 0B44     		add	r3, r3, r1
 4594 01e2 5B88     		ldrh	r3, [r3, #2]
 4595 01e4 9A42     		cmp	r2, r3
 4596 01e6 20DD     		ble	.L345
1611:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 4597              		.loc 1 1611 0
 4598 01e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4599 01ea 2B4A     		ldr	r2, .L349+32
 4600 01ec 0121     		movs	r1, #1
 4601 01ee D154     		strb	r1, [r2, r3]
1612:..\src/interruptions.c ****                 }
1613:..\src/interruptions.c ****                 break;
 4602              		.loc 1 1613 0
 4603 01f0 1BE0     		b	.L345
 4604              	.L329:
1614:..\src/interruptions.c ****             case STATE_ACTIVE:
1615:..\src/interruptions.c ****                 if (g_meas.emg[i] < 10){
 4605              		.loc 1 1615 0
 4606 01f2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4607 01f4 204A     		ldr	r2, .L349
 4608 01f6 0633     		adds	r3, r3, #6
 4609 01f8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4610 01fc 092B     		cmp	r3, #9
 4611 01fe 16DC     		bgt	.L346
1616:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 4612              		.loc 1 1616 0
 4613 0200 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4614 0202 254A     		ldr	r2, .L349+32
 4615 0204 0221     		movs	r1, #2
 4616 0206 D154     		strb	r1, [r2, r3]
1617:..\src/interruptions.c ****                 }
1618:..\src/interruptions.c ****                 break;
 4617              		.loc 1 1618 0
 4618 0208 11E0     		b	.L346
 4619              	.L330:
1619:..\src/interruptions.c ****             case COUNTER_INC:
1620:..\src/interruptions.c ****                 g_mem.emg_counter[i] = g_mem.emg_counter[i] + 1;
 4620              		.loc 1 1620 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 112


 4621 020a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4622 020c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4623 020e 1B49     		ldr	r1, .L349+4
 4624 0210 3032     		adds	r2, r2, #48
 4625 0212 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4626 0216 0132     		adds	r2, r2, #1
 4627 0218 1849     		ldr	r1, .L349+4
 4628 021a 3033     		adds	r3, r3, #48
 4629 021c 41F82320 		str	r2, [r1, r3, lsl #2]
1621:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 4630              		.loc 1 1621 0
 4631 0220 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4632 0222 1D4A     		ldr	r2, .L349+32
 4633 0224 0021     		movs	r1, #0
 4634 0226 D154     		strb	r1, [r2, r3]
1622:..\src/interruptions.c ****                 break;
 4635              		.loc 1 1622 0
 4636 0228 02E0     		b	.L328
 4637              	.L345:
1613:..\src/interruptions.c ****             case STATE_ACTIVE:
 4638              		.loc 1 1613 0
 4639 022a 00BF     		nop
 4640 022c 00E0     		b	.L328
 4641              	.L346:
1618:..\src/interruptions.c ****             case COUNTER_INC:
 4642              		.loc 1 1618 0
 4643 022e 00BF     		nop
 4644              	.L328:
1607:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4645              		.loc 1 1607 0 discriminator 2
 4646 0230 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4647 0232 0133     		adds	r3, r3, #1
 4648 0234 FB75     		strb	r3, [r7, #23]
 4649              	.L327:
1607:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4650              		.loc 1 1607 0 is_stmt 0 discriminator 1
 4651 0236 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4652 0238 012B     		cmp	r3, #1
 4653 023a 07D8     		bhi	.L334
1607:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4654              		.loc 1 1607 0 discriminator 3
 4655 023c 174B     		ldr	r3, .L349+36
 4656 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4657 0240 002B     		cmp	r3, #0
 4658 0242 03D1     		bne	.L334
1607:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4659              		.loc 1 1607 0 discriminator 4
 4660 0244 164B     		ldr	r3, .L349+40
 4661 0246 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4662 0248 002B     		cmp	r3, #0
 4663 024a B7D0     		beq	.L335
 4664              	.L334:
1623:..\src/interruptions.c ****         }
1624:..\src/interruptions.c ****     }
1625:..\src/interruptions.c ****     
1626:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
1627:..\src/interruptions.c ****     switch (rest_cycle_status){
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 113


 4665              		.loc 1 1627 0 is_stmt 1
 4666 024c 154B     		ldr	r3, .L349+44
 4667 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4668 0250 012B     		cmp	r3, #1
 4669 0252 2DD0     		beq	.L337
 4670 0254 022B     		cmp	r3, #2
 4671 0256 45D0     		beq	.L338
 4672 0258 002B     		cmp	r3, #0
 4673 025a 61D1     		bne	.L336
1628:..\src/interruptions.c ****         case STATE_INACTIVE:
1629:..\src/interruptions.c ****             if (rest_enabled){
 4674              		.loc 1 1629 0
 4675 025c 124B     		ldr	r3, .L349+48
 4676 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4677 0260 002B     		cmp	r3, #0
 4678 0262 5AD0     		beq	.L347
1630:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 4679              		.loc 1 1630 0
 4680 0264 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 4681 0268 0346     		mov	r3, r0
 4682 026a 1A46     		mov	r2, r3
 4683 026c 0F4B     		ldr	r3, .L349+52
 4684 026e 1A60     		str	r2, [r3]
1631:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 4685              		.loc 1 1631 0
 4686 0270 0C4B     		ldr	r3, .L349+44
 4687 0272 0122     		movs	r2, #1
 4688 0274 1A70     		strb	r2, [r3]
1632:..\src/interruptions.c ****             }
1633:..\src/interruptions.c ****             break;
 4689              		.loc 1 1633 0
 4690 0276 50E0     		b	.L347
 4691              	.L350:
 4692              		.align	2
 4693              	.L349:
 4694 0278 00000000 		.word	g_meas
 4695 027c 00000000 		.word	g_mem
 4696 0280 F8000000 		.word	pos_cycle_status.10182
 4697 0284 00000000 		.word	pwm_sign
 4698 0288 FC000000 		.word	thr_pos.10186
 4699 028c 00010000 		.word	max_pos.10187
 4700 0290 08000000 		.word	bin_threshold.10185
 4701 0294 67666666 		.word	1717986919
 4702 0298 04010000 		.word	emg_cycle_status.10183
 4703 029c 00000000 		.word	emg_1_status
 4704 02a0 00000000 		.word	emg_2_status
 4705 02a4 06010000 		.word	rest_cycle_status.10184
 4706 02a8 00000000 		.word	rest_enabled
 4707 02ac 08010000 		.word	timer_value_s.10194
 4708              	.L337:
1634:..\src/interruptions.c ****         case STATE_ACTIVE:
1635:..\src/interruptions.c ****             if (!rest_enabled){
 4709              		.loc 1 1635 0
 4710 02b0 1E4B     		ldr	r3, .L351
 4711 02b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4712 02b4 002B     		cmp	r3, #0
 4713 02b6 32D1     		bne	.L348
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 114


1636:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 4714              		.loc 1 1636 0
 4715 02b8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 4716 02bc 0346     		mov	r3, r0
 4717 02be 1A46     		mov	r2, r3
 4718 02c0 1B4B     		ldr	r3, .L351+4
 4719 02c2 1A60     		str	r2, [r3]
1637:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 4720              		.loc 1 1637 0
 4721 02c4 1B4B     		ldr	r3, .L351+8
 4722 02c6 1A68     		ldr	r2, [r3]
 4723 02c8 194B     		ldr	r3, .L351+4
 4724 02ca 1B68     		ldr	r3, [r3]
 4725 02cc 9A42     		cmp	r2, r3
 4726 02ce 05D2     		bcs	.L342
1638:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 4727              		.loc 1 1638 0
 4728 02d0 184B     		ldr	r3, .L351+8
 4729 02d2 1B68     		ldr	r3, [r3]
 4730 02d4 03F59663 		add	r3, r3, #1200
 4731 02d8 164A     		ldr	r2, .L351+8
 4732 02da 1360     		str	r3, [r2]
 4733              	.L342:
1639:..\src/interruptions.c ****                 }
1640:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 4734              		.loc 1 1640 0
 4735 02dc 164B     		ldr	r3, .L351+12
 4736 02de 0222     		movs	r2, #2
 4737 02e0 1A70     		strb	r2, [r3]
1641:..\src/interruptions.c ****             }
1642:..\src/interruptions.c ****             break;
 4738              		.loc 1 1642 0
 4739 02e2 1CE0     		b	.L348
 4740              	.L338:
1643:..\src/interruptions.c ****         case COUNTER_INC: 
1644:..\src/interruptions.c ****             g_mem.total_time_rest = g_mem.total_time_rest + (uint32)((timer_value_s - timer_value_e
 4741              		.loc 1 1644 0
 4742 02e4 154B     		ldr	r3, .L351+16
 4743 02e6 D3F80C21 		ldr	r2, [r3, #268]
 4744 02ea 124B     		ldr	r3, .L351+8
 4745 02ec 1968     		ldr	r1, [r3]
 4746 02ee 104B     		ldr	r3, .L351+4
 4747 02f0 1B68     		ldr	r3, [r3]
 4748 02f2 CB1A     		subs	r3, r1, r3
 4749 02f4 1249     		ldr	r1, .L351+20
 4750 02f6 A1FB0313 		umull	r1, r3, r1, r3
 4751 02fa DB08     		lsrs	r3, r3, #3
 4752 02fc 1344     		add	r3, r3, r2
 4753 02fe 0F4A     		ldr	r2, .L351+16
 4754 0300 C2F80C31 		str	r3, [r2, #268]
1645:..\src/interruptions.c ****             g_mem.rest_counter = g_mem.rest_counter + 1;
 4755              		.loc 1 1645 0
 4756 0304 0D4B     		ldr	r3, .L351+16
 4757 0306 D3F80031 		ldr	r3, [r3, #256]
 4758 030a 0133     		adds	r3, r3, #1
 4759 030c 0B4A     		ldr	r2, .L351+16
 4760 030e C2F80031 		str	r3, [r2, #256]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 115


1646:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 4761              		.loc 1 1646 0
 4762 0312 094B     		ldr	r3, .L351+12
 4763 0314 0022     		movs	r2, #0
 4764 0316 1A70     		strb	r2, [r3]
1647:..\src/interruptions.c ****             break;
 4765              		.loc 1 1647 0
 4766 0318 02E0     		b	.L336
 4767              	.L347:
1633:..\src/interruptions.c ****         case STATE_ACTIVE:
 4768              		.loc 1 1633 0
 4769 031a 00BF     		nop
 4770 031c 00E0     		b	.L336
 4771              	.L348:
1642:..\src/interruptions.c ****         case COUNTER_INC: 
 4772              		.loc 1 1642 0
 4773 031e 00BF     		nop
 4774              	.L336:
1648:..\src/interruptions.c ****     }
1649:..\src/interruptions.c ****           
1650:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
1651:..\src/interruptions.c ****     save_cycles_eeprom();
 4775              		.loc 1 1651 0
 4776 0320 FFF7FEFF 		bl	save_cycles_eeprom
1652:..\src/interruptions.c **** }
 4777              		.loc 1 1652 0
 4778 0324 00BF     		nop
 4779 0326 1837     		adds	r7, r7, #24
 4780              		.cfi_def_cfa_offset 8
 4781 0328 BD46     		mov	sp, r7
 4782              		.cfi_def_cfa_register 13
 4783              		@ sp needed
 4784 032a 80BD     		pop	{r7, pc}
 4785              	.L352:
 4786              		.align	2
 4787              	.L351:
 4788 032c 00000000 		.word	rest_enabled
 4789 0330 0C010000 		.word	timer_value_e.10195
 4790 0334 08010000 		.word	timer_value_s.10194
 4791 0338 06010000 		.word	rest_cycle_status.10184
 4792 033c 00000000 		.word	g_mem
 4793 0340 CDCCCCCC 		.word	-858993459
 4794              		.cfi_endproc
 4795              	.LFE73:
 4796              		.size	cycles_counter_update, .-cycles_counter_update
 4797              		.section	.text.save_cycles_eeprom,"ax",%progbits
 4798              		.align	2
 4799              		.global	save_cycles_eeprom
 4800              		.thumb
 4801              		.thumb_func
 4802              		.type	save_cycles_eeprom, %function
 4803              	save_cycles_eeprom:
 4804              	.LFB74:
1653:..\src/interruptions.c **** 
1654:..\src/interruptions.c **** //==============================================================================
1655:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
1656:..\src/interruptions.c **** //==============================================================================
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 116


1657:..\src/interruptions.c **** 
1658:..\src/interruptions.c **** void save_cycles_eeprom() {
 4805              		.loc 1 1658 0
 4806              		.cfi_startproc
 4807              		@ args = 0, pretend = 0, frame = 24
 4808              		@ frame_needed = 1, uses_anonymous_args = 0
 4809 0000 80B5     		push	{r7, lr}
 4810              		.cfi_def_cfa_offset 8
 4811              		.cfi_offset 7, -8
 4812              		.cfi_offset 14, -4
 4813 0002 86B0     		sub	sp, sp, #24
 4814              		.cfi_def_cfa_offset 32
 4815 0004 00AF     		add	r7, sp, #0
 4816              		.cfi_def_cfa_register 7
1659:..\src/interruptions.c **** 
1660:..\src/interruptions.c ****     cystatus status;
1661:..\src/interruptions.c ****     static uint8 row_number;
1662:..\src/interruptions.c ****     uint8 row_start = 12;
 4817              		.loc 1 1662 0
 4818 0006 0C23     		movs	r3, #12
 4819 0008 FB75     		strb	r3, [r7, #23]
1663:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.emg_counter[0];    //Data at beginning of the row 12
 4820              		.loc 1 1663 0
 4821 000a 394B     		ldr	r3, .L369
 4822 000c 3B61     		str	r3, [r7, #16]
1664:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.emg_counter[0];
 4823              		.loc 1 1664 0
 4824 000e 394B     		ldr	r3, .L369+4
 4825 0010 FB60     		str	r3, [r7, #12]
1665:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 4826              		.loc 1 1665 0
 4827 0012 FB7D     		ldrb	r3, [r7, #23]
 4828 0014 0533     		adds	r3, r3, #5
 4829 0016 FB72     		strb	r3, [r7, #11]
1666:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
1667:..\src/interruptions.c **** 
1668:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
1669:..\src/interruptions.c ****     switch(cycles_status) {
 4830              		.loc 1 1669 0
 4831 0018 374B     		ldr	r3, .L369+8
 4832 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4833 001c 042B     		cmp	r3, #4
 4834 001e 63D8     		bhi	.L365
 4835 0020 01A2     		adr	r2, .L356
 4836 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4837 0026 00BF     		.p2align 2
 4838              	.L356:
 4839 0028 3D000000 		.word	.L355+1
 4840 002c 5B000000 		.word	.L357+1
 4841 0030 8B000000 		.word	.L358+1
 4842 0034 C7000000 		.word	.L359+1
 4843 0038 DF000000 		.word	.L366+1
 4844              		.p2align 1
 4845              	.L355:
1670:..\src/interruptions.c ****         case PREPARE_DATA:
1671:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
1672:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 117


 4846              		.loc 1 1672 0
 4847 003c 6022     		movs	r2, #96
 4848 003e 3969     		ldr	r1, [r7, #16]
 4849 0040 F868     		ldr	r0, [r7, #12]
 4850 0042 FFF7FEFF 		bl	memcpy
1673:..\src/interruptions.c ****             m_addr = addr_start;
 4851              		.loc 1 1673 0
 4852 0046 2D4A     		ldr	r2, .L369+12
 4853 0048 3B69     		ldr	r3, [r7, #16]
 4854 004a 1360     		str	r3, [r2]
1674:..\src/interruptions.c ****             row_number = row_start;
 4855              		.loc 1 1674 0
 4856 004c 2C4A     		ldr	r2, .L369+16
 4857 004e FB7D     		ldrb	r3, [r7, #23]
 4858 0050 1370     		strb	r3, [r2]
1675:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 4859              		.loc 1 1675 0
 4860 0052 294B     		ldr	r3, .L369+8
 4861 0054 0122     		movs	r2, #1
 4862 0056 1A70     		strb	r2, [r3]
1676:..\src/interruptions.c ****             break;
 4863              		.loc 1 1676 0
 4864 0058 46E0     		b	.L354
 4865              	.L357:
1677:..\src/interruptions.c ****             
1678:..\src/interruptions.c ****         case WRITE_CYCLES:
1679:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 4866              		.loc 1 1679 0
 4867 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
1680:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 4868              		.loc 1 1680 0
 4869 005e 274B     		ldr	r3, .L369+12
 4870 0060 1A68     		ldr	r2, [r3]
 4871 0062 274B     		ldr	r3, .L369+16
 4872 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4873 0066 1946     		mov	r1, r3
 4874 0068 1046     		mov	r0, r2
 4875 006a FFF7FEFF 		bl	EEPROM_StartWrite
 4876 006e 7860     		str	r0, [r7, #4]
1681:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 4877              		.loc 1 1681 0
 4878 0070 7B68     		ldr	r3, [r7, #4]
 4879 0072 072B     		cmp	r3, #7
 4880 0074 02D0     		beq	.L361
 4881              		.loc 1 1681 0 is_stmt 0 discriminator 1
 4882 0076 7B68     		ldr	r3, [r7, #4]
 4883 0078 002B     		cmp	r3, #0
 4884 007a 32D1     		bne	.L367
 4885              	.L361:
1682:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 4886              		.loc 1 1682 0 is_stmt 1
 4887 007c 1E4B     		ldr	r3, .L369+8
 4888 007e 0222     		movs	r2, #2
 4889 0080 1A70     		strb	r2, [r3]
1683:..\src/interruptions.c ****                 can_write = FALSE;
 4890              		.loc 1 1683 0
 4891 0082 204B     		ldr	r3, .L369+20
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 118


 4892 0084 0022     		movs	r2, #0
 4893 0086 1A70     		strb	r2, [r3]
1684:..\src/interruptions.c ****             }
1685:..\src/interruptions.c ****             break;
 4894              		.loc 1 1685 0
 4895 0088 2BE0     		b	.L367
 4896              	.L358:
1686:..\src/interruptions.c ****             
1687:..\src/interruptions.c ****         case WAIT_QUERY:
1688:..\src/interruptions.c ****             status = EEPROM_Query();
 4897              		.loc 1 1688 0
 4898 008a FFF7FEFF 		bl	EEPROM_Query
 4899 008e 7860     		str	r0, [r7, #4]
1689:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 4900              		.loc 1 1689 0
 4901 0090 7B68     		ldr	r3, [r7, #4]
 4902 0092 002B     		cmp	r3, #0
 4903 0094 27D1     		bne	.L368
1690:..\src/interruptions.c ****                 if (row_number < row_end) {
 4904              		.loc 1 1690 0
 4905 0096 1A4B     		ldr	r3, .L369+16
 4906 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4907 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 4908 009c 9A42     		cmp	r2, r3
 4909 009e 0ED9     		bls	.L364
1691:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 4910              		.loc 1 1691 0
 4911 00a0 164B     		ldr	r3, .L369+12
 4912 00a2 1B68     		ldr	r3, [r3]
 4913 00a4 1033     		adds	r3, r3, #16
 4914 00a6 154A     		ldr	r2, .L369+12
 4915 00a8 1360     		str	r3, [r2]
1692:..\src/interruptions.c ****                     row_number = row_number + 1;
 4916              		.loc 1 1692 0
 4917 00aa 154B     		ldr	r3, .L369+16
 4918 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4919 00ae 0133     		adds	r3, r3, #1
 4920 00b0 DAB2     		uxtb	r2, r3
 4921 00b2 134B     		ldr	r3, .L369+16
 4922 00b4 1A70     		strb	r2, [r3]
1693:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 4923              		.loc 1 1693 0
 4924 00b6 104B     		ldr	r3, .L369+8
 4925 00b8 0122     		movs	r2, #1
 4926 00ba 1A70     		strb	r2, [r3]
1694:..\src/interruptions.c ****                 }
1695:..\src/interruptions.c ****                 else {
1696:..\src/interruptions.c ****                     cycles_status = WRITE_END;
1697:..\src/interruptions.c ****                 }
1698:..\src/interruptions.c ****             }
1699:..\src/interruptions.c ****             break;
 4927              		.loc 1 1699 0
 4928 00bc 13E0     		b	.L368
 4929              	.L364:
1696:..\src/interruptions.c ****                 }
 4930              		.loc 1 1696 0
 4931 00be 0E4B     		ldr	r3, .L369+8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 119


 4932 00c0 0322     		movs	r2, #3
 4933 00c2 1A70     		strb	r2, [r3]
 4934              		.loc 1 1699 0
 4935 00c4 0FE0     		b	.L368
 4936              	.L359:
1700:..\src/interruptions.c ****            
1701:..\src/interruptions.c ****         case WRITE_END:
1702:..\src/interruptions.c ****             can_write = TRUE;            
 4937              		.loc 1 1702 0
 4938 00c6 0F4B     		ldr	r3, .L369+20
 4939 00c8 0122     		movs	r2, #1
 4940 00ca 1A70     		strb	r2, [r3]
1703:..\src/interruptions.c ****             cycles_status = NONE;
 4941              		.loc 1 1703 0
 4942 00cc 0A4B     		ldr	r3, .L369+8
 4943 00ce 0422     		movs	r2, #4
 4944 00d0 1A70     		strb	r2, [r3]
1704:..\src/interruptions.c ****             
1705:..\src/interruptions.c ****             // Restore data saved in c_mem structure
1706:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 4945              		.loc 1 1706 0
 4946 00d2 6022     		movs	r2, #96
 4947 00d4 F968     		ldr	r1, [r7, #12]
 4948 00d6 3869     		ldr	r0, [r7, #16]
 4949 00d8 FFF7FEFF 		bl	memcpy
1707:..\src/interruptions.c ****             break;
 4950              		.loc 1 1707 0
 4951 00dc 04E0     		b	.L354
 4952              	.L366:
1708:..\src/interruptions.c ****             
1709:..\src/interruptions.c ****         case NONE:
1710:..\src/interruptions.c ****             break;
 4953              		.loc 1 1710 0
 4954 00de 00BF     		nop
 4955 00e0 02E0     		b	.L365
 4956              	.L367:
1685:..\src/interruptions.c ****             
 4957              		.loc 1 1685 0
 4958 00e2 00BF     		nop
 4959 00e4 00E0     		b	.L365
 4960              	.L368:
1699:..\src/interruptions.c ****            
 4961              		.loc 1 1699 0
 4962 00e6 00BF     		nop
 4963              	.L354:
 4964              	.L365:
1711:..\src/interruptions.c ****     }
1712:..\src/interruptions.c ****     
1713:..\src/interruptions.c **** }
 4965              		.loc 1 1713 0
 4966 00e8 00BF     		nop
 4967 00ea 1837     		adds	r7, r7, #24
 4968              		.cfi_def_cfa_offset 8
 4969 00ec BD46     		mov	sp, r7
 4970              		.cfi_def_cfa_register 13
 4971              		@ sp needed
 4972 00ee 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 120


 4973              	.L370:
 4974              		.align	2
 4975              	.L369:
 4976 00f0 C0000000 		.word	g_mem+192
 4977 00f4 C0000000 		.word	c_mem+192
 4978 00f8 00000000 		.word	cycles_status
 4979 00fc 10010000 		.word	m_addr.10222
 4980 0100 14010000 		.word	row_number.10217
 4981 0104 00000000 		.word	can_write
 4982              		.cfi_endproc
 4983              	.LFE74:
 4984              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 4985              		.bss
 4986              	state.10043:
 4987 0000 00       		.space	1
 4988 0001 000000   		.align	2
 4989              	rx_queue.10047:
 4990 0004 000000   		.space	3
 4991              	data_packet_length.10045:
 4992 0007 00       		.space	1
 4993              	data_packet_index.10044:
 4994 0008 00       		.space	1
 4995 0009 000000   		.align	2
 4996              	data_packet_buffer.10046:
 4997 000c 00000000 		.space	128
 4997      00000000 
 4997      00000000 
 4997      00000000 
 4997      00000000 
 4998              		.data
 4999              		.align	1
 5000              		.type	counter_calibration.10063, %object
 5001              		.size	counter_calibration.10063, 2
 5002              	counter_calibration.10063:
 5003 0000 0100     		.short	1
 5004              		.align	1
 5005              		.type	counter_tension_func.10064, %object
 5006              		.size	counter_tension_func.10064, 2
 5007              	counter_tension_func.10064:
 5008 0002 0100     		.short	1
 5009              		.bss
 5010              	current_emg.10096:
 5011 008c 00       		.space	1
 5012 008d 000000   		.align	2
 5013              	pos_error_sum.10089:
 5014 0090 00000000 		.space	4
 5015              		.align	2
 5016              	prev_pos_err.10091:
 5017 0094 00000000 		.space	4
 5018              	motor_dir.10094:
 5019 0098 00       		.space	1
 5020 0099 000000   		.align	2
 5021              	curr_error_sum.10090:
 5022 009c 00000000 		.space	4
 5023              		.align	2
 5024              	prev_curr_err.10092:
 5025 00a0 00000000 		.space	4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 121


 5026              		.align	2
 5027              	prev_pwm.10093:
 5028 00a4 00000000 		.space	4
 5029              		.align	2
 5030              	position_counter.10095:
 5031 00a8 00000000 		.space	4
 5032              		.align	2
 5033              	last_value_encoder.10130:
 5034 00ac 00000000 		.space	12
 5034      00000000 
 5034      00000000 
 5035              		.align	2
 5036              	comp_value_encoder.10131:
 5037 00b8 00000000 		.space	12
 5037      00000000 
 5037      00000000 
 5038              		.data
 5039              		.type	only_first_time.10133, %object
 5040              		.size	only_first_time.10133, 1
 5041              	only_first_time.10133:
 5042 0004 01       		.byte	1
 5043              		.bss
 5044              		.align	2
 5045              	error.10132:
 5046 00c4 000000   		.space	3
 5047 00c7 00       		.align	2
 5048              	v_value.10136:
 5049 00c8 00000000 		.space	12
 5049      00000000 
 5049      00000000 
 5050              		.align	2
 5051              	vv_value.10137:
 5052 00d4 00000000 		.space	12
 5052      00000000 
 5052      00000000 
 5053              		.align	2
 5054              	vvv_value.10138:
 5055 00e0 00000000 		.space	12
 5055      00000000 
 5055      00000000 
 5056              	pos_reconstruct.10135:
 5057 00ec 00       		.space	1
 5058              	one_time_execute.10134:
 5059 00ed 00       		.space	1
 5060              		.data
 5061              		.type	first_tension_valid.10153, %object
 5062              		.size	first_tension_valid.10153, 1
 5063              	first_tension_valid.10153:
 5064 0005 01       		.byte	1
 5065              		.bss
 5066              		.align	1
 5067              	count.10154:
 5068 00ee 0000     		.space	2
 5069              		.align	2
 5070              	v_count.10155:
 5071 00f0 00000000 		.space	4
 5072              		.align	1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 122


 5073              	emg_counter_1.10151:
 5074 00f4 0000     		.space	2
 5075              		.align	1
 5076              	emg_counter_2.10152:
 5077 00f6 0000     		.space	2
 5078              	pos_cycle_status.10182:
 5079 00f8 00       		.space	1
 5080 00f9 000000   		.align	2
 5081              	thr_pos.10186:
 5082 00fc 00000000 		.space	4
 5083              		.align	2
 5084              	max_pos.10187:
 5085 0100 00000000 		.space	4
 5086              		.data
 5087 0006 0000     		.align	2
 5088              		.type	bin_threshold.10185, %object
 5089              		.size	bin_threshold.10185, 4
 5090              	bin_threshold.10185:
 5091 0008 FA000000 		.word	250
 5092              		.bss
 5093              		.align	2
 5094              	emg_cycle_status.10183:
 5095 0104 0000     		.space	2
 5096              	rest_cycle_status.10184:
 5097 0106 00       		.space	1
 5098 0107 00       		.align	2
 5099              	timer_value_s.10194:
 5100 0108 00000000 		.space	4
 5101              		.align	2
 5102              	timer_value_e.10195:
 5103 010c 00000000 		.space	4
 5104              		.align	2
 5105              	m_addr.10222:
 5106 0110 00000000 		.space	4
 5107              	row_number.10217:
 5108 0114 00       		.space	1
 5109              		.text
 5110              	.Letext0:
 5111              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5112              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5113              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5114              		.file 5 "..\\src\\commands.h"
 5115              		.file 6 "..\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 5116              		.file 7 "..\\src\\globals.h"
 5117              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 5118              		.section	.debug_info,"",%progbits
 5119              	.Ldebug_info0:
 5120 0000 BB100000 		.4byte	0x10bb
 5121 0004 0400     		.2byte	0x4
 5122 0006 00000000 		.4byte	.Ldebug_abbrev0
 5123 000a 04       		.byte	0x4
 5124 000b 01       		.uleb128 0x1
 5125 000c 7A060000 		.4byte	.LASF256
 5126 0010 0C       		.byte	0xc
 5127 0011 070C0000 		.4byte	.LASF257
 5128 0015 7B020000 		.4byte	.LASF258
 5129 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 123


 5130 001d 00000000 		.4byte	0
 5131 0021 00000000 		.4byte	.Ldebug_line0
 5132 0025 02       		.uleb128 0x2
 5133 0026 01       		.byte	0x1
 5134 0027 06       		.byte	0x6
 5135 0028 C0020000 		.4byte	.LASF0
 5136 002c 02       		.uleb128 0x2
 5137 002d 01       		.byte	0x1
 5138 002e 08       		.byte	0x8
 5139 002f 39030000 		.4byte	.LASF1
 5140 0033 02       		.uleb128 0x2
 5141 0034 02       		.byte	0x2
 5142 0035 05       		.byte	0x5
 5143 0036 E20A0000 		.4byte	.LASF2
 5144 003a 02       		.uleb128 0x2
 5145 003b 02       		.byte	0x2
 5146 003c 07       		.byte	0x7
 5147 003d ED0B0000 		.4byte	.LASF3
 5148 0041 03       		.uleb128 0x3
 5149 0042 590C0000 		.4byte	.LASF9
 5150 0046 02       		.byte	0x2
 5151 0047 3F       		.byte	0x3f
 5152 0048 4C000000 		.4byte	0x4c
 5153 004c 02       		.uleb128 0x2
 5154 004d 04       		.byte	0x4
 5155 004e 05       		.byte	0x5
 5156 004f D8010000 		.4byte	.LASF4
 5157 0053 02       		.uleb128 0x2
 5158 0054 04       		.byte	0x4
 5159 0055 07       		.byte	0x7
 5160 0056 AE050000 		.4byte	.LASF5
 5161 005a 02       		.uleb128 0x2
 5162 005b 08       		.byte	0x8
 5163 005c 05       		.byte	0x5
 5164 005d 2A070000 		.4byte	.LASF6
 5165 0061 02       		.uleb128 0x2
 5166 0062 08       		.byte	0x8
 5167 0063 07       		.byte	0x7
 5168 0064 59090000 		.4byte	.LASF7
 5169 0068 04       		.uleb128 0x4
 5170 0069 04       		.byte	0x4
 5171 006a 05       		.byte	0x5
 5172 006b 696E7400 		.ascii	"int\000"
 5173 006f 02       		.uleb128 0x2
 5174 0070 04       		.byte	0x4
 5175 0071 07       		.byte	0x7
 5176 0072 D0070000 		.4byte	.LASF8
 5177 0076 03       		.uleb128 0x3
 5178 0077 48000000 		.4byte	.LASF10
 5179 007b 03       		.byte	0x3
 5180 007c 2C       		.byte	0x2c
 5181 007d 41000000 		.4byte	0x41
 5182 0081 05       		.uleb128 0x5
 5183 0082 D10A0000 		.4byte	.LASF11
 5184 0086 04       		.byte	0x4
 5185 0087 E401     		.2byte	0x1e4
 5186 0089 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 124


 5187 008d 05       		.uleb128 0x5
 5188 008e A60C0000 		.4byte	.LASF12
 5189 0092 04       		.byte	0x4
 5190 0093 E501     		.2byte	0x1e5
 5191 0095 3A000000 		.4byte	0x3a
 5192 0099 05       		.uleb128 0x5
 5193 009a 6E000000 		.4byte	.LASF13
 5194 009e 04       		.byte	0x4
 5195 009f E601     		.2byte	0x1e6
 5196 00a1 53000000 		.4byte	0x53
 5197 00a5 05       		.uleb128 0x5
 5198 00a6 29010000 		.4byte	.LASF14
 5199 00aa 04       		.byte	0x4
 5200 00ab E701     		.2byte	0x1e7
 5201 00ad 25000000 		.4byte	0x25
 5202 00b1 05       		.uleb128 0x5
 5203 00b2 420B0000 		.4byte	.LASF15
 5204 00b6 04       		.byte	0x4
 5205 00b7 E801     		.2byte	0x1e8
 5206 00b9 33000000 		.4byte	0x33
 5207 00bd 05       		.uleb128 0x5
 5208 00be 1E0C0000 		.4byte	.LASF16
 5209 00c2 04       		.byte	0x4
 5210 00c3 E901     		.2byte	0x1e9
 5211 00c5 4C000000 		.4byte	0x4c
 5212 00c9 05       		.uleb128 0x5
 5213 00ca 16020000 		.4byte	.LASF17
 5214 00ce 04       		.byte	0x4
 5215 00cf EA01     		.2byte	0x1ea
 5216 00d1 D5000000 		.4byte	0xd5
 5217 00d5 02       		.uleb128 0x2
 5218 00d6 04       		.byte	0x4
 5219 00d7 04       		.byte	0x4
 5220 00d8 AE070000 		.4byte	.LASF18
 5221 00dc 02       		.uleb128 0x2
 5222 00dd 08       		.byte	0x8
 5223 00de 04       		.byte	0x4
 5224 00df 68070000 		.4byte	.LASF19
 5225 00e3 02       		.uleb128 0x2
 5226 00e4 01       		.byte	0x1
 5227 00e5 08       		.byte	0x8
 5228 00e6 C1030000 		.4byte	.LASF20
 5229 00ea 05       		.uleb128 0x5
 5230 00eb 09080000 		.4byte	.LASF21
 5231 00ef 04       		.byte	0x4
 5232 00f0 8602     		.2byte	0x286
 5233 00f2 53000000 		.4byte	0x53
 5234 00f6 05       		.uleb128 0x5
 5235 00f7 EE090000 		.4byte	.LASF22
 5236 00fb 04       		.byte	0x4
 5237 00fc 8E02     		.2byte	0x28e
 5238 00fe 02010000 		.4byte	0x102
 5239 0102 06       		.uleb128 0x6
 5240 0103 81000000 		.4byte	0x81
 5241 0107 02       		.uleb128 0x2
 5242 0108 08       		.byte	0x8
 5243 0109 04       		.byte	0x4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 125


 5244 010a 88080000 		.4byte	.LASF23
 5245 010e 02       		.uleb128 0x2
 5246 010f 04       		.byte	0x4
 5247 0110 07       		.byte	0x7
 5248 0111 00000000 		.4byte	.LASF24
 5249 0115 07       		.uleb128 0x7
 5250 0116 930C0000 		.4byte	.LASF31
 5251 011a 01       		.byte	0x1
 5252 011b 2C000000 		.4byte	0x2c
 5253 011f 05       		.byte	0x5
 5254 0120 84       		.byte	0x84
 5255 0121 4A010000 		.4byte	0x14a
 5256 0125 08       		.uleb128 0x8
 5257 0126 47050000 		.4byte	.LASF25
 5258 012a 00       		.byte	0
 5259 012b 08       		.uleb128 0x8
 5260 012c 12080000 		.4byte	.LASF26
 5261 0130 01       		.byte	0x1
 5262 0131 08       		.uleb128 0x8
 5263 0132 81010000 		.4byte	.LASF27
 5264 0136 02       		.byte	0x2
 5265 0137 08       		.uleb128 0x8
 5266 0138 F7000000 		.4byte	.LASF28
 5267 013c 03       		.byte	0x3
 5268 013d 08       		.uleb128 0x8
 5269 013e C0000000 		.4byte	.LASF29
 5270 0142 04       		.byte	0x4
 5271 0143 08       		.uleb128 0x8
 5272 0144 1A000000 		.4byte	.LASF30
 5273 0148 05       		.byte	0x5
 5274 0149 00       		.byte	0
 5275 014a 07       		.uleb128 0x7
 5276 014b 38070000 		.4byte	.LASF32
 5277 014f 01       		.byte	0x1
 5278 0150 2C000000 		.4byte	0x2c
 5279 0154 05       		.byte	0x5
 5280 0155 96       		.byte	0x96
 5281 0156 73010000 		.4byte	0x173
 5282 015a 08       		.uleb128 0x8
 5283 015b 4B0C0000 		.4byte	.LASF33
 5284 015f 00       		.byte	0
 5285 0160 08       		.uleb128 0x8
 5286 0161 51060000 		.4byte	.LASF34
 5287 0165 01       		.byte	0x1
 5288 0166 08       		.uleb128 0x8
 5289 0167 78080000 		.4byte	.LASF35
 5290 016b 02       		.byte	0x2
 5291 016c 08       		.uleb128 0x8
 5292 016d 91050000 		.4byte	.LASF36
 5293 0171 03       		.byte	0x3
 5294 0172 00       		.byte	0
 5295 0173 03       		.uleb128 0x3
 5296 0174 240C0000 		.4byte	.LASF37
 5297 0178 06       		.byte	0x6
 5298 0179 7E       		.byte	0x7e
 5299 017a 7E010000 		.4byte	0x17e
 5300 017e 09       		.uleb128 0x9
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 126


 5301 017f 240C0000 		.4byte	.LASF37
 5302 0183 0A       		.uleb128 0xa
 5303 0184 04       		.byte	0x4
 5304 0185 73010000 		.4byte	0x173
 5305 0189 0B       		.uleb128 0xb
 5306 018a 08070000 		.4byte	.LASF40
 5307 018e 10       		.byte	0x10
 5308 018f 07       		.byte	0x7
 5309 0190 A2       		.byte	0xa2
 5310 0191 C6010000 		.4byte	0x1c6
 5311 0195 0C       		.uleb128 0xc
 5312 0196 706F7300 		.ascii	"pos\000"
 5313 019a 07       		.byte	0x7
 5314 019b A3       		.byte	0xa3
 5315 019c BD000000 		.4byte	0xbd
 5316 01a0 00       		.byte	0
 5317 01a1 0D       		.uleb128 0xd
 5318 01a2 36060000 		.4byte	.LASF38
 5319 01a6 07       		.byte	0x7
 5320 01a7 A4       		.byte	0xa4
 5321 01a8 BD000000 		.4byte	0xbd
 5322 01ac 04       		.byte	0x4
 5323 01ad 0C       		.uleb128 0xc
 5324 01ae 70776D00 		.ascii	"pwm\000"
 5325 01b2 07       		.byte	0x7
 5326 01b3 A5       		.byte	0xa5
 5327 01b4 BD000000 		.4byte	0xbd
 5328 01b8 08       		.byte	0x8
 5329 01b9 0D       		.uleb128 0xd
 5330 01ba 97090000 		.4byte	.LASF39
 5331 01be 07       		.byte	0x7
 5332 01bf A6       		.byte	0xa6
 5333 01c0 81000000 		.4byte	0x81
 5334 01c4 0C       		.byte	0xc
 5335 01c5 00       		.byte	0
 5336 01c6 0B       		.uleb128 0xb
 5337 01c7 6A0A0000 		.4byte	.LASF41
 5338 01cb 38       		.byte	0x38
 5339 01cc 07       		.byte	0x7
 5340 01cd AD       		.byte	0xad
 5341 01ce 27020000 		.4byte	0x227
 5342 01d2 0C       		.uleb128 0xc
 5343 01d3 706F7300 		.ascii	"pos\000"
 5344 01d7 07       		.byte	0x7
 5345 01d8 AE       		.byte	0xae
 5346 01d9 27020000 		.4byte	0x227
 5347 01dd 00       		.byte	0
 5348 01de 0D       		.uleb128 0xd
 5349 01df 36060000 		.4byte	.LASF38
 5350 01e3 07       		.byte	0x7
 5351 01e4 AF       		.byte	0xaf
 5352 01e5 BD000000 		.4byte	0xbd
 5353 01e9 0C       		.byte	0xc
 5354 01ea 0D       		.uleb128 0xd
 5355 01eb 790B0000 		.4byte	.LASF42
 5356 01ef 07       		.byte	0x7
 5357 01f0 B0       		.byte	0xb0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 127


 5358 01f1 BD000000 		.4byte	0xbd
 5359 01f5 10       		.byte	0x10
 5360 01f6 0C       		.uleb128 0xc
 5361 01f7 726F7400 		.ascii	"rot\000"
 5362 01fb 07       		.byte	0x7
 5363 01fc B1       		.byte	0xb1
 5364 01fd 37020000 		.4byte	0x237
 5365 0201 14       		.byte	0x14
 5366 0202 0C       		.uleb128 0xc
 5367 0203 656D6700 		.ascii	"emg\000"
 5368 0207 07       		.byte	0x7
 5369 0208 B3       		.byte	0xb3
 5370 0209 47020000 		.4byte	0x247
 5371 020d 18       		.byte	0x18
 5372 020e 0C       		.uleb128 0xc
 5373 020f 76656C00 		.ascii	"vel\000"
 5374 0213 07       		.byte	0x7
 5375 0214 B4       		.byte	0xb4
 5376 0215 27020000 		.4byte	0x227
 5377 0219 20       		.byte	0x20
 5378 021a 0C       		.uleb128 0xc
 5379 021b 61636300 		.ascii	"acc\000"
 5380 021f 07       		.byte	0x7
 5381 0220 B5       		.byte	0xb5
 5382 0221 27020000 		.4byte	0x227
 5383 0225 2C       		.byte	0x2c
 5384 0226 00       		.byte	0
 5385 0227 0E       		.uleb128 0xe
 5386 0228 BD000000 		.4byte	0xbd
 5387 022c 37020000 		.4byte	0x237
 5388 0230 0F       		.uleb128 0xf
 5389 0231 0E010000 		.4byte	0x10e
 5390 0235 02       		.byte	0x2
 5391 0236 00       		.byte	0
 5392 0237 0E       		.uleb128 0xe
 5393 0238 A5000000 		.4byte	0xa5
 5394 023c 47020000 		.4byte	0x247
 5395 0240 0F       		.uleb128 0xf
 5396 0241 0E010000 		.4byte	0x10e
 5397 0245 02       		.byte	0x2
 5398 0246 00       		.byte	0
 5399 0247 0E       		.uleb128 0xe
 5400 0248 BD000000 		.4byte	0xbd
 5401 024c 57020000 		.4byte	0x257
 5402 0250 0F       		.uleb128 0xf
 5403 0251 0E010000 		.4byte	0x10e
 5404 0255 01       		.byte	0x1
 5405 0256 00       		.byte	0
 5406 0257 0B       		.uleb128 0xb
 5407 0258 66000000 		.4byte	.LASF43
 5408 025c 86       		.byte	0x86
 5409 025d 07       		.byte	0x7
 5410 025e BC       		.byte	0xbc
 5411 025f 94020000 		.4byte	0x294
 5412 0263 0D       		.uleb128 0xd
 5413 0264 76040000 		.4byte	.LASF44
 5414 0268 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 128


 5415 0269 BD       		.byte	0xbd
 5416 026a 94020000 		.4byte	0x294
 5417 026e 00       		.byte	0
 5418 026f 0D       		.uleb128 0xd
 5419 0270 7A090000 		.4byte	.LASF45
 5420 0274 07       		.byte	0x7
 5421 0275 BE       		.byte	0xbe
 5422 0276 B1000000 		.4byte	0xb1
 5423 027a 80       		.byte	0x80
 5424 027b 0C       		.uleb128 0xc
 5425 027c 696E6400 		.ascii	"ind\000"
 5426 0280 07       		.byte	0x7
 5427 0281 BF       		.byte	0xbf
 5428 0282 B1000000 		.4byte	0xb1
 5429 0286 82       		.byte	0x82
 5430 0287 0D       		.uleb128 0xd
 5431 0288 76010000 		.4byte	.LASF46
 5432 028c 07       		.byte	0x7
 5433 028d C0       		.byte	0xc0
 5434 028e 81000000 		.4byte	0x81
 5435 0292 84       		.byte	0x84
 5436 0293 00       		.byte	0
 5437 0294 0E       		.uleb128 0xe
 5438 0295 81000000 		.4byte	0x81
 5439 0299 A4020000 		.4byte	0x2a4
 5440 029d 0F       		.uleb128 0xf
 5441 029e 0E010000 		.4byte	0x10e
 5442 02a2 7F       		.byte	0x7f
 5443 02a3 00       		.byte	0
 5444 02a4 10       		.uleb128 0x10
 5445 02a5 73060000 		.4byte	.LASF47
 5446 02a9 3001     		.2byte	0x130
 5447 02ab 07       		.byte	0x7
 5448 02ac C8       		.byte	0xc8
 5449 02ad 82050000 		.4byte	0x582
 5450 02b1 0D       		.uleb128 0xd
 5451 02b2 F7070000 		.4byte	.LASF48
 5452 02b6 07       		.byte	0x7
 5453 02b7 C9       		.byte	0xc9
 5454 02b8 81000000 		.4byte	0x81
 5455 02bc 00       		.byte	0
 5456 02bd 0C       		.uleb128 0xc
 5457 02be 696400   		.ascii	"id\000"
 5458 02c1 07       		.byte	0x7
 5459 02c2 CA       		.byte	0xca
 5460 02c3 81000000 		.4byte	0x81
 5461 02c7 01       		.byte	0x1
 5462 02c8 0C       		.uleb128 0xc
 5463 02c9 6B5F7000 		.ascii	"k_p\000"
 5464 02cd 07       		.byte	0x7
 5465 02ce CC       		.byte	0xcc
 5466 02cf BD000000 		.4byte	0xbd
 5467 02d3 04       		.byte	0x4
 5468 02d4 0C       		.uleb128 0xc
 5469 02d5 6B5F6900 		.ascii	"k_i\000"
 5470 02d9 07       		.byte	0x7
 5471 02da CD       		.byte	0xcd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 129


 5472 02db BD000000 		.4byte	0xbd
 5473 02df 08       		.byte	0x8
 5474 02e0 0C       		.uleb128 0xc
 5475 02e1 6B5F6400 		.ascii	"k_d\000"
 5476 02e5 07       		.byte	0x7
 5477 02e6 CE       		.byte	0xce
 5478 02e7 BD000000 		.4byte	0xbd
 5479 02eb 0C       		.byte	0xc
 5480 02ec 0D       		.uleb128 0xd
 5481 02ed D3090000 		.4byte	.LASF49
 5482 02f1 07       		.byte	0x7
 5483 02f2 D0       		.byte	0xd0
 5484 02f3 BD000000 		.4byte	0xbd
 5485 02f7 10       		.byte	0x10
 5486 02f8 0D       		.uleb128 0xd
 5487 02f9 F2030000 		.4byte	.LASF50
 5488 02fd 07       		.byte	0x7
 5489 02fe D1       		.byte	0xd1
 5490 02ff BD000000 		.4byte	0xbd
 5491 0303 14       		.byte	0x14
 5492 0304 0D       		.uleb128 0xd
 5493 0305 E5030000 		.4byte	.LASF51
 5494 0309 07       		.byte	0x7
 5495 030a D2       		.byte	0xd2
 5496 030b BD000000 		.4byte	0xbd
 5497 030f 18       		.byte	0x18
 5498 0310 0D       		.uleb128 0xd
 5499 0311 720B0000 		.4byte	.LASF52
 5500 0315 07       		.byte	0x7
 5501 0316 D3       		.byte	0xd3
 5502 0317 BD000000 		.4byte	0xbd
 5503 031b 1C       		.byte	0x1c
 5504 031c 0D       		.uleb128 0xd
 5505 031d 6F040000 		.4byte	.LASF53
 5506 0321 07       		.byte	0x7
 5507 0322 D5       		.byte	0xd5
 5508 0323 BD000000 		.4byte	0xbd
 5509 0327 20       		.byte	0x20
 5510 0328 0D       		.uleb128 0xd
 5511 0329 EC0A0000 		.4byte	.LASF54
 5512 032d 07       		.byte	0x7
 5513 032e D6       		.byte	0xd6
 5514 032f BD000000 		.4byte	0xbd
 5515 0333 24       		.byte	0x24
 5516 0334 0D       		.uleb128 0xd
 5517 0335 7D040000 		.4byte	.LASF55
 5518 0339 07       		.byte	0x7
 5519 033a D7       		.byte	0xd7
 5520 033b BD000000 		.4byte	0xbd
 5521 033f 28       		.byte	0x28
 5522 0340 0D       		.uleb128 0xd
 5523 0341 7A050000 		.4byte	.LASF56
 5524 0345 07       		.byte	0x7
 5525 0346 D8       		.byte	0xd8
 5526 0347 BD000000 		.4byte	0xbd
 5527 034b 2C       		.byte	0x2c
 5528 034c 0D       		.uleb128 0xd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 130


 5529 034d CB0C0000 		.4byte	.LASF57
 5530 0351 07       		.byte	0x7
 5531 0352 DA       		.byte	0xda
 5532 0353 BD000000 		.4byte	0xbd
 5533 0357 30       		.byte	0x30
 5534 0358 0D       		.uleb128 0xd
 5535 0359 00060000 		.4byte	.LASF58
 5536 035d 07       		.byte	0x7
 5537 035e DB       		.byte	0xdb
 5538 035f 81000000 		.4byte	0x81
 5539 0363 34       		.byte	0x34
 5540 0364 0D       		.uleb128 0xd
 5541 0365 46060000 		.4byte	.LASF59
 5542 0369 07       		.byte	0x7
 5543 036a DC       		.byte	0xdc
 5544 036b 81000000 		.4byte	0x81
 5545 036f 35       		.byte	0x35
 5546 0370 0D       		.uleb128 0xd
 5547 0371 FC070000 		.4byte	.LASF60
 5548 0375 07       		.byte	0x7
 5549 0376 DD       		.byte	0xdd
 5550 0377 81000000 		.4byte	0x81
 5551 037b 36       		.byte	0x36
 5552 037c 0C       		.uleb128 0xc
 5553 037d 72657300 		.ascii	"res\000"
 5554 0381 07       		.byte	0x7
 5555 0382 DE       		.byte	0xde
 5556 0383 82050000 		.4byte	0x582
 5557 0387 37       		.byte	0x37
 5558 0388 0D       		.uleb128 0xd
 5559 0389 06060000 		.4byte	.LASF61
 5560 038d 07       		.byte	0x7
 5561 038e E0       		.byte	0xe0
 5562 038f 27020000 		.4byte	0x227
 5563 0393 3C       		.byte	0x3c
 5564 0394 0D       		.uleb128 0xd
 5565 0395 EB030000 		.4byte	.LASF62
 5566 0399 07       		.byte	0x7
 5567 039a E2       		.byte	0xe2
 5568 039b 92050000 		.4byte	0x592
 5569 039f 48       		.byte	0x48
 5570 03a0 0D       		.uleb128 0xd
 5571 03a1 2C0C0000 		.4byte	.LASF63
 5572 03a5 07       		.byte	0x7
 5573 03a6 E4       		.byte	0xe4
 5574 03a7 81000000 		.4byte	0x81
 5575 03ab 54       		.byte	0x54
 5576 03ac 0D       		.uleb128 0xd
 5577 03ad 75000000 		.4byte	.LASF64
 5578 03b1 07       		.byte	0x7
 5579 03b2 E6       		.byte	0xe6
 5580 03b3 BD000000 		.4byte	0xbd
 5581 03b7 58       		.byte	0x58
 5582 03b8 0D       		.uleb128 0xd
 5583 03b9 1D040000 		.4byte	.LASF65
 5584 03bd 07       		.byte	0x7
 5585 03be E7       		.byte	0xe7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 131


 5586 03bf BD000000 		.4byte	0xbd
 5587 03c3 5C       		.byte	0x5c
 5588 03c4 0D       		.uleb128 0xd
 5589 03c5 9C070000 		.4byte	.LASF66
 5590 03c9 07       		.byte	0x7
 5591 03ca E9       		.byte	0xe9
 5592 03cb BD000000 		.4byte	0xbd
 5593 03cf 60       		.byte	0x60
 5594 03d0 0D       		.uleb128 0xd
 5595 03d1 C6030000 		.4byte	.LASF67
 5596 03d5 07       		.byte	0x7
 5597 03d6 EA       		.byte	0xea
 5598 03d7 BD000000 		.4byte	0xbd
 5599 03db 64       		.byte	0x64
 5600 03dc 0D       		.uleb128 0xd
 5601 03dd 850C0000 		.4byte	.LASF68
 5602 03e1 07       		.byte	0x7
 5603 03e2 EB       		.byte	0xeb
 5604 03e3 B1000000 		.4byte	0xb1
 5605 03e7 68       		.byte	0x68
 5606 03e8 0D       		.uleb128 0xd
 5607 03e9 41080000 		.4byte	.LASF69
 5608 03ed 07       		.byte	0x7
 5609 03ee EC       		.byte	0xec
 5610 03ef A2050000 		.4byte	0x5a2
 5611 03f3 6A       		.byte	0x6a
 5612 03f4 0D       		.uleb128 0xd
 5613 03f5 550A0000 		.4byte	.LASF70
 5614 03f9 07       		.byte	0x7
 5615 03fa ED       		.byte	0xed
 5616 03fb 81000000 		.4byte	0x81
 5617 03ff 6E       		.byte	0x6e
 5618 0400 0D       		.uleb128 0xd
 5619 0401 770C0000 		.4byte	.LASF71
 5620 0405 07       		.byte	0x7
 5621 0406 F0       		.byte	0xf0
 5622 0407 B2050000 		.4byte	0x5b2
 5623 040b 70       		.byte	0x70
 5624 040c 0D       		.uleb128 0xd
 5625 040d 33040000 		.4byte	.LASF72
 5626 0411 07       		.byte	0x7
 5627 0412 F1       		.byte	0xf1
 5628 0413 81000000 		.4byte	0x81
 5629 0417 78       		.byte	0x78
 5630 0418 0D       		.uleb128 0xd
 5631 0419 05090000 		.4byte	.LASF73
 5632 041d 07       		.byte	0x7
 5633 041e F2       		.byte	0xf2
 5634 041f 81000000 		.4byte	0x81
 5635 0423 79       		.byte	0x79
 5636 0424 0D       		.uleb128 0xd
 5637 0425 C0080000 		.4byte	.LASF74
 5638 0429 07       		.byte	0x7
 5639 042a F3       		.byte	0xf3
 5640 042b A5000000 		.4byte	0xa5
 5641 042f 7A       		.byte	0x7a
 5642 0430 0D       		.uleb128 0xd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 132


 5643 0431 5B0B0000 		.4byte	.LASF75
 5644 0435 07       		.byte	0x7
 5645 0436 F4       		.byte	0xf4
 5646 0437 81000000 		.4byte	0x81
 5647 043b 7B       		.byte	0x7b
 5648 043c 0D       		.uleb128 0xd
 5649 043d D4000000 		.4byte	.LASF76
 5650 0441 07       		.byte	0x7
 5651 0442 F5       		.byte	0xf5
 5652 0443 C2050000 		.4byte	0x5c2
 5653 0447 7C       		.byte	0x7c
 5654 0448 0D       		.uleb128 0xd
 5655 0449 D40B0000 		.4byte	.LASF77
 5656 044d 07       		.byte	0x7
 5657 044e F8       		.byte	0xf8
 5658 044f 81000000 		.4byte	0x81
 5659 0453 94       		.byte	0x94
 5660 0454 0D       		.uleb128 0xd
 5661 0455 70090000 		.4byte	.LASF78
 5662 0459 07       		.byte	0x7
 5663 045a F9       		.byte	0xf9
 5664 045b 81000000 		.4byte	0x81
 5665 045f 95       		.byte	0x95
 5666 0460 0D       		.uleb128 0xd
 5667 0461 48070000 		.4byte	.LASF79
 5668 0465 07       		.byte	0x7
 5669 0466 FA       		.byte	0xfa
 5670 0467 81000000 		.4byte	0x81
 5671 046b 96       		.byte	0x96
 5672 046c 0D       		.uleb128 0xd
 5673 046d 1B090000 		.4byte	.LASF80
 5674 0471 07       		.byte	0x7
 5675 0472 FB       		.byte	0xfb
 5676 0473 81000000 		.4byte	0x81
 5677 0477 97       		.byte	0x97
 5678 0478 0D       		.uleb128 0xd
 5679 0479 2D060000 		.4byte	.LASF81
 5680 047d 07       		.byte	0x7
 5681 047e FC       		.byte	0xfc
 5682 047f BD000000 		.4byte	0xbd
 5683 0483 98       		.byte	0x98
 5684 0484 0D       		.uleb128 0xd
 5685 0485 AD0C0000 		.4byte	.LASF82
 5686 0489 07       		.byte	0x7
 5687 048a FD       		.byte	0xfd
 5688 048b BD000000 		.4byte	0xbd
 5689 048f 9C       		.byte	0x9c
 5690 0490 0D       		.uleb128 0xd
 5691 0491 3D040000 		.4byte	.LASF83
 5692 0495 07       		.byte	0x7
 5693 0496 FF       		.byte	0xff
 5694 0497 BD000000 		.4byte	0xbd
 5695 049b A0       		.byte	0xa0
 5696 049c 11       		.uleb128 0x11
 5697 049d 61050000 		.4byte	.LASF84
 5698 04a1 07       		.byte	0x7
 5699 04a2 0001     		.2byte	0x100
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 133


 5700 04a4 81000000 		.4byte	0x81
 5701 04a8 A4       		.byte	0xa4
 5702 04a9 11       		.uleb128 0x11
 5703 04aa E9020000 		.4byte	.LASF85
 5704 04ae 07       		.byte	0x7
 5705 04af 0101     		.2byte	0x101
 5706 04b1 81000000 		.4byte	0x81
 5707 04b5 A5       		.byte	0xa5
 5708 04b6 11       		.uleb128 0x11
 5709 04b7 96030000 		.4byte	.LASF86
 5710 04bb 07       		.byte	0x7
 5711 04bc 0201     		.2byte	0x102
 5712 04be 81000000 		.4byte	0x81
 5713 04c2 A6       		.byte	0xa6
 5714 04c3 11       		.uleb128 0x11
 5715 04c4 AA010000 		.4byte	.LASF87
 5716 04c8 07       		.byte	0x7
 5717 04c9 0301     		.2byte	0x103
 5718 04cb 81000000 		.4byte	0x81
 5719 04cf A7       		.byte	0xa7
 5720 04d0 11       		.uleb128 0x11
 5721 04d1 480B0000 		.4byte	.LASF88
 5722 04d5 07       		.byte	0x7
 5723 04d6 0401     		.2byte	0x104
 5724 04d8 81000000 		.4byte	0x81
 5725 04dc A8       		.byte	0xa8
 5726 04dd 11       		.uleb128 0x11
 5727 04de FD010000 		.4byte	.LASF89
 5728 04e2 07       		.byte	0x7
 5729 04e3 0501     		.2byte	0x105
 5730 04e5 D2050000 		.4byte	0x5d2
 5731 04e9 A9       		.byte	0xa9
 5732 04ea 11       		.uleb128 0x11
 5733 04eb 44020000 		.4byte	.LASF90
 5734 04ef 07       		.byte	0x7
 5735 04f0 0701     		.2byte	0x107
 5736 04f2 B2050000 		.4byte	0x5b2
 5737 04f6 C0       		.byte	0xc0
 5738 04f7 11       		.uleb128 0x11
 5739 04f8 48010000 		.4byte	.LASF91
 5740 04fc 07       		.byte	0x7
 5741 04fd 0901     		.2byte	0x109
 5742 04ff E2050000 		.4byte	0x5e2
 5743 0503 C8       		.byte	0xc8
 5744 0504 11       		.uleb128 0x11
 5745 0505 6B080000 		.4byte	.LASF92
 5746 0509 07       		.byte	0x7
 5747 050a 0B01     		.2byte	0x10b
 5748 050c F2050000 		.4byte	0x5f2
 5749 0510 F0       		.byte	0xf0
 5750 0511 12       		.uleb128 0x12
 5751 0512 EA000000 		.4byte	.LASF93
 5752 0516 07       		.byte	0x7
 5753 0517 0D01     		.2byte	0x10d
 5754 0519 99000000 		.4byte	0x99
 5755 051d 0001     		.2byte	0x100
 5756 051f 12       		.uleb128 0x12
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 134


 5757 0520 630C0000 		.4byte	.LASF94
 5758 0524 07       		.byte	0x7
 5759 0525 0E01     		.2byte	0x10e
 5760 0527 99000000 		.4byte	0x99
 5761 052b 0401     		.2byte	0x104
 5762 052d 12       		.uleb128 0x12
 5763 052e C0050000 		.4byte	.LASF95
 5764 0532 07       		.byte	0x7
 5765 0533 0F01     		.2byte	0x10f
 5766 0535 99000000 		.4byte	0x99
 5767 0539 0801     		.2byte	0x108
 5768 053b 12       		.uleb128 0x12
 5769 053c F0050000 		.4byte	.LASF96
 5770 0540 07       		.byte	0x7
 5771 0541 1001     		.2byte	0x110
 5772 0543 99000000 		.4byte	0x99
 5773 0547 0C01     		.2byte	0x10c
 5774 0549 12       		.uleb128 0x12
 5775 054a FB080000 		.4byte	.LASF97
 5776 054e 07       		.byte	0x7
 5777 054f 1201     		.2byte	0x112
 5778 0551 02060000 		.4byte	0x602
 5779 0555 1001     		.2byte	0x110
 5780 0557 12       		.uleb128 0x12
 5781 0558 E1010000 		.4byte	.LASF98
 5782 055c 07       		.byte	0x7
 5783 055d 1301     		.2byte	0x113
 5784 055f 12060000 		.4byte	0x612
 5785 0563 1601     		.2byte	0x116
 5786 0565 12       		.uleb128 0x12
 5787 0566 DE0B0000 		.4byte	.LASF99
 5788 056a 07       		.byte	0x7
 5789 056b 1601     		.2byte	0x116
 5790 056d 81000000 		.4byte	0x81
 5791 0571 2001     		.2byte	0x120
 5792 0573 12       		.uleb128 0x12
 5793 0574 B4070000 		.4byte	.LASF100
 5794 0578 07       		.byte	0x7
 5795 0579 1701     		.2byte	0x117
 5796 057b 22060000 		.4byte	0x622
 5797 057f 2101     		.2byte	0x121
 5798 0581 00       		.byte	0
 5799 0582 0E       		.uleb128 0xe
 5800 0583 81000000 		.4byte	0x81
 5801 0587 92050000 		.4byte	0x592
 5802 058b 0F       		.uleb128 0xf
 5803 058c 0E010000 		.4byte	0x10e
 5804 0590 02       		.byte	0x2
 5805 0591 00       		.byte	0
 5806 0592 0E       		.uleb128 0xe
 5807 0593 C9000000 		.4byte	0xc9
 5808 0597 A2050000 		.4byte	0x5a2
 5809 059b 0F       		.uleb128 0xf
 5810 059c 0E010000 		.4byte	0x10e
 5811 05a0 02       		.byte	0x2
 5812 05a1 00       		.byte	0
 5813 05a2 0E       		.uleb128 0xe
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 135


 5814 05a3 8D000000 		.4byte	0x8d
 5815 05a7 B2050000 		.4byte	0x5b2
 5816 05ab 0F       		.uleb128 0xf
 5817 05ac 0E010000 		.4byte	0x10e
 5818 05b0 01       		.byte	0x1
 5819 05b1 00       		.byte	0
 5820 05b2 0E       		.uleb128 0xe
 5821 05b3 99000000 		.4byte	0x99
 5822 05b7 C2050000 		.4byte	0x5c2
 5823 05bb 0F       		.uleb128 0xf
 5824 05bc 0E010000 		.4byte	0x10e
 5825 05c0 01       		.byte	0x1
 5826 05c1 00       		.byte	0
 5827 05c2 0E       		.uleb128 0xe
 5828 05c3 D5000000 		.4byte	0xd5
 5829 05c7 D2050000 		.4byte	0x5d2
 5830 05cb 0F       		.uleb128 0xf
 5831 05cc 0E010000 		.4byte	0x10e
 5832 05d0 05       		.byte	0x5
 5833 05d1 00       		.byte	0
 5834 05d2 0E       		.uleb128 0xe
 5835 05d3 81000000 		.4byte	0x81
 5836 05d7 E2050000 		.4byte	0x5e2
 5837 05db 0F       		.uleb128 0xf
 5838 05dc 0E010000 		.4byte	0x10e
 5839 05e0 16       		.byte	0x16
 5840 05e1 00       		.byte	0
 5841 05e2 0E       		.uleb128 0xe
 5842 05e3 99000000 		.4byte	0x99
 5843 05e7 F2050000 		.4byte	0x5f2
 5844 05eb 0F       		.uleb128 0xf
 5845 05ec 0E010000 		.4byte	0x10e
 5846 05f0 09       		.byte	0x9
 5847 05f1 00       		.byte	0
 5848 05f2 0E       		.uleb128 0xe
 5849 05f3 99000000 		.4byte	0x99
 5850 05f7 02060000 		.4byte	0x602
 5851 05fb 0F       		.uleb128 0xf
 5852 05fc 0E010000 		.4byte	0x10e
 5853 0600 03       		.byte	0x3
 5854 0601 00       		.byte	0
 5855 0602 0E       		.uleb128 0xe
 5856 0603 81000000 		.4byte	0x81
 5857 0607 12060000 		.4byte	0x612
 5858 060b 0F       		.uleb128 0xf
 5859 060c 0E010000 		.4byte	0x10e
 5860 0610 05       		.byte	0x5
 5861 0611 00       		.byte	0
 5862 0612 0E       		.uleb128 0xe
 5863 0613 81000000 		.4byte	0x81
 5864 0617 22060000 		.4byte	0x622
 5865 061b 0F       		.uleb128 0xf
 5866 061c 0E010000 		.4byte	0x10e
 5867 0620 09       		.byte	0x9
 5868 0621 00       		.byte	0
 5869 0622 0E       		.uleb128 0xe
 5870 0623 81000000 		.4byte	0x81
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 136


 5871 0627 38060000 		.4byte	0x638
 5872 062b 0F       		.uleb128 0xf
 5873 062c 0E010000 		.4byte	0x10e
 5874 0630 02       		.byte	0x2
 5875 0631 0F       		.uleb128 0xf
 5876 0632 0E010000 		.4byte	0x10e
 5877 0636 04       		.byte	0x4
 5878 0637 00       		.byte	0
 5879 0638 13       		.uleb128 0x13
 5880 0639 000C0000 		.4byte	.LASF101
 5881 063d 28       		.byte	0x28
 5882 063e 07       		.byte	0x7
 5883 063f 1B01     		.2byte	0x11b
 5884 0641 94060000 		.4byte	0x694
 5885 0645 11       		.uleb128 0x11
 5886 0646 AE030000 		.4byte	.LASF102
 5887 064a 07       		.byte	0x7
 5888 064b 1C01     		.2byte	0x11c
 5889 064d 81000000 		.4byte	0x81
 5890 0651 00       		.byte	0
 5891 0652 11       		.uleb128 0x11
 5892 0653 0A020000 		.4byte	.LASF103
 5893 0657 07       		.byte	0x7
 5894 0658 1D01     		.2byte	0x11d
 5895 065a 94060000 		.4byte	0x694
 5896 065e 02       		.byte	0x2
 5897 065f 11       		.uleb128 0x11
 5898 0660 F0080000 		.4byte	.LASF104
 5899 0664 07       		.byte	0x7
 5900 0665 1E01     		.2byte	0x11e
 5901 0667 94060000 		.4byte	0x694
 5902 066b 08       		.byte	0x8
 5903 066c 11       		.uleb128 0x11
 5904 066d 8D090000 		.4byte	.LASF105
 5905 0671 07       		.byte	0x7
 5906 0672 1F01     		.2byte	0x11f
 5907 0674 94060000 		.4byte	0x694
 5908 0678 0E       		.byte	0xe
 5909 0679 11       		.uleb128 0x11
 5910 067a 22060000 		.4byte	.LASF106
 5911 067e 07       		.byte	0x7
 5912 067f 2001     		.2byte	0x120
 5913 0681 A4060000 		.4byte	0x6a4
 5914 0685 14       		.byte	0x14
 5915 0686 11       		.uleb128 0x11
 5916 0687 63010000 		.4byte	.LASF107
 5917 068b 07       		.byte	0x7
 5918 068c 2101     		.2byte	0x121
 5919 068e B1000000 		.4byte	0xb1
 5920 0692 24       		.byte	0x24
 5921 0693 00       		.byte	0
 5922 0694 0E       		.uleb128 0xe
 5923 0695 B1000000 		.4byte	0xb1
 5924 0699 A4060000 		.4byte	0x6a4
 5925 069d 0F       		.uleb128 0xf
 5926 069e 0E010000 		.4byte	0x10e
 5927 06a2 02       		.byte	0x2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 137


 5928 06a3 00       		.byte	0
 5929 06a4 0E       		.uleb128 0xe
 5930 06a5 D5000000 		.4byte	0xd5
 5931 06a9 B4060000 		.4byte	0x6b4
 5932 06ad 0F       		.uleb128 0xf
 5933 06ae 0E010000 		.4byte	0x10e
 5934 06b2 03       		.byte	0x3
 5935 06b3 00       		.byte	0
 5936 06b4 13       		.uleb128 0x13
 5937 06b5 B80C0000 		.4byte	.LASF108
 5938 06b9 08       		.byte	0x8
 5939 06ba 07       		.byte	0x7
 5940 06bb 2801     		.2byte	0x128
 5941 06bd DC060000 		.4byte	0x6dc
 5942 06c1 11       		.uleb128 0x11
 5943 06c2 29040000 		.4byte	.LASF109
 5944 06c6 07       		.byte	0x7
 5945 06c7 2901     		.2byte	0x129
 5946 06c9 BD000000 		.4byte	0xbd
 5947 06cd 00       		.byte	0
 5948 06ce 11       		.uleb128 0x11
 5949 06cf 7C010000 		.4byte	.LASF110
 5950 06d3 07       		.byte	0x7
 5951 06d4 2A01     		.2byte	0x12a
 5952 06d6 BD000000 		.4byte	0xbd
 5953 06da 04       		.byte	0x4
 5954 06db 00       		.byte	0
 5955 06dc 13       		.uleb128 0x13
 5956 06dd CC020000 		.4byte	.LASF111
 5957 06e1 06       		.byte	0x6
 5958 06e2 07       		.byte	0x7
 5959 06e3 3101     		.2byte	0x131
 5960 06e5 1E070000 		.4byte	0x71e
 5961 06e9 11       		.uleb128 0x11
 5962 06ea A6050000 		.4byte	.LASF112
 5963 06ee 07       		.byte	0x7
 5964 06ef 3201     		.2byte	0x132
 5965 06f1 81000000 		.4byte	0x81
 5966 06f5 00       		.byte	0
 5967 06f6 11       		.uleb128 0x11
 5968 06f7 D40C0000 		.4byte	.LASF113
 5969 06fb 07       		.byte	0x7
 5970 06fc 3301     		.2byte	0x133
 5971 06fe 81000000 		.4byte	0x81
 5972 0702 01       		.byte	0x1
 5973 0703 11       		.uleb128 0x11
 5974 0704 9C040000 		.4byte	.LASF114
 5975 0708 07       		.byte	0x7
 5976 0709 3401     		.2byte	0x134
 5977 070b B1000000 		.4byte	0xb1
 5978 070f 02       		.byte	0x2
 5979 0710 11       		.uleb128 0x11
 5980 0711 90070000 		.4byte	.LASF115
 5981 0715 07       		.byte	0x7
 5982 0716 3501     		.2byte	0x135
 5983 0718 B1000000 		.4byte	0xb1
 5984 071c 04       		.byte	0x4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 138


 5985 071d 00       		.byte	0
 5986 071e 14       		.uleb128 0x14
 5987 071f 01       		.byte	0x1
 5988 0720 2C000000 		.4byte	0x2c
 5989 0724 07       		.byte	0x7
 5990 0725 3901     		.2byte	0x139
 5991 0727 50070000 		.4byte	0x750
 5992 072b 08       		.uleb128 0x8
 5993 072c 46040000 		.4byte	.LASF116
 5994 0730 00       		.byte	0
 5995 0731 08       		.uleb128 0x8
 5996 0732 2E0A0000 		.4byte	.LASF117
 5997 0736 01       		.byte	0x1
 5998 0737 08       		.uleb128 0x8
 5999 0738 94080000 		.4byte	.LASF118
 6000 073c 02       		.byte	0x2
 6001 073d 08       		.uleb128 0x8
 6002 073e 9D010000 		.4byte	.LASF119
 6003 0742 03       		.byte	0x3
 6004 0743 08       		.uleb128 0x8
 6005 0744 A9070000 		.4byte	.LASF120
 6006 0748 04       		.byte	0x4
 6007 0749 08       		.uleb128 0x8
 6008 074a E5090000 		.4byte	.LASF121
 6009 074e 05       		.byte	0x5
 6010 074f 00       		.byte	0
 6011 0750 05       		.uleb128 0x5
 6012 0751 34010000 		.4byte	.LASF122
 6013 0755 07       		.byte	0x7
 6014 0756 4101     		.2byte	0x141
 6015 0758 1E070000 		.4byte	0x71e
 6016 075c 14       		.uleb128 0x14
 6017 075d 01       		.byte	0x1
 6018 075e 2C000000 		.4byte	0x2c
 6019 0762 07       		.byte	0x7
 6020 0763 4301     		.2byte	0x143
 6021 0765 88070000 		.4byte	0x788
 6022 0769 08       		.uleb128 0x8
 6023 076a 56010000 		.4byte	.LASF123
 6024 076e 00       		.byte	0
 6025 076f 08       		.uleb128 0x8
 6026 0770 CE050000 		.4byte	.LASF124
 6027 0774 01       		.byte	0x1
 6028 0775 08       		.uleb128 0x8
 6029 0776 3B060000 		.4byte	.LASF125
 6030 077a 02       		.byte	0x2
 6031 077b 08       		.uleb128 0x8
 6032 077c 50020000 		.4byte	.LASF126
 6033 0780 03       		.byte	0x3
 6034 0781 08       		.uleb128 0x8
 6035 0782 A10C0000 		.4byte	.LASF127
 6036 0786 04       		.byte	0x4
 6037 0787 00       		.byte	0
 6038 0788 05       		.uleb128 0x5
 6039 0789 900A0000 		.4byte	.LASF128
 6040 078d 07       		.byte	0x7
 6041 078e 4A01     		.2byte	0x14a
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 139


 6042 0790 5C070000 		.4byte	0x75c
 6043 0794 15       		.uleb128 0x15
 6044 0795 47030000 		.4byte	.LASF129
 6045 0799 01       		.byte	0x1
 6046 079a 67       		.byte	0x67
 6047 079b 00000000 		.4byte	.LFB64
 6048 079f 18000000 		.4byte	.LFE64-.LFB64
 6049 07a3 01       		.uleb128 0x1
 6050 07a4 9C       		.byte	0x9c
 6051 07a5 15       		.uleb128 0x15
 6052 07a6 C10B0000 		.4byte	.LASF130
 6053 07aa 01       		.byte	0x1
 6054 07ab 72       		.byte	0x72
 6055 07ac 00000000 		.4byte	.LFB65
 6056 07b0 20000000 		.4byte	.LFE65-.LFB65
 6057 07b4 01       		.uleb128 0x1
 6058 07b5 9C       		.byte	0x9c
 6059 07b6 16       		.uleb128 0x16
 6060 07b7 7E070000 		.4byte	.LASF144
 6061 07bb 01       		.byte	0x1
 6062 07bc 8B       		.byte	0x8b
 6063 07bd 00000000 		.4byte	.LFB66
 6064 07c1 F4010000 		.4byte	.LFE66-.LFB66
 6065 07c5 01       		.uleb128 0x1
 6066 07c6 9C       		.byte	0x9c
 6067 07c7 4B080000 		.4byte	0x84b
 6068 07cb 17       		.uleb128 0x17
 6069 07cc 8F000000 		.4byte	.LASF131
 6070 07d0 01       		.byte	0x1
 6071 07d1 90       		.byte	0x90
 6072 07d2 81000000 		.4byte	0x81
 6073 07d6 05       		.uleb128 0x5
 6074 07d7 03       		.byte	0x3
 6075 07d8 00000000 		.4byte	state.10043
 6076 07dc 17       		.uleb128 0x17
 6077 07dd C1040000 		.4byte	.LASF132
 6078 07e1 01       		.byte	0x1
 6079 07e2 93       		.byte	0x93
 6080 07e3 81000000 		.4byte	0x81
 6081 07e7 05       		.uleb128 0x5
 6082 07e8 03       		.byte	0x3
 6083 07e9 08000000 		.4byte	data_packet_index.10044
 6084 07ed 17       		.uleb128 0x17
 6085 07ee C0090000 		.4byte	.LASF133
 6086 07f2 01       		.byte	0x1
 6087 07f3 94       		.byte	0x94
 6088 07f4 81000000 		.4byte	0x81
 6089 07f8 05       		.uleb128 0x5
 6090 07f9 03       		.byte	0x3
 6091 07fa 07000000 		.4byte	data_packet_length.10045
 6092 07fe 17       		.uleb128 0x17
 6093 07ff D3040000 		.4byte	.LASF134
 6094 0803 01       		.byte	0x1
 6095 0804 95       		.byte	0x95
 6096 0805 94020000 		.4byte	0x294
 6097 0809 05       		.uleb128 0x5
 6098 080a 03       		.byte	0x3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 140


 6099 080b 0C000000 		.4byte	data_packet_buffer.10046
 6100 080f 17       		.uleb128 0x17
 6101 0810 32080000 		.4byte	.LASF135
 6102 0814 01       		.byte	0x1
 6103 0815 96       		.byte	0x96
 6104 0816 82050000 		.4byte	0x582
 6105 081a 05       		.uleb128 0x5
 6106 081b 03       		.byte	0x3
 6107 081c 04000000 		.4byte	rx_queue.10047
 6108 0820 17       		.uleb128 0x17
 6109 0821 17010000 		.4byte	.LASF136
 6110 0825 01       		.byte	0x1
 6111 0826 99       		.byte	0x99
 6112 0827 81000000 		.4byte	0x81
 6113 082b 02       		.uleb128 0x2
 6114 082c 91       		.byte	0x91
 6115 082d 75       		.sleb128 -11
 6116 082e 17       		.uleb128 0x17
 6117 082f 86040000 		.4byte	.LASF137
 6118 0833 01       		.byte	0x1
 6119 0834 9A       		.byte	0x9a
 6120 0835 81000000 		.4byte	0x81
 6121 0839 02       		.uleb128 0x2
 6122 083a 91       		.byte	0x91
 6123 083b 77       		.sleb128 -9
 6124 083c 17       		.uleb128 0x17
 6125 083d 83050000 		.4byte	.LASF138
 6126 0841 01       		.byte	0x1
 6127 0842 9B       		.byte	0x9b
 6128 0843 81000000 		.4byte	0x81
 6129 0847 02       		.uleb128 0x2
 6130 0848 91       		.byte	0x91
 6131 0849 76       		.sleb128 -10
 6132 084a 00       		.byte	0
 6133 084b 18       		.uleb128 0x18
 6134 084c 0D0B0000 		.4byte	.LASF259
 6135 0850 01       		.byte	0x1
 6136 0851 0B01     		.2byte	0x10b
 6137 0853 00000000 		.4byte	.LFB67
 6138 0857 58040000 		.4byte	.LFE67-.LFB67
 6139 085b 01       		.uleb128 0x1
 6140 085c 9C       		.byte	0x9c
 6141 085d B4080000 		.4byte	0x8b4
 6142 0861 19       		.uleb128 0x19
 6143 0862 F4040000 		.4byte	.LASF139
 6144 0866 01       		.byte	0x1
 6145 0867 0D01     		.2byte	0x10d
 6146 0869 8D000000 		.4byte	0x8d
 6147 086d 05       		.uleb128 0x5
 6148 086e 03       		.byte	0x3
 6149 086f 00000000 		.4byte	counter_calibration.10063
 6150 0873 19       		.uleb128 0x19
 6151 0874 39090000 		.4byte	.LASF140
 6152 0878 01       		.byte	0x1
 6153 0879 0E01     		.2byte	0x10e
 6154 087b 8D000000 		.4byte	0x8d
 6155 087f 05       		.uleb128 0x5
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 141


 6156 0880 03       		.byte	0x3
 6157 0881 02000000 		.4byte	counter_tension_func.10064
 6158 0885 19       		.uleb128 0x19
 6159 0886 1D030000 		.4byte	.LASF141
 6160 088a 01       		.byte	0x1
 6161 088b 0F01     		.2byte	0x10f
 6162 088d 81000000 		.4byte	0x81
 6163 0891 02       		.uleb128 0x2
 6164 0892 91       		.byte	0x91
 6165 0893 6F       		.sleb128 -17
 6166 0894 19       		.uleb128 0x19
 6167 0895 62080000 		.4byte	.LASF142
 6168 0899 01       		.byte	0x1
 6169 089a 1101     		.2byte	0x111
 6170 089c 81000000 		.4byte	0x81
 6171 08a0 02       		.uleb128 0x2
 6172 08a1 91       		.byte	0x91
 6173 08a2 6E       		.sleb128 -18
 6174 08a3 19       		.uleb128 0x19
 6175 08a4 2E010000 		.4byte	.LASF143
 6176 08a8 01       		.byte	0x1
 6177 08a9 1201     		.2byte	0x112
 6178 08ab B4080000 		.4byte	0x8b4
 6179 08af 03       		.uleb128 0x3
 6180 08b0 91       		.byte	0x91
 6181 08b1 A86C     		.sleb128 -2520
 6182 08b3 00       		.byte	0
 6183 08b4 0E       		.uleb128 0xe
 6184 08b5 E3000000 		.4byte	0xe3
 6185 08b9 C5080000 		.4byte	0x8c5
 6186 08bd 1A       		.uleb128 0x1a
 6187 08be 0E010000 		.4byte	0x10e
 6188 08c2 C309     		.2byte	0x9c3
 6189 08c4 00       		.byte	0
 6190 08c5 1B       		.uleb128 0x1b
 6191 08c6 DB050000 		.4byte	.LASF145
 6192 08ca 01       		.byte	0x1
 6193 08cb DC01     		.2byte	0x1dc
 6194 08cd 00000000 		.4byte	.LFB68
 6195 08d1 8C090000 		.4byte	.LFE68-.LFB68
 6196 08d5 01       		.uleb128 0x1
 6197 08d6 9C       		.byte	0x9c
 6198 08d7 8E0A0000 		.4byte	0xa8e
 6199 08db 19       		.uleb128 0x19
 6200 08dc 32000000 		.4byte	.LASF146
 6201 08e0 01       		.byte	0x1
 6202 08e1 DE01     		.2byte	0x1de
 6203 08e3 BD000000 		.4byte	0xbd
 6204 08e7 02       		.uleb128 0x2
 6205 08e8 91       		.byte	0x91
 6206 08e9 74       		.sleb128 -12
 6207 08ea 19       		.uleb128 0x19
 6208 08eb E0000000 		.4byte	.LASF147
 6209 08ef 01       		.byte	0x1
 6210 08f0 E001     		.2byte	0x1e0
 6211 08f2 BD000000 		.4byte	0xbd
 6212 08f6 02       		.uleb128 0x2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 142


 6213 08f7 91       		.byte	0x91
 6214 08f8 70       		.sleb128 -16
 6215 08f9 19       		.uleb128 0x19
 6216 08fa 920B0000 		.4byte	.LASF148
 6217 08fe 01       		.byte	0x1
 6218 08ff E101     		.2byte	0x1e1
 6219 0901 BD000000 		.4byte	0xbd
 6220 0905 03       		.uleb128 0x3
 6221 0906 91       		.byte	0x91
 6222 0907 AC7F     		.sleb128 -84
 6223 0909 19       		.uleb128 0x19
 6224 090a 3B080000 		.4byte	.LASF149
 6225 090e 01       		.byte	0x1
 6226 090f E301     		.2byte	0x1e3
 6227 0911 BD000000 		.4byte	0xbd
 6228 0915 02       		.uleb128 0x2
 6229 0916 91       		.byte	0x91
 6230 0917 6C       		.sleb128 -20
 6231 0918 19       		.uleb128 0x19
 6232 0919 B4030000 		.4byte	.LASF150
 6233 091d 01       		.byte	0x1
 6234 091e E401     		.2byte	0x1e4
 6235 0920 BD000000 		.4byte	0xbd
 6236 0924 02       		.uleb128 0x2
 6237 0925 91       		.byte	0x91
 6238 0926 68       		.sleb128 -24
 6239 0927 19       		.uleb128 0x19
 6240 0928 D5020000 		.4byte	.LASF151
 6241 092c 01       		.byte	0x1
 6242 092d E601     		.2byte	0x1e6
 6243 092f BD000000 		.4byte	0xbd
 6244 0933 03       		.uleb128 0x3
 6245 0934 91       		.byte	0x91
 6246 0935 B47F     		.sleb128 -76
 6247 0937 19       		.uleb128 0x19
 6248 0938 DF020000 		.4byte	.LASF152
 6249 093c 01       		.byte	0x1
 6250 093d E601     		.2byte	0x1e6
 6251 093f BD000000 		.4byte	0xbd
 6252 0943 03       		.uleb128 0x3
 6253 0944 91       		.byte	0x91
 6254 0945 B07F     		.sleb128 -80
 6255 0947 1C       		.uleb128 0x1c
 6256 0948 6B5F7000 		.ascii	"k_p\000"
 6257 094c 01       		.byte	0x1
 6258 094d E801     		.2byte	0x1e8
 6259 094f BD000000 		.4byte	0xbd
 6260 0953 02       		.uleb128 0x2
 6261 0954 91       		.byte	0x91
 6262 0955 64       		.sleb128 -28
 6263 0956 1C       		.uleb128 0x1c
 6264 0957 6B5F6900 		.ascii	"k_i\000"
 6265 095b 01       		.byte	0x1
 6266 095c E901     		.2byte	0x1e9
 6267 095e BD000000 		.4byte	0xbd
 6268 0962 02       		.uleb128 0x2
 6269 0963 91       		.byte	0x91
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 143


 6270 0964 60       		.sleb128 -32
 6271 0965 1C       		.uleb128 0x1c
 6272 0966 6B5F6400 		.ascii	"k_d\000"
 6273 096a 01       		.byte	0x1
 6274 096b EA01     		.2byte	0x1ea
 6275 096d BD000000 		.4byte	0xbd
 6276 0971 02       		.uleb128 0x2
 6277 0972 91       		.byte	0x91
 6278 0973 5C       		.sleb128 -36
 6279 0974 19       		.uleb128 0x19
 6280 0975 D3090000 		.4byte	.LASF49
 6281 0979 01       		.byte	0x1
 6282 097a EC01     		.2byte	0x1ec
 6283 097c BD000000 		.4byte	0xbd
 6284 0980 02       		.uleb128 0x2
 6285 0981 91       		.byte	0x91
 6286 0982 58       		.sleb128 -40
 6287 0983 19       		.uleb128 0x19
 6288 0984 F2030000 		.4byte	.LASF50
 6289 0988 01       		.byte	0x1
 6290 0989 ED01     		.2byte	0x1ed
 6291 098b BD000000 		.4byte	0xbd
 6292 098f 02       		.uleb128 0x2
 6293 0990 91       		.byte	0x91
 6294 0991 54       		.sleb128 -44
 6295 0992 19       		.uleb128 0x19
 6296 0993 E5030000 		.4byte	.LASF51
 6297 0997 01       		.byte	0x1
 6298 0998 EE01     		.2byte	0x1ee
 6299 099a BD000000 		.4byte	0xbd
 6300 099e 02       		.uleb128 0x2
 6301 099f 91       		.byte	0x91
 6302 09a0 50       		.sleb128 -48
 6303 09a1 19       		.uleb128 0x19
 6304 09a2 720B0000 		.4byte	.LASF52
 6305 09a6 01       		.byte	0x1
 6306 09a7 F001     		.2byte	0x1f0
 6307 09a9 BD000000 		.4byte	0xbd
 6308 09ad 02       		.uleb128 0x2
 6309 09ae 91       		.byte	0x91
 6310 09af 4C       		.sleb128 -52
 6311 09b0 19       		.uleb128 0x19
 6312 09b1 6F040000 		.4byte	.LASF53
 6313 09b5 01       		.byte	0x1
 6314 09b6 F101     		.2byte	0x1f1
 6315 09b8 BD000000 		.4byte	0xbd
 6316 09bc 02       		.uleb128 0x2
 6317 09bd 91       		.byte	0x91
 6318 09be 48       		.sleb128 -56
 6319 09bf 19       		.uleb128 0x19
 6320 09c0 EC0A0000 		.4byte	.LASF54
 6321 09c4 01       		.byte	0x1
 6322 09c5 F201     		.2byte	0x1f2
 6323 09c7 BD000000 		.4byte	0xbd
 6324 09cb 02       		.uleb128 0x2
 6325 09cc 91       		.byte	0x91
 6326 09cd 44       		.sleb128 -60
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 144


 6327 09ce 19       		.uleb128 0x19
 6328 09cf 7D040000 		.4byte	.LASF55
 6329 09d3 01       		.byte	0x1
 6330 09d4 F401     		.2byte	0x1f4
 6331 09d6 BD000000 		.4byte	0xbd
 6332 09da 02       		.uleb128 0x2
 6333 09db 91       		.byte	0x91
 6334 09dc 40       		.sleb128 -64
 6335 09dd 19       		.uleb128 0x19
 6336 09de 7A050000 		.4byte	.LASF56
 6337 09e2 01       		.byte	0x1
 6338 09e3 F501     		.2byte	0x1f5
 6339 09e5 BD000000 		.4byte	0xbd
 6340 09e9 03       		.uleb128 0x3
 6341 09ea 91       		.byte	0x91
 6342 09eb BC7F     		.sleb128 -68
 6343 09ed 19       		.uleb128 0x19
 6344 09ee CB0C0000 		.4byte	.LASF57
 6345 09f2 01       		.byte	0x1
 6346 09f3 F601     		.2byte	0x1f6
 6347 09f5 BD000000 		.4byte	0xbd
 6348 09f9 03       		.uleb128 0x3
 6349 09fa 91       		.byte	0x91
 6350 09fb B87F     		.sleb128 -72
 6351 09fd 19       		.uleb128 0x19
 6352 09fe 53040000 		.4byte	.LASF153
 6353 0a02 01       		.byte	0x1
 6354 0a03 FA01     		.2byte	0x1fa
 6355 0a05 BD000000 		.4byte	0xbd
 6356 0a09 05       		.uleb128 0x5
 6357 0a0a 03       		.byte	0x3
 6358 0a0b 90000000 		.4byte	pos_error_sum.10089
 6359 0a0f 19       		.uleb128 0x19
 6360 0a10 2A030000 		.4byte	.LASF154
 6361 0a14 01       		.byte	0x1
 6362 0a15 FB01     		.2byte	0x1fb
 6363 0a17 BD000000 		.4byte	0xbd
 6364 0a1b 05       		.uleb128 0x5
 6365 0a1c 03       		.byte	0x3
 6366 0a1d 9C000000 		.4byte	curr_error_sum.10090
 6367 0a21 19       		.uleb128 0x19
 6368 0a22 9C080000 		.4byte	.LASF155
 6369 0a26 01       		.byte	0x1
 6370 0a27 FD01     		.2byte	0x1fd
 6371 0a29 BD000000 		.4byte	0xbd
 6372 0a2d 05       		.uleb128 0x5
 6373 0a2e 03       		.byte	0x3
 6374 0a2f 94000000 		.4byte	prev_pos_err.10091
 6375 0a33 19       		.uleb128 0x19
 6376 0a34 B2090000 		.4byte	.LASF156
 6377 0a38 01       		.byte	0x1
 6378 0a39 FE01     		.2byte	0x1fe
 6379 0a3b BD000000 		.4byte	0xbd
 6380 0a3f 05       		.uleb128 0x5
 6381 0a40 03       		.byte	0x3
 6382 0a41 A0000000 		.4byte	prev_curr_err.10092
 6383 0a45 19       		.uleb128 0x19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 145


 6384 0a46 200B0000 		.4byte	.LASF157
 6385 0a4a 01       		.byte	0x1
 6386 0a4b FF01     		.2byte	0x1ff
 6387 0a4d BD000000 		.4byte	0xbd
 6388 0a51 05       		.uleb128 0x5
 6389 0a52 03       		.byte	0x3
 6390 0a53 A4000000 		.4byte	prev_pwm.10093
 6391 0a57 19       		.uleb128 0x19
 6392 0a58 F8030000 		.4byte	.LASF158
 6393 0a5c 01       		.byte	0x1
 6394 0a5d 0102     		.2byte	0x201
 6395 0a5f 81000000 		.4byte	0x81
 6396 0a63 05       		.uleb128 0x5
 6397 0a64 03       		.byte	0x3
 6398 0a65 98000000 		.4byte	motor_dir.10094
 6399 0a69 19       		.uleb128 0x19
 6400 0a6a A2040000 		.4byte	.LASF159
 6401 0a6e 01       		.byte	0x1
 6402 0a6f 0202     		.2byte	0x202
 6403 0a71 99000000 		.4byte	0x99
 6404 0a75 05       		.uleb128 0x5
 6405 0a76 03       		.byte	0x3
 6406 0a77 A8000000 		.4byte	position_counter.10095
 6407 0a7b 19       		.uleb128 0x19
 6408 0a7c 26080000 		.4byte	.LASF160
 6409 0a80 01       		.byte	0x1
 6410 0a81 0302     		.2byte	0x203
 6411 0a83 81000000 		.4byte	0x81
 6412 0a87 05       		.uleb128 0x5
 6413 0a88 03       		.byte	0x3
 6414 0a89 8C000000 		.4byte	current_emg.10096
 6415 0a8d 00       		.byte	0
 6416 0a8e 1B       		.uleb128 0x1b
 6417 0a8f 1E020000 		.4byte	.LASF161
 6418 0a93 01       		.byte	0x1
 6419 0a94 A803     		.2byte	0x3a8
 6420 0a96 00000000 		.4byte	.LFB69
 6421 0a9a AC040000 		.4byte	.LFE69-.LFB69
 6422 0a9e 01       		.uleb128 0x1
 6423 0a9f 9C       		.byte	0x9c
 6424 0aa0 CD0B0000 		.4byte	0xbcd
 6425 0aa4 19       		.uleb128 0x19
 6426 0aa5 5B050000 		.4byte	.LASF162
 6427 0aa9 01       		.byte	0x1
 6428 0aaa AA03     		.2byte	0x3aa
 6429 0aac 81000000 		.4byte	0x81
 6430 0ab0 02       		.uleb128 0x2
 6431 0ab1 91       		.byte	0x91
 6432 0ab2 6F       		.sleb128 -17
 6433 0ab3 19       		.uleb128 0x19
 6434 0ab4 F9090000 		.4byte	.LASF163
 6435 0ab8 01       		.byte	0x1
 6436 0ab9 AB03     		.2byte	0x3ab
 6437 0abb 27020000 		.4byte	0x227
 6438 0abf 02       		.uleb128 0x2
 6439 0ac0 91       		.byte	0x91
 6440 0ac1 4C       		.sleb128 -52
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 146


 6441 0ac2 1C       		.uleb128 0x1c
 6442 0ac3 6A6A00   		.ascii	"jj\000"
 6443 0ac6 01       		.byte	0x1
 6444 0ac7 AE03     		.2byte	0x3ae
 6445 0ac9 81000000 		.4byte	0x81
 6446 0acd 02       		.uleb128 0x2
 6447 0ace 91       		.byte	0x91
 6448 0acf 6E       		.sleb128 -18
 6449 0ad0 19       		.uleb128 0x19
 6450 0ad1 AF0B0000 		.4byte	.LASF164
 6451 0ad5 01       		.byte	0x1
 6452 0ad6 B003     		.2byte	0x3b0
 6453 0ad8 B1000000 		.4byte	0xb1
 6454 0adc 02       		.uleb128 0x2
 6455 0add 91       		.byte	0x91
 6456 0ade 6C       		.sleb128 -20
 6457 0adf 19       		.uleb128 0x19
 6458 0ae0 9D090000 		.4byte	.LASF165
 6459 0ae4 01       		.byte	0x1
 6460 0ae5 B103     		.2byte	0x3b1
 6461 0ae7 BD000000 		.4byte	0xbd
 6462 0aeb 02       		.uleb128 0x2
 6463 0aec 91       		.byte	0x91
 6464 0aed 60       		.sleb128 -32
 6465 0aee 19       		.uleb128 0x19
 6466 0aef F30A0000 		.4byte	.LASF166
 6467 0af3 01       		.byte	0x1
 6468 0af4 B203     		.2byte	0x3b2
 6469 0af6 BD000000 		.4byte	0xbd
 6470 0afa 02       		.uleb128 0x2
 6471 0afb 91       		.byte	0x91
 6472 0afc 68       		.sleb128 -24
 6473 0afd 19       		.uleb128 0x19
 6474 0afe 76030000 		.4byte	.LASF167
 6475 0b02 01       		.byte	0x1
 6476 0b03 B303     		.2byte	0x3b3
 6477 0b05 BD000000 		.4byte	0xbd
 6478 0b09 02       		.uleb128 0x2
 6479 0b0a 91       		.byte	0x91
 6480 0b0b 58       		.sleb128 -40
 6481 0b0c 19       		.uleb128 0x19
 6482 0b0d D70A0000 		.4byte	.LASF168
 6483 0b11 01       		.byte	0x1
 6484 0b12 B403     		.2byte	0x3b4
 6485 0b14 BD000000 		.4byte	0xbd
 6486 0b18 02       		.uleb128 0x2
 6487 0b19 91       		.byte	0x91
 6488 0b1a 5C       		.sleb128 -36
 6489 0b1b 19       		.uleb128 0x19
 6490 0b1c 3F010000 		.4byte	.LASF169
 6491 0b20 01       		.byte	0x1
 6492 0b21 B503     		.2byte	0x3b5
 6493 0b23 A5000000 		.4byte	0xa5
 6494 0b27 02       		.uleb128 0x2
 6495 0b28 91       		.byte	0x91
 6496 0b29 67       		.sleb128 -25
 6497 0b2a 19       		.uleb128 0x19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 147


 6498 0b2b 26090000 		.4byte	.LASF170
 6499 0b2f 01       		.byte	0x1
 6500 0b30 B703     		.2byte	0x3b7
 6501 0b32 27020000 		.4byte	0x227
 6502 0b36 05       		.uleb128 0x5
 6503 0b37 03       		.byte	0x3
 6504 0b38 AC000000 		.4byte	last_value_encoder.10130
 6505 0b3c 19       		.uleb128 0x19
 6506 0b3d 1D050000 		.4byte	.LASF171
 6507 0b41 01       		.byte	0x1
 6508 0b42 B803     		.2byte	0x3b8
 6509 0b44 27020000 		.4byte	0x227
 6510 0b48 05       		.uleb128 0x5
 6511 0b49 03       		.byte	0x3
 6512 0b4a B8000000 		.4byte	comp_value_encoder.10131
 6513 0b4e 19       		.uleb128 0x19
 6514 0b4f 3E020000 		.4byte	.LASF172
 6515 0b53 01       		.byte	0x1
 6516 0b54 B903     		.2byte	0x3b9
 6517 0b56 82050000 		.4byte	0x582
 6518 0b5a 05       		.uleb128 0x5
 6519 0b5b 03       		.byte	0x3
 6520 0b5c C4000000 		.4byte	error.10132
 6521 0b60 19       		.uleb128 0x19
 6522 0b61 C10A0000 		.4byte	.LASF173
 6523 0b65 01       		.byte	0x1
 6524 0b66 BB03     		.2byte	0x3bb
 6525 0b68 81000000 		.4byte	0x81
 6526 0b6c 05       		.uleb128 0x5
 6527 0b6d 03       		.byte	0x3
 6528 0b6e 04000000 		.4byte	only_first_time.10133
 6529 0b72 19       		.uleb128 0x19
 6530 0b73 55000000 		.4byte	.LASF174
 6531 0b77 01       		.byte	0x1
 6532 0b78 BD03     		.2byte	0x3bd
 6533 0b7a 81000000 		.4byte	0x81
 6534 0b7e 05       		.uleb128 0x5
 6535 0b7f 03       		.byte	0x3
 6536 0b80 ED000000 		.4byte	one_time_execute.10134
 6537 0b84 19       		.uleb128 0x19
 6538 0b85 5A020000 		.4byte	.LASF175
 6539 0b89 01       		.byte	0x1
 6540 0b8a BF03     		.2byte	0x3bf
 6541 0b8c 81000000 		.4byte	0x81
 6542 0b90 05       		.uleb128 0x5
 6543 0b91 03       		.byte	0x3
 6544 0b92 EC000000 		.4byte	pos_reconstruct.10135
 6545 0b96 19       		.uleb128 0x19
 6546 0b97 1C070000 		.4byte	.LASF176
 6547 0b9b 01       		.byte	0x1
 6548 0b9c C103     		.2byte	0x3c1
 6549 0b9e 27020000 		.4byte	0x227
 6550 0ba2 05       		.uleb128 0x5
 6551 0ba3 03       		.byte	0x3
 6552 0ba4 C8000000 		.4byte	v_value.10136
 6553 0ba8 19       		.uleb128 0x19
 6554 0ba9 C20C0000 		.4byte	.LASF177
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 148


 6555 0bad 01       		.byte	0x1
 6556 0bae C203     		.2byte	0x3c2
 6557 0bb0 27020000 		.4byte	0x227
 6558 0bb4 05       		.uleb128 0x5
 6559 0bb5 03       		.byte	0x3
 6560 0bb6 D4000000 		.4byte	vv_value.10137
 6561 0bba 19       		.uleb128 0x19
 6562 0bbb 1F010000 		.4byte	.LASF178
 6563 0bbf 01       		.byte	0x1
 6564 0bc0 C303     		.2byte	0x3c3
 6565 0bc2 27020000 		.4byte	0x227
 6566 0bc6 05       		.uleb128 0x5
 6567 0bc7 03       		.byte	0x3
 6568 0bc8 E0000000 		.4byte	vvv_value.10138
 6569 0bcc 00       		.byte	0
 6570 0bcd 1B       		.uleb128 0x1b
 6571 0bce 340A0000 		.4byte	.LASF179
 6572 0bd2 01       		.byte	0x1
 6573 0bd3 7104     		.2byte	0x471
 6574 0bd5 00000000 		.4byte	.LFB70
 6575 0bd9 2C070000 		.4byte	.LFE70-.LFB70
 6576 0bdd 01       		.uleb128 0x1
 6577 0bde 9C       		.byte	0x9c
 6578 0bdf 4D0C0000 		.4byte	0xc4d
 6579 0be3 19       		.uleb128 0x19
 6580 0be4 F3090000 		.4byte	.LASF180
 6581 0be8 01       		.byte	0x1
 6582 0be9 8504     		.2byte	0x485
 6583 0beb BD000000 		.4byte	0xbd
 6584 0bef 02       		.uleb128 0x2
 6585 0bf0 91       		.byte	0x91
 6586 0bf1 6C       		.sleb128 -20
 6587 0bf2 19       		.uleb128 0x19
 6588 0bf3 A50A0000 		.4byte	.LASF181
 6589 0bf7 01       		.byte	0x1
 6590 0bf8 8704     		.2byte	0x487
 6591 0bfa 8D000000 		.4byte	0x8d
 6592 0bfe 05       		.uleb128 0x5
 6593 0bff 03       		.byte	0x3
 6594 0c00 F4000000 		.4byte	emg_counter_1.10151
 6595 0c04 19       		.uleb128 0x19
 6596 0c05 B30A0000 		.4byte	.LASF182
 6597 0c09 01       		.byte	0x1
 6598 0c0a 8804     		.2byte	0x488
 6599 0c0c 8D000000 		.4byte	0x8d
 6600 0c10 05       		.uleb128 0x5
 6601 0c11 03       		.byte	0x3
 6602 0c12 F6000000 		.4byte	emg_counter_2.10152
 6603 0c16 19       		.uleb128 0x19
 6604 0c17 B8010000 		.4byte	.LASF183
 6605 0c1b 01       		.byte	0x1
 6606 0c1c 8904     		.2byte	0x489
 6607 0c1e 81000000 		.4byte	0x81
 6608 0c22 05       		.uleb128 0x5
 6609 0c23 03       		.byte	0x3
 6610 0c24 05000000 		.4byte	first_tension_valid.10153
 6611 0c28 19       		.uleb128 0x19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 149


 6612 0c29 BD070000 		.4byte	.LASF184
 6613 0c2d 01       		.byte	0x1
 6614 0c2e 8B04     		.2byte	0x48b
 6615 0c30 8D000000 		.4byte	0x8d
 6616 0c34 05       		.uleb128 0x5
 6617 0c35 03       		.byte	0x3
 6618 0c36 EE000000 		.4byte	count.10154
 6619 0c3a 19       		.uleb128 0x19
 6620 0c3b 0F010000 		.4byte	.LASF185
 6621 0c3f 01       		.byte	0x1
 6622 0c40 8C04     		.2byte	0x48c
 6623 0c42 99000000 		.4byte	0x99
 6624 0c46 05       		.uleb128 0x5
 6625 0c47 03       		.byte	0x3
 6626 0c48 F0000000 		.4byte	v_count.10155
 6627 0c4c 00       		.byte	0
 6628 0c4d 1D       		.uleb128 0x1d
 6629 0c4e 110A0000 		.4byte	.LASF260
 6630 0c52 01       		.byte	0x1
 6631 0c53 E205     		.2byte	0x5e2
 6632 0c55 00000000 		.4byte	.LFB71
 6633 0c59 74000000 		.4byte	.LFE71-.LFB71
 6634 0c5d 01       		.uleb128 0x1
 6635 0c5e 9C       		.byte	0x9c
 6636 0c5f 1E       		.uleb128 0x1e
 6637 0c60 6A020000 		.4byte	.LASF186
 6638 0c64 01       		.byte	0x1
 6639 0c65 FB05     		.2byte	0x5fb
 6640 0c67 00000000 		.4byte	.LFB72
 6641 0c6b 64000000 		.4byte	.LFE72-.LFB72
 6642 0c6f 01       		.uleb128 0x1
 6643 0c70 9C       		.byte	0x9c
 6644 0c71 A30C0000 		.4byte	0xca3
 6645 0c75 19       		.uleb128 0x19
 6646 0c76 5B050000 		.4byte	.LASF162
 6647 0c7a 01       		.byte	0x1
 6648 0c7b FD05     		.2byte	0x5fd
 6649 0c7d 81000000 		.4byte	0x81
 6650 0c81 02       		.uleb128 0x2
 6651 0c82 91       		.byte	0x91
 6652 0c83 73       		.sleb128 -13
 6653 0c84 19       		.uleb128 0x19
 6654 0c85 3C000000 		.4byte	.LASF187
 6655 0c89 01       		.byte	0x1
 6656 0c8a FE05     		.2byte	0x5fe
 6657 0c8c 8D000000 		.4byte	0x8d
 6658 0c90 02       		.uleb128 0x2
 6659 0c91 91       		.byte	0x91
 6660 0c92 76       		.sleb128 -10
 6661 0c93 19       		.uleb128 0x19
 6662 0c94 81090000 		.4byte	.LASF188
 6663 0c98 01       		.byte	0x1
 6664 0c99 FF05     		.2byte	0x5ff
 6665 0c9b 8D000000 		.4byte	0x8d
 6666 0c9f 02       		.uleb128 0x2
 6667 0ca0 91       		.byte	0x91
 6668 0ca1 74       		.sleb128 -12
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 150


 6669 0ca2 00       		.byte	0
 6670 0ca3 1B       		.uleb128 0x1b
 6671 0ca4 5D060000 		.4byte	.LASF189
 6672 0ca8 01       		.byte	0x1
 6673 0ca9 0F06     		.2byte	0x60f
 6674 0cab 00000000 		.4byte	.LFB73
 6675 0caf 44030000 		.4byte	.LFE73-.LFB73
 6676 0cb3 01       		.uleb128 0x1
 6677 0cb4 9C       		.byte	0x9c
 6678 0cb5 A20D0000 		.4byte	0xda2
 6679 0cb9 19       		.uleb128 0x19
 6680 0cba 09000000 		.4byte	.LASF190
 6681 0cbe 01       		.byte	0x1
 6682 0cbf 1006     		.2byte	0x610
 6683 0cc1 81000000 		.4byte	0x81
 6684 0cc5 05       		.uleb128 0x5
 6685 0cc6 03       		.byte	0x3
 6686 0cc7 F8000000 		.4byte	pos_cycle_status.10182
 6687 0ccb 19       		.uleb128 0x19
 6688 0ccc 440A0000 		.4byte	.LASF191
 6689 0cd0 01       		.byte	0x1
 6690 0cd1 1106     		.2byte	0x611
 6691 0cd3 A20D0000 		.4byte	0xda2
 6692 0cd7 05       		.uleb128 0x5
 6693 0cd8 03       		.byte	0x3
 6694 0cd9 04010000 		.4byte	emg_cycle_status.10183
 6695 0cdd 19       		.uleb128 0x19
 6696 0cde 9D0B0000 		.4byte	.LASF192
 6697 0ce2 01       		.byte	0x1
 6698 0ce3 1206     		.2byte	0x612
 6699 0ce5 81000000 		.4byte	0x81
 6700 0ce9 05       		.uleb128 0x5
 6701 0cea 03       		.byte	0x3
 6702 0ceb 06010000 		.4byte	rest_cycle_status.10184
 6703 0cef 19       		.uleb128 0x19
 6704 0cf0 EF010000 		.4byte	.LASF193
 6705 0cf4 01       		.byte	0x1
 6706 0cf5 1306     		.2byte	0x613
 6707 0cf7 BD000000 		.4byte	0xbd
 6708 0cfb 05       		.uleb128 0x5
 6709 0cfc 03       		.byte	0x3
 6710 0cfd 08000000 		.4byte	bin_threshold.10185
 6711 0d01 19       		.uleb128 0x19
 6712 0d02 6E010000 		.4byte	.LASF194
 6713 0d06 01       		.byte	0x1
 6714 0d07 1406     		.2byte	0x614
 6715 0d09 BD000000 		.4byte	0xbd
 6716 0d0d 05       		.uleb128 0x5
 6717 0d0e 03       		.byte	0x3
 6718 0d0f FC000000 		.4byte	thr_pos.10186
 6719 0d13 19       		.uleb128 0x19
 6720 0d14 DD070000 		.4byte	.LASF195
 6721 0d18 01       		.byte	0x1
 6722 0d19 1406     		.2byte	0x614
 6723 0d1b BD000000 		.4byte	0xbd
 6724 0d1f 05       		.uleb128 0x5
 6725 0d20 03       		.byte	0x3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 151


 6726 0d21 00010000 		.4byte	max_pos.10187
 6727 0d25 1C       		.uleb128 0x1c
 6728 0d26 6900     		.ascii	"i\000"
 6729 0d28 01       		.byte	0x1
 6730 0d29 1506     		.2byte	0x615
 6731 0d2b 81000000 		.4byte	0x81
 6732 0d2f 02       		.uleb128 0x2
 6733 0d30 91       		.byte	0x91
 6734 0d31 77       		.sleb128 -9
 6735 0d32 19       		.uleb128 0x19
 6736 0d33 02040000 		.4byte	.LASF196
 6737 0d37 01       		.byte	0x1
 6738 0d38 1506     		.2byte	0x615
 6739 0d3a 81000000 		.4byte	0x81
 6740 0d3e 02       		.uleb128 0x2
 6741 0d3f 91       		.byte	0x91
 6742 0d40 67       		.sleb128 -25
 6743 0d41 19       		.uleb128 0x19
 6744 0d42 AB000000 		.4byte	.LASF197
 6745 0d46 01       		.byte	0x1
 6746 0d47 1506     		.2byte	0x615
 6747 0d49 81000000 		.4byte	0x81
 6748 0d4d 02       		.uleb128 0x2
 6749 0d4e 91       		.byte	0x91
 6750 0d4f 66       		.sleb128 -26
 6751 0d50 19       		.uleb128 0x19
 6752 0d51 250A0000 		.4byte	.LASF198
 6753 0d55 01       		.byte	0x1
 6754 0d56 1606     		.2byte	0x616
 6755 0d58 BD000000 		.4byte	0xbd
 6756 0d5c 02       		.uleb128 0x2
 6757 0d5d 91       		.byte	0x91
 6758 0d5e 70       		.sleb128 -16
 6759 0d5f 19       		.uleb128 0x19
 6760 0d60 8D030000 		.4byte	.LASF199
 6761 0d64 01       		.byte	0x1
 6762 0d65 1606     		.2byte	0x616
 6763 0d67 BD000000 		.4byte	0xbd
 6764 0d6b 02       		.uleb128 0x2
 6765 0d6c 91       		.byte	0x91
 6766 0d6d 6C       		.sleb128 -20
 6767 0d6e 19       		.uleb128 0x19
 6768 0d6f 18030000 		.4byte	.LASF200
 6769 0d73 01       		.byte	0x1
 6770 0d74 1706     		.2byte	0x617
 6771 0d76 BD000000 		.4byte	0xbd
 6772 0d7a 02       		.uleb128 0x2
 6773 0d7b 91       		.byte	0x91
 6774 0d7c 68       		.sleb128 -24
 6775 0d7d 19       		.uleb128 0x19
 6776 0d7e 0F050000 		.4byte	.LASF201
 6777 0d82 01       		.byte	0x1
 6778 0d83 1806     		.2byte	0x618
 6779 0d85 99000000 		.4byte	0x99
 6780 0d89 05       		.uleb128 0x5
 6781 0d8a 03       		.byte	0x3
 6782 0d8b 08010000 		.4byte	timer_value_s.10194
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 152


 6783 0d8f 19       		.uleb128 0x19
 6784 0d90 B3040000 		.4byte	.LASF202
 6785 0d94 01       		.byte	0x1
 6786 0d95 1806     		.2byte	0x618
 6787 0d97 99000000 		.4byte	0x99
 6788 0d9b 05       		.uleb128 0x5
 6789 0d9c 03       		.byte	0x3
 6790 0d9d 0C010000 		.4byte	timer_value_e.10195
 6791 0da1 00       		.byte	0
 6792 0da2 0E       		.uleb128 0xe
 6793 0da3 81000000 		.4byte	0x81
 6794 0da7 B20D0000 		.4byte	0xdb2
 6795 0dab 0F       		.uleb128 0xf
 6796 0dac 0E010000 		.4byte	0x10e
 6797 0db0 01       		.byte	0x1
 6798 0db1 00       		.byte	0
 6799 0db2 1B       		.uleb128 0x1b
 6800 0db3 4F080000 		.4byte	.LASF203
 6801 0db7 01       		.byte	0x1
 6802 0db8 7A06     		.2byte	0x67a
 6803 0dba 00000000 		.4byte	.LFB74
 6804 0dbe 08010000 		.4byte	.LFE74-.LFB74
 6805 0dc2 01       		.uleb128 0x1
 6806 0dc3 9C       		.byte	0x9c
 6807 0dc4 380E0000 		.4byte	0xe38
 6808 0dc8 19       		.uleb128 0x19
 6809 0dc9 E9050000 		.4byte	.LASF204
 6810 0dcd 01       		.byte	0x1
 6811 0dce 7C06     		.2byte	0x67c
 6812 0dd0 EA000000 		.4byte	0xea
 6813 0dd4 02       		.uleb128 0x2
 6814 0dd5 91       		.byte	0x91
 6815 0dd6 64       		.sleb128 -28
 6816 0dd7 19       		.uleb128 0x19
 6817 0dd8 060A0000 		.4byte	.LASF205
 6818 0ddc 01       		.byte	0x1
 6819 0ddd 7D06     		.2byte	0x67d
 6820 0ddf 81000000 		.4byte	0x81
 6821 0de3 05       		.uleb128 0x5
 6822 0de4 03       		.byte	0x3
 6823 0de5 14010000 		.4byte	row_number.10217
 6824 0de9 19       		.uleb128 0x19
 6825 0dea 60030000 		.4byte	.LASF206
 6826 0dee 01       		.byte	0x1
 6827 0def 7E06     		.2byte	0x67e
 6828 0df1 81000000 		.4byte	0x81
 6829 0df5 02       		.uleb128 0x2
 6830 0df6 91       		.byte	0x91
 6831 0df7 77       		.sleb128 -9
 6832 0df8 19       		.uleb128 0x19
 6833 0df9 720A0000 		.4byte	.LASF207
 6834 0dfd 01       		.byte	0x1
 6835 0dfe 7F06     		.2byte	0x67f
 6836 0e00 380E0000 		.4byte	0xe38
 6837 0e04 02       		.uleb128 0x2
 6838 0e05 91       		.byte	0x91
 6839 0e06 70       		.sleb128 -16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 153


 6840 0e07 19       		.uleb128 0x19
 6841 0e08 B3000000 		.4byte	.LASF208
 6842 0e0c 01       		.byte	0x1
 6843 0e0d 8006     		.2byte	0x680
 6844 0e0f 380E0000 		.4byte	0xe38
 6845 0e13 02       		.uleb128 0x2
 6846 0e14 91       		.byte	0x91
 6847 0e15 6C       		.sleb128 -20
 6848 0e16 19       		.uleb128 0x19
 6849 0e17 430C0000 		.4byte	.LASF209
 6850 0e1b 01       		.byte	0x1
 6851 0e1c 8106     		.2byte	0x681
 6852 0e1e 81000000 		.4byte	0x81
 6853 0e22 02       		.uleb128 0x2
 6854 0e23 91       		.byte	0x91
 6855 0e24 6B       		.sleb128 -21
 6856 0e25 19       		.uleb128 0x19
 6857 0e26 C3070000 		.4byte	.LASF210
 6858 0e2a 01       		.byte	0x1
 6859 0e2b 8206     		.2byte	0x682
 6860 0e2d 380E0000 		.4byte	0xe38
 6861 0e31 05       		.uleb128 0x5
 6862 0e32 03       		.byte	0x3
 6863 0e33 10010000 		.4byte	m_addr.10222
 6864 0e37 00       		.byte	0
 6865 0e38 0A       		.uleb128 0xa
 6866 0e39 04       		.byte	0x4
 6867 0e3a 81000000 		.4byte	0x81
 6868 0e3e 0E       		.uleb128 0xe
 6869 0e3f 4E0E0000 		.4byte	0xe4e
 6870 0e43 4E0E0000 		.4byte	0xe4e
 6871 0e47 0F       		.uleb128 0xf
 6872 0e48 0E010000 		.4byte	0x10e
 6873 0e4c 1C       		.byte	0x1c
 6874 0e4d 00       		.byte	0
 6875 0e4e 1F       		.uleb128 0x1f
 6876 0e4f 81000000 		.4byte	0x81
 6877 0e53 17       		.uleb128 0x17
 6878 0e54 7D0A0000 		.4byte	.LASF211
 6879 0e58 01       		.byte	0x1
 6880 0e59 45       		.byte	0x45
 6881 0e5a 640E0000 		.4byte	0xe64
 6882 0e5e 05       		.uleb128 0x5
 6883 0e5f 03       		.byte	0x3
 6884 0e60 00000000 		.4byte	pwm_preload_values
 6885 0e64 1F       		.uleb128 0x1f
 6886 0e65 3E0E0000 		.4byte	0xe3e
 6887 0e69 20       		.uleb128 0x20
 6888 0e6a 290B0000 		.4byte	.LASF212
 6889 0e6e 08       		.byte	0x8
 6890 0e6f 1207     		.2byte	0x712
 6891 0e71 750E0000 		.4byte	0xe75
 6892 0e75 06       		.uleb128 0x6
 6893 0e76 76000000 		.4byte	0x76
 6894 0e7a 20       		.uleb128 0x20
 6895 0e7b 41050000 		.4byte	.LASF213
 6896 0e7f 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 154


 6897 0e80 4E01     		.2byte	0x14e
 6898 0e82 89010000 		.4byte	0x189
 6899 0e86 20       		.uleb128 0x20
 6900 0e87 84030000 		.4byte	.LASF214
 6901 0e8b 07       		.byte	0x7
 6902 0e8c 4E01     		.2byte	0x14e
 6903 0e8e 89010000 		.4byte	0x189
 6904 0e92 20       		.uleb128 0x20
 6905 0e93 E7080000 		.4byte	.LASF215
 6906 0e97 07       		.byte	0x7
 6907 0e98 4E01     		.2byte	0x14e
 6908 0e9a 89010000 		.4byte	0x189
 6909 0e9e 20       		.uleb128 0x20
 6910 0e9f 08050000 		.4byte	.LASF216
 6911 0ea3 07       		.byte	0x7
 6912 0ea4 4F01     		.2byte	0x14f
 6913 0ea6 C6010000 		.4byte	0x1c6
 6914 0eaa 20       		.uleb128 0x20
 6915 0eab 390C0000 		.4byte	.LASF217
 6916 0eaf 07       		.byte	0x7
 6917 0eb0 4F01     		.2byte	0x14f
 6918 0eb2 C6010000 		.4byte	0x1c6
 6919 0eb6 20       		.uleb128 0x20
 6920 0eb7 50000000 		.4byte	.LASF218
 6921 0ebb 07       		.byte	0x7
 6922 0ebc 5001     		.2byte	0x150
 6923 0ebe 57020000 		.4byte	0x257
 6924 0ec2 20       		.uleb128 0x20
 6925 0ec3 9F0A0000 		.4byte	.LASF219
 6926 0ec7 07       		.byte	0x7
 6927 0ec8 5101     		.2byte	0x151
 6928 0eca A4020000 		.4byte	0x2a4
 6929 0ece 20       		.uleb128 0x20
 6930 0ecf CA070000 		.4byte	.LASF220
 6931 0ed3 07       		.byte	0x7
 6932 0ed4 5101     		.2byte	0x151
 6933 0ed6 A4020000 		.4byte	0x2a4
 6934 0eda 20       		.uleb128 0x20
 6935 0edb 24070000 		.4byte	.LASF221
 6936 0edf 07       		.byte	0x7
 6937 0ee0 5201     		.2byte	0x152
 6938 0ee2 DC060000 		.4byte	0x6dc
 6939 0ee6 20       		.uleb128 0x20
 6940 0ee7 D3080000 		.4byte	.LASF222
 6941 0eeb 07       		.byte	0x7
 6942 0eec 5301     		.2byte	0x153
 6943 0eee B4060000 		.4byte	0x6b4
 6944 0ef2 20       		.uleb128 0x20
 6945 0ef3 6F070000 		.4byte	.LASF223
 6946 0ef7 07       		.byte	0x7
 6947 0ef8 5301     		.2byte	0x153
 6948 0efa B4060000 		.4byte	0x6b4
 6949 0efe 20       		.uleb128 0x20
 6950 0eff B9080000 		.4byte	.LASF224
 6951 0f03 07       		.byte	0x7
 6952 0f04 5301     		.2byte	0x153
 6953 0f06 B4060000 		.4byte	0x6b4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 155


 6954 0f0a 0E       		.uleb128 0xe
 6955 0f0b B4060000 		.4byte	0x6b4
 6956 0f0f 1A0F0000 		.4byte	0xf1a
 6957 0f13 0F       		.uleb128 0xf
 6958 0f14 0E010000 		.4byte	0x10e
 6959 0f18 02       		.byte	0x2
 6960 0f19 00       		.byte	0
 6961 0f1a 20       		.uleb128 0x20
 6962 0f1b DC030000 		.4byte	.LASF225
 6963 0f1f 07       		.byte	0x7
 6964 0f20 5401     		.2byte	0x154
 6965 0f22 0A0F0000 		.4byte	0xf0a
 6966 0f26 20       		.uleb128 0x20
 6967 0f27 09040000 		.4byte	.LASF226
 6968 0f2b 07       		.byte	0x7
 6969 0f2c 5501     		.2byte	0x155
 6970 0f2e B4060000 		.4byte	0x6b4
 6971 0f32 20       		.uleb128 0x20
 6972 0f33 13040000 		.4byte	.LASF227
 6973 0f37 07       		.byte	0x7
 6974 0f38 5501     		.2byte	0x155
 6975 0f3a B4060000 		.4byte	0x6b4
 6976 0f3e 20       		.uleb128 0x20
 6977 0f3f CC010000 		.4byte	.LASF228
 6978 0f43 07       		.byte	0x7
 6979 0f44 5701     		.2byte	0x157
 6980 0f46 99000000 		.4byte	0x99
 6981 0f4a 20       		.uleb128 0x20
 6982 0f4b 0F070000 		.4byte	.LASF229
 6983 0f4f 07       		.byte	0x7
 6984 0f50 5801     		.2byte	0x158
 6985 0f52 99000000 		.4byte	0x99
 6986 0f56 20       		.uleb128 0x20
 6987 0f57 4E090000 		.4byte	.LASF230
 6988 0f5b 07       		.byte	0x7
 6989 0f5c 5901     		.2byte	0x159
 6990 0f5e D5000000 		.4byte	0xd5
 6991 0f62 20       		.uleb128 0x20
 6992 0f63 D9090000 		.4byte	.LASF231
 6993 0f67 07       		.byte	0x7
 6994 0f68 5B01     		.2byte	0x15b
 6995 0f6a BD000000 		.4byte	0xbd
 6996 0f6e 20       		.uleb128 0x20
 6997 0f6f 840B0000 		.4byte	.LASF232
 6998 0f73 07       		.byte	0x7
 6999 0f74 5C01     		.2byte	0x15c
 7000 0f76 81000000 		.4byte	0x81
 7001 0f7a 20       		.uleb128 0x20
 7002 0f7b 010B0000 		.4byte	.LASF233
 7003 0f7f 07       		.byte	0x7
 7004 0f80 5D01     		.2byte	0x15d
 7005 0f82 81000000 		.4byte	0x81
 7006 0f86 20       		.uleb128 0x20
 7007 0f87 61040000 		.4byte	.LASF234
 7008 0f8b 07       		.byte	0x7
 7009 0f8c 5E01     		.2byte	0x15e
 7010 0f8e BD000000 		.4byte	0xbd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 156


 7011 0f92 20       		.uleb128 0x20
 7012 0f93 360B0000 		.4byte	.LASF235
 7013 0f97 07       		.byte	0x7
 7014 0f98 5F01     		.2byte	0x15f
 7015 0f9a BD000000 		.4byte	0xbd
 7016 0f9e 20       		.uleb128 0x20
 7017 0f9f E6040000 		.4byte	.LASF236
 7018 0fa3 07       		.byte	0x7
 7019 0fa4 6101     		.2byte	0x161
 7020 0fa6 88070000 		.4byte	0x788
 7021 0faa 20       		.uleb128 0x20
 7022 0fab A1030000 		.4byte	.LASF237
 7023 0faf 07       		.byte	0x7
 7024 0fb0 6201     		.2byte	0x162
 7025 0fb2 50070000 		.4byte	0x750
 7026 0fb6 20       		.uleb128 0x20
 7027 0fb7 F4020000 		.4byte	.LASF238
 7028 0fbb 07       		.byte	0x7
 7029 0fbc 6301     		.2byte	0x163
 7030 0fbe 50070000 		.4byte	0x750
 7031 0fc2 20       		.uleb128 0x20
 7032 0fc3 0C060000 		.4byte	.LASF239
 7033 0fc7 07       		.byte	0x7
 7034 0fc8 6601     		.2byte	0x166
 7035 0fca 81000000 		.4byte	0x81
 7036 0fce 20       		.uleb128 0x20
 7037 0fcf 81000000 		.4byte	.LASF240
 7038 0fd3 07       		.byte	0x7
 7039 0fd4 6701     		.2byte	0x167
 7040 0fd6 81000000 		.4byte	0x81
 7041 0fda 20       		.uleb128 0x20
 7042 0fdb 09030000 		.4byte	.LASF241
 7043 0fdf 07       		.byte	0x7
 7044 0fe0 6801     		.2byte	0x168
 7045 0fe2 81000000 		.4byte	0x81
 7046 0fe6 20       		.uleb128 0x20
 7047 0fe7 95000000 		.4byte	.LASF242
 7048 0feb 07       		.byte	0x7
 7049 0fec 6901     		.2byte	0x169
 7050 0fee 81000000 		.4byte	0x81
 7051 0ff2 20       		.uleb128 0x20
 7052 0ff3 6D0C0000 		.4byte	.LASF243
 7053 0ff7 07       		.byte	0x7
 7054 0ff8 6B01     		.2byte	0x16b
 7055 0ffa 81000000 		.4byte	0x81
 7056 0ffe 20       		.uleb128 0x20
 7057 0fff DA080000 		.4byte	.LASF244
 7058 1003 07       		.byte	0x7
 7059 1004 6C01     		.2byte	0x16c
 7060 1006 81000000 		.4byte	0x81
 7061 100a 20       		.uleb128 0x20
 7062 100b 6A030000 		.4byte	.LASF245
 7063 100f 07       		.byte	0x7
 7064 1010 6D01     		.2byte	0x16d
 7065 1012 81000000 		.4byte	0x81
 7066 1016 20       		.uleb128 0x20
 7067 1017 A9080000 		.4byte	.LASF246
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 157


 7068 101b 07       		.byte	0x7
 7069 101c 6E01     		.2byte	0x16e
 7070 101e 81000000 		.4byte	0x81
 7071 1022 20       		.uleb128 0x20
 7072 1023 54070000 		.4byte	.LASF247
 7073 1027 07       		.byte	0x7
 7074 1028 6F01     		.2byte	0x16f
 7075 102a 81000000 		.4byte	0x81
 7076 102e 0E       		.uleb128 0xe
 7077 102f B1000000 		.4byte	0xb1
 7078 1033 3E100000 		.4byte	0x103e
 7079 1037 0F       		.uleb128 0xf
 7080 1038 0E010000 		.4byte	0x10e
 7081 103c 03       		.byte	0x3
 7082 103d 00       		.byte	0
 7083 103e 20       		.uleb128 0x20
 7084 103f 01030000 		.4byte	.LASF248
 7085 1043 07       		.byte	0x7
 7086 1044 7201     		.2byte	0x172
 7087 1046 2E100000 		.4byte	0x102e
 7088 104a 20       		.uleb128 0x20
 7089 104b D3030000 		.4byte	.LASF249
 7090 104f 07       		.byte	0x7
 7091 1050 7601     		.2byte	0x176
 7092 1052 A5000000 		.4byte	0xa5
 7093 1056 0E       		.uleb128 0xe
 7094 1057 99000000 		.4byte	0x99
 7095 105b 66100000 		.4byte	0x1066
 7096 105f 0F       		.uleb128 0xf
 7097 1060 0E010000 		.4byte	0x10e
 7098 1064 02       		.byte	0x2
 7099 1065 00       		.byte	0
 7100 1066 20       		.uleb128 0x20
 7101 1067 30050000 		.4byte	.LASF250
 7102 106b 07       		.byte	0x7
 7103 106c 7901     		.2byte	0x179
 7104 106e 56100000 		.4byte	0x1056
 7105 1072 20       		.uleb128 0x20
 7106 1073 E5070000 		.4byte	.LASF251
 7107 1077 07       		.byte	0x7
 7108 1078 7C01     		.2byte	0x17c
 7109 107a BD000000 		.4byte	0xbd
 7110 107e 20       		.uleb128 0x20
 7111 107f 4D040000 		.4byte	.LASF252
 7112 1083 07       		.byte	0x7
 7113 1084 7F01     		.2byte	0x17f
 7114 1086 83010000 		.4byte	0x183
 7115 108a 20       		.uleb128 0x20
 7116 108b 32020000 		.4byte	.LASF253
 7117 108f 07       		.byte	0x7
 7118 1090 8001     		.2byte	0x180
 7119 1092 53000000 		.4byte	0x53
 7120 1096 0E       		.uleb128 0xe
 7121 1097 38060000 		.4byte	0x638
 7122 109b A6100000 		.4byte	0x10a6
 7123 109f 0F       		.uleb128 0xf
 7124 10a0 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 158


 7125 10a4 02       		.byte	0x2
 7126 10a5 00       		.byte	0
 7127 10a6 20       		.uleb128 0x20
 7128 10a7 74050000 		.4byte	.LASF254
 7129 10ab 07       		.byte	0x7
 7130 10ac 8701     		.2byte	0x187
 7131 10ae 96100000 		.4byte	0x1096
 7132 10b2 20       		.uleb128 0x20
 7133 10b3 93040000 		.4byte	.LASF255
 7134 10b7 07       		.byte	0x7
 7135 10b8 8701     		.2byte	0x187
 7136 10ba 96100000 		.4byte	0x1096
 7137 10be 00       		.byte	0
 7138              		.section	.debug_abbrev,"",%progbits
 7139              	.Ldebug_abbrev0:
 7140 0000 01       		.uleb128 0x1
 7141 0001 11       		.uleb128 0x11
 7142 0002 01       		.byte	0x1
 7143 0003 25       		.uleb128 0x25
 7144 0004 0E       		.uleb128 0xe
 7145 0005 13       		.uleb128 0x13
 7146 0006 0B       		.uleb128 0xb
 7147 0007 03       		.uleb128 0x3
 7148 0008 0E       		.uleb128 0xe
 7149 0009 1B       		.uleb128 0x1b
 7150 000a 0E       		.uleb128 0xe
 7151 000b 55       		.uleb128 0x55
 7152 000c 17       		.uleb128 0x17
 7153 000d 11       		.uleb128 0x11
 7154 000e 01       		.uleb128 0x1
 7155 000f 10       		.uleb128 0x10
 7156 0010 17       		.uleb128 0x17
 7157 0011 00       		.byte	0
 7158 0012 00       		.byte	0
 7159 0013 02       		.uleb128 0x2
 7160 0014 24       		.uleb128 0x24
 7161 0015 00       		.byte	0
 7162 0016 0B       		.uleb128 0xb
 7163 0017 0B       		.uleb128 0xb
 7164 0018 3E       		.uleb128 0x3e
 7165 0019 0B       		.uleb128 0xb
 7166 001a 03       		.uleb128 0x3
 7167 001b 0E       		.uleb128 0xe
 7168 001c 00       		.byte	0
 7169 001d 00       		.byte	0
 7170 001e 03       		.uleb128 0x3
 7171 001f 16       		.uleb128 0x16
 7172 0020 00       		.byte	0
 7173 0021 03       		.uleb128 0x3
 7174 0022 0E       		.uleb128 0xe
 7175 0023 3A       		.uleb128 0x3a
 7176 0024 0B       		.uleb128 0xb
 7177 0025 3B       		.uleb128 0x3b
 7178 0026 0B       		.uleb128 0xb
 7179 0027 49       		.uleb128 0x49
 7180 0028 13       		.uleb128 0x13
 7181 0029 00       		.byte	0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 159


 7182 002a 00       		.byte	0
 7183 002b 04       		.uleb128 0x4
 7184 002c 24       		.uleb128 0x24
 7185 002d 00       		.byte	0
 7186 002e 0B       		.uleb128 0xb
 7187 002f 0B       		.uleb128 0xb
 7188 0030 3E       		.uleb128 0x3e
 7189 0031 0B       		.uleb128 0xb
 7190 0032 03       		.uleb128 0x3
 7191 0033 08       		.uleb128 0x8
 7192 0034 00       		.byte	0
 7193 0035 00       		.byte	0
 7194 0036 05       		.uleb128 0x5
 7195 0037 16       		.uleb128 0x16
 7196 0038 00       		.byte	0
 7197 0039 03       		.uleb128 0x3
 7198 003a 0E       		.uleb128 0xe
 7199 003b 3A       		.uleb128 0x3a
 7200 003c 0B       		.uleb128 0xb
 7201 003d 3B       		.uleb128 0x3b
 7202 003e 05       		.uleb128 0x5
 7203 003f 49       		.uleb128 0x49
 7204 0040 13       		.uleb128 0x13
 7205 0041 00       		.byte	0
 7206 0042 00       		.byte	0
 7207 0043 06       		.uleb128 0x6
 7208 0044 35       		.uleb128 0x35
 7209 0045 00       		.byte	0
 7210 0046 49       		.uleb128 0x49
 7211 0047 13       		.uleb128 0x13
 7212 0048 00       		.byte	0
 7213 0049 00       		.byte	0
 7214 004a 07       		.uleb128 0x7
 7215 004b 04       		.uleb128 0x4
 7216 004c 01       		.byte	0x1
 7217 004d 03       		.uleb128 0x3
 7218 004e 0E       		.uleb128 0xe
 7219 004f 0B       		.uleb128 0xb
 7220 0050 0B       		.uleb128 0xb
 7221 0051 49       		.uleb128 0x49
 7222 0052 13       		.uleb128 0x13
 7223 0053 3A       		.uleb128 0x3a
 7224 0054 0B       		.uleb128 0xb
 7225 0055 3B       		.uleb128 0x3b
 7226 0056 0B       		.uleb128 0xb
 7227 0057 01       		.uleb128 0x1
 7228 0058 13       		.uleb128 0x13
 7229 0059 00       		.byte	0
 7230 005a 00       		.byte	0
 7231 005b 08       		.uleb128 0x8
 7232 005c 28       		.uleb128 0x28
 7233 005d 00       		.byte	0
 7234 005e 03       		.uleb128 0x3
 7235 005f 0E       		.uleb128 0xe
 7236 0060 1C       		.uleb128 0x1c
 7237 0061 0B       		.uleb128 0xb
 7238 0062 00       		.byte	0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 160


 7239 0063 00       		.byte	0
 7240 0064 09       		.uleb128 0x9
 7241 0065 13       		.uleb128 0x13
 7242 0066 00       		.byte	0
 7243 0067 03       		.uleb128 0x3
 7244 0068 0E       		.uleb128 0xe
 7245 0069 3C       		.uleb128 0x3c
 7246 006a 19       		.uleb128 0x19
 7247 006b 00       		.byte	0
 7248 006c 00       		.byte	0
 7249 006d 0A       		.uleb128 0xa
 7250 006e 0F       		.uleb128 0xf
 7251 006f 00       		.byte	0
 7252 0070 0B       		.uleb128 0xb
 7253 0071 0B       		.uleb128 0xb
 7254 0072 49       		.uleb128 0x49
 7255 0073 13       		.uleb128 0x13
 7256 0074 00       		.byte	0
 7257 0075 00       		.byte	0
 7258 0076 0B       		.uleb128 0xb
 7259 0077 13       		.uleb128 0x13
 7260 0078 01       		.byte	0x1
 7261 0079 03       		.uleb128 0x3
 7262 007a 0E       		.uleb128 0xe
 7263 007b 0B       		.uleb128 0xb
 7264 007c 0B       		.uleb128 0xb
 7265 007d 3A       		.uleb128 0x3a
 7266 007e 0B       		.uleb128 0xb
 7267 007f 3B       		.uleb128 0x3b
 7268 0080 0B       		.uleb128 0xb
 7269 0081 01       		.uleb128 0x1
 7270 0082 13       		.uleb128 0x13
 7271 0083 00       		.byte	0
 7272 0084 00       		.byte	0
 7273 0085 0C       		.uleb128 0xc
 7274 0086 0D       		.uleb128 0xd
 7275 0087 00       		.byte	0
 7276 0088 03       		.uleb128 0x3
 7277 0089 08       		.uleb128 0x8
 7278 008a 3A       		.uleb128 0x3a
 7279 008b 0B       		.uleb128 0xb
 7280 008c 3B       		.uleb128 0x3b
 7281 008d 0B       		.uleb128 0xb
 7282 008e 49       		.uleb128 0x49
 7283 008f 13       		.uleb128 0x13
 7284 0090 38       		.uleb128 0x38
 7285 0091 0B       		.uleb128 0xb
 7286 0092 00       		.byte	0
 7287 0093 00       		.byte	0
 7288 0094 0D       		.uleb128 0xd
 7289 0095 0D       		.uleb128 0xd
 7290 0096 00       		.byte	0
 7291 0097 03       		.uleb128 0x3
 7292 0098 0E       		.uleb128 0xe
 7293 0099 3A       		.uleb128 0x3a
 7294 009a 0B       		.uleb128 0xb
 7295 009b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 161


 7296 009c 0B       		.uleb128 0xb
 7297 009d 49       		.uleb128 0x49
 7298 009e 13       		.uleb128 0x13
 7299 009f 38       		.uleb128 0x38
 7300 00a0 0B       		.uleb128 0xb
 7301 00a1 00       		.byte	0
 7302 00a2 00       		.byte	0
 7303 00a3 0E       		.uleb128 0xe
 7304 00a4 01       		.uleb128 0x1
 7305 00a5 01       		.byte	0x1
 7306 00a6 49       		.uleb128 0x49
 7307 00a7 13       		.uleb128 0x13
 7308 00a8 01       		.uleb128 0x1
 7309 00a9 13       		.uleb128 0x13
 7310 00aa 00       		.byte	0
 7311 00ab 00       		.byte	0
 7312 00ac 0F       		.uleb128 0xf
 7313 00ad 21       		.uleb128 0x21
 7314 00ae 00       		.byte	0
 7315 00af 49       		.uleb128 0x49
 7316 00b0 13       		.uleb128 0x13
 7317 00b1 2F       		.uleb128 0x2f
 7318 00b2 0B       		.uleb128 0xb
 7319 00b3 00       		.byte	0
 7320 00b4 00       		.byte	0
 7321 00b5 10       		.uleb128 0x10
 7322 00b6 13       		.uleb128 0x13
 7323 00b7 01       		.byte	0x1
 7324 00b8 03       		.uleb128 0x3
 7325 00b9 0E       		.uleb128 0xe
 7326 00ba 0B       		.uleb128 0xb
 7327 00bb 05       		.uleb128 0x5
 7328 00bc 3A       		.uleb128 0x3a
 7329 00bd 0B       		.uleb128 0xb
 7330 00be 3B       		.uleb128 0x3b
 7331 00bf 0B       		.uleb128 0xb
 7332 00c0 01       		.uleb128 0x1
 7333 00c1 13       		.uleb128 0x13
 7334 00c2 00       		.byte	0
 7335 00c3 00       		.byte	0
 7336 00c4 11       		.uleb128 0x11
 7337 00c5 0D       		.uleb128 0xd
 7338 00c6 00       		.byte	0
 7339 00c7 03       		.uleb128 0x3
 7340 00c8 0E       		.uleb128 0xe
 7341 00c9 3A       		.uleb128 0x3a
 7342 00ca 0B       		.uleb128 0xb
 7343 00cb 3B       		.uleb128 0x3b
 7344 00cc 05       		.uleb128 0x5
 7345 00cd 49       		.uleb128 0x49
 7346 00ce 13       		.uleb128 0x13
 7347 00cf 38       		.uleb128 0x38
 7348 00d0 0B       		.uleb128 0xb
 7349 00d1 00       		.byte	0
 7350 00d2 00       		.byte	0
 7351 00d3 12       		.uleb128 0x12
 7352 00d4 0D       		.uleb128 0xd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 162


 7353 00d5 00       		.byte	0
 7354 00d6 03       		.uleb128 0x3
 7355 00d7 0E       		.uleb128 0xe
 7356 00d8 3A       		.uleb128 0x3a
 7357 00d9 0B       		.uleb128 0xb
 7358 00da 3B       		.uleb128 0x3b
 7359 00db 05       		.uleb128 0x5
 7360 00dc 49       		.uleb128 0x49
 7361 00dd 13       		.uleb128 0x13
 7362 00de 38       		.uleb128 0x38
 7363 00df 05       		.uleb128 0x5
 7364 00e0 00       		.byte	0
 7365 00e1 00       		.byte	0
 7366 00e2 13       		.uleb128 0x13
 7367 00e3 13       		.uleb128 0x13
 7368 00e4 01       		.byte	0x1
 7369 00e5 03       		.uleb128 0x3
 7370 00e6 0E       		.uleb128 0xe
 7371 00e7 0B       		.uleb128 0xb
 7372 00e8 0B       		.uleb128 0xb
 7373 00e9 3A       		.uleb128 0x3a
 7374 00ea 0B       		.uleb128 0xb
 7375 00eb 3B       		.uleb128 0x3b
 7376 00ec 05       		.uleb128 0x5
 7377 00ed 01       		.uleb128 0x1
 7378 00ee 13       		.uleb128 0x13
 7379 00ef 00       		.byte	0
 7380 00f0 00       		.byte	0
 7381 00f1 14       		.uleb128 0x14
 7382 00f2 04       		.uleb128 0x4
 7383 00f3 01       		.byte	0x1
 7384 00f4 0B       		.uleb128 0xb
 7385 00f5 0B       		.uleb128 0xb
 7386 00f6 49       		.uleb128 0x49
 7387 00f7 13       		.uleb128 0x13
 7388 00f8 3A       		.uleb128 0x3a
 7389 00f9 0B       		.uleb128 0xb
 7390 00fa 3B       		.uleb128 0x3b
 7391 00fb 05       		.uleb128 0x5
 7392 00fc 01       		.uleb128 0x1
 7393 00fd 13       		.uleb128 0x13
 7394 00fe 00       		.byte	0
 7395 00ff 00       		.byte	0
 7396 0100 15       		.uleb128 0x15
 7397 0101 2E       		.uleb128 0x2e
 7398 0102 00       		.byte	0
 7399 0103 3F       		.uleb128 0x3f
 7400 0104 19       		.uleb128 0x19
 7401 0105 03       		.uleb128 0x3
 7402 0106 0E       		.uleb128 0xe
 7403 0107 3A       		.uleb128 0x3a
 7404 0108 0B       		.uleb128 0xb
 7405 0109 3B       		.uleb128 0x3b
 7406 010a 0B       		.uleb128 0xb
 7407 010b 27       		.uleb128 0x27
 7408 010c 19       		.uleb128 0x19
 7409 010d 11       		.uleb128 0x11
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 163


 7410 010e 01       		.uleb128 0x1
 7411 010f 12       		.uleb128 0x12
 7412 0110 06       		.uleb128 0x6
 7413 0111 40       		.uleb128 0x40
 7414 0112 18       		.uleb128 0x18
 7415 0113 9742     		.uleb128 0x2117
 7416 0115 19       		.uleb128 0x19
 7417 0116 00       		.byte	0
 7418 0117 00       		.byte	0
 7419 0118 16       		.uleb128 0x16
 7420 0119 2E       		.uleb128 0x2e
 7421 011a 01       		.byte	0x1
 7422 011b 3F       		.uleb128 0x3f
 7423 011c 19       		.uleb128 0x19
 7424 011d 03       		.uleb128 0x3
 7425 011e 0E       		.uleb128 0xe
 7426 011f 3A       		.uleb128 0x3a
 7427 0120 0B       		.uleb128 0xb
 7428 0121 3B       		.uleb128 0x3b
 7429 0122 0B       		.uleb128 0xb
 7430 0123 11       		.uleb128 0x11
 7431 0124 01       		.uleb128 0x1
 7432 0125 12       		.uleb128 0x12
 7433 0126 06       		.uleb128 0x6
 7434 0127 40       		.uleb128 0x40
 7435 0128 18       		.uleb128 0x18
 7436 0129 9642     		.uleb128 0x2116
 7437 012b 19       		.uleb128 0x19
 7438 012c 01       		.uleb128 0x1
 7439 012d 13       		.uleb128 0x13
 7440 012e 00       		.byte	0
 7441 012f 00       		.byte	0
 7442 0130 17       		.uleb128 0x17
 7443 0131 34       		.uleb128 0x34
 7444 0132 00       		.byte	0
 7445 0133 03       		.uleb128 0x3
 7446 0134 0E       		.uleb128 0xe
 7447 0135 3A       		.uleb128 0x3a
 7448 0136 0B       		.uleb128 0xb
 7449 0137 3B       		.uleb128 0x3b
 7450 0138 0B       		.uleb128 0xb
 7451 0139 49       		.uleb128 0x49
 7452 013a 13       		.uleb128 0x13
 7453 013b 02       		.uleb128 0x2
 7454 013c 18       		.uleb128 0x18
 7455 013d 00       		.byte	0
 7456 013e 00       		.byte	0
 7457 013f 18       		.uleb128 0x18
 7458 0140 2E       		.uleb128 0x2e
 7459 0141 01       		.byte	0x1
 7460 0142 3F       		.uleb128 0x3f
 7461 0143 19       		.uleb128 0x19
 7462 0144 03       		.uleb128 0x3
 7463 0145 0E       		.uleb128 0xe
 7464 0146 3A       		.uleb128 0x3a
 7465 0147 0B       		.uleb128 0xb
 7466 0148 3B       		.uleb128 0x3b
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 164


 7467 0149 05       		.uleb128 0x5
 7468 014a 27       		.uleb128 0x27
 7469 014b 19       		.uleb128 0x19
 7470 014c 11       		.uleb128 0x11
 7471 014d 01       		.uleb128 0x1
 7472 014e 12       		.uleb128 0x12
 7473 014f 06       		.uleb128 0x6
 7474 0150 40       		.uleb128 0x40
 7475 0151 18       		.uleb128 0x18
 7476 0152 9642     		.uleb128 0x2116
 7477 0154 19       		.uleb128 0x19
 7478 0155 01       		.uleb128 0x1
 7479 0156 13       		.uleb128 0x13
 7480 0157 00       		.byte	0
 7481 0158 00       		.byte	0
 7482 0159 19       		.uleb128 0x19
 7483 015a 34       		.uleb128 0x34
 7484 015b 00       		.byte	0
 7485 015c 03       		.uleb128 0x3
 7486 015d 0E       		.uleb128 0xe
 7487 015e 3A       		.uleb128 0x3a
 7488 015f 0B       		.uleb128 0xb
 7489 0160 3B       		.uleb128 0x3b
 7490 0161 05       		.uleb128 0x5
 7491 0162 49       		.uleb128 0x49
 7492 0163 13       		.uleb128 0x13
 7493 0164 02       		.uleb128 0x2
 7494 0165 18       		.uleb128 0x18
 7495 0166 00       		.byte	0
 7496 0167 00       		.byte	0
 7497 0168 1A       		.uleb128 0x1a
 7498 0169 21       		.uleb128 0x21
 7499 016a 00       		.byte	0
 7500 016b 49       		.uleb128 0x49
 7501 016c 13       		.uleb128 0x13
 7502 016d 2F       		.uleb128 0x2f
 7503 016e 05       		.uleb128 0x5
 7504 016f 00       		.byte	0
 7505 0170 00       		.byte	0
 7506 0171 1B       		.uleb128 0x1b
 7507 0172 2E       		.uleb128 0x2e
 7508 0173 01       		.byte	0x1
 7509 0174 3F       		.uleb128 0x3f
 7510 0175 19       		.uleb128 0x19
 7511 0176 03       		.uleb128 0x3
 7512 0177 0E       		.uleb128 0xe
 7513 0178 3A       		.uleb128 0x3a
 7514 0179 0B       		.uleb128 0xb
 7515 017a 3B       		.uleb128 0x3b
 7516 017b 05       		.uleb128 0x5
 7517 017c 11       		.uleb128 0x11
 7518 017d 01       		.uleb128 0x1
 7519 017e 12       		.uleb128 0x12
 7520 017f 06       		.uleb128 0x6
 7521 0180 40       		.uleb128 0x40
 7522 0181 18       		.uleb128 0x18
 7523 0182 9642     		.uleb128 0x2116
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 165


 7524 0184 19       		.uleb128 0x19
 7525 0185 01       		.uleb128 0x1
 7526 0186 13       		.uleb128 0x13
 7527 0187 00       		.byte	0
 7528 0188 00       		.byte	0
 7529 0189 1C       		.uleb128 0x1c
 7530 018a 34       		.uleb128 0x34
 7531 018b 00       		.byte	0
 7532 018c 03       		.uleb128 0x3
 7533 018d 08       		.uleb128 0x8
 7534 018e 3A       		.uleb128 0x3a
 7535 018f 0B       		.uleb128 0xb
 7536 0190 3B       		.uleb128 0x3b
 7537 0191 05       		.uleb128 0x5
 7538 0192 49       		.uleb128 0x49
 7539 0193 13       		.uleb128 0x13
 7540 0194 02       		.uleb128 0x2
 7541 0195 18       		.uleb128 0x18
 7542 0196 00       		.byte	0
 7543 0197 00       		.byte	0
 7544 0198 1D       		.uleb128 0x1d
 7545 0199 2E       		.uleb128 0x2e
 7546 019a 00       		.byte	0
 7547 019b 3F       		.uleb128 0x3f
 7548 019c 19       		.uleb128 0x19
 7549 019d 03       		.uleb128 0x3
 7550 019e 0E       		.uleb128 0xe
 7551 019f 3A       		.uleb128 0x3a
 7552 01a0 0B       		.uleb128 0xb
 7553 01a1 3B       		.uleb128 0x3b
 7554 01a2 05       		.uleb128 0x5
 7555 01a3 11       		.uleb128 0x11
 7556 01a4 01       		.uleb128 0x1
 7557 01a5 12       		.uleb128 0x12
 7558 01a6 06       		.uleb128 0x6
 7559 01a7 40       		.uleb128 0x40
 7560 01a8 18       		.uleb128 0x18
 7561 01a9 9742     		.uleb128 0x2117
 7562 01ab 19       		.uleb128 0x19
 7563 01ac 00       		.byte	0
 7564 01ad 00       		.byte	0
 7565 01ae 1E       		.uleb128 0x1e
 7566 01af 2E       		.uleb128 0x2e
 7567 01b0 01       		.byte	0x1
 7568 01b1 3F       		.uleb128 0x3f
 7569 01b2 19       		.uleb128 0x19
 7570 01b3 03       		.uleb128 0x3
 7571 01b4 0E       		.uleb128 0xe
 7572 01b5 3A       		.uleb128 0x3a
 7573 01b6 0B       		.uleb128 0xb
 7574 01b7 3B       		.uleb128 0x3b
 7575 01b8 05       		.uleb128 0x5
 7576 01b9 11       		.uleb128 0x11
 7577 01ba 01       		.uleb128 0x1
 7578 01bb 12       		.uleb128 0x12
 7579 01bc 06       		.uleb128 0x6
 7580 01bd 40       		.uleb128 0x40
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 166


 7581 01be 18       		.uleb128 0x18
 7582 01bf 9742     		.uleb128 0x2117
 7583 01c1 19       		.uleb128 0x19
 7584 01c2 01       		.uleb128 0x1
 7585 01c3 13       		.uleb128 0x13
 7586 01c4 00       		.byte	0
 7587 01c5 00       		.byte	0
 7588 01c6 1F       		.uleb128 0x1f
 7589 01c7 26       		.uleb128 0x26
 7590 01c8 00       		.byte	0
 7591 01c9 49       		.uleb128 0x49
 7592 01ca 13       		.uleb128 0x13
 7593 01cb 00       		.byte	0
 7594 01cc 00       		.byte	0
 7595 01cd 20       		.uleb128 0x20
 7596 01ce 34       		.uleb128 0x34
 7597 01cf 00       		.byte	0
 7598 01d0 03       		.uleb128 0x3
 7599 01d1 0E       		.uleb128 0xe
 7600 01d2 3A       		.uleb128 0x3a
 7601 01d3 0B       		.uleb128 0xb
 7602 01d4 3B       		.uleb128 0x3b
 7603 01d5 05       		.uleb128 0x5
 7604 01d6 49       		.uleb128 0x49
 7605 01d7 13       		.uleb128 0x13
 7606 01d8 3F       		.uleb128 0x3f
 7607 01d9 19       		.uleb128 0x19
 7608 01da 3C       		.uleb128 0x3c
 7609 01db 19       		.uleb128 0x19
 7610 01dc 00       		.byte	0
 7611 01dd 00       		.byte	0
 7612 01de 00       		.byte	0
 7613              		.section	.debug_aranges,"",%progbits
 7614 0000 6C000000 		.4byte	0x6c
 7615 0004 0200     		.2byte	0x2
 7616 0006 00000000 		.4byte	.Ldebug_info0
 7617 000a 04       		.byte	0x4
 7618 000b 00       		.byte	0
 7619 000c 0000     		.2byte	0
 7620 000e 0000     		.2byte	0
 7621 0010 00000000 		.4byte	.LFB64
 7622 0014 18000000 		.4byte	.LFE64-.LFB64
 7623 0018 00000000 		.4byte	.LFB65
 7624 001c 20000000 		.4byte	.LFE65-.LFB65
 7625 0020 00000000 		.4byte	.LFB66
 7626 0024 F4010000 		.4byte	.LFE66-.LFB66
 7627 0028 00000000 		.4byte	.LFB67
 7628 002c 58040000 		.4byte	.LFE67-.LFB67
 7629 0030 00000000 		.4byte	.LFB68
 7630 0034 8C090000 		.4byte	.LFE68-.LFB68
 7631 0038 00000000 		.4byte	.LFB69
 7632 003c AC040000 		.4byte	.LFE69-.LFB69
 7633 0040 00000000 		.4byte	.LFB70
 7634 0044 2C070000 		.4byte	.LFE70-.LFB70
 7635 0048 00000000 		.4byte	.LFB71
 7636 004c 74000000 		.4byte	.LFE71-.LFB71
 7637 0050 00000000 		.4byte	.LFB72
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 167


 7638 0054 64000000 		.4byte	.LFE72-.LFB72
 7639 0058 00000000 		.4byte	.LFB73
 7640 005c 44030000 		.4byte	.LFE73-.LFB73
 7641 0060 00000000 		.4byte	.LFB74
 7642 0064 08010000 		.4byte	.LFE74-.LFB74
 7643 0068 00000000 		.4byte	0
 7644 006c 00000000 		.4byte	0
 7645              		.section	.debug_ranges,"",%progbits
 7646              	.Ldebug_ranges0:
 7647 0000 00000000 		.4byte	.LFB64
 7648 0004 18000000 		.4byte	.LFE64
 7649 0008 00000000 		.4byte	.LFB65
 7650 000c 20000000 		.4byte	.LFE65
 7651 0010 00000000 		.4byte	.LFB66
 7652 0014 F4010000 		.4byte	.LFE66
 7653 0018 00000000 		.4byte	.LFB67
 7654 001c 58040000 		.4byte	.LFE67
 7655 0020 00000000 		.4byte	.LFB68
 7656 0024 8C090000 		.4byte	.LFE68
 7657 0028 00000000 		.4byte	.LFB69
 7658 002c AC040000 		.4byte	.LFE69
 7659 0030 00000000 		.4byte	.LFB70
 7660 0034 2C070000 		.4byte	.LFE70
 7661 0038 00000000 		.4byte	.LFB71
 7662 003c 74000000 		.4byte	.LFE71
 7663 0040 00000000 		.4byte	.LFB72
 7664 0044 64000000 		.4byte	.LFE72
 7665 0048 00000000 		.4byte	.LFB73
 7666 004c 44030000 		.4byte	.LFE73
 7667 0050 00000000 		.4byte	.LFB74
 7668 0054 08010000 		.4byte	.LFE74
 7669 0058 00000000 		.4byte	0
 7670 005c 00000000 		.4byte	0
 7671              		.section	.debug_line,"",%progbits
 7672              	.Ldebug_line0:
 7673 0000 66070000 		.section	.debug_str,"MS",%progbits,1
 7673      0200A801 
 7673      00000201 
 7673      FB0E0D00 
 7673      01010101 
 7674              	.LASF24:
 7675 0000 73697A65 		.ascii	"sizetype\000"
 7675      74797065 
 7675      00
 7676              	.LASF190:
 7677 0009 706F735F 		.ascii	"pos_cycle_status\000"
 7677      6379636C 
 7677      655F7374 
 7677      61747573 
 7677      00
 7678              	.LASF30:
 7679 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 7679      545F4D4F 
 7679      44455F45 
 7679      4D475F46 
 7679      4346535F 
 7680              	.LASF146:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 168


 7681 0032 70776D5F 		.ascii	"pwm_input\000"
 7681      696E7075 
 7681      7400
 7682              	.LASF187:
 7683 003c 6D61785F 		.ascii	"max_tension\000"
 7683      74656E73 
 7683      696F6E00 
 7684              	.LASF10:
 7685 0048 696E7433 		.ascii	"int32_t\000"
 7685      325F7400 
 7686              	.LASF218:
 7687 0050 675F7278 		.ascii	"g_rx\000"
 7687      00
 7688              	.LASF174:
 7689 0055 6F6E655F 		.ascii	"one_time_execute\000"
 7689      74696D65 
 7689      5F657865 
 7689      63757465 
 7689      00
 7690              	.LASF43:
 7691 0066 73745F64 		.ascii	"st_data\000"
 7691      61746100 
 7692              	.LASF13:
 7693 006e 75696E74 		.ascii	"uint32\000"
 7693      333200
 7694              	.LASF64:
 7695 0075 706F735F 		.ascii	"pos_lim_inf\000"
 7695      6C696D5F 
 7695      696E6600 
 7696              	.LASF240:
 7697 0081 74656E73 		.ascii	"tension_valid\000"
 7697      696F6E5F 
 7697      76616C69 
 7697      6400
 7698              	.LASF131:
 7699 008f 73746174 		.ascii	"state\000"
 7699      6500
 7700              	.LASF242:
 7701 0095 6379636C 		.ascii	"cycles_interrupt_flag\000"
 7701      65735F69 
 7701      6E746572 
 7701      72757074 
 7701      5F666C61 
 7702              	.LASF197:
 7703 00ab 62696E5F 		.ascii	"bin_max\000"
 7703      6D617800 
 7704              	.LASF208:
 7705 00b3 61646472 		.ascii	"addr_start_c\000"
 7705      5F737461 
 7705      72745F63 
 7705      00
 7706              	.LASF29:
 7707 00c0 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 7707      545F4D4F 
 7707      44455F45 
 7707      4D475F46 
 7707      43465300 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 169


 7708              	.LASF76:
 7709 00d4 63757272 		.ascii	"curr_lookup\000"
 7709      5F6C6F6F 
 7709      6B757000 
 7710              	.LASF147:
 7711 00e0 706F735F 		.ascii	"pos_error\000"
 7711      6572726F 
 7711      7200
 7712              	.LASF93:
 7713 00ea 72657374 		.ascii	"rest_counter\000"
 7713      5F636F75 
 7713      6E746572 
 7713      00
 7714              	.LASF28:
 7715 00f7 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 7715      545F4D4F 
 7715      44455F45 
 7715      4D475F49 
 7715      4E544547 
 7716              	.LASF185:
 7717 010f 765F636F 		.ascii	"v_count\000"
 7717      756E7400 
 7718              	.LASF136:
 7719 0117 72785F64 		.ascii	"rx_data\000"
 7719      61746100 
 7720              	.LASF178:
 7721 011f 7676765F 		.ascii	"vvv_value\000"
 7721      76616C75 
 7721      6500
 7722              	.LASF14:
 7723 0129 696E7438 		.ascii	"int8\000"
 7723      00
 7724              	.LASF143:
 7725 012e 696E666F 		.ascii	"info_\000"
 7725      5F00
 7726              	.LASF122:
 7727 0134 656D675F 		.ascii	"emg_status\000"
 7727      73746174 
 7727      757300
 7728              	.LASF169:
 7729 013f 696E6974 		.ascii	"init_rot\000"
 7729      5F726F74 
 7729      00
 7730              	.LASF91:
 7731 0148 706F7369 		.ascii	"position_hist\000"
 7731      74696F6E 
 7731      5F686973 
 7731      7400
 7732              	.LASF123:
 7733 0156 50524550 		.ascii	"PREPARE_DATA\000"
 7733      4152455F 
 7733      44415441 
 7733      00
 7734              	.LASF107:
 7735 0163 74656D70 		.ascii	"temp_value\000"
 7735      5F76616C 
 7735      756500
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 170


 7736              	.LASF194:
 7737 016e 7468725F 		.ascii	"thr_pos\000"
 7737      706F7300 
 7738              	.LASF46:
 7739 0176 72656164 		.ascii	"ready\000"
 7739      7900
 7740              	.LASF110:
 7741 017c 6761696E 		.ascii	"gain\000"
 7741      00
 7742              	.LASF27:
 7743 0181 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 7743      545F4D4F 
 7743      44455F45 
 7743      4D475F50 
 7743      524F504F 
 7744              	.LASF119:
 7745 019d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 7745      414E445F 
 7745      4D45414E 
 7745      00
 7746              	.LASF87:
 7747 01aa 72656164 		.ascii	"read_imu_flag\000"
 7747      5F696D75 
 7747      5F666C61 
 7747      6700
 7748              	.LASF183:
 7749 01b8 66697273 		.ascii	"first_tension_valid\000"
 7749      745F7465 
 7749      6E73696F 
 7749      6E5F7661 
 7749      6C696400 
 7750              	.LASF228:
 7751 01cc 74696D65 		.ascii	"timer_value\000"
 7751      725F7661 
 7751      6C756500 
 7752              	.LASF4:
 7753 01d8 6C6F6E67 		.ascii	"long int\000"
 7753      20696E74 
 7753      00
 7754              	.LASF98:
 7755 01e1 756E7573 		.ascii	"unused_bytes1\000"
 7755      65645F62 
 7755      79746573 
 7755      3100
 7756              	.LASF193:
 7757 01ef 62696E5F 		.ascii	"bin_threshold\000"
 7757      74687265 
 7757      73686F6C 
 7757      6400
 7758              	.LASF89:
 7759 01fd 756E7573 		.ascii	"unused_bytes\000"
 7759      65645F62 
 7759      79746573 
 7759      00
 7760              	.LASF103:
 7761 020a 61636365 		.ascii	"accel_value\000"
 7761      6C5F7661 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 171


 7761      6C756500 
 7762              	.LASF17:
 7763 0216 666C6F61 		.ascii	"float32\000"
 7763      74333200 
 7764              	.LASF161:
 7765 021e 656E636F 		.ascii	"encoder_reading_SPI\000"
 7765      6465725F 
 7765      72656164 
 7765      696E675F 
 7765      53504900 
 7766              	.LASF253:
 7767 0232 77726974 		.ascii	"write_bytes\000"
 7767      655F6279 
 7767      74657300 
 7768              	.LASF172:
 7769 023e 6572726F 		.ascii	"error\000"
 7769      7200
 7770              	.LASF90:
 7771 0244 656D675F 		.ascii	"emg_counter\000"
 7771      636F756E 
 7771      74657200 
 7772              	.LASF126:
 7773 0250 57524954 		.ascii	"WRITE_END\000"
 7773      455F454E 
 7773      4400
 7774              	.LASF175:
 7775 025a 706F735F 		.ascii	"pos_reconstruct\000"
 7775      7265636F 
 7775      6E737472 
 7775      75637400 
 7776              	.LASF186:
 7777 026a 70776D5F 		.ascii	"pwm_limit_search\000"
 7777      6C696D69 
 7777      745F7365 
 7777      61726368 
 7777      00
 7778              	.LASF258:
 7779 027b 433A5C55 		.ascii	"C:\\Users\\MattiaCP\\Documents\\GITHUB\\SoftHand-PR"
 7779      73657273 
 7779      5C4D6174 
 7779      74696143 
 7779      505C446F 
 7780 02a9 4F2D5053 		.ascii	"O-PSoC5\\firmware.cydsn\000"
 7780      6F43355C 
 7780      6669726D 
 7780      77617265 
 7780      2E637964 
 7781              	.LASF0:
 7782 02c0 7369676E 		.ascii	"signed char\000"
 7782      65642063 
 7782      68617200 
 7783              	.LASF111:
 7784 02cc 73745F63 		.ascii	"st_calib\000"
 7784      616C6962 
 7784      00
 7785              	.LASF151:
 7786 02d5 6572725F 		.ascii	"err_emg_1\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 172


 7786      656D675F 
 7786      3100
 7787              	.LASF152:
 7788 02df 6572725F 		.ascii	"err_emg_2\000"
 7788      656D675F 
 7788      3200
 7789              	.LASF85:
 7790 02e9 73776974 		.ascii	"switch_emg\000"
 7790      63685F65 
 7790      6D6700
 7791              	.LASF238:
 7792 02f4 656D675F 		.ascii	"emg_2_status\000"
 7792      325F7374 
 7792      61747573 
 7792      00
 7793              	.LASF248:
 7794 0301 4144435F 		.ascii	"ADC_buf\000"
 7794      62756600 
 7795              	.LASF241:
 7796 0309 696E7465 		.ascii	"interrupt_flag\000"
 7796      72727570 
 7796      745F666C 
 7796      616700
 7797              	.LASF200:
 7798 0318 73746570 		.ascii	"step\000"
 7798      00
 7799              	.LASF141:
 7800 031d 77726974 		.ascii	"write_cycles\000"
 7800      655F6379 
 7800      636C6573 
 7800      00
 7801              	.LASF154:
 7802 032a 63757272 		.ascii	"curr_error_sum\000"
 7802      5F657272 
 7802      6F725F73 
 7802      756D00
 7803              	.LASF1:
 7804 0339 756E7369 		.ascii	"unsigned char\000"
 7804      676E6564 
 7804      20636861 
 7804      7200
 7805              	.LASF129:
 7806 0347 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 7806      52533438 
 7806      355F5258 
 7806      5F457849 
 7806      6E746572 
 7807              	.LASF206:
 7808 0360 726F775F 		.ascii	"row_start\000"
 7808      73746172 
 7808      7400
 7809              	.LASF245:
 7810 036a 666F7263 		.ascii	"forced_open\000"
 7810      65645F6F 
 7810      70656E00 
 7811              	.LASF167:
 7812 0376 73706565 		.ascii	"speed_encoder\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 173


 7812      645F656E 
 7812      636F6465 
 7812      7200
 7813              	.LASF214:
 7814 0384 675F7265 		.ascii	"g_refNew\000"
 7814      664E6577 
 7814      00
 7815              	.LASF199:
 7816 038d 63757272 		.ascii	"curr_off\000"
 7816      5F6F6666 
 7816      00
 7817              	.LASF86:
 7818 0396 72696768 		.ascii	"right_left\000"
 7818      745F6C65 
 7818      667400
 7819              	.LASF237:
 7820 03a1 656D675F 		.ascii	"emg_1_status\000"
 7820      315F7374 
 7820      61747573 
 7820      00
 7821              	.LASF102:
 7822 03ae 666C6167 		.ascii	"flags\000"
 7822      7300
 7823              	.LASF150:
 7824 03b4 68616E64 		.ascii	"handle_value\000"
 7824      6C655F76 
 7824      616C7565 
 7824      00
 7825              	.LASF20:
 7826 03c1 63686172 		.ascii	"char\000"
 7826      00
 7827              	.LASF67:
 7828 03c6 6D61785F 		.ascii	"max_step_pos\000"
 7828      73746570 
 7828      5F706F73 
 7828      00
 7829              	.LASF249:
 7830 03d3 70776D5F 		.ascii	"pwm_sign\000"
 7830      7369676E 
 7830      00
 7831              	.LASF225:
 7832 03dc 66696C74 		.ascii	"filt_vel\000"
 7832      5F76656C 
 7832      00
 7833              	.LASF51:
 7834 03e5 6B5F645F 		.ascii	"k_d_c\000"
 7834      6300
 7835              	.LASF62:
 7836 03eb 6D5F6D75 		.ascii	"m_mult\000"
 7836      6C7400
 7837              	.LASF50:
 7838 03f2 6B5F695F 		.ascii	"k_i_c\000"
 7838      6300
 7839              	.LASF158:
 7840 03f8 6D6F746F 		.ascii	"motor_dir\000"
 7840      725F6469 
 7840      7200
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 174


 7841              	.LASF196:
 7842 0402 62696E5F 		.ascii	"bin_st\000"
 7842      737400
 7843              	.LASF226:
 7844 0409 66696C74 		.ascii	"filt_emg1\000"
 7844      5F656D67 
 7844      3100
 7845              	.LASF227:
 7846 0413 66696C74 		.ascii	"filt_emg2\000"
 7846      5F656D67 
 7846      3200
 7847              	.LASF65:
 7848 041d 706F735F 		.ascii	"pos_lim_sup\000"
 7848      6C696D5F 
 7848      73757000 
 7849              	.LASF109:
 7850 0429 6F6C645F 		.ascii	"old_value\000"
 7850      76616C75 
 7850      6500
 7851              	.LASF72:
 7852 0433 656D675F 		.ascii	"emg_speed\000"
 7852      73706565 
 7852      6400
 7853              	.LASF83:
 7854 043d 72657374 		.ascii	"rest_vel\000"
 7854      5F76656C 
 7854      00
 7855              	.LASF116:
 7856 0446 4E4F524D 		.ascii	"NORMAL\000"
 7856      414C00
 7857              	.LASF252:
 7858 044d 7046696C 		.ascii	"pFile\000"
 7858      6500
 7859              	.LASF153:
 7860 0453 706F735F 		.ascii	"pos_error_sum\000"
 7860      6572726F 
 7860      725F7375 
 7860      6D00
 7861              	.LASF234:
 7862 0461 6465765F 		.ascii	"dev_tension_f\000"
 7862      74656E73 
 7862      696F6E5F 
 7862      6600
 7863              	.LASF53:
 7864 046f 6B5F695F 		.ascii	"k_i_dl\000"
 7864      646C00
 7865              	.LASF44:
 7866 0476 62756666 		.ascii	"buffer\000"
 7866      657200
 7867              	.LASF55:
 7868 047d 6B5F705F 		.ascii	"k_p_c_dl\000"
 7868      635F646C 
 7868      00
 7869              	.LASF137:
 7870 0486 72785F64 		.ascii	"rx_data_type\000"
 7870      6174615F 
 7870      74797065 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 175


 7870      00
 7871              	.LASF255:
 7872 0493 675F696D 		.ascii	"g_imuNew\000"
 7872      754E6577 
 7872      00
 7873              	.LASF114:
 7874 049c 73706565 		.ascii	"speed\000"
 7874      6400
 7875              	.LASF159:
 7876 04a2 706F7369 		.ascii	"position_counter\000"
 7876      74696F6E 
 7876      5F636F75 
 7876      6E746572 
 7876      00
 7877              	.LASF202:
 7878 04b3 74696D65 		.ascii	"timer_value_e\000"
 7878      725F7661 
 7878      6C75655F 
 7878      6500
 7879              	.LASF132:
 7880 04c1 64617461 		.ascii	"data_packet_index\000"
 7880      5F706163 
 7880      6B65745F 
 7880      696E6465 
 7880      7800
 7881              	.LASF134:
 7882 04d3 64617461 		.ascii	"data_packet_buffer\000"
 7882      5F706163 
 7882      6B65745F 
 7882      62756666 
 7882      657200
 7883              	.LASF236:
 7884 04e6 6379636C 		.ascii	"cycles_status\000"
 7884      65735F73 
 7884      74617475 
 7884      7300
 7885              	.LASF139:
 7886 04f4 636F756E 		.ascii	"counter_calibration\000"
 7886      7465725F 
 7886      63616C69 
 7886      62726174 
 7886      696F6E00 
 7887              	.LASF216:
 7888 0508 675F6D65 		.ascii	"g_meas\000"
 7888      617300
 7889              	.LASF201:
 7890 050f 74696D65 		.ascii	"timer_value_s\000"
 7890      725F7661 
 7890      6C75655F 
 7890      7300
 7891              	.LASF171:
 7892 051d 636F6D70 		.ascii	"comp_value_encoder\000"
 7892      5F76616C 
 7892      75655F65 
 7892      6E636F64 
 7892      657200
 7893              	.LASF250:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 176


 7894 0530 64617461 		.ascii	"data_encoder_raw\000"
 7894      5F656E63 
 7894      6F646572 
 7894      5F726177 
 7894      00
 7895              	.LASF213:
 7896 0541 675F7265 		.ascii	"g_ref\000"
 7896      6600
 7897              	.LASF25:
 7898 0547 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 7898      545F4D4F 
 7898      44455F45 
 7898      58544552 
 7898      4E414C00 
 7899              	.LASF162:
 7900 055b 696E6465 		.ascii	"index\000"
 7900      7800
 7901              	.LASF84:
 7902 0561 72657374 		.ascii	"rest_position_flag\000"
 7902      5F706F73 
 7902      6974696F 
 7902      6E5F666C 
 7902      616700
 7903              	.LASF254:
 7904 0574 675F696D 		.ascii	"g_imu\000"
 7904      7500
 7905              	.LASF56:
 7906 057a 6B5F695F 		.ascii	"k_i_c_dl\000"
 7906      635F646C 
 7906      00
 7907              	.LASF138:
 7908 0583 7061636B 		.ascii	"package_count\000"
 7908      6167655F 
 7908      636F756E 
 7908      7400
 7909              	.LASF36:
 7910 0591 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 7910      5F414E44 
 7910      5F504F53 
 7910      5F434F4E 
 7910      54524F4C 
 7911              	.LASF112:
 7912 05a6 656E6162 		.ascii	"enabled\000"
 7912      6C656400 
 7913              	.LASF5:
 7914 05ae 6C6F6E67 		.ascii	"long unsigned int\000"
 7914      20756E73 
 7914      69676E65 
 7914      6420696E 
 7914      7400
 7915              	.LASF95:
 7916 05c0 746F7461 		.ascii	"total_time_on\000"
 7916      6C5F7469 
 7916      6D655F6F 
 7916      6E00
 7917              	.LASF124:
 7918 05ce 57524954 		.ascii	"WRITE_CYCLES\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 177


 7918      455F4359 
 7918      434C4553 
 7918      00
 7919              	.LASF145:
 7920 05db 6D6F746F 		.ascii	"motor_control\000"
 7920      725F636F 
 7920      6E74726F 
 7920      6C00
 7921              	.LASF204:
 7922 05e9 73746174 		.ascii	"status\000"
 7922      757300
 7923              	.LASF96:
 7924 05f0 746F7461 		.ascii	"total_time_rest\000"
 7924      6C5F7469 
 7924      6D655F72 
 7924      65737400 
 7925              	.LASF58:
 7926 0600 61637469 		.ascii	"activ\000"
 7926      7600
 7927              	.LASF61:
 7928 0606 6D5F6F66 		.ascii	"m_off\000"
 7928      6600
 7929              	.LASF239:
 7930 060c 72657365 		.ascii	"reset_last_value_flag\000"
 7930      745F6C61 
 7930      73745F76 
 7930      616C7565 
 7930      5F666C61 
 7931              	.LASF106:
 7932 0622 71756174 		.ascii	"quat_value\000"
 7932      5F76616C 
 7932      756500
 7933              	.LASF81:
 7934 062d 72657374 		.ascii	"rest_pos\000"
 7934      5F706F73 
 7934      00
 7935              	.LASF38:
 7936 0636 63757272 		.ascii	"curr\000"
 7936      00
 7937              	.LASF125:
 7938 063b 57414954 		.ascii	"WAIT_QUERY\000"
 7938      5F515545 
 7938      525900
 7939              	.LASF59:
 7940 0646 696E7075 		.ascii	"input_mode\000"
 7940      745F6D6F 
 7940      646500
 7941              	.LASF34:
 7942 0651 434F4E54 		.ascii	"CONTROL_PWM\000"
 7942      524F4C5F 
 7942      50574D00 
 7943              	.LASF189:
 7944 065d 6379636C 		.ascii	"cycles_counter_update\000"
 7944      65735F63 
 7944      6F756E74 
 7944      65725F75 
 7944      70646174 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 178


 7945              	.LASF47:
 7946 0673 73745F6D 		.ascii	"st_mem\000"
 7946      656D00
 7947              	.LASF256:
 7948 067a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 7948      43313120 
 7948      352E342E 
 7948      31203230 
 7948      31363036 
 7949 06ad 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 7949      20726576 
 7949      6973696F 
 7949      6E203233 
 7949      37373135 
 7950 06e0 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 7950      66756E63 
 7950      74696F6E 
 7950      2D736563 
 7950      74696F6E 
 7951              	.LASF40:
 7952 0708 73745F72 		.ascii	"st_ref\000"
 7952      656600
 7953              	.LASF229:
 7954 070f 74696D65 		.ascii	"timer_value0\000"
 7954      725F7661 
 7954      6C756530 
 7954      00
 7955              	.LASF176:
 7956 071c 765F7661 		.ascii	"v_value\000"
 7956      6C756500 
 7957              	.LASF221:
 7958 0724 63616C69 		.ascii	"calib\000"
 7958      6200
 7959              	.LASF6:
 7960 072a 6C6F6E67 		.ascii	"long long int\000"
 7960      206C6F6E 
 7960      6720696E 
 7960      7400
 7961              	.LASF32:
 7962 0738 53485F63 		.ascii	"SH_control_mode\000"
 7962      6F6E7472 
 7962      6F6C5F6D 
 7962      6F646500 
 7963              	.LASF79:
 7964 0748 6D61696E 		.ascii	"maint_month\000"
 7964      745F6D6F 
 7964      6E746800 
 7965              	.LASF247:
 7966 0754 6368616E 		.ascii	"change_ext_ref_flag\000"
 7966      67655F65 
 7966      78745F72 
 7966      65665F66 
 7966      6C616700 
 7967              	.LASF19:
 7968 0768 646F7562 		.ascii	"double\000"
 7968      6C6500
 7969              	.LASF223:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 179


 7970 076f 66696C74 		.ascii	"filt_curr_diff\000"
 7970      5F637572 
 7970      725F6469 
 7970      666600
 7971              	.LASF144:
 7972 077e 696E7465 		.ascii	"interrupt_manager\000"
 7972      72727570 
 7972      745F6D61 
 7972      6E616765 
 7972      7200
 7973              	.LASF115:
 7974 0790 72657065 		.ascii	"repetitions\000"
 7974      74697469 
 7974      6F6E7300 
 7975              	.LASF66:
 7976 079c 6D61785F 		.ascii	"max_step_neg\000"
 7976      73746570 
 7976      5F6E6567 
 7976      00
 7977              	.LASF120:
 7978 07a9 57414954 		.ascii	"WAIT\000"
 7978      00
 7979              	.LASF18:
 7980 07ae 666C6F61 		.ascii	"float\000"
 7980      7400
 7981              	.LASF100:
 7982 07b4 494D555F 		.ascii	"IMU_conf\000"
 7982      636F6E66 
 7982      00
 7983              	.LASF184:
 7984 07bd 636F756E 		.ascii	"count\000"
 7984      7400
 7985              	.LASF210:
 7986 07c3 6D5F6164 		.ascii	"m_addr\000"
 7986      647200
 7987              	.LASF220:
 7988 07ca 635F6D65 		.ascii	"c_mem\000"
 7988      6D00
 7989              	.LASF8:
 7990 07d0 756E7369 		.ascii	"unsigned int\000"
 7990      676E6564 
 7990      20696E74 
 7990      00
 7991              	.LASF195:
 7992 07dd 6D61785F 		.ascii	"max_pos\000"
 7992      706F7300 
 7993              	.LASF251:
 7994 07e5 72657374 		.ascii	"rest_pos_curr_ref\000"
 7994      5F706F73 
 7994      5F637572 
 7994      725F7265 
 7994      6600
 7995              	.LASF48:
 7996 07f7 666C6167 		.ascii	"flag\000"
 7996      00
 7997              	.LASF60:
 7998 07fc 636F6E74 		.ascii	"control_mode\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 180


 7998      726F6C5F 
 7998      6D6F6465 
 7998      00
 7999              	.LASF21:
 8000 0809 63797374 		.ascii	"cystatus\000"
 8000      61747573 
 8000      00
 8001              	.LASF26:
 8002 0812 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 8002      545F4D4F 
 8002      44455F45 
 8002      4E434F44 
 8002      45523300 
 8003              	.LASF160:
 8004 0826 63757272 		.ascii	"current_emg\000"
 8004      656E745F 
 8004      656D6700 
 8005              	.LASF135:
 8006 0832 72785F71 		.ascii	"rx_queue\000"
 8006      75657565 
 8006      00
 8007              	.LASF149:
 8008 083b 695F7265 		.ascii	"i_ref\000"
 8008      6600
 8009              	.LASF69:
 8010 0841 656D675F 		.ascii	"emg_threshold\000"
 8010      74687265 
 8010      73686F6C 
 8010      6400
 8011              	.LASF203:
 8012 084f 73617665 		.ascii	"save_cycles_eeprom\000"
 8012      5F637963 
 8012      6C65735F 
 8012      65657072 
 8012      6F6D00
 8013              	.LASF142:
 8014 0862 7274635F 		.ascii	"rtc_data\000"
 8014      64617461 
 8014      00
 8015              	.LASF92:
 8016 086b 63757272 		.ascii	"current_hist\000"
 8016      656E745F 
 8016      68697374 
 8016      00
 8017              	.LASF35:
 8018 0878 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 8018      524F4C5F 
 8018      43555252 
 8018      454E5400 
 8019              	.LASF23:
 8020 0888 6C6F6E67 		.ascii	"long double\000"
 8020      20646F75 
 8020      626C6500 
 8021              	.LASF118:
 8022 0894 44495343 		.ascii	"DISCARD\000"
 8022      41524400 
 8023              	.LASF155:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 181


 8024 089c 70726576 		.ascii	"prev_pos_err\000"
 8024      5F706F73 
 8024      5F657272 
 8024      00
 8025              	.LASF246:
 8026 08a9 62617474 		.ascii	"battery_low_SoC\000"
 8026      6572795F 
 8026      6C6F775F 
 8026      536F4300 
 8027              	.LASF224:
 8028 08b9 66696C74 		.ascii	"filt_i\000"
 8028      5F6900
 8029              	.LASF74:
 8030 08c0 6D6F746F 		.ascii	"motor_handle_ratio\000"
 8030      725F6861 
 8030      6E646C65 
 8030      5F726174 
 8030      696F00
 8031              	.LASF222:
 8032 08d3 66696C74 		.ascii	"filt_v\000"
 8032      5F7600
 8033              	.LASF244:
 8034 08da 72657374 		.ascii	"rest_enabled\000"
 8034      5F656E61 
 8034      626C6564 
 8034      00
 8035              	.LASF215:
 8036 08e7 675F7265 		.ascii	"g_refOld\000"
 8036      664F6C64 
 8036      00
 8037              	.LASF104:
 8038 08f0 6779726F 		.ascii	"gyro_value\000"
 8038      5F76616C 
 8038      756500
 8039              	.LASF97:
 8040 08fb 63757272 		.ascii	"curr_time\000"
 8040      5F74696D 
 8040      6500
 8041              	.LASF73:
 8042 0905 646F7562 		.ascii	"double_encoder_on_off\000"
 8042      6C655F65 
 8042      6E636F64 
 8042      65725F6F 
 8042      6E5F6F66 
 8043              	.LASF80:
 8044 091b 6D61696E 		.ascii	"maint_year\000"
 8044      745F7965 
 8044      617200
 8045              	.LASF170:
 8046 0926 6C617374 		.ascii	"last_value_encoder\000"
 8046      5F76616C 
 8046      75655F65 
 8046      6E636F64 
 8046      657200
 8047              	.LASF140:
 8048 0939 636F756E 		.ascii	"counter_tension_func\000"
 8048      7465725F 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 182


 8048      74656E73 
 8048      696F6E5F 
 8048      66756E63 
 8049              	.LASF230:
 8050 094e 6379636C 		.ascii	"cycle_time\000"
 8050      655F7469 
 8050      6D6500
 8051              	.LASF7:
 8052 0959 6C6F6E67 		.ascii	"long long unsigned int\000"
 8052      206C6F6E 
 8052      6720756E 
 8052      7369676E 
 8052      65642069 
 8053              	.LASF78:
 8054 0970 6D61696E 		.ascii	"maint_day\000"
 8054      745F6461 
 8054      7900
 8055              	.LASF45:
 8056 097a 6C656E67 		.ascii	"length\000"
 8056      746800
 8057              	.LASF188:
 8058 0981 6D696E5F 		.ascii	"min_tension\000"
 8058      74656E73 
 8058      696F6E00 
 8059              	.LASF105:
 8060 098d 6D61675F 		.ascii	"mag_value\000"
 8060      76616C75 
 8060      6500
 8061              	.LASF39:
 8062 0997 6F6E6F66 		.ascii	"onoff\000"
 8062      6600
 8063              	.LASF165:
 8064 099d 746D705F 		.ascii	"tmp_value_encoder_32\000"
 8064      76616C75 
 8064      655F656E 
 8064      636F6465 
 8064      725F3332 
 8065              	.LASF156:
 8066 09b2 70726576 		.ascii	"prev_curr_err\000"
 8066      5F637572 
 8066      725F6572 
 8066      7200
 8067              	.LASF133:
 8068 09c0 64617461 		.ascii	"data_packet_length\000"
 8068      5F706163 
 8068      6B65745F 
 8068      6C656E67 
 8068      746800
 8069              	.LASF49:
 8070 09d3 6B5F705F 		.ascii	"k_p_c\000"
 8070      6300
 8071              	.LASF231:
 8072 09d9 6465765F 		.ascii	"dev_tension\000"
 8072      74656E73 
 8072      696F6E00 
 8073              	.LASF121:
 8074 09e5 57414954 		.ascii	"WAIT_EoC\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 183


 8074      5F456F43 
 8074      00
 8075              	.LASF22:
 8076 09ee 72656738 		.ascii	"reg8\000"
 8076      00
 8077              	.LASF180:
 8078 09f3 695F6175 		.ascii	"i_aux\000"
 8078      7800
 8079              	.LASF163:
 8080 09f9 6175785F 		.ascii	"aux_encoders\000"
 8080      656E636F 
 8080      64657273 
 8080      00
 8081              	.LASF205:
 8082 0a06 726F775F 		.ascii	"row_number\000"
 8082      6E756D62 
 8082      657200
 8083              	.LASF260:
 8084 0a11 6F766572 		.ascii	"overcurrent_control\000"
 8084      63757272 
 8084      656E745F 
 8084      636F6E74 
 8084      726F6C00 
 8085              	.LASF198:
 8086 0a25 63757272 		.ascii	"curr_pos\000"
 8086      5F706F73 
 8086      00
 8087              	.LASF117:
 8088 0a2e 52455345 		.ascii	"RESET\000"
 8088      5400
 8089              	.LASF179:
 8090 0a34 616E616C 		.ascii	"analog_read_end\000"
 8090      6F675F72 
 8090      6561645F 
 8090      656E6400 
 8091              	.LASF191:
 8092 0a44 656D675F 		.ascii	"emg_cycle_status\000"
 8092      6379636C 
 8092      655F7374 
 8092      61747573 
 8092      00
 8093              	.LASF70:
 8094 0a55 656D675F 		.ascii	"emg_calibration_flag\000"
 8094      63616C69 
 8094      62726174 
 8094      696F6E5F 
 8094      666C6167 
 8095              	.LASF41:
 8096 0a6a 73745F6D 		.ascii	"st_meas\000"
 8096      65617300 
 8097              	.LASF207:
 8098 0a72 61646472 		.ascii	"addr_start\000"
 8098      5F737461 
 8098      727400
 8099              	.LASF211:
 8100 0a7d 70776D5F 		.ascii	"pwm_preload_values\000"
 8100      7072656C 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 184


 8100      6F61645F 
 8100      76616C75 
 8100      657300
 8101              	.LASF128:
 8102 0a90 636F756E 		.ascii	"counter_status\000"
 8102      7465725F 
 8102      73746174 
 8102      757300
 8103              	.LASF219:
 8104 0a9f 675F6D65 		.ascii	"g_mem\000"
 8104      6D00
 8105              	.LASF181:
 8106 0aa5 656D675F 		.ascii	"emg_counter_1\000"
 8106      636F756E 
 8106      7465725F 
 8106      3100
 8107              	.LASF182:
 8108 0ab3 656D675F 		.ascii	"emg_counter_2\000"
 8108      636F756E 
 8108      7465725F 
 8108      3200
 8109              	.LASF173:
 8110 0ac1 6F6E6C79 		.ascii	"only_first_time\000"
 8110      5F666972 
 8110      73745F74 
 8110      696D6500 
 8111              	.LASF11:
 8112 0ad1 75696E74 		.ascii	"uint8\000"
 8112      3800
 8113              	.LASF168:
 8114 0ad7 76616C75 		.ascii	"value_diff\000"
 8114      655F6469 
 8114      666600
 8115              	.LASF2:
 8116 0ae2 73686F72 		.ascii	"short int\000"
 8116      7420696E 
 8116      7400
 8117              	.LASF54:
 8118 0aec 6B5F645F 		.ascii	"k_d_dl\000"
 8118      646C00
 8119              	.LASF166:
 8120 0af3 76616C75 		.ascii	"value_encoder\000"
 8120      655F656E 
 8120      636F6465 
 8120      7200
 8121              	.LASF233:
 8122 0b01 6465765F 		.ascii	"dev_pwm_sat\000"
 8122      70776D5F 
 8122      73617400 
 8123              	.LASF259:
 8124 0b0d 66756E63 		.ascii	"function_scheduler\000"
 8124      74696F6E 
 8124      5F736368 
 8124      6564756C 
 8124      657200
 8125              	.LASF157:
 8126 0b20 70726576 		.ascii	"prev_pwm\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 185


 8126      5F70776D 
 8126      00
 8127              	.LASF212:
 8128 0b29 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8128      52784275 
 8128      66666572 
 8128      00
 8129              	.LASF235:
 8130 0b36 706F775F 		.ascii	"pow_tension\000"
 8130      74656E73 
 8130      696F6E00 
 8131              	.LASF15:
 8132 0b42 696E7431 		.ascii	"int16\000"
 8132      3600
 8133              	.LASF88:
 8134 0b48 72656164 		.ascii	"read_exp_port_flag\000"
 8134      5F657870 
 8134      5F706F72 
 8134      745F666C 
 8134      616700
 8135              	.LASF75:
 8136 0b5b 61637469 		.ascii	"activate_pwm_rescaling\000"
 8136      76617465 
 8136      5F70776D 
 8136      5F726573 
 8136      63616C69 
 8137              	.LASF52:
 8138 0b72 6B5F705F 		.ascii	"k_p_dl\000"
 8138      646C00
 8139              	.LASF42:
 8140 0b79 65737469 		.ascii	"estim_curr\000"
 8140      6D5F6375 
 8140      727200
 8141              	.LASF232:
 8142 0b84 6465765F 		.ascii	"dev_pwm_limit\000"
 8142      70776D5F 
 8142      6C696D69 
 8142      7400
 8143              	.LASF148:
 8144 0b92 63757272 		.ascii	"curr_error\000"
 8144      5F657272 
 8144      6F7200
 8145              	.LASF192:
 8146 0b9d 72657374 		.ascii	"rest_cycle_status\000"
 8146      5F637963 
 8146      6C655F73 
 8146      74617475 
 8146      7300
 8147              	.LASF164:
 8148 0baf 746D705F 		.ascii	"tmp_value_encoder\000"
 8148      76616C75 
 8148      655F656E 
 8148      636F6465 
 8148      7200
 8149              	.LASF130:
 8150 0bc1 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 8150      4359434C 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 186


 8150      45535F48 
 8150      616E646C 
 8150      657200
 8151              	.LASF77:
 8152 0bd4 62617564 		.ascii	"baud_rate\000"
 8152      5F726174 
 8152      6500
 8153              	.LASF99:
 8154 0bde 5350495F 		.ascii	"SPI_read_delay\000"
 8154      72656164 
 8154      5F64656C 
 8154      617900
 8155              	.LASF3:
 8156 0bed 73686F72 		.ascii	"short unsigned int\000"
 8156      7420756E 
 8156      7369676E 
 8156      65642069 
 8156      6E7400
 8157              	.LASF101:
 8158 0c00 73745F69 		.ascii	"st_imu\000"
 8158      6D7500
 8159              	.LASF257:
 8160 0c07 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 8160      72635C69 
 8160      6E746572 
 8160      72757074 
 8160      696F6E73 
 8161              	.LASF16:
 8162 0c1e 696E7433 		.ascii	"int32\000"
 8162      3200
 8163              	.LASF37:
 8164 0c24 46535F46 		.ascii	"FS_FILE\000"
 8164      494C4500 
 8165              	.LASF63:
 8166 0c2c 706F735F 		.ascii	"pos_lim_flag\000"
 8166      6C696D5F 
 8166      666C6167 
 8166      00
 8167              	.LASF217:
 8168 0c39 675F6D65 		.ascii	"g_measOld\000"
 8168      61734F6C 
 8168      6400
 8169              	.LASF209:
 8170 0c43 726F775F 		.ascii	"row_end\000"
 8170      656E6400 
 8171              	.LASF33:
 8172 0c4b 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 8172      524F4C5F 
 8172      414E474C 
 8172      4500
 8173              	.LASF9:
 8174 0c59 5F5F696E 		.ascii	"__int32_t\000"
 8174      7433325F 
 8174      7400
 8175              	.LASF94:
 8176 0c63 77697265 		.ascii	"wire_disp\000"
 8176      5F646973 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\ccCFTaFS.s 			page 187


 8176      7000
 8177              	.LASF243:
 8178 0c6d 63616E5F 		.ascii	"can_write\000"
 8178      77726974 
 8178      6500
 8179              	.LASF71:
 8180 0c77 656D675F 		.ascii	"emg_max_value\000"
 8180      6D61785F 
 8180      76616C75 
 8180      6500
 8181              	.LASF68:
 8182 0c85 63757272 		.ascii	"current_limit\000"
 8182      656E745F 
 8182      6C696D69 
 8182      7400
 8183              	.LASF31:
 8184 0c93 53485F69 		.ascii	"SH_input_mode\000"
 8184      6E707574 
 8184      5F6D6F64 
 8184      6500
 8185              	.LASF127:
 8186 0ca1 4E4F4E45 		.ascii	"NONE\000"
 8186      00
 8187              	.LASF12:
 8188 0ca6 75696E74 		.ascii	"uint16\000"
 8188      313600
 8189              	.LASF82:
 8190 0cad 72657374 		.ascii	"rest_delay\000"
 8190      5F64656C 
 8190      617900
 8191              	.LASF108:
 8192 0cb8 73745F66 		.ascii	"st_filter\000"
 8192      696C7465 
 8192      7200
 8193              	.LASF177:
 8194 0cc2 76765F76 		.ascii	"vv_value\000"
 8194      616C7565 
 8194      00
 8195              	.LASF57:
 8196 0ccb 6B5F645F 		.ascii	"k_d_c_dl\000"
 8196      635F646C 
 8196      00
 8197              	.LASF113:
 8198 0cd4 64697265 		.ascii	"direction\000"
 8198      6374696F 
 8198      6E00
 8199              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
