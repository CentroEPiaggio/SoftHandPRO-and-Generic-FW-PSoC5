ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2019, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         October 01, 2017
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2019 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 6)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c ****                 if (rx_data == c_mem.id || rx_data == 0)
 249              		.loc 1 185 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A130 		ldrb	r3, [r3, #161]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 185 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 186:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 186 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
 263 00b8 01E0     		b	.L19
 264              	.L18:
 187:..\src/interruptions.c ****                 else                //packet is for others
 188:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 188 0
 266 00ba 0123     		movs	r3, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 9


 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 189:..\src/interruptions.c ****                 
 190:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 190 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 191:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 191 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 192:..\src/interruptions.c ****                 break;
 277              		.loc 1 192 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 193:..\src/interruptions.c **** 
 194:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 195:..\src/interruptions.c ****             case  WAIT_LENGTH:
 196:..\src/interruptions.c **** 
 197:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 197 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 198:..\src/interruptions.c ****                 // check validity of pack length
 199:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 199 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 200:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 200 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 201:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 201 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 202:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 202 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
 203:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 203 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 204:..\src/interruptions.c ****                     state = WAIT_START;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 10


 308              		.loc 1 204 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 205:..\src/interruptions.c ****                 } else {
 206:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 206 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     
 208:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 208 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 209:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 209 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 210:..\src/interruptions.c ****                     else
 211:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 211 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 212:..\src/interruptions.c ****                 }
 213:..\src/interruptions.c ****                 break;
 332              		.loc 1 213 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 214:..\src/interruptions.c **** 
 215:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 216:..\src/interruptions.c ****             case RECEIVE:
 217:..\src/interruptions.c **** 
 218:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 218 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 219:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 219 0
 343 0126 304B     		ldr	r3, .L31+16
 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 220:..\src/interruptions.c ****                 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 11


 221:..\src/interruptions.c ****                 // check end of transmission
 222:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 222 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 223:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 224:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 224 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 225:..\src/interruptions.c ****                         // copying data from buffer to global packet
 226:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 226 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 227:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 227 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 228:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 228 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 229:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 229 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 230:..\src/interruptions.c ****                     }
 231:..\src/interruptions.c ****                     
 232:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 232 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 233:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 233 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
 387 0174 1A70     		strb	r2, [r3]
 234:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 234 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 12


 235:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 235 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 236:..\src/interruptions.c ****                 
 237:..\src/interruptions.c ****                 }
 238:..\src/interruptions.c ****                 break;
 396              		.loc 1 238 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 239:..\src/interruptions.c **** 
 240:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 241:..\src/interruptions.c ****             case UNLOAD:
 242:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 242 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 243:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 243 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 244:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 244 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 245:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 245 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 246:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 246 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 247:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 247 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 248:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 248 0
 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 249:..\src/interruptions.c ****                 }
 250:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 13


 433              		.loc 1 250 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 6 - estimated maximum number of packets we can read without blocking firmware execution
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 052B     		cmp	r3, #5
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 251:..\src/interruptions.c ****         }
 252:..\src/interruptions.c ****     }
 253:..\src/interruptions.c **** }
 446              		.loc 1 253 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10260
 458 01dc 04000000 		.word	rx_queue.10264
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10262
 461 01e8 08000000 		.word	data_packet_index.10261
 462 01ec 0C000000 		.word	data_packet_buffer.10263
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fdiv
 469              		.section	.text.function_scheduler,"ax",%progbits
 470              		.align	2
 471              		.global	function_scheduler
 472              		.thumb
 473              		.thumb_func
 474              		.type	function_scheduler, %function
 475              	function_scheduler:
 476              	.LFB67:
 254:..\src/interruptions.c **** //==============================================================================
 255:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 256:..\src/interruptions.c **** //==============================================================================
 257:..\src/interruptions.c **** // Call all the function with the right frequency
 258:..\src/interruptions.c **** //==============================================================================
 259:..\src/interruptions.c **** // Base frequency 1000 Hz
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 14


 262:..\src/interruptions.c **** void function_scheduler(void) {
 477              		.loc 1 262 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 2504
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 90B5     		push	{r4, r7, lr}
 482              		.cfi_def_cfa_offset 12
 483              		.cfi_offset 4, -12
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 ADF6CC1D 		subw	sp, sp, #2508
 487              		.cfi_def_cfa_offset 2520
 488 0006 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 263:..\src/interruptions.c ****  
 264:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 265:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 266:..\src/interruptions.c ****     char info_[2500] = "";
 490              		.loc 1 266 0
 491 0008 3B1D     		adds	r3, r7, #4
 492 000a 0022     		movs	r2, #0
 493 000c 1A60     		str	r2, [r3]
 494 000e 0433     		adds	r3, r3, #4
 495 0010 4FF41C62 		mov	r2, #2496
 496 0014 0021     		movs	r1, #0
 497 0016 1846     		mov	r0, r3
 498 0018 FFF7FEFF 		bl	memset
 267:..\src/interruptions.c ****     
 268:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 499              		.loc 1 268 0
 500 001c 0020     		movs	r0, #0
 501 001e FFF7FEFF 		bl	MY_TIMER_REG_Write
 269:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 502              		.loc 1 269 0
 503 0022 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 504 0026 0346     		mov	r3, r0
 505 0028 1A46     		mov	r2, r3
 506 002a 974B     		ldr	r3, .L51
 507 002c 1A80     		strh	r2, [r3]	@ movhi
 270:..\src/interruptions.c **** 
 271:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 272:..\src/interruptions.c **** 
 273:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 508              		.loc 1 273 0
 509 002e 0120     		movs	r0, #1
 510 0030 FFF7FEFF 		bl	ADC_SOC_Write
 274:..\src/interruptions.c ****     
 275:..\src/interruptions.c ****     // Check Interrupt 
 276:..\src/interruptions.c **** 
 277:..\src/interruptions.c ****     if (interrupt_flag){
 511              		.loc 1 277 0
 512 0034 954B     		ldr	r3, .L51+4
 513 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 514 0038 002B     		cmp	r3, #0
 515 003a 04D0     		beq	.L34
 278:..\src/interruptions.c ****         interrupt_flag = FALSE;
 516              		.loc 1 278 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 15


 517 003c 934B     		ldr	r3, .L51+4
 518 003e 0022     		movs	r2, #0
 519 0040 1A70     		strb	r2, [r3]
 279:..\src/interruptions.c ****         interrupt_manager();
 520              		.loc 1 279 0
 521 0042 FFF7FEFF 		bl	interrupt_manager
 522              	.L34:
 280:..\src/interruptions.c ****     }
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     //---------------------------------- Get Encoders
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 285:..\src/interruptions.c ****     if (N_Encoder_Line_Connected[c_mem.right_left] > 0) {
 523              		.loc 1 285 0
 524 0046 924B     		ldr	r3, .L51+8
 525 0048 93F84631 		ldrb	r3, [r3, #326]	@ zero_extendqisi2
 526 004c 1A46     		mov	r2, r3
 527 004e 914B     		ldr	r3, .L51+12
 528 0050 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 529 0052 002B     		cmp	r3, #0
 530 0054 14D0     		beq	.L35
 286:..\src/interruptions.c ****         // Change CS only if there are attached encoders on the line
 287:..\src/interruptions.c ****         Change_CS_EncoderLine(c_mem.right_left);
 531              		.loc 1 287 0
 532 0056 8E4B     		ldr	r3, .L51+8
 533 0058 93F84631 		ldrb	r3, [r3, #326]	@ zero_extendqisi2
 534 005c 1846     		mov	r0, r3
 535 005e FFF7FEFF 		bl	Change_CS_EncoderLine
 288:..\src/interruptions.c ****         
 289:..\src/interruptions.c ****         encoder_reading_SPI(c_mem.right_left); 
 536              		.loc 1 289 0
 537 0062 8B4B     		ldr	r3, .L51+8
 538 0064 93F84631 		ldrb	r3, [r3, #326]	@ zero_extendqisi2
 539 0068 1846     		mov	r0, r3
 540 006a FFF7FEFF 		bl	encoder_reading_SPI
 290:..\src/interruptions.c **** 
 291:..\src/interruptions.c ****         // Check Interrupt     
 292:..\src/interruptions.c ****         
 293:..\src/interruptions.c ****         if (interrupt_flag){
 541              		.loc 1 293 0
 542 006e 874B     		ldr	r3, .L51+4
 543 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 544 0072 002B     		cmp	r3, #0
 545 0074 04D0     		beq	.L35
 294:..\src/interruptions.c ****             interrupt_flag = FALSE;
 546              		.loc 1 294 0
 547 0076 854B     		ldr	r3, .L51+4
 548 0078 0022     		movs	r2, #0
 549 007a 1A70     		strb	r2, [r3]
 295:..\src/interruptions.c ****             interrupt_manager();
 550              		.loc 1 295 0
 551 007c FFF7FEFF 		bl	interrupt_manager
 552              	.L35:
 296:..\src/interruptions.c ****         }
 297:..\src/interruptions.c ****     }
 298:..\src/interruptions.c **** 
 299:..\src/interruptions.c **** #ifdef GENERIC_FW    
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 16


 300:..\src/interruptions.c ****     // Get 2nd line encoders
 301:..\src/interruptions.c ****     if (N_Encoder_Line_Connected[!(c_mem.right_left)] > 0) {
 302:..\src/interruptions.c ****         // Change CS only if there are attached encoders on the line 
 303:..\src/interruptions.c ****         Change_CS_EncoderLine(!(c_mem.right_left));
 304:..\src/interruptions.c ****         
 305:..\src/interruptions.c ****         ReadEncoderLine(N_Encoder_Line_Connected[!(c_mem.right_left)], !(c_mem.right_left));
 306:..\src/interruptions.c ****         
 307:..\src/interruptions.c ****         // [MP] now values are in Encoder_Value[!(c_mem.right_left)] vector
 308:..\src/interruptions.c ****         
 309:..\src/interruptions.c ****         // Check Interrupt     
 310:..\src/interruptions.c ****         
 311:..\src/interruptions.c ****         if (interrupt_flag){
 312:..\src/interruptions.c ****             interrupt_flag = FALSE;
 313:..\src/interruptions.c ****             interrupt_manager();
 314:..\src/interruptions.c ****         }
 315:..\src/interruptions.c ****     }
 316:..\src/interruptions.c **** #endif    
 317:..\src/interruptions.c **** 
 318:..\src/interruptions.c ****     //---------------------------------- Control Motor
 319:..\src/interruptions.c **** 
 320:..\src/interruptions.c **** #ifdef SOFTHAND_FW   
 321:..\src/interruptions.c ****     motor_control_SH();
 553              		.loc 1 321 0
 554 0080 FFF7FEFF 		bl	motor_control_SH
 322:..\src/interruptions.c **** 
 323:..\src/interruptions.c ****     // Check Interrupt 
 324:..\src/interruptions.c **** 
 325:..\src/interruptions.c ****     if (interrupt_flag){
 555              		.loc 1 325 0
 556 0084 814B     		ldr	r3, .L51+4
 557 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 558 0088 002B     		cmp	r3, #0
 559 008a 04D0     		beq	.L36
 326:..\src/interruptions.c ****         interrupt_flag = FALSE;
 560              		.loc 1 326 0
 561 008c 7F4B     		ldr	r3, .L51+4
 562 008e 0022     		movs	r2, #0
 563 0090 1A70     		strb	r2, [r3]
 327:..\src/interruptions.c ****         interrupt_manager();
 564              		.loc 1 327 0
 565 0092 FFF7FEFF 		bl	interrupt_manager
 566              	.L36:
 328:..\src/interruptions.c ****     }
 329:..\src/interruptions.c ****     
 330:..\src/interruptions.c **** #else
 331:..\src/interruptions.c ****     // GENERIC_FW
 332:..\src/interruptions.c **** 
 333:..\src/interruptions.c ****     // Control 1st motor (always active) according to motor driver type
 334:..\src/interruptions.c ****     motor_control_generic(0);
 335:..\src/interruptions.c ****     
 336:..\src/interruptions.c ****     // Check Interrupt 
 337:..\src/interruptions.c **** 
 338:..\src/interruptions.c ****     if (interrupt_flag){
 339:..\src/interruptions.c ****         interrupt_flag = FALSE;
 340:..\src/interruptions.c ****         interrupt_manager();
 341:..\src/interruptions.c ****     }
 342:..\src/interruptions.c ****     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 17


 343:..\src/interruptions.c ****     // Control 2nd motor (if necessary) according to motor driver type
 344:..\src/interruptions.c ****     if (c_mem.use_2nd_motor_flag == TRUE){
 345:..\src/interruptions.c ****         motor_control_generic(1);
 346:..\src/interruptions.c ****         
 347:..\src/interruptions.c ****         // Check Interrupt 
 348:..\src/interruptions.c **** 
 349:..\src/interruptions.c ****         if (interrupt_flag){
 350:..\src/interruptions.c ****             interrupt_flag = FALSE;
 351:..\src/interruptions.c ****             interrupt_manager();
 352:..\src/interruptions.c ****         }
 353:..\src/interruptions.c ****     }  
 354:..\src/interruptions.c **** #endif
 355:..\src/interruptions.c **** 
 356:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 357:..\src/interruptions.c **** 
 358:..\src/interruptions.c ****     analog_read_end();
 567              		.loc 1 358 0
 568 0096 FFF7FEFF 		bl	analog_read_end
 359:..\src/interruptions.c **** 
 360:..\src/interruptions.c ****     if (interrupt_flag){
 569              		.loc 1 360 0
 570 009a 7C4B     		ldr	r3, .L51+4
 571 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572 009e 002B     		cmp	r3, #0
 573 00a0 04D0     		beq	.L37
 361:..\src/interruptions.c ****         interrupt_flag = FALSE;
 574              		.loc 1 361 0
 575 00a2 7A4B     		ldr	r3, .L51+4
 576 00a4 0022     		movs	r2, #0
 577 00a6 1A70     		strb	r2, [r3]
 362:..\src/interruptions.c ****         interrupt_manager();
 578              		.loc 1 362 0
 579 00a8 FFF7FEFF 		bl	interrupt_manager
 580              	.L37:
 363:..\src/interruptions.c ****     }
 364:..\src/interruptions.c **** 
 365:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 366:..\src/interruptions.c **** 
 367:..\src/interruptions.c ****     overcurrent_control();
 581              		.loc 1 367 0
 582 00ac FFF7FEFF 		bl	overcurrent_control
 368:..\src/interruptions.c ****     
 369:..\src/interruptions.c ****     // Check Interrupt 
 370:..\src/interruptions.c ****     
 371:..\src/interruptions.c ****     if (interrupt_flag){
 583              		.loc 1 371 0
 584 00b0 764B     		ldr	r3, .L51+4
 585 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 00b4 002B     		cmp	r3, #0
 587 00b6 04D0     		beq	.L38
 372:..\src/interruptions.c ****         interrupt_flag = FALSE;
 588              		.loc 1 372 0
 589 00b8 744B     		ldr	r3, .L51+4
 590 00ba 0022     		movs	r2, #0
 591 00bc 1A70     		strb	r2, [r3]
 373:..\src/interruptions.c ****         interrupt_manager();
 592              		.loc 1 373 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 18


 593 00be FFF7FEFF 		bl	interrupt_manager
 594              	.L38:
 374:..\src/interruptions.c ****     }
 375:..\src/interruptions.c **** 
 376:..\src/interruptions.c ****     //---------------------------------- Calibration 
 377:..\src/interruptions.c **** 
 378:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 379:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 595              		.loc 1 379 0
 596 00c2 754B     		ldr	r3, .L51+16
 597 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 598 00c6 012B     		cmp	r3, #1
 599 00c8 0ED1     		bne	.L39
 380:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 600              		.loc 1 380 0
 601 00ca 744B     		ldr	r3, .L51+20
 602 00cc 1B88     		ldrh	r3, [r3]
 603 00ce 0A2B     		cmp	r3, #10
 604 00d0 04D1     		bne	.L40
 381:..\src/interruptions.c ****             calibration();
 605              		.loc 1 381 0
 606 00d2 FFF7FEFF 		bl	calibration
 382:..\src/interruptions.c ****             counter_calibration = 0;
 607              		.loc 1 382 0
 608 00d6 714B     		ldr	r3, .L51+20
 609 00d8 0022     		movs	r2, #0
 610 00da 1A80     		strh	r2, [r3]	@ movhi
 611              	.L40:
 383:..\src/interruptions.c ****         }
 384:..\src/interruptions.c ****         counter_calibration++;
 612              		.loc 1 384 0
 613 00dc 6F4B     		ldr	r3, .L51+20
 614 00de 1B88     		ldrh	r3, [r3]
 615 00e0 0133     		adds	r3, r3, #1
 616 00e2 9AB2     		uxth	r2, r3
 617 00e4 6D4B     		ldr	r3, .L51+20
 618 00e6 1A80     		strh	r2, [r3]	@ movhi
 619              	.L39:
 385:..\src/interruptions.c ****     }
 386:..\src/interruptions.c **** 
 387:..\src/interruptions.c ****     // Check Interrupt 
 388:..\src/interruptions.c ****     
 389:..\src/interruptions.c ****     if (interrupt_flag){
 620              		.loc 1 389 0
 621 00e8 684B     		ldr	r3, .L51+4
 622 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 623 00ec 002B     		cmp	r3, #0
 624 00ee 04D0     		beq	.L41
 390:..\src/interruptions.c ****         interrupt_flag = FALSE;
 625              		.loc 1 390 0
 626 00f0 664B     		ldr	r3, .L51+4
 627 00f2 0022     		movs	r2, #0
 628 00f4 1A70     		strb	r2, [r3]
 391:..\src/interruptions.c ****         interrupt_manager();
 629              		.loc 1 391 0
 630 00f6 FFF7FEFF 		bl	interrupt_manager
 631              	.L41:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 19


 392:..\src/interruptions.c ****     }
 393:..\src/interruptions.c ****     
 394:..\src/interruptions.c ****      
 395:..\src/interruptions.c ****     //---------------------------------- Rest position check
 396:..\src/interruptions.c ****     
 397:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 398:..\src/interruptions.c ****     if (c_mem.rest_position_flag == TRUE){
 632              		.loc 1 398 0
 633 00fa 654B     		ldr	r3, .L51+8
 634 00fc 93F84431 		ldrb	r3, [r3, #324]	@ zero_extendqisi2
 635 0100 012B     		cmp	r3, #1
 636 0102 17D1     		bne	.L42
 399:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 637              		.loc 1 399 0
 638 0104 654B     		ldr	r3, .L51+20
 639 0106 1B88     		ldrh	r3, [r3]
 640 0108 0A2B     		cmp	r3, #10
 641 010a 04D1     		bne	.L43
 400:..\src/interruptions.c ****                 check_rest_position();
 642              		.loc 1 400 0
 643 010c FFF7FEFF 		bl	check_rest_position
 401:..\src/interruptions.c ****                 counter_calibration = 0;
 644              		.loc 1 401 0
 645 0110 624B     		ldr	r3, .L51+20
 646 0112 0022     		movs	r2, #0
 647 0114 1A80     		strh	r2, [r3]	@ movhi
 648              	.L43:
 402:..\src/interruptions.c ****         }
 403:..\src/interruptions.c ****         counter_calibration++;
 649              		.loc 1 403 0
 650 0116 614B     		ldr	r3, .L51+20
 651 0118 1B88     		ldrh	r3, [r3]
 652 011a 0133     		adds	r3, r3, #1
 653 011c 9AB2     		uxth	r2, r3
 654 011e 5F4B     		ldr	r3, .L51+20
 655 0120 1A80     		strh	r2, [r3]	@ movhi
 404:..\src/interruptions.c **** 
 405:..\src/interruptions.c ****         // Check Interrupt     
 406:..\src/interruptions.c ****         if (interrupt_flag){
 656              		.loc 1 406 0
 657 0122 5A4B     		ldr	r3, .L51+4
 658 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 659 0126 002B     		cmp	r3, #0
 660 0128 04D0     		beq	.L42
 407:..\src/interruptions.c ****             interrupt_flag = FALSE;
 661              		.loc 1 407 0
 662 012a 584B     		ldr	r3, .L51+4
 663 012c 0022     		movs	r2, #0
 664 012e 1A70     		strb	r2, [r3]
 408:..\src/interruptions.c ****             interrupt_manager();
 665              		.loc 1 408 0
 666 0130 FFF7FEFF 		bl	interrupt_manager
 667              	.L42:
 409:..\src/interruptions.c ****         }
 410:..\src/interruptions.c ****     }
 411:..\src/interruptions.c ****     
 412:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 20


 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****     cycles_counter_update();
 668              		.loc 1 414 0
 669 0134 FFF7FEFF 		bl	cycles_counter_update
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****     // Check Cycles Interrupt 
 417:..\src/interruptions.c ****     
 418:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 670              		.loc 1 418 0
 671 0138 594B     		ldr	r3, .L51+24
 672 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 673 013c 002B     		cmp	r3, #0
 674 013e 25D0     		beq	.L44
 419:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 675              		.loc 1 419 0
 676 0140 574B     		ldr	r3, .L51+24
 677 0142 0022     		movs	r2, #0
 678 0144 1A70     		strb	r2, [r3]
 420:..\src/interruptions.c **** 
 421:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 422:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 423:..\src/interruptions.c ****         if(can_write) {
 679              		.loc 1 423 0
 680 0146 574B     		ldr	r3, .L51+28
 681 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 682 014a 002B     		cmp	r3, #0
 683 014c 1ED0     		beq	.L44
 424:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 684              		.loc 1 424 0
 685 014e 564B     		ldr	r3, .L51+32
 686 0150 0022     		movs	r2, #0
 687 0152 1A70     		strb	r2, [r3]
 425:..\src/interruptions.c ****             
 426:..\src/interruptions.c ****             //Update time variable
 427:..\src/interruptions.c ****             g_mem.total_time_on = g_mem.total_time_on + 120;  // Add 120 seconds.
 688              		.loc 1 427 0
 689 0154 554B     		ldr	r3, .L51+36
 690 0156 9B6C     		ldr	r3, [r3, #72]
 691 0158 7833     		adds	r3, r3, #120
 692 015a 544A     		ldr	r2, .L51+36
 693 015c 9364     		str	r3, [r2, #72]
 428:..\src/interruptions.c ****             
 429:..\src/interruptions.c ****             if (c_mem.read_exp_port_flag == EXP_SD_RTC) {
 694              		.loc 1 429 0
 695 015e 4C4B     		ldr	r3, .L51+8
 696 0160 93F84831 		ldrb	r3, [r3, #328]	@ zero_extendqisi2
 697 0164 012B     		cmp	r3, #1
 698 0166 11D1     		bne	.L44
 430:..\src/interruptions.c ****                 
 431:..\src/interruptions.c ****                 store_RTC_current_time();
 699              		.loc 1 431 0
 700 0168 FFF7FEFF 		bl	store_RTC_current_time
 432:..\src/interruptions.c ****                 
 433:..\src/interruptions.c ****                 //Write in SD card
 434:..\src/interruptions.c ****                 prepare_SD_info(info_);
 701              		.loc 1 434 0
 702 016c 3B1D     		adds	r3, r7, #4
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 21


 703 016e 1846     		mov	r0, r3
 704 0170 FFF7FEFF 		bl	prepare_SD_info
 435:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 705              		.loc 1 435 0
 706 0174 4E4B     		ldr	r3, .L51+40
 707 0176 1C68     		ldr	r4, [r3]
 708 0178 3B1D     		adds	r3, r7, #4
 709 017a 1846     		mov	r0, r3
 710 017c FFF7FEFF 		bl	strlen
 711 0180 0246     		mov	r2, r0
 712 0182 3B1D     		adds	r3, r7, #4
 713 0184 1946     		mov	r1, r3
 714 0186 2046     		mov	r0, r4
 715 0188 FFF7FEFF 		bl	FS_Write
 716              	.L44:
 436:..\src/interruptions.c ****             }
 437:..\src/interruptions.c ****         }
 438:..\src/interruptions.c ****     }
 439:..\src/interruptions.c ****     
 440:..\src/interruptions.c ****     // Check Interrupt 
 441:..\src/interruptions.c ****     
 442:..\src/interruptions.c ****     if (interrupt_flag){
 717              		.loc 1 442 0
 718 018c 3F4B     		ldr	r3, .L51+4
 719 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 720 0190 002B     		cmp	r3, #0
 721 0192 04D0     		beq	.L45
 443:..\src/interruptions.c ****         interrupt_flag = FALSE;
 722              		.loc 1 443 0
 723 0194 3D4B     		ldr	r3, .L51+4
 724 0196 0022     		movs	r2, #0
 725 0198 1A70     		strb	r2, [r3]
 444:..\src/interruptions.c ****         interrupt_manager();
 726              		.loc 1 444 0
 727 019a FFF7FEFF 		bl	interrupt_manager
 728              	.L45:
 445:..\src/interruptions.c ****     }
 446:..\src/interruptions.c ****     
 447:..\src/interruptions.c ****     
 448:..\src/interruptions.c ****     //---------------------------------- Check battery
 449:..\src/interruptions.c **** 
 450:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 451:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 729              		.loc 1 451 0
 730 019e 454B     		ldr	r3, .L51+44
 731 01a0 1B88     		ldrh	r3, [r3]
 732 01a2 0A2B     		cmp	r3, #10
 733 01a4 04D1     		bne	.L46
 452:..\src/interruptions.c ****         battery_management();   
 734              		.loc 1 452 0
 735 01a6 FFF7FEFF 		bl	battery_management
 453:..\src/interruptions.c ****         counter_tension_func = 0;
 736              		.loc 1 453 0
 737 01aa 424B     		ldr	r3, .L51+44
 738 01ac 0022     		movs	r2, #0
 739 01ae 1A80     		strh	r2, [r3]	@ movhi
 740              	.L46:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 22


 454:..\src/interruptions.c ****     }
 455:..\src/interruptions.c ****     counter_tension_func++;
 741              		.loc 1 455 0
 742 01b0 404B     		ldr	r3, .L51+44
 743 01b2 1B88     		ldrh	r3, [r3]
 744 01b4 0133     		adds	r3, r3, #1
 745 01b6 9AB2     		uxth	r2, r3
 746 01b8 3E4B     		ldr	r3, .L51+44
 747 01ba 1A80     		strh	r2, [r3]	@ movhi
 456:..\src/interruptions.c **** 
 457:..\src/interruptions.c ****     // Check Interrupt 
 458:..\src/interruptions.c ****     
 459:..\src/interruptions.c ****     if (interrupt_flag){
 748              		.loc 1 459 0
 749 01bc 334B     		ldr	r3, .L51+4
 750 01be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 751 01c0 002B     		cmp	r3, #0
 752 01c2 04D0     		beq	.L47
 460:..\src/interruptions.c ****         interrupt_flag = FALSE;
 753              		.loc 1 460 0
 754 01c4 314B     		ldr	r3, .L51+4
 755 01c6 0022     		movs	r2, #0
 756 01c8 1A70     		strb	r2, [r3]
 461:..\src/interruptions.c ****         interrupt_manager();
 757              		.loc 1 461 0
 758 01ca FFF7FEFF 		bl	interrupt_manager
 759              	.L47:
 462:..\src/interruptions.c ****     }
 463:..\src/interruptions.c ****    
 464:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 465:..\src/interruptions.c ****     if (c_mem.read_imu_flag) {
 760              		.loc 1 465 0
 761 01ce 304B     		ldr	r3, .L51+8
 762 01d0 93F84731 		ldrb	r3, [r3, #327]	@ zero_extendqisi2
 763 01d4 002B     		cmp	r3, #0
 764 01d6 0AD0     		beq	.L48
 466:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 765              		.loc 1 466 0
 766 01d8 FFF7FEFF 		bl	ReadAllIMUs
 467:..\src/interruptions.c ****         
 468:..\src/interruptions.c ****         if (interrupt_flag){
 767              		.loc 1 468 0
 768 01dc 2B4B     		ldr	r3, .L51+4
 769 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 770 01e0 002B     		cmp	r3, #0
 771 01e2 04D0     		beq	.L48
 469:..\src/interruptions.c ****             interrupt_flag = FALSE;
 772              		.loc 1 469 0
 773 01e4 294B     		ldr	r3, .L51+4
 774 01e6 0022     		movs	r2, #0
 775 01e8 1A70     		strb	r2, [r3]
 470:..\src/interruptions.c ****             interrupt_manager();
 776              		.loc 1 470 0
 777 01ea FFF7FEFF 		bl	interrupt_manager
 778              	.L48:
 471:..\src/interruptions.c ****         }
 472:..\src/interruptions.c ****     }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 23


 473:..\src/interruptions.c ****     
 474:..\src/interruptions.c ****     //---------------------------------- Update States
 475:..\src/interruptions.c ****     
 476:..\src/interruptions.c ****     // Load k-1 state
 477:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 779              		.loc 1 477 0
 780 01ee 324A     		ldr	r2, .L51+48
 781 01f0 324B     		ldr	r3, .L51+52
 782 01f2 1046     		mov	r0, r2
 783 01f4 1946     		mov	r1, r3
 784 01f6 5423     		movs	r3, #84
 785 01f8 1A46     		mov	r2, r3
 786 01fa FFF7FEFF 		bl	memcpy
 478:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 787              		.loc 1 478 0
 788 01fe 304A     		ldr	r2, .L51+56
 789 0200 304B     		ldr	r3, .L51+60
 790 0202 1446     		mov	r4, r2
 791 0204 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 792 0206 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 479:..\src/interruptions.c **** 
 480:..\src/interruptions.c ****     // Load k+1 state        
 481:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 793              		.loc 1 481 0
 794 020a 2E4A     		ldr	r2, .L51+60
 795 020c 2E4B     		ldr	r3, .L51+64
 796 020e 1446     		mov	r4, r2
 797 0210 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 798 0212 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 482:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 799              		.loc 1 482 0
 800 0216 2D4A     		ldr	r2, .L51+68
 801 0218 2D4B     		ldr	r3, .L51+72
 802 021a 1046     		mov	r0, r2
 803 021c 1946     		mov	r1, r3
 804 021e C823     		movs	r3, #200
 805 0220 1A46     		mov	r2, r3
 806 0222 FFF7FEFF 		bl	memcpy
 483:..\src/interruptions.c ****                 
 484:..\src/interruptions.c ****     if (interrupt_flag){
 807              		.loc 1 484 0
 808 0226 194B     		ldr	r3, .L51+4
 809 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 810 022a 002B     		cmp	r3, #0
 811 022c 04D0     		beq	.L49
 485:..\src/interruptions.c ****         interrupt_flag = FALSE;
 812              		.loc 1 485 0
 813 022e 174B     		ldr	r3, .L51+4
 814 0230 0022     		movs	r2, #0
 815 0232 1A70     		strb	r2, [r3]
 486:..\src/interruptions.c ****         interrupt_manager();
 816              		.loc 1 486 0
 817 0234 FFF7FEFF 		bl	interrupt_manager
 818              	.L49:
 487:..\src/interruptions.c ****     }
 488:..\src/interruptions.c **** 
 489:..\src/interruptions.c ****     if (c_mem.input_mode == INPUT_MODE_EXTERNAL) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 24


 819              		.loc 1 489 0
 820 0238 154B     		ldr	r3, .L51+8
 821 023a 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 822 023e 002B     		cmp	r3, #0
 823 0240 02D1     		bne	.L50
 490:..\src/interruptions.c ****         change_ext_ref_flag = FALSE;
 824              		.loc 1 490 0
 825 0242 244B     		ldr	r3, .L51+76
 826 0244 0022     		movs	r2, #0
 827 0246 1A70     		strb	r2, [r3]
 828              	.L50:
 491:..\src/interruptions.c ****     }
 492:..\src/interruptions.c ****     
 493:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 829              		.loc 1 493 0
 830 0248 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 831 024c 0346     		mov	r3, r0
 832 024e 1A46     		mov	r2, r3
 833 0250 214B     		ldr	r3, .L51+80
 834 0252 1A80     		strh	r2, [r3]	@ movhi
 494:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 835              		.loc 1 494 0
 836 0254 0C4B     		ldr	r3, .L51
 837 0256 1B88     		ldrh	r3, [r3]
 838 0258 1A46     		mov	r2, r3
 839 025a 1F4B     		ldr	r3, .L51+80
 840 025c 1B88     		ldrh	r3, [r3]
 841 025e D31A     		subs	r3, r2, r3
 842 0260 1846     		mov	r0, r3
 843 0262 FFF7FEFF 		bl	__aeabi_i2f
 844 0266 0346     		mov	r3, r0
 845 0268 1C49     		ldr	r1, .L51+84
 846 026a 1846     		mov	r0, r3
 847 026c FFF7FEFF 		bl	__aeabi_fdiv
 848 0270 0346     		mov	r3, r0
 849 0272 1A46     		mov	r2, r3
 850 0274 1A4B     		ldr	r3, .L51+88
 851 0276 1A60     		str	r2, [r3]	@ float
 495:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 852              		.loc 1 495 0
 853 0278 0120     		movs	r0, #1
 854 027a FFF7FEFF 		bl	MY_TIMER_REG_Write
 496:..\src/interruptions.c **** 
 497:..\src/interruptions.c **** }
 855              		.loc 1 497 0
 856 027e 00BF     		nop
 857 0280 07F6CC17 		addw	r7, r7, #2508
 858              		.cfi_def_cfa_offset 12
 859 0284 BD46     		mov	sp, r7
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 0286 90BD     		pop	{r4, r7, pc}
 863              	.L52:
 864              		.align	2
 865              	.L51:
 866 0288 00000000 		.word	timer_value0
 867 028c 00000000 		.word	interrupt_flag
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 25


 868 0290 00000000 		.word	c_mem
 869 0294 00000000 		.word	N_Encoder_Line_Connected
 870 0298 00000000 		.word	calib
 871 029c 00000000 		.word	counter_calibration.10280
 872 02a0 00000000 		.word	cycles_interrupt_flag
 873 02a4 00000000 		.word	can_write
 874 02a8 00000000 		.word	cycles_status
 875 02ac 00000000 		.word	g_mem
 876 02b0 00000000 		.word	pFile
 877 02b4 02000000 		.word	counter_tension_func.10281
 878 02b8 00000000 		.word	g_measOld
 879 02bc 00000000 		.word	g_meas
 880 02c0 00000000 		.word	g_refOld
 881 02c4 00000000 		.word	g_ref
 882 02c8 00000000 		.word	g_refNew
 883 02cc 00000000 		.word	g_imu
 884 02d0 00000000 		.word	g_imuNew
 885 02d4 00000000 		.word	change_ext_ref_flag
 886 02d8 00000000 		.word	timer_value
 887 02dc 00247449 		.word	1232348160
 888 02e0 00000000 		.word	cycle_time
 889              		.cfi_endproc
 890              	.LFE67:
 891              		.size	function_scheduler, .-function_scheduler
 892              		.section	.text.motor_control_SH,"ax",%progbits
 893              		.align	2
 894              		.global	motor_control_SH
 895              		.thumb
 896              		.thumb_func
 897              		.type	motor_control_SH, %function
 898              	motor_control_SH:
 899              	.LFB68:
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c **** //==============================================================================
 500:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 501:..\src/interruptions.c **** //==============================================================================
 502:..\src/interruptions.c **** 
 503:..\src/interruptions.c **** void motor_control_SH() {
 900              		.loc 1 503 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 80
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 94B0     		sub	sp, sp, #80
 909              		.cfi_def_cfa_offset 88
 910 0004 00AF     		add	r7, sp, #0
 911              		.cfi_def_cfa_register 7
 504:..\src/interruptions.c **** 
 505:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 912              		.loc 1 505 0
 913 0006 0023     		movs	r3, #0
 914 0008 FB64     		str	r3, [r7, #76]
 506:..\src/interruptions.c **** 
 507:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 26


 508:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 511:..\src/interruptions.c ****     int32 CYDATA handle_value;
 512:..\src/interruptions.c **** 
 513:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 514:..\src/interruptions.c **** 
 515:..\src/interruptions.c ****     int32 CYDATA k_p = c_mem.k_p;  
 915              		.loc 1 515 0
 916 000a A64B     		ldr	r3, .L166
 917 000c D3F8A430 		ldr	r3, [r3, #164]
 918 0010 FB63     		str	r3, [r7, #60]
 516:..\src/interruptions.c ****     int32 CYDATA k_i = c_mem.k_i; 
 919              		.loc 1 516 0
 920 0012 A44B     		ldr	r3, .L166
 921 0014 D3F8A830 		ldr	r3, [r3, #168]
 922 0018 BB63     		str	r3, [r7, #56]
 517:..\src/interruptions.c ****     int32 CYDATA k_d = c_mem.k_d; 
 923              		.loc 1 517 0
 924 001a A24B     		ldr	r3, .L166
 925 001c D3F8AC30 		ldr	r3, [r3, #172]
 926 0020 7B63     		str	r3, [r7, #52]
 518:..\src/interruptions.c **** 
 519:..\src/interruptions.c ****     int32 CYDATA k_p_c = c_mem.k_p_c;  
 927              		.loc 1 519 0
 928 0022 A04B     		ldr	r3, .L166
 929 0024 D3F8B030 		ldr	r3, [r3, #176]
 930 0028 3B63     		str	r3, [r7, #48]
 520:..\src/interruptions.c ****     int32 CYDATA k_i_c = c_mem.k_i_c; 
 931              		.loc 1 520 0
 932 002a 9E4B     		ldr	r3, .L166
 933 002c D3F8B430 		ldr	r3, [r3, #180]
 934 0030 FB62     		str	r3, [r7, #44]
 521:..\src/interruptions.c ****     int32 CYDATA k_d_c = c_mem.k_d_c;   
 935              		.loc 1 521 0
 936 0032 9C4B     		ldr	r3, .L166
 937 0034 D3F8B830 		ldr	r3, [r3, #184]
 938 0038 BB62     		str	r3, [r7, #40]
 522:..\src/interruptions.c **** 
 523:..\src/interruptions.c ****     int32 CYDATA k_p_dl = c_mem.k_p_dl;  
 939              		.loc 1 523 0
 940 003a 9A4B     		ldr	r3, .L166
 941 003c D3F8BC30 		ldr	r3, [r3, #188]
 942 0040 7B62     		str	r3, [r7, #36]
 524:..\src/interruptions.c ****     int32 CYDATA k_i_dl = c_mem.k_i_dl; 
 943              		.loc 1 524 0
 944 0042 984B     		ldr	r3, .L166
 945 0044 D3F8C030 		ldr	r3, [r3, #192]
 946 0048 3B62     		str	r3, [r7, #32]
 525:..\src/interruptions.c ****     int32 CYDATA k_d_dl = c_mem.k_d_dl;
 947              		.loc 1 525 0
 948 004a 964B     		ldr	r3, .L166
 949 004c D3F8C430 		ldr	r3, [r3, #196]
 950 0050 FB61     		str	r3, [r7, #28]
 526:..\src/interruptions.c ****     
 527:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = c_mem.k_p_c_dl;  
 951              		.loc 1 527 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 27


 952 0052 944B     		ldr	r3, .L166
 953 0054 D3F8C830 		ldr	r3, [r3, #200]
 954 0058 BB61     		str	r3, [r7, #24]
 528:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = c_mem.k_i_c_dl; 
 955              		.loc 1 528 0
 956 005a 924B     		ldr	r3, .L166
 957 005c D3F8CC30 		ldr	r3, [r3, #204]
 958 0060 7B61     		str	r3, [r7, #20]
 529:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = c_mem.k_d_c_dl;   
 959              		.loc 1 529 0
 960 0062 904B     		ldr	r3, .L166
 961 0064 D3F8D030 		ldr	r3, [r3, #208]
 962 0068 3B61     		str	r3, [r7, #16]
 530:..\src/interruptions.c **** 
 531:..\src/interruptions.c ****     // Static Variables
 532:..\src/interruptions.c **** 
 533:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 534:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 535:..\src/interruptions.c ****     
 536:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 537:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 538:..\src/interruptions.c ****     static int32 prev_pwm;
 539:..\src/interruptions.c **** 
 540:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 541:..\src/interruptions.c ****     static uint32 position_counter = 0;
 542:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
 543:..\src/interruptions.c ****                                     // 1 EMG 1
 544:..\src/interruptions.c ****                                     // 2 EMG 2
 545:..\src/interruptions.c ****                                     // wait for both to get down
 546:..\src/interruptions.c ****     
 547:..\src/interruptions.c **** 
 548:..\src/interruptions.c ****     err_emg_1 = g_meas.emg[0] - c_mem.emg_threshold[0];
 963              		.loc 1 548 0
 964 006a 8F4B     		ldr	r3, .L166+4
 965 006c DB69     		ldr	r3, [r3, #28]
 966 006e 8D4A     		ldr	r2, .L166
 967 0070 B2F80A21 		ldrh	r2, [r2, #266]
 968 0074 9B1A     		subs	r3, r3, r2
 969 0076 FB60     		str	r3, [r7, #12]
 549:..\src/interruptions.c ****     err_emg_2 = g_meas.emg[1] - c_mem.emg_threshold[1];
 970              		.loc 1 549 0
 971 0078 8B4B     		ldr	r3, .L166+4
 972 007a 1B6A     		ldr	r3, [r3, #32]
 973 007c 894A     		ldr	r2, .L166
 974 007e B2F80C21 		ldrh	r2, [r2, #268]
 975 0082 9B1A     		subs	r3, r3, r2
 976 0084 BB60     		str	r3, [r7, #8]
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
 552:..\src/interruptions.c ****     switch(c_mem.input_mode) {
 977              		.loc 1 552 0
 978 0086 874B     		ldr	r3, .L166
 979 0088 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 980 008c 013B     		subs	r3, r3, #1
 981 008e 042B     		cmp	r3, #4
 982 0090 00F28181 		bhi	.L158
 983 0094 01A2     		adr	r2, .L56
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 28


 984 0096 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 985 009a 00BF     		.p2align 2
 986              	.L56:
 987 009c B1000000 		.word	.L55+1
 988 00a0 53010000 		.word	.L57+1
 989 00a4 81010000 		.word	.L58+1
 990 00a8 E9010000 		.word	.L59+1
 991 00ac BD020000 		.word	.L60+1
 992              		.p2align 1
 993              	.L55:
 553:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 554:..\src/interruptions.c **** 
 555:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 556:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 557:..\src/interruptions.c ****             if (c_mem.double_encoder_on_off) 
 994              		.loc 1 557 0
 995 00b0 7C4B     		ldr	r3, .L166
 996 00b2 93F81931 		ldrb	r3, [r3, #281]	@ zero_extendqisi2
 997 00b6 002B     		cmp	r3, #0
 998 00b8 0CD0     		beq	.L61
 558:..\src/interruptions.c ****                 handle_value = (g_meas.pos[2] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
 999              		.loc 1 558 0
 1000 00ba 7B4B     		ldr	r3, .L166+4
 1001 00bc 9B68     		ldr	r3, [r3, #8]
 1002 00be 794A     		ldr	r2, .L166
 1003 00c0 92F91A21 		ldrsb	r2, [r2, #282]
 1004 00c4 02FB03F2 		mul	r2, r2, r3
 1005 00c8 784B     		ldr	r3, .L166+8
 1006 00ca D3F8F830 		ldr	r3, [r3, #248]
 1007 00ce 1344     		add	r3, r3, r2
 1008 00d0 3B64     		str	r3, [r7, #64]
 1009 00d2 0BE0     		b	.L62
 1010              	.L61:
 559:..\src/interruptions.c ****             else
 560:..\src/interruptions.c ****                 handle_value = (g_meas.pos[1] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
 1011              		.loc 1 560 0
 1012 00d4 744B     		ldr	r3, .L166+4
 1013 00d6 5B68     		ldr	r3, [r3, #4]
 1014 00d8 724A     		ldr	r2, .L166
 1015 00da 92F91A21 		ldrsb	r2, [r2, #282]
 1016 00de 02FB03F2 		mul	r2, r2, r3
 1017 00e2 724B     		ldr	r3, .L166+8
 1018 00e4 D3F8F830 		ldr	r3, [r3, #248]
 1019 00e8 1344     		add	r3, r3, r2
 1020 00ea 3B64     		str	r3, [r7, #64]
 1021              	.L62:
 561:..\src/interruptions.c ****             
 562:..\src/interruptions.c **** 
 563:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 564:..\src/interruptions.c ****             if (((handle_value - g_refOld.pos) > c_mem.max_step_pos) && (c_mem.max_step_pos != 0))
 1022              		.loc 1 564 0
 1023 00ec 704B     		ldr	r3, .L166+12
 1024 00ee 1B68     		ldr	r3, [r3]
 1025 00f0 3A6C     		ldr	r2, [r7, #64]
 1026 00f2 D21A     		subs	r2, r2, r3
 1027 00f4 6B4B     		ldr	r3, .L166
 1028 00f6 D3F80431 		ldr	r3, [r3, #260]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 29


 1029 00fa 9A42     		cmp	r2, r3
 1030 00fc 0DDD     		ble	.L63
 1031              		.loc 1 564 0 is_stmt 0 discriminator 1
 1032 00fe 694B     		ldr	r3, .L166
 1033 0100 D3F80431 		ldr	r3, [r3, #260]
 1034 0104 002B     		cmp	r3, #0
 1035 0106 08D0     		beq	.L63
 565:..\src/interruptions.c ****                 g_ref.pos += c_mem.max_step_pos;
 1036              		.loc 1 565 0 is_stmt 1
 1037 0108 6A4B     		ldr	r3, .L166+16
 1038 010a 1A68     		ldr	r2, [r3]
 1039 010c 654B     		ldr	r3, .L166
 1040 010e D3F80431 		ldr	r3, [r3, #260]
 1041 0112 1344     		add	r3, r3, r2
 1042 0114 674A     		ldr	r2, .L166+16
 1043 0116 1360     		str	r3, [r2]
 1044 0118 1AE0     		b	.L64
 1045              	.L63:
 566:..\src/interruptions.c ****             else {
 567:..\src/interruptions.c ****                 if (((handle_value - g_refOld.pos) < c_mem.max_step_neg) && (c_mem.max_step_neg != 
 1046              		.loc 1 567 0
 1047 011a 654B     		ldr	r3, .L166+12
 1048 011c 1B68     		ldr	r3, [r3]
 1049 011e 3A6C     		ldr	r2, [r7, #64]
 1050 0120 D21A     		subs	r2, r2, r3
 1051 0122 604B     		ldr	r3, .L166
 1052 0124 D3F80031 		ldr	r3, [r3, #256]
 1053 0128 9A42     		cmp	r2, r3
 1054 012a 0DDA     		bge	.L65
 1055              		.loc 1 567 0 is_stmt 0 discriminator 1
 1056 012c 5D4B     		ldr	r3, .L166
 1057 012e D3F80031 		ldr	r3, [r3, #256]
 1058 0132 002B     		cmp	r3, #0
 1059 0134 08D0     		beq	.L65
 568:..\src/interruptions.c ****                     g_ref.pos += c_mem.max_step_neg;
 1060              		.loc 1 568 0 is_stmt 1
 1061 0136 5F4B     		ldr	r3, .L166+16
 1062 0138 1A68     		ldr	r2, [r3]
 1063 013a 5A4B     		ldr	r3, .L166
 1064 013c D3F80031 		ldr	r3, [r3, #256]
 1065 0140 1344     		add	r3, r3, r2
 1066 0142 5C4A     		ldr	r2, .L166+16
 1067 0144 1360     		str	r3, [r2]
 1068 0146 03E0     		b	.L64
 1069              	.L65:
 569:..\src/interruptions.c ****                 else
 570:..\src/interruptions.c ****                     g_ref.pos = handle_value;
 1070              		.loc 1 570 0
 1071 0148 5A4A     		ldr	r2, .L166+16
 1072 014a 3B6C     		ldr	r3, [r7, #64]
 1073 014c 1360     		str	r3, [r2]
 571:..\src/interruptions.c ****             }
 572:..\src/interruptions.c ****             break;
 1074              		.loc 1 572 0
 1075 014e 25E1     		b	.L66
 1076              	.L64:
 1077 0150 24E1     		b	.L66
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 30


 1078              	.L57:
 573:..\src/interruptions.c ****             
 574:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 575:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1079              		.loc 1 575 0
 1080 0152 FB68     		ldr	r3, [r7, #12]
 1081 0154 002B     		cmp	r3, #0
 1082 0156 0FDD     		ble	.L67
 576:..\src/interruptions.c ****                 g_ref.pos = (err_emg_1 * g_mem.pos_lim_sup) / (1024 - c_mem.emg_threshold[0]);
 1083              		.loc 1 576 0
 1084 0158 544B     		ldr	r3, .L166+8
 1085 015a D3F8FC30 		ldr	r3, [r3, #252]
 1086 015e FA68     		ldr	r2, [r7, #12]
 1087 0160 02FB03F2 		mul	r2, r2, r3
 1088 0164 4F4B     		ldr	r3, .L166
 1089 0166 B3F80A31 		ldrh	r3, [r3, #266]
 1090 016a C3F58063 		rsb	r3, r3, #1024
 1091 016e 92FBF3F3 		sdiv	r3, r2, r3
 1092 0172 504A     		ldr	r2, .L166+16
 1093 0174 1360     		str	r3, [r2]
 577:..\src/interruptions.c ****             else
 578:..\src/interruptions.c ****                 g_ref.pos = 0;
 579:..\src/interruptions.c ****             break;
 1094              		.loc 1 579 0
 1095 0176 11E1     		b	.L66
 1096              	.L67:
 578:..\src/interruptions.c ****             break;
 1097              		.loc 1 578 0
 1098 0178 4E4B     		ldr	r3, .L166+16
 1099 017a 0022     		movs	r2, #0
 1100 017c 1A60     		str	r2, [r3]
 1101              		.loc 1 579 0
 1102 017e 0DE1     		b	.L66
 1103              	.L58:
 580:..\src/interruptions.c **** 
 581:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 582:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1104              		.loc 1 582 0
 1105 0180 4B4B     		ldr	r3, .L166+12
 1106 0182 1B68     		ldr	r3, [r3]
 1107 0184 4B4A     		ldr	r2, .L166+16
 1108 0186 1360     		str	r3, [r2]
 583:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1109              		.loc 1 583 0
 1110 0188 FB68     		ldr	r3, [r7, #12]
 1111 018a 002B     		cmp	r3, #0
 1112 018c 13DD     		ble	.L69
 584:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos + (err_emg_1 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
 1113              		.loc 1 584 0
 1114 018e 484B     		ldr	r3, .L166+12
 1115 0190 1A68     		ldr	r2, [r3]
 1116 0192 464B     		ldr	r3, .L166+8
 1117 0194 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1118 0198 1946     		mov	r1, r3
 1119 019a FB68     		ldr	r3, [r7, #12]
 1120 019c 03FB01F3 		mul	r3, r3, r1
 1121 01a0 5900     		lsls	r1, r3, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 31


 1122 01a2 404B     		ldr	r3, .L166
 1123 01a4 B3F80A31 		ldrh	r3, [r3, #266]
 1124 01a8 C3F58063 		rsb	r3, r3, #1024
 1125 01ac 91FBF3F3 		sdiv	r3, r1, r3
 1126 01b0 1344     		add	r3, r3, r2
 1127 01b2 404A     		ldr	r2, .L166+16
 1128 01b4 1360     		str	r3, [r2]
 1129              	.L69:
 585:..\src/interruptions.c ****             }
 586:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1130              		.loc 1 586 0
 1131 01b6 BB68     		ldr	r3, [r7, #8]
 1132 01b8 002B     		cmp	r3, #0
 1133 01ba 40F3EE80 		ble	.L159
 587:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos - (err_emg_2 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
 1134              		.loc 1 587 0
 1135 01be 3C4B     		ldr	r3, .L166+12
 1136 01c0 1A68     		ldr	r2, [r3]
 1137 01c2 3A4B     		ldr	r3, .L166+8
 1138 01c4 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1139 01c8 1946     		mov	r1, r3
 1140 01ca BB68     		ldr	r3, [r7, #8]
 1141 01cc 03FB01F3 		mul	r3, r3, r1
 1142 01d0 5900     		lsls	r1, r3, #1
 1143 01d2 344B     		ldr	r3, .L166
 1144 01d4 B3F80C31 		ldrh	r3, [r3, #268]
 1145 01d8 C3F58063 		rsb	r3, r3, #1024
 1146 01dc 91FBF3F3 		sdiv	r3, r1, r3
 1147 01e0 D31A     		subs	r3, r2, r3
 1148 01e2 344A     		ldr	r2, .L166+16
 1149 01e4 1360     		str	r3, [r2]
 588:..\src/interruptions.c ****             }
 589:..\src/interruptions.c ****             break;
 1150              		.loc 1 589 0
 1151 01e6 D8E0     		b	.L159
 1152              	.L59:
 590:..\src/interruptions.c **** 
 591:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 592:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1153              		.loc 1 592 0
 1154 01e8 314B     		ldr	r3, .L166+12
 1155 01ea 1B68     		ldr	r3, [r3]
 1156 01ec 314A     		ldr	r2, .L166+16
 1157 01ee 1360     		str	r3, [r2]
 593:..\src/interruptions.c ****             switch (current_emg) {
 1158              		.loc 1 593 0
 1159 01f0 314B     		ldr	r3, .L166+20
 1160 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1161 01f4 012B     		cmp	r3, #1
 1162 01f6 1AD0     		beq	.L72
 1163 01f8 022B     		cmp	r3, #2
 1164 01fa 34D0     		beq	.L73
 1165 01fc 002B     		cmp	r3, #0
 1166 01fe 00D0     		beq	.L74
 594:..\src/interruptions.c ****                 case 0:
 595:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
 596:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 32


 597:..\src/interruptions.c ****                         current_emg = 1;
 598:..\src/interruptions.c ****                         break;
 599:..\src/interruptions.c ****                     }
 600:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 601:..\src/interruptions.c ****                         current_emg = 2;
 602:..\src/interruptions.c ****                         break;
 603:..\src/interruptions.c ****                     }
 604:..\src/interruptions.c ****                     break;
 605:..\src/interruptions.c **** 
 606:..\src/interruptions.c ****                 case 1:
 607:..\src/interruptions.c ****                     // EMG 1 is first
 608:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
 609:..\src/interruptions.c ****                         current_emg = 0;
 610:..\src/interruptions.c ****                         break;
 611:..\src/interruptions.c ****                     }
 612:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_mem.e
 613:..\src/interruptions.c ****                     break;
 614:..\src/interruptions.c **** 
 615:..\src/interruptions.c ****                 case 2:
 616:..\src/interruptions.c ****                     // EMG 2 is first
 617:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
 618:..\src/interruptions.c ****                         current_emg = 0;
 619:..\src/interruptions.c ****                         break;
 620:..\src/interruptions.c ****                     }
 621:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos - (err_emg_2 * g_mem.emg_speed << 2) / (1024 - c_mem.e
 622:..\src/interruptions.c ****                     break;
 623:..\src/interruptions.c **** 
 624:..\src/interruptions.c ****                 default:
 625:..\src/interruptions.c ****                     break;
 1167              		.loc 1 625 0
 1168 0200 4EE0     		b	.L76
 1169              	.L74:
 596:..\src/interruptions.c ****                         current_emg = 1;
 1170              		.loc 1 596 0
 1171 0202 FB68     		ldr	r3, [r7, #12]
 1172 0204 002B     		cmp	r3, #0
 1173 0206 07DD     		ble	.L75
 596:..\src/interruptions.c ****                         current_emg = 1;
 1174              		.loc 1 596 0 is_stmt 0 discriminator 1
 1175 0208 FA68     		ldr	r2, [r7, #12]
 1176 020a BB68     		ldr	r3, [r7, #8]
 1177 020c 9A42     		cmp	r2, r3
 1178 020e 03DD     		ble	.L75
 597:..\src/interruptions.c ****                         break;
 1179              		.loc 1 597 0 is_stmt 1
 1180 0210 294B     		ldr	r3, .L166+20
 1181 0212 0122     		movs	r2, #1
 1182 0214 1A70     		strb	r2, [r3]
 598:..\src/interruptions.c ****                     }
 1183              		.loc 1 598 0
 1184 0216 43E0     		b	.L76
 1185              	.L75:
 600:..\src/interruptions.c ****                         current_emg = 2;
 1186              		.loc 1 600 0
 1187 0218 BB68     		ldr	r3, [r7, #8]
 1188 021a 002B     		cmp	r3, #0
 1189 021c 3FDD     		ble	.L160
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 33


 600:..\src/interruptions.c ****                         current_emg = 2;
 1190              		.loc 1 600 0 is_stmt 0 discriminator 1
 1191 021e BA68     		ldr	r2, [r7, #8]
 1192 0220 FB68     		ldr	r3, [r7, #12]
 1193 0222 9A42     		cmp	r2, r3
 1194 0224 3BDD     		ble	.L160
 601:..\src/interruptions.c ****                         break;
 1195              		.loc 1 601 0 is_stmt 1
 1196 0226 244B     		ldr	r3, .L166+20
 1197 0228 0222     		movs	r2, #2
 1198 022a 1A70     		strb	r2, [r3]
 602:..\src/interruptions.c ****                     }
 1199              		.loc 1 602 0
 1200 022c 38E0     		b	.L76
 1201              	.L72:
 608:..\src/interruptions.c ****                         current_emg = 0;
 1202              		.loc 1 608 0
 1203 022e FB68     		ldr	r3, [r7, #12]
 1204 0230 002B     		cmp	r3, #0
 1205 0232 03DA     		bge	.L78
 609:..\src/interruptions.c ****                         break;
 1206              		.loc 1 609 0
 1207 0234 204B     		ldr	r3, .L166+20
 1208 0236 0022     		movs	r2, #0
 1209 0238 1A70     		strb	r2, [r3]
 610:..\src/interruptions.c ****                     }
 1210              		.loc 1 610 0
 1211 023a 31E0     		b	.L76
 1212              	.L78:
 612:..\src/interruptions.c ****                     break;
 1213              		.loc 1 612 0
 1214 023c 1C4B     		ldr	r3, .L166+12
 1215 023e 1A68     		ldr	r2, [r3]
 1216 0240 1A4B     		ldr	r3, .L166+8
 1217 0242 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1218 0246 1946     		mov	r1, r3
 1219 0248 FB68     		ldr	r3, [r7, #12]
 1220 024a 03FB01F3 		mul	r3, r3, r1
 1221 024e 9900     		lsls	r1, r3, #2
 1222 0250 144B     		ldr	r3, .L166
 1223 0252 B3F80A31 		ldrh	r3, [r3, #266]
 1224 0256 C3F58063 		rsb	r3, r3, #1024
 1225 025a 91FBF3F3 		sdiv	r3, r1, r3
 1226 025e 1344     		add	r3, r3, r2
 1227 0260 144A     		ldr	r2, .L166+16
 1228 0262 1360     		str	r3, [r2]
 613:..\src/interruptions.c **** 
 1229              		.loc 1 613 0
 1230 0264 1CE0     		b	.L76
 1231              	.L73:
 617:..\src/interruptions.c ****                         current_emg = 0;
 1232              		.loc 1 617 0
 1233 0266 BB68     		ldr	r3, [r7, #8]
 1234 0268 002B     		cmp	r3, #0
 1235 026a 03DA     		bge	.L79
 618:..\src/interruptions.c ****                         break;
 1236              		.loc 1 618 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 34


 1237 026c 124B     		ldr	r3, .L166+20
 1238 026e 0022     		movs	r2, #0
 1239 0270 1A70     		strb	r2, [r3]
 619:..\src/interruptions.c ****                     }
 1240              		.loc 1 619 0
 1241 0272 15E0     		b	.L76
 1242              	.L79:
 621:..\src/interruptions.c ****                     break;
 1243              		.loc 1 621 0
 1244 0274 0E4B     		ldr	r3, .L166+12
 1245 0276 1A68     		ldr	r2, [r3]
 1246 0278 0C4B     		ldr	r3, .L166+8
 1247 027a 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1248 027e 1946     		mov	r1, r3
 1249 0280 BB68     		ldr	r3, [r7, #8]
 1250 0282 03FB01F3 		mul	r3, r3, r1
 1251 0286 9900     		lsls	r1, r3, #2
 1252 0288 064B     		ldr	r3, .L166
 1253 028a B3F80C31 		ldrh	r3, [r3, #268]
 1254 028e C3F58063 		rsb	r3, r3, #1024
 1255 0292 91FBF3F3 		sdiv	r3, r1, r3
 1256 0296 D31A     		subs	r3, r2, r3
 1257 0298 064A     		ldr	r2, .L166+16
 1258 029a 1360     		str	r3, [r2]
 622:..\src/interruptions.c **** 
 1259              		.loc 1 622 0
 1260 029c 00E0     		b	.L76
 1261              	.L160:
 604:..\src/interruptions.c **** 
 1262              		.loc 1 604 0
 1263 029e 00BF     		nop
 1264              	.L76:
 626:..\src/interruptions.c ****             }
 627:..\src/interruptions.c ****             break;
 1265              		.loc 1 627 0 discriminator 1
 1266 02a0 7CE0     		b	.L66
 1267              	.L167:
 1268 02a2 00BF     		.align	2
 1269              	.L166:
 1270 02a4 00000000 		.word	c_mem
 1271 02a8 00000000 		.word	g_meas
 1272 02ac 00000000 		.word	g_mem
 1273 02b0 00000000 		.word	g_refOld
 1274 02b4 00000000 		.word	g_ref
 1275 02b8 8C000000 		.word	current_emg.10311
 1276              	.L60:
 628:..\src/interruptions.c **** 
 629:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 630:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
 1277              		.loc 1 630 0
 1278 02bc 994B     		ldr	r3, .L168
 1279 02be 1B68     		ldr	r3, [r3]
 1280 02c0 994A     		ldr	r2, .L168+4
 1281 02c2 1360     		str	r3, [r2]
 631:..\src/interruptions.c ****             switch (current_emg) {
 1282              		.loc 1 631 0
 1283 02c4 994B     		ldr	r3, .L168+8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 35


 1284 02c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1285 02c8 012B     		cmp	r3, #1
 1286 02ca 1AD0     		beq	.L81
 1287 02cc 022B     		cmp	r3, #2
 1288 02ce 3AD0     		beq	.L82
 1289 02d0 002B     		cmp	r3, #0
 1290 02d2 00D0     		beq	.L83
 632:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 633:..\src/interruptions.c ****                 case 0:
 634:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 635:..\src/interruptions.c ****                         current_emg = 1;
 636:..\src/interruptions.c ****                         break;
 637:..\src/interruptions.c ****                     }
 638:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 639:..\src/interruptions.c ****                         current_emg = 2;
 640:..\src/interruptions.c ****                         break;
 641:..\src/interruptions.c ****                     }
 642:..\src/interruptions.c ****                     break;
 643:..\src/interruptions.c **** 
 644:..\src/interruptions.c ****                 // EMG 1 is first
 645:..\src/interruptions.c ****                 case 1:
 646:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 647:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 648:..\src/interruptions.c ****                         current_emg = 0;
 649:..\src/interruptions.c ****                         break;
 650:..\src/interruptions.c ****                     }
 651:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 652:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 653:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_m
 654:..\src/interruptions.c ****                     
 655:..\src/interruptions.c ****                     break;
 656:..\src/interruptions.c **** 
 657:..\src/interruptions.c ****                 // EMG 2 is first
 658:..\src/interruptions.c ****                 case 2:
 659:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 660:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 661:..\src/interruptions.c ****                         current_emg = 0;
 662:..\src/interruptions.c ****                         break;
 663:..\src/interruptions.c ****                     }
 664:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 665:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 666:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_m
 667:..\src/interruptions.c ****                     }
 668:..\src/interruptions.c ****                     break;
 669:..\src/interruptions.c **** 
 670:..\src/interruptions.c ****                 default:
 671:..\src/interruptions.c ****                     break;
 1291              		.loc 1 671 0
 1292 02d4 5EE0     		b	.L85
 1293              	.L83:
 634:..\src/interruptions.c ****                         current_emg = 1;
 1294              		.loc 1 634 0
 1295 02d6 FB68     		ldr	r3, [r7, #12]
 1296 02d8 002B     		cmp	r3, #0
 1297 02da 07DD     		ble	.L84
 634:..\src/interruptions.c ****                         current_emg = 1;
 1298              		.loc 1 634 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 36


 1299 02dc FA68     		ldr	r2, [r7, #12]
 1300 02de BB68     		ldr	r3, [r7, #8]
 1301 02e0 9A42     		cmp	r2, r3
 1302 02e2 03DD     		ble	.L84
 635:..\src/interruptions.c ****                         break;
 1303              		.loc 1 635 0 is_stmt 1
 1304 02e4 914B     		ldr	r3, .L168+8
 1305 02e6 0122     		movs	r2, #1
 1306 02e8 1A70     		strb	r2, [r3]
 636:..\src/interruptions.c ****                     }
 1307              		.loc 1 636 0
 1308 02ea 53E0     		b	.L85
 1309              	.L84:
 638:..\src/interruptions.c ****                         current_emg = 2;
 1310              		.loc 1 638 0
 1311 02ec BB68     		ldr	r3, [r7, #8]
 1312 02ee 002B     		cmp	r3, #0
 1313 02f0 4BDD     		ble	.L161
 638:..\src/interruptions.c ****                         current_emg = 2;
 1314              		.loc 1 638 0 is_stmt 0 discriminator 1
 1315 02f2 BA68     		ldr	r2, [r7, #8]
 1316 02f4 FB68     		ldr	r3, [r7, #12]
 1317 02f6 9A42     		cmp	r2, r3
 1318 02f8 47DD     		ble	.L161
 639:..\src/interruptions.c ****                         break;
 1319              		.loc 1 639 0 is_stmt 1
 1320 02fa 8C4B     		ldr	r3, .L168+8
 1321 02fc 0222     		movs	r2, #2
 1322 02fe 1A70     		strb	r2, [r3]
 640:..\src/interruptions.c ****                     }
 1323              		.loc 1 640 0
 1324 0300 48E0     		b	.L85
 1325              	.L81:
 647:..\src/interruptions.c ****                         current_emg = 0;
 1326              		.loc 1 647 0
 1327 0302 FB68     		ldr	r3, [r7, #12]
 1328 0304 002B     		cmp	r3, #0
 1329 0306 06DA     		bge	.L87
 647:..\src/interruptions.c ****                         current_emg = 0;
 1330              		.loc 1 647 0 is_stmt 0 discriminator 1
 1331 0308 BB68     		ldr	r3, [r7, #8]
 1332 030a 002B     		cmp	r3, #0
 1333 030c 03DA     		bge	.L87
 648:..\src/interruptions.c ****                         break;
 1334              		.loc 1 648 0 is_stmt 1
 1335 030e 874B     		ldr	r3, .L168+8
 1336 0310 0022     		movs	r2, #0
 1337 0312 1A70     		strb	r2, [r3]
 649:..\src/interruptions.c ****                     }
 1338              		.loc 1 649 0
 1339 0314 3EE0     		b	.L85
 1340              	.L87:
 652:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_m
 1341              		.loc 1 652 0
 1342 0316 FB68     		ldr	r3, [r7, #12]
 1343 0318 002B     		cmp	r3, #0
 1344 031a 38DD     		ble	.L162
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 37


 653:..\src/interruptions.c ****                     
 1345              		.loc 1 653 0
 1346 031c 814B     		ldr	r3, .L168
 1347 031e 1A68     		ldr	r2, [r3]
 1348 0320 834B     		ldr	r3, .L168+12
 1349 0322 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1350 0326 1946     		mov	r1, r3
 1351 0328 FB68     		ldr	r3, [r7, #12]
 1352 032a 03FB01F3 		mul	r3, r3, r1
 1353 032e 9900     		lsls	r1, r3, #2
 1354 0330 804B     		ldr	r3, .L168+16
 1355 0332 B3F80A31 		ldrh	r3, [r3, #266]
 1356 0336 C3F58063 		rsb	r3, r3, #1024
 1357 033a 91FBF3F3 		sdiv	r3, r1, r3
 1358 033e 1344     		add	r3, r3, r2
 1359 0340 794A     		ldr	r2, .L168+4
 1360 0342 1360     		str	r3, [r2]
 655:..\src/interruptions.c **** 
 1361              		.loc 1 655 0
 1362 0344 23E0     		b	.L162
 1363              	.L82:
 660:..\src/interruptions.c ****                         current_emg = 0;
 1364              		.loc 1 660 0
 1365 0346 FB68     		ldr	r3, [r7, #12]
 1366 0348 002B     		cmp	r3, #0
 1367 034a 06DA     		bge	.L89
 660:..\src/interruptions.c ****                         current_emg = 0;
 1368              		.loc 1 660 0 is_stmt 0 discriminator 1
 1369 034c BB68     		ldr	r3, [r7, #8]
 1370 034e 002B     		cmp	r3, #0
 1371 0350 03DA     		bge	.L89
 661:..\src/interruptions.c ****                         break;
 1372              		.loc 1 661 0 is_stmt 1
 1373 0352 764B     		ldr	r3, .L168+8
 1374 0354 0022     		movs	r2, #0
 1375 0356 1A70     		strb	r2, [r3]
 662:..\src/interruptions.c ****                     }
 1376              		.loc 1 662 0
 1377 0358 1CE0     		b	.L85
 1378              	.L89:
 665:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_m
 1379              		.loc 1 665 0
 1380 035a BB68     		ldr	r3, [r7, #8]
 1381 035c 002B     		cmp	r3, #0
 1382 035e 18DD     		ble	.L163
 666:..\src/interruptions.c ****                     }
 1383              		.loc 1 666 0
 1384 0360 704B     		ldr	r3, .L168
 1385 0362 1A68     		ldr	r2, [r3]
 1386 0364 734B     		ldr	r3, .L168+16
 1387 0366 93F81831 		ldrb	r3, [r3, #280]	@ zero_extendqisi2
 1388 036a 1946     		mov	r1, r3
 1389 036c BB68     		ldr	r3, [r7, #8]
 1390 036e 03FB01F3 		mul	r3, r3, r1
 1391 0372 9900     		lsls	r1, r3, #2
 1392 0374 6F4B     		ldr	r3, .L168+16
 1393 0376 B3F80C31 		ldrh	r3, [r3, #268]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 38


 1394 037a C3F58063 		rsb	r3, r3, #1024
 1395 037e 91FBF3F3 		sdiv	r3, r1, r3
 1396 0382 D31A     		subs	r3, r2, r3
 1397 0384 684A     		ldr	r2, .L168+4
 1398 0386 1360     		str	r3, [r2]
 668:..\src/interruptions.c **** 
 1399              		.loc 1 668 0
 1400 0388 03E0     		b	.L163
 1401              	.L161:
 642:..\src/interruptions.c **** 
 1402              		.loc 1 642 0
 1403 038a 00BF     		nop
 1404 038c 06E0     		b	.L66
 1405              	.L162:
 655:..\src/interruptions.c **** 
 1406              		.loc 1 655 0
 1407 038e 00BF     		nop
 1408 0390 04E0     		b	.L66
 1409              	.L163:
 668:..\src/interruptions.c **** 
 1410              		.loc 1 668 0
 1411 0392 00BF     		nop
 1412              	.L85:
 672:..\src/interruptions.c ****             }
 673:..\src/interruptions.c ****             break;
 1413              		.loc 1 673 0 discriminator 3
 1414 0394 02E0     		b	.L66
 1415              	.L158:
 674:..\src/interruptions.c **** 
 675:..\src/interruptions.c ****         default:
 676:..\src/interruptions.c ****             break;
 1416              		.loc 1 676 0
 1417 0396 00BF     		nop
 1418 0398 00E0     		b	.L66
 1419              	.L159:
 589:..\src/interruptions.c **** 
 1420              		.loc 1 589 0
 1421 039a 00BF     		nop
 1422              	.L66:
 677:..\src/interruptions.c ****     }
 678:..\src/interruptions.c **** 
 679:..\src/interruptions.c ****     // Position limit saturation
 680:..\src/interruptions.c ****     if (c_mem.pos_lim_flag) {
 1423              		.loc 1 680 0
 1424 039c 654B     		ldr	r3, .L168+16
 1425 039e 93F8F430 		ldrb	r3, [r3, #244]	@ zero_extendqisi2
 1426 03a2 002B     		cmp	r3, #0
 1427 03a4 17D0     		beq	.L91
 681:..\src/interruptions.c ****         if (g_ref.pos < c_mem.pos_lim_inf) 
 1428              		.loc 1 681 0
 1429 03a6 604B     		ldr	r3, .L168+4
 1430 03a8 1A68     		ldr	r2, [r3]
 1431 03aa 624B     		ldr	r3, .L168+16
 1432 03ac D3F8F830 		ldr	r3, [r3, #248]
 1433 03b0 9A42     		cmp	r2, r3
 1434 03b2 04DA     		bge	.L92
 682:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_inf;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 39


 1435              		.loc 1 682 0
 1436 03b4 5F4B     		ldr	r3, .L168+16
 1437 03b6 D3F8F830 		ldr	r3, [r3, #248]
 1438 03ba 5B4A     		ldr	r2, .L168+4
 1439 03bc 1360     		str	r3, [r2]
 1440              	.L92:
 683:..\src/interruptions.c ****         if (g_ref.pos > c_mem.pos_lim_sup) 
 1441              		.loc 1 683 0
 1442 03be 5A4B     		ldr	r3, .L168+4
 1443 03c0 1A68     		ldr	r2, [r3]
 1444 03c2 5C4B     		ldr	r3, .L168+16
 1445 03c4 D3F8FC30 		ldr	r3, [r3, #252]
 1446 03c8 9A42     		cmp	r2, r3
 1447 03ca 04DD     		ble	.L91
 684:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_sup;
 1448              		.loc 1 684 0
 1449 03cc 594B     		ldr	r3, .L168+16
 1450 03ce D3F8FC30 		ldr	r3, [r3, #252]
 1451 03d2 554A     		ldr	r2, .L168+4
 1452 03d4 1360     		str	r3, [r2]
 1453              	.L91:
 685:..\src/interruptions.c ****     }
 686:..\src/interruptions.c ****     
 687:..\src/interruptions.c ****     if (battery_low_SoC == 1) {
 1454              		.loc 1 687 0
 1455 03d6 584B     		ldr	r3, .L168+20
 1456 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1457 03da 012B     		cmp	r3, #1
 1458 03dc 02D1     		bne	.L93
 688:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 689:..\src/interruptions.c ****         g_ref.pos = 0;
 1459              		.loc 1 689 0
 1460 03de 524B     		ldr	r3, .L168+4
 1461 03e0 0022     		movs	r2, #0
 1462 03e2 1A60     		str	r2, [r3]
 1463              	.L93:
 690:..\src/interruptions.c ****     }
 691:..\src/interruptions.c ****         
 692:..\src/interruptions.c ****     if (c_mem.rest_position_flag == TRUE) {
 1464              		.loc 1 692 0
 1465 03e4 534B     		ldr	r3, .L168+16
 1466 03e6 93F84431 		ldrb	r3, [r3, #324]	@ zero_extendqisi2
 1467 03ea 012B     		cmp	r3, #1
 1468 03ec 2AD1     		bne	.L94
 693:..\src/interruptions.c ****         if (rest_enabled == 1){
 1469              		.loc 1 693 0
 1470 03ee 534B     		ldr	r3, .L168+24
 1471 03f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1472 03f2 012B     		cmp	r3, #1
 1473 03f4 03D1     		bne	.L95
 694:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 695:..\src/interruptions.c ****             g_ref.pos = rest_pos_curr_ref;
 1474              		.loc 1 695 0
 1475 03f6 524B     		ldr	r3, .L168+28
 1476 03f8 1B68     		ldr	r3, [r3]
 1477 03fa 4B4A     		ldr	r2, .L168+4
 1478 03fc 1360     		str	r3, [r2]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 40


 1479              	.L95:
 696:..\src/interruptions.c ****         }
 697:..\src/interruptions.c ****         
 698:..\src/interruptions.c ****         if (forced_open == 1) {
 1480              		.loc 1 698 0
 1481 03fe 514B     		ldr	r3, .L168+32
 1482 0400 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1483 0402 012B     		cmp	r3, #1
 1484 0404 1ED1     		bne	.L94
 699:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 700:..\src/interruptions.c ****             if (err_emg_2 > 0)
 1485              		.loc 1 700 0
 1486 0406 BB68     		ldr	r3, [r7, #8]
 1487 0408 002B     		cmp	r3, #0
 1488 040a 13DD     		ble	.L96
 701:..\src/interruptions.c ****                 g_ref.pos = g_mem.rest_pos - (err_emg_2 * g_mem.rest_pos) / (1024 - c_mem.emg_thres
 1489              		.loc 1 701 0
 1490 040c 484B     		ldr	r3, .L168+12
 1491 040e D3F83821 		ldr	r2, [r3, #312]
 1492 0412 474B     		ldr	r3, .L168+12
 1493 0414 D3F83831 		ldr	r3, [r3, #312]
 1494 0418 B968     		ldr	r1, [r7, #8]
 1495 041a 01FB03F1 		mul	r1, r1, r3
 1496 041e 454B     		ldr	r3, .L168+16
 1497 0420 B3F80C31 		ldrh	r3, [r3, #268]
 1498 0424 C3F58063 		rsb	r3, r3, #1024
 1499 0428 91FBF3F3 		sdiv	r3, r1, r3
 1500 042c D31A     		subs	r3, r2, r3
 1501 042e 3E4A     		ldr	r2, .L168+4
 1502 0430 1360     		str	r3, [r2]
 1503 0432 07E0     		b	.L94
 1504              	.L96:
 702:..\src/interruptions.c ****             else {
 703:..\src/interruptions.c ****                 g_ref.pos = g_mem.rest_pos;
 1505              		.loc 1 703 0
 1506 0434 3E4B     		ldr	r3, .L168+12
 1507 0436 D3F83831 		ldr	r3, [r3, #312]
 1508 043a 3B4A     		ldr	r2, .L168+4
 1509 043c 1360     		str	r3, [r2]
 704:..\src/interruptions.c ****                 forced_open = 0;
 1510              		.loc 1 704 0
 1511 043e 414B     		ldr	r3, .L168+32
 1512 0440 0022     		movs	r2, #0
 1513 0442 1A70     		strb	r2, [r3]
 1514              	.L94:
 705:..\src/interruptions.c ****             }
 706:..\src/interruptions.c ****         }
 707:..\src/interruptions.c ****     }
 708:..\src/interruptions.c **** 
 709:..\src/interruptions.c ****     switch(c_mem.control_mode) {
 1515              		.loc 1 709 0
 1516 0444 3B4B     		ldr	r3, .L168+16
 1517 0446 93F8D630 		ldrb	r3, [r3, #214]	@ zero_extendqisi2
 1518 044a 032B     		cmp	r3, #3
 1519 044c 00F2E481 		bhi	.L97
 1520 0450 01A2     		adr	r2, .L99
 1521 0452 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 41


 1522 0456 00BF     		.p2align 2
 1523              	.L99:
 1524 0458 21060000 		.word	.L98+1
 1525 045c AB070000 		.word	.L100+1
 1526 0460 BF060000 		.word	.L101+1
 1527 0464 69040000 		.word	.L102+1
 1528              		.p2align 1
 1529              	.L102:
 710:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 711:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 712:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
 1530              		.loc 1 712 0
 1531 0468 2F4B     		ldr	r3, .L168+4
 1532 046a 1A68     		ldr	r2, [r3]
 1533 046c 364B     		ldr	r3, .L168+36
 1534 046e 1B68     		ldr	r3, [r3]
 1535 0470 D31A     		subs	r3, r2, r3
 1536 0472 BB64     		str	r3, [r7, #72]
 713:..\src/interruptions.c **** 
 714:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1537              		.loc 1 714 0
 1538 0474 354B     		ldr	r3, .L168+40
 1539 0476 1A68     		ldr	r2, [r3]
 1540 0478 BB6C     		ldr	r3, [r7, #72]
 1541 047a 1344     		add	r3, r3, r2
 1542 047c 334A     		ldr	r2, .L168+40
 1543 047e 1360     		str	r3, [r2]
 715:..\src/interruptions.c **** 
 716:..\src/interruptions.c ****             // error_sum saturation
 717:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 1544              		.loc 1 717 0
 1545 0480 324B     		ldr	r3, .L168+40
 1546 0482 1B68     		ldr	r3, [r3]
 1547 0484 324A     		ldr	r2, .L168+44
 1548 0486 9342     		cmp	r3, r2
 1549 0488 03DD     		ble	.L103
 718:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 1550              		.loc 1 718 0
 1551 048a 304B     		ldr	r3, .L168+40
 1552 048c 304A     		ldr	r2, .L168+44
 1553 048e 1A60     		str	r2, [r3]
 1554 0490 07E0     		b	.L104
 1555              	.L103:
 719:..\src/interruptions.c ****             else {
 720:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 1556              		.loc 1 720 0
 1557 0492 2E4B     		ldr	r3, .L168+40
 1558 0494 1B68     		ldr	r3, [r3]
 1559 0496 2F4A     		ldr	r2, .L168+48
 1560 0498 9342     		cmp	r3, r2
 1561 049a 02DA     		bge	.L104
 721:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 1562              		.loc 1 721 0
 1563 049c 2B4B     		ldr	r3, .L168+40
 1564 049e 2D4A     		ldr	r2, .L168+48
 1565 04a0 1A60     		str	r2, [r3]
 1566              	.L104:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 42


 722:..\src/interruptions.c ****             }
 723:..\src/interruptions.c ****             
 724:..\src/interruptions.c ****             // ------ position PID control ------
 725:..\src/interruptions.c **** 
 726:..\src/interruptions.c ****             i_ref = 0;
 1567              		.loc 1 726 0
 1568 04a2 0023     		movs	r3, #0
 1569 04a4 7B64     		str	r3, [r7, #68]
 727:..\src/interruptions.c ****             
 728:..\src/interruptions.c ****             // Proportional
 729:..\src/interruptions.c ****             if (k_p_dl != 0)
 1570              		.loc 1 729 0
 1571 04a6 7B6A     		ldr	r3, [r7, #36]
 1572 04a8 002B     		cmp	r3, #0
 1573 04aa 07D0     		beq	.L105
 730:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 1574              		.loc 1 730 0
 1575 04ac 7B6A     		ldr	r3, [r7, #36]
 1576 04ae BA6C     		ldr	r2, [r7, #72]
 1577 04b0 02FB03F3 		mul	r3, r2, r3
 1578 04b4 1B14     		asrs	r3, r3, #16
 1579 04b6 7A6C     		ldr	r2, [r7, #68]
 1580 04b8 1344     		add	r3, r3, r2
 1581 04ba 7B64     		str	r3, [r7, #68]
 1582              	.L105:
 731:..\src/interruptions.c **** 
 732:..\src/interruptions.c ****             // Integral
 733:..\src/interruptions.c ****             if (k_i_dl != 0)
 1583              		.loc 1 733 0
 1584 04bc 3B6A     		ldr	r3, [r7, #32]
 1585 04be 002B     		cmp	r3, #0
 1586 04c0 08D0     		beq	.L106
 734:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 1587              		.loc 1 734 0
 1588 04c2 224B     		ldr	r3, .L168+40
 1589 04c4 1B68     		ldr	r3, [r3]
 1590 04c6 3A6A     		ldr	r2, [r7, #32]
 1591 04c8 02FB03F3 		mul	r3, r2, r3
 1592 04cc 1B14     		asrs	r3, r3, #16
 1593 04ce 7A6C     		ldr	r2, [r7, #68]
 1594 04d0 1344     		add	r3, r3, r2
 1595 04d2 7B64     		str	r3, [r7, #68]
 1596              	.L106:
 735:..\src/interruptions.c **** 
 736:..\src/interruptions.c ****             // Derivative
 737:..\src/interruptions.c ****             if (k_d_dl != 0)
 1597              		.loc 1 737 0
 1598 04d4 FB69     		ldr	r3, [r7, #28]
 1599 04d6 002B     		cmp	r3, #0
 1600 04d8 0AD0     		beq	.L107
 738:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 1601              		.loc 1 738 0
 1602 04da 1F4B     		ldr	r3, .L168+52
 1603 04dc 1B68     		ldr	r3, [r3]
 1604 04de BA6C     		ldr	r2, [r7, #72]
 1605 04e0 D31A     		subs	r3, r2, r3
 1606 04e2 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 43


 1607 04e4 02FB03F3 		mul	r3, r2, r3
 1608 04e8 1B14     		asrs	r3, r3, #16
 1609 04ea 7A6C     		ldr	r2, [r7, #68]
 1610 04ec 1344     		add	r3, r3, r2
 1611 04ee 7B64     		str	r3, [r7, #68]
 1612              	.L107:
 739:..\src/interruptions.c ****                         
 740:..\src/interruptions.c ****             // Update previous position
 741:..\src/interruptions.c ****             prev_pos_err = pos_error;
 1613              		.loc 1 741 0
 1614 04f0 194A     		ldr	r2, .L168+52
 1615 04f2 BB6C     		ldr	r3, [r7, #72]
 1616 04f4 1360     		str	r3, [r2]
 742:..\src/interruptions.c **** 
 743:..\src/interruptions.c ****             // motor direction depends on i_ref
 744:..\src/interruptions.c ****             if (i_ref >= 0)
 1617              		.loc 1 744 0
 1618 04f6 7B6C     		ldr	r3, [r7, #68]
 1619 04f8 002B     		cmp	r3, #0
 1620 04fa 03DB     		blt	.L108
 745:..\src/interruptions.c ****                 motor_dir = TRUE;
 1621              		.loc 1 745 0
 1622 04fc 174B     		ldr	r3, .L168+56
 1623 04fe 0122     		movs	r2, #1
 1624 0500 1A70     		strb	r2, [r3]
 1625 0502 02E0     		b	.L109
 1626              	.L108:
 746:..\src/interruptions.c ****             else
 747:..\src/interruptions.c ****                 motor_dir = FALSE;
 1627              		.loc 1 747 0
 1628 0504 154B     		ldr	r3, .L168+56
 1629 0506 0022     		movs	r2, #0
 1630 0508 1A70     		strb	r2, [r3]
 1631              	.L109:
 748:..\src/interruptions.c **** 
 749:..\src/interruptions.c ****             // saturate max current
 750:..\src/interruptions.c ****             if (i_ref > c_mem.current_limit)
 1632              		.loc 1 750 0
 1633 050a 0A4B     		ldr	r3, .L168+16
 1634 050c B3F90831 		ldrsh	r3, [r3, #264]
 1635 0510 1A46     		mov	r2, r3
 1636 0512 7B6C     		ldr	r3, [r7, #68]
 1637 0514 9A42     		cmp	r2, r3
 1638 0516 23DA     		bge	.L110
 751:..\src/interruptions.c ****                 i_ref = c_mem.current_limit;
 1639              		.loc 1 751 0
 1640 0518 064B     		ldr	r3, .L168+16
 1641 051a B3F90831 		ldrsh	r3, [r3, #264]
 1642 051e 7B64     		str	r3, [r7, #68]
 1643 0520 2AE0     		b	.L111
 1644              	.L169:
 1645 0522 00BF     		.align	2
 1646              	.L168:
 1647 0524 00000000 		.word	g_refOld
 1648 0528 00000000 		.word	g_ref
 1649 052c 8C000000 		.word	current_emg.10311
 1650 0530 00000000 		.word	g_mem
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 44


 1651 0534 00000000 		.word	c_mem
 1652 0538 00000000 		.word	battery_low_SoC
 1653 053c 00000000 		.word	rest_enabled
 1654 0540 00000000 		.word	rest_pos_curr_ref
 1655 0544 00000000 		.word	forced_open
 1656 0548 00000000 		.word	g_meas
 1657 054c 90000000 		.word	pos_error_sum.10304
 1658 0550 80F0FA02 		.word	50000000
 1659 0554 800F05FD 		.word	-50000000
 1660 0558 94000000 		.word	prev_pos_err.10306
 1661 055c 98000000 		.word	motor_dir.10309
 1662              	.L110:
 752:..\src/interruptions.c ****             else {
 753:..\src/interruptions.c ****                 if (i_ref < -c_mem.current_limit)
 1663              		.loc 1 753 0
 1664 0560 974B     		ldr	r3, .L170
 1665 0562 B3F90831 		ldrsh	r3, [r3, #264]
 1666 0566 5A42     		negs	r2, r3
 1667 0568 7B6C     		ldr	r3, [r7, #68]
 1668 056a 9A42     		cmp	r2, r3
 1669 056c 04DD     		ble	.L111
 754:..\src/interruptions.c ****                     i_ref = -c_mem.current_limit;
 1670              		.loc 1 754 0
 1671 056e 944B     		ldr	r3, .L170
 1672 0570 B3F90831 		ldrsh	r3, [r3, #264]
 1673 0574 5B42     		negs	r3, r3
 1674 0576 7B64     		str	r3, [r7, #68]
 1675              	.L111:
 755:..\src/interruptions.c ****         	}
 756:..\src/interruptions.c **** 
 757:..\src/interruptions.c ****             // current error and curr error sum
 758:..\src/interruptions.c ****             curr_error = i_ref - g_meas.curr[0];
 1676              		.loc 1 758 0
 1677 0578 924B     		ldr	r3, .L170+4
 1678 057a DB68     		ldr	r3, [r3, #12]
 1679 057c 7A6C     		ldr	r2, [r7, #68]
 1680 057e D31A     		subs	r3, r2, r3
 1681 0580 7B60     		str	r3, [r7, #4]
 759:..\src/interruptions.c ****             curr_error_sum += curr_error;
 1682              		.loc 1 759 0
 1683 0582 914B     		ldr	r3, .L170+8
 1684 0584 1A68     		ldr	r2, [r3]
 1685 0586 7B68     		ldr	r3, [r7, #4]
 1686 0588 1344     		add	r3, r3, r2
 1687 058a 8F4A     		ldr	r2, .L170+8
 1688 058c 1360     		str	r3, [r2]
 760:..\src/interruptions.c ****             
 761:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 1689              		.loc 1 761 0
 1690 058e 8E4B     		ldr	r3, .L170+8
 1691 0590 1B68     		ldr	r3, [r3]
 1692 0592 8E4A     		ldr	r2, .L170+12
 1693 0594 9342     		cmp	r3, r2
 1694 0596 03DD     		ble	.L112
 762:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 1695              		.loc 1 762 0
 1696 0598 8B4B     		ldr	r3, .L170+8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 45


 1697 059a 8C4A     		ldr	r2, .L170+12
 1698 059c 1A60     		str	r2, [r3]
 1699 059e 07E0     		b	.L113
 1700              	.L112:
 763:..\src/interruptions.c ****             else {
 764:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 1701              		.loc 1 764 0
 1702 05a0 894B     		ldr	r3, .L170+8
 1703 05a2 1B68     		ldr	r3, [r3]
 1704 05a4 8A4A     		ldr	r2, .L170+16
 1705 05a6 9342     		cmp	r3, r2
 1706 05a8 02DA     		bge	.L113
 765:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 1707              		.loc 1 765 0
 1708 05aa 874B     		ldr	r3, .L170+8
 1709 05ac 884A     		ldr	r2, .L170+16
 1710 05ae 1A60     		str	r2, [r3]
 1711              	.L113:
 766:..\src/interruptions.c ****             }
 767:..\src/interruptions.c **** 
 768:..\src/interruptions.c ****             // ----- current PID control -----
 769:..\src/interruptions.c **** 
 770:..\src/interruptions.c ****             pwm_input = 0;
 1712              		.loc 1 770 0
 1713 05b0 0023     		movs	r3, #0
 1714 05b2 FB64     		str	r3, [r7, #76]
 771:..\src/interruptions.c **** 
 772:..\src/interruptions.c ****             // Proportional
 773:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 1715              		.loc 1 773 0
 1716 05b4 BB69     		ldr	r3, [r7, #24]
 1717 05b6 002B     		cmp	r3, #0
 1718 05b8 07D0     		beq	.L114
 774:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 1719              		.loc 1 774 0
 1720 05ba BB69     		ldr	r3, [r7, #24]
 1721 05bc 7A68     		ldr	r2, [r7, #4]
 1722 05be 02FB03F3 		mul	r3, r2, r3
 1723 05c2 1B14     		asrs	r3, r3, #16
 1724 05c4 FA6C     		ldr	r2, [r7, #76]
 1725 05c6 1344     		add	r3, r3, r2
 1726 05c8 FB64     		str	r3, [r7, #76]
 1727              	.L114:
 775:..\src/interruptions.c **** 
 776:..\src/interruptions.c ****             // Integral
 777:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 1728              		.loc 1 777 0
 1729 05ca 7B69     		ldr	r3, [r7, #20]
 1730 05cc 002B     		cmp	r3, #0
 1731 05ce 08D0     		beq	.L115
 778:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 1732              		.loc 1 778 0
 1733 05d0 7D4B     		ldr	r3, .L170+8
 1734 05d2 1B68     		ldr	r3, [r3]
 1735 05d4 7A69     		ldr	r2, [r7, #20]
 1736 05d6 02FB03F3 		mul	r3, r2, r3
 1737 05da 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 46


 1738 05dc FA6C     		ldr	r2, [r7, #76]
 1739 05de 1344     		add	r3, r3, r2
 1740 05e0 FB64     		str	r3, [r7, #76]
 1741              	.L115:
 779:..\src/interruptions.c **** 
 780:..\src/interruptions.c ****             // Derivative
 781:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 1742              		.loc 1 781 0
 1743 05e2 3B69     		ldr	r3, [r7, #16]
 1744 05e4 002B     		cmp	r3, #0
 1745 05e6 0AD0     		beq	.L116
 782:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 1746              		.loc 1 782 0
 1747 05e8 7A4B     		ldr	r3, .L170+20
 1748 05ea 1B68     		ldr	r3, [r3]
 1749 05ec 7A68     		ldr	r2, [r7, #4]
 1750 05ee D31A     		subs	r3, r2, r3
 1751 05f0 3A69     		ldr	r2, [r7, #16]
 1752 05f2 02FB03F3 		mul	r3, r2, r3
 1753 05f6 1B14     		asrs	r3, r3, #16
 1754 05f8 FA6C     		ldr	r2, [r7, #76]
 1755 05fa 1344     		add	r3, r3, r2
 1756 05fc FB64     		str	r3, [r7, #76]
 1757              	.L116:
 783:..\src/interruptions.c **** 
 784:..\src/interruptions.c ****             // pwm_input saturation
 785:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 1758              		.loc 1 785 0
 1759 05fe FB6C     		ldr	r3, [r7, #76]
 1760 0600 13F1640F 		cmn	r3, #100
 1761 0604 03DA     		bge	.L117
 786:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 1762              		.loc 1 786 0
 1763 0606 6FF06303 		mvn	r3, #99
 1764 060a FB64     		str	r3, [r7, #76]
 1765 060c 04E0     		b	.L118
 1766              	.L117:
 787:..\src/interruptions.c ****             else {
 788:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 1767              		.loc 1 788 0
 1768 060e FB6C     		ldr	r3, [r7, #76]
 1769 0610 642B     		cmp	r3, #100
 1770 0612 01DD     		ble	.L118
 789:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 1771              		.loc 1 789 0
 1772 0614 6423     		movs	r3, #100
 1773 0616 FB64     		str	r3, [r7, #76]
 1774              	.L118:
 790:..\src/interruptions.c ****             }
 791:..\src/interruptions.c **** 
 792:..\src/interruptions.c ****             // Update previous current
 793:..\src/interruptions.c ****             prev_curr_err = curr_error;
 1775              		.loc 1 793 0
 1776 0618 6E4A     		ldr	r2, .L170+20
 1777 061a 7B68     		ldr	r3, [r7, #4]
 1778 061c 1360     		str	r3, [r2]
 794:..\src/interruptions.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 47


 795:..\src/interruptions.c ****         break;
 1779              		.loc 1 795 0
 1780 061e FBE0     		b	.L97
 1781              	.L98:
 796:..\src/interruptions.c **** 
 797:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
 798:..\src/interruptions.c ****         case CONTROL_ANGLE:
 799:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
 1782              		.loc 1 799 0
 1783 0620 6D4B     		ldr	r3, .L170+24
 1784 0622 1A68     		ldr	r2, [r3]
 1785 0624 674B     		ldr	r3, .L170+4
 1786 0626 1B68     		ldr	r3, [r3]
 1787 0628 D31A     		subs	r3, r2, r3
 1788 062a BB64     		str	r3, [r7, #72]
 800:..\src/interruptions.c **** 
 801:..\src/interruptions.c ****             pos_error_sum += pos_error;
 1789              		.loc 1 801 0
 1790 062c 6B4B     		ldr	r3, .L170+28
 1791 062e 1A68     		ldr	r2, [r3]
 1792 0630 BB6C     		ldr	r3, [r7, #72]
 1793 0632 1344     		add	r3, r3, r2
 1794 0634 694A     		ldr	r2, .L170+28
 1795 0636 1360     		str	r3, [r2]
 802:..\src/interruptions.c **** 
 803:..\src/interruptions.c ****             // anti-windup (for integral control)
 804:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 1796              		.loc 1 804 0
 1797 0638 684B     		ldr	r3, .L170+28
 1798 063a 1B68     		ldr	r3, [r3]
 1799 063c B3F57A7F 		cmp	r3, #1000
 1800 0640 04DD     		ble	.L119
 805:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 1801              		.loc 1 805 0
 1802 0642 664B     		ldr	r3, .L170+28
 1803 0644 4FF47A72 		mov	r2, #1000
 1804 0648 1A60     		str	r2, [r3]
 1805 064a 07E0     		b	.L120
 1806              	.L119:
 806:..\src/interruptions.c ****             else {
 807:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 1807              		.loc 1 807 0
 1808 064c 634B     		ldr	r3, .L170+28
 1809 064e 1B68     		ldr	r3, [r3]
 1810 0650 13F57A7F 		cmn	r3, #1000
 1811 0654 02DA     		bge	.L120
 808:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 1812              		.loc 1 808 0
 1813 0656 614B     		ldr	r3, .L170+28
 1814 0658 614A     		ldr	r2, .L170+32
 1815 065a 1A60     		str	r2, [r3]
 1816              	.L120:
 809:..\src/interruptions.c ****             }
 810:..\src/interruptions.c **** 
 811:..\src/interruptions.c ****             // Proportional
 812:..\src/interruptions.c ****             if (k_p != 0) 
 1817              		.loc 1 812 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 48


 1818 065c FB6B     		ldr	r3, [r7, #60]
 1819 065e 002B     		cmp	r3, #0
 1820 0660 05D0     		beq	.L121
 813:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 1821              		.loc 1 813 0
 1822 0662 FB6B     		ldr	r3, [r7, #60]
 1823 0664 BA6C     		ldr	r2, [r7, #72]
 1824 0666 02FB03F3 		mul	r3, r2, r3
 1825 066a 1B14     		asrs	r3, r3, #16
 1826 066c FB64     		str	r3, [r7, #76]
 1827              	.L121:
 814:..\src/interruptions.c ****             
 815:..\src/interruptions.c **** 
 816:..\src/interruptions.c ****             // Integral
 817:..\src/interruptions.c ****             if (k_i != 0) 
 1828              		.loc 1 817 0
 1829 066e BB6B     		ldr	r3, [r7, #56]
 1830 0670 002B     		cmp	r3, #0
 1831 0672 08D0     		beq	.L122
 818:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 1832              		.loc 1 818 0
 1833 0674 594B     		ldr	r3, .L170+28
 1834 0676 1B68     		ldr	r3, [r3]
 1835 0678 BA6B     		ldr	r2, [r7, #56]
 1836 067a 02FB03F3 		mul	r3, r2, r3
 1837 067e 1B14     		asrs	r3, r3, #16
 1838 0680 FA6C     		ldr	r2, [r7, #76]
 1839 0682 1344     		add	r3, r3, r2
 1840 0684 FB64     		str	r3, [r7, #76]
 1841              	.L122:
 819:..\src/interruptions.c ****             
 820:..\src/interruptions.c **** 
 821:..\src/interruptions.c ****             // Derivative
 822:..\src/interruptions.c ****             if (k_d != 0) 
 1842              		.loc 1 822 0
 1843 0686 7B6B     		ldr	r3, [r7, #52]
 1844 0688 002B     		cmp	r3, #0
 1845 068a 0AD0     		beq	.L123
 823:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 1846              		.loc 1 823 0
 1847 068c 554B     		ldr	r3, .L170+36
 1848 068e 1B68     		ldr	r3, [r3]
 1849 0690 BA6C     		ldr	r2, [r7, #72]
 1850 0692 D31A     		subs	r3, r2, r3
 1851 0694 7A6B     		ldr	r2, [r7, #52]
 1852 0696 02FB03F3 		mul	r3, r2, r3
 1853 069a 1B14     		asrs	r3, r3, #16
 1854 069c FA6C     		ldr	r2, [r7, #76]
 1855 069e 1344     		add	r3, r3, r2
 1856 06a0 FB64     		str	r3, [r7, #76]
 1857              	.L123:
 824:..\src/interruptions.c ****             
 825:..\src/interruptions.c **** 
 826:..\src/interruptions.c ****             // Update measure
 827:..\src/interruptions.c ****             prev_pos_err = pos_error;
 1858              		.loc 1 827 0
 1859 06a2 504A     		ldr	r2, .L170+36
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 49


 1860 06a4 BB6C     		ldr	r3, [r7, #72]
 1861 06a6 1360     		str	r3, [r2]
 828:..\src/interruptions.c **** 
 829:..\src/interruptions.c ****             if (pwm_input > 0)
 1862              		.loc 1 829 0
 1863 06a8 FB6C     		ldr	r3, [r7, #76]
 1864 06aa 002B     		cmp	r3, #0
 1865 06ac 03DD     		ble	.L124
 830:..\src/interruptions.c ****                 motor_dir = TRUE;
 1866              		.loc 1 830 0
 1867 06ae 4E4B     		ldr	r3, .L170+40
 1868 06b0 0122     		movs	r2, #1
 1869 06b2 1A70     		strb	r2, [r3]
 831:..\src/interruptions.c ****             else
 832:..\src/interruptions.c ****                 motor_dir = FALSE;
 833:..\src/interruptions.c **** 
 834:..\src/interruptions.c ****         break;
 1870              		.loc 1 834 0
 1871 06b4 B0E0     		b	.L97
 1872              	.L124:
 832:..\src/interruptions.c **** 
 1873              		.loc 1 832 0
 1874 06b6 4C4B     		ldr	r3, .L170+40
 1875 06b8 0022     		movs	r2, #0
 1876 06ba 1A70     		strb	r2, [r3]
 1877              		.loc 1 834 0
 1878 06bc ACE0     		b	.L97
 1879              	.L101:
 835:..\src/interruptions.c **** 
 836:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
 837:..\src/interruptions.c ****         case CONTROL_CURRENT:
 838:..\src/interruptions.c ****             if(g_ref.onoff && tension_valid) {
 1880              		.loc 1 838 0
 1881 06be 464B     		ldr	r3, .L170+24
 1882 06c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1883 06c2 002B     		cmp	r3, #0
 1884 06c4 00F0A580 		beq	.L164
 1885              		.loc 1 838 0 is_stmt 0 discriminator 1
 1886 06c8 484B     		ldr	r3, .L170+44
 1887 06ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1888 06cc 002B     		cmp	r3, #0
 1889 06ce 00F0A080 		beq	.L164
 839:..\src/interruptions.c ****                 
 840:..\src/interruptions.c ****                 i_ref = g_ref.curr;
 1890              		.loc 1 840 0 is_stmt 1
 1891 06d2 414B     		ldr	r3, .L170+24
 1892 06d4 5B68     		ldr	r3, [r3, #4]
 1893 06d6 7B64     		str	r3, [r7, #68]
 841:..\src/interruptions.c **** 
 842:..\src/interruptions.c ****                 if (i_ref > c_mem.current_limit) 
 1894              		.loc 1 842 0
 1895 06d8 394B     		ldr	r3, .L170
 1896 06da B3F90831 		ldrsh	r3, [r3, #264]
 1897 06de 1A46     		mov	r2, r3
 1898 06e0 7B6C     		ldr	r3, [r7, #68]
 1899 06e2 9A42     		cmp	r2, r3
 1900 06e4 04DA     		bge	.L127
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 50


 843:..\src/interruptions.c ****                     i_ref = c_mem.current_limit;
 1901              		.loc 1 843 0
 1902 06e6 364B     		ldr	r3, .L170
 1903 06e8 B3F90831 		ldrsh	r3, [r3, #264]
 1904 06ec 7B64     		str	r3, [r7, #68]
 1905 06ee 0BE0     		b	.L128
 1906              	.L127:
 844:..\src/interruptions.c ****                 else {
 845:..\src/interruptions.c ****                     if (i_ref < -c_mem.current_limit)
 1907              		.loc 1 845 0
 1908 06f0 334B     		ldr	r3, .L170
 1909 06f2 B3F90831 		ldrsh	r3, [r3, #264]
 1910 06f6 5A42     		negs	r2, r3
 1911 06f8 7B6C     		ldr	r3, [r7, #68]
 1912 06fa 9A42     		cmp	r2, r3
 1913 06fc 04DD     		ble	.L128
 846:..\src/interruptions.c ****                         i_ref = -c_mem.current_limit;
 1914              		.loc 1 846 0
 1915 06fe 304B     		ldr	r3, .L170
 1916 0700 B3F90831 		ldrsh	r3, [r3, #264]
 1917 0704 5B42     		negs	r3, r3
 1918 0706 7B64     		str	r3, [r7, #68]
 1919              	.L128:
 847:..\src/interruptions.c ****                 }
 848:..\src/interruptions.c ****                 
 849:..\src/interruptions.c ****                 // current error
 850:..\src/interruptions.c ****                 curr_error = i_ref - g_meas.curr[0];            
 1920              		.loc 1 850 0
 1921 0708 2E4B     		ldr	r3, .L170+4
 1922 070a DB68     		ldr	r3, [r3, #12]
 1923 070c 7A6C     		ldr	r2, [r7, #68]
 1924 070e D31A     		subs	r3, r2, r3
 1925 0710 7B60     		str	r3, [r7, #4]
 851:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 1926              		.loc 1 851 0
 1927 0712 2D4B     		ldr	r3, .L170+8
 1928 0714 1A68     		ldr	r2, [r3]
 1929 0716 7B68     		ldr	r3, [r7, #4]
 1930 0718 1344     		add	r3, r3, r2
 1931 071a 2B4A     		ldr	r2, .L170+8
 1932 071c 1360     		str	r3, [r2]
 852:..\src/interruptions.c ****                 
 853:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 1933              		.loc 1 853 0
 1934 071e 2A4B     		ldr	r3, .L170+8
 1935 0720 1B68     		ldr	r3, [r3]
 1936 0722 2A4A     		ldr	r2, .L170+12
 1937 0724 9342     		cmp	r3, r2
 1938 0726 03DD     		ble	.L129
 854:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 1939              		.loc 1 854 0
 1940 0728 274B     		ldr	r3, .L170+8
 1941 072a 284A     		ldr	r2, .L170+12
 1942 072c 1A60     		str	r2, [r3]
 1943 072e 07E0     		b	.L130
 1944              	.L129:
 855:..\src/interruptions.c ****                 else {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 51


 856:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 1945              		.loc 1 856 0
 1946 0730 254B     		ldr	r3, .L170+8
 1947 0732 1B68     		ldr	r3, [r3]
 1948 0734 264A     		ldr	r2, .L170+16
 1949 0736 9342     		cmp	r3, r2
 1950 0738 02DA     		bge	.L130
 857:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 1951              		.loc 1 857 0
 1952 073a 234B     		ldr	r3, .L170+8
 1953 073c 244A     		ldr	r2, .L170+16
 1954 073e 1A60     		str	r2, [r3]
 1955              	.L130:
 858:..\src/interruptions.c ****                 }
 859:..\src/interruptions.c **** 
 860:..\src/interruptions.c ****                 pwm_input = 0;
 1956              		.loc 1 860 0
 1957 0740 0023     		movs	r3, #0
 1958 0742 FB64     		str	r3, [r7, #76]
 861:..\src/interruptions.c **** 
 862:..\src/interruptions.c ****                 // Proportional
 863:..\src/interruptions.c ****                 if (k_p_c != 0)
 1959              		.loc 1 863 0
 1960 0744 3B6B     		ldr	r3, [r7, #48]
 1961 0746 002B     		cmp	r3, #0
 1962 0748 07D0     		beq	.L131
 864:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 1963              		.loc 1 864 0
 1964 074a 3B6B     		ldr	r3, [r7, #48]
 1965 074c 7A68     		ldr	r2, [r7, #4]
 1966 074e 02FB03F3 		mul	r3, r2, r3
 1967 0752 1B14     		asrs	r3, r3, #16
 1968 0754 FA6C     		ldr	r2, [r7, #76]
 1969 0756 1344     		add	r3, r3, r2
 1970 0758 FB64     		str	r3, [r7, #76]
 1971              	.L131:
 865:..\src/interruptions.c **** 
 866:..\src/interruptions.c ****                 // Integral
 867:..\src/interruptions.c ****                 if (k_i_c != 0)
 1972              		.loc 1 867 0
 1973 075a FB6A     		ldr	r3, [r7, #44]
 1974 075c 002B     		cmp	r3, #0
 1975 075e 08D0     		beq	.L132
 868:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 1976              		.loc 1 868 0
 1977 0760 194B     		ldr	r3, .L170+8
 1978 0762 1B68     		ldr	r3, [r3]
 1979 0764 FA6A     		ldr	r2, [r7, #44]
 1980 0766 02FB03F3 		mul	r3, r2, r3
 1981 076a 1B14     		asrs	r3, r3, #16
 1982 076c FA6C     		ldr	r2, [r7, #76]
 1983 076e 1344     		add	r3, r3, r2
 1984 0770 FB64     		str	r3, [r7, #76]
 1985              	.L132:
 869:..\src/interruptions.c **** 
 870:..\src/interruptions.c ****                 // Derivative
 871:..\src/interruptions.c ****                 if (k_d_c != 0)
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 52


 1986              		.loc 1 871 0
 1987 0772 BB6A     		ldr	r3, [r7, #40]
 1988 0774 002B     		cmp	r3, #0
 1989 0776 0AD0     		beq	.L133
 872:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 1990              		.loc 1 872 0
 1991 0778 164B     		ldr	r3, .L170+20
 1992 077a 1B68     		ldr	r3, [r3]
 1993 077c 7A68     		ldr	r2, [r7, #4]
 1994 077e D31A     		subs	r3, r2, r3
 1995 0780 BA6A     		ldr	r2, [r7, #40]
 1996 0782 02FB03F3 		mul	r3, r2, r3
 1997 0786 1B14     		asrs	r3, r3, #16
 1998 0788 FA6C     		ldr	r2, [r7, #76]
 1999 078a 1344     		add	r3, r3, r2
 2000 078c FB64     		str	r3, [r7, #76]
 2001              	.L133:
 873:..\src/interruptions.c ****                 
 874:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 2002              		.loc 1 874 0
 2003 078e 114A     		ldr	r2, .L170+20
 2004 0790 7B68     		ldr	r3, [r7, #4]
 2005 0792 1360     		str	r3, [r2]
 875:..\src/interruptions.c ****                 
 876:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 2006              		.loc 1 876 0
 2007 0794 FB6C     		ldr	r3, [r7, #76]
 2008 0796 002B     		cmp	r3, #0
 2009 0798 03DB     		blt	.L134
 877:..\src/interruptions.c ****                     motor_dir = TRUE;
 2010              		.loc 1 877 0
 2011 079a 134B     		ldr	r3, .L170+40
 2012 079c 0122     		movs	r2, #1
 2013 079e 1A70     		strb	r2, [r3]
 878:..\src/interruptions.c ****                 else
 879:..\src/interruptions.c ****                     motor_dir = FALSE;
 880:..\src/interruptions.c ****             }
 881:..\src/interruptions.c ****         break;
 2014              		.loc 1 881 0
 2015 07a0 37E0     		b	.L164
 2016              	.L134:
 879:..\src/interruptions.c ****             }
 2017              		.loc 1 879 0
 2018 07a2 114B     		ldr	r3, .L170+40
 2019 07a4 0022     		movs	r2, #0
 2020 07a6 1A70     		strb	r2, [r3]
 2021              		.loc 1 881 0
 2022 07a8 33E0     		b	.L164
 2023              	.L100:
 882:..\src/interruptions.c ****         
 883:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
 884:..\src/interruptions.c ****         case CONTROL_PWM:
 885:..\src/interruptions.c **** 
 886:..\src/interruptions.c ****             pwm_input = g_ref.pwm;
 2024              		.loc 1 886 0
 2025 07aa 0B4B     		ldr	r3, .L170+24
 2026 07ac 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 53


 2027 07ae FB64     		str	r3, [r7, #76]
 887:..\src/interruptions.c **** 
 888:..\src/interruptions.c ****             if (pwm_input > 0) 
 2028              		.loc 1 888 0
 2029 07b0 FB6C     		ldr	r3, [r7, #76]
 2030 07b2 002B     		cmp	r3, #0
 2031 07b4 1CDD     		ble	.L135
 889:..\src/interruptions.c ****                 motor_dir = TRUE;
 2032              		.loc 1 889 0
 2033 07b6 0C4B     		ldr	r3, .L170+40
 2034 07b8 0122     		movs	r2, #1
 2035 07ba 1A70     		strb	r2, [r3]
 2036 07bc 1BE0     		b	.L136
 2037              	.L171:
 2038 07be 00BF     		.align	2
 2039              	.L170:
 2040 07c0 00000000 		.word	c_mem
 2041 07c4 00000000 		.word	g_meas
 2042 07c8 9C000000 		.word	curr_error_sum.10305
 2043 07cc A0860100 		.word	100000
 2044 07d0 6079FEFF 		.word	-100000
 2045 07d4 A0000000 		.word	prev_curr_err.10307
 2046 07d8 00000000 		.word	g_ref
 2047 07dc 90000000 		.word	pos_error_sum.10304
 2048 07e0 18FCFFFF 		.word	-1000
 2049 07e4 94000000 		.word	prev_pos_err.10306
 2050 07e8 98000000 		.word	motor_dir.10309
 2051 07ec 00000000 		.word	tension_valid
 2052              	.L135:
 890:..\src/interruptions.c ****             else 
 891:..\src/interruptions.c ****                 motor_dir = FALSE;
 2053              		.loc 1 891 0
 2054 07f0 664B     		ldr	r3, .L172
 2055 07f2 0022     		movs	r2, #0
 2056 07f4 1A70     		strb	r2, [r3]
 2057              	.L136:
 892:..\src/interruptions.c ****             
 893:..\src/interruptions.c **** 
 894:..\src/interruptions.c ****             // pwm_input saturation
 895:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2058              		.loc 1 895 0
 2059 07f6 FB6C     		ldr	r3, [r7, #76]
 2060 07f8 13F1640F 		cmn	r3, #100
 2061 07fc 03DA     		bge	.L137
 896:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2062              		.loc 1 896 0
 2063 07fe 6FF06303 		mvn	r3, #99
 2064 0802 FB64     		str	r3, [r7, #76]
 897:..\src/interruptions.c ****             else {
 898:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
 899:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 900:..\src/interruptions.c ****         	}
 901:..\src/interruptions.c **** 
 902:..\src/interruptions.c ****         break;
 2065              		.loc 1 902 0
 2066 0804 07E0     		b	.L165
 2067              	.L137:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 54


 898:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 2068              		.loc 1 898 0
 2069 0806 FB6C     		ldr	r3, [r7, #76]
 2070 0808 642B     		cmp	r3, #100
 2071 080a 04DD     		ble	.L165
 899:..\src/interruptions.c ****         	}
 2072              		.loc 1 899 0
 2073 080c 6423     		movs	r3, #100
 2074 080e FB64     		str	r3, [r7, #76]
 2075              		.loc 1 902 0
 2076 0810 01E0     		b	.L165
 2077              	.L164:
 881:..\src/interruptions.c ****         
 2078              		.loc 1 881 0
 2079 0812 00BF     		nop
 2080 0814 00E0     		b	.L97
 2081              	.L165:
 2082              		.loc 1 902 0
 2083 0816 00BF     		nop
 2084              	.L97:
 903:..\src/interruptions.c ****             
 904:..\src/interruptions.c ****     }
 905:..\src/interruptions.c **** 
 906:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
 907:..\src/interruptions.c **** 
 908:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2085              		.loc 1 908 0
 2086 0818 FB6C     		ldr	r3, [r7, #76]
 2087 081a 642B     		cmp	r3, #100
 2088 081c 01DD     		ble	.L139
 909:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2089              		.loc 1 909 0
 2090 081e 6423     		movs	r3, #100
 2091 0820 FB64     		str	r3, [r7, #76]
 2092              	.L139:
 910:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2093              		.loc 1 910 0
 2094 0822 FB6C     		ldr	r3, [r7, #76]
 2095 0824 13F1640F 		cmn	r3, #100
 2096 0828 02DA     		bge	.L140
 911:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2097              		.loc 1 911 0
 2098 082a 6FF06303 		mvn	r3, #99
 2099 082e FB64     		str	r3, [r7, #76]
 2100              	.L140:
 912:..\src/interruptions.c **** 
 913:..\src/interruptions.c ****     if (c_mem.control_mode != CONTROL_PWM) 
 2101              		.loc 1 913 0
 2102 0830 574B     		ldr	r3, .L172+4
 2103 0832 93F8D630 		ldrb	r3, [r3, #214]	@ zero_extendqisi2
 2104 0836 012B     		cmp	r3, #1
 2105 0838 0DD0     		beq	.L141
 914:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
 2106              		.loc 1 914 0
 2107 083a FB6C     		ldr	r3, [r7, #76]
 2108 083c 9B02     		lsls	r3, r3, #10
 2109 083e 554A     		ldr	r2, .L172+8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 55


 2110 0840 82FB0312 		smull	r1, r2, r2, r3
 2111 0844 5211     		asrs	r2, r2, #5
 2112 0846 DB17     		asrs	r3, r3, #31
 2113 0848 D31A     		subs	r3, r2, r3
 2114 084a 534A     		ldr	r2, .L172+12
 2115 084c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2116 084e 02FB03F3 		mul	r3, r2, r3
 2117 0852 9B12     		asrs	r3, r3, #10
 2118 0854 FB64     		str	r3, [r7, #76]
 2119              	.L141:
 915:..\src/interruptions.c ****  
 916:..\src/interruptions.c ****     //// RATE LIMITER ////
 917:..\src/interruptions.c ****     if(SIGN(pwm_input-prev_pwm) == SIGN(pos_error))
 2120              		.loc 1 917 0
 2121 0856 514B     		ldr	r3, .L172+16
 2122 0858 1B68     		ldr	r3, [r3]
 2123 085a FA6C     		ldr	r2, [r7, #76]
 2124 085c D31A     		subs	r3, r2, r3
 2125 085e 002B     		cmp	r3, #0
 2126 0860 01DB     		blt	.L142
 2127              		.loc 1 917 0 is_stmt 0 discriminator 1
 2128 0862 0122     		movs	r2, #1
 2129 0864 01E0     		b	.L143
 2130              	.L142:
 2131              		.loc 1 917 0 discriminator 2
 2132 0866 4FF0FF32 		mov	r2, #-1
 2133              	.L143:
 2134              		.loc 1 917 0 discriminator 4
 2135 086a BB6C     		ldr	r3, [r7, #72]
 2136 086c 002B     		cmp	r3, #0
 2137 086e 01DB     		blt	.L144
 2138              		.loc 1 917 0 discriminator 5
 2139 0870 0123     		movs	r3, #1
 2140 0872 01E0     		b	.L145
 2141              	.L144:
 2142              		.loc 1 917 0 discriminator 6
 2143 0874 4FF0FF33 		mov	r3, #-1
 2144              	.L145:
 2145              		.loc 1 917 0 discriminator 8
 2146 0878 9A42     		cmp	r2, r3
 2147 087a 14D1     		bne	.L146
 918:..\src/interruptions.c ****     {
 919:..\src/interruptions.c ****         if((pwm_input-prev_pwm) > PWM_RATE_LIMITER_MAX)
 2148              		.loc 1 919 0 is_stmt 1
 2149 087c 474B     		ldr	r3, .L172+16
 2150 087e 1B68     		ldr	r3, [r3]
 2151 0880 FA6C     		ldr	r2, [r7, #76]
 2152 0882 D31A     		subs	r3, r2, r3
 2153 0884 012B     		cmp	r3, #1
 2154 0886 03DD     		ble	.L147
 920:..\src/interruptions.c ****             pwm_input =  prev_pwm + PWM_RATE_LIMITER_MAX;
 2155              		.loc 1 920 0
 2156 0888 444B     		ldr	r3, .L172+16
 2157 088a 1B68     		ldr	r3, [r3]
 2158 088c 0133     		adds	r3, r3, #1
 2159 088e FB64     		str	r3, [r7, #76]
 2160              	.L147:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 56


 921:..\src/interruptions.c ****     
 922:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -PWM_RATE_LIMITER_MAX)
 2161              		.loc 1 922 0
 2162 0890 424B     		ldr	r3, .L172+16
 2163 0892 1B68     		ldr	r3, [r3]
 2164 0894 FA6C     		ldr	r2, [r7, #76]
 2165 0896 D31A     		subs	r3, r2, r3
 2166 0898 B3F1FF3F 		cmp	r3, #-1
 2167 089c 03DA     		bge	.L146
 923:..\src/interruptions.c ****             pwm_input =  prev_pwm - PWM_RATE_LIMITER_MAX;
 2168              		.loc 1 923 0
 2169 089e 3F4B     		ldr	r3, .L172+16
 2170 08a0 1B68     		ldr	r3, [r3]
 2171 08a2 013B     		subs	r3, r3, #1
 2172 08a4 FB64     		str	r3, [r7, #76]
 2173              	.L146:
 924:..\src/interruptions.c ****     }
 925:..\src/interruptions.c ****     
 926:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 2174              		.loc 1 926 0
 2175 08a6 FB6C     		ldr	r3, [r7, #76]
 2176 08a8 642B     		cmp	r3, #100
 2177 08aa 01DD     		ble	.L148
 927:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 2178              		.loc 1 927 0
 2179 08ac 6423     		movs	r3, #100
 2180 08ae FB64     		str	r3, [r7, #76]
 2181              	.L148:
 928:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 2182              		.loc 1 928 0
 2183 08b0 FB6C     		ldr	r3, [r7, #76]
 2184 08b2 13F1640F 		cmn	r3, #100
 2185 08b6 02DA     		bge	.L149
 929:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 2186              		.loc 1 929 0
 2187 08b8 6FF06303 		mvn	r3, #99
 2188 08bc FB64     		str	r3, [r7, #76]
 2189              	.L149:
 930:..\src/interruptions.c ****     
 931:..\src/interruptions.c ****     prev_pwm = pwm_input;
 2190              		.loc 1 931 0
 2191 08be 374A     		ldr	r2, .L172+16
 2192 08c0 FB6C     		ldr	r3, [r7, #76]
 2193 08c2 1360     		str	r3, [r2]
 932:..\src/interruptions.c **** 	
 933:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 2194              		.loc 1 933 0
 2195 08c4 FB6C     		ldr	r3, [r7, #76]
 2196 08c6 002B     		cmp	r3, #0
 2197 08c8 01DB     		blt	.L150
 2198              		.loc 1 933 0 is_stmt 0 discriminator 1
 2199 08ca 0122     		movs	r2, #1
 2200 08cc 01E0     		b	.L151
 2201              	.L150:
 2202              		.loc 1 933 0 discriminator 2
 2203 08ce 4FF0FF32 		mov	r2, #-1
 2204              	.L151:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 57


 2205              		.loc 1 933 0 discriminator 4
 2206 08d2 334B     		ldr	r3, .L172+20
 2207 08d4 1A70     		strb	r2, [r3]
 934:..\src/interruptions.c ****     
 935:..\src/interruptions.c ****     // Block motor with pwm = 0 to exploit not reversible motor behaviour 
 936:..\src/interruptions.c **** 	if ( c_mem.control_mode != CONTROL_PWM && ((g_measOld.pos[0]-g_meas.pos[0]) < 50 && (g_measOld.pos
 2208              		.loc 1 936 0 is_stmt 1 discriminator 4
 2209 08d6 2E4B     		ldr	r3, .L172+4
 2210 08d8 93F8D630 		ldrb	r3, [r3, #214]	@ zero_extendqisi2
 2211 08dc 012B     		cmp	r3, #1
 2212 08de 3AD0     		beq	.L152
 2213              		.loc 1 936 0 is_stmt 0 discriminator 1
 2214 08e0 304B     		ldr	r3, .L172+24
 2215 08e2 1A68     		ldr	r2, [r3]
 2216 08e4 304B     		ldr	r3, .L172+28
 2217 08e6 1B68     		ldr	r3, [r3]
 2218 08e8 D31A     		subs	r3, r2, r3
 2219 08ea 312B     		cmp	r3, #49
 2220 08ec 33DC     		bgt	.L152
 2221              		.loc 1 936 0 discriminator 2
 2222 08ee 2D4B     		ldr	r3, .L172+24
 2223 08f0 1A68     		ldr	r2, [r3]
 2224 08f2 2D4B     		ldr	r3, .L172+28
 2225 08f4 1B68     		ldr	r3, [r3]
 2226 08f6 D31A     		subs	r3, r2, r3
 2227 08f8 13F1310F 		cmn	r3, #49
 2228 08fc 2BDB     		blt	.L152
 2229              		.loc 1 936 0 discriminator 3
 2230 08fe 2B4B     		ldr	r3, .L172+32
 2231 0900 1A68     		ldr	r2, [r3]
 2232 0902 2B4B     		ldr	r3, .L172+36
 2233 0904 1B68     		ldr	r3, [r3]
 2234 0906 D31A     		subs	r3, r2, r3
 2235 0908 632B     		cmp	r3, #99
 2236 090a 24DC     		bgt	.L152
 2237              		.loc 1 936 0 discriminator 4
 2238 090c 274B     		ldr	r3, .L172+32
 2239 090e 1A68     		ldr	r2, [r3]
 2240 0910 274B     		ldr	r3, .L172+36
 2241 0912 1B68     		ldr	r3, [r3]
 2242 0914 D31A     		subs	r3, r2, r3
 2243 0916 13F1630F 		cmn	r3, #99
 2244 091a 1CDB     		blt	.L152
 937:..\src/interruptions.c ****         position_counter++;
 2245              		.loc 1 937 0 is_stmt 1
 2246 091c 254B     		ldr	r3, .L172+40
 2247 091e 1B68     		ldr	r3, [r3]
 2248 0920 0133     		adds	r3, r3, #1
 2249 0922 244A     		ldr	r2, .L172+40
 2250 0924 1360     		str	r3, [r2]
 938:..\src/interruptions.c ****         
 939:..\src/interruptions.c ****         if (position_counter > 250) { 
 2251              		.loc 1 939 0
 2252 0926 234B     		ldr	r3, .L172+40
 2253 0928 1B68     		ldr	r3, [r3]
 2254 092a FA2B     		cmp	r3, #250
 2255 092c 16D9     		bls	.L155
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 58


 940:..\src/interruptions.c ****             if (c_mem.input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2256              		.loc 1 940 0
 2257 092e 184B     		ldr	r3, .L172+4
 2258 0930 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 2259 0934 002B     		cmp	r3, #0
 2260 0936 07D1     		bne	.L154
 2261              		.loc 1 940 0 is_stmt 0 discriminator 1
 2262 0938 1F4B     		ldr	r3, .L172+44
 2263 093a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2264 093c 002B     		cmp	r3, #0
 2265 093e 03D1     		bne	.L154
 941:..\src/interruptions.c ****                 g_refNew.pos = g_meas.pos[0];       // Needed only when USB input mode is used, sin
 2266              		.loc 1 941 0 is_stmt 1
 2267 0940 194B     		ldr	r3, .L172+28
 2268 0942 1B68     		ldr	r3, [r3]
 2269 0944 1D4A     		ldr	r2, .L172+48
 2270 0946 1360     		str	r3, [r2]
 2271              	.L154:
 942:..\src/interruptions.c ****             }
 943:..\src/interruptions.c ****             g_ref.pos = g_meas.pos[0];
 2272              		.loc 1 943 0
 2273 0948 174B     		ldr	r3, .L172+28
 2274 094a 1B68     		ldr	r3, [r3]
 2275 094c 184A     		ldr	r2, .L172+36
 2276 094e 1360     		str	r3, [r2]
 944:..\src/interruptions.c ****             pwm_input = 0;            
 2277              		.loc 1 944 0
 2278 0950 0023     		movs	r3, #0
 2279 0952 FB64     		str	r3, [r7, #76]
 939:..\src/interruptions.c ****             if (c_mem.input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 2280              		.loc 1 939 0
 2281 0954 02E0     		b	.L155
 2282              	.L152:
 945:..\src/interruptions.c ****         }
 946:..\src/interruptions.c ****     }
 947:..\src/interruptions.c ****     else {
 948:..\src/interruptions.c ****         position_counter = 0;
 2283              		.loc 1 948 0
 2284 0956 174B     		ldr	r3, .L172+40
 2285 0958 0022     		movs	r2, #0
 2286 095a 1A60     		str	r2, [r3]
 2287              	.L155:
 949:..\src/interruptions.c ****     }
 950:..\src/interruptions.c ****     
 951:..\src/interruptions.c ****     if (motor_dir)
 2288              		.loc 1 951 0
 2289 095c 0B4B     		ldr	r3, .L172
 2290 095e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2291 0960 002B     		cmp	r3, #0
 2292 0962 03D0     		beq	.L156
 952:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 2293              		.loc 1 952 0
 2294 0964 0120     		movs	r0, #1
 2295 0966 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2296 096a 02E0     		b	.L157
 2297              	.L156:
 953:..\src/interruptions.c ****     else
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 59


 954:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 2298              		.loc 1 954 0
 2299 096c 0020     		movs	r0, #0
 2300 096e FFF7FEFF 		bl	MOTOR_DIR_1_Write
 2301              	.L157:
 955:..\src/interruptions.c **** 
 956:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 2302              		.loc 1 956 0
 2303 0972 FB6C     		ldr	r3, [r7, #76]
 2304 0974 002B     		cmp	r3, #0
 2305 0976 B8BF     		it	lt
 2306 0978 5B42     		rsblt	r3, r3, #0
 2307 097a DBB2     		uxtb	r3, r3
 2308 097c 1846     		mov	r0, r3
 2309 097e FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
 957:..\src/interruptions.c **** }
 2310              		.loc 1 957 0
 2311 0982 00BF     		nop
 2312 0984 5037     		adds	r7, r7, #80
 2313              		.cfi_def_cfa_offset 8
 2314 0986 BD46     		mov	sp, r7
 2315              		.cfi_def_cfa_register 13
 2316              		@ sp needed
 2317 0988 80BD     		pop	{r7, pc}
 2318              	.L173:
 2319 098a 00BF     		.align	2
 2320              	.L172:
 2321 098c 98000000 		.word	motor_dir.10309
 2322 0990 00000000 		.word	c_mem
 2323 0994 1F85EB51 		.word	1374389535
 2324 0998 00000000 		.word	dev_pwm_limit
 2325 099c A4000000 		.word	prev_pwm.10308
 2326 09a0 00000000 		.word	pwm_sign
 2327 09a4 00000000 		.word	g_measOld
 2328 09a8 00000000 		.word	g_meas
 2329 09ac 00000000 		.word	g_refOld
 2330 09b0 00000000 		.word	g_ref
 2331 09b4 A8000000 		.word	position_counter.10310
 2332 09b8 00000000 		.word	change_ext_ref_flag
 2333 09bc 00000000 		.word	g_refNew
 2334              		.cfi_endproc
 2335              	.LFE68:
 2336              		.size	motor_control_SH, .-motor_control_SH
 2337              		.section	.text.motor_control_generic,"ax",%progbits
 2338              		.align	2
 2339              		.global	motor_control_generic
 2340              		.thumb
 2341              		.thumb_func
 2342              		.type	motor_control_generic, %function
 2343              	motor_control_generic:
 2344              	.LFB69:
 958:..\src/interruptions.c **** 
 959:..\src/interruptions.c **** //==============================================================================
 960:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
 961:..\src/interruptions.c **** //==============================================================================
 962:..\src/interruptions.c **** 
 963:..\src/interruptions.c **** void motor_control_generic(uint8 index) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 60


 2345              		.loc 1 963 0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 8
 2348              		@ frame_needed = 1, uses_anonymous_args = 0
 2349              		@ link register save eliminated.
 2350 0000 80B4     		push	{r7}
 2351              		.cfi_def_cfa_offset 4
 2352              		.cfi_offset 7, -4
 2353 0002 83B0     		sub	sp, sp, #12
 2354              		.cfi_def_cfa_offset 16
 2355 0004 00AF     		add	r7, sp, #0
 2356              		.cfi_def_cfa_register 7
 2357 0006 0346     		mov	r3, r0
 2358 0008 FB71     		strb	r3, [r7, #7]
 964:..\src/interruptions.c **** /*
 965:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 966:..\src/interruptions.c **** 
 967:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 968:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 969:..\src/interruptions.c **** 
 970:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 971:..\src/interruptions.c ****     int32 CYDATA handle_value;
 972:..\src/interruptions.c **** 
 973:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 974:..\src/interruptions.c **** 
 975:..\src/interruptions.c ****     int32 CYDATA k_p = c_mem.k_p;  
 976:..\src/interruptions.c ****     int32 CYDATA k_i = c_mem.k_i; 
 977:..\src/interruptions.c ****     int32 CYDATA k_d = c_mem.k_d; 
 978:..\src/interruptions.c **** 
 979:..\src/interruptions.c ****     int32 CYDATA k_p_c = c_mem.k_p_c;  
 980:..\src/interruptions.c ****     int32 CYDATA k_i_c = c_mem.k_i_c; 
 981:..\src/interruptions.c ****     int32 CYDATA k_d_c = c_mem.k_d_c;   
 982:..\src/interruptions.c **** 
 983:..\src/interruptions.c ****     int32 CYDATA k_p_dl = c_mem.k_p_dl;  
 984:..\src/interruptions.c ****     int32 CYDATA k_i_dl = c_mem.k_i_dl; 
 985:..\src/interruptions.c ****     int32 CYDATA k_d_dl = c_mem.k_d_dl;
 986:..\src/interruptions.c ****     
 987:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = c_mem.k_p_c_dl;  
 988:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = c_mem.k_i_c_dl; 
 989:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = c_mem.k_d_c_dl;   
 990:..\src/interruptions.c **** 
 991:..\src/interruptions.c ****     // Static Variables
 992:..\src/interruptions.c **** 
 993:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 994:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 995:..\src/interruptions.c ****     
 996:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 997:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 998:..\src/interruptions.c ****     static int32 prev_pwm;
 999:..\src/interruptions.c **** 
1000:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1001:..\src/interruptions.c ****     static uint32 position_counter = 0;
1002:..\src/interruptions.c ****     static uint8 current_emg = 0;   // 0 NONE
1003:..\src/interruptions.c ****                                     // 1 EMG 1
1004:..\src/interruptions.c ****                                     // 2 EMG 2
1005:..\src/interruptions.c ****                                     // wait for both to get down
1006:..\src/interruptions.c ****     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 61


1007:..\src/interruptions.c **** 
1008:..\src/interruptions.c ****     err_emg_1 = g_meas.emg[0] - c_mem.emg_threshold[0];
1009:..\src/interruptions.c ****     err_emg_2 = g_meas.emg[1] - c_mem.emg_threshold[1];
1010:..\src/interruptions.c **** */
1011:..\src/interruptions.c ****     // =========================== POSITION INPUT ==============================            
1012:..\src/interruptions.c ****     switch(c_mem.input_mode) {
1013:..\src/interruptions.c **** /*        case INPUT_MODE_ENCODER3:
1014:..\src/interruptions.c **** 
1015:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
1016:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
1017:..\src/interruptions.c ****             if (c_mem.double_encoder_on_off) 
1018:..\src/interruptions.c ****                 handle_value = (g_meas.pos[2] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
1019:..\src/interruptions.c ****             else
1020:..\src/interruptions.c ****                 handle_value = (g_meas.pos[1] * c_mem.motor_handle_ratio) + g_mem.pos_lim_inf;
1021:..\src/interruptions.c ****             
1022:..\src/interruptions.c **** 
1023:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
1024:..\src/interruptions.c ****             if (((handle_value - g_refOld.pos) > c_mem.max_step_pos) && (c_mem.max_step_pos != 0))
1025:..\src/interruptions.c ****                 g_ref.pos += c_mem.max_step_pos;
1026:..\src/interruptions.c ****             else {
1027:..\src/interruptions.c ****                 if (((handle_value - g_refOld.pos) < c_mem.max_step_neg) && (c_mem.max_step_neg != 
1028:..\src/interruptions.c ****                     g_ref.pos += c_mem.max_step_neg;
1029:..\src/interruptions.c ****                 else
1030:..\src/interruptions.c ****                     g_ref.pos = handle_value;
1031:..\src/interruptions.c ****             }
1032:..\src/interruptions.c ****             break;
1033:..\src/interruptions.c ****             
1034:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
1035:..\src/interruptions.c ****             if (err_emg_1 > 0)
1036:..\src/interruptions.c ****                 g_ref.pos = (err_emg_1 * g_mem.pos_lim_sup) / (1024 - c_mem.emg_threshold[0]);
1037:..\src/interruptions.c ****             else
1038:..\src/interruptions.c ****                 g_ref.pos = 0;
1039:..\src/interruptions.c ****             break;
1040:..\src/interruptions.c **** 
1041:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
1042:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
1043:..\src/interruptions.c ****             if (err_emg_1 > 0) {
1044:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos + (err_emg_1 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
1045:..\src/interruptions.c ****             }
1046:..\src/interruptions.c ****             if (err_emg_2 > 0) {
1047:..\src/interruptions.c ****                 g_ref.pos = g_refOld.pos - (err_emg_2 * (int)g_mem.emg_speed * 2) / (1024 - c_mem.e
1048:..\src/interruptions.c ****             }
1049:..\src/interruptions.c ****             break;
1050:..\src/interruptions.c **** 
1051:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
1052:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
1053:..\src/interruptions.c ****             switch (current_emg) {
1054:..\src/interruptions.c ****                 case 0:
1055:..\src/interruptions.c ****                     // Look for the first EMG passing the threshold
1056:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1057:..\src/interruptions.c ****                         current_emg = 1;
1058:..\src/interruptions.c ****                         break;
1059:..\src/interruptions.c ****                     }
1060:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1061:..\src/interruptions.c ****                         current_emg = 2;
1062:..\src/interruptions.c ****                         break;
1063:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 62


1064:..\src/interruptions.c ****                     break;
1065:..\src/interruptions.c **** 
1066:..\src/interruptions.c ****                 case 1:
1067:..\src/interruptions.c ****                     // EMG 1 is first
1068:..\src/interruptions.c ****                     if (err_emg_1 < 0) {
1069:..\src/interruptions.c ****                         current_emg = 0;
1070:..\src/interruptions.c ****                         break;
1071:..\src/interruptions.c ****                     }
1072:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_mem.e
1073:..\src/interruptions.c ****                     break;
1074:..\src/interruptions.c **** 
1075:..\src/interruptions.c ****                 case 2:
1076:..\src/interruptions.c ****                     // EMG 2 is first
1077:..\src/interruptions.c ****                     if (err_emg_2 < 0) {
1078:..\src/interruptions.c ****                         current_emg = 0;
1079:..\src/interruptions.c ****                         break;
1080:..\src/interruptions.c ****                     }
1081:..\src/interruptions.c ****                     g_ref.pos = g_refOld.pos - (err_emg_2 * g_mem.emg_speed << 2) / (1024 - c_mem.e
1082:..\src/interruptions.c ****                     break;
1083:..\src/interruptions.c **** 
1084:..\src/interruptions.c ****                 default:
1085:..\src/interruptions.c ****                     break;
1086:..\src/interruptions.c ****             }
1087:..\src/interruptions.c ****             break;
1088:..\src/interruptions.c **** 
1089:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
1090:..\src/interruptions.c ****             g_ref.pos = g_refOld.pos;
1091:..\src/interruptions.c ****             switch (current_emg) {
1092:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
1093:..\src/interruptions.c ****                 case 0:
1094:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
1095:..\src/interruptions.c ****                         current_emg = 1;
1096:..\src/interruptions.c ****                         break;
1097:..\src/interruptions.c ****                     }
1098:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
1099:..\src/interruptions.c ****                         current_emg = 2;
1100:..\src/interruptions.c ****                         break;
1101:..\src/interruptions.c ****                     }
1102:..\src/interruptions.c ****                     break;
1103:..\src/interruptions.c **** 
1104:..\src/interruptions.c ****                 // EMG 1 is first
1105:..\src/interruptions.c ****                 case 1:
1106:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1107:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
1108:..\src/interruptions.c ****                         current_emg = 0;
1109:..\src/interruptions.c ****                         break;
1110:..\src/interruptions.c ****                     }
1111:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1112:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
1113:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos + (err_emg_1 * g_mem.emg_speed << 2) / (1024 - c_m
1114:..\src/interruptions.c ****                     
1115:..\src/interruptions.c ****                     break;
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****                 // EMG 2 is first
1118:..\src/interruptions.c ****                 case 2:
1119:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
1120:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 63


1121:..\src/interruptions.c ****                         current_emg = 0;
1122:..\src/interruptions.c ****                         break;
1123:..\src/interruptions.c ****                     }
1124:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
1125:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
1126:..\src/interruptions.c ****                         g_ref.pos = g_refOld.pos - (err_emg_2 * c_mem.emg_speed << 2) / (1024 - c_m
1127:..\src/interruptions.c ****                     }
1128:..\src/interruptions.c ****                     break;
1129:..\src/interruptions.c **** 
1130:..\src/interruptions.c ****                 default:
1131:..\src/interruptions.c ****                     break;
1132:..\src/interruptions.c ****             }
1133:..\src/interruptions.c ****             break;
1134:..\src/interruptions.c **** 
1135:..\src/interruptions.c ****         default:
1136:..\src/interruptions.c ****             break;
1137:..\src/interruptions.c **** */    
1138:..\src/interruptions.c ****     }
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****     // Position limit saturation
1141:..\src/interruptions.c **** /*    if (c_mem.pos_lim_flag) {
1142:..\src/interruptions.c ****         if (g_ref.pos < c_mem.pos_lim_inf) 
1143:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_inf;
1144:..\src/interruptions.c ****         if (g_ref.pos > c_mem.pos_lim_sup) 
1145:..\src/interruptions.c ****             g_ref.pos = c_mem.pos_lim_sup;
1146:..\src/interruptions.c ****     }
1147:..\src/interruptions.c **** */    
1148:..\src/interruptions.c ****     if (battery_low_SoC == 1) {
 2359              		.loc 1 1148 0
 2360 000a 084B     		ldr	r3, .L178
 2361 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2362 000e 012B     		cmp	r3, #1
 2363 0010 02D1     		bne	.L175
1149:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
1150:..\src/interruptions.c ****         g_ref.pos = 0;
 2364              		.loc 1 1150 0
 2365 0012 074B     		ldr	r3, .L178+4
 2366 0014 0022     		movs	r2, #0
 2367 0016 1A60     		str	r2, [r3]
 2368              	.L175:
1151:..\src/interruptions.c ****     }
1152:..\src/interruptions.c **** 
1153:..\src/interruptions.c ****     switch(c_mem.control_mode) {
 2369              		.loc 1 1153 0
 2370 0018 064B     		ldr	r3, .L178+8
 2371 001a 93F8D630 		ldrb	r3, [r3, #214]	@ zero_extendqisi2
 2372 001e 012B     		cmp	r3, #1
1154:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1155:..\src/interruptions.c **** /*        case CURR_AND_POS_CONTROL:
1156:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
1157:..\src/interruptions.c **** 
1158:..\src/interruptions.c ****             pos_error_sum += pos_error;
1159:..\src/interruptions.c **** 
1160:..\src/interruptions.c ****             // error_sum saturation
1161:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
1162:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
1163:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 64


1164:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
1165:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
1166:..\src/interruptions.c ****             }
1167:..\src/interruptions.c ****             
1168:..\src/interruptions.c ****             // ------ position PID control ------
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****             i_ref = 0;
1171:..\src/interruptions.c ****             
1172:..\src/interruptions.c ****             // Proportional
1173:..\src/interruptions.c ****             if (k_p_dl != 0)
1174:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
1175:..\src/interruptions.c **** 
1176:..\src/interruptions.c ****             // Integral
1177:..\src/interruptions.c ****             if (k_i_dl != 0)
1178:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
1179:..\src/interruptions.c **** 
1180:..\src/interruptions.c ****             // Derivative
1181:..\src/interruptions.c ****             if (k_d_dl != 0)
1182:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
1183:..\src/interruptions.c ****                         
1184:..\src/interruptions.c ****             // Update previous position
1185:..\src/interruptions.c ****             prev_pos_err = pos_error;
1186:..\src/interruptions.c **** 
1187:..\src/interruptions.c ****             // motor direction depends on i_ref
1188:..\src/interruptions.c ****             if (i_ref >= 0)
1189:..\src/interruptions.c ****                 motor_dir = TRUE;
1190:..\src/interruptions.c ****             else
1191:..\src/interruptions.c ****                 motor_dir = FALSE;
1192:..\src/interruptions.c **** 
1193:..\src/interruptions.c ****             // saturate max current
1194:..\src/interruptions.c ****             if (i_ref > c_mem.current_limit)
1195:..\src/interruptions.c ****                 i_ref = c_mem.current_limit;
1196:..\src/interruptions.c ****             else {
1197:..\src/interruptions.c ****                 if (i_ref < -c_mem.current_limit)
1198:..\src/interruptions.c ****                     i_ref = -c_mem.current_limit;
1199:..\src/interruptions.c ****         	}
1200:..\src/interruptions.c **** 
1201:..\src/interruptions.c ****             // current error and curr error sum
1202:..\src/interruptions.c ****             curr_error = i_ref - g_meas.curr[0];
1203:..\src/interruptions.c ****             curr_error_sum += curr_error;
1204:..\src/interruptions.c ****             
1205:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
1206:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
1207:..\src/interruptions.c ****             else {
1208:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
1209:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
1210:..\src/interruptions.c ****             }
1211:..\src/interruptions.c **** 
1212:..\src/interruptions.c ****             // ----- current PID control -----
1213:..\src/interruptions.c **** 
1214:..\src/interruptions.c ****             pwm_input = 0;
1215:..\src/interruptions.c **** 
1216:..\src/interruptions.c ****             // Proportional
1217:..\src/interruptions.c ****             if (k_p_c_dl != 0)
1218:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
1219:..\src/interruptions.c **** 
1220:..\src/interruptions.c ****             // Integral
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 65


1221:..\src/interruptions.c ****             if (k_i_c_dl != 0)
1222:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
1223:..\src/interruptions.c **** 
1224:..\src/interruptions.c ****             // Derivative
1225:..\src/interruptions.c ****             if (k_d_c_dl != 0)
1226:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
1227:..\src/interruptions.c **** 
1228:..\src/interruptions.c ****             // pwm_input saturation
1229:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
1230:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
1231:..\src/interruptions.c ****             else {
1232:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
1233:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
1234:..\src/interruptions.c ****             }
1235:..\src/interruptions.c **** 
1236:..\src/interruptions.c ****             // Update previous current
1237:..\src/interruptions.c ****             prev_curr_err = curr_error;
1238:..\src/interruptions.c **** 
1239:..\src/interruptions.c ****         break;
1240:..\src/interruptions.c **** 
1241:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1242:..\src/interruptions.c ****         case CONTROL_ANGLE:
1243:..\src/interruptions.c ****             pos_error = g_ref.pos - g_meas.pos[0];
1244:..\src/interruptions.c **** 
1245:..\src/interruptions.c ****             pos_error_sum += pos_error;
1246:..\src/interruptions.c **** 
1247:..\src/interruptions.c ****             // anti-windup (for integral control)
1248:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
1249:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
1250:..\src/interruptions.c ****             else {
1251:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
1252:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
1253:..\src/interruptions.c ****             }
1254:..\src/interruptions.c **** 
1255:..\src/interruptions.c ****             // Proportional
1256:..\src/interruptions.c ****             if (k_p != 0) 
1257:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
1258:..\src/interruptions.c ****             
1259:..\src/interruptions.c **** 
1260:..\src/interruptions.c ****             // Integral
1261:..\src/interruptions.c ****             if (k_i != 0) 
1262:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
1263:..\src/interruptions.c ****             
1264:..\src/interruptions.c **** 
1265:..\src/interruptions.c ****             // Derivative
1266:..\src/interruptions.c ****             if (k_d != 0) 
1267:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
1268:..\src/interruptions.c ****             
1269:..\src/interruptions.c **** 
1270:..\src/interruptions.c ****             // Update measure
1271:..\src/interruptions.c ****             prev_pos_err = pos_error;
1272:..\src/interruptions.c **** 
1273:..\src/interruptions.c ****             if (pwm_input > 0)
1274:..\src/interruptions.c ****                 motor_dir = TRUE;
1275:..\src/interruptions.c ****             else
1276:..\src/interruptions.c ****                 motor_dir = FALSE;
1277:..\src/interruptions.c **** 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 66


1278:..\src/interruptions.c ****         break;
1279:..\src/interruptions.c **** 
1280:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1281:..\src/interruptions.c ****         case CONTROL_CURRENT:
1282:..\src/interruptions.c ****             if(g_ref.onoff && tension_valid) {
1283:..\src/interruptions.c ****                 
1284:..\src/interruptions.c ****                 i_ref = g_ref.curr;
1285:..\src/interruptions.c **** 
1286:..\src/interruptions.c ****                 if (i_ref > c_mem.current_limit) 
1287:..\src/interruptions.c ****                     i_ref = c_mem.current_limit;
1288:..\src/interruptions.c ****                 else {
1289:..\src/interruptions.c ****                     if (i_ref < -c_mem.current_limit)
1290:..\src/interruptions.c ****                         i_ref = -c_mem.current_limit;
1291:..\src/interruptions.c ****                 }
1292:..\src/interruptions.c ****                 
1293:..\src/interruptions.c ****                 // current error
1294:..\src/interruptions.c ****                 curr_error = i_ref - g_meas.curr[0];            
1295:..\src/interruptions.c ****                 curr_error_sum += curr_error;
1296:..\src/interruptions.c ****                 
1297:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
1298:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
1299:..\src/interruptions.c ****                 else {
1300:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
1301:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
1302:..\src/interruptions.c ****                 }
1303:..\src/interruptions.c **** 
1304:..\src/interruptions.c ****                 pwm_input = 0;
1305:..\src/interruptions.c **** 
1306:..\src/interruptions.c ****                 // Proportional
1307:..\src/interruptions.c ****                 if (k_p_c != 0)
1308:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
1309:..\src/interruptions.c **** 
1310:..\src/interruptions.c ****                 // Integral
1311:..\src/interruptions.c ****                 if (k_i_c != 0)
1312:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
1313:..\src/interruptions.c **** 
1314:..\src/interruptions.c ****                 // Derivative
1315:..\src/interruptions.c ****                 if (k_d_c != 0)
1316:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
1317:..\src/interruptions.c ****                 
1318:..\src/interruptions.c ****                 prev_curr_err = curr_error;
1319:..\src/interruptions.c ****                 
1320:..\src/interruptions.c ****                 if (pwm_input >= 0) 
1321:..\src/interruptions.c ****                     motor_dir = TRUE;
1322:..\src/interruptions.c ****                 else
1323:..\src/interruptions.c ****                     motor_dir = FALSE;
1324:..\src/interruptions.c ****             }
1325:..\src/interruptions.c ****         break;
1326:..\src/interruptions.c **** */        
1327:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1328:..\src/interruptions.c ****         case CONTROL_PWM:
1329:..\src/interruptions.c **** /*
1330:..\src/interruptions.c ****             pwm_input = g_ref.pwm;
1331:..\src/interruptions.c **** 
1332:..\src/interruptions.c ****             if (pwm_input > 0) 
1333:..\src/interruptions.c ****                 motor_dir = TRUE;
1334:..\src/interruptions.c ****             else 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 67


1335:..\src/interruptions.c ****                 motor_dir = FALSE;
1336:..\src/interruptions.c ****             
1337:..\src/interruptions.c **** 
1338:..\src/interruptions.c ****             // pwm_input saturation
1339:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
1340:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
1341:..\src/interruptions.c ****             else {
1342:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1343:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1344:..\src/interruptions.c ****         	}
1345:..\src/interruptions.c **** */
1346:..\src/interruptions.c ****         break;
 2373              		.loc 1 1346 0
 2374 0020 00BF     		nop
1347:..\src/interruptions.c ****             
1348:..\src/interruptions.c ****     }
1349:..\src/interruptions.c **** 
1350:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1351:..\src/interruptions.c ****     
1352:..\src/interruptions.c ****     if (c_mem.motor_driver_type[index] == DRIVER_MC33887) {
1353:..\src/interruptions.c **** /*
1354:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
1355:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
1356:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
1357:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
1358:..\src/interruptions.c **** 
1359:..\src/interruptions.c ****     if (c_mem.control_mode != CONTROL_PWM) 
1360:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
1361:..\src/interruptions.c ****  
1362:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
1363:..\src/interruptions.c ****     
1364:..\src/interruptions.c ****     if (motor_dir)
1365:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
1366:..\src/interruptions.c ****     else
1367:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
1368:..\src/interruptions.c **** 
1369:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
1370:..\src/interruptions.c **** */
1371:..\src/interruptions.c ****     }
1372:..\src/interruptions.c ****     else {  // DRIVER_VNH5019
1373:..\src/interruptions.c **** /*
1374:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
1375:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
1376:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
1377:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****     if (c_mem.control_mode != CONTROL_PWM) 
1380:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
1381:..\src/interruptions.c ****  
1382:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
1383:..\src/interruptions.c ****     
1384:..\src/interruptions.c ****     if (motor_dir)
1385:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
1386:..\src/interruptions.c ****     else
1387:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
1388:..\src/interruptions.c **** 
1389:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 68


1390:..\src/interruptions.c **** */        
1391:..\src/interruptions.c ****     }
1392:..\src/interruptions.c ****     
1393:..\src/interruptions.c **** }
 2375              		.loc 1 1393 0
 2376 0022 00BF     		nop
 2377 0024 0C37     		adds	r7, r7, #12
 2378              		.cfi_def_cfa_offset 4
 2379 0026 BD46     		mov	sp, r7
 2380              		.cfi_def_cfa_register 13
 2381              		@ sp needed
 2382 0028 80BC     		pop	{r7}
 2383              		.cfi_restore 7
 2384              		.cfi_def_cfa_offset 0
 2385 002a 7047     		bx	lr
 2386              	.L179:
 2387              		.align	2
 2388              	.L178:
 2389 002c 00000000 		.word	battery_low_SoC
 2390 0030 00000000 		.word	g_ref
 2391 0034 00000000 		.word	c_mem
 2392              		.cfi_endproc
 2393              	.LFE69:
 2394              		.size	motor_control_generic, .-motor_control_generic
 2395              		.global	__aeabi_fcmpeq
 2396              		.global	__aeabi_fmul
 2397              		.global	__aeabi_f2iz
 2398              		.global	__aeabi_fcmplt
 2399              		.section	.text.encoder_reading_SPI,"ax",%progbits
 2400              		.align	2
 2401              		.global	encoder_reading_SPI
 2402              		.thumb
 2403              		.thumb_func
 2404              		.type	encoder_reading_SPI, %function
 2405              	encoder_reading_SPI:
 2406              	.LFB70:
1394:..\src/interruptions.c **** 
1395:..\src/interruptions.c **** //==============================================================================
1396:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1397:..\src/interruptions.c **** //==============================================================================
1398:..\src/interruptions.c **** 
1399:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line) {
 2407              		.loc 1 1399 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 48
 2410              		@ frame_needed = 1, uses_anonymous_args = 0
 2411 0000 90B5     		push	{r4, r7, lr}
 2412              		.cfi_def_cfa_offset 12
 2413              		.cfi_offset 4, -12
 2414              		.cfi_offset 7, -8
 2415              		.cfi_offset 14, -4
 2416 0002 8DB0     		sub	sp, sp, #52
 2417              		.cfi_def_cfa_offset 64
 2418 0004 00AF     		add	r7, sp, #0
 2419              		.cfi_def_cfa_register 7
 2420 0006 0346     		mov	r3, r0
 2421 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 69


1400:..\src/interruptions.c **** 
1401:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 2422              		.loc 1 1401 0
 2423 000a 0023     		movs	r3, #0
 2424 000c 87F82F30 		strb	r3, [r7, #47]
1402:..\src/interruptions.c ****     
1403:..\src/interruptions.c ****     // Encoder Variables  
1404:..\src/interruptions.c ****     uint8 jj;
1405:..\src/interruptions.c ****      
1406:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1407:..\src/interruptions.c ****     int16 tmp_value_encoder;
1408:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1409:..\src/interruptions.c ****     int32 value_encoder;
1410:..\src/interruptions.c ****     int32 speed_encoder;
1411:..\src/interruptions.c ****     int32 value_diff;
1412:..\src/interruptions.c **** 	int8 init_rot = 0;
 2425              		.loc 1 1412 0
 2426 0010 0023     		movs	r3, #0
 2427 0012 87F82730 		strb	r3, [r7, #39]
1413:..\src/interruptions.c **** 
1414:..\src/interruptions.c ****     static int32 last_value_encoder[NUM_OF_SENSORS];
1415:..\src/interruptions.c ****     static int32 comp_value_encoder[NUM_OF_SENSORS];
1416:..\src/interruptions.c ****     static uint8 error[NUM_OF_SENSORS];
1417:..\src/interruptions.c ****     
1418:..\src/interruptions.c ****     static CYBIT only_first_time = TRUE;
1419:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation = FALSE;
1420:..\src/interruptions.c ****     static uint8 one_time_execute = 0;
1421:..\src/interruptions.c ****     static uint32 count_startup_motor = 0;
1422:..\src/interruptions.c ****     static CYBIT pos_reconstruct = FALSE;
1423:..\src/interruptions.c **** 
1424:..\src/interruptions.c ****     static int32 v_value[N_ENCODERS];   //last value for velocity
1425:..\src/interruptions.c ****     static int32 vv_value[N_ENCODERS];  //last last value for velocity
1426:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODERS];  //last last last value for velocity
1427:..\src/interruptions.c ****     
1428:..\src/interruptions.c ****     if (reset_last_value_flag) {
 2428              		.loc 1 1428 0
 2429 0016 724B     		ldr	r3, .L216
 2430 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2431 001a 002B     		cmp	r3, #0
 2432 001c 13D0     		beq	.L181
1429:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 2433              		.loc 1 1429 0
 2434 001e 0323     		movs	r3, #3
 2435 0020 87F82E30 		strb	r3, [r7, #46]
 2436 0024 05E0     		b	.L182
 2437              	.L183:
1430:..\src/interruptions.c ****             last_value_encoder[jj] = 0;
 2438              		.loc 1 1430 0
 2439 0026 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 2440 002a 6E4A     		ldr	r2, .L216+4
 2441 002c 0021     		movs	r1, #0
 2442 002e 42F82310 		str	r1, [r2, r3, lsl #2]
 2443              	.L182:
1429:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 2444              		.loc 1 1429 0 discriminator 1
 2445 0032 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 2446 0036 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 70


 2447 0038 87F82E20 		strb	r2, [r7, #46]
 2448 003c 002B     		cmp	r3, #0
 2449 003e F2D1     		bne	.L183
1431:..\src/interruptions.c ****         
1432:..\src/interruptions.c ****         reset_last_value_flag = 0;
 2450              		.loc 1 1432 0
 2451 0040 674B     		ldr	r3, .L216
 2452 0042 0022     		movs	r2, #0
 2453 0044 1A70     		strb	r2, [r3]
 2454              	.L181:
1433:..\src/interruptions.c ****     }
1434:..\src/interruptions.c **** 
1435:..\src/interruptions.c ****     //======================================================     reading sensors
1436:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 2455              		.loc 1 1436 0
 2456 0046 0023     		movs	r3, #0
 2457 0048 87F82F30 		strb	r3, [r7, #47]
 2458 004c 0DE0     		b	.L184
 2459              	.L185:
1437:..\src/interruptions.c ****         aux_encoder[index] = 0;
 2460              		.loc 1 1437 0 discriminator 3
 2461 004e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2462 0052 9B00     		lsls	r3, r3, #2
 2463 0054 07F13002 		add	r2, r7, #48
 2464 0058 1344     		add	r3, r3, r2
 2465 005a 0022     		movs	r2, #0
 2466 005c 43F8242C 		str	r2, [r3, #-36]
1436:..\src/interruptions.c ****         aux_encoder[index] = 0;
 2467              		.loc 1 1436 0 discriminator 3
 2468 0060 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2469 0064 0133     		adds	r3, r3, #1
 2470 0066 87F82F30 		strb	r3, [r7, #47]
 2471              	.L184:
1436:..\src/interruptions.c ****         aux_encoder[index] = 0;
 2472              		.loc 1 1436 0 is_stmt 0 discriminator 1
 2473 006a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2474 006e 022B     		cmp	r3, #2
 2475 0070 EDD9     		bls	.L185
1438:..\src/interruptions.c ****     }   
1439:..\src/interruptions.c ****     
1440:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 2476              		.loc 1 1440 0 is_stmt 1
 2477 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2478 0074 5C4A     		ldr	r2, .L216+8
 2479 0076 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2480 0078 1A46     		mov	r2, r3
 2481 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2482 007c 1946     		mov	r1, r3
 2483 007e 1046     		mov	r0, r2
 2484 0080 FFF7FEFF 		bl	ReadEncoderLine
1441:..\src/interruptions.c ****                                                                         //CS1 for left hand
1442:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {        
 2485              		.loc 1 1442 0
 2486 0084 0023     		movs	r3, #0
 2487 0086 87F82F30 		strb	r3, [r7, #47]
 2488 008a 23E0     		b	.L186
 2489              	.L188:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 71


1443:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 2490              		.loc 1 1443 0
 2491 008c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2492 008e 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 2493 0092 5648     		ldr	r0, .L216+12
 2494 0094 1346     		mov	r3, r2
 2495 0096 9B00     		lsls	r3, r3, #2
 2496 0098 1344     		add	r3, r3, r2
 2497 009a 0344     		add	r3, r3, r0
 2498 009c 0B44     		add	r3, r3, r1
 2499 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2500 00a0 0F2B     		cmp	r3, #15
 2501 00a2 12D9     		bls	.L187
1444:..\src/interruptions.c ****             aux_encoder[index] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XX
 2502              		.loc 1 1444 0
 2503 00a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 2504 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2505 00aa 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 2506 00ae 504C     		ldr	r4, .L216+16
 2507 00b0 1346     		mov	r3, r2
 2508 00b2 9B00     		lsls	r3, r3, #2
 2509 00b4 1344     		add	r3, r3, r2
 2510 00b6 0344     		add	r3, r3, r0
 2511 00b8 34F81330 		ldrh	r3, [r4, r3, lsl #1]
 2512 00bc 1A46     		mov	r2, r3
 2513 00be 8B00     		lsls	r3, r1, #2
 2514 00c0 07F13001 		add	r1, r7, #48
 2515 00c4 0B44     		add	r3, r3, r1
 2516 00c6 43F8242C 		str	r2, [r3, #-36]
 2517              	.L187:
1442:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 2518              		.loc 1 1442 0 discriminator 2
 2519 00ca 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2520 00ce 0133     		adds	r3, r3, #1
 2521 00d0 87F82F30 		strb	r3, [r7, #47]
 2522              	.L186:
1442:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 2523              		.loc 1 1442 0 is_stmt 0 discriminator 1
 2524 00d4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2525 00d8 022B     		cmp	r3, #2
 2526 00da D7D9     		bls	.L188
1445:..\src/interruptions.c ****         }
1446:..\src/interruptions.c ****     }
1447:..\src/interruptions.c ****     
1448:..\src/interruptions.c ****     // S = SIGN BIT
1449:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1450:..\src/interruptions.c ****     // 0 = 0 BIT
1451:..\src/interruptions.c ****     // C = CONTROL BIT
1452:..\src/interruptions.c ****     
1453:..\src/interruptions.c ****     /*
1454:..\src/interruptions.c ****     // index=0 reads SoftHand Pro encoder positioned on gear, while index=1 has to read encoder pos
1455:..\src/interruptions.c ****     int aux;
1456:..\src/interruptions.c ****     aux = aux_encoder[0];
1457:..\src/interruptions.c ****     aux_encoder[0] = aux_encoder[1];
1458:..\src/interruptions.c ****     aux_encoder[1] = aux;
1459:..\src/interruptions.c ****     */
1460:..\src/interruptions.c ****     
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 72


1461:..\src/interruptions.c ****     // index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads encoder position
1462:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 2527              		.loc 1 1462 0 is_stmt 1
 2528 00dc 0023     		movs	r3, #0
 2529 00de 87F82F30 		strb	r3, [r7, #47]
 2530 00e2 E6E1     		b	.L189
 2531              	.L209:
1463:..\src/interruptions.c ****         
1464:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 2532              		.loc 1 1464 0
 2533 00e4 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 2534 00e8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2535 00ec 9B00     		lsls	r3, r3, #2
 2536 00ee 07F13001 		add	r1, r7, #48
 2537 00f2 0B44     		add	r3, r3, r1
 2538 00f4 53F8243C 		ldr	r3, [r3, #-36]
 2539 00f8 3E49     		ldr	r1, .L216+20
 2540 00fa 41F82230 		str	r3, [r1, r2, lsl #2]
1465:..\src/interruptions.c ****         
1466:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.m_off[index]);
 2541              		.loc 1 1466 0
 2542 00fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2543 0102 9B00     		lsls	r3, r3, #2
 2544 0104 07F13002 		add	r2, r7, #48
 2545 0108 1344     		add	r3, r3, r2
 2546 010a 53F8243C 		ldr	r3, [r3, #-36]
 2547 010e 9AB2     		uxth	r2, r3
 2548 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2549 0114 3849     		ldr	r1, .L216+24
 2550 0116 3633     		adds	r3, r3, #54
 2551 0118 9B00     		lsls	r3, r3, #2
 2552 011a 0B44     		add	r3, r3, r1
 2553 011c 5B68     		ldr	r3, [r3, #4]
 2554 011e 9BB2     		uxth	r3, r3
 2555 0120 D31A     		subs	r3, r2, r3
 2556 0122 9BB2     		uxth	r3, r3
 2557 0124 BB85     		strh	r3, [r7, #44]	@ movhi
1467:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 2558              		.loc 1 1467 0
 2559 0126 B7F92C30 		ldrsh	r3, [r7, #44]
 2560 012a 002B     		cmp	r3, #0
 2561 012c 04DA     		bge	.L190
1468:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 2562              		.loc 1 1468 0
 2563 012e BB8D     		ldrh	r3, [r7, #44]
 2564 0130 03F58053 		add	r3, r3, #4096
 2565 0134 9BB2     		uxth	r3, r3
 2566 0136 BB85     		strh	r3, [r7, #44]	@ movhi
 2567              	.L190:
1469:..\src/interruptions.c ****         }       // Range [0, 4096]
1470:..\src/interruptions.c **** 
1471:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 2568              		.loc 1 1471 0
 2569 0138 B7F92C30 		ldrsh	r3, [r7, #44]
 2570 013c B3F5006F 		cmp	r3, #2048
 2571 0140 04DB     		blt	.L191
1472:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 73


 2572              		.loc 1 1472 0
 2573 0142 BB8D     		ldrh	r3, [r7, #44]
 2574 0144 A3F58053 		sub	r3, r3, #4096
 2575 0148 9BB2     		uxth	r3, r3
 2576 014a BB85     		strh	r3, [r7, #44]	@ movhi
 2577              	.L191:
1473:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1474:..\src/interruptions.c **** 
1475:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 2578              		.loc 1 1475 0
 2579 014c B7F92C30 		ldrsh	r3, [r7, #44]
 2580 0150 1B01     		lsls	r3, r3, #4
 2581 0152 3B62     		str	r3, [r7, #32]
1476:..\src/interruptions.c ****         comp_value_encoder[index] = tmp_value_encoder_32;
 2582              		.loc 1 1476 0
 2583 0154 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2584 0158 2849     		ldr	r1, .L216+28
 2585 015a 3A6A     		ldr	r2, [r7, #32]
 2586 015c 41F82320 		str	r2, [r1, r3, lsl #2]
1477:..\src/interruptions.c **** 
1478:..\src/interruptions.c ****         // Initialize last_value_encoder
1479:..\src/interruptions.c ****         if (only_first_time) {
 2587              		.loc 1 1479 0
 2588 0160 274B     		ldr	r3, .L216+32
 2589 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2590 0164 002B     		cmp	r3, #0
 2591 0166 0CD0     		beq	.L192
1480:..\src/interruptions.c ****             last_value_encoder[index] = tmp_value_encoder_32;
 2592              		.loc 1 1480 0
 2593 0168 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2594 016c 1D49     		ldr	r1, .L216+4
 2595 016e 3A6A     		ldr	r2, [r7, #32]
 2596 0170 41F82320 		str	r2, [r1, r3, lsl #2]
1481:..\src/interruptions.c ****             if (index == 2)
 2597              		.loc 1 1481 0
 2598 0174 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2599 0178 022B     		cmp	r3, #2
 2600 017a 02D1     		bne	.L192
1482:..\src/interruptions.c ****                 only_first_time = 0;
 2601              		.loc 1 1482 0
 2602 017c 204B     		ldr	r3, .L216+32
 2603 017e 0022     		movs	r2, #0
 2604 0180 1A70     		strb	r2, [r3]
 2605              	.L192:
1483:..\src/interruptions.c ****         }
1484:..\src/interruptions.c **** 
1485:..\src/interruptions.c ****         // Take care of rotations
1486:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[index];     // worst case SSSSSSSSSS
 2606              		.loc 1 1486 0
 2607 0182 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2608 0186 174A     		ldr	r2, .L216+4
 2609 0188 52F82330 		ldr	r3, [r2, r3, lsl #2]
 2610 018c 3A6A     		ldr	r2, [r7, #32]
 2611 018e D31A     		subs	r3, r2, r3
 2612 0190 FB61     		str	r3, [r7, #28]
1487:..\src/interruptions.c **** 
1488:..\src/interruptions.c ****         // ====================== 1 TURN ======================
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 74


1489:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1490:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1491:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1492:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1493:..\src/interruptions.c ****         //                                               |           |
1494:..\src/interruptions.c ****         //                                           24575           -24576
1495:..\src/interruptions.c ****         //                                               |___________|
1496:..\src/interruptions.c ****         //                                                   49152
1497:..\src/interruptions.c **** 
1498:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1499:..\src/interruptions.c ****         // and update the variable only if the difference between
1500:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1501:..\src/interruptions.c **** 
1502:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1503:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1504:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1505:..\src/interruptions.c **** 
1506:..\src/interruptions.c ****         if (value_diff > 49152)
 2613              		.loc 1 1506 0
 2614 0192 FB69     		ldr	r3, [r7, #28]
 2615 0194 B3F5404F 		cmp	r3, #49152
 2616 0198 0EDD     		ble	.L193
1507:..\src/interruptions.c ****             g_meas.rot[index]--;
 2617              		.loc 1 1507 0
 2618 019a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2619 019e 194A     		ldr	r2, .L216+36
 2620 01a0 1A44     		add	r2, r2, r3
 2621 01a2 92F91820 		ldrsb	r2, [r2, #24]
 2622 01a6 D2B2     		uxtb	r2, r2
 2623 01a8 013A     		subs	r2, r2, #1
 2624 01aa D2B2     		uxtb	r2, r2
 2625 01ac 51B2     		sxtb	r1, r2
 2626 01ae 154A     		ldr	r2, .L216+36
 2627 01b0 1344     		add	r3, r3, r2
 2628 01b2 0A46     		mov	r2, r1
 2629 01b4 1A76     		strb	r2, [r3, #24]
 2630 01b6 3DE0     		b	.L194
 2631              	.L193:
1508:..\src/interruptions.c ****         else{ 
1509:..\src/interruptions.c ****             if (value_diff < -49152)
 2632              		.loc 1 1509 0
 2633 01b8 FB69     		ldr	r3, [r7, #28]
 2634 01ba 13F5404F 		cmn	r3, #49152
 2635 01be 23DA     		bge	.L195
1510:..\src/interruptions.c ****                 g_meas.rot[index]++;
 2636              		.loc 1 1510 0
 2637 01c0 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2638 01c4 0F4A     		ldr	r2, .L216+36
 2639 01c6 1A44     		add	r2, r2, r3
 2640 01c8 92F91820 		ldrsb	r2, [r2, #24]
 2641 01cc D2B2     		uxtb	r2, r2
 2642 01ce 0132     		adds	r2, r2, #1
 2643 01d0 D2B2     		uxtb	r2, r2
 2644 01d2 51B2     		sxtb	r1, r2
 2645 01d4 0B4A     		ldr	r2, .L216+36
 2646 01d6 1344     		add	r3, r3, r2
 2647 01d8 0A46     		mov	r2, r1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 75


 2648 01da 1A76     		strb	r2, [r3, #24]
 2649 01dc 2AE0     		b	.L194
 2650              	.L217:
 2651 01de 00BF     		.align	2
 2652              	.L216:
 2653 01e0 00000000 		.word	reset_last_value_flag
 2654 01e4 AC000000 		.word	last_value_encoder.10351
 2655 01e8 00000000 		.word	N_Encoder_Line_Connected
 2656 01ec 00000000 		.word	Encoder_Check
 2657 01f0 00000000 		.word	Encoder_Value
 2658 01f4 00000000 		.word	data_encoder_raw
 2659 01f8 00000000 		.word	g_mem
 2660 01fc B8000000 		.word	comp_value_encoder.10352
 2661 0200 04000000 		.word	only_first_time.10354
 2662 0204 00000000 		.word	g_meas
 2663              	.L195:
1511:..\src/interruptions.c ****             else{
1512:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measure are too far
 2664              		.loc 1 1512 0
 2665 0208 FB69     		ldr	r3, [r7, #28]
 2666 020a 002B     		cmp	r3, #0
 2667 020c B8BF     		it	lt
 2668 020e 5B42     		rsblt	r3, r3, #0
 2669 0210 B3F5804F 		cmp	r3, #16384
 2670 0214 0EDD     		ble	.L194
1513:..\src/interruptions.c ****                     error[index]++;
 2671              		.loc 1 1513 0
 2672 0216 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2673 021a B84A     		ldr	r2, .L218
 2674 021c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2675 021e 0132     		adds	r2, r2, #1
 2676 0220 D1B2     		uxtb	r1, r2
 2677 0222 B64A     		ldr	r2, .L218
 2678 0224 D154     		strb	r1, [r2, r3]
1514:..\src/interruptions.c ****                                 
1515:..\src/interruptions.c ****                     if (error[index] < 10)
 2679              		.loc 1 1515 0
 2680 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2681 022a B44A     		ldr	r2, .L218
 2682 022c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2683 022e 092B     		cmp	r3, #9
 2684 0230 40F28481 		bls	.L215
 2685              	.L194:
1516:..\src/interruptions.c ****                         // Discard
1517:..\src/interruptions.c ****                         return;
1518:..\src/interruptions.c ****                 }
1519:..\src/interruptions.c ****             }
1520:..\src/interruptions.c ****         }
1521:..\src/interruptions.c **** 
1522:..\src/interruptions.c ****         error[index] = 0;
 2686              		.loc 1 1522 0
 2687 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2688 0238 B04A     		ldr	r2, .L218
 2689 023a 0021     		movs	r1, #0
 2690 023c D154     		strb	r1, [r2, r3]
1523:..\src/interruptions.c ****         
1524:..\src/interruptions.c ****         last_value_encoder[index] = tmp_value_encoder_32;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 76


 2691              		.loc 1 1524 0
 2692 023e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2693 0242 AF49     		ldr	r1, .L218+4
 2694 0244 3A6A     		ldr	r2, [r7, #32]
 2695 0246 41F82320 		str	r2, [r1, r3, lsl #2]
1525:..\src/interruptions.c **** 
1526:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 2696              		.loc 1 1526 0
 2697 024a 3B6A     		ldr	r3, [r7, #32]
 2698 024c BB62     		str	r3, [r7, #40]
1527:..\src/interruptions.c **** 
1528:..\src/interruptions.c ****         value_encoder += ((int32)g_meas.rot[index] << 16);    
 2699              		.loc 1 1528 0
 2700 024e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2701 0252 AC4A     		ldr	r2, .L218+8
 2702 0254 1344     		add	r3, r3, r2
 2703 0256 93F91830 		ldrsb	r3, [r3, #24]
 2704 025a 1B04     		lsls	r3, r3, #16
 2705 025c BA6A     		ldr	r2, [r7, #40]
 2706 025e 1344     		add	r3, r3, r2
 2707 0260 BB62     		str	r3, [r7, #40]
1529:..\src/interruptions.c ****         
1530:..\src/interruptions.c ****         if (c_mem.m_mult[index] != 1.0) {
 2708              		.loc 1 1530 0
 2709 0262 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2710 0266 A84A     		ldr	r2, .L218+12
 2711 0268 3A33     		adds	r3, r3, #58
 2712 026a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2713 026e 4FF07E51 		mov	r1, #1065353216
 2714 0272 1846     		mov	r0, r3
 2715 0274 FFF7FEFF 		bl	__aeabi_fcmpeq
 2716 0278 0346     		mov	r3, r0
 2717 027a 002B     		cmp	r3, #0
 2718 027c 11D1     		bne	.L197
1531:..\src/interruptions.c ****             value_encoder *= c_mem.m_mult[index];
 2719              		.loc 1 1531 0
 2720 027e B86A     		ldr	r0, [r7, #40]
 2721 0280 FFF7FEFF 		bl	__aeabi_i2f
 2722 0284 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2723 0288 9F4A     		ldr	r2, .L218+12
 2724 028a 3A33     		adds	r3, r3, #58
 2725 028c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2726 0290 1946     		mov	r1, r3
 2727 0292 FFF7FEFF 		bl	__aeabi_fmul
 2728 0296 0346     		mov	r3, r0
 2729 0298 1846     		mov	r0, r3
 2730 029a FFF7FEFF 		bl	__aeabi_f2iz
 2731 029e 0346     		mov	r3, r0
 2732 02a0 BB62     		str	r3, [r7, #40]
 2733              	.L197:
1532:..\src/interruptions.c ****         }
1533:..\src/interruptions.c ****         
1534:..\src/interruptions.c ****         // Right / Left hand turn
1535:..\src/interruptions.c ****         if (index == 0) {
 2734              		.loc 1 1535 0
 2735 02a2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2736 02a6 002B     		cmp	r3, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 77


 2737 02a8 07D1     		bne	.L199
1536:..\src/interruptions.c ****             if (c_mem.right_left == RIGHT_HAND){
 2738              		.loc 1 1536 0
 2739 02aa 974B     		ldr	r3, .L218+12
 2740 02ac 93F84631 		ldrb	r3, [r3, #326]	@ zero_extendqisi2
 2741 02b0 002B     		cmp	r3, #0
 2742 02b2 02D1     		bne	.L199
1537:..\src/interruptions.c ****                 value_encoder *= -1;        
 2743              		.loc 1 1537 0
 2744 02b4 BB6A     		ldr	r3, [r7, #40]
 2745 02b6 5B42     		negs	r3, r3
 2746 02b8 BB62     		str	r3, [r7, #40]
 2747              	.L199:
1538:..\src/interruptions.c ****             }
1539:..\src/interruptions.c ****         }
1540:..\src/interruptions.c ****         
1541:..\src/interruptions.c ****         g_meas.pos[index] = value_encoder;
 2748              		.loc 1 1541 0
 2749 02ba 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2750 02be 9149     		ldr	r1, .L218+8
 2751 02c0 BA6A     		ldr	r2, [r7, #40]
 2752 02c2 41F82320 		str	r2, [r1, r3, lsl #2]
1542:..\src/interruptions.c ****     
1543:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[index] + 9 * vv_value[index] 
 2753              		.loc 1 1543 0
 2754 02c6 BA6A     		ldr	r2, [r7, #40]
 2755 02c8 1346     		mov	r3, r2
 2756 02ca 9B00     		lsls	r3, r3, #2
 2757 02cc 1344     		add	r3, r3, r2
 2758 02ce 5B00     		lsls	r3, r3, #1
 2759 02d0 1A44     		add	r2, r2, r3
 2760 02d2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2761 02d6 8D49     		ldr	r1, .L218+16
 2762 02d8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2763 02dc 6FF01101 		mvn	r1, #17
 2764 02e0 01FB03F3 		mul	r3, r1, r3
 2765 02e4 D118     		adds	r1, r2, r3
 2766 02e6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2767 02ea 894A     		ldr	r2, .L218+20
 2768 02ec 52F82320 		ldr	r2, [r2, r3, lsl #2]
 2769 02f0 1346     		mov	r3, r2
 2770 02f2 DB00     		lsls	r3, r3, #3
 2771 02f4 1344     		add	r3, r3, r2
 2772 02f6 CA18     		adds	r2, r1, r3
 2773 02f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2774 02fc 8549     		ldr	r1, .L218+24
 2775 02fe 51F82330 		ldr	r3, [r1, r3, lsl #2]
 2776 0302 5B00     		lsls	r3, r3, #1
 2777 0304 D01A     		subs	r0, r2, r3
 2778 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2779 030a DB00     		lsls	r3, r3, #3
 2780 030c 824A     		ldr	r2, .L218+28
 2781 030e 1344     		add	r3, r3, r2
 2782 0310 1946     		mov	r1, r3
 2783 0312 FFF7FEFF 		bl	filter
 2784 0316 0346     		mov	r3, r0
 2785 0318 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 78


 2786 031a BB61     		str	r3, [r7, #24]
1544:..\src/interruptions.c **** 
1545:..\src/interruptions.c ****         //Update current speed
1546:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 2787              		.loc 1 1546 0
 2788 031c B869     		ldr	r0, [r7, #24]
 2789 031e FFF7FEFF 		bl	__aeabi_i2f
 2790 0322 0446     		mov	r4, r0
 2791 0324 7D4B     		ldr	r3, .L218+32
 2792 0326 1B68     		ldr	r3, [r3]	@ float
 2793 0328 7D49     		ldr	r1, .L218+36
 2794 032a 1846     		mov	r0, r3
 2795 032c FFF7FEFF 		bl	__aeabi_fmul
 2796 0330 0346     		mov	r3, r0
 2797 0332 1946     		mov	r1, r3
 2798 0334 2046     		mov	r0, r4
 2799 0336 FFF7FEFF 		bl	__aeabi_fdiv
 2800 033a 0346     		mov	r3, r0
 2801 033c 1846     		mov	r0, r3
 2802 033e FFF7FEFF 		bl	__aeabi_f2iz
 2803 0342 0346     		mov	r3, r0
 2804 0344 BB61     		str	r3, [r7, #24]
1547:..\src/interruptions.c ****         g_meas.vel[index] = speed_encoder;
 2805              		.loc 1 1547 0
 2806 0346 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2807 034a 6E4A     		ldr	r2, .L218+8
 2808 034c 0833     		adds	r3, r3, #8
 2809 034e 9B00     		lsls	r3, r3, #2
 2810 0350 1344     		add	r3, r3, r2
 2811 0352 BA69     		ldr	r2, [r7, #24]
 2812 0354 5A60     		str	r2, [r3, #4]
1548:..\src/interruptions.c **** 
1549:..\src/interruptions.c ****         // update old velocity and acceleration values
1550:..\src/interruptions.c ****         vvv_value[index] = vv_value[index];
 2813              		.loc 1 1550 0
 2814 0356 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2815 035a 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 2816 035e 6C49     		ldr	r1, .L218+20
 2817 0360 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2818 0364 6B49     		ldr	r1, .L218+24
 2819 0366 41F82320 		str	r2, [r1, r3, lsl #2]
1551:..\src/interruptions.c ****         vv_value[index] = v_value[index];
 2820              		.loc 1 1551 0
 2821 036a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2822 036e 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 2823 0372 6649     		ldr	r1, .L218+16
 2824 0374 51F82220 		ldr	r2, [r1, r2, lsl #2]
 2825 0378 6549     		ldr	r1, .L218+20
 2826 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1552:..\src/interruptions.c ****         v_value[index] = value_encoder;
 2827              		.loc 1 1552 0
 2828 037e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2829 0382 6249     		ldr	r1, .L218+16
 2830 0384 BA6A     		ldr	r2, [r7, #40]
 2831 0386 41F82320 		str	r2, [r1, r3, lsl #2]
1553:..\src/interruptions.c **** 
1554:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 79


1555:..\src/interruptions.c ****         if (pos_reconstruct == FALSE){
 2832              		.loc 1 1555 0
 2833 038a 664B     		ldr	r3, .L218+40
 2834 038c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2835 038e 002B     		cmp	r3, #0
 2836 0390 40F08A80 		bne	.L200
1556:..\src/interruptions.c ****             if (one_time_execute < 34) 
 2837              		.loc 1 1556 0
 2838 0394 644B     		ldr	r3, .L218+44
 2839 0396 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2840 0398 212B     		cmp	r3, #33
 2841 039a 06D8     		bhi	.L201
1557:..\src/interruptions.c ****                 one_time_execute++;
 2842              		.loc 1 1557 0
 2843 039c 624B     		ldr	r3, .L218+44
 2844 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2845 03a0 0133     		adds	r3, r3, #1
 2846 03a2 DAB2     		uxtb	r2, r3
 2847 03a4 604B     		ldr	r3, .L218+44
 2848 03a6 1A70     		strb	r2, [r3]
 2849 03a8 7EE0     		b	.L200
 2850              	.L201:
1558:..\src/interruptions.c ****             else {
1559:..\src/interruptions.c ****                 //Double encoder translation
1560:..\src/interruptions.c ****                 if (c_mem.double_encoder_on_off){
 2851              		.loc 1 1560 0
 2852 03aa 574B     		ldr	r3, .L218+12
 2853 03ac 93F81931 		ldrb	r3, [r3, #281]	@ zero_extendqisi2
 2854 03b0 002B     		cmp	r3, #0
 2855 03b2 1FD0     		beq	.L202
1561:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[0],comp_value_encoder[1]);
 2856              		.loc 1 1561 0
 2857 03b4 5D4B     		ldr	r3, .L218+48
 2858 03b6 1A68     		ldr	r2, [r3]
 2859 03b8 5C4B     		ldr	r3, .L218+48
 2860 03ba 5B68     		ldr	r3, [r3, #4]
 2861 03bc 1946     		mov	r1, r3
 2862 03be 1046     		mov	r0, r2
 2863 03c0 FFF7FEFF 		bl	calc_turns_fcn
 2864 03c4 0346     		mov	r3, r0
 2865 03c6 87F82730 		strb	r3, [r7, #39]
1562:..\src/interruptions.c ****                     if (c_mem.m_mult[0] < 0)
 2866              		.loc 1 1562 0
 2867 03ca 4F4B     		ldr	r3, .L218+12
 2868 03cc D3F8E830 		ldr	r3, [r3, #232]	@ float
 2869 03d0 4FF00001 		mov	r1, #0
 2870 03d4 1846     		mov	r0, r3
 2871 03d6 FFF7FEFF 		bl	__aeabi_fcmplt
 2872 03da 0346     		mov	r3, r0
 2873 03dc 002B     		cmp	r3, #0
 2874 03de 05D0     		beq	.L203
1563:..\src/interruptions.c ****                         init_rot = -init_rot;
 2875              		.loc 1 1563 0
 2876 03e0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 2877 03e4 5B42     		negs	r3, r3
 2878 03e6 DBB2     		uxtb	r3, r3
 2879 03e8 87F82730 		strb	r3, [r7, #39]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 80


 2880              	.L203:
1564:..\src/interruptions.c ****                     
1565:..\src/interruptions.c ****                     g_meas.rot[0] = (int8)init_rot;
 2881              		.loc 1 1565 0
 2882 03ec 454A     		ldr	r2, .L218+8
 2883 03ee 97F82730 		ldrb	r3, [r7, #39]
 2884 03f2 1376     		strb	r3, [r2, #24]
 2885              	.L202:
1566:..\src/interruptions.c ****                 }    
1567:..\src/interruptions.c **** 
1568:..\src/interruptions.c ****                 if (c_mem.m_mult[0] != 1.0)
 2886              		.loc 1 1568 0
 2887 03f4 444B     		ldr	r3, .L218+12
 2888 03f6 D3F8E830 		ldr	r3, [r3, #232]	@ float
 2889 03fa 4FF07E51 		mov	r1, #1065353216
 2890 03fe 1846     		mov	r0, r3
 2891 0400 FFF7FEFF 		bl	__aeabi_fcmpeq
 2892 0404 0346     		mov	r3, r0
 2893 0406 002B     		cmp	r3, #0
 2894 0408 13D1     		bne	.L205
1569:..\src/interruptions.c ****                     g_meas.pos[0] /= c_mem.m_mult[0];
 2895              		.loc 1 1569 0
 2896 040a 3E4B     		ldr	r3, .L218+8
 2897 040c 1B68     		ldr	r3, [r3]
 2898 040e 1846     		mov	r0, r3
 2899 0410 FFF7FEFF 		bl	__aeabi_i2f
 2900 0414 0246     		mov	r2, r0
 2901 0416 3C4B     		ldr	r3, .L218+12
 2902 0418 D3F8E830 		ldr	r3, [r3, #232]	@ float
 2903 041c 1946     		mov	r1, r3
 2904 041e 1046     		mov	r0, r2
 2905 0420 FFF7FEFF 		bl	__aeabi_fdiv
 2906 0424 0346     		mov	r3, r0
 2907 0426 1846     		mov	r0, r3
 2908 0428 FFF7FEFF 		bl	__aeabi_f2iz
 2909 042c 0246     		mov	r2, r0
 2910 042e 354B     		ldr	r3, .L218+8
 2911 0430 1A60     		str	r2, [r3]
 2912              	.L205:
1570:..\src/interruptions.c ****                 
1571:..\src/interruptions.c ****                 g_meas.pos[0] += (int32)(init_rot << 16);
 2913              		.loc 1 1571 0
 2914 0432 344B     		ldr	r3, .L218+8
 2915 0434 1A68     		ldr	r2, [r3]
 2916 0436 97F92730 		ldrsb	r3, [r7, #39]
 2917 043a 1B04     		lsls	r3, r3, #16
 2918 043c 1344     		add	r3, r3, r2
 2919 043e 314A     		ldr	r2, .L218+8
 2920 0440 1360     		str	r3, [r2]
1572:..\src/interruptions.c ****             
1573:..\src/interruptions.c ****                 if (c_mem.m_mult[0] != 1.0)
 2921              		.loc 1 1573 0
 2922 0442 314B     		ldr	r3, .L218+12
 2923 0444 D3F8E830 		ldr	r3, [r3, #232]	@ float
 2924 0448 4FF07E51 		mov	r1, #1065353216
 2925 044c 1846     		mov	r0, r3
 2926 044e FFF7FEFF 		bl	__aeabi_fcmpeq
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 81


 2927 0452 0346     		mov	r3, r0
 2928 0454 002B     		cmp	r3, #0
 2929 0456 13D1     		bne	.L207
1574:..\src/interruptions.c ****                     g_meas.pos[0] *= c_mem.m_mult[0];
 2930              		.loc 1 1574 0
 2931 0458 2A4B     		ldr	r3, .L218+8
 2932 045a 1B68     		ldr	r3, [r3]
 2933 045c 1846     		mov	r0, r3
 2934 045e FFF7FEFF 		bl	__aeabi_i2f
 2935 0462 0246     		mov	r2, r0
 2936 0464 284B     		ldr	r3, .L218+12
 2937 0466 D3F8E830 		ldr	r3, [r3, #232]	@ float
 2938 046a 1946     		mov	r1, r3
 2939 046c 1046     		mov	r0, r2
 2940 046e FFF7FEFF 		bl	__aeabi_fmul
 2941 0472 0346     		mov	r3, r0
 2942 0474 1846     		mov	r0, r3
 2943 0476 FFF7FEFF 		bl	__aeabi_f2iz
 2944 047a 0246     		mov	r2, r0
 2945 047c 214B     		ldr	r3, .L218+8
 2946 047e 1A60     		str	r2, [r3]
 2947              	.L207:
1575:..\src/interruptions.c ****             
1576:..\src/interruptions.c ****                 g_refNew.pos = g_meas.pos[0];
 2948              		.loc 1 1576 0
 2949 0480 204B     		ldr	r3, .L218+8
 2950 0482 1B68     		ldr	r3, [r3]
 2951 0484 2A4A     		ldr	r2, .L218+52
 2952 0486 1360     		str	r3, [r2]
1577:..\src/interruptions.c **** 
1578:..\src/interruptions.c ****                 // If necessary activate motor
1579:..\src/interruptions.c ****     			safe_startup_motor_activation = TRUE;
 2953              		.loc 1 1579 0
 2954 0488 2A4B     		ldr	r3, .L218+56
 2955 048a 0122     		movs	r2, #1
 2956 048c 1A70     		strb	r2, [r3]
1580:..\src/interruptions.c ****                 g_refNew.onoff = c_mem.activ;
 2957              		.loc 1 1580 0
 2958 048e 1E4B     		ldr	r3, .L218+12
 2959 0490 93F8D420 		ldrb	r2, [r3, #212]	@ zero_extendqisi2
 2960 0494 264B     		ldr	r3, .L218+52
 2961 0496 1A73     		strb	r2, [r3, #12]
1581:..\src/interruptions.c ****                 MOTOR_ON_OFF_1_Write(g_refNew.onoff);
 2962              		.loc 1 1581 0
 2963 0498 254B     		ldr	r3, .L218+52
 2964 049a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2965 049c 1846     		mov	r0, r3
 2966 049e FFF7FEFF 		bl	MOTOR_ON_OFF_1_Write
1582:..\src/interruptions.c ****                 
1583:..\src/interruptions.c ****                 pos_reconstruct = TRUE;
 2967              		.loc 1 1583 0
 2968 04a2 204B     		ldr	r3, .L218+40
 2969 04a4 0122     		movs	r2, #1
 2970 04a6 1A70     		strb	r2, [r3]
 2971              	.L200:
1462:..\src/interruptions.c ****         
 2972              		.loc 1 1462 0 discriminator 2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 82


 2973 04a8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2974 04ac 0133     		adds	r3, r3, #1
 2975 04ae 87F82F30 		strb	r3, [r7, #47]
 2976              	.L189:
1462:..\src/interruptions.c ****         
 2977              		.loc 1 1462 0 is_stmt 0 discriminator 1
 2978 04b2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2979 04b6 022B     		cmp	r3, #2
 2980 04b8 7FF614AE 		bls	.L209
1584:..\src/interruptions.c ****             }
1585:..\src/interruptions.c ****         }
1586:..\src/interruptions.c ****     } 
1587:..\src/interruptions.c **** 
1588:..\src/interruptions.c **** 	
1589:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1590:..\src/interruptions.c ****     if (safe_startup_motor_activation){
 2981              		.loc 1 1590 0 is_stmt 1
 2982 04bc 1D4B     		ldr	r3, .L218+56
 2983 04be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2984 04c0 002B     		cmp	r3, #0
 2985 04c2 3CD0     		beq	.L180
1591:..\src/interruptions.c ****         count_startup_motor++;
 2986              		.loc 1 1591 0
 2987 04c4 1C4B     		ldr	r3, .L218+60
 2988 04c6 1B68     		ldr	r3, [r3]
 2989 04c8 0133     		adds	r3, r3, #1
 2990 04ca 1B4A     		ldr	r2, .L218+60
 2991 04cc 1360     		str	r3, [r2]
1592:..\src/interruptions.c ****         if (count_startup_motor >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                          
 2992              		.loc 1 1592 0
 2993 04ce 1A4B     		ldr	r3, .L218+60
 2994 04d0 1B68     		ldr	r3, [r3]
 2995 04d2 B3F5FA5F 		cmp	r3, #8000
 2996 04d6 32D3     		bcc	.L180
1593:..\src/interruptions.c ****             g_refNew.pos = 0;
 2997              		.loc 1 1593 0
 2998 04d8 154B     		ldr	r3, .L218+52
 2999 04da 0022     		movs	r2, #0
 3000 04dc 1A60     		str	r2, [r3]
1594:..\src/interruptions.c ****             
1595:..\src/interruptions.c ****             g_refNew.onoff = c_mem.activ;
 3001              		.loc 1 1595 0
 3002 04de 0A4B     		ldr	r3, .L218+12
 3003 04e0 93F8D420 		ldrb	r2, [r3, #212]	@ zero_extendqisi2
 3004 04e4 124B     		ldr	r3, .L218+52
 3005 04e6 1A73     		strb	r2, [r3, #12]
1596:..\src/interruptions.c ****             MOTOR_ON_OFF_1_Write(g_refNew.onoff);
 3006              		.loc 1 1596 0
 3007 04e8 114B     		ldr	r3, .L218+52
 3008 04ea 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3009 04ec 1846     		mov	r0, r3
 3010 04ee FFF7FEFF 		bl	MOTOR_ON_OFF_1_Write
1597:..\src/interruptions.c ****             
1598:..\src/interruptions.c ****             safe_startup_motor_activation = FALSE;
 3011              		.loc 1 1598 0
 3012 04f2 104B     		ldr	r3, .L218+56
 3013 04f4 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 83


 3014 04f6 1A70     		strb	r2, [r3]
 3015 04f8 21E0     		b	.L180
 3016              	.L219:
 3017 04fa 00BF     		.align	2
 3018              	.L218:
 3019 04fc C4000000 		.word	error.10353
 3020 0500 AC000000 		.word	last_value_encoder.10351
 3021 0504 00000000 		.word	g_meas
 3022 0508 00000000 		.word	c_mem
 3023 050c C8000000 		.word	v_value.10359
 3024 0510 D4000000 		.word	vv_value.10360
 3025 0514 E0000000 		.word	vvv_value.10361
 3026 0518 00000000 		.word	filt_vel
 3027 051c 00000000 		.word	cycle_time
 3028 0520 0000C040 		.word	1086324736
 3029 0524 EC000000 		.word	pos_reconstruct.10358
 3030 0528 ED000000 		.word	one_time_execute.10356
 3031 052c B8000000 		.word	comp_value_encoder.10352
 3032 0530 00000000 		.word	g_refNew
 3033 0534 EE000000 		.word	safe_startup_motor_activation.10355
 3034 0538 F0000000 		.word	count_startup_motor.10357
 3035              	.L215:
1517:..\src/interruptions.c ****                 }
 3036              		.loc 1 1517 0
 3037 053c 00BF     		nop
 3038              	.L180:
1599:..\src/interruptions.c ****         }
1600:..\src/interruptions.c ****     }
1601:..\src/interruptions.c ****  
1602:..\src/interruptions.c **** }
 3039              		.loc 1 1602 0
 3040 053e 3437     		adds	r7, r7, #52
 3041              		.cfi_def_cfa_offset 12
 3042 0540 BD46     		mov	sp, r7
 3043              		.cfi_def_cfa_register 13
 3044              		@ sp needed
 3045 0542 90BD     		pop	{r4, r7, pc}
 3046              		.cfi_endproc
 3047              	.LFE70:
 3048              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 3049              		.section	.text.analog_read_end,"ax",%progbits
 3050              		.align	2
 3051              		.global	analog_read_end
 3052              		.thumb
 3053              		.thumb_func
 3054              		.type	analog_read_end, %function
 3055              	analog_read_end:
 3056              	.LFB71:
1603:..\src/interruptions.c **** 
1604:..\src/interruptions.c **** //==============================================================================
1605:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1606:..\src/interruptions.c **** //==============================================================================
1607:..\src/interruptions.c **** 
1608:..\src/interruptions.c **** void analog_read_end() {
 3057              		.loc 1 1608 0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 84


 3060              		@ frame_needed = 1, uses_anonymous_args = 0
 3061 0000 90B5     		push	{r4, r7, lr}
 3062              		.cfi_def_cfa_offset 12
 3063              		.cfi_offset 4, -12
 3064              		.cfi_offset 7, -8
 3065              		.cfi_offset 14, -4
 3066 0002 83B0     		sub	sp, sp, #12
 3067              		.cfi_def_cfa_offset 24
 3068 0004 00AF     		add	r7, sp, #0
 3069              		.cfi_def_cfa_register 7
1609:..\src/interruptions.c **** 
1610:..\src/interruptions.c ****     /* =========================================================================
1611:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1612:..\src/interruptions.c ****     /
1613:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1614:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1615:..\src/interruptions.c ****     /
1616:..\src/interruptions.c ****     /   Definition:
1617:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1618:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1619:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1620:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1621:..\src/interruptions.c ****     /
1622:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1623:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1624:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1625:..\src/interruptions.c ****     /  =========================================================================
1626:..\src/interruptions.c ****     */
1627:..\src/interruptions.c **** 
1628:..\src/interruptions.c ****     int32 CYDATA i_aux;
1629:..\src/interruptions.c **** 
1630:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1631:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1632:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1633:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1634:..\src/interruptions.c ****     static uint16 count = 0;
1635:..\src/interruptions.c ****     static uint32 v_count = 0;
1636:..\src/interruptions.c ****     static uint8 idx = 0;
1637:..\src/interruptions.c ****     
1638:..\src/interruptions.c ****     // Wait for conversion end
1639:..\src/interruptions.c ****     
1640:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 3070              		.loc 1 1640 0
 3071 0006 08E0     		b	.L221
 3072              	.L222:
1641:..\src/interruptions.c ****         
1642:..\src/interruptions.c ****         if (interrupt_flag){
 3073              		.loc 1 1642 0
 3074 0008 9A4B     		ldr	r3, .L319
 3075 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3076 000c 002B     		cmp	r3, #0
 3077 000e 04D0     		beq	.L221
1643:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3078              		.loc 1 1643 0
 3079 0010 984B     		ldr	r3, .L319
 3080 0012 0022     		movs	r2, #0
 3081 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 85


1644:..\src/interruptions.c ****             interrupt_manager();
 3082              		.loc 1 1644 0
 3083 0016 FFF7FEFF 		bl	interrupt_manager
 3084              	.L221:
1640:..\src/interruptions.c ****         
 3085              		.loc 1 1640 0
 3086 001a FFF7FEFF 		bl	ADC_STATUS_Read
 3087 001e 0346     		mov	r3, r0
 3088 0020 002B     		cmp	r3, #0
 3089 0022 F1D0     		beq	.L222
1645:..\src/interruptions.c ****         }
1646:..\src/interruptions.c ****     }
1647:..\src/interruptions.c ****     
1648:..\src/interruptions.c ****     // Convert tension read
1649:..\src/interruptions.c ****     dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 3090              		.loc 1 1649 0
 3091 0024 944B     		ldr	r3, .L319+4
 3092 0026 B3F90030 		ldrsh	r3, [r3]
 3093 002a A3F25563 		subw	r3, r3, #1621
 3094 002e 40F2C672 		movw	r2, #1990
 3095 0032 02FB03F3 		mul	r3, r2, r3
 3096 0036 DB11     		asrs	r3, r3, #7
 3097 0038 904A     		ldr	r2, .L319+8
 3098 003a 1360     		str	r3, [r2]
1650:..\src/interruptions.c ****     
1651:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1652:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 3099              		.loc 1 1652 0
 3100 003c 904B     		ldr	r3, .L319+12
 3101 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3102 0040 042B     		cmp	r3, #4
 3103 0042 0BD9     		bls	.L223
1653:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 3104              		.loc 1 1653 0
 3105 0044 8C4B     		ldr	r3, .L319+4
 3106 0046 B3F90830 		ldrsh	r3, [r3, #8]
 3107 004a A3F25563 		subw	r3, r3, #1621
 3108 004e 40F2C672 		movw	r2, #1990
 3109 0052 02FB03F3 		mul	r3, r2, r3
 3110 0056 DB11     		asrs	r3, r3, #7
 3111 0058 884A     		ldr	r2, .L319+8
 3112 005a 5360     		str	r3, [r2, #4]
 3113              	.L223:
1654:..\src/interruptions.c ****     }
1655:..\src/interruptions.c ****     
1656:..\src/interruptions.c ****     if (interrupt_flag){
 3114              		.loc 1 1656 0
 3115 005c 854B     		ldr	r3, .L319
 3116 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3117 0060 002B     		cmp	r3, #0
 3118 0062 04D0     		beq	.L224
1657:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 3119              		.loc 1 1657 0
 3120 0064 834B     		ldr	r3, .L319
 3121 0066 0022     		movs	r2, #0
 3122 0068 1A70     		strb	r2, [r3]
1658:..\src/interruptions.c ****         interrupt_manager();
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 86


 3123              		.loc 1 1658 0
 3124 006a FFF7FEFF 		bl	interrupt_manager
 3125              	.L224:
1659:..\src/interruptions.c ****     }
1660:..\src/interruptions.c ****     
1661:..\src/interruptions.c ****     // VOLTAGE READING
1662:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1663:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1664:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1665:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1666:..\src/interruptions.c ****     
1667:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 3126              		.loc 1 1667 0
 3127 006e 854B     		ldr	r3, .L319+16
 3128 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3129 0072 002B     		cmp	r3, #0
 3130 0074 4DD0     		beq	.L225
 3131              		.loc 1 1667 0 is_stmt 0 discriminator 1
 3132 0076 844B     		ldr	r3, .L319+20
 3133 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3134 007a 002B     		cmp	r3, #0
 3135 007c 49D0     		beq	.L225
1668:..\src/interruptions.c ****         count = count + 1;
 3136              		.loc 1 1668 0 is_stmt 1
 3137 007e 834B     		ldr	r3, .L319+24
 3138 0080 1B88     		ldrh	r3, [r3]
 3139 0082 0133     		adds	r3, r3, #1
 3140 0084 9AB2     		uxth	r2, r3
 3141 0086 814B     		ldr	r3, .L319+24
 3142 0088 1A80     		strh	r2, [r3]	@ movhi
1669:..\src/interruptions.c ****         
1670:..\src/interruptions.c ****         if (count == 1000){
 3143              		.loc 1 1670 0
 3144 008a 804B     		ldr	r3, .L319+24
 3145 008c 1B88     		ldrh	r3, [r3]
 3146 008e B3F57A7F 		cmp	r3, #1000
 3147 0092 3ED1     		bne	.L225
1671:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 3148              		.loc 1 1671 0
 3149 0094 7E4B     		ldr	r3, .L319+28
 3150 0096 0022     		movs	r2, #0
 3151 0098 1A70     		strb	r2, [r3]
 3152 009a 33E0     		b	.L226
 3153              	.L230:
1672:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 3154              		.loc 1 1672 0
 3155 009c 7C4B     		ldr	r3, .L319+28
 3156 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3157 00a0 1A46     		mov	r2, r3
 3158 00a2 764B     		ldr	r3, .L319+8
 3159 00a4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3160 00a8 42F22732 		movw	r2, #8999
 3161 00ac 9342     		cmp	r3, r2
 3162 00ae 08DC     		bgt	.L227
1673:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 3163              		.loc 1 1673 0
 3164 00b0 774B     		ldr	r3, .L319+28
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 87


 3165 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3166 00b4 1946     		mov	r1, r3
 3167 00b6 774B     		ldr	r3, .L319+32
 3168 00b8 4FF4FA52 		mov	r2, #8000
 3169 00bc 43F82120 		str	r2, [r3, r1, lsl #2]
 3170 00c0 1AE0     		b	.L228
 3171              	.L227:
1674:..\src/interruptions.c ****                 }
1675:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1676:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 3172              		.loc 1 1676 0
 3173 00c2 734B     		ldr	r3, .L319+28
 3174 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3175 00c6 1A46     		mov	r2, r3
 3176 00c8 6C4B     		ldr	r3, .L319+8
 3177 00ca 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3178 00ce 43F2C722 		movw	r2, #12999
 3179 00d2 9342     		cmp	r3, r2
 3180 00d4 08DC     		bgt	.L229
1677:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 3181              		.loc 1 1677 0
 3182 00d6 6E4B     		ldr	r3, .L319+28
 3183 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3184 00da 1946     		mov	r1, r3
 3185 00dc 6D4B     		ldr	r3, .L319+32
 3186 00de 42F6E062 		movw	r2, #12000
 3187 00e2 43F82120 		str	r2, [r3, r1, lsl #2]
 3188 00e6 07E0     		b	.L228
 3189              	.L229:
1678:..\src/interruptions.c ****                     }
1679:..\src/interruptions.c ****                     else
1680:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 3190              		.loc 1 1680 0
 3191 00e8 694B     		ldr	r3, .L319+28
 3192 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3193 00ec 1946     		mov	r1, r3
 3194 00ee 694B     		ldr	r3, .L319+32
 3195 00f0 45F6C052 		movw	r2, #24000
 3196 00f4 43F82120 		str	r2, [r3, r1, lsl #2]
 3197              	.L228:
1671:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 3198              		.loc 1 1671 0 discriminator 2
 3199 00f8 654B     		ldr	r3, .L319+28
 3200 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3201 00fc 0133     		adds	r3, r3, #1
 3202 00fe DAB2     		uxtb	r2, r3
 3203 0100 634B     		ldr	r3, .L319+28
 3204 0102 1A70     		strb	r2, [r3]
 3205              	.L226:
1671:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 3206              		.loc 1 1671 0 is_stmt 0 discriminator 1
 3207 0104 624B     		ldr	r3, .L319+28
 3208 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3209 0108 012B     		cmp	r3, #1
 3210 010a C7D9     		bls	.L230
1681:..\src/interruptions.c ****                 }
1682:..\src/interruptions.c ****             }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 88


1683:..\src/interruptions.c ****             first_tension_valid = FALSE;
 3211              		.loc 1 1683 0 is_stmt 1
 3212 010c 5D4B     		ldr	r3, .L319+16
 3213 010e 0022     		movs	r2, #0
 3214 0110 1A70     		strb	r2, [r3]
 3215              	.L225:
1684:..\src/interruptions.c ****         }
1685:..\src/interruptions.c ****     }
1686:..\src/interruptions.c **** 
1687:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1688:..\src/interruptions.c **** 
1689:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 3216              		.loc 1 1689 0
 3217 0112 5A4B     		ldr	r3, .L319+8
 3218 0114 1B68     		ldr	r3, [r3]
 3219 0116 41F65732 		movw	r2, #6999
 3220 011a 9342     		cmp	r3, r2
 3221 011c 00F38880 		bgt	.L231
 3222              		.loc 1 1689 0 is_stmt 0 discriminator 1
 3223 0120 574B     		ldr	r3, .L319+12
 3224 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3225 0124 042B     		cmp	r3, #4
 3226 0126 05D9     		bls	.L232
 3227              		.loc 1 1689 0 discriminator 2
 3228 0128 544B     		ldr	r3, .L319+8
 3229 012a 5B68     		ldr	r3, [r3, #4]
 3230 012c 41F65732 		movw	r2, #6999
 3231 0130 9342     		cmp	r3, r2
 3232 0132 7DDC     		bgt	.L231
 3233              	.L232:
1690:..\src/interruptions.c ****         // PSoC is powered through uUSB
1691:..\src/interruptions.c ****         
1692:..\src/interruptions.c ****         tension_valid = FALSE;
 3234              		.loc 1 1692 0 is_stmt 1
 3235 0134 544B     		ldr	r3, .L319+20
 3236 0136 0022     		movs	r2, #0
 3237 0138 1A70     		strb	r2, [r3]
1693:..\src/interruptions.c ****             
1694:..\src/interruptions.c ****         if (interrupt_flag){
 3238              		.loc 1 1694 0
 3239 013a 4E4B     		ldr	r3, .L319
 3240 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3241 013e 002B     		cmp	r3, #0
 3242 0140 04D0     		beq	.L233
1695:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3243              		.loc 1 1695 0
 3244 0142 4C4B     		ldr	r3, .L319
 3245 0144 0022     		movs	r2, #0
 3246 0146 1A70     		strb	r2, [r3]
1696:..\src/interruptions.c ****             interrupt_manager();
 3247              		.loc 1 1696 0
 3248 0148 FFF7FEFF 		bl	interrupt_manager
 3249              	.L233:
1697:..\src/interruptions.c ****         }
1698:..\src/interruptions.c ****         
1699:..\src/interruptions.c ****         if (c_mem.emg_calibration_flag) {
 3250              		.loc 1 1699 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 89


 3251 014c 524B     		ldr	r3, .L319+36
 3252 014e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 3253 0152 002B     		cmp	r3, #0
 3254 0154 1BD0     		beq	.L234
1700:..\src/interruptions.c ****             if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3255              		.loc 1 1700 0
 3256 0156 504B     		ldr	r3, .L319+36
 3257 0158 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 3258 015c 022B     		cmp	r3, #2
 3259 015e 0ED0     		beq	.L235
1701:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3260              		.loc 1 1701 0 discriminator 1
 3261 0160 4D4B     		ldr	r3, .L319+36
 3262 0162 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1700:..\src/interruptions.c ****             if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3263              		.loc 1 1700 0 discriminator 1
 3264 0166 032B     		cmp	r3, #3
 3265 0168 09D0     		beq	.L235
1702:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3266              		.loc 1 1702 0
 3267 016a 4B4B     		ldr	r3, .L319+36
 3268 016c 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1701:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3269              		.loc 1 1701 0
 3270 0170 042B     		cmp	r3, #4
 3271 0172 04D0     		beq	.L235
1703:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 3272              		.loc 1 1703 0
 3273 0174 484B     		ldr	r3, .L319+36
 3274 0176 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1702:..\src/interruptions.c ****                 (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3275              		.loc 1 1702 0
 3276 017a 052B     		cmp	r3, #5
 3277 017c 07D1     		bne	.L234
 3278              	.L235:
1704:..\src/interruptions.c ****                 g_ref.onoff = 0x00;
 3279              		.loc 1 1704 0
 3280 017e 474B     		ldr	r3, .L319+40
 3281 0180 0022     		movs	r2, #0
 3282 0182 1A73     		strb	r2, [r3, #12]
1705:..\src/interruptions.c ****                 MOTOR_ON_OFF_1_Write(g_ref.onoff);
 3283              		.loc 1 1705 0
 3284 0184 454B     		ldr	r3, .L319+40
 3285 0186 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3286 0188 1846     		mov	r0, r3
 3287 018a FFF7FEFF 		bl	MOTOR_ON_OFF_1_Write
 3288              	.L234:
1706:..\src/interruptions.c ****             }
1707:..\src/interruptions.c ****         }
1708:..\src/interruptions.c **** 
1709:..\src/interruptions.c ****         // Assign dev_tension and reset current
1710:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 3289              		.loc 1 1710 0
 3290 018e 404B     		ldr	r3, .L319+28
 3291 0190 0022     		movs	r2, #0
 3292 0192 1A70     		strb	r2, [r3]
 3293 0194 15E0     		b	.L236
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 90


 3294              	.L237:
1711:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 3295              		.loc 1 1711 0 discriminator 3
 3296 0196 3E4B     		ldr	r3, .L319+28
 3297 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3298 019a 1946     		mov	r1, r3
 3299 019c 374B     		ldr	r3, .L319+8
 3300 019e 41F28832 		movw	r2, #5000
 3301 01a2 43F82120 		str	r2, [r3, r1, lsl #2]
1712:..\src/interruptions.c ****             g_meas.curr[idx] = 0;
 3302              		.loc 1 1712 0 discriminator 3
 3303 01a6 3A4B     		ldr	r3, .L319+28
 3304 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3305 01aa 3D4A     		ldr	r2, .L319+44
 3306 01ac 0233     		adds	r3, r3, #2
 3307 01ae 9B00     		lsls	r3, r3, #2
 3308 01b0 1344     		add	r3, r3, r2
 3309 01b2 0022     		movs	r2, #0
 3310 01b4 5A60     		str	r2, [r3, #4]
1710:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 3311              		.loc 1 1710 0 discriminator 3
 3312 01b6 364B     		ldr	r3, .L319+28
 3313 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3314 01ba 0133     		adds	r3, r3, #1
 3315 01bc DAB2     		uxtb	r2, r3
 3316 01be 344B     		ldr	r3, .L319+28
 3317 01c0 1A70     		strb	r2, [r3]
 3318              	.L236:
1710:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 3319              		.loc 1 1710 0 is_stmt 0 discriminator 1
 3320 01c2 334B     		ldr	r3, .L319+28
 3321 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3322 01c6 012B     		cmp	r3, #1
 3323 01c8 E5D9     		bls	.L237
1713:..\src/interruptions.c ****         }
1714:..\src/interruptions.c ****         
1715:..\src/interruptions.c ****         // Reset emg
1716:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 3324              		.loc 1 1716 0 is_stmt 1
 3325 01ca 314B     		ldr	r3, .L319+28
 3326 01cc 0022     		movs	r2, #0
 3327 01ce 1A70     		strb	r2, [r3]
 3328 01d0 0DE0     		b	.L238
 3329              	.L239:
1717:..\src/interruptions.c ****             g_meas.emg[idx] = 0;
 3330              		.loc 1 1717 0 discriminator 3
 3331 01d2 2F4B     		ldr	r3, .L319+28
 3332 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3333 01d6 324A     		ldr	r2, .L319+44
 3334 01d8 0633     		adds	r3, r3, #6
 3335 01da 9B00     		lsls	r3, r3, #2
 3336 01dc 1344     		add	r3, r3, r2
 3337 01de 0022     		movs	r2, #0
 3338 01e0 5A60     		str	r2, [r3, #4]
1716:..\src/interruptions.c ****             g_meas.emg[idx] = 0;
 3339              		.loc 1 1716 0 discriminator 3
 3340 01e2 2B4B     		ldr	r3, .L319+28
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 91


 3341 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3342 01e6 0133     		adds	r3, r3, #1
 3343 01e8 DAB2     		uxtb	r2, r3
 3344 01ea 294B     		ldr	r3, .L319+28
 3345 01ec 1A70     		strb	r2, [r3]
 3346              	.L238:
1716:..\src/interruptions.c ****             g_meas.emg[idx] = 0;
 3347              		.loc 1 1716 0 is_stmt 0 discriminator 1
 3348 01ee 284B     		ldr	r3, .L319+28
 3349 01f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3350 01f2 012B     		cmp	r3, #1
 3351 01f4 EDD9     		bls	.L239
1718:..\src/interruptions.c ****         }
1719:..\src/interruptions.c ****         for (idx = 0; c_mem.read_emg_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 3352              		.loc 1 1719 0 is_stmt 1
 3353 01f6 264B     		ldr	r3, .L319+28
 3354 01f8 0022     		movs	r2, #0
 3355 01fa 1A70     		strb	r2, [r3]
 3356 01fc 0DE0     		b	.L240
 3357              	.L242:
1720:..\src/interruptions.c ****             g_meas.add_emg[idx] = 0;
 3358              		.loc 1 1720 0 discriminator 4
 3359 01fe 244B     		ldr	r3, .L319+28
 3360 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3361 0202 274A     		ldr	r2, .L319+44
 3362 0204 0E33     		adds	r3, r3, #14
 3363 0206 9B00     		lsls	r3, r3, #2
 3364 0208 1344     		add	r3, r3, r2
 3365 020a 0022     		movs	r2, #0
 3366 020c 5A60     		str	r2, [r3, #4]
1719:..\src/interruptions.c ****             g_meas.add_emg[idx] = 0;
 3367              		.loc 1 1719 0 discriminator 4
 3368 020e 204B     		ldr	r3, .L319+28
 3369 0210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3370 0212 0133     		adds	r3, r3, #1
 3371 0214 DAB2     		uxtb	r2, r3
 3372 0216 1E4B     		ldr	r3, .L319+28
 3373 0218 1A70     		strb	r2, [r3]
 3374              	.L240:
1719:..\src/interruptions.c ****             g_meas.add_emg[idx] = 0;
 3375              		.loc 1 1719 0 is_stmt 0 discriminator 1
 3376 021a 1F4B     		ldr	r3, .L319+36
 3377 021c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 3378 0220 002B     		cmp	r3, #0
 3379 0222 00F0C880 		beq	.L308
1719:..\src/interruptions.c ****             g_meas.add_emg[idx] = 0;
 3380              		.loc 1 1719 0 discriminator 3
 3381 0226 1A4B     		ldr	r3, .L319+28
 3382 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3383 022a 052B     		cmp	r3, #5
 3384 022c E7D9     		bls	.L242
1689:..\src/interruptions.c ****         // PSoC is powered through uUSB
 3385              		.loc 1 1689 0 is_stmt 1
 3386 022e C2E0     		b	.L308
 3387              	.L231:
1721:..\src/interruptions.c ****         }
1722:..\src/interruptions.c ****         
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 92


1723:..\src/interruptions.c ****     }
1724:..\src/interruptions.c ****     else {
1725:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1726:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1727:..\src/interruptions.c ****         
1728:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1729:..\src/interruptions.c ****         
1730:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 3388              		.loc 1 1730 0
 3389 0230 1C4B     		ldr	r3, .L319+48
 3390 0232 1B68     		ldr	r3, [r3]
 3391 0234 B3F57A7F 		cmp	r3, #1000
 3392 0238 0DD1     		bne	.L244
 3393              		.loc 1 1730 0 is_stmt 0 discriminator 1
 3394 023a 134B     		ldr	r3, .L319+20
 3395 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3396 023e 002B     		cmp	r3, #0
 3397 0240 09D1     		bne	.L244
1731:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1732:..\src/interruptions.c ****             tension_valid = TRUE;   
 3398              		.loc 1 1732 0 is_stmt 1
 3399 0242 114B     		ldr	r3, .L319+20
 3400 0244 0122     		movs	r2, #1
 3401 0246 1A70     		strb	r2, [r3]
1733:..\src/interruptions.c ****             count = 0;
 3402              		.loc 1 1733 0
 3403 0248 104B     		ldr	r3, .L319+24
 3404 024a 0022     		movs	r2, #0
 3405 024c 1A80     		strh	r2, [r3]	@ movhi
1734:..\src/interruptions.c ****             v_count = 0;
 3406              		.loc 1 1734 0
 3407 024e 154B     		ldr	r3, .L319+48
 3408 0250 0022     		movs	r2, #0
 3409 0252 1A60     		str	r2, [r3]
 3410 0254 47E0     		b	.L245
 3411              	.L244:
1735:..\src/interruptions.c ****         }
1736:..\src/interruptions.c ****         else {  
1737:..\src/interruptions.c ****             // wait for battery voltage stabilization
1738:..\src/interruptions.c ****             if (v_count < 1000) {
 3412              		.loc 1 1738 0
 3413 0256 134B     		ldr	r3, .L319+48
 3414 0258 1B68     		ldr	r3, [r3]
 3415 025a B3F57A7F 		cmp	r3, #1000
 3416 025e 04D2     		bcs	.L246
1739:..\src/interruptions.c ****                 v_count = v_count + 1;
 3417              		.loc 1 1739 0
 3418 0260 104B     		ldr	r3, .L319+48
 3419 0262 1B68     		ldr	r3, [r3]
 3420 0264 0133     		adds	r3, r3, #1
 3421 0266 0F4A     		ldr	r2, .L319+48
 3422 0268 1360     		str	r3, [r2]
 3423              	.L246:
1740:..\src/interruptions.c ****             }
1741:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 3424              		.loc 1 1741 0
 3425 026a 094B     		ldr	r3, .L319+28
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 93


 3426 026c 0022     		movs	r2, #0
 3427 026e 1A70     		strb	r2, [r3]
 3428 0270 35E0     		b	.L247
 3429              	.L320:
 3430 0272 00BF     		.align	2
 3431              	.L319:
 3432 0274 00000000 		.word	interrupt_flag
 3433 0278 00000000 		.word	ADC_buf
 3434 027c 00000000 		.word	dev_tension
 3435 0280 00000000 		.word	NUM_OF_ANALOG_INPUTS
 3436 0284 05000000 		.word	first_tension_valid.10379
 3437 0288 00000000 		.word	tension_valid
 3438 028c F4000000 		.word	count.10380
 3439 0290 F6000000 		.word	idx.10382
 3440 0294 00000000 		.word	pow_tension
 3441 0298 00000000 		.word	c_mem
 3442 029c 00000000 		.word	g_ref
 3443 02a0 00000000 		.word	g_meas
 3444 02a4 F8000000 		.word	v_count.10381
 3445              	.L248:
1742:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 3446              		.loc 1 1742 0 discriminator 3
 3447 02a8 934B     		ldr	r3, .L321
 3448 02aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3449 02ac 1C46     		mov	r4, r3
 3450 02ae 924B     		ldr	r3, .L321
 3451 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3452 02b2 1A46     		mov	r2, r3
 3453 02b4 914B     		ldr	r3, .L321+4
 3454 02b6 53F82200 		ldr	r0, [r3, r2, lsl #2]
 3455 02ba 8F4B     		ldr	r3, .L321
 3456 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3457 02be DB00     		lsls	r3, r3, #3
 3458 02c0 8F4A     		ldr	r2, .L321+8
 3459 02c2 1344     		add	r3, r3, r2
 3460 02c4 1946     		mov	r1, r3
 3461 02c6 FFF7FEFF 		bl	filter
 3462 02ca 0246     		mov	r2, r0
 3463 02cc 8D4B     		ldr	r3, .L321+12
 3464 02ce 43F82420 		str	r2, [r3, r4, lsl #2]
1741:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 3465              		.loc 1 1741 0 discriminator 3
 3466 02d2 894B     		ldr	r3, .L321
 3467 02d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3468 02d6 0133     		adds	r3, r3, #1
 3469 02d8 DAB2     		uxtb	r2, r3
 3470 02da 874B     		ldr	r3, .L321
 3471 02dc 1A70     		strb	r2, [r3]
 3472              	.L247:
1741:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 3473              		.loc 1 1741 0 is_stmt 0 discriminator 1
 3474 02de 864B     		ldr	r3, .L321
 3475 02e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3476 02e2 012B     		cmp	r3, #1
 3477 02e4 E0D9     		bls	.L248
 3478              	.L245:
1743:..\src/interruptions.c ****             }
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 94


1744:..\src/interruptions.c ****         }
1745:..\src/interruptions.c **** 
1746:..\src/interruptions.c ****         if(g_mem.activate_pwm_rescaling)        //pwm rescaling is activated
 3479              		.loc 1 1746 0 is_stmt 1
 3480 02e6 884B     		ldr	r3, .L321+16
 3481 02e8 93F81B31 		ldrb	r3, [r3, #283]	@ zero_extendqisi2
 3482 02ec 002B     		cmp	r3, #0
 3483 02ee 01D0     		beq	.L249
1747:..\src/interruptions.c ****             pwm_limit_search();                 //only for 12V motor
 3484              		.loc 1 1747 0
 3485 02f0 FFF7FEFF 		bl	pwm_limit_search
 3486              	.L249:
1748:..\src/interruptions.c **** 
1749:..\src/interruptions.c ****         // Filter and Set currents
1750:..\src/interruptions.c ****         g_meas.curr[0] = filter((int16) (((int32)(ADC_buf[1] - 1648) * 22634) >> 13) * pwm_sign, &f
 3487              		.loc 1 1750 0
 3488 02f4 854B     		ldr	r3, .L321+20
 3489 02f6 B3F90230 		ldrsh	r3, [r3, #2]
 3490 02fa A3F5CE63 		sub	r3, r3, #1648
 3491 02fe 45F66A02 		movw	r2, #22634
 3492 0302 02FB03F3 		mul	r3, r2, r3
 3493 0306 5B13     		asrs	r3, r3, #13
 3494 0308 1BB2     		sxth	r3, r3
 3495 030a 1A46     		mov	r2, r3
 3496 030c 804B     		ldr	r3, .L321+24
 3497 030e 93F90030 		ldrsb	r3, [r3]
 3498 0312 03FB02F3 		mul	r3, r3, r2
 3499 0316 7F49     		ldr	r1, .L321+28
 3500 0318 1846     		mov	r0, r3
 3501 031a FFF7FEFF 		bl	filter
 3502 031e 0246     		mov	r2, r0
 3503 0320 7D4B     		ldr	r3, .L321+32
 3504 0322 DA60     		str	r2, [r3, #12]
1751:..\src/interruptions.c ****         
1752:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1753:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 3505              		.loc 1 1753 0
 3506 0324 7D4B     		ldr	r3, .L321+36
 3507 0326 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3508 0328 042B     		cmp	r3, #4
 3509 032a 17D9     		bls	.L250
1754:..\src/interruptions.c ****             // Filter and Set currents
1755:..\src/interruptions.c ****             g_meas.curr[1] = filter((int16) (((int32)(ADC_buf[5] - 1648) * 22634) >> 13) * pwm_sign
 3510              		.loc 1 1755 0
 3511 032c 774B     		ldr	r3, .L321+20
 3512 032e B3F90A30 		ldrsh	r3, [r3, #10]
 3513 0332 A3F5CE63 		sub	r3, r3, #1648
 3514 0336 45F66A02 		movw	r2, #22634
 3515 033a 02FB03F3 		mul	r3, r2, r3
 3516 033e 5B13     		asrs	r3, r3, #13
 3517 0340 1BB2     		sxth	r3, r3
 3518 0342 1A46     		mov	r2, r3
 3519 0344 724B     		ldr	r3, .L321+24
 3520 0346 93F90030 		ldrsb	r3, [r3]
 3521 034a 03FB02F3 		mul	r3, r3, r2
 3522 034e 7449     		ldr	r1, .L321+40
 3523 0350 1846     		mov	r0, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 95


 3524 0352 FFF7FEFF 		bl	filter
 3525 0356 0246     		mov	r2, r0
 3526 0358 6F4B     		ldr	r3, .L321+32
 3527 035a 1A61     		str	r2, [r3, #16]
 3528              	.L250:
1756:..\src/interruptions.c ****         }
1757:..\src/interruptions.c ****     
1758:..\src/interruptions.c **** 		// Calculate current estimation and put it in the second part of the current measurement array;
1759:..\src/interruptions.c **** 		g_meas.estim_curr = (int16) filter(((int32) g_meas.curr) - curr_estim(g_meas.pos[0] >> g_mem.res[
 3529              		.loc 1 1759 0
 3530 035c 714C     		ldr	r4, .L321+44
 3531 035e 6E4B     		ldr	r3, .L321+32
 3532 0360 1B68     		ldr	r3, [r3]
 3533 0362 694A     		ldr	r2, .L321+16
 3534 0364 92F8D720 		ldrb	r2, [r2, #215]	@ zero_extendqisi2
 3535 0368 43FA02F0 		asr	r0, r3, r2
 3536 036c 6A4B     		ldr	r3, .L321+32
 3537 036e 5B6A     		ldr	r3, [r3, #36]
 3538 0370 654A     		ldr	r2, .L321+16
 3539 0372 92F8D720 		ldrb	r2, [r2, #215]	@ zero_extendqisi2
 3540 0376 43FA02F1 		asr	r1, r3, r2
 3541 037a 6B4B     		ldr	r3, .L321+48
 3542 037c 1B68     		ldr	r3, [r3]
 3543 037e 624A     		ldr	r2, .L321+16
 3544 0380 92F8D720 		ldrb	r2, [r2, #215]	@ zero_extendqisi2
 3545 0384 1341     		asrs	r3, r3, r2
 3546 0386 1A46     		mov	r2, r3
 3547 0388 FFF7FEFF 		bl	curr_estim
 3548 038c 0346     		mov	r3, r0
 3549 038e E31A     		subs	r3, r4, r3
 3550 0390 6649     		ldr	r1, .L321+52
 3551 0392 1846     		mov	r0, r3
 3552 0394 FFF7FEFF 		bl	filter
 3553 0398 0346     		mov	r3, r0
 3554 039a 1BB2     		sxth	r3, r3
 3555 039c 1A46     		mov	r2, r3
 3556 039e 5E4B     		ldr	r3, .L321+32
 3557 03a0 5A61     		str	r2, [r3, #20]
1760:..\src/interruptions.c **** 
1761:..\src/interruptions.c ****         // Check Interrupt 
1762:..\src/interruptions.c ****     
1763:..\src/interruptions.c ****         if (interrupt_flag){
 3558              		.loc 1 1763 0
 3559 03a2 634B     		ldr	r3, .L321+56
 3560 03a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3561 03a6 002B     		cmp	r3, #0
 3562 03a8 06D0     		beq	.L243
1764:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3563              		.loc 1 1764 0
 3564 03aa 614B     		ldr	r3, .L321+56
 3565 03ac 0022     		movs	r2, #0
 3566 03ae 1A70     		strb	r2, [r3]
1765:..\src/interruptions.c ****             interrupt_manager();
 3567              		.loc 1 1765 0
 3568 03b0 FFF7FEFF 		bl	interrupt_manager
 3569 03b4 00E0     		b	.L243
 3570              	.L308:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 96


1689:..\src/interruptions.c ****         // PSoC is powered through uUSB
 3571              		.loc 1 1689 0
 3572 03b6 00BF     		nop
 3573              	.L243:
1766:..\src/interruptions.c ****         }
1767:..\src/interruptions.c **** 
1768:..\src/interruptions.c ****     }
1769:..\src/interruptions.c ****     
1770:..\src/interruptions.c ****     // Read EMG (if necessary)
1771:..\src/interruptions.c ****     if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 3574              		.loc 1 1771 0
 3575 03b8 5E4B     		ldr	r3, .L321+60
 3576 03ba 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 3577 03be 022B     		cmp	r3, #2
 3578 03c0 0FD0     		beq	.L251
1772:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3579              		.loc 1 1772 0 discriminator 1
 3580 03c2 5C4B     		ldr	r3, .L321+60
 3581 03c4 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1771:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3582              		.loc 1 1771 0 discriminator 1
 3583 03c8 032B     		cmp	r3, #3
 3584 03ca 0AD0     		beq	.L251
1773:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3585              		.loc 1 1773 0
 3586 03cc 594B     		ldr	r3, .L321+60
 3587 03ce 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1772:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 3588              		.loc 1 1772 0
 3589 03d2 042B     		cmp	r3, #4
 3590 03d4 05D0     		beq	.L251
1774:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 3591              		.loc 1 1774 0
 3592 03d6 574B     		ldr	r3, .L321+60
 3593 03d8 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1773:..\src/interruptions.c ****             (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 3594              		.loc 1 1773 0
 3595 03dc 052B     		cmp	r3, #5
 3596 03de 40F06C82 		bne	.L252
 3597              	.L251:
1775:..\src/interruptions.c ****         
1776:..\src/interruptions.c ****         // if calibration is not needed go to "normal execution"
1777:..\src/interruptions.c ****         if (!c_mem.emg_calibration_flag){
 3598              		.loc 1 1777 0
 3599 03e2 544B     		ldr	r3, .L321+60
 3600 03e4 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 3601 03e8 002B     		cmp	r3, #0
 3602 03ea 05D1     		bne	.L253
1778:..\src/interruptions.c ****             emg_1_status = NORMAL; // normal execution
 3603              		.loc 1 1778 0
 3604 03ec 524B     		ldr	r3, .L321+64
 3605 03ee 0022     		movs	r2, #0
 3606 03f0 1A70     		strb	r2, [r3]
1779:..\src/interruptions.c ****             emg_2_status = NORMAL; // normal execution
 3607              		.loc 1 1779 0
 3608 03f2 524B     		ldr	r3, .L321+68
 3609 03f4 0022     		movs	r2, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 97


 3610 03f6 1A70     		strb	r2, [r3]
 3611              	.L253:
1780:..\src/interruptions.c ****         }
1781:..\src/interruptions.c **** 
1782:..\src/interruptions.c ****         // EMG 1 calibration state machine
1783:..\src/interruptions.c ****        
1784:..\src/interruptions.c ****         // Calibration state machine
1785:..\src/interruptions.c ****         switch(emg_1_status) {
 3612              		.loc 1 1785 0
 3613 03f8 4F4B     		ldr	r3, .L321+64
 3614 03fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3615 03fc 032B     		cmp	r3, #3
 3616 03fe 00F2F880 		bhi	.L309
 3617 0402 01A2     		adr	r2, .L256
 3618 0404 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3619              		.p2align 2
 3620              	.L256:
 3621 0408 19040000 		.word	.L255+1
 3622 040c A3040000 		.word	.L257+1
 3623 0410 B9040000 		.word	.L258+1
 3624 0414 49050000 		.word	.L259+1
 3625              		.p2align 1
 3626              	.L255:
1786:..\src/interruptions.c ****             case NORMAL: // normal execution
1787:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.switch_emg] - 1639) * 87) >> 5;  //map range to 
 3627              		.loc 1 1787 0
 3628 0418 464B     		ldr	r3, .L321+60
 3629 041a 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 3630 041e 0233     		adds	r3, r3, #2
 3631 0420 3A4A     		ldr	r2, .L321+20
 3632 0422 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3633 0426 A3F26763 		subw	r3, r3, #1639
 3634 042a 5722     		movs	r2, #87
 3635 042c 02FB03F3 		mul	r3, r2, r3
 3636 0430 5B11     		asrs	r3, r3, #5
 3637 0432 7B60     		str	r3, [r7, #4]
1788:..\src/interruptions.c ****                 //i_aux = (int32)(ADC_buf[2 + c_mem.switch_emg]);
1789:..\src/interruptions.c ****                 if (i_aux < 0) 
 3638              		.loc 1 1789 0
 3639 0434 7B68     		ldr	r3, [r7, #4]
 3640 0436 002B     		cmp	r3, #0
 3641 0438 01DA     		bge	.L260
1790:..\src/interruptions.c ****                     i_aux = 0;
 3642              		.loc 1 1790 0
 3643 043a 0023     		movs	r3, #0
 3644 043c 7B60     		str	r3, [r7, #4]
 3645              	.L260:
1791:..\src/interruptions.c ****                 i_aux = filter(i_aux, &filt_emg[0]);
 3646              		.loc 1 1791 0
 3647 043e 4049     		ldr	r1, .L321+72
 3648 0440 7868     		ldr	r0, [r7, #4]
 3649 0442 FFF7FEFF 		bl	filter
 3650 0446 7860     		str	r0, [r7, #4]
1792:..\src/interruptions.c ****                 i_aux = (i_aux << 10) / g_mem.emg_max_value[0];
 3651              		.loc 1 1792 0
 3652 0448 7B68     		ldr	r3, [r7, #4]
 3653 044a 9B02     		lsls	r3, r3, #10
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 98


 3654 044c 1A46     		mov	r2, r3
 3655 044e 2E4B     		ldr	r3, .L321+16
 3656 0450 D3F81031 		ldr	r3, [r3, #272]
 3657 0454 B2FBF3F3 		udiv	r3, r2, r3
 3658 0458 7B60     		str	r3, [r7, #4]
1793:..\src/interruptions.c ****     
1794:..\src/interruptions.c ****                 if (interrupt_flag){
 3659              		.loc 1 1794 0
 3660 045a 354B     		ldr	r3, .L321+56
 3661 045c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3662 045e 002B     		cmp	r3, #0
 3663 0460 04D0     		beq	.L261
1795:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3664              		.loc 1 1795 0
 3665 0462 334B     		ldr	r3, .L321+56
 3666 0464 0022     		movs	r2, #0
 3667 0466 1A70     		strb	r2, [r3]
1796:..\src/interruptions.c ****                     interrupt_manager();
 3668              		.loc 1 1796 0
 3669 0468 FFF7FEFF 		bl	interrupt_manager
 3670              	.L261:
1797:..\src/interruptions.c ****                 }
1798:..\src/interruptions.c ****                 //Saturation
1799:..\src/interruptions.c ****                 if (i_aux < 0)
 3671              		.loc 1 1799 0
 3672 046c 7B68     		ldr	r3, [r7, #4]
 3673 046e 002B     		cmp	r3, #0
 3674 0470 02DA     		bge	.L262
1800:..\src/interruptions.c ****                     i_aux = 0;
 3675              		.loc 1 1800 0
 3676 0472 0023     		movs	r3, #0
 3677 0474 7B60     		str	r3, [r7, #4]
 3678 0476 06E0     		b	.L263
 3679              	.L262:
1801:..\src/interruptions.c ****                 else 
1802:..\src/interruptions.c ****                     if (i_aux > 1024) 
 3680              		.loc 1 1802 0
 3681 0478 7B68     		ldr	r3, [r7, #4]
 3682 047a B3F5806F 		cmp	r3, #1024
 3683 047e 02DD     		ble	.L263
1803:..\src/interruptions.c ****                         i_aux = 1024;
 3684              		.loc 1 1803 0
 3685 0480 4FF48063 		mov	r3, #1024
 3686 0484 7B60     		str	r3, [r7, #4]
 3687              	.L263:
1804:..\src/interruptions.c ****                 
1805:..\src/interruptions.c ****                 g_meas.emg[0] = i_aux;
 3688              		.loc 1 1805 0
 3689 0486 244A     		ldr	r2, .L321+32
 3690 0488 7B68     		ldr	r3, [r7, #4]
 3691 048a D361     		str	r3, [r2, #28]
1806:..\src/interruptions.c ****     
1807:..\src/interruptions.c ****                 if (interrupt_flag){
 3692              		.loc 1 1807 0
 3693 048c 284B     		ldr	r3, .L321+56
 3694 048e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3695 0490 002B     		cmp	r3, #0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 99


 3696 0492 00F0B080 		beq	.L310
1808:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3697              		.loc 1 1808 0
 3698 0496 264B     		ldr	r3, .L321+56
 3699 0498 0022     		movs	r2, #0
 3700 049a 1A70     		strb	r2, [r3]
1809:..\src/interruptions.c ****                     interrupt_manager();
 3701              		.loc 1 1809 0
 3702 049c FFF7FEFF 		bl	interrupt_manager
1810:..\src/interruptions.c ****                 }
1811:..\src/interruptions.c ****                 
1812:..\src/interruptions.c ****                 break;
 3703              		.loc 1 1812 0
 3704 04a0 A9E0     		b	.L310
 3705              	.L257:
1813:..\src/interruptions.c **** 
1814:..\src/interruptions.c ****             case RESET: // reset variables
1815:..\src/interruptions.c ****                 emg_counter_1 = 0;
 3706              		.loc 1 1815 0
 3707 04a2 284B     		ldr	r3, .L321+76
 3708 04a4 0022     		movs	r2, #0
 3709 04a6 1A80     		strh	r2, [r3]	@ movhi
1816:..\src/interruptions.c ****                 g_mem.emg_max_value[0] = 0;
 3710              		.loc 1 1816 0
 3711 04a8 174B     		ldr	r3, .L321+16
 3712 04aa 0022     		movs	r2, #0
 3713 04ac C3F81021 		str	r2, [r3, #272]
1817:..\src/interruptions.c ****                 emg_1_status = DISCARD; // goto next status  
 3714              		.loc 1 1817 0
 3715 04b0 214B     		ldr	r3, .L321+64
 3716 04b2 0222     		movs	r2, #2
 3717 04b4 1A70     		strb	r2, [r3]
1818:..\src/interruptions.c ****                 break;
 3718              		.loc 1 1818 0
 3719 04b6 A3E0     		b	.L265
 3720              	.L258:
1819:..\src/interruptions.c **** 
1820:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1821:..\src/interruptions.c ****                 emg_counter_1++;
 3721              		.loc 1 1821 0
 3722 04b8 224B     		ldr	r3, .L321+76
 3723 04ba 1B88     		ldrh	r3, [r3]
 3724 04bc 0133     		adds	r3, r3, #1
 3725 04be 9AB2     		uxth	r2, r3
 3726 04c0 204B     		ldr	r3, .L321+76
 3727 04c2 1A80     		strh	r2, [r3]	@ movhi
1822:..\src/interruptions.c ****                 if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 3728              		.loc 1 1822 0
 3729 04c4 1F4B     		ldr	r3, .L321+76
 3730 04c6 1B88     		ldrh	r3, [r3]
 3731 04c8 B3F5FA7F 		cmp	r3, #500
 3732 04cc 40F09580 		bne	.L311
1823:..\src/interruptions.c ****                     emg_counter_1 = 0;          // reset counter
 3733              		.loc 1 1823 0
 3734 04d0 1C4B     		ldr	r3, .L321+76
 3735 04d2 0022     		movs	r2, #0
 3736 04d4 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 100


1824:..\src/interruptions.c ****                     LED_control(1);
 3737              		.loc 1 1824 0
 3738 04d6 0120     		movs	r0, #1
 3739 04d8 FFF7FEFF 		bl	LED_control
1825:..\src/interruptions.c **** 					
1826:..\src/interruptions.c ****                     if (interrupt_flag){
 3740              		.loc 1 1826 0
 3741 04dc 144B     		ldr	r3, .L321+56
 3742 04de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3743 04e0 002B     		cmp	r3, #0
 3744 04e2 04D0     		beq	.L267
1827:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3745              		.loc 1 1827 0
 3746 04e4 124B     		ldr	r3, .L321+56
 3747 04e6 0022     		movs	r2, #0
 3748 04e8 1A70     		strb	r2, [r3]
1828:..\src/interruptions.c ****                         interrupt_manager();
 3749              		.loc 1 1828 0
 3750 04ea FFF7FEFF 		bl	interrupt_manager
 3751              	.L267:
1829:..\src/interruptions.c ****                     }
1830:..\src/interruptions.c ****                     
1831:..\src/interruptions.c ****                     emg_1_status = SUM_AND_MEAN;    // sum and mean status
 3752              		.loc 1 1831 0
 3753 04ee 124B     		ldr	r3, .L321+64
 3754 04f0 0322     		movs	r2, #3
 3755 04f2 1A70     		strb	r2, [r3]
1832:..\src/interruptions.c ****                 }
1833:..\src/interruptions.c ****                 break;
 3756              		.loc 1 1833 0
 3757 04f4 81E0     		b	.L311
 3758              	.L322:
 3759 04f6 00BF     		.align	2
 3760              	.L321:
 3761 04f8 F6000000 		.word	idx.10382
 3762 04fc 00000000 		.word	dev_tension
 3763 0500 00000000 		.word	filt_v
 3764 0504 00000000 		.word	dev_tension_f
 3765 0508 00000000 		.word	g_mem
 3766 050c 00000000 		.word	ADC_buf
 3767 0510 00000000 		.word	pwm_sign
 3768 0514 00000000 		.word	filt_i
 3769 0518 00000000 		.word	g_meas
 3770 051c 00000000 		.word	NUM_OF_ANALOG_INPUTS
 3771 0520 08000000 		.word	filt_i+8
 3772 0524 0C000000 		.word	g_meas+12
 3773 0528 00000000 		.word	g_ref
 3774 052c 00000000 		.word	filt_curr_diff
 3775 0530 00000000 		.word	interrupt_flag
 3776 0534 00000000 		.word	c_mem
 3777 0538 00000000 		.word	emg_1_status
 3778 053c 00000000 		.word	emg_2_status
 3779 0540 00000000 		.word	filt_emg
 3780 0544 FC000000 		.word	emg_counter_1.10377
 3781              	.L259:
1834:..\src/interruptions.c **** 
1835:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 101


1836:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1837:..\src/interruptions.c ****                 emg_counter_1++;
 3782              		.loc 1 1837 0
 3783 0548 A44B     		ldr	r3, .L323
 3784 054a 1B88     		ldrh	r3, [r3]
 3785 054c 0133     		adds	r3, r3, #1
 3786 054e 9AB2     		uxth	r2, r3
 3787 0550 A24B     		ldr	r3, .L323
 3788 0552 1A80     		strh	r2, [r3]	@ movhi
1838:..\src/interruptions.c ****                 if (ADC_buf[2 + c_mem.switch_emg] < 0) 
 3789              		.loc 1 1838 0
 3790 0554 A24B     		ldr	r3, .L323+4
 3791 0556 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 3792 055a 0233     		adds	r3, r3, #2
 3793 055c A14A     		ldr	r2, .L323+8
 3794 055e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3795 0562 002B     		cmp	r3, #0
 3796 0564 07DA     		bge	.L268
1839:..\src/interruptions.c ****                     ADC_buf[2 + c_mem.switch_emg] = 0;
 3797              		.loc 1 1839 0
 3798 0566 9E4B     		ldr	r3, .L323+4
 3799 0568 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 3800 056c 0233     		adds	r3, r3, #2
 3801 056e 9D4A     		ldr	r2, .L323+8
 3802 0570 0021     		movs	r1, #0
 3803 0572 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 3804              	.L268:
1840:..\src/interruptions.c ****                 g_mem.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.switch_emg], &filt_emg[0]
 3805              		.loc 1 1840 0
 3806 0576 9A4B     		ldr	r3, .L323+4
 3807 0578 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 3808 057c 0233     		adds	r3, r3, #2
 3809 057e 994A     		ldr	r2, .L323+8
 3810 0580 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3811 0584 9849     		ldr	r1, .L323+12
 3812 0586 1846     		mov	r0, r3
 3813 0588 FFF7FEFF 		bl	filter
 3814 058c 0246     		mov	r2, r0
 3815 058e 974B     		ldr	r3, .L323+16
 3816 0590 D3F81031 		ldr	r3, [r3, #272]
 3817 0594 1344     		add	r3, r3, r2
 3818 0596 954A     		ldr	r2, .L323+16
 3819 0598 C2F81031 		str	r3, [r2, #272]
1841:..\src/interruptions.c ****                 
1842:..\src/interruptions.c ****                 if (interrupt_flag){
 3820              		.loc 1 1842 0
 3821 059c 944B     		ldr	r3, .L323+20
 3822 059e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3823 05a0 002B     		cmp	r3, #0
 3824 05a2 04D0     		beq	.L269
1843:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3825              		.loc 1 1843 0
 3826 05a4 924B     		ldr	r3, .L323+20
 3827 05a6 0022     		movs	r2, #0
 3828 05a8 1A70     		strb	r2, [r3]
1844:..\src/interruptions.c ****                     interrupt_manager();
 3829              		.loc 1 1844 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 102


 3830 05aa FFF7FEFF 		bl	interrupt_manager
 3831              	.L269:
1845:..\src/interruptions.c ****                 }
1846:..\src/interruptions.c ****                 
1847:..\src/interruptions.c ****                 if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 3832              		.loc 1 1847 0
 3833 05ae 8B4B     		ldr	r3, .L323
 3834 05b0 1B88     		ldrh	r3, [r3]
 3835 05b2 B3F57A7F 		cmp	r3, #1000
 3836 05b6 22D1     		bne	.L312
1848:..\src/interruptions.c ****                     g_mem.emg_max_value[0] = g_mem.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // calc
 3837              		.loc 1 1848 0
 3838 05b8 8C4B     		ldr	r3, .L323+16
 3839 05ba D3F81031 		ldr	r3, [r3, #272]
 3840 05be 8D4A     		ldr	r2, .L323+24
 3841 05c0 A2FB0323 		umull	r2, r3, r2, r3
 3842 05c4 9B09     		lsrs	r3, r3, #6
 3843 05c6 894A     		ldr	r2, .L323+16
 3844 05c8 C2F81031 		str	r3, [r2, #272]
1849:..\src/interruptions.c ****     
1850:..\src/interruptions.c ****                     if (interrupt_flag){
 3845              		.loc 1 1850 0
 3846 05cc 884B     		ldr	r3, .L323+20
 3847 05ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3848 05d0 002B     		cmp	r3, #0
 3849 05d2 04D0     		beq	.L271
1851:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3850              		.loc 1 1851 0
 3851 05d4 864B     		ldr	r3, .L323+20
 3852 05d6 0022     		movs	r2, #0
 3853 05d8 1A70     		strb	r2, [r3]
1852:..\src/interruptions.c ****                         interrupt_manager();
 3854              		.loc 1 1852 0
 3855 05da FFF7FEFF 		bl	interrupt_manager
 3856              	.L271:
1853:..\src/interruptions.c ****                     }                    
1854:..\src/interruptions.c ****                     
1855:..\src/interruptions.c ****                     LED_control(0);
 3857              		.loc 1 1855 0
 3858 05de 0020     		movs	r0, #0
 3859 05e0 FFF7FEFF 		bl	LED_control
1856:..\src/interruptions.c **** 					
1857:..\src/interruptions.c ****                     emg_counter_1 = 0;          // reset counter
 3860              		.loc 1 1857 0
 3861 05e4 7D4B     		ldr	r3, .L323
 3862 05e6 0022     		movs	r2, #0
 3863 05e8 1A80     		strh	r2, [r3]	@ movhi
1858:..\src/interruptions.c **** 
1859:..\src/interruptions.c ****                     emg_1_status = NORMAL;      // goto normal execution
 3864              		.loc 1 1859 0
 3865 05ea 834B     		ldr	r3, .L323+28
 3866 05ec 0022     		movs	r2, #0
 3867 05ee 1A70     		strb	r2, [r3]
1860:..\src/interruptions.c ****                 }
1861:..\src/interruptions.c ****                 break;
 3868              		.loc 1 1861 0
 3869 05f0 05E0     		b	.L312
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 103


 3870              	.L309:
1862:..\src/interruptions.c **** 
1863:..\src/interruptions.c ****             default:
1864:..\src/interruptions.c ****                 break;
 3871              		.loc 1 1864 0
 3872 05f2 00BF     		nop
 3873 05f4 04E0     		b	.L265
 3874              	.L310:
1812:..\src/interruptions.c **** 
 3875              		.loc 1 1812 0
 3876 05f6 00BF     		nop
 3877 05f8 02E0     		b	.L265
 3878              	.L311:
1833:..\src/interruptions.c **** 
 3879              		.loc 1 1833 0
 3880 05fa 00BF     		nop
 3881 05fc 00E0     		b	.L265
 3882              	.L312:
1861:..\src/interruptions.c **** 
 3883              		.loc 1 1861 0
 3884 05fe 00BF     		nop
 3885              	.L265:
1865:..\src/interruptions.c ****         }
1866:..\src/interruptions.c ****     
1867:..\src/interruptions.c ****         if (interrupt_flag){
 3886              		.loc 1 1867 0
 3887 0600 7B4B     		ldr	r3, .L323+20
 3888 0602 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3889 0604 002B     		cmp	r3, #0
 3890 0606 04D0     		beq	.L272
1868:..\src/interruptions.c ****             interrupt_flag = FALSE;
 3891              		.loc 1 1868 0
 3892 0608 794B     		ldr	r3, .L323+20
 3893 060a 0022     		movs	r2, #0
 3894 060c 1A70     		strb	r2, [r3]
1869:..\src/interruptions.c ****             interrupt_manager();
 3895              		.loc 1 1869 0
 3896 060e FFF7FEFF 		bl	interrupt_manager
 3897              	.L272:
1870:..\src/interruptions.c ****         }
1871:..\src/interruptions.c ****         // EMG 2 calibration state machine
1872:..\src/interruptions.c ****         switch(emg_2_status) {
 3898              		.loc 1 1872 0
 3899 0612 7A4B     		ldr	r3, .L323+32
 3900 0614 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3901 0616 052B     		cmp	r3, #5
 3902 0618 00F23D81 		bhi	.L313
 3903 061c 01A2     		adr	r2, .L275
 3904 061e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3905 0622 00BF     		.p2align 2
 3906              	.L275:
 3907 0624 3D060000 		.word	.L274+1
 3908 0628 B5060000 		.word	.L276+1
 3909 062c DD060000 		.word	.L277+1
 3910 0630 1B070000 		.word	.L278+1
 3911 0634 CD070000 		.word	.L279+1
 3912 0638 0D080000 		.word	.L280+1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 104


 3913              		.p2align 1
 3914              	.L274:
1873:..\src/interruptions.c ****             case NORMAL: // normal execution
1874:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.switch_emg] - 1640) * 87) >> 5;  //map range to 
 3915              		.loc 1 1874 0
 3916 063c 684B     		ldr	r3, .L323+4
 3917 063e 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 3918 0642 C3F10303 		rsb	r3, r3, #3
 3919 0646 674A     		ldr	r2, .L323+8
 3920 0648 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 3921 064c A3F5CD63 		sub	r3, r3, #1640
 3922 0650 5722     		movs	r2, #87
 3923 0652 02FB03F3 		mul	r3, r2, r3
 3924 0656 5B11     		asrs	r3, r3, #5
 3925 0658 7B60     		str	r3, [r7, #4]
1875:..\src/interruptions.c ****                 //i_aux = (int32)(ADC_buf[3 - c_mem.switch_emg]);
1876:..\src/interruptions.c ****                     if (i_aux < 0)
 3926              		.loc 1 1876 0
 3927 065a 7B68     		ldr	r3, [r7, #4]
 3928 065c 002B     		cmp	r3, #0
 3929 065e 01DA     		bge	.L281
1877:..\src/interruptions.c ****                         i_aux = 0;
 3930              		.loc 1 1877 0
 3931 0660 0023     		movs	r3, #0
 3932 0662 7B60     		str	r3, [r7, #4]
 3933              	.L281:
1878:..\src/interruptions.c ****                     i_aux = filter(i_aux, &filt_emg[1]);
 3934              		.loc 1 1878 0
 3935 0664 6649     		ldr	r1, .L323+36
 3936 0666 7868     		ldr	r0, [r7, #4]
 3937 0668 FFF7FEFF 		bl	filter
 3938 066c 7860     		str	r0, [r7, #4]
1879:..\src/interruptions.c ****                     i_aux = (i_aux << 10) / g_mem.emg_max_value[1];
 3939              		.loc 1 1879 0
 3940 066e 7B68     		ldr	r3, [r7, #4]
 3941 0670 9B02     		lsls	r3, r3, #10
 3942 0672 1A46     		mov	r2, r3
 3943 0674 5D4B     		ldr	r3, .L323+16
 3944 0676 D3F81431 		ldr	r3, [r3, #276]
 3945 067a B2FBF3F3 		udiv	r3, r2, r3
 3946 067e 7B60     		str	r3, [r7, #4]
1880:..\src/interruptions.c ****         
1881:..\src/interruptions.c ****                     if (interrupt_flag){
 3947              		.loc 1 1881 0
 3948 0680 5B4B     		ldr	r3, .L323+20
 3949 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3950 0684 002B     		cmp	r3, #0
 3951 0686 04D0     		beq	.L282
1882:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 3952              		.loc 1 1882 0
 3953 0688 594B     		ldr	r3, .L323+20
 3954 068a 0022     		movs	r2, #0
 3955 068c 1A70     		strb	r2, [r3]
1883:..\src/interruptions.c ****                         interrupt_manager();
 3956              		.loc 1 1883 0
 3957 068e FFF7FEFF 		bl	interrupt_manager
 3958              	.L282:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 105


1884:..\src/interruptions.c ****                     }
1885:..\src/interruptions.c ****                     
1886:..\src/interruptions.c ****                     if (i_aux < 0) 
 3959              		.loc 1 1886 0
 3960 0692 7B68     		ldr	r3, [r7, #4]
 3961 0694 002B     		cmp	r3, #0
 3962 0696 02DA     		bge	.L283
1887:..\src/interruptions.c ****                         i_aux = 0;
 3963              		.loc 1 1887 0
 3964 0698 0023     		movs	r3, #0
 3965 069a 7B60     		str	r3, [r7, #4]
 3966 069c 06E0     		b	.L284
 3967              	.L283:
1888:..\src/interruptions.c ****                     else 
1889:..\src/interruptions.c ****                         if (i_aux > 1024)
 3968              		.loc 1 1889 0
 3969 069e 7B68     		ldr	r3, [r7, #4]
 3970 06a0 B3F5806F 		cmp	r3, #1024
 3971 06a4 02DD     		ble	.L284
1890:..\src/interruptions.c ****                             i_aux = 1024;
 3972              		.loc 1 1890 0
 3973 06a6 4FF48063 		mov	r3, #1024
 3974 06aa 7B60     		str	r3, [r7, #4]
 3975              	.L284:
1891:..\src/interruptions.c ****                     
1892:..\src/interruptions.c ****                     g_meas.emg[1] = i_aux;
 3976              		.loc 1 1892 0
 3977 06ac 554A     		ldr	r2, .L323+40
 3978 06ae 7B68     		ldr	r3, [r7, #4]
 3979 06b0 1362     		str	r3, [r2, #32]
1893:..\src/interruptions.c **** 
1894:..\src/interruptions.c ****                 break;
 3980              		.loc 1 1894 0
 3981 06b2 F9E0     		b	.L285
 3982              	.L276:
1895:..\src/interruptions.c **** 
1896:..\src/interruptions.c ****             case RESET: // reset variables
1897:..\src/interruptions.c ****                 emg_counter_2 = 0;
 3983              		.loc 1 1897 0
 3984 06b4 544B     		ldr	r3, .L323+44
 3985 06b6 0022     		movs	r2, #0
 3986 06b8 1A80     		strh	r2, [r3]	@ movhi
1898:..\src/interruptions.c ****                 g_mem.emg_max_value[1] = 0;
 3987              		.loc 1 1898 0
 3988 06ba 4C4B     		ldr	r3, .L323+16
 3989 06bc 0022     		movs	r2, #0
 3990 06be C3F81421 		str	r2, [r3, #276]
1899:..\src/interruptions.c ****     
1900:..\src/interruptions.c ****                 if (interrupt_flag){
 3991              		.loc 1 1900 0
 3992 06c2 4B4B     		ldr	r3, .L323+20
 3993 06c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3994 06c6 002B     		cmp	r3, #0
 3995 06c8 04D0     		beq	.L286
1901:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 3996              		.loc 1 1901 0
 3997 06ca 494B     		ldr	r3, .L323+20
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 106


 3998 06cc 0022     		movs	r2, #0
 3999 06ce 1A70     		strb	r2, [r3]
1902:..\src/interruptions.c ****                     interrupt_manager();
 4000              		.loc 1 1902 0
 4001 06d0 FFF7FEFF 		bl	interrupt_manager
 4002              	.L286:
1903:..\src/interruptions.c ****                 }
1904:..\src/interruptions.c ****                 
1905:..\src/interruptions.c ****                 emg_2_status = WAIT; // wait for EMG 1 calibration
 4003              		.loc 1 1905 0
 4004 06d4 494B     		ldr	r3, .L323+32
 4005 06d6 0422     		movs	r2, #4
 4006 06d8 1A70     		strb	r2, [r3]
1906:..\src/interruptions.c ****                 break;
 4007              		.loc 1 1906 0
 4008 06da E5E0     		b	.L285
 4009              	.L277:
1907:..\src/interruptions.c **** 
1908:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
1909:..\src/interruptions.c ****                 emg_counter_2++;
 4010              		.loc 1 1909 0
 4011 06dc 4A4B     		ldr	r3, .L323+44
 4012 06de 1B88     		ldrh	r3, [r3]
 4013 06e0 0133     		adds	r3, r3, #1
 4014 06e2 9AB2     		uxth	r2, r3
 4015 06e4 484B     		ldr	r3, .L323+44
 4016 06e6 1A80     		strh	r2, [r3]	@ movhi
1910:..\src/interruptions.c ****                 if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 4017              		.loc 1 1910 0
 4018 06e8 474B     		ldr	r3, .L323+44
 4019 06ea 1B88     		ldrh	r3, [r3]
 4020 06ec B3F5FA7F 		cmp	r3, #500
 4021 06f0 40F0D380 		bne	.L314
1911:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 4022              		.loc 1 1911 0
 4023 06f4 444B     		ldr	r3, .L323+44
 4024 06f6 0022     		movs	r2, #0
 4025 06f8 1A80     		strh	r2, [r3]	@ movhi
1912:..\src/interruptions.c ****                     LED_control(1);
 4026              		.loc 1 1912 0
 4027 06fa 0120     		movs	r0, #1
 4028 06fc FFF7FEFF 		bl	LED_control
1913:..\src/interruptions.c ****     
1914:..\src/interruptions.c ****                     if (interrupt_flag){
 4029              		.loc 1 1914 0
 4030 0700 3B4B     		ldr	r3, .L323+20
 4031 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4032 0704 002B     		cmp	r3, #0
 4033 0706 04D0     		beq	.L288
1915:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 4034              		.loc 1 1915 0
 4035 0708 394B     		ldr	r3, .L323+20
 4036 070a 0022     		movs	r2, #0
 4037 070c 1A70     		strb	r2, [r3]
1916:..\src/interruptions.c ****                         interrupt_manager();
 4038              		.loc 1 1916 0
 4039 070e FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 107


 4040              	.L288:
1917:..\src/interruptions.c ****                     }
1918:..\src/interruptions.c ****                     
1919:..\src/interruptions.c ****                     emg_2_status = SUM_AND_MEAN;           // sum and mean status
 4041              		.loc 1 1919 0
 4042 0712 3A4B     		ldr	r3, .L323+32
 4043 0714 0322     		movs	r2, #3
 4044 0716 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****                 }
1921:..\src/interruptions.c ****                 break;
 4045              		.loc 1 1921 0
 4046 0718 BFE0     		b	.L314
 4047              	.L278:
1922:..\src/interruptions.c **** 
1923:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
1924:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
1925:..\src/interruptions.c ****                 emg_counter_2++;
 4048              		.loc 1 1925 0
 4049 071a 3B4B     		ldr	r3, .L323+44
 4050 071c 1B88     		ldrh	r3, [r3]
 4051 071e 0133     		adds	r3, r3, #1
 4052 0720 9AB2     		uxth	r2, r3
 4053 0722 394B     		ldr	r3, .L323+44
 4054 0724 1A80     		strh	r2, [r3]	@ movhi
1926:..\src/interruptions.c ****                 if (ADC_buf[3 - c_mem.switch_emg] < 0)
 4055              		.loc 1 1926 0
 4056 0726 2E4B     		ldr	r3, .L323+4
 4057 0728 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 4058 072c C3F10303 		rsb	r3, r3, #3
 4059 0730 2C4A     		ldr	r2, .L323+8
 4060 0732 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 4061 0736 002B     		cmp	r3, #0
 4062 0738 08DA     		bge	.L289
1927:..\src/interruptions.c ****                     ADC_buf[3 - c_mem.switch_emg] = 0;
 4063              		.loc 1 1927 0
 4064 073a 294B     		ldr	r3, .L323+4
 4065 073c 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 4066 0740 C3F10303 		rsb	r3, r3, #3
 4067 0744 274A     		ldr	r2, .L323+8
 4068 0746 0021     		movs	r1, #0
 4069 0748 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 4070              	.L289:
1928:..\src/interruptions.c ****                 g_mem.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.switch_emg], &filt_emg[1]
 4071              		.loc 1 1928 0
 4072 074c 244B     		ldr	r3, .L323+4
 4073 074e 93F84531 		ldrb	r3, [r3, #325]	@ zero_extendqisi2
 4074 0752 C3F10303 		rsb	r3, r3, #3
 4075 0756 234A     		ldr	r2, .L323+8
 4076 0758 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 4077 075c 2849     		ldr	r1, .L323+36
 4078 075e 1846     		mov	r0, r3
 4079 0760 FFF7FEFF 		bl	filter
 4080 0764 0246     		mov	r2, r0
 4081 0766 214B     		ldr	r3, .L323+16
 4082 0768 D3F81431 		ldr	r3, [r3, #276]
 4083 076c 1344     		add	r3, r3, r2
 4084 076e 1F4A     		ldr	r2, .L323+16
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 108


 4085 0770 C2F81431 		str	r3, [r2, #276]
1929:..\src/interruptions.c ****     
1930:..\src/interruptions.c ****                 if (interrupt_flag){
 4086              		.loc 1 1930 0
 4087 0774 1E4B     		ldr	r3, .L323+20
 4088 0776 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4089 0778 002B     		cmp	r3, #0
 4090 077a 04D0     		beq	.L290
1931:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 4091              		.loc 1 1931 0
 4092 077c 1C4B     		ldr	r3, .L323+20
 4093 077e 0022     		movs	r2, #0
 4094 0780 1A70     		strb	r2, [r3]
1932:..\src/interruptions.c ****                     interrupt_manager();
 4095              		.loc 1 1932 0
 4096 0782 FFF7FEFF 		bl	interrupt_manager
 4097              	.L290:
1933:..\src/interruptions.c ****                 }
1934:..\src/interruptions.c ****                 
1935:..\src/interruptions.c ****                 if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 4098              		.loc 1 1935 0
 4099 0786 204B     		ldr	r3, .L323+44
 4100 0788 1B88     		ldrh	r3, [r3]
 4101 078a B3F57A7F 		cmp	r3, #1000
 4102 078e 40F08680 		bne	.L315
1936:..\src/interruptions.c ****                     g_mem.emg_max_value[1] = g_mem.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // calc
 4103              		.loc 1 1936 0
 4104 0792 164B     		ldr	r3, .L323+16
 4105 0794 D3F81431 		ldr	r3, [r3, #276]
 4106 0798 164A     		ldr	r2, .L323+24
 4107 079a A2FB0323 		umull	r2, r3, r2, r3
 4108 079e 9B09     		lsrs	r3, r3, #6
 4109 07a0 124A     		ldr	r2, .L323+16
 4110 07a2 C2F81431 		str	r3, [r2, #276]
1937:..\src/interruptions.c ****                     LED_control(0);
 4111              		.loc 1 1937 0
 4112 07a6 0020     		movs	r0, #0
 4113 07a8 FFF7FEFF 		bl	LED_control
1938:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 4114              		.loc 1 1938 0
 4115 07ac 164B     		ldr	r3, .L323+44
 4116 07ae 0022     		movs	r2, #0
 4117 07b0 1A80     		strh	r2, [r3]	@ movhi
1939:..\src/interruptions.c ****                 
1940:..\src/interruptions.c ****                     if (interrupt_flag){
 4118              		.loc 1 1940 0
 4119 07b2 0F4B     		ldr	r3, .L323+20
 4120 07b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4121 07b6 002B     		cmp	r3, #0
 4122 07b8 04D0     		beq	.L292
1941:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 4123              		.loc 1 1941 0
 4124 07ba 0D4B     		ldr	r3, .L323+20
 4125 07bc 0022     		movs	r2, #0
 4126 07be 1A70     		strb	r2, [r3]
1942:..\src/interruptions.c ****                         interrupt_manager();
 4127              		.loc 1 1942 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 109


 4128 07c0 FFF7FEFF 		bl	interrupt_manager
 4129              	.L292:
1943:..\src/interruptions.c ****                     }
1944:..\src/interruptions.c ****                     
1945:..\src/interruptions.c ****                     emg_2_status = WAIT_EoC;    // goto end of calibration wait
 4130              		.loc 1 1945 0
 4131 07c4 0D4B     		ldr	r3, .L323+32
 4132 07c6 0522     		movs	r2, #5
 4133 07c8 1A70     		strb	r2, [r3]
1946:..\src/interruptions.c ****                 }
1947:..\src/interruptions.c ****                 break;
 4134              		.loc 1 1947 0
 4135 07ca 68E0     		b	.L315
 4136              	.L279:
1948:..\src/interruptions.c **** 
1949:..\src/interruptions.c ****             case WAIT: // wait for EMG calibration to be done
1950:..\src/interruptions.c ****                 if (emg_1_status == NORMAL)
 4137              		.loc 1 1950 0
 4138 07cc 0A4B     		ldr	r3, .L323+28
 4139 07ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4140 07d0 002B     		cmp	r3, #0
 4141 07d2 66D1     		bne	.L316
1951:..\src/interruptions.c ****                     emg_2_status = DISCARD;           // goto discard sample
 4142              		.loc 1 1951 0
 4143 07d4 094B     		ldr	r3, .L323+32
 4144 07d6 0222     		movs	r2, #2
 4145 07d8 1A70     		strb	r2, [r3]
1952:..\src/interruptions.c ****                 break;
 4146              		.loc 1 1952 0
 4147 07da 62E0     		b	.L316
 4148              	.L324:
 4149              		.align	2
 4150              	.L323:
 4151 07dc FC000000 		.word	emg_counter_1.10377
 4152 07e0 00000000 		.word	c_mem
 4153 07e4 00000000 		.word	ADC_buf
 4154 07e8 00000000 		.word	filt_emg
 4155 07ec 00000000 		.word	g_mem
 4156 07f0 00000000 		.word	interrupt_flag
 4157 07f4 D34D6210 		.word	274877907
 4158 07f8 00000000 		.word	emg_1_status
 4159 07fc 00000000 		.word	emg_2_status
 4160 0800 08000000 		.word	filt_emg+8
 4161 0804 00000000 		.word	g_meas
 4162 0808 FE000000 		.word	emg_counter_2.10378
 4163              	.L280:
1953:..\src/interruptions.c **** 
1954:..\src/interruptions.c ****             case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reaso
1955:..\src/interruptions.c ****                 emg_counter_2++;
 4164              		.loc 1 1955 0
 4165 080c 594B     		ldr	r3, .L325
 4166 080e 1B88     		ldrh	r3, [r3]
 4167 0810 0133     		adds	r3, r3, #1
 4168 0812 9AB2     		uxth	r2, r3
 4169 0814 574B     		ldr	r3, .L325
 4170 0816 1A80     		strh	r2, [r3]	@ movhi
1956:..\src/interruptions.c ****                 if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 110


 4171              		.loc 1 1956 0
 4172 0818 564B     		ldr	r3, .L325
 4173 081a 1B88     		ldrh	r3, [r3]
 4174 081c B3F5FA7F 		cmp	r3, #500
 4175 0820 41D1     		bne	.L317
1957:..\src/interruptions.c ****                     emg_counter_2 = 0;          // reset counter
 4176              		.loc 1 1957 0
 4177 0822 544B     		ldr	r3, .L325
 4178 0824 0022     		movs	r2, #0
 4179 0826 1A80     		strh	r2, [r3]	@ movhi
1958:..\src/interruptions.c ****                     
1959:..\src/interruptions.c ****                     if (interrupt_flag){
 4180              		.loc 1 1959 0
 4181 0828 534B     		ldr	r3, .L325+4
 4182 082a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4183 082c 002B     		cmp	r3, #0
 4184 082e 04D0     		beq	.L295
1960:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 4185              		.loc 1 1960 0
 4186 0830 514B     		ldr	r3, .L325+4
 4187 0832 0022     		movs	r2, #0
 4188 0834 1A70     		strb	r2, [r3]
1961:..\src/interruptions.c ****                         interrupt_manager();
 4189              		.loc 1 1961 0
 4190 0836 FFF7FEFF 		bl	interrupt_manager
 4191              	.L295:
1962:..\src/interruptions.c ****                     }
1963:..\src/interruptions.c ****                     
1964:..\src/interruptions.c ****                     // if EMG control mode active, activate motor accordingly with startup value
1965:..\src/interruptions.c ****                     if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 4192              		.loc 1 1965 0
 4193 083a 504B     		ldr	r3, .L325+8
 4194 083c 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
 4195 0840 022B     		cmp	r3, #2
 4196 0842 0ED0     		beq	.L296
1966:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4197              		.loc 1 1966 0 discriminator 1
 4198 0844 4D4B     		ldr	r3, .L325+8
 4199 0846 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1965:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4200              		.loc 1 1965 0 discriminator 1
 4201 084a 032B     		cmp	r3, #3
 4202 084c 09D0     		beq	.L296
1967:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 4203              		.loc 1 1967 0
 4204 084e 4B4B     		ldr	r3, .L325+8
 4205 0850 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1966:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 4206              		.loc 1 1966 0
 4207 0854 042B     		cmp	r3, #4
 4208 0856 04D0     		beq	.L296
1968:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV)) {
 4209              		.loc 1 1968 0
 4210 0858 484B     		ldr	r3, .L325+8
 4211 085a 93F8D530 		ldrb	r3, [r3, #213]	@ zero_extendqisi2
1967:..\src/interruptions.c ****                         (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 4212              		.loc 1 1967 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 111


 4213 085e 052B     		cmp	r3, #5
 4214 0860 12D1     		bne	.L297
 4215              	.L296:
1969:..\src/interruptions.c ****                         if (c_mem.control_mode == CONTROL_ANGLE) {
 4216              		.loc 1 1969 0
 4217 0862 464B     		ldr	r3, .L325+8
 4218 0864 93F8D630 		ldrb	r3, [r3, #214]	@ zero_extendqisi2
 4219 0868 002B     		cmp	r3, #0
 4220 086a 03D1     		bne	.L298
1970:..\src/interruptions.c ****                             g_ref.pos = g_meas.pos[0];
 4221              		.loc 1 1970 0
 4222 086c 444B     		ldr	r3, .L325+12
 4223 086e 1B68     		ldr	r3, [r3]
 4224 0870 444A     		ldr	r2, .L325+16
 4225 0872 1360     		str	r3, [r2]
 4226              	.L298:
1971:..\src/interruptions.c ****                         }
1972:..\src/interruptions.c ****                         g_ref.onoff = c_mem.activ;
 4227              		.loc 1 1972 0
 4228 0874 414B     		ldr	r3, .L325+8
 4229 0876 93F8D420 		ldrb	r2, [r3, #212]	@ zero_extendqisi2
 4230 087a 424B     		ldr	r3, .L325+16
 4231 087c 1A73     		strb	r2, [r3, #12]
1973:..\src/interruptions.c ****                         MOTOR_ON_OFF_1_Write(g_ref.onoff);
 4232              		.loc 1 1973 0
 4233 087e 414B     		ldr	r3, .L325+16
 4234 0880 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4235 0882 1846     		mov	r0, r3
 4236 0884 FFF7FEFF 		bl	MOTOR_ON_OFF_1_Write
 4237              	.L297:
1974:..\src/interruptions.c ****                     }
1975:..\src/interruptions.c ****                         
1976:..\src/interruptions.c ****                     memStore(0);        // Store emg_max_value
 4238              		.loc 1 1976 0
 4239 0888 0020     		movs	r0, #0
 4240 088a FFF7FEFF 		bl	memStore
1977:..\src/interruptions.c ****                         
1978:..\src/interruptions.c ****                     emg_2_status = NORMAL;           // goto normal execution
 4241              		.loc 1 1978 0
 4242 088e 3E4B     		ldr	r3, .L325+20
 4243 0890 0022     		movs	r2, #0
 4244 0892 1A70     		strb	r2, [r3]
1979:..\src/interruptions.c ****                 }
1980:..\src/interruptions.c ****                 break;
 4245              		.loc 1 1980 0
 4246 0894 07E0     		b	.L317
 4247              	.L313:
1981:..\src/interruptions.c ****             default:
1982:..\src/interruptions.c ****                 break;
 4248              		.loc 1 1982 0
 4249 0896 00BF     		nop
 4250 0898 06E0     		b	.L285
 4251              	.L314:
1921:..\src/interruptions.c **** 
 4252              		.loc 1 1921 0
 4253 089a 00BF     		nop
 4254 089c 04E0     		b	.L285
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 112


 4255              	.L315:
1947:..\src/interruptions.c **** 
 4256              		.loc 1 1947 0
 4257 089e 00BF     		nop
 4258 08a0 02E0     		b	.L285
 4259              	.L316:
1952:..\src/interruptions.c **** 
 4260              		.loc 1 1952 0
 4261 08a2 00BF     		nop
 4262 08a4 00E0     		b	.L285
 4263              	.L317:
1980:..\src/interruptions.c ****             default:
 4264              		.loc 1 1980 0
 4265 08a6 00BF     		nop
 4266              	.L285:
1983:..\src/interruptions.c ****         }
1984:..\src/interruptions.c ****             
1985:..\src/interruptions.c ****         if (interrupt_flag){
 4267              		.loc 1 1985 0
 4268 08a8 334B     		ldr	r3, .L325+4
 4269 08aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4270 08ac 002B     		cmp	r3, #0
 4271 08ae 04D0     		beq	.L252
1986:..\src/interruptions.c ****             interrupt_flag = FALSE;
 4272              		.loc 1 1986 0
 4273 08b0 314B     		ldr	r3, .L325+4
 4274 08b2 0022     		movs	r2, #0
 4275 08b4 1A70     		strb	r2, [r3]
1987:..\src/interruptions.c ****             interrupt_manager();
 4276              		.loc 1 1987 0
 4277 08b6 FFF7FEFF 		bl	interrupt_manager
 4278              	.L252:
1988:..\src/interruptions.c ****         }
1989:..\src/interruptions.c ****     }
1990:..\src/interruptions.c ****     
1991:..\src/interruptions.c ****     // Read also EMG additional sensors port
1992:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 4279              		.loc 1 1992 0
 4280 08ba 344B     		ldr	r3, .L325+24
 4281 08bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4282 08be 062B     		cmp	r3, #6
 4283 08c0 53D9     		bls	.L318
1993:..\src/interruptions.c ****         
1994:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 4284              		.loc 1 1994 0
 4285 08c2 334B     		ldr	r3, .L325+28
 4286 08c4 0022     		movs	r2, #0
 4287 08c6 1A70     		strb	r2, [r3]
 4288 08c8 4BE0     		b	.L300
 4289              	.L307:
1995:..\src/interruptions.c ****             
1996:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 4290              		.loc 1 1996 0
 4291 08ca 314B     		ldr	r3, .L325+28
 4292 08cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4293 08ce 0633     		adds	r3, r3, #6
 4294 08d0 304A     		ldr	r2, .L325+32
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 113


 4295 08d2 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 4296 08d6 7B60     		str	r3, [r7, #4]
1997:..\src/interruptions.c ****             if (i_aux < 0) 
 4297              		.loc 1 1997 0
 4298 08d8 7B68     		ldr	r3, [r7, #4]
 4299 08da 002B     		cmp	r3, #0
 4300 08dc 01DA     		bge	.L301
1998:..\src/interruptions.c ****                 i_aux = 0;
 4301              		.loc 1 1998 0
 4302 08de 0023     		movs	r3, #0
 4303 08e0 7B60     		str	r3, [r7, #4]
 4304              	.L301:
1999:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 4305              		.loc 1 1999 0
 4306 08e2 2B4B     		ldr	r3, .L325+28
 4307 08e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4308 08e6 0233     		adds	r3, r3, #2
 4309 08e8 DB00     		lsls	r3, r3, #3
 4310 08ea 2B4A     		ldr	r2, .L325+36
 4311 08ec 1344     		add	r3, r3, r2
 4312 08ee 1946     		mov	r1, r3
 4313 08f0 7868     		ldr	r0, [r7, #4]
 4314 08f2 FFF7FEFF 		bl	filter
 4315 08f6 7860     		str	r0, [r7, #4]
2000:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 4316              		.loc 1 2000 0
 4317 08f8 7B68     		ldr	r3, [r7, #4]
 4318 08fa 9B02     		lsls	r3, r3, #10
 4319 08fc 002B     		cmp	r3, #0
 4320 08fe 01DA     		bge	.L302
 4321 0900 03F2FF33 		addw	r3, r3, #1023
 4322              	.L302:
 4323 0904 9B12     		asrs	r3, r3, #10
 4324 0906 7B60     		str	r3, [r7, #4]
2001:..\src/interruptions.c **** 
2002:..\src/interruptions.c ****             if (interrupt_flag){
 4325              		.loc 1 2002 0
 4326 0908 1B4B     		ldr	r3, .L325+4
 4327 090a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4328 090c 002B     		cmp	r3, #0
 4329 090e 04D0     		beq	.L303
2003:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 4330              		.loc 1 2003 0
 4331 0910 194B     		ldr	r3, .L325+4
 4332 0912 0022     		movs	r2, #0
 4333 0914 1A70     		strb	r2, [r3]
2004:..\src/interruptions.c ****                 interrupt_manager();
 4334              		.loc 1 2004 0
 4335 0916 FFF7FEFF 		bl	interrupt_manager
 4336              	.L303:
2005:..\src/interruptions.c ****             }
2006:..\src/interruptions.c ****             //Saturation
2007:..\src/interruptions.c ****             if (i_aux < 0)
 4337              		.loc 1 2007 0
 4338 091a 7B68     		ldr	r3, [r7, #4]
 4339 091c 002B     		cmp	r3, #0
 4340 091e 02DA     		bge	.L304
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 114


2008:..\src/interruptions.c ****                 i_aux = 0;
 4341              		.loc 1 2008 0
 4342 0920 0023     		movs	r3, #0
 4343 0922 7B60     		str	r3, [r7, #4]
 4344 0924 06E0     		b	.L305
 4345              	.L304:
2009:..\src/interruptions.c ****             else 
2010:..\src/interruptions.c ****                 if (i_aux > 1024) 
 4346              		.loc 1 2010 0
 4347 0926 7B68     		ldr	r3, [r7, #4]
 4348 0928 B3F5806F 		cmp	r3, #1024
 4349 092c 02DD     		ble	.L305
2011:..\src/interruptions.c ****                     i_aux = 1024;
 4350              		.loc 1 2011 0
 4351 092e 4FF48063 		mov	r3, #1024
 4352 0932 7B60     		str	r3, [r7, #4]
 4353              	.L305:
2012:..\src/interruptions.c ****             
2013:..\src/interruptions.c ****             g_meas.add_emg[idx] = i_aux;
 4354              		.loc 1 2013 0
 4355 0934 164B     		ldr	r3, .L325+28
 4356 0936 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4357 0938 114A     		ldr	r2, .L325+12
 4358 093a 0E33     		adds	r3, r3, #14
 4359 093c 9B00     		lsls	r3, r3, #2
 4360 093e 1344     		add	r3, r3, r2
 4361 0940 7A68     		ldr	r2, [r7, #4]
 4362 0942 5A60     		str	r2, [r3, #4]
2014:..\src/interruptions.c **** 
2015:..\src/interruptions.c ****             if (interrupt_flag){
 4363              		.loc 1 2015 0
 4364 0944 0C4B     		ldr	r3, .L325+4
 4365 0946 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4366 0948 002B     		cmp	r3, #0
 4367 094a 04D0     		beq	.L306
2016:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 4368              		.loc 1 2016 0
 4369 094c 0A4B     		ldr	r3, .L325+4
 4370 094e 0022     		movs	r2, #0
 4371 0950 1A70     		strb	r2, [r3]
2017:..\src/interruptions.c ****                 interrupt_manager();
 4372              		.loc 1 2017 0
 4373 0952 FFF7FEFF 		bl	interrupt_manager
 4374              	.L306:
1994:..\src/interruptions.c ****             
 4375              		.loc 1 1994 0 discriminator 2
 4376 0956 0E4B     		ldr	r3, .L325+28
 4377 0958 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4378 095a 0133     		adds	r3, r3, #1
 4379 095c DAB2     		uxtb	r2, r3
 4380 095e 0C4B     		ldr	r3, .L325+28
 4381 0960 1A70     		strb	r2, [r3]
 4382              	.L300:
1994:..\src/interruptions.c ****             
 4383              		.loc 1 1994 0 is_stmt 0 discriminator 1
 4384 0962 0B4B     		ldr	r3, .L325+28
 4385 0964 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 115


 4386 0966 052B     		cmp	r3, #5
 4387 0968 AFD9     		bls	.L307
 4388              	.L318:
2018:..\src/interruptions.c ****             }
2019:..\src/interruptions.c ****         }
2020:..\src/interruptions.c ****     }
2021:..\src/interruptions.c **** }
 4389              		.loc 1 2021 0 is_stmt 1
 4390 096a 00BF     		nop
 4391 096c 0C37     		adds	r7, r7, #12
 4392              		.cfi_def_cfa_offset 12
 4393 096e BD46     		mov	sp, r7
 4394              		.cfi_def_cfa_register 13
 4395              		@ sp needed
 4396 0970 90BD     		pop	{r4, r7, pc}
 4397              	.L326:
 4398 0972 00BF     		.align	2
 4399              	.L325:
 4400 0974 FE000000 		.word	emg_counter_2.10378
 4401 0978 00000000 		.word	interrupt_flag
 4402 097c 00000000 		.word	c_mem
 4403 0980 00000000 		.word	g_meas
 4404 0984 00000000 		.word	g_ref
 4405 0988 00000000 		.word	emg_2_status
 4406 098c 00000000 		.word	NUM_OF_ANALOG_INPUTS
 4407 0990 F6000000 		.word	idx.10382
 4408 0994 00000000 		.word	ADC_buf
 4409 0998 00000000 		.word	filt_emg
 4410              		.cfi_endproc
 4411              	.LFE71:
 4412              		.size	analog_read_end, .-analog_read_end
 4413              		.section	.text.overcurrent_control,"ax",%progbits
 4414              		.align	2
 4415              		.global	overcurrent_control
 4416              		.thumb
 4417              		.thumb_func
 4418              		.type	overcurrent_control, %function
 4419              	overcurrent_control:
 4420              	.LFB72:
2022:..\src/interruptions.c **** 
2023:..\src/interruptions.c **** //==============================================================================
2024:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2025:..\src/interruptions.c **** //==============================================================================
2026:..\src/interruptions.c **** 
2027:..\src/interruptions.c **** void overcurrent_control() {
 4421              		.loc 1 2027 0
 4422              		.cfi_startproc
 4423              		@ args = 0, pretend = 0, frame = 0
 4424              		@ frame_needed = 1, uses_anonymous_args = 0
 4425              		@ link register save eliminated.
 4426 0000 80B4     		push	{r7}
 4427              		.cfi_def_cfa_offset 4
 4428              		.cfi_offset 7, -4
 4429 0002 00AF     		add	r7, sp, #0
 4430              		.cfi_def_cfa_register 7
2028:..\src/interruptions.c ****     if (c_mem.current_limit != 0) {
 4431              		.loc 1 2028 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 116


 4432 0004 174B     		ldr	r3, .L333
 4433 0006 B3F90831 		ldrsh	r3, [r3, #264]
 4434 000a 002B     		cmp	r3, #0
 4435 000c 25D0     		beq	.L332
2029:..\src/interruptions.c ****         // if the current is over the limit
2030:..\src/interruptions.c ****         if (g_meas.curr[0] > c_mem.current_limit) {
 4436              		.loc 1 2030 0
 4437 000e 164B     		ldr	r3, .L333+4
 4438 0010 DB68     		ldr	r3, [r3, #12]
 4439 0012 144A     		ldr	r2, .L333
 4440 0014 B2F90821 		ldrsh	r2, [r2, #264]
 4441 0018 9342     		cmp	r3, r2
 4442 001a 06DD     		ble	.L329
2031:..\src/interruptions.c ****             //decrease pwm_limit
2032:..\src/interruptions.c ****             dev_pwm_limit--;
 4443              		.loc 1 2032 0
 4444 001c 134B     		ldr	r3, .L333+8
 4445 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4446 0020 013B     		subs	r3, r3, #1
 4447 0022 DAB2     		uxtb	r2, r3
 4448 0024 114B     		ldr	r3, .L333+8
 4449 0026 1A70     		strb	r2, [r3]
 4450 0028 0DE0     		b	.L331
 4451              	.L329:
2033:..\src/interruptions.c ****         // if the current is in the safe zone
2034:..\src/interruptions.c ****         } else if (g_meas.curr[0] < (c_mem.current_limit - CURRENT_HYSTERESIS)) {
 4452              		.loc 1 2034 0
 4453 002a 0F4B     		ldr	r3, .L333+4
 4454 002c DA68     		ldr	r2, [r3, #12]
 4455 002e 0D4B     		ldr	r3, .L333
 4456 0030 B3F90831 		ldrsh	r3, [r3, #264]
 4457 0034 0A3B     		subs	r3, r3, #10
 4458 0036 9A42     		cmp	r2, r3
 4459 0038 05DA     		bge	.L331
2035:..\src/interruptions.c ****             //increase pwm_limit
2036:..\src/interruptions.c ****             dev_pwm_limit++;
 4460              		.loc 1 2036 0
 4461 003a 0C4B     		ldr	r3, .L333+8
 4462 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4463 003e 0133     		adds	r3, r3, #1
 4464 0040 DAB2     		uxtb	r2, r3
 4465 0042 0A4B     		ldr	r3, .L333+8
 4466 0044 1A70     		strb	r2, [r3]
 4467              	.L331:
2037:..\src/interruptions.c ****         }
2038:..\src/interruptions.c **** 
2039:..\src/interruptions.c ****         // Bound pwm_limit
2040:..\src/interruptions.c ****         if (dev_pwm_limit < 0) 
2041:..\src/interruptions.c ****             dev_pwm_limit = 0;
2042:..\src/interruptions.c ****         else 
2043:..\src/interruptions.c ****             if (dev_pwm_limit > dev_pwm_sat) 
 4468              		.loc 1 2043 0
 4469 0046 094B     		ldr	r3, .L333+8
 4470 0048 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4471 004a 094B     		ldr	r3, .L333+12
 4472 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4473 004e 9A42     		cmp	r2, r3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 117


 4474 0050 03D9     		bls	.L332
2044:..\src/interruptions.c ****                 dev_pwm_limit = dev_pwm_sat;
 4475              		.loc 1 2044 0
 4476 0052 074B     		ldr	r3, .L333+12
 4477 0054 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4478 0056 054B     		ldr	r3, .L333+8
 4479 0058 1A70     		strb	r2, [r3]
 4480              	.L332:
2045:..\src/interruptions.c ****     }
2046:..\src/interruptions.c **** }
 4481              		.loc 1 2046 0
 4482 005a 00BF     		nop
 4483 005c BD46     		mov	sp, r7
 4484              		.cfi_def_cfa_register 13
 4485              		@ sp needed
 4486 005e 80BC     		pop	{r7}
 4487              		.cfi_restore 7
 4488              		.cfi_def_cfa_offset 0
 4489 0060 7047     		bx	lr
 4490              	.L334:
 4491 0062 00BF     		.align	2
 4492              	.L333:
 4493 0064 00000000 		.word	c_mem
 4494 0068 00000000 		.word	g_meas
 4495 006c 00000000 		.word	dev_pwm_limit
 4496 0070 00000000 		.word	dev_pwm_sat
 4497              		.cfi_endproc
 4498              	.LFE72:
 4499              		.size	overcurrent_control, .-overcurrent_control
 4500              		.section	.text.pwm_limit_search,"ax",%progbits
 4501              		.align	2
 4502              		.global	pwm_limit_search
 4503              		.thumb
 4504              		.thumb_func
 4505              		.type	pwm_limit_search, %function
 4506              	pwm_limit_search:
 4507              	.LFB73:
2047:..\src/interruptions.c **** 
2048:..\src/interruptions.c **** //==============================================================================
2049:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2050:..\src/interruptions.c **** //==============================================================================
2051:..\src/interruptions.c **** 
2052:..\src/interruptions.c **** void pwm_limit_search() {
 4508              		.loc 1 2052 0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 8
 4511              		@ frame_needed = 1, uses_anonymous_args = 0
 4512              		@ link register save eliminated.
 4513 0000 80B4     		push	{r7}
 4514              		.cfi_def_cfa_offset 4
 4515              		.cfi_offset 7, -4
 4516 0002 83B0     		sub	sp, sp, #12
 4517              		.cfi_def_cfa_offset 16
 4518 0004 00AF     		add	r7, sp, #0
 4519              		.cfi_def_cfa_register 7
2053:..\src/interruptions.c **** 
2054:..\src/interruptions.c ****     uint8 CYDATA index;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 118


2055:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 4520              		.loc 1 2055 0
 4521 0006 46F29C33 		movw	r3, #25500
 4522 000a FB80     		strh	r3, [r7, #6]	@ movhi
2056:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 4523              		.loc 1 2056 0
 4524 000c 42F6EC43 		movw	r3, #11500
 4525 0010 BB80     		strh	r3, [r7, #4]	@ movhi
2057:..\src/interruptions.c ****     
2058:..\src/interruptions.c ****     if (dev_tension[0] > max_tension) {
 4526              		.loc 1 2058 0
 4527 0012 114B     		ldr	r3, .L340
 4528 0014 1A68     		ldr	r2, [r3]
 4529 0016 FB88     		ldrh	r3, [r7, #6]
 4530 0018 9A42     		cmp	r2, r3
 4531 001a 03DD     		ble	.L336
2059:..\src/interruptions.c ****         dev_pwm_sat = 0;
 4532              		.loc 1 2059 0
 4533 001c 0F4B     		ldr	r3, .L340+4
 4534 001e 0022     		movs	r2, #0
 4535 0020 1A70     		strb	r2, [r3]
2060:..\src/interruptions.c ****     } else if (dev_tension[0] < min_tension) {
2061:..\src/interruptions.c ****         dev_pwm_sat = 100;
2062:..\src/interruptions.c ****     } else {
2063:..\src/interruptions.c ****         index = (uint8)((dev_tension[0] - min_tension) >> 9);
2064:..\src/interruptions.c ****         dev_pwm_sat = pwm_preload_values[index];
2065:..\src/interruptions.c ****     }
2066:..\src/interruptions.c **** }
 4536              		.loc 1 2066 0
 4537 0022 13E0     		b	.L339
 4538              	.L336:
2060:..\src/interruptions.c ****     } else if (dev_tension[0] < min_tension) {
 4539              		.loc 1 2060 0
 4540 0024 0C4B     		ldr	r3, .L340
 4541 0026 1A68     		ldr	r2, [r3]
 4542 0028 BB88     		ldrh	r3, [r7, #4]
 4543 002a 9A42     		cmp	r2, r3
 4544 002c 03DA     		bge	.L338
2061:..\src/interruptions.c ****     } else {
 4545              		.loc 1 2061 0
 4546 002e 0B4B     		ldr	r3, .L340+4
 4547 0030 6422     		movs	r2, #100
 4548 0032 1A70     		strb	r2, [r3]
 4549              		.loc 1 2066 0
 4550 0034 0AE0     		b	.L339
 4551              	.L338:
2063:..\src/interruptions.c ****         dev_pwm_sat = pwm_preload_values[index];
 4552              		.loc 1 2063 0
 4553 0036 084B     		ldr	r3, .L340
 4554 0038 1A68     		ldr	r2, [r3]
 4555 003a BB88     		ldrh	r3, [r7, #4]
 4556 003c D31A     		subs	r3, r2, r3
 4557 003e 5B12     		asrs	r3, r3, #9
 4558 0040 FB70     		strb	r3, [r7, #3]
2064:..\src/interruptions.c ****     }
 4559              		.loc 1 2064 0
 4560 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 119


 4561 0044 064A     		ldr	r2, .L340+8
 4562 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4563 0048 044B     		ldr	r3, .L340+4
 4564 004a 1A70     		strb	r2, [r3]
 4565              	.L339:
 4566              		.loc 1 2066 0
 4567 004c 00BF     		nop
 4568 004e 0C37     		adds	r7, r7, #12
 4569              		.cfi_def_cfa_offset 4
 4570 0050 BD46     		mov	sp, r7
 4571              		.cfi_def_cfa_register 13
 4572              		@ sp needed
 4573 0052 80BC     		pop	{r7}
 4574              		.cfi_restore 7
 4575              		.cfi_def_cfa_offset 0
 4576 0054 7047     		bx	lr
 4577              	.L341:
 4578 0056 00BF     		.align	2
 4579              	.L340:
 4580 0058 00000000 		.word	dev_tension
 4581 005c 00000000 		.word	dev_pwm_sat
 4582 0060 00000000 		.word	pwm_preload_values
 4583              		.cfi_endproc
 4584              	.LFE73:
 4585              		.size	pwm_limit_search, .-pwm_limit_search
 4586              		.section	.text.cycles_counter_update,"ax",%progbits
 4587              		.align	2
 4588              		.global	cycles_counter_update
 4589              		.thumb
 4590              		.thumb_func
 4591              		.type	cycles_counter_update, %function
 4592              	cycles_counter_update:
 4593              	.LFB74:
2067:..\src/interruptions.c **** 
2068:..\src/interruptions.c **** //==============================================================================
2069:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2070:..\src/interruptions.c **** //==============================================================================
2071:..\src/interruptions.c **** 
2072:..\src/interruptions.c **** void cycles_counter_update() {
 4594              		.loc 1 2072 0
 4595              		.cfi_startproc
 4596              		@ args = 0, pretend = 0, frame = 24
 4597              		@ frame_needed = 1, uses_anonymous_args = 0
 4598 0000 80B5     		push	{r7, lr}
 4599              		.cfi_def_cfa_offset 8
 4600              		.cfi_offset 7, -8
 4601              		.cfi_offset 14, -4
 4602 0002 86B0     		sub	sp, sp, #24
 4603              		.cfi_def_cfa_offset 32
 4604 0004 00AF     		add	r7, sp, #0
 4605              		.cfi_def_cfa_register 7
2073:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2074:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2075:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2076:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2077:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2078:..\src/interruptions.c ****     uint8 i, bin_st, bin_max;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 120


2079:..\src/interruptions.c ****     int32 curr_pos, curr_off;
2080:..\src/interruptions.c ****     int32 step;
2081:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2082:..\src/interruptions.c **** 
2083:..\src/interruptions.c ****     curr_pos = (int32)(g_meas.pos[0] >> g_mem.res[0]);
 4606              		.loc 1 2083 0
 4607 0006 9A4B     		ldr	r3, .L382
 4608 0008 1B68     		ldr	r3, [r3]
 4609 000a 9A4A     		ldr	r2, .L382+4
 4610 000c 92F8D720 		ldrb	r2, [r2, #215]	@ zero_extendqisi2
 4611 0010 1341     		asrs	r3, r3, r2
 4612 0012 3B61     		str	r3, [r7, #16]
2084:..\src/interruptions.c ****     
2085:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2086:..\src/interruptions.c ****     switch (pos_cycle_status){
 4613              		.loc 1 2086 0
 4614 0014 984B     		ldr	r3, .L382+8
 4615 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4616 0018 012B     		cmp	r3, #1
 4617 001a 29D0     		beq	.L344
 4618 001c 022B     		cmp	r3, #2
 4619 001e 4DD0     		beq	.L345
 4620 0020 002B     		cmp	r3, #0
 4621 0022 40F0C380 		bne	.L343
2087:..\src/interruptions.c ****         case STATE_INACTIVE:
2088:..\src/interruptions.c ****             if (pwm_sign == 1){
 4622              		.loc 1 2088 0
 4623 0026 954B     		ldr	r3, .L382+12
 4624 0028 93F90030 		ldrsb	r3, [r3]
 4625 002c 012B     		cmp	r3, #1
 4626 002e 40F0BA80 		bne	.L376
2089:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 4627              		.loc 1 2089 0
 4628 0032 934A     		ldr	r2, .L382+16
 4629 0034 3B69     		ldr	r3, [r7, #16]
 4630 0036 1360     		str	r3, [r2]
2090:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4631              		.loc 1 2090 0
 4632 0038 924B     		ldr	r3, .L382+20
 4633 003a 1A68     		ldr	r2, [r3]
 4634 003c 904B     		ldr	r3, .L382+16
 4635 003e 1B68     		ldr	r3, [r3]
 4636 0040 9A42     		cmp	r2, r3
 4637 0042 05DD     		ble	.L348
 4638              		.loc 1 2090 0 is_stmt 0 discriminator 1
 4639 0044 8F4B     		ldr	r3, .L382+20
 4640 0046 1A68     		ldr	r2, [r3]
 4641 0048 8D4B     		ldr	r3, .L382+16
 4642 004a 1B68     		ldr	r3, [r3]
 4643 004c D31A     		subs	r3, r2, r3
 4644 004e 04E0     		b	.L349
 4645              	.L348:
 4646              		.loc 1 2090 0 discriminator 2
 4647 0050 8B4B     		ldr	r3, .L382+16
 4648 0052 1A68     		ldr	r2, [r3]
 4649 0054 8B4B     		ldr	r3, .L382+20
 4650 0056 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 121


 4651 0058 D31A     		subs	r3, r2, r3
 4652              	.L349:
 4653              		.loc 1 2090 0 discriminator 4
 4654 005a FB60     		str	r3, [r7, #12]
2091:..\src/interruptions.c ****                 g_mem.wire_disp = g_mem.wire_disp + curr_off;     //sum opening track
 4655              		.loc 1 2091 0 is_stmt 1 discriminator 4
 4656 005c 854B     		ldr	r3, .L382+4
 4657 005e 5A6C     		ldr	r2, [r3, #68]
 4658 0060 FB68     		ldr	r3, [r7, #12]
 4659 0062 1344     		add	r3, r3, r2
 4660 0064 834A     		ldr	r2, .L382+4
 4661 0066 5364     		str	r3, [r2, #68]
2092:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 4662              		.loc 1 2092 0 discriminator 4
 4663 0068 834B     		ldr	r3, .L382+8
 4664 006a 0122     		movs	r2, #1
 4665 006c 1A70     		strb	r2, [r3]
2093:..\src/interruptions.c ****             }
2094:..\src/interruptions.c ****             break;
 4666              		.loc 1 2094 0 discriminator 4
 4667 006e 9AE0     		b	.L376
 4668              	.L344:
2095:..\src/interruptions.c ****         case STATE_ACTIVE:
2096:..\src/interruptions.c ****             if (pwm_sign == -1){
 4669              		.loc 1 2096 0
 4670 0070 824B     		ldr	r3, .L382+12
 4671 0072 93F90030 		ldrsb	r3, [r3]
 4672 0076 B3F1FF3F 		cmp	r3, #-1
 4673 007a 40F09680 		bne	.L377
2097:..\src/interruptions.c ****                 max_pos = curr_pos;
 4674              		.loc 1 2097 0
 4675 007e 814A     		ldr	r2, .L382+20
 4676 0080 3B69     		ldr	r3, [r7, #16]
 4677 0082 1360     		str	r3, [r2]
2098:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4678              		.loc 1 2098 0
 4679 0084 7F4B     		ldr	r3, .L382+20
 4680 0086 1A68     		ldr	r2, [r3]
 4681 0088 7D4B     		ldr	r3, .L382+16
 4682 008a 1B68     		ldr	r3, [r3]
 4683 008c 9A42     		cmp	r2, r3
 4684 008e 05DD     		ble	.L351
 4685              		.loc 1 2098 0 is_stmt 0 discriminator 1
 4686 0090 7C4B     		ldr	r3, .L382+20
 4687 0092 1A68     		ldr	r2, [r3]
 4688 0094 7A4B     		ldr	r3, .L382+16
 4689 0096 1B68     		ldr	r3, [r3]
 4690 0098 D31A     		subs	r3, r2, r3
 4691 009a 04E0     		b	.L352
 4692              	.L351:
 4693              		.loc 1 2098 0 discriminator 2
 4694 009c 784B     		ldr	r3, .L382+16
 4695 009e 1A68     		ldr	r2, [r3]
 4696 00a0 784B     		ldr	r3, .L382+20
 4697 00a2 1B68     		ldr	r3, [r3]
 4698 00a4 D31A     		subs	r3, r2, r3
 4699              	.L352:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 122


 4700              		.loc 1 2098 0 discriminator 4
 4701 00a6 FB60     		str	r3, [r7, #12]
2099:..\src/interruptions.c ****                 g_mem.wire_disp = g_mem.wire_disp + curr_off;     //sum closure track
 4702              		.loc 1 2099 0 is_stmt 1 discriminator 4
 4703 00a8 724B     		ldr	r3, .L382+4
 4704 00aa 5A6C     		ldr	r2, [r3, #68]
 4705 00ac FB68     		ldr	r3, [r7, #12]
 4706 00ae 1344     		add	r3, r3, r2
 4707 00b0 704A     		ldr	r2, .L382+4
 4708 00b2 5364     		str	r3, [r2, #68]
2100:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 4709              		.loc 1 2100 0 discriminator 4
 4710 00b4 704B     		ldr	r3, .L382+8
 4711 00b6 0222     		movs	r2, #2
 4712 00b8 1A70     		strb	r2, [r3]
2101:..\src/interruptions.c ****             }
2102:..\src/interruptions.c ****             break;
 4713              		.loc 1 2102 0 discriminator 4
 4714 00ba 76E0     		b	.L377
 4715              	.L345:
2103:..\src/interruptions.c ****         case COUNTER_INC:
2104:..\src/interruptions.c **** 
2105:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 4716              		.loc 1 2105 0
 4717 00bc 714B     		ldr	r3, .L382+20
 4718 00be 1A68     		ldr	r2, [r3]
 4719 00c0 6F4B     		ldr	r3, .L382+16
 4720 00c2 1B68     		ldr	r3, [r3]
 4721 00c4 9A42     		cmp	r2, r3
 4722 00c6 05DD     		ble	.L353
 4723              		.loc 1 2105 0 is_stmt 0 discriminator 1
 4724 00c8 6E4B     		ldr	r3, .L382+20
 4725 00ca 1A68     		ldr	r2, [r3]
 4726 00cc 6C4B     		ldr	r3, .L382+16
 4727 00ce 1B68     		ldr	r3, [r3]
 4728 00d0 D31A     		subs	r3, r2, r3
 4729 00d2 04E0     		b	.L354
 4730              	.L353:
 4731              		.loc 1 2105 0 discriminator 2
 4732 00d4 6A4B     		ldr	r3, .L382+16
 4733 00d6 1A68     		ldr	r2, [r3]
 4734 00d8 6A4B     		ldr	r3, .L382+20
 4735 00da 1B68     		ldr	r3, [r3]
 4736 00dc D31A     		subs	r3, r2, r3
 4737              	.L354:
 4738              		.loc 1 2105 0 discriminator 4
 4739 00de FB60     		str	r3, [r7, #12]
2106:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 4740              		.loc 1 2106 0 is_stmt 1 discriminator 4
 4741 00e0 694B     		ldr	r3, .L382+24
 4742 00e2 1B68     		ldr	r3, [r3]
 4743 00e4 FA68     		ldr	r2, [r7, #12]
 4744 00e6 9A42     		cmp	r2, r3
 4745 00e8 59DD     		ble	.L355
2107:..\src/interruptions.c ****                 //update position histogram
2108:..\src/interruptions.c ****                 step = ((int32)(g_mem.pos_lim_sup >> g_mem.res[0]) / 10);
 4746              		.loc 1 2108 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 123


 4747 00ea 624B     		ldr	r3, .L382+4
 4748 00ec D3F8FC30 		ldr	r3, [r3, #252]
 4749 00f0 604A     		ldr	r2, .L382+4
 4750 00f2 92F8D720 		ldrb	r2, [r2, #215]	@ zero_extendqisi2
 4751 00f6 1341     		asrs	r3, r3, r2
 4752 00f8 644A     		ldr	r2, .L382+28
 4753 00fa 82FB0312 		smull	r1, r2, r2, r3
 4754 00fe 9210     		asrs	r2, r2, #2
 4755 0100 DB17     		asrs	r3, r3, #31
 4756 0102 D31A     		subs	r3, r2, r3
 4757 0104 BB60     		str	r3, [r7, #8]
2109:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 4758              		.loc 1 2109 0
 4759 0106 5E4B     		ldr	r3, .L382+16
 4760 0108 1A68     		ldr	r2, [r3]
 4761 010a BB68     		ldr	r3, [r7, #8]
 4762 010c 92FBF3F3 		sdiv	r3, r2, r3
 4763 0110 FB71     		strb	r3, [r7, #7]
2110:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 4764              		.loc 1 2110 0
 4765 0112 5C4B     		ldr	r3, .L382+20
 4766 0114 1A68     		ldr	r2, [r3]
 4767 0116 BB68     		ldr	r3, [r7, #8]
 4768 0118 92FBF3F3 		sdiv	r3, r2, r3
 4769 011c BB71     		strb	r3, [r7, #6]
2111:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4770              		.loc 1 2111 0
 4771 011e FB79     		ldrb	r3, [r7, #7]
 4772 0120 FB75     		strb	r3, [r7, #23]
 4773 0122 0DE0     		b	.L356
 4774              	.L357:
2112:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while closing
2113:..\src/interruptions.c ****                     g_mem.position_hist[i] = g_mem.position_hist[i] + 1;
 4775              		.loc 1 2113 0 discriminator 3
 4776 0124 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4777 0126 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4778 0128 5249     		ldr	r1, .L382+4
 4779 012a 0232     		adds	r2, r2, #2
 4780 012c 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4781 0130 0132     		adds	r2, r2, #1
 4782 0132 5049     		ldr	r1, .L382+4
 4783 0134 0233     		adds	r3, r3, #2
 4784 0136 41F82320 		str	r2, [r1, r3, lsl #2]
2111:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4785              		.loc 1 2111 0 discriminator 3
 4786 013a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4787 013c 0133     		adds	r3, r3, #1
 4788 013e FB75     		strb	r3, [r7, #23]
 4789              	.L356:
2111:..\src/interruptions.c ****                 for (i=bin_st; i<= bin_max; i++){
 4790              		.loc 1 2111 0 is_stmt 0 discriminator 1
 4791 0140 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4792 0142 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4793 0144 9A42     		cmp	r2, r3
 4794 0146 EDD9     		bls	.L357
2114:..\src/interruptions.c ****                 }
2115:..\src/interruptions.c ****                 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 124


2116:..\src/interruptions.c ****                 //update current histogram
2117:..\src/interruptions.c ****                 step = ((int32)(g_mem.current_limit) / 4);
 4795              		.loc 1 2117 0 is_stmt 1
 4796 0148 4A4B     		ldr	r3, .L382+4
 4797 014a B3F90831 		ldrsh	r3, [r3, #264]
 4798 014e 002B     		cmp	r3, #0
 4799 0150 00DA     		bge	.L358
 4800 0152 0333     		adds	r3, r3, #3
 4801              	.L358:
 4802 0154 9B10     		asrs	r3, r3, #2
 4803 0156 1BB2     		sxth	r3, r3
 4804 0158 BB60     		str	r3, [r7, #8]
2118:..\src/interruptions.c ****                 if (g_meas.curr[0] > g_mem.current_limit)
 4805              		.loc 1 2118 0
 4806 015a 454B     		ldr	r3, .L382
 4807 015c DB68     		ldr	r3, [r3, #12]
 4808 015e 454A     		ldr	r2, .L382+4
 4809 0160 B2F90821 		ldrsh	r2, [r2, #264]
 4810 0164 9342     		cmp	r3, r2
 4811 0166 05DD     		ble	.L359
2119:..\src/interruptions.c ****                     g_mem.current_hist[3] = g_mem.current_hist[3] + 1; 
 4812              		.loc 1 2119 0
 4813 0168 424B     		ldr	r3, .L382+4
 4814 016a DB6B     		ldr	r3, [r3, #60]
 4815 016c 0133     		adds	r3, r3, #1
 4816 016e 414A     		ldr	r2, .L382+4
 4817 0170 D363     		str	r3, [r2, #60]
 4818 0172 14E0     		b	.L355
 4819              	.L359:
2120:..\src/interruptions.c ****                 else
2121:..\src/interruptions.c ****                     g_mem.current_hist[(uint8)(g_meas.curr[0]/step)] = g_mem.current_hist[(uint8)(g
 4820              		.loc 1 2121 0
 4821 0174 3E4B     		ldr	r3, .L382
 4822 0176 DA68     		ldr	r2, [r3, #12]
 4823 0178 BB68     		ldr	r3, [r7, #8]
 4824 017a 92FBF3F3 		sdiv	r3, r2, r3
 4825 017e DBB2     		uxtb	r3, r3
 4826 0180 3B4A     		ldr	r2, .L382
 4827 0182 D168     		ldr	r1, [r2, #12]
 4828 0184 BA68     		ldr	r2, [r7, #8]
 4829 0186 91FBF2F2 		sdiv	r2, r1, r2
 4830 018a D2B2     		uxtb	r2, r2
 4831 018c 3949     		ldr	r1, .L382+4
 4832 018e 0C32     		adds	r2, r2, #12
 4833 0190 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4834 0194 0132     		adds	r2, r2, #1
 4835 0196 3749     		ldr	r1, .L382+4
 4836 0198 0C33     		adds	r3, r3, #12
 4837 019a 41F82320 		str	r2, [r1, r3, lsl #2]
 4838              	.L355:
2122:..\src/interruptions.c ****             }
2123:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 4839              		.loc 1 2123 0
 4840 019e 364B     		ldr	r3, .L382+8
 4841 01a0 0022     		movs	r2, #0
 4842 01a2 1A70     		strb	r2, [r3]
2124:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 125


 4843              		.loc 1 2124 0
 4844 01a4 02E0     		b	.L343
 4845              	.L376:
2094:..\src/interruptions.c ****         case STATE_ACTIVE:
 4846              		.loc 1 2094 0
 4847 01a6 00BF     		nop
 4848 01a8 00E0     		b	.L343
 4849              	.L377:
2102:..\src/interruptions.c ****         case COUNTER_INC:
 4850              		.loc 1 2102 0
 4851 01aa 00BF     		nop
 4852              	.L343:
2125:..\src/interruptions.c ****     }
2126:..\src/interruptions.c ****     
2127:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2128:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 4853              		.loc 1 2128 0
 4854 01ac 0023     		movs	r3, #0
 4855 01ae FB75     		strb	r3, [r7, #23]
 4856 01b0 3CE0     		b	.L360
 4857              	.L368:
2129:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4858              		.loc 1 2129 0
 4859 01b2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4860 01b4 364A     		ldr	r2, .L382+32
 4861 01b6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4862 01b8 012B     		cmp	r3, #1
 4863 01ba 16D0     		beq	.L362
 4864 01bc 022B     		cmp	r3, #2
 4865 01be 21D0     		beq	.L363
 4866 01c0 002B     		cmp	r3, #0
 4867 01c2 30D1     		bne	.L361
2130:..\src/interruptions.c ****             case STATE_INACTIVE:
2131:..\src/interruptions.c ****                 if (g_meas.emg[i] > g_mem.emg_threshold[i]){
 4868              		.loc 1 2131 0
 4869 01c4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4870 01c6 2A4A     		ldr	r2, .L382
 4871 01c8 0633     		adds	r3, r3, #6
 4872 01ca 9B00     		lsls	r3, r3, #2
 4873 01cc 1344     		add	r3, r3, r2
 4874 01ce 5A68     		ldr	r2, [r3, #4]
 4875 01d0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4876 01d2 2849     		ldr	r1, .L382+4
 4877 01d4 8433     		adds	r3, r3, #132
 4878 01d6 5B00     		lsls	r3, r3, #1
 4879 01d8 0B44     		add	r3, r3, r1
 4880 01da 5B88     		ldrh	r3, [r3, #2]
 4881 01dc 9A42     		cmp	r2, r3
 4882 01de 1FDD     		ble	.L378
2132:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 4883              		.loc 1 2132 0
 4884 01e0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4885 01e2 2B4A     		ldr	r2, .L382+32
 4886 01e4 0121     		movs	r1, #1
 4887 01e6 D154     		strb	r1, [r2, r3]
2133:..\src/interruptions.c ****                 }
2134:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 126


 4888              		.loc 1 2134 0
 4889 01e8 1AE0     		b	.L378
 4890              	.L362:
2135:..\src/interruptions.c ****             case STATE_ACTIVE:
2136:..\src/interruptions.c ****                 if (g_meas.emg[i] < 10){
 4891              		.loc 1 2136 0
 4892 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4893 01ec 204A     		ldr	r2, .L382
 4894 01ee 0633     		adds	r3, r3, #6
 4895 01f0 9B00     		lsls	r3, r3, #2
 4896 01f2 1344     		add	r3, r3, r2
 4897 01f4 5B68     		ldr	r3, [r3, #4]
 4898 01f6 092B     		cmp	r3, #9
 4899 01f8 14DC     		bgt	.L379
2137:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 4900              		.loc 1 2137 0
 4901 01fa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4902 01fc 244A     		ldr	r2, .L382+32
 4903 01fe 0221     		movs	r1, #2
 4904 0200 D154     		strb	r1, [r2, r3]
2138:..\src/interruptions.c ****                 }
2139:..\src/interruptions.c ****                 break;
 4905              		.loc 1 2139 0
 4906 0202 0FE0     		b	.L379
 4907              	.L363:
2140:..\src/interruptions.c ****             case COUNTER_INC:
2141:..\src/interruptions.c ****                 g_mem.emg_counter[i] = g_mem.emg_counter[i] + 1;
 4908              		.loc 1 2141 0
 4909 0204 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4910 0206 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4911 0208 1A49     		ldr	r1, .L382+4
 4912 020a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4913 020e 0132     		adds	r2, r2, #1
 4914 0210 1849     		ldr	r1, .L382+4
 4915 0212 41F82320 		str	r2, [r1, r3, lsl #2]
2142:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 4916              		.loc 1 2142 0
 4917 0216 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4918 0218 1D4A     		ldr	r2, .L382+32
 4919 021a 0021     		movs	r1, #0
 4920 021c D154     		strb	r1, [r2, r3]
2143:..\src/interruptions.c ****                 break;
 4921              		.loc 1 2143 0
 4922 021e 02E0     		b	.L361
 4923              	.L378:
2134:..\src/interruptions.c ****             case STATE_ACTIVE:
 4924              		.loc 1 2134 0
 4925 0220 00BF     		nop
 4926 0222 00E0     		b	.L361
 4927              	.L379:
2139:..\src/interruptions.c ****             case COUNTER_INC:
 4928              		.loc 1 2139 0
 4929 0224 00BF     		nop
 4930              	.L361:
2128:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4931              		.loc 1 2128 0 discriminator 2
 4932 0226 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 127


 4933 0228 0133     		adds	r3, r3, #1
 4934 022a FB75     		strb	r3, [r7, #23]
 4935              	.L360:
2128:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4936              		.loc 1 2128 0 is_stmt 0 discriminator 1
 4937 022c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4938 022e 012B     		cmp	r3, #1
 4939 0230 07D8     		bhi	.L367
2128:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4940              		.loc 1 2128 0 discriminator 3
 4941 0232 184B     		ldr	r3, .L382+36
 4942 0234 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4943 0236 002B     		cmp	r3, #0
 4944 0238 03D1     		bne	.L367
2128:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 4945              		.loc 1 2128 0 discriminator 4
 4946 023a 174B     		ldr	r3, .L382+40
 4947 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4948 023e 002B     		cmp	r3, #0
 4949 0240 B7D0     		beq	.L368
 4950              	.L367:
2144:..\src/interruptions.c ****         }
2145:..\src/interruptions.c ****     }
2146:..\src/interruptions.c ****     
2147:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2148:..\src/interruptions.c ****     switch (rest_cycle_status){
 4951              		.loc 1 2148 0 is_stmt 1
 4952 0242 164B     		ldr	r3, .L382+44
 4953 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4954 0246 012B     		cmp	r3, #1
 4955 0248 2ED0     		beq	.L370
 4956 024a 022B     		cmp	r3, #2
 4957 024c 46D0     		beq	.L371
 4958 024e 002B     		cmp	r3, #0
 4959 0250 5ED1     		bne	.L369
2149:..\src/interruptions.c ****         case STATE_INACTIVE:
2150:..\src/interruptions.c ****             if (rest_enabled){
 4960              		.loc 1 2150 0
 4961 0252 134B     		ldr	r3, .L382+48
 4962 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4963 0256 002B     		cmp	r3, #0
 4964 0258 57D0     		beq	.L380
2151:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 4965              		.loc 1 2151 0
 4966 025a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 4967 025e 0346     		mov	r3, r0
 4968 0260 1A46     		mov	r2, r3
 4969 0262 104B     		ldr	r3, .L382+52
 4970 0264 1A60     		str	r2, [r3]
2152:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 4971              		.loc 1 2152 0
 4972 0266 0D4B     		ldr	r3, .L382+44
 4973 0268 0122     		movs	r2, #1
 4974 026a 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****             }
2154:..\src/interruptions.c ****             break;
 4975              		.loc 1 2154 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 128


 4976 026c 4DE0     		b	.L380
 4977              	.L383:
 4978 026e 00BF     		.align	2
 4979              	.L382:
 4980 0270 00000000 		.word	g_meas
 4981 0274 00000000 		.word	g_mem
 4982 0278 00010000 		.word	pos_cycle_status.10427
 4983 027c 00000000 		.word	pwm_sign
 4984 0280 04010000 		.word	thr_pos.10431
 4985 0284 08010000 		.word	max_pos.10432
 4986 0288 08000000 		.word	bin_threshold.10430
 4987 028c 67666666 		.word	1717986919
 4988 0290 0C010000 		.word	emg_cycle_status.10428
 4989 0294 00000000 		.word	emg_1_status
 4990 0298 00000000 		.word	emg_2_status
 4991 029c 0E010000 		.word	rest_cycle_status.10429
 4992 02a0 00000000 		.word	rest_enabled
 4993 02a4 10010000 		.word	timer_value_s.10439
 4994              	.L370:
2155:..\src/interruptions.c ****         case STATE_ACTIVE:
2156:..\src/interruptions.c ****             if (!rest_enabled){
 4995              		.loc 1 2156 0
 4996 02a8 1C4B     		ldr	r3, .L384
 4997 02aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4998 02ac 002B     		cmp	r3, #0
 4999 02ae 2ED1     		bne	.L381
2157:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 5000              		.loc 1 2157 0
 5001 02b0 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 5002 02b4 0346     		mov	r3, r0
 5003 02b6 1A46     		mov	r2, r3
 5004 02b8 194B     		ldr	r3, .L384+4
 5005 02ba 1A60     		str	r2, [r3]
2158:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 5006              		.loc 1 2158 0
 5007 02bc 194B     		ldr	r3, .L384+8
 5008 02be 1A68     		ldr	r2, [r3]
 5009 02c0 174B     		ldr	r3, .L384+4
 5010 02c2 1B68     		ldr	r3, [r3]
 5011 02c4 9A42     		cmp	r2, r3
 5012 02c6 05D2     		bcs	.L375
2159:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 5013              		.loc 1 2159 0
 5014 02c8 164B     		ldr	r3, .L384+8
 5015 02ca 1B68     		ldr	r3, [r3]
 5016 02cc 03F59663 		add	r3, r3, #1200
 5017 02d0 144A     		ldr	r2, .L384+8
 5018 02d2 1360     		str	r3, [r2]
 5019              	.L375:
2160:..\src/interruptions.c ****                 }
2161:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 5020              		.loc 1 2161 0
 5021 02d4 144B     		ldr	r3, .L384+12
 5022 02d6 0222     		movs	r2, #2
 5023 02d8 1A70     		strb	r2, [r3]
2162:..\src/interruptions.c ****             }
2163:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 129


 5024              		.loc 1 2163 0
 5025 02da 18E0     		b	.L381
 5026              	.L371:
2164:..\src/interruptions.c ****         case COUNTER_INC: 
2165:..\src/interruptions.c ****             g_mem.total_time_rest = g_mem.total_time_rest + (uint32)((timer_value_s - timer_value_e
 5027              		.loc 1 2165 0
 5028 02dc 134B     		ldr	r3, .L384+16
 5029 02de DA6C     		ldr	r2, [r3, #76]
 5030 02e0 104B     		ldr	r3, .L384+8
 5031 02e2 1968     		ldr	r1, [r3]
 5032 02e4 0E4B     		ldr	r3, .L384+4
 5033 02e6 1B68     		ldr	r3, [r3]
 5034 02e8 CB1A     		subs	r3, r1, r3
 5035 02ea 1149     		ldr	r1, .L384+20
 5036 02ec A1FB0313 		umull	r1, r3, r1, r3
 5037 02f0 DB08     		lsrs	r3, r3, #3
 5038 02f2 1344     		add	r3, r3, r2
 5039 02f4 0D4A     		ldr	r2, .L384+16
 5040 02f6 D364     		str	r3, [r2, #76]
2166:..\src/interruptions.c ****             g_mem.rest_counter = g_mem.rest_counter + 1;
 5041              		.loc 1 2166 0
 5042 02f8 0C4B     		ldr	r3, .L384+16
 5043 02fa 1B6C     		ldr	r3, [r3, #64]
 5044 02fc 0133     		adds	r3, r3, #1
 5045 02fe 0B4A     		ldr	r2, .L384+16
 5046 0300 1364     		str	r3, [r2, #64]
2167:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 5047              		.loc 1 2167 0
 5048 0302 094B     		ldr	r3, .L384+12
 5049 0304 0022     		movs	r2, #0
 5050 0306 1A70     		strb	r2, [r3]
2168:..\src/interruptions.c ****             break;
 5051              		.loc 1 2168 0
 5052 0308 02E0     		b	.L369
 5053              	.L380:
2154:..\src/interruptions.c ****         case STATE_ACTIVE:
 5054              		.loc 1 2154 0
 5055 030a 00BF     		nop
 5056 030c 00E0     		b	.L369
 5057              	.L381:
2163:..\src/interruptions.c ****         case COUNTER_INC: 
 5058              		.loc 1 2163 0
 5059 030e 00BF     		nop
 5060              	.L369:
2169:..\src/interruptions.c ****     }
2170:..\src/interruptions.c ****           
2171:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2172:..\src/interruptions.c ****     save_cycles_eeprom();
 5061              		.loc 1 2172 0
 5062 0310 FFF7FEFF 		bl	save_cycles_eeprom
2173:..\src/interruptions.c **** }
 5063              		.loc 1 2173 0
 5064 0314 00BF     		nop
 5065 0316 1837     		adds	r7, r7, #24
 5066              		.cfi_def_cfa_offset 8
 5067 0318 BD46     		mov	sp, r7
 5068              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 130


 5069              		@ sp needed
 5070 031a 80BD     		pop	{r7, pc}
 5071              	.L385:
 5072              		.align	2
 5073              	.L384:
 5074 031c 00000000 		.word	rest_enabled
 5075 0320 14010000 		.word	timer_value_e.10440
 5076 0324 10010000 		.word	timer_value_s.10439
 5077 0328 0E010000 		.word	rest_cycle_status.10429
 5078 032c 00000000 		.word	g_mem
 5079 0330 CDCCCCCC 		.word	-858993459
 5080              		.cfi_endproc
 5081              	.LFE74:
 5082              		.size	cycles_counter_update, .-cycles_counter_update
 5083              		.section	.text.save_cycles_eeprom,"ax",%progbits
 5084              		.align	2
 5085              		.global	save_cycles_eeprom
 5086              		.thumb
 5087              		.thumb_func
 5088              		.type	save_cycles_eeprom, %function
 5089              	save_cycles_eeprom:
 5090              	.LFB75:
2174:..\src/interruptions.c **** 
2175:..\src/interruptions.c **** //==============================================================================
2176:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2177:..\src/interruptions.c **** //==============================================================================
2178:..\src/interruptions.c **** 
2179:..\src/interruptions.c **** void save_cycles_eeprom() {
 5091              		.loc 1 2179 0
 5092              		.cfi_startproc
 5093              		@ args = 0, pretend = 0, frame = 24
 5094              		@ frame_needed = 1, uses_anonymous_args = 0
 5095 0000 80B5     		push	{r7, lr}
 5096              		.cfi_def_cfa_offset 8
 5097              		.cfi_offset 7, -8
 5098              		.cfi_offset 14, -4
 5099 0002 86B0     		sub	sp, sp, #24
 5100              		.cfi_def_cfa_offset 32
 5101 0004 00AF     		add	r7, sp, #0
 5102              		.cfi_def_cfa_register 7
2180:..\src/interruptions.c **** 
2181:..\src/interruptions.c ****     cystatus status;
2182:..\src/interruptions.c ****     static uint8 row_number;
2183:..\src/interruptions.c ****     uint8 row_start = 0;
 5103              		.loc 1 2183 0
 5104 0006 0023     		movs	r3, #0
 5105 0008 FB75     		strb	r3, [r7, #23]
2184:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.emg_counter[0];    //Data at beginning of the row 0
 5106              		.loc 1 2184 0
 5107 000a 394B     		ldr	r3, .L402
 5108 000c 3B61     		str	r3, [r7, #16]
2185:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.emg_counter[0];
 5109              		.loc 1 2185 0
 5110 000e 394B     		ldr	r3, .L402+4
 5111 0010 FB60     		str	r3, [r7, #12]
2186:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 5112              		.loc 1 2186 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 131


 5113 0012 FB7D     		ldrb	r3, [r7, #23]
 5114 0014 0533     		adds	r3, r3, #5
 5115 0016 FB72     		strb	r3, [r7, #11]
2187:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2188:..\src/interruptions.c **** 
2189:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2190:..\src/interruptions.c ****     switch(cycles_status) {
 5116              		.loc 1 2190 0
 5117 0018 374B     		ldr	r3, .L402+8
 5118 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5119 001c 042B     		cmp	r3, #4
 5120 001e 63D8     		bhi	.L398
 5121 0020 01A2     		adr	r2, .L389
 5122 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5123 0026 00BF     		.p2align 2
 5124              	.L389:
 5125 0028 3D000000 		.word	.L388+1
 5126 002c 5B000000 		.word	.L390+1
 5127 0030 8B000000 		.word	.L391+1
 5128 0034 C7000000 		.word	.L392+1
 5129 0038 DF000000 		.word	.L399+1
 5130              		.p2align 1
 5131              	.L388:
2191:..\src/interruptions.c ****         case PREPARE_DATA:
2192:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2193:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 5132              		.loc 1 2193 0
 5133 003c 6022     		movs	r2, #96
 5134 003e 3969     		ldr	r1, [r7, #16]
 5135 0040 F868     		ldr	r0, [r7, #12]
 5136 0042 FFF7FEFF 		bl	memcpy
2194:..\src/interruptions.c ****             m_addr = addr_start;
 5137              		.loc 1 2194 0
 5138 0046 2D4A     		ldr	r2, .L402+12
 5139 0048 3B69     		ldr	r3, [r7, #16]
 5140 004a 1360     		str	r3, [r2]
2195:..\src/interruptions.c ****             row_number = row_start;
 5141              		.loc 1 2195 0
 5142 004c 2C4A     		ldr	r2, .L402+16
 5143 004e FB7D     		ldrb	r3, [r7, #23]
 5144 0050 1370     		strb	r3, [r2]
2196:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 5145              		.loc 1 2196 0
 5146 0052 294B     		ldr	r3, .L402+8
 5147 0054 0122     		movs	r2, #1
 5148 0056 1A70     		strb	r2, [r3]
2197:..\src/interruptions.c ****             break;
 5149              		.loc 1 2197 0
 5150 0058 46E0     		b	.L387
 5151              	.L390:
2198:..\src/interruptions.c ****             
2199:..\src/interruptions.c ****         case WRITE_CYCLES:
2200:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 5152              		.loc 1 2200 0
 5153 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2201:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 5154              		.loc 1 2201 0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 132


 5155 005e 274B     		ldr	r3, .L402+12
 5156 0060 1A68     		ldr	r2, [r3]
 5157 0062 274B     		ldr	r3, .L402+16
 5158 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5159 0066 1946     		mov	r1, r3
 5160 0068 1046     		mov	r0, r2
 5161 006a FFF7FEFF 		bl	EEPROM_StartWrite
 5162 006e 7860     		str	r0, [r7, #4]
2202:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 5163              		.loc 1 2202 0
 5164 0070 7B68     		ldr	r3, [r7, #4]
 5165 0072 072B     		cmp	r3, #7
 5166 0074 02D0     		beq	.L394
 5167              		.loc 1 2202 0 is_stmt 0 discriminator 1
 5168 0076 7B68     		ldr	r3, [r7, #4]
 5169 0078 002B     		cmp	r3, #0
 5170 007a 32D1     		bne	.L400
 5171              	.L394:
2203:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 5172              		.loc 1 2203 0 is_stmt 1
 5173 007c 1E4B     		ldr	r3, .L402+8
 5174 007e 0222     		movs	r2, #2
 5175 0080 1A70     		strb	r2, [r3]
2204:..\src/interruptions.c ****                 can_write = FALSE;
 5176              		.loc 1 2204 0
 5177 0082 204B     		ldr	r3, .L402+20
 5178 0084 0022     		movs	r2, #0
 5179 0086 1A70     		strb	r2, [r3]
2205:..\src/interruptions.c ****             }
2206:..\src/interruptions.c ****             break;
 5180              		.loc 1 2206 0
 5181 0088 2BE0     		b	.L400
 5182              	.L391:
2207:..\src/interruptions.c ****             
2208:..\src/interruptions.c ****         case WAIT_QUERY:
2209:..\src/interruptions.c ****             status = EEPROM_Query();
 5183              		.loc 1 2209 0
 5184 008a FFF7FEFF 		bl	EEPROM_Query
 5185 008e 7860     		str	r0, [r7, #4]
2210:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 5186              		.loc 1 2210 0
 5187 0090 7B68     		ldr	r3, [r7, #4]
 5188 0092 002B     		cmp	r3, #0
 5189 0094 27D1     		bne	.L401
2211:..\src/interruptions.c ****                 if (row_number < row_end) {
 5190              		.loc 1 2211 0
 5191 0096 1A4B     		ldr	r3, .L402+16
 5192 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5193 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 5194 009c 9A42     		cmp	r2, r3
 5195 009e 0ED9     		bls	.L397
2212:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 5196              		.loc 1 2212 0
 5197 00a0 164B     		ldr	r3, .L402+12
 5198 00a2 1B68     		ldr	r3, [r3]
 5199 00a4 1033     		adds	r3, r3, #16
 5200 00a6 154A     		ldr	r2, .L402+12
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 133


 5201 00a8 1360     		str	r3, [r2]
2213:..\src/interruptions.c ****                     row_number = row_number + 1;
 5202              		.loc 1 2213 0
 5203 00aa 154B     		ldr	r3, .L402+16
 5204 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5205 00ae 0133     		adds	r3, r3, #1
 5206 00b0 DAB2     		uxtb	r2, r3
 5207 00b2 134B     		ldr	r3, .L402+16
 5208 00b4 1A70     		strb	r2, [r3]
2214:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 5209              		.loc 1 2214 0
 5210 00b6 104B     		ldr	r3, .L402+8
 5211 00b8 0122     		movs	r2, #1
 5212 00ba 1A70     		strb	r2, [r3]
2215:..\src/interruptions.c ****                 }
2216:..\src/interruptions.c ****                 else {
2217:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2218:..\src/interruptions.c ****                 }
2219:..\src/interruptions.c ****             }
2220:..\src/interruptions.c ****             break;
 5213              		.loc 1 2220 0
 5214 00bc 13E0     		b	.L401
 5215              	.L397:
2217:..\src/interruptions.c ****                 }
 5216              		.loc 1 2217 0
 5217 00be 0E4B     		ldr	r3, .L402+8
 5218 00c0 0322     		movs	r2, #3
 5219 00c2 1A70     		strb	r2, [r3]
 5220              		.loc 1 2220 0
 5221 00c4 0FE0     		b	.L401
 5222              	.L392:
2221:..\src/interruptions.c ****            
2222:..\src/interruptions.c ****         case WRITE_END:
2223:..\src/interruptions.c ****             can_write = TRUE;            
 5223              		.loc 1 2223 0
 5224 00c6 0F4B     		ldr	r3, .L402+20
 5225 00c8 0122     		movs	r2, #1
 5226 00ca 1A70     		strb	r2, [r3]
2224:..\src/interruptions.c ****             cycles_status = NONE;
 5227              		.loc 1 2224 0
 5228 00cc 0A4B     		ldr	r3, .L402+8
 5229 00ce 0422     		movs	r2, #4
 5230 00d0 1A70     		strb	r2, [r3]
2225:..\src/interruptions.c ****             
2226:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2227:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 5231              		.loc 1 2227 0
 5232 00d2 6022     		movs	r2, #96
 5233 00d4 F968     		ldr	r1, [r7, #12]
 5234 00d6 3869     		ldr	r0, [r7, #16]
 5235 00d8 FFF7FEFF 		bl	memcpy
2228:..\src/interruptions.c ****             break;
 5236              		.loc 1 2228 0
 5237 00dc 04E0     		b	.L387
 5238              	.L399:
2229:..\src/interruptions.c ****             
2230:..\src/interruptions.c ****         case NONE:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 134


2231:..\src/interruptions.c ****             break;
 5239              		.loc 1 2231 0
 5240 00de 00BF     		nop
 5241 00e0 02E0     		b	.L398
 5242              	.L400:
2206:..\src/interruptions.c ****             
 5243              		.loc 1 2206 0
 5244 00e2 00BF     		nop
 5245 00e4 00E0     		b	.L398
 5246              	.L401:
2220:..\src/interruptions.c ****            
 5247              		.loc 1 2220 0
 5248 00e6 00BF     		nop
 5249              	.L387:
 5250              	.L398:
2232:..\src/interruptions.c ****     }
2233:..\src/interruptions.c ****     
2234:..\src/interruptions.c **** }
 5251              		.loc 1 2234 0
 5252 00e8 00BF     		nop
 5253 00ea 1837     		adds	r7, r7, #24
 5254              		.cfi_def_cfa_offset 8
 5255 00ec BD46     		mov	sp, r7
 5256              		.cfi_def_cfa_register 13
 5257              		@ sp needed
 5258 00ee 80BD     		pop	{r7, pc}
 5259              	.L403:
 5260              		.align	2
 5261              	.L402:
 5262 00f0 00000000 		.word	g_mem
 5263 00f4 00000000 		.word	c_mem
 5264 00f8 00000000 		.word	cycles_status
 5265 00fc 18010000 		.word	m_addr.10467
 5266 0100 1C010000 		.word	row_number.10462
 5267 0104 00000000 		.word	can_write
 5268              		.cfi_endproc
 5269              	.LFE75:
 5270              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 5271              		.bss
 5272              	state.10260:
 5273 0000 00       		.space	1
 5274 0001 000000   		.align	2
 5275              	rx_queue.10264:
 5276 0004 000000   		.space	3
 5277              	data_packet_length.10262:
 5278 0007 00       		.space	1
 5279              	data_packet_index.10261:
 5280 0008 00       		.space	1
 5281 0009 000000   		.align	2
 5282              	data_packet_buffer.10263:
 5283 000c 00000000 		.space	128
 5283      00000000 
 5283      00000000 
 5283      00000000 
 5283      00000000 
 5284              		.data
 5285              		.align	1
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 135


 5286              		.type	counter_calibration.10280, %object
 5287              		.size	counter_calibration.10280, 2
 5288              	counter_calibration.10280:
 5289 0000 0100     		.short	1
 5290              		.align	1
 5291              		.type	counter_tension_func.10281, %object
 5292              		.size	counter_tension_func.10281, 2
 5293              	counter_tension_func.10281:
 5294 0002 0100     		.short	1
 5295              		.bss
 5296              	current_emg.10311:
 5297 008c 00       		.space	1
 5298 008d 000000   		.align	2
 5299              	pos_error_sum.10304:
 5300 0090 00000000 		.space	4
 5301              		.align	2
 5302              	prev_pos_err.10306:
 5303 0094 00000000 		.space	4
 5304              	motor_dir.10309:
 5305 0098 00       		.space	1
 5306 0099 000000   		.align	2
 5307              	curr_error_sum.10305:
 5308 009c 00000000 		.space	4
 5309              		.align	2
 5310              	prev_curr_err.10307:
 5311 00a0 00000000 		.space	4
 5312              		.align	2
 5313              	prev_pwm.10308:
 5314 00a4 00000000 		.space	4
 5315              		.align	2
 5316              	position_counter.10310:
 5317 00a8 00000000 		.space	4
 5318              		.align	2
 5319              	last_value_encoder.10351:
 5320 00ac 00000000 		.space	12
 5320      00000000 
 5320      00000000 
 5321              		.align	2
 5322              	comp_value_encoder.10352:
 5323 00b8 00000000 		.space	12
 5323      00000000 
 5323      00000000 
 5324              		.data
 5325              		.type	only_first_time.10354, %object
 5326              		.size	only_first_time.10354, 1
 5327              	only_first_time.10354:
 5328 0004 01       		.byte	1
 5329              		.bss
 5330              		.align	2
 5331              	error.10353:
 5332 00c4 000000   		.space	3
 5333 00c7 00       		.align	2
 5334              	v_value.10359:
 5335 00c8 00000000 		.space	12
 5335      00000000 
 5335      00000000 
 5336              		.align	2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 136


 5337              	vv_value.10360:
 5338 00d4 00000000 		.space	12
 5338      00000000 
 5338      00000000 
 5339              		.align	2
 5340              	vvv_value.10361:
 5341 00e0 00000000 		.space	12
 5341      00000000 
 5341      00000000 
 5342              	pos_reconstruct.10358:
 5343 00ec 00       		.space	1
 5344              	one_time_execute.10356:
 5345 00ed 00       		.space	1
 5346              	safe_startup_motor_activation.10355:
 5347 00ee 00       		.space	1
 5348 00ef 00       		.align	2
 5349              	count_startup_motor.10357:
 5350 00f0 00000000 		.space	4
 5351              		.data
 5352              		.type	first_tension_valid.10379, %object
 5353              		.size	first_tension_valid.10379, 1
 5354              	first_tension_valid.10379:
 5355 0005 01       		.byte	1
 5356              		.bss
 5357              		.align	1
 5358              	count.10380:
 5359 00f4 0000     		.space	2
 5360              	idx.10382:
 5361 00f6 00       		.space	1
 5362 00f7 00       		.align	2
 5363              	v_count.10381:
 5364 00f8 00000000 		.space	4
 5365              		.align	1
 5366              	emg_counter_1.10377:
 5367 00fc 0000     		.space	2
 5368              		.align	1
 5369              	emg_counter_2.10378:
 5370 00fe 0000     		.space	2
 5371              	pos_cycle_status.10427:
 5372 0100 00       		.space	1
 5373 0101 000000   		.align	2
 5374              	thr_pos.10431:
 5375 0104 00000000 		.space	4
 5376              		.align	2
 5377              	max_pos.10432:
 5378 0108 00000000 		.space	4
 5379              		.data
 5380 0006 0000     		.align	2
 5381              		.type	bin_threshold.10430, %object
 5382              		.size	bin_threshold.10430, 4
 5383              	bin_threshold.10430:
 5384 0008 FA000000 		.word	250
 5385              		.bss
 5386              		.align	2
 5387              	emg_cycle_status.10428:
 5388 010c 0000     		.space	2
 5389              	rest_cycle_status.10429:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 137


 5390 010e 00       		.space	1
 5391 010f 00       		.align	2
 5392              	timer_value_s.10439:
 5393 0110 00000000 		.space	4
 5394              		.align	2
 5395              	timer_value_e.10440:
 5396 0114 00000000 		.space	4
 5397              		.align	2
 5398              	m_addr.10467:
 5399 0118 00000000 		.space	4
 5400              	row_number.10462:
 5401 011c 00       		.space	1
 5402              		.text
 5403              	.Letext0:
 5404              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5405              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5406              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5407              		.file 5 "..\\src\\commands.h"
 5408              		.file 6 "..\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 5409              		.file 7 "..\\src\\globals.h"
 5410              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 5411              		.section	.debug_info,"",%progbits
 5412              	.Ldebug_info0:
 5413 0000 0B120000 		.4byte	0x120b
 5414 0004 0400     		.2byte	0x4
 5415 0006 00000000 		.4byte	.Ldebug_abbrev0
 5416 000a 04       		.byte	0x4
 5417 000b 01       		.uleb128 0x1
 5418 000c D7060000 		.4byte	.LASF267
 5419 0010 0C       		.byte	0xc
 5420 0011 BE0C0000 		.4byte	.LASF268
 5421 0015 9E020000 		.4byte	.LASF269
 5422 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5423 001d 00000000 		.4byte	0
 5424 0021 00000000 		.4byte	.Ldebug_line0
 5425 0025 02       		.uleb128 0x2
 5426 0026 01       		.byte	0x1
 5427 0027 06       		.byte	0x6
 5428 0028 E3020000 		.4byte	.LASF0
 5429 002c 02       		.uleb128 0x2
 5430 002d 01       		.byte	0x1
 5431 002e 08       		.byte	0x8
 5432 002f 4F030000 		.4byte	.LASF1
 5433 0033 02       		.uleb128 0x2
 5434 0034 02       		.byte	0x2
 5435 0035 05       		.byte	0x5
 5436 0036 700B0000 		.4byte	.LASF2
 5437 003a 02       		.uleb128 0x2
 5438 003b 02       		.byte	0x2
 5439 003c 07       		.byte	0x7
 5440 003d A40C0000 		.4byte	.LASF3
 5441 0041 03       		.uleb128 0x3
 5442 0042 250D0000 		.4byte	.LASF9
 5443 0046 02       		.byte	0x2
 5444 0047 3F       		.byte	0x3f
 5445 0048 4C000000 		.4byte	0x4c
 5446 004c 02       		.uleb128 0x2
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 138


 5447 004d 04       		.byte	0x4
 5448 004e 05       		.byte	0x5
 5449 004f FB010000 		.4byte	.LASF4
 5450 0053 02       		.uleb128 0x2
 5451 0054 04       		.byte	0x4
 5452 0055 07       		.byte	0x7
 5453 0056 19060000 		.4byte	.LASF5
 5454 005a 02       		.uleb128 0x2
 5455 005b 08       		.byte	0x8
 5456 005c 05       		.byte	0x5
 5457 005d 87070000 		.4byte	.LASF6
 5458 0061 02       		.uleb128 0x2
 5459 0062 08       		.byte	0x8
 5460 0063 07       		.byte	0x7
 5461 0064 C9090000 		.4byte	.LASF7
 5462 0068 04       		.uleb128 0x4
 5463 0069 04       		.byte	0x4
 5464 006a 05       		.byte	0x5
 5465 006b 696E7400 		.ascii	"int\000"
 5466 006f 02       		.uleb128 0x2
 5467 0070 04       		.byte	0x4
 5468 0071 07       		.byte	0x7
 5469 0072 41080000 		.4byte	.LASF8
 5470 0076 03       		.uleb128 0x3
 5471 0077 48000000 		.4byte	.LASF10
 5472 007b 03       		.byte	0x3
 5473 007c 2C       		.byte	0x2c
 5474 007d 41000000 		.4byte	0x41
 5475 0081 05       		.uleb128 0x5
 5476 0082 5F0B0000 		.4byte	.LASF11
 5477 0086 04       		.byte	0x4
 5478 0087 E401     		.2byte	0x1e4
 5479 0089 2C000000 		.4byte	0x2c
 5480 008d 05       		.uleb128 0x5
 5481 008e 720D0000 		.4byte	.LASF12
 5482 0092 04       		.byte	0x4
 5483 0093 E501     		.2byte	0x1e5
 5484 0095 3A000000 		.4byte	0x3a
 5485 0099 05       		.uleb128 0x5
 5486 009a 6E000000 		.4byte	.LASF13
 5487 009e 04       		.byte	0x4
 5488 009f E601     		.2byte	0x1e6
 5489 00a1 53000000 		.4byte	0x53
 5490 00a5 05       		.uleb128 0x5
 5491 00a6 30010000 		.4byte	.LASF14
 5492 00aa 04       		.byte	0x4
 5493 00ab E701     		.2byte	0x1e7
 5494 00ad 25000000 		.4byte	0x25
 5495 00b1 05       		.uleb128 0x5
 5496 00b2 D00B0000 		.4byte	.LASF15
 5497 00b6 04       		.byte	0x4
 5498 00b7 E801     		.2byte	0x1e8
 5499 00b9 33000000 		.4byte	0x33
 5500 00bd 05       		.uleb128 0x5
 5501 00be D50C0000 		.4byte	.LASF16
 5502 00c2 04       		.byte	0x4
 5503 00c3 E901     		.2byte	0x1e9
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 139


 5504 00c5 4C000000 		.4byte	0x4c
 5505 00c9 05       		.uleb128 0x5
 5506 00ca 45020000 		.4byte	.LASF17
 5507 00ce 04       		.byte	0x4
 5508 00cf EA01     		.2byte	0x1ea
 5509 00d1 D5000000 		.4byte	0xd5
 5510 00d5 02       		.uleb128 0x2
 5511 00d6 04       		.byte	0x4
 5512 00d7 04       		.byte	0x4
 5513 00d8 1F080000 		.4byte	.LASF18
 5514 00dc 02       		.uleb128 0x2
 5515 00dd 08       		.byte	0x8
 5516 00de 04       		.byte	0x4
 5517 00df C5070000 		.4byte	.LASF19
 5518 00e3 02       		.uleb128 0x2
 5519 00e4 01       		.byte	0x1
 5520 00e5 08       		.byte	0x8
 5521 00e6 F5030000 		.4byte	.LASF20
 5522 00ea 05       		.uleb128 0x5
 5523 00eb 7A080000 		.4byte	.LASF21
 5524 00ef 04       		.byte	0x4
 5525 00f0 8602     		.2byte	0x286
 5526 00f2 53000000 		.4byte	0x53
 5527 00f6 05       		.uleb128 0x5
 5528 00f7 700A0000 		.4byte	.LASF22
 5529 00fb 04       		.byte	0x4
 5530 00fc 8E02     		.2byte	0x28e
 5531 00fe 02010000 		.4byte	0x102
 5532 0102 06       		.uleb128 0x6
 5533 0103 81000000 		.4byte	0x81
 5534 0107 02       		.uleb128 0x2
 5535 0108 08       		.byte	0x8
 5536 0109 04       		.byte	0x4
 5537 010a F8080000 		.4byte	.LASF23
 5538 010e 02       		.uleb128 0x2
 5539 010f 04       		.byte	0x4
 5540 0110 07       		.byte	0x7
 5541 0111 00000000 		.4byte	.LASF24
 5542 0115 07       		.uleb128 0x7
 5543 0116 5F0D0000 		.4byte	.LASF31
 5544 011a 01       		.byte	0x1
 5545 011b 2C000000 		.4byte	0x2c
 5546 011f 05       		.byte	0x5
 5547 0120 8B       		.byte	0x8b
 5548 0121 4A010000 		.4byte	0x14a
 5549 0125 08       		.uleb128 0x8
 5550 0126 B2050000 		.4byte	.LASF25
 5551 012a 00       		.byte	0
 5552 012b 08       		.uleb128 0x8
 5553 012c 83080000 		.4byte	.LASF26
 5554 0130 01       		.byte	0x1
 5555 0131 08       		.uleb128 0x8
 5556 0132 91010000 		.4byte	.LASF27
 5557 0136 02       		.byte	0x2
 5558 0137 08       		.uleb128 0x8
 5559 0138 FE000000 		.4byte	.LASF28
 5560 013c 03       		.byte	0x3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 140


 5561 013d 08       		.uleb128 0x8
 5562 013e C7000000 		.4byte	.LASF29
 5563 0142 04       		.byte	0x4
 5564 0143 08       		.uleb128 0x8
 5565 0144 1A000000 		.4byte	.LASF30
 5566 0148 05       		.byte	0x5
 5567 0149 00       		.byte	0
 5568 014a 07       		.uleb128 0x7
 5569 014b 95070000 		.4byte	.LASF32
 5570 014f 01       		.byte	0x1
 5571 0150 2C000000 		.4byte	0x2c
 5572 0154 05       		.byte	0x5
 5573 0155 9D       		.byte	0x9d
 5574 0156 73010000 		.4byte	0x173
 5575 015a 08       		.uleb128 0x8
 5576 015b 170D0000 		.4byte	.LASF33
 5577 015f 00       		.byte	0
 5578 0160 08       		.uleb128 0x8
 5579 0161 AE060000 		.4byte	.LASF34
 5580 0165 01       		.byte	0x1
 5581 0166 08       		.uleb128 0x8
 5582 0167 E8080000 		.4byte	.LASF35
 5583 016b 02       		.byte	0x2
 5584 016c 08       		.uleb128 0x8
 5585 016d FC050000 		.4byte	.LASF36
 5586 0171 03       		.byte	0x3
 5587 0172 00       		.byte	0
 5588 0173 03       		.uleb128 0x3
 5589 0174 F00C0000 		.4byte	.LASF37
 5590 0178 06       		.byte	0x6
 5591 0179 7E       		.byte	0x7e
 5592 017a 7E010000 		.4byte	0x17e
 5593 017e 09       		.uleb128 0x9
 5594 017f F00C0000 		.4byte	.LASF37
 5595 0183 0A       		.uleb128 0xa
 5596 0184 04       		.byte	0x4
 5597 0185 73010000 		.4byte	0x173
 5598 0189 0B       		.uleb128 0xb
 5599 018a 65070000 		.4byte	.LASF40
 5600 018e 10       		.byte	0x10
 5601 018f 07       		.byte	0x7
 5602 0190 A7       		.byte	0xa7
 5603 0191 C6010000 		.4byte	0x1c6
 5604 0195 0C       		.uleb128 0xc
 5605 0196 706F7300 		.ascii	"pos\000"
 5606 019a 07       		.byte	0x7
 5607 019b A8       		.byte	0xa8
 5608 019c BD000000 		.4byte	0xbd
 5609 01a0 00       		.byte	0
 5610 01a1 0D       		.uleb128 0xd
 5611 01a2 93060000 		.4byte	.LASF38
 5612 01a6 07       		.byte	0x7
 5613 01a7 A9       		.byte	0xa9
 5614 01a8 BD000000 		.4byte	0xbd
 5615 01ac 04       		.byte	0x4
 5616 01ad 0C       		.uleb128 0xc
 5617 01ae 70776D00 		.ascii	"pwm\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 141


 5618 01b2 07       		.byte	0x7
 5619 01b3 AA       		.byte	0xaa
 5620 01b4 BD000000 		.4byte	0xbd
 5621 01b8 08       		.byte	0x8
 5622 01b9 0D       		.uleb128 0xd
 5623 01ba 070A0000 		.4byte	.LASF39
 5624 01be 07       		.byte	0x7
 5625 01bf AB       		.byte	0xab
 5626 01c0 81000000 		.4byte	0x81
 5627 01c4 0C       		.byte	0xc
 5628 01c5 00       		.byte	0
 5629 01c6 0B       		.uleb128 0xb
 5630 01c7 F80A0000 		.4byte	.LASF41
 5631 01cb 54       		.byte	0x54
 5632 01cc 07       		.byte	0x7
 5633 01cd B2       		.byte	0xb2
 5634 01ce 33020000 		.4byte	0x233
 5635 01d2 0C       		.uleb128 0xc
 5636 01d3 706F7300 		.ascii	"pos\000"
 5637 01d7 07       		.byte	0x7
 5638 01d8 B3       		.byte	0xb3
 5639 01d9 33020000 		.4byte	0x233
 5640 01dd 00       		.byte	0
 5641 01de 0D       		.uleb128 0xd
 5642 01df 93060000 		.4byte	.LASF38
 5643 01e3 07       		.byte	0x7
 5644 01e4 B4       		.byte	0xb4
 5645 01e5 43020000 		.4byte	0x243
 5646 01e9 0C       		.byte	0xc
 5647 01ea 0D       		.uleb128 0xd
 5648 01eb 070C0000 		.4byte	.LASF42
 5649 01ef 07       		.byte	0x7
 5650 01f0 B5       		.byte	0xb5
 5651 01f1 BD000000 		.4byte	0xbd
 5652 01f5 14       		.byte	0x14
 5653 01f6 0C       		.uleb128 0xc
 5654 01f7 726F7400 		.ascii	"rot\000"
 5655 01fb 07       		.byte	0x7
 5656 01fc B6       		.byte	0xb6
 5657 01fd 53020000 		.4byte	0x253
 5658 0201 18       		.byte	0x18
 5659 0202 0C       		.uleb128 0xc
 5660 0203 656D6700 		.ascii	"emg\000"
 5661 0207 07       		.byte	0x7
 5662 0208 B8       		.byte	0xb8
 5663 0209 43020000 		.4byte	0x243
 5664 020d 1C       		.byte	0x1c
 5665 020e 0C       		.uleb128 0xc
 5666 020f 76656C00 		.ascii	"vel\000"
 5667 0213 07       		.byte	0x7
 5668 0214 B9       		.byte	0xb9
 5669 0215 33020000 		.4byte	0x233
 5670 0219 24       		.byte	0x24
 5671 021a 0C       		.uleb128 0xc
 5672 021b 61636300 		.ascii	"acc\000"
 5673 021f 07       		.byte	0x7
 5674 0220 BA       		.byte	0xba
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 142


 5675 0221 33020000 		.4byte	0x233
 5676 0225 30       		.byte	0x30
 5677 0226 0D       		.uleb128 0xd
 5678 0227 AC080000 		.4byte	.LASF43
 5679 022b 07       		.byte	0x7
 5680 022c BB       		.byte	0xbb
 5681 022d 63020000 		.4byte	0x263
 5682 0231 3C       		.byte	0x3c
 5683 0232 00       		.byte	0
 5684 0233 0E       		.uleb128 0xe
 5685 0234 BD000000 		.4byte	0xbd
 5686 0238 43020000 		.4byte	0x243
 5687 023c 0F       		.uleb128 0xf
 5688 023d 0E010000 		.4byte	0x10e
 5689 0241 02       		.byte	0x2
 5690 0242 00       		.byte	0
 5691 0243 0E       		.uleb128 0xe
 5692 0244 BD000000 		.4byte	0xbd
 5693 0248 53020000 		.4byte	0x253
 5694 024c 0F       		.uleb128 0xf
 5695 024d 0E010000 		.4byte	0x10e
 5696 0251 01       		.byte	0x1
 5697 0252 00       		.byte	0
 5698 0253 0E       		.uleb128 0xe
 5699 0254 A5000000 		.4byte	0xa5
 5700 0258 63020000 		.4byte	0x263
 5701 025c 0F       		.uleb128 0xf
 5702 025d 0E010000 		.4byte	0x10e
 5703 0261 02       		.byte	0x2
 5704 0262 00       		.byte	0
 5705 0263 0E       		.uleb128 0xe
 5706 0264 BD000000 		.4byte	0xbd
 5707 0268 73020000 		.4byte	0x273
 5708 026c 0F       		.uleb128 0xf
 5709 026d 0E010000 		.4byte	0x10e
 5710 0271 05       		.byte	0x5
 5711 0272 00       		.byte	0
 5712 0273 0B       		.uleb128 0xb
 5713 0274 66000000 		.4byte	.LASF44
 5714 0278 86       		.byte	0x86
 5715 0279 07       		.byte	0x7
 5716 027a C2       		.byte	0xc2
 5717 027b B0020000 		.4byte	0x2b0
 5718 027f 0D       		.uleb128 0xd
 5719 0280 D3040000 		.4byte	.LASF45
 5720 0284 07       		.byte	0x7
 5721 0285 C3       		.byte	0xc3
 5722 0286 B0020000 		.4byte	0x2b0
 5723 028a 00       		.byte	0
 5724 028b 0D       		.uleb128 0xd
 5725 028c EA090000 		.4byte	.LASF46
 5726 0290 07       		.byte	0x7
 5727 0291 C4       		.byte	0xc4
 5728 0292 B1000000 		.4byte	0xb1
 5729 0296 80       		.byte	0x80
 5730 0297 0C       		.uleb128 0xc
 5731 0298 696E6400 		.ascii	"ind\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 143


 5732 029c 07       		.byte	0x7
 5733 029d C5       		.byte	0xc5
 5734 029e B1000000 		.4byte	0xb1
 5735 02a2 82       		.byte	0x82
 5736 02a3 0D       		.uleb128 0xd
 5737 02a4 86010000 		.4byte	.LASF47
 5738 02a8 07       		.byte	0x7
 5739 02a9 C6       		.byte	0xc6
 5740 02aa 81000000 		.4byte	0x81
 5741 02ae 84       		.byte	0x84
 5742 02af 00       		.byte	0
 5743 02b0 0E       		.uleb128 0xe
 5744 02b1 81000000 		.4byte	0x81
 5745 02b5 C0020000 		.4byte	0x2c0
 5746 02b9 0F       		.uleb128 0xf
 5747 02ba 0E010000 		.4byte	0x10e
 5748 02be 7F       		.byte	0x7f
 5749 02bf 00       		.byte	0
 5750 02c0 10       		.uleb128 0x10
 5751 02c1 D0060000 		.4byte	.LASF48
 5752 02c5 8401     		.2byte	0x184
 5753 02c7 07       		.byte	0x7
 5754 02c8 CE       		.byte	0xce
 5755 02c9 01060000 		.4byte	0x601
 5756 02cd 0D       		.uleb128 0xd
 5757 02ce 67020000 		.4byte	.LASF49
 5758 02d2 07       		.byte	0x7
 5759 02d3 D2       		.byte	0xd2
 5760 02d4 01060000 		.4byte	0x601
 5761 02d8 00       		.byte	0
 5762 02d9 0D       		.uleb128 0xd
 5763 02da 58010000 		.4byte	.LASF50
 5764 02de 07       		.byte	0x7
 5765 02df D4       		.byte	0xd4
 5766 02e0 11060000 		.4byte	0x611
 5767 02e4 08       		.byte	0x8
 5768 02e5 0D       		.uleb128 0xd
 5769 02e6 DB080000 		.4byte	.LASF51
 5770 02ea 07       		.byte	0x7
 5771 02eb D6       		.byte	0xd6
 5772 02ec 21060000 		.4byte	0x621
 5773 02f0 30       		.byte	0x30
 5774 02f1 0D       		.uleb128 0xd
 5775 02f2 F1000000 		.4byte	.LASF52
 5776 02f6 07       		.byte	0x7
 5777 02f7 D8       		.byte	0xd8
 5778 02f8 99000000 		.4byte	0x99
 5779 02fc 40       		.byte	0x40
 5780 02fd 0D       		.uleb128 0xd
 5781 02fe 2F0D0000 		.4byte	.LASF53
 5782 0302 07       		.byte	0x7
 5783 0303 D9       		.byte	0xd9
 5784 0304 99000000 		.4byte	0x99
 5785 0308 44       		.byte	0x44
 5786 0309 0D       		.uleb128 0xd
 5787 030a 2B060000 		.4byte	.LASF54
 5788 030e 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 144


 5789 030f DA       		.byte	0xda
 5790 0310 99000000 		.4byte	0x99
 5791 0314 48       		.byte	0x48
 5792 0315 0D       		.uleb128 0xd
 5793 0316 4D060000 		.4byte	.LASF55
 5794 031a 07       		.byte	0x7
 5795 031b DB       		.byte	0xdb
 5796 031c 99000000 		.4byte	0x99
 5797 0320 4C       		.byte	0x4c
 5798 0321 0D       		.uleb128 0xd
 5799 0322 6B090000 		.4byte	.LASF56
 5800 0326 07       		.byte	0x7
 5801 0327 DD       		.byte	0xdd
 5802 0328 31060000 		.4byte	0x631
 5803 032c 50       		.byte	0x50
 5804 032d 0D       		.uleb128 0xd
 5805 032e 04020000 		.4byte	.LASF57
 5806 0332 07       		.byte	0x7
 5807 0333 DE       		.byte	0xde
 5808 0334 41060000 		.4byte	0x641
 5809 0338 56       		.byte	0x56
 5810 0339 0D       		.uleb128 0xd
 5811 033a 68080000 		.4byte	.LASF58
 5812 033e 07       		.byte	0x7
 5813 033f E3       		.byte	0xe3
 5814 0340 81000000 		.4byte	0x81
 5815 0344 A0       		.byte	0xa0
 5816 0345 0C       		.uleb128 0xc
 5817 0346 696400   		.ascii	"id\000"
 5818 0349 07       		.byte	0x7
 5819 034a E4       		.byte	0xe4
 5820 034b 81000000 		.4byte	0x81
 5821 034f A1       		.byte	0xa1
 5822 0350 0C       		.uleb128 0xc
 5823 0351 6B5F7000 		.ascii	"k_p\000"
 5824 0355 07       		.byte	0x7
 5825 0356 E6       		.byte	0xe6
 5826 0357 BD000000 		.4byte	0xbd
 5827 035b A4       		.byte	0xa4
 5828 035c 0C       		.uleb128 0xc
 5829 035d 6B5F6900 		.ascii	"k_i\000"
 5830 0361 07       		.byte	0x7
 5831 0362 E7       		.byte	0xe7
 5832 0363 BD000000 		.4byte	0xbd
 5833 0367 A8       		.byte	0xa8
 5834 0368 0C       		.uleb128 0xc
 5835 0369 6B5F6400 		.ascii	"k_d\000"
 5836 036d 07       		.byte	0x7
 5837 036e E8       		.byte	0xe8
 5838 036f BD000000 		.4byte	0xbd
 5839 0373 AC       		.byte	0xac
 5840 0374 0D       		.uleb128 0xd
 5841 0375 430A0000 		.4byte	.LASF59
 5842 0379 07       		.byte	0x7
 5843 037a EA       		.byte	0xea
 5844 037b BD000000 		.4byte	0xbd
 5845 037f B0       		.byte	0xb0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 145


 5846 0380 0D       		.uleb128 0xd
 5847 0381 3C040000 		.4byte	.LASF60
 5848 0385 07       		.byte	0x7
 5849 0386 EB       		.byte	0xeb
 5850 0387 BD000000 		.4byte	0xbd
 5851 038b B4       		.byte	0xb4
 5852 038c 0D       		.uleb128 0xd
 5853 038d 2F040000 		.4byte	.LASF61
 5854 0391 07       		.byte	0x7
 5855 0392 EC       		.byte	0xec
 5856 0393 BD000000 		.4byte	0xbd
 5857 0397 B8       		.byte	0xb8
 5858 0398 0D       		.uleb128 0xd
 5859 0399 000C0000 		.4byte	.LASF62
 5860 039d 07       		.byte	0x7
 5861 039e ED       		.byte	0xed
 5862 039f BD000000 		.4byte	0xbd
 5863 03a3 BC       		.byte	0xbc
 5864 03a4 0D       		.uleb128 0xd
 5865 03a5 BF040000 		.4byte	.LASF63
 5866 03a9 07       		.byte	0x7
 5867 03aa EF       		.byte	0xef
 5868 03ab BD000000 		.4byte	0xbd
 5869 03af C0       		.byte	0xc0
 5870 03b0 0D       		.uleb128 0xd
 5871 03b1 7A0B0000 		.4byte	.LASF64
 5872 03b5 07       		.byte	0x7
 5873 03b6 F0       		.byte	0xf0
 5874 03b7 BD000000 		.4byte	0xbd
 5875 03bb C4       		.byte	0xc4
 5876 03bc 0D       		.uleb128 0xd
 5877 03bd DA040000 		.4byte	.LASF65
 5878 03c1 07       		.byte	0x7
 5879 03c2 F1       		.byte	0xf1
 5880 03c3 BD000000 		.4byte	0xbd
 5881 03c7 C8       		.byte	0xc8
 5882 03c8 0D       		.uleb128 0xd
 5883 03c9 E5050000 		.4byte	.LASF66
 5884 03cd 07       		.byte	0x7
 5885 03ce F2       		.byte	0xf2
 5886 03cf BD000000 		.4byte	0xbd
 5887 03d3 CC       		.byte	0xcc
 5888 03d4 0D       		.uleb128 0xd
 5889 03d5 970D0000 		.4byte	.LASF67
 5890 03d9 07       		.byte	0x7
 5891 03da F4       		.byte	0xf4
 5892 03db BD000000 		.4byte	0xbd
 5893 03df D0       		.byte	0xd0
 5894 03e0 0D       		.uleb128 0xd
 5895 03e1 5D060000 		.4byte	.LASF68
 5896 03e5 07       		.byte	0x7
 5897 03e6 F5       		.byte	0xf5
 5898 03e7 81000000 		.4byte	0x81
 5899 03eb D4       		.byte	0xd4
 5900 03ec 0D       		.uleb128 0xd
 5901 03ed A3060000 		.4byte	.LASF69
 5902 03f1 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 146


 5903 03f2 F6       		.byte	0xf6
 5904 03f3 81000000 		.4byte	0x81
 5905 03f7 D5       		.byte	0xd5
 5906 03f8 0D       		.uleb128 0xd
 5907 03f9 6D080000 		.4byte	.LASF70
 5908 03fd 07       		.byte	0x7
 5909 03fe F7       		.byte	0xf7
 5910 03ff 81000000 		.4byte	0x81
 5911 0403 D6       		.byte	0xd6
 5912 0404 0C       		.uleb128 0xc
 5913 0405 72657300 		.ascii	"res\000"
 5914 0409 07       		.byte	0x7
 5915 040a F8       		.byte	0xf8
 5916 040b 51060000 		.4byte	0x651
 5917 040f D7       		.byte	0xd7
 5918 0410 0D       		.uleb128 0xd
 5919 0411 63060000 		.4byte	.LASF71
 5920 0415 07       		.byte	0x7
 5921 0416 FA       		.byte	0xfa
 5922 0417 33020000 		.4byte	0x233
 5923 041b DC       		.byte	0xdc
 5924 041c 0D       		.uleb128 0xd
 5925 041d 35040000 		.4byte	.LASF72
 5926 0421 07       		.byte	0x7
 5927 0422 FC       		.byte	0xfc
 5928 0423 61060000 		.4byte	0x661
 5929 0427 E8       		.byte	0xe8
 5930 0428 0D       		.uleb128 0xd
 5931 0429 F80C0000 		.4byte	.LASF73
 5932 042d 07       		.byte	0x7
 5933 042e FE       		.byte	0xfe
 5934 042f 81000000 		.4byte	0x81
 5935 0433 F4       		.byte	0xf4
 5936 0434 11       		.uleb128 0x11
 5937 0435 7C000000 		.4byte	.LASF74
 5938 0439 07       		.byte	0x7
 5939 043a 0001     		.2byte	0x100
 5940 043c BD000000 		.4byte	0xbd
 5941 0440 F8       		.byte	0xf8
 5942 0441 11       		.uleb128 0x11
 5943 0442 53040000 		.4byte	.LASF75
 5944 0446 07       		.byte	0x7
 5945 0447 0101     		.2byte	0x101
 5946 0449 BD000000 		.4byte	0xbd
 5947 044d FC       		.byte	0xfc
 5948 044e 12       		.uleb128 0x12
 5949 044f F9070000 		.4byte	.LASF76
 5950 0453 07       		.byte	0x7
 5951 0454 0301     		.2byte	0x103
 5952 0456 BD000000 		.4byte	0xbd
 5953 045a 0001     		.2byte	0x100
 5954 045c 12       		.uleb128 0x12
 5955 045d FA030000 		.4byte	.LASF77
 5956 0461 07       		.byte	0x7
 5957 0462 0401     		.2byte	0x104
 5958 0464 BD000000 		.4byte	0xbd
 5959 0468 0401     		.2byte	0x104
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 147


 5960 046a 12       		.uleb128 0x12
 5961 046b 510D0000 		.4byte	.LASF78
 5962 046f 07       		.byte	0x7
 5963 0470 0501     		.2byte	0x105
 5964 0472 B1000000 		.4byte	0xb1
 5965 0476 0801     		.2byte	0x108
 5966 0478 12       		.uleb128 0x12
 5967 0479 BA080000 		.4byte	.LASF79
 5968 047d 07       		.byte	0x7
 5969 047e 0601     		.2byte	0x106
 5970 0480 71060000 		.4byte	0x671
 5971 0484 0A01     		.2byte	0x10a
 5972 0486 12       		.uleb128 0x12
 5973 0487 E30A0000 		.4byte	.LASF80
 5974 048b 07       		.byte	0x7
 5975 048c 0701     		.2byte	0x107
 5976 048e 81000000 		.4byte	0x81
 5977 0492 0E01     		.2byte	0x10e
 5978 0494 12       		.uleb128 0x12
 5979 0495 430D0000 		.4byte	.LASF81
 5980 0499 07       		.byte	0x7
 5981 049a 0A01     		.2byte	0x10a
 5982 049c 01060000 		.4byte	0x601
 5983 04a0 1001     		.2byte	0x110
 5984 04a2 12       		.uleb128 0x12
 5985 04a3 69040000 		.4byte	.LASF82
 5986 04a7 07       		.byte	0x7
 5987 04a8 0B01     		.2byte	0x10b
 5988 04aa 81000000 		.4byte	0x81
 5989 04ae 1801     		.2byte	0x118
 5990 04b0 12       		.uleb128 0x12
 5991 04b1 75090000 		.4byte	.LASF83
 5992 04b5 07       		.byte	0x7
 5993 04b6 0C01     		.2byte	0x10c
 5994 04b8 81000000 		.4byte	0x81
 5995 04bc 1901     		.2byte	0x119
 5996 04be 12       		.uleb128 0x12
 5997 04bf 30090000 		.4byte	.LASF84
 5998 04c3 07       		.byte	0x7
 5999 04c4 0D01     		.2byte	0x10d
 6000 04c6 A5000000 		.4byte	0xa5
 6001 04ca 1A01     		.2byte	0x11a
 6002 04cc 12       		.uleb128 0x12
 6003 04cd E90B0000 		.4byte	.LASF85
 6004 04d1 07       		.byte	0x7
 6005 04d2 0E01     		.2byte	0x10e
 6006 04d4 81000000 		.4byte	0x81
 6007 04d8 1B01     		.2byte	0x11b
 6008 04da 12       		.uleb128 0x12
 6009 04db DB000000 		.4byte	.LASF86
 6010 04df 07       		.byte	0x7
 6011 04e0 0F01     		.2byte	0x10f
 6012 04e2 81060000 		.4byte	0x681
 6013 04e6 1C01     		.2byte	0x11c
 6014 04e8 12       		.uleb128 0x12
 6015 04e9 8B0C0000 		.4byte	.LASF87
 6016 04ed 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 148


 6017 04ee 1201     		.2byte	0x112
 6018 04f0 81000000 		.4byte	0x81
 6019 04f4 3401     		.2byte	0x134
 6020 04f6 12       		.uleb128 0x12
 6021 04f7 E0090000 		.4byte	.LASF88
 6022 04fb 07       		.byte	0x7
 6023 04fc 1301     		.2byte	0x113
 6024 04fe 81000000 		.4byte	0x81
 6025 0502 3501     		.2byte	0x135
 6026 0504 12       		.uleb128 0x12
 6027 0505 A5070000 		.4byte	.LASF89
 6028 0509 07       		.byte	0x7
 6029 050a 1401     		.2byte	0x114
 6030 050c 81000000 		.4byte	0x81
 6031 0510 3601     		.2byte	0x136
 6032 0512 12       		.uleb128 0x12
 6033 0513 8B090000 		.4byte	.LASF90
 6034 0517 07       		.byte	0x7
 6035 0518 1501     		.2byte	0x115
 6036 051a 81000000 		.4byte	0x81
 6037 051e 3701     		.2byte	0x137
 6038 0520 12       		.uleb128 0x12
 6039 0521 8A060000 		.4byte	.LASF91
 6040 0525 07       		.byte	0x7
 6041 0526 1601     		.2byte	0x116
 6042 0528 BD000000 		.4byte	0xbd
 6043 052c 3801     		.2byte	0x138
 6044 052e 12       		.uleb128 0x12
 6045 052f 790D0000 		.4byte	.LASF92
 6046 0533 07       		.byte	0x7
 6047 0534 1701     		.2byte	0x117
 6048 0536 BD000000 		.4byte	0xbd
 6049 053a 3C01     		.2byte	0x13c
 6050 053c 12       		.uleb128 0x12
 6051 053d 73040000 		.4byte	.LASF93
 6052 0541 07       		.byte	0x7
 6053 0542 1901     		.2byte	0x119
 6054 0544 BD000000 		.4byte	0xbd
 6055 0548 4001     		.2byte	0x140
 6056 054a 12       		.uleb128 0x12
 6057 054b CC050000 		.4byte	.LASF94
 6058 054f 07       		.byte	0x7
 6059 0550 1A01     		.2byte	0x11a
 6060 0552 81000000 		.4byte	0x81
 6061 0556 4401     		.2byte	0x144
 6062 0558 12       		.uleb128 0x12
 6063 0559 0C030000 		.4byte	.LASF95
 6064 055d 07       		.byte	0x7
 6065 055e 1B01     		.2byte	0x11b
 6066 0560 81000000 		.4byte	0x81
 6067 0564 4501     		.2byte	0x145
 6068 0566 12       		.uleb128 0x12
 6069 0567 AC030000 		.4byte	.LASF96
 6070 056b 07       		.byte	0x7
 6071 056c 1C01     		.2byte	0x11c
 6072 056e 81000000 		.4byte	0x81
 6073 0572 4601     		.2byte	0x146
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 149


 6074 0574 12       		.uleb128 0x12
 6075 0575 CD010000 		.4byte	.LASF97
 6076 0579 07       		.byte	0x7
 6077 057a 1D01     		.2byte	0x11d
 6078 057c 81000000 		.4byte	0x81
 6079 0580 4701     		.2byte	0x147
 6080 0582 12       		.uleb128 0x12
 6081 0583 D60B0000 		.4byte	.LASF98
 6082 0587 07       		.byte	0x7
 6083 0588 1E01     		.2byte	0x11e
 6084 058a 81000000 		.4byte	0x81
 6085 058e 4801     		.2byte	0x148
 6086 0590 12       		.uleb128 0x12
 6087 0591 20020000 		.4byte	.LASF99
 6088 0595 07       		.byte	0x7
 6089 0596 1F01     		.2byte	0x11f
 6090 0598 91060000 		.4byte	0x691
 6091 059c 4901     		.2byte	0x149
 6092 059e 12       		.uleb128 0x12
 6093 059f 950C0000 		.4byte	.LASF100
 6094 05a3 07       		.byte	0x7
 6095 05a4 2101     		.2byte	0x121
 6096 05a6 81000000 		.4byte	0x81
 6097 05aa 5001     		.2byte	0x150
 6098 05ac 12       		.uleb128 0x12
 6099 05ad 25080000 		.4byte	.LASF101
 6100 05b1 07       		.byte	0x7
 6101 05b2 2201     		.2byte	0x122
 6102 05b4 A1060000 		.4byte	0x6a1
 6103 05b8 5101     		.2byte	0x151
 6104 05ba 12       		.uleb128 0x12
 6105 05bb C6040000 		.4byte	.LASF102
 6106 05bf 07       		.byte	0x7
 6107 05c0 2401     		.2byte	0x124
 6108 05c2 B7060000 		.4byte	0x6b7
 6109 05c6 6A01     		.2byte	0x16a
 6110 05c8 12       		.uleb128 0x12
 6111 05c9 A8040000 		.4byte	.LASF103
 6112 05cd 07       		.byte	0x7
 6113 05ce 2601     		.2byte	0x126
 6114 05d0 CD060000 		.4byte	0x6cd
 6115 05d4 7401     		.2byte	0x174
 6116 05d6 12       		.uleb128 0x12
 6117 05d7 700C0000 		.4byte	.LASF104
 6118 05db 07       		.byte	0x7
 6119 05dc 2801     		.2byte	0x128
 6120 05de 81000000 		.4byte	0x81
 6121 05e2 8001     		.2byte	0x180
 6122 05e4 12       		.uleb128 0x12
 6123 05e5 AD010000 		.4byte	.LASF105
 6124 05e9 07       		.byte	0x7
 6125 05ea 2901     		.2byte	0x129
 6126 05ec 81000000 		.4byte	0x81
 6127 05f0 8101     		.2byte	0x181
 6128 05f2 12       		.uleb128 0x12
 6129 05f3 550A0000 		.4byte	.LASF106
 6130 05f7 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 150


 6131 05f8 2A01     		.2byte	0x12a
 6132 05fa DD060000 		.4byte	0x6dd
 6133 05fe 8201     		.2byte	0x182
 6134 0600 00       		.byte	0
 6135 0601 0E       		.uleb128 0xe
 6136 0602 99000000 		.4byte	0x99
 6137 0606 11060000 		.4byte	0x611
 6138 060a 0F       		.uleb128 0xf
 6139 060b 0E010000 		.4byte	0x10e
 6140 060f 01       		.byte	0x1
 6141 0610 00       		.byte	0
 6142 0611 0E       		.uleb128 0xe
 6143 0612 99000000 		.4byte	0x99
 6144 0616 21060000 		.4byte	0x621
 6145 061a 0F       		.uleb128 0xf
 6146 061b 0E010000 		.4byte	0x10e
 6147 061f 09       		.byte	0x9
 6148 0620 00       		.byte	0
 6149 0621 0E       		.uleb128 0xe
 6150 0622 99000000 		.4byte	0x99
 6151 0626 31060000 		.4byte	0x631
 6152 062a 0F       		.uleb128 0xf
 6153 062b 0E010000 		.4byte	0x10e
 6154 062f 03       		.byte	0x3
 6155 0630 00       		.byte	0
 6156 0631 0E       		.uleb128 0xe
 6157 0632 81000000 		.4byte	0x81
 6158 0636 41060000 		.4byte	0x641
 6159 063a 0F       		.uleb128 0xf
 6160 063b 0E010000 		.4byte	0x10e
 6161 063f 05       		.byte	0x5
 6162 0640 00       		.byte	0
 6163 0641 0E       		.uleb128 0xe
 6164 0642 81000000 		.4byte	0x81
 6165 0646 51060000 		.4byte	0x651
 6166 064a 0F       		.uleb128 0xf
 6167 064b 0E010000 		.4byte	0x10e
 6168 064f 49       		.byte	0x49
 6169 0650 00       		.byte	0
 6170 0651 0E       		.uleb128 0xe
 6171 0652 81000000 		.4byte	0x81
 6172 0656 61060000 		.4byte	0x661
 6173 065a 0F       		.uleb128 0xf
 6174 065b 0E010000 		.4byte	0x10e
 6175 065f 02       		.byte	0x2
 6176 0660 00       		.byte	0
 6177 0661 0E       		.uleb128 0xe
 6178 0662 C9000000 		.4byte	0xc9
 6179 0666 71060000 		.4byte	0x671
 6180 066a 0F       		.uleb128 0xf
 6181 066b 0E010000 		.4byte	0x10e
 6182 066f 02       		.byte	0x2
 6183 0670 00       		.byte	0
 6184 0671 0E       		.uleb128 0xe
 6185 0672 8D000000 		.4byte	0x8d
 6186 0676 81060000 		.4byte	0x681
 6187 067a 0F       		.uleb128 0xf
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 151


 6188 067b 0E010000 		.4byte	0x10e
 6189 067f 01       		.byte	0x1
 6190 0680 00       		.byte	0
 6191 0681 0E       		.uleb128 0xe
 6192 0682 D5000000 		.4byte	0xd5
 6193 0686 91060000 		.4byte	0x691
 6194 068a 0F       		.uleb128 0xf
 6195 068b 0E010000 		.4byte	0x10e
 6196 068f 05       		.byte	0x5
 6197 0690 00       		.byte	0
 6198 0691 0E       		.uleb128 0xe
 6199 0692 81000000 		.4byte	0x81
 6200 0696 A1060000 		.4byte	0x6a1
 6201 069a 0F       		.uleb128 0xf
 6202 069b 0E010000 		.4byte	0x10e
 6203 069f 06       		.byte	0x6
 6204 06a0 00       		.byte	0
 6205 06a1 0E       		.uleb128 0xe
 6206 06a2 81000000 		.4byte	0x81
 6207 06a6 B7060000 		.4byte	0x6b7
 6208 06aa 0F       		.uleb128 0xf
 6209 06ab 0E010000 		.4byte	0x10e
 6210 06af 04       		.byte	0x4
 6211 06b0 0F       		.uleb128 0xf
 6212 06b1 0E010000 		.4byte	0x10e
 6213 06b5 04       		.byte	0x4
 6214 06b6 00       		.byte	0
 6215 06b7 0E       		.uleb128 0xe
 6216 06b8 81000000 		.4byte	0x81
 6217 06bc CD060000 		.4byte	0x6cd
 6218 06c0 0F       		.uleb128 0xf
 6219 06c1 0E010000 		.4byte	0x10e
 6220 06c5 01       		.byte	0x1
 6221 06c6 0F       		.uleb128 0xf
 6222 06c7 0E010000 		.4byte	0x10e
 6223 06cb 04       		.byte	0x4
 6224 06cc 00       		.byte	0
 6225 06cd 0E       		.uleb128 0xe
 6226 06ce 81000000 		.4byte	0x81
 6227 06d2 DD060000 		.4byte	0x6dd
 6228 06d6 0F       		.uleb128 0xf
 6229 06d7 0E010000 		.4byte	0x10e
 6230 06db 0B       		.byte	0xb
 6231 06dc 00       		.byte	0
 6232 06dd 0E       		.uleb128 0xe
 6233 06de 81000000 		.4byte	0x81
 6234 06e2 ED060000 		.4byte	0x6ed
 6235 06e6 0F       		.uleb128 0xf
 6236 06e7 0E010000 		.4byte	0x10e
 6237 06eb 01       		.byte	0x1
 6238 06ec 00       		.byte	0
 6239 06ed 13       		.uleb128 0x13
 6240 06ee B70C0000 		.4byte	.LASF107
 6241 06f2 28       		.byte	0x28
 6242 06f3 07       		.byte	0x7
 6243 06f4 2E01     		.2byte	0x12e
 6244 06f6 49070000 		.4byte	0x749
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 152


 6245 06fa 11       		.uleb128 0x11
 6246 06fb E2030000 		.4byte	.LASF108
 6247 06ff 07       		.byte	0x7
 6248 0700 2F01     		.2byte	0x12f
 6249 0702 81000000 		.4byte	0x81
 6250 0706 00       		.byte	0
 6251 0707 11       		.uleb128 0x11
 6252 0708 2D020000 		.4byte	.LASF109
 6253 070c 07       		.byte	0x7
 6254 070d 3001     		.2byte	0x130
 6255 070f 49070000 		.4byte	0x749
 6256 0713 02       		.byte	0x2
 6257 0714 11       		.uleb128 0x11
 6258 0715 60090000 		.4byte	.LASF110
 6259 0719 07       		.byte	0x7
 6260 071a 3101     		.2byte	0x131
 6261 071c 49070000 		.4byte	0x749
 6262 0720 08       		.byte	0x8
 6263 0721 11       		.uleb128 0x11
 6264 0722 FD090000 		.4byte	.LASF111
 6265 0726 07       		.byte	0x7
 6266 0727 3201     		.2byte	0x132
 6267 0729 49070000 		.4byte	0x749
 6268 072d 0E       		.byte	0xe
 6269 072e 11       		.uleb128 0x11
 6270 072f 7F060000 		.4byte	.LASF112
 6271 0733 07       		.byte	0x7
 6272 0734 3301     		.2byte	0x133
 6273 0736 59070000 		.4byte	0x759
 6274 073a 14       		.byte	0x14
 6275 073b 11       		.uleb128 0x11
 6276 073c 73010000 		.4byte	.LASF113
 6277 0740 07       		.byte	0x7
 6278 0741 3401     		.2byte	0x134
 6279 0743 B1000000 		.4byte	0xb1
 6280 0747 24       		.byte	0x24
 6281 0748 00       		.byte	0
 6282 0749 0E       		.uleb128 0xe
 6283 074a B1000000 		.4byte	0xb1
 6284 074e 59070000 		.4byte	0x759
 6285 0752 0F       		.uleb128 0xf
 6286 0753 0E010000 		.4byte	0x10e
 6287 0757 02       		.byte	0x2
 6288 0758 00       		.byte	0
 6289 0759 0E       		.uleb128 0xe
 6290 075a D5000000 		.4byte	0xd5
 6291 075e 69070000 		.4byte	0x769
 6292 0762 0F       		.uleb128 0xf
 6293 0763 0E010000 		.4byte	0x10e
 6294 0767 03       		.byte	0x3
 6295 0768 00       		.byte	0
 6296 0769 13       		.uleb128 0x13
 6297 076a 840D0000 		.4byte	.LASF114
 6298 076e 08       		.byte	0x8
 6299 076f 07       		.byte	0x7
 6300 0770 3B01     		.2byte	0x13b
 6301 0772 91070000 		.4byte	0x791
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 153


 6302 0776 11       		.uleb128 0x11
 6303 0777 5F040000 		.4byte	.LASF115
 6304 077b 07       		.byte	0x7
 6305 077c 3C01     		.2byte	0x13c
 6306 077e BD000000 		.4byte	0xbd
 6307 0782 00       		.byte	0
 6308 0783 11       		.uleb128 0x11
 6309 0784 8C010000 		.4byte	.LASF116
 6310 0788 07       		.byte	0x7
 6311 0789 3D01     		.2byte	0x13d
 6312 078b BD000000 		.4byte	0xbd
 6313 078f 04       		.byte	0x4
 6314 0790 00       		.byte	0
 6315 0791 13       		.uleb128 0x13
 6316 0792 EF020000 		.4byte	.LASF117
 6317 0796 06       		.byte	0x6
 6318 0797 07       		.byte	0x7
 6319 0798 4401     		.2byte	0x144
 6320 079a D3070000 		.4byte	0x7d3
 6321 079e 11       		.uleb128 0x11
 6322 079f 11060000 		.4byte	.LASF118
 6323 07a3 07       		.byte	0x7
 6324 07a4 4501     		.2byte	0x145
 6325 07a6 81000000 		.4byte	0x81
 6326 07aa 00       		.byte	0
 6327 07ab 11       		.uleb128 0x11
 6328 07ac A00D0000 		.4byte	.LASF119
 6329 07b0 07       		.byte	0x7
 6330 07b1 4601     		.2byte	0x146
 6331 07b3 81000000 		.4byte	0x81
 6332 07b7 01       		.byte	0x1
 6333 07b8 11       		.uleb128 0x11
 6334 07b9 F9040000 		.4byte	.LASF120
 6335 07bd 07       		.byte	0x7
 6336 07be 4701     		.2byte	0x147
 6337 07c0 B1000000 		.4byte	0xb1
 6338 07c4 02       		.byte	0x2
 6339 07c5 11       		.uleb128 0x11
 6340 07c6 ED070000 		.4byte	.LASF121
 6341 07ca 07       		.byte	0x7
 6342 07cb 4801     		.2byte	0x148
 6343 07cd B1000000 		.4byte	0xb1
 6344 07d1 04       		.byte	0x4
 6345 07d2 00       		.byte	0
 6346 07d3 14       		.uleb128 0x14
 6347 07d4 01       		.byte	0x1
 6348 07d5 2C000000 		.4byte	0x2c
 6349 07d9 07       		.byte	0x7
 6350 07da 4C01     		.2byte	0x14c
 6351 07dc 05080000 		.4byte	0x805
 6352 07e0 08       		.uleb128 0x8
 6353 07e1 7C040000 		.4byte	.LASF122
 6354 07e5 00       		.byte	0
 6355 07e6 08       		.uleb128 0x8
 6356 07e7 A30A0000 		.4byte	.LASF123
 6357 07eb 01       		.byte	0x1
 6358 07ec 08       		.uleb128 0x8
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 154


 6359 07ed 04090000 		.4byte	.LASF124
 6360 07f1 02       		.byte	0x2
 6361 07f2 08       		.uleb128 0x8
 6362 07f3 C0010000 		.4byte	.LASF125
 6363 07f7 03       		.byte	0x3
 6364 07f8 08       		.uleb128 0x8
 6365 07f9 1A080000 		.4byte	.LASF126
 6366 07fd 04       		.byte	0x4
 6367 07fe 08       		.uleb128 0x8
 6368 07ff 670A0000 		.4byte	.LASF127
 6369 0803 05       		.byte	0x5
 6370 0804 00       		.byte	0
 6371 0805 05       		.uleb128 0x5
 6372 0806 3B010000 		.4byte	.LASF128
 6373 080a 07       		.byte	0x7
 6374 080b 5401     		.2byte	0x154
 6375 080d D3070000 		.4byte	0x7d3
 6376 0811 14       		.uleb128 0x14
 6377 0812 01       		.byte	0x1
 6378 0813 2C000000 		.4byte	0x2c
 6379 0817 07       		.byte	0x7
 6380 0818 5601     		.2byte	0x156
 6381 081a 3D080000 		.4byte	0x83d
 6382 081e 08       		.uleb128 0x8
 6383 081f 66010000 		.4byte	.LASF129
 6384 0823 00       		.byte	0
 6385 0824 08       		.uleb128 0x8
 6386 0825 39060000 		.4byte	.LASF130
 6387 0829 01       		.byte	0x1
 6388 082a 08       		.uleb128 0x8
 6389 082b 98060000 		.4byte	.LASF131
 6390 082f 02       		.byte	0x2
 6391 0830 08       		.uleb128 0x8
 6392 0831 73020000 		.4byte	.LASF132
 6393 0835 03       		.byte	0x3
 6394 0836 08       		.uleb128 0x8
 6395 0837 6D0D0000 		.4byte	.LASF133
 6396 083b 04       		.byte	0x4
 6397 083c 00       		.byte	0
 6398 083d 05       		.uleb128 0x5
 6399 083e 1E0B0000 		.4byte	.LASF134
 6400 0842 07       		.byte	0x7
 6401 0843 5D01     		.2byte	0x15d
 6402 0845 11080000 		.4byte	0x811
 6403 0849 15       		.uleb128 0x15
 6404 084a 5D030000 		.4byte	.LASF135
 6405 084e 01       		.byte	0x1
 6406 084f 62       		.byte	0x62
 6407 0850 00000000 		.4byte	.LFB64
 6408 0854 18000000 		.4byte	.LFE64-.LFB64
 6409 0858 01       		.uleb128 0x1
 6410 0859 9C       		.byte	0x9c
 6411 085a 15       		.uleb128 0x15
 6412 085b 5D0C0000 		.4byte	.LASF136
 6413 085f 01       		.byte	0x1
 6414 0860 6D       		.byte	0x6d
 6415 0861 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 155


 6416 0865 20000000 		.4byte	.LFE65-.LFB65
 6417 0869 01       		.uleb128 0x1
 6418 086a 9C       		.byte	0x9c
 6419 086b 16       		.uleb128 0x16
 6420 086c DB070000 		.4byte	.LASF148
 6421 0870 01       		.byte	0x1
 6422 0871 86       		.byte	0x86
 6423 0872 00000000 		.4byte	.LFB66
 6424 0876 F4010000 		.4byte	.LFE66-.LFB66
 6425 087a 01       		.uleb128 0x1
 6426 087b 9C       		.byte	0x9c
 6427 087c 00090000 		.4byte	0x900
 6428 0880 17       		.uleb128 0x17
 6429 0881 96000000 		.4byte	.LASF137
 6430 0885 01       		.byte	0x1
 6431 0886 8B       		.byte	0x8b
 6432 0887 81000000 		.4byte	0x81
 6433 088b 05       		.uleb128 0x5
 6434 088c 03       		.byte	0x3
 6435 088d 00000000 		.4byte	state.10260
 6436 0891 17       		.uleb128 0x17
 6437 0892 1E050000 		.4byte	.LASF138
 6438 0896 01       		.byte	0x1
 6439 0897 8E       		.byte	0x8e
 6440 0898 81000000 		.4byte	0x81
 6441 089c 05       		.uleb128 0x5
 6442 089d 03       		.byte	0x3
 6443 089e 08000000 		.4byte	data_packet_index.10261
 6444 08a2 17       		.uleb128 0x17
 6445 08a3 300A0000 		.4byte	.LASF139
 6446 08a7 01       		.byte	0x1
 6447 08a8 8F       		.byte	0x8f
 6448 08a9 81000000 		.4byte	0x81
 6449 08ad 05       		.uleb128 0x5
 6450 08ae 03       		.byte	0x3
 6451 08af 07000000 		.4byte	data_packet_length.10262
 6452 08b3 17       		.uleb128 0x17
 6453 08b4 30050000 		.4byte	.LASF140
 6454 08b8 01       		.byte	0x1
 6455 08b9 90       		.byte	0x90
 6456 08ba B0020000 		.4byte	0x2b0
 6457 08be 05       		.uleb128 0x5
 6458 08bf 03       		.byte	0x3
 6459 08c0 0C000000 		.4byte	data_packet_buffer.10263
 6460 08c4 17       		.uleb128 0x17
 6461 08c5 A3080000 		.4byte	.LASF141
 6462 08c9 01       		.byte	0x1
 6463 08ca 91       		.byte	0x91
 6464 08cb 51060000 		.4byte	0x651
 6465 08cf 05       		.uleb128 0x5
 6466 08d0 03       		.byte	0x3
 6467 08d1 04000000 		.4byte	rx_queue.10264
 6468 08d5 17       		.uleb128 0x17
 6469 08d6 1E010000 		.4byte	.LASF142
 6470 08da 01       		.byte	0x1
 6471 08db 94       		.byte	0x94
 6472 08dc 81000000 		.4byte	0x81
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 156


 6473 08e0 02       		.uleb128 0x2
 6474 08e1 91       		.byte	0x91
 6475 08e2 75       		.sleb128 -11
 6476 08e3 17       		.uleb128 0x17
 6477 08e4 E3040000 		.4byte	.LASF143
 6478 08e8 01       		.byte	0x1
 6479 08e9 95       		.byte	0x95
 6480 08ea 81000000 		.4byte	0x81
 6481 08ee 02       		.uleb128 0x2
 6482 08ef 91       		.byte	0x91
 6483 08f0 77       		.sleb128 -9
 6484 08f1 17       		.uleb128 0x17
 6485 08f2 EE050000 		.4byte	.LASF144
 6486 08f6 01       		.byte	0x1
 6487 08f7 96       		.byte	0x96
 6488 08f8 81000000 		.4byte	0x81
 6489 08fc 02       		.uleb128 0x2
 6490 08fd 91       		.byte	0x91
 6491 08fe 76       		.sleb128 -10
 6492 08ff 00       		.byte	0
 6493 0900 18       		.uleb128 0x18
 6494 0901 9B0B0000 		.4byte	.LASF165
 6495 0905 01       		.byte	0x1
 6496 0906 0601     		.2byte	0x106
 6497 0908 00000000 		.4byte	.LFB67
 6498 090c E4020000 		.4byte	.LFE67-.LFB67
 6499 0910 01       		.uleb128 0x1
 6500 0911 9C       		.byte	0x9c
 6501 0912 4B090000 		.4byte	0x94b
 6502 0916 19       		.uleb128 0x19
 6503 0917 51050000 		.4byte	.LASF145
 6504 091b 01       		.byte	0x1
 6505 091c 0801     		.2byte	0x108
 6506 091e 8D000000 		.4byte	0x8d
 6507 0922 05       		.uleb128 0x5
 6508 0923 03       		.byte	0x3
 6509 0924 00000000 		.4byte	counter_calibration.10280
 6510 0928 19       		.uleb128 0x19
 6511 0929 A9090000 		.4byte	.LASF146
 6512 092d 01       		.byte	0x1
 6513 092e 0901     		.2byte	0x109
 6514 0930 8D000000 		.4byte	0x8d
 6515 0934 05       		.uleb128 0x5
 6516 0935 03       		.byte	0x3
 6517 0936 02000000 		.4byte	counter_tension_func.10281
 6518 093a 19       		.uleb128 0x19
 6519 093b 35010000 		.4byte	.LASF147
 6520 093f 01       		.byte	0x1
 6521 0940 0A01     		.2byte	0x10a
 6522 0942 4B090000 		.4byte	0x94b
 6523 0946 03       		.uleb128 0x3
 6524 0947 91       		.byte	0x91
 6525 0948 AC6C     		.sleb128 -2516
 6526 094a 00       		.byte	0
 6527 094b 0E       		.uleb128 0xe
 6528 094c E3000000 		.4byte	0xe3
 6529 0950 5C090000 		.4byte	0x95c
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 157


 6530 0954 1A       		.uleb128 0x1a
 6531 0955 0E010000 		.4byte	0x10e
 6532 0959 C309     		.2byte	0x9c3
 6533 095b 00       		.byte	0
 6534 095c 1B       		.uleb128 0x1b
 6535 095d 83040000 		.4byte	.LASF149
 6536 0961 01       		.byte	0x1
 6537 0962 F701     		.2byte	0x1f7
 6538 0964 00000000 		.4byte	.LFB68
 6539 0968 C0090000 		.4byte	.LFE68-.LFB68
 6540 096c 01       		.uleb128 0x1
 6541 096d 9C       		.byte	0x9c
 6542 096e 250B0000 		.4byte	0xb25
 6543 0972 19       		.uleb128 0x19
 6544 0973 32000000 		.4byte	.LASF150
 6545 0977 01       		.byte	0x1
 6546 0978 F901     		.2byte	0x1f9
 6547 097a BD000000 		.4byte	0xbd
 6548 097e 02       		.uleb128 0x2
 6549 097f 91       		.byte	0x91
 6550 0980 74       		.sleb128 -12
 6551 0981 19       		.uleb128 0x19
 6552 0982 E7000000 		.4byte	.LASF151
 6553 0986 01       		.byte	0x1
 6554 0987 FB01     		.2byte	0x1fb
 6555 0989 BD000000 		.4byte	0xbd
 6556 098d 02       		.uleb128 0x2
 6557 098e 91       		.byte	0x91
 6558 098f 70       		.sleb128 -16
 6559 0990 19       		.uleb128 0x19
 6560 0991 200C0000 		.4byte	.LASF152
 6561 0995 01       		.byte	0x1
 6562 0996 FC01     		.2byte	0x1fc
 6563 0998 BD000000 		.4byte	0xbd
 6564 099c 03       		.uleb128 0x3
 6565 099d 91       		.byte	0x91
 6566 099e AC7F     		.sleb128 -84
 6567 09a0 19       		.uleb128 0x19
 6568 09a1 B4080000 		.4byte	.LASF153
 6569 09a5 01       		.byte	0x1
 6570 09a6 FE01     		.2byte	0x1fe
 6571 09a8 BD000000 		.4byte	0xbd
 6572 09ac 02       		.uleb128 0x2
 6573 09ad 91       		.byte	0x91
 6574 09ae 6C       		.sleb128 -20
 6575 09af 19       		.uleb128 0x19
 6576 09b0 E8030000 		.4byte	.LASF154
 6577 09b4 01       		.byte	0x1
 6578 09b5 FF01     		.2byte	0x1ff
 6579 09b7 BD000000 		.4byte	0xbd
 6580 09bb 02       		.uleb128 0x2
 6581 09bc 91       		.byte	0x91
 6582 09bd 68       		.sleb128 -24
 6583 09be 19       		.uleb128 0x19
 6584 09bf F8020000 		.4byte	.LASF155
 6585 09c3 01       		.byte	0x1
 6586 09c4 0102     		.2byte	0x201
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 158


 6587 09c6 BD000000 		.4byte	0xbd
 6588 09ca 03       		.uleb128 0x3
 6589 09cb 91       		.byte	0x91
 6590 09cc B47F     		.sleb128 -76
 6591 09ce 19       		.uleb128 0x19
 6592 09cf 02030000 		.4byte	.LASF156
 6593 09d3 01       		.byte	0x1
 6594 09d4 0102     		.2byte	0x201
 6595 09d6 BD000000 		.4byte	0xbd
 6596 09da 03       		.uleb128 0x3
 6597 09db 91       		.byte	0x91
 6598 09dc B07F     		.sleb128 -80
 6599 09de 1C       		.uleb128 0x1c
 6600 09df 6B5F7000 		.ascii	"k_p\000"
 6601 09e3 01       		.byte	0x1
 6602 09e4 0302     		.2byte	0x203
 6603 09e6 BD000000 		.4byte	0xbd
 6604 09ea 02       		.uleb128 0x2
 6605 09eb 91       		.byte	0x91
 6606 09ec 64       		.sleb128 -28
 6607 09ed 1C       		.uleb128 0x1c
 6608 09ee 6B5F6900 		.ascii	"k_i\000"
 6609 09f2 01       		.byte	0x1
 6610 09f3 0402     		.2byte	0x204
 6611 09f5 BD000000 		.4byte	0xbd
 6612 09f9 02       		.uleb128 0x2
 6613 09fa 91       		.byte	0x91
 6614 09fb 60       		.sleb128 -32
 6615 09fc 1C       		.uleb128 0x1c
 6616 09fd 6B5F6400 		.ascii	"k_d\000"
 6617 0a01 01       		.byte	0x1
 6618 0a02 0502     		.2byte	0x205
 6619 0a04 BD000000 		.4byte	0xbd
 6620 0a08 02       		.uleb128 0x2
 6621 0a09 91       		.byte	0x91
 6622 0a0a 5C       		.sleb128 -36
 6623 0a0b 19       		.uleb128 0x19
 6624 0a0c 430A0000 		.4byte	.LASF59
 6625 0a10 01       		.byte	0x1
 6626 0a11 0702     		.2byte	0x207
 6627 0a13 BD000000 		.4byte	0xbd
 6628 0a17 02       		.uleb128 0x2
 6629 0a18 91       		.byte	0x91
 6630 0a19 58       		.sleb128 -40
 6631 0a1a 19       		.uleb128 0x19
 6632 0a1b 3C040000 		.4byte	.LASF60
 6633 0a1f 01       		.byte	0x1
 6634 0a20 0802     		.2byte	0x208
 6635 0a22 BD000000 		.4byte	0xbd
 6636 0a26 02       		.uleb128 0x2
 6637 0a27 91       		.byte	0x91
 6638 0a28 54       		.sleb128 -44
 6639 0a29 19       		.uleb128 0x19
 6640 0a2a 2F040000 		.4byte	.LASF61
 6641 0a2e 01       		.byte	0x1
 6642 0a2f 0902     		.2byte	0x209
 6643 0a31 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 159


 6644 0a35 02       		.uleb128 0x2
 6645 0a36 91       		.byte	0x91
 6646 0a37 50       		.sleb128 -48
 6647 0a38 19       		.uleb128 0x19
 6648 0a39 000C0000 		.4byte	.LASF62
 6649 0a3d 01       		.byte	0x1
 6650 0a3e 0B02     		.2byte	0x20b
 6651 0a40 BD000000 		.4byte	0xbd
 6652 0a44 02       		.uleb128 0x2
 6653 0a45 91       		.byte	0x91
 6654 0a46 4C       		.sleb128 -52
 6655 0a47 19       		.uleb128 0x19
 6656 0a48 BF040000 		.4byte	.LASF63
 6657 0a4c 01       		.byte	0x1
 6658 0a4d 0C02     		.2byte	0x20c
 6659 0a4f BD000000 		.4byte	0xbd
 6660 0a53 02       		.uleb128 0x2
 6661 0a54 91       		.byte	0x91
 6662 0a55 48       		.sleb128 -56
 6663 0a56 19       		.uleb128 0x19
 6664 0a57 7A0B0000 		.4byte	.LASF64
 6665 0a5b 01       		.byte	0x1
 6666 0a5c 0D02     		.2byte	0x20d
 6667 0a5e BD000000 		.4byte	0xbd
 6668 0a62 02       		.uleb128 0x2
 6669 0a63 91       		.byte	0x91
 6670 0a64 44       		.sleb128 -60
 6671 0a65 19       		.uleb128 0x19
 6672 0a66 DA040000 		.4byte	.LASF65
 6673 0a6a 01       		.byte	0x1
 6674 0a6b 0F02     		.2byte	0x20f
 6675 0a6d BD000000 		.4byte	0xbd
 6676 0a71 02       		.uleb128 0x2
 6677 0a72 91       		.byte	0x91
 6678 0a73 40       		.sleb128 -64
 6679 0a74 19       		.uleb128 0x19
 6680 0a75 E5050000 		.4byte	.LASF66
 6681 0a79 01       		.byte	0x1
 6682 0a7a 1002     		.2byte	0x210
 6683 0a7c BD000000 		.4byte	0xbd
 6684 0a80 03       		.uleb128 0x3
 6685 0a81 91       		.byte	0x91
 6686 0a82 BC7F     		.sleb128 -68
 6687 0a84 19       		.uleb128 0x19
 6688 0a85 970D0000 		.4byte	.LASF67
 6689 0a89 01       		.byte	0x1
 6690 0a8a 1102     		.2byte	0x211
 6691 0a8c BD000000 		.4byte	0xbd
 6692 0a90 03       		.uleb128 0x3
 6693 0a91 91       		.byte	0x91
 6694 0a92 B87F     		.sleb128 -72
 6695 0a94 19       		.uleb128 0x19
 6696 0a95 9A040000 		.4byte	.LASF157
 6697 0a99 01       		.byte	0x1
 6698 0a9a 1502     		.2byte	0x215
 6699 0a9c BD000000 		.4byte	0xbd
 6700 0aa0 05       		.uleb128 0x5
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 160


 6701 0aa1 03       		.byte	0x3
 6702 0aa2 90000000 		.4byte	pos_error_sum.10304
 6703 0aa6 19       		.uleb128 0x19
 6704 0aa7 40030000 		.4byte	.LASF158
 6705 0aab 01       		.byte	0x1
 6706 0aac 1602     		.2byte	0x216
 6707 0aae BD000000 		.4byte	0xbd
 6708 0ab2 05       		.uleb128 0x5
 6709 0ab3 03       		.byte	0x3
 6710 0ab4 9C000000 		.4byte	curr_error_sum.10305
 6711 0ab8 19       		.uleb128 0x19
 6712 0ab9 0C090000 		.4byte	.LASF159
 6713 0abd 01       		.byte	0x1
 6714 0abe 1802     		.2byte	0x218
 6715 0ac0 BD000000 		.4byte	0xbd
 6716 0ac4 05       		.uleb128 0x5
 6717 0ac5 03       		.byte	0x3
 6718 0ac6 94000000 		.4byte	prev_pos_err.10306
 6719 0aca 19       		.uleb128 0x19
 6720 0acb 220A0000 		.4byte	.LASF160
 6721 0acf 01       		.byte	0x1
 6722 0ad0 1902     		.2byte	0x219
 6723 0ad2 BD000000 		.4byte	0xbd
 6724 0ad6 05       		.uleb128 0x5
 6725 0ad7 03       		.byte	0x3
 6726 0ad8 A0000000 		.4byte	prev_curr_err.10307
 6727 0adc 19       		.uleb128 0x19
 6728 0add AE0B0000 		.4byte	.LASF161
 6729 0ae1 01       		.byte	0x1
 6730 0ae2 1A02     		.2byte	0x21a
 6731 0ae4 BD000000 		.4byte	0xbd
 6732 0ae8 05       		.uleb128 0x5
 6733 0ae9 03       		.byte	0x3
 6734 0aea A4000000 		.4byte	prev_pwm.10308
 6735 0aee 19       		.uleb128 0x19
 6736 0aef 42040000 		.4byte	.LASF162
 6737 0af3 01       		.byte	0x1
 6738 0af4 1C02     		.2byte	0x21c
 6739 0af6 81000000 		.4byte	0x81
 6740 0afa 05       		.uleb128 0x5
 6741 0afb 03       		.byte	0x3
 6742 0afc 98000000 		.4byte	motor_dir.10309
 6743 0b00 19       		.uleb128 0x19
 6744 0b01 FF040000 		.4byte	.LASF163
 6745 0b05 01       		.byte	0x1
 6746 0b06 1D02     		.2byte	0x21d
 6747 0b08 99000000 		.4byte	0x99
 6748 0b0c 05       		.uleb128 0x5
 6749 0b0d 03       		.byte	0x3
 6750 0b0e A8000000 		.4byte	position_counter.10310
 6751 0b12 19       		.uleb128 0x19
 6752 0b13 97080000 		.4byte	.LASF164
 6753 0b17 01       		.byte	0x1
 6754 0b18 1E02     		.2byte	0x21e
 6755 0b1a 81000000 		.4byte	0x81
 6756 0b1e 05       		.uleb128 0x5
 6757 0b1f 03       		.byte	0x3
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 161


 6758 0b20 8C000000 		.4byte	current_emg.10311
 6759 0b24 00       		.byte	0
 6760 0b25 1D       		.uleb128 0x1d
 6761 0b26 10040000 		.4byte	.LASF166
 6762 0b2a 01       		.byte	0x1
 6763 0b2b C303     		.2byte	0x3c3
 6764 0b2d 00000000 		.4byte	.LFB69
 6765 0b31 38000000 		.4byte	.LFE69-.LFB69
 6766 0b35 01       		.uleb128 0x1
 6767 0b36 9C       		.byte	0x9c
 6768 0b37 4B0B0000 		.4byte	0xb4b
 6769 0b3b 1E       		.uleb128 0x1e
 6770 0b3c C6050000 		.4byte	.LASF168
 6771 0b40 01       		.byte	0x1
 6772 0b41 C303     		.2byte	0x3c3
 6773 0b43 81000000 		.4byte	0x81
 6774 0b47 02       		.uleb128 0x2
 6775 0b48 91       		.byte	0x91
 6776 0b49 77       		.sleb128 -9
 6777 0b4a 00       		.byte	0
 6778 0b4b 18       		.uleb128 0x18
 6779 0b4c 4D020000 		.4byte	.LASF167
 6780 0b50 01       		.byte	0x1
 6781 0b51 7705     		.2byte	0x577
 6782 0b53 00000000 		.4byte	.LFB70
 6783 0b57 44050000 		.4byte	.LFE70-.LFB70
 6784 0b5b 01       		.uleb128 0x1
 6785 0b5c 9C       		.byte	0x9c
 6786 0b5d BD0C0000 		.4byte	0xcbd
 6787 0b61 1E       		.uleb128 0x1e
 6788 0b62 75000000 		.4byte	.LASF169
 6789 0b66 01       		.byte	0x1
 6790 0b67 7705     		.2byte	0x577
 6791 0b69 81000000 		.4byte	0x81
 6792 0b6d 02       		.uleb128 0x2
 6793 0b6e 91       		.byte	0x91
 6794 0b6f 47       		.sleb128 -57
 6795 0b70 19       		.uleb128 0x19
 6796 0b71 C6050000 		.4byte	.LASF168
 6797 0b75 01       		.byte	0x1
 6798 0b76 7905     		.2byte	0x579
 6799 0b78 81000000 		.4byte	0x81
 6800 0b7c 02       		.uleb128 0x2
 6801 0b7d 91       		.byte	0x91
 6802 0b7e 6F       		.sleb128 -17
 6803 0b7f 1C       		.uleb128 0x1c
 6804 0b80 6A6A00   		.ascii	"jj\000"
 6805 0b83 01       		.byte	0x1
 6806 0b84 7C05     		.2byte	0x57c
 6807 0b86 81000000 		.4byte	0x81
 6808 0b8a 02       		.uleb128 0x2
 6809 0b8b 91       		.byte	0x91
 6810 0b8c 6E       		.sleb128 -18
 6811 0b8d 19       		.uleb128 0x19
 6812 0b8e 39020000 		.4byte	.LASF170
 6813 0b92 01       		.byte	0x1
 6814 0b93 7E05     		.2byte	0x57e
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 162


 6815 0b95 BD0C0000 		.4byte	0xcbd
 6816 0b99 02       		.uleb128 0x2
 6817 0b9a 91       		.byte	0x91
 6818 0b9b 4C       		.sleb128 -52
 6819 0b9c 19       		.uleb128 0x19
 6820 0b9d 4B0C0000 		.4byte	.LASF171
 6821 0ba1 01       		.byte	0x1
 6822 0ba2 7F05     		.2byte	0x57f
 6823 0ba4 B1000000 		.4byte	0xb1
 6824 0ba8 02       		.uleb128 0x2
 6825 0ba9 91       		.byte	0x91
 6826 0baa 6C       		.sleb128 -20
 6827 0bab 19       		.uleb128 0x19
 6828 0bac 0D0A0000 		.4byte	.LASF172
 6829 0bb0 01       		.byte	0x1
 6830 0bb1 8005     		.2byte	0x580
 6831 0bb3 BD000000 		.4byte	0xbd
 6832 0bb7 02       		.uleb128 0x2
 6833 0bb8 91       		.byte	0x91
 6834 0bb9 60       		.sleb128 -32
 6835 0bba 19       		.uleb128 0x19
 6836 0bbb 810B0000 		.4byte	.LASF173
 6837 0bbf 01       		.byte	0x1
 6838 0bc0 8105     		.2byte	0x581
 6839 0bc2 BD000000 		.4byte	0xbd
 6840 0bc6 02       		.uleb128 0x2
 6841 0bc7 91       		.byte	0x91
 6842 0bc8 68       		.sleb128 -24
 6843 0bc9 19       		.uleb128 0x19
 6844 0bca 8C030000 		.4byte	.LASF174
 6845 0bce 01       		.byte	0x1
 6846 0bcf 8205     		.2byte	0x582
 6847 0bd1 BD000000 		.4byte	0xbd
 6848 0bd5 02       		.uleb128 0x2
 6849 0bd6 91       		.byte	0x91
 6850 0bd7 58       		.sleb128 -40
 6851 0bd8 19       		.uleb128 0x19
 6852 0bd9 650B0000 		.4byte	.LASF175
 6853 0bdd 01       		.byte	0x1
 6854 0bde 8305     		.2byte	0x583
 6855 0be0 BD000000 		.4byte	0xbd
 6856 0be4 02       		.uleb128 0x2
 6857 0be5 91       		.byte	0x91
 6858 0be6 5C       		.sleb128 -36
 6859 0be7 19       		.uleb128 0x19
 6860 0be8 4F010000 		.4byte	.LASF176
 6861 0bec 01       		.byte	0x1
 6862 0bed 8405     		.2byte	0x584
 6863 0bef A5000000 		.4byte	0xa5
 6864 0bf3 02       		.uleb128 0x2
 6865 0bf4 91       		.byte	0x91
 6866 0bf5 67       		.sleb128 -25
 6867 0bf6 19       		.uleb128 0x19
 6868 0bf7 96090000 		.4byte	.LASF177
 6869 0bfb 01       		.byte	0x1
 6870 0bfc 8605     		.2byte	0x586
 6871 0bfe 33020000 		.4byte	0x233
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 163


 6872 0c02 05       		.uleb128 0x5
 6873 0c03 03       		.byte	0x3
 6874 0c04 AC000000 		.4byte	last_value_encoder.10351
 6875 0c08 19       		.uleb128 0x19
 6876 0c09 88050000 		.4byte	.LASF178
 6877 0c0d 01       		.byte	0x1
 6878 0c0e 8705     		.2byte	0x587
 6879 0c10 33020000 		.4byte	0x233
 6880 0c14 05       		.uleb128 0x5
 6881 0c15 03       		.byte	0x3
 6882 0c16 B8000000 		.4byte	comp_value_encoder.10352
 6883 0c1a 19       		.uleb128 0x19
 6884 0c1b 61020000 		.4byte	.LASF179
 6885 0c1f 01       		.byte	0x1
 6886 0c20 8805     		.2byte	0x588
 6887 0c22 51060000 		.4byte	0x651
 6888 0c26 05       		.uleb128 0x5
 6889 0c27 03       		.byte	0x3
 6890 0c28 C4000000 		.4byte	error.10353
 6891 0c2c 19       		.uleb128 0x19
 6892 0c2d 4F0B0000 		.4byte	.LASF180
 6893 0c31 01       		.byte	0x1
 6894 0c32 8A05     		.2byte	0x58a
 6895 0c34 81000000 		.4byte	0x81
 6896 0c38 05       		.uleb128 0x5
 6897 0c39 03       		.byte	0x3
 6898 0c3a 04000000 		.4byte	only_first_time.10354
 6899 0c3e 19       		.uleb128 0x19
 6900 0c3f B7030000 		.4byte	.LASF181
 6901 0c43 01       		.byte	0x1
 6902 0c44 8B05     		.2byte	0x58b
 6903 0c46 81000000 		.4byte	0x81
 6904 0c4a 05       		.uleb128 0x5
 6905 0c4b 03       		.byte	0x3
 6906 0c4c EE000000 		.4byte	safe_startup_motor_activation.10355
 6907 0c50 19       		.uleb128 0x19
 6908 0c51 55000000 		.4byte	.LASF182
 6909 0c55 01       		.byte	0x1
 6910 0c56 8C05     		.2byte	0x58c
 6911 0c58 81000000 		.4byte	0x81
 6912 0c5c 05       		.uleb128 0x5
 6913 0c5d 03       		.byte	0x3
 6914 0c5e ED000000 		.4byte	one_time_execute.10356
 6915 0c62 19       		.uleb128 0x19
 6916 0c63 06080000 		.4byte	.LASF183
 6917 0c67 01       		.byte	0x1
 6918 0c68 8D05     		.2byte	0x58d
 6919 0c6a 99000000 		.4byte	0x99
 6920 0c6e 05       		.uleb128 0x5
 6921 0c6f 03       		.byte	0x3
 6922 0c70 F0000000 		.4byte	count_startup_motor.10357
 6923 0c74 19       		.uleb128 0x19
 6924 0c75 7D020000 		.4byte	.LASF184
 6925 0c79 01       		.byte	0x1
 6926 0c7a 8E05     		.2byte	0x58e
 6927 0c7c 81000000 		.4byte	0x81
 6928 0c80 05       		.uleb128 0x5
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 164


 6929 0c81 03       		.byte	0x3
 6930 0c82 EC000000 		.4byte	pos_reconstruct.10358
 6931 0c86 19       		.uleb128 0x19
 6932 0c87 79070000 		.4byte	.LASF185
 6933 0c8b 01       		.byte	0x1
 6934 0c8c 9005     		.2byte	0x590
 6935 0c8e 33020000 		.4byte	0x233
 6936 0c92 05       		.uleb128 0x5
 6937 0c93 03       		.byte	0x3
 6938 0c94 C8000000 		.4byte	v_value.10359
 6939 0c98 19       		.uleb128 0x19
 6940 0c99 8E0D0000 		.4byte	.LASF186
 6941 0c9d 01       		.byte	0x1
 6942 0c9e 9105     		.2byte	0x591
 6943 0ca0 33020000 		.4byte	0x233
 6944 0ca4 05       		.uleb128 0x5
 6945 0ca5 03       		.byte	0x3
 6946 0ca6 D4000000 		.4byte	vv_value.10360
 6947 0caa 19       		.uleb128 0x19
 6948 0cab 26010000 		.4byte	.LASF187
 6949 0caf 01       		.byte	0x1
 6950 0cb0 9205     		.2byte	0x592
 6951 0cb2 33020000 		.4byte	0x233
 6952 0cb6 05       		.uleb128 0x5
 6953 0cb7 03       		.byte	0x3
 6954 0cb8 E0000000 		.4byte	vvv_value.10361
 6955 0cbc 00       		.byte	0
 6956 0cbd 0E       		.uleb128 0xe
 6957 0cbe 99000000 		.4byte	0x99
 6958 0cc2 CD0C0000 		.4byte	0xccd
 6959 0cc6 0F       		.uleb128 0xf
 6960 0cc7 0E010000 		.4byte	0x10e
 6961 0ccb 02       		.byte	0x2
 6962 0ccc 00       		.byte	0
 6963 0ccd 1B       		.uleb128 0x1b
 6964 0cce A90A0000 		.4byte	.LASF188
 6965 0cd2 01       		.byte	0x1
 6966 0cd3 4806     		.2byte	0x648
 6967 0cd5 00000000 		.4byte	.LFB71
 6968 0cd9 9C090000 		.4byte	.LFE71-.LFB71
 6969 0cdd 01       		.uleb128 0x1
 6970 0cde 9C       		.byte	0x9c
 6971 0cdf 5F0D0000 		.4byte	0xd5f
 6972 0ce3 19       		.uleb128 0x19
 6973 0ce4 750A0000 		.4byte	.LASF189
 6974 0ce8 01       		.byte	0x1
 6975 0ce9 5C06     		.2byte	0x65c
 6976 0ceb BD000000 		.4byte	0xbd
 6977 0cef 02       		.uleb128 0x2
 6978 0cf0 91       		.byte	0x91
 6979 0cf1 6C       		.sleb128 -20
 6980 0cf2 19       		.uleb128 0x19
 6981 0cf3 330B0000 		.4byte	.LASF190
 6982 0cf7 01       		.byte	0x1
 6983 0cf8 5E06     		.2byte	0x65e
 6984 0cfa 8D000000 		.4byte	0x8d
 6985 0cfe 05       		.uleb128 0x5
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 165


 6986 0cff 03       		.byte	0x3
 6987 0d00 FC000000 		.4byte	emg_counter_1.10377
 6988 0d04 19       		.uleb128 0x19
 6989 0d05 410B0000 		.4byte	.LASF191
 6990 0d09 01       		.byte	0x1
 6991 0d0a 5F06     		.2byte	0x65f
 6992 0d0c 8D000000 		.4byte	0x8d
 6993 0d10 05       		.uleb128 0x5
 6994 0d11 03       		.byte	0x3
 6995 0d12 FE000000 		.4byte	emg_counter_2.10378
 6996 0d16 19       		.uleb128 0x19
 6997 0d17 DB010000 		.4byte	.LASF192
 6998 0d1b 01       		.byte	0x1
 6999 0d1c 6006     		.2byte	0x660
 7000 0d1e 81000000 		.4byte	0x81
 7001 0d22 05       		.uleb128 0x5
 7002 0d23 03       		.byte	0x3
 7003 0d24 05000000 		.4byte	first_tension_valid.10379
 7004 0d28 19       		.uleb128 0x19
 7005 0d29 2E080000 		.4byte	.LASF193
 7006 0d2d 01       		.byte	0x1
 7007 0d2e 6206     		.2byte	0x662
 7008 0d30 8D000000 		.4byte	0x8d
 7009 0d34 05       		.uleb128 0x5
 7010 0d35 03       		.byte	0x3
 7011 0d36 F4000000 		.4byte	count.10380
 7012 0d3a 19       		.uleb128 0x19
 7013 0d3b 16010000 		.4byte	.LASF194
 7014 0d3f 01       		.byte	0x1
 7015 0d40 6306     		.2byte	0x663
 7016 0d42 99000000 		.4byte	0x99
 7017 0d46 05       		.uleb128 0x5
 7018 0d47 03       		.byte	0x3
 7019 0d48 F8000000 		.4byte	v_count.10381
 7020 0d4c 1C       		.uleb128 0x1c
 7021 0d4d 69647800 		.ascii	"idx\000"
 7022 0d51 01       		.byte	0x1
 7023 0d52 6406     		.2byte	0x664
 7024 0d54 81000000 		.4byte	0x81
 7025 0d58 05       		.uleb128 0x5
 7026 0d59 03       		.byte	0x3
 7027 0d5a F6000000 		.4byte	idx.10382
 7028 0d5e 00       		.byte	0
 7029 0d5f 1F       		.uleb128 0x1f
 7030 0d60 860A0000 		.4byte	.LASF270
 7031 0d64 01       		.byte	0x1
 7032 0d65 EB07     		.2byte	0x7eb
 7033 0d67 00000000 		.4byte	.LFB72
 7034 0d6b 74000000 		.4byte	.LFE72-.LFB72
 7035 0d6f 01       		.uleb128 0x1
 7036 0d70 9C       		.byte	0x9c
 7037 0d71 20       		.uleb128 0x20
 7038 0d72 8D020000 		.4byte	.LASF195
 7039 0d76 01       		.byte	0x1
 7040 0d77 0408     		.2byte	0x804
 7041 0d79 00000000 		.4byte	.LFB73
 7042 0d7d 64000000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 166


 7043 0d81 01       		.uleb128 0x1
 7044 0d82 9C       		.byte	0x9c
 7045 0d83 B50D0000 		.4byte	0xdb5
 7046 0d87 19       		.uleb128 0x19
 7047 0d88 C6050000 		.4byte	.LASF168
 7048 0d8c 01       		.byte	0x1
 7049 0d8d 0608     		.2byte	0x806
 7050 0d8f 81000000 		.4byte	0x81
 7051 0d93 02       		.uleb128 0x2
 7052 0d94 91       		.byte	0x91
 7053 0d95 73       		.sleb128 -13
 7054 0d96 19       		.uleb128 0x19
 7055 0d97 3C000000 		.4byte	.LASF196
 7056 0d9b 01       		.byte	0x1
 7057 0d9c 0708     		.2byte	0x807
 7058 0d9e 8D000000 		.4byte	0x8d
 7059 0da2 02       		.uleb128 0x2
 7060 0da3 91       		.byte	0x91
 7061 0da4 76       		.sleb128 -10
 7062 0da5 19       		.uleb128 0x19
 7063 0da6 F1090000 		.4byte	.LASF197
 7064 0daa 01       		.byte	0x1
 7065 0dab 0808     		.2byte	0x808
 7066 0dad 8D000000 		.4byte	0x8d
 7067 0db1 02       		.uleb128 0x2
 7068 0db2 91       		.byte	0x91
 7069 0db3 74       		.sleb128 -12
 7070 0db4 00       		.byte	0
 7071 0db5 1B       		.uleb128 0x1b
 7072 0db6 BA060000 		.4byte	.LASF198
 7073 0dba 01       		.byte	0x1
 7074 0dbb 1808     		.2byte	0x818
 7075 0dbd 00000000 		.4byte	.LFB74
 7076 0dc1 34030000 		.4byte	.LFE74-.LFB74
 7077 0dc5 01       		.uleb128 0x1
 7078 0dc6 9C       		.byte	0x9c
 7079 0dc7 B40E0000 		.4byte	0xeb4
 7080 0dcb 19       		.uleb128 0x19
 7081 0dcc 09000000 		.4byte	.LASF199
 7082 0dd0 01       		.byte	0x1
 7083 0dd1 1908     		.2byte	0x819
 7084 0dd3 81000000 		.4byte	0x81
 7085 0dd7 05       		.uleb128 0x5
 7086 0dd8 03       		.byte	0x3
 7087 0dd9 00010000 		.4byte	pos_cycle_status.10427
 7088 0ddd 19       		.uleb128 0x19
 7089 0dde D20A0000 		.4byte	.LASF200
 7090 0de2 01       		.byte	0x1
 7091 0de3 1A08     		.2byte	0x81a
 7092 0de5 DD060000 		.4byte	0x6dd
 7093 0de9 05       		.uleb128 0x5
 7094 0dea 03       		.byte	0x3
 7095 0deb 0C010000 		.4byte	emg_cycle_status.10428
 7096 0def 19       		.uleb128 0x19
 7097 0df0 390C0000 		.4byte	.LASF201
 7098 0df4 01       		.byte	0x1
 7099 0df5 1B08     		.2byte	0x81b
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 167


 7100 0df7 81000000 		.4byte	0x81
 7101 0dfb 05       		.uleb128 0x5
 7102 0dfc 03       		.byte	0x3
 7103 0dfd 0E010000 		.4byte	rest_cycle_status.10429
 7104 0e01 19       		.uleb128 0x19
 7105 0e02 12020000 		.4byte	.LASF202
 7106 0e06 01       		.byte	0x1
 7107 0e07 1C08     		.2byte	0x81c
 7108 0e09 BD000000 		.4byte	0xbd
 7109 0e0d 05       		.uleb128 0x5
 7110 0e0e 03       		.byte	0x3
 7111 0e0f 08000000 		.4byte	bin_threshold.10430
 7112 0e13 19       		.uleb128 0x19
 7113 0e14 7E010000 		.4byte	.LASF203
 7114 0e18 01       		.byte	0x1
 7115 0e19 1D08     		.2byte	0x81d
 7116 0e1b BD000000 		.4byte	0xbd
 7117 0e1f 05       		.uleb128 0x5
 7118 0e20 03       		.byte	0x3
 7119 0e21 04010000 		.4byte	thr_pos.10431
 7120 0e25 19       		.uleb128 0x19
 7121 0e26 4E080000 		.4byte	.LASF204
 7122 0e2a 01       		.byte	0x1
 7123 0e2b 1D08     		.2byte	0x81d
 7124 0e2d BD000000 		.4byte	0xbd
 7125 0e31 05       		.uleb128 0x5
 7126 0e32 03       		.byte	0x3
 7127 0e33 08010000 		.4byte	max_pos.10432
 7128 0e37 1C       		.uleb128 0x1c
 7129 0e38 6900     		.ascii	"i\000"
 7130 0e3a 01       		.byte	0x1
 7131 0e3b 1E08     		.2byte	0x81e
 7132 0e3d 81000000 		.4byte	0x81
 7133 0e41 02       		.uleb128 0x2
 7134 0e42 91       		.byte	0x91
 7135 0e43 77       		.sleb128 -9
 7136 0e44 19       		.uleb128 0x19
 7137 0e45 4C040000 		.4byte	.LASF205
 7138 0e49 01       		.byte	0x1
 7139 0e4a 1E08     		.2byte	0x81e
 7140 0e4c 81000000 		.4byte	0x81
 7141 0e50 02       		.uleb128 0x2
 7142 0e51 91       		.byte	0x91
 7143 0e52 67       		.sleb128 -25
 7144 0e53 19       		.uleb128 0x19
 7145 0e54 B2000000 		.4byte	.LASF206
 7146 0e58 01       		.byte	0x1
 7147 0e59 1E08     		.2byte	0x81e
 7148 0e5b 81000000 		.4byte	0x81
 7149 0e5f 02       		.uleb128 0x2
 7150 0e60 91       		.byte	0x91
 7151 0e61 66       		.sleb128 -26
 7152 0e62 19       		.uleb128 0x19
 7153 0e63 9A0A0000 		.4byte	.LASF207
 7154 0e67 01       		.byte	0x1
 7155 0e68 1F08     		.2byte	0x81f
 7156 0e6a BD000000 		.4byte	0xbd
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 168


 7157 0e6e 02       		.uleb128 0x2
 7158 0e6f 91       		.byte	0x91
 7159 0e70 70       		.sleb128 -16
 7160 0e71 19       		.uleb128 0x19
 7161 0e72 A3030000 		.4byte	.LASF208
 7162 0e76 01       		.byte	0x1
 7163 0e77 1F08     		.2byte	0x81f
 7164 0e79 BD000000 		.4byte	0xbd
 7165 0e7d 02       		.uleb128 0x2
 7166 0e7e 91       		.byte	0x91
 7167 0e7f 6C       		.sleb128 -20
 7168 0e80 19       		.uleb128 0x19
 7169 0e81 3B030000 		.4byte	.LASF209
 7170 0e85 01       		.byte	0x1
 7171 0e86 2008     		.2byte	0x820
 7172 0e88 BD000000 		.4byte	0xbd
 7173 0e8c 02       		.uleb128 0x2
 7174 0e8d 91       		.byte	0x91
 7175 0e8e 68       		.sleb128 -24
 7176 0e8f 19       		.uleb128 0x19
 7177 0e90 6C050000 		.4byte	.LASF210
 7178 0e94 01       		.byte	0x1
 7179 0e95 2108     		.2byte	0x821
 7180 0e97 99000000 		.4byte	0x99
 7181 0e9b 05       		.uleb128 0x5
 7182 0e9c 03       		.byte	0x3
 7183 0e9d 10010000 		.4byte	timer_value_s.10439
 7184 0ea1 19       		.uleb128 0x19
 7185 0ea2 10050000 		.4byte	.LASF211
 7186 0ea6 01       		.byte	0x1
 7187 0ea7 2108     		.2byte	0x821
 7188 0ea9 99000000 		.4byte	0x99
 7189 0ead 05       		.uleb128 0x5
 7190 0eae 03       		.byte	0x3
 7191 0eaf 14010000 		.4byte	timer_value_e.10440
 7192 0eb3 00       		.byte	0
 7193 0eb4 1B       		.uleb128 0x1b
 7194 0eb5 C8080000 		.4byte	.LASF212
 7195 0eb9 01       		.byte	0x1
 7196 0eba 8308     		.2byte	0x883
 7197 0ebc 00000000 		.4byte	.LFB75
 7198 0ec0 08010000 		.4byte	.LFE75-.LFB75
 7199 0ec4 01       		.uleb128 0x1
 7200 0ec5 9C       		.byte	0x9c
 7201 0ec6 3A0F0000 		.4byte	0xf3a
 7202 0eca 19       		.uleb128 0x19
 7203 0ecb 46060000 		.4byte	.LASF213
 7204 0ecf 01       		.byte	0x1
 7205 0ed0 8508     		.2byte	0x885
 7206 0ed2 EA000000 		.4byte	0xea
 7207 0ed6 02       		.uleb128 0x2
 7208 0ed7 91       		.byte	0x91
 7209 0ed8 64       		.sleb128 -28
 7210 0ed9 19       		.uleb128 0x19
 7211 0eda 7B0A0000 		.4byte	.LASF214
 7212 0ede 01       		.byte	0x1
 7213 0edf 8608     		.2byte	0x886
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 169


 7214 0ee1 81000000 		.4byte	0x81
 7215 0ee5 05       		.uleb128 0x5
 7216 0ee6 03       		.byte	0x3
 7217 0ee7 1C010000 		.4byte	row_number.10462
 7218 0eeb 19       		.uleb128 0x19
 7219 0eec 76030000 		.4byte	.LASF215
 7220 0ef0 01       		.byte	0x1
 7221 0ef1 8708     		.2byte	0x887
 7222 0ef3 81000000 		.4byte	0x81
 7223 0ef7 02       		.uleb128 0x2
 7224 0ef8 91       		.byte	0x91
 7225 0ef9 77       		.sleb128 -9
 7226 0efa 19       		.uleb128 0x19
 7227 0efb 000B0000 		.4byte	.LASF216
 7228 0eff 01       		.byte	0x1
 7229 0f00 8808     		.2byte	0x888
 7230 0f02 3A0F0000 		.4byte	0xf3a
 7231 0f06 02       		.uleb128 0x2
 7232 0f07 91       		.byte	0x91
 7233 0f08 70       		.sleb128 -16
 7234 0f09 19       		.uleb128 0x19
 7235 0f0a BA000000 		.4byte	.LASF217
 7236 0f0e 01       		.byte	0x1
 7237 0f0f 8908     		.2byte	0x889
 7238 0f11 3A0F0000 		.4byte	0xf3a
 7239 0f15 02       		.uleb128 0x2
 7240 0f16 91       		.byte	0x91
 7241 0f17 6C       		.sleb128 -20
 7242 0f18 19       		.uleb128 0x19
 7243 0f19 0F0D0000 		.4byte	.LASF218
 7244 0f1d 01       		.byte	0x1
 7245 0f1e 8A08     		.2byte	0x88a
 7246 0f20 81000000 		.4byte	0x81
 7247 0f24 02       		.uleb128 0x2
 7248 0f25 91       		.byte	0x91
 7249 0f26 6B       		.sleb128 -21
 7250 0f27 19       		.uleb128 0x19
 7251 0f28 34080000 		.4byte	.LASF219
 7252 0f2c 01       		.byte	0x1
 7253 0f2d 8B08     		.2byte	0x88b
 7254 0f2f 3A0F0000 		.4byte	0xf3a
 7255 0f33 05       		.uleb128 0x5
 7256 0f34 03       		.byte	0x3
 7257 0f35 18010000 		.4byte	m_addr.10467
 7258 0f39 00       		.byte	0
 7259 0f3a 0A       		.uleb128 0xa
 7260 0f3b 04       		.byte	0x4
 7261 0f3c 81000000 		.4byte	0x81
 7262 0f40 0E       		.uleb128 0xe
 7263 0f41 500F0000 		.4byte	0xf50
 7264 0f45 500F0000 		.4byte	0xf50
 7265 0f49 0F       		.uleb128 0xf
 7266 0f4a 0E010000 		.4byte	0x10e
 7267 0f4e 1C       		.byte	0x1c
 7268 0f4f 00       		.byte	0
 7269 0f50 21       		.uleb128 0x21
 7270 0f51 81000000 		.4byte	0x81
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 170


 7271 0f55 17       		.uleb128 0x17
 7272 0f56 0B0B0000 		.4byte	.LASF220
 7273 0f5a 01       		.byte	0x1
 7274 0f5b 40       		.byte	0x40
 7275 0f5c 660F0000 		.4byte	0xf66
 7276 0f60 05       		.uleb128 0x5
 7277 0f61 03       		.byte	0x3
 7278 0f62 00000000 		.4byte	pwm_preload_values
 7279 0f66 21       		.uleb128 0x21
 7280 0f67 400F0000 		.4byte	0xf40
 7281 0f6b 22       		.uleb128 0x22
 7282 0f6c B70B0000 		.4byte	.LASF221
 7283 0f70 08       		.byte	0x8
 7284 0f71 1207     		.2byte	0x712
 7285 0f73 770F0000 		.4byte	0xf77
 7286 0f77 06       		.uleb128 0x6
 7287 0f78 76000000 		.4byte	0x76
 7288 0f7c 22       		.uleb128 0x22
 7289 0f7d AC050000 		.4byte	.LASF222
 7290 0f81 07       		.byte	0x7
 7291 0f82 6101     		.2byte	0x161
 7292 0f84 89010000 		.4byte	0x189
 7293 0f88 22       		.uleb128 0x22
 7294 0f89 9A030000 		.4byte	.LASF223
 7295 0f8d 07       		.byte	0x7
 7296 0f8e 6101     		.2byte	0x161
 7297 0f90 89010000 		.4byte	0x189
 7298 0f94 22       		.uleb128 0x22
 7299 0f95 57090000 		.4byte	.LASF224
 7300 0f99 07       		.byte	0x7
 7301 0f9a 6101     		.2byte	0x161
 7302 0f9c 89010000 		.4byte	0x189
 7303 0fa0 22       		.uleb128 0x22
 7304 0fa1 65050000 		.4byte	.LASF225
 7305 0fa5 07       		.byte	0x7
 7306 0fa6 6201     		.2byte	0x162
 7307 0fa8 C6010000 		.4byte	0x1c6
 7308 0fac 22       		.uleb128 0x22
 7309 0fad 050D0000 		.4byte	.LASF226
 7310 0fb1 07       		.byte	0x7
 7311 0fb2 6201     		.2byte	0x162
 7312 0fb4 C6010000 		.4byte	0x1c6
 7313 0fb8 22       		.uleb128 0x22
 7314 0fb9 50000000 		.4byte	.LASF227
 7315 0fbd 07       		.byte	0x7
 7316 0fbe 6301     		.2byte	0x163
 7317 0fc0 73020000 		.4byte	0x273
 7318 0fc4 22       		.uleb128 0x22
 7319 0fc5 2D0B0000 		.4byte	.LASF228
 7320 0fc9 07       		.byte	0x7
 7321 0fca 6401     		.2byte	0x164
 7322 0fcc C0020000 		.4byte	0x2c0
 7323 0fd0 22       		.uleb128 0x22
 7324 0fd1 3B080000 		.4byte	.LASF229
 7325 0fd5 07       		.byte	0x7
 7326 0fd6 6401     		.2byte	0x164
 7327 0fd8 C0020000 		.4byte	0x2c0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 171


 7328 0fdc 22       		.uleb128 0x22
 7329 0fdd 81070000 		.4byte	.LASF230
 7330 0fe1 07       		.byte	0x7
 7331 0fe2 6501     		.2byte	0x165
 7332 0fe4 91070000 		.4byte	0x791
 7333 0fe8 0E       		.uleb128 0xe
 7334 0fe9 69070000 		.4byte	0x769
 7335 0fed F80F0000 		.4byte	0xff8
 7336 0ff1 0F       		.uleb128 0xf
 7337 0ff2 0E010000 		.4byte	0x10e
 7338 0ff6 01       		.byte	0x1
 7339 0ff7 00       		.byte	0
 7340 0ff8 22       		.uleb128 0x22
 7341 0ff9 43090000 		.4byte	.LASF231
 7342 0ffd 07       		.byte	0x7
 7343 0ffe 6601     		.2byte	0x166
 7344 1000 E80F0000 		.4byte	0xfe8
 7345 1004 22       		.uleb128 0x22
 7346 1005 CC070000 		.4byte	.LASF232
 7347 1009 07       		.byte	0x7
 7348 100a 6601     		.2byte	0x166
 7349 100c 69070000 		.4byte	0x769
 7350 1010 22       		.uleb128 0x22
 7351 1011 29090000 		.4byte	.LASF233
 7352 1015 07       		.byte	0x7
 7353 1016 6601     		.2byte	0x166
 7354 1018 E80F0000 		.4byte	0xfe8
 7355 101c 0E       		.uleb128 0xe
 7356 101d 69070000 		.4byte	0x769
 7357 1021 2C100000 		.4byte	0x102c
 7358 1025 0F       		.uleb128 0xf
 7359 1026 0E010000 		.4byte	0x10e
 7360 102a 02       		.byte	0x2
 7361 102b 00       		.byte	0
 7362 102c 22       		.uleb128 0x22
 7363 102d 26040000 		.4byte	.LASF234
 7364 1031 07       		.byte	0x7
 7365 1032 6701     		.2byte	0x167
 7366 1034 1C100000 		.4byte	0x101c
 7367 1038 0E       		.uleb128 0xe
 7368 1039 69070000 		.4byte	0x769
 7369 103d 48100000 		.4byte	0x1048
 7370 1041 0F       		.uleb128 0xf
 7371 1042 0E010000 		.4byte	0x10e
 7372 1046 07       		.byte	0x7
 7373 1047 00       		.byte	0
 7374 1048 22       		.uleb128 0x22
 7375 1049 46010000 		.4byte	.LASF235
 7376 104d 07       		.byte	0x7
 7377 104e 6801     		.2byte	0x168
 7378 1050 38100000 		.4byte	0x1038
 7379 1054 22       		.uleb128 0x22
 7380 1055 EF010000 		.4byte	.LASF236
 7381 1059 07       		.byte	0x7
 7382 105a 6A01     		.2byte	0x16a
 7383 105c 8D000000 		.4byte	0x8d
 7384 1060 22       		.uleb128 0x22
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 172


 7385 1061 6C070000 		.4byte	.LASF237
 7386 1065 07       		.byte	0x7
 7387 1066 6B01     		.2byte	0x16b
 7388 1068 8D000000 		.4byte	0x8d
 7389 106c 22       		.uleb128 0x22
 7390 106d BE090000 		.4byte	.LASF238
 7391 1071 07       		.byte	0x7
 7392 1072 6C01     		.2byte	0x16c
 7393 1074 D5000000 		.4byte	0xd5
 7394 1078 22       		.uleb128 0x22
 7395 1079 490A0000 		.4byte	.LASF239
 7396 107d 07       		.byte	0x7
 7397 107e 6E01     		.2byte	0x16e
 7398 1080 43020000 		.4byte	0x243
 7399 1084 22       		.uleb128 0x22
 7400 1085 120C0000 		.4byte	.LASF240
 7401 1089 07       		.byte	0x7
 7402 108a 6F01     		.2byte	0x16f
 7403 108c 81000000 		.4byte	0x81
 7404 1090 22       		.uleb128 0x22
 7405 1091 8F0B0000 		.4byte	.LASF241
 7406 1095 07       		.byte	0x7
 7407 1096 7001     		.2byte	0x170
 7408 1098 81000000 		.4byte	0x81
 7409 109c 22       		.uleb128 0x22
 7410 109d B1040000 		.4byte	.LASF242
 7411 10a1 07       		.byte	0x7
 7412 10a2 7101     		.2byte	0x171
 7413 10a4 43020000 		.4byte	0x243
 7414 10a8 22       		.uleb128 0x22
 7415 10a9 C40B0000 		.4byte	.LASF243
 7416 10ad 07       		.byte	0x7
 7417 10ae 7201     		.2byte	0x172
 7418 10b0 43020000 		.4byte	0x243
 7419 10b4 22       		.uleb128 0x22
 7420 10b5 43050000 		.4byte	.LASF244
 7421 10b9 07       		.byte	0x7
 7422 10ba 7401     		.2byte	0x174
 7423 10bc 3D080000 		.4byte	0x83d
 7424 10c0 22       		.uleb128 0x22
 7425 10c1 D5030000 		.4byte	.LASF245
 7426 10c5 07       		.byte	0x7
 7427 10c6 7501     		.2byte	0x175
 7428 10c8 05080000 		.4byte	0x805
 7429 10cc 22       		.uleb128 0x22
 7430 10cd 17030000 		.4byte	.LASF246
 7431 10d1 07       		.byte	0x7
 7432 10d2 7601     		.2byte	0x176
 7433 10d4 05080000 		.4byte	0x805
 7434 10d8 22       		.uleb128 0x22
 7435 10d9 69060000 		.4byte	.LASF247
 7436 10dd 07       		.byte	0x7
 7437 10de 7901     		.2byte	0x179
 7438 10e0 81000000 		.4byte	0x81
 7439 10e4 22       		.uleb128 0x22
 7440 10e5 88000000 		.4byte	.LASF248
 7441 10e9 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 173


 7442 10ea 7A01     		.2byte	0x17a
 7443 10ec 81000000 		.4byte	0x81
 7444 10f0 22       		.uleb128 0x22
 7445 10f1 2C030000 		.4byte	.LASF249
 7446 10f5 07       		.byte	0x7
 7447 10f6 7B01     		.2byte	0x17b
 7448 10f8 81000000 		.4byte	0x81
 7449 10fc 22       		.uleb128 0x22
 7450 10fd 9C000000 		.4byte	.LASF250
 7451 1101 07       		.byte	0x7
 7452 1102 7C01     		.2byte	0x17c
 7453 1104 81000000 		.4byte	0x81
 7454 1108 22       		.uleb128 0x22
 7455 1109 390D0000 		.4byte	.LASF251
 7456 110d 07       		.byte	0x7
 7457 110e 7E01     		.2byte	0x17e
 7458 1110 81000000 		.4byte	0x81
 7459 1114 22       		.uleb128 0x22
 7460 1115 4A090000 		.4byte	.LASF252
 7461 1119 07       		.byte	0x7
 7462 111a 7F01     		.2byte	0x17f
 7463 111c 81000000 		.4byte	0x81
 7464 1120 22       		.uleb128 0x22
 7465 1121 80030000 		.4byte	.LASF253
 7466 1125 07       		.byte	0x7
 7467 1126 8001     		.2byte	0x180
 7468 1128 81000000 		.4byte	0x81
 7469 112c 22       		.uleb128 0x22
 7470 112d 19090000 		.4byte	.LASF254
 7471 1131 07       		.byte	0x7
 7472 1132 8101     		.2byte	0x181
 7473 1134 81000000 		.4byte	0x81
 7474 1138 22       		.uleb128 0x22
 7475 1139 B1070000 		.4byte	.LASF255
 7476 113d 07       		.byte	0x7
 7477 113e 8201     		.2byte	0x182
 7478 1140 81000000 		.4byte	0x81
 7479 1144 0E       		.uleb128 0xe
 7480 1145 B1000000 		.4byte	0xb1
 7481 1149 54110000 		.4byte	0x1154
 7482 114d 0F       		.uleb128 0xf
 7483 114e 0E010000 		.4byte	0x10e
 7484 1152 0B       		.byte	0xb
 7485 1153 00       		.byte	0
 7486 1154 22       		.uleb128 0x22
 7487 1155 24030000 		.4byte	.LASF256
 7488 1159 07       		.byte	0x7
 7489 115a 8601     		.2byte	0x186
 7490 115c 44110000 		.4byte	0x1144
 7491 1160 22       		.uleb128 0x22
 7492 1161 DB0C0000 		.4byte	.LASF257
 7493 1165 07       		.byte	0x7
 7494 1166 8701     		.2byte	0x187
 7495 1168 81000000 		.4byte	0x81
 7496 116c 22       		.uleb128 0x22
 7497 116d 07040000 		.4byte	.LASF258
 7498 1171 07       		.byte	0x7
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 174


 7499 1172 8A01     		.2byte	0x18a
 7500 1174 A5000000 		.4byte	0xa5
 7501 1178 0E       		.uleb128 0xe
 7502 1179 99000000 		.4byte	0x99
 7503 117d 88110000 		.4byte	0x1188
 7504 1181 0F       		.uleb128 0xf
 7505 1182 0E010000 		.4byte	0x10e
 7506 1186 04       		.byte	0x4
 7507 1187 00       		.byte	0
 7508 1188 22       		.uleb128 0x22
 7509 1189 9B050000 		.4byte	.LASF259
 7510 118d 07       		.byte	0x7
 7511 118e 8D01     		.2byte	0x18d
 7512 1190 78110000 		.4byte	0x1178
 7513 1194 22       		.uleb128 0x22
 7514 1195 B90A0000 		.4byte	.LASF260
 7515 1199 07       		.byte	0x7
 7516 119a 8E01     		.2byte	0x18e
 7517 119c DD060000 		.4byte	0x6dd
 7518 11a0 0E       		.uleb128 0xe
 7519 11a1 8D000000 		.4byte	0x8d
 7520 11a5 B6110000 		.4byte	0x11b6
 7521 11a9 0F       		.uleb128 0xf
 7522 11aa 0E010000 		.4byte	0x10e
 7523 11ae 01       		.byte	0x1
 7524 11af 0F       		.uleb128 0xf
 7525 11b0 0E010000 		.4byte	0x10e
 7526 11b4 04       		.byte	0x4
 7527 11b5 00       		.byte	0
 7528 11b6 22       		.uleb128 0x22
 7529 11b7 2B0C0000 		.4byte	.LASF261
 7530 11bb 07       		.byte	0x7
 7531 11bc 8F01     		.2byte	0x18f
 7532 11be A0110000 		.4byte	0x11a0
 7533 11c2 22       		.uleb128 0x22
 7534 11c3 7A050000 		.4byte	.LASF262
 7535 11c7 07       		.byte	0x7
 7536 11c8 9001     		.2byte	0x190
 7537 11ca B7060000 		.4byte	0x6b7
 7538 11ce 22       		.uleb128 0x22
 7539 11cf 56080000 		.4byte	.LASF263
 7540 11d3 07       		.byte	0x7
 7541 11d4 9301     		.2byte	0x193
 7542 11d6 BD000000 		.4byte	0xbd
 7543 11da 22       		.uleb128 0x22
 7544 11db 94040000 		.4byte	.LASF264
 7545 11df 07       		.byte	0x7
 7546 11e0 9601     		.2byte	0x196
 7547 11e2 83010000 		.4byte	0x183
 7548 11e6 0E       		.uleb128 0xe
 7549 11e7 ED060000 		.4byte	0x6ed
 7550 11eb F6110000 		.4byte	0x11f6
 7551 11ef 0F       		.uleb128 0xf
 7552 11f0 0E010000 		.4byte	0x10e
 7553 11f4 04       		.byte	0x4
 7554 11f5 00       		.byte	0
 7555 11f6 22       		.uleb128 0x22
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 175


 7556 11f7 DF050000 		.4byte	.LASF265
 7557 11fb 07       		.byte	0x7
 7558 11fc 9D01     		.2byte	0x19d
 7559 11fe E6110000 		.4byte	0x11e6
 7560 1202 22       		.uleb128 0x22
 7561 1203 F0040000 		.4byte	.LASF266
 7562 1207 07       		.byte	0x7
 7563 1208 9D01     		.2byte	0x19d
 7564 120a E6110000 		.4byte	0x11e6
 7565 120e 00       		.byte	0
 7566              		.section	.debug_abbrev,"",%progbits
 7567              	.Ldebug_abbrev0:
 7568 0000 01       		.uleb128 0x1
 7569 0001 11       		.uleb128 0x11
 7570 0002 01       		.byte	0x1
 7571 0003 25       		.uleb128 0x25
 7572 0004 0E       		.uleb128 0xe
 7573 0005 13       		.uleb128 0x13
 7574 0006 0B       		.uleb128 0xb
 7575 0007 03       		.uleb128 0x3
 7576 0008 0E       		.uleb128 0xe
 7577 0009 1B       		.uleb128 0x1b
 7578 000a 0E       		.uleb128 0xe
 7579 000b 55       		.uleb128 0x55
 7580 000c 17       		.uleb128 0x17
 7581 000d 11       		.uleb128 0x11
 7582 000e 01       		.uleb128 0x1
 7583 000f 10       		.uleb128 0x10
 7584 0010 17       		.uleb128 0x17
 7585 0011 00       		.byte	0
 7586 0012 00       		.byte	0
 7587 0013 02       		.uleb128 0x2
 7588 0014 24       		.uleb128 0x24
 7589 0015 00       		.byte	0
 7590 0016 0B       		.uleb128 0xb
 7591 0017 0B       		.uleb128 0xb
 7592 0018 3E       		.uleb128 0x3e
 7593 0019 0B       		.uleb128 0xb
 7594 001a 03       		.uleb128 0x3
 7595 001b 0E       		.uleb128 0xe
 7596 001c 00       		.byte	0
 7597 001d 00       		.byte	0
 7598 001e 03       		.uleb128 0x3
 7599 001f 16       		.uleb128 0x16
 7600 0020 00       		.byte	0
 7601 0021 03       		.uleb128 0x3
 7602 0022 0E       		.uleb128 0xe
 7603 0023 3A       		.uleb128 0x3a
 7604 0024 0B       		.uleb128 0xb
 7605 0025 3B       		.uleb128 0x3b
 7606 0026 0B       		.uleb128 0xb
 7607 0027 49       		.uleb128 0x49
 7608 0028 13       		.uleb128 0x13
 7609 0029 00       		.byte	0
 7610 002a 00       		.byte	0
 7611 002b 04       		.uleb128 0x4
 7612 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 176


 7613 002d 00       		.byte	0
 7614 002e 0B       		.uleb128 0xb
 7615 002f 0B       		.uleb128 0xb
 7616 0030 3E       		.uleb128 0x3e
 7617 0031 0B       		.uleb128 0xb
 7618 0032 03       		.uleb128 0x3
 7619 0033 08       		.uleb128 0x8
 7620 0034 00       		.byte	0
 7621 0035 00       		.byte	0
 7622 0036 05       		.uleb128 0x5
 7623 0037 16       		.uleb128 0x16
 7624 0038 00       		.byte	0
 7625 0039 03       		.uleb128 0x3
 7626 003a 0E       		.uleb128 0xe
 7627 003b 3A       		.uleb128 0x3a
 7628 003c 0B       		.uleb128 0xb
 7629 003d 3B       		.uleb128 0x3b
 7630 003e 05       		.uleb128 0x5
 7631 003f 49       		.uleb128 0x49
 7632 0040 13       		.uleb128 0x13
 7633 0041 00       		.byte	0
 7634 0042 00       		.byte	0
 7635 0043 06       		.uleb128 0x6
 7636 0044 35       		.uleb128 0x35
 7637 0045 00       		.byte	0
 7638 0046 49       		.uleb128 0x49
 7639 0047 13       		.uleb128 0x13
 7640 0048 00       		.byte	0
 7641 0049 00       		.byte	0
 7642 004a 07       		.uleb128 0x7
 7643 004b 04       		.uleb128 0x4
 7644 004c 01       		.byte	0x1
 7645 004d 03       		.uleb128 0x3
 7646 004e 0E       		.uleb128 0xe
 7647 004f 0B       		.uleb128 0xb
 7648 0050 0B       		.uleb128 0xb
 7649 0051 49       		.uleb128 0x49
 7650 0052 13       		.uleb128 0x13
 7651 0053 3A       		.uleb128 0x3a
 7652 0054 0B       		.uleb128 0xb
 7653 0055 3B       		.uleb128 0x3b
 7654 0056 0B       		.uleb128 0xb
 7655 0057 01       		.uleb128 0x1
 7656 0058 13       		.uleb128 0x13
 7657 0059 00       		.byte	0
 7658 005a 00       		.byte	0
 7659 005b 08       		.uleb128 0x8
 7660 005c 28       		.uleb128 0x28
 7661 005d 00       		.byte	0
 7662 005e 03       		.uleb128 0x3
 7663 005f 0E       		.uleb128 0xe
 7664 0060 1C       		.uleb128 0x1c
 7665 0061 0B       		.uleb128 0xb
 7666 0062 00       		.byte	0
 7667 0063 00       		.byte	0
 7668 0064 09       		.uleb128 0x9
 7669 0065 13       		.uleb128 0x13
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 177


 7670 0066 00       		.byte	0
 7671 0067 03       		.uleb128 0x3
 7672 0068 0E       		.uleb128 0xe
 7673 0069 3C       		.uleb128 0x3c
 7674 006a 19       		.uleb128 0x19
 7675 006b 00       		.byte	0
 7676 006c 00       		.byte	0
 7677 006d 0A       		.uleb128 0xa
 7678 006e 0F       		.uleb128 0xf
 7679 006f 00       		.byte	0
 7680 0070 0B       		.uleb128 0xb
 7681 0071 0B       		.uleb128 0xb
 7682 0072 49       		.uleb128 0x49
 7683 0073 13       		.uleb128 0x13
 7684 0074 00       		.byte	0
 7685 0075 00       		.byte	0
 7686 0076 0B       		.uleb128 0xb
 7687 0077 13       		.uleb128 0x13
 7688 0078 01       		.byte	0x1
 7689 0079 03       		.uleb128 0x3
 7690 007a 0E       		.uleb128 0xe
 7691 007b 0B       		.uleb128 0xb
 7692 007c 0B       		.uleb128 0xb
 7693 007d 3A       		.uleb128 0x3a
 7694 007e 0B       		.uleb128 0xb
 7695 007f 3B       		.uleb128 0x3b
 7696 0080 0B       		.uleb128 0xb
 7697 0081 01       		.uleb128 0x1
 7698 0082 13       		.uleb128 0x13
 7699 0083 00       		.byte	0
 7700 0084 00       		.byte	0
 7701 0085 0C       		.uleb128 0xc
 7702 0086 0D       		.uleb128 0xd
 7703 0087 00       		.byte	0
 7704 0088 03       		.uleb128 0x3
 7705 0089 08       		.uleb128 0x8
 7706 008a 3A       		.uleb128 0x3a
 7707 008b 0B       		.uleb128 0xb
 7708 008c 3B       		.uleb128 0x3b
 7709 008d 0B       		.uleb128 0xb
 7710 008e 49       		.uleb128 0x49
 7711 008f 13       		.uleb128 0x13
 7712 0090 38       		.uleb128 0x38
 7713 0091 0B       		.uleb128 0xb
 7714 0092 00       		.byte	0
 7715 0093 00       		.byte	0
 7716 0094 0D       		.uleb128 0xd
 7717 0095 0D       		.uleb128 0xd
 7718 0096 00       		.byte	0
 7719 0097 03       		.uleb128 0x3
 7720 0098 0E       		.uleb128 0xe
 7721 0099 3A       		.uleb128 0x3a
 7722 009a 0B       		.uleb128 0xb
 7723 009b 3B       		.uleb128 0x3b
 7724 009c 0B       		.uleb128 0xb
 7725 009d 49       		.uleb128 0x49
 7726 009e 13       		.uleb128 0x13
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 178


 7727 009f 38       		.uleb128 0x38
 7728 00a0 0B       		.uleb128 0xb
 7729 00a1 00       		.byte	0
 7730 00a2 00       		.byte	0
 7731 00a3 0E       		.uleb128 0xe
 7732 00a4 01       		.uleb128 0x1
 7733 00a5 01       		.byte	0x1
 7734 00a6 49       		.uleb128 0x49
 7735 00a7 13       		.uleb128 0x13
 7736 00a8 01       		.uleb128 0x1
 7737 00a9 13       		.uleb128 0x13
 7738 00aa 00       		.byte	0
 7739 00ab 00       		.byte	0
 7740 00ac 0F       		.uleb128 0xf
 7741 00ad 21       		.uleb128 0x21
 7742 00ae 00       		.byte	0
 7743 00af 49       		.uleb128 0x49
 7744 00b0 13       		.uleb128 0x13
 7745 00b1 2F       		.uleb128 0x2f
 7746 00b2 0B       		.uleb128 0xb
 7747 00b3 00       		.byte	0
 7748 00b4 00       		.byte	0
 7749 00b5 10       		.uleb128 0x10
 7750 00b6 13       		.uleb128 0x13
 7751 00b7 01       		.byte	0x1
 7752 00b8 03       		.uleb128 0x3
 7753 00b9 0E       		.uleb128 0xe
 7754 00ba 0B       		.uleb128 0xb
 7755 00bb 05       		.uleb128 0x5
 7756 00bc 3A       		.uleb128 0x3a
 7757 00bd 0B       		.uleb128 0xb
 7758 00be 3B       		.uleb128 0x3b
 7759 00bf 0B       		.uleb128 0xb
 7760 00c0 01       		.uleb128 0x1
 7761 00c1 13       		.uleb128 0x13
 7762 00c2 00       		.byte	0
 7763 00c3 00       		.byte	0
 7764 00c4 11       		.uleb128 0x11
 7765 00c5 0D       		.uleb128 0xd
 7766 00c6 00       		.byte	0
 7767 00c7 03       		.uleb128 0x3
 7768 00c8 0E       		.uleb128 0xe
 7769 00c9 3A       		.uleb128 0x3a
 7770 00ca 0B       		.uleb128 0xb
 7771 00cb 3B       		.uleb128 0x3b
 7772 00cc 05       		.uleb128 0x5
 7773 00cd 49       		.uleb128 0x49
 7774 00ce 13       		.uleb128 0x13
 7775 00cf 38       		.uleb128 0x38
 7776 00d0 0B       		.uleb128 0xb
 7777 00d1 00       		.byte	0
 7778 00d2 00       		.byte	0
 7779 00d3 12       		.uleb128 0x12
 7780 00d4 0D       		.uleb128 0xd
 7781 00d5 00       		.byte	0
 7782 00d6 03       		.uleb128 0x3
 7783 00d7 0E       		.uleb128 0xe
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 179


 7784 00d8 3A       		.uleb128 0x3a
 7785 00d9 0B       		.uleb128 0xb
 7786 00da 3B       		.uleb128 0x3b
 7787 00db 05       		.uleb128 0x5
 7788 00dc 49       		.uleb128 0x49
 7789 00dd 13       		.uleb128 0x13
 7790 00de 38       		.uleb128 0x38
 7791 00df 05       		.uleb128 0x5
 7792 00e0 00       		.byte	0
 7793 00e1 00       		.byte	0
 7794 00e2 13       		.uleb128 0x13
 7795 00e3 13       		.uleb128 0x13
 7796 00e4 01       		.byte	0x1
 7797 00e5 03       		.uleb128 0x3
 7798 00e6 0E       		.uleb128 0xe
 7799 00e7 0B       		.uleb128 0xb
 7800 00e8 0B       		.uleb128 0xb
 7801 00e9 3A       		.uleb128 0x3a
 7802 00ea 0B       		.uleb128 0xb
 7803 00eb 3B       		.uleb128 0x3b
 7804 00ec 05       		.uleb128 0x5
 7805 00ed 01       		.uleb128 0x1
 7806 00ee 13       		.uleb128 0x13
 7807 00ef 00       		.byte	0
 7808 00f0 00       		.byte	0
 7809 00f1 14       		.uleb128 0x14
 7810 00f2 04       		.uleb128 0x4
 7811 00f3 01       		.byte	0x1
 7812 00f4 0B       		.uleb128 0xb
 7813 00f5 0B       		.uleb128 0xb
 7814 00f6 49       		.uleb128 0x49
 7815 00f7 13       		.uleb128 0x13
 7816 00f8 3A       		.uleb128 0x3a
 7817 00f9 0B       		.uleb128 0xb
 7818 00fa 3B       		.uleb128 0x3b
 7819 00fb 05       		.uleb128 0x5
 7820 00fc 01       		.uleb128 0x1
 7821 00fd 13       		.uleb128 0x13
 7822 00fe 00       		.byte	0
 7823 00ff 00       		.byte	0
 7824 0100 15       		.uleb128 0x15
 7825 0101 2E       		.uleb128 0x2e
 7826 0102 00       		.byte	0
 7827 0103 3F       		.uleb128 0x3f
 7828 0104 19       		.uleb128 0x19
 7829 0105 03       		.uleb128 0x3
 7830 0106 0E       		.uleb128 0xe
 7831 0107 3A       		.uleb128 0x3a
 7832 0108 0B       		.uleb128 0xb
 7833 0109 3B       		.uleb128 0x3b
 7834 010a 0B       		.uleb128 0xb
 7835 010b 27       		.uleb128 0x27
 7836 010c 19       		.uleb128 0x19
 7837 010d 11       		.uleb128 0x11
 7838 010e 01       		.uleb128 0x1
 7839 010f 12       		.uleb128 0x12
 7840 0110 06       		.uleb128 0x6
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 180


 7841 0111 40       		.uleb128 0x40
 7842 0112 18       		.uleb128 0x18
 7843 0113 9742     		.uleb128 0x2117
 7844 0115 19       		.uleb128 0x19
 7845 0116 00       		.byte	0
 7846 0117 00       		.byte	0
 7847 0118 16       		.uleb128 0x16
 7848 0119 2E       		.uleb128 0x2e
 7849 011a 01       		.byte	0x1
 7850 011b 3F       		.uleb128 0x3f
 7851 011c 19       		.uleb128 0x19
 7852 011d 03       		.uleb128 0x3
 7853 011e 0E       		.uleb128 0xe
 7854 011f 3A       		.uleb128 0x3a
 7855 0120 0B       		.uleb128 0xb
 7856 0121 3B       		.uleb128 0x3b
 7857 0122 0B       		.uleb128 0xb
 7858 0123 11       		.uleb128 0x11
 7859 0124 01       		.uleb128 0x1
 7860 0125 12       		.uleb128 0x12
 7861 0126 06       		.uleb128 0x6
 7862 0127 40       		.uleb128 0x40
 7863 0128 18       		.uleb128 0x18
 7864 0129 9642     		.uleb128 0x2116
 7865 012b 19       		.uleb128 0x19
 7866 012c 01       		.uleb128 0x1
 7867 012d 13       		.uleb128 0x13
 7868 012e 00       		.byte	0
 7869 012f 00       		.byte	0
 7870 0130 17       		.uleb128 0x17
 7871 0131 34       		.uleb128 0x34
 7872 0132 00       		.byte	0
 7873 0133 03       		.uleb128 0x3
 7874 0134 0E       		.uleb128 0xe
 7875 0135 3A       		.uleb128 0x3a
 7876 0136 0B       		.uleb128 0xb
 7877 0137 3B       		.uleb128 0x3b
 7878 0138 0B       		.uleb128 0xb
 7879 0139 49       		.uleb128 0x49
 7880 013a 13       		.uleb128 0x13
 7881 013b 02       		.uleb128 0x2
 7882 013c 18       		.uleb128 0x18
 7883 013d 00       		.byte	0
 7884 013e 00       		.byte	0
 7885 013f 18       		.uleb128 0x18
 7886 0140 2E       		.uleb128 0x2e
 7887 0141 01       		.byte	0x1
 7888 0142 3F       		.uleb128 0x3f
 7889 0143 19       		.uleb128 0x19
 7890 0144 03       		.uleb128 0x3
 7891 0145 0E       		.uleb128 0xe
 7892 0146 3A       		.uleb128 0x3a
 7893 0147 0B       		.uleb128 0xb
 7894 0148 3B       		.uleb128 0x3b
 7895 0149 05       		.uleb128 0x5
 7896 014a 27       		.uleb128 0x27
 7897 014b 19       		.uleb128 0x19
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 181


 7898 014c 11       		.uleb128 0x11
 7899 014d 01       		.uleb128 0x1
 7900 014e 12       		.uleb128 0x12
 7901 014f 06       		.uleb128 0x6
 7902 0150 40       		.uleb128 0x40
 7903 0151 18       		.uleb128 0x18
 7904 0152 9642     		.uleb128 0x2116
 7905 0154 19       		.uleb128 0x19
 7906 0155 01       		.uleb128 0x1
 7907 0156 13       		.uleb128 0x13
 7908 0157 00       		.byte	0
 7909 0158 00       		.byte	0
 7910 0159 19       		.uleb128 0x19
 7911 015a 34       		.uleb128 0x34
 7912 015b 00       		.byte	0
 7913 015c 03       		.uleb128 0x3
 7914 015d 0E       		.uleb128 0xe
 7915 015e 3A       		.uleb128 0x3a
 7916 015f 0B       		.uleb128 0xb
 7917 0160 3B       		.uleb128 0x3b
 7918 0161 05       		.uleb128 0x5
 7919 0162 49       		.uleb128 0x49
 7920 0163 13       		.uleb128 0x13
 7921 0164 02       		.uleb128 0x2
 7922 0165 18       		.uleb128 0x18
 7923 0166 00       		.byte	0
 7924 0167 00       		.byte	0
 7925 0168 1A       		.uleb128 0x1a
 7926 0169 21       		.uleb128 0x21
 7927 016a 00       		.byte	0
 7928 016b 49       		.uleb128 0x49
 7929 016c 13       		.uleb128 0x13
 7930 016d 2F       		.uleb128 0x2f
 7931 016e 05       		.uleb128 0x5
 7932 016f 00       		.byte	0
 7933 0170 00       		.byte	0
 7934 0171 1B       		.uleb128 0x1b
 7935 0172 2E       		.uleb128 0x2e
 7936 0173 01       		.byte	0x1
 7937 0174 3F       		.uleb128 0x3f
 7938 0175 19       		.uleb128 0x19
 7939 0176 03       		.uleb128 0x3
 7940 0177 0E       		.uleb128 0xe
 7941 0178 3A       		.uleb128 0x3a
 7942 0179 0B       		.uleb128 0xb
 7943 017a 3B       		.uleb128 0x3b
 7944 017b 05       		.uleb128 0x5
 7945 017c 11       		.uleb128 0x11
 7946 017d 01       		.uleb128 0x1
 7947 017e 12       		.uleb128 0x12
 7948 017f 06       		.uleb128 0x6
 7949 0180 40       		.uleb128 0x40
 7950 0181 18       		.uleb128 0x18
 7951 0182 9642     		.uleb128 0x2116
 7952 0184 19       		.uleb128 0x19
 7953 0185 01       		.uleb128 0x1
 7954 0186 13       		.uleb128 0x13
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 182


 7955 0187 00       		.byte	0
 7956 0188 00       		.byte	0
 7957 0189 1C       		.uleb128 0x1c
 7958 018a 34       		.uleb128 0x34
 7959 018b 00       		.byte	0
 7960 018c 03       		.uleb128 0x3
 7961 018d 08       		.uleb128 0x8
 7962 018e 3A       		.uleb128 0x3a
 7963 018f 0B       		.uleb128 0xb
 7964 0190 3B       		.uleb128 0x3b
 7965 0191 05       		.uleb128 0x5
 7966 0192 49       		.uleb128 0x49
 7967 0193 13       		.uleb128 0x13
 7968 0194 02       		.uleb128 0x2
 7969 0195 18       		.uleb128 0x18
 7970 0196 00       		.byte	0
 7971 0197 00       		.byte	0
 7972 0198 1D       		.uleb128 0x1d
 7973 0199 2E       		.uleb128 0x2e
 7974 019a 01       		.byte	0x1
 7975 019b 3F       		.uleb128 0x3f
 7976 019c 19       		.uleb128 0x19
 7977 019d 03       		.uleb128 0x3
 7978 019e 0E       		.uleb128 0xe
 7979 019f 3A       		.uleb128 0x3a
 7980 01a0 0B       		.uleb128 0xb
 7981 01a1 3B       		.uleb128 0x3b
 7982 01a2 05       		.uleb128 0x5
 7983 01a3 27       		.uleb128 0x27
 7984 01a4 19       		.uleb128 0x19
 7985 01a5 11       		.uleb128 0x11
 7986 01a6 01       		.uleb128 0x1
 7987 01a7 12       		.uleb128 0x12
 7988 01a8 06       		.uleb128 0x6
 7989 01a9 40       		.uleb128 0x40
 7990 01aa 18       		.uleb128 0x18
 7991 01ab 9742     		.uleb128 0x2117
 7992 01ad 19       		.uleb128 0x19
 7993 01ae 01       		.uleb128 0x1
 7994 01af 13       		.uleb128 0x13
 7995 01b0 00       		.byte	0
 7996 01b1 00       		.byte	0
 7997 01b2 1E       		.uleb128 0x1e
 7998 01b3 05       		.uleb128 0x5
 7999 01b4 00       		.byte	0
 8000 01b5 03       		.uleb128 0x3
 8001 01b6 0E       		.uleb128 0xe
 8002 01b7 3A       		.uleb128 0x3a
 8003 01b8 0B       		.uleb128 0xb
 8004 01b9 3B       		.uleb128 0x3b
 8005 01ba 05       		.uleb128 0x5
 8006 01bb 49       		.uleb128 0x49
 8007 01bc 13       		.uleb128 0x13
 8008 01bd 02       		.uleb128 0x2
 8009 01be 18       		.uleb128 0x18
 8010 01bf 00       		.byte	0
 8011 01c0 00       		.byte	0
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 183


 8012 01c1 1F       		.uleb128 0x1f
 8013 01c2 2E       		.uleb128 0x2e
 8014 01c3 00       		.byte	0
 8015 01c4 3F       		.uleb128 0x3f
 8016 01c5 19       		.uleb128 0x19
 8017 01c6 03       		.uleb128 0x3
 8018 01c7 0E       		.uleb128 0xe
 8019 01c8 3A       		.uleb128 0x3a
 8020 01c9 0B       		.uleb128 0xb
 8021 01ca 3B       		.uleb128 0x3b
 8022 01cb 05       		.uleb128 0x5
 8023 01cc 11       		.uleb128 0x11
 8024 01cd 01       		.uleb128 0x1
 8025 01ce 12       		.uleb128 0x12
 8026 01cf 06       		.uleb128 0x6
 8027 01d0 40       		.uleb128 0x40
 8028 01d1 18       		.uleb128 0x18
 8029 01d2 9742     		.uleb128 0x2117
 8030 01d4 19       		.uleb128 0x19
 8031 01d5 00       		.byte	0
 8032 01d6 00       		.byte	0
 8033 01d7 20       		.uleb128 0x20
 8034 01d8 2E       		.uleb128 0x2e
 8035 01d9 01       		.byte	0x1
 8036 01da 3F       		.uleb128 0x3f
 8037 01db 19       		.uleb128 0x19
 8038 01dc 03       		.uleb128 0x3
 8039 01dd 0E       		.uleb128 0xe
 8040 01de 3A       		.uleb128 0x3a
 8041 01df 0B       		.uleb128 0xb
 8042 01e0 3B       		.uleb128 0x3b
 8043 01e1 05       		.uleb128 0x5
 8044 01e2 11       		.uleb128 0x11
 8045 01e3 01       		.uleb128 0x1
 8046 01e4 12       		.uleb128 0x12
 8047 01e5 06       		.uleb128 0x6
 8048 01e6 40       		.uleb128 0x40
 8049 01e7 18       		.uleb128 0x18
 8050 01e8 9742     		.uleb128 0x2117
 8051 01ea 19       		.uleb128 0x19
 8052 01eb 01       		.uleb128 0x1
 8053 01ec 13       		.uleb128 0x13
 8054 01ed 00       		.byte	0
 8055 01ee 00       		.byte	0
 8056 01ef 21       		.uleb128 0x21
 8057 01f0 26       		.uleb128 0x26
 8058 01f1 00       		.byte	0
 8059 01f2 49       		.uleb128 0x49
 8060 01f3 13       		.uleb128 0x13
 8061 01f4 00       		.byte	0
 8062 01f5 00       		.byte	0
 8063 01f6 22       		.uleb128 0x22
 8064 01f7 34       		.uleb128 0x34
 8065 01f8 00       		.byte	0
 8066 01f9 03       		.uleb128 0x3
 8067 01fa 0E       		.uleb128 0xe
 8068 01fb 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 184


 8069 01fc 0B       		.uleb128 0xb
 8070 01fd 3B       		.uleb128 0x3b
 8071 01fe 05       		.uleb128 0x5
 8072 01ff 49       		.uleb128 0x49
 8073 0200 13       		.uleb128 0x13
 8074 0201 3F       		.uleb128 0x3f
 8075 0202 19       		.uleb128 0x19
 8076 0203 3C       		.uleb128 0x3c
 8077 0204 19       		.uleb128 0x19
 8078 0205 00       		.byte	0
 8079 0206 00       		.byte	0
 8080 0207 00       		.byte	0
 8081              		.section	.debug_aranges,"",%progbits
 8082 0000 74000000 		.4byte	0x74
 8083 0004 0200     		.2byte	0x2
 8084 0006 00000000 		.4byte	.Ldebug_info0
 8085 000a 04       		.byte	0x4
 8086 000b 00       		.byte	0
 8087 000c 0000     		.2byte	0
 8088 000e 0000     		.2byte	0
 8089 0010 00000000 		.4byte	.LFB64
 8090 0014 18000000 		.4byte	.LFE64-.LFB64
 8091 0018 00000000 		.4byte	.LFB65
 8092 001c 20000000 		.4byte	.LFE65-.LFB65
 8093 0020 00000000 		.4byte	.LFB66
 8094 0024 F4010000 		.4byte	.LFE66-.LFB66
 8095 0028 00000000 		.4byte	.LFB67
 8096 002c E4020000 		.4byte	.LFE67-.LFB67
 8097 0030 00000000 		.4byte	.LFB68
 8098 0034 C0090000 		.4byte	.LFE68-.LFB68
 8099 0038 00000000 		.4byte	.LFB69
 8100 003c 38000000 		.4byte	.LFE69-.LFB69
 8101 0040 00000000 		.4byte	.LFB70
 8102 0044 44050000 		.4byte	.LFE70-.LFB70
 8103 0048 00000000 		.4byte	.LFB71
 8104 004c 9C090000 		.4byte	.LFE71-.LFB71
 8105 0050 00000000 		.4byte	.LFB72
 8106 0054 74000000 		.4byte	.LFE72-.LFB72
 8107 0058 00000000 		.4byte	.LFB73
 8108 005c 64000000 		.4byte	.LFE73-.LFB73
 8109 0060 00000000 		.4byte	.LFB74
 8110 0064 34030000 		.4byte	.LFE74-.LFB74
 8111 0068 00000000 		.4byte	.LFB75
 8112 006c 08010000 		.4byte	.LFE75-.LFB75
 8113 0070 00000000 		.4byte	0
 8114 0074 00000000 		.4byte	0
 8115              		.section	.debug_ranges,"",%progbits
 8116              	.Ldebug_ranges0:
 8117 0000 00000000 		.4byte	.LFB64
 8118 0004 18000000 		.4byte	.LFE64
 8119 0008 00000000 		.4byte	.LFB65
 8120 000c 20000000 		.4byte	.LFE65
 8121 0010 00000000 		.4byte	.LFB66
 8122 0014 F4010000 		.4byte	.LFE66
 8123 0018 00000000 		.4byte	.LFB67
 8124 001c E4020000 		.4byte	.LFE67
 8125 0020 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 185


 8126 0024 C0090000 		.4byte	.LFE68
 8127 0028 00000000 		.4byte	.LFB69
 8128 002c 38000000 		.4byte	.LFE69
 8129 0030 00000000 		.4byte	.LFB70
 8130 0034 44050000 		.4byte	.LFE70
 8131 0038 00000000 		.4byte	.LFB71
 8132 003c 9C090000 		.4byte	.LFE71
 8133 0040 00000000 		.4byte	.LFB72
 8134 0044 74000000 		.4byte	.LFE72
 8135 0048 00000000 		.4byte	.LFB73
 8136 004c 64000000 		.4byte	.LFE73
 8137 0050 00000000 		.4byte	.LFB74
 8138 0054 34030000 		.4byte	.LFE74
 8139 0058 00000000 		.4byte	.LFB75
 8140 005c 08010000 		.4byte	.LFE75
 8141 0060 00000000 		.4byte	0
 8142 0064 00000000 		.4byte	0
 8143              		.section	.debug_line,"",%progbits
 8144              	.Ldebug_line0:
 8145 0000 25080000 		.section	.debug_str,"MS",%progbits,1
 8145      0200A801 
 8145      00000201 
 8145      FB0E0D00 
 8145      01010101 
 8146              	.LASF24:
 8147 0000 73697A65 		.ascii	"sizetype\000"
 8147      74797065 
 8147      00
 8148              	.LASF199:
 8149 0009 706F735F 		.ascii	"pos_cycle_status\000"
 8149      6379636C 
 8149      655F7374 
 8149      61747573 
 8149      00
 8150              	.LASF30:
 8151 001a 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 8151      545F4D4F 
 8151      44455F45 
 8151      4D475F46 
 8151      4346535F 
 8152              	.LASF150:
 8153 0032 70776D5F 		.ascii	"pwm_input\000"
 8153      696E7075 
 8153      7400
 8154              	.LASF196:
 8155 003c 6D61785F 		.ascii	"max_tension\000"
 8155      74656E73 
 8155      696F6E00 
 8156              	.LASF10:
 8157 0048 696E7433 		.ascii	"int32_t\000"
 8157      325F7400 
 8158              	.LASF227:
 8159 0050 675F7278 		.ascii	"g_rx\000"
 8159      00
 8160              	.LASF182:
 8161 0055 6F6E655F 		.ascii	"one_time_execute\000"
 8161      74696D65 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 186


 8161      5F657865 
 8161      63757465 
 8161      00
 8162              	.LASF44:
 8163 0066 73745F64 		.ascii	"st_data\000"
 8163      61746100 
 8164              	.LASF13:
 8165 006e 75696E74 		.ascii	"uint32\000"
 8165      333200
 8166              	.LASF169:
 8167 0075 6E5F6C69 		.ascii	"n_line\000"
 8167      6E6500
 8168              	.LASF74:
 8169 007c 706F735F 		.ascii	"pos_lim_inf\000"
 8169      6C696D5F 
 8169      696E6600 
 8170              	.LASF248:
 8171 0088 74656E73 		.ascii	"tension_valid\000"
 8171      696F6E5F 
 8171      76616C69 
 8171      6400
 8172              	.LASF137:
 8173 0096 73746174 		.ascii	"state\000"
 8173      6500
 8174              	.LASF250:
 8175 009c 6379636C 		.ascii	"cycles_interrupt_flag\000"
 8175      65735F69 
 8175      6E746572 
 8175      72757074 
 8175      5F666C61 
 8176              	.LASF206:
 8177 00b2 62696E5F 		.ascii	"bin_max\000"
 8177      6D617800 
 8178              	.LASF217:
 8179 00ba 61646472 		.ascii	"addr_start_c\000"
 8179      5F737461 
 8179      72745F63 
 8179      00
 8180              	.LASF29:
 8181 00c7 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 8181      545F4D4F 
 8181      44455F45 
 8181      4D475F46 
 8181      43465300 
 8182              	.LASF86:
 8183 00db 63757272 		.ascii	"curr_lookup\000"
 8183      5F6C6F6F 
 8183      6B757000 
 8184              	.LASF151:
 8185 00e7 706F735F 		.ascii	"pos_error\000"
 8185      6572726F 
 8185      7200
 8186              	.LASF52:
 8187 00f1 72657374 		.ascii	"rest_counter\000"
 8187      5F636F75 
 8187      6E746572 
 8187      00
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 187


 8188              	.LASF28:
 8189 00fe 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 8189      545F4D4F 
 8189      44455F45 
 8189      4D475F49 
 8189      4E544547 
 8190              	.LASF194:
 8191 0116 765F636F 		.ascii	"v_count\000"
 8191      756E7400 
 8192              	.LASF142:
 8193 011e 72785F64 		.ascii	"rx_data\000"
 8193      61746100 
 8194              	.LASF187:
 8195 0126 7676765F 		.ascii	"vvv_value\000"
 8195      76616C75 
 8195      6500
 8196              	.LASF14:
 8197 0130 696E7438 		.ascii	"int8\000"
 8197      00
 8198              	.LASF147:
 8199 0135 696E666F 		.ascii	"info_\000"
 8199      5F00
 8200              	.LASF128:
 8201 013b 656D675F 		.ascii	"emg_status\000"
 8201      73746174 
 8201      757300
 8202              	.LASF235:
 8203 0146 66696C74 		.ascii	"filt_emg\000"
 8203      5F656D67 
 8203      00
 8204              	.LASF176:
 8205 014f 696E6974 		.ascii	"init_rot\000"
 8205      5F726F74 
 8205      00
 8206              	.LASF50:
 8207 0158 706F7369 		.ascii	"position_hist\000"
 8207      74696F6E 
 8207      5F686973 
 8207      7400
 8208              	.LASF129:
 8209 0166 50524550 		.ascii	"PREPARE_DATA\000"
 8209      4152455F 
 8209      44415441 
 8209      00
 8210              	.LASF113:
 8211 0173 74656D70 		.ascii	"temp_value\000"
 8211      5F76616C 
 8211      756500
 8212              	.LASF203:
 8213 017e 7468725F 		.ascii	"thr_pos\000"
 8213      706F7300 
 8214              	.LASF47:
 8215 0186 72656164 		.ascii	"ready\000"
 8215      7900
 8216              	.LASF116:
 8217 018c 6761696E 		.ascii	"gain\000"
 8217      00
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 188


 8218              	.LASF27:
 8219 0191 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 8219      545F4D4F 
 8219      44455F45 
 8219      4D475F50 
 8219      524F504F 
 8220              	.LASF105:
 8221 01ad 7573655F 		.ascii	"use_2nd_motor_flag\000"
 8221      326E645F 
 8221      6D6F746F 
 8221      725F666C 
 8221      616700
 8222              	.LASF125:
 8223 01c0 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 8223      414E445F 
 8223      4D45414E 
 8223      00
 8224              	.LASF97:
 8225 01cd 72656164 		.ascii	"read_imu_flag\000"
 8225      5F696D75 
 8225      5F666C61 
 8225      6700
 8226              	.LASF192:
 8227 01db 66697273 		.ascii	"first_tension_valid\000"
 8227      745F7465 
 8227      6E73696F 
 8227      6E5F7661 
 8227      6C696400 
 8228              	.LASF236:
 8229 01ef 74696D65 		.ascii	"timer_value\000"
 8229      725F7661 
 8229      6C756500 
 8230              	.LASF4:
 8231 01fb 6C6F6E67 		.ascii	"long int\000"
 8231      20696E74 
 8231      00
 8232              	.LASF57:
 8233 0204 756E7573 		.ascii	"unused_bytes1\000"
 8233      65645F62 
 8233      79746573 
 8233      3100
 8234              	.LASF202:
 8235 0212 62696E5F 		.ascii	"bin_threshold\000"
 8235      74687265 
 8235      73686F6C 
 8235      6400
 8236              	.LASF99:
 8237 0220 756E7573 		.ascii	"unused_bytes\000"
 8237      65645F62 
 8237      79746573 
 8237      00
 8238              	.LASF109:
 8239 022d 61636365 		.ascii	"accel_value\000"
 8239      6C5F7661 
 8239      6C756500 
 8240              	.LASF170:
 8241 0239 6175785F 		.ascii	"aux_encoder\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 189


 8241      656E636F 
 8241      64657200 
 8242              	.LASF17:
 8243 0245 666C6F61 		.ascii	"float32\000"
 8243      74333200 
 8244              	.LASF167:
 8245 024d 656E636F 		.ascii	"encoder_reading_SPI\000"
 8245      6465725F 
 8245      72656164 
 8245      696E675F 
 8245      53504900 
 8246              	.LASF179:
 8247 0261 6572726F 		.ascii	"error\000"
 8247      7200
 8248              	.LASF49:
 8249 0267 656D675F 		.ascii	"emg_counter\000"
 8249      636F756E 
 8249      74657200 
 8250              	.LASF132:
 8251 0273 57524954 		.ascii	"WRITE_END\000"
 8251      455F454E 
 8251      4400
 8252              	.LASF184:
 8253 027d 706F735F 		.ascii	"pos_reconstruct\000"
 8253      7265636F 
 8253      6E737472 
 8253      75637400 
 8254              	.LASF195:
 8255 028d 70776D5F 		.ascii	"pwm_limit_search\000"
 8255      6C696D69 
 8255      745F7365 
 8255      61726368 
 8255      00
 8256              	.LASF269:
 8257 029e 433A5C55 		.ascii	"C:\\Users\\MattiaCP\\Documents\\GITHUB\\SoftHand-PR"
 8257      73657273 
 8257      5C4D6174 
 8257      74696143 
 8257      505C446F 
 8258 02cc 4F2D5053 		.ascii	"O-PSoC5\\firmware.cydsn\000"
 8258      6F43355C 
 8258      6669726D 
 8258      77617265 
 8258      2E637964 
 8259              	.LASF0:
 8260 02e3 7369676E 		.ascii	"signed char\000"
 8260      65642063 
 8260      68617200 
 8261              	.LASF117:
 8262 02ef 73745F63 		.ascii	"st_calib\000"
 8262      616C6962 
 8262      00
 8263              	.LASF155:
 8264 02f8 6572725F 		.ascii	"err_emg_1\000"
 8264      656D675F 
 8264      3100
 8265              	.LASF156:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 190


 8266 0302 6572725F 		.ascii	"err_emg_2\000"
 8266      656D675F 
 8266      3200
 8267              	.LASF95:
 8268 030c 73776974 		.ascii	"switch_emg\000"
 8268      63685F65 
 8268      6D6700
 8269              	.LASF246:
 8270 0317 656D675F 		.ascii	"emg_2_status\000"
 8270      325F7374 
 8270      61747573 
 8270      00
 8271              	.LASF256:
 8272 0324 4144435F 		.ascii	"ADC_buf\000"
 8272      62756600 
 8273              	.LASF249:
 8274 032c 696E7465 		.ascii	"interrupt_flag\000"
 8274      72727570 
 8274      745F666C 
 8274      616700
 8275              	.LASF209:
 8276 033b 73746570 		.ascii	"step\000"
 8276      00
 8277              	.LASF158:
 8278 0340 63757272 		.ascii	"curr_error_sum\000"
 8278      5F657272 
 8278      6F725F73 
 8278      756D00
 8279              	.LASF1:
 8280 034f 756E7369 		.ascii	"unsigned char\000"
 8280      676E6564 
 8280      20636861 
 8280      7200
 8281              	.LASF135:
 8282 035d 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 8282      52533438 
 8282      355F5258 
 8282      5F457849 
 8282      6E746572 
 8283              	.LASF215:
 8284 0376 726F775F 		.ascii	"row_start\000"
 8284      73746172 
 8284      7400
 8285              	.LASF253:
 8286 0380 666F7263 		.ascii	"forced_open\000"
 8286      65645F6F 
 8286      70656E00 
 8287              	.LASF174:
 8288 038c 73706565 		.ascii	"speed_encoder\000"
 8288      645F656E 
 8288      636F6465 
 8288      7200
 8289              	.LASF223:
 8290 039a 675F7265 		.ascii	"g_refNew\000"
 8290      664E6577 
 8290      00
 8291              	.LASF208:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 191


 8292 03a3 63757272 		.ascii	"curr_off\000"
 8292      5F6F6666 
 8292      00
 8293              	.LASF96:
 8294 03ac 72696768 		.ascii	"right_left\000"
 8294      745F6C65 
 8294      667400
 8295              	.LASF181:
 8296 03b7 73616665 		.ascii	"safe_startup_motor_activation\000"
 8296      5F737461 
 8296      72747570 
 8296      5F6D6F74 
 8296      6F725F61 
 8297              	.LASF245:
 8298 03d5 656D675F 		.ascii	"emg_1_status\000"
 8298      315F7374 
 8298      61747573 
 8298      00
 8299              	.LASF108:
 8300 03e2 666C6167 		.ascii	"flags\000"
 8300      7300
 8301              	.LASF154:
 8302 03e8 68616E64 		.ascii	"handle_value\000"
 8302      6C655F76 
 8302      616C7565 
 8302      00
 8303              	.LASF20:
 8304 03f5 63686172 		.ascii	"char\000"
 8304      00
 8305              	.LASF77:
 8306 03fa 6D61785F 		.ascii	"max_step_pos\000"
 8306      73746570 
 8306      5F706F73 
 8306      00
 8307              	.LASF258:
 8308 0407 70776D5F 		.ascii	"pwm_sign\000"
 8308      7369676E 
 8308      00
 8309              	.LASF166:
 8310 0410 6D6F746F 		.ascii	"motor_control_generic\000"
 8310      725F636F 
 8310      6E74726F 
 8310      6C5F6765 
 8310      6E657269 
 8311              	.LASF234:
 8312 0426 66696C74 		.ascii	"filt_vel\000"
 8312      5F76656C 
 8312      00
 8313              	.LASF61:
 8314 042f 6B5F645F 		.ascii	"k_d_c\000"
 8314      6300
 8315              	.LASF72:
 8316 0435 6D5F6D75 		.ascii	"m_mult\000"
 8316      6C7400
 8317              	.LASF60:
 8318 043c 6B5F695F 		.ascii	"k_i_c\000"
 8318      6300
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 192


 8319              	.LASF162:
 8320 0442 6D6F746F 		.ascii	"motor_dir\000"
 8320      725F6469 
 8320      7200
 8321              	.LASF205:
 8322 044c 62696E5F 		.ascii	"bin_st\000"
 8322      737400
 8323              	.LASF75:
 8324 0453 706F735F 		.ascii	"pos_lim_sup\000"
 8324      6C696D5F 
 8324      73757000 
 8325              	.LASF115:
 8326 045f 6F6C645F 		.ascii	"old_value\000"
 8326      76616C75 
 8326      6500
 8327              	.LASF82:
 8328 0469 656D675F 		.ascii	"emg_speed\000"
 8328      73706565 
 8328      6400
 8329              	.LASF93:
 8330 0473 72657374 		.ascii	"rest_vel\000"
 8330      5F76656C 
 8330      00
 8331              	.LASF122:
 8332 047c 4E4F524D 		.ascii	"NORMAL\000"
 8332      414C00
 8333              	.LASF149:
 8334 0483 6D6F746F 		.ascii	"motor_control_SH\000"
 8334      725F636F 
 8334      6E74726F 
 8334      6C5F5348 
 8334      00
 8335              	.LASF264:
 8336 0494 7046696C 		.ascii	"pFile\000"
 8336      6500
 8337              	.LASF157:
 8338 049a 706F735F 		.ascii	"pos_error_sum\000"
 8338      6572726F 
 8338      725F7375 
 8338      6D00
 8339              	.LASF103:
 8340 04a8 4144435F 		.ascii	"ADC_conf\000"
 8340      636F6E66 
 8340      00
 8341              	.LASF242:
 8342 04b1 6465765F 		.ascii	"dev_tension_f\000"
 8342      74656E73 
 8342      696F6E5F 
 8342      6600
 8343              	.LASF63:
 8344 04bf 6B5F695F 		.ascii	"k_i_dl\000"
 8344      646C00
 8345              	.LASF102:
 8346 04c6 456E636F 		.ascii	"Encoder_conf\000"
 8346      6465725F 
 8346      636F6E66 
 8346      00
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 193


 8347              	.LASF45:
 8348 04d3 62756666 		.ascii	"buffer\000"
 8348      657200
 8349              	.LASF65:
 8350 04da 6B5F705F 		.ascii	"k_p_c_dl\000"
 8350      635F646C 
 8350      00
 8351              	.LASF143:
 8352 04e3 72785F64 		.ascii	"rx_data_type\000"
 8352      6174615F 
 8352      74797065 
 8352      00
 8353              	.LASF266:
 8354 04f0 675F696D 		.ascii	"g_imuNew\000"
 8354      754E6577 
 8354      00
 8355              	.LASF120:
 8356 04f9 73706565 		.ascii	"speed\000"
 8356      6400
 8357              	.LASF163:
 8358 04ff 706F7369 		.ascii	"position_counter\000"
 8358      74696F6E 
 8358      5F636F75 
 8358      6E746572 
 8358      00
 8359              	.LASF211:
 8360 0510 74696D65 		.ascii	"timer_value_e\000"
 8360      725F7661 
 8360      6C75655F 
 8360      6500
 8361              	.LASF138:
 8362 051e 64617461 		.ascii	"data_packet_index\000"
 8362      5F706163 
 8362      6B65745F 
 8362      696E6465 
 8362      7800
 8363              	.LASF140:
 8364 0530 64617461 		.ascii	"data_packet_buffer\000"
 8364      5F706163 
 8364      6B65745F 
 8364      62756666 
 8364      657200
 8365              	.LASF244:
 8366 0543 6379636C 		.ascii	"cycles_status\000"
 8366      65735F73 
 8366      74617475 
 8366      7300
 8367              	.LASF145:
 8368 0551 636F756E 		.ascii	"counter_calibration\000"
 8368      7465725F 
 8368      63616C69 
 8368      62726174 
 8368      696F6E00 
 8369              	.LASF225:
 8370 0565 675F6D65 		.ascii	"g_meas\000"
 8370      617300
 8371              	.LASF210:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 194


 8372 056c 74696D65 		.ascii	"timer_value_s\000"
 8372      725F7661 
 8372      6C75655F 
 8372      7300
 8373              	.LASF262:
 8374 057a 456E636F 		.ascii	"Encoder_Check\000"
 8374      6465725F 
 8374      43686563 
 8374      6B00
 8375              	.LASF178:
 8376 0588 636F6D70 		.ascii	"comp_value_encoder\000"
 8376      5F76616C 
 8376      75655F65 
 8376      6E636F64 
 8376      657200
 8377              	.LASF259:
 8378 059b 64617461 		.ascii	"data_encoder_raw\000"
 8378      5F656E63 
 8378      6F646572 
 8378      5F726177 
 8378      00
 8379              	.LASF222:
 8380 05ac 675F7265 		.ascii	"g_ref\000"
 8380      6600
 8381              	.LASF25:
 8382 05b2 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 8382      545F4D4F 
 8382      44455F45 
 8382      58544552 
 8382      4E414C00 
 8383              	.LASF168:
 8384 05c6 696E6465 		.ascii	"index\000"
 8384      7800
 8385              	.LASF94:
 8386 05cc 72657374 		.ascii	"rest_position_flag\000"
 8386      5F706F73 
 8386      6974696F 
 8386      6E5F666C 
 8386      616700
 8387              	.LASF265:
 8388 05df 675F696D 		.ascii	"g_imu\000"
 8388      7500
 8389              	.LASF66:
 8390 05e5 6B5F695F 		.ascii	"k_i_c_dl\000"
 8390      635F646C 
 8390      00
 8391              	.LASF144:
 8392 05ee 7061636B 		.ascii	"package_count\000"
 8392      6167655F 
 8392      636F756E 
 8392      7400
 8393              	.LASF36:
 8394 05fc 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 8394      5F414E44 
 8394      5F504F53 
 8394      5F434F4E 
 8394      54524F4C 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 195


 8395              	.LASF118:
 8396 0611 656E6162 		.ascii	"enabled\000"
 8396      6C656400 
 8397              	.LASF5:
 8398 0619 6C6F6E67 		.ascii	"long unsigned int\000"
 8398      20756E73 
 8398      69676E65 
 8398      6420696E 
 8398      7400
 8399              	.LASF54:
 8400 062b 746F7461 		.ascii	"total_time_on\000"
 8400      6C5F7469 
 8400      6D655F6F 
 8400      6E00
 8401              	.LASF130:
 8402 0639 57524954 		.ascii	"WRITE_CYCLES\000"
 8402      455F4359 
 8402      434C4553 
 8402      00
 8403              	.LASF213:
 8404 0646 73746174 		.ascii	"status\000"
 8404      757300
 8405              	.LASF55:
 8406 064d 746F7461 		.ascii	"total_time_rest\000"
 8406      6C5F7469 
 8406      6D655F72 
 8406      65737400 
 8407              	.LASF68:
 8408 065d 61637469 		.ascii	"activ\000"
 8408      7600
 8409              	.LASF71:
 8410 0663 6D5F6F66 		.ascii	"m_off\000"
 8410      6600
 8411              	.LASF247:
 8412 0669 72657365 		.ascii	"reset_last_value_flag\000"
 8412      745F6C61 
 8412      73745F76 
 8412      616C7565 
 8412      5F666C61 
 8413              	.LASF112:
 8414 067f 71756174 		.ascii	"quat_value\000"
 8414      5F76616C 
 8414      756500
 8415              	.LASF91:
 8416 068a 72657374 		.ascii	"rest_pos\000"
 8416      5F706F73 
 8416      00
 8417              	.LASF38:
 8418 0693 63757272 		.ascii	"curr\000"
 8418      00
 8419              	.LASF131:
 8420 0698 57414954 		.ascii	"WAIT_QUERY\000"
 8420      5F515545 
 8420      525900
 8421              	.LASF69:
 8422 06a3 696E7075 		.ascii	"input_mode\000"
 8422      745F6D6F 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 196


 8422      646500
 8423              	.LASF34:
 8424 06ae 434F4E54 		.ascii	"CONTROL_PWM\000"
 8424      524F4C5F 
 8424      50574D00 
 8425              	.LASF198:
 8426 06ba 6379636C 		.ascii	"cycles_counter_update\000"
 8426      65735F63 
 8426      6F756E74 
 8426      65725F75 
 8426      70646174 
 8427              	.LASF48:
 8428 06d0 73745F6D 		.ascii	"st_mem\000"
 8428      656D00
 8429              	.LASF267:
 8430 06d7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8430      43313120 
 8430      352E342E 
 8430      31203230 
 8430      31363036 
 8431 070a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 8431      20726576 
 8431      6973696F 
 8431      6E203233 
 8431      37373135 
 8432 073d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8432      66756E63 
 8432      74696F6E 
 8432      2D736563 
 8432      74696F6E 
 8433              	.LASF40:
 8434 0765 73745F72 		.ascii	"st_ref\000"
 8434      656600
 8435              	.LASF237:
 8436 076c 74696D65 		.ascii	"timer_value0\000"
 8436      725F7661 
 8436      6C756530 
 8436      00
 8437              	.LASF185:
 8438 0779 765F7661 		.ascii	"v_value\000"
 8438      6C756500 
 8439              	.LASF230:
 8440 0781 63616C69 		.ascii	"calib\000"
 8440      6200
 8441              	.LASF6:
 8442 0787 6C6F6E67 		.ascii	"long long int\000"
 8442      206C6F6E 
 8442      6720696E 
 8442      7400
 8443              	.LASF32:
 8444 0795 53485F63 		.ascii	"SH_control_mode\000"
 8444      6F6E7472 
 8444      6F6C5F6D 
 8444      6F646500 
 8445              	.LASF89:
 8446 07a5 6D61696E 		.ascii	"maint_month\000"
 8446      745F6D6F 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 197


 8446      6E746800 
 8447              	.LASF255:
 8448 07b1 6368616E 		.ascii	"change_ext_ref_flag\000"
 8448      67655F65 
 8448      78745F72 
 8448      65665F66 
 8448      6C616700 
 8449              	.LASF19:
 8450 07c5 646F7562 		.ascii	"double\000"
 8450      6C6500
 8451              	.LASF232:
 8452 07cc 66696C74 		.ascii	"filt_curr_diff\000"
 8452      5F637572 
 8452      725F6469 
 8452      666600
 8453              	.LASF148:
 8454 07db 696E7465 		.ascii	"interrupt_manager\000"
 8454      72727570 
 8454      745F6D61 
 8454      6E616765 
 8454      7200
 8455              	.LASF121:
 8456 07ed 72657065 		.ascii	"repetitions\000"
 8456      74697469 
 8456      6F6E7300 
 8457              	.LASF76:
 8458 07f9 6D61785F 		.ascii	"max_step_neg\000"
 8458      73746570 
 8458      5F6E6567 
 8458      00
 8459              	.LASF183:
 8460 0806 636F756E 		.ascii	"count_startup_motor\000"
 8460      745F7374 
 8460      61727475 
 8460      705F6D6F 
 8460      746F7200 
 8461              	.LASF126:
 8462 081a 57414954 		.ascii	"WAIT\000"
 8462      00
 8463              	.LASF18:
 8464 081f 666C6F61 		.ascii	"float\000"
 8464      7400
 8465              	.LASF101:
 8466 0825 494D555F 		.ascii	"IMU_conf\000"
 8466      636F6E66 
 8466      00
 8467              	.LASF193:
 8468 082e 636F756E 		.ascii	"count\000"
 8468      7400
 8469              	.LASF219:
 8470 0834 6D5F6164 		.ascii	"m_addr\000"
 8470      647200
 8471              	.LASF229:
 8472 083b 635F6D65 		.ascii	"c_mem\000"
 8472      6D00
 8473              	.LASF8:
 8474 0841 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 198


 8474      676E6564 
 8474      20696E74 
 8474      00
 8475              	.LASF204:
 8476 084e 6D61785F 		.ascii	"max_pos\000"
 8476      706F7300 
 8477              	.LASF263:
 8478 0856 72657374 		.ascii	"rest_pos_curr_ref\000"
 8478      5F706F73 
 8478      5F637572 
 8478      725F7265 
 8478      6600
 8479              	.LASF58:
 8480 0868 666C6167 		.ascii	"flag\000"
 8480      00
 8481              	.LASF70:
 8482 086d 636F6E74 		.ascii	"control_mode\000"
 8482      726F6C5F 
 8482      6D6F6465 
 8482      00
 8483              	.LASF21:
 8484 087a 63797374 		.ascii	"cystatus\000"
 8484      61747573 
 8484      00
 8485              	.LASF26:
 8486 0883 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 8486      545F4D4F 
 8486      44455F45 
 8486      4E434F44 
 8486      45523300 
 8487              	.LASF164:
 8488 0897 63757272 		.ascii	"current_emg\000"
 8488      656E745F 
 8488      656D6700 
 8489              	.LASF141:
 8490 08a3 72785F71 		.ascii	"rx_queue\000"
 8490      75657565 
 8490      00
 8491              	.LASF43:
 8492 08ac 6164645F 		.ascii	"add_emg\000"
 8492      656D6700 
 8493              	.LASF153:
 8494 08b4 695F7265 		.ascii	"i_ref\000"
 8494      6600
 8495              	.LASF79:
 8496 08ba 656D675F 		.ascii	"emg_threshold\000"
 8496      74687265 
 8496      73686F6C 
 8496      6400
 8497              	.LASF212:
 8498 08c8 73617665 		.ascii	"save_cycles_eeprom\000"
 8498      5F637963 
 8498      6C65735F 
 8498      65657072 
 8498      6F6D00
 8499              	.LASF51:
 8500 08db 63757272 		.ascii	"current_hist\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 199


 8500      656E745F 
 8500      68697374 
 8500      00
 8501              	.LASF35:
 8502 08e8 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 8502      524F4C5F 
 8502      43555252 
 8502      454E5400 
 8503              	.LASF23:
 8504 08f8 6C6F6E67 		.ascii	"long double\000"
 8504      20646F75 
 8504      626C6500 
 8505              	.LASF124:
 8506 0904 44495343 		.ascii	"DISCARD\000"
 8506      41524400 
 8507              	.LASF159:
 8508 090c 70726576 		.ascii	"prev_pos_err\000"
 8508      5F706F73 
 8508      5F657272 
 8508      00
 8509              	.LASF254:
 8510 0919 62617474 		.ascii	"battery_low_SoC\000"
 8510      6572795F 
 8510      6C6F775F 
 8510      536F4300 
 8511              	.LASF233:
 8512 0929 66696C74 		.ascii	"filt_i\000"
 8512      5F6900
 8513              	.LASF84:
 8514 0930 6D6F746F 		.ascii	"motor_handle_ratio\000"
 8514      725F6861 
 8514      6E646C65 
 8514      5F726174 
 8514      696F00
 8515              	.LASF231:
 8516 0943 66696C74 		.ascii	"filt_v\000"
 8516      5F7600
 8517              	.LASF252:
 8518 094a 72657374 		.ascii	"rest_enabled\000"
 8518      5F656E61 
 8518      626C6564 
 8518      00
 8519              	.LASF224:
 8520 0957 675F7265 		.ascii	"g_refOld\000"
 8520      664F6C64 
 8520      00
 8521              	.LASF110:
 8522 0960 6779726F 		.ascii	"gyro_value\000"
 8522      5F76616C 
 8522      756500
 8523              	.LASF56:
 8524 096b 63757272 		.ascii	"curr_time\000"
 8524      5F74696D 
 8524      6500
 8525              	.LASF83:
 8526 0975 646F7562 		.ascii	"double_encoder_on_off\000"
 8526      6C655F65 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 200


 8526      6E636F64 
 8526      65725F6F 
 8526      6E5F6F66 
 8527              	.LASF90:
 8528 098b 6D61696E 		.ascii	"maint_year\000"
 8528      745F7965 
 8528      617200
 8529              	.LASF177:
 8530 0996 6C617374 		.ascii	"last_value_encoder\000"
 8530      5F76616C 
 8530      75655F65 
 8530      6E636F64 
 8530      657200
 8531              	.LASF146:
 8532 09a9 636F756E 		.ascii	"counter_tension_func\000"
 8532      7465725F 
 8532      74656E73 
 8532      696F6E5F 
 8532      66756E63 
 8533              	.LASF238:
 8534 09be 6379636C 		.ascii	"cycle_time\000"
 8534      655F7469 
 8534      6D6500
 8535              	.LASF7:
 8536 09c9 6C6F6E67 		.ascii	"long long unsigned int\000"
 8536      206C6F6E 
 8536      6720756E 
 8536      7369676E 
 8536      65642069 
 8537              	.LASF88:
 8538 09e0 6D61696E 		.ascii	"maint_day\000"
 8538      745F6461 
 8538      7900
 8539              	.LASF46:
 8540 09ea 6C656E67 		.ascii	"length\000"
 8540      746800
 8541              	.LASF197:
 8542 09f1 6D696E5F 		.ascii	"min_tension\000"
 8542      74656E73 
 8542      696F6E00 
 8543              	.LASF111:
 8544 09fd 6D61675F 		.ascii	"mag_value\000"
 8544      76616C75 
 8544      6500
 8545              	.LASF39:
 8546 0a07 6F6E6F66 		.ascii	"onoff\000"
 8546      6600
 8547              	.LASF172:
 8548 0a0d 746D705F 		.ascii	"tmp_value_encoder_32\000"
 8548      76616C75 
 8548      655F656E 
 8548      636F6465 
 8548      725F3332 
 8549              	.LASF160:
 8550 0a22 70726576 		.ascii	"prev_curr_err\000"
 8550      5F637572 
 8550      725F6572 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 201


 8550      7200
 8551              	.LASF139:
 8552 0a30 64617461 		.ascii	"data_packet_length\000"
 8552      5F706163 
 8552      6B65745F 
 8552      6C656E67 
 8552      746800
 8553              	.LASF59:
 8554 0a43 6B5F705F 		.ascii	"k_p_c\000"
 8554      6300
 8555              	.LASF239:
 8556 0a49 6465765F 		.ascii	"dev_tension\000"
 8556      74656E73 
 8556      696F6E00 
 8557              	.LASF106:
 8558 0a55 6D6F746F 		.ascii	"motor_driver_type\000"
 8558      725F6472 
 8558      69766572 
 8558      5F747970 
 8558      6500
 8559              	.LASF127:
 8560 0a67 57414954 		.ascii	"WAIT_EoC\000"
 8560      5F456F43 
 8560      00
 8561              	.LASF22:
 8562 0a70 72656738 		.ascii	"reg8\000"
 8562      00
 8563              	.LASF189:
 8564 0a75 695F6175 		.ascii	"i_aux\000"
 8564      7800
 8565              	.LASF214:
 8566 0a7b 726F775F 		.ascii	"row_number\000"
 8566      6E756D62 
 8566      657200
 8567              	.LASF270:
 8568 0a86 6F766572 		.ascii	"overcurrent_control\000"
 8568      63757272 
 8568      656E745F 
 8568      636F6E74 
 8568      726F6C00 
 8569              	.LASF207:
 8570 0a9a 63757272 		.ascii	"curr_pos\000"
 8570      5F706F73 
 8570      00
 8571              	.LASF123:
 8572 0aa3 52455345 		.ascii	"RESET\000"
 8572      5400
 8573              	.LASF188:
 8574 0aa9 616E616C 		.ascii	"analog_read_end\000"
 8574      6F675F72 
 8574      6561645F 
 8574      656E6400 
 8575              	.LASF260:
 8576 0ab9 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 8576      636F6465 
 8576      725F4C69 
 8576      6E655F43 
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 202


 8576      6F6E6E65 
 8577              	.LASF200:
 8578 0ad2 656D675F 		.ascii	"emg_cycle_status\000"
 8578      6379636C 
 8578      655F7374 
 8578      61747573 
 8578      00
 8579              	.LASF80:
 8580 0ae3 656D675F 		.ascii	"emg_calibration_flag\000"
 8580      63616C69 
 8580      62726174 
 8580      696F6E5F 
 8580      666C6167 
 8581              	.LASF41:
 8582 0af8 73745F6D 		.ascii	"st_meas\000"
 8582      65617300 
 8583              	.LASF216:
 8584 0b00 61646472 		.ascii	"addr_start\000"
 8584      5F737461 
 8584      727400
 8585              	.LASF220:
 8586 0b0b 70776D5F 		.ascii	"pwm_preload_values\000"
 8586      7072656C 
 8586      6F61645F 
 8586      76616C75 
 8586      657300
 8587              	.LASF134:
 8588 0b1e 636F756E 		.ascii	"counter_status\000"
 8588      7465725F 
 8588      73746174 
 8588      757300
 8589              	.LASF228:
 8590 0b2d 675F6D65 		.ascii	"g_mem\000"
 8590      6D00
 8591              	.LASF190:
 8592 0b33 656D675F 		.ascii	"emg_counter_1\000"
 8592      636F756E 
 8592      7465725F 
 8592      3100
 8593              	.LASF191:
 8594 0b41 656D675F 		.ascii	"emg_counter_2\000"
 8594      636F756E 
 8594      7465725F 
 8594      3200
 8595              	.LASF180:
 8596 0b4f 6F6E6C79 		.ascii	"only_first_time\000"
 8596      5F666972 
 8596      73745F74 
 8596      696D6500 
 8597              	.LASF11:
 8598 0b5f 75696E74 		.ascii	"uint8\000"
 8598      3800
 8599              	.LASF175:
 8600 0b65 76616C75 		.ascii	"value_diff\000"
 8600      655F6469 
 8600      666600
 8601              	.LASF2:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 203


 8602 0b70 73686F72 		.ascii	"short int\000"
 8602      7420696E 
 8602      7400
 8603              	.LASF64:
 8604 0b7a 6B5F645F 		.ascii	"k_d_dl\000"
 8604      646C00
 8605              	.LASF173:
 8606 0b81 76616C75 		.ascii	"value_encoder\000"
 8606      655F656E 
 8606      636F6465 
 8606      7200
 8607              	.LASF241:
 8608 0b8f 6465765F 		.ascii	"dev_pwm_sat\000"
 8608      70776D5F 
 8608      73617400 
 8609              	.LASF165:
 8610 0b9b 66756E63 		.ascii	"function_scheduler\000"
 8610      74696F6E 
 8610      5F736368 
 8610      6564756C 
 8610      657200
 8611              	.LASF161:
 8612 0bae 70726576 		.ascii	"prev_pwm\000"
 8612      5F70776D 
 8612      00
 8613              	.LASF221:
 8614 0bb7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8614      52784275 
 8614      66666572 
 8614      00
 8615              	.LASF243:
 8616 0bc4 706F775F 		.ascii	"pow_tension\000"
 8616      74656E73 
 8616      696F6E00 
 8617              	.LASF15:
 8618 0bd0 696E7431 		.ascii	"int16\000"
 8618      3600
 8619              	.LASF98:
 8620 0bd6 72656164 		.ascii	"read_exp_port_flag\000"
 8620      5F657870 
 8620      5F706F72 
 8620      745F666C 
 8620      616700
 8621              	.LASF85:
 8622 0be9 61637469 		.ascii	"activate_pwm_rescaling\000"
 8622      76617465 
 8622      5F70776D 
 8622      5F726573 
 8622      63616C69 
 8623              	.LASF62:
 8624 0c00 6B5F705F 		.ascii	"k_p_dl\000"
 8624      646C00
 8625              	.LASF42:
 8626 0c07 65737469 		.ascii	"estim_curr\000"
 8626      6D5F6375 
 8626      727200
 8627              	.LASF240:
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 204


 8628 0c12 6465765F 		.ascii	"dev_pwm_limit\000"
 8628      70776D5F 
 8628      6C696D69 
 8628      7400
 8629              	.LASF152:
 8630 0c20 63757272 		.ascii	"curr_error\000"
 8630      5F657272 
 8630      6F7200
 8631              	.LASF261:
 8632 0c2b 456E636F 		.ascii	"Encoder_Value\000"
 8632      6465725F 
 8632      56616C75 
 8632      6500
 8633              	.LASF201:
 8634 0c39 72657374 		.ascii	"rest_cycle_status\000"
 8634      5F637963 
 8634      6C655F73 
 8634      74617475 
 8634      7300
 8635              	.LASF171:
 8636 0c4b 746D705F 		.ascii	"tmp_value_encoder\000"
 8636      76616C75 
 8636      655F656E 
 8636      636F6465 
 8636      7200
 8637              	.LASF136:
 8638 0c5d 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 8638      4359434C 
 8638      45535F48 
 8638      616E646C 
 8638      657200
 8639              	.LASF104:
 8640 0c70 72656164 		.ascii	"read_emg_sensors_port_flag\000"
 8640      5F656D67 
 8640      5F73656E 
 8640      736F7273 
 8640      5F706F72 
 8641              	.LASF87:
 8642 0c8b 62617564 		.ascii	"baud_rate\000"
 8642      5F726174 
 8642      6500
 8643              	.LASF100:
 8644 0c95 5350495F 		.ascii	"SPI_read_delay\000"
 8644      72656164 
 8644      5F64656C 
 8644      617900
 8645              	.LASF3:
 8646 0ca4 73686F72 		.ascii	"short unsigned int\000"
 8646      7420756E 
 8646      7369676E 
 8646      65642069 
 8646      6E7400
 8647              	.LASF107:
 8648 0cb7 73745F69 		.ascii	"st_imu\000"
 8648      6D7500
 8649              	.LASF268:
 8650 0cbe 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 205


 8650      72635C69 
 8650      6E746572 
 8650      72757074 
 8650      696F6E73 
 8651              	.LASF16:
 8652 0cd5 696E7433 		.ascii	"int32\000"
 8652      3200
 8653              	.LASF257:
 8654 0cdb 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 8654      4F465F41 
 8654      4E414C4F 
 8654      475F494E 
 8654      50555453 
 8655              	.LASF37:
 8656 0cf0 46535F46 		.ascii	"FS_FILE\000"
 8656      494C4500 
 8657              	.LASF73:
 8658 0cf8 706F735F 		.ascii	"pos_lim_flag\000"
 8658      6C696D5F 
 8658      666C6167 
 8658      00
 8659              	.LASF226:
 8660 0d05 675F6D65 		.ascii	"g_measOld\000"
 8660      61734F6C 
 8660      6400
 8661              	.LASF218:
 8662 0d0f 726F775F 		.ascii	"row_end\000"
 8662      656E6400 
 8663              	.LASF33:
 8664 0d17 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 8664      524F4C5F 
 8664      414E474C 
 8664      4500
 8665              	.LASF9:
 8666 0d25 5F5F696E 		.ascii	"__int32_t\000"
 8666      7433325F 
 8666      7400
 8667              	.LASF53:
 8668 0d2f 77697265 		.ascii	"wire_disp\000"
 8668      5F646973 
 8668      7000
 8669              	.LASF251:
 8670 0d39 63616E5F 		.ascii	"can_write\000"
 8670      77726974 
 8670      6500
 8671              	.LASF81:
 8672 0d43 656D675F 		.ascii	"emg_max_value\000"
 8672      6D61785F 
 8672      76616C75 
 8672      6500
 8673              	.LASF78:
 8674 0d51 63757272 		.ascii	"current_limit\000"
 8674      656E745F 
 8674      6C696D69 
 8674      7400
 8675              	.LASF31:
 8676 0d5f 53485F69 		.ascii	"SH_input_mode\000"
ARM GAS  C:\Users\MattiaCP\AppData\Local\Temp\cceJM7HG.s 			page 206


 8676      6E707574 
 8676      5F6D6F64 
 8676      6500
 8677              	.LASF133:
 8678 0d6d 4E4F4E45 		.ascii	"NONE\000"
 8678      00
 8679              	.LASF12:
 8680 0d72 75696E74 		.ascii	"uint16\000"
 8680      313600
 8681              	.LASF92:
 8682 0d79 72657374 		.ascii	"rest_delay\000"
 8682      5F64656C 
 8682      617900
 8683              	.LASF114:
 8684 0d84 73745F66 		.ascii	"st_filter\000"
 8684      696C7465 
 8684      7200
 8685              	.LASF186:
 8686 0d8e 76765F76 		.ascii	"vv_value\000"
 8686      616C7565 
 8686      00
 8687              	.LASF67:
 8688 0d97 6B5F645F 		.ascii	"k_d_c_dl\000"
 8688      635F646C 
 8688      00
 8689              	.LASF119:
 8690 0da0 64697265 		.ascii	"direction\000"
 8690      6374696F 
 8690      6E00
 8691              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
