ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e E1E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 754B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2D980 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 E3000000 		.word	.L12+1
 179 0034 31010000 		.word	.L13+1
 180 0038 9B010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 6D4B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 6C4B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 6B4B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 6A4B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 694A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 684B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 664B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 644B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 624B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 614B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 5E4B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 8


 225              		.loc 1 175 0
 226 007c 5D4B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F0A780 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 5B4B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F0A280 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 584B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09D80 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 98E0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 249              		.loc 1 186 0
 250 00a2 554B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 0DD0     		beq	.L17
 255              		.loc 1 186 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 0AD0     		beq	.L17
 259              		.loc 1 186 0 discriminator 2
 260 00b4 504B     		ldr	r3, .L31+8
 261 00b6 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 262 00ba 002B     		cmp	r3, #0
 263 00bc 08D0     		beq	.L18
 264              		.loc 1 186 0 discriminator 3
 265 00be 4E4B     		ldr	r3, .L31+8
 266 00c0 93F8C132 		ldrb	r3, [r3, #705]	@ zero_extendqisi2
 267 00c4 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 268 00c6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 9


 269 00c8 02D1     		bne	.L18
 270              	.L17:
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 271              		.loc 1 187 0 is_stmt 1
 272 00ca 0023     		movs	r3, #0
 273 00cc FB71     		strb	r3, [r7, #7]
 274 00ce 01E0     		b	.L19
 275              	.L18:
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 276              		.loc 1 189 0
 277 00d0 0123     		movs	r3, #1
 278 00d2 FB71     		strb	r3, [r7, #7]
 279              	.L19:
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 280              		.loc 1 196 0
 281 00d4 494B     		ldr	r3, .L31+12
 282 00d6 0022     		movs	r2, #0
 283 00d8 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 284              		.loc 1 197 0
 285 00da 454B     		ldr	r3, .L31
 286 00dc 0222     		movs	r2, #2
 287 00de 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 288              		.loc 1 198 0
 289 00e0 78E0     		b	.L8
 290              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 291              		.loc 1 203 0
 292 00e2 464A     		ldr	r2, .L31+12
 293 00e4 7B79     		ldrb	r3, [r7, #5]
 294 00e6 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 295              		.loc 1 205 0
 296 00e8 444B     		ldr	r3, .L31+12
 297 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 00ec 012B     		cmp	r3, #1
 299 00ee 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 300              		.loc 1 206 0
 301 00f0 424B     		ldr	r3, .L31+12
 302 00f2 0022     		movs	r2, #0
 303 00f4 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 304              		.loc 1 207 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 10


 305 00f6 3E4B     		ldr	r3, .L31
 306 00f8 0022     		movs	r2, #0
 307 00fa 1A70     		strb	r2, [r3]
 308 00fc 6AE0     		b	.L8
 309              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 310              		.loc 1 208 0
 311 00fe 3F4B     		ldr	r3, .L31+12
 312 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0102 802B     		cmp	r3, #128
 314 0104 06D9     		bls	.L22
 209:..\src/interruptions.c ****                     data_packet_length = 0;
 315              		.loc 1 209 0
 316 0106 3D4B     		ldr	r3, .L31+12
 317 0108 0022     		movs	r2, #0
 318 010a 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 319              		.loc 1 210 0
 320 010c 384B     		ldr	r3, .L31
 321 010e 0022     		movs	r2, #0
 322 0110 1A70     		strb	r2, [r3]
 323 0112 5FE0     		b	.L8
 324              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 325              		.loc 1 212 0
 326 0114 3A4B     		ldr	r3, .L31+16
 327 0116 0022     		movs	r2, #0
 328 0118 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 329              		.loc 1 214 0
 330 011a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 331 011c 002B     		cmp	r3, #0
 332 011e 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 333              		.loc 1 215 0
 334 0120 334B     		ldr	r3, .L31
 335 0122 0322     		movs	r2, #3
 336 0124 1A70     		strb	r2, [r3]
 337 0126 55E0     		b	.L8
 338              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 339              		.loc 1 217 0
 340 0128 314B     		ldr	r3, .L31
 341 012a 0422     		movs	r2, #4
 342 012c 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 343              		.loc 1 219 0
 344 012e 51E0     		b	.L8
 345              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 11


 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 346              		.loc 1 224 0
 347 0130 334B     		ldr	r3, .L31+16
 348 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0134 1946     		mov	r1, r3
 350 0136 334A     		ldr	r2, .L31+20
 351 0138 7B79     		ldrb	r3, [r7, #5]
 352 013a 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 353              		.loc 1 225 0
 354 013c 304B     		ldr	r3, .L31+16
 355 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 0140 0133     		adds	r3, r3, #1
 357 0142 DAB2     		uxtb	r2, r3
 358 0144 2E4B     		ldr	r3, .L31+16
 359 0146 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 360              		.loc 1 228 0
 361 0148 2D4B     		ldr	r3, .L31+16
 362 014a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 363 014c 2B4B     		ldr	r3, .L31+12
 364 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 365 0150 9A42     		cmp	r2, r3
 366 0152 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 367              		.loc 1 230 0
 368 0154 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 369 0156 002B     		cmp	r3, #0
 370 0158 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 371              		.loc 1 232 0
 372 015a 284B     		ldr	r3, .L31+12
 373 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 015e 1A46     		mov	r2, r3
 375 0160 2849     		ldr	r1, .L31+20
 376 0162 2948     		ldr	r0, .L31+24
 377 0164 FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 378              		.loc 1 233 0
 379 0168 244B     		ldr	r3, .L31+12
 380 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 381 016c 1AB2     		sxth	r2, r3
 382 016e 264B     		ldr	r3, .L31+24
 383 0170 A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 384              		.loc 1 234 0
 385 0174 244B     		ldr	r3, .L31+24
 386 0176 0122     		movs	r2, #1
 387 0178 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 388              		.loc 1 235 0
 389 017c FFF7FEFF 		bl	commProcess
 390              	.L25:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 12


 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 391              		.loc 1 238 0
 392 0180 1F4B     		ldr	r3, .L31+16
 393 0182 0022     		movs	r2, #0
 394 0184 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 395              		.loc 1 239 0
 396 0186 1D4B     		ldr	r3, .L31+12
 397 0188 0022     		movs	r2, #0
 398 018a 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 399              		.loc 1 240 0
 400 018c 184B     		ldr	r3, .L31
 401 018e 0022     		movs	r2, #0
 402 0190 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 403              		.loc 1 241 0
 404 0192 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 405 0194 0133     		adds	r3, r3, #1
 406 0196 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 407              		.loc 1 244 0
 408 0198 1CE0     		b	.L8
 409              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 410              		.loc 1 248 0
 411 019a 184B     		ldr	r3, .L31+12
 412 019c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 019e 013B     		subs	r3, r3, #1
 414 01a0 DAB2     		uxtb	r2, r3
 415 01a2 164B     		ldr	r3, .L31+12
 416 01a4 1A70     		strb	r2, [r3]
 417 01a6 154B     		ldr	r3, .L31+12
 418 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 01aa 002B     		cmp	r3, #0
 420 01ac 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 421              		.loc 1 249 0
 422 01ae 144B     		ldr	r3, .L31+16
 423 01b0 0022     		movs	r2, #0
 424 01b2 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 425              		.loc 1 250 0
 426 01b4 114B     		ldr	r3, .L31+12
 427 01b6 0022     		movs	r2, #0
 428 01b8 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 429              		.loc 1 251 0
 430 01ba 0120     		movs	r0, #1
 431 01bc FFF7FEFF 		bl	RS485_CTS_Write
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 13


 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 432              		.loc 1 252 0
 433 01c0 0020     		movs	r0, #0
 434 01c2 FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 435              		.loc 1 253 0
 436 01c6 0A4B     		ldr	r3, .L31
 437 01c8 0022     		movs	r2, #0
 438 01ca 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 439              		.loc 1 254 0
 440 01cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 01ce 0133     		adds	r3, r3, #1
 442 01d0 BB71     		strb	r3, [r7, #6]
 443              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 444              		.loc 1 256 0
 445 01d2 00BF     		nop
 446              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 447              		.loc 1 154 0
 448 01d4 FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 449 01d8 0346     		mov	r3, r0
 450 01da 002B     		cmp	r3, #0
 451 01dc 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 452              		.loc 1 154 0 is_stmt 0 discriminator 1
 453 01de BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 454 01e0 632B     		cmp	r3, #99
 455 01e2 7FF615AF 		bls	.L28
 456              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 457              		.loc 1 259 0 is_stmt 1
 458 01e6 00BF     		nop
 459 01e8 0837     		adds	r7, r7, #8
 460              		.cfi_def_cfa_offset 8
 461 01ea BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 01ec 80BD     		pop	{r7, pc}
 465              	.L32:
 466 01ee 00BF     		.align	2
 467              	.L31:
 468 01f0 00000000 		.word	state.10411
 469 01f4 04000000 		.word	rx_queue.10415
 470 01f8 00000000 		.word	c_mem
 471 01fc 07000000 		.word	data_packet_length.10413
 472 0200 08000000 		.word	data_packet_index.10412
 473 0204 0C000000 		.word	data_packet_buffer.10414
 474 0208 00000000 		.word	g_rx
 475              		.cfi_endproc
 476              	.LFE66:
 477              		.size	interrupt_manager, .-interrupt_manager
 478              		.global	__aeabi_i2f
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 14


 479              		.global	__aeabi_fdiv
 480              		.section	.text.function_scheduler,"ax",%progbits
 481              		.align	2
 482              		.global	function_scheduler
 483              		.thumb
 484              		.thumb_func
 485              		.type	function_scheduler, %function
 486              	function_scheduler:
 487              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 1000 Hz
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 488              		.loc 1 268 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 2504
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492 0000 B0B5     		push	{r4, r5, r7, lr}
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 4, -16
 495              		.cfi_offset 5, -12
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 ADF6C81D 		subw	sp, sp, #2504
 499              		.cfi_def_cfa_offset 2520
 500 0006 00AF     		add	r7, sp, #0
 501              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 502              		.loc 1 272 0
 503 0008 3B46     		mov	r3, r7
 504 000a 0022     		movs	r2, #0
 505 000c 1A60     		str	r2, [r3]
 506 000e 0433     		adds	r3, r3, #4
 507 0010 4FF41C62 		mov	r2, #2496
 508 0014 0021     		movs	r1, #0
 509 0016 1846     		mov	r0, r3
 510 0018 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 511              		.loc 1 274 0
 512 001c 0023     		movs	r3, #0
 513 001e 87F8C639 		strb	r3, [r7, #2502]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 514              		.loc 1 275 0
 515 0022 0123     		movs	r3, #1
 516 0024 87F8C539 		strb	r3, [r7, #2501]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 15


 518 0028 0020     		movs	r0, #0
 519 002a FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 002e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0032 0346     		mov	r3, r0
 523 0034 1A46     		mov	r2, r3
 524 0036 A74B     		ldr	r3, .L78
 525 0038 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c **** 
 280:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 281:..\src/interruptions.c **** 
 282:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 282 0
 527 003a 0120     		movs	r0, #1
 528 003c FFF7FEFF 		bl	ADC_SOC_Write
 283:..\src/interruptions.c ****     
 284:..\src/interruptions.c ****     // Check Interrupt 
 285:..\src/interruptions.c **** 
 286:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 286 0
 530 0040 A54B     		ldr	r3, .L78+4
 531 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0044 002B     		cmp	r3, #0
 533 0046 04D0     		beq	.L34
 287:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 287 0
 535 0048 A34B     		ldr	r3, .L78+4
 536 004a 0022     		movs	r2, #0
 537 004c 1A70     		strb	r2, [r3]
 288:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 288 0
 539 004e FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 289:..\src/interruptions.c ****     }
 290:..\src/interruptions.c ****     
 291:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 291 0
 542 0052 A24B     		ldr	r3, .L78+8
 543 0054 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 0058 042B     		cmp	r3, #4
 545 005a 00F2AE81 		bhi	.L35
 546 005e 01A2     		adr	r2, .L37
 547 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0064 79000000 		.word	.L36+1
 551 0068 39010000 		.word	.L38+1
 552 006c AD020000 		.word	.L39+1
 553 0070 AD020000 		.word	.L39+1
 554 0074 39010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 292:..\src/interruptions.c ****         case SOFTHAND_PRO:
 293:..\src/interruptions.c ****         
 294:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 295:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 16


 296:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
 297:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 297 0
 558 0078 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 559 007c 9749     		ldr	r1, .L78+8
 560 007e 1346     		mov	r3, r2
 561 0080 DB00     		lsls	r3, r3, #3
 562 0082 9B1A     		subs	r3, r3, r2
 563 0084 1B01     		lsls	r3, r3, #4
 564 0086 0B44     		add	r3, r3, r1
 565 0088 03F58873 		add	r3, r3, #272
 566 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 567 008e 1A46     		mov	r2, r3
 568 0090 934B     		ldr	r3, .L78+12
 569 0092 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 570 0094 002B     		cmp	r3, #0
 571 0096 25D0     		beq	.L40
 298:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 299:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 572              		.loc 1 299 0
 573 0098 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 574 009c 8F49     		ldr	r1, .L78+8
 575 009e 1346     		mov	r3, r2
 576 00a0 DB00     		lsls	r3, r3, #3
 577 00a2 9B1A     		subs	r3, r3, r2
 578 00a4 1B01     		lsls	r3, r3, #4
 579 00a6 0B44     		add	r3, r3, r1
 580 00a8 03F58873 		add	r3, r3, #272
 581 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 00ae 1846     		mov	r0, r3
 583 00b0 FFF7FEFF 		bl	Change_CS_EncoderLine
 300:..\src/interruptions.c ****                 
 301:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 584              		.loc 1 301 0
 585 00b4 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 586 00b8 8849     		ldr	r1, .L78+8
 587 00ba 1346     		mov	r3, r2
 588 00bc DB00     		lsls	r3, r3, #3
 589 00be 9B1A     		subs	r3, r3, r2
 590 00c0 1B01     		lsls	r3, r3, #4
 591 00c2 0B44     		add	r3, r3, r1
 592 00c4 03F58873 		add	r3, r3, #272
 593 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 00ca 0021     		movs	r1, #0
 595 00cc 1846     		mov	r0, r3
 596 00ce FFF7FEFF 		bl	encoder_reading_SPI
 302:..\src/interruptions.c **** 
 303:..\src/interruptions.c ****                 // Check Interrupt     
 304:..\src/interruptions.c ****                 
 305:..\src/interruptions.c ****                 if (interrupt_flag){
 597              		.loc 1 305 0
 598 00d2 814B     		ldr	r3, .L78+4
 599 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00d6 002B     		cmp	r3, #0
 601 00d8 04D0     		beq	.L40
 306:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 602              		.loc 1 306 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 17


 603 00da 7F4B     		ldr	r3, .L78+4
 604 00dc 0022     		movs	r2, #0
 605 00de 1A70     		strb	r2, [r3]
 307:..\src/interruptions.c ****                     interrupt_manager();
 606              		.loc 1 307 0
 607 00e0 FFF7FEFF 		bl	interrupt_manager
 608              	.L40:
 308:..\src/interruptions.c ****                 }
 309:..\src/interruptions.c ****             }
 310:..\src/interruptions.c ****             
 311:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 312:..\src/interruptions.c ****             
 313:..\src/interruptions.c ****             motor_control_SH();
 609              		.loc 1 313 0
 610 00e4 FFF7FEFF 		bl	motor_control_SH
 314:..\src/interruptions.c ****             
 315:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 316:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 611              		.loc 1 316 0
 612 00e8 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 613 00ec 7B49     		ldr	r1, .L78+8
 614 00ee 1346     		mov	r3, r2
 615 00f0 DB00     		lsls	r3, r3, #3
 616 00f2 9B1A     		subs	r3, r3, r2
 617 00f4 1B01     		lsls	r3, r3, #4
 618 00f6 0B44     		add	r3, r3, r1
 619 00f8 03F58973 		add	r3, r3, #274
 620 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621 00fe 012B     		cmp	r3, #1
 622 0100 0FD1     		bne	.L41
 317:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 623              		.loc 1 317 0
 624 0102 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 625 0106 7549     		ldr	r1, .L78+8
 626 0108 1346     		mov	r3, r2
 627 010a DB00     		lsls	r3, r3, #3
 628 010c 9B1A     		subs	r3, r3, r2
 629 010e 1B01     		lsls	r3, r3, #4
 630 0110 0B44     		add	r3, r3, r1
 631 0112 03F58773 		add	r3, r3, #270
 632 0116 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 633 0118 002B     		cmp	r3, #0
 634 011a 02D1     		bne	.L41
 318:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 635              		.loc 1 318 0
 636 011c 714B     		ldr	r3, .L78+16
 637 011e 0022     		movs	r2, #0
 638 0120 1A70     		strb	r2, [r3]
 639              	.L41:
 319:..\src/interruptions.c ****                 }   
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 640              		.loc 1 324 0
 641 0122 6D4B     		ldr	r3, .L78+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 18


 642 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 0126 002B     		cmp	r3, #0
 644 0128 00F03A81 		beq	.L75
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 645              		.loc 1 325 0
 646 012c 6A4B     		ldr	r3, .L78+4
 647 012e 0022     		movs	r2, #0
 648 0130 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 649              		.loc 1 326 0
 650 0132 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 651              		.loc 1 328 0
 652 0136 33E1     		b	.L75
 653              	.L38:
 654              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 655              		.loc 1 333 0
 656 0138 0023     		movs	r3, #0
 657 013a 87F8C739 		strb	r3, [r7, #2503]
 658 013e 53E0     		b	.L43
 659              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 660              		.loc 1 334 0
 661 0140 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 662 0144 664A     		ldr	r2, .L78+12
 663 0146 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 664 0148 002B     		cmp	r3, #0
 665 014a 48D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 666              		.loc 1 336 0
 667 014c 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 668 0150 1846     		mov	r0, r3
 669 0152 FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 670              		.loc 1 338 0
 671 0156 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 672 015a 6049     		ldr	r1, .L78+8
 673 015c 1346     		mov	r3, r2
 674 015e DB00     		lsls	r3, r3, #3
 675 0160 9B1A     		subs	r3, r3, r2
 676 0162 1B01     		lsls	r3, r3, #4
 677 0164 0B44     		add	r3, r3, r1
 678 0166 03F58873 		add	r3, r3, #272
 679 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 016c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 681 0170 9A42     		cmp	r2, r3
 682 0172 08D1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 19


 683              		.loc 1 340 0
 684 0174 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 685 0178 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 686 017c 1146     		mov	r1, r2
 687 017e 1846     		mov	r0, r3
 688 0180 FFF7FEFF 		bl	encoder_reading_SPI
 689 0184 22E0     		b	.L46
 690              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 691              		.loc 1 343 0
 692 0186 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 693 018a 5449     		ldr	r1, .L78+8
 694 018c 1346     		mov	r3, r2
 695 018e DB00     		lsls	r3, r3, #3
 696 0190 9B1A     		subs	r3, r3, r2
 697 0192 1B01     		lsls	r3, r3, #4
 698 0194 0B44     		add	r3, r3, r1
 699 0196 03F58873 		add	r3, r3, #272
 700 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 019c 97F8C729 		ldrb	r2, [r7, #2503]	@ zero_extendqisi2
 702 01a0 9A42     		cmp	r2, r3
 703 01a2 08D1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 704              		.loc 1 345 0
 705 01a4 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 706 01a8 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 707 01ac 1146     		mov	r1, r2
 708 01ae 1846     		mov	r0, r3
 709 01b0 FFF7FEFF 		bl	encoder_reading_SPI
 710 01b4 0AE0     		b	.L46
 711              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 712              		.loc 1 349 0
 713 01b6 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 714 01ba 494A     		ldr	r2, .L78+12
 715 01bc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 716 01be 1A46     		mov	r2, r3
 717 01c0 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 718 01c4 1946     		mov	r1, r3
 719 01c6 1046     		mov	r0, r2
 720 01c8 FFF7FEFF 		bl	ReadEncoderLine
 721              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 722              		.loc 1 356 0
 723 01cc 424B     		ldr	r3, .L78+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 20


 724 01ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 725 01d0 002B     		cmp	r3, #0
 726 01d2 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 727              		.loc 1 357 0
 728 01d4 404B     		ldr	r3, .L78+4
 729 01d6 0022     		movs	r2, #0
 730 01d8 1A70     		strb	r2, [r3]
 358:..\src/interruptions.c ****                         interrupt_manager();
 731              		.loc 1 358 0
 732 01da FFF7FEFF 		bl	interrupt_manager
 733              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 734              		.loc 1 333 0 discriminator 2
 735 01de 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 736 01e2 0133     		adds	r3, r3, #1
 737 01e4 87F8C739 		strb	r3, [r7, #2503]
 738              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 739              		.loc 1 333 0 is_stmt 0 discriminator 1
 740 01e8 97F8C739 		ldrb	r3, [r7, #2503]	@ zero_extendqisi2
 741 01ec 012B     		cmp	r3, #1
 742 01ee A7D9     		bls	.L48
 743              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 744              		.loc 1 366 0 is_stmt 1
 745 01f0 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 746 01f4 1846     		mov	r0, r3
 747 01f6 FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             // Check external reference before processing other serial data and right after motor c
 369:..\src/interruptions.c ****             if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 748              		.loc 1 369 0
 749 01fa 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 750 01fe 3749     		ldr	r1, .L78+8
 751 0200 1346     		mov	r3, r2
 752 0202 DB00     		lsls	r3, r3, #3
 753 0204 9B1A     		subs	r3, r3, r2
 754 0206 1B01     		lsls	r3, r3, #4
 755 0208 0B44     		add	r3, r3, r1
 756 020a 03F58973 		add	r3, r3, #274
 757 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 758 0210 012B     		cmp	r3, #1
 759 0212 0FD1     		bne	.L49
 370:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 760              		.loc 1 370 0
 761 0214 97F8C629 		ldrb	r2, [r7, #2502]	@ zero_extendqisi2
 762 0218 3049     		ldr	r1, .L78+8
 763 021a 1346     		mov	r3, r2
 764 021c DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 21


 765 021e 9B1A     		subs	r3, r3, r2
 766 0220 1B01     		lsls	r3, r3, #4
 767 0222 0B44     		add	r3, r3, r1
 768 0224 03F58773 		add	r3, r3, #270
 769 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 770 022a 002B     		cmp	r3, #0
 771 022c 02D1     		bne	.L49
 371:..\src/interruptions.c ****                     change_ext_ref_flag = FALSE;
 772              		.loc 1 371 0
 773 022e 2D4B     		ldr	r3, .L78+16
 774 0230 0022     		movs	r2, #0
 775 0232 1A70     		strb	r2, [r3]
 776              	.L49:
 372:..\src/interruptions.c ****                 }   
 373:..\src/interruptions.c ****             }
 374:..\src/interruptions.c ****             
 375:..\src/interruptions.c ****             // Check Interrupt 
 376:..\src/interruptions.c **** 
 377:..\src/interruptions.c ****             if (interrupt_flag){
 777              		.loc 1 377 0
 778 0234 284B     		ldr	r3, .L78+4
 779 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 780 0238 002B     		cmp	r3, #0
 781 023a 04D0     		beq	.L50
 378:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 782              		.loc 1 378 0
 783 023c 264B     		ldr	r3, .L78+4
 784 023e 0022     		movs	r2, #0
 785 0240 1A70     		strb	r2, [r3]
 379:..\src/interruptions.c ****                 interrupt_manager();
 786              		.loc 1 379 0
 787 0242 FFF7FEFF 		bl	interrupt_manager
 788              	.L50:
 380:..\src/interruptions.c ****             }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 383:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 789              		.loc 1 383 0
 790 0246 254B     		ldr	r3, .L78+8
 791 0248 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 792 024c 012B     		cmp	r3, #1
 793 024e 40F0A980 		bne	.L76
 384:..\src/interruptions.c ****                 motor_control_generic(SECOND_MOTOR_IDX);
 794              		.loc 1 384 0
 795 0252 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 796 0256 1846     		mov	r0, r3
 797 0258 FFF7FEFF 		bl	motor_control_generic
 385:..\src/interruptions.c ****                 
 386:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 387:..\src/interruptions.c ****                 if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 798              		.loc 1 387 0
 799 025c 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 800 0260 1E49     		ldr	r1, .L78+8
 801 0262 1346     		mov	r3, r2
 802 0264 DB00     		lsls	r3, r3, #3
 803 0266 9B1A     		subs	r3, r3, r2
 804 0268 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 22


 805 026a 0B44     		add	r3, r3, r1
 806 026c 03F58973 		add	r3, r3, #274
 807 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 808 0272 012B     		cmp	r3, #1
 809 0274 0FD1     		bne	.L52
 388:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 810              		.loc 1 388 0
 811 0276 97F8C529 		ldrb	r2, [r7, #2501]	@ zero_extendqisi2
 812 027a 1849     		ldr	r1, .L78+8
 813 027c 1346     		mov	r3, r2
 814 027e DB00     		lsls	r3, r3, #3
 815 0280 9B1A     		subs	r3, r3, r2
 816 0282 1B01     		lsls	r3, r3, #4
 817 0284 0B44     		add	r3, r3, r1
 818 0286 03F58773 		add	r3, r3, #270
 819 028a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 820 028c 002B     		cmp	r3, #0
 821 028e 02D1     		bne	.L52
 389:..\src/interruptions.c ****                         change_ext_ref_flag = FALSE;
 822              		.loc 1 389 0
 823 0290 144B     		ldr	r3, .L78+16
 824 0292 0022     		movs	r2, #0
 825 0294 1A70     		strb	r2, [r3]
 826              	.L52:
 390:..\src/interruptions.c ****                     }   
 391:..\src/interruptions.c ****                 }
 392:..\src/interruptions.c ****                 
 393:..\src/interruptions.c ****                 // Check Interrupt 
 394:..\src/interruptions.c **** 
 395:..\src/interruptions.c ****                 if (interrupt_flag){
 827              		.loc 1 395 0
 828 0296 104B     		ldr	r3, .L78+4
 829 0298 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830 029a 002B     		cmp	r3, #0
 831 029c 00F08280 		beq	.L76
 396:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 832              		.loc 1 396 0
 833 02a0 0D4B     		ldr	r3, .L78+4
 834 02a2 0022     		movs	r2, #0
 835 02a4 1A70     		strb	r2, [r3]
 397:..\src/interruptions.c ****                     interrupt_manager();
 836              		.loc 1 397 0
 837 02a6 FFF7FEFF 		bl	interrupt_manager
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****             }  
 400:..\src/interruptions.c ****             break;
 838              		.loc 1 400 0
 839 02aa 7BE0     		b	.L76
 840              	.L39:
 401:..\src/interruptions.c ****             
 402:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 403:..\src/interruptions.c ****             
 404:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 405:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 841              		.loc 1 405 0
 842 02ac 0E4B     		ldr	r3, .L78+20
 843 02ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 23


 844 02b0 002B     		cmp	r3, #0
 845 02b2 3BD0     		beq	.L53
 846              		.loc 1 405 0 is_stmt 0 discriminator 1
 847 02b4 094B     		ldr	r3, .L78+8
 848 02b6 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 849 02ba 002B     		cmp	r3, #0
 850 02bc 36D0     		beq	.L53
 406:..\src/interruptions.c ****                 
 407:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 851              		.loc 1 407 0 is_stmt 1
 852 02be 074B     		ldr	r3, .L78+8
 853 02c0 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 854 02c4 022B     		cmp	r3, #2
 855 02c6 11D1     		bne	.L54
 408:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 856              		.loc 1 408 0
 857 02c8 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 858 02cc 1846     		mov	r0, r3
 859 02ce FFF7FEFF 		bl	air_chambers_control
 860 02d2 10E0     		b	.L55
 861              	.L79:
 862              		.align	2
 863              	.L78:
 864 02d4 00000000 		.word	timer_value0
 865 02d8 00000000 		.word	interrupt_flag
 866 02dc 00000000 		.word	c_mem
 867 02e0 00000000 		.word	N_Encoder_Line_Connected
 868 02e4 00000000 		.word	change_ext_ref_flag
 869 02e8 00000000 		.word	master_mode
 870              	.L54:
 409:..\src/interruptions.c ****                 }
 410:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 411:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 871              		.loc 1 411 0
 872 02ec 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 873 02f0 1846     		mov	r0, r3
 874 02f2 FFF7FEFF 		bl	otbk_act_wrist_control
 875              	.L55:
 412:..\src/interruptions.c ****                 }
 413:..\src/interruptions.c **** 
 414:..\src/interruptions.c ****                 // Check Interrupt 
 415:..\src/interruptions.c **** 
 416:..\src/interruptions.c ****                 if (interrupt_flag){
 876              		.loc 1 416 0
 877 02f6 2C4B     		ldr	r3, .L80
 878 02f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 02fa 002B     		cmp	r3, #0
 880 02fc 04D0     		beq	.L56
 417:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 881              		.loc 1 417 0
 882 02fe 2A4B     		ldr	r3, .L80
 883 0300 0022     		movs	r2, #0
 884 0302 1A70     		strb	r2, [r3]
 418:..\src/interruptions.c ****                     interrupt_manager();
 885              		.loc 1 418 0
 886 0304 FFF7FEFF 		bl	interrupt_manager
 887              	.L56:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 24


 419:..\src/interruptions.c ****                 }
 420:..\src/interruptions.c ****             
 421:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 888              		.loc 1 421 0
 889 0308 284B     		ldr	r3, .L80+4
 890 030a 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 891 030e 97F8C539 		ldrb	r3, [r7, #2501]	@ zero_extendqisi2
 892 0312 1146     		mov	r1, r2
 893 0314 1846     		mov	r0, r3
 894 0316 FFF7FEFF 		bl	drive_slave
 422:..\src/interruptions.c ****             
 423:..\src/interruptions.c ****                 // Check Interrupt 
 424:..\src/interruptions.c **** 
 425:..\src/interruptions.c ****                 if (interrupt_flag){
 895              		.loc 1 425 0
 896 031a 234B     		ldr	r3, .L80
 897 031c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 898 031e 002B     		cmp	r3, #0
 899 0320 04D0     		beq	.L53
 426:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 900              		.loc 1 426 0
 901 0322 214B     		ldr	r3, .L80
 902 0324 0022     		movs	r2, #0
 903 0326 1A70     		strb	r2, [r3]
 427:..\src/interruptions.c ****                     interrupt_manager();
 904              		.loc 1 427 0
 905 0328 FFF7FEFF 		bl	interrupt_manager
 906              	.L53:
 428:..\src/interruptions.c ****                 }
 429:..\src/interruptions.c ****             }
 430:..\src/interruptions.c ****             if (!master_mode){
 907              		.loc 1 430 0
 908 032c 204B     		ldr	r3, .L80+8
 909 032e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 910 0330 002B     		cmp	r3, #0
 911 0332 11D1     		bne	.L57
 431:..\src/interruptions.c ****                 
 432:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 912              		.loc 1 432 0
 913 0334 1D4B     		ldr	r3, .L80+4
 914 0336 93F8C032 		ldrb	r3, [r3, #704]	@ zero_extendqisi2
 915 033a 002B     		cmp	r3, #0
 916 033c 01D0     		beq	.L58
 433:..\src/interruptions.c ****                     // Stop feedback motors
 434:..\src/interruptions.c ****                     stop_master_device();
 917              		.loc 1 434 0
 918 033e FFF7FEFF 		bl	stop_master_device
 919              	.L58:
 435:..\src/interruptions.c ****                 }
 436:..\src/interruptions.c ****                 // Disable slave or motors
 437:..\src/interruptions.c ****                 deactivate_slaves();
 920              		.loc 1 437 0
 921 0342 FFF7FEFF 		bl	deactivate_slaves
 438:..\src/interruptions.c ****                         
 439:..\src/interruptions.c ****                 // Check Interrupt 
 440:..\src/interruptions.c ****                 if (interrupt_flag){
 922              		.loc 1 440 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 25


 923 0346 184B     		ldr	r3, .L80
 924 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 925 034a 002B     		cmp	r3, #0
 926 034c 04D0     		beq	.L57
 441:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 927              		.loc 1 441 0
 928 034e 164B     		ldr	r3, .L80
 929 0350 0022     		movs	r2, #0
 930 0352 1A70     		strb	r2, [r3]
 442:..\src/interruptions.c ****                     interrupt_manager();
 931              		.loc 1 442 0
 932 0354 FFF7FEFF 		bl	interrupt_manager
 933              	.L57:
 443:..\src/interruptions.c ****                 } 
 444:..\src/interruptions.c ****             }
 445:..\src/interruptions.c ****     
 446:..\src/interruptions.c ****             // Control Master device main motor 
 447:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 448:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 934              		.loc 1 448 0
 935 0358 97F8C639 		ldrb	r3, [r7, #2502]	@ zero_extendqisi2
 936 035c 1846     		mov	r0, r3
 937 035e FFF7FEFF 		bl	motor_control_generic
 449:..\src/interruptions.c ****                         
 450:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 451:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 938              		.loc 1 451 0
 939 0362 124B     		ldr	r3, .L80+4
 940 0364 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 941 0368 032B     		cmp	r3, #3
 942 036a 0FD1     		bne	.L59
 452:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 943              		.loc 1 452 0
 944 036c 114B     		ldr	r3, .L80+12
 945 036e 9B68     		ldr	r3, [r3, #8]
 946 0370 432B     		cmp	r3, #67
 947 0372 02DD     		ble	.L60
 453:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 948              		.loc 1 453 0
 949 0374 0F4B     		ldr	r3, .L80+12
 950 0376 4322     		movs	r2, #67
 951 0378 9A60     		str	r2, [r3, #8]
 952              	.L60:
 454:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 953              		.loc 1 454 0
 954 037a 0E4B     		ldr	r3, .L80+12
 955 037c 9B68     		ldr	r3, [r3, #8]
 956 037e 13F1430F 		cmn	r3, #67
 957 0382 03DA     		bge	.L59
 455:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 958              		.loc 1 455 0
 959 0384 0B4B     		ldr	r3, .L80+12
 960 0386 6FF04202 		mvn	r2, #66
 961 038a 9A60     		str	r2, [r3, #8]
 962              	.L59:
 456:..\src/interruptions.c ****             }
 457:..\src/interruptions.c ****             
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 26


 458:..\src/interruptions.c ****             // Check Interrupt 
 459:..\src/interruptions.c **** 
 460:..\src/interruptions.c ****             if (interrupt_flag){
 963              		.loc 1 460 0
 964 038c 064B     		ldr	r3, .L80
 965 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 966 0390 002B     		cmp	r3, #0
 967 0392 11D0     		beq	.L77
 461:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 968              		.loc 1 461 0
 969 0394 044B     		ldr	r3, .L80
 970 0396 0022     		movs	r2, #0
 971 0398 1A70     		strb	r2, [r3]
 462:..\src/interruptions.c ****                 interrupt_manager();
 972              		.loc 1 462 0
 973 039a FFF7FEFF 		bl	interrupt_manager
 463:..\src/interruptions.c ****             }
 464:..\src/interruptions.c ****             
 465:..\src/interruptions.c ****             break;
 974              		.loc 1 465 0
 975 039e 0BE0     		b	.L77
 976              	.L75:
 328:..\src/interruptions.c ****             
 977              		.loc 1 328 0
 978 03a0 00BF     		nop
 979 03a2 0AE0     		b	.L35
 980              	.L76:
 400:..\src/interruptions.c ****             
 981              		.loc 1 400 0
 982 03a4 00BF     		nop
 983 03a6 08E0     		b	.L35
 984              	.L81:
 985              		.align	2
 986              	.L80:
 987 03a8 00000000 		.word	interrupt_flag
 988 03ac 00000000 		.word	c_mem
 989 03b0 00000000 		.word	master_mode
 990 03b4 00000000 		.word	g_refNew
 991              	.L77:
 992              		.loc 1 465 0
 993 03b8 00BF     		nop
 994              	.L35:
 466:..\src/interruptions.c ****     }
 467:..\src/interruptions.c **** 
 468:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****     analog_read_end();
 995              		.loc 1 470 0
 996 03ba FFF7FEFF 		bl	analog_read_end
 471:..\src/interruptions.c **** 
 472:..\src/interruptions.c ****     if (interrupt_flag){
 997              		.loc 1 472 0
 998 03be 844B     		ldr	r3, .L82
 999 03c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 03c2 002B     		cmp	r3, #0
 1001 03c4 04D0     		beq	.L62
 473:..\src/interruptions.c ****         interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 27


 1002              		.loc 1 473 0
 1003 03c6 824B     		ldr	r3, .L82
 1004 03c8 0022     		movs	r2, #0
 1005 03ca 1A70     		strb	r2, [r3]
 474:..\src/interruptions.c ****         interrupt_manager();
 1006              		.loc 1 474 0
 1007 03cc FFF7FEFF 		bl	interrupt_manager
 1008              	.L62:
 475:..\src/interruptions.c ****     }
 476:..\src/interruptions.c **** 
 477:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 478:..\src/interruptions.c **** 
 479:..\src/interruptions.c ****     overcurrent_control();
 1009              		.loc 1 479 0
 1010 03d0 FFF7FEFF 		bl	overcurrent_control
 480:..\src/interruptions.c ****     
 481:..\src/interruptions.c ****     // Check Interrupt 
 482:..\src/interruptions.c ****     
 483:..\src/interruptions.c ****     if (interrupt_flag){
 1011              		.loc 1 483 0
 1012 03d4 7E4B     		ldr	r3, .L82
 1013 03d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 03d8 002B     		cmp	r3, #0
 1015 03da 04D0     		beq	.L63
 484:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1016              		.loc 1 484 0
 1017 03dc 7C4B     		ldr	r3, .L82
 1018 03de 0022     		movs	r2, #0
 1019 03e0 1A70     		strb	r2, [r3]
 485:..\src/interruptions.c ****         interrupt_manager();
 1020              		.loc 1 485 0
 1021 03e2 FFF7FEFF 		bl	interrupt_manager
 1022              	.L63:
 486:..\src/interruptions.c ****     }
 487:..\src/interruptions.c **** 
 488:..\src/interruptions.c ****     //---------------------------------- Calibration 
 489:..\src/interruptions.c **** 
 490:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 491:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1023              		.loc 1 491 0
 1024 03e6 7B4B     		ldr	r3, .L82+4
 1025 03e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1026 03ea 012B     		cmp	r3, #1
 1027 03ec 0ED1     		bne	.L64
 492:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1028              		.loc 1 492 0
 1029 03ee 7A4B     		ldr	r3, .L82+8
 1030 03f0 1B88     		ldrh	r3, [r3]
 1031 03f2 0A2B     		cmp	r3, #10
 1032 03f4 04D1     		bne	.L65
 493:..\src/interruptions.c ****             calibration();
 1033              		.loc 1 493 0
 1034 03f6 FFF7FEFF 		bl	calibration
 494:..\src/interruptions.c ****             counter_calibration = 0;
 1035              		.loc 1 494 0
 1036 03fa 774B     		ldr	r3, .L82+8
 1037 03fc 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 28


 1038 03fe 1A80     		strh	r2, [r3]	@ movhi
 1039              	.L65:
 495:..\src/interruptions.c ****         }
 496:..\src/interruptions.c ****         counter_calibration++;
 1040              		.loc 1 496 0
 1041 0400 754B     		ldr	r3, .L82+8
 1042 0402 1B88     		ldrh	r3, [r3]
 1043 0404 0133     		adds	r3, r3, #1
 1044 0406 9AB2     		uxth	r2, r3
 1045 0408 734B     		ldr	r3, .L82+8
 1046 040a 1A80     		strh	r2, [r3]	@ movhi
 1047              	.L64:
 497:..\src/interruptions.c ****     }
 498:..\src/interruptions.c **** 
 499:..\src/interruptions.c ****     // Check Interrupt 
 500:..\src/interruptions.c ****     
 501:..\src/interruptions.c ****     if (interrupt_flag){
 1048              		.loc 1 501 0
 1049 040c 704B     		ldr	r3, .L82
 1050 040e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 0410 002B     		cmp	r3, #0
 1052 0412 04D0     		beq	.L66
 502:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1053              		.loc 1 502 0
 1054 0414 6E4B     		ldr	r3, .L82
 1055 0416 0022     		movs	r2, #0
 1056 0418 1A70     		strb	r2, [r3]
 503:..\src/interruptions.c ****         interrupt_manager();
 1057              		.loc 1 503 0
 1058 041a FFF7FEFF 		bl	interrupt_manager
 1059              	.L66:
 504:..\src/interruptions.c ****     }
 505:..\src/interruptions.c ****     
 506:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1060              		.loc 1 506 0
 1061 041e 6F4B     		ldr	r3, .L82+12
 1062 0420 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1063 0424 002B     		cmp	r3, #0
 1064 0426 1CD1     		bne	.L67
 507:..\src/interruptions.c ****     
 508:..\src/interruptions.c ****         //---------------------------------- Rest position check
 509:..\src/interruptions.c **** 
 510:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 511:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1065              		.loc 1 511 0
 1066 0428 6C4B     		ldr	r3, .L82+12
 1067 042a 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 1068 042e 012B     		cmp	r3, #1
 1069 0430 17D1     		bne	.L67
 512:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1070              		.loc 1 512 0
 1071 0432 694B     		ldr	r3, .L82+8
 1072 0434 1B88     		ldrh	r3, [r3]
 1073 0436 0A2B     		cmp	r3, #10
 1074 0438 04D1     		bne	.L68
 513:..\src/interruptions.c ****                     check_rest_position();
 1075              		.loc 1 513 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 29


 1076 043a FFF7FEFF 		bl	check_rest_position
 514:..\src/interruptions.c ****                     counter_calibration = 0;
 1077              		.loc 1 514 0
 1078 043e 664B     		ldr	r3, .L82+8
 1079 0440 0022     		movs	r2, #0
 1080 0442 1A80     		strh	r2, [r3]	@ movhi
 1081              	.L68:
 515:..\src/interruptions.c ****             }
 516:..\src/interruptions.c ****             counter_calibration++;
 1082              		.loc 1 516 0
 1083 0444 644B     		ldr	r3, .L82+8
 1084 0446 1B88     		ldrh	r3, [r3]
 1085 0448 0133     		adds	r3, r3, #1
 1086 044a 9AB2     		uxth	r2, r3
 1087 044c 624B     		ldr	r3, .L82+8
 1088 044e 1A80     		strh	r2, [r3]	@ movhi
 517:..\src/interruptions.c **** 
 518:..\src/interruptions.c ****             // Check Interrupt     
 519:..\src/interruptions.c ****             if (interrupt_flag){
 1089              		.loc 1 519 0
 1090 0450 5F4B     		ldr	r3, .L82
 1091 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1092 0454 002B     		cmp	r3, #0
 1093 0456 04D0     		beq	.L67
 520:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1094              		.loc 1 520 0
 1095 0458 5D4B     		ldr	r3, .L82
 1096 045a 0022     		movs	r2, #0
 1097 045c 1A70     		strb	r2, [r3]
 521:..\src/interruptions.c ****                 interrupt_manager();
 1098              		.loc 1 521 0
 1099 045e FFF7FEFF 		bl	interrupt_manager
 1100              	.L67:
 522:..\src/interruptions.c ****             }
 523:..\src/interruptions.c ****         }
 524:..\src/interruptions.c ****         
 525:..\src/interruptions.c ****     }
 526:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****     cycles_counter_update();
 1101              		.loc 1 528 0
 1102 0462 FFF7FEFF 		bl	cycles_counter_update
 529:..\src/interruptions.c **** 
 530:..\src/interruptions.c ****     // Check Cycles Interrupt 
 531:..\src/interruptions.c ****     
 532:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1103              		.loc 1 532 0
 1104 0466 5E4B     		ldr	r3, .L82+16
 1105 0468 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1106 046a 002B     		cmp	r3, #0
 1107 046c 25D0     		beq	.L69
 533:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1108              		.loc 1 533 0
 1109 046e 5C4B     		ldr	r3, .L82+16
 1110 0470 0022     		movs	r2, #0
 1111 0472 1A70     		strb	r2, [r3]
 534:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 30


 535:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 536:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 537:..\src/interruptions.c ****         if(can_write) {
 1112              		.loc 1 537 0
 1113 0474 5B4B     		ldr	r3, .L82+20
 1114 0476 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 0478 002B     		cmp	r3, #0
 1116 047a 1ED0     		beq	.L69
 538:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1117              		.loc 1 538 0
 1118 047c 5A4B     		ldr	r3, .L82+24
 1119 047e 0022     		movs	r2, #0
 1120 0480 1A70     		strb	r2, [r3]
 539:..\src/interruptions.c ****             
 540:..\src/interruptions.c ****             //Update time variable
 541:..\src/interruptions.c ****             g_mem.cnt.total_time_on = g_mem.cnt.total_time_on + 120;  // Add 120 seconds.
 1121              		.loc 1 541 0
 1122 0482 5A4B     		ldr	r3, .L82+28
 1123 0484 9B6D     		ldr	r3, [r3, #88]
 1124 0486 7833     		adds	r3, r3, #120
 1125 0488 584A     		ldr	r2, .L82+28
 1126 048a 9365     		str	r3, [r2, #88]
 542:..\src/interruptions.c ****             
 543:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1127              		.loc 1 543 0
 1128 048c 534B     		ldr	r3, .L82+12
 1129 048e 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 1130 0492 012B     		cmp	r3, #1
 1131 0494 11D1     		bne	.L69
 544:..\src/interruptions.c ****                 
 545:..\src/interruptions.c ****                 store_RTC_current_time();
 1132              		.loc 1 545 0
 1133 0496 FFF7FEFF 		bl	store_RTC_current_time
 546:..\src/interruptions.c ****                 
 547:..\src/interruptions.c ****                 //Write in SD card
 548:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1134              		.loc 1 548 0
 1135 049a 3B46     		mov	r3, r7
 1136 049c 1846     		mov	r0, r3
 1137 049e FFF7FEFF 		bl	prepare_SD_info
 549:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1138              		.loc 1 549 0
 1139 04a2 534B     		ldr	r3, .L82+32
 1140 04a4 1C68     		ldr	r4, [r3]
 1141 04a6 3B46     		mov	r3, r7
 1142 04a8 1846     		mov	r0, r3
 1143 04aa FFF7FEFF 		bl	strlen
 1144 04ae 0246     		mov	r2, r0
 1145 04b0 3B46     		mov	r3, r7
 1146 04b2 1946     		mov	r1, r3
 1147 04b4 2046     		mov	r0, r4
 1148 04b6 FFF7FEFF 		bl	FS_Write
 1149              	.L69:
 550:..\src/interruptions.c ****             }
 551:..\src/interruptions.c ****         }
 552:..\src/interruptions.c ****     }
 553:..\src/interruptions.c ****     
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 31


 554:..\src/interruptions.c ****     // Check Interrupt 
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****     if (interrupt_flag){
 1150              		.loc 1 556 0
 1151 04ba 454B     		ldr	r3, .L82
 1152 04bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 04be 002B     		cmp	r3, #0
 1154 04c0 04D0     		beq	.L70
 557:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1155              		.loc 1 557 0
 1156 04c2 434B     		ldr	r3, .L82
 1157 04c4 0022     		movs	r2, #0
 1158 04c6 1A70     		strb	r2, [r3]
 558:..\src/interruptions.c ****         interrupt_manager();
 1159              		.loc 1 558 0
 1160 04c8 FFF7FEFF 		bl	interrupt_manager
 1161              	.L70:
 559:..\src/interruptions.c ****     }
 560:..\src/interruptions.c ****     
 561:..\src/interruptions.c ****     
 562:..\src/interruptions.c ****     //---------------------------------- Check battery
 563:..\src/interruptions.c **** 
 564:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 565:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1162              		.loc 1 565 0
 1163 04cc 494B     		ldr	r3, .L82+36
 1164 04ce 1B88     		ldrh	r3, [r3]
 1165 04d0 0A2B     		cmp	r3, #10
 1166 04d2 04D1     		bne	.L71
 566:..\src/interruptions.c ****         battery_management();   
 1167              		.loc 1 566 0
 1168 04d4 FFF7FEFF 		bl	battery_management
 567:..\src/interruptions.c ****         counter_tension_func = 0;
 1169              		.loc 1 567 0
 1170 04d8 464B     		ldr	r3, .L82+36
 1171 04da 0022     		movs	r2, #0
 1172 04dc 1A80     		strh	r2, [r3]	@ movhi
 1173              	.L71:
 568:..\src/interruptions.c ****     }
 569:..\src/interruptions.c ****     counter_tension_func++;
 1174              		.loc 1 569 0
 1175 04de 454B     		ldr	r3, .L82+36
 1176 04e0 1B88     		ldrh	r3, [r3]
 1177 04e2 0133     		adds	r3, r3, #1
 1178 04e4 9AB2     		uxth	r2, r3
 1179 04e6 434B     		ldr	r3, .L82+36
 1180 04e8 1A80     		strh	r2, [r3]	@ movhi
 570:..\src/interruptions.c **** 
 571:..\src/interruptions.c ****     // Check Interrupt 
 572:..\src/interruptions.c ****     
 573:..\src/interruptions.c ****     if (interrupt_flag){
 1181              		.loc 1 573 0
 1182 04ea 394B     		ldr	r3, .L82
 1183 04ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 04ee 002B     		cmp	r3, #0
 1185 04f0 04D0     		beq	.L72
 574:..\src/interruptions.c ****         interrupt_flag = FALSE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 32


 1186              		.loc 1 574 0
 1187 04f2 374B     		ldr	r3, .L82
 1188 04f4 0022     		movs	r2, #0
 1189 04f6 1A70     		strb	r2, [r3]
 575:..\src/interruptions.c ****         interrupt_manager();
 1190              		.loc 1 575 0
 1191 04f8 FFF7FEFF 		bl	interrupt_manager
 1192              	.L72:
 576:..\src/interruptions.c ****     }
 577:..\src/interruptions.c ****    
 578:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 579:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1193              		.loc 1 579 0
 1194 04fc 374B     		ldr	r3, .L82+12
 1195 04fe 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 1196 0502 002B     		cmp	r3, #0
 1197 0504 0AD0     		beq	.L73
 580:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1198              		.loc 1 580 0
 1199 0506 FFF7FEFF 		bl	ReadAllIMUs
 581:..\src/interruptions.c ****         
 582:..\src/interruptions.c ****         if (interrupt_flag){
 1200              		.loc 1 582 0
 1201 050a 314B     		ldr	r3, .L82
 1202 050c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1203 050e 002B     		cmp	r3, #0
 1204 0510 04D0     		beq	.L73
 583:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1205              		.loc 1 583 0
 1206 0512 2F4B     		ldr	r3, .L82
 1207 0514 0022     		movs	r2, #0
 1208 0516 1A70     		strb	r2, [r3]
 584:..\src/interruptions.c ****             interrupt_manager();
 1209              		.loc 1 584 0
 1210 0518 FFF7FEFF 		bl	interrupt_manager
 1211              	.L73:
 585:..\src/interruptions.c ****         }
 586:..\src/interruptions.c ****     }
 587:..\src/interruptions.c ****    
 588:..\src/interruptions.c ****     //---------------------------------- Update States
 589:..\src/interruptions.c ****     
 590:..\src/interruptions.c ****     // Load k-1 state
 591:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1212              		.loc 1 591 0
 1213 051c 364A     		ldr	r2, .L82+40
 1214 051e 374B     		ldr	r3, .L82+44
 1215 0520 1446     		mov	r4, r2
 1216 0522 1D46     		mov	r5, r3
 1217 0524 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1218 0526 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1219 0528 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1220 052a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1221 052c 95E80300 		ldmia	r5, {r0, r1}
 1222 0530 84E80300 		stmia	r4, {r0, r1}
 592:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1223              		.loc 1 592 0
 1224 0534 324A     		ldr	r2, .L82+48
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 33


 1225 0536 334B     		ldr	r3, .L82+52
 1226 0538 1046     		mov	r0, r2
 1227 053a 1946     		mov	r1, r3
 1228 053c 6823     		movs	r3, #104
 1229 053e 1A46     		mov	r2, r3
 1230 0540 FFF7FEFF 		bl	memcpy
 593:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1231              		.loc 1 593 0
 1232 0544 304A     		ldr	r2, .L82+56
 1233 0546 314B     		ldr	r3, .L82+60
 1234 0548 1446     		mov	r4, r2
 1235 054a 1D46     		mov	r5, r3
 1236 054c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1237 054e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1238 0550 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1239 0554 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 594:..\src/interruptions.c **** 
 595:..\src/interruptions.c ****     // Load k+1 state        
 596:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1240              		.loc 1 596 0
 1241 0558 2C4A     		ldr	r2, .L82+60
 1242 055a 2D4B     		ldr	r3, .L82+64
 1243 055c 1446     		mov	r4, r2
 1244 055e 1D46     		mov	r5, r3
 1245 0560 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1246 0562 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1247 0564 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1248 0568 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 597:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1249              		.loc 1 597 0
 1250 056c 294A     		ldr	r2, .L82+68
 1251 056e 2A4B     		ldr	r3, .L82+72
 1252 0570 1046     		mov	r0, r2
 1253 0572 1946     		mov	r1, r3
 1254 0574 C823     		movs	r3, #200
 1255 0576 1A46     		mov	r2, r3
 1256 0578 FFF7FEFF 		bl	memcpy
 598:..\src/interruptions.c ****                 
 599:..\src/interruptions.c ****     if (interrupt_flag){
 1257              		.loc 1 599 0
 1258 057c 144B     		ldr	r3, .L82
 1259 057e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1260 0580 002B     		cmp	r3, #0
 1261 0582 04D0     		beq	.L74
 600:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1262              		.loc 1 600 0
 1263 0584 124B     		ldr	r3, .L82
 1264 0586 0022     		movs	r2, #0
 1265 0588 1A70     		strb	r2, [r3]
 601:..\src/interruptions.c ****         interrupt_manager();
 1266              		.loc 1 601 0
 1267 058a FFF7FEFF 		bl	interrupt_manager
 1268              	.L74:
 602:..\src/interruptions.c ****     }
 603:..\src/interruptions.c **** 
 604:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1269              		.loc 1 604 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 34


 1270 058e FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1271 0592 0346     		mov	r3, r0
 1272 0594 1A46     		mov	r2, r3
 1273 0596 214B     		ldr	r3, .L82+76
 1274 0598 1A80     		strh	r2, [r3]	@ movhi
 605:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1275              		.loc 1 605 0
 1276 059a 214B     		ldr	r3, .L82+80
 1277 059c 1B88     		ldrh	r3, [r3]
 1278 059e 1A46     		mov	r2, r3
 1279 05a0 1E4B     		ldr	r3, .L82+76
 1280 05a2 1B88     		ldrh	r3, [r3]
 1281 05a4 D31A     		subs	r3, r2, r3
 1282 05a6 1846     		mov	r0, r3
 1283 05a8 FFF7FEFF 		bl	__aeabi_i2f
 1284 05ac 0346     		mov	r3, r0
 1285 05ae 1D49     		ldr	r1, .L82+84
 1286 05b0 1846     		mov	r0, r3
 1287 05b2 FFF7FEFF 		bl	__aeabi_fdiv
 1288 05b6 0346     		mov	r3, r0
 1289 05b8 1A46     		mov	r2, r3
 1290 05ba 1B4B     		ldr	r3, .L82+88
 1291 05bc 1A60     		str	r2, [r3]	@ float
 606:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1292              		.loc 1 606 0
 1293 05be 0120     		movs	r0, #1
 1294 05c0 FFF7FEFF 		bl	MY_TIMER_REG_Write
 607:..\src/interruptions.c **** 
 608:..\src/interruptions.c **** }
 1295              		.loc 1 608 0
 1296 05c4 00BF     		nop
 1297 05c6 07F6C817 		addw	r7, r7, #2504
 1298              		.cfi_def_cfa_offset 16
 1299 05ca BD46     		mov	sp, r7
 1300              		.cfi_def_cfa_register 13
 1301              		@ sp needed
 1302 05cc B0BD     		pop	{r4, r5, r7, pc}
 1303              	.L83:
 1304 05ce 00BF     		.align	2
 1305              	.L82:
 1306 05d0 00000000 		.word	interrupt_flag
 1307 05d4 00000000 		.word	calib
 1308 05d8 00000000 		.word	counter_calibration.10431
 1309 05dc 00000000 		.word	c_mem
 1310 05e0 00000000 		.word	cycles_interrupt_flag
 1311 05e4 00000000 		.word	can_write
 1312 05e8 00000000 		.word	cycles_status
 1313 05ec 00000000 		.word	g_mem
 1314 05f0 00000000 		.word	pFile
 1315 05f4 02000000 		.word	counter_tension_func.10432
 1316 05f8 00000000 		.word	g_adc_measOld
 1317 05fc 00000000 		.word	g_adc_meas
 1318 0600 00000000 		.word	g_measOld
 1319 0604 00000000 		.word	g_meas
 1320 0608 00000000 		.word	g_refOld
 1321 060c 00000000 		.word	g_ref
 1322 0610 00000000 		.word	g_refNew
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 35


 1323 0614 00000000 		.word	g_imu
 1324 0618 00000000 		.word	g_imuNew
 1325 061c 00000000 		.word	timer_value
 1326 0620 00000000 		.word	timer_value0
 1327 0624 00247449 		.word	1232348160
 1328 0628 00000000 		.word	cycle_time
 1329              		.cfi_endproc
 1330              	.LFE67:
 1331              		.size	function_scheduler, .-function_scheduler
 1332              		.section	.text.compute_reference,"ax",%progbits
 1333              		.align	2
 1334              		.global	compute_reference
 1335              		.thumb
 1336              		.thumb_func
 1337              		.type	compute_reference, %function
 1338              	compute_reference:
 1339              	.LFB68:
 609:..\src/interruptions.c **** 
 610:..\src/interruptions.c **** //==============================================================================
 611:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 612:..\src/interruptions.c **** //==============================================================================
 613:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1340              		.loc 1 613 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 40
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344 0000 80B5     		push	{r7, lr}
 1345              		.cfi_def_cfa_offset 8
 1346              		.cfi_offset 7, -8
 1347              		.cfi_offset 14, -4
 1348 0002 8AB0     		sub	sp, sp, #40
 1349              		.cfi_def_cfa_offset 48
 1350 0004 00AF     		add	r7, sp, #0
 1351              		.cfi_def_cfa_register 7
 1352 0006 0346     		mov	r3, r0
 1353 0008 B960     		str	r1, [r7, #8]
 1354 000a 7A60     		str	r2, [r7, #4]
 1355 000c FB73     		strb	r3, [r7, #15]
 614:..\src/interruptions.c ****     
 615:..\src/interruptions.c ****     int32 CYDATA handle_value;
 616:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 617:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1356              		.loc 1 617 0
 1357 000e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1358 0010 1346     		mov	r3, r2
 1359 0012 DB00     		lsls	r3, r3, #3
 1360 0014 9B1A     		subs	r3, r3, r2
 1361 0016 1B01     		lsls	r3, r3, #4
 1362 0018 B033     		adds	r3, r3, #176
 1363 001a A74A     		ldr	r2, .L148
 1364 001c 1344     		add	r3, r3, r2
 1365 001e 3B62     		str	r3, [r7, #32]
 618:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1366              		.loc 1 618 0
 1367 0020 3B6A     		ldr	r3, [r7, #32]
 1368 0022 93F86030 		ldrb	r3, [r3, #96]
 1369 0026 FB77     		strb	r3, [r7, #31]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 36


 619:..\src/interruptions.c ****     
 620:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 621:..\src/interruptions.c ****                                                         // 1 EMG 1
 622:..\src/interruptions.c ****                                                         // 2 EMG 2
 623:..\src/interruptions.c ****                                                         // wait for both to get down
 624:..\src/interruptions.c ****     
 625:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1370              		.loc 1 625 0
 1371 0028 A44B     		ldr	r3, .L148+4
 1372 002a 1B68     		ldr	r3, [r3]
 1373 002c A24A     		ldr	r2, .L148
 1374 002e B2F8F021 		ldrh	r2, [r2, #496]
 1375 0032 9B1A     		subs	r3, r3, r2
 1376 0034 BB61     		str	r3, [r7, #24]
 626:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1377              		.loc 1 626 0
 1378 0036 A14B     		ldr	r3, .L148+4
 1379 0038 5B68     		ldr	r3, [r3, #4]
 1380 003a 9F4A     		ldr	r2, .L148
 1381 003c B2F8F221 		ldrh	r2, [r2, #498]
 1382 0040 9B1A     		subs	r3, r3, r2
 1383 0042 7B61     		str	r3, [r7, #20]
 627:..\src/interruptions.c ****     
 628:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 629:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1384              		.loc 1 629 0
 1385 0044 3B6A     		ldr	r3, [r7, #32]
 1386 0046 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1387 004a 013B     		subs	r3, r3, #1
 1388 004c 062B     		cmp	r3, #6
 1389 004e 00F24982 		bhi	.L139
 1390 0052 01A2     		adr	r2, .L87
 1391 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1392              		.p2align 2
 1393              	.L87:
 1394 0058 75000000 		.word	.L86+1
 1395 005c 21020000 		.word	.L88+1
 1396 0060 C9020000 		.word	.L89+1
 1397 0064 31030000 		.word	.L90+1
 1398 0068 01040000 		.word	.L91+1
 1399 006c 4D010000 		.word	.L92+1
 1400 0070 5B020000 		.word	.L93+1
 1401              		.p2align 1
 1402              	.L86:
 630:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 631:..\src/interruptions.c **** 
 632:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 633:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 634:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1403              		.loc 1 634 0
 1404 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1405 0076 9049     		ldr	r1, .L148
 1406 0078 1346     		mov	r3, r2
 1407 007a 5B00     		lsls	r3, r3, #1
 1408 007c 1344     		add	r3, r3, r2
 1409 007e 1B01     		lsls	r3, r3, #4
 1410 0080 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 37


 1411 0082 03F5D873 		add	r3, r3, #432
 1412 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1413 0088 002B     		cmp	r3, #0
 1414 008a 19D0     		beq	.L94
 635:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1415              		.loc 1 635 0
 1416 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1417 008e 8C4A     		ldr	r2, .L148+8
 1418 0090 3421     		movs	r1, #52
 1419 0092 01FB03F3 		mul	r3, r1, r3
 1420 0096 1344     		add	r3, r3, r2
 1421 0098 0833     		adds	r3, r3, #8
 1422 009a 1968     		ldr	r1, [r3]
 1423 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1424 009e 8648     		ldr	r0, .L148
 1425 00a0 1346     		mov	r3, r2
 1426 00a2 5B00     		lsls	r3, r3, #1
 1427 00a4 1344     		add	r3, r3, r2
 1428 00a6 1B01     		lsls	r3, r3, #4
 1429 00a8 0344     		add	r3, r3, r0
 1430 00aa 03F5DA73 		add	r3, r3, #436
 1431 00ae 93F90030 		ldrsb	r3, [r3]
 1432 00b2 03FB01F2 		mul	r2, r3, r1
 1433 00b6 3B6A     		ldr	r3, [r7, #32]
 1434 00b8 5B6B     		ldr	r3, [r3, #52]
 1435 00ba 1344     		add	r3, r3, r2
 1436 00bc 7B62     		str	r3, [r7, #36]
 1437 00be 18E0     		b	.L95
 1438              	.L94:
 636:..\src/interruptions.c ****             else
 637:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1439              		.loc 1 637 0
 1440 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1441 00c2 7F4A     		ldr	r2, .L148+8
 1442 00c4 3421     		movs	r1, #52
 1443 00c6 01FB03F3 		mul	r3, r1, r3
 1444 00ca 1344     		add	r3, r3, r2
 1445 00cc 0433     		adds	r3, r3, #4
 1446 00ce 1968     		ldr	r1, [r3]
 1447 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1448 00d2 7948     		ldr	r0, .L148
 1449 00d4 1346     		mov	r3, r2
 1450 00d6 5B00     		lsls	r3, r3, #1
 1451 00d8 1344     		add	r3, r3, r2
 1452 00da 1B01     		lsls	r3, r3, #4
 1453 00dc 0344     		add	r3, r3, r0
 1454 00de 03F5DA73 		add	r3, r3, #436
 1455 00e2 93F90030 		ldrsb	r3, [r3]
 1456 00e6 03FB01F2 		mul	r2, r3, r1
 1457 00ea 3B6A     		ldr	r3, [r7, #32]
 1458 00ec 5B6B     		ldr	r3, [r3, #52]
 1459 00ee 1344     		add	r3, r3, r2
 1460 00f0 7B62     		str	r3, [r7, #36]
 1461              	.L95:
 638:..\src/interruptions.c ****             
 639:..\src/interruptions.c **** 
 640:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 38


 641:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1462              		.loc 1 641 0
 1463 00f2 7B68     		ldr	r3, [r7, #4]
 1464 00f4 1B68     		ldr	r3, [r3]
 1465 00f6 7A6A     		ldr	r2, [r7, #36]
 1466 00f8 D21A     		subs	r2, r2, r3
 1467 00fa 3B6A     		ldr	r3, [r7, #32]
 1468 00fc 1B6C     		ldr	r3, [r3, #64]
 1469 00fe 9A42     		cmp	r2, r3
 1470 0100 0BDD     		ble	.L96
 1471              		.loc 1 641 0 is_stmt 0 discriminator 1
 1472 0102 3B6A     		ldr	r3, [r7, #32]
 1473 0104 1B6C     		ldr	r3, [r3, #64]
 1474 0106 002B     		cmp	r3, #0
 1475 0108 07D0     		beq	.L96
 642:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1476              		.loc 1 642 0 is_stmt 1
 1477 010a BB68     		ldr	r3, [r7, #8]
 1478 010c 1A68     		ldr	r2, [r3]
 1479 010e 3B6A     		ldr	r3, [r7, #32]
 1480 0110 1B6C     		ldr	r3, [r3, #64]
 1481 0112 1A44     		add	r2, r2, r3
 1482 0114 BB68     		ldr	r3, [r7, #8]
 1483 0116 1A60     		str	r2, [r3]
 1484 0118 17E0     		b	.L97
 1485              	.L96:
 643:..\src/interruptions.c ****             else {
 644:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1486              		.loc 1 644 0
 1487 011a 7B68     		ldr	r3, [r7, #4]
 1488 011c 1B68     		ldr	r3, [r3]
 1489 011e 7A6A     		ldr	r2, [r7, #36]
 1490 0120 D21A     		subs	r2, r2, r3
 1491 0122 3B6A     		ldr	r3, [r7, #32]
 1492 0124 DB6B     		ldr	r3, [r3, #60]
 1493 0126 9A42     		cmp	r2, r3
 1494 0128 0BDA     		bge	.L98
 1495              		.loc 1 644 0 is_stmt 0 discriminator 1
 1496 012a 3B6A     		ldr	r3, [r7, #32]
 1497 012c DB6B     		ldr	r3, [r3, #60]
 1498 012e 002B     		cmp	r3, #0
 1499 0130 07D0     		beq	.L98
 645:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1500              		.loc 1 645 0 is_stmt 1
 1501 0132 BB68     		ldr	r3, [r7, #8]
 1502 0134 1A68     		ldr	r2, [r3]
 1503 0136 3B6A     		ldr	r3, [r7, #32]
 1504 0138 DB6B     		ldr	r3, [r3, #60]
 1505 013a 1A44     		add	r2, r2, r3
 1506 013c BB68     		ldr	r3, [r7, #8]
 1507 013e 1A60     		str	r2, [r3]
 1508 0140 03E0     		b	.L97
 1509              	.L98:
 646:..\src/interruptions.c ****                 else
 647:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1510              		.loc 1 647 0
 1511 0142 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 39


 1512 0144 7A6A     		ldr	r2, [r7, #36]
 1513 0146 1A60     		str	r2, [r3]
 648:..\src/interruptions.c ****             }
 649:..\src/interruptions.c ****             break;
 1514              		.loc 1 649 0
 1515 0148 D9E1     		b	.L99
 1516              	.L97:
 1517 014a D8E1     		b	.L99
 1518              	.L92:
 650:..\src/interruptions.c ****         
 651:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 652:..\src/interruptions.c ****             
 653:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1519              		.loc 1 653 0
 1520 014c 5A4B     		ldr	r3, .L148
 1521 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1522 0152 002B     		cmp	r3, #0
 1523 0154 57D1     		bne	.L100
 654:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 655:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1524              		.loc 1 655 0
 1525 0156 7B68     		ldr	r3, [r7, #4]
 1526 0158 1A68     		ldr	r2, [r3]
 1527 015a BB68     		ldr	r3, [r7, #8]
 1528 015c 1A60     		str	r2, [r3]
 656:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1529              		.loc 1 656 0
 1530 015e 574B     		ldr	r3, .L148+4
 1531 0160 1B6A     		ldr	r3, [r3, #32]
 1532 0162 B3F52F7F 		cmp	r3, #700
 1533 0166 45DC     		bgt	.L101
 1534              	.LBB3:
 657:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1535              		.loc 1 657 0
 1536 0168 544B     		ldr	r3, .L148+4
 1537 016a 1B6A     		ldr	r3, [r3, #32]
 1538 016c 524A     		ldr	r2, .L148
 1539 016e B2F9B222 		ldrsh	r2, [r2, #690]
 1540 0172 9B1A     		subs	r3, r3, r2
 1541 0174 3B61     		str	r3, [r7, #16]
 658:..\src/interruptions.c **** 
 659:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1542              		.loc 1 659 0
 1543 0176 514B     		ldr	r3, .L148+4
 1544 0178 1B6A     		ldr	r3, [r3, #32]
 1545 017a 4F4A     		ldr	r2, .L148
 1546 017c B2F9B222 		ldrsh	r2, [r2, #690]
 1547 0180 9342     		cmp	r3, r2
 1548 0182 13DD     		ble	.L102
 660:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1549              		.loc 1 660 0
 1550 0184 BB68     		ldr	r3, [r7, #8]
 1551 0186 1A68     		ldr	r2, [r3]
 1552 0188 4B4B     		ldr	r3, .L148
 1553 018a B3F8B032 		ldrh	r3, [r3, #688]
 1554 018e 1946     		mov	r1, r3
 1555 0190 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 40


 1556 0192 03FB01F1 		mul	r1, r3, r1
 1557 0196 484B     		ldr	r3, .L148
 1558 0198 B3F9B232 		ldrsh	r3, [r3, #690]
 1559 019c C3F58063 		rsb	r3, r3, #1024
 1560 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1561 01a4 1A44     		add	r2, r2, r3
 1562 01a6 BB68     		ldr	r3, [r7, #8]
 1563 01a8 1A60     		str	r2, [r3]
 1564              	.LBE3:
 661:..\src/interruptions.c ****                     }
 662:..\src/interruptions.c ****                     else {
 663:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 664:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 665:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 666:..\src/interruptions.c ****                         }
 667:..\src/interruptions.c ****                     }
 668:..\src/interruptions.c ****                 }
 669:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 670:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 671:..\src/interruptions.c ****                 }
 672:..\src/interruptions.c ****             }
 673:..\src/interruptions.c ****             else {
 674:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 675:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 676:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 677:..\src/interruptions.c ****                 }
 678:..\src/interruptions.c ****             }
 679:..\src/interruptions.c ****             break;
 1565              		.loc 1 679 0
 1566 01aa 9DE1     		b	.L140
 1567              	.L102:
 1568              	.LBB4:
 663:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1569              		.loc 1 663 0
 1570 01ac 434B     		ldr	r3, .L148+4
 1571 01ae 1B6A     		ldr	r3, [r3, #32]
 1572 01b0 414A     		ldr	r2, .L148
 1573 01b2 B2F9B222 		ldrsh	r2, [r2, #690]
 1574 01b6 1344     		add	r3, r3, r2
 1575 01b8 3B61     		str	r3, [r7, #16]
 664:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1576              		.loc 1 664 0
 1577 01ba 404B     		ldr	r3, .L148+4
 1578 01bc 1A6A     		ldr	r2, [r3, #32]
 1579 01be 3E4B     		ldr	r3, .L148
 1580 01c0 B3F9B232 		ldrsh	r3, [r3, #690]
 1581 01c4 5B42     		negs	r3, r3
 1582 01c6 9A42     		cmp	r2, r3
 1583 01c8 80F28E81 		bge	.L140
 665:..\src/interruptions.c ****                         }
 1584              		.loc 1 665 0
 1585 01cc BB68     		ldr	r3, [r7, #8]
 1586 01ce 1A68     		ldr	r2, [r3]
 1587 01d0 394B     		ldr	r3, .L148
 1588 01d2 B3F8B032 		ldrh	r3, [r3, #688]
 1589 01d6 1946     		mov	r1, r3
 1590 01d8 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 41


 1591 01da 03FB01F1 		mul	r1, r3, r1
 1592 01de 364B     		ldr	r3, .L148
 1593 01e0 B3F9B232 		ldrsh	r3, [r3, #690]
 1594 01e4 C3F58063 		rsb	r3, r3, #1024
 1595 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1596 01ec 1A44     		add	r2, r2, r3
 1597 01ee BB68     		ldr	r3, [r7, #8]
 1598 01f0 1A60     		str	r2, [r3]
 1599              	.LBE4:
 1600              		.loc 1 679 0
 1601 01f2 79E1     		b	.L140
 1602              	.L101:
 670:..\src/interruptions.c ****                 }
 1603              		.loc 1 670 0
 1604 01f4 BB68     		ldr	r3, [r7, #8]
 1605 01f6 1B68     		ldr	r3, [r3]
 1606 01f8 324A     		ldr	r2, .L148+12
 1607 01fa B2F8B022 		ldrh	r2, [r2, #688]
 1608 01fe 9A1A     		subs	r2, r3, r2
 1609 0200 BB68     		ldr	r3, [r7, #8]
 1610 0202 1A60     		str	r2, [r3]
 1611              		.loc 1 679 0
 1612 0204 70E1     		b	.L140
 1613              	.L100:
 675:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1614              		.loc 1 675 0
 1615 0206 2C4B     		ldr	r3, .L148
 1616 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1617 020c 042B     		cmp	r3, #4
 1618 020e 40F06B81 		bne	.L140
 676:..\src/interruptions.c ****                 }
 1619              		.loc 1 676 0
 1620 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1621 0214 7A68     		ldr	r2, [r7, #4]
 1622 0216 B968     		ldr	r1, [r7, #8]
 1623 0218 1846     		mov	r0, r3
 1624 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1625              		.loc 1 679 0
 1626 021e 63E1     		b	.L140
 1627              	.L88:
 680:..\src/interruptions.c ****             
 681:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 682:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1628              		.loc 1 682 0
 1629 0220 BB69     		ldr	r3, [r7, #24]
 1630 0222 002B     		cmp	r3, #0
 1631 0224 15DD     		ble	.L106
 683:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1632              		.loc 1 683 0
 1633 0226 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1634 0228 2649     		ldr	r1, .L148+12
 1635 022a 1346     		mov	r3, r2
 1636 022c DB00     		lsls	r3, r3, #3
 1637 022e 9B1A     		subs	r3, r3, r2
 1638 0230 1B01     		lsls	r3, r3, #4
 1639 0232 0B44     		add	r3, r3, r1
 1640 0234 E833     		adds	r3, r3, #232
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 42


 1641 0236 1B68     		ldr	r3, [r3]
 1642 0238 BA69     		ldr	r2, [r7, #24]
 1643 023a 02FB03F2 		mul	r2, r2, r3
 1644 023e 1E4B     		ldr	r3, .L148
 1645 0240 B3F8F031 		ldrh	r3, [r3, #496]
 1646 0244 C3F58063 		rsb	r3, r3, #1024
 1647 0248 92FBF3F2 		sdiv	r2, r2, r3
 1648 024c BB68     		ldr	r3, [r7, #8]
 1649 024e 1A60     		str	r2, [r3]
 684:..\src/interruptions.c ****             else
 685:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 686:..\src/interruptions.c ****             break;
 1650              		.loc 1 686 0
 1651 0250 55E1     		b	.L99
 1652              	.L106:
 685:..\src/interruptions.c ****             break;
 1653              		.loc 1 685 0
 1654 0252 BB68     		ldr	r3, [r7, #8]
 1655 0254 0022     		movs	r2, #0
 1656 0256 1A60     		str	r2, [r3]
 1657              		.loc 1 686 0
 1658 0258 51E1     		b	.L99
 1659              	.L93:
 687:..\src/interruptions.c ****         
 688:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 689:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1660              		.loc 1 689 0
 1661 025a BB69     		ldr	r3, [r7, #24]
 1662 025c 002B     		cmp	r3, #0
 1663 025e 1FDD     		ble	.L108
 690:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1664              		.loc 1 690 0
 1665 0260 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1666 0262 1849     		ldr	r1, .L148+12
 1667 0264 1346     		mov	r3, r2
 1668 0266 DB00     		lsls	r3, r3, #3
 1669 0268 9B1A     		subs	r3, r3, r2
 1670 026a 1B01     		lsls	r3, r3, #4
 1671 026c 0B44     		add	r3, r3, r1
 1672 026e E833     		adds	r3, r3, #232
 1673 0270 1968     		ldr	r1, [r3]
 1674 0272 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1675 0274 1348     		ldr	r0, .L148+12
 1676 0276 1346     		mov	r3, r2
 1677 0278 DB00     		lsls	r3, r3, #3
 1678 027a 9B1A     		subs	r3, r3, r2
 1679 027c 1B01     		lsls	r3, r3, #4
 1680 027e 0344     		add	r3, r3, r0
 1681 0280 E833     		adds	r3, r3, #232
 1682 0282 1B68     		ldr	r3, [r3]
 1683 0284 BA69     		ldr	r2, [r7, #24]
 1684 0286 02FB03F2 		mul	r2, r2, r3
 1685 028a 0B4B     		ldr	r3, .L148
 1686 028c B3F8F031 		ldrh	r3, [r3, #496]
 1687 0290 C3F58063 		rsb	r3, r3, #1024
 1688 0294 92FBF3F3 		sdiv	r3, r2, r3
 1689 0298 CA1A     		subs	r2, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 43


 1690 029a BB68     		ldr	r3, [r7, #8]
 1691 029c 1A60     		str	r2, [r3]
 691:..\src/interruptions.c ****             else
 692:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 693:..\src/interruptions.c ****             break;
 1692              		.loc 1 693 0
 1693 029e 2EE1     		b	.L99
 1694              	.L108:
 692:..\src/interruptions.c ****             break;
 1695              		.loc 1 692 0
 1696 02a0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1697 02a2 0849     		ldr	r1, .L148+12
 1698 02a4 1346     		mov	r3, r2
 1699 02a6 DB00     		lsls	r3, r3, #3
 1700 02a8 9B1A     		subs	r3, r3, r2
 1701 02aa 1B01     		lsls	r3, r3, #4
 1702 02ac 0B44     		add	r3, r3, r1
 1703 02ae E833     		adds	r3, r3, #232
 1704 02b0 1A68     		ldr	r2, [r3]
 1705 02b2 BB68     		ldr	r3, [r7, #8]
 1706 02b4 1A60     		str	r2, [r3]
 1707              		.loc 1 693 0
 1708 02b6 22E1     		b	.L99
 1709              	.L149:
 1710              		.align	2
 1711              	.L148:
 1712 02b8 00000000 		.word	c_mem
 1713 02bc 00000000 		.word	g_adc_meas
 1714 02c0 00000000 		.word	g_meas
 1715 02c4 00000000 		.word	g_mem
 1716              	.L89:
 694:..\src/interruptions.c **** 
 695:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 696:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1717              		.loc 1 696 0
 1718 02c8 7B68     		ldr	r3, [r7, #4]
 1719 02ca 1A68     		ldr	r2, [r3]
 1720 02cc BB68     		ldr	r3, [r7, #8]
 1721 02ce 1A60     		str	r2, [r3]
 697:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1722              		.loc 1 697 0
 1723 02d0 BB69     		ldr	r3, [r7, #24]
 1724 02d2 002B     		cmp	r3, #0
 1725 02d4 13DD     		ble	.L110
 698:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1726              		.loc 1 698 0
 1727 02d6 7B68     		ldr	r3, [r7, #4]
 1728 02d8 1A68     		ldr	r2, [r3]
 1729 02da 854B     		ldr	r3, .L150
 1730 02dc 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1731 02e0 1946     		mov	r1, r3
 1732 02e2 BB69     		ldr	r3, [r7, #24]
 1733 02e4 03FB01F3 		mul	r3, r3, r1
 1734 02e8 5900     		lsls	r1, r3, #1
 1735 02ea 824B     		ldr	r3, .L150+4
 1736 02ec B3F8F031 		ldrh	r3, [r3, #496]
 1737 02f0 C3F58063 		rsb	r3, r3, #1024
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 44


 1738 02f4 91FBF3F3 		sdiv	r3, r1, r3
 1739 02f8 1A44     		add	r2, r2, r3
 1740 02fa BB68     		ldr	r3, [r7, #8]
 1741 02fc 1A60     		str	r2, [r3]
 1742              	.L110:
 699:..\src/interruptions.c ****             }
 700:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1743              		.loc 1 700 0
 1744 02fe 7B69     		ldr	r3, [r7, #20]
 1745 0300 002B     		cmp	r3, #0
 1746 0302 40F3F380 		ble	.L141
 701:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1747              		.loc 1 701 0
 1748 0306 7B68     		ldr	r3, [r7, #4]
 1749 0308 1A68     		ldr	r2, [r3]
 1750 030a 794B     		ldr	r3, .L150
 1751 030c 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1752 0310 1946     		mov	r1, r3
 1753 0312 7B69     		ldr	r3, [r7, #20]
 1754 0314 03FB01F3 		mul	r3, r3, r1
 1755 0318 5900     		lsls	r1, r3, #1
 1756 031a 764B     		ldr	r3, .L150+4
 1757 031c B3F8F231 		ldrh	r3, [r3, #498]
 1758 0320 C3F58063 		rsb	r3, r3, #1024
 1759 0324 91FBF3F3 		sdiv	r3, r1, r3
 1760 0328 D21A     		subs	r2, r2, r3
 1761 032a BB68     		ldr	r3, [r7, #8]
 1762 032c 1A60     		str	r2, [r3]
 702:..\src/interruptions.c ****             }
 703:..\src/interruptions.c ****             break;
 1763              		.loc 1 703 0
 1764 032e DDE0     		b	.L141
 1765              	.L90:
 704:..\src/interruptions.c **** 
 705:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 706:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1766              		.loc 1 706 0
 1767 0330 7B68     		ldr	r3, [r7, #4]
 1768 0332 1A68     		ldr	r2, [r3]
 1769 0334 BB68     		ldr	r3, [r7, #8]
 1770 0336 1A60     		str	r2, [r3]
 707:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1771              		.loc 1 707 0
 1772 0338 6E4B     		ldr	r3, .L150+4
 1773 033a 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1774 033e 042B     		cmp	r3, #4
 1775 0340 00F0DC80 		beq	.L142
 708:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1776              		.loc 1 708 0
 1777 0344 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1778 0346 6C4A     		ldr	r2, .L150+8
 1779 0348 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1780 034a 012B     		cmp	r3, #1
 1781 034c 1CD0     		beq	.L114
 1782 034e 022B     		cmp	r3, #2
 1783 0350 37D0     		beq	.L115
 1784 0352 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 45


 1785 0354 00D0     		beq	.L116
 709:..\src/interruptions.c ****                     case 0:
 710:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 711:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 712:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 713:..\src/interruptions.c ****                             break;
 714:..\src/interruptions.c ****                         }
 715:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 716:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 717:..\src/interruptions.c ****                             break;
 718:..\src/interruptions.c ****                         }
 719:..\src/interruptions.c ****                         break;
 720:..\src/interruptions.c **** 
 721:..\src/interruptions.c ****                     case 1:
 722:..\src/interruptions.c ****                         // EMG 1 is first
 723:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 724:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 725:..\src/interruptions.c ****                             break;
 726:..\src/interruptions.c ****                         }
 727:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 728:..\src/interruptions.c ****                         break;
 729:..\src/interruptions.c **** 
 730:..\src/interruptions.c ****                     case 2:
 731:..\src/interruptions.c ****                         // EMG 2 is first
 732:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 733:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 734:..\src/interruptions.c ****                             break;
 735:..\src/interruptions.c ****                         }
 736:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 737:..\src/interruptions.c ****                         break;
 738:..\src/interruptions.c **** 
 739:..\src/interruptions.c ****                     default:
 740:..\src/interruptions.c ****                         break;
 1786              		.loc 1 740 0
 1787 0356 52E0     		b	.L112
 1788              	.L116:
 711:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1789              		.loc 1 711 0
 1790 0358 BB69     		ldr	r3, [r7, #24]
 1791 035a 002B     		cmp	r3, #0
 1792 035c 08DD     		ble	.L117
 711:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1793              		.loc 1 711 0 is_stmt 0 discriminator 1
 1794 035e BA69     		ldr	r2, [r7, #24]
 1795 0360 7B69     		ldr	r3, [r7, #20]
 1796 0362 9A42     		cmp	r2, r3
 1797 0364 04DD     		ble	.L117
 712:..\src/interruptions.c ****                             break;
 1798              		.loc 1 712 0 is_stmt 1
 1799 0366 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1800 0368 634A     		ldr	r2, .L150+8
 1801 036a 0121     		movs	r1, #1
 1802 036c D154     		strb	r1, [r2, r3]
 713:..\src/interruptions.c ****                         }
 1803              		.loc 1 713 0
 1804 036e 46E0     		b	.L112
 1805              	.L117:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 46


 715:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1806              		.loc 1 715 0
 1807 0370 7B69     		ldr	r3, [r7, #20]
 1808 0372 002B     		cmp	r3, #0
 1809 0374 42DD     		ble	.L143
 715:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 1810              		.loc 1 715 0 is_stmt 0 discriminator 1
 1811 0376 7A69     		ldr	r2, [r7, #20]
 1812 0378 BB69     		ldr	r3, [r7, #24]
 1813 037a 9A42     		cmp	r2, r3
 1814 037c 3EDD     		ble	.L143
 716:..\src/interruptions.c ****                             break;
 1815              		.loc 1 716 0 is_stmt 1
 1816 037e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1817 0380 5D4A     		ldr	r2, .L150+8
 1818 0382 0221     		movs	r1, #2
 1819 0384 D154     		strb	r1, [r2, r3]
 717:..\src/interruptions.c ****                         }
 1820              		.loc 1 717 0
 1821 0386 3AE0     		b	.L112
 1822              	.L114:
 723:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1823              		.loc 1 723 0
 1824 0388 BB69     		ldr	r3, [r7, #24]
 1825 038a 002B     		cmp	r3, #0
 1826 038c 04DA     		bge	.L120
 724:..\src/interruptions.c ****                             break;
 1827              		.loc 1 724 0
 1828 038e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1829 0390 594A     		ldr	r2, .L150+8
 1830 0392 0021     		movs	r1, #0
 1831 0394 D154     		strb	r1, [r2, r3]
 725:..\src/interruptions.c ****                         }
 1832              		.loc 1 725 0
 1833 0396 32E0     		b	.L112
 1834              	.L120:
 727:..\src/interruptions.c ****                         break;
 1835              		.loc 1 727 0
 1836 0398 7B68     		ldr	r3, [r7, #4]
 1837 039a 1A68     		ldr	r2, [r3]
 1838 039c 544B     		ldr	r3, .L150
 1839 039e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1840 03a2 1946     		mov	r1, r3
 1841 03a4 BB69     		ldr	r3, [r7, #24]
 1842 03a6 03FB01F3 		mul	r3, r3, r1
 1843 03aa 9900     		lsls	r1, r3, #2
 1844 03ac 514B     		ldr	r3, .L150+4
 1845 03ae B3F8F031 		ldrh	r3, [r3, #496]
 1846 03b2 C3F58063 		rsb	r3, r3, #1024
 1847 03b6 91FBF3F3 		sdiv	r3, r1, r3
 1848 03ba 1A44     		add	r2, r2, r3
 1849 03bc BB68     		ldr	r3, [r7, #8]
 1850 03be 1A60     		str	r2, [r3]
 728:..\src/interruptions.c **** 
 1851              		.loc 1 728 0
 1852 03c0 1DE0     		b	.L112
 1853              	.L115:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 47


 732:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 1854              		.loc 1 732 0
 1855 03c2 7B69     		ldr	r3, [r7, #20]
 1856 03c4 002B     		cmp	r3, #0
 1857 03c6 04DA     		bge	.L121
 733:..\src/interruptions.c ****                             break;
 1858              		.loc 1 733 0
 1859 03c8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1860 03ca 4B4A     		ldr	r2, .L150+8
 1861 03cc 0021     		movs	r1, #0
 1862 03ce D154     		strb	r1, [r2, r3]
 734:..\src/interruptions.c ****                         }
 1863              		.loc 1 734 0
 1864 03d0 15E0     		b	.L112
 1865              	.L121:
 736:..\src/interruptions.c ****                         break;
 1866              		.loc 1 736 0
 1867 03d2 7B68     		ldr	r3, [r7, #4]
 1868 03d4 1A68     		ldr	r2, [r3]
 1869 03d6 464B     		ldr	r3, .L150
 1870 03d8 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 1871 03dc 1946     		mov	r1, r3
 1872 03de 7B69     		ldr	r3, [r7, #20]
 1873 03e0 03FB01F3 		mul	r3, r3, r1
 1874 03e4 9900     		lsls	r1, r3, #2
 1875 03e6 434B     		ldr	r3, .L150+4
 1876 03e8 B3F8F231 		ldrh	r3, [r3, #498]
 1877 03ec C3F58063 		rsb	r3, r3, #1024
 1878 03f0 91FBF3F3 		sdiv	r3, r1, r3
 1879 03f4 D21A     		subs	r2, r2, r3
 1880 03f6 BB68     		ldr	r3, [r7, #8]
 1881 03f8 1A60     		str	r2, [r3]
 737:..\src/interruptions.c **** 
 1882              		.loc 1 737 0
 1883 03fa 00E0     		b	.L112
 1884              	.L143:
 719:..\src/interruptions.c **** 
 1885              		.loc 1 719 0
 1886 03fc 00BF     		nop
 1887              	.L112:
 741:..\src/interruptions.c ****                 }
 742:..\src/interruptions.c ****             }
 743:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 744:..\src/interruptions.c ****                 //FSM for choosing sinergy
 745:..\src/interruptions.c ****             }
 746:..\src/interruptions.c ****             break;
 1888              		.loc 1 746 0 discriminator 5
 1889 03fe 7DE0     		b	.L142
 1890              	.L91:
 747:..\src/interruptions.c **** 
 748:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 749:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1891              		.loc 1 749 0
 1892 0400 7B68     		ldr	r3, [r7, #4]
 1893 0402 1A68     		ldr	r2, [r3]
 1894 0404 BB68     		ldr	r3, [r7, #8]
 1895 0406 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 48


 750:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 1896              		.loc 1 750 0
 1897 0408 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1898 040a 3B4A     		ldr	r2, .L150+8
 1899 040c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1900 040e 012B     		cmp	r3, #1
 1901 0410 1CD0     		beq	.L123
 1902 0412 022B     		cmp	r3, #2
 1903 0414 3DD0     		beq	.L124
 1904 0416 002B     		cmp	r3, #0
 1905 0418 00D0     		beq	.L125
 751:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 752:..\src/interruptions.c ****                 case 0:
 753:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 754:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 755:..\src/interruptions.c ****                         break;
 756:..\src/interruptions.c ****                     }
 757:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 758:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 759:..\src/interruptions.c ****                         break;
 760:..\src/interruptions.c ****                     }
 761:..\src/interruptions.c ****                     break;
 762:..\src/interruptions.c **** 
 763:..\src/interruptions.c ****                 // EMG 1 is first
 764:..\src/interruptions.c ****                 case 1:
 765:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 766:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 767:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 768:..\src/interruptions.c ****                         break;
 769:..\src/interruptions.c ****                     }
 770:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 771:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 772:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 773:..\src/interruptions.c ****                     
 774:..\src/interruptions.c ****                     break;
 775:..\src/interruptions.c **** 
 776:..\src/interruptions.c ****                 // EMG 2 is first
 777:..\src/interruptions.c ****                 case 2:
 778:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 779:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 780:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 781:..\src/interruptions.c ****                         break;
 782:..\src/interruptions.c ****                     }
 783:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 784:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 785:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 786:..\src/interruptions.c ****                     }
 787:..\src/interruptions.c ****                     break;
 788:..\src/interruptions.c **** 
 789:..\src/interruptions.c ****                 default:
 790:..\src/interruptions.c ****                     break;
 1906              		.loc 1 790 0
 1907 041a 62E0     		b	.L127
 1908              	.L125:
 753:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1909              		.loc 1 753 0
 1910 041c BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 49


 1911 041e 002B     		cmp	r3, #0
 1912 0420 08DD     		ble	.L126
 753:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 1913              		.loc 1 753 0 is_stmt 0 discriminator 1
 1914 0422 BA69     		ldr	r2, [r7, #24]
 1915 0424 7B69     		ldr	r3, [r7, #20]
 1916 0426 9A42     		cmp	r2, r3
 1917 0428 04DD     		ble	.L126
 754:..\src/interruptions.c ****                         break;
 1918              		.loc 1 754 0 is_stmt 1
 1919 042a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1920 042c 324A     		ldr	r2, .L150+8
 1921 042e 0121     		movs	r1, #1
 1922 0430 D154     		strb	r1, [r2, r3]
 755:..\src/interruptions.c ****                     }
 1923              		.loc 1 755 0
 1924 0432 56E0     		b	.L127
 1925              	.L126:
 757:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1926              		.loc 1 757 0
 1927 0434 7B69     		ldr	r3, [r7, #20]
 1928 0436 002B     		cmp	r3, #0
 1929 0438 4EDD     		ble	.L144
 757:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 1930              		.loc 1 757 0 is_stmt 0 discriminator 1
 1931 043a 7A69     		ldr	r2, [r7, #20]
 1932 043c BB69     		ldr	r3, [r7, #24]
 1933 043e 9A42     		cmp	r2, r3
 1934 0440 4ADD     		ble	.L144
 758:..\src/interruptions.c ****                         break;
 1935              		.loc 1 758 0 is_stmt 1
 1936 0442 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1937 0444 2C4A     		ldr	r2, .L150+8
 1938 0446 0221     		movs	r1, #2
 1939 0448 D154     		strb	r1, [r2, r3]
 759:..\src/interruptions.c ****                     }
 1940              		.loc 1 759 0
 1941 044a 4AE0     		b	.L127
 1942              	.L123:
 766:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1943              		.loc 1 766 0
 1944 044c BB69     		ldr	r3, [r7, #24]
 1945 044e 002B     		cmp	r3, #0
 1946 0450 07DA     		bge	.L129
 766:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1947              		.loc 1 766 0 is_stmt 0 discriminator 1
 1948 0452 7B69     		ldr	r3, [r7, #20]
 1949 0454 002B     		cmp	r3, #0
 1950 0456 04DA     		bge	.L129
 767:..\src/interruptions.c ****                         break;
 1951              		.loc 1 767 0 is_stmt 1
 1952 0458 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1953 045a 274A     		ldr	r2, .L150+8
 1954 045c 0021     		movs	r1, #0
 1955 045e D154     		strb	r1, [r2, r3]
 768:..\src/interruptions.c ****                     }
 1956              		.loc 1 768 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 50


 1957 0460 3FE0     		b	.L127
 1958              	.L129:
 771:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 1959              		.loc 1 771 0
 1960 0462 BB69     		ldr	r3, [r7, #24]
 1961 0464 002B     		cmp	r3, #0
 1962 0466 39DD     		ble	.L145
 772:..\src/interruptions.c ****                     
 1963              		.loc 1 772 0
 1964 0468 7B68     		ldr	r3, [r7, #4]
 1965 046a 1A68     		ldr	r2, [r3]
 1966 046c 204B     		ldr	r3, .L150
 1967 046e 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 1968 0472 1946     		mov	r1, r3
 1969 0474 BB69     		ldr	r3, [r7, #24]
 1970 0476 03FB01F3 		mul	r3, r3, r1
 1971 047a 9900     		lsls	r1, r3, #2
 1972 047c 1D4B     		ldr	r3, .L150+4
 1973 047e B3F8F031 		ldrh	r3, [r3, #496]
 1974 0482 C3F58063 		rsb	r3, r3, #1024
 1975 0486 91FBF3F3 		sdiv	r3, r1, r3
 1976 048a 1A44     		add	r2, r2, r3
 1977 048c BB68     		ldr	r3, [r7, #8]
 1978 048e 1A60     		str	r2, [r3]
 774:..\src/interruptions.c **** 
 1979              		.loc 1 774 0
 1980 0490 24E0     		b	.L145
 1981              	.L124:
 779:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1982              		.loc 1 779 0
 1983 0492 BB69     		ldr	r3, [r7, #24]
 1984 0494 002B     		cmp	r3, #0
 1985 0496 07DA     		bge	.L131
 779:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 1986              		.loc 1 779 0 is_stmt 0 discriminator 1
 1987 0498 7B69     		ldr	r3, [r7, #20]
 1988 049a 002B     		cmp	r3, #0
 1989 049c 04DA     		bge	.L131
 780:..\src/interruptions.c ****                         break;
 1990              		.loc 1 780 0 is_stmt 1
 1991 049e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1992 04a0 154A     		ldr	r2, .L150+8
 1993 04a2 0021     		movs	r1, #0
 1994 04a4 D154     		strb	r1, [r2, r3]
 781:..\src/interruptions.c ****                     }
 1995              		.loc 1 781 0
 1996 04a6 1CE0     		b	.L127
 1997              	.L131:
 784:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 1998              		.loc 1 784 0
 1999 04a8 7B69     		ldr	r3, [r7, #20]
 2000 04aa 002B     		cmp	r3, #0
 2001 04ac 18DD     		ble	.L146
 785:..\src/interruptions.c ****                     }
 2002              		.loc 1 785 0
 2003 04ae 7B68     		ldr	r3, [r7, #4]
 2004 04b0 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 51


 2005 04b2 104B     		ldr	r3, .L150+4
 2006 04b4 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 2007 04b8 1946     		mov	r1, r3
 2008 04ba 7B69     		ldr	r3, [r7, #20]
 2009 04bc 03FB01F3 		mul	r3, r3, r1
 2010 04c0 9900     		lsls	r1, r3, #2
 2011 04c2 0C4B     		ldr	r3, .L150+4
 2012 04c4 B3F8F231 		ldrh	r3, [r3, #498]
 2013 04c8 C3F58063 		rsb	r3, r3, #1024
 2014 04cc 91FBF3F3 		sdiv	r3, r1, r3
 2015 04d0 D21A     		subs	r2, r2, r3
 2016 04d2 BB68     		ldr	r3, [r7, #8]
 2017 04d4 1A60     		str	r2, [r3]
 787:..\src/interruptions.c **** 
 2018              		.loc 1 787 0
 2019 04d6 03E0     		b	.L146
 2020              	.L144:
 761:..\src/interruptions.c **** 
 2021              		.loc 1 761 0
 2022 04d8 00BF     		nop
 2023 04da 10E0     		b	.L99
 2024              	.L145:
 774:..\src/interruptions.c **** 
 2025              		.loc 1 774 0
 2026 04dc 00BF     		nop
 2027 04de 0EE0     		b	.L99
 2028              	.L146:
 787:..\src/interruptions.c **** 
 2029              		.loc 1 787 0
 2030 04e0 00BF     		nop
 2031              	.L127:
 791:..\src/interruptions.c ****             }
 792:..\src/interruptions.c ****             break;
 2032              		.loc 1 792 0 discriminator 6
 2033 04e2 0CE0     		b	.L99
 2034              	.L139:
 793:..\src/interruptions.c **** 
 794:..\src/interruptions.c ****         default:
 795:..\src/interruptions.c ****             break;
 2035              		.loc 1 795 0
 2036 04e4 00BF     		nop
 2037 04e6 0AE0     		b	.L99
 2038              	.L140:
 679:..\src/interruptions.c ****             
 2039              		.loc 1 679 0
 2040 04e8 00BF     		nop
 2041 04ea 08E0     		b	.L99
 2042              	.L141:
 703:..\src/interruptions.c **** 
 2043              		.loc 1 703 0
 2044 04ec 00BF     		nop
 2045 04ee 06E0     		b	.L99
 2046              	.L151:
 2047              		.align	2
 2048              	.L150:
 2049 04f0 00000000 		.word	g_mem
 2050 04f4 00000000 		.word	c_mem
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 52


 2051 04f8 8C000000 		.word	current_emg.10456
 2052              	.L142:
 746:..\src/interruptions.c **** 
 2053              		.loc 1 746 0
 2054 04fc 00BF     		nop
 2055              	.L99:
 796:..\src/interruptions.c ****     }
 797:..\src/interruptions.c **** 
 798:..\src/interruptions.c ****     // Position limit saturation
 799:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2056              		.loc 1 799 0
 2057 04fe 3B6A     		ldr	r3, [r7, #32]
 2058 0500 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2059 0504 002B     		cmp	r3, #0
 2060 0506 13D0     		beq	.L133
 800:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2061              		.loc 1 800 0
 2062 0508 BB68     		ldr	r3, [r7, #8]
 2063 050a 1A68     		ldr	r2, [r3]
 2064 050c 3B6A     		ldr	r3, [r7, #32]
 2065 050e 5B6B     		ldr	r3, [r3, #52]
 2066 0510 9A42     		cmp	r2, r3
 2067 0512 03DA     		bge	.L134
 801:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2068              		.loc 1 801 0
 2069 0514 3B6A     		ldr	r3, [r7, #32]
 2070 0516 5A6B     		ldr	r2, [r3, #52]
 2071 0518 BB68     		ldr	r3, [r7, #8]
 2072 051a 1A60     		str	r2, [r3]
 2073              	.L134:
 802:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2074              		.loc 1 802 0
 2075 051c BB68     		ldr	r3, [r7, #8]
 2076 051e 1A68     		ldr	r2, [r3]
 2077 0520 3B6A     		ldr	r3, [r7, #32]
 2078 0522 9B6B     		ldr	r3, [r3, #56]
 2079 0524 9A42     		cmp	r2, r3
 2080 0526 03DD     		ble	.L133
 803:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2081              		.loc 1 803 0
 2082 0528 3B6A     		ldr	r3, [r7, #32]
 2083 052a 9A6B     		ldr	r2, [r3, #56]
 2084 052c BB68     		ldr	r3, [r7, #8]
 2085 052e 1A60     		str	r2, [r3]
 2086              	.L133:
 804:..\src/interruptions.c ****     }
 805:..\src/interruptions.c ****     
 806:..\src/interruptions.c ****     // SAFETY
 807:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2087              		.loc 1 807 0
 2088 0530 1D4B     		ldr	r3, .L152
 2089 0532 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2090 0534 012B     		cmp	r3, #1
 2091 0536 02D1     		bne	.L135
 808:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 809:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2092              		.loc 1 809 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 53


 2093 0538 BB68     		ldr	r3, [r7, #8]
 2094 053a 0022     		movs	r2, #0
 2095 053c 1A60     		str	r2, [r3]
 2096              	.L135:
 810:..\src/interruptions.c ****     }      
 811:..\src/interruptions.c ****     
 812:..\src/interruptions.c ****        
 813:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2097              		.loc 1 813 0
 2098 053e 1B4B     		ldr	r3, .L152+4
 2099 0540 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 2100 0544 012B     		cmp	r3, #1
 2101 0546 2AD1     		bne	.L147
 814:..\src/interruptions.c ****         if (rest_enabled == 1){
 2102              		.loc 1 814 0
 2103 0548 194B     		ldr	r3, .L152+8
 2104 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2105 054c 012B     		cmp	r3, #1
 2106 054e 03D1     		bne	.L137
 815:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 816:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2107              		.loc 1 816 0
 2108 0550 184B     		ldr	r3, .L152+12
 2109 0552 1A68     		ldr	r2, [r3]
 2110 0554 BB68     		ldr	r3, [r7, #8]
 2111 0556 1A60     		str	r2, [r3]
 2112              	.L137:
 817:..\src/interruptions.c ****         }
 818:..\src/interruptions.c ****         
 819:..\src/interruptions.c ****         if (forced_open == 1) {
 2113              		.loc 1 819 0
 2114 0558 174B     		ldr	r3, .L152+16
 2115 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2116 055c 012B     		cmp	r3, #1
 2117 055e 1ED1     		bne	.L147
 820:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 821:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2118              		.loc 1 821 0
 2119 0560 7B69     		ldr	r3, [r7, #20]
 2120 0562 002B     		cmp	r3, #0
 2121 0564 13DD     		ble	.L138
 822:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2122              		.loc 1 822 0
 2123 0566 154B     		ldr	r3, .L152+20
 2124 0568 D3F8A022 		ldr	r2, [r3, #672]
 2125 056c 134B     		ldr	r3, .L152+20
 2126 056e D3F8A032 		ldr	r3, [r3, #672]
 2127 0572 7969     		ldr	r1, [r7, #20]
 2128 0574 01FB03F1 		mul	r1, r1, r3
 2129 0578 0C4B     		ldr	r3, .L152+4
 2130 057a B3F8F231 		ldrh	r3, [r3, #498]
 2131 057e C3F58063 		rsb	r3, r3, #1024
 2132 0582 91FBF3F3 		sdiv	r3, r1, r3
 2133 0586 D21A     		subs	r2, r2, r3
 2134 0588 BB68     		ldr	r3, [r7, #8]
 2135 058a 1A60     		str	r2, [r3]
 823:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 54


 824:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 825:..\src/interruptions.c ****                 forced_open = 0;
 826:..\src/interruptions.c ****             }
 827:..\src/interruptions.c ****         }
 828:..\src/interruptions.c ****     }
 829:..\src/interruptions.c **** }
 2136              		.loc 1 829 0
 2137 058c 07E0     		b	.L147
 2138              	.L138:
 824:..\src/interruptions.c ****                 forced_open = 0;
 2139              		.loc 1 824 0
 2140 058e 0B4B     		ldr	r3, .L152+20
 2141 0590 D3F8A022 		ldr	r2, [r3, #672]
 2142 0594 BB68     		ldr	r3, [r7, #8]
 2143 0596 1A60     		str	r2, [r3]
 825:..\src/interruptions.c ****             }
 2144              		.loc 1 825 0
 2145 0598 074B     		ldr	r3, .L152+16
 2146 059a 0022     		movs	r2, #0
 2147 059c 1A70     		strb	r2, [r3]
 2148              	.L147:
 2149              		.loc 1 829 0
 2150 059e 00BF     		nop
 2151 05a0 2837     		adds	r7, r7, #40
 2152              		.cfi_def_cfa_offset 8
 2153 05a2 BD46     		mov	sp, r7
 2154              		.cfi_def_cfa_register 13
 2155              		@ sp needed
 2156 05a4 80BD     		pop	{r7, pc}
 2157              	.L153:
 2158 05a6 00BF     		.align	2
 2159              	.L152:
 2160 05a8 00000000 		.word	battery_low_SoC
 2161 05ac 00000000 		.word	c_mem
 2162 05b0 00000000 		.word	rest_enabled
 2163 05b4 00000000 		.word	rest_pos_curr_ref
 2164 05b8 00000000 		.word	forced_open
 2165 05bc 00000000 		.word	g_mem
 2166              		.cfi_endproc
 2167              	.LFE68:
 2168              		.size	compute_reference, .-compute_reference
 2169              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2170              		.align	2
 2171              		.global	compute_SoftHand_2_motors_joystick_reference
 2172              		.thumb
 2173              		.thumb_func
 2174              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2175              	compute_SoftHand_2_motors_joystick_reference:
 2176              	.LFB69:
 830:..\src/interruptions.c **** 
 831:..\src/interruptions.c **** 
 832:..\src/interruptions.c **** //==============================================================================
 833:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 834:..\src/interruptions.c **** //==============================================================================
 835:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2177              		.loc 1 835 0
 2178              		.cfi_startproc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 55


 2179              		@ args = 0, pretend = 0, frame = 32
 2180              		@ frame_needed = 1, uses_anonymous_args = 0
 2181              		@ link register save eliminated.
 2182 0000 80B4     		push	{r7}
 2183              		.cfi_def_cfa_offset 4
 2184              		.cfi_offset 7, -4
 2185 0002 89B0     		sub	sp, sp, #36
 2186              		.cfi_def_cfa_offset 40
 2187 0004 00AF     		add	r7, sp, #0
 2188              		.cfi_def_cfa_register 7
 2189 0006 0346     		mov	r3, r0
 2190 0008 B960     		str	r1, [r7, #8]
 2191 000a 7A60     		str	r2, [r7, #4]
 2192 000c FB73     		strb	r3, [r7, #15]
 836:..\src/interruptions.c ****     
 837:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2193              		.loc 1 837 0
 2194 000e B04B     		ldr	r3, .L175
 2195 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2196 0014 062B     		cmp	r3, #6
 2197 0016 40F08581 		bne	.L173
 2198              		.loc 1 837 0 is_stmt 0 discriminator 1
 2199 001a AD4B     		ldr	r3, .L175
 2200 001c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2201 0020 062B     		cmp	r3, #6
 2202 0022 40F07F81 		bne	.L173
 838:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2203              		.loc 1 838 0 is_stmt 1
 2204 0026 7B68     		ldr	r3, [r7, #4]
 2205 0028 1A68     		ldr	r2, [r3]
 2206 002a BB68     		ldr	r3, [r7, #8]
 2207 002c 1A60     		str	r2, [r3]
 839:..\src/interruptions.c ****     
 840:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2208              		.loc 1 840 0
 2209 002e A94B     		ldr	r3, .L175+4
 2210 0030 1B6A     		ldr	r3, [r3, #32]
 2211 0032 B3F52F7F 		cmp	r3, #700
 2212 0036 00F3C280 		bgt	.L156
 2213              	.LBB5:
 841:..\src/interruptions.c ****              
 842:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2214              		.loc 1 842 0
 2215 003a 0023     		movs	r3, #0
 2216 003c FB61     		str	r3, [r7, #28]
 843:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2217              		.loc 1 843 0
 2218 003e 0023     		movs	r3, #0
 2219 0040 BB61     		str	r3, [r7, #24]
 844:..\src/interruptions.c ****         
 845:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2220              		.loc 1 845 0
 2221 0042 A44B     		ldr	r3, .L175+4
 2222 0044 1B6A     		ldr	r3, [r3, #32]
 2223 0046 A24A     		ldr	r2, .L175
 2224 0048 B2F9B222 		ldrsh	r2, [r2, #690]
 2225 004c 9342     		cmp	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 56


 2226 004e 1ADD     		ble	.L157
 846:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2227              		.loc 1 846 0
 2228 0050 A04B     		ldr	r3, .L175+4
 2229 0052 1B6A     		ldr	r3, [r3, #32]
 2230 0054 9E4A     		ldr	r2, .L175
 2231 0056 B2F9B222 		ldrsh	r2, [r2, #690]
 2232 005a 9B1A     		subs	r3, r3, r2
 2233 005c FB61     		str	r3, [r7, #28]
 847:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2234              		.loc 1 847 0
 2235 005e BB68     		ldr	r3, [r7, #8]
 2236 0060 1A68     		ldr	r2, [r3]
 2237 0062 9B4B     		ldr	r3, .L175
 2238 0064 B3F8B032 		ldrh	r3, [r3, #688]
 2239 0068 1946     		mov	r1, r3
 2240 006a FB69     		ldr	r3, [r7, #28]
 2241 006c 03FB01F1 		mul	r1, r3, r1
 2242 0070 974B     		ldr	r3, .L175
 2243 0072 B3F9B232 		ldrsh	r3, [r3, #690]
 2244 0076 C3F58063 		rsb	r3, r3, #1024
 2245 007a 91FBF3F3 		sdiv	r3, r1, r3
 2246 007e 1A44     		add	r2, r2, r3
 2247 0080 BB68     		ldr	r3, [r7, #8]
 2248 0082 1A60     		str	r2, [r3]
 2249 0084 21E0     		b	.L158
 2250              	.L157:
 848:..\src/interruptions.c ****             }
 849:..\src/interruptions.c ****             else {
 850:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2251              		.loc 1 850 0
 2252 0086 934B     		ldr	r3, .L175+4
 2253 0088 1A6A     		ldr	r2, [r3, #32]
 2254 008a 914B     		ldr	r3, .L175
 2255 008c B3F9B232 		ldrsh	r3, [r3, #690]
 2256 0090 5B42     		negs	r3, r3
 2257 0092 9A42     		cmp	r2, r3
 2258 0094 19DA     		bge	.L158
 851:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2259              		.loc 1 851 0
 2260 0096 8F4B     		ldr	r3, .L175+4
 2261 0098 1B6A     		ldr	r3, [r3, #32]
 2262 009a 8D4A     		ldr	r2, .L175
 2263 009c B2F9B222 		ldrsh	r2, [r2, #690]
 2264 00a0 1344     		add	r3, r3, r2
 2265 00a2 FB61     		str	r3, [r7, #28]
 852:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2266              		.loc 1 852 0
 2267 00a4 BB68     		ldr	r3, [r7, #8]
 2268 00a6 1A68     		ldr	r2, [r3]
 2269 00a8 894B     		ldr	r3, .L175
 2270 00aa B3F8B032 		ldrh	r3, [r3, #688]
 2271 00ae 1946     		mov	r1, r3
 2272 00b0 FB69     		ldr	r3, [r7, #28]
 2273 00b2 03FB01F1 		mul	r1, r3, r1
 2274 00b6 864B     		ldr	r3, .L175
 2275 00b8 B3F9B232 		ldrsh	r3, [r3, #690]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 57


 2276 00bc C3F58063 		rsb	r3, r3, #1024
 2277 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2278 00c4 1A44     		add	r2, r2, r3
 2279 00c6 BB68     		ldr	r3, [r7, #8]
 2280 00c8 1A60     		str	r2, [r3]
 2281              	.L158:
 853:..\src/interruptions.c ****                 }
 854:..\src/interruptions.c ****             }
 855:..\src/interruptions.c **** 
 856:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2282              		.loc 1 856 0
 2283 00ca 824B     		ldr	r3, .L175+4
 2284 00cc 5B6A     		ldr	r3, [r3, #36]
 2285 00ce 804A     		ldr	r2, .L175
 2286 00d0 B2F9B222 		ldrsh	r2, [r2, #690]
 2287 00d4 9342     		cmp	r3, r2
 2288 00d6 34DD     		ble	.L159
 857:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2289              		.loc 1 857 0
 2290 00d8 7E4B     		ldr	r3, .L175+4
 2291 00da 5B6A     		ldr	r3, [r3, #36]
 2292 00dc 7C4A     		ldr	r2, .L175
 2293 00de B2F9B222 		ldrsh	r2, [r2, #690]
 2294 00e2 9B1A     		subs	r3, r3, r2
 2295 00e4 BB61     		str	r3, [r7, #24]
 858:..\src/interruptions.c ****                 if (motor_idx == 0){
 2296              		.loc 1 858 0
 2297 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2298 00e8 002B     		cmp	r3, #0
 2299 00ea 12D1     		bne	.L160
 859:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2300              		.loc 1 859 0
 2301 00ec BB68     		ldr	r3, [r7, #8]
 2302 00ee 1A68     		ldr	r2, [r3]
 2303 00f0 774B     		ldr	r3, .L175
 2304 00f2 B3F8B032 		ldrh	r3, [r3, #688]
 2305 00f6 1946     		mov	r1, r3
 2306 00f8 BB69     		ldr	r3, [r7, #24]
 2307 00fa 03FB01F1 		mul	r1, r3, r1
 2308 00fe 744B     		ldr	r3, .L175
 2309 0100 B3F9B232 		ldrsh	r3, [r3, #690]
 2310 0104 C3F58063 		rsb	r3, r3, #1024
 2311 0108 91FBF3F3 		sdiv	r3, r1, r3
 2312 010c 1A44     		add	r2, r2, r3
 2313 010e BB68     		ldr	r3, [r7, #8]
 2314 0110 1A60     		str	r2, [r3]
 2315              	.L160:
 860:..\src/interruptions.c ****                 }
 861:..\src/interruptions.c ****                 if (motor_idx == 1){
 2316              		.loc 1 861 0
 2317 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2318 0114 012B     		cmp	r3, #1
 2319 0116 40F00581 		bne	.L173
 862:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2320              		.loc 1 862 0
 2321 011a BB68     		ldr	r3, [r7, #8]
 2322 011c 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 58


 2323 011e 6C4B     		ldr	r3, .L175
 2324 0120 B3F8B032 		ldrh	r3, [r3, #688]
 2325 0124 1946     		mov	r1, r3
 2326 0126 BB69     		ldr	r3, [r7, #24]
 2327 0128 03FB01F1 		mul	r1, r3, r1
 2328 012c 684B     		ldr	r3, .L175
 2329 012e B3F9B232 		ldrsh	r3, [r3, #690]
 2330 0132 C3F58063 		rsb	r3, r3, #1024
 2331 0136 91FBF3F3 		sdiv	r3, r1, r3
 2332 013a D21A     		subs	r2, r2, r3
 2333 013c BB68     		ldr	r3, [r7, #8]
 2334 013e 1A60     		str	r2, [r3]
 2335              	.LBE5:
 863:..\src/interruptions.c ****                 }          
 864:..\src/interruptions.c ****             }
 865:..\src/interruptions.c ****             else {
 866:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 867:..\src/interruptions.c ****                     
 868:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 869:..\src/interruptions.c ****                     if (motor_idx == 0){
 870:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 871:..\src/interruptions.c ****                     }
 872:..\src/interruptions.c ****                     if (motor_idx == 1){
 873:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 874:..\src/interruptions.c ****                     }
 875:..\src/interruptions.c ****                 }
 876:..\src/interruptions.c ****             }
 877:..\src/interruptions.c ****         }
 878:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 879:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 880:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 881:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 882:..\src/interruptions.c **** 
 883:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 884:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 885:..\src/interruptions.c ****                     if (motor_idx == 1){
 886:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 887:..\src/interruptions.c ****                     }
 888:..\src/interruptions.c ****                     if (motor_idx == 0){
 889:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 890:..\src/interruptions.c ****                     }                    
 891:..\src/interruptions.c ****                 }
 892:..\src/interruptions.c ****                 else {
 893:..\src/interruptions.c ****                     if (motor_idx == 0){
 894:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 895:..\src/interruptions.c ****                     }
 896:..\src/interruptions.c ****                     if (motor_idx == 1){
 897:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 898:..\src/interruptions.c ****                     }
 899:..\src/interruptions.c ****                 }
 900:..\src/interruptions.c ****                 
 901:..\src/interruptions.c ****             }
 902:..\src/interruptions.c ****             else {
 903:..\src/interruptions.c ****                 if(pos_sum > 0) {
 904:..\src/interruptions.c ****                     if (motor_idx == 0){
 905:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 906:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 59


 907:..\src/interruptions.c ****                     if (motor_idx == 1){
 908:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 909:..\src/interruptions.c ****                     }
 910:..\src/interruptions.c ****                     
 911:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 912:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 913:..\src/interruptions.c ****                     }
 914:..\src/interruptions.c ****                 }
 915:..\src/interruptions.c ****             }
 916:..\src/interruptions.c ****         }
 917:..\src/interruptions.c ****     }           
 918:..\src/interruptions.c **** }
 2336              		.loc 1 918 0
 2337 0140 F0E0     		b	.L173
 2338              	.L159:
 2339              	.LBB6:
 866:..\src/interruptions.c ****                     
 2340              		.loc 1 866 0
 2341 0142 644B     		ldr	r3, .L175+4
 2342 0144 5A6A     		ldr	r2, [r3, #36]
 2343 0146 624B     		ldr	r3, .L175
 2344 0148 B3F9B232 		ldrsh	r3, [r3, #690]
 2345 014c 5B42     		negs	r3, r3
 2346 014e 9A42     		cmp	r2, r3
 2347 0150 80F2E880 		bge	.L173
 868:..\src/interruptions.c ****                     if (motor_idx == 0){
 2348              		.loc 1 868 0
 2349 0154 5F4B     		ldr	r3, .L175+4
 2350 0156 5B6A     		ldr	r3, [r3, #36]
 2351 0158 5D4A     		ldr	r2, .L175
 2352 015a B2F9B222 		ldrsh	r2, [r2, #690]
 2353 015e 1344     		add	r3, r3, r2
 2354 0160 BB61     		str	r3, [r7, #24]
 869:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2355              		.loc 1 869 0
 2356 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2357 0164 002B     		cmp	r3, #0
 2358 0166 12D1     		bne	.L163
 870:..\src/interruptions.c ****                     }
 2359              		.loc 1 870 0
 2360 0168 BB68     		ldr	r3, [r7, #8]
 2361 016a 1A68     		ldr	r2, [r3]
 2362 016c 584B     		ldr	r3, .L175
 2363 016e B3F8B032 		ldrh	r3, [r3, #688]
 2364 0172 1946     		mov	r1, r3
 2365 0174 BB69     		ldr	r3, [r7, #24]
 2366 0176 03FB01F1 		mul	r1, r3, r1
 2367 017a 554B     		ldr	r3, .L175
 2368 017c B3F9B232 		ldrsh	r3, [r3, #690]
 2369 0180 C3F58063 		rsb	r3, r3, #1024
 2370 0184 91FBF3F3 		sdiv	r3, r1, r3
 2371 0188 1A44     		add	r2, r2, r3
 2372 018a BB68     		ldr	r3, [r7, #8]
 2373 018c 1A60     		str	r2, [r3]
 2374              	.L163:
 872:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2375              		.loc 1 872 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 60


 2376 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2377 0190 012B     		cmp	r3, #1
 2378 0192 40F0C780 		bne	.L173
 873:..\src/interruptions.c ****                     }
 2379              		.loc 1 873 0
 2380 0196 BB68     		ldr	r3, [r7, #8]
 2381 0198 1A68     		ldr	r2, [r3]
 2382 019a 4D4B     		ldr	r3, .L175
 2383 019c B3F8B032 		ldrh	r3, [r3, #688]
 2384 01a0 1946     		mov	r1, r3
 2385 01a2 BB69     		ldr	r3, [r7, #24]
 2386 01a4 03FB01F1 		mul	r1, r3, r1
 2387 01a8 494B     		ldr	r3, .L175
 2388 01aa B3F9B232 		ldrsh	r3, [r3, #690]
 2389 01ae C3F58063 		rsb	r3, r3, #1024
 2390 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2391 01b6 D21A     		subs	r2, r2, r3
 2392 01b8 BB68     		ldr	r3, [r7, #8]
 2393 01ba 1A60     		str	r2, [r3]
 2394              	.LBE6:
 2395              		.loc 1 918 0
 2396 01bc B2E0     		b	.L173
 2397              	.L156:
 2398              	.LBB7:
 880:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2399              		.loc 1 880 0
 2400 01be 444B     		ldr	r3, .L175
 2401 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2402 01c4 1946     		mov	r1, r3
 2403 01c6 444A     		ldr	r2, .L175+8
 2404 01c8 3423     		movs	r3, #52
 2405 01ca 03FB01F3 		mul	r3, r3, r1
 2406 01ce 1344     		add	r3, r3, r2
 2407 01d0 1A68     		ldr	r2, [r3]
 2408 01d2 3F4B     		ldr	r3, .L175
 2409 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2410 01d8 1846     		mov	r0, r3
 2411 01da 3F49     		ldr	r1, .L175+8
 2412 01dc 3423     		movs	r3, #52
 2413 01de 03FB00F3 		mul	r3, r3, r0
 2414 01e2 0B44     		add	r3, r3, r1
 2415 01e4 0433     		adds	r3, r3, #4
 2416 01e6 1B68     		ldr	r3, [r3]
 2417 01e8 D21A     		subs	r2, r2, r3
 2418 01ea 394B     		ldr	r3, .L175
 2419 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2420 01f0 1846     		mov	r0, r3
 2421 01f2 3749     		ldr	r1, .L175
 2422 01f4 0346     		mov	r3, r0
 2423 01f6 5B00     		lsls	r3, r3, #1
 2424 01f8 0344     		add	r3, r3, r0
 2425 01fa 1B01     		lsls	r3, r3, #4
 2426 01fc 0B44     		add	r3, r3, r1
 2427 01fe 03F29513 		addw	r3, r3, #405
 2428 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2429 0204 42FA03F3 		asr	r3, r2, r3
 2430 0208 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 61


 881:..\src/interruptions.c **** 
 2431              		.loc 1 881 0
 2432 020a 314B     		ldr	r3, .L175
 2433 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2434 0210 1946     		mov	r1, r3
 2435 0212 314A     		ldr	r2, .L175+8
 2436 0214 3423     		movs	r3, #52
 2437 0216 03FB01F3 		mul	r3, r3, r1
 2438 021a 1344     		add	r3, r3, r2
 2439 021c 1A68     		ldr	r2, [r3]
 2440 021e 2C4B     		ldr	r3, .L175
 2441 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2442 0224 1846     		mov	r0, r3
 2443 0226 2C49     		ldr	r1, .L175+8
 2444 0228 3423     		movs	r3, #52
 2445 022a 03FB00F3 		mul	r3, r3, r0
 2446 022e 0B44     		add	r3, r3, r1
 2447 0230 0433     		adds	r3, r3, #4
 2448 0232 1B68     		ldr	r3, [r3]
 2449 0234 1A44     		add	r2, r2, r3
 2450 0236 264B     		ldr	r3, .L175
 2451 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2452 023c 1846     		mov	r0, r3
 2453 023e 2449     		ldr	r1, .L175
 2454 0240 0346     		mov	r3, r0
 2455 0242 5B00     		lsls	r3, r3, #1
 2456 0244 0344     		add	r3, r3, r0
 2457 0246 1B01     		lsls	r3, r3, #4
 2458 0248 0B44     		add	r3, r3, r1
 2459 024a 03F29513 		addw	r3, r3, #405
 2460 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2461 0250 42FA03F3 		asr	r3, r2, r3
 2462 0254 3B61     		str	r3, [r7, #16]
 883:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2463              		.loc 1 883 0
 2464 0256 7B69     		ldr	r3, [r7, #20]
 2465 0258 B3F5FA7F 		cmp	r3, #500
 2466 025c 03DC     		bgt	.L164
 883:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2467              		.loc 1 883 0 is_stmt 0 discriminator 1
 2468 025e 7B69     		ldr	r3, [r7, #20]
 2469 0260 13F5FA7F 		cmn	r3, #500
 2470 0264 3ADA     		bge	.L165
 2471              	.L164:
 884:..\src/interruptions.c ****                     if (motor_idx == 1){
 2472              		.loc 1 884 0 is_stmt 1
 2473 0266 7B69     		ldr	r3, [r7, #20]
 2474 0268 002B     		cmp	r3, #0
 2475 026a 18DB     		blt	.L166
 885:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2476              		.loc 1 885 0
 2477 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2478 026e 012B     		cmp	r3, #1
 2479 0270 07D1     		bne	.L167
 886:..\src/interruptions.c ****                     }
 2480              		.loc 1 886 0
 2481 0272 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 62


 2482 0274 1B68     		ldr	r3, [r3]
 2483 0276 164A     		ldr	r2, .L175
 2484 0278 B2F8B022 		ldrh	r2, [r2, #688]
 2485 027c 1A44     		add	r2, r2, r3
 2486 027e BB68     		ldr	r3, [r7, #8]
 2487 0280 1A60     		str	r2, [r3]
 2488              	.L167:
 888:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2489              		.loc 1 888 0
 2490 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2491 0284 002B     		cmp	r3, #0
 2492 0286 4CD1     		bne	.L174
 889:..\src/interruptions.c ****                     }                    
 2493              		.loc 1 889 0
 2494 0288 BB68     		ldr	r3, [r7, #8]
 2495 028a 1B68     		ldr	r3, [r3]
 2496 028c 104A     		ldr	r2, .L175
 2497 028e B2F8B022 		ldrh	r2, [r2, #688]
 2498 0292 5208     		lsrs	r2, r2, #1
 2499 0294 92B2     		uxth	r2, r2
 2500 0296 9A1A     		subs	r2, r3, r2
 2501 0298 BB68     		ldr	r3, [r7, #8]
 2502 029a 1A60     		str	r2, [r3]
 884:..\src/interruptions.c ****                     if (motor_idx == 1){
 2503              		.loc 1 884 0
 2504 029c 41E0     		b	.L174
 2505              	.L166:
 893:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2506              		.loc 1 893 0
 2507 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2508 02a0 002B     		cmp	r3, #0
 2509 02a2 07D1     		bne	.L170
 894:..\src/interruptions.c ****                     }
 2510              		.loc 1 894 0
 2511 02a4 BB68     		ldr	r3, [r7, #8]
 2512 02a6 1B68     		ldr	r3, [r3]
 2513 02a8 094A     		ldr	r2, .L175
 2514 02aa B2F8B022 		ldrh	r2, [r2, #688]
 2515 02ae 1A44     		add	r2, r2, r3
 2516 02b0 BB68     		ldr	r3, [r7, #8]
 2517 02b2 1A60     		str	r2, [r3]
 2518              	.L170:
 896:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2519              		.loc 1 896 0
 2520 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2521 02b6 012B     		cmp	r3, #1
 2522 02b8 33D1     		bne	.L174
 897:..\src/interruptions.c ****                     }
 2523              		.loc 1 897 0
 2524 02ba BB68     		ldr	r3, [r7, #8]
 2525 02bc 1B68     		ldr	r3, [r3]
 2526 02be 044A     		ldr	r2, .L175
 2527 02c0 B2F8B022 		ldrh	r2, [r2, #688]
 2528 02c4 5208     		lsrs	r2, r2, #1
 2529 02c6 92B2     		uxth	r2, r2
 2530 02c8 9A1A     		subs	r2, r3, r2
 2531 02ca BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 63


 2532 02cc 1A60     		str	r2, [r3]
 884:..\src/interruptions.c ****                     if (motor_idx == 1){
 2533              		.loc 1 884 0
 2534 02ce 28E0     		b	.L174
 2535              	.L176:
 2536              		.align	2
 2537              	.L175:
 2538 02d0 00000000 		.word	c_mem
 2539 02d4 00000000 		.word	g_adc_meas
 2540 02d8 00000000 		.word	g_meas
 2541              	.L165:
 903:..\src/interruptions.c ****                     if (motor_idx == 0){
 2542              		.loc 1 903 0
 2543 02dc 3B69     		ldr	r3, [r7, #16]
 2544 02de 002B     		cmp	r3, #0
 2545 02e0 20DD     		ble	.L173
 904:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2546              		.loc 1 904 0
 2547 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2548 02e4 002B     		cmp	r3, #0
 2549 02e6 08D1     		bne	.L171
 905:..\src/interruptions.c ****                     }
 2550              		.loc 1 905 0
 2551 02e8 BB68     		ldr	r3, [r7, #8]
 2552 02ea 1A68     		ldr	r2, [r3]
 2553 02ec 104B     		ldr	r3, .L177
 2554 02ee B3F8B032 		ldrh	r3, [r3, #688]
 2555 02f2 5B00     		lsls	r3, r3, #1
 2556 02f4 D21A     		subs	r2, r2, r3
 2557 02f6 BB68     		ldr	r3, [r7, #8]
 2558 02f8 1A60     		str	r2, [r3]
 2559              	.L171:
 907:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2560              		.loc 1 907 0
 2561 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2562 02fc 012B     		cmp	r3, #1
 2563 02fe 08D1     		bne	.L172
 908:..\src/interruptions.c ****                     }
 2564              		.loc 1 908 0
 2565 0300 BB68     		ldr	r3, [r7, #8]
 2566 0302 1A68     		ldr	r2, [r3]
 2567 0304 0A4B     		ldr	r3, .L177
 2568 0306 B3F8B032 		ldrh	r3, [r3, #688]
 2569 030a 5B00     		lsls	r3, r3, #1
 2570 030c D21A     		subs	r2, r2, r3
 2571 030e BB68     		ldr	r3, [r7, #8]
 2572 0310 1A60     		str	r2, [r3]
 2573              	.L172:
 911:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2574              		.loc 1 911 0
 2575 0312 BB68     		ldr	r3, [r7, #8]
 2576 0314 1B68     		ldr	r3, [r3]
 2577 0316 002B     		cmp	r3, #0
 2578 0318 04DA     		bge	.L173
 912:..\src/interruptions.c ****                     }
 2579              		.loc 1 912 0
 2580 031a BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 64


 2581 031c 0022     		movs	r2, #0
 2582 031e 1A60     		str	r2, [r3]
 2583              	.LBE7:
 2584              		.loc 1 918 0
 2585 0320 00E0     		b	.L173
 2586              	.L174:
 2587              	.LBB8:
 884:..\src/interruptions.c ****                     if (motor_idx == 1){
 2588              		.loc 1 884 0
 2589 0322 00BF     		nop
 2590              	.L173:
 2591              	.LBE8:
 2592              		.loc 1 918 0
 2593 0324 00BF     		nop
 2594 0326 2437     		adds	r7, r7, #36
 2595              		.cfi_def_cfa_offset 4
 2596 0328 BD46     		mov	sp, r7
 2597              		.cfi_def_cfa_register 13
 2598              		@ sp needed
 2599 032a 80BC     		pop	{r7}
 2600              		.cfi_restore 7
 2601              		.cfi_def_cfa_offset 0
 2602 032c 7047     		bx	lr
 2603              	.L178:
 2604 032e 00BF     		.align	2
 2605              	.L177:
 2606 0330 00000000 		.word	c_mem
 2607              		.cfi_endproc
 2608              	.LFE69:
 2609              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2610              		.section	.text.motor_control_SH,"ax",%progbits
 2611              		.align	2
 2612              		.global	motor_control_SH
 2613              		.thumb
 2614              		.thumb_func
 2615              		.type	motor_control_SH, %function
 2616              	motor_control_SH:
 2617              	.LFB70:
 919:..\src/interruptions.c **** 
 920:..\src/interruptions.c **** //==============================================================================
 921:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
 922:..\src/interruptions.c **** //==============================================================================
 923:..\src/interruptions.c **** void motor_control_SH() {
 2618              		.loc 1 923 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 80
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622 0000 80B5     		push	{r7, lr}
 2623              		.cfi_def_cfa_offset 8
 2624              		.cfi_offset 7, -8
 2625              		.cfi_offset 14, -4
 2626 0002 94B0     		sub	sp, sp, #80
 2627              		.cfi_def_cfa_offset 88
 2628 0004 00AF     		add	r7, sp, #0
 2629              		.cfi_def_cfa_register 7
 924:..\src/interruptions.c **** 
 925:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 65


 2630              		.loc 1 925 0
 2631 0006 0023     		movs	r3, #0
 2632 0008 FB64     		str	r3, [r7, #76]
 926:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
 927:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
 928:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
 929:..\src/interruptions.c ****  
 930:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 2633              		.loc 1 930 0
 2634 000a 0023     		movs	r3, #0
 2635 000c 87F84730 		strb	r3, [r7, #71]
 931:..\src/interruptions.c ****     
 932:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 2636              		.loc 1 932 0
 2637 0010 97F84720 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 2638 0014 1346     		mov	r3, r2
 2639 0016 DB00     		lsls	r3, r3, #3
 2640 0018 9B1A     		subs	r3, r3, r2
 2641 001a 1B01     		lsls	r3, r3, #4
 2642 001c B033     		adds	r3, r3, #176
 2643 001e 9D4A     		ldr	r2, .L240
 2644 0020 1344     		add	r3, r3, r2
 2645 0022 3B64     		str	r3, [r7, #64]
 933:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 2646              		.loc 1 933 0
 2647 0024 3B6C     		ldr	r3, [r7, #64]
 2648 0026 93F86030 		ldrb	r3, [r3, #96]
 2649 002a 87F83F30 		strb	r3, [r7, #63]
 934:..\src/interruptions.c ****     
 935:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 2650              		.loc 1 935 0
 2651 002e 3B6C     		ldr	r3, [r7, #64]
 2652 0030 1B68     		ldr	r3, [r3]
 2653 0032 BB63     		str	r3, [r7, #56]
 936:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 2654              		.loc 1 936 0
 2655 0034 3B6C     		ldr	r3, [r7, #64]
 2656 0036 5B68     		ldr	r3, [r3, #4]
 2657 0038 7B63     		str	r3, [r7, #52]
 937:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 2658              		.loc 1 937 0
 2659 003a 3B6C     		ldr	r3, [r7, #64]
 2660 003c 9B68     		ldr	r3, [r3, #8]
 2661 003e 3B63     		str	r3, [r7, #48]
 938:..\src/interruptions.c **** 
 939:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 2662              		.loc 1 939 0
 2663 0040 3B6C     		ldr	r3, [r7, #64]
 2664 0042 DB68     		ldr	r3, [r3, #12]
 2665 0044 FB62     		str	r3, [r7, #44]
 940:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 2666              		.loc 1 940 0
 2667 0046 3B6C     		ldr	r3, [r7, #64]
 2668 0048 1B69     		ldr	r3, [r3, #16]
 2669 004a BB62     		str	r3, [r7, #40]
 941:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 2670              		.loc 1 941 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 66


 2671 004c 3B6C     		ldr	r3, [r7, #64]
 2672 004e 5B69     		ldr	r3, [r3, #20]
 2673 0050 7B62     		str	r3, [r7, #36]
 942:..\src/interruptions.c **** 
 943:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 2674              		.loc 1 943 0
 2675 0052 3B6C     		ldr	r3, [r7, #64]
 2676 0054 9B69     		ldr	r3, [r3, #24]
 2677 0056 3B62     		str	r3, [r7, #32]
 944:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 2678              		.loc 1 944 0
 2679 0058 3B6C     		ldr	r3, [r7, #64]
 2680 005a DB69     		ldr	r3, [r3, #28]
 2681 005c FB61     		str	r3, [r7, #28]
 945:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 2682              		.loc 1 945 0
 2683 005e 3B6C     		ldr	r3, [r7, #64]
 2684 0060 1B6A     		ldr	r3, [r3, #32]
 2685 0062 BB61     		str	r3, [r7, #24]
 946:..\src/interruptions.c ****     
 947:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 2686              		.loc 1 947 0
 2687 0064 3B6C     		ldr	r3, [r7, #64]
 2688 0066 5B6A     		ldr	r3, [r3, #36]
 2689 0068 7B61     		str	r3, [r7, #20]
 948:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 2690              		.loc 1 948 0
 2691 006a 3B6C     		ldr	r3, [r7, #64]
 2692 006c 9B6A     		ldr	r3, [r3, #40]
 2693 006e 3B61     		str	r3, [r7, #16]
 949:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 2694              		.loc 1 949 0
 2695 0070 3B6C     		ldr	r3, [r7, #64]
 2696 0072 DB6A     		ldr	r3, [r3, #44]
 2697 0074 FB60     		str	r3, [r7, #12]
 950:..\src/interruptions.c **** 
 951:..\src/interruptions.c ****     // Static Variables
 952:..\src/interruptions.c **** 
 953:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
 954:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
 955:..\src/interruptions.c ****     
 956:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
 957:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
 958:..\src/interruptions.c ****     static int32 prev_pwm;
 959:..\src/interruptions.c **** 
 960:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
 961:..\src/interruptions.c ****     static uint32 position_counter = 0;
 962:..\src/interruptions.c ****   
 963:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
 964:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 2698              		.loc 1 964 0
 2699 0076 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2700 007a 1B01     		lsls	r3, r3, #4
 2701 007c 864A     		ldr	r2, .L240+4
 2702 007e 9918     		adds	r1, r3, r2
 2703 0080 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2704 0084 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 67


 2705 0086 854A     		ldr	r2, .L240+8
 2706 0088 1A44     		add	r2, r2, r3
 2707 008a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2708 008e 1846     		mov	r0, r3
 2709 0090 FFF7FEFF 		bl	compute_reference
 965:..\src/interruptions.c ****      
 966:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 2710              		.loc 1 966 0
 2711 0094 3B6C     		ldr	r3, [r7, #64]
 2712 0096 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 2713 009a 032B     		cmp	r3, #3
 2714 009c 00F2F781 		bhi	.L180
 2715 00a0 01A2     		adr	r2, .L182
 2716 00a2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2717 00a6 00BF     		.p2align 2
 2718              	.L182:
 2719 00a8 55020000 		.word	.L181+1
 2720 00ac 49040000 		.word	.L183+1
 2721 00b0 3B030000 		.word	.L184+1
 2722 00b4 B9000000 		.word	.L185+1
 2723              		.p2align 1
 2724              	.L185:
 967:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
 968:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
 969:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2725              		.loc 1 969 0
 2726 00b8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2727 00bc 764A     		ldr	r2, .L240+4
 2728 00be 1B01     		lsls	r3, r3, #4
 2729 00c0 1344     		add	r3, r3, r2
 2730 00c2 1A68     		ldr	r2, [r3]
 2731 00c4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2732 00c8 7549     		ldr	r1, .L240+12
 2733 00ca 3420     		movs	r0, #52
 2734 00cc 00FB03F3 		mul	r3, r0, r3
 2735 00d0 0B44     		add	r3, r3, r1
 2736 00d2 1B68     		ldr	r3, [r3]
 2737 00d4 D31A     		subs	r3, r2, r3
 2738 00d6 BB60     		str	r3, [r7, #8]
 970:..\src/interruptions.c **** 
 971:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2739              		.loc 1 971 0
 2740 00d8 724B     		ldr	r3, .L240+16
 2741 00da 1A68     		ldr	r2, [r3]
 2742 00dc BB68     		ldr	r3, [r7, #8]
 2743 00de 1344     		add	r3, r3, r2
 2744 00e0 704A     		ldr	r2, .L240+16
 2745 00e2 1360     		str	r3, [r2]
 972:..\src/interruptions.c **** 
 973:..\src/interruptions.c ****             // error_sum saturation
 974:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 2746              		.loc 1 974 0
 2747 00e4 6F4B     		ldr	r3, .L240+16
 2748 00e6 1B68     		ldr	r3, [r3]
 2749 00e8 6F4A     		ldr	r2, .L240+20
 2750 00ea 9342     		cmp	r3, r2
 2751 00ec 03DD     		ble	.L186
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 68


 975:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 2752              		.loc 1 975 0
 2753 00ee 6D4B     		ldr	r3, .L240+16
 2754 00f0 6D4A     		ldr	r2, .L240+20
 2755 00f2 1A60     		str	r2, [r3]
 2756 00f4 07E0     		b	.L187
 2757              	.L186:
 976:..\src/interruptions.c ****             else {
 977:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 2758              		.loc 1 977 0
 2759 00f6 6B4B     		ldr	r3, .L240+16
 2760 00f8 1B68     		ldr	r3, [r3]
 2761 00fa 6C4A     		ldr	r2, .L240+24
 2762 00fc 9342     		cmp	r3, r2
 2763 00fe 02DA     		bge	.L187
 978:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 2764              		.loc 1 978 0
 2765 0100 684B     		ldr	r3, .L240+16
 2766 0102 6A4A     		ldr	r2, .L240+24
 2767 0104 1A60     		str	r2, [r3]
 2768              	.L187:
 979:..\src/interruptions.c ****             }
 980:..\src/interruptions.c ****             
 981:..\src/interruptions.c ****             // ------ position PID control ------
 982:..\src/interruptions.c **** 
 983:..\src/interruptions.c ****             i_ref = 0;
 2769              		.loc 1 983 0
 2770 0106 0023     		movs	r3, #0
 2771 0108 BB64     		str	r3, [r7, #72]
 984:..\src/interruptions.c ****             
 985:..\src/interruptions.c ****             // Proportional
 986:..\src/interruptions.c ****             if (k_p_dl != 0)
 2772              		.loc 1 986 0
 2773 010a 3B6A     		ldr	r3, [r7, #32]
 2774 010c 002B     		cmp	r3, #0
 2775 010e 07D0     		beq	.L188
 987:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 2776              		.loc 1 987 0
 2777 0110 3B6A     		ldr	r3, [r7, #32]
 2778 0112 BA68     		ldr	r2, [r7, #8]
 2779 0114 02FB03F3 		mul	r3, r2, r3
 2780 0118 1B14     		asrs	r3, r3, #16
 2781 011a BA6C     		ldr	r2, [r7, #72]
 2782 011c 1344     		add	r3, r3, r2
 2783 011e BB64     		str	r3, [r7, #72]
 2784              	.L188:
 988:..\src/interruptions.c **** 
 989:..\src/interruptions.c ****             // Integral
 990:..\src/interruptions.c ****             if (k_i_dl != 0)
 2785              		.loc 1 990 0
 2786 0120 FB69     		ldr	r3, [r7, #28]
 2787 0122 002B     		cmp	r3, #0
 2788 0124 08D0     		beq	.L189
 991:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 2789              		.loc 1 991 0
 2790 0126 5F4B     		ldr	r3, .L240+16
 2791 0128 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 69


 2792 012a FA69     		ldr	r2, [r7, #28]
 2793 012c 02FB03F3 		mul	r3, r2, r3
 2794 0130 1B14     		asrs	r3, r3, #16
 2795 0132 BA6C     		ldr	r2, [r7, #72]
 2796 0134 1344     		add	r3, r3, r2
 2797 0136 BB64     		str	r3, [r7, #72]
 2798              	.L189:
 992:..\src/interruptions.c **** 
 993:..\src/interruptions.c ****             // Derivative
 994:..\src/interruptions.c ****             if (k_d_dl != 0)
 2799              		.loc 1 994 0
 2800 0138 BB69     		ldr	r3, [r7, #24]
 2801 013a 002B     		cmp	r3, #0
 2802 013c 0AD0     		beq	.L190
 995:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 2803              		.loc 1 995 0
 2804 013e 5C4B     		ldr	r3, .L240+28
 2805 0140 1B68     		ldr	r3, [r3]
 2806 0142 BA68     		ldr	r2, [r7, #8]
 2807 0144 D31A     		subs	r3, r2, r3
 2808 0146 BA69     		ldr	r2, [r7, #24]
 2809 0148 02FB03F3 		mul	r3, r2, r3
 2810 014c 1B14     		asrs	r3, r3, #16
 2811 014e BA6C     		ldr	r2, [r7, #72]
 2812 0150 1344     		add	r3, r3, r2
 2813 0152 BB64     		str	r3, [r7, #72]
 2814              	.L190:
 996:..\src/interruptions.c ****                         
 997:..\src/interruptions.c ****             // Update previous position
 998:..\src/interruptions.c ****             prev_pos_err = pos_error;
 2815              		.loc 1 998 0
 2816 0154 564A     		ldr	r2, .L240+28
 2817 0156 BB68     		ldr	r3, [r7, #8]
 2818 0158 1360     		str	r3, [r2]
 999:..\src/interruptions.c **** 
1000:..\src/interruptions.c ****             // motor direction depends on i_ref
1001:..\src/interruptions.c ****             if (i_ref >= 0)
 2819              		.loc 1 1001 0
 2820 015a BB6C     		ldr	r3, [r7, #72]
 2821 015c 002B     		cmp	r3, #0
 2822 015e 03DB     		blt	.L191
1002:..\src/interruptions.c ****                 motor_dir = TRUE;
 2823              		.loc 1 1002 0
 2824 0160 544B     		ldr	r3, .L240+32
 2825 0162 0122     		movs	r2, #1
 2826 0164 1A70     		strb	r2, [r3]
 2827 0166 02E0     		b	.L192
 2828              	.L191:
1003:..\src/interruptions.c ****             else
1004:..\src/interruptions.c ****                 motor_dir = FALSE;
 2829              		.loc 1 1004 0
 2830 0168 524B     		ldr	r3, .L240+32
 2831 016a 0022     		movs	r2, #0
 2832 016c 1A70     		strb	r2, [r3]
 2833              	.L192:
1005:..\src/interruptions.c **** 
1006:..\src/interruptions.c ****             // saturate max current
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 70


1007:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 2834              		.loc 1 1007 0
 2835 016e 3B6C     		ldr	r3, [r7, #64]
 2836 0170 B3F95C30 		ldrsh	r3, [r3, #92]
 2837 0174 1A46     		mov	r2, r3
 2838 0176 BB6C     		ldr	r3, [r7, #72]
 2839 0178 9A42     		cmp	r2, r3
 2840 017a 04DA     		bge	.L193
1008:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 2841              		.loc 1 1008 0
 2842 017c 3B6C     		ldr	r3, [r7, #64]
 2843 017e B3F95C30 		ldrsh	r3, [r3, #92]
 2844 0182 BB64     		str	r3, [r7, #72]
 2845 0184 0BE0     		b	.L194
 2846              	.L193:
1009:..\src/interruptions.c ****             else {
1010:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 2847              		.loc 1 1010 0
 2848 0186 3B6C     		ldr	r3, [r7, #64]
 2849 0188 B3F95C30 		ldrsh	r3, [r3, #92]
 2850 018c 5A42     		negs	r2, r3
 2851 018e BB6C     		ldr	r3, [r7, #72]
 2852 0190 9A42     		cmp	r2, r3
 2853 0192 04DD     		ble	.L194
1011:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 2854              		.loc 1 1011 0
 2855 0194 3B6C     		ldr	r3, [r7, #64]
 2856 0196 B3F95C30 		ldrsh	r3, [r3, #92]
 2857 019a 5B42     		negs	r3, r3
 2858 019c BB64     		str	r3, [r7, #72]
 2859              	.L194:
1012:..\src/interruptions.c ****         	}
1013:..\src/interruptions.c **** 
1014:..\src/interruptions.c ****             // current error and curr error sum
1015:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 2860              		.loc 1 1015 0
 2861 019e 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2862 01a2 3F4A     		ldr	r2, .L240+12
 2863 01a4 3421     		movs	r1, #52
 2864 01a6 01FB03F3 		mul	r3, r1, r3
 2865 01aa 1344     		add	r3, r3, r2
 2866 01ac 0C33     		adds	r3, r3, #12
 2867 01ae 1B68     		ldr	r3, [r3]
 2868 01b0 BA6C     		ldr	r2, [r7, #72]
 2869 01b2 D31A     		subs	r3, r2, r3
 2870 01b4 7B60     		str	r3, [r7, #4]
1016:..\src/interruptions.c ****             curr_error_sum += curr_error;
 2871              		.loc 1 1016 0
 2872 01b6 404B     		ldr	r3, .L240+36
 2873 01b8 1A68     		ldr	r2, [r3]
 2874 01ba 7B68     		ldr	r3, [r7, #4]
 2875 01bc 1344     		add	r3, r3, r2
 2876 01be 3E4A     		ldr	r2, .L240+36
 2877 01c0 1360     		str	r3, [r2]
1017:..\src/interruptions.c ****             
1018:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 2878              		.loc 1 1018 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 71


 2879 01c2 3D4B     		ldr	r3, .L240+36
 2880 01c4 1B68     		ldr	r3, [r3]
 2881 01c6 3D4A     		ldr	r2, .L240+40
 2882 01c8 9342     		cmp	r3, r2
 2883 01ca 03DD     		ble	.L195
1019:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 2884              		.loc 1 1019 0
 2885 01cc 3A4B     		ldr	r3, .L240+36
 2886 01ce 3B4A     		ldr	r2, .L240+40
 2887 01d0 1A60     		str	r2, [r3]
 2888 01d2 07E0     		b	.L196
 2889              	.L195:
1020:..\src/interruptions.c ****             else {
1021:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 2890              		.loc 1 1021 0
 2891 01d4 384B     		ldr	r3, .L240+36
 2892 01d6 1B68     		ldr	r3, [r3]
 2893 01d8 394A     		ldr	r2, .L240+44
 2894 01da 9342     		cmp	r3, r2
 2895 01dc 02DA     		bge	.L196
1022:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 2896              		.loc 1 1022 0
 2897 01de 364B     		ldr	r3, .L240+36
 2898 01e0 374A     		ldr	r2, .L240+44
 2899 01e2 1A60     		str	r2, [r3]
 2900              	.L196:
1023:..\src/interruptions.c ****             }
1024:..\src/interruptions.c **** 
1025:..\src/interruptions.c ****             // ----- current PID control -----
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c ****             pwm_input = 0;
 2901              		.loc 1 1027 0
 2902 01e4 0023     		movs	r3, #0
 2903 01e6 FB64     		str	r3, [r7, #76]
1028:..\src/interruptions.c **** 
1029:..\src/interruptions.c ****             // Proportional
1030:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 2904              		.loc 1 1030 0
 2905 01e8 7B69     		ldr	r3, [r7, #20]
 2906 01ea 002B     		cmp	r3, #0
 2907 01ec 07D0     		beq	.L197
1031:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 2908              		.loc 1 1031 0
 2909 01ee 7B69     		ldr	r3, [r7, #20]
 2910 01f0 7A68     		ldr	r2, [r7, #4]
 2911 01f2 02FB03F3 		mul	r3, r2, r3
 2912 01f6 1B14     		asrs	r3, r3, #16
 2913 01f8 FA6C     		ldr	r2, [r7, #76]
 2914 01fa 1344     		add	r3, r3, r2
 2915 01fc FB64     		str	r3, [r7, #76]
 2916              	.L197:
1032:..\src/interruptions.c **** 
1033:..\src/interruptions.c ****             // Integral
1034:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 2917              		.loc 1 1034 0
 2918 01fe 3B69     		ldr	r3, [r7, #16]
 2919 0200 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 72


 2920 0202 08D0     		beq	.L198
1035:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 2921              		.loc 1 1035 0
 2922 0204 2C4B     		ldr	r3, .L240+36
 2923 0206 1B68     		ldr	r3, [r3]
 2924 0208 3A69     		ldr	r2, [r7, #16]
 2925 020a 02FB03F3 		mul	r3, r2, r3
 2926 020e 1B14     		asrs	r3, r3, #16
 2927 0210 FA6C     		ldr	r2, [r7, #76]
 2928 0212 1344     		add	r3, r3, r2
 2929 0214 FB64     		str	r3, [r7, #76]
 2930              	.L198:
1036:..\src/interruptions.c **** 
1037:..\src/interruptions.c ****             // Derivative
1038:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 2931              		.loc 1 1038 0
 2932 0216 FB68     		ldr	r3, [r7, #12]
 2933 0218 002B     		cmp	r3, #0
 2934 021a 0AD0     		beq	.L199
1039:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 2935              		.loc 1 1039 0
 2936 021c 294B     		ldr	r3, .L240+48
 2937 021e 1B68     		ldr	r3, [r3]
 2938 0220 7A68     		ldr	r2, [r7, #4]
 2939 0222 D31A     		subs	r3, r2, r3
 2940 0224 FA68     		ldr	r2, [r7, #12]
 2941 0226 02FB03F3 		mul	r3, r2, r3
 2942 022a 1B14     		asrs	r3, r3, #16
 2943 022c FA6C     		ldr	r2, [r7, #76]
 2944 022e 1344     		add	r3, r3, r2
 2945 0230 FB64     		str	r3, [r7, #76]
 2946              	.L199:
1040:..\src/interruptions.c **** 
1041:..\src/interruptions.c ****             // pwm_input saturation
1042:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 2947              		.loc 1 1042 0
 2948 0232 FB6C     		ldr	r3, [r7, #76]
 2949 0234 13F1640F 		cmn	r3, #100
 2950 0238 03DA     		bge	.L200
1043:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 2951              		.loc 1 1043 0
 2952 023a 6FF06303 		mvn	r3, #99
 2953 023e FB64     		str	r3, [r7, #76]
 2954 0240 04E0     		b	.L201
 2955              	.L200:
1044:..\src/interruptions.c ****             else {
1045:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 2956              		.loc 1 1045 0
 2957 0242 FB6C     		ldr	r3, [r7, #76]
 2958 0244 642B     		cmp	r3, #100
 2959 0246 01DD     		ble	.L201
1046:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 2960              		.loc 1 1046 0
 2961 0248 6423     		movs	r3, #100
 2962 024a FB64     		str	r3, [r7, #76]
 2963              	.L201:
1047:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 73


1048:..\src/interruptions.c **** 
1049:..\src/interruptions.c ****             // Update previous current
1050:..\src/interruptions.c ****             prev_curr_err = curr_error;
 2964              		.loc 1 1050 0
 2965 024c 1D4A     		ldr	r2, .L240+48
 2966 024e 7B68     		ldr	r3, [r7, #4]
 2967 0250 1360     		str	r3, [r2]
1051:..\src/interruptions.c **** 
1052:..\src/interruptions.c ****         break;
 2968              		.loc 1 1052 0
 2969 0252 1CE1     		b	.L180
 2970              	.L181:
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1055:..\src/interruptions.c ****         case CONTROL_ANGLE:
1056:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 2971              		.loc 1 1056 0
 2972 0254 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 2973 0258 0F4A     		ldr	r2, .L240+4
 2974 025a 1B01     		lsls	r3, r3, #4
 2975 025c 1344     		add	r3, r3, r2
 2976 025e 1A68     		ldr	r2, [r3]
 2977 0260 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2978 0264 0E49     		ldr	r1, .L240+12
 2979 0266 3420     		movs	r0, #52
 2980 0268 00FB03F3 		mul	r3, r0, r3
 2981 026c 0B44     		add	r3, r3, r1
 2982 026e 1B68     		ldr	r3, [r3]
 2983 0270 D31A     		subs	r3, r2, r3
 2984 0272 BB60     		str	r3, [r7, #8]
1057:..\src/interruptions.c **** 
1058:..\src/interruptions.c ****             pos_error_sum += pos_error;
 2985              		.loc 1 1058 0
 2986 0274 0B4B     		ldr	r3, .L240+16
 2987 0276 1A68     		ldr	r2, [r3]
 2988 0278 BB68     		ldr	r3, [r7, #8]
 2989 027a 1344     		add	r3, r3, r2
 2990 027c 094A     		ldr	r2, .L240+16
 2991 027e 1360     		str	r3, [r2]
1059:..\src/interruptions.c **** 
1060:..\src/interruptions.c ****             // anti-windup (for integral control)
1061:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 2992              		.loc 1 1061 0
 2993 0280 084B     		ldr	r3, .L240+16
 2994 0282 1B68     		ldr	r3, [r3]
 2995 0284 B3F57A7F 		cmp	r3, #1000
 2996 0288 1EDD     		ble	.L202
1062:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 2997              		.loc 1 1062 0
 2998 028a 064B     		ldr	r3, .L240+16
 2999 028c 4FF47A72 		mov	r2, #1000
 3000 0290 1A60     		str	r2, [r3]
 3001 0292 21E0     		b	.L203
 3002              	.L241:
 3003              		.align	2
 3004              	.L240:
 3005 0294 00000000 		.word	c_mem
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 74


 3006 0298 00000000 		.word	g_ref
 3007 029c 00000000 		.word	g_refOld
 3008 02a0 00000000 		.word	g_meas
 3009 02a4 90000000 		.word	pos_error_sum.10507
 3010 02a8 80F0FA02 		.word	50000000
 3011 02ac 800F05FD 		.word	-50000000
 3012 02b0 94000000 		.word	prev_pos_err.10509
 3013 02b4 98000000 		.word	motor_dir.10512
 3014 02b8 9C000000 		.word	curr_error_sum.10508
 3015 02bc A0860100 		.word	100000
 3016 02c0 6079FEFF 		.word	-100000
 3017 02c4 A0000000 		.word	prev_curr_err.10510
 3018              	.L202:
1063:..\src/interruptions.c ****             else {
1064:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3019              		.loc 1 1064 0
 3020 02c8 9C4B     		ldr	r3, .L242
 3021 02ca 1B68     		ldr	r3, [r3]
 3022 02cc 13F57A7F 		cmn	r3, #1000
 3023 02d0 02DA     		bge	.L203
1065:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3024              		.loc 1 1065 0
 3025 02d2 9A4B     		ldr	r3, .L242
 3026 02d4 9A4A     		ldr	r2, .L242+4
 3027 02d6 1A60     		str	r2, [r3]
 3028              	.L203:
1066:..\src/interruptions.c ****             }
1067:..\src/interruptions.c **** 
1068:..\src/interruptions.c ****             // Proportional
1069:..\src/interruptions.c ****             if (k_p != 0) 
 3029              		.loc 1 1069 0
 3030 02d8 BB6B     		ldr	r3, [r7, #56]
 3031 02da 002B     		cmp	r3, #0
 3032 02dc 05D0     		beq	.L204
1070:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3033              		.loc 1 1070 0
 3034 02de BB6B     		ldr	r3, [r7, #56]
 3035 02e0 BA68     		ldr	r2, [r7, #8]
 3036 02e2 02FB03F3 		mul	r3, r2, r3
 3037 02e6 1B14     		asrs	r3, r3, #16
 3038 02e8 FB64     		str	r3, [r7, #76]
 3039              	.L204:
1071:..\src/interruptions.c ****             
1072:..\src/interruptions.c **** 
1073:..\src/interruptions.c ****             // Integral
1074:..\src/interruptions.c ****             if (k_i != 0) 
 3040              		.loc 1 1074 0
 3041 02ea 7B6B     		ldr	r3, [r7, #52]
 3042 02ec 002B     		cmp	r3, #0
 3043 02ee 08D0     		beq	.L205
1075:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3044              		.loc 1 1075 0
 3045 02f0 924B     		ldr	r3, .L242
 3046 02f2 1B68     		ldr	r3, [r3]
 3047 02f4 7A6B     		ldr	r2, [r7, #52]
 3048 02f6 02FB03F3 		mul	r3, r2, r3
 3049 02fa 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 75


 3050 02fc FA6C     		ldr	r2, [r7, #76]
 3051 02fe 1344     		add	r3, r3, r2
 3052 0300 FB64     		str	r3, [r7, #76]
 3053              	.L205:
1076:..\src/interruptions.c ****             
1077:..\src/interruptions.c **** 
1078:..\src/interruptions.c ****             // Derivative
1079:..\src/interruptions.c ****             if (k_d != 0) 
 3054              		.loc 1 1079 0
 3055 0302 3B6B     		ldr	r3, [r7, #48]
 3056 0304 002B     		cmp	r3, #0
 3057 0306 0AD0     		beq	.L206
1080:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3058              		.loc 1 1080 0
 3059 0308 8E4B     		ldr	r3, .L242+8
 3060 030a 1B68     		ldr	r3, [r3]
 3061 030c BA68     		ldr	r2, [r7, #8]
 3062 030e D31A     		subs	r3, r2, r3
 3063 0310 3A6B     		ldr	r2, [r7, #48]
 3064 0312 02FB03F3 		mul	r3, r2, r3
 3065 0316 1B14     		asrs	r3, r3, #16
 3066 0318 FA6C     		ldr	r2, [r7, #76]
 3067 031a 1344     		add	r3, r3, r2
 3068 031c FB64     		str	r3, [r7, #76]
 3069              	.L206:
1081:..\src/interruptions.c ****             
1082:..\src/interruptions.c **** 
1083:..\src/interruptions.c ****             // Update measure
1084:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3070              		.loc 1 1084 0
 3071 031e 894A     		ldr	r2, .L242+8
 3072 0320 BB68     		ldr	r3, [r7, #8]
 3073 0322 1360     		str	r3, [r2]
1085:..\src/interruptions.c **** 
1086:..\src/interruptions.c ****             if (pwm_input > 0)
 3074              		.loc 1 1086 0
 3075 0324 FB6C     		ldr	r3, [r7, #76]
 3076 0326 002B     		cmp	r3, #0
 3077 0328 03DD     		ble	.L207
1087:..\src/interruptions.c ****                 motor_dir = TRUE;
 3078              		.loc 1 1087 0
 3079 032a 874B     		ldr	r3, .L242+12
 3080 032c 0122     		movs	r2, #1
 3081 032e 1A70     		strb	r2, [r3]
1088:..\src/interruptions.c ****             else
1089:..\src/interruptions.c ****                 motor_dir = FALSE;
1090:..\src/interruptions.c **** 
1091:..\src/interruptions.c ****         break;
 3082              		.loc 1 1091 0
 3083 0330 ADE0     		b	.L180
 3084              	.L207:
1089:..\src/interruptions.c **** 
 3085              		.loc 1 1089 0
 3086 0332 854B     		ldr	r3, .L242+12
 3087 0334 0022     		movs	r2, #0
 3088 0336 1A70     		strb	r2, [r3]
 3089              		.loc 1 1091 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 76


 3090 0338 A9E0     		b	.L180
 3091              	.L184:
1092:..\src/interruptions.c **** 
1093:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1094:..\src/interruptions.c ****         case CONTROL_CURRENT:
1095:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3092              		.loc 1 1095 0
 3093 033a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3094 033e 834A     		ldr	r2, .L242+16
 3095 0340 1B01     		lsls	r3, r3, #4
 3096 0342 1344     		add	r3, r3, r2
 3097 0344 0C33     		adds	r3, r3, #12
 3098 0346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3099 0348 002B     		cmp	r3, #0
 3100 034a 00F09D80 		beq	.L238
 3101              		.loc 1 1095 0 is_stmt 0 discriminator 1
 3102 034e 804B     		ldr	r3, .L242+20
 3103 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3104 0352 002B     		cmp	r3, #0
 3105 0354 00F09880 		beq	.L238
1096:..\src/interruptions.c ****                 
1097:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3106              		.loc 1 1097 0 is_stmt 1
 3107 0358 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3108 035c 7B4A     		ldr	r2, .L242+16
 3109 035e 1B01     		lsls	r3, r3, #4
 3110 0360 1344     		add	r3, r3, r2
 3111 0362 0433     		adds	r3, r3, #4
 3112 0364 1B68     		ldr	r3, [r3]
 3113 0366 BB64     		str	r3, [r7, #72]
1098:..\src/interruptions.c **** 
1099:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3114              		.loc 1 1099 0
 3115 0368 3B6C     		ldr	r3, [r7, #64]
 3116 036a B3F95C30 		ldrsh	r3, [r3, #92]
 3117 036e 1A46     		mov	r2, r3
 3118 0370 BB6C     		ldr	r3, [r7, #72]
 3119 0372 9A42     		cmp	r2, r3
 3120 0374 04DA     		bge	.L210
1100:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3121              		.loc 1 1100 0
 3122 0376 3B6C     		ldr	r3, [r7, #64]
 3123 0378 B3F95C30 		ldrsh	r3, [r3, #92]
 3124 037c BB64     		str	r3, [r7, #72]
 3125 037e 0BE0     		b	.L211
 3126              	.L210:
1101:..\src/interruptions.c ****                 else {
1102:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3127              		.loc 1 1102 0
 3128 0380 3B6C     		ldr	r3, [r7, #64]
 3129 0382 B3F95C30 		ldrsh	r3, [r3, #92]
 3130 0386 5A42     		negs	r2, r3
 3131 0388 BB6C     		ldr	r3, [r7, #72]
 3132 038a 9A42     		cmp	r2, r3
 3133 038c 04DD     		ble	.L211
1103:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3134              		.loc 1 1103 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 77


 3135 038e 3B6C     		ldr	r3, [r7, #64]
 3136 0390 B3F95C30 		ldrsh	r3, [r3, #92]
 3137 0394 5B42     		negs	r3, r3
 3138 0396 BB64     		str	r3, [r7, #72]
 3139              	.L211:
1104:..\src/interruptions.c ****                 }
1105:..\src/interruptions.c ****                 
1106:..\src/interruptions.c ****                 // current error
1107:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3140              		.loc 1 1107 0
 3141 0398 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3142 039c 6D4A     		ldr	r2, .L242+24
 3143 039e 3421     		movs	r1, #52
 3144 03a0 01FB03F3 		mul	r3, r1, r3
 3145 03a4 1344     		add	r3, r3, r2
 3146 03a6 0C33     		adds	r3, r3, #12
 3147 03a8 1B68     		ldr	r3, [r3]
 3148 03aa BA6C     		ldr	r2, [r7, #72]
 3149 03ac D31A     		subs	r3, r2, r3
 3150 03ae 7B60     		str	r3, [r7, #4]
1108:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3151              		.loc 1 1108 0
 3152 03b0 694B     		ldr	r3, .L242+28
 3153 03b2 1A68     		ldr	r2, [r3]
 3154 03b4 7B68     		ldr	r3, [r7, #4]
 3155 03b6 1344     		add	r3, r3, r2
 3156 03b8 674A     		ldr	r2, .L242+28
 3157 03ba 1360     		str	r3, [r2]
1109:..\src/interruptions.c ****                 
1110:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3158              		.loc 1 1110 0
 3159 03bc 664B     		ldr	r3, .L242+28
 3160 03be 1B68     		ldr	r3, [r3]
 3161 03c0 664A     		ldr	r2, .L242+32
 3162 03c2 9342     		cmp	r3, r2
 3163 03c4 03DD     		ble	.L212
1111:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3164              		.loc 1 1111 0
 3165 03c6 644B     		ldr	r3, .L242+28
 3166 03c8 644A     		ldr	r2, .L242+32
 3167 03ca 1A60     		str	r2, [r3]
 3168 03cc 07E0     		b	.L213
 3169              	.L212:
1112:..\src/interruptions.c ****                 else {
1113:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3170              		.loc 1 1113 0
 3171 03ce 624B     		ldr	r3, .L242+28
 3172 03d0 1B68     		ldr	r3, [r3]
 3173 03d2 634A     		ldr	r2, .L242+36
 3174 03d4 9342     		cmp	r3, r2
 3175 03d6 02DA     		bge	.L213
1114:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3176              		.loc 1 1114 0
 3177 03d8 5F4B     		ldr	r3, .L242+28
 3178 03da 614A     		ldr	r2, .L242+36
 3179 03dc 1A60     		str	r2, [r3]
 3180              	.L213:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 78


1115:..\src/interruptions.c ****                 }
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****                 pwm_input = 0;
 3181              		.loc 1 1117 0
 3182 03de 0023     		movs	r3, #0
 3183 03e0 FB64     		str	r3, [r7, #76]
1118:..\src/interruptions.c **** 
1119:..\src/interruptions.c ****                 // Proportional
1120:..\src/interruptions.c ****                 if (k_p_c != 0)
 3184              		.loc 1 1120 0
 3185 03e2 FB6A     		ldr	r3, [r7, #44]
 3186 03e4 002B     		cmp	r3, #0
 3187 03e6 07D0     		beq	.L214
1121:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3188              		.loc 1 1121 0
 3189 03e8 FB6A     		ldr	r3, [r7, #44]
 3190 03ea 7A68     		ldr	r2, [r7, #4]
 3191 03ec 02FB03F3 		mul	r3, r2, r3
 3192 03f0 1B14     		asrs	r3, r3, #16
 3193 03f2 FA6C     		ldr	r2, [r7, #76]
 3194 03f4 1344     		add	r3, r3, r2
 3195 03f6 FB64     		str	r3, [r7, #76]
 3196              	.L214:
1122:..\src/interruptions.c **** 
1123:..\src/interruptions.c ****                 // Integral
1124:..\src/interruptions.c ****                 if (k_i_c != 0)
 3197              		.loc 1 1124 0
 3198 03f8 BB6A     		ldr	r3, [r7, #40]
 3199 03fa 002B     		cmp	r3, #0
 3200 03fc 08D0     		beq	.L215
1125:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3201              		.loc 1 1125 0
 3202 03fe 564B     		ldr	r3, .L242+28
 3203 0400 1B68     		ldr	r3, [r3]
 3204 0402 BA6A     		ldr	r2, [r7, #40]
 3205 0404 02FB03F3 		mul	r3, r2, r3
 3206 0408 1B14     		asrs	r3, r3, #16
 3207 040a FA6C     		ldr	r2, [r7, #76]
 3208 040c 1344     		add	r3, r3, r2
 3209 040e FB64     		str	r3, [r7, #76]
 3210              	.L215:
1126:..\src/interruptions.c **** 
1127:..\src/interruptions.c ****                 // Derivative
1128:..\src/interruptions.c ****                 if (k_d_c != 0)
 3211              		.loc 1 1128 0
 3212 0410 7B6A     		ldr	r3, [r7, #36]
 3213 0412 002B     		cmp	r3, #0
 3214 0414 0AD0     		beq	.L216
1129:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3215              		.loc 1 1129 0
 3216 0416 534B     		ldr	r3, .L242+40
 3217 0418 1B68     		ldr	r3, [r3]
 3218 041a 7A68     		ldr	r2, [r7, #4]
 3219 041c D31A     		subs	r3, r2, r3
 3220 041e 7A6A     		ldr	r2, [r7, #36]
 3221 0420 02FB03F3 		mul	r3, r2, r3
 3222 0424 1B14     		asrs	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 79


 3223 0426 FA6C     		ldr	r2, [r7, #76]
 3224 0428 1344     		add	r3, r3, r2
 3225 042a FB64     		str	r3, [r7, #76]
 3226              	.L216:
1130:..\src/interruptions.c ****                 
1131:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3227              		.loc 1 1131 0
 3228 042c 4D4A     		ldr	r2, .L242+40
 3229 042e 7B68     		ldr	r3, [r7, #4]
 3230 0430 1360     		str	r3, [r2]
1132:..\src/interruptions.c ****                 
1133:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3231              		.loc 1 1133 0
 3232 0432 FB6C     		ldr	r3, [r7, #76]
 3233 0434 002B     		cmp	r3, #0
 3234 0436 03DB     		blt	.L217
1134:..\src/interruptions.c ****                     motor_dir = TRUE;
 3235              		.loc 1 1134 0
 3236 0438 434B     		ldr	r3, .L242+12
 3237 043a 0122     		movs	r2, #1
 3238 043c 1A70     		strb	r2, [r3]
1135:..\src/interruptions.c ****                 else
1136:..\src/interruptions.c ****                     motor_dir = FALSE;
1137:..\src/interruptions.c ****             }
1138:..\src/interruptions.c ****         break;
 3239              		.loc 1 1138 0
 3240 043e 23E0     		b	.L238
 3241              	.L217:
1136:..\src/interruptions.c ****             }
 3242              		.loc 1 1136 0
 3243 0440 414B     		ldr	r3, .L242+12
 3244 0442 0022     		movs	r2, #0
 3245 0444 1A70     		strb	r2, [r3]
 3246              		.loc 1 1138 0
 3247 0446 1FE0     		b	.L238
 3248              	.L183:
1139:..\src/interruptions.c ****         
1140:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1141:..\src/interruptions.c ****         case CONTROL_PWM:
1142:..\src/interruptions.c **** 
1143:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3249              		.loc 1 1143 0
 3250 0448 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3251 044c 3F4A     		ldr	r2, .L242+16
 3252 044e 1B01     		lsls	r3, r3, #4
 3253 0450 1344     		add	r3, r3, r2
 3254 0452 0833     		adds	r3, r3, #8
 3255 0454 1B68     		ldr	r3, [r3]
 3256 0456 FB64     		str	r3, [r7, #76]
1144:..\src/interruptions.c **** 
1145:..\src/interruptions.c ****             if (pwm_input > 0) 
 3257              		.loc 1 1145 0
 3258 0458 FB6C     		ldr	r3, [r7, #76]
 3259 045a 002B     		cmp	r3, #0
 3260 045c 03DD     		ble	.L218
1146:..\src/interruptions.c ****                 motor_dir = TRUE;
 3261              		.loc 1 1146 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 80


 3262 045e 3A4B     		ldr	r3, .L242+12
 3263 0460 0122     		movs	r2, #1
 3264 0462 1A70     		strb	r2, [r3]
 3265 0464 02E0     		b	.L219
 3266              	.L218:
1147:..\src/interruptions.c ****             else 
1148:..\src/interruptions.c ****                 motor_dir = FALSE;
 3267              		.loc 1 1148 0
 3268 0466 384B     		ldr	r3, .L242+12
 3269 0468 0022     		movs	r2, #0
 3270 046a 1A70     		strb	r2, [r3]
 3271              	.L219:
1149:..\src/interruptions.c ****             
1150:..\src/interruptions.c **** 
1151:..\src/interruptions.c ****             // pwm_input saturation
1152:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3272              		.loc 1 1152 0
 3273 046c FB6C     		ldr	r3, [r7, #76]
 3274 046e 13F1640F 		cmn	r3, #100
 3275 0472 03DA     		bge	.L220
1153:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3276              		.loc 1 1153 0
 3277 0474 6FF06303 		mvn	r3, #99
 3278 0478 FB64     		str	r3, [r7, #76]
1154:..\src/interruptions.c ****             else {
1155:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1156:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1157:..\src/interruptions.c ****         	}
1158:..\src/interruptions.c **** 
1159:..\src/interruptions.c ****         break;
 3279              		.loc 1 1159 0
 3280 047a 07E0     		b	.L239
 3281              	.L220:
1155:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 3282              		.loc 1 1155 0
 3283 047c FB6C     		ldr	r3, [r7, #76]
 3284 047e 642B     		cmp	r3, #100
 3285 0480 04DD     		ble	.L239
1156:..\src/interruptions.c ****         	}
 3286              		.loc 1 1156 0
 3287 0482 6423     		movs	r3, #100
 3288 0484 FB64     		str	r3, [r7, #76]
 3289              		.loc 1 1159 0
 3290 0486 01E0     		b	.L239
 3291              	.L238:
1138:..\src/interruptions.c ****         
 3292              		.loc 1 1138 0
 3293 0488 00BF     		nop
 3294 048a 00E0     		b	.L180
 3295              	.L239:
 3296              		.loc 1 1159 0
 3297 048c 00BF     		nop
 3298              	.L180:
1160:..\src/interruptions.c ****             
1161:..\src/interruptions.c ****     }
1162:..\src/interruptions.c **** 
1163:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 81


1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3299              		.loc 1 1165 0
 3300 048e FB6C     		ldr	r3, [r7, #76]
 3301 0490 642B     		cmp	r3, #100
 3302 0492 01DD     		ble	.L222
1166:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3303              		.loc 1 1166 0
 3304 0494 6423     		movs	r3, #100
 3305 0496 FB64     		str	r3, [r7, #76]
 3306              	.L222:
1167:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3307              		.loc 1 1167 0
 3308 0498 FB6C     		ldr	r3, [r7, #76]
 3309 049a 13F1640F 		cmn	r3, #100
 3310 049e 02DA     		bge	.L223
1168:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3311              		.loc 1 1168 0
 3312 04a0 6FF06303 		mvn	r3, #99
 3313 04a4 FB64     		str	r3, [r7, #76]
 3314              	.L223:
1169:..\src/interruptions.c **** 
1170:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3315              		.loc 1 1170 0
 3316 04a6 3B6C     		ldr	r3, [r7, #64]
 3317 04a8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3318 04ac 012B     		cmp	r3, #1
 3319 04ae 0DD0     		beq	.L224
1171:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 3320              		.loc 1 1171 0
 3321 04b0 FB6C     		ldr	r3, [r7, #76]
 3322 04b2 9B02     		lsls	r3, r3, #10
 3323 04b4 2C4A     		ldr	r2, .L242+44
 3324 04b6 82FB0312 		smull	r1, r2, r2, r3
 3325 04ba 5211     		asrs	r2, r2, #5
 3326 04bc DB17     		asrs	r3, r3, #31
 3327 04be D31A     		subs	r3, r2, r3
 3328 04c0 2A4A     		ldr	r2, .L242+48
 3329 04c2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3330 04c4 02FB03F3 		mul	r3, r2, r3
 3331 04c8 9B12     		asrs	r3, r3, #10
 3332 04ca FB64     		str	r3, [r7, #76]
 3333              	.L224:
1172:..\src/interruptions.c ****  
1173:..\src/interruptions.c ****     //// RATE LIMITER ////
1174:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3334              		.loc 1 1174 0
 3335 04cc 284B     		ldr	r3, .L242+52
 3336 04ce 1B68     		ldr	r3, [r3]
 3337 04d0 FA6C     		ldr	r2, [r7, #76]
 3338 04d2 D31A     		subs	r3, r2, r3
 3339 04d4 3A6C     		ldr	r2, [r7, #64]
 3340 04d6 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3341 04da 9342     		cmp	r3, r2
 3342 04dc 08DD     		ble	.L225
1175:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3343              		.loc 1 1175 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 82


 3344 04de 3B6C     		ldr	r3, [r7, #64]
 3345 04e0 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3346 04e4 1A46     		mov	r2, r3
 3347 04e6 224B     		ldr	r3, .L242+52
 3348 04e8 1B68     		ldr	r3, [r3]
 3349 04ea 1344     		add	r3, r3, r2
 3350 04ec FB64     		str	r3, [r7, #76]
 3351 04ee 10E0     		b	.L226
 3352              	.L225:
1176:..\src/interruptions.c ****     }
1177:..\src/interruptions.c ****     else {
1178:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3353              		.loc 1 1178 0
 3354 04f0 1F4B     		ldr	r3, .L242+52
 3355 04f2 1B68     		ldr	r3, [r3]
 3356 04f4 FA6C     		ldr	r2, [r7, #76]
 3357 04f6 D21A     		subs	r2, r2, r3
 3358 04f8 3B6C     		ldr	r3, [r7, #64]
 3359 04fa 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3360 04fe 5B42     		negs	r3, r3
 3361 0500 9A42     		cmp	r2, r3
 3362 0502 06DA     		bge	.L226
1179:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3363              		.loc 1 1179 0
 3364 0504 1A4B     		ldr	r3, .L242+52
 3365 0506 1B68     		ldr	r3, [r3]
 3366 0508 3A6C     		ldr	r2, [r7, #64]
 3367 050a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3368 050e 9B1A     		subs	r3, r3, r2
 3369 0510 FB64     		str	r3, [r7, #76]
 3370              	.L226:
1180:..\src/interruptions.c ****     }
1181:..\src/interruptions.c ****     
1182:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 3371              		.loc 1 1182 0
 3372 0512 FB6C     		ldr	r3, [r7, #76]
 3373 0514 642B     		cmp	r3, #100
 3374 0516 01DD     		ble	.L227
1183:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 3375              		.loc 1 1183 0
 3376 0518 6423     		movs	r3, #100
 3377 051a FB64     		str	r3, [r7, #76]
 3378              	.L227:
1184:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 3379              		.loc 1 1184 0
 3380 051c FB6C     		ldr	r3, [r7, #76]
 3381 051e 13F1640F 		cmn	r3, #100
 3382 0522 02DA     		bge	.L228
1185:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 3383              		.loc 1 1185 0
 3384 0524 6FF06303 		mvn	r3, #99
 3385 0528 FB64     		str	r3, [r7, #76]
 3386              	.L228:
1186:..\src/interruptions.c ****     
1187:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3387              		.loc 1 1187 0
 3388 052a 114A     		ldr	r2, .L242+52
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 83


 3389 052c FB6C     		ldr	r3, [r7, #76]
 3390 052e 1360     		str	r3, [r2]
1188:..\src/interruptions.c **** 	
1189:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 3391              		.loc 1 1189 0
 3392 0530 FB6C     		ldr	r3, [r7, #76]
 3393 0532 002B     		cmp	r3, #0
 3394 0534 1EDB     		blt	.L229
 3395              		.loc 1 1189 0 is_stmt 0 discriminator 1
 3396 0536 0122     		movs	r2, #1
 3397 0538 1EE0     		b	.L230
 3398              	.L243:
 3399 053a 00BF     		.align	2
 3400              	.L242:
 3401 053c 90000000 		.word	pos_error_sum.10507
 3402 0540 18FCFFFF 		.word	-1000
 3403 0544 94000000 		.word	prev_pos_err.10509
 3404 0548 98000000 		.word	motor_dir.10512
 3405 054c 00000000 		.word	g_ref
 3406 0550 00000000 		.word	tension_valid
 3407 0554 00000000 		.word	g_meas
 3408 0558 9C000000 		.word	curr_error_sum.10508
 3409 055c A0860100 		.word	100000
 3410 0560 6079FEFF 		.word	-100000
 3411 0564 A0000000 		.word	prev_curr_err.10510
 3412 0568 1F85EB51 		.word	1374389535
 3413 056c 00000000 		.word	dev_pwm_limit
 3414 0570 A4000000 		.word	prev_pwm.10511
 3415              	.L229:
 3416              		.loc 1 1189 0 discriminator 2
 3417 0574 4FF0FF32 		mov	r2, #-1
 3418              	.L230:
 3419              		.loc 1 1189 0 discriminator 4
 3420 0578 5A4B     		ldr	r3, .L244
 3421 057a 1A70     		strb	r2, [r3]
1190:..\src/interruptions.c ****     
1191:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3422              		.loc 1 1191 0 is_stmt 1 discriminator 4
 3423 057c 3B6C     		ldr	r3, [r7, #64]
 3424 057e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3425 0582 012B     		cmp	r3, #1
 3426 0584 40F09680 		bne	.L231
1192:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1193:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3427              		.loc 1 1193 0
 3428 0588 3B6C     		ldr	r3, [r7, #64]
 3429 058a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3430 058e 012B     		cmp	r3, #1
 3431 0590 00F08D80 		beq	.L232
 3432              		.loc 1 1193 0 is_stmt 0 discriminator 1
 3433 0594 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3434 0598 534A     		ldr	r2, .L244+4
 3435 059a 3421     		movs	r1, #52
 3436 059c 01FB03F3 		mul	r3, r1, r3
 3437 05a0 1344     		add	r3, r3, r2
 3438 05a2 1A68     		ldr	r2, [r3]
 3439 05a4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 84


 3440 05a8 5049     		ldr	r1, .L244+8
 3441 05aa 3420     		movs	r0, #52
 3442 05ac 00FB03F3 		mul	r3, r0, r3
 3443 05b0 0B44     		add	r3, r3, r1
 3444 05b2 1B68     		ldr	r3, [r3]
 3445 05b4 D31A     		subs	r3, r2, r3
 3446 05b6 312B     		cmp	r3, #49
 3447 05b8 79DC     		bgt	.L232
1194:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3448              		.loc 1 1194 0 is_stmt 1 discriminator 2
 3449 05ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3450 05be 4A4A     		ldr	r2, .L244+4
 3451 05c0 3421     		movs	r1, #52
 3452 05c2 01FB03F3 		mul	r3, r1, r3
 3453 05c6 1344     		add	r3, r3, r2
 3454 05c8 1A68     		ldr	r2, [r3]
 3455 05ca 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3456 05ce 4749     		ldr	r1, .L244+8
 3457 05d0 3420     		movs	r0, #52
 3458 05d2 00FB03F3 		mul	r3, r0, r3
 3459 05d6 0B44     		add	r3, r3, r1
 3460 05d8 1B68     		ldr	r3, [r3]
 3461 05da D31A     		subs	r3, r2, r3
1193:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3462              		.loc 1 1193 0 discriminator 2
 3463 05dc 13F1310F 		cmn	r3, #49
 3464 05e0 65DB     		blt	.L232
1195:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3465              		.loc 1 1195 0
 3466 05e2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3467 05e6 424A     		ldr	r2, .L244+12
 3468 05e8 1B01     		lsls	r3, r3, #4
 3469 05ea 1344     		add	r3, r3, r2
 3470 05ec 1A68     		ldr	r2, [r3]
 3471 05ee 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3472 05f2 4049     		ldr	r1, .L244+16
 3473 05f4 1B01     		lsls	r3, r3, #4
 3474 05f6 0B44     		add	r3, r3, r1
 3475 05f8 1B68     		ldr	r3, [r3]
 3476 05fa D31A     		subs	r3, r2, r3
1194:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3477              		.loc 1 1194 0
 3478 05fc 632B     		cmp	r3, #99
 3479 05fe 56DC     		bgt	.L232
 3480              		.loc 1 1195 0
 3481 0600 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3482 0604 3A4A     		ldr	r2, .L244+12
 3483 0606 1B01     		lsls	r3, r3, #4
 3484 0608 1344     		add	r3, r3, r2
 3485 060a 1A68     		ldr	r2, [r3]
 3486 060c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3487 0610 3849     		ldr	r1, .L244+16
 3488 0612 1B01     		lsls	r3, r3, #4
 3489 0614 0B44     		add	r3, r3, r1
 3490 0616 1B68     		ldr	r3, [r3]
 3491 0618 D31A     		subs	r3, r2, r3
 3492 061a 13F1630F 		cmn	r3, #99
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 85


 3493 061e 46DB     		blt	.L232
1196:..\src/interruptions.c ****             position_counter++;
 3494              		.loc 1 1196 0
 3495 0620 354B     		ldr	r3, .L244+20
 3496 0622 1B68     		ldr	r3, [r3]
 3497 0624 0133     		adds	r3, r3, #1
 3498 0626 344A     		ldr	r2, .L244+20
 3499 0628 1360     		str	r3, [r2]
1197:..\src/interruptions.c ****             
1198:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3500              		.loc 1 1198 0
 3501 062a 334B     		ldr	r3, .L244+20
 3502 062c 1B68     		ldr	r3, [r3]
 3503 062e F92B     		cmp	r3, #249
 3504 0630 40D9     		bls	.L231
1199:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3505              		.loc 1 1199 0
 3506 0632 3B6C     		ldr	r3, [r7, #64]
 3507 0634 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3508 0638 002B     		cmp	r3, #0
 3509 063a 11D1     		bne	.L234
 3510              		.loc 1 1199 0 is_stmt 0 discriminator 1
 3511 063c 2F4B     		ldr	r3, .L244+24
 3512 063e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3513 0640 002B     		cmp	r3, #0
 3514 0642 0DD1     		bne	.L234
1200:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3515              		.loc 1 1200 0 is_stmt 1
 3516 0644 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3517 0648 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3518 064c 2749     		ldr	r1, .L244+8
 3519 064e 3420     		movs	r0, #52
 3520 0650 00FB02F2 		mul	r2, r0, r2
 3521 0654 0A44     		add	r2, r2, r1
 3522 0656 1268     		ldr	r2, [r2]
 3523 0658 2949     		ldr	r1, .L244+28
 3524 065a 1B01     		lsls	r3, r3, #4
 3525 065c 0B44     		add	r3, r3, r1
 3526 065e 1A60     		str	r2, [r3]
 3527              	.L234:
1201:..\src/interruptions.c ****                 }
1202:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3528              		.loc 1 1202 0
 3529 0660 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3530 0664 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3531 0668 2049     		ldr	r1, .L244+8
 3532 066a 3420     		movs	r0, #52
 3533 066c 00FB02F2 		mul	r2, r0, r2
 3534 0670 0A44     		add	r2, r2, r1
 3535 0672 1268     		ldr	r2, [r2]
 3536 0674 1F49     		ldr	r1, .L244+16
 3537 0676 1B01     		lsls	r3, r3, #4
 3538 0678 0B44     		add	r3, r3, r1
 3539 067a 1A60     		str	r2, [r3]
1203:..\src/interruptions.c ****                 
1204:..\src/interruptions.c ****                 if (position_counter == 250){
 3540              		.loc 1 1204 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 86


 3541 067c 1E4B     		ldr	r3, .L244+20
 3542 067e 1B68     		ldr	r3, [r3]
 3543 0680 FA2B     		cmp	r3, #250
 3544 0682 11D1     		bne	.L235
1205:..\src/interruptions.c ****                     // To do only once
1206:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3545              		.loc 1 1206 0
 3546 0684 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3547 0688 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3548 068c 1749     		ldr	r1, .L244+8
 3549 068e 3420     		movs	r0, #52
 3550 0690 00FB02F2 		mul	r2, r0, r2
 3551 0694 0A44     		add	r2, r2, r1
 3552 0696 0C32     		adds	r2, r2, #12
 3553 0698 1268     		ldr	r2, [r2]
 3554 069a 1449     		ldr	r1, .L244+8
 3555 069c 3420     		movs	r0, #52
 3556 069e 00FB03F3 		mul	r3, r0, r3
 3557 06a2 0B44     		add	r3, r3, r1
 3558 06a4 1433     		adds	r3, r3, #20
 3559 06a6 1A60     		str	r2, [r3]
 3560              	.L235:
1207:..\src/interruptions.c ****                 }
1208:..\src/interruptions.c ****                 pwm_input = 0;            
 3561              		.loc 1 1208 0
 3562 06a8 0023     		movs	r3, #0
 3563 06aa FB64     		str	r3, [r7, #76]
1198:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 3564              		.loc 1 1198 0
 3565 06ac 02E0     		b	.L231
 3566              	.L232:
1209:..\src/interruptions.c ****             }
1210:..\src/interruptions.c ****         }
1211:..\src/interruptions.c ****         else {
1212:..\src/interruptions.c ****             position_counter = 0;
 3567              		.loc 1 1212 0
 3568 06ae 124B     		ldr	r3, .L244+20
 3569 06b0 0022     		movs	r2, #0
 3570 06b2 1A60     		str	r2, [r3]
 3571              	.L231:
1213:..\src/interruptions.c ****         }
1214:..\src/interruptions.c ****     }
1215:..\src/interruptions.c ****     
1216:..\src/interruptions.c ****     if (motor_dir)
 3572              		.loc 1 1216 0
 3573 06b4 134B     		ldr	r3, .L244+32
 3574 06b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3575 06b8 002B     		cmp	r3, #0
 3576 06ba 03D0     		beq	.L236
1217:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 3577              		.loc 1 1217 0
 3578 06bc 0120     		movs	r0, #1
 3579 06be FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3580 06c2 02E0     		b	.L237
 3581              	.L236:
1218:..\src/interruptions.c ****     else
1219:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 87


 3582              		.loc 1 1219 0
 3583 06c4 0020     		movs	r0, #0
 3584 06c6 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 3585              	.L237:
1220:..\src/interruptions.c **** 
1221:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 3586              		.loc 1 1221 0
 3587 06ca FB6C     		ldr	r3, [r7, #76]
 3588 06cc 002B     		cmp	r3, #0
 3589 06ce B8BF     		it	lt
 3590 06d0 5B42     		rsblt	r3, r3, #0
 3591 06d2 DBB2     		uxtb	r3, r3
 3592 06d4 1846     		mov	r0, r3
 3593 06d6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1222:..\src/interruptions.c **** }
 3594              		.loc 1 1222 0
 3595 06da 00BF     		nop
 3596 06dc 5037     		adds	r7, r7, #80
 3597              		.cfi_def_cfa_offset 8
 3598 06de BD46     		mov	sp, r7
 3599              		.cfi_def_cfa_register 13
 3600              		@ sp needed
 3601 06e0 80BD     		pop	{r7, pc}
 3602              	.L245:
 3603 06e2 00BF     		.align	2
 3604              	.L244:
 3605 06e4 00000000 		.word	pwm_sign
 3606 06e8 00000000 		.word	g_measOld
 3607 06ec 00000000 		.word	g_meas
 3608 06f0 00000000 		.word	g_refOld
 3609 06f4 00000000 		.word	g_ref
 3610 06f8 A8000000 		.word	position_counter.10513
 3611 06fc 00000000 		.word	change_ext_ref_flag
 3612 0700 00000000 		.word	g_refNew
 3613 0704 98000000 		.word	motor_dir.10512
 3614              		.cfi_endproc
 3615              	.LFE70:
 3616              		.size	motor_control_SH, .-motor_control_SH
 3617              		.section	.text.motor_control_generic,"ax",%progbits
 3618              		.align	2
 3619              		.global	motor_control_generic
 3620              		.thumb
 3621              		.thumb_func
 3622              		.type	motor_control_generic, %function
 3623              	motor_control_generic:
 3624              	.LFB71:
1223:..\src/interruptions.c **** 
1224:..\src/interruptions.c **** //==============================================================================
1225:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1226:..\src/interruptions.c **** //==============================================================================
1227:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 3625              		.loc 1 1227 0
 3626              		.cfi_startproc
 3627              		@ args = 0, pretend = 0, frame = 80
 3628              		@ frame_needed = 1, uses_anonymous_args = 0
 3629 0000 90B5     		push	{r4, r7, lr}
 3630              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 88


 3631              		.cfi_offset 4, -12
 3632              		.cfi_offset 7, -8
 3633              		.cfi_offset 14, -4
 3634 0002 95B0     		sub	sp, sp, #84
 3635              		.cfi_def_cfa_offset 96
 3636 0004 00AF     		add	r7, sp, #0
 3637              		.cfi_def_cfa_register 7
 3638 0006 0346     		mov	r3, r0
 3639 0008 FB71     		strb	r3, [r7, #7]
1228:..\src/interruptions.c ****     
1229:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3640              		.loc 1 1229 0
 3641 000a 0023     		movs	r3, #0
 3642 000c FB64     		str	r3, [r7, #76]
1230:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1231:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1232:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1233:..\src/interruptions.c **** 
1234:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 3643              		.loc 1 1234 0
 3644 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3645 0010 1346     		mov	r3, r2
 3646 0012 DB00     		lsls	r3, r3, #3
 3647 0014 9B1A     		subs	r3, r3, r2
 3648 0016 1B01     		lsls	r3, r3, #4
 3649 0018 B033     		adds	r3, r3, #176
 3650 001a 9C4A     		ldr	r2, .L318
 3651 001c 1344     		add	r3, r3, r2
 3652 001e 7B64     		str	r3, [r7, #68]
1235:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 3653              		.loc 1 1235 0
 3654 0020 7B6C     		ldr	r3, [r7, #68]
 3655 0022 93F86030 		ldrb	r3, [r3, #96]
 3656 0026 87F84330 		strb	r3, [r7, #67]
1236:..\src/interruptions.c ****     
1237:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 3657              		.loc 1 1237 0
 3658 002a 7B6C     		ldr	r3, [r7, #68]
 3659 002c 1B68     		ldr	r3, [r3]
 3660 002e FB63     		str	r3, [r7, #60]
1238:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 3661              		.loc 1 1238 0
 3662 0030 7B6C     		ldr	r3, [r7, #68]
 3663 0032 5B68     		ldr	r3, [r3, #4]
 3664 0034 BB63     		str	r3, [r7, #56]
1239:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 3665              		.loc 1 1239 0
 3666 0036 7B6C     		ldr	r3, [r7, #68]
 3667 0038 9B68     		ldr	r3, [r3, #8]
 3668 003a 7B63     		str	r3, [r7, #52]
1240:..\src/interruptions.c **** 
1241:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 3669              		.loc 1 1241 0
 3670 003c 7B6C     		ldr	r3, [r7, #68]
 3671 003e DB68     		ldr	r3, [r3, #12]
 3672 0040 3B63     		str	r3, [r7, #48]
1242:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 89


 3673              		.loc 1 1242 0
 3674 0042 7B6C     		ldr	r3, [r7, #68]
 3675 0044 1B69     		ldr	r3, [r3, #16]
 3676 0046 FB62     		str	r3, [r7, #44]
1243:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 3677              		.loc 1 1243 0
 3678 0048 7B6C     		ldr	r3, [r7, #68]
 3679 004a 5B69     		ldr	r3, [r3, #20]
 3680 004c BB62     		str	r3, [r7, #40]
1244:..\src/interruptions.c **** 
1245:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 3681              		.loc 1 1245 0
 3682 004e 7B6C     		ldr	r3, [r7, #68]
 3683 0050 9B69     		ldr	r3, [r3, #24]
 3684 0052 7B62     		str	r3, [r7, #36]
1246:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 3685              		.loc 1 1246 0
 3686 0054 7B6C     		ldr	r3, [r7, #68]
 3687 0056 DB69     		ldr	r3, [r3, #28]
 3688 0058 3B62     		str	r3, [r7, #32]
1247:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 3689              		.loc 1 1247 0
 3690 005a 7B6C     		ldr	r3, [r7, #68]
 3691 005c 1B6A     		ldr	r3, [r3, #32]
 3692 005e FB61     		str	r3, [r7, #28]
1248:..\src/interruptions.c ****     
1249:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 3693              		.loc 1 1249 0
 3694 0060 7B6C     		ldr	r3, [r7, #68]
 3695 0062 5B6A     		ldr	r3, [r3, #36]
 3696 0064 BB61     		str	r3, [r7, #24]
1250:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 3697              		.loc 1 1250 0
 3698 0066 7B6C     		ldr	r3, [r7, #68]
 3699 0068 9B6A     		ldr	r3, [r3, #40]
 3700 006a 7B61     		str	r3, [r7, #20]
1251:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 3701              		.loc 1 1251 0
 3702 006c 7B6C     		ldr	r3, [r7, #68]
 3703 006e DB6A     		ldr	r3, [r3, #44]
 3704 0070 3B61     		str	r3, [r7, #16]
1252:..\src/interruptions.c **** 
1253:..\src/interruptions.c ****     // Static Variables
1254:..\src/interruptions.c **** 
1255:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1256:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1257:..\src/interruptions.c ****     
1258:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1259:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1260:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1263:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1264:..\src/interruptions.c **** 
1265:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1266:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 3705              		.loc 1 1266 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 90


 3706 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3707 0074 1B01     		lsls	r3, r3, #4
 3708 0076 864A     		ldr	r2, .L318+4
 3709 0078 9918     		adds	r1, r3, r2
 3710 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3711 007c 1B01     		lsls	r3, r3, #4
 3712 007e 854A     		ldr	r2, .L318+8
 3713 0080 1A44     		add	r2, r2, r3
 3714 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3715 0084 1846     		mov	r0, r3
 3716 0086 FFF7FEFF 		bl	compute_reference
1267:..\src/interruptions.c ****     
1268:..\src/interruptions.c ****    
1269:..\src/interruptions.c ****     switch(MOT->control_mode) {
 3717              		.loc 1 1269 0
 3718 008a 7B6C     		ldr	r3, [r7, #68]
 3719 008c 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3720 0090 032B     		cmp	r3, #3
 3721 0092 00F25482 		bhi	.L247
 3722 0096 01A2     		adr	r2, .L249
 3723 0098 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3724              		.p2align 2
 3725              	.L249:
 3726 009c C1020000 		.word	.L248+1
 3727 00a0 CB040000 		.word	.L250+1
 3728 00a4 99030000 		.word	.L251+1
 3729 00a8 AD000000 		.word	.L252+1
 3730              		.p2align 1
 3731              	.L252:
1270:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1271:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1272:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 3732              		.loc 1 1272 0
 3733 00ac 784B     		ldr	r3, .L318+4
 3734 00ae 1A68     		ldr	r2, [r3]
 3735 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3736 00b4 7849     		ldr	r1, .L318+12
 3737 00b6 3420     		movs	r0, #52
 3738 00b8 00FB03F3 		mul	r3, r0, r3
 3739 00bc 0B44     		add	r3, r3, r1
 3740 00be 1B68     		ldr	r3, [r3]
 3741 00c0 D31A     		subs	r3, r2, r3
 3742 00c2 FB60     		str	r3, [r7, #12]
1273:..\src/interruptions.c **** 
1274:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 3743              		.loc 1 1274 0
 3744 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3745 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3746 00c8 7449     		ldr	r1, .L318+16
 3747 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3748 00ce FA68     		ldr	r2, [r7, #12]
 3749 00d0 0A44     		add	r2, r2, r1
 3750 00d2 7249     		ldr	r1, .L318+16
 3751 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1275:..\src/interruptions.c **** 
1276:..\src/interruptions.c ****             // error_sum saturation
1277:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 91


 3752              		.loc 1 1277 0
 3753 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3754 00da 704A     		ldr	r2, .L318+16
 3755 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3756 00e0 6F4A     		ldr	r2, .L318+20
 3757 00e2 9342     		cmp	r3, r2
 3758 00e4 05DD     		ble	.L253
1278:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 3759              		.loc 1 1278 0
 3760 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3761 00e8 6C4A     		ldr	r2, .L318+16
 3762 00ea 6D49     		ldr	r1, .L318+20
 3763 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 3764 00f0 0BE0     		b	.L254
 3765              	.L253:
1279:..\src/interruptions.c ****             else {
1280:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 3766              		.loc 1 1280 0
 3767 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3768 00f4 694A     		ldr	r2, .L318+16
 3769 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3770 00fa 6A4A     		ldr	r2, .L318+24
 3771 00fc 9342     		cmp	r3, r2
 3772 00fe 04DA     		bge	.L254
1281:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 3773              		.loc 1 1281 0
 3774 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3775 0102 664A     		ldr	r2, .L318+16
 3776 0104 6749     		ldr	r1, .L318+24
 3777 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 3778              	.L254:
1282:..\src/interruptions.c ****             }
1283:..\src/interruptions.c ****             
1284:..\src/interruptions.c ****             // ------ position PID control ------
1285:..\src/interruptions.c **** 
1286:..\src/interruptions.c ****             i_ref = 0;
 3779              		.loc 1 1286 0
 3780 010a 0023     		movs	r3, #0
 3781 010c BB64     		str	r3, [r7, #72]
1287:..\src/interruptions.c ****             
1288:..\src/interruptions.c ****             // Proportional
1289:..\src/interruptions.c ****             if (k_p_dl != 0)
 3782              		.loc 1 1289 0
 3783 010e 7B6A     		ldr	r3, [r7, #36]
 3784 0110 002B     		cmp	r3, #0
 3785 0112 07D0     		beq	.L255
1290:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3786              		.loc 1 1290 0
 3787 0114 7B6A     		ldr	r3, [r7, #36]
 3788 0116 FA68     		ldr	r2, [r7, #12]
 3789 0118 02FB03F3 		mul	r3, r2, r3
 3790 011c 1B14     		asrs	r3, r3, #16
 3791 011e BA6C     		ldr	r2, [r7, #72]
 3792 0120 1344     		add	r3, r3, r2
 3793 0122 BB64     		str	r3, [r7, #72]
 3794              	.L255:
1291:..\src/interruptions.c **** 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 92


1292:..\src/interruptions.c ****             // Integral
1293:..\src/interruptions.c ****             if (k_i_dl != 0)
 3795              		.loc 1 1293 0
 3796 0124 3B6A     		ldr	r3, [r7, #32]
 3797 0126 002B     		cmp	r3, #0
 3798 0128 0AD0     		beq	.L256
1294:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 3799              		.loc 1 1294 0
 3800 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3801 012c 5B4A     		ldr	r2, .L318+16
 3802 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3803 0132 3A6A     		ldr	r2, [r7, #32]
 3804 0134 02FB03F3 		mul	r3, r2, r3
 3805 0138 1B14     		asrs	r3, r3, #16
 3806 013a BA6C     		ldr	r2, [r7, #72]
 3807 013c 1344     		add	r3, r3, r2
 3808 013e BB64     		str	r3, [r7, #72]
 3809              	.L256:
1295:..\src/interruptions.c **** 
1296:..\src/interruptions.c ****             // Derivative
1297:..\src/interruptions.c ****             if (k_d_dl != 0)
 3810              		.loc 1 1297 0
 3811 0140 FB69     		ldr	r3, [r7, #28]
 3812 0142 002B     		cmp	r3, #0
 3813 0144 0CD0     		beq	.L257
1298:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 3814              		.loc 1 1298 0
 3815 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3816 0148 574A     		ldr	r2, .L318+28
 3817 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3818 014e FA68     		ldr	r2, [r7, #12]
 3819 0150 D31A     		subs	r3, r2, r3
 3820 0152 FA69     		ldr	r2, [r7, #28]
 3821 0154 02FB03F3 		mul	r3, r2, r3
 3822 0158 1B14     		asrs	r3, r3, #16
 3823 015a BA6C     		ldr	r2, [r7, #72]
 3824 015c 1344     		add	r3, r3, r2
 3825 015e BB64     		str	r3, [r7, #72]
 3826              	.L257:
1299:..\src/interruptions.c ****                         
1300:..\src/interruptions.c ****             // Update previous position
1301:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 3827              		.loc 1 1301 0
 3828 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3829 0162 5149     		ldr	r1, .L318+28
 3830 0164 FA68     		ldr	r2, [r7, #12]
 3831 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1302:..\src/interruptions.c **** 
1303:..\src/interruptions.c ****             // motor direction depends on i_ref
1304:..\src/interruptions.c ****             if (i_ref >= 0)
 3832              		.loc 1 1304 0
 3833 016a BB6C     		ldr	r3, [r7, #72]
 3834 016c 002B     		cmp	r3, #0
 3835 016e 04DB     		blt	.L258
1305:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 3836              		.loc 1 1305 0
 3837 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 93


 3838 0172 4E4A     		ldr	r2, .L318+32
 3839 0174 0121     		movs	r1, #1
 3840 0176 D154     		strb	r1, [r2, r3]
 3841 0178 03E0     		b	.L259
 3842              	.L258:
1306:..\src/interruptions.c ****             else
1307:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 3843              		.loc 1 1307 0
 3844 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3845 017c 4B4A     		ldr	r2, .L318+32
 3846 017e 0021     		movs	r1, #0
 3847 0180 D154     		strb	r1, [r2, r3]
 3848              	.L259:
1308:..\src/interruptions.c **** 
1309:..\src/interruptions.c ****             // saturate max current
1310:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 3849              		.loc 1 1310 0
 3850 0182 7B6C     		ldr	r3, [r7, #68]
 3851 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3852 0188 1A46     		mov	r2, r3
 3853 018a BB6C     		ldr	r3, [r7, #72]
 3854 018c 9A42     		cmp	r2, r3
 3855 018e 04DA     		bge	.L260
1311:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 3856              		.loc 1 1311 0
 3857 0190 7B6C     		ldr	r3, [r7, #68]
 3858 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3859 0196 BB64     		str	r3, [r7, #72]
 3860 0198 0BE0     		b	.L261
 3861              	.L260:
1312:..\src/interruptions.c ****             else {
1313:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 3862              		.loc 1 1313 0
 3863 019a 7B6C     		ldr	r3, [r7, #68]
 3864 019c B3F95C30 		ldrsh	r3, [r3, #92]
 3865 01a0 5A42     		negs	r2, r3
 3866 01a2 BB6C     		ldr	r3, [r7, #72]
 3867 01a4 9A42     		cmp	r2, r3
 3868 01a6 04DD     		ble	.L261
1314:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 3869              		.loc 1 1314 0
 3870 01a8 7B6C     		ldr	r3, [r7, #68]
 3871 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 3872 01ae 5B42     		negs	r3, r3
 3873 01b0 BB64     		str	r3, [r7, #72]
 3874              	.L261:
1315:..\src/interruptions.c ****         	}
1316:..\src/interruptions.c **** 
1317:..\src/interruptions.c ****             // current error and curr error sum
1318:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 3875              		.loc 1 1318 0
 3876 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 3877 01b6 384A     		ldr	r2, .L318+12
 3878 01b8 3421     		movs	r1, #52
 3879 01ba 01FB03F3 		mul	r3, r1, r3
 3880 01be 1344     		add	r3, r3, r2
 3881 01c0 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 94


 3882 01c2 1B68     		ldr	r3, [r3]
 3883 01c4 BA6C     		ldr	r2, [r7, #72]
 3884 01c6 D31A     		subs	r3, r2, r3
 3885 01c8 BB60     		str	r3, [r7, #8]
1319:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 3886              		.loc 1 1319 0
 3887 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3888 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3889 01ce 3849     		ldr	r1, .L318+36
 3890 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 3891 01d4 BA68     		ldr	r2, [r7, #8]
 3892 01d6 0A44     		add	r2, r2, r1
 3893 01d8 3549     		ldr	r1, .L318+36
 3894 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1320:..\src/interruptions.c ****             
1321:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 3895              		.loc 1 1321 0
 3896 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3897 01e0 334A     		ldr	r2, .L318+36
 3898 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3899 01e6 334A     		ldr	r2, .L318+40
 3900 01e8 9342     		cmp	r3, r2
 3901 01ea 05DD     		ble	.L262
1322:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 3902              		.loc 1 1322 0
 3903 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3904 01ee 304A     		ldr	r2, .L318+36
 3905 01f0 3049     		ldr	r1, .L318+40
 3906 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 3907 01f6 0BE0     		b	.L263
 3908              	.L262:
1323:..\src/interruptions.c ****             else {
1324:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 3909              		.loc 1 1324 0
 3910 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3911 01fa 2D4A     		ldr	r2, .L318+36
 3912 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3913 0200 2D4A     		ldr	r2, .L318+44
 3914 0202 9342     		cmp	r3, r2
 3915 0204 04DA     		bge	.L263
1325:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 3916              		.loc 1 1325 0
 3917 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3918 0208 294A     		ldr	r2, .L318+36
 3919 020a 2B49     		ldr	r1, .L318+44
 3920 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 3921              	.L263:
1326:..\src/interruptions.c ****             }
1327:..\src/interruptions.c **** 
1328:..\src/interruptions.c ****             // ----- current PID control -----
1329:..\src/interruptions.c **** 
1330:..\src/interruptions.c ****             pwm_input = 0;
 3922              		.loc 1 1330 0
 3923 0210 0023     		movs	r3, #0
 3924 0212 FB64     		str	r3, [r7, #76]
1331:..\src/interruptions.c **** 
1332:..\src/interruptions.c ****             // Proportional
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 95


1333:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3925              		.loc 1 1333 0
 3926 0214 BB69     		ldr	r3, [r7, #24]
 3927 0216 002B     		cmp	r3, #0
 3928 0218 07D0     		beq	.L264
1334:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3929              		.loc 1 1334 0
 3930 021a BB69     		ldr	r3, [r7, #24]
 3931 021c BA68     		ldr	r2, [r7, #8]
 3932 021e 02FB03F3 		mul	r3, r2, r3
 3933 0222 1B14     		asrs	r3, r3, #16
 3934 0224 FA6C     		ldr	r2, [r7, #76]
 3935 0226 1344     		add	r3, r3, r2
 3936 0228 FB64     		str	r3, [r7, #76]
 3937              	.L264:
1335:..\src/interruptions.c **** 
1336:..\src/interruptions.c ****             // Integral
1337:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3938              		.loc 1 1337 0
 3939 022a 7B69     		ldr	r3, [r7, #20]
 3940 022c 002B     		cmp	r3, #0
 3941 022e 0AD0     		beq	.L265
1338:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 3942              		.loc 1 1338 0
 3943 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3944 0232 1F4A     		ldr	r2, .L318+36
 3945 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3946 0238 7A69     		ldr	r2, [r7, #20]
 3947 023a 02FB03F3 		mul	r3, r2, r3
 3948 023e 1B14     		asrs	r3, r3, #16
 3949 0240 FA6C     		ldr	r2, [r7, #76]
 3950 0242 1344     		add	r3, r3, r2
 3951 0244 FB64     		str	r3, [r7, #76]
 3952              	.L265:
1339:..\src/interruptions.c **** 
1340:..\src/interruptions.c ****             // Derivative
1341:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3953              		.loc 1 1341 0
 3954 0246 3B69     		ldr	r3, [r7, #16]
 3955 0248 002B     		cmp	r3, #0
 3956 024a 0CD0     		beq	.L266
1342:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 3957              		.loc 1 1342 0
 3958 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3959 024e 1B4A     		ldr	r2, .L318+48
 3960 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3961 0254 BA68     		ldr	r2, [r7, #8]
 3962 0256 D31A     		subs	r3, r2, r3
 3963 0258 3A69     		ldr	r2, [r7, #16]
 3964 025a 02FB03F3 		mul	r3, r2, r3
 3965 025e 1B14     		asrs	r3, r3, #16
 3966 0260 FA6C     		ldr	r2, [r7, #76]
 3967 0262 1344     		add	r3, r3, r2
 3968 0264 FB64     		str	r3, [r7, #76]
 3969              	.L266:
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****             // pwm_input saturation
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 96


1345:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 3970              		.loc 1 1345 0
 3971 0266 FB6C     		ldr	r3, [r7, #76]
 3972 0268 13F1640F 		cmn	r3, #100
 3973 026c 03DA     		bge	.L267
1346:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 3974              		.loc 1 1346 0
 3975 026e 6FF06303 		mvn	r3, #99
 3976 0272 FB64     		str	r3, [r7, #76]
 3977 0274 04E0     		b	.L268
 3978              	.L267:
1347:..\src/interruptions.c ****             else {
1348:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE)
 3979              		.loc 1 1348 0
 3980 0276 FB6C     		ldr	r3, [r7, #76]
 3981 0278 642B     		cmp	r3, #100
 3982 027a 01DD     		ble	.L268
1349:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE;
 3983              		.loc 1 1349 0
 3984 027c 6423     		movs	r3, #100
 3985 027e FB64     		str	r3, [r7, #76]
 3986              	.L268:
1350:..\src/interruptions.c ****             }
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****             // Update previous current
1353:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 3987              		.loc 1 1353 0
 3988 0280 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3989 0282 0E49     		ldr	r1, .L318+48
 3990 0284 BA68     		ldr	r2, [r7, #8]
 3991 0286 41F82320 		str	r2, [r1, r3, lsl #2]
1354:..\src/interruptions.c **** 
1355:..\src/interruptions.c ****         break;
 3992              		.loc 1 1355 0
 3993 028a 58E1     		b	.L247
 3994              	.L319:
 3995              		.align	2
 3996              	.L318:
 3997 028c 00000000 		.word	c_mem
 3998 0290 00000000 		.word	g_ref
 3999 0294 00000000 		.word	g_refOld
 4000 0298 00000000 		.word	g_meas
 4001 029c AC000000 		.word	pos_error_sum.10540
 4002 02a0 80F0FA02 		.word	50000000
 4003 02a4 800F05FD 		.word	-50000000
 4004 02a8 B4000000 		.word	prev_pos_err.10542
 4005 02ac BC000000 		.word	motor_dir.10545
 4006 02b0 C0000000 		.word	curr_error_sum.10541
 4007 02b4 A0860100 		.word	100000
 4008 02b8 6079FEFF 		.word	-100000
 4009 02bc C8000000 		.word	prev_curr_err.10543
 4010              	.L248:
1356:..\src/interruptions.c **** 
1357:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1358:..\src/interruptions.c ****         case CONTROL_ANGLE:
1359:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4011              		.loc 1 1359 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 97


 4012 02c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4013 02c2 934A     		ldr	r2, .L320
 4014 02c4 1B01     		lsls	r3, r3, #4
 4015 02c6 1344     		add	r3, r3, r2
 4016 02c8 1A68     		ldr	r2, [r3]
 4017 02ca 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4018 02ce 9149     		ldr	r1, .L320+4
 4019 02d0 3420     		movs	r0, #52
 4020 02d2 00FB03F3 		mul	r3, r0, r3
 4021 02d6 0B44     		add	r3, r3, r1
 4022 02d8 1B68     		ldr	r3, [r3]
 4023 02da D31A     		subs	r3, r2, r3
 4024 02dc FB60     		str	r3, [r7, #12]
1360:..\src/interruptions.c **** 
1361:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4025              		.loc 1 1361 0
 4026 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4027 02e0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4028 02e2 8D49     		ldr	r1, .L320+8
 4029 02e4 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4030 02e8 FA68     		ldr	r2, [r7, #12]
 4031 02ea 0A44     		add	r2, r2, r1
 4032 02ec 8A49     		ldr	r1, .L320+8
 4033 02ee 41F82320 		str	r2, [r1, r3, lsl #2]
1362:..\src/interruptions.c **** 
1363:..\src/interruptions.c ****             // anti-windup (for integral control)
1364:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4034              		.loc 1 1364 0
 4035 02f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4036 02f4 884A     		ldr	r2, .L320+8
 4037 02f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4038 02fa B3F57A7F 		cmp	r3, #1000
 4039 02fe 06DD     		ble	.L269
1365:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4040              		.loc 1 1365 0
 4041 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4042 0302 854A     		ldr	r2, .L320+8
 4043 0304 4FF47A71 		mov	r1, #1000
 4044 0308 42F82310 		str	r1, [r2, r3, lsl #2]
 4045 030c 0BE0     		b	.L270
 4046              	.L269:
1366:..\src/interruptions.c ****             else {
1367:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4047              		.loc 1 1367 0
 4048 030e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4049 0310 814A     		ldr	r2, .L320+8
 4050 0312 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4051 0316 13F57A7F 		cmn	r3, #1000
 4052 031a 04DA     		bge	.L270
1368:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4053              		.loc 1 1368 0
 4054 031c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4055 031e 7E4A     		ldr	r2, .L320+8
 4056 0320 7E49     		ldr	r1, .L320+12
 4057 0322 42F82310 		str	r1, [r2, r3, lsl #2]
 4058              	.L270:
1369:..\src/interruptions.c ****             }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 98


1370:..\src/interruptions.c **** 
1371:..\src/interruptions.c ****             // Proportional
1372:..\src/interruptions.c ****             if (k_p != 0) 
 4059              		.loc 1 1372 0
 4060 0326 FB6B     		ldr	r3, [r7, #60]
 4061 0328 002B     		cmp	r3, #0
 4062 032a 05D0     		beq	.L271
1373:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4063              		.loc 1 1373 0
 4064 032c FB6B     		ldr	r3, [r7, #60]
 4065 032e FA68     		ldr	r2, [r7, #12]
 4066 0330 02FB03F3 		mul	r3, r2, r3
 4067 0334 1B14     		asrs	r3, r3, #16
 4068 0336 FB64     		str	r3, [r7, #76]
 4069              	.L271:
1374:..\src/interruptions.c ****             
1375:..\src/interruptions.c **** 
1376:..\src/interruptions.c ****             // Integral
1377:..\src/interruptions.c ****             if (k_i != 0) 
 4070              		.loc 1 1377 0
 4071 0338 BB6B     		ldr	r3, [r7, #56]
 4072 033a 002B     		cmp	r3, #0
 4073 033c 0AD0     		beq	.L272
1378:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4074              		.loc 1 1378 0
 4075 033e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4076 0340 754A     		ldr	r2, .L320+8
 4077 0342 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4078 0346 BA6B     		ldr	r2, [r7, #56]
 4079 0348 02FB03F3 		mul	r3, r2, r3
 4080 034c 1B14     		asrs	r3, r3, #16
 4081 034e FA6C     		ldr	r2, [r7, #76]
 4082 0350 1344     		add	r3, r3, r2
 4083 0352 FB64     		str	r3, [r7, #76]
 4084              	.L272:
1379:..\src/interruptions.c ****             
1380:..\src/interruptions.c **** 
1381:..\src/interruptions.c ****             // Derivative
1382:..\src/interruptions.c ****             if (k_d != 0) 
 4085              		.loc 1 1382 0
 4086 0354 7B6B     		ldr	r3, [r7, #52]
 4087 0356 002B     		cmp	r3, #0
 4088 0358 0CD0     		beq	.L273
1383:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4089              		.loc 1 1383 0
 4090 035a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4091 035c 704A     		ldr	r2, .L320+16
 4092 035e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4093 0362 FA68     		ldr	r2, [r7, #12]
 4094 0364 D31A     		subs	r3, r2, r3
 4095 0366 7A6B     		ldr	r2, [r7, #52]
 4096 0368 02FB03F3 		mul	r3, r2, r3
 4097 036c 1B14     		asrs	r3, r3, #16
 4098 036e FA6C     		ldr	r2, [r7, #76]
 4099 0370 1344     		add	r3, r3, r2
 4100 0372 FB64     		str	r3, [r7, #76]
 4101              	.L273:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 99


1384:..\src/interruptions.c ****             
1385:..\src/interruptions.c **** 
1386:..\src/interruptions.c ****             // Update measure
1387:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4102              		.loc 1 1387 0
 4103 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4104 0376 6A49     		ldr	r1, .L320+16
 4105 0378 FA68     		ldr	r2, [r7, #12]
 4106 037a 41F82320 		str	r2, [r1, r3, lsl #2]
1388:..\src/interruptions.c **** 
1389:..\src/interruptions.c ****             if (pwm_input > 0)
 4107              		.loc 1 1389 0
 4108 037e FB6C     		ldr	r3, [r7, #76]
 4109 0380 002B     		cmp	r3, #0
 4110 0382 04DD     		ble	.L274
1390:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4111              		.loc 1 1390 0
 4112 0384 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4113 0386 674A     		ldr	r2, .L320+20
 4114 0388 0121     		movs	r1, #1
 4115 038a D154     		strb	r1, [r2, r3]
1391:..\src/interruptions.c ****             else
1392:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1393:..\src/interruptions.c **** 
1394:..\src/interruptions.c ****         break;
 4116              		.loc 1 1394 0
 4117 038c D7E0     		b	.L247
 4118              	.L274:
1392:..\src/interruptions.c **** 
 4119              		.loc 1 1392 0
 4120 038e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4121 0390 644A     		ldr	r2, .L320+20
 4122 0392 0021     		movs	r1, #0
 4123 0394 D154     		strb	r1, [r2, r3]
 4124              		.loc 1 1394 0
 4125 0396 D2E0     		b	.L247
 4126              	.L251:
1395:..\src/interruptions.c **** 
1396:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1397:..\src/interruptions.c ****         case CONTROL_CURRENT:
1398:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4127              		.loc 1 1398 0
 4128 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4129 039a 5D4A     		ldr	r2, .L320
 4130 039c 1B01     		lsls	r3, r3, #4
 4131 039e 1344     		add	r3, r3, r2
 4132 03a0 0C33     		adds	r3, r3, #12
 4133 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4134 03a4 002B     		cmp	r3, #0
 4135 03a6 00F0B180 		beq	.L315
 4136              		.loc 1 1398 0 is_stmt 0 discriminator 1
 4137 03aa 5F4B     		ldr	r3, .L320+24
 4138 03ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4139 03ae 002B     		cmp	r3, #0
 4140 03b0 00F0AC80 		beq	.L315
1399:..\src/interruptions.c ****                 
1400:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 100


 4141              		.loc 1 1400 0 is_stmt 1
 4142 03b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4143 03b6 564A     		ldr	r2, .L320
 4144 03b8 1B01     		lsls	r3, r3, #4
 4145 03ba 1344     		add	r3, r3, r2
 4146 03bc 0433     		adds	r3, r3, #4
 4147 03be 1B68     		ldr	r3, [r3]
 4148 03c0 BB64     		str	r3, [r7, #72]
1401:..\src/interruptions.c **** 
1402:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4149              		.loc 1 1402 0
 4150 03c2 7B6C     		ldr	r3, [r7, #68]
 4151 03c4 B3F95C30 		ldrsh	r3, [r3, #92]
 4152 03c8 1A46     		mov	r2, r3
 4153 03ca BB6C     		ldr	r3, [r7, #72]
 4154 03cc 9A42     		cmp	r2, r3
 4155 03ce 04DA     		bge	.L277
1403:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4156              		.loc 1 1403 0
 4157 03d0 7B6C     		ldr	r3, [r7, #68]
 4158 03d2 B3F95C30 		ldrsh	r3, [r3, #92]
 4159 03d6 BB64     		str	r3, [r7, #72]
 4160 03d8 0BE0     		b	.L278
 4161              	.L277:
1404:..\src/interruptions.c ****                 else {
1405:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4162              		.loc 1 1405 0
 4163 03da 7B6C     		ldr	r3, [r7, #68]
 4164 03dc B3F95C30 		ldrsh	r3, [r3, #92]
 4165 03e0 5A42     		negs	r2, r3
 4166 03e2 BB6C     		ldr	r3, [r7, #72]
 4167 03e4 9A42     		cmp	r2, r3
 4168 03e6 04DD     		ble	.L278
1406:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4169              		.loc 1 1406 0
 4170 03e8 7B6C     		ldr	r3, [r7, #68]
 4171 03ea B3F95C30 		ldrsh	r3, [r3, #92]
 4172 03ee 5B42     		negs	r3, r3
 4173 03f0 BB64     		str	r3, [r7, #72]
 4174              	.L278:
1407:..\src/interruptions.c ****                 }
1408:..\src/interruptions.c ****                 
1409:..\src/interruptions.c ****                 // current error
1410:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4175              		.loc 1 1410 0
 4176 03f2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4177 03f6 474A     		ldr	r2, .L320+4
 4178 03f8 3421     		movs	r1, #52
 4179 03fa 01FB03F3 		mul	r3, r1, r3
 4180 03fe 1344     		add	r3, r3, r2
 4181 0400 0C33     		adds	r3, r3, #12
 4182 0402 1B68     		ldr	r3, [r3]
 4183 0404 BA6C     		ldr	r2, [r7, #72]
 4184 0406 D31A     		subs	r3, r2, r3
 4185 0408 BB60     		str	r3, [r7, #8]
1411:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4186              		.loc 1 1411 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 101


 4187 040a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4188 040c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4189 040e 4749     		ldr	r1, .L320+28
 4190 0410 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4191 0414 BA68     		ldr	r2, [r7, #8]
 4192 0416 0A44     		add	r2, r2, r1
 4193 0418 4449     		ldr	r1, .L320+28
 4194 041a 41F82320 		str	r2, [r1, r3, lsl #2]
1412:..\src/interruptions.c ****                 
1413:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4195              		.loc 1 1413 0
 4196 041e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4197 0420 424A     		ldr	r2, .L320+28
 4198 0422 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4199 0426 424A     		ldr	r2, .L320+32
 4200 0428 9342     		cmp	r3, r2
 4201 042a 05DD     		ble	.L279
1414:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4202              		.loc 1 1414 0
 4203 042c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4204 042e 3F4A     		ldr	r2, .L320+28
 4205 0430 3F49     		ldr	r1, .L320+32
 4206 0432 42F82310 		str	r1, [r2, r3, lsl #2]
 4207 0436 0BE0     		b	.L280
 4208              	.L279:
1415:..\src/interruptions.c ****                 else {
1416:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4209              		.loc 1 1416 0
 4210 0438 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4211 043a 3C4A     		ldr	r2, .L320+28
 4212 043c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4213 0440 3C4A     		ldr	r2, .L320+36
 4214 0442 9342     		cmp	r3, r2
 4215 0444 04DA     		bge	.L280
1417:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4216              		.loc 1 1417 0
 4217 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4218 0448 384A     		ldr	r2, .L320+28
 4219 044a 3A49     		ldr	r1, .L320+36
 4220 044c 42F82310 		str	r1, [r2, r3, lsl #2]
 4221              	.L280:
1418:..\src/interruptions.c ****                 }
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****                 pwm_input = 0;
 4222              		.loc 1 1420 0
 4223 0450 0023     		movs	r3, #0
 4224 0452 FB64     		str	r3, [r7, #76]
1421:..\src/interruptions.c **** 
1422:..\src/interruptions.c ****                 // Proportional
1423:..\src/interruptions.c ****                 if (k_p_c != 0)
 4225              		.loc 1 1423 0
 4226 0454 3B6B     		ldr	r3, [r7, #48]
 4227 0456 002B     		cmp	r3, #0
 4228 0458 07D0     		beq	.L281
1424:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4229              		.loc 1 1424 0
 4230 045a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 102


 4231 045c BA68     		ldr	r2, [r7, #8]
 4232 045e 02FB03F3 		mul	r3, r2, r3
 4233 0462 1B14     		asrs	r3, r3, #16
 4234 0464 FA6C     		ldr	r2, [r7, #76]
 4235 0466 1344     		add	r3, r3, r2
 4236 0468 FB64     		str	r3, [r7, #76]
 4237              	.L281:
1425:..\src/interruptions.c **** 
1426:..\src/interruptions.c ****                 // Integral
1427:..\src/interruptions.c ****                 if (k_i_c != 0)
 4238              		.loc 1 1427 0
 4239 046a FB6A     		ldr	r3, [r7, #44]
 4240 046c 002B     		cmp	r3, #0
 4241 046e 0AD0     		beq	.L282
1428:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4242              		.loc 1 1428 0
 4243 0470 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4244 0472 2E4A     		ldr	r2, .L320+28
 4245 0474 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4246 0478 FA6A     		ldr	r2, [r7, #44]
 4247 047a 02FB03F3 		mul	r3, r2, r3
 4248 047e 1B14     		asrs	r3, r3, #16
 4249 0480 FA6C     		ldr	r2, [r7, #76]
 4250 0482 1344     		add	r3, r3, r2
 4251 0484 FB64     		str	r3, [r7, #76]
 4252              	.L282:
1429:..\src/interruptions.c **** 
1430:..\src/interruptions.c ****                 // Derivative
1431:..\src/interruptions.c ****                 if (k_d_c != 0)
 4253              		.loc 1 1431 0
 4254 0486 BB6A     		ldr	r3, [r7, #40]
 4255 0488 002B     		cmp	r3, #0
 4256 048a 0CD0     		beq	.L283
1432:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4257              		.loc 1 1432 0
 4258 048c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4259 048e 2A4A     		ldr	r2, .L320+40
 4260 0490 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4261 0494 BA68     		ldr	r2, [r7, #8]
 4262 0496 D31A     		subs	r3, r2, r3
 4263 0498 BA6A     		ldr	r2, [r7, #40]
 4264 049a 02FB03F3 		mul	r3, r2, r3
 4265 049e 1B14     		asrs	r3, r3, #16
 4266 04a0 FA6C     		ldr	r2, [r7, #76]
 4267 04a2 1344     		add	r3, r3, r2
 4268 04a4 FB64     		str	r3, [r7, #76]
 4269              	.L283:
1433:..\src/interruptions.c ****                 
1434:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4270              		.loc 1 1434 0
 4271 04a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4272 04a8 2349     		ldr	r1, .L320+40
 4273 04aa BA68     		ldr	r2, [r7, #8]
 4274 04ac 41F82320 		str	r2, [r1, r3, lsl #2]
1435:..\src/interruptions.c ****                 
1436:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4275              		.loc 1 1436 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 103


 4276 04b0 FB6C     		ldr	r3, [r7, #76]
 4277 04b2 002B     		cmp	r3, #0
 4278 04b4 04DB     		blt	.L284
1437:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4279              		.loc 1 1437 0
 4280 04b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4281 04b8 1A4A     		ldr	r2, .L320+20
 4282 04ba 0121     		movs	r1, #1
 4283 04bc D154     		strb	r1, [r2, r3]
1438:..\src/interruptions.c ****                 else
1439:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1440:..\src/interruptions.c ****             }
1441:..\src/interruptions.c ****         break;
 4284              		.loc 1 1441 0
 4285 04be 25E0     		b	.L315
 4286              	.L284:
1439:..\src/interruptions.c ****             }
 4287              		.loc 1 1439 0
 4288 04c0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4289 04c2 184A     		ldr	r2, .L320+20
 4290 04c4 0021     		movs	r1, #0
 4291 04c6 D154     		strb	r1, [r2, r3]
 4292              		.loc 1 1441 0
 4293 04c8 20E0     		b	.L315
 4294              	.L250:
1442:..\src/interruptions.c ****         
1443:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1444:..\src/interruptions.c ****         case CONTROL_PWM:
1445:..\src/interruptions.c **** 
1446:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4295              		.loc 1 1446 0
 4296 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4297 04cc 104A     		ldr	r2, .L320
 4298 04ce 1B01     		lsls	r3, r3, #4
 4299 04d0 1344     		add	r3, r3, r2
 4300 04d2 0833     		adds	r3, r3, #8
 4301 04d4 1B68     		ldr	r3, [r3]
 4302 04d6 FB64     		str	r3, [r7, #76]
1447:..\src/interruptions.c **** 
1448:..\src/interruptions.c ****             if (pwm_input > 0) 
 4303              		.loc 1 1448 0
 4304 04d8 FB6C     		ldr	r3, [r7, #76]
 4305 04da 002B     		cmp	r3, #0
 4306 04dc 04DD     		ble	.L285
1449:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4307              		.loc 1 1449 0
 4308 04de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4309 04e0 104A     		ldr	r2, .L320+20
 4310 04e2 0121     		movs	r1, #1
 4311 04e4 D154     		strb	r1, [r2, r3]
 4312 04e6 03E0     		b	.L286
 4313              	.L285:
1450:..\src/interruptions.c ****             else 
1451:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4314              		.loc 1 1451 0
 4315 04e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4316 04ea 0E4A     		ldr	r2, .L320+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 104


 4317 04ec 0021     		movs	r1, #0
 4318 04ee D154     		strb	r1, [r2, r3]
 4319              	.L286:
1452:..\src/interruptions.c ****             
1453:..\src/interruptions.c **** 
1454:..\src/interruptions.c ****             // pwm_input saturation
1455:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE) 
 4320              		.loc 1 1455 0
 4321 04f0 FB6C     		ldr	r3, [r7, #76]
 4322 04f2 13F1640F 		cmn	r3, #100
 4323 04f6 03DA     		bge	.L287
1456:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE;
 4324              		.loc 1 1456 0
 4325 04f8 6FF06303 		mvn	r3, #99
 4326 04fc FB64     		str	r3, [r7, #76]
1457:..\src/interruptions.c ****             else {
1458:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE) 
1459:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
1460:..\src/interruptions.c ****         	}
1461:..\src/interruptions.c **** 
1462:..\src/interruptions.c ****         break;
 4327              		.loc 1 1462 0
 4328 04fe 1DE0     		b	.L316
 4329              	.L287:
1458:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE;
 4330              		.loc 1 1458 0
 4331 0500 FB6C     		ldr	r3, [r7, #76]
 4332 0502 642B     		cmp	r3, #100
 4333 0504 1ADD     		ble	.L316
1459:..\src/interruptions.c ****         	}
 4334              		.loc 1 1459 0
 4335 0506 6423     		movs	r3, #100
 4336 0508 FB64     		str	r3, [r7, #76]
 4337              		.loc 1 1462 0
 4338 050a 17E0     		b	.L316
 4339              	.L315:
1441:..\src/interruptions.c ****         
 4340              		.loc 1 1441 0
 4341 050c 00BF     		nop
 4342 050e 16E0     		b	.L247
 4343              	.L321:
 4344              		.align	2
 4345              	.L320:
 4346 0510 00000000 		.word	g_ref
 4347 0514 00000000 		.word	g_meas
 4348 0518 AC000000 		.word	pos_error_sum.10540
 4349 051c 18FCFFFF 		.word	-1000
 4350 0520 B4000000 		.word	prev_pos_err.10542
 4351 0524 BC000000 		.word	motor_dir.10545
 4352 0528 00000000 		.word	tension_valid
 4353 052c C0000000 		.word	curr_error_sum.10541
 4354 0530 A0860100 		.word	100000
 4355 0534 6079FEFF 		.word	-100000
 4356 0538 C8000000 		.word	prev_curr_err.10543
 4357              	.L316:
 4358              		.loc 1 1462 0
 4359 053c 00BF     		nop
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 105


 4360              	.L247:
1463:..\src/interruptions.c ****             
1464:..\src/interruptions.c ****     }
1465:..\src/interruptions.c **** 
1466:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1467:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1468:..\src/interruptions.c **** 
1469:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4361              		.loc 1 1469 0
 4362 053e FB6C     		ldr	r3, [r7, #76]
 4363 0540 642B     		cmp	r3, #100
 4364 0542 01DD     		ble	.L289
1470:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4365              		.loc 1 1470 0
 4366 0544 6423     		movs	r3, #100
 4367 0546 FB64     		str	r3, [r7, #76]
 4368              	.L289:
1471:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4369              		.loc 1 1471 0
 4370 0548 FB6C     		ldr	r3, [r7, #76]
 4371 054a 13F1640F 		cmn	r3, #100
 4372 054e 02DA     		bge	.L290
1472:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4373              		.loc 1 1472 0
 4374 0550 6FF06303 		mvn	r3, #99
 4375 0554 FB64     		str	r3, [r7, #76]
 4376              	.L290:
1473:..\src/interruptions.c **** 
1474:..\src/interruptions.c ****     if (MOT->control_mode != CONTROL_PWM) 
 4377              		.loc 1 1474 0
 4378 0556 7B6C     		ldr	r3, [r7, #68]
 4379 0558 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4380 055c 012B     		cmp	r3, #1
 4381 055e 0DD0     		beq	.L291
1475:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit[0]) >> 10;
 4382              		.loc 1 1475 0
 4383 0560 FB6C     		ldr	r3, [r7, #76]
 4384 0562 9B02     		lsls	r3, r3, #10
 4385 0564 AA4A     		ldr	r2, .L322
 4386 0566 82FB0312 		smull	r1, r2, r2, r3
 4387 056a 5211     		asrs	r2, r2, #5
 4388 056c DB17     		asrs	r3, r3, #31
 4389 056e D31A     		subs	r3, r2, r3
 4390 0570 A84A     		ldr	r2, .L322+4
 4391 0572 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4392 0574 02FB03F3 		mul	r3, r2, r3
 4393 0578 9B12     		asrs	r3, r3, #10
 4394 057a FB64     		str	r3, [r7, #76]
 4395              	.L291:
1476:..\src/interruptions.c ****  
1477:..\src/interruptions.c ****     //// RATE LIMITER ////
1478:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4396              		.loc 1 1478 0
 4397 057c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4398 057e A64A     		ldr	r2, .L322+8
 4399 0580 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4400 0584 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 106


 4401 0586 D31A     		subs	r3, r2, r3
 4402 0588 7A6C     		ldr	r2, [r7, #68]
 4403 058a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4404 058e 9342     		cmp	r3, r2
 4405 0590 09DD     		ble	.L292
1479:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4406              		.loc 1 1479 0
 4407 0592 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4408 0594 A04A     		ldr	r2, .L322+8
 4409 0596 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4410 059a 7A6C     		ldr	r2, [r7, #68]
 4411 059c 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4412 05a0 1344     		add	r3, r3, r2
 4413 05a2 FB64     		str	r3, [r7, #76]
 4414 05a4 14E0     		b	.L293
 4415              	.L292:
1480:..\src/interruptions.c ****     }
1481:..\src/interruptions.c ****     else {
1482:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4416              		.loc 1 1482 0
 4417 05a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4418 05a8 9B4A     		ldr	r2, .L322+8
 4419 05aa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4420 05ae FA6C     		ldr	r2, [r7, #76]
 4421 05b0 D21A     		subs	r2, r2, r3
 4422 05b2 7B6C     		ldr	r3, [r7, #68]
 4423 05b4 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4424 05b8 5B42     		negs	r3, r3
 4425 05ba 9A42     		cmp	r2, r3
 4426 05bc 08DA     		bge	.L293
1483:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4427              		.loc 1 1483 0
 4428 05be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4429 05c0 954A     		ldr	r2, .L322+8
 4430 05c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4431 05c6 7A6C     		ldr	r2, [r7, #68]
 4432 05c8 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4433 05cc 9B1A     		subs	r3, r3, r2
 4434 05ce FB64     		str	r3, [r7, #76]
 4435              	.L293:
1484:..\src/interruptions.c ****     }
1485:..\src/interruptions.c ****     
1486:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE) 
 4436              		.loc 1 1486 0
 4437 05d0 FB6C     		ldr	r3, [r7, #76]
 4438 05d2 642B     		cmp	r3, #100
 4439 05d4 01DD     		ble	.L294
1487:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE;
 4440              		.loc 1 1487 0
 4441 05d6 6423     		movs	r3, #100
 4442 05d8 FB64     		str	r3, [r7, #76]
 4443              	.L294:
1488:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE) 
 4444              		.loc 1 1488 0
 4445 05da FB6C     		ldr	r3, [r7, #76]
 4446 05dc 13F1640F 		cmn	r3, #100
 4447 05e0 02DA     		bge	.L295
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 107


1489:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE;
 4448              		.loc 1 1489 0
 4449 05e2 6FF06303 		mvn	r3, #99
 4450 05e6 FB64     		str	r3, [r7, #76]
 4451              	.L295:
1490:..\src/interruptions.c ****     
1491:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 4452              		.loc 1 1491 0
 4453 05e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4454 05ea 8B49     		ldr	r1, .L322+8
 4455 05ec FA6C     		ldr	r2, [r7, #76]
 4456 05ee 41F82320 		str	r2, [r1, r3, lsl #2]
1492:..\src/interruptions.c **** 	
1493:..\src/interruptions.c ****     pwm_sign = SIGN(pwm_input);   
 4457              		.loc 1 1493 0
 4458 05f2 FB6C     		ldr	r3, [r7, #76]
 4459 05f4 002B     		cmp	r3, #0
 4460 05f6 01DB     		blt	.L296
 4461              		.loc 1 1493 0 is_stmt 0 discriminator 1
 4462 05f8 0122     		movs	r2, #1
 4463 05fa 01E0     		b	.L297
 4464              	.L296:
 4465              		.loc 1 1493 0 discriminator 2
 4466 05fc 4FF0FF32 		mov	r2, #-1
 4467              	.L297:
 4468              		.loc 1 1493 0 discriminator 4
 4469 0600 864B     		ldr	r3, .L322+12
 4470 0602 1A70     		strb	r2, [r3]
1494:..\src/interruptions.c ****     
1495:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 4471              		.loc 1 1495 0 is_stmt 1 discriminator 4
 4472 0604 7B6C     		ldr	r3, [r7, #68]
 4473 0606 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 4474 060a 012B     		cmp	r3, #1
 4475 060c 40F0AA80 		bne	.L298
1496:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1497:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) <
 4476              		.loc 1 1497 0
 4477 0610 7B6C     		ldr	r3, [r7, #68]
 4478 0612 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4479 0616 012B     		cmp	r3, #1
 4480 0618 00F09F80 		beq	.L299
 4481              		.loc 1 1497 0 is_stmt 0 discriminator 1
 4482 061c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4483 0620 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4484 0622 7F48     		ldr	r0, .L322+16
 4485 0624 1346     		mov	r3, r2
 4486 0626 5B00     		lsls	r3, r3, #1
 4487 0628 1344     		add	r3, r3, r2
 4488 062a 9B00     		lsls	r3, r3, #2
 4489 062c 1344     		add	r3, r3, r2
 4490 062e 0B44     		add	r3, r3, r1
 4491 0630 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4492 0634 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4493 0638 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4494 063a 7A4C     		ldr	r4, .L322+20
 4495 063c 1346     		mov	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 108


 4496 063e 5B00     		lsls	r3, r3, #1
 4497 0640 1344     		add	r3, r3, r2
 4498 0642 9B00     		lsls	r3, r3, #2
 4499 0644 1344     		add	r3, r3, r2
 4500 0646 0344     		add	r3, r3, r0
 4501 0648 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4502 064c CB1A     		subs	r3, r1, r3
 4503 064e 312B     		cmp	r3, #49
 4504 0650 00F38380 		bgt	.L299
1498:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4505              		.loc 1 1498 0 is_stmt 1 discriminator 2
 4506 0654 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4507 0658 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4508 065a 7148     		ldr	r0, .L322+16
 4509 065c 1346     		mov	r3, r2
 4510 065e 5B00     		lsls	r3, r3, #1
 4511 0660 1344     		add	r3, r3, r2
 4512 0662 9B00     		lsls	r3, r3, #2
 4513 0664 1344     		add	r3, r3, r2
 4514 0666 0B44     		add	r3, r3, r1
 4515 0668 50F82310 		ldr	r1, [r0, r3, lsl #2]
 4516 066c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4517 0670 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4518 0672 6C4C     		ldr	r4, .L322+20
 4519 0674 1346     		mov	r3, r2
 4520 0676 5B00     		lsls	r3, r3, #1
 4521 0678 1344     		add	r3, r3, r2
 4522 067a 9B00     		lsls	r3, r3, #2
 4523 067c 1344     		add	r3, r3, r2
 4524 067e 0344     		add	r3, r3, r0
 4525 0680 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4526 0684 CB1A     		subs	r3, r1, r3
1497:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4527              		.loc 1 1497 0 discriminator 2
 4528 0686 13F1310F 		cmn	r3, #49
 4529 068a 66DB     		blt	.L299
1499:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 4530              		.loc 1 1499 0
 4531 068c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4532 068e 664A     		ldr	r2, .L322+24
 4533 0690 1B01     		lsls	r3, r3, #4
 4534 0692 1344     		add	r3, r3, r2
 4535 0694 1A68     		ldr	r2, [r3]
 4536 0696 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4537 0698 6449     		ldr	r1, .L322+28
 4538 069a 1B01     		lsls	r3, r3, #4
 4539 069c 0B44     		add	r3, r3, r1
 4540 069e 1B68     		ldr	r3, [r3]
 4541 06a0 D31A     		subs	r3, r2, r3
1498:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[idx]-g_meas[ENC_L].pos[idx]) > -50) && 
 4542              		.loc 1 1498 0
 4543 06a2 632B     		cmp	r3, #99
 4544 06a4 59DC     		bgt	.L299
 4545              		.loc 1 1499 0
 4546 06a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4547 06a8 5F4A     		ldr	r2, .L322+24
 4548 06aa 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 109


 4549 06ac 1344     		add	r3, r3, r2
 4550 06ae 1A68     		ldr	r2, [r3]
 4551 06b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4552 06b2 5E49     		ldr	r1, .L322+28
 4553 06b4 1B01     		lsls	r3, r3, #4
 4554 06b6 0B44     		add	r3, r3, r1
 4555 06b8 1B68     		ldr	r3, [r3]
 4556 06ba D31A     		subs	r3, r2, r3
 4557 06bc 13F1630F 		cmn	r3, #99
 4558 06c0 4BDB     		blt	.L299
1500:..\src/interruptions.c ****             position_counter[idx]++;
 4559              		.loc 1 1500 0
 4560 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4561 06c4 5A4A     		ldr	r2, .L322+32
 4562 06c6 52F82320 		ldr	r2, [r2, r3, lsl #2]
 4563 06ca 0132     		adds	r2, r2, #1
 4564 06cc 5849     		ldr	r1, .L322+32
 4565 06ce 41F82320 		str	r2, [r1, r3, lsl #2]
1501:..\src/interruptions.c ****             
1502:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 4566              		.loc 1 1502 0
 4567 06d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4568 06d4 564A     		ldr	r2, .L322+32
 4569 06d6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4570 06da F92B     		cmp	r3, #249
 4571 06dc 42D9     		bls	.L298
1503:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4572              		.loc 1 1503 0
 4573 06de 7B6C     		ldr	r3, [r7, #68]
 4574 06e0 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4575 06e4 002B     		cmp	r3, #0
 4576 06e6 10D1     		bne	.L301
 4577              		.loc 1 1503 0 is_stmt 0 discriminator 1
 4578 06e8 524B     		ldr	r3, .L322+36
 4579 06ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4580 06ec 002B     		cmp	r3, #0
 4581 06ee 0CD1     		bne	.L301
1504:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 4582              		.loc 1 1504 0 is_stmt 1
 4583 06f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4584 06f2 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4585 06f6 4B49     		ldr	r1, .L322+20
 4586 06f8 3420     		movs	r0, #52
 4587 06fa 00FB02F2 		mul	r2, r0, r2
 4588 06fe 0A44     		add	r2, r2, r1
 4589 0700 1268     		ldr	r2, [r2]
 4590 0702 4D49     		ldr	r1, .L322+40
 4591 0704 1B01     		lsls	r3, r3, #4
 4592 0706 0B44     		add	r3, r3, r1
 4593 0708 1A60     		str	r2, [r3]
 4594              	.L301:
1505:..\src/interruptions.c ****                 }
1506:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 4595              		.loc 1 1506 0
 4596 070a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4597 070c 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4598 0710 4449     		ldr	r1, .L322+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 110


 4599 0712 3420     		movs	r0, #52
 4600 0714 00FB02F2 		mul	r2, r0, r2
 4601 0718 0A44     		add	r2, r2, r1
 4602 071a 1268     		ldr	r2, [r2]
 4603 071c 4349     		ldr	r1, .L322+28
 4604 071e 1B01     		lsls	r3, r3, #4
 4605 0720 0B44     		add	r3, r3, r1
 4606 0722 1A60     		str	r2, [r3]
1507:..\src/interruptions.c ****                 
1508:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 4607              		.loc 1 1508 0
 4608 0724 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4609 0726 424A     		ldr	r2, .L322+32
 4610 0728 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4611 072c FA2B     		cmp	r3, #250
 4612 072e 11D1     		bne	.L302
1509:..\src/interruptions.c ****                     // To do only once
1510:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 4613              		.loc 1 1510 0
 4614 0730 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4615 0734 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 4616 0738 3A49     		ldr	r1, .L322+20
 4617 073a 3420     		movs	r0, #52
 4618 073c 00FB02F2 		mul	r2, r0, r2
 4619 0740 0A44     		add	r2, r2, r1
 4620 0742 0C32     		adds	r2, r2, #12
 4621 0744 1268     		ldr	r2, [r2]
 4622 0746 3749     		ldr	r1, .L322+20
 4623 0748 3420     		movs	r0, #52
 4624 074a 00FB03F3 		mul	r3, r0, r3
 4625 074e 0B44     		add	r3, r3, r1
 4626 0750 1433     		adds	r3, r3, #20
 4627 0752 1A60     		str	r2, [r3]
 4628              	.L302:
1511:..\src/interruptions.c ****                 }
1512:..\src/interruptions.c ****                 pwm_input = 0;            
 4629              		.loc 1 1512 0
 4630 0754 0023     		movs	r3, #0
 4631 0756 FB64     		str	r3, [r7, #76]
1502:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag == FALSE) {
 4632              		.loc 1 1502 0
 4633 0758 04E0     		b	.L298
 4634              	.L299:
1513:..\src/interruptions.c ****             }
1514:..\src/interruptions.c ****         }
1515:..\src/interruptions.c ****         else {
1516:..\src/interruptions.c ****             position_counter[idx] = 0;
 4635              		.loc 1 1516 0
 4636 075a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4637 075c 344A     		ldr	r2, .L322+32
 4638 075e 0021     		movs	r1, #0
 4639 0760 42F82310 		str	r1, [r2, r3, lsl #2]
 4640              	.L298:
1517:..\src/interruptions.c ****         }
1518:..\src/interruptions.c ****     }
1519:..\src/interruptions.c ****     
1520:..\src/interruptions.c ****     // Set motor direction and write pwm value
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 111


1521:..\src/interruptions.c ****     switch (idx) {
 4641              		.loc 1 1521 0
 4642 0764 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4643 0766 002B     		cmp	r3, #0
 4644 0768 02D0     		beq	.L304
 4645 076a 012B     		cmp	r3, #1
 4646 076c 26D0     		beq	.L305
1522:..\src/interruptions.c ****         case 0:         // Motor 1
1523:..\src/interruptions.c ****             if (motor_dir[idx])
1524:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1525:..\src/interruptions.c ****             else
1526:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1527:..\src/interruptions.c ****             
1528:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1529:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
1530:..\src/interruptions.c ****             }
1531:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1532:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1533:..\src/interruptions.c ****             }
1534:..\src/interruptions.c ****             
1535:..\src/interruptions.c ****             break;
1536:..\src/interruptions.c ****         case 1:         // Motor 2
1537:..\src/interruptions.c ****             
1538:..\src/interruptions.c ****             if (motor_dir[idx])
1539:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1540:..\src/interruptions.c ****             else
1541:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1542:..\src/interruptions.c ****             
1543:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1544:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
1545:..\src/interruptions.c ****             }
1546:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard
1547:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1548:..\src/interruptions.c ****             }
1549:..\src/interruptions.c ****             
1550:..\src/interruptions.c ****             break;
1551:..\src/interruptions.c ****         default:
1552:..\src/interruptions.c ****             break;
 4647              		.loc 1 1552 0
 4648 076e 4BE0     		b	.L310
 4649              	.L304:
1523:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 4650              		.loc 1 1523 0
 4651 0770 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4652 0772 324A     		ldr	r2, .L322+44
 4653 0774 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4654 0776 002B     		cmp	r3, #0
 4655 0778 03D0     		beq	.L306
1524:..\src/interruptions.c ****             else
 4656              		.loc 1 1524 0
 4657 077a 0120     		movs	r0, #1
 4658 077c FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4659 0780 02E0     		b	.L307
 4660              	.L306:
1526:..\src/interruptions.c ****             
 4661              		.loc 1 1526 0
 4662 0782 0020     		movs	r0, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 112


 4663 0784 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4664              	.L307:
1528:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE - abs(pwm_input));
 4665              		.loc 1 1528 0
 4666 0788 7B6C     		ldr	r3, [r7, #68]
 4667 078a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4668 078e 012B     		cmp	r3, #1
 4669 0790 0BD1     		bne	.L308
1529:..\src/interruptions.c ****             }
 4670              		.loc 1 1529 0
 4671 0792 FB6C     		ldr	r3, [r7, #76]
 4672 0794 002B     		cmp	r3, #0
 4673 0796 B8BF     		it	lt
 4674 0798 5B42     		rsblt	r3, r3, #0
 4675 079a DBB2     		uxtb	r3, r3
 4676 079c C3F16403 		rsb	r3, r3, #100
 4677 07a0 DBB2     		uxtb	r3, r3
 4678 07a2 1846     		mov	r0, r3
 4679 07a4 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1535:..\src/interruptions.c ****         case 1:         // Motor 2
 4680              		.loc 1 1535 0
 4681 07a8 2EE0     		b	.L310
 4682              	.L308:
1532:..\src/interruptions.c ****             }
 4683              		.loc 1 1532 0
 4684 07aa FB6C     		ldr	r3, [r7, #76]
 4685 07ac 002B     		cmp	r3, #0
 4686 07ae B8BF     		it	lt
 4687 07b0 5B42     		rsblt	r3, r3, #0
 4688 07b2 DBB2     		uxtb	r3, r3
 4689 07b4 1846     		mov	r0, r3
 4690 07b6 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1535:..\src/interruptions.c ****         case 1:         // Motor 2
 4691              		.loc 1 1535 0
 4692 07ba 25E0     		b	.L310
 4693              	.L305:
1538:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 4694              		.loc 1 1538 0
 4695 07bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4696 07be 1F4A     		ldr	r2, .L322+44
 4697 07c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4698 07c2 002B     		cmp	r3, #0
 4699 07c4 03D0     		beq	.L311
1539:..\src/interruptions.c ****             else
 4700              		.loc 1 1539 0
 4701 07c6 0120     		movs	r0, #1
 4702 07c8 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4703 07cc 02E0     		b	.L312
 4704              	.L311:
1541:..\src/interruptions.c ****             
 4705              		.loc 1 1541 0
 4706 07ce 0020     		movs	r0, #0
 4707 07d0 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 4708              	.L312:
1543:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE - abs(pwm_input));
 4709              		.loc 1 1543 0
 4710 07d4 7B6C     		ldr	r3, [r7, #68]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 113


 4711 07d6 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4712 07da 012B     		cmp	r3, #1
 4713 07dc 0BD1     		bne	.L313
1544:..\src/interruptions.c ****             }
 4714              		.loc 1 1544 0
 4715 07de FB6C     		ldr	r3, [r7, #76]
 4716 07e0 002B     		cmp	r3, #0
 4717 07e2 B8BF     		it	lt
 4718 07e4 5B42     		rsblt	r3, r3, #0
 4719 07e6 DBB2     		uxtb	r3, r3
 4720 07e8 C3F16403 		rsb	r3, r3, #100
 4721 07ec DBB2     		uxtb	r3, r3
 4722 07ee 1846     		mov	r0, r3
 4723 07f0 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1550:..\src/interruptions.c ****         default:
 4724              		.loc 1 1550 0
 4725 07f4 07E0     		b	.L317
 4726              	.L313:
1547:..\src/interruptions.c ****             }
 4727              		.loc 1 1547 0
 4728 07f6 FB6C     		ldr	r3, [r7, #76]
 4729 07f8 002B     		cmp	r3, #0
 4730 07fa B8BF     		it	lt
 4731 07fc 5B42     		rsblt	r3, r3, #0
 4732 07fe DBB2     		uxtb	r3, r3
 4733 0800 1846     		mov	r0, r3
 4734 0802 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 4735              	.L317:
1550:..\src/interruptions.c ****         default:
 4736              		.loc 1 1550 0
 4737 0806 00BF     		nop
 4738              	.L310:
1553:..\src/interruptions.c ****     }
1554:..\src/interruptions.c ****     
1555:..\src/interruptions.c **** }
 4739              		.loc 1 1555 0
 4740 0808 00BF     		nop
 4741 080a 5437     		adds	r7, r7, #84
 4742              		.cfi_def_cfa_offset 12
 4743 080c BD46     		mov	sp, r7
 4744              		.cfi_def_cfa_register 13
 4745              		@ sp needed
 4746 080e 90BD     		pop	{r4, r7, pc}
 4747              	.L323:
 4748              		.align	2
 4749              	.L322:
 4750 0810 1F85EB51 		.word	1374389535
 4751 0814 00000000 		.word	dev_pwm_limit
 4752 0818 D0000000 		.word	prev_pwm.10544
 4753 081c 00000000 		.word	pwm_sign
 4754 0820 00000000 		.word	g_measOld
 4755 0824 00000000 		.word	g_meas
 4756 0828 00000000 		.word	g_refOld
 4757 082c 00000000 		.word	g_ref
 4758 0830 D8000000 		.word	position_counter.10546
 4759 0834 00000000 		.word	change_ext_ref_flag
 4760 0838 00000000 		.word	g_refNew
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 114


 4761 083c BC000000 		.word	motor_dir.10545
 4762              		.cfi_endproc
 4763              	.LFE71:
 4764              		.size	motor_control_generic, .-motor_control_generic
 4765              		.global	__aeabi_fcmpeq
 4766              		.global	__aeabi_fmul
 4767              		.global	__aeabi_f2iz
 4768              		.global	__aeabi_fcmplt
 4769              		.section	.text.encoder_reading_SPI,"ax",%progbits
 4770              		.align	2
 4771              		.global	encoder_reading_SPI
 4772              		.thumb
 4773              		.thumb_func
 4774              		.type	encoder_reading_SPI, %function
 4775              	encoder_reading_SPI:
 4776              	.LFB72:
1556:..\src/interruptions.c **** 
1557:..\src/interruptions.c **** //==============================================================================
1558:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1559:..\src/interruptions.c **** //==============================================================================
1560:..\src/interruptions.c **** 
1561:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 4777              		.loc 1 1561 0
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 48
 4780              		@ frame_needed = 1, uses_anonymous_args = 0
 4781 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4782              		.cfi_def_cfa_offset 20
 4783              		.cfi_offset 4, -20
 4784              		.cfi_offset 5, -16
 4785              		.cfi_offset 6, -12
 4786              		.cfi_offset 7, -8
 4787              		.cfi_offset 14, -4
 4788 0002 8FB0     		sub	sp, sp, #60
 4789              		.cfi_def_cfa_offset 80
 4790 0004 02AF     		add	r7, sp, #8
 4791              		.cfi_def_cfa 7, 72
 4792 0006 0346     		mov	r3, r0
 4793 0008 0A46     		mov	r2, r1
 4794 000a FB71     		strb	r3, [r7, #7]
 4795 000c 1346     		mov	r3, r2
 4796 000e BB71     		strb	r3, [r7, #6]
1562:..\src/interruptions.c **** 
1563:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 4797              		.loc 1 1563 0
 4798 0010 0023     		movs	r3, #0
 4799 0012 87F82F30 		strb	r3, [r7, #47]
1564:..\src/interruptions.c ****     
1565:..\src/interruptions.c ****     // Encoder Variables  
1566:..\src/interruptions.c ****     uint8 jj;
1567:..\src/interruptions.c ****      
1568:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1569:..\src/interruptions.c ****     int16 tmp_value_encoder;
1570:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1571:..\src/interruptions.c ****     int32 value_encoder;
1572:..\src/interruptions.c ****     int32 speed_encoder;
1573:..\src/interruptions.c ****     int32 value_diff;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 115


1574:..\src/interruptions.c **** 	int8 init_rot = 0;
 4800              		.loc 1 1574 0
 4801 0016 0023     		movs	r3, #0
 4802 0018 87F82730 		strb	r3, [r7, #39]
1575:..\src/interruptions.c **** 
1576:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1577:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1578:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1579:..\src/interruptions.c ****     
1580:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1581:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1582:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1583:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1584:..\src/interruptions.c ****     static CYBIT pos_reconstruct[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1585:..\src/interruptions.c **** 
1586:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1587:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1588:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1589:..\src/interruptions.c **** //    
1590:..\src/interruptions.c ****     if (reset_last_value_flag) {
 4803              		.loc 1 1590 0
 4804 001c 8E4B     		ldr	r3, .L360
 4805 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4806 0020 002B     		cmp	r3, #0
 4807 0022 18D0     		beq	.L325
1591:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4808              		.loc 1 1591 0
 4809 0024 0323     		movs	r3, #3
 4810 0026 87F82E30 		strb	r3, [r7, #46]
 4811 002a 0AE0     		b	.L326
 4812              	.L327:
1592:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 4813              		.loc 1 1592 0
 4814 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4815 002e 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 4816 0032 8A48     		ldr	r0, .L360+4
 4817 0034 1346     		mov	r3, r2
 4818 0036 5B00     		lsls	r3, r3, #1
 4819 0038 1344     		add	r3, r3, r2
 4820 003a 0B44     		add	r3, r3, r1
 4821 003c 0022     		movs	r2, #0
 4822 003e 40F82320 		str	r2, [r0, r3, lsl #2]
 4823              	.L326:
1591:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 4824              		.loc 1 1591 0 discriminator 1
 4825 0042 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4826 0046 5A1E     		subs	r2, r3, #1
 4827 0048 87F82E20 		strb	r2, [r7, #46]
 4828 004c 002B     		cmp	r3, #0
 4829 004e EDD1     		bne	.L327
1593:..\src/interruptions.c ****         
1594:..\src/interruptions.c ****         reset_last_value_flag = 0;
 4830              		.loc 1 1594 0
 4831 0050 814B     		ldr	r3, .L360
 4832 0052 0022     		movs	r2, #0
 4833 0054 1A70     		strb	r2, [r3]
 4834              	.L325:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 116


1595:..\src/interruptions.c ****     }
1596:..\src/interruptions.c **** 
1597:..\src/interruptions.c ****     //======================================================     reading sensors
1598:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4835              		.loc 1 1598 0
 4836 0056 0023     		movs	r3, #0
 4837 0058 87F82F30 		strb	r3, [r7, #47]
 4838 005c 0DE0     		b	.L328
 4839              	.L329:
1599:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4840              		.loc 1 1599 0 discriminator 3
 4841 005e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4842 0062 9B00     		lsls	r3, r3, #2
 4843 0064 07F13002 		add	r2, r7, #48
 4844 0068 1344     		add	r3, r3, r2
 4845 006a 0022     		movs	r2, #0
 4846 006c 43F8282C 		str	r2, [r3, #-40]
1598:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4847              		.loc 1 1598 0 discriminator 3
 4848 0070 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4849 0074 0133     		adds	r3, r3, #1
 4850 0076 87F82F30 		strb	r3, [r7, #47]
 4851              	.L328:
1598:..\src/interruptions.c ****         aux_encoder[index] = 0;
 4852              		.loc 1 1598 0 is_stmt 0 discriminator 1
 4853 007a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4854 007e 022B     		cmp	r3, #2
 4855 0080 EDD9     		bls	.L329
1600:..\src/interruptions.c ****     }   
1601:..\src/interruptions.c ****     
1602:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 4856              		.loc 1 1602 0 is_stmt 1
 4857 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4858 0084 764A     		ldr	r2, .L360+8
 4859 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4860 0088 1A46     		mov	r2, r3
 4861 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4862 008c 1946     		mov	r1, r3
 4863 008e 1046     		mov	r0, r2
 4864 0090 FFF7FEFF 		bl	ReadEncoderLine
 4865              	.LBB9:
1603:..\src/interruptions.c ****                                                                         //CS1 for left hand
1604:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 4866              		.loc 1 1604 0
 4867 0094 0023     		movs	r3, #0
 4868 0096 3B62     		str	r3, [r7, #32]
 4869 0098 2EE0     		b	.L330
 4870              	.L332:
1605:..\src/interruptions.c ****         
1606:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1607:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 4871              		.loc 1 1607 0
 4872 009a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4873 009c 7149     		ldr	r1, .L360+12
 4874 009e 1346     		mov	r3, r2
 4875 00a0 5B00     		lsls	r3, r3, #1
 4876 00a2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 117


 4877 00a4 1B01     		lsls	r3, r3, #4
 4878 00a6 CA18     		adds	r2, r1, r3
 4879 00a8 3B6A     		ldr	r3, [r7, #32]
 4880 00aa 1344     		add	r3, r3, r2
 4881 00ac 03F2B113 		addw	r3, r3, #433
 4882 00b0 1B78     		ldrb	r3, [r3]
 4883 00b2 87F82F30 		strb	r3, [r7, #47]
1608:..\src/interruptions.c ****         
1609:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 4884              		.loc 1 1609 0
 4885 00b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4886 00b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4887 00bc 6A48     		ldr	r0, .L360+16
 4888 00be 1346     		mov	r3, r2
 4889 00c0 9B00     		lsls	r3, r3, #2
 4890 00c2 1344     		add	r3, r3, r2
 4891 00c4 0344     		add	r3, r3, r0
 4892 00c6 0B44     		add	r3, r3, r1
 4893 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4894 00ca 0F2B     		cmp	r3, #15
 4895 00cc 11D9     		bls	.L331
1610:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 4896              		.loc 1 1610 0
 4897 00ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4898 00d0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4899 00d4 6548     		ldr	r0, .L360+20
 4900 00d6 1346     		mov	r3, r2
 4901 00d8 9B00     		lsls	r3, r3, #2
 4902 00da 1344     		add	r3, r3, r2
 4903 00dc 0B44     		add	r3, r3, r1
 4904 00de 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 4905 00e2 1A46     		mov	r2, r3
 4906 00e4 3B6A     		ldr	r3, [r7, #32]
 4907 00e6 9B00     		lsls	r3, r3, #2
 4908 00e8 07F13001 		add	r1, r7, #48
 4909 00ec 0B44     		add	r3, r3, r1
 4910 00ee 43F8282C 		str	r2, [r3, #-40]
 4911              	.L331:
1604:..\src/interruptions.c ****         
 4912              		.loc 1 1604 0 discriminator 2
 4913 00f2 3B6A     		ldr	r3, [r7, #32]
 4914 00f4 0133     		adds	r3, r3, #1
 4915 00f6 3B62     		str	r3, [r7, #32]
 4916              	.L330:
1604:..\src/interruptions.c ****         
 4917              		.loc 1 1604 0 is_stmt 0 discriminator 1
 4918 00f8 3B6A     		ldr	r3, [r7, #32]
 4919 00fa 022B     		cmp	r3, #2
 4920 00fc CDDD     		ble	.L332
 4921              	.LBE9:
1611:..\src/interruptions.c ****         }
1612:..\src/interruptions.c ****     }
1613:..\src/interruptions.c ****     
1614:..\src/interruptions.c ****     // S = SIGN BIT
1615:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1616:..\src/interruptions.c ****     // 0 = 0 BIT
1617:..\src/interruptions.c ****     // C = CONTROL BIT
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 118


1618:..\src/interruptions.c ****     
1619:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 4922              		.loc 1 1619 0 is_stmt 1
 4923 00fe 0023     		movs	r3, #0
 4924 0100 87F82F30 		strb	r3, [r7, #47]
 4925 0104 33E3     		b	.L333
 4926              	.L353:
1620:..\src/interruptions.c ****         
1621:..\src/interruptions.c ****         data_encoder_raw[index] = aux_encoder[index];
 4927              		.loc 1 1621 0
 4928 0106 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 4929 010a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4930 010e 9B00     		lsls	r3, r3, #2
 4931 0110 07F13001 		add	r1, r7, #48
 4932 0114 0B44     		add	r3, r3, r1
 4933 0116 53F8283C 		ldr	r3, [r3, #-40]
 4934 011a 5549     		ldr	r1, .L360+24
 4935 011c 41F82230 		str	r3, [r1, r2, lsl #2]
1622:..\src/interruptions.c ****         
1623:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 4936              		.loc 1 1623 0
 4937 0120 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4938 0124 9B00     		lsls	r3, r3, #2
 4939 0126 07F13002 		add	r2, r7, #48
 4940 012a 1344     		add	r3, r3, r2
 4941 012c 53F8283C 		ldr	r3, [r3, #-40]
 4942 0130 99B2     		uxth	r1, r3
 4943 0132 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4944 0134 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 4945 0138 4E4C     		ldr	r4, .L360+28
 4946 013a 1346     		mov	r3, r2
 4947 013c 5B00     		lsls	r3, r3, #1
 4948 013e 1344     		add	r3, r3, r2
 4949 0140 9B00     		lsls	r3, r3, #2
 4950 0142 0344     		add	r3, r3, r0
 4951 0144 6633     		adds	r3, r3, #102
 4952 0146 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4953 014a 9BB2     		uxth	r3, r3
 4954 014c CB1A     		subs	r3, r1, r3
 4955 014e 9BB2     		uxth	r3, r3
 4956 0150 BB85     		strh	r3, [r7, #44]	@ movhi
1624:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 4957              		.loc 1 1624 0
 4958 0152 B7F92C30 		ldrsh	r3, [r7, #44]
 4959 0156 002B     		cmp	r3, #0
 4960 0158 04DA     		bge	.L334
1625:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 4961              		.loc 1 1625 0
 4962 015a BB8D     		ldrh	r3, [r7, #44]
 4963 015c 03F58053 		add	r3, r3, #4096
 4964 0160 9BB2     		uxth	r3, r3
 4965 0162 BB85     		strh	r3, [r7, #44]	@ movhi
 4966              	.L334:
1626:..\src/interruptions.c ****         }       // Range [0, 4096]
1627:..\src/interruptions.c **** 
1628:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 4967              		.loc 1 1628 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 119


 4968 0164 B7F92C30 		ldrsh	r3, [r7, #44]
 4969 0168 B3F5006F 		cmp	r3, #2048
 4970 016c 04DB     		blt	.L335
1629:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 4971              		.loc 1 1629 0
 4972 016e BB8D     		ldrh	r3, [r7, #44]
 4973 0170 A3F58053 		sub	r3, r3, #4096
 4974 0174 9BB2     		uxth	r3, r3
 4975 0176 BB85     		strh	r3, [r7, #44]	@ movhi
 4976              	.L335:
1630:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1631:..\src/interruptions.c **** 
1632:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 4977              		.loc 1 1632 0
 4978 0178 B7F92C30 		ldrsh	r3, [r7, #44]
 4979 017c 1B01     		lsls	r3, r3, #4
 4980 017e FB61     		str	r3, [r7, #28]
1633:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 4981              		.loc 1 1633 0
 4982 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4983 0182 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 4984 0186 3C48     		ldr	r0, .L360+32
 4985 0188 1346     		mov	r3, r2
 4986 018a 5B00     		lsls	r3, r3, #1
 4987 018c 1344     		add	r3, r3, r2
 4988 018e 0B44     		add	r3, r3, r1
 4989 0190 FA69     		ldr	r2, [r7, #28]
 4990 0192 40F82320 		str	r2, [r0, r3, lsl #2]
1634:..\src/interruptions.c **** 
1635:..\src/interruptions.c ****         // Initialize last_value_encoder
1636:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 4991              		.loc 1 1636 0
 4992 0196 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4993 0198 384A     		ldr	r2, .L360+36
 4994 019a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4995 019c 002B     		cmp	r3, #0
 4996 019e 12D0     		beq	.L336
1637:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 4997              		.loc 1 1637 0
 4998 01a0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4999 01a2 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5000 01a6 2D48     		ldr	r0, .L360+4
 5001 01a8 1346     		mov	r3, r2
 5002 01aa 5B00     		lsls	r3, r3, #1
 5003 01ac 1344     		add	r3, r3, r2
 5004 01ae 0B44     		add	r3, r3, r1
 5005 01b0 FA69     		ldr	r2, [r7, #28]
 5006 01b2 40F82320 		str	r2, [r0, r3, lsl #2]
1638:..\src/interruptions.c ****             if (index == 2)
 5007              		.loc 1 1638 0
 5008 01b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5009 01ba 022B     		cmp	r3, #2
 5010 01bc 03D1     		bne	.L336
1639:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5011              		.loc 1 1639 0
 5012 01be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5013 01c0 2E4A     		ldr	r2, .L360+36
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 120


 5014 01c2 0021     		movs	r1, #0
 5015 01c4 D154     		strb	r1, [r2, r3]
 5016              	.L336:
1640:..\src/interruptions.c ****         }
1641:..\src/interruptions.c **** 
1642:..\src/interruptions.c ****         // Take care of rotations
1643:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5017              		.loc 1 1643 0
 5018 01c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5019 01c8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5020 01cc 2348     		ldr	r0, .L360+4
 5021 01ce 1346     		mov	r3, r2
 5022 01d0 5B00     		lsls	r3, r3, #1
 5023 01d2 1344     		add	r3, r3, r2
 5024 01d4 0B44     		add	r3, r3, r1
 5025 01d6 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5026 01da FA69     		ldr	r2, [r7, #28]
 5027 01dc D31A     		subs	r3, r2, r3
 5028 01de BB61     		str	r3, [r7, #24]
1644:..\src/interruptions.c **** 
1645:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1646:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1647:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1648:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1649:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1650:..\src/interruptions.c ****         //                                               |           |
1651:..\src/interruptions.c ****         //                                           24575           -24576
1652:..\src/interruptions.c ****         //                                               |___________|
1653:..\src/interruptions.c ****         //                                                   49152
1654:..\src/interruptions.c **** 
1655:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1656:..\src/interruptions.c ****         // and update the variable only if the difference between
1657:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1658:..\src/interruptions.c **** 
1659:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1660:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1661:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1662:..\src/interruptions.c **** 
1663:..\src/interruptions.c ****         if (value_diff > 49152)
 5029              		.loc 1 1663 0
 5030 01e0 BB69     		ldr	r3, [r7, #24]
 5031 01e2 B3F5404F 		cmp	r3, #49152
 5032 01e6 19DD     		ble	.L337
1664:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5033              		.loc 1 1664 0
 5034 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5035 01ea 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5036 01ee 2448     		ldr	r0, .L360+40
 5037 01f0 3421     		movs	r1, #52
 5038 01f2 01FB02F1 		mul	r1, r1, r2
 5039 01f6 0144     		add	r1, r1, r0
 5040 01f8 1944     		add	r1, r1, r3
 5041 01fa 1831     		adds	r1, r1, #24
 5042 01fc 91F90010 		ldrsb	r1, [r1]
 5043 0200 C9B2     		uxtb	r1, r1
 5044 0202 0139     		subs	r1, r1, #1
 5045 0204 C9B2     		uxtb	r1, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 121


 5046 0206 4CB2     		sxtb	r4, r1
 5047 0208 1D49     		ldr	r1, .L360+40
 5048 020a 3420     		movs	r0, #52
 5049 020c 00FB02F2 		mul	r2, r0, r2
 5050 0210 0A44     		add	r2, r2, r1
 5051 0212 1344     		add	r3, r3, r2
 5052 0214 1833     		adds	r3, r3, #24
 5053 0216 2246     		mov	r2, r4
 5054 0218 1A70     		strb	r2, [r3]
 5055 021a 5BE0     		b	.L338
 5056              	.L337:
1665:..\src/interruptions.c ****         else{ 
1666:..\src/interruptions.c ****             if (value_diff < -49152)
 5057              		.loc 1 1666 0
 5058 021c BB69     		ldr	r3, [r7, #24]
 5059 021e 13F5404F 		cmn	r3, #49152
 5060 0222 2FDA     		bge	.L339
1667:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5061              		.loc 1 1667 0
 5062 0224 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5063 0226 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5064 022a 1548     		ldr	r0, .L360+40
 5065 022c 3421     		movs	r1, #52
 5066 022e 01FB02F1 		mul	r1, r1, r2
 5067 0232 0144     		add	r1, r1, r0
 5068 0234 1944     		add	r1, r1, r3
 5069 0236 1831     		adds	r1, r1, #24
 5070 0238 91F90010 		ldrsb	r1, [r1]
 5071 023c C9B2     		uxtb	r1, r1
 5072 023e 0131     		adds	r1, r1, #1
 5073 0240 C9B2     		uxtb	r1, r1
 5074 0242 4CB2     		sxtb	r4, r1
 5075 0244 0E49     		ldr	r1, .L360+40
 5076 0246 3420     		movs	r0, #52
 5077 0248 00FB02F2 		mul	r2, r0, r2
 5078 024c 0A44     		add	r2, r2, r1
 5079 024e 1344     		add	r3, r3, r2
 5080 0250 1833     		adds	r3, r3, #24
 5081 0252 2246     		mov	r2, r4
 5082 0254 1A70     		strb	r2, [r3]
 5083 0256 3DE0     		b	.L338
 5084              	.L361:
 5085              		.align	2
 5086              	.L360:
 5087 0258 00000000 		.word	reset_last_value_flag
 5088 025c E0000000 		.word	last_value_encoder.10569
 5089 0260 00000000 		.word	N_Encoder_Line_Connected
 5090 0264 00000000 		.word	c_mem
 5091 0268 00000000 		.word	Encoder_Check
 5092 026c 00000000 		.word	Encoder_Value
 5093 0270 00000000 		.word	data_encoder_raw
 5094 0274 00000000 		.word	g_mem
 5095 0278 F8000000 		.word	comp_value_encoder.10570
 5096 027c 04000000 		.word	only_first_time.10572
 5097 0280 00000000 		.word	g_meas
 5098              	.L339:
1668:..\src/interruptions.c ****             else{
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 122


1669:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5099              		.loc 1 1669 0
 5100 0284 BB69     		ldr	r3, [r7, #24]
 5101 0286 002B     		cmp	r3, #0
 5102 0288 B8BF     		it	lt
 5103 028a 5B42     		rsblt	r3, r3, #0
 5104 028c B3F5804F 		cmp	r3, #16384
 5105 0290 20DD     		ble	.L338
1670:..\src/interruptions.c ****                     error[n_line][index]++;
 5106              		.loc 1 1670 0
 5107 0292 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5108 0294 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5109 0298 9B48     		ldr	r0, .L362
 5110 029a 1346     		mov	r3, r2
 5111 029c 5B00     		lsls	r3, r3, #1
 5112 029e 1344     		add	r3, r3, r2
 5113 02a0 0344     		add	r3, r3, r0
 5114 02a2 0B44     		add	r3, r3, r1
 5115 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5116 02a6 0133     		adds	r3, r3, #1
 5117 02a8 DCB2     		uxtb	r4, r3
 5118 02aa 9748     		ldr	r0, .L362
 5119 02ac 1346     		mov	r3, r2
 5120 02ae 5B00     		lsls	r3, r3, #1
 5121 02b0 1344     		add	r3, r3, r2
 5122 02b2 0344     		add	r3, r3, r0
 5123 02b4 0B44     		add	r3, r3, r1
 5124 02b6 2246     		mov	r2, r4
 5125 02b8 1A70     		strb	r2, [r3]
1671:..\src/interruptions.c ****                                 
1672:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5126              		.loc 1 1672 0
 5127 02ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5128 02bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5129 02c0 9148     		ldr	r0, .L362
 5130 02c2 1346     		mov	r3, r2
 5131 02c4 5B00     		lsls	r3, r3, #1
 5132 02c6 1344     		add	r3, r3, r2
 5133 02c8 0344     		add	r3, r3, r0
 5134 02ca 0B44     		add	r3, r3, r1
 5135 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5136 02ce 092B     		cmp	r3, #9
 5137 02d0 40F28C82 		bls	.L359
 5138              	.L338:
1673:..\src/interruptions.c ****                         // Discard
1674:..\src/interruptions.c ****                         return;
1675:..\src/interruptions.c ****                 }
1676:..\src/interruptions.c ****             }
1677:..\src/interruptions.c ****         }
1678:..\src/interruptions.c **** 
1679:..\src/interruptions.c ****         error[n_line][index] = 0;
 5139              		.loc 1 1679 0
 5140 02d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5141 02d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5142 02da 8B48     		ldr	r0, .L362
 5143 02dc 1346     		mov	r3, r2
 5144 02de 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 123


 5145 02e0 1344     		add	r3, r3, r2
 5146 02e2 0344     		add	r3, r3, r0
 5147 02e4 0B44     		add	r3, r3, r1
 5148 02e6 0022     		movs	r2, #0
 5149 02e8 1A70     		strb	r2, [r3]
1680:..\src/interruptions.c ****         
1681:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5150              		.loc 1 1681 0
 5151 02ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5152 02ec 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5153 02f0 8648     		ldr	r0, .L362+4
 5154 02f2 1346     		mov	r3, r2
 5155 02f4 5B00     		lsls	r3, r3, #1
 5156 02f6 1344     		add	r3, r3, r2
 5157 02f8 0B44     		add	r3, r3, r1
 5158 02fa FA69     		ldr	r2, [r7, #28]
 5159 02fc 40F82320 		str	r2, [r0, r3, lsl #2]
1682:..\src/interruptions.c **** 
1683:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5160              		.loc 1 1683 0
 5161 0300 FB69     		ldr	r3, [r7, #28]
 5162 0302 BB62     		str	r3, [r7, #40]
1684:..\src/interruptions.c **** 
1685:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5163              		.loc 1 1685 0
 5164 0304 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5165 0306 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5166 030a 8149     		ldr	r1, .L362+8
 5167 030c 3420     		movs	r0, #52
 5168 030e 00FB02F2 		mul	r2, r0, r2
 5169 0312 0A44     		add	r2, r2, r1
 5170 0314 1344     		add	r3, r3, r2
 5171 0316 1833     		adds	r3, r3, #24
 5172 0318 93F90030 		ldrsb	r3, [r3]
 5173 031c 1B04     		lsls	r3, r3, #16
 5174 031e BA6A     		ldr	r2, [r7, #40]
 5175 0320 1344     		add	r3, r3, r2
 5176 0322 BB62     		str	r3, [r7, #40]
1686:..\src/interruptions.c ****         
1687:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5177              		.loc 1 1687 0
 5178 0324 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5179 0326 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5180 032a 7A48     		ldr	r0, .L362+12
 5181 032c 1346     		mov	r3, r2
 5182 032e 5B00     		lsls	r3, r3, #1
 5183 0330 1344     		add	r3, r3, r2
 5184 0332 9B00     		lsls	r3, r3, #2
 5185 0334 0B44     		add	r3, r3, r1
 5186 0336 6833     		adds	r3, r3, #104
 5187 0338 9B00     		lsls	r3, r3, #2
 5188 033a 0344     		add	r3, r3, r0
 5189 033c 5B68     		ldr	r3, [r3, #4]	@ float
 5190 033e 4FF07E51 		mov	r1, #1065353216
 5191 0342 1846     		mov	r0, r3
 5192 0344 FFF7FEFF 		bl	__aeabi_fcmpeq
 5193 0348 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 124


 5194 034a 002B     		cmp	r3, #0
 5195 034c 1AD1     		bne	.L341
1688:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5196              		.loc 1 1688 0
 5197 034e B86A     		ldr	r0, [r7, #40]
 5198 0350 FFF7FEFF 		bl	__aeabi_i2f
 5199 0354 0446     		mov	r4, r0
 5200 0356 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5201 0358 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5202 035c 6D48     		ldr	r0, .L362+12
 5203 035e 1346     		mov	r3, r2
 5204 0360 5B00     		lsls	r3, r3, #1
 5205 0362 1344     		add	r3, r3, r2
 5206 0364 9B00     		lsls	r3, r3, #2
 5207 0366 0B44     		add	r3, r3, r1
 5208 0368 6833     		adds	r3, r3, #104
 5209 036a 9B00     		lsls	r3, r3, #2
 5210 036c 0344     		add	r3, r3, r0
 5211 036e 5B68     		ldr	r3, [r3, #4]	@ float
 5212 0370 1946     		mov	r1, r3
 5213 0372 2046     		mov	r0, r4
 5214 0374 FFF7FEFF 		bl	__aeabi_fmul
 5215 0378 0346     		mov	r3, r0
 5216 037a 1846     		mov	r0, r3
 5217 037c FFF7FEFF 		bl	__aeabi_f2iz
 5218 0380 0346     		mov	r3, r0
 5219 0382 BB62     		str	r3, [r7, #40]
 5220              	.L341:
1689:..\src/interruptions.c ****         }
1690:..\src/interruptions.c **** 
1691:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5221              		.loc 1 1691 0
 5222 0384 634B     		ldr	r3, .L362+12
 5223 0386 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5224 038a 002B     		cmp	r3, #0
 5225 038c 0BD1     		bne	.L343
1692:..\src/interruptions.c ****             // Right / Left hand turn
1693:..\src/interruptions.c ****             if (index == 0) {
 5226              		.loc 1 1693 0
 5227 038e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5228 0392 002B     		cmp	r3, #0
 5229 0394 07D1     		bne	.L343
1694:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5230              		.loc 1 1694 0
 5231 0396 5F4B     		ldr	r3, .L362+12
 5232 0398 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5233 039c 002B     		cmp	r3, #0
 5234 039e 02D1     		bne	.L343
1695:..\src/interruptions.c ****                     value_encoder *= -1;        
 5235              		.loc 1 1695 0
 5236 03a0 BB6A     		ldr	r3, [r7, #40]
 5237 03a2 5B42     		negs	r3, r3
 5238 03a4 BB62     		str	r3, [r7, #40]
 5239              	.L343:
1696:..\src/interruptions.c ****                 }
1697:..\src/interruptions.c ****             }
1698:..\src/interruptions.c ****         }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 125


1699:..\src/interruptions.c ****  
1700:..\src/interruptions.c **** 
1701:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5240              		.loc 1 1701 0
 5241 03a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5242 03a8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5243 03ac 5848     		ldr	r0, .L362+8
 5244 03ae 1346     		mov	r3, r2
 5245 03b0 5B00     		lsls	r3, r3, #1
 5246 03b2 1344     		add	r3, r3, r2
 5247 03b4 9B00     		lsls	r3, r3, #2
 5248 03b6 1344     		add	r3, r3, r2
 5249 03b8 0B44     		add	r3, r3, r1
 5250 03ba BA6A     		ldr	r2, [r7, #40]
 5251 03bc 40F82320 		str	r2, [r0, r3, lsl #2]
1702:..\src/interruptions.c ****     
1703:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5252              		.loc 1 1703 0
 5253 03c0 BA6A     		ldr	r2, [r7, #40]
 5254 03c2 1346     		mov	r3, r2
 5255 03c4 9B00     		lsls	r3, r3, #2
 5256 03c6 1344     		add	r3, r3, r2
 5257 03c8 5B00     		lsls	r3, r3, #1
 5258 03ca 9918     		adds	r1, r3, r2
 5259 03cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5260 03ce 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5261 03d2 514C     		ldr	r4, .L362+16
 5262 03d4 1346     		mov	r3, r2
 5263 03d6 5B00     		lsls	r3, r3, #1
 5264 03d8 1344     		add	r3, r3, r2
 5265 03da 0344     		add	r3, r3, r0
 5266 03dc 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5267 03e0 6FF01102 		mvn	r2, #17
 5268 03e4 02FB03F3 		mul	r3, r2, r3
 5269 03e8 1944     		add	r1, r1, r3
 5270 03ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5271 03ec 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5272 03f0 4A4C     		ldr	r4, .L362+20
 5273 03f2 1346     		mov	r3, r2
 5274 03f4 5B00     		lsls	r3, r3, #1
 5275 03f6 1344     		add	r3, r3, r2
 5276 03f8 0344     		add	r3, r3, r0
 5277 03fa 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5278 03fe 1346     		mov	r3, r2
 5279 0400 DB00     		lsls	r3, r3, #3
 5280 0402 1344     		add	r3, r3, r2
 5281 0404 1944     		add	r1, r1, r3
 5282 0406 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5283 0408 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5284 040c 444C     		ldr	r4, .L362+24
 5285 040e 1346     		mov	r3, r2
 5286 0410 5B00     		lsls	r3, r3, #1
 5287 0412 1344     		add	r3, r3, r2
 5288 0414 0344     		add	r3, r3, r0
 5289 0416 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5290 041a 5B00     		lsls	r3, r3, #1
 5291 041c C81A     		subs	r0, r1, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 126


 5292 041e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5293 0422 DB00     		lsls	r3, r3, #3
 5294 0424 3F4A     		ldr	r2, .L362+28
 5295 0426 1344     		add	r3, r3, r2
 5296 0428 1946     		mov	r1, r3
 5297 042a FFF7FEFF 		bl	filter
 5298 042e 0346     		mov	r3, r0
 5299 0430 1BB2     		sxth	r3, r3
 5300 0432 7B61     		str	r3, [r7, #20]
1704:..\src/interruptions.c **** 
1705:..\src/interruptions.c ****         //Update current speed
1706:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5301              		.loc 1 1706 0
 5302 0434 7869     		ldr	r0, [r7, #20]
 5303 0436 FFF7FEFF 		bl	__aeabi_i2f
 5304 043a 0446     		mov	r4, r0
 5305 043c 3A4B     		ldr	r3, .L362+32
 5306 043e 1B68     		ldr	r3, [r3]	@ float
 5307 0440 3A49     		ldr	r1, .L362+36
 5308 0442 1846     		mov	r0, r3
 5309 0444 FFF7FEFF 		bl	__aeabi_fmul
 5310 0448 0346     		mov	r3, r0
 5311 044a 1946     		mov	r1, r3
 5312 044c 2046     		mov	r0, r4
 5313 044e FFF7FEFF 		bl	__aeabi_fdiv
 5314 0452 0346     		mov	r3, r0
 5315 0454 1846     		mov	r0, r3
 5316 0456 FFF7FEFF 		bl	__aeabi_f2iz
 5317 045a 0346     		mov	r3, r0
 5318 045c 7B61     		str	r3, [r7, #20]
1707:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5319              		.loc 1 1707 0
 5320 045e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5321 0460 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5322 0464 2A48     		ldr	r0, .L362+8
 5323 0466 1346     		mov	r3, r2
 5324 0468 5B00     		lsls	r3, r3, #1
 5325 046a 1344     		add	r3, r3, r2
 5326 046c 9B00     		lsls	r3, r3, #2
 5327 046e 1344     		add	r3, r3, r2
 5328 0470 0B44     		add	r3, r3, r1
 5329 0472 0633     		adds	r3, r3, #6
 5330 0474 9B00     		lsls	r3, r3, #2
 5331 0476 0344     		add	r3, r3, r0
 5332 0478 7A69     		ldr	r2, [r7, #20]
 5333 047a 5A60     		str	r2, [r3, #4]
1708:..\src/interruptions.c **** 
1709:..\src/interruptions.c ****         // update old velocity and acceleration values
1710:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5334              		.loc 1 1710 0
 5335 047c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5336 047e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5337 0482 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5338 0484 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5339 0488 244D     		ldr	r5, .L362+20
 5340 048a 0B46     		mov	r3, r1
 5341 048c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 127


 5342 048e 0B44     		add	r3, r3, r1
 5343 0490 2344     		add	r3, r3, r4
 5344 0492 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5345 0496 224C     		ldr	r4, .L362+24
 5346 0498 1346     		mov	r3, r2
 5347 049a 5B00     		lsls	r3, r3, #1
 5348 049c 1344     		add	r3, r3, r2
 5349 049e 0344     		add	r3, r3, r0
 5350 04a0 44F82310 		str	r1, [r4, r3, lsl #2]
1711:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5351              		.loc 1 1711 0
 5352 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5353 04a6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5354 04aa F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5355 04ac 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5356 04b0 194D     		ldr	r5, .L362+16
 5357 04b2 0B46     		mov	r3, r1
 5358 04b4 5B00     		lsls	r3, r3, #1
 5359 04b6 0B44     		add	r3, r3, r1
 5360 04b8 2344     		add	r3, r3, r4
 5361 04ba 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5362 04be 174C     		ldr	r4, .L362+20
 5363 04c0 1346     		mov	r3, r2
 5364 04c2 5B00     		lsls	r3, r3, #1
 5365 04c4 1344     		add	r3, r3, r2
 5366 04c6 0344     		add	r3, r3, r0
 5367 04c8 44F82310 		str	r1, [r4, r3, lsl #2]
1712:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5368              		.loc 1 1712 0
 5369 04cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5370 04ce 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5371 04d2 1148     		ldr	r0, .L362+16
 5372 04d4 1346     		mov	r3, r2
 5373 04d6 5B00     		lsls	r3, r3, #1
 5374 04d8 1344     		add	r3, r3, r2
 5375 04da 0B44     		add	r3, r3, r1
 5376 04dc BA6A     		ldr	r2, [r7, #40]
 5377 04de 40F82320 		str	r2, [r0, r3, lsl #2]
1713:..\src/interruptions.c **** 
1714:..\src/interruptions.c ****         // wait at least 3 * max_num_of_error (10) + 5 = 35 cycles to reconstruct the right turn
1715:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5378              		.loc 1 1715 0
 5379 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5380 04e4 124A     		ldr	r2, .L362+40
 5381 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5382 04e8 002B     		cmp	r3, #0
 5383 04ea 40F03B81 		bne	.L344
1716:..\src/interruptions.c ****             if (one_time_execute[n_line] < 34) 
 5384              		.loc 1 1716 0
 5385 04ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5386 04f0 104A     		ldr	r2, .L362+44
 5387 04f2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5388 04f4 212B     		cmp	r3, #33
 5389 04f6 1FD8     		bhi	.L345
1717:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 5390              		.loc 1 1717 0
 5391 04f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 128


 5392 04fa 0E4A     		ldr	r2, .L362+44
 5393 04fc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 5394 04fe 0132     		adds	r2, r2, #1
 5395 0500 D1B2     		uxtb	r1, r2
 5396 0502 0C4A     		ldr	r2, .L362+44
 5397 0504 D154     		strb	r1, [r2, r3]
 5398 0506 2DE1     		b	.L344
 5399              	.L363:
 5400              		.align	2
 5401              	.L362:
 5402 0508 10010000 		.word	error.10571
 5403 050c E0000000 		.word	last_value_encoder.10569
 5404 0510 00000000 		.word	g_meas
 5405 0514 00000000 		.word	c_mem
 5406 0518 18010000 		.word	v_value.10577
 5407 051c 30010000 		.word	vv_value.10578
 5408 0520 48010000 		.word	vvv_value.10579
 5409 0524 00000000 		.word	filt_vel
 5410 0528 00000000 		.word	cycle_time
 5411 052c 0000C040 		.word	1086324736
 5412 0530 60010000 		.word	pos_reconstruct.10576
 5413 0534 64010000 		.word	one_time_execute.10574
 5414              	.L345:
1718:..\src/interruptions.c ****             else {
1719:..\src/interruptions.c ****                 //Double encoder translation
1720:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 5415              		.loc 1 1720 0
 5416 0538 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5417 053a AE49     		ldr	r1, .L364
 5418 053c 1346     		mov	r3, r2
 5419 053e 5B00     		lsls	r3, r3, #1
 5420 0540 1344     		add	r3, r3, r2
 5421 0542 1B01     		lsls	r3, r3, #4
 5422 0544 0B44     		add	r3, r3, r1
 5423 0546 03F5D873 		add	r3, r3, #432
 5424 054a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5425 054c 002B     		cmp	r3, #0
 5426 054e 5ED0     		beq	.L346
1721:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5427              		.loc 1 1721 0
 5428 0550 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5429 0552 A949     		ldr	r1, .L364+4
 5430 0554 1346     		mov	r3, r2
 5431 0556 5B00     		lsls	r3, r3, #1
 5432 0558 1344     		add	r3, r3, r2
 5433 055a 9B00     		lsls	r3, r3, #2
 5434 055c 0B44     		add	r3, r3, r1
 5435 055e 1868     		ldr	r0, [r3]
 5436 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5437 0562 A549     		ldr	r1, .L364+4
 5438 0564 1346     		mov	r3, r2
 5439 0566 5B00     		lsls	r3, r3, #1
 5440 0568 1344     		add	r3, r3, r2
 5441 056a 9B00     		lsls	r3, r3, #2
 5442 056c 0B44     		add	r3, r3, r1
 5443 056e 0433     		adds	r3, r3, #4
 5444 0570 1C68     		ldr	r4, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 129


1722:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 5445              		.loc 1 1722 0
 5446 0572 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5447 0574 9F49     		ldr	r1, .L364
 5448 0576 1346     		mov	r3, r2
 5449 0578 5B00     		lsls	r3, r3, #1
 5450 057a 1344     		add	r3, r3, r2
 5451 057c 1B01     		lsls	r3, r3, #4
 5452 057e 0B44     		add	r3, r3, r1
 5453 0580 03F2B513 		addw	r3, r3, #437
 5454 0584 93F90030 		ldrsb	r3, [r3]
1721:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5455              		.loc 1 1721 0
 5456 0588 1D46     		mov	r5, r3
 5457              		.loc 1 1722 0
 5458 058a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5459 058c 9949     		ldr	r1, .L364
 5460 058e 1346     		mov	r3, r2
 5461 0590 5B00     		lsls	r3, r3, #1
 5462 0592 1344     		add	r3, r3, r2
 5463 0594 1B01     		lsls	r3, r3, #4
 5464 0596 0B44     		add	r3, r3, r1
 5465 0598 03F5DB73 		add	r3, r3, #438
 5466 059c 93F90030 		ldrsb	r3, [r3]
1721:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5467              		.loc 1 1721 0
 5468 05a0 1E46     		mov	r6, r3
 5469              		.loc 1 1722 0
 5470 05a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5471 05a4 9349     		ldr	r1, .L364
 5472 05a6 1346     		mov	r3, r2
 5473 05a8 5B00     		lsls	r3, r3, #1
 5474 05aa 1344     		add	r3, r3, r2
 5475 05ac 1B01     		lsls	r3, r3, #4
 5476 05ae 0B44     		add	r3, r3, r1
 5477 05b0 03F2B713 		addw	r3, r3, #439
 5478 05b4 93F90030 		ldrsb	r3, [r3]
1721:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 5479              		.loc 1 1721 0
 5480 05b8 0093     		str	r3, [sp]
 5481 05ba 3346     		mov	r3, r6
 5482 05bc 2A46     		mov	r2, r5
 5483 05be 2146     		mov	r1, r4
 5484 05c0 FFF7FEFF 		bl	calc_turns_fcn
 5485 05c4 0346     		mov	r3, r0
 5486 05c6 87F82730 		strb	r3, [r7, #39]
1723:..\src/interruptions.c **** 
1724:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 5487              		.loc 1 1724 0
 5488 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5489 05cc 8949     		ldr	r1, .L364
 5490 05ce 1346     		mov	r3, r2
 5491 05d0 5B00     		lsls	r3, r3, #1
 5492 05d2 1344     		add	r3, r3, r2
 5493 05d4 1B01     		lsls	r3, r3, #4
 5494 05d6 0B44     		add	r3, r3, r1
 5495 05d8 03F5D273 		add	r3, r3, #420
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 130


 5496 05dc 1B68     		ldr	r3, [r3]	@ float
 5497 05de 4FF00001 		mov	r1, #0
 5498 05e2 1846     		mov	r0, r3
 5499 05e4 FFF7FEFF 		bl	__aeabi_fcmplt
 5500 05e8 0346     		mov	r3, r0
 5501 05ea 002B     		cmp	r3, #0
 5502 05ec 05D0     		beq	.L347
1725:..\src/interruptions.c ****                         init_rot = -init_rot;
 5503              		.loc 1 1725 0
 5504 05ee 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5505 05f2 5B42     		negs	r3, r3
 5506 05f4 DBB2     		uxtb	r3, r3
 5507 05f6 87F82730 		strb	r3, [r7, #39]
 5508              	.L347:
1726:..\src/interruptions.c ****                     
1727:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 5509              		.loc 1 1727 0
 5510 05fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5511 05fc 7F4A     		ldr	r2, .L364+8
 5512 05fe 3421     		movs	r1, #52
 5513 0600 01FB03F3 		mul	r3, r1, r3
 5514 0604 1344     		add	r3, r3, r2
 5515 0606 1833     		adds	r3, r3, #24
 5516 0608 97F82720 		ldrb	r2, [r7, #39]
 5517 060c 1A70     		strb	r2, [r3]
 5518              	.L346:
1728:..\src/interruptions.c ****                 }    
1729:..\src/interruptions.c **** 
1730:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5519              		.loc 1 1730 0
 5520 060e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5521 0610 7849     		ldr	r1, .L364
 5522 0612 1346     		mov	r3, r2
 5523 0614 5B00     		lsls	r3, r3, #1
 5524 0616 1344     		add	r3, r3, r2
 5525 0618 1B01     		lsls	r3, r3, #4
 5526 061a 0B44     		add	r3, r3, r1
 5527 061c 03F5D273 		add	r3, r3, #420
 5528 0620 1B68     		ldr	r3, [r3]	@ float
 5529 0622 4FF07E51 		mov	r1, #1065353216
 5530 0626 1846     		mov	r0, r3
 5531 0628 FFF7FEFF 		bl	__aeabi_fcmpeq
 5532 062c 0346     		mov	r3, r0
 5533 062e 002B     		cmp	r3, #0
 5534 0630 22D1     		bne	.L349
1731:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 5535              		.loc 1 1731 0
 5536 0632 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5537 0634 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5538 0636 714A     		ldr	r2, .L364+8
 5539 0638 3421     		movs	r1, #52
 5540 063a 01FB03F3 		mul	r3, r1, r3
 5541 063e 1344     		add	r3, r3, r2
 5542 0640 1B68     		ldr	r3, [r3]
 5543 0642 1846     		mov	r0, r3
 5544 0644 FFF7FEFF 		bl	__aeabi_i2f
 5545 0648 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 131


 5546 064a 6A49     		ldr	r1, .L364
 5547 064c 1346     		mov	r3, r2
 5548 064e 5B00     		lsls	r3, r3, #1
 5549 0650 1344     		add	r3, r3, r2
 5550 0652 1B01     		lsls	r3, r3, #4
 5551 0654 0B44     		add	r3, r3, r1
 5552 0656 03F5D273 		add	r3, r3, #420
 5553 065a 1B68     		ldr	r3, [r3]	@ float
 5554 065c 1946     		mov	r1, r3
 5555 065e FFF7FEFF 		bl	__aeabi_fdiv
 5556 0662 0346     		mov	r3, r0
 5557 0664 1846     		mov	r0, r3
 5558 0666 FFF7FEFF 		bl	__aeabi_f2iz
 5559 066a 0146     		mov	r1, r0
 5560 066c 634A     		ldr	r2, .L364+8
 5561 066e 3423     		movs	r3, #52
 5562 0670 03FB04F3 		mul	r3, r3, r4
 5563 0674 1344     		add	r3, r3, r2
 5564 0676 1960     		str	r1, [r3]
 5565              	.L349:
1732:..\src/interruptions.c ****                 
1733:..\src/interruptions.c ****                 g_meas[n_line].pos[0] += (int32)(init_rot << 16);
 5566              		.loc 1 1733 0
 5567 0678 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5568 067a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5569 067c 5F49     		ldr	r1, .L364+8
 5570 067e 3420     		movs	r0, #52
 5571 0680 00FB02F2 		mul	r2, r0, r2
 5572 0684 0A44     		add	r2, r2, r1
 5573 0686 1168     		ldr	r1, [r2]
 5574 0688 97F92720 		ldrsb	r2, [r7, #39]
 5575 068c 1204     		lsls	r2, r2, #16
 5576 068e 0A44     		add	r2, r2, r1
 5577 0690 5A49     		ldr	r1, .L364+8
 5578 0692 3420     		movs	r0, #52
 5579 0694 00FB03F3 		mul	r3, r0, r3
 5580 0698 0B44     		add	r3, r3, r1
 5581 069a 1A60     		str	r2, [r3]
1734:..\src/interruptions.c ****             
1735:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 5582              		.loc 1 1735 0
 5583 069c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5584 069e 5549     		ldr	r1, .L364
 5585 06a0 1346     		mov	r3, r2
 5586 06a2 5B00     		lsls	r3, r3, #1
 5587 06a4 1344     		add	r3, r3, r2
 5588 06a6 1B01     		lsls	r3, r3, #4
 5589 06a8 0B44     		add	r3, r3, r1
 5590 06aa 03F5D273 		add	r3, r3, #420
 5591 06ae 1B68     		ldr	r3, [r3]	@ float
 5592 06b0 4FF07E51 		mov	r1, #1065353216
 5593 06b4 1846     		mov	r0, r3
 5594 06b6 FFF7FEFF 		bl	__aeabi_fcmpeq
 5595 06ba 0346     		mov	r3, r0
 5596 06bc 002B     		cmp	r3, #0
 5597 06be 22D1     		bne	.L351
1736:..\src/interruptions.c ****                     g_meas[n_line].pos[0] *= c_mem.enc[n_line].m_mult[0];
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 132


 5598              		.loc 1 1736 0
 5599 06c0 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 5600 06c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5601 06c4 4D4A     		ldr	r2, .L364+8
 5602 06c6 3421     		movs	r1, #52
 5603 06c8 01FB03F3 		mul	r3, r1, r3
 5604 06cc 1344     		add	r3, r3, r2
 5605 06ce 1B68     		ldr	r3, [r3]
 5606 06d0 1846     		mov	r0, r3
 5607 06d2 FFF7FEFF 		bl	__aeabi_i2f
 5608 06d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5609 06d8 4649     		ldr	r1, .L364
 5610 06da 1346     		mov	r3, r2
 5611 06dc 5B00     		lsls	r3, r3, #1
 5612 06de 1344     		add	r3, r3, r2
 5613 06e0 1B01     		lsls	r3, r3, #4
 5614 06e2 0B44     		add	r3, r3, r1
 5615 06e4 03F5D273 		add	r3, r3, #420
 5616 06e8 1B68     		ldr	r3, [r3]	@ float
 5617 06ea 1946     		mov	r1, r3
 5618 06ec FFF7FEFF 		bl	__aeabi_fmul
 5619 06f0 0346     		mov	r3, r0
 5620 06f2 1846     		mov	r0, r3
 5621 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 5622 06f8 0146     		mov	r1, r0
 5623 06fa 404A     		ldr	r2, .L364+8
 5624 06fc 3423     		movs	r3, #52
 5625 06fe 03FB04F3 		mul	r3, r3, r4
 5626 0702 1344     		add	r3, r3, r2
 5627 0704 1960     		str	r1, [r3]
 5628              	.L351:
1737:..\src/interruptions.c ****             
1738:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 5629              		.loc 1 1738 0
 5630 0706 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5631 0708 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5632 070a 3C49     		ldr	r1, .L364+8
 5633 070c 3420     		movs	r0, #52
 5634 070e 00FB02F2 		mul	r2, r0, r2
 5635 0712 0A44     		add	r2, r2, r1
 5636 0714 1268     		ldr	r2, [r2]
 5637 0716 3A49     		ldr	r1, .L364+12
 5638 0718 1B01     		lsls	r3, r3, #4
 5639 071a 0B44     		add	r3, r3, r1
 5640 071c 1A60     		str	r2, [r3]
1739:..\src/interruptions.c **** 
1740:..\src/interruptions.c ****                 // If necessary activate motor
1741:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 5641              		.loc 1 1741 0
 5642 071e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5643 0720 384A     		ldr	r2, .L364+16
 5644 0722 0121     		movs	r1, #1
 5645 0724 D154     		strb	r1, [r2, r3]
1742:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1743:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5646              		.loc 1 1743 0
 5647 0726 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 133


 5648 0728 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5649 072a 3248     		ldr	r0, .L364
 5650 072c 1346     		mov	r3, r2
 5651 072e DB00     		lsls	r3, r3, #3
 5652 0730 9B1A     		subs	r3, r3, r2
 5653 0732 1B01     		lsls	r3, r3, #4
 5654 0734 0344     		add	r3, r3, r0
 5655 0736 E033     		adds	r3, r3, #224
 5656 0738 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5657 073a 314A     		ldr	r2, .L364+12
 5658 073c 0B01     		lsls	r3, r1, #4
 5659 073e 1344     		add	r3, r3, r2
 5660 0740 0C33     		adds	r3, r3, #12
 5661 0742 0246     		mov	r2, r0
 5662 0744 1A70     		strb	r2, [r3]
1744:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 5663              		.loc 1 1744 0
 5664 0746 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5665 0748 2D4A     		ldr	r2, .L364+12
 5666 074a 1B01     		lsls	r3, r3, #4
 5667 074c 1344     		add	r3, r3, r2
 5668 074e 0C33     		adds	r3, r3, #12
 5669 0750 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5670 0752 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5671 0754 1146     		mov	r1, r2
 5672 0756 1846     		mov	r0, r3
 5673 0758 FFF7FEFF 		bl	enable_motor
1745:..\src/interruptions.c ****                 
1746:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 5674              		.loc 1 1746 0
 5675 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5676 075e 2A4A     		ldr	r2, .L364+20
 5677 0760 0121     		movs	r1, #1
 5678 0762 D154     		strb	r1, [r2, r3]
 5679              	.L344:
1619:..\src/interruptions.c ****         
 5680              		.loc 1 1619 0 discriminator 2
 5681 0764 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5682 0768 0133     		adds	r3, r3, #1
 5683 076a 87F82F30 		strb	r3, [r7, #47]
 5684              	.L333:
1619:..\src/interruptions.c ****         
 5685              		.loc 1 1619 0 is_stmt 0 discriminator 1
 5686 076e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5687 0772 022B     		cmp	r3, #2
 5688 0774 7FF6C7AC 		bls	.L353
1747:..\src/interruptions.c ****             }
1748:..\src/interruptions.c ****         }
1749:..\src/interruptions.c ****     } 
1750:..\src/interruptions.c **** 
1751:..\src/interruptions.c **** 	
1752:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1753:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 5689              		.loc 1 1753 0 is_stmt 1
 5690 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5691 077a 224A     		ldr	r2, .L364+16
 5692 077c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 134


 5693 077e 002B     		cmp	r3, #0
 5694 0780 35D0     		beq	.L324
1754:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 5695              		.loc 1 1754 0
 5696 0782 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5697 0784 214A     		ldr	r2, .L364+24
 5698 0786 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5699 078a 0132     		adds	r2, r2, #1
 5700 078c 1F49     		ldr	r1, .L364+24
 5701 078e 41F82320 		str	r2, [r1, r3, lsl #2]
1755:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 5702              		.loc 1 1755 0
 5703 0792 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5704 0794 1D4A     		ldr	r2, .L364+24
 5705 0796 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5706 079a B3F5FA5F 		cmp	r3, #8000
 5707 079e 26D3     		bcc	.L324
1756:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 5708              		.loc 1 1756 0
 5709 07a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5710 07a2 174A     		ldr	r2, .L364+12
 5711 07a4 1B01     		lsls	r3, r3, #4
 5712 07a6 1344     		add	r3, r3, r2
 5713 07a8 0022     		movs	r2, #0
 5714 07aa 1A60     		str	r2, [r3]
1757:..\src/interruptions.c ****             
1758:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1759:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 5715              		.loc 1 1759 0
 5716 07ac B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 5717 07ae BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5718 07b0 1048     		ldr	r0, .L364
 5719 07b2 1346     		mov	r3, r2
 5720 07b4 DB00     		lsls	r3, r3, #3
 5721 07b6 9B1A     		subs	r3, r3, r2
 5722 07b8 1B01     		lsls	r3, r3, #4
 5723 07ba 0344     		add	r3, r3, r0
 5724 07bc E033     		adds	r3, r3, #224
 5725 07be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5726 07c0 0F4A     		ldr	r2, .L364+12
 5727 07c2 0B01     		lsls	r3, r1, #4
 5728 07c4 1344     		add	r3, r3, r2
 5729 07c6 0C33     		adds	r3, r3, #12
 5730 07c8 0246     		mov	r2, r0
 5731 07ca 1A70     		strb	r2, [r3]
1760:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 5732              		.loc 1 1760 0
 5733 07cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5734 07ce 0C4A     		ldr	r2, .L364+12
 5735 07d0 1B01     		lsls	r3, r3, #4
 5736 07d2 1344     		add	r3, r3, r2
 5737 07d4 0C33     		adds	r3, r3, #12
 5738 07d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5739 07d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5740 07da 1146     		mov	r1, r2
 5741 07dc 1846     		mov	r0, r3
 5742 07de FFF7FEFF 		bl	enable_motor
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 135


1761:..\src/interruptions.c ****                         
1762:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 5743              		.loc 1 1762 0
 5744 07e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5745 07e4 074A     		ldr	r2, .L364+16
 5746 07e6 0021     		movs	r1, #0
 5747 07e8 D154     		strb	r1, [r2, r3]
 5748 07ea 00E0     		b	.L324
 5749              	.L359:
1674:..\src/interruptions.c ****                 }
 5750              		.loc 1 1674 0
 5751 07ec 00BF     		nop
 5752              	.L324:
1763:..\src/interruptions.c ****         }
1764:..\src/interruptions.c ****     }
1765:..\src/interruptions.c ****  
1766:..\src/interruptions.c **** }
 5753              		.loc 1 1766 0
 5754 07ee 3437     		adds	r7, r7, #52
 5755              		.cfi_def_cfa_offset 20
 5756 07f0 BD46     		mov	sp, r7
 5757              		.cfi_def_cfa_register 13
 5758              		@ sp needed
 5759 07f2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5760              	.L365:
 5761              		.align	2
 5762              	.L364:
 5763 07f4 00000000 		.word	c_mem
 5764 07f8 F8000000 		.word	comp_value_encoder.10570
 5765 07fc 00000000 		.word	g_meas
 5766 0800 00000000 		.word	g_refNew
 5767 0804 68010000 		.word	safe_startup_motor_activation.10573
 5768 0808 60010000 		.word	pos_reconstruct.10576
 5769 080c 6C010000 		.word	count_startup_motor.10575
 5770              		.cfi_endproc
 5771              	.LFE72:
 5772              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 5773              		.section	.text.analog_read_end,"ax",%progbits
 5774              		.align	2
 5775              		.global	analog_read_end
 5776              		.thumb
 5777              		.thumb_func
 5778              		.type	analog_read_end, %function
 5779              	analog_read_end:
 5780              	.LFB73:
1767:..\src/interruptions.c **** 
1768:..\src/interruptions.c **** //==============================================================================
1769:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1770:..\src/interruptions.c **** //==============================================================================
1771:..\src/interruptions.c **** 
1772:..\src/interruptions.c **** void analog_read_end() {
 5781              		.loc 1 1772 0
 5782              		.cfi_startproc
 5783              		@ args = 0, pretend = 0, frame = 8
 5784              		@ frame_needed = 1, uses_anonymous_args = 0
 5785 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5786              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 136


 5787              		.cfi_offset 4, -20
 5788              		.cfi_offset 5, -16
 5789              		.cfi_offset 6, -12
 5790              		.cfi_offset 7, -8
 5791              		.cfi_offset 14, -4
 5792 0002 83B0     		sub	sp, sp, #12
 5793              		.cfi_def_cfa_offset 32
 5794 0004 00AF     		add	r7, sp, #0
 5795              		.cfi_def_cfa_register 7
1773:..\src/interruptions.c **** 
1774:..\src/interruptions.c ****     /* =========================================================================
1775:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1776:..\src/interruptions.c ****     /
1777:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1778:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1779:..\src/interruptions.c ****     /
1780:..\src/interruptions.c ****     /   Definition:
1781:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1782:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1783:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1784:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1785:..\src/interruptions.c ****     /
1786:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1787:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1788:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1789:..\src/interruptions.c ****     /  =========================================================================
1790:..\src/interruptions.c ****     */
1791:..\src/interruptions.c **** 
1792:..\src/interruptions.c ****     int32 CYDATA i_aux;
1793:..\src/interruptions.c **** 
1794:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1795:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1796:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1797:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1798:..\src/interruptions.c ****     static int32 UD_mean_value;
1799:..\src/interruptions.c ****     static int32 LR_mean_value;
1800:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1801:..\src/interruptions.c ****     //static int32 pow_tension = 12000;       //12000 mV (12 V)
1802:..\src/interruptions.c ****     static uint16 count = 0;
1803:..\src/interruptions.c ****     static uint32 v_count = 0;
1804:..\src/interruptions.c ****     static uint8 idx = 0;
1805:..\src/interruptions.c ****     
1806:..\src/interruptions.c ****     // Wait for conversion end
1807:..\src/interruptions.c ****     
1808:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 5796              		.loc 1 1808 0
 5797 0006 08E0     		b	.L367
 5798              	.L368:
1809:..\src/interruptions.c ****         
1810:..\src/interruptions.c ****         if (interrupt_flag){
 5799              		.loc 1 1810 0
 5800 0008 A84B     		ldr	r3, .L521
 5801 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5802 000c 002B     		cmp	r3, #0
 5803 000e 04D0     		beq	.L367
1811:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5804              		.loc 1 1811 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 137


 5805 0010 A64B     		ldr	r3, .L521
 5806 0012 0022     		movs	r2, #0
 5807 0014 1A70     		strb	r2, [r3]
1812:..\src/interruptions.c ****             interrupt_manager();
 5808              		.loc 1 1812 0
 5809 0016 FFF7FEFF 		bl	interrupt_manager
 5810              	.L367:
1808:..\src/interruptions.c ****         
 5811              		.loc 1 1808 0
 5812 001a FFF7FEFF 		bl	ADC_STATUS_Read
 5813 001e 0346     		mov	r3, r0
 5814 0020 002B     		cmp	r3, #0
 5815 0022 F1D0     		beq	.L368
1813:..\src/interruptions.c ****         }
1814:..\src/interruptions.c ****     }
1815:..\src/interruptions.c ****     
1816:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1817:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1818:..\src/interruptions.c ****         // Read pressure in any case
1819:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1820:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1821:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1822:..\src/interruptions.c ****     }
1823:..\src/interruptions.c **** #endif
1824:..\src/interruptions.c ****  
1825:..\src/interruptions.c ****     // Convert tension read
1826:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 5816              		.loc 1 1826 0
 5817 0024 A24B     		ldr	r3, .L521+4
 5818 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5819 002a 022B     		cmp	r3, #2
 5820 002c 04D1     		bne	.L369
1827:..\src/interruptions.c ****         dev_tension[0] = 5000;
 5821              		.loc 1 1827 0
 5822 002e A14B     		ldr	r3, .L521+8
 5823 0030 41F28832 		movw	r2, #5000
 5824 0034 1A60     		str	r2, [r3]
 5825 0036 0BE0     		b	.L370
 5826              	.L369:
1828:..\src/interruptions.c ****     }
1829:..\src/interruptions.c ****     else {
1830:..\src/interruptions.c ****         dev_tension[0] = ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 5827              		.loc 1 1830 0
 5828 0038 9F4B     		ldr	r3, .L521+12
 5829 003a B3F90030 		ldrsh	r3, [r3]
 5830 003e A3F25563 		subw	r3, r3, #1621
 5831 0042 40F2C672 		movw	r2, #1990
 5832 0046 02FB03F3 		mul	r3, r2, r3
 5833 004a DB11     		asrs	r3, r3, #7
 5834 004c 994A     		ldr	r2, .L521+8
 5835 004e 1360     		str	r3, [r2]
 5836              	.L370:
1831:..\src/interruptions.c ****     }
1832:..\src/interruptions.c ****     
1833:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1834:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 5837              		.loc 1 1834 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 138


 5838 0050 9A4B     		ldr	r3, .L521+16
 5839 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5840 0054 042B     		cmp	r3, #4
 5841 0056 0BD9     		bls	.L371
1835:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 5842              		.loc 1 1835 0
 5843 0058 974B     		ldr	r3, .L521+12
 5844 005a B3F90830 		ldrsh	r3, [r3, #8]
 5845 005e A3F25563 		subw	r3, r3, #1621
 5846 0062 40F2C672 		movw	r2, #1990
 5847 0066 02FB03F3 		mul	r3, r2, r3
 5848 006a DB11     		asrs	r3, r3, #7
 5849 006c 914A     		ldr	r2, .L521+8
 5850 006e 5360     		str	r3, [r2, #4]
 5851              	.L371:
1836:..\src/interruptions.c ****     }
1837:..\src/interruptions.c ****     
1838:..\src/interruptions.c ****     if (interrupt_flag){
 5852              		.loc 1 1838 0
 5853 0070 8E4B     		ldr	r3, .L521
 5854 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5855 0074 002B     		cmp	r3, #0
 5856 0076 04D0     		beq	.L372
1839:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 5857              		.loc 1 1839 0
 5858 0078 8C4B     		ldr	r3, .L521
 5859 007a 0022     		movs	r2, #0
 5860 007c 1A70     		strb	r2, [r3]
1840:..\src/interruptions.c ****         interrupt_manager();
 5861              		.loc 1 1840 0
 5862 007e FFF7FEFF 		bl	interrupt_manager
 5863              	.L372:
1841:..\src/interruptions.c ****     }
1842:..\src/interruptions.c ****     
1843:..\src/interruptions.c ****     // VOLTAGE READING
1844:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
1845:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
1846:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
1847:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
1848:..\src/interruptions.c ****     
1849:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 5864              		.loc 1 1849 0
 5865 0082 8F4B     		ldr	r3, .L521+20
 5866 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5867 0086 002B     		cmp	r3, #0
 5868 0088 4DD0     		beq	.L373
 5869              		.loc 1 1849 0 is_stmt 0 discriminator 1
 5870 008a 8E4B     		ldr	r3, .L521+24
 5871 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5872 008e 002B     		cmp	r3, #0
 5873 0090 49D0     		beq	.L373
1850:..\src/interruptions.c ****         count = count + 1;
 5874              		.loc 1 1850 0 is_stmt 1
 5875 0092 8D4B     		ldr	r3, .L521+28
 5876 0094 1B88     		ldrh	r3, [r3]
 5877 0096 0133     		adds	r3, r3, #1
 5878 0098 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 139


 5879 009a 8B4B     		ldr	r3, .L521+28
 5880 009c 1A80     		strh	r2, [r3]	@ movhi
1851:..\src/interruptions.c ****         
1852:..\src/interruptions.c ****         if (count == 1000){
 5881              		.loc 1 1852 0
 5882 009e 8A4B     		ldr	r3, .L521+28
 5883 00a0 1B88     		ldrh	r3, [r3]
 5884 00a2 B3F57A7F 		cmp	r3, #1000
 5885 00a6 3ED1     		bne	.L373
1853:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 5886              		.loc 1 1853 0
 5887 00a8 884B     		ldr	r3, .L521+32
 5888 00aa 0022     		movs	r2, #0
 5889 00ac 1A70     		strb	r2, [r3]
 5890 00ae 33E0     		b	.L374
 5891              	.L378:
1854:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5892              		.loc 1 1854 0
 5893 00b0 864B     		ldr	r3, .L521+32
 5894 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5895 00b4 1A46     		mov	r2, r3
 5896 00b6 7F4B     		ldr	r3, .L521+8
 5897 00b8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5898 00bc 42F22732 		movw	r2, #8999
 5899 00c0 9342     		cmp	r3, r2
 5900 00c2 08DC     		bgt	.L375
1855:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 5901              		.loc 1 1855 0
 5902 00c4 814B     		ldr	r3, .L521+32
 5903 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5904 00c8 1946     		mov	r1, r3
 5905 00ca 814B     		ldr	r3, .L521+36
 5906 00cc 4FF4FA52 		mov	r2, #8000
 5907 00d0 43F82120 		str	r2, [r3, r1, lsl #2]
 5908 00d4 1AE0     		b	.L376
 5909              	.L375:
1856:..\src/interruptions.c ****                 }
1857:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
1858:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 5910              		.loc 1 1858 0
 5911 00d6 7D4B     		ldr	r3, .L521+32
 5912 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5913 00da 1A46     		mov	r2, r3
 5914 00dc 754B     		ldr	r3, .L521+8
 5915 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5916 00e2 43F2C722 		movw	r2, #12999
 5917 00e6 9342     		cmp	r3, r2
 5918 00e8 08DC     		bgt	.L377
1859:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 5919              		.loc 1 1859 0
 5920 00ea 784B     		ldr	r3, .L521+32
 5921 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5922 00ee 1946     		mov	r1, r3
 5923 00f0 774B     		ldr	r3, .L521+36
 5924 00f2 42F6E062 		movw	r2, #12000
 5925 00f6 43F82120 		str	r2, [r3, r1, lsl #2]
 5926 00fa 07E0     		b	.L376
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 140


 5927              	.L377:
1860:..\src/interruptions.c ****                     }
1861:..\src/interruptions.c ****                     else
1862:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 5928              		.loc 1 1862 0
 5929 00fc 734B     		ldr	r3, .L521+32
 5930 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5931 0100 1946     		mov	r1, r3
 5932 0102 734B     		ldr	r3, .L521+36
 5933 0104 45F6C052 		movw	r2, #24000
 5934 0108 43F82120 		str	r2, [r3, r1, lsl #2]
 5935              	.L376:
1853:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5936              		.loc 1 1853 0 discriminator 2
 5937 010c 6F4B     		ldr	r3, .L521+32
 5938 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5939 0110 0133     		adds	r3, r3, #1
 5940 0112 DAB2     		uxtb	r2, r3
 5941 0114 6D4B     		ldr	r3, .L521+32
 5942 0116 1A70     		strb	r2, [r3]
 5943              	.L374:
1853:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 5944              		.loc 1 1853 0 is_stmt 0 discriminator 1
 5945 0118 6C4B     		ldr	r3, .L521+32
 5946 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5947 011c 012B     		cmp	r3, #1
 5948 011e C7D9     		bls	.L378
1863:..\src/interruptions.c ****                 }
1864:..\src/interruptions.c ****             }
1865:..\src/interruptions.c ****             first_tension_valid = FALSE;
 5949              		.loc 1 1865 0 is_stmt 1
 5950 0120 674B     		ldr	r3, .L521+20
 5951 0122 0022     		movs	r2, #0
 5952 0124 1A70     		strb	r2, [r3]
 5953              	.L373:
1866:..\src/interruptions.c ****         }
1867:..\src/interruptions.c ****     }
1868:..\src/interruptions.c **** 
1869:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
1870:..\src/interruptions.c **** 
1871:..\src/interruptions.c ****     if (dev_tension[0] < 7000 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 7000)) {       // Vol
 5954              		.loc 1 1871 0
 5955 0126 634B     		ldr	r3, .L521+8
 5956 0128 1B68     		ldr	r3, [r3]
 5957 012a 41F65732 		movw	r2, #6999
 5958 012e 9342     		cmp	r3, r2
 5959 0130 00F3F080 		bgt	.L379
 5960              		.loc 1 1871 0 is_stmt 0 discriminator 1
 5961 0134 614B     		ldr	r3, .L521+16
 5962 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5963 0138 042B     		cmp	r3, #4
 5964 013a 06D9     		bls	.L380
 5965              		.loc 1 1871 0 discriminator 2
 5966 013c 5D4B     		ldr	r3, .L521+8
 5967 013e 5B68     		ldr	r3, [r3, #4]
 5968 0140 41F65732 		movw	r2, #6999
 5969 0144 9342     		cmp	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 141


 5970 0146 00F3E580 		bgt	.L379
 5971              	.L380:
1872:..\src/interruptions.c ****         // PSoC is powered through uUSB
1873:..\src/interruptions.c ****         
1874:..\src/interruptions.c ****         tension_valid = FALSE;
 5972              		.loc 1 1874 0 is_stmt 1
 5973 014a 5E4B     		ldr	r3, .L521+24
 5974 014c 0022     		movs	r2, #0
 5975 014e 1A70     		strb	r2, [r3]
1875:..\src/interruptions.c ****             
1876:..\src/interruptions.c ****         if (interrupt_flag){
 5976              		.loc 1 1876 0
 5977 0150 564B     		ldr	r3, .L521
 5978 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5979 0154 002B     		cmp	r3, #0
 5980 0156 04D0     		beq	.L381
1877:..\src/interruptions.c ****             interrupt_flag = FALSE;
 5981              		.loc 1 1877 0
 5982 0158 544B     		ldr	r3, .L521
 5983 015a 0022     		movs	r2, #0
 5984 015c 1A70     		strb	r2, [r3]
1878:..\src/interruptions.c ****             interrupt_manager();
 5985              		.loc 1 1878 0
 5986 015e FFF7FEFF 		bl	interrupt_manager
 5987              	.L381:
1879:..\src/interruptions.c ****         }
1880:..\src/interruptions.c ****         
1881:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 5988              		.loc 1 1881 0
 5989 0162 5A4B     		ldr	r3, .L521+32
 5990 0164 0022     		movs	r2, #0
 5991 0166 1A70     		strb	r2, [r3]
 5992 0168 81E0     		b	.L382
 5993              	.L385:
1882:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 5994              		.loc 1 1882 0
 5995 016a 5A4B     		ldr	r3, .L521+40
 5996 016c 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 5997 0170 002B     		cmp	r3, #0
 5998 0172 59D0     		beq	.L383
1883:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 5999              		.loc 1 1883 0
 6000 0174 554B     		ldr	r3, .L521+32
 6001 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6002 0178 1946     		mov	r1, r3
 6003 017a 564A     		ldr	r2, .L521+40
 6004 017c 0B46     		mov	r3, r1
 6005 017e DB00     		lsls	r3, r3, #3
 6006 0180 5B1A     		subs	r3, r3, r1
 6007 0182 1B01     		lsls	r3, r3, #4
 6008 0184 1344     		add	r3, r3, r2
 6009 0186 03F58773 		add	r3, r3, #270
 6010 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6011 018c 022B     		cmp	r3, #2
 6012 018e 37D0     		beq	.L384
1884:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6013              		.loc 1 1884 0 discriminator 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 142


 6014 0190 4E4B     		ldr	r3, .L521+32
 6015 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6016 0194 1946     		mov	r1, r3
 6017 0196 4F4A     		ldr	r2, .L521+40
 6018 0198 0B46     		mov	r3, r1
 6019 019a DB00     		lsls	r3, r3, #3
 6020 019c 5B1A     		subs	r3, r3, r1
 6021 019e 1B01     		lsls	r3, r3, #4
 6022 01a0 1344     		add	r3, r3, r2
 6023 01a2 03F58773 		add	r3, r3, #270
 6024 01a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1883:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6025              		.loc 1 1883 0 discriminator 1
 6026 01a8 032B     		cmp	r3, #3
 6027 01aa 29D0     		beq	.L384
1885:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6028              		.loc 1 1885 0
 6029 01ac 474B     		ldr	r3, .L521+32
 6030 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6031 01b0 1946     		mov	r1, r3
 6032 01b2 484A     		ldr	r2, .L521+40
 6033 01b4 0B46     		mov	r3, r1
 6034 01b6 DB00     		lsls	r3, r3, #3
 6035 01b8 5B1A     		subs	r3, r3, r1
 6036 01ba 1B01     		lsls	r3, r3, #4
 6037 01bc 1344     		add	r3, r3, r2
 6038 01be 03F58773 		add	r3, r3, #270
 6039 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1884:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6040              		.loc 1 1884 0
 6041 01c4 042B     		cmp	r3, #4
 6042 01c6 1BD0     		beq	.L384
1886:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6043              		.loc 1 1886 0
 6044 01c8 404B     		ldr	r3, .L521+32
 6045 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6046 01cc 1946     		mov	r1, r3
 6047 01ce 414A     		ldr	r2, .L521+40
 6048 01d0 0B46     		mov	r3, r1
 6049 01d2 DB00     		lsls	r3, r3, #3
 6050 01d4 5B1A     		subs	r3, r3, r1
 6051 01d6 1B01     		lsls	r3, r3, #4
 6052 01d8 1344     		add	r3, r3, r2
 6053 01da 03F58773 		add	r3, r3, #270
 6054 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1885:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6055              		.loc 1 1885 0
 6056 01e0 052B     		cmp	r3, #5
 6057 01e2 0DD0     		beq	.L384
1887:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6058              		.loc 1 1887 0
 6059 01e4 394B     		ldr	r3, .L521+32
 6060 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6061 01e8 1946     		mov	r1, r3
 6062 01ea 3A4A     		ldr	r2, .L521+40
 6063 01ec 0B46     		mov	r3, r1
 6064 01ee DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 143


 6065 01f0 5B1A     		subs	r3, r3, r1
 6066 01f2 1B01     		lsls	r3, r3, #4
 6067 01f4 1344     		add	r3, r3, r2
 6068 01f6 03F58773 		add	r3, r3, #270
 6069 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1886:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6070              		.loc 1 1886 0
 6071 01fc 072B     		cmp	r3, #7
 6072 01fe 13D1     		bne	.L383
 6073              	.L384:
1888:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6074              		.loc 1 1888 0
 6075 0200 324B     		ldr	r3, .L521+32
 6076 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6077 0204 344A     		ldr	r2, .L521+44
 6078 0206 1B01     		lsls	r3, r3, #4
 6079 0208 1344     		add	r3, r3, r2
 6080 020a 0C33     		adds	r3, r3, #12
 6081 020c 0022     		movs	r2, #0
 6082 020e 1A70     		strb	r2, [r3]
1889:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6083              		.loc 1 1889 0
 6084 0210 2E4B     		ldr	r3, .L521+32
 6085 0212 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6086 0214 2D4B     		ldr	r3, .L521+32
 6087 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6088 0218 2F4A     		ldr	r2, .L521+44
 6089 021a 1B01     		lsls	r3, r3, #4
 6090 021c 1344     		add	r3, r3, r2
 6091 021e 0C33     		adds	r3, r3, #12
 6092 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6093 0222 1946     		mov	r1, r3
 6094 0224 FFF7FEFF 		bl	enable_motor
 6095              	.L383:
1890:..\src/interruptions.c ****                     
1891:..\src/interruptions.c ****                 }
1892:..\src/interruptions.c ****             }
1893:..\src/interruptions.c **** 
1894:..\src/interruptions.c ****             // Assign dev_tension and reset current
1895:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6096              		.loc 1 1895 0 discriminator 2
 6097 0228 284B     		ldr	r3, .L521+32
 6098 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6099 022c 1946     		mov	r1, r3
 6100 022e 214B     		ldr	r3, .L521+8
 6101 0230 41F28832 		movw	r2, #5000
 6102 0234 43F82120 		str	r2, [r3, r1, lsl #2]
1896:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6103              		.loc 1 1896 0 discriminator 2
 6104 0238 244B     		ldr	r3, .L521+32
 6105 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6106 023c 1946     		mov	r1, r3
 6107 023e 1C4A     		ldr	r2, .L521+4
 6108 0240 0B46     		mov	r3, r1
 6109 0242 DB00     		lsls	r3, r3, #3
 6110 0244 5B1A     		subs	r3, r3, r1
 6111 0246 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 144


 6112 0248 1344     		add	r3, r3, r2
 6113 024a 03F58873 		add	r3, r3, #272
 6114 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6115 0250 1946     		mov	r1, r3
 6116 0252 224A     		ldr	r2, .L521+48
 6117 0254 3423     		movs	r3, #52
 6118 0256 03FB01F3 		mul	r3, r3, r1
 6119 025a 1344     		add	r3, r3, r2
 6120 025c 0C33     		adds	r3, r3, #12
 6121 025e 0022     		movs	r2, #0
 6122 0260 1A60     		str	r2, [r3]
1881:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6123              		.loc 1 1881 0 discriminator 2
 6124 0262 1A4B     		ldr	r3, .L521+32
 6125 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6126 0266 0133     		adds	r3, r3, #1
 6127 0268 DAB2     		uxtb	r2, r3
 6128 026a 184B     		ldr	r3, .L521+32
 6129 026c 1A70     		strb	r2, [r3]
 6130              	.L382:
1881:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6131              		.loc 1 1881 0 is_stmt 0 discriminator 1
 6132 026e 174B     		ldr	r3, .L521+32
 6133 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6134 0272 012B     		cmp	r3, #1
 6135 0274 7FF679AF 		bls	.L385
1897:..\src/interruptions.c ****         }
1898:..\src/interruptions.c ****         
1899:..\src/interruptions.c ****         // Reset emg
1900:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6136              		.loc 1 1900 0 is_stmt 1
 6137 0278 144B     		ldr	r3, .L521+32
 6138 027a 0022     		movs	r2, #0
 6139 027c 1A70     		strb	r2, [r3]
 6140 027e 0CE0     		b	.L386
 6141              	.L387:
1901:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6142              		.loc 1 1901 0 discriminator 3
 6143 0280 124B     		ldr	r3, .L521+32
 6144 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6145 0284 1946     		mov	r1, r3
 6146 0286 164B     		ldr	r3, .L521+52
 6147 0288 0022     		movs	r2, #0
 6148 028a 43F82120 		str	r2, [r3, r1, lsl #2]
1900:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6149              		.loc 1 1900 0 discriminator 3
 6150 028e 0F4B     		ldr	r3, .L521+32
 6151 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6152 0292 0133     		adds	r3, r3, #1
 6153 0294 DAB2     		uxtb	r2, r3
 6154 0296 0D4B     		ldr	r3, .L521+32
 6155 0298 1A70     		strb	r2, [r3]
 6156              	.L386:
1900:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6157              		.loc 1 1900 0 is_stmt 0 discriminator 1
 6158 029a 0C4B     		ldr	r3, .L521+32
 6159 029c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 145


 6160 029e 012B     		cmp	r3, #1
 6161 02a0 EED9     		bls	.L387
1902:..\src/interruptions.c ****         }
1903:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6162              		.loc 1 1903 0 is_stmt 1
 6163 02a2 0A4B     		ldr	r3, .L521+32
 6164 02a4 0022     		movs	r2, #0
 6165 02a6 1A70     		strb	r2, [r3]
 6166 02a8 29E0     		b	.L388
 6167              	.L522:
 6168 02aa 00BF     		.align	2
 6169              	.L521:
 6170 02ac 00000000 		.word	interrupt_flag
 6171 02b0 00000000 		.word	g_mem
 6172 02b4 00000000 		.word	dev_tension
 6173 02b8 00000000 		.word	ADC_buf
 6174 02bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6175 02c0 06000000 		.word	first_tension_valid.10602
 6176 02c4 00000000 		.word	tension_valid
 6177 02c8 74010000 		.word	count.10603
 6178 02cc 76010000 		.word	idx.10605
 6179 02d0 00000000 		.word	pow_tension
 6180 02d4 00000000 		.word	c_mem
 6181 02d8 00000000 		.word	g_ref
 6182 02dc 00000000 		.word	g_meas
 6183 02e0 00000000 		.word	g_adc_meas
 6184              	.L390:
1904:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6185              		.loc 1 1904 0 discriminator 4
 6186 02e4 A74B     		ldr	r3, .L523
 6187 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6188 02e8 A74A     		ldr	r2, .L523+4
 6189 02ea 0233     		adds	r3, r3, #2
 6190 02ec 0021     		movs	r1, #0
 6191 02ee 42F82310 		str	r1, [r2, r3, lsl #2]
1903:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6192              		.loc 1 1903 0 discriminator 4
 6193 02f2 A44B     		ldr	r3, .L523
 6194 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6195 02f6 0133     		adds	r3, r3, #1
 6196 02f8 DAB2     		uxtb	r2, r3
 6197 02fa A24B     		ldr	r3, .L523
 6198 02fc 1A70     		strb	r2, [r3]
 6199              	.L388:
1903:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6200              		.loc 1 1903 0 is_stmt 0 discriminator 1
 6201 02fe A34B     		ldr	r3, .L523+8
 6202 0300 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 6203 0304 002B     		cmp	r3, #0
 6204 0306 00F0EF81 		beq	.L503
1903:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6205              		.loc 1 1903 0 discriminator 3
 6206 030a 9E4B     		ldr	r3, .L523
 6207 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6208 030e 052B     		cmp	r3, #5
 6209 0310 E8D9     		bls	.L390
1871:..\src/interruptions.c ****         // PSoC is powered through uUSB
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 146


 6210              		.loc 1 1871 0 is_stmt 1
 6211 0312 E9E1     		b	.L503
 6212              	.L379:
1905:..\src/interruptions.c ****         }
1906:..\src/interruptions.c ****         
1907:..\src/interruptions.c ****     }
1908:..\src/interruptions.c ****     else {
1909:..\src/interruptions.c ****         // PSoC is powered through battery or power source
1910:..\src/interruptions.c ****         // (at least > 7.36 V (92% of 8 V) that is minimum charge of smallest battery)
1911:..\src/interruptions.c ****         
1912:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
1913:..\src/interruptions.c ****         
1914:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6213              		.loc 1 1914 0
 6214 0314 9E4B     		ldr	r3, .L523+12
 6215 0316 1B68     		ldr	r3, [r3]
 6216 0318 B3F57A7F 		cmp	r3, #1000
 6217 031c 0DD1     		bne	.L392
 6218              		.loc 1 1914 0 is_stmt 0 discriminator 1
 6219 031e 9D4B     		ldr	r3, .L523+16
 6220 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6221 0322 002B     		cmp	r3, #0
 6222 0324 09D1     		bne	.L392
1915:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
1916:..\src/interruptions.c ****             tension_valid = TRUE;   
 6223              		.loc 1 1916 0 is_stmt 1
 6224 0326 9B4B     		ldr	r3, .L523+16
 6225 0328 0122     		movs	r2, #1
 6226 032a 1A70     		strb	r2, [r3]
1917:..\src/interruptions.c ****             count = 0;
 6227              		.loc 1 1917 0
 6228 032c 9A4B     		ldr	r3, .L523+20
 6229 032e 0022     		movs	r2, #0
 6230 0330 1A80     		strh	r2, [r3]	@ movhi
1918:..\src/interruptions.c ****             v_count = 0;
 6231              		.loc 1 1918 0
 6232 0332 974B     		ldr	r3, .L523+12
 6233 0334 0022     		movs	r2, #0
 6234 0336 1A60     		str	r2, [r3]
 6235 0338 2CE0     		b	.L393
 6236              	.L392:
1919:..\src/interruptions.c ****         }
1920:..\src/interruptions.c ****         else {  
1921:..\src/interruptions.c ****             // wait for battery voltage stabilization
1922:..\src/interruptions.c ****             if (v_count < 1000) {
 6237              		.loc 1 1922 0
 6238 033a 954B     		ldr	r3, .L523+12
 6239 033c 1B68     		ldr	r3, [r3]
 6240 033e B3F57A7F 		cmp	r3, #1000
 6241 0342 04D2     		bcs	.L394
1923:..\src/interruptions.c ****                 v_count = v_count + 1;
 6242              		.loc 1 1923 0
 6243 0344 924B     		ldr	r3, .L523+12
 6244 0346 1B68     		ldr	r3, [r3]
 6245 0348 0133     		adds	r3, r3, #1
 6246 034a 914A     		ldr	r2, .L523+12
 6247 034c 1360     		str	r3, [r2]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 147


 6248              	.L394:
1924:..\src/interruptions.c ****             }
1925:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6249              		.loc 1 1925 0
 6250 034e 8D4B     		ldr	r3, .L523
 6251 0350 0022     		movs	r2, #0
 6252 0352 1A70     		strb	r2, [r3]
 6253 0354 1AE0     		b	.L395
 6254              	.L396:
1926:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6255              		.loc 1 1926 0 discriminator 3
 6256 0356 8B4B     		ldr	r3, .L523
 6257 0358 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6258 035a 1C46     		mov	r4, r3
 6259 035c 894B     		ldr	r3, .L523
 6260 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6261 0360 1A46     		mov	r2, r3
 6262 0362 8E4B     		ldr	r3, .L523+24
 6263 0364 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6264 0368 864B     		ldr	r3, .L523
 6265 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6266 036c DB00     		lsls	r3, r3, #3
 6267 036e 8C4A     		ldr	r2, .L523+28
 6268 0370 1344     		add	r3, r3, r2
 6269 0372 1946     		mov	r1, r3
 6270 0374 FFF7FEFF 		bl	filter
 6271 0378 0246     		mov	r2, r0
 6272 037a 8A4B     		ldr	r3, .L523+32
 6273 037c 43F82420 		str	r2, [r3, r4, lsl #2]
1925:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6274              		.loc 1 1925 0 discriminator 3
 6275 0380 804B     		ldr	r3, .L523
 6276 0382 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6277 0384 0133     		adds	r3, r3, #1
 6278 0386 DAB2     		uxtb	r2, r3
 6279 0388 7E4B     		ldr	r3, .L523
 6280 038a 1A70     		strb	r2, [r3]
 6281              	.L395:
1925:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6282              		.loc 1 1925 0 is_stmt 0 discriminator 1
 6283 038c 7D4B     		ldr	r3, .L523
 6284 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6285 0390 012B     		cmp	r3, #1
 6286 0392 E0D9     		bls	.L396
 6287              	.L393:
1927:..\src/interruptions.c ****             }
1928:..\src/interruptions.c ****         }
1929:..\src/interruptions.c **** 
1930:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6288              		.loc 1 1930 0 is_stmt 1
 6289 0394 7B4B     		ldr	r3, .L523
 6290 0396 0022     		movs	r2, #0
 6291 0398 1A70     		strb	r2, [r3]
 6292 039a 17E0     		b	.L397
 6293              	.L399:
1931:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6294              		.loc 1 1931 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 148


 6295 039c 794B     		ldr	r3, .L523
 6296 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6297 03a0 1946     		mov	r1, r3
 6298 03a2 814A     		ldr	r2, .L523+36
 6299 03a4 0B46     		mov	r3, r1
 6300 03a6 DB00     		lsls	r3, r3, #3
 6301 03a8 5B1A     		subs	r3, r3, r1
 6302 03aa 1B01     		lsls	r3, r3, #4
 6303 03ac 1344     		add	r3, r3, r2
 6304 03ae E133     		adds	r3, r3, #225
 6305 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6306 03b2 002B     		cmp	r3, #0
 6307 03b4 04D0     		beq	.L398
1932:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6308              		.loc 1 1932 0
 6309 03b6 734B     		ldr	r3, .L523
 6310 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6311 03ba 1846     		mov	r0, r3
 6312 03bc FFF7FEFF 		bl	pwm_limit_search
 6313              	.L398:
1930:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6314              		.loc 1 1930 0 discriminator 2
 6315 03c0 704B     		ldr	r3, .L523
 6316 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6317 03c4 0133     		adds	r3, r3, #1
 6318 03c6 DAB2     		uxtb	r2, r3
 6319 03c8 6E4B     		ldr	r3, .L523
 6320 03ca 1A70     		strb	r2, [r3]
 6321              	.L397:
1930:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6322              		.loc 1 1930 0 is_stmt 0 discriminator 1
 6323 03cc 6D4B     		ldr	r3, .L523
 6324 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6325 03d0 012B     		cmp	r3, #1
 6326 03d2 E3D9     		bls	.L399
1933:..\src/interruptions.c ****         }
1934:..\src/interruptions.c ****         
1935:..\src/interruptions.c ****         // Filter and Set currents
1936:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) { // [GS]
 6327              		.loc 1 1936 0 is_stmt 1
 6328 03d4 744B     		ldr	r3, .L523+36
 6329 03d6 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6330 03da 002B     		cmp	r3, #0
 6331 03dc 21D1     		bne	.L400
1937:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6332              		.loc 1 1937 0
 6333 03de 724B     		ldr	r3, .L523+36
 6334 03e0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6335 03e4 1C46     		mov	r4, r3
 6336 03e6 714B     		ldr	r3, .L523+40
 6337 03e8 B3F90230 		ldrsh	r3, [r3, #2]
 6338 03ec A3F5CE63 		sub	r3, r3, #1648
 6339 03f0 45F66A02 		movw	r2, #22634
 6340 03f4 02FB03F3 		mul	r3, r2, r3
 6341 03f8 5B13     		asrs	r3, r3, #13
 6342 03fa 1BB2     		sxth	r3, r3
 6343 03fc 1A46     		mov	r2, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 149


 6344 03fe 6C4B     		ldr	r3, .L523+44
 6345 0400 93F90030 		ldrsb	r3, [r3]
 6346 0404 03FB02F3 		mul	r3, r3, r2
 6347 0408 6A49     		ldr	r1, .L523+48
 6348 040a 1846     		mov	r0, r3
 6349 040c FFF7FEFF 		bl	filter
 6350 0410 0146     		mov	r1, r0
 6351 0412 694A     		ldr	r2, .L523+52
 6352 0414 3423     		movs	r3, #52
 6353 0416 03FB04F3 		mul	r3, r3, r4
 6354 041a 1344     		add	r3, r3, r2
 6355 041c 0C33     		adds	r3, r3, #12
 6356 041e 1960     		str	r1, [r3]
 6357 0420 1BE0     		b	.L401
 6358              	.L400:
1938:..\src/interruptions.c ****         } else { // [GS]
1939:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 480)
 6359              		.loc 1 1939 0
 6360 0422 614B     		ldr	r3, .L523+36
 6361 0424 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6362 0428 1846     		mov	r0, r3
 6363 042a 604B     		ldr	r3, .L523+40
 6364 042c B3F90230 		ldrsh	r3, [r3, #2]
 6365 0430 A3F26362 		subw	r2, r3, #1635
 6366 0434 1346     		mov	r3, r2
 6367 0436 1B01     		lsls	r3, r3, #4
 6368 0438 9B1A     		subs	r3, r3, r2
 6369 043a 5B01     		lsls	r3, r3, #5
 6370 043c 1B11     		asrs	r3, r3, #4
 6371 043e 1BB2     		sxth	r3, r3
 6372 0440 1A46     		mov	r2, r3
 6373 0442 5B4B     		ldr	r3, .L523+44
 6374 0444 93F90030 		ldrsb	r3, [r3]
 6375 0448 03FB02F2 		mul	r2, r3, r2
 6376 044c 5A49     		ldr	r1, .L523+52
 6377 044e 3423     		movs	r3, #52
 6378 0450 03FB00F3 		mul	r3, r3, r0
 6379 0454 0B44     		add	r3, r3, r1
 6380 0456 0C33     		adds	r3, r3, #12
 6381 0458 1A60     		str	r2, [r3]
 6382              	.L401:
1940:..\src/interruptions.c ****         }  
1941:..\src/interruptions.c **** 
1942:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
1943:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 6383              		.loc 1 1943 0
 6384 045a 534B     		ldr	r3, .L523+36
 6385 045c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6386 0460 1D46     		mov	r5, r3
 6387 0462 514B     		ldr	r3, .L523+36
 6388 0464 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6389 0468 1946     		mov	r1, r3
 6390 046a 534A     		ldr	r2, .L523+52
 6391 046c 3423     		movs	r3, #52
 6392 046e 03FB01F3 		mul	r3, r3, r1
 6393 0472 1344     		add	r3, r3, r2
 6394 0474 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 150


 6395 0476 1C68     		ldr	r4, [r3]
 6396 0478 4B4B     		ldr	r3, .L523+36
 6397 047a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6398 047e 1946     		mov	r1, r3
 6399 0480 4D4A     		ldr	r2, .L523+52
 6400 0482 3423     		movs	r3, #52
 6401 0484 03FB01F3 		mul	r3, r3, r1
 6402 0488 1344     		add	r3, r3, r2
 6403 048a 1A68     		ldr	r2, [r3]
 6404 048c 464B     		ldr	r3, .L523+36
 6405 048e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6406 0492 1846     		mov	r0, r3
 6407 0494 4449     		ldr	r1, .L523+36
 6408 0496 0346     		mov	r3, r0
 6409 0498 5B00     		lsls	r3, r3, #1
 6410 049a 0344     		add	r3, r3, r0
 6411 049c 1B01     		lsls	r3, r3, #4
 6412 049e 0B44     		add	r3, r3, r1
 6413 04a0 03F29513 		addw	r3, r3, #405
 6414 04a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6415 04a6 42FA03F6 		asr	r6, r2, r3
 6416 04aa 3F4B     		ldr	r3, .L523+36
 6417 04ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6418 04b0 1946     		mov	r1, r3
 6419 04b2 414A     		ldr	r2, .L523+52
 6420 04b4 3423     		movs	r3, #52
 6421 04b6 03FB01F3 		mul	r3, r3, r1
 6422 04ba 1344     		add	r3, r3, r2
 6423 04bc 1C33     		adds	r3, r3, #28
 6424 04be 1A68     		ldr	r2, [r3]
 6425 04c0 394B     		ldr	r3, .L523+36
 6426 04c2 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6427 04c6 1846     		mov	r0, r3
 6428 04c8 3749     		ldr	r1, .L523+36
 6429 04ca 0346     		mov	r3, r0
 6430 04cc 5B00     		lsls	r3, r3, #1
 6431 04ce 0344     		add	r3, r3, r0
 6432 04d0 1B01     		lsls	r3, r3, #4
 6433 04d2 0B44     		add	r3, r3, r1
 6434 04d4 03F29513 		addw	r3, r3, #405
 6435 04d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6436 04da 42FA03FE 		asr	lr, r2, r3
 6437 04de 374B     		ldr	r3, .L523+56
 6438 04e0 1A68     		ldr	r2, [r3]
 6439 04e2 314B     		ldr	r3, .L523+36
 6440 04e4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6441 04e8 1846     		mov	r0, r3
 6442 04ea 2F49     		ldr	r1, .L523+36
 6443 04ec 0346     		mov	r3, r0
 6444 04ee 5B00     		lsls	r3, r3, #1
 6445 04f0 0344     		add	r3, r3, r0
 6446 04f2 1B01     		lsls	r3, r3, #4
 6447 04f4 0B44     		add	r3, r3, r1
 6448 04f6 03F29513 		addw	r3, r3, #405
 6449 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6450 04fc 42FA03F3 		asr	r3, r2, r3
 6451 0500 7246     		mov	r2, lr
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 151


 6452 0502 3146     		mov	r1, r6
 6453 0504 0020     		movs	r0, #0
 6454 0506 FFF7FEFF 		bl	curr_estim
 6455 050a 0346     		mov	r3, r0
 6456 050c E31A     		subs	r3, r4, r3
 6457 050e 2C49     		ldr	r1, .L523+60
 6458 0510 1846     		mov	r0, r3
 6459 0512 FFF7FEFF 		bl	filter
 6460 0516 0346     		mov	r3, r0
 6461 0518 1BB2     		sxth	r3, r3
 6462 051a 1946     		mov	r1, r3
 6463 051c 264A     		ldr	r2, .L523+52
 6464 051e 3423     		movs	r3, #52
 6465 0520 03FB05F3 		mul	r3, r3, r5
 6466 0524 1344     		add	r3, r3, r2
 6467 0526 1033     		adds	r3, r3, #16
 6468 0528 1960     		str	r1, [r3]
1944:..\src/interruptions.c ****         
1945:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
1946:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 6469              		.loc 1 1946 0
 6470 052a 264B     		ldr	r3, .L523+64
 6471 052c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6472 052e 042B     		cmp	r3, #4
 6473 0530 40F2D080 		bls	.L402
1947:..\src/interruptions.c ****             // Filter and Set currents
1948:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) { // [GS]
 6474              		.loc 1 1948 0
 6475 0534 1C4B     		ldr	r3, .L523+36
 6476 0536 93F85231 		ldrb	r3, [r3, #338]	@ zero_extendqisi2
 6477 053a 002B     		cmp	r3, #0
 6478 053c 46D1     		bne	.L403
1949:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 6479              		.loc 1 1949 0
 6480 053e 1A4B     		ldr	r3, .L523+36
 6481 0540 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6482 0544 1C46     		mov	r4, r3
 6483 0546 194B     		ldr	r3, .L523+40
 6484 0548 B3F90A30 		ldrsh	r3, [r3, #10]
 6485 054c A3F5CE63 		sub	r3, r3, #1648
 6486 0550 45F66A02 		movw	r2, #22634
 6487 0554 02FB03F3 		mul	r3, r2, r3
 6488 0558 5B13     		asrs	r3, r3, #13
 6489 055a 1BB2     		sxth	r3, r3
 6490 055c 1A46     		mov	r2, r3
 6491 055e 144B     		ldr	r3, .L523+44
 6492 0560 93F90030 		ldrsb	r3, [r3]
 6493 0564 03FB02F3 		mul	r3, r3, r2
 6494 0568 1749     		ldr	r1, .L523+68
 6495 056a 1846     		mov	r0, r3
 6496 056c FFF7FEFF 		bl	filter
 6497 0570 0146     		mov	r1, r0
 6498 0572 114A     		ldr	r2, .L523+52
 6499 0574 3423     		movs	r3, #52
 6500 0576 03FB04F3 		mul	r3, r3, r4
 6501 057a 1344     		add	r3, r3, r2
 6502 057c 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 152


 6503 057e 1960     		str	r1, [r3]
 6504 0580 40E0     		b	.L404
 6505              	.L524:
 6506 0582 00BF     		.align	2
 6507              	.L523:
 6508 0584 76010000 		.word	idx.10605
 6509 0588 00000000 		.word	g_adc_meas
 6510 058c 00000000 		.word	c_mem
 6511 0590 78010000 		.word	v_count.10604
 6512 0594 00000000 		.word	tension_valid
 6513 0598 74010000 		.word	count.10603
 6514 059c 00000000 		.word	dev_tension
 6515 05a0 00000000 		.word	filt_v
 6516 05a4 00000000 		.word	dev_tension_f
 6517 05a8 00000000 		.word	g_mem
 6518 05ac 00000000 		.word	ADC_buf
 6519 05b0 00000000 		.word	pwm_sign
 6520 05b4 00000000 		.word	filt_i
 6521 05b8 00000000 		.word	g_meas
 6522 05bc 00000000 		.word	g_ref
 6523 05c0 00000000 		.word	filt_curr_diff
 6524 05c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6525 05c8 08000000 		.word	filt_i+8
 6526              	.L403:
1950:..\src/interruptions.c ****             } else { // [GS]
1951:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635) * 
 6527              		.loc 1 1951 0
 6528 05cc 954B     		ldr	r3, .L525
 6529 05ce 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6530 05d2 1846     		mov	r0, r3
 6531 05d4 944B     		ldr	r3, .L525+4
 6532 05d6 B3F90A30 		ldrsh	r3, [r3, #10]
 6533 05da A3F26362 		subw	r2, r3, #1635
 6534 05de 1346     		mov	r3, r2
 6535 05e0 1B01     		lsls	r3, r3, #4
 6536 05e2 9B1A     		subs	r3, r3, r2
 6537 05e4 5B01     		lsls	r3, r3, #5
 6538 05e6 1B11     		asrs	r3, r3, #4
 6539 05e8 1BB2     		sxth	r3, r3
 6540 05ea 1A46     		mov	r2, r3
 6541 05ec 8F4B     		ldr	r3, .L525+8
 6542 05ee 93F90030 		ldrsb	r3, [r3]
 6543 05f2 03FB02F2 		mul	r2, r3, r2
 6544 05f6 8E49     		ldr	r1, .L525+12
 6545 05f8 3423     		movs	r3, #52
 6546 05fa 03FB00F3 		mul	r3, r3, r0
 6547 05fe 0B44     		add	r3, r3, r1
 6548 0600 0C33     		adds	r3, r3, #12
 6549 0602 1A60     		str	r2, [r3]
 6550              	.L404:
1952:..\src/interruptions.c ****             }  
1953:..\src/interruptions.c ****             //g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 1648
1954:..\src/interruptions.c ****             
1955:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 6551              		.loc 1 1955 0
 6552 0604 874B     		ldr	r3, .L525
 6553 0606 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 153


 6554 060a 1D46     		mov	r5, r3
 6555 060c 854B     		ldr	r3, .L525
 6556 060e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6557 0612 1946     		mov	r1, r3
 6558 0614 864A     		ldr	r2, .L525+12
 6559 0616 3423     		movs	r3, #52
 6560 0618 03FB01F3 		mul	r3, r3, r1
 6561 061c 1344     		add	r3, r3, r2
 6562 061e 0C33     		adds	r3, r3, #12
 6563 0620 1C68     		ldr	r4, [r3]
 6564 0622 804B     		ldr	r3, .L525
 6565 0624 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6566 0628 1946     		mov	r1, r3
 6567 062a 814A     		ldr	r2, .L525+12
 6568 062c 3423     		movs	r3, #52
 6569 062e 03FB01F3 		mul	r3, r3, r1
 6570 0632 1344     		add	r3, r3, r2
 6571 0634 1A68     		ldr	r2, [r3]
 6572 0636 7B4B     		ldr	r3, .L525
 6573 0638 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6574 063c 1846     		mov	r0, r3
 6575 063e 7949     		ldr	r1, .L525
 6576 0640 0346     		mov	r3, r0
 6577 0642 5B00     		lsls	r3, r3, #1
 6578 0644 0344     		add	r3, r3, r0
 6579 0646 1B01     		lsls	r3, r3, #4
 6580 0648 0B44     		add	r3, r3, r1
 6581 064a 03F29513 		addw	r3, r3, #405
 6582 064e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6583 0650 42FA03F6 		asr	r6, r2, r3
 6584 0654 734B     		ldr	r3, .L525
 6585 0656 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6586 065a 1946     		mov	r1, r3
 6587 065c 744A     		ldr	r2, .L525+12
 6588 065e 3423     		movs	r3, #52
 6589 0660 03FB01F3 		mul	r3, r3, r1
 6590 0664 1344     		add	r3, r3, r2
 6591 0666 1C33     		adds	r3, r3, #28
 6592 0668 1A68     		ldr	r2, [r3]
 6593 066a 6E4B     		ldr	r3, .L525
 6594 066c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6595 0670 1846     		mov	r0, r3
 6596 0672 6C49     		ldr	r1, .L525
 6597 0674 0346     		mov	r3, r0
 6598 0676 5B00     		lsls	r3, r3, #1
 6599 0678 0344     		add	r3, r3, r0
 6600 067a 1B01     		lsls	r3, r3, #4
 6601 067c 0B44     		add	r3, r3, r1
 6602 067e 03F29513 		addw	r3, r3, #405
 6603 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6604 0684 42FA03FE 		asr	lr, r2, r3
 6605 0688 6A4B     		ldr	r3, .L525+16
 6606 068a 1A69     		ldr	r2, [r3, #16]
 6607 068c 654B     		ldr	r3, .L525
 6608 068e 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 6609 0692 1846     		mov	r0, r3
 6610 0694 6349     		ldr	r1, .L525
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 154


 6611 0696 0346     		mov	r3, r0
 6612 0698 5B00     		lsls	r3, r3, #1
 6613 069a 0344     		add	r3, r3, r0
 6614 069c 1B01     		lsls	r3, r3, #4
 6615 069e 0B44     		add	r3, r3, r1
 6616 06a0 03F29513 		addw	r3, r3, #405
 6617 06a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6618 06a6 42FA03F3 		asr	r3, r2, r3
 6619 06aa 7246     		mov	r2, lr
 6620 06ac 3146     		mov	r1, r6
 6621 06ae 0120     		movs	r0, #1
 6622 06b0 FFF7FEFF 		bl	curr_estim
 6623 06b4 0346     		mov	r3, r0
 6624 06b6 E31A     		subs	r3, r4, r3
 6625 06b8 5F49     		ldr	r1, .L525+20
 6626 06ba 1846     		mov	r0, r3
 6627 06bc FFF7FEFF 		bl	filter
 6628 06c0 0346     		mov	r3, r0
 6629 06c2 1BB2     		sxth	r3, r3
 6630 06c4 1946     		mov	r1, r3
 6631 06c6 5A4A     		ldr	r2, .L525+12
 6632 06c8 3423     		movs	r3, #52
 6633 06ca 03FB05F3 		mul	r3, r3, r5
 6634 06ce 1344     		add	r3, r3, r2
 6635 06d0 1033     		adds	r3, r3, #16
 6636 06d2 1960     		str	r1, [r3]
 6637              	.L402:
1956:..\src/interruptions.c ****         }
1957:..\src/interruptions.c ****     
1958:..\src/interruptions.c ****         // Check Interrupt 
1959:..\src/interruptions.c ****     
1960:..\src/interruptions.c ****         if (interrupt_flag){
 6638              		.loc 1 1960 0
 6639 06d4 594B     		ldr	r3, .L525+24
 6640 06d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6641 06d8 002B     		cmp	r3, #0
 6642 06da 06D0     		beq	.L391
1961:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6643              		.loc 1 1961 0
 6644 06dc 574B     		ldr	r3, .L525+24
 6645 06de 0022     		movs	r2, #0
 6646 06e0 1A70     		strb	r2, [r3]
1962:..\src/interruptions.c ****             interrupt_manager();
 6647              		.loc 1 1962 0
 6648 06e2 FFF7FEFF 		bl	interrupt_manager
 6649 06e6 00E0     		b	.L391
 6650              	.L503:
1871:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6651              		.loc 1 1871 0
 6652 06e8 00BF     		nop
 6653              	.L391:
1963:..\src/interruptions.c ****         }
1964:..\src/interruptions.c **** 
1965:..\src/interruptions.c ****     }
1966:..\src/interruptions.c ****     
1967:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
1968:..\src/interruptions.c ****         
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 155


1969:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
1970:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 6654              		.loc 1 1970 0
 6655 06ea 554B     		ldr	r3, .L525+28
 6656 06ec 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 6657 06f0 002B     		cmp	r3, #0
 6658 06f2 05D1     		bne	.L405
1971:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 6659              		.loc 1 1971 0
 6660 06f4 534B     		ldr	r3, .L525+32
 6661 06f6 0022     		movs	r2, #0
 6662 06f8 1A70     		strb	r2, [r3]
1972:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 6663              		.loc 1 1972 0
 6664 06fa 534B     		ldr	r3, .L525+36
 6665 06fc 0022     		movs	r2, #0
 6666 06fe 1A70     		strb	r2, [r3]
 6667              	.L405:
1973:..\src/interruptions.c ****     }
1974:..\src/interruptions.c **** 
1975:..\src/interruptions.c ****     // EMG 1 calibration state machine
1976:..\src/interruptions.c ****    
1977:..\src/interruptions.c ****     // Calibration state machine
1978:..\src/interruptions.c ****     switch(emg_1_status) {
 6668              		.loc 1 1978 0
 6669 0700 504B     		ldr	r3, .L525+32
 6670 0702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6671 0704 032B     		cmp	r3, #3
 6672 0706 00F2FC80 		bhi	.L504
 6673 070a 01A2     		adr	r2, .L408
 6674 070c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6675              		.p2align 2
 6676              	.L408:
 6677 0710 21070000 		.word	.L407+1
 6678 0714 D1070000 		.word	.L409+1
 6679 0718 E7070000 		.word	.L410+1
 6680 071c 59080000 		.word	.L411+1
 6681              		.p2align 1
 6682              	.L407:
1979:..\src/interruptions.c ****         case NORMAL: // normal execution
1980:..\src/interruptions.c ****             
1981:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 6683              		.loc 1 1981 0
 6684 0720 404B     		ldr	r3, .L525
 6685 0722 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6686 0726 022B     		cmp	r3, #2
 6687 0728 13D0     		beq	.L412
 6688              		.loc 1 1981 0 is_stmt 0 discriminator 1
 6689 072a 3E4B     		ldr	r3, .L525
 6690 072c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6691 0730 032B     		cmp	r3, #3
 6692 0732 0ED0     		beq	.L412
1982:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6693              		.loc 1 1982 0 is_stmt 1
 6694 0734 424B     		ldr	r3, .L525+28
 6695 0736 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6696 073a 0233     		adds	r3, r3, #2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 156


 6697 073c 3A4A     		ldr	r2, .L525+4
 6698 073e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6699 0742 A3F26763 		subw	r3, r3, #1639
 6700 0746 5722     		movs	r2, #87
 6701 0748 02FB03F3 		mul	r3, r2, r3
 6702 074c 5B11     		asrs	r3, r3, #5
 6703 074e 7B60     		str	r3, [r7, #4]
 6704 0750 07E0     		b	.L413
 6705              	.L412:
1983:..\src/interruptions.c ****             }
1984:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
1985:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 6706              		.loc 1 1985 0
 6707 0752 3B4B     		ldr	r3, .L525+28
 6708 0754 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6709 0758 0233     		adds	r3, r3, #2
 6710 075a 334A     		ldr	r2, .L525+4
 6711 075c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6712 0760 7B60     		str	r3, [r7, #4]
 6713              	.L413:
1986:..\src/interruptions.c ****             }
1987:..\src/interruptions.c ****             
1988:..\src/interruptions.c ****             if (i_aux < 0) 
 6714              		.loc 1 1988 0
 6715 0762 7B68     		ldr	r3, [r7, #4]
 6716 0764 002B     		cmp	r3, #0
 6717 0766 01DA     		bge	.L414
1989:..\src/interruptions.c ****                 i_aux = 0;
 6718              		.loc 1 1989 0
 6719 0768 0023     		movs	r3, #0
 6720 076a 7B60     		str	r3, [r7, #4]
 6721              	.L414:
1990:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 6722              		.loc 1 1990 0
 6723 076c 3749     		ldr	r1, .L525+40
 6724 076e 7868     		ldr	r0, [r7, #4]
 6725 0770 FFF7FEFF 		bl	filter
 6726 0774 7860     		str	r0, [r7, #4]
1991:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 6727              		.loc 1 1991 0
 6728 0776 7B68     		ldr	r3, [r7, #4]
 6729 0778 9B02     		lsls	r3, r3, #10
 6730 077a 1A46     		mov	r2, r3
 6731 077c 294B     		ldr	r3, .L525
 6732 077e D3F8F431 		ldr	r3, [r3, #500]
 6733 0782 B2FBF3F3 		udiv	r3, r2, r3
 6734 0786 7B60     		str	r3, [r7, #4]
1992:..\src/interruptions.c **** 
1993:..\src/interruptions.c ****             if (interrupt_flag){
 6735              		.loc 1 1993 0
 6736 0788 2C4B     		ldr	r3, .L525+24
 6737 078a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6738 078c 002B     		cmp	r3, #0
 6739 078e 04D0     		beq	.L415
1994:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6740              		.loc 1 1994 0
 6741 0790 2A4B     		ldr	r3, .L525+24
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 157


 6742 0792 0022     		movs	r2, #0
 6743 0794 1A70     		strb	r2, [r3]
1995:..\src/interruptions.c ****                 interrupt_manager();
 6744              		.loc 1 1995 0
 6745 0796 FFF7FEFF 		bl	interrupt_manager
 6746              	.L415:
1996:..\src/interruptions.c ****             }
1997:..\src/interruptions.c ****             //Saturation
1998:..\src/interruptions.c ****             if (i_aux < 0)
 6747              		.loc 1 1998 0
 6748 079a 7B68     		ldr	r3, [r7, #4]
 6749 079c 002B     		cmp	r3, #0
 6750 079e 02DA     		bge	.L416
1999:..\src/interruptions.c ****                 i_aux = 0;
 6751              		.loc 1 1999 0
 6752 07a0 0023     		movs	r3, #0
 6753 07a2 7B60     		str	r3, [r7, #4]
 6754 07a4 06E0     		b	.L417
 6755              	.L416:
2000:..\src/interruptions.c ****             else 
2001:..\src/interruptions.c ****                 if (i_aux > 1024) 
 6756              		.loc 1 2001 0
 6757 07a6 7B68     		ldr	r3, [r7, #4]
 6758 07a8 B3F5806F 		cmp	r3, #1024
 6759 07ac 02DD     		ble	.L417
2002:..\src/interruptions.c ****                     i_aux = 1024;
 6760              		.loc 1 2002 0
 6761 07ae 4FF48063 		mov	r3, #1024
 6762 07b2 7B60     		str	r3, [r7, #4]
 6763              	.L417:
2003:..\src/interruptions.c ****             
2004:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 6764              		.loc 1 2004 0
 6765 07b4 264A     		ldr	r2, .L525+44
 6766 07b6 7B68     		ldr	r3, [r7, #4]
 6767 07b8 1360     		str	r3, [r2]
2005:..\src/interruptions.c **** 
2006:..\src/interruptions.c ****             if (interrupt_flag){
 6768              		.loc 1 2006 0
 6769 07ba 204B     		ldr	r3, .L525+24
 6770 07bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6771 07be 002B     		cmp	r3, #0
 6772 07c0 00F0A180 		beq	.L505
2007:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6773              		.loc 1 2007 0
 6774 07c4 1D4B     		ldr	r3, .L525+24
 6775 07c6 0022     		movs	r2, #0
 6776 07c8 1A70     		strb	r2, [r3]
2008:..\src/interruptions.c ****                 interrupt_manager();
 6777              		.loc 1 2008 0
 6778 07ca FFF7FEFF 		bl	interrupt_manager
2009:..\src/interruptions.c ****             }
2010:..\src/interruptions.c ****             
2011:..\src/interruptions.c ****             break;
 6779              		.loc 1 2011 0
 6780 07ce 9AE0     		b	.L505
 6781              	.L409:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 158


2012:..\src/interruptions.c **** 
2013:..\src/interruptions.c ****         case RESET: // reset variables
2014:..\src/interruptions.c ****             emg_counter_1 = 0;
 6782              		.loc 1 2014 0
 6783 07d0 204B     		ldr	r3, .L525+48
 6784 07d2 0022     		movs	r2, #0
 6785 07d4 1A80     		strh	r2, [r3]	@ movhi
2015:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 6786              		.loc 1 2015 0
 6787 07d6 134B     		ldr	r3, .L525
 6788 07d8 0022     		movs	r2, #0
 6789 07da C3F8F421 		str	r2, [r3, #500]
2016:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 6790              		.loc 1 2016 0
 6791 07de 194B     		ldr	r3, .L525+32
 6792 07e0 0222     		movs	r2, #2
 6793 07e2 1A70     		strb	r2, [r3]
2017:..\src/interruptions.c ****             break;
 6794              		.loc 1 2017 0
 6795 07e4 94E0     		b	.L419
 6796              	.L410:
2018:..\src/interruptions.c **** 
2019:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2020:..\src/interruptions.c ****             emg_counter_1++;
 6797              		.loc 1 2020 0
 6798 07e6 1B4B     		ldr	r3, .L525+48
 6799 07e8 1B88     		ldrh	r3, [r3]
 6800 07ea 0133     		adds	r3, r3, #1
 6801 07ec 9AB2     		uxth	r2, r3
 6802 07ee 194B     		ldr	r3, .L525+48
 6803 07f0 1A80     		strh	r2, [r3]	@ movhi
2021:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 6804              		.loc 1 2021 0
 6805 07f2 184B     		ldr	r3, .L525+48
 6806 07f4 1B88     		ldrh	r3, [r3]
 6807 07f6 B3F5FA7F 		cmp	r3, #500
 6808 07fa 40F08680 		bne	.L506
2022:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6809              		.loc 1 2022 0
 6810 07fe 154B     		ldr	r3, .L525+48
 6811 0800 0022     		movs	r2, #0
 6812 0802 1A80     		strh	r2, [r3]	@ movhi
2023:..\src/interruptions.c ****                 LED_control(1);
 6813              		.loc 1 2023 0
 6814 0804 0120     		movs	r0, #1
 6815 0806 FFF7FEFF 		bl	LED_control
2024:..\src/interruptions.c **** 				
2025:..\src/interruptions.c ****                 if (interrupt_flag){
 6816              		.loc 1 2025 0
 6817 080a 0C4B     		ldr	r3, .L525+24
 6818 080c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6819 080e 002B     		cmp	r3, #0
 6820 0810 04D0     		beq	.L421
2026:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6821              		.loc 1 2026 0
 6822 0812 0A4B     		ldr	r3, .L525+24
 6823 0814 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 159


 6824 0816 1A70     		strb	r2, [r3]
2027:..\src/interruptions.c ****                     interrupt_manager();
 6825              		.loc 1 2027 0
 6826 0818 FFF7FEFF 		bl	interrupt_manager
 6827              	.L421:
2028:..\src/interruptions.c ****                 }
2029:..\src/interruptions.c ****                 
2030:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 6828              		.loc 1 2030 0
 6829 081c 094B     		ldr	r3, .L525+32
 6830 081e 0322     		movs	r2, #3
 6831 0820 1A70     		strb	r2, [r3]
2031:..\src/interruptions.c ****             }
2032:..\src/interruptions.c ****             break;
 6832              		.loc 1 2032 0
 6833 0822 72E0     		b	.L506
 6834              	.L526:
 6835              		.align	2
 6836              	.L525:
 6837 0824 00000000 		.word	g_mem
 6838 0828 00000000 		.word	ADC_buf
 6839 082c 00000000 		.word	pwm_sign
 6840 0830 00000000 		.word	g_meas
 6841 0834 00000000 		.word	g_ref
 6842 0838 08000000 		.word	filt_curr_diff+8
 6843 083c 00000000 		.word	interrupt_flag
 6844 0840 00000000 		.word	c_mem
 6845 0844 00000000 		.word	emg_1_status
 6846 0848 00000000 		.word	emg_2_status
 6847 084c 00000000 		.word	filt_emg
 6848 0850 00000000 		.word	g_adc_meas
 6849 0854 7C010000 		.word	emg_counter_1.10596
 6850              	.L411:
2033:..\src/interruptions.c **** 
2034:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2035:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2036:..\src/interruptions.c ****             emg_counter_1++;
 6851              		.loc 1 2036 0
 6852 0858 AF4B     		ldr	r3, .L527
 6853 085a 1B88     		ldrh	r3, [r3]
 6854 085c 0133     		adds	r3, r3, #1
 6855 085e 9AB2     		uxth	r2, r3
 6856 0860 AD4B     		ldr	r3, .L527
 6857 0862 1A80     		strh	r2, [r3]	@ movhi
2037:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 6858              		.loc 1 2037 0
 6859 0864 AD4B     		ldr	r3, .L527+4
 6860 0866 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6861 086a 0233     		adds	r3, r3, #2
 6862 086c AC4A     		ldr	r2, .L527+8
 6863 086e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6864 0872 002B     		cmp	r3, #0
 6865 0874 07DA     		bge	.L422
2038:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 6866              		.loc 1 2038 0
 6867 0876 A94B     		ldr	r3, .L527+4
 6868 0878 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 160


 6869 087c 0233     		adds	r3, r3, #2
 6870 087e A84A     		ldr	r2, .L527+8
 6871 0880 0021     		movs	r1, #0
 6872 0882 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 6873              	.L422:
2039:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 6874              		.loc 1 2039 0
 6875 0886 A54B     		ldr	r3, .L527+4
 6876 0888 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6877 088c 0233     		adds	r3, r3, #2
 6878 088e A44A     		ldr	r2, .L527+8
 6879 0890 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 6880 0894 A349     		ldr	r1, .L527+12
 6881 0896 1846     		mov	r0, r3
 6882 0898 FFF7FEFF 		bl	filter
 6883 089c 0246     		mov	r2, r0
 6884 089e A24B     		ldr	r3, .L527+16
 6885 08a0 D3F8F431 		ldr	r3, [r3, #500]
 6886 08a4 1344     		add	r3, r3, r2
 6887 08a6 A04A     		ldr	r2, .L527+16
 6888 08a8 C2F8F431 		str	r3, [r2, #500]
2040:..\src/interruptions.c ****             
2041:..\src/interruptions.c ****             if (interrupt_flag){
 6889              		.loc 1 2041 0
 6890 08ac 9F4B     		ldr	r3, .L527+20
 6891 08ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6892 08b0 002B     		cmp	r3, #0
 6893 08b2 04D0     		beq	.L423
2042:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 6894              		.loc 1 2042 0
 6895 08b4 9D4B     		ldr	r3, .L527+20
 6896 08b6 0022     		movs	r2, #0
 6897 08b8 1A70     		strb	r2, [r3]
2043:..\src/interruptions.c ****                 interrupt_manager();
 6898              		.loc 1 2043 0
 6899 08ba FFF7FEFF 		bl	interrupt_manager
 6900              	.L423:
2044:..\src/interruptions.c ****             }
2045:..\src/interruptions.c ****             
2046:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 6901              		.loc 1 2046 0
 6902 08be 964B     		ldr	r3, .L527
 6903 08c0 1B88     		ldrh	r3, [r3]
 6904 08c2 B3F57A7F 		cmp	r3, #1000
 6905 08c6 22D1     		bne	.L507
2047:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 6906              		.loc 1 2047 0
 6907 08c8 974B     		ldr	r3, .L527+16
 6908 08ca D3F8F431 		ldr	r3, [r3, #500]
 6909 08ce 984A     		ldr	r2, .L527+24
 6910 08d0 A2FB0323 		umull	r2, r3, r2, r3
 6911 08d4 9B09     		lsrs	r3, r3, #6
 6912 08d6 944A     		ldr	r2, .L527+16
 6913 08d8 C2F8F431 		str	r3, [r2, #500]
2048:..\src/interruptions.c **** 
2049:..\src/interruptions.c ****                 if (interrupt_flag){
 6914              		.loc 1 2049 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 161


 6915 08dc 934B     		ldr	r3, .L527+20
 6916 08de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6917 08e0 002B     		cmp	r3, #0
 6918 08e2 04D0     		beq	.L425
2050:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 6919              		.loc 1 2050 0
 6920 08e4 914B     		ldr	r3, .L527+20
 6921 08e6 0022     		movs	r2, #0
 6922 08e8 1A70     		strb	r2, [r3]
2051:..\src/interruptions.c ****                     interrupt_manager();
 6923              		.loc 1 2051 0
 6924 08ea FFF7FEFF 		bl	interrupt_manager
 6925              	.L425:
2052:..\src/interruptions.c ****                 }                    
2053:..\src/interruptions.c ****                 
2054:..\src/interruptions.c ****                 LED_control(0);
 6926              		.loc 1 2054 0
 6927 08ee 0020     		movs	r0, #0
 6928 08f0 FFF7FEFF 		bl	LED_control
2055:..\src/interruptions.c **** 				
2056:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 6929              		.loc 1 2056 0
 6930 08f4 884B     		ldr	r3, .L527
 6931 08f6 0022     		movs	r2, #0
 6932 08f8 1A80     		strh	r2, [r3]	@ movhi
2057:..\src/interruptions.c **** 
2058:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 6933              		.loc 1 2058 0
 6934 08fa 8E4B     		ldr	r3, .L527+28
 6935 08fc 0022     		movs	r2, #0
 6936 08fe 1A70     		strb	r2, [r3]
2059:..\src/interruptions.c ****             }
2060:..\src/interruptions.c ****             break;
 6937              		.loc 1 2060 0
 6938 0900 05E0     		b	.L507
 6939              	.L504:
2061:..\src/interruptions.c **** 
2062:..\src/interruptions.c ****         default:
2063:..\src/interruptions.c ****             break;
 6940              		.loc 1 2063 0
 6941 0902 00BF     		nop
 6942 0904 04E0     		b	.L419
 6943              	.L505:
2011:..\src/interruptions.c **** 
 6944              		.loc 1 2011 0
 6945 0906 00BF     		nop
 6946 0908 02E0     		b	.L419
 6947              	.L506:
2032:..\src/interruptions.c **** 
 6948              		.loc 1 2032 0
 6949 090a 00BF     		nop
 6950 090c 00E0     		b	.L419
 6951              	.L507:
2060:..\src/interruptions.c **** 
 6952              		.loc 1 2060 0
 6953 090e 00BF     		nop
 6954              	.L419:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 162


2064:..\src/interruptions.c ****     }
2065:..\src/interruptions.c **** 
2066:..\src/interruptions.c ****     if (interrupt_flag){
 6955              		.loc 1 2066 0
 6956 0910 864B     		ldr	r3, .L527+20
 6957 0912 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6958 0914 002B     		cmp	r3, #0
 6959 0916 04D0     		beq	.L426
2067:..\src/interruptions.c ****         interrupt_flag = FALSE;
 6960              		.loc 1 2067 0
 6961 0918 844B     		ldr	r3, .L527+20
 6962 091a 0022     		movs	r2, #0
 6963 091c 1A70     		strb	r2, [r3]
2068:..\src/interruptions.c ****         interrupt_manager();
 6964              		.loc 1 2068 0
 6965 091e FFF7FEFF 		bl	interrupt_manager
 6966              	.L426:
2069:..\src/interruptions.c ****     }
2070:..\src/interruptions.c ****     // EMG 2 calibration state machine
2071:..\src/interruptions.c ****     switch(emg_2_status) {
 6967              		.loc 1 2071 0
 6968 0922 854B     		ldr	r3, .L527+32
 6969 0924 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6970 0926 052B     		cmp	r3, #5
 6971 0928 00F2CA81 		bhi	.L508
 6972 092c 01A2     		adr	r2, .L429
 6973 092e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6974 0932 00BF     		.p2align 2
 6975              	.L429:
 6976 0934 4D090000 		.word	.L428+1
 6977 0938 ED090000 		.word	.L430+1
 6978 093c 150A0000 		.word	.L431+1
 6979 0940 530A0000 		.word	.L432+1
 6980 0944 050B0000 		.word	.L433+1
 6981 0948 490B0000 		.word	.L434+1
 6982              		.p2align 1
 6983              	.L428:
2072:..\src/interruptions.c ****         case NORMAL: // normal execution
2073:..\src/interruptions.c ****         
2074:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 6984              		.loc 1 2074 0
 6985 094c 764B     		ldr	r3, .L527+16
 6986 094e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6987 0952 022B     		cmp	r3, #2
 6988 0954 14D0     		beq	.L435
 6989              		.loc 1 2074 0 is_stmt 0 discriminator 1
 6990 0956 744B     		ldr	r3, .L527+16
 6991 0958 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6992 095c 032B     		cmp	r3, #3
 6993 095e 0FD0     		beq	.L435
2075:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 6994              		.loc 1 2075 0 is_stmt 1
 6995 0960 6E4B     		ldr	r3, .L527+4
 6996 0962 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 6997 0966 C3F10303 		rsb	r3, r3, #3
 6998 096a 6D4A     		ldr	r2, .L527+8
 6999 096c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 163


 7000 0970 A3F26763 		subw	r3, r3, #1639
 7001 0974 5722     		movs	r2, #87
 7002 0976 02FB03F3 		mul	r3, r2, r3
 7003 097a 5B11     		asrs	r3, r3, #5
 7004 097c 7B60     		str	r3, [r7, #4]
 7005 097e 08E0     		b	.L436
 7006              	.L435:
2076:..\src/interruptions.c ****             }
2077:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2078:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7007              		.loc 1 2078 0
 7008 0980 664B     		ldr	r3, .L527+4
 7009 0982 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7010 0986 C3F10303 		rsb	r3, r3, #3
 7011 098a 654A     		ldr	r2, .L527+8
 7012 098c 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7013 0990 7B60     		str	r3, [r7, #4]
 7014              	.L436:
2079:..\src/interruptions.c ****             }
2080:..\src/interruptions.c **** 
2081:..\src/interruptions.c ****             if (i_aux < 0)
 7015              		.loc 1 2081 0
 7016 0992 7B68     		ldr	r3, [r7, #4]
 7017 0994 002B     		cmp	r3, #0
 7018 0996 01DA     		bge	.L437
2082:..\src/interruptions.c ****                 i_aux = 0;
 7019              		.loc 1 2082 0
 7020 0998 0023     		movs	r3, #0
 7021 099a 7B60     		str	r3, [r7, #4]
 7022              	.L437:
2083:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7023              		.loc 1 2083 0
 7024 099c 6749     		ldr	r1, .L527+36
 7025 099e 7868     		ldr	r0, [r7, #4]
 7026 09a0 FFF7FEFF 		bl	filter
 7027 09a4 7860     		str	r0, [r7, #4]
2084:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7028              		.loc 1 2084 0
 7029 09a6 7B68     		ldr	r3, [r7, #4]
 7030 09a8 9B02     		lsls	r3, r3, #10
 7031 09aa 1A46     		mov	r2, r3
 7032 09ac 5E4B     		ldr	r3, .L527+16
 7033 09ae D3F8F831 		ldr	r3, [r3, #504]
 7034 09b2 B2FBF3F3 		udiv	r3, r2, r3
 7035 09b6 7B60     		str	r3, [r7, #4]
2085:..\src/interruptions.c **** 
2086:..\src/interruptions.c ****             if (interrupt_flag){
 7036              		.loc 1 2086 0
 7037 09b8 5C4B     		ldr	r3, .L527+20
 7038 09ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7039 09bc 002B     		cmp	r3, #0
 7040 09be 04D0     		beq	.L438
2087:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7041              		.loc 1 2087 0
 7042 09c0 5A4B     		ldr	r3, .L527+20
 7043 09c2 0022     		movs	r2, #0
 7044 09c4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 164


2088:..\src/interruptions.c ****                 interrupt_manager();
 7045              		.loc 1 2088 0
 7046 09c6 FFF7FEFF 		bl	interrupt_manager
 7047              	.L438:
2089:..\src/interruptions.c ****             }
2090:..\src/interruptions.c ****             
2091:..\src/interruptions.c ****             if (i_aux < 0) 
 7048              		.loc 1 2091 0
 7049 09ca 7B68     		ldr	r3, [r7, #4]
 7050 09cc 002B     		cmp	r3, #0
 7051 09ce 02DA     		bge	.L439
2092:..\src/interruptions.c ****                 i_aux = 0;
 7052              		.loc 1 2092 0
 7053 09d0 0023     		movs	r3, #0
 7054 09d2 7B60     		str	r3, [r7, #4]
 7055 09d4 06E0     		b	.L440
 7056              	.L439:
2093:..\src/interruptions.c ****             else 
2094:..\src/interruptions.c ****                 if (i_aux > 1024)
 7057              		.loc 1 2094 0
 7058 09d6 7B68     		ldr	r3, [r7, #4]
 7059 09d8 B3F5806F 		cmp	r3, #1024
 7060 09dc 02DD     		ble	.L440
2095:..\src/interruptions.c ****                     i_aux = 1024;
 7061              		.loc 1 2095 0
 7062 09de 4FF48063 		mov	r3, #1024
 7063 09e2 7B60     		str	r3, [r7, #4]
 7064              	.L440:
2096:..\src/interruptions.c ****             
2097:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7065              		.loc 1 2097 0
 7066 09e4 564A     		ldr	r2, .L527+40
 7067 09e6 7B68     		ldr	r3, [r7, #4]
 7068 09e8 5360     		str	r3, [r2, #4]
2098:..\src/interruptions.c **** 
2099:..\src/interruptions.c ****             break;
 7069              		.loc 1 2099 0
 7070 09ea 72E1     		b	.L441
 7071              	.L430:
2100:..\src/interruptions.c **** 
2101:..\src/interruptions.c ****         case RESET: // reset variables
2102:..\src/interruptions.c ****             emg_counter_2 = 0;
 7072              		.loc 1 2102 0
 7073 09ec 554B     		ldr	r3, .L527+44
 7074 09ee 0022     		movs	r2, #0
 7075 09f0 1A80     		strh	r2, [r3]	@ movhi
2103:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7076              		.loc 1 2103 0
 7077 09f2 4D4B     		ldr	r3, .L527+16
 7078 09f4 0022     		movs	r2, #0
 7079 09f6 C3F8F821 		str	r2, [r3, #504]
2104:..\src/interruptions.c **** 
2105:..\src/interruptions.c ****             if (interrupt_flag){
 7080              		.loc 1 2105 0
 7081 09fa 4C4B     		ldr	r3, .L527+20
 7082 09fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7083 09fe 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 165


 7084 0a00 04D0     		beq	.L442
2106:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7085              		.loc 1 2106 0
 7086 0a02 4A4B     		ldr	r3, .L527+20
 7087 0a04 0022     		movs	r2, #0
 7088 0a06 1A70     		strb	r2, [r3]
2107:..\src/interruptions.c ****                 interrupt_manager();
 7089              		.loc 1 2107 0
 7090 0a08 FFF7FEFF 		bl	interrupt_manager
 7091              	.L442:
2108:..\src/interruptions.c ****             }
2109:..\src/interruptions.c ****             
2110:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7092              		.loc 1 2110 0
 7093 0a0c 4A4B     		ldr	r3, .L527+32
 7094 0a0e 0422     		movs	r2, #4
 7095 0a10 1A70     		strb	r2, [r3]
2111:..\src/interruptions.c ****             break;
 7096              		.loc 1 2111 0
 7097 0a12 5EE1     		b	.L441
 7098              	.L431:
2112:..\src/interruptions.c **** 
2113:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2114:..\src/interruptions.c ****             emg_counter_2++;
 7099              		.loc 1 2114 0
 7100 0a14 4B4B     		ldr	r3, .L527+44
 7101 0a16 1B88     		ldrh	r3, [r3]
 7102 0a18 0133     		adds	r3, r3, #1
 7103 0a1a 9AB2     		uxth	r2, r3
 7104 0a1c 494B     		ldr	r3, .L527+44
 7105 0a1e 1A80     		strh	r2, [r3]	@ movhi
2115:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7106              		.loc 1 2115 0
 7107 0a20 484B     		ldr	r3, .L527+44
 7108 0a22 1B88     		ldrh	r3, [r3]
 7109 0a24 B3F5FA7F 		cmp	r3, #500
 7110 0a28 40F04C81 		bne	.L509
2116:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7111              		.loc 1 2116 0
 7112 0a2c 454B     		ldr	r3, .L527+44
 7113 0a2e 0022     		movs	r2, #0
 7114 0a30 1A80     		strh	r2, [r3]	@ movhi
2117:..\src/interruptions.c ****                 LED_control(1);
 7115              		.loc 1 2117 0
 7116 0a32 0120     		movs	r0, #1
 7117 0a34 FFF7FEFF 		bl	LED_control
2118:..\src/interruptions.c **** 
2119:..\src/interruptions.c ****                 if (interrupt_flag){
 7118              		.loc 1 2119 0
 7119 0a38 3C4B     		ldr	r3, .L527+20
 7120 0a3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7121 0a3c 002B     		cmp	r3, #0
 7122 0a3e 04D0     		beq	.L444
2120:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7123              		.loc 1 2120 0
 7124 0a40 3A4B     		ldr	r3, .L527+20
 7125 0a42 0022     		movs	r2, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 166


 7126 0a44 1A70     		strb	r2, [r3]
2121:..\src/interruptions.c ****                     interrupt_manager();
 7127              		.loc 1 2121 0
 7128 0a46 FFF7FEFF 		bl	interrupt_manager
 7129              	.L444:
2122:..\src/interruptions.c ****                 }
2123:..\src/interruptions.c ****                 
2124:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7130              		.loc 1 2124 0
 7131 0a4a 3B4B     		ldr	r3, .L527+32
 7132 0a4c 0322     		movs	r2, #3
 7133 0a4e 1A70     		strb	r2, [r3]
2125:..\src/interruptions.c ****             }
2126:..\src/interruptions.c ****             break;
 7134              		.loc 1 2126 0
 7135 0a50 38E1     		b	.L509
 7136              	.L432:
2127:..\src/interruptions.c **** 
2128:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2129:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2130:..\src/interruptions.c ****             emg_counter_2++;
 7137              		.loc 1 2130 0
 7138 0a52 3C4B     		ldr	r3, .L527+44
 7139 0a54 1B88     		ldrh	r3, [r3]
 7140 0a56 0133     		adds	r3, r3, #1
 7141 0a58 9AB2     		uxth	r2, r3
 7142 0a5a 3A4B     		ldr	r3, .L527+44
 7143 0a5c 1A80     		strh	r2, [r3]	@ movhi
2131:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7144              		.loc 1 2131 0
 7145 0a5e 2F4B     		ldr	r3, .L527+4
 7146 0a60 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7147 0a64 C3F10303 		rsb	r3, r3, #3
 7148 0a68 2D4A     		ldr	r2, .L527+8
 7149 0a6a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7150 0a6e 002B     		cmp	r3, #0
 7151 0a70 08DA     		bge	.L445
2132:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7152              		.loc 1 2132 0
 7153 0a72 2A4B     		ldr	r3, .L527+4
 7154 0a74 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7155 0a78 C3F10303 		rsb	r3, r3, #3
 7156 0a7c 284A     		ldr	r2, .L527+8
 7157 0a7e 0021     		movs	r1, #0
 7158 0a80 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7159              	.L445:
2133:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7160              		.loc 1 2133 0
 7161 0a84 254B     		ldr	r3, .L527+4
 7162 0a86 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 7163 0a8a C3F10303 		rsb	r3, r3, #3
 7164 0a8e 244A     		ldr	r2, .L527+8
 7165 0a90 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7166 0a94 2949     		ldr	r1, .L527+36
 7167 0a96 1846     		mov	r0, r3
 7168 0a98 FFF7FEFF 		bl	filter
 7169 0a9c 0246     		mov	r2, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 167


 7170 0a9e 224B     		ldr	r3, .L527+16
 7171 0aa0 D3F8F831 		ldr	r3, [r3, #504]
 7172 0aa4 1344     		add	r3, r3, r2
 7173 0aa6 204A     		ldr	r2, .L527+16
 7174 0aa8 C2F8F831 		str	r3, [r2, #504]
2134:..\src/interruptions.c **** 
2135:..\src/interruptions.c ****             if (interrupt_flag){
 7175              		.loc 1 2135 0
 7176 0aac 1F4B     		ldr	r3, .L527+20
 7177 0aae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7178 0ab0 002B     		cmp	r3, #0
 7179 0ab2 04D0     		beq	.L446
2136:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7180              		.loc 1 2136 0
 7181 0ab4 1D4B     		ldr	r3, .L527+20
 7182 0ab6 0022     		movs	r2, #0
 7183 0ab8 1A70     		strb	r2, [r3]
2137:..\src/interruptions.c ****                 interrupt_manager();
 7184              		.loc 1 2137 0
 7185 0aba FFF7FEFF 		bl	interrupt_manager
 7186              	.L446:
2138:..\src/interruptions.c ****             }
2139:..\src/interruptions.c ****             
2140:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7187              		.loc 1 2140 0
 7188 0abe 214B     		ldr	r3, .L527+44
 7189 0ac0 1B88     		ldrh	r3, [r3]
 7190 0ac2 B3F57A7F 		cmp	r3, #1000
 7191 0ac6 40F0FF80 		bne	.L510
2141:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7192              		.loc 1 2141 0
 7193 0aca 174B     		ldr	r3, .L527+16
 7194 0acc D3F8F831 		ldr	r3, [r3, #504]
 7195 0ad0 174A     		ldr	r2, .L527+24
 7196 0ad2 A2FB0323 		umull	r2, r3, r2, r3
 7197 0ad6 9B09     		lsrs	r3, r3, #6
 7198 0ad8 134A     		ldr	r2, .L527+16
 7199 0ada C2F8F831 		str	r3, [r2, #504]
2142:..\src/interruptions.c ****                 LED_control(0);
 7200              		.loc 1 2142 0
 7201 0ade 0020     		movs	r0, #0
 7202 0ae0 FFF7FEFF 		bl	LED_control
2143:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7203              		.loc 1 2143 0
 7204 0ae4 174B     		ldr	r3, .L527+44
 7205 0ae6 0022     		movs	r2, #0
 7206 0ae8 1A80     		strh	r2, [r3]	@ movhi
2144:..\src/interruptions.c ****             
2145:..\src/interruptions.c ****                 if (interrupt_flag){
 7207              		.loc 1 2145 0
 7208 0aea 104B     		ldr	r3, .L527+20
 7209 0aec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7210 0aee 002B     		cmp	r3, #0
 7211 0af0 04D0     		beq	.L448
2146:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7212              		.loc 1 2146 0
 7213 0af2 0E4B     		ldr	r3, .L527+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 168


 7214 0af4 0022     		movs	r2, #0
 7215 0af6 1A70     		strb	r2, [r3]
2147:..\src/interruptions.c ****                     interrupt_manager();
 7216              		.loc 1 2147 0
 7217 0af8 FFF7FEFF 		bl	interrupt_manager
 7218              	.L448:
2148:..\src/interruptions.c ****                 }
2149:..\src/interruptions.c ****                 
2150:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7219              		.loc 1 2150 0
 7220 0afc 0E4B     		ldr	r3, .L527+32
 7221 0afe 0522     		movs	r2, #5
 7222 0b00 1A70     		strb	r2, [r3]
2151:..\src/interruptions.c ****             }
2152:..\src/interruptions.c ****             break;
 7223              		.loc 1 2152 0
 7224 0b02 E1E0     		b	.L510
 7225              	.L433:
2153:..\src/interruptions.c **** 
2154:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2155:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7226              		.loc 1 2155 0
 7227 0b04 0B4B     		ldr	r3, .L527+28
 7228 0b06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7229 0b08 002B     		cmp	r3, #0
 7230 0b0a 40F0DF80 		bne	.L511
2156:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7231              		.loc 1 2156 0
 7232 0b0e 0A4B     		ldr	r3, .L527+32
 7233 0b10 0222     		movs	r2, #2
 7234 0b12 1A70     		strb	r2, [r3]
2157:..\src/interruptions.c ****             break;
 7235              		.loc 1 2157 0
 7236 0b14 DAE0     		b	.L511
 7237              	.L528:
 7238 0b16 00BF     		.align	2
 7239              	.L527:
 7240 0b18 7C010000 		.word	emg_counter_1.10596
 7241 0b1c 00000000 		.word	c_mem
 7242 0b20 00000000 		.word	ADC_buf
 7243 0b24 00000000 		.word	filt_emg
 7244 0b28 00000000 		.word	g_mem
 7245 0b2c 00000000 		.word	interrupt_flag
 7246 0b30 D34D6210 		.word	274877907
 7247 0b34 00000000 		.word	emg_1_status
 7248 0b38 00000000 		.word	emg_2_status
 7249 0b3c 08000000 		.word	filt_emg+8
 7250 0b40 00000000 		.word	g_adc_meas
 7251 0b44 7E010000 		.word	emg_counter_2.10597
 7252              	.L434:
2158:..\src/interruptions.c **** 
2159:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2160:..\src/interruptions.c ****             emg_counter_2++;
 7253              		.loc 1 2160 0
 7254 0b48 B04B     		ldr	r3, .L529
 7255 0b4a 1B88     		ldrh	r3, [r3]
 7256 0b4c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 169


 7257 0b4e 9AB2     		uxth	r2, r3
 7258 0b50 AE4B     		ldr	r3, .L529
 7259 0b52 1A80     		strh	r2, [r3]	@ movhi
2161:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7260              		.loc 1 2161 0
 7261 0b54 AD4B     		ldr	r3, .L529
 7262 0b56 1B88     		ldrh	r3, [r3]
 7263 0b58 B3F5FA7F 		cmp	r3, #500
 7264 0b5c 40F0B880 		bne	.L512
2162:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7265              		.loc 1 2162 0
 7266 0b60 AA4B     		ldr	r3, .L529
 7267 0b62 0022     		movs	r2, #0
 7268 0b64 1A80     		strh	r2, [r3]	@ movhi
2163:..\src/interruptions.c ****                 
2164:..\src/interruptions.c ****                 if (interrupt_flag){
 7269              		.loc 1 2164 0
 7270 0b66 AA4B     		ldr	r3, .L529+4
 7271 0b68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7272 0b6a 002B     		cmp	r3, #0
 7273 0b6c 04D0     		beq	.L451
2165:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7274              		.loc 1 2165 0
 7275 0b6e A84B     		ldr	r3, .L529+4
 7276 0b70 0022     		movs	r2, #0
 7277 0b72 1A70     		strb	r2, [r3]
2166:..\src/interruptions.c ****                     interrupt_manager();
 7278              		.loc 1 2166 0
 7279 0b74 FFF7FEFF 		bl	interrupt_manager
 7280              	.L451:
2167:..\src/interruptions.c ****                 }
2168:..\src/interruptions.c ****                 
2169:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7281              		.loc 1 2169 0
 7282 0b78 A64B     		ldr	r3, .L529+8
 7283 0b7a 0022     		movs	r2, #0
 7284 0b7c 1A70     		strb	r2, [r3]
 7285 0b7e 93E0     		b	.L452
 7286              	.L456:
2170:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7287              		.loc 1 2170 0
 7288 0b80 A44B     		ldr	r3, .L529+8
 7289 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7290 0b84 1946     		mov	r1, r3
 7291 0b86 A44A     		ldr	r2, .L529+12
 7292 0b88 0B46     		mov	r3, r1
 7293 0b8a DB00     		lsls	r3, r3, #3
 7294 0b8c 5B1A     		subs	r3, r3, r1
 7295 0b8e 1B01     		lsls	r3, r3, #4
 7296 0b90 1344     		add	r3, r3, r2
 7297 0b92 03F58773 		add	r3, r3, #270
 7298 0b96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7299 0b98 022B     		cmp	r3, #2
 7300 0b9a 37D0     		beq	.L453
2171:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7301              		.loc 1 2171 0 discriminator 1
 7302 0b9c 9D4B     		ldr	r3, .L529+8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 170


 7303 0b9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7304 0ba0 1946     		mov	r1, r3
 7305 0ba2 9D4A     		ldr	r2, .L529+12
 7306 0ba4 0B46     		mov	r3, r1
 7307 0ba6 DB00     		lsls	r3, r3, #3
 7308 0ba8 5B1A     		subs	r3, r3, r1
 7309 0baa 1B01     		lsls	r3, r3, #4
 7310 0bac 1344     		add	r3, r3, r2
 7311 0bae 03F58773 		add	r3, r3, #270
 7312 0bb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2170:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7313              		.loc 1 2170 0 discriminator 1
 7314 0bb4 032B     		cmp	r3, #3
 7315 0bb6 29D0     		beq	.L453
2172:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7316              		.loc 1 2172 0
 7317 0bb8 964B     		ldr	r3, .L529+8
 7318 0bba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7319 0bbc 1946     		mov	r1, r3
 7320 0bbe 964A     		ldr	r2, .L529+12
 7321 0bc0 0B46     		mov	r3, r1
 7322 0bc2 DB00     		lsls	r3, r3, #3
 7323 0bc4 5B1A     		subs	r3, r3, r1
 7324 0bc6 1B01     		lsls	r3, r3, #4
 7325 0bc8 1344     		add	r3, r3, r2
 7326 0bca 03F58773 		add	r3, r3, #270
 7327 0bce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2171:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7328              		.loc 1 2171 0
 7329 0bd0 042B     		cmp	r3, #4
 7330 0bd2 1BD0     		beq	.L453
2173:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7331              		.loc 1 2173 0
 7332 0bd4 8F4B     		ldr	r3, .L529+8
 7333 0bd6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7334 0bd8 1946     		mov	r1, r3
 7335 0bda 8F4A     		ldr	r2, .L529+12
 7336 0bdc 0B46     		mov	r3, r1
 7337 0bde DB00     		lsls	r3, r3, #3
 7338 0be0 5B1A     		subs	r3, r3, r1
 7339 0be2 1B01     		lsls	r3, r3, #4
 7340 0be4 1344     		add	r3, r3, r2
 7341 0be6 03F58773 		add	r3, r3, #270
 7342 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2172:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 7343              		.loc 1 2172 0
 7344 0bec 052B     		cmp	r3, #5
 7345 0bee 0DD0     		beq	.L453
2174:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 7346              		.loc 1 2174 0
 7347 0bf0 884B     		ldr	r3, .L529+8
 7348 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7349 0bf4 1946     		mov	r1, r3
 7350 0bf6 884A     		ldr	r2, .L529+12
 7351 0bf8 0B46     		mov	r3, r1
 7352 0bfa DB00     		lsls	r3, r3, #3
 7353 0bfc 5B1A     		subs	r3, r3, r1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 171


 7354 0bfe 1B01     		lsls	r3, r3, #4
 7355 0c00 1344     		add	r3, r3, r2
 7356 0c02 03F58773 		add	r3, r3, #270
 7357 0c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2173:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 7358              		.loc 1 2173 0
 7359 0c08 072B     		cmp	r3, #7
 7360 0c0a 47D1     		bne	.L454
 7361              	.L453:
2175:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 7362              		.loc 1 2175 0
 7363 0c0c 814B     		ldr	r3, .L529+8
 7364 0c0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7365 0c10 1946     		mov	r1, r3
 7366 0c12 814A     		ldr	r2, .L529+12
 7367 0c14 0B46     		mov	r3, r1
 7368 0c16 DB00     		lsls	r3, r3, #3
 7369 0c18 5B1A     		subs	r3, r3, r1
 7370 0c1a 1B01     		lsls	r3, r3, #4
 7371 0c1c 1344     		add	r3, r3, r2
 7372 0c1e 03F20F13 		addw	r3, r3, #271
 7373 0c22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7374 0c24 002B     		cmp	r3, #0
 7375 0c26 19D1     		bne	.L455
2176:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 7376              		.loc 1 2176 0
 7377 0c28 7A4B     		ldr	r3, .L529+8
 7378 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7379 0c2c 1846     		mov	r0, r3
 7380 0c2e 794B     		ldr	r3, .L529+8
 7381 0c30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7382 0c32 1946     		mov	r1, r3
 7383 0c34 794A     		ldr	r2, .L529+16
 7384 0c36 0B46     		mov	r3, r1
 7385 0c38 DB00     		lsls	r3, r3, #3
 7386 0c3a 5B1A     		subs	r3, r3, r1
 7387 0c3c 1B01     		lsls	r3, r3, #4
 7388 0c3e 1344     		add	r3, r3, r2
 7389 0c40 03F58873 		add	r3, r3, #272
 7390 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7391 0c46 1946     		mov	r1, r3
 7392 0c48 754A     		ldr	r2, .L529+20
 7393 0c4a 3423     		movs	r3, #52
 7394 0c4c 03FB01F3 		mul	r3, r3, r1
 7395 0c50 1344     		add	r3, r3, r2
 7396 0c52 1A68     		ldr	r2, [r3]
 7397 0c54 7349     		ldr	r1, .L529+24
 7398 0c56 0301     		lsls	r3, r0, #4
 7399 0c58 0B44     		add	r3, r3, r1
 7400 0c5a 1A60     		str	r2, [r3]
 7401              	.L455:
2177:..\src/interruptions.c ****                         }
2178:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 7402              		.loc 1 2178 0
 7403 0c5c 6D4B     		ldr	r3, .L529+8
 7404 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7405 0c60 1846     		mov	r0, r3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 172


 7406 0c62 6C4B     		ldr	r3, .L529+8
 7407 0c64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7408 0c66 1946     		mov	r1, r3
 7409 0c68 6B4A     		ldr	r2, .L529+12
 7410 0c6a 0B46     		mov	r3, r1
 7411 0c6c DB00     		lsls	r3, r3, #3
 7412 0c6e 5B1A     		subs	r3, r3, r1
 7413 0c70 1B01     		lsls	r3, r3, #4
 7414 0c72 1344     		add	r3, r3, r2
 7415 0c74 E033     		adds	r3, r3, #224
 7416 0c76 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7417 0c78 6A4A     		ldr	r2, .L529+24
 7418 0c7a 0301     		lsls	r3, r0, #4
 7419 0c7c 1344     		add	r3, r3, r2
 7420 0c7e 0C33     		adds	r3, r3, #12
 7421 0c80 0A46     		mov	r2, r1
 7422 0c82 1A70     		strb	r2, [r3]
2179:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 7423              		.loc 1 2179 0
 7424 0c84 634B     		ldr	r3, .L529+8
 7425 0c86 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 7426 0c88 624B     		ldr	r3, .L529+8
 7427 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7428 0c8c 654A     		ldr	r2, .L529+24
 7429 0c8e 1B01     		lsls	r3, r3, #4
 7430 0c90 1344     		add	r3, r3, r2
 7431 0c92 0C33     		adds	r3, r3, #12
 7432 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7433 0c96 1946     		mov	r1, r3
 7434 0c98 FFF7FEFF 		bl	enable_motor
 7435              	.L454:
2169:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7436              		.loc 1 2169 0 discriminator 2
 7437 0c9c 5D4B     		ldr	r3, .L529+8
 7438 0c9e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7439 0ca0 0133     		adds	r3, r3, #1
 7440 0ca2 DAB2     		uxtb	r2, r3
 7441 0ca4 5B4B     		ldr	r3, .L529+8
 7442 0ca6 1A70     		strb	r2, [r3]
 7443              	.L452:
2169:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7444              		.loc 1 2169 0 is_stmt 0 discriminator 1
 7445 0ca8 5A4B     		ldr	r3, .L529+8
 7446 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7447 0cac 012B     		cmp	r3, #1
 7448 0cae 7FF667AF 		bls	.L456
2180:..\src/interruptions.c ****                     }
2181:..\src/interruptions.c ****                 }
2182:..\src/interruptions.c ****                     
2183:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 7449              		.loc 1 2183 0 is_stmt 1
 7450 0cb2 0020     		movs	r0, #0
 7451 0cb4 FFF7FEFF 		bl	memStore
2184:..\src/interruptions.c ****                     
2185:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 7452              		.loc 1 2185 0
 7453 0cb8 5B4B     		ldr	r3, .L529+28
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 173


 7454 0cba 0022     		movs	r2, #0
 7455 0cbc 1A70     		strb	r2, [r3]
2186:..\src/interruptions.c ****             }
2187:..\src/interruptions.c ****             break;
 7456              		.loc 1 2187 0
 7457 0cbe 07E0     		b	.L512
 7458              	.L508:
2188:..\src/interruptions.c ****         default:
2189:..\src/interruptions.c ****             break;
 7459              		.loc 1 2189 0
 7460 0cc0 00BF     		nop
 7461 0cc2 06E0     		b	.L441
 7462              	.L509:
2126:..\src/interruptions.c **** 
 7463              		.loc 1 2126 0
 7464 0cc4 00BF     		nop
 7465 0cc6 04E0     		b	.L441
 7466              	.L510:
2152:..\src/interruptions.c **** 
 7467              		.loc 1 2152 0
 7468 0cc8 00BF     		nop
 7469 0cca 02E0     		b	.L441
 7470              	.L511:
2157:..\src/interruptions.c **** 
 7471              		.loc 1 2157 0
 7472 0ccc 00BF     		nop
 7473 0cce 00E0     		b	.L441
 7474              	.L512:
2187:..\src/interruptions.c ****         default:
 7475              		.loc 1 2187 0
 7476 0cd0 00BF     		nop
 7477              	.L441:
2190:..\src/interruptions.c ****     }
2191:..\src/interruptions.c ****         
2192:..\src/interruptions.c ****     if (interrupt_flag){
 7478              		.loc 1 2192 0
 7479 0cd2 4F4B     		ldr	r3, .L529+4
 7480 0cd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7481 0cd6 002B     		cmp	r3, #0
 7482 0cd8 04D0     		beq	.L457
2193:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7483              		.loc 1 2193 0
 7484 0cda 4D4B     		ldr	r3, .L529+4
 7485 0cdc 0022     		movs	r2, #0
 7486 0cde 1A70     		strb	r2, [r3]
2194:..\src/interruptions.c ****         interrupt_manager();
 7487              		.loc 1 2194 0
 7488 0ce0 FFF7FEFF 		bl	interrupt_manager
 7489              	.L457:
2195:..\src/interruptions.c ****     }
2196:..\src/interruptions.c ****     
2197:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 7490              		.loc 1 2197 0
 7491 0ce4 4C4B     		ldr	r3, .L529+12
 7492 0ce6 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 7493 0cea 062B     		cmp	r3, #6
 7494 0cec 05D0     		beq	.L458
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 174


 7495              		.loc 1 2197 0 is_stmt 0 discriminator 1
 7496 0cee 4A4B     		ldr	r3, .L529+12
 7497 0cf0 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7498 0cf4 062B     		cmp	r3, #6
 7499 0cf6 40F0C881 		bne	.L459
 7500              	.L458:
2198:..\src/interruptions.c ****         // Read joystick
2199:..\src/interruptions.c ****         
2200:..\src/interruptions.c ****         switch (joy_UD_status) {
 7501              		.loc 1 2200 0 is_stmt 1
 7502 0cfa 4C4B     		ldr	r3, .L529+32
 7503 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7504 0cfe 052B     		cmp	r3, #5
 7505 0d00 00F2E980 		bhi	.L460
 7506 0d04 01A2     		adr	r2, .L462
 7507 0d06 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7508 0d0a 00BF     		.p2align 2
 7509              	.L462:
 7510 0d0c 250D0000 		.word	.L461+1
 7511 0d10 C30D0000 		.word	.L463+1
 7512 0d14 D70D0000 		.word	.L464+1
 7513 0d18 450E0000 		.word	.L465+1
 7514 0d1c B10E0000 		.word	.L466+1
 7515 0d20 B10E0000 		.word	.L466+1
 7516              		.p2align 1
 7517              	.L461:
2201:..\src/interruptions.c ****             case NORMAL:
2202:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 7518              		.loc 1 2202 0
 7519 0d24 424B     		ldr	r3, .L529+36
 7520 0d26 B3F90430 		ldrsh	r3, [r3, #4]
 7521 0d2a 7B60     		str	r3, [r7, #4]
2203:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2204:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 7522              		.loc 1 2204 0
 7523 0d2c 414B     		ldr	r3, .L529+40
 7524 0d2e 1B68     		ldr	r3, [r3]
 7525 0d30 7A68     		ldr	r2, [r7, #4]
 7526 0d32 D31A     		subs	r3, r2, r3
 7527 0d34 1846     		mov	r0, r3
 7528 0d36 FFF7FEFF 		bl	__aeabi_i2f
 7529 0d3a 0446     		mov	r4, r0
 7530 0d3c 3D4B     		ldr	r3, .L529+40
 7531 0d3e 1B68     		ldr	r3, [r3]
 7532 0d40 1846     		mov	r0, r3
 7533 0d42 FFF7FEFF 		bl	__aeabi_i2f
 7534 0d46 0346     		mov	r3, r0
 7535 0d48 1946     		mov	r1, r3
 7536 0d4a 2046     		mov	r0, r4
 7537 0d4c FFF7FEFF 		bl	__aeabi_fdiv
 7538 0d50 0346     		mov	r3, r0
 7539 0d52 1C46     		mov	r4, r3
 7540 0d54 304B     		ldr	r3, .L529+12
 7541 0d56 B3F8B632 		ldrh	r3, [r3, #694]
 7542 0d5a 1846     		mov	r0, r3
 7543 0d5c FFF7FEFF 		bl	__aeabi_i2f
 7544 0d60 0346     		mov	r3, r0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 175


 7545 0d62 1946     		mov	r1, r3
 7546 0d64 2046     		mov	r0, r4
 7547 0d66 FFF7FEFF 		bl	__aeabi_fmul
 7548 0d6a 0346     		mov	r3, r0
 7549 0d6c 1846     		mov	r0, r3
 7550 0d6e FFF7FEFF 		bl	__aeabi_f2iz
 7551 0d72 0346     		mov	r3, r0
 7552 0d74 7B60     		str	r3, [r7, #4]
2205:..\src/interruptions.c ****                 
2206:..\src/interruptions.c ****                 if (interrupt_flag){
 7553              		.loc 1 2206 0
 7554 0d76 264B     		ldr	r3, .L529+4
 7555 0d78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7556 0d7a 002B     		cmp	r3, #0
 7557 0d7c 04D0     		beq	.L467
2207:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7558              		.loc 1 2207 0
 7559 0d7e 244B     		ldr	r3, .L529+4
 7560 0d80 0022     		movs	r2, #0
 7561 0d82 1A70     		strb	r2, [r3]
2208:..\src/interruptions.c ****                     interrupt_manager();
 7562              		.loc 1 2208 0
 7563 0d84 FFF7FEFF 		bl	interrupt_manager
 7564              	.L467:
2209:..\src/interruptions.c ****                 }
2210:..\src/interruptions.c **** 
2211:..\src/interruptions.c ****                 //Saturation
2212:..\src/interruptions.c ****                 if (i_aux < -1024) 
 7565              		.loc 1 2212 0
 7566 0d88 7B68     		ldr	r3, [r7, #4]
 7567 0d8a 13F5806F 		cmn	r3, #1024
 7568 0d8e 01DA     		bge	.L468
2213:..\src/interruptions.c ****                     i_aux = -1024;
 7569              		.loc 1 2213 0
 7570 0d90 294B     		ldr	r3, .L529+44
 7571 0d92 7B60     		str	r3, [r7, #4]
 7572              	.L468:
2214:..\src/interruptions.c ****                 if (i_aux > 1024)
 7573              		.loc 1 2214 0
 7574 0d94 7B68     		ldr	r3, [r7, #4]
 7575 0d96 B3F5806F 		cmp	r3, #1024
 7576 0d9a 02DD     		ble	.L469
2215:..\src/interruptions.c ****                     i_aux = 1024;
 7577              		.loc 1 2215 0
 7578 0d9c 4FF48063 		mov	r3, #1024
 7579 0da0 7B60     		str	r3, [r7, #4]
 7580              	.L469:
2216:..\src/interruptions.c **** 
2217:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 7581              		.loc 1 2217 0
 7582 0da2 7B68     		ldr	r3, [r7, #4]
 7583 0da4 1BB2     		sxth	r3, r3
 7584 0da6 1A46     		mov	r2, r3
 7585 0da8 244B     		ldr	r3, .L529+48
 7586 0daa 5A62     		str	r2, [r3, #36]
2218:..\src/interruptions.c **** 
2219:..\src/interruptions.c ****                 if (interrupt_flag){
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 176


 7587              		.loc 1 2219 0
 7588 0dac 184B     		ldr	r3, .L529+4
 7589 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7590 0db0 002B     		cmp	r3, #0
 7591 0db2 00F08980 		beq	.L513
2220:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7592              		.loc 1 2220 0
 7593 0db6 164B     		ldr	r3, .L529+4
 7594 0db8 0022     		movs	r2, #0
 7595 0dba 1A70     		strb	r2, [r3]
2221:..\src/interruptions.c ****                     interrupt_manager();
 7596              		.loc 1 2221 0
 7597 0dbc FFF7FEFF 		bl	interrupt_manager
2222:..\src/interruptions.c ****                 }
2223:..\src/interruptions.c **** 
2224:..\src/interruptions.c ****             break;
 7598              		.loc 1 2224 0
 7599 0dc0 82E0     		b	.L513
 7600              	.L463:
2225:..\src/interruptions.c **** 
2226:..\src/interruptions.c ****             case RESET: // reset variables
2227:..\src/interruptions.c ****                 UD_counter = 0;
 7601              		.loc 1 2227 0
 7602 0dc2 1F4B     		ldr	r3, .L529+52
 7603 0dc4 0022     		movs	r2, #0
 7604 0dc6 1A80     		strh	r2, [r3]	@ movhi
2228:..\src/interruptions.c ****                 UD_mean_value = 0;
 7605              		.loc 1 2228 0
 7606 0dc8 1A4B     		ldr	r3, .L529+40
 7607 0dca 0022     		movs	r2, #0
 7608 0dcc 1A60     		str	r2, [r3]
2229:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 7609              		.loc 1 2229 0
 7610 0dce 174B     		ldr	r3, .L529+32
 7611 0dd0 0422     		movs	r2, #4
 7612 0dd2 1A70     		strb	r2, [r3]
2230:..\src/interruptions.c **** 
2231:..\src/interruptions.c ****             break;
 7613              		.loc 1 2231 0
 7614 0dd4 7FE0     		b	.L460
 7615              	.L464:
2232:..\src/interruptions.c **** 
2233:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2234:..\src/interruptions.c ****                 UD_counter++;
 7616              		.loc 1 2234 0
 7617 0dd6 1A4B     		ldr	r3, .L529+52
 7618 0dd8 1B88     		ldrh	r3, [r3]
 7619 0dda 0133     		adds	r3, r3, #1
 7620 0ddc 9AB2     		uxth	r2, r3
 7621 0dde 184B     		ldr	r3, .L529+52
 7622 0de0 1A80     		strh	r2, [r3]	@ movhi
2235:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 7623              		.loc 1 2235 0
 7624 0de2 174B     		ldr	r3, .L529+52
 7625 0de4 1B88     		ldrh	r3, [r3]
 7626 0de6 642B     		cmp	r3, #100
 7627 0de8 70D1     		bne	.L514
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 177


2236:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 7628              		.loc 1 2236 0
 7629 0dea 154B     		ldr	r3, .L529+52
 7630 0dec 0022     		movs	r2, #0
 7631 0dee 1A80     		strh	r2, [r3]	@ movhi
2237:..\src/interruptions.c **** 
2238:..\src/interruptions.c ****                     if (interrupt_flag){
 7632              		.loc 1 2238 0
 7633 0df0 074B     		ldr	r3, .L529+4
 7634 0df2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7635 0df4 002B     		cmp	r3, #0
 7636 0df6 04D0     		beq	.L472
2239:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7637              		.loc 1 2239 0
 7638 0df8 054B     		ldr	r3, .L529+4
 7639 0dfa 0022     		movs	r2, #0
 7640 0dfc 1A70     		strb	r2, [r3]
2240:..\src/interruptions.c ****                         interrupt_manager();
 7641              		.loc 1 2240 0
 7642 0dfe FFF7FEFF 		bl	interrupt_manager
 7643              	.L472:
2241:..\src/interruptions.c ****                     }
2242:..\src/interruptions.c **** 
2243:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 7644              		.loc 1 2243 0
 7645 0e02 0A4B     		ldr	r3, .L529+32
 7646 0e04 0322     		movs	r2, #3
 7647 0e06 1A70     		strb	r2, [r3]
2244:..\src/interruptions.c ****                 }
2245:..\src/interruptions.c **** 
2246:..\src/interruptions.c ****             break;
 7648              		.loc 1 2246 0
 7649 0e08 60E0     		b	.L514
 7650              	.L530:
 7651 0e0a 00BF     		.align	2
 7652              	.L529:
 7653 0e0c 7E010000 		.word	emg_counter_2.10597
 7654 0e10 00000000 		.word	interrupt_flag
 7655 0e14 76010000 		.word	idx.10605
 7656 0e18 00000000 		.word	c_mem
 7657 0e1c 00000000 		.word	g_mem
 7658 0e20 00000000 		.word	g_meas
 7659 0e24 00000000 		.word	g_ref
 7660 0e28 00000000 		.word	emg_2_status
 7661 0e2c 00000000 		.word	joy_UD_status
 7662 0e30 00000000 		.word	ADC_buf
 7663 0e34 80010000 		.word	UD_mean_value.10600
 7664 0e38 00FCFFFF 		.word	-1024
 7665 0e3c 00000000 		.word	g_adc_meas
 7666 0e40 84010000 		.word	UD_counter.10598
 7667              	.L465:
2247:..\src/interruptions.c **** 
2248:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2249:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2250:..\src/interruptions.c ****                 UD_counter++;
 7668              		.loc 1 2250 0
 7669 0e44 954B     		ldr	r3, .L531
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 178


 7670 0e46 1B88     		ldrh	r3, [r3]
 7671 0e48 0133     		adds	r3, r3, #1
 7672 0e4a 9AB2     		uxth	r2, r3
 7673 0e4c 934B     		ldr	r3, .L531
 7674 0e4e 1A80     		strh	r2, [r3]	@ movhi
2251:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 7675              		.loc 1 2251 0
 7676 0e50 934B     		ldr	r3, .L531+4
 7677 0e52 B3F90430 		ldrsh	r3, [r3, #4]
 7678 0e56 1A46     		mov	r2, r3
 7679 0e58 924B     		ldr	r3, .L531+8
 7680 0e5a 1B68     		ldr	r3, [r3]
 7681 0e5c 1344     		add	r3, r3, r2
 7682 0e5e 914A     		ldr	r2, .L531+8
 7683 0e60 1360     		str	r3, [r2]
2252:..\src/interruptions.c **** 
2253:..\src/interruptions.c ****                 if (interrupt_flag){
 7684              		.loc 1 2253 0
 7685 0e62 914B     		ldr	r3, .L531+12
 7686 0e64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7687 0e66 002B     		cmp	r3, #0
 7688 0e68 04D0     		beq	.L473
2254:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7689              		.loc 1 2254 0
 7690 0e6a 8F4B     		ldr	r3, .L531+12
 7691 0e6c 0022     		movs	r2, #0
 7692 0e6e 1A70     		strb	r2, [r3]
2255:..\src/interruptions.c ****                     interrupt_manager();
 7693              		.loc 1 2255 0
 7694 0e70 FFF7FEFF 		bl	interrupt_manager
 7695              	.L473:
2256:..\src/interruptions.c ****                 }
2257:..\src/interruptions.c **** 
2258:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 7696              		.loc 1 2258 0
 7697 0e74 894B     		ldr	r3, .L531
 7698 0e76 1B88     		ldrh	r3, [r3]
 7699 0e78 C82B     		cmp	r3, #200
 7700 0e7a 29D1     		bne	.L515
2259:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 7701              		.loc 1 2259 0
 7702 0e7c 894B     		ldr	r3, .L531+8
 7703 0e7e 1B68     		ldr	r3, [r3]
 7704 0e80 8A4A     		ldr	r2, .L531+16
 7705 0e82 82FB0312 		smull	r1, r2, r2, r3
 7706 0e86 9211     		asrs	r2, r2, #6
 7707 0e88 DB17     		asrs	r3, r3, #31
 7708 0e8a D31A     		subs	r3, r2, r3
 7709 0e8c 854A     		ldr	r2, .L531+8
 7710 0e8e 1360     		str	r3, [r2]
2260:..\src/interruptions.c **** 
2261:..\src/interruptions.c ****                     if (interrupt_flag){
 7711              		.loc 1 2261 0
 7712 0e90 854B     		ldr	r3, .L531+12
 7713 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7714 0e94 002B     		cmp	r3, #0
 7715 0e96 04D0     		beq	.L475
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 179


2262:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7716              		.loc 1 2262 0
 7717 0e98 834B     		ldr	r3, .L531+12
 7718 0e9a 0022     		movs	r2, #0
 7719 0e9c 1A70     		strb	r2, [r3]
2263:..\src/interruptions.c ****                         interrupt_manager();
 7720              		.loc 1 2263 0
 7721 0e9e FFF7FEFF 		bl	interrupt_manager
 7722              	.L475:
2264:..\src/interruptions.c ****                     }
2265:..\src/interruptions.c **** 
2266:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 7723              		.loc 1 2266 0
 7724 0ea2 7E4B     		ldr	r3, .L531
 7725 0ea4 0022     		movs	r2, #0
 7726 0ea6 1A80     		strh	r2, [r3]	@ movhi
2267:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 7727              		.loc 1 2267 0
 7728 0ea8 814B     		ldr	r3, .L531+20
 7729 0eaa 0022     		movs	r2, #0
 7730 0eac 1A70     		strb	r2, [r3]
2268:..\src/interruptions.c ****                 }
2269:..\src/interruptions.c ****             break;
 7731              		.loc 1 2269 0
 7732 0eae 0FE0     		b	.L515
 7733              	.L466:
2270:..\src/interruptions.c **** 
2271:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2272:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 7734              		.loc 1 2272 0
 7735 0eb0 804B     		ldr	r3, .L531+24
 7736 0eb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7737 0eb4 002B     		cmp	r3, #0
 7738 0eb6 0DD1     		bne	.L516
 7739              		.loc 1 2272 0 is_stmt 0 discriminator 1
 7740 0eb8 7F4B     		ldr	r3, .L531+28
 7741 0eba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7742 0ebc 002B     		cmp	r3, #0
 7743 0ebe 09D1     		bne	.L516
2273:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 7744              		.loc 1 2273 0 is_stmt 1
 7745 0ec0 7B4B     		ldr	r3, .L531+20
 7746 0ec2 0222     		movs	r2, #2
 7747 0ec4 1A70     		strb	r2, [r3]
2274:..\src/interruptions.c ****             break;
 7748              		.loc 1 2274 0
 7749 0ec6 05E0     		b	.L516
 7750              	.L513:
2224:..\src/interruptions.c **** 
 7751              		.loc 1 2224 0
 7752 0ec8 00BF     		nop
 7753 0eca 04E0     		b	.L460
 7754              	.L514:
2246:..\src/interruptions.c **** 
 7755              		.loc 1 2246 0
 7756 0ecc 00BF     		nop
 7757 0ece 02E0     		b	.L460
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 180


 7758              	.L515:
2269:..\src/interruptions.c **** 
 7759              		.loc 1 2269 0
 7760 0ed0 00BF     		nop
 7761 0ed2 00E0     		b	.L460
 7762              	.L516:
 7763              		.loc 1 2274 0
 7764 0ed4 00BF     		nop
 7765              	.L460:
2275:..\src/interruptions.c ****         }
2276:..\src/interruptions.c **** 
2277:..\src/interruptions.c ****         if (interrupt_flag){
 7766              		.loc 1 2277 0
 7767 0ed6 744B     		ldr	r3, .L531+12
 7768 0ed8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7769 0eda 002B     		cmp	r3, #0
 7770 0edc 04D0     		beq	.L477
2278:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7771              		.loc 1 2278 0
 7772 0ede 724B     		ldr	r3, .L531+12
 7773 0ee0 0022     		movs	r2, #0
 7774 0ee2 1A70     		strb	r2, [r3]
2279:..\src/interruptions.c ****             interrupt_manager();
 7775              		.loc 1 2279 0
 7776 0ee4 FFF7FEFF 		bl	interrupt_manager
 7777              	.L477:
2280:..\src/interruptions.c ****         }
2281:..\src/interruptions.c ****             
2282:..\src/interruptions.c ****         switch (joy_LR_status) {
 7778              		.loc 1 2282 0
 7779 0ee8 744B     		ldr	r3, .L531+32
 7780 0eea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7781 0eec 052B     		cmp	r3, #5
 7782 0eee 00F2C380 		bhi	.L478
 7783 0ef2 01A2     		adr	r2, .L480
 7784 0ef4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7785              		.p2align 2
 7786              	.L480:
 7787 0ef8 110F0000 		.word	.L479+1
 7788 0efc AD0F0000 		.word	.L481+1
 7789 0f00 C10F0000 		.word	.L482+1
 7790 0f04 F50F0000 		.word	.L483+1
 7791 0f08 4F100000 		.word	.L484+1
 7792 0f0c 4F100000 		.word	.L484+1
 7793              		.p2align 1
 7794              	.L479:
2283:..\src/interruptions.c ****             case NORMAL:
2284:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 7795              		.loc 1 2284 0
 7796 0f10 634B     		ldr	r3, .L531+4
 7797 0f12 B3F90630 		ldrsh	r3, [r3, #6]
 7798 0f16 7B60     		str	r3, [r7, #4]
2285:..\src/interruptions.c **** 
2286:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 7799              		.loc 1 2286 0
 7800 0f18 694B     		ldr	r3, .L531+36
 7801 0f1a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 181


 7802 0f1c 7A68     		ldr	r2, [r7, #4]
 7803 0f1e D31A     		subs	r3, r2, r3
 7804 0f20 1846     		mov	r0, r3
 7805 0f22 FFF7FEFF 		bl	__aeabi_i2f
 7806 0f26 0446     		mov	r4, r0
 7807 0f28 654B     		ldr	r3, .L531+36
 7808 0f2a 1B68     		ldr	r3, [r3]
 7809 0f2c 1846     		mov	r0, r3
 7810 0f2e FFF7FEFF 		bl	__aeabi_i2f
 7811 0f32 0346     		mov	r3, r0
 7812 0f34 1946     		mov	r1, r3
 7813 0f36 2046     		mov	r0, r4
 7814 0f38 FFF7FEFF 		bl	__aeabi_fdiv
 7815 0f3c 0346     		mov	r3, r0
 7816 0f3e 1C46     		mov	r4, r3
 7817 0f40 604B     		ldr	r3, .L531+40
 7818 0f42 B3F8B432 		ldrh	r3, [r3, #692]
 7819 0f46 1846     		mov	r0, r3
 7820 0f48 FFF7FEFF 		bl	__aeabi_i2f
 7821 0f4c 0346     		mov	r3, r0
 7822 0f4e 1946     		mov	r1, r3
 7823 0f50 2046     		mov	r0, r4
 7824 0f52 FFF7FEFF 		bl	__aeabi_fmul
 7825 0f56 0346     		mov	r3, r0
 7826 0f58 1846     		mov	r0, r3
 7827 0f5a FFF7FEFF 		bl	__aeabi_f2iz
 7828 0f5e 0346     		mov	r3, r0
 7829 0f60 7B60     		str	r3, [r7, #4]
2287:..\src/interruptions.c ****                 
2288:..\src/interruptions.c ****                 if (interrupt_flag){
 7830              		.loc 1 2288 0
 7831 0f62 514B     		ldr	r3, .L531+12
 7832 0f64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7833 0f66 002B     		cmp	r3, #0
 7834 0f68 04D0     		beq	.L485
2289:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7835              		.loc 1 2289 0
 7836 0f6a 4F4B     		ldr	r3, .L531+12
 7837 0f6c 0022     		movs	r2, #0
 7838 0f6e 1A70     		strb	r2, [r3]
2290:..\src/interruptions.c ****                     interrupt_manager();
 7839              		.loc 1 2290 0
 7840 0f70 FFF7FEFF 		bl	interrupt_manager
 7841              	.L485:
2291:..\src/interruptions.c ****                 }
2292:..\src/interruptions.c **** 
2293:..\src/interruptions.c ****                 //Saturation
2294:..\src/interruptions.c ****                 if (i_aux < -1024)
 7842              		.loc 1 2294 0
 7843 0f74 7B68     		ldr	r3, [r7, #4]
 7844 0f76 13F5806F 		cmn	r3, #1024
 7845 0f7a 01DA     		bge	.L486
2295:..\src/interruptions.c ****                     i_aux = -1024;
 7846              		.loc 1 2295 0
 7847 0f7c 524B     		ldr	r3, .L531+44
 7848 0f7e 7B60     		str	r3, [r7, #4]
 7849              	.L486:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 182


2296:..\src/interruptions.c ****                 if (i_aux > 1024)
 7850              		.loc 1 2296 0
 7851 0f80 7B68     		ldr	r3, [r7, #4]
 7852 0f82 B3F5806F 		cmp	r3, #1024
 7853 0f86 02DD     		ble	.L487
2297:..\src/interruptions.c ****                     i_aux = 1024;
 7854              		.loc 1 2297 0
 7855 0f88 4FF48063 		mov	r3, #1024
 7856 0f8c 7B60     		str	r3, [r7, #4]
 7857              	.L487:
2298:..\src/interruptions.c **** 
2299:..\src/interruptions.c ****                 if (interrupt_flag){
 7858              		.loc 1 2299 0
 7859 0f8e 464B     		ldr	r3, .L531+12
 7860 0f90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7861 0f92 002B     		cmp	r3, #0
 7862 0f94 04D0     		beq	.L488
2300:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7863              		.loc 1 2300 0
 7864 0f96 444B     		ldr	r3, .L531+12
 7865 0f98 0022     		movs	r2, #0
 7866 0f9a 1A70     		strb	r2, [r3]
2301:..\src/interruptions.c ****                     interrupt_manager();
 7867              		.loc 1 2301 0
 7868 0f9c FFF7FEFF 		bl	interrupt_manager
 7869              	.L488:
2302:..\src/interruptions.c ****                 }
2303:..\src/interruptions.c **** 
2304:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 7870              		.loc 1 2304 0
 7871 0fa0 7B68     		ldr	r3, [r7, #4]
 7872 0fa2 1BB2     		sxth	r3, r3
 7873 0fa4 1A46     		mov	r2, r3
 7874 0fa6 494B     		ldr	r3, .L531+48
 7875 0fa8 1A62     		str	r2, [r3, #32]
2305:..\src/interruptions.c **** 
2306:..\src/interruptions.c ****             break;
 7876              		.loc 1 2306 0
 7877 0faa 65E0     		b	.L478
 7878              	.L481:
2307:..\src/interruptions.c **** 
2308:..\src/interruptions.c ****             case RESET: // reset variables
2309:..\src/interruptions.c ****                 LR_counter = 0;
 7879              		.loc 1 2309 0
 7880 0fac 484B     		ldr	r3, .L531+52
 7881 0fae 0022     		movs	r2, #0
 7882 0fb0 1A80     		strh	r2, [r3]	@ movhi
2310:..\src/interruptions.c ****                 LR_mean_value = 0;
 7883              		.loc 1 2310 0
 7884 0fb2 434B     		ldr	r3, .L531+36
 7885 0fb4 0022     		movs	r2, #0
 7886 0fb6 1A60     		str	r2, [r3]
2311:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 7887              		.loc 1 2311 0
 7888 0fb8 404B     		ldr	r3, .L531+32
 7889 0fba 0422     		movs	r2, #4
 7890 0fbc 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 183


2312:..\src/interruptions.c ****             break;
 7891              		.loc 1 2312 0
 7892 0fbe 5BE0     		b	.L478
 7893              	.L482:
2313:..\src/interruptions.c **** 
2314:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2315:..\src/interruptions.c ****                 LR_counter++;
 7894              		.loc 1 2315 0
 7895 0fc0 434B     		ldr	r3, .L531+52
 7896 0fc2 1B88     		ldrh	r3, [r3]
 7897 0fc4 0133     		adds	r3, r3, #1
 7898 0fc6 9AB2     		uxth	r2, r3
 7899 0fc8 414B     		ldr	r3, .L531+52
 7900 0fca 1A80     		strh	r2, [r3]	@ movhi
2316:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 7901              		.loc 1 2316 0
 7902 0fcc 404B     		ldr	r3, .L531+52
 7903 0fce 1B88     		ldrh	r3, [r3]
 7904 0fd0 642B     		cmp	r3, #100
 7905 0fd2 4CD1     		bne	.L517
2317:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 7906              		.loc 1 2317 0
 7907 0fd4 3E4B     		ldr	r3, .L531+52
 7908 0fd6 0022     		movs	r2, #0
 7909 0fd8 1A80     		strh	r2, [r3]	@ movhi
2318:..\src/interruptions.c **** 
2319:..\src/interruptions.c ****                     if (interrupt_flag){
 7910              		.loc 1 2319 0
 7911 0fda 334B     		ldr	r3, .L531+12
 7912 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7913 0fde 002B     		cmp	r3, #0
 7914 0fe0 04D0     		beq	.L490
2320:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7915              		.loc 1 2320 0
 7916 0fe2 314B     		ldr	r3, .L531+12
 7917 0fe4 0022     		movs	r2, #0
 7918 0fe6 1A70     		strb	r2, [r3]
2321:..\src/interruptions.c ****                         interrupt_manager();
 7919              		.loc 1 2321 0
 7920 0fe8 FFF7FEFF 		bl	interrupt_manager
 7921              	.L490:
2322:..\src/interruptions.c ****                     }
2323:..\src/interruptions.c **** 
2324:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 7922              		.loc 1 2324 0
 7923 0fec 334B     		ldr	r3, .L531+32
 7924 0fee 0322     		movs	r2, #3
 7925 0ff0 1A70     		strb	r2, [r3]
2325:..\src/interruptions.c ****                 }
2326:..\src/interruptions.c ****             break;
 7926              		.loc 1 2326 0
 7927 0ff2 3CE0     		b	.L517
 7928              	.L483:
2327:..\src/interruptions.c **** 
2328:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2329:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2330:..\src/interruptions.c ****                 LR_counter++;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 184


 7929              		.loc 1 2330 0
 7930 0ff4 364B     		ldr	r3, .L531+52
 7931 0ff6 1B88     		ldrh	r3, [r3]
 7932 0ff8 0133     		adds	r3, r3, #1
 7933 0ffa 9AB2     		uxth	r2, r3
 7934 0ffc 344B     		ldr	r3, .L531+52
 7935 0ffe 1A80     		strh	r2, [r3]	@ movhi
2331:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 7936              		.loc 1 2331 0
 7937 1000 274B     		ldr	r3, .L531+4
 7938 1002 B3F90630 		ldrsh	r3, [r3, #6]
 7939 1006 1A46     		mov	r2, r3
 7940 1008 2D4B     		ldr	r3, .L531+36
 7941 100a 1B68     		ldr	r3, [r3]
 7942 100c 1344     		add	r3, r3, r2
 7943 100e 2C4A     		ldr	r2, .L531+36
 7944 1010 1360     		str	r3, [r2]
2332:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 7945              		.loc 1 2332 0
 7946 1012 2F4B     		ldr	r3, .L531+52
 7947 1014 1B88     		ldrh	r3, [r3]
 7948 1016 C82B     		cmp	r3, #200
 7949 1018 2BD1     		bne	.L518
2333:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 7950              		.loc 1 2333 0
 7951 101a 294B     		ldr	r3, .L531+36
 7952 101c 1B68     		ldr	r3, [r3]
 7953 101e 234A     		ldr	r2, .L531+16
 7954 1020 82FB0312 		smull	r1, r2, r2, r3
 7955 1024 9211     		asrs	r2, r2, #6
 7956 1026 DB17     		asrs	r3, r3, #31
 7957 1028 D31A     		subs	r3, r2, r3
 7958 102a 254A     		ldr	r2, .L531+36
 7959 102c 1360     		str	r3, [r2]
2334:..\src/interruptions.c ****                     
2335:..\src/interruptions.c ****                     if (interrupt_flag){
 7960              		.loc 1 2335 0
 7961 102e 1E4B     		ldr	r3, .L531+12
 7962 1030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7963 1032 002B     		cmp	r3, #0
 7964 1034 04D0     		beq	.L492
2336:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 7965              		.loc 1 2336 0
 7966 1036 1C4B     		ldr	r3, .L531+12
 7967 1038 0022     		movs	r2, #0
 7968 103a 1A70     		strb	r2, [r3]
2337:..\src/interruptions.c ****                         interrupt_manager();
 7969              		.loc 1 2337 0
 7970 103c FFF7FEFF 		bl	interrupt_manager
 7971              	.L492:
2338:..\src/interruptions.c ****                     }
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 7972              		.loc 1 2340 0
 7973 1040 234B     		ldr	r3, .L531+52
 7974 1042 0022     		movs	r2, #0
 7975 1044 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 185


2341:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 7976              		.loc 1 2341 0
 7977 1046 1D4B     		ldr	r3, .L531+32
 7978 1048 0022     		movs	r2, #0
 7979 104a 1A70     		strb	r2, [r3]
2342:..\src/interruptions.c ****                 }
2343:..\src/interruptions.c ****             break;
 7980              		.loc 1 2343 0
 7981 104c 11E0     		b	.L518
 7982              	.L484:
2344:..\src/interruptions.c **** 
2345:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2346:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 7983              		.loc 1 2346 0
 7984 104e 194B     		ldr	r3, .L531+24
 7985 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7986 1052 002B     		cmp	r3, #0
 7987 1054 0FD1     		bne	.L519
 7988              		.loc 1 2346 0 is_stmt 0 discriminator 1
 7989 1056 184B     		ldr	r3, .L531+28
 7990 1058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7991 105a 002B     		cmp	r3, #0
 7992 105c 0BD1     		bne	.L519
 7993              		.loc 1 2346 0 discriminator 2
 7994 105e 144B     		ldr	r3, .L531+20
 7995 1060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7996 1062 002B     		cmp	r3, #0
 7997 1064 07D1     		bne	.L519
2347:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 7998              		.loc 1 2347 0 is_stmt 1
 7999 1066 154B     		ldr	r3, .L531+32
 8000 1068 0222     		movs	r2, #2
 8001 106a 1A70     		strb	r2, [r3]
2348:..\src/interruptions.c ****             break;
 8002              		.loc 1 2348 0
 8003 106c 03E0     		b	.L519
 8004              	.L517:
2326:..\src/interruptions.c **** 
 8005              		.loc 1 2326 0
 8006 106e 00BF     		nop
 8007 1070 02E0     		b	.L478
 8008              	.L518:
2343:..\src/interruptions.c **** 
 8009              		.loc 1 2343 0
 8010 1072 00BF     		nop
 8011 1074 00E0     		b	.L478
 8012              	.L519:
 8013              		.loc 1 2348 0
 8014 1076 00BF     		nop
 8015              	.L478:
2349:..\src/interruptions.c ****         }
2350:..\src/interruptions.c ****        
2351:..\src/interruptions.c ****         if (interrupt_flag){
 8016              		.loc 1 2351 0
 8017 1078 0B4B     		ldr	r3, .L531+12
 8018 107a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8019 107c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 186


 8020 107e 04D0     		beq	.L459
2352:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8021              		.loc 1 2352 0
 8022 1080 094B     		ldr	r3, .L531+12
 8023 1082 0022     		movs	r2, #0
 8024 1084 1A70     		strb	r2, [r3]
2353:..\src/interruptions.c ****             interrupt_manager();
 8025              		.loc 1 2353 0
 8026 1086 FFF7FEFF 		bl	interrupt_manager
 8027              	.L459:
2354:..\src/interruptions.c ****         }
2355:..\src/interruptions.c ****     }
2356:..\src/interruptions.c ****     
2357:..\src/interruptions.c ****     // Read also EMG additional sensors port
2358:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8028              		.loc 1 2358 0
 8029 108a 124B     		ldr	r3, .L531+56
 8030 108c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8031 108e 062B     		cmp	r3, #6
 8032 1090 73D9     		bls	.L520
2359:..\src/interruptions.c ****         
2360:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8033              		.loc 1 2360 0
 8034 1092 114B     		ldr	r3, .L531+60
 8035 1094 0022     		movs	r2, #0
 8036 1096 1A70     		strb	r2, [r3]
 8037 1098 6BE0     		b	.L495
 8038              	.L532:
 8039 109a 00BF     		.align	2
 8040              	.L531:
 8041 109c 84010000 		.word	UD_counter.10598
 8042 10a0 00000000 		.word	ADC_buf
 8043 10a4 80010000 		.word	UD_mean_value.10600
 8044 10a8 00000000 		.word	interrupt_flag
 8045 10ac 1F85EB51 		.word	1374389535
 8046 10b0 00000000 		.word	joy_UD_status
 8047 10b4 00000000 		.word	emg_1_status
 8048 10b8 00000000 		.word	emg_2_status
 8049 10bc 00000000 		.word	joy_LR_status
 8050 10c0 88010000 		.word	LR_mean_value.10601
 8051 10c4 00000000 		.word	c_mem
 8052 10c8 00FCFFFF 		.word	-1024
 8053 10cc 00000000 		.word	g_adc_meas
 8054 10d0 8C010000 		.word	LR_counter.10599
 8055 10d4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8056 10d8 76010000 		.word	idx.10605
 8057              	.L502:
2361:..\src/interruptions.c ****             
2362:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8058              		.loc 1 2362 0
 8059 10dc 294B     		ldr	r3, .L533
 8060 10de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8061 10e0 0633     		adds	r3, r3, #6
 8062 10e2 294A     		ldr	r2, .L533+4
 8063 10e4 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8064 10e8 7B60     		str	r3, [r7, #4]
2363:..\src/interruptions.c ****             if (i_aux < 0) 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 187


 8065              		.loc 1 2363 0
 8066 10ea 7B68     		ldr	r3, [r7, #4]
 8067 10ec 002B     		cmp	r3, #0
 8068 10ee 01DA     		bge	.L496
2364:..\src/interruptions.c ****                 i_aux = 0;
 8069              		.loc 1 2364 0
 8070 10f0 0023     		movs	r3, #0
 8071 10f2 7B60     		str	r3, [r7, #4]
 8072              	.L496:
2365:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8073              		.loc 1 2365 0
 8074 10f4 234B     		ldr	r3, .L533
 8075 10f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8076 10f8 0233     		adds	r3, r3, #2
 8077 10fa DB00     		lsls	r3, r3, #3
 8078 10fc 234A     		ldr	r2, .L533+8
 8079 10fe 1344     		add	r3, r3, r2
 8080 1100 1946     		mov	r1, r3
 8081 1102 7868     		ldr	r0, [r7, #4]
 8082 1104 FFF7FEFF 		bl	filter
 8083 1108 7860     		str	r0, [r7, #4]
2366:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8084              		.loc 1 2366 0
 8085 110a 7B68     		ldr	r3, [r7, #4]
 8086 110c 9B02     		lsls	r3, r3, #10
 8087 110e 002B     		cmp	r3, #0
 8088 1110 01DA     		bge	.L497
 8089 1112 03F2FF33 		addw	r3, r3, #1023
 8090              	.L497:
 8091 1116 9B12     		asrs	r3, r3, #10
 8092 1118 7B60     		str	r3, [r7, #4]
2367:..\src/interruptions.c **** 
2368:..\src/interruptions.c ****             if (interrupt_flag){
 8093              		.loc 1 2368 0
 8094 111a 1D4B     		ldr	r3, .L533+12
 8095 111c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8096 111e 002B     		cmp	r3, #0
 8097 1120 04D0     		beq	.L498
2369:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8098              		.loc 1 2369 0
 8099 1122 1B4B     		ldr	r3, .L533+12
 8100 1124 0022     		movs	r2, #0
 8101 1126 1A70     		strb	r2, [r3]
2370:..\src/interruptions.c ****                 interrupt_manager();
 8102              		.loc 1 2370 0
 8103 1128 FFF7FEFF 		bl	interrupt_manager
 8104              	.L498:
2371:..\src/interruptions.c ****             }
2372:..\src/interruptions.c ****             //Saturation
2373:..\src/interruptions.c ****             if (i_aux < 0)
 8105              		.loc 1 2373 0
 8106 112c 7B68     		ldr	r3, [r7, #4]
 8107 112e 002B     		cmp	r3, #0
 8108 1130 02DA     		bge	.L499
2374:..\src/interruptions.c ****                 i_aux = 0;
 8109              		.loc 1 2374 0
 8110 1132 0023     		movs	r3, #0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 188


 8111 1134 7B60     		str	r3, [r7, #4]
 8112 1136 06E0     		b	.L500
 8113              	.L499:
2375:..\src/interruptions.c ****             else 
2376:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8114              		.loc 1 2376 0
 8115 1138 7B68     		ldr	r3, [r7, #4]
 8116 113a B3F5806F 		cmp	r3, #1024
 8117 113e 02DD     		ble	.L500
2377:..\src/interruptions.c ****                     i_aux = 1024;
 8118              		.loc 1 2377 0
 8119 1140 4FF48063 		mov	r3, #1024
 8120 1144 7B60     		str	r3, [r7, #4]
 8121              	.L500:
2378:..\src/interruptions.c ****             
2379:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8122              		.loc 1 2379 0
 8123 1146 0F4B     		ldr	r3, .L533
 8124 1148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8125 114a 1249     		ldr	r1, .L533+16
 8126 114c 0233     		adds	r3, r3, #2
 8127 114e 7A68     		ldr	r2, [r7, #4]
 8128 1150 41F82320 		str	r2, [r1, r3, lsl #2]
2380:..\src/interruptions.c **** 
2381:..\src/interruptions.c ****             if (interrupt_flag){
 8129              		.loc 1 2381 0
 8130 1154 0E4B     		ldr	r3, .L533+12
 8131 1156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8132 1158 002B     		cmp	r3, #0
 8133 115a 04D0     		beq	.L501
2382:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8134              		.loc 1 2382 0
 8135 115c 0C4B     		ldr	r3, .L533+12
 8136 115e 0022     		movs	r2, #0
 8137 1160 1A70     		strb	r2, [r3]
2383:..\src/interruptions.c ****                 interrupt_manager();
 8138              		.loc 1 2383 0
 8139 1162 FFF7FEFF 		bl	interrupt_manager
 8140              	.L501:
2360:..\src/interruptions.c ****             
 8141              		.loc 1 2360 0 discriminator 2
 8142 1166 074B     		ldr	r3, .L533
 8143 1168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8144 116a 0133     		adds	r3, r3, #1
 8145 116c DAB2     		uxtb	r2, r3
 8146 116e 054B     		ldr	r3, .L533
 8147 1170 1A70     		strb	r2, [r3]
 8148              	.L495:
2360:..\src/interruptions.c ****             
 8149              		.loc 1 2360 0 is_stmt 0 discriminator 1
 8150 1172 044B     		ldr	r3, .L533
 8151 1174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8152 1176 052B     		cmp	r3, #5
 8153 1178 B0D9     		bls	.L502
 8154              	.L520:
2384:..\src/interruptions.c ****             }
2385:..\src/interruptions.c ****         }
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 189


2386:..\src/interruptions.c ****     }
2387:..\src/interruptions.c ****     
2388:..\src/interruptions.c **** }
 8155              		.loc 1 2388 0 is_stmt 1
 8156 117a 00BF     		nop
 8157 117c 0C37     		adds	r7, r7, #12
 8158              		.cfi_def_cfa_offset 20
 8159 117e BD46     		mov	sp, r7
 8160              		.cfi_def_cfa_register 13
 8161              		@ sp needed
 8162 1180 F0BD     		pop	{r4, r5, r6, r7, pc}
 8163              	.L534:
 8164 1182 00BF     		.align	2
 8165              	.L533:
 8166 1184 76010000 		.word	idx.10605
 8167 1188 00000000 		.word	ADC_buf
 8168 118c 00000000 		.word	filt_emg
 8169 1190 00000000 		.word	interrupt_flag
 8170 1194 00000000 		.word	g_adc_meas
 8171              		.cfi_endproc
 8172              	.LFE73:
 8173              		.size	analog_read_end, .-analog_read_end
 8174              		.section	.text.overcurrent_control,"ax",%progbits
 8175              		.align	2
 8176              		.global	overcurrent_control
 8177              		.thumb
 8178              		.thumb_func
 8179              		.type	overcurrent_control, %function
 8180              	overcurrent_control:
 8181              	.LFB74:
2389:..\src/interruptions.c **** 
2390:..\src/interruptions.c **** //==============================================================================
2391:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2392:..\src/interruptions.c **** //==============================================================================
2393:..\src/interruptions.c **** 
2394:..\src/interruptions.c **** void overcurrent_control() {
 8182              		.loc 1 2394 0
 8183              		.cfi_startproc
 8184              		@ args = 0, pretend = 0, frame = 8
 8185              		@ frame_needed = 1, uses_anonymous_args = 0
 8186              		@ link register save eliminated.
 8187 0000 80B4     		push	{r7}
 8188              		.cfi_def_cfa_offset 4
 8189              		.cfi_offset 7, -4
 8190 0002 83B0     		sub	sp, sp, #12
 8191              		.cfi_def_cfa_offset 16
 8192 0004 00AF     		add	r7, sp, #0
 8193              		.cfi_def_cfa_register 7
 8194              	.LBB10:
2395:..\src/interruptions.c ****     
2396:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8195              		.loc 1 2396 0
 8196 0006 0023     		movs	r3, #0
 8197 0008 FB71     		strb	r3, [r7, #7]
 8198 000a 61E0     		b	.L536
 8199              	.L540:
2397:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 190


 8200              		.loc 1 2397 0
 8201 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8202 000e 3449     		ldr	r1, .L542
 8203 0010 1346     		mov	r3, r2
 8204 0012 DB00     		lsls	r3, r3, #3
 8205 0014 9B1A     		subs	r3, r3, r2
 8206 0016 1B01     		lsls	r3, r3, #4
 8207 0018 0B44     		add	r3, r3, r1
 8208 001a 03F58673 		add	r3, r3, #268
 8209 001e B3F90030 		ldrsh	r3, [r3]
 8210 0022 002B     		cmp	r3, #0
 8211 0024 51D0     		beq	.L537
2398:..\src/interruptions.c ****             // if the current is over the limit
2399:..\src/interruptions.c ****             if (g_meas[g_mem.motor[i].encoder_line].curr > c_mem.motor[i].current_limit) {
 8212              		.loc 1 2399 0
 8213 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8214 0028 2E49     		ldr	r1, .L542+4
 8215 002a 1346     		mov	r3, r2
 8216 002c DB00     		lsls	r3, r3, #3
 8217 002e 9B1A     		subs	r3, r3, r2
 8218 0030 1B01     		lsls	r3, r3, #4
 8219 0032 0B44     		add	r3, r3, r1
 8220 0034 03F58873 		add	r3, r3, #272
 8221 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8222 003a 1946     		mov	r1, r3
 8223 003c 2A4A     		ldr	r2, .L542+8
 8224 003e 3423     		movs	r3, #52
 8225 0040 03FB01F3 		mul	r3, r3, r1
 8226 0044 1344     		add	r3, r3, r2
 8227 0046 0C33     		adds	r3, r3, #12
 8228 0048 1968     		ldr	r1, [r3]
 8229 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8230 004c 2448     		ldr	r0, .L542
 8231 004e 1346     		mov	r3, r2
 8232 0050 DB00     		lsls	r3, r3, #3
 8233 0052 9B1A     		subs	r3, r3, r2
 8234 0054 1B01     		lsls	r3, r3, #4
 8235 0056 0344     		add	r3, r3, r0
 8236 0058 03F58673 		add	r3, r3, #268
 8237 005c B3F90030 		ldrsh	r3, [r3]
 8238 0060 9942     		cmp	r1, r3
 8239 0062 07DD     		ble	.L538
2400:..\src/interruptions.c ****                 //decrease pwm_limit
2401:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8240              		.loc 1 2401 0
 8241 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8242 0066 214A     		ldr	r2, .L542+12
 8243 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8244 006a 013A     		subs	r2, r2, #1
 8245 006c D1B2     		uxtb	r1, r2
 8246 006e 1F4A     		ldr	r2, .L542+12
 8247 0070 D154     		strb	r1, [r2, r3]
 8248 0072 1CE0     		b	.L541
 8249              	.L538:
2402:..\src/interruptions.c ****             // if the current is in the safe zone
2403:..\src/interruptions.c ****             } else if (g_meas[i].curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8250              		.loc 1 2403 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 191


 8251 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8252 0076 1C4A     		ldr	r2, .L542+8
 8253 0078 3421     		movs	r1, #52
 8254 007a 01FB03F3 		mul	r3, r1, r3
 8255 007e 1344     		add	r3, r3, r2
 8256 0080 0C33     		adds	r3, r3, #12
 8257 0082 1968     		ldr	r1, [r3]
 8258 0084 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8259 0086 1648     		ldr	r0, .L542
 8260 0088 1346     		mov	r3, r2
 8261 008a DB00     		lsls	r3, r3, #3
 8262 008c 9B1A     		subs	r3, r3, r2
 8263 008e 1B01     		lsls	r3, r3, #4
 8264 0090 0344     		add	r3, r3, r0
 8265 0092 03F58673 		add	r3, r3, #268
 8266 0096 B3F90030 		ldrsh	r3, [r3]
 8267 009a 0A3B     		subs	r3, r3, #10
 8268 009c 9942     		cmp	r1, r3
 8269 009e 06DA     		bge	.L541
2404:..\src/interruptions.c ****                 //increase pwm_limit
2405:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8270              		.loc 1 2405 0
 8271 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8272 00a2 124A     		ldr	r2, .L542+12
 8273 00a4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8274 00a6 0132     		adds	r2, r2, #1
 8275 00a8 D1B2     		uxtb	r1, r2
 8276 00aa 104A     		ldr	r2, .L542+12
 8277 00ac D154     		strb	r1, [r2, r3]
 8278              	.L541:
2406:..\src/interruptions.c ****             }
2407:..\src/interruptions.c **** 
2408:..\src/interruptions.c ****             // Bound pwm_limit
2409:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2410:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2411:..\src/interruptions.c ****             else 
2412:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8279              		.loc 1 2412 0
 8280 00ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8281 00b0 0E4A     		ldr	r2, .L542+12
 8282 00b2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8283 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8284 00b6 0E49     		ldr	r1, .L542+16
 8285 00b8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8286 00ba 9A42     		cmp	r2, r3
 8287 00bc 05D9     		bls	.L537
2413:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8288              		.loc 1 2413 0
 8289 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8290 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8291 00c2 0B49     		ldr	r1, .L542+16
 8292 00c4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8293 00c6 094A     		ldr	r2, .L542+12
 8294 00c8 D154     		strb	r1, [r2, r3]
 8295              	.L537:
2396:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8296              		.loc 1 2396 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 192


 8297 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8298 00cc 0133     		adds	r3, r3, #1
 8299 00ce FB71     		strb	r3, [r7, #7]
 8300              	.L536:
2396:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8301              		.loc 1 2396 0 is_stmt 0 discriminator 1
 8302 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8303 00d2 012B     		cmp	r3, #1
 8304 00d4 9AD9     		bls	.L540
 8305              	.LBE10:
2414:..\src/interruptions.c ****         }
2415:..\src/interruptions.c ****     }
2416:..\src/interruptions.c **** }
 8306              		.loc 1 2416 0 is_stmt 1
 8307 00d6 00BF     		nop
 8308 00d8 0C37     		adds	r7, r7, #12
 8309              		.cfi_def_cfa_offset 4
 8310 00da BD46     		mov	sp, r7
 8311              		.cfi_def_cfa_register 13
 8312              		@ sp needed
 8313 00dc 80BC     		pop	{r7}
 8314              		.cfi_restore 7
 8315              		.cfi_def_cfa_offset 0
 8316 00de 7047     		bx	lr
 8317              	.L543:
 8318              		.align	2
 8319              	.L542:
 8320 00e0 00000000 		.word	c_mem
 8321 00e4 00000000 		.word	g_mem
 8322 00e8 00000000 		.word	g_meas
 8323 00ec 00000000 		.word	dev_pwm_limit
 8324 00f0 00000000 		.word	dev_pwm_sat
 8325              		.cfi_endproc
 8326              	.LFE74:
 8327              		.size	overcurrent_control, .-overcurrent_control
 8328              		.section	.text.pwm_limit_search,"ax",%progbits
 8329              		.align	2
 8330              		.global	pwm_limit_search
 8331              		.thumb
 8332              		.thumb_func
 8333              		.type	pwm_limit_search, %function
 8334              	pwm_limit_search:
 8335              	.LFB75:
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c **** //==============================================================================
2419:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2420:..\src/interruptions.c **** //==============================================================================
2421:..\src/interruptions.c **** 
2422:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 8336              		.loc 1 2422 0
 8337              		.cfi_startproc
 8338              		@ args = 0, pretend = 0, frame = 16
 8339              		@ frame_needed = 1, uses_anonymous_args = 0
 8340              		@ link register save eliminated.
 8341 0000 80B4     		push	{r7}
 8342              		.cfi_def_cfa_offset 4
 8343              		.cfi_offset 7, -4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 193


 8344 0002 85B0     		sub	sp, sp, #20
 8345              		.cfi_def_cfa_offset 24
 8346 0004 00AF     		add	r7, sp, #0
 8347              		.cfi_def_cfa_register 7
 8348 0006 0346     		mov	r3, r0
 8349 0008 FB71     		strb	r3, [r7, #7]
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****     uint8 CYDATA index;
2425:..\src/interruptions.c ****     uint16 CYDATA max_tension = 25500;
 8350              		.loc 1 2425 0
 8351 000a 46F29C33 		movw	r3, #25500
 8352 000e FB81     		strh	r3, [r7, #14]	@ movhi
2426:..\src/interruptions.c ****     uint16 CYDATA min_tension = 11500;
 8353              		.loc 1 2426 0
 8354 0010 42F6EC43 		movw	r3, #11500
 8355 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2427:..\src/interruptions.c ****     
2428:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 8356              		.loc 1 2428 0
 8357 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8358 0018 144A     		ldr	r2, .L549
 8359 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8360 001e FB89     		ldrh	r3, [r7, #14]
 8361 0020 9A42     		cmp	r2, r3
 8362 0022 04DD     		ble	.L545
2429:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 8363              		.loc 1 2429 0
 8364 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8365 0026 124A     		ldr	r2, .L549+4
 8366 0028 0021     		movs	r1, #0
 8367 002a D154     		strb	r1, [r2, r3]
2430:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2431:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 100;
2432:..\src/interruptions.c ****     } else {
2433:..\src/interruptions.c ****         index = (uint8)((dev_tension[mot_idx] - min_tension) >> 9);
2434:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
2435:..\src/interruptions.c ****     }
2436:..\src/interruptions.c **** }
 8368              		.loc 1 2436 0
 8369 002c 19E0     		b	.L548
 8370              	.L545:
2430:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 8371              		.loc 1 2430 0
 8372 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8373 0030 0E4A     		ldr	r2, .L549
 8374 0032 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8375 0036 BB89     		ldrh	r3, [r7, #12]
 8376 0038 9A42     		cmp	r2, r3
 8377 003a 04DA     		bge	.L547
2431:..\src/interruptions.c ****     } else {
 8378              		.loc 1 2431 0
 8379 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8380 003e 0C4A     		ldr	r2, .L549+4
 8381 0040 6421     		movs	r1, #100
 8382 0042 D154     		strb	r1, [r2, r3]
 8383              		.loc 1 2436 0
 8384 0044 0DE0     		b	.L548
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 194


 8385              	.L547:
2433:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = pwm_preload_values[index];
 8386              		.loc 1 2433 0
 8387 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8388 0048 084A     		ldr	r2, .L549
 8389 004a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8390 004e BB89     		ldrh	r3, [r7, #12]
 8391 0050 D31A     		subs	r3, r2, r3
 8392 0052 5B12     		asrs	r3, r3, #9
 8393 0054 FB72     		strb	r3, [r7, #11]
2434:..\src/interruptions.c ****     }
 8394              		.loc 1 2434 0
 8395 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8396 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 8397 005a 0649     		ldr	r1, .L549+8
 8398 005c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 8399 005e 044A     		ldr	r2, .L549+4
 8400 0060 D154     		strb	r1, [r2, r3]
 8401              	.L548:
 8402              		.loc 1 2436 0
 8403 0062 00BF     		nop
 8404 0064 1437     		adds	r7, r7, #20
 8405              		.cfi_def_cfa_offset 4
 8406 0066 BD46     		mov	sp, r7
 8407              		.cfi_def_cfa_register 13
 8408              		@ sp needed
 8409 0068 80BC     		pop	{r7}
 8410              		.cfi_restore 7
 8411              		.cfi_def_cfa_offset 0
 8412 006a 7047     		bx	lr
 8413              	.L550:
 8414              		.align	2
 8415              	.L549:
 8416 006c 00000000 		.word	dev_tension
 8417 0070 00000000 		.word	dev_pwm_sat
 8418 0074 00000000 		.word	pwm_preload_values
 8419              		.cfi_endproc
 8420              	.LFE75:
 8421              		.size	pwm_limit_search, .-pwm_limit_search
 8422              		.section	.text.cycles_counter_update,"ax",%progbits
 8423              		.align	2
 8424              		.global	cycles_counter_update
 8425              		.thumb
 8426              		.thumb_func
 8427              		.type	cycles_counter_update, %function
 8428              	cycles_counter_update:
 8429              	.LFB76:
2437:..\src/interruptions.c **** 
2438:..\src/interruptions.c **** //==============================================================================
2439:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2440:..\src/interruptions.c **** //==============================================================================
2441:..\src/interruptions.c **** 
2442:..\src/interruptions.c **** void cycles_counter_update() {
 8430              		.loc 1 2442 0
 8431              		.cfi_startproc
 8432              		@ args = 0, pretend = 0, frame = 24
 8433              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 195


 8434 0000 80B5     		push	{r7, lr}
 8435              		.cfi_def_cfa_offset 8
 8436              		.cfi_offset 7, -8
 8437              		.cfi_offset 14, -4
 8438 0002 86B0     		sub	sp, sp, #24
 8439              		.cfi_def_cfa_offset 32
 8440 0004 00AF     		add	r7, sp, #0
 8441              		.cfi_def_cfa_register 7
2443:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2444:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2445:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2446:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2447:..\src/interruptions.c ****     static int32 thr_pos = 0, max_pos = 0;
2448:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2449:..\src/interruptions.c ****     int32 curr_pos, curr_off, curr_ref;
2450:..\src/interruptions.c ****     int32 step;
2451:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2452:..\src/interruptions.c **** 
2453:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 8442              		.loc 1 2453 0
 8443 0006 AB4B     		ldr	r3, .L597
 8444 0008 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8445 000c 1946     		mov	r1, r3
 8446 000e AA4A     		ldr	r2, .L597+4
 8447 0010 3423     		movs	r3, #52
 8448 0012 03FB01F3 		mul	r3, r3, r1
 8449 0016 1344     		add	r3, r3, r2
 8450 0018 1A68     		ldr	r2, [r3]
 8451 001a A64B     		ldr	r3, .L597
 8452 001c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8453 0020 1846     		mov	r0, r3
 8454 0022 A449     		ldr	r1, .L597
 8455 0024 0346     		mov	r3, r0
 8456 0026 5B00     		lsls	r3, r3, #1
 8457 0028 0344     		add	r3, r3, r0
 8458 002a 1B01     		lsls	r3, r3, #4
 8459 002c 0B44     		add	r3, r3, r1
 8460 002e 03F29513 		addw	r3, r3, #405
 8461 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8462 0034 42FA03F3 		asr	r3, r2, r3
 8463 0038 FB60     		str	r3, [r7, #12]
2454:..\src/interruptions.c ****     
2455:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2456:..\src/interruptions.c ****     switch (pos_cycle_status){
 8464              		.loc 1 2456 0
 8465 003a A04B     		ldr	r3, .L597+8
 8466 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8467 003e 012B     		cmp	r3, #1
 8468 0040 3AD0     		beq	.L553
 8469 0042 022B     		cmp	r3, #2
 8470 0044 6ED0     		beq	.L554
 8471 0046 002B     		cmp	r3, #0
 8472 0048 40F01881 		bne	.L552
2457:..\src/interruptions.c ****         case STATE_INACTIVE:
2458:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == 1) || (
 8473              		.loc 1 2458 0
 8474 004c 994B     		ldr	r3, .L597
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 196


 8475 004e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8476 0052 072B     		cmp	r3, #7
 8477 0054 04D0     		beq	.L556
 8478              		.loc 1 2458 0 is_stmt 0 discriminator 1
 8479 0056 9A4B     		ldr	r3, .L597+12
 8480 0058 93F90030 		ldrsb	r3, [r3]
 8481 005c 012B     		cmp	r3, #1
 8482 005e 0CD0     		beq	.L557
 8483              	.L556:
 8484              		.loc 1 2458 0 discriminator 3
 8485 0060 944B     		ldr	r3, .L597
 8486 0062 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8487 0066 072B     		cmp	r3, #7
 8488 0068 40F00581 		bne	.L591
 8489              		.loc 1 2458 0 discriminator 4
 8490 006c 944B     		ldr	r3, .L597+12
 8491 006e 93F90030 		ldrsb	r3, [r3]
 8492 0072 B3F1FF3F 		cmp	r3, #-1
 8493 0076 40F0FE80 		bne	.L591
 8494              	.L557:
2459:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 8495              		.loc 1 2459 0 is_stmt 1
 8496 007a 924A     		ldr	r2, .L597+16
 8497 007c FB68     		ldr	r3, [r7, #12]
 8498 007e 1360     		str	r3, [r2]
2460:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8499              		.loc 1 2460 0
 8500 0080 914B     		ldr	r3, .L597+20
 8501 0082 1A68     		ldr	r2, [r3]
 8502 0084 8F4B     		ldr	r3, .L597+16
 8503 0086 1B68     		ldr	r3, [r3]
 8504 0088 9A42     		cmp	r2, r3
 8505 008a 05DD     		ble	.L559
 8506              		.loc 1 2460 0 is_stmt 0 discriminator 1
 8507 008c 8E4B     		ldr	r3, .L597+20
 8508 008e 1A68     		ldr	r2, [r3]
 8509 0090 8C4B     		ldr	r3, .L597+16
 8510 0092 1B68     		ldr	r3, [r3]
 8511 0094 D31A     		subs	r3, r2, r3
 8512 0096 04E0     		b	.L560
 8513              	.L559:
 8514              		.loc 1 2460 0 discriminator 2
 8515 0098 8A4B     		ldr	r3, .L597+16
 8516 009a 1A68     		ldr	r2, [r3]
 8517 009c 8A4B     		ldr	r3, .L597+20
 8518 009e 1B68     		ldr	r3, [r3]
 8519 00a0 D31A     		subs	r3, r2, r3
 8520              	.L560:
 8521              		.loc 1 2460 0 discriminator 4
 8522 00a2 BB60     		str	r3, [r7, #8]
2461:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 8523              		.loc 1 2461 0 is_stmt 1 discriminator 4
 8524 00a4 834B     		ldr	r3, .L597
 8525 00a6 5A6D     		ldr	r2, [r3, #84]
 8526 00a8 BB68     		ldr	r3, [r7, #8]
 8527 00aa 1344     		add	r3, r3, r2
 8528 00ac 814A     		ldr	r2, .L597
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 197


 8529 00ae 5365     		str	r3, [r2, #84]
2462:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 8530              		.loc 1 2462 0 discriminator 4
 8531 00b0 824B     		ldr	r3, .L597+8
 8532 00b2 0122     		movs	r2, #1
 8533 00b4 1A70     		strb	r2, [r3]
2463:..\src/interruptions.c ****             }
2464:..\src/interruptions.c ****             break;
 8534              		.loc 1 2464 0 discriminator 4
 8535 00b6 DEE0     		b	.L591
 8536              	.L553:
2465:..\src/interruptions.c ****         case STATE_ACTIVE:
2466:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign == -1) || 
 8537              		.loc 1 2466 0
 8538 00b8 7E4B     		ldr	r3, .L597
 8539 00ba 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8540 00be 072B     		cmp	r3, #7
 8541 00c0 05D0     		beq	.L561
 8542              		.loc 1 2466 0 is_stmt 0 discriminator 1
 8543 00c2 7F4B     		ldr	r3, .L597+12
 8544 00c4 93F90030 		ldrsb	r3, [r3]
 8545 00c8 B3F1FF3F 		cmp	r3, #-1
 8546 00cc 0BD0     		beq	.L562
 8547              	.L561:
 8548              		.loc 1 2466 0 discriminator 3
 8549 00ce 794B     		ldr	r3, .L597
 8550 00d0 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8551 00d4 072B     		cmp	r3, #7
 8552 00d6 40F0D080 		bne	.L592
 8553              		.loc 1 2466 0 discriminator 4
 8554 00da 794B     		ldr	r3, .L597+12
 8555 00dc 93F90030 		ldrsb	r3, [r3]
 8556 00e0 012B     		cmp	r3, #1
 8557 00e2 40F0CA80 		bne	.L592
 8558              	.L562:
2467:..\src/interruptions.c ****                 max_pos = curr_pos;
 8559              		.loc 1 2467 0 is_stmt 1
 8560 00e6 784A     		ldr	r2, .L597+20
 8561 00e8 FB68     		ldr	r3, [r7, #12]
 8562 00ea 1360     		str	r3, [r2]
2468:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8563              		.loc 1 2468 0
 8564 00ec 764B     		ldr	r3, .L597+20
 8565 00ee 1A68     		ldr	r2, [r3]
 8566 00f0 744B     		ldr	r3, .L597+16
 8567 00f2 1B68     		ldr	r3, [r3]
 8568 00f4 9A42     		cmp	r2, r3
 8569 00f6 05DD     		ble	.L564
 8570              		.loc 1 2468 0 is_stmt 0 discriminator 1
 8571 00f8 734B     		ldr	r3, .L597+20
 8572 00fa 1A68     		ldr	r2, [r3]
 8573 00fc 714B     		ldr	r3, .L597+16
 8574 00fe 1B68     		ldr	r3, [r3]
 8575 0100 D31A     		subs	r3, r2, r3
 8576 0102 04E0     		b	.L565
 8577              	.L564:
 8578              		.loc 1 2468 0 discriminator 2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 198


 8579 0104 6F4B     		ldr	r3, .L597+16
 8580 0106 1A68     		ldr	r2, [r3]
 8581 0108 6F4B     		ldr	r3, .L597+20
 8582 010a 1B68     		ldr	r3, [r3]
 8583 010c D31A     		subs	r3, r2, r3
 8584              	.L565:
 8585              		.loc 1 2468 0 discriminator 4
 8586 010e BB60     		str	r3, [r7, #8]
2469:..\src/interruptions.c ****                 g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 8587              		.loc 1 2469 0 is_stmt 1 discriminator 4
 8588 0110 684B     		ldr	r3, .L597
 8589 0112 5A6D     		ldr	r2, [r3, #84]
 8590 0114 BB68     		ldr	r3, [r7, #8]
 8591 0116 1344     		add	r3, r3, r2
 8592 0118 664A     		ldr	r2, .L597
 8593 011a 5365     		str	r3, [r2, #84]
2470:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 8594              		.loc 1 2470 0 discriminator 4
 8595 011c 674B     		ldr	r3, .L597+8
 8596 011e 0222     		movs	r2, #2
 8597 0120 1A70     		strb	r2, [r3]
2471:..\src/interruptions.c ****             }
2472:..\src/interruptions.c ****             break;
 8598              		.loc 1 2472 0 discriminator 4
 8599 0122 AAE0     		b	.L592
 8600              	.L554:
2473:..\src/interruptions.c ****         case COUNTER_INC:
2474:..\src/interruptions.c **** 
2475:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 8601              		.loc 1 2475 0
 8602 0124 684B     		ldr	r3, .L597+20
 8603 0126 1A68     		ldr	r2, [r3]
 8604 0128 664B     		ldr	r3, .L597+16
 8605 012a 1B68     		ldr	r3, [r3]
 8606 012c 9A42     		cmp	r2, r3
 8607 012e 05DD     		ble	.L566
 8608              		.loc 1 2475 0 is_stmt 0 discriminator 1
 8609 0130 654B     		ldr	r3, .L597+20
 8610 0132 1A68     		ldr	r2, [r3]
 8611 0134 634B     		ldr	r3, .L597+16
 8612 0136 1B68     		ldr	r3, [r3]
 8613 0138 D31A     		subs	r3, r2, r3
 8614 013a 04E0     		b	.L567
 8615              	.L566:
 8616              		.loc 1 2475 0 discriminator 2
 8617 013c 614B     		ldr	r3, .L597+16
 8618 013e 1A68     		ldr	r2, [r3]
 8619 0140 614B     		ldr	r3, .L597+20
 8620 0142 1B68     		ldr	r3, [r3]
 8621 0144 D31A     		subs	r3, r2, r3
 8622              	.L567:
 8623              		.loc 1 2475 0 discriminator 4
 8624 0146 BB60     		str	r3, [r7, #8]
2476:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 8625              		.loc 1 2476 0 is_stmt 1 discriminator 4
 8626 0148 604B     		ldr	r3, .L597+24
 8627 014a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 199


 8628 014c BA68     		ldr	r2, [r7, #8]
 8629 014e 9A42     		cmp	r2, r3
 8630 0150 40F38D80 		ble	.L568
2477:..\src/interruptions.c ****                 //update position histogram
2478:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 8631              		.loc 1 2478 0
 8632 0154 574B     		ldr	r3, .L597
 8633 0156 D3F8E820 		ldr	r2, [r3, #232]
 8634 015a 564B     		ldr	r3, .L597
 8635 015c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8636 0160 1846     		mov	r0, r3
 8637 0162 5449     		ldr	r1, .L597
 8638 0164 0346     		mov	r3, r0
 8639 0166 5B00     		lsls	r3, r3, #1
 8640 0168 0344     		add	r3, r3, r0
 8641 016a 1B01     		lsls	r3, r3, #4
 8642 016c 0B44     		add	r3, r3, r1
 8643 016e 03F29513 		addw	r3, r3, #405
 8644 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8645 0174 42FA03F3 		asr	r3, r2, r3
 8646 0178 554A     		ldr	r2, .L597+28
 8647 017a 82FB0312 		smull	r1, r2, r2, r3
 8648 017e 9210     		asrs	r2, r2, #2
 8649 0180 DB17     		asrs	r3, r3, #31
 8650 0182 D31A     		subs	r3, r2, r3
 8651 0184 7B60     		str	r3, [r7, #4]
2479:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 8652              		.loc 1 2479 0
 8653 0186 4F4B     		ldr	r3, .L597+16
 8654 0188 1A68     		ldr	r2, [r3]
 8655 018a 7B68     		ldr	r3, [r7, #4]
 8656 018c 92FBF3F3 		sdiv	r3, r2, r3
 8657 0190 FB70     		strb	r3, [r7, #3]
2480:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 8658              		.loc 1 2480 0
 8659 0192 4D4B     		ldr	r3, .L597+20
 8660 0194 1A68     		ldr	r2, [r3]
 8661 0196 7B68     		ldr	r3, [r7, #4]
 8662 0198 92FBF3F3 		sdiv	r3, r2, r3
 8663 019c BB70     		strb	r3, [r7, #2]
2481:..\src/interruptions.c ****                 
2482:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2483:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 8664              		.loc 1 2483 0
 8665 019e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 8666 01a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 8667 01a2 9342     		cmp	r3, r2
 8668 01a4 28BF     		it	cs
 8669 01a6 1346     		movcs	r3, r2
 8670 01a8 7B70     		strb	r3, [r7, #1]
2484:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 8671              		.loc 1 2484 0
 8672 01aa FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 8673 01ac BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 8674 01ae 9342     		cmp	r3, r2
 8675 01b0 38BF     		it	cc
 8676 01b2 1346     		movcc	r3, r2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 200


 8677 01b4 3B70     		strb	r3, [r7]
2485:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8678              		.loc 1 2485 0
 8679 01b6 7B78     		ldrb	r3, [r7, #1]
 8680 01b8 FB75     		strb	r3, [r7, #23]
 8681 01ba 0DE0     		b	.L569
 8682              	.L570:
2486:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2487:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 8683              		.loc 1 2487 0 discriminator 3
 8684 01bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8685 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8686 01c0 3C49     		ldr	r1, .L597
 8687 01c2 0632     		adds	r2, r2, #6
 8688 01c4 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8689 01c8 0132     		adds	r2, r2, #1
 8690 01ca 3A49     		ldr	r1, .L597
 8691 01cc 0633     		adds	r3, r3, #6
 8692 01ce 41F82320 		str	r2, [r1, r3, lsl #2]
2485:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8693              		.loc 1 2485 0 discriminator 3
 8694 01d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8695 01d4 0133     		adds	r3, r3, #1
 8696 01d6 FB75     		strb	r3, [r7, #23]
 8697              	.L569:
2485:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2; i++){
 8698              		.loc 1 2485 0 is_stmt 0 discriminator 1
 8699 01d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8700 01da 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 8701 01dc 9A42     		cmp	r2, r3
 8702 01de EDD9     		bls	.L570
2488:..\src/interruptions.c ****                 }
2489:..\src/interruptions.c ****                 
2490:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2491:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 8703              		.loc 1 2491 0 is_stmt 1
 8704 01e0 344B     		ldr	r3, .L597
 8705 01e2 B3F90C31 		ldrsh	r3, [r3, #268]
 8706 01e6 002B     		cmp	r3, #0
 8707 01e8 00DA     		bge	.L571
 8708 01ea 0333     		adds	r3, r3, #3
 8709              	.L571:
 8710 01ec 9B10     		asrs	r3, r3, #2
 8711 01ee 1BB2     		sxth	r3, r3
 8712 01f0 7B60     		str	r3, [r7, #4]
2492:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 8713              		.loc 1 2492 0
 8714 01f2 304B     		ldr	r3, .L597
 8715 01f4 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 8716 01f8 012B     		cmp	r3, #1
 8717 01fa 0CD1     		bne	.L572
2493:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 8718              		.loc 1 2493 0
 8719 01fc 2D4B     		ldr	r3, .L597
 8720 01fe 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8721 0202 1946     		mov	r1, r3
 8722 0204 2C4A     		ldr	r2, .L597+4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 201


 8723 0206 3423     		movs	r3, #52
 8724 0208 03FB01F3 		mul	r3, r3, r1
 8725 020c 1344     		add	r3, r3, r2
 8726 020e 1433     		adds	r3, r3, #20
 8727 0210 1B68     		ldr	r3, [r3]
 8728 0212 3B61     		str	r3, [r7, #16]
 8729 0214 0BE0     		b	.L573
 8730              	.L572:
2494:..\src/interruptions.c ****                 else
2495:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 8731              		.loc 1 2495 0
 8732 0216 274B     		ldr	r3, .L597
 8733 0218 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 8734 021c 1946     		mov	r1, r3
 8735 021e 264A     		ldr	r2, .L597+4
 8736 0220 3423     		movs	r3, #52
 8737 0222 03FB01F3 		mul	r3, r3, r1
 8738 0226 1344     		add	r3, r3, r2
 8739 0228 0C33     		adds	r3, r3, #12
 8740 022a 1B68     		ldr	r3, [r3]
 8741 022c 3B61     		str	r3, [r7, #16]
 8742              	.L573:
2496:..\src/interruptions.c ****                     
2497:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 8743              		.loc 1 2497 0
 8744 022e 214B     		ldr	r3, .L597
 8745 0230 B3F90C31 		ldrsh	r3, [r3, #268]
 8746 0234 1A46     		mov	r2, r3
 8747 0236 3B69     		ldr	r3, [r7, #16]
 8748 0238 9A42     		cmp	r2, r3
 8749 023a 05DA     		bge	.L574
2498:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 8750              		.loc 1 2498 0
 8751 023c 1D4B     		ldr	r3, .L597
 8752 023e DB6C     		ldr	r3, [r3, #76]
 8753 0240 0133     		adds	r3, r3, #1
 8754 0242 1C4A     		ldr	r2, .L597
 8755 0244 D364     		str	r3, [r2, #76]
 8756 0246 12E0     		b	.L568
 8757              	.L574:
2499:..\src/interruptions.c ****                 else
2500:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 8758              		.loc 1 2500 0
 8759 0248 3A69     		ldr	r2, [r7, #16]
 8760 024a 7B68     		ldr	r3, [r7, #4]
 8761 024c 92FBF3F3 		sdiv	r3, r2, r3
 8762 0250 DBB2     		uxtb	r3, r3
 8763 0252 3969     		ldr	r1, [r7, #16]
 8764 0254 7A68     		ldr	r2, [r7, #4]
 8765 0256 91FBF2F2 		sdiv	r2, r1, r2
 8766 025a D2B2     		uxtb	r2, r2
 8767 025c 1549     		ldr	r1, .L597
 8768 025e 1032     		adds	r2, r2, #16
 8769 0260 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8770 0264 0132     		adds	r2, r2, #1
 8771 0266 1349     		ldr	r1, .L597
 8772 0268 1033     		adds	r3, r3, #16
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 202


 8773 026a 41F82320 		str	r2, [r1, r3, lsl #2]
 8774              	.L568:
2501:..\src/interruptions.c ****             }
2502:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 8775              		.loc 1 2502 0
 8776 026e 134B     		ldr	r3, .L597+8
 8777 0270 0022     		movs	r2, #0
 8778 0272 1A70     		strb	r2, [r3]
2503:..\src/interruptions.c ****             break;
 8779              		.loc 1 2503 0
 8780 0274 02E0     		b	.L552
 8781              	.L591:
2464:..\src/interruptions.c ****         case STATE_ACTIVE:
 8782              		.loc 1 2464 0
 8783 0276 00BF     		nop
 8784 0278 00E0     		b	.L552
 8785              	.L592:
2472:..\src/interruptions.c ****         case COUNTER_INC:
 8786              		.loc 1 2472 0
 8787 027a 00BF     		nop
 8788              	.L552:
2504:..\src/interruptions.c ****     }
2505:..\src/interruptions.c ****     
2506:..\src/interruptions.c ****     // State machine - Evaluate EMG counter update
2507:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 8789              		.loc 1 2507 0
 8790 027c 0023     		movs	r3, #0
 8791 027e FB75     		strb	r3, [r7, #23]
 8792 0280 53E0     		b	.L575
 8793              	.L583:
2508:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8794              		.loc 1 2508 0
 8795 0282 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8796 0284 134A     		ldr	r2, .L597+32
 8797 0286 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8798 0288 012B     		cmp	r3, #1
 8799 028a 27D0     		beq	.L577
 8800 028c 022B     		cmp	r3, #2
 8801 028e 36D0     		beq	.L578
 8802 0290 002B     		cmp	r3, #0
 8803 0292 47D1     		bne	.L576
2509:..\src/interruptions.c ****             case STATE_INACTIVE:
2510:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 8804              		.loc 1 2510 0
 8805 0294 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8806 0296 104A     		ldr	r2, .L597+36
 8807 0298 52F82330 		ldr	r3, [r2, r3, lsl #2]
 8808 029c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8809 029e 0549     		ldr	r1, .L597
 8810 02a0 F832     		adds	r2, r2, #248
 8811 02a2 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 8812 02a6 9342     		cmp	r3, r2
 8813 02a8 39DD     		ble	.L593
2511:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 8814              		.loc 1 2511 0
 8815 02aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8816 02ac 094A     		ldr	r2, .L597+32
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 203


 8817 02ae 0121     		movs	r1, #1
 8818 02b0 D154     		strb	r1, [r2, r3]
2512:..\src/interruptions.c ****                 }
2513:..\src/interruptions.c ****                 break;
 8819              		.loc 1 2513 0
 8820 02b2 34E0     		b	.L593
 8821              	.L598:
 8822              		.align	2
 8823              	.L597:
 8824 02b4 00000000 		.word	g_mem
 8825 02b8 00000000 		.word	g_meas
 8826 02bc 8E010000 		.word	pos_cycle_status.10675
 8827 02c0 00000000 		.word	pwm_sign
 8828 02c4 90010000 		.word	thr_pos.10679
 8829 02c8 94010000 		.word	max_pos.10680
 8830 02cc 08000000 		.word	bin_threshold.10678
 8831 02d0 67666666 		.word	1717986919
 8832 02d4 98010000 		.word	emg_cycle_status.10676
 8833 02d8 00000000 		.word	g_adc_meas
 8834              	.L577:
2514:..\src/interruptions.c ****             case STATE_ACTIVE:
2515:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){
 8835              		.loc 1 2515 0
 8836 02dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8837 02de 404A     		ldr	r2, .L599
 8838 02e0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 8839 02e4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8840 02e6 3F49     		ldr	r1, .L599+4
 8841 02e8 F833     		adds	r3, r3, #248
 8842 02ea 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8843 02ee 0A3B     		subs	r3, r3, #10
 8844 02f0 9A42     		cmp	r2, r3
 8845 02f2 16DA     		bge	.L594
2516:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 8846              		.loc 1 2516 0
 8847 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8848 02f6 3C4A     		ldr	r2, .L599+8
 8849 02f8 0221     		movs	r1, #2
 8850 02fa D154     		strb	r1, [r2, r3]
2517:..\src/interruptions.c ****                 }
2518:..\src/interruptions.c ****                 break;
 8851              		.loc 1 2518 0
 8852 02fc 11E0     		b	.L594
 8853              	.L578:
2519:..\src/interruptions.c ****             case COUNTER_INC:
2520:..\src/interruptions.c ****                 g_mem.cnt.emg_counter[i] = g_mem.cnt.emg_counter[i] + 1;
 8854              		.loc 1 2520 0
 8855 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8856 0300 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 8857 0302 3849     		ldr	r1, .L599+4
 8858 0304 0432     		adds	r2, r2, #4
 8859 0306 51F82220 		ldr	r2, [r1, r2, lsl #2]
 8860 030a 0132     		adds	r2, r2, #1
 8861 030c 3549     		ldr	r1, .L599+4
 8862 030e 0433     		adds	r3, r3, #4
 8863 0310 41F82320 		str	r2, [r1, r3, lsl #2]
2521:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 204


 8864              		.loc 1 2521 0
 8865 0314 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8866 0316 344A     		ldr	r2, .L599+8
 8867 0318 0021     		movs	r1, #0
 8868 031a D154     		strb	r1, [r2, r3]
2522:..\src/interruptions.c ****                 break;
 8869              		.loc 1 2522 0
 8870 031c 02E0     		b	.L576
 8871              	.L593:
2513:..\src/interruptions.c ****             case STATE_ACTIVE:
 8872              		.loc 1 2513 0
 8873 031e 00BF     		nop
 8874 0320 00E0     		b	.L576
 8875              	.L594:
2518:..\src/interruptions.c ****             case COUNTER_INC:
 8876              		.loc 1 2518 0
 8877 0322 00BF     		nop
 8878              	.L576:
2507:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8879              		.loc 1 2507 0 discriminator 2
 8880 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8881 0326 0133     		adds	r3, r3, #1
 8882 0328 FB75     		strb	r3, [r7, #23]
 8883              	.L575:
2507:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8884              		.loc 1 2507 0 is_stmt 0 discriminator 1
 8885 032a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8886 032c 012B     		cmp	r3, #1
 8887 032e 07D8     		bhi	.L582
2507:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8888              		.loc 1 2507 0 discriminator 3
 8889 0330 2E4B     		ldr	r3, .L599+12
 8890 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8891 0334 002B     		cmp	r3, #0
 8892 0336 03D1     		bne	.L582
2507:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 8893              		.loc 1 2507 0 discriminator 4
 8894 0338 2D4B     		ldr	r3, .L599+16
 8895 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8896 033c 002B     		cmp	r3, #0
 8897 033e A0D0     		beq	.L583
 8898              	.L582:
2523:..\src/interruptions.c ****         }
2524:..\src/interruptions.c ****     }
2525:..\src/interruptions.c ****     
2526:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2527:..\src/interruptions.c ****     switch (rest_cycle_status){
 8899              		.loc 1 2527 0 is_stmt 1
 8900 0340 2C4B     		ldr	r3, .L599+20
 8901 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8902 0344 012B     		cmp	r3, #1
 8903 0346 11D0     		beq	.L585
 8904 0348 022B     		cmp	r3, #2
 8905 034a 29D0     		beq	.L586
 8906 034c 002B     		cmp	r3, #0
 8907 034e 41D1     		bne	.L584
2528:..\src/interruptions.c ****         case STATE_INACTIVE:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 205


2529:..\src/interruptions.c ****             if (rest_enabled){
 8908              		.loc 1 2529 0
 8909 0350 294B     		ldr	r3, .L599+24
 8910 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8911 0354 002B     		cmp	r3, #0
 8912 0356 3AD0     		beq	.L595
2530:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 8913              		.loc 1 2530 0
 8914 0358 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8915 035c 0346     		mov	r3, r0
 8916 035e 1A46     		mov	r2, r3
 8917 0360 264B     		ldr	r3, .L599+28
 8918 0362 1A60     		str	r2, [r3]
2531:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 8919              		.loc 1 2531 0
 8920 0364 234B     		ldr	r3, .L599+20
 8921 0366 0122     		movs	r2, #1
 8922 0368 1A70     		strb	r2, [r3]
2532:..\src/interruptions.c ****             }
2533:..\src/interruptions.c ****             break;
 8923              		.loc 1 2533 0
 8924 036a 30E0     		b	.L595
 8925              	.L585:
2534:..\src/interruptions.c ****         case STATE_ACTIVE:
2535:..\src/interruptions.c ****             if (!rest_enabled){
 8926              		.loc 1 2535 0
 8927 036c 224B     		ldr	r3, .L599+24
 8928 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8929 0370 002B     		cmp	r3, #0
 8930 0372 2ED1     		bne	.L596
2536:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 8931              		.loc 1 2536 0
 8932 0374 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 8933 0378 0346     		mov	r3, r0
 8934 037a 1A46     		mov	r2, r3
 8935 037c 204B     		ldr	r3, .L599+32
 8936 037e 1A60     		str	r2, [r3]
2537:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 8937              		.loc 1 2537 0
 8938 0380 1E4B     		ldr	r3, .L599+28
 8939 0382 1A68     		ldr	r2, [r3]
 8940 0384 1E4B     		ldr	r3, .L599+32
 8941 0386 1B68     		ldr	r3, [r3]
 8942 0388 9A42     		cmp	r2, r3
 8943 038a 05D2     		bcs	.L590
2538:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)1200;
 8944              		.loc 1 2538 0
 8945 038c 1B4B     		ldr	r3, .L599+28
 8946 038e 1B68     		ldr	r3, [r3]
 8947 0390 03F59663 		add	r3, r3, #1200
 8948 0394 194A     		ldr	r2, .L599+28
 8949 0396 1360     		str	r3, [r2]
 8950              	.L590:
2539:..\src/interruptions.c ****                 }
2540:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 8951              		.loc 1 2540 0
 8952 0398 164B     		ldr	r3, .L599+20
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 206


 8953 039a 0222     		movs	r2, #2
 8954 039c 1A70     		strb	r2, [r3]
2541:..\src/interruptions.c ****             }
2542:..\src/interruptions.c ****             break;
 8955              		.loc 1 2542 0
 8956 039e 18E0     		b	.L596
 8957              	.L586:
2543:..\src/interruptions.c ****         case COUNTER_INC: 
2544:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 8958              		.loc 1 2544 0
 8959 03a0 104B     		ldr	r3, .L599+4
 8960 03a2 DA6D     		ldr	r2, [r3, #92]
 8961 03a4 154B     		ldr	r3, .L599+28
 8962 03a6 1968     		ldr	r1, [r3]
 8963 03a8 154B     		ldr	r3, .L599+32
 8964 03aa 1B68     		ldr	r3, [r3]
 8965 03ac CB1A     		subs	r3, r1, r3
 8966 03ae 1549     		ldr	r1, .L599+36
 8967 03b0 A1FB0313 		umull	r1, r3, r1, r3
 8968 03b4 DB08     		lsrs	r3, r3, #3
 8969 03b6 1344     		add	r3, r3, r2
 8970 03b8 0A4A     		ldr	r2, .L599+4
 8971 03ba D365     		str	r3, [r2, #92]
2545:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 8972              		.loc 1 2545 0
 8973 03bc 094B     		ldr	r3, .L599+4
 8974 03be 1B6D     		ldr	r3, [r3, #80]
 8975 03c0 0133     		adds	r3, r3, #1
 8976 03c2 084A     		ldr	r2, .L599+4
 8977 03c4 1365     		str	r3, [r2, #80]
2546:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 8978              		.loc 1 2546 0
 8979 03c6 0B4B     		ldr	r3, .L599+20
 8980 03c8 0022     		movs	r2, #0
 8981 03ca 1A70     		strb	r2, [r3]
2547:..\src/interruptions.c ****             break;
 8982              		.loc 1 2547 0
 8983 03cc 02E0     		b	.L584
 8984              	.L595:
2533:..\src/interruptions.c ****         case STATE_ACTIVE:
 8985              		.loc 1 2533 0
 8986 03ce 00BF     		nop
 8987 03d0 00E0     		b	.L584
 8988              	.L596:
2542:..\src/interruptions.c ****         case COUNTER_INC: 
 8989              		.loc 1 2542 0
 8990 03d2 00BF     		nop
 8991              	.L584:
2548:..\src/interruptions.c ****     }
2549:..\src/interruptions.c ****           
2550:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2551:..\src/interruptions.c ****     save_cycles_eeprom();
 8992              		.loc 1 2551 0
 8993 03d4 FFF7FEFF 		bl	save_cycles_eeprom
2552:..\src/interruptions.c ****     
2553:..\src/interruptions.c **** }
 8994              		.loc 1 2553 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 207


 8995 03d8 00BF     		nop
 8996 03da 1837     		adds	r7, r7, #24
 8997              		.cfi_def_cfa_offset 8
 8998 03dc BD46     		mov	sp, r7
 8999              		.cfi_def_cfa_register 13
 9000              		@ sp needed
 9001 03de 80BD     		pop	{r7, pc}
 9002              	.L600:
 9003              		.align	2
 9004              	.L599:
 9005 03e0 00000000 		.word	g_adc_meas
 9006 03e4 00000000 		.word	g_mem
 9007 03e8 98010000 		.word	emg_cycle_status.10676
 9008 03ec 00000000 		.word	emg_1_status
 9009 03f0 00000000 		.word	emg_2_status
 9010 03f4 9A010000 		.word	rest_cycle_status.10677
 9011 03f8 00000000 		.word	rest_enabled
 9012 03fc 9C010000 		.word	timer_value_s.10690
 9013 0400 A0010000 		.word	timer_value_e.10691
 9014 0404 CDCCCCCC 		.word	-858993459
 9015              		.cfi_endproc
 9016              	.LFE76:
 9017              		.size	cycles_counter_update, .-cycles_counter_update
 9018              		.section	.text.save_cycles_eeprom,"ax",%progbits
 9019              		.align	2
 9020              		.global	save_cycles_eeprom
 9021              		.thumb
 9022              		.thumb_func
 9023              		.type	save_cycles_eeprom, %function
 9024              	save_cycles_eeprom:
 9025              	.LFB77:
2554:..\src/interruptions.c **** 
2555:..\src/interruptions.c **** //==============================================================================
2556:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2557:..\src/interruptions.c **** //==============================================================================
2558:..\src/interruptions.c **** 
2559:..\src/interruptions.c **** void save_cycles_eeprom() {
 9026              		.loc 1 2559 0
 9027              		.cfi_startproc
 9028              		@ args = 0, pretend = 0, frame = 24
 9029              		@ frame_needed = 1, uses_anonymous_args = 0
 9030 0000 80B5     		push	{r7, lr}
 9031              		.cfi_def_cfa_offset 8
 9032              		.cfi_offset 7, -8
 9033              		.cfi_offset 14, -4
 9034 0002 86B0     		sub	sp, sp, #24
 9035              		.cfi_def_cfa_offset 32
 9036 0004 00AF     		add	r7, sp, #0
 9037              		.cfi_def_cfa_register 7
2560:..\src/interruptions.c **** 
2561:..\src/interruptions.c ****     cystatus status;
2562:..\src/interruptions.c ****     static uint8 row_number;
2563:..\src/interruptions.c ****     uint8 row_start = 1;
 9038              		.loc 1 2563 0
 9039 0006 0123     		movs	r3, #1
 9040 0008 FB75     		strb	r3, [r7, #23]
2564:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_counter[0];    //Data at beginning of the row 1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 208


 9041              		.loc 1 2564 0
 9042 000a 394B     		ldr	r3, .L617
 9043 000c 3B61     		str	r3, [r7, #16]
2565:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_counter[0];
 9044              		.loc 1 2565 0
 9045 000e 394B     		ldr	r3, .L617+4
 9046 0010 FB60     		str	r3, [r7, #12]
2566:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 9047              		.loc 1 2566 0
 9048 0012 FB7D     		ldrb	r3, [r7, #23]
 9049 0014 0433     		adds	r3, r3, #4
 9050 0016 FB72     		strb	r3, [r7, #11]
2567:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2568:..\src/interruptions.c **** 
2569:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2570:..\src/interruptions.c ****     switch(cycles_status) {
 9051              		.loc 1 2570 0
 9052 0018 374B     		ldr	r3, .L617+8
 9053 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9054 001c 042B     		cmp	r3, #4
 9055 001e 63D8     		bhi	.L613
 9056 0020 01A2     		adr	r2, .L604
 9057 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9058 0026 00BF     		.p2align 2
 9059              	.L604:
 9060 0028 3D000000 		.word	.L603+1
 9061 002c 5B000000 		.word	.L605+1
 9062 0030 8B000000 		.word	.L606+1
 9063 0034 C7000000 		.word	.L607+1
 9064 0038 DF000000 		.word	.L614+1
 9065              		.p2align 1
 9066              	.L603:
2571:..\src/interruptions.c ****         case PREPARE_DATA:
2572:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2573:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 9067              		.loc 1 2573 0
 9068 003c 5022     		movs	r2, #80
 9069 003e 3969     		ldr	r1, [r7, #16]
 9070 0040 F868     		ldr	r0, [r7, #12]
 9071 0042 FFF7FEFF 		bl	memcpy
2574:..\src/interruptions.c ****             m_addr = addr_start;
 9072              		.loc 1 2574 0
 9073 0046 2D4A     		ldr	r2, .L617+12
 9074 0048 3B69     		ldr	r3, [r7, #16]
 9075 004a 1360     		str	r3, [r2]
2575:..\src/interruptions.c ****             row_number = row_start;
 9076              		.loc 1 2575 0
 9077 004c 2C4A     		ldr	r2, .L617+16
 9078 004e FB7D     		ldrb	r3, [r7, #23]
 9079 0050 1370     		strb	r3, [r2]
2576:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 9080              		.loc 1 2576 0
 9081 0052 294B     		ldr	r3, .L617+8
 9082 0054 0122     		movs	r2, #1
 9083 0056 1A70     		strb	r2, [r3]
2577:..\src/interruptions.c ****             break;
 9084              		.loc 1 2577 0
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 209


 9085 0058 46E0     		b	.L602
 9086              	.L605:
2578:..\src/interruptions.c ****             
2579:..\src/interruptions.c ****         case WRITE_CYCLES:
2580:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 9087              		.loc 1 2580 0
 9088 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2581:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 9089              		.loc 1 2581 0
 9090 005e 274B     		ldr	r3, .L617+12
 9091 0060 1A68     		ldr	r2, [r3]
 9092 0062 274B     		ldr	r3, .L617+16
 9093 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9094 0066 1946     		mov	r1, r3
 9095 0068 1046     		mov	r0, r2
 9096 006a FFF7FEFF 		bl	EEPROM_StartWrite
 9097 006e 7860     		str	r0, [r7, #4]
2582:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 9098              		.loc 1 2582 0
 9099 0070 7B68     		ldr	r3, [r7, #4]
 9100 0072 072B     		cmp	r3, #7
 9101 0074 02D0     		beq	.L609
 9102              		.loc 1 2582 0 is_stmt 0 discriminator 1
 9103 0076 7B68     		ldr	r3, [r7, #4]
 9104 0078 002B     		cmp	r3, #0
 9105 007a 32D1     		bne	.L615
 9106              	.L609:
2583:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 9107              		.loc 1 2583 0 is_stmt 1
 9108 007c 1E4B     		ldr	r3, .L617+8
 9109 007e 0222     		movs	r2, #2
 9110 0080 1A70     		strb	r2, [r3]
2584:..\src/interruptions.c ****                 can_write = FALSE;
 9111              		.loc 1 2584 0
 9112 0082 204B     		ldr	r3, .L617+20
 9113 0084 0022     		movs	r2, #0
 9114 0086 1A70     		strb	r2, [r3]
2585:..\src/interruptions.c ****             }
2586:..\src/interruptions.c ****             break;
 9115              		.loc 1 2586 0
 9116 0088 2BE0     		b	.L615
 9117              	.L606:
2587:..\src/interruptions.c ****             
2588:..\src/interruptions.c ****         case WAIT_QUERY:
2589:..\src/interruptions.c ****             status = EEPROM_Query();
 9118              		.loc 1 2589 0
 9119 008a FFF7FEFF 		bl	EEPROM_Query
 9120 008e 7860     		str	r0, [r7, #4]
2590:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 9121              		.loc 1 2590 0
 9122 0090 7B68     		ldr	r3, [r7, #4]
 9123 0092 002B     		cmp	r3, #0
 9124 0094 27D1     		bne	.L616
2591:..\src/interruptions.c ****                 if (row_number < row_end) {
 9125              		.loc 1 2591 0
 9126 0096 1A4B     		ldr	r3, .L617+16
 9127 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 210


 9128 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 9129 009c 9A42     		cmp	r2, r3
 9130 009e 0ED9     		bls	.L612
2592:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 9131              		.loc 1 2592 0
 9132 00a0 164B     		ldr	r3, .L617+12
 9133 00a2 1B68     		ldr	r3, [r3]
 9134 00a4 1033     		adds	r3, r3, #16
 9135 00a6 154A     		ldr	r2, .L617+12
 9136 00a8 1360     		str	r3, [r2]
2593:..\src/interruptions.c ****                     row_number = row_number + 1;
 9137              		.loc 1 2593 0
 9138 00aa 154B     		ldr	r3, .L617+16
 9139 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9140 00ae 0133     		adds	r3, r3, #1
 9141 00b0 DAB2     		uxtb	r2, r3
 9142 00b2 134B     		ldr	r3, .L617+16
 9143 00b4 1A70     		strb	r2, [r3]
2594:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 9144              		.loc 1 2594 0
 9145 00b6 104B     		ldr	r3, .L617+8
 9146 00b8 0122     		movs	r2, #1
 9147 00ba 1A70     		strb	r2, [r3]
2595:..\src/interruptions.c ****                 }
2596:..\src/interruptions.c ****                 else {
2597:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2598:..\src/interruptions.c ****                 }
2599:..\src/interruptions.c ****             }
2600:..\src/interruptions.c ****             break;
 9148              		.loc 1 2600 0
 9149 00bc 13E0     		b	.L616
 9150              	.L612:
2597:..\src/interruptions.c ****                 }
 9151              		.loc 1 2597 0
 9152 00be 0E4B     		ldr	r3, .L617+8
 9153 00c0 0322     		movs	r2, #3
 9154 00c2 1A70     		strb	r2, [r3]
 9155              		.loc 1 2600 0
 9156 00c4 0FE0     		b	.L616
 9157              	.L607:
2601:..\src/interruptions.c ****            
2602:..\src/interruptions.c ****         case WRITE_END:
2603:..\src/interruptions.c ****             can_write = TRUE;            
 9158              		.loc 1 2603 0
 9159 00c6 0F4B     		ldr	r3, .L617+20
 9160 00c8 0122     		movs	r2, #1
 9161 00ca 1A70     		strb	r2, [r3]
2604:..\src/interruptions.c ****             cycles_status = NONE;
 9162              		.loc 1 2604 0
 9163 00cc 0A4B     		ldr	r3, .L617+8
 9164 00ce 0422     		movs	r2, #4
 9165 00d0 1A70     		strb	r2, [r3]
2605:..\src/interruptions.c ****             
2606:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2607:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 9166              		.loc 1 2607 0
 9167 00d2 5022     		movs	r2, #80
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 211


 9168 00d4 F968     		ldr	r1, [r7, #12]
 9169 00d6 3869     		ldr	r0, [r7, #16]
 9170 00d8 FFF7FEFF 		bl	memcpy
2608:..\src/interruptions.c ****             break;
 9171              		.loc 1 2608 0
 9172 00dc 04E0     		b	.L602
 9173              	.L614:
2609:..\src/interruptions.c ****             
2610:..\src/interruptions.c ****         case NONE:
2611:..\src/interruptions.c ****             break;
 9174              		.loc 1 2611 0
 9175 00de 00BF     		nop
 9176 00e0 02E0     		b	.L613
 9177              	.L615:
2586:..\src/interruptions.c ****             
 9178              		.loc 1 2586 0
 9179 00e2 00BF     		nop
 9180 00e4 00E0     		b	.L613
 9181              	.L616:
2600:..\src/interruptions.c ****            
 9182              		.loc 1 2600 0
 9183 00e6 00BF     		nop
 9184              	.L602:
 9185              	.L613:
2612:..\src/interruptions.c ****     }
2613:..\src/interruptions.c ****     
2614:..\src/interruptions.c **** }
 9186              		.loc 1 2614 0
 9187 00e8 00BF     		nop
 9188 00ea 1837     		adds	r7, r7, #24
 9189              		.cfi_def_cfa_offset 8
 9190 00ec BD46     		mov	sp, r7
 9191              		.cfi_def_cfa_register 13
 9192              		@ sp needed
 9193 00ee 80BD     		pop	{r7, pc}
 9194              	.L618:
 9195              		.align	2
 9196              	.L617:
 9197 00f0 10000000 		.word	g_mem+16
 9198 00f4 10000000 		.word	c_mem+16
 9199 00f8 00000000 		.word	cycles_status
 9200 00fc A4010000 		.word	m_addr.10718
 9201 0100 A8010000 		.word	row_number.10713
 9202 0104 00000000 		.word	can_write
 9203              		.cfi_endproc
 9204              	.LFE77:
 9205              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 9206              		.bss
 9207              	state.10411:
 9208 0000 00       		.space	1
 9209 0001 000000   		.align	2
 9210              	rx_queue.10415:
 9211 0004 000000   		.space	3
 9212              	data_packet_length.10413:
 9213 0007 00       		.space	1
 9214              	data_packet_index.10412:
 9215 0008 00       		.space	1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 212


 9216 0009 000000   		.align	2
 9217              	data_packet_buffer.10414:
 9218 000c 00000000 		.space	128
 9218      00000000 
 9218      00000000 
 9218      00000000 
 9218      00000000 
 9219              		.data
 9220              		.align	1
 9221              		.type	counter_calibration.10431, %object
 9222              		.size	counter_calibration.10431, 2
 9223              	counter_calibration.10431:
 9224 0000 0100     		.short	1
 9225              		.align	1
 9226              		.type	counter_tension_func.10432, %object
 9227              		.size	counter_tension_func.10432, 2
 9228              	counter_tension_func.10432:
 9229 0002 0100     		.short	1
 9230              		.bss
 9231              		.align	2
 9232              	current_emg.10456:
 9233 008c 0000     		.space	2
 9234 008e 0000     		.align	2
 9235              	pos_error_sum.10507:
 9236 0090 00000000 		.space	4
 9237              		.align	2
 9238              	prev_pos_err.10509:
 9239 0094 00000000 		.space	4
 9240              	motor_dir.10512:
 9241 0098 00       		.space	1
 9242 0099 000000   		.align	2
 9243              	curr_error_sum.10508:
 9244 009c 00000000 		.space	4
 9245              		.align	2
 9246              	prev_curr_err.10510:
 9247 00a0 00000000 		.space	4
 9248              		.align	2
 9249              	prev_pwm.10511:
 9250 00a4 00000000 		.space	4
 9251              		.align	2
 9252              	position_counter.10513:
 9253 00a8 00000000 		.space	4
 9254              		.align	2
 9255              	pos_error_sum.10540:
 9256 00ac 00000000 		.space	8
 9256      00000000 
 9257              		.align	2
 9258              	prev_pos_err.10542:
 9259 00b4 00000000 		.space	8
 9259      00000000 
 9260              		.align	2
 9261              	motor_dir.10545:
 9262 00bc 0000     		.space	2
 9263 00be 0000     		.align	2
 9264              	curr_error_sum.10541:
 9265 00c0 00000000 		.space	8
 9265      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 213


 9266              		.align	2
 9267              	prev_curr_err.10543:
 9268 00c8 00000000 		.space	8
 9268      00000000 
 9269              		.align	2
 9270              	prev_pwm.10544:
 9271 00d0 00000000 		.space	8
 9271      00000000 
 9272              		.align	2
 9273              	position_counter.10546:
 9274 00d8 00000000 		.space	8
 9274      00000000 
 9275              		.align	2
 9276              	last_value_encoder.10569:
 9277 00e0 00000000 		.space	24
 9277      00000000 
 9277      00000000 
 9277      00000000 
 9277      00000000 
 9278              		.align	2
 9279              	comp_value_encoder.10570:
 9280 00f8 00000000 		.space	24
 9280      00000000 
 9280      00000000 
 9280      00000000 
 9280      00000000 
 9281              		.data
 9282              		.align	2
 9283              		.type	only_first_time.10572, %object
 9284              		.size	only_first_time.10572, 2
 9285              	only_first_time.10572:
 9286 0004 01       		.byte	1
 9287 0005 01       		.byte	1
 9288              		.bss
 9289              		.align	2
 9290              	error.10571:
 9291 0110 00000000 		.space	6
 9291      0000
 9292 0116 0000     		.align	2
 9293              	v_value.10577:
 9294 0118 00000000 		.space	24
 9294      00000000 
 9294      00000000 
 9294      00000000 
 9294      00000000 
 9295              		.align	2
 9296              	vv_value.10578:
 9297 0130 00000000 		.space	24
 9297      00000000 
 9297      00000000 
 9297      00000000 
 9297      00000000 
 9298              		.align	2
 9299              	vvv_value.10579:
 9300 0148 00000000 		.space	24
 9300      00000000 
 9300      00000000 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 214


 9300      00000000 
 9300      00000000 
 9301              		.align	2
 9302              	pos_reconstruct.10576:
 9303 0160 0000     		.space	2
 9304 0162 0000     		.align	2
 9305              	one_time_execute.10574:
 9306 0164 0000     		.space	2
 9307 0166 0000     		.align	2
 9308              	safe_startup_motor_activation.10573:
 9309 0168 0000     		.space	2
 9310 016a 0000     		.align	2
 9311              	count_startup_motor.10575:
 9312 016c 00000000 		.space	8
 9312      00000000 
 9313              		.data
 9314              		.type	first_tension_valid.10602, %object
 9315              		.size	first_tension_valid.10602, 1
 9316              	first_tension_valid.10602:
 9317 0006 01       		.byte	1
 9318              		.bss
 9319              		.align	1
 9320              	count.10603:
 9321 0174 0000     		.space	2
 9322              	idx.10605:
 9323 0176 00       		.space	1
 9324 0177 00       		.align	2
 9325              	v_count.10604:
 9326 0178 00000000 		.space	4
 9327              		.align	1
 9328              	emg_counter_1.10596:
 9329 017c 0000     		.space	2
 9330              		.align	1
 9331              	emg_counter_2.10597:
 9332 017e 0000     		.space	2
 9333              		.align	2
 9334              	UD_mean_value.10600:
 9335 0180 00000000 		.space	4
 9336              		.align	1
 9337              	UD_counter.10598:
 9338 0184 0000     		.space	2
 9339 0186 0000     		.align	2
 9340              	LR_mean_value.10601:
 9341 0188 00000000 		.space	4
 9342              		.align	1
 9343              	LR_counter.10599:
 9344 018c 0000     		.space	2
 9345              	pos_cycle_status.10675:
 9346 018e 00       		.space	1
 9347 018f 00       		.align	2
 9348              	thr_pos.10679:
 9349 0190 00000000 		.space	4
 9350              		.align	2
 9351              	max_pos.10680:
 9352 0194 00000000 		.space	4
 9353              		.data
 9354 0007 00       		.align	2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 215


 9355              		.type	bin_threshold.10678, %object
 9356              		.size	bin_threshold.10678, 4
 9357              	bin_threshold.10678:
 9358 0008 FA000000 		.word	250
 9359              		.bss
 9360              		.align	2
 9361              	emg_cycle_status.10676:
 9362 0198 0000     		.space	2
 9363              	rest_cycle_status.10677:
 9364 019a 00       		.space	1
 9365 019b 00       		.align	2
 9366              	timer_value_s.10690:
 9367 019c 00000000 		.space	4
 9368              		.align	2
 9369              	timer_value_e.10691:
 9370 01a0 00000000 		.space	4
 9371              		.align	2
 9372              	m_addr.10718:
 9373 01a4 00000000 		.space	4
 9374              	row_number.10713:
 9375 01a8 00       		.space	1
 9376              		.text
 9377              	.Letext0:
 9378              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 9379              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 9380              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 9381              		.file 5 "..\\src\\commands.h"
 9382              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 9383              		.file 7 "..\\src\\globals.h"
 9384              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 9385              		.section	.debug_info,"",%progbits
 9386              	.Ldebug_info0:
 9387 0000 311A0000 		.4byte	0x1a31
 9388 0004 0400     		.2byte	0x4
 9389 0006 00000000 		.4byte	.Ldebug_abbrev0
 9390 000a 04       		.byte	0x4
 9391 000b 01       		.uleb128 0x1
 9392 000c 19080000 		.4byte	.LASF337
 9393 0010 0C       		.byte	0xc
 9394 0011 4A100000 		.4byte	.LASF338
 9395 0015 8C0B0000 		.4byte	.LASF339
 9396 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 9397 001d 00000000 		.4byte	0
 9398 0021 00000000 		.4byte	.Ldebug_line0
 9399 0025 02       		.uleb128 0x2
 9400 0026 01       		.byte	0x1
 9401 0027 06       		.byte	0x6
 9402 0028 90030000 		.4byte	.LASF0
 9403 002c 02       		.uleb128 0x2
 9404 002d 01       		.byte	0x1
 9405 002e 08       		.byte	0x8
 9406 002f 0D040000 		.4byte	.LASF1
 9407 0033 02       		.uleb128 0x2
 9408 0034 02       		.byte	0x2
 9409 0035 05       		.byte	0x5
 9410 0036 3F0E0000 		.4byte	.LASF2
 9411 003a 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 216


 9412 003b 02       		.byte	0x2
 9413 003c 07       		.byte	0x7
 9414 003d EE0F0000 		.4byte	.LASF3
 9415 0041 03       		.uleb128 0x3
 9416 0042 E0100000 		.4byte	.LASF9
 9417 0046 02       		.byte	0x2
 9418 0047 3F       		.byte	0x3f
 9419 0048 4C000000 		.4byte	0x4c
 9420 004c 02       		.uleb128 0x2
 9421 004d 04       		.byte	0x4
 9422 004e 05       		.byte	0x5
 9423 004f 78020000 		.4byte	.LASF4
 9424 0053 02       		.uleb128 0x2
 9425 0054 04       		.byte	0x4
 9426 0055 07       		.byte	0x7
 9427 0056 20070000 		.4byte	.LASF5
 9428 005a 02       		.uleb128 0x2
 9429 005b 08       		.byte	0x8
 9430 005c 05       		.byte	0x5
 9431 005d DF080000 		.4byte	.LASF6
 9432 0061 02       		.uleb128 0x2
 9433 0062 08       		.byte	0x8
 9434 0063 07       		.byte	0x7
 9435 0064 EA0B0000 		.4byte	.LASF7
 9436 0068 04       		.uleb128 0x4
 9437 0069 04       		.byte	0x4
 9438 006a 05       		.byte	0x5
 9439 006b 696E7400 		.ascii	"int\000"
 9440 006f 02       		.uleb128 0x2
 9441 0070 04       		.byte	0x4
 9442 0071 07       		.byte	0x7
 9443 0072 CD090000 		.4byte	.LASF8
 9444 0076 03       		.uleb128 0x3
 9445 0077 6E000000 		.4byte	.LASF10
 9446 007b 03       		.byte	0x3
 9447 007c 2C       		.byte	0x2c
 9448 007d 41000000 		.4byte	0x41
 9449 0081 05       		.uleb128 0x5
 9450 0082 190E0000 		.4byte	.LASF11
 9451 0086 04       		.byte	0x4
 9452 0087 E401     		.2byte	0x1e4
 9453 0089 2C000000 		.4byte	0x2c
 9454 008d 05       		.uleb128 0x5
 9455 008e 3D110000 		.4byte	.LASF12
 9456 0092 04       		.byte	0x4
 9457 0093 E501     		.2byte	0x1e5
 9458 0095 3A000000 		.4byte	0x3a
 9459 0099 05       		.uleb128 0x5
 9460 009a 94000000 		.4byte	.LASF13
 9461 009e 04       		.byte	0x4
 9462 009f E601     		.2byte	0x1e6
 9463 00a1 53000000 		.4byte	0x53
 9464 00a5 05       		.uleb128 0x5
 9465 00a6 78010000 		.4byte	.LASF14
 9466 00aa 04       		.byte	0x4
 9467 00ab E701     		.2byte	0x1e7
 9468 00ad 25000000 		.4byte	0x25
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 217


 9469 00b1 05       		.uleb128 0x5
 9470 00b2 E60E0000 		.4byte	.LASF15
 9471 00b6 04       		.byte	0x4
 9472 00b7 E801     		.2byte	0x1e8
 9473 00b9 33000000 		.4byte	0x33
 9474 00bd 05       		.uleb128 0x5
 9475 00be 6D100000 		.4byte	.LASF16
 9476 00c2 04       		.byte	0x4
 9477 00c3 E901     		.2byte	0x1e9
 9478 00c5 4C000000 		.4byte	0x4c
 9479 00c9 05       		.uleb128 0x5
 9480 00ca 2C030000 		.4byte	.LASF17
 9481 00ce 04       		.byte	0x4
 9482 00cf EA01     		.2byte	0x1ea
 9483 00d1 D5000000 		.4byte	0xd5
 9484 00d5 02       		.uleb128 0x2
 9485 00d6 04       		.byte	0x4
 9486 00d7 04       		.byte	0x4
 9487 00d8 9F090000 		.4byte	.LASF18
 9488 00dc 02       		.uleb128 0x2
 9489 00dd 08       		.byte	0x8
 9490 00de 04       		.byte	0x4
 9491 00df 22090000 		.4byte	.LASF19
 9492 00e3 02       		.uleb128 0x2
 9493 00e4 01       		.byte	0x1
 9494 00e5 08       		.byte	0x8
 9495 00e6 9F040000 		.4byte	.LASF20
 9496 00ea 05       		.uleb128 0x5
 9497 00eb 060A0000 		.4byte	.LASF21
 9498 00ef 04       		.byte	0x4
 9499 00f0 8602     		.2byte	0x286
 9500 00f2 53000000 		.4byte	0x53
 9501 00f6 05       		.uleb128 0x5
 9502 00f7 950C0000 		.4byte	.LASF22
 9503 00fb 04       		.byte	0x4
 9504 00fc 8E02     		.2byte	0x28e
 9505 00fe 02010000 		.4byte	0x102
 9506 0102 06       		.uleb128 0x6
 9507 0103 81000000 		.4byte	0x81
 9508 0107 02       		.uleb128 0x2
 9509 0108 08       		.byte	0x8
 9510 0109 04       		.byte	0x4
 9511 010a A50A0000 		.4byte	.LASF23
 9512 010e 02       		.uleb128 0x2
 9513 010f 04       		.byte	0x4
 9514 0110 07       		.byte	0x7
 9515 0111 00000000 		.4byte	.LASF24
 9516 0115 07       		.uleb128 0x7
 9517 0116 E3000000 		.4byte	0xe3
 9518 011a 25010000 		.4byte	0x125
 9519 011e 08       		.uleb128 0x8
 9520 011f 0E010000 		.4byte	0x10e
 9521 0123 07       		.byte	0x7
 9522 0124 00       		.byte	0
 9523 0125 09       		.uleb128 0x9
 9524 0126 1A110000 		.4byte	.LASF33
 9525 012a 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 218


 9526 012b 2C000000 		.4byte	0x2c
 9527 012f 05       		.byte	0x5
 9528 0130 8D       		.byte	0x8d
 9529 0131 66010000 		.4byte	0x166
 9530 0135 0A       		.uleb128 0xa
 9531 0136 93060000 		.4byte	.LASF25
 9532 013a 00       		.byte	0
 9533 013b 0A       		.uleb128 0xa
 9534 013c 0F0A0000 		.4byte	.LASF26
 9535 0140 01       		.byte	0x1
 9536 0141 0A       		.uleb128 0xa
 9537 0142 03020000 		.4byte	.LASF27
 9538 0146 02       		.byte	0x2
 9539 0147 0A       		.uleb128 0xa
 9540 0148 46010000 		.4byte	.LASF28
 9541 014c 03       		.byte	0x3
 9542 014d 0A       		.uleb128 0xa
 9543 014e 00010000 		.4byte	.LASF29
 9544 0152 04       		.byte	0x4
 9545 0153 0A       		.uleb128 0xa
 9546 0154 36000000 		.4byte	.LASF30
 9547 0158 05       		.byte	0x5
 9548 0159 0A       		.uleb128 0xa
 9549 015a 66070000 		.4byte	.LASF31
 9550 015e 06       		.byte	0x6
 9551 015f 0A       		.uleb128 0xa
 9552 0160 B90D0000 		.4byte	.LASF32
 9553 0164 07       		.byte	0x7
 9554 0165 00       		.byte	0
 9555 0166 09       		.uleb128 0x9
 9556 0167 ED080000 		.4byte	.LASF34
 9557 016b 01       		.byte	0x1
 9558 016c 2C000000 		.4byte	0x2c
 9559 0170 05       		.byte	0x5
 9560 0171 A1       		.byte	0xa1
 9561 0172 8F010000 		.4byte	0x18f
 9562 0176 0A       		.uleb128 0xa
 9563 0177 D2100000 		.4byte	.LASF35
 9564 017b 00       		.byte	0
 9565 017c 0A       		.uleb128 0xa
 9566 017d F7070000 		.4byte	.LASF36
 9567 0181 01       		.byte	0x1
 9568 0182 0A       		.uleb128 0xa
 9569 0183 950A0000 		.4byte	.LASF37
 9570 0187 02       		.byte	0x2
 9571 0188 0A       		.uleb128 0xa
 9572 0189 03070000 		.4byte	.LASF38
 9573 018d 03       		.byte	0x3
 9574 018e 00       		.byte	0
 9575 018f 03       		.uleb128 0x3
 9576 0190 9D100000 		.4byte	.LASF39
 9577 0194 06       		.byte	0x6
 9578 0195 7E       		.byte	0x7e
 9579 0196 9A010000 		.4byte	0x19a
 9580 019a 0B       		.uleb128 0xb
 9581 019b 9D100000 		.4byte	.LASF39
 9582 019f 0C       		.uleb128 0xc
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 219


 9583 01a0 04       		.byte	0x4
 9584 01a1 8F010000 		.4byte	0x18f
 9585 01a5 0D       		.uleb128 0xd
 9586 01a6 A7080000 		.4byte	.LASF42
 9587 01aa 10       		.byte	0x10
 9588 01ab 07       		.byte	0x7
 9589 01ac E2       		.byte	0xe2
 9590 01ad E2010000 		.4byte	0x1e2
 9591 01b1 0E       		.uleb128 0xe
 9592 01b2 706F7300 		.ascii	"pos\000"
 9593 01b6 07       		.byte	0x7
 9594 01b7 E3       		.byte	0xe3
 9595 01b8 BD000000 		.4byte	0xbd
 9596 01bc 00       		.byte	0
 9597 01bd 0F       		.uleb128 0xf
 9598 01be DC070000 		.4byte	.LASF40
 9599 01c2 07       		.byte	0x7
 9600 01c3 E4       		.byte	0xe4
 9601 01c4 BD000000 		.4byte	0xbd
 9602 01c8 04       		.byte	0x4
 9603 01c9 0E       		.uleb128 0xe
 9604 01ca 70776D00 		.ascii	"pwm\000"
 9605 01ce 07       		.byte	0x7
 9606 01cf E5       		.byte	0xe5
 9607 01d0 BD000000 		.4byte	0xbd
 9608 01d4 08       		.byte	0x8
 9609 01d5 0F       		.uleb128 0xf
 9610 01d6 2C0C0000 		.4byte	.LASF41
 9611 01da 07       		.byte	0x7
 9612 01db E6       		.byte	0xe6
 9613 01dc 81000000 		.4byte	0x81
 9614 01e0 0C       		.byte	0xc
 9615 01e1 00       		.byte	0
 9616 01e2 0D       		.uleb128 0xd
 9617 01e3 800D0000 		.4byte	.LASF43
 9618 01e7 34       		.byte	0x34
 9619 01e8 07       		.byte	0x7
 9620 01e9 ED       		.byte	0xed
 9621 01ea 43020000 		.4byte	0x243
 9622 01ee 0E       		.uleb128 0xe
 9623 01ef 706F7300 		.ascii	"pos\000"
 9624 01f3 07       		.byte	0x7
 9625 01f4 EE       		.byte	0xee
 9626 01f5 43020000 		.4byte	0x243
 9627 01f9 00       		.byte	0
 9628 01fa 0F       		.uleb128 0xf
 9629 01fb DC070000 		.4byte	.LASF40
 9630 01ff 07       		.byte	0x7
 9631 0200 EF       		.byte	0xef
 9632 0201 BD000000 		.4byte	0xbd
 9633 0205 0C       		.byte	0xc
 9634 0206 0F       		.uleb128 0xf
 9635 0207 1D0F0000 		.4byte	.LASF44
 9636 020b 07       		.byte	0x7
 9637 020c F0       		.byte	0xf0
 9638 020d BD000000 		.4byte	0xbd
 9639 0211 10       		.byte	0x10
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 220


 9640 0212 0F       		.uleb128 0xf
 9641 0213 5C070000 		.4byte	.LASF45
 9642 0217 07       		.byte	0x7
 9643 0218 F1       		.byte	0xf1
 9644 0219 BD000000 		.4byte	0xbd
 9645 021d 14       		.byte	0x14
 9646 021e 0E       		.uleb128 0xe
 9647 021f 726F7400 		.ascii	"rot\000"
 9648 0223 07       		.byte	0x7
 9649 0224 F2       		.byte	0xf2
 9650 0225 53020000 		.4byte	0x253
 9651 0229 18       		.byte	0x18
 9652 022a 0E       		.uleb128 0xe
 9653 022b 76656C00 		.ascii	"vel\000"
 9654 022f 07       		.byte	0x7
 9655 0230 F3       		.byte	0xf3
 9656 0231 43020000 		.4byte	0x243
 9657 0235 1C       		.byte	0x1c
 9658 0236 0E       		.uleb128 0xe
 9659 0237 61636300 		.ascii	"acc\000"
 9660 023b 07       		.byte	0x7
 9661 023c F4       		.byte	0xf4
 9662 023d 43020000 		.4byte	0x243
 9663 0241 28       		.byte	0x28
 9664 0242 00       		.byte	0
 9665 0243 07       		.uleb128 0x7
 9666 0244 BD000000 		.4byte	0xbd
 9667 0248 53020000 		.4byte	0x253
 9668 024c 08       		.uleb128 0x8
 9669 024d 0E010000 		.4byte	0x10e
 9670 0251 02       		.byte	0x2
 9671 0252 00       		.byte	0
 9672 0253 07       		.uleb128 0x7
 9673 0254 A5000000 		.4byte	0xa5
 9674 0258 63020000 		.4byte	0x263
 9675 025c 08       		.uleb128 0x8
 9676 025d 0E010000 		.4byte	0x10e
 9677 0261 02       		.byte	0x2
 9678 0262 00       		.byte	0
 9679 0263 0D       		.uleb128 0xd
 9680 0264 B4090000 		.4byte	.LASF46
 9681 0268 28       		.byte	0x28
 9682 0269 07       		.byte	0x7
 9683 026a F7       		.byte	0xf7
 9684 026b 94020000 		.4byte	0x294
 9685 026f 0E       		.uleb128 0xe
 9686 0270 656D6700 		.ascii	"emg\000"
 9687 0274 07       		.byte	0x7
 9688 0275 F8       		.byte	0xf8
 9689 0276 94020000 		.4byte	0x294
 9690 027a 00       		.byte	0
 9691 027b 0F       		.uleb128 0xf
 9692 027c 590A0000 		.4byte	.LASF47
 9693 0280 07       		.byte	0x7
 9694 0281 F9       		.byte	0xf9
 9695 0282 A4020000 		.4byte	0x2a4
 9696 0286 08       		.byte	0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 221


 9697 0287 0F       		.uleb128 0xf
 9698 0288 5E0E0000 		.4byte	.LASF48
 9699 028c 07       		.byte	0x7
 9700 028d FA       		.byte	0xfa
 9701 028e 94020000 		.4byte	0x294
 9702 0292 20       		.byte	0x20
 9703 0293 00       		.byte	0
 9704 0294 07       		.uleb128 0x7
 9705 0295 BD000000 		.4byte	0xbd
 9706 0299 A4020000 		.4byte	0x2a4
 9707 029d 08       		.uleb128 0x8
 9708 029e 0E010000 		.4byte	0x10e
 9709 02a2 01       		.byte	0x1
 9710 02a3 00       		.byte	0
 9711 02a4 07       		.uleb128 0x7
 9712 02a5 BD000000 		.4byte	0xbd
 9713 02a9 B4020000 		.4byte	0x2b4
 9714 02ad 08       		.uleb128 0x8
 9715 02ae 0E010000 		.4byte	0x10e
 9716 02b2 05       		.byte	0x5
 9717 02b3 00       		.byte	0
 9718 02b4 10       		.uleb128 0x10
 9719 02b5 8C000000 		.4byte	.LASF49
 9720 02b9 86       		.byte	0x86
 9721 02ba 07       		.byte	0x7
 9722 02bb 0501     		.2byte	0x105
 9723 02bd F6020000 		.4byte	0x2f6
 9724 02c1 11       		.uleb128 0x11
 9725 02c2 AB050000 		.4byte	.LASF50
 9726 02c6 07       		.byte	0x7
 9727 02c7 0601     		.2byte	0x106
 9728 02c9 F6020000 		.4byte	0x2f6
 9729 02cd 00       		.byte	0
 9730 02ce 11       		.uleb128 0x11
 9731 02cf 0F0C0000 		.4byte	.LASF51
 9732 02d3 07       		.byte	0x7
 9733 02d4 0701     		.2byte	0x107
 9734 02d6 B1000000 		.4byte	0xb1
 9735 02da 80       		.byte	0x80
 9736 02db 12       		.uleb128 0x12
 9737 02dc 696E6400 		.ascii	"ind\000"
 9738 02e0 07       		.byte	0x7
 9739 02e1 0801     		.2byte	0x108
 9740 02e3 B1000000 		.4byte	0xb1
 9741 02e7 82       		.byte	0x82
 9742 02e8 11       		.uleb128 0x11
 9743 02e9 D6010000 		.4byte	.LASF52
 9744 02ed 07       		.byte	0x7
 9745 02ee 0901     		.2byte	0x109
 9746 02f0 81000000 		.4byte	0x81
 9747 02f4 84       		.byte	0x84
 9748 02f5 00       		.byte	0
 9749 02f6 07       		.uleb128 0x7
 9750 02f7 81000000 		.4byte	0x81
 9751 02fb 06030000 		.4byte	0x306
 9752 02ff 08       		.uleb128 0x8
 9753 0300 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 222


 9754 0304 7F       		.byte	0x7f
 9755 0305 00       		.byte	0
 9756 0306 10       		.uleb128 0x10
 9757 0307 19030000 		.4byte	.LASF53
 9758 030b 50       		.byte	0x50
 9759 030c 07       		.byte	0x7
 9760 030d 1201     		.2byte	0x112
 9761 030f 6F030000 		.4byte	0x36f
 9762 0313 11       		.uleb128 0x11
 9763 0314 4E030000 		.4byte	.LASF54
 9764 0318 07       		.byte	0x7
 9765 0319 1301     		.2byte	0x113
 9766 031b 6F030000 		.4byte	0x36f
 9767 031f 00       		.byte	0
 9768 0320 11       		.uleb128 0x11
 9769 0321 93010000 		.4byte	.LASF55
 9770 0325 07       		.byte	0x7
 9771 0326 1401     		.2byte	0x114
 9772 0328 7F030000 		.4byte	0x37f
 9773 032c 08       		.byte	0x8
 9774 032d 11       		.uleb128 0x11
 9775 032e 880A0000 		.4byte	.LASF56
 9776 0332 07       		.byte	0x7
 9777 0333 1501     		.2byte	0x115
 9778 0335 8F030000 		.4byte	0x38f
 9779 0339 30       		.byte	0x30
 9780 033a 11       		.uleb128 0x11
 9781 033b 2A010000 		.4byte	.LASF57
 9782 033f 07       		.byte	0x7
 9783 0340 1601     		.2byte	0x116
 9784 0342 99000000 		.4byte	0x99
 9785 0346 40       		.byte	0x40
 9786 0347 11       		.uleb128 0x11
 9787 0348 EA100000 		.4byte	.LASF58
 9788 034c 07       		.byte	0x7
 9789 034d 1701     		.2byte	0x117
 9790 034f 99000000 		.4byte	0x99
 9791 0353 44       		.byte	0x44
 9792 0354 11       		.uleb128 0x11
 9793 0355 32070000 		.4byte	.LASF59
 9794 0359 07       		.byte	0x7
 9795 035a 1801     		.2byte	0x118
 9796 035c 99000000 		.4byte	0x99
 9797 0360 48       		.byte	0x48
 9798 0361 11       		.uleb128 0x11
 9799 0362 7A070000 		.4byte	.LASF60
 9800 0366 07       		.byte	0x7
 9801 0367 1901     		.2byte	0x119
 9802 0369 99000000 		.4byte	0x99
 9803 036d 4C       		.byte	0x4c
 9804 036e 00       		.byte	0
 9805 036f 07       		.uleb128 0x7
 9806 0370 99000000 		.4byte	0x99
 9807 0374 7F030000 		.4byte	0x37f
 9808 0378 08       		.uleb128 0x8
 9809 0379 0E010000 		.4byte	0x10e
 9810 037d 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 223


 9811 037e 00       		.byte	0
 9812 037f 07       		.uleb128 0x7
 9813 0380 99000000 		.4byte	0x99
 9814 0384 8F030000 		.4byte	0x38f
 9815 0388 08       		.uleb128 0x8
 9816 0389 0E010000 		.4byte	0x10e
 9817 038d 09       		.byte	0x9
 9818 038e 00       		.byte	0
 9819 038f 07       		.uleb128 0x7
 9820 0390 99000000 		.4byte	0x99
 9821 0394 9F030000 		.4byte	0x39f
 9822 0398 08       		.uleb128 0x8
 9823 0399 0E010000 		.4byte	0x10e
 9824 039d 03       		.byte	0x3
 9825 039e 00       		.byte	0
 9826 039f 10       		.uleb128 0x10
 9827 03a0 F9010000 		.4byte	.LASF61
 9828 03a4 10       		.byte	0x10
 9829 03a5 07       		.byte	0x7
 9830 03a6 2001     		.2byte	0x120
 9831 03a8 2E040000 		.4byte	0x42e
 9832 03ac 12       		.uleb128 0x12
 9833 03ad 696400   		.ascii	"id\000"
 9834 03b0 07       		.byte	0x7
 9835 03b1 2101     		.2byte	0x121
 9836 03b3 81000000 		.4byte	0x81
 9837 03b7 00       		.byte	0
 9838 03b8 11       		.uleb128 0x11
 9839 03b9 790E0000 		.4byte	.LASF62
 9840 03bd 07       		.byte	0x7
 9841 03be 2201     		.2byte	0x122
 9842 03c0 2E040000 		.4byte	0x42e
 9843 03c4 01       		.byte	0x1
 9844 03c5 11       		.uleb128 0x11
 9845 03c6 B50E0000 		.4byte	.LASF63
 9846 03ca 07       		.byte	0x7
 9847 03cb 2301     		.2byte	0x123
 9848 03cd 2E040000 		.4byte	0x42e
 9849 03d1 04       		.byte	0x4
 9850 03d2 11       		.uleb128 0x11
 9851 03d3 67040000 		.4byte	.LASF64
 9852 03d7 07       		.byte	0x7
 9853 03d8 2401     		.2byte	0x124
 9854 03da 81000000 		.4byte	0x81
 9855 03de 07       		.byte	0x7
 9856 03df 11       		.uleb128 0x11
 9857 03e0 A2020000 		.4byte	.LASF65
 9858 03e4 07       		.byte	0x7
 9859 03e5 2501     		.2byte	0x125
 9860 03e7 81000000 		.4byte	0x81
 9861 03eb 08       		.byte	0x8
 9862 03ec 11       		.uleb128 0x11
 9863 03ed 1F020000 		.4byte	.LASF66
 9864 03f1 07       		.byte	0x7
 9865 03f2 2601     		.2byte	0x126
 9866 03f4 81000000 		.4byte	0x81
 9867 03f8 09       		.byte	0x9
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 224


 9868 03f9 11       		.uleb128 0x11
 9869 03fa C20F0000 		.4byte	.LASF67
 9870 03fe 07       		.byte	0x7
 9871 03ff 2701     		.2byte	0x127
 9872 0401 81000000 		.4byte	0x81
 9873 0405 0A       		.byte	0xa
 9874 0406 11       		.uleb128 0x11
 9875 0407 560F0000 		.4byte	.LASF68
 9876 040b 07       		.byte	0x7
 9877 040c 2801     		.2byte	0x128
 9878 040e 81000000 		.4byte	0x81
 9879 0412 0B       		.byte	0xb
 9880 0413 11       		.uleb128 0x11
 9881 0414 2F0D0000 		.4byte	.LASF69
 9882 0418 07       		.byte	0x7
 9883 0419 2901     		.2byte	0x129
 9884 041b 81000000 		.4byte	0x81
 9885 041f 0C       		.byte	0xc
 9886 0420 11       		.uleb128 0x11
 9887 0421 E6020000 		.4byte	.LASF70
 9888 0425 07       		.byte	0x7
 9889 0426 2A01     		.2byte	0x12a
 9890 0428 2E040000 		.4byte	0x42e
 9891 042c 0D       		.byte	0xd
 9892 042d 00       		.byte	0
 9893 042e 07       		.uleb128 0x7
 9894 042f 81000000 		.4byte	0x81
 9895 0433 3E040000 		.4byte	0x43e
 9896 0437 08       		.uleb128 0x8
 9897 0438 0E010000 		.4byte	0x10e
 9898 043c 02       		.byte	0x2
 9899 043d 00       		.byte	0
 9900 043e 10       		.uleb128 0x10
 9901 043f 88100000 		.4byte	.LASF71
 9902 0443 70       		.byte	0x70
 9903 0444 07       		.byte	0x7
 9904 0445 3101     		.2byte	0x131
 9905 0447 B8050000 		.4byte	0x5b8
 9906 044b 12       		.uleb128 0x12
 9907 044c 6B5F7000 		.ascii	"k_p\000"
 9908 0450 07       		.byte	0x7
 9909 0451 3201     		.2byte	0x132
 9910 0453 BD000000 		.4byte	0xbd
 9911 0457 00       		.byte	0
 9912 0458 12       		.uleb128 0x12
 9913 0459 6B5F6900 		.ascii	"k_i\000"
 9914 045d 07       		.byte	0x7
 9915 045e 3301     		.2byte	0x133
 9916 0460 BD000000 		.4byte	0xbd
 9917 0464 04       		.byte	0x4
 9918 0465 12       		.uleb128 0x12
 9919 0466 6B5F6400 		.ascii	"k_d\000"
 9920 046a 07       		.byte	0x7
 9921 046b 3401     		.2byte	0x134
 9922 046d BD000000 		.4byte	0xbd
 9923 0471 08       		.byte	0x8
 9924 0472 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 225


 9925 0473 680C0000 		.4byte	.LASF72
 9926 0477 07       		.byte	0x7
 9927 0478 3501     		.2byte	0x135
 9928 047a BD000000 		.4byte	0xbd
 9929 047e 0C       		.byte	0xc
 9930 047f 11       		.uleb128 0x11
 9931 0480 08050000 		.4byte	.LASF73
 9932 0484 07       		.byte	0x7
 9933 0485 3601     		.2byte	0x136
 9934 0487 BD000000 		.4byte	0xbd
 9935 048b 10       		.byte	0x10
 9936 048c 11       		.uleb128 0x11
 9937 048d F0040000 		.4byte	.LASF74
 9938 0491 07       		.byte	0x7
 9939 0492 3701     		.2byte	0x137
 9940 0494 BD000000 		.4byte	0xbd
 9941 0498 14       		.byte	0x14
 9942 0499 11       		.uleb128 0x11
 9943 049a 160F0000 		.4byte	.LASF75
 9944 049e 07       		.byte	0x7
 9945 049f 3801     		.2byte	0x138
 9946 04a1 BD000000 		.4byte	0xbd
 9947 04a5 18       		.byte	0x18
 9948 04a6 11       		.uleb128 0x11
 9949 04a7 A4050000 		.4byte	.LASF76
 9950 04ab 07       		.byte	0x7
 9951 04ac 3901     		.2byte	0x139
 9952 04ae BD000000 		.4byte	0xbd
 9953 04b2 1C       		.byte	0x1c
 9954 04b3 11       		.uleb128 0x11
 9955 04b4 490E0000 		.4byte	.LASF77
 9956 04b8 07       		.byte	0x7
 9957 04b9 3A01     		.2byte	0x13a
 9958 04bb BD000000 		.4byte	0xbd
 9959 04bf 20       		.byte	0x20
 9960 04c0 11       		.uleb128 0x11
 9961 04c1 B2050000 		.4byte	.LASF78
 9962 04c5 07       		.byte	0x7
 9963 04c6 3B01     		.2byte	0x13b
 9964 04c8 BD000000 		.4byte	0xbd
 9965 04cc 24       		.byte	0x24
 9966 04cd 11       		.uleb128 0x11
 9967 04ce EC060000 		.4byte	.LASF79
 9968 04d2 07       		.byte	0x7
 9969 04d3 3C01     		.2byte	0x13c
 9970 04d5 BD000000 		.4byte	0xbd
 9971 04d9 28       		.byte	0x28
 9972 04da 11       		.uleb128 0x11
 9973 04db 62110000 		.4byte	.LASF80
 9974 04df 07       		.byte	0x7
 9975 04e0 3D01     		.2byte	0x13d
 9976 04e2 BD000000 		.4byte	0xbd
 9977 04e6 2C       		.byte	0x2c
 9978 04e7 11       		.uleb128 0x11
 9979 04e8 8A070000 		.4byte	.LASF81
 9980 04ec 07       		.byte	0x7
 9981 04ed 3E01     		.2byte	0x13e
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 226


 9982 04ef 81000000 		.4byte	0x81
 9983 04f3 30       		.byte	0x30
 9984 04f4 11       		.uleb128 0x11
 9985 04f5 FF0E0000 		.4byte	.LASF82
 9986 04f9 07       		.byte	0x7
 9987 04fa 3F01     		.2byte	0x13f
 9988 04fc 81000000 		.4byte	0x81
 9989 0500 31       		.byte	0x31
 9990 0501 11       		.uleb128 0x11
 9991 0502 7A0C0000 		.4byte	.LASF83
 9992 0506 07       		.byte	0x7
 9993 0507 4001     		.2byte	0x140
 9994 0509 81000000 		.4byte	0x81
 9995 050d 32       		.byte	0x32
 9996 050e 11       		.uleb128 0x11
 9997 050f A5100000 		.4byte	.LASF84
 9998 0513 07       		.byte	0x7
 9999 0514 4101     		.2byte	0x141
 10000 0516 81000000 		.4byte	0x81
 10001 051a 33       		.byte	0x33
 10002 051b 11       		.uleb128 0x11
 10003 051c AB000000 		.4byte	.LASF85
 10004 0520 07       		.byte	0x7
 10005 0521 4201     		.2byte	0x142
 10006 0523 BD000000 		.4byte	0xbd
 10007 0527 34       		.byte	0x34
 10008 0528 11       		.uleb128 0x11
 10009 0529 38050000 		.4byte	.LASF86
 10010 052d 07       		.byte	0x7
 10011 052e 4301     		.2byte	0x143
 10012 0530 BD000000 		.4byte	0xbd
 10013 0534 38       		.byte	0x38
 10014 0535 11       		.uleb128 0x11
 10015 0536 70090000 		.4byte	.LASF87
 10016 053a 07       		.byte	0x7
 10017 053b 4401     		.2byte	0x144
 10018 053d BD000000 		.4byte	0xbd
 10019 0541 3C       		.byte	0x3c
 10020 0542 11       		.uleb128 0x11
 10021 0543 A4040000 		.4byte	.LASF88
 10022 0547 07       		.byte	0x7
 10023 0548 4501     		.2byte	0x145
 10024 054a BD000000 		.4byte	0xbd
 10025 054e 40       		.byte	0x40
 10026 054f 11       		.uleb128 0x11
 10027 0550 14010000 		.4byte	.LASF89
 10028 0554 07       		.byte	0x7
 10029 0555 4601     		.2byte	0x146
 10030 0557 B8050000 		.4byte	0x5b8
 10031 055b 44       		.byte	0x44
 10032 055c 11       		.uleb128 0x11
 10033 055d 0C110000 		.4byte	.LASF90
 10034 0561 07       		.byte	0x7
 10035 0562 4701     		.2byte	0x147
 10036 0564 B1000000 		.4byte	0xb1
 10037 0568 5C       		.byte	0x5c
 10038 0569 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 227


 10039 056a EC070000 		.4byte	.LASF91
 10040 056e 07       		.byte	0x7
 10041 056f 4801     		.2byte	0x148
 10042 0571 81000000 		.4byte	0x81
 10043 0575 5E       		.byte	0x5e
 10044 0576 11       		.uleb128 0x11
 10045 0577 F9090000 		.4byte	.LASF92
 10046 057b 07       		.byte	0x7
 10047 057c 4901     		.2byte	0x149
 10048 057e 81000000 		.4byte	0x81
 10049 0582 5F       		.byte	0x5f
 10050 0583 11       		.uleb128 0x11
 10051 0584 72040000 		.4byte	.LASF93
 10052 0588 07       		.byte	0x7
 10053 0589 4A01     		.2byte	0x14a
 10054 058b 81000000 		.4byte	0x81
 10055 058f 60       		.byte	0x60
 10056 0590 11       		.uleb128 0x11
 10057 0591 DF040000 		.4byte	.LASF94
 10058 0595 07       		.byte	0x7
 10059 0596 4B01     		.2byte	0x14b
 10060 0598 81000000 		.4byte	0x81
 10061 059c 61       		.byte	0x61
 10062 059d 11       		.uleb128 0x11
 10063 059e 1B040000 		.4byte	.LASF95
 10064 05a2 07       		.byte	0x7
 10065 05a3 4C01     		.2byte	0x14c
 10066 05a5 81000000 		.4byte	0x81
 10067 05a9 62       		.byte	0x62
 10068 05aa 11       		.uleb128 0x11
 10069 05ab E6020000 		.4byte	.LASF70
 10070 05af 07       		.byte	0x7
 10071 05b0 4D01     		.2byte	0x14d
 10072 05b2 C8050000 		.4byte	0x5c8
 10073 05b6 63       		.byte	0x63
 10074 05b7 00       		.byte	0
 10075 05b8 07       		.uleb128 0x7
 10076 05b9 D5000000 		.4byte	0xd5
 10077 05bd C8050000 		.4byte	0x5c8
 10078 05c1 08       		.uleb128 0x8
 10079 05c2 0E010000 		.4byte	0x10e
 10080 05c6 05       		.byte	0x5
 10081 05c7 00       		.byte	0
 10082 05c8 07       		.uleb128 0x7
 10083 05c9 81000000 		.4byte	0x81
 10084 05cd D8050000 		.4byte	0x5d8
 10085 05d1 08       		.uleb128 0x8
 10086 05d2 0E010000 		.4byte	0x10e
 10087 05d6 0C       		.byte	0xc
 10088 05d7 00       		.byte	0
 10089 05d8 10       		.uleb128 0x10
 10090 05d9 01100000 		.4byte	.LASF96
 10091 05dd 30       		.byte	0x30
 10092 05de 07       		.byte	0x7
 10093 05df 5401     		.2byte	0x154
 10094 05e1 5B060000 		.4byte	0x65b
 10095 05e5 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 228


 10096 05e6 52090000 		.4byte	.LASF97
 10097 05ea 07       		.byte	0x7
 10098 05eb 5501     		.2byte	0x155
 10099 05ed 5B060000 		.4byte	0x65b
 10100 05f1 00       		.byte	0
 10101 05f2 12       		.uleb128 0x12
 10102 05f3 72657300 		.ascii	"res\000"
 10103 05f7 07       		.byte	0x7
 10104 05f8 5601     		.2byte	0x156
 10105 05fa 2E040000 		.4byte	0x42e
 10106 05fe 05       		.byte	0x5
 10107 05ff 11       		.uleb128 0x11
 10108 0600 AC070000 		.4byte	.LASF98
 10109 0604 07       		.byte	0x7
 10110 0605 5701     		.2byte	0x157
 10111 0607 43020000 		.4byte	0x243
 10112 060b 08       		.byte	0x8
 10113 060c 11       		.uleb128 0x11
 10114 060d 01050000 		.4byte	.LASF99
 10115 0611 07       		.byte	0x7
 10116 0612 5801     		.2byte	0x158
 10117 0614 6B060000 		.4byte	0x66b
 10118 0618 14       		.byte	0x14
 10119 0619 11       		.uleb128 0x11
 10120 061a 2D0B0000 		.4byte	.LASF100
 10121 061e 07       		.byte	0x7
 10122 061f 5901     		.2byte	0x159
 10123 0621 81000000 		.4byte	0x81
 10124 0625 20       		.byte	0x20
 10125 0626 11       		.uleb128 0x11
 10126 0627 DC010000 		.4byte	.LASF101
 10127 062b 07       		.byte	0x7
 10128 062c 5A01     		.2byte	0x15a
 10129 062e 2E040000 		.4byte	0x42e
 10130 0632 21       		.byte	0x21
 10131 0633 11       		.uleb128 0x11
 10132 0634 DE0A0000 		.4byte	.LASF102
 10133 0638 07       		.byte	0x7
 10134 0639 5B01     		.2byte	0x15b
 10135 063b A5000000 		.4byte	0xa5
 10136 063f 24       		.byte	0x24
 10137 0640 11       		.uleb128 0x11
 10138 0641 510D0000 		.4byte	.LASF103
 10139 0645 07       		.byte	0x7
 10140 0646 5C01     		.2byte	0x15c
 10141 0648 53020000 		.4byte	0x253
 10142 064c 25       		.byte	0x25
 10143 064d 11       		.uleb128 0x11
 10144 064e E6020000 		.4byte	.LASF70
 10145 0652 07       		.byte	0x7
 10146 0653 5D01     		.2byte	0x15d
 10147 0655 7B060000 		.4byte	0x67b
 10148 0659 28       		.byte	0x28
 10149 065a 00       		.byte	0
 10150 065b 07       		.uleb128 0x7
 10151 065c 81000000 		.4byte	0x81
 10152 0660 6B060000 		.4byte	0x66b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 229


 10153 0664 08       		.uleb128 0x8
 10154 0665 0E010000 		.4byte	0x10e
 10155 0669 04       		.byte	0x4
 10156 066a 00       		.byte	0
 10157 066b 07       		.uleb128 0x7
 10158 066c C9000000 		.4byte	0xc9
 10159 0670 7B060000 		.4byte	0x67b
 10160 0674 08       		.uleb128 0x8
 10161 0675 0E010000 		.4byte	0x10e
 10162 0679 02       		.byte	0x2
 10163 067a 00       		.byte	0
 10164 067b 07       		.uleb128 0x7
 10165 067c 81000000 		.4byte	0x81
 10166 0680 8B060000 		.4byte	0x68b
 10167 0684 08       		.uleb128 0x8
 10168 0685 0E010000 		.4byte	0x10e
 10169 0689 07       		.byte	0x7
 10170 068a 00       		.byte	0
 10171 068b 10       		.uleb128 0x10
 10172 068c 8C010000 		.4byte	.LASF104
 10173 0690 10       		.byte	0x10
 10174 0691 07       		.byte	0x7
 10175 0692 6401     		.2byte	0x164
 10176 0694 DA060000 		.4byte	0x6da
 10177 0698 11       		.uleb128 0x11
 10178 0699 670A0000 		.4byte	.LASF105
 10179 069d 07       		.byte	0x7
 10180 069e 6501     		.2byte	0x165
 10181 06a0 DA060000 		.4byte	0x6da
 10182 06a4 00       		.byte	0
 10183 06a5 11       		.uleb128 0x11
 10184 06a6 FE100000 		.4byte	.LASF106
 10185 06aa 07       		.byte	0x7
 10186 06ab 6601     		.2byte	0x166
 10187 06ad 6F030000 		.4byte	0x36f
 10188 06b1 04       		.byte	0x4
 10189 06b2 11       		.uleb128 0x11
 10190 06b3 4E050000 		.4byte	.LASF107
 10191 06b7 07       		.byte	0x7
 10192 06b8 6701     		.2byte	0x167
 10193 06ba EA060000 		.4byte	0x6ea
 10194 06be 0C       		.byte	0xc
 10195 06bf 11       		.uleb128 0x11
 10196 06c0 6B0D0000 		.4byte	.LASF108
 10197 06c4 07       		.byte	0x7
 10198 06c5 6801     		.2byte	0x168
 10199 06c7 81000000 		.4byte	0x81
 10200 06cb 0E       		.byte	0xe
 10201 06cc 11       		.uleb128 0x11
 10202 06cd CA030000 		.4byte	.LASF109
 10203 06d1 07       		.byte	0x7
 10204 06d2 6901     		.2byte	0x169
 10205 06d4 81000000 		.4byte	0x81
 10206 06d8 0F       		.byte	0xf
 10207 06d9 00       		.byte	0
 10208 06da 07       		.uleb128 0x7
 10209 06db 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 230


 10210 06df EA060000 		.4byte	0x6ea
 10211 06e3 08       		.uleb128 0x8
 10212 06e4 0E010000 		.4byte	0x10e
 10213 06e8 01       		.byte	0x1
 10214 06e9 00       		.byte	0
 10215 06ea 07       		.uleb128 0x7
 10216 06eb 81000000 		.4byte	0x81
 10217 06ef FA060000 		.4byte	0x6fa
 10218 06f3 08       		.uleb128 0x8
 10219 06f4 0E010000 		.4byte	0x10e
 10220 06f8 01       		.byte	0x1
 10221 06f9 00       		.byte	0
 10222 06fa 10       		.uleb128 0x10
 10223 06fb 230A0000 		.4byte	.LASF110
 10224 06ff 20       		.byte	0x20
 10225 0700 07       		.byte	0x7
 10226 0701 7001     		.2byte	0x170
 10227 0703 3C070000 		.4byte	0x73c
 10228 0707 11       		.uleb128 0x11
 10229 0708 4A020000 		.4byte	.LASF111
 10230 070c 07       		.byte	0x7
 10231 070d 7101     		.2byte	0x171
 10232 070f 81000000 		.4byte	0x81
 10233 0713 00       		.byte	0
 10234 0714 11       		.uleb128 0x11
 10235 0715 DF0F0000 		.4byte	.LASF112
 10236 0719 07       		.byte	0x7
 10237 071a 7201     		.2byte	0x172
 10238 071c 81000000 		.4byte	0x81
 10239 0720 01       		.byte	0x1
 10240 0721 11       		.uleb128 0x11
 10241 0722 A5090000 		.4byte	.LASF113
 10242 0726 07       		.byte	0x7
 10243 0727 7301     		.2byte	0x173
 10244 0729 3C070000 		.4byte	0x73c
 10245 072d 02       		.byte	0x2
 10246 072e 11       		.uleb128 0x11
 10247 072f E6020000 		.4byte	.LASF70
 10248 0733 07       		.byte	0x7
 10249 0734 7401     		.2byte	0x174
 10250 0736 5B060000 		.4byte	0x65b
 10251 073a 1B       		.byte	0x1b
 10252 073b 00       		.byte	0
 10253 073c 07       		.uleb128 0x7
 10254 073d 81000000 		.4byte	0x81
 10255 0741 52070000 		.4byte	0x752
 10256 0745 08       		.uleb128 0x8
 10257 0746 0E010000 		.4byte	0x10e
 10258 074a 04       		.byte	0x4
 10259 074b 08       		.uleb128 0x8
 10260 074c 0E010000 		.4byte	0x10e
 10261 0750 04       		.byte	0x4
 10262 0751 00       		.byte	0
 10263 0752 10       		.uleb128 0x10
 10264 0753 5E0D0000 		.4byte	.LASF114
 10265 0757 20       		.byte	0x20
 10266 0758 07       		.byte	0x7
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 231


 10267 0759 7B01     		.2byte	0x17b
 10268 075b A1070000 		.4byte	0x7a1
 10269 075f 11       		.uleb128 0x11
 10270 0760 230B0000 		.4byte	.LASF115
 10271 0764 07       		.byte	0x7
 10272 0765 7C01     		.2byte	0x17c
 10273 0767 A1070000 		.4byte	0x7a1
 10274 076b 00       		.byte	0
 10275 076c 11       		.uleb128 0x11
 10276 076d EC0E0000 		.4byte	.LASF116
 10277 0771 07       		.byte	0x7
 10278 0772 7D01     		.2byte	0x17d
 10279 0774 81000000 		.4byte	0x81
 10280 0778 06       		.byte	0x6
 10281 0779 11       		.uleb128 0x11
 10282 077a 4E000000 		.4byte	.LASF117
 10283 077e 07       		.byte	0x7
 10284 077f 7E01     		.2byte	0x17e
 10285 0781 81000000 		.4byte	0x81
 10286 0785 07       		.byte	0x7
 10287 0786 11       		.uleb128 0x11
 10288 0787 8D050000 		.4byte	.LASF118
 10289 078b 07       		.byte	0x7
 10290 078c 7F01     		.2byte	0x17f
 10291 078e B1070000 		.4byte	0x7b1
 10292 0792 08       		.byte	0x8
 10293 0793 11       		.uleb128 0x11
 10294 0794 E6020000 		.4byte	.LASF70
 10295 0798 07       		.byte	0x7
 10296 0799 8001     		.2byte	0x180
 10297 079b B1070000 		.4byte	0x7b1
 10298 079f 14       		.byte	0x14
 10299 07a0 00       		.byte	0
 10300 07a1 07       		.uleb128 0x7
 10301 07a2 81000000 		.4byte	0x81
 10302 07a6 B1070000 		.4byte	0x7b1
 10303 07aa 08       		.uleb128 0x8
 10304 07ab 0E010000 		.4byte	0x10e
 10305 07af 05       		.byte	0x5
 10306 07b0 00       		.byte	0
 10307 07b1 07       		.uleb128 0x7
 10308 07b2 81000000 		.4byte	0x81
 10309 07b6 C1070000 		.4byte	0x7c1
 10310 07ba 08       		.uleb128 0x8
 10311 07bb 0E010000 		.4byte	0x10e
 10312 07bf 0B       		.byte	0xb
 10313 07c0 00       		.byte	0
 10314 07c1 10       		.uleb128 0x10
 10315 07c2 490D0000 		.4byte	.LASF119
 10316 07c6 20       		.byte	0x20
 10317 07c7 07       		.byte	0x7
 10318 07c8 8701     		.2byte	0x187
 10319 07ca F6070000 		.4byte	0x7f6
 10320 07ce 11       		.uleb128 0x11
 10321 07cf 9C030000 		.4byte	.LASF120
 10322 07d3 07       		.byte	0x7
 10323 07d4 8801     		.2byte	0x188
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 232


 10324 07d6 15010000 		.4byte	0x115
 10325 07da 00       		.byte	0
 10326 07db 11       		.uleb128 0x11
 10327 07dc BF020000 		.4byte	.LASF121
 10328 07e0 07       		.byte	0x7
 10329 07e1 8901     		.2byte	0x189
 10330 07e3 8B060000 		.4byte	0x68b
 10331 07e7 08       		.byte	0x8
 10332 07e8 11       		.uleb128 0x11
 10333 07e9 E6020000 		.4byte	.LASF70
 10334 07ed 07       		.byte	0x7
 10335 07ee 8A01     		.2byte	0x18a
 10336 07f0 7B060000 		.4byte	0x67b
 10337 07f4 18       		.byte	0x18
 10338 07f5 00       		.byte	0
 10339 07f6 10       		.uleb128 0x10
 10340 07f7 BB080000 		.4byte	.LASF122
 10341 07fb 10       		.byte	0x10
 10342 07fc 07       		.byte	0x7
 10343 07fd 9101     		.2byte	0x191
 10344 07ff 45080000 		.4byte	0x845
 10345 0803 11       		.uleb128 0x11
 10346 0804 D3070000 		.4byte	.LASF123
 10347 0808 07       		.byte	0x7
 10348 0809 9201     		.2byte	0x192
 10349 080b BD000000 		.4byte	0xbd
 10350 080f 00       		.byte	0
 10351 0810 11       		.uleb128 0x11
 10352 0811 44110000 		.4byte	.LASF124
 10353 0815 07       		.byte	0x7
 10354 0816 9301     		.2byte	0x193
 10355 0818 BD000000 		.4byte	0xbd
 10356 081c 04       		.byte	0x4
 10357 081d 11       		.uleb128 0x11
 10358 081e 58050000 		.4byte	.LASF125
 10359 0822 07       		.byte	0x7
 10360 0823 9401     		.2byte	0x194
 10361 0825 BD000000 		.4byte	0xbd
 10362 0829 08       		.byte	0x8
 10363 082a 11       		.uleb128 0x11
 10364 082b C2060000 		.4byte	.LASF126
 10365 082f 07       		.byte	0x7
 10366 0830 9501     		.2byte	0x195
 10367 0832 81000000 		.4byte	0x81
 10368 0836 0C       		.byte	0xc
 10369 0837 11       		.uleb128 0x11
 10370 0838 E6020000 		.4byte	.LASF70
 10371 083c 07       		.byte	0x7
 10372 083d 9601     		.2byte	0x196
 10373 083f 2E040000 		.4byte	0x42e
 10374 0843 0D       		.byte	0xd
 10375 0844 00       		.byte	0
 10376 0845 10       		.uleb128 0x10
 10377 0846 1F0E0000 		.4byte	.LASF127
 10378 084a 10       		.byte	0x10
 10379 084b 07       		.byte	0x7
 10380 084c 9D01     		.2byte	0x19d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 233


 10381 084e 87080000 		.4byte	0x887
 10382 0852 11       		.uleb128 0x11
 10383 0853 D5060000 		.4byte	.LASF128
 10384 0857 07       		.byte	0x7
 10385 0858 9E01     		.2byte	0x19e
 10386 085a 8D000000 		.4byte	0x8d
 10387 085e 00       		.byte	0
 10388 085f 11       		.uleb128 0x11
 10389 0860 A60D0000 		.4byte	.LASF129
 10390 0864 07       		.byte	0x7
 10391 0865 9F01     		.2byte	0x19f
 10392 0867 B1000000 		.4byte	0xb1
 10393 086b 02       		.byte	0x2
 10394 086c 11       		.uleb128 0x11
 10395 086d 4D070000 		.4byte	.LASF130
 10396 0871 07       		.byte	0x7
 10397 0872 A001     		.2byte	0x1a0
 10398 0874 DA060000 		.4byte	0x6da
 10399 0878 04       		.byte	0x4
 10400 0879 11       		.uleb128 0x11
 10401 087a E6020000 		.4byte	.LASF70
 10402 087e 07       		.byte	0x7
 10403 087f A101     		.2byte	0x1a1
 10404 0881 7B060000 		.4byte	0x67b
 10405 0885 08       		.byte	0x8
 10406 0886 00       		.byte	0
 10407 0887 10       		.uleb128 0x10
 10408 0888 37010000 		.4byte	.LASF131
 10409 088c 10       		.byte	0x10
 10410 088d 07       		.byte	0x7
 10411 088e A801     		.2byte	0x1a8
 10412 0890 BC080000 		.4byte	0x8bc
 10413 0894 11       		.uleb128 0x11
 10414 0895 F40C0000 		.4byte	.LASF132
 10415 0899 07       		.byte	0x7
 10416 089a A901     		.2byte	0x1a9
 10417 089c 81000000 		.4byte	0x81
 10418 08a0 00       		.byte	0
 10419 08a1 11       		.uleb128 0x11
 10420 08a2 91090000 		.4byte	.LASF133
 10421 08a6 07       		.byte	0x7
 10422 08a7 AA01     		.2byte	0x1aa
 10423 08a9 81000000 		.4byte	0x81
 10424 08ad 01       		.byte	0x1
 10425 08ae 11       		.uleb128 0x11
 10426 08af E6020000 		.4byte	.LASF70
 10427 08b3 07       		.byte	0x7
 10428 08b4 AB01     		.2byte	0x1ab
 10429 08b6 BC080000 		.4byte	0x8bc
 10430 08ba 02       		.byte	0x2
 10431 08bb 00       		.byte	0
 10432 08bc 07       		.uleb128 0x7
 10433 08bd 81000000 		.4byte	0x81
 10434 08c1 CC080000 		.4byte	0x8cc
 10435 08c5 08       		.uleb128 0x8
 10436 08c6 0E010000 		.4byte	0x10e
 10437 08ca 0D       		.byte	0xd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 234


 10438 08cb 00       		.byte	0
 10439 08cc 10       		.uleb128 0x10
 10440 08cd D4080000 		.4byte	.LASF134
 10441 08d1 10       		.byte	0x10
 10442 08d2 07       		.byte	0x7
 10443 08d3 B201     		.2byte	0x1b2
 10444 08d5 0E090000 		.4byte	0x90e
 10445 08d9 11       		.uleb128 0x11
 10446 08da 17100000 		.4byte	.LASF135
 10447 08de 07       		.byte	0x7
 10448 08df B301     		.2byte	0x1b3
 10449 08e1 BD000000 		.4byte	0xbd
 10450 08e5 00       		.byte	0
 10451 08e6 11       		.uleb128 0x11
 10452 08e7 AD060000 		.4byte	.LASF136
 10453 08eb 07       		.byte	0x7
 10454 08ec B401     		.2byte	0x1b4
 10455 08ee D5000000 		.4byte	0xd5
 10456 08f2 04       		.byte	0x4
 10457 08f3 11       		.uleb128 0x11
 10458 08f4 AC0C0000 		.4byte	.LASF137
 10459 08f8 07       		.byte	0x7
 10460 08f9 B501     		.2byte	0x1b5
 10461 08fb D5000000 		.4byte	0xd5
 10462 08ff 08       		.byte	0x8
 10463 0900 11       		.uleb128 0x11
 10464 0901 E6020000 		.4byte	.LASF70
 10465 0905 07       		.byte	0x7
 10466 0906 B601     		.2byte	0x1b6
 10467 0908 0E090000 		.4byte	0x90e
 10468 090c 0C       		.byte	0xc
 10469 090d 00       		.byte	0
 10470 090e 07       		.uleb128 0x7
 10471 090f 81000000 		.4byte	0x81
 10472 0913 1E090000 		.4byte	0x91e
 10473 0917 08       		.uleb128 0x8
 10474 0918 0E010000 		.4byte	0x10e
 10475 091c 03       		.byte	0x3
 10476 091d 00       		.byte	0
 10477 091e 10       		.uleb128 0x10
 10478 091f C1010000 		.4byte	.LASF138
 10479 0923 12       		.byte	0x12
 10480 0924 07       		.byte	0x7
 10481 0925 BD01     		.2byte	0x1bd
 10482 0927 60090000 		.4byte	0x960
 10483 092b 11       		.uleb128 0x11
 10484 092c 2D110000 		.4byte	.LASF139
 10485 0930 07       		.byte	0x7
 10486 0931 BE01     		.2byte	0x1be
 10487 0933 81000000 		.4byte	0x81
 10488 0937 00       		.byte	0
 10489 0938 11       		.uleb128 0x11
 10490 0939 CC0F0000 		.4byte	.LASF140
 10491 093d 07       		.byte	0x7
 10492 093e BF01     		.2byte	0x1bf
 10493 0940 DA060000 		.4byte	0x6da
 10494 0944 02       		.byte	0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 235


 10495 0945 11       		.uleb128 0x11
 10496 0946 1A000000 		.4byte	.LASF141
 10497 094a 07       		.byte	0x7
 10498 094b C001     		.2byte	0x1c0
 10499 094d 81000000 		.4byte	0x81
 10500 0951 06       		.byte	0x6
 10501 0952 11       		.uleb128 0x11
 10502 0953 E6020000 		.4byte	.LASF70
 10503 0957 07       		.byte	0x7
 10504 0958 C101     		.2byte	0x1c1
 10505 095a 60090000 		.4byte	0x960
 10506 095e 07       		.byte	0x7
 10507 095f 00       		.byte	0
 10508 0960 07       		.uleb128 0x7
 10509 0961 81000000 		.4byte	0x81
 10510 0965 70090000 		.4byte	0x970
 10511 0969 08       		.uleb128 0x8
 10512 096a 0E010000 		.4byte	0x10e
 10513 096e 09       		.byte	0x9
 10514 096f 00       		.byte	0
 10515 0970 13       		.uleb128 0x13
 10516 0971 32100000 		.4byte	.LASF142
 10517 0975 F402     		.2byte	0x2f4
 10518 0977 07       		.byte	0x7
 10519 0978 CA01     		.2byte	0x1ca
 10520 097a 550A0000 		.4byte	0xa55
 10521 097e 11       		.uleb128 0x11
 10522 097f F4090000 		.4byte	.LASF143
 10523 0983 07       		.byte	0x7
 10524 0984 CC01     		.2byte	0x1cc
 10525 0986 81000000 		.4byte	0x81
 10526 098a 00       		.byte	0
 10527 098b 11       		.uleb128 0x11
 10528 098c E6020000 		.4byte	.LASF70
 10529 0990 07       		.byte	0x7
 10530 0991 CD01     		.2byte	0x1cd
 10531 0993 550A0000 		.4byte	0xa55
 10532 0997 01       		.byte	0x1
 10533 0998 12       		.uleb128 0x12
 10534 0999 636E7400 		.ascii	"cnt\000"
 10535 099d 07       		.byte	0x7
 10536 099e CE01     		.2byte	0x1ce
 10537 09a0 06030000 		.4byte	0x306
 10538 09a4 10       		.byte	0x10
 10539 09a5 11       		.uleb128 0x11
 10540 09a6 81020000 		.4byte	.LASF144
 10541 09aa 07       		.byte	0x7
 10542 09ab CF01     		.2byte	0x1cf
 10543 09ad 650A0000 		.4byte	0xa65
 10544 09b1 60       		.byte	0x60
 10545 09b2 12       		.uleb128 0x12
 10546 09b3 64657600 		.ascii	"dev\000"
 10547 09b7 07       		.byte	0x7
 10548 09b8 D001     		.2byte	0x1d0
 10549 09ba 9F030000 		.4byte	0x39f
 10550 09be A0       		.byte	0xa0
 10551 09bf 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 236


 10552 09c0 670E0000 		.4byte	.LASF145
 10553 09c4 07       		.byte	0x7
 10554 09c5 D101     		.2byte	0x1d1
 10555 09c7 750A0000 		.4byte	0xa75
 10556 09cb B0       		.byte	0xb0
 10557 09cc 14       		.uleb128 0x14
 10558 09cd 656E6300 		.ascii	"enc\000"
 10559 09d1 07       		.byte	0x7
 10560 09d2 D201     		.2byte	0x1d2
 10561 09d4 850A0000 		.4byte	0xa85
 10562 09d8 9001     		.2byte	0x190
 10563 09da 14       		.uleb128 0x14
 10564 09db 656D6700 		.ascii	"emg\000"
 10565 09df 07       		.byte	0x7
 10566 09e0 D301     		.2byte	0x1d3
 10567 09e2 8B060000 		.4byte	0x68b
 10568 09e6 F001     		.2byte	0x1f0
 10569 09e8 14       		.uleb128 0x14
 10570 09e9 696D7500 		.ascii	"imu\000"
 10571 09ed 07       		.byte	0x7
 10572 09ee D401     		.2byte	0x1d4
 10573 09f0 FA060000 		.4byte	0x6fa
 10574 09f4 0002     		.2byte	0x200
 10575 09f6 14       		.uleb128 0x14
 10576 09f7 65787000 		.ascii	"exp\000"
 10577 09fb 07       		.byte	0x7
 10578 09fc D501     		.2byte	0x1d5
 10579 09fe 52070000 		.4byte	0x752
 10580 0a02 2002     		.2byte	0x220
 10581 0a04 15       		.uleb128 0x15
 10582 0a05 69000000 		.4byte	.LASF146
 10583 0a09 07       		.byte	0x7
 10584 0a0a D601     		.2byte	0x1d6
 10585 0a0c 950A0000 		.4byte	0xa95
 10586 0a10 4002     		.2byte	0x240
 10587 0a12 14       		.uleb128 0x14
 10588 0a13 534800   		.ascii	"SH\000"
 10589 0a16 07       		.byte	0x7
 10590 0a17 D801     		.2byte	0x1d8
 10591 0a19 F6070000 		.4byte	0x7f6
 10592 0a1d A002     		.2byte	0x2a0
 10593 0a1f 15       		.uleb128 0x15
 10594 0a20 A2000000 		.4byte	.LASF147
 10595 0a24 07       		.byte	0x7
 10596 0a25 D901     		.2byte	0x1d9
 10597 0a27 45080000 		.4byte	0x845
 10598 0a2b B002     		.2byte	0x2b0
 10599 0a2d 14       		.uleb128 0x14
 10600 0a2e 4D5300   		.ascii	"MS\000"
 10601 0a31 07       		.byte	0x7
 10602 0a32 DA01     		.2byte	0x1da
 10603 0a34 87080000 		.4byte	0x887
 10604 0a38 C002     		.2byte	0x2c0
 10605 0a3a 14       		.uleb128 0x14
 10606 0a3b 464200   		.ascii	"FB\000"
 10607 0a3e 07       		.byte	0x7
 10608 0a3f DB01     		.2byte	0x1db
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 237


 10609 0a41 CC080000 		.4byte	0x8cc
 10610 0a45 D002     		.2byte	0x2d0
 10611 0a47 14       		.uleb128 0x14
 10612 0a48 575200   		.ascii	"WR\000"
 10613 0a4b 07       		.byte	0x7
 10614 0a4c DC01     		.2byte	0x1dc
 10615 0a4e 1E090000 		.4byte	0x91e
 10616 0a52 E002     		.2byte	0x2e0
 10617 0a54 00       		.byte	0
 10618 0a55 07       		.uleb128 0x7
 10619 0a56 81000000 		.4byte	0x81
 10620 0a5a 650A0000 		.4byte	0xa65
 10621 0a5e 08       		.uleb128 0x8
 10622 0a5f 0E010000 		.4byte	0x10e
 10623 0a63 0E       		.byte	0xe
 10624 0a64 00       		.byte	0
 10625 0a65 07       		.uleb128 0x7
 10626 0a66 81000000 		.4byte	0x81
 10627 0a6a 750A0000 		.4byte	0xa75
 10628 0a6e 08       		.uleb128 0x8
 10629 0a6f 0E010000 		.4byte	0x10e
 10630 0a73 3F       		.byte	0x3f
 10631 0a74 00       		.byte	0
 10632 0a75 07       		.uleb128 0x7
 10633 0a76 3E040000 		.4byte	0x43e
 10634 0a7a 850A0000 		.4byte	0xa85
 10635 0a7e 08       		.uleb128 0x8
 10636 0a7f 0E010000 		.4byte	0x10e
 10637 0a83 01       		.byte	0x1
 10638 0a84 00       		.byte	0
 10639 0a85 07       		.uleb128 0x7
 10640 0a86 D8050000 		.4byte	0x5d8
 10641 0a8a 950A0000 		.4byte	0xa95
 10642 0a8e 08       		.uleb128 0x8
 10643 0a8f 0E010000 		.4byte	0x10e
 10644 0a93 01       		.byte	0x1
 10645 0a94 00       		.byte	0
 10646 0a95 07       		.uleb128 0x7
 10647 0a96 C1070000 		.4byte	0x7c1
 10648 0a9a A50A0000 		.4byte	0xaa5
 10649 0a9e 08       		.uleb128 0x8
 10650 0a9f 0E010000 		.4byte	0x10e
 10651 0aa3 02       		.byte	0x2
 10652 0aa4 00       		.byte	0
 10653 0aa5 10       		.uleb128 0x10
 10654 0aa6 160C0000 		.4byte	.LASF148
 10655 0aaa 28       		.byte	0x28
 10656 0aab 07       		.byte	0x7
 10657 0aac E701     		.2byte	0x1e7
 10658 0aae 010B0000 		.4byte	0xb01
 10659 0ab2 11       		.uleb128 0x11
 10660 0ab3 8C040000 		.4byte	.LASF149
 10661 0ab7 07       		.byte	0x7
 10662 0ab8 E801     		.2byte	0x1e8
 10663 0aba 81000000 		.4byte	0x81
 10664 0abe 00       		.byte	0
 10665 0abf 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 238


 10666 0ac0 F3020000 		.4byte	.LASF150
 10667 0ac4 07       		.byte	0x7
 10668 0ac5 E901     		.2byte	0x1e9
 10669 0ac7 010B0000 		.4byte	0xb01
 10670 0acb 02       		.byte	0x2
 10671 0acc 11       		.uleb128 0x11
 10672 0acd 180B0000 		.4byte	.LASF151
 10673 0ad1 07       		.byte	0x7
 10674 0ad2 EA01     		.2byte	0x1ea
 10675 0ad4 010B0000 		.4byte	0xb01
 10676 0ad8 08       		.byte	0x8
 10677 0ad9 11       		.uleb128 0x11
 10678 0ada 220C0000 		.4byte	.LASF152
 10679 0ade 07       		.byte	0x7
 10680 0adf EB01     		.2byte	0x1eb
 10681 0ae1 010B0000 		.4byte	0xb01
 10682 0ae5 0E       		.byte	0xe
 10683 0ae6 11       		.uleb128 0x11
 10684 0ae7 C8070000 		.4byte	.LASF153
 10685 0aeb 07       		.byte	0x7
 10686 0aec EC01     		.2byte	0x1ec
 10687 0aee 110B0000 		.4byte	0xb11
 10688 0af2 14       		.byte	0x14
 10689 0af3 11       		.uleb128 0x11
 10690 0af4 AE010000 		.4byte	.LASF154
 10691 0af8 07       		.byte	0x7
 10692 0af9 ED01     		.2byte	0x1ed
 10693 0afb B1000000 		.4byte	0xb1
 10694 0aff 24       		.byte	0x24
 10695 0b00 00       		.byte	0
 10696 0b01 07       		.uleb128 0x7
 10697 0b02 B1000000 		.4byte	0xb1
 10698 0b06 110B0000 		.4byte	0xb11
 10699 0b0a 08       		.uleb128 0x8
 10700 0b0b 0E010000 		.4byte	0x10e
 10701 0b0f 02       		.byte	0x2
 10702 0b10 00       		.byte	0
 10703 0b11 07       		.uleb128 0x7
 10704 0b12 D5000000 		.4byte	0xd5
 10705 0b16 210B0000 		.4byte	0xb21
 10706 0b1a 08       		.uleb128 0x8
 10707 0b1b 0E010000 		.4byte	0x10e
 10708 0b1f 03       		.byte	0x3
 10709 0b20 00       		.byte	0
 10710 0b21 10       		.uleb128 0x10
 10711 0b22 4F110000 		.4byte	.LASF155
 10712 0b26 08       		.byte	0x8
 10713 0b27 07       		.byte	0x7
 10714 0b28 F401     		.2byte	0x1f4
 10715 0b2a 490B0000 		.4byte	0xb49
 10716 0b2e 11       		.uleb128 0x11
 10717 0b2f 44050000 		.4byte	.LASF156
 10718 0b33 07       		.byte	0x7
 10719 0b34 F501     		.2byte	0x1f5
 10720 0b36 BD000000 		.4byte	0xbd
 10721 0b3a 00       		.byte	0
 10722 0b3b 11       		.uleb128 0x11
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 239


 10723 0b3c F4010000 		.4byte	.LASF157
 10724 0b40 07       		.byte	0x7
 10725 0b41 F601     		.2byte	0x1f6
 10726 0b43 BD000000 		.4byte	0xbd
 10727 0b47 04       		.byte	0x4
 10728 0b48 00       		.byte	0
 10729 0b49 10       		.uleb128 0x10
 10730 0b4a AD030000 		.4byte	.LASF158
 10731 0b4e 06       		.byte	0x6
 10732 0b4f 07       		.byte	0x7
 10733 0b50 FD01     		.2byte	0x1fd
 10734 0b52 8B0B0000 		.4byte	0xb8b
 10735 0b56 11       		.uleb128 0x11
 10736 0b57 18070000 		.4byte	.LASF159
 10737 0b5b 07       		.byte	0x7
 10738 0b5c FE01     		.2byte	0x1fe
 10739 0b5e 81000000 		.4byte	0x81
 10740 0b62 00       		.byte	0
 10741 0b63 11       		.uleb128 0x11
 10742 0b64 6B110000 		.4byte	.LASF160
 10743 0b68 07       		.byte	0x7
 10744 0b69 FF01     		.2byte	0x1ff
 10745 0b6b 81000000 		.4byte	0x81
 10746 0b6f 01       		.byte	0x1
 10747 0b70 11       		.uleb128 0x11
 10748 0b71 D1050000 		.4byte	.LASF161
 10749 0b75 07       		.byte	0x7
 10750 0b76 0002     		.2byte	0x200
 10751 0b78 B1000000 		.4byte	0xb1
 10752 0b7c 02       		.byte	0x2
 10753 0b7d 11       		.uleb128 0x11
 10754 0b7e 64090000 		.4byte	.LASF162
 10755 0b82 07       		.byte	0x7
 10756 0b83 0102     		.2byte	0x201
 10757 0b85 B1000000 		.4byte	0xb1
 10758 0b89 04       		.byte	0x4
 10759 0b8a 00       		.byte	0
 10760 0b8b 16       		.uleb128 0x16
 10761 0b8c 01       		.byte	0x1
 10762 0b8d 2C000000 		.4byte	0x2c
 10763 0b91 07       		.byte	0x7
 10764 0b92 0502     		.2byte	0x205
 10765 0b94 BD0B0000 		.4byte	0xbbd
 10766 0b98 0A       		.uleb128 0xa
 10767 0b99 61050000 		.4byte	.LASF163
 10768 0b9d 00       		.byte	0
 10769 0b9e 0A       		.uleb128 0xa
 10770 0b9f EE0C0000 		.4byte	.LASF164
 10771 0ba3 01       		.byte	0x1
 10772 0ba4 0A       		.uleb128 0xa
 10773 0ba5 B10A0000 		.4byte	.LASF165
 10774 0ba9 02       		.byte	0x2
 10775 0baa 0A       		.uleb128 0xa
 10776 0bab 3D020000 		.4byte	.LASF166
 10777 0baf 03       		.byte	0x3
 10778 0bb0 0A       		.uleb128 0xa
 10779 0bb1 9A090000 		.4byte	.LASF167
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 240


 10780 0bb5 04       		.byte	0x4
 10781 0bb6 0A       		.uleb128 0xa
 10782 0bb7 8C0C0000 		.4byte	.LASF168
 10783 0bbb 05       		.byte	0x5
 10784 0bbc 00       		.byte	0
 10785 0bbd 05       		.uleb128 0x5
 10786 0bbe F6040000 		.4byte	.LASF169
 10787 0bc2 07       		.byte	0x7
 10788 0bc3 0D02     		.2byte	0x20d
 10789 0bc5 8B0B0000 		.4byte	0xb8b
 10790 0bc9 16       		.uleb128 0x16
 10791 0bca 01       		.byte	0x1
 10792 0bcb 2C000000 		.4byte	0x2c
 10793 0bcf 07       		.byte	0x7
 10794 0bd0 0F02     		.2byte	0x20f
 10795 0bd2 F50B0000 		.4byte	0xbf5
 10796 0bd6 0A       		.uleb128 0xa
 10797 0bd7 A1010000 		.4byte	.LASF170
 10798 0bdb 00       		.byte	0
 10799 0bdc 0A       		.uleb128 0xa
 10800 0bdd 40070000 		.4byte	.LASF171
 10801 0be1 01       		.byte	0x1
 10802 0be2 0A       		.uleb128 0xa
 10803 0be3 E1070000 		.4byte	.LASF172
 10804 0be7 02       		.byte	0x2
 10805 0be8 0A       		.uleb128 0xa
 10806 0be9 5A030000 		.4byte	.LASF173
 10807 0bed 03       		.byte	0x3
 10808 0bee 0A       		.uleb128 0xa
 10809 0bef 28110000 		.4byte	.LASF174
 10810 0bf3 04       		.byte	0x4
 10811 0bf4 00       		.byte	0
 10812 0bf5 05       		.uleb128 0x5
 10813 0bf6 D80D0000 		.4byte	.LASF175
 10814 0bfa 07       		.byte	0x7
 10815 0bfb 1602     		.2byte	0x216
 10816 0bfd C90B0000 		.4byte	0xbc9
 10817 0c01 17       		.uleb128 0x17
 10818 0c02 1F050000 		.4byte	.LASF176
 10819 0c06 01       		.byte	0x1
 10820 0c07 62       		.byte	0x62
 10821 0c08 00000000 		.4byte	.LFB64
 10822 0c0c 18000000 		.4byte	.LFE64-.LFB64
 10823 0c10 01       		.uleb128 0x1
 10824 0c11 9C       		.byte	0x9c
 10825 0c12 17       		.uleb128 0x17
 10826 0c13 AF0F0000 		.4byte	.LASF177
 10827 0c17 01       		.byte	0x1
 10828 0c18 6D       		.byte	0x6d
 10829 0c19 00000000 		.4byte	.LFB65
 10830 0c1d 20000000 		.4byte	.LFE65-.LFB65
 10831 0c21 01       		.uleb128 0x1
 10832 0c22 9C       		.byte	0x9c
 10833 0c23 18       		.uleb128 0x18
 10834 0c24 40090000 		.4byte	.LASF206
 10835 0c28 01       		.byte	0x1
 10836 0c29 86       		.byte	0x86
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 241


 10837 0c2a 00000000 		.4byte	.LFB66
 10838 0c2e 0C020000 		.4byte	.LFE66-.LFB66
 10839 0c32 01       		.uleb128 0x1
 10840 0c33 9C       		.byte	0x9c
 10841 0c34 B80C0000 		.4byte	0xcb8
 10842 0c38 19       		.uleb128 0x19
 10843 0c39 CF000000 		.4byte	.LASF178
 10844 0c3d 01       		.byte	0x1
 10845 0c3e 8B       		.byte	0x8b
 10846 0c3f 81000000 		.4byte	0x81
 10847 0c43 05       		.uleb128 0x5
 10848 0c44 03       		.byte	0x3
 10849 0c45 00000000 		.4byte	state.10411
 10850 0c49 19       		.uleb128 0x19
 10851 0c4a F6050000 		.4byte	.LASF179
 10852 0c4e 01       		.byte	0x1
 10853 0c4f 8E       		.byte	0x8e
 10854 0c50 81000000 		.4byte	0x81
 10855 0c54 05       		.uleb128 0x5
 10856 0c55 03       		.byte	0x3
 10857 0c56 08000000 		.4byte	data_packet_index.10412
 10858 0c5a 19       		.uleb128 0x19
 10859 0c5b 550C0000 		.4byte	.LASF180
 10860 0c5f 01       		.byte	0x1
 10861 0c60 8F       		.byte	0x8f
 10862 0c61 81000000 		.4byte	0x81
 10863 0c65 05       		.uleb128 0x5
 10864 0c66 03       		.byte	0x3
 10865 0c67 07000000 		.4byte	data_packet_length.10413
 10866 0c6b 19       		.uleb128 0x19
 10867 0c6c 08060000 		.4byte	.LASF181
 10868 0c70 01       		.byte	0x1
 10869 0c71 90       		.byte	0x90
 10870 0c72 F6020000 		.4byte	0x2f6
 10871 0c76 05       		.uleb128 0x5
 10872 0c77 03       		.byte	0x3
 10873 0c78 0C000000 		.4byte	data_packet_buffer.10414
 10874 0c7c 19       		.uleb128 0x19
 10875 0c7d 360A0000 		.4byte	.LASF182
 10876 0c81 01       		.byte	0x1
 10877 0c82 91       		.byte	0x91
 10878 0c83 2E040000 		.4byte	0x42e
 10879 0c87 05       		.uleb128 0x5
 10880 0c88 03       		.byte	0x3
 10881 0c89 04000000 		.4byte	rx_queue.10415
 10882 0c8d 19       		.uleb128 0x19
 10883 0c8e 66010000 		.4byte	.LASF183
 10884 0c92 01       		.byte	0x1
 10885 0c93 94       		.byte	0x94
 10886 0c94 81000000 		.4byte	0x81
 10887 0c98 02       		.uleb128 0x2
 10888 0c99 91       		.byte	0x91
 10889 0c9a 75       		.sleb128 -11
 10890 0c9b 19       		.uleb128 0x19
 10891 0c9c BB050000 		.4byte	.LASF184
 10892 0ca0 01       		.byte	0x1
 10893 0ca1 95       		.byte	0x95
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 242


 10894 0ca2 81000000 		.4byte	0x81
 10895 0ca6 02       		.uleb128 0x2
 10896 0ca7 91       		.byte	0x91
 10897 0ca8 77       		.sleb128 -9
 10898 0ca9 19       		.uleb128 0x19
 10899 0caa F5060000 		.4byte	.LASF185
 10900 0cae 01       		.byte	0x1
 10901 0caf 96       		.byte	0x96
 10902 0cb0 81000000 		.4byte	0x81
 10903 0cb4 02       		.uleb128 0x2
 10904 0cb5 91       		.byte	0x91
 10905 0cb6 76       		.sleb128 -10
 10906 0cb7 00       		.byte	0
 10907 0cb8 1A       		.uleb128 0x1a
 10908 0cb9 870E0000 		.4byte	.LASF191
 10909 0cbd 01       		.byte	0x1
 10910 0cbe 0C01     		.2byte	0x10c
 10911 0cc0 00000000 		.4byte	.LFB67
 10912 0cc4 2C060000 		.4byte	.LFE67-.LFB67
 10913 0cc8 01       		.uleb128 0x1
 10914 0cc9 9C       		.byte	0x9c
 10915 0cca 380D0000 		.4byte	0xd38
 10916 0cce 1B       		.uleb128 0x1b
 10917 0ccf 32060000 		.4byte	.LASF186
 10918 0cd3 01       		.byte	0x1
 10919 0cd4 0E01     		.2byte	0x10e
 10920 0cd6 8D000000 		.4byte	0x8d
 10921 0cda 05       		.uleb128 0x5
 10922 0cdb 03       		.byte	0x3
 10923 0cdc 00000000 		.4byte	counter_calibration.10431
 10924 0ce0 1B       		.uleb128 0x1b
 10925 0ce1 6C0B0000 		.4byte	.LASF187
 10926 0ce5 01       		.byte	0x1
 10927 0ce6 0F01     		.2byte	0x10f
 10928 0ce8 8D000000 		.4byte	0x8d
 10929 0cec 05       		.uleb128 0x5
 10930 0ced 03       		.byte	0x3
 10931 0cee 02000000 		.4byte	counter_tension_func.10432
 10932 0cf2 1B       		.uleb128 0x1b
 10933 0cf3 7D010000 		.4byte	.LASF188
 10934 0cf7 01       		.byte	0x1
 10935 0cf8 1001     		.2byte	0x110
 10936 0cfa 380D0000 		.4byte	0xd38
 10937 0cfe 03       		.uleb128 0x3
 10938 0cff 91       		.byte	0x91
 10939 0d00 A86C     		.sleb128 -2520
 10940 0d02 1B       		.uleb128 0x1b
 10941 0d03 4F0B0000 		.4byte	.LASF189
 10942 0d07 01       		.byte	0x1
 10943 0d08 1201     		.2byte	0x112
 10944 0d0a 81000000 		.4byte	0x81
 10945 0d0e 02       		.uleb128 0x2
 10946 0d0f 91       		.byte	0x91
 10947 0d10 6E       		.sleb128 -18
 10948 0d11 1B       		.uleb128 0x1b
 10949 0d12 FD080000 		.4byte	.LASF190
 10950 0d16 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 243


 10951 0d17 1301     		.2byte	0x113
 10952 0d19 81000000 		.4byte	0x81
 10953 0d1d 02       		.uleb128 0x2
 10954 0d1e 91       		.byte	0x91
 10955 0d1f 6D       		.sleb128 -19
 10956 0d20 1C       		.uleb128 0x1c
 10957 0d21 38010000 		.4byte	.LBB2
 10958 0d25 B8000000 		.4byte	.LBE2-.LBB2
 10959 0d29 1D       		.uleb128 0x1d
 10960 0d2a 6900     		.ascii	"i\000"
 10961 0d2c 01       		.byte	0x1
 10962 0d2d 4D01     		.2byte	0x14d
 10963 0d2f 81000000 		.4byte	0x81
 10964 0d33 02       		.uleb128 0x2
 10965 0d34 91       		.byte	0x91
 10966 0d35 6F       		.sleb128 -17
 10967 0d36 00       		.byte	0
 10968 0d37 00       		.byte	0
 10969 0d38 07       		.uleb128 0x7
 10970 0d39 E3000000 		.4byte	0xe3
 10971 0d3d 490D0000 		.4byte	0xd49
 10972 0d41 1E       		.uleb128 0x1e
 10973 0d42 0E010000 		.4byte	0x10e
 10974 0d46 C309     		.2byte	0x9c3
 10975 0d48 00       		.byte	0
 10976 0d49 1A       		.uleb128 0x1a
 10977 0d4a 9A0E0000 		.4byte	.LASF192
 10978 0d4e 01       		.byte	0x1
 10979 0d4f 6502     		.2byte	0x265
 10980 0d51 00000000 		.4byte	.LFB68
 10981 0d55 C0050000 		.4byte	.LFE68-.LFB68
 10982 0d59 01       		.uleb128 0x1
 10983 0d5a 9C       		.byte	0x9c
 10984 0d5b FF0D0000 		.4byte	0xdff
 10985 0d5f 1F       		.uleb128 0x1f
 10986 0d60 8F020000 		.4byte	.LASF193
 10987 0d64 01       		.byte	0x1
 10988 0d65 6502     		.2byte	0x265
 10989 0d67 81000000 		.4byte	0x81
 10990 0d6b 02       		.uleb128 0x2
 10991 0d6c 91       		.byte	0x91
 10992 0d6d 5F       		.sleb128 -33
 10993 0d6e 1F       		.uleb128 0x1f
 10994 0d6f 1B060000 		.4byte	.LASF194
 10995 0d73 01       		.byte	0x1
 10996 0d74 6502     		.2byte	0x265
 10997 0d76 FF0D0000 		.4byte	0xdff
 10998 0d7a 02       		.uleb128 0x2
 10999 0d7b 91       		.byte	0x91
 11000 0d7c 58       		.sleb128 -40
 11001 0d7d 1F       		.uleb128 0x1f
 11002 0d7e 61100000 		.4byte	.LASF195
 11003 0d82 01       		.byte	0x1
 11004 0d83 6502     		.2byte	0x265
 11005 0d85 FF0D0000 		.4byte	0xdff
 11006 0d89 02       		.uleb128 0x2
 11007 0d8a 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 244


 11008 0d8b 54       		.sleb128 -44
 11009 0d8c 1B       		.uleb128 0x1b
 11010 0d8d 92040000 		.4byte	.LASF196
 11011 0d91 01       		.byte	0x1
 11012 0d92 6702     		.2byte	0x267
 11013 0d94 BD000000 		.4byte	0xbd
 11014 0d98 02       		.uleb128 0x2
 11015 0d99 91       		.byte	0x91
 11016 0d9a 74       		.sleb128 -12
 11017 0d9b 1B       		.uleb128 0x1b
 11018 0d9c B6030000 		.4byte	.LASF197
 11019 0da0 01       		.byte	0x1
 11020 0da1 6802     		.2byte	0x268
 11021 0da3 BD000000 		.4byte	0xbd
 11022 0da7 02       		.uleb128 0x2
 11023 0da8 91       		.byte	0x91
 11024 0da9 68       		.sleb128 -24
 11025 0daa 1B       		.uleb128 0x1b
 11026 0dab C0030000 		.4byte	.LASF198
 11027 0daf 01       		.byte	0x1
 11028 0db0 6802     		.2byte	0x268
 11029 0db2 BD000000 		.4byte	0xbd
 11030 0db6 02       		.uleb128 0x2
 11031 0db7 91       		.byte	0x91
 11032 0db8 64       		.sleb128 -28
 11033 0db9 1D       		.uleb128 0x1d
 11034 0dba 4D4F5400 		.ascii	"MOT\000"
 11035 0dbe 01       		.byte	0x1
 11036 0dbf 6902     		.2byte	0x269
 11037 0dc1 050E0000 		.4byte	0xe05
 11038 0dc5 02       		.uleb128 0x2
 11039 0dc6 91       		.byte	0x91
 11040 0dc7 70       		.sleb128 -16
 11041 0dc8 1B       		.uleb128 0x1b
 11042 0dc9 2C100000 		.4byte	.LASF199
 11043 0dcd 01       		.byte	0x1
 11044 0dce 6A02     		.2byte	0x26a
 11045 0dd0 81000000 		.4byte	0x81
 11046 0dd4 02       		.uleb128 0x2
 11047 0dd5 91       		.byte	0x91
 11048 0dd6 6F       		.sleb128 -17
 11049 0dd7 1B       		.uleb128 0x1b
 11050 0dd8 2A0A0000 		.4byte	.LASF200
 11051 0ddc 01       		.byte	0x1
 11052 0ddd 6C02     		.2byte	0x26c
 11053 0ddf EA060000 		.4byte	0x6ea
 11054 0de3 05       		.uleb128 0x5
 11055 0de4 03       		.byte	0x3
 11056 0de5 8C000000 		.4byte	current_emg.10456
 11057 0de9 20       		.uleb128 0x20
 11058 0dea 00000000 		.4byte	.Ldebug_ranges0+0
 11059 0dee 1B       		.uleb128 0x1b
 11060 0def C5000000 		.4byte	.LASF201
 11061 0df3 01       		.byte	0x1
 11062 0df4 9102     		.2byte	0x291
 11063 0df6 BD000000 		.4byte	0xbd
 11064 0dfa 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 245


 11065 0dfb 91       		.byte	0x91
 11066 0dfc 60       		.sleb128 -32
 11067 0dfd 00       		.byte	0
 11068 0dfe 00       		.byte	0
 11069 0dff 0C       		.uleb128 0xc
 11070 0e00 04       		.byte	0x4
 11071 0e01 A5010000 		.4byte	0x1a5
 11072 0e05 0C       		.uleb128 0xc
 11073 0e06 04       		.byte	0x4
 11074 0e07 3E040000 		.4byte	0x43e
 11075 0e0b 21       		.uleb128 0x21
 11076 0e0c 700F0000 		.4byte	.LASF202
 11077 0e10 01       		.byte	0x1
 11078 0e11 4303     		.2byte	0x343
 11079 0e13 00000000 		.4byte	.LFB69
 11080 0e17 34030000 		.4byte	.LFE69-.LFB69
 11081 0e1b 01       		.uleb128 0x1
 11082 0e1c 9C       		.byte	0x9c
 11083 0e1d 9B0E0000 		.4byte	0xe9b
 11084 0e21 1F       		.uleb128 0x1f
 11085 0e22 8F020000 		.4byte	.LASF193
 11086 0e26 01       		.byte	0x1
 11087 0e27 4303     		.2byte	0x343
 11088 0e29 81000000 		.4byte	0x81
 11089 0e2d 02       		.uleb128 0x2
 11090 0e2e 91       		.byte	0x91
 11091 0e2f 67       		.sleb128 -25
 11092 0e30 1F       		.uleb128 0x1f
 11093 0e31 1B060000 		.4byte	.LASF194
 11094 0e35 01       		.byte	0x1
 11095 0e36 4303     		.2byte	0x343
 11096 0e38 FF0D0000 		.4byte	0xdff
 11097 0e3c 02       		.uleb128 0x2
 11098 0e3d 91       		.byte	0x91
 11099 0e3e 60       		.sleb128 -32
 11100 0e3f 1F       		.uleb128 0x1f
 11101 0e40 61100000 		.4byte	.LASF195
 11102 0e44 01       		.byte	0x1
 11103 0e45 4303     		.2byte	0x343
 11104 0e47 FF0D0000 		.4byte	0xdff
 11105 0e4b 02       		.uleb128 0x2
 11106 0e4c 91       		.byte	0x91
 11107 0e4d 5C       		.sleb128 -36
 11108 0e4e 22       		.uleb128 0x22
 11109 0e4f 18000000 		.4byte	.Ldebug_ranges0+0x18
 11110 0e53 760E0000 		.4byte	0xe76
 11111 0e57 1B       		.uleb128 0x1b
 11112 0e58 C5000000 		.4byte	.LASF201
 11113 0e5c 01       		.byte	0x1
 11114 0e5d 4A03     		.2byte	0x34a
 11115 0e5f BD000000 		.4byte	0xbd
 11116 0e63 02       		.uleb128 0x2
 11117 0e64 91       		.byte	0x91
 11118 0e65 74       		.sleb128 -12
 11119 0e66 1B       		.uleb128 0x1b
 11120 0e67 CC010000 		.4byte	.LASF203
 11121 0e6b 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 246


 11122 0e6c 4B03     		.2byte	0x34b
 11123 0e6e BD000000 		.4byte	0xbd
 11124 0e72 02       		.uleb128 0x2
 11125 0e73 91       		.byte	0x91
 11126 0e74 70       		.sleb128 -16
 11127 0e75 00       		.byte	0
 11128 0e76 20       		.uleb128 0x20
 11129 0e77 30000000 		.4byte	.Ldebug_ranges0+0x30
 11130 0e7b 1B       		.uleb128 0x1b
 11131 0e7c BD0C0000 		.4byte	.LASF204
 11132 0e80 01       		.byte	0x1
 11133 0e81 7003     		.2byte	0x370
 11134 0e83 BD000000 		.4byte	0xbd
 11135 0e87 02       		.uleb128 0x2
 11136 0e88 91       		.byte	0x91
 11137 0e89 6C       		.sleb128 -20
 11138 0e8a 1B       		.uleb128 0x1b
 11139 0e8b 38090000 		.4byte	.LASF205
 11140 0e8f 01       		.byte	0x1
 11141 0e90 7103     		.2byte	0x371
 11142 0e92 BD000000 		.4byte	0xbd
 11143 0e96 02       		.uleb128 0x2
 11144 0e97 91       		.byte	0x91
 11145 0e98 68       		.sleb128 -24
 11146 0e99 00       		.byte	0
 11147 0e9a 00       		.byte	0
 11148 0e9b 23       		.uleb128 0x23
 11149 0e9c 68050000 		.4byte	.LASF207
 11150 0ea0 01       		.byte	0x1
 11151 0ea1 9B03     		.2byte	0x39b
 11152 0ea3 00000000 		.4byte	.LFB70
 11153 0ea7 08070000 		.4byte	.LFE70-.LFB70
 11154 0eab 01       		.uleb128 0x1
 11155 0eac 9C       		.byte	0x9c
 11156 0ead 52100000 		.4byte	0x1052
 11157 0eb1 1B       		.uleb128 0x1b
 11158 0eb2 20010000 		.4byte	.LASF208
 11159 0eb6 01       		.byte	0x1
 11160 0eb7 9D03     		.2byte	0x39d
 11161 0eb9 BD000000 		.4byte	0xbd
 11162 0ebd 02       		.uleb128 0x2
 11163 0ebe 91       		.byte	0x91
 11164 0ebf 74       		.sleb128 -12
 11165 0ec0 1B       		.uleb128 0x1b
 11166 0ec1 0E0B0000 		.4byte	.LASF209
 11167 0ec5 01       		.byte	0x1
 11168 0ec6 9E03     		.2byte	0x39e
 11169 0ec8 BD000000 		.4byte	0xbd
 11170 0ecc 03       		.uleb128 0x3
 11171 0ecd 91       		.byte	0x91
 11172 0ece B07F     		.sleb128 -80
 11173 0ed0 1B       		.uleb128 0x1b
 11174 0ed1 3D0F0000 		.4byte	.LASF210
 11175 0ed5 01       		.byte	0x1
 11176 0ed6 9F03     		.2byte	0x39f
 11177 0ed8 BD000000 		.4byte	0xbd
 11178 0edc 03       		.uleb128 0x3
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 247


 11179 0edd 91       		.byte	0x91
 11180 0ede AC7F     		.sleb128 -84
 11181 0ee0 1B       		.uleb128 0x1b
 11182 0ee1 610A0000 		.4byte	.LASF211
 11183 0ee5 01       		.byte	0x1
 11184 0ee6 A003     		.2byte	0x3a0
 11185 0ee8 BD000000 		.4byte	0xbd
 11186 0eec 02       		.uleb128 0x2
 11187 0eed 91       		.byte	0x91
 11188 0eee 70       		.sleb128 -16
 11189 0eef 1B       		.uleb128 0x1b
 11190 0ef0 4F0B0000 		.4byte	.LASF189
 11191 0ef4 01       		.byte	0x1
 11192 0ef5 A203     		.2byte	0x3a2
 11193 0ef7 81000000 		.4byte	0x81
 11194 0efb 02       		.uleb128 0x2
 11195 0efc 91       		.byte	0x91
 11196 0efd 6F       		.sleb128 -17
 11197 0efe 1B       		.uleb128 0x1b
 11198 0eff 25030000 		.4byte	.LASF212
 11199 0f03 01       		.byte	0x1
 11200 0f04 A403     		.2byte	0x3a4
 11201 0f06 050E0000 		.4byte	0xe05
 11202 0f0a 02       		.uleb128 0x2
 11203 0f0b 91       		.byte	0x91
 11204 0f0c 68       		.sleb128 -24
 11205 0f0d 1B       		.uleb128 0x1b
 11206 0f0e 99020000 		.4byte	.LASF213
 11207 0f12 01       		.byte	0x1
 11208 0f13 A503     		.2byte	0x3a5
 11209 0f15 81000000 		.4byte	0x81
 11210 0f19 02       		.uleb128 0x2
 11211 0f1a 91       		.byte	0x91
 11212 0f1b 67       		.sleb128 -25
 11213 0f1c 1D       		.uleb128 0x1d
 11214 0f1d 6B5F7000 		.ascii	"k_p\000"
 11215 0f21 01       		.byte	0x1
 11216 0f22 A703     		.2byte	0x3a7
 11217 0f24 BD000000 		.4byte	0xbd
 11218 0f28 02       		.uleb128 0x2
 11219 0f29 91       		.byte	0x91
 11220 0f2a 60       		.sleb128 -32
 11221 0f2b 1D       		.uleb128 0x1d
 11222 0f2c 6B5F6900 		.ascii	"k_i\000"
 11223 0f30 01       		.byte	0x1
 11224 0f31 A803     		.2byte	0x3a8
 11225 0f33 BD000000 		.4byte	0xbd
 11226 0f37 02       		.uleb128 0x2
 11227 0f38 91       		.byte	0x91
 11228 0f39 5C       		.sleb128 -36
 11229 0f3a 1D       		.uleb128 0x1d
 11230 0f3b 6B5F6400 		.ascii	"k_d\000"
 11231 0f3f 01       		.byte	0x1
 11232 0f40 A903     		.2byte	0x3a9
 11233 0f42 BD000000 		.4byte	0xbd
 11234 0f46 02       		.uleb128 0x2
 11235 0f47 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 248


 11236 0f48 58       		.sleb128 -40
 11237 0f49 1B       		.uleb128 0x1b
 11238 0f4a 680C0000 		.4byte	.LASF72
 11239 0f4e 01       		.byte	0x1
 11240 0f4f AB03     		.2byte	0x3ab
 11241 0f51 BD000000 		.4byte	0xbd
 11242 0f55 02       		.uleb128 0x2
 11243 0f56 91       		.byte	0x91
 11244 0f57 54       		.sleb128 -44
 11245 0f58 1B       		.uleb128 0x1b
 11246 0f59 08050000 		.4byte	.LASF73
 11247 0f5d 01       		.byte	0x1
 11248 0f5e AC03     		.2byte	0x3ac
 11249 0f60 BD000000 		.4byte	0xbd
 11250 0f64 02       		.uleb128 0x2
 11251 0f65 91       		.byte	0x91
 11252 0f66 50       		.sleb128 -48
 11253 0f67 1B       		.uleb128 0x1b
 11254 0f68 F0040000 		.4byte	.LASF74
 11255 0f6c 01       		.byte	0x1
 11256 0f6d AD03     		.2byte	0x3ad
 11257 0f6f BD000000 		.4byte	0xbd
 11258 0f73 02       		.uleb128 0x2
 11259 0f74 91       		.byte	0x91
 11260 0f75 4C       		.sleb128 -52
 11261 0f76 1B       		.uleb128 0x1b
 11262 0f77 160F0000 		.4byte	.LASF75
 11263 0f7b 01       		.byte	0x1
 11264 0f7c AF03     		.2byte	0x3af
 11265 0f7e BD000000 		.4byte	0xbd
 11266 0f82 02       		.uleb128 0x2
 11267 0f83 91       		.byte	0x91
 11268 0f84 48       		.sleb128 -56
 11269 0f85 1B       		.uleb128 0x1b
 11270 0f86 A4050000 		.4byte	.LASF76
 11271 0f8a 01       		.byte	0x1
 11272 0f8b B003     		.2byte	0x3b0
 11273 0f8d BD000000 		.4byte	0xbd
 11274 0f91 02       		.uleb128 0x2
 11275 0f92 91       		.byte	0x91
 11276 0f93 44       		.sleb128 -60
 11277 0f94 1B       		.uleb128 0x1b
 11278 0f95 490E0000 		.4byte	.LASF77
 11279 0f99 01       		.byte	0x1
 11280 0f9a B103     		.2byte	0x3b1
 11281 0f9c BD000000 		.4byte	0xbd
 11282 0fa0 02       		.uleb128 0x2
 11283 0fa1 91       		.byte	0x91
 11284 0fa2 40       		.sleb128 -64
 11285 0fa3 1B       		.uleb128 0x1b
 11286 0fa4 B2050000 		.4byte	.LASF78
 11287 0fa8 01       		.byte	0x1
 11288 0fa9 B303     		.2byte	0x3b3
 11289 0fab BD000000 		.4byte	0xbd
 11290 0faf 03       		.uleb128 0x3
 11291 0fb0 91       		.byte	0x91
 11292 0fb1 BC7F     		.sleb128 -68
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 249


 11293 0fb3 1B       		.uleb128 0x1b
 11294 0fb4 EC060000 		.4byte	.LASF79
 11295 0fb8 01       		.byte	0x1
 11296 0fb9 B403     		.2byte	0x3b4
 11297 0fbb BD000000 		.4byte	0xbd
 11298 0fbf 03       		.uleb128 0x3
 11299 0fc0 91       		.byte	0x91
 11300 0fc1 B87F     		.sleb128 -72
 11301 0fc3 1B       		.uleb128 0x1b
 11302 0fc4 62110000 		.4byte	.LASF80
 11303 0fc8 01       		.byte	0x1
 11304 0fc9 B503     		.2byte	0x3b5
 11305 0fcb BD000000 		.4byte	0xbd
 11306 0fcf 03       		.uleb128 0x3
 11307 0fd0 91       		.byte	0x91
 11308 0fd1 B47F     		.sleb128 -76
 11309 0fd3 1B       		.uleb128 0x1b
 11310 0fd4 7F050000 		.4byte	.LASF214
 11311 0fd8 01       		.byte	0x1
 11312 0fd9 B903     		.2byte	0x3b9
 11313 0fdb BD000000 		.4byte	0xbd
 11314 0fdf 05       		.uleb128 0x5
 11315 0fe0 03       		.byte	0x3
 11316 0fe1 90000000 		.4byte	pos_error_sum.10507
 11317 0fe5 1B       		.uleb128 0x1b
 11318 0fe6 FE030000 		.4byte	.LASF215
 11319 0fea 01       		.byte	0x1
 11320 0feb BA03     		.2byte	0x3ba
 11321 0fed BD000000 		.4byte	0xbd
 11322 0ff1 05       		.uleb128 0x5
 11323 0ff2 03       		.byte	0x3
 11324 0ff3 9C000000 		.4byte	curr_error_sum.10508
 11325 0ff7 1B       		.uleb128 0x1b
 11326 0ff8 B90A0000 		.4byte	.LASF216
 11327 0ffc 01       		.byte	0x1
 11328 0ffd BC03     		.2byte	0x3bc
 11329 0fff BD000000 		.4byte	0xbd
 11330 1003 05       		.uleb128 0x5
 11331 1004 03       		.byte	0x3
 11332 1005 94000000 		.4byte	prev_pos_err.10509
 11333 1009 1B       		.uleb128 0x1b
 11334 100a 470C0000 		.4byte	.LASF217
 11335 100e 01       		.byte	0x1
 11336 100f BD03     		.2byte	0x3bd
 11337 1011 BD000000 		.4byte	0xbd
 11338 1015 05       		.uleb128 0x5
 11339 1016 03       		.byte	0x3
 11340 1017 A0000000 		.4byte	prev_curr_err.10510
 11341 101b 1B       		.uleb128 0x1b
 11342 101c AC0E0000 		.4byte	.LASF218
 11343 1020 01       		.byte	0x1
 11344 1021 BE03     		.2byte	0x3be
 11345 1023 BD000000 		.4byte	0xbd
 11346 1027 05       		.uleb128 0x5
 11347 1028 03       		.byte	0x3
 11348 1029 A4000000 		.4byte	prev_pwm.10511
 11349 102d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 250


 11350 102e 0E050000 		.4byte	.LASF219
 11351 1032 01       		.byte	0x1
 11352 1033 C003     		.2byte	0x3c0
 11353 1035 81000000 		.4byte	0x81
 11354 1039 05       		.uleb128 0x5
 11355 103a 03       		.byte	0x3
 11356 103b 98000000 		.4byte	motor_dir.10512
 11357 103f 1B       		.uleb128 0x1b
 11358 1040 D7050000 		.4byte	.LASF220
 11359 1044 01       		.byte	0x1
 11360 1045 C103     		.2byte	0x3c1
 11361 1047 99000000 		.4byte	0x99
 11362 104b 05       		.uleb128 0x5
 11363 104c 03       		.byte	0x3
 11364 104d A8000000 		.4byte	position_counter.10513
 11365 1051 00       		.byte	0
 11366 1052 1A       		.uleb128 0x1a
 11367 1053 BA040000 		.4byte	.LASF221
 11368 1057 01       		.byte	0x1
 11369 1058 CB04     		.2byte	0x4cb
 11370 105a 00000000 		.4byte	.LFB71
 11371 105e 40080000 		.4byte	.LFE71-.LFB71
 11372 1062 01       		.uleb128 0x1
 11373 1063 9C       		.byte	0x9c
 11374 1064 0B120000 		.4byte	0x120b
 11375 1068 24       		.uleb128 0x24
 11376 1069 69647800 		.ascii	"idx\000"
 11377 106d 01       		.byte	0x1
 11378 106e CB04     		.2byte	0x4cb
 11379 1070 81000000 		.4byte	0x81
 11380 1074 03       		.uleb128 0x3
 11381 1075 91       		.byte	0x91
 11382 1076 A77F     		.sleb128 -89
 11383 1078 1B       		.uleb128 0x1b
 11384 1079 20010000 		.4byte	.LASF208
 11385 107d 01       		.byte	0x1
 11386 107e CD04     		.2byte	0x4cd
 11387 1080 BD000000 		.4byte	0xbd
 11388 1084 02       		.uleb128 0x2
 11389 1085 91       		.byte	0x91
 11390 1086 6C       		.sleb128 -20
 11391 1087 1B       		.uleb128 0x1b
 11392 1088 0E0B0000 		.4byte	.LASF209
 11393 108c 01       		.byte	0x1
 11394 108d CE04     		.2byte	0x4ce
 11395 108f BD000000 		.4byte	0xbd
 11396 1093 03       		.uleb128 0x3
 11397 1094 91       		.byte	0x91
 11398 1095 AC7F     		.sleb128 -84
 11399 1097 1B       		.uleb128 0x1b
 11400 1098 3D0F0000 		.4byte	.LASF210
 11401 109c 01       		.byte	0x1
 11402 109d CF04     		.2byte	0x4cf
 11403 109f BD000000 		.4byte	0xbd
 11404 10a3 03       		.uleb128 0x3
 11405 10a4 91       		.byte	0x91
 11406 10a5 A87F     		.sleb128 -88
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 251


 11407 10a7 1B       		.uleb128 0x1b
 11408 10a8 610A0000 		.4byte	.LASF211
 11409 10ac 01       		.byte	0x1
 11410 10ad D004     		.2byte	0x4d0
 11411 10af BD000000 		.4byte	0xbd
 11412 10b3 02       		.uleb128 0x2
 11413 10b4 91       		.byte	0x91
 11414 10b5 68       		.sleb128 -24
 11415 10b6 1D       		.uleb128 0x1d
 11416 10b7 4D4F5400 		.ascii	"MOT\000"
 11417 10bb 01       		.byte	0x1
 11418 10bc D204     		.2byte	0x4d2
 11419 10be 050E0000 		.4byte	0xe05
 11420 10c2 02       		.uleb128 0x2
 11421 10c3 91       		.byte	0x91
 11422 10c4 64       		.sleb128 -28
 11423 10c5 1B       		.uleb128 0x1b
 11424 10c6 2C100000 		.4byte	.LASF199
 11425 10ca 01       		.byte	0x1
 11426 10cb D304     		.2byte	0x4d3
 11427 10cd 81000000 		.4byte	0x81
 11428 10d1 02       		.uleb128 0x2
 11429 10d2 91       		.byte	0x91
 11430 10d3 63       		.sleb128 -29
 11431 10d4 1D       		.uleb128 0x1d
 11432 10d5 6B5F7000 		.ascii	"k_p\000"
 11433 10d9 01       		.byte	0x1
 11434 10da D504     		.2byte	0x4d5
 11435 10dc BD000000 		.4byte	0xbd
 11436 10e0 02       		.uleb128 0x2
 11437 10e1 91       		.byte	0x91
 11438 10e2 5C       		.sleb128 -36
 11439 10e3 1D       		.uleb128 0x1d
 11440 10e4 6B5F6900 		.ascii	"k_i\000"
 11441 10e8 01       		.byte	0x1
 11442 10e9 D604     		.2byte	0x4d6
 11443 10eb BD000000 		.4byte	0xbd
 11444 10ef 02       		.uleb128 0x2
 11445 10f0 91       		.byte	0x91
 11446 10f1 58       		.sleb128 -40
 11447 10f2 1D       		.uleb128 0x1d
 11448 10f3 6B5F6400 		.ascii	"k_d\000"
 11449 10f7 01       		.byte	0x1
 11450 10f8 D704     		.2byte	0x4d7
 11451 10fa BD000000 		.4byte	0xbd
 11452 10fe 02       		.uleb128 0x2
 11453 10ff 91       		.byte	0x91
 11454 1100 54       		.sleb128 -44
 11455 1101 1B       		.uleb128 0x1b
 11456 1102 680C0000 		.4byte	.LASF72
 11457 1106 01       		.byte	0x1
 11458 1107 D904     		.2byte	0x4d9
 11459 1109 BD000000 		.4byte	0xbd
 11460 110d 02       		.uleb128 0x2
 11461 110e 91       		.byte	0x91
 11462 110f 50       		.sleb128 -48
 11463 1110 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 252


 11464 1111 08050000 		.4byte	.LASF73
 11465 1115 01       		.byte	0x1
 11466 1116 DA04     		.2byte	0x4da
 11467 1118 BD000000 		.4byte	0xbd
 11468 111c 02       		.uleb128 0x2
 11469 111d 91       		.byte	0x91
 11470 111e 4C       		.sleb128 -52
 11471 111f 1B       		.uleb128 0x1b
 11472 1120 F0040000 		.4byte	.LASF74
 11473 1124 01       		.byte	0x1
 11474 1125 DB04     		.2byte	0x4db
 11475 1127 BD000000 		.4byte	0xbd
 11476 112b 02       		.uleb128 0x2
 11477 112c 91       		.byte	0x91
 11478 112d 48       		.sleb128 -56
 11479 112e 1B       		.uleb128 0x1b
 11480 112f 160F0000 		.4byte	.LASF75
 11481 1133 01       		.byte	0x1
 11482 1134 DD04     		.2byte	0x4dd
 11483 1136 BD000000 		.4byte	0xbd
 11484 113a 02       		.uleb128 0x2
 11485 113b 91       		.byte	0x91
 11486 113c 44       		.sleb128 -60
 11487 113d 1B       		.uleb128 0x1b
 11488 113e A4050000 		.4byte	.LASF76
 11489 1142 01       		.byte	0x1
 11490 1143 DE04     		.2byte	0x4de
 11491 1145 BD000000 		.4byte	0xbd
 11492 1149 02       		.uleb128 0x2
 11493 114a 91       		.byte	0x91
 11494 114b 40       		.sleb128 -64
 11495 114c 1B       		.uleb128 0x1b
 11496 114d 490E0000 		.4byte	.LASF77
 11497 1151 01       		.byte	0x1
 11498 1152 DF04     		.2byte	0x4df
 11499 1154 BD000000 		.4byte	0xbd
 11500 1158 03       		.uleb128 0x3
 11501 1159 91       		.byte	0x91
 11502 115a BC7F     		.sleb128 -68
 11503 115c 1B       		.uleb128 0x1b
 11504 115d B2050000 		.4byte	.LASF78
 11505 1161 01       		.byte	0x1
 11506 1162 E104     		.2byte	0x4e1
 11507 1164 BD000000 		.4byte	0xbd
 11508 1168 03       		.uleb128 0x3
 11509 1169 91       		.byte	0x91
 11510 116a B87F     		.sleb128 -72
 11511 116c 1B       		.uleb128 0x1b
 11512 116d EC060000 		.4byte	.LASF79
 11513 1171 01       		.byte	0x1
 11514 1172 E204     		.2byte	0x4e2
 11515 1174 BD000000 		.4byte	0xbd
 11516 1178 03       		.uleb128 0x3
 11517 1179 91       		.byte	0x91
 11518 117a B47F     		.sleb128 -76
 11519 117c 1B       		.uleb128 0x1b
 11520 117d 62110000 		.4byte	.LASF80
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 253


 11521 1181 01       		.byte	0x1
 11522 1182 E304     		.2byte	0x4e3
 11523 1184 BD000000 		.4byte	0xbd
 11524 1188 03       		.uleb128 0x3
 11525 1189 91       		.byte	0x91
 11526 118a B07F     		.sleb128 -80
 11527 118c 1B       		.uleb128 0x1b
 11528 118d 7F050000 		.4byte	.LASF214
 11529 1191 01       		.byte	0x1
 11530 1192 E704     		.2byte	0x4e7
 11531 1194 94020000 		.4byte	0x294
 11532 1198 05       		.uleb128 0x5
 11533 1199 03       		.byte	0x3
 11534 119a AC000000 		.4byte	pos_error_sum.10540
 11535 119e 1B       		.uleb128 0x1b
 11536 119f FE030000 		.4byte	.LASF215
 11537 11a3 01       		.byte	0x1
 11538 11a4 E804     		.2byte	0x4e8
 11539 11a6 94020000 		.4byte	0x294
 11540 11aa 05       		.uleb128 0x5
 11541 11ab 03       		.byte	0x3
 11542 11ac C0000000 		.4byte	curr_error_sum.10541
 11543 11b0 1B       		.uleb128 0x1b
 11544 11b1 B90A0000 		.4byte	.LASF216
 11545 11b5 01       		.byte	0x1
 11546 11b6 EA04     		.2byte	0x4ea
 11547 11b8 94020000 		.4byte	0x294
 11548 11bc 05       		.uleb128 0x5
 11549 11bd 03       		.byte	0x3
 11550 11be B4000000 		.4byte	prev_pos_err.10542
 11551 11c2 1B       		.uleb128 0x1b
 11552 11c3 470C0000 		.4byte	.LASF217
 11553 11c7 01       		.byte	0x1
 11554 11c8 EB04     		.2byte	0x4eb
 11555 11ca 94020000 		.4byte	0x294
 11556 11ce 05       		.uleb128 0x5
 11557 11cf 03       		.byte	0x3
 11558 11d0 C8000000 		.4byte	prev_curr_err.10543
 11559 11d4 1B       		.uleb128 0x1b
 11560 11d5 AC0E0000 		.4byte	.LASF218
 11561 11d9 01       		.byte	0x1
 11562 11da EC04     		.2byte	0x4ec
 11563 11dc 94020000 		.4byte	0x294
 11564 11e0 05       		.uleb128 0x5
 11565 11e1 03       		.byte	0x3
 11566 11e2 D0000000 		.4byte	prev_pwm.10544
 11567 11e6 1B       		.uleb128 0x1b
 11568 11e7 0E050000 		.4byte	.LASF219
 11569 11eb 01       		.byte	0x1
 11570 11ec EE04     		.2byte	0x4ee
 11571 11ee EA060000 		.4byte	0x6ea
 11572 11f2 05       		.uleb128 0x5
 11573 11f3 03       		.byte	0x3
 11574 11f4 BC000000 		.4byte	motor_dir.10545
 11575 11f8 1B       		.uleb128 0x1b
 11576 11f9 D7050000 		.4byte	.LASF220
 11577 11fd 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 254


 11578 11fe EF04     		.2byte	0x4ef
 11579 1200 6F030000 		.4byte	0x36f
 11580 1204 05       		.uleb128 0x5
 11581 1205 03       		.byte	0x3
 11582 1206 D8000000 		.4byte	position_counter.10546
 11583 120a 00       		.byte	0
 11584 120b 1A       		.uleb128 0x1a
 11585 120c 34030000 		.4byte	.LASF222
 11586 1210 01       		.byte	0x1
 11587 1211 1906     		.2byte	0x619
 11588 1213 00000000 		.4byte	.LFB72
 11589 1217 10080000 		.4byte	.LFE72-.LFB72
 11590 121b 01       		.uleb128 0x1
 11591 121c 9C       		.byte	0x9c
 11592 121d A5130000 		.4byte	0x13a5
 11593 1221 1F       		.uleb128 0x1f
 11594 1222 9B000000 		.4byte	.LASF223
 11595 1226 01       		.byte	0x1
 11596 1227 1906     		.2byte	0x619
 11597 1229 81000000 		.4byte	0x81
 11598 122d 03       		.uleb128 0x3
 11599 122e 91       		.byte	0x91
 11600 122f BF7F     		.sleb128 -65
 11601 1231 1F       		.uleb128 0x1f
 11602 1232 4D0A0000 		.4byte	.LASF224
 11603 1236 01       		.byte	0x1
 11604 1237 1906     		.2byte	0x619
 11605 1239 81000000 		.4byte	0x81
 11606 123d 03       		.uleb128 0x3
 11607 123e 91       		.byte	0x91
 11608 123f BE7F     		.sleb128 -66
 11609 1241 1B       		.uleb128 0x1b
 11610 1242 A7060000 		.4byte	.LASF225
 11611 1246 01       		.byte	0x1
 11612 1247 1B06     		.2byte	0x61b
 11613 1249 81000000 		.4byte	0x81
 11614 124d 02       		.uleb128 0x2
 11615 124e 91       		.byte	0x91
 11616 124f 67       		.sleb128 -25
 11617 1250 1D       		.uleb128 0x1d
 11618 1251 6A6A00   		.ascii	"jj\000"
 11619 1254 01       		.byte	0x1
 11620 1255 1E06     		.2byte	0x61e
 11621 1257 81000000 		.4byte	0x81
 11622 125b 02       		.uleb128 0x2
 11623 125c 91       		.byte	0x91
 11624 125d 66       		.sleb128 -26
 11625 125e 1B       		.uleb128 0x1b
 11626 125f 0D030000 		.4byte	.LASF226
 11627 1263 01       		.byte	0x1
 11628 1264 2006     		.2byte	0x620
 11629 1266 A5130000 		.4byte	0x13a5
 11630 126a 02       		.uleb128 0x2
 11631 126b 91       		.byte	0x91
 11632 126c 40       		.sleb128 -64
 11633 126d 1B       		.uleb128 0x1b
 11634 126e 9D0F0000 		.4byte	.LASF227
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 255


 11635 1272 01       		.byte	0x1
 11636 1273 2106     		.2byte	0x621
 11637 1275 B1000000 		.4byte	0xb1
 11638 1279 02       		.uleb128 0x2
 11639 127a 91       		.byte	0x91
 11640 127b 64       		.sleb128 -28
 11641 127c 1B       		.uleb128 0x1b
 11642 127d 320C0000 		.4byte	.LASF228
 11643 1281 01       		.byte	0x1
 11644 1282 2206     		.2byte	0x622
 11645 1284 BD000000 		.4byte	0xbd
 11646 1288 02       		.uleb128 0x2
 11647 1289 91       		.byte	0x91
 11648 128a 54       		.sleb128 -44
 11649 128b 1B       		.uleb128 0x1b
 11650 128c 500E0000 		.4byte	.LASF229
 11651 1290 01       		.byte	0x1
 11652 1291 2306     		.2byte	0x623
 11653 1293 BD000000 		.4byte	0xbd
 11654 1297 02       		.uleb128 0x2
 11655 1298 91       		.byte	0x91
 11656 1299 60       		.sleb128 -32
 11657 129a 1B       		.uleb128 0x1b
 11658 129b 47040000 		.4byte	.LASF230
 11659 129f 01       		.byte	0x1
 11660 12a0 2406     		.2byte	0x624
 11661 12a2 BD000000 		.4byte	0xbd
 11662 12a6 02       		.uleb128 0x2
 11663 12a7 91       		.byte	0x91
 11664 12a8 4C       		.sleb128 -52
 11665 12a9 1B       		.uleb128 0x1b
 11666 12aa 2B0E0000 		.4byte	.LASF231
 11667 12ae 01       		.byte	0x1
 11668 12af 2506     		.2byte	0x625
 11669 12b1 BD000000 		.4byte	0xbd
 11670 12b5 02       		.uleb128 0x2
 11671 12b6 91       		.byte	0x91
 11672 12b7 50       		.sleb128 -48
 11673 12b8 1B       		.uleb128 0x1b
 11674 12b9 C60A0000 		.4byte	.LASF232
 11675 12bd 01       		.byte	0x1
 11676 12be 2606     		.2byte	0x626
 11677 12c0 A5000000 		.4byte	0xa5
 11678 12c4 02       		.uleb128 0x2
 11679 12c5 91       		.byte	0x91
 11680 12c6 5F       		.sleb128 -33
 11681 12c7 1B       		.uleb128 0x1b
 11682 12c8 590B0000 		.4byte	.LASF233
 11683 12cc 01       		.byte	0x1
 11684 12cd 2806     		.2byte	0x628
 11685 12cf B5130000 		.4byte	0x13b5
 11686 12d3 05       		.uleb128 0x5
 11687 12d4 03       		.byte	0x3
 11688 12d5 E0000000 		.4byte	last_value_encoder.10569
 11689 12d9 1B       		.uleb128 0x1b
 11690 12da 69060000 		.4byte	.LASF234
 11691 12de 01       		.byte	0x1
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 256


 11692 12df 2906     		.2byte	0x629
 11693 12e1 B5130000 		.4byte	0x13b5
 11694 12e5 05       		.uleb128 0x5
 11695 12e6 03       		.byte	0x3
 11696 12e7 F8000000 		.4byte	comp_value_encoder.10570
 11697 12eb 1B       		.uleb128 0x1b
 11698 12ec 48030000 		.4byte	.LASF235
 11699 12f0 01       		.byte	0x1
 11700 12f1 2A06     		.2byte	0x62a
 11701 12f3 CB130000 		.4byte	0x13cb
 11702 12f7 05       		.uleb128 0x5
 11703 12f8 03       		.byte	0x3
 11704 12f9 10010000 		.4byte	error.10571
 11705 12fd 1B       		.uleb128 0x1b
 11706 12fe 090E0000 		.4byte	.LASF236
 11707 1302 01       		.byte	0x1
 11708 1303 2C06     		.2byte	0x62c
 11709 1305 EA060000 		.4byte	0x6ea
 11710 1309 05       		.uleb128 0x5
 11711 130a 03       		.byte	0x3
 11712 130b 04000000 		.4byte	only_first_time.10572
 11713 130f 1B       		.uleb128 0x1b
 11714 1310 C8020000 		.4byte	.LASF237
 11715 1314 01       		.byte	0x1
 11716 1315 2D06     		.2byte	0x62d
 11717 1317 EA060000 		.4byte	0x6ea
 11718 131b 05       		.uleb128 0x5
 11719 131c 03       		.byte	0x3
 11720 131d 68010000 		.4byte	safe_startup_motor_activation.10573
 11721 1321 1B       		.uleb128 0x1b
 11722 1322 7B000000 		.4byte	.LASF238
 11723 1326 01       		.byte	0x1
 11724 1327 2E06     		.2byte	0x62e
 11725 1329 EA060000 		.4byte	0x6ea
 11726 132d 05       		.uleb128 0x5
 11727 132e 03       		.byte	0x3
 11728 132f 64010000 		.4byte	one_time_execute.10574
 11729 1333 1B       		.uleb128 0x1b
 11730 1334 7D090000 		.4byte	.LASF239
 11731 1338 01       		.byte	0x1
 11732 1339 2F06     		.2byte	0x62f
 11733 133b 6F030000 		.4byte	0x36f
 11734 133f 05       		.uleb128 0x5
 11735 1340 03       		.byte	0x3
 11736 1341 6C010000 		.4byte	count_startup_motor.10575
 11737 1345 1B       		.uleb128 0x1b
 11738 1346 6F030000 		.4byte	.LASF240
 11739 134a 01       		.byte	0x1
 11740 134b 3006     		.2byte	0x630
 11741 134d EA060000 		.4byte	0x6ea
 11742 1351 05       		.uleb128 0x5
 11743 1352 03       		.byte	0x3
 11744 1353 60010000 		.4byte	pos_reconstruct.10576
 11745 1357 1B       		.uleb128 0x1b
 11746 1358 C6080000 		.4byte	.LASF241
 11747 135c 01       		.byte	0x1
 11748 135d 3206     		.2byte	0x632
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 257


 11749 135f B5130000 		.4byte	0x13b5
 11750 1363 05       		.uleb128 0x5
 11751 1364 03       		.byte	0x3
 11752 1365 18010000 		.4byte	v_value.10577
 11753 1369 1B       		.uleb128 0x1b
 11754 136a 59110000 		.4byte	.LASF242
 11755 136e 01       		.byte	0x1
 11756 136f 3306     		.2byte	0x633
 11757 1371 B5130000 		.4byte	0x13b5
 11758 1375 05       		.uleb128 0x5
 11759 1376 03       		.byte	0x3
 11760 1377 30010000 		.4byte	vv_value.10578
 11761 137b 1B       		.uleb128 0x1b
 11762 137c 6E010000 		.4byte	.LASF243
 11763 1380 01       		.byte	0x1
 11764 1381 3406     		.2byte	0x634
 11765 1383 B5130000 		.4byte	0x13b5
 11766 1387 05       		.uleb128 0x5
 11767 1388 03       		.byte	0x3
 11768 1389 48010000 		.4byte	vvv_value.10579
 11769 138d 1C       		.uleb128 0x1c
 11770 138e 94000000 		.4byte	.LBB9
 11771 1392 6A000000 		.4byte	.LBE9-.LBB9
 11772 1396 1D       		.uleb128 0x1d
 11773 1397 6A00     		.ascii	"j\000"
 11774 1399 01       		.byte	0x1
 11775 139a 4406     		.2byte	0x644
 11776 139c 68000000 		.4byte	0x68
 11777 13a0 02       		.uleb128 0x2
 11778 13a1 91       		.byte	0x91
 11779 13a2 58       		.sleb128 -40
 11780 13a3 00       		.byte	0
 11781 13a4 00       		.byte	0
 11782 13a5 07       		.uleb128 0x7
 11783 13a6 99000000 		.4byte	0x99
 11784 13aa B5130000 		.4byte	0x13b5
 11785 13ae 08       		.uleb128 0x8
 11786 13af 0E010000 		.4byte	0x10e
 11787 13b3 02       		.byte	0x2
 11788 13b4 00       		.byte	0
 11789 13b5 07       		.uleb128 0x7
 11790 13b6 BD000000 		.4byte	0xbd
 11791 13ba CB130000 		.4byte	0x13cb
 11792 13be 08       		.uleb128 0x8
 11793 13bf 0E010000 		.4byte	0x10e
 11794 13c3 01       		.byte	0x1
 11795 13c4 08       		.uleb128 0x8
 11796 13c5 0E010000 		.4byte	0x10e
 11797 13c9 02       		.byte	0x2
 11798 13ca 00       		.byte	0
 11799 13cb 07       		.uleb128 0x7
 11800 13cc 81000000 		.4byte	0x81
 11801 13d0 E1130000 		.4byte	0x13e1
 11802 13d4 08       		.uleb128 0x8
 11803 13d5 0E010000 		.4byte	0x10e
 11804 13d9 01       		.byte	0x1
 11805 13da 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 258


 11806 13db 0E010000 		.4byte	0x10e
 11807 13df 02       		.byte	0x2
 11808 13e0 00       		.byte	0
 11809 13e1 23       		.uleb128 0x23
 11810 13e2 060D0000 		.4byte	.LASF244
 11811 13e6 01       		.byte	0x1
 11812 13e7 EC06     		.2byte	0x6ec
 11813 13e9 00000000 		.4byte	.LFB73
 11814 13ed 98110000 		.4byte	.LFE73-.LFB73
 11815 13f1 01       		.uleb128 0x1
 11816 13f2 9C       		.byte	0x9c
 11817 13f3 BB140000 		.4byte	0x14bb
 11818 13f7 1B       		.uleb128 0x1b
 11819 13f8 A60C0000 		.4byte	.LASF245
 11820 13fc 01       		.byte	0x1
 11821 13fd 0007     		.2byte	0x700
 11822 13ff BD000000 		.4byte	0xbd
 11823 1403 02       		.uleb128 0x2
 11824 1404 91       		.byte	0x91
 11825 1405 64       		.sleb128 -28
 11826 1406 1B       		.uleb128 0x1b
 11827 1407 ED0D0000 		.4byte	.LASF246
 11828 140b 01       		.byte	0x1
 11829 140c 0207     		.2byte	0x702
 11830 140e 8D000000 		.4byte	0x8d
 11831 1412 05       		.uleb128 0x5
 11832 1413 03       		.byte	0x3
 11833 1414 7C010000 		.4byte	emg_counter_1.10596
 11834 1418 1B       		.uleb128 0x1b
 11835 1419 FB0D0000 		.4byte	.LASF247
 11836 141d 01       		.byte	0x1
 11837 141e 0307     		.2byte	0x703
 11838 1420 8D000000 		.4byte	0x8d
 11839 1424 05       		.uleb128 0x5
 11840 1425 03       		.byte	0x3
 11841 1426 7E010000 		.4byte	emg_counter_2.10597
 11842 142a 1B       		.uleb128 0x1b
 11843 142b 32020000 		.4byte	.LASF248
 11844 142f 01       		.byte	0x1
 11845 1430 0407     		.2byte	0x704
 11846 1432 8D000000 		.4byte	0x8d
 11847 1436 05       		.uleb128 0x5
 11848 1437 03       		.byte	0x3
 11849 1438 84010000 		.4byte	UD_counter.10598
 11850 143c 1B       		.uleb128 0x1b
 11851 143d 64030000 		.4byte	.LASF249
 11852 1441 01       		.byte	0x1
 11853 1442 0507     		.2byte	0x705
 11854 1444 8D000000 		.4byte	0x8d
 11855 1448 05       		.uleb128 0x5
 11856 1449 03       		.byte	0x3
 11857 144a 8C010000 		.4byte	LR_counter.10599
 11858 144e 1B       		.uleb128 0x1b
 11859 144f 3F0A0000 		.4byte	.LASF250
 11860 1453 01       		.byte	0x1
 11861 1454 0607     		.2byte	0x706
 11862 1456 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 259


 11863 145a 05       		.uleb128 0x5
 11864 145b 03       		.byte	0x3
 11865 145c 80010000 		.4byte	UD_mean_value.10600
 11866 1460 1B       		.uleb128 0x1b
 11867 1461 B2100000 		.4byte	.LASF251
 11868 1465 01       		.byte	0x1
 11869 1466 0707     		.2byte	0x707
 11870 1468 BD000000 		.4byte	0xbd
 11871 146c 05       		.uleb128 0x5
 11872 146d 03       		.byte	0x3
 11873 146e 88010000 		.4byte	LR_mean_value.10601
 11874 1472 1B       		.uleb128 0x1b
 11875 1473 58020000 		.4byte	.LASF252
 11876 1477 01       		.byte	0x1
 11877 1478 0807     		.2byte	0x708
 11878 147a 81000000 		.4byte	0x81
 11879 147e 05       		.uleb128 0x5
 11880 147f 03       		.byte	0x3
 11881 1480 06000000 		.4byte	first_tension_valid.10602
 11882 1484 1B       		.uleb128 0x1b
 11883 1485 AE090000 		.4byte	.LASF253
 11884 1489 01       		.byte	0x1
 11885 148a 0A07     		.2byte	0x70a
 11886 148c 8D000000 		.4byte	0x8d
 11887 1490 05       		.uleb128 0x5
 11888 1491 03       		.byte	0x3
 11889 1492 74010000 		.4byte	count.10603
 11890 1496 1B       		.uleb128 0x1b
 11891 1497 5E010000 		.4byte	.LASF254
 11892 149b 01       		.byte	0x1
 11893 149c 0B07     		.2byte	0x70b
 11894 149e 99000000 		.4byte	0x99
 11895 14a2 05       		.uleb128 0x5
 11896 14a3 03       		.byte	0x3
 11897 14a4 78010000 		.4byte	v_count.10604
 11898 14a8 1D       		.uleb128 0x1d
 11899 14a9 69647800 		.ascii	"idx\000"
 11900 14ad 01       		.byte	0x1
 11901 14ae 0C07     		.2byte	0x70c
 11902 14b0 81000000 		.4byte	0x81
 11903 14b4 05       		.uleb128 0x5
 11904 14b5 03       		.byte	0x3
 11905 14b6 76010000 		.4byte	idx.10605
 11906 14ba 00       		.byte	0
 11907 14bb 25       		.uleb128 0x25
 11908 14bc D10C0000 		.4byte	.LASF255
 11909 14c0 01       		.byte	0x1
 11910 14c1 5A09     		.2byte	0x95a
 11911 14c3 00000000 		.4byte	.LFB74
 11912 14c7 F4000000 		.4byte	.LFE74-.LFB74
 11913 14cb 01       		.uleb128 0x1
 11914 14cc 9C       		.byte	0x9c
 11915 14cd E9140000 		.4byte	0x14e9
 11916 14d1 1C       		.uleb128 0x1c
 11917 14d2 06000000 		.4byte	.LBB10
 11918 14d6 D0000000 		.4byte	.LBE10-.LBB10
 11919 14da 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 260


 11920 14db 6900     		.ascii	"i\000"
 11921 14dd 01       		.byte	0x1
 11922 14de 5C09     		.2byte	0x95c
 11923 14e0 81000000 		.4byte	0x81
 11924 14e4 02       		.uleb128 0x2
 11925 14e5 91       		.byte	0x91
 11926 14e6 77       		.sleb128 -9
 11927 14e7 00       		.byte	0
 11928 14e8 00       		.byte	0
 11929 14e9 21       		.uleb128 0x21
 11930 14ea 7F030000 		.4byte	.LASF256
 11931 14ee 01       		.byte	0x1
 11932 14ef 7609     		.2byte	0x976
 11933 14f1 00000000 		.4byte	.LFB75
 11934 14f5 78000000 		.4byte	.LFE75-.LFB75
 11935 14f9 01       		.uleb128 0x1
 11936 14fa 9C       		.byte	0x9c
 11937 14fb 3C150000 		.4byte	0x153c
 11938 14ff 1F       		.uleb128 0x1f
 11939 1500 CF0A0000 		.4byte	.LASF257
 11940 1504 01       		.byte	0x1
 11941 1505 7609     		.2byte	0x976
 11942 1507 81000000 		.4byte	0x81
 11943 150b 02       		.uleb128 0x2
 11944 150c 91       		.byte	0x91
 11945 150d 6F       		.sleb128 -17
 11946 150e 1B       		.uleb128 0x1b
 11947 150f A7060000 		.4byte	.LASF225
 11948 1513 01       		.byte	0x1
 11949 1514 7809     		.2byte	0x978
 11950 1516 81000000 		.4byte	0x81
 11951 151a 02       		.uleb128 0x2
 11952 151b 91       		.byte	0x91
 11953 151c 73       		.sleb128 -13
 11954 151d 1B       		.uleb128 0x1b
 11955 151e 430B0000 		.4byte	.LASF258
 11956 1522 01       		.byte	0x1
 11957 1523 7909     		.2byte	0x979
 11958 1525 8D000000 		.4byte	0x8d
 11959 1529 02       		.uleb128 0x2
 11960 152a 91       		.byte	0x91
 11961 152b 76       		.sleb128 -10
 11962 152c 1B       		.uleb128 0x1b
 11963 152d 90070000 		.4byte	.LASF259
 11964 1531 01       		.byte	0x1
 11965 1532 7A09     		.2byte	0x97a
 11966 1534 8D000000 		.4byte	0x8d
 11967 1538 02       		.uleb128 0x2
 11968 1539 91       		.byte	0x91
 11969 153a 74       		.sleb128 -12
 11970 153b 00       		.byte	0
 11971 153c 23       		.uleb128 0x23
 11972 153d 03080000 		.4byte	.LASF260
 11973 1541 01       		.byte	0x1
 11974 1542 8A09     		.2byte	0x98a
 11975 1544 00000000 		.4byte	.LFB76
 11976 1548 08040000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 261


 11977 154c 01       		.uleb128 0x1
 11978 154d 9C       		.byte	0x9c
 11979 154e 68160000 		.4byte	0x1668
 11980 1552 1B       		.uleb128 0x1b
 11981 1553 09000000 		.4byte	.LASF261
 11982 1557 01       		.byte	0x1
 11983 1558 8B09     		.2byte	0x98b
 11984 155a 81000000 		.4byte	0x81
 11985 155e 05       		.uleb128 0x5
 11986 155f 03       		.byte	0x3
 11987 1560 8E010000 		.4byte	pos_cycle_status.10675
 11988 1564 1B       		.uleb128 0x1b
 11989 1565 380D0000 		.4byte	.LASF262
 11990 1569 01       		.byte	0x1
 11991 156a 8C09     		.2byte	0x98c
 11992 156c EA060000 		.4byte	0x6ea
 11993 1570 05       		.uleb128 0x5
 11994 1571 03       		.byte	0x3
 11995 1572 98010000 		.4byte	emg_cycle_status.10676
 11996 1576 1B       		.uleb128 0x1b
 11997 1577 5E0F0000 		.4byte	.LASF263
 11998 157b 01       		.byte	0x1
 11999 157c 8D09     		.2byte	0x98d
 12000 157e 81000000 		.4byte	0x81
 12001 1582 05       		.uleb128 0x5
 12002 1583 03       		.byte	0x3
 12003 1584 9A010000 		.4byte	rest_cycle_status.10677
 12004 1588 1B       		.uleb128 0x1b
 12005 1589 B1020000 		.4byte	.LASF264
 12006 158d 01       		.byte	0x1
 12007 158e 8E09     		.2byte	0x98e
 12008 1590 BD000000 		.4byte	0xbd
 12009 1594 05       		.uleb128 0x5
 12010 1595 03       		.byte	0x3
 12011 1596 08000000 		.4byte	bin_threshold.10678
 12012 159a 1B       		.uleb128 0x1b
 12013 159b B9010000 		.4byte	.LASF265
 12014 159f 01       		.byte	0x1
 12015 15a0 8F09     		.2byte	0x98f
 12016 15a2 BD000000 		.4byte	0xbd
 12017 15a6 05       		.uleb128 0x5
 12018 15a7 03       		.byte	0x3
 12019 15a8 90010000 		.4byte	thr_pos.10679
 12020 15ac 1B       		.uleb128 0x1b
 12021 15ad DA090000 		.4byte	.LASF266
 12022 15b1 01       		.byte	0x1
 12023 15b2 8F09     		.2byte	0x98f
 12024 15b4 BD000000 		.4byte	0xbd
 12025 15b8 05       		.uleb128 0x5
 12026 15b9 03       		.byte	0x3
 12027 15ba 94010000 		.4byte	max_pos.10680
 12028 15be 1D       		.uleb128 0x1d
 12029 15bf 6900     		.ascii	"i\000"
 12030 15c1 01       		.byte	0x1
 12031 15c2 9009     		.2byte	0x990
 12032 15c4 81000000 		.4byte	0x81
 12033 15c8 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 262


 12034 15c9 91       		.byte	0x91
 12035 15ca 77       		.sleb128 -9
 12036 15cb 1B       		.uleb128 0x1b
 12037 15cc 18050000 		.4byte	.LASF267
 12038 15d0 01       		.byte	0x1
 12039 15d1 9009     		.2byte	0x990
 12040 15d3 81000000 		.4byte	0x81
 12041 15d7 02       		.uleb128 0x2
 12042 15d8 91       		.byte	0x91
 12043 15d9 63       		.sleb128 -29
 12044 15da 1B       		.uleb128 0x1b
 12045 15db EB000000 		.4byte	.LASF268
 12046 15df 01       		.byte	0x1
 12047 15e0 9009     		.2byte	0x990
 12048 15e2 81000000 		.4byte	0x81
 12049 15e6 02       		.uleb128 0x2
 12050 15e7 91       		.byte	0x91
 12051 15e8 62       		.sleb128 -30
 12052 15e9 1B       		.uleb128 0x1b
 12053 15ea 9A0C0000 		.4byte	.LASF269
 12054 15ee 01       		.byte	0x1
 12055 15ef 9009     		.2byte	0x990
 12056 15f1 81000000 		.4byte	0x81
 12057 15f5 02       		.uleb128 0x2
 12058 15f6 91       		.byte	0x91
 12059 15f7 61       		.sleb128 -31
 12060 15f8 1B       		.uleb128 0x1b
 12061 15f9 A00C0000 		.4byte	.LASF270
 12062 15fd 01       		.byte	0x1
 12063 15fe 9009     		.2byte	0x990
 12064 1600 81000000 		.4byte	0x81
 12065 1604 02       		.uleb128 0x2
 12066 1605 91       		.byte	0x91
 12067 1606 60       		.sleb128 -32
 12068 1607 1B       		.uleb128 0x1b
 12069 1608 E50C0000 		.4byte	.LASF271
 12070 160c 01       		.byte	0x1
 12071 160d 9109     		.2byte	0x991
 12072 160f BD000000 		.4byte	0xbd
 12073 1613 02       		.uleb128 0x2
 12074 1614 91       		.byte	0x91
 12075 1615 6C       		.sleb128 -20
 12076 1616 1B       		.uleb128 0x1b
 12077 1617 5E040000 		.4byte	.LASF272
 12078 161b 01       		.byte	0x1
 12079 161c 9109     		.2byte	0x991
 12080 161e BD000000 		.4byte	0xbd
 12081 1622 02       		.uleb128 0x2
 12082 1623 91       		.byte	0x91
 12083 1624 68       		.sleb128 -24
 12084 1625 1B       		.uleb128 0x1b
 12085 1626 360E0000 		.4byte	.LASF273
 12086 162a 01       		.byte	0x1
 12087 162b 9109     		.2byte	0x991
 12088 162d BD000000 		.4byte	0xbd
 12089 1631 02       		.uleb128 0x2
 12090 1632 91       		.byte	0x91
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 263


 12091 1633 70       		.sleb128 -16
 12092 1634 1B       		.uleb128 0x1b
 12093 1635 F9030000 		.4byte	.LASF274
 12094 1639 01       		.byte	0x1
 12095 163a 9209     		.2byte	0x992
 12096 163c BD000000 		.4byte	0xbd
 12097 1640 02       		.uleb128 0x2
 12098 1641 91       		.byte	0x91
 12099 1642 64       		.sleb128 -28
 12100 1643 1B       		.uleb128 0x1b
 12101 1644 4D060000 		.4byte	.LASF275
 12102 1648 01       		.byte	0x1
 12103 1649 9309     		.2byte	0x993
 12104 164b 99000000 		.4byte	0x99
 12105 164f 05       		.uleb128 0x5
 12106 1650 03       		.byte	0x3
 12107 1651 9C010000 		.4byte	timer_value_s.10690
 12108 1655 1B       		.uleb128 0x1b
 12109 1656 E8050000 		.4byte	.LASF276
 12110 165a 01       		.byte	0x1
 12111 165b 9309     		.2byte	0x993
 12112 165d 99000000 		.4byte	0x99
 12113 1661 05       		.uleb128 0x5
 12114 1662 03       		.byte	0x3
 12115 1663 A0010000 		.4byte	timer_value_e.10691
 12116 1667 00       		.byte	0
 12117 1668 23       		.uleb128 0x23
 12118 1669 750A0000 		.4byte	.LASF277
 12119 166d 01       		.byte	0x1
 12120 166e FF09     		.2byte	0x9ff
 12121 1670 00000000 		.4byte	.LFB77
 12122 1674 08010000 		.4byte	.LFE77-.LFB77
 12123 1678 01       		.uleb128 0x1
 12124 1679 9C       		.byte	0x9c
 12125 167a EE160000 		.4byte	0x16ee
 12126 167e 1B       		.uleb128 0x1b
 12127 167f 360F0000 		.4byte	.LASF278
 12128 1683 01       		.byte	0x1
 12129 1684 010A     		.2byte	0xa01
 12130 1686 EA000000 		.4byte	0xea
 12131 168a 02       		.uleb128 0x2
 12132 168b 91       		.byte	0x91
 12133 168c 64       		.sleb128 -28
 12134 168d 1B       		.uleb128 0x1b
 12135 168e C60C0000 		.4byte	.LASF279
 12136 1692 01       		.byte	0x1
 12137 1693 020A     		.2byte	0xa02
 12138 1695 81000000 		.4byte	0x81
 12139 1699 05       		.uleb128 0x5
 12140 169a 03       		.byte	0x3
 12141 169b A8010000 		.4byte	row_number.10713
 12142 169f 1B       		.uleb128 0x1b
 12143 16a0 31040000 		.4byte	.LASF280
 12144 16a4 01       		.byte	0x1
 12145 16a5 030A     		.2byte	0xa03
 12146 16a7 81000000 		.4byte	0x81
 12147 16ab 02       		.uleb128 0x2
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 264


 12148 16ac 91       		.byte	0x91
 12149 16ad 77       		.sleb128 -9
 12150 16ae 1B       		.uleb128 0x1b
 12151 16af 880D0000 		.4byte	.LASF281
 12152 16b3 01       		.byte	0x1
 12153 16b4 040A     		.2byte	0xa04
 12154 16b6 EE160000 		.4byte	0x16ee
 12155 16ba 02       		.uleb128 0x2
 12156 16bb 91       		.byte	0x91
 12157 16bc 70       		.sleb128 -16
 12158 16bd 1B       		.uleb128 0x1b
 12159 16be F3000000 		.4byte	.LASF282
 12160 16c2 01       		.byte	0x1
 12161 16c3 050A     		.2byte	0xa05
 12162 16c5 EE160000 		.4byte	0x16ee
 12163 16c9 02       		.uleb128 0x2
 12164 16ca 91       		.byte	0x91
 12165 16cb 6C       		.sleb128 -20
 12166 16cc 1B       		.uleb128 0x1b
 12167 16cd CA100000 		.4byte	.LASF283
 12168 16d1 01       		.byte	0x1
 12169 16d2 060A     		.2byte	0xa06
 12170 16d4 81000000 		.4byte	0x81
 12171 16d8 02       		.uleb128 0x2
 12172 16d9 91       		.byte	0x91
 12173 16da 6B       		.sleb128 -21
 12174 16db 1B       		.uleb128 0x1b
 12175 16dc C0090000 		.4byte	.LASF284
 12176 16e0 01       		.byte	0x1
 12177 16e1 070A     		.2byte	0xa07
 12178 16e3 EE160000 		.4byte	0x16ee
 12179 16e7 05       		.uleb128 0x5
 12180 16e8 03       		.byte	0x3
 12181 16e9 A4010000 		.4byte	m_addr.10718
 12182 16ed 00       		.byte	0
 12183 16ee 0C       		.uleb128 0xc
 12184 16ef 04       		.byte	0x4
 12185 16f0 81000000 		.4byte	0x81
 12186 16f4 07       		.uleb128 0x7
 12187 16f5 04170000 		.4byte	0x1704
 12188 16f9 04170000 		.4byte	0x1704
 12189 16fd 08       		.uleb128 0x8
 12190 16fe 0E010000 		.4byte	0x10e
 12191 1702 1C       		.byte	0x1c
 12192 1703 00       		.byte	0
 12193 1704 26       		.uleb128 0x26
 12194 1705 81000000 		.4byte	0x81
 12195 1709 19       		.uleb128 0x19
 12196 170a 930D0000 		.4byte	.LASF285
 12197 170e 01       		.byte	0x1
 12198 170f 40       		.byte	0x40
 12199 1710 1A170000 		.4byte	0x171a
 12200 1714 05       		.uleb128 0x5
 12201 1715 03       		.byte	0x3
 12202 1716 00000000 		.4byte	pwm_preload_values
 12203 171a 26       		.uleb128 0x26
 12204 171b F4160000 		.4byte	0x16f4
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 265


 12205 171f 27       		.uleb128 0x27
 12206 1720 CD0E0000 		.4byte	.LASF286
 12207 1724 08       		.byte	0x8
 12208 1725 1207     		.2byte	0x712
 12209 1727 2B170000 		.4byte	0x172b
 12210 172b 06       		.uleb128 0x6
 12211 172c 76000000 		.4byte	0x76
 12212 1730 07       		.uleb128 0x7
 12213 1731 A5010000 		.4byte	0x1a5
 12214 1735 40170000 		.4byte	0x1740
 12215 1739 08       		.uleb128 0x8
 12216 173a 0E010000 		.4byte	0x10e
 12217 173e 01       		.byte	0x1
 12218 173f 00       		.byte	0
 12219 1740 27       		.uleb128 0x27
 12220 1741 8D060000 		.4byte	.LASF287
 12221 1745 07       		.byte	0x7
 12222 1746 1A02     		.2byte	0x21a
 12223 1748 30170000 		.4byte	0x1730
 12224 174c 27       		.uleb128 0x27
 12225 174d 55040000 		.4byte	.LASF288
 12226 1751 07       		.byte	0x7
 12227 1752 1A02     		.2byte	0x21a
 12228 1754 30170000 		.4byte	0x1730
 12229 1758 27       		.uleb128 0x27
 12230 1759 050B0000 		.4byte	.LASF289
 12231 175d 07       		.byte	0x7
 12232 175e 1A02     		.2byte	0x21a
 12233 1760 30170000 		.4byte	0x1730
 12234 1764 07       		.uleb128 0x7
 12235 1765 E2010000 		.4byte	0x1e2
 12236 1769 74170000 		.4byte	0x1774
 12237 176d 08       		.uleb128 0x8
 12238 176e 0E010000 		.4byte	0x10e
 12239 1772 01       		.byte	0x1
 12240 1773 00       		.byte	0
 12241 1774 27       		.uleb128 0x27
 12242 1775 46060000 		.4byte	.LASF290
 12243 1779 07       		.byte	0x7
 12244 177a 1B02     		.2byte	0x21b
 12245 177c 64170000 		.4byte	0x1764
 12246 1780 27       		.uleb128 0x27
 12247 1781 C0100000 		.4byte	.LASF291
 12248 1785 07       		.byte	0x7
 12249 1786 1B02     		.2byte	0x21b
 12250 1788 64170000 		.4byte	0x1764
 12251 178c 27       		.uleb128 0x27
 12252 178d 0C100000 		.4byte	.LASF292
 12253 1791 07       		.byte	0x7
 12254 1792 1C02     		.2byte	0x21c
 12255 1794 63020000 		.4byte	0x263
 12256 1798 27       		.uleb128 0x27
 12257 1799 FF020000 		.4byte	.LASF293
 12258 179d 07       		.byte	0x7
 12259 179e 1C02     		.2byte	0x21c
 12260 17a0 63020000 		.4byte	0x263
 12261 17a4 27       		.uleb128 0x27
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 266


 12262 17a5 76000000 		.4byte	.LASF294
 12263 17a9 07       		.byte	0x7
 12264 17aa 1E02     		.2byte	0x21e
 12265 17ac B4020000 		.4byte	0x2b4
 12266 17b0 27       		.uleb128 0x27
 12267 17b1 E70D0000 		.4byte	.LASF295
 12268 17b5 07       		.byte	0x7
 12269 17b6 1F02     		.2byte	0x21f
 12270 17b8 70090000 		.4byte	0x970
 12271 17bc 27       		.uleb128 0x27
 12272 17bd C7090000 		.4byte	.LASF296
 12273 17c1 07       		.byte	0x7
 12274 17c2 1F02     		.2byte	0x21f
 12275 17c4 70090000 		.4byte	0x970
 12276 17c8 27       		.uleb128 0x27
 12277 17c9 CE080000 		.4byte	.LASF297
 12278 17cd 07       		.byte	0x7
 12279 17ce 2002     		.2byte	0x220
 12280 17d0 490B0000 		.4byte	0xb49
 12281 17d4 07       		.uleb128 0x7
 12282 17d5 210B0000 		.4byte	0xb21
 12283 17d9 E4170000 		.4byte	0x17e4
 12284 17dd 08       		.uleb128 0x8
 12285 17de 0E010000 		.4byte	0x10e
 12286 17e2 01       		.byte	0x1
 12287 17e3 00       		.byte	0
 12288 17e4 27       		.uleb128 0x27
 12289 17e5 F10A0000 		.4byte	.LASF298
 12290 17e9 07       		.byte	0x7
 12291 17ea 2102     		.2byte	0x221
 12292 17ec D4170000 		.4byte	0x17d4
 12293 17f0 27       		.uleb128 0x27
 12294 17f1 29090000 		.4byte	.LASF299
 12295 17f5 07       		.byte	0x7
 12296 17f6 2102     		.2byte	0x221
 12297 17f8 D4170000 		.4byte	0x17d4
 12298 17fc 27       		.uleb128 0x27
 12299 17fd D70A0000 		.4byte	.LASF300
 12300 1801 07       		.byte	0x7
 12301 1802 2102     		.2byte	0x221
 12302 1804 D4170000 		.4byte	0x17d4
 12303 1808 07       		.uleb128 0x7
 12304 1809 210B0000 		.4byte	0xb21
 12305 180d 18180000 		.4byte	0x1818
 12306 1811 08       		.uleb128 0x8
 12307 1812 0E010000 		.4byte	0x10e
 12308 1816 02       		.byte	0x2
 12309 1817 00       		.byte	0
 12310 1818 27       		.uleb128 0x27
 12311 1819 D6040000 		.4byte	.LASF301
 12312 181d 07       		.byte	0x7
 12313 181e 2202     		.2byte	0x222
 12314 1820 08180000 		.4byte	0x1808
 12315 1824 07       		.uleb128 0x7
 12316 1825 210B0000 		.4byte	0xb21
 12317 1829 34180000 		.4byte	0x1834
 12318 182d 08       		.uleb128 0x8
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 267


 12319 182e 0E010000 		.4byte	0x10e
 12320 1832 07       		.byte	0x7
 12321 1833 00       		.byte	0
 12322 1834 27       		.uleb128 0x27
 12323 1835 83010000 		.4byte	.LASF302
 12324 1839 07       		.byte	0x7
 12325 183a 2302     		.2byte	0x223
 12326 183c 24180000 		.4byte	0x1824
 12327 1840 27       		.uleb128 0x27
 12328 1841 6C020000 		.4byte	.LASF303
 12329 1845 07       		.byte	0x7
 12330 1846 2502     		.2byte	0x225
 12331 1848 8D000000 		.4byte	0x8d
 12332 184c 27       		.uleb128 0x27
 12333 184d AE080000 		.4byte	.LASF304
 12334 1851 07       		.byte	0x7
 12335 1852 2602     		.2byte	0x226
 12336 1854 8D000000 		.4byte	0x8d
 12337 1858 27       		.uleb128 0x27
 12338 1859 810B0000 		.4byte	.LASF305
 12339 185d 07       		.byte	0x7
 12340 185e 2702     		.2byte	0x227
 12341 1860 D5000000 		.4byte	0xd5
 12342 1864 27       		.uleb128 0x27
 12343 1865 6E0C0000 		.4byte	.LASF306
 12344 1869 07       		.byte	0x7
 12345 186a 2902     		.2byte	0x229
 12346 186c 94020000 		.4byte	0x294
 12347 1870 27       		.uleb128 0x27
 12348 1871 280F0000 		.4byte	.LASF307
 12349 1875 07       		.byte	0x7
 12350 1876 2A02     		.2byte	0x22a
 12351 1878 EA060000 		.4byte	0x6ea
 12352 187c 27       		.uleb128 0x27
 12353 187d 6D0E0000 		.4byte	.LASF308
 12354 1881 07       		.byte	0x7
 12355 1882 2B02     		.2byte	0x22b
 12356 1884 EA060000 		.4byte	0x6ea
 12357 1888 27       		.uleb128 0x27
 12358 1889 96050000 		.4byte	.LASF309
 12359 188d 07       		.byte	0x7
 12360 188e 2C02     		.2byte	0x22c
 12361 1890 94020000 		.4byte	0x294
 12362 1894 27       		.uleb128 0x27
 12363 1895 DA0E0000 		.4byte	.LASF310
 12364 1899 07       		.byte	0x7
 12365 189a 2D02     		.2byte	0x22d
 12366 189c 94020000 		.4byte	0x294
 12367 18a0 27       		.uleb128 0x27
 12368 18a1 24060000 		.4byte	.LASF311
 12369 18a5 07       		.byte	0x7
 12370 18a6 2F02     		.2byte	0x22f
 12371 18a8 F50B0000 		.4byte	0xbf5
 12372 18ac 27       		.uleb128 0x27
 12373 18ad 7F040000 		.4byte	.LASF312
 12374 18b1 07       		.byte	0x7
 12375 18b2 3002     		.2byte	0x230
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 268


 12376 18b4 BD0B0000 		.4byte	0xbbd
 12377 18b8 27       		.uleb128 0x27
 12378 18b9 D5030000 		.4byte	.LASF313
 12379 18bd 07       		.byte	0x7
 12380 18be 3102     		.2byte	0x231
 12381 18c0 BD0B0000 		.4byte	0xbbd
 12382 18c4 27       		.uleb128 0x27
 12383 18c5 010C0000 		.4byte	.LASF314
 12384 18c9 07       		.byte	0x7
 12385 18ca 3202     		.2byte	0x232
 12386 18cc BD0B0000 		.4byte	0xbbd
 12387 18d0 27       		.uleb128 0x27
 12388 18d1 3C100000 		.4byte	.LASF315
 12389 18d5 07       		.byte	0x7
 12390 18d6 3302     		.2byte	0x233
 12391 18d8 BD0B0000 		.4byte	0xbbd
 12392 18dc 27       		.uleb128 0x27
 12393 18dd B2070000 		.4byte	.LASF316
 12394 18e1 07       		.byte	0x7
 12395 18e2 3602     		.2byte	0x236
 12396 18e4 81000000 		.4byte	0x81
 12397 18e8 27       		.uleb128 0x27
 12398 18e9 B7000000 		.4byte	.LASF317
 12399 18ed 07       		.byte	0x7
 12400 18ee 3702     		.2byte	0x237
 12401 18f0 81000000 		.4byte	0x81
 12402 18f4 27       		.uleb128 0x27
 12403 18f5 EA030000 		.4byte	.LASF318
 12404 18f9 07       		.byte	0x7
 12405 18fa 3802     		.2byte	0x238
 12406 18fc 81000000 		.4byte	0x81
 12407 1900 27       		.uleb128 0x27
 12408 1901 D5000000 		.4byte	.LASF319
 12409 1905 07       		.byte	0x7
 12410 1906 3902     		.2byte	0x239
 12411 1908 81000000 		.4byte	0x81
 12412 190c 27       		.uleb128 0x27
 12413 190d F4100000 		.4byte	.LASF320
 12414 1911 07       		.byte	0x7
 12415 1912 3B02     		.2byte	0x23b
 12416 1914 81000000 		.4byte	0x81
 12417 1918 27       		.uleb128 0x27
 12418 1919 F80A0000 		.4byte	.LASF321
 12419 191d 07       		.byte	0x7
 12420 191e 3C02     		.2byte	0x23c
 12421 1920 81000000 		.4byte	0x81
 12422 1924 27       		.uleb128 0x27
 12423 1925 3B040000 		.4byte	.LASF322
 12424 1929 07       		.byte	0x7
 12425 192a 3D02     		.2byte	0x23d
 12426 192c 81000000 		.4byte	0x81
 12427 1930 27       		.uleb128 0x27
 12428 1931 9C070000 		.4byte	.LASF323
 12429 1935 07       		.byte	0x7
 12430 1936 3E02     		.2byte	0x23e
 12431 1938 81000000 		.4byte	0x81
 12432 193c 27       		.uleb128 0x27
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 269


 12433 193d 0E090000 		.4byte	.LASF324
 12434 1941 07       		.byte	0x7
 12435 1942 3F02     		.2byte	0x23f
 12436 1944 81000000 		.4byte	0x81
 12437 1948 07       		.uleb128 0x7
 12438 1949 B1000000 		.4byte	0xb1
 12439 194d 58190000 		.4byte	0x1958
 12440 1951 08       		.uleb128 0x8
 12441 1952 0E010000 		.4byte	0x10e
 12442 1956 0B       		.byte	0xb
 12443 1957 00       		.byte	0
 12444 1958 27       		.uleb128 0x27
 12445 1959 E2030000 		.4byte	.LASF325
 12446 195d 07       		.byte	0x7
 12447 195e 4302     		.2byte	0x243
 12448 1960 48190000 		.4byte	0x1948
 12449 1964 27       		.uleb128 0x27
 12450 1965 73100000 		.4byte	.LASF326
 12451 1969 07       		.byte	0x7
 12452 196a 4402     		.2byte	0x244
 12453 196c 81000000 		.4byte	0x81
 12454 1970 27       		.uleb128 0x27
 12455 1971 B1040000 		.4byte	.LASF327
 12456 1975 07       		.byte	0x7
 12457 1976 4702     		.2byte	0x247
 12458 1978 A5000000 		.4byte	0xa5
 12459 197c 07       		.uleb128 0x7
 12460 197d 99000000 		.4byte	0x99
 12461 1981 8C190000 		.4byte	0x198c
 12462 1985 08       		.uleb128 0x8
 12463 1986 0E010000 		.4byte	0x10e
 12464 198a 04       		.byte	0x4
 12465 198b 00       		.byte	0
 12466 198c 27       		.uleb128 0x27
 12467 198d 7C060000 		.4byte	.LASF328
 12468 1991 07       		.byte	0x7
 12469 1992 4A02     		.2byte	0x24a
 12470 1994 7C190000 		.4byte	0x197c
 12471 1998 27       		.uleb128 0x27
 12472 1999 160D0000 		.4byte	.LASF329
 12473 199d 07       		.byte	0x7
 12474 199e 4B02     		.2byte	0x24b
 12475 19a0 EA060000 		.4byte	0x6ea
 12476 19a4 07       		.uleb128 0x7
 12477 19a5 8D000000 		.4byte	0x8d
 12478 19a9 BA190000 		.4byte	0x19ba
 12479 19ad 08       		.uleb128 0x8
 12480 19ae 0E010000 		.4byte	0x10e
 12481 19b2 01       		.byte	0x1
 12482 19b3 08       		.uleb128 0x8
 12483 19b4 0E010000 		.4byte	0x10e
 12484 19b8 04       		.byte	0x4
 12485 19b9 00       		.byte	0
 12486 19ba 27       		.uleb128 0x27
 12487 19bb 480F0000 		.4byte	.LASF330
 12488 19bf 07       		.byte	0x7
 12489 19c0 4C02     		.2byte	0x24c
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 270


 12490 19c2 A4190000 		.4byte	0x19a4
 12491 19c6 07       		.uleb128 0x7
 12492 19c7 81000000 		.4byte	0x81
 12493 19cb DC190000 		.4byte	0x19dc
 12494 19cf 08       		.uleb128 0x8
 12495 19d0 0E010000 		.4byte	0x10e
 12496 19d4 01       		.byte	0x1
 12497 19d5 08       		.uleb128 0x8
 12498 19d6 0E010000 		.4byte	0x10e
 12499 19da 04       		.byte	0x4
 12500 19db 00       		.byte	0
 12501 19dc 27       		.uleb128 0x27
 12502 19dd 5B060000 		.4byte	.LASF331
 12503 19e1 07       		.byte	0x7
 12504 19e2 4D02     		.2byte	0x24d
 12505 19e4 C6190000 		.4byte	0x19c6
 12506 19e8 27       		.uleb128 0x27
 12507 19e9 E2090000 		.4byte	.LASF332
 12508 19ed 07       		.byte	0x7
 12509 19ee 5002     		.2byte	0x250
 12510 19f0 BD000000 		.4byte	0xbd
 12511 19f4 27       		.uleb128 0x27
 12512 19f5 79050000 		.4byte	.LASF333
 12513 19f9 07       		.byte	0x7
 12514 19fa 5302     		.2byte	0x253
 12515 19fc 9F010000 		.4byte	0x19f
 12516 1a00 07       		.uleb128 0x7
 12517 1a01 A50A0000 		.4byte	0xaa5
 12518 1a05 101A0000 		.4byte	0x1a10
 12519 1a09 08       		.uleb128 0x8
 12520 1a0a 0E010000 		.4byte	0x10e
 12521 1a0e 04       		.byte	0x4
 12522 1a0f 00       		.byte	0
 12523 1a10 27       		.uleb128 0x27
 12524 1a11 D0040000 		.4byte	.LASF334
 12525 1a15 07       		.byte	0x7
 12526 1a16 5C02     		.2byte	0x25c
 12527 1a18 001A0000 		.4byte	0x1a00
 12528 1a1c 27       		.uleb128 0x27
 12529 1a1d C8050000 		.4byte	.LASF335
 12530 1a21 07       		.byte	0x7
 12531 1a22 5C02     		.2byte	0x25c
 12532 1a24 001A0000 		.4byte	0x1a00
 12533 1a28 27       		.uleb128 0x27
 12534 1a29 91100000 		.4byte	.LASF336
 12535 1a2d 07       		.byte	0x7
 12536 1a2e 6502     		.2byte	0x265
 12537 1a30 81000000 		.4byte	0x81
 12538 1a34 00       		.byte	0
 12539              		.section	.debug_abbrev,"",%progbits
 12540              	.Ldebug_abbrev0:
 12541 0000 01       		.uleb128 0x1
 12542 0001 11       		.uleb128 0x11
 12543 0002 01       		.byte	0x1
 12544 0003 25       		.uleb128 0x25
 12545 0004 0E       		.uleb128 0xe
 12546 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 271


 12547 0006 0B       		.uleb128 0xb
 12548 0007 03       		.uleb128 0x3
 12549 0008 0E       		.uleb128 0xe
 12550 0009 1B       		.uleb128 0x1b
 12551 000a 0E       		.uleb128 0xe
 12552 000b 55       		.uleb128 0x55
 12553 000c 17       		.uleb128 0x17
 12554 000d 11       		.uleb128 0x11
 12555 000e 01       		.uleb128 0x1
 12556 000f 10       		.uleb128 0x10
 12557 0010 17       		.uleb128 0x17
 12558 0011 00       		.byte	0
 12559 0012 00       		.byte	0
 12560 0013 02       		.uleb128 0x2
 12561 0014 24       		.uleb128 0x24
 12562 0015 00       		.byte	0
 12563 0016 0B       		.uleb128 0xb
 12564 0017 0B       		.uleb128 0xb
 12565 0018 3E       		.uleb128 0x3e
 12566 0019 0B       		.uleb128 0xb
 12567 001a 03       		.uleb128 0x3
 12568 001b 0E       		.uleb128 0xe
 12569 001c 00       		.byte	0
 12570 001d 00       		.byte	0
 12571 001e 03       		.uleb128 0x3
 12572 001f 16       		.uleb128 0x16
 12573 0020 00       		.byte	0
 12574 0021 03       		.uleb128 0x3
 12575 0022 0E       		.uleb128 0xe
 12576 0023 3A       		.uleb128 0x3a
 12577 0024 0B       		.uleb128 0xb
 12578 0025 3B       		.uleb128 0x3b
 12579 0026 0B       		.uleb128 0xb
 12580 0027 49       		.uleb128 0x49
 12581 0028 13       		.uleb128 0x13
 12582 0029 00       		.byte	0
 12583 002a 00       		.byte	0
 12584 002b 04       		.uleb128 0x4
 12585 002c 24       		.uleb128 0x24
 12586 002d 00       		.byte	0
 12587 002e 0B       		.uleb128 0xb
 12588 002f 0B       		.uleb128 0xb
 12589 0030 3E       		.uleb128 0x3e
 12590 0031 0B       		.uleb128 0xb
 12591 0032 03       		.uleb128 0x3
 12592 0033 08       		.uleb128 0x8
 12593 0034 00       		.byte	0
 12594 0035 00       		.byte	0
 12595 0036 05       		.uleb128 0x5
 12596 0037 16       		.uleb128 0x16
 12597 0038 00       		.byte	0
 12598 0039 03       		.uleb128 0x3
 12599 003a 0E       		.uleb128 0xe
 12600 003b 3A       		.uleb128 0x3a
 12601 003c 0B       		.uleb128 0xb
 12602 003d 3B       		.uleb128 0x3b
 12603 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 272


 12604 003f 49       		.uleb128 0x49
 12605 0040 13       		.uleb128 0x13
 12606 0041 00       		.byte	0
 12607 0042 00       		.byte	0
 12608 0043 06       		.uleb128 0x6
 12609 0044 35       		.uleb128 0x35
 12610 0045 00       		.byte	0
 12611 0046 49       		.uleb128 0x49
 12612 0047 13       		.uleb128 0x13
 12613 0048 00       		.byte	0
 12614 0049 00       		.byte	0
 12615 004a 07       		.uleb128 0x7
 12616 004b 01       		.uleb128 0x1
 12617 004c 01       		.byte	0x1
 12618 004d 49       		.uleb128 0x49
 12619 004e 13       		.uleb128 0x13
 12620 004f 01       		.uleb128 0x1
 12621 0050 13       		.uleb128 0x13
 12622 0051 00       		.byte	0
 12623 0052 00       		.byte	0
 12624 0053 08       		.uleb128 0x8
 12625 0054 21       		.uleb128 0x21
 12626 0055 00       		.byte	0
 12627 0056 49       		.uleb128 0x49
 12628 0057 13       		.uleb128 0x13
 12629 0058 2F       		.uleb128 0x2f
 12630 0059 0B       		.uleb128 0xb
 12631 005a 00       		.byte	0
 12632 005b 00       		.byte	0
 12633 005c 09       		.uleb128 0x9
 12634 005d 04       		.uleb128 0x4
 12635 005e 01       		.byte	0x1
 12636 005f 03       		.uleb128 0x3
 12637 0060 0E       		.uleb128 0xe
 12638 0061 0B       		.uleb128 0xb
 12639 0062 0B       		.uleb128 0xb
 12640 0063 49       		.uleb128 0x49
 12641 0064 13       		.uleb128 0x13
 12642 0065 3A       		.uleb128 0x3a
 12643 0066 0B       		.uleb128 0xb
 12644 0067 3B       		.uleb128 0x3b
 12645 0068 0B       		.uleb128 0xb
 12646 0069 01       		.uleb128 0x1
 12647 006a 13       		.uleb128 0x13
 12648 006b 00       		.byte	0
 12649 006c 00       		.byte	0
 12650 006d 0A       		.uleb128 0xa
 12651 006e 28       		.uleb128 0x28
 12652 006f 00       		.byte	0
 12653 0070 03       		.uleb128 0x3
 12654 0071 0E       		.uleb128 0xe
 12655 0072 1C       		.uleb128 0x1c
 12656 0073 0B       		.uleb128 0xb
 12657 0074 00       		.byte	0
 12658 0075 00       		.byte	0
 12659 0076 0B       		.uleb128 0xb
 12660 0077 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 273


 12661 0078 00       		.byte	0
 12662 0079 03       		.uleb128 0x3
 12663 007a 0E       		.uleb128 0xe
 12664 007b 3C       		.uleb128 0x3c
 12665 007c 19       		.uleb128 0x19
 12666 007d 00       		.byte	0
 12667 007e 00       		.byte	0
 12668 007f 0C       		.uleb128 0xc
 12669 0080 0F       		.uleb128 0xf
 12670 0081 00       		.byte	0
 12671 0082 0B       		.uleb128 0xb
 12672 0083 0B       		.uleb128 0xb
 12673 0084 49       		.uleb128 0x49
 12674 0085 13       		.uleb128 0x13
 12675 0086 00       		.byte	0
 12676 0087 00       		.byte	0
 12677 0088 0D       		.uleb128 0xd
 12678 0089 13       		.uleb128 0x13
 12679 008a 01       		.byte	0x1
 12680 008b 03       		.uleb128 0x3
 12681 008c 0E       		.uleb128 0xe
 12682 008d 0B       		.uleb128 0xb
 12683 008e 0B       		.uleb128 0xb
 12684 008f 3A       		.uleb128 0x3a
 12685 0090 0B       		.uleb128 0xb
 12686 0091 3B       		.uleb128 0x3b
 12687 0092 0B       		.uleb128 0xb
 12688 0093 01       		.uleb128 0x1
 12689 0094 13       		.uleb128 0x13
 12690 0095 00       		.byte	0
 12691 0096 00       		.byte	0
 12692 0097 0E       		.uleb128 0xe
 12693 0098 0D       		.uleb128 0xd
 12694 0099 00       		.byte	0
 12695 009a 03       		.uleb128 0x3
 12696 009b 08       		.uleb128 0x8
 12697 009c 3A       		.uleb128 0x3a
 12698 009d 0B       		.uleb128 0xb
 12699 009e 3B       		.uleb128 0x3b
 12700 009f 0B       		.uleb128 0xb
 12701 00a0 49       		.uleb128 0x49
 12702 00a1 13       		.uleb128 0x13
 12703 00a2 38       		.uleb128 0x38
 12704 00a3 0B       		.uleb128 0xb
 12705 00a4 00       		.byte	0
 12706 00a5 00       		.byte	0
 12707 00a6 0F       		.uleb128 0xf
 12708 00a7 0D       		.uleb128 0xd
 12709 00a8 00       		.byte	0
 12710 00a9 03       		.uleb128 0x3
 12711 00aa 0E       		.uleb128 0xe
 12712 00ab 3A       		.uleb128 0x3a
 12713 00ac 0B       		.uleb128 0xb
 12714 00ad 3B       		.uleb128 0x3b
 12715 00ae 0B       		.uleb128 0xb
 12716 00af 49       		.uleb128 0x49
 12717 00b0 13       		.uleb128 0x13
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 274


 12718 00b1 38       		.uleb128 0x38
 12719 00b2 0B       		.uleb128 0xb
 12720 00b3 00       		.byte	0
 12721 00b4 00       		.byte	0
 12722 00b5 10       		.uleb128 0x10
 12723 00b6 13       		.uleb128 0x13
 12724 00b7 01       		.byte	0x1
 12725 00b8 03       		.uleb128 0x3
 12726 00b9 0E       		.uleb128 0xe
 12727 00ba 0B       		.uleb128 0xb
 12728 00bb 0B       		.uleb128 0xb
 12729 00bc 3A       		.uleb128 0x3a
 12730 00bd 0B       		.uleb128 0xb
 12731 00be 3B       		.uleb128 0x3b
 12732 00bf 05       		.uleb128 0x5
 12733 00c0 01       		.uleb128 0x1
 12734 00c1 13       		.uleb128 0x13
 12735 00c2 00       		.byte	0
 12736 00c3 00       		.byte	0
 12737 00c4 11       		.uleb128 0x11
 12738 00c5 0D       		.uleb128 0xd
 12739 00c6 00       		.byte	0
 12740 00c7 03       		.uleb128 0x3
 12741 00c8 0E       		.uleb128 0xe
 12742 00c9 3A       		.uleb128 0x3a
 12743 00ca 0B       		.uleb128 0xb
 12744 00cb 3B       		.uleb128 0x3b
 12745 00cc 05       		.uleb128 0x5
 12746 00cd 49       		.uleb128 0x49
 12747 00ce 13       		.uleb128 0x13
 12748 00cf 38       		.uleb128 0x38
 12749 00d0 0B       		.uleb128 0xb
 12750 00d1 00       		.byte	0
 12751 00d2 00       		.byte	0
 12752 00d3 12       		.uleb128 0x12
 12753 00d4 0D       		.uleb128 0xd
 12754 00d5 00       		.byte	0
 12755 00d6 03       		.uleb128 0x3
 12756 00d7 08       		.uleb128 0x8
 12757 00d8 3A       		.uleb128 0x3a
 12758 00d9 0B       		.uleb128 0xb
 12759 00da 3B       		.uleb128 0x3b
 12760 00db 05       		.uleb128 0x5
 12761 00dc 49       		.uleb128 0x49
 12762 00dd 13       		.uleb128 0x13
 12763 00de 38       		.uleb128 0x38
 12764 00df 0B       		.uleb128 0xb
 12765 00e0 00       		.byte	0
 12766 00e1 00       		.byte	0
 12767 00e2 13       		.uleb128 0x13
 12768 00e3 13       		.uleb128 0x13
 12769 00e4 01       		.byte	0x1
 12770 00e5 03       		.uleb128 0x3
 12771 00e6 0E       		.uleb128 0xe
 12772 00e7 0B       		.uleb128 0xb
 12773 00e8 05       		.uleb128 0x5
 12774 00e9 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 275


 12775 00ea 0B       		.uleb128 0xb
 12776 00eb 3B       		.uleb128 0x3b
 12777 00ec 05       		.uleb128 0x5
 12778 00ed 01       		.uleb128 0x1
 12779 00ee 13       		.uleb128 0x13
 12780 00ef 00       		.byte	0
 12781 00f0 00       		.byte	0
 12782 00f1 14       		.uleb128 0x14
 12783 00f2 0D       		.uleb128 0xd
 12784 00f3 00       		.byte	0
 12785 00f4 03       		.uleb128 0x3
 12786 00f5 08       		.uleb128 0x8
 12787 00f6 3A       		.uleb128 0x3a
 12788 00f7 0B       		.uleb128 0xb
 12789 00f8 3B       		.uleb128 0x3b
 12790 00f9 05       		.uleb128 0x5
 12791 00fa 49       		.uleb128 0x49
 12792 00fb 13       		.uleb128 0x13
 12793 00fc 38       		.uleb128 0x38
 12794 00fd 05       		.uleb128 0x5
 12795 00fe 00       		.byte	0
 12796 00ff 00       		.byte	0
 12797 0100 15       		.uleb128 0x15
 12798 0101 0D       		.uleb128 0xd
 12799 0102 00       		.byte	0
 12800 0103 03       		.uleb128 0x3
 12801 0104 0E       		.uleb128 0xe
 12802 0105 3A       		.uleb128 0x3a
 12803 0106 0B       		.uleb128 0xb
 12804 0107 3B       		.uleb128 0x3b
 12805 0108 05       		.uleb128 0x5
 12806 0109 49       		.uleb128 0x49
 12807 010a 13       		.uleb128 0x13
 12808 010b 38       		.uleb128 0x38
 12809 010c 05       		.uleb128 0x5
 12810 010d 00       		.byte	0
 12811 010e 00       		.byte	0
 12812 010f 16       		.uleb128 0x16
 12813 0110 04       		.uleb128 0x4
 12814 0111 01       		.byte	0x1
 12815 0112 0B       		.uleb128 0xb
 12816 0113 0B       		.uleb128 0xb
 12817 0114 49       		.uleb128 0x49
 12818 0115 13       		.uleb128 0x13
 12819 0116 3A       		.uleb128 0x3a
 12820 0117 0B       		.uleb128 0xb
 12821 0118 3B       		.uleb128 0x3b
 12822 0119 05       		.uleb128 0x5
 12823 011a 01       		.uleb128 0x1
 12824 011b 13       		.uleb128 0x13
 12825 011c 00       		.byte	0
 12826 011d 00       		.byte	0
 12827 011e 17       		.uleb128 0x17
 12828 011f 2E       		.uleb128 0x2e
 12829 0120 00       		.byte	0
 12830 0121 3F       		.uleb128 0x3f
 12831 0122 19       		.uleb128 0x19
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 276


 12832 0123 03       		.uleb128 0x3
 12833 0124 0E       		.uleb128 0xe
 12834 0125 3A       		.uleb128 0x3a
 12835 0126 0B       		.uleb128 0xb
 12836 0127 3B       		.uleb128 0x3b
 12837 0128 0B       		.uleb128 0xb
 12838 0129 27       		.uleb128 0x27
 12839 012a 19       		.uleb128 0x19
 12840 012b 11       		.uleb128 0x11
 12841 012c 01       		.uleb128 0x1
 12842 012d 12       		.uleb128 0x12
 12843 012e 06       		.uleb128 0x6
 12844 012f 40       		.uleb128 0x40
 12845 0130 18       		.uleb128 0x18
 12846 0131 9742     		.uleb128 0x2117
 12847 0133 19       		.uleb128 0x19
 12848 0134 00       		.byte	0
 12849 0135 00       		.byte	0
 12850 0136 18       		.uleb128 0x18
 12851 0137 2E       		.uleb128 0x2e
 12852 0138 01       		.byte	0x1
 12853 0139 3F       		.uleb128 0x3f
 12854 013a 19       		.uleb128 0x19
 12855 013b 03       		.uleb128 0x3
 12856 013c 0E       		.uleb128 0xe
 12857 013d 3A       		.uleb128 0x3a
 12858 013e 0B       		.uleb128 0xb
 12859 013f 3B       		.uleb128 0x3b
 12860 0140 0B       		.uleb128 0xb
 12861 0141 11       		.uleb128 0x11
 12862 0142 01       		.uleb128 0x1
 12863 0143 12       		.uleb128 0x12
 12864 0144 06       		.uleb128 0x6
 12865 0145 40       		.uleb128 0x40
 12866 0146 18       		.uleb128 0x18
 12867 0147 9642     		.uleb128 0x2116
 12868 0149 19       		.uleb128 0x19
 12869 014a 01       		.uleb128 0x1
 12870 014b 13       		.uleb128 0x13
 12871 014c 00       		.byte	0
 12872 014d 00       		.byte	0
 12873 014e 19       		.uleb128 0x19
 12874 014f 34       		.uleb128 0x34
 12875 0150 00       		.byte	0
 12876 0151 03       		.uleb128 0x3
 12877 0152 0E       		.uleb128 0xe
 12878 0153 3A       		.uleb128 0x3a
 12879 0154 0B       		.uleb128 0xb
 12880 0155 3B       		.uleb128 0x3b
 12881 0156 0B       		.uleb128 0xb
 12882 0157 49       		.uleb128 0x49
 12883 0158 13       		.uleb128 0x13
 12884 0159 02       		.uleb128 0x2
 12885 015a 18       		.uleb128 0x18
 12886 015b 00       		.byte	0
 12887 015c 00       		.byte	0
 12888 015d 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 277


 12889 015e 2E       		.uleb128 0x2e
 12890 015f 01       		.byte	0x1
 12891 0160 3F       		.uleb128 0x3f
 12892 0161 19       		.uleb128 0x19
 12893 0162 03       		.uleb128 0x3
 12894 0163 0E       		.uleb128 0xe
 12895 0164 3A       		.uleb128 0x3a
 12896 0165 0B       		.uleb128 0xb
 12897 0166 3B       		.uleb128 0x3b
 12898 0167 05       		.uleb128 0x5
 12899 0168 27       		.uleb128 0x27
 12900 0169 19       		.uleb128 0x19
 12901 016a 11       		.uleb128 0x11
 12902 016b 01       		.uleb128 0x1
 12903 016c 12       		.uleb128 0x12
 12904 016d 06       		.uleb128 0x6
 12905 016e 40       		.uleb128 0x40
 12906 016f 18       		.uleb128 0x18
 12907 0170 9642     		.uleb128 0x2116
 12908 0172 19       		.uleb128 0x19
 12909 0173 01       		.uleb128 0x1
 12910 0174 13       		.uleb128 0x13
 12911 0175 00       		.byte	0
 12912 0176 00       		.byte	0
 12913 0177 1B       		.uleb128 0x1b
 12914 0178 34       		.uleb128 0x34
 12915 0179 00       		.byte	0
 12916 017a 03       		.uleb128 0x3
 12917 017b 0E       		.uleb128 0xe
 12918 017c 3A       		.uleb128 0x3a
 12919 017d 0B       		.uleb128 0xb
 12920 017e 3B       		.uleb128 0x3b
 12921 017f 05       		.uleb128 0x5
 12922 0180 49       		.uleb128 0x49
 12923 0181 13       		.uleb128 0x13
 12924 0182 02       		.uleb128 0x2
 12925 0183 18       		.uleb128 0x18
 12926 0184 00       		.byte	0
 12927 0185 00       		.byte	0
 12928 0186 1C       		.uleb128 0x1c
 12929 0187 0B       		.uleb128 0xb
 12930 0188 01       		.byte	0x1
 12931 0189 11       		.uleb128 0x11
 12932 018a 01       		.uleb128 0x1
 12933 018b 12       		.uleb128 0x12
 12934 018c 06       		.uleb128 0x6
 12935 018d 00       		.byte	0
 12936 018e 00       		.byte	0
 12937 018f 1D       		.uleb128 0x1d
 12938 0190 34       		.uleb128 0x34
 12939 0191 00       		.byte	0
 12940 0192 03       		.uleb128 0x3
 12941 0193 08       		.uleb128 0x8
 12942 0194 3A       		.uleb128 0x3a
 12943 0195 0B       		.uleb128 0xb
 12944 0196 3B       		.uleb128 0x3b
 12945 0197 05       		.uleb128 0x5
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 278


 12946 0198 49       		.uleb128 0x49
 12947 0199 13       		.uleb128 0x13
 12948 019a 02       		.uleb128 0x2
 12949 019b 18       		.uleb128 0x18
 12950 019c 00       		.byte	0
 12951 019d 00       		.byte	0
 12952 019e 1E       		.uleb128 0x1e
 12953 019f 21       		.uleb128 0x21
 12954 01a0 00       		.byte	0
 12955 01a1 49       		.uleb128 0x49
 12956 01a2 13       		.uleb128 0x13
 12957 01a3 2F       		.uleb128 0x2f
 12958 01a4 05       		.uleb128 0x5
 12959 01a5 00       		.byte	0
 12960 01a6 00       		.byte	0
 12961 01a7 1F       		.uleb128 0x1f
 12962 01a8 05       		.uleb128 0x5
 12963 01a9 00       		.byte	0
 12964 01aa 03       		.uleb128 0x3
 12965 01ab 0E       		.uleb128 0xe
 12966 01ac 3A       		.uleb128 0x3a
 12967 01ad 0B       		.uleb128 0xb
 12968 01ae 3B       		.uleb128 0x3b
 12969 01af 05       		.uleb128 0x5
 12970 01b0 49       		.uleb128 0x49
 12971 01b1 13       		.uleb128 0x13
 12972 01b2 02       		.uleb128 0x2
 12973 01b3 18       		.uleb128 0x18
 12974 01b4 00       		.byte	0
 12975 01b5 00       		.byte	0
 12976 01b6 20       		.uleb128 0x20
 12977 01b7 0B       		.uleb128 0xb
 12978 01b8 01       		.byte	0x1
 12979 01b9 55       		.uleb128 0x55
 12980 01ba 17       		.uleb128 0x17
 12981 01bb 00       		.byte	0
 12982 01bc 00       		.byte	0
 12983 01bd 21       		.uleb128 0x21
 12984 01be 2E       		.uleb128 0x2e
 12985 01bf 01       		.byte	0x1
 12986 01c0 3F       		.uleb128 0x3f
 12987 01c1 19       		.uleb128 0x19
 12988 01c2 03       		.uleb128 0x3
 12989 01c3 0E       		.uleb128 0xe
 12990 01c4 3A       		.uleb128 0x3a
 12991 01c5 0B       		.uleb128 0xb
 12992 01c6 3B       		.uleb128 0x3b
 12993 01c7 05       		.uleb128 0x5
 12994 01c8 27       		.uleb128 0x27
 12995 01c9 19       		.uleb128 0x19
 12996 01ca 11       		.uleb128 0x11
 12997 01cb 01       		.uleb128 0x1
 12998 01cc 12       		.uleb128 0x12
 12999 01cd 06       		.uleb128 0x6
 13000 01ce 40       		.uleb128 0x40
 13001 01cf 18       		.uleb128 0x18
 13002 01d0 9742     		.uleb128 0x2117
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 279


 13003 01d2 19       		.uleb128 0x19
 13004 01d3 01       		.uleb128 0x1
 13005 01d4 13       		.uleb128 0x13
 13006 01d5 00       		.byte	0
 13007 01d6 00       		.byte	0
 13008 01d7 22       		.uleb128 0x22
 13009 01d8 0B       		.uleb128 0xb
 13010 01d9 01       		.byte	0x1
 13011 01da 55       		.uleb128 0x55
 13012 01db 17       		.uleb128 0x17
 13013 01dc 01       		.uleb128 0x1
 13014 01dd 13       		.uleb128 0x13
 13015 01de 00       		.byte	0
 13016 01df 00       		.byte	0
 13017 01e0 23       		.uleb128 0x23
 13018 01e1 2E       		.uleb128 0x2e
 13019 01e2 01       		.byte	0x1
 13020 01e3 3F       		.uleb128 0x3f
 13021 01e4 19       		.uleb128 0x19
 13022 01e5 03       		.uleb128 0x3
 13023 01e6 0E       		.uleb128 0xe
 13024 01e7 3A       		.uleb128 0x3a
 13025 01e8 0B       		.uleb128 0xb
 13026 01e9 3B       		.uleb128 0x3b
 13027 01ea 05       		.uleb128 0x5
 13028 01eb 11       		.uleb128 0x11
 13029 01ec 01       		.uleb128 0x1
 13030 01ed 12       		.uleb128 0x12
 13031 01ee 06       		.uleb128 0x6
 13032 01ef 40       		.uleb128 0x40
 13033 01f0 18       		.uleb128 0x18
 13034 01f1 9642     		.uleb128 0x2116
 13035 01f3 19       		.uleb128 0x19
 13036 01f4 01       		.uleb128 0x1
 13037 01f5 13       		.uleb128 0x13
 13038 01f6 00       		.byte	0
 13039 01f7 00       		.byte	0
 13040 01f8 24       		.uleb128 0x24
 13041 01f9 05       		.uleb128 0x5
 13042 01fa 00       		.byte	0
 13043 01fb 03       		.uleb128 0x3
 13044 01fc 08       		.uleb128 0x8
 13045 01fd 3A       		.uleb128 0x3a
 13046 01fe 0B       		.uleb128 0xb
 13047 01ff 3B       		.uleb128 0x3b
 13048 0200 05       		.uleb128 0x5
 13049 0201 49       		.uleb128 0x49
 13050 0202 13       		.uleb128 0x13
 13051 0203 02       		.uleb128 0x2
 13052 0204 18       		.uleb128 0x18
 13053 0205 00       		.byte	0
 13054 0206 00       		.byte	0
 13055 0207 25       		.uleb128 0x25
 13056 0208 2E       		.uleb128 0x2e
 13057 0209 01       		.byte	0x1
 13058 020a 3F       		.uleb128 0x3f
 13059 020b 19       		.uleb128 0x19
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 280


 13060 020c 03       		.uleb128 0x3
 13061 020d 0E       		.uleb128 0xe
 13062 020e 3A       		.uleb128 0x3a
 13063 020f 0B       		.uleb128 0xb
 13064 0210 3B       		.uleb128 0x3b
 13065 0211 05       		.uleb128 0x5
 13066 0212 11       		.uleb128 0x11
 13067 0213 01       		.uleb128 0x1
 13068 0214 12       		.uleb128 0x12
 13069 0215 06       		.uleb128 0x6
 13070 0216 40       		.uleb128 0x40
 13071 0217 18       		.uleb128 0x18
 13072 0218 9742     		.uleb128 0x2117
 13073 021a 19       		.uleb128 0x19
 13074 021b 01       		.uleb128 0x1
 13075 021c 13       		.uleb128 0x13
 13076 021d 00       		.byte	0
 13077 021e 00       		.byte	0
 13078 021f 26       		.uleb128 0x26
 13079 0220 26       		.uleb128 0x26
 13080 0221 00       		.byte	0
 13081 0222 49       		.uleb128 0x49
 13082 0223 13       		.uleb128 0x13
 13083 0224 00       		.byte	0
 13084 0225 00       		.byte	0
 13085 0226 27       		.uleb128 0x27
 13086 0227 34       		.uleb128 0x34
 13087 0228 00       		.byte	0
 13088 0229 03       		.uleb128 0x3
 13089 022a 0E       		.uleb128 0xe
 13090 022b 3A       		.uleb128 0x3a
 13091 022c 0B       		.uleb128 0xb
 13092 022d 3B       		.uleb128 0x3b
 13093 022e 05       		.uleb128 0x5
 13094 022f 49       		.uleb128 0x49
 13095 0230 13       		.uleb128 0x13
 13096 0231 3F       		.uleb128 0x3f
 13097 0232 19       		.uleb128 0x19
 13098 0233 3C       		.uleb128 0x3c
 13099 0234 19       		.uleb128 0x19
 13100 0235 00       		.byte	0
 13101 0236 00       		.byte	0
 13102 0237 00       		.byte	0
 13103              		.section	.debug_aranges,"",%progbits
 13104 0000 84000000 		.4byte	0x84
 13105 0004 0200     		.2byte	0x2
 13106 0006 00000000 		.4byte	.Ldebug_info0
 13107 000a 04       		.byte	0x4
 13108 000b 00       		.byte	0
 13109 000c 0000     		.2byte	0
 13110 000e 0000     		.2byte	0
 13111 0010 00000000 		.4byte	.LFB64
 13112 0014 18000000 		.4byte	.LFE64-.LFB64
 13113 0018 00000000 		.4byte	.LFB65
 13114 001c 20000000 		.4byte	.LFE65-.LFB65
 13115 0020 00000000 		.4byte	.LFB66
 13116 0024 0C020000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 281


 13117 0028 00000000 		.4byte	.LFB67
 13118 002c 2C060000 		.4byte	.LFE67-.LFB67
 13119 0030 00000000 		.4byte	.LFB68
 13120 0034 C0050000 		.4byte	.LFE68-.LFB68
 13121 0038 00000000 		.4byte	.LFB69
 13122 003c 34030000 		.4byte	.LFE69-.LFB69
 13123 0040 00000000 		.4byte	.LFB70
 13124 0044 08070000 		.4byte	.LFE70-.LFB70
 13125 0048 00000000 		.4byte	.LFB71
 13126 004c 40080000 		.4byte	.LFE71-.LFB71
 13127 0050 00000000 		.4byte	.LFB72
 13128 0054 10080000 		.4byte	.LFE72-.LFB72
 13129 0058 00000000 		.4byte	.LFB73
 13130 005c 98110000 		.4byte	.LFE73-.LFB73
 13131 0060 00000000 		.4byte	.LFB74
 13132 0064 F4000000 		.4byte	.LFE74-.LFB74
 13133 0068 00000000 		.4byte	.LFB75
 13134 006c 78000000 		.4byte	.LFE75-.LFB75
 13135 0070 00000000 		.4byte	.LFB76
 13136 0074 08040000 		.4byte	.LFE76-.LFB76
 13137 0078 00000000 		.4byte	.LFB77
 13138 007c 08010000 		.4byte	.LFE77-.LFB77
 13139 0080 00000000 		.4byte	0
 13140 0084 00000000 		.4byte	0
 13141              		.section	.debug_ranges,"",%progbits
 13142              	.Ldebug_ranges0:
 13143 0000 68010000 		.4byte	.LBB3
 13144 0004 AA010000 		.4byte	.LBE3
 13145 0008 AC010000 		.4byte	.LBB4
 13146 000c F2010000 		.4byte	.LBE4
 13147 0010 00000000 		.4byte	0
 13148 0014 00000000 		.4byte	0
 13149 0018 3A000000 		.4byte	.LBB5
 13150 001c 40010000 		.4byte	.LBE5
 13151 0020 42010000 		.4byte	.LBB6
 13152 0024 BC010000 		.4byte	.LBE6
 13153 0028 00000000 		.4byte	0
 13154 002c 00000000 		.4byte	0
 13155 0030 BE010000 		.4byte	.LBB7
 13156 0034 20030000 		.4byte	.LBE7
 13157 0038 22030000 		.4byte	.LBB8
 13158 003c 24030000 		.4byte	.LBE8
 13159 0040 00000000 		.4byte	0
 13160 0044 00000000 		.4byte	0
 13161 0048 00000000 		.4byte	.LFB64
 13162 004c 18000000 		.4byte	.LFE64
 13163 0050 00000000 		.4byte	.LFB65
 13164 0054 20000000 		.4byte	.LFE65
 13165 0058 00000000 		.4byte	.LFB66
 13166 005c 0C020000 		.4byte	.LFE66
 13167 0060 00000000 		.4byte	.LFB67
 13168 0064 2C060000 		.4byte	.LFE67
 13169 0068 00000000 		.4byte	.LFB68
 13170 006c C0050000 		.4byte	.LFE68
 13171 0070 00000000 		.4byte	.LFB69
 13172 0074 34030000 		.4byte	.LFE69
 13173 0078 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 282


 13174 007c 08070000 		.4byte	.LFE70
 13175 0080 00000000 		.4byte	.LFB71
 13176 0084 40080000 		.4byte	.LFE71
 13177 0088 00000000 		.4byte	.LFB72
 13178 008c 10080000 		.4byte	.LFE72
 13179 0090 00000000 		.4byte	.LFB73
 13180 0094 98110000 		.4byte	.LFE73
 13181 0098 00000000 		.4byte	.LFB74
 13182 009c F4000000 		.4byte	.LFE74
 13183 00a0 00000000 		.4byte	.LFB75
 13184 00a4 78000000 		.4byte	.LFE75
 13185 00a8 00000000 		.4byte	.LFB76
 13186 00ac 08040000 		.4byte	.LFE76
 13187 00b0 00000000 		.4byte	.LFB77
 13188 00b4 08010000 		.4byte	.LFE77
 13189 00b8 00000000 		.4byte	0
 13190 00bc 00000000 		.4byte	0
 13191              		.section	.debug_line,"",%progbits
 13192              	.Ldebug_line0:
 13193 0000 130B0000 		.section	.debug_str,"MS",%progbits,1
 13193      0200AC01 
 13193      00000201 
 13193      FB0E0D00 
 13193      01010101 
 13194              	.LASF24:
 13195 0000 73697A65 		.ascii	"sizetype\000"
 13195      74797065 
 13195      00
 13196              	.LASF261:
 13197 0009 706F735F 		.ascii	"pos_cycle_status\000"
 13197      6379636C 
 13197      655F7374 
 13197      61747573 
 13197      00
 13198              	.LASF141:
 13199 001a 77726973 		.ascii	"wrist_direction_association\000"
 13199      745F6469 
 13199      72656374 
 13199      696F6E5F 
 13199      6173736F 
 13200              	.LASF30:
 13201 0036 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 13201      545F4D4F 
 13201      44455F45 
 13201      4D475F46 
 13201      4346535F 
 13202              	.LASF117:
 13203 004e 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 13203      5F414443 
 13203      5F73656E 
 13203      736F7273 
 13203      5F706F72 
 13204              	.LASF146:
 13205 0069 75736572 		.ascii	"user\000"
 13205      00
 13206              	.LASF10:
 13207 006e 696E7433 		.ascii	"int32_t\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 283


 13207      325F7400 
 13208              	.LASF294:
 13209 0076 675F7278 		.ascii	"g_rx\000"
 13209      00
 13210              	.LASF238:
 13211 007b 6F6E655F 		.ascii	"one_time_execute\000"
 13211      74696D65 
 13211      5F657865 
 13211      63757465 
 13211      00
 13212              	.LASF49:
 13213 008c 73745F64 		.ascii	"st_data\000"
 13213      61746100 
 13214              	.LASF13:
 13215 0094 75696E74 		.ascii	"uint32\000"
 13215      333200
 13216              	.LASF223:
 13217 009b 6E5F6C69 		.ascii	"n_line\000"
 13217      6E6500
 13218              	.LASF147:
 13219 00a2 4A4F595F 		.ascii	"JOY_spec\000"
 13219      73706563 
 13219      00
 13220              	.LASF85:
 13221 00ab 706F735F 		.ascii	"pos_lim_inf\000"
 13221      6C696D5F 
 13221      696E6600 
 13222              	.LASF317:
 13223 00b7 74656E73 		.ascii	"tension_valid\000"
 13223      696F6E5F 
 13223      76616C69 
 13223      6400
 13224              	.LASF201:
 13225 00c5 6572725F 		.ascii	"err_joy_1\000"
 13225      6A6F795F 
 13225      3100
 13226              	.LASF178:
 13227 00cf 73746174 		.ascii	"state\000"
 13227      6500
 13228              	.LASF319:
 13229 00d5 6379636C 		.ascii	"cycles_interrupt_flag\000"
 13229      65735F69 
 13229      6E746572 
 13229      72757074 
 13229      5F666C61 
 13230              	.LASF268:
 13231 00eb 62696E5F 		.ascii	"bin_max\000"
 13231      6D617800 
 13232              	.LASF282:
 13233 00f3 61646472 		.ascii	"addr_start_c\000"
 13233      5F737461 
 13233      72745F63 
 13233      00
 13234              	.LASF29:
 13235 0100 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 13235      545F4D4F 
 13235      44455F45 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 284


 13235      4D475F46 
 13235      43465300 
 13236              	.LASF89:
 13237 0114 63757272 		.ascii	"curr_lookup\000"
 13237      5F6C6F6F 
 13237      6B757000 
 13238              	.LASF208:
 13239 0120 70776D5F 		.ascii	"pwm_input\000"
 13239      696E7075 
 13239      7400
 13240              	.LASF57:
 13241 012a 72657374 		.ascii	"rest_counter\000"
 13241      5F636F75 
 13241      6E746572 
 13241      00
 13242              	.LASF131:
 13243 0137 73745F4D 		.ascii	"st_MASTER_spec\000"
 13243      41535445 
 13243      525F7370 
 13243      656300
 13244              	.LASF28:
 13245 0146 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 13245      545F4D4F 
 13245      44455F45 
 13245      4D475F49 
 13245      4E544547 
 13246              	.LASF254:
 13247 015e 765F636F 		.ascii	"v_count\000"
 13247      756E7400 
 13248              	.LASF183:
 13249 0166 72785F64 		.ascii	"rx_data\000"
 13249      61746100 
 13250              	.LASF243:
 13251 016e 7676765F 		.ascii	"vvv_value\000"
 13251      76616C75 
 13251      6500
 13252              	.LASF14:
 13253 0178 696E7438 		.ascii	"int8\000"
 13253      00
 13254              	.LASF188:
 13255 017d 696E666F 		.ascii	"info_\000"
 13255      5F00
 13256              	.LASF302:
 13257 0183 66696C74 		.ascii	"filt_emg\000"
 13257      5F656D67 
 13257      00
 13258              	.LASF104:
 13259 018c 73745F65 		.ascii	"st_emg\000"
 13259      6D6700
 13260              	.LASF55:
 13261 0193 706F7369 		.ascii	"position_hist\000"
 13261      74696F6E 
 13261      5F686973 
 13261      7400
 13262              	.LASF170:
 13263 01a1 50524550 		.ascii	"PREPARE_DATA\000"
 13263      4152455F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 285


 13263      44415441 
 13263      00
 13264              	.LASF154:
 13265 01ae 74656D70 		.ascii	"temp_value\000"
 13265      5F76616C 
 13265      756500
 13266              	.LASF265:
 13267 01b9 7468725F 		.ascii	"thr_pos\000"
 13267      706F7300 
 13268              	.LASF138:
 13269 01c1 73745F57 		.ascii	"st_WR_spec\000"
 13269      525F7370 
 13269      656300
 13270              	.LASF203:
 13271 01cc 6572725F 		.ascii	"err_joy_2\000"
 13271      6A6F795F 
 13271      3200
 13272              	.LASF52:
 13273 01d6 72656164 		.ascii	"ready\000"
 13273      7900
 13274              	.LASF101:
 13275 01dc 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 13275      6964785F 
 13275      7573655F 
 13275      666F725F 
 13275      636F6E74 
 13276              	.LASF157:
 13277 01f4 6761696E 		.ascii	"gain\000"
 13277      00
 13278              	.LASF61:
 13279 01f9 73745F64 		.ascii	"st_device\000"
 13279      65766963 
 13279      6500
 13280              	.LASF27:
 13281 0203 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 13281      545F4D4F 
 13281      44455F45 
 13281      4D475F50 
 13281      524F504F 
 13282              	.LASF66:
 13283 021f 7573655F 		.ascii	"use_2nd_motor_flag\000"
 13283      326E645F 
 13283      6D6F746F 
 13283      725F666C 
 13283      616700
 13284              	.LASF248:
 13285 0232 55445F63 		.ascii	"UD_counter\000"
 13285      6F756E74 
 13285      657200
 13286              	.LASF166:
 13287 023d 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 13287      414E445F 
 13287      4D45414E 
 13287      00
 13288              	.LASF111:
 13289 024a 72656164 		.ascii	"read_imu_flag\000"
 13289      5F696D75 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 286


 13289      5F666C61 
 13289      6700
 13290              	.LASF252:
 13291 0258 66697273 		.ascii	"first_tension_valid\000"
 13291      745F7465 
 13291      6E73696F 
 13291      6E5F7661 
 13291      6C696400 
 13292              	.LASF303:
 13293 026c 74696D65 		.ascii	"timer_value\000"
 13293      725F7661 
 13293      6C756500 
 13294              	.LASF4:
 13295 0278 6C6F6E67 		.ascii	"long int\000"
 13295      20696E74 
 13295      00
 13296              	.LASF144:
 13297 0281 756E7573 		.ascii	"unused_bytes1\000"
 13297      65645F62 
 13297      79746573 
 13297      3100
 13298              	.LASF193:
 13299 028f 6D6F746F 		.ascii	"motor_idx\000"
 13299      725F6964 
 13299      7800
 13300              	.LASF213:
 13301 0299 53485F45 		.ascii	"SH_ENC_L\000"
 13301      4E435F4C 
 13301      00
 13302              	.LASF65:
 13303 02a2 72657365 		.ascii	"reset_counters\000"
 13303      745F636F 
 13303      756E7465 
 13303      727300
 13304              	.LASF264:
 13305 02b1 62696E5F 		.ascii	"bin_threshold\000"
 13305      74687265 
 13305      73686F6C 
 13305      6400
 13306              	.LASF121:
 13307 02bf 75736572 		.ascii	"user_emg\000"
 13307      5F656D67 
 13307      00
 13308              	.LASF237:
 13309 02c8 73616665 		.ascii	"safe_startup_motor_activation\000"
 13309      5F737461 
 13309      72747570 
 13309      5F6D6F74 
 13309      6F725F61 
 13310              	.LASF70:
 13311 02e6 756E7573 		.ascii	"unused_bytes\000"
 13311      65645F62 
 13311      79746573 
 13311      00
 13312              	.LASF150:
 13313 02f3 61636365 		.ascii	"accel_value\000"
 13313      6C5F7661 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 287


 13313      6C756500 
 13314              	.LASF293:
 13315 02ff 675F6164 		.ascii	"g_adc_measOld\000"
 13315      635F6D65 
 13315      61734F6C 
 13315      6400
 13316              	.LASF226:
 13317 030d 6175785F 		.ascii	"aux_encoder\000"
 13317      656E636F 
 13317      64657200 
 13318              	.LASF53:
 13319 0319 73745F63 		.ascii	"st_counters\000"
 13319      6F756E74 
 13319      65727300 
 13320              	.LASF212:
 13321 0325 53485F4D 		.ascii	"SH_MOT\000"
 13321      4F5400
 13322              	.LASF17:
 13323 032c 666C6F61 		.ascii	"float32\000"
 13323      74333200 
 13324              	.LASF222:
 13325 0334 656E636F 		.ascii	"encoder_reading_SPI\000"
 13325      6465725F 
 13325      72656164 
 13325      696E675F 
 13325      53504900 
 13326              	.LASF235:
 13327 0348 6572726F 		.ascii	"error\000"
 13327      7200
 13328              	.LASF54:
 13329 034e 656D675F 		.ascii	"emg_counter\000"
 13329      636F756E 
 13329      74657200 
 13330              	.LASF173:
 13331 035a 57524954 		.ascii	"WRITE_END\000"
 13331      455F454E 
 13331      4400
 13332              	.LASF249:
 13333 0364 4C525F63 		.ascii	"LR_counter\000"
 13333      6F756E74 
 13333      657200
 13334              	.LASF240:
 13335 036f 706F735F 		.ascii	"pos_reconstruct\000"
 13335      7265636F 
 13335      6E737472 
 13335      75637400 
 13336              	.LASF256:
 13337 037f 70776D5F 		.ascii	"pwm_limit_search\000"
 13337      6C696D69 
 13337      745F7365 
 13337      61726368 
 13337      00
 13338              	.LASF0:
 13339 0390 7369676E 		.ascii	"signed char\000"
 13339      65642063 
 13339      68617200 
 13340              	.LASF120:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 288


 13341 039c 75736572 		.ascii	"user_code_string\000"
 13341      5F636F64 
 13341      655F7374 
 13341      72696E67 
 13341      00
 13342              	.LASF158:
 13343 03ad 73745F63 		.ascii	"st_calib\000"
 13343      616C6962 
 13343      00
 13344              	.LASF197:
 13345 03b6 6572725F 		.ascii	"err_emg_1\000"
 13345      656D675F 
 13345      3100
 13346              	.LASF198:
 13347 03c0 6572725F 		.ascii	"err_emg_2\000"
 13347      656D675F 
 13347      3200
 13348              	.LASF109:
 13349 03ca 73776974 		.ascii	"switch_emg\000"
 13349      63685F65 
 13349      6D6700
 13350              	.LASF313:
 13351 03d5 656D675F 		.ascii	"emg_2_status\000"
 13351      325F7374 
 13351      61747573 
 13351      00
 13352              	.LASF325:
 13353 03e2 4144435F 		.ascii	"ADC_buf\000"
 13353      62756600 
 13354              	.LASF318:
 13355 03ea 696E7465 		.ascii	"interrupt_flag\000"
 13355      72727570 
 13355      745F666C 
 13355      616700
 13356              	.LASF274:
 13357 03f9 73746570 		.ascii	"step\000"
 13357      00
 13358              	.LASF215:
 13359 03fe 63757272 		.ascii	"curr_error_sum\000"
 13359      5F657272 
 13359      6F725F73 
 13359      756D00
 13360              	.LASF1:
 13361 040d 756E7369 		.ascii	"unsigned char\000"
 13361      676E6564 
 13361      20636861 
 13361      7200
 13362              	.LASF95:
 13363 041b 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 13363      72657665 
 13363      72735F6D 
 13363      6F746F72 
 13363      5F666C61 
 13364              	.LASF280:
 13365 0431 726F775F 		.ascii	"row_start\000"
 13365      73746172 
 13365      7400
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 289


 13366              	.LASF322:
 13367 043b 666F7263 		.ascii	"forced_open\000"
 13367      65645F6F 
 13367      70656E00 
 13368              	.LASF230:
 13369 0447 73706565 		.ascii	"speed_encoder\000"
 13369      645F656E 
 13369      636F6465 
 13369      7200
 13370              	.LASF288:
 13371 0455 675F7265 		.ascii	"g_refNew\000"
 13371      664E6577 
 13371      00
 13372              	.LASF272:
 13373 045e 63757272 		.ascii	"curr_off\000"
 13373      5F6F6666 
 13373      00
 13374              	.LASF64:
 13375 0467 72696768 		.ascii	"right_left\000"
 13375      745F6C65 
 13375      667400
 13376              	.LASF93:
 13377 0472 656E636F 		.ascii	"encoder_line\000"
 13377      6465725F 
 13377      6C696E65 
 13377      00
 13378              	.LASF312:
 13379 047f 656D675F 		.ascii	"emg_1_status\000"
 13379      315F7374 
 13379      61747573 
 13379      00
 13380              	.LASF149:
 13381 048c 666C6167 		.ascii	"flags\000"
 13381      7300
 13382              	.LASF196:
 13383 0492 68616E64 		.ascii	"handle_value\000"
 13383      6C655F76 
 13383      616C7565 
 13383      00
 13384              	.LASF20:
 13385 049f 63686172 		.ascii	"char\000"
 13385      00
 13386              	.LASF88:
 13387 04a4 6D61785F 		.ascii	"max_step_pos\000"
 13387      73746570 
 13387      5F706F73 
 13387      00
 13388              	.LASF327:
 13389 04b1 70776D5F 		.ascii	"pwm_sign\000"
 13389      7369676E 
 13389      00
 13390              	.LASF221:
 13391 04ba 6D6F746F 		.ascii	"motor_control_generic\000"
 13391      725F636F 
 13391      6E74726F 
 13391      6C5F6765 
 13391      6E657269 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 290


 13392              	.LASF334:
 13393 04d0 675F696D 		.ascii	"g_imu\000"
 13393      7500
 13394              	.LASF301:
 13395 04d6 66696C74 		.ascii	"filt_vel\000"
 13395      5F76656C 
 13395      00
 13396              	.LASF94:
 13397 04df 70776D5F 		.ascii	"pwm_rate_limiter\000"
 13397      72617465 
 13397      5F6C696D 
 13397      69746572 
 13397      00
 13398              	.LASF74:
 13399 04f0 6B5F645F 		.ascii	"k_d_c\000"
 13399      6300
 13400              	.LASF169:
 13401 04f6 6164635F 		.ascii	"adc_status\000"
 13401      73746174 
 13401      757300
 13402              	.LASF99:
 13403 0501 6D5F6D75 		.ascii	"m_mult\000"
 13403      6C7400
 13404              	.LASF73:
 13405 0508 6B5F695F 		.ascii	"k_i_c\000"
 13405      6300
 13406              	.LASF219:
 13407 050e 6D6F746F 		.ascii	"motor_dir\000"
 13407      725F6469 
 13407      7200
 13408              	.LASF267:
 13409 0518 62696E5F 		.ascii	"bin_st\000"
 13409      737400
 13410              	.LASF176:
 13411 051f 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 13411      52533438 
 13411      355F5258 
 13411      5F457849 
 13411      6E746572 
 13412              	.LASF86:
 13413 0538 706F735F 		.ascii	"pos_lim_sup\000"
 13413      6C696D5F 
 13413      73757000 
 13414              	.LASF156:
 13415 0544 6F6C645F 		.ascii	"old_value\000"
 13415      76616C75 
 13415      6500
 13416              	.LASF107:
 13417 054e 656D675F 		.ascii	"emg_speed\000"
 13417      73706565 
 13417      6400
 13418              	.LASF125:
 13419 0558 72657374 		.ascii	"rest_vel\000"
 13419      5F76656C 
 13419      00
 13420              	.LASF163:
 13421 0561 4E4F524D 		.ascii	"NORMAL\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 291


 13421      414C00
 13422              	.LASF207:
 13423 0568 6D6F746F 		.ascii	"motor_control_SH\000"
 13423      725F636F 
 13423      6E74726F 
 13423      6C5F5348 
 13423      00
 13424              	.LASF333:
 13425 0579 7046696C 		.ascii	"pFile\000"
 13425      6500
 13426              	.LASF214:
 13427 057f 706F735F 		.ascii	"pos_error_sum\000"
 13427      6572726F 
 13427      725F7375 
 13427      6D00
 13428              	.LASF118:
 13429 058d 4144435F 		.ascii	"ADC_conf\000"
 13429      636F6E66 
 13429      00
 13430              	.LASF309:
 13431 0596 6465765F 		.ascii	"dev_tension_f\000"
 13431      74656E73 
 13431      696F6E5F 
 13431      6600
 13432              	.LASF76:
 13433 05a4 6B5F695F 		.ascii	"k_i_dl\000"
 13433      646C00
 13434              	.LASF50:
 13435 05ab 62756666 		.ascii	"buffer\000"
 13435      657200
 13436              	.LASF78:
 13437 05b2 6B5F705F 		.ascii	"k_p_c_dl\000"
 13437      635F646C 
 13437      00
 13438              	.LASF184:
 13439 05bb 72785F64 		.ascii	"rx_data_type\000"
 13439      6174615F 
 13439      74797065 
 13439      00
 13440              	.LASF335:
 13441 05c8 675F696D 		.ascii	"g_imuNew\000"
 13441      754E6577 
 13441      00
 13442              	.LASF161:
 13443 05d1 73706565 		.ascii	"speed\000"
 13443      6400
 13444              	.LASF220:
 13445 05d7 706F7369 		.ascii	"position_counter\000"
 13445      74696F6E 
 13445      5F636F75 
 13445      6E746572 
 13445      00
 13446              	.LASF276:
 13447 05e8 74696D65 		.ascii	"timer_value_e\000"
 13447      725F7661 
 13447      6C75655F 
 13447      6500
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 292


 13448              	.LASF179:
 13449 05f6 64617461 		.ascii	"data_packet_index\000"
 13449      5F706163 
 13449      6B65745F 
 13449      696E6465 
 13449      7800
 13450              	.LASF181:
 13451 0608 64617461 		.ascii	"data_packet_buffer\000"
 13451      5F706163 
 13451      6B65745F 
 13451      62756666 
 13451      657200
 13452              	.LASF194:
 13453 061b 73745F72 		.ascii	"st_ref_p\000"
 13453      65665F70 
 13453      00
 13454              	.LASF311:
 13455 0624 6379636C 		.ascii	"cycles_status\000"
 13455      65735F73 
 13455      74617475 
 13455      7300
 13456              	.LASF186:
 13457 0632 636F756E 		.ascii	"counter_calibration\000"
 13457      7465725F 
 13457      63616C69 
 13457      62726174 
 13457      696F6E00 
 13458              	.LASF290:
 13459 0646 675F6D65 		.ascii	"g_meas\000"
 13459      617300
 13460              	.LASF275:
 13461 064d 74696D65 		.ascii	"timer_value_s\000"
 13461      725F7661 
 13461      6C75655F 
 13461      7300
 13462              	.LASF331:
 13463 065b 456E636F 		.ascii	"Encoder_Check\000"
 13463      6465725F 
 13463      43686563 
 13463      6B00
 13464              	.LASF234:
 13465 0669 636F6D70 		.ascii	"comp_value_encoder\000"
 13465      5F76616C 
 13465      75655F65 
 13465      6E636F64 
 13465      657200
 13466              	.LASF328:
 13467 067c 64617461 		.ascii	"data_encoder_raw\000"
 13467      5F656E63 
 13467      6F646572 
 13467      5F726177 
 13467      00
 13468              	.LASF287:
 13469 068d 675F7265 		.ascii	"g_ref\000"
 13469      6600
 13470              	.LASF25:
 13471 0693 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 293


 13471      545F4D4F 
 13471      44455F45 
 13471      58544552 
 13471      4E414C00 
 13472              	.LASF225:
 13473 06a7 696E6465 		.ascii	"index\000"
 13473      7800
 13474              	.LASF136:
 13475 06ad 6D617869 		.ascii	"maximum_pressure_kPa\000"
 13475      6D756D5F 
 13475      70726573 
 13475      73757265 
 13475      5F6B5061 
 13476              	.LASF126:
 13477 06c2 72657374 		.ascii	"rest_position_flag\000"
 13477      5F706F73 
 13477      6974696F 
 13477      6E5F666C 
 13477      616700
 13478              	.LASF128:
 13479 06d5 6A6F7973 		.ascii	"joystick_closure_speed\000"
 13479      7469636B 
 13479      5F636C6F 
 13479      73757265 
 13479      5F737065 
 13480              	.LASF79:
 13481 06ec 6B5F695F 		.ascii	"k_i_c_dl\000"
 13481      635F646C 
 13481      00
 13482              	.LASF185:
 13483 06f5 7061636B 		.ascii	"package_count\000"
 13483      6167655F 
 13483      636F756E 
 13483      7400
 13484              	.LASF38:
 13485 0703 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 13485      5F414E44 
 13485      5F504F53 
 13485      5F434F4E 
 13485      54524F4C 
 13486              	.LASF159:
 13487 0718 656E6162 		.ascii	"enabled\000"
 13487      6C656400 
 13488              	.LASF5:
 13489 0720 6C6F6E67 		.ascii	"long unsigned int\000"
 13489      20756E73 
 13489      69676E65 
 13489      6420696E 
 13489      7400
 13490              	.LASF59:
 13491 0732 746F7461 		.ascii	"total_time_on\000"
 13491      6C5F7469 
 13491      6D655F6F 
 13491      6E00
 13492              	.LASF171:
 13493 0740 57524954 		.ascii	"WRITE_CYCLES\000"
 13493      455F4359 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 294


 13493      434C4553 
 13493      00
 13494              	.LASF130:
 13495 074d 6A6F7973 		.ascii	"joystick_gains\000"
 13495      7469636B 
 13495      5F676169 
 13495      6E7300
 13496              	.LASF45:
 13497 075c 686F6C64 		.ascii	"hold_curr\000"
 13497      5F637572 
 13497      7200
 13498              	.LASF31:
 13499 0766 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 13499      545F4D4F 
 13499      44455F4A 
 13499      4F595354 
 13499      49434B00 
 13500              	.LASF60:
 13501 077a 746F7461 		.ascii	"total_time_rest\000"
 13501      6C5F7469 
 13501      6D655F72 
 13501      65737400 
 13502              	.LASF81:
 13503 078a 61637469 		.ascii	"activ\000"
 13503      7600
 13504              	.LASF259:
 13505 0790 6D696E5F 		.ascii	"min_tension\000"
 13505      74656E73 
 13505      696F6E00 
 13506              	.LASF323:
 13507 079c 62617474 		.ascii	"battery_low_SoC\000"
 13507      6572795F 
 13507      6C6F775F 
 13507      536F4300 
 13508              	.LASF98:
 13509 07ac 6D5F6F66 		.ascii	"m_off\000"
 13509      6600
 13510              	.LASF316:
 13511 07b2 72657365 		.ascii	"reset_last_value_flag\000"
 13511      745F6C61 
 13511      73745F76 
 13511      616C7565 
 13511      5F666C61 
 13512              	.LASF153:
 13513 07c8 71756174 		.ascii	"quat_value\000"
 13513      5F76616C 
 13513      756500
 13514              	.LASF123:
 13515 07d3 72657374 		.ascii	"rest_pos\000"
 13515      5F706F73 
 13515      00
 13516              	.LASF40:
 13517 07dc 63757272 		.ascii	"curr\000"
 13517      00
 13518              	.LASF172:
 13519 07e1 57414954 		.ascii	"WAIT_QUERY\000"
 13519      5F515545 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 295


 13519      525900
 13520              	.LASF91:
 13521 07ec 696E7075 		.ascii	"input_mode\000"
 13521      745F6D6F 
 13521      646500
 13522              	.LASF36:
 13523 07f7 434F4E54 		.ascii	"CONTROL_PWM\000"
 13523      524F4C5F 
 13523      50574D00 
 13524              	.LASF260:
 13525 0803 6379636C 		.ascii	"cycles_counter_update\000"
 13525      65735F63 
 13525      6F756E74 
 13525      65725F75 
 13525      70646174 
 13526              	.LASF337:
 13527 0819 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 13527      43313120 
 13527      352E342E 
 13527      31203230 
 13527      31363036 
 13528 084c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 13528      20726576 
 13528      6973696F 
 13528      6E203233 
 13528      37373135 
 13529 087f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 13529      66756E63 
 13529      74696F6E 
 13529      2D736563 
 13529      74696F6E 
 13530              	.LASF42:
 13531 08a7 73745F72 		.ascii	"st_ref\000"
 13531      656600
 13532              	.LASF304:
 13533 08ae 74696D65 		.ascii	"timer_value0\000"
 13533      725F7661 
 13533      6C756530 
 13533      00
 13534              	.LASF122:
 13535 08bb 73745F53 		.ascii	"st_SH_spec\000"
 13535      485F7370 
 13535      656300
 13536              	.LASF241:
 13537 08c6 765F7661 		.ascii	"v_value\000"
 13537      6C756500 
 13538              	.LASF297:
 13539 08ce 63616C69 		.ascii	"calib\000"
 13539      6200
 13540              	.LASF134:
 13541 08d4 73745F46 		.ascii	"st_FB_spec\000"
 13541      425F7370 
 13541      656300
 13542              	.LASF6:
 13543 08df 6C6F6E67 		.ascii	"long long int\000"
 13543      206C6F6E 
 13543      6720696E 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 296


 13543      7400
 13544              	.LASF34:
 13545 08ed 53485F63 		.ascii	"SH_control_mode\000"
 13545      6F6E7472 
 13545      6F6C5F6D 
 13545      6F646500 
 13546              	.LASF190:
 13547 08fd 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 13547      4E445F4D 
 13547      4F544F52 
 13547      5F494458 
 13547      00
 13548              	.LASF324:
 13549 090e 6368616E 		.ascii	"change_ext_ref_flag\000"
 13549      67655F65 
 13549      78745F72 
 13549      65665F66 
 13549      6C616700 
 13550              	.LASF19:
 13551 0922 646F7562 		.ascii	"double\000"
 13551      6C6500
 13552              	.LASF299:
 13553 0929 66696C74 		.ascii	"filt_curr_diff\000"
 13553      5F637572 
 13553      725F6469 
 13553      666600
 13554              	.LASF205:
 13555 0938 706F735F 		.ascii	"pos_sum\000"
 13555      73756D00 
 13556              	.LASF206:
 13557 0940 696E7465 		.ascii	"interrupt_manager\000"
 13557      72727570 
 13557      745F6D61 
 13557      6E616765 
 13557      7200
 13558              	.LASF97:
 13559 0952 456E635F 		.ascii	"Enc_raw_read_conf\000"
 13559      7261775F 
 13559      72656164 
 13559      5F636F6E 
 13559      6600
 13560              	.LASF162:
 13561 0964 72657065 		.ascii	"repetitions\000"
 13561      74697469 
 13561      6F6E7300 
 13562              	.LASF87:
 13563 0970 6D61785F 		.ascii	"max_step_neg\000"
 13563      73746570 
 13563      5F6E6567 
 13563      00
 13564              	.LASF239:
 13565 097d 636F756E 		.ascii	"count_startup_motor\000"
 13565      745F7374 
 13565      61727475 
 13565      705F6D6F 
 13565      746F7200 
 13566              	.LASF133:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 297


 13567 0991 736C6176 		.ascii	"slave_ID\000"
 13567      655F4944 
 13567      00
 13568              	.LASF167:
 13569 099a 57414954 		.ascii	"WAIT\000"
 13569      00
 13570              	.LASF18:
 13571 099f 666C6F61 		.ascii	"float\000"
 13571      7400
 13572              	.LASF113:
 13573 09a5 494D555F 		.ascii	"IMU_conf\000"
 13573      636F6E66 
 13573      00
 13574              	.LASF253:
 13575 09ae 636F756E 		.ascii	"count\000"
 13575      7400
 13576              	.LASF46:
 13577 09b4 73745F61 		.ascii	"st_adc_meas\000"
 13577      64635F6D 
 13577      65617300 
 13578              	.LASF284:
 13579 09c0 6D5F6164 		.ascii	"m_addr\000"
 13579      647200
 13580              	.LASF296:
 13581 09c7 635F6D65 		.ascii	"c_mem\000"
 13581      6D00
 13582              	.LASF8:
 13583 09cd 756E7369 		.ascii	"unsigned int\000"
 13583      676E6564 
 13583      20696E74 
 13583      00
 13584              	.LASF266:
 13585 09da 6D61785F 		.ascii	"max_pos\000"
 13585      706F7300 
 13586              	.LASF332:
 13587 09e2 72657374 		.ascii	"rest_pos_curr_ref\000"
 13587      5F706F73 
 13587      5F637572 
 13587      725F7265 
 13587      6600
 13588              	.LASF143:
 13589 09f4 666C6167 		.ascii	"flag\000"
 13589      00
 13590              	.LASF92:
 13591 09f9 636F6E74 		.ascii	"control_mode\000"
 13591      726F6C5F 
 13591      6D6F6465 
 13591      00
 13592              	.LASF21:
 13593 0a06 63797374 		.ascii	"cystatus\000"
 13593      61747573 
 13593      00
 13594              	.LASF26:
 13595 0a0f 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 13595      545F4D4F 
 13595      44455F45 
 13595      4E434F44 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 298


 13595      45523300 
 13596              	.LASF110:
 13597 0a23 73745F69 		.ascii	"st_imu\000"
 13597      6D7500
 13598              	.LASF200:
 13599 0a2a 63757272 		.ascii	"current_emg\000"
 13599      656E745F 
 13599      656D6700 
 13600              	.LASF182:
 13601 0a36 72785F71 		.ascii	"rx_queue\000"
 13601      75657565 
 13601      00
 13602              	.LASF250:
 13603 0a3f 55445F6D 		.ascii	"UD_mean_value\000"
 13603      65616E5F 
 13603      76616C75 
 13603      6500
 13604              	.LASF224:
 13605 0a4d 6173736F 		.ascii	"assoc_motor\000"
 13605      635F6D6F 
 13605      746F7200 
 13606              	.LASF47:
 13607 0a59 6164645F 		.ascii	"add_emg\000"
 13607      656D6700 
 13608              	.LASF211:
 13609 0a61 695F7265 		.ascii	"i_ref\000"
 13609      6600
 13610              	.LASF105:
 13611 0a67 656D675F 		.ascii	"emg_threshold\000"
 13611      74687265 
 13611      73686F6C 
 13611      6400
 13612              	.LASF277:
 13613 0a75 73617665 		.ascii	"save_cycles_eeprom\000"
 13613      5F637963 
 13613      6C65735F 
 13613      65657072 
 13613      6F6D00
 13614              	.LASF56:
 13615 0a88 63757272 		.ascii	"current_hist\000"
 13615      656E745F 
 13615      68697374 
 13615      00
 13616              	.LASF37:
 13617 0a95 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 13617      524F4C5F 
 13617      43555252 
 13617      454E5400 
 13618              	.LASF23:
 13619 0aa5 6C6F6E67 		.ascii	"long double\000"
 13619      20646F75 
 13619      626C6500 
 13620              	.LASF165:
 13621 0ab1 44495343 		.ascii	"DISCARD\000"
 13621      41524400 
 13622              	.LASF216:
 13623 0ab9 70726576 		.ascii	"prev_pos_err\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 299


 13623      5F706F73 
 13623      5F657272 
 13623      00
 13624              	.LASF232:
 13625 0ac6 696E6974 		.ascii	"init_rot\000"
 13625      5F726F74 
 13625      00
 13626              	.LASF257:
 13627 0acf 6D6F745F 		.ascii	"mot_idx\000"
 13627      69647800 
 13628              	.LASF300:
 13629 0ad7 66696C74 		.ascii	"filt_i\000"
 13629      5F6900
 13630              	.LASF102:
 13631 0ade 6D6F746F 		.ascii	"motor_handle_ratio\000"
 13631      725F6861 
 13631      6E646C65 
 13631      5F726174 
 13631      696F00
 13632              	.LASF298:
 13633 0af1 66696C74 		.ascii	"filt_v\000"
 13633      5F7600
 13634              	.LASF321:
 13635 0af8 72657374 		.ascii	"rest_enabled\000"
 13635      5F656E61 
 13635      626C6564 
 13635      00
 13636              	.LASF289:
 13637 0b05 675F7265 		.ascii	"g_refOld\000"
 13637      664F6C64 
 13637      00
 13638              	.LASF209:
 13639 0b0e 706F735F 		.ascii	"pos_error\000"
 13639      6572726F 
 13639      7200
 13640              	.LASF151:
 13641 0b18 6779726F 		.ascii	"gyro_value\000"
 13641      5F76616C 
 13641      756500
 13642              	.LASF115:
 13643 0b23 63757272 		.ascii	"curr_time\000"
 13643      5F74696D 
 13643      6500
 13644              	.LASF100:
 13645 0b2d 646F7562 		.ascii	"double_encoder_on_off\000"
 13645      6C655F65 
 13645      6E636F64 
 13645      65725F6F 
 13645      6E5F6F66 
 13646              	.LASF258:
 13647 0b43 6D61785F 		.ascii	"max_tension\000"
 13647      74656E73 
 13647      696F6E00 
 13648              	.LASF189:
 13649 0b4f 4D4F544F 		.ascii	"MOTOR_IDX\000"
 13649      525F4944 
 13649      5800
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 300


 13650              	.LASF233:
 13651 0b59 6C617374 		.ascii	"last_value_encoder\000"
 13651      5F76616C 
 13651      75655F65 
 13651      6E636F64 
 13651      657200
 13652              	.LASF187:
 13653 0b6c 636F756E 		.ascii	"counter_tension_func\000"
 13653      7465725F 
 13653      74656E73 
 13653      696F6E5F 
 13653      66756E63 
 13654              	.LASF305:
 13655 0b81 6379636C 		.ascii	"cycle_time\000"
 13655      655F7469 
 13655      6D6500
 13656              	.LASF339:
 13657 0b8c 433A5C55 		.ascii	"C:\\Users\\Mattia\\Documents\\GITHUB\\SoftHandPRO-a"
 13657      73657273 
 13657      5C4D6174 
 13657      7469615C 
 13657      446F6375 
 13658 0bba 6E642D47 		.ascii	"nd-Generic-FW-PSoC5\\Ottobock_Active_Wrist.cydsn\000"
 13658      656E6572 
 13658      69632D46 
 13658      572D5053 
 13658      6F43355C 
 13659              	.LASF7:
 13660 0bea 6C6F6E67 		.ascii	"long long unsigned int\000"
 13660      206C6F6E 
 13660      6720756E 
 13660      7369676E 
 13660      65642069 
 13661              	.LASF314:
 13662 0c01 6A6F795F 		.ascii	"joy_UD_status\000"
 13662      55445F73 
 13662      74617475 
 13662      7300
 13663              	.LASF51:
 13664 0c0f 6C656E67 		.ascii	"length\000"
 13664      746800
 13665              	.LASF148:
 13666 0c16 73745F69 		.ascii	"st_imu_data\000"
 13666      6D755F64 
 13666      61746100 
 13667              	.LASF152:
 13668 0c22 6D61675F 		.ascii	"mag_value\000"
 13668      76616C75 
 13668      6500
 13669              	.LASF41:
 13670 0c2c 6F6E6F66 		.ascii	"onoff\000"
 13670      6600
 13671              	.LASF228:
 13672 0c32 746D705F 		.ascii	"tmp_value_encoder_32\000"
 13672      76616C75 
 13672      655F656E 
 13672      636F6465 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 301


 13672      725F3332 
 13673              	.LASF217:
 13674 0c47 70726576 		.ascii	"prev_curr_err\000"
 13674      5F637572 
 13674      725F6572 
 13674      7200
 13675              	.LASF180:
 13676 0c55 64617461 		.ascii	"data_packet_length\000"
 13676      5F706163 
 13676      6B65745F 
 13676      6C656E67 
 13676      746800
 13677              	.LASF72:
 13678 0c68 6B5F705F 		.ascii	"k_p_c\000"
 13678      6300
 13679              	.LASF306:
 13680 0c6e 6465765F 		.ascii	"dev_tension\000"
 13680      74656E73 
 13680      696F6E00 
 13681              	.LASF83:
 13682 0c7a 6D6F746F 		.ascii	"motor_driver_type\000"
 13682      725F6472 
 13682      69766572 
 13682      5F747970 
 13682      6500
 13683              	.LASF168:
 13684 0c8c 57414954 		.ascii	"WAIT_EoC\000"
 13684      5F456F43 
 13684      00
 13685              	.LASF22:
 13686 0c95 72656738 		.ascii	"reg8\000"
 13686      00
 13687              	.LASF269:
 13688 0c9a 62696E5F 		.ascii	"bin_1\000"
 13688      3100
 13689              	.LASF270:
 13690 0ca0 62696E5F 		.ascii	"bin_2\000"
 13690      3200
 13691              	.LASF245:
 13692 0ca6 695F6175 		.ascii	"i_aux\000"
 13692      7800
 13693              	.LASF137:
 13694 0cac 70726F70 		.ascii	"prop_err_fb_gain\000"
 13694      5F657272 
 13694      5F66625F 
 13694      6761696E 
 13694      00
 13695              	.LASF204:
 13696 0cbd 706F735F 		.ascii	"pos_diff\000"
 13696      64696666 
 13696      00
 13697              	.LASF279:
 13698 0cc6 726F775F 		.ascii	"row_number\000"
 13698      6E756D62 
 13698      657200
 13699              	.LASF255:
 13700 0cd1 6F766572 		.ascii	"overcurrent_control\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 302


 13700      63757272 
 13700      656E745F 
 13700      636F6E74 
 13700      726F6C00 
 13701              	.LASF271:
 13702 0ce5 63757272 		.ascii	"curr_pos\000"
 13702      5F706F73 
 13702      00
 13703              	.LASF164:
 13704 0cee 52455345 		.ascii	"RESET\000"
 13704      5400
 13705              	.LASF132:
 13706 0cf4 736C6176 		.ascii	"slave_comm_active\000"
 13706      655F636F 
 13706      6D6D5F61 
 13706      63746976 
 13706      6500
 13707              	.LASF244:
 13708 0d06 616E616C 		.ascii	"analog_read_end\000"
 13708      6F675F72 
 13708      6561645F 
 13708      656E6400 
 13709              	.LASF329:
 13710 0d16 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 13710      636F6465 
 13710      725F4C69 
 13710      6E655F43 
 13710      6F6E6E65 
 13711              	.LASF69:
 13712 0d2f 6465765F 		.ascii	"dev_type\000"
 13712      74797065 
 13712      00
 13713              	.LASF262:
 13714 0d38 656D675F 		.ascii	"emg_cycle_status\000"
 13714      6379636C 
 13714      655F7374 
 13714      61747573 
 13714      00
 13715              	.LASF119:
 13716 0d49 73745F75 		.ascii	"st_user\000"
 13716      73657200 
 13717              	.LASF103:
 13718 0d51 67656172 		.ascii	"gears_params\000"
 13718      735F7061 
 13718      72616D73 
 13718      00
 13719              	.LASF114:
 13720 0d5e 73745F65 		.ascii	"st_expansion\000"
 13720      7870616E 
 13720      73696F6E 
 13720      00
 13721              	.LASF108:
 13722 0d6b 656D675F 		.ascii	"emg_calibration_flag\000"
 13722      63616C69 
 13722      62726174 
 13722      696F6E5F 
 13722      666C6167 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 303


 13723              	.LASF43:
 13724 0d80 73745F6D 		.ascii	"st_meas\000"
 13724      65617300 
 13725              	.LASF281:
 13726 0d88 61646472 		.ascii	"addr_start\000"
 13726      5F737461 
 13726      727400
 13727              	.LASF285:
 13728 0d93 70776D5F 		.ascii	"pwm_preload_values\000"
 13728      7072656C 
 13728      6F61645F 
 13728      76616C75 
 13728      657300
 13729              	.LASF129:
 13730 0da6 6A6F7973 		.ascii	"joystick_threshold\000"
 13730      7469636B 
 13730      5F746872 
 13730      6573686F 
 13730      6C6400
 13731              	.LASF32:
 13732 0db9 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 13732      545F4D4F 
 13732      44455F45 
 13732      4D475F50 
 13732      524F504F 
 13733              	.LASF175:
 13734 0dd8 636F756E 		.ascii	"counter_status\000"
 13734      7465725F 
 13734      73746174 
 13734      757300
 13735              	.LASF295:
 13736 0de7 675F6D65 		.ascii	"g_mem\000"
 13736      6D00
 13737              	.LASF246:
 13738 0ded 656D675F 		.ascii	"emg_counter_1\000"
 13738      636F756E 
 13738      7465725F 
 13738      3100
 13739              	.LASF247:
 13740 0dfb 656D675F 		.ascii	"emg_counter_2\000"
 13740      636F756E 
 13740      7465725F 
 13740      3200
 13741              	.LASF236:
 13742 0e09 6F6E6C79 		.ascii	"only_first_time\000"
 13742      5F666972 
 13742      73745F74 
 13742      696D6500 
 13743              	.LASF11:
 13744 0e19 75696E74 		.ascii	"uint8\000"
 13744      3800
 13745              	.LASF127:
 13746 0e1f 73745F4A 		.ascii	"st_JOY_spec\000"
 13746      4F595F73 
 13746      70656300 
 13747              	.LASF231:
 13748 0e2b 76616C75 		.ascii	"value_diff\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 304


 13748      655F6469 
 13748      666600
 13749              	.LASF273:
 13750 0e36 63757272 		.ascii	"curr_ref\000"
 13750      5F726566 
 13750      00
 13751              	.LASF2:
 13752 0e3f 73686F72 		.ascii	"short int\000"
 13752      7420696E 
 13752      7400
 13753              	.LASF77:
 13754 0e49 6B5F645F 		.ascii	"k_d_dl\000"
 13754      646C00
 13755              	.LASF229:
 13756 0e50 76616C75 		.ascii	"value_encoder\000"
 13756      655F656E 
 13756      636F6465 
 13756      7200
 13757              	.LASF48:
 13758 0e5e 6A6F7973 		.ascii	"joystick\000"
 13758      7469636B 
 13758      00
 13759              	.LASF145:
 13760 0e67 6D6F746F 		.ascii	"motor\000"
 13760      7200
 13761              	.LASF308:
 13762 0e6d 6465765F 		.ascii	"dev_pwm_sat\000"
 13762      70776D5F 
 13762      73617400 
 13763              	.LASF62:
 13764 0e79 68775F6D 		.ascii	"hw_maint_date\000"
 13764      61696E74 
 13764      5F646174 
 13764      6500
 13765              	.LASF191:
 13766 0e87 66756E63 		.ascii	"function_scheduler\000"
 13766      74696F6E 
 13766      5F736368 
 13766      6564756C 
 13766      657200
 13767              	.LASF192:
 13768 0e9a 636F6D70 		.ascii	"compute_reference\000"
 13768      7574655F 
 13768      72656665 
 13768      72656E63 
 13768      6500
 13769              	.LASF218:
 13770 0eac 70726576 		.ascii	"prev_pwm\000"
 13770      5F70776D 
 13770      00
 13771              	.LASF63:
 13772 0eb5 73746174 		.ascii	"stats_period_begin_date\000"
 13772      735F7065 
 13772      72696F64 
 13772      5F626567 
 13772      696E5F64 
 13773              	.LASF286:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 305


 13774 0ecd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 13774      52784275 
 13774      66666572 
 13774      00
 13775              	.LASF310:
 13776 0eda 706F775F 		.ascii	"pow_tension\000"
 13776      74656E73 
 13776      696F6E00 
 13777              	.LASF15:
 13778 0ee6 696E7431 		.ascii	"int16\000"
 13778      3600
 13779              	.LASF116:
 13780 0eec 72656164 		.ascii	"read_exp_port_flag\000"
 13780      5F657870 
 13780      5F706F72 
 13780      745F666C 
 13780      616700
 13781              	.LASF82:
 13782 0eff 61637469 		.ascii	"activate_pwm_rescaling\000"
 13782      76617465 
 13782      5F70776D 
 13782      5F726573 
 13782      63616C69 
 13783              	.LASF75:
 13784 0f16 6B5F705F 		.ascii	"k_p_dl\000"
 13784      646C00
 13785              	.LASF44:
 13786 0f1d 65737469 		.ascii	"estim_curr\000"
 13786      6D5F6375 
 13786      727200
 13787              	.LASF307:
 13788 0f28 6465765F 		.ascii	"dev_pwm_limit\000"
 13788      70776D5F 
 13788      6C696D69 
 13788      7400
 13789              	.LASF278:
 13790 0f36 73746174 		.ascii	"status\000"
 13790      757300
 13791              	.LASF210:
 13792 0f3d 63757272 		.ascii	"curr_error\000"
 13792      5F657272 
 13792      6F7200
 13793              	.LASF330:
 13794 0f48 456E636F 		.ascii	"Encoder_Value\000"
 13794      6465725F 
 13794      56616C75 
 13794      6500
 13795              	.LASF68:
 13796 0f56 75736572 		.ascii	"user_id\000"
 13796      5F696400 
 13797              	.LASF263:
 13798 0f5e 72657374 		.ascii	"rest_cycle_status\000"
 13798      5F637963 
 13798      6C655F73 
 13798      74617475 
 13798      7300
 13799              	.LASF202:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 306


 13800 0f70 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 13800      7574655F 
 13800      536F6674 
 13800      48616E64 
 13800      5F325F6D 
 13801              	.LASF227:
 13802 0f9d 746D705F 		.ascii	"tmp_value_encoder\000"
 13802      76616C75 
 13802      655F656E 
 13802      636F6465 
 13802      7200
 13803              	.LASF177:
 13804 0faf 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 13804      4359434C 
 13804      45535F48 
 13804      616E646C 
 13804      657200
 13805              	.LASF67:
 13806 0fc2 62617564 		.ascii	"baud_rate\000"
 13806      5F726174 
 13806      6500
 13807              	.LASF140:
 13808 0fcc 66617374 		.ascii	"fast_act_threshold\000"
 13808      5F616374 
 13808      5F746872 
 13808      6573686F 
 13808      6C6400
 13809              	.LASF112:
 13810 0fdf 5350495F 		.ascii	"SPI_read_delay\000"
 13810      72656164 
 13810      5F64656C 
 13810      617900
 13811              	.LASF3:
 13812 0fee 73686F72 		.ascii	"short unsigned int\000"
 13812      7420756E 
 13812      7369676E 
 13812      65642069 
 13812      6E7400
 13813              	.LASF96:
 13814 1001 73745F65 		.ascii	"st_encoder\000"
 13814      6E636F64 
 13814      657200
 13815              	.LASF292:
 13816 100c 675F6164 		.ascii	"g_adc_meas\000"
 13816      635F6D65 
 13816      617300
 13817              	.LASF135:
 13818 1017 6D61785F 		.ascii	"max_residual_current\000"
 13818      72657369 
 13818      6475616C 
 13818      5F637572 
 13818      72656E74 
 13819              	.LASF199:
 13820 102c 454E435F 		.ascii	"ENC_L\000"
 13820      4C00
 13821              	.LASF142:
 13822 1032 73745F65 		.ascii	"st_eeprom\000"
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 307


 13822      6570726F 
 13822      6D00
 13823              	.LASF315:
 13824 103c 6A6F795F 		.ascii	"joy_LR_status\000"
 13824      4C525F73 
 13824      74617475 
 13824      7300
 13825              	.LASF338:
 13826 104a 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 13826      72635C69 
 13826      6E746572 
 13826      72757074 
 13826      696F6E73 
 13827              	.LASF195:
 13828 1061 73745F72 		.ascii	"st_refOld_p\000"
 13828      65664F6C 
 13828      645F7000 
 13829              	.LASF16:
 13830 106d 696E7433 		.ascii	"int32\000"
 13830      3200
 13831              	.LASF326:
 13832 1073 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 13832      4F465F41 
 13832      4E414C4F 
 13832      475F494E 
 13832      50555453 
 13833              	.LASF71:
 13834 1088 73745F6D 		.ascii	"st_motor\000"
 13834      6F746F72 
 13834      00
 13835              	.LASF336:
 13836 1091 6D617374 		.ascii	"master_mode\000"
 13836      65725F6D 
 13836      6F646500 
 13837              	.LASF39:
 13838 109d 46535F46 		.ascii	"FS_FILE\000"
 13838      494C4500 
 13839              	.LASF84:
 13840 10a5 706F735F 		.ascii	"pos_lim_flag\000"
 13840      6C696D5F 
 13840      666C6167 
 13840      00
 13841              	.LASF251:
 13842 10b2 4C525F6D 		.ascii	"LR_mean_value\000"
 13842      65616E5F 
 13842      76616C75 
 13842      6500
 13843              	.LASF291:
 13844 10c0 675F6D65 		.ascii	"g_measOld\000"
 13844      61734F6C 
 13844      6400
 13845              	.LASF283:
 13846 10ca 726F775F 		.ascii	"row_end\000"
 13846      656E6400 
 13847              	.LASF35:
 13848 10d2 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 13848      524F4C5F 
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 308


 13848      414E474C 
 13848      4500
 13849              	.LASF9:
 13850 10e0 5F5F696E 		.ascii	"__int32_t\000"
 13850      7433325F 
 13850      7400
 13851              	.LASF58:
 13852 10ea 77697265 		.ascii	"wire_disp\000"
 13852      5F646973 
 13852      7000
 13853              	.LASF320:
 13854 10f4 63616E5F 		.ascii	"can_write\000"
 13854      77726974 
 13854      6500
 13855              	.LASF106:
 13856 10fe 656D675F 		.ascii	"emg_max_value\000"
 13856      6D61785F 
 13856      76616C75 
 13856      6500
 13857              	.LASF90:
 13858 110c 63757272 		.ascii	"current_limit\000"
 13858      656E745F 
 13858      6C696D69 
 13858      7400
 13859              	.LASF33:
 13860 111a 53485F69 		.ascii	"SH_input_mode\000"
 13860      6E707574 
 13860      5F6D6F64 
 13860      6500
 13861              	.LASF174:
 13862 1128 4E4F4E45 		.ascii	"NONE\000"
 13862      00
 13863              	.LASF139:
 13864 112d 61637469 		.ascii	"activation_mode\000"
 13864      76617469 
 13864      6F6E5F6D 
 13864      6F646500 
 13865              	.LASF12:
 13866 113d 75696E74 		.ascii	"uint16\000"
 13866      313600
 13867              	.LASF124:
 13868 1144 72657374 		.ascii	"rest_delay\000"
 13868      5F64656C 
 13868      617900
 13869              	.LASF155:
 13870 114f 73745F66 		.ascii	"st_filter\000"
 13870      696C7465 
 13870      7200
 13871              	.LASF242:
 13872 1159 76765F76 		.ascii	"vv_value\000"
 13872      616C7565 
 13872      00
 13873              	.LASF80:
 13874 1162 6B5F645F 		.ascii	"k_d_c_dl\000"
 13874      635F646C 
 13874      00
 13875              	.LASF160:
ARM GAS  C:\Users\Mattia\AppData\Local\Temp\cceMPQGz.s 			page 309


 13876 116b 64697265 		.ascii	"direction\000"
 13876      6374696F 
 13876      6E00
 13877              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
